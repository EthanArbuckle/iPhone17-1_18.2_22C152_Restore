unsigned int *DMplusDAM(unsigned int *result, unsigned int a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;

  v6 = (unsigned __int16)(BYTE1(a4) * (_WORD)a6) + (unsigned __int16)(BYTE1(a2) * (_WORD)a3);
  v7 = (((BYTE1(a4) | (a5 << 16)) * a6) >> 16) + ((((a2 >> 8) & 0xFF00FF) * a3) >> 16);
  if (v6 >= 0xFE79) {
    v6 = 65145;
  }
  if (v7 >= 0xFE79) {
    v7 = 65145;
  }
  v8 = (a2 & 0xFF00FF) * a3;
  v9 = (unsigned __int16)(a4 * (_WORD)a6) + (unsigned __int16)v8;
  v10 = (((a4 & 0xFF00FFu) * a6) >> 16) + HIWORD(v8);
  if (v9 >= 0xFE79) {
    v11 = 65145;
  }
  else {
    v11 = v9;
  }
  if (v10 >= 0xFE79) {
    v12 = 65145;
  }
  else {
    v12 = v10;
  }
  *result = (((((v6 | (v7 << 16)) + 8388736) >> 8) & 0xFF00FF) + (v6 | (v7 << 16)) + 8388736) & 0xFF00FF00 | ((((((v11 | (v12 << 16)) + 8388736) >> 8) & 0xFF00FF) + (v11 | (v12 << 16)) + 8388736) >> 8) & 0xFF00FF;
  return result;
}

uint64_t RGBA32_shade_custom_RGB(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(result + 280);
  float v5 = *(float *)(*(void *)(result + 272) + 4);
  float v6 = v5 * (float)a2;
  float v7 = v5 * (float)a3;
  float v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  uint64_t v9 = result + 368;
  uint64_t v10 = *(void *)(result + 368);
  int v11 = 15;
  if (v10) {
    uint64_t v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  }
  else {
    int v11 = 0;
  }
  float v12 = *(float *)(result + 284);
  float v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  float v14 = *(float *)(result + 304);
  float v15 = *(float *)(result + 308);
  float v16 = *(float *)(result + 312);
  float v17 = *(float *)(result + 316);
  float v18 = *(float *)(result + 336);
  float v19 = *(float *)(result + 348);
  float v20 = *(float *)(result + 344);
  float v21 = *(float *)(result + 356);
  v22 = *(_WORD **)(result + 376);
  uint64_t v23 = *(void *)(result + 360);
  int v24 = 4 * *(_DWORD *)(result + 48);
  if (v10) {
    uint64_t v25 = ((unint64_t)a2 >> 8) & 0xF;
  }
  else {
    uint64_t v25 = 0;
  }
  v27 = *(char **)(result + 144);
  v26 = *(int **)(result + 152);
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      v36 = (_WORD *)(v23
                    + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                    + 8 * (int)(float)(v20 * (float)(v8 - v18)));
      __int16 v31 = v36[1];
      int v32 = *(unsigned __int8 *)(v9 + v25);
      int v33 = (unsigned __int16)v36[2];
      __int16 v34 = v36[3];
      __int16 v35 = v32 + *v36;
      goto LABEL_21;
    }
    if (v22)
    {
      __int16 v31 = v22[1];
      int v32 = *(unsigned __int8 *)(v9 + v25);
      int v33 = (unsigned __int16)v22[2];
      __int16 v34 = v22[3];
      __int16 v35 = v32 + *v22;
LABEL_21:
      __int16 v37 = v32 + v31;
      result = (v32 + v33) >> 8;
      int *v26 = v37 & 0xFF00 | HIBYTE(v35) | (((unsigned __int16)(v32 + v33) >> 8) << 16) & 0xFFFFFF | (((unsigned __int16)(v32 + v34) >> 8) << 24);
      char v38 = -1;
      goto LABEL_22;
    }
    char v38 = 0;
LABEL_22:
    uint64_t v25 = (v25 + 1) & v11;
    float v8 = v4 + v8;
    float v13 = v12 + v13;
    ++v26;
    *v27++ = v38;
    --a4;
  }
  while (a4);
  return result;
}

void RGBA32_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(a1 + 280);
  float v5 = *(float *)(*(void *)(a1 + 272) + 4);
  float v6 = v5 * (float)a2;
  float v7 = v5 * (float)a3;
  float v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  uint64_t v9 = *(void *)(a1 + 368);
  if (v9) {
    uint64_t v10 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  }
  else {
    uint64_t v10 = a1 + 368;
  }
  if (v9) {
    int v11 = 15;
  }
  else {
    int v11 = 0;
  }
  float v12 = *(float *)(a1 + 284);
  float v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  float v32 = *(float *)(a1 + 336);
  float v33 = *(float *)(a1 + 304);
  float v15 = *(float *)(a1 + 344);
  uint64_t v16 = *(void *)(a1 + 360);
  float v18 = *(unsigned char **)(a1 + 144);
  float v17 = *(int **)(a1 + 152);
  if (v9) {
    uint64_t v19 = ((unint64_t)a2 >> 8) & 0xF;
  }
  else {
    uint64_t v19 = 0;
  }
  float v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    float v21 = v15 * (float)((float)(v33 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v32);
    unsigned int v22 = vcvtms_s32_f32(v21);
    float v23 = ceilf(v21);
    float v24 = (float)((float)(v21 - (float)(int)floorf(v21)) * 255.0) + 0.5;
    unsigned int v25 = vcvtms_s32_f32(v15 + v21);
    if (v21 < 0.0) {
      unsigned int v22 = v25;
    }
    float v26 = ceilf(v21 - v15);
    if (v21 <= v15) {
      float v27 = v23;
    }
    else {
      float v27 = v26;
    }
    v28 = (unsigned __int16 *)(v16 + 2 * (int)(4 * v22));
    int v29 = 255 - (int)v24;
    v30 = (unsigned __int16 *)(v16 + 8 * (int)v27);
    int v31 = *(unsigned __int8 *)(v10 + v19);
    *v17++ = ((int)v24 * v30[2] + (v31 << 8) + v29 * v28[2]) & 0xFF0000 | ((_WORD)v31
                                                                         + (unsigned __int16)(((int)v24 * v30[1]
                                                                                             + v29
                                                                                             * v28[1]) >> 8)) & 0xFF00 | ((unsigned __int16)(v31 + (((int)v24 * *v30 + v29 * *v28) >> 8)) >> 8) | (((unsigned __int16)(v31 + (((int)v24 * v30[3] + v29 * v28[3]) >> 8)) >> 8) << 24);
    uint64_t v19 = (v19 + 1) & v11;
    float v8 = v4 + v8;
    float v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

void RGBA32_shade_radial_RGB(uint64_t a1, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  float v13 = *(float *)(a1 + 280);
  float v14 = *(float *)(a1 + 284);
  float v15 = *(float *)(*(void *)(a1 + 272) + 4);
  float v16 = v15 * (float)a2;
  float v17 = v15 * (float)(uint64_t)a3;
  float v18 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v17) + (float)(v13 * v16));
  float v19 = *(float *)(a1 + 300) + (float)((float)(v17 * *(float *)(a1 + 292)) + (float)(v14 * v16));
  uint64_t v21 = *(void *)(a1 + 400);
  float v22 = *(float *)(a1 + 336);
  float v23 = *(float *)(a1 + 344);
  float v24 = *(float *)(a1 + 304);
  float v25 = *(float *)(a1 + 308);
  int v26 = *(_DWORD *)(a1 + 324);
  LODWORD(a12) = *(_DWORD *)(v21 + 8);
  float v27 = *(float *)(v21 + 16);
  float v28 = *(float *)(v21 + 20);
  float v29 = *(float *)(v21 + 28);
  uint64_t v32 = a1 + 144;
  v30 = *(char **)(a1 + 144);
  uint64_t v31 = *(void *)(v32 + 8);
  float v33 = *(unsigned __int16 **)(a1 + 376);
  uint64_t v34 = *(void *)(a1 + 360);
  uint64_t v35 = ((unint64_t)a2 >> 8) & 0xF;
  if (*(float *)&a12 != 0.0 || v29 != 0.0 || v14 != 0.0)
  {
    int v47 = *(_DWORD *)(a1 + 320);
    float v48 = *(float *)(v21 + 12);
    float v49 = *(float *)(v21 + 24);
    float v50 = *(float *)(v21 + 32);
    uint64_t v51 = a1 + 368;
    uint64_t v52 = *(void *)(a1 + 368);
    uint64_t v53 = v52 + ((a3 >> 4) & 0xF0);
    BOOL v39 = v52 == 0;
    int v54 = 15;
    if (v39)
    {
      int v54 = 0;
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v51 = v53;
    }
    float v55 = -v49;
    float v56 = v25 - v24;
    while (1)
    {
      float v57 = v55 + (float)((float)(v18 + v18) * *(float *)&a12);
      float v58 = (float)((float)(v19 * v19) + (float)(v18 * v18)) - v29;
      if (v28 == 0.0)
      {
        float v65 = v58 / v57;
      }
      else
      {
        float v59 = (float)((float)(v28 * -4.0) * v58) + (float)(v57 * v57);
        if (v59 < 0.0) {
          goto LABEL_56;
        }
        float v60 = sqrtf(v59);
        float v61 = v50 * (float)(v57 - v60);
        float v62 = v57 + v60;
        float v63 = v50 * v62;
        BOOL v64 = (float)(v50 * v62) <= v61;
        if ((float)(v50 * v62) <= v61) {
          float v65 = v50 * v62;
        }
        else {
          float v65 = v61;
        }
        if (v64) {
          float v63 = v61;
        }
        if (v63 < 0.0)
        {
          BOOL v66 = v63 < v48;
LABEL_42:
          int v67 = v47;
          if (v66) {
            goto LABEL_56;
          }
LABEL_43:
          if ((v67 & 0x80000000) == 0) {
            goto LABEL_55;
          }
          goto LABEL_56;
        }
        if (v63 <= 1.0)
        {
          float v68 = v24 + (float)(v63 * v56);
          goto LABEL_54;
        }
        if ((v26 & 0x80000000) == 0)
        {
          int v67 = v26;
          if (v63 <= v27)
          {
LABEL_55:
            v69 = (_WORD *)(v34 + 8 * v67);
            unsigned __int16 v70 = v69[1];
            __int16 v71 = *(unsigned __int8 *)(v51 + v35);
            unsigned __int16 v72 = v69[2];
            unsigned __int16 v73 = v69[3];
            __int16 v74 = v71 + *v69;
            goto LABEL_58;
          }
        }
      }
      if (v65 < 0.0)
      {
        BOOL v66 = v65 < v48;
        goto LABEL_42;
      }
      if (v65 > 1.0)
      {
        int v67 = v26;
        if (v65 > v27) {
          goto LABEL_56;
        }
        goto LABEL_43;
      }
      float v68 = v24 + (float)(v65 * v56);
LABEL_54:
      int v67 = (int)(float)(v23 * (float)(v68 - v22));
      if ((v67 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      if (!v33)
      {
        char v75 = 0;
        goto LABEL_60;
      }
      unsigned __int16 v70 = v33[1];
      __int16 v71 = *(unsigned __int8 *)(v51 + v35);
      unsigned __int16 v72 = v33[2];
      unsigned __int16 v73 = v33[3];
      __int16 v74 = v71 + *v33;
LABEL_58:
      *(_DWORD *)uint64_t v31 = (v71 + v70) & 0xFF00 | HIBYTE(v74) | (((unsigned __int16)(v71 + v72) >> 8) << 16) & 0xFFFFFF | (((unsigned __int16)(v71 + v73) >> 8) << 24);
      char v75 = -1;
LABEL_60:
      uint64_t v35 = (v35 + 1) & v54;
      float v18 = v13 + v18;
      float v19 = v14 + v19;
      v31 += 4;
      *v30++ = v75;
      if (!--a4) {
        return;
      }
    }
  }
  uint64_t v36 = a1 + 368;
  uint64_t v37 = *(void *)(a1 + 368);
  int v38 = (BYTE1(a2) + 1) & 0xF;
  BOOL v39 = v37 == 0;
  if (v37) {
    uint64_t v40 = v37 + ((a3 >> 4) & 0xF0);
  }
  else {
    uint64_t v40 = v36;
  }
  if (v39) {
    LODWORD(v41) = 0;
  }
  else {
    LODWORD(v41) = v38;
  }
  if (v39) {
    LODWORD(v42) = 0;
  }
  else {
    LODWORD(v42) = v35;
  }
  if (v39) {
    int v43 = 0;
  }
  else {
    int v43 = 15;
  }
  float v44 = v19 * v19;
  float v45 = -v28;
  if (v44 <= (float)-v28)
  {
    float v76 = fabsf(*(float *)(v21 + 32));
    float v77 = v28 * -4.0;
    float v78 = v25 - v24;
    v79 = (unsigned __int16 *)(v34 + 8 * v26);
    int v80 = a4 + 2;
    while (1)
    {
      float v81 = v44 + (float)(v18 * v18);
      float v82 = v13 + v18;
      float v83 = v44 + (float)(v82 * v82);
      if (v81 > v45 && v83 > v45)
      {
        if (v26 < 0)
        {
          if (!v33)
          {
            char v117 = 0;
            char v116 = 0;
            goto LABEL_84;
          }
          unsigned __int16 v92 = *v33;
          unsigned __int16 v93 = v33[1];
          int v94 = v33[2];
          int v95 = v33[3];
        }
        else
        {
          unsigned __int16 v92 = *v79;
          unsigned __int16 v93 = v79[1];
          int v94 = v79[2];
          int v95 = v79[3];
        }
        int v110 = *(unsigned __int8 *)(v40 + v42);
        __int16 v111 = v110 + v92;
        __int16 v112 = v110 + v93;
        unsigned int v113 = (v110 + v94) >> 8;
        unsigned int v114 = (v110 + v95) >> 8;
        __int16 v115 = *(unsigned __int8 *)(v40 + v41);
        __int16 v106 = v115 + v92;
        __int16 v107 = v115 + v93;
        __int16 v108 = v115 + v94;
        __int16 v109 = v115 + v95;
        *(_DWORD *)uint64_t v31 = v112 & 0xFF00 | HIBYTE(v111) | (v113 << 16) & 0xFFFFFF | (v114 << 24);
        goto LABEL_82;
      }
      float v85 = sqrtf(v77 * v83);
      float v86 = v76 * sqrtf(v77 * v81);
      float v87 = v76 * v85;
      int v88 = (int)(float)(v23 * (float)((float)(v24 + (float)(v86 * v78)) - v22));
      int v89 = (int)(float)(v23 * (float)((float)(v24 + (float)((float)(v76 * v85) * v78)) - v22));
      if (v86 <= 1.0 && v87 <= 1.0)
      {
        v96 = (_WORD *)(v34 + 8 * v88);
        v97 = (__int16 *)(v34 + 8 * v89);
        __int16 v98 = *v97;
        __int16 v99 = v97[1];
        __int16 v100 = v97[2];
        __int16 v101 = v97[3];
        LODWORD(v97) = *(unsigned __int8 *)(v40 + v42);
        __int16 v102 = (_WORD)v97 + *v96;
        __int16 v103 = (_WORD)v97 + v96[1];
        unsigned int v104 = (v97 + (unsigned __int16)v96[2]) >> 8;
        LODWORD(v96) = (v97 + (unsigned __int16)v96[3]) >> 8;
        __int16 v105 = *(unsigned __int8 *)(v40 + v41);
        __int16 v106 = v105 + v98;
        __int16 v107 = v105 + v99;
        __int16 v108 = v105 + v100;
        __int16 v109 = v105 + v101;
        *(_DWORD *)uint64_t v31 = v103 & 0xFF00 | HIBYTE(v102) | (v104 << 16) & 0xFFFFFF | (v96 << 24);
LABEL_82:
        char v116 = -1;
        goto LABEL_83;
      }
      if (v86 <= 1.0)
      {
        if ((v88 & 0x80000000) == 0)
        {
          uint64_t v91 = 4 * v88;
LABEL_88:
          v118 = (_WORD *)(v34 + 2 * v91);
          unsigned __int16 v119 = v118[1];
          __int16 v120 = *(unsigned __int8 *)(v40 + v42);
          unsigned __int16 v121 = v118[2];
          unsigned __int16 v122 = v118[3];
          __int16 v123 = v120 + *v118;
          goto LABEL_91;
        }
      }
      else if (v86 <= v27)
      {
        uint64_t v91 = 4 * v26;
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_88;
        }
      }
      if (!v33)
      {
        char v116 = 0;
        goto LABEL_92;
      }
      unsigned __int16 v119 = v33[1];
      __int16 v120 = *(unsigned __int8 *)(v40 + v42);
      unsigned __int16 v121 = v33[2];
      unsigned __int16 v122 = v33[3];
      __int16 v123 = v120 + *v33;
LABEL_91:
      *(_DWORD *)uint64_t v31 = (v120 + v119) & 0xFF00 | HIBYTE(v123) | (((unsigned __int16)(v120 + v121) >> 8) << 16) & 0xFFFFFF | (((unsigned __int16)(v120 + v122) >> 8) << 24);
      char v116 = -1;
LABEL_92:
      if (v87 <= 1.0)
      {
        if (v89 < 0) {
          goto LABEL_99;
        }
        uint64_t v124 = 4 * v89;
      }
      else if (v87 > v27 || (uint64_t v124 = 4 * v26, v26 < 0))
      {
LABEL_99:
        if (!v33)
        {
          char v117 = 0;
          goto LABEL_84;
        }
        __int16 v130 = *(unsigned __int8 *)(v40 + v41);
        __int16 v106 = v130 + *v33;
        __int16 v107 = v130 + v33[1];
        __int16 v108 = v130 + v33[2];
        __int16 v109 = v130 + v33[3];
        goto LABEL_83;
      }
      v125 = (_WORD *)(v34 + 2 * v124);
      __int16 v126 = v125[1];
      __int16 v127 = *(unsigned __int8 *)(v40 + v41);
      __int16 v128 = v125[2];
      __int16 v129 = v125[3];
      __int16 v106 = v127 + *v125;
      __int16 v107 = v127 + v126;
      __int16 v108 = v127 + v128;
      __int16 v109 = v127 + v129;
LABEL_83:
      *(_DWORD *)(v31 + 4) = v107 & 0xFF00 | HIBYTE(v106) | (HIBYTE(v108) << 16) & 0xFFFFFF | (HIBYTE(v109) << 24);
      char v117 = -1;
LABEL_84:
      float v18 = v13 + v82;
      LOBYTE(v42) = (v42 + 1) & v43;
      LOBYTE(v41) = (v41 + 1) & v43;
      v31 += 8;
      char *v30 = v116;
      v30[1] = v117;
      v30 += 2;
      v80 -= 2;
      if (v80 <= 2) {
        return;
      }
    }
  }
  if (v33 || (v26 & 0x80000000) == 0)
  {
    v131 = (unsigned __int16 *)(v34 + 8 * v26);
    if (v26 >= 0) {
      v132 = v131;
    }
    else {
      v132 = v33;
    }
    int32x2_t v133 = vdup_n_s32(*v132);
    int32x2_t v134 = vdup_n_s32(v132[1]);
    int32x2_t v135 = vdup_n_s32(v132[2]);
    int32x2_t v136 = vdup_n_s32(v132[3]);
    int v137 = a4 + 4;
    do
    {
      v138 = (unsigned char *)(v40 + v42);
      uint64_t v42 = (v42 + 1) & v43;
      LOBYTE(a12) = *v138;
      BYTE4(a12) = *(unsigned char *)(v40 + v41);
      int32x2_t v139 = (int32x2_t)vand_s8(*(int8x8_t *)&a12, (int8x8_t)0xFF000000FFLL);
      int8x8_t v140 = vorr_s8(vorr_s8((int8x8_t)(*(void *)&vshr_n_u32((uint32x2_t)vadd_s32(v133, v139), 8uLL) & 0xFFFFFEFFFFFFFEFFLL), vand_s8((int8x8_t)vadd_s32(v134, v139), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v135, v139), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(void *)&vshl_n_s32(vadd_s32(v136, v139), 0x10uLL) & 0xFF00FFFFFF00FFFFLL)));
      *(int8x8_t *)uint64_t v31 = v140;
      uint64_t v41 = (v41 + 1) & v43;
      v140.i8[0] = *(unsigned char *)(v40 + v42);
      v140.i8[4] = *(unsigned char *)(v40 + v41);
      int32x2_t v141 = (int32x2_t)vand_s8(v140, (int8x8_t)0xFF000000FFLL);
      a12 = COERCE_DOUBLE(vorr_s8(vorr_s8((int8x8_t)(*(void *)&vshr_n_u32((uint32x2_t)vadd_s32(v133, v141), 8uLL) & 0xFFFFFEFFFFFFFEFFLL), vand_s8((int8x8_t)vadd_s32(v134, v141), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v135, v141), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(void *)&vshl_n_s32(vadd_s32(v136, v141), 0x10uLL) & 0xFF00FFFFFF00FFFFLL))));
      *(double *)(v31 + 8) = a12;
      *(_DWORD *)v30 = -1;
      v30 += 4;
      v137 -= 4;
      v31 += 16;
    }
    while (v137 > 4);
  }
  else
  {
    if (a4 >= 4) {
      int v46 = 4;
    }
    else {
      int v46 = a4;
    }
    bzero(v30, ((a4 - v46 + 3) & 0xFFFFFFFC) + 4);
  }
}

void RGBA32_mark_image_RGB24(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  int v38 = a2;
  int v10 = *(_DWORD *)(a1 + 28);
  int v11 = *(_DWORD *)(a1 + 4);
  int v12 = *(_DWORD *)(a1 + 8);
  int v40 = v12;
  int v41 = v11;
  float v13 = *(int **)(a1 + 136);
  if (v13)
  {
    int v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v42) = *(_DWORD *)(a1 + 108);
    HIDWORD(v42) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v42, v11, v12);
    float v16 = v15;
    if (v15) {
      goto LABEL_28;
    }
  }
  int v17 = 0;
  int v18 = 0;
  float v16 = 0;
  uint64_t v42 = 0;
  if (v11 < 0) {
LABEL_4:
  }
    _CGHandleAssert("CGSConvertRGB888toRGBA8888", 160, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0) {
      _CGHandleAssert("CGSConvertRGB888toRGBA8888", 160, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v12);
    }
    int v19 = *(_DWORD *)(a1 + 76);
    uint64_t v20 = *(void *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * v8) + 3 * (v17 + v38);
    uint64_t v21 = *(void *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17);
    uint64_t v22 = v19 * (uint64_t)v8;
    uint64_t v23 = v12 - 1;
    uint64_t v24 = v20 + (int)v23 * v22;
    uint64_t v25 = v21 + v23 * v10;
    int v26 = (char *)(v10 < 0 ? v25 : v21);
    size_t v27 = v10 >= 0 ? v10 : -v10;
    size_t v28 = v10 >= 0 ? v22 : -(int)v22;
    float v29 = (char *)(v10 < 0 ? v24 : v20);
    if ((v28 & 0x80000000) != 0)
    {
      v30 = (char *)malloc_type_malloc((int)v27 * v12, 0x405B1530uLL);
      uint64_t v31 = v30;
      if (v12 >= 1)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (v11 >= 1)
          {
            float v33 = &v30[i * v27];
            int v34 = v11;
            uint64_t v35 = &v29[i * (int)v28];
            do
            {
              char v36 = v35[2];
              *(_WORD *)float v33 = *(_WORD *)v35;
              v33[2] = v36;
              v33[3] = -1;
              v35 += 3;
              v33 += 4;
              --v34;
            }
            while (v34);
          }
        }
      }
      CGBlt_copyBytes(4 * v11, v12, v30, v26, v27, v27);
      free(v31);
      int v8 = a4;
      if (!v16) {
        return;
      }
    }
    else
    {
      v44.data = v29;
      v44.height = v12;
      v44.width = v11;
      v44.rowBytes = v28;
      v43.data = v26;
      v43.height = v12;
      v43.width = v11;
      v43.rowBytes = v27;
      vImageConvert_RGB888toRGBA8888(&v44, 0, 0xFFu, &v43, 0, 0);
      if (!v16) {
        return;
      }
    }
LABEL_28:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v42 + 1, &v42, &v41, &v40)) {
      break;
    }
    int v18 = v42;
    int v17 = HIDWORD(v42);
    int v12 = v40;
    int v11 = v41;
    if (v41 < 0) {
      goto LABEL_4;
    }
  }
  free(v16);
}

void RGBA32_mark_image_RGB48(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v36 = a2;
  uint64_t v9 = *(unsigned int *)(a1 + 28);
  uint64_t v10 = (int)v9;
  int v11 = *(_DWORD *)(a1 + 4);
  int v12 = *(_DWORD *)(a1 + 8);
  int v40 = v12;
  int v41 = v11;
  float v13 = *(int **)(a1 + 136);
  if (v13)
  {
    int v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v42) = *(_DWORD *)(a1 + 108);
    HIDWORD(v42) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v42, v11, v12);
    float v16 = v15;
    if (v15) {
      goto LABEL_24;
    }
  }
  int v17 = 0;
  int v18 = 0;
  float v16 = 0;
  uint64_t v42 = 0;
  if (v11 < 0) {
LABEL_4:
  }
    _CGHandleAssert("CGSConvertRGB16toRGBA8888", 534, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0) {
      _CGHandleAssert("CGSConvertRGB16toRGBA8888", 534, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v12);
    }
    BOOL v39 = v16;
    int v19 = *(_DWORD *)(a1 + 76);
    uint64_t v20 = *(void *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * a4) + 6 * (v17 + v36);
    uint64_t v21 = (char *)(*(void *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17));
    uint64_t v22 = v19 * (uint64_t)a4;
    uint64_t v23 = v12 - 1;
    if ((v9 & 0x80000000) != 0)
    {
      v20 += (int)v23 * v22;
      LODWORD(v22) = -(int)v22;
      uint64_t v24 = v10;
      v21 += v23 * v10;
      uint64_t v25 = v9;
      int v26 = -(int)v9;
    }
    else
    {
      uint64_t v24 = v10;
      uint64_t v25 = v9;
      int v26 = v9;
    }
    unint64_t v27 = v20 + (int)((v22 * v23) & ((int)v22 >> 31));
    size_t v28 = v21;
    if (v27 <= (unint64_t)&v21[v12 * (uint64_t)v26])
    {
      int v29 = (int)v22 >= 0 ? v22 : -(int)v22;
      size_t v28 = v21;
      if (v27 + v12 * (uint64_t)v29 >= (unint64_t)v21) {
        size_t v28 = (char *)malloc_type_malloc(v12 * (uint64_t)v26, 0x3B357573uLL);
      }
    }
    if (v12 >= 1)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (v11 >= 1)
        {
          uint64_t v31 = &v28[i * v26];
          int v32 = v11;
          float v33 = (char *)(v20 + i * (int)v22);
          do
          {
            char v34 = v33[2];
            char v35 = v33[4];
            *uint64_t v31 = *v33;
            v31[1] = v34;
            v31[2] = v35;
            v31[3] = -1;
            v33 += 6;
            v31 += 4;
            --v32;
          }
          while (v32);
        }
      }
    }
    if (v28 != v21)
    {
      CGBlt_copyBytes(4 * v11, v12, v28, v21, v26, v26);
      free(v28);
    }
    uint64_t v10 = v24;
    uint64_t v9 = v25;
    float v16 = v39;
    if (!v39) {
      break;
    }
LABEL_24:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v42 + 1, &v42, &v41, &v40))
    {
      free(v16);
      return;
    }
    int v18 = v42;
    int v17 = HIDWORD(v42);
    int v12 = v40;
    int v11 = v41;
    if (v41 < 0) {
      goto LABEL_4;
    }
  }
}

void RGBA32_mark_image_rgb48(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v38 = a2;
  uint64_t v9 = *(unsigned int *)(a1 + 28);
  uint64_t v10 = (int)v9;
  int v11 = *(_DWORD *)(a1 + 4);
  int v12 = *(_DWORD *)(a1 + 8);
  int v42 = v12;
  int v43 = v11;
  float v13 = *(int **)(a1 + 136);
  if (v13)
  {
    int v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v44) = *(_DWORD *)(a1 + 108);
    HIDWORD(v44) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v44, v11, v12);
    float v16 = v15;
    if (v15) {
      goto LABEL_24;
    }
  }
  int v17 = 0;
  int v18 = 0;
  float v16 = 0;
  uint64_t v44 = 0;
  if (v11 < 0) {
LABEL_4:
  }
    _CGHandleAssert("CGSConvertrgb16toRGBA8888", 1030, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0) {
      _CGHandleAssert("CGSConvertrgb16toRGBA8888", 1030, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v12);
    }
    int v41 = v16;
    int v19 = *(_DWORD *)(a1 + 76);
    uint64_t v20 = *(void *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * a4) + 6 * (v17 + v38);
    uint64_t v21 = (char *)(*(void *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17));
    uint64_t v22 = v19 * (uint64_t)a4;
    uint64_t v23 = v12 - 1;
    if ((v9 & 0x80000000) != 0)
    {
      v20 += (int)v23 * v22;
      LODWORD(v22) = -(int)v22;
      uint64_t v24 = v10;
      v21 += v23 * v10;
      uint64_t v25 = v9;
      int v26 = -(int)v9;
    }
    else
    {
      uint64_t v24 = v10;
      uint64_t v25 = v9;
      int v26 = v9;
    }
    unint64_t v27 = v20 + (int)((v22 * v23) & ((int)v22 >> 31));
    size_t v28 = v21;
    if (v27 <= (unint64_t)&v21[v12 * (uint64_t)v26])
    {
      int v29 = (int)v22 >= 0 ? v22 : -(int)v22;
      size_t v28 = v21;
      if (v27 + v12 * (uint64_t)v29 >= (unint64_t)v21) {
        size_t v28 = (char *)malloc_type_malloc(v12 * (uint64_t)v26, 0xF2FD8E3FuLL);
      }
    }
    if (v12 >= 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = (char *)(v20 + 5);
      do
      {
        if (v11 >= 1)
        {
          int v32 = &v28[v30 * v26];
          int v33 = v11;
          char v34 = v31;
          do
          {
            char v35 = *(v34 - 4);
            char v36 = *(v34 - 2);
            char v37 = *v34;
            v34 += 6;
            *int v32 = v35;
            v32[1] = v36;
            v32[2] = v37;
            v32[3] = -1;
            v32 += 4;
            --v33;
          }
          while (v33);
        }
        ++v30;
        v31 += (int)v22;
      }
      while (v30 != v12);
    }
    if (v28 != v21)
    {
      CGBlt_copyBytes(4 * v11, v12, v28, v21, v26, v26);
      free(v28);
    }
    uint64_t v10 = v24;
    uint64_t v9 = v25;
    float v16 = v41;
    if (!v41) {
      break;
    }
LABEL_24:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v44 + 1, &v44, &v43, &v42))
    {
      free(v16);
      return;
    }
    int v18 = v44;
    int v17 = HIDWORD(v44);
    int v12 = v42;
    int v11 = v43;
    if (v43 < 0) {
      goto LABEL_4;
    }
  }
}

void RGBA32_mark_image_RGBA64(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v63 = a2;
  int v62 = *(_DWORD *)(a1 + 28);
  int v9 = *(_DWORD *)(a1 + 4);
  int v10 = *(_DWORD *)(a1 + 8);
  int v68 = v10;
  int v69 = v9;
  int v11 = *(int **)(a1 + 136);
  if (v11)
  {
    int v12 = *(_DWORD *)(a1 + 104);
    LODWORD(v70) = *(_DWORD *)(a1 + 108);
    HIDWORD(v70) = v12;
    shape_enum_clip_alloc(a1, a2, v11, 1, 1, 1, v12, v70, v9, v10);
    int v14 = v13;
    if (v13) {
      goto LABEL_50;
    }
  }
  int v15 = 0;
  int v16 = 0;
  int v14 = 0;
  uint64_t v70 = 0;
  while (1)
  {
    int v17 = *(_DWORD *)(a1 + 76);
    uint64_t v18 = *(void *)(a1 + 88) + v17 * (uint64_t)(a4 + v16 * v8) + 8 * (v15 + a3);
    uint64_t v19 = *(int *)(a1 + 16) + (uint64_t)v16;
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = (char *)(*(void *)(a1 + 40) + v19 * v62 + 4 * (*(_DWORD *)(a1 + 12) + v15));
    uint64_t v22 = v17 * (uint64_t)v8;
    int v67 = v14;
    if (v63 == 2)
    {
      if (v20) {
        unsigned int v23 = 0;
      }
      else {
        unsigned int v23 = -16777216;
      }
      if (v10 >= 1)
      {
        int8x16_t v24 = (int8x16_t)vdupq_n_s32(v23);
        v25.i64[0] = 0xFF000000FFLL;
        v25.i64[1] = 0xFF000000FFLL;
        v26.i64[0] = 0xFF000000FF000000;
        v26.i64[1] = 0xFF000000FF000000;
        v27.i64[0] = 0x1000100010001;
        v27.i64[1] = 0x1000100010001;
        do
        {
          int v28 = v9;
          int v29 = (uint32x4_t *)v21;
          uint64_t v30 = (__int32 *)v18;
          unsigned int v31 = v9;
          if (v9 >= 4)
          {
            do
            {
              v32.i32[0] = v30[1];
              v32.i32[1] = v30[3];
              v32.i32[2] = v30[5];
              v32.i32[3] = v30[7];
              int8x16_t v33 = (int8x16_t)vshlq_n_s32(v32, 8uLL);
              int32x4_t v34 = (int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x18uLL);
              int v35 = vaddvq_s32(v34);
              if (v35)
              {
                v36.i32[0] = *v30;
                v36.i32[1] = v30[2];
                v36.i32[2] = v30[4];
                v36.i32[3] = v30[6];
                int32x4_t v37 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshrq_n_u32(v36, 8uLL) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), vandq_s8((int8x16_t)v36, v25)), vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v32, 0x10uLL) & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), vandq_s8(v33, v26)));
                if (v35 != 1020)
                {
                  int32x4_t v38 = (int32x4_t)veorq_s8((int8x16_t)v34, v25);
                  v39.i16[0] = v29->u8[0];
                  v39.i16[1] = BYTE2(v29->u32[0]);
                  v39.i16[2] = BYTE4(v29->i64[0]);
                  v39.i16[3] = BYTE6(v29->i64[0]);
                  v39.i16[4] = v29->i64[1];
                  v39.i16[5] = BYTE2(v29->i64[1]);
                  v39.i16[6] = BYTE12(*(unsigned long long *)v29);
                  v39.i16[7] = BYTE14(*(unsigned long long *)v29);
                  int32x4_t v40 = vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v29, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v38);
                  int32x4_t v41 = vmulq_s32(v39, v38);
                  int32x4_t v37 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v41, v27), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v41, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), vaddq_s32(v37, (int32x4_t)(*(_OWORD *)&vaddq_s32(vaddq_s32(v40, v27), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v40, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00))));
                }
                *(int8x16_t *)int v29 = vorrq_s8((int8x16_t)v37, v24);
              }
              int v28 = v31 - 4;
              v30 += 8;
              ++v29;
              BOOL v42 = v31 > 7;
              v31 -= 4;
            }
            while (v42);
          }
          if (v28 >= 1)
          {
            int v43 = v28 + 1;
            do
            {
              __int32 v44 = v30[1];
              if (BYTE2(v44))
              {
                int v45 = (*v30 >> 8) & 0xFF00 | *v30 | (v30[1] << 16) & 0xFFFFFF | (BYTE2(v30[1]) << 24);
                if (BYTE2(v44) != 255) {
                  v45 += ((((v29->i32[0] & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)
                }
                          + 65537
                          + ((((v29->i32[0] & 0xFF00FF) * (BYTE2(v44) ^ 0xFFu)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
                       + (((((unsigned __int32)v29->i32[0] >> 8) & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)
                         + 65537
                         + ((((((unsigned __int32)v29->i32[0] >> 8) & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
                v29->i32[0] = v45 | v23;
              }
              int v29 = (uint32x4_t *)((char *)v29 + 4);
              --v43;
              v30 += 2;
            }
            while (v43 > 1);
          }
          v18 += v22;
          v21 += v62;
          BOOL v42 = v10-- <= 1;
        }
        while (!v42);
      }
    }
    else
    {
      BOOL v46 = 0;
      if (v20) {
        BOOL v46 = *(void *)(a1 + 96) != 0;
      }
      if (v9 < 0) {
        _CGHandleAssert("CGSConvertRGBA16toRGBA8888", 568, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v9);
      }
      if (v10 < 0) {
        _CGHandleAssert("CGSConvertRGBA16toRGBA8888", 568, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v10);
      }
      uint64_t v47 = v10 - 1;
      if (v62 < 0)
      {
        v18 += (int)v47 * (uint64_t)(int)v22;
        LODWORD(v22) = -(int)v22;
        int v48 = -v62;
        v21 += v47 * v62;
      }
      else
      {
        int v48 = v62;
      }
      unint64_t v49 = v18 + (int)((v22 * v47) & ((int)v22 >> 31));
      float v50 = v21;
      if (v49 <= (unint64_t)&v21[v10 * (uint64_t)v48])
      {
        int v51 = (int)v22 >= 0 ? v22 : -(int)v22;
        float v50 = v21;
        if (v49 + v10 * (uint64_t)v51 >= (unint64_t)v21)
        {
          int v52 = v48;
          uint64_t v53 = (char *)malloc_type_malloc(v10 * (uint64_t)v48, 0x1951E260uLL);
          int v48 = v52;
          float v50 = v53;
        }
      }
      if (v10 >= 1)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (v9 >= 1)
          {
            float v55 = &v50[i * v48];
            int v56 = v9;
            float v57 = (char *)(v18 + i * (int)v22);
            do
            {
              char v58 = v57[2];
              char v59 = v57[4];
              char v60 = v57[6];
              if (!v46) {
                char v60 = -1;
              }
              *float v55 = *v57;
              v55[1] = v58;
              v55[2] = v59;
              v55[3] = v60;
              v57 += 8;
              v55 += 4;
              --v56;
            }
            while (v56);
          }
        }
      }
      int v8 = a5;
      if (v50 != v21)
      {
        CGBlt_copyBytes(4 * v9, v10, v50, v21, v48, v48);
        free(v50);
      }
    }
    int v14 = v67;
    if (!v67) {
      break;
    }
LABEL_50:
    if (!shape_enum_clip_next((uint64_t)v14, (int *)&v70 + 1, &v70, &v69, &v68))
    {
      free(v14);
      return;
    }
    int v16 = v70;
    int v15 = HIDWORD(v70);
    int v10 = v68;
    int v9 = v69;
  }
}

void RGBA32_mark_image_rgba64(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v66 = a2;
  int v65 = *(_DWORD *)(a1 + 28);
  int v9 = *(_DWORD *)(a1 + 4);
  int v10 = *(_DWORD *)(a1 + 8);
  int v71 = v10;
  int v72 = v9;
  int v11 = *(int **)(a1 + 136);
  if (v11)
  {
    int v12 = *(_DWORD *)(a1 + 104);
    LODWORD(v73) = *(_DWORD *)(a1 + 108);
    HIDWORD(v73) = v12;
    shape_enum_clip_alloc(a1, a2, v11, 1, 1, 1, v12, v73, v9, v10);
    int v14 = v13;
    if (v13) {
      goto LABEL_50;
    }
  }
  int v15 = 0;
  int v16 = 0;
  int v14 = 0;
  uint64_t v73 = 0;
  while (1)
  {
    int v17 = *(_DWORD *)(a1 + 76);
    uint64_t v18 = *(void *)(a1 + 88) + v17 * (uint64_t)(a4 + v16 * v8) + 8 * (v15 + a3);
    uint64_t v19 = *(int *)(a1 + 16) + (uint64_t)v16;
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = (char *)(*(void *)(a1 + 40) + v19 * v65 + 4 * (*(_DWORD *)(a1 + 12) + v15));
    uint64_t v22 = v17 * (uint64_t)v8;
    uint64_t v70 = v14;
    if (v66 == 2)
    {
      if (v20) {
        unsigned int v23 = 0;
      }
      else {
        unsigned int v23 = -16777216;
      }
      if (v10 >= 1)
      {
        int8x16_t v24 = (int8x16_t)vdupq_n_s32(v23);
        v25.i64[0] = 0xFF0000FF00;
        v25.i64[1] = 0xFF0000FF00;
        v26.i64[0] = 0xFF00000000FFLL;
        v26.i64[1] = 0xFF00000000FFLL;
        v27.i64[0] = 0xFF000000FF000000;
        v27.i64[1] = 0xFF000000FF000000;
        v28.i64[0] = 0xFF000000FFLL;
        v28.i64[1] = 0xFF000000FFLL;
        v29.i64[0] = 0x1000100010001;
        v29.i64[1] = 0x1000100010001;
        do
        {
          int v30 = v9;
          unsigned int v31 = (uint32x4_t *)v21;
          int32x4_t v32 = (__int32 *)v18;
          unsigned int v33 = v9;
          if (v9 >= 4)
          {
            do
            {
              v34.i32[0] = v32[1];
              v34.i32[1] = v32[3];
              v34.i32[2] = v32[5];
              v34.i32[3] = v32[7];
              int32x4_t v35 = (int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x18uLL);
              int v36 = vaddvq_s32(v35);
              if (v36)
              {
                v37.i32[0] = *v32;
                v37.i32[1] = v32[2];
                v37.i32[2] = v32[4];
                v37.i32[3] = v32[6];
                int32x4_t v38 = (int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1850CDDD0), v25), vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1850CDDE0), v26)), vorrq_s8(vandq_s8((int8x16_t)v34, v27), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v34, 8uLL) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL))));
                if (v36 != 1020)
                {
                  int32x4_t v39 = (int32x4_t)veorq_s8((int8x16_t)v35, v28);
                  v40.i16[0] = v31->u8[0];
                  v40.i16[1] = BYTE2(v31->u32[0]);
                  v40.i16[2] = BYTE4(v31->i64[0]);
                  v40.i16[3] = BYTE6(v31->i64[0]);
                  v40.i16[4] = v31->i64[1];
                  v40.i16[5] = BYTE2(v31->i64[1]);
                  v40.i16[6] = BYTE12(*(unsigned long long *)v31);
                  v40.i16[7] = BYTE14(*(unsigned long long *)v31);
                  int32x4_t v41 = vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v31, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v39);
                  int32x4_t v42 = vmulq_s32(v40, v39);
                  int32x4_t v38 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v42, v29), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v42, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), vaddq_s32(v38, (int32x4_t)(*(_OWORD *)&vaddq_s32(vaddq_s32(v41, v29), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v41, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00))));
                }
                *(int8x16_t *)unsigned int v31 = vorrq_s8((int8x16_t)v38, v24);
              }
              int v30 = v33 - 4;
              v32 += 8;
              ++v31;
              BOOL v43 = v33 > 7;
              v33 -= 4;
            }
            while (v43);
          }
          if (v30 >= 1)
          {
            int v44 = v30 + 1;
            do
            {
              unsigned __int32 v45 = v32[1];
              unsigned __int32 v46 = HIBYTE(v45);
              if (HIBYTE(v45))
              {
                unsigned int v47 = HIWORD(*v32) & 0xFF00 | BYTE1(*v32) | v45 & 0xFF000000 | (BYTE1(v45) << 16);
                if (v46 != 255) {
                  v47 += ((((v31->i32[0] & 0xFF00FF) * (v46 ^ 0xFF)
                }
                          + 65537
                          + ((((v31->i32[0] & 0xFF00FF) * (v46 ^ 0xFF)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
                       + (((((unsigned __int32)v31->i32[0] >> 8) & 0xFF00FF) * (v46 ^ 0xFF)
                         + 65537
                         + ((((((unsigned __int32)v31->i32[0] >> 8) & 0xFF00FF) * (v46 ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
                v31->i32[0] = v47 | v23;
              }
              unsigned int v31 = (uint32x4_t *)((char *)v31 + 4);
              --v44;
              v32 += 2;
            }
            while (v44 > 1);
          }
          v18 += v22;
          v21 += v65;
          BOOL v43 = v10-- <= 1;
        }
        while (!v43);
      }
    }
    else
    {
      BOOL v48 = 0;
      if (v20) {
        BOOL v48 = *(void *)(a1 + 96) != 0;
      }
      if (v9 < 0) {
        _CGHandleAssert("CGSConvertrgba16toRGBA8888", 1089, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v9);
      }
      if (v10 < 0) {
        _CGHandleAssert("CGSConvertrgba16toRGBA8888", 1089, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v10);
      }
      uint64_t v49 = v10 - 1;
      if (v65 < 0)
      {
        v18 += (int)v49 * (uint64_t)(int)v22;
        LODWORD(v22) = -(int)v22;
        int v50 = -v65;
        v21 += v49 * v65;
      }
      else
      {
        int v50 = v65;
      }
      unint64_t v51 = v18 + (int)((v22 * v49) & ((int)v22 >> 31));
      int v52 = v21;
      if (v51 <= (unint64_t)&v21[v10 * (uint64_t)v50])
      {
        int v53 = (int)v22 >= 0 ? v22 : -(int)v22;
        int v52 = v21;
        if (v51 + v10 * (uint64_t)v53 >= (unint64_t)v21)
        {
          int v54 = v50;
          float v55 = (char *)malloc_type_malloc(v10 * (uint64_t)v50, 0xEADC93A4uLL);
          int v50 = v54;
          int v52 = v55;
        }
      }
      if (v10 >= 1)
      {
        uint64_t v56 = 0;
        float v57 = (char *)(v18 + 3);
        do
        {
          if (v9 >= 1)
          {
            char v58 = &v52[v56 * v50];
            char v59 = v57;
            int v60 = v9;
            do
            {
              char v61 = *v59;
              char v62 = v59[2];
              char v63 = v59[4];
              if (!v48) {
                char v63 = -1;
              }
              *char v58 = *(v59 - 2);
              v58[1] = v61;
              v58[2] = v62;
              v58[3] = v63;
              v58 += 4;
              v59 += 8;
              --v60;
            }
            while (v60);
          }
          ++v56;
          v57 += (int)v22;
        }
        while (v56 != v10);
      }
      int v8 = a5;
      if (v52 != v21)
      {
        CGBlt_copyBytes(4 * v9, v10, v52, v21, v50, v50);
        free(v52);
      }
    }
    int v14 = v70;
    if (!v70) {
      break;
    }
LABEL_50:
    if (!shape_enum_clip_next((uint64_t)v14, (int *)&v73 + 1, &v73, &v72, &v71))
    {
      free(v14);
      return;
    }
    int v16 = v73;
    int v15 = HIDWORD(v73);
    int v10 = v71;
    int v9 = v72;
  }
}

void *PDFDestinationSetGetDestination(uint64_t *a1, void *key)
{
  Value = 0;
  if (a1 && key)
  {
    CFDictionaryRef Mutable = (const __CFDictionary *)a1[1];
    if (!Mutable)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], &destCallbacks);
      a1[1] = (uint64_t)Mutable;
    }
    Value = CFDictionaryGetValue(Mutable, key);
    if (!Value)
    {
      uint64_t v6 = *a1;
      Value = malloc_type_calloc(1uLL, 0x28uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      if (Value)
      {
        void *Value = v6;
        Value[1] = PDFXRefTableAddObject(*(void **)(v6 + 464));
      }
      CFDictionarySetValue((CFMutableDictionaryRef)a1[1], key, Value);
    }
  }
  return Value;
}

void destRelease(int a1, void *a2)
{
}

void emitDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && *(void *)(a2 + 16))
  {
    PDFDocumentBeginObject(*(void *)a2, *(void *)(a2 + 8), a3, a4, a5, a6, a7, a8);
    PDFDocumentPrintf(*(void *)a2, (uint64_t)"[ ", v9, v10, v11, v12, v13, v14, v34);
    PDFDocumentPrintReference(*(void *)a2, (uint64_t)"%R", *(void *)(a2 + 16), v15, v16, v17, v18, v19);
    PDFDocumentPrintf(*(void *)a2, (uint64_t)" /XYZ %f %f 0 ]", v20, v21, v22, v23, v24, v25, *(void *)(a2 + 24));
    uint64_t v33 = *(void *)a2;
    PDFDocumentEndObject(v33, v26, v27, v28, v29, v30, v31, v32);
  }
}

void CGPDFFontMutatorRelease(char *a1)
{
  if (a1)
  {
    for (uint64_t i = 544; i != 2592; i += 8)
      free(*(void **)&a1[i]);
    uint64_t v3 = 0;
    float v4 = a1 + 2592;
    do
    {
      for (uint64_t j = 0; j != 128; j += 8)
      {
        uint64_t v6 = *(const void **)&v4[j];
        if (v6) {
          CFRelease(v6);
        }
      }
      ++v3;
      v4 += 128;
    }
    while (v3 != 16);
    free(a1);
  }
}

double *create_agars()
{
  agar_HelveticaLTMM = (uint64_t)agar_create("HelveticaLTMM");
  result = agar_create("TimesLTMM");
  agar_TimesLTMM = (uint64_t)result;
  return result;
}

double *agar_create(char *a1)
{
  v2 = (double *)malloc_type_calloc(1uLL, 0x48uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v2) {
    return v2;
  }
  uint64_t v3 = CGFontCreateWithName(a1);
  *((void *)v2 + 8) = v3;
  if (!v3)
  {
LABEL_17:
    free(v2);
    return 0;
  }
  CFArrayRef v4 = CGFontCopyVariationAxes(v3);
  if (!v4) {
    goto LABEL_14;
  }
  CFArrayRef v5 = v4;
  if (!get_range((void *)v2 + 4, v4, @"Weight"))
  {
    CFRelease(v5);
    goto LABEL_14;
  }
  BOOL range = get_range((void *)v2 + 6, v5, @"Width");
  CFRelease(v5);
  float v7 = (CGFont *)*((void *)v2 + 8);
  if (!range) {
    goto LABEL_15;
  }
  double *v2 = (double)(int)get_stemv(v7, v2[4], v2[6]);
  v2[1] = (double)(int)get_stemv(*((CGFont **)v2 + 8), v2[5], v2[6]);
  v2[2] = (double)(int)get_stemv(*((CGFont **)v2 + 8), v2[4], v2[7]);
  double stemv = (double)(int)get_stemv(*((CGFont **)v2 + 8), v2[5], v2[7]);
  v2[3] = stemv;
  if (*v2 == v2[1])
  {
    double v9 = v2[2];
    if (v9 == stemv && *v2 == v9)
    {
      pdf_error("FAILED to create agar for %s.", a1);
LABEL_14:
      float v7 = (CGFont *)*((void *)v2 + 8);
LABEL_15:
      if (v7) {
        CFRelease(v7);
      }
      goto LABEL_17;
    }
  }
  return v2;
}

BOOL get_range(void *a1, CFArrayRef theArray, const void *a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count)
  {
    unint64_t v7 = Count;
    CFIndex v8 = 0;
    BOOL v9 = 1;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
      Value = CFDictionaryGetValue(ValueAtIndex, @"kCGFontVariationAxisName");
      if (CFEqual(Value, a3)) {
        break;
      }
      BOOL v9 = ++v8 < v7;
      if (v7 == v8) {
        return 0;
      }
    }
    uint64_t v13 = 0;
    CGCFDictionaryGetFloat(ValueAtIndex, @"kCGFontVariationAxisMinValue", &v13);
    *a1 = v13;
    CGCFDictionaryGetFloat(ValueAtIndex, @"kCGFontVariationAxisMaxValue", &v13);
    a1[1] = v13;
  }
  else
  {
    return 0;
  }
  return v9;
}

CGFontRef get_stemv(CGFont *a1, double a2, double a3)
{
  CGFontRef result = create_font_variant(a1, a2, a3);
  if (result)
  {
    CGFontRef v4 = result;
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    memset(v6, 0, sizeof(v6));
    BOOL Descriptor = CGFontGetDescriptor(result, (uint64_t)v6);
    CFRelease(v4);
    if (Descriptor) {
      return (CGFontRef)(int)*(double *)&v7;
    }
    else {
      return 0;
    }
  }
  return result;
}

CGFontRef create_font_variant(CGFont *a1, double a2, double a3)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CGCFDictionarySetFloat(Mutable, @"Weight", a2);
  CGCFDictionarySetFloat(Mutable, @"Width", a3);
  CGFontRef CopyWithVariations = CGFontCreateCopyWithVariations(a1, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return CopyWithVariations;
}

void CGPDFFontMutatorGetMutation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5 = a2;
  int v6 = *(unsigned __int16 *)(a1 + 2 * a2 + 32);
  long long v7 = *(void ****)a1;
  if (*(void *)a1) {
    long long v7 = (void ***)v7[4];
  }
  pdf_log("Mutating glyph %hu (code %d) in %s.\n", v6, a2, (const char *)v7);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4640));
  uint64_t v8 = a1 + 8 * v5;
  long long v9 = *(double **)(v8 + 544);
  if (!v9)
  {
    uint64_t v10 = (double **)(v8 + 544);
    Advances = CGPDFFontGetAdvances(*(void ****)a1);
    double HorizontalAdvance = CGPDFAdvancesGetHorizontalAdvance((uint64_t)Advances, v5);
    long long v9 = (double *)malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (!v9)
    {
LABEL_68:
      *uint64_t v10 = v9;
      goto LABEL_69;
    }
    uint64_t v70 = v10;
    int v13 = (int)HorizontalAdvance;
    uint64_t v14 = *(void *)(a1 + 24);
    int advance = get_advance(*(CGFont **)(v14 + 64), v6, *(double *)(v14 + 32), *(double *)(v14 + 48));
    int v16 = get_advance(*(CGFont **)(v14 + 64), v6, *(double *)(v14 + 40), *(double *)(v14 + 48));
    int v17 = get_advance(*(CGFont **)(v14 + 64), v6, *(double *)(v14 + 32), *(double *)(v14 + 56));
    int v18 = get_advance(*(CGFont **)(v14 + 64), v6, *(double *)(v14 + 40), *(double *)(v14 + 56));
    if (!(int)HorizontalAdvance)
    {
      *(_OWORD *)(v9 + 1) = xmmword_1850CD830;
      double v33 = 0.0;
      double v34 = 0.0;
      uint64_t v10 = v70;
LABEL_65:
      int v54 = vcvtmd_s64_f64(v33 * 15.0 + 0.5);
      int v55 = vcvtmd_s64_f64(v34 * 15.0 + 0.5);
      uint64_t v56 = a1 + ((uint64_t)v54 << 7) + 8 * v55;
      CGFontRef font_variant = *(CGFontRef *)(v56 + 2592);
      if (!font_variant)
      {
        char v58 = (CGFontRef *)(v56 + 2592);
        CGFontRef font_variant = create_font_variant(*(CGFont **)(v14 + 64), *(double *)(v14 + 32) + (double)v54 / 15.0 * (*(double *)(v14 + 40) - *(double *)(v14 + 32)), *(double *)(v14 + 48) + (double)v55 / 15.0 * (*(double *)(v14 + 56) - *(double *)(v14 + 48)));
        *char v58 = font_variant;
      }
      *(void *)long long v9 = font_variant;
      goto LABEL_68;
    }
    double v19 = (double)*(int *)(a1 + 8);
    double v20 = (double)v13;
    double v21 = v19 - *(double *)v14;
    double v22 = -v21;
    double v23 = *(double *)(v14 + 16) - *(double *)v14;
    double v24 = *(double *)(v14 + 8) - *(double *)v14;
    double v25 = *(double *)(v14 + 24) - *(double *)v14 - v24 - v23;
    double v26 = (double)advance;
    double v27 = (double)v13 - (double)advance;
    double v28 = (double)(v17 - advance);
    double v29 = (double)(v16 - advance);
    double v30 = (double)(v18 - advance) - v29 - v28;
    if (v25 == 0.0)
    {
      if (v23 == 0.0)
      {
        double v31 = v21 / v24;
        double v32 = (v27 * v24 + v22 * v29) / (v30 * v21 + v24 * v28);
      }
      else
      {
        double v31 = (v27 * v23 + v22 * v28) / (v30 * v21 + v29 * v23);
        double v32 = v21 / v23;
      }
      double v33 = v31;
      double v34 = v32;
    }
    else if (v25 * v22 == v23 * v24)
    {
      double v33 = -v23 / v25;
      double v34 = (v27 * v25 + v29 * v23) / (v25 * v28 - v30 * v23);
      double v31 = (v27 * v25 + v24 * v28) / (v25 * v29 - v30 * v24);
      double v32 = -v24 / v25;
    }
    else
    {
      double v43 = -v25;
      if (v30 * -v27 != v29 * v28)
      {
        double v49 = v29 * v43 + v30 * v24;
        double v50 = v24 * v28 - v29 * v23 + v30 * v22 + v25 * v27;
        double v51 = v27 * v23 + v28 * v22;
        if (v49 == 0.0)
        {
          double v31 = -v51 / v50;
          double v33 = v31;
          uint64_t v10 = v70;
        }
        else
        {
          double v64 = v51 * (v49 * -4.0) + v50 * v50;
          uint64_t v10 = v70;
          if (v64 < 0.0)
          {
            int v69 = v16;
            int v65 = v18;
            pdf_error("No solutions possible.\n");
            int v18 = v65;
            int v16 = v69;
            double v31 = -1.0;
            double v33 = -1.0;
            double v32 = -1.0;
            double v34 = -1.0;
            goto LABEL_15;
          }
          double v66 = sqrt(v64);
          double v67 = v49 + v49;
          double v33 = (v66 - v50) / (v49 + v49);
          double v31 = (-v50 - v66) / v67;
        }
        double v68 = v23 + v25 * v31;
        if (v68 == 0.0)
        {
          double v34 = -(v29 * v33 - v27) / (v28 + v30 * v33);
          double v32 = -(v29 * v31 - v27) / (v28 + v30 * v31);
        }
        else
        {
          double v34 = -(v22 + v24 * v33) / (v23 + v25 * v33);
          double v32 = -(v22 + v24 * v31) / v68;
        }
LABEL_15:
        BOOL v35 = v33 < 0.0 || v33 > 1.0;
        if (!v35 && ((v36 = 1.0, v34 >= 0.0) ? (BOOL v37 = v34 > 1.0) : (BOOL v37 = 1), !v37)
          || (v31 >= 0.0 ? (BOOL v38 = v31 > 1.0) : (BOOL v38 = 1),
              !v38 && (v32 >= 0.0 ? (v39 = v32 > 1.0) : (v39 = 1), double v33 = v31, v34 = v32, v36 = 1.0, !v39)))
        {
LABEL_59:
          double v52 = (v20
               - (v34 * ((1.0 - v33) * (double)v17)
                + v33 * (double)v18 * v34
                + v33 * (double)v16 * (1.0 - v34)
                + (1.0 - v33) * v26 * (1.0 - v34)))
              * 0.5;
          if (fabs(v52) < 0.001 || v52 < 0.0) {
            double v52 = 0.0;
          }
          v9[1] = v36;
          v9[2] = v52;
          goto LABEL_65;
        }
        double v40 = *(double *)(v14 + 24);
        if (v40 >= v19)
        {
          double v45 = *(double *)(v14 + 16);
          if (v45 > v19)
          {
            double v33 = 0.0;
            if (v26 >= v20)
            {
              double v34 = 0.0;
            }
            else
            {
              double v34 = 1.0;
              if (v16 != advance && (double)v16 > v20) {
                double v34 = v27 / v29;
              }
            }
            goto LABEL_57;
          }
          double v33 = (v19 - v45) / (v40 - v45);
          double v46 = v26 + v33 * v28;
          double v34 = 0.0;
          if (v46 < v20)
          {
            double v47 = (double)v16 + v33 * (double)(v18 - v16);
            double v34 = 1.0;
            if (v47 > v20 && v46 != v47)
            {
              double v41 = v20 - v46;
              double v42 = v47 - v46;
              goto LABEL_52;
            }
          }
        }
        else
        {
          if ((double)v17 >= v20)
          {
            double v34 = 0.0;
            double v33 = 1.0;
            goto LABEL_57;
          }
          double v33 = 1.0;
          if (v18 != v17 && (double)v18 > v20)
          {
            double v41 = v20 - (double)v17;
            double v42 = (double)(v18 - v17);
LABEL_52:
            double v34 = v41 / v42;
            goto LABEL_57;
          }
          double v34 = 1.0;
        }
LABEL_57:
        double v36 = 1.0;
        if (v20 / (v33 * v29 + v30 * v33 * v34 + v28 * v34 + v26) <= 1.0) {
          double v36 = v20 / (v33 * v29 + v30 * v33 * v34 + v28 * v34 + v26);
        }
        goto LABEL_59;
      }
      double v33 = -v28 / v30;
      double v44 = v30 * v21;
      double v34 = (v30 * v21 + v24 * v28) / (v28 * v43 + v30 * v23);
      double v31 = (v44 + v29 * v23) / (v29 * v43 + v30 * v24);
      double v32 = -v29 / v30;
    }
    uint64_t v10 = v70;
    goto LABEL_15;
  }
LABEL_69:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4640));
  long double v59 = *(double *)(a1 + 16);
  double v60 = v9[1];
  double v61 = v9[2];
  *(double *)(a3 + 56) = *v9;
  *(_WORD *)a3 = v6;
  if (v60 == 1.0 && v59 == 0.0 && v61 == 0.0)
  {
    char v62 = 1;
  }
  else
  {
    long double v63 = tan(v59);
    char v62 = 0;
    *(double *)(a3 + 8) = v60;
    *(void *)(a3 + 16) = 0;
    *(long double *)(a3 + 24) = v60 * v63;
    *(void *)(a3 + 32) = 0x3FF0000000000000;
    *(double *)(a3 + 40) = v60 * v61 / 1000.0;
    *(void *)(a3 + 48) = 0;
  }
  *(unsigned char *)(a3 + 2) = v62;
}

uint64_t get_advance(CGFont *a1, __int16 a2, double a3, double a4)
{
  __int16 v8 = a2;
  v7[0] = 0.0;
  v7[1] = 0.0;
  CGFontRef font_variant = create_font_variant(a1, a3, a4);
  v6[0] = 0x408F400000000000;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0x408F400000000000;
  _OWORD v6[4] = 0;
  v6[5] = 0;
  CGFontGetGlyphAdvancesForStyle(font_variant, (uint64_t)v6, 13, (uint64_t)&v8, 1, (uint64_t)v7);
  if (font_variant) {
    CFRelease(font_variant);
  }
  return (int)v7[0];
}

void PDFFont::~PDFFont(PDFFont *this)
{
  *(void *)this = &unk_1ED094478;
  v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

void anonymous namespace'::make_unique<CIDFontType2,FontSet const&,CGFont *&,int &>()
{
}

void sub_184F7808C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<unsigned long>::destroy(*v16);
  if (v14[111] < 0) {
    operator delete(*v15);
  }
  if (v14[87] < 0) {
    operator delete(*v17);
  }
  PDFFont::~PDFFont((PDFFont *)v14);
  MEMORY[0x18532A2A0]();
  _Unwind_Resume(a1);
}

uint64_t PDFFont::get_next_subset_name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:fe180100]((uint64_t)v20);
  int v5 = *(char *)(a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(void *)a3;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v21, v6, v7);
  __int16 v8 = (uint64_t **)(a2 + 16);
  long long v9 = *(uint64_t **)(a2 + 16);
  if (!v9) {
    goto LABEL_14;
  }
  uint64_t v10 = (uint64_t **)(a2 + 16);
  uint64_t v11 = *(void **)(a2 + 16);
  do
  {
    BOOL v12 = std::less<std::string>::operator()[abi:fe180100](v11 + 4, (void *)a3);
    int v13 = v11 + 1;
    if (!v12)
    {
      int v13 = v11;
      uint64_t v10 = (uint64_t **)v11;
    }
    uint64_t v11 = (void *)*v13;
  }
  while (*v13);
  if (v10 == v8 || std::less<std::string>::operator()[abi:fe180100]((void *)a3, v10 + 4))
  {
LABEL_14:
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      long long v9 = *v8;
    }
    else
    {
      std::string v24 = *(std::string *)a3;
    }
    int v25 = 1;
LABEL_18:
    uint64_t v14 = v8;
    if (v9)
    {
      while (1)
      {
        __int16 v8 = (uint64_t **)v9;
        if (std::less<std::string>::operator()[abi:fe180100](&v24, v9 + 4))
        {
          long long v9 = (uint64_t *)*v9;
          goto LABEL_18;
        }
        if (!std::less<std::string>::operator()[abi:fe180100](v9 + 4, &v24)) {
          break;
        }
        uint64_t v14 = (uint64_t **)(v9 + 1);
        long long v9 = (uint64_t *)v9[1];
        if (!v9) {
          goto LABEL_24;
        }
      }
      uint64_t v10 = (uint64_t **)v9;
    }
    else
    {
LABEL_24:
      uint64_t v10 = (uint64_t **)operator new(0x40uLL);
      uint64_t v15 = (std::string *)(v10 + 4);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v15, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
        v10[6] = (uint64_t *)v24.__r_.__value_.__r.__words[2];
      }
      *((_DWORD *)v10 + 14) = 1;
      *uint64_t v10 = 0;
      v10[1] = 0;
      v10[2] = (uint64_t *)v8;
      *uint64_t v14 = (uint64_t *)v10;
      uint64_t v16 = **(void **)(a2 + 8);
      int v17 = (uint64_t *)v10;
      if (v16)
      {
        *(void *)(a2 + 8) = v16;
        int v17 = *v14;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 16), v17);
      ++*(void *)(a2 + 24);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  ++*((_DWORD *)v10 + 14);
  std::ostream::operator<<();
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E4FBA408];
  uint64_t v18 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v21[0] = v18;
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18532A250](&v23);
}

void sub_184F78410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  operator delete(v29);
  operator delete(*(void **)(v30 - 112));
  a10 = *MEMORY[0x1E4FBA408];
  uint64_t v32 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a10 + *(void *)(a10 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a12 = v32;
  a13 = MEMORY[0x1E4FBA470] + 16;
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18532A250](&a29);
  _Unwind_Resume(a1);
}

void PDFFont::get_embedded_font_name(std::string *this, uint64_t a2)
{
  uint64_t v4 = **(void **)(a2 + 8);
  if (v4 && (unsigned int v5 = *(_DWORD *)(v4 + 320), *(_DWORD *)(v4 + 320) = v5 + 1, v5))
  {
    uint64_t v6 = 5;
    unsigned int v7 = v5;
    do
    {
      unsigned int v8 = v7;
      v7 /= 0x1Au;
      __b.__r_.__value_.__s.__data_[v6] = v8 - 26 * v7 + 65;
      BOOL v10 = v6-- != 0;
    }
    while (v8 >= 0x1A && v10);
    unsigned int v11 = v6 + 1;
    if (v8 >= 0x1A) {
      pdf_error("More font prefixes (%d) than digits for the tag", v5);
    }
    if ((v6 & 0x80000000) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned int v11 = 6;
  }
  memset(&__b, 65, v11);
LABEL_15:
  *((unsigned char *)&v28.__r_.__value_.__s + 23) = 6;
  LODWORD(v28.__r_.__value_.__l.__data_) = __b.__r_.__value_.__l.__data_;
  WORD2(v28.__r_.__value_.__r.__words[0]) = WORD2(__b.__r_.__value_.__r.__words[0]);
  v28.__r_.__value_.__s.__data_[6] = 0;
  BOOL v12 = std::string::append(&v28, "+");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14) {
    uint64_t v15 = (char *)(*(uint64_t (**)(void))(*(void *)(v14 + 16) + 144))(*(void *)(v14 + 112));
  }
  else {
    uint64_t v15 = 0;
  }
  std::string::basic_string[abi:fe180100]<0>(&__p, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __p;
  }
  while (1)
  {
    std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    std::string::size_type v18 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__str.__r_.__value_.__r.__words[2])
        : __str.__r_.__value_.__l.__size_;
    if (v18 < 8) {
      break;
    }
    uint64_t v19 = 0;
    double v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    do
    {
      if (p_str->__r_.__value_.__s.__data_[v19] - 91 < 0xFFFFFFE6) {
        goto LABEL_38;
      }
      ++v19;
    }
    while (v19 != 6);
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (__str.__r_.__value_.__l.__size_ < 6)
      {
LABEL_59:
        __break(1u);
        return;
      }
    }
    else
    {
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) <= 5u) {
        goto LABEL_59;
      }
      double v20 = &__str;
    }
    if (v20->__r_.__value_.__s.__data_[6] != 43) {
      break;
    }
    std::string::basic_string(&__b, &__str, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = __b;
  }
LABEL_38:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if ((v16 & 0x80u) == 0) {
    char v22 = &__str;
  }
  else {
    char v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v23 = v16;
  }
  else {
    std::string::size_type v23 = size;
  }
  std::string v24 = std::string::append(&v29, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  this->__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  unint64_t v26 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v26 & 0x80u) != 0) {
    unint64_t v26 = this->__r_.__value_.__l.__size_;
  }
  if (v26 >= 0x3F)
  {
    std::string::basic_string(&__b, this, 0, 0x3EuLL, (std::allocator<char> *)&__p);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    *this = __b;
  }
}

void sub_184F7883C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef PDFFont::create_embedded_font(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) != 1
    && (uint64_t v10 = a1[2]) != 0
    && (uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v10 + 88), memory_order_acquire)) != 0
    && (Property = CGPropertiesGetProperty(explicit, @"com.apple.CoreGraphics.CGPDFFontData")) != 0)
  {
    return CFRetain(Property);
  }
  else
  {
    uint64_t v14 = a1[2];
    uint64_t v15 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    if (v14)
    {
      uint64_t v16 = v15;
      if (*((char *)a2 + 23) >= 0) {
        int v17 = a2;
      }
      else {
        int v17 = (uint64_t *)*a2;
      }
      std::string::size_type v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 16)
                                                                                             + 344);
      uint64_t v19 = *(void *)(v14 + 112);
      return (CFTypeRef)v18(v19, v16, v17, a3, a4, a5);
    }
    else
    {
      return 0;
    }
  }
}

void PDFFontAddGlyphsToLayout(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  std::string __p = 0;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  if (a4)
  {
    if (a4 < 0) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    std::string __p = std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(a4);
    unsigned int v11 = (char *)__p + 2 * v8;
    memmove(__p, a3, 2 * a4);
    uint64_t v10 = (char *)__p + 2 * a4;
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 24))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_184F78AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *region_check(void *cf)
{
  if (cf)
  {
    v1 = cf;
    if (!cf[2]) {
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (CGRegionGetTypeID_initOnce != -1) {
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
    }
    if (v2 == __kCGRegionTypeID && (uint64_t v3 = (_DWORD *)v1[2]) != 0 && *v3 == 0x80000000) {
      return (void *)(v3[1] > 0);
    }
    else {
      return 0;
    }
  }
  return cf;
}

CFStringRef __CGRegionCopyDebugDescription(void *a1)
{
  return __CGRegionCopyFormattingDescription(a1, 0);
}

CFStringRef __CGRegionCopyFormattingDescription(void *a1, const __CFDictionary *a2)
{
  int v4 = CGSGetRegionRectCount(a1);
  if (!v4)
  {
    CFAllocatorRef v17 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v17, a2, @"#<CGRegion %p empty>", a1);
  }
  int v5 = v4;
  memset(&rect, 0, sizeof(rect));
  double BoundingBox = CGRegionGetBoundingBox((uint64_t)a1);
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  CFAllocatorRef v13 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v13, 0);
  uint64_t v15 = Mutable;
  if (v10 < 0.0 || v12 < 0.0)
  {
    v32.origin.x = BoundingBox;
    v32.origin.CGFloat y = v8;
    v32.size.double width = v10;
    v32.size.double height = v12;
    unint64_t v19 = (unint64_t)CGRectStandardize(v32);
    v33.origin.x = BoundingBox;
    v33.origin.CGFloat y = v8;
    v33.size.double width = v10;
    v33.size.double height = v12;
    CGRect v34 = CGRectStandardize(v33);
    CGFloat y = v34.origin.y;
    v34.origin.x = BoundingBox;
    v34.origin.CGFloat y = v8;
    v34.size.double width = v10;
    v34.size.double height = v12;
    CGRect v35 = CGRectStandardize(v34);
    CGFloat v21 = v35.origin.x + v35.size.width;
    v35.origin.x = BoundingBox;
    v35.origin.CGFloat y = v8;
    v35.size.double width = v10;
    v35.size.double height = v12;
    CGRect v36 = CGRectStandardize(v35);
    CFStringAppendFormat(v15, a2, @"#<CGSRegion %p [%g %g %g %g]", a1, v19, *(void *)&y, *(void *)&v21, v36.origin.y + v36.size.height);
    if (v5 == 1) {
      goto LABEL_32;
    }
    v37.origin.x = BoundingBox;
    v37.origin.CGFloat y = v8;
    v37.size.double width = v10;
    v37.size.double height = v12;
    CGRect v38 = CGRectStandardize(v37);
    double v16 = v38.origin.y;
    goto LABEL_9;
  }
  CFStringAppendFormat(Mutable, a2, @"#<CGSRegion %p [%g %g %g %g]", a1, *(void *)&BoundingBox, *(void *)&v8, BoundingBox + v10, v8 + v12);
  double v16 = v8;
  if (v5 != 1)
  {
LABEL_9:
    double v22 = v16 + -1.0;
    std::string::size_type v23 = CGRegionEnumeratorCreate((char *)a1);
    while (1)
    {
      if (!CGRegionEnumeratorGetNextRect((uint64_t)v23, &rect.origin.x))
      {
        free(v23);
        CFStringAppend(v15, @"\n");
        CFStringAppendFormat(v15, a2, @"\t%6g []\n", *(void *)&v16);
        goto LABEL_32;
      }
      double v25 = rect.origin.y;
      double width = rect.size.width;
      double height = rect.size.height;
      BOOL v27 = rect.size.height < 0.0 || rect.size.width < 0.0;
      if (v27)
      {
        CGRect v39 = CGRectStandardize(rect);
        if (v39.origin.y == v22) {
          goto LABEL_30;
        }
        CFStringAppend(v15, @"\n");
        v40.origin.x = rect.origin.x;
        v40.origin.CGFloat y = v25;
        v40.size.double width = width;
        v40.size.double height = height;
        CGRect v41 = CGRectStandardize(v40);
        double v28 = v41.origin.y;
      }
      else
      {
        if (rect.origin.y == v22) {
          goto LABEL_30;
        }
        CFStringAppend(v15, @"\n");
        double v28 = v25;
      }
      if (v10 >= 0.0 && v16 >= 0.0) {
        break;
      }
      v42.origin.x = BoundingBox;
      v42.origin.CGFloat y = v8;
      v42.size.double width = v10;
      v42.size.double height = v16;
      CGRect v41 = CGRectStandardize(v42);
      if (v28 > v29)
      {
        v43.origin.x = BoundingBox;
        v43.origin.CGFloat y = v8;
        v43.size.double width = v10;
        v43.size.double height = v16;
        CGRect v41 = CGRectStandardize(v43);
        double v16 = v30;
LABEL_25:
        CFStringAppendFormat(v15, a2, @"\t%6g []\n", v41.origin.x, v41.origin.y, v41.size.width, *(void *)&v16);
      }
LABEL_26:
      if (v27)
      {
        v44.origin.x = rect.origin.x;
        v44.origin.CGFloat y = v25;
        v44.size.double width = width;
        v44.size.double height = height;
        CGRect v45 = CGRectStandardize(v44);
        CFStringAppendFormat(v15, a2, @"\t%6g ", v45.origin.x, *(void *)&v45.origin.y);
        v46.origin.x = rect.origin.x;
        v46.origin.CGFloat y = v25;
        v46.size.double width = width;
        v46.size.double height = height;
        CGRect v47 = CGRectStandardize(v46);
        double v22 = v47.origin.y;
      }
      else
      {
        CFStringAppendFormat(v15, a2, @"\t%6g ", v41.origin.x, *(void *)&v25);
        double v22 = v25;
      }
      double v16 = v25 + height;
LABEL_30:
      CFStringAppendFormat(v15, a2, @"[%g %g] ", *(void *)&rect.origin.x, rect.origin.x + width);
    }
    if (v28 <= v16) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_32:
  CFStringAppend(v15, @">");
  return v15;
}

double CGRegionGetBoundingBox(uint64_t a1)
{
  if (!a1) {
    return INFINITY;
  }
  uint64_t v11 = 0;
  signed int v10 = 0;
  int v9 = 0;
  shape_bounds(*(void *)(a1 + 16), (int *)&v11 + 1, &v11, &v10, &v9);
  double result = (double)SHIDWORD(v11);
  double v5 = (double)v10 - (double)SHIDWORD(v11);
  if (v5 < 0.0)
  {
    double v7 = (double)v10 - (double)SHIDWORD(v11);
    _CGHandleAssert("CGRegionGetBoundingBox", 533, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "width >= 0", "width (%f) must be positive", v1, v2, v3, SLOBYTE(v7));
  }
  if (v5 > 4294967300.0) {
    _CGHandleAssert("CGRegionGetBoundingBox", 534, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "width <= UINT_MAX", "width (%f) too big", v1, v2, v3, SLOBYTE(v5));
  }
  double v6 = (double)v9 - (double)(int)v11;
  if (v6 < 0.0)
  {
    double v8 = (double)v9 - (double)(int)v11;
    _CGHandleAssert("CGRegionGetBoundingBox", 535, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "height >= 0", "height (%f) must be positive", v1, v2, v3, SLOBYTE(v8));
  }
  if (v6 > 4294967300.0) {
    _CGHandleAssert("CGRegionGetBoundingBox", 536, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "height <= UINT_MAX", "height (%f) too big", v1, v2, v3, SLOBYTE(v5));
  }
  return result;
}

void __CGRegionDeallocate(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 24) && v2 != 0 && v2 != &the_empty_shape) {
    free(v2);
  }
}

uint64_t CGRegionGetTypeID()
{
  if (CGRegionGetTypeID_initOnce != -1) {
    dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
  }
  return __kCGRegionTypeID;
}

void *region_create_with_shape(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || a1 == &the_empty_shape)
  {
    if (CGRegionGetTypeID_initOnce != -1) {
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
    }
    return &__kCGRegionEmptyRegion;
  }
  else
  {
    if (CGRegionGetTypeID_initOnce != -1) {
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
    }
    double result = (void *)CGTypeCreateInstance(__kCGRegionTypeID, 16, a3, a4, a5, a6, a7, a8);
    result[2] = a1;
  }
  return result;
}

void *CGRegionCreateEmptyRegion()
{
  if (CGRegionGetTypeID_initOnce != -1) {
    dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
  }
  return &__kCGRegionEmptyRegion;
}

void *region_create_with_bounds(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= (int)a3 || (int v8 = a4, a2 >= (int)a4))
  {
    if (CGRegionGetTypeID_initOnce != -1) {
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
    }
    return &__kCGRegionEmptyRegion;
  }
  else
  {
    int v10 = a3;
    if (CGRegionGetTypeID_initOnce != -1) {
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
    }
    double result = (void *)CGTypeCreateInstance(__kCGRegionTypeID, 52, a3, a4, a5, a6, a7, a8);
    if (v8 >= 2147483646) {
      int v13 = 2147483646;
    }
    else {
      int v13 = v8;
    }
    if (a2 == 0x80000000 || a2 == -2147483647) {
      int v14 = -2147483647;
    }
    else {
      int v14 = a2;
    }
    result[3] = 0x280000000;
    *((_DWORD *)result + 8) = v14;
    *((_DWORD *)result + 9) = 4;
    *((_DWORD *)result + 10) = a1;
    *((_DWORD *)result + 11) = v10;
    *((_DWORD *)result + 12) = v13;
    *(void *)((char *)result + 52) = 0x7FFFFFFF00000002;
    result[2] = result + 3;
  }
  return result;
}

BOOL rect_to_bounds(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, double a5, double a6, double a7, double a8)
{
  CGRect v27 = CGRectStandardize(*(CGRect *)&a5);
  CGFloat x = v27.origin.x;
  CGFloat y = v27.origin.y;
  CGFloat width = v27.size.width;
  CGFloat height = v27.size.height;
  if (v27.size.width < 0.0 || v27.size.height < 0.0)
  {
    CGRect v28 = CGRectStandardize(v27);
    if (v28.size.width < 0.0078125) {
      goto LABEL_9;
    }
    v29.origin.CGFloat x = x;
    v29.origin.CGFloat y = y;
    v29.size.CGFloat width = width;
    v29.size.CGFloat height = height;
    CGRect v27 = CGRectStandardize(v29);
  }
  else if (v27.size.width < 0.0078125)
  {
    goto LABEL_9;
  }
  if (v27.size.height >= 0.0078125)
  {
    v30.origin.CGFloat x = x;
    v30.origin.CGFloat y = y;
    v30.size.CGFloat width = width;
    v30.size.CGFloat height = height;
    CGRect v31 = CGRectInset(v30, 0.00390625, 0.00390625);
    CGFloat x = v31.origin.x;
    CGFloat y = v31.origin.y;
    CGFloat width = v31.size.width;
    CGFloat height = v31.size.height;
  }
LABEL_9:
  v32.origin.CGFloat x = x;
  v32.origin.CGFloat y = y;
  v32.size.CGFloat width = width;
  v32.size.CGFloat height = height;
  CGRect v33 = CGRectIntegral(v32);
  CGFloat v16 = v33.origin.x;
  double v17 = v33.origin.y;
  CGFloat v18 = v33.size.width;
  double v19 = v33.size.height;
  if (v33.size.width < 0.0 || v33.size.height < 0.0)
  {
    *(void *)&double v22 = (unint64_t)CGRectStandardize(v33);
    v34.origin.CGFloat x = v16;
    v34.origin.CGFloat y = v17;
    v34.size.CGFloat width = v18;
    v34.size.CGFloat height = v19;
    CGRect v35 = CGRectStandardize(v34);
    double v20 = v35.origin.x + v35.size.width;
    v35.origin.CGFloat x = v16;
    v35.origin.CGFloat y = v17;
    v35.size.CGFloat width = v18;
    v35.size.CGFloat height = v19;
    CGRect v36 = CGRectStandardize(v35);
    double v21 = v36.origin.y;
    v36.origin.CGFloat x = v16;
    v36.origin.CGFloat y = v17;
    v36.size.CGFloat width = v18;
    v36.size.CGFloat height = v19;
    CGRect v37 = CGRectStandardize(v36);
    double v17 = v37.origin.y;
    double v19 = v37.size.height;
  }
  else
  {
    double v20 = v33.origin.x + v33.size.width;
    double v21 = v33.origin.y;
    double v22 = v33.origin.x;
  }
  double v23 = v17 + v19;
  BOOL v24 = v22 < -2147483650.0;
  if (v22 > 2147483650.0) {
    BOOL v24 = 1;
  }
  if (v20 < -2147483650.0) {
    BOOL v24 = 1;
  }
  if (v20 > 2147483650.0) {
    BOOL v24 = 1;
  }
  if (v21 < -2147483650.0) {
    BOOL v24 = 1;
  }
  if (v21 > 2147483650.0) {
    BOOL v24 = 1;
  }
  if (v23 < -2147483650.0) {
    BOOL v24 = 1;
  }
  BOOL v25 = v24 || v23 > 2147483650.0;
  if (v25)
  {
    *a4 = 0;
    *a2 = 0;
    *a3 = 0;
    *a1 = 0;
  }
  else
  {
    *a1 = (int)v22;
    *a3 = (int)v20;
    *a2 = (int)v21;
    *a4 = (int)v23;
  }
  return !v25;
}

void *CGRegionCreateWithRect(double a1, double a2, double a3, double a4)
{
  if (a1 == INFINITY || a2 == INFINITY)
  {
    if (CGRegionGetTypeID_initOnce != -1) {
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
    }
    return &__kCGRegionEmptyRegion;
  }
  else
  {
    int v17 = 0;
    unsigned int v16 = 0;
    uint64_t v15 = 0;
    if (rect_to_bounds(&v17, (_DWORD *)&v15 + 1, &v16, &v15, a1, a2, a3, a4))
    {
      int v11 = v17;
      int v12 = HIDWORD(v15);
      uint64_t v13 = v16;
      uint64_t v14 = v15;
      return region_create_with_bounds(v11, v12, v13, v14, v7, v8, v9, v10);
    }
    else
    {
      return 0;
    }
  }
}

void *CGRegionCreateWithRects(double *a1, uint64_t a2)
{
  if (a1 && (uint64_t v2 = a2) != 0)
  {
    if (a2 == 1)
    {
      double v3 = *a1;
      double v4 = a1[1];
      double v5 = a1[2];
      double v6 = a1[3];
      return CGRegionCreateWithRect(v3, v4, v5, v6);
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v8 = a1 + 2;
      uint64_t v9 = (int *)&the_empty_shape;
      do
      {
        if ((rect_to_bounds_18558((signed int *)&v20 + 1, (signed int *)&v19 + 1, (signed int *)&v20, (signed int *)&v19, *(v8 - 2), *(v8 - 1), *v8, v8[1]) & 0x80000000) == 0)
        {
          int v17 = shape_union_with_bounds(v9, SHIDWORD(v20), SHIDWORD(v19), v20, v19);
          if (v9 && v9 != (int *)&the_empty_shape) {
            free(v9);
          }
          uint64_t v9 = v17;
        }
        v8 += 4;
        --v2;
      }
      while (v2);
      if (v9) {
        CGFloat v18 = v9;
      }
      else {
        CGFloat v18 = (int *)&the_empty_shape;
      }
      return region_create_with_shape(v18, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    if (CGRegionGetTypeID_initOnce != -1) {
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
    }
    return &__kCGRegionEmptyRegion;
  }
}

void *CGRegionCreateWithBoundsBlock(uint64_t a1)
{
  uint64_t v2 = (int *)&the_empty_shape;
LABEL_2:
  double v3 = v2;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(a1 + 16))(&v13, a1);
    if (v13) {
      break;
    }
    if (SHIDWORD(v13) < v15 && v14 < v16)
    {
      uint64_t v2 = shape_union_with_bounds(v2, SHIDWORD(v13), v14, v15, v16);
      if (v3)
      {
        if (v3 != (int *)&the_empty_shape) {
          free(v3);
        }
      }
      goto LABEL_2;
    }
  }

  return region_create_with_shape(v2, v4, v5, v6, v7, v8, v9, v10);
}

CFDataRef CGRegionCreateWithData(const __CFData *result)
{
  if (result)
  {
    CFDataRef v1 = result;
    BytePtr = (UInt8 *)CFDataGetBytePtr(result);
    CFIndex Length = CFDataGetLength(v1);
    return (const __CFData *)CGRegionCreateWithBytes(BytePtr, Length);
  }
  return result;
}

void *CGRegionCreateWithBytes(_DWORD *a1, unint64_t a2)
{
  BOOL v4 = shape_data_valid(a1, a2);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = shape_alloc_data(v4, (uint64_t)a1, a2);

  return region_create_with_shape(v5, v6, v7, v8, v9, v10, v11, v12);
}

CFTypeRef CGRegionCreateCopy(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void *CGRegionCreateWithOffset(void *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a1) {
    return 0;
  }
  double v10 = floor(a2 + 0.00390625);
  if (v10 < -2147483650.0) {
    return 0;
  }
  double v11 = floor(a3 + 0.00390625);
  BOOL v12 = v10 > 2147483650.0 || v11 < -2147483650.0;
  if (v12 || v11 > 2147483650.0) {
    return 0;
  }
  unsigned int v13 = (int)v10;
  __int32 v14 = (int)v11;
  if ((int)v10 | (int)v11)
  {
    int v16 = (int32x2_t *)a1[2];
    if (v16 == (int32x2_t *)(a1 + 3))
    {
      __int32 v25 = v16[3].i32[0];
      int v26 = v16[2].i32[0] + v13;
      uint64_t v27 = v16[2].i32[1] + v13;
      int v28 = v16[1].i32[0] + v14;
      uint64_t v29 = (v25 + v14);
      return region_create_with_bounds(v26, v28, v27, v29, a7, a8, a9, a10);
    }
    else
    {
      int v17 = shape_offset((uint64_t)a1, v16, v13, v14);
      return region_create_with_shape(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  else
  {
    return CFRetain(a1);
  }
}

void *CGRegionCreateWithInset(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a1) {
    return 0;
  }
  double v10 = floor(a2 + 0.00390625);
  if (v10 < -2147483650.0) {
    return 0;
  }
  double v11 = floor(a3 + 0.00390625);
  BOOL v12 = v10 > 2147483650.0 || v11 < -2147483650.0;
  if (v12 || v11 > 2147483650.0) {
    return 0;
  }
  int v13 = (int)v10;
  int v14 = (int)v11;
  if ((int)v10 | (int)v11)
  {
    int v16 = *(_DWORD **)(a1 + 16);
    if (v16 == (_DWORD *)(a1 + 24)
      && ((int v17 = v16[6], a1 = (v16[4] + v13), v18 = (v16[5] - v13), (int)a1 < (int)v18)
        ? (BOOL v19 = v16[2] + v14 < v17 - v14)
        : (BOOL v19 = 0),
          v19))
    {
      int v28 = v16[2] + v14;
      uint64_t v29 = (v17 - v14);
      return region_create_with_bounds(a1, v28, v18, v29, a7, a8, a9, a10);
    }
    else
    {
      shape_inset(a1, (uint64_t)v16, v13, v14);
      return region_create_with_shape(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  else
  {
    return CFRetain((CFTypeRef)a1);
  }
}

void *CGRegionCreateIntersectionWithRect(void *cf, double a2, double a3, double a4, double a5)
{
  if (cf)
  {
    if (a2 == INFINITY || a3 == INFINITY)
    {
      if (CGRegionGetTypeID_initOnce != -1) {
        dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
      }
      return &__kCGRegionEmptyRegion;
    }
    else
    {
      uint64_t v6 = cf;
      if (a2 == -8.98846567e307 && a3 == -8.98846567e307 && a4 == 1.79769313e308 && a5 == 1.79769313e308)
      {
        return CFRetain(cf);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        BOOL v10 = rect_to_bounds((_DWORD *)&v20 + 1, &v20, (_DWORD *)&v19 + 1, &v19, a2, a3, a4, a5);
        if (v10)
        {
          double v11 = shape_intersect_with_bounds(v10, (int *)v6[2], SHIDWORD(v20), v20, SHIDWORD(v19), v19);
          return region_create_with_shape(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return cf;
}

void *CGRegionCreateIntersectionWithRegion(void *a1, void *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !cf) {
    return 0;
  }
  uint64_t v9 = a1[2];
  if ((_UNKNOWN *)v9 == &the_empty_shape || *(_DWORD *)(v9 + 4 * *(int *)(v9 + 4)) == 0x7FFFFFFF) {
    goto LABEL_8;
  }
  uint64_t v10 = cf[2];
  if ((_UNKNOWN *)v10 == &the_empty_shape || *(_DWORD *)(v10 + 4 * *(int *)(v10 + 4)) == 0x7FFFFFFF)
  {
    a1 = cf;
LABEL_8:
    return CFRetain(a1);
  }
  if ((void *)v9 == a1 + 3 && (void *)v10 == cf + 3)
  {
    unsigned int v12 = *(_DWORD *)(v9 + 20);
    unsigned int v13 = *(_DWORD *)(v9 + 24);
    unsigned int v14 = *(_DWORD *)(v10 + 20);
    unsigned int v15 = *(_DWORD *)(v10 + 24);
    if (*(_DWORD *)(v9 + 16) <= *(_DWORD *)(v10 + 16)) {
      int v16 = *(_DWORD *)(v10 + 16);
    }
    else {
      int v16 = *(_DWORD *)(v9 + 16);
    }
    if (*(_DWORD *)(v9 + 8) <= *(_DWORD *)(v10 + 8)) {
      int v17 = *(_DWORD *)(v10 + 8);
    }
    else {
      int v17 = *(_DWORD *)(v9 + 8);
    }
    if ((int)v12 >= (int)v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v12;
    }
    if ((int)v13 >= (int)v15) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = v13;
    }
    return region_create_with_bounds(v16, v17, v18, v19, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v20 = shape_intersect((uint64_t)a1, (int *)v9, (int *)v10);
    return region_create_with_shape(v20, v21, v22, v23, v24, v25, v26, v27);
  }
}

void *CGRegionCreateUnionWithRect(int **cf, double a2, double a3, double a4, double a5)
{
  if (cf)
  {
    if (a2 == INFINITY || a3 == INFINITY)
    {
      return CFRetain(cf);
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      if (rect_to_bounds((_DWORD *)&v18 + 1, &v18, (_DWORD *)&v17 + 1, &v17, a2, a3, a4, a5))
      {
        uint64_t v9 = shape_union_with_bounds(cf[2], SHIDWORD(v18), v18, SHIDWORD(v17), v17);
        return region_create_with_shape(v9, v10, v11, v12, v13, v14, v15, v16);
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    return CGRegionCreateWithRect(a2, a3, a4, a5);
  }
}

void *CGRegionCreateUnionWithRegion(void *a1, void *cf)
{
  if (!a1)
  {
    if (!cf) {
      return 0;
    }
    goto LABEL_11;
  }
  if (!cf) {
    goto LABEL_12;
  }
  uint64_t v3 = a1[2];
  if ((_UNKNOWN *)v3 == &the_empty_shape || *(_DWORD *)(v3 + 4 * *(int *)(v3 + 4)) == 0x7FFFFFFF)
  {
LABEL_11:
    a1 = cf;
    goto LABEL_12;
  }
  BOOL v4 = (int *)cf[2];
  if (v4 != (int *)&the_empty_shape && v4[v4[1]] != 0x7FFFFFFF)
  {
    uint64_t v5 = shape_union((uint64_t)a1, (int *)v3, v4);
    return region_create_with_shape(v5, v6, v7, v8, v9, v10, v11, v12);
  }
LABEL_12:

  return CFRetain(a1);
}

int **CGRegionCreateDifferenceWithRegion(int **result, uint64_t a2)
{
  if (result)
  {
    if (!a2 || (uint64_t v2 = *(int **)(a2 + 16), v2 == (int *)&the_empty_shape) || v2[v2[1]] == 0x7FFFFFFF)
    {
      return (int **)CFRetain(result);
    }
    else
    {
      uint64_t v3 = shape_difference((uint64_t)result, result[2], v2);
      return (int **)region_create_with_shape(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  return result;
}

void *CGRegionCreateXORWithRegion(void *a1, void *cf)
{
  if (!a1)
  {
    if (!cf) {
      return 0;
    }
    goto LABEL_11;
  }
  if (!cf) {
    goto LABEL_12;
  }
  uint64_t v3 = a1[2];
  if ((_UNKNOWN *)v3 == &the_empty_shape || *(_DWORD *)(v3 + 4 * *(int *)(v3 + 4)) == 0x7FFFFFFF)
  {
LABEL_11:
    a1 = cf;
    goto LABEL_12;
  }
  uint64_t v4 = (int *)cf[2];
  if (v4 != (int *)&the_empty_shape && v4[v4[1]] != 0x7FFFFFFF)
  {
    uint64_t v5 = shape_xor((uint64_t)a1, (int *)v3, v4);
    return region_create_with_shape(v5, v6, v7, v8, v9, v10, v11, v12);
  }
LABEL_12:

  return CFRetain(a1);
}

void *CGRegionCreateBySimplifyingRegion(void *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    return 0;
  }
  uint64_t v9 = (int *)cf[2];
  if (v9 == (int *)&the_empty_shape || v9[v9[1]] == 0x7FFFFFFF || !v9) {
    goto LABEL_37;
  }
  uint64_t v10 = v9[1];
  if (*v9 != 0x80000000 || (int)v10 < 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v9[v10] == 0x7FFFFFFF) {
      goto LABEL_37;
    }
    char v14 = a2;
    v28[1] = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v15 = shape_bounds((uint64_t)v9, (int *)&v27, (_DWORD *)&v27 + 1, (signed int *)&v26 + 1, &v26);
    if ((int)v15 >= 9)
    {
      if ((v14 & 1) == 0)
      {
        *(void *)&v30[0] = 0x280000000;
        *((void *)&v30[0] + 1) = HIDWORD(v27) | 0x400000000;
        *(void *)&v30[1] = __PAIR64__(HIDWORD(v26), v27);
        DWORD2(v30[1]) = v26;
        *(void *)((char *)&v30[1] + 12) = 0x7FFFFFFF00000002;
        uint64_t v9 = shape_difference(v15, (int *)v30, v9);
      }
      v28[0] = 8;
      v28[2] = v30;
      v28[3] = v29;
      memset(v30, 0, sizeof(v30));
      memset(v29, 0, sizeof(v29));
      uint64_t v16 = &v9[v9[1]];
      for (uint64_t i = *v16; i != 0x7FFFFFFF; uint64_t i = *v16)
      {
        uint64_t v18 = v16[1];
        uint64_t v19 = (unsigned int *)&v16[v18];
        if (*v19 == 0x7FFFFFFF) {
          break;
        }
        HIDWORD(v27) = i;
        uint64_t v20 = *v19;
        LODWORD(v26) = *v19;
        if (v18 != 2)
        {
          uint64_t v21 = (unsigned int *)(v16 + 2);
          do
          {
            uint64_t v22 = *v21;
            uint64_t v23 = v21[1];
            v21 += 2;
            shape_accum_add((unsigned int *)v28, v22, i, v23, v20);
          }
          while (v21 != v19);
          LODWORD(v18) = v16[1];
        }
        v16 += (int)v18;
      }
      if (v14)
      {
        uint64_t v9 = shape_accum_shape((int *)v28);
      }
      else
      {
        if (v9 && v9 != (int *)&the_empty_shape) {
          free(v9);
        }
        uint64_t v24 = shape_accum_shape((int *)v28);
        uint64_t v25 = shape_bounds((uint64_t)v24, (int *)&v27, (_DWORD *)&v27 + 1, (signed int *)&v26 + 1, &v26);
        *(void *)&v30[0] = 0x280000000;
        *((void *)&v30[0] + 1) = HIDWORD(v27) | 0x400000000;
        *(void *)&v30[1] = __PAIR64__(HIDWORD(v26), v27);
        DWORD2(v30[1]) = v26;
        *(void *)((char *)&v30[1] + 12) = 0x7FFFFFFF00000002;
        uint64_t v9 = shape_difference(v25, (int *)v30, v24);
        if (v24 && v24 != (int *)&the_empty_shape) {
          free(v24);
        }
      }
    }
    uint64_t v12 = v9;
    uint64_t v9 = (int *)cf[2];
  }
  if (v12 != v9)
  {
    return region_create_with_shape(v12, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_37:

  return CFRetain(cf);
}

void *CGRegionCreateByTransformingRegion(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result) {
    return result;
  }
  uint64_t v8 = (int *)result[2];
  if (v8 == (int *)&the_empty_shape || v8[v8[1]] == 0x7FFFFFFF) {
    goto LABEL_13;
  }
  int v9 = a3;
  double v10 = *(double *)a2;
  double v11 = *(double *)(a2 + 8);
  double v13 = *(double *)(a2 + 16);
  double v12 = *(double *)(a2 + 24);
  double v15 = *(double *)(a2 + 32);
  double v14 = *(double *)(a2 + 40);
  if (*(double *)a2 == 1.0 && v11 == 0.0 && v13 == 0.0 && v12 == 1.0)
  {
    if (v15 != 0.0 || v14 != 0.0)
    {
      float v18 = v15;
      double v19 = v18;
      float v20 = v14;
      double v21 = v20;
      return CGRegionCreateWithOffset(result, v19, v21, a2, a3, a4, a5, a6, a7, a8);
    }
LABEL_13:
    return CFRetain(result);
  }
  if (floor(v10) == v10
    && v10 > 0.0
    && v12 < 0.0
    && v11 == 0.0
    && v13 == 0.0
    && floor(v12) == v12
    && floor(v15) == v15
    && floor(v14) == v14)
  {
    uint64_t v17 = shape_reverse_y(result[2], (int)v10, (int)v12, (int)v15, (int)v14);
    goto LABEL_104;
  }
  int v22 = 0;
  uint64_t v23 = v8 + 2;
  BOOL v24 = v13 == 0.0 && v11 == 0.0;
  uint64_t v25 = (int *)&the_empty_shape;
  while (v8)
  {
    if (!v22)
    {
      while (1)
      {
        uint64_t v8 = v23;
        uint64_t v27 = v23[1];
        v23 += v27;
        int v26 = *v23;
        if (*v23 == 0x7FFFFFFF) {
          goto LABEL_103;
        }
        int v22 = v27 - 2;
        if (v27 != 2) {
          goto LABEL_38;
        }
      }
    }
    int v26 = *v23;
LABEL_38:
    int v28 = &v23[-v22];
    int v30 = *v28;
    int v29 = v28[1];
    int v31 = *v8;
    double v32 = (double)v30;
    if (v24)
    {
      double v33 = v15 + v10 * v32;
      double v34 = v15 + v10 * (double)v29;
      if (v33 <= v34) {
        double v35 = v15 + v10 * v32;
      }
      else {
        double v35 = v15 + v10 * (double)v29;
      }
      if (v33 <= v34) {
        double v33 = v15 + v10 * (double)v29;
      }
      double v36 = v14 + v12 * (double)v31;
      double v37 = v14 + v12 * (double)v26;
      if (v36 > v37) {
        double v38 = v14 + v12 * (double)v26;
      }
      else {
        double v38 = v14 + v12 * (double)v31;
      }
      if (v36 <= v37) {
        double v36 = v14 + v12 * (double)v26;
      }
      goto LABEL_92;
    }
    int v39 = v29 - v30;
    double v40 = (double)v39;
    double v41 = (double)(v26 - v31);
    double v42 = v15 + v13 * (double)v31 + v10 * v32;
    double v43 = v14 + v12 * (double)v31 + v11 * v32;
    double v44 = v42 + v10 * (double)v39;
    double v45 = v43 + v11 * (double)v39;
    if (v44 > v42) {
      double v46 = v42 + v10 * (double)v39;
    }
    else {
      double v46 = v42;
    }
    if (v44 >= v42) {
      double v47 = v42;
    }
    else {
      double v47 = v42 + v10 * (double)v39;
    }
    if (v44 >= v42) {
      double v42 = v46;
    }
    if (v45 > v43) {
      double v48 = v43 + v11 * (double)v39;
    }
    else {
      double v48 = v43;
    }
    if (v45 >= v43) {
      double v49 = v43;
    }
    else {
      double v49 = v43 + v11 * (double)v39;
    }
    if (v45 >= v43) {
      double v50 = v48;
    }
    else {
      double v50 = v43;
    }
    double v51 = v44 + v13 * v41;
    double v52 = v45 + v12 * v41;
    if (v51 > v42) {
      double v53 = v51;
    }
    else {
      double v53 = v42;
    }
    if (v51 >= v47) {
      double v35 = v47;
    }
    else {
      double v35 = v51;
    }
    if (v51 >= v47) {
      double v54 = v53;
    }
    else {
      double v54 = v42;
    }
    if (v52 > v50) {
      double v55 = v52;
    }
    else {
      double v55 = v50;
    }
    if (v52 >= v49) {
      double v38 = v49;
    }
    else {
      double v38 = v52;
    }
    if (v52 < v49) {
      double v55 = v50;
    }
    double v33 = v51 + -v10 * v40;
    if (v33 >= v35)
    {
      if (v33 > v54) {
        goto LABEL_88;
      }
    }
    else
    {
      double v35 = v33;
    }
    double v33 = v54;
LABEL_88:
    double v36 = v52 + -v11 * v40;
    if (v36 < v38)
    {
      double v38 = v36;
LABEL_91:
      double v36 = v55;
      goto LABEL_92;
    }
    if (v36 <= v55) {
      goto LABEL_91;
    }
LABEL_92:
    double v56 = ceil(v35 + -0.00390625);
    double v57 = floor(v33 + 0.00390625);
    double v58 = ceil(v38 + -0.00390625);
    double v59 = floor(v36 + 0.00390625);
    double v60 = floor(v35 + 0.00390625);
    double v61 = ceil(v33 + -0.00390625);
    double v62 = floor(v38 + 0.00390625);
    double v63 = ceil(v36 + -0.00390625);
    if (v9 != 1)
    {
      double v60 = v56;
      double v61 = v57;
      double v62 = v58;
      double v63 = v59;
    }
    a3 = (int)v62;
    a4 = (int)v61;
    a2 = (int)v60;
    a5 = (int)v63;
    if ((int)a2 < (int)a4 && (int)a3 < (int)a5)
    {
      int v65 = shape_union_with_bounds(v25, a2, a3, a4, a5);
      if (v25 && v25 != (int *)&the_empty_shape) {
        free(v25);
      }
    }
    else
    {
      int v65 = v25;
    }
    v22 -= 2;
    uint64_t v25 = v65;
    if (!v65) {
      break;
    }
  }
LABEL_103:
  uint64_t v17 = v25;
LABEL_104:

  return region_create_with_shape(v17, a2, a3, a4, a5, a6, a7, a8);
}

BOOL CGRegionIsEmpty(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  return (_UNKNOWN *)v1 == &the_empty_shape || *(_DWORD *)(v1 + 4 * *(int *)(v1 + 4)) == 0x7FFFFFFF;
}

void *CGRegionCreateByScalingRegion(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0.0) {
    _CGHandleAssert("CGRegionCreateByScalingRegion", 479, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "scale > 0", "scale %f must be positive", a7, a8, a9, SLOBYTE(a2));
  }
  if (!a1) {
    return 0;
  }
  uint64_t v9 = a1[2];
  if ((_UNKNOWN *)v9 == &the_empty_shape
    || (a2 != 1.0 ? (BOOL v10 = *(_DWORD *)(v9 + 4 * *(int *)(v9 + 4)) == 0x7FFFFFFF) : (BOOL v10 = 1), v10))
  {
    return CFRetain(a1);
  }
  else
  {
    unsigned int v12 = vcvtd_n_s64_f64(a2, 8uLL);
    int v13 = shape_length(a1[2]);
    if (v13 == 5)
    {
      int8x8_t v21 = (int8x8_t)vshr_n_s32(vmla_s32((int32x2_t)0x100000001, *(int32x2_t *)(v9 + 8), vdup_n_s32(v12)), 8uLL);
      if (vorr_s8((int8x8_t)vdup_lane_s32((int32x2_t)v21, 1), v21).u32[0])
      {
        int8x8_t v31 = v21;
        int v22 = malloc_type_malloc(0x200uLL, 0x705560E0uLL);
        void *v22 = 0x480000000;
        v22[1] = v31;
        *((_DWORD *)v22 + 4) = 0x7FFFFFFF;
      }
      else
      {
        int v22 = &the_empty_shape;
      }
    }
    else
    {
      uint64_t v23 = (char *)malloc_type_malloc(0x38uLL, 0xEB07EEC6uLL);
      BOOL v24 = v23;
      *(_DWORD *)uint64_t v23 = 0;
      *(_OWORD *)(v23 + 4) = xmmword_1850CDCD0;
      *(int32x2_t *)(v23 + 20) = vdup_n_s32(0x7FFFFFFEu);
      *((void *)v23 + 5) = 0;
      *((void *)v23 + 6) = 0;
      *((void *)v23 + 4) = 0;
      if (*(_DWORD *)(v9 + 4 * *(int *)(v9 + 4)) != 0x7FFFFFFF)
      {
        *((_DWORD *)v23 + 1) = 0;
        *((void *)v23 + 4) = v9;
        *((void *)v23 + 5) = v9 + 8;
      }
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      int v22 = &the_empty_shape;
      while (1)
      {
        uint64_t v25 = shape_enum_next((uint64_t)v24, (_DWORD *)&v33 + 1, &v33, (_DWORD *)&v32 + 1, &v32);
        if (!v25) {
          break;
        }
        int v26 = (int)(HIDWORD(v33) * v12 + 1) >> 8;
        int v27 = (int)(v33 * v12 + 1) >> 8;
        unint64_t v33 = __PAIR64__(v26, v27);
        int v28 = (int)(HIDWORD(v32) * v12 + 255) >> 8;
        int v29 = (int)(v32 * v12 + 255) >> 8;
        unint64_t v32 = __PAIR64__(v28, v29);
        if (v22 == (void *)&the_empty_shape)
        {
          int v22 = malloc_type_malloc(0x200uLL, 0x705560E0uLL);
          void *v22 = 0x280000000;
          *((_DWORD *)v22 + 2) = v27;
          *((_DWORD *)v22 + 3) = 4;
          *((_DWORD *)v22 + 4) = v26;
          *((_DWORD *)v22 + 5) = v28;
          *((_DWORD *)v22 + 6) = v29;
          *(void *)((char *)v22 + 28) = 0x7FFFFFFF00000002;
        }
        else
        {
          uint64_t v34 = 0x280000000;
          int v35 = v27;
          int v36 = 4;
          int v37 = v26;
          int v38 = v28;
          int v39 = v29;
          uint64_t v40 = 0x7FFFFFFF00000002;
          int v30 = shape_union(v25, (int *)v22, (int *)&v34);
          if (v22) {
            free(v22);
          }
          int v22 = v30;
        }
      }
      free(v24);
    }
    return region_create_with_shape(v22, v14, v15, v16, v17, v18, v19, v20);
  }
}

CFTypeRef CGRegionRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void CGRegionRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t CGRegionEqualToRegion(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (!a2) {
      return 1;
    }
    uint64_t v7 = *(void *)(a2 + 16);
LABEL_13:
    if ((_UNKNOWN *)v7 != &the_empty_shape) {
      return *(_DWORD *)(v7 + 4 * *(int *)(v7 + 4)) == 0x7FFFFFFF;
    }
    return 1;
  }
  if (!a2)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    goto LABEL_13;
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 == v3) {
    return 1;
  }
  if ((_UNKNOWN *)v2 != &the_empty_shape)
  {
    uint64_t v4 = *(int *)(v2 + 4);
    int v5 = *(_DWORD *)(v2 + 4 * v4);
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(int *)(v3 + 4);
      goto LABEL_17;
    }
  }
  if ((_UNKNOWN *)v3 == &the_empty_shape) {
    return 1;
  }
  uint64_t v6 = *(int *)(v3 + 4);
  if (*(_DWORD *)(v3 + 4 * v6) == 0x7FFFFFFF) {
    return 1;
  }
  uint64_t v4 = *(int *)(v2 + 4);
  int v5 = *(_DWORD *)(v2 + 4 * v4);
LABEL_17:
  uint64_t v9 = (_DWORD *)(v2 + 4 * v4);
  BOOL v10 = (int *)(v3 + 4 * v6);
  while (2)
  {
    if (v5 == 0x7FFFFFFF)
    {
      int v13 = *v10;
      BOOL v14 = 1;
LABEL_34:
      if (v13 != 0x7FFFFFFF) {
        goto LABEL_39;
      }
LABEL_37:
      BOOL v25 = 1;
      return v14 ^ v25 ^ 1u;
    }
    uint64_t v11 = (int)v9[1];
    unsigned int v12 = &v9[v11];
    int v13 = *v10;
    BOOL v14 = *v12 == 0x7FFFFFFF;
    if (*v12 == 0x7FFFFFFF) {
      goto LABEL_34;
    }
    if (v13 == 0x7FFFFFFF)
    {
      BOOL v14 = 0;
      goto LABEL_37;
    }
    uint64_t v15 = v10[1];
    uint64_t v16 = &v10[v15];
    if (*v16 == 0x7FFFFFFF)
    {
      BOOL v14 = 0;
LABEL_39:
      BOOL v25 = v10[v10[1]] == 0x7FFFFFFF;
      return v14 ^ v25 ^ 1u;
    }
    uint64_t result = 0;
    if (v5 == v13 && *v12 == *v16)
    {
      int v5 = *v12;
      uint64_t v17 = v9 + 3;
      uint64_t v18 = 4 * v11 - 8;
      uint64_t v19 = v10 + 3;
      uint64_t v20 = 4 * v15 - 8;
      while (v18 && v20)
      {
        if (*(v17 - 1) == *(v19 - 1))
        {
          int v22 = *v17;
          v17 += 2;
          int v21 = v22;
          int v23 = *v19;
          v19 += 2;
          v18 -= 8;
          v20 -= 8;
          if (v21 == v23) {
            continue;
          }
        }
        return 0;
      }
      uint64_t result = 0;
      char v24 = (v18 == 0) ^ (v20 == 0);
      BOOL v10 = v16;
      uint64_t v9 = v12;
      if ((v24 & 1) == 0) {
        continue;
      }
    }
    return result;
  }
}

uint64_t CGRegionIsValid(void *a1)
{
  if (a1) {
    return (uint64_t)region_check(a1);
  }
  else {
    return 1;
  }
}

BOOL CGRegionContainsPoint(BOOL result, double a2, double a3)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = vcvtmd_s64_f64(a2);
    int v5 = vcvtmd_s64_f64(a3);
    uint64_t v6 = *(_DWORD **)(result + 16);
    if (v6 == (_DWORD *)(v3 + 24)) {
      return v6[5] > v4 && v6[6] > v5 && v6[4] <= v4 && v6[2] <= v5;
    }
    else {
      return shape_contains_point((uint64_t)v6, v4, v5) != 0;
    }
  }
  return result;
}

BOOL CGRegionContainsRect(BOOL result, double a2, double a3, double a4, double a5)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    BOOL v6 = rect_to_bounds((_DWORD *)&v8 + 1, &v8, (_DWORD *)&v7 + 1, &v7, a2, a3, a4, a5);
    uint64_t result = 0;
    if (v6) {
      return shape_contains_bounds(*(void *)(v5 + 16), SHIDWORD(v8), v8, SHIDWORD(v7), v7) != 0;
    }
  }
  return result;
}

uint64_t CGRegionContainsRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2) {
    _CGHandleAssert("assert_check_region", 46, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "r != NULL", "NULL region", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(_DWORD **)(a1 + 16);
  uint64_t v9 = *(_DWORD **)(a2 + 16);
  if (v8) {
    BOOL v10 = v8 == (_DWORD *)&the_empty_shape;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v11 = v10 || v9 == (_DWORD *)&the_empty_shape;
  if (v11 || *v8 != 0x80000000) {
    return 0;
  }
  uint64_t result = 0;
  if (v9)
  {
    uint64_t v13 = v8[1];
    if ((int)v13 >= 1)
    {
      if (*v9 == 0x80000000)
      {
        uint64_t v14 = v9[1];
        if ((int)v14 >= 1 && v8[v13] != 0x7FFFFFFF && v9[v14] != 0x7FFFFFFF)
        {
          if (v8 == v9) {
            return 1;
          }
          int v17 = v9[2];
          uint64_t v15 = v9 + 2;
          int v16 = v17;
          uint64_t v18 = v8 + 2;
          if (v17 == 0x7FFFFFFF) {
            return *v18 != 0x7FFFFFFF;
          }
LABEL_22:
          int v19 = *v18;
          if (*v18 == 0x7FFFFFFF) {
            return *v18 != 0x7FFFFFFF;
          }
          uint64_t v20 = (int)v15[1];
          if (v20 == 2)
          {
            int v21 = v15[2];
            uint64_t v20 = 2;
            goto LABEL_25;
          }
          int v22 = &v15[v20];
          int v24 = *v22;
          unint64_t v23 = (unint64_t)(v22 - 1);
          int v21 = v24;
          while (1)
          {
            uint64_t v25 = v18[1];
            if (v25 == 2)
            {
              int v19 = v18[2];
              uint64_t v25 = 2;
            }
            else
            {
              if (v16 < v19) {
                return 0;
              }
              int v26 = &v18[v25];
              int v19 = *v26;
              if (v16 < *v26)
              {
                int v27 = v18 + 2;
                int v28 = v26 - 1;
                signed int v29 = 0x80000000;
                int v30 = v15;
                while (1)
                {
                  int8x8_t v31 = v30 + 2;
                  if ((unint64_t)(v30 + 2) >= v23) {
                    break;
                  }
                  signed int v32 = v30[2];
                  if (v27 < v28)
                  {
                    while (v32 >= *v27)
                    {
                      signed int v29 = v27[1];
                      if (v32 <= v29)
                      {
                        if (v30[3] > v29) {
                          return 0;
                        }
                        goto LABEL_40;
                      }
                      v27 += 2;
                      if (v27 >= v28) {
                        goto LABEL_40;
                      }
                    }
                    return 0;
                  }
LABEL_40:
                  v30 += 2;
                  if (v27 >= v28)
                  {
                    uint64_t result = 0;
                    int v30 = v31;
                    if (v32 > v29) {
                      return result;
                    }
                  }
                }
                int v16 = *v26;
                if (v21 > v19) {
                  goto LABEL_44;
                }
                if (v21 == v19) {
                  v18 += v25;
                }
LABEL_25:
                v15 += v20;
                int v16 = v21;
                if (v21 == 0x7FFFFFFF) {
                  return *v18 != 0x7FFFFFFF;
                }
                goto LABEL_22;
              }
            }
LABEL_44:
            v18 += v25;
            if (v19 == 0x7FFFFFFF) {
              goto LABEL_25;
            }
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t CGRegionIsRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("assert_check_region", 46, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "r != NULL", "NULL region", a6, a7, a8, v15);
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if ((_UNKNOWN *)v9 == &the_empty_shape || *(_DWORD *)(v9 + 4 * *(int *)(v9 + 4)) == 0x7FFFFFFF)
  {
    BOOL v10 = 1;
    if (!a2) {
      return v10;
    }
  }
  else
  {
    if (*(_DWORD *)(v9 + 12) != 4 || *(_DWORD *)(v9 + 28) != 2) {
      return 0;
    }
    BOOL v10 = *(_DWORD *)(v9 + 32) == 0x7FFFFFFF;
    if (!a2) {
      return v10;
    }
  }
  if (v10)
  {
    *(double *)a2 = CGRegionGetBoundingBox(a1);
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v13;
    return 1;
  }
  return v10;
}

BOOL CGRegionIntersectsRect(BOOL result, double a2, double a3, double a4, double a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v5 = *(void *)(result + 16);
    if ((_UNKNOWN *)v5 == &the_empty_shape || *(_DWORD *)(v5 + 4 * *(int *)(v5 + 4)) == 0x7FFFFFFF) {
      return 0;
    }
    if (a2 == INFINITY || a3 == INFINITY)
    {
      return 0;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      BOOL v7 = rect_to_bounds((_DWORD *)&v12 + 1, &v12, (_DWORD *)&v11 + 1, &v11, a2, a3, a4, a5);
      BOOL v8 = v7;
      uint64_t result = 0;
      if (v8)
      {
        uint64_t result = 0;
        int v9 = v12;
        int v10 = v11;
        if ((int)v11 >= 2147483646) {
          int v10 = 2147483646;
        }
        if (v12 == 0x80000000 || v12 == -2147483647) {
          int v9 = -2147483647;
        }
        if (SHIDWORD(v12) < SHIDWORD(v11) && v9 < v10)
        {
          uint64_t v13 = 0x280000000;
          int v14 = v9;
          int v15 = 4;
          int v16 = HIDWORD(v12);
          int v17 = HIDWORD(v11);
          int v18 = v10;
          uint64_t v19 = 0x7FFFFFFF00000002;
          return shape_intersects_shape((signed int *)v5, (signed int *)&v13) != 0;
        }
      }
    }
  }
  return result;
}

BOOL CGRegionIntersectsRegion(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return shape_intersects_shape(*(signed int **)(a1 + 16), *(signed int **)(a2 + 16)) != 0;
    }
  }
  return result;
}

CFDataRef CGRegionCopyData(void *a1)
{
  if (!region_check(a1)) {
    return 0;
  }
  uint64_t v2 = (UInt8 *)a1[2];
  int v3 = shape_length((uint64_t)v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 4 * v3;
  if (!shape_data_valid(v2, v4)) {
    return 0;
  }

  return CFDataCreate(0, v2, v4);
}

unint64_t CGRegionGetDataLength(void *a1)
{
  if (!region_check(a1)) {
    return 0;
  }
  uint64_t v2 = (_DWORD *)a1[2];
  int v3 = shape_length((uint64_t)v2);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = 4 * v3;
  if (shape_data_valid(v2, v4)) {
    return v4;
  }
  else {
    return 0;
  }
}

_DWORD *CGRegionGetDataBytePtr(void *a1)
{
  if (!region_check(a1)) {
    return 0;
  }
  uint64_t v2 = (_DWORD *)a1[2];
  int v3 = shape_length((uint64_t)v2);
  if (!v3) {
    return 0;
  }
  if (shape_data_valid(v2, 4 * v3)) {
    return v2;
  }
  return 0;
}

unint64_t *rgba64_sample_RGBAf(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v15 = *(void *)(a1 + 176);
  uint64_t v72 = *(void *)(a1 + 80);
  char v75 = *(unint64_t **)(a1 + 88);
  uint64_t v82 = *(void *)(a1 + 112);
  uint64_t v81 = *(void *)(a1 + 120);
  int v71 = *(_DWORD *)(a1 + 188);
  int v16 = (unint64_t *)(*(void *)(a1 + 152) - 8);
  uint64_t v76 = *(void *)(a1 + 144) - 1;
  int v79 = *(_DWORD *)(a1 + 24);
  uint64_t v80 = *(void *)(a1 + 40);
  uint64_t v77 = *(void *)(a1 + 32);
  unint64_t v17 = v77 + ((*(_DWORD *)(a1 + 260) - 1) * v79) + 4 * (4 * *(_DWORD *)(a1 + 256)) - 16;
  uint64_t v73 = *(void *)(a1 + 64);
  uint64_t v74 = *(void *)(a1 + 72);
  unint64_t v78 = v17;
  while (1)
  {
    if (a3 >= v74)
    {
      BOOL result = v75;
      if (a3 <= (uint64_t)v75)
      {
        uint64_t v29 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v30 = 0x3FFFFFFF;
        HIDWORD(v31) = HIDWORD(a3);
        int v21 = a4;
        uint64_t v22 = v73;
      }
      else
      {
        uint64_t v25 = *(void *)(a1 + 216);
        int v26 = (char *)v75 + *(void *)(a1 + 224);
        uint64_t v27 = (uint64_t)&v26[(v25 >> 1) - a3];
        int v21 = a4;
        uint64_t v22 = v73;
        if (v27 < 1) {
          goto LABEL_34;
        }
        if (v27 >= v25) {
          LODWORD(v28) = 0x3FFFFFFF;
        }
        else {
          unint64_t v28 = (unint64_t)(*(void *)(a1 + 232) * v27) >> 32;
        }
        unsigned int v30 = v71 | v28;
        int8x8_t v31 = v26 - 0x1000000;
        uint64_t v29 = 448;
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 216);
      uint64_t v19 = v74 - *(void *)(a1 + 224);
      uint64_t v20 = a3 - v19 + (v18 >> 1);
      int v21 = a4;
      uint64_t v22 = v73;
      BOOL result = v75;
      if (v20 < 1) {
        goto LABEL_34;
      }
      if (v20 >= v18) {
        LODWORD(v24) = 0x3FFFFFFF;
      }
      else {
        unint64_t v24 = (unint64_t)(*(void *)(a1 + 232) * v20) >> 32;
      }
      unsigned int v30 = v71 | v24;
      int8x8_t v31 = (char *)(v19 + 0x1000000);
      uint64_t v29 = 512;
    }
    if (a2 >= v22)
    {
      if (a2 <= v72)
      {
        uint64_t v36 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v35 = a2;
      }
      else
      {
        uint64_t v37 = *(void *)(a1 + 192);
        uint64_t v38 = *(void *)(a1 + 200) + v72;
        uint64_t v39 = v38 - a2 + (v37 >> 1);
        if (v39 < 1) {
          goto LABEL_34;
        }
        if (v39 < v37) {
          unsigned int v30 = ((v30 >> 15) * (((unint64_t)(*(void *)(a1 + 208) * v39) >> 32) >> 15)) | v71;
        }
        uint64_t v35 = v38 - 0x1000000;
        uint64_t v36 = 28;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(a1 + 192);
      uint64_t v33 = v22 - *(void *)(a1 + 200);
      uint64_t v34 = a2 - v33 + (v32 >> 1);
      if (v34 < 1) {
        goto LABEL_34;
      }
      if (v34 < v32) {
        unsigned int v30 = ((v30 >> 15) * (((unint64_t)(*(void *)(a1 + 208) * v34) >> 32) >> 15)) | v71;
      }
      uint64_t v35 = v33 + 0x1000000;
      uint64_t v36 = 32;
    }
    if (v30 >= 0x400000) {
      break;
    }
LABEL_34:
    int v44 = v21 - 1;
    a2 += v82;
    a3 += v81;
    ++v16;
    *(unsigned char *)++uint64_t v76 = 0;
LABEL_35:
    a4 = v44;
    if (!v44) {
      return result;
    }
  }
  unint64_t v40 = v77 + SHIDWORD(v31) * (uint64_t)v79 + 16 * (v35 >> 32);
  uint64_t v41 = *(float32x2_t **)(a1 + 32);
  if (v17 >= v40) {
    double v42 = (float32x2_t *)v40;
  }
  else {
    double v42 = (float32x2_t *)v17;
  }
  if (v42 < v41) {
    double v42 = *(float32x2_t **)(a1 + 32);
  }
  if (v80) {
    float v43 = v42[1].f32[1];
  }
  else {
    float v43 = 1.0;
  }
  float32x2_t v45 = *v42;
  float v46 = v42[1].f32[0];
  if (v15)
  {
    unsigned int v47 = *(_DWORD *)(v15 + (v36 | v29));
LABEL_41:
    int v48 = v47 & 0xF;
    int v49 = HIBYTE(v47) & 3;
    if (v48 == 1)
    {
      double v57 = (float32x2_t *)(v40 + SBYTE1(v47) * (uint64_t)v79);
      if (v17 < (unint64_t)v57) {
        double v57 = (float32x2_t *)v17;
      }
      if (v57 >= v41) {
        uint64_t v41 = v57;
      }
      float32x2_t v58 = *v41;
      float v59 = v41[1].f32[0];
      float v60 = 1.0;
      if (v80) {
        float v60 = v41[1].f32[1];
      }
      double v61 = &interpolate_rgbaf_21353[4 * v49];
    }
    else
    {
      if (v48 != 2)
      {
        if (v48 == 3)
        {
          uint64_t v50 = SBYTE1(v47) * (uint64_t)v79;
          uint64_t v51 = 16 * SBYTE2(v47);
          double v52 = (float32x2_t *)(v40 + v51);
          if (v17 < v40 + v51) {
            double v52 = (float32x2_t *)v17;
          }
          if (v52 < v41) {
            double v52 = v41;
          }
          float32x2_t v53 = *v52;
          if (v80)
          {
            float v54 = v52[1].f32[1];
            double v55 = (float32x2_t *)(v40 + v50 + v51);
            if (v17 < (unint64_t)v55) {
              double v55 = (float32x2_t *)v17;
            }
            if (v55 >= v41) {
              uint64_t v41 = v55;
            }
            float v56 = v41[1].f32[1];
          }
          else
          {
            double v63 = (float32x2_t *)(v40 + v50 + v51);
            if (v17 < (unint64_t)v63) {
              double v63 = (float32x2_t *)v17;
            }
            if (v63 >= v41) {
              uint64_t v41 = v63;
            }
            float v54 = 1.0;
            float v56 = 1.0;
          }
          v11.i32[0] = interpolate_rgbaf_21353[4 * v49 + 3];
          v12.i32[0] = interpolate_rgbaf_21353[4 * ((v47 >> 28) & 3) + 3];
          float v46 = (float)((float)((float)(v46 - (float)(v46 * v11.f32[0])) + (float)(v52[1].f32[0] * v11.f32[0]))
                      - (float)((float)((float)(v46 - (float)(v46 * v11.f32[0])) + (float)(v52[1].f32[0] * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v52[1].f32[0] - (float)(v52[1].f32[0] * v11.f32[0]))
                              + (float)(v41[1].f32[0] * v11.f32[0]))
                      * v12.f32[0]);
          float32x2_t v64 = vmla_n_f32(vmls_lane_f32(v45, v45, v11, 0), v53, v11.f32[0]);
          float32x2_t v45 = vmla_n_f32(vmls_lane_f32(v64, v64, v12, 0), vmla_n_f32(vmls_lane_f32(v53, v53, v11, 0), *v41, v11.f32[0]), v12.f32[0]);
          float v43 = (float)((float)((float)(v43 - (float)(v43 * v11.f32[0])) + (float)(v54 * v11.f32[0]))
                      - (float)((float)((float)(v43 - (float)(v43 * v11.f32[0])) + (float)(v54 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v54 - (float)(v54 * v11.f32[0])) + (float)(v56 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_75;
      }
      double v62 = (float32x2_t *)(v40 + ((uint64_t)((unint64_t)HIWORD(v47) << 56) >> 52));
      if (v17 < (unint64_t)v62) {
        double v62 = (float32x2_t *)v17;
      }
      if (v62 >= v41) {
        uint64_t v41 = v62;
      }
      float32x2_t v58 = *v41;
      float v59 = v41[1].f32[0];
      float v60 = 1.0;
      if (v80) {
        float v60 = v41[1].f32[1];
      }
      double v61 = &interpolate_rgbaf_21353[4 * ((v47 >> 28) & 3)];
    }
    LODWORD(a11) = v61[3];
    float32x2_t v45 = vmla_n_f32(vmls_lane_f32(v45, v45, *(float32x2_t *)&a11, 0), v58, *(float *)&a11);
    float v46 = (float)(v46 - (float)(v46 * *(float *)&a11)) + (float)(v59 * *(float *)&a11);
    float v43 = (float)(v43 - (float)(v43 * *(float *)&a11)) + (float)(v60 * *(float *)&a11);
  }
LABEL_75:
  uint64_t v65 = 0;
  ++v16;
  int v70 = v21;
  int v66 = v21 - 1;
  a3 += v81;
  unint64_t v67 = (unint64_t)result - a3;
  a2 += v82;
  uint64_t v68 = v72 - a2;
  while (1)
  {
    BOOL result = RGBAF_14778(v16, v45.f32[0], v45.f32[1], v46, v43);
    *(unsigned char *)(v76 + 1 + v65) = v30 >> 22;
    unint64_t v17 = v78;
    if (v66 == v65) {
      return result;
    }
    if (((v67 | v68 | (a3 - v74) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v76 += v65 + 1;
      int v44 = ~v65 + v70;
      goto LABEL_35;
    }
    unint64_t v40 = v77 + SHIDWORD(a3) * (uint64_t)v79 + 16 * (a2 >> 32);
    uint64_t v41 = *(float32x2_t **)(a1 + 32);
    if (v78 >= v40) {
      unint64_t v69 = v77 + SHIDWORD(a3) * (uint64_t)v79 + 16 * (a2 >> 32);
    }
    else {
      unint64_t v69 = v78;
    }
    if (v69 < (unint64_t)v41) {
      unint64_t v69 = *(void *)(a1 + 32);
    }
    if (v80) {
      float v43 = *(float *)(v69 + 12);
    }
    else {
      float v43 = 1.0;
    }
    float32x2_t v45 = *(float32x2_t *)v69;
    float v46 = *(float *)(v69 + 8);
    if (v15)
    {
      unsigned int v47 = *(_DWORD *)(v15 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        BOOL result = v75;
        v76 += v65 + 1;
        int v21 = ~v65 + v70;
        unsigned int v30 = -1;
        goto LABEL_41;
      }
    }
    ++v16;
    ++v65;
    a3 += v81;
    v67 -= v81;
    a2 += v82;
    v68 -= v82;
    unsigned int v30 = -1;
  }
}

unint64_t *RGBAF_14778(unint64_t *result, float a2, float a3, float a4, float a5)
{
  if (a5 <= 0.0)
  {
    unint64_t v8 = 0;
  }
  else
  {
    LODWORD(v5) = (int)(float)((float)(a5 * 65535.0) + 0.5);
    if (a5 <= 1.0) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = 0xFFFFLL;
    }
    LOWORD(v6) = v5;
    if (a5 > 1.0) {
      a5 = 1.0;
    }
    LOWORD(v7) = v5;
    if (a2 <= a5)
    {
      if (a2 >= 0.0) {
        int v7 = (int)(float)((float)(a2 * 65535.0) + 0.5);
      }
      else {
        LOWORD(v7) = 0;
      }
    }
    int v9 = v5;
    if (a3 <= a5)
    {
      if (a3 >= 0.0) {
        int v9 = (int)(float)((float)(a3 * 65535.0) + 0.5);
      }
      else {
        int v9 = 0;
      }
    }
    if (a4 <= a5)
    {
      if (a4 >= 0.0) {
        int v6 = (int)(float)((float)(a4 * 65535.0) + 0.5);
      }
      else {
        LOWORD(v6) = 0;
      }
    }
    unint64_t v8 = (v5 << 48) | ((unint64_t)(unsigned __int16)v6 << 32) | (v9 << 16) | (unsigned __int16)v7;
  }
  unint64_t *result = v8;
  return result;
}

unint64_t *rgba64_sample_RGBAF(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v15 = *(void *)(a1 + 176);
  uint64_t v71 = *(void *)(a1 + 80);
  uint64_t v74 = *(unint64_t **)(a1 + 88);
  uint64_t v81 = *(void *)(a1 + 112);
  uint64_t v80 = *(void *)(a1 + 120);
  int v70 = *(_DWORD *)(a1 + 188);
  int v16 = (unint64_t *)(*(void *)(a1 + 152) - 8);
  uint64_t v75 = *(void *)(a1 + 144) - 1;
  uint64_t v79 = *(void *)(a1 + 40);
  uint64_t v76 = *(void *)(a1 + 32);
  int v77 = *(_DWORD *)(a1 + 24);
  unint64_t v78 = v76 + ((*(_DWORD *)(a1 + 260) - 1) * v77) + 4 * (4 * *(_DWORD *)(a1 + 256)) - 16;
  uint64_t v72 = *(void *)(a1 + 72);
  uint64_t v73 = *(void *)(a1 + 64);
  while (1)
  {
    if (a3 >= v72)
    {
      BOOL result = v74;
      if (a3 <= (uint64_t)v74)
      {
        uint64_t v28 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v29 = 0x3FFFFFFF;
        HIDWORD(v30) = HIDWORD(a3);
        int v20 = a4;
        uint64_t v22 = v73;
      }
      else
      {
        uint64_t v24 = *(void *)(a1 + 216);
        uint64_t v25 = (char *)v74 + *(void *)(a1 + 224);
        uint64_t v26 = (uint64_t)&v25[(v24 >> 1) - a3];
        int v20 = a4;
        uint64_t v22 = v73;
        if (v26 < 1) {
          goto LABEL_33;
        }
        if (v26 >= v24) {
          LODWORD(v27) = 0x3FFFFFFF;
        }
        else {
          unint64_t v27 = (unint64_t)(*(void *)(a1 + 232) * v26) >> 32;
        }
        unsigned int v29 = v70 | v27;
        unsigned int v30 = v25 - 0x1000000;
        uint64_t v28 = 448;
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 216);
      uint64_t v18 = v72 - *(void *)(a1 + 224);
      uint64_t v19 = a3 - v18 + (v17 >> 1);
      int v20 = a4;
      uint64_t v22 = v73;
      BOOL result = v74;
      if (v19 < 1) {
        goto LABEL_33;
      }
      if (v19 >= v17) {
        LODWORD(v23) = 0x3FFFFFFF;
      }
      else {
        unint64_t v23 = (unint64_t)(*(void *)(a1 + 232) * v19) >> 32;
      }
      unsigned int v29 = v70 | v23;
      unsigned int v30 = (char *)(v18 + 0x1000000);
      uint64_t v28 = 512;
    }
    if (a2 >= v22)
    {
      if (a2 <= v71)
      {
        uint64_t v35 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v34 = a2;
      }
      else
      {
        uint64_t v36 = *(void *)(a1 + 192);
        uint64_t v37 = *(void *)(a1 + 200) + v71;
        uint64_t v38 = v37 - a2 + (v36 >> 1);
        if (v38 < 1) {
          goto LABEL_33;
        }
        if (v38 < v36) {
          unsigned int v29 = ((v29 >> 15) * (((unint64_t)(*(void *)(a1 + 208) * v38) >> 32) >> 15)) | v70;
        }
        uint64_t v34 = v37 - 0x1000000;
        uint64_t v35 = 28;
      }
    }
    else
    {
      uint64_t v31 = *(void *)(a1 + 192);
      uint64_t v32 = v22 - *(void *)(a1 + 200);
      uint64_t v33 = a2 - v32 + (v31 >> 1);
      if (v33 < 1) {
        goto LABEL_33;
      }
      if (v33 < v31) {
        unsigned int v29 = ((v29 >> 15) * (((unint64_t)(*(void *)(a1 + 208) * v33) >> 32) >> 15)) | v70;
      }
      uint64_t v34 = v32 + 0x1000000;
      uint64_t v35 = 32;
    }
    if (v29 >= 0x400000) {
      break;
    }
LABEL_33:
    int v43 = v20 - 1;
    a2 += v81;
    a3 += v80;
    ++v16;
    *(unsigned char *)++uint64_t v75 = 0;
LABEL_34:
    a4 = v43;
    if (!v43) {
      return result;
    }
  }
  unint64_t v39 = v76 + SHIDWORD(v30) * (uint64_t)v77 + 16 * (v34 >> 32);
  unint64_t v40 = *(int8x8_t **)(a1 + 32);
  uint64_t v41 = (int8x8_t *)v78;
  if (v78 >= v39) {
    uint64_t v41 = (int8x8_t *)v39;
  }
  if (v41 < v40) {
    uint64_t v41 = *(int8x8_t **)(a1 + 32);
  }
  if (v79) {
    float v42 = COERCE_FLOAT(bswap32(v41[1].u32[1]));
  }
  else {
    float v42 = 1.0;
  }
  float32x2_t v44 = (float32x2_t)vrev32_s8(*v41);
  float v45 = COERCE_FLOAT(bswap32(v41[1].u32[0]));
  if (v15)
  {
    unsigned int v46 = *(_DWORD *)(v15 + (v35 | v28));
LABEL_40:
    int v47 = v46 & 0xF;
    int v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      float32x2_t v58 = (int8x8_t *)(v39 + SBYTE1(v46) * (uint64_t)v77);
      if (v78 < (unint64_t)v58) {
        float32x2_t v58 = (int8x8_t *)v78;
      }
      if (v58 >= v40) {
        unint64_t v40 = v58;
      }
      float32x2_t v59 = (float32x2_t)vrev32_s8(*v40);
      float v60 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
      float v61 = 1.0;
      if (v79) {
        float v61 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
      }
      double v62 = &interpolate_rgbaf_21353[4 * v48];
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          int v49 = (int8x8_t *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 52));
          if (v78 < (unint64_t)v49) {
            int v49 = (int8x8_t *)v78;
          }
          if (v49 < v40) {
            int v49 = v40;
          }
          float32x2_t v50 = (float32x2_t)vrev32_s8(*v49);
          float v51 = COERCE_FLOAT(bswap32(v49[1].u32[0]));
          float v52 = 1.0;
          float v53 = 1.0;
          if (v79) {
            float v53 = COERCE_FLOAT(bswap32(v49[1].u32[1]));
          }
          unint64_t v54 = v39 + SBYTE1(v46) * (uint64_t)v77 + 16 * SBYTE2(v46);
          if (v78 < v54) {
            unint64_t v54 = v78;
          }
          if (v54 >= (unint64_t)v40) {
            unint64_t v40 = (int8x8_t *)v54;
          }
          float32x2_t v55 = (float32x2_t)vrev32_s8(*v40);
          float v56 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
          if (v79) {
            float v52 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
          }
          v11.i32[0] = interpolate_rgbaf_21353[4 * v48 + 3];
          v12.i32[0] = interpolate_rgbaf_21353[4 * ((v46 >> 28) & 3) + 3];
          float v45 = (float)((float)((float)(v45 - (float)(v45 * v11.f32[0])) + (float)(v51 * v11.f32[0]))
                      - (float)((float)((float)(v45 - (float)(v45 * v11.f32[0])) + (float)(v51 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v56 * v11.f32[0])) * v12.f32[0]);
          float32x2_t v57 = vmla_n_f32(vmls_lane_f32(v44, v44, v11, 0), v50, v11.f32[0]);
          float32x2_t v44 = vmla_n_f32(vmls_lane_f32(v57, v57, v12, 0), vmla_n_f32(vmls_lane_f32(v50, v50, v11, 0), v55, v11.f32[0]), v12.f32[0]);
          float v42 = (float)((float)((float)(v42 - (float)(v42 * v11.f32[0])) + (float)(v53 * v11.f32[0]))
                      - (float)((float)((float)(v42 - (float)(v42 * v11.f32[0])) + (float)(v53 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v52 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_71;
      }
      double v63 = (int8x8_t *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 52));
      if (v78 < (unint64_t)v63) {
        double v63 = (int8x8_t *)v78;
      }
      if (v63 >= v40) {
        unint64_t v40 = v63;
      }
      float32x2_t v59 = (float32x2_t)vrev32_s8(*v40);
      float v60 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
      float v61 = 1.0;
      if (v79) {
        float v61 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
      }
      double v62 = &interpolate_rgbaf_21353[4 * ((v46 >> 28) & 3)];
    }
    LODWORD(a11) = v62[3];
    float32x2_t v44 = vmla_n_f32(vmls_lane_f32(v44, v44, *(float32x2_t *)&a11, 0), v59, *(float *)&a11);
    float v45 = (float)(v45 - (float)(v45 * *(float *)&a11)) + (float)(v60 * *(float *)&a11);
    float v42 = (float)(v42 - (float)(v42 * *(float *)&a11)) + (float)(v61 * *(float *)&a11);
  }
LABEL_71:
  uint64_t v64 = 0;
  ++v16;
  int v69 = v20;
  int v65 = v20 - 1;
  a3 += v80;
  unint64_t v66 = (unint64_t)result - a3;
  a2 += v81;
  uint64_t v67 = v71 - a2;
  while (1)
  {
    BOOL result = RGBAF_14778(v16, v44.f32[0], v44.f32[1], v45, v42);
    *(unsigned char *)(v75 + 1 + v64) = v29 >> 22;
    if (v65 == v64) {
      return result;
    }
    if (((v66 | v67 | (a3 - v72) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v75 += v64 + 1;
      int v43 = ~v64 + v69;
      goto LABEL_34;
    }
    unint64_t v39 = v76 + SHIDWORD(a3) * (uint64_t)v77 + 16 * (a2 >> 32);
    unint64_t v40 = *(int8x8_t **)(a1 + 32);
    uint64_t v68 = (int8x8_t *)v78;
    if (v78 >= v39) {
      uint64_t v68 = (int8x8_t *)(v76 + SHIDWORD(a3) * (uint64_t)v77 + 16 * (a2 >> 32));
    }
    if (v68 < v40) {
      uint64_t v68 = *(int8x8_t **)(a1 + 32);
    }
    if (v79) {
      float v42 = COERCE_FLOAT(bswap32(v68[1].u32[1]));
    }
    else {
      float v42 = 1.0;
    }
    float32x2_t v44 = (float32x2_t)vrev32_s8(*v68);
    float v45 = COERCE_FLOAT(bswap32(v68[1].u32[0]));
    if (v15)
    {
      unsigned int v46 = *(_DWORD *)(v15 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        BOOL result = v74;
        v75 += v64 + 1;
        int v20 = ~v64 + v69;
        unsigned int v29 = -1;
        goto LABEL_40;
      }
    }
    ++v16;
    ++v64;
    a3 += v80;
    v66 -= v80;
    a2 += v81;
    v67 -= v81;
    unsigned int v29 = -1;
  }
}

unint64_t *rgba64_sample_RGBf(unint64_t *result, int64_t a2, int64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v12 = result[22];
  int64_t v59 = result[10];
  int64_t v62 = result[11];
  unint64_t v67 = result[15];
  unint64_t v68 = result[14];
  uint64_t v13 = (unint64_t *)(result[19] - 8);
  uint64_t v63 = result[18] - 1;
  unint64_t v64 = result[4];
  int v65 = *((_DWORD *)result + 6);
  int v69 = result;
  int v58 = *((_DWORD *)result + 47);
  unint64_t v66 = v64
      + ((*((_DWORD *)result + 65) - 1) * v65)
      + 4 * (3 * *((_DWORD *)result + 64))
      - 16;
  unint64_t v60 = result[8];
  int64_t v61 = result[9];
  while (1)
  {
    if (a3 >= v61)
    {
      if (a3 <= v62)
      {
        uint64_t v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        int v17 = a4;
        int64_t v18 = v60;
      }
      else
      {
        uint64_t v20 = v69[27];
        unint64_t v21 = v69[28] + v62;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        int v17 = a4;
        int64_t v18 = v60;
        if (v22 < 1) {
          goto LABEL_33;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (v69[29] * v22) >> 32;
        }
        unsigned int v25 = v58 | v23;
        unint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v14 = v69[27];
      unint64_t v15 = v61 - v69[28];
      uint64_t v16 = a3 - v15 + (v14 >> 1);
      int v17 = a4;
      int64_t v18 = v60;
      if (v16 < 1) {
        goto LABEL_33;
      }
      if (v16 >= v14) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (v69[29] * v16) >> 32;
      }
      unsigned int v25 = v58 | v19;
      unint64_t v26 = v15 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v18)
    {
      if (a2 <= v59)
      {
        uint64_t v31 = ((unint64_t)a2 >> 26) & 0x3C;
        HIDWORD(v30) = HIDWORD(a2);
      }
      else
      {
        uint64_t v32 = v69[24];
        unint64_t v33 = v69[25] + v59;
        uint64_t v34 = v33 - a2 + (v32 >> 1);
        if (v34 < 1) {
          goto LABEL_33;
        }
        if (v34 < v32) {
          unsigned int v25 = ((v25 >> 15) * (((v69[26] * v34) >> 32) >> 15)) | v58;
        }
        unint64_t v30 = v33 - 0x1000000;
        uint64_t v31 = 28;
      }
    }
    else
    {
      uint64_t v27 = v69[24];
      unint64_t v28 = v18 - v69[25];
      uint64_t v29 = a2 - v28 + (v27 >> 1);
      if (v29 < 1) {
        goto LABEL_33;
      }
      if (v29 < v27) {
        unsigned int v25 = ((v25 >> 15) * (((v69[26] * v29) >> 32) >> 15)) | v58;
      }
      unint64_t v30 = v28 + 0x1000000;
      uint64_t v31 = 32;
    }
    if (v25 >= 0x400000) {
      break;
    }
LABEL_33:
    int v41 = v17 - 1;
    a2 += v68;
    a3 += v67;
    ++v13;
    *(unsigned char *)++uint64_t v63 = 0;
LABEL_34:
    a4 = v41;
    if (!v41) {
      return result;
    }
  }
  unint64_t v35 = v64 + SHIDWORD(v26) * (uint64_t)v65 + 12 * SHIDWORD(v30);
  uint64_t v36 = (float32x2_t *)v69[4];
  uint64_t v37 = (float32x2_t *)v66;
  if (v66 >= v35) {
    uint64_t v37 = (float32x2_t *)v35;
  }
  if (v37 < v36) {
    uint64_t v37 = (float32x2_t *)v69[4];
  }
  float32x2_t v38 = *v37;
  float v39 = v37[1].f32[0];
  if (!v12) {
    goto LABEL_36;
  }
  unsigned int v40 = *(_DWORD *)(v12 + (v31 | v24));
LABEL_38:
  int v42 = v40 & 0xF;
  int v43 = HIBYTE(v40) & 3;
  if (v42 == 1)
  {
    int v48 = (float32x2_t *)(v35 + SBYTE1(v40) * (uint64_t)v65);
    if (v66 < (unint64_t)v48) {
      int v48 = (float32x2_t *)v66;
    }
    if (v48 >= v36) {
      uint64_t v36 = v48;
    }
    float v49 = v36[1].f32[0];
    float32x2_t v50 = &interpolate_rgbaf_21353[4 * v43];
    goto LABEL_61;
  }
  if (v42 == 2)
  {
    float v51 = (float32x2_t *)(v35 + 12 * SBYTE2(v40));
    if (v66 < (unint64_t)v51) {
      float v51 = (float32x2_t *)v66;
    }
    if (v51 >= v36) {
      uint64_t v36 = v51;
    }
    float v49 = v36[1].f32[0];
    float32x2_t v50 = &interpolate_rgbaf_21353[4 * ((v40 >> 28) & 3)];
LABEL_61:
    LODWORD(a8) = v50[3];
    float32x2_t v38 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a8, 0), *v36, *(float *)&a8);
    float v39 = (float)(v39 - (float)(v39 * *(float *)&a8)) + (float)(v49 * *(float *)&a8);
    *(float *)&a8 = *(float *)&a8 + (float)(1.0 - *(float *)&a8);
    goto LABEL_62;
  }
  if (v42 != 3)
  {
LABEL_36:
    LODWORD(a8) = 1.0;
    goto LABEL_62;
  }
  float32x2_t v44 = (float32x2_t *)(v35 + 12 * SBYTE2(v40));
  if (v66 >= (unint64_t)v44) {
    float v45 = v44;
  }
  else {
    float v45 = (float32x2_t *)v66;
  }
  if (v45 < v36) {
    float v45 = v36;
  }
  unsigned int v46 = (float32x2_t *)((char *)v44 + SBYTE1(v40) * (uint64_t)v65);
  if (v66 < (unint64_t)v46) {
    unsigned int v46 = (float32x2_t *)v66;
  }
  if (v46 >= v36) {
    uint64_t v36 = v46;
  }
  LODWORD(a9) = interpolate_rgbaf_21353[4 * v43 + 3];
  LODWORD(a10) = interpolate_rgbaf_21353[4 * ((v40 >> 28) & 3) + 3];
  float v39 = (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v45[1].f32[0] * *(float *)&a9))
              - (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v45[1].f32[0] * *(float *)&a9))
                      * *(float *)&a10))
      + (float)((float)((float)(v45[1].f32[0] - (float)(v45[1].f32[0] * *(float *)&a9))
                      + (float)(v36[1].f32[0] * *(float *)&a9))
              * *(float *)&a10);
  float32x2_t v47 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a9, 0), *v45, *(float *)&a9);
  float32x2_t v38 = vmla_n_f32(vmls_lane_f32(v47, v47, *(float32x2_t *)&a10, 0), vmla_n_f32(vmls_lane_f32(*v45, *v45, *(float32x2_t *)&a9, 0), *v36, *(float *)&a9), *(float *)&a10);
  *(float *)&a8 = (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9))
                        - (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10))
                + (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10);
LABEL_62:
  uint64_t v52 = 0;
  ++v13;
  int v57 = v17;
  int v53 = v17 - 1;
  a3 += v67;
  int64_t v54 = v62 - a3;
  a2 += v68;
  int64_t v55 = v59 - a2;
  while (1)
  {
    BOOL result = RGBAF_14778(v13, v38.f32[0], v38.f32[1], v39, *(float *)&a8);
    *(unsigned char *)(v63 + 1 + v52) = v25 >> 22;
    if (v53 == v52) {
      return result;
    }
    if (((v54 | v55 | (a3 - v61) | (a2 - v60)) & 0x8000000000000000) != 0)
    {
      v63 += v52 + 1;
      int v41 = ~v52 + v57;
      goto LABEL_34;
    }
    unint64_t v35 = v64 + SHIDWORD(a3) * (uint64_t)v65 + 12 * SHIDWORD(a2);
    uint64_t v36 = (float32x2_t *)v69[4];
    unint64_t v56 = v66;
    if (v66 >= v35) {
      unint64_t v56 = v64 + SHIDWORD(a3) * (uint64_t)v65 + 12 * SHIDWORD(a2);
    }
    if (v56 < (unint64_t)v36) {
      unint64_t v56 = v69[4];
    }
    float32x2_t v38 = *(float32x2_t *)v56;
    float v39 = *(float *)(v56 + 8);
    if (v12)
    {
      unsigned int v40 = *(_DWORD *)(v12 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v63 += v52 + 1;
        int v17 = ~v52 + v57;
        unsigned int v25 = -1;
        goto LABEL_38;
      }
    }
    ++v52;
    ++v13;
    a3 += v67;
    v54 -= v67;
    a2 += v68;
    v55 -= v68;
    LODWORD(a8) = 1.0;
    unsigned int v25 = -1;
  }
}

unint64_t *rgba64_sample_RGBF(unint64_t *result, int64_t a2, int64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v12 = result[22];
  int64_t v60 = result[10];
  int64_t v63 = result[11];
  unint64_t v68 = result[15];
  unint64_t v69 = result[14];
  uint64_t v13 = (unint64_t *)(result[19] - 8);
  uint64_t v64 = result[18] - 1;
  unint64_t v65 = result[4];
  int v66 = *((_DWORD *)result + 6);
  int v70 = result;
  int v59 = *((_DWORD *)result + 47);
  unint64_t v67 = v65
      + ((*((_DWORD *)result + 65) - 1) * v66)
      + 4 * (3 * *((_DWORD *)result + 64))
      - 16;
  unint64_t v61 = result[8];
  int64_t v62 = result[9];
  while (1)
  {
    if (a3 >= v62)
    {
      if (a3 <= v63)
      {
        uint64_t v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        int v17 = a4;
        int64_t v18 = v61;
      }
      else
      {
        uint64_t v20 = v70[27];
        unint64_t v21 = v70[28] + v63;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        int v17 = a4;
        int64_t v18 = v61;
        if (v22 < 1) {
          goto LABEL_33;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (v70[29] * v22) >> 32;
        }
        unsigned int v25 = v59 | v23;
        unint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v14 = v70[27];
      unint64_t v15 = v62 - v70[28];
      uint64_t v16 = a3 - v15 + (v14 >> 1);
      int v17 = a4;
      int64_t v18 = v61;
      if (v16 < 1) {
        goto LABEL_33;
      }
      if (v16 >= v14) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (v70[29] * v16) >> 32;
      }
      unsigned int v25 = v59 | v19;
      unint64_t v26 = v15 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v18)
    {
      if (a2 <= v60)
      {
        uint64_t v31 = ((unint64_t)a2 >> 26) & 0x3C;
        HIDWORD(v30) = HIDWORD(a2);
      }
      else
      {
        uint64_t v32 = v70[24];
        unint64_t v33 = v70[25] + v60;
        uint64_t v34 = v33 - a2 + (v32 >> 1);
        if (v34 < 1) {
          goto LABEL_33;
        }
        if (v34 < v32) {
          unsigned int v25 = ((v25 >> 15) * (((v70[26] * v34) >> 32) >> 15)) | v59;
        }
        unint64_t v30 = v33 - 0x1000000;
        uint64_t v31 = 28;
      }
    }
    else
    {
      uint64_t v27 = v70[24];
      unint64_t v28 = v18 - v70[25];
      uint64_t v29 = a2 - v28 + (v27 >> 1);
      if (v29 < 1) {
        goto LABEL_33;
      }
      if (v29 < v27) {
        unsigned int v25 = ((v25 >> 15) * (((v70[26] * v29) >> 32) >> 15)) | v59;
      }
      unint64_t v30 = v28 + 0x1000000;
      uint64_t v31 = 32;
    }
    if (v25 >= 0x400000) {
      break;
    }
LABEL_33:
    int v41 = v17 - 1;
    a2 += v69;
    a3 += v68;
    ++v13;
    *(unsigned char *)++uint64_t v64 = 0;
LABEL_34:
    a4 = v41;
    if (!v41) {
      return result;
    }
  }
  unint64_t v35 = v65 + SHIDWORD(v26) * (uint64_t)v66 + 12 * SHIDWORD(v30);
  uint64_t v36 = (int8x8_t *)v70[4];
  uint64_t v37 = (int8x8_t *)v67;
  if (v67 >= v35) {
    uint64_t v37 = (int8x8_t *)v35;
  }
  if (v37 < v36) {
    uint64_t v37 = (int8x8_t *)v70[4];
  }
  float32x2_t v38 = (float32x2_t)vrev32_s8(*v37);
  float v39 = COERCE_FLOAT(bswap32(v37[1].u32[0]));
  if (!v12) {
    goto LABEL_36;
  }
  unsigned int v40 = *(_DWORD *)(v12 + (v31 | v24));
LABEL_38:
  int v42 = v40 & 0xF;
  int v43 = HIBYTE(v40) & 3;
  if (v42 == 1)
  {
    float v49 = (int8x8_t *)(v35 + SBYTE1(v40) * (uint64_t)v66);
    if (v67 < (unint64_t)v49) {
      float v49 = (int8x8_t *)v67;
    }
    if (v49 >= v36) {
      uint64_t v36 = v49;
    }
    float v50 = COERCE_FLOAT(bswap32(v36[1].u32[0]));
    float v51 = &interpolate_rgbaf_21353[4 * v43];
    goto LABEL_61;
  }
  if (v42 == 2)
  {
    uint64_t v52 = (int8x8_t *)(v35 + 12 * SBYTE2(v40));
    if (v67 < (unint64_t)v52) {
      uint64_t v52 = (int8x8_t *)v67;
    }
    if (v52 >= v36) {
      uint64_t v36 = v52;
    }
    float v50 = COERCE_FLOAT(bswap32(v36[1].u32[0]));
    float v51 = &interpolate_rgbaf_21353[4 * ((v40 >> 28) & 3)];
LABEL_61:
    LODWORD(a8) = v51[3];
    float32x2_t v38 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a8, 0), (float32x2_t)vrev32_s8(*v36), *(float *)&a8);
    float v39 = (float)(v39 - (float)(v39 * *(float *)&a8)) + (float)(v50 * *(float *)&a8);
    *(float *)&a8 = *(float *)&a8 + (float)(1.0 - *(float *)&a8);
    goto LABEL_62;
  }
  if (v42 != 3)
  {
LABEL_36:
    LODWORD(a8) = 1.0;
    goto LABEL_62;
  }
  float32x2_t v44 = (int8x8_t *)(v35 + 12 * SBYTE2(v40));
  if (v67 >= (unint64_t)v44) {
    float v45 = v44;
  }
  else {
    float v45 = (int8x8_t *)v67;
  }
  if (v45 < v36) {
    float v45 = v36;
  }
  float v46 = COERCE_FLOAT(bswap32(v45[1].u32[0]));
  float32x2_t v47 = (int8x8_t *)((char *)v44 + SBYTE1(v40) * (uint64_t)v66);
  if (v67 < (unint64_t)v47) {
    float32x2_t v47 = (int8x8_t *)v67;
  }
  if (v47 >= v36) {
    uint64_t v36 = v47;
  }
  LODWORD(a9) = interpolate_rgbaf_21353[4 * v43 + 3];
  LODWORD(a10) = interpolate_rgbaf_21353[4 * ((v40 >> 28) & 3) + 3];
  float v39 = (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v46 * *(float *)&a9))
              - (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v46 * *(float *)&a9))
                      * *(float *)&a10))
      + (float)((float)((float)(v46 - (float)(v46 * *(float *)&a9))
                      + (float)(COERCE_FLOAT(bswap32(v36[1].u32[0])) * *(float *)&a9))
              * *(float *)&a10);
  a8 = COERCE_DOUBLE(vrev32_s8(*v45));
  float32x2_t v48 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a9, 0), *(float32x2_t *)&a8, *(float *)&a9);
  float32x2_t v38 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a10, 0), vmla_n_f32(vmls_lane_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8, *(float32x2_t *)&a9, 0), (float32x2_t)vrev32_s8(*v36), *(float *)&a9), *(float *)&a10);
  *(float *)&a8 = (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9))
                        - (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10))
                + (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10);
LABEL_62:
  uint64_t v53 = 0;
  ++v13;
  int v58 = v17;
  int v54 = v17 - 1;
  a3 += v68;
  int64_t v55 = v63 - a3;
  a2 += v69;
  int64_t v56 = v60 - a2;
  while (1)
  {
    BOOL result = RGBAF_14778(v13, v38.f32[0], v38.f32[1], v39, *(float *)&a8);
    *(unsigned char *)(v64 + 1 + v53) = v25 >> 22;
    if (v54 == v53) {
      return result;
    }
    if (((v55 | v56 | (a3 - v62) | (a2 - v61)) & 0x8000000000000000) != 0)
    {
      v64 += v53 + 1;
      int v41 = ~v53 + v58;
      goto LABEL_34;
    }
    unint64_t v35 = v65 + SHIDWORD(a3) * (uint64_t)v66 + 12 * SHIDWORD(a2);
    uint64_t v36 = (int8x8_t *)v70[4];
    int v57 = (int8x8_t *)v67;
    if (v67 >= v35) {
      int v57 = (int8x8_t *)(v65 + SHIDWORD(a3) * (uint64_t)v66 + 12 * SHIDWORD(a2));
    }
    if (v57 < v36) {
      int v57 = (int8x8_t *)v70[4];
    }
    float32x2_t v38 = (float32x2_t)vrev32_s8(*v57);
    float v39 = COERCE_FLOAT(bswap32(v57[1].u32[0]));
    if (v12)
    {
      unsigned int v40 = *(_DWORD *)(v12 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v64 += v53 + 1;
        int v17 = ~v53 + v58;
        unsigned int v25 = -1;
        goto LABEL_38;
      }
    }
    ++v53;
    ++v13;
    a3 += v68;
    v55 -= v68;
    a2 += v69;
    v56 -= v69;
    LODWORD(a8) = 1.0;
    unsigned int v25 = -1;
  }
}

uint64_t rgba64_sample_cmyk64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v105 = *(void *)(result + 80);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v107 = *(void *)(result + 88);
  uint64_t v108 = *(void *)(result + 144) - 1;
  int v12 = *(_DWORD *)(result + 260) - 1;
  uint64_t v13 = *(unsigned int *)(result + 256);
  int v103 = *(_DWORD *)(result + 188);
  unint64_t v14 = v5 + (v12 * v7) + 2 * (v13 - 1);
  unint64_t v15 = v4 + (v12 * v6) + 8 * v13 - 16;
  uint64_t v106 = *(void *)(result + 72);
  uint64_t v104 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if (a3 >= v106)
    {
      if (a3 <= v107)
      {
        uint64_t v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        uint64_t v26 = a3;
        uint64_t v27 = v104;
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v107;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1) {
          goto LABEL_39;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        uint64_t v27 = v104;
        unsigned int v25 = v103 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v106 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1) {
        goto LABEL_39;
      }
      if (v18 >= v16) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      uint64_t v27 = v104;
      unsigned int v25 = v103 | v19;
      uint64_t v26 = v17 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v27) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v27 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v103;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v10;
    a3 += v9;
    v11 += 8;
    *(unsigned char *)++uint64_t v108 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v105)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_26;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v105;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_39;
  }
  if (v35 < v33) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v103;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_26:
  if (v25 < 0x400000) {
    goto LABEL_39;
  }
  uint64_t v36 = v26 >> 32;
  uint64_t v37 = v31 >> 32;
  uint64_t v38 = v4 + SHIDWORD(v26) * (uint64_t)v6;
  unint64_t v39 = v38 + 8 * v37;
  unsigned int v40 = *(unint64_t **)(result + 32);
  if (v15 >= v39) {
    int v41 = (unint64_t *)(v38 + 8 * v37);
  }
  else {
    int v41 = (unint64_t *)v15;
  }
  if (v41 < v40) {
    int v41 = *(unint64_t **)(result + 32);
  }
  if (v5)
  {
    unint64_t v42 = v5 + (int)v36 * (uint64_t)v7 + 2 * v37;
    int v43 = *(unsigned __int16 **)(result + 40);
    if (v14 >= v42) {
      float32x2_t v44 = (unsigned __int16 *)v42;
    }
    else {
      float32x2_t v44 = (unsigned __int16 *)v14;
    }
    if (v44 >= v43) {
      int v43 = v44;
    }
    int v45 = *v43;
  }
  else
  {
    unint64_t v42 = 0;
    int v45 = 0xFFFF;
  }
  uint64_t v46 = v105;
  unint64_t v47 = *v41;
  if (!v8) {
    goto LABEL_101;
  }
  unsigned int v48 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_45:
  int v49 = v48 & 0xF;
  unsigned int v50 = HIBYTE(v48) & 3;
  switch(v49)
  {
    case 1:
      int v77 = (unint64_t *)(v39 + SBYTE1(v48) * (uint64_t)v6);
      if (v15 < (unint64_t)v77) {
        int v77 = (unint64_t *)v15;
      }
      if (v77 < v40) {
        int v77 = v40;
      }
      unint64_t v78 = *v77;
      __int16 v79 = -1;
      if (v5)
      {
        uint64_t v80 = (__int16 *)(v42 + SBYTE1(v48) * (uint64_t)v7);
        if (v14 < (unint64_t)v80) {
          uint64_t v80 = (__int16 *)v14;
        }
        if ((unint64_t)v80 < *(void *)(result + 40)) {
          uint64_t v80 = *(__int16 **)(result + 40);
        }
        __int16 v79 = *v80;
      }
      uint64_t v81 = (char *)&interpolate_cmyk64 + 16 * v50;
      char v82 = v50 + 1;
      unint64_t v47 = v47 - ((*(void *)v81 & v47) >> v82) + ((*(void *)v81 & v78) >> v82);
      int v76 = v45
          - ((unsigned __int16)(*((_WORD *)v81 + 4) & v45) >> v82)
          + ((unsigned __int16)(*((_WORD *)v81 + 4) & v79) >> v82);
      goto LABEL_99;
    case 2:
      int64_t v83 = (unint64_t)HIWORD(v48) << 56;
      v84 = (unint64_t *)(v39 + (v83 >> 53));
      if (v15 < (unint64_t)v84) {
        v84 = (unint64_t *)v15;
      }
      if (v84 < v40) {
        v84 = v40;
      }
      unint64_t v85 = *v84;
      __int16 v86 = -1;
      if (v5)
      {
        float v87 = (__int16 *)(v42 + (v83 >> 55));
        if (v14 < (unint64_t)v87) {
          float v87 = (__int16 *)v14;
        }
        if ((unint64_t)v87 < *(void *)(result + 40)) {
          float v87 = *(__int16 **)(result + 40);
        }
        __int16 v86 = *v87;
      }
      unsigned int v88 = (v48 >> 28) & 3;
      int v89 = (char *)&interpolate_cmyk64 + 16 * v88;
      LOBYTE(v88) = v88 + 1;
      unint64_t v47 = v47 - ((*(void *)v89 & v47) >> v88) + ((*(void *)v89 & v85) >> v88);
      int v76 = v45
          - ((unsigned __int16)(*((_WORD *)v89 + 4) & v45) >> v88)
          + ((unsigned __int16)(*((_WORD *)v89 + 4) & v86) >> v88);
LABEL_99:
      int v45 = (unsigned __int16)v76;
      break;
    case 3:
      int64_t v51 = (unint64_t)HIWORD(v48) << 56;
      uint64_t v52 = (unint64_t *)(v39 + (v51 >> 53));
      if (v15 < (unint64_t)v52) {
        uint64_t v52 = (unint64_t *)v15;
      }
      if (v52 < v40) {
        uint64_t v52 = v40;
      }
      unint64_t v53 = *v52;
      unint64_t v54 = v39 + SBYTE1(v48) * (uint64_t)v6;
      if (v15 >= v54) {
        int64_t v55 = (unint64_t *)(v39 + SBYTE1(v48) * (uint64_t)v6);
      }
      else {
        int64_t v55 = (unint64_t *)v15;
      }
      if (v55 < v40) {
        int64_t v55 = v40;
      }
      unint64_t v102 = *v55;
      int64_t v56 = (unint64_t *)(v54 + (v51 >> 53));
      if (v15 < (unint64_t)v56) {
        int64_t v56 = (unint64_t *)v15;
      }
      if (v56 < v40) {
        int64_t v56 = v40;
      }
      unint64_t v101 = *v56;
      int v57 = 0xFFFF;
      int v58 = 0xFFFF;
      int v59 = 0xFFFF;
      if (v5)
      {
        int64_t v60 = (unsigned __int16 *)(v42 + (v51 >> 55));
        unint64_t v61 = *(void *)(result + 40);
        if (v14 < (unint64_t)v60) {
          int64_t v60 = (unsigned __int16 *)v14;
        }
        if ((unint64_t)v60 < v61) {
          int64_t v60 = *(unsigned __int16 **)(result + 40);
        }
        int v57 = *v60;
        unint64_t v62 = v42 + SBYTE1(v48) * (uint64_t)v7;
        if (v14 >= v62) {
          int64_t v63 = (unsigned __int16 *)(v42 + SBYTE1(v48) * (uint64_t)v7);
        }
        else {
          int64_t v63 = (unsigned __int16 *)v14;
        }
        if ((unint64_t)v63 < v61) {
          int64_t v63 = *(unsigned __int16 **)(result + 40);
        }
        int v58 = *v63;
        uint64_t v64 = (unsigned __int16 *)(v62 + (v51 >> 55));
        if (v14 < (unint64_t)v64) {
          uint64_t v64 = (unsigned __int16 *)v14;
        }
        if ((unint64_t)v64 < v61) {
          uint64_t v64 = *(unsigned __int16 **)(result + 40);
        }
        int v59 = *v64;
      }
      unint64_t v65 = (char *)&interpolate_cmyk64 + 16 * v50;
      uint64_t v66 = *(void *)v65;
      char v67 = v50 + 1;
      unint64_t v68 = v47 - ((*(void *)v65 & v47) >> v67);
      LODWORD(v65) = *((unsigned __int16 *)v65 + 4);
      unint64_t v69 = v53 - ((v66 & v53) >> v67);
      unsigned int v70 = v57 - ((v65 & v57) >> v67);
      unint64_t v71 = v68 + ((v66 & v102) >> v67);
      unsigned int v72 = v45 - ((v65 & v45) >> v67) + ((v65 & v58) >> v67);
      unint64_t v73 = v69 + ((v66 & v101) >> v67);
      unsigned int v74 = v70 + ((v65 & v59) >> v67);
      LODWORD(v65) = (v48 >> 28) & 3;
      uint64_t v75 = (char *)&interpolate_cmyk64 + 16 * v65;
      LOBYTE(v65) = (_BYTE)v65 + 1;
      unint64_t v47 = v71 - ((v71 & *(void *)v75) >> (char)v65) + ((v73 & *(void *)v75) >> (char)v65);
      int v76 = v72
          - ((unsigned __int16)(v72 & *((_WORD *)v75 + 4)) >> (char)v65)
          + ((unsigned __int16)(v74 & *((_WORD *)v75 + 4)) >> (char)v65);
      goto LABEL_99;
  }
  uint64_t v46 = v105;
LABEL_101:
  uint64_t v90 = 0;
  a2 += v10;
  uint64_t v91 = v46 - a2;
  unsigned __int16 v92 = (int *)(v11 + 12);
  a3 += v9;
  uint64_t v93 = v107 - a3;
  while (1)
  {
    int v94 = v45 - (HIWORD(v47) + (unsigned __int16)v47);
    int v95 = v45 - (HIWORD(v47) + WORD1(v47));
    int v96 = v45 - (HIWORD(v47) + WORD2(v47));
    *(v92 - 1) = v94 & ~(v94 >> 31) | ((v95 & ~(v95 >> 31)) << 16);
    *unsigned __int16 v92 = v96 & ~(v96 >> 31) | (v45 << 16);
    *(unsigned char *)(v108 + 1 + v90) = v25 >> 22;
    if (a4 - 1 == v90) {
      return result;
    }
    if ((v93 | v91 | (a3 - v106) | (a2 - v104)) < 0)
    {
      uint64_t v11 = (uint64_t)(v92 - 1);
      v108 += v90 + 1;
      a4 += ~v90;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    unint64_t v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 8 * (a2 >> 32);
    unsigned int v40 = *(unint64_t **)(result + 32);
    if (v15 >= v39) {
      unint64_t v97 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 8 * (a2 >> 32);
    }
    else {
      unint64_t v97 = v15;
    }
    if (v97 >= (unint64_t)v40) {
      __int16 v98 = (unint64_t *)v97;
    }
    else {
      __int16 v98 = *(unint64_t **)(result + 32);
    }
    if (v5)
    {
      unint64_t v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + 2 * (a2 >> 32);
      __int16 v99 = *(unsigned __int16 **)(result + 40);
      if (v14 >= v42) {
        unint64_t v100 = v5 + SHIDWORD(a3) * (uint64_t)v7 + 2 * (a2 >> 32);
      }
      else {
        unint64_t v100 = v14;
      }
      if (v100 >= (unint64_t)v99) {
        __int16 v99 = (unsigned __int16 *)v100;
      }
      int v45 = *v99;
    }
    else
    {
      int v45 = 0xFFFF;
    }
    unint64_t v47 = *v98;
    if (v8)
    {
      unsigned int v48 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v48 & 0xF) != 0)
      {
        uint64_t v11 = (uint64_t)(v92 - 1);
        v108 += v90 + 1;
        a4 += ~v90;
        unsigned int v25 = -1;
        goto LABEL_45;
      }
    }
    v91 -= v10;
    v92 += 2;
    ++v90;
    a3 += v9;
    v93 -= v9;
    a2 += v10;
    unsigned int v25 = -1;
  }
}

uint64_t rgba64_sample_CMYK64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v100 = *(void *)(result + 80);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v102 = *(void *)(result + 88);
  uint64_t v103 = *(void *)(result + 144) - 1;
  int v12 = *(_DWORD *)(result + 260) - 1;
  uint64_t v13 = *(unsigned int *)(result + 256);
  int v98 = *(_DWORD *)(result + 188);
  unint64_t v14 = v5 + (v12 * v7) + 2 * (v13 - 1);
  unint64_t v15 = v4 + (v12 * v6) + 8 * v13 - 16;
  uint64_t v101 = *(void *)(result + 72);
  uint64_t v99 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if (a3 >= v101)
    {
      if (a3 <= v102)
      {
        uint64_t v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        uint64_t v26 = a3;
        uint64_t v27 = v99;
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v102;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1) {
          goto LABEL_39;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        uint64_t v27 = v99;
        unsigned int v25 = v98 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v101 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1) {
        goto LABEL_39;
      }
      if (v18 >= v16) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      uint64_t v27 = v99;
      unsigned int v25 = v98 | v19;
      uint64_t v26 = v17 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v27) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v27 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v98;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v10;
    a3 += v9;
    v11 += 8;
    *(unsigned char *)++uint64_t v103 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v100)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_26;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v100;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_39;
  }
  if (v35 < v33) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v98;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_26:
  if (v25 < 0x400000) {
    goto LABEL_39;
  }
  uint64_t v36 = v26 >> 32;
  uint64_t v37 = v31 >> 32;
  uint64_t v38 = v4 + SHIDWORD(v26) * (uint64_t)v6;
  unint64_t v39 = v38 + 8 * v37;
  unsigned int v40 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v39) {
    int v41 = (unsigned __int16 *)(v38 + 8 * v37);
  }
  else {
    int v41 = (unsigned __int16 *)v15;
  }
  if (v41 < v40) {
    int v41 = *(unsigned __int16 **)(result + 32);
  }
  if (v5)
  {
    unint64_t v42 = v5 + (int)v36 * (uint64_t)v7 + 2 * v37;
    int v43 = *(unsigned __int16 **)(result + 40);
    if (v14 >= v42) {
      float32x2_t v44 = (unsigned __int16 *)v42;
    }
    else {
      float32x2_t v44 = (unsigned __int16 *)v14;
    }
    if (v44 >= v43) {
      int v43 = v44;
    }
    unsigned int v45 = bswap32(*v43) >> 16;
  }
  else
  {
    unint64_t v42 = 0;
    unsigned int v45 = 0xFFFF;
  }
  unint64_t v46 = ((unint64_t)(bswap32(v41[2]) >> 16) << 32) | ((unint64_t)(bswap32(v41[3]) >> 16) << 48) | bswap32(v41[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v41) >> 16);
  if (!v8) {
    goto LABEL_100;
  }
  unsigned int v47 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_45:
  int v48 = v47 & 0xF;
  unsigned int v49 = HIBYTE(v47) & 3;
  switch(v48)
  {
    case 1:
      unsigned int v70 = (unsigned __int16 *)(v39 + SBYTE1(v47) * (uint64_t)v6);
      if (v15 < (unint64_t)v70) {
        unsigned int v70 = (unsigned __int16 *)v15;
      }
      if (v70 < v40) {
        unsigned int v70 = v40;
      }
      unint64_t v71 = ((unint64_t)(bswap32(v70[2]) >> 16) << 32) | ((unint64_t)(bswap32(v70[3]) >> 16) << 48) | bswap32(v70[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v70) >> 16);
      LOWORD(v72) = -1;
      if (v5)
      {
        unint64_t v73 = (unsigned __int16 *)(v42 + SBYTE1(v47) * (uint64_t)v7);
        if (v14 < (unint64_t)v73) {
          unint64_t v73 = (unsigned __int16 *)v14;
        }
        if ((unint64_t)v73 < *(void *)(result + 40)) {
          unint64_t v73 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v72 = bswap32(*v73) >> 16;
      }
      unsigned int v74 = (char *)&interpolate_cmyk64 + 16 * v49;
      char v75 = v49 + 1;
      unint64_t v46 = v46 - ((*(void *)v74 & v46) >> v75) + ((*(void *)v74 & v71) >> v75);
      int v69 = v45
          - ((unsigned __int16)(*((_WORD *)v74 + 4) & v45) >> v75)
          + ((unsigned __int16)(*((_WORD *)v74 + 4) & v72) >> v75);
      goto LABEL_99;
    case 2:
      int64_t v76 = (unint64_t)HIWORD(v47) << 56;
      int v77 = (unsigned __int16 *)(v39 + (v76 >> 53));
      if (v15 < (unint64_t)v77) {
        int v77 = (unsigned __int16 *)v15;
      }
      if (v77 < v40) {
        int v77 = v40;
      }
      unint64_t v78 = ((unint64_t)(bswap32(v77[2]) >> 16) << 32) | ((unint64_t)(bswap32(v77[3]) >> 16) << 48) | bswap32(v77[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v77) >> 16);
      LOWORD(v79) = -1;
      if (v5)
      {
        uint64_t v80 = (unsigned __int16 *)(v42 + (v76 >> 55));
        if (v14 < (unint64_t)v80) {
          uint64_t v80 = (unsigned __int16 *)v14;
        }
        if ((unint64_t)v80 < *(void *)(result + 40)) {
          uint64_t v80 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v79 = bswap32(*v80) >> 16;
      }
      unsigned int v81 = (v47 >> 28) & 3;
      char v82 = (char *)&interpolate_cmyk64 + 16 * v81;
      LOBYTE(v81) = v81 + 1;
      unint64_t v46 = v46 - ((*(void *)v82 & v46) >> v81) + ((*(void *)v82 & v78) >> v81);
      int v69 = v45 - ((*((_WORD *)v82 + 4) & v45) >> v81) + ((*((_WORD *)v82 + 4) & v79) >> v81);
LABEL_99:
      unsigned int v45 = (unsigned __int16)v69;
      break;
    case 3:
      char v96 = HIBYTE(v47) & 3;
      int64_t v50 = (unint64_t)HIWORD(v47) << 56;
      int64_t v51 = (unsigned __int16 *)(v39 + (v50 >> 53));
      if (v15 < (unint64_t)v51) {
        int64_t v51 = (unsigned __int16 *)v15;
      }
      if (v51 < v40) {
        int64_t v51 = v40;
      }
      unint64_t v97 = ((unint64_t)(bswap32(v51[2]) >> 16) << 32) | ((unint64_t)(bswap32(v51[3]) >> 16) << 48) | bswap32(v51[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v51) >> 16);
      unint64_t v52 = v39 + SBYTE1(v47) * (uint64_t)v6;
      if (v15 >= v52) {
        unint64_t v53 = (unsigned __int16 *)(v39 + SBYTE1(v47) * (uint64_t)v6);
      }
      else {
        unint64_t v53 = (unsigned __int16 *)v15;
      }
      if (v53 < v40) {
        unint64_t v53 = v40;
      }
      unint64_t v95 = ((unint64_t)(bswap32(v53[2]) >> 16) << 32) | ((unint64_t)(bswap32(v53[3]) >> 16) << 48) | bswap32(v53[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v53) >> 16);
      unint64_t v54 = (unsigned __int16 *)(v52 + (v50 >> 53));
      if (v15 < (unint64_t)v54) {
        unint64_t v54 = (unsigned __int16 *)v15;
      }
      if (v54 < v40) {
        unint64_t v54 = v40;
      }
      unint64_t v94 = ((unint64_t)(bswap32(v54[2]) >> 16) << 32) | ((unint64_t)(bswap32(v54[3]) >> 16) << 48) | bswap32(v54[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v54) >> 16);
      unsigned int v55 = 0xFFFF;
      unsigned int v56 = 0xFFFF;
      unsigned int v57 = 0xFFFF;
      if (v5)
      {
        int v58 = (unsigned __int16 *)(v42 + (v50 >> 55));
        unint64_t v59 = *(void *)(result + 40);
        if (v14 < (unint64_t)v58) {
          int v58 = (unsigned __int16 *)v14;
        }
        if ((unint64_t)v58 < v59) {
          int v58 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v55 = bswap32(*v58) >> 16;
        unint64_t v60 = v42 + SBYTE1(v47) * (uint64_t)v7;
        if (v14 >= v60) {
          unint64_t v61 = (unsigned __int16 *)(v42 + SBYTE1(v47) * (uint64_t)v7);
        }
        else {
          unint64_t v61 = (unsigned __int16 *)v14;
        }
        if ((unint64_t)v61 < v59) {
          unint64_t v61 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v56 = bswap32(*v61) >> 16;
        unint64_t v62 = (unsigned __int16 *)(v60 + (v50 >> 55));
        if (v14 < (unint64_t)v62) {
          unint64_t v62 = (unsigned __int16 *)v14;
        }
        if ((unint64_t)v62 < v59) {
          unint64_t v62 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v57 = bswap32(*v62) >> 16;
      }
      int64_t v63 = (char *)&interpolate_cmyk64 + 16 * v49;
      uint64_t v64 = *(void *)v63;
      unint64_t v65 = v46 - ((*(void *)v63 & v46) >> (v49 + 1));
      LODWORD(v63) = *((unsigned __int16 *)v63 + 4);
      unsigned int v66 = v45 - ((v63 & v45) >> (v49 + 1)) + ((v63 & v56) >> (v49 + 1));
      unsigned int v67 = (v47 >> 28) & 3;
      unint64_t v68 = (char *)&interpolate_cmyk64 + 16 * v67;
      LOBYTE(v67) = v67 + 1;
      unint64_t v46 = v65
          + ((v64 & v95) >> (v96 + 1))
          - (((v65 + ((v64 & v95) >> (v96 + 1))) & *(void *)v68) >> v67)
          + (((v97 - ((v64 & v97) >> (v96 + 1)) + ((v64 & v94) >> (v96 + 1))) & *(void *)v68) >> v67);
      int v69 = v66
          - ((v66 & *((_WORD *)v68 + 4)) >> v67)
          + (((v55 - ((v63 & v55) >> (v96 + 1)) + ((v63 & v57) >> (v96 + 1))) & *((unsigned __int16 *)v68 + 4)) >> v67);
      goto LABEL_99;
  }
LABEL_100:
  uint64_t v83 = 0;
  a2 += v10;
  uint64_t v84 = v100 - a2;
  unint64_t v85 = (unsigned int *)(v11 + 12);
  a3 += v9;
  uint64_t v86 = v102 - a3;
  while (1)
  {
    int v87 = v45 - (HIWORD(v46) + (unsigned __int16)v46);
    int v88 = v45 - (HIWORD(v46) + WORD1(v46));
    int v89 = v45 - (HIWORD(v46) + WORD2(v46));
    *(v85 - 1) = v87 & ~(v87 >> 31) | ((v88 & ~(v88 >> 31)) << 16);
    *unint64_t v85 = v89 & ~(v89 >> 31) | (v45 << 16);
    *(unsigned char *)(v103 + 1 + v83) = v25 >> 22;
    if (a4 - 1 == v83) {
      return result;
    }
    if ((v86 | v84 | (a3 - v101) | (a2 - v99)) < 0)
    {
      v103 += v83 + 1;
      uint64_t v11 = (uint64_t)(v85 - 1);
      a4 += ~v83;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    unint64_t v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 8 * (a2 >> 32);
    unsigned int v40 = *(unsigned __int16 **)(result + 32);
    if (v15 >= v39) {
      unint64_t v90 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 8 * (a2 >> 32);
    }
    else {
      unint64_t v90 = v15;
    }
    if (v90 >= (unint64_t)v40) {
      uint64_t v91 = (unsigned __int16 *)v90;
    }
    else {
      uint64_t v91 = *(unsigned __int16 **)(result + 32);
    }
    if (v5)
    {
      unint64_t v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + 2 * (a2 >> 32);
      unsigned __int16 v92 = *(unsigned __int16 **)(result + 40);
      if (v14 >= v42) {
        unint64_t v93 = v5 + SHIDWORD(a3) * (uint64_t)v7 + 2 * (a2 >> 32);
      }
      else {
        unint64_t v93 = v14;
      }
      if (v93 >= (unint64_t)v92) {
        unsigned __int16 v92 = (unsigned __int16 *)v93;
      }
      unsigned int v45 = bswap32(*v92) >> 16;
    }
    else
    {
      unsigned int v45 = 0xFFFF;
    }
    unint64_t v46 = ((unint64_t)(bswap32(v91[2]) >> 16) << 32) | ((unint64_t)(bswap32(v91[3]) >> 16) << 48) | bswap32(v91[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v91) >> 16);
    if (v8)
    {
      unsigned int v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        v103 += v83 + 1;
        uint64_t v11 = (uint64_t)(v85 - 1);
        a4 += ~v83;
        unsigned int v25 = -1;
        goto LABEL_45;
      }
    }
    ++v83;
    v84 -= v10;
    v85 += 2;
    a3 += v9;
    v86 -= v9;
    a2 += v10;
    unsigned int v25 = -1;
  }
}

uint64_t rgba64_sample_rgba64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 112);
  uint64_t v6 = *(void *)(result + 48);
  uint64_t v7 = *(void *)(result + 56);
  if (v6)
  {
    uint64_t v109 = *(void *)(result + 112);
    if (v5 > v6) {
      uint64_t v109 = v5 % v6;
    }
  }
  else
  {
    uint64_t v109 = 0;
  }
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v9 = *(void *)(result + 32);
  uint64_t v10 = *(void *)(result + 120);
  if (v7)
  {
    uint64_t v11 = v10 % v7;
    if (v10 <= v7) {
      uint64_t v11 = *(void *)(result + 120);
    }
    uint64_t v108 = v11;
  }
  else
  {
    uint64_t v108 = 0;
  }
  uint64_t v104 = *(void *)(result + 80);
  uint64_t v105 = *(void *)(result + 64);
  uint64_t v106 = *(void *)(result + 88);
  uint64_t v107 = *(void *)(result + 72);
  uint64_t v12 = *(void *)(result + 152) - 8;
  uint64_t v13 = *(void *)(result + 144) - 1;
  if (*(void *)(result + 40)) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = 0xFFFF000000000000;
  }
  int v103 = *(_DWORD *)(result + 188);
  unint64_t v15 = v9 + ((*(_DWORD *)(result + 260) - 1) * v4) + 8 * *(unsigned int *)(result + 256) - 8;
  uint64_t v16 = -*(void *)(result + 64);
  uint64_t v17 = -*(void *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 < v107)
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = v107 - *(void *)(result + 224);
        uint64_t v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_55;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v28 = v103 | v21;
        uint64_t v29 = v19 + 0x1000000;
        uint64_t v26 = a3 - (v19 + 0x1000000);
        uint64_t v27 = 512;
        goto LABEL_25;
      }
      if (a3 <= v106)
      {
        uint64_t v26 = 0;
        uint64_t v27 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v28 = 0x3FFFFFFF;
        uint64_t v29 = a3;
LABEL_25:
        uint64_t v30 = v105;
        goto LABEL_28;
      }
      uint64_t v22 = *(void *)(result + 216);
      uint64_t v23 = *(void *)(result + 224) + v106;
      uint64_t v24 = v23 - a3 + (v22 >> 1);
      if (v24 < 1) {
        goto LABEL_55;
      }
      if (v24 >= v22) {
        LODWORD(v25) = 0x3FFFFFFF;
      }
      else {
        unint64_t v25 = (unint64_t)(*(void *)(result + 232) * v24) >> 32;
      }
      uint64_t v30 = v105;
      unsigned int v28 = v103 | v25;
      uint64_t v29 = v23 - 0x1000000;
      uint64_t v26 = a3 - (v23 - 0x1000000);
      uint64_t v27 = 448;
LABEL_28:
      if (a2 >= v30) {
        break;
      }
      uint64_t v31 = *(void *)(result + 192);
      uint64_t v32 = v30 - *(void *)(result + 200);
      uint64_t v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31) {
          unsigned int v28 = ((v28 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v103;
        }
        uint64_t v34 = v32 + 0x1000000;
        uint64_t v35 = a2 - (v32 + 0x1000000);
        uint64_t v36 = 32;
        goto LABEL_39;
      }
LABEL_55:
      --a4;
      a2 += v5;
      a3 += v10;
      v12 += 8;
      *(unsigned char *)++uint64_t v13 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v104)
    {
      uint64_t v35 = 0;
      uint64_t v36 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v34 = a2;
      goto LABEL_39;
    }
    uint64_t v37 = *(void *)(result + 192);
    uint64_t v38 = *(void *)(result + 200) + v104;
    uint64_t v39 = v38 - a2 + (v37 >> 1);
    if (v39 < 1) {
      goto LABEL_55;
    }
    if (v39 < v37) {
      unsigned int v28 = ((v28 >> 15) * (((unint64_t)(*(void *)(result + 208) * v39) >> 32) >> 15)) | v103;
    }
    uint64_t v34 = v38 - 0x1000000;
    uint64_t v35 = a2 - (v38 - 0x1000000);
    uint64_t v36 = 28;
LABEL_39:
    if (v28 < 0x400000) {
      goto LABEL_55;
    }
    if (v6)
    {
      uint64_t v40 = (v7 & ((v29 % v7) >> 63)) + v29 % v7;
      uint64_t v41 = (v6 & ((v34 % v6) >> 63)) + v34 % v6;
      if (v40 >= v7) {
        uint64_t v42 = v7;
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t v29 = v40 - v42;
      if (v41 >= v6) {
        uint64_t v43 = v6;
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t v34 = v41 - v43;
      v26 += v29;
      v35 += v34;
    }
    uint64_t v44 = v9 + SHIDWORD(v29) * (uint64_t)v4;
    uint64_t v45 = v34 >> 32;
    unint64_t v46 = v44 + 8 * v45;
    unsigned int v47 = *(unint64_t **)(result + 32);
    if (v15 >= v46) {
      int v48 = (unint64_t *)(v44 + 8 * v45);
    }
    else {
      int v48 = (unint64_t *)v15;
    }
    if (v48 < v47) {
      int v48 = *(unint64_t **)(result + 32);
    }
    unint64_t v49 = *v48;
    if (!v8) {
      goto LABEL_104;
    }
    unsigned int v50 = *(_DWORD *)(v8 + (v36 | v27));
LABEL_58:
    int v51 = v50 & 0xF;
    uint64_t v52 = v50 >> 8;
    int v53 = HIBYTE(v50) & 3;
    switch(v51)
    {
      case 1:
        LODWORD(v77) = SBYTE1(v50);
        if (v6)
        {
          uint64_t v78 = v52 << 56;
          uint64_t v79 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          uint64_t v80 = v7 & (v79 >> 63);
          if (v80 + v79 >= v7) {
            uint64_t v81 = v7;
          }
          else {
            uint64_t v81 = 0;
          }
          uint64_t v77 = (v80 + (v78 >> 24) - v81) >> 32;
        }
        char v82 = (unint64_t *)(v46 + (int)v77 * (uint64_t)v4);
        if (v15 < (unint64_t)v82) {
          char v82 = (unint64_t *)v15;
        }
        if (v82 < v47) {
          char v82 = v47;
        }
        unint64_t v83 = interpolate_16161616_21355[v53];
        char v84 = v53 + 1;
        unint64_t v75 = v49 - ((v83 & v49) >> v84);
        unint64_t v76 = (v83 & *v82) >> v84;
        goto LABEL_93;
      case 2:
        uint64_t v85 = SBYTE2(v50);
        if (v6)
        {
          uint64_t v86 = v35 + ((uint64_t)SBYTE2(v50) << 32);
          uint64_t v87 = v6 & (v86 >> 63);
          if (v87 + v86 >= v6) {
            uint64_t v88 = v6;
          }
          else {
            uint64_t v88 = 0;
          }
          uint64_t v85 = (v87 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v88) >> 32;
        }
        int v89 = (unint64_t *)(v46 + 8 * v85);
        if (v15 < (unint64_t)v89) {
          int v89 = (unint64_t *)v15;
        }
        if (v89 < v47) {
          int v89 = v47;
        }
        unint64_t v49 = v49
            - ((interpolate_16161616_21355[(v50 >> 28) & 3] & v49) >> (((v50 >> 28) & 3) + 1))
            + ((interpolate_16161616_21355[(v50 >> 28) & 3] & *v89) >> (((v50 >> 28) & 3) + 1));
        break;
      case 3:
        int v102 = HIBYTE(v50) & 3;
        LODWORD(v54) = SBYTE1(v50);
        uint64_t v55 = SBYTE2(v50);
        if (v6)
        {
          uint64_t v101 = v52 << 56;
          int64_t v56 = (unint64_t)HIWORD(v50) << 56;
          uint64_t v57 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          uint64_t v58 = v35 + (v56 >> 24);
          uint64_t v59 = v7 & (v57 >> 63);
          uint64_t v60 = v6 & (v58 >> 63);
          uint64_t v61 = v60 + v58;
          if (v59 + v57 >= v7) {
            uint64_t v62 = v7;
          }
          else {
            uint64_t v62 = 0;
          }
          if (v61 >= v6) {
            uint64_t v63 = v6;
          }
          else {
            uint64_t v63 = 0;
          }
          uint64_t v54 = (v59 + (v101 >> 24) - v62) >> 32;
          uint64_t v55 = (v60 + (v56 >> 24) - v63) >> 32;
        }
        uint64_t v64 = (unint64_t *)(v46 + 8 * v55);
        if (v15 < (unint64_t)v64) {
          uint64_t v64 = (unint64_t *)v15;
        }
        if (v64 < v47) {
          uint64_t v64 = v47;
        }
        unint64_t v65 = *v64;
        unint64_t v66 = v46 + (int)v54 * (uint64_t)v4;
        if (v15 >= v66) {
          unsigned int v67 = (unint64_t *)(v46 + (int)v54 * (uint64_t)v4);
        }
        else {
          unsigned int v67 = (unint64_t *)v15;
        }
        if (v67 < v47) {
          unsigned int v67 = v47;
        }
        unint64_t v68 = *v67;
        int v69 = (unint64_t *)(v66 + 8 * v55);
        if (v15 < (unint64_t)v69) {
          int v69 = (unint64_t *)v15;
        }
        if (v69 < v47) {
          int v69 = v47;
        }
        unint64_t v70 = interpolate_16161616_21355[v102];
        unint64_t v71 = v49 - ((v70 & v49) >> (v102 + 1)) + ((v70 & v68) >> (v102 + 1));
        unint64_t v72 = v65 - ((v70 & v65) >> (v102 + 1)) + ((v70 & *v69) >> (v102 + 1));
        int v73 = (v50 >> 28) & 3;
        unint64_t v74 = interpolate_16161616_21355[v73];
        LOBYTE(v73) = v73 + 1;
        unint64_t v75 = v71 - ((v71 & v74) >> v73);
        unint64_t v76 = (v72 & v74) >> v73;
LABEL_93:
        unint64_t v49 = v75 + v76;
        break;
    }
LABEL_104:
    *(void *)(v12 + 8) = v49 | v14;
    *(unsigned char *)(v13 + 1) = v28 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v90 = 0;
    a2 += v5;
    uint64_t v91 = v104 - a2;
    a3 += v10;
    uint64_t v92 = v106 - a3;
    uint64_t v93 = -8;
    while (((v92 | v91 | (v17 + a3) | (v16 + a2)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v94 = (v7 & ((v26 + v108) >> 63)) + v26 + v108;
        uint64_t v95 = (v6 & ((v35 + v109) >> 63)) + v35 + v109;
        if (v94 >= v7) {
          uint64_t v96 = v7;
        }
        else {
          uint64_t v96 = 0;
        }
        uint64_t v97 = v94 - v96;
        if (v95 >= v6) {
          uint64_t v98 = v6;
        }
        else {
          uint64_t v98 = 0;
        }
        uint64_t v99 = v95 - v98;
        uint64_t v35 = v99;
        uint64_t v26 = v97;
      }
      else
      {
        uint64_t v99 = a2;
        HIDWORD(v97) = HIDWORD(a3);
      }
      unint64_t v46 = v9 + SHIDWORD(v97) * (uint64_t)v4 + 8 * (v99 >> 32);
      unsigned int v47 = *(unint64_t **)(result + 32);
      if (v15 >= v46) {
        uint64_t v100 = (unint64_t *)v46;
      }
      else {
        uint64_t v100 = (unint64_t *)v15;
      }
      if (v100 < v47) {
        uint64_t v100 = *(unint64_t **)(result + 32);
      }
      unint64_t v49 = *v100;
      if (v8)
      {
        unsigned int v50 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v50 & 0xF) != 0)
        {
          v13 += v90 + 1;
          v12 -= v93;
          a4 += ~v90;
          unsigned int v28 = -1;
          goto LABEL_58;
        }
      }
      *(void *)(v12 + 8 * v90 + 16) = v49 | v14;
      *(unsigned char *)(v13 + v90++ + 2) = -1;
      v93 -= 8;
      a2 += v5;
      v91 -= v5;
      a3 += v10;
      v92 -= v10;
      if (a4 - 1 == v90) {
        return result;
      }
    }
    v13 += v90 + 1;
    v12 -= v93;
    a4 += ~v90;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_RGBA64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 112);
  uint64_t v6 = *(void *)(result + 48);
  uint64_t v7 = *(void *)(result + 56);
  if (v6)
  {
    uint64_t v101 = *(void *)(result + 112);
    if (v5 > v6) {
      uint64_t v101 = v5 % v6;
    }
  }
  else
  {
    uint64_t v101 = 0;
  }
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v9 = *(void *)(result + 32);
  uint64_t v10 = *(void *)(result + 120);
  if (v7)
  {
    uint64_t v11 = v10 % v7;
    if (v10 <= v7) {
      uint64_t v11 = *(void *)(result + 120);
    }
    uint64_t v100 = v11;
  }
  else
  {
    uint64_t v100 = 0;
  }
  uint64_t v99 = *(void *)(result + 80);
  uint64_t v96 = *(void *)(result + 64);
  uint64_t v97 = *(void *)(result + 88);
  uint64_t v12 = *(void *)(result + 152) - 8;
  uint64_t v13 = *(void *)(result + 144) - 1;
  if (*(void *)(result + 40)) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = 0xFFFF000000000000;
  }
  int v95 = *(_DWORD *)(result + 188);
  unint64_t v15 = v9 + ((*(_DWORD *)(result + 260) - 1) * v4) + 8 * *(unsigned int *)(result + 256) - 8;
  uint64_t v102 = -*(void *)(result + 64);
  uint64_t v98 = *(void *)(result + 72);
  while (1)
  {
    if (a3 >= v98)
    {
      if (a3 <= v97)
      {
        uint64_t v25 = 0;
        uint64_t v26 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v27 = 0x3FFFFFFF;
        uint64_t v28 = a3;
        int v19 = a4;
        uint64_t v29 = v96;
        uint64_t v30 = v99;
      }
      else
      {
        uint64_t v21 = *(void *)(result + 216);
        uint64_t v22 = *(void *)(result + 224) + v97;
        uint64_t v23 = v22 - a3 + (v21 >> 1);
        int v19 = a4;
        if (v23 < 1) {
          goto LABEL_54;
        }
        if (v23 >= v21) {
          LODWORD(v24) = 0x3FFFFFFF;
        }
        else {
          unint64_t v24 = (unint64_t)(*(void *)(result + 232) * v23) >> 32;
        }
        uint64_t v29 = v96;
        uint64_t v30 = v99;
        unsigned int v27 = v95 | v24;
        uint64_t v28 = v22 - 0x1000000;
        uint64_t v25 = a3 - v28;
        uint64_t v26 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v98 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      int v19 = a4;
      if (v18 < 1) {
        goto LABEL_54;
      }
      if (v18 >= v16) {
        LODWORD(v20) = 0x3FFFFFFF;
      }
      else {
        unint64_t v20 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      uint64_t v29 = v96;
      uint64_t v30 = v99;
      unsigned int v27 = v95 | v20;
      uint64_t v28 = v17 + 0x1000000;
      uint64_t v25 = a3 - v28;
      uint64_t v26 = 512;
    }
    if (a2 >= v29) {
      break;
    }
    uint64_t v31 = *(void *)(result + 192);
    uint64_t v32 = v29 - *(void *)(result + 200);
    uint64_t v33 = a2 - v32 + (v31 >> 1);
    if (v33 >= 1)
    {
      if (v33 < v31) {
        unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v95;
      }
      uint64_t v34 = v32 + 0x1000000;
      uint64_t v35 = a2 - (v32 + 0x1000000);
      uint64_t v36 = 32;
      goto LABEL_38;
    }
LABEL_54:
    int v51 = v19 - 1;
    a2 += v5;
    a3 += v10;
    v12 += 8;
    *(unsigned char *)++uint64_t v13 = 0;
LABEL_55:
    a4 = v51;
    if (!v51) {
      return result;
    }
  }
  if (a2 <= v30)
  {
    uint64_t v35 = 0;
    uint64_t v36 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v34 = a2;
    goto LABEL_38;
  }
  uint64_t v37 = *(void *)(result + 192);
  uint64_t v38 = *(void *)(result + 200) + v30;
  uint64_t v39 = v38 - a2 + (v37 >> 1);
  if (v39 < 1) {
    goto LABEL_54;
  }
  if (v39 < v37) {
    unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v39) >> 32) >> 15)) | v95;
  }
  uint64_t v34 = v38 - 0x1000000;
  uint64_t v35 = a2 - (v38 - 0x1000000);
  uint64_t v36 = 28;
LABEL_38:
  if (v27 < 0x400000) {
    goto LABEL_54;
  }
  if (v6)
  {
    uint64_t v40 = (v7 & ((v28 % v7) >> 63)) + v28 % v7;
    uint64_t v41 = (v6 & ((v34 % v6) >> 63)) + v34 % v6;
    if (v40 >= v7) {
      uint64_t v42 = v7;
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v28 = v40 - v42;
    if (v41 >= v6) {
      uint64_t v43 = v6;
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v34 = v41 - v43;
    v25 += v28;
    v35 += v34;
  }
  uint64_t v44 = v9 + SHIDWORD(v28) * (uint64_t)v4;
  uint64_t v45 = v34 >> 32;
  unint64_t v46 = v44 + 8 * v45;
  unsigned int v47 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v46) {
    int v48 = (unsigned __int16 *)(v44 + 8 * v45);
  }
  else {
    int v48 = (unsigned __int16 *)v15;
  }
  if (v48 < v47) {
    int v48 = *(unsigned __int16 **)(result + 32);
  }
  unint64_t v49 = ((unint64_t)(bswap32(v48[2]) >> 16) << 32) | ((unint64_t)(bswap32(v48[3]) >> 16) << 48) | bswap32(v48[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v48) >> 16);
  if (v8)
  {
    unsigned int v50 = *(_DWORD *)(v8 + (v36 | v26));
LABEL_58:
    int v52 = v50 & 0xF;
    int v53 = HIBYTE(v50) & 3;
    switch(v52)
    {
      case 1:
        LODWORD(v72) = SBYTE1(v50);
        if (v6)
        {
          uint64_t v73 = v25 + ((uint64_t)SBYTE1(v50) << 32);
          uint64_t v74 = v7 & (v73 >> 63);
          if (v74 + v73 >= v7) {
            uint64_t v75 = v7;
          }
          else {
            uint64_t v75 = 0;
          }
          uint64_t v72 = (v74 + ((uint64_t)SBYTE1(v50) << 32) - v75) >> 32;
        }
        unint64_t v76 = (unsigned __int16 *)(v46 + (int)v72 * (uint64_t)v4);
        if (v15 < (unint64_t)v76) {
          unint64_t v76 = (unsigned __int16 *)v15;
        }
        if (v76 < v47) {
          unint64_t v76 = v47;
        }
        unint64_t v49 = v49
            - ((interpolate_16161616_21355[v53] & v49) >> (v53 + 1))
            + (((((unint64_t)(bswap32(v76[2]) >> 16) << 32) | ((unint64_t)(bswap32(v76[3]) >> 16) << 48) | bswap32(v76[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v76) >> 16)) & interpolate_16161616_21355[v53]) >> (v53 + 1));
        break;
      case 2:
        uint64_t v77 = SBYTE2(v50);
        if (v6)
        {
          uint64_t v78 = v35 + ((uint64_t)SBYTE2(v50) << 32);
          uint64_t v79 = v6 & (v78 >> 63);
          if (v79 + v78 >= v6) {
            uint64_t v80 = v6;
          }
          else {
            uint64_t v80 = 0;
          }
          uint64_t v77 = (v79 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v80) >> 32;
        }
        uint64_t v81 = (unsigned __int16 *)(v46 + 8 * v77);
        if (v15 < (unint64_t)v81) {
          uint64_t v81 = (unsigned __int16 *)v15;
        }
        if (v81 < v47) {
          uint64_t v81 = v47;
        }
        int v82 = (v50 >> 28) & 3;
        unint64_t v49 = v49
            - ((interpolate_16161616_21355[v82] & v49) >> (v82 + 1))
            + (((((unint64_t)(bswap32(v81[2]) >> 16) << 32) | ((unint64_t)(bswap32(v81[3]) >> 16) << 48) | bswap32(v81[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v81) >> 16)) & interpolate_16161616_21355[v82]) >> (v82 + 1));
        break;
      case 3:
        unsigned int v94 = v27;
        LODWORD(v54) = SBYTE1(v50);
        uint64_t v55 = SBYTE2(v50);
        if (v6)
        {
          int64_t v56 = (unint64_t)HIWORD(v50) << 56;
          uint64_t v57 = v25 + ((uint64_t)SBYTE1(v50) << 32);
          uint64_t v58 = v35 + (v56 >> 24);
          uint64_t v59 = v7 & (v57 >> 63);
          uint64_t v60 = v6 & (v58 >> 63);
          uint64_t v61 = v60 + v58;
          if (v59 + v57 >= v7) {
            uint64_t v62 = v7;
          }
          else {
            uint64_t v62 = 0;
          }
          if (v61 >= v6) {
            uint64_t v63 = v6;
          }
          else {
            uint64_t v63 = 0;
          }
          uint64_t v54 = (v59 + ((uint64_t)((unint64_t)(v50 >> 8) << 56) >> 24) - v62) >> 32;
          uint64_t v55 = (v60 + (v56 >> 24) - v63) >> 32;
        }
        uint64_t v64 = (unsigned __int16 *)(v46 + 8 * v55);
        if (v15 < (unint64_t)v64) {
          uint64_t v64 = (unsigned __int16 *)v15;
        }
        if (v64 < v47) {
          uint64_t v64 = v47;
        }
        unint64_t v65 = ((unint64_t)(bswap32(v64[2]) >> 16) << 32) | ((unint64_t)(bswap32(v64[3]) >> 16) << 48) | bswap32(v64[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v64) >> 16);
        unint64_t v66 = (unsigned __int16 *)(v46 + (int)v54 * (uint64_t)v4);
        if (v15 >= (unint64_t)v66) {
          unsigned int v67 = v66;
        }
        else {
          unsigned int v67 = (unsigned __int16 *)v15;
        }
        if (v67 < v47) {
          unsigned int v67 = v47;
        }
        unint64_t v68 = ((unint64_t)(bswap32(v67[2]) >> 16) << 32) | ((unint64_t)(bswap32(v67[3]) >> 16) << 48) | bswap32(v67[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v67) >> 16);
        int v69 = &v66[4 * v55];
        if (v15 < (unint64_t)v69) {
          int v69 = (unsigned __int16 *)v15;
        }
        if (v69 < v47) {
          int v69 = v47;
        }
        uint64_t v70 = interpolate_16161616_21355[v53];
        unint64_t v71 = v49 - ((v70 & v49) >> (v53 + 1)) + ((v68 & v70) >> (v53 + 1));
        unint64_t v49 = v71
            - ((v71 & interpolate_16161616_21355[(v50 >> 28) & 3]) >> (((v50 >> 28) & 3) + 1))
            + (((v65
               - ((v70 & v65) >> (v53 + 1))
               + (((((unint64_t)(bswap32(v69[2]) >> 16) << 32) | ((unint64_t)(bswap32(v69[3]) >> 16) << 48) | bswap32(v69[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v69) >> 16)) & v70) >> (v53 + 1))) & interpolate_16161616_21355[(v50 >> 28) & 3]) >> (((v50 >> 28) & 3) + 1));
        unsigned int v27 = v94;
        break;
    }
  }
  *(void *)(v12 + 8) = v49 | v14;
  *(unsigned char *)(v13 + 1) = v27 >> 22;
  if (v19 != 1)
  {
    uint64_t v83 = 0;
    a2 += v5;
    uint64_t v84 = v99 - a2;
    a3 += v10;
    uint64_t v85 = v97 - a3;
    uint64_t v86 = -8;
    while (((v85 | v84 | (a3 - v98) | (v102 + a2)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v87 = (v7 & ((v25 + v100) >> 63)) + v25 + v100;
        uint64_t v88 = (v6 & ((v35 + v101) >> 63)) + v35 + v101;
        if (v87 >= v7) {
          uint64_t v89 = v7;
        }
        else {
          uint64_t v89 = 0;
        }
        uint64_t v25 = v87 - v89;
        if (v88 >= v6) {
          uint64_t v90 = v6;
        }
        else {
          uint64_t v90 = 0;
        }
        uint64_t v35 = v88 - v90;
        int v91 = HIDWORD(v25);
        uint64_t v92 = v88 - v90;
      }
      else
      {
        int v91 = HIDWORD(a3);
        uint64_t v92 = a2;
      }
      unint64_t v46 = v9 + v91 * (uint64_t)v4 + 8 * (v92 >> 32);
      unsigned int v47 = *(unsigned __int16 **)(result + 32);
      if (v15 >= v46) {
        uint64_t v93 = (unsigned __int16 *)v46;
      }
      else {
        uint64_t v93 = (unsigned __int16 *)v15;
      }
      if (v93 < v47) {
        uint64_t v93 = *(unsigned __int16 **)(result + 32);
      }
      unint64_t v49 = ((unint64_t)(bswap32(v93[2]) >> 16) << 32) | ((unint64_t)(bswap32(v93[3]) >> 16) << 48) | bswap32(v93[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v93) >> 16);
      if (v8)
      {
        unsigned int v50 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v50 & 0xF) != 0)
        {
          v13 += v83 + 1;
          v12 -= v86;
          v19 += ~v83;
          unsigned int v27 = -1;
          goto LABEL_58;
        }
      }
      *(void *)(v12 + 8 * v83 + 16) = v49 | v14;
      *(unsigned char *)(v13 + v83++ + 2) = -1;
      v86 -= 8;
      a2 += v5;
      v84 -= v5;
      a3 += v10;
      v85 -= v10;
      if (v19 - 1 == v83) {
        return result;
      }
    }
    v13 += v83 + 1;
    v12 -= v86;
    int v51 = ~v83 + v19;
    goto LABEL_55;
  }
  return result;
}

uint64_t rgba64_sample_rgb48(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  int v5 = *(_DWORD *)(result + 24);
  uint64_t v6 = *(void *)(result + 176);
  uint64_t v7 = *(void *)(result + 64);
  uint64_t v8 = *(void *)(result + 72);
  uint64_t v9 = *(void *)(result + 88);
  uint64_t v66 = *(void *)(result + 80);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v11 = *(void *)(result + 120);
  uint64_t v12 = *(void *)(result + 152) - 8;
  uint64_t v13 = *(void *)(result + 144) - 1;
  unint64_t v14 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 2 * (3 * *(_DWORD *)(result + 256))
      - 6;
  int v65 = *(_DWORD *)(result + 188);
  do
  {
    while (1)
    {
      if ((uint64_t)a3 >= v8)
      {
        if ((uint64_t)a3 <= v9)
        {
          uint64_t v23 = (a3 >> 22) & 0x3C0;
          unsigned int v24 = 0x3FFFFFFF;
          HIDWORD(v25) = HIDWORD(a3);
        }
        else
        {
          uint64_t v19 = *(void *)(result + 216);
          uint64_t v20 = *(void *)(result + 224) + v9;
          uint64_t v21 = v20 - a3 + (v19 >> 1);
          if (v21 < 1) {
            goto LABEL_34;
          }
          if (v21 >= v19) {
            LODWORD(v22) = 0x3FFFFFFF;
          }
          else {
            unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
          }
          unsigned int v24 = v65 | v22;
          uint64_t v25 = v20 - 0x1000000;
          uint64_t v23 = 448;
        }
      }
      else
      {
        uint64_t v15 = *(void *)(result + 216);
        uint64_t v16 = v8 - *(void *)(result + 224);
        uint64_t v17 = a3 - v16 + (v15 >> 1);
        if (v17 < 1) {
          goto LABEL_34;
        }
        if (v17 >= v15) {
          LODWORD(v18) = 0x3FFFFFFF;
        }
        else {
          unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
        }
        unsigned int v24 = v65 | v18;
        uint64_t v25 = v16 + 0x1000000;
        uint64_t v23 = 512;
      }
      if (a2 >= v7) {
        break;
      }
      uint64_t v26 = *(void *)(result + 192);
      uint64_t v27 = v7 - *(void *)(result + 200);
      uint64_t v28 = a2 - v27 + (v26 >> 1);
      if (v28 >= 1)
      {
        if (v28 < v26) {
          unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v65;
        }
        uint64_t v29 = v27 + 0x1000000;
        uint64_t v30 = 32;
        goto LABEL_26;
      }
LABEL_34:
      --a4;
      a2 += v10;
      a3 += v11;
      v12 += 8;
      *(unsigned char *)++uint64_t v13 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v66)
    {
      uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v29 = a2;
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(result + 192);
    uint64_t v32 = *(void *)(result + 200) + v66;
    uint64_t v33 = v32 - a2 + (v31 >> 1);
    if (v33 < 1) {
      goto LABEL_34;
    }
    if (v33 < v31) {
      unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v65;
    }
    uint64_t v29 = v32 - 0x1000000;
    uint64_t v30 = 28;
LABEL_26:
    if (v24 < 0x400000) {
      goto LABEL_34;
    }
    uint64_t v34 = v29 >> 32;
    uint64_t v35 = v4 + SHIDWORD(v25) * (uint64_t)v5;
    unint64_t v36 = v35 + 6 * (int)v34;
    uint64_t v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36) {
      uint64_t v38 = (unsigned int *)(v35 + 6 * (int)v34);
    }
    else {
      uint64_t v38 = (unsigned int *)v14;
    }
    if (v38 < v37) {
      uint64_t v38 = *(unsigned int **)(result + 32);
    }
    unint64_t v39 = *v38 | ((unint64_t)*((unsigned __int16 *)v38 + 2) << 32) | 0xFFFF000000000000;
    if (!v6) {
      goto LABEL_66;
    }
    unsigned int v40 = *(_DWORD *)(v6 + (v30 | v23));
LABEL_37:
    int v41 = v40 & 0xF;
    int v42 = HIBYTE(v40) & 3;
    switch(v41)
    {
      case 1:
        uint64_t v57 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v5);
        if (v14 < (unint64_t)v57) {
          uint64_t v57 = (unsigned int *)v14;
        }
        if (v57 < v37) {
          uint64_t v57 = v37;
        }
        unint64_t v52 = *v57 | ((unint64_t)*((unsigned __int16 *)v57 + 2) << 32) | 0xFFFF000000000000;
LABEL_64:
        uint64_t v54 = interpolate_16161616_21355[v42];
        char v55 = v42 + 1;
        unint64_t v56 = v39 - ((v54 & v39) >> v55);
LABEL_65:
        unint64_t v39 = v56 + ((v52 & v54) >> v55);
        break;
      case 2:
        uint64_t v58 = (unsigned int *)(v36 + 6 * SBYTE2(v40));
        if (v14 < (unint64_t)v58) {
          uint64_t v58 = (unsigned int *)v14;
        }
        if (v58 < v37) {
          uint64_t v58 = v37;
        }
        unint64_t v52 = *v58 | ((unint64_t)*((unsigned __int16 *)v58 + 2) << 32) | 0xFFFF000000000000;
        int v42 = (v40 >> 28) & 3;
        goto LABEL_64;
      case 3:
        uint64_t v43 = (unsigned int *)(v36 + 6 * SBYTE2(v40));
        if (v14 < (unint64_t)v43) {
          uint64_t v43 = (unsigned int *)v14;
        }
        if (v43 < v37) {
          uint64_t v43 = v37;
        }
        unint64_t v44 = *v43 | ((unint64_t)*((unsigned __int16 *)v43 + 2) << 32) | 0xFFFF000000000000;
        unint64_t v45 = v36 + SBYTE1(v40) * (uint64_t)v5;
        if (v14 >= v45) {
          unint64_t v46 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v5);
        }
        else {
          unint64_t v46 = (unsigned int *)v14;
        }
        if (v46 < v37) {
          unint64_t v46 = v37;
        }
        unint64_t v47 = *v46 | ((unint64_t)*((unsigned __int16 *)v46 + 2) << 32) | 0xFFFF000000000000;
        int v48 = (unsigned int *)(v45 + 6 * SBYTE2(v40));
        if (v14 < (unint64_t)v48) {
          int v48 = (unsigned int *)v14;
        }
        if (v48 < v37) {
          int v48 = v37;
        }
        uint64_t v49 = interpolate_16161616_21355[v42];
        char v50 = v42 + 1;
        unint64_t v51 = v39 - ((v49 & v39) >> v50) + ((v47 & v49) >> v50);
        unint64_t v52 = v44
            - ((v49 & v44) >> v50)
            + (((*v48 | ((unint64_t)*((unsigned __int16 *)v48 + 2) << 32) | 0xFFFF000000000000) & v49) >> v50);
        int v53 = (v40 >> 28) & 3;
        uint64_t v54 = interpolate_16161616_21355[v53];
        char v55 = v53 + 1;
        unint64_t v56 = v51 - ((v51 & v54) >> v55);
        goto LABEL_65;
    }
LABEL_66:
    *(void *)(v12 + 8) = v39;
    *(unsigned char *)(v13 + 1) = v24 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v59 = 0;
    a2 += v10;
    uint64_t v60 = v66 - a2;
    a3 += v11;
    uint64_t v61 = v9 - a3;
    uint64_t v62 = -8;
    while (((v61 | v60 | (a3 - v8) | (a2 - v7)) & 0x8000000000000000) == 0)
    {
      uint64_t v63 = v4 + SHIDWORD(a3) * (uint64_t)v5;
      unint64_t v36 = v63 + 6 * SHIDWORD(a2);
      uint64_t v37 = *(unsigned int **)(result + 32);
      if (v14 >= v36) {
        uint64_t v64 = (unsigned int *)(v63 + 6 * SHIDWORD(a2));
      }
      else {
        uint64_t v64 = (unsigned int *)v14;
      }
      if (v64 < v37) {
        uint64_t v64 = *(unsigned int **)(result + 32);
      }
      unint64_t v39 = *v64 | ((unint64_t)*((unsigned __int16 *)v64 + 2) << 32) | 0xFFFF000000000000;
      if (v6)
      {
        unsigned int v40 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        if ((v40 & 0xF) != 0)
        {
          v13 += v59 + 1;
          v12 -= v62;
          a4 += ~v59;
          unsigned int v24 = -1;
          goto LABEL_37;
        }
      }
      *(void *)(v12 + 8 * v59 + 16) = v39;
      *(unsigned char *)(v13 + v59++ + 2) = -1;
      v62 -= 8;
      a2 += v10;
      v60 -= v10;
      a3 += v11;
      v61 -= v11;
      if (a4 - 1 == v59) {
        return result;
      }
    }
    v13 += v59 + 1;
    v12 -= v62;
    a4 += ~v59;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_RGB48(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  int v5 = *(_DWORD *)(result + 24);
  uint64_t v6 = *(void *)(result + 176);
  uint64_t v7 = *(void *)(result + 64);
  uint64_t v8 = *(void *)(result + 72);
  uint64_t v67 = *(void *)(result + 88);
  uint64_t v68 = *(void *)(result + 80);
  uint64_t v9 = *(void *)(result + 112);
  uint64_t v10 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v12 = *(void *)(result + 144) - 1;
  unint64_t v13 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 2 * (3 * *(_DWORD *)(result + 256))
      - 6;
  int v66 = *(_DWORD *)(result + 188);
  do
  {
    while (1)
    {
      if ((uint64_t)a3 >= v8)
      {
        if ((uint64_t)a3 <= v67)
        {
          uint64_t v22 = (a3 >> 22) & 0x3C0;
          unsigned int v23 = 0x3FFFFFFF;
          HIDWORD(v24) = HIDWORD(a3);
        }
        else
        {
          uint64_t v18 = *(void *)(result + 216);
          uint64_t v19 = *(void *)(result + 224) + v67;
          uint64_t v20 = v19 - a3 + (v18 >> 1);
          if (v20 < 1) {
            goto LABEL_34;
          }
          if (v20 >= v18) {
            LODWORD(v21) = 0x3FFFFFFF;
          }
          else {
            unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
          }
          unsigned int v23 = v66 | v21;
          uint64_t v24 = v19 - 0x1000000;
          uint64_t v22 = 448;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(result + 216);
        uint64_t v15 = v8 - *(void *)(result + 224);
        uint64_t v16 = a3 - v15 + (v14 >> 1);
        if (v16 < 1) {
          goto LABEL_34;
        }
        if (v16 >= v14) {
          LODWORD(v17) = 0x3FFFFFFF;
        }
        else {
          unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v16) >> 32;
        }
        unsigned int v23 = v66 | v17;
        uint64_t v24 = v15 + 0x1000000;
        uint64_t v22 = 512;
      }
      if (a2 >= v7) {
        break;
      }
      uint64_t v25 = *(void *)(result + 192);
      uint64_t v26 = v7 - *(void *)(result + 200);
      uint64_t v27 = a2 - v26 + (v25 >> 1);
      if (v27 >= 1)
      {
        if (v27 < v25) {
          unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v66;
        }
        uint64_t v28 = v26 + 0x1000000;
        uint64_t v29 = 32;
        goto LABEL_26;
      }
LABEL_34:
      --a4;
      a2 += v9;
      a3 += v10;
      v11 += 8;
      *(unsigned char *)++uint64_t v12 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v68)
    {
      uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v28 = a2;
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(result + 192);
    uint64_t v31 = *(void *)(result + 200) + v68;
    uint64_t v32 = v31 - a2 + (v30 >> 1);
    if (v32 < 1) {
      goto LABEL_34;
    }
    if (v32 < v30) {
      unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v66;
    }
    uint64_t v28 = v31 - 0x1000000;
    uint64_t v29 = 28;
LABEL_26:
    if (v23 < 0x400000) {
      goto LABEL_34;
    }
    uint64_t v33 = v28 >> 32;
    uint64_t v34 = v4 + SHIDWORD(v24) * (uint64_t)v5;
    unint64_t v35 = v34 + 6 * (int)v33;
    unint64_t v36 = *(unsigned __int16 **)(result + 32);
    if (v13 >= v35) {
      uint64_t v37 = (unsigned __int16 *)(v34 + 6 * (int)v33);
    }
    else {
      uint64_t v37 = (unsigned __int16 *)v13;
    }
    if (v37 < v36) {
      uint64_t v37 = *(unsigned __int16 **)(result + 32);
    }
    unint64_t v38 = (bswap32(*v37) >> 16) | ((unint64_t)(bswap32(v37[1]) >> 16) << 16) | ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | 0xFFFF000000000000;
    if (!v6) {
      goto LABEL_65;
    }
    unsigned int v39 = *(_DWORD *)(v6 + (v29 | v22));
LABEL_37:
    int v40 = v39 & 0xF;
    int v41 = HIBYTE(v39) & 3;
    switch(v40)
    {
      case 1:
        unint64_t v56 = (unsigned __int16 *)(v35 + SBYTE1(v39) * (uint64_t)v5);
        if (v13 < (unint64_t)v56) {
          unint64_t v56 = (unsigned __int16 *)v13;
        }
        if (v56 < v36) {
          unint64_t v56 = v36;
        }
        uint64_t v57 = interpolate_16161616_21355[v41];
        unint64_t v54 = v38 - ((v57 & v38) >> (v41 + 1));
        unint64_t v55 = (((bswap32(*v56) >> 16) | ((unint64_t)(bswap32(v56[1]) >> 16) << 16) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | 0xFFFF000000000000) & v57) >> (v41 + 1);
        goto LABEL_59;
      case 2:
        uint64_t v58 = (unsigned __int16 *)(v35 + 6 * SBYTE2(v39));
        if (v13 < (unint64_t)v58) {
          uint64_t v58 = (unsigned __int16 *)v13;
        }
        if (v58 < v36) {
          uint64_t v58 = v36;
        }
        int v59 = (v39 >> 28) & 3;
        unint64_t v38 = v38
            - ((interpolate_16161616_21355[v59] & v38) >> (v59 + 1))
            + ((((bswap32(*v58) >> 16) | ((unint64_t)(bswap32(v58[1]) >> 16) << 16) | ((unint64_t)(bswap32(v58[2]) >> 16) << 32) | 0xFFFF000000000000) & interpolate_16161616_21355[v59]) >> (v59 + 1));
        break;
      case 3:
        int v42 = (unsigned __int16 *)(v35 + 6 * SBYTE2(v39));
        if (v13 < (unint64_t)v42) {
          int v42 = (unsigned __int16 *)v13;
        }
        if (v42 < v36) {
          int v42 = v36;
        }
        unint64_t v43 = (bswap32(*v42) >> 16) | ((unint64_t)(bswap32(v42[1]) >> 16) << 16) | ((unint64_t)(bswap32(v42[2]) >> 16) << 32) | 0xFFFF000000000000;
        unint64_t v44 = v35 + SBYTE1(v39) * (uint64_t)v5;
        if (v13 >= v44) {
          unint64_t v45 = (unsigned __int16 *)(v35 + SBYTE1(v39) * (uint64_t)v5);
        }
        else {
          unint64_t v45 = (unsigned __int16 *)v13;
        }
        if (v45 < v36) {
          unint64_t v45 = v36;
        }
        unint64_t v46 = (bswap32(*v45) >> 16) | ((unint64_t)(bswap32(v45[1]) >> 16) << 16) | ((unint64_t)(bswap32(v45[2]) >> 16) << 32) | 0xFFFF000000000000;
        unint64_t v47 = (unsigned __int16 *)(v44 + 6 * SBYTE2(v39));
        if (v13 < (unint64_t)v47) {
          unint64_t v47 = (unsigned __int16 *)v13;
        }
        if (v47 < v36) {
          unint64_t v47 = v36;
        }
        uint64_t v48 = interpolate_16161616_21355[v41];
        char v49 = v41 + 1;
        unint64_t v50 = v38 - ((v48 & v38) >> v49) + ((v46 & v48) >> v49);
        unint64_t v51 = v43
            - ((v48 & v43) >> v49)
            + ((((bswap32(*v47) >> 16) | ((unint64_t)(bswap32(v47[1]) >> 16) << 16) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | 0xFFFF000000000000) & v48) >> v49);
        int v52 = (v39 >> 28) & 3;
        uint64_t v53 = interpolate_16161616_21355[v52];
        LOBYTE(v52) = v52 + 1;
        unint64_t v54 = v50 - ((v50 & v53) >> v52);
        unint64_t v55 = (v51 & v53) >> v52;
LABEL_59:
        unint64_t v38 = v54 + v55;
        break;
    }
LABEL_65:
    *(void *)(v11 + 8) = v38;
    *(unsigned char *)(v12 + 1) = v23 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v60 = 0;
    a2 += v9;
    uint64_t v61 = v68 - a2;
    a3 += v10;
    uint64_t v62 = v67 - a3;
    uint64_t v63 = -8;
    while (((v62 | v61 | (a3 - v8) | (a2 - v7)) & 0x8000000000000000) == 0)
    {
      uint64_t v64 = v4 + SHIDWORD(a3) * (uint64_t)v5;
      unint64_t v35 = v64 + 6 * SHIDWORD(a2);
      unint64_t v36 = *(unsigned __int16 **)(result + 32);
      if (v13 >= v35) {
        int v65 = (unsigned __int16 *)(v64 + 6 * SHIDWORD(a2));
      }
      else {
        int v65 = (unsigned __int16 *)v13;
      }
      if (v65 < v36) {
        int v65 = *(unsigned __int16 **)(result + 32);
      }
      unint64_t v38 = (bswap32(*v65) >> 16) | ((unint64_t)(bswap32(v65[1]) >> 16) << 16) | ((unint64_t)(bswap32(v65[2]) >> 16) << 32) | 0xFFFF000000000000;
      if (v6)
      {
        unsigned int v39 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        if ((v39 & 0xF) != 0)
        {
          v12 += v60 + 1;
          v11 -= v63;
          a4 += ~v60;
          unsigned int v23 = -1;
          goto LABEL_37;
        }
      }
      *(void *)(v11 + 8 * v60 + 16) = v38;
      *(unsigned char *)(v12 + v60++ + 2) = -1;
      v63 -= 8;
      a2 += v9;
      v61 -= v9;
      a3 += v10;
      v62 -= v10;
      if (a4 - 1 == v60) {
        return result;
      }
    }
    v12 += v60 + 1;
    v11 -= v63;
    a4 += ~v60;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_w16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v93 = *(void *)(result + 80);
  uint64_t v91 = *(void *)(result + 88);
  uint64_t v9 = *(void *)(result + 112);
  uint64_t v10 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v12 = *(void *)(result + 144) - 1;
  if (v5) {
    int v13 = 0;
  }
  else {
    int v13 = -65536;
  }
  int v14 = *(_DWORD *)(result + 260) - 1;
  uint64_t v15 = *(unsigned int *)(result + 256);
  unint64_t v16 = v5 + (v14 * v7) + 2 * (v15 - 1);
  int v89 = *(_DWORD *)(result + 188);
  unint64_t v17 = v4 + (v14 * v6) + 2 * v15 - 2;
  uint64_t v90 = *(void *)(result + 64);
  uint64_t v92 = *(void *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v92)
      {
        if (a3 <= v91)
        {
          uint64_t v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          unsigned int v27 = 0x3FFFFFFF;
          uint64_t v28 = a3;
          uint64_t v29 = v90;
          uint64_t v30 = v93;
        }
        else
        {
          uint64_t v22 = *(void *)(result + 216);
          uint64_t v23 = *(void *)(result + 224) + v91;
          uint64_t v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1) {
            goto LABEL_43;
          }
          if (v24 >= v22) {
            LODWORD(v25) = 0x3FFFFFFF;
          }
          else {
            unint64_t v25 = (unint64_t)(*(void *)(result + 232) * v24) >> 32;
          }
          uint64_t v29 = v90;
          uint64_t v30 = v93;
          unsigned int v27 = v89 | v25;
          uint64_t v28 = v23 - 0x1000000;
          uint64_t v26 = 448;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = v92 - *(void *)(result + 224);
        uint64_t v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_43;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        uint64_t v29 = v90;
        uint64_t v30 = v93;
        unsigned int v27 = v89 | v21;
        uint64_t v28 = v19 + 0x1000000;
        uint64_t v26 = 512;
      }
      if (a2 >= v29) {
        break;
      }
      uint64_t v31 = *(void *)(result + 192);
      uint64_t v32 = v29 - *(void *)(result + 200);
      uint64_t v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31) {
          unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v89;
        }
        uint64_t v34 = v32 + 0x1000000;
        uint64_t v35 = 32;
        goto LABEL_29;
      }
LABEL_43:
      --a4;
      a2 += v9;
      a3 += v10;
      v11 += 8;
      *(unsigned char *)++uint64_t v12 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v30)
    {
      uint64_t v35 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v34 = a2;
      goto LABEL_29;
    }
    uint64_t v36 = *(void *)(result + 192);
    uint64_t v37 = *(void *)(result + 200) + v30;
    uint64_t v38 = v37 - a2 + (v36 >> 1);
    if (v38 < 1) {
      goto LABEL_43;
    }
    if (v38 < v36) {
      unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v38) >> 32) >> 15)) | v89;
    }
    uint64_t v34 = v37 - 0x1000000;
    uint64_t v35 = 28;
LABEL_29:
    if (v27 < 0x400000) {
      goto LABEL_43;
    }
    uint64_t v39 = v28 >> 32;
    unint64_t v40 = (v34 >> 31) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v4 + (int)v39 * (uint64_t)v6 + v40;
    int v42 = *(unsigned __int16 **)(result + 32);
    if (v17 >= v41) {
      unint64_t v43 = (unsigned __int16 *)(v4 + (int)v39 * (uint64_t)v6 + v40);
    }
    else {
      unint64_t v43 = (unsigned __int16 *)v17;
    }
    if (v43 < v42) {
      unint64_t v43 = *(unsigned __int16 **)(result + 32);
    }
    unsigned int v44 = *v43;
    if (v5)
    {
      unint64_t v45 = v5 + (int)v39 * (uint64_t)v7 + v40;
      unint64_t v46 = *(unsigned __int16 **)(result + 40);
      if (v16 >= v45) {
        unint64_t v47 = (unsigned __int16 *)v45;
      }
      else {
        unint64_t v47 = (unsigned __int16 *)v16;
      }
      if (v47 >= v46) {
        unint64_t v46 = v47;
      }
      v44 |= *v46 << 16;
      if (!v8) {
        goto LABEL_103;
      }
    }
    else
    {
      unint64_t v45 = 0;
      if (!v8) {
        goto LABEL_103;
      }
    }
    unsigned int v48 = *(_DWORD *)(v8 + (v35 | v26));
LABEL_48:
    int v49 = v48 & 0xF;
    int v50 = HIBYTE(v48) & 3;
    switch(v49)
    {
      case 1:
        uint64_t v70 = (unsigned __int16 *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 < (unint64_t)v70) {
          uint64_t v70 = (unsigned __int16 *)v17;
        }
        if (v70 < v42) {
          uint64_t v70 = v42;
        }
        unsigned int v71 = *v70;
        if (v5)
        {
          uint64_t v72 = (unsigned __int16 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          if (v16 < (unint64_t)v72) {
            uint64_t v72 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v72 < *(void *)(result + 40)) {
            uint64_t v72 = *(unsigned __int16 **)(result + 40);
          }
          v71 |= *v72 << 16;
        }
        int v73 = interpolate_1616[v50];
        unsigned int v68 = v44 - ((v73 & v44) >> (v50 + 1));
        unsigned int v69 = (v73 & v71) >> (v50 + 1);
        goto LABEL_91;
      case 2:
        uint64_t v74 = (unsigned __int16 *)(v41 + 2 * SBYTE2(v48));
        if (v17 < (unint64_t)v74) {
          uint64_t v74 = (unsigned __int16 *)v17;
        }
        if (v74 < v42) {
          uint64_t v74 = v42;
        }
        unsigned int v75 = *v74;
        if (v5)
        {
          unint64_t v76 = (unsigned __int16 *)(v45 + 2 * SBYTE2(v48));
          if (v16 < (unint64_t)v76) {
            unint64_t v76 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v76 < *(void *)(result + 40)) {
            unint64_t v76 = *(unsigned __int16 **)(result + 40);
          }
          v75 |= *v76 << 16;
        }
        unsigned int v44 = v44
            - ((interpolate_1616[(v48 >> 28) & 3] & v44) >> (((v48 >> 28) & 3) + 1))
            + ((interpolate_1616[(v48 >> 28) & 3] & v75) >> (((v48 >> 28) & 3) + 1));
        break;
      case 3:
        unint64_t v51 = (unsigned __int16 *)(v41 + 2 * SBYTE2(v48));
        if (v17 < (unint64_t)v51) {
          unint64_t v51 = (unsigned __int16 *)v17;
        }
        if (v51 < v42) {
          unint64_t v51 = v42;
        }
        unsigned int v52 = *v51;
        uint64_t v53 = (unsigned __int16 *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 >= (unint64_t)v53) {
          unint64_t v54 = v53;
        }
        else {
          unint64_t v54 = (unsigned __int16 *)v17;
        }
        if (v54 < v42) {
          unint64_t v54 = v42;
        }
        unsigned int v88 = *v54;
        unint64_t v55 = &v53[SBYTE2(v48)];
        if (v17 < (unint64_t)v55) {
          unint64_t v55 = (unsigned __int16 *)v17;
        }
        if (v55 < v42) {
          unint64_t v55 = v42;
        }
        unsigned int v56 = *v55;
        if (v5)
        {
          uint64_t v87 = 2 * SBYTE2(v48);
          uint64_t v57 = (unsigned __int16 *)(v45 + v87);
          unint64_t v58 = *(void *)(result + 40);
          if (v16 < v45 + v87) {
            uint64_t v57 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v57 < v58) {
            uint64_t v57 = *(unsigned __int16 **)(result + 40);
          }
          v52 |= *v57 << 16;
          unint64_t v59 = v45 + SBYTE1(v48) * (uint64_t)v7;
          if (v16 >= v59) {
            uint64_t v60 = (unsigned __int16 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          }
          else {
            uint64_t v60 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v60 < v58) {
            uint64_t v60 = *(unsigned __int16 **)(result + 40);
          }
          v88 |= *v60 << 16;
          uint64_t v61 = (unsigned __int16 *)(v59 + v87);
          if (v16 < v59 + v87) {
            uint64_t v61 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v61 < v58) {
            uint64_t v61 = *(unsigned __int16 **)(result + 40);
          }
          v56 |= *v61 << 16;
        }
        int v62 = interpolate_1616[v50];
        char v63 = v50 + 1;
        unsigned int v64 = v44 - ((v62 & v44) >> v63) + ((v62 & v88) >> v63);
        unsigned int v65 = v52 - ((v62 & v52) >> v63) + ((v62 & v56) >> v63);
        int v66 = (v48 >> 28) & 3;
        int v67 = interpolate_1616[v66];
        LOBYTE(v66) = v66 + 1;
        unsigned int v68 = v64 - ((v64 & v67) >> v66);
        unsigned int v69 = (v65 & v67) >> v66;
LABEL_91:
        unsigned int v44 = v68 + v69;
        break;
    }
LABEL_103:
    *(_DWORD *)(v11 + 8) = 65537 * (unsigned __int16)v44;
    *(_DWORD *)(v11 + 12) = v44 | v13;
    *(unsigned char *)(v12 + 1) = v27 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v77 = 0;
    uint64_t v78 = (unsigned int *)(v11 + 20);
    a2 += v9;
    uint64_t v79 = v93 - a2;
    a3 += v10;
    uint64_t v80 = v91 - a3;
    while (((v80 | v79 | (a3 - v92) | (a2 - v90)) & 0x8000000000000000) == 0)
    {
      uint64_t v81 = v4 + SHIDWORD(a3) * (uint64_t)v6;
      unint64_t v82 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v41 = v81 + v82;
      int v42 = *(unsigned __int16 **)(result + 32);
      if (v17 >= v81 + v82) {
        uint64_t v83 = (unsigned __int16 *)(v81 + v82);
      }
      else {
        uint64_t v83 = (unsigned __int16 *)v17;
      }
      if (v83 < v42) {
        uint64_t v83 = *(unsigned __int16 **)(result + 32);
      }
      unsigned int v44 = *v83;
      if (v5)
      {
        unint64_t v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v82;
        uint64_t v84 = *(unsigned __int16 **)(result + 40);
        if (v16 >= v45) {
          uint64_t v85 = (unsigned __int16 *)(v5 + SHIDWORD(a3) * (uint64_t)v7 + v82);
        }
        else {
          uint64_t v85 = (unsigned __int16 *)v16;
        }
        if (v85 >= v84) {
          uint64_t v84 = v85;
        }
        v44 |= *v84 << 16;
      }
      if (v8)
      {
        unsigned int v48 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v48 & 0xF) != 0)
        {
          v12 += v77 + 1;
          uint64_t v11 = (uint64_t)(v78 - 3);
          a4 += ~v77;
          unsigned int v27 = -1;
          goto LABEL_48;
        }
      }
      *(v78 - 1) = 65537 * (unsigned __int16)v44;
      *uint64_t v78 = v44 | v13;
      uint64_t v86 = v12 + v77++;
      v78 += 2;
      *(unsigned char *)(v86 + 2) = -1;
      a2 += v9;
      v79 -= v9;
      a3 += v10;
      v80 -= v10;
      if (a4 - 1 == v77) {
        return result;
      }
    }
    v12 += v77 + 1;
    uint64_t v11 = (uint64_t)(v78 - 3);
    a4 += ~v77;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_W16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v93 = *(void *)(result + 80);
  uint64_t v91 = *(void *)(result + 88);
  uint64_t v9 = *(void *)(result + 112);
  uint64_t v10 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v12 = *(void *)(result + 144) - 1;
  if (v5) {
    int v13 = 0;
  }
  else {
    int v13 = -65536;
  }
  int v14 = *(_DWORD *)(result + 260) - 1;
  uint64_t v15 = *(unsigned int *)(result + 256);
  unint64_t v16 = v5 + (v14 * v7) + 2 * (v15 - 1);
  int v89 = *(_DWORD *)(result + 188);
  unint64_t v17 = v4 + (v14 * v6) + 2 * v15 - 2;
  uint64_t v90 = *(void *)(result + 64);
  uint64_t v92 = *(void *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v92)
      {
        if (a3 <= v91)
        {
          uint64_t v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          unsigned int v27 = 0x3FFFFFFF;
          uint64_t v28 = a3;
          uint64_t v29 = v90;
          uint64_t v30 = v93;
        }
        else
        {
          uint64_t v22 = *(void *)(result + 216);
          uint64_t v23 = *(void *)(result + 224) + v91;
          uint64_t v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1) {
            goto LABEL_43;
          }
          if (v24 >= v22) {
            LODWORD(v25) = 0x3FFFFFFF;
          }
          else {
            unint64_t v25 = (unint64_t)(*(void *)(result + 232) * v24) >> 32;
          }
          uint64_t v29 = v90;
          uint64_t v30 = v93;
          unsigned int v27 = v89 | v25;
          uint64_t v28 = v23 - 0x1000000;
          uint64_t v26 = 448;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = v92 - *(void *)(result + 224);
        uint64_t v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_43;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        uint64_t v29 = v90;
        uint64_t v30 = v93;
        unsigned int v27 = v89 | v21;
        uint64_t v28 = v19 + 0x1000000;
        uint64_t v26 = 512;
      }
      if (a2 >= v29) {
        break;
      }
      uint64_t v31 = *(void *)(result + 192);
      uint64_t v32 = v29 - *(void *)(result + 200);
      uint64_t v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31) {
          unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v89;
        }
        uint64_t v34 = v32 + 0x1000000;
        uint64_t v35 = 32;
        goto LABEL_29;
      }
LABEL_43:
      --a4;
      a2 += v9;
      a3 += v10;
      v11 += 8;
      *(unsigned char *)++uint64_t v12 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v30)
    {
      uint64_t v35 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v34 = a2;
      goto LABEL_29;
    }
    uint64_t v36 = *(void *)(result + 192);
    uint64_t v37 = *(void *)(result + 200) + v30;
    uint64_t v38 = v37 - a2 + (v36 >> 1);
    if (v38 < 1) {
      goto LABEL_43;
    }
    if (v38 < v36) {
      unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v38) >> 32) >> 15)) | v89;
    }
    uint64_t v34 = v37 - 0x1000000;
    uint64_t v35 = 28;
LABEL_29:
    if (v27 < 0x400000) {
      goto LABEL_43;
    }
    uint64_t v39 = v28 >> 32;
    unint64_t v40 = (v34 >> 31) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v4 + (int)v39 * (uint64_t)v6 + v40;
    int v42 = *(unsigned __int16 **)(result + 32);
    if (v17 >= v41) {
      unint64_t v43 = (unsigned __int16 *)(v4 + (int)v39 * (uint64_t)v6 + v40);
    }
    else {
      unint64_t v43 = (unsigned __int16 *)v17;
    }
    if (v43 < v42) {
      unint64_t v43 = *(unsigned __int16 **)(result + 32);
    }
    unsigned int v44 = bswap32(*v43) >> 16;
    if (v5)
    {
      unint64_t v45 = v5 + (int)v39 * (uint64_t)v7 + v40;
      unint64_t v46 = *(unsigned __int16 **)(result + 40);
      if (v16 >= v45) {
        unint64_t v47 = (unsigned __int16 *)v45;
      }
      else {
        unint64_t v47 = (unsigned __int16 *)v16;
      }
      if (v47 >= v46) {
        unint64_t v46 = v47;
      }
      v44 |= bswap32(*v46) & 0xFFFF0000;
      if (!v8) {
        goto LABEL_103;
      }
    }
    else
    {
      unint64_t v45 = 0;
      if (!v8) {
        goto LABEL_103;
      }
    }
    unsigned int v48 = *(_DWORD *)(v8 + (v35 | v26));
LABEL_48:
    int v49 = v48 & 0xF;
    int v50 = HIBYTE(v48) & 3;
    switch(v49)
    {
      case 1:
        uint64_t v70 = (unsigned __int16 *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 < (unint64_t)v70) {
          uint64_t v70 = (unsigned __int16 *)v17;
        }
        if (v70 < v42) {
          uint64_t v70 = v42;
        }
        unsigned int v71 = bswap32(*v70) >> 16;
        if (v5)
        {
          uint64_t v72 = (unsigned __int16 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          if (v16 < (unint64_t)v72) {
            uint64_t v72 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v72 < *(void *)(result + 40)) {
            uint64_t v72 = *(unsigned __int16 **)(result + 40);
          }
          v71 |= bswap32(*v72) & 0xFFFF0000;
        }
        int v73 = interpolate_1616[v50];
        unsigned int v68 = v44 - ((v73 & v44) >> (v50 + 1));
        unsigned int v69 = (v73 & v71) >> (v50 + 1);
        goto LABEL_91;
      case 2:
        uint64_t v74 = (unsigned __int16 *)(v41 + 2 * SBYTE2(v48));
        if (v17 < (unint64_t)v74) {
          uint64_t v74 = (unsigned __int16 *)v17;
        }
        if (v74 < v42) {
          uint64_t v74 = v42;
        }
        unsigned int v75 = bswap32(*v74) >> 16;
        if (v5)
        {
          unint64_t v76 = (unsigned __int16 *)(v45 + 2 * SBYTE2(v48));
          if (v16 < (unint64_t)v76) {
            unint64_t v76 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v76 < *(void *)(result + 40)) {
            unint64_t v76 = *(unsigned __int16 **)(result + 40);
          }
          v75 |= bswap32(*v76) & 0xFFFF0000;
        }
        unsigned int v44 = v44
            - ((interpolate_1616[(v48 >> 28) & 3] & v44) >> (((v48 >> 28) & 3) + 1))
            + ((interpolate_1616[(v48 >> 28) & 3] & v75) >> (((v48 >> 28) & 3) + 1));
        break;
      case 3:
        unint64_t v51 = (unsigned __int16 *)(v41 + 2 * SBYTE2(v48));
        if (v17 < (unint64_t)v51) {
          unint64_t v51 = (unsigned __int16 *)v17;
        }
        if (v51 < v42) {
          unint64_t v51 = v42;
        }
        unsigned int v52 = bswap32(*v51) >> 16;
        uint64_t v53 = (unsigned __int16 *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 >= (unint64_t)v53) {
          unint64_t v54 = v53;
        }
        else {
          unint64_t v54 = (unsigned __int16 *)v17;
        }
        if (v54 < v42) {
          unint64_t v54 = v42;
        }
        unsigned int v88 = bswap32(*v54) >> 16;
        unint64_t v55 = &v53[SBYTE2(v48)];
        if (v17 < (unint64_t)v55) {
          unint64_t v55 = (unsigned __int16 *)v17;
        }
        if (v55 < v42) {
          unint64_t v55 = v42;
        }
        unsigned int v56 = bswap32(*v55) >> 16;
        if (v5)
        {
          uint64_t v87 = 2 * SBYTE2(v48);
          uint64_t v57 = (unsigned __int16 *)(v45 + v87);
          unint64_t v58 = *(void *)(result + 40);
          if (v16 < v45 + v87) {
            uint64_t v57 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v57 < v58) {
            uint64_t v57 = *(unsigned __int16 **)(result + 40);
          }
          v52 |= bswap32(*v57) & 0xFFFF0000;
          unint64_t v59 = v45 + SBYTE1(v48) * (uint64_t)v7;
          if (v16 >= v59) {
            uint64_t v60 = (unsigned __int16 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          }
          else {
            uint64_t v60 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v60 < v58) {
            uint64_t v60 = *(unsigned __int16 **)(result + 40);
          }
          v88 |= bswap32(*v60) & 0xFFFF0000;
          uint64_t v61 = (unsigned __int16 *)(v59 + v87);
          if (v16 < v59 + v87) {
            uint64_t v61 = (unsigned __int16 *)v16;
          }
          if ((unint64_t)v61 < v58) {
            uint64_t v61 = *(unsigned __int16 **)(result + 40);
          }
          v56 |= bswap32(*v61) & 0xFFFF0000;
        }
        int v62 = interpolate_1616[v50];
        char v63 = v50 + 1;
        unsigned int v64 = v44 - ((v62 & v44) >> v63) + ((v62 & v88) >> v63);
        unsigned int v65 = v52 - ((v62 & v52) >> v63) + ((v62 & v56) >> v63);
        int v66 = (v48 >> 28) & 3;
        int v67 = interpolate_1616[v66];
        LOBYTE(v66) = v66 + 1;
        unsigned int v68 = v64 - ((v64 & v67) >> v66);
        unsigned int v69 = (v65 & v67) >> v66;
LABEL_91:
        unsigned int v44 = v68 + v69;
        break;
    }
LABEL_103:
    *(_DWORD *)(v11 + 8) = 65537 * (unsigned __int16)v44;
    *(_DWORD *)(v11 + 12) = v44 | v13;
    *(unsigned char *)(v12 + 1) = v27 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v77 = 0;
    uint64_t v78 = (unsigned int *)(v11 + 20);
    a2 += v9;
    uint64_t v79 = v93 - a2;
    a3 += v10;
    uint64_t v80 = v91 - a3;
    while (((v80 | v79 | (a3 - v92) | (a2 - v90)) & 0x8000000000000000) == 0)
    {
      uint64_t v81 = v4 + SHIDWORD(a3) * (uint64_t)v6;
      unint64_t v82 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v41 = v81 + v82;
      int v42 = *(unsigned __int16 **)(result + 32);
      if (v17 >= v81 + v82) {
        uint64_t v83 = (unsigned __int16 *)(v81 + v82);
      }
      else {
        uint64_t v83 = (unsigned __int16 *)v17;
      }
      if (v83 < v42) {
        uint64_t v83 = *(unsigned __int16 **)(result + 32);
      }
      unsigned int v44 = bswap32(*v83) >> 16;
      if (v5)
      {
        unint64_t v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v82;
        uint64_t v84 = *(unsigned __int16 **)(result + 40);
        if (v16 >= v45) {
          uint64_t v85 = (unsigned __int16 *)(v5 + SHIDWORD(a3) * (uint64_t)v7 + v82);
        }
        else {
          uint64_t v85 = (unsigned __int16 *)v16;
        }
        if (v85 >= v84) {
          uint64_t v84 = v85;
        }
        v44 |= bswap32(*v84) & 0xFFFF0000;
      }
      if (v8)
      {
        unsigned int v48 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v48 & 0xF) != 0)
        {
          v12 += v77 + 1;
          uint64_t v11 = (uint64_t)(v78 - 3);
          a4 += ~v77;
          unsigned int v27 = -1;
          goto LABEL_48;
        }
      }
      *(v78 - 1) = 65537 * (unsigned __int16)v44;
      *uint64_t v78 = v44 | v13;
      uint64_t v86 = v12 + v77++;
      v78 += 2;
      *(unsigned char *)(v86 + 2) = -1;
      a2 += v9;
      v79 -= v9;
      a3 += v10;
      v80 -= v10;
      if (a4 - 1 == v77) {
        return result;
      }
    }
    v12 += v77 + 1;
    uint64_t v11 = (uint64_t)(v78 - 3);
    a4 += ~v77;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_argb32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 64);
  uint64_t v7 = *(void *)(result + 72);
  uint64_t v8 = *(void *)(result + 88);
  uint64_t v74 = *(void *)(result + 80);
  uint64_t v9 = *(void *)(result + 112);
  uint64_t v10 = *(void *)(result + 120);
  int v73 = *(_DWORD *)(result + 188);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v12 = *(void *)(result + 144) - 1;
  uint64_t v13 = *(void *)(result + 32);
  if (*(void *)(result + 40)) {
    int v14 = 0;
  }
  else {
    int v14 = -16777216;
  }
  unint64_t v15 = v13 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v8)
      {
        uint64_t v24 = (a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v8;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1) {
          goto LABEL_37;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        unsigned int v25 = v73 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v7 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1) {
        goto LABEL_37;
      }
      if (v18 >= v16) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      unsigned int v25 = v73 | v19;
      uint64_t v26 = v17 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v6) {
      break;
    }
    uint64_t v27 = *(void *)(result + 192);
    uint64_t v28 = v6 - *(void *)(result + 200);
    uint64_t v29 = a2 - v28 + (v27 >> 1);
    if (v29 >= 1)
    {
      if (v29 < v27) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v29) >> 32) >> 15)) | v73;
      }
      uint64_t v30 = v28 + 0x1000000;
      uint64_t v31 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v9;
    a3 += v10;
    v11 += 8;
    *(unsigned char *)++uint64_t v12 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v74)
  {
    uint64_t v31 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v30 = a2;
    goto LABEL_29;
  }
  uint64_t v32 = *(void *)(result + 192);
  uint64_t v33 = *(void *)(result + 200) + v74;
  uint64_t v34 = v33 - a2 + (v32 >> 1);
  if (v34 < 1) {
    goto LABEL_37;
  }
  if (v34 < v32) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v34) >> 32) >> 15)) | v73;
  }
  uint64_t v30 = v33 - 0x1000000;
  uint64_t v31 = 28;
LABEL_29:
  if (v25 < 0x400000) {
    goto LABEL_37;
  }
  uint64_t v35 = v13 + SHIDWORD(v26) * (uint64_t)v4;
  uint64_t v36 = v30 >> 32;
  unint64_t v37 = v35 + 4 * v36;
  uint64_t v38 = *(unsigned int **)(result + 32);
  if (v15 >= v37) {
    uint64_t v39 = (unsigned int *)(v35 + 4 * v36);
  }
  else {
    uint64_t v39 = (unsigned int *)v15;
  }
  if (v39 < v38) {
    uint64_t v39 = *(unsigned int **)(result + 32);
  }
  unsigned int v40 = *v39;
  if (!v5) {
    goto LABEL_69;
  }
  unsigned int v41 = *(_DWORD *)(v5 + (v31 | v24));
LABEL_40:
  int v42 = v41 & 0xF;
  int v43 = HIBYTE(v41) & 3;
  switch(v42)
  {
    case 1:
      uint64_t v60 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
      if (v15 < (unint64_t)v60) {
        uint64_t v60 = (unsigned int *)v15;
      }
      if (v60 < v38) {
        uint64_t v60 = v38;
      }
      unsigned int v61 = interpolate_8888_21358[v43];
      char v62 = v43 + 1;
      unsigned int v58 = v40 - ((v61 & v40) >> v62);
      unsigned int v63 = (v61 & *v60) >> v62;
LABEL_68:
      unsigned int v40 = v58 + v63;
      break;
    case 2:
      unsigned int v64 = (unsigned int *)(v37 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 54));
      if (v15 < (unint64_t)v64) {
        unsigned int v64 = (unsigned int *)v15;
      }
      if (v64 < v38) {
        unsigned int v64 = v38;
      }
      int v65 = (v41 >> 28) & 3;
      int v66 = interpolate_8888_21358[v65];
      char v57 = v65 + 1;
      unsigned int v58 = v40 - ((v66 & v40) >> v57);
      unsigned int v59 = v66 & *v64;
LABEL_67:
      unsigned int v63 = v59 >> v57;
      goto LABEL_68;
    case 3:
      int64_t v44 = (unint64_t)HIWORD(v41) << 56;
      unint64_t v45 = (unsigned int *)(v37 + (v44 >> 54));
      if (v15 < (unint64_t)v45) {
        unint64_t v45 = (unsigned int *)v15;
      }
      if (v45 < v38) {
        unint64_t v45 = v38;
      }
      unsigned int v46 = *v45;
      unint64_t v47 = v37 + SBYTE1(v41) * (uint64_t)v4;
      if (v15 >= v47) {
        unsigned int v48 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
      }
      else {
        unsigned int v48 = (unsigned int *)v15;
      }
      if (v48 < v38) {
        unsigned int v48 = v38;
      }
      unsigned int v49 = *v48;
      int v50 = (unsigned int *)(v47 + (v44 >> 54));
      if (v15 < (unint64_t)v50) {
        int v50 = (unsigned int *)v15;
      }
      if (v50 < v38) {
        int v50 = v38;
      }
      unsigned int v51 = interpolate_8888_21358[v43];
      char v52 = v43 + 1;
      unsigned int v53 = v40 - ((v51 & v40) >> v52) + ((v51 & v49) >> v52);
      unsigned int v54 = v46 - ((v51 & v46) >> v52) + ((v51 & *v50) >> v52);
      int v55 = (v41 >> 28) & 3;
      int v56 = interpolate_8888_21358[v55];
      char v57 = v55 + 1;
      unsigned int v58 = v53 - ((v53 & v56) >> v57);
      unsigned int v59 = v54 & v56;
      goto LABEL_67;
  }
LABEL_69:
  uint64_t v67 = 0;
  a2 += v9;
  uint64_t v68 = v74 - a2;
  unsigned int v69 = (unsigned int *)(v11 + 12);
  a3 += v10;
  uint64_t v70 = v8 - a3;
  while (1)
  {
    *(v69 - 1) = ((v40 | v14) << 8) & 0xFF0000 | ((v40 | v14) >> 8 << 24) | ((v40 | v14) >> 8) & 0xFF00 | ((v40 | v14) >> 16);
    unsigned int *v69 = (v40 | v14) & 0xFF000000 | ((v40 | v14) >> 8) & 0xFF0000 | v40 | (v40 << 8);
    *(unsigned char *)(v12 + 1 + v67) = v25 >> 22;
    if (a4 - 1 == v67) {
      return result;
    }
    if (((v70 | v68 | (a3 - v7) | (a2 - v6)) & 0x8000000000000000) != 0)
    {
      uint64_t v11 = (uint64_t)(v69 - 1);
      v12 += v67 + 1;
      a4 += ~v67;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v71 = v13 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v37 = v71 + 4 * (a2 >> 32);
    uint64_t v38 = *(unsigned int **)(result + 32);
    if (v15 >= v37) {
      uint64_t v72 = (unsigned int *)(v71 + 4 * (a2 >> 32));
    }
    else {
      uint64_t v72 = (unsigned int *)v15;
    }
    if (v72 < v38) {
      uint64_t v72 = *(unsigned int **)(result + 32);
    }
    unsigned int v40 = *v72;
    if (v5)
    {
      unsigned int v41 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v41 & 0xF) != 0)
      {
        uint64_t v11 = (uint64_t)(v69 - 1);
        v12 += v67 + 1;
        a4 += ~v67;
        unsigned int v25 = -1;
        goto LABEL_40;
      }
    }
    v68 -= v9;
    v69 += 2;
    ++v67;
    a3 += v10;
    v70 -= v10;
    a2 += v9;
    unsigned int v25 = -1;
  }
}

uint64_t rgba64_sample_ARGB32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 64);
  uint64_t v7 = *(void *)(result + 72);
  uint64_t v8 = *(void *)(result + 88);
  uint64_t v71 = *(void *)(result + 80);
  uint64_t v9 = *(void *)(result + 112);
  uint64_t v10 = *(void *)(result + 120);
  int v70 = *(_DWORD *)(result + 188);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v12 = *(void *)(result + 144) - 1;
  uint64_t v13 = *(void *)(result + 32);
  if (*(void *)(result + 40)) {
    int v14 = 0;
  }
  else {
    int v14 = -16777216;
  }
  unint64_t v15 = v13 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v8)
      {
        uint64_t v24 = (a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v8;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1) {
          goto LABEL_37;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        unsigned int v25 = v70 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v7 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1) {
        goto LABEL_37;
      }
      if (v18 >= v16) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      unsigned int v25 = v70 | v19;
      uint64_t v26 = v17 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v6) {
      break;
    }
    uint64_t v27 = *(void *)(result + 192);
    uint64_t v28 = v6 - *(void *)(result + 200);
    uint64_t v29 = a2 - v28 + (v27 >> 1);
    if (v29 >= 1)
    {
      if (v29 < v27) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v29) >> 32) >> 15)) | v70;
      }
      uint64_t v30 = v28 + 0x1000000;
      uint64_t v31 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v9;
    a3 += v10;
    v11 += 8;
    *(unsigned char *)++uint64_t v12 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v71)
  {
    uint64_t v31 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v30 = a2;
    goto LABEL_29;
  }
  uint64_t v32 = *(void *)(result + 192);
  uint64_t v33 = *(void *)(result + 200) + v71;
  uint64_t v34 = v33 - a2 + (v32 >> 1);
  if (v34 < 1) {
    goto LABEL_37;
  }
  if (v34 < v32) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v34) >> 32) >> 15)) | v70;
  }
  uint64_t v30 = v33 - 0x1000000;
  uint64_t v31 = 28;
LABEL_29:
  if (v25 < 0x400000) {
    goto LABEL_37;
  }
  uint64_t v35 = v13 + SHIDWORD(v26) * (uint64_t)v4;
  uint64_t v36 = v30 >> 32;
  unint64_t v37 = v35 + 4 * v36;
  uint64_t v38 = *(unsigned int **)(result + 32);
  if (v15 >= v37) {
    uint64_t v39 = (unsigned int *)(v35 + 4 * v36);
  }
  else {
    uint64_t v39 = (unsigned int *)v15;
  }
  if (v39 < v38) {
    uint64_t v39 = *(unsigned int **)(result + 32);
  }
  unsigned int v40 = bswap32(*v39);
  if (!v5) {
    goto LABEL_69;
  }
  unsigned int v41 = *(_DWORD *)(v5 + (v31 | v24));
LABEL_40:
  int v42 = v41 & 0xF;
  int v43 = HIBYTE(v41) & 3;
  switch(v42)
  {
    case 1:
      char v57 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
      if (v15 < (unint64_t)v57) {
        char v57 = (unsigned int *)v15;
      }
      if (v57 < v38) {
        char v57 = v38;
      }
      int v58 = interpolate_8888_21358[v43];
      char v59 = v43 + 1;
      unsigned int v60 = v40 - ((v58 & v40) >> v59);
      unsigned int v61 = (bswap32(*v57) & v58) >> v59;
LABEL_68:
      unsigned int v40 = v60 + v61;
      break;
    case 2:
      char v62 = (unsigned int *)(v37 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 54));
      if (v15 < (unint64_t)v62) {
        char v62 = (unsigned int *)v15;
      }
      if (v62 < v38) {
        char v62 = v38;
      }
      unsigned int v53 = bswap32(*v62);
      int v54 = (v41 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      unsigned int v56 = v55 & v40;
LABEL_67:
      char v63 = v54 + 1;
      unsigned int v60 = v40 - (v56 >> v63);
      unsigned int v61 = (v53 & v55) >> v63;
      goto LABEL_68;
    case 3:
      int64_t v44 = (unint64_t)HIWORD(v41) << 56;
      unint64_t v45 = (unsigned int *)(v37 + (v44 >> 54));
      if (v15 < (unint64_t)v45) {
        unint64_t v45 = (unsigned int *)v15;
      }
      if (v45 < v38) {
        unint64_t v45 = v38;
      }
      unsigned int v46 = bswap32(*v45);
      unint64_t v47 = v37 + SBYTE1(v41) * (uint64_t)v4;
      if (v15 >= v47) {
        unsigned int v48 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
      }
      else {
        unsigned int v48 = (unsigned int *)v15;
      }
      if (v48 < v38) {
        unsigned int v48 = v38;
      }
      unsigned int v49 = bswap32(*v48);
      int v50 = (unsigned int *)(v47 + (v44 >> 54));
      if (v15 < (unint64_t)v50) {
        int v50 = (unsigned int *)v15;
      }
      if (v50 < v38) {
        int v50 = v38;
      }
      int v51 = interpolate_8888_21358[v43];
      char v52 = v43 + 1;
      unsigned int v40 = v40 - ((v51 & v40) >> v52) + ((v51 & v49) >> v52);
      unsigned int v53 = v46 - ((v51 & v46) >> v52) + ((bswap32(*v50) & v51) >> v52);
      int v54 = (v41 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      unsigned int v56 = v40 & v55;
      goto LABEL_67;
  }
LABEL_69:
  uint64_t v64 = 0;
  a2 += v9;
  uint64_t v65 = v71 - a2;
  int v66 = (unsigned int *)(v11 + 12);
  a3 += v10;
  uint64_t v67 = v8 - a3;
  while (1)
  {
    *(v66 - 1) = ((v40 | v14) << 8) & 0xFF0000 | ((v40 | v14) >> 8 << 24) | ((v40 | v14) >> 8) & 0xFF00 | ((v40 | v14) >> 16);
    *int v66 = (v40 | v14) & 0xFF000000 | ((v40 | v14) >> 8) & 0xFF0000 | v40 | (v40 << 8);
    *(unsigned char *)(v12 + 1 + v64) = v25 >> 22;
    if (a4 - 1 == v64) {
      return result;
    }
    if (((v67 | v65 | (a3 - v7) | (a2 - v6)) & 0x8000000000000000) != 0)
    {
      uint64_t v11 = (uint64_t)(v66 - 1);
      v12 += v64 + 1;
      a4 += ~v64;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v68 = v13 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v37 = v68 + 4 * (a2 >> 32);
    uint64_t v38 = *(unsigned int **)(result + 32);
    if (v15 >= v37) {
      unsigned int v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    }
    else {
      unsigned int v69 = (unsigned int *)v15;
    }
    if (v69 < v38) {
      unsigned int v69 = *(unsigned int **)(result + 32);
    }
    unsigned int v40 = bswap32(*v69);
    if (v5)
    {
      unsigned int v41 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v41 & 0xF) != 0)
      {
        uint64_t v11 = (uint64_t)(v66 - 1);
        v12 += v64 + 1;
        a4 += ~v64;
        unsigned int v25 = -1;
        goto LABEL_40;
      }
    }
    v65 -= v9;
    v66 += 2;
    ++v64;
    a3 += v10;
    v67 -= v10;
    a2 += v9;
    unsigned int v25 = -1;
  }
}

uint64_t rgba64_sample_rgba32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v75 = *(void *)(result + 80);
  uint64_t v78 = *(void *)(result + 72);
  uint64_t v79 = *(void *)(result + 88);
  uint64_t v6 = *(void *)(result + 112);
  uint64_t v7 = *(void *)(result + 120);
  uint64_t v8 = *(void *)(result + 152) - 8;
  uint64_t v9 = *(void *)(result + 144) - 1;
  uint64_t v11 = *(void *)(result + 32);
  uint64_t v10 = *(void *)(result + 40);
  int v76 = *(_DWORD *)(result + 188);
  unint64_t v12 = v11 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v77 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v78)
    {
      if ((uint64_t)a3 <= v79)
      {
        uint64_t v21 = (a3 >> 22) & 0x3C0;
        unsigned int v22 = 0x3FFFFFFF;
        HIDWORD(v23) = HIDWORD(a3);
        uint64_t v24 = v77;
      }
      else
      {
        uint64_t v17 = *(void *)(result + 216);
        uint64_t v18 = *(void *)(result + 224) + v79;
        uint64_t v19 = v18 - a3 + (v17 >> 1);
        if (v19 < 1) {
          goto LABEL_34;
        }
        if (v19 >= v17) {
          LODWORD(v20) = 0x3FFFFFFF;
        }
        else {
          unint64_t v20 = (unint64_t)(*(void *)(result + 232) * v19) >> 32;
        }
        uint64_t v24 = v77;
        unsigned int v22 = v76 | v20;
        uint64_t v23 = v18 - 0x1000000;
        uint64_t v21 = 448;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(result + 216);
      uint64_t v14 = v78 - *(void *)(result + 224);
      uint64_t v15 = a3 - v14 + (v13 >> 1);
      if (v15 < 1) {
        goto LABEL_34;
      }
      if (v15 >= v13) {
        LODWORD(v16) = 0x3FFFFFFF;
      }
      else {
        unint64_t v16 = (unint64_t)(*(void *)(result + 232) * v15) >> 32;
      }
      uint64_t v24 = v77;
      unsigned int v22 = v76 | v16;
      uint64_t v23 = v14 + 0x1000000;
      uint64_t v21 = 512;
    }
    if (a2 >= v24) {
      break;
    }
    uint64_t v25 = *(void *)(result + 192);
    uint64_t v26 = v24 - *(void *)(result + 200);
    uint64_t v27 = a2 - v26 + (v25 >> 1);
    if (v27 >= 1)
    {
      if (v27 < v25) {
        unsigned int v22 = ((v22 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v76;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v6;
    a3 += v7;
    v8 += 8;
    *(unsigned char *)++uint64_t v9 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v75)
  {
    uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v28 = a2;
    goto LABEL_26;
  }
  uint64_t v30 = *(void *)(result + 192);
  uint64_t v31 = *(void *)(result + 200) + v75;
  uint64_t v32 = v31 - a2 + (v30 >> 1);
  if (v32 < 1) {
    goto LABEL_34;
  }
  if (v32 < v30) {
    unsigned int v22 = ((v22 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v76;
  }
  uint64_t v28 = v31 - 0x1000000;
  uint64_t v29 = 28;
LABEL_26:
  if (v22 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v33 = v11 + SHIDWORD(v23) * (uint64_t)v4;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v33 + 4 * v34;
  uint64_t v36 = *(unsigned int **)(result + 32);
  if (v12 >= v35) {
    unint64_t v37 = (unsigned int *)(v33 + 4 * v34);
  }
  else {
    unint64_t v37 = (unsigned int *)v12;
  }
  if (v37 < v36) {
    unint64_t v37 = *(unsigned int **)(result + 32);
  }
  unsigned int v38 = *v37;
  if (!v5)
  {
    uint64_t v40 = v75;
    goto LABEL_67;
  }
  unsigned int v39 = *(_DWORD *)(v5 + (v29 | v21));
LABEL_38:
  int v41 = v39 & 0xF;
  int v42 = HIBYTE(v39) & 3;
  uint64_t v40 = v75;
  switch(v41)
  {
    case 1:
      char v59 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      if (v12 < (unint64_t)v59) {
        char v59 = (unsigned int *)v12;
      }
      if (v59 < v36) {
        char v59 = v36;
      }
      unsigned int v60 = interpolate_8888_21358[v42];
      char v61 = v42 + 1;
      unsigned int v57 = v38 - ((v60 & v38) >> v61);
      unsigned int v62 = (v60 & *v59) >> v61;
LABEL_66:
      unsigned int v38 = v57 + v62;
      break;
    case 2:
      char v63 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v39) << 56) >> 54));
      if (v12 < (unint64_t)v63) {
        char v63 = (unsigned int *)v12;
      }
      if (v63 < v36) {
        char v63 = v36;
      }
      int v64 = (v39 >> 28) & 3;
      int v65 = interpolate_8888_21358[v64];
      char v56 = v64 + 1;
      unsigned int v57 = v38 - ((v65 & v38) >> v56);
      unsigned int v58 = v65 & *v63;
LABEL_65:
      unsigned int v62 = v58 >> v56;
      goto LABEL_66;
    case 3:
      int64_t v43 = (unint64_t)HIWORD(v39) << 56;
      int64_t v44 = (unsigned int *)(v35 + (v43 >> 54));
      if (v12 < (unint64_t)v44) {
        int64_t v44 = (unsigned int *)v12;
      }
      if (v44 < v36) {
        int64_t v44 = v36;
      }
      unsigned int v45 = *v44;
      unint64_t v46 = v35 + SBYTE1(v39) * (uint64_t)v4;
      if (v12 >= v46) {
        unint64_t v47 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      }
      else {
        unint64_t v47 = (unsigned int *)v12;
      }
      if (v47 < v36) {
        unint64_t v47 = v36;
      }
      unsigned int v48 = *v47;
      unsigned int v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v12 < (unint64_t)v49) {
        unsigned int v49 = (unsigned int *)v12;
      }
      if (v49 < v36) {
        unsigned int v49 = v36;
      }
      unsigned int v50 = interpolate_8888_21358[v42];
      char v51 = v42 + 1;
      unsigned int v52 = v38 - ((v50 & v38) >> v51) + ((v50 & v48) >> v51);
      unsigned int v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      int v54 = (v39 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      char v56 = v54 + 1;
      unsigned int v57 = v52 - ((v52 & v55) >> v56);
      unsigned int v58 = v53 & v55;
      goto LABEL_65;
  }
LABEL_67:
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  a3 += v7;
  uint64_t v68 = v79 - a3;
  a2 += v6;
  uint64_t v69 = v40 - a2;
  while (1)
  {
    HIDWORD(v71) = HIBYTE(v38);
    LODWORD(v71) = v38;
    unint64_t v70 = (v71 >> 24);
    unint64_t v72 = (unint64_t)(v38 | (v38 << 8)) << 48;
    if (!v10) {
      unint64_t v72 = 0xFFFF000000000000;
    }
    *(void *)(v8 + 8 + 8 * v66) = v72 | ((unint64_t)(BYTE1(v38) | (BYTE1(v38) << 8)) << 32) | v38 & 0xFF0000 | (BYTE2(v38) << 24) | v70;
    *(unsigned char *)(v9 + 1 + v66) = v22 >> 22;
    if (a4 - 1 == v66) {
      return result;
    }
    if (((v68 | v69 | (a3 - v78) | (a2 - v77)) & 0x8000000000000000) != 0)
    {
      uint64_t v8 = v8 - v67 + 8;
      v9 += v66 + 1;
      a4 += ~v66;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v73 = v11 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v35 = v73 + 4 * (a2 >> 32);
    uint64_t v36 = *(unsigned int **)(result + 32);
    if (v12 >= v35) {
      uint64_t v74 = (unsigned int *)(v73 + 4 * (a2 >> 32));
    }
    else {
      uint64_t v74 = (unsigned int *)v12;
    }
    if (v74 < v36) {
      uint64_t v74 = *(unsigned int **)(result + 32);
    }
    unsigned int v38 = *v74;
    if (v5)
    {
      unsigned int v39 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v39 & 0xF) != 0)
      {
        uint64_t v8 = v8 - v67 + 8;
        v9 += v66 + 1;
        a4 += ~v66;
        unsigned int v22 = -1;
        goto LABEL_38;
      }
    }
    v67 -= 8;
    ++v66;
    a3 += v7;
    v68 -= v7;
    a2 += v6;
    v69 -= v6;
    unsigned int v22 = -1;
  }
}

uint64_t rgba64_sample_RGBA32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v73 = *(void *)(result + 80);
  uint64_t v76 = *(void *)(result + 72);
  uint64_t v77 = *(void *)(result + 88);
  uint64_t v6 = *(void *)(result + 112);
  uint64_t v7 = *(void *)(result + 120);
  uint64_t v8 = *(void *)(result + 152) - 8;
  uint64_t v9 = *(void *)(result + 144) - 1;
  uint64_t v11 = *(void *)(result + 32);
  uint64_t v10 = *(void *)(result + 40);
  int v74 = *(_DWORD *)(result + 188);
  unint64_t v12 = v11 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v75 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v76)
    {
      if ((uint64_t)a3 <= v77)
      {
        uint64_t v21 = (a3 >> 22) & 0x3C0;
        unsigned int v22 = 0x3FFFFFFF;
        HIDWORD(v23) = HIDWORD(a3);
        uint64_t v24 = v75;
      }
      else
      {
        uint64_t v17 = *(void *)(result + 216);
        uint64_t v18 = *(void *)(result + 224) + v77;
        uint64_t v19 = v18 - a3 + (v17 >> 1);
        if (v19 < 1) {
          goto LABEL_34;
        }
        if (v19 >= v17) {
          LODWORD(v20) = 0x3FFFFFFF;
        }
        else {
          unint64_t v20 = (unint64_t)(*(void *)(result + 232) * v19) >> 32;
        }
        uint64_t v24 = v75;
        unsigned int v22 = v74 | v20;
        uint64_t v23 = v18 - 0x1000000;
        uint64_t v21 = 448;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(result + 216);
      uint64_t v14 = v76 - *(void *)(result + 224);
      uint64_t v15 = a3 - v14 + (v13 >> 1);
      if (v15 < 1) {
        goto LABEL_34;
      }
      if (v15 >= v13) {
        LODWORD(v16) = 0x3FFFFFFF;
      }
      else {
        unint64_t v16 = (unint64_t)(*(void *)(result + 232) * v15) >> 32;
      }
      uint64_t v24 = v75;
      unsigned int v22 = v74 | v16;
      uint64_t v23 = v14 + 0x1000000;
      uint64_t v21 = 512;
    }
    if (a2 >= v24) {
      break;
    }
    uint64_t v25 = *(void *)(result + 192);
    uint64_t v26 = v24 - *(void *)(result + 200);
    uint64_t v27 = a2 - v26 + (v25 >> 1);
    if (v27 >= 1)
    {
      if (v27 < v25) {
        unsigned int v22 = ((v22 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v74;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v6;
    a3 += v7;
    v8 += 8;
    *(unsigned char *)++uint64_t v9 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v73)
  {
    uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v28 = a2;
    goto LABEL_26;
  }
  uint64_t v30 = *(void *)(result + 192);
  uint64_t v31 = *(void *)(result + 200) + v73;
  uint64_t v32 = v31 - a2 + (v30 >> 1);
  if (v32 < 1) {
    goto LABEL_34;
  }
  if (v32 < v30) {
    unsigned int v22 = ((v22 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v74;
  }
  uint64_t v28 = v31 - 0x1000000;
  uint64_t v29 = 28;
LABEL_26:
  if (v22 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v33 = v11 + SHIDWORD(v23) * (uint64_t)v4;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v33 + 4 * v34;
  uint64_t v36 = *(unsigned int **)(result + 32);
  if (v12 >= v35) {
    unint64_t v37 = (unsigned int *)(v33 + 4 * v34);
  }
  else {
    unint64_t v37 = (unsigned int *)v12;
  }
  if (v37 < v36) {
    unint64_t v37 = *(unsigned int **)(result + 32);
  }
  unsigned int v38 = bswap32(*v37);
  if (!v5)
  {
    uint64_t v40 = v73;
    goto LABEL_67;
  }
  unsigned int v39 = *(_DWORD *)(v5 + (v29 | v21));
LABEL_38:
  int v41 = v39 & 0xF;
  int v42 = HIBYTE(v39) & 3;
  uint64_t v40 = v73;
  switch(v41)
  {
    case 1:
      unsigned int v58 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      if (v12 < (unint64_t)v58) {
        unsigned int v58 = (unsigned int *)v12;
      }
      if (v58 < v36) {
        unsigned int v58 = v36;
      }
      int v59 = interpolate_8888_21358[v42];
      char v60 = v42 + 1;
      unsigned int v57 = v38 - ((v59 & v38) >> v60);
      unsigned int v61 = (bswap32(*v58) & v59) >> v60;
LABEL_66:
      unsigned int v38 = v57 + v61;
      break;
    case 2:
      unsigned int v62 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v39) << 56) >> 54));
      if (v12 < (unint64_t)v62) {
        unsigned int v62 = (unsigned int *)v12;
      }
      if (v62 < v36) {
        unsigned int v62 = v36;
      }
      unsigned int v53 = bswap32(*v62);
      int v63 = (v39 >> 28) & 3;
      int v55 = interpolate_8888_21358[v63];
      char v56 = v63 + 1;
      unsigned int v57 = v38 - ((v55 & v38) >> v56);
LABEL_65:
      unsigned int v61 = (v53 & v55) >> v56;
      goto LABEL_66;
    case 3:
      int64_t v43 = (unint64_t)HIWORD(v39) << 56;
      int64_t v44 = (unsigned int *)(v35 + (v43 >> 54));
      if (v12 < (unint64_t)v44) {
        int64_t v44 = (unsigned int *)v12;
      }
      if (v44 < v36) {
        int64_t v44 = v36;
      }
      unsigned int v45 = bswap32(*v44);
      unint64_t v46 = v35 + SBYTE1(v39) * (uint64_t)v4;
      if (v12 >= v46) {
        unint64_t v47 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      }
      else {
        unint64_t v47 = (unsigned int *)v12;
      }
      if (v47 < v36) {
        unint64_t v47 = v36;
      }
      unsigned int v48 = bswap32(*v47);
      unsigned int v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v12 < (unint64_t)v49) {
        unsigned int v49 = (unsigned int *)v12;
      }
      if (v49 < v36) {
        unsigned int v49 = v36;
      }
      int v50 = interpolate_8888_21358[v42];
      char v51 = v42 + 1;
      unsigned int v52 = v38 - ((v50 & v38) >> v51) + ((v50 & v48) >> v51);
      unsigned int v53 = v45 - ((v50 & v45) >> v51) + ((bswap32(*v49) & v50) >> v51);
      int v54 = (v39 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      char v56 = v54 + 1;
      unsigned int v57 = v52 - ((v52 & v55) >> v56);
      goto LABEL_65;
  }
LABEL_67:
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  a3 += v7;
  uint64_t v66 = v77 - a3;
  a2 += v6;
  uint64_t v67 = v40 - a2;
  while (1)
  {
    HIDWORD(v69) = HIBYTE(v38);
    LODWORD(v69) = v38;
    unint64_t v68 = (v69 >> 24);
    unint64_t v70 = (unint64_t)(v38 | (v38 << 8)) << 48;
    if (!v10) {
      unint64_t v70 = 0xFFFF000000000000;
    }
    *(void *)(v8 + 8 + 8 * v64) = v70 | ((unint64_t)(BYTE1(v38) | (BYTE1(v38) << 8)) << 32) | v38 & 0xFF0000 | (BYTE2(v38) << 24) | v68;
    *(unsigned char *)(v9 + 1 + v64) = v22 >> 22;
    if (a4 - 1 == v64) {
      return result;
    }
    if (((v66 | v67 | (a3 - v76) | (a2 - v75)) & 0x8000000000000000) != 0)
    {
      uint64_t v8 = v8 - v65 + 8;
      v9 += v64 + 1;
      a4 += ~v64;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v71 = v11 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v35 = v71 + 4 * (a2 >> 32);
    uint64_t v36 = *(unsigned int **)(result + 32);
    if (v12 >= v35) {
      unint64_t v72 = (unsigned int *)(v71 + 4 * (a2 >> 32));
    }
    else {
      unint64_t v72 = (unsigned int *)v12;
    }
    if (v72 < v36) {
      unint64_t v72 = *(unsigned int **)(result + 32);
    }
    unsigned int v38 = bswap32(*v72);
    if (v5)
    {
      unsigned int v39 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v39 & 0xF) != 0)
      {
        uint64_t v8 = v8 - v65 + 8;
        v9 += v64 + 1;
        a4 += ~v64;
        unsigned int v22 = -1;
        goto LABEL_38;
      }
    }
    v65 -= 8;
    ++v64;
    a3 += v7;
    v66 -= v7;
    a2 += v6;
    v67 -= v6;
    unsigned int v22 = -1;
  }
}

uint64_t rgba64_sample_RGB24(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  int v5 = *(_DWORD *)(result + 24);
  uint64_t v6 = *(void *)(result + 176);
  uint64_t v7 = *(void *)(result + 72);
  uint64_t v8 = *(void *)(result + 88);
  uint64_t v74 = *(void *)(result + 64);
  uint64_t v75 = *(void *)(result + 80);
  uint64_t v9 = *(void *)(result + 112);
  uint64_t v10 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 8;
  uint64_t v12 = *(void *)(result + 144) - 1;
  int v73 = *(_DWORD *)(result + 188);
  unint64_t v13 = v4 + (3 * *(_DWORD *)(result + 256)) + ((*(_DWORD *)(result + 260) - 1) * v5) - 3;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v8)
      {
        uint64_t v22 = (a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
        uint64_t v25 = v74;
        uint64_t v26 = v75;
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v8;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_34;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        uint64_t v25 = v74;
        uint64_t v26 = v75;
        unsigned int v23 = v73 | v21;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(result + 216);
      uint64_t v15 = v7 - *(void *)(result + 224);
      uint64_t v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1) {
        goto LABEL_34;
      }
      if (v16 >= v14) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v16) >> 32;
      }
      uint64_t v25 = v74;
      uint64_t v26 = v75;
      unsigned int v23 = v73 | v17;
      uint64_t v24 = v15 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v25) {
      break;
    }
    uint64_t v27 = *(void *)(result + 192);
    uint64_t v28 = v25 - *(void *)(result + 200);
    uint64_t v29 = a2 - v28 + (v27 >> 1);
    if (v29 >= 1)
    {
      if (v29 < v27) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v29) >> 32) >> 15)) | v73;
      }
      uint64_t v30 = v28 + 0x1000000;
      uint64_t v31 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v9;
    a3 += v10;
    v11 += 8;
    *(unsigned char *)++uint64_t v12 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v26)
  {
    uint64_t v31 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v30 = a2;
    goto LABEL_26;
  }
  uint64_t v32 = *(void *)(result + 192);
  uint64_t v33 = *(void *)(result + 200) + v26;
  uint64_t v34 = v33 - a2 + (v32 >> 1);
  if (v34 < 1) {
    goto LABEL_34;
  }
  if (v34 < v32) {
    unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v34) >> 32) >> 15)) | v73;
  }
  uint64_t v30 = v33 - 0x1000000;
  uint64_t v31 = 28;
LABEL_26:
  if (v23 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v35 = v4 + SHIDWORD(v24) * (uint64_t)v5;
  uint64_t v36 = 3 * (v30 >> 32);
  uint64_t v37 = v35 + v36;
  unsigned int v38 = *(unsigned __int8 **)(result + 32);
  if (v13 >= v35 + v36) {
    unsigned int v39 = (unsigned __int8 *)(v35 + v36);
  }
  else {
    unsigned int v39 = (unsigned __int8 *)v13;
  }
  if (v39 < v38) {
    unsigned int v39 = *(unsigned __int8 **)(result + 32);
  }
  unsigned int v40 = (v39[1] << 16) | (*v39 << 24) | (v39[2] << 8) | 0xFF;
  if (!v6) {
    goto LABEL_66;
  }
  unsigned int v41 = *(_DWORD *)(v6 + (v31 | v22));
LABEL_37:
  int v42 = v41 & 0xF;
  int v43 = HIBYTE(v41) & 3;
  switch(v42)
  {
    case 1:
      int v59 = (unsigned __int8 *)(v37 + SBYTE1(v41) * (uint64_t)v5);
      if (v13 < (unint64_t)v59) {
        int v59 = (unsigned __int8 *)v13;
      }
      if (v59 < v38) {
        int v59 = v38;
      }
      unsigned int v60 = interpolate_8888_21358[v43];
      char v61 = v43 + 1;
      unsigned int v58 = v40 - ((v60 & v40) >> v61);
      unsigned int v62 = (((v59[1] << 16) | (*v59 << 24) | (v59[2] << 8) | 0xFF) & v60) >> v61;
LABEL_65:
      unsigned int v40 = v58 + v62;
      break;
    case 2:
      int v63 = (unsigned __int8 *)(v37 + 3 * SBYTE2(v41));
      if (v13 < (unint64_t)v63) {
        int v63 = (unsigned __int8 *)v13;
      }
      if (v63 < v38) {
        int v63 = v38;
      }
      int v54 = (v63[1] << 16) | (*v63 << 24) | (v63[2] << 8) | 0xFF;
      int v64 = (v41 >> 28) & 3;
      unsigned int v56 = interpolate_8888_21358[v64];
      char v57 = v64 + 1;
      unsigned int v58 = v40 - ((v56 & v40) >> v57);
LABEL_64:
      unsigned int v62 = (v54 & v56) >> v57;
      goto LABEL_65;
    case 3:
      uint64_t v44 = 3 * SBYTE2(v41);
      unsigned int v45 = (unsigned __int8 *)(v37 + v44);
      if (v13 < v37 + v44) {
        unsigned int v45 = (unsigned __int8 *)v13;
      }
      if (v45 < v38) {
        unsigned int v45 = v38;
      }
      int v46 = (v45[1] << 16) | (*v45 << 24) | (v45[2] << 8) | 0xFF;
      unint64_t v47 = v37 + SBYTE1(v41) * (uint64_t)v5;
      if (v13 >= v47) {
        unsigned int v48 = (unsigned __int8 *)(v37 + SBYTE1(v41) * (uint64_t)v5);
      }
      else {
        unsigned int v48 = (unsigned __int8 *)v13;
      }
      if (v48 < v38) {
        unsigned int v48 = v38;
      }
      int v49 = (v48[1] << 16) | (*v48 << 24) | (v48[2] << 8) | 0xFF;
      int v50 = (unsigned __int8 *)(v47 + v44);
      if (v13 < (unint64_t)v50) {
        int v50 = (unsigned __int8 *)v13;
      }
      if (v50 < v38) {
        int v50 = v38;
      }
      unsigned int v51 = interpolate_8888_21358[v43];
      char v52 = v43 + 1;
      unsigned int v53 = v40 - ((v51 & v40) >> v52) + ((v49 & v51) >> v52);
      int v54 = v46 - ((v51 & v46) >> v52) + ((((v50[1] << 16) | (*v50 << 24) | (v50[2] << 8) | 0xFF) & v51) >> v52);
      int v55 = (v41 >> 28) & 3;
      unsigned int v56 = interpolate_8888_21358[v55];
      char v57 = v55 + 1;
      unsigned int v58 = v53 - ((v53 & v56) >> v57);
      goto LABEL_64;
  }
LABEL_66:
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  a3 += v10;
  uint64_t v67 = v8 - a3;
  a2 += v9;
  uint64_t v68 = v75 - a2;
  while (1)
  {
    HIDWORD(v69) = HIBYTE(v40);
    LODWORD(v69) = v40;
    *(void *)(v11 + 8 + 8 * v66) = ((unint64_t)(v40 | (v40 << 8)) << 48) | ((unint64_t)(BYTE1(v40) | (BYTE1(v40) << 8)) << 32) | v40 & 0xFF0000 | (BYTE2(v40) << 24) | (unint64_t)(v69 >> 24);
    *(unsigned char *)(v12 + 1 + v66) = v23 >> 22;
    if (a4 - 1 == v66) {
      return result;
    }
    if (((v67 | v68 | (a3 - v7) | (a2 - v74)) & 0x8000000000000000) != 0)
    {
      v12 += v66 + 1;
      uint64_t v11 = v11 - v65 + 8;
      a4 += ~v66;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v70 = v4 + SHIDWORD(a3) * (uint64_t)v5;
    uint64_t v71 = 3 * (a2 >> 32);
    uint64_t v37 = v70 + v71;
    unsigned int v38 = *(unsigned __int8 **)(result + 32);
    if (v13 >= v70 + v71) {
      unint64_t v72 = (unsigned __int8 *)(v70 + v71);
    }
    else {
      unint64_t v72 = (unsigned __int8 *)v13;
    }
    if (v72 < v38) {
      unint64_t v72 = *(unsigned __int8 **)(result + 32);
    }
    unsigned int v40 = (v72[1] << 16) | (*v72 << 24) | (v72[2] << 8) | 0xFF;
    if (v6)
    {
      unsigned int v41 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v41 & 0xF) != 0)
      {
        v12 += v66 + 1;
        uint64_t v11 = v11 - v65 + 8;
        a4 += ~v66;
        unsigned int v23 = -1;
        goto LABEL_37;
      }
    }
    ++v66;
    v65 -= 8;
    a3 += v10;
    v67 -= v10;
    a2 += v9;
    v68 -= v9;
    unsigned int v23 = -1;
  }
}

uint64_t rgba64_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2 = (uint64_t *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t)v3;
  BOOL v7 = 0;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *v2;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  *(_OWORD *)unsigned int v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *v3;
  if (!*((void *)v3 + 12))
  {
    if (*(void *)(v4 + 72)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = *(float *)(v4 + 4) >= 1.0;
    }
  }
  int v43 = 0;
  memset(v42, 0, sizeof(v42));
  int v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((void *)v3 + 6) == 0));
  if (v11 > 27) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(void *)(v5 + 16))
    {
      uint64_t v14 = rgba64_shade_radial_RGB;
    }
    else if (*(void *)(v5 + 24))
    {
      uint64_t v14 = rgba64_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      uint64_t v14 = rgba64_shade_axial_RGB;
    }
    else
    {
      uint64_t v14 = rgba64_shade_custom_RGB;
    }
    *(void *)&v17[0] = v14;
    if ((void)v40)
    {
      *((void *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 3, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    unint64_t v15 = *((void *)&v19 + 1) * v19;
    if ((uint64_t)(*((void *)&v19 + 1) * v19) <= 480)
    {
      uint64_t v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 3, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(unsigned char *)(v5 + 1)) {
        *(void *)&long long v39 = &_blt_shade_samples_noise;
      }
      goto LABEL_29;
    }
    uint64_t v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      unint64_t v15 = *((void *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)&v17[0]) {
    return 0xFFFFFFFFLL;
  }
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  rgba64_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1])) {
    free(v38[1]);
  }
  return 1;
}

void rgba64_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v409 = a3;
  uint64_t v419 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  uint64_t v404 = (int)v4;
  unint64_t v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  float v8 = *(float *)(a2 + 184);
  v414.i64[0] = *(void *)(a1 + 136);
  uint64_t v416 = *(void *)(a2 + 96);
  uint64_t v417 = *(void *)(a2 + 104);
  uint64_t v418 = v6;
  uint64_t v10 = *(int *)(a1 + 24);
  unint64_t v9 = *(int *)(a1 + 28);
  uint64_t v11 = *(int *)(a1 + 16);
  uint64_t v12 = *(int *)(a1 + 20);
  uint64_t v13 = *(int *)(a1 + 12);
  int v415 = *(_DWORD *)(a1 + 8);
  uint64_t v408 = a1;
  v411 = (void *)a2;
  uint64_t v14 = *(int *)(a2 + 16);
  uint64_t v15 = (v14 + 10) * v5;
  if (v15 > 65439)
  {
    long long v18 = (char *)malloc_type_calloc(1uLL, v15 + 96, 0x3023562EuLL);
    unint64_t v17 = v18;
    long long v20 = v18;
    long long v21 = v411;
    uint64_t v22 = v408;
    if (!v18) {
      return;
    }
  }
  else
  {
    MEMORY[0x1F4188790](a1, a4);
    unint64_t v17 = (char *)&v399 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v17, v16);
    long long v20 = 0;
    long long v21 = v411;
    uint64_t v22 = v408;
  }
  v401 = v20;
  int v410 = (int)(float)((float)(v8 * 65535.0) + 0.5);
  uint64_t v400 = v7 + (v10 - 1) * v9 + 8 * v12;
  unint64_t v23 = v9 >> 3;
  unint64_t v24 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v25 = v24 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v14) {
    uint64_t v26 = 8 * v5;
  }
  else {
    uint64_t v26 = 0;
  }
  unint64_t v27 = v25 + v26;
  v21[18] = v24;
  v21[19] = v25 + v26;
  v21[20] = v25;
  long long v28 = (uint32x2_t *)(v7 + 8 * (v13 + v23 * v11));
  uint64_t v29 = v404;
  unint64_t v399 = v9 >> 3;
  uint64_t v407 = v23 - v404;
  uint64_t v30 = *(int *)(v22 + 104);
  int v31 = *(_DWORD *)(v22 + 108);
  int v32 = *(unsigned __int8 *)(v22 + 2);
  if (v32 == 6 || v32 == 1)
  {
    uint64_t v33 = v416;
    uint64_t v34 = v417;
    if (!v414.i64[0]) {
      goto LABEL_475;
    }
    long long v35 = 0;
    int v36 = 0;
    uint64_t v37 = *(int *)(v408 + 124);
    unsigned int v38 = (unsigned __int8 *)(v414.i64[0] + v30 + (int)v37 * (uint64_t)v31);
    uint64_t v29 = v404;
    uint64_t v406 = v37 - v404;
    int v39 = v409;
    long long v40 = v411;
  }
  else
  {
    uint64_t v34 = v417;
    if (v414.i64[0])
    {
      shape_enum_clip_alloc((uint64_t)v18, v19, (int *)v414.i64[0], 1, 1, 1, v30, v31, v4, v415);
      long long v40 = v411;
      if (!v41) {
        goto LABEL_475;
      }
      int v36 = 0;
      uint64_t v42 = (int)((v14 * v5 + 15) & 0xFFFFFFF0);
      if (!v14) {
        uint64_t v42 = 8 * v5;
      }
      uint64_t v406 = -v404;
      unsigned int v38 = (unsigned __int8 *)(v27 + v42 + 16);
      int v39 = v409;
      uint64_t v33 = v416;
      long long v35 = v41;
      while (1)
      {
LABEL_478:
        while (1)
        {
          int v397 = *((_DWORD *)v38 - 4);
          int v398 = v397 - v36;
          if (v397 <= v36) {
            break;
          }
          v415 -= v398;
          if (v415 < 1) {
            goto LABEL_473;
          }
          v33 += v40[16] * v398;
          v34 += v40[17] * v398;
          v28 += v399 * v398;
          int v36 = v397;
        }
        if (v36 < *((_DWORD *)v38 - 3) + v397) {
          break;
        }
        if (!shape_enum_clip_scan((uint64_t)v35, (_DWORD *)v38 - 4)) {
          goto LABEL_473;
        }
      }
      uint64_t v29 = v404;
    }
    else
    {
      unsigned int v38 = 0;
      long long v35 = 0;
      uint64_t v406 = 0;
      int v36 = 0;
      int v39 = v409;
      long long v40 = v411;
      uint64_t v33 = v416;
    }
  }
  int v43 = v35;
  int v44 = v410 ^ 0xFFFF;
  int32x2_t v45 = vdup_n_s32(v410 ^ 0xFFFFu);
  uint64_t v403 = (v4 - 1) + 1;
  uint64_t v402 = -v29;
  unint64_t v405 = v400 - 8;
  int32x2_t v46 = vdup_n_s32(0x101u);
  uint64x2_t v414 = (uint64x2_t)xmmword_1850CDDF0;
  uint64_t v47 = v43;
  while (2)
  {
    int v412 = v36;
    v413 = v47;
    unsigned int v48 = (void (*)(void *, uint64_t, uint64_t, uint64_t))*v40;
    uint64_t v416 = v33;
    uint64_t v417 = v34;
    v48(v40, v33, v34, v4);
    int v49 = (uint32x2_t *)v40[20];
    int v50 = (unsigned char *)v40[18];
    unsigned int v51 = *((_DWORD *)v40 + 2);
    if (v51 == *((_DWORD *)v40 + 3))
    {
      if (v410 != 0xFFFF)
      {
        int v52 = v4;
        unsigned int v53 = (unsigned char *)v40[18];
        do
        {
          if (*v53)
          {
            unsigned int v54 = v49->u16[0] * v44 + 0x8000;
            unsigned int v55 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v44 + 0x8000;
            *int v49 = (uint32x2_t)(((HIWORD(*(unint64_t *)v49)
                                - ((HIWORD(*(unint64_t *)v49) * v44
                                  + 0x8000
                                  + ((HIWORD(*(unint64_t *)v49) * v44 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49) - ((v55 + HIWORD(v55)) >> 16)) << 32) | ((HIWORD(v49->u32[0]) - ((HIWORD(v49->u32[0]) * v44 + 0x8000 + ((HIWORD(v49->u32[0]) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(*(void *)v49 - ((v54 + HIWORD(v54)) >> 16)));
          }
          ++v53;
          ++v49;
          --v52;
        }
        while (v52);
        v49 += v402;
        v50 += v403 + v402;
      }
    }
    else
    {
      uint64_t v56 = v40[19];
      int v57 = HIWORD(v51) & 0x3F;
      if (v57 == 16)
      {
        if (v410 == 0xFFFF)
        {
          uint64_t v95 = 0;
          do
          {
            if (v50[v95]) {
              v49[v95] = *(uint32x2_t *)(v56 + 8 * v95);
            }
            ++v95;
          }
          while (v4 != v95);
        }
        else
        {
          uint64_t v73 = 0;
          do
          {
            if (v50[v73])
            {
              unint64_t v74 = *(void *)(v56 + 8 * v73);
              v49[v73] = (uint32x2_t)(((HIWORD(v74)
                                      - ((HIWORD(v74) * v44 + 0x8000 + ((HIWORD(v74) * v44 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v74) - ((WORD2(v74) * v44 + 0x8000 + ((WORD2(v74) * v44 + 0x8000) >> 16)) >> 16)) << 32) | ((WORD1(v74) - ((WORD1(v74) * v44 + 0x8000 + ((WORD1(v74) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v74 - (((unsigned __int16)v74 * v44 + 0x8000 + (((unsigned __int16)v74 * v44 + 0x8000) >> 16)) >> 16)));
            }
            ++v73;
          }
          while (v4 != v73);
        }
      }
      else if (v57 == 32)
      {
        if (v410 == 0xFFFF)
        {
          uint64_t v84 = 0;
          uint64_t v85 = (float *)(v56 + 8);
          do
          {
            if (v50[v84])
            {
              float v86 = v85[1];
              if (v86 <= 0.0)
              {
                unint64_t v91 = 0;
              }
              else
              {
                float v87 = *(v85 - 2);
                LODWORD(v88) = (int)(float)((float)(v86 * 65535.0) + 0.5);
                if (v86 <= 1.0) {
                  uint64_t v88 = v88;
                }
                else {
                  uint64_t v88 = 0xFFFFLL;
                }
                LOWORD(v89) = v88;
                if (v86 > 1.0) {
                  float v86 = 1.0;
                }
                LOWORD(v90) = v88;
                if (v87 <= v86)
                {
                  if (v87 >= 0.0) {
                    int v90 = (int)(float)((float)(v87 * 65535.0) + 0.5);
                  }
                  else {
                    LOWORD(v90) = 0;
                  }
                }
                float v92 = *(v85 - 1);
                int v93 = v88;
                if (v92 <= v86)
                {
                  if (v92 >= 0.0) {
                    int v93 = (int)(float)((float)(v92 * 65535.0) + 0.5);
                  }
                  else {
                    int v93 = 0;
                  }
                }
                float v94 = *v85;
                if (*v85 <= v86)
                {
                  if (v94 >= 0.0) {
                    int v89 = (int)(float)((float)(v94 * 65535.0) + 0.5);
                  }
                  else {
                    LOWORD(v89) = 0;
                  }
                }
                unint64_t v91 = (v88 << 48) | ((unint64_t)(unsigned __int16)v89 << 32) | (v93 << 16) | (unsigned __int16)v90;
              }
              v49[v84] = (uint32x2_t)v91;
            }
            v85 += 4;
            ++v84;
          }
          while (v4 != v84);
        }
        else
        {
          uint64_t v58 = 0;
          int v59 = (float *)(v56 + 8);
          do
          {
            if (v50[v58])
            {
              float v60 = v59[1];
              if (v60 <= 0.0)
              {
                unint64_t v65 = 0;
              }
              else
              {
                float v61 = *(v59 - 2);
                int v62 = (int)(float)((float)(v60 * 65535.0) + 0.5);
                if (v60 > 1.0) {
                  int v62 = 0xFFFF;
                }
                int v63 = v62;
                if (v60 > 1.0) {
                  float v60 = 1.0;
                }
                int v64 = v62;
                if (v61 <= v60)
                {
                  if (v61 >= 0.0) {
                    int v64 = (int)(float)((float)(v61 * 65535.0) + 0.5);
                  }
                  else {
                    int v64 = 0;
                  }
                }
                float v66 = *(v59 - 1);
                int v67 = v62;
                if (v66 <= v60)
                {
                  if (v66 >= 0.0) {
                    int v67 = (int)(float)((float)(v66 * 65535.0) + 0.5);
                  }
                  else {
                    int v67 = 0;
                  }
                }
                float v68 = *v59;
                if (*v59 <= v60)
                {
                  if (v68 >= 0.0) {
                    int v63 = (int)(float)((float)(v68 * 65535.0) + 0.5);
                  }
                  else {
                    int v63 = 0;
                  }
                }
                int v69 = v64 * v44;
                unsigned int v70 = v67 * v44;
                unsigned int v71 = v63 * v44;
                unsigned int v72 = v62 * v44;
                if ((v64 * v44) >= 0xFFFE8000) {
                  int v69 = -98304;
                }
                if (v70 >= 0xFFFE8000) {
                  unsigned int v70 = -98304;
                }
                if (v71 >= 0xFFFE8000) {
                  unsigned int v71 = -98304;
                }
                if (v72 >= 0xFFFE8000) {
                  unsigned int v72 = -98304;
                }
                unint64_t v65 = ((unint64_t)(v62 - ((v72 + 0x8000 + ((v72 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(v63 - ((v71 + 0x8000 + ((v71 + 0x8000) >> 16)) >> 16)) << 32) | ((v67 - ((v70 + 0x8000 + ((v70 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v64 - ((v69 + 0x8000 + ((v69 + 0x8000) >> 16)) >> 16));
              }
              v49[v58] = (uint32x2_t)v65;
            }
            v59 += 4;
            ++v58;
          }
          while (v4 != v58);
        }
      }
      else if (v410 == 0xFFFF)
      {
        uint64_t v96 = 0;
        do
        {
          if (v50[v96])
          {
            unint64_t v97 = *(unsigned int *)(v56 + 4 * v96);
            int v98 = *(_DWORD *)(v56 + 4 * v96);
            v49[v96] = (uint32x2_t)(((unint64_t)(v98 | (v98 << 8)) << 48) | ((unint64_t)(BYTE1(v97) | (BYTE1(v97) << 8)) << 32) | v97 & 0xFF0000 | (BYTE2(v97) << 24) | (v97 >> 24) | (v97 >> 24 << 8));
          }
          ++v96;
        }
        while (v4 != v96);
      }
      else
      {
        uint64_t v75 = 0;
        do
        {
          if (v50[v75])
          {
            unsigned __int32 v76 = *(_DWORD *)(v56 + 4 * v75);
            HIDWORD(v77) = HIBYTE(v76);
            LODWORD(v77) = v76;
            v78.i32[0] = v76 >> 8;
            v78.i32[1] = v76;
            int32x2_t v79 = vmul_s32((int32x2_t)vand_s8(v78, (int8x8_t)0xFF000000FFLL), v46);
            uint32x2_t v80 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v79, v45);
            int8x8_t v81 = vand_s8((int8x8_t)vsub_s32(v79, (int32x2_t)vshr_n_u32(vsra_n_u32(v80, v80, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v82.i64[0] = v81.u32[0];
            v82.i64[1] = v81.u32[1];
            int8x16_t v83 = (int8x16_t)vshlq_u64(v82, v414);
            v49[v75] = (uint32x2_t)(vorrq_s8(v83, (int8x16_t)vdupq_laneq_s64((int64x2_t)v83, 1)).u64[0] | (((BYTE2(v76) | (BYTE2(v76) << 8)) - (((BYTE2(v76) | (BYTE2(v76) << 8)) * v44 + 0x8000 + (((BYTE2(v76) | (BYTE2(v76) << 8)) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)((v77 >> 24) - (((v77 >> 24) * v44 + 0x8000 + (((v77 >> 24) * v44 + 0x8000) >> 16)) >> 16)));
          }
          ++v75;
        }
        while (v4 != v75);
      }
    }
    switch(v39)
    {
      case 0:
        int v99 = v4;
        uint64_t v100 = v38;
        uint64_t v101 = v416;
        uint64_t v102 = v417;
        do
        {
          int v103 = *v50;
          if (*v50)
          {
            if (v38) {
              int v103 = ((unsigned __int16)(*v100 * (_WORD)v103 + ((*v100 * v103) >> 8) + 1) >> 8);
            }
            if (v103)
            {
              if (v103 == 255)
              {
                uint32x2_t *v28 = 0;
              }
              else
              {
                int32x2_t v104 = (int32x2_t)*v28;
                v105.i32[0] = vshl_u32(*v28, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v106.i32[0] = v105.i32[0];
                v106.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v28);
                int32x2_t v107 = vdup_n_s32(v103 | (v103 << 8));
                v108.i32[0] = v28->u16[0];
                v108.i32[1] = HIWORD(*(unint64_t *)v28);
                uint32x2_t v109 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v106, v107);
                uint32x2_t v110 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v108, v107);
                v105.i32[1] = HIDWORD(*(unint64_t *)v28);
                uint32x2_t v111 = (uint32x2_t)vsub_s32(v105, (int32x2_t)vshr_n_u32(vsra_n_u32(v109, v109, 0x10uLL), 0x10uLL));
                v104.i32[1] = v108.i32[1];
                int8x8_t v112 = (int8x8_t)vsub_s32(v104, (int32x2_t)vshr_n_u32(vsra_n_u32(v110, v110, 0x10uLL), 0x10uLL));
                int8x8_t v113 = (int8x8_t)vshl_n_s32((int32x2_t)v112, 0x10uLL);
                v112.i16[1] = 0;
                v112.i32[1] = v113.i32[1];
                v113.i32[0] = vshl_u32(v111, (uint32x2_t)0xFFFF00000010).u32[0];
                v113.i32[1] = v111.u16[2];
                uint32x2_t *v28 = (uint32x2_t)vorr_s8(v113, v112);
              }
            }
          }
          ++v50;
          v100 += v38 != 0;
          ++v28;
          --v99;
        }
        while (v99);
        unsigned int v38 = &v100[v406];
        v28 += v407;
        goto LABEL_430;
      case 1:
        int v114 = *v50;
        if (v38)
        {
          __int16 v115 = v50 + 1;
          int v116 = v4;
          do
          {
            if (v114)
            {
              unsigned int v117 = *v38 * v114 + ((*v38 * v114) >> 8) + 1;
              v118 = (uint32x2_t *)v405;
              if (v405 >= (unint64_t)v28) {
                v118 = v28;
              }
              if ((unint64_t)v118 >= *(void *)(v408 + 40)) {
                unsigned __int16 v119 = v118;
              }
              else {
                unsigned __int16 v119 = *(uint32x2_t **)(v408 + 40);
              }
              if (BYTE1(v117))
              {
                if (BYTE1(v117) == 255) {
                  *unsigned __int16 v119 = *v49;
                }
                else {
                  rgba64_DMplusDM(v119, (unint64_t)*v49, (unsigned __int16)(257 * (v117 >> 8)), (unint64_t)*v119, (unsigned __int16)~(257 * (v117 >> 8)));
                }
              }
            }
            else
            {
              unsigned __int16 v119 = v28;
            }
            int v120 = *v115++;
            int v114 = v120;
            ++v49;
            ++v38;
            long long v28 = v119 + 1;
            --v116;
          }
          while (v116);
          v38 += v406;
          uint64_t v102 = v417;
        }
        else
        {
          v383 = v50 + 1;
          int v384 = v4;
          uint64_t v102 = v417;
          do
          {
            v385 = (uint32x2_t *)v405;
            if (v405 >= (unint64_t)v28) {
              v385 = v28;
            }
            if ((unint64_t)v385 >= *(void *)(v408 + 40)) {
              unsigned __int16 v119 = v385;
            }
            else {
              unsigned __int16 v119 = *(uint32x2_t **)(v408 + 40);
            }
            if (v114)
            {
              if (v114 == 255) {
                *unsigned __int16 v119 = *v49;
              }
              else {
                rgba64_DMplusDM(v119, (unint64_t)*v49, v114 | (v114 << 8), (unint64_t)*v119, (v114 | (v114 << 8)) ^ 0xFFFF);
              }
            }
            int v386 = *v383++;
            int v114 = v386;
            ++v49;
            long long v28 = v119 + 1;
            --v384;
          }
          while (v384);
          unsigned int v38 = 0;
        }
        long long v28 = &v119[v407 + 1];
        long long v40 = v411;
        uint64_t v101 = v416;
        goto LABEL_430;
      case 2:
        int v121 = *v50;
        if (v38)
        {
          unsigned __int16 v122 = v50 + 1;
          int v123 = v4;
          while (1)
          {
            uint64_t v124 = v28;
            if (!v121) {
              goto LABEL_145;
            }
            unsigned int v125 = *v38 * v121 + ((*v38 * v121) >> 8) + 1;
            if (!BYTE1(v125)) {
              goto LABEL_145;
            }
            if (BYTE1(v125) == 255)
            {
              uint64_t v126 = (uint64_t)*v49;
              unint64_t v127 = HIWORD(*(unint64_t *)v49);
              if (v127)
              {
                if (v127 != 0xFFFF)
                {
                  unint64_t v131 = (unint64_t)*v28;
                  int v132 = v127 ^ 0xFFFF;
                  goto LABEL_144;
                }
                uint32x2_t *v28 = (uint32x2_t)v126;
              }
            }
            else
            {
              unint64_t v129 = HIWORD(*(unint64_t *)v49);
              int v130 = (257 * (v125 >> 8)) ^ 0xFFFF;
              if ((_WORD)v129 != (v130 * v129 + 0x8000 + ((v130 * v129 + 0x8000) >> 16)) >> 16)
              {
                unint64_t v128 = (unint64_t)*v49;
                uint64_t v126 = ((unint64_t)(v129
                                         - ((v130 * v129 + 0x8000 + ((v130 * v129 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v128) - ((WORD2(v128) * v130 + 0x8000 + ((WORD2(v128) * v130 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v128 - (((unsigned __int16)v128 * v130 + 0x8000 + (((unsigned __int16)v128 * v130 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v128) - ((WORD1(v128) * v130 + 0x8000 + ((WORD1(v128) * v130 + 0x8000) >> 16)) >> 16)) << 16);
                unint64_t v131 = (unint64_t)*v28;
                int v132 = (unsigned __int16)~(v129
                                         - ((v130 * v129 + 0x8000 + ((v130 * v129 + 0x8000) >> 16)) >> 16));
LABEL_144:
                rgba64_DplusDM((uint16x4_t *)v28, v126, v131, v132);
              }
            }
LABEL_145:
            int v133 = *v122++;
            int v121 = v133;
            ++v49;
            ++v38;
            ++v28;
            if (!--v123)
            {
              v38 += v406;
LABEL_471:
              long long v28 = &v124[v407 + 1];
              goto LABEL_428;
            }
          }
        }
        v387 = v50 + 1;
        int v388 = v4;
        while (1)
        {
          if (v121)
          {
            if (v121 == 255)
            {
              uint64_t v389 = (uint64_t)*v49;
              unint64_t v390 = HIWORD(*(unint64_t *)v49);
              if (v390)
              {
                if (v390 != 0xFFFF)
                {
                  unint64_t v394 = (unint64_t)*v28;
                  int v395 = v390 ^ 0xFFFF;
                  goto LABEL_468;
                }
                uint32x2_t *v28 = (uint32x2_t)v389;
              }
            }
            else
            {
              unint64_t v392 = HIWORD(*(unint64_t *)v49);
              int v393 = (257 * v121) ^ 0xFFFF;
              if ((_WORD)v392 != (v393 * v392 + 0x8000 + ((v393 * v392 + 0x8000) >> 16)) >> 16)
              {
                unint64_t v391 = (unint64_t)*v49;
                uint64_t v389 = ((unint64_t)(v392
                                         - ((v393 * v392 + 0x8000 + ((v393 * v392 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v391) - ((WORD2(v391) * v393 + 0x8000 + ((WORD2(v391) * v393 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v391 - (((unsigned __int16)v391 * v393 + 0x8000 + (((unsigned __int16)v391 * v393 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v391) - ((WORD1(v391) * v393 + 0x8000 + ((WORD1(v391) * v393 + 0x8000) >> 16)) >> 16)) << 16);
                unint64_t v394 = (unint64_t)*v28;
                int v395 = (unsigned __int16)~(v392
                                         - ((v393 * v392 + 0x8000 + ((v393 * v392 + 0x8000) >> 16)) >> 16));
LABEL_468:
                rgba64_DplusDM((uint16x4_t *)v28, v389, v394, v395);
              }
            }
          }
          int v396 = *v387++;
          int v121 = v396;
          ++v49;
          ++v28;
          if (!--v388)
          {
            unsigned int v38 = 0;
            uint64_t v124 = v28 - 1;
            goto LABEL_471;
          }
        }
      case 3:
        int v134 = v4;
        int32x2_t v135 = v38;
        do
        {
          int v136 = *v50;
          if (*v50)
          {
            if (v38) {
              int v136 = ((unsigned __int16)(*v135 * (_WORD)v136 + ((*v135 * v136) >> 8) + 1) >> 8);
            }
            if (v136)
            {
              if (v136 == 255)
              {
                int32x2_t v137 = (int32x2_t)*v49;
                v138.i32[0] = vshl_u32(*v49, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v139.i32[0] = v138.i32[0];
                v139.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v49);
                int32x2_t v140 = vdup_n_s32(v28->u16[3] ^ 0xFFFFu);
                v141.i32[0] = v49->u16[0];
                v141.i32[1] = HIWORD(*(unint64_t *)v49);
                uint32x2_t v142 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v139, v140);
                uint32x2_t v143 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v141, v140);
                v138.i32[1] = HIDWORD(*(unint64_t *)v49);
                uint32x2_t v144 = (uint32x2_t)vsub_s32(v138, (int32x2_t)vshr_n_u32(vsra_n_u32(v142, v142, 0x10uLL), 0x10uLL));
                v137.i32[1] = v141.i32[1];
                int8x8_t v145 = (int8x8_t)vsub_s32(v137, (int32x2_t)vshr_n_u32(vsra_n_u32(v143, v143, 0x10uLL), 0x10uLL));
                int8x8_t v146 = (int8x8_t)vshl_n_s32((int32x2_t)v145, 0x10uLL);
                v145.i16[1] = 0;
                v145.i32[1] = v146.i32[1];
                v146.i32[0] = vshl_u32(v144, (uint32x2_t)0xFFFF00000010).u32[0];
                v146.i32[1] = v144.u16[2];
                uint32x2_t *v28 = (uint32x2_t)vorr_s8(v146, v145);
              }
              else
              {
                int v147 = v136 | (v136 << 8);
                unsigned int v148 = HIWORD(*(unint64_t *)v28) * v147 + 0x8000;
                rgba64_DMplusDM(v28, (unint64_t)*v49, (v148 + HIWORD(v148)) >> 16, (unint64_t)*v28, v147 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          ++v49;
          v135 += v38 != 0;
          ++v28;
          --v134;
        }
        while (v134);
        goto LABEL_166;
      case 4:
        int v149 = v4;
        int32x2_t v135 = v38;
        do
        {
          int v150 = *v50;
          if (*v50)
          {
            if (v38) {
              int v150 = ((unsigned __int16)(*v135 * (_WORD)v150 + ((*v135 * v150) >> 8) + 1) >> 8);
            }
            if (v150)
            {
              if (v150 == 255)
              {
                int32x2_t v151 = (int32x2_t)*v49;
                v152.i32[0] = vshl_u32(*v49, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v153.i32[0] = v152.i32[0];
                v153.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v49);
                int32x2_t v154 = vdup_n_s32(v28->u16[3]);
                v155.i32[0] = v49->u16[0];
                v155.i32[1] = HIWORD(*(unint64_t *)v49);
                uint32x2_t v156 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v153, v154);
                uint32x2_t v157 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v155, v154);
                v152.i32[1] = HIDWORD(*(unint64_t *)v49);
                uint32x2_t v158 = (uint32x2_t)vsub_s32(v152, (int32x2_t)vshr_n_u32(vsra_n_u32(v156, v156, 0x10uLL), 0x10uLL));
                v151.i32[1] = v155.i32[1];
                int8x8_t v159 = (int8x8_t)vsub_s32(v151, (int32x2_t)vshr_n_u32(vsra_n_u32(v157, v157, 0x10uLL), 0x10uLL));
                int8x8_t v160 = (int8x8_t)vshl_n_s32((int32x2_t)v159, 0x10uLL);
                v159.i16[1] = 0;
                v159.i32[1] = v160.i32[1];
                v160.i32[0] = vshl_u32(v158, (uint32x2_t)0xFFFF00000010).u32[0];
                v160.i32[1] = v158.u16[2];
                uint32x2_t *v28 = (uint32x2_t)vorr_s8(v160, v159);
              }
              else
              {
                int v161 = v150 | (v150 << 8);
                unsigned int v162 = (HIWORD(*(unint64_t *)v28) ^ 0xFFFF) * v161 + 0x8000;
                rgba64_DMplusDM(v28, (unint64_t)*v49, (v162 + HIWORD(v162)) >> 16, (unint64_t)*v28, v161 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          ++v49;
          v135 += v38 != 0;
          ++v28;
          --v149;
        }
        while (v149);
LABEL_166:
        unsigned int v38 = &v135[v406];
        goto LABEL_427;
      case 5:
        int v163 = v4;
        v164 = v38;
        do
        {
          int v165 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v165 = ((unsigned __int16)(*v164 * (_WORD)v165
                                                            + ((*v164 * v165) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              int v166 = (v165 | (v165 << 8)) ^ 0xFFFF;
              unsigned int v167 = v49->u16[0] * v166 + 0x8000;
              unsigned int v168 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v166 + 0x8000;
              unsigned __int16 v169 = *(void *)v49 - ((v167 + HIWORD(v167)) >> 16);
              unsigned int v170 = HIWORD(v49->u32[0])
                   - ((HIWORD(v49->u32[0]) * v166 + 0x8000 + ((HIWORD(v49->u32[0]) * v166 + 0x8000) >> 16)) >> 16);
              unint64_t v171 = HIWORD(*(unint64_t *)v49)
                   - ((v166 * HIWORD(*(unint64_t *)v49)
                     + 0x8000
                     + ((v166 * HIWORD(*(unint64_t *)v49) + 0x8000) >> 16)) >> 16);
              rgba64_DMplusDM(v28, (v171 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49)- ((v168 + HIWORD(v168)) >> 16)) << 32) | v169 | ((unsigned __int16)v170 << 16), HIWORD(*(unint64_t *)v28), (unint64_t)*v28, (unsigned __int16)~(_WORD)v171);
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v163;
        }
        while (v163);
        goto LABEL_426;
      case 6:
        int v172 = v4;
        v173 = v38;
        do
        {
          int v174 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v174 = ((unsigned __int16)(*v173 * (_WORD)v174
                                                            + ((*v173 * v174) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unint64_t v175 = HIWORD(*(unint64_t *)v28);
              if ((_WORD)v175 != 0xFFFF)
              {
                if ((unsigned __int16)~(_WORD)v175 == 0xFFFF)
                {
                  int32x2_t v176 = (int32x2_t)*v49;
                  v177.i32[0] = vshl_u32(*v49, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                  v178.i32[0] = v177.i32[0];
                  v178.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v49);
                  int32x2_t v179 = vdup_n_s32((v174 | (v174 << 8)) ^ 0xFFFFu);
                  v180.i32[0] = v49->u16[0];
                  v180.i32[1] = HIWORD(*(unint64_t *)v49);
                  uint32x2_t v181 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v178, v179);
                  uint32x2_t v182 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v180, v179);
                  v177.i32[1] = HIDWORD(*(unint64_t *)v49);
                  uint32x2_t v183 = (uint32x2_t)vsub_s32(v177, (int32x2_t)vshr_n_u32(vsra_n_u32(v181, v181, 0x10uLL), 0x10uLL));
                  v176.i32[1] = v180.i32[1];
                  int8x8_t v184 = (int8x8_t)vsub_s32(v176, (int32x2_t)vshr_n_u32(vsra_n_u32(v182, v182, 0x10uLL), 0x10uLL));
                  int8x8_t v185 = (int8x8_t)vshl_n_s32((int32x2_t)v184, 0x10uLL);
                  v184.i16[1] = 0;
                  v184.i32[1] = v185.i32[1];
                  v185.i32[0] = vshl_u32(v183, (uint32x2_t)0xFFFF00000010).u32[0];
                  v185.i32[1] = v183.u16[2];
                  uint32x2_t *v28 = (uint32x2_t)vorr_s8(v185, v184);
                }
                else
                {
                  rgba64_DplusDM((uint16x4_t *)v28, (uint64_t)*v28, (unint64_t)*v49, (257 * v174 * (unsigned __int16)~(_WORD)v175+ 0x8000+ ((257 * v174 * (unsigned __int16)~(_WORD)v175 + 0x8000) >> 16)) >> 16);
                }
              }
            }
          }
          ++v50;
          ++v49;
          v173 += v38 != 0;
          ++v28;
          --v172;
        }
        while (v172);
        unsigned int v38 = &v173[v406];
        v28 += v407;
        int v39 = v409;
        goto LABEL_429;
      case 7:
        int v186 = v4;
        v164 = v38;
        do
        {
          int v187 = *v50;
          if (*v50)
          {
            if (v38) {
              int v187 = ((unsigned __int16)(*v164 * (_WORD)v187 + ((*v164 * v187) >> 8) + 1) >> 8);
            }
            if (v187)
            {
              if (v187 == 255)
              {
                int32x2_t v188 = (int32x2_t)*v28;
                v189.i32[0] = vshl_u32(*v28, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v190.i32[0] = v189.i32[0];
                v190.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v28);
                int32x2_t v191 = vdup_n_s32(v49->u16[3] ^ 0xFFFFu);
                v192.i32[0] = v28->u16[0];
                v192.i32[1] = HIWORD(*(unint64_t *)v28);
                uint32x2_t v193 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v190, v191);
                uint32x2_t v194 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v192, v191);
                v189.i32[1] = HIDWORD(*(unint64_t *)v28);
                uint32x2_t v195 = (uint32x2_t)vsub_s32(v189, (int32x2_t)vshr_n_u32(vsra_n_u32(v193, v193, 0x10uLL), 0x10uLL));
                v188.i32[1] = v192.i32[1];
                int8x8_t v196 = (int8x8_t)vsub_s32(v188, (int32x2_t)vshr_n_u32(vsra_n_u32(v194, v194, 0x10uLL), 0x10uLL));
                int8x8_t v197 = (int8x8_t)vshl_n_s32((int32x2_t)v196, 0x10uLL);
                v196.i16[1] = 0;
                v196.i32[1] = v197.i32[1];
                v197.i32[0] = vshl_u32(v195, (uint32x2_t)0xFFFF00000010).u32[0];
                v197.i32[1] = v195.u16[2];
                uint32x2_t *v28 = (uint32x2_t)vorr_s8(v197, v196);
              }
              else
              {
                int v198 = v187 | (v187 << 8);
                unsigned int v199 = v49->u16[3] * v198 + 0x8000;
                rgba64_DMplusDM(v28, (unint64_t)*v28, (v199 + HIWORD(v199)) >> 16, (unint64_t)*v28, v198 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v186;
        }
        while (v186);
        goto LABEL_426;
      case 8:
        int v200 = v4;
        v164 = v38;
        do
        {
          int v201 = *v50;
          if (*v50)
          {
            if (v38) {
              int v201 = ((unsigned __int16)(*v164 * (_WORD)v201 + ((*v164 * v201) >> 8) + 1) >> 8);
            }
            if (v201)
            {
              if (v201 == 255)
              {
                int32x2_t v202 = (int32x2_t)*v28;
                v203.i32[0] = vshl_u32(*v28, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v204.i32[0] = v203.i32[0];
                v204.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v28);
                int32x2_t v205 = vdup_n_s32(v49->u16[3]);
                v206.i32[0] = v28->u16[0];
                v206.i32[1] = HIWORD(*(unint64_t *)v28);
                uint32x2_t v207 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v204, v205);
                uint32x2_t v208 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v206, v205);
                v203.i32[1] = HIDWORD(*(unint64_t *)v28);
                uint32x2_t v209 = (uint32x2_t)vsub_s32(v203, (int32x2_t)vshr_n_u32(vsra_n_u32(v207, v207, 0x10uLL), 0x10uLL));
                v202.i32[1] = v206.i32[1];
                int8x8_t v210 = (int8x8_t)vsub_s32(v202, (int32x2_t)vshr_n_u32(vsra_n_u32(v208, v208, 0x10uLL), 0x10uLL));
                int8x8_t v211 = (int8x8_t)vshl_n_s32((int32x2_t)v210, 0x10uLL);
                v210.i16[1] = 0;
                v210.i32[1] = v211.i32[1];
                v211.i32[0] = vshl_u32(v209, (uint32x2_t)0xFFFF00000010).u32[0];
                v211.i32[1] = v209.u16[2];
                uint32x2_t *v28 = (uint32x2_t)vorr_s8(v211, v210);
              }
              else
              {
                int v212 = v201 | (v201 << 8);
                unsigned int v213 = (v49->u16[3] ^ 0xFFFF) * v212 + 0x8000;
                rgba64_DMplusDM(v28, (unint64_t)*v28, (v213 + HIWORD(v213)) >> 16, (unint64_t)*v28, v212 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v200;
        }
        while (v200);
        goto LABEL_426;
      case 9:
        int v214 = v4;
        v164 = v38;
        do
        {
          int v215 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v215 = ((unsigned __int16)(*v164 * (_WORD)v215
                                                            + ((*v164 * v215) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned __int16 v216 = ~(v215 | ((_WORD)v215 << 8));
              int v217 = v216;
              unsigned int v218 = v49->u16[0] * v216 + 0x8000;
              unsigned int v219 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v216 + 0x8000;
              unsigned __int16 v220 = *(void *)v49 - ((v218 + HIWORD(v218)) >> 16);
              unsigned int v221 = HIWORD(v49->u32[0])
                   - ((HIWORD(v49->u32[0]) * v217 + 0x8000 + ((HIWORD(v49->u32[0]) * v217 + 0x8000) >> 16)) >> 16);
              unint64_t v222 = HIWORD(*(unint64_t *)v49)
                   - ((HIWORD(*(unint64_t *)v49) * v217
                     + 0x8000
                     + ((HIWORD(*(unint64_t *)v49) * v217 + 0x8000) >> 16)) >> 16);
              rgba64_DMplusDM(v28, (v222 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49)- ((v219 + HIWORD(v219)) >> 16)) << 32) | v220 | ((unsigned __int16)v221 << 16), HIWORD(*(unint64_t *)v28) ^ 0xFFFF, (unint64_t)*v28, (unsigned __int16)(v222 + v216));
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v214;
        }
        while (v214);
        goto LABEL_426;
      case 10:
        int v223 = v4;
        v164 = v38;
        do
        {
          int v224 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v224 = ((unsigned __int16)(*v164 * (_WORD)v224
                                                            + ((*v164 * v224) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              int v225 = (v224 | (v224 << 8)) ^ 0xFFFF;
              unsigned int v226 = v49->u16[0] * v225 + 0x8000;
              unsigned int v227 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v225 + 0x8000;
              unsigned __int16 v228 = *(void *)v49 - ((v226 + HIWORD(v226)) >> 16);
              LOWORD(v226) = HIWORD(v49->u32[0])
                           - ((HIWORD(v49->u32[0]) * v225
                             + 0x8000
                             + ((HIWORD(v49->u32[0]) * v225 + 0x8000) >> 16)) >> 16);
              unint64_t v229 = HIWORD(*(unint64_t *)v49)
                   - ((v225 * HIWORD(*(unint64_t *)v49)
                     + 0x8000
                     + ((v225 * HIWORD(*(unint64_t *)v49) + 0x8000) >> 16)) >> 16);
              rgba64_DMplusDM(v28, (v229 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49)- ((v227 + HIWORD(v227)) >> 16)) << 32) | v228 | ((unsigned __int16)v226 << 16), HIWORD(*(unint64_t *)v28) ^ 0xFFFF, (unint64_t)*v28, (unsigned __int16)~(_WORD)v229);
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v223;
        }
        while (v223);
        goto LABEL_426;
      case 11:
        int v230 = v4;
        v231 = v38;
        do
        {
          int v232 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v232 = ((unsigned __int16)(*v231 * (_WORD)v232
                                                            + ((*v231 * v232) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              int v233 = (v232 | (v232 << 8)) ^ 0xFFFF;
              unsigned int v234 = v49->u16[0] * v233 + 0x8000;
              unsigned int v235 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v233 + 0x8000;
              unsigned __int16 v236 = *(void *)v49 - ((v234 + HIWORD(v234)) >> 16);
              LOWORD(v234) = HIWORD(v49->u32[0])
                           - ((HIWORD(v49->u32[0]) * v233
                             + 0x8000
                             + ((HIWORD(v49->u32[0]) * v233 + 0x8000) >> 16)) >> 16);
              unint64_t v237 = (unsigned __int16)(HIWORD(*(unint64_t *)v49)
                                      - ((v233 * HIWORD(*(unint64_t *)v49)
                                        + 0x8000
                                        + ((v233 * HIWORD(*(unint64_t *)v49) + 0x8000) >> 16)) >> 16));
              unint64_t v238 = (v237 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49)
                                                                        - ((v235 + HIWORD(v235)) >> 16)) << 32);
              unint64_t v239 = v236 | ((unsigned __int16)v234 << 16);
              unint64_t v240 = *(unint64_t *)v28 >> 16;
              uint64x2_t v241 = (uint64x2_t)vdupq_n_s64(v238);
              if (v418) {
                unint64_t v242 = HIWORD(*(unint64_t *)v28);
              }
              else {
                unint64_t v242 = 0xFFFFLL;
              }
              int64x2_t v243 = vdupq_n_s64(0x20uLL);
              v243.i64[0] = v239;
              int8x16_t v244 = (int8x16_t)vshlq_u64(v241, (uint64x2_t)vnegq_s64(v243));
              v244.i64[0] = v239;
              unint64_t v245 = v242 - (unsigned __int16)v240;
              if (v242 < (unsigned __int16)v240) {
                unint64_t v245 = 0;
              }
              BOOL v246 = v237 >= v239 >> 16;
              unint64_t v247 = v237 - (v239 >> 16);
              if (!v246) {
                unint64_t v247 = 0;
              }
              unint64_t v248 = v247 + v245;
              unint64_t v249 = v242 + v237;
              if (v248 >= 0xFFFF) {
                unint64_t v248 = 0xFFFFLL;
              }
              if (v249 >= 0xFFFF) {
                unint64_t v249 = 0xFFFFLL;
              }
              BOOL v246 = v249 >= v248;
              unint64_t v250 = v249 - v248;
              if (!v246) {
                unint64_t v250 = 0;
              }
              v252.i64[0] = 0xFFFFLL;
              v252.i64[1] = 0xFFFFLL;
              v251.i64[1] = HIDWORD(*(unint64_t *)v28);
              *(uint32x2_t *)v251.i8 = *v28;
              int8x16_t v253 = (int8x16_t)vaddq_s64((int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v237), (uint64x2_t)vandq_s8(v244, v252)), (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v242), (uint64x2_t)vandq_s8(v251, v252)));
              int64x2_t v254 = vdupq_n_s64(v249);
              int64x2_t v255 = (int64x2_t)vqsubq_u64((uint64x2_t)v254, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v252, (uint64x2_t)v253), v253, v252));
              v254.i64[0] = v250;
              uint32x2_t *v28 = (uint32x2_t)vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v254), 0x10uLL), (int8x8_t)vmovn_s64(v255));
            }
          }
          ++v50;
          ++v49;
          v231 += v38 != 0;
          ++v28;
          --v230;
        }
        while (v230);
        unsigned int v38 = &v231[v406];
        v28 += v407;
        goto LABEL_429;
      case 12:
        int v256 = v4;
        v164 = v38;
        do
        {
          int v257 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v257 = ((unsigned __int16)(*v164 * (_WORD)v257
                                                            + ((*v164 * v257) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unint64_t v258 = HIWORD(*(unint64_t *)v49);
              int v259 = (v257 | (v257 << 8)) ^ 0xFFFF;
              unsigned int v260 = v49->u16[0] * v259 + 0x8000;
              unsigned int v261 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v259 + 0x8000;
              rgba64_DpluslD(v28, (unint64_t)*v28, ((unint64_t)(v258- ((v259 * v258 + 0x8000 + ((v259 * v258 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49) - ((v261 + HIWORD(v261)) >> 16)) << 32) | ((HIWORD(v49->u32[0]) - ((HIWORD(v49->u32[0]) * v259 + 0x8000 + ((HIWORD(v49->u32[0]) * v259 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(*(void *)v49 - ((v260 + HIWORD(v260)) >> 16)));
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v256;
        }
        while (v256);
        goto LABEL_426;
      case 13:
        int v262 = v4;
        v164 = v38;
        while (1)
        {
          int v263 = *v50;
          if (!*v50) {
            goto LABEL_256;
          }
          if (v38)
          {
            int v263 = ((unsigned __int16)(*v164 * (_WORD)v263 + ((*v164 * v263) >> 8) + 1) >> 8);
            if (!v263) {
              goto LABEL_256;
            }
          }
          unint64_t v265 = HIWORD(*(unint64_t *)v49);
          int v266 = (v263 | (v263 << 8)) ^ 0xFFFF;
          if ((_WORD)v265 == (v266 * v265 + 0x8000 + ((v266 * v265 + 0x8000) >> 16)) >> 16) {
            goto LABEL_256;
          }
          unint64_t v264 = (unint64_t)*v49;
          unint64_t v267 = ((unint64_t)(v265
                                   - ((v266 * v265 + 0x8000 + ((v266 * v265 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v264) - ((WORD2(v264) * v266 + 0x8000 + ((WORD2(v264) * v266 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v266 + 0x8000 + ((v49->u16[0] * v266 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v264) - ((WORD1(v264) * v266 + 0x8000 + ((WORD1(v264) * v266 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v268 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v269 = HIWORD(v268);
            if (!HIWORD(v268)) {
              goto LABEL_255;
            }
          }
          else
          {
            LODWORD(v269) = 0xFFFF;
          }
          unint64_t v267 = PDAmultiplyPDA_14785(v268, v269, v267, (unsigned __int16)(v265- ((v266 * v265 + 0x8000 + ((v266 * v265 + 0x8000) >> 16)) >> 16)));
LABEL_255:
          uint32x2_t *v28 = (uint32x2_t)v267;
LABEL_256:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v262) {
            goto LABEL_426;
          }
        }
      case 14:
        int v270 = v4;
        v164 = v38;
        while (1)
        {
          int v271 = *v50;
          if (!*v50) {
            goto LABEL_269;
          }
          if (v38)
          {
            int v271 = ((unsigned __int16)(*v164 * (_WORD)v271 + ((*v164 * v271) >> 8) + 1) >> 8);
            if (!v271) {
              goto LABEL_269;
            }
          }
          unint64_t v273 = HIWORD(*(unint64_t *)v49);
          int v274 = (v271 | (v271 << 8)) ^ 0xFFFF;
          if ((_WORD)v273 == (v274 * v273 + 0x8000 + ((v274 * v273 + 0x8000) >> 16)) >> 16) {
            goto LABEL_269;
          }
          unint64_t v272 = (unint64_t)*v49;
          unint64_t v275 = ((unint64_t)(v273
                                   - ((v274 * v273 + 0x8000 + ((v274 * v273 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v272) - ((WORD2(v272) * v274 + 0x8000 + ((WORD2(v272) * v274 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v274 + 0x8000 + ((v49->u16[0] * v274 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v272) - ((WORD1(v272) * v274 + 0x8000 + ((WORD1(v272) * v274 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v276 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v277 = HIWORD(v276);
            if (!HIWORD(v276)) {
              goto LABEL_268;
            }
          }
          else
          {
            LODWORD(v277) = 0xFFFF;
          }
          unint64_t v275 = PDAscreenPDA_14786(v276, v277, v275, (unsigned __int16)(v273- ((v274 * v273 + 0x8000 + ((v274 * v273 + 0x8000) >> 16)) >> 16)));
LABEL_268:
          uint32x2_t *v28 = (uint32x2_t)v275;
LABEL_269:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v270) {
            goto LABEL_426;
          }
        }
      case 15:
        int v278 = v4;
        v164 = v38;
        while (1)
        {
          int v279 = *v50;
          if (!*v50) {
            goto LABEL_282;
          }
          if (v38)
          {
            int v279 = ((unsigned __int16)(*v164 * (_WORD)v279 + ((*v164 * v279) >> 8) + 1) >> 8);
            if (!v279) {
              goto LABEL_282;
            }
          }
          unint64_t v281 = HIWORD(*(unint64_t *)v49);
          int v282 = (v279 | (v279 << 8)) ^ 0xFFFF;
          if ((_WORD)v281 == (v282 * v281 + 0x8000 + ((v282 * v281 + 0x8000) >> 16)) >> 16) {
            goto LABEL_282;
          }
          unint64_t v280 = (unint64_t)*v49;
          unint64_t v283 = ((unint64_t)(v281
                                   - ((v282 * v281 + 0x8000 + ((v282 * v281 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v280) - ((WORD2(v280) * v282 + 0x8000 + ((WORD2(v280) * v282 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v282 + 0x8000 + ((v49->u16[0] * v282 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v280) - ((WORD1(v280) * v282 + 0x8000 + ((WORD1(v280) * v282 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v284 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v285 = HIWORD(v284);
            if (!HIWORD(v284)) {
              goto LABEL_281;
            }
          }
          else
          {
            LODWORD(v285) = 0xFFFF;
          }
          unint64_t v283 = PDAoverlayPDA_14787(v284, v285, v283, (unsigned __int16)(v281- ((v282 * v281 + 0x8000 + ((v282 * v281 + 0x8000) >> 16)) >> 16)));
LABEL_281:
          uint32x2_t *v28 = (uint32x2_t)v283;
LABEL_282:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v278) {
            goto LABEL_426;
          }
        }
      case 16:
        int v286 = v4;
        v164 = v38;
        while (1)
        {
          int v287 = *v50;
          if (!*v50) {
            goto LABEL_295;
          }
          if (v38)
          {
            int v287 = ((unsigned __int16)(*v164 * (_WORD)v287 + ((*v164 * v287) >> 8) + 1) >> 8);
            if (!v287) {
              goto LABEL_295;
            }
          }
          unint64_t v289 = HIWORD(*(unint64_t *)v49);
          int v290 = (v287 | (v287 << 8)) ^ 0xFFFF;
          if ((_WORD)v289 == (v290 * v289 + 0x8000 + ((v290 * v289 + 0x8000) >> 16)) >> 16) {
            goto LABEL_295;
          }
          unint64_t v288 = (unint64_t)*v49;
          unint64_t v291 = ((unint64_t)(v289
                                   - ((v290 * v289 + 0x8000 + ((v290 * v289 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v288) - ((WORD2(v288) * v290 + 0x8000 + ((WORD2(v288) * v290 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v290 + 0x8000 + ((v49->u16[0] * v290 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v288) - ((WORD1(v288) * v290 + 0x8000 + ((WORD1(v288) * v290 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v292 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v293 = HIWORD(v292);
            if (!HIWORD(v292)) {
              goto LABEL_294;
            }
          }
          else
          {
            LODWORD(v293) = 0xFFFF;
          }
          unint64_t v291 = PDAdarkenPDA_14789(v292, v293, v291, (unsigned __int16)(v289- ((v290 * v289 + 0x8000 + ((v290 * v289 + 0x8000) >> 16)) >> 16)));
LABEL_294:
          uint32x2_t *v28 = (uint32x2_t)v291;
LABEL_295:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v286) {
            goto LABEL_426;
          }
        }
      case 17:
        int v294 = v4;
        v164 = v38;
        while (1)
        {
          int v295 = *v50;
          if (!*v50) {
            goto LABEL_308;
          }
          if (v38)
          {
            int v295 = ((unsigned __int16)(*v164 * (_WORD)v295 + ((*v164 * v295) >> 8) + 1) >> 8);
            if (!v295) {
              goto LABEL_308;
            }
          }
          unint64_t v297 = HIWORD(*(unint64_t *)v49);
          int v298 = (v295 | (v295 << 8)) ^ 0xFFFF;
          if ((_WORD)v297 == (v298 * v297 + 0x8000 + ((v298 * v297 + 0x8000) >> 16)) >> 16) {
            goto LABEL_308;
          }
          unint64_t v296 = (unint64_t)*v49;
          unint64_t v299 = ((unint64_t)(v297
                                   - ((v298 * v297 + 0x8000 + ((v298 * v297 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v296) - ((WORD2(v296) * v298 + 0x8000 + ((WORD2(v296) * v298 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v298 + 0x8000 + ((v49->u16[0] * v298 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v296) - ((WORD1(v296) * v298 + 0x8000 + ((WORD1(v296) * v298 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v300 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v301 = HIWORD(v300);
            if (!HIWORD(v300)) {
              goto LABEL_307;
            }
          }
          else
          {
            LODWORD(v301) = 0xFFFF;
          }
          unint64_t v299 = PDAlightenPDA_14788(v300, v301, v299, (unsigned __int16)(v297- ((v298 * v297 + 0x8000 + ((v298 * v297 + 0x8000) >> 16)) >> 16)));
LABEL_307:
          uint32x2_t *v28 = (uint32x2_t)v299;
LABEL_308:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v294) {
            goto LABEL_426;
          }
        }
      case 18:
        int v302 = v4;
        v164 = v38;
        while (1)
        {
          int v303 = *v50;
          if (!*v50) {
            goto LABEL_321;
          }
          if (v38)
          {
            int v303 = ((unsigned __int16)(*v164 * (_WORD)v303 + ((*v164 * v303) >> 8) + 1) >> 8);
            if (!v303) {
              goto LABEL_321;
            }
          }
          unint64_t v305 = HIWORD(*(unint64_t *)v49);
          int v306 = (v303 | (v303 << 8)) ^ 0xFFFF;
          if ((_WORD)v305 == (v306 * v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16) {
            goto LABEL_321;
          }
          unint64_t v304 = (unint64_t)*v49;
          unint64_t v307 = ((unint64_t)(v305
                                   - ((v306 * v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v304) - ((WORD2(v304) * v306 + 0x8000 + ((WORD2(v304) * v306 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v306 + 0x8000 + ((v49->u16[0] * v306 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v304) - ((WORD1(v304) * v306 + 0x8000 + ((WORD1(v304) * v306 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v308 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v309 = HIWORD(v308);
            if (!HIWORD(v308)) {
              goto LABEL_320;
            }
          }
          else
          {
            LODWORD(v309) = 0xFFFF;
          }
          unint64_t v307 = PDAcolordodgePDA_14790(v308, v309, v307, (unsigned __int16)(v305- ((v306 * v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16)));
LABEL_320:
          uint32x2_t *v28 = (uint32x2_t)v307;
LABEL_321:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v302) {
            goto LABEL_426;
          }
        }
      case 19:
        int v310 = v4;
        v164 = v38;
        while (1)
        {
          int v311 = *v50;
          if (!*v50) {
            goto LABEL_334;
          }
          if (v38)
          {
            int v311 = ((unsigned __int16)(*v164 * (_WORD)v311 + ((*v164 * v311) >> 8) + 1) >> 8);
            if (!v311) {
              goto LABEL_334;
            }
          }
          unint64_t v313 = HIWORD(*(unint64_t *)v49);
          int v314 = (v311 | (v311 << 8)) ^ 0xFFFF;
          if ((_WORD)v313 == (v314 * v313 + 0x8000 + ((v314 * v313 + 0x8000) >> 16)) >> 16) {
            goto LABEL_334;
          }
          unint64_t v312 = (unint64_t)*v49;
          unint64_t v315 = ((unint64_t)(v313
                                   - ((v314 * v313 + 0x8000 + ((v314 * v313 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v312) - ((WORD2(v312) * v314 + 0x8000 + ((WORD2(v312) * v314 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v314 + 0x8000 + ((v49->u16[0] * v314 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v312) - ((WORD1(v312) * v314 + 0x8000 + ((WORD1(v312) * v314 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v316 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v317 = HIWORD(v316);
            if (!HIWORD(v316)) {
              goto LABEL_333;
            }
          }
          else
          {
            LODWORD(v317) = 0xFFFF;
          }
          unint64_t v315 = PDAcolorburnPDA_14791(v316, v317, v315, (unsigned __int16)(v313- ((v314 * v313 + 0x8000 + ((v314 * v313 + 0x8000) >> 16)) >> 16)));
LABEL_333:
          uint32x2_t *v28 = (uint32x2_t)v315;
LABEL_334:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v310) {
            goto LABEL_426;
          }
        }
      case 20:
        int v318 = v4;
        v164 = v38;
        while (1)
        {
          int v319 = *v50;
          if (!*v50) {
            goto LABEL_347;
          }
          if (v38)
          {
            int v319 = ((unsigned __int16)(*v164 * (_WORD)v319 + ((*v164 * v319) >> 8) + 1) >> 8);
            if (!v319) {
              goto LABEL_347;
            }
          }
          unint64_t v321 = HIWORD(*(unint64_t *)v49);
          int v322 = (v319 | (v319 << 8)) ^ 0xFFFF;
          if ((_WORD)v321 == (v322 * v321 + 0x8000 + ((v322 * v321 + 0x8000) >> 16)) >> 16) {
            goto LABEL_347;
          }
          unint64_t v320 = (unint64_t)*v49;
          unint64_t v323 = ((unint64_t)(v321
                                   - ((v322 * v321 + 0x8000 + ((v322 * v321 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v320) - ((WORD2(v320) * v322 + 0x8000 + ((WORD2(v320) * v322 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v322 + 0x8000 + ((v49->u16[0] * v322 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v320) - ((WORD1(v320) * v322 + 0x8000 + ((WORD1(v320) * v322 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v324 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v325 = HIWORD(v324);
            if (!HIWORD(v324)) {
              goto LABEL_346;
            }
          }
          else
          {
            LODWORD(v325) = 0xFFFF;
          }
          unint64_t v323 = PDAsoftlightPDA_14793(v324, v325, v323, (unsigned __int16)(v321- ((v322 * v321 + 0x8000 + ((v322 * v321 + 0x8000) >> 16)) >> 16)));
LABEL_346:
          uint32x2_t *v28 = (uint32x2_t)v323;
LABEL_347:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v318) {
            goto LABEL_426;
          }
        }
      case 21:
        int v326 = v4;
        v164 = v38;
        while (1)
        {
          int v327 = *v50;
          if (!*v50) {
            goto LABEL_360;
          }
          if (v38)
          {
            int v327 = ((unsigned __int16)(*v164 * (_WORD)v327 + ((*v164 * v327) >> 8) + 1) >> 8);
            if (!v327) {
              goto LABEL_360;
            }
          }
          unint64_t v329 = HIWORD(*(unint64_t *)v49);
          int v330 = (v327 | (v327 << 8)) ^ 0xFFFF;
          if ((_WORD)v329 == (v330 * v329 + 0x8000 + ((v330 * v329 + 0x8000) >> 16)) >> 16) {
            goto LABEL_360;
          }
          unint64_t v328 = (unint64_t)*v49;
          unint64_t v331 = ((unint64_t)(v329
                                   - ((v330 * v329 + 0x8000 + ((v330 * v329 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v328) - ((WORD2(v328) * v330 + 0x8000 + ((WORD2(v328) * v330 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v330 + 0x8000 + ((v49->u16[0] * v330 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v328) - ((WORD1(v328) * v330 + 0x8000 + ((WORD1(v328) * v330 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v332 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v333 = HIWORD(v332);
            if (!HIWORD(v332)) {
              goto LABEL_359;
            }
          }
          else
          {
            LODWORD(v333) = 0xFFFF;
          }
          unint64_t v331 = PDAhardlightPDA_14792(v332, v333, v331, (unsigned __int16)(v329- ((v330 * v329 + 0x8000 + ((v330 * v329 + 0x8000) >> 16)) >> 16)));
LABEL_359:
          uint32x2_t *v28 = (uint32x2_t)v331;
LABEL_360:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v326) {
            goto LABEL_426;
          }
        }
      case 22:
        int v334 = v4;
        v164 = v38;
        while (1)
        {
          int v335 = *v50;
          if (!*v50) {
            goto LABEL_373;
          }
          if (v38)
          {
            int v335 = ((unsigned __int16)(*v164 * (_WORD)v335 + ((*v164 * v335) >> 8) + 1) >> 8);
            if (!v335) {
              goto LABEL_373;
            }
          }
          unint64_t v337 = HIWORD(*(unint64_t *)v49);
          int v338 = (v335 | (v335 << 8)) ^ 0xFFFF;
          if ((_WORD)v337 == (v338 * v337 + 0x8000 + ((v338 * v337 + 0x8000) >> 16)) >> 16) {
            goto LABEL_373;
          }
          unint64_t v336 = (unint64_t)*v49;
          unint64_t v339 = ((unint64_t)(v337
                                   - ((v338 * v337 + 0x8000 + ((v338 * v337 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v336) - ((WORD2(v336) * v338 + 0x8000 + ((WORD2(v336) * v338 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v338 + 0x8000 + ((v49->u16[0] * v338 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v336) - ((WORD1(v336) * v338 + 0x8000 + ((WORD1(v336) * v338 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v340 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v341 = HIWORD(v340);
            if (!HIWORD(v340)) {
              goto LABEL_372;
            }
          }
          else
          {
            LODWORD(v341) = 0xFFFF;
          }
          unint64_t v339 = PDAdifferencePDA_14794(v340, v341, v339, (unsigned __int16)(v337- ((v338 * v337 + 0x8000 + ((v338 * v337 + 0x8000) >> 16)) >> 16)));
LABEL_372:
          uint32x2_t *v28 = (uint32x2_t)v339;
LABEL_373:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v334) {
            goto LABEL_426;
          }
        }
      case 23:
        int v342 = v4;
        v164 = v38;
        while (1)
        {
          int v343 = *v50;
          if (!*v50) {
            goto LABEL_386;
          }
          if (v38)
          {
            int v343 = ((unsigned __int16)(*v164 * (_WORD)v343 + ((*v164 * v343) >> 8) + 1) >> 8);
            if (!v343) {
              goto LABEL_386;
            }
          }
          unint64_t v345 = HIWORD(*(unint64_t *)v49);
          int v346 = (v343 | (v343 << 8)) ^ 0xFFFF;
          if ((_WORD)v345 == (v346 * v345 + 0x8000 + ((v346 * v345 + 0x8000) >> 16)) >> 16) {
            goto LABEL_386;
          }
          unint64_t v344 = (unint64_t)*v49;
          unint64_t v347 = ((unint64_t)(v345
                                   - ((v346 * v345 + 0x8000 + ((v346 * v345 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v344) - ((WORD2(v344) * v346 + 0x8000 + ((WORD2(v344) * v346 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v346 + 0x8000 + ((v49->u16[0] * v346 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v344) - ((WORD1(v344) * v346 + 0x8000 + ((WORD1(v344) * v346 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v348 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v349 = HIWORD(v348);
            if (!HIWORD(v348)) {
              goto LABEL_385;
            }
          }
          else
          {
            LODWORD(v349) = 0xFFFF;
          }
          unint64_t v347 = PDAexclusionPDA_14795(v348, v349, v347, (unsigned __int16)(v345- ((v346 * v345 + 0x8000 + ((v346 * v345 + 0x8000) >> 16)) >> 16)));
LABEL_385:
          uint32x2_t *v28 = (uint32x2_t)v347;
LABEL_386:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v342) {
            goto LABEL_426;
          }
        }
      case 24:
        int v350 = v4;
        v164 = v38;
        while (1)
        {
          int v351 = *v50;
          if (!*v50) {
            goto LABEL_399;
          }
          if (v38)
          {
            int v351 = ((unsigned __int16)(*v164 * (_WORD)v351 + ((*v164 * v351) >> 8) + 1) >> 8);
            if (!v351) {
              goto LABEL_399;
            }
          }
          unint64_t v353 = HIWORD(*(unint64_t *)v49);
          int v354 = (v351 | (v351 << 8)) ^ 0xFFFF;
          if ((_WORD)v353 == (v354 * v353 + 0x8000 + ((v354 * v353 + 0x8000) >> 16)) >> 16) {
            goto LABEL_399;
          }
          unint64_t v352 = (unint64_t)*v49;
          unint64_t v355 = ((unint64_t)(v353
                                   - ((v354 * v353 + 0x8000 + ((v354 * v353 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v352) - ((WORD2(v352) * v354 + 0x8000 + ((WORD2(v352) * v354 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v354 + 0x8000 + ((v49->u16[0] * v354 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v352) - ((WORD1(v352) * v354 + 0x8000 + ((WORD1(v352) * v354 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v356 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v357 = HIWORD(v356);
            if (!HIWORD(v356)) {
              goto LABEL_398;
            }
          }
          else
          {
            LODWORD(v357) = 0xFFFF;
          }
          unint64_t v355 = PDAhuePDA_14796(v356, v357, v355, (unsigned __int16)(v353- ((v354 * v353 + 0x8000 + ((v354 * v353 + 0x8000) >> 16)) >> 16)));
LABEL_398:
          uint32x2_t *v28 = (uint32x2_t)v355;
LABEL_399:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v350) {
            goto LABEL_426;
          }
        }
      case 25:
        int v358 = v4;
        v164 = v38;
        while (1)
        {
          int v359 = *v50;
          if (!*v50) {
            goto LABEL_412;
          }
          if (v38)
          {
            int v359 = ((unsigned __int16)(*v164 * (_WORD)v359 + ((*v164 * v359) >> 8) + 1) >> 8);
            if (!v359) {
              goto LABEL_412;
            }
          }
          unint64_t v361 = HIWORD(*(unint64_t *)v49);
          int v362 = (v359 | (v359 << 8)) ^ 0xFFFF;
          if ((_WORD)v361 == (v362 * v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16) {
            goto LABEL_412;
          }
          unint64_t v360 = (unint64_t)*v49;
          unint64_t v363 = ((unint64_t)(v361
                                   - ((v362 * v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v360) - ((WORD2(v360) * v362 + 0x8000 + ((WORD2(v360) * v362 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v362 + 0x8000 + ((v49->u16[0] * v362 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v360) - ((WORD1(v360) * v362 + 0x8000 + ((WORD1(v360) * v362 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v364 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v365 = HIWORD(v364);
            if (!HIWORD(v364)) {
              goto LABEL_411;
            }
          }
          else
          {
            LODWORD(v365) = 0xFFFF;
          }
          unint64_t v363 = PDAsaturationPDA_14797(v364, v365, v363, (unsigned __int16)(v361- ((v362 * v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16)));
LABEL_411:
          uint32x2_t *v28 = (uint32x2_t)v363;
LABEL_412:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v358) {
            goto LABEL_426;
          }
        }
      case 26:
        int v366 = v4;
        v164 = v38;
        while (1)
        {
          int v367 = *v50;
          if (!*v50) {
            goto LABEL_425;
          }
          if (v38)
          {
            int v367 = ((unsigned __int16)(*v164 * (_WORD)v367 + ((*v164 * v367) >> 8) + 1) >> 8);
            if (!v367) {
              goto LABEL_425;
            }
          }
          unint64_t v369 = HIWORD(*(unint64_t *)v49);
          int v370 = (v367 | (v367 << 8)) ^ 0xFFFF;
          if ((_WORD)v369 == (v370 * v369 + 0x8000 + ((v370 * v369 + 0x8000) >> 16)) >> 16) {
            goto LABEL_425;
          }
          unint64_t v368 = (unint64_t)*v49;
          unint64_t v371 = ((unint64_t)(v369
                                   - ((v370 * v369 + 0x8000 + ((v370 * v369 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v368) - ((WORD2(v368) * v370 + 0x8000 + ((WORD2(v368) * v370 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v370 + 0x8000 + ((v49->u16[0] * v370 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v368) - ((WORD1(v368) * v370 + 0x8000 + ((WORD1(v368) * v370 + 0x8000) >> 16)) >> 16)) << 16);
          unint64_t v372 = (unint64_t)*v28;
          if (v418)
          {
            unint64_t v373 = HIWORD(v372);
            if (!HIWORD(v372)) {
              goto LABEL_424;
            }
          }
          else
          {
            LODWORD(v373) = 0xFFFF;
          }
          unint64_t v371 = PDAluminosityPDA_14798(v371, (unsigned __int16)(v369- ((v370 * v369 + 0x8000 + ((v370 * v369 + 0x8000) >> 16)) >> 16)), v372, v373);
LABEL_424:
          uint32x2_t *v28 = (uint32x2_t)v371;
LABEL_425:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v366)
          {
LABEL_426:
            unsigned int v38 = &v164[v406];
            goto LABEL_427;
          }
        }
      case 27:
        v374 = v38;
        int v375 = v4;
        break;
      default:
        goto LABEL_429;
    }
    do
    {
      int v376 = *v50;
      if (*v50)
      {
        if (!v38
          || (int v376 = ((unsigned __int16)(*v374 * (_WORD)v376 + ((*v374 * v376) >> 8) + 1) >> 8)) != 0)
        {
          unint64_t v378 = HIWORD(*(unint64_t *)v49);
          int v379 = (v376 | (v376 << 8)) ^ 0xFFFF;
          if ((_WORD)v378 != (v379 * v378 + 0x8000 + ((v379 * v378 + 0x8000) >> 16)) >> 16)
          {
            unint64_t v377 = (unint64_t)*v49;
            unint64_t v380 = ((unint64_t)(v378
                                     - ((v379 * v378 + 0x8000 + ((v379 * v378 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v377) - ((WORD2(v377) * v379 + 0x8000 + ((WORD2(v377) * v379 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v49->u16[0] * v379 + 0x8000 + ((v49->u16[0] * v379 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v377) - ((WORD1(v377) * v379 + 0x8000 + ((WORD1(v377) * v379 + 0x8000) >> 16)) >> 16)) << 16);
            unint64_t v381 = (unint64_t)*v28;
            if (v418)
            {
              unint64_t v382 = HIWORD(v381);
              if (!HIWORD(v381)) {
                goto LABEL_443;
              }
            }
            else
            {
              LODWORD(v382) = 0xFFFF;
            }
            unint64_t v380 = PDAluminosityPDA_14798(v381, v382, v380, (unsigned __int16)(v378- ((v379 * v378 + 0x8000 + ((v379 * v378 + 0x8000) >> 16)) >> 16)));
LABEL_443:
            uint32x2_t *v28 = (uint32x2_t)v380;
          }
        }
      }
      ++v50;
      ++v49;
      v374 += v38 != 0;
      ++v28;
      --v375;
    }
    while (v375);
    unsigned int v38 = &v374[v406];
LABEL_427:
    v28 += v407;
    int v39 = v409;
LABEL_428:
    long long v40 = v411;
LABEL_429:
    uint64_t v101 = v416;
    uint64_t v102 = v417;
LABEL_430:
    if (--v415)
    {
      uint64_t v47 = 0;
      int v36 = v412 + 1;
      uint64_t v33 = v40[16] + v101;
      uint64_t v34 = v40[17] + v102;
      if (v413)
      {
        long long v35 = v413;
        goto LABEL_478;
      }
      continue;
    }
    break;
  }
  long long v35 = v413;
LABEL_473:
  if (v35) {
    free(v35);
  }
LABEL_475:
  if (v401) {
    free(v401);
  }
}

_DWORD *rgba64_DMplusDM(_DWORD *result, unint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5)
{
  unint64_t v5 = (unsigned __int16)a2 * (unint64_t)a3 + (unsigned __int16)a4 * (unint64_t)a5;
  unint64_t v6 = WORD1(a2) * (unint64_t)a3 + WORD1(a4) * (unint64_t)a5;
  unint64_t v7 = WORD2(a2) * (unint64_t)a3 + WORD2(a4) * (unint64_t)a5;
  unint64_t v8 = HIWORD(a2) * a3 + HIWORD(a4) * a5;
  if (v5 >= 0xFFFE8000) {
    unint64_t v5 = 4294868992;
  }
  if (v6 >= 0xFFFE8000) {
    unint64_t v6 = 4294868992;
  }
  if (v7 >= 0xFFFE8000) {
    unint64_t v7 = 4294868992;
  }
  if (v8 >= 0xFFFE8000) {
    unint64_t v8 = 4294868992;
  }
  unint64_t *result = (((v6 + 0x8000) >> 16) + v6 + 0x8000) & 0xFFFF0000 | ((((v5 + 0x8000) >> 16)
                                                                 + v5
                                                                 + 0x8000) >> 16);
  result[1] = (((v8 + 0x8000) >> 16) + v8 + 0x8000) & 0xFFFF0000 | ((((v7 + 0x8000) >> 16)
                                                                   + v7
                                                                   + 0x8000) >> 16);
  return result;
}

uint16x4_t rgba64_DplusDM(uint16x4_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint16x4_t result = vqadd_u16((uint16x4_t)a2, (uint16x4_t)(((HIWORD(a3) * a4 + 0x8000 + ((HIWORD(a3) * a4 + 0x8000) >> 16)) >> 16 << 48) | ((unint64_t)((WORD2(a3) * a4 + 0x8000 + ((WORD2(a3) * a4 + 0x8000) >> 16)) >> 16) << 32) | (WORD1(a3) * a4 + 0x8000 + ((WORD1(a3) * a4 + 0x8000) >> 16)) & 0xFFFF0000 | (unint64_t)(((unsigned __int16)a3 * a4 + 0x8000 + (((unsigned __int16)a3 * a4 + 0x8000) >> 16)) >> 16)));
  *a1 = result;
  return result;
}

_DWORD *rgba64_DpluslD(_DWORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = (unsigned __int16)a3 + (unint64_t)(unsigned __int16)a2;
  unint64_t v4 = WORD1(a3) + (unint64_t)WORD1(a2);
  unint64_t v5 = WORD2(a3) + (unint64_t)WORD2(a2);
  unint64_t v6 = HIWORD(a3) + HIWORD(a2);
  if (v3 >= 0xFFFF) {
    LODWORD(v3) = 0xFFFF;
  }
  if (v4 >= 0xFFFF) {
    LODWORD(v4) = 0xFFFF;
  }
  if (v5 >= 0xFFFF) {
    LODWORD(v5) = 0xFFFF;
  }
  if (v6 >= 0xFFFF) {
    LODWORD(v6) = 0xFFFF;
  }
  unint64_t *result = v3 | (v4 << 16);
  result[1] = v5 | (v6 << 16);
  return result;
}

unint64_t PDAmultiplyPDA_14785(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = ((a4 ^ 0xFFFF) + WORD2(a3)) * (unint64_t)WORD2(a1);
  unint64_t v5 = ((a4 ^ 0xFFFF) + WORD1(a3)) * (unint64_t)WORD1(a1);
  unint64_t v6 = ((a4 ^ 0xFFFF) + (unsigned __int16)a3) * (unint64_t)(unsigned __int16)a1;
  if (a2 != 0xFFFF)
  {
    v5 += WORD1(a3) * (unint64_t)(a2 ^ 0xFFFF);
    v4 += WORD2(a3) * (unint64_t)(a2 ^ 0xFFFF);
    v6 += (unsigned __int16)a3 * (unint64_t)(a2 ^ 0xFFFF);
  }
  int64_t v7 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v6 <= 0xFFFE8000) {
    unint64_t v8 = v6 + 0x8000;
  }
  else {
    unint64_t v8 = 4294868992;
  }
  uint64_t v9 = ((v8 >> 16) + v8) >> 16;
  if (v5 <= 0xFFFE8000) {
    unint64_t v10 = v5 + 0x8000;
  }
  else {
    unint64_t v10 = 4294868992;
  }
  int v11 = (v10 >> 16) + v10;
  if (v7 <= 4294868992) {
    unint64_t v12 = v7 + 0x8000;
  }
  else {
    unint64_t v12 = 4294868992;
  }
  unint64_t v13 = (unint64_t)((v12 >> 16) + v12) >> 16;
  uint64_t v14 = (65537 * v4 + 2147516416u) & 0xFFFF00000000;
  BOOL v15 = v4 > 0xFFFE8000;
  uint64_t v16 = 0xFFFF00000000;
  if (!v15) {
    uint64_t v16 = v14;
  }
  return v16 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v13 << 48) | v11 & 0xFFFF0000 | v9;
}

unint64_t PDAscreenPDA_14786(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = (unsigned __int16)a3 * (unint64_t)((unsigned __int16)a1 ^ 0xFFFFu)
     - (unsigned __int16)a1
     + ((unint64_t)(unsigned __int16)a1 << 16);
  unint64_t v5 = WORD1(a3) * (unint64_t)(WORD1(a1) ^ 0xFFFFu) - WORD1(a1) + ((unint64_t)WORD1(a1) << 16);
  unint64_t v6 = WORD2(a3) * (unint64_t)(WORD2(a1) ^ 0xFFFFu) - WORD2(a1) + ((unint64_t)WORD2(a1) << 16);
  int64_t v7 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v4 <= 0xFFFE8000) {
    unint64_t v8 = v4 + 0x8000;
  }
  else {
    unint64_t v8 = 4294868992;
  }
  uint64_t v9 = ((v8 >> 16) + v8) >> 16;
  if (v5 <= 0xFFFE8000) {
    unint64_t v10 = v5 + 0x8000;
  }
  else {
    unint64_t v10 = 4294868992;
  }
  int v11 = (v10 >> 16) + v10;
  if (v7 <= 4294868992) {
    unint64_t v12 = v7 + 0x8000;
  }
  else {
    unint64_t v12 = 4294868992;
  }
  unint64_t v13 = (unint64_t)((v12 >> 16) + v12) >> 16;
  uint64_t v14 = (65537 * v6 + 2147516416u) & 0xFFFF00000000;
  BOOL v15 = v6 > 0xFFFE8000;
  uint64_t v16 = 0xFFFF00000000;
  if (!v15) {
    uint64_t v16 = v14;
  }
  return v11 & 0xFFFF0000 | v16 & 0xFFFFFFFFFFFFLL | v9 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v13 << 48);
}

unint64_t PDAoverlayPDA_14787(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = WORD1(a1);
  unint64_t v5 = WORD2(a1);
  unsigned int v6 = (unsigned __int16)a3;
  unint64_t v7 = WORD1(a3);
  unint64_t v8 = WORD2(a3);
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    unsigned int v6 = a4;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = (unsigned __int16)a1;
  }
  unint64_t v10 = 2 * v9 * (unint64_t)v6;
  if (v7 >= a4) {
    unsigned int v11 = a4;
  }
  else {
    unsigned int v11 = v7;
  }
  if (v4 >= a2) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = v4;
  }
  if (v8 >= a4) {
    unsigned int v13 = a4;
  }
  else {
    unsigned int v13 = v8;
  }
  if (v5 >= a2) {
    unint64_t v5 = a2;
  }
  unint64_t v14 = a4 * (unint64_t)a2;
  unint64_t v15 = ((unint64_t)a2 + 1) >> 1;
  if (v9 >= v15) {
    int64_t v16 = (a4 + 0xFFFF) * (unint64_t)v9 + v6 * (unint64_t)(a2 + 0xFFFF) - (v14 + v10);
  }
  else {
    int64_t v16 = v6 * (unint64_t)(a2 ^ 0xFFFF) + (a4 ^ 0xFFFF) * (unint64_t)v9 + v10;
  }
  unint64_t v17 = 2 * v12 * (unint64_t)v11;
  if (v12 >= v15) {
    int64_t v18 = (a4 + 0xFFFF) * (unint64_t)v12 + v11 * (unint64_t)(a2 + 0xFFFF) - (v14 + v17);
  }
  else {
    int64_t v18 = v11 * (unint64_t)(a2 ^ 0xFFFF) + (a4 ^ 0xFFFF) * (unint64_t)v12 + v17;
  }
  unint64_t v19 = 2 * v5 * (unint64_t)v13;
  if (v5 >= v15) {
    int64_t v20 = (a4 + 0xFFFF) * (unint64_t)v5 + v13 * (unint64_t)(a2 + 0xFFFF) - (v14 + v19);
  }
  else {
    int64_t v20 = v13 * (unint64_t)(a2 ^ 0xFFFF) + (a4 ^ 0xFFFF) * (unint64_t)v5 + v19;
  }
  uint64_t v21 = 0xFFFF * (a4 + (unint64_t)a2) - v14;
  unint64_t v22 = v16 + 0x8000;
  if (v16 > 4294868992) {
    unint64_t v22 = 4294868992;
  }
  uint64_t v23 = ((v22 >> 16) + v22) >> 16;
  unint64_t v24 = v18 + 0x8000;
  if (v18 > 4294868992) {
    unint64_t v24 = 4294868992;
  }
  int v25 = (v24 >> 16) + v24;
  if (v21 <= 4294868992) {
    unint64_t v26 = v21 + 0x8000;
  }
  else {
    unint64_t v26 = 4294868992;
  }
  uint64_t v27 = (v26 >> 16) + v26;
  uint64_t v28 = 0xFFFF00000000;
  if (v20 <= 4294868992) {
    uint64_t v28 = (65537 * v20 + 2147516416) & 0xFFFF00000000;
  }
  return (v23 | (v27 << 32)) & 0xFFFF00000000FFFFLL | v25 & 0xFFFF0000 | (unint64_t)v28;
}

unint64_t PDAlightenPDA_14788(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = (unsigned __int16)a1;
  unsigned int v5 = WORD1(a1);
  unsigned int v6 = WORD2(a1);
  unsigned int v7 = (unsigned __int16)a3;
  unsigned int v8 = WORD1(a3);
  unsigned int v9 = WORD2(a3);
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    unsigned int v7 = a4;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    unsigned int v4 = a2;
  }
  unint64_t v10 = v4 * (unint64_t)a4;
  if (v7 * (unint64_t)a2 > v10) {
    unint64_t v10 = v7 * (unint64_t)a2;
  }
  if (WORD1(a3) >= (unint64_t)a4) {
    unsigned int v8 = a4;
  }
  if (WORD1(a1) >= (unint64_t)a2) {
    unsigned int v5 = a2;
  }
  unint64_t v11 = v5 * (unint64_t)a4;
  if (v8 * (unint64_t)a2 > v11) {
    unint64_t v11 = v8 * (unint64_t)a2;
  }
  if (WORD2(a3) >= (unint64_t)a4) {
    unsigned int v9 = a4;
  }
  if (WORD2(a1) >= (unint64_t)a2) {
    unsigned int v6 = a2;
  }
  unint64_t v12 = v6 * (unint64_t)a4;
  if (v9 * (unint64_t)a2 > v12) {
    unint64_t v12 = v9 * (unint64_t)a2;
  }
  unint64_t v13 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v4;
  unint64_t v14 = v11 + (a4 ^ 0xFFFF) * (unint64_t)v5;
  unint64_t v15 = v12 + (a4 ^ 0xFFFF) * (unint64_t)v6;
  if (a4 == 0xFFFF)
  {
    unint64_t v14 = v11;
    unint64_t v15 = v12;
    unint64_t v13 = v10;
  }
  unint64_t v16 = v13 + v7 * (unint64_t)(a2 ^ 0xFFFF);
  unint64_t v17 = v14 + v8 * (unint64_t)(a2 ^ 0xFFFF);
  unint64_t v18 = v15 + v9 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 != 0xFFFF)
  {
    unint64_t v14 = v17;
    unint64_t v15 = v18;
    unint64_t v13 = v16;
  }
  int64_t v19 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  unint64_t v20 = v13 + 0x8000;
  if (v13 > 0xFFFE8000) {
    unint64_t v20 = 4294868992;
  }
  uint64_t v21 = ((v20 >> 16) + v20) >> 16;
  unint64_t v22 = v14 + 0x8000;
  if (v14 > 0xFFFE8000) {
    unint64_t v22 = 4294868992;
  }
  int v23 = (v22 >> 16) + v22;
  if (v19 <= 4294868992) {
    unint64_t v24 = v19 + 0x8000;
  }
  else {
    unint64_t v24 = 4294868992;
  }
  unint64_t v25 = (unint64_t)((v24 >> 16) + v24) >> 16;
  uint64_t v26 = (65537 * v15 + 2147516416u) & 0xFFFF00000000;
  if (v15 > 0xFFFE8000) {
    uint64_t v26 = 0xFFFF00000000;
  }
  return v26 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v25 << 48) | v23 & 0xFFFF0000 | v21;
}

unint64_t PDAdarkenPDA_14789(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = (unsigned __int16)a1;
  unsigned int v5 = WORD1(a1);
  unsigned int v6 = WORD2(a1);
  unsigned int v7 = (unsigned __int16)a3;
  unsigned int v8 = WORD1(a3);
  unsigned int v9 = WORD2(a3);
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    unsigned int v7 = a4;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    unsigned int v4 = a2;
  }
  unint64_t v10 = v4 * (unint64_t)a4;
  if (v7 * (unint64_t)a2 < v10) {
    unint64_t v10 = v7 * (unint64_t)a2;
  }
  if (WORD1(a3) >= (unint64_t)a4) {
    unsigned int v8 = a4;
  }
  if (WORD1(a1) >= (unint64_t)a2) {
    unsigned int v5 = a2;
  }
  unint64_t v11 = v5 * (unint64_t)a4;
  if (v8 * (unint64_t)a2 < v11) {
    unint64_t v11 = v8 * (unint64_t)a2;
  }
  if (WORD2(a3) >= (unint64_t)a4) {
    unsigned int v9 = a4;
  }
  if (WORD2(a1) >= (unint64_t)a2) {
    unsigned int v6 = a2;
  }
  unint64_t v12 = v6 * (unint64_t)a4;
  if (v9 * (unint64_t)a2 < v12) {
    unint64_t v12 = v9 * (unint64_t)a2;
  }
  unint64_t v13 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v4;
  unint64_t v14 = v11 + (a4 ^ 0xFFFF) * (unint64_t)v5;
  unint64_t v15 = v12 + (a4 ^ 0xFFFF) * (unint64_t)v6;
  if (a4 == 0xFFFF)
  {
    unint64_t v14 = v11;
    unint64_t v15 = v12;
    unint64_t v13 = v10;
  }
  unint64_t v16 = v13 + v7 * (unint64_t)(a2 ^ 0xFFFF);
  unint64_t v17 = v14 + v8 * (unint64_t)(a2 ^ 0xFFFF);
  unint64_t v18 = v15 + v9 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 != 0xFFFF)
  {
    unint64_t v14 = v17;
    unint64_t v15 = v18;
    unint64_t v13 = v16;
  }
  int64_t v19 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  unint64_t v20 = v13 + 0x8000;
  if (v13 > 0xFFFE8000) {
    unint64_t v20 = 4294868992;
  }
  uint64_t v21 = ((v20 >> 16) + v20) >> 16;
  unint64_t v22 = v14 + 0x8000;
  if (v14 > 0xFFFE8000) {
    unint64_t v22 = 4294868992;
  }
  int v23 = (v22 >> 16) + v22;
  if (v19 <= 4294868992) {
    unint64_t v24 = v19 + 0x8000;
  }
  else {
    unint64_t v24 = 4294868992;
  }
  unint64_t v25 = (unint64_t)((v24 >> 16) + v24) >> 16;
  uint64_t v26 = (65537 * v15 + 2147516416u) & 0xFFFF00000000;
  if (v15 > 0xFFFE8000) {
    uint64_t v26 = 0xFFFF00000000;
  }
  return v26 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v25 << 48) | v23 & 0xFFFF0000 | v21;
}

unint64_t PDAcolordodgePDA_14790(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = WORD1(a1);
  uint64_t v5 = 4294836225;
  unint64_t v6 = WORD1(a3);
  unsigned int v7 = a4 * a4;
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (unsigned __int16)a1;
  }
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = (unsigned __int16)a3;
  }
  if (v8)
  {
    uint64_t v10 = 4294836225;
    if ((unsigned __int16)a3 < (unint64_t)a4) {
      uint64_t v10 = (uint64_t)(v7 * (unint64_t)v8) / (a4 - v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v11 = WORD2(a1);
  unint64_t v12 = WORD2(a3);
  if (v4 >= a2) {
    unint64_t v13 = a2;
  }
  else {
    unint64_t v13 = v4;
  }
  if (v6 >= a4) {
    unint64_t v14 = a4;
  }
  else {
    unint64_t v14 = v6;
  }
  if (v13)
  {
    uint64_t v15 = 4294836225;
    if (v6 < a4) {
      uint64_t v15 = (uint64_t)(v7 * (unint64_t)v13) / (uint64_t)(a4 - v14);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (v11 >= a2) {
    unint64_t v16 = a2;
  }
  else {
    unint64_t v16 = v11;
  }
  if (v12 >= a4) {
    unint64_t v17 = a4;
  }
  else {
    unint64_t v17 = v12;
  }
  if (v16)
  {
    if (v12 < a4) {
      uint64_t v5 = (uint64_t)(v7 * (unint64_t)v16) / (uint64_t)(a4 - v17);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v18 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v8;
  uint64_t v19 = v15 + (a4 ^ 0xFFFF) * (unint64_t)v13;
  if (a4 == 0xFFFF) {
    uint64_t v19 = v15;
  }
  else {
    v5 += (a4 ^ 0xFFFF) * (unint64_t)v16;
  }
  if (a4 == 0xFFFF) {
    uint64_t v18 = v10;
  }
  int64_t v20 = v18 + v9 * (unint64_t)(a2 ^ 0xFFFF);
  int64_t v21 = v19 + v14 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 == 0xFFFF) {
    int64_t v21 = v19;
  }
  else {
    v5 += v17 * (unint64_t)(a2 ^ 0xFFFF);
  }
  if (a2 == 0xFFFF) {
    int64_t v20 = v18;
  }
  int64_t v22 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v20 >= v22) {
    int64_t v23 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  }
  else {
    int64_t v23 = v20;
  }
  if (v21 >= v22) {
    int64_t v24 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  }
  else {
    int64_t v24 = v21;
  }
  if (v5 >= v22) {
    uint64_t v5 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  }
  if (v24 <= 4294868992) {
    unint64_t v25 = v24 + 0x8000;
  }
  else {
    unint64_t v25 = 4294868992;
  }
  int v26 = (v25 >> 16) + v25;
  if (v23 <= 4294868992) {
    unint64_t v27 = v23 + 0x8000;
  }
  else {
    unint64_t v27 = 4294868992;
  }
  uint64_t v28 = ((v27 >> 16) + v27) >> 16;
  if (v22 <= 4294868992) {
    unint64_t v29 = v22 + 0x8000;
  }
  else {
    unint64_t v29 = 4294868992;
  }
  unint64_t v30 = (unint64_t)((v29 >> 16) + v29) >> 16;
  uint64_t v31 = (65537 * v5 + 2147516416) & 0xFFFF00000000;
  BOOL v32 = v5 <= 4294868992;
  uint64_t v33 = 0xFFFF00000000;
  if (v32) {
    uint64_t v33 = v31;
  }
  return v33 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v30 << 48) | v26 & 0xFFFF0000 | v28;
}

unint64_t PDAcolorburnPDA_14791(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = (unsigned __int16)a1;
  unint64_t v5 = WORD1(a1);
  unint64_t v6 = WORD2(a1);
  unint64_t v7 = a2;
  unint64_t v8 = WORD2(a3);
  uint64_t v9 = a4;
  unint64_t v10 = a4 * (unint64_t)a2;
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = (unsigned __int16)a3;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = (unsigned __int16)a1;
  }
  if (WORD1(a3) >= (unint64_t)a4) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = WORD1(a3);
  }
  if (v5 >= a2) {
    unint64_t v14 = a2;
  }
  else {
    unint64_t v14 = v5;
  }
  if (v8 >= a4) {
    int64_t v15 = a4;
  }
  else {
    int64_t v15 = v8;
  }
  if (v6 >= a2) {
    unint64_t v16 = a2;
  }
  else {
    unint64_t v16 = v6;
  }
  BOOL v17 = a4 == 0xFFFF;
  unint64_t v18 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v12;
  unint64_t v19 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v14;
  if (v17)
  {
    unint64_t v19 = v10;
    unint64_t v20 = v10;
  }
  else
  {
    unint64_t v20 = v10 + (v9 ^ 0xFFFF) * (unint64_t)v16;
  }
  if (v17) {
    unint64_t v18 = v10;
  }
  unint64_t v21 = v19 + v13 * (unint64_t)(a2 ^ 0xFFFF);
  unint64_t v22 = v20 + v15 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 == 0xFFFF)
  {
    unint64_t v21 = v19;
    unint64_t v22 = v20;
  }
  else
  {
    v18 += v11 * (unint64_t)(a2 ^ 0xFFFF);
  }
  if (v4 < a2)
  {
    if (v11)
    {
      uint64_t v23 = (uint64_t)(v9 * (unint64_t)v9 * (a2 - v12)) / v11;
      unint64_t v18 = (v18 - v23) & ~((uint64_t)(v18 - v23) >> 63);
    }
    else
    {
      unint64_t v18 = 0;
    }
  }
  if (v5 < v7)
  {
    if (v13)
    {
      uint64_t v24 = (uint64_t)(v9 * (unint64_t)v9 * (v7 - v14)) / v13;
      unint64_t v21 = (v21 - v24) & ~((uint64_t)(v21 - v24) >> 63);
    }
    else
    {
      unint64_t v21 = 0;
    }
  }
  if (v6 < v7)
  {
    if (v15)
    {
      uint64_t v25 = (uint64_t)(v9 * (unint64_t)v9 * (v7 - v16)) / v15;
      unint64_t v22 = (v22 - v25) & ~((uint64_t)(v22 - v25) >> 63);
    }
    else
    {
      unint64_t v22 = 0;
    }
  }
  uint64_t v26 = 0xFFFF * (v9 + v7) - v10;
  unint64_t v27 = v18 + 0x8000;
  if (v18 > 0xFFFE8000) {
    unint64_t v27 = 4294868992;
  }
  uint64_t v28 = ((v27 >> 16) + v27) >> 16;
  unint64_t v29 = v21 + 0x8000;
  if (v21 > 0xFFFE8000) {
    unint64_t v29 = 4294868992;
  }
  int v30 = (v29 >> 16) + v29;
  if (v26 <= 4294868992) {
    unint64_t v31 = v26 + 0x8000;
  }
  else {
    unint64_t v31 = 4294868992;
  }
  uint64_t v32 = (v31 >> 16) + v31;
  uint64_t v33 = 0xFFFF00000000;
  if (v22 <= 0xFFFE8000) {
    uint64_t v33 = (65537 * v22 + 2147516416u) & 0xFFFF00000000;
  }
  return (v28 | (v32 << 32)) & 0xFFFF00000000FFFFLL | v30 & 0xFFFF0000 | (unint64_t)v33;
}

unint64_t PDAhardlightPDA_14792(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = WORD2(a1);
  uint64_t v5 = a2;
  uint64_t v6 = a4;
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = (unsigned __int16)a3;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = (unsigned __int16)a1;
  }
  unint64_t v9 = 2 * v8 * (unint64_t)v7;
  if (WORD1(a3) >= (unint64_t)a4) {
    unint64_t v10 = a4;
  }
  else {
    unint64_t v10 = WORD1(a3);
  }
  if (WORD1(a1) >= (unint64_t)a2) {
    unsigned int v11 = a2;
  }
  else {
    unsigned int v11 = WORD1(a1);
  }
  unint64_t v12 = 2 * v11 * (unint64_t)v10;
  if (WORD2(a3) >= (unint64_t)a4) {
    unint64_t v13 = a4;
  }
  else {
    unint64_t v13 = WORD2(a3);
  }
  if (WORD2(a1) >= (unint64_t)a2) {
    unsigned int v4 = a2;
  }
  unint64_t v14 = 2 * v4 * (unint64_t)v13;
  unint64_t v15 = a4 * (unint64_t)a2;
  unint64_t v16 = ((unint64_t)a4 + 1) >> 1;
  unsigned int v17 = a4 ^ 0xFFFF;
  uint64_t v18 = v7 * (unint64_t)(v5 ^ 0xFFFF) + (a4 ^ 0xFFFF) * (unint64_t)v8 + v9;
  unint64_t v19 = (v6 + 0xFFFF) * (unint64_t)v8
      + v7 * (unint64_t)(v5 + 0xFFFF)
      - (v15
       + v9);
  if (v7 > (unint64_t)(v6 + 1) >> 1) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = v18;
  }
  if (v10 <= v16) {
    int64_t v21 = v10 * (unint64_t)(v5 ^ 0xFFFF) + v17 * (unint64_t)v11 + v12;
  }
  else {
    int64_t v21 = (v6 + 0xFFFF) * (unint64_t)v11
  }
        + v10 * (unint64_t)(v5 + 0xFFFF)
        - (v15
         + v12);
  uint64_t v22 = v13 * (unint64_t)(v5 ^ 0xFFFF)
      + (v6 ^ 0xFFFF) * (unint64_t)v4
      + v14;
  unint64_t v23 = (v6 + 0xFFFF) * (unint64_t)v4
      + v13 * (unint64_t)(v5 + 0xFFFF)
      - (v15
       + v14);
  if (v13 > v16) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = v22;
  }
  uint64_t v25 = 0xFFFF * (v6 + v5) - v15;
  unint64_t v26 = v20 + 0x8000;
  if (v20 > 4294868992) {
    unint64_t v26 = 4294868992;
  }
  uint64_t v27 = ((v26 >> 16) + v26) >> 16;
  unint64_t v28 = v21 + 0x8000;
  if (v21 > 4294868992) {
    unint64_t v28 = 4294868992;
  }
  int v29 = (v28 >> 16) + v28;
  if (v25 <= 4294868992) {
    unint64_t v30 = v25 + 0x8000;
  }
  else {
    unint64_t v30 = 4294868992;
  }
  uint64_t v31 = (v30 >> 16) + v30;
  uint64_t v32 = (65537 * v24 + 2147516416) & 0xFFFF00000000;
  BOOL v33 = v24 <= 4294868992;
  uint64_t v34 = 0xFFFF00000000;
  if (v33) {
    uint64_t v34 = v32;
  }
  return (v27 | (v31 << 32)) & 0xFFFF00000000FFFFLL | v29 & 0xFFFF0000 | (unint64_t)v34;
}

unint64_t PDAsoftlightPDA_14793(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = (unsigned __int16)a1;
  uint64_t v5 = (unsigned __int16)a3;
  uint64_t v6 = WORD1(a3);
  uint64_t v7 = WORD2(a3);
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    uint64_t v5 = a4;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    unsigned int v4 = a2;
  }
  if (a2)
  {
    unsigned int v8 = WORD2(a1);
    unsigned int v9 = WORD1(a1);
    int64_t v10 = 2 * v4 * (unint64_t)v5 - (uint64_t)(v4 * (unint64_t)v4 * (2 * v5 - a4)) / a2;
    uint64_t v11 = v10 & ~(v10 >> 63);
    if (WORD1(a3) >= (unint64_t)a4) {
      uint64_t v6 = a4;
    }
    if (WORD1(a1) >= (unint64_t)a2) {
      unsigned int v9 = a2;
    }
    int64_t v12 = 2 * v9 * (unint64_t)v6 - (uint64_t)(v9 * (unint64_t)v9 * (2 * v6 - a4)) / a2;
    uint64_t v13 = v12 & ~(v12 >> 63);
    if (WORD2(a3) >= (unint64_t)a4) {
      uint64_t v7 = a4;
    }
    if (WORD2(a1) >= (unint64_t)a2) {
      unsigned int v8 = a2;
    }
    int64_t v14 = 2 * v8 * (unint64_t)v7 - (uint64_t)(v8 * (unint64_t)v8 * (2 * v7 - a4)) / a2;
    uint64_t v15 = v14 & ~(v14 >> 63);
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    unsigned int v9 = 0;
    uint64_t v15 = 0;
    if (WORD1(a3) >= (unint64_t)a4) {
      LODWORD(v6) = a4;
    }
    if (WORD2(a3) >= (unint64_t)a4) {
      LODWORD(v7) = a4;
    }
  }
  unint64_t v16 = v11 + (a4 ^ 0xFFFF) * (unint64_t)v4;
  unint64_t v17 = v13 + v9 * (unint64_t)(a4 ^ 0xFFFF);
  unint64_t v18 = v15 + v8 * (unint64_t)(a4 ^ 0xFFFF);
  if (a4 == 0xFFFF)
  {
    unint64_t v17 = v13;
    unint64_t v19 = v15;
  }
  else
  {
    unint64_t v19 = v18;
  }
  if (a4 == 0xFFFF) {
    unint64_t v16 = v11;
  }
  unint64_t v20 = v16 + v5 * (unint64_t)(a2 ^ 0xFFFF);
  unint64_t v21 = v17 + v6 * (unint64_t)(a2 ^ 0xFFFF);
  unint64_t v22 = v19 + v7 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 == 0xFFFF)
  {
    unint64_t v21 = v17;
    unint64_t v22 = v19;
    unint64_t v20 = v16;
  }
  int64_t v23 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  unint64_t v24 = v20 + 0x8000;
  if (v20 > 0xFFFE8000) {
    unint64_t v24 = 4294868992;
  }
  uint64_t v25 = ((v24 >> 16) + v24) >> 16;
  unint64_t v26 = v21 + 0x8000;
  if (v21 > 0xFFFE8000) {
    unint64_t v26 = 4294868992;
  }
  int v27 = (v26 >> 16) + v26;
  if (v23 <= 4294868992) {
    unint64_t v28 = v23 + 0x8000;
  }
  else {
    unint64_t v28 = 4294868992;
  }
  unint64_t v29 = (unint64_t)((v28 >> 16) + v28) >> 16;
  uint64_t v30 = 0xFFFF00000000;
  if (v22 <= 0xFFFE8000) {
    uint64_t v30 = (65537 * v22 + 2147516416u) & 0xFFFF00000000;
  }
  return v30 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v29 << 48) | v27 & 0xFFFF0000 | v25;
}

unint64_t PDAdifferencePDA_14794(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = (unsigned __int16)a1;
  uint64_t v5 = WORD1(a1);
  uint64_t v6 = WORD2(a1);
  uint64_t v7 = (unsigned __int16)a3;
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    uint64_t v7 = a4;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    uint64_t v4 = a2;
  }
  int64_t v8 = v4 * (unint64_t)a4 - v7 * (unint64_t)a2;
  unint64_t v9 = 0xFFFF * (v7 + v4) - v7 * (unint64_t)a2 - v4 * (unint64_t)a4;
  if (v8 >= 0) {
    int64_t v10 = v8;
  }
  else {
    int64_t v10 = -v8;
  }
  uint64_t v11 = v9 + v10;
  if (WORD1(a3) >= (unint64_t)a4) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = WORD1(a3);
  }
  if (WORD1(a1) >= (unint64_t)a2) {
    uint64_t v5 = a2;
  }
  int64_t v13 = v5 * (unint64_t)a4 - v12 * (unint64_t)a2;
  unint64_t v14 = 0xFFFF * (v12 + v5) - v12 * (unint64_t)a2 - v5 * (unint64_t)a4;
  if (v13 >= 0) {
    int64_t v15 = v13;
  }
  else {
    int64_t v15 = -v13;
  }
  uint64_t v16 = v14 + v15;
  if (WORD2(a3) >= (unint64_t)a4) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = WORD2(a3);
  }
  if (WORD2(a1) >= (unint64_t)a2) {
    uint64_t v6 = a2;
  }
  int64_t v18 = v6 * (unint64_t)a4 - v17 * (unint64_t)a2;
  unint64_t v19 = 0xFFFF * (v17 + v6) - v17 * (unint64_t)a2 - v6 * (unint64_t)a4;
  if (v18 >= 0) {
    int64_t v20 = v18;
  }
  else {
    int64_t v20 = -v18;
  }
  uint64_t v21 = v19 + v20;
  int64_t v22 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v11 <= 4294868992) {
    unint64_t v23 = v11 + 0x8000;
  }
  else {
    unint64_t v23 = 4294868992;
  }
  uint64_t v24 = ((v23 >> 16) + v23) >> 16;
  if (v16 <= 4294868992) {
    unint64_t v25 = v16 + 0x8000;
  }
  else {
    unint64_t v25 = 4294868992;
  }
  int v26 = (v25 >> 16) + v25;
  if (v22 <= 4294868992) {
    unint64_t v27 = v22 + 0x8000;
  }
  else {
    unint64_t v27 = 4294868992;
  }
  unint64_t v28 = (unint64_t)((v27 >> 16) + v27) >> 16;
  uint64_t v29 = (65537 * v21 + 2147516416) & 0xFFFF00000000;
  BOOL v30 = v21 <= 4294868992;
  uint64_t v31 = 0xFFFF00000000;
  if (v30) {
    uint64_t v31 = v29;
  }
  return v31 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v28 << 48) | v26 & 0xFFFF0000 | v24;
}

unint64_t PDAexclusionPDA_14795(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = (unsigned __int16)a1;
  uint64_t v5 = WORD1(a1);
  uint64_t v6 = WORD2(a1);
  uint64_t v7 = (unsigned __int16)a3;
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    uint64_t v7 = a4;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    uint64_t v4 = a2;
  }
  int64_t v8 = 0xFFFF * (v7 + v4) - 2 * v4 * (unint64_t)v7;
  if (WORD1(a3) >= (unint64_t)a4) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = WORD1(a3);
  }
  if (WORD1(a1) >= (unint64_t)a2) {
    uint64_t v5 = a2;
  }
  int64_t v10 = 0xFFFF * (v9 + v5) - 2 * v5 * (unint64_t)v9;
  if (WORD2(a3) >= (unint64_t)a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = WORD2(a3);
  }
  if (WORD2(a1) >= (unint64_t)a2) {
    uint64_t v6 = a2;
  }
  int64_t v12 = 0xFFFF * (v11 + v6) - 2 * v6 * (unint64_t)v11;
  int64_t v13 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v8 <= 4294868992) {
    unint64_t v14 = v8 + 0x8000;
  }
  else {
    unint64_t v14 = 4294868992;
  }
  uint64_t v15 = ((v14 >> 16) + v14) >> 16;
  if (v10 <= 4294868992) {
    unint64_t v16 = v10 + 0x8000;
  }
  else {
    unint64_t v16 = 4294868992;
  }
  int v17 = (v16 >> 16) + v16;
  if (v13 <= 4294868992) {
    unint64_t v18 = v13 + 0x8000;
  }
  else {
    unint64_t v18 = 4294868992;
  }
  unint64_t v19 = (unint64_t)((v18 >> 16) + v18) >> 16;
  uint64_t v20 = (65537 * v12 + 2147516416) & 0xFFFF00000000;
  BOOL v21 = v12 <= 4294868992;
  uint64_t v22 = 0xFFFF00000000;
  if (v21) {
    uint64_t v22 = v20;
  }
  return v22 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v19 << 48) | v17 & 0xFFFF0000 | v15;
}

unint64_t PDAhuePDA_14796(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v5 = WORD1(a1);
  unint64_t v6 = WORD2(a1);
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    unint64_t v8 = a4;
  }
  else {
    unint64_t v8 = (unsigned __int16)a3;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = (unsigned __int16)a1;
  }
  if (WORD1(a3) >= (unint64_t)a4) {
    unint64_t v10 = a4;
  }
  else {
    unint64_t v10 = WORD1(a3);
  }
  if (v5 >= a2) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = v5;
  }
  if (WORD2(a3) >= (unint64_t)a4) {
    int64_t v12 = a4;
  }
  else {
    int64_t v12 = WORD2(a3);
  }
  if (v6 >= a2) {
    unint64_t v13 = a2;
  }
  else {
    unint64_t v13 = v6;
  }
  if (a4 == 0xFFFF)
  {
    unint64_t v16 = 0;
    unint64_t v15 = 0;
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = (a4 ^ 0xFFFF) * (unint64_t)v9;
    unint64_t v9 = (v9 * (unint64_t)a4 + 0x8000 + ((v9 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    unint64_t v15 = (a4 ^ 0xFFFF) * (unint64_t)v11;
    unint64_t v11 = (v11 * (unint64_t)a4
         + 0x8000
         + ((v11 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    unint64_t v16 = (a4 ^ 0xFFFF) * (unint64_t)v13;
    unint64_t v13 = (v13 * (unint64_t)a4
         + 0x8000
         + ((v13 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
  }
  if (a2 != 0xFFFF)
  {
    v14 += v8 * (unint64_t)(a2 ^ 0xFFFF);
    unint64_t v8 = (v8 * (unint64_t)a2 + 0x8000 + ((v8 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v15 += v10 * (unint64_t)(a2 ^ 0xFFFF);
    unint64_t v10 = (v10 * (unint64_t)a2
         + 0x8000
         + ((v10 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v16 += v12 * (unint64_t)(a2 ^ 0xFFFF);
    int64_t v12 = (v12 * (unint64_t)a2
         + 0x8000
         + ((v12 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  }
  int64_t v46 = v8;
  int64_t v47 = v10;
  int64_t v48 = v12;
  BOOL v17 = v8 >= v10;
  uint64_t v18 = v8 < v10;
  uint64_t v19 = v17;
  if (v12 >= *(&v46 + v19))
  {
    uint64_t v20 = v19;
    if (v12 <= *(&v46 + v18)) {
      uint64_t v19 = 2;
    }
    else {
      uint64_t v19 = v18;
    }
    if (v12 > *(&v46 + v18)) {
      uint64_t v18 = 2;
    }
  }
  else
  {
    uint64_t v20 = 2;
  }
  uint64_t v21 = *(&v46 + v18);
  uint64_t v22 = *(&v46 + v20);
  BOOL v23 = v21 <= v22;
  uint64_t v24 = v21 - v22;
  if (v23)
  {
    *(&v46 + v18) = 0;
    *(&v46 + v19) = 0;
  }
  else
  {
    if (v9 >= v11) {
      unint64_t v25 = v11;
    }
    else {
      unint64_t v25 = v9;
    }
    if (v9 <= v11) {
      unint64_t v26 = v11;
    }
    else {
      unint64_t v26 = v9;
    }
    if (v13 <= v26) {
      unint64_t v27 = v26;
    }
    else {
      unint64_t v27 = v13;
    }
    if (v13 >= v25) {
      unint64_t v26 = v27;
    }
    else {
      unint64_t v25 = v13;
    }
    unint64_t v28 = v26 - v25;
    *(&v46 + v18) = v28;
    *(&v46 + v19) = ((*(&v46 + v19) - *(&v46 + v20)) * ((uint64_t)(v28 << 16) / v24) + 0x8000) >> 16;
  }
  *(&v46 + v20) = 0;
  uint64_t v29 = 77 * (v9 - v46) + 151 * (v11 - v47) + 28 * (v13 - v48);
  uint64_t v30 = v46 + ((v29 + 128) >> 8);
  uint64_t v31 = v47 + ((v29 + 128) >> 8);
  int64_t v32 = (a4 * (unint64_t)a2 + 0x8000 + ((a4 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  uint64_t v33 = v48 + ((v29 + 128) >> 8);
  if (v29 != (char)v29)
  {
    if (v46 >= v47) {
      uint64_t v34 = v47 + ((v29 + 128) >> 8);
    }
    else {
      uint64_t v34 = v46 + ((v29 + 128) >> 8);
    }
    if (v46 >= v47) {
      int64_t v35 = v46 + ((v29 + 128) >> 8);
    }
    else {
      int64_t v35 = v47 + ((v29 + 128) >> 8);
    }
    if (v33 <= v35) {
      int64_t v36 = v35;
    }
    else {
      int64_t v36 = v48 + ((v29 + 128) >> 8);
    }
    if (v33 >= v34) {
      int64_t v37 = v34;
    }
    else {
      int64_t v37 = v48 + ((v29 + 128) >> 8);
    }
    if (v33 >= v34) {
      int64_t v35 = v36;
    }
    if (v35 > v32 || v37 < 0)
    {
      uint64_t v38 = (77 * v30 + 151 * v31 + 28 * v33 + 128) >> 8;
      if (v29 > -129)
      {
        uint64_t v39 = v35 - v38;
        if (v35 == v38) {
          goto LABEL_72;
        }
        uint64_t v40 = v32 - v38;
      }
      else
      {
        uint64_t v39 = v38 - v37;
        if (v38 == v37) {
          goto LABEL_72;
        }
        uint64_t v40 = (77 * v30 + 151 * v31 + 28 * v33 + 128) >> 8;
      }
      uint64_t v41 = (v40 << 16) / v39;
      uint64_t v30 = v38 + ((v41 * (v30 - v38) + 0x8000) >> 16);
      uint64_t v31 = v38 + ((v41 * (v31 - v38) + 0x8000) >> 16);
      uint64_t v33 = v38 + ((v41 * (v33 - v38) + 0x8000) >> 16);
    }
  }
LABEL_72:
  if (v16 <= 0xFFFE8000) {
    unint64_t v42 = v16 + 0x8000;
  }
  else {
    unint64_t v42 = 4294868992;
  }
  if (v15 <= 0xFFFE8000) {
    unint64_t v43 = v15 + 0x8000;
  }
  else {
    unint64_t v43 = 4294868992;
  }
  if (v14 <= 0xFFFE8000) {
    unint64_t v44 = v14 + 0x8000;
  }
  else {
    unint64_t v44 = 4294868992;
  }
  return ((unint64_t)(a4 + a2 - v32) << 48) | ((unint64_t)(unsigned __int16)(v33 + (((v42 >> 16) + v42) >> 16)) << 32) | ((v43 >> 16) + v43 + (v31 << 16)) & 0xFFFF0000 | (unsigned __int16)(v30 + (((v44 >> 16) + v44) >> 16));
}

unint64_t PDAsaturationPDA_14797(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v5 = WORD2(a1);
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = (unsigned __int16)a3;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = (unsigned __int16)a1;
  }
  if (WORD1(a3) >= (unint64_t)a4) {
    unint64_t v9 = a4;
  }
  else {
    unint64_t v9 = WORD1(a3);
  }
  if (WORD1(a1) >= (unint64_t)a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = WORD1(a1);
  }
  if (WORD2(a3) >= (unint64_t)a4) {
    unint64_t v11 = a4;
  }
  else {
    unint64_t v11 = WORD2(a3);
  }
  if (v5 >= a2) {
    int64_t v12 = a2;
  }
  else {
    int64_t v12 = v5;
  }
  if (a4 == 0xFFFF)
  {
    unint64_t v15 = 0;
    unint64_t v14 = 0;
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = (a4 ^ 0xFFFF) * (unint64_t)v8;
    unint64_t v8 = (v8 * (unint64_t)a4 + 0x8000 + ((v8 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    unint64_t v14 = (a4 ^ 0xFFFF) * (unint64_t)v10;
    unint64_t v10 = (v10 * (unint64_t)a4
         + 0x8000
         + ((v10 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    unint64_t v15 = (a4 ^ 0xFFFF) * (unint64_t)v12;
    int64_t v12 = (v12 * (unint64_t)a4
         + 0x8000
         + ((v12 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
  }
  if (a2 != 0xFFFF)
  {
    v13 += v7 * (unint64_t)(a2 ^ 0xFFFF);
    unint64_t v7 = (v7 * (unint64_t)a2 + 0x8000 + ((v7 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v14 += v9 * (unint64_t)(a2 ^ 0xFFFF);
    unint64_t v9 = (v9 * (unint64_t)a2 + 0x8000 + ((v9 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v15 += v11 * (unint64_t)(a2 ^ 0xFFFF);
    unint64_t v11 = (v11 * (unint64_t)a2
         + 0x8000
         + ((v11 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  }
  int64_t v43 = v8;
  int64_t v44 = v10;
  int64_t v45 = v12;
  uint64_t v16 = v8 < v10;
  uint64_t v17 = v8 >= v10;
  if (v12 >= *(&v43 + v17))
  {
    uint64_t v18 = v8 >= v10;
    if (v12 <= *(&v43 + v16)) {
      uint64_t v17 = 2;
    }
    else {
      uint64_t v17 = v8 < v10;
    }
    if (v12 > *(&v43 + v16)) {
      uint64_t v16 = 2;
    }
  }
  else
  {
    uint64_t v18 = 2;
  }
  uint64_t v19 = *(&v43 + v16);
  uint64_t v20 = *(&v43 + v18);
  BOOL v21 = __OFSUB__(v19, v20);
  uint64_t v22 = v19 - v20;
  if ((v22 < 0) ^ v21 | (v22 == 0))
  {
    *(&v43 + v16) = 0;
    *(&v43 + v17) = 0;
  }
  else
  {
    if (v7 >= v9) {
      unint64_t v23 = v9;
    }
    else {
      unint64_t v23 = v7;
    }
    if (v7 <= v9) {
      unint64_t v7 = v9;
    }
    if (v11 <= v7) {
      unint64_t v24 = v7;
    }
    else {
      unint64_t v24 = v11;
    }
    if (v11 >= v23)
    {
      unint64_t v11 = v23;
      unint64_t v7 = v24;
    }
    unint64_t v25 = v7 - v11;
    *(&v43 + v16) = v25;
    *(&v43 + v17) = ((*(&v43 + v17) - *(&v43 + v18)) * ((uint64_t)(v25 << 16) / v22) + 0x8000) >> 16;
  }
  *(&v43 + v18) = 0;
  uint64_t v26 = 77 * (v8 - v43) + 151 * (v10 - v44) + 28 * (v12 - v45);
  uint64_t v27 = v43 + ((v26 + 128) >> 8);
  uint64_t v28 = v44 + ((v26 + 128) >> 8);
  int64_t v29 = (a4 * (unint64_t)a2 + 0x8000 + ((a4 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  uint64_t v30 = v45 + ((v26 + 128) >> 8);
  if (v26 != (char)v26)
  {
    if (v43 >= v44) {
      uint64_t v31 = v44 + ((v26 + 128) >> 8);
    }
    else {
      uint64_t v31 = v43 + ((v26 + 128) >> 8);
    }
    if (v43 >= v44) {
      int64_t v32 = v43 + ((v26 + 128) >> 8);
    }
    else {
      int64_t v32 = v44 + ((v26 + 128) >> 8);
    }
    if (v30 <= v32) {
      int64_t v33 = v32;
    }
    else {
      int64_t v33 = v45 + ((v26 + 128) >> 8);
    }
    if (v30 >= v31) {
      int64_t v34 = v31;
    }
    else {
      int64_t v34 = v45 + ((v26 + 128) >> 8);
    }
    if (v30 >= v31) {
      int64_t v32 = v33;
    }
    if (v32 > v29 || v34 < 0)
    {
      uint64_t v35 = (77 * v27 + 151 * v28 + 28 * v30 + 128) >> 8;
      if (v26 > -129)
      {
        uint64_t v36 = v32 - v35;
        if (v32 == v35) {
          goto LABEL_67;
        }
        uint64_t v37 = v29 - v35;
      }
      else
      {
        uint64_t v36 = v35 - v34;
        if (v35 == v34) {
          goto LABEL_67;
        }
        uint64_t v37 = (77 * v27 + 151 * v28 + 28 * v30 + 128) >> 8;
      }
      uint64_t v38 = (v37 << 16) / v36;
      uint64_t v27 = v35 + ((v38 * (v27 - v35) + 0x8000) >> 16);
      uint64_t v28 = v35 + ((v38 * (v28 - v35) + 0x8000) >> 16);
      uint64_t v30 = v35 + ((v38 * (v30 - v35) + 0x8000) >> 16);
    }
  }
LABEL_67:
  if (v15 <= 0xFFFE8000) {
    unint64_t v39 = v15 + 0x8000;
  }
  else {
    unint64_t v39 = 4294868992;
  }
  if (v14 <= 0xFFFE8000) {
    unint64_t v40 = v14 + 0x8000;
  }
  else {
    unint64_t v40 = 4294868992;
  }
  if (v13 <= 0xFFFE8000) {
    unint64_t v41 = v13 + 0x8000;
  }
  else {
    unint64_t v41 = 4294868992;
  }
  return ((unint64_t)(a4 + a2 - v29) << 48) | ((unint64_t)(unsigned __int16)(v30 + (((v39 >> 16) + v39) >> 16)) << 32) | ((v40 >> 16) + v40 + (v28 << 16)) & 0xFFFF0000 | (unsigned __int16)(v27 + (((v41 >> 16) + v41) >> 16));
}

unint64_t PDAluminosityPDA_14798(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if ((unsigned __int16)a3 >= (unint64_t)a4) {
    LODWORD(v6) = a4;
  }
  else {
    LODWORD(v6) = (unsigned __int16)a3;
  }
  if ((unsigned __int16)a1 >= (unint64_t)a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = (unsigned __int16)a1;
  }
  if (WORD1(a3) >= (unint64_t)a4) {
    LODWORD(v8) = a4;
  }
  else {
    LODWORD(v8) = WORD1(a3);
  }
  if (WORD1(a1) >= (unint64_t)a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = WORD1(a1);
  }
  if (WORD2(a3) >= (unint64_t)a4) {
    LODWORD(v10) = a4;
  }
  else {
    LODWORD(v10) = WORD2(a3);
  }
  if (WORD2(a1) >= (unint64_t)a2) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = WORD2(a1);
  }
  if (a4 == 0xFFFF)
  {
    unint64_t v14 = 0;
    unint64_t v13 = 0;
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = (a4 ^ 0xFFFF) * (unint64_t)v7;
    unint64_t v7 = (v7 * (unint64_t)a4 + 0x8000 + ((v7 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    unint64_t v13 = (a4 ^ 0xFFFF) * (unint64_t)v9;
    unint64_t v9 = (v9 * (unint64_t)a4 + 0x8000 + ((v9 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    unint64_t v14 = (a4 ^ 0xFFFF) * (unint64_t)v11;
    unint64_t v11 = (v11 * (unint64_t)a4
         + 0x8000
         + ((v11 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
  }
  if (a2 != 0xFFFF)
  {
    v12 += v6 * (unint64_t)(a2 ^ 0xFFFF);
    unint64_t v6 = (v6 * (unint64_t)a2 + 0x8000 + ((v6 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v13 += v8 * (unint64_t)(a2 ^ 0xFFFF);
    unint64_t v8 = (v8 * (unint64_t)a2 + 0x8000 + ((v8 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v14 += v10 * (unint64_t)(a2 ^ 0xFFFF);
    unint64_t v10 = (v10 * (unint64_t)a2
         + 0x8000
         + ((v10 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  }
  uint64_t v15 = 28 * ((int)v10 - (int)v11) + 151 * ((int)v8 - (int)v9) + 77 * ((int)v6 - (int)v7);
  uint64_t v16 = v7 + ((v15 + 128) >> 8);
  uint64_t v17 = v9 + ((v15 + 128) >> 8);
  int64_t v18 = (a4 * (unint64_t)a2 + 0x8000 + ((a4 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  uint64_t v19 = v11 + ((v15 + 128) >> 8);
  if (v15 != (char)v15)
  {
    BOOL v20 = v7 >= v9;
    if (v7 >= v9) {
      int64_t v21 = v9 + ((v15 + 128) >> 8);
    }
    else {
      int64_t v21 = v7 + ((v15 + 128) >> 8);
    }
    if (v20) {
      int64_t v22 = v16;
    }
    else {
      int64_t v22 = v9 + ((v15 + 128) >> 8);
    }
    if (v19 <= v22) {
      int64_t v23 = v22;
    }
    else {
      int64_t v23 = v19;
    }
    if (v19 >= v21) {
      int64_t v24 = v21;
    }
    else {
      int64_t v24 = v19;
    }
    if (v19 >= v21) {
      int64_t v22 = v23;
    }
    if (v22 > v18 || v24 < 0)
    {
      uint64_t v25 = (77 * v16 + 151 * v17 + 28 * v19 + 128) >> 8;
      if (v15 > -129)
      {
        uint64_t v26 = v22 - v25;
        if (v22 == v25) {
          goto LABEL_47;
        }
        uint64_t v27 = v18 - v25;
      }
      else
      {
        uint64_t v26 = v25 - v24;
        if (!v26) {
          goto LABEL_47;
        }
        uint64_t v27 = (77 * v16 + 151 * v17 + 28 * v19 + 128) >> 8;
      }
      uint64_t v28 = (v27 << 16) / v26;
      uint64_t v16 = v25 + ((v28 * (v16 - v25) + 0x8000) >> 16);
      uint64_t v17 = v25 + ((v28 * (v17 - v25) + 0x8000) >> 16);
      uint64_t v19 = v25 + ((v28 * (v19 - v25) + 0x8000) >> 16);
    }
  }
LABEL_47:
  uint64_t v29 = a4 + a2 - v18;
  unint64_t v30 = v14 + 0x8000;
  if (v14 > 0xFFFE8000) {
    unint64_t v30 = 4294868992;
  }
  int v31 = v19 + (((v30 >> 16) + v30) >> 16);
  if (v13 <= 0xFFFE8000) {
    unint64_t v32 = v13 + 0x8000;
  }
  else {
    unint64_t v32 = 4294868992;
  }
  int v33 = (v32 >> 16) + v32;
  if (v12 <= 0xFFFE8000) {
    unint64_t v34 = v12 + 0x8000;
  }
  else {
    unint64_t v34 = 4294868992;
  }
  return (v29 << 48) | ((unint64_t)(unsigned __int16)v31 << 32) | (v33 + (v17 << 16)) & 0xFFFF0000 | (unsigned __int16)(v16 + (((v34 >> 16) + v34) >> 16));
}

void rgba64_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(a1 + 280);
  float v5 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(void *)(a1 + 272) + 4) * (float)a3))
             + (float)(v4 * (float)(*(float *)(*(void *)(a1 + 272) + 4) * (float)a2)));
  float v7 = *(float *)(a1 + 336);
  float v8 = *(float *)(a1 + 344);
  float v9 = *(float *)(a1 + 304);
  float v10 = *(float *)(a1 + 308);
  int v11 = *(_DWORD *)(a1 + 320);
  int v12 = *(_DWORD *)(a1 + 324);
  uint64_t v15 = a1 + 144;
  unint64_t v13 = *(_DWORD **)(a1 + 144);
  uint64_t v14 = *(void *)(v15 + 8);
  uint64_t v16 = *(void **)(a1 + 376);
  uint64_t v17 = *(void *)(a1 + 360);
  if (v4 != 0.0)
  {
    while (1)
    {
      int v19 = v11;
      if (v5 >= v9)
      {
        int v19 = v12;
        if (v5 <= v10) {
          int v19 = (int)(float)(v8 * (float)(v5 - v7));
        }
      }
      if ((v19 & 0x80000000) == 0) {
        break;
      }
      BOOL v20 = v16;
      if (v16) {
        goto LABEL_17;
      }
LABEL_18:
      float v5 = v4 + v5;
      v14 += 8;
      *(unsigned char *)unint64_t v13 = (_BYTE)v20;
      unint64_t v13 = (_DWORD *)((char *)v13 + 1);
      if (!--a4) {
        return;
      }
    }
    BOOL v20 = (void *)(v17 + 8 * v19);
LABEL_17:
    *(void *)uint64_t v14 = *v20;
    LOBYTE(v20) = -1;
    goto LABEL_18;
  }
  if (v5 >= v9)
  {
    int v11 = v12;
    if (v5 <= v10) {
      int v11 = (int)(float)(v8 * (float)(v5 - v7));
    }
  }
  if ((v11 & 0x80000000) == 0 || v16)
  {
    int64_t v21 = (int *)(v17 + 8 * v11);
    if (v11 < 0) {
      int64_t v22 = (int *)v16;
    }
    else {
      int64_t v22 = v21;
    }
    int v23 = *v22;
    int v24 = v22[1];
    int v25 = a4 + 4;
    do
    {
      *(_DWORD *)uint64_t v14 = v23;
      *(_DWORD *)(v14 + 4) = v24;
      *(_DWORD *)(v14 + 8) = v23;
      *(_DWORD *)(v14 + 12) = v24;
      *(_DWORD *)(v14 + 16) = v23;
      *(_DWORD *)(v14 + 20) = v24;
      v25 -= 4;
      *(_DWORD *)(v14 + 24) = v23;
      *(_DWORD *)(v14 + 28) = v24;
      v14 += 32;
      *v13++ = -1;
    }
    while (v25 > 4);
  }
  else
  {
    if (a4 >= 4) {
      int v18 = 4;
    }
    else {
      int v18 = a4;
    }
    bzero(v13, ((a4 - v18 + 3) & 0xFFFFFFFC) + 4);
  }
}

float rgba64_shade_custom_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float result = *(float *)(a1 + 280);
  float v5 = *(float *)(*(void *)(a1 + 272) + 4);
  float v6 = v5 * (float)a2;
  float v7 = v5 * (float)a3;
  float v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(result * v6));
  float v9 = *(float *)(a1 + 284);
  float v10 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v9 * v6));
  float v11 = *(float *)(a1 + 304);
  float v12 = *(float *)(a1 + 308);
  float v13 = *(float *)(a1 + 312);
  float v14 = *(float *)(a1 + 316);
  float v15 = *(float *)(a1 + 336);
  float v16 = *(float *)(a1 + 348);
  float v17 = *(float *)(a1 + 344);
  float v18 = *(float *)(a1 + 356);
  int v19 = *(void **)(a1 + 376);
  uint64_t v20 = *(void *)(a1 + 360);
  int v21 = 4 * *(_DWORD *)(a1 + 48);
  int v23 = *(unsigned char **)(a1 + 144);
  int64_t v22 = *(void **)(a1 + 152);
  do
  {
    if (v8 < v11 || v10 < v13)
    {
      BOOL v25 = 0;
      BOOL v26 = 0;
    }
    else
    {
      BOOL v25 = v8 == v12;
      BOOL v26 = v8 < v12;
    }
    if (v26 || v25)
    {
      BOOL v27 = v10 == v14;
      BOOL v28 = v10 < v14;
    }
    else
    {
      BOOL v27 = 0;
      BOOL v28 = 0;
    }
    if (v28 || v27)
    {
      uint64_t v29 = (void *)(v20
                     + 2 * v21 * (int)(float)(v18 * (float)(v10 - v16))
                     + 8 * (int)(float)(v17 * (float)(v8 - v15)));
LABEL_15:
      void *v22 = *v29;
      LOBYTE(v29) = -1;
      goto LABEL_16;
    }
    uint64_t v29 = v19;
    if (v19) {
      goto LABEL_15;
    }
LABEL_16:
    float v8 = result + v8;
    float v10 = v9 + v10;
    ++v22;
    *v23++ = (_BYTE)v29;
    --a4;
  }
  while (a4);
  return result;
}

void rgba64_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(a1 + 280);
  float v5 = *(float *)(*(void *)(a1 + 272) + 4);
  float v6 = v5 * (float)a2;
  float v7 = v5 * (float)a3;
  float v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  float v9 = *(float *)(a1 + 284);
  float v10 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v9 * v6));
  float v31 = *(float *)(a1 + 336);
  float v32 = *(float *)(a1 + 304);
  float v12 = *(float *)(a1 + 344);
  uint64_t v13 = *(void *)(a1 + 360);
  float v15 = *(unsigned char **)(a1 + 144);
  float v14 = *(unsigned int **)(a1 + 152);
  float v16 = *(float *)(a1 + 308) - v32;
  do
  {
    float v17 = v12 * (float)((float)(v32 + (float)((float)((float)(atan2f(v10, v8) * 0.15915) + 0.5) * v16)) - v31);
    unsigned int v18 = vcvtms_s32_f32(v17);
    float v19 = ceilf(v17);
    float v20 = v17 - (float)(int)floorf(v17);
    unsigned int v21 = vcvtms_s32_f32(v12 + v17);
    if (v17 < 0.0) {
      unsigned int v18 = v21;
    }
    BOOL v22 = v17 <= v12;
    float v23 = ceilf(v17 - v12);
    if (v22) {
      float v23 = v19;
    }
    int v24 = (int)v23;
    float v25 = (float)(v20 * 255.0) + 0.5;
    BOOL v26 = (unsigned __int16 *)(v13 + 2 * (int)(4 * v18));
    int v27 = *v26;
    int v28 = v26[1];
    uint64_t v29 = (unsigned __int16 *)(v13 + 8 * v24);
    int v30 = 255 - (int)v25;
    LODWORD(v26) = (((int)v25 * v29[3] + v30 * v26[3]) << 8) & 0xFFFF0000 | (unsigned __int16)(((int)v25 * v29[2]
                                                                                              + v30
                                                                                              * v26[2]) >> 8);
    *float v14 = (((int)v25 * v29[1] + v30 * v28) << 8) & 0xFFFF0000 | (unsigned __int16)(((int)v25 * *v29
                                                                                   + v30 * v27) >> 8);
    v14[1] = v26;
    v14 += 2;
    float v8 = v4 + v8;
    float v10 = v9 + v10;
    *v15++ = -1;
    --a4;
  }
  while (a4);
}

void rgba64_shade_radial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(a1 + 280);
  float v5 = *(float *)(a1 + 284);
  float v6 = *(float *)(*(void *)(a1 + 272) + 4);
  float v7 = v6 * (float)a2;
  float v8 = v6 * (float)a3;
  float v9 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v8) + (float)(v4 * v7));
  float v10 = *(float *)(a1 + 300) + (float)((float)(v8 * *(float *)(a1 + 292)) + (float)(v5 * v7));
  float v12 = *(float **)(a1 + 400);
  float v13 = *(float *)(a1 + 336);
  float v14 = *(float *)(a1 + 344);
  float v15 = *(float *)(a1 + 304);
  float v16 = *(float *)(a1 + 308);
  int v17 = *(_DWORD *)(a1 + 324);
  float v18 = v12[2];
  float v19 = v12[4];
  float v20 = v12[5];
  float v21 = v12[7];
  uint64_t v24 = a1 + 144;
  BOOL v22 = *(unsigned char **)(a1 + 144);
  uint64_t v23 = *(void *)(v24 + 8);
  float v25 = *(_DWORD **)(a1 + 376);
  uint64_t v26 = *(void *)(a1 + 360);
  if (v18 != 0.0 || v21 != 0.0 || v5 != 0.0)
  {
    int v30 = *(_DWORD *)(a1 + 320);
    float v31 = v12[3];
    float v32 = v12[8];
    float v33 = -v12[6];
    float v34 = v16 - v15;
    while (1)
    {
      float v35 = v33 + (float)((float)(v9 + v9) * v18);
      float v36 = (float)((float)(v10 * v10) + (float)(v9 * v9)) - v21;
      if (v20 == 0.0)
      {
        float v43 = v36 / v35;
      }
      else
      {
        float v37 = (float)((float)(v20 * -4.0) * v36) + (float)(v35 * v35);
        if (v37 < 0.0) {
          goto LABEL_39;
        }
        float v38 = sqrtf(v37);
        float v39 = v32 * (float)(v35 - v38);
        float v40 = v35 + v38;
        float v41 = v32 * v40;
        BOOL v42 = (float)(v32 * v40) <= v39;
        if ((float)(v32 * v40) <= v39) {
          float v43 = v32 * v40;
        }
        else {
          float v43 = v39;
        }
        if (v42) {
          float v41 = v39;
        }
        if (v41 < 0.0)
        {
          BOOL v44 = v41 < v31;
LABEL_25:
          int v45 = v30;
          if (v44) {
            goto LABEL_39;
          }
LABEL_26:
          if ((v45 & 0x80000000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_39;
        }
        if (v41 <= 1.0)
        {
          float v46 = v15 + (float)(v41 * v34);
          goto LABEL_37;
        }
        if ((v17 & 0x80000000) == 0)
        {
          int v45 = v17;
          if (v41 <= v19)
          {
LABEL_38:
            int64_t v47 = (void *)(v26 + 8 * v45);
LABEL_40:
            *(void *)uint64_t v23 = *v47;
            LOBYTE(v47) = -1;
            goto LABEL_41;
          }
        }
      }
      if (v43 < 0.0)
      {
        BOOL v44 = v43 < v31;
        goto LABEL_25;
      }
      if (v43 > 1.0)
      {
        int v45 = v17;
        if (v43 > v19) {
          goto LABEL_39;
        }
        goto LABEL_26;
      }
      float v46 = v15 + (float)(v43 * v34);
LABEL_37:
      int v45 = (int)(float)(v14 * (float)(v46 - v13));
      if ((v45 & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_39:
      int64_t v47 = v25;
      if (v25) {
        goto LABEL_40;
      }
LABEL_41:
      float v9 = v4 + v9;
      float v10 = v5 + v10;
      v23 += 8;
      *v22++ = (_BYTE)v47;
      if (!--a4) {
        return;
      }
    }
  }
  float v27 = v10 * v10;
  float v28 = -v20;
  if (v27 <= (float)-v20)
  {
    float v48 = fabsf(v12[8]);
    float v49 = v20 * -4.0;
    float v50 = v16 - v15;
    unsigned int v51 = (int *)(v26 + 8 * v17);
    int v52 = a4 + 2;
    while (1)
    {
      float v53 = v27 + (float)(v9 * v9);
      float v54 = v4 + v9;
      float v55 = v27 + (float)(v54 * v54);
      if (v53 > v28 && v55 > v28)
      {
        if (v17 < 0)
        {
          if (!v25)
          {
            char v68 = 0;
            LOBYTE(v67) = 0;
            goto LABEL_65;
          }
          int v64 = *v25;
          *(_DWORD *)uint64_t v23 = *v25;
          int v65 = v25[1];
        }
        else
        {
          int v64 = *v51;
          *(_DWORD *)uint64_t v23 = *v51;
          int v65 = v51[1];
        }
        *(_DWORD *)(v23 + 4) = v65;
        goto LABEL_63;
      }
      float v57 = sqrtf(v49 * v55);
      float v58 = v48 * sqrtf(v49 * v53);
      float v59 = v48 * v57;
      int v60 = (int)(float)(v14 * (float)((float)(v15 + (float)(v58 * v50)) - v13));
      int v61 = (int)(float)(v14 * (float)((float)(v15 + (float)((float)(v48 * v57) * v50)) - v13));
      if (v58 <= 1.0 && v59 <= 1.0)
      {
        float v66 = (int *)(v26 + 8 * v61);
        int v64 = *v66;
        int v65 = v66[1];
        *(void *)uint64_t v23 = *(void *)(v26 + 8 * v60);
LABEL_63:
        LOBYTE(v67) = -1;
        goto LABEL_64;
      }
      if (v58 <= 1.0)
      {
        if ((v60 & 0x80000000) == 0)
        {
          uint64_t v63 = 4 * v60;
LABEL_69:
          int v67 = (int *)(v26 + 2 * v63);
LABEL_71:
          int v69 = *v67;
          LODWORD(v67) = v67[1];
          *(_DWORD *)uint64_t v23 = v69;
          *(_DWORD *)(v23 + 4) = v67;
          LOBYTE(v67) = -1;
          goto LABEL_72;
        }
      }
      else if (v58 <= v19)
      {
        uint64_t v63 = 4 * v17;
        if ((v17 & 0x80000000) == 0) {
          goto LABEL_69;
        }
      }
      int v67 = v25;
      if (v25) {
        goto LABEL_71;
      }
LABEL_72:
      if (v59 <= 1.0)
      {
        if (v61 < 0) {
          goto LABEL_79;
        }
        uint64_t v70 = 4 * v61;
      }
      else if (v59 > v19 || (uint64_t v70 = 4 * v17, v17 < 0))
      {
LABEL_79:
        if (!v25)
        {
          char v68 = 0;
          goto LABEL_65;
        }
        int v64 = *v25;
        int v65 = v25[1];
        goto LABEL_64;
      }
      unsigned int v71 = (int *)(v26 + 2 * v70);
      int v64 = *v71;
      int v65 = v71[1];
LABEL_64:
      *(_DWORD *)(v23 + 8) = v64;
      *(_DWORD *)(v23 + 12) = v65;
      char v68 = -1;
LABEL_65:
      float v9 = v4 + v54;
      v23 += 16;
      unsigned char *v22 = (_BYTE)v67;
      v22[1] = v68;
      v22 += 2;
      v52 -= 2;
      if (v52 <= 2) {
        return;
      }
    }
  }
  if (v25 || (v17 & 0x80000000) == 0)
  {
    if (v17 >= 0) {
      unsigned int v72 = (int *)(v26 + 8 * v17);
    }
    else {
      unsigned int v72 = *(int **)(a1 + 376);
    }
    int v73 = *v72;
    int v74 = v72[1];
    int v75 = a4 + 4;
    do
    {
      *(_DWORD *)uint64_t v23 = v73;
      *(_DWORD *)(v23 + 4) = v74;
      *(_DWORD *)(v23 + 8) = v73;
      *(_DWORD *)(v23 + 12) = v74;
      *(_DWORD *)(v23 + 16) = v73;
      *(_DWORD *)(v23 + 20) = v74;
      v75 -= 4;
      *(_DWORD *)(v23 + 24) = v73;
      *(_DWORD *)(v23 + 28) = v74;
      v23 += 32;
      *(_DWORD *)BOOL v22 = -1;
      v22 += 4;
    }
    while (v75 > 4);
  }
  else
  {
    if (a4 >= 4) {
      int v29 = 4;
    }
    else {
      int v29 = a4;
    }
    bzero(v22, ((a4 - v29 + 3) & 0xFFFFFFFC) + 4);
  }
}

uint64_t rgba64_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  memset(v48, 0, 512);
  if (*((void *)a2 + 12)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(float *)(a3 + 8) >= 1.0;
  }
  int v8 = *(_DWORD *)(*(void *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((void *)a2 + 6) == 0));
  if (v8 > 28) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v31, (uint64_t)v48) < 1) {
    return 0xFFFFFFFFLL;
  }
  int v18 = 269497256;
  unsigned int v19 = *(_DWORD *)a3;
  *((void *)&v31 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v19 == 269497256)
  {
    if (!(void)v42 && (~DWORD1(v32) & 0xC3) == 0)
    {
      v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
      if (v17.n128_f32[0] >= 1.0 && !*(void *)(a3 + 24))
      {
        if ((BYTE4(v32) & 4) != 0)
        {
          v17.n128_u64[0] = *(void *)(a3 + 32);
          *((void *)a2 + 8) = v17.n128_u64[0];
        }
        rgba64_mark((uint64_t)a1, v17);
        return 1;
      }
    }
    *(void *)&long long v31 = rgba64_sample_rgba64;
    goto LABEL_36;
  }
  unsigned int v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
  if (!v20) {
    return 0xFFFFFFFFLL;
  }
  if (v20 > 0xB)
  {
    if (v20 > 0x13) {
      goto LABEL_27;
    }
    if (v20 - 14 < 4)
    {
      char v21 = 0;
      LODWORD(v22) = 0;
      goto LABEL_28;
    }
    if ((v20 == 13 || v20 == 12) && (uint64_t v22 = *((void *)a2 + 12)) == 0)
    {
      char v21 = 0;
    }
    else
    {
LABEL_27:
      LODWORD(v22) = 255;
      char v21 = 1;
    }
  }
  else
  {
    char v21 = 0;
    LODWORD(v22) = 0;
    switch(v20)
    {
      case 2u:
        if (*((void *)a2 + 12)) {
          goto LABEL_27;
        }
        char v21 = 0;
        LODWORD(v22) = 16;
        break;
      case 5u:
        char v21 = 0;
        LODWORD(v22) = 24;
        break;
      case 6u:
        break;
      case 7u:
        char v21 = 0;
        LODWORD(v22) = 32;
        break;
      case 8u:
        char v21 = 0;
        LODWORD(v22) = 8;
        break;
      case 9u:
        char v21 = 0;
        LODWORD(v22) = 40;
        break;
      default:
        goto LABEL_27;
    }
  }
LABEL_28:
  *(void *)&long long v31 = *(void *)&RGB16_image_sample[2 * v20 + 2];
  if (!(void)v31)
  {
    if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) <= 8)
    {
      *(void *)&long long v31 = *(void *)&RGB8_image_sample[2 * v20 + 2];
      if ((void)v31)
      {
        int v18 = 134755224;
        int v23 = 4;
LABEL_34:
        LODWORD(v32) = v23;
        goto LABEL_35;
      }
    }
    *(void *)&long long v31 = *(void *)&RGBF_image_sample[2 * v20 + 2];
    if ((void)v31)
    {
      int v18 = 538981289;
      int v23 = 16;
      goto LABEL_34;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_35:
  DWORD2(v31) = v18;
  if ((v21 & 1) == 0 && (v8 - 1) <= 1 && (BYTE4(v32) & 7) == 3 && (a2[2] == 5 || !a2[2]))
  {
    if (v20 <= 0xB)
    {
      HIDWORD(v24) = v22;
      LODWORD(v24) = v22;
      switch((v24 >> 3))
      {
        case 0u:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_RGB32;
          goto LABEL_67;
        case 1u:
          DWORD2(v31) = *(_DWORD *)a3;
          uint64_t v26 = rgba64_image_mark_RGB32;
          break;
        case 2u:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_W8;
          goto LABEL_67;
        case 3u:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_RGB24;
          goto LABEL_67;
        case 4u:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_rgb32;
          goto LABEL_67;
        case 5u:
          DWORD2(v31) = *(_DWORD *)a3;
          uint64_t v26 = rgba64_image_mark_rgb32;
          break;
        default:
          goto LABEL_36;
      }
      float v27 = v26;
      uint64_t v28 = (uint64_t)a2;
      int v29 = v8;
      int v30 = 8;
LABEL_68:
      rgba64_image_mark_image(v28, (uint64_t)&v31, v29, v30, (void (*)(void, void))v27);
      return 1;
    }
    if (v20 <= 0x13)
    {
      switch(v20)
      {
        case 0xCu:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_W16;
          break;
        case 0xDu:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_w16;
          break;
        case 0xEu:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_RGB48;
          break;
        case 0xFu:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_rgb48;
          break;
        case 0x10u:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_RGBA64;
          break;
        case 0x11u:
          DWORD2(v31) = *(_DWORD *)a3;
          float v25 = rgba64_image_mark_rgba64;
          break;
        default:
          goto LABEL_36;
      }
LABEL_67:
      float v27 = v25;
      uint64_t v28 = (uint64_t)a2;
      int v29 = v8;
      int v30 = 0;
      goto LABEL_68;
    }
  }
LABEL_36:
  rgba64_image_mark((uint64_t)a2, (uint64_t)&v31, v8, v17);
  return 1;
}

uint64_t rgba64_mark(uint64_t a1, __n128 a2)
{
  uint64_t v2 = (unsigned int **)MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = v3;
  uint64_t v742 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *v2;
  if (*(_DWORD *)(v3 + 132))
  {
    if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken != -1) {
      dispatch_once(&CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken, &__block_literal_global_15_13639);
    }
    BOOL v7 = CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::result != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  int v8 = *(_DWORD *)v5;
  uint64_t v9 = *(void *)(v5 + 96);
  uint64_t v10 = *(void *)(v5 + 48);
  int v11 = *(_DWORD *)(*((void *)v6 + 7) + 16 * *(_DWORD *)v5 + 8 * (v9 == 0) + 4 * (v10 == 0));
  if (v11 > 27) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v13 = *(unsigned int *)(v5 + 4);
  unsigned int v14 = v13 - 1;
  if ((int)v13 < 1) {
    return 0;
  }
  int v15 = *(_DWORD *)(v5 + 8);
  if (v15 < 1) {
    return 0;
  }
  uint64_t v16 = *(uint16x4_t **)(v5 + 136);
  if ((v8 & 0xFF0000) == 0x50000 || !v16)
  {
    uint64_t v708 = v5;
    int v715 = *(_DWORD *)(*((void *)v6 + 7) + 16 * *(_DWORD *)v5 + 8 * (v9 == 0) + 4 * (v10 == 0));
    if (BYTE1(v8) == 1)
    {
      if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
      {
        rgba16_template_image_mark_method(*v6, v5, v11);
        return 1;
      }
    }
    else if (BYTE1(v8) == 4)
    {
      v741[0] = *(_DWORD *)(v5 + 4);
      v731[0] = v15;
      unint64_t v18 = *(int *)(v5 + 28);
      uint64_t v19 = *(void *)(v5 + 40);
      unsigned int v20 = (int *)v5;
      uint32x2_t v21 = **(uint32x2_t **)(v5 + 88);
      unint64_t v22 = HIWORD(*(void *)&v21);
      int v718 = v18;
      unint64_t v23 = v18 >> 3;
      unint64_t v24 = (uint16x4_t *)(v19 + 8 * (v20[3] + (v18 >> 3) * v20[4]));
      unint64_t v724 = v18 >> 3;
      v726 = v24;
      if (v16)
      {
        shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, 1, 1, 1, v20[26], v20[27], v13, v15);
        uint64_t v26 = v25;
        if (v25) {
          goto LABEL_317;
        }
        return 1;
      }
      uint64_t v729 = 0;
LABEL_58:
      unint64_t v64 = v23 - (int)v13;
      unint64_t v23 = v13;
      switch(v715)
      {
        case 0:
          unsigned int v65 = v731[0];
          int v66 = 8 * v13;
          goto LABEL_321;
        case 1:
          uint64_t v67 = *(void *)(v708 + 88);
          if (v67)
          {
            CGSFillDRAM64((unint64_t)v24, v718 & 0xFFFFFFF8, 8 * v13, v731[0], v67, 8, 8, 1, 0, 0);
          }
          else
          {
            int v66 = 8 * v13;
            unsigned int v65 = v731[0];
LABEL_321:
            CGBlt_fillBytes(v66, v65, 0, (char *)v24, v718 & 0xFFFFFFF8);
          }
          goto LABEL_149;
        case 2:
          unsigned int v68 = v13 >> 2;
          int v723 = v13 & 3;
          int v69 = v731[0];
          unsigned int v721 = v68 + 1;
          do
          {
            int v70 = v23;
            if ((int)v23 >= 4)
            {
              unsigned int v71 = v721;
              do
              {
                rgba64_DplusDM(v24, *(void *)&v21, (unint64_t)*v24, (unsigned __int16)~v21.i16[3]);
                rgba64_DplusDM(v24 + 1, *(void *)&v21, *(void *)&v24[1], (unsigned __int16)~v21.i16[3]);
                rgba64_DplusDM(v24 + 2, *(void *)&v21, *(void *)&v24[2], (unsigned __int16)~v21.i16[3]);
                unint64_t v73 = (unint64_t)v24[3];
                unsigned int v72 = v24 + 3;
                rgba64_DplusDM(v72, *(void *)&v21, v73, (unsigned __int16)~v21.i16[3]);
                unint64_t v24 = v72 + 1;
                --v71;
              }
              while (v71 > 1);
              int v70 = v723;
            }
            if (v70 < 1)
            {
              int v75 = (unint64_t *)v24;
            }
            else
            {
              unsigned int v74 = v70 + 1;
              int v75 = (unint64_t *)v24;
              do
              {
                unint64_t v76 = *v75++;
                rgba64_DplusDM(v24, *(void *)&v21, v76, (unsigned __int16)~v21.i16[3]);
                --v74;
                unint64_t v24 = (uint16x4_t *)v75;
              }
              while (v74 > 1);
            }
            unint64_t v24 = (uint16x4_t *)&v75[v64];
            --v69;
          }
          while (v69);
          goto LABEL_148;
        case 3:
          v77.i32[0] = vshr_n_u32(v21, 0x10uLL).u32[0];
          v77.i32[1] = v21.u16[2];
          v78.i32[0] = v21.u16[0];
          int v79 = v731[0];
          unint64_t v23 = v724;
          do
          {
            int v80 = v13;
            do
            {
              unint64_t v81 = HIWORD(*(unint64_t *)v24);
              if (v81 == 0xFFFF)
              {
                *unint64_t v24 = (uint16x4_t)v21;
              }
              else if (v81)
              {
                int32x2_t v82 = vdup_n_s32(v81 ^ 0xFFFF);
                uint32x2_t v83 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v77, v82);
                v78.i32[1] = HIWORD(*(void *)&v21);
                uint32x2_t v84 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v78, v82);
                int32x2_t v85 = vsub_s32((int32x2_t)__PAIR64__(v21.u32[1], v77.u32[0]), (int32x2_t)vshr_n_u32(vsra_n_u32(v83, v83, 0x10uLL), 0x10uLL));
                int8x8_t v86 = (int8x8_t)vsub_s32((int32x2_t)__PAIR64__(v22, v21.u32[0]), (int32x2_t)vshr_n_u32(vsra_n_u32(v84, v84, 0x10uLL), 0x10uLL));
                int8x8_t v87 = (int8x8_t)vshl_n_s32((int32x2_t)v86, 0x10uLL);
                v86.i16[1] = 0;
                v86.i32[1] = v87.i32[1];
                v87.i32[0] = vshl_n_s32(v85, 0x10uLL).u32[0];
                v87.i32[1] = v85.u16[2];
                *unint64_t v24 = (uint16x4_t)vorr_s8(v87, v86);
              }
              else
              {
                *unint64_t v24 = 0;
              }
              ++v24;
              --v80;
            }
            while (v80);
            v24 += v64;
            --v79;
          }
          while (v79);
          goto LABEL_314;
        case 4:
          v88.i32[0] = vshr_n_u32(v21, 0x10uLL).u32[0];
          v88.i32[1] = v21.u16[2];
          v89.i32[0] = v21.u16[0];
          int v90 = v731[0];
          unint64_t v23 = v724;
          do
          {
            int v91 = v13;
            do
            {
              unint64_t v92 = HIWORD(*(unint64_t *)v24);
              if (v92)
              {
                if (v92 != 0xFFFF)
                {
                  int32x2_t v93 = vdup_n_s32(v92);
                  uint32x2_t v94 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v88, v93);
                  v89.i32[1] = HIWORD(*(void *)&v21);
                  uint32x2_t v95 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v89, v93);
                  int32x2_t v96 = vsub_s32((int32x2_t)__PAIR64__(v21.u32[1], v88.u32[0]), (int32x2_t)vshr_n_u32(vsra_n_u32(v94, v94, 0x10uLL), 0x10uLL));
                  int8x8_t v97 = (int8x8_t)vsub_s32((int32x2_t)__PAIR64__(v22, v21.u32[0]), (int32x2_t)vshr_n_u32(vsra_n_u32(v95, v95, 0x10uLL), 0x10uLL));
                  int8x8_t v98 = (int8x8_t)vshl_n_s32((int32x2_t)v97, 0x10uLL);
                  v97.i16[1] = 0;
                  v97.i32[1] = v98.i32[1];
                  v98.i32[0] = vshl_n_s32(v96, 0x10uLL).u32[0];
                  v98.i32[1] = v96.u16[2];
                  *unint64_t v24 = (uint16x4_t)vorr_s8(v98, v97);
                }
                else
                {
                  *unint64_t v24 = 0;
                }
              }
              else
              {
                *unint64_t v24 = (uint16x4_t)v21;
              }
              ++v24;
              --v91;
            }
            while (v91);
            v24 += v64;
            --v90;
          }
          while (v90);
          goto LABEL_314;
        case 5:
          int v99 = v731[0];
          do
          {
            uint64_t v100 = (unint64_t *)v24;
            do
            {
              unint64_t v101 = *v100++;
              rgba64_DMplusDM(v24, *(void *)&v21, HIWORD(v101), v101, (unsigned __int16)~v21.i16[3]);
              unint64_t v24 = (uint16x4_t *)v100;
              LODWORD(v13) = v13 - 1;
            }
            while (v13);
            unint64_t v24 = (uint16x4_t *)&v100[v64];
            --v99;
            LODWORD(v13) = v23;
          }
          while (v99);
          goto LABEL_148;
        case 6:
          int v102 = v731[0];
          while (1)
          {
            unint64_t v103 = HIWORD(*(unint64_t *)v24);
            if ((_WORD)v103 != 0xFFFF)
            {
              if ((unsigned __int16)~(_WORD)v103 == 0xFFFF) {
                *unint64_t v24 = (uint16x4_t)v21;
              }
              else {
                rgba64_DplusDM(v24, (uint64_t)*v24, *(void *)&v21, (unsigned __int16)~(_WORD)v103);
              }
            }
            ++v24;
            LODWORD(v13) = v13 - 1;
            if (!v13)
            {
              v24 += v64;
              --v102;
              LODWORD(v13) = v23;
              if (!v102) {
                break;
              }
            }
          }
          goto LABEL_148;
        case 7:
          int32x2_t v104 = vdup_n_s32((unsigned __int16)~v21.i16[3]);
          int v105 = v731[0];
          unint64_t v23 = v724;
          do
          {
            int v106 = v13;
            do
            {
              int32x2_t v107 = (int32x2_t)*v24;
              v108.i32[0] = vshl_u32((uint32x2_t)*v24, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
              v109.i32[0] = v108.i32[0];
              v109.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v24);
              v110.i32[0] = v24->u16[0];
              v110.i32[1] = HIWORD(*(unint64_t *)v24);
              uint32x2_t v111 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v109, v104);
              uint32x2_t v112 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v110, v104);
              v108.i32[1] = HIDWORD(*(unint64_t *)v24);
              v107.i32[1] = v110.i32[1];
              int8x8_t v113 = (int8x8_t)vsub_s32(v107, (int32x2_t)vshr_n_u32(vsra_n_u32(v112, v112, 0x10uLL), 0x10uLL));
              int32x2_t v114 = vshl_n_s32((int32x2_t)v113, 0x10uLL);
              v113.i16[1] = 0;
              uint32x2_t v115 = (uint32x2_t)vsub_s32(v108, (int32x2_t)vshr_n_u32(vsra_n_u32(v111, v111, 0x10uLL), 0x10uLL));
              v113.i32[1] = v114.i32[1];
              v110.i32[0] = vshl_u32(v115, (uint32x2_t)0xFFFF00000010).u32[0];
              v110.i32[1] = v115.u16[2];
              *v24++ = (uint16x4_t)vorr_s8((int8x8_t)v110, v113);
              --v106;
            }
            while (v106);
            v24 += v64;
            --v105;
          }
          while (v105);
          goto LABEL_314;
        case 8:
          int32x2_t v116 = vdup_n_s32(v22);
          int v117 = v731[0];
          unint64_t v23 = v724;
          do
          {
            int v118 = v13;
            do
            {
              int32x2_t v119 = (int32x2_t)*v24;
              v120.i32[0] = vshl_u32((uint32x2_t)*v24, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
              v121.i32[0] = v120.i32[0];
              v121.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v24);
              v122.i32[0] = v24->u16[0];
              v122.i32[1] = HIWORD(*(unint64_t *)v24);
              uint32x2_t v123 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v121, v116);
              uint32x2_t v124 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v122, v116);
              v120.i32[1] = HIDWORD(*(unint64_t *)v24);
              v119.i32[1] = v122.i32[1];
              int8x8_t v125 = (int8x8_t)vsub_s32(v119, (int32x2_t)vshr_n_u32(vsra_n_u32(v124, v124, 0x10uLL), 0x10uLL));
              int32x2_t v126 = vshl_n_s32((int32x2_t)v125, 0x10uLL);
              v125.i16[1] = 0;
              uint32x2_t v127 = (uint32x2_t)vsub_s32(v120, (int32x2_t)vshr_n_u32(vsra_n_u32(v123, v123, 0x10uLL), 0x10uLL));
              v125.i32[1] = v126.i32[1];
              v122.i32[0] = vshl_u32(v127, (uint32x2_t)0xFFFF00000010).u32[0];
              v122.i32[1] = v127.u16[2];
              *v24++ = (uint16x4_t)vorr_s8((int8x8_t)v122, v125);
              --v118;
            }
            while (v118);
            v24 += v64;
            --v117;
          }
          while (v117);
          goto LABEL_314;
        case 9:
          int v128 = v731[0];
          do
          {
            unint64_t v129 = (unint64_t *)v24;
            do
            {
              unint64_t v130 = *v129++;
              rgba64_DMplusDM(v24, *(void *)&v21, HIWORD(v130) ^ 0xFFFF, v130, HIWORD(*(void *)&v21));
              unint64_t v24 = (uint16x4_t *)v129;
              LODWORD(v13) = v13 - 1;
            }
            while (v13);
            unint64_t v24 = (uint16x4_t *)&v129[v64];
            --v128;
            LODWORD(v13) = v23;
          }
          while (v128);
          goto LABEL_148;
        case 10:
          int v131 = v731[0];
          do
          {
            int v132 = (unint64_t *)v24;
            do
            {
              unint64_t v133 = *v132++;
              rgba64_DMplusDM(v24, *(void *)&v21, HIWORD(v133) ^ 0xFFFF, v133, (unsigned __int16)~v21.i16[3]);
              unint64_t v24 = (uint16x4_t *)v132;
              LODWORD(v13) = v13 - 1;
            }
            while (v13);
            unint64_t v24 = (uint16x4_t *)&v132[v64];
            --v131;
            LODWORD(v13) = v23;
          }
          while (v131);
          goto LABEL_148;
        case 11:
          unint64_t v134 = v22 - v21.u16[1];
          if (v22 < v21.u16[1]) {
            unint64_t v134 = 0;
          }
          *(uint32x2_t *)v135.i8 = v21;
          v135.i64[1] = HIDWORD(*(void *)&v21);
          v136.i64[0] = 0xFFFFLL;
          v136.i64[1] = 0xFFFFLL;
          int64x2_t v137 = (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v22), (uint64x2_t)vandq_s8(v135, v136));
          int v138 = v731[0];
          unint64_t v23 = v724;
          do
          {
            int v139 = v13;
            do
            {
              unint64_t v140 = HIWORD(*(unint64_t *)v24);
              unint64_t v141 = *(unint64_t *)v24 >> 16;
              if (!v10) {
                unint64_t v140 = 0xFFFFLL;
              }
              BOOL v142 = v140 >= (unsigned __int16)v141;
              unint64_t v143 = v140 - (unsigned __int16)v141;
              if (!v142) {
                unint64_t v143 = 0;
              }
              unint64_t v144 = v134 + v143;
              unint64_t v145 = v22 + v140;
              if (v144 >= 0xFFFF) {
                unint64_t v144 = 0xFFFFLL;
              }
              if (v145 >= 0xFFFF) {
                unint64_t v145 = 0xFFFFLL;
              }
              BOOL v142 = v145 >= v144;
              unint64_t v146 = v145 - v144;
              if (!v142) {
                unint64_t v146 = 0;
              }
              *(uint16x4_t *)v147.i8 = *v24;
              v147.i64[1] = HIDWORD(*(unint64_t *)v24);
              int8x16_t v148 = (int8x16_t)vaddq_s64(v137, (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v140), (uint64x2_t)vandq_s8(v147, v136)));
              int64x2_t v149 = vdupq_n_s64(v145);
              int64x2_t v150 = (int64x2_t)vqsubq_u64((uint64x2_t)v149, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v136, (uint64x2_t)v148), v148, v136));
              v149.i64[0] = v146;
              *v24++ = (uint16x4_t)vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v149), 0x10uLL), (int8x8_t)vmovn_s64(v150));
              --v139;
            }
            while (v139);
            v24 += v64;
            --v138;
          }
          while (v138);
          goto LABEL_314;
        case 12:
          int v151 = v731[0];
          do
          {
            int32x2_t v152 = (unint64_t *)v24;
            do
            {
              unint64_t v153 = *v152++;
              rgba64_DpluslD(v24, v153, *(void *)&v21);
              unint64_t v24 = (uint16x4_t *)v152;
              LODWORD(v13) = v13 - 1;
            }
            while (v13);
            unint64_t v24 = (uint16x4_t *)&v152[v64];
            --v151;
            LODWORD(v13) = v23;
          }
          while (v151);
LABEL_148:
          v731[0] = 0;
LABEL_149:
          unint64_t v23 = v724;
          goto LABEL_315;
        case 13:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v154 = v731[0];
          while (1)
          {
            int v155 = v13;
            do
            {
              unint64_t v156 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v157) = 0xFFFF;
LABEL_157:
                unint64_t v158 = PDAmultiplyPDA_14785(v156, v157, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_158;
              }
              unint64_t v157 = HIWORD(v156);
              unint64_t v158 = (unint64_t)v21;
              if (HIWORD(v156)) {
                goto LABEL_157;
              }
LABEL_158:
              *v24++ = (uint16x4_t)v158;
              --v155;
            }
            while (v155);
            v24 += v64;
            if (!--v154) {
              goto LABEL_314;
            }
          }
        case 14:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v159 = v731[0];
          while (1)
          {
            int v160 = v13;
            do
            {
              unint64_t v161 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v162) = 0xFFFF;
LABEL_168:
                unint64_t v163 = PDAscreenPDA_14786(v161, v162, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_169;
              }
              unint64_t v162 = HIWORD(v161);
              unint64_t v163 = (unint64_t)v21;
              if (HIWORD(v161)) {
                goto LABEL_168;
              }
LABEL_169:
              *v24++ = (uint16x4_t)v163;
              --v160;
            }
            while (v160);
            v24 += v64;
            if (!--v159) {
              goto LABEL_314;
            }
          }
        case 15:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v164 = v731[0];
          while (1)
          {
            int v165 = v13;
            do
            {
              unint64_t v166 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v167) = 0xFFFF;
LABEL_179:
                unint64_t v168 = PDAoverlayPDA_14787(v166, v167, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_180;
              }
              unint64_t v167 = HIWORD(v166);
              unint64_t v168 = (unint64_t)v21;
              if (HIWORD(v166)) {
                goto LABEL_179;
              }
LABEL_180:
              *v24++ = (uint16x4_t)v168;
              --v165;
            }
            while (v165);
            v24 += v64;
            if (!--v164) {
              goto LABEL_314;
            }
          }
        case 16:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v169 = v731[0];
          while (1)
          {
            int v170 = v13;
            do
            {
              unint64_t v171 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v172) = 0xFFFF;
LABEL_190:
                unint64_t v173 = PDAdarkenPDA_14789(v171, v172, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_191;
              }
              unint64_t v172 = HIWORD(v171);
              unint64_t v173 = (unint64_t)v21;
              if (HIWORD(v171)) {
                goto LABEL_190;
              }
LABEL_191:
              *v24++ = (uint16x4_t)v173;
              --v170;
            }
            while (v170);
            v24 += v64;
            if (!--v169) {
              goto LABEL_314;
            }
          }
        case 17:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v174 = v731[0];
          while (1)
          {
            int v175 = v13;
            do
            {
              unint64_t v176 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v177) = 0xFFFF;
LABEL_201:
                unint64_t v178 = PDAlightenPDA_14788(v176, v177, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_202;
              }
              unint64_t v177 = HIWORD(v176);
              unint64_t v178 = (unint64_t)v21;
              if (HIWORD(v176)) {
                goto LABEL_201;
              }
LABEL_202:
              *v24++ = (uint16x4_t)v178;
              --v175;
            }
            while (v175);
            v24 += v64;
            if (!--v174) {
              goto LABEL_314;
            }
          }
        case 18:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v179 = v731[0];
          while (1)
          {
            int v180 = v13;
            do
            {
              unint64_t v181 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v182) = 0xFFFF;
LABEL_212:
                unint64_t v183 = PDAcolordodgePDA_14790(v181, v182, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_213;
              }
              unint64_t v182 = HIWORD(v181);
              unint64_t v183 = (unint64_t)v21;
              if (HIWORD(v181)) {
                goto LABEL_212;
              }
LABEL_213:
              *v24++ = (uint16x4_t)v183;
              --v180;
            }
            while (v180);
            v24 += v64;
            if (!--v179) {
              goto LABEL_314;
            }
          }
        case 19:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v184 = v731[0];
          while (1)
          {
            int v185 = v13;
            do
            {
              unint64_t v186 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v187) = 0xFFFF;
LABEL_223:
                unint64_t v188 = PDAcolorburnPDA_14791(v186, v187, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_224;
              }
              unint64_t v187 = HIWORD(v186);
              unint64_t v188 = (unint64_t)v21;
              if (HIWORD(v186)) {
                goto LABEL_223;
              }
LABEL_224:
              *v24++ = (uint16x4_t)v188;
              --v185;
            }
            while (v185);
            v24 += v64;
            if (!--v184) {
              goto LABEL_314;
            }
          }
        case 20:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v189 = v731[0];
          while (1)
          {
            int v190 = v13;
            do
            {
              unint64_t v191 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v192) = 0xFFFF;
LABEL_234:
                unint64_t v193 = PDAsoftlightPDA_14793(v191, v192, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_235;
              }
              unint64_t v192 = HIWORD(v191);
              unint64_t v193 = (unint64_t)v21;
              if (HIWORD(v191)) {
                goto LABEL_234;
              }
LABEL_235:
              *v24++ = (uint16x4_t)v193;
              --v190;
            }
            while (v190);
            v24 += v64;
            if (!--v189) {
              goto LABEL_314;
            }
          }
        case 21:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v194 = v731[0];
          while (1)
          {
            int v195 = v13;
            do
            {
              unint64_t v196 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v197) = 0xFFFF;
LABEL_245:
                unint64_t v198 = PDAhardlightPDA_14792(v196, v197, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_246;
              }
              unint64_t v197 = HIWORD(v196);
              unint64_t v198 = (unint64_t)v21;
              if (HIWORD(v196)) {
                goto LABEL_245;
              }
LABEL_246:
              *v24++ = (uint16x4_t)v198;
              --v195;
            }
            while (v195);
            v24 += v64;
            if (!--v194) {
              goto LABEL_314;
            }
          }
        case 22:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v199 = v731[0];
          while (1)
          {
            int v200 = v13;
            do
            {
              unint64_t v201 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v202) = 0xFFFF;
LABEL_256:
                unint64_t v203 = PDAdifferencePDA_14794(v201, v202, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_257;
              }
              unint64_t v202 = HIWORD(v201);
              unint64_t v203 = (unint64_t)v21;
              if (HIWORD(v201)) {
                goto LABEL_256;
              }
LABEL_257:
              *v24++ = (uint16x4_t)v203;
              --v200;
            }
            while (v200);
            v24 += v64;
            if (!--v199) {
              goto LABEL_314;
            }
          }
        case 23:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v204 = v731[0];
          while (1)
          {
            int v205 = v13;
            do
            {
              unint64_t v206 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v207) = 0xFFFF;
LABEL_267:
                unint64_t v208 = PDAexclusionPDA_14795(v206, v207, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_268;
              }
              unint64_t v207 = HIWORD(v206);
              unint64_t v208 = (unint64_t)v21;
              if (HIWORD(v206)) {
                goto LABEL_267;
              }
LABEL_268:
              *v24++ = (uint16x4_t)v208;
              --v205;
            }
            while (v205);
            v24 += v64;
            if (!--v204) {
              goto LABEL_314;
            }
          }
        case 24:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v209 = v731[0];
          while (1)
          {
            int v210 = v13;
            do
            {
              unint64_t v211 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v212) = 0xFFFF;
LABEL_278:
                unint64_t v213 = PDAhuePDA_14796(v211, v212, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_279;
              }
              unint64_t v212 = HIWORD(v211);
              unint64_t v213 = (unint64_t)v21;
              if (HIWORD(v211)) {
                goto LABEL_278;
              }
LABEL_279:
              *v24++ = (uint16x4_t)v213;
              --v210;
            }
            while (v210);
            v24 += v64;
            if (!--v209) {
              goto LABEL_314;
            }
          }
        case 25:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v214 = v731[0];
          while (1)
          {
            int v215 = v13;
            do
            {
              unint64_t v216 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v217) = 0xFFFF;
LABEL_289:
                unint64_t v218 = PDAsaturationPDA_14797(v216, v217, *(void *)&v21, HIWORD(*(void *)&v21));
                goto LABEL_290;
              }
              unint64_t v217 = HIWORD(v216);
              unint64_t v218 = (unint64_t)v21;
              if (HIWORD(v216)) {
                goto LABEL_289;
              }
LABEL_290:
              *v24++ = (uint16x4_t)v218;
              --v215;
            }
            while (v215);
            v24 += v64;
            if (!--v214) {
              goto LABEL_314;
            }
          }
        case 26:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v219 = v731[0];
          while (1)
          {
            int v220 = v13;
            do
            {
              unint64_t v221 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v222) = 0xFFFF;
LABEL_300:
                unint64_t v223 = PDAluminosityPDA_14798(*(void *)&v21, HIWORD(*(void *)&v21), v221, v222);
                goto LABEL_301;
              }
              unint64_t v222 = HIWORD(v221);
              unint64_t v223 = (unint64_t)v21;
              if (HIWORD(v221)) {
                goto LABEL_300;
              }
LABEL_301:
              *v24++ = (uint16x4_t)v223;
              --v220;
            }
            while (v220);
            v24 += v64;
            if (!--v219) {
              goto LABEL_314;
            }
          }
        case 27:
          unint64_t v23 = v724;
          if (!v22) {
            goto LABEL_315;
          }
          int v224 = v731[0];
          break;
        default:
          goto LABEL_315;
      }
LABEL_306:
      int v225 = v13;
      while (1)
      {
        unint64_t v226 = (unint64_t)*v24;
        if (v10)
        {
          unint64_t v227 = HIWORD(v226);
          unint64_t v228 = (unint64_t)v21;
          if (!HIWORD(v226)) {
            goto LABEL_312;
          }
        }
        else
        {
          LODWORD(v227) = 0xFFFF;
        }
        unint64_t v228 = PDAluminosityPDA_14798(v226, v227, *(void *)&v21, HIWORD(*(void *)&v21));
LABEL_312:
        *v24++ = (uint16x4_t)v228;
        if (!--v225)
        {
          v24 += v64;
          if (!--v224)
          {
LABEL_314:
            v731[0] = 0;
LABEL_315:
            unint64_t v24 = v726;
            uint64_t v26 = v729;
            if (!v729) {
              return 1;
            }
            uint64_t v730 = 0;
LABEL_317:
            if (!shape_enum_clip_next(v26, (int *)&v730 + 1, &v730, v741, v731))
            {
              float v55 = (void *)v26;
              goto LABEL_993;
            }
            uint64_t v729 = v26;
            v24 += v23 * (int)v730 + SHIDWORD(v730);
            unint64_t v13 = v741[0];
            goto LABEL_58;
          }
          goto LABEL_306;
        }
      }
    }
    v741[0] = *(_DWORD *)(v5 + 4);
    v731[0] = v15;
    uint64_t v34 = *(void *)(v5 + 40);
    uint64_t v35 = *(void *)(v5 + 88);
    uint64_t v37 = *(int *)(v5 + 12);
    uint64_t v36 = *(int *)(v5 + 16);
    long long v38 = (_DWORD *)v5;
    unint64_t v39 = (unint64_t)*(int *)(v5 + 28) >> 3;
    unint64_t v40 = v34 + 8 * (v37 + v39 * v36);
    int v41 = v38[14];
    int v42 = v38[15];
    int v43 = v8 & 0xFF00;
    unint64_t v44 = (int)v38[19];
    if (v43 != 256)
    {
      uint64_t v45 = v38[16];
      int v713 = v38[17];
      unint64_t v725 = v35 + 8 * (v44 >> 3) * v713;
      BOOL v48 = v9 != 0;
      if (v16)
      {
        unint64_t v727 = v44 >> 3;
        uint64_t v728 = v35;
        int v706 = v38[15];
        int v707 = v38[14];
        uint64_t v47 = 1;
        unint64_t v49 = v35;
LABEL_54:
        uint64_t v719 = v47;
        shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, v47, v39, 1, v38[26], v38[27], v13, v15);
        uint64_t v63 = v62;
        if (!v62) {
          return 1;
        }
        while (2)
        {
          if (!shape_enum_clip_next(v63, (int *)&v730 + 1, &v730, v741, v731))
          {
            float v55 = (void *)v63;
LABEL_993:
            free(v55);
            return 1;
          }
          uint64_t v714 = v63;
          if (v725)
          {
            float v59 = (uint16x4_t *)(v40 + 8 * v39 * (int)v730 + 8 * SHIDWORD(v730));
            uint64_t v700 = v35 + 8 * v727 * (((int)v730 + *(_DWORD *)(v708 + 60)) % v713);
            uint64_t v58 = v700 + 8 * ((HIDWORD(v730) + *(_DWORD *)(v708 + 56)) % (int)v45);
            unint64_t v49 = v700 + 8 * (int)v45;
            uint64_t v728 = v58;
            int v722 = v741[0];
            int v701 = v741[0];
            int v706 = ((int)v730 + *(_DWORD *)(v708 + 60)) % v713;
            int v707 = (HIDWORD(v730) + *(_DWORD *)(v708 + 56)) % (int)v45;
          }
          else
          {
            int v722 = v741[0];
            int v701 = v741[0] * v719;
            float v59 = (uint16x4_t *)(v40 + 8 * v39 * (int)v730 + 8 * HIDWORD(v730) * (int)v719);
            uint64_t v58 = v35 + 8 * (int)v730 * (int)v45 + 8 * HIDWORD(v730) * (int)v719;
            unint64_t v727 = (int)v45 - v741[0] * (int)v719;
          }
          unint64_t v720 = v39 - v701;
          uint64_t v47 = v719;
LABEL_322:
          uint64_t v719 = v47;
          switch(v11)
          {
            case 0:
              unint64_t v229 = &v59[-v722 + 1];
              uint64_t v230 = v720 + v722;
              if ((int)v47 < 0) {
                uint64_t v230 = v720 - v722;
              }
              else {
                unint64_t v229 = v59;
              }
              v231 = (char *)&v229[(v230 * (v731[0] - 1)) & (v230 >> 63)];
              if (v230 < 0) {
                uint64_t v230 = -v230;
              }
              CGBlt_fillBytes(8 * v722, v731[0], 0, v231, 8 * v230);
              goto LABEL_985;
            case 1:
              int v232 = *(unsigned __int8 *)(v708 + 1);
              if (v232 == 2)
              {
                if (v722 < 4
                  || (8 * v45) > 0x40
                  || (v4.i32[0] = 8 * v45, uint8x8_t v672 = (uint8x8_t)vcnt_s8(v4),
                                           v672.i16[0] = vaddlv_u8(v672),
                                           v672.i32[0] > 1u))
                {
LABEL_938:
                  int v673 = v731[0];
                  uint64_t v674 = 8 * (int)v47;
                  if (v10 == 0 || v48)
                  {
                    do
                    {
                      int v675 = v722;
                      do
                      {
                        *float v59 = *(uint16x4_t *)v58;
                        unint64_t v676 = v58 + 8 * (int)v47;
                        if (v676 >= v49) {
                          uint64_t v677 = -(uint64_t)(int)v45;
                        }
                        else {
                          uint64_t v677 = 0;
                        }
                        uint64_t v58 = v676 + 8 * v677;
                        float v59 = (uint16x4_t *)((char *)v59 + v674);
                        --v675;
                      }
                      while (v675);
                      v59 += v720;
                      uint64_t v678 = v728;
                      unint64_t v679 = v728 + 8 * v727;
                      if (v679 >= v725) {
                        uint64_t v680 = -(uint64_t)(v727 * v713);
                      }
                      else {
                        uint64_t v680 = 0;
                      }
                      uint64_t v681 = v679 + 8 * v680;
                      uint64_t v682 = v49 + 8 * v680 + 8 * v727;
                      if (v725)
                      {
                        unint64_t v49 = v682;
                        uint64_t v678 = v681;
                      }
                      uint64_t v728 = v678;
                      if (v725) {
                        uint64_t v58 = v681;
                      }
                      else {
                        v58 += 8 * v727;
                      }
                      --v673;
                    }
                    while (v673);
                  }
                  else
                  {
                    do
                    {
                      int v683 = v722;
                      do
                      {
                        *float v59 = (uint16x4_t)(*(void *)v58 | 0xFFFF000000000000);
                        unint64_t v684 = v58 + 8 * (int)v47;
                        if (v684 >= v49) {
                          uint64_t v685 = -(uint64_t)(int)v45;
                        }
                        else {
                          uint64_t v685 = 0;
                        }
                        uint64_t v58 = v684 + 8 * v685;
                        float v59 = (uint16x4_t *)((char *)v59 + v674);
                        --v683;
                      }
                      while (v683);
                      v59 += v720;
                      uint64_t v686 = v728;
                      unint64_t v687 = v728 + 8 * v727;
                      if (v687 >= v725) {
                        uint64_t v688 = -(uint64_t)(v727 * v713);
                      }
                      else {
                        uint64_t v688 = 0;
                      }
                      uint64_t v689 = v687 + 8 * v688;
                      uint64_t v690 = v49 + 8 * v688 + 8 * v727;
                      if (v725)
                      {
                        unint64_t v49 = v690;
                        uint64_t v686 = v689;
                      }
                      uint64_t v728 = v686;
                      if (v725) {
                        uint64_t v58 = v689;
                      }
                      else {
                        v58 += 8 * v727;
                      }
                      --v673;
                    }
                    while (v673);
                  }
                  goto LABEL_984;
                }
                CGSFillDRAM64((unint64_t)v59, 8 * (v722 + v720), 8 * v722, v731[0], v35, 8 * v727, 8 * v45, v713, 8 * v707, v706);
              }
              else
              {
                if (v232 != 1) {
                  goto LABEL_938;
                }
                if (v10 != 0 && !v48)
                {
                  int v691 = v731[0];
                  do
                  {
                    int v692 = v722;
                    do
                    {
                      *float v59 = (uint16x4_t)(*(void *)v58 | 0xFFFF000000000000);
                      unint64_t v693 = v58 + 8 * (int)v47;
                      if (v693 >= v49) {
                        uint64_t v694 = -(uint64_t)(int)v45;
                      }
                      else {
                        uint64_t v694 = 0;
                      }
                      uint64_t v58 = v693 + 8 * v694;
                      v59 += (int)v47;
                      --v692;
                    }
                    while (v692);
                    v59 += v720;
                    uint64_t v695 = v728;
                    unint64_t v696 = v728 + 8 * v727;
                    if (v696 >= v725) {
                      uint64_t v697 = -(uint64_t)(v727 * v713);
                    }
                    else {
                      uint64_t v697 = 0;
                    }
                    uint64_t v698 = v696 + 8 * v697;
                    uint64_t v699 = v49 + 8 * v697 + 8 * v727;
                    if (v725)
                    {
                      unint64_t v49 = v699;
                      uint64_t v695 = v698;
                    }
                    uint64_t v728 = v695;
                    if (v725) {
                      uint64_t v58 = v698;
                    }
                    else {
                      v58 += 8 * v727;
                    }
                    --v691;
                  }
                  while (v691);
                  goto LABEL_984;
                }
                if ((v47 & 0x80000000) != 0)
                {
                  uint64_t v233 = v727 - v722;
                  v58 -= 8 * (v722 - 1);
                  uint64_t v234 = v720 - v722;
                  v59 += -v722 + 1;
                }
                else
                {
                  uint64_t v233 = v727 + v722;
                  uint64_t v234 = v720 + v722;
                }
                uint64_t v702 = v731[0] - 1;
                v703 = (char *)(v58 + 8 * ((v233 * v702) & (v233 >> 63)));
                if (v233 >= 0) {
                  uint64_t v704 = v233;
                }
                else {
                  uint64_t v704 = -v233;
                }
                if (v234 >= 0) {
                  LODWORD(v705) = v234;
                }
                else {
                  uint64_t v705 = -v234;
                }
                unint64_t v727 = v704;
                CGBlt_copyBytes(8 * v722, v731[0], v703, (char *)&v59[(v234 * v702) & (v234 >> 63)], 8 * v704, 8 * v705);
              }
LABEL_985:
              uint64_t v63 = v714;
              if (!v714) {
                return 1;
              }
              uint64_t v730 = 0;
              continue;
            case 2:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v235 = (int)v47;
              uint64_t v236 = -(uint64_t)(int)v45;
              uint64_t v709 = v45;
              int v237 = v731[0];
              uint64_t v238 = 8 * (int)v47;
              do
              {
                int v716 = v237;
                int v239 = v722;
                do
                {
                  uint64_t v240 = *(void *)v58;
                  uint64_t v241 = HIWORD(*(void *)v58);
                  if (v241)
                  {
                    if (v241 == 0xFFFF) {
                      *float v59 = (uint16x4_t)v240;
                    }
                    else {
                      rgba64_DplusDM(v59, v240, (unint64_t)*v59, v241 ^ 0xFFFF);
                    }
                  }
                  unint64_t v242 = v58 + 8 * v235;
                  if (v242 >= v49) {
                    uint64_t v243 = v236;
                  }
                  else {
                    uint64_t v243 = 0;
                  }
                  uint64_t v58 = v242 + 8 * v243;
                  float v59 = (uint16x4_t *)((char *)v59 + v238);
                  --v239;
                }
                while (v239);
                v59 += v720;
                uint64_t v244 = v728;
                unint64_t v245 = v728 + 8 * v727;
                uint64_t v246 = -(uint64_t)(v727 * v713);
                if (v245 < v725) {
                  uint64_t v246 = 0;
                }
                uint64_t v247 = v245 + 8 * v246;
                uint64_t v248 = v49 + 8 * v246 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v248;
                  uint64_t v244 = v247;
                }
                uint64_t v728 = v244;
                if (v725) {
                  uint64_t v58 = v247;
                }
                else {
                  v58 += 8 * v727;
                }
                int v237 = v716 - 1;
              }
              while (v716 != 1);
              goto LABEL_933;
            case 3:
              int v249 = v731[0];
              do
              {
                int v250 = v722;
                do
                {
                  unint64_t v251 = HIWORD(*(unint64_t *)v59);
                  if (v251 == 0xFFFF)
                  {
                    unint64_t v252 = *(void *)v58 & 0xFFFF000000000000;
                    if (!v48) {
                      unint64_t v252 = 0xFFFF000000000000;
                    }
                    *float v59 = (uint16x4_t)(v252 & 0xFFFF000000000000 | *(void *)v58 & 0xFFFFFFFFFFFFLL);
                  }
                  else if (v251)
                  {
                    int8x8_t v253 = *(int8x8_t *)v58;
                    if (v48) {
                      __int32 v254 = HIWORD(*(void *)v58);
                    }
                    else {
                      __int32 v254 = 0xFFFF;
                    }
                    int32x2_t v255 = vdup_n_s32(v251 ^ 0xFFFF);
                    uint32x2_t v256 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8(v253, (int8x8_t)0xFFFF0000FFFFLL), v255);
                    int32x2_t v257 = vsub_s32((int32x2_t)v253, (int32x2_t)vshr_n_u32(vsra_n_u32(v256, v256, 0x10uLL), 0x10uLL));
                    v258.i32[0] = HIWORD(v253.i32[0]);
                    v258.i32[1] = v254;
                    uint32x2_t v259 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v258, v255);
                    *float v59 = (uint16x4_t)vsli_n_s32(v257, vsub_s32(v258, (int32x2_t)vshr_n_u32(vsra_n_u32(v259, v259, 0x10uLL), 0x10uLL)), 0x10uLL);
                  }
                  else
                  {
                    *float v59 = 0;
                  }
                  unint64_t v260 = v58 + 8 * (int)v47;
                  if (v260 >= v49) {
                    uint64_t v261 = -(uint64_t)(int)v45;
                  }
                  else {
                    uint64_t v261 = 0;
                  }
                  uint64_t v58 = v260 + 8 * v261;
                  v59 += (int)v47;
                  --v250;
                }
                while (v250);
                v59 += v720;
                uint64_t v262 = v728;
                unint64_t v263 = v728 + 8 * v727;
                if (v263 >= v725) {
                  uint64_t v264 = -(uint64_t)(v727 * v713);
                }
                else {
                  uint64_t v264 = 0;
                }
                uint64_t v265 = v263 + 8 * v264;
                uint64_t v266 = v49 + 8 * v264 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v266;
                  uint64_t v262 = v265;
                }
                uint64_t v728 = v262;
                if (v725) {
                  uint64_t v58 = v265;
                }
                else {
                  v58 += 8 * v727;
                }
                --v249;
              }
              while (v249);
              goto LABEL_984;
            case 4:
              int v267 = v731[0];
              do
              {
                int v268 = v722;
                do
                {
                  unint64_t v269 = HIWORD(*(unint64_t *)v59);
                  if (v269)
                  {
                    if (v269 != 0xFFFF)
                    {
                      int8x8_t v271 = *(int8x8_t *)v58;
                      if (v48) {
                        __int32 v272 = HIWORD(*(void *)v58);
                      }
                      else {
                        __int32 v272 = 0xFFFF;
                      }
                      int32x2_t v273 = vdup_n_s32(v269);
                      uint32x2_t v274 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8(v271, (int8x8_t)0xFFFF0000FFFFLL), v273);
                      int32x2_t v275 = vsub_s32((int32x2_t)v271, (int32x2_t)vshr_n_u32(vsra_n_u32(v274, v274, 0x10uLL), 0x10uLL));
                      v276.i32[0] = HIWORD(v271.i32[0]);
                      v276.i32[1] = v272;
                      uint32x2_t v277 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v276, v273);
                      *float v59 = (uint16x4_t)vsli_n_s32(v275, vsub_s32(v276, (int32x2_t)vshr_n_u32(vsra_n_u32(v277, v277, 0x10uLL), 0x10uLL)), 0x10uLL);
                    }
                    else
                    {
                      *float v59 = 0;
                    }
                  }
                  else
                  {
                    unint64_t v270 = *(void *)v58 & 0xFFFF000000000000;
                    if (!v48) {
                      unint64_t v270 = 0xFFFF000000000000;
                    }
                    *float v59 = (uint16x4_t)(v270 & 0xFFFF000000000000 | *(void *)v58 & 0xFFFFFFFFFFFFLL);
                  }
                  unint64_t v278 = v58 + 8 * (int)v47;
                  if (v278 >= v49) {
                    uint64_t v279 = -(uint64_t)(int)v45;
                  }
                  else {
                    uint64_t v279 = 0;
                  }
                  uint64_t v58 = v278 + 8 * v279;
                  v59 += (int)v47;
                  --v268;
                }
                while (v268);
                v59 += v720;
                uint64_t v280 = v728;
                unint64_t v281 = v728 + 8 * v727;
                if (v281 >= v725) {
                  uint64_t v282 = -(uint64_t)(v727 * v713);
                }
                else {
                  uint64_t v282 = 0;
                }
                uint64_t v283 = v281 + 8 * v282;
                uint64_t v284 = v49 + 8 * v282 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v284;
                  uint64_t v280 = v283;
                }
                uint64_t v728 = v280;
                if (v725) {
                  uint64_t v58 = v283;
                }
                else {
                  v58 += 8 * v727;
                }
                --v267;
              }
              while (v267);
              goto LABEL_984;
            case 5:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v285 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v286 = -(uint64_t)(int)v45;
              int v287 = v731[0];
              uint64_t v288 = 8 * (int)v47;
              do
              {
                int v289 = v722;
                do
                {
                  rgba64_DMplusDM(v59, *(void *)v58, HIWORD(*(unint64_t *)v59), (unint64_t)*v59, HIWORD(*(void *)v58) ^ 0xFFFF);
                  unint64_t v290 = v58 + 8 * v285;
                  if (v290 >= v49) {
                    uint64_t v291 = v286;
                  }
                  else {
                    uint64_t v291 = 0;
                  }
                  uint64_t v58 = v290 + 8 * v291;
                  float v59 = (uint16x4_t *)((char *)v59 + v288);
                  --v289;
                }
                while (v289);
                v59 += v720;
                uint64_t v292 = v728;
                unint64_t v293 = v728 + 8 * v727;
                uint64_t v294 = -(uint64_t)(v727 * v713);
                if (v293 < v725) {
                  uint64_t v294 = 0;
                }
                uint64_t v295 = v293 + 8 * v294;
                uint64_t v296 = v49 + 8 * v294 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v296;
                  uint64_t v292 = v295;
                }
                uint64_t v728 = v292;
                if (v725) {
                  uint64_t v58 = v295;
                }
                else {
                  v58 += 8 * v727;
                }
                --v287;
              }
              while (v287);
              goto LABEL_933;
            case 6:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v297 = (int)v47;
              uint64_t v298 = -(uint64_t)(int)v45;
              uint64_t v709 = v45;
              int v299 = v731[0];
              uint64_t v300 = 8 * (int)v47;
              do
              {
                int v717 = v299;
                int v301 = v722;
                do
                {
                  unint64_t v302 = HIWORD(*(unint64_t *)v59);
                  if ((_WORD)v302 != 0xFFFF)
                  {
                    if ((unsigned __int16)~(_WORD)v302 == 0xFFFF)
                    {
                      unint64_t v303 = *(void *)v58 & 0xFFFF000000000000;
                      if (!v48) {
                        unint64_t v303 = 0xFFFF000000000000;
                      }
                      *float v59 = (uint16x4_t)(v303 & 0xFFFF000000000000 | *(void *)v58 & 0xFFFFFFFFFFFFLL);
                    }
                    else
                    {
                      unsigned __int16 v304 = ~(_WORD)v302;
                      uint64_t v305 = HIWORD(*(void *)v58);
                      if (!v48) {
                        LOWORD(v305) = -1;
                      }
                      rgba64_DplusDAM(v59, (uint64_t)*v59, *(void *)v58, (unsigned __int16)v305, v304);
                    }
                  }
                  unint64_t v306 = v58 + 8 * v297;
                  if (v306 >= v49) {
                    uint64_t v307 = v298;
                  }
                  else {
                    uint64_t v307 = 0;
                  }
                  uint64_t v58 = v306 + 8 * v307;
                  float v59 = (uint16x4_t *)((char *)v59 + v300);
                  --v301;
                }
                while (v301);
                v59 += v720;
                uint64_t v308 = v728;
                unint64_t v309 = v728 + 8 * v727;
                uint64_t v310 = -(uint64_t)(v727 * v713);
                if (v309 < v725) {
                  uint64_t v310 = 0;
                }
                uint64_t v311 = v309 + 8 * v310;
                uint64_t v312 = v49 + 8 * v310 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v312;
                  uint64_t v308 = v311;
                }
                uint64_t v728 = v308;
                if (v725) {
                  uint64_t v58 = v311;
                }
                else {
                  v58 += 8 * v727;
                }
                int v299 = v717 - 1;
              }
              while (v717 != 1);
              goto LABEL_933;
            case 7:
              int v313 = v731[0];
              do
              {
                int v314 = v722;
                do
                {
                  uint64_t v315 = HIWORD(*(void *)v58);
                  if (v315 != 0xFFFF)
                  {
                    if (v315)
                    {
                      int32x2_t v316 = (int32x2_t)*v59;
                      v317.i32[0] = vshl_u32((uint32x2_t)*v59, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                      v318.i32[0] = v317.i32[0];
                      v318.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v59);
                      int32x2_t v319 = vdup_n_s32(v315 ^ 0xFFFF);
                      v320.i32[0] = v59->u16[0];
                      v320.i32[1] = HIWORD(*(unint64_t *)v59);
                      uint32x2_t v321 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v318, v319);
                      uint32x2_t v322 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v320, v319);
                      v317.i32[1] = HIDWORD(*(unint64_t *)v59);
                      uint32x2_t v323 = (uint32x2_t)vsub_s32(v317, (int32x2_t)vshr_n_u32(vsra_n_u32(v321, v321, 0x10uLL), 0x10uLL));
                      v316.i32[1] = v320.i32[1];
                      int8x8_t v324 = (int8x8_t)vsub_s32(v316, (int32x2_t)vshr_n_u32(vsra_n_u32(v322, v322, 0x10uLL), 0x10uLL));
                      int8x8_t v325 = (int8x8_t)vshl_n_s32((int32x2_t)v324, 0x10uLL);
                      v324.i16[1] = 0;
                      v324.i32[1] = v325.i32[1];
                      v325.i32[0] = vshl_u32(v323, (uint32x2_t)0xFFFF00000010).u32[0];
                      v325.i32[1] = v323.u16[2];
                      *float v59 = (uint16x4_t)vorr_s8(v325, v324);
                    }
                    else
                    {
                      *float v59 = 0;
                    }
                  }
                  unint64_t v326 = v58 + 8 * (int)v47;
                  if (v326 >= v49) {
                    uint64_t v327 = -(uint64_t)(int)v45;
                  }
                  else {
                    uint64_t v327 = 0;
                  }
                  uint64_t v58 = v326 + 8 * v327;
                  v59 += (int)v47;
                  --v314;
                }
                while (v314);
                v59 += v720;
                uint64_t v328 = v728;
                unint64_t v329 = v728 + 8 * v727;
                if (v329 >= v725) {
                  uint64_t v330 = -(uint64_t)(v727 * v713);
                }
                else {
                  uint64_t v330 = 0;
                }
                uint64_t v331 = v329 + 8 * v330;
                uint64_t v332 = v49 + 8 * v330 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v332;
                  uint64_t v328 = v331;
                }
                uint64_t v728 = v328;
                if (v725) {
                  uint64_t v58 = v331;
                }
                else {
                  v58 += 8 * v727;
                }
                --v313;
              }
              while (v313);
              goto LABEL_984;
            case 8:
              int v333 = v731[0];
              do
              {
                int v334 = v722;
                do
                {
                  uint64_t v335 = HIWORD(*(void *)v58);
                  if (v335)
                  {
                    if (v335 != 0xFFFF)
                    {
                      int32x2_t v336 = (int32x2_t)*v59;
                      v337.i32[0] = vshl_u32((uint32x2_t)*v59, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                      v338.i32[0] = v337.i32[0];
                      v338.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v59);
                      int32x2_t v339 = vdup_n_s32(v335);
                      v340.i32[0] = v59->u16[0];
                      v340.i32[1] = HIWORD(*(unint64_t *)v59);
                      uint32x2_t v341 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v338, v339);
                      uint32x2_t v342 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v340, v339);
                      v337.i32[1] = HIDWORD(*(unint64_t *)v59);
                      uint32x2_t v343 = (uint32x2_t)vsub_s32(v337, (int32x2_t)vshr_n_u32(vsra_n_u32(v341, v341, 0x10uLL), 0x10uLL));
                      v336.i32[1] = v340.i32[1];
                      int8x8_t v344 = (int8x8_t)vsub_s32(v336, (int32x2_t)vshr_n_u32(vsra_n_u32(v342, v342, 0x10uLL), 0x10uLL));
                      int8x8_t v345 = (int8x8_t)vshl_n_s32((int32x2_t)v344, 0x10uLL);
                      v344.i16[1] = 0;
                      v344.i32[1] = v345.i32[1];
                      v345.i32[0] = vshl_u32(v343, (uint32x2_t)0xFFFF00000010).u32[0];
                      v345.i32[1] = v343.u16[2];
                      *float v59 = (uint16x4_t)vorr_s8(v345, v344);
                    }
                    else
                    {
                      *float v59 = 0;
                    }
                  }
                  unint64_t v346 = v58 + 8 * (int)v47;
                  if (v346 >= v49) {
                    uint64_t v347 = -(uint64_t)(int)v45;
                  }
                  else {
                    uint64_t v347 = 0;
                  }
                  uint64_t v58 = v346 + 8 * v347;
                  v59 += (int)v47;
                  --v334;
                }
                while (v334);
                v59 += v720;
                uint64_t v348 = v728;
                unint64_t v349 = v728 + 8 * v727;
                if (v349 >= v725) {
                  uint64_t v350 = -(uint64_t)(v727 * v713);
                }
                else {
                  uint64_t v350 = 0;
                }
                uint64_t v351 = v349 + 8 * v350;
                uint64_t v352 = v49 + 8 * v350 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v352;
                  uint64_t v348 = v351;
                }
                uint64_t v728 = v348;
                if (v725) {
                  uint64_t v58 = v351;
                }
                else {
                  v58 += 8 * v727;
                }
                --v333;
              }
              while (v333);
              goto LABEL_984;
            case 9:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v353 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v354 = -(uint64_t)(int)v45;
              int v355 = v731[0];
              uint64_t v356 = 8 * (int)v47;
              do
              {
                int v357 = v722;
                do
                {
                  rgba64_DMplusDM(v59, *(void *)v58, HIWORD(*(unint64_t *)v59) ^ 0xFFFF, (unint64_t)*v59, HIWORD(*(void *)v58));
                  unint64_t v358 = v58 + 8 * v353;
                  if (v358 >= v49) {
                    uint64_t v359 = v354;
                  }
                  else {
                    uint64_t v359 = 0;
                  }
                  uint64_t v58 = v358 + 8 * v359;
                  float v59 = (uint16x4_t *)((char *)v59 + v356);
                  --v357;
                }
                while (v357);
                v59 += v720;
                uint64_t v360 = v728;
                unint64_t v361 = v728 + 8 * v727;
                uint64_t v362 = -(uint64_t)(v727 * v713);
                if (v361 < v725) {
                  uint64_t v362 = 0;
                }
                uint64_t v363 = v361 + 8 * v362;
                uint64_t v364 = v49 + 8 * v362 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v364;
                  uint64_t v360 = v363;
                }
                uint64_t v728 = v360;
                if (v725) {
                  uint64_t v58 = v363;
                }
                else {
                  v58 += 8 * v727;
                }
                --v355;
              }
              while (v355);
              goto LABEL_933;
            case 10:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v365 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v366 = -(uint64_t)(int)v45;
              int v367 = v731[0];
              uint64_t v368 = 8 * (int)v47;
              do
              {
                int v369 = v722;
                do
                {
                  rgba64_DMplusDM(v59, *(void *)v58, HIWORD(*(unint64_t *)v59) ^ 0xFFFF, (unint64_t)*v59, HIWORD(*(void *)v58) ^ 0xFFFF);
                  unint64_t v370 = v58 + 8 * v365;
                  if (v370 >= v49) {
                    uint64_t v371 = v366;
                  }
                  else {
                    uint64_t v371 = 0;
                  }
                  uint64_t v58 = v370 + 8 * v371;
                  float v59 = (uint16x4_t *)((char *)v59 + v368);
                  --v369;
                }
                while (v369);
                v59 += v720;
                uint64_t v372 = v728;
                unint64_t v373 = v728 + 8 * v727;
                uint64_t v374 = -(uint64_t)(v727 * v713);
                if (v373 < v725) {
                  uint64_t v374 = 0;
                }
                uint64_t v375 = v373 + 8 * v374;
                uint64_t v376 = v49 + 8 * v374 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v376;
                  uint64_t v372 = v375;
                }
                uint64_t v728 = v372;
                if (v725) {
                  uint64_t v58 = v375;
                }
                else {
                  v58 += 8 * v727;
                }
                --v367;
              }
              while (v367);
              goto LABEL_933;
            case 11:
              uint64_t v377 = (int)v47;
              int v378 = v731[0];
              uint64_t v379 = 8 * (int)v47;
              v380.i64[0] = 0xFFFFLL;
              v380.i64[1] = 0xFFFFLL;
              do
              {
                int v381 = v722;
                do
                {
                  unint64_t v382 = HIWORD(*(unint64_t *)v59);
                  unint64_t v383 = *(void *)v58;
                  unint64_t v384 = HIWORD(*(void *)v58);
                  unint64_t v385 = *(unint64_t *)v59 >> 16;
                  if (!v10) {
                    unint64_t v382 = 0xFFFFLL;
                  }
                  if (!v48) {
                    unint64_t v384 = 0xFFFFLL;
                  }
                  BOOL v142 = v382 >= (unsigned __int16)v385;
                  unint64_t v386 = v382 - (unsigned __int16)v385;
                  if (!v142) {
                    unint64_t v386 = 0;
                  }
                  unint64_t v387 = v384 - WORD1(v383);
                  if (v384 < WORD1(v383)) {
                    unint64_t v387 = 0;
                  }
                  unint64_t v388 = v387 + v386;
                  unint64_t v389 = v384 + v382;
                  if (v388 >= 0xFFFF) {
                    unint64_t v388 = 0xFFFFLL;
                  }
                  if (v389 >= 0xFFFF) {
                    unint64_t v389 = 0xFFFFLL;
                  }
                  BOOL v142 = v389 >= v388;
                  unint64_t v390 = v389 - v388;
                  if (!v142) {
                    unint64_t v390 = 0;
                  }
                  *(uint16x4_t *)v391.i8 = *v59;
                  v391.i64[1] = HIDWORD(*(unint64_t *)v59);
                  v392.i64[0] = *(void *)v58;
                  v392.i64[1] = HIDWORD(v383);
                  int8x16_t v393 = (int8x16_t)vaddq_s64((int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v384), (uint64x2_t)vandq_s8(v392, v380)), (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v382), (uint64x2_t)vandq_s8(v391, v380)));
                  int64x2_t v394 = vdupq_n_s64(v389);
                  int64x2_t v395 = (int64x2_t)vqsubq_u64((uint64x2_t)v394, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v380, (uint64x2_t)v393), v393, v380));
                  v394.i64[0] = v390;
                  *float v59 = (uint16x4_t)vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v394), 0x10uLL), (int8x8_t)vmovn_s64(v395));
                  unint64_t v396 = v58 + 8 * v377;
                  if (v396 >= v49) {
                    uint64_t v397 = -(uint64_t)(int)v45;
                  }
                  else {
                    uint64_t v397 = 0;
                  }
                  uint64_t v58 = v396 + 8 * v397;
                  float v59 = (uint16x4_t *)((char *)v59 + v379);
                  --v381;
                }
                while (v381);
                v59 += v720;
                uint64_t v398 = v728;
                unint64_t v399 = v728 + 8 * v727;
                if (v399 >= v725) {
                  uint64_t v400 = -(uint64_t)(v727 * v713);
                }
                else {
                  uint64_t v400 = 0;
                }
                uint64_t v401 = v399 + 8 * v400;
                uint64_t v402 = v49 + 8 * v400 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v402;
                  uint64_t v398 = v401;
                }
                uint64_t v728 = v398;
                if (v725) {
                  uint64_t v58 = v401;
                }
                else {
                  v58 += 8 * v727;
                }
                --v378;
              }
              while (v378);
LABEL_984:
              v731[0] = 0;
              goto LABEL_985;
            case 12:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v403 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v404 = -(uint64_t)(int)v45;
              int v405 = v731[0];
              uint64_t v406 = 8 * (int)v47;
              do
              {
                int v407 = v722;
                do
                {
                  uint64_t v408 = HIWORD(*(void *)v58);
                  if (!v48) {
                    LOWORD(v408) = -1;
                  }
                  rgba64_DpluslDA(v59, (unint64_t)*v59, *(void *)v58, (unsigned __int16)v408);
                  unint64_t v409 = v58 + 8 * v403;
                  if (v409 >= v49) {
                    uint64_t v410 = v404;
                  }
                  else {
                    uint64_t v410 = 0;
                  }
                  uint64_t v58 = v409 + 8 * v410;
                  float v59 = (uint16x4_t *)((char *)v59 + v406);
                  --v407;
                }
                while (v407);
                v59 += v720;
                uint64_t v411 = v728;
                unint64_t v412 = v728 + 8 * v727;
                uint64_t v413 = -(uint64_t)(v727 * v713);
                if (v412 < v725) {
                  uint64_t v413 = 0;
                }
                uint64_t v414 = v412 + 8 * v413;
                uint64_t v415 = v49 + 8 * v413 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v415;
                  uint64_t v411 = v414;
                }
                uint64_t v728 = v411;
                if (v725) {
                  uint64_t v58 = v414;
                }
                else {
                  v58 += 8 * v727;
                }
                --v405;
              }
              while (v405);
              goto LABEL_933;
            case 13:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v416 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v417 = -(uint64_t)(int)v45;
              int v418 = v731[0];
              uint64_t v419 = 8 * (int)v47;
              while (1)
              {
                int v420 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v421 = 0xFFFF;
LABEL_566:
                    unint64_t v422 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v423 = HIWORD(v422);
                      uint64_t v424 = *(void *)v58;
                      if (!HIWORD(v422))
                      {
                        unint64_t v425 = v424 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v421 << 48);
LABEL_571:
                        *float v59 = (uint16x4_t)v425;
                        goto LABEL_572;
                      }
                    }
                    else
                    {
                      uint64_t v424 = *(void *)v58;
                      LODWORD(v423) = 0xFFFF;
                    }
                    unint64_t v425 = PDAmultiplyPDA_14785(v422, v423, v424, v421);
                    goto LABEL_571;
                  }
                  unsigned int v421 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_566;
                  }
LABEL_572:
                  unint64_t v426 = v58 + 8 * v416;
                  if (v426 >= v49) {
                    uint64_t v427 = v417;
                  }
                  else {
                    uint64_t v427 = 0;
                  }
                  uint64_t v58 = v426 + 8 * v427;
                  float v59 = (uint16x4_t *)((char *)v59 + v419);
                  --v420;
                }
                while (v420);
                v59 += v720;
                uint64_t v428 = v728;
                unint64_t v429 = v728 + 8 * v727;
                uint64_t v430 = -(uint64_t)(v727 * v713);
                if (v429 < v725) {
                  uint64_t v430 = 0;
                }
                uint64_t v431 = v429 + 8 * v430;
                uint64_t v432 = v49 + 8 * v430 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v432;
                  uint64_t v428 = v431;
                }
                uint64_t v728 = v428;
                if (v725) {
                  uint64_t v58 = v431;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v418) {
                  goto LABEL_933;
                }
              }
            case 14:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v433 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v434 = -(uint64_t)(int)v45;
              int v435 = v731[0];
              uint64_t v436 = 8 * (int)v47;
              while (1)
              {
                int v437 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v438 = 0xFFFF;
LABEL_591:
                    unint64_t v439 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v440 = HIWORD(v439);
                      uint64_t v441 = *(void *)v58;
                      if (!HIWORD(v439))
                      {
                        unint64_t v442 = v441 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v438 << 48);
LABEL_596:
                        *float v59 = (uint16x4_t)v442;
                        goto LABEL_597;
                      }
                    }
                    else
                    {
                      uint64_t v441 = *(void *)v58;
                      LODWORD(v440) = 0xFFFF;
                    }
                    unint64_t v442 = PDAscreenPDA_14786(v439, v440, v441, v438);
                    goto LABEL_596;
                  }
                  unsigned int v438 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_591;
                  }
LABEL_597:
                  unint64_t v443 = v58 + 8 * v433;
                  if (v443 >= v49) {
                    uint64_t v444 = v434;
                  }
                  else {
                    uint64_t v444 = 0;
                  }
                  uint64_t v58 = v443 + 8 * v444;
                  float v59 = (uint16x4_t *)((char *)v59 + v436);
                  --v437;
                }
                while (v437);
                v59 += v720;
                uint64_t v445 = v728;
                unint64_t v446 = v728 + 8 * v727;
                uint64_t v447 = -(uint64_t)(v727 * v713);
                if (v446 < v725) {
                  uint64_t v447 = 0;
                }
                uint64_t v448 = v446 + 8 * v447;
                uint64_t v449 = v49 + 8 * v447 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v449;
                  uint64_t v445 = v448;
                }
                uint64_t v728 = v445;
                if (v725) {
                  uint64_t v58 = v448;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v435) {
                  goto LABEL_933;
                }
              }
            case 15:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v450 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v451 = -(uint64_t)(int)v45;
              int v452 = v731[0];
              uint64_t v453 = 8 * (int)v47;
              while (1)
              {
                int v454 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v455 = 0xFFFF;
LABEL_616:
                    unint64_t v456 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v457 = HIWORD(v456);
                      uint64_t v458 = *(void *)v58;
                      if (!HIWORD(v456))
                      {
                        unint64_t v459 = v458 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v455 << 48);
LABEL_621:
                        *float v59 = (uint16x4_t)v459;
                        goto LABEL_622;
                      }
                    }
                    else
                    {
                      uint64_t v458 = *(void *)v58;
                      LODWORD(v457) = 0xFFFF;
                    }
                    unint64_t v459 = PDAoverlayPDA_14787(v456, v457, v458, v455);
                    goto LABEL_621;
                  }
                  unsigned int v455 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_616;
                  }
LABEL_622:
                  unint64_t v460 = v58 + 8 * v450;
                  if (v460 >= v49) {
                    uint64_t v461 = v451;
                  }
                  else {
                    uint64_t v461 = 0;
                  }
                  uint64_t v58 = v460 + 8 * v461;
                  float v59 = (uint16x4_t *)((char *)v59 + v453);
                  --v454;
                }
                while (v454);
                v59 += v720;
                uint64_t v462 = v728;
                unint64_t v463 = v728 + 8 * v727;
                uint64_t v464 = -(uint64_t)(v727 * v713);
                if (v463 < v725) {
                  uint64_t v464 = 0;
                }
                uint64_t v465 = v463 + 8 * v464;
                uint64_t v466 = v49 + 8 * v464 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v466;
                  uint64_t v462 = v465;
                }
                uint64_t v728 = v462;
                if (v725) {
                  uint64_t v58 = v465;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v452) {
                  goto LABEL_933;
                }
              }
            case 16:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v467 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v468 = -(uint64_t)(int)v45;
              int v469 = v731[0];
              uint64_t v470 = 8 * (int)v47;
              while (1)
              {
                int v471 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v472 = 0xFFFF;
LABEL_641:
                    unint64_t v473 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v474 = HIWORD(v473);
                      uint64_t v475 = *(void *)v58;
                      if (!HIWORD(v473))
                      {
                        unint64_t v476 = v475 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v472 << 48);
LABEL_646:
                        *float v59 = (uint16x4_t)v476;
                        goto LABEL_647;
                      }
                    }
                    else
                    {
                      uint64_t v475 = *(void *)v58;
                      LODWORD(v474) = 0xFFFF;
                    }
                    unint64_t v476 = PDAdarkenPDA_14789(v473, v474, v475, v472);
                    goto LABEL_646;
                  }
                  unsigned int v472 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_641;
                  }
LABEL_647:
                  unint64_t v477 = v58 + 8 * v467;
                  if (v477 >= v49) {
                    uint64_t v478 = v468;
                  }
                  else {
                    uint64_t v478 = 0;
                  }
                  uint64_t v58 = v477 + 8 * v478;
                  float v59 = (uint16x4_t *)((char *)v59 + v470);
                  --v471;
                }
                while (v471);
                v59 += v720;
                uint64_t v479 = v728;
                unint64_t v480 = v728 + 8 * v727;
                uint64_t v481 = -(uint64_t)(v727 * v713);
                if (v480 < v725) {
                  uint64_t v481 = 0;
                }
                uint64_t v482 = v480 + 8 * v481;
                uint64_t v483 = v49 + 8 * v481 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v483;
                  uint64_t v479 = v482;
                }
                uint64_t v728 = v479;
                if (v725) {
                  uint64_t v58 = v482;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v469) {
                  goto LABEL_933;
                }
              }
            case 17:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v484 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v485 = -(uint64_t)(int)v45;
              int v486 = v731[0];
              uint64_t v487 = 8 * (int)v47;
              while (1)
              {
                int v488 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v489 = 0xFFFF;
LABEL_666:
                    unint64_t v490 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v491 = HIWORD(v490);
                      uint64_t v492 = *(void *)v58;
                      if (!HIWORD(v490))
                      {
                        unint64_t v493 = v492 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v489 << 48);
LABEL_671:
                        *float v59 = (uint16x4_t)v493;
                        goto LABEL_672;
                      }
                    }
                    else
                    {
                      uint64_t v492 = *(void *)v58;
                      LODWORD(v491) = 0xFFFF;
                    }
                    unint64_t v493 = PDAlightenPDA_14788(v490, v491, v492, v489);
                    goto LABEL_671;
                  }
                  unsigned int v489 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_666;
                  }
LABEL_672:
                  unint64_t v494 = v58 + 8 * v484;
                  if (v494 >= v49) {
                    uint64_t v495 = v485;
                  }
                  else {
                    uint64_t v495 = 0;
                  }
                  uint64_t v58 = v494 + 8 * v495;
                  float v59 = (uint16x4_t *)((char *)v59 + v487);
                  --v488;
                }
                while (v488);
                v59 += v720;
                uint64_t v496 = v728;
                unint64_t v497 = v728 + 8 * v727;
                uint64_t v498 = -(uint64_t)(v727 * v713);
                if (v497 < v725) {
                  uint64_t v498 = 0;
                }
                uint64_t v499 = v497 + 8 * v498;
                uint64_t v500 = v49 + 8 * v498 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v500;
                  uint64_t v496 = v499;
                }
                uint64_t v728 = v496;
                if (v725) {
                  uint64_t v58 = v499;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v486) {
                  goto LABEL_933;
                }
              }
            case 18:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v501 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v502 = -(uint64_t)(int)v45;
              int v503 = v731[0];
              uint64_t v504 = 8 * (int)v47;
              while (1)
              {
                int v505 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v506 = 0xFFFF;
LABEL_691:
                    unint64_t v507 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v508 = HIWORD(v507);
                      uint64_t v509 = *(void *)v58;
                      if (!HIWORD(v507))
                      {
                        unint64_t v510 = v509 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v506 << 48);
LABEL_696:
                        *float v59 = (uint16x4_t)v510;
                        goto LABEL_697;
                      }
                    }
                    else
                    {
                      uint64_t v509 = *(void *)v58;
                      LODWORD(v508) = 0xFFFF;
                    }
                    unint64_t v510 = PDAcolordodgePDA_14790(v507, v508, v509, v506);
                    goto LABEL_696;
                  }
                  unsigned int v506 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_691;
                  }
LABEL_697:
                  unint64_t v511 = v58 + 8 * v501;
                  if (v511 >= v49) {
                    uint64_t v512 = v502;
                  }
                  else {
                    uint64_t v512 = 0;
                  }
                  uint64_t v58 = v511 + 8 * v512;
                  float v59 = (uint16x4_t *)((char *)v59 + v504);
                  --v505;
                }
                while (v505);
                v59 += v720;
                uint64_t v513 = v728;
                unint64_t v514 = v728 + 8 * v727;
                uint64_t v515 = -(uint64_t)(v727 * v713);
                if (v514 < v725) {
                  uint64_t v515 = 0;
                }
                uint64_t v516 = v514 + 8 * v515;
                uint64_t v517 = v49 + 8 * v515 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v517;
                  uint64_t v513 = v516;
                }
                uint64_t v728 = v513;
                if (v725) {
                  uint64_t v58 = v516;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v503) {
                  goto LABEL_933;
                }
              }
            case 19:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v518 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v519 = -(uint64_t)(int)v45;
              int v520 = v731[0];
              uint64_t v521 = 8 * (int)v47;
              while (1)
              {
                int v522 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v523 = 0xFFFF;
LABEL_716:
                    unint64_t v524 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v525 = HIWORD(v524);
                      uint64_t v526 = *(void *)v58;
                      if (!HIWORD(v524))
                      {
                        unint64_t v527 = v526 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v523 << 48);
LABEL_721:
                        *float v59 = (uint16x4_t)v527;
                        goto LABEL_722;
                      }
                    }
                    else
                    {
                      uint64_t v526 = *(void *)v58;
                      LODWORD(v525) = 0xFFFF;
                    }
                    unint64_t v527 = PDAcolorburnPDA_14791(v524, v525, v526, v523);
                    goto LABEL_721;
                  }
                  unsigned int v523 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_716;
                  }
LABEL_722:
                  unint64_t v528 = v58 + 8 * v518;
                  if (v528 >= v49) {
                    uint64_t v529 = v519;
                  }
                  else {
                    uint64_t v529 = 0;
                  }
                  uint64_t v58 = v528 + 8 * v529;
                  float v59 = (uint16x4_t *)((char *)v59 + v521);
                  --v522;
                }
                while (v522);
                v59 += v720;
                uint64_t v530 = v728;
                unint64_t v531 = v728 + 8 * v727;
                uint64_t v532 = -(uint64_t)(v727 * v713);
                if (v531 < v725) {
                  uint64_t v532 = 0;
                }
                uint64_t v533 = v531 + 8 * v532;
                uint64_t v534 = v49 + 8 * v532 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v534;
                  uint64_t v530 = v533;
                }
                uint64_t v728 = v530;
                if (v725) {
                  uint64_t v58 = v533;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v520) {
                  goto LABEL_933;
                }
              }
            case 20:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v535 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v536 = -(uint64_t)(int)v45;
              int v537 = v731[0];
              uint64_t v538 = 8 * (int)v47;
              while (1)
              {
                int v539 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v540 = 0xFFFF;
LABEL_741:
                    unint64_t v541 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v542 = HIWORD(v541);
                      uint64_t v543 = *(void *)v58;
                      if (!HIWORD(v541))
                      {
                        unint64_t v544 = v543 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v540 << 48);
LABEL_746:
                        *float v59 = (uint16x4_t)v544;
                        goto LABEL_747;
                      }
                    }
                    else
                    {
                      uint64_t v543 = *(void *)v58;
                      LODWORD(v542) = 0xFFFF;
                    }
                    unint64_t v544 = PDAsoftlightPDA_14793(v541, v542, v543, v540);
                    goto LABEL_746;
                  }
                  unsigned int v540 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_741;
                  }
LABEL_747:
                  unint64_t v545 = v58 + 8 * v535;
                  if (v545 >= v49) {
                    uint64_t v546 = v536;
                  }
                  else {
                    uint64_t v546 = 0;
                  }
                  uint64_t v58 = v545 + 8 * v546;
                  float v59 = (uint16x4_t *)((char *)v59 + v538);
                  --v539;
                }
                while (v539);
                v59 += v720;
                uint64_t v547 = v728;
                unint64_t v548 = v728 + 8 * v727;
                uint64_t v549 = -(uint64_t)(v727 * v713);
                if (v548 < v725) {
                  uint64_t v549 = 0;
                }
                uint64_t v550 = v548 + 8 * v549;
                uint64_t v551 = v49 + 8 * v549 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v551;
                  uint64_t v547 = v550;
                }
                uint64_t v728 = v547;
                if (v725) {
                  uint64_t v58 = v550;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v537) {
                  goto LABEL_933;
                }
              }
            case 21:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v552 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v553 = -(uint64_t)(int)v45;
              int v554 = v731[0];
              uint64_t v555 = 8 * (int)v47;
              while (1)
              {
                int v556 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v557 = 0xFFFF;
LABEL_766:
                    unint64_t v558 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v559 = HIWORD(v558);
                      uint64_t v560 = *(void *)v58;
                      if (!HIWORD(v558))
                      {
                        unint64_t v561 = v560 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v557 << 48);
LABEL_771:
                        *float v59 = (uint16x4_t)v561;
                        goto LABEL_772;
                      }
                    }
                    else
                    {
                      uint64_t v560 = *(void *)v58;
                      LODWORD(v559) = 0xFFFF;
                    }
                    unint64_t v561 = PDAhardlightPDA_14792(v558, v559, v560, v557);
                    goto LABEL_771;
                  }
                  unsigned int v557 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_766;
                  }
LABEL_772:
                  unint64_t v562 = v58 + 8 * v552;
                  if (v562 >= v49) {
                    uint64_t v563 = v553;
                  }
                  else {
                    uint64_t v563 = 0;
                  }
                  uint64_t v58 = v562 + 8 * v563;
                  float v59 = (uint16x4_t *)((char *)v59 + v555);
                  --v556;
                }
                while (v556);
                v59 += v720;
                uint64_t v564 = v728;
                unint64_t v565 = v728 + 8 * v727;
                uint64_t v566 = -(uint64_t)(v727 * v713);
                if (v565 < v725) {
                  uint64_t v566 = 0;
                }
                uint64_t v567 = v565 + 8 * v566;
                uint64_t v568 = v49 + 8 * v566 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v568;
                  uint64_t v564 = v567;
                }
                uint64_t v728 = v564;
                if (v725) {
                  uint64_t v58 = v567;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v554) {
                  goto LABEL_933;
                }
              }
            case 22:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v569 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v570 = -(uint64_t)(int)v45;
              int v571 = v731[0];
              uint64_t v572 = 8 * (int)v47;
              while (1)
              {
                int v573 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v574 = 0xFFFF;
LABEL_791:
                    unint64_t v575 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v576 = HIWORD(v575);
                      uint64_t v577 = *(void *)v58;
                      if (!HIWORD(v575))
                      {
                        unint64_t v578 = v577 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v574 << 48);
LABEL_796:
                        *float v59 = (uint16x4_t)v578;
                        goto LABEL_797;
                      }
                    }
                    else
                    {
                      uint64_t v577 = *(void *)v58;
                      LODWORD(v576) = 0xFFFF;
                    }
                    unint64_t v578 = PDAdifferencePDA_14794(v575, v576, v577, v574);
                    goto LABEL_796;
                  }
                  unsigned int v574 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_791;
                  }
LABEL_797:
                  unint64_t v579 = v58 + 8 * v569;
                  if (v579 >= v49) {
                    uint64_t v580 = v570;
                  }
                  else {
                    uint64_t v580 = 0;
                  }
                  uint64_t v58 = v579 + 8 * v580;
                  float v59 = (uint16x4_t *)((char *)v59 + v572);
                  --v573;
                }
                while (v573);
                v59 += v720;
                uint64_t v581 = v728;
                unint64_t v582 = v728 + 8 * v727;
                uint64_t v583 = -(uint64_t)(v727 * v713);
                if (v582 < v725) {
                  uint64_t v583 = 0;
                }
                uint64_t v584 = v582 + 8 * v583;
                uint64_t v585 = v49 + 8 * v583 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v585;
                  uint64_t v581 = v584;
                }
                uint64_t v728 = v581;
                if (v725) {
                  uint64_t v58 = v584;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v571) {
                  goto LABEL_933;
                }
              }
            case 23:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v586 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v587 = -(uint64_t)(int)v45;
              int v588 = v731[0];
              uint64_t v589 = 8 * (int)v47;
              while (1)
              {
                int v590 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v591 = 0xFFFF;
LABEL_816:
                    unint64_t v592 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v593 = HIWORD(v592);
                      uint64_t v594 = *(void *)v58;
                      if (!HIWORD(v592))
                      {
                        unint64_t v595 = v594 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v591 << 48);
LABEL_821:
                        *float v59 = (uint16x4_t)v595;
                        goto LABEL_822;
                      }
                    }
                    else
                    {
                      uint64_t v594 = *(void *)v58;
                      LODWORD(v593) = 0xFFFF;
                    }
                    unint64_t v595 = PDAexclusionPDA_14795(v592, v593, v594, v591);
                    goto LABEL_821;
                  }
                  unsigned int v591 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_816;
                  }
LABEL_822:
                  unint64_t v596 = v58 + 8 * v586;
                  if (v596 >= v49) {
                    uint64_t v597 = v587;
                  }
                  else {
                    uint64_t v597 = 0;
                  }
                  uint64_t v58 = v596 + 8 * v597;
                  float v59 = (uint16x4_t *)((char *)v59 + v589);
                  --v590;
                }
                while (v590);
                v59 += v720;
                uint64_t v598 = v728;
                unint64_t v599 = v728 + 8 * v727;
                uint64_t v600 = -(uint64_t)(v727 * v713);
                if (v599 < v725) {
                  uint64_t v600 = 0;
                }
                uint64_t v601 = v599 + 8 * v600;
                uint64_t v602 = v49 + 8 * v600 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v602;
                  uint64_t v598 = v601;
                }
                uint64_t v728 = v598;
                if (v725) {
                  uint64_t v58 = v601;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v588) {
                  goto LABEL_933;
                }
              }
            case 24:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v603 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v604 = -(uint64_t)(int)v45;
              int v605 = v731[0];
              uint64_t v606 = 8 * (int)v47;
              while (1)
              {
                int v607 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v608 = 0xFFFF;
LABEL_841:
                    unint64_t v609 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v610 = HIWORD(v609);
                      uint64_t v611 = *(void *)v58;
                      if (!HIWORD(v609))
                      {
                        unint64_t v612 = v611 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v608 << 48);
LABEL_846:
                        *float v59 = (uint16x4_t)v612;
                        goto LABEL_847;
                      }
                    }
                    else
                    {
                      uint64_t v611 = *(void *)v58;
                      LODWORD(v610) = 0xFFFF;
                    }
                    unint64_t v612 = PDAhuePDA_14796(v609, v610, v611, v608);
                    goto LABEL_846;
                  }
                  unsigned int v608 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_841;
                  }
LABEL_847:
                  unint64_t v613 = v58 + 8 * v603;
                  if (v613 >= v49) {
                    uint64_t v614 = v604;
                  }
                  else {
                    uint64_t v614 = 0;
                  }
                  uint64_t v58 = v613 + 8 * v614;
                  float v59 = (uint16x4_t *)((char *)v59 + v606);
                  --v607;
                }
                while (v607);
                v59 += v720;
                uint64_t v615 = v728;
                unint64_t v616 = v728 + 8 * v727;
                uint64_t v617 = -(uint64_t)(v727 * v713);
                if (v616 < v725) {
                  uint64_t v617 = 0;
                }
                uint64_t v618 = v616 + 8 * v617;
                uint64_t v619 = v49 + 8 * v617 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v619;
                  uint64_t v615 = v618;
                }
                uint64_t v728 = v615;
                if (v725) {
                  uint64_t v58 = v618;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v605) {
                  goto LABEL_933;
                }
              }
            case 25:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v620 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v621 = -(uint64_t)(int)v45;
              int v622 = v731[0];
              uint64_t v623 = 8 * (int)v47;
              while (1)
              {
                int v624 = v722;
                do
                {
                  if (!v48)
                  {
                    unsigned int v625 = 0xFFFF;
LABEL_866:
                    unint64_t v626 = (unint64_t)*v59;
                    if (v10)
                    {
                      unint64_t v627 = HIWORD(v626);
                      uint64_t v628 = *(void *)v58;
                      if (!HIWORD(v626))
                      {
                        unint64_t v629 = v628 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v625 << 48);
LABEL_871:
                        *float v59 = (uint16x4_t)v629;
                        goto LABEL_872;
                      }
                    }
                    else
                    {
                      uint64_t v628 = *(void *)v58;
                      LODWORD(v627) = 0xFFFF;
                    }
                    unint64_t v629 = PDAsaturationPDA_14797(v626, v627, v628, v625);
                    goto LABEL_871;
                  }
                  unsigned int v625 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6)) {
                    goto LABEL_866;
                  }
LABEL_872:
                  unint64_t v630 = v58 + 8 * v620;
                  if (v630 >= v49) {
                    uint64_t v631 = v621;
                  }
                  else {
                    uint64_t v631 = 0;
                  }
                  uint64_t v58 = v630 + 8 * v631;
                  float v59 = (uint16x4_t *)((char *)v59 + v623);
                  --v624;
                }
                while (v624);
                v59 += v720;
                uint64_t v632 = v728;
                unint64_t v633 = v728 + 8 * v727;
                uint64_t v634 = -(uint64_t)(v727 * v713);
                if (v633 < v725) {
                  uint64_t v634 = 0;
                }
                uint64_t v635 = v633 + 8 * v634;
                uint64_t v636 = v49 + 8 * v634 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v636;
                  uint64_t v632 = v635;
                }
                uint64_t v728 = v632;
                if (v725) {
                  uint64_t v58 = v635;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v622) {
                  goto LABEL_933;
                }
              }
            case 26:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v637 = v45;
              uint64_t v638 = (int)v47;
              uint64_t v709 = v637;
              uint64_t v639 = -(uint64_t)(int)v637;
              int v640 = v731[0];
              uint64_t v641 = 8 * (int)v47;
              while (1)
              {
                int v642 = v722;
                do
                {
                  if (v48)
                  {
                    unsigned int v643 = *(unsigned __int16 *)(v58 + 6);
                    if (!*(_WORD *)(v58 + 6)) {
                      goto LABEL_896;
                    }
                    if (!v10)
                    {
LABEL_893:
                      uint64_t v646 = *(void *)v58;
                      uint64_t v644 = (uint64_t)*v59;
                      LODWORD(v645) = 0xFFFF;
LABEL_894:
                      unint64_t v647 = PDAluminosityPDA_14798(v646, v643, v644, v645);
                      goto LABEL_895;
                    }
                  }
                  else
                  {
                    unsigned int v643 = 0xFFFF;
                    if (!v10) {
                      goto LABEL_893;
                    }
                  }
                  uint64_t v644 = (uint64_t)*v59;
                  unint64_t v645 = HIWORD(*(unint64_t *)v59);
                  uint64_t v646 = *(void *)v58;
                  if (v645) {
                    goto LABEL_894;
                  }
                  unint64_t v647 = v646 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v643 << 48);
LABEL_895:
                  *float v59 = (uint16x4_t)v647;
LABEL_896:
                  unint64_t v648 = v58 + 8 * v638;
                  if (v648 >= v49) {
                    uint64_t v649 = v639;
                  }
                  else {
                    uint64_t v649 = 0;
                  }
                  uint64_t v58 = v648 + 8 * v649;
                  float v59 = (uint16x4_t *)((char *)v59 + v641);
                  --v642;
                }
                while (v642);
                v59 += v720;
                uint64_t v650 = v728;
                unint64_t v651 = v728 + 8 * v727;
                uint64_t v652 = -(uint64_t)(v727 * v713);
                if (v651 < v725) {
                  uint64_t v652 = 0;
                }
                uint64_t v653 = v651 + 8 * v652;
                uint64_t v654 = v49 + 8 * v652 + 8 * v727;
                if (v725)
                {
                  unint64_t v49 = v654;
                  uint64_t v650 = v653;
                }
                uint64_t v728 = v650;
                if (v725) {
                  uint64_t v58 = v653;
                }
                else {
                  v58 += 8 * v727;
                }
                if (!--v640) {
                  goto LABEL_933;
                }
              }
            case 27:
              uint64_t v710 = v35;
              unint64_t v711 = v39;
              unint64_t v712 = v40;
              uint64_t v655 = (int)v47;
              uint64_t v709 = v45;
              uint64_t v656 = -(uint64_t)(int)v45;
              int v657 = v731[0];
              uint64_t v658 = 8 * (int)v47;
              break;
            default:
              goto LABEL_985;
          }
          break;
        }
LABEL_910:
        int v659 = v722;
        while (1)
        {
          if (v48)
          {
            unsigned int v660 = *(unsigned __int16 *)(v58 + 6);
            if (!*(_WORD *)(v58 + 6)) {
              goto LABEL_921;
            }
          }
          else
          {
            unsigned int v660 = 0xFFFF;
          }
          unint64_t v661 = (unint64_t)*v59;
          if (!v10) {
            break;
          }
          unint64_t v662 = HIWORD(v661);
          uint64_t v663 = *(void *)v58;
          if (HIWORD(v661)) {
            goto LABEL_919;
          }
          unint64_t v664 = v663 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v660 << 48);
LABEL_920:
          *float v59 = (uint16x4_t)v664;
LABEL_921:
          unint64_t v665 = v58 + 8 * v655;
          if (v665 >= v49) {
            uint64_t v666 = v656;
          }
          else {
            uint64_t v666 = 0;
          }
          uint64_t v58 = v665 + 8 * v666;
          float v59 = (uint16x4_t *)((char *)v59 + v658);
          if (!--v659)
          {
            v59 += v720;
            uint64_t v667 = v728;
            unint64_t v668 = v728 + 8 * v727;
            uint64_t v669 = -(uint64_t)(v727 * v713);
            if (v668 < v725) {
              uint64_t v669 = 0;
            }
            uint64_t v670 = v668 + 8 * v669;
            uint64_t v671 = v49 + 8 * v669 + 8 * v727;
            if (v725)
            {
              unint64_t v49 = v671;
              uint64_t v667 = v670;
            }
            uint64_t v728 = v667;
            if (v725) {
              uint64_t v58 = v670;
            }
            else {
              v58 += 8 * v727;
            }
            if (!--v657)
            {
LABEL_933:
              v731[0] = 0;
              int v11 = v715;
              unint64_t v39 = v711;
              unint64_t v40 = v712;
              uint64_t v45 = v709;
              uint64_t v35 = v710;
              goto LABEL_985;
            }
            goto LABEL_910;
          }
        }
        uint64_t v663 = *(void *)v58;
        LODWORD(v662) = 0xFFFF;
LABEL_919:
        unint64_t v664 = PDAluminosityPDA_14798(v661, v662, v663, v660);
        goto LABEL_920;
      }
      unint64_t v720 = v39 - v13;
      int v722 = v13;
      if (v35)
      {
        uint64_t v714 = 0;
        int v56 = v41 % (int)v45;
        uint64_t v57 = v35 + 8 * (v44 >> 3) * (v42 % v713);
        uint64_t v58 = v57 + 8 * v56;
        unint64_t v49 = v57 + 8 * (int)v45;
        uint64_t v47 = 1;
        unint64_t v727 = v44 >> 3;
        uint64_t v728 = v58;
        float v59 = (uint16x4_t *)v40;
        int v706 = v42 % v713;
        int v707 = v56;
        goto LABEL_322;
      }
      int v706 = v38[15];
      int v707 = v38[14];
      unint64_t v60 = v44 >> 3;
      unint64_t v49 = 0;
      uint64_t v47 = 1;
      unint64_t v61 = v13;
LABEL_57:
      uint64_t v714 = 0;
      uint64_t v728 = 0;
      unint64_t v725 = 0;
      unint64_t v727 = v60 - v61;
      uint64_t v58 = v35;
      float v59 = (uint16x4_t *)v40;
      goto LABEL_322;
    }
    uint64_t v45 = v44 >> 3;
    v35 += 8 * (v41 + (v44 >> 3) * v42);
    if (v44 >> 3 == v39)
    {
      if ((uint64_t)(v40 - v35) >= 1)
      {
        if (v13 >= (v40 - v35) >> 3)
        {
          v40 += 8 * v14;
          uint64_t v45 = v39;
          v35 += 8 * v14;
          uint64_t v47 = 0xFFFFFFFFLL;
          goto LABEL_52;
        }
        unint64_t v46 = v39 * (v15 - 1);
        if (v40 <= v35 + 8 * v46 + 8 * v14)
        {
          v40 += 8 * v46;
          uint64_t v45 = -(uint64_t)v39;
          uint64_t v47 = 1;
          v35 += 8 * v46;
          unint64_t v39 = -(uint64_t)v39;
          goto LABEL_52;
        }
      }
      uint64_t v47 = 1;
      uint64_t v45 = v39;
    }
    else
    {
      uint64_t v47 = 1;
    }
LABEL_52:
    int v706 = v38[15];
    int v707 = v38[14];
    BOOL v48 = v9 != 0;
    if (v16)
    {
      int v713 = 0;
      unint64_t v727 = v45;
      uint64_t v728 = 0;
      unint64_t v725 = 0;
      unint64_t v49 = -1;
      goto LABEL_54;
    }
    int v713 = 0;
    unint64_t v61 = (int)v47 * (int)v13;
    unint64_t v720 = v39 - v61;
    int v722 = v13;
    unint64_t v49 = -1;
    unint64_t v60 = v45;
    goto LABEL_57;
  }
  int v17 = *(_DWORD *)(v5 + 128);
  if ((v17 | 8) == 8)
  {
    if ((*(_DWORD *)v5 & 0xFF00) == 0x400)
    {
      rgba64_mark_constmask(v5, v11);
    }
    else if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
    {
      rgba16_template_image_mask_method(*v6, (int *)v5, v11);
    }
    else
    {
      rgba64_mark_pixelmask(v5, v11);
    }
    return 1;
  }
  int v27 = *(_DWORD *)(v5 + 112);
  int v28 = *(_DWORD *)(v5 + 116);
  uint64_t v29 = v5;
  unsigned int v30 = (v27 + 15) & 0xFFFFFFF0;
  size_t v31 = v30 * v28;
  if ((int)v31 <= 4096)
  {
    long long v33 = v741;
LABEL_40:
    CGSConvertBitsToMask(v16, *(_DWORD *)(v29 + 124), v33, v30, v27, v28, v17);
    long long v50 = *(_OWORD *)(v29 + 112);
    long long v737 = *(_OWORD *)(v29 + 96);
    long long v738 = v50;
    long long v51 = *(_OWORD *)(v29 + 144);
    long long v739 = *(_OWORD *)(v29 + 128);
    long long v740 = v51;
    long long v52 = *(_OWORD *)(v29 + 48);
    long long v733 = *(_OWORD *)(v29 + 32);
    long long v734 = v52;
    long long v53 = *(_OWORD *)(v29 + 80);
    long long v735 = *(_OWORD *)(v29 + 64);
    long long v736 = v53;
    long long v54 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)v731 = *(_OWORD *)v29;
    long long v732 = v54;
    HIDWORD(v738) = (v27 + 15) & 0xFFFFFFF0;
    *((void *)&v739 + 1) = v33;
    if (BYTE1(v731[0]) << 8 == 1024) {
      rgba64_mark_constmask((uint64_t)v731, v11);
    }
    else {
      rgba64_mark_pixelmask((uint64_t)v731, v11);
    }
    if (v33 != (unsigned char *)v741)
    {
      float v55 = v33;
      goto LABEL_993;
    }
    return 1;
  }
  long long v32 = malloc_type_malloc(v31, 0x8303D2FuLL);
  if (v32)
  {
    long long v33 = v32;
    uint64_t v16 = *(uint16x4_t **)(v29 + 136);
    int v17 = *(_DWORD *)(v29 + 128);
    goto LABEL_40;
  }
  return 1;
}

void rgba64_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(void, void))
{
  v72[1] = *MEMORY[0x1E4F143B8];
  v8.n128_u64[1] = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  v61[0] = a3;
  v61[1] = a4;
  v8.n128_u64[0] = *(unsigned int *)(a2 + 184);
  v8.n128_f32[0] = (float)(v8.n128_f32[0] * 65535.0) + 0.5;
  LOWORD(v62) = (int)v8.n128_f32[0];
  unint64_t v9 = (unint64_t)*(int *)(a1 + 28) >> 3;
  *(void *)&long long v63 = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  unsigned int v12 = HIBYTE(v11);
  unsigned int v13 = BYTE2(v11);
  if (v10)
  {
    unint64_t v14 = *(int *)(a2 + 24);
    int v15 = (uint64_t *)(a2 + 104);
    uint64_t v16 = (uint64_t *)(a2 + 72);
    int v17 = (uint64_t *)(a2 + 88);
    unsigned int v18 = v12;
  }
  else
  {
    unint64_t v14 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    int v15 = (uint64_t *)(a2 + 96);
    uint64_t v16 = (uint64_t *)(a2 + 64);
    int v17 = (uint64_t *)(a2 + 80);
    uint64_t v10 = *(void *)(a2 + 112);
    unsigned int v18 = v13;
  }
  uint64_t v19 = *v17;
  uint64_t v20 = *v16;
  uint64_t v21 = *v15;
  char v22 = v18;
  *((void *)&v64 + 1) = v18;
  *((void *)&v63 + 1) = v21;
  *((void *)&v68 + 1) = v14;
  *((void *)&v67 + 1) = v19;
  *((void *)&v66 + 1) = v20;
  *((void *)&v65 + 1) = v10;
  uint64_t v23 = *(void *)(a2 + 128);
  if (v23)
  {
    unint64_t v24 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    uint64_t v25 = (uint64_t *)(a2 + 96);
    uint64_t v26 = (uint64_t *)(a2 + 64);
    int v27 = (uint64_t *)(a2 + 80);
    unsigned int v12 = v13;
  }
  else
  {
    unint64_t v24 = *(int *)(a2 + 24);
    uint64_t v25 = (uint64_t *)(a2 + 104);
    uint64_t v26 = (uint64_t *)(a2 + 72);
    int v27 = (uint64_t *)(a2 + 88);
    uint64_t v23 = *(void *)(a2 + 136);
  }
  unint64_t v60 = &v58;
  uint64_t v28 = *v27;
  uint64_t v29 = *v26;
  uint64_t v30 = *v25;
  *(void *)&long long v65 = v12;
  *(void *)&long long v64 = v30;
  *(void *)&long long v69 = v24;
  *(void *)&long long v68 = v28;
  *(void *)&long long v67 = v29;
  *(void *)&long long v66 = v23;
  uint64_t v31 = *(int *)(a1 + 4);
  uint64_t v32 = MEMORY[0x1F4188790](v20, v8);
  float v59 = (char *)&v58 - v34 - 15;
  if (v35 <= 0xFFFFFFFFFFFFFFELL) {
    uint64_t v37 = (uint64_t *)((char *)&v58 - v34 - 15);
  }
  else {
    uint64_t v37 = 0;
  }
  if (v35 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000402)
  {
    uint64_t v58 = a5;
    uint64_t v38 = v32;
    uint64_t v39 = v36;
    unint64_t v40 = (char *)malloc_type_malloc(16 * v31, 0x1B1F656EuLL);
    uint64_t v36 = v39;
    uint64_t v37 = (uint64_t *)v40;
    uint64_t v32 = v38;
    a5 = v58;
  }
  *((void *)&v69 + 1) = v37;
  if (v37)
  {
    uint64_t v41 = v31;
    if (*(void *)(a2 + 176))
    {
      if ((int)v31 >= 1)
      {
        int v42 = v37 + 1;
        uint64_t v43 = -v32;
        uint64_t v44 = v36 - v21;
        do
        {
          if (((v43 + v21) | v44) < 0)
          {
            unint64_t v47 = 0;
            uint64_t v48 = 0;
          }
          else
          {
            unint64_t v45 = ((v21 & (unint64_t)~(-1 << v22)) >> (v22 - 4)) & 0xF;
            char v46 = weights_21383[v45];
            if (v45 - 7 >= 9) {
              unint64_t v47 = -(uint64_t)v14;
            }
            else {
              unint64_t v47 = v14;
            }
            uint64_t v48 = v46 & 0xF;
          }
          uint64_t v32 = v14 * (v21 >> v22);
          *(v42 - 1) = v32;
          *int v42 = v48 | (16 * v47);
          v42 += 2;
          v21 += v10;
          v44 -= v10;
          --v41;
        }
        while (v41);
      }
    }
    else if ((int)v31 >= 1)
    {
      unint64_t v49 = v37 + 1;
      do
      {
        *(v49 - 1) = v14 * (v21 >> v22);
        *unint64_t v49 = 0;
        v49 += 2;
        v21 += v10;
        --v41;
      }
      while (v41);
    }
    int v50 = *(_DWORD *)(a1 + 4);
    int v51 = *(_DWORD *)(a1 + 8);
    int v70 = v51;
    int v71 = v50;
    long long v52 = *(int **)(a1 + 136);
    if (v52)
    {
      int v53 = *(_DWORD *)(a1 + 104);
      LODWORD(v72[0]) = *(_DWORD *)(a1 + 108);
      HIDWORD(v72[0]) = v53;
      shape_enum_clip_alloc(v32, v33, v52, 1, 1, 1, v53, v72[0], v50, v51);
      float v55 = v54;
      if (v54) {
        goto LABEL_31;
      }
    }
    int v56 = 0;
    int v57 = 0;
    float v55 = 0;
    v72[0] = 0;
    while (1)
    {
      *((void *)&v62 + 1) = *(void *)(a1 + 40)
                            + 8 * v9 * (*(int *)(a1 + 16) + (uint64_t)v57)
                            + 8 * (v56 + *(_DWORD *)(a1 + 12));
      a5(a2, v61);
      if (!v55) {
        break;
      }
LABEL_31:
      if (!shape_enum_clip_next((uint64_t)v55, (int *)v72 + 1, v72, &v71, &v70))
      {
        free(v55);
        break;
      }
      int v57 = v72[0];
      int v56 = HIDWORD(v72[0]);
      unint64_t v9 = v63;
    }
    if (v37 != (uint64_t *)v59) {
      free(v37);
    }
  }
}

void rgba64_image_mark_rgba64(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v7 = *((unsigned __int16 *)a2 + 4);
  int v107 = *a2;
  __n128 v8 = *(char **)(a1 + 32);
  if (*(void *)(a1 + 40)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 0xFFFFLL;
  }
  uint64_t v10 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v106 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 15);
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v103 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v103 * a4;
  int v15 = &v8[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
          + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  int v113 = *((unsigned __int16 *)a2 + 4);
  char v104 = v13;
  uint64_t v105 = v12;
  if (*(void *)(a1 + 176))
  {
    uint64_t v99 = ~(-1 << v13);
    uint64_t v100 = *((void *)a2 + 13);
    uint64_t v101 = *((void *)a2 + 11);
    char v98 = v13 - 4;
    uint64_t v16 = v15 - 8;
    uint64_t v17 = v9 << 48;
    uint64_t v18 = v7 ^ 0xFFFFu;
    uint64_t v96 = a5;
    uint64_t v97 = -v12;
    uint64_t v95 = v11 + 16 * a3 + 8;
    uint64_t v19 = BLEND16_21384;
    while (1)
    {
      if (((v100 - v14) | (v14 - v101)) < 0)
      {
        unsigned int v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v14 & (unint64_t)v99) >> v98) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v97 : v12;
        unsigned int v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *(void *)(a1 + 32) + (v14 >> v13) * v12;
      uint64_t v24 = 0x8000;
      int v109 = a6;
      uint64_t v108 = v14;
      if (v107 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v25 = (uint64_t *)v95;
        uint64_t v26 = v96;
        while (1)
        {
          uint64_t v27 = *(v25 - 1);
          uint64_t v28 = *v25;
          uint64_t v29 = v23 + v27;
          if ((unint64_t)v16 >= v23 + v27) {
            uint64_t v30 = (char *)(v23 + v27);
          }
          else {
            uint64_t v30 = v16;
          }
          if (v30 < v8) {
            uint64_t v30 = v8;
          }
          unint64_t v31 = *(void *)v30;
          uint64_t v32 = *v25 & 0xF;
          if ((v28 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            uint64_t v44 = (char *)(v29 + v21);
            if ((unint64_t)v16 < v29 + v21) {
              uint64_t v44 = v16;
            }
            if (v44 < v8) {
              uint64_t v44 = v8;
            }
            unint64_t v45 = v19[v22];
            unint64_t v42 = v31 - ((v45 & v31) >> v22);
            unint64_t v43 = (v45 & *(void *)v44) >> v22;
            goto LABEL_43;
          }
LABEL_44:
          unint64_t v46 = v31 | v17;
          if (v7 != 0xFFFF)
          {
            unint64_t v47 = HIWORD(v46);
            unint64_t v46 = ((unint64_t)(unsigned __int16)(WORD2(v31)
                                                      - ((WORD2(v31) * v18
                                                        + 0x8000
                                                        + ((WORD2(v31) * v18 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v47 - ((v47 * v18 + 0x8000 + ((v47 * v18 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v31) - ((WORD1(v31) * v18 + 0x8000 + ((WORD1(v31) * v18 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v31 - (((unsigned __int16)v31 * v18 + 0x8000 + (((unsigned __int16)v31 * v18 + 0x8000) >> 16)) >> 16));
          }
          v25 += 2;
          *v10++ = (uint16x4_t)v46;
          if (!--v26) {
            goto LABEL_86;
          }
        }
        uint64_t v33 = v28 >> 4;
        uint64_t v34 = (char *)(v29 + (v28 >> 4));
        if (v16 < v34) {
          uint64_t v34 = v16;
        }
        if (v34 < v8) {
          uint64_t v34 = v8;
        }
        unint64_t v35 = *(void *)v34;
        if (v22)
        {
          uint64_t v36 = (char *)(v29 + v21);
          if (v16 >= v36) {
            uint64_t v37 = v36;
          }
          else {
            uint64_t v37 = v16;
          }
          if (v37 < v8) {
            uint64_t v37 = v8;
          }
          unint64_t v38 = *(void *)v37;
          uint64_t v39 = &v36[v33];
          if (v16 < v39) {
            uint64_t v39 = v16;
          }
          if (v39 < v8) {
            uint64_t v39 = v8;
          }
          unint64_t v40 = v19[v22];
          unint64_t v31 = v31 - ((v40 & v31) >> v22) + ((v40 & v38) >> v22);
          unint64_t v35 = v35 - ((v40 & v35) >> v22) + ((v40 & *(void *)v39) >> v22);
        }
        uint64_t v41 = v19[v32];
        unint64_t v42 = v31 - ((v41 & v31) >> v32);
        unint64_t v43 = (v41 & v35) >> v32;
LABEL_43:
        unint64_t v31 = v42 + v43;
        goto LABEL_44;
      }
LABEL_86:
      uint64_t v12 = v105;
      v10 += v106;
      LOBYTE(v13) = v104;
      uint64_t v14 = v108 + v103;
      a6 = v109 - 1;
      if (v109 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_86;
    }
    uint64_t v114 = v22;
    uint64_t v48 = (uint64_t *)v95;
    uint64_t v49 = v96;
    uint64_t v111 = *(void *)(a1 + 32) + (v14 >> v13) * v12;
    unsigned int v110 = v22;
    while (1)
    {
      uint64_t v50 = *(v48 - 1);
      uint64_t v51 = *v48;
      uint64_t v52 = v23 + v50;
      if ((unint64_t)v16 >= v23 + v50) {
        int v53 = (char *)(v23 + v50);
      }
      else {
        int v53 = v16;
      }
      if (v53 < v8) {
        int v53 = v8;
      }
      unint64_t v54 = *(void *)v53;
      uint64_t v55 = *v48 & 0xF;
      if ((v51 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        long long v67 = (char *)(v52 + v21);
        if ((unint64_t)v16 < v52 + v21) {
          long long v67 = v16;
        }
        if (v67 < v8) {
          long long v67 = v8;
        }
        unint64_t v68 = v19[v114];
        unint64_t v65 = v54 - ((v68 & v54) >> v114);
        unint64_t v66 = (v68 & *(void *)v67) >> v114;
        goto LABEL_78;
      }
LABEL_79:
      unint64_t v69 = v54 | v17;
      if (v7 != 0xFFFF) {
        unint64_t v69 = ((unint64_t)(unsigned __int16)(WORD2(v54)
      }
                                                  - ((v24
                                                    + WORD2(v54) * v18
                                                    + ((v24 + WORD2(v54) * v18) >> 16)) >> 16)) << 32) | ((HIWORD(v69) - ((v24 + HIWORD(v69) * v18 + ((v24 + HIWORD(v69) * v18) >> 16)) >> 16)) << 48) | ((WORD1(v54) - ((v24 + WORD1(v54) * v18 + ((v24 + WORD1(v54) * v18) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v54 - ((v24 + (unsigned __int16)v54 * v18 + ((v24 + (unsigned __int16)v54 * v18) >> 16)) >> 16));
      unint64_t v70 = HIWORD(v69);
      if (HIWORD(v69))
      {
        if (v70 == 0xFFFF)
        {
          *uint64_t v10 = (uint16x4_t)v69;
        }
        else
        {
          int v71 = v19;
          uint64_t v72 = v24;
          uint64_t v73 = v18;
          rgba64_DplusDM(v10, v69, (unint64_t)*v10, v70 ^ 0xFFFF);
          uint64_t v18 = v73;
          uint64_t v24 = v72;
          uint64_t v19 = v71;
          unsigned int v22 = v110;
          uint64_t v23 = v111;
          int v7 = v113;
        }
      }
      v48 += 2;
      ++v10;
      if (!--v49) {
        goto LABEL_86;
      }
    }
    uint64_t v56 = v51 >> 4;
    int v57 = (char *)(v52 + (v51 >> 4));
    if (v16 < v57) {
      int v57 = v16;
    }
    if (v57 < v8) {
      int v57 = v8;
    }
    unint64_t v58 = *(void *)v57;
    if (v22)
    {
      float v59 = (char *)(v52 + v21);
      if (v16 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v16;
      }
      if (v60 < v8) {
        unint64_t v60 = v8;
      }
      unint64_t v61 = *(void *)v60;
      long long v62 = &v59[v56];
      if (v16 < v62) {
        long long v62 = v16;
      }
      if (v62 < v8) {
        long long v62 = v8;
      }
      unint64_t v63 = v19[v114];
      unint64_t v54 = v54 - ((v63 & v54) >> v114) + ((v63 & v61) >> v114);
      unint64_t v58 = v58 - ((v63 & v58) >> v114) + ((v63 & *(void *)v62) >> v114);
    }
    uint64_t v64 = v19[v55];
    unint64_t v65 = v54 - ((v64 & v54) >> v55);
    unint64_t v66 = (v64 & v58) >> v55;
LABEL_78:
    unint64_t v54 = v65 + v66;
    goto LABEL_79;
  }
  uint32x2_t v115 = (uint64_t *)(v11 + 16 * a3);
  unsigned int v74 = v15 - 8;
  uint64_t v75 = v9 << 48;
  int v76 = v7 ^ 0xFFFF;
  uint64_t v112 = a5;
  do
  {
    int32x2_t v78 = *(char **)(a1 + 32);
    int v79 = &v78[(v14 >> v13) * v12];
    uint64_t v80 = v14;
    if (v107 == 1)
    {
      if (a5 >= 1)
      {
        unint64_t v81 = v115;
        uint64_t v82 = v112;
        do
        {
          uint64_t v83 = *v81;
          v81 += 2;
          uint32x2_t v84 = &v79[v83];
          if (v74 < &v79[v83]) {
            uint32x2_t v84 = v74;
          }
          if (v84 < v78) {
            uint32x2_t v84 = v78;
          }
          uint64_t v85 = *(void *)v84;
          unint64_t v86 = v85 | v75;
          if (v7 != 0xFFFF)
          {
            unint64_t v87 = HIWORD(v86);
            unint64_t v86 = ((unint64_t)(unsigned __int16)(WORD2(v85)
                                                      - ((WORD2(v85) * v76
                                                        + 0x8000
                                                        + ((WORD2(v85) * v76 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v87 - ((v87 * v76 + 0x8000 + ((v87 * v76 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v85) - ((WORD1(v85) * v76 + 0x8000 + ((WORD1(v85) * v76 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v85 - (((unsigned __int16)v85 * v76 + 0x8000 + (((unsigned __int16)v85 * v76 + 0x8000) >> 16)) >> 16));
          }
          *v10++ = (uint16x4_t)v86;
          --v82;
        }
        while (v82);
      }
    }
    else
    {
      int32x2_t v88 = v115;
      uint64_t v89 = v112;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v90 = *v88;
          v88 += 2;
          int v91 = &v79[v90];
          if (v74 < &v79[v90]) {
            int v91 = v74;
          }
          if ((unint64_t)v91 < *(void *)(a1 + 32)) {
            int v91 = *(char **)(a1 + 32);
          }
          uint64_t v92 = *(void *)v91;
          unint64_t v93 = v92 | v75;
          if (v7 != 0xFFFF) {
            unint64_t v93 = ((unint64_t)(unsigned __int16)(WORD2(v92)
          }
                                                      - ((WORD2(v92) * v76
                                                        + 0x8000
                                                        + ((WORD2(v92) * v76 + 0x8000) >> 16)) >> 16)) << 32) | ((HIWORD(v93) - ((HIWORD(v93) * v76 + 0x8000 + ((HIWORD(v93) * v76 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v92) - ((WORD1(v92) * v76 + 0x8000 + ((WORD1(v92) * v76 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v92 - (((unsigned __int16)v92 * v76 + 0x8000 + (((unsigned __int16)v92 * v76 + 0x8000) >> 16)) >> 16));
          unint64_t v94 = HIWORD(v93);
          if (HIWORD(v93))
          {
            if (v94 == 0xFFFF)
            {
              *uint64_t v10 = (uint16x4_t)v93;
            }
            else
            {
              rgba64_DplusDM(v10, v93, (unint64_t)*v10, v94 ^ 0xFFFF);
              int v7 = v113;
            }
          }
          ++v10;
          --v89;
        }
        while (v89);
      }
    }
    uint64_t v12 = v105;
    v10 += v106;
    LOBYTE(v13) = v104;
    uint64_t v14 = v80 + v103;
    --a6;
  }
  while (a6);
}

void rgba64_image_mark_RGBA64(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v7 = *((unsigned __int16 *)a2 + 4);
  int v128 = *a2;
  __n128 v8 = *(unsigned __int16 **)(a1 + 32);
  if (*(void *)(a1 + 40)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 0xFFFFLL;
  }
  uint64_t v10 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v127 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 15);
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v124 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v124 * a4;
  int v15 = (char *)v8
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  int v134 = *((unsigned __int16 *)a2 + 4);
  char v125 = v13;
  uint64_t v126 = v12;
  if (*(void *)(a1 + 176))
  {
    uint64_t v16 = a3;
    uint64_t v120 = ~(-1 << v13);
    uint64_t v121 = *((void *)a2 + 13);
    uint64_t v122 = *((void *)a2 + 11);
    char v119 = v13 - 4;
    uint64_t v17 = (unsigned __int16 *)(v15 - 8);
    uint64_t v18 = v9 << 48;
    uint64_t v19 = v7 ^ 0xFFFFu;
    uint64_t v117 = a5;
    uint64_t v118 = -v12;
    uint64_t v116 = v11 + 16 * v16 + 8;
    int v131 = *(unsigned __int16 **)(a1 + 32);
    int v132 = (unsigned __int16 *)(v15 - 8);
    while (1)
    {
      if (((v121 - v14) | (v14 - v122)) < 0)
      {
        uint64_t v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v14 & (unint64_t)v120) >> v119) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v118 : v12;
        uint64_t v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *(void *)(a1 + 32) + (v14 >> v13) * v12;
      uint64_t v24 = 0x8000;
      int v130 = a6;
      uint64_t v129 = v14;
      if (v128 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v25 = (uint64_t *)v116;
        uint64_t v26 = v117;
        while (1)
        {
          uint64_t v27 = *(v25 - 1);
          uint64_t v28 = *v25;
          uint64_t v29 = v23 + v27;
          if ((unint64_t)v17 >= v23 + v27) {
            uint64_t v30 = (unsigned __int16 *)(v23 + v27);
          }
          else {
            uint64_t v30 = v17;
          }
          if (v30 < v8) {
            uint64_t v30 = v8;
          }
          unint64_t v31 = ((unint64_t)(bswap32(v30[3]) >> 16) << 48) | ((unint64_t)(bswap32(v30[2]) >> 16) << 32) | bswap32(v30[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v30) >> 16);
          uint64_t v32 = *v25 & 0xF;
          if ((v28 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            uint64_t v44 = (unsigned __int16 *)(v29 + v21);
            if ((unint64_t)v17 < v29 + v21) {
              uint64_t v44 = v17;
            }
            if (v44 < v8) {
              uint64_t v44 = v8;
            }
            uint64_t v45 = BLEND16_21384[v22];
            unint64_t v42 = v31 - ((v45 & v31) >> v22);
            unint64_t v43 = ((((unint64_t)(bswap32(v44[3]) >> 16) << 48) | ((unint64_t)(bswap32(v44[2]) >> 16) << 32) | bswap32(v44[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v44) >> 16)) & v45) >> v22;
            goto LABEL_43;
          }
LABEL_44:
          unint64_t v46 = v31 | v18;
          if (v7 != 0xFFFF)
          {
            unint64_t v47 = HIWORD(v46);
            unint64_t v46 = ((unint64_t)(unsigned __int16)(WORD2(v31)
                                                      - ((WORD2(v31) * v19
                                                        + 0x8000
                                                        + ((WORD2(v31) * v19 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v47 - ((v47 * v19 + 0x8000 + ((v47 * v19 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v31) - ((WORD1(v31) * v19 + 0x8000 + ((WORD1(v31) * v19 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v31 - (((unsigned __int16)v31 * v19 + 0x8000 + (((unsigned __int16)v31 * v19 + 0x8000) >> 16)) >> 16));
          }
          v25 += 2;
          *v10++ = (uint16x4_t)v46;
          if (!--v26) {
            goto LABEL_86;
          }
        }
        uint64_t v33 = v28 >> 4;
        uint64_t v34 = (unsigned __int16 *)(v29 + (v28 >> 4));
        if (v17 < v34) {
          uint64_t v34 = v17;
        }
        if (v34 < v8) {
          uint64_t v34 = v8;
        }
        unint64_t v35 = ((unint64_t)(bswap32(v34[3]) >> 16) << 48) | ((unint64_t)(bswap32(v34[2]) >> 16) << 32) | bswap32(v34[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v34) >> 16);
        if (v22)
        {
          uint64_t v36 = (unsigned __int16 *)(v29 + v21);
          if (v17 >= v36) {
            uint64_t v37 = v36;
          }
          else {
            uint64_t v37 = v17;
          }
          if (v37 < v8) {
            uint64_t v37 = v8;
          }
          unint64_t v38 = ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
          uint64_t v39 = (unsigned __int16 *)((char *)v36 + v33);
          if (v17 < v39) {
            uint64_t v39 = v17;
          }
          if (v39 < v8) {
            uint64_t v39 = v8;
          }
          uint64_t v40 = BLEND16_21384[v22];
          unint64_t v31 = v31 - ((v40 & v31) >> v22) + ((v38 & v40) >> v22);
          unint64_t v35 = v35
              - ((v40 & v35) >> v22)
              + (((((unint64_t)(bswap32(v39[3]) >> 16) << 48) | ((unint64_t)(bswap32(v39[2]) >> 16) << 32) | bswap32(v39[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v39) >> 16)) & v40) >> v22);
        }
        uint64_t v41 = BLEND16_21384[v32];
        unint64_t v42 = v31 - ((v41 & v31) >> v32);
        unint64_t v43 = (v41 & v35) >> v32;
LABEL_43:
        unint64_t v31 = v42 + v43;
        goto LABEL_44;
      }
LABEL_86:
      uint64_t v12 = v126;
      v10 += v127;
      LOBYTE(v13) = v125;
      uint64_t v14 = v129 + v124;
      a6 = v130 - 1;
      if (v130 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_86;
    }
    uint64_t v135 = v22;
    uint64_t v49 = (uint64_t *)v116;
    uint64_t v48 = v117;
    while (1)
    {
      uint64_t v50 = *(v49 - 1);
      uint64_t v51 = *v49;
      uint64_t v52 = v23 + v50;
      if ((unint64_t)v17 >= v23 + v50) {
        int v53 = (unsigned __int16 *)(v23 + v50);
      }
      else {
        int v53 = v17;
      }
      if (v53 < v8) {
        int v53 = v8;
      }
      unint64_t v54 = ((unint64_t)(bswap32(v53[3]) >> 16) << 48) | ((unint64_t)(bswap32(v53[2]) >> 16) << 32) | bswap32(v53[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v53) >> 16);
      uint64_t v55 = *v49 & 0xF;
      if ((v51 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        long long v67 = (unsigned __int16 *)(v52 + v21);
        if ((unint64_t)v17 < v52 + v21) {
          long long v67 = v17;
        }
        if (v67 < v8) {
          long long v67 = v8;
        }
        uint64_t v68 = BLEND16_21384[v135];
        unint64_t v65 = v54 - ((v68 & v54) >> v135);
        unint64_t v66 = ((((unint64_t)(bswap32(v67[3]) >> 16) << 48) | ((unint64_t)(bswap32(v67[2]) >> 16) << 32) | bswap32(v67[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v67) >> 16)) & v68) >> v135;
        goto LABEL_78;
      }
LABEL_79:
      unint64_t v69 = v54 | v18;
      if (v7 != 0xFFFF) {
        unint64_t v69 = ((unint64_t)(unsigned __int16)(WORD2(v54)
      }
                                                  - ((v24
                                                    + WORD2(v54) * v19
                                                    + ((v24 + WORD2(v54) * v19) >> 16)) >> 16)) << 32) | ((HIWORD(v69) - ((v24 + HIWORD(v69) * v19 + ((v24 + HIWORD(v69) * v19) >> 16)) >> 16)) << 48) | ((WORD1(v54) - ((v24 + WORD1(v54) * v19 + ((v24 + WORD1(v54) * v19) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v54 - ((v24 + (unsigned __int16)v54 * v19 + ((v24 + (unsigned __int16)v54 * v19) >> 16)) >> 16));
      unint64_t v70 = HIWORD(v69);
      if (HIWORD(v69))
      {
        if (v70 == 0xFFFF)
        {
          *uint64_t v10 = (uint16x4_t)v69;
        }
        else
        {
          uint64_t v71 = v23;
          uint64_t v72 = v18;
          uint64_t v73 = v24;
          uint64_t v74 = v22;
          uint64_t v75 = v19;
          rgba64_DplusDM(v10, v69, (unint64_t)*v10, v70 ^ 0xFFFF);
          uint64_t v19 = v75;
          uint64_t v22 = v74;
          uint64_t v24 = v73;
          uint64_t v18 = v72;
          uint64_t v23 = v71;
          __n128 v8 = v131;
          uint64_t v17 = v132;
          int v7 = v134;
        }
      }
      v49 += 2;
      ++v10;
      if (!--v48) {
        goto LABEL_86;
      }
    }
    uint64_t v56 = v51 >> 4;
    int v57 = (unsigned __int16 *)(v52 + (v51 >> 4));
    if (v17 < v57) {
      int v57 = v17;
    }
    if (v57 < v8) {
      int v57 = v8;
    }
    unint64_t v58 = ((unint64_t)(bswap32(v57[3]) >> 16) << 48) | ((unint64_t)(bswap32(v57[2]) >> 16) << 32) | bswap32(v57[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v57) >> 16);
    if (v22)
    {
      float v59 = (unsigned __int16 *)(v52 + v21);
      if (v17 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v17;
      }
      if (v60 < v8) {
        unint64_t v60 = v8;
      }
      unint64_t v61 = ((unint64_t)(bswap32(v60[3]) >> 16) << 48) | ((unint64_t)(bswap32(v60[2]) >> 16) << 32) | bswap32(v60[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v60) >> 16);
      long long v62 = (unsigned __int16 *)((char *)v59 + v56);
      if (v17 < v62) {
        long long v62 = v17;
      }
      if (v62 < v8) {
        long long v62 = v8;
      }
      uint64_t v63 = BLEND16_21384[v135];
      unint64_t v54 = v54 - ((v63 & v54) >> v135) + ((v61 & v63) >> v135);
      unint64_t v58 = v58
          - ((v63 & v58) >> v135)
          + (((((unint64_t)(bswap32(v62[3]) >> 16) << 48) | ((unint64_t)(bswap32(v62[2]) >> 16) << 32) | bswap32(v62[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v62) >> 16)) & v63) >> v135);
    }
    uint64_t v64 = BLEND16_21384[v55];
    unint64_t v65 = v54 - ((v64 & v54) >> v55);
    unint64_t v66 = (v64 & v58) >> v55;
LABEL_78:
    unint64_t v54 = v65 + v66;
    goto LABEL_79;
  }
  unint64_t v133 = (uint64_t *)(v11 + 16 * a3);
  int v76 = (unsigned __int16 *)(v15 - 8);
  uint64_t v77 = v9 << 48;
  int v78 = v7 ^ 0xFFFF;
  int32x2_t v79 = vdup_n_s32(v7 ^ 0xFFFFu);
  uint64x2_t v80 = (uint64x2_t)xmmword_1850CDE00;
  uint64_t v81 = a5;
  do
  {
    uint64_t v82 = v14;
    uint64_t v83 = *(unsigned __int16 **)(a1 + 32);
    uint32x2_t v84 = (char *)v83 + (v14 >> v13) * v12;
    if (v128 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v85 = v133;
        uint64_t v86 = v81;
        do
        {
          uint64_t v87 = *v85;
          v85 += 2;
          int32x2_t v88 = (unsigned __int16 *)&v84[v87];
          if (v76 < (unsigned __int16 *)&v84[v87]) {
            int32x2_t v88 = v76;
          }
          if (v88 >= v83) {
            uint64_t v89 = v88;
          }
          else {
            uint64_t v89 = v83;
          }
          uint64_t v90 = bswap32(v89[3]) >> 16;
          uint64_t v91 = bswap32(*v89) >> 16;
          unsigned int v92 = bswap32(v89[1]) >> 16;
          uint64_t v93 = bswap32(v89[2]) >> 16;
          unint64_t v94 = (v92 << 16) | (unint64_t)(v90 << 48) | (v93 << 32) | v77 | v91;
          if (v7 != 0xFFFF)
          {
            v95.i32[0] = HIWORD(v94);
            v95.i32[1] = v93;
            uint32x2_t v96 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v95, v79);
            int8x8_t v97 = vand_s8((int8x8_t)vsub_s32(v95, (int32x2_t)vshr_n_u32(vsra_n_u32(v96, v96, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v98.i64[0] = v97.u32[0];
            v98.i64[1] = v97.u32[1];
            int8x16_t v99 = (int8x16_t)vshlq_u64(v98, v80);
            unint64_t v94 = vorrq_s8(v99, (int8x16_t)vdupq_laneq_s64((int64x2_t)v99, 1)).u64[0] | ((v92
                                                                                        - ((v92 * v78
                                                                                          + 0x8000
                                                                                          + ((v92 * v78 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v91 - ((v91 * v78 + 0x8000 + ((v91 * v78 + 0x8000) >> 16)) >> 16));
          }
          *v10++ = (uint16x4_t)v94;
          --v86;
        }
        while (v86);
      }
    }
    else
    {
      uint64_t v100 = v133;
      uint64_t v101 = v81;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v102 = *v100;
          v100 += 2;
          uint64_t v103 = (unsigned __int16 *)&v84[v102];
          char v104 = *(unsigned __int16 **)(a1 + 32);
          if (v76 < (unsigned __int16 *)&v84[v102]) {
            uint64_t v103 = v76;
          }
          if (v103 >= v104) {
            char v104 = v103;
          }
          uint64_t v105 = bswap32(v104[3]) >> 16;
          uint64_t v106 = bswap32(*v104) >> 16;
          unsigned int v107 = bswap32(v104[1]) >> 16;
          uint64_t v108 = bswap32(v104[2]) >> 16;
          unint64_t v109 = (v107 << 16) | (unint64_t)(v105 << 48) | (v108 << 32) | v77 | v106;
          if (v7 != 0xFFFF)
          {
            v110.i32[0] = HIWORD(v109);
            v110.i32[1] = v108;
            uint32x2_t v111 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v110, v79);
            int8x8_t v112 = vand_s8((int8x8_t)vsub_s32(v110, (int32x2_t)vshr_n_u32(vsra_n_u32(v111, v111, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v113.i64[0] = v112.u32[0];
            v113.i64[1] = v112.u32[1];
            int8x16_t v114 = (int8x16_t)vshlq_u64(v113, v80);
            unint64_t v109 = vorrq_s8(v114, (int8x16_t)vdupq_laneq_s64((int64x2_t)v114, 1)).u64[0] | ((v107
                                                                                           - ((v107 * v78
                                                                                             + 0x8000
                                                                                             + ((v107 * v78 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v106 - ((v106 * v78 + 0x8000 + ((v106 * v78 + 0x8000) >> 16)) >> 16));
          }
          unint64_t v115 = HIWORD(v109);
          if (HIWORD(v109))
          {
            if (v115 == 0xFFFF)
            {
              *uint64_t v10 = (uint16x4_t)v109;
            }
            else
            {
              rgba64_DplusDM(v10, v109, (unint64_t)*v10, v115 ^ 0xFFFF);
              uint64x2_t v80 = (uint64x2_t)xmmword_1850CDE00;
              int v7 = v134;
            }
          }
          ++v10;
          --v101;
        }
        while (v101);
      }
    }
    uint64_t v12 = v126;
    v10 += v127;
    LOBYTE(v13) = v125;
    uint64_t v14 = v82 + v124;
    --a6;
  }
  while (a6);
}

void rgba64_image_mark_rgb48(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v109 = *a2;
  int v7 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v108 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v105 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v105 * a4;
  uint64_t v12 = *(unsigned __int16 **)(a1 + 32);
  uint64_t v13 = (char *)v12
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  uint64_t v14 = 0x8000;
  int v115 = v6;
  char v106 = v10;
  uint64_t v107 = v9;
  if (*(void *)(a1 + 176))
  {
    uint64_t v103 = *((void *)a2 + 11);
    uint64_t v102 = *((void *)a2 + 13);
    uint64_t v101 = ~(-1 << v10);
    char v100 = v10 - 4;
    int v15 = (unsigned __int16 *)(v13 - 6);
    uint64_t v16 = v6 ^ 0xFFFFu;
    unint64_t v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v98 = a5;
    uint64_t v99 = -v9;
    uint64_t v97 = v8 + 16 * a3 + 8;
    uint64x2_t v113 = v12;
    while (1)
    {
      if (((v102 - v11) | (v11 - v103)) < 0)
      {
        int v20 = 0;
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v18 = ((v11 & (unint64_t)v101) >> v100) & 0xF;
        uint64_t v19 = (unint64_t)(v18 - 7) >= 9 ? v99 : v9;
        int v20 = weights_21383[v18] & 0xF;
      }
      uint64_t v21 = *(void *)(a1 + 32) + (v11 >> v10) * v9;
      int v111 = a6;
      uint64_t v110 = v11;
      if (v109 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v22 = (uint64_t *)v97;
        uint64_t v23 = v98;
        while (1)
        {
          uint64_t v24 = *(v22 - 1);
          uint64_t v25 = *v22;
          uint64_t v26 = v21 + v24;
          if ((unint64_t)v15 >= v21 + v24) {
            uint64_t v27 = (unsigned __int16 *)(v21 + v24);
          }
          else {
            uint64_t v27 = v15;
          }
          if (v27 < v12) {
            uint64_t v27 = v12;
          }
          unint64_t v28 = *v27 | ((unint64_t)*(unsigned int *)(v27 + 1) << 16);
          uint64_t v29 = *v22 & 0xF;
          if ((v25 & 0xF) != 0) {
            break;
          }
          if (v20)
          {
            uint64_t v41 = (unsigned __int16 *)(v26 + v19);
            if ((unint64_t)v15 < v26 + v19) {
              uint64_t v41 = v15;
            }
            if (v41 < v12) {
              uint64_t v41 = v12;
            }
            uint64_t v42 = BLEND16_21384[v20];
            unint64_t v39 = v28 - ((v42 & v28) >> v20);
            unint64_t v40 = ((*v41 | ((unint64_t)*(unsigned int *)(v41 + 1) << 16)) & v42) >> v20;
            goto LABEL_40;
          }
LABEL_41:
          if (v6 == 0xFFFF) {
            unint64_t v43 = v28 | 0xFFFF000000000000;
          }
          else {
            unint64_t v43 = ((WORD1(v28)
          }
                  - ((v14 + WORD1(v28) * v16 + ((v14 + WORD1(v28) * v16) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v28) - ((v14 + WORD2(v28) * v16 + ((v14 + WORD2(v28) * v16) >> 16)) >> 16)) << 32) | (unsigned __int16)(v28 - ((v14 + (unsigned __int16)v28 * v16 + ((v14 + (unsigned __int16)v28 * v16) >> 16)) >> 16)) | v17;
          v22 += 2;
          *v7++ = (uint16x4_t)v43;
          if (!--v23) {
            goto LABEL_85;
          }
        }
        uint64_t v30 = v25 >> 4;
        unint64_t v31 = (unsigned __int16 *)(v26 + (v25 >> 4));
        if (v15 < v31) {
          unint64_t v31 = v15;
        }
        if (v31 < v12) {
          unint64_t v31 = v12;
        }
        unint64_t v32 = *v31 | ((unint64_t)*(unsigned int *)(v31 + 1) << 16);
        if (v20)
        {
          uint64_t v33 = (unsigned __int16 *)(v26 + v19);
          if (v15 >= v33) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = v15;
          }
          if (v34 < v12) {
            uint64_t v34 = v12;
          }
          unint64_t v35 = *v34 | ((unint64_t)*(unsigned int *)(v34 + 1) << 16);
          uint64_t v36 = (unsigned __int16 *)((char *)v33 + v30);
          if (v15 < v36) {
            uint64_t v36 = v15;
          }
          if (v36 < v12) {
            uint64_t v36 = v12;
          }
          uint64_t v37 = BLEND16_21384[v20];
          unint64_t v28 = v28 - ((v37 & v28) >> v20) + ((v35 & v37) >> v20);
          unint64_t v32 = v32
              - ((v37 & v32) >> v20)
              + (((*v36 | ((unint64_t)*(unsigned int *)(v36 + 1) << 16)) & v37) >> v20);
        }
        uint64_t v38 = BLEND16_21384[v29];
        unint64_t v39 = v28 - ((v38 & v28) >> v29);
        unint64_t v40 = (v38 & v32) >> v29;
LABEL_40:
        unint64_t v28 = v39 + v40;
        goto LABEL_41;
      }
LABEL_85:
      uint64_t v9 = v107;
      v7 += v108;
      LOBYTE(v10) = v106;
      uint64_t v11 = v110 + v105;
      a6 = v111 - 1;
      if (v111 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_85;
    }
    uint64_t v45 = (uint64_t *)v97;
    uint64_t v44 = v98;
    while (1)
    {
      uint64_t v46 = *(v45 - 1);
      uint64_t v47 = *v45;
      uint64_t v48 = v21 + v46;
      if ((unint64_t)v15 >= v21 + v46) {
        uint64_t v49 = (unsigned __int16 *)(v21 + v46);
      }
      else {
        uint64_t v49 = v15;
      }
      if (v49 < v12) {
        uint64_t v49 = v12;
      }
      unint64_t v50 = *v49 | ((unint64_t)*(unsigned int *)(v49 + 1) << 16);
      uint64_t v51 = *v45 & 0xF;
      if ((v47 & 0xF) != 0) {
        break;
      }
      if (v20)
      {
        uint64_t v63 = (unsigned __int16 *)(v48 + v19);
        if ((unint64_t)v15 < v48 + v19) {
          uint64_t v63 = v15;
        }
        if (v63 < v12) {
          uint64_t v63 = v12;
        }
        uint64_t v64 = BLEND16_21384[v20];
        unint64_t v61 = v50 - ((v64 & v50) >> v20);
        unint64_t v62 = ((*v63 | ((unint64_t)*(unsigned int *)(v63 + 1) << 16)) & v64) >> v20;
        goto LABEL_76;
      }
LABEL_77:
      if (v6 == 0xFFFF) {
        unint64_t v65 = v50 | 0xFFFF000000000000;
      }
      else {
        unint64_t v65 = ((WORD1(v50)
      }
              - ((v14 + WORD1(v50) * v16 + ((v14 + WORD1(v50) * v16) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v50) - ((v14 + WORD2(v50) * v16 + ((v14 + WORD2(v50) * v16) >> 16)) >> 16)) << 32) | (unsigned __int16)(v50 - ((v14 + (unsigned __int16)v50 * v16 + ((v14 + (unsigned __int16)v50 * v16) >> 16)) >> 16)) | v17;
      unint64_t v66 = HIWORD(v65);
      if (HIWORD(v65))
      {
        if (v66 == 0xFFFF)
        {
          *int v7 = (uint16x4_t)v65;
        }
        else
        {
          unint64_t v67 = v17;
          uint64_t v68 = v19;
          uint64_t v69 = v14;
          uint64_t v70 = v16;
          rgba64_DplusDM(v7, v65, (unint64_t)*v7, v66 ^ 0xFFFF);
          uint64_t v16 = v70;
          uint64_t v14 = v69;
          uint64_t v19 = v68;
          unint64_t v17 = v67;
          uint64_t v12 = v113;
          int v6 = v115;
        }
      }
      v45 += 2;
      ++v7;
      if (!--v44) {
        goto LABEL_85;
      }
    }
    uint64_t v52 = v47 >> 4;
    int v53 = (unsigned __int16 *)(v48 + (v47 >> 4));
    if (v15 < v53) {
      int v53 = v15;
    }
    if (v53 < v12) {
      int v53 = v12;
    }
    unint64_t v54 = *v53 | ((unint64_t)*(unsigned int *)(v53 + 1) << 16);
    if (v20)
    {
      uint64_t v55 = (unsigned __int16 *)(v48 + v19);
      if (v15 >= v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = v15;
      }
      if (v56 < v12) {
        uint64_t v56 = v12;
      }
      unint64_t v57 = *v56 | ((unint64_t)*(unsigned int *)(v56 + 1) << 16);
      unint64_t v58 = (unsigned __int16 *)((char *)v55 + v52);
      if (v15 < v58) {
        unint64_t v58 = v15;
      }
      if (v58 < v12) {
        unint64_t v58 = v12;
      }
      uint64_t v59 = BLEND16_21384[v20];
      unint64_t v50 = v50 - ((v59 & v50) >> v20) + ((v57 & v59) >> v20);
      unint64_t v54 = v54 - ((v59 & v54) >> v20) + (((*v58 | ((unint64_t)*(unsigned int *)(v58 + 1) << 16)) & v59) >> v20);
    }
    uint64_t v60 = BLEND16_21384[v51];
    unint64_t v61 = v50 - ((v60 & v50) >> v51);
    unint64_t v62 = (v60 & v54) >> v51;
LABEL_76:
    unint64_t v50 = v61 + v62;
    goto LABEL_77;
  }
  uint64_t v116 = (uint64_t *)(v8 + 16 * a3);
  uint64_t v71 = v13 - 6;
  int v72 = v6 ^ 0xFFFF;
  unint64_t v73 = (unint64_t)(~(0xFFFF * v72 + 0x8000 + ((0xFFFF * v72 + 0x8000) >> 16)) >> 16) << 48;
  uint64_t v114 = a5;
  do
  {
    uint64_t v74 = *(char **)(a1 + 32);
    uint64_t v75 = &v74[(v11 >> v10) * v9];
    int v112 = a6;
    if (v109 == 1)
    {
      uint64_t v76 = v11;
      if (a5 >= 1)
      {
        uint64_t v77 = v116;
        uint64_t v78 = v114;
        do
        {
          uint64_t v79 = *v77;
          v77 += 2;
          uint64x2_t v80 = &v75[v79];
          if (v71 < &v75[v79]) {
            uint64x2_t v80 = v71;
          }
          if (v80 < v74) {
            uint64x2_t v80 = v74;
          }
          uint64_t v81 = *(unsigned __int16 *)v80;
          uint64_t v82 = *((unsigned __int16 *)v80 + 1);
          uint64_t v83 = *((unsigned __int16 *)v80 + 2);
          unint64_t v84 = v81 | (v82 << 16) | (v83 << 32) | 0xFFFF000000000000;
          unint64_t v85 = ((v82 - ((v82 * v72 + 0x8000 + ((v82 * v72 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v83 - ((v83 * v72 + 0x8000 + ((v83 * v72 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v81 - ((v81 * v72 + 0x8000 + ((v81 * v72 + 0x8000) >> 16)) >> 16)) | v73;
          if (v6 == 0xFFFF) {
            unint64_t v85 = v84;
          }
          *v7++ = (uint16x4_t)v85;
          --v78;
        }
        while (v78);
      }
    }
    else
    {
      uint64_t v76 = v11;
      uint64_t v86 = v116;
      uint64_t v87 = v114;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v88 = *v86;
          v86 += 2;
          uint64_t v89 = &v75[v88];
          if (v71 < &v75[v88]) {
            uint64_t v89 = v71;
          }
          if ((unint64_t)v89 < *(void *)(a1 + 32)) {
            uint64_t v89 = *(char **)(a1 + 32);
          }
          uint64_t v90 = *(unsigned __int16 *)v89;
          uint64_t v91 = *((unsigned __int16 *)v89 + 1);
          uint64_t v92 = *((unsigned __int16 *)v89 + 2);
          unint64_t v93 = v90 | (v91 << 16) | (v92 << 32) | 0xFFFF000000000000;
          unint64_t v94 = ((v91 - ((v91 * v72 + 0x8000 + ((v91 * v72 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v92 - ((v92 * v72 + 0x8000 + ((v92 * v72 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v90 - ((v90 * v72 + 0x8000 + ((v90 * v72 + 0x8000) >> 16)) >> 16)) | v73;
          if (v6 == 0xFFFF) {
            unint64_t v95 = v93;
          }
          else {
            unint64_t v95 = v94;
          }
          unint64_t v96 = HIWORD(v95);
          if (HIWORD(v95))
          {
            if (v96 == 0xFFFF)
            {
              *int v7 = (uint16x4_t)v95;
            }
            else
            {
              rgba64_DplusDM(v7, v95, (unint64_t)*v7, v96 ^ 0xFFFF);
              int v6 = v115;
            }
          }
          ++v7;
          --v87;
        }
        while (v87);
      }
    }
    uint64_t v9 = v107;
    v7 += v108;
    LOBYTE(v10) = v106;
    uint64_t v11 = v76 + v105;
    a6 = v112 - 1;
  }
  while (v112 != 1);
}

void rgba64_image_mark_RGB48(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v112 = *a2;
  int v7 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v111 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v108 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v108 * a4;
  uint64_t v12 = *(unsigned __int16 **)(a1 + 32);
  uint64_t v13 = (char *)v12
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  uint64_t v14 = 0x8000;
  int v119 = v6;
  char v109 = v10;
  uint64_t v110 = v9;
  if (*(void *)(a1 + 176))
  {
    uint64_t v15 = a3;
    uint64_t v106 = *((void *)a2 + 11);
    uint64_t v105 = *((void *)a2 + 13);
    uint64_t v104 = ~(-1 << v10);
    char v103 = v10 - 4;
    uint64_t v16 = (unsigned __int16 *)(v13 - 6);
    uint64_t v17 = v6 ^ 0xFFFFu;
    unint64_t v18 = (unint64_t)(~(0xFFFF * v17 + 0x8000 + ((0xFFFF * v17 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v101 = a5;
    uint64_t v102 = -v9;
    uint64_t v100 = v8 + 16 * v15 + 8;
    uint64_t v19 = BLEND16_21384;
    uint64_t v116 = *(unsigned __int16 **)(a1 + 32);
    while (1)
    {
      if (((v105 - v11) | (v11 - v106)) < 0)
      {
        unsigned int v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v11 & (unint64_t)v104) >> v103) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v102 : v9;
        unsigned int v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *(void *)(a1 + 32) + (v11 >> v10) * v9;
      int v114 = a6;
      uint64_t v113 = v11;
      if (v112 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v24 = (uint64_t *)v100;
        uint64_t v25 = v101;
        while (1)
        {
          uint64_t v26 = *(v24 - 1);
          uint64_t v27 = *v24;
          uint64_t v28 = v23 + v26;
          if ((unint64_t)v16 >= v23 + v26) {
            uint64_t v29 = (unsigned __int16 *)(v23 + v26);
          }
          else {
            uint64_t v29 = v16;
          }
          if (v29 < v12) {
            uint64_t v29 = v12;
          }
          unint64_t v30 = bswap32(v29[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v29[2]) >> 16) << 32) | (bswap32(*v29) >> 16);
          uint64_t v31 = *v24 & 0xF;
          if ((v27 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            unint64_t v43 = (unsigned __int16 *)(v28 + v21);
            if ((unint64_t)v16 < v28 + v21) {
              unint64_t v43 = v16;
            }
            if (v43 < v12) {
              unint64_t v43 = v12;
            }
            uint64_t v44 = v19[v22];
            unint64_t v41 = v30 - ((v44 & v30) >> v22);
            unint64_t v42 = ((bswap32(v43[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v43[2]) >> 16) << 32) | (bswap32(*v43) >> 16)) & v44) >> v22;
            goto LABEL_40;
          }
LABEL_41:
          if (v6 == 0xFFFF) {
            unint64_t v45 = v30 | 0xFFFF000000000000;
          }
          else {
            unint64_t v45 = ((WORD1(v30)
          }
                  - ((v14 + WORD1(v30) * v17 + ((v14 + WORD1(v30) * v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v30) - ((v14 + WORD2(v30) * v17 + ((v14 + WORD2(v30) * v17) >> 16)) >> 16)) << 32) | (unsigned __int16)(v30 - ((v14 + (unsigned __int16)v30 * v17 + ((v14 + (unsigned __int16)v30 * v17) >> 16)) >> 16)) | v18;
          v24 += 2;
          *v7++ = (uint16x4_t)v45;
          if (!--v25) {
            goto LABEL_85;
          }
        }
        uint64_t v32 = v27 >> 4;
        uint64_t v33 = (unsigned __int16 *)(v28 + (v27 >> 4));
        if (v16 < v33) {
          uint64_t v33 = v16;
        }
        if (v33 < v12) {
          uint64_t v33 = v12;
        }
        unint64_t v34 = bswap32(v33[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v33[2]) >> 16) << 32) | (bswap32(*v33) >> 16);
        if (v22)
        {
          unint64_t v35 = (unsigned __int16 *)(v28 + v21);
          if (v16 >= v35) {
            uint64_t v36 = v35;
          }
          else {
            uint64_t v36 = v16;
          }
          if (v36 < v12) {
            uint64_t v36 = v12;
          }
          unint64_t v37 = bswap32(v36[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v36[2]) >> 16) << 32) | (bswap32(*v36) >> 16);
          uint64_t v38 = (unsigned __int16 *)((char *)v35 + v32);
          if (v16 < v38) {
            uint64_t v38 = v16;
          }
          if (v38 < v12) {
            uint64_t v38 = v12;
          }
          uint64_t v39 = v19[v22];
          unint64_t v30 = v30 - ((v39 & v30) >> v22) + ((v37 & v39) >> v22);
          unint64_t v34 = v34
              - ((v39 & v34) >> v22)
              + (((bswap32(v38[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v38[2]) >> 16) << 32) | (bswap32(*v38) >> 16)) & v39) >> v22);
        }
        uint64_t v40 = v19[v31];
        unint64_t v41 = v30 - ((v40 & v30) >> v31);
        unint64_t v42 = (v40 & v34) >> v31;
LABEL_40:
        unint64_t v30 = v41 + v42;
        goto LABEL_41;
      }
LABEL_85:
      uint64_t v9 = v110;
      v7 += v111;
      LOBYTE(v10) = v109;
      uint64_t v11 = v113 + v108;
      a6 = v114 - 1;
      if (v114 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_85;
    }
    uint64_t v120 = v22;
    uint64_t v47 = (uint64_t *)v100;
    uint64_t v46 = v101;
    unsigned int v117 = v22;
    while (1)
    {
      uint64_t v48 = *(v47 - 1);
      uint64_t v49 = *v47;
      uint64_t v50 = v23 + v48;
      if ((unint64_t)v16 >= v23 + v48) {
        uint64_t v51 = (unsigned __int16 *)(v23 + v48);
      }
      else {
        uint64_t v51 = v16;
      }
      if (v51 < v12) {
        uint64_t v51 = v12;
      }
      unint64_t v52 = bswap32(v51[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v51[2]) >> 16) << 32) | (bswap32(*v51) >> 16);
      uint64_t v53 = *v47 & 0xF;
      if ((v49 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        unint64_t v65 = (unsigned __int16 *)(v50 + v21);
        if ((unint64_t)v16 < v50 + v21) {
          unint64_t v65 = v16;
        }
        if (v65 < v12) {
          unint64_t v65 = v12;
        }
        uint64_t v66 = v19[v120];
        unint64_t v63 = v52 - ((v66 & v52) >> v120);
        unint64_t v64 = ((bswap32(v65[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v65[2]) >> 16) << 32) | (bswap32(*v65) >> 16)) & v66) >> v120;
        goto LABEL_76;
      }
LABEL_77:
      if (v6 == 0xFFFF) {
        unint64_t v67 = v52 | 0xFFFF000000000000;
      }
      else {
        unint64_t v67 = ((WORD1(v52)
      }
              - ((v14 + WORD1(v52) * v17 + ((v14 + WORD1(v52) * v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v52) - ((v14 + WORD2(v52) * v17 + ((v14 + WORD2(v52) * v17) >> 16)) >> 16)) << 32) | (unsigned __int16)(v52 - ((v14 + (unsigned __int16)v52 * v17 + ((v14 + (unsigned __int16)v52 * v17) >> 16)) >> 16)) | v18;
      unint64_t v68 = HIWORD(v67);
      if (HIWORD(v67))
      {
        if (v68 == 0xFFFF)
        {
          *int v7 = (uint16x4_t)v67;
        }
        else
        {
          unint64_t v69 = v18;
          uint64_t v70 = v23;
          uint64_t v71 = v19;
          uint64_t v72 = v14;
          uint64_t v73 = v17;
          uint64_t v74 = v21;
          rgba64_DplusDM(v7, v67, (unint64_t)*v7, v68 ^ 0xFFFF);
          uint64_t v21 = v74;
          uint64_t v17 = v73;
          uint64_t v14 = v72;
          uint64_t v19 = v71;
          uint64_t v23 = v70;
          uint64_t v12 = v116;
          unint64_t v18 = v69;
          unsigned int v22 = v117;
          int v6 = v119;
        }
      }
      v47 += 2;
      ++v7;
      if (!--v46) {
        goto LABEL_85;
      }
    }
    uint64_t v54 = v49 >> 4;
    uint64_t v55 = (unsigned __int16 *)(v50 + (v49 >> 4));
    if (v16 < v55) {
      uint64_t v55 = v16;
    }
    if (v55 < v12) {
      uint64_t v55 = v12;
    }
    unint64_t v56 = bswap32(v55[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (bswap32(*v55) >> 16);
    if (v22)
    {
      unint64_t v57 = (unsigned __int16 *)(v50 + v21);
      if (v16 >= v57) {
        unint64_t v58 = v57;
      }
      else {
        unint64_t v58 = v16;
      }
      if (v58 < v12) {
        unint64_t v58 = v12;
      }
      unint64_t v59 = bswap32(v58[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v58[2]) >> 16) << 32) | (bswap32(*v58) >> 16);
      uint64_t v60 = (unsigned __int16 *)((char *)v57 + v54);
      if (v16 < v60) {
        uint64_t v60 = v16;
      }
      if (v60 < v12) {
        uint64_t v60 = v12;
      }
      uint64_t v61 = v19[v120];
      unint64_t v52 = v52 - ((v61 & v52) >> v120) + ((v59 & v61) >> v120);
      unint64_t v56 = v56
          - ((v61 & v56) >> v120)
          + (((bswap32(v60[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v60[2]) >> 16) << 32) | (bswap32(*v60) >> 16)) & v61) >> v120);
    }
    uint64_t v62 = v19[v53];
    unint64_t v63 = v52 - ((v62 & v52) >> v53);
    unint64_t v64 = (v62 & v56) >> v53;
LABEL_76:
    unint64_t v52 = v63 + v64;
    goto LABEL_77;
  }
  uint64_t v121 = (uint64_t *)(v8 + 16 * a3);
  uint64_t v75 = v13 - 6;
  int v76 = v6 ^ 0xFFFF;
  unint64_t v77 = (unint64_t)(~(0xFFFF * v76 + 0x8000 + ((0xFFFF * v76 + 0x8000) >> 16)) >> 16) << 48;
  uint64_t v118 = a5;
  do
  {
    uint64_t v78 = *(char **)(a1 + 32);
    uint64_t v79 = &v78[(v11 >> v10) * v9];
    int v115 = a6;
    if (v112 == 1)
    {
      if (a5 >= 1)
      {
        uint64x2_t v80 = v121;
        uint64_t v81 = v118;
        do
        {
          uint64_t v82 = *v80;
          v80 += 2;
          uint64_t v83 = &v79[v82];
          if (v75 < &v79[v82]) {
            uint64_t v83 = v75;
          }
          if (v83 < v78) {
            uint64_t v83 = v78;
          }
          uint64_t v84 = bswap32(*(unsigned __int16 *)v83) >> 16;
          uint64_t v85 = bswap32(*((unsigned __int16 *)v83 + 1)) >> 16;
          uint64_t v86 = bswap32(*((unsigned __int16 *)v83 + 2)) >> 16;
          unint64_t v87 = v84 | (v86 << 32) | (v85 << 16) | 0xFFFF000000000000;
          unint64_t v88 = ((v85 - ((v85 * v76 + 0x8000 + ((v85 * v76 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v86 - ((v86 * v76 + 0x8000 + ((v86 * v76 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v84 - ((v84 * v76 + 0x8000 + ((v84 * v76 + 0x8000) >> 16)) >> 16)) | v77;
          if (v6 == 0xFFFF) {
            unint64_t v88 = v87;
          }
          *v7++ = (uint16x4_t)v88;
          --v81;
        }
        while (v81);
      }
    }
    else
    {
      uint64_t v89 = v121;
      uint64_t v90 = v118;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v91 = *v89;
          v89 += 2;
          uint64_t v92 = &v79[v91];
          if (v75 < &v79[v91]) {
            uint64_t v92 = v75;
          }
          if ((unint64_t)v92 < *(void *)(a1 + 32)) {
            uint64_t v92 = *(char **)(a1 + 32);
          }
          uint64_t v93 = bswap32(*(unsigned __int16 *)v92) >> 16;
          uint64_t v94 = bswap32(*((unsigned __int16 *)v92 + 1)) >> 16;
          uint64_t v95 = bswap32(*((unsigned __int16 *)v92 + 2)) >> 16;
          unint64_t v96 = v93 | (v95 << 32) | (v94 << 16) | 0xFFFF000000000000;
          unint64_t v97 = ((v94 - ((v94 * v76 + 0x8000 + ((v94 * v76 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v95 - ((v95 * v76 + 0x8000 + ((v95 * v76 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v93 - ((v93 * v76 + 0x8000 + ((v93 * v76 + 0x8000) >> 16)) >> 16)) | v77;
          if (v6 == 0xFFFF) {
            unint64_t v98 = v96;
          }
          else {
            unint64_t v98 = v97;
          }
          unint64_t v99 = HIWORD(v98);
          if (HIWORD(v98))
          {
            if (v99 == 0xFFFF)
            {
              *int v7 = (uint16x4_t)v98;
            }
            else
            {
              rgba64_DplusDM(v7, v98, (unint64_t)*v7, v99 ^ 0xFFFF);
              int v6 = v119;
            }
          }
          ++v7;
          --v90;
        }
        while (v90);
      }
    }
    uint64_t v9 = v110;
    v7 += v111;
    LOBYTE(v10) = v109;
    v11 += v108;
    a6 = v115 - 1;
  }
  while (v115 != 1);
}

void rgba64_image_mark_w16(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = *((unsigned __int16 *)a2 + 4);
  int v117 = *a2;
  int v7 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v116 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v113 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v113 * a4;
  uint64_t v12 = *(unsigned __int16 **)(a1 + 32);
  uint64_t v13 = (char *)v12
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  char v114 = v10;
  uint64_t v115 = v9;
  if (*(void *)(a1 + 176))
  {
    uint64_t v14 = a3;
    uint64_t v111 = *((void *)a2 + 11);
    uint64_t v110 = *((void *)a2 + 13);
    uint64_t v109 = ~(-1 << v10);
    char v108 = v10 - 4;
    uint64_t v15 = (unsigned __int16 *)(v13 - 4);
    int v16 = v6 ^ 0xFFFF;
    unint64_t v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v106 = a5;
    uint64_t v107 = -v9;
    uint64_t v105 = v8 + 16 * v14 + 8;
    unint64_t v18 = BLEND16_21384;
    while (1)
    {
      if (((v110 - v11) | (v11 - v111)) < 0)
      {
        unsigned int v21 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = ((v11 & (unint64_t)v109) >> v108) & 0xF;
        uint64_t v20 = (unint64_t)(v19 - 7) >= 9 ? v107 : v9;
        unsigned int v21 = weights_21383[v19] & 0xF;
      }
      uint64_t v22 = *(void *)(a1 + 32) + (v11 >> v10) * v9;
      int v120 = a6;
      uint64_t v118 = v11;
      if (v117 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v23 = (uint64_t *)v105;
        uint64_t v24 = v106;
        while (1)
        {
          uint64_t v25 = *(v23 - 1);
          uint64_t v26 = *v23;
          uint64_t v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25) {
            uint64_t v28 = (unsigned __int16 *)(v22 + v25);
          }
          else {
            uint64_t v28 = v15;
          }
          if (v28 < v12) {
            uint64_t v28 = v12;
          }
          unint64_t v29 = *v28;
          uint64_t v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0) {
            break;
          }
          if (v21)
          {
            unint64_t v42 = (unsigned __int16 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20) {
              unint64_t v42 = v15;
            }
            if (v42 < v12) {
              unint64_t v42 = v12;
            }
            uint64_t v43 = v18[v21];
            __int16 v40 = v29 - ((v43 & v29) >> v21);
            unint64_t v41 = (unint64_t)(unsigned __int16)(v43 & *v42) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          unint64_t v44 = (0x100010001 * (unsigned __int16)v29) | 0xFFFF000000000000;
          unsigned int v45 = (v29 | 0xFFFF0000) * v16;
          if (v45 >= 0xFFFE8000) {
            unsigned int v45 = -98304;
          }
          uint64_t v46 = (unsigned __int16)(v29 - ((v45 + 0x8000 + ((v45 + 0x8000) >> 16)) >> 16));
          unint64_t v47 = ((unint64_t)v46 << 16) | (v46 << 32) | v17 | v46;
          if (v6 == 0xFFFF) {
            unint64_t v47 = v44;
          }
          *v7++ = (uint16x4_t)v47;
          if (!--v24) {
            goto LABEL_88;
          }
        }
        uint64_t v31 = v26 >> 4;
        uint64_t v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32) {
          uint64_t v32 = v15;
        }
        if (v32 < v12) {
          uint64_t v32 = v12;
        }
        unint64_t v33 = *v32;
        if (v21)
        {
          unint64_t v34 = (unsigned __int16 *)(v27 + v20);
          if (v15 >= v34) {
            unint64_t v35 = v34;
          }
          else {
            unint64_t v35 = v15;
          }
          if (v35 < v12) {
            unint64_t v35 = v12;
          }
          unint64_t v36 = *v35;
          unint64_t v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37) {
            unint64_t v37 = v15;
          }
          if (v37 < v12) {
            unint64_t v37 = v12;
          }
          uint64_t v38 = v18[v21];
          LODWORD(v29) = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          LODWORD(v33) = v33 - ((v38 & v33) >> v21) + ((unint64_t)(unsigned __int16)(v38 & *v37) >> v21);
        }
        uint64_t v39 = v18[v30];
        __int16 v40 = v29 - ((unint64_t)(v39 & v29) >> v30);
        unint64_t v41 = (unint64_t)(v39 & v33) >> v30;
LABEL_40:
        LOWORD(v29) = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      uint64_t v9 = v115;
      v7 += v116;
      LOBYTE(v10) = v114;
      uint64_t v11 = v118 + v113;
      a6 = v120 - 1;
      if (v120 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v125 = v21;
    uint64_t v49 = (uint64_t *)v105;
    uint64_t v48 = v106;
    unsigned int v123 = v21;
    uint64_t v122 = *(void *)(a1 + 32) + (v11 >> v10) * v9;
    while (1)
    {
      uint64_t v50 = *(v49 - 1);
      uint64_t v51 = *v49;
      uint64_t v52 = v22 + v50;
      if ((unint64_t)v15 >= v22 + v50) {
        uint64_t v53 = (unsigned __int16 *)(v22 + v50);
      }
      else {
        uint64_t v53 = v15;
      }
      if (v53 < v12) {
        uint64_t v53 = v12;
      }
      unint64_t v54 = *v53;
      uint64_t v55 = *v49 & 0xF;
      if ((v51 & 0xF) != 0) {
        break;
      }
      if (v21)
      {
        unint64_t v67 = (unsigned __int16 *)(v52 + v20);
        if ((unint64_t)v15 < v52 + v20) {
          unint64_t v67 = v15;
        }
        if (v67 < v12) {
          unint64_t v67 = v12;
        }
        uint64_t v68 = v18[v125];
        __int16 v65 = v54 - ((v68 & v54) >> v125);
        unint64_t v66 = (unint64_t)(unsigned __int16)(v68 & *v67) >> v125;
        goto LABEL_77;
      }
LABEL_78:
      unint64_t v69 = (0x100010001 * (unsigned __int16)v54) | 0xFFFF000000000000;
      unsigned int v70 = (v54 | 0xFFFF0000) * v16;
      if (v70 >= 0xFFFE8000) {
        unsigned int v70 = -98304;
      }
      uint64_t v71 = (unsigned __int16)(v54 - ((v70 + 0x8000 + ((v70 + 0x8000) >> 16)) >> 16));
      unint64_t v72 = ((unint64_t)v71 << 16) | (v71 << 32) | v17 | v71;
      if (v6 == 0xFFFF) {
        unint64_t v73 = v69;
      }
      else {
        unint64_t v73 = v72;
      }
      unint64_t v74 = HIWORD(v73);
      if (HIWORD(v73))
      {
        if (v74 == 0xFFFF)
        {
          *int v7 = (uint16x4_t)v73;
        }
        else
        {
          uint64_t v75 = v6;
          unint64_t v76 = v17;
          uint64_t v77 = v20;
          uint64_t v78 = v18;
          rgba64_DplusDM(v7, v73, (unint64_t)*v7, v74 ^ 0xFFFF);
          unint64_t v18 = v78;
          uint64_t v20 = v77;
          unsigned int v21 = v123;
          unint64_t v17 = v76;
          uint64_t v6 = v75;
          uint64_t v22 = v122;
        }
      }
      v49 += 2;
      ++v7;
      if (!--v48) {
        goto LABEL_88;
      }
    }
    uint64_t v56 = v51 >> 4;
    unint64_t v57 = (unsigned __int16 *)(v52 + (v51 >> 4));
    if (v15 < v57) {
      unint64_t v57 = v15;
    }
    if (v57 < v12) {
      unint64_t v57 = v12;
    }
    unint64_t v58 = *v57;
    if (v21)
    {
      unint64_t v59 = (unsigned __int16 *)(v52 + v20);
      if (v15 >= v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = v15;
      }
      if (v60 < v12) {
        uint64_t v60 = v12;
      }
      unint64_t v61 = *v60;
      uint64_t v62 = (unsigned __int16 *)((char *)v59 + v56);
      if (v15 < v62) {
        uint64_t v62 = v15;
      }
      if (v62 < v12) {
        uint64_t v62 = v12;
      }
      uint64_t v63 = v18[v125];
      LODWORD(v54) = v54 - ((v63 & v54) >> v125) + ((v63 & v61) >> v125);
      LODWORD(v58) = v58 - ((v63 & v58) >> v125) + ((unint64_t)(unsigned __int16)(v63 & *v62) >> v125);
    }
    uint64_t v64 = v18[v55];
    __int16 v65 = v54 - ((unint64_t)(v64 & v54) >> v55);
    unint64_t v66 = (unint64_t)(v64 & v58) >> v55;
LABEL_77:
    LOWORD(v54) = v65 + v66;
    goto LABEL_78;
  }
  uint64_t v79 = v13 - 4;
  int v80 = v6 ^ 0xFFFF;
  unint64_t v81 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
  uint64_t v124 = a5;
  uint64_t v126 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    uint64_t v82 = *(char **)(a1 + 32);
    uint64_t v83 = &v82[(v11 >> v10) * v9];
    int v121 = a6;
    uint64_t v119 = v11;
    if (v117 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v85 = v124;
        uint64_t v84 = v126;
        do
        {
          uint64_t v86 = *v84;
          v84 += 2;
          unint64_t v87 = &v83[v86];
          if (v79 < &v83[v86]) {
            unint64_t v87 = v79;
          }
          if (v87 < v82) {
            unint64_t v87 = v82;
          }
          uint64_t v88 = *(unsigned __int16 *)v87;
          unsigned int v89 = (v88 | 0xFFFF0000) * v80;
          if (v89 >= 0xFFFE8000) {
            unsigned int v89 = -98304;
          }
          uint64_t v90 = 0x100010001 * v88;
          uint64_t v91 = (unsigned __int16)(v88 - ((v89 + 0x8000 + ((v89 + 0x8000) >> 16)) >> 16));
          unint64_t v92 = v90 | 0xFFFF000000000000;
          unint64_t v93 = ((unint64_t)v91 << 16) | (v91 << 32) | v81 | v91;
          if (v6 == 0xFFFF) {
            unint64_t v93 = v92;
          }
          *v7++ = (uint16x4_t)v93;
          --v85;
        }
        while (v85);
      }
    }
    else
    {
      uint64_t v95 = v124;
      uint64_t v94 = v126;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v96 = *v94;
          v94 += 2;
          unint64_t v97 = &v83[v96];
          if (v79 < &v83[v96]) {
            unint64_t v97 = v79;
          }
          if ((unint64_t)v97 < *(void *)(a1 + 32)) {
            unint64_t v97 = *(char **)(a1 + 32);
          }
          uint64_t v98 = *(unsigned __int16 *)v97;
          unint64_t v99 = (0x100010001 * v98) | 0xFFFF000000000000;
          unsigned int v100 = (v98 | 0xFFFF0000) * v80;
          if (v100 >= 0xFFFE8000) {
            unsigned int v100 = -98304;
          }
          uint64_t v101 = (unsigned __int16)(v98 - ((v100 + 0x8000 + ((v100 + 0x8000) >> 16)) >> 16));
          unint64_t v102 = ((unint64_t)v101 << 16) | (v101 << 32) | v81 | v101;
          if (v6 == 0xFFFF) {
            unint64_t v103 = v99;
          }
          else {
            unint64_t v103 = v102;
          }
          unint64_t v104 = HIWORD(v103);
          if (HIWORD(v103))
          {
            if (v104 == 0xFFFF) {
              *int v7 = (uint16x4_t)v103;
            }
            else {
              rgba64_DplusDM(v7, v103, (unint64_t)*v7, v104 ^ 0xFFFF);
            }
          }
          ++v7;
          --v95;
        }
        while (v95);
      }
    }
    uint64_t v9 = v115;
    v7 += v116;
    LOBYTE(v10) = v114;
    uint64_t v11 = v119 + v113;
    a6 = v121 - 1;
  }
  while (v121 != 1);
}

void rgba64_image_mark_W16(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = *((unsigned __int16 *)a2 + 4);
  int v117 = *a2;
  int v7 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v116 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v113 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v113 * a4;
  uint64_t v12 = *(unsigned __int16 **)(a1 + 32);
  uint64_t v13 = (char *)v12
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  char v114 = v10;
  uint64_t v115 = v9;
  if (*(void *)(a1 + 176))
  {
    uint64_t v14 = a3;
    uint64_t v111 = *((void *)a2 + 11);
    uint64_t v110 = *((void *)a2 + 13);
    uint64_t v109 = ~(-1 << v10);
    char v108 = v10 - 4;
    uint64_t v15 = (unsigned __int16 *)(v13 - 4);
    int v16 = v6 ^ 0xFFFF;
    unint64_t v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v106 = a5;
    uint64_t v107 = -v9;
    uint64_t v105 = v8 + 16 * v14 + 8;
    unint64_t v18 = BLEND16_21384;
    while (1)
    {
      if (((v110 - v11) | (v11 - v111)) < 0)
      {
        unsigned int v21 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = ((v11 & (unint64_t)v109) >> v108) & 0xF;
        uint64_t v20 = (unint64_t)(v19 - 7) >= 9 ? v107 : v9;
        unsigned int v21 = weights_21383[v19] & 0xF;
      }
      uint64_t v22 = *(void *)(a1 + 32) + (v11 >> v10) * v9;
      int v120 = a6;
      uint64_t v118 = v11;
      if (v117 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v23 = (uint64_t *)v105;
        uint64_t v24 = v106;
        while (1)
        {
          uint64_t v25 = *(v23 - 1);
          uint64_t v26 = *v23;
          uint64_t v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25) {
            uint64_t v28 = (unsigned __int16 *)(v22 + v25);
          }
          else {
            uint64_t v28 = v15;
          }
          if (v28 < v12) {
            uint64_t v28 = v12;
          }
          unint64_t v29 = bswap32(*v28) >> 16;
          uint64_t v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0) {
            break;
          }
          if (v21)
          {
            unint64_t v42 = (unsigned __int16 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20) {
              unint64_t v42 = v15;
            }
            if (v42 < v12) {
              unint64_t v42 = v12;
            }
            uint64_t v43 = v18[v21];
            __int16 v40 = v29 - ((v43 & v29) >> v21);
            unint64_t v41 = (v43 & (unint64_t)(bswap32(*v42) >> 16)) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          unint64_t v44 = (0x100010001 * (unsigned __int16)v29) | 0xFFFF000000000000;
          unsigned int v45 = (v29 | 0xFFFF0000) * v16;
          if (v45 >= 0xFFFE8000) {
            unsigned int v45 = -98304;
          }
          uint64_t v46 = (unsigned __int16)(v29 - ((v45 + 0x8000 + ((v45 + 0x8000) >> 16)) >> 16));
          unint64_t v47 = ((unint64_t)v46 << 16) | (v46 << 32) | v17 | v46;
          if (v6 == 0xFFFF) {
            unint64_t v47 = v44;
          }
          *v7++ = (uint16x4_t)v47;
          if (!--v24) {
            goto LABEL_88;
          }
        }
        uint64_t v31 = v26 >> 4;
        uint64_t v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32) {
          uint64_t v32 = v15;
        }
        if (v32 < v12) {
          uint64_t v32 = v12;
        }
        unint64_t v33 = bswap32(*v32) >> 16;
        if (v21)
        {
          unint64_t v34 = (unsigned __int16 *)(v27 + v20);
          if (v15 >= v34) {
            unint64_t v35 = v34;
          }
          else {
            unint64_t v35 = v15;
          }
          if (v35 < v12) {
            unint64_t v35 = v12;
          }
          unint64_t v36 = bswap32(*v35) >> 16;
          unint64_t v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37) {
            unint64_t v37 = v15;
          }
          if (v37 < v12) {
            unint64_t v37 = v12;
          }
          uint64_t v38 = v18[v21];
          LODWORD(v29) = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          LODWORD(v33) = v33 - ((v38 & v33) >> v21) + ((v38 & (unint64_t)(bswap32(*v37) >> 16)) >> v21);
        }
        uint64_t v39 = v18[v30];
        __int16 v40 = v29 - ((unint64_t)(v39 & v29) >> v30);
        unint64_t v41 = (unint64_t)(v39 & v33) >> v30;
LABEL_40:
        LOWORD(v29) = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      uint64_t v9 = v115;
      v7 += v116;
      LOBYTE(v10) = v114;
      uint64_t v11 = v118 + v113;
      a6 = v120 - 1;
      if (v120 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v125 = v21;
    uint64_t v49 = (uint64_t *)v105;
    uint64_t v48 = v106;
    unsigned int v123 = v21;
    uint64_t v122 = *(void *)(a1 + 32) + (v11 >> v10) * v9;
    while (1)
    {
      uint64_t v50 = *(v49 - 1);
      uint64_t v51 = *v49;
      uint64_t v52 = v22 + v50;
      if ((unint64_t)v15 >= v22 + v50) {
        uint64_t v53 = (unsigned __int16 *)(v22 + v50);
      }
      else {
        uint64_t v53 = v15;
      }
      if (v53 < v12) {
        uint64_t v53 = v12;
      }
      unint64_t v54 = bswap32(*v53) >> 16;
      uint64_t v55 = *v49 & 0xF;
      if ((v51 & 0xF) != 0) {
        break;
      }
      if (v21)
      {
        unint64_t v67 = (unsigned __int16 *)(v52 + v20);
        if ((unint64_t)v15 < v52 + v20) {
          unint64_t v67 = v15;
        }
        if (v67 < v12) {
          unint64_t v67 = v12;
        }
        uint64_t v68 = v18[v125];
        __int16 v65 = v54 - ((v68 & v54) >> v125);
        unint64_t v66 = (v68 & (unint64_t)(bswap32(*v67) >> 16)) >> v125;
        goto LABEL_77;
      }
LABEL_78:
      unint64_t v69 = (0x100010001 * (unsigned __int16)v54) | 0xFFFF000000000000;
      unsigned int v70 = (v54 | 0xFFFF0000) * v16;
      if (v70 >= 0xFFFE8000) {
        unsigned int v70 = -98304;
      }
      uint64_t v71 = (unsigned __int16)(v54 - ((v70 + 0x8000 + ((v70 + 0x8000) >> 16)) >> 16));
      unint64_t v72 = ((unint64_t)v71 << 16) | (v71 << 32) | v17 | v71;
      if (v6 == 0xFFFF) {
        unint64_t v73 = v69;
      }
      else {
        unint64_t v73 = v72;
      }
      unint64_t v74 = HIWORD(v73);
      if (HIWORD(v73))
      {
        if (v74 == 0xFFFF)
        {
          *int v7 = (uint16x4_t)v73;
        }
        else
        {
          uint64_t v75 = v6;
          unint64_t v76 = v17;
          uint64_t v77 = v20;
          uint64_t v78 = v18;
          rgba64_DplusDM(v7, v73, (unint64_t)*v7, v74 ^ 0xFFFF);
          unint64_t v18 = v78;
          uint64_t v20 = v77;
          unsigned int v21 = v123;
          unint64_t v17 = v76;
          uint64_t v6 = v75;
          uint64_t v22 = v122;
        }
      }
      v49 += 2;
      ++v7;
      if (!--v48) {
        goto LABEL_88;
      }
    }
    uint64_t v56 = v51 >> 4;
    unint64_t v57 = (unsigned __int16 *)(v52 + (v51 >> 4));
    if (v15 < v57) {
      unint64_t v57 = v15;
    }
    if (v57 < v12) {
      unint64_t v57 = v12;
    }
    unint64_t v58 = bswap32(*v57) >> 16;
    if (v21)
    {
      unint64_t v59 = (unsigned __int16 *)(v52 + v20);
      if (v15 >= v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = v15;
      }
      if (v60 < v12) {
        uint64_t v60 = v12;
      }
      unint64_t v61 = bswap32(*v60) >> 16;
      uint64_t v62 = (unsigned __int16 *)((char *)v59 + v56);
      if (v15 < v62) {
        uint64_t v62 = v15;
      }
      if (v62 < v12) {
        uint64_t v62 = v12;
      }
      uint64_t v63 = v18[v125];
      LODWORD(v54) = v54 - ((v63 & v54) >> v125) + ((v63 & v61) >> v125);
      LODWORD(v58) = v58 - ((v63 & v58) >> v125) + ((v63 & (unint64_t)(bswap32(*v62) >> 16)) >> v125);
    }
    uint64_t v64 = v18[v55];
    __int16 v65 = v54 - ((unint64_t)(v64 & v54) >> v55);
    unint64_t v66 = (unint64_t)(v64 & v58) >> v55;
LABEL_77:
    LOWORD(v54) = v65 + v66;
    goto LABEL_78;
  }
  uint64_t v79 = v13 - 4;
  int v80 = v6 ^ 0xFFFF;
  unint64_t v81 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
  uint64_t v124 = a5;
  uint64_t v126 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    uint64_t v82 = *(char **)(a1 + 32);
    uint64_t v83 = &v82[(v11 >> v10) * v9];
    int v121 = a6;
    uint64_t v119 = v11;
    if (v117 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v85 = v124;
        uint64_t v84 = v126;
        do
        {
          uint64_t v86 = *v84;
          v84 += 2;
          unint64_t v87 = &v83[v86];
          if (v79 < &v83[v86]) {
            unint64_t v87 = v79;
          }
          if (v87 < v82) {
            unint64_t v87 = v82;
          }
          uint64_t v88 = bswap32(*(unsigned __int16 *)v87) >> 16;
          unsigned int v89 = (v88 | 0xFFFF0000) * v80;
          if (v89 >= 0xFFFE8000) {
            unsigned int v89 = -98304;
          }
          uint64_t v90 = 0x100010001 * v88;
          uint64_t v91 = (unsigned __int16)(v88 - ((v89 + 0x8000 + ((v89 + 0x8000) >> 16)) >> 16));
          unint64_t v92 = v90 | 0xFFFF000000000000;
          unint64_t v93 = ((unint64_t)v91 << 16) | (v91 << 32) | v81 | v91;
          if (v6 == 0xFFFF) {
            unint64_t v93 = v92;
          }
          *v7++ = (uint16x4_t)v93;
          --v85;
        }
        while (v85);
      }
    }
    else
    {
      uint64_t v95 = v124;
      uint64_t v94 = v126;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v96 = *v94;
          v94 += 2;
          unint64_t v97 = &v83[v96];
          if (v79 < &v83[v96]) {
            unint64_t v97 = v79;
          }
          if ((unint64_t)v97 < *(void *)(a1 + 32)) {
            unint64_t v97 = *(char **)(a1 + 32);
          }
          uint64_t v98 = bswap32(*(unsigned __int16 *)v97) >> 16;
          unint64_t v99 = (0x100010001 * v98) | 0xFFFF000000000000;
          unsigned int v100 = (v98 | 0xFFFF0000) * v80;
          if (v100 >= 0xFFFE8000) {
            unsigned int v100 = -98304;
          }
          uint64_t v101 = (unsigned __int16)(v98 - ((v100 + 0x8000 + ((v100 + 0x8000) >> 16)) >> 16));
          unint64_t v102 = ((unint64_t)v101 << 16) | (v101 << 32) | v81 | v101;
          if (v6 == 0xFFFF) {
            unint64_t v103 = v99;
          }
          else {
            unint64_t v103 = v102;
          }
          unint64_t v104 = HIWORD(v103);
          if (HIWORD(v103))
          {
            if (v104 == 0xFFFF) {
              *int v7 = (uint16x4_t)v103;
            }
            else {
              rgba64_DplusDM(v7, v103, (unint64_t)*v7, v104 ^ 0xFFFF);
            }
          }
          ++v7;
          --v95;
        }
        while (v95);
      }
    }
    uint64_t v9 = v115;
    v7 += v116;
    LOBYTE(v10) = v114;
    uint64_t v11 = v119 + v113;
    a6 = v121 - 1;
  }
  while (v121 != 1);
}

void rgba64_image_mark_rgb32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = a2[1];
  int v145 = *a2;
  uint64_t v8 = *(unsigned int **)(a1 + 32);
  if (*(void *)(a1 + 40)) {
    int v9 = 0;
  }
  else {
    int v9 = 255;
  }
  uint64_t v10 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v144 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 15);
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v141 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v141 * a4;
  uint64_t v15 = (char *)v8
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  uint64_t v16 = 0x8000;
  int v156 = *((unsigned __int16 *)a2 + 4);
  int v155 = a2[1];
  char v142 = v13;
  uint64_t v143 = v12;
  if (*(void *)(a1 + 176))
  {
    uint64_t v17 = a3;
    uint64_t v139 = *((void *)a2 + 11);
    uint64_t v138 = *((void *)a2 + 13);
    uint64_t v137 = ~(-1 << v13);
    char v136 = v13 - 4;
    unint64_t v18 = (unsigned int *)(v15 - 4);
    char v19 = 32 - v7;
    uint64_t v20 = v6 ^ 0xFFFFu;
    int32x2_t v21 = vdup_n_s32(v20);
    uint64_t v134 = v11 + 16 * v17 + 8;
    uint64_t v135 = -v12;
    uint64_t v133 = a5;
    int32x2_t v22 = vdup_n_s32(0x101u);
    uint64x2_t v23 = (uint64x2_t)xmmword_1850CDE00;
    uint64_t v24 = BLEND8_21385;
    char v150 = 32 - v7;
    int v151 = v9;
    while (1)
    {
      if (((v138 - v14) | (v14 - v139)) < 0)
      {
        unsigned int v27 = 0;
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v25 = ((v14 & (unint64_t)v137) >> v136) & 0xF;
        uint64_t v26 = (unint64_t)(v25 - 7) >= 9 ? v135 : v12;
        unsigned int v27 = weights_21383[v25] & 0xF;
      }
      uint64_t v28 = *(void *)(a1 + 32) + (v14 >> v13) * v12;
      int v148 = a6;
      uint64_t v146 = v14;
      if (v145 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v30 = v133;
        unint64_t v29 = (uint64_t *)v134;
        while (1)
        {
          uint64_t v31 = *(v29 - 1);
          uint64_t v32 = *v29;
          uint64_t v33 = v28 + v31;
          if ((unint64_t)v18 >= v28 + v31) {
            unint64_t v34 = (unsigned int *)(v28 + v31);
          }
          else {
            unint64_t v34 = v18;
          }
          if (v34 < v8) {
            unint64_t v34 = v8;
          }
          unsigned int v35 = *v34;
          char v36 = v32 & 0xF;
          if ((v32 & 0xF) != 0) {
            break;
          }
          if (v27)
          {
            unint64_t v47 = (unsigned int *)(v33 + v26);
            if ((unint64_t)v18 < v33 + v26) {
              unint64_t v47 = v18;
            }
            if (v47 < v8) {
              unint64_t v47 = v8;
            }
            int v48 = v24[v27];
            unsigned int v45 = v35 - ((v48 & v35) >> v27);
            unsigned int v46 = (v48 & *v47) >> v27;
            goto LABEL_43;
          }
LABEL_44:
          unsigned int v49 = (v35 << v7) | (v35 >> v19);
          HIDWORD(v51) = HIBYTE(v49);
          LODWORD(v51) = v49;
          unsigned int v50 = v51 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v52 = ((unint64_t)(BYTE1(v49) | (BYTE1(v49) << 8)) << 32) | ((unint64_t)((v49 | v9) | ((v49 | v9) << 8)) << 48) | v49 & 0xFF0000 | (BYTE2(v49) << 24);
          }
          else
          {
            v53.i32[0] = v49 | v9;
            v53.i32[1] = v49 >> 8;
            int32x2_t v54 = vmul_s32((int32x2_t)vand_s8(v53, (int8x8_t)0xFF000000FFLL), v22);
            uint32x2_t v55 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v54, v21);
            int8x8_t v56 = vand_s8((int8x8_t)vsub_s32(v54, (int32x2_t)vshr_n_u32(vsra_n_u32(v55, v55, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v57.i64[0] = v56.u32[0];
            v57.i64[1] = v56.u32[1];
            int8x16_t v58 = (int8x16_t)vshlq_u64(v57, v23);
            unint64_t v52 = vorrq_s8(v58, (int8x16_t)vdupq_laneq_s64((int64x2_t)v58, 1)).u64[0] | (((BYTE2(v49) | (BYTE2(v49) << 8))
                                                                                        - ((v16
                                                                                          + (BYTE2(v49) | (BYTE2(v49) << 8))
                                                                                          * v20
                                                                                          + ((v16
                                                                                            + (BYTE2(v49) | (BYTE2(v49) << 8))
                                                                                            * v20) >> 16)) >> 16)) << 16);
            unsigned int v50 = (unsigned __int16)(v50
                                   - ((v16 + v50 * v20 + ((v16 + v50 * v20) >> 16)) >> 16));
          }
          v29 += 2;
          *v10++ = (uint16x4_t)(v52 | v50);
          if (!--v30) {
            goto LABEL_88;
          }
        }
        unint64_t v37 = (unsigned int *)(v33 + (v32 >> 4));
        if (v18 < v37) {
          unint64_t v37 = v18;
        }
        if (v37 < v8) {
          unint64_t v37 = v8;
        }
        unsigned int v38 = *v37;
        if (v27)
        {
          uint64_t v39 = (unsigned int *)(v33 + v26);
          if (v18 >= v39) {
            __int16 v40 = v39;
          }
          else {
            __int16 v40 = v18;
          }
          if (v40 < v8) {
            __int16 v40 = v8;
          }
          unsigned int v41 = *v40;
          unint64_t v42 = (unsigned int *)((char *)v39 + (v32 >> 4));
          if (v18 < v42) {
            unint64_t v42 = v18;
          }
          if (v42 < v8) {
            unint64_t v42 = v8;
          }
          int v43 = v24[v27];
          unsigned int v35 = v35 - ((v43 & v35) >> v27) + ((v43 & v41) >> v27);
          unsigned int v38 = v38 - ((v43 & v38) >> v27) + ((v43 & *v42) >> v27);
        }
        int v44 = v24[*v29 & 0xF];
        unsigned int v45 = v35 - ((v44 & v35) >> v36);
        unsigned int v46 = (v44 & v38) >> v36;
LABEL_43:
        unsigned int v35 = v45 + v46;
        goto LABEL_44;
      }
LABEL_88:
      uint64_t v12 = v143;
      v10 += v144;
      LOBYTE(v13) = v142;
      uint64_t v14 = v146 + v141;
      a6 = v148 - 1;
      if (v148 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v157 = v27;
    uint64_t v59 = v133;
    uint64_t v60 = (uint64_t *)v134;
    unsigned int v153 = v27;
    while (1)
    {
      uint64_t v61 = *(v60 - 1);
      uint64_t v62 = *v60;
      uint64_t v63 = v28 + v61;
      if ((unint64_t)v18 >= v28 + v61) {
        uint64_t v64 = (unsigned int *)(v28 + v61);
      }
      else {
        uint64_t v64 = v18;
      }
      if (v64 < v8) {
        uint64_t v64 = v8;
      }
      unsigned int v65 = *v64;
      char v66 = v62 & 0xF;
      if ((v62 & 0xF) != 0) {
        break;
      }
      if (v27)
      {
        uint64_t v77 = (unsigned int *)(v63 + v26);
        if ((unint64_t)v18 < v63 + v26) {
          uint64_t v77 = v18;
        }
        if (v77 < v8) {
          uint64_t v77 = v8;
        }
        int v78 = v24[v157];
        unsigned int v75 = v65 - ((v78 & v65) >> v27);
        unsigned int v76 = (v78 & *v77) >> v27;
        goto LABEL_79;
      }
LABEL_80:
      unsigned int v79 = (v65 << v7) | (v65 >> v19);
      HIDWORD(v81) = HIBYTE(v79);
      LODWORD(v81) = v79;
      unsigned int v80 = v81 >> 24;
      if (v6 == 0xFFFF)
      {
        unint64_t v82 = ((unint64_t)(BYTE1(v79) | (BYTE1(v79) << 8)) << 32) | ((unint64_t)((v79 | v9) | ((v79 | v9) << 8)) << 48) | v79 & 0xFF0000 | (BYTE2(v79) << 24);
      }
      else
      {
        v83.i32[0] = v79 | v9;
        v83.i32[1] = v79 >> 8;
        int32x2_t v84 = vmul_s32((int32x2_t)vand_s8(v83, (int8x8_t)0xFF000000FFLL), v22);
        uint32x2_t v85 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v84, v21);
        int8x8_t v86 = vand_s8((int8x8_t)vsub_s32(v84, (int32x2_t)vshr_n_u32(vsra_n_u32(v85, v85, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
        v87.i64[0] = v86.u32[0];
        v87.i64[1] = v86.u32[1];
        int8x16_t v88 = (int8x16_t)vshlq_u64(v87, v23);
        unint64_t v82 = vorrq_s8(v88, (int8x16_t)vdupq_laneq_s64((int64x2_t)v88, 1)).u64[0] | (((BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                    - ((v16
                                                                                      + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                      * v20
                                                                                      + ((v16
                                                                                        + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                        * v20) >> 16)) >> 16)) << 16);
        unsigned int v80 = (unsigned __int16)(v80
                               - ((v16 + v80 * v20 + ((v16 + v80 * v20) >> 16)) >> 16));
      }
      unint64_t v89 = HIWORD(v82);
      if (HIWORD(v82))
      {
        uint64_t v90 = v82 | v80;
        if (v89 == 0xFFFF)
        {
          *uint64_t v10 = (uint16x4_t)v90;
        }
        else
        {
          uint64_t v91 = v16;
          uint64_t v92 = v20;
          uint64_t v93 = v26;
          uint64_t v94 = v24;
          rgba64_DplusDM(v10, v90, (unint64_t)*v10, v89 ^ 0xFFFF);
          uint64_t v24 = v94;
          uint64_t v26 = v93;
          uint64x2_t v23 = (uint64x2_t)xmmword_1850CDE00;
          uint64_t v20 = v92;
          uint64_t v16 = v91;
          unsigned int v27 = v153;
          char v19 = v150;
          int v9 = v151;
          LOBYTE(v7) = v155;
          int v6 = v156;
        }
      }
      v60 += 2;
      ++v10;
      if (!--v59) {
        goto LABEL_88;
      }
    }
    unint64_t v67 = (unsigned int *)(v63 + (v62 >> 4));
    if (v18 < v67) {
      unint64_t v67 = v18;
    }
    if (v67 < v8) {
      unint64_t v67 = v8;
    }
    unsigned int v68 = *v67;
    if (v27)
    {
      unint64_t v69 = (unsigned int *)(v63 + v26);
      if (v18 >= v69) {
        unsigned int v70 = v69;
      }
      else {
        unsigned int v70 = v18;
      }
      if (v70 < v8) {
        unsigned int v70 = v8;
      }
      unsigned int v71 = *v70;
      unint64_t v72 = (unsigned int *)((char *)v69 + (v62 >> 4));
      if (v18 < v72) {
        unint64_t v72 = v18;
      }
      if (v72 < v8) {
        unint64_t v72 = v8;
      }
      int v73 = v24[v157];
      unsigned int v65 = v65 - ((v73 & v65) >> v27) + ((v73 & v71) >> v27);
      unsigned int v68 = v68 - ((v73 & v68) >> v27) + ((v73 & *v72) >> v27);
    }
    int v74 = v24[*v60 & 0xF];
    unsigned int v75 = v65 - ((v74 & v65) >> v66);
    unsigned int v76 = (v74 & v68) >> v66;
LABEL_79:
    unsigned int v65 = v75 + v76;
    goto LABEL_80;
  }
  int v154 = (uint64_t *)(v11 + 16 * a3);
  uint64_t v95 = v15 - 4;
  char v96 = 32 - v7;
  int v97 = v6 ^ 0xFFFF;
  int32x2_t v98 = vdup_n_s32(v6 ^ 0xFFFFu);
  int32x2_t v99 = vdup_n_s32(0x101u);
  uint64_t v152 = a5;
  uint64x2_t v100 = (uint64x2_t)xmmword_1850CDE00;
  do
  {
    uint64_t v101 = *(char **)(a1 + 32);
    unint64_t v102 = &v101[(v14 >> v13) * v12];
    int v149 = a6;
    uint64_t v147 = v14;
    if (v145 == 1)
    {
      if (a5 >= 1)
      {
        unint64_t v103 = v154;
        uint64_t v104 = v152;
        do
        {
          uint64_t v105 = *v103;
          v103 += 2;
          uint64_t v106 = &v102[v105];
          if (v95 < &v102[v105]) {
            uint64_t v106 = v95;
          }
          if (v106 < v101) {
            uint64_t v106 = v101;
          }
          unsigned int v107 = (*(_DWORD *)v106 << v7) | (*(_DWORD *)v106 >> v96);
          HIDWORD(v109) = HIBYTE(v107);
          LODWORD(v109) = v107;
          unsigned int v108 = v109 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v110 = ((unint64_t)(BYTE1(v107) | (BYTE1(v107) << 8)) << 32) | ((unint64_t)((v107 | v9) | ((v107 | v9) << 8)) << 48) | v107 & 0xFF0000 | (BYTE2(v107) << 24);
          }
          else
          {
            v111.i32[0] = v107 | v9;
            v111.i32[1] = v107 >> 8;
            int32x2_t v112 = vmul_s32((int32x2_t)vand_s8(v111, (int8x8_t)0xFF000000FFLL), v99);
            uint32x2_t v113 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v112, v98);
            int8x8_t v114 = vand_s8((int8x8_t)vsub_s32(v112, (int32x2_t)vshr_n_u32(vsra_n_u32(v113, v113, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v115.i64[0] = v114.u32[0];
            v115.i64[1] = v114.u32[1];
            int8x16_t v116 = (int8x16_t)vshlq_u64(v115, v100);
            unint64_t v110 = vorrq_s8(v116, (int8x16_t)vdupq_laneq_s64((int64x2_t)v116, 1)).u64[0] | (((BYTE2(v107) | (BYTE2(v107) << 8))
                                                                                           - (((BYTE2(v107) | (BYTE2(v107) << 8))
                                                                                             * v97
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v107) | (BYTE2(v107) << 8)) * v97 + 0x8000) >> 16)) >> 16)) << 16);
            unsigned int v108 = (unsigned __int16)(v108 - ((v108 * v97 + 0x8000 + ((v108 * v97 + 0x8000) >> 16)) >> 16));
          }
          *v10++ = (uint16x4_t)(v110 | v108);
          --v104;
        }
        while (v104);
      }
    }
    else
    {
      int v117 = v154;
      uint64_t v118 = v152;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v119 = *v117;
          v117 += 2;
          int v120 = &v102[v119];
          if (v95 < &v102[v119]) {
            int v120 = v95;
          }
          if ((unint64_t)v120 < *(void *)(a1 + 32)) {
            int v120 = *(char **)(a1 + 32);
          }
          unsigned int v121 = (*(_DWORD *)v120 << v7) | (*(_DWORD *)v120 >> v96);
          HIDWORD(v123) = HIBYTE(v121);
          LODWORD(v123) = v121;
          unsigned int v122 = v123 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v124 = ((unint64_t)(BYTE1(v121) | (BYTE1(v121) << 8)) << 32) | ((unint64_t)((v121 | v9) | ((v121 | v9) << 8)) << 48) | v121 & 0xFF0000 | (BYTE2(v121) << 24);
          }
          else
          {
            v125.i32[0] = v121 | v9;
            v125.i32[1] = v121 >> 8;
            int32x2_t v126 = vmul_s32((int32x2_t)vand_s8(v125, (int8x8_t)0xFF000000FFLL), v99);
            uint32x2_t v127 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v126, v98);
            int8x8_t v128 = vand_s8((int8x8_t)vsub_s32(v126, (int32x2_t)vshr_n_u32(vsra_n_u32(v127, v127, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v129.i64[0] = v128.u32[0];
            v129.i64[1] = v128.u32[1];
            int8x16_t v130 = (int8x16_t)vshlq_u64(v129, v100);
            unint64_t v124 = vorrq_s8(v130, (int8x16_t)vdupq_laneq_s64((int64x2_t)v130, 1)).u64[0] | (((BYTE2(v121) | (BYTE2(v121) << 8))
                                                                                           - (((BYTE2(v121) | (BYTE2(v121) << 8))
                                                                                             * v97
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v121) | (BYTE2(v121) << 8)) * v97 + 0x8000) >> 16)) >> 16)) << 16);
            unsigned int v122 = (unsigned __int16)(v122 - ((v122 * v97 + 0x8000 + ((v122 * v97 + 0x8000) >> 16)) >> 16));
          }
          unint64_t v131 = HIWORD(v124);
          if (HIWORD(v124))
          {
            uint64_t v132 = v124 | v122;
            if (v131 == 0xFFFF)
            {
              *uint64_t v10 = (uint16x4_t)v132;
            }
            else
            {
              rgba64_DplusDM(v10, v132, (unint64_t)*v10, v131 ^ 0xFFFF);
              uint64x2_t v100 = (uint64x2_t)xmmword_1850CDE00;
              LOBYTE(v7) = v155;
              int v6 = v156;
            }
          }
          ++v10;
          --v118;
        }
        while (v118);
      }
    }
    uint64_t v12 = v143;
    v10 += v144;
    LOBYTE(v13) = v142;
    uint64_t v14 = v147 + v141;
    a6 = v149 - 1;
  }
  while (v149 != 1);
}

void rgba64_image_mark_RGB32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = a2[1];
  int v147 = *a2;
  uint64_t v8 = *(unsigned int **)(a1 + 32);
  if (*(void *)(a1 + 40)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 255;
  }
  uint64_t v10 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v146 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 15);
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v143 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v143 * a4;
  uint64_t v15 = (char *)v8
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  int v156 = a2[1];
  int v157 = *((unsigned __int16 *)a2 + 4);
  char v144 = v13;
  uint64_t v145 = v12;
  if (*(void *)(a1 + 176))
  {
    uint64_t v16 = a3;
    uint64_t v141 = *((void *)a2 + 11);
    uint64_t v140 = *((void *)a2 + 13);
    uint64_t v139 = ~(-1 << v13);
    char v138 = v13 - 4;
    uint64_t v17 = (unsigned int *)(v15 - 4);
    char v18 = 32 - v7;
    uint64_t v19 = v6 ^ 0xFFFFu;
    int32x2_t v20 = vdup_n_s32(v19);
    uint64_t v136 = v11 + 16 * v16 + 8;
    uint64_t v137 = -v12;
    uint64_t v135 = a5;
    int32x2_t v21 = vdup_n_s32(0x101u);
    uint64x2_t v22 = (uint64x2_t)xmmword_1850CDE00;
    uint64x2_t v23 = BLEND8_21385;
    unsigned int v153 = *(unsigned int **)(a1 + 32);
    char v152 = 32 - v7;
    while (1)
    {
      if (((v140 - v14) | (v14 - v141)) < 0)
      {
        uint64_t v26 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v24 = ((v14 & (unint64_t)v139) >> v138) & 0xF;
        uint64_t v25 = (unint64_t)(v24 - 7) >= 9 ? v137 : v12;
        uint64_t v26 = weights_21383[v24] & 0xF;
      }
      uint64_t v27 = *(void *)(a1 + 32) + (v14 >> v13) * v12;
      int v150 = a6;
      uint64_t v148 = v14;
      if (v147 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v29 = v135;
        uint64_t v28 = (uint64_t *)v136;
        while (1)
        {
          uint64_t v30 = *(v28 - 1);
          uint64_t v31 = *v28;
          uint64_t v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30) {
            uint64_t v33 = (unsigned int *)(v27 + v30);
          }
          else {
            uint64_t v33 = v17;
          }
          if (v33 < v8) {
            uint64_t v33 = v8;
          }
          unsigned int v34 = bswap32(*v33);
          char v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0) {
            break;
          }
          if (v26)
          {
            unsigned int v46 = (unsigned int *)(v32 + v25);
            if ((unint64_t)v17 < v32 + v25) {
              unsigned int v46 = v17;
            }
            if (v46 < v8) {
              unsigned int v46 = v8;
            }
            int v47 = v23[v26];
            unsigned int v44 = v34 - ((v47 & v34) >> v26);
            unsigned int v45 = (bswap32(*v46) & v47) >> v26;
            goto LABEL_43;
          }
LABEL_44:
          unsigned int v48 = (v34 << v7) | (v34 >> v18);
          HIDWORD(v50) = HIBYTE(v48);
          LODWORD(v50) = v48;
          unsigned int v49 = v50 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v51 = ((unint64_t)(BYTE1(v48) | (BYTE1(v48) << 8)) << 32) | ((unint64_t)((v48 | v9) | ((v48 | v9) << 8)) << 48) | v48 & 0xFF0000 | (BYTE2(v48) << 24);
          }
          else
          {
            v52.i32[0] = v48 | v9;
            v52.i32[1] = v48 >> 8;
            int32x2_t v53 = vmul_s32((int32x2_t)vand_s8(v52, (int8x8_t)0xFF000000FFLL), v21);
            uint32x2_t v54 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v53, v20);
            int8x8_t v55 = vand_s8((int8x8_t)vsub_s32(v53, (int32x2_t)vshr_n_u32(vsra_n_u32(v54, v54, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v56.i64[0] = v55.u32[0];
            v56.i64[1] = v55.u32[1];
            int8x16_t v57 = (int8x16_t)vshlq_u64(v56, v22);
            unint64_t v51 = vorrq_s8(v57, (int8x16_t)vdupq_laneq_s64((int64x2_t)v57, 1)).u64[0] | (((BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                        - (((BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                          * v19
                                                                                          + 0x8000
                                                                                          + (((BYTE2(v48) | (BYTE2(v48) << 8)) * v19 + 0x8000) >> 16)) >> 16)) << 16);
            unsigned int v49 = (unsigned __int16)(v49
                                   - ((v49 * v19 + 0x8000 + ((v49 * v19 + 0x8000) >> 16)) >> 16));
          }
          v28 += 2;
          *v10++ = (uint16x4_t)(v51 | v49);
          if (!--v29) {
            goto LABEL_88;
          }
        }
        char v36 = (unsigned int *)(v32 + (v31 >> 4));
        if (v17 < v36) {
          char v36 = v17;
        }
        if (v36 < v8) {
          char v36 = v8;
        }
        unsigned int v37 = bswap32(*v36);
        if (v26)
        {
          unsigned int v38 = (unsigned int *)(v32 + v25);
          if (v17 >= v38) {
            uint64_t v39 = v38;
          }
          else {
            uint64_t v39 = v17;
          }
          if (v39 < v8) {
            uint64_t v39 = v8;
          }
          unsigned int v40 = bswap32(*v39);
          unsigned int v41 = (unsigned int *)((char *)v38 + (v31 >> 4));
          if (v17 < v41) {
            unsigned int v41 = v17;
          }
          if (v41 < v8) {
            unsigned int v41 = v8;
          }
          int v42 = v23[v26];
          unsigned int v34 = v34 - ((v42 & v34) >> v26) + ((v42 & v40) >> v26);
          unsigned int v37 = v37 - ((v42 & v37) >> v26) + ((bswap32(*v41) & v42) >> v26);
        }
        int v43 = v23[*v28 & 0xF];
        unsigned int v44 = v34 - ((v43 & v34) >> v35);
        unsigned int v45 = (v43 & v37) >> v35;
LABEL_43:
        unsigned int v34 = v44 + v45;
        goto LABEL_44;
      }
LABEL_88:
      uint64_t v12 = v145;
      v10 += v146;
      LOBYTE(v13) = v144;
      uint64_t v14 = v148 + v143;
      a6 = v150 - 1;
      if (v150 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v158 = v26;
    uint64_t v58 = v135;
    uint64_t v59 = (uint64_t *)v136;
    while (1)
    {
      uint64_t v60 = *(v59 - 1);
      uint64_t v61 = *v59;
      uint64_t v62 = v27 + v60;
      if ((unint64_t)v17 >= v27 + v60) {
        uint64_t v63 = (unsigned int *)(v27 + v60);
      }
      else {
        uint64_t v63 = v17;
      }
      if (v63 < v8) {
        uint64_t v63 = v8;
      }
      unsigned int v64 = bswap32(*v63);
      char v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0) {
        break;
      }
      if (v26)
      {
        unsigned int v76 = (unsigned int *)(v62 + v25);
        if ((unint64_t)v17 < v62 + v25) {
          unsigned int v76 = v17;
        }
        if (v76 < v8) {
          unsigned int v76 = v8;
        }
        int v77 = v23[v158];
        unsigned int v74 = v64 - ((v77 & v64) >> v26);
        unsigned int v75 = (bswap32(*v76) & v77) >> v26;
        goto LABEL_79;
      }
LABEL_80:
      unsigned int v78 = (v64 << v7) | (v64 >> v18);
      HIDWORD(v80) = HIBYTE(v78);
      LODWORD(v80) = v78;
      unsigned int v79 = v80 >> 24;
      if (v6 == 0xFFFF)
      {
        unint64_t v81 = ((unint64_t)(BYTE1(v78) | (BYTE1(v78) << 8)) << 32) | ((unint64_t)((v78 | v9) | ((v78 | v9) << 8)) << 48) | v78 & 0xFF0000 | (BYTE2(v78) << 24);
      }
      else
      {
        v82.i32[0] = v78 | v9;
        v82.i32[1] = v78 >> 8;
        int32x2_t v83 = vmul_s32((int32x2_t)vand_s8(v82, (int8x8_t)0xFF000000FFLL), v21);
        uint32x2_t v84 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v83, v20);
        int8x8_t v85 = vand_s8((int8x8_t)vsub_s32(v83, (int32x2_t)vshr_n_u32(vsra_n_u32(v84, v84, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
        v86.i64[0] = v85.u32[0];
        v86.i64[1] = v85.u32[1];
        int8x16_t v87 = (int8x16_t)vshlq_u64(v86, v22);
        unint64_t v81 = vorrq_s8(v87, (int8x16_t)vdupq_laneq_s64((int64x2_t)v87, 1)).u64[0] | (((BYTE2(v78) | (BYTE2(v78) << 8))
                                                                                    - (((BYTE2(v78) | (BYTE2(v78) << 8))
                                                                                      * v19
                                                                                      + 0x8000
                                                                                      + (((BYTE2(v78) | (BYTE2(v78) << 8)) * v19 + 0x8000) >> 16)) >> 16)) << 16);
        unsigned int v79 = (unsigned __int16)(v79 - ((v79 * v19 + 0x8000 + ((v79 * v19 + 0x8000) >> 16)) >> 16));
      }
      unint64_t v88 = HIWORD(v81);
      if (HIWORD(v81))
      {
        uint64_t v89 = v81 | v79;
        if (v88 == 0xFFFF)
        {
          *uint64_t v10 = (uint16x4_t)v89;
        }
        else
        {
          uint64_t v90 = v9;
          uint64_t v91 = v19;
          uint64_t v92 = v26;
          uint64_t v93 = v25;
          uint64_t v94 = v23;
          rgba64_DplusDM(v10, v89, (unint64_t)*v10, v88 ^ 0xFFFF);
          uint64x2_t v23 = v94;
          uint64_t v25 = v93;
          uint64_t v26 = v92;
          uint64x2_t v22 = (uint64x2_t)xmmword_1850CDE00;
          uint64_t v19 = v91;
          uint64_t v9 = v90;
          char v18 = v152;
          uint64_t v8 = v153;
          LOBYTE(v7) = v156;
          int v6 = v157;
        }
      }
      v59 += 2;
      ++v10;
      if (!--v58) {
        goto LABEL_88;
      }
    }
    char v66 = (unsigned int *)(v62 + (v61 >> 4));
    if (v17 < v66) {
      char v66 = v17;
    }
    if (v66 < v8) {
      char v66 = v8;
    }
    unsigned int v67 = bswap32(*v66);
    if (v26)
    {
      unsigned int v68 = (unsigned int *)(v62 + v25);
      if (v17 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v17;
      }
      if (v69 < v8) {
        unint64_t v69 = v8;
      }
      unsigned int v70 = bswap32(*v69);
      unsigned int v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
      if (v17 < v71) {
        unsigned int v71 = v17;
      }
      if (v71 < v8) {
        unsigned int v71 = v8;
      }
      int v72 = v23[v158];
      unsigned int v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
      unsigned int v67 = v67 - ((v72 & v67) >> v26) + ((bswap32(*v71) & v72) >> v26);
    }
    int v73 = v23[*v59 & 0xF];
    unsigned int v74 = v64 - ((v73 & v64) >> v65);
    unsigned int v75 = (v73 & v67) >> v65;
LABEL_79:
    unsigned int v64 = v74 + v75;
    goto LABEL_80;
  }
  uint64_t v95 = (unsigned int *)(v15 - 4);
  char v96 = 32 - v7;
  int v97 = v6 ^ 0xFFFF;
  int32x2_t v98 = vdup_n_s32(v6 ^ 0xFFFFu);
  int32x2_t v99 = vdup_n_s32(0x101u);
  uint64_t v154 = a5;
  int v155 = (uint64_t *)(v11 + 16 * a3);
  uint64x2_t v100 = (uint64x2_t)xmmword_1850CDE00;
  do
  {
    uint64_t v101 = *(unsigned int **)(a1 + 32);
    unint64_t v102 = (char *)v101 + (v14 >> v13) * v12;
    int v151 = a6;
    uint64_t v149 = v14;
    if (v147 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v104 = v154;
        unint64_t v103 = v155;
        do
        {
          uint64_t v105 = *v103;
          v103 += 2;
          uint64_t v106 = (unsigned int *)&v102[v105];
          if (v95 < (unsigned int *)&v102[v105]) {
            uint64_t v106 = v95;
          }
          if (v106 < v101) {
            uint64_t v106 = v101;
          }
          unsigned int v107 = bswap32(*v106);
          unsigned int v108 = (v107 << v7) | (v107 >> v96);
          HIDWORD(v110) = HIBYTE(v108);
          LODWORD(v110) = v108;
          unsigned int v109 = v110 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v111 = ((unint64_t)(BYTE1(v108) | (BYTE1(v108) << 8)) << 32) | ((unint64_t)((v108 | v9) | ((v108 | v9) << 8)) << 48) | v108 & 0xFF0000 | (BYTE2(v108) << 24);
          }
          else
          {
            v112.i32[0] = v108 | v9;
            v112.i32[1] = v108 >> 8;
            int32x2_t v113 = vmul_s32((int32x2_t)vand_s8(v112, (int8x8_t)0xFF000000FFLL), v99);
            uint32x2_t v114 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v113, v98);
            int8x8_t v115 = vand_s8((int8x8_t)vsub_s32(v113, (int32x2_t)vshr_n_u32(vsra_n_u32(v114, v114, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v116.i64[0] = v115.u32[0];
            v116.i64[1] = v115.u32[1];
            int8x16_t v117 = (int8x16_t)vshlq_u64(v116, v100);
            unint64_t v111 = vorrq_s8(v117, (int8x16_t)vdupq_laneq_s64((int64x2_t)v117, 1)).u64[0] | (((BYTE2(v108) | (BYTE2(v108) << 8))
                                                                                           - (((BYTE2(v108) | (BYTE2(v108) << 8))
                                                                                             * v97
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v108) | (BYTE2(v108) << 8)) * v97 + 0x8000) >> 16)) >> 16)) << 16);
            unsigned int v109 = (unsigned __int16)(v109 - ((v109 * v97 + 0x8000 + ((v109 * v97 + 0x8000) >> 16)) >> 16));
          }
          *v10++ = (uint16x4_t)(v111 | v109);
          --v104;
        }
        while (v104);
      }
    }
    else
    {
      uint64_t v119 = v154;
      uint64_t v118 = v155;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v120 = *v118;
          v118 += 2;
          unsigned int v121 = (unsigned int *)&v102[v120];
          if (v95 < (unsigned int *)&v102[v120]) {
            unsigned int v121 = v95;
          }
          if ((unint64_t)v121 < *(void *)(a1 + 32)) {
            unsigned int v121 = *(unsigned int **)(a1 + 32);
          }
          unsigned int v122 = bswap32(*v121);
          unsigned int v123 = (v122 << v7) | (v122 >> v96);
          HIDWORD(v125) = HIBYTE(v123);
          LODWORD(v125) = v123;
          unsigned int v124 = v125 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v126 = ((unint64_t)(BYTE1(v123) | (BYTE1(v123) << 8)) << 32) | ((unint64_t)((v123 | v9) | ((v123 | v9) << 8)) << 48) | v123 & 0xFF0000 | (BYTE2(v123) << 24);
          }
          else
          {
            v127.i32[0] = v123 | v9;
            v127.i32[1] = v123 >> 8;
            int32x2_t v128 = vmul_s32((int32x2_t)vand_s8(v127, (int8x8_t)0xFF000000FFLL), v99);
            uint32x2_t v129 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v128, v98);
            int8x8_t v130 = vand_s8((int8x8_t)vsub_s32(v128, (int32x2_t)vshr_n_u32(vsra_n_u32(v129, v129, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v131.i64[0] = v130.u32[0];
            v131.i64[1] = v130.u32[1];
            int8x16_t v132 = (int8x16_t)vshlq_u64(v131, v100);
            unint64_t v126 = vorrq_s8(v132, (int8x16_t)vdupq_laneq_s64((int64x2_t)v132, 1)).u64[0] | (((BYTE2(v123) | (BYTE2(v123) << 8))
                                                                                           - (((BYTE2(v123) | (BYTE2(v123) << 8))
                                                                                             * v97
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v123) | (BYTE2(v123) << 8)) * v97 + 0x8000) >> 16)) >> 16)) << 16);
            unsigned int v124 = (unsigned __int16)(v124 - ((v124 * v97 + 0x8000 + ((v124 * v97 + 0x8000) >> 16)) >> 16));
          }
          unint64_t v133 = HIWORD(v126);
          if (HIWORD(v126))
          {
            uint64_t v134 = v126 | v124;
            if (v133 == 0xFFFF)
            {
              *uint64_t v10 = (uint16x4_t)v134;
            }
            else
            {
              rgba64_DplusDM(v10, v134, (unint64_t)*v10, v133 ^ 0xFFFF);
              uint64x2_t v100 = (uint64x2_t)xmmword_1850CDE00;
              LOBYTE(v7) = v156;
              int v6 = v157;
            }
          }
          ++v10;
          --v119;
        }
        while (v119);
      }
    }
    uint64_t v12 = v145;
    v10 += v146;
    LOBYTE(v13) = v144;
    uint64_t v14 = v149 + v143;
    a6 = v151 - 1;
  }
  while (v151 != 1);
}

void rgba64_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v121 = *a2;
  int v7 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v120 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v117 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v117 * a4;
  uint64_t v12 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v13 = &v12[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  uint64_t v14 = 0x8000;
  int v122 = a5;
  char v118 = v10;
  uint64_t v119 = v9;
  if (*(void *)(a1 + 176))
  {
    uint64_t v15 = a3;
    uint64_t v116 = *((void *)a2 + 11);
    uint64_t v115 = *((void *)a2 + 13);
    uint64_t v114 = ~(-1 << v10);
    char v113 = v10 - 4;
    uint64_t v16 = v13 - 3;
    uint64_t v17 = v6 ^ 0xFFFFu;
    unint64_t v18 = (unint64_t)(~(0xFFFF * v17 + 0x8000 + ((0xFFFF * v17 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v111 = a5;
    uint64_t v112 = -v9;
    uint64_t v110 = v8 + 16 * v15 + 8;
    uint64_t v19 = BLEND8_21385;
    int v128 = *((unsigned __int16 *)a2 + 4);
    unint64_t v127 = v18;
    while (1)
    {
      if (((v115 - v11) | (v11 - v116)) < 0)
      {
        uint64_t v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v11 & (unint64_t)v114) >> v113) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v112 : v9;
        uint64_t v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *(void *)(a1 + 32) + (v11 >> v10) * v9;
      int v125 = a6;
      uint64_t v123 = v11;
      if (v121 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v24 = (uint64_t *)v110;
        uint64_t v25 = v111;
        while (1)
        {
          uint64_t v26 = *(v24 - 1);
          uint64_t v27 = *v24;
          uint64_t v28 = v23 + v26;
          if ((unint64_t)v16 >= v23 + v26) {
            uint64_t v29 = (unsigned __int8 *)(v23 + v26);
          }
          else {
            uint64_t v29 = v16;
          }
          if (v29 < v12) {
            uint64_t v29 = v12;
          }
          unsigned int v30 = (*v29 << 24) | (v29[1] << 16) | (v29[2] << 8);
          char v31 = v27 & 0xF;
          if ((v27 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            int v42 = (unsigned __int8 *)(v28 + v21);
            if ((unint64_t)v16 < v28 + v21) {
              int v42 = v16;
            }
            if (v42 < v12) {
              int v42 = v12;
            }
            unsigned int v43 = v19[v22];
            unsigned int v40 = v30 - ((v43 & v30) >> v22);
            unsigned int v41 = (((*v42 << 24) | (v42[1] << 16) | (v42[2] << 8)) & v43) >> v22;
            goto LABEL_40;
          }
LABEL_41:
          v24 += 2;
          LODWORD(v44) = HIBYTE(v30) | (HIBYTE(v30) << 8);
          uint64_t v45 = BYTE1(v30) | (BYTE1(v30) << 8);
          unint64_t v46 = v30 & 0xFF0000 | (BYTE2(v30) << 24) | (unint64_t)(v45 << 32);
          unint64_t v47 = (((BYTE2(v30) | (BYTE2(v30) << 8))
                - ((v14
                  + (BYTE2(v30) | (BYTE2(v30) << 8)) * v17
                  + ((v14 + (BYTE2(v30) | (BYTE2(v30) << 8)) * v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v45 - ((v14 + v45 * v17 + ((v14 + v45 * v17) >> 16)) >> 16)) << 32);
          if (v6 == 0xFFFF) {
            uint64_t v44 = v44;
          }
          else {
            uint64_t v44 = (unsigned __int16)(v44
          }
                                   - ((v14 + v44 * v17 + ((v14 + v44 * v17) >> 16)) >> 16));
          if (v6 == 0xFFFF)
          {
            unint64_t v47 = v46;
            unint64_t v48 = 0xFFFF000000000000;
          }
          else
          {
            unint64_t v48 = v18;
          }
          *v7++ = (uint16x4_t)(v47 | v44 | v48);
          if (!--v25) {
            goto LABEL_91;
          }
        }
        uint64_t v32 = (unsigned __int8 *)(v28 + (v27 >> 4));
        if (v16 < v32) {
          uint64_t v32 = v16;
        }
        if (v32 < v12) {
          uint64_t v32 = v12;
        }
        int v33 = (*v32 << 24) | (v32[1] << 16) | (v32[2] << 8);
        if (v22)
        {
          unsigned int v34 = (unsigned __int8 *)(v28 + v21);
          if (v16 >= v34) {
            char v35 = v34;
          }
          else {
            char v35 = v16;
          }
          if (v35 < v12) {
            char v35 = v12;
          }
          int v36 = (*v35 << 24) | (v35[1] << 16) | (v35[2] << 8);
          unsigned int v37 = &v34[v27 >> 4];
          if (v16 < v37) {
            unsigned int v37 = v16;
          }
          if (v37 < v12) {
            unsigned int v37 = v12;
          }
          unsigned int v38 = v19[v22];
          unsigned int v30 = v30 - ((v38 & v30) >> v22) + ((v38 & v36) >> v22);
          int v33 = v33 - ((v38 & v33) >> v22) + ((((*v37 << 24) | (v37[1] << 16) | (v37[2] << 8)) & v38) >> v22);
        }
        int v39 = v19[*v24 & 0xF];
        unsigned int v40 = v30 - ((v39 & v30) >> v31);
        unsigned int v41 = (v39 & v33) >> v31;
LABEL_40:
        unsigned int v30 = v40 + v41;
        goto LABEL_41;
      }
LABEL_91:
      uint64_t v9 = v119;
      v7 += v120;
      LOBYTE(v10) = v118;
      uint64_t v11 = v123 + v117;
      a6 = v125 - 1;
      a5 = v122;
      if (v125 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_91;
    }
    uint64_t v131 = v22;
    unsigned int v49 = (uint64_t *)v110;
    uint64_t v50 = v111;
    uint64_t v129 = v21;
    while (1)
    {
      uint64_t v51 = *(v49 - 1);
      uint64_t v52 = *v49;
      uint64_t v53 = v23 + v51;
      if ((unint64_t)v16 >= v23 + v51) {
        uint32x2_t v54 = (unsigned __int8 *)(v23 + v51);
      }
      else {
        uint32x2_t v54 = v16;
      }
      if (v54 < v12) {
        uint32x2_t v54 = v12;
      }
      unsigned int v55 = (*v54 << 24) | (v54[1] << 16) | (v54[2] << 8);
      char v56 = v52 & 0xF;
      if ((v52 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        unsigned int v67 = (unsigned __int8 *)(v53 + v21);
        if ((unint64_t)v16 < v53 + v21) {
          unsigned int v67 = v16;
        }
        if (v67 < v12) {
          unsigned int v67 = v12;
        }
        unsigned int v68 = v19[v131];
        unsigned int v65 = v55 - ((v68 & v55) >> v22);
        unsigned int v66 = (((*v67 << 24) | (v67[1] << 16) | (v67[2] << 8)) & v68) >> v22;
        goto LABEL_79;
      }
LABEL_80:
      LODWORD(v69) = HIBYTE(v55) | (HIBYTE(v55) << 8);
      uint64_t v70 = BYTE1(v55) | (BYTE1(v55) << 8);
      unint64_t v71 = v55 & 0xFF0000 | (BYTE2(v55) << 24) | (unint64_t)(v70 << 32);
      unint64_t v72 = (((BYTE2(v55) | (BYTE2(v55) << 8))
            - ((v14
              + (BYTE2(v55) | (BYTE2(v55) << 8)) * v17
              + ((v14 + (BYTE2(v55) | (BYTE2(v55) << 8)) * v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v70 - ((v14 + v70 * v17 + ((v14 + v70 * v17) >> 16)) >> 16)) << 32);
      if (v6 == 0xFFFF) {
        uint64_t v69 = v69;
      }
      else {
        uint64_t v69 = (unsigned __int16)(v69
      }
                               - ((v14 + v69 * v17 + ((v14 + v69 * v17) >> 16)) >> 16));
      if (v6 == 0xFFFF)
      {
        unint64_t v72 = v71;
        unint64_t v73 = 0xFFFF000000000000;
      }
      else
      {
        unint64_t v73 = v18;
      }
      if (HIWORD(v73))
      {
        unint64_t v74 = v72 | v69 | v73;
        if (HIWORD(v73) == 0xFFFF)
        {
          *int v7 = (uint16x4_t)v74;
        }
        else
        {
          unsigned int v75 = v19;
          uint64_t v76 = v22;
          uint64_t v77 = v14;
          uint64_t v78 = v17;
          rgba64_DplusDM(v7, v74, (unint64_t)*v7, HIWORD(v74) ^ 0xFFFF);
          uint64_t v17 = v78;
          uint64_t v14 = v77;
          uint64_t v22 = v76;
          uint64_t v19 = v75;
          uint64_t v21 = v129;
          unint64_t v18 = v127;
          int v6 = v128;
        }
      }
      v49 += 2;
      ++v7;
      if (!--v50) {
        goto LABEL_91;
      }
    }
    int8x16_t v57 = (unsigned __int8 *)(v53 + (v52 >> 4));
    if (v16 < v57) {
      int8x16_t v57 = v16;
    }
    if (v57 < v12) {
      int8x16_t v57 = v12;
    }
    int v58 = (*v57 << 24) | (v57[1] << 16) | (v57[2] << 8);
    if (v22)
    {
      uint64_t v59 = (unsigned __int8 *)(v53 + v21);
      if (v16 >= v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = v16;
      }
      if (v60 < v12) {
        uint64_t v60 = v12;
      }
      int v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
      uint64_t v62 = &v59[v52 >> 4];
      if (v16 < v62) {
        uint64_t v62 = v16;
      }
      if (v62 < v12) {
        uint64_t v62 = v12;
      }
      unsigned int v63 = v19[v131];
      unsigned int v55 = v55 - ((v63 & v55) >> v22) + ((v63 & v61) >> v22);
      int v58 = v58 - ((v63 & v58) >> v22) + ((((*v62 << 24) | (v62[1] << 16) | (v62[2] << 8)) & v63) >> v22);
    }
    int v64 = v19[*v49 & 0xF];
    unsigned int v65 = v55 - ((v64 & v55) >> v56);
    unsigned int v66 = (v64 & v58) >> v56;
LABEL_79:
    unsigned int v55 = v65 + v66;
    goto LABEL_80;
  }
  unsigned int v79 = v13 - 3;
  int v80 = v6 ^ 0xFFFF;
  uint64_t v130 = a5;
  int8x16_t v132 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    unint64_t v81 = *(unsigned __int8 **)(a1 + 32);
    int8x8_t v82 = &v81[(v11 >> v10) * v9];
    int v126 = a6;
    uint64_t v124 = v11;
    if (v121 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v84 = v130;
        int32x2_t v83 = v132;
        do
        {
          uint64_t v85 = *v83;
          v83 += 2;
          uint64x2_t v86 = &v82[v85];
          if (v79 < &v82[v85]) {
            uint64x2_t v86 = v79;
          }
          if (v86 < v81) {
            uint64x2_t v86 = v81;
          }
          int v87 = *v86;
          int v88 = v86[1];
          uint64_t v89 = v86[2] | (v86[2] << 8);
          unint64_t v90 = v89 << 32;
          int v91 = (v87 << 8) | v87;
          unsigned int v92 = v91 | (v88 << 16) | (v88 << 24);
          unint64_t v93 = (((v88 | (v88 << 8))
                - (((v88 | (v88 << 8)) * v80 + 0x8000 + (((v88 | (v88 << 8)) * v80 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v89 - ((v89 * v80 + 0x8000 + ((v89 * v80 + 0x8000) >> 16)) >> 16)) << 32);
          LODWORD(v94) = (unsigned __int16)(v91
                                          - ((v91 * v80 + 0x8000 + ((v91 * v80 + 0x8000) >> 16)) >> 16));
          if (v6 == 0xFFFF) {
            uint64_t v94 = v92;
          }
          else {
            uint64_t v94 = v94;
          }
          if (v6 == 0xFFFF)
          {
            unint64_t v93 = v90;
            unint64_t v95 = 0xFFFF000000000000;
          }
          else
          {
            unint64_t v95 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
          }
          *v7++ = (uint16x4_t)(v93 | v94 | v95);
          --v84;
        }
        while (v84);
      }
    }
    else
    {
      uint64_t v97 = v130;
      char v96 = v132;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v98 = *v96;
          v96 += 2;
          int32x2_t v99 = &v82[v98];
          if (v79 < &v82[v98]) {
            int32x2_t v99 = v79;
          }
          if ((unint64_t)v99 < *(void *)(a1 + 32)) {
            int32x2_t v99 = *(unsigned __int8 **)(a1 + 32);
          }
          int v100 = *v99;
          int v101 = v99[1];
          uint64_t v102 = v99[2] | (v99[2] << 8);
          unint64_t v103 = v102 << 32;
          int v104 = (v100 << 8) | v100;
          unsigned int v105 = v104 | (v101 << 16) | (v101 << 24);
          unint64_t v106 = (((v101 | (v101 << 8))
                 - (((v101 | (v101 << 8)) * v80 + 0x8000 + (((v101 | (v101 << 8)) * v80 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v102 - ((v102 * v80 + 0x8000 + ((v102 * v80 + 0x8000) >> 16)) >> 16)) << 32);
          LODWORD(v107) = (unsigned __int16)(v104
                                           - ((v104 * v80 + 0x8000 + ((v104 * v80 + 0x8000) >> 16)) >> 16));
          if (v6 == 0xFFFF) {
            uint64_t v107 = v105;
          }
          else {
            uint64_t v107 = v107;
          }
          if (v6 == 0xFFFF)
          {
            unint64_t v106 = v103;
            unint64_t v108 = 0xFFFF000000000000;
          }
          else
          {
            unint64_t v108 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
          }
          if (HIWORD(v108))
          {
            unint64_t v109 = v106 | v107 | v108;
            if (HIWORD(v108) == 0xFFFF) {
              *int v7 = (uint16x4_t)v109;
            }
            else {
              rgba64_DplusDM(v7, v109, (unint64_t)*v7, HIWORD(v109) ^ 0xFFFF);
            }
          }
          ++v7;
          --v97;
        }
        while (v97);
      }
    }
    uint64_t v9 = v119;
    v7 += v120;
    LOBYTE(v10) = v118;
    uint64_t v11 = v124 + v117;
    a6 = v126 - 1;
    a5 = v122;
  }
  while (v126 != 1);
}

void rgba64_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v108 = *a2;
  int v7 = (uint16x4_t *)*((void *)a2 + 2);
  uint64_t v107 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v104 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v104 * a4;
  uint64_t v12 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v13 = &v12[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  char v105 = v10;
  uint64_t v106 = v9;
  if (*(void *)(a1 + 176))
  {
    uint64_t v14 = a3;
    uint64_t v102 = *((void *)a2 + 11);
    uint64_t v101 = *((void *)a2 + 13);
    uint64_t v100 = ~(-1 << v10);
    char v99 = v10 - 4;
    uint64_t v98 = -v9;
    uint64_t v15 = v13 - 4;
    int v16 = v6 ^ 0xFFFF;
    unint64_t v17 = (unint64_t)(255 - ((255 * v16 + 0x8000 + ((255 * v16 + 0x8000) >> 16)) >> 16)) << 48;
    uint64_t v96 = v8 + 16 * v14 + 8;
    uint64_t v97 = a5;
    unint64_t v18 = BLEND8_21385;
    int v114 = v6 ^ 0xFFFF;
    int v113 = *((unsigned __int16 *)a2 + 4);
    while (1)
    {
      int v111 = a6;
      if (((v101 - v11) | (v11 - v102)) < 0)
      {
        unsigned int v21 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = ((v11 & (unint64_t)v100) >> v99) & 0xF;
        uint64_t v20 = (unint64_t)(v19 - 7) >= 9 ? v98 : v9;
        unsigned int v21 = weights_21383[v19] & 0xF;
      }
      uint64_t v109 = v11;
      uint64_t v22 = *(void *)(a1 + 32) + (v11 >> v10) * v9;
      if (v108 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v23 = (uint64_t *)v96;
        uint64_t v24 = v97;
        while (1)
        {
          uint64_t v25 = *(v23 - 1);
          uint64_t v26 = *v23;
          uint64_t v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25) {
            uint64_t v28 = (unsigned __int8 *)(v22 + v25);
          }
          else {
            uint64_t v28 = v15;
          }
          if (v28 < v12) {
            uint64_t v28 = v12;
          }
          unsigned int v29 = *v28;
          char v30 = v26 & 0xF;
          if ((v26 & 0xF) != 0) {
            break;
          }
          if (v21)
          {
            unsigned int v40 = (unsigned __int8 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20) {
              unsigned int v40 = v15;
            }
            if (v40 < v12) {
              unsigned int v40 = v12;
            }
            int v41 = v18[v21];
            v29 -= (v41 & v29) >> v21;
            unsigned int v39 = (v41 & *v40) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          unsigned int v29 = v29;
          unint64_t v42 = (0x100010001 * (v29 | (v29 << 8))) | 0xFFFF000000000000;
          uint64_t v43 = (unsigned __int16)(v29 - ((v29 * v16 + 0x8000 + ((v29 * v16 + 0x8000) >> 16)) >> 16));
          unint64_t v44 = ((unint64_t)v43 << 16) | (v43 << 32) | v17 | v43;
          if (v6 == 0xFFFF) {
            unint64_t v44 = v42;
          }
          *v7++ = (uint16x4_t)v44;
          if (!--v24) {
            goto LABEL_84;
          }
        }
        char v31 = (unsigned __int8 *)(v27 + (v26 >> 4));
        if (v15 < v31) {
          char v31 = v15;
        }
        if (v31 < v12) {
          char v31 = v12;
        }
        unsigned int v32 = *v31;
        if (v21)
        {
          int v33 = (unsigned __int8 *)(v27 + v20);
          if (v15 >= v33) {
            unsigned int v34 = v33;
          }
          else {
            unsigned int v34 = v15;
          }
          if (v34 < v12) {
            unsigned int v34 = v12;
          }
          unsigned int v35 = *v34;
          int v36 = &v33[v26 >> 4];
          if (v15 < v36) {
            int v36 = v15;
          }
          if (v36 < v12) {
            int v36 = v12;
          }
          int v37 = v18[v21];
          unsigned int v29 = v29 - ((v37 & v29) >> v21) + ((v37 & v35) >> v21);
          unsigned int v32 = v32 - ((v37 & v32) >> v21) + ((v37 & *v36) >> v21);
        }
        int v38 = v18[*v23 & 0xF];
        v29 -= (v38 & v29) >> v30;
        unsigned int v39 = (v38 & v32) >> v30;
LABEL_40:
        LOBYTE(v29) = v29 + v39;
        goto LABEL_41;
      }
LABEL_84:
      uint64_t v9 = v106;
      v7 += v107;
      LOBYTE(v10) = v105;
      uint64_t v11 = v109 + v104;
      a6 = v111 - 1;
      if (v111 == 1) {
        return;
      }
    }
    if (a5 < 1) {
      goto LABEL_84;
    }
    uint64_t v45 = (uint64_t *)v96;
    uint64_t v46 = v97;
    while (1)
    {
      uint64_t v47 = *(v45 - 1);
      uint64_t v48 = *v45;
      uint64_t v49 = v22 + v47;
      if ((unint64_t)v15 >= v22 + v47) {
        uint64_t v50 = (unsigned __int8 *)(v22 + v47);
      }
      else {
        uint64_t v50 = v15;
      }
      if (v50 < v12) {
        uint64_t v50 = v12;
      }
      unsigned int v51 = *v50;
      char v52 = v48 & 0xF;
      if ((v48 & 0xF) != 0) {
        break;
      }
      if (v21)
      {
        uint64_t v62 = (unsigned __int8 *)(v49 + v20);
        if ((unint64_t)v15 < v49 + v20) {
          uint64_t v62 = v15;
        }
        if (v62 < v12) {
          uint64_t v62 = v12;
        }
        int v63 = v18[v21];
        v51 -= (v63 & v51) >> v21;
        unsigned int v61 = (v63 & *v62) >> v21;
        goto LABEL_75;
      }
LABEL_76:
      unsigned int v51 = v51;
      unint64_t v64 = (0x100010001 * (v51 | (v51 << 8))) | 0xFFFF000000000000;
      uint64_t v65 = (unsigned __int16)(v51 - ((v51 * v16 + 0x8000 + ((v51 * v16 + 0x8000) >> 16)) >> 16));
      unint64_t v66 = ((unint64_t)v65 << 16) | (v65 << 32) | v17 | v65;
      if (v6 == 0xFFFF) {
        unint64_t v67 = v64;
      }
      else {
        unint64_t v67 = v66;
      }
      unint64_t v68 = HIWORD(v67);
      if (HIWORD(v67))
      {
        if (v68 == 0xFFFF)
        {
          *int v7 = (uint16x4_t)v67;
        }
        else
        {
          unint64_t v69 = v17;
          uint64_t v70 = v18;
          uint64_t v71 = v22;
          uint64_t v72 = v20;
          rgba64_DplusDM(v7, v67, (unint64_t)*v7, v68 ^ 0xFFFF);
          uint64_t v20 = v72;
          uint64_t v22 = v71;
          unint64_t v18 = v70;
          unint64_t v17 = v69;
          int v6 = v113;
          int v16 = v114;
        }
      }
      v45 += 2;
      ++v7;
      if (!--v46) {
        goto LABEL_84;
      }
    }
    uint64_t v53 = (unsigned __int8 *)(v49 + (v48 >> 4));
    if (v15 < v53) {
      uint64_t v53 = v15;
    }
    if (v53 < v12) {
      uint64_t v53 = v12;
    }
    unsigned int v54 = *v53;
    if (v21)
    {
      unsigned int v55 = (unsigned __int8 *)(v49 + v20);
      if (v15 >= v55) {
        char v56 = v55;
      }
      else {
        char v56 = v15;
      }
      if (v56 < v12) {
        char v56 = v12;
      }
      unsigned int v57 = *v56;
      int v58 = &v55[v48 >> 4];
      if (v15 < v58) {
        int v58 = v15;
      }
      if (v58 < v12) {
        int v58 = v12;
      }
      int v59 = v18[v21];
      unsigned int v51 = v51 - ((v59 & v51) >> v21) + ((v59 & v57) >> v21);
      unsigned int v54 = v54 - ((v59 & v54) >> v21) + ((v59 & *v58) >> v21);
    }
    int v60 = v18[*v45 & 0xF];
    v51 -= (v60 & v51) >> v52;
    unsigned int v61 = (v60 & v54) >> v52;
LABEL_75:
    LOBYTE(v51) = v51 + v61;
    goto LABEL_76;
  }
  unint64_t v73 = v13 - 4;
  int v74 = v6 ^ 0xFFFF;
  unint64_t v75 = (unint64_t)(255 - ((255 * v74 + 0x8000 + ((255 * v74 + 0x8000) >> 16)) >> 16)) << 48;
  uint64_t v115 = a5;
  uint64_t v116 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    uint64_t v76 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v77 = &v76[(v11 >> v10) * v9];
    int v112 = a6;
    uint64_t v110 = v11;
    if (v108 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v79 = v115;
        uint64_t v78 = v116;
        do
        {
          uint64_t v80 = *v78;
          v78 += 2;
          unint64_t v81 = &v77[v80];
          if (v73 < &v77[v80]) {
            unint64_t v81 = v73;
          }
          if (v81 < v76) {
            unint64_t v81 = v76;
          }
          int v82 = *v81;
          unint64_t v83 = (0x100010001 * (v82 | (v82 << 8))) | 0xFFFF000000000000;
          uint64_t v84 = (unsigned __int16)(v82 - ((v82 * v74 + 0x8000 + ((v82 * v74 + 0x8000) >> 16)) >> 16));
          unint64_t v85 = ((unint64_t)v84 << 16) | (v84 << 32) | v75 | v84;
          if (v6 == 0xFFFF) {
            unint64_t v85 = v83;
          }
          *v7++ = (uint16x4_t)v85;
          --v79;
        }
        while (v79);
      }
    }
    else
    {
      uint64_t v87 = v115;
      uint64x2_t v86 = v116;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v88 = *v86;
          v86 += 2;
          uint64_t v89 = &v77[v88];
          if (v73 < &v77[v88]) {
            uint64_t v89 = v73;
          }
          if ((unint64_t)v89 < *(void *)(a1 + 32)) {
            uint64_t v89 = *(unsigned __int8 **)(a1 + 32);
          }
          int v90 = *v89;
          unint64_t v91 = (0x100010001 * (v90 | (v90 << 8))) | 0xFFFF000000000000;
          uint64_t v92 = (unsigned __int16)(v90 - ((v90 * v74 + 0x8000 + ((v90 * v74 + 0x8000) >> 16)) >> 16));
          unint64_t v93 = ((unint64_t)v92 << 16) | (v92 << 32) | v75 | v92;
          if (v6 == 0xFFFF) {
            unint64_t v94 = v91;
          }
          else {
            unint64_t v94 = v93;
          }
          unint64_t v95 = HIWORD(v94);
          if (HIWORD(v94))
          {
            if (v95 == 0xFFFF) {
              *int v7 = (uint16x4_t)v94;
            }
            else {
              rgba64_DplusDM(v7, v94, (unint64_t)*v7, v95 ^ 0xFFFF);
            }
          }
          ++v7;
          --v87;
        }
        while (v87);
      }
    }
    uint64_t v9 = v106;
    v7 += v107;
    LOBYTE(v10) = v105;
    uint64_t v11 = v110 + v104;
    a6 = v112 - 1;
  }
  while (v112 != 1);
}

void rgba16_template_image_mark_method(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a1 & 0x30) == 0x20)
  {
    if ((a3 & 0x80000000) != 0) {
      return;
    }
    uint64_t v97 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t))VEC::template_mark_pixelshape_row<(CGCompositeOperation)0,_rgba16_t>;
    if (a3 <= 0x17) {
      uint64_t v97 = VEC::MethodList<_rgba16_t>::shapeMethods[a3];
    }
    int v3 = *(_DWORD *)(a2 + 4);
    int v4 = *(_DWORD *)(a2 + 8);
    uint64_t v5 = v3;
    int v105 = v4;
    int v106 = v3;
    unint64_t v6 = *(int *)(a2 + 28);
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 88);
    uint64_t v9 = *(void *)(a2 + 96);
    uint64_t v103 = v10;
    uint64_t v11 = *(int **)(a2 + 136);
    int v12 = *(unsigned __int8 *)(a2 + 1) << 8;
    unint64_t v13 = v6 >> 3;
    BOOL v95 = v8 != 0;
    unint64_t v14 = v7 + 8 * (*(int *)(a2 + 12) + (v6 >> 3) * *(int *)(a2 + 16));
    unint64_t v104 = v14;
    int v15 = *(_DWORD *)(a2 + 104);
    int v16 = *(_DWORD *)(a2 + 108);
    uint64_t v17 = *(int *)(a2 + 56);
    uint64_t v18 = *(int *)(a2 + 60);
    unint64_t v19 = *(int *)(a2 + 76);
    if (v12 != 256)
    {
      unint64_t v99 = *(unsigned int *)(a2 + 64);
      unint64_t v45 = v19 >> 3;
      unint64_t v46 = (v19 >> 3) * *(int *)(a2 + 68);
      int v83 = *(_DWORD *)(a2 + 68);
      uint64_t v102 = v10;
      unint64_t v47 = v10 + 8 * v46;
      BOOL v48 = v9 != 0;
      if (v11)
      {
        uint64_t v23 = 1;
        uint64_t v21 = v10;
LABEL_38:
        shape_enum_clip_alloc(a1, a2, v11, v23, v13, 1, v15, v16, v3, v4);
        int v58 = v57;
        if (!v57) {
          return;
        }
        while (shape_enum_clip_next((uint64_t)v58, (int *)&v101 + 1, &v101, &v106, &v105))
        {
          uint64_t v87 = v21;
          unint64_t v89 = v14;
          unint64_t v85 = v58;
          if (v47)
          {
            uint64_t v69 = v14 + 8 * v13 * (int)v101 + 8 * SHIDWORD(v101);
            int v3 = v106;
            uint64_t v70 = v21 + 8 * v45 * (((int)v101 + *(_DWORD *)(a2 + 60)) % v83);
            uint64_t v21 = v70 + 8 * ((HIDWORD(v101) + *(_DWORD *)(a2 + 56)) % (int)v99);
            uint64_t v54 = v70 + 8 * (int)v99;
            uint64_t v102 = v54;
            LODWORD(v5) = v106;
            uint64_t v10 = v21;
          }
          else
          {
            int v3 = v106;
            LODWORD(v5) = v106 * v23;
            uint64_t v69 = v14 + 8 * v13 * (int)v101 + 8 * HIDWORD(v101) * (int)v23;
            v21 += 8 * (int)v101 * (int)v99 + 8 * HIDWORD(v101) * (int)v23;
            unint64_t v45 = (int)v99 - v106 * (int)v23;
            uint64_t v54 = v102;
          }
          unint64_t v104 = v69;
          uint64_t v103 = v21;
          uint64_t v5 = (int)v5;
          int v4 = v105;
LABEL_50:
          unint64_t v93 = v13;
          uint64_t v60 = v13 - v5;
          unint64_t v61 = v3 & ~(v3 >> 31);
          if ((unint64_t)(v54 - v21) >> 3 >= v61) {
            unint64_t v62 = v61;
          }
          else {
            unint64_t v62 = (unint64_t)(v54 - v21) >> 3;
          }
          unint64_t v63 = v61 - v62;
          if (v4 >= 1) {
            int v64 = 1;
          }
          else {
            int v64 = v4;
          }
          int v91 = v64;
          int v65 = v4 + 1;
          do
          {
            v97((int)&v103, (int)&v104, (int)&v102, v99, v23, v48, v95, v63, v62);
            v104 += 8 * v60;
            if (v47)
            {
              unint64_t v66 = v10 + 8 * v45;
              if (v66 >= v47) {
                uint64_t v67 = -(uint64_t)(v45 * v83);
              }
              else {
                uint64_t v67 = 0;
              }
              uint64_t v68 = v66 + 8 * v67;
              v102 += 8 * v67 + 8 * v45;
              uint64_t v10 = v68;
            }
            else
            {
              uint64_t v68 = v103 + 8 * v45;
            }
            uint64_t v103 = v68;
            --v65;
          }
          while (v65 > 1);
          int v105 = v91 - 1;
          unint64_t v13 = v93;
          uint64_t v21 = v87;
          unint64_t v14 = v89;
          int v58 = v85;
          if (!v85) {
            return;
          }
          uint64_t v101 = 0;
        }
LABEL_92:
        free(v58);
        return;
      }
      unint64_t v89 = v14;
      if (v10)
      {
        unint64_t v85 = 0;
        uint64_t v87 = v10;
        uint64_t v53 = v10 + 8 * v45 * ((int)v18 % v83);
        uint64_t v21 = v53 + 8 * ((int)v17 % (int)v99);
        uint64_t v54 = v53 + 8 * (int)v99;
        uint64_t v102 = v54;
        uint64_t v103 = v21;
        uint64_t v23 = 1;
        uint64_t v10 = v21;
        goto LABEL_50;
      }
      uint64_t v54 = 0;
      uint64_t v21 = 0;
      uint64_t v23 = 1;
LABEL_41:
      unint64_t v47 = 0;
      unint64_t v85 = 0;
      uint64_t v87 = v21;
      uint64_t v10 = 0;
      v45 -= v5;
      goto LABEL_50;
    }
    unint64_t v20 = v19 >> 3;
    uint64_t v21 = v10 + 8 * (v17 + v20 * v18);
    uint64_t v102 = -1;
    uint64_t v103 = v21;
    unint64_t v99 = v20;
    if (v20 != v13)
    {
      uint64_t v23 = 1;
LABEL_36:
      BOOL v48 = v9 != 0;
      if (v11)
      {
        unint64_t v47 = 0;
        uint64_t v10 = 0;
        int v83 = 0;
        unint64_t v45 = v99;
        goto LABEL_38;
      }
      unint64_t v89 = v14;
      int v83 = 0;
      uint64_t v5 = (int)v23 * v3;
      uint64_t v54 = -1;
      unint64_t v45 = v99;
      goto LABEL_41;
    }
    if ((uint64_t)(v14 - v21) >= 1)
    {
      if (v3 >= (uint64_t)((v14 - v21) >> 3))
      {
        v14 += 8 * (v3 - 1);
        unint64_t v104 = v14;
        v21 += 8 * (v3 - 1);
        uint64_t v103 = v21;
        uint64_t v23 = 0xFFFFFFFFLL;
        goto LABEL_35;
      }
      uint64_t v22 = v13 * (v4 - 1);
      if (v14 <= v21 + 8 * v22 + 8 * (v3 - 1))
      {
        v14 += 8 * v22;
        unint64_t v104 = v14;
        unint64_t v13 = -(uint64_t)v13;
        uint64_t v103 = v21 + 8 * v22;
        uint64_t v23 = 1;
        uint64_t v21 = v103;
        goto LABEL_35;
      }
    }
    uint64_t v23 = 1;
LABEL_35:
    unint64_t v99 = v13;
    goto LABEL_36;
  }
  if ((a3 & 0x80000000) != 0) {
    return;
  }
  uint64_t v98 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t))VEC::template_mark_pixelshape_row<(CGCompositeOperation)0,_RGBA16_t>;
  if (a3 <= 0x17) {
    uint64_t v98 = VEC::MethodList<_RGBA16_t>::shapeMethods[a3];
  }
  int v24 = *(_DWORD *)(a2 + 4);
  int v25 = *(_DWORD *)(a2 + 8);
  uint64_t v26 = v24;
  int v105 = v25;
  int v106 = v24;
  unint64_t v27 = *(int *)(a2 + 28);
  uint64_t v28 = *(void *)(a2 + 40);
  uint64_t v29 = *(void *)(a2 + 48);
  uint64_t v31 = *(void *)(a2 + 88);
  uint64_t v30 = *(void *)(a2 + 96);
  uint64_t v103 = v31;
  unsigned int v32 = *(int **)(a2 + 136);
  int v33 = *(unsigned __int8 *)(a2 + 1) << 8;
  unint64_t v34 = v27 >> 3;
  BOOL v96 = v29 != 0;
  unint64_t v35 = v28 + 8 * (*(int *)(a2 + 12) + (v27 >> 3) * *(int *)(a2 + 16));
  unint64_t v104 = v35;
  int v36 = *(_DWORD *)(a2 + 104);
  int v37 = *(_DWORD *)(a2 + 108);
  uint64_t v38 = *(int *)(a2 + 56);
  uint64_t v39 = *(int *)(a2 + 60);
  unint64_t v40 = *(int *)(a2 + 76);
  if (v33 != 256)
  {
    unint64_t v100 = *(unsigned int *)(a2 + 64);
    unint64_t v49 = v40 >> 3;
    unint64_t v50 = (v40 >> 3) * *(int *)(a2 + 68);
    int v84 = *(_DWORD *)(a2 + 68);
    uint64_t v102 = v31;
    unint64_t v51 = v31 + 8 * v50;
    BOOL v52 = v30 != 0;
    if (v32)
    {
      uint64_t v44 = 1;
      uint64_t v42 = v31;
      goto LABEL_46;
    }
    unint64_t v90 = v35;
    if (v31)
    {
      uint64x2_t v86 = 0;
      uint64_t v88 = v31;
      uint64_t v55 = v31 + 8 * v49 * ((int)v39 % v84);
      uint64_t v42 = v55 + 8 * ((int)v38 % (int)v100);
      uint64_t v56 = v55 + 8 * (int)v100;
      uint64_t v102 = v56;
      uint64_t v103 = v42;
      uint64_t v44 = 1;
      uint64_t v31 = v42;
      goto LABEL_71;
    }
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v44 = 1;
LABEL_49:
    unint64_t v51 = 0;
    uint64x2_t v86 = 0;
    uint64_t v88 = v42;
    uint64_t v31 = 0;
    v49 -= v26;
    goto LABEL_71;
  }
  unint64_t v41 = v40 >> 3;
  uint64_t v42 = v31 + 8 * (v38 + v41 * v39);
  uint64_t v102 = -1;
  uint64_t v103 = v42;
  unint64_t v100 = v41;
  if (v41 != v34)
  {
    uint64_t v44 = 1;
    goto LABEL_44;
  }
  if ((uint64_t)(v35 - v42) >= 1)
  {
    if (v24 >= (uint64_t)((v35 - v42) >> 3))
    {
      v35 += 8 * (v24 - 1);
      unint64_t v104 = v35;
      v42 += 8 * (v24 - 1);
      uint64_t v103 = v42;
      uint64_t v44 = 0xFFFFFFFFLL;
      goto LABEL_43;
    }
    uint64_t v43 = v34 * (v25 - 1);
    if (v35 <= v42 + 8 * v43 + 8 * (v24 - 1))
    {
      v35 += 8 * v43;
      unint64_t v104 = v35;
      unint64_t v34 = -(uint64_t)v34;
      uint64_t v103 = v42 + 8 * v43;
      uint64_t v44 = 1;
      uint64_t v42 = v103;
      goto LABEL_43;
    }
  }
  uint64_t v44 = 1;
LABEL_43:
  unint64_t v100 = v34;
LABEL_44:
  BOOL v52 = v30 != 0;
  if (!v32)
  {
    unint64_t v90 = v35;
    int v84 = 0;
    uint64_t v26 = (int)v44 * v24;
    uint64_t v56 = -1;
    unint64_t v49 = v100;
    goto LABEL_49;
  }
  unint64_t v51 = 0;
  uint64_t v31 = 0;
  int v84 = 0;
  unint64_t v49 = v100;
LABEL_46:
  shape_enum_clip_alloc(a1, a2, v32, v44, v34, 1, v36, v37, v24, v25);
  int v58 = v59;
  if (v59)
  {
    while (shape_enum_clip_next((uint64_t)v58, (int *)&v101 + 1, &v101, &v106, &v105))
    {
      uint64_t v88 = v42;
      unint64_t v90 = v35;
      uint64x2_t v86 = v58;
      if (v51)
      {
        uint64_t v80 = v35 + 8 * v34 * (int)v101 + 8 * SHIDWORD(v101);
        int v24 = v106;
        uint64_t v81 = v42 + 8 * v49 * (((int)v101 + *(_DWORD *)(a2 + 60)) % v84);
        uint64_t v42 = v81 + 8 * ((HIDWORD(v101) + *(_DWORD *)(a2 + 56)) % (int)v100);
        uint64_t v56 = v81 + 8 * (int)v100;
        uint64_t v102 = v56;
        LODWORD(v26) = v106;
        uint64_t v31 = v42;
      }
      else
      {
        int v24 = v106;
        LODWORD(v26) = v106 * v44;
        uint64_t v80 = v35 + 8 * v34 * (int)v101 + 8 * HIDWORD(v101) * (int)v44;
        v42 += 8 * (int)v101 * (int)v100 + 8 * HIDWORD(v101) * (int)v44;
        unint64_t v49 = (int)v100 - v106 * (int)v44;
        uint64_t v56 = v102;
      }
      unint64_t v104 = v80;
      uint64_t v103 = v42;
      uint64_t v26 = (int)v26;
      int v25 = v105;
LABEL_71:
      unint64_t v94 = v34;
      uint64_t v71 = v34 - v26;
      unint64_t v72 = v24 & ~(v24 >> 31);
      if ((unint64_t)(v56 - v42) >> 3 >= v72) {
        unint64_t v73 = v72;
      }
      else {
        unint64_t v73 = (unint64_t)(v56 - v42) >> 3;
      }
      unint64_t v74 = v72 - v73;
      if (v25 >= 1) {
        int v75 = 1;
      }
      else {
        int v75 = v25;
      }
      int v92 = v75;
      int v76 = v25 + 1;
      do
      {
        v98((int)&v103, (int)&v104, (int)&v102, v100, v44, v52, v96, v74, v73);
        v104 += 8 * v71;
        if (v51)
        {
          unint64_t v77 = v31 + 8 * v49;
          if (v77 >= v51) {
            uint64_t v78 = -(uint64_t)(v49 * v84);
          }
          else {
            uint64_t v78 = 0;
          }
          uint64_t v79 = v77 + 8 * v78;
          v102 += 8 * v78 + 8 * v49;
          uint64_t v31 = v79;
        }
        else
        {
          uint64_t v79 = v103 + 8 * v49;
        }
        uint64_t v103 = v79;
        --v76;
      }
      while (v76 > 1);
      int v105 = v92 - 1;
      unint64_t v34 = v94;
      uint64_t v42 = v88;
      unint64_t v35 = v90;
      int v58 = v86;
      if (!v86) {
        return;
      }
      uint64_t v101 = 0;
    }
    goto LABEL_92;
  }
}

uint16x4_t rgba64_DplusDAM(uint16x4_t *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint16x4_t result = vqadd_u16((uint16x4_t)a2, (uint16x4_t)(((unint64_t)((WORD2(a3) * a5 + 0x8000 + ((WORD2(a3) * a5 + 0x8000) >> 16)) >> 16) << 32) | ((unint64_t)((a5 * a4 + 0x8000 + ((a5 * a4 + 0x8000) >> 16)) >> 16) << 48) | (WORD1(a3) * a5 + 0x8000 + ((WORD1(a3) * a5 + 0x8000) >> 16)) & 0xFFFF0000 | (unint64_t)(((unsigned __int16)a3 * a5 + 0x8000 + (((unsigned __int16)a3 * a5 + 0x8000) >> 16)) >> 16)));
  *a1 = result;
  return result;
}

_DWORD *rgba64_DpluslDA(_DWORD *result, unint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = (unsigned __int16)a3 + (unint64_t)(unsigned __int16)a2;
  unint64_t v5 = WORD1(a3) + (unint64_t)WORD1(a2);
  unint64_t v6 = WORD2(a3) + (unint64_t)WORD2(a2);
  unint64_t v7 = HIWORD(a2) + a4;
  if (v4 >= 0xFFFF) {
    LODWORD(v4) = 0xFFFF;
  }
  if (v5 >= 0xFFFF) {
    LODWORD(v5) = 0xFFFF;
  }
  if (v6 >= 0xFFFF) {
    LODWORD(v6) = 0xFFFF;
  }
  if (v7 >= 0xFFFF) {
    LODWORD(v7) = 0xFFFF;
  }
  unint64_t *result = v4 | (v5 << 16);
  result[1] = v6 | (v7 << 16);
  return result;
}

void rgba64_mark_constmask(uint64_t a1, int a2)
{
  int v5 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v222 = *(int *)(a1 + 28);
  uint64_t v225 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 136);
  unint64_t v8 = **(void **)(a1 + 88);
  pthread_mutex_lock(&rgba64_cacheColorLock);
  uint64_t v9 = (void *)rgba64_cacheColor;
  if (!rgba64_cacheColor || *(void *)(rgba64_cacheColor + 16) != v8)
  {
    uint64_t v11 = 0;
    while (1)
    {
      if (!v9) {
        goto LABEL_9;
      }
      int v12 = (char *)v9;
      unint64_t v13 = v11;
      if (v9[2] == v8) {
        break;
      }
      uint64_t v9 = (void *)*v9;
      uint64_t v11 = v12;
      if (!*(void *)v12)
      {
        if (rgba64_cacheColorCount > 6)
        {
          *(void *)unint64_t v13 = 0;
        }
        else
        {
LABEL_9:
          unint64_t v14 = (char *)rgba64_cacheColorBase;
          if (rgba64_cacheColorBase)
          {
            unsigned int v15 = rgba64_cacheColorCount;
          }
          else
          {
            unint64_t v14 = (char *)malloc_type_calloc(1uLL, 0x38A8uLL, 0x10200402493A768uLL);
            unsigned int v15 = 0;
            rgba64_cacheColorBase = (uint64_t)v14;
          }
          int v12 = &v14[24 * v15];
          *((void *)v12 + 1) = &v14[2048 * (unint64_t)v15 + 168];
          rgba64_cacheColorCFIndex Count = v15 + 1;
        }
        uint64_t v16 = 0;
        *(void *)int v12 = rgba64_cacheColor;
        rgba64_cacheColor = (uint64_t)v12;
        *((void *)v12 + 2) = v8;
        uint64_t v18 = *((void *)v12 + 1);
        uint64_t v10 = v12 + 8;
        uint64_t v17 = v18;
        int32x2_t v19 = vdup_n_s32((unsigned __int16)v8);
        int32x2_t v20 = vdup_n_s32(WORD1(v8));
        int32x2_t v21 = vdup_n_s32(WORD2(v8));
        int32x2_t v22 = vdup_n_s32(HIWORD(v8));
        int32x2_t v23 = vdup_n_s32(v8);
        int32x2_t v24 = (int32x2_t)0x100000000;
        int32x2_t v25 = vdup_n_s32(HIDWORD(v8));
        int32x2_t v26 = vdup_n_s32(0x101u);
        do
        {
          int32x2_t v27 = (int32x2_t)veor_s8((int8x8_t)vmul_s32(v24, v26), (int8x8_t)0xFFFF0000FFFFLL);
          uint32x2_t v28 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v27, v19);
          uint32x2_t v29 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v27, v20);
          uint32x2_t v30 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v27, v21);
          uint32x2_t v31 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v27, v22);
          int32x2_t v32 = (int32x2_t)vshr_n_u32(vsra_n_u32(v28, v28, 0x10uLL), 0x10uLL);
          int32x2_t v33 = (int32x2_t)vshr_n_u32(vsra_n_u32(v29, v29, 0x10uLL), 0x10uLL);
          int32x2_t v34 = (int32x2_t)vshr_n_u32(vsra_n_u32(v30, v30, 0x10uLL), 0x10uLL);
          int32x2_t v35 = vsub_s32(v22, (int32x2_t)vshr_n_u32(vsra_n_u32(v31, v31, 0x10uLL), 0x10uLL));
          v36.i64[0] = v35.u32[0];
          v36.i64[1] = v35.u32[1];
          int8x16_t v37 = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v36, 0x30uLL), (int8x16_t)vshll_n_s32((int32x2_t)vand_s8((int8x8_t)vsub_s32(v25, v34), (int8x8_t)0xFFFF0000FFFFLL), 0x20uLL));
          int32x2_t v38 = vshl_n_s32(vsub_s32(v20, v33), 0x10uLL);
          v36.i64[0] = v38.u32[0];
          v36.i64[1] = v38.u32[1];
          int8x16_t v39 = v36;
          int8x8_t v40 = vand_s8((int8x8_t)vsub_s32(v23, v32), (int8x8_t)0xFFFF0000FFFFLL);
          v36.i64[0] = v40.u32[0];
          v36.i64[1] = v40.u32[1];
          *(int8x16_t *)(v17 + v16) = vorrq_s8(v37, vorrq_s8(v39, v36));
          int32x2_t v24 = vadd_s32(v24, (int32x2_t)0x200000002);
          v16 += 16;
        }
        while (v16 != 2048);
        pthread_mutex_unlock(&rgba64_cacheColorLock);
        goto LABEL_20;
      }
    }
    if (v11)
    {
      *(void *)uint64_t v11 = *v9;
      *uint64_t v9 = rgba64_cacheColor;
      rgba64_cacheColor = (uint64_t)v9;
    }
  }
  pthread_mutex_unlock(&rgba64_cacheColorLock);
  uint64_t v10 = v9 + 1;
LABEL_20:
  if (!v7) {
    return;
  }
  uint64_t v41 = *v10;
  unint64_t v42 = *(void *)(*v10 + 2040);
  uint64_t v43 = v225 + 8 * (*(int *)(a1 + 12) + (v222 >> 3) * *(int *)(a1 + 16));
  uint64_t v44 = *(int *)(a1 + 124);
  unint64_t v45 = v7 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v44;
  uint64_t v46 = v44 - v5;
  unint64_t v47 = (v222 >> 3) - v5;
  switch(a2)
  {
    case 0:
      do
      {
        int v48 = v5;
        do
        {
          int v49 = *(unsigned __int8 *)v45;
          if (*(unsigned char *)v45)
          {
            if (v49 == 255)
            {
              *(void *)uint64_t v43 = 0;
            }
            else
            {
              int32x2_t v50 = *(int32x2_t *)v43;
              v51.i32[0] = vshl_u32(*(uint32x2_t *)v43, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
              v52.i32[0] = v51.i32[0];
              v52.i32[1] = (unsigned __int16)WORD2(*(void *)v43);
              int32x2_t v53 = vdup_n_s32((v49 ^ 0xFF | ((v49 ^ 0xFF) << 8)) ^ 0xFFFFu);
              v54.i32[0] = (unsigned __int16)*(void *)v43;
              v54.i32[1] = HIWORD(*(void *)v43);
              uint32x2_t v55 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v52, v53);
              uint32x2_t v56 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v54, v53);
              v51.i32[1] = HIDWORD(*(void *)v43);
              uint32x2_t v57 = (uint32x2_t)vsub_s32(v51, (int32x2_t)vshr_n_u32(vsra_n_u32(v55, v55, 0x10uLL), 0x10uLL));
              v50.i32[1] = v54.i32[1];
              int8x8_t v58 = (int8x8_t)vsub_s32(v50, (int32x2_t)vshr_n_u32(vsra_n_u32(v56, v56, 0x10uLL), 0x10uLL));
              int8x8_t v59 = (int8x8_t)vshl_n_s32((int32x2_t)v58, 0x10uLL);
              v58.i16[1] = 0;
              v58.i32[1] = v59.i32[1];
              v59.i32[0] = vshl_u32(v57, (uint32x2_t)0xFFFF00000010).u32[0];
              v59.i32[1] = v57.u16[2];
              *(int8x8_t *)uint64_t v43 = vorr_s8(v59, v58);
            }
          }
          ++v45;
          v43 += 8;
          --v48;
        }
        while (v48);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 1:
      uint64_t v126 = 0xFFFFFFFFLL;
      unsigned int v127 = v45 & 3;
      if ((v45 & 3) != 0)
      {
        v5 += v127;
        uint64_t v126 = (-1 << (8 * v127));
        unint64_t v128 = v45 & 3;
        v45 &= 0xFFFFFFFFFFFFFFFCLL;
        v43 -= 8 * v128;
      }
      if ((((_BYTE)v5 + (_BYTE)v45) & 3) != 0)
      {
        int v129 = 4 - (((_BYTE)v5 + (_BYTE)v45) & 3);
        v127 += v129;
        unsigned int v130 = 0xFFFFFFFF >> (8 * v129);
        if (v5 >= 4) {
          unsigned int v131 = v130;
        }
        else {
          unsigned int v131 = 0;
        }
        if (v5 >= 4) {
          unsigned int v130 = -1;
        }
        uint64_t v126 = v130 & v126;
      }
      else
      {
        unsigned int v131 = 0;
      }
      uint64_t v226 = v46 - v127;
      int v223 = v5 >> 2;
      unint64_t v220 = v47 - v127;
      do
      {
        uint64_t v201 = v126;
        unsigned int v202 = *(_DWORD *)v45 & v126;
        int v203 = v223;
        unsigned int v204 = v131;
        if (!v202) {
          goto LABEL_337;
        }
LABEL_319:
        if (v202 == -1)
        {
          *(void *)uint64_t v43 = v42;
          *(void *)(v43 + 8) = v42;
          *(void *)(v43 + 16) = v42;
          *(void *)(v43 + 24) = v42;
          goto LABEL_337;
        }
        while (1)
        {
          if ((_BYTE)v202)
          {
            if (v202 == 255) {
              *(void *)uint64_t v43 = v42;
            }
            else {
              rgba64_DplusDM((uint16x4_t *)v43, *(void *)(v41 + 8 * v202), *(void *)v43, (v202 | (v202 << 8)) ^ 0xFFFF);
            }
          }
          if (BYTE1(v202))
          {
            int v205 = (uint16x4_t *)(v43 + 8);
            if (BYTE1(v202) == 255) {
              *int v205 = (uint16x4_t)v42;
            }
            else {
              rgba64_DplusDM(v205, *(void *)(v41 + 8 * BYTE1(v202)), (unint64_t)*v205, (BYTE1(v202) | (BYTE1(v202) << 8)) ^ 0xFFFF);
            }
          }
          if (BYTE2(v202))
          {
            unint64_t v206 = (uint16x4_t *)(v43 + 16);
            if (BYTE2(v202) == 255) {
              *unint64_t v206 = (uint16x4_t)v42;
            }
            else {
              rgba64_DplusDM(v206, *(void *)(v41 + 8 * BYTE2(v202)), (unint64_t)*v206, (BYTE2(v202) | (BYTE2(v202) << 8)) ^ 0xFFFF);
            }
          }
          unint64_t v207 = (uint16x4_t *)(v43 + 24);
          unsigned int v208 = HIBYTE(v202);
          if (HIBYTE(v202) == 255)
          {
            *unint64_t v207 = (uint16x4_t)v42;
          }
          else if (v208)
          {
            rgba64_DplusDM(v207, *(void *)(v41 + 8 * v208), (unint64_t)*v207, (__PAIR64__(v208, v202) >> 24) ^ 0xFFFF);
          }
LABEL_337:
          while (1)
          {
            int v209 = v203;
            v43 += 32;
            --v203;
            v45 += 4;
            if (v209 < 2) {
              break;
            }
            unsigned int v202 = *(_DWORD *)v45;
            if (*(_DWORD *)v45) {
              goto LABEL_319;
            }
          }
          if (!v204) {
            break;
          }
          unsigned int v204 = 0;
          unsigned int v202 = *(_DWORD *)v45 & v131;
        }
        v45 += v226;
        v43 += 8 * v220;
        --v4;
        uint64_t v126 = v201;
      }
      while (v4);
      return;
    case 2:
      int v132 = -1;
      unsigned int v133 = v45 & 3;
      if ((v45 & 3) != 0)
      {
        v5 += v133;
        int v132 = -1 << (8 * v133);
        unint64_t v134 = v45 & 3;
        v45 &= 0xFFFFFFFFFFFFFFFCLL;
        v43 -= 8 * v134;
      }
      unint64_t v135 = v47;
      if ((((_BYTE)v5 + (_BYTE)v45) & 3) != 0)
      {
        int v136 = 4 - (((_BYTE)v5 + (_BYTE)v45) & 3);
        v133 += v136;
        unsigned int v137 = 0xFFFFFFFF >> (8 * v136);
        if (v5 >= 4) {
          unsigned int v138 = v137;
        }
        else {
          unsigned int v138 = 0;
        }
        if (v5 >= 4) {
          unsigned int v137 = -1;
        }
        v132 &= v137;
      }
      else
      {
        unsigned int v138 = 0;
      }
      uint64_t v224 = v46 - v133;
      int v221 = v5 >> 2;
      int v210 = (unsigned __int16)~HIWORD(v42);
      unint64_t v219 = v135 - v133;
      int v227 = v132;
      while (1)
      {
        unsigned int v211 = *(_DWORD *)v45 & v132;
        int v212 = v221;
        unsigned int v213 = v138;
        if (!v211) {
          goto LABEL_358;
        }
LABEL_347:
        if (v211 == -1) {
          break;
        }
        while (1)
        {
          if ((_BYTE)v211) {
            rgba64_DplusDM((uint16x4_t *)v43, *(void *)(v41 + 8 * v211), *(void *)v43, HIWORD(*(void *)(v41 + 8 * v211)) ^ 0xFFFF);
          }
          if ((v211 & 0xFF00) != 0) {
            rgba64_DplusDM((uint16x4_t *)(v43 + 8), *(void *)(v41 + 8 * BYTE1(v211)), *(void *)(v43 + 8), HIWORD(*(void *)(v41 + 8 * BYTE1(v211))) ^ 0xFFFF);
          }
          if ((v211 & 0xFF0000) != 0) {
            rgba64_DplusDM((uint16x4_t *)(v43 + 16), *(void *)(v41 + 8 * BYTE2(v211)), *(void *)(v43 + 16), HIWORD(*(void *)(v41 + 8 * BYTE2(v211))) ^ 0xFFFF);
          }
          if (HIBYTE(v211))
          {
            unint64_t v216 = *(void *)(v41 + 8 * HIBYTE(v211));
            int v214 = (uint16x4_t *)(v43 + 24);
            unint64_t v215 = *(void *)(v43 + 24);
            int v217 = HIWORD(v216) ^ 0xFFFF;
            goto LABEL_357;
          }
LABEL_358:
          while (1)
          {
            int v218 = v212;
            v43 += 32;
            --v212;
            v45 += 4;
            if (v218 < 2) {
              break;
            }
            unsigned int v211 = *(_DWORD *)v45;
            if (*(_DWORD *)v45) {
              goto LABEL_347;
            }
          }
          if (!v213) {
            break;
          }
          unsigned int v213 = 0;
          unsigned int v211 = *(_DWORD *)v45 & v138;
        }
        v45 += v224;
        v43 += 8 * v219;
        --v4;
        int v132 = v227;
        if (!v4) {
          return;
        }
      }
      rgba64_DplusDM((uint16x4_t *)v43, v42, *(void *)v43, v210);
      rgba64_DplusDM((uint16x4_t *)(v43 + 8), v42, *(void *)(v43 + 8), v210);
      rgba64_DplusDM((uint16x4_t *)(v43 + 16), v42, *(void *)(v43 + 16), v210);
      int v214 = (uint16x4_t *)(v43 + 24);
      unint64_t v215 = *(void *)(v43 + 24);
      unint64_t v216 = v42;
      int v217 = (unsigned __int16)~HIWORD(v42);
LABEL_357:
      rgba64_DplusDM(v214, v216, v215, v217);
      goto LABEL_358;
    case 3:
      do
      {
        int v139 = v5;
        do
        {
          int v140 = *(unsigned __int8 *)v45;
          if (*(unsigned char *)v45)
          {
            if (v140 == 255)
            {
              *(void *)uint64_t v43 = *(void *)(v41 + ((*(void *)v43 >> 53) & 0x7F8));
            }
            else
            {
              int v141 = v140 | (v140 << 8);
              unsigned int v142 = HIWORD(*(void *)v43) * v141 + 0x8000;
              rgba64_DplusDM((uint16x4_t *)v43, *(void *)(v41 + 8 * ((v142 + HIWORD(v142)) >> 24)), *(void *)v43, v141 ^ 0xFFFF);
            }
          }
          ++v45;
          v43 += 8;
          --v139;
        }
        while (v139);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 4:
      do
      {
        int v143 = v5;
        do
        {
          int v144 = *(unsigned __int8 *)v45;
          if (*(unsigned char *)v45)
          {
            if (v144 == 255)
            {
              *(void *)uint64_t v43 = *(void *)(v41 + ((~*(void *)v43 >> 53) & 0x7F8));
            }
            else
            {
              int v145 = v144 | (v144 << 8);
              unsigned int v146 = (HIWORD(*(void *)v43) ^ 0xFFFF) * v145 + 0x8000;
              rgba64_DplusDM((uint16x4_t *)v43, *(void *)(v41 + 8 * ((v146 + HIWORD(v146)) >> 24)), *(void *)v43, v145 ^ 0xFFFF);
            }
          }
          ++v45;
          v43 += 8;
          --v143;
        }
        while (v143);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 5:
      do
      {
        int v60 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v61 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            rgba64_DMplusDM((_DWORD *)v43, v61, HIWORD(*(void *)v43), *(void *)v43, HIWORD(v61) ^ 0xFFFF);
          }
          ++v45;
          v43 += 8;
          --v60;
        }
        while (v60);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 6:
      do
      {
        int v147 = v5;
        do
        {
          uint64_t v148 = *(unsigned __int8 *)v45;
          if (*(unsigned char *)v45)
          {
            uint64_t v149 = HIWORD(*(void *)v43);
            if ((_WORD)v149 != 0xFFFF)
            {
              if ((unsigned __int16)~(_WORD)v149 == 0xFFFF) {
                *(void *)uint64_t v43 = *(void *)(v41 + 8 * v148);
              }
              else {
                rgba64_DplusDM((uint16x4_t *)v43, *(void *)v43, *(void *)(v41 + 8 * v148), (unsigned __int16)~(_WORD)v149);
              }
            }
          }
          ++v45;
          v43 += 8;
          --v147;
        }
        while (v147);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 7:
      int32x2_t v150 = vdup_n_s32(HIWORD(v42) ^ 0xFFFF);
      do
      {
        int v151 = v5;
        do
        {
          int v152 = *(unsigned __int8 *)v45;
          if (*(unsigned char *)v45)
          {
            int32x2_t v153 = *(int32x2_t *)v43;
            v154.i32[0] = vshr_n_u32(*(uint32x2_t *)v43, 0x10uLL).u32[0];
            v154.i32[1] = (unsigned __int16)WORD2(*(void *)v43);
            if (v152 == 255)
            {
              v155.i32[0] = (unsigned __int16)*(void *)v43;
              v155.i32[1] = HIWORD(*(void *)v43);
              uint32x2_t v156 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v154, v150);
              uint32x2_t v157 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v155, v150);
              int32x2_t v158 = (int32x2_t)vshr_n_u32(vsra_n_u32(v156, v156, 0x10uLL), 0x10uLL);
              int32x2_t v159 = (int32x2_t)vshr_n_u32(vsra_n_u32(v157, v157, 0x10uLL), 0x10uLL);
              v154.i32[1] = HIDWORD(*(void *)v43);
              int32x2_t v160 = vsub_s32(v154, v158);
            }
            else
            {
              int32x2_t v161 = vdup_n_s32((unsigned __int16)((v152 | ((_WORD)v152 << 8))
                                                 - (((v152 | (v152 << 8)) * HIWORD(v42)
                                                   + 0x8000
                                                   + (((v152 | (v152 << 8)) * HIWORD(v42) + 0x8000) >> 16)) >> 16)));
              v162.i32[0] = (unsigned __int16)*(void *)v43;
              v162.i32[1] = HIWORD(*(void *)v43);
              uint32x2_t v163 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v154, v161);
              uint32x2_t v164 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v162, v161);
              int32x2_t v159 = (int32x2_t)vshr_n_u32(vsra_n_u32(v164, v164, 0x10uLL), 0x10uLL);
              v154.i32[1] = HIDWORD(*(void *)v43);
              int32x2_t v160 = vsub_s32(v154, (int32x2_t)vshr_n_u32(vsra_n_u32(v163, v163, 0x10uLL), 0x10uLL));
            }
            v153.i32[1] = HIWORD(*(void *)v43);
            int8x8_t v165 = (int8x8_t)vsub_s32(v153, v159);
            v166.i32[0] = v165.u16[0];
            v166.i32[1] = vshl_n_s32(*(int32x2_t *)&v165, 0x10uLL).i32[1];
            v165.i32[0] = vshl_n_s32(v160, 0x10uLL).u32[0];
            v165.i32[1] = v160.u16[2];
            *(int8x8_t *)uint64_t v43 = vorr_s8(v165, v166);
          }
          ++v45;
          v43 += 8;
          --v151;
        }
        while (v151);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 8:
      int32x2_t v167 = vdup_n_s32(HIWORD(v42));
      do
      {
        int v168 = v5;
        do
        {
          int v169 = *(unsigned __int8 *)v45;
          if (*(unsigned char *)v45)
          {
            int32x2_t v170 = *(int32x2_t *)v43;
            v171.i32[0] = vshr_n_u32(*(uint32x2_t *)v43, 0x10uLL).u32[0];
            v171.i32[1] = (unsigned __int16)WORD2(*(void *)v43);
            if (v169 == 255)
            {
              v172.i32[0] = (unsigned __int16)*(void *)v43;
              v172.i32[1] = HIWORD(*(void *)v43);
              uint32x2_t v173 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v171, v167);
              uint32x2_t v174 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v172, v167);
              int32x2_t v175 = (int32x2_t)vshr_n_u32(vsra_n_u32(v173, v173, 0x10uLL), 0x10uLL);
              int32x2_t v176 = (int32x2_t)vshr_n_u32(vsra_n_u32(v174, v174, 0x10uLL), 0x10uLL);
              v171.i32[1] = HIDWORD(*(void *)v43);
              int32x2_t v177 = vsub_s32(v171, v175);
            }
            else
            {
              int32x2_t v178 = vdup_n_s32((257 * HIWORD(v42) * v169
                               + 0x8000
                               + ((257 * HIWORD(v42) * v169 + 0x8000) >> 16)) >> 16);
              v179.i32[0] = (unsigned __int16)*(void *)v43;
              v179.i32[1] = HIWORD(*(void *)v43);
              uint32x2_t v180 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v171, v178);
              uint32x2_t v181 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v179, v178);
              int32x2_t v176 = (int32x2_t)vshr_n_u32(vsra_n_u32(v181, v181, 0x10uLL), 0x10uLL);
              v171.i32[1] = HIDWORD(*(void *)v43);
              int32x2_t v177 = vsub_s32(v171, (int32x2_t)vshr_n_u32(vsra_n_u32(v180, v180, 0x10uLL), 0x10uLL));
            }
            v170.i32[1] = HIWORD(*(void *)v43);
            int8x8_t v182 = (int8x8_t)vsub_s32(v170, v176);
            v183.i32[0] = v182.u16[0];
            v183.i32[1] = vshl_n_s32(*(int32x2_t *)&v182, 0x10uLL).i32[1];
            v182.i32[0] = vshl_n_s32(v177, 0x10uLL).u32[0];
            v182.i32[1] = v177.u16[2];
            *(int8x8_t *)uint64_t v43 = vorr_s8(v182, v183);
          }
          ++v45;
          v43 += 8;
          --v168;
        }
        while (v168);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 9:
      do
      {
        int v62 = v5;
        do
        {
          if (*(unsigned char *)v45) {
            rgba64_DMplusDM((_DWORD *)v43, *(void *)(v41 + 8 * *(unsigned __int8 *)v45), HIWORD(*(void *)v43) ^ 0xFFFF, *(void *)v43, (unsigned __int16)(HIWORD(*(void *)(v41 + 8 * *(unsigned __int8 *)v45))+ ~(*(unsigned __int8 *)v45 | (*(unsigned __int8 *)v45 << 8))));
          }
          ++v45;
          v43 += 8;
          --v62;
        }
        while (v62);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 10:
      do
      {
        int v63 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v64 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            rgba64_DMplusDM((_DWORD *)v43, v64, HIWORD(*(void *)v43) ^ 0xFFFF, *(void *)v43, HIWORD(v64) ^ 0xFFFF);
          }
          ++v45;
          v43 += 8;
          --v63;
        }
        while (v63);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 11:
      v184.i64[0] = 0xFFFFLL;
      v184.i64[1] = 0xFFFFLL;
      do
      {
        int v185 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v186 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            unint64_t v187 = HIWORD(*(void *)v43);
            unint64_t v188 = HIWORD(v186);
            uint64_t v189 = *(void *)v43 >> 16;
            if (!v6) {
              unint64_t v187 = 0xFFFFLL;
            }
            BOOL v190 = v187 >= (unsigned __int16)v189;
            unint64_t v191 = v187 - (unsigned __int16)v189;
            if (!v190) {
              unint64_t v191 = 0;
            }
            unint64_t v192 = v188 - WORD1(v186);
            if (v188 < WORD1(v186)) {
              unint64_t v192 = 0;
            }
            unint64_t v193 = v192 + v191;
            unint64_t v194 = v187 + HIWORD(v186);
            if (v193 >= 0xFFFF) {
              unint64_t v193 = 0xFFFFLL;
            }
            if (v194 >= 0xFFFF) {
              unint64_t v194 = 0xFFFFLL;
            }
            BOOL v190 = v194 >= v193;
            unint64_t v195 = v194 - v193;
            if (!v190) {
              unint64_t v195 = 0;
            }
            v196.i64[0] = *(void *)v43;
            v196.i64[1] = HIDWORD(*(void *)v43);
            v197.i64[0] = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            v197.i64[1] = HIDWORD(v186);
            int8x16_t v198 = (int8x16_t)vaddq_s64((int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v188), (uint64x2_t)vandq_s8(v197, v184)), (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v187), (uint64x2_t)vandq_s8(v196, v184)));
            int64x2_t v199 = vdupq_n_s64(v194);
            int64x2_t v200 = (int64x2_t)vqsubq_u64((uint64x2_t)v199, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v184, (uint64x2_t)v198), v198, v184));
            v199.i64[0] = v195;
            *(int8x8_t *)uint64_t v43 = vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v199), 0x10uLL), (int8x8_t)vmovn_s64(v200));
          }
          ++v45;
          v43 += 8;
          --v185;
        }
        while (v185);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 12:
      do
      {
        int v65 = v5;
        do
        {
          if (*(unsigned char *)v45) {
            rgba64_DpluslD((_DWORD *)v43, *(void *)v43, *(void *)(v41 + 8 * *(unsigned __int8 *)v45));
          }
          ++v45;
          v43 += 8;
          --v65;
        }
        while (v65);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 13:
      while (1)
      {
        int v66 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v67 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v67))
            {
              unint64_t v68 = *(void *)v43;
              if (v6)
              {
                unint64_t v69 = HIWORD(v68);
                if (!HIWORD(v68)) {
                  goto LABEL_62;
                }
              }
              else
              {
                LODWORD(v69) = 0xFFFF;
              }
              unint64_t v67 = PDAmultiplyPDA_14785(v68, v69, v67, HIWORD(v67));
LABEL_62:
              *(void *)uint64_t v43 = v67;
            }
          }
          ++v45;
          v43 += 8;
          --v66;
        }
        while (v66);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 14:
      while (1)
      {
        int v70 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v71 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v71))
            {
              unint64_t v72 = *(void *)v43;
              if (v6)
              {
                unint64_t v73 = HIWORD(v72);
                if (!HIWORD(v72)) {
                  goto LABEL_74;
                }
              }
              else
              {
                LODWORD(v73) = 0xFFFF;
              }
              unint64_t v71 = PDAscreenPDA_14786(v72, v73, v71, HIWORD(v71));
LABEL_74:
              *(void *)uint64_t v43 = v71;
            }
          }
          ++v45;
          v43 += 8;
          --v70;
        }
        while (v70);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 15:
      while (1)
      {
        int v74 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v75 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v75))
            {
              unint64_t v76 = *(void *)v43;
              if (v6)
              {
                unint64_t v77 = HIWORD(v76);
                if (!HIWORD(v76)) {
                  goto LABEL_86;
                }
              }
              else
              {
                LODWORD(v77) = 0xFFFF;
              }
              unint64_t v75 = PDAoverlayPDA_14787(v76, v77, v75, HIWORD(v75));
LABEL_86:
              *(void *)uint64_t v43 = v75;
            }
          }
          ++v45;
          v43 += 8;
          --v74;
        }
        while (v74);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 16:
      while (1)
      {
        int v78 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v79 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v79))
            {
              unint64_t v80 = *(void *)v43;
              if (v6)
              {
                unint64_t v81 = HIWORD(v80);
                if (!HIWORD(v80)) {
                  goto LABEL_98;
                }
              }
              else
              {
                LODWORD(v81) = 0xFFFF;
              }
              unint64_t v79 = PDAdarkenPDA_14789(v80, v81, v79, HIWORD(v79));
LABEL_98:
              *(void *)uint64_t v43 = v79;
            }
          }
          ++v45;
          v43 += 8;
          --v78;
        }
        while (v78);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 17:
      while (1)
      {
        int v82 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v83 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v83))
            {
              unint64_t v84 = *(void *)v43;
              if (v6)
              {
                unint64_t v85 = HIWORD(v84);
                if (!HIWORD(v84)) {
                  goto LABEL_110;
                }
              }
              else
              {
                LODWORD(v85) = 0xFFFF;
              }
              unint64_t v83 = PDAlightenPDA_14788(v84, v85, v83, HIWORD(v83));
LABEL_110:
              *(void *)uint64_t v43 = v83;
            }
          }
          ++v45;
          v43 += 8;
          --v82;
        }
        while (v82);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 18:
      while (1)
      {
        int v86 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v87 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v87))
            {
              unint64_t v88 = *(void *)v43;
              if (v6)
              {
                unint64_t v89 = HIWORD(v88);
                if (!HIWORD(v88)) {
                  goto LABEL_122;
                }
              }
              else
              {
                LODWORD(v89) = 0xFFFF;
              }
              unint64_t v87 = PDAcolordodgePDA_14790(v88, v89, v87, HIWORD(v87));
LABEL_122:
              *(void *)uint64_t v43 = v87;
            }
          }
          ++v45;
          v43 += 8;
          --v86;
        }
        while (v86);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 19:
      while (1)
      {
        int v90 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v91 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v91))
            {
              unint64_t v92 = *(void *)v43;
              if (v6)
              {
                unint64_t v93 = HIWORD(v92);
                if (!HIWORD(v92)) {
                  goto LABEL_134;
                }
              }
              else
              {
                LODWORD(v93) = 0xFFFF;
              }
              unint64_t v91 = PDAcolorburnPDA_14791(v92, v93, v91, HIWORD(v91));
LABEL_134:
              *(void *)uint64_t v43 = v91;
            }
          }
          ++v45;
          v43 += 8;
          --v90;
        }
        while (v90);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 20:
      while (1)
      {
        int v94 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v95 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v95))
            {
              unint64_t v96 = *(void *)v43;
              if (v6)
              {
                unint64_t v97 = HIWORD(v96);
                if (!HIWORD(v96)) {
                  goto LABEL_146;
                }
              }
              else
              {
                LODWORD(v97) = 0xFFFF;
              }
              unint64_t v95 = PDAsoftlightPDA_14793(v96, v97, v95, HIWORD(v95));
LABEL_146:
              *(void *)uint64_t v43 = v95;
            }
          }
          ++v45;
          v43 += 8;
          --v94;
        }
        while (v94);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 21:
      while (1)
      {
        int v98 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v99 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v99))
            {
              unint64_t v100 = *(void *)v43;
              if (v6)
              {
                unint64_t v101 = HIWORD(v100);
                if (!HIWORD(v100)) {
                  goto LABEL_158;
                }
              }
              else
              {
                LODWORD(v101) = 0xFFFF;
              }
              unint64_t v99 = PDAhardlightPDA_14792(v100, v101, v99, HIWORD(v99));
LABEL_158:
              *(void *)uint64_t v43 = v99;
            }
          }
          ++v45;
          v43 += 8;
          --v98;
        }
        while (v98);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 22:
      while (1)
      {
        int v102 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v103 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v103))
            {
              unint64_t v104 = *(void *)v43;
              if (v6)
              {
                unint64_t v105 = HIWORD(v104);
                if (!HIWORD(v104)) {
                  goto LABEL_170;
                }
              }
              else
              {
                LODWORD(v105) = 0xFFFF;
              }
              unint64_t v103 = PDAdifferencePDA_14794(v104, v105, v103, HIWORD(v103));
LABEL_170:
              *(void *)uint64_t v43 = v103;
            }
          }
          ++v45;
          v43 += 8;
          --v102;
        }
        while (v102);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 23:
      while (1)
      {
        int v106 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v107 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v107))
            {
              unint64_t v108 = *(void *)v43;
              if (v6)
              {
                unint64_t v109 = HIWORD(v108);
                if (!HIWORD(v108)) {
                  goto LABEL_182;
                }
              }
              else
              {
                LODWORD(v109) = 0xFFFF;
              }
              unint64_t v107 = PDAexclusionPDA_14795(v108, v109, v107, HIWORD(v107));
LABEL_182:
              *(void *)uint64_t v43 = v107;
            }
          }
          ++v45;
          v43 += 8;
          --v106;
        }
        while (v106);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 24:
      while (1)
      {
        int v110 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v111 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v111))
            {
              unint64_t v112 = *(void *)v43;
              if (v6)
              {
                unint64_t v113 = HIWORD(v112);
                if (!HIWORD(v112)) {
                  goto LABEL_194;
                }
              }
              else
              {
                LODWORD(v113) = 0xFFFF;
              }
              unint64_t v111 = PDAhuePDA_14796(v112, v113, v111, HIWORD(v111));
LABEL_194:
              *(void *)uint64_t v43 = v111;
            }
          }
          ++v45;
          v43 += 8;
          --v110;
        }
        while (v110);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 25:
      while (1)
      {
        int v114 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v115 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v115))
            {
              unint64_t v116 = *(void *)v43;
              if (v6)
              {
                unint64_t v117 = HIWORD(v116);
                if (!HIWORD(v116)) {
                  goto LABEL_206;
                }
              }
              else
              {
                LODWORD(v117) = 0xFFFF;
              }
              unint64_t v115 = PDAsaturationPDA_14797(v116, v117, v115, HIWORD(v115));
LABEL_206:
              *(void *)uint64_t v43 = v115;
            }
          }
          ++v45;
          v43 += 8;
          --v114;
        }
        while (v114);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 26:
      while (1)
      {
        int v118 = v5;
        do
        {
          if (*(unsigned char *)v45)
          {
            unint64_t v119 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v119))
            {
              unint64_t v120 = *(void *)v43;
              if (v6)
              {
                unint64_t v121 = HIWORD(v120);
                if (!HIWORD(v120)) {
                  goto LABEL_218;
                }
              }
              else
              {
                LODWORD(v121) = 0xFFFF;
              }
              unint64_t v119 = PDAluminosityPDA_14798(v119, HIWORD(v119), v120, v121);
LABEL_218:
              *(void *)uint64_t v43 = v119;
            }
          }
          ++v45;
          v43 += 8;
          --v118;
        }
        while (v118);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4) {
          return;
        }
      }
    case 27:
      goto LABEL_222;
    default:
      return;
  }
  do
  {
LABEL_222:
    int v122 = v5;
    do
    {
      if (*(unsigned char *)v45)
      {
        unint64_t v123 = *(void *)(v41 + 8 * *(unsigned __int8 *)v45);
        if (HIWORD(v123))
        {
          unint64_t v124 = *(void *)v43;
          if (v6)
          {
            unint64_t v125 = HIWORD(v124);
            if (!HIWORD(v124)) {
              goto LABEL_230;
            }
          }
          else
          {
            LODWORD(v125) = 0xFFFF;
          }
          unint64_t v123 = PDAluminosityPDA_14798(v124, v125, v123, HIWORD(v123));
LABEL_230:
          *(void *)uint64_t v43 = v123;
        }
      }
      ++v45;
      v43 += 8;
      --v122;
    }
    while (v122);
    v45 += v46;
    v43 += 8 * v47;
    --v4;
  }
  while (v4);
}

uint64_t rgba16_template_image_mask_method(uint64_t result, int *a2, unsigned int a3)
{
  if ((result & 0x30) == 0x20)
  {
    if ((a3 & 0x80000000) != 0) {
      return result;
    }
    int v3 = a3 > 0x17
       ? VEC::template_mark_pixelmask_row<(CGCompositeOperation)0,_rgba16_t>
       : (uint64_t *(*)(uint64_t *, uint16x4_t **, unint64_t *, char **, int, int, double, double, int8x8_t, double, double, double, uint32x4_t, uint64_t, uint64_t, uint64_t, unint64_t))VEC::MethodList<_rgba16_t>::maskMethods[a3];
    unint64_t v67 = v3;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = *((void *)a2 + 17);
    int v7 = *a2;
    int64_t v8 = a2[1];
    uint16x4_t result = a2[3];
    uint64_t v9 = a2[2];
    unint64_t v10 = (unint64_t)a2[7] >> 3;
    unint64_t v11 = *((void *)a2 + 5) + 8 * (result + v10 * a2[4]);
    uint64_t v71 = v5;
    unint64_t v72 = v11;
    if (!v6) {
      return result;
    }
    uint64_t v12 = a2[31];
    uint64_t v13 = v6 + a2[26] + a2[27] * (uint64_t)(int)v12;
    uint64_t v69 = v13;
    uint64_t v14 = a2[14];
    uint64_t v15 = a2[15];
    int v16 = v7 & 0xFF00;
    unint64_t v17 = a2[19];
    if (v16 != 256)
    {
      unint64_t v18 = a2[16];
      uint64_t v39 = a2[17];
      unint64_t v40 = v17 >> 3;
      unint64_t v41 = v5 + 8 * (v17 >> 3) * v39;
      uint64_t v70 = v5;
      uint64_t v21 = 1;
      uint64_t v19 = v5;
      uint64_t v42 = v5;
      goto LABEL_33;
    }
    unint64_t v18 = v17 >> 3;
    uint64_t v19 = v5 + 8 * (v14 + (v17 >> 3) * v15);
    uint64_t v70 = -1;
    uint64_t v71 = v19;
    if (v18 != v10)
    {
      uint64_t v21 = 1;
LABEL_32:
      LODWORD(v39) = 0;
      uint64_t v42 = 0;
      unint64_t v41 = 0;
      unint64_t v40 = v18;
LABEL_33:
      if (v41)
      {
        uint64_t v47 = v19 + 8 * v40 * ((int)v15 % (int)v39);
        uint64_t v70 = v47 + 8 * (int)v18;
        uint64_t v71 = v47 + 8 * ((int)v14 % (int)v18);
        uint64_t v42 = v71;
      }
      else
      {
        v40 -= (int)v8 * (uint64_t)(int)v21;
      }
      uint64_t v48 = v12 - (int)v8 * (uint64_t)(int)v21;
      unint64_t v49 = v10 - (int)v8 * (uint64_t)(int)v21;
      uint64_t v65 = -(uint64_t)(v40 * (int)v39);
      int v50 = v9 + 1;
      do
      {
        unint64_t v51 = v18;
        uint64_t v52 = v21;
        uint16x4_t result = ((uint64_t (*)(uint64_t *, unint64_t *, uint64_t *, uint64_t *))v67)(&v71, &v72, &v70, &v69);
        v69 += v48;
        v72 += 8 * v49;
        if (v41)
        {
          unint64_t v53 = v42 + 8 * v40;
          uint64_t v54 = v65;
          if (v53 < v41) {
            uint64_t v54 = 0;
          }
          uint64_t v55 = v53 + 8 * v54;
          v70 += 8 * v54 + 8 * v40;
          uint64_t v42 = v55;
        }
        else
        {
          uint64_t v55 = v71 + 8 * v40;
        }
        uint64_t v21 = v52;
        unint64_t v18 = v51;
        uint64_t v71 = v55;
        --v50;
      }
      while (v50 > 1);
      return result;
    }
    if ((uint64_t)(v11 - v19) >= 1)
    {
      if (v8 >= (uint64_t)((v11 - v19) >> 3))
      {
        v19 += 8 * (v8 - 1);
        uint64_t v71 = v19;
        unint64_t v72 = v11 + 8 * (v8 - 1);
        uint64_t v69 = v13 + v8 - 1;
        uint64_t v21 = 0xFFFFFFFFLL;
        goto LABEL_31;
      }
      uint64_t v20 = v10 * (v9 - 1);
      if (v11 <= v19 + 8 * v20 + 8 * ((int)v8 - 1))
      {
        uint64_t v71 = v19 + 8 * v20;
        unint64_t v72 = v11 + 8 * v20;
        unint64_t v10 = -(uint64_t)v10;
        uint64_t v69 = v13 + v12 * (v9 - 1);
        uint64_t v12 = -v12;
        uint64_t v21 = 1;
        uint64_t v19 = v71;
        goto LABEL_31;
      }
    }
    uint64_t v21 = 1;
LABEL_31:
    unint64_t v18 = v10;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0) {
    return result;
  }
  int v4 = a3 > 0x17
     ? VEC::template_mark_pixelmask_row<(CGCompositeOperation)0,_RGBA16_t>
     : (uint64_t *(*)(uint64_t *, int8x16_t **, unint64_t *, char **, int, int, double, double, int8x8_t, double, double, double, uint32x4_t, uint64_t, uint64_t, uint64_t, unint64_t))VEC::MethodList<_RGBA16_t>::maskMethods[a3];
  unint64_t v68 = v4;
  uint64_t v22 = *((void *)a2 + 11);
  uint64_t v23 = *((void *)a2 + 17);
  int v24 = *a2;
  int64_t v25 = a2[1];
  uint16x4_t result = a2[3];
  uint64_t v26 = a2[2];
  unint64_t v27 = (unint64_t)a2[7] >> 3;
  unint64_t v28 = *((void *)a2 + 5) + 8 * (result + v27 * a2[4]);
  uint64_t v71 = v22;
  unint64_t v72 = v28;
  if (!v23) {
    return result;
  }
  uint64_t v29 = a2[31];
  uint64_t v30 = v23 + a2[26] + a2[27] * (uint64_t)(int)v29;
  uint64_t v69 = v30;
  uint64_t v31 = a2[14];
  uint64_t v32 = a2[15];
  int v33 = v24 & 0xFF00;
  unint64_t v34 = a2[19];
  if (v33 != 256)
  {
    unint64_t v35 = a2[16];
    uint64_t v43 = a2[17];
    unint64_t v44 = v34 >> 3;
    unint64_t v45 = v22 + 8 * (v34 >> 3) * v43;
    uint64_t v70 = v22;
    uint64_t v38 = 1;
    uint64_t v36 = v22;
    uint64_t v46 = v22;
    goto LABEL_47;
  }
  unint64_t v35 = v34 >> 3;
  uint64_t v36 = v22 + 8 * (v31 + (v34 >> 3) * v32);
  uint64_t v70 = -1;
  uint64_t v71 = v36;
  if (v35 == v27)
  {
    if ((uint64_t)(v28 - v36) >= 1)
    {
      if (v25 >= (uint64_t)((v28 - v36) >> 3))
      {
        v36 += 8 * (v25 - 1);
        uint64_t v71 = v36;
        unint64_t v72 = v28 + 8 * (v25 - 1);
        uint64_t v69 = v30 + v25 - 1;
        uint64_t v38 = 0xFFFFFFFFLL;
        goto LABEL_45;
      }
      uint64_t v37 = v27 * (v26 - 1);
      if (v28 <= v36 + 8 * v37 + 8 * ((int)v25 - 1))
      {
        uint64_t v71 = v36 + 8 * v37;
        unint64_t v72 = v28 + 8 * v37;
        unint64_t v27 = -(uint64_t)v27;
        uint64_t v69 = v30 + v29 * (v26 - 1);
        uint64_t v29 = -v29;
        uint64_t v38 = 1;
        uint64_t v36 = v71;
        goto LABEL_45;
      }
    }
    uint64_t v38 = 1;
LABEL_45:
    unint64_t v35 = v27;
    goto LABEL_46;
  }
  uint64_t v38 = 1;
LABEL_46:
  LODWORD(v43) = 0;
  uint64_t v46 = 0;
  unint64_t v45 = 0;
  unint64_t v44 = v35;
LABEL_47:
  if (v45)
  {
    uint64_t v56 = v36 + 8 * v44 * ((int)v32 % (int)v43);
    uint64_t v70 = v56 + 8 * (int)v35;
    uint64_t v71 = v56 + 8 * ((int)v31 % (int)v35);
    uint64_t v46 = v71;
  }
  else
  {
    v44 -= (int)v25 * (uint64_t)(int)v38;
  }
  uint64_t v57 = v29 - (int)v25 * (uint64_t)(int)v38;
  unint64_t v58 = v27 - (int)v25 * (uint64_t)(int)v38;
  uint64_t v66 = -(uint64_t)(v44 * (int)v43);
  int v59 = v26 + 1;
  do
  {
    unint64_t v60 = v35;
    uint64_t v61 = v38;
    uint16x4_t result = ((uint64_t (*)(uint64_t *, unint64_t *, uint64_t *, uint64_t *))v68)(&v71, &v72, &v70, &v69);
    v69 += v57;
    v72 += 8 * v58;
    if (v45)
    {
      unint64_t v62 = v46 + 8 * v44;
      uint64_t v63 = v66;
      if (v62 < v45) {
        uint64_t v63 = 0;
      }
      uint64_t v64 = v62 + 8 * v63;
      v70 += 8 * v63 + 8 * v44;
      uint64_t v46 = v64;
    }
    else
    {
      uint64_t v64 = v71 + 8 * v44;
    }
    uint64_t v38 = v61;
    unint64_t v35 = v60;
    uint64_t v71 = v64;
    --v59;
  }
  while (v59 > 1);
  return result;
}

void rgba64_mark_pixelmask(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    int v572 = *(_DWORD *)(a1 + 4);
    uint64_t v3 = v572;
    int v574 = *(_DWORD *)(a1 + 8);
    uint64_t v575 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 88);
    uint64_t v5 = *(void *)(a1 + 96);
    unint64_t v6 = (unint64_t)*(int *)(a1 + 28) >> 3;
    int v7 = (uint32x2_t *)(*(void *)(a1 + 40) + 8 * (*(int *)(a1 + 12) + v6 * *(int *)(a1 + 16)));
    uint64_t v8 = *(int *)(a1 + 124);
    uint64_t v9 = (unsigned char *)(v2 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v8);
    uint64_t v10 = *(int *)(a1 + 56);
    uint64_t v11 = *(int *)(a1 + 60);
    unint64_t v12 = *(int *)(a1 + 76);
    if (*(unsigned __int8 *)(a1 + 1) << 8 != 256)
    {
      int v18 = *(_DWORD *)(a1 + 64);
      int v17 = *(_DWORD *)(a1 + 68);
      uint64_t v13 = v12 >> 3;
      BOOL v19 = v5 != 0;
      uint64_t v571 = v8 - v572;
      unint64_t v570 = v6 - v572;
      if (v4)
      {
        int v568 = 0;
        unint64_t v567 = v4 + 8 * v13 * v17;
        uint64_t v569 = v13;
        uint64_t v20 = v4 + 8 * v13 * ((int)v11 % v17);
        uint64_t v14 = (uint32x2_t *)(v20 + 8 * ((int)v10 % v18));
        unint64_t v21 = v20 + 8 * v18;
        int v16 = 1;
        int v573 = v14;
LABEL_16:
        switch(a2)
        {
          case 0:
            uint64_t v22 = v16;
            uint64_t v23 = 8 * v16;
            do
            {
              int v24 = v572;
              int v25 = v574;
              do
              {
                int v26 = *v9;
                if (*v9)
                {
                  if (v26 == 255)
                  {
                    *int v7 = 0;
                  }
                  else
                  {
                    int32x2_t v27 = (int32x2_t)*v7;
                    v28.i32[0] = vshl_u32(*v7, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                    v29.i32[0] = v28.i32[0];
                    v29.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v7);
                    int32x2_t v30 = vdup_n_s32(v26 | (v26 << 8));
                    v31.i32[0] = v7->u16[0];
                    v31.i32[1] = HIWORD(*(unint64_t *)v7);
                    uint32x2_t v32 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v30);
                    uint32x2_t v33 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v31, v30);
                    v28.i32[1] = HIDWORD(*(unint64_t *)v7);
                    uint32x2_t v34 = (uint32x2_t)vsub_s32(v28, (int32x2_t)vshr_n_u32(vsra_n_u32(v32, v32, 0x10uLL), 0x10uLL));
                    v27.i32[1] = v31.i32[1];
                    int8x8_t v35 = (int8x8_t)vsub_s32(v27, (int32x2_t)vshr_n_u32(vsra_n_u32(v33, v33, 0x10uLL), 0x10uLL));
                    int8x8_t v36 = (int8x8_t)vshl_n_s32((int32x2_t)v35, 0x10uLL);
                    v35.i16[1] = 0;
                    v35.i32[1] = v36.i32[1];
                    v36.i32[0] = vshl_u32(v34, (uint32x2_t)0xFFFF00000010).u32[0];
                    v36.i32[1] = v34.u16[2];
                    *int v7 = (uint32x2_t)vorr_s8(v36, v35);
                  }
                }
                v9 += v22;
                int v7 = (uint32x2_t *)((char *)v7 + v23);
                --v24;
              }
              while (v24);
              v9 += v571;
              v7 += v570;
              --v574;
            }
            while (v25 != 1);
            return;
          case 1:
            if (v575) {
              char v37 = v19;
            }
            else {
              char v37 = 1;
            }
            uint64_t v38 = v16;
            uint64_t v39 = -(uint64_t)v18;
            uint64_t v40 = -(v569 * v17);
            uint64_t v41 = 8 * v16;
            if (v37)
            {
              do
              {
                int v42 = v572;
                do
                {
                  int v43 = *v9;
                  if (*v9)
                  {
                    if (v43 == 255) {
                      *int v7 = *v14;
                    }
                    else {
                      rgba64_DMplusDM(v7, (unint64_t)*v14, v43 | (v43 << 8), (unint64_t)*v7, (v43 | (v43 << 8)) ^ 0xFFFF);
                    }
                  }
                  v9 += v38;
                  unint64_t v44 = (unint64_t)&v14[v38];
                  if (v44 >= v21) {
                    uint64_t v45 = v39;
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  uint64_t v14 = (uint32x2_t *)(v44 + 8 * v45);
                  int v7 = (uint32x2_t *)((char *)v7 + v41);
                  --v42;
                }
                while (v42);
                v9 += v571;
                v7 += v570;
                uint64_t v46 = v573;
                uint64_t v47 = &v573[v569];
                if ((unint64_t)v47 >= v567) {
                  uint64_t v48 = v40;
                }
                else {
                  uint64_t v48 = 0;
                }
                unint64_t v49 = &v47[v48];
                uint64_t v50 = v21 + 8 * v48 + 8 * v569;
                if (v568)
                {
                  v14 += v569;
                }
                else
                {
                  unint64_t v21 = v50;
                  uint64_t v46 = v49;
                  uint64_t v14 = v49;
                }
                BOOL v51 = v574 == 1;
                int v573 = v46;
                --v574;
              }
              while (!v51);
            }
            else
            {
              do
              {
                int v52 = v572;
                do
                {
                  int v53 = *v9;
                  if (*v9)
                  {
                    if (v53 == 255) {
                      *int v7 = (uint32x2_t)(*(void *)v14 | 0xFFFF000000000000);
                    }
                    else {
                      rgba64_DMplusDAM(v7, (unint64_t)*v7, (v53 | (v53 << 8)) ^ 0xFFFF, (uint64_t)*v14, 0xFFFFu, v53 | (v53 << 8));
                    }
                  }
                  v9 += v38;
                  unint64_t v54 = (unint64_t)&v14[v38];
                  if (v54 >= v21) {
                    uint64_t v55 = v39;
                  }
                  else {
                    uint64_t v55 = 0;
                  }
                  uint64_t v14 = (uint32x2_t *)(v54 + 8 * v55);
                  int v7 = (uint32x2_t *)((char *)v7 + v41);
                  --v52;
                }
                while (v52);
                v9 += v571;
                v7 += v570;
                uint64_t v56 = v573;
                uint64_t v57 = &v573[v569];
                if ((unint64_t)v57 >= v567) {
                  uint64_t v58 = v40;
                }
                else {
                  uint64_t v58 = 0;
                }
                int v59 = &v57[v58];
                uint64_t v60 = v21 + 8 * v58 + 8 * v569;
                if (v568)
                {
                  v14 += v569;
                }
                else
                {
                  unint64_t v21 = v60;
                  uint64_t v56 = v59;
                  uint64_t v14 = v59;
                }
                BOOL v51 = v574 == 1;
                int v573 = v56;
                --v574;
              }
              while (!v51);
            }
            return;
          case 2:
            uint64_t v61 = v16;
            uint64_t v62 = -(uint64_t)v18;
            uint64_t v63 = -(v569 * v17);
            uint64_t v64 = 8 * v16;
            while (1)
            {
              int v65 = v572;
              do
              {
                int v66 = *v9;
                if (!*v9) {
                  goto LABEL_78;
                }
                if (v66 == 255)
                {
                  uint64_t v67 = (uint64_t)*v14;
                  unint64_t v68 = HIWORD(*(unint64_t *)v14);
                  if (!v68) {
                    goto LABEL_78;
                  }
                  if (v68 == 0xFFFF)
                  {
                    *int v7 = (uint32x2_t)v67;
                    goto LABEL_78;
                  }
                  unint64_t v72 = (unint64_t)*v7;
                  int v73 = v68 ^ 0xFFFF;
                }
                else
                {
                  unint64_t v70 = HIWORD(*(unint64_t *)v14);
                  int v71 = (v66 | (v66 << 8)) ^ 0xFFFF;
                  if ((_WORD)v70 == (v71 * v70 + 0x8000 + ((v71 * v70 + 0x8000) >> 16)) >> 16) {
                    goto LABEL_78;
                  }
                  unint64_t v69 = (unint64_t)*v14;
                  uint64_t v67 = ((unint64_t)(v70
                                          - ((v71 * v70 + 0x8000 + ((v71 * v70 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v69) - ((WORD2(v69) * v71 + 0x8000 + ((WORD2(v69) * v71 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v69 - (((unsigned __int16)v69 * v71 + 0x8000 + (((unsigned __int16)v69 * v71 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v69) - ((WORD1(v69) * v71 + 0x8000 + ((WORD1(v69) * v71 + 0x8000) >> 16)) >> 16)) << 16);
                  unint64_t v72 = (unint64_t)*v7;
                  int v73 = (unsigned __int16)~(v70
                                          - ((v71 * v70 + 0x8000 + ((v71 * v70 + 0x8000) >> 16)) >> 16));
                }
                rgba64_DplusDM((uint16x4_t *)v7, v67, v72, v73);
LABEL_78:
                v9 += v61;
                unint64_t v74 = (unint64_t)&v14[v61];
                if (v74 >= v21) {
                  uint64_t v75 = v62;
                }
                else {
                  uint64_t v75 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v74 + 8 * v75);
                int v7 = (uint32x2_t *)((char *)v7 + v64);
                --v65;
              }
              while (v65);
              v9 += v571;
              v7 += v570;
              unint64_t v76 = v573;
              unint64_t v77 = &v573[v569];
              if ((unint64_t)v77 >= v567) {
                uint64_t v78 = v63;
              }
              else {
                uint64_t v78 = 0;
              }
              unint64_t v79 = &v77[v78];
              uint64_t v80 = v21 + 8 * v78 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v80;
                unint64_t v76 = v79;
                uint64_t v14 = v79;
              }
              BOOL v51 = v574 == 1;
              int v573 = v76;
              --v574;
              if (v51) {
                return;
              }
            }
          case 3:
            uint64_t v81 = v16;
            uint64_t v82 = -(uint64_t)v18;
            uint64_t v576 = -(v569 * v17);
            uint64_t v83 = 8 * v16;
            do
            {
              int v84 = v572;
              do
              {
                int v85 = *v9;
                if (*v9)
                {
                  if (v85 == 255)
                  {
                    unint64_t v86 = HIWORD(*(unint64_t *)v14);
                    int8x8_t v87 = (int8x8_t)*v14;
                    if (!v19) {
                      LODWORD(v86) = 0xFFFF;
                    }
                    int32x2_t v88 = vdup_n_s32(v7->u16[3] ^ 0xFFFFu);
                    uint32x2_t v89 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8(v87, (int8x8_t)0xFFFF0000FFFFLL), v88);
                    int32x2_t v90 = vsub_s32((int32x2_t)v87, (int32x2_t)vshr_n_u32(vsra_n_u32(v89, v89, 0x10uLL), 0x10uLL));
                    v91.i32[0] = HIWORD(v87.i32[0]);
                    v91.i32[1] = v86;
                    uint32x2_t v92 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v91, v88);
                    *int v7 = (uint32x2_t)vsli_n_s32(v90, vsub_s32(v91, (int32x2_t)vshr_n_u32(vsra_n_u32(v92, v92, 0x10uLL), 0x10uLL)), 0x10uLL);
                  }
                  else
                  {
                    int v93 = v85 | (v85 << 8);
                    unint64_t v94 = HIWORD(*(unint64_t *)v14);
                    if (!v19) {
                      LOWORD(v94) = -1;
                    }
                    rgba64_DMplusDAM(v7, (unint64_t)*v7, v93 ^ 0xFFFF, (uint64_t)*v14, (unsigned __int16)v94, (HIWORD(*(unint64_t *)v7) * v93+ 0x8000+ ((HIWORD(*(unint64_t *)v7) * v93 + 0x8000) >> 16)) >> 16);
                  }
                }
                v9 += v81;
                unint64_t v95 = (unint64_t)&v14[v81];
                if (v95 >= v21) {
                  uint64_t v96 = v82;
                }
                else {
                  uint64_t v96 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v95 + 8 * v96);
                int v7 = (uint32x2_t *)((char *)v7 + v83);
                --v84;
              }
              while (v84);
              v9 += v571;
              v7 += v570;
              unint64_t v97 = v573;
              int v98 = &v573[v569];
              uint64_t v99 = v576;
              if ((unint64_t)v98 < v567) {
                uint64_t v99 = 0;
              }
              unint64_t v100 = &v98[v99];
              uint64_t v101 = v21 + 8 * v99 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v101;
                unint64_t v97 = v100;
                uint64_t v14 = v100;
              }
              BOOL v51 = v574 == 1;
              int v573 = v97;
              --v574;
            }
            while (!v51);
            return;
          case 4:
            uint64_t v102 = v16;
            uint64_t v103 = -(uint64_t)v18;
            uint64_t v577 = -(v569 * v17);
            uint64_t v104 = 8 * v16;
            do
            {
              int v105 = v572;
              do
              {
                int v106 = *v9;
                if (*v9)
                {
                  if (v106 == 255)
                  {
                    unint64_t v107 = HIWORD(*(unint64_t *)v14);
                    int8x8_t v108 = (int8x8_t)*v14;
                    if (!v19) {
                      LODWORD(v107) = 0xFFFF;
                    }
                    int32x2_t v109 = vdup_n_s32(v7->u16[3]);
                    uint32x2_t v110 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8(v108, (int8x8_t)0xFFFF0000FFFFLL), v109);
                    int32x2_t v111 = vsub_s32((int32x2_t)v108, (int32x2_t)vshr_n_u32(vsra_n_u32(v110, v110, 0x10uLL), 0x10uLL));
                    v112.i32[0] = HIWORD(v108.i32[0]);
                    v112.i32[1] = v107;
                    uint32x2_t v113 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v112, v109);
                    *int v7 = (uint32x2_t)vsli_n_s32(v111, vsub_s32(v112, (int32x2_t)vshr_n_u32(vsra_n_u32(v113, v113, 0x10uLL), 0x10uLL)), 0x10uLL);
                  }
                  else
                  {
                    int v114 = v106 | (v106 << 8);
                    unint64_t v115 = (unint64_t)*v7;
                    unint64_t v116 = HIWORD(*(unint64_t *)v14);
                    if (!v19) {
                      LOWORD(v116) = -1;
                    }
                    unsigned int v117 = (HIWORD(v115) ^ 0xFFFF) * v114 + 0x8000;
                    rgba64_DMplusDAM(v7, v115, v114 ^ 0xFFFF, (uint64_t)*v14, (unsigned __int16)v116, (v117 + HIWORD(v117)) >> 16);
                  }
                }
                v9 += v102;
                unint64_t v118 = (unint64_t)&v14[v102];
                if (v118 >= v21) {
                  uint64_t v119 = v103;
                }
                else {
                  uint64_t v119 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v118 + 8 * v119);
                int v7 = (uint32x2_t *)((char *)v7 + v104);
                --v105;
              }
              while (v105);
              v9 += v571;
              v7 += v570;
              unint64_t v120 = v573;
              unint64_t v121 = &v573[v569];
              uint64_t v122 = v577;
              if ((unint64_t)v121 < v567) {
                uint64_t v122 = 0;
              }
              unint64_t v123 = &v121[v122];
              uint64_t v124 = v21 + 8 * v122 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v124;
                unint64_t v120 = v123;
                uint64_t v14 = v123;
              }
              BOOL v51 = v574 == 1;
              int v573 = v120;
              --v574;
            }
            while (!v51);
            return;
          case 5:
            uint64_t v125 = v16;
            uint64_t v126 = -(uint64_t)v18;
            uint64_t v578 = -(v569 * v17);
            uint64_t v127 = 8 * v16;
            do
            {
              int v128 = v572;
              do
              {
                if (*v9)
                {
                  int v129 = (*v9 | (*v9 << 8)) ^ 0xFFFF;
                  unsigned int v130 = v14->u16[0] * v129 + 0x8000;
                  unsigned int v131 = (unsigned __int16)WORD2(*(unint64_t *)v14) * v129 + 0x8000;
                  unsigned __int16 v132 = *(void *)v14 - ((v130 + HIWORD(v130)) >> 16);
                  unsigned int v133 = HIWORD(v14->u32[0])
                       - ((HIWORD(v14->u32[0]) * v129
                         + 0x8000
                         + ((HIWORD(v14->u32[0]) * v129 + 0x8000) >> 16)) >> 16);
                  unint64_t v134 = HIWORD(*(unint64_t *)v14)
                       - ((v129 * HIWORD(*(unint64_t *)v14)
                         + 0x8000
                         + ((v129 * HIWORD(*(unint64_t *)v14) + 0x8000) >> 16)) >> 16);
                  rgba64_DMplusDM(v7, (v134 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v14)- ((v131 + HIWORD(v131)) >> 16)) << 32) | v132 | ((unsigned __int16)v133 << 16), HIWORD(*(unint64_t *)v7), (unint64_t)*v7, (unsigned __int16)~(_WORD)v134);
                }
                v9 += v125;
                unint64_t v135 = (unint64_t)&v14[v125];
                if (v135 >= v21) {
                  uint64_t v136 = v126;
                }
                else {
                  uint64_t v136 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v135 + 8 * v136);
                int v7 = (uint32x2_t *)((char *)v7 + v127);
                --v128;
              }
              while (v128);
              v9 += v571;
              v7 += v570;
              unsigned int v137 = v573;
              unsigned int v138 = &v573[v569];
              uint64_t v139 = v578;
              if ((unint64_t)v138 < v567) {
                uint64_t v139 = 0;
              }
              int v140 = &v138[v139];
              uint64_t v141 = v21 + 8 * v139 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v141;
                unsigned int v137 = v140;
                uint64_t v14 = v140;
              }
              BOOL v51 = v574 == 1;
              int v573 = v137;
              --v574;
            }
            while (!v51);
            return;
          case 6:
            uint64_t v142 = v16;
            uint64_t v143 = -(uint64_t)v18;
            uint64_t v579 = -(v569 * v17);
            uint64_t v144 = 8 * v16;
            do
            {
              int v145 = v572;
              do
              {
                int v146 = *v9;
                if (*v9)
                {
                  unint64_t v147 = HIWORD(*(unint64_t *)v7);
                  if ((_WORD)v147 != 0xFFFF)
                  {
                    if ((unsigned __int16)~(_WORD)v147 == 0xFFFF)
                    {
                      int8x8_t v148 = (int8x8_t)*v14;
                      int v149 = v146 | (v146 << 8);
                      if (v19) {
                        __int32 v150 = HIWORD(*(unint64_t *)v14);
                      }
                      else {
                        __int32 v150 = 0xFFFF;
                      }
                      int32x2_t v151 = vdup_n_s32(v149 ^ 0xFFFFu);
                      uint32x2_t v152 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8(v148, (int8x8_t)0xFFFF0000FFFFLL), v151);
                      int32x2_t v153 = vsub_s32((int32x2_t)v148, (int32x2_t)vshr_n_u32(vsra_n_u32(v152, v152, 0x10uLL), 0x10uLL));
                      v154.i32[0] = HIWORD(v148.i32[0]);
                      v154.i32[1] = v150;
                      uint32x2_t v155 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v154, v151);
                      *int v7 = (uint32x2_t)vsli_n_s32(v153, vsub_s32(v154, (int32x2_t)vshr_n_u32(vsra_n_u32(v155, v155, 0x10uLL), 0x10uLL)), 0x10uLL);
                    }
                    else
                    {
                      unsigned __int16 v156 = ~(_WORD)v147;
                      unint64_t v157 = HIWORD(*(unint64_t *)v14);
                      if (!v19) {
                        LOWORD(v157) = -1;
                      }
                      rgba64_DplusDAM((uint16x4_t *)v7, (uint64_t)*v7, (uint64_t)*v14, (unsigned __int16)v157, (257 * v146 * v156 + 0x8000 + ((257 * v146 * v156 + 0x8000) >> 16)) >> 16);
                    }
                  }
                }
                v9 += v142;
                unint64_t v158 = (unint64_t)&v14[v142];
                if (v158 >= v21) {
                  uint64_t v159 = v143;
                }
                else {
                  uint64_t v159 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v158 + 8 * v159);
                int v7 = (uint32x2_t *)((char *)v7 + v144);
                --v145;
              }
              while (v145);
              v9 += v571;
              v7 += v570;
              int32x2_t v160 = v573;
              int32x2_t v161 = &v573[v569];
              uint64_t v162 = v579;
              if ((unint64_t)v161 < v567) {
                uint64_t v162 = 0;
              }
              uint32x2_t v163 = &v161[v162];
              uint64_t v164 = v21 + 8 * v162 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v164;
                int32x2_t v160 = v163;
                uint64_t v14 = v163;
              }
              BOOL v51 = v574 == 1;
              int v573 = v160;
              --v574;
            }
            while (!v51);
            return;
          case 7:
            uint64_t v165 = v16;
            uint64_t v166 = -(uint64_t)v18;
            uint64_t v167 = -(v569 * v17);
            uint64_t v168 = 8 * v16;
            do
            {
              int v169 = v572;
              do
              {
                int v170 = *v9;
                if (*v9)
                {
                  if (v170 == 255)
                  {
                    int32x2_t v171 = (int32x2_t)*v7;
                    v172.i32[0] = vshl_u32(*v7, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                    v173.i32[0] = v172.i32[0];
                    v173.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v7);
                    int32x2_t v174 = vdup_n_s32(v14->u16[3] ^ 0xFFFFu);
                    v175.i32[0] = v7->u16[0];
                    v175.i32[1] = HIWORD(*(unint64_t *)v7);
                    uint32x2_t v176 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v173, v174);
                    uint32x2_t v177 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v175, v174);
                    v172.i32[1] = HIDWORD(*(unint64_t *)v7);
                    uint32x2_t v178 = (uint32x2_t)vsub_s32(v172, (int32x2_t)vshr_n_u32(vsra_n_u32(v176, v176, 0x10uLL), 0x10uLL));
                    v171.i32[1] = v175.i32[1];
                    int8x8_t v179 = (int8x8_t)vsub_s32(v171, (int32x2_t)vshr_n_u32(vsra_n_u32(v177, v177, 0x10uLL), 0x10uLL));
                    int8x8_t v180 = (int8x8_t)vshl_n_s32((int32x2_t)v179, 0x10uLL);
                    v179.i16[1] = 0;
                    v179.i32[1] = v180.i32[1];
                    v180.i32[0] = vshl_u32(v178, (uint32x2_t)0xFFFF00000010).u32[0];
                    v180.i32[1] = v178.u16[2];
                    *int v7 = (uint32x2_t)vorr_s8(v180, v179);
                  }
                  else
                  {
                    int v181 = v170 | (v170 << 8);
                    unsigned int v182 = v14->u16[3] * v181 + 0x8000;
                    rgba64_DMplusDM(v7, (unint64_t)*v7, (v182 + HIWORD(v182)) >> 16, (unint64_t)*v7, v181 ^ 0xFFFF);
                  }
                }
                v9 += v165;
                unint64_t v183 = (unint64_t)&v14[v165];
                if (v183 >= v21) {
                  uint64_t v184 = v166;
                }
                else {
                  uint64_t v184 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v183 + 8 * v184);
                int v7 = (uint32x2_t *)((char *)v7 + v168);
                --v169;
              }
              while (v169);
              v9 += v571;
              v7 += v570;
              int v185 = v573;
              unint64_t v186 = &v573[v569];
              if ((unint64_t)v186 >= v567) {
                uint64_t v187 = v167;
              }
              else {
                uint64_t v187 = 0;
              }
              unint64_t v188 = &v186[v187];
              uint64_t v189 = v21 + 8 * v187 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v189;
                int v185 = v188;
                uint64_t v14 = v188;
              }
              BOOL v51 = v574 == 1;
              int v573 = v185;
              --v574;
            }
            while (!v51);
            return;
          case 8:
            uint64_t v190 = -(uint64_t)v18;
            uint64_t v191 = -(v569 * v17);
            do
            {
              int v192 = v572;
              int v193 = v574;
              do
              {
                int v194 = *v9;
                if (*v9)
                {
                  if (v194 == 255) {
                    unsigned int v195 = v14->u16[3];
                  }
                  else {
                    unsigned int v195 = (257 * v194 * v14->u16[3] + 0x8000 + ((257 * v194 * v14->u16[3] + 0x8000) >> 16)) >> 16;
                  }
                  int32x2_t v196 = (int32x2_t)*v7;
                  v197.i32[0] = vshl_u32(*v7, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                  v198.i32[0] = v197.i32[0];
                  v198.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v7);
                  int32x2_t v199 = vdup_n_s32(v195);
                  v200.i32[0] = v7->u16[0];
                  v200.i32[1] = HIWORD(*(unint64_t *)v7);
                  uint32x2_t v201 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v198, v199);
                  uint32x2_t v202 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v200, v199);
                  v197.i32[1] = HIDWORD(*(unint64_t *)v7);
                  uint32x2_t v203 = (uint32x2_t)vsub_s32(v197, (int32x2_t)vshr_n_u32(vsra_n_u32(v201, v201, 0x10uLL), 0x10uLL));
                  v196.i32[1] = v200.i32[1];
                  int8x8_t v204 = (int8x8_t)vsub_s32(v196, (int32x2_t)vshr_n_u32(vsra_n_u32(v202, v202, 0x10uLL), 0x10uLL));
                  int8x8_t v205 = (int8x8_t)vshl_n_s32((int32x2_t)v204, 0x10uLL);
                  v204.i16[1] = 0;
                  v204.i32[1] = v205.i32[1];
                  v205.i32[0] = vshl_u32(v203, (uint32x2_t)0xFFFF00000010).u32[0];
                  v205.i32[1] = v203.u16[2];
                  *int v7 = (uint32x2_t)vorr_s8(v205, v204);
                }
                v9 += v16;
                unint64_t v206 = (unint64_t)&v14[v16];
                if (v206 >= v21) {
                  uint64_t v207 = v190;
                }
                else {
                  uint64_t v207 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v206 + 8 * v207);
                v7 += v16;
                --v192;
              }
              while (v192);
              v9 += v571;
              v7 += v570;
              unsigned int v208 = v573;
              int v209 = &v573[v569];
              if ((unint64_t)v209 >= v567) {
                uint64_t v210 = v191;
              }
              else {
                uint64_t v210 = 0;
              }
              unsigned int v211 = &v209[v210];
              uint64_t v212 = v21 + 8 * v210 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v212;
                unsigned int v208 = v211;
                uint64_t v14 = v211;
              }
              int v573 = v208;
              --v574;
            }
            while (v193 != 1);
            return;
          case 9:
            uint64_t v213 = v16;
            uint64_t v214 = -(uint64_t)v18;
            uint64_t v215 = -(v569 * v17);
            uint64_t v216 = 8 * v16;
            do
            {
              int v217 = v572;
              do
              {
                if (*v9)
                {
                  unsigned __int16 v218 = ~(*v9 | (*v9 << 8));
                  int v219 = v218;
                  unsigned int v220 = v14->u16[0] * v218 + 0x8000;
                  unsigned int v221 = (unsigned __int16)WORD2(*(unint64_t *)v14) * v218 + 0x8000;
                  unsigned __int16 v222 = *(void *)v14 - ((v220 + HIWORD(v220)) >> 16);
                  unsigned int v223 = HIWORD(v14->u32[0])
                       - ((HIWORD(v14->u32[0]) * v219
                         + 0x8000
                         + ((HIWORD(v14->u32[0]) * v219 + 0x8000) >> 16)) >> 16);
                  unint64_t v224 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v219
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v219 + 0x8000) >> 16)) >> 16);
                  rgba64_DMplusDM(v7, (v224 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v14)- ((v221 + HIWORD(v221)) >> 16)) << 32) | v222 | ((unsigned __int16)v223 << 16), HIWORD(*(unint64_t *)v7) ^ 0xFFFF, (unint64_t)*v7, (unsigned __int16)(v224 + v218));
                }
                v9 += v213;
                unint64_t v225 = (unint64_t)&v14[v213];
                if (v225 >= v21) {
                  uint64_t v226 = v214;
                }
                else {
                  uint64_t v226 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v225 + 8 * v226);
                int v7 = (uint32x2_t *)((char *)v7 + v216);
                --v217;
              }
              while (v217);
              v9 += v571;
              v7 += v570;
              int v227 = v573;
              unint64_t v228 = &v573[v569];
              if ((unint64_t)v228 >= v567) {
                uint64_t v229 = v215;
              }
              else {
                uint64_t v229 = 0;
              }
              uint64_t v230 = &v228[v229];
              uint64_t v231 = v21 + 8 * v229 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v231;
                int v227 = v230;
                uint64_t v14 = v230;
              }
              BOOL v51 = v574 == 1;
              int v573 = v227;
              --v574;
            }
            while (!v51);
            return;
          case 10:
            uint64_t v232 = v16;
            uint64_t v233 = -(uint64_t)v18;
            uint64_t v580 = -(v569 * v17);
            uint64_t v234 = 8 * v16;
            do
            {
              int v235 = v572;
              do
              {
                if (*v9)
                {
                  int v236 = (*v9 | (*v9 << 8)) ^ 0xFFFF;
                  unsigned int v237 = v14->u16[0] * v236 + 0x8000;
                  unsigned int v238 = (unsigned __int16)WORD2(*(unint64_t *)v14) * v236 + 0x8000;
                  unsigned __int16 v239 = *(void *)v14 - ((v237 + HIWORD(v237)) >> 16);
                  unsigned int v240 = HIWORD(v14->u32[0])
                       - ((HIWORD(v14->u32[0]) * v236
                         + 0x8000
                         + ((HIWORD(v14->u32[0]) * v236 + 0x8000) >> 16)) >> 16);
                  unint64_t v241 = HIWORD(*(unint64_t *)v14)
                       - ((v236 * HIWORD(*(unint64_t *)v14)
                         + 0x8000
                         + ((v236 * HIWORD(*(unint64_t *)v14) + 0x8000) >> 16)) >> 16);
                  rgba64_DMplusDM(v7, (v241 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v14)- ((v238 + HIWORD(v238)) >> 16)) << 32) | v239 | ((unsigned __int16)v240 << 16), HIWORD(*(unint64_t *)v7) ^ 0xFFFF, (unint64_t)*v7, (unsigned __int16)~(_WORD)v241);
                }
                v9 += v232;
                unint64_t v242 = (unint64_t)&v14[v232];
                if (v242 >= v21) {
                  uint64_t v243 = v233;
                }
                else {
                  uint64_t v243 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v242 + 8 * v243);
                int v7 = (uint32x2_t *)((char *)v7 + v234);
                --v235;
              }
              while (v235);
              v9 += v571;
              v7 += v570;
              uint64_t v244 = v573;
              unint64_t v245 = &v573[v569];
              uint64_t v246 = v580;
              if ((unint64_t)v245 < v567) {
                uint64_t v246 = 0;
              }
              uint64_t v247 = &v245[v246];
              uint64_t v248 = v21 + 8 * v246 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v248;
                uint64_t v244 = v247;
                uint64_t v14 = v247;
              }
              BOOL v51 = v574 == 1;
              int v573 = v244;
              --v574;
            }
            while (!v51);
            return;
          case 11:
            uint64_t v249 = -(uint64_t)v18;
            uint64_t v250 = -(v569 * v17);
            int64x2_t v251 = vdupq_n_s64(0x20uLL);
            v252.i64[0] = 0xFFFFLL;
            v252.i64[1] = 0xFFFFLL;
            do
            {
              int v253 = v572;
              int v254 = v574;
              do
              {
                if (*v9)
                {
                  int v255 = *v9 | (*v9 << 8);
                  unsigned int v256 = v14->u16[0] * (v255 ^ 0xFFFF) + 0x8000;
                  unsigned int v257 = (unsigned __int16)WORD2(*(unint64_t *)v14) * (v255 ^ 0xFFFF) + 0x8000;
                  unint64_t v258 = (unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v14)
                                                            - ((v257 + HIWORD(v257)) >> 16)) << 32;
                  unint64_t v259 = (unsigned __int16)(*(void *)v14 - ((v256 + HIWORD(v256)) >> 16)) | ((unsigned __int16)(HIWORD(v14->u32[0]) - ((HIWORD(v14->u32[0]) * (v255 ^ 0xFFFF) + 0x8000 + ((HIWORD(v14->u32[0]) * (v255 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 16);
                  uint32x2_t v260 = *v7;
                  unint64_t v261 = HIWORD(*(unint64_t *)v7);
                  if (v19) {
                    LOWORD(v255) = HIWORD(*(unint64_t *)v14)
                  }
                                 - ((HIWORD(*(unint64_t *)v14) * (v255 ^ 0xFFFF)
                                   + 0x8000
                                   + ((HIWORD(*(unint64_t *)v14) * (v255 ^ 0xFFFF) + 0x8000) >> 16)) >> 16);
                  if (!v575) {
                    unint64_t v261 = 0xFFFFLL;
                  }
                  v262.i64[1] = v251.i64[1];
                  v262.i64[0] = v259;
                  int8x16_t v263 = (int8x16_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v258), (uint64x2_t)vnegq_s64(v262));
                  v263.i64[0] = v259;
                  unint64_t v264 = (unsigned __int16)v255;
                  unint64_t v265 = v261 - v260.u16[1];
                  if (v261 < v260.u16[1]) {
                    unint64_t v265 = 0;
                  }
                  BOOL v266 = (unsigned __int16)v255 >= v259 >> 16;
                  unint64_t v267 = (unsigned __int16)v255 - (v259 >> 16);
                  if (!v266) {
                    unint64_t v267 = 0;
                  }
                  unint64_t v268 = v267 + v265;
                  unint64_t v269 = v261 + (unsigned __int16)v255;
                  if (v268 >= 0xFFFF) {
                    unint64_t v268 = 0xFFFFLL;
                  }
                  if (v269 >= 0xFFFF) {
                    unint64_t v269 = 0xFFFFLL;
                  }
                  BOOL v266 = v269 >= v268;
                  unint64_t v270 = v269 - v268;
                  if (!v266) {
                    unint64_t v270 = 0;
                  }
                  *(uint32x2_t *)v271.i8 = *v7;
                  v271.i64[1] = HIDWORD(*(void *)&v260);
                  int8x16_t v272 = (int8x16_t)vaddq_s64((int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v264), (uint64x2_t)vandq_s8(v263, v252)), (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v261), (uint64x2_t)vandq_s8(v271, v252)));
                  int64x2_t v273 = vdupq_n_s64(v269);
                  int64x2_t v274 = (int64x2_t)vqsubq_u64((uint64x2_t)v273, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v252, (uint64x2_t)v272), v272, v252));
                  v273.i64[0] = v270;
                  *int v7 = (uint32x2_t)vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v273), 0x10uLL), (int8x8_t)vmovn_s64(v274));
                }
                v9 += v16;
                unint64_t v275 = (unint64_t)&v14[v16];
                if (v275 >= v21) {
                  uint64_t v276 = v249;
                }
                else {
                  uint64_t v276 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v275 + 8 * v276);
                v7 += v16;
                --v253;
              }
              while (v253);
              v9 += v571;
              v7 += v570;
              uint32x2_t v277 = v573;
              unint64_t v278 = &v573[v569];
              if ((unint64_t)v278 >= v567) {
                uint64_t v279 = v250;
              }
              else {
                uint64_t v279 = 0;
              }
              uint64_t v280 = &v278[v279];
              uint64_t v281 = v21 + 8 * v279 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v281;
                uint32x2_t v277 = v280;
                uint64_t v14 = v280;
              }
              int v573 = v277;
              --v574;
            }
            while (v254 != 1);
            return;
          case 12:
            uint64_t v282 = v16;
            uint64_t v283 = -(uint64_t)v18;
            uint64_t v581 = -(v569 * v17);
            uint64_t v284 = 8 * v16;
            do
            {
              int v285 = v572;
              do
              {
                if (*v9)
                {
                  int v286 = *v9 | (*v9 << 8);
                  unsigned int v287 = v14->u16[0] * (v286 ^ 0xFFFF) + 0x8000;
                  unsigned int v288 = (unsigned __int16)WORD2(*(unint64_t *)v14) * (v286 ^ 0xFFFF) + 0x8000;
                  unint64_t v289 = ((HIWORD(*(unint64_t *)v14)
                         - ((HIWORD(*(unint64_t *)v14) * (v286 ^ 0xFFFF)
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v14) * (v286 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v14) - ((v288 + HIWORD(v288)) >> 16)) << 32) | (unsigned __int16)(*(void *)v14 - ((v287 + HIWORD(v287)) >> 16)) | ((unsigned __int16)(HIWORD(v14->u32[0]) - ((HIWORD(v14->u32[0]) * (v286 ^ 0xFFFF) + 0x8000 + ((HIWORD(v14->u32[0]) * (v286 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 16);
                  if (v19) {
                    LOWORD(v286) = HIWORD(*(unint64_t *)v14)
                  }
                                 - ((HIWORD(*(unint64_t *)v14) * (v286 ^ 0xFFFF)
                                   + 0x8000
                                   + ((HIWORD(*(unint64_t *)v14) * (v286 ^ 0xFFFF) + 0x8000) >> 16)) >> 16);
                  rgba64_DpluslDA(v7, (unint64_t)*v7, v289, (unsigned __int16)v286);
                }
                v9 += v282;
                unint64_t v290 = (unint64_t)&v14[v282];
                if (v290 >= v21) {
                  uint64_t v291 = v283;
                }
                else {
                  uint64_t v291 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v290 + 8 * v291);
                int v7 = (uint32x2_t *)((char *)v7 + v284);
                --v285;
              }
              while (v285);
              v9 += v571;
              v7 += v570;
              uint64_t v292 = v573;
              unint64_t v293 = &v573[v569];
              uint64_t v294 = v581;
              if ((unint64_t)v293 < v567) {
                uint64_t v294 = 0;
              }
              uint64_t v295 = &v293[v294];
              uint64_t v296 = v21 + 8 * v294 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v296;
                uint64_t v292 = v295;
                uint64_t v14 = v295;
              }
              BOOL v51 = v574 == 1;
              int v573 = v292;
              --v574;
            }
            while (!v51);
            return;
          case 13:
            uint64_t v297 = v16;
            uint64_t v298 = -(uint64_t)v18;
            uint64_t v552 = -(v569 * v17);
            uint64_t v299 = 8 * v16;
            while (1)
            {
              int v300 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_306;
                }
                int v301 = *v9 | (*v9 << 8);
                int v303 = v301 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v303
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v303
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_306;
                  int v301 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v303
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v303 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v302 = (unint64_t)*v14;
                unint64_t v304 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v305) = 0xFFFF;
LABEL_304:
                  unint64_t v306 = PDAmultiplyPDA_14785(v304, v305, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v303+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v303 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v302) - ((WORD2(v302) * v303 + 0x8000 + ((WORD2(v302) * v303 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v302 - (((unsigned __int16)v302 * v303 + 0x8000 + (((unsigned __int16)v302 * v303 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v302) - ((WORD1(v302) * v303 + 0x8000 + ((WORD1(v302) * v303 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v301);
                  goto LABEL_305;
                }
                unint64_t v305 = HIWORD(v304);
                if (HIWORD(v304)) {
                  goto LABEL_304;
                }
                unint64_t v306 = ((unint64_t)(unsigned __int16)(WORD2(v302)
                                                           - ((WORD2(v302) * v303
                                                             + 0x8000
                                                             + ((WORD2(v302) * v303 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v302 - (((unsigned __int16)v302 * v303 + 0x8000 + (((unsigned __int16)v302 * v303 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v302) - ((WORD1(v302) * v303 + 0x8000 + ((WORD1(v302) * v303 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v301 << 48);
LABEL_305:
                *int v7 = (uint32x2_t)v306;
LABEL_306:
                v9 += v297;
                unint64_t v307 = (unint64_t)&v14[v297];
                if (v307 >= v21) {
                  uint64_t v308 = v298;
                }
                else {
                  uint64_t v308 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v307 + 8 * v308);
                int v7 = (uint32x2_t *)((char *)v7 + v299);
                --v300;
              }
              while (v300);
              v9 += v571;
              v7 += v570;
              unint64_t v309 = v573;
              uint64_t v310 = &v573[v569];
              uint64_t v311 = v552;
              if ((unint64_t)v310 < v567) {
                uint64_t v311 = 0;
              }
              uint64_t v312 = &v310[v311];
              uint64_t v313 = v21 + 8 * v311 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v313;
                unint64_t v309 = v312;
                uint64_t v14 = v312;
              }
              BOOL v51 = v574 == 1;
              int v573 = v309;
              --v574;
              if (v51) {
                return;
              }
            }
          case 14:
            uint64_t v314 = v16;
            uint64_t v315 = -(uint64_t)v18;
            uint64_t v553 = -(v569 * v17);
            uint64_t v316 = 8 * v16;
            while (1)
            {
              int v317 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_330;
                }
                int v318 = *v9 | (*v9 << 8);
                int v320 = v318 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v320
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v320
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_330;
                  int v318 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v320
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v320 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v319 = (unint64_t)*v14;
                unint64_t v321 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v322) = 0xFFFF;
LABEL_328:
                  unint64_t v323 = PDAscreenPDA_14786(v321, v322, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v320+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v320 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v319) - ((WORD2(v319) * v320 + 0x8000 + ((WORD2(v319) * v320 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v319 - (((unsigned __int16)v319 * v320 + 0x8000 + (((unsigned __int16)v319 * v320 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v319) - ((WORD1(v319) * v320 + 0x8000 + ((WORD1(v319) * v320 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v318);
                  goto LABEL_329;
                }
                unint64_t v322 = HIWORD(v321);
                if (HIWORD(v321)) {
                  goto LABEL_328;
                }
                unint64_t v323 = ((unint64_t)(unsigned __int16)(WORD2(v319)
                                                           - ((WORD2(v319) * v320
                                                             + 0x8000
                                                             + ((WORD2(v319) * v320 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v319 - (((unsigned __int16)v319 * v320 + 0x8000 + (((unsigned __int16)v319 * v320 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v319) - ((WORD1(v319) * v320 + 0x8000 + ((WORD1(v319) * v320 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v318 << 48);
LABEL_329:
                *int v7 = (uint32x2_t)v323;
LABEL_330:
                v9 += v314;
                unint64_t v324 = (unint64_t)&v14[v314];
                if (v324 >= v21) {
                  uint64_t v325 = v315;
                }
                else {
                  uint64_t v325 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v324 + 8 * v325);
                int v7 = (uint32x2_t *)((char *)v7 + v316);
                --v317;
              }
              while (v317);
              v9 += v571;
              v7 += v570;
              unint64_t v326 = v573;
              uint64_t v327 = &v573[v569];
              uint64_t v328 = v553;
              if ((unint64_t)v327 < v567) {
                uint64_t v328 = 0;
              }
              unint64_t v329 = &v327[v328];
              uint64_t v330 = v21 + 8 * v328 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v330;
                unint64_t v326 = v329;
                uint64_t v14 = v329;
              }
              BOOL v51 = v574 == 1;
              int v573 = v326;
              --v574;
              if (v51) {
                return;
              }
            }
          case 15:
            uint64_t v331 = v16;
            uint64_t v332 = -(uint64_t)v18;
            uint64_t v554 = -(v569 * v17);
            uint64_t v333 = 8 * v16;
            while (1)
            {
              int v334 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_354;
                }
                int v335 = *v9 | (*v9 << 8);
                int v337 = v335 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v337
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v337
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_354;
                  int v335 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v337
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v337 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v336 = (unint64_t)*v14;
                unint64_t v338 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v339) = 0xFFFF;
LABEL_352:
                  unint64_t v340 = PDAoverlayPDA_14787(v338, v339, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v337+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v337 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v336) - ((WORD2(v336) * v337 + 0x8000 + ((WORD2(v336) * v337 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v336 - (((unsigned __int16)v336 * v337 + 0x8000 + (((unsigned __int16)v336 * v337 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v336) - ((WORD1(v336) * v337 + 0x8000 + ((WORD1(v336) * v337 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v335);
                  goto LABEL_353;
                }
                unint64_t v339 = HIWORD(v338);
                if (HIWORD(v338)) {
                  goto LABEL_352;
                }
                unint64_t v340 = ((unint64_t)(unsigned __int16)(WORD2(v336)
                                                           - ((WORD2(v336) * v337
                                                             + 0x8000
                                                             + ((WORD2(v336) * v337 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v336 - (((unsigned __int16)v336 * v337 + 0x8000 + (((unsigned __int16)v336 * v337 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v336) - ((WORD1(v336) * v337 + 0x8000 + ((WORD1(v336) * v337 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v335 << 48);
LABEL_353:
                *int v7 = (uint32x2_t)v340;
LABEL_354:
                v9 += v331;
                unint64_t v341 = (unint64_t)&v14[v331];
                if (v341 >= v21) {
                  uint64_t v342 = v332;
                }
                else {
                  uint64_t v342 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v341 + 8 * v342);
                int v7 = (uint32x2_t *)((char *)v7 + v333);
                --v334;
              }
              while (v334);
              v9 += v571;
              v7 += v570;
              uint32x2_t v343 = v573;
              int8x8_t v344 = &v573[v569];
              uint64_t v345 = v554;
              if ((unint64_t)v344 < v567) {
                uint64_t v345 = 0;
              }
              unint64_t v346 = &v344[v345];
              uint64_t v347 = v21 + 8 * v345 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v347;
                uint32x2_t v343 = v346;
                uint64_t v14 = v346;
              }
              BOOL v51 = v574 == 1;
              int v573 = v343;
              --v574;
              if (v51) {
                return;
              }
            }
          case 16:
            uint64_t v348 = v16;
            uint64_t v349 = -(uint64_t)v18;
            uint64_t v555 = -(v569 * v17);
            uint64_t v350 = 8 * v16;
            while (1)
            {
              int v351 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_378;
                }
                int v352 = *v9 | (*v9 << 8);
                int v354 = v352 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v354
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v354
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_378;
                  int v352 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v354
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v354 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v353 = (unint64_t)*v14;
                unint64_t v355 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v356) = 0xFFFF;
LABEL_376:
                  unint64_t v357 = PDAdarkenPDA_14789(v355, v356, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v354+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v354 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v353) - ((WORD2(v353) * v354 + 0x8000 + ((WORD2(v353) * v354 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v353 - (((unsigned __int16)v353 * v354 + 0x8000 + (((unsigned __int16)v353 * v354 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v353) - ((WORD1(v353) * v354 + 0x8000 + ((WORD1(v353) * v354 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v352);
                  goto LABEL_377;
                }
                unint64_t v356 = HIWORD(v355);
                if (HIWORD(v355)) {
                  goto LABEL_376;
                }
                unint64_t v357 = ((unint64_t)(unsigned __int16)(WORD2(v353)
                                                           - ((WORD2(v353) * v354
                                                             + 0x8000
                                                             + ((WORD2(v353) * v354 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v353 - (((unsigned __int16)v353 * v354 + 0x8000 + (((unsigned __int16)v353 * v354 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v353) - ((WORD1(v353) * v354 + 0x8000 + ((WORD1(v353) * v354 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v352 << 48);
LABEL_377:
                *int v7 = (uint32x2_t)v357;
LABEL_378:
                v9 += v348;
                unint64_t v358 = (unint64_t)&v14[v348];
                if (v358 >= v21) {
                  uint64_t v359 = v349;
                }
                else {
                  uint64_t v359 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v358 + 8 * v359);
                int v7 = (uint32x2_t *)((char *)v7 + v350);
                --v351;
              }
              while (v351);
              v9 += v571;
              v7 += v570;
              uint64_t v360 = v573;
              unint64_t v361 = &v573[v569];
              uint64_t v362 = v555;
              if ((unint64_t)v361 < v567) {
                uint64_t v362 = 0;
              }
              uint64_t v363 = &v361[v362];
              uint64_t v364 = v21 + 8 * v362 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v364;
                uint64_t v360 = v363;
                uint64_t v14 = v363;
              }
              BOOL v51 = v574 == 1;
              int v573 = v360;
              --v574;
              if (v51) {
                return;
              }
            }
          case 17:
            uint64_t v365 = v16;
            uint64_t v366 = -(uint64_t)v18;
            uint64_t v556 = -(v569 * v17);
            uint64_t v367 = 8 * v16;
            while (1)
            {
              int v368 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_402;
                }
                int v369 = *v9 | (*v9 << 8);
                int v371 = v369 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v371
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v371
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_402;
                  int v369 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v371
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v371 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v370 = (unint64_t)*v14;
                unint64_t v372 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v373) = 0xFFFF;
LABEL_400:
                  unint64_t v374 = PDAlightenPDA_14788(v372, v373, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v371+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v371 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v370) - ((WORD2(v370) * v371 + 0x8000 + ((WORD2(v370) * v371 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v370 - (((unsigned __int16)v370 * v371 + 0x8000 + (((unsigned __int16)v370 * v371 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v370) - ((WORD1(v370) * v371 + 0x8000 + ((WORD1(v370) * v371 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v369);
                  goto LABEL_401;
                }
                unint64_t v373 = HIWORD(v372);
                if (HIWORD(v372)) {
                  goto LABEL_400;
                }
                unint64_t v374 = ((unint64_t)(unsigned __int16)(WORD2(v370)
                                                           - ((WORD2(v370) * v371
                                                             + 0x8000
                                                             + ((WORD2(v370) * v371 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v370 - (((unsigned __int16)v370 * v371 + 0x8000 + (((unsigned __int16)v370 * v371 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v370) - ((WORD1(v370) * v371 + 0x8000 + ((WORD1(v370) * v371 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v369 << 48);
LABEL_401:
                *int v7 = (uint32x2_t)v374;
LABEL_402:
                v9 += v365;
                unint64_t v375 = (unint64_t)&v14[v365];
                if (v375 >= v21) {
                  uint64_t v376 = v366;
                }
                else {
                  uint64_t v376 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v375 + 8 * v376);
                int v7 = (uint32x2_t *)((char *)v7 + v367);
                --v368;
              }
              while (v368);
              v9 += v571;
              v7 += v570;
              uint64_t v377 = v573;
              int v378 = &v573[v569];
              uint64_t v379 = v556;
              if ((unint64_t)v378 < v567) {
                uint64_t v379 = 0;
              }
              int8x16_t v380 = &v378[v379];
              uint64_t v381 = v21 + 8 * v379 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v381;
                uint64_t v377 = v380;
                uint64_t v14 = v380;
              }
              BOOL v51 = v574 == 1;
              int v573 = v377;
              --v574;
              if (v51) {
                return;
              }
            }
          case 18:
            uint64_t v382 = v16;
            uint64_t v383 = -(uint64_t)v18;
            uint64_t v557 = -(v569 * v17);
            uint64_t v384 = 8 * v16;
            while (1)
            {
              int v385 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_426;
                }
                int v386 = *v9 | (*v9 << 8);
                int v388 = v386 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v388
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v388
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_426;
                  int v386 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v388
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v388 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v387 = (unint64_t)*v14;
                unint64_t v389 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v390) = 0xFFFF;
LABEL_424:
                  unint64_t v391 = PDAcolordodgePDA_14790(v389, v390, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v388+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v388 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v387) - ((WORD2(v387) * v388 + 0x8000 + ((WORD2(v387) * v388 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v387 - (((unsigned __int16)v387 * v388 + 0x8000 + (((unsigned __int16)v387 * v388 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v387) - ((WORD1(v387) * v388 + 0x8000 + ((WORD1(v387) * v388 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v386);
                  goto LABEL_425;
                }
                unint64_t v390 = HIWORD(v389);
                if (HIWORD(v389)) {
                  goto LABEL_424;
                }
                unint64_t v391 = ((unint64_t)(unsigned __int16)(WORD2(v387)
                                                           - ((WORD2(v387) * v388
                                                             + 0x8000
                                                             + ((WORD2(v387) * v388 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v387 - (((unsigned __int16)v387 * v388 + 0x8000 + (((unsigned __int16)v387 * v388 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v387) - ((WORD1(v387) * v388 + 0x8000 + ((WORD1(v387) * v388 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v386 << 48);
LABEL_425:
                *int v7 = (uint32x2_t)v391;
LABEL_426:
                v9 += v382;
                unint64_t v392 = (unint64_t)&v14[v382];
                if (v392 >= v21) {
                  uint64_t v393 = v383;
                }
                else {
                  uint64_t v393 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v392 + 8 * v393);
                int v7 = (uint32x2_t *)((char *)v7 + v384);
                --v385;
              }
              while (v385);
              v9 += v571;
              v7 += v570;
              int64x2_t v394 = v573;
              int64x2_t v395 = &v573[v569];
              uint64_t v396 = v557;
              if ((unint64_t)v395 < v567) {
                uint64_t v396 = 0;
              }
              uint64_t v397 = &v395[v396];
              uint64_t v398 = v21 + 8 * v396 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v398;
                int64x2_t v394 = v397;
                uint64_t v14 = v397;
              }
              BOOL v51 = v574 == 1;
              int v573 = v394;
              --v574;
              if (v51) {
                return;
              }
            }
          case 19:
            uint64_t v399 = v16;
            uint64_t v400 = -(uint64_t)v18;
            uint64_t v558 = -(v569 * v17);
            uint64_t v401 = 8 * v16;
            while (1)
            {
              int v402 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_450;
                }
                int v403 = *v9 | (*v9 << 8);
                int v405 = v403 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v405
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v405
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_450;
                  int v403 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v405
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v405 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v404 = (unint64_t)*v14;
                unint64_t v406 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v407) = 0xFFFF;
LABEL_448:
                  unint64_t v408 = PDAcolorburnPDA_14791(v406, v407, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v405+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v405 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v404) - ((WORD2(v404) * v405 + 0x8000 + ((WORD2(v404) * v405 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v404 - (((unsigned __int16)v404 * v405 + 0x8000 + (((unsigned __int16)v404 * v405 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v404) - ((WORD1(v404) * v405 + 0x8000 + ((WORD1(v404) * v405 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v403);
                  goto LABEL_449;
                }
                unint64_t v407 = HIWORD(v406);
                if (HIWORD(v406)) {
                  goto LABEL_448;
                }
                unint64_t v408 = ((unint64_t)(unsigned __int16)(WORD2(v404)
                                                           - ((WORD2(v404) * v405
                                                             + 0x8000
                                                             + ((WORD2(v404) * v405 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v404 - (((unsigned __int16)v404 * v405 + 0x8000 + (((unsigned __int16)v404 * v405 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v404) - ((WORD1(v404) * v405 + 0x8000 + ((WORD1(v404) * v405 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v403 << 48);
LABEL_449:
                *int v7 = (uint32x2_t)v408;
LABEL_450:
                v9 += v399;
                unint64_t v409 = (unint64_t)&v14[v399];
                if (v409 >= v21) {
                  uint64_t v410 = v400;
                }
                else {
                  uint64_t v410 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v409 + 8 * v410);
                int v7 = (uint32x2_t *)((char *)v7 + v401);
                --v402;
              }
              while (v402);
              v9 += v571;
              v7 += v570;
              uint64_t v411 = v573;
              unint64_t v412 = &v573[v569];
              uint64_t v413 = v558;
              if ((unint64_t)v412 < v567) {
                uint64_t v413 = 0;
              }
              uint64_t v414 = &v412[v413];
              uint64_t v415 = v21 + 8 * v413 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v415;
                uint64_t v411 = v414;
                uint64_t v14 = v414;
              }
              BOOL v51 = v574 == 1;
              int v573 = v411;
              --v574;
              if (v51) {
                return;
              }
            }
          case 20:
            uint64_t v416 = v16;
            uint64_t v417 = -(uint64_t)v18;
            uint64_t v559 = -(v569 * v17);
            uint64_t v418 = 8 * v16;
            while (1)
            {
              int v419 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_474;
                }
                int v420 = *v9 | (*v9 << 8);
                int v422 = v420 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v422
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v422
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_474;
                  int v420 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v422
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v422 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v421 = (unint64_t)*v14;
                unint64_t v423 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v424) = 0xFFFF;
LABEL_472:
                  unint64_t v425 = PDAsoftlightPDA_14793(v423, v424, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v422+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v422 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v421) - ((WORD2(v421) * v422 + 0x8000 + ((WORD2(v421) * v422 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v421 - (((unsigned __int16)v421 * v422 + 0x8000 + (((unsigned __int16)v421 * v422 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v421) - ((WORD1(v421) * v422 + 0x8000 + ((WORD1(v421) * v422 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v420);
                  goto LABEL_473;
                }
                unint64_t v424 = HIWORD(v423);
                if (HIWORD(v423)) {
                  goto LABEL_472;
                }
                unint64_t v425 = ((unint64_t)(unsigned __int16)(WORD2(v421)
                                                           - ((WORD2(v421) * v422
                                                             + 0x8000
                                                             + ((WORD2(v421) * v422 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v421 - (((unsigned __int16)v421 * v422 + 0x8000 + (((unsigned __int16)v421 * v422 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v421) - ((WORD1(v421) * v422 + 0x8000 + ((WORD1(v421) * v422 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v420 << 48);
LABEL_473:
                *int v7 = (uint32x2_t)v425;
LABEL_474:
                v9 += v416;
                unint64_t v426 = (unint64_t)&v14[v416];
                if (v426 >= v21) {
                  uint64_t v427 = v417;
                }
                else {
                  uint64_t v427 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v426 + 8 * v427);
                int v7 = (uint32x2_t *)((char *)v7 + v418);
                --v419;
              }
              while (v419);
              v9 += v571;
              v7 += v570;
              uint64_t v428 = v573;
              unint64_t v429 = &v573[v569];
              uint64_t v430 = v559;
              if ((unint64_t)v429 < v567) {
                uint64_t v430 = 0;
              }
              uint64_t v431 = &v429[v430];
              uint64_t v432 = v21 + 8 * v430 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v432;
                uint64_t v428 = v431;
                uint64_t v14 = v431;
              }
              BOOL v51 = v574 == 1;
              int v573 = v428;
              --v574;
              if (v51) {
                return;
              }
            }
          case 21:
            uint64_t v433 = v16;
            uint64_t v434 = -(uint64_t)v18;
            uint64_t v560 = -(v569 * v17);
            uint64_t v435 = 8 * v16;
            while (1)
            {
              int v436 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_498;
                }
                int v437 = *v9 | (*v9 << 8);
                int v439 = v437 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v439
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v439
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_498;
                  int v437 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v439
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v439 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v438 = (unint64_t)*v14;
                unint64_t v440 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v441) = 0xFFFF;
LABEL_496:
                  unint64_t v442 = PDAhardlightPDA_14792(v440, v441, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v439+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v439 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v438) - ((WORD2(v438) * v439 + 0x8000 + ((WORD2(v438) * v439 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v438 - (((unsigned __int16)v438 * v439 + 0x8000 + (((unsigned __int16)v438 * v439 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v438) - ((WORD1(v438) * v439 + 0x8000 + ((WORD1(v438) * v439 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v437);
                  goto LABEL_497;
                }
                unint64_t v441 = HIWORD(v440);
                if (HIWORD(v440)) {
                  goto LABEL_496;
                }
                unint64_t v442 = ((unint64_t)(unsigned __int16)(WORD2(v438)
                                                           - ((WORD2(v438) * v439
                                                             + 0x8000
                                                             + ((WORD2(v438) * v439 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v438 - (((unsigned __int16)v438 * v439 + 0x8000 + (((unsigned __int16)v438 * v439 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v438) - ((WORD1(v438) * v439 + 0x8000 + ((WORD1(v438) * v439 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v437 << 48);
LABEL_497:
                *int v7 = (uint32x2_t)v442;
LABEL_498:
                v9 += v433;
                unint64_t v443 = (unint64_t)&v14[v433];
                if (v443 >= v21) {
                  uint64_t v444 = v434;
                }
                else {
                  uint64_t v444 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v443 + 8 * v444);
                int v7 = (uint32x2_t *)((char *)v7 + v435);
                --v436;
              }
              while (v436);
              v9 += v571;
              v7 += v570;
              uint64_t v445 = v573;
              unint64_t v446 = &v573[v569];
              uint64_t v447 = v560;
              if ((unint64_t)v446 < v567) {
                uint64_t v447 = 0;
              }
              uint64_t v448 = &v446[v447];
              uint64_t v449 = v21 + 8 * v447 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v449;
                uint64_t v445 = v448;
                uint64_t v14 = v448;
              }
              BOOL v51 = v574 == 1;
              int v573 = v445;
              --v574;
              if (v51) {
                return;
              }
            }
          case 22:
            uint64_t v450 = v16;
            uint64_t v451 = -(uint64_t)v18;
            uint64_t v561 = -(v569 * v17);
            uint64_t v452 = 8 * v16;
            while (1)
            {
              int v453 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_522;
                }
                int v454 = *v9 | (*v9 << 8);
                int v456 = v454 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v456
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v456
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_522;
                  int v454 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v456
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v456 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v455 = (unint64_t)*v14;
                unint64_t v457 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v458) = 0xFFFF;
LABEL_520:
                  unint64_t v459 = PDAdifferencePDA_14794(v457, v458, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v456+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v456 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v455) - ((WORD2(v455) * v456 + 0x8000 + ((WORD2(v455) * v456 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v455 - (((unsigned __int16)v455 * v456 + 0x8000 + (((unsigned __int16)v455 * v456 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v455) - ((WORD1(v455) * v456 + 0x8000 + ((WORD1(v455) * v456 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v454);
                  goto LABEL_521;
                }
                unint64_t v458 = HIWORD(v457);
                if (HIWORD(v457)) {
                  goto LABEL_520;
                }
                unint64_t v459 = ((unint64_t)(unsigned __int16)(WORD2(v455)
                                                           - ((WORD2(v455) * v456
                                                             + 0x8000
                                                             + ((WORD2(v455) * v456 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v455 - (((unsigned __int16)v455 * v456 + 0x8000 + (((unsigned __int16)v455 * v456 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v455) - ((WORD1(v455) * v456 + 0x8000 + ((WORD1(v455) * v456 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v454 << 48);
LABEL_521:
                *int v7 = (uint32x2_t)v459;
LABEL_522:
                v9 += v450;
                unint64_t v460 = (unint64_t)&v14[v450];
                if (v460 >= v21) {
                  uint64_t v461 = v451;
                }
                else {
                  uint64_t v461 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v460 + 8 * v461);
                int v7 = (uint32x2_t *)((char *)v7 + v452);
                --v453;
              }
              while (v453);
              v9 += v571;
              v7 += v570;
              uint64_t v462 = v573;
              unint64_t v463 = &v573[v569];
              uint64_t v464 = v561;
              if ((unint64_t)v463 < v567) {
                uint64_t v464 = 0;
              }
              uint64_t v465 = &v463[v464];
              uint64_t v466 = v21 + 8 * v464 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v466;
                uint64_t v462 = v465;
                uint64_t v14 = v465;
              }
              BOOL v51 = v574 == 1;
              int v573 = v462;
              --v574;
              if (v51) {
                return;
              }
            }
          case 23:
            uint64_t v467 = v16;
            uint64_t v468 = -(uint64_t)v18;
            uint64_t v562 = -(v569 * v17);
            uint64_t v469 = 8 * v16;
            while (1)
            {
              int v470 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_546;
                }
                int v471 = *v9 | (*v9 << 8);
                int v473 = v471 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v473
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v473
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_546;
                  int v471 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v473
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v473 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v472 = (unint64_t)*v14;
                unint64_t v474 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v475) = 0xFFFF;
LABEL_544:
                  unint64_t v476 = PDAexclusionPDA_14795(v474, v475, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v473+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v473 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v472) - ((WORD2(v472) * v473 + 0x8000 + ((WORD2(v472) * v473 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v472 - (((unsigned __int16)v472 * v473 + 0x8000 + (((unsigned __int16)v472 * v473 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v472) - ((WORD1(v472) * v473 + 0x8000 + ((WORD1(v472) * v473 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v471);
                  goto LABEL_545;
                }
                unint64_t v475 = HIWORD(v474);
                if (HIWORD(v474)) {
                  goto LABEL_544;
                }
                unint64_t v476 = ((unint64_t)(unsigned __int16)(WORD2(v472)
                                                           - ((WORD2(v472) * v473
                                                             + 0x8000
                                                             + ((WORD2(v472) * v473 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v472 - (((unsigned __int16)v472 * v473 + 0x8000 + (((unsigned __int16)v472 * v473 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v472) - ((WORD1(v472) * v473 + 0x8000 + ((WORD1(v472) * v473 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v471 << 48);
LABEL_545:
                *int v7 = (uint32x2_t)v476;
LABEL_546:
                v9 += v467;
                unint64_t v477 = (unint64_t)&v14[v467];
                if (v477 >= v21) {
                  uint64_t v478 = v468;
                }
                else {
                  uint64_t v478 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v477 + 8 * v478);
                int v7 = (uint32x2_t *)((char *)v7 + v469);
                --v470;
              }
              while (v470);
              v9 += v571;
              v7 += v570;
              uint64_t v479 = v573;
              unint64_t v480 = &v573[v569];
              uint64_t v481 = v562;
              if ((unint64_t)v480 < v567) {
                uint64_t v481 = 0;
              }
              uint64_t v482 = &v480[v481];
              uint64_t v483 = v21 + 8 * v481 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v483;
                uint64_t v479 = v482;
                uint64_t v14 = v482;
              }
              BOOL v51 = v574 == 1;
              int v573 = v479;
              --v574;
              if (v51) {
                return;
              }
            }
          case 24:
            uint64_t v484 = v16;
            uint64_t v485 = -(uint64_t)v18;
            uint64_t v563 = -(v569 * v17);
            uint64_t v486 = 8 * v16;
            while (1)
            {
              int v487 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_570;
                }
                int v488 = *v9 | (*v9 << 8);
                int v490 = v488 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v490
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v490
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_570;
                  int v488 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v490
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v490 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v489 = (unint64_t)*v14;
                unint64_t v491 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v492) = 0xFFFF;
LABEL_568:
                  unint64_t v493 = PDAhuePDA_14796(v491, v492, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v490+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v490 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v489) - ((WORD2(v489) * v490 + 0x8000 + ((WORD2(v489) * v490 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v489 - (((unsigned __int16)v489 * v490 + 0x8000 + (((unsigned __int16)v489 * v490 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v489) - ((WORD1(v489) * v490 + 0x8000 + ((WORD1(v489) * v490 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v488);
                  goto LABEL_569;
                }
                unint64_t v492 = HIWORD(v491);
                if (HIWORD(v491)) {
                  goto LABEL_568;
                }
                unint64_t v493 = ((unint64_t)(unsigned __int16)(WORD2(v489)
                                                           - ((WORD2(v489) * v490
                                                             + 0x8000
                                                             + ((WORD2(v489) * v490 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v489 - (((unsigned __int16)v489 * v490 + 0x8000 + (((unsigned __int16)v489 * v490 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v489) - ((WORD1(v489) * v490 + 0x8000 + ((WORD1(v489) * v490 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v488 << 48);
LABEL_569:
                *int v7 = (uint32x2_t)v493;
LABEL_570:
                v9 += v484;
                unint64_t v494 = (unint64_t)&v14[v484];
                if (v494 >= v21) {
                  uint64_t v495 = v485;
                }
                else {
                  uint64_t v495 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v494 + 8 * v495);
                int v7 = (uint32x2_t *)((char *)v7 + v486);
                --v487;
              }
              while (v487);
              v9 += v571;
              v7 += v570;
              uint64_t v496 = v573;
              unint64_t v497 = &v573[v569];
              uint64_t v498 = v563;
              if ((unint64_t)v497 < v567) {
                uint64_t v498 = 0;
              }
              uint64_t v499 = &v497[v498];
              uint64_t v500 = v21 + 8 * v498 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v500;
                uint64_t v496 = v499;
                uint64_t v14 = v499;
              }
              BOOL v51 = v574 == 1;
              int v573 = v496;
              --v574;
              if (v51) {
                return;
              }
            }
          case 25:
            uint64_t v501 = v16;
            uint64_t v502 = -(uint64_t)v18;
            uint64_t v564 = -(v569 * v17);
            uint64_t v503 = 8 * v16;
            while (1)
            {
              int v504 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_594;
                }
                int v505 = *v9 | (*v9 << 8);
                int v507 = v505 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v507
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v507
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_594;
                  int v505 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v507
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v507 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v506 = (unint64_t)*v14;
                unint64_t v508 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v509) = 0xFFFF;
LABEL_592:
                  unint64_t v510 = PDAsaturationPDA_14797(v508, v509, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v507+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v507 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v506) - ((WORD2(v506) * v507 + 0x8000 + ((WORD2(v506) * v507 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v506 - (((unsigned __int16)v506 * v507 + 0x8000 + (((unsigned __int16)v506 * v507 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v506) - ((WORD1(v506) * v507 + 0x8000 + ((WORD1(v506) * v507 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v505);
                  goto LABEL_593;
                }
                unint64_t v509 = HIWORD(v508);
                if (HIWORD(v508)) {
                  goto LABEL_592;
                }
                unint64_t v510 = ((unint64_t)(unsigned __int16)(WORD2(v506)
                                                           - ((WORD2(v506) * v507
                                                             + 0x8000
                                                             + ((WORD2(v506) * v507 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v506 - (((unsigned __int16)v506 * v507 + 0x8000 + (((unsigned __int16)v506 * v507 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v506) - ((WORD1(v506) * v507 + 0x8000 + ((WORD1(v506) * v507 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v505 << 48);
LABEL_593:
                *int v7 = (uint32x2_t)v510;
LABEL_594:
                v9 += v501;
                unint64_t v511 = (unint64_t)&v14[v501];
                if (v511 >= v21) {
                  uint64_t v512 = v502;
                }
                else {
                  uint64_t v512 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v511 + 8 * v512);
                int v7 = (uint32x2_t *)((char *)v7 + v503);
                --v504;
              }
              while (v504);
              v9 += v571;
              v7 += v570;
              uint64_t v513 = v573;
              unint64_t v514 = &v573[v569];
              uint64_t v515 = v564;
              if ((unint64_t)v514 < v567) {
                uint64_t v515 = 0;
              }
              uint64_t v516 = &v514[v515];
              uint64_t v517 = v21 + 8 * v515 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v517;
                uint64_t v513 = v516;
                uint64_t v14 = v516;
              }
              BOOL v51 = v574 == 1;
              int v573 = v513;
              --v574;
              if (v51) {
                return;
              }
            }
          case 26:
            uint64_t v518 = v16;
            uint64_t v519 = -(uint64_t)v18;
            uint64_t v565 = -(v569 * v17);
            uint64_t v520 = 8 * v16;
            while (1)
            {
              int v521 = v572;
              do
              {
                if (!*v9) {
                  goto LABEL_618;
                }
                int v522 = *v9 | (*v9 << 8);
                int v524 = v522 ^ 0xFFFF;
                if (v19)
                {
                  if (HIWORD(*(unint64_t *)v14) == (HIWORD(*(unint64_t *)v14) * v524
                                                          + 0x8000
                                                          + ((HIWORD(*(unint64_t *)v14) * v524
                                                                          + 0x8000) >> 16)) >> 16)
                    goto LABEL_618;
                  int v522 = HIWORD(*(unint64_t *)v14)
                       - ((HIWORD(*(unint64_t *)v14) * v524
                         + 0x8000
                         + ((HIWORD(*(unint64_t *)v14) * v524 + 0x8000) >> 16)) >> 16);
                }
                unint64_t v523 = (unint64_t)*v14;
                unint64_t v525 = (unint64_t)*v7;
                if (!v575)
                {
                  LODWORD(v526) = 0xFFFF;
LABEL_616:
                  unint64_t v527 = PDAluminosityPDA_14798(((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v524+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v524 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v523) - ((WORD2(v523) * v524 + 0x8000 + ((WORD2(v523) * v524 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v523 - (((unsigned __int16)v523 * v524 + 0x8000 + (((unsigned __int16)v523 * v524 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v523) - ((WORD1(v523) * v524 + 0x8000 + ((WORD1(v523) * v524 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v522, v525, v526);
                  goto LABEL_617;
                }
                unint64_t v526 = HIWORD(v525);
                if (HIWORD(v525)) {
                  goto LABEL_616;
                }
                unint64_t v527 = ((unint64_t)(unsigned __int16)(WORD2(v523)
                                                           - ((WORD2(v523) * v524
                                                             + 0x8000
                                                             + ((WORD2(v523) * v524 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v523 - (((unsigned __int16)v523 * v524 + 0x8000 + (((unsigned __int16)v523 * v524 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v523) - ((WORD1(v523) * v524 + 0x8000 + ((WORD1(v523) * v524 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v522 << 48);
LABEL_617:
                *int v7 = (uint32x2_t)v527;
LABEL_618:
                v9 += v518;
                unint64_t v528 = (unint64_t)&v14[v518];
                if (v528 >= v21) {
                  uint64_t v529 = v519;
                }
                else {
                  uint64_t v529 = 0;
                }
                uint64_t v14 = (uint32x2_t *)(v528 + 8 * v529);
                int v7 = (uint32x2_t *)((char *)v7 + v520);
                --v521;
              }
              while (v521);
              v9 += v571;
              v7 += v570;
              uint64_t v530 = v573;
              unint64_t v531 = &v573[v569];
              uint64_t v532 = v565;
              if ((unint64_t)v531 < v567) {
                uint64_t v532 = 0;
              }
              uint64_t v533 = &v531[v532];
              uint64_t v534 = v21 + 8 * v532 + 8 * v569;
              if (v568)
              {
                v14 += v569;
              }
              else
              {
                unint64_t v21 = v534;
                uint64_t v530 = v533;
                uint64_t v14 = v533;
              }
              BOOL v51 = v574 == 1;
              int v573 = v530;
              --v574;
              if (v51) {
                return;
              }
            }
          case 27:
            uint64_t v535 = v16;
            uint64_t v536 = -(uint64_t)v18;
            uint64_t v566 = -(v569 * v17);
            uint64_t v537 = 8 * v16;
            break;
          default:
            return;
        }
LABEL_631:
        int v538 = v572;
        while (1)
        {
          if (*v9)
          {
            int v539 = *v9 | (*v9 << 8);
            int v541 = v539 ^ 0xFFFF;
            if (!v19) {
              goto LABEL_636;
            }
            if (HIWORD(*(unint64_t *)v14) != (HIWORD(*(unint64_t *)v14) * v541
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v14) * v541 + 0x8000) >> 16)) >> 16)
              break;
          }
LABEL_642:
          v9 += v535;
          unint64_t v545 = (unint64_t)&v14[v535];
          if (v545 >= v21) {
            uint64_t v546 = v536;
          }
          else {
            uint64_t v546 = 0;
          }
          uint64_t v14 = (uint32x2_t *)(v545 + 8 * v546);
          int v7 = (uint32x2_t *)((char *)v7 + v537);
          if (!--v538)
          {
            v9 += v571;
            v7 += v570;
            uint64_t v547 = v573;
            unint64_t v548 = &v573[v569];
            uint64_t v549 = v566;
            if ((unint64_t)v548 < v567) {
              uint64_t v549 = 0;
            }
            uint64_t v550 = &v548[v549];
            uint64_t v551 = v21 + 8 * v549 + 8 * v569;
            if (v568)
            {
              v14 += v569;
            }
            else
            {
              unint64_t v21 = v551;
              uint64_t v547 = v550;
              uint64_t v14 = v550;
            }
            BOOL v51 = v574 == 1;
            int v573 = v547;
            --v574;
            if (v51) {
              return;
            }
            goto LABEL_631;
          }
        }
        int v539 = HIWORD(*(unint64_t *)v14)
             - ((HIWORD(*(unint64_t *)v14) * v541
               + 0x8000
               + ((HIWORD(*(unint64_t *)v14) * v541 + 0x8000) >> 16)) >> 16);
LABEL_636:
        unint64_t v540 = (unint64_t)*v14;
        unint64_t v542 = (unint64_t)*v7;
        if (v575)
        {
          unint64_t v543 = HIWORD(v542);
          if (!HIWORD(v542))
          {
            unint64_t v544 = ((unint64_t)(unsigned __int16)(WORD2(v540)
                                                       - ((WORD2(v540) * v541
                                                         + 0x8000
                                                         + ((WORD2(v540) * v541 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v540 - (((unsigned __int16)v540 * v541 + 0x8000 + (((unsigned __int16)v540 * v541 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v540) - ((WORD1(v540) * v541 + 0x8000 + ((WORD1(v540) * v541 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v539 << 48);
LABEL_641:
            *int v7 = (uint32x2_t)v544;
            goto LABEL_642;
          }
        }
        else
        {
          LODWORD(v543) = 0xFFFF;
        }
        unint64_t v544 = PDAluminosityPDA_14798(v542, v543, ((HIWORD(*(unint64_t *)v14)- ((HIWORD(*(unint64_t *)v14) * v541+ 0x8000+ ((HIWORD(*(unint64_t *)v14) * v541 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v540) - ((WORD2(v540) * v541 + 0x8000 + ((WORD2(v540) * v541 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v540 - (((unsigned __int16)v540 * v541 + 0x8000 + (((unsigned __int16)v540 * v541 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v540) - ((WORD1(v540) * v541 + 0x8000 + ((WORD1(v540) * v541 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v539);
        goto LABEL_641;
      }
      uint64_t v14 = 0;
      unint64_t v21 = 0;
      int v16 = 1;
LABEL_15:
      unint64_t v567 = 0;
      int v573 = 0;
      uint64_t v569 = v13 - v3;
      int v568 = 1;
      goto LABEL_16;
    }
    uint64_t v13 = v12 >> 3;
    uint64_t v14 = (uint32x2_t *)(v4 + 8 * (v10 + v13 * v11));
    if (v13 != v6)
    {
      int v16 = 1;
LABEL_14:
      int v17 = 0;
      uint64_t v3 = v16 * v572;
      BOOL v19 = v5 != 0;
      unint64_t v570 = v6 - v3;
      uint64_t v571 = v8 - v3;
      unint64_t v21 = -1;
      int v18 = v13;
      goto LABEL_15;
    }
    if ((char *)v7 - (char *)v14 >= 1)
    {
      if (v572 >= (uint64_t)((unint64_t)((char *)v7 - (char *)v14) >> 3))
      {
        v7 += v572 - 1;
        v14 += v572 - 1;
        v9 += v572 - 1;
        int v16 = -1;
        goto LABEL_13;
      }
      uint64_t v15 = *(int *)(a1 + 8) - 1;
      if (v7 <= &v14[v6 * v15 - 1 + v572])
      {
        v7 += v6 * v15;
        uint64_t v13 = -(uint64_t)v6;
        v9 += v8 * v15;
        uint64_t v8 = -v8;
        int v16 = 1;
        v14 += v6 * v15;
        unint64_t v6 = -(uint64_t)v6;
        goto LABEL_14;
      }
    }
    int v16 = 1;
LABEL_13:
    uint64_t v13 = (unint64_t)*(int *)(a1 + 28) >> 3;
    goto LABEL_14;
  }
}

_DWORD *rgba64_DMplusDAM(_DWORD *result, unint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  unint64_t v6 = (unsigned __int16)a2 * (unint64_t)a3 + (unsigned __int16)a4 * (unint64_t)a6;
  unint64_t v7 = WORD1(a2) * (unint64_t)a3 + WORD1(a4) * (unint64_t)a6;
  unint64_t v8 = WORD2(a2) * (unint64_t)a3 + WORD2(a4) * (unint64_t)a6;
  unint64_t v9 = HIWORD(a2) * a3 + a6 * (unint64_t)a5;
  if (v6 >= 0xFFFE8000) {
    unint64_t v6 = 4294868992;
  }
  if (v7 >= 0xFFFE8000) {
    unint64_t v7 = 4294868992;
  }
  if (v8 >= 0xFFFE8000) {
    unint64_t v8 = 4294868992;
  }
  if (v9 >= 0xFFFE8000) {
    unint64_t v9 = 4294868992;
  }
  unint64_t *result = (((v7 + 0x8000) >> 16) + v7 + 0x8000) & 0xFFFF0000 | ((((v6 + 0x8000) >> 16)
                                                                 + v6
                                                                 + 0x8000) >> 16);
  result[1] = (((v9 + 0x8000) >> 16) + v9 + 0x8000) & 0xFFFF0000 | ((((v8 + 0x8000) >> 16)
                                                                   + v8
                                                                   + 0x8000) >> 16);
  return result;
}

_DWORD *rgba64_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  unint64_t v8 = PIXELCONSTANT_14802(*(float **)(*(void *)a1 + 64), a4, a5, a6);
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    *(_OWORD *)a2 = xmmword_1850CDE10;
    a2[6] = 0;
    *((void *)a2 + 6) = v8;
    *((void *)a2 + 2) = 1;
    if (v8 <= 0xFFFEFFFFFFFFFFFFLL) {
      unint64_t v9 = (char *)(a2 + 12);
    }
    else {
      unint64_t v9 = 0;
    }
    *((void *)a2 + 4) = a2 + 12;
    *((void *)a2 + 5) = v9;
  }
  return a2;
}

unint64_t PIXELCONSTANT_14802(float *a1, int a2, float *a3, float a4)
{
  float v4 = *a1;
  float v5 = a1[1];
  float v6 = v5;
  if (v5 >= a4)
  {
    float v6 = a4;
    if (v4 > a4) {
      float v6 = *a1;
    }
  }
  float v7 = a1[3];
  float v8 = v6 * a1[2];
  if (a3) {
    int v9 = a2;
  }
  else {
    int v9 = 0;
  }
  if (v9 == 1)
  {
    if (*a3 >= v4) {
      float v4 = *a3;
    }
    if (*a3 > v5) {
      float v4 = a1[1];
    }
    int v10 = (int)(float)(v7 + (float)(v4 * v8));
    int v11 = v10;
    LOWORD(v12) = v10;
  }
  else
  {
    if (v9 == 4)
    {
      float v19 = a3[4];
      float v20 = *a3;
      float v21 = a3[1];
      float v22 = a3[2];
      if (v19 < v4) {
        float v23 = *a1;
      }
      else {
        float v23 = a3[4];
      }
      if (v19 <= v5) {
        float v24 = v23;
      }
      else {
        float v24 = a1[1];
      }
      if (v20 < v4) {
        float v25 = *a1;
      }
      else {
        float v25 = *a3;
      }
      if (v20 <= v5) {
        float v26 = v25;
      }
      else {
        float v26 = a1[1];
      }
      if (v21 < v4) {
        float v27 = *a1;
      }
      else {
        float v27 = a3[1];
      }
      if (v21 <= v5) {
        float v28 = v27;
      }
      else {
        float v28 = a1[1];
      }
      if (v22 < v4) {
        float v29 = *a1;
      }
      else {
        float v29 = a3[2];
      }
      if (v22 <= v5) {
        float v30 = v29;
      }
      else {
        float v30 = a1[1];
      }
      float v31 = (float)(v5 - v26) - v24;
      float v32 = (float)(v5 - v28) - v24;
      float v33 = (float)(v5 - v30) - v24;
      float v34 = v7 + (float)(v31 * v8);
      if (v31 < v4) {
        float v34 = *a1;
      }
      float v35 = v7 + (float)(v32 * v8);
      if (v32 < v4) {
        float v35 = *a1;
      }
      if (v33 >= v4) {
        float v4 = v7 + (float)(v33 * v8);
      }
      int v10 = (int)v34;
      int v11 = (int)v35;
      goto LABEL_63;
    }
    LOWORD(v10) = 0;
    int v11 = 0;
    LOWORD(v12) = 0;
    if (v9 == 3)
    {
      float v13 = a3[1];
      float v14 = a3[2];
      if (*a3 < v4) {
        float v15 = *a1;
      }
      else {
        float v15 = *a3;
      }
      if (*a3 <= v5) {
        float v16 = v15;
      }
      else {
        float v16 = a1[1];
      }
      if (v13 < v4) {
        float v17 = *a1;
      }
      else {
        float v17 = a3[1];
      }
      if (v13 <= v5) {
        float v18 = v17;
      }
      else {
        float v18 = a1[1];
      }
      if (v14 >= v4) {
        float v4 = a3[2];
      }
      if (v14 > v5) {
        float v4 = a1[1];
      }
      int v10 = (int)(float)(v7 + (float)(v16 * v8));
      int v11 = (int)(float)(v7 + (float)(v18 * v8));
      float v4 = v7 + (float)(v4 * v8);
LABEL_63:
      int v12 = (int)v4;
    }
  }
  return ((unint64_t)(int)(float)(v7 + v8) << 48) | ((unint64_t)(unsigned __int16)v12 << 32) | (v11 << 16) | (unint64_t)(unsigned __int16)v10;
}

uint64_t RGBA64_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2 = (uint64_t *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t)v3;
  BOOL v7 = 0;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *v2;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  *(_OWORD *)uint64_t v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *v3;
  if (!*((void *)v3 + 12))
  {
    if (*(void *)(v4 + 72)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = *(float *)(v4 + 4) >= 1.0;
    }
  }
  int v43 = 0;
  memset(v42, 0, sizeof(v42));
  int v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((void *)v3 + 6) == 0));
  if (v11 > 27) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(void *)(v5 + 16))
    {
      float v14 = rgba64_shade_radial_RGB;
    }
    else if (*(void *)(v5 + 24))
    {
      float v14 = rgba64_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      float v14 = rgba64_shade_axial_RGB;
    }
    else
    {
      float v14 = rgba64_shade_custom_RGB;
    }
    *(void *)&v17[0] = v14;
    if ((void)v40)
    {
      *((void *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 3, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    unint64_t v15 = *((void *)&v19 + 1) * v19;
    if ((uint64_t)(*((void *)&v19 + 1) * v19) <= 480)
    {
      float v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 3, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(unsigned char *)(v5 + 1)) {
        *(void *)&long long v39 = &_blt_shade_samples_noise;
      }
      goto LABEL_29;
    }
    float v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      unint64_t v15 = *((void *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)&v17[0]) {
    return 0xFFFFFFFFLL;
  }
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  RGBA64_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1])) {
    free(v38[1]);
  }
  return 1;
}

void RGBA64_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v459 = a3;
  uint64_t v469 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  uint64_t v454 = (int)v4;
  unint64_t v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  float v8 = *(float *)(a2 + 184);
  v464.i64[0] = *(void *)(a1 + 136);
  uint64_t v466 = *(void *)(a2 + 96);
  uint64_t v467 = *(void *)(a2 + 104);
  uint64_t v468 = v6;
  uint64_t v10 = *(int *)(a1 + 24);
  unint64_t v9 = *(int *)(a1 + 28);
  uint64_t v11 = *(int *)(a1 + 16);
  uint64_t v12 = *(int *)(a1 + 20);
  uint64_t v13 = *(int *)(a1 + 12);
  int v465 = *(_DWORD *)(a1 + 8);
  uint64_t v458 = a1;
  uint64_t v461 = (void *)a2;
  uint64_t v14 = *(int *)(a2 + 16);
  uint64_t v15 = (v14 + 10) * v5;
  if (v15 > 65439)
  {
    long long v18 = (char *)malloc_type_calloc(1uLL, v15 + 96, 0x3023562EuLL);
    float v17 = v18;
    long long v20 = v18;
    long long v21 = v461;
    uint64_t v22 = v458;
    if (!v18) {
      return;
    }
  }
  else
  {
    MEMORY[0x1F4188790](a1, a4);
    float v17 = (char *)&v449 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v17, v16);
    long long v20 = 0;
    long long v21 = v461;
    uint64_t v22 = v458;
  }
  uint64_t v451 = v20;
  int v460 = (int)(float)((float)(v8 * 65535.0) + 0.5);
  uint64_t v450 = v7 + (v10 - 1) * v9 + 8 * v12;
  unint64_t v23 = v9 >> 3;
  unint64_t v24 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v25 = v24 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v14) {
    uint64_t v26 = 8 * v5;
  }
  else {
    uint64_t v26 = 0;
  }
  unint64_t v27 = v25 + v26;
  v21[18] = v24;
  v21[19] = v25 + v26;
  v21[20] = v25;
  long long v28 = (unsigned __int16 *)(v7 + 8 * (v13 + v23 * v11));
  uint64_t v29 = v454;
  unint64_t v449 = v9 >> 3;
  uint64_t v457 = v23 - v454;
  uint64_t v30 = *(int *)(v22 + 104);
  int v31 = *(_DWORD *)(v22 + 108);
  int v32 = *(unsigned __int8 *)(v22 + 2);
  if (v32 == 6 || v32 == 1)
  {
    uint64_t v33 = v466;
    uint64_t v34 = v467;
    if (!v464.i64[0]) {
      goto LABEL_465;
    }
    long long v35 = 0;
    int v36 = 0;
    uint64_t v37 = *(int *)(v458 + 124);
    uint64_t v38 = (unsigned __int8 *)(v464.i64[0] + v30 + (int)v37 * (uint64_t)v31);
    uint64_t v29 = v454;
    uint64_t v456 = v37 - v454;
    int v39 = v459;
    long long v40 = v461;
  }
  else
  {
    uint64_t v34 = v467;
    if (v464.i64[0])
    {
      shape_enum_clip_alloc((uint64_t)v18, v19, (int *)v464.i64[0], 1, 1, 1, v30, v31, v4, v465);
      long long v40 = v461;
      if (!v41) {
        goto LABEL_465;
      }
      int v36 = 0;
      uint64_t v42 = (int)((v14 * v5 + 15) & 0xFFFFFFF0);
      if (!v14) {
        uint64_t v42 = 8 * v5;
      }
      uint64_t v456 = -v454;
      uint64_t v38 = (unsigned __int8 *)(v27 + v42 + 16);
      int v39 = v459;
      uint64_t v33 = v466;
      long long v35 = v41;
      while (1)
      {
LABEL_468:
        while (1)
        {
          int v447 = *((_DWORD *)v38 - 4);
          int v448 = v447 - v36;
          if (v447 <= v36) {
            break;
          }
          v465 -= v448;
          if (v465 < 1) {
            goto LABEL_463;
          }
          v33 += v40[16] * v448;
          v34 += v40[17] * v448;
          v28 += 4 * v449 * v448;
          int v36 = v447;
        }
        if (v36 < *((_DWORD *)v38 - 3) + v447) {
          break;
        }
        if (!shape_enum_clip_scan((uint64_t)v35, (_DWORD *)v38 - 4)) {
          goto LABEL_463;
        }
      }
      uint64_t v29 = v454;
    }
    else
    {
      uint64_t v38 = 0;
      long long v35 = 0;
      uint64_t v456 = 0;
      int v36 = 0;
      int v39 = v459;
      long long v40 = v461;
      uint64_t v33 = v466;
    }
  }
  int v43 = v35;
  int v44 = v460 ^ 0xFFFF;
  int32x2_t v45 = vdup_n_s32(v460 ^ 0xFFFFu);
  uint64_t v453 = (v4 - 1) + 1;
  uint64_t v452 = -v29;
  unint64_t v455 = v450 - 8;
  int32x2_t v46 = vdup_n_s32(0x101u);
  uint64x2_t v464 = (uint64x2_t)xmmword_1850CDDF0;
  uint64_t v47 = v43;
  while (2)
  {
    int v462 = v36;
    unint64_t v463 = v47;
    uint64_t v48 = (void (*)(void *, uint64_t, uint64_t, uint64_t))*v40;
    uint64_t v466 = v33;
    uint64_t v467 = v34;
    v48(v40, v33, v34, v4);
    uint64_t v49 = v40[20];
    uint64_t v50 = (unsigned char *)v40[18];
    unsigned int v51 = *((_DWORD *)v40 + 2);
    if (v51 == *((_DWORD *)v40 + 3))
    {
      if (v460 != 0xFFFF)
      {
        int v52 = v4;
        int v53 = (unsigned char *)v40[18];
        do
        {
          if (*v53)
          {
            unsigned int v54 = (unsigned __int16)*(void *)v49 * v44 + 0x8000;
            unsigned int v55 = (unsigned __int16)WORD2(*(void *)v49) * v44 + 0x8000;
            *(void *)uint64_t v49 = ((HIWORD(*(void *)v49)
                             - ((HIWORD(*(void *)v49) * v44
                               + 0x8000
                               + ((HIWORD(*(void *)v49) * v44 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(void *)v49) - ((v55 + HIWORD(v55)) >> 16)) << 32) | ((WORD1(*(void *)v49) - ((WORD1(*(void *)v49) * v44 + 0x8000 + ((WORD1(*(void *)v49) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(*(void *)v49 - ((v54 + HIWORD(v54)) >> 16));
          }
          ++v53;
          v49 += 8;
          --v52;
        }
        while (v52);
        v49 += 8 * v452;
        v50 += v453 + v452;
      }
    }
    else
    {
      uint64_t v56 = v40[19];
      int v57 = HIWORD(v51) & 0x3F;
      if (v57 == 16)
      {
        if (v460 == 0xFFFF)
        {
          uint64_t v95 = 0;
          do
          {
            if (v50[v95]) {
              *(void *)(v49 + 8 * v95) = *(void *)(v56 + 8 * v95);
            }
            ++v95;
          }
          while (v4 != v95);
        }
        else
        {
          uint64_t v73 = 0;
          do
          {
            if (v50[v73])
            {
              unint64_t v74 = *(void *)(v56 + 8 * v73);
              *(void *)(v49 + 8 * v73) = ((HIWORD(v74)
                                           - ((HIWORD(v74) * v44
                                             + 0x8000
                                             + ((HIWORD(v74) * v44 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v74) - ((WORD2(v74) * v44 + 0x8000 + ((WORD2(v74) * v44 + 0x8000) >> 16)) >> 16)) << 32) | ((WORD1(v74) - ((WORD1(v74) * v44 + 0x8000 + ((WORD1(v74) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v74 - (((unsigned __int16)v74 * v44 + 0x8000 + (((unsigned __int16)v74 * v44 + 0x8000) >> 16)) >> 16));
            }
            ++v73;
          }
          while (v4 != v73);
        }
      }
      else if (v57 == 32)
      {
        if (v460 == 0xFFFF)
        {
          uint64_t v84 = 0;
          int v85 = (float *)(v56 + 8);
          do
          {
            if (v50[v84])
            {
              float v86 = v85[1];
              if (v86 <= 0.0)
              {
                unint64_t v91 = 0;
              }
              else
              {
                float v87 = *(v85 - 2);
                LODWORD(v88) = (int)(float)((float)(v86 * 65535.0) + 0.5);
                if (v86 <= 1.0) {
                  uint64_t v88 = v88;
                }
                else {
                  uint64_t v88 = 0xFFFFLL;
                }
                LOWORD(v89) = v88;
                if (v86 > 1.0) {
                  float v86 = 1.0;
                }
                LOWORD(v90) = v88;
                if (v87 <= v86)
                {
                  if (v87 >= 0.0) {
                    int v90 = (int)(float)((float)(v87 * 65535.0) + 0.5);
                  }
                  else {
                    LOWORD(v90) = 0;
                  }
                }
                float v92 = *(v85 - 1);
                int v93 = v88;
                if (v92 <= v86)
                {
                  if (v92 >= 0.0) {
                    int v93 = (int)(float)((float)(v92 * 65535.0) + 0.5);
                  }
                  else {
                    int v93 = 0;
                  }
                }
                float v94 = *v85;
                if (*v85 <= v86)
                {
                  if (v94 >= 0.0) {
                    int v89 = (int)(float)((float)(v94 * 65535.0) + 0.5);
                  }
                  else {
                    LOWORD(v89) = 0;
                  }
                }
                unint64_t v91 = (v88 << 48) | ((unint64_t)(unsigned __int16)v89 << 32) | (v93 << 16) | (unsigned __int16)v90;
              }
              *(void *)(v49 + 8 * v84) = v91;
            }
            v85 += 4;
            ++v84;
          }
          while (v4 != v84);
        }
        else
        {
          uint64_t v58 = 0;
          int v59 = (float *)(v56 + 8);
          do
          {
            if (v50[v58])
            {
              float v60 = v59[1];
              if (v60 <= 0.0)
              {
                unint64_t v65 = 0;
              }
              else
              {
                float v61 = *(v59 - 2);
                int v62 = (int)(float)((float)(v60 * 65535.0) + 0.5);
                if (v60 > 1.0) {
                  int v62 = 0xFFFF;
                }
                int v63 = v62;
                if (v60 > 1.0) {
                  float v60 = 1.0;
                }
                int v64 = v62;
                if (v61 <= v60)
                {
                  if (v61 >= 0.0) {
                    int v64 = (int)(float)((float)(v61 * 65535.0) + 0.5);
                  }
                  else {
                    int v64 = 0;
                  }
                }
                float v66 = *(v59 - 1);
                int v67 = v62;
                if (v66 <= v60)
                {
                  if (v66 >= 0.0) {
                    int v67 = (int)(float)((float)(v66 * 65535.0) + 0.5);
                  }
                  else {
                    int v67 = 0;
                  }
                }
                float v68 = *v59;
                if (*v59 <= v60)
                {
                  if (v68 >= 0.0) {
                    int v63 = (int)(float)((float)(v68 * 65535.0) + 0.5);
                  }
                  else {
                    int v63 = 0;
                  }
                }
                int v69 = v64 * v44;
                unsigned int v70 = v67 * v44;
                unsigned int v71 = v63 * v44;
                unsigned int v72 = v62 * v44;
                if ((v64 * v44) >= 0xFFFE8000) {
                  int v69 = -98304;
                }
                if (v70 >= 0xFFFE8000) {
                  unsigned int v70 = -98304;
                }
                if (v71 >= 0xFFFE8000) {
                  unsigned int v71 = -98304;
                }
                if (v72 >= 0xFFFE8000) {
                  unsigned int v72 = -98304;
                }
                unint64_t v65 = ((unint64_t)(v62 - ((v72 + 0x8000 + ((v72 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(v63 - ((v71 + 0x8000 + ((v71 + 0x8000) >> 16)) >> 16)) << 32) | ((v67 - ((v70 + 0x8000 + ((v70 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v64 - ((v69 + 0x8000 + ((v69 + 0x8000) >> 16)) >> 16));
              }
              *(void *)(v49 + 8 * v58) = v65;
            }
            v59 += 4;
            ++v58;
          }
          while (v4 != v58);
        }
      }
      else if (v460 == 0xFFFF)
      {
        uint64_t v96 = 0;
        do
        {
          if (v50[v96])
          {
            unint64_t v97 = *(unsigned int *)(v56 + 4 * v96);
            int v98 = *(_DWORD *)(v56 + 4 * v96);
            *(void *)(v49 + 8 * v96) = ((unint64_t)(v98 | (v98 << 8)) << 48) | ((unint64_t)(BYTE1(v97) | (BYTE1(v97) << 8)) << 32) | v97 & 0xFF0000 | (BYTE2(v97) << 24) | (v97 >> 24) | (v97 >> 24 << 8);
          }
          ++v96;
        }
        while (v4 != v96);
      }
      else
      {
        uint64_t v75 = 0;
        do
        {
          if (v50[v75])
          {
            unsigned __int32 v76 = *(_DWORD *)(v56 + 4 * v75);
            HIDWORD(v77) = HIBYTE(v76);
            LODWORD(v77) = v76;
            v78.i32[0] = v76 >> 8;
            v78.i32[1] = v76;
            int32x2_t v79 = vmul_s32((int32x2_t)vand_s8(v78, (int8x8_t)0xFF000000FFLL), v46);
            uint32x2_t v80 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v79, v45);
            int8x8_t v81 = vand_s8((int8x8_t)vsub_s32(v79, (int32x2_t)vshr_n_u32(vsra_n_u32(v80, v80, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v82.i64[0] = v81.u32[0];
            v82.i64[1] = v81.u32[1];
            int8x16_t v83 = (int8x16_t)vshlq_u64(v82, v464);
            *(void *)(v49 + 8 * v75) = vorrq_s8(v83, (int8x16_t)vdupq_laneq_s64((int64x2_t)v83, 1)).u64[0] | (((BYTE2(v76) | (BYTE2(v76) << 8)) - (((BYTE2(v76) | (BYTE2(v76) << 8)) * v44 + 0x8000 + (((BYTE2(v76) | (BYTE2(v76) << 8)) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)((v77 >> 24) - (((v77 >> 24) * v44 + 0x8000 + (((v77 >> 24) * v44 + 0x8000) >> 16)) >> 16));
          }
          ++v75;
        }
        while (v4 != v75);
      }
    }
    switch(v39)
    {
      case 0:
        int v99 = v4;
        unint64_t v100 = v38;
        uint64_t v101 = v466;
        uint64_t v102 = v467;
        do
        {
          int v103 = *v50;
          if (*v50)
          {
            if (v38) {
              int v103 = ((unsigned __int16)(*v100 * (_WORD)v103 + ((*v100 * v103) >> 8) + 1) >> 8);
            }
            if (v103)
            {
              if (v103 == 255)
              {
                *(void *)long long v28 = 0;
              }
              else
              {
                unsigned int v104 = bswap32(v28[1] | (*v28 << 16));
                v105.i32[0] = (unsigned __int16)v104;
                v105.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v104), 0x10uLL).i32[1];
                v105.i64[1] = __PAIR64__(bswap32(v28[3]) >> 16, bswap32(v28[2]) >> 16);
                v106.i64[0] = 0x800000008000;
                v106.i64[1] = 0x800000008000;
                uint32x4_t v107 = (uint32x4_t)vmlaq_s32(v106, v105, vdupq_n_s32(v103 | (v103 << 8)));
                v105.i32[0] = v104;
                *(int8x8_t *)long long v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v105, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v107, v107, 0x10uLL), 0x10uLL))));
              }
            }
          }
          ++v50;
          v100 += v38 != 0;
          v28 += 4;
          --v99;
        }
        while (v99);
        uint64_t v38 = &v100[v456];
        v28 += 4 * v457;
        goto LABEL_420;
      case 1:
        int v108 = *v50;
        if (v38)
        {
          int32x2_t v109 = v50 + 1;
          int v110 = v4;
          do
          {
            if (v108)
            {
              unsigned int v111 = *v38 * v108 + ((*v38 * v108) >> 8) + 1;
              int32x2_t v112 = (unsigned __int16 *)v455;
              if (v455 >= (unint64_t)v28) {
                int32x2_t v112 = v28;
              }
              if ((unint64_t)v112 >= *(void *)(v458 + 40)) {
                uint32x2_t v113 = v112;
              }
              else {
                uint32x2_t v113 = *(unsigned __int16 **)(v458 + 40);
              }
              if (BYTE1(v111))
              {
                if (BYTE1(v111) == 255)
                {
                  uint64_t v114 = HIDWORD(*(void *)v49);
                  uint64_t v115 = HIWORD(*(void *)v49);
                  unsigned int v116 = bswap32(*(void *)v49);
                  *uint32x2_t v113 = HIWORD(v116);
                  v113[1] = v116;
                  v113[2] = bswap32(v114) >> 16;
                  v113[3] = __rev16(v115);
                }
                else
                {
                  RGBA64_DMplusDM(v113, *(void *)v49, (unsigned __int16)(257 * (v111 >> 8)), ((unint64_t)(bswap32(v113[2]) >> 16) << 32) | ((unint64_t)(bswap32(v113[3]) >> 16) << 48) | bswap32(v113[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v113) >> 16), (unsigned __int16)~(257 * (v111 >> 8)));
                }
              }
            }
            else
            {
              uint32x2_t v113 = v28;
            }
            int v117 = *v109++;
            int v108 = v117;
            v49 += 8;
            ++v38;
            long long v28 = v113 + 4;
            --v110;
          }
          while (v110);
          v38 += v456;
          uint64_t v102 = v467;
        }
        else
        {
          unint64_t v429 = v50 + 1;
          int v430 = v4;
          uint64_t v102 = v467;
          do
          {
            uint64_t v431 = (unsigned __int16 *)v455;
            if (v455 >= (unint64_t)v28) {
              uint64_t v431 = v28;
            }
            if ((unint64_t)v431 >= *(void *)(v458 + 40)) {
              uint32x2_t v113 = v431;
            }
            else {
              uint32x2_t v113 = *(unsigned __int16 **)(v458 + 40);
            }
            if (v108)
            {
              if (v108 == 255)
              {
                uint64_t v432 = HIDWORD(*(void *)v49);
                uint64_t v433 = HIWORD(*(void *)v49);
                unsigned int v434 = bswap32(*(void *)v49);
                *uint32x2_t v113 = HIWORD(v434);
                v113[1] = v434;
                v113[2] = bswap32(v432) >> 16;
                v113[3] = __rev16(v433);
              }
              else
              {
                RGBA64_DMplusDM(v113, *(void *)v49, v108 | (v108 << 8), ((unint64_t)(bswap32(v113[2]) >> 16) << 32) | ((unint64_t)(bswap32(v113[3]) >> 16) << 48) | bswap32(v113[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v113) >> 16), (v108 | (v108 << 8)) ^ 0xFFFF);
              }
            }
            int v435 = *v429++;
            int v108 = v435;
            v49 += 8;
            long long v28 = v113 + 4;
            --v430;
          }
          while (v430);
          uint64_t v38 = 0;
        }
        long long v28 = &v113[4 * v457 + 4];
        long long v40 = v461;
        uint64_t v101 = v466;
        goto LABEL_420;
      case 2:
        int v118 = *v50;
        if (v38)
        {
          uint64_t v119 = v50 + 1;
          int v120 = v4;
          while (1)
          {
            unint64_t v121 = v28;
            if (!v118) {
              goto LABEL_145;
            }
            unsigned int v122 = *v38 * v118 + ((*v38 * v118) >> 8) + 1;
            if (!BYTE1(v122)) {
              goto LABEL_145;
            }
            if (BYTE1(v122) == 255)
            {
              unint64_t v123 = *(void *)v49;
              uint64_t v124 = HIWORD(*(void *)v49);
              if (v124)
              {
                if (v124 != 0xFFFF)
                {
                  unint64_t v129 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                  unsigned int v130 = v124 ^ 0xFFFF;
                  goto LABEL_144;
                }
                unsigned int v125 = bswap32(v123);
                unsigned __int16 *v28 = HIWORD(v125);
                v28[1] = v125;
                v28[2] = bswap32(HIDWORD(v123)) >> 16;
                v28[3] = -1;
              }
            }
            else
            {
              uint64_t v127 = HIWORD(*(void *)v49);
              int v128 = (257 * (v122 >> 8)) ^ 0xFFFF;
              if ((_WORD)v127 != (v128 * v127 + 0x8000 + ((v128 * v127 + 0x8000) >> 16)) >> 16)
              {
                unint64_t v126 = *(void *)v49;
                unint64_t v123 = ((unint64_t)(v127
                                         - ((v128 * v127 + 0x8000 + ((v128 * v127 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v126) - ((WORD2(v126) * v128 + 0x8000 + ((WORD2(v126) * v128 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v126 - (((unsigned __int16)v126 * v128 + 0x8000 + (((unsigned __int16)v126 * v128 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v126) - ((WORD1(v126) * v128 + 0x8000 + ((WORD1(v126) * v128 + 0x8000) >> 16)) >> 16)) << 16);
                unint64_t v129 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                unsigned int v130 = (unsigned __int16)~(v127
                                         - ((v128 * v127 + 0x8000 + ((v128 * v127 + 0x8000) >> 16)) >> 16));
LABEL_144:
                RGBA64_DplusDM(v28, v123, v129, v130);
              }
            }
LABEL_145:
            int v131 = *v119++;
            int v118 = v131;
            v49 += 8;
            ++v38;
            v28 += 4;
            if (!--v120)
            {
              v38 += v456;
LABEL_461:
              long long v28 = &v121[4 * v457 + 4];
              goto LABEL_418;
            }
          }
        }
        int v436 = v50 + 1;
        int v437 = v4;
        while (1)
        {
          if (v118)
          {
            if (v118 == 255)
            {
              unint64_t v438 = *(void *)v49;
              uint64_t v439 = HIWORD(*(void *)v49);
              if (v439)
              {
                if (v439 != 0xFFFF)
                {
                  unint64_t v444 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                  unsigned int v445 = v439 ^ 0xFFFF;
                  goto LABEL_458;
                }
                unsigned int v440 = bswap32(v438);
                unsigned __int16 *v28 = HIWORD(v440);
                v28[1] = v440;
                v28[2] = bswap32(HIDWORD(v438)) >> 16;
                v28[3] = -1;
              }
            }
            else
            {
              uint64_t v442 = HIWORD(*(void *)v49);
              int v443 = (257 * v118) ^ 0xFFFF;
              if ((_WORD)v442 != (v443 * v442 + 0x8000 + ((v443 * v442 + 0x8000) >> 16)) >> 16)
              {
                unint64_t v441 = *(void *)v49;
                unint64_t v438 = ((unint64_t)(v442
                                         - ((v443 * v442 + 0x8000 + ((v443 * v442 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v441) - ((WORD2(v441) * v443 + 0x8000 + ((WORD2(v441) * v443 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v441 - (((unsigned __int16)v441 * v443 + 0x8000 + (((unsigned __int16)v441 * v443 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v441) - ((WORD1(v441) * v443 + 0x8000 + ((WORD1(v441) * v443 + 0x8000) >> 16)) >> 16)) << 16);
                unint64_t v444 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                unsigned int v445 = (unsigned __int16)~(v442
                                         - ((v443 * v442 + 0x8000 + ((v443 * v442 + 0x8000) >> 16)) >> 16));
LABEL_458:
                RGBA64_DplusDM(v28, v438, v444, v445);
              }
            }
          }
          int v446 = *v436++;
          int v118 = v446;
          v49 += 8;
          v28 += 4;
          if (!--v437)
          {
            uint64_t v38 = 0;
            unint64_t v121 = v28 - 4;
            goto LABEL_461;
          }
        }
      case 3:
        int v132 = v4;
        unsigned int v133 = v38;
        do
        {
          int v134 = *v50;
          if (*v50)
          {
            if (v38) {
              int v134 = ((unsigned __int16)(*v133 * (_WORD)v134 + ((*v133 * v134) >> 8) + 1) >> 8);
            }
            if (v134)
            {
              if (v134 == 255)
              {
                v135.i64[0] = *(void *)v49;
                v135.i16[1] = 0;
                v135.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(*(int32x2_t *)v49, 0), 0x10uLL).i32[1];
                v135.i32[2] = (unsigned __int16)WORD2(*(void *)v49);
                v135.i32[3] = HIWORD(*(void *)v49);
                v136.i64[0] = 0x800000008000;
                v136.i64[1] = 0x800000008000;
                uint32x4_t v137 = (uint32x4_t)vmlaq_s32(v136, v135, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(bswap32(~v28[3]) >> 16)));
                v135.i32[0] = *(void *)v49;
                v135.i32[2] = HIDWORD(*(void *)v49);
                *(int8x8_t *)long long v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v135, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v137, v137, 0x10uLL), 0x10uLL))));
              }
              else
              {
                uint64_t v138 = bswap32(v28[3]) >> 16;
                RGBA64_DMplusDM(v28, *(void *)v49, (v138 * (v134 | (v134 << 8))+ 0x8000+ ((v138 * (v134 | (v134 << 8)) + 0x8000) >> 16)) >> 16, (v138 << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), (v134 | (v134 << 8)) ^ 0xFFFF);
              }
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v132;
        }
        while (v132);
        goto LABEL_416;
      case 4:
        int v139 = v4;
        unsigned int v133 = v38;
        do
        {
          int v140 = *v50;
          if (*v50)
          {
            if (v38) {
              int v140 = ((unsigned __int16)(*v133 * (_WORD)v140 + ((*v133 * v140) >> 8) + 1) >> 8);
            }
            if (v140)
            {
              if (v140 == 255)
              {
                v141.i64[0] = *(void *)v49;
                v141.i16[1] = 0;
                v141.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(*(int32x2_t *)v49, 0), 0x10uLL).i32[1];
                v141.i32[2] = (unsigned __int16)WORD2(*(void *)v49);
                v141.i32[3] = HIWORD(*(void *)v49);
                v142.i64[0] = 0x800000008000;
                v142.i64[1] = 0x800000008000;
                uint32x4_t v143 = (uint32x4_t)vmlaq_s32(v142, v141, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(bswap32(v28[3]) >> 16)));
                v141.i32[0] = *(void *)v49;
                v141.i32[2] = HIDWORD(*(void *)v49);
                *(int8x8_t *)long long v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v141, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v143, v143, 0x10uLL), 0x10uLL))));
              }
              else
              {
                uint64_t v144 = bswap32(v28[3]) >> 16;
                RGBA64_DMplusDM(v28, *(void *)v49, ((v144 ^ 0xFFFF) * (v140 | (v140 << 8))+ 0x8000+ (((v144 ^ 0xFFFF) * (v140 | (v140 << 8)) + 0x8000) >> 16)) >> 16, (v144 << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), (v140 | (v140 << 8)) ^ 0xFFFF);
              }
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v139;
        }
        while (v139);
        goto LABEL_416;
      case 5:
        int v145 = v4;
        unsigned int v133 = v38;
        do
        {
          int v146 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v146 = ((unsigned __int16)(*v133 * (_WORD)v146
                                                            + ((*v133 * v146) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v147 = WORD1(*(void *)v49);
              int v148 = (v146 | (v146 << 8)) ^ 0xFFFF;
              unsigned int v149 = (unsigned __int16)*(void *)v49 * v148 + 0x8000;
              unsigned int v150 = (unsigned __int16)WORD2(*(void *)v49) * v148 + 0x8000;
              unsigned int v151 = v147 * v148 + 0x8000 + ((v147 * v148 + 0x8000) >> 16);
              uint64_t v152 = HIWORD(*(void *)v49)
                   - ((v148 * HIWORD(*(void *)v49)
                     + 0x8000
                     + ((v148 * HIWORD(*(void *)v49) + 0x8000) >> 16)) >> 16);
              uint64_t v153 = bswap32(v28[3]) >> 16;
              RGBA64_DMplusDM(v28, (v152 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(void *)v49)- ((v150 + HIWORD(v150)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v149 + HIWORD(v149)) >> 16)) | ((unsigned __int16)(v147 - HIWORD(v151)) << 16), v153, ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v153 << 48) | (__PAIR64__(bswap32(v28[1]) >> 16, bswap32(*v28)) >> 16), (unsigned __int16)~(_WORD)v152);
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v145;
        }
        while (v145);
        goto LABEL_416;
      case 6:
        int v154 = v4;
        uint32x2_t v155 = v38;
        do
        {
          int v156 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v156 = ((unsigned __int16)(*v155 * (_WORD)v156
                                                            + ((*v155 * v156) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v157 = bswap32(v28[3]);
              if (HIWORD(v157) != 0xFFFF)
              {
                if ((unsigned __int16)~HIWORD(v157) == 0xFFFF)
                {
                  v158.i64[0] = *(void *)v49;
                  v158.i16[1] = 0;
                  v158.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(*(int32x2_t *)v49, 0), 0x10uLL).i32[1];
                  v158.i32[2] = (unsigned __int16)WORD2(*(void *)v49);
                  v158.i32[3] = HIWORD(*(void *)v49);
                  v159.i64[0] = 0x800000008000;
                  v159.i64[1] = 0x800000008000;
                  uint32x4_t v160 = (uint32x4_t)vmlaq_s32(v159, v158, vdupq_n_s32((v156 | (v156 << 8)) ^ 0xFFFFu));
                  v158.i32[0] = *(void *)v49;
                  v158.i32[2] = HIDWORD(*(void *)v49);
                  *(int8x8_t *)long long v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v158, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v160, v160, 0x10uLL), 0x10uLL))));
                }
                else
                {
                  RGBA64_DplusDM(v28, ((unint64_t)HIWORD(v157) << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), *(void *)v49, (257 * v156 * (unsigned __int16)~HIWORD(v157)+ 0x8000+ ((257 * v156 * (unsigned __int16)~HIWORD(v157) + 0x8000) >> 16)) >> 16);
                }
              }
            }
          }
          ++v50;
          v49 += 8;
          v155 += v38 != 0;
          v28 += 4;
          --v154;
        }
        while (v154);
        uint64_t v38 = &v155[v456];
        v28 += 4 * v457;
        goto LABEL_418;
      case 7:
        int v161 = v4;
        unsigned int v133 = v38;
        do
        {
          int v162 = *v50;
          if (*v50)
          {
            if (v38) {
              int v162 = ((unsigned __int16)(*v133 * (_WORD)v162 + ((*v133 * v162) >> 8) + 1) >> 8);
            }
            if (v162)
            {
              if (v162 == 255)
              {
                unsigned int v163 = bswap32(v28[1] | (*v28 << 16));
                v164.i32[0] = (unsigned __int16)v163;
                v164.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v163), 0x10uLL).i32[1];
                v164.i64[1] = __PAIR64__(bswap32(v28[3]) >> 16, bswap32(v28[2]) >> 16);
                v165.i64[0] = 0x800000008000;
                v165.i64[1] = 0x800000008000;
                uint32x4_t v166 = (uint32x4_t)vmlaq_s32(v165, v164, vdupq_n_s32(*(unsigned __int16 *)(v49 + 6) ^ 0xFFFFu));
                v164.i32[0] = v163;
                *(int8x8_t *)long long v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v164, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v166, v166, 0x10uLL), 0x10uLL))));
              }
              else
              {
                int v167 = v162 | (v162 << 8);
                unsigned int v168 = *(unsigned __int16 *)(v49 + 6) * v167 + 0x8000;
                unint64_t v169 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                RGBA64_DMplusDM(v28, v169, (v168 + HIWORD(v168)) >> 16, v169, v167 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v161;
        }
        while (v161);
        goto LABEL_416;
      case 8:
        int v170 = v4;
        unsigned int v133 = v38;
        do
        {
          int v171 = *v50;
          if (*v50)
          {
            if (v38) {
              int v171 = ((unsigned __int16)(*v133 * (_WORD)v171 + ((*v133 * v171) >> 8) + 1) >> 8);
            }
            if (v171)
            {
              if (v171 == 255)
              {
                unsigned int v172 = bswap32(v28[1] | (*v28 << 16));
                v173.i32[0] = (unsigned __int16)v172;
                v173.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v172), 0x10uLL).i32[1];
                v173.i64[1] = __PAIR64__(bswap32(v28[3]) >> 16, bswap32(v28[2]) >> 16);
                v174.i64[0] = 0x800000008000;
                v174.i64[1] = 0x800000008000;
                uint32x4_t v175 = (uint32x4_t)vmlaq_s32(v174, v173, vdupq_n_s32(*(unsigned __int16 *)(v49 + 6)));
                v173.i32[0] = v172;
                *(int8x8_t *)long long v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v173, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v175, v175, 0x10uLL), 0x10uLL))));
              }
              else
              {
                int v176 = v171 | (v171 << 8);
                unsigned int v177 = (*(unsigned __int16 *)(v49 + 6) ^ 0xFFFF) * v176 + 0x8000;
                unint64_t v178 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                RGBA64_DMplusDM(v28, v178, (v177 + HIWORD(v177)) >> 16, v178, v176 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v170;
        }
        while (v170);
        goto LABEL_416;
      case 9:
        int v179 = v4;
        unsigned int v133 = v38;
        do
        {
          int v180 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v180 = ((unsigned __int16)(*v133 * (_WORD)v180
                                                            + ((*v133 * v180) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v181 = WORD1(*(void *)v49);
              unsigned __int16 v182 = ~(v180 | ((_WORD)v180 << 8));
              int v183 = v182;
              unsigned int v184 = (unsigned __int16)*(void *)v49 * v182 + 0x8000;
              unsigned int v185 = (unsigned __int16)WORD2(*(void *)v49) * v182 + 0x8000;
              unsigned int v186 = v181 * v183 + 0x8000 + ((v181 * v183 + 0x8000) >> 16);
              uint64_t v187 = HIWORD(*(void *)v49)
                   - ((HIWORD(*(void *)v49) * v183
                     + 0x8000
                     + ((HIWORD(*(void *)v49) * v183 + 0x8000) >> 16)) >> 16);
              uint64_t v188 = bswap32(v28[3]) >> 16;
              RGBA64_DMplusDM(v28, (v187 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(void *)v49)- ((v185 + HIWORD(v185)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v184 + HIWORD(v184)) >> 16)) | ((unsigned __int16)(v181 - HIWORD(v186)) << 16), v188 ^ 0xFFFF, (v188 << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), (unsigned __int16)(v187 + v182));
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v179;
        }
        while (v179);
        goto LABEL_416;
      case 10:
        int v189 = v4;
        unsigned int v133 = v38;
        do
        {
          int v190 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v190 = ((unsigned __int16)(*v133 * (_WORD)v190
                                                            + ((*v133 * v190) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v191 = WORD1(*(void *)v49);
              int v192 = (v190 | (v190 << 8)) ^ 0xFFFF;
              unsigned int v193 = (unsigned __int16)*(void *)v49 * v192 + 0x8000;
              unsigned int v194 = (unsigned __int16)WORD2(*(void *)v49) * v192 + 0x8000;
              unsigned int v195 = v191 * v192 + 0x8000 + ((v191 * v192 + 0x8000) >> 16);
              uint64_t v196 = HIWORD(*(void *)v49)
                   - ((v192 * HIWORD(*(void *)v49)
                     + 0x8000
                     + ((v192 * HIWORD(*(void *)v49) + 0x8000) >> 16)) >> 16);
              uint64_t v197 = bswap32(v28[3]) >> 16;
              RGBA64_DMplusDM(v28, (v196 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(void *)v49)- ((v194 + HIWORD(v194)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v193 + HIWORD(v193)) >> 16)) | ((unsigned __int16)(v191 - HIWORD(v195)) << 16), v197 ^ 0xFFFF, (v197 << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), (unsigned __int16)~(_WORD)v196);
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v189;
        }
        while (v189);
        goto LABEL_416;
      case 11:
        int v198 = v4;
        unsigned int v133 = v38;
        do
        {
          int v199 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v199 = ((unsigned __int16)(*v133 * (_WORD)v199
                                                            + ((*v133 * v199) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v200 = WORD1(*(void *)v49);
              int v201 = (v199 | (v199 << 8)) ^ 0xFFFF;
              unsigned int v202 = (unsigned __int16)*(void *)v49 * v201 + 0x8000;
              unsigned int v203 = (unsigned __int16)WORD2(*(void *)v49) * v201 + 0x8000;
              unsigned int v204 = v200 * v201 + 0x8000 + ((v200 * v201 + 0x8000) >> 16);
              uint64_t v205 = HIWORD(*(void *)v49)
                   - ((v201 * HIWORD(*(void *)v49)
                     + 0x8000
                     + ((v201 * HIWORD(*(void *)v49) + 0x8000) >> 16)) >> 16);
              unsigned int v206 = (unsigned __int16)v205;
              unint64_t v207 = (v205 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(void *)v49)
                                                                        - ((v203 + HIWORD(v203)) >> 16)) << 32) | (unsigned __int16)(*(void *)v49 - ((v202 + HIWORD(v202)) >> 16)) | ((unsigned __int16)(v200 - HIWORD(v204)) << 16);
              uint64_t v208 = bswap32(v28[3]) >> 16;
              unint64_t v209 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v208 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
              if (v468) {
                unsigned __int16 v210 = v208;
              }
              else {
                unsigned __int16 v210 = -1;
              }
              RGBA64_DAplusdDA(v28, v209, v210, v207, v206);
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v198;
        }
        while (v198);
        goto LABEL_416;
      case 12:
        int v211 = v4;
        unsigned int v133 = v38;
        do
        {
          int v212 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v212 = ((unsigned __int16)(*v133 * (_WORD)v212
                                                            + ((*v133 * v212) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v213 = WORD1(*(void *)v49);
              uint64_t v214 = HIWORD(*(void *)v49);
              int v215 = (v212 | (v212 << 8)) ^ 0xFFFF;
              unsigned int v216 = (unsigned __int16)*(void *)v49 * v215 + 0x8000;
              unsigned int v217 = (unsigned __int16)WORD2(*(void *)v49) * v215 + 0x8000;
              RGBA64_DpluslD(v28, ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), ((unint64_t)(v214- ((v215 * v214 + 0x8000 + ((v215 * v214 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(void *)v49) - ((v217 + HIWORD(v217)) >> 16)) << 32) | ((v213 - ((v213 * v215 + 0x8000 + ((v213 * v215 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(*(void *)v49 - ((v216 + HIWORD(v216)) >> 16)));
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v211;
        }
        while (v211);
        goto LABEL_416;
      case 13:
        int v218 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v219 = *v50;
          if (!*v50) {
            goto LABEL_246;
          }
          if (v38)
          {
            int v219 = ((unsigned __int16)(*v133 * (_WORD)v219 + ((*v133 * v219) >> 8) + 1) >> 8);
            if (!v219) {
              goto LABEL_246;
            }
          }
          unint64_t v220 = *(void *)v49;
          uint64_t v221 = HIWORD(*(void *)v49);
          int v222 = (v219 | (v219 << 8)) ^ 0xFFFF;
          unint64_t v223 = v221
               - ((v222 * v221 + 0x8000 + ((v222 * v221 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v221 == (v222 * v221 + 0x8000 + ((v222 * v221 + 0x8000) >> 16)) >> 16) {
            goto LABEL_246;
          }
          unsigned int v224 = WORD2(v220) * v222 + 0x8000 + ((WORD2(v220) * v222 + 0x8000) >> 16);
          unsigned int v225 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v222
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v222 + 0x8000) >> 16)) >> 16);
          unsigned int v226 = WORD1(v220)
               - ((WORD1(v220) * v222 + 0x8000 + ((WORD1(v220) * v222 + 0x8000) >> 16)) >> 16);
          unsigned int v227 = HIDWORD(v220) - HIWORD(v224);
          uint64_t v228 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v229 = v228;
          if (v28[3]) {
            goto LABEL_244;
          }
          unsigned __int16 *v28 = bswap32(v225) >> 16;
          v28[1] = bswap32(v226) >> 16;
          v28[2] = bswap32(v227) >> 16;
LABEL_245:
          v28[3] = bswap32(v223) >> 16;
LABEL_246:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v218) {
            goto LABEL_416;
          }
        }
        unsigned int v229 = 0xFFFF;
LABEL_244:
        unint64_t v230 = PDAmultiplyPDA_14785(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v228 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v229, (unsigned __int16)v225 | ((unsigned __int16)v226 << 16) | (v223 << 48) | ((unint64_t)(unsigned __int16)v227 << 32), (unsigned __int16)v223);
        unint64_t v223 = HIWORD(v230);
        unsigned int v231 = bswap32(v230);
        unsigned __int16 *v28 = HIWORD(v231);
        v28[1] = v231;
        v28[2] = bswap32(HIDWORD(v230)) >> 16;
        goto LABEL_245;
      case 14:
        int v232 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v233 = *v50;
          if (!*v50) {
            goto LABEL_259;
          }
          if (v38)
          {
            int v233 = ((unsigned __int16)(*v133 * (_WORD)v233 + ((*v133 * v233) >> 8) + 1) >> 8);
            if (!v233) {
              goto LABEL_259;
            }
          }
          unint64_t v234 = *(void *)v49;
          uint64_t v235 = HIWORD(*(void *)v49);
          int v236 = (v233 | (v233 << 8)) ^ 0xFFFF;
          unint64_t v237 = v235
               - ((v236 * v235 + 0x8000 + ((v236 * v235 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v235 == (v236 * v235 + 0x8000 + ((v236 * v235 + 0x8000) >> 16)) >> 16) {
            goto LABEL_259;
          }
          unsigned int v238 = WORD2(v234) * v236 + 0x8000 + ((WORD2(v234) * v236 + 0x8000) >> 16);
          unsigned int v239 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v236
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v236 + 0x8000) >> 16)) >> 16);
          unsigned int v240 = WORD1(v234)
               - ((WORD1(v234) * v236 + 0x8000 + ((WORD1(v234) * v236 + 0x8000) >> 16)) >> 16);
          unsigned int v241 = HIDWORD(v234) - HIWORD(v238);
          uint64_t v242 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v243 = v242;
          if (v28[3]) {
            goto LABEL_257;
          }
          unsigned __int16 *v28 = bswap32(v239) >> 16;
          v28[1] = bswap32(v240) >> 16;
          v28[2] = bswap32(v241) >> 16;
LABEL_258:
          v28[3] = bswap32(v237) >> 16;
LABEL_259:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v232) {
            goto LABEL_416;
          }
        }
        unsigned int v243 = 0xFFFF;
LABEL_257:
        unint64_t v244 = PDAscreenPDA_14786(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v242 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v243, (unsigned __int16)v239 | ((unsigned __int16)v240 << 16) | (v237 << 48) | ((unint64_t)(unsigned __int16)v241 << 32), (unsigned __int16)v237);
        unint64_t v237 = HIWORD(v244);
        unsigned int v245 = bswap32(v244);
        unsigned __int16 *v28 = HIWORD(v245);
        v28[1] = v245;
        v28[2] = bswap32(HIDWORD(v244)) >> 16;
        goto LABEL_258;
      case 15:
        int v246 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v247 = *v50;
          if (!*v50) {
            goto LABEL_272;
          }
          if (v38)
          {
            int v247 = ((unsigned __int16)(*v133 * (_WORD)v247 + ((*v133 * v247) >> 8) + 1) >> 8);
            if (!v247) {
              goto LABEL_272;
            }
          }
          unint64_t v248 = *(void *)v49;
          uint64_t v249 = HIWORD(*(void *)v49);
          int v250 = (v247 | (v247 << 8)) ^ 0xFFFF;
          unint64_t v251 = v249
               - ((v250 * v249 + 0x8000 + ((v250 * v249 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v249 == (v250 * v249 + 0x8000 + ((v250 * v249 + 0x8000) >> 16)) >> 16) {
            goto LABEL_272;
          }
          unsigned int v252 = WORD2(v248) * v250 + 0x8000 + ((WORD2(v248) * v250 + 0x8000) >> 16);
          unsigned int v253 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v250
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v250 + 0x8000) >> 16)) >> 16);
          unsigned int v254 = WORD1(v248)
               - ((WORD1(v248) * v250 + 0x8000 + ((WORD1(v248) * v250 + 0x8000) >> 16)) >> 16);
          unsigned int v255 = HIDWORD(v248) - HIWORD(v252);
          uint64_t v256 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v257 = v256;
          if (v28[3]) {
            goto LABEL_270;
          }
          unsigned __int16 *v28 = bswap32(v253) >> 16;
          v28[1] = bswap32(v254) >> 16;
          v28[2] = bswap32(v255) >> 16;
LABEL_271:
          v28[3] = bswap32(v251) >> 16;
LABEL_272:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v246) {
            goto LABEL_416;
          }
        }
        unsigned int v257 = 0xFFFF;
LABEL_270:
        unint64_t v258 = PDAoverlayPDA_14787(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v256 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v257, (unsigned __int16)v253 | ((unsigned __int16)v254 << 16) | (v251 << 48) | ((unint64_t)(unsigned __int16)v255 << 32), (unsigned __int16)v251);
        unint64_t v251 = HIWORD(v258);
        unsigned int v259 = bswap32(v258);
        unsigned __int16 *v28 = HIWORD(v259);
        v28[1] = v259;
        v28[2] = bswap32(HIDWORD(v258)) >> 16;
        goto LABEL_271;
      case 16:
        int v260 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v261 = *v50;
          if (!*v50) {
            goto LABEL_285;
          }
          if (v38)
          {
            int v261 = ((unsigned __int16)(*v133 * (_WORD)v261 + ((*v133 * v261) >> 8) + 1) >> 8);
            if (!v261) {
              goto LABEL_285;
            }
          }
          unint64_t v262 = *(void *)v49;
          uint64_t v263 = HIWORD(*(void *)v49);
          int v264 = (v261 | (v261 << 8)) ^ 0xFFFF;
          unint64_t v265 = v263
               - ((v264 * v263 + 0x8000 + ((v264 * v263 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v263 == (v264 * v263 + 0x8000 + ((v264 * v263 + 0x8000) >> 16)) >> 16) {
            goto LABEL_285;
          }
          unsigned int v266 = WORD2(v262) * v264 + 0x8000 + ((WORD2(v262) * v264 + 0x8000) >> 16);
          unsigned int v267 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v264
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v264 + 0x8000) >> 16)) >> 16);
          unsigned int v268 = WORD1(v262)
               - ((WORD1(v262) * v264 + 0x8000 + ((WORD1(v262) * v264 + 0x8000) >> 16)) >> 16);
          unsigned int v269 = HIDWORD(v262) - HIWORD(v266);
          uint64_t v270 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v271 = v270;
          if (v28[3]) {
            goto LABEL_283;
          }
          unsigned __int16 *v28 = bswap32(v267) >> 16;
          v28[1] = bswap32(v268) >> 16;
          v28[2] = bswap32(v269) >> 16;
LABEL_284:
          v28[3] = bswap32(v265) >> 16;
LABEL_285:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v260) {
            goto LABEL_416;
          }
        }
        unsigned int v271 = 0xFFFF;
LABEL_283:
        unint64_t v272 = PDAdarkenPDA_14789(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v270 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v271, (unsigned __int16)v267 | ((unsigned __int16)v268 << 16) | (v265 << 48) | ((unint64_t)(unsigned __int16)v269 << 32), (unsigned __int16)v265);
        unint64_t v265 = HIWORD(v272);
        unsigned int v273 = bswap32(v272);
        unsigned __int16 *v28 = HIWORD(v273);
        v28[1] = v273;
        v28[2] = bswap32(HIDWORD(v272)) >> 16;
        goto LABEL_284;
      case 17:
        int v274 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v275 = *v50;
          if (!*v50) {
            goto LABEL_298;
          }
          if (v38)
          {
            int v275 = ((unsigned __int16)(*v133 * (_WORD)v275 + ((*v133 * v275) >> 8) + 1) >> 8);
            if (!v275) {
              goto LABEL_298;
            }
          }
          unint64_t v276 = *(void *)v49;
          uint64_t v277 = HIWORD(*(void *)v49);
          int v278 = (v275 | (v275 << 8)) ^ 0xFFFF;
          unint64_t v279 = v277
               - ((v278 * v277 + 0x8000 + ((v278 * v277 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v277 == (v278 * v277 + 0x8000 + ((v278 * v277 + 0x8000) >> 16)) >> 16) {
            goto LABEL_298;
          }
          unsigned int v280 = WORD2(v276) * v278 + 0x8000 + ((WORD2(v276) * v278 + 0x8000) >> 16);
          unsigned int v281 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v278
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v278 + 0x8000) >> 16)) >> 16);
          unsigned int v282 = WORD1(v276)
               - ((WORD1(v276) * v278 + 0x8000 + ((WORD1(v276) * v278 + 0x8000) >> 16)) >> 16);
          unsigned int v283 = HIDWORD(v276) - HIWORD(v280);
          uint64_t v284 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v285 = v284;
          if (v28[3]) {
            goto LABEL_296;
          }
          unsigned __int16 *v28 = bswap32(v281) >> 16;
          v28[1] = bswap32(v282) >> 16;
          v28[2] = bswap32(v283) >> 16;
LABEL_297:
          v28[3] = bswap32(v279) >> 16;
LABEL_298:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v274) {
            goto LABEL_416;
          }
        }
        unsigned int v285 = 0xFFFF;
LABEL_296:
        unint64_t v286 = PDAlightenPDA_14788(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v284 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v285, (unsigned __int16)v281 | ((unsigned __int16)v282 << 16) | (v279 << 48) | ((unint64_t)(unsigned __int16)v283 << 32), (unsigned __int16)v279);
        unint64_t v279 = HIWORD(v286);
        unsigned int v287 = bswap32(v286);
        unsigned __int16 *v28 = HIWORD(v287);
        v28[1] = v287;
        v28[2] = bswap32(HIDWORD(v286)) >> 16;
        goto LABEL_297;
      case 18:
        int v288 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v289 = *v50;
          if (!*v50) {
            goto LABEL_311;
          }
          if (v38)
          {
            int v289 = ((unsigned __int16)(*v133 * (_WORD)v289 + ((*v133 * v289) >> 8) + 1) >> 8);
            if (!v289) {
              goto LABEL_311;
            }
          }
          unint64_t v290 = *(void *)v49;
          uint64_t v291 = HIWORD(*(void *)v49);
          int v292 = (v289 | (v289 << 8)) ^ 0xFFFF;
          unint64_t v293 = v291
               - ((v292 * v291 + 0x8000 + ((v292 * v291 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v291 == (v292 * v291 + 0x8000 + ((v292 * v291 + 0x8000) >> 16)) >> 16) {
            goto LABEL_311;
          }
          unsigned int v294 = WORD2(v290) * v292 + 0x8000 + ((WORD2(v290) * v292 + 0x8000) >> 16);
          unsigned int v295 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v292
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v292 + 0x8000) >> 16)) >> 16);
          unsigned int v296 = WORD1(v290)
               - ((WORD1(v290) * v292 + 0x8000 + ((WORD1(v290) * v292 + 0x8000) >> 16)) >> 16);
          unsigned int v297 = HIDWORD(v290) - HIWORD(v294);
          uint64_t v298 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v299 = v298;
          if (v28[3]) {
            goto LABEL_309;
          }
          unsigned __int16 *v28 = bswap32(v295) >> 16;
          v28[1] = bswap32(v296) >> 16;
          v28[2] = bswap32(v297) >> 16;
LABEL_310:
          v28[3] = bswap32(v293) >> 16;
LABEL_311:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v288) {
            goto LABEL_416;
          }
        }
        unsigned int v299 = 0xFFFF;
LABEL_309:
        unint64_t v300 = PDAcolordodgePDA_14790(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v298 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v299, (unsigned __int16)v295 | ((unsigned __int16)v296 << 16) | (v293 << 48) | ((unint64_t)(unsigned __int16)v297 << 32), (unsigned __int16)v293);
        unint64_t v293 = HIWORD(v300);
        unsigned int v301 = bswap32(v300);
        unsigned __int16 *v28 = HIWORD(v301);
        v28[1] = v301;
        v28[2] = bswap32(HIDWORD(v300)) >> 16;
        goto LABEL_310;
      case 19:
        int v302 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v303 = *v50;
          if (!*v50) {
            goto LABEL_324;
          }
          if (v38)
          {
            int v303 = ((unsigned __int16)(*v133 * (_WORD)v303 + ((*v133 * v303) >> 8) + 1) >> 8);
            if (!v303) {
              goto LABEL_324;
            }
          }
          unint64_t v304 = *(void *)v49;
          uint64_t v305 = HIWORD(*(void *)v49);
          int v306 = (v303 | (v303 << 8)) ^ 0xFFFF;
          unint64_t v307 = v305
               - ((v306 * v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v305 == (v306 * v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16) {
            goto LABEL_324;
          }
          unsigned int v308 = WORD2(v304) * v306 + 0x8000 + ((WORD2(v304) * v306 + 0x8000) >> 16);
          unsigned int v309 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v306
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v306 + 0x8000) >> 16)) >> 16);
          unsigned int v310 = WORD1(v304)
               - ((WORD1(v304) * v306 + 0x8000 + ((WORD1(v304) * v306 + 0x8000) >> 16)) >> 16);
          unsigned int v311 = HIDWORD(v304) - HIWORD(v308);
          uint64_t v312 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v313 = v312;
          if (v28[3]) {
            goto LABEL_322;
          }
          unsigned __int16 *v28 = bswap32(v309) >> 16;
          v28[1] = bswap32(v310) >> 16;
          v28[2] = bswap32(v311) >> 16;
LABEL_323:
          v28[3] = bswap32(v307) >> 16;
LABEL_324:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v302) {
            goto LABEL_416;
          }
        }
        unsigned int v313 = 0xFFFF;
LABEL_322:
        unint64_t v314 = PDAcolorburnPDA_14791(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v312 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v313, (unsigned __int16)v309 | ((unsigned __int16)v310 << 16) | (v307 << 48) | ((unint64_t)(unsigned __int16)v311 << 32), (unsigned __int16)v307);
        unint64_t v307 = HIWORD(v314);
        unsigned int v315 = bswap32(v314);
        unsigned __int16 *v28 = HIWORD(v315);
        v28[1] = v315;
        v28[2] = bswap32(HIDWORD(v314)) >> 16;
        goto LABEL_323;
      case 20:
        int v316 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v317 = *v50;
          if (!*v50) {
            goto LABEL_337;
          }
          if (v38)
          {
            int v317 = ((unsigned __int16)(*v133 * (_WORD)v317 + ((*v133 * v317) >> 8) + 1) >> 8);
            if (!v317) {
              goto LABEL_337;
            }
          }
          unint64_t v318 = *(void *)v49;
          uint64_t v319 = HIWORD(*(void *)v49);
          int v320 = (v317 | (v317 << 8)) ^ 0xFFFF;
          unint64_t v321 = v319
               - ((v320 * v319 + 0x8000 + ((v320 * v319 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v319 == (v320 * v319 + 0x8000 + ((v320 * v319 + 0x8000) >> 16)) >> 16) {
            goto LABEL_337;
          }
          unsigned int v322 = WORD2(v318) * v320 + 0x8000 + ((WORD2(v318) * v320 + 0x8000) >> 16);
          unsigned int v323 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v320
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v320 + 0x8000) >> 16)) >> 16);
          unsigned int v324 = WORD1(v318)
               - ((WORD1(v318) * v320 + 0x8000 + ((WORD1(v318) * v320 + 0x8000) >> 16)) >> 16);
          unsigned int v325 = HIDWORD(v318) - HIWORD(v322);
          uint64_t v326 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v327 = v326;
          if (v28[3]) {
            goto LABEL_335;
          }
          unsigned __int16 *v28 = bswap32(v323) >> 16;
          v28[1] = bswap32(v324) >> 16;
          v28[2] = bswap32(v325) >> 16;
LABEL_336:
          v28[3] = bswap32(v321) >> 16;
LABEL_337:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v316) {
            goto LABEL_416;
          }
        }
        unsigned int v327 = 0xFFFF;
LABEL_335:
        unint64_t v328 = PDAsoftlightPDA_14793(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v326 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v327, (unsigned __int16)v323 | ((unsigned __int16)v324 << 16) | (v321 << 48) | ((unint64_t)(unsigned __int16)v325 << 32), (unsigned __int16)v321);
        unint64_t v321 = HIWORD(v328);
        unsigned int v329 = bswap32(v328);
        unsigned __int16 *v28 = HIWORD(v329);
        v28[1] = v329;
        v28[2] = bswap32(HIDWORD(v328)) >> 16;
        goto LABEL_336;
      case 21:
        int v330 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v331 = *v50;
          if (!*v50) {
            goto LABEL_350;
          }
          if (v38)
          {
            int v331 = ((unsigned __int16)(*v133 * (_WORD)v331 + ((*v133 * v331) >> 8) + 1) >> 8);
            if (!v331) {
              goto LABEL_350;
            }
          }
          unint64_t v332 = *(void *)v49;
          uint64_t v333 = HIWORD(*(void *)v49);
          int v334 = (v331 | (v331 << 8)) ^ 0xFFFF;
          unint64_t v335 = v333
               - ((v334 * v333 + 0x8000 + ((v334 * v333 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v333 == (v334 * v333 + 0x8000 + ((v334 * v333 + 0x8000) >> 16)) >> 16) {
            goto LABEL_350;
          }
          unsigned int v336 = WORD2(v332) * v334 + 0x8000 + ((WORD2(v332) * v334 + 0x8000) >> 16);
          unsigned int v337 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v334
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v334 + 0x8000) >> 16)) >> 16);
          unsigned int v338 = WORD1(v332)
               - ((WORD1(v332) * v334 + 0x8000 + ((WORD1(v332) * v334 + 0x8000) >> 16)) >> 16);
          unsigned int v339 = HIDWORD(v332) - HIWORD(v336);
          uint64_t v340 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v341 = v340;
          if (v28[3]) {
            goto LABEL_348;
          }
          unsigned __int16 *v28 = bswap32(v337) >> 16;
          v28[1] = bswap32(v338) >> 16;
          v28[2] = bswap32(v339) >> 16;
LABEL_349:
          v28[3] = bswap32(v335) >> 16;
LABEL_350:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v330) {
            goto LABEL_416;
          }
        }
        unsigned int v341 = 0xFFFF;
LABEL_348:
        unint64_t v342 = PDAhardlightPDA_14792(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v340 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v341, (unsigned __int16)v337 | ((unsigned __int16)v338 << 16) | (v335 << 48) | ((unint64_t)(unsigned __int16)v339 << 32), (unsigned __int16)v335);
        unint64_t v335 = HIWORD(v342);
        unsigned int v343 = bswap32(v342);
        unsigned __int16 *v28 = HIWORD(v343);
        v28[1] = v343;
        v28[2] = bswap32(HIDWORD(v342)) >> 16;
        goto LABEL_349;
      case 22:
        int v344 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v345 = *v50;
          if (!*v50) {
            goto LABEL_363;
          }
          if (v38)
          {
            int v345 = ((unsigned __int16)(*v133 * (_WORD)v345 + ((*v133 * v345) >> 8) + 1) >> 8);
            if (!v345) {
              goto LABEL_363;
            }
          }
          unint64_t v346 = *(void *)v49;
          uint64_t v347 = HIWORD(*(void *)v49);
          int v348 = (v345 | (v345 << 8)) ^ 0xFFFF;
          unint64_t v349 = v347
               - ((v348 * v347 + 0x8000 + ((v348 * v347 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v347 == (v348 * v347 + 0x8000 + ((v348 * v347 + 0x8000) >> 16)) >> 16) {
            goto LABEL_363;
          }
          unsigned int v350 = WORD2(v346) * v348 + 0x8000 + ((WORD2(v346) * v348 + 0x8000) >> 16);
          unsigned int v351 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v348
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v348 + 0x8000) >> 16)) >> 16);
          unsigned int v352 = WORD1(v346)
               - ((WORD1(v346) * v348 + 0x8000 + ((WORD1(v346) * v348 + 0x8000) >> 16)) >> 16);
          unsigned int v353 = HIDWORD(v346) - HIWORD(v350);
          uint64_t v354 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v355 = v354;
          if (v28[3]) {
            goto LABEL_361;
          }
          unsigned __int16 *v28 = bswap32(v351) >> 16;
          v28[1] = bswap32(v352) >> 16;
          v28[2] = bswap32(v353) >> 16;
LABEL_362:
          v28[3] = bswap32(v349) >> 16;
LABEL_363:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v344) {
            goto LABEL_416;
          }
        }
        unsigned int v355 = 0xFFFF;
LABEL_361:
        unint64_t v356 = PDAdifferencePDA_14794(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v354 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v355, (unsigned __int16)v351 | ((unsigned __int16)v352 << 16) | (v349 << 48) | ((unint64_t)(unsigned __int16)v353 << 32), (unsigned __int16)v349);
        unint64_t v349 = HIWORD(v356);
        unsigned int v357 = bswap32(v356);
        unsigned __int16 *v28 = HIWORD(v357);
        v28[1] = v357;
        v28[2] = bswap32(HIDWORD(v356)) >> 16;
        goto LABEL_362;
      case 23:
        int v358 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v359 = *v50;
          if (!*v50) {
            goto LABEL_376;
          }
          if (v38)
          {
            int v359 = ((unsigned __int16)(*v133 * (_WORD)v359 + ((*v133 * v359) >> 8) + 1) >> 8);
            if (!v359) {
              goto LABEL_376;
            }
          }
          unint64_t v360 = *(void *)v49;
          uint64_t v361 = HIWORD(*(void *)v49);
          int v362 = (v359 | (v359 << 8)) ^ 0xFFFF;
          unint64_t v363 = v361
               - ((v362 * v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v361 == (v362 * v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16) {
            goto LABEL_376;
          }
          unsigned int v364 = WORD2(v360) * v362 + 0x8000 + ((WORD2(v360) * v362 + 0x8000) >> 16);
          unsigned int v365 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v362
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v362 + 0x8000) >> 16)) >> 16);
          unsigned int v366 = WORD1(v360)
               - ((WORD1(v360) * v362 + 0x8000 + ((WORD1(v360) * v362 + 0x8000) >> 16)) >> 16);
          unsigned int v367 = HIDWORD(v360) - HIWORD(v364);
          uint64_t v368 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v369 = v368;
          if (v28[3]) {
            goto LABEL_374;
          }
          unsigned __int16 *v28 = bswap32(v365) >> 16;
          v28[1] = bswap32(v366) >> 16;
          v28[2] = bswap32(v367) >> 16;
LABEL_375:
          v28[3] = bswap32(v363) >> 16;
LABEL_376:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v358) {
            goto LABEL_416;
          }
        }
        unsigned int v369 = 0xFFFF;
LABEL_374:
        unint64_t v370 = PDAexclusionPDA_14795(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v368 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v369, (unsigned __int16)v365 | ((unsigned __int16)v366 << 16) | (v363 << 48) | ((unint64_t)(unsigned __int16)v367 << 32), (unsigned __int16)v363);
        unint64_t v363 = HIWORD(v370);
        unsigned int v371 = bswap32(v370);
        unsigned __int16 *v28 = HIWORD(v371);
        v28[1] = v371;
        v28[2] = bswap32(HIDWORD(v370)) >> 16;
        goto LABEL_375;
      case 24:
        int v372 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v373 = *v50;
          if (!*v50) {
            goto LABEL_389;
          }
          if (v38)
          {
            int v373 = ((unsigned __int16)(*v133 * (_WORD)v373 + ((*v133 * v373) >> 8) + 1) >> 8);
            if (!v373) {
              goto LABEL_389;
            }
          }
          unint64_t v374 = *(void *)v49;
          uint64_t v375 = HIWORD(*(void *)v49);
          int v376 = (v373 | (v373 << 8)) ^ 0xFFFF;
          unint64_t v377 = v375
               - ((v376 * v375 + 0x8000 + ((v376 * v375 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v375 == (v376 * v375 + 0x8000 + ((v376 * v375 + 0x8000) >> 16)) >> 16) {
            goto LABEL_389;
          }
          unsigned int v378 = WORD2(v374) * v376 + 0x8000 + ((WORD2(v374) * v376 + 0x8000) >> 16);
          unsigned int v379 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v376
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v376 + 0x8000) >> 16)) >> 16);
          unsigned int v380 = WORD1(v374)
               - ((WORD1(v374) * v376 + 0x8000 + ((WORD1(v374) * v376 + 0x8000) >> 16)) >> 16);
          unsigned int v381 = HIDWORD(v374) - HIWORD(v378);
          uint64_t v382 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v383 = v382;
          if (v28[3]) {
            goto LABEL_387;
          }
          unsigned __int16 *v28 = bswap32(v379) >> 16;
          v28[1] = bswap32(v380) >> 16;
          v28[2] = bswap32(v381) >> 16;
LABEL_388:
          v28[3] = bswap32(v377) >> 16;
LABEL_389:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v372) {
            goto LABEL_416;
          }
        }
        unsigned int v383 = 0xFFFF;
LABEL_387:
        unint64_t v384 = PDAhuePDA_14796(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v382 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v383, (unsigned __int16)v379 | ((unsigned __int16)v380 << 16) | (v377 << 48) | ((unint64_t)(unsigned __int16)v381 << 32), (unsigned __int16)v377);
        unint64_t v377 = HIWORD(v384);
        unsigned int v385 = bswap32(v384);
        unsigned __int16 *v28 = HIWORD(v385);
        v28[1] = v385;
        v28[2] = bswap32(HIDWORD(v384)) >> 16;
        goto LABEL_388;
      case 25:
        int v386 = v4;
        unsigned int v133 = v38;
        while (1)
        {
          int v387 = *v50;
          if (!*v50) {
            goto LABEL_402;
          }
          if (v38)
          {
            int v387 = ((unsigned __int16)(*v133 * (_WORD)v387 + ((*v133 * v387) >> 8) + 1) >> 8);
            if (!v387) {
              goto LABEL_402;
            }
          }
          unint64_t v388 = *(void *)v49;
          uint64_t v389 = HIWORD(*(void *)v49);
          int v390 = (v387 | (v387 << 8)) ^ 0xFFFF;
          unint64_t v391 = v389
               - ((v390 * v389 + 0x8000 + ((v390 * v389 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v389 == (v390 * v389 + 0x8000 + ((v390 * v389 + 0x8000) >> 16)) >> 16) {
            goto LABEL_402;
          }
          unsigned int v392 = WORD2(v388) * v390 + 0x8000 + ((WORD2(v388) * v390 + 0x8000) >> 16);
          unsigned int v393 = *(void *)v49
               - (((unsigned __int16)*(void *)v49 * v390
                 + 0x8000
                 + (((unsigned __int16)*(void *)v49 * v390 + 0x8000) >> 16)) >> 16);
          unsigned int v394 = WORD1(v388)
               - ((WORD1(v388) * v390 + 0x8000 + ((WORD1(v388) * v390 + 0x8000) >> 16)) >> 16);
          unsigned int v395 = HIDWORD(v388) - HIWORD(v392);
          uint64_t v396 = __rev16(v28[3]);
          if (!v468) {
            break;
          }
          unsigned int v397 = v396;
          if (v28[3]) {
            goto LABEL_400;
          }
          unsigned __int16 *v28 = bswap32(v393) >> 16;
          v28[1] = bswap32(v394) >> 16;
          v28[2] = bswap32(v395) >> 16;
LABEL_401:
          v28[3] = bswap32(v391) >> 16;
LABEL_402:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v386) {
            goto LABEL_416;
          }
        }
        unsigned int v397 = 0xFFFF;
LABEL_400:
        unint64_t v398 = PDAsaturationPDA_14797(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v396 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v397, (unsigned __int16)v393 | ((unsigned __int16)v394 << 16) | (v391 << 48) | ((unint64_t)(unsigned __int16)v395 << 32), (unsigned __int16)v391);
        unint64_t v391 = HIWORD(v398);
        unsigned int v399 = bswap32(v398);
        unsigned __int16 *v28 = HIWORD(v399);
        v28[1] = v399;
        v28[2] = bswap32(HIDWORD(v398)) >> 16;
        goto LABEL_401;
      case 26:
        int v400 = v4;
        unsigned int v133 = v38;
        do
        {
          int v401 = *v50;
          if (*v50)
          {
            if (!v38
              || (int v401 = ((unsigned __int16)(*v133 * (_WORD)v401
                                                            + ((*v133 * v401) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unint64_t v402 = *(void *)v49;
              uint64_t v403 = HIWORD(*(void *)v49);
              int v404 = (v401 | (v401 << 8)) ^ 0xFFFF;
              unint64_t v405 = v403
                   - ((v404 * v403 + 0x8000 + ((v404 * v403 + 0x8000) >> 16)) >> 16);
              if ((_WORD)v403 != (v404 * v403 + 0x8000 + ((v404 * v403 + 0x8000) >> 16)) >> 16)
              {
                unsigned int v406 = WORD2(v402) * v404 + 0x8000 + ((WORD2(v402) * v404 + 0x8000) >> 16);
                unsigned int v407 = *(void *)v49
                     - (((unsigned __int16)*(void *)v49 * v404
                       + 0x8000
                       + (((unsigned __int16)*(void *)v49 * v404 + 0x8000) >> 16)) >> 16);
                unsigned int v408 = WORD1(v402)
                     - ((WORD1(v402) * v404 + 0x8000 + ((WORD1(v402) * v404 + 0x8000) >> 16)) >> 16);
                unsigned int v409 = HIDWORD(v402) - HIWORD(v406);
                uint64_t v410 = __rev16(v28[3]);
                if (v468)
                {
                  unsigned int v411 = v410;
                  if (!v28[3])
                  {
                    unsigned __int16 *v28 = bswap32(v407) >> 16;
                    v28[1] = bswap32(v408) >> 16;
                    v28[2] = bswap32(v409) >> 16;
LABEL_414:
                    v28[3] = bswap32(v405) >> 16;
                    goto LABEL_415;
                  }
                }
                else
                {
                  unsigned int v411 = 0xFFFF;
                }
                unint64_t v412 = PDAluminosityPDA_14798((unsigned __int16)v407 | ((unsigned __int16)v408 << 16) | (v405 << 48) | ((unint64_t)(unsigned __int16)v409 << 32), (unsigned __int16)v405, ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v410 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v411);
                unint64_t v405 = HIWORD(v412);
                unsigned int v413 = bswap32(v412);
                unsigned __int16 *v28 = HIWORD(v413);
                v28[1] = v413;
                v28[2] = bswap32(HIDWORD(v412)) >> 16;
                goto LABEL_414;
              }
            }
          }
LABEL_415:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v400;
        }
        while (v400);
LABEL_416:
        uint64_t v38 = &v133[v456];
LABEL_417:
        v28 += 4 * v457;
        int v39 = v459;
LABEL_418:
        long long v40 = v461;
LABEL_419:
        uint64_t v101 = v466;
        uint64_t v102 = v467;
LABEL_420:
        if (--v465)
        {
          uint64_t v47 = 0;
          int v36 = v462 + 1;
          uint64_t v33 = v40[16] + v101;
          uint64_t v34 = v40[17] + v102;
          if (v463)
          {
            long long v35 = v463;
            goto LABEL_468;
          }
          continue;
        }
        long long v35 = v463;
LABEL_463:
        if (v35) {
          free(v35);
        }
LABEL_465:
        if (v451) {
          free(v451);
        }
        return;
      case 27:
        uint64_t v414 = v38;
        int v415 = v4;
        break;
      default:
        goto LABEL_419;
    }
    break;
  }
  while (1)
  {
    int v416 = *v50;
    if (!*v50) {
      goto LABEL_434;
    }
    if (v38)
    {
      int v416 = ((unsigned __int16)(*v414 * (_WORD)v416 + ((*v414 * v416) >> 8) + 1) >> 8);
      if (!v416) {
        goto LABEL_434;
      }
    }
    unint64_t v417 = *(void *)v49;
    uint64_t v418 = HIWORD(*(void *)v49);
    int v419 = (v416 | (v416 << 8)) ^ 0xFFFF;
    unint64_t v420 = v418 - ((v419 * v418 + 0x8000 + ((v419 * v418 + 0x8000) >> 16)) >> 16);
    if ((_WORD)v418 == (v419 * v418 + 0x8000 + ((v419 * v418 + 0x8000) >> 16)) >> 16) {
      goto LABEL_434;
    }
    unsigned int v421 = WORD2(v417) * v419 + 0x8000 + ((WORD2(v417) * v419 + 0x8000) >> 16);
    unsigned int v422 = *(void *)v49
         - (((unsigned __int16)*(void *)v49 * v419
           + 0x8000
           + (((unsigned __int16)*(void *)v49 * v419 + 0x8000) >> 16)) >> 16);
    unsigned int v423 = WORD1(v417) - ((WORD1(v417) * v419 + 0x8000 + ((WORD1(v417) * v419 + 0x8000) >> 16)) >> 16);
    unsigned int v424 = HIDWORD(v417) - HIWORD(v421);
    uint64_t v425 = __rev16(v28[3]);
    if (!v468) {
      break;
    }
    unsigned int v426 = v425;
    if (v28[3]) {
      goto LABEL_432;
    }
    unsigned __int16 *v28 = bswap32(v422) >> 16;
    v28[1] = bswap32(v423) >> 16;
    v28[2] = bswap32(v424) >> 16;
LABEL_433:
    v28[3] = bswap32(v420) >> 16;
LABEL_434:
    ++v50;
    v49 += 8;
    v414 += v38 != 0;
    v28 += 4;
    if (!--v415)
    {
      uint64_t v38 = &v414[v456];
      goto LABEL_417;
    }
  }
  unsigned int v426 = 0xFFFF;
LABEL_432:
  unint64_t v427 = PDAluminosityPDA_14798(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v425 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v426, (unsigned __int16)v422 | ((unsigned __int16)v423 << 16) | (v420 << 48) | ((unint64_t)(unsigned __int16)v424 << 32), (unsigned __int16)v420);
  unint64_t v420 = HIWORD(v427);
  unsigned int v428 = bswap32(v427);
  unsigned __int16 *v28 = HIWORD(v428);
  v28[1] = v428;
  v28[2] = bswap32(HIDWORD(v427)) >> 16;
  goto LABEL_433;
}

_WORD *RGBA64_DMplusDM(_WORD *result, unint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5)
{
  unint64_t v5 = (unsigned __int16)a2 * (unint64_t)a3 + (unsigned __int16)a4 * (unint64_t)a5;
  unint64_t v6 = WORD1(a2) * (unint64_t)a3 + WORD1(a4) * (unint64_t)a5;
  unint64_t v7 = WORD2(a2) * (unint64_t)a3 + WORD2(a4) * (unint64_t)a5;
  unint64_t v8 = HIWORD(a2) * a3 + HIWORD(a4) * a5;
  if (v5 >= 0xFFFE8000) {
    unint64_t v5 = 4294868992;
  }
  if (v6 >= 0xFFFE8000) {
    unint64_t v6 = 4294868992;
  }
  if (v7 >= 0xFFFE8000) {
    unint64_t v7 = 4294868992;
  }
  if (v8 >= 0xFFFE8000) {
    unint64_t v8 = 4294868992;
  }
  unint64_t *result = bswap32(((v5 + 0x8000) >> 16) + v5 + 0x8000);
  result[1] = bswap32(((v6 + 0x8000) >> 16) + v6 + 0x8000);
  result[2] = bswap32(((v7 + 0x8000) >> 16) + v7 + 0x8000);
  result[3] = bswap32(((v8 + 0x8000) >> 16) + v8 + 0x8000);
  return result;
}

_WORD *RGBA64_DplusDM(_WORD *result, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v4 = HIWORD(a3) * a4 + 0x8000;
  unint64_t *result = bswap32(a2+ (((((unsigned __int16)a3 * (unint64_t)a4 + 0x8000) >> 16)+ (unsigned __int16)a3 * a4+ 0x8000) >> 16)) >> 16;
  result[1] = bswap32(((((WORD1(a3) * (unint64_t)a4 + 0x8000) >> 16) + WORD1(a3) * a4 + 0x8000) >> 16)+ WORD1(a2)) >> 16;
  result[2] = bswap32(HIDWORD(a2)+ ((((WORD2(a3) * (unint64_t)a4 + 0x8000) >> 16) + WORD2(a3) * a4 + 0x8000) >> 16)) >> 16;
  result[3] = bswap32(HIWORD(a2) + (((v4 >> 16) + v4) >> 16)) >> 16;
  return result;
}

_WORD *RGBA64_DAplusdDA(_WORD *result, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5 = a3 - (unint64_t)(unsigned __int16)a2;
  if (a3 < (unint64_t)(unsigned __int16)a2) {
    unint64_t v5 = 0;
  }
  unint64_t v6 = a3 - (unint64_t)WORD1(a2);
  if (a3 < (unint64_t)WORD1(a2)) {
    unint64_t v6 = 0;
  }
  unint64_t v7 = a3 - (unint64_t)WORD2(a2);
  if (a3 < (unint64_t)WORD2(a2)) {
    unint64_t v7 = 0;
  }
  unint64_t v8 = a5 - (unint64_t)(unsigned __int16)a4;
  if (a5 < (unint64_t)(unsigned __int16)a4) {
    unint64_t v8 = 0;
  }
  unint64_t v9 = a5 - (unint64_t)WORD1(a4);
  if (a5 < (unint64_t)WORD1(a4)) {
    unint64_t v9 = 0;
  }
  unint64_t v10 = a5 - (unint64_t)WORD2(a4);
  if (a5 < (unint64_t)WORD2(a4)) {
    unint64_t v10 = 0;
  }
  unint64_t v11 = v8 + v5;
  unint64_t v12 = v9 + v6;
  unint64_t v13 = v10 + v7;
  if (v8 + v5 >= 0xFFFF) {
    unint64_t v11 = 0xFFFFLL;
  }
  if (v12 >= 0xFFFF) {
    unint64_t v12 = 0xFFFFLL;
  }
  if (v13 >= 0xFFFF) {
    unint64_t v13 = 0xFFFFLL;
  }
  unint64_t v14 = (unsigned __int16)(a5 + a3);
  BOOL v15 = v14 >= v11;
  unsigned int v16 = (unsigned __int16)(a5 + a3) - v11;
  if (!v15) {
    unsigned int v16 = 0;
  }
  BOOL v15 = v14 >= v12;
  unsigned int v17 = v14 - v12;
  if (!v15) {
    unsigned int v17 = 0;
  }
  BOOL v15 = v14 >= v13;
  unsigned int v18 = v14 - v13;
  if (!v15) {
    unsigned int v18 = 0;
  }
  unint64_t *result = bswap32(v16) >> 16;
  result[1] = bswap32(v17) >> 16;
  result[2] = bswap32(v18) >> 16;
  result[3] = bswap32(a5 + a3) >> 16;
  return result;
}

_WORD *RGBA64_DpluslD(_WORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = (unsigned __int16)a3 + (unint64_t)(unsigned __int16)a2;
  unint64_t v4 = WORD1(a3) + (unint64_t)WORD1(a2);
  unint64_t v5 = WORD2(a3) + (unint64_t)WORD2(a2);
  unint64_t v6 = HIWORD(a3) + HIWORD(a2);
  if (v3 >= 0xFFFF) {
    LODWORD(v3) = 0xFFFF;
  }
  if (v4 >= 0xFFFF) {
    LODWORD(v4) = 0xFFFF;
  }
  if (v5 >= 0xFFFF) {
    LODWORD(v5) = 0xFFFF;
  }
  if (v6 >= 0xFFFF) {
    LODWORD(v6) = 0xFFFF;
  }
  unint64_t *result = bswap32(v3) >> 16;
  result[1] = bswap32(v4) >> 16;
  result[2] = bswap32(v5) >> 16;
  result[3] = bswap32(v6) >> 16;
  return result;
}

uint64_t RGBA64_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  memset(v48, 0, 512);
  if (*((void *)a2 + 12)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(float *)(a3 + 8) >= 1.0;
  }
  int v8 = *(_DWORD *)(*(void *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((void *)a2 + 6) == 0));
  if (v8 > 28) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v31, (uint64_t)v48) < 1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v18 = *(_DWORD *)a3;
  *((void *)&v31 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v18 == 269497224)
  {
    if (!(void)v42 && (~DWORD1(v32) & 0xC3) == 0)
    {
      v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
      if (v17.n128_f32[0] >= 1.0 && !*(void *)(a3 + 24))
      {
        if ((BYTE4(v32) & 4) != 0)
        {
          v17.n128_u64[0] = *(void *)(a3 + 32);
          *((void *)a2 + 8) = v17.n128_u64[0];
        }
        RGBA64_mark((uint64_t)a1, v17);
        return 1;
      }
    }
    *(void *)&long long v31 = rgba64_sample_RGBA64;
    goto LABEL_37;
  }
  unsigned int v19 = SAMPLEINDEX(v18, v10, v11, v12, v13, v14, v15, v16);
  if (!v19) {
    return 0xFFFFFFFFLL;
  }
  if (v19 > 0xB)
  {
    if (v19 > 0x13) {
      goto LABEL_27;
    }
    if (v19 - 14 < 4)
    {
      char v20 = 0;
      LODWORD(v21) = 0;
      goto LABEL_28;
    }
    if ((v19 == 13 || v19 == 12) && (uint64_t v21 = *((void *)a2 + 12)) == 0)
    {
      char v20 = 0;
    }
    else
    {
LABEL_27:
      LODWORD(v21) = 255;
      char v20 = 1;
    }
  }
  else
  {
    char v20 = 0;
    LODWORD(v21) = 0;
    switch(v19)
    {
      case 2u:
        if (*((void *)a2 + 12)) {
          goto LABEL_27;
        }
        char v20 = 0;
        LODWORD(v21) = 16;
        break;
      case 5u:
        char v20 = 0;
        LODWORD(v21) = 24;
        break;
      case 6u:
        break;
      case 7u:
        char v20 = 0;
        LODWORD(v21) = 32;
        break;
      case 8u:
        char v20 = 0;
        LODWORD(v21) = 8;
        break;
      case 9u:
        char v20 = 0;
        LODWORD(v21) = 40;
        break;
      default:
        goto LABEL_27;
    }
  }
LABEL_28:
  *(void *)&long long v31 = *(void *)&RGB16_image_sample[2 * v19 + 2];
  if (!(void)v31)
  {
    if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) <= 8)
    {
      *(void *)&long long v31 = *(void *)&RGB8_image_sample[2 * v19 + 2];
      if ((void)v31)
      {
        int v22 = 134755224;
        int v23 = 4;
LABEL_35:
        LODWORD(v32) = v23;
        goto LABEL_36;
      }
    }
    *(void *)&long long v31 = *(void *)&RGBF_image_sample[2 * v19 + 2];
    if ((void)v31)
    {
      int v22 = 538981289;
      int v23 = 16;
      goto LABEL_35;
    }
    return 0xFFFFFFFFLL;
  }
  int v22 = 269497256;
LABEL_36:
  DWORD2(v31) = v22;
  if ((v20 & 1) == 0 && (v8 - 1) <= 1 && (BYTE4(v32) & 7) == 3 && (a2[2] == 5 || !a2[2]))
  {
    if (v19 <= 0xB)
    {
      HIDWORD(v24) = v21;
      LODWORD(v24) = v21;
      switch((v24 >> 3))
      {
        case 0u:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = RGBA64_image_mark_RGB32;
          goto LABEL_68;
        case 1u:
          DWORD2(v31) = *(_DWORD *)a3;
          uint64_t v26 = RGBA64_image_mark_RGB32;
          break;
        case 2u:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = RGBA64_image_mark_W8;
          goto LABEL_68;
        case 3u:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = RGBA64_image_mark_RGB24;
          goto LABEL_68;
        case 4u:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = RGBA64_image_mark_rgb32;
          goto LABEL_68;
        case 5u:
          DWORD2(v31) = *(_DWORD *)a3;
          uint64_t v26 = RGBA64_image_mark_rgb32;
          break;
        default:
          goto LABEL_37;
      }
      unint64_t v27 = v26;
      uint64_t v28 = (uint64_t)a2;
      int v29 = v8;
      int v30 = 8;
LABEL_69:
      rgba64_image_mark_image(v28, (uint64_t)&v31, v29, v30, (void (*)(void, void))v27);
      return 1;
    }
    if (v19 <= 0x13)
    {
      switch(v19)
      {
        case 0xCu:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = (unint64_t (*)(unint64_t, int *, int, int, int, int))RGBA64_image_mark_W16;
          break;
        case 0xDu:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = (unint64_t (*)(unint64_t, int *, int, int, int, int))RGBA64_image_mark_w16;
          break;
        case 0xEu:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = RGBA64_image_mark_RGB48;
          break;
        case 0xFu:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = RGBA64_image_mark_rgb48;
          break;
        case 0x10u:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = (unint64_t (*)(unint64_t, int *, int, int, int, int))RGBA64_image_mark_RGBA64;
          break;
        case 0x11u:
          DWORD2(v31) = *(_DWORD *)a3;
          unint64_t v25 = (unint64_t (*)(unint64_t, int *, int, int, int, int))RGBA64_image_mark_rgba64;
          break;
        default:
          goto LABEL_37;
      }
LABEL_68:
      unint64_t v27 = v25;
      uint64_t v28 = (uint64_t)a2;
      int v29 = v8;
      int v30 = 0;
      goto LABEL_69;
    }
  }
LABEL_37:
  RGBA64_image_mark((uint64_t)a2, (uint64_t)&v31, v8, v17);
  return 1;
}

uint64_t RGBA64_mark(uint64_t a1, __n128 a2)
{
  uint64_t v2 = (unsigned int **)MEMORY[0x1F4188790](a1, a2);
  unint64_t v5 = v3;
  uint64_t v677 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *v2;
  if (*(_DWORD *)(v3 + 132))
  {
    if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken != -1) {
      dispatch_once(&CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken, &__block_literal_global_15_13639);
    }
    BOOL v7 = CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::result != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  int v8 = *(_DWORD *)v5;
  uint64_t v9 = *(void *)(v5 + 96);
  uint64_t v10 = *(void *)(v5 + 48);
  int v11 = *(_DWORD *)(*((void *)v6 + 7) + 16 * *(_DWORD *)v5 + 8 * (v9 == 0) + 4 * (v10 == 0));
  if (v11 > 27) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v13 = *(unsigned int *)(v5 + 4);
  unsigned int v14 = v13 - 1;
  if ((int)v13 < 1) {
    return 0;
  }
  int v15 = *(_DWORD *)(v5 + 8);
  if (v15 < 1) {
    return 0;
  }
  uint64_t v16 = *(uint16x4_t **)(v5 + 136);
  unint64_t v636 = v5;
  if ((v8 & 0xFF0000) != 0x50000 && v16)
  {
    int v17 = *(_DWORD *)(v5 + 128);
    if ((v17 | 8) == 8)
    {
      if ((*(_DWORD *)v5 & 0xFF00) == 0x400)
      {
        RGBA64_mark_constmask(v5, v11);
      }
      else if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
      {
        rgba16_template_image_mask_method(*v6, (int *)v5, v11);
      }
      else
      {
        RGBA64_mark_pixelmask(v5, v11);
      }
    }
    else
    {
      int v28 = *(_DWORD *)(v5 + 112);
      int v29 = *(_DWORD *)(v5 + 116);
      unsigned int v30 = (v28 + 15) & 0xFFFFFFF0;
      size_t v31 = v30 * v29;
      if ((int)v31 <= 4096)
      {
        long long v33 = v676;
      }
      else
      {
        long long v32 = malloc_type_malloc(v31, 0x8303D2FuLL);
        if (!v32) {
          return 1;
        }
        long long v33 = v32;
        uint64_t v16 = *(uint16x4_t **)(v5 + 136);
        int v17 = *(_DWORD *)(v5 + 128);
      }
      CGSConvertBitsToMask(v16, *(_DWORD *)(v5 + 124), v33, v30, v28, v29, v17);
      long long v47 = *(_OWORD *)(v5 + 112);
      long long v672 = *(_OWORD *)(v5 + 96);
      long long v673 = v47;
      long long v48 = *(_OWORD *)(v5 + 144);
      long long v674 = *(_OWORD *)(v5 + 128);
      long long v675 = v48;
      long long v49 = *(_OWORD *)(v5 + 48);
      long long v668 = *(_OWORD *)(v5 + 32);
      long long v669 = v49;
      long long v50 = *(_OWORD *)(v5 + 80);
      long long v670 = *(_OWORD *)(v5 + 64);
      long long v671 = v50;
      long long v51 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)uint64_t v666 = *(_OWORD *)v5;
      long long v667 = v51;
      HIDWORD(v673) = (v28 + 15) & 0xFFFFFFF0;
      *((void *)&v674 + 1) = v33;
      if (BYTE1(v666[0]) << 8 == 1024) {
        RGBA64_mark_constmask((uint64_t)v666, v11);
      }
      else {
        RGBA64_mark_pixelmask((unint64_t)v666, v11);
      }
      if (v33 != (unsigned char *)v676)
      {
        int v52 = v33;
        goto LABEL_983;
      }
    }
    return 1;
  }
  int v649 = *(_DWORD *)(*((void *)v6 + 7) + 16 * *(_DWORD *)v5 + 8 * (v9 == 0) + 4 * (v10 == 0));
  if (BYTE1(v8) == 1)
  {
    if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
    {
      rgba16_template_image_mark_method(*v6, v5, v11);
      return 1;
    }
LABEL_30:
    v676[0] = *(_DWORD *)(v5 + 4);
    v666[0] = v15;
    uint64_t v34 = *(void *)(v5 + 88);
    unint64_t v35 = (unint64_t)*(int *)(v5 + 28) >> 3;
    unint64_t v36 = *(void *)(v5 + 40) + 8 * (*(int *)(v5 + 12) + v35 * *(int *)(v5 + 16));
    int v37 = *(_DWORD *)(v5 + 104);
    int v38 = *(_DWORD *)(v5 + 108);
    int v39 = *(_DWORD *)(v5 + 56);
    int v40 = *(_DWORD *)(v5 + 60);
    int v41 = v8 & 0xFF00;
    unint64_t v42 = *(int *)(v5 + 76);
    if (v41 != 256)
    {
      LODWORD(v647) = *(_DWORD *)(v5 + 64);
      int v639 = *(_DWORD *)(v5 + 68);
      unint64_t v657 = v34 + 8 * (v42 >> 3) * v639;
      BOOL v45 = v9 != 0;
      if (v16)
      {
        unint64_t v662 = v42 >> 3;
        unint64_t v664 = *(unsigned __int16 **)(v5 + 88);
        int v634 = *(_DWORD *)(v5 + 60);
        int v635 = *(_DWORD *)(v5 + 56);
        uint64_t v44 = 1;
        unint64_t v46 = v34;
LABEL_55:
        shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, v44, v35, 1, v37, v38, v13, v15);
        uint64_t v60 = v59;
        if (!v59) {
          return 1;
        }
        while (2)
        {
          if (!shape_enum_clip_next(v60, (int *)&v665 + 1, &v665, v676, v666))
          {
            int v52 = (void *)v60;
            goto LABEL_983;
          }
          uint64_t v646 = v60;
          if (v657)
          {
            uint64_t v56 = (unsigned __int16 *)(v36 + 8 * v35 * (int)v665 + 8 * SHIDWORD(v665));
            uint64_t v439 = v34 + 8 * v662 * (((int)v665 + *(_DWORD *)(v636 + 60)) % v639);
            unsigned int v55 = (unsigned __int16 *)(v439 + 8 * ((HIDWORD(v665) + *(_DWORD *)(v636 + 56)) % (int)v647));
            unint64_t v46 = v439 + 8 * (int)v647;
            unint64_t v664 = v55;
            int v659 = v676[0];
            int v440 = v676[0];
            int v634 = ((int)v665 + *(_DWORD *)(v636 + 60)) % v639;
            int v635 = (HIDWORD(v665) + *(_DWORD *)(v636 + 56)) % (int)v647;
          }
          else
          {
            int v659 = v676[0];
            int v440 = v676[0] * v44;
            uint64_t v56 = (unsigned __int16 *)(v36 + 8 * v35 * (int)v665 + 8 * HIDWORD(v665) * (int)v44);
            unsigned int v55 = (unsigned __int16 *)(v34 + 8 * (int)v665 * (int)v647 + 8 * HIDWORD(v665) * (int)v44);
            unint64_t v662 = (int)v647 - v676[0] * (int)v44;
          }
          unint64_t v656 = v35 - v440;
LABEL_59:
          switch(v11)
          {
            case 0:
              float v61 = &v56[-4 * v659 + 4];
              uint64_t v62 = v656 + v659;
              if ((int)v44 < 0) {
                uint64_t v62 = v656 - v659;
              }
              else {
                float v61 = v56;
              }
              int v63 = (char *)&v61[4 * ((v62 * (v666[0] - 1)) & (v62 >> 63))];
              if (v62 < 0) {
                uint64_t v62 = -v62;
              }
              CGBlt_fillBytes(8 * v659, v666[0], 0, v63, 8 * v62);
              goto LABEL_663;
            case 1:
              int v64 = *(unsigned __int8 *)(v636 + 1);
              if (v64 == 2)
              {
                if (v659 < 4
                  || (8 * v647) > 0x40
                  || (v4.i32[0] = 8 * v647,
                      uint8x8_t v441 = (uint8x8_t)vcnt_s8(v4),
                      v441.i16[0] = vaddlv_u8(v441),
                      v441.i32[0] > 1u))
                {
LABEL_675:
                  int v442 = v666[0];
                  uint64_t v443 = 8 * (int)v44;
                  if (v10 == 0 || v45)
                  {
                    do
                    {
                      int v444 = v659;
                      do
                      {
                        *(void *)uint64_t v56 = *(void *)v55;
                        unsigned int v445 = &v55[4 * (int)v44];
                        if ((unint64_t)v445 >= v46) {
                          uint64_t v446 = -(uint64_t)(int)v647;
                        }
                        else {
                          uint64_t v446 = 0;
                        }
                        unsigned int v55 = &v445[4 * v446];
                        uint64_t v56 = (unsigned __int16 *)((char *)v56 + v443);
                        --v444;
                      }
                      while (v444);
                      v56 += 4 * v656;
                      int v447 = v664;
                      int v448 = &v664[4 * v662];
                      if ((unint64_t)v448 >= v657) {
                        uint64_t v449 = -(uint64_t)(v662 * v639);
                      }
                      else {
                        uint64_t v449 = 0;
                      }
                      uint64_t v450 = &v448[4 * v449];
                      uint64_t v451 = v46 + 8 * v449 + 8 * v662;
                      if (v657)
                      {
                        unint64_t v46 = v451;
                        int v447 = v450;
                      }
                      unint64_t v664 = v447;
                      if (v657) {
                        unsigned int v55 = v450;
                      }
                      else {
                        v55 += 4 * v662;
                      }
                      --v442;
                    }
                    while (v442);
                  }
                  else
                  {
                    do
                    {
                      int v452 = v659;
                      do
                      {
                        unsigned __int16 v453 = v55[2];
                        *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                        v56[2] = v453;
                        v56[3] = -1;
                        uint64_t v454 = &v55[4 * (int)v44];
                        if ((unint64_t)v454 >= v46) {
                          uint64_t v455 = -(uint64_t)(int)v647;
                        }
                        else {
                          uint64_t v455 = 0;
                        }
                        unsigned int v55 = &v454[4 * v455];
                        uint64_t v56 = (unsigned __int16 *)((char *)v56 + v443);
                        --v452;
                      }
                      while (v452);
                      v56 += 4 * v656;
                      uint64_t v456 = v664;
                      uint64_t v457 = &v664[4 * v662];
                      if ((unint64_t)v457 >= v657) {
                        uint64_t v458 = -(uint64_t)(v662 * v639);
                      }
                      else {
                        uint64_t v458 = 0;
                      }
                      int v459 = &v457[4 * v458];
                      uint64_t v460 = v46 + 8 * v458 + 8 * v662;
                      if (v657)
                      {
                        unint64_t v46 = v460;
                        uint64_t v456 = v459;
                      }
                      unint64_t v664 = v456;
                      if (v657) {
                        unsigned int v55 = v459;
                      }
                      else {
                        v55 += 4 * v662;
                      }
                      --v442;
                    }
                    while (v442);
                  }
                  goto LABEL_721;
                }
                CGSFillDRAM64((unint64_t)v56, 8 * (v659 + v656), 8 * v659, v666[0], v34, 8 * v662, 8 * v647, v639, 8 * v635, v634);
              }
              else
              {
                if (v64 != 1) {
                  goto LABEL_675;
                }
                if (v10 != 0 && !v45)
                {
                  int v461 = v666[0];
                  do
                  {
                    int v462 = v659;
                    do
                    {
                      unsigned __int16 v463 = v55[2];
                      *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                      v56[2] = v463;
                      v56[3] = -1;
                      uint64x2_t v464 = &v55[4 * (int)v44];
                      if ((unint64_t)v464 >= v46) {
                        uint64_t v465 = -(uint64_t)(int)v647;
                      }
                      else {
                        uint64_t v465 = 0;
                      }
                      unsigned int v55 = &v464[4 * v465];
                      v56 += 4 * (int)v44;
                      --v462;
                    }
                    while (v462);
                    v56 += 4 * v656;
                    uint64_t v466 = v664;
                    uint64_t v467 = &v664[4 * v662];
                    if ((unint64_t)v467 >= v657) {
                      uint64_t v468 = -(uint64_t)(v662 * v639);
                    }
                    else {
                      uint64_t v468 = 0;
                    }
                    uint64_t v469 = &v467[4 * v468];
                    uint64_t v470 = v46 + 8 * v468 + 8 * v662;
                    if (v657)
                    {
                      unint64_t v46 = v470;
                      uint64_t v466 = v469;
                    }
                    unint64_t v664 = v466;
                    if (v657) {
                      unsigned int v55 = v469;
                    }
                    else {
                      v55 += 4 * v662;
                    }
                    --v461;
                  }
                  while (v461);
                  goto LABEL_721;
                }
                if ((v44 & 0x80000000) != 0)
                {
                  uint64_t v65 = v662 - v659;
                  v55 += -4 * v659 + 4;
                  uint64_t v66 = v656 - v659;
                  v56 += -4 * v659 + 4;
                }
                else
                {
                  uint64_t v65 = v662 + v659;
                  uint64_t v66 = v656 + v659;
                }
                uint64_t v471 = v666[0] - 1;
                unint64_t v472 = (char *)&v55[4 * ((v65 * v471) & (v65 >> 63))];
                if (v65 >= 0) {
                  uint64_t v473 = v65;
                }
                else {
                  uint64_t v473 = -v65;
                }
                if (v66 >= 0) {
                  LODWORD(v474) = v66;
                }
                else {
                  uint64_t v474 = -v66;
                }
                unint64_t v662 = v473;
                CGBlt_copyBytes(8 * v659, v666[0], v472, (char *)&v56[4 * ((v66 * v471) & (v66 >> 63))], 8 * v473, 8 * v474);
              }
LABEL_663:
              uint64_t v60 = v646;
              if (!v646) {
                return 1;
              }
              uint64_t v665 = 0;
              continue;
            case 2:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v67 = v666[0];
              do
              {
                int v650 = v67;
                int v68 = v659;
                do
                {
                  uint64_t v69 = bswap32(v55[3]) >> 16;
                  if (v69)
                  {
                    if (v69 == 0xFFFF) {
                      *(void *)uint64_t v56 = *(void *)v55;
                    }
                    else {
                      RGBA64_DplusDM(v56, (v69 << 48) | ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | ((unint64_t)(bswap32(v56[3]) >> 16) << 48) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16), v69 ^ 0xFFFF);
                    }
                  }
                  unsigned int v70 = &v55[4 * (int)v44];
                  if ((unint64_t)v70 >= v46) {
                    uint64_t v71 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v71 = 0;
                  }
                  unsigned int v55 = &v70[4 * v71];
                  v56 += 4 * (int)v44;
                  --v68;
                }
                while (v68);
                v56 += 4 * v656;
                unsigned int v72 = v664;
                uint64_t v73 = &v664[4 * v662];
                uint64_t v74 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v73 < v657) {
                  uint64_t v74 = 0;
                }
                uint64_t v75 = &v73[4 * v74];
                uint64_t v76 = v46 + 8 * v74 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v76;
                  unsigned int v72 = v75;
                }
                unint64_t v664 = v72;
                if (v657) {
                  unsigned int v55 = v75;
                }
                else {
                  v55 += 4 * v662;
                }
                int v67 = v650 - 1;
              }
              while (v650 != 1);
              goto LABEL_662;
            case 3:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v77 = v666[0];
              do
              {
                int v651 = v77;
                int v78 = v659;
                do
                {
                  unsigned int v79 = bswap32(v56[3]) >> 16;
                  if (v79 == 0xFFFF)
                  {
                    unsigned __int16 v80 = v55[2];
                    unsigned int v81 = bswap32(v55[3]) >> 16;
                    if (!v45) {
                      unsigned int v81 = -1;
                    }
                    *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                    v56[2] = v80;
                    v56[3] = bswap32(v81) >> 16;
                  }
                  else if (v79)
                  {
                    uint64_t v82 = bswap32(v55[3]) >> 16;
                    unint64_t v83 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v82 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                    if (v45) {
                      unsigned __int16 v84 = v82;
                    }
                    else {
                      unsigned __int16 v84 = -1;
                    }
                    RGBA64_DAM(v56, v83, v84, v79);
                  }
                  else
                  {
                    *(void *)uint64_t v56 = 0;
                  }
                  int v85 = &v55[4 * (int)v44];
                  if ((unint64_t)v85 >= v46) {
                    uint64_t v86 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v86 = 0;
                  }
                  unsigned int v55 = &v85[4 * v86];
                  v56 += 4 * (int)v44;
                  --v78;
                }
                while (v78);
                v56 += 4 * v656;
                float v87 = v664;
                uint64_t v88 = &v664[4 * v662];
                uint64_t v89 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v88 < v657) {
                  uint64_t v89 = 0;
                }
                int v90 = &v88[4 * v89];
                uint64_t v91 = v46 + 8 * v89 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v91;
                  float v87 = v90;
                }
                unint64_t v664 = v87;
                if (v657) {
                  unsigned int v55 = v90;
                }
                else {
                  v55 += 4 * v662;
                }
                int v77 = v651 - 1;
              }
              while (v651 != 1);
              goto LABEL_662;
            case 4:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v92 = v666[0];
              do
              {
                int v652 = v92;
                int v93 = v659;
                do
                {
                  unsigned int v94 = bswap32(~v56[3]) >> 16;
                  if (v94 == 0xFFFF)
                  {
                    unsigned __int16 v95 = v55[2];
                    unsigned int v96 = bswap32(v55[3]) >> 16;
                    if (!v45) {
                      unsigned int v96 = -1;
                    }
                    *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                    v56[2] = v95;
                    v56[3] = bswap32(v96) >> 16;
                  }
                  else if (v94)
                  {
                    uint64_t v97 = bswap32(v55[3]) >> 16;
                    unint64_t v98 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v97 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                    if (v45) {
                      unsigned __int16 v99 = v97;
                    }
                    else {
                      unsigned __int16 v99 = -1;
                    }
                    RGBA64_DAM(v56, v98, v99, v94);
                  }
                  else
                  {
                    *(void *)uint64_t v56 = 0;
                  }
                  unint64_t v100 = &v55[4 * (int)v44];
                  if ((unint64_t)v100 >= v46) {
                    uint64_t v101 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v101 = 0;
                  }
                  unsigned int v55 = &v100[4 * v101];
                  v56 += 4 * (int)v44;
                  --v93;
                }
                while (v93);
                v56 += 4 * v656;
                uint64_t v102 = v664;
                int v103 = &v664[4 * v662];
                uint64_t v104 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v103 < v657) {
                  uint64_t v104 = 0;
                }
                int32x4_t v105 = &v103[4 * v104];
                uint64_t v106 = v46 + 8 * v104 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v106;
                  uint64_t v102 = v105;
                }
                unint64_t v664 = v102;
                if (v657) {
                  unsigned int v55 = v105;
                }
                else {
                  v55 += 4 * v662;
                }
                int v92 = v652 - 1;
              }
              while (v652 != 1);
              goto LABEL_662;
            case 5:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v107 = v666[0];
              do
              {
                int v108 = v659;
                do
                {
                  uint64_t v109 = bswap32(v55[3]) >> 16;
                  uint64_t v110 = bswap32(v56[3]) >> 16;
                  RGBA64_DMplusDM(v56, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v109 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v110, (v110 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16), v109 ^ 0xFFFF);
                  unsigned int v111 = &v55[4 * (int)v44];
                  if ((unint64_t)v111 >= v46) {
                    uint64_t v112 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v112 = 0;
                  }
                  unsigned int v55 = &v111[4 * v112];
                  v56 += 4 * (int)v44;
                  --v108;
                }
                while (v108);
                v56 += 4 * v656;
                uint32x2_t v113 = v664;
                uint64_t v114 = &v664[4 * v662];
                uint64_t v115 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v114 < v657) {
                  uint64_t v115 = 0;
                }
                unsigned int v116 = &v114[4 * v115];
                uint64_t v117 = v46 + 8 * v115 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v117;
                  uint32x2_t v113 = v116;
                }
                unint64_t v664 = v113;
                if (v657) {
                  unsigned int v55 = v116;
                }
                else {
                  v55 += 4 * v662;
                }
                --v107;
              }
              while (v107);
              goto LABEL_662;
            case 6:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v118 = v666[0];
              do
              {
                int v653 = v118;
                int v119 = v659;
                do
                {
                  unsigned int v120 = bswap32(v56[3]);
                  if (HIWORD(v120) != 0xFFFF)
                  {
                    if ((unsigned __int16)~HIWORD(v120) == 0xFFFF)
                    {
                      unsigned __int16 v121 = v55[2];
                      unsigned int v122 = bswap32(v55[3]) >> 16;
                      if (!v45) {
                        unsigned int v122 = -1;
                      }
                      *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                      v56[2] = v121;
                      v56[3] = bswap32(v122) >> 16;
                    }
                    else
                    {
                      uint64_t v123 = HIWORD(v120);
                      int v124 = ~HIWORD(v120);
                      unint64_t v125 = (v123 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
                      uint64_t v126 = bswap32(v55[3]) >> 16;
                      unint64_t v127 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v126 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                      if (v45) {
                        unsigned __int16 v128 = v126;
                      }
                      else {
                        unsigned __int16 v128 = -1;
                      }
                      RGBA64_DplusDAM(v56, v125, v127, v128, (unsigned __int16)v124);
                    }
                  }
                  unint64_t v129 = &v55[4 * (int)v44];
                  if ((unint64_t)v129 >= v46) {
                    uint64_t v130 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v130 = 0;
                  }
                  unsigned int v55 = &v129[4 * v130];
                  v56 += 4 * (int)v44;
                  --v119;
                }
                while (v119);
                v56 += 4 * v656;
                int v131 = v664;
                int v132 = &v664[4 * v662];
                uint64_t v133 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v132 < v657) {
                  uint64_t v133 = 0;
                }
                int v134 = &v132[4 * v133];
                uint64_t v135 = v46 + 8 * v133 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v135;
                  int v131 = v134;
                }
                unint64_t v664 = v131;
                if (v657) {
                  unsigned int v55 = v134;
                }
                else {
                  v55 += 4 * v662;
                }
                int v118 = v653 - 1;
              }
              while (v653 != 1);
              goto LABEL_662;
            case 7:
              int v136 = v666[0];
              do
              {
                int v137 = v659;
                do
                {
                  unsigned int v138 = bswap32(v55[3]) >> 16;
                  if (v138 != 0xFFFF)
                  {
                    if (v138)
                    {
                      unsigned int v139 = bswap32(v56[1] | (*v56 << 16));
                      v140.i32[0] = (unsigned __int16)v139;
                      v140.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v139), 0x10uLL).i32[1];
                      v140.i64[1] = __PAIR64__(bswap32(v56[3]) >> 16, bswap32(v56[2]) >> 16);
                      v141.i64[0] = 0x800000008000;
                      v141.i64[1] = 0x800000008000;
                      uint32x4_t v142 = (uint32x4_t)vmlaq_s32(v141, v140, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(~v138)));
                      v140.i32[0] = v139;
                      *(int8x8_t *)uint64_t v56 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v140, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v142, v142, 0x10uLL), 0x10uLL))));
                    }
                    else
                    {
                      *(void *)uint64_t v56 = 0;
                    }
                  }
                  uint32x4_t v143 = &v55[4 * (int)v44];
                  if ((unint64_t)v143 >= v46) {
                    uint64_t v144 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v144 = 0;
                  }
                  unsigned int v55 = &v143[4 * v144];
                  v56 += 4 * (int)v44;
                  --v137;
                }
                while (v137);
                v56 += 4 * v656;
                int v145 = v664;
                int v146 = &v664[4 * v662];
                if ((unint64_t)v146 >= v657) {
                  uint64_t v147 = -(uint64_t)(v662 * v639);
                }
                else {
                  uint64_t v147 = 0;
                }
                int v148 = &v146[4 * v147];
                uint64_t v149 = v46 + 8 * v147 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v149;
                  int v145 = v148;
                }
                unint64_t v664 = v145;
                if (v657) {
                  unsigned int v55 = v148;
                }
                else {
                  v55 += 4 * v662;
                }
                --v136;
              }
              while (v136);
              goto LABEL_721;
            case 8:
              int v150 = v666[0];
              do
              {
                int v151 = v659;
                do
                {
                  unsigned int v152 = bswap32(~v55[3]) >> 16;
                  if (v152 != 0xFFFF)
                  {
                    if (v152)
                    {
                      unsigned int v153 = bswap32(v56[1] | (*v56 << 16));
                      v154.i32[0] = (unsigned __int16)v153;
                      v154.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v153), 0x10uLL).i32[1];
                      v154.i64[1] = __PAIR64__(bswap32(v56[3]) >> 16, bswap32(v56[2]) >> 16);
                      v155.i64[0] = 0x800000008000;
                      v155.i64[1] = 0x800000008000;
                      uint32x4_t v156 = (uint32x4_t)vmlaq_s32(v155, v154, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(~v152)));
                      v154.i32[0] = v153;
                      *(int8x8_t *)uint64_t v56 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v154, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v156, v156, 0x10uLL), 0x10uLL))));
                    }
                    else
                    {
                      *(void *)uint64_t v56 = 0;
                    }
                  }
                  unsigned int v157 = &v55[4 * (int)v44];
                  if ((unint64_t)v157 >= v46) {
                    uint64_t v158 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v158 = 0;
                  }
                  unsigned int v55 = &v157[4 * v158];
                  v56 += 4 * (int)v44;
                  --v151;
                }
                while (v151);
                v56 += 4 * v656;
                int32x4_t v159 = v664;
                uint32x4_t v160 = &v664[4 * v662];
                if ((unint64_t)v160 >= v657) {
                  uint64_t v161 = -(uint64_t)(v662 * v639);
                }
                else {
                  uint64_t v161 = 0;
                }
                int v162 = &v160[4 * v161];
                uint64_t v163 = v46 + 8 * v161 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v163;
                  int32x4_t v159 = v162;
                }
                unint64_t v664 = v159;
                if (v657) {
                  unsigned int v55 = v162;
                }
                else {
                  v55 += 4 * v662;
                }
                --v150;
              }
              while (v150);
LABEL_721:
              v666[0] = 0;
              goto LABEL_663;
            case 9:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v164 = v666[0];
              do
              {
                int v165 = v659;
                do
                {
                  uint64_t v166 = bswap32(v55[3]) >> 16;
                  uint64_t v167 = bswap32(v56[3]) >> 16;
                  RGBA64_DMplusDM(v56, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v166 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v167 ^ 0xFFFF, (v167 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16), v166);
                  unsigned int v168 = &v55[4 * (int)v44];
                  if ((unint64_t)v168 >= v46) {
                    uint64_t v169 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v169 = 0;
                  }
                  unsigned int v55 = &v168[4 * v169];
                  v56 += 4 * (int)v44;
                  --v165;
                }
                while (v165);
                v56 += 4 * v656;
                int v170 = v664;
                int v171 = &v664[4 * v662];
                uint64_t v172 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v171 < v657) {
                  uint64_t v172 = 0;
                }
                int32x4_t v173 = &v171[4 * v172];
                uint64_t v174 = v46 + 8 * v172 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v174;
                  int v170 = v173;
                }
                unint64_t v664 = v170;
                if (v657) {
                  unsigned int v55 = v173;
                }
                else {
                  v55 += 4 * v662;
                }
                --v164;
              }
              while (v164);
              goto LABEL_662;
            case 10:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v175 = v666[0];
              do
              {
                int v176 = v659;
                do
                {
                  uint64_t v177 = bswap32(v55[3]) >> 16;
                  uint64_t v178 = bswap32(v56[3]) >> 16;
                  RGBA64_DMplusDM(v56, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v177 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v178 ^ 0xFFFF, (v178 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16), v177 ^ 0xFFFF);
                  int v179 = &v55[4 * (int)v44];
                  if ((unint64_t)v179 >= v46) {
                    uint64_t v180 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v180 = 0;
                  }
                  unsigned int v55 = &v179[4 * v180];
                  v56 += 4 * (int)v44;
                  --v176;
                }
                while (v176);
                v56 += 4 * v656;
                unsigned int v181 = v664;
                unsigned __int16 v182 = &v664[4 * v662];
                uint64_t v183 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v182 < v657) {
                  uint64_t v183 = 0;
                }
                unsigned int v184 = &v182[4 * v183];
                uint64_t v185 = v46 + 8 * v183 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v185;
                  unsigned int v181 = v184;
                }
                unint64_t v664 = v181;
                if (v657) {
                  unsigned int v55 = v184;
                }
                else {
                  v55 += 4 * v662;
                }
                --v175;
              }
              while (v175);
              goto LABEL_662;
            case 11:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v186 = v666[0];
              do
              {
                int v187 = v659;
                do
                {
                  uint64_t v188 = bswap32(v56[3]) >> 16;
                  unint64_t v189 = ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | (v188 << 48) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
                  if (v10) {
                    unsigned __int16 v190 = v188;
                  }
                  else {
                    unsigned __int16 v190 = -1;
                  }
                  uint64_t v191 = bswap32(v55[3]) >> 16;
                  unint64_t v192 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v191 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                  if (v45) {
                    unsigned __int16 v193 = v191;
                  }
                  else {
                    unsigned __int16 v193 = -1;
                  }
                  RGBA64_DAplusdDA(v56, v189, v190, v192, v193);
                  unsigned int v194 = &v55[4 * (int)v44];
                  if ((unint64_t)v194 >= v46) {
                    uint64_t v195 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v195 = 0;
                  }
                  unsigned int v55 = &v194[4 * v195];
                  v56 += 4 * (int)v44;
                  --v187;
                }
                while (v187);
                v56 += 4 * v656;
                uint64_t v196 = v664;
                uint64_t v197 = &v664[4 * v662];
                uint64_t v198 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v197 < v657) {
                  uint64_t v198 = 0;
                }
                int v199 = &v197[4 * v198];
                uint64_t v200 = v46 + 8 * v198 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v200;
                  uint64_t v196 = v199;
                }
                unint64_t v664 = v196;
                if (v657) {
                  unsigned int v55 = v199;
                }
                else {
                  v55 += 4 * v662;
                }
                --v186;
              }
              while (v186);
              goto LABEL_662;
            case 12:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v201 = v666[0];
              do
              {
                int v202 = v659;
                do
                {
                  unint64_t v203 = ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | ((unint64_t)(bswap32(v56[3]) >> 16) << 48) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
                  uint64_t v204 = bswap32(v55[3]) >> 16;
                  unint64_t v205 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v204 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                  if (v45) {
                    unsigned __int16 v206 = v204;
                  }
                  else {
                    unsigned __int16 v206 = -1;
                  }
                  RGBA64_DpluslDA(v56, v203, v205, v206);
                  unint64_t v207 = &v55[4 * (int)v44];
                  if ((unint64_t)v207 >= v46) {
                    uint64_t v208 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v208 = 0;
                  }
                  unsigned int v55 = &v207[4 * v208];
                  v56 += 4 * (int)v44;
                  --v202;
                }
                while (v202);
                v56 += 4 * v656;
                unint64_t v209 = v664;
                unsigned __int16 v210 = &v664[4 * v662];
                uint64_t v211 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v210 < v657) {
                  uint64_t v211 = 0;
                }
                int v212 = &v210[4 * v211];
                uint64_t v213 = v46 + 8 * v211 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v213;
                  unint64_t v209 = v212;
                }
                unint64_t v664 = v209;
                if (v657) {
                  unsigned int v55 = v212;
                }
                else {
                  v55 += 4 * v662;
                }
                --v201;
              }
              while (v201);
              goto LABEL_662;
            case 13:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v214 = v666[0];
              while (1)
              {
                int v215 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_300;
                    }
                    LODWORD(v216) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v216) = 0xFFFF;
                  }
                  uint64_t v217 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v218 = 0xFFFF;
LABEL_298:
                    unint64_t v220 = PDAmultiplyPDA_14785((v217 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v218, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v216);
                    unint64_t v216 = HIWORD(v220);
                    unsigned int v221 = bswap32(v220);
                    *uint64_t v56 = HIWORD(v221);
                    v56[1] = v221;
                    v56[2] = bswap32(HIDWORD(v220)) >> 16;
                    goto LABEL_299;
                  }
                  unsigned int v218 = v217;
                  if (v56[3]) {
                    goto LABEL_298;
                  }
                  unsigned __int16 v219 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v219;
LABEL_299:
                  v56[3] = __rev16(v216);
LABEL_300:
                  int v222 = &v55[4 * (int)v44];
                  if ((unint64_t)v222 >= v46) {
                    uint64_t v223 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v223 = 0;
                  }
                  unsigned int v55 = &v222[4 * v223];
                  v56 += 4 * (int)v44;
                  --v215;
                }
                while (v215);
                v56 += 4 * v656;
                unsigned int v224 = v664;
                unsigned int v225 = &v664[4 * v662];
                uint64_t v226 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v225 < v657) {
                  uint64_t v226 = 0;
                }
                unsigned int v227 = &v225[4 * v226];
                uint64_t v228 = v46 + 8 * v226 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v228;
                  unsigned int v224 = v227;
                }
                unint64_t v664 = v224;
                if (v657) {
                  unsigned int v55 = v227;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v214) {
                  goto LABEL_662;
                }
              }
            case 14:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v229 = v666[0];
              while (1)
              {
                int v230 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_325;
                    }
                    LODWORD(v231) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v231) = 0xFFFF;
                  }
                  uint64_t v232 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v233 = 0xFFFF;
LABEL_323:
                    unint64_t v235 = PDAscreenPDA_14786((v232 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v233, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v231);
                    unint64_t v231 = HIWORD(v235);
                    unsigned int v236 = bswap32(v235);
                    *uint64_t v56 = HIWORD(v236);
                    v56[1] = v236;
                    v56[2] = bswap32(HIDWORD(v235)) >> 16;
                    goto LABEL_324;
                  }
                  unsigned int v233 = v232;
                  if (v56[3]) {
                    goto LABEL_323;
                  }
                  unsigned __int16 v234 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v234;
LABEL_324:
                  v56[3] = __rev16(v231);
LABEL_325:
                  unint64_t v237 = &v55[4 * (int)v44];
                  if ((unint64_t)v237 >= v46) {
                    uint64_t v238 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v238 = 0;
                  }
                  unsigned int v55 = &v237[4 * v238];
                  v56 += 4 * (int)v44;
                  --v230;
                }
                while (v230);
                v56 += 4 * v656;
                unsigned int v239 = v664;
                unsigned int v240 = &v664[4 * v662];
                uint64_t v241 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v240 < v657) {
                  uint64_t v241 = 0;
                }
                uint64_t v242 = &v240[4 * v241];
                uint64_t v243 = v46 + 8 * v241 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v243;
                  unsigned int v239 = v242;
                }
                unint64_t v664 = v239;
                if (v657) {
                  unsigned int v55 = v242;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v229) {
                  goto LABEL_662;
                }
              }
            case 15:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v244 = v666[0];
              while (1)
              {
                int v245 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_350;
                    }
                    LODWORD(v246) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v246) = 0xFFFF;
                  }
                  uint64_t v247 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v248 = 0xFFFF;
LABEL_348:
                    unint64_t v250 = PDAoverlayPDA_14787((v247 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v248, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v246);
                    unint64_t v246 = HIWORD(v250);
                    unsigned int v251 = bswap32(v250);
                    *uint64_t v56 = HIWORD(v251);
                    v56[1] = v251;
                    v56[2] = bswap32(HIDWORD(v250)) >> 16;
                    goto LABEL_349;
                  }
                  unsigned int v248 = v247;
                  if (v56[3]) {
                    goto LABEL_348;
                  }
                  unsigned __int16 v249 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v249;
LABEL_349:
                  v56[3] = __rev16(v246);
LABEL_350:
                  unsigned int v252 = &v55[4 * (int)v44];
                  if ((unint64_t)v252 >= v46) {
                    uint64_t v253 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v253 = 0;
                  }
                  unsigned int v55 = &v252[4 * v253];
                  v56 += 4 * (int)v44;
                  --v245;
                }
                while (v245);
                v56 += 4 * v656;
                unsigned int v254 = v664;
                unsigned int v255 = &v664[4 * v662];
                uint64_t v256 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v255 < v657) {
                  uint64_t v256 = 0;
                }
                unsigned int v257 = &v255[4 * v256];
                uint64_t v258 = v46 + 8 * v256 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v258;
                  unsigned int v254 = v257;
                }
                unint64_t v664 = v254;
                if (v657) {
                  unsigned int v55 = v257;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v244) {
                  goto LABEL_662;
                }
              }
            case 16:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v259 = v666[0];
              while (1)
              {
                int v260 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_375;
                    }
                    LODWORD(v261) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v261) = 0xFFFF;
                  }
                  uint64_t v262 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v263 = 0xFFFF;
LABEL_373:
                    unint64_t v265 = PDAdarkenPDA_14789((v262 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v263, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v261);
                    unint64_t v261 = HIWORD(v265);
                    unsigned int v266 = bswap32(v265);
                    *uint64_t v56 = HIWORD(v266);
                    v56[1] = v266;
                    v56[2] = bswap32(HIDWORD(v265)) >> 16;
                    goto LABEL_374;
                  }
                  unsigned int v263 = v262;
                  if (v56[3]) {
                    goto LABEL_373;
                  }
                  unsigned __int16 v264 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v264;
LABEL_374:
                  v56[3] = __rev16(v261);
LABEL_375:
                  unsigned int v267 = &v55[4 * (int)v44];
                  if ((unint64_t)v267 >= v46) {
                    uint64_t v268 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v268 = 0;
                  }
                  unsigned int v55 = &v267[4 * v268];
                  v56 += 4 * (int)v44;
                  --v260;
                }
                while (v260);
                v56 += 4 * v656;
                unsigned int v269 = v664;
                uint64_t v270 = &v664[4 * v662];
                uint64_t v271 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v270 < v657) {
                  uint64_t v271 = 0;
                }
                unint64_t v272 = &v270[4 * v271];
                uint64_t v273 = v46 + 8 * v271 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v273;
                  unsigned int v269 = v272;
                }
                unint64_t v664 = v269;
                if (v657) {
                  unsigned int v55 = v272;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v259) {
                  goto LABEL_662;
                }
              }
            case 17:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v274 = v666[0];
              while (1)
              {
                int v275 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_400;
                    }
                    LODWORD(v276) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v276) = 0xFFFF;
                  }
                  uint64_t v277 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v278 = 0xFFFF;
LABEL_398:
                    unint64_t v280 = PDAlightenPDA_14788((v277 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v278, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v276);
                    unint64_t v276 = HIWORD(v280);
                    unsigned int v281 = bswap32(v280);
                    *uint64_t v56 = HIWORD(v281);
                    v56[1] = v281;
                    v56[2] = bswap32(HIDWORD(v280)) >> 16;
                    goto LABEL_399;
                  }
                  unsigned int v278 = v277;
                  if (v56[3]) {
                    goto LABEL_398;
                  }
                  unsigned __int16 v279 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v279;
LABEL_399:
                  v56[3] = __rev16(v276);
LABEL_400:
                  unsigned int v282 = &v55[4 * (int)v44];
                  if ((unint64_t)v282 >= v46) {
                    uint64_t v283 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v283 = 0;
                  }
                  unsigned int v55 = &v282[4 * v283];
                  v56 += 4 * (int)v44;
                  --v275;
                }
                while (v275);
                v56 += 4 * v656;
                uint64_t v284 = v664;
                unsigned int v285 = &v664[4 * v662];
                uint64_t v286 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v285 < v657) {
                  uint64_t v286 = 0;
                }
                unsigned int v287 = &v285[4 * v286];
                uint64_t v288 = v46 + 8 * v286 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v288;
                  uint64_t v284 = v287;
                }
                unint64_t v664 = v284;
                if (v657) {
                  unsigned int v55 = v287;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v274) {
                  goto LABEL_662;
                }
              }
            case 18:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v289 = v666[0];
              while (1)
              {
                int v290 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_425;
                    }
                    LODWORD(v291) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v291) = 0xFFFF;
                  }
                  uint64_t v292 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v293 = 0xFFFF;
LABEL_423:
                    unint64_t v295 = PDAcolordodgePDA_14790((v292 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v293, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v291);
                    unint64_t v291 = HIWORD(v295);
                    unsigned int v296 = bswap32(v295);
                    *uint64_t v56 = HIWORD(v296);
                    v56[1] = v296;
                    v56[2] = bswap32(HIDWORD(v295)) >> 16;
                    goto LABEL_424;
                  }
                  unsigned int v293 = v292;
                  if (v56[3]) {
                    goto LABEL_423;
                  }
                  unsigned __int16 v294 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v294;
LABEL_424:
                  v56[3] = __rev16(v291);
LABEL_425:
                  unsigned int v297 = &v55[4 * (int)v44];
                  if ((unint64_t)v297 >= v46) {
                    uint64_t v298 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v298 = 0;
                  }
                  unsigned int v55 = &v297[4 * v298];
                  v56 += 4 * (int)v44;
                  --v290;
                }
                while (v290);
                v56 += 4 * v656;
                unsigned int v299 = v664;
                unint64_t v300 = &v664[4 * v662];
                uint64_t v301 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v300 < v657) {
                  uint64_t v301 = 0;
                }
                int v302 = &v300[4 * v301];
                uint64_t v303 = v46 + 8 * v301 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v303;
                  unsigned int v299 = v302;
                }
                unint64_t v664 = v299;
                if (v657) {
                  unsigned int v55 = v302;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v289) {
                  goto LABEL_662;
                }
              }
            case 19:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v304 = v666[0];
              while (1)
              {
                int v305 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_450;
                    }
                    LODWORD(v306) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v306) = 0xFFFF;
                  }
                  uint64_t v307 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v308 = 0xFFFF;
LABEL_448:
                    unint64_t v310 = PDAcolorburnPDA_14791((v307 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v308, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v306);
                    unint64_t v306 = HIWORD(v310);
                    unsigned int v311 = bswap32(v310);
                    *uint64_t v56 = HIWORD(v311);
                    v56[1] = v311;
                    v56[2] = bswap32(HIDWORD(v310)) >> 16;
                    goto LABEL_449;
                  }
                  unsigned int v308 = v307;
                  if (v56[3]) {
                    goto LABEL_448;
                  }
                  unsigned __int16 v309 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v309;
LABEL_449:
                  v56[3] = __rev16(v306);
LABEL_450:
                  uint64_t v312 = &v55[4 * (int)v44];
                  if ((unint64_t)v312 >= v46) {
                    uint64_t v313 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v313 = 0;
                  }
                  unsigned int v55 = &v312[4 * v313];
                  v56 += 4 * (int)v44;
                  --v305;
                }
                while (v305);
                v56 += 4 * v656;
                unint64_t v314 = v664;
                unsigned int v315 = &v664[4 * v662];
                uint64_t v316 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v315 < v657) {
                  uint64_t v316 = 0;
                }
                int v317 = &v315[4 * v316];
                uint64_t v318 = v46 + 8 * v316 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v318;
                  unint64_t v314 = v317;
                }
                unint64_t v664 = v314;
                if (v657) {
                  unsigned int v55 = v317;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v304) {
                  goto LABEL_662;
                }
              }
            case 20:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v319 = v666[0];
              while (1)
              {
                int v320 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_475;
                    }
                    LODWORD(v321) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v321) = 0xFFFF;
                  }
                  uint64_t v322 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v323 = 0xFFFF;
LABEL_473:
                    unint64_t v325 = PDAsoftlightPDA_14793((v322 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v323, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v321);
                    unint64_t v321 = HIWORD(v325);
                    unsigned int v326 = bswap32(v325);
                    *uint64_t v56 = HIWORD(v326);
                    v56[1] = v326;
                    v56[2] = bswap32(HIDWORD(v325)) >> 16;
                    goto LABEL_474;
                  }
                  unsigned int v323 = v322;
                  if (v56[3]) {
                    goto LABEL_473;
                  }
                  unsigned __int16 v324 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v324;
LABEL_474:
                  v56[3] = __rev16(v321);
LABEL_475:
                  unsigned int v327 = &v55[4 * (int)v44];
                  if ((unint64_t)v327 >= v46) {
                    uint64_t v328 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v328 = 0;
                  }
                  unsigned int v55 = &v327[4 * v328];
                  v56 += 4 * (int)v44;
                  --v320;
                }
                while (v320);
                v56 += 4 * v656;
                unsigned int v329 = v664;
                int v330 = &v664[4 * v662];
                uint64_t v331 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v330 < v657) {
                  uint64_t v331 = 0;
                }
                unint64_t v332 = &v330[4 * v331];
                uint64_t v333 = v46 + 8 * v331 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v333;
                  unsigned int v329 = v332;
                }
                unint64_t v664 = v329;
                if (v657) {
                  unsigned int v55 = v332;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v319) {
                  goto LABEL_662;
                }
              }
            case 21:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v334 = v666[0];
              while (1)
              {
                int v335 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_500;
                    }
                    LODWORD(v336) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v336) = 0xFFFF;
                  }
                  uint64_t v337 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v338 = 0xFFFF;
LABEL_498:
                    unint64_t v340 = PDAhardlightPDA_14792((v337 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v338, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v336);
                    unint64_t v336 = HIWORD(v340);
                    unsigned int v341 = bswap32(v340);
                    *uint64_t v56 = HIWORD(v341);
                    v56[1] = v341;
                    v56[2] = bswap32(HIDWORD(v340)) >> 16;
                    goto LABEL_499;
                  }
                  unsigned int v338 = v337;
                  if (v56[3]) {
                    goto LABEL_498;
                  }
                  unsigned __int16 v339 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v339;
LABEL_499:
                  v56[3] = __rev16(v336);
LABEL_500:
                  unint64_t v342 = &v55[4 * (int)v44];
                  if ((unint64_t)v342 >= v46) {
                    uint64_t v343 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v343 = 0;
                  }
                  unsigned int v55 = &v342[4 * v343];
                  v56 += 4 * (int)v44;
                  --v335;
                }
                while (v335);
                v56 += 4 * v656;
                int v344 = v664;
                int v345 = &v664[4 * v662];
                uint64_t v346 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v345 < v657) {
                  uint64_t v346 = 0;
                }
                uint64_t v347 = &v345[4 * v346];
                uint64_t v348 = v46 + 8 * v346 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v348;
                  int v344 = v347;
                }
                unint64_t v664 = v344;
                if (v657) {
                  unsigned int v55 = v347;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v334) {
                  goto LABEL_662;
                }
              }
            case 22:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v349 = v666[0];
              while (1)
              {
                int v350 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_525;
                    }
                    LODWORD(v351) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v351) = 0xFFFF;
                  }
                  uint64_t v352 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v353 = 0xFFFF;
LABEL_523:
                    unint64_t v355 = PDAdifferencePDA_14794((v352 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v353, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v351);
                    unint64_t v351 = HIWORD(v355);
                    unsigned int v356 = bswap32(v355);
                    *uint64_t v56 = HIWORD(v356);
                    v56[1] = v356;
                    v56[2] = bswap32(HIDWORD(v355)) >> 16;
                    goto LABEL_524;
                  }
                  unsigned int v353 = v352;
                  if (v56[3]) {
                    goto LABEL_523;
                  }
                  unsigned __int16 v354 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v354;
LABEL_524:
                  v56[3] = __rev16(v351);
LABEL_525:
                  unsigned int v357 = &v55[4 * (int)v44];
                  if ((unint64_t)v357 >= v46) {
                    uint64_t v358 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v358 = 0;
                  }
                  unsigned int v55 = &v357[4 * v358];
                  v56 += 4 * (int)v44;
                  --v350;
                }
                while (v350);
                v56 += 4 * v656;
                int v359 = v664;
                unint64_t v360 = &v664[4 * v662];
                uint64_t v361 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v360 < v657) {
                  uint64_t v361 = 0;
                }
                int v362 = &v360[4 * v361];
                uint64_t v363 = v46 + 8 * v361 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v363;
                  int v359 = v362;
                }
                unint64_t v664 = v359;
                if (v657) {
                  unsigned int v55 = v362;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v349) {
                  goto LABEL_662;
                }
              }
            case 23:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v364 = v666[0];
              while (1)
              {
                int v365 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_550;
                    }
                    LODWORD(v366) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v366) = 0xFFFF;
                  }
                  uint64_t v367 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v368 = 0xFFFF;
LABEL_548:
                    unint64_t v370 = PDAexclusionPDA_14795((v367 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v368, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v366);
                    unint64_t v366 = HIWORD(v370);
                    unsigned int v371 = bswap32(v370);
                    *uint64_t v56 = HIWORD(v371);
                    v56[1] = v371;
                    v56[2] = bswap32(HIDWORD(v370)) >> 16;
                    goto LABEL_549;
                  }
                  unsigned int v368 = v367;
                  if (v56[3]) {
                    goto LABEL_548;
                  }
                  unsigned __int16 v369 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v369;
LABEL_549:
                  v56[3] = __rev16(v366);
LABEL_550:
                  int v372 = &v55[4 * (int)v44];
                  if ((unint64_t)v372 >= v46) {
                    uint64_t v373 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v373 = 0;
                  }
                  unsigned int v55 = &v372[4 * v373];
                  v56 += 4 * (int)v44;
                  --v365;
                }
                while (v365);
                v56 += 4 * v656;
                unint64_t v374 = v664;
                uint64_t v375 = &v664[4 * v662];
                uint64_t v376 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v375 < v657) {
                  uint64_t v376 = 0;
                }
                unint64_t v377 = &v375[4 * v376];
                uint64_t v378 = v46 + 8 * v376 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v378;
                  unint64_t v374 = v377;
                }
                unint64_t v664 = v374;
                if (v657) {
                  unsigned int v55 = v377;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v364) {
                  goto LABEL_662;
                }
              }
            case 24:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v379 = v666[0];
              while (1)
              {
                int v380 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_575;
                    }
                    LODWORD(v381) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v381) = 0xFFFF;
                  }
                  uint64_t v382 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v383 = 0xFFFF;
LABEL_573:
                    unint64_t v385 = PDAhuePDA_14796((v382 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v383, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v381);
                    unint64_t v381 = HIWORD(v385);
                    unsigned int v386 = bswap32(v385);
                    *uint64_t v56 = HIWORD(v386);
                    v56[1] = v386;
                    v56[2] = bswap32(HIDWORD(v385)) >> 16;
                    goto LABEL_574;
                  }
                  unsigned int v383 = v382;
                  if (v56[3]) {
                    goto LABEL_573;
                  }
                  unsigned __int16 v384 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v384;
LABEL_574:
                  v56[3] = __rev16(v381);
LABEL_575:
                  int v387 = &v55[4 * (int)v44];
                  if ((unint64_t)v387 >= v46) {
                    uint64_t v388 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v388 = 0;
                  }
                  unsigned int v55 = &v387[4 * v388];
                  v56 += 4 * (int)v44;
                  --v380;
                }
                while (v380);
                v56 += 4 * v656;
                uint64_t v389 = v664;
                int v390 = &v664[4 * v662];
                uint64_t v391 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v390 < v657) {
                  uint64_t v391 = 0;
                }
                unsigned int v392 = &v390[4 * v391];
                uint64_t v393 = v46 + 8 * v391 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v393;
                  uint64_t v389 = v392;
                }
                unint64_t v664 = v389;
                if (v657) {
                  unsigned int v55 = v392;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v379) {
                  goto LABEL_662;
                }
              }
            case 25:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v394 = v666[0];
              while (1)
              {
                int v395 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_600;
                    }
                    LODWORD(v396) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v396) = 0xFFFF;
                  }
                  uint64_t v397 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v398 = 0xFFFF;
LABEL_598:
                    unint64_t v400 = PDAsaturationPDA_14797((v397 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v398, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v396);
                    unint64_t v396 = HIWORD(v400);
                    unsigned int v401 = bswap32(v400);
                    *uint64_t v56 = HIWORD(v401);
                    v56[1] = v401;
                    v56[2] = bswap32(HIDWORD(v400)) >> 16;
                    goto LABEL_599;
                  }
                  unsigned int v398 = v397;
                  if (v56[3]) {
                    goto LABEL_598;
                  }
                  unsigned __int16 v399 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v399;
LABEL_599:
                  v56[3] = __rev16(v396);
LABEL_600:
                  unint64_t v402 = &v55[4 * (int)v44];
                  if ((unint64_t)v402 >= v46) {
                    uint64_t v403 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v403 = 0;
                  }
                  unsigned int v55 = &v402[4 * v403];
                  v56 += 4 * (int)v44;
                  --v395;
                }
                while (v395);
                v56 += 4 * v656;
                int v404 = v664;
                unint64_t v405 = &v664[4 * v662];
                uint64_t v406 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v405 < v657) {
                  uint64_t v406 = 0;
                }
                unsigned int v407 = &v405[4 * v406];
                uint64_t v408 = v46 + 8 * v406 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v408;
                  int v404 = v407;
                }
                unint64_t v664 = v404;
                if (v657) {
                  unsigned int v55 = v407;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v394) {
                  goto LABEL_662;
                }
              }
            case 26:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v409 = v666[0];
              while (1)
              {
                int v410 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3]) {
                      goto LABEL_625;
                    }
                    LODWORD(v411) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v411) = 0xFFFF;
                  }
                  uint64_t v412 = __rev16(v56[3]);
                  if (!v10)
                  {
                    unsigned int v413 = 0xFFFF;
LABEL_623:
                    unint64_t v415 = PDAluminosityPDA_14798(((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v411, (v412 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v413);
                    unint64_t v411 = HIWORD(v415);
                    unsigned int v416 = bswap32(v415);
                    *uint64_t v56 = HIWORD(v416);
                    v56[1] = v416;
                    v56[2] = bswap32(HIDWORD(v415)) >> 16;
                    goto LABEL_624;
                  }
                  unsigned int v413 = v412;
                  if (v56[3]) {
                    goto LABEL_623;
                  }
                  unsigned __int16 v414 = v55[2];
                  *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
                  v56[2] = v414;
LABEL_624:
                  v56[3] = __rev16(v411);
LABEL_625:
                  unint64_t v417 = &v55[4 * (int)v44];
                  if ((unint64_t)v417 >= v46) {
                    uint64_t v418 = -(uint64_t)(int)v647;
                  }
                  else {
                    uint64_t v418 = 0;
                  }
                  unsigned int v55 = &v417[4 * v418];
                  v56 += 4 * (int)v44;
                  --v410;
                }
                while (v410);
                v56 += 4 * v656;
                int v419 = v664;
                unint64_t v420 = &v664[4 * v662];
                uint64_t v421 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v420 < v657) {
                  uint64_t v421 = 0;
                }
                unsigned int v422 = &v420[4 * v421];
                uint64_t v423 = v46 + 8 * v421 + 8 * v662;
                if (v657)
                {
                  unint64_t v46 = v423;
                  int v419 = v422;
                }
                unint64_t v664 = v419;
                if (v657) {
                  unsigned int v55 = v422;
                }
                else {
                  v55 += 4 * v662;
                }
                if (!--v409) {
                  goto LABEL_662;
                }
              }
            case 27:
              uint64_t v642 = v34;
              unint64_t v643 = v35;
              unint64_t v644 = v36;
              uint64_t v641 = v44;
              int v424 = v666[0];
              break;
            default:
              goto LABEL_663;
          }
          break;
        }
LABEL_639:
        int v425 = v659;
        while (v45)
        {
          if (v55[3])
          {
            LODWORD(v426) = __rev16(v55[3]);
            goto LABEL_644;
          }
LABEL_650:
          uint64_t v432 = &v55[4 * (int)v44];
          if ((unint64_t)v432 >= v46) {
            uint64_t v433 = -(uint64_t)(int)v647;
          }
          else {
            uint64_t v433 = 0;
          }
          unsigned int v55 = &v432[4 * v433];
          v56 += 4 * (int)v44;
          if (!--v425)
          {
            v56 += 4 * v656;
            unsigned int v434 = v664;
            int v435 = &v664[4 * v662];
            uint64_t v436 = -(uint64_t)(v662 * v639);
            if ((unint64_t)v435 < v657) {
              uint64_t v436 = 0;
            }
            int v437 = &v435[4 * v436];
            uint64_t v438 = v46 + 8 * v436 + 8 * v662;
            if (v657)
            {
              unint64_t v46 = v438;
              unsigned int v434 = v437;
            }
            unint64_t v664 = v434;
            if (v657) {
              unsigned int v55 = v437;
            }
            else {
              v55 += 4 * v662;
            }
            if (!--v424)
            {
LABEL_662:
              v666[0] = 0;
              int v11 = v649;
              unint64_t v35 = v643;
              unint64_t v36 = v644;
              uint64_t v44 = v641;
              uint64_t v34 = v642;
              goto LABEL_663;
            }
            goto LABEL_639;
          }
        }
        LODWORD(v426) = 0xFFFF;
LABEL_644:
        uint64_t v427 = __rev16(v56[3]);
        if (v10)
        {
          unsigned int v428 = v427;
          if (!v56[3])
          {
            unsigned __int16 v429 = v55[2];
            *(_DWORD *)uint64_t v56 = *(_DWORD *)v55;
            v56[2] = v429;
LABEL_649:
            v56[3] = __rev16(v426);
            goto LABEL_650;
          }
        }
        else
        {
          unsigned int v428 = 0xFFFF;
        }
        unint64_t v430 = PDAluminosityPDA_14798((v427 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v428, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v426);
        unint64_t v426 = HIWORD(v430);
        unsigned int v431 = bswap32(v430);
        *uint64_t v56 = HIWORD(v431);
        v56[1] = v431;
        v56[2] = bswap32(HIDWORD(v430)) >> 16;
        goto LABEL_649;
      }
      unint64_t v656 = v35 - v13;
      int v659 = v13;
      if (v34)
      {
        uint64_t v646 = 0;
        int v53 = v39 % (int)v647;
        uint64_t v54 = v34 + 8 * (v42 >> 3) * (v40 % v639);
        unsigned int v55 = (unsigned __int16 *)(v54 + 8 * v53);
        unint64_t v46 = v54 + 8 * (int)v647;
        uint64_t v44 = 1;
        unint64_t v662 = v42 >> 3;
        unint64_t v664 = v55;
        uint64_t v56 = (unsigned __int16 *)v36;
        int v634 = v40 % v639;
        int v635 = v53;
        goto LABEL_59;
      }
      int v634 = *(_DWORD *)(v5 + 60);
      int v635 = *(_DWORD *)(v5 + 56);
      unint64_t v46 = 0;
      unint64_t v57 = v42 >> 3;
      uint64_t v44 = 1;
      unint64_t v58 = v13;
LABEL_58:
      uint64_t v646 = 0;
      unint64_t v657 = 0;
      unint64_t v662 = v57 - v58;
      unint64_t v664 = 0;
      unsigned int v55 = (unsigned __int16 *)v34;
      uint64_t v56 = (unsigned __int16 *)v36;
      goto LABEL_59;
    }
    v34 += 8 * (v39 + (v42 >> 3) * v40);
    unint64_t v647 = v42 >> 3;
    if (v42 >> 3 == v35)
    {
      if ((uint64_t)(v36 - v34) < 1) {
        goto LABEL_35;
      }
      if (v13 < (v36 - v34) >> 3)
      {
        unint64_t v43 = v35 * (v15 - 1);
        if (v36 <= v34 + 8 * v43 + 8 * v14)
        {
          v36 += 8 * v43;
          unint64_t v35 = -(uint64_t)v35;
          uint64_t v44 = 1;
          v34 += 8 * v43;
          goto LABEL_52;
        }
LABEL_35:
        uint64_t v44 = 1;
LABEL_52:
        unint64_t v647 = v35;
        goto LABEL_53;
      }
      v36 += 8 * v14;
      uint64_t v44 = 0xFFFFFFFFLL;
      unint64_t v647 = v35;
      v34 += 8 * v14;
    }
    else
    {
      uint64_t v44 = 1;
    }
LABEL_53:
    int v634 = v40;
    int v635 = v39;
    BOOL v45 = v9 != 0;
    if (v16)
    {
      int v639 = 0;
      unint64_t v657 = 0;
      unint64_t v46 = -1;
      unint64_t v662 = v647;
      unint64_t v664 = 0;
      goto LABEL_55;
    }
    int v639 = 0;
    int v659 = v13;
    unint64_t v58 = (int)v44 * (int)v13;
    unint64_t v656 = v35 - v58;
    unint64_t v46 = -1;
    unint64_t v57 = v647;
    goto LABEL_58;
  }
  if (BYTE1(v8) != 4) {
    goto LABEL_30;
  }
  v676[0] = *(_DWORD *)(v5 + 4);
  v666[0] = v15;
  unsigned int v18 = *(unsigned __int16 **)(v5 + 88);
  unsigned int v655 = *v18;
  unsigned int v663 = v18[1];
  unsigned int v19 = v18[2];
  unsigned int v20 = v18[3];
  uint64_t v21 = __rev16(v20);
  int32x2_t v638 = (int32x2_t)(__PAIR64__(__rev16(v663), bswap32(v655)) >> 16);
  unint64_t v640 = ((unint64_t)__rev16(v19) << 32) | (v21 << 48);
  unint64_t v22 = v640 | *(void *)&v638;
  unsigned int v23 = ~(bswap32(v20) >> 16);
  unint64_t v637 = *(int *)(v5 + 28);
  unint64_t v24 = v637 >> 3;
  unint64_t v25 = (unsigned __int16 *)(*(void *)(v5 + 40) + 8 * (*(int *)(v5 + 12) + (v637 >> 3) * *(int *)(v5 + 16)));
  unint64_t v645 = v25;
  unsigned __int16 v661 = v23;
  if (v16)
  {
    shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, 1, 1, 1, *(_DWORD *)(v5 + 104), *(_DWORD *)(v5 + 108), v13, v15);
    unint64_t v13 = v26;
    unsigned __int16 v27 = v655;
    if (v26) {
      goto LABEL_980;
    }
    return 1;
  }
  unint64_t v648 = 0;
  unsigned __int16 v27 = *v18;
  while (2)
  {
    unint64_t v658 = v24 - (int)v13;
    switch(v649)
    {
      case 0:
        unsigned int v475 = v666[0];
        int v476 = 8 * v13;
        goto LABEL_986;
      case 1:
        uint64_t v477 = *(void *)(v636 + 88);
        if (v477)
        {
          CGSFillDRAM64((unint64_t)v25, v637 & 0xFFFFFFF8, 8 * v13, v666[0], v477, 8, 8, 1, 0, 0);
        }
        else
        {
          int v476 = 8 * v13;
          unsigned int v475 = v666[0];
LABEL_986:
          CGBlt_fillBytes(v476, v475, 0, (char *)v25, v637 & 0xFFFFFFF8);
        }
        goto LABEL_978;
      case 2:
        int v654 = v666[0];
        do
        {
          if ((int)v13 < 4)
          {
            int v481 = v13;
          }
          else
          {
            unsigned int v478 = (v13 >> 2) + 1;
            do
            {
              RGBA64_DplusDM(v25, v22, ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | ((unint64_t)(bswap32(v25[3]) >> 16) << 48) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v661);
              RGBA64_DplusDM(v25 + 4, v22, ((unint64_t)(bswap32(v25[6]) >> 16) << 32) | ((unint64_t)(bswap32(v25[7]) >> 16) << 48) | bswap32(v25[5]) & 0xFFFF0000 | (unint64_t)(bswap32(v25[4]) >> 16), v661);
              RGBA64_DplusDM(v25 + 8, v22, ((unint64_t)(bswap32(v25[10]) >> 16) << 32) | ((unint64_t)(bswap32(v25[11]) >> 16) << 48) | bswap32(v25[9]) & 0xFFFF0000 | (unint64_t)(bswap32(v25[8]) >> 16), v661);
              unsigned int v480 = v25[12];
              uint64_t v479 = v25 + 12;
              LOWORD(v23) = v661;
              RGBA64_DplusDM(v479, v22, ((unint64_t)(bswap32((unsigned __int16)v479[2]) >> 16) << 32) | ((unint64_t)(bswap32((unsigned __int16)v479[3]) >> 16) << 48) | bswap32((unsigned __int16)v479[1]) & 0xFFFF0000 | (unint64_t)(bswap32(v480) >> 16), v661);
              unint64_t v25 = v479 + 4;
              --v478;
            }
            while (v478 > 1);
            int v481 = v13 & 3;
            unint64_t v24 = v637 >> 3;
          }
          if (v481 >= 1)
          {
            unsigned int v482 = v481 + 1;
            do
            {
              RGBA64_DplusDM(v25, v22, ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | ((unint64_t)(bswap32(v25[3]) >> 16) << 48) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), (unsigned __int16)v23);
              v25 += 4;
              --v482;
            }
            while (v482 > 1);
            unsigned __int16 v27 = v655;
          }
          v25 += 4 * v658;
          --v654;
        }
        while (v654);
        goto LABEL_788;
      case 3:
        v483.i32[0] = v638.u16[0];
        v483.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(v638, 0), 0x10uLL).i32[1];
        v483.i32[2] = WORD2(v640);
        v483.i32[3] = v21;
        int32x4_t v484 = v483;
        v484.i32[0] = v638.i32[0];
        v484.i32[2] = HIDWORD(v640);
        int v485 = v666[0];
        do
        {
          int v486 = v13;
          do
          {
            unsigned int v487 = bswap32(v25[3]) >> 16;
            if (v487 == 0xFFFF)
            {
              *unint64_t v25 = v27;
              v25[1] = v663;
              v25[2] = v19;
              v25[3] = v20;
            }
            else if (v487)
            {
              v488.i64[0] = 0x800000008000;
              v488.i64[1] = 0x800000008000;
              uint32x4_t v489 = (uint32x4_t)vmlaq_s32(v488, v483, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(~v487)));
              *(int8x8_t *)unint64_t v25 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v484, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v489, v489, 0x10uLL), 0x10uLL))));
            }
            else
            {
              *(void *)unint64_t v25 = 0;
            }
            v25 += 4;
            --v486;
          }
          while (v486);
          v25 += 4 * v658;
          --v485;
        }
        while (v485);
        goto LABEL_788;
      case 4:
        v490.i32[0] = v638.u16[0];
        v490.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(v638, 0), 0x10uLL).i32[1];
        v490.i32[2] = WORD2(v640);
        v490.i32[3] = v21;
        int32x4_t v491 = v490;
        v491.i32[0] = v638.i32[0];
        v491.i32[2] = HIDWORD(v640);
        int v492 = v666[0];
        do
        {
          int v493 = v13;
          do
          {
            unsigned int v494 = bswap32(~v25[3]) >> 16;
            if (v494 == 0xFFFF)
            {
              *unint64_t v25 = v27;
              v25[1] = v663;
              v25[2] = v19;
              v25[3] = v20;
            }
            else if (v494)
            {
              v495.i64[0] = 0x800000008000;
              v495.i64[1] = 0x800000008000;
              uint32x4_t v496 = (uint32x4_t)vmlaq_s32(v495, v490, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(~v494)));
              *(int8x8_t *)unint64_t v25 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v491, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v496, v496, 0x10uLL), 0x10uLL))));
            }
            else
            {
              *(void *)unint64_t v25 = 0;
            }
            v25 += 4;
            --v493;
          }
          while (v493);
          v25 += 4 * v658;
          --v492;
        }
        while (v492);
        goto LABEL_788;
      case 5:
        int v497 = v666[0];
        do
        {
          int v498 = v13;
          do
          {
            uint64_t v499 = bswap32(v25[3]) >> 16;
            RGBA64_DMplusDM(v25, v22, v499, (v499 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v661);
            v25 += 4;
            --v498;
          }
          while (v498);
          v25 += 4 * v658;
          --v497;
        }
        while (v497);
        goto LABEL_798;
      case 6:
        int v500 = v666[0];
        int v660 = v13;
        while (1)
        {
          unsigned int v501 = bswap32(v25[3]);
          if (HIWORD(v501) != 0xFFFF)
          {
            if ((unsigned __int16)~HIWORD(v501) == 0xFFFF)
            {
              *unint64_t v25 = v655;
              v25[1] = v663;
              v25[2] = v19;
              v25[3] = v20;
            }
            else
            {
              RGBA64_DplusDM(v25, ((unint64_t)HIWORD(v501) << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v22, (unsigned __int16)~HIWORD(v501));
            }
          }
          v25 += 4;
          LODWORD(v13) = v13 - 1;
          if (!v13)
          {
            LODWORD(v13) = v660;
            v25 += 4 * v658;
            if (!--v500) {
              break;
            }
          }
        }
        goto LABEL_798;
      case 7:
        int32x4_t v502 = vdupq_n_s32((unsigned __int16)v23);
        int v503 = v666[0];
        do
        {
          int v504 = v13;
          do
          {
            unsigned int v505 = bswap32(v25[1] | (*v25 << 16));
            v506.i32[0] = (unsigned __int16)v505;
            v506.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v505), 0x10uLL).i32[1];
            v506.i64[1] = __PAIR64__(bswap32(v25[3]) >> 16, bswap32(v25[2]) >> 16);
            v507.i64[0] = 0x800000008000;
            v507.i64[1] = 0x800000008000;
            uint32x4_t v508 = (uint32x4_t)vmlaq_s32(v507, v506, v502);
            v506.i32[0] = v505;
            *(int8x8_t *)unint64_t v25 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v506, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v508, v508, 0x10uLL), 0x10uLL))));
            v25 += 4;
            --v504;
          }
          while (v504);
          v25 += 4 * v658;
          --v503;
        }
        while (v503);
        goto LABEL_788;
      case 8:
        int32x4_t v509 = vdupq_n_s32(v21);
        int v510 = v666[0];
        do
        {
          int v511 = v13;
          do
          {
            unsigned int v512 = bswap32(v25[1] | (*v25 << 16));
            v513.i32[0] = (unsigned __int16)v512;
            v513.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v512), 0x10uLL).i32[1];
            v513.i64[1] = __PAIR64__(bswap32(v25[3]) >> 16, bswap32(v25[2]) >> 16);
            v514.i64[0] = 0x800000008000;
            v514.i64[1] = 0x800000008000;
            uint32x4_t v515 = (uint32x4_t)vmlaq_s32(v514, v513, v509);
            v513.i32[0] = v512;
            *(int8x8_t *)unint64_t v25 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v513, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v515, v515, 0x10uLL), 0x10uLL))));
            v25 += 4;
            --v511;
          }
          while (v511);
          v25 += 4 * v658;
          --v510;
        }
        while (v510);
LABEL_788:
        v666[0] = 0;
        goto LABEL_978;
      case 9:
        int v516 = v666[0];
        do
        {
          int v517 = v13;
          do
          {
            uint64_t v518 = bswap32(v25[3]) >> 16;
            RGBA64_DMplusDM(v25, v22, v518 ^ 0xFFFF, (v518 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v21);
            v25 += 4;
            --v517;
          }
          while (v517);
          v25 += 4 * v658;
          --v516;
        }
        while (v516);
        goto LABEL_811;
      case 10:
        int v519 = v666[0];
        do
        {
          int v520 = v13;
          do
          {
            uint64_t v521 = bswap32(v25[3]) >> 16;
            RGBA64_DMplusDM(v25, v22, v521 ^ 0xFFFF, (v521 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v661);
            v25 += 4;
            --v520;
          }
          while (v520);
          v25 += 4 * v658;
          --v519;
        }
        while (v519);
LABEL_798:
        v666[0] = 0;
        unsigned __int16 v27 = v655;
        goto LABEL_977;
      case 11:
        int v522 = v666[0];
        do
        {
          int v523 = v13;
          do
          {
            uint64_t v524 = bswap32(v25[3]) >> 16;
            unint64_t v525 = ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | (v524 << 48) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16);
            if (v10) {
              unsigned __int16 v526 = v524;
            }
            else {
              unsigned __int16 v526 = -1;
            }
            RGBA64_DAplusdDA(v25, v525, v526, v22, v21);
            v25 += 4;
            --v523;
          }
          while (v523);
          v25 += 4 * v658;
          --v522;
        }
        while (v522);
        goto LABEL_811;
      case 12:
        int v527 = v666[0];
        do
        {
          int v528 = v13;
          do
          {
            RGBA64_DpluslD(v25, ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | ((unint64_t)(bswap32(v25[3]) >> 16) << 48) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v22);
            v25 += 4;
            --v528;
          }
          while (v528);
          v25 += 4 * v658;
          --v527;
        }
        while (v527);
LABEL_811:
        v666[0] = 0;
        unsigned __int16 v27 = v655;
        LOWORD(v23) = v661;
        goto LABEL_978;
      case 13:
        if (!v20) {
          goto LABEL_978;
        }
        int v529 = v666[0];
        while (1)
        {
          int v530 = v13;
          do
          {
            uint64_t v531 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v532 = v531;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v533 = v20;
                v25[2] = v19;
                goto LABEL_820;
              }
            }
            else
            {
              unsigned int v532 = 0xFFFF;
            }
            unint64_t v534 = PDAmultiplyPDA_14785((v531 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v532, v22, v21);
            unsigned int v535 = bswap32(v534);
            *unint64_t v25 = HIWORD(v535);
            v25[1] = v535;
            v25[2] = bswap32(HIDWORD(v534)) >> 16;
            unsigned __int16 v533 = __rev16(HIWORD(v534));
LABEL_820:
            v25[3] = v533;
            v25 += 4;
            --v530;
          }
          while (v530);
          v25 += 4 * v658;
          if (!--v529) {
            goto LABEL_976;
          }
        }
      case 14:
        if (!v20) {
          goto LABEL_978;
        }
        int v536 = v666[0];
        while (1)
        {
          int v537 = v13;
          do
          {
            uint64_t v538 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v539 = v538;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v540 = v20;
                v25[2] = v19;
                goto LABEL_831;
              }
            }
            else
            {
              unsigned int v539 = 0xFFFF;
            }
            unint64_t v541 = PDAscreenPDA_14786((v538 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v539, v22, v21);
            unsigned int v542 = bswap32(v541);
            *unint64_t v25 = HIWORD(v542);
            v25[1] = v542;
            v25[2] = bswap32(HIDWORD(v541)) >> 16;
            unsigned __int16 v540 = __rev16(HIWORD(v541));
LABEL_831:
            v25[3] = v540;
            v25 += 4;
            --v537;
          }
          while (v537);
          v25 += 4 * v658;
          if (!--v536) {
            goto LABEL_976;
          }
        }
      case 15:
        if (!v20) {
          goto LABEL_978;
        }
        int v543 = v666[0];
        while (1)
        {
          int v544 = v13;
          do
          {
            uint64_t v545 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v546 = v545;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v547 = v20;
                v25[2] = v19;
                goto LABEL_842;
              }
            }
            else
            {
              unsigned int v546 = 0xFFFF;
            }
            unint64_t v548 = PDAoverlayPDA_14787((v545 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v546, v22, v21);
            unsigned int v549 = bswap32(v548);
            *unint64_t v25 = HIWORD(v549);
            v25[1] = v549;
            v25[2] = bswap32(HIDWORD(v548)) >> 16;
            unsigned __int16 v547 = __rev16(HIWORD(v548));
LABEL_842:
            v25[3] = v547;
            v25 += 4;
            --v544;
          }
          while (v544);
          v25 += 4 * v658;
          if (!--v543) {
            goto LABEL_976;
          }
        }
      case 16:
        if (!v20) {
          goto LABEL_978;
        }
        int v550 = v666[0];
        while (1)
        {
          int v551 = v13;
          do
          {
            uint64_t v552 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v553 = v552;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v554 = v20;
                v25[2] = v19;
                goto LABEL_853;
              }
            }
            else
            {
              unsigned int v553 = 0xFFFF;
            }
            unint64_t v555 = PDAdarkenPDA_14789((v552 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v553, v22, v21);
            unsigned int v556 = bswap32(v555);
            *unint64_t v25 = HIWORD(v556);
            v25[1] = v556;
            v25[2] = bswap32(HIDWORD(v555)) >> 16;
            unsigned __int16 v554 = __rev16(HIWORD(v555));
LABEL_853:
            v25[3] = v554;
            v25 += 4;
            --v551;
          }
          while (v551);
          v25 += 4 * v658;
          if (!--v550) {
            goto LABEL_976;
          }
        }
      case 17:
        if (!v20) {
          goto LABEL_978;
        }
        int v557 = v666[0];
        while (1)
        {
          int v558 = v13;
          do
          {
            uint64_t v559 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v560 = v559;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v561 = v20;
                v25[2] = v19;
                goto LABEL_864;
              }
            }
            else
            {
              unsigned int v560 = 0xFFFF;
            }
            unint64_t v562 = PDAlightenPDA_14788((v559 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v560, v22, v21);
            unsigned int v563 = bswap32(v562);
            *unint64_t v25 = HIWORD(v563);
            v25[1] = v563;
            v25[2] = bswap32(HIDWORD(v562)) >> 16;
            unsigned __int16 v561 = __rev16(HIWORD(v562));
LABEL_864:
            v25[3] = v561;
            v25 += 4;
            --v558;
          }
          while (v558);
          v25 += 4 * v658;
          if (!--v557) {
            goto LABEL_976;
          }
        }
      case 18:
        if (!v20) {
          goto LABEL_978;
        }
        int v564 = v666[0];
        while (1)
        {
          int v565 = v13;
          do
          {
            uint64_t v566 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v567 = v566;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v568 = v20;
                v25[2] = v19;
                goto LABEL_875;
              }
            }
            else
            {
              unsigned int v567 = 0xFFFF;
            }
            unint64_t v569 = PDAcolordodgePDA_14790((v566 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v567, v22, v21);
            unsigned int v570 = bswap32(v569);
            *unint64_t v25 = HIWORD(v570);
            v25[1] = v570;
            v25[2] = bswap32(HIDWORD(v569)) >> 16;
            unsigned __int16 v568 = __rev16(HIWORD(v569));
LABEL_875:
            v25[3] = v568;
            v25 += 4;
            --v565;
          }
          while (v565);
          v25 += 4 * v658;
          if (!--v564) {
            goto LABEL_976;
          }
        }
      case 19:
        if (!v20) {
          goto LABEL_978;
        }
        int v571 = v666[0];
        while (1)
        {
          int v572 = v13;
          do
          {
            uint64_t v573 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v574 = v573;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v575 = v20;
                v25[2] = v19;
                goto LABEL_886;
              }
            }
            else
            {
              unsigned int v574 = 0xFFFF;
            }
            unint64_t v576 = PDAcolorburnPDA_14791((v573 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v574, v22, v21);
            unsigned int v577 = bswap32(v576);
            *unint64_t v25 = HIWORD(v577);
            v25[1] = v577;
            v25[2] = bswap32(HIDWORD(v576)) >> 16;
            unsigned __int16 v575 = __rev16(HIWORD(v576));
LABEL_886:
            v25[3] = v575;
            v25 += 4;
            --v572;
          }
          while (v572);
          v25 += 4 * v658;
          if (!--v571) {
            goto LABEL_976;
          }
        }
      case 20:
        if (!v20) {
          goto LABEL_978;
        }
        int v578 = v666[0];
        while (1)
        {
          int v579 = v13;
          do
          {
            uint64_t v580 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v581 = v580;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v582 = v20;
                v25[2] = v19;
                goto LABEL_897;
              }
            }
            else
            {
              unsigned int v581 = 0xFFFF;
            }
            unint64_t v583 = PDAsoftlightPDA_14793((v580 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v581, v22, v21);
            unsigned int v584 = bswap32(v583);
            *unint64_t v25 = HIWORD(v584);
            v25[1] = v584;
            v25[2] = bswap32(HIDWORD(v583)) >> 16;
            unsigned __int16 v582 = __rev16(HIWORD(v583));
LABEL_897:
            v25[3] = v582;
            v25 += 4;
            --v579;
          }
          while (v579);
          v25 += 4 * v658;
          if (!--v578) {
            goto LABEL_976;
          }
        }
      case 21:
        if (!v20) {
          goto LABEL_978;
        }
        int v585 = v666[0];
        while (1)
        {
          int v586 = v13;
          do
          {
            uint64_t v587 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v588 = v587;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v589 = v20;
                v25[2] = v19;
                goto LABEL_908;
              }
            }
            else
            {
              unsigned int v588 = 0xFFFF;
            }
            unint64_t v590 = PDAhardlightPDA_14792((v587 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v588, v22, v21);
            unsigned int v591 = bswap32(v590);
            *unint64_t v25 = HIWORD(v591);
            v25[1] = v591;
            v25[2] = bswap32(HIDWORD(v590)) >> 16;
            unsigned __int16 v589 = __rev16(HIWORD(v590));
LABEL_908:
            v25[3] = v589;
            v25 += 4;
            --v586;
          }
          while (v586);
          v25 += 4 * v658;
          if (!--v585) {
            goto LABEL_976;
          }
        }
      case 22:
        if (!v20) {
          goto LABEL_978;
        }
        int v592 = v666[0];
        while (1)
        {
          int v593 = v13;
          do
          {
            uint64_t v594 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v595 = v594;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v596 = v20;
                v25[2] = v19;
                goto LABEL_919;
              }
            }
            else
            {
              unsigned int v595 = 0xFFFF;
            }
            unint64_t v597 = PDAdifferencePDA_14794((v594 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v595, v22, v21);
            unsigned int v598 = bswap32(v597);
            *unint64_t v25 = HIWORD(v598);
            v25[1] = v598;
            v25[2] = bswap32(HIDWORD(v597)) >> 16;
            unsigned __int16 v596 = __rev16(HIWORD(v597));
LABEL_919:
            v25[3] = v596;
            v25 += 4;
            --v593;
          }
          while (v593);
          v25 += 4 * v658;
          if (!--v592) {
            goto LABEL_976;
          }
        }
      case 23:
        if (!v20) {
          goto LABEL_978;
        }
        int v599 = v666[0];
        while (1)
        {
          int v600 = v13;
          do
          {
            uint64_t v601 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v602 = v601;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v603 = v20;
                v25[2] = v19;
                goto LABEL_930;
              }
            }
            else
            {
              unsigned int v602 = 0xFFFF;
            }
            unint64_t v604 = PDAexclusionPDA_14795((v601 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v602, v22, v21);
            unsigned int v605 = bswap32(v604);
            *unint64_t v25 = HIWORD(v605);
            v25[1] = v605;
            v25[2] = bswap32(HIDWORD(v604)) >> 16;
            unsigned __int16 v603 = __rev16(HIWORD(v604));
LABEL_930:
            v25[3] = v603;
            v25 += 4;
            --v600;
          }
          while (v600);
          v25 += 4 * v658;
          if (!--v599) {
            goto LABEL_976;
          }
        }
      case 24:
        if (!v20) {
          goto LABEL_978;
        }
        int v606 = v666[0];
        while (1)
        {
          int v607 = v13;
          do
          {
            uint64_t v608 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v609 = v608;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v610 = v20;
                v25[2] = v19;
                goto LABEL_941;
              }
            }
            else
            {
              unsigned int v609 = 0xFFFF;
            }
            unint64_t v611 = PDAhuePDA_14796((v608 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v609, v22, v21);
            unsigned int v612 = bswap32(v611);
            *unint64_t v25 = HIWORD(v612);
            v25[1] = v612;
            v25[2] = bswap32(HIDWORD(v611)) >> 16;
            unsigned __int16 v610 = __rev16(HIWORD(v611));
LABEL_941:
            v25[3] = v610;
            v25 += 4;
            --v607;
          }
          while (v607);
          v25 += 4 * v658;
          if (!--v606) {
            goto LABEL_976;
          }
        }
      case 25:
        if (!v20) {
          goto LABEL_978;
        }
        int v613 = v666[0];
        while (1)
        {
          int v614 = v13;
          do
          {
            uint64_t v615 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v616 = v615;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v617 = v20;
                v25[2] = v19;
                goto LABEL_952;
              }
            }
            else
            {
              unsigned int v616 = 0xFFFF;
            }
            unint64_t v618 = PDAsaturationPDA_14797((v615 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v616, v22, v21);
            unsigned int v619 = bswap32(v618);
            *unint64_t v25 = HIWORD(v619);
            v25[1] = v619;
            v25[2] = bswap32(HIDWORD(v618)) >> 16;
            unsigned __int16 v617 = __rev16(HIWORD(v618));
LABEL_952:
            v25[3] = v617;
            v25 += 4;
            --v614;
          }
          while (v614);
          v25 += 4 * v658;
          if (!--v613) {
            goto LABEL_976;
          }
        }
      case 26:
        if (!v20) {
          goto LABEL_978;
        }
        int v620 = v666[0];
        do
        {
          int v621 = v13;
          do
          {
            uint64_t v622 = __rev16(v25[3]);
            if (v10)
            {
              unsigned int v623 = v622;
              if (!v25[3])
              {
                *unint64_t v25 = v27;
                v25[1] = v663;
                unsigned __int16 v624 = v20;
                v25[2] = v19;
                goto LABEL_963;
              }
            }
            else
            {
              unsigned int v623 = 0xFFFF;
            }
            unint64_t v625 = PDAluminosityPDA_14798(v22, v21, (v622 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v623);
            unsigned int v626 = bswap32(v625);
            *unint64_t v25 = HIWORD(v626);
            v25[1] = v626;
            v25[2] = bswap32(HIDWORD(v625)) >> 16;
            unsigned __int16 v624 = __rev16(HIWORD(v625));
LABEL_963:
            v25[3] = v624;
            v25 += 4;
            --v621;
          }
          while (v621);
          v25 += 4 * v658;
          --v620;
        }
        while (v620);
LABEL_976:
        v666[0] = 0;
LABEL_977:
        LOWORD(v23) = v661;
        unint64_t v24 = v637 >> 3;
LABEL_978:
        unint64_t v25 = v645;
        unint64_t v13 = v648;
        if (!v648) {
          return 1;
        }
        uint64_t v665 = 0;
LABEL_980:
        if (shape_enum_clip_next(v13, (int *)&v665 + 1, &v665, v676, v666))
        {
          unint64_t v648 = v13;
          v25 += 4 * v24 * (int)v665 + 4 * SHIDWORD(v665);
          LODWORD(v13) = v676[0];
          continue;
        }
        int v52 = (void *)v13;
LABEL_983:
        free(v52);
        return 1;
      case 27:
        if (!v20) {
          goto LABEL_978;
        }
        int v627 = v666[0];
        break;
      default:
        goto LABEL_978;
    }
    break;
  }
LABEL_968:
  int v628 = v13;
  while (1)
  {
    uint64_t v629 = __rev16(v25[3]);
    if (!v10) {
      break;
    }
    unsigned int v630 = v629;
    if (v25[3]) {
      goto LABEL_973;
    }
    *unint64_t v25 = v27;
    v25[1] = v663;
    unsigned __int16 v631 = v20;
    v25[2] = v19;
LABEL_974:
    v25[3] = v631;
    v25 += 4;
    if (!--v628)
    {
      v25 += 4 * v658;
      if (!--v627) {
        goto LABEL_976;
      }
      goto LABEL_968;
    }
  }
  unsigned int v630 = 0xFFFF;
LABEL_973:
  unint64_t v632 = PDAluminosityPDA_14798((v629 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v630, v22, v21);
  unsigned int v633 = bswap32(v632);
  *unint64_t v25 = HIWORD(v633);
  v25[1] = v633;
  v25[2] = bswap32(HIDWORD(v632)) >> 16;
  unsigned __int16 v631 = __rev16(HIWORD(v632));
  goto LABEL_974;
}

_WORD *RGBA64_image_mark_rgba64(_WORD *result, int *a2, int a3, int a4, int a5, int a6)
{
  int v7 = *((unsigned __int16 *)a2 + 4);
  int v115 = *a2;
  int v8 = (char *)*((void *)result + 4);
  if (*((void *)result + 5)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 0xFFFFLL;
  }
  uint64_t v10 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v114 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 15);
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v111 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v111 * a4;
  int v15 = &v8[(*((_DWORD *)result + 65) - 1) * *((_DWORD *)result + 6)
          + (((*((_DWORD *)result + 2) >> 22) * *((_DWORD *)result + 64)) >> 3)];
  int v124 = result;
  int v121 = *((unsigned __int16 *)a2 + 4);
  char v112 = v13;
  uint64_t v113 = v12;
  if (*((void *)result + 22))
  {
    uint64_t v16 = a3;
    uint64_t v107 = ~(-1 << v13);
    uint64_t v108 = *((void *)a2 + 13);
    uint64_t v109 = *((void *)a2 + 11);
    char v106 = v13 - 4;
    int v17 = v15 - 8;
    uint64_t v18 = v9 << 48;
    uint64_t v19 = v7 ^ 0xFFFFu;
    uint64_t v104 = a5;
    uint64_t v105 = -v12;
    uint64_t v103 = v11 + 16 * v16 + 8;
    while (1)
    {
      if (((v108 - v14) | (v14 - v109)) < 0)
      {
        unsigned int v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v14 & (unint64_t)v107) >> v106) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v105 : v12;
        unsigned int v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *((void *)v124 + 4) + (v14 >> v13) * v12;
      uint64_t v24 = 0x8000;
      int v117 = a6;
      uint64_t v116 = v14;
      if (v115 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        unint64_t v25 = (uint64_t *)v103;
        uint64_t v26 = v104;
        while (1)
        {
          uint64_t v27 = *(v25 - 1);
          uint64_t v28 = *v25;
          uint64_t v29 = v23 + v27;
          if ((unint64_t)v17 >= v23 + v27) {
            unsigned int v30 = (char *)(v23 + v27);
          }
          else {
            unsigned int v30 = v17;
          }
          if (v30 < v8) {
            unsigned int v30 = v8;
          }
          unint64_t v31 = *(void *)v30;
          uint64_t v32 = *v25 & 0xF;
          if ((v28 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            uint64_t v44 = (char *)(v29 + v21);
            if ((unint64_t)v17 < v29 + v21) {
              uint64_t v44 = v17;
            }
            if (v44 < v8) {
              uint64_t v44 = v8;
            }
            unint64_t v45 = BLEND16_21384[v22];
            unint64_t v42 = v31 - ((v45 & v31) >> v22);
            unint64_t v43 = (v45 & *(void *)v44) >> v22;
            goto LABEL_43;
          }
LABEL_44:
          unint64_t v46 = v31 | v18;
          if (v7 != 0xFFFF)
          {
            unint64_t v47 = HIWORD(v46);
            uint16x4_t result = (_WORD *)(v47 * v19 + 0x8000 + ((v47 * v19 + 0x8000) >> 16));
            unint64_t v46 = ((unint64_t)(unsigned __int16)(WORD2(v31)
                                                      - ((WORD2(v31) * v19
                                                        + 0x8000
                                                        + ((WORD2(v31) * v19 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v47 - (result >> 16)) << 48) | ((WORD1(v31) - ((WORD1(v31) * v19 + 0x8000 + ((WORD1(v31) * v19 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v31 - (((unsigned __int16)v31 * v19 + 0x8000 + (((unsigned __int16)v31 * v19 + 0x8000) >> 16)) >> 16));
          }
          v25 += 2;
          unint64_t v48 = HIDWORD(v46);
          unint64_t v49 = HIWORD(v46);
          unsigned int v50 = bswap32(v46);
          *uint64_t v10 = HIWORD(v50);
          v10[1] = v50;
          v10[2] = bswap32(v48) >> 16;
          v10[3] = __rev16(v49);
          v10 += 4;
          if (!--v26) {
            goto LABEL_86;
          }
        }
        uint64_t v33 = v28 >> 4;
        uint64_t v34 = (char *)(v29 + (v28 >> 4));
        if (v17 < v34) {
          uint64_t v34 = v17;
        }
        if (v34 < v8) {
          uint64_t v34 = v8;
        }
        unint64_t v35 = *(void *)v34;
        if (v22)
        {
          unint64_t v36 = (char *)(v29 + v21);
          if (v17 >= v36) {
            int v37 = v36;
          }
          else {
            int v37 = v17;
          }
          if (v37 < v8) {
            int v37 = v8;
          }
          unint64_t v38 = *(void *)v37;
          int v39 = &v36[v33];
          if (v17 < v39) {
            int v39 = v17;
          }
          if (v39 < v8) {
            int v39 = v8;
          }
          unint64_t v40 = BLEND16_21384[v22];
          unint64_t v31 = v31 - ((v40 & v31) >> v22) + ((v40 & v38) >> v22);
          unint64_t v35 = v35 - ((v40 & v35) >> v22) + ((v40 & *(void *)v39) >> v22);
        }
        uint64_t v41 = BLEND16_21384[v32];
        unint64_t v42 = v31 - ((v41 & v31) >> v32);
        unint64_t v43 = (v41 & v35) >> v32;
LABEL_43:
        unint64_t v31 = v42 + v43;
        goto LABEL_44;
      }
LABEL_86:
      uint64_t v12 = v113;
      v10 += 4 * v114;
      LOBYTE(v13) = v112;
      uint64_t v14 = v116 + v111;
      a6 = v117 - 1;
      if (v117 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_86;
    }
    uint64_t v122 = v22;
    long long v51 = (uint64_t *)v103;
    uint64_t v52 = v104;
    uint64_t v119 = *((void *)v124 + 4) + (v14 >> v13) * v12;
    unsigned int v118 = v22;
    while (1)
    {
      uint64_t v53 = *(v51 - 1);
      uint64_t v54 = *v51;
      uint64_t v55 = v23 + v53;
      if ((unint64_t)v17 >= v23 + v53) {
        uint64_t v56 = (char *)(v23 + v53);
      }
      else {
        uint64_t v56 = v17;
      }
      if (v56 < v8) {
        uint64_t v56 = v8;
      }
      unint64_t v57 = *(void *)v56;
      uint64_t v58 = *v51 & 0xF;
      if ((v54 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        unsigned int v70 = (char *)(v55 + v21);
        if ((unint64_t)v17 < v55 + v21) {
          unsigned int v70 = v17;
        }
        if (v70 < v8) {
          unsigned int v70 = v8;
        }
        unint64_t v71 = BLEND16_21384[v122];
        unint64_t v68 = v57 - ((v71 & v57) >> v122);
        unint64_t v69 = (v71 & *(void *)v70) >> v122;
        goto LABEL_78;
      }
LABEL_79:
      unint64_t v72 = v57 | v18;
      if (v7 != 0xFFFF) {
        unint64_t v72 = ((unint64_t)(unsigned __int16)(WORD2(v57)
      }
                                                  - ((v24
                                                    + WORD2(v57) * v19
                                                    + ((v24 + WORD2(v57) * v19) >> 16)) >> 16)) << 32) | ((HIWORD(v72) - ((v24 + HIWORD(v72) * v19 + ((v24 + HIWORD(v72) * v19) >> 16)) >> 16)) << 48) | ((WORD1(v57) - ((v24 + WORD1(v57) * v19 + ((v24 + WORD1(v57) * v19) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v57 - ((v24 + (unsigned __int16)v57 * v19 + ((v24 + (unsigned __int16)v57 * v19) >> 16)) >> 16));
      unint64_t v73 = HIWORD(v72);
      if (HIWORD(v72))
      {
        if (v73 == 0xFFFF)
        {
          unsigned int v74 = bswap32(v72);
          *uint64_t v10 = HIWORD(v74);
          v10[1] = v74;
          v10[2] = bswap32(HIDWORD(v72)) >> 16;
          v10[3] = -1;
        }
        else
        {
          uint64_t v75 = v18;
          uint64_t v76 = v24;
          uint64_t v77 = v19;
          uint16x4_t result = RGBA64_DplusDM(v10, v72, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v73 ^ 0xFFFF);
          uint64_t v19 = v77;
          uint64_t v24 = v76;
          uint64_t v18 = v75;
          unsigned int v22 = v118;
          uint64_t v23 = v119;
          int v7 = v121;
        }
      }
      v51 += 2;
      v10 += 4;
      if (!--v52) {
        goto LABEL_86;
      }
    }
    uint64_t v59 = v54 >> 4;
    uint64_t v60 = (char *)(v55 + (v54 >> 4));
    if (v17 < v60) {
      uint64_t v60 = v17;
    }
    if (v60 < v8) {
      uint64_t v60 = v8;
    }
    unint64_t v61 = *(void *)v60;
    if (v22)
    {
      uint64_t v62 = (char *)(v55 + v21);
      if (v17 >= v62) {
        int v63 = v62;
      }
      else {
        int v63 = v17;
      }
      if (v63 < v8) {
        int v63 = v8;
      }
      unint64_t v64 = *(void *)v63;
      uint64_t v65 = &v62[v59];
      if (v17 < v65) {
        uint64_t v65 = v17;
      }
      if (v65 < v8) {
        uint64_t v65 = v8;
      }
      unint64_t v66 = BLEND16_21384[v122];
      unint64_t v57 = v57 - ((v66 & v57) >> v122) + ((v66 & v64) >> v122);
      unint64_t v61 = v61 - ((v66 & v61) >> v122) + ((v66 & *(void *)v65) >> v122);
    }
    uint64_t v67 = BLEND16_21384[v58];
    unint64_t v68 = v57 - ((v67 & v57) >> v58);
    unint64_t v69 = (v67 & v61) >> v58;
LABEL_78:
    unint64_t v57 = v68 + v69;
    goto LABEL_79;
  }
  uint64_t v123 = (uint64_t *)(v11 + 16 * a3);
  int v78 = v15 - 8;
  uint64_t v79 = v9 << 48;
  int v80 = v7 ^ 0xFFFF;
  uint64_t v120 = a5;
  do
  {
    uint64_t v82 = (char *)*((void *)v124 + 4);
    unint64_t v83 = &v82[(v14 >> v13) * v12];
    uint64_t v84 = v14;
    if (v115 == 1)
    {
      if (a5 >= 1)
      {
        int v85 = v123;
        uint64_t v86 = v120;
        do
        {
          uint64_t v87 = *v85;
          v85 += 2;
          uint64_t v88 = &v83[v87];
          if (v78 < &v83[v87]) {
            uint64_t v88 = v78;
          }
          if (v88 < v82) {
            uint64_t v88 = v82;
          }
          uint64_t v89 = *(void *)v88;
          unint64_t v90 = v89 | v79;
          if (v7 != 0xFFFF)
          {
            unint64_t v91 = HIWORD(v90);
            uint16x4_t result = (_WORD *)(WORD1(v89) * v80 + 0x8000 + ((WORD1(v89) * v80 + 0x8000) >> 16));
            unint64_t v90 = ((unint64_t)(unsigned __int16)(WORD2(v89)
                                                      - ((WORD2(v89) * v80
                                                        + 0x8000
                                                        + ((WORD2(v89) * v80 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v91 - ((v91 * v80 + 0x8000 + ((v91 * v80 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v89) - (result >> 16)) << 16) | (unint64_t)(unsigned __int16)(v89 - (((unsigned __int16)v89 * v80 + 0x8000 + (((unsigned __int16)v89 * v80 + 0x8000) >> 16)) >> 16));
          }
          unint64_t v92 = HIDWORD(v90);
          unint64_t v93 = HIWORD(v90);
          unsigned int v94 = bswap32(v90);
          *uint64_t v10 = HIWORD(v94);
          v10[1] = v94;
          v10[2] = bswap32(v92) >> 16;
          v10[3] = __rev16(v93);
          v10 += 4;
          --v86;
        }
        while (v86);
      }
    }
    else
    {
      unsigned __int16 v95 = v123;
      uint64_t v96 = v120;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v97 = *v95;
          v95 += 2;
          unint64_t v98 = &v83[v97];
          if (v78 < &v83[v97]) {
            unint64_t v98 = v78;
          }
          if ((unint64_t)v98 < *((void *)v124 + 4)) {
            unint64_t v98 = (char *)*((void *)v124 + 4);
          }
          uint64_t v99 = *(void *)v98;
          unint64_t v100 = v99 | v79;
          if (v7 != 0xFFFF) {
            unint64_t v100 = ((unint64_t)(unsigned __int16)(WORD2(v99)
          }
                                                       - ((WORD2(v99) * v80
                                                         + 0x8000
                                                         + ((WORD2(v99) * v80 + 0x8000) >> 16)) >> 16)) << 32) | ((HIWORD(v100) - ((HIWORD(v100) * v80 + 0x8000 + ((HIWORD(v100) * v80 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v99) - ((WORD1(v99) * v80 + 0x8000 + ((WORD1(v99) * v80 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v99 - (((unsigned __int16)v99 * v80 + 0x8000 + (((unsigned __int16)v99 * v80 + 0x8000) >> 16)) >> 16));
          unint64_t v101 = HIWORD(v100);
          if (HIWORD(v100))
          {
            if (v101 == 0xFFFF)
            {
              unsigned int v102 = bswap32(v100);
              *uint64_t v10 = HIWORD(v102);
              v10[1] = v102;
              v10[2] = bswap32(HIDWORD(v100)) >> 16;
              v10[3] = -1;
            }
            else
            {
              uint16x4_t result = RGBA64_DplusDM(v10, v100, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v101 ^ 0xFFFF);
              int v7 = v121;
            }
          }
          v10 += 4;
          --v96;
        }
        while (v96);
      }
    }
    uint64_t v12 = v113;
    v10 += 4 * v114;
    LOBYTE(v13) = v112;
    uint64_t v14 = v84 + v111;
    --a6;
  }
  while (a6);
  return result;
}

_WORD *RGBA64_image_mark_RGBA64(_WORD *result, int *a2, int a3, int a4, int a5, int a6)
{
  int v7 = *((unsigned __int16 *)a2 + 4);
  int v134 = *a2;
  int v8 = (unsigned __int16 *)*((void *)result + 4);
  if (*((void *)result + 5)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 0xFFFFLL;
  }
  uint64_t v10 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v133 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 15);
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v130 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v130 * a4;
  int v15 = (char *)v8
      + (*((_DWORD *)result + 65) - 1) * *((_DWORD *)result + 6)
      + (((*((_DWORD *)result + 2) >> 22) * *((_DWORD *)result + 64)) >> 3);
  uint32x4_t v142 = result;
  int v140 = *((unsigned __int16 *)a2 + 4);
  char v131 = v13;
  uint64_t v132 = v12;
  if (*((void *)result + 22))
  {
    uint64_t v16 = a3;
    uint64_t v126 = ~(-1 << v13);
    uint64_t v127 = *((void *)a2 + 13);
    uint64_t v128 = *((void *)a2 + 11);
    char v125 = v13 - 4;
    int v17 = (unsigned __int16 *)(v15 - 8);
    uint64_t v18 = v9 << 48;
    uint64_t v19 = v7 ^ 0xFFFFu;
    uint64_t v123 = a5;
    uint64_t v124 = -v12;
    uint64_t v122 = v11 + 16 * v16 + 8;
    int v137 = (unsigned __int16 *)*((void *)result + 4);
    unsigned int v138 = (unsigned __int16 *)(v15 - 8);
    while (1)
    {
      if (((v127 - v14) | (v14 - v128)) < 0)
      {
        uint64_t v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v14 & (unint64_t)v126) >> v125) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v124 : v12;
        uint64_t v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *((void *)v142 + 4) + (v14 >> v13) * v12;
      uint64_t v24 = 0x8000;
      int v136 = a6;
      uint64_t v135 = v14;
      if (v134 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        unint64_t v25 = (uint64_t *)v122;
        uint64_t v26 = v123;
        while (1)
        {
          uint64_t v27 = *(v25 - 1);
          uint64_t v28 = *v25;
          uint64_t v29 = v23 + v27;
          if ((unint64_t)v17 >= v23 + v27) {
            unsigned int v30 = (unsigned __int16 *)(v23 + v27);
          }
          else {
            unsigned int v30 = v17;
          }
          if (v30 < v8) {
            unsigned int v30 = v8;
          }
          unint64_t v31 = ((unint64_t)(bswap32(v30[3]) >> 16) << 48) | ((unint64_t)(bswap32(v30[2]) >> 16) << 32) | bswap32(v30[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v30) >> 16);
          uint64_t v32 = *v25 & 0xF;
          if ((v28 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            uint64_t v44 = (unsigned __int16 *)(v29 + v21);
            if ((unint64_t)v17 < v29 + v21) {
              uint64_t v44 = v17;
            }
            if (v44 < v8) {
              uint64_t v44 = v8;
            }
            uint64_t v45 = BLEND16_21384[v22];
            unint64_t v42 = v31 - ((v45 & v31) >> v22);
            unint64_t v43 = ((((unint64_t)(bswap32(v44[3]) >> 16) << 48) | ((unint64_t)(bswap32(v44[2]) >> 16) << 32) | bswap32(v44[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v44) >> 16)) & v45) >> v22;
            goto LABEL_43;
          }
LABEL_44:
          unint64_t v46 = v31 | v18;
          if (v7 != 0xFFFF)
          {
            unint64_t v47 = HIWORD(v46);
            uint16x4_t result = (_WORD *)(v47 * v19 + 0x8000 + ((v47 * v19 + 0x8000) >> 16));
            unint64_t v46 = ((unint64_t)(unsigned __int16)(WORD2(v31)
                                                      - ((WORD2(v31) * v19
                                                        + 0x8000
                                                        + ((WORD2(v31) * v19 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v47 - (result >> 16)) << 48) | ((WORD1(v31) - ((WORD1(v31) * v19 + 0x8000 + ((WORD1(v31) * v19 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v31 - (((unsigned __int16)v31 * v19 + 0x8000 + (((unsigned __int16)v31 * v19 + 0x8000) >> 16)) >> 16));
          }
          v25 += 2;
          unint64_t v48 = HIDWORD(v46);
          unint64_t v49 = HIWORD(v46);
          unsigned int v50 = bswap32(v46);
          *uint64_t v10 = HIWORD(v50);
          v10[1] = v50;
          v10[2] = bswap32(v48) >> 16;
          v10[3] = __rev16(v49);
          v10 += 4;
          if (!--v26) {
            goto LABEL_86;
          }
        }
        uint64_t v33 = v28 >> 4;
        uint64_t v34 = (unsigned __int16 *)(v29 + (v28 >> 4));
        if (v17 < v34) {
          uint64_t v34 = v17;
        }
        if (v34 < v8) {
          uint64_t v34 = v8;
        }
        uint16x4_t result = (_WORD *)bswap32(v34[1]);
        unint64_t v35 = ((unint64_t)(bswap32(v34[3]) >> 16) << 48) | ((unint64_t)(bswap32(v34[2]) >> 16) << 32) | result & 0xFFFF0000 | (unint64_t)(bswap32(*v34) >> 16);
        if (v22)
        {
          unint64_t v36 = (unsigned __int16 *)(v29 + v21);
          if (v17 >= v36) {
            int v37 = v36;
          }
          else {
            int v37 = v17;
          }
          if (v37 < v8) {
            int v37 = v8;
          }
          unint64_t v38 = ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
          int v39 = (unsigned __int16 *)((char *)v36 + v33);
          if (v17 < v39) {
            int v39 = v17;
          }
          if (v39 < v8) {
            int v39 = v8;
          }
          uint16x4_t result = (_WORD *)bswap32(v39[1]);
          uint64_t v40 = BLEND16_21384[v22];
          unint64_t v31 = v31 - ((v40 & v31) >> v22) + ((v38 & v40) >> v22);
          unint64_t v35 = v35
              - ((v40 & v35) >> v22)
              + (((((unint64_t)(bswap32(v39[3]) >> 16) << 48) | ((unint64_t)(bswap32(v39[2]) >> 16) << 32) | result & 0xFFFF0000 | (unint64_t)(bswap32(*v39) >> 16)) & v40) >> v22);
        }
        uint64_t v41 = BLEND16_21384[v32];
        unint64_t v42 = v31 - ((v41 & v31) >> v32);
        unint64_t v43 = (v41 & v35) >> v32;
LABEL_43:
        unint64_t v31 = v42 + v43;
        goto LABEL_44;
      }
LABEL_86:
      uint64_t v12 = v132;
      v10 += 4 * v133;
      LOBYTE(v13) = v131;
      uint64_t v14 = v135 + v130;
      a6 = v136 - 1;
      if (v136 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_86;
    }
    uint64_t v141 = v22;
    uint64_t v52 = (uint64_t *)v122;
    uint64_t v51 = v123;
    while (1)
    {
      uint64_t v53 = *(v52 - 1);
      uint64_t v54 = *v52;
      uint64_t v55 = v23 + v53;
      if ((unint64_t)v17 >= v23 + v53) {
        uint64_t v56 = (unsigned __int16 *)(v23 + v53);
      }
      else {
        uint64_t v56 = v17;
      }
      if (v56 < v8) {
        uint64_t v56 = v8;
      }
      unint64_t v57 = ((unint64_t)(bswap32(v56[3]) >> 16) << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
      uint64_t v58 = *v52 & 0xF;
      if ((v54 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        unsigned int v70 = (unsigned __int16 *)(v55 + v21);
        if ((unint64_t)v17 < v55 + v21) {
          unsigned int v70 = v17;
        }
        if (v70 < v8) {
          unsigned int v70 = v8;
        }
        uint64_t v71 = BLEND16_21384[v141];
        unint64_t v68 = v57 - ((v71 & v57) >> v141);
        unint64_t v69 = ((((unint64_t)(bswap32(v70[3]) >> 16) << 48) | ((unint64_t)(bswap32(v70[2]) >> 16) << 32) | bswap32(v70[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v70) >> 16)) & v71) >> v141;
        goto LABEL_78;
      }
LABEL_79:
      unint64_t v72 = v57 | v18;
      if (v7 != 0xFFFF) {
        unint64_t v72 = ((unint64_t)(unsigned __int16)(WORD2(v57)
      }
                                                  - ((v24
                                                    + WORD2(v57) * v19
                                                    + ((v24 + WORD2(v57) * v19) >> 16)) >> 16)) << 32) | ((HIWORD(v72) - ((v24 + HIWORD(v72) * v19 + ((v24 + HIWORD(v72) * v19) >> 16)) >> 16)) << 48) | ((WORD1(v57) - ((v24 + WORD1(v57) * v19 + ((v24 + WORD1(v57) * v19) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v57 - ((v24 + (unsigned __int16)v57 * v19 + ((v24 + (unsigned __int16)v57 * v19) >> 16)) >> 16));
      unint64_t v73 = HIWORD(v72);
      if (HIWORD(v72))
      {
        if (v73 == 0xFFFF)
        {
          unsigned int v74 = bswap32(v72);
          *uint64_t v10 = HIWORD(v74);
          v10[1] = v74;
          v10[2] = bswap32(HIDWORD(v72)) >> 16;
          v10[3] = -1;
        }
        else
        {
          uint64_t v75 = v23;
          uint64_t v76 = v18;
          uint64_t v77 = v24;
          uint64_t v78 = v22;
          uint64_t v79 = v19;
          uint16x4_t result = RGBA64_DplusDM(v10, v72, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v73 ^ 0xFFFF);
          uint64_t v19 = v79;
          uint64_t v22 = v78;
          uint64_t v24 = v77;
          uint64_t v18 = v76;
          uint64_t v23 = v75;
          int v8 = v137;
          int v17 = v138;
          int v7 = v140;
        }
      }
      v52 += 2;
      v10 += 4;
      if (!--v51) {
        goto LABEL_86;
      }
    }
    uint64_t v59 = v54 >> 4;
    uint64_t v60 = (unsigned __int16 *)(v55 + (v54 >> 4));
    if (v17 < v60) {
      uint64_t v60 = v17;
    }
    if (v60 < v8) {
      uint64_t v60 = v8;
    }
    unint64_t v61 = ((unint64_t)(bswap32(v60[3]) >> 16) << 48) | ((unint64_t)(bswap32(v60[2]) >> 16) << 32) | bswap32(v60[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v60) >> 16);
    if (v22)
    {
      uint64_t v62 = (unsigned __int16 *)(v55 + v21);
      if (v17 >= v62) {
        int v63 = v62;
      }
      else {
        int v63 = v17;
      }
      if (v63 < v8) {
        int v63 = v8;
      }
      unint64_t v64 = ((unint64_t)(bswap32(v63[3]) >> 16) << 48) | ((unint64_t)(bswap32(v63[2]) >> 16) << 32) | bswap32(v63[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v63) >> 16);
      uint64_t v65 = (unsigned __int16 *)((char *)v62 + v59);
      if (v17 < v65) {
        uint64_t v65 = v17;
      }
      if (v65 < v8) {
        uint64_t v65 = v8;
      }
      uint64_t v66 = BLEND16_21384[v141];
      unint64_t v57 = v57 - ((v66 & v57) >> v141) + ((v64 & v66) >> v141);
      unint64_t v61 = v61
          - ((v66 & v61) >> v141)
          + (((((unint64_t)(bswap32(v65[3]) >> 16) << 48) | ((unint64_t)(bswap32(v65[2]) >> 16) << 32) | bswap32(v65[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v65) >> 16)) & v66) >> v141);
    }
    uint64_t v67 = BLEND16_21384[v58];
    unint64_t v68 = v57 - ((v67 & v57) >> v58);
    unint64_t v69 = (v67 & v61) >> v58;
LABEL_78:
    unint64_t v57 = v68 + v69;
    goto LABEL_79;
  }
  unsigned int v139 = (uint64_t *)(v11 + 16 * a3);
  int v80 = (unsigned __int16 *)(v15 - 8);
  uint64_t v81 = v9 << 48;
  int v82 = v7 ^ 0xFFFF;
  int32x2_t v83 = vdup_n_s32(v7 ^ 0xFFFFu);
  uint64x2_t v84 = (uint64x2_t)xmmword_1850CDE00;
  uint64_t v85 = a5;
  do
  {
    uint64_t v86 = v14;
    uint64_t v87 = (unsigned __int16 *)*((void *)v142 + 4);
    uint64_t v88 = (char *)v87 + (v14 >> v13) * v12;
    if (v134 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v89 = v139;
        uint64_t v90 = v85;
        do
        {
          uint64_t v91 = *v89;
          v89 += 2;
          unint64_t v92 = (unsigned __int16 *)&v88[v91];
          if (v80 < (unsigned __int16 *)&v88[v91]) {
            unint64_t v92 = v80;
          }
          if (v92 >= v87) {
            unint64_t v93 = v92;
          }
          else {
            unint64_t v93 = v87;
          }
          uint64_t v94 = bswap32(v93[3]) >> 16;
          uint64_t v95 = bswap32(*v93) >> 16;
          unsigned int v96 = bswap32(v93[1]) >> 16;
          uint64_t v97 = bswap32(v93[2]) >> 16;
          unint64_t v98 = (v96 << 16) | (unint64_t)(v94 << 48) | (v97 << 32) | v81 | v95;
          if (v7 != 0xFFFF)
          {
            v99.i32[0] = HIWORD(v98);
            v99.i32[1] = v97;
            uint32x2_t v100 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v99, v83);
            int8x8_t v101 = vand_s8((int8x8_t)vsub_s32(v99, (int32x2_t)vshr_n_u32(vsra_n_u32(v100, v100, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v102.i64[0] = v101.u32[0];
            v102.i64[1] = v101.u32[1];
            int8x16_t v103 = (int8x16_t)vshlq_u64(v102, v84);
            unint64_t v98 = vorrq_s8(v103, (int8x16_t)vdupq_laneq_s64((int64x2_t)v103, 1)).u64[0] | ((v96
                                                                                          - ((v96 * v82
                                                                                            + 0x8000
                                                                                            + ((v96 * v82 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v95 - ((v95 * v82 + 0x8000 + ((v95 * v82 + 0x8000) >> 16)) >> 16));
          }
          unsigned int v104 = bswap32(v98);
          *uint64_t v10 = HIWORD(v104);
          v10[1] = v104;
          v10[2] = bswap32(HIDWORD(v98)) >> 16;
          v10[3] = __rev16(HIWORD(v98));
          v10 += 4;
          --v90;
        }
        while (v90);
      }
    }
    else
    {
      uint64_t v105 = v139;
      uint64_t v106 = v85;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v107 = *v105;
          v105 += 2;
          uint64_t v108 = (unsigned __int16 *)&v88[v107];
          uint64_t v109 = (unsigned __int16 *)*((void *)v142 + 4);
          if (v80 < (unsigned __int16 *)&v88[v107]) {
            uint64_t v108 = v80;
          }
          if (v108 >= v109) {
            uint64_t v109 = v108;
          }
          uint64_t v110 = bswap32(v109[3]) >> 16;
          uint64_t v111 = bswap32(*v109) >> 16;
          unsigned int v112 = bswap32(v109[1]) >> 16;
          uint64_t v113 = bswap32(v109[2]) >> 16;
          unint64_t v114 = (v112 << 16) | (unint64_t)(v110 << 48) | (v113 << 32) | v81 | v111;
          if (v7 != 0xFFFF)
          {
            v115.i32[0] = HIWORD(v114);
            v115.i32[1] = v113;
            uint32x2_t v116 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v115, v83);
            int8x8_t v117 = vand_s8((int8x8_t)vsub_s32(v115, (int32x2_t)vshr_n_u32(vsra_n_u32(v116, v116, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v118.i64[0] = v117.u32[0];
            v118.i64[1] = v117.u32[1];
            int8x16_t v119 = (int8x16_t)vshlq_u64(v118, v84);
            unint64_t v114 = vorrq_s8(v119, (int8x16_t)vdupq_laneq_s64((int64x2_t)v119, 1)).u64[0] | ((v112
                                                                                           - ((v112 * v82
                                                                                             + 0x8000
                                                                                             + ((v112 * v82 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v111 - ((v111 * v82 + 0x8000 + ((v111 * v82 + 0x8000) >> 16)) >> 16));
          }
          unint64_t v120 = HIWORD(v114);
          if (HIWORD(v114))
          {
            if (v120 == 0xFFFF)
            {
              unsigned int v121 = bswap32(v114);
              *uint64_t v10 = HIWORD(v121);
              v10[1] = v121;
              v10[2] = bswap32(HIDWORD(v114)) >> 16;
              v10[3] = -1;
            }
            else
            {
              uint16x4_t result = RGBA64_DplusDM(v10, v114, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v120 ^ 0xFFFF);
              uint64x2_t v84 = (uint64x2_t)xmmword_1850CDE00;
              int v7 = v140;
            }
          }
          v10 += 4;
          --v106;
        }
        while (v106);
      }
    }
    uint64_t v12 = v132;
    v10 += 4 * v133;
    LOBYTE(v13) = v131;
    uint64_t v14 = v86 + v130;
    --a6;
  }
  while (a6);
  return result;
}

unint64_t RGBA64_image_mark_rgb48(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v117 = *a2;
  int v7 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v116 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v113 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v113 * a4;
  uint64_t v12 = *(unsigned __int16 **)(result + 32);
  uint64_t v13 = (char *)v12
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  unint64_t v126 = result;
  uint64_t v14 = 0x8000;
  int v124 = v6;
  char v114 = v10;
  uint64_t v115 = v9;
  if (*(void *)(result + 176))
  {
    uint64_t v111 = *((void *)a2 + 11);
    uint64_t v110 = *((void *)a2 + 13);
    uint64_t v109 = ~(-1 << v10);
    char v108 = v10 - 4;
    int v15 = (unsigned __int16 *)(v13 - 6);
    uint64_t v16 = v6 ^ 0xFFFFu;
    uint16x4_t result = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v106 = a5;
    uint64_t v107 = -v9;
    uint64_t v105 = v8 + 16 * a3 + 8;
    int v17 = BLEND16_21384;
    uint64_t v122 = v12;
    unsigned int v121 = (unsigned __int16 *)(v13 - 6);
    while (1)
    {
      if (((v110 - v11) | (v11 - v111)) < 0)
      {
        unsigned int v20 = 0;
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v18 = ((v11 & (unint64_t)v109) >> v108) & 0xF;
        uint64_t v19 = (unint64_t)(v18 - 7) >= 9 ? v107 : v9;
        unsigned int v20 = weights_21383[v18] & 0xF;
      }
      uint64_t v21 = *(void *)(v126 + 32) + (v11 >> v10) * v9;
      int v119 = a6;
      uint64_t v118 = v11;
      if (v117 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v22 = (uint64_t *)v105;
        uint64_t v23 = v106;
        while (1)
        {
          uint64_t v24 = *(v22 - 1);
          uint64_t v25 = *v22;
          uint64_t v26 = v21 + v24;
          if ((unint64_t)v15 >= v21 + v24) {
            uint64_t v27 = (unsigned __int16 *)(v21 + v24);
          }
          else {
            uint64_t v27 = v15;
          }
          if (v27 < v12) {
            uint64_t v27 = v12;
          }
          unint64_t v28 = *v27 | ((unint64_t)*(unsigned int *)(v27 + 1) << 16);
          uint64_t v29 = *v22 & 0xF;
          if ((v25 & 0xF) != 0) {
            break;
          }
          if (v20)
          {
            uint64_t v41 = (unsigned __int16 *)(v26 + v19);
            if ((unint64_t)v15 < v26 + v19) {
              uint64_t v41 = v15;
            }
            if (v41 < v12) {
              uint64_t v41 = v12;
            }
            uint64_t v42 = v17[v20];
            unint64_t v39 = v28 - ((v42 & v28) >> v20);
            unint64_t v40 = ((*v41 | ((unint64_t)*(unsigned int *)(v41 + 1) << 16)) & v42) >> v20;
            goto LABEL_40;
          }
LABEL_41:
          if (v6 == 0xFFFF) {
            unint64_t v43 = v28 | 0xFFFF000000000000;
          }
          else {
            unint64_t v43 = ((WORD1(v28)
          }
                  - ((v14 + WORD1(v28) * v16 + ((v14 + WORD1(v28) * v16) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v28) - ((v14 + WORD2(v28) * v16 + ((v14 + WORD2(v28) * v16) >> 16)) >> 16)) << 32) | (unsigned __int16)(v28 - ((v14 + (unsigned __int16)v28 * v16 + ((v14 + (unsigned __int16)v28 * v16) >> 16)) >> 16)) | result;
          v22 += 2;
          unint64_t v44 = HIDWORD(v43);
          unint64_t v45 = HIWORD(v43);
          unsigned int v46 = bswap32(v43);
          *int v7 = HIWORD(v46);
          v7[1] = v46;
          double v7[2] = bswap32(v44) >> 16;
          v7[3] = __rev16(v45);
          v7 += 4;
          if (!--v23) {
            goto LABEL_85;
          }
        }
        uint64_t v30 = v25 >> 4;
        unint64_t v31 = (unsigned __int16 *)(v26 + (v25 >> 4));
        if (v15 < v31) {
          unint64_t v31 = v15;
        }
        if (v31 < v12) {
          unint64_t v31 = v12;
        }
        unint64_t v32 = *v31 | ((unint64_t)*(unsigned int *)(v31 + 1) << 16);
        if (v20)
        {
          uint64_t v33 = (unsigned __int16 *)(v26 + v19);
          if (v15 >= v33) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = v15;
          }
          if (v34 < v12) {
            uint64_t v34 = v12;
          }
          unint64_t v35 = *v34 | ((unint64_t)*(unsigned int *)(v34 + 1) << 16);
          unint64_t v36 = (unsigned __int16 *)((char *)v33 + v30);
          if (v15 < v36) {
            unint64_t v36 = v15;
          }
          if (v36 < v12) {
            unint64_t v36 = v12;
          }
          uint64_t v37 = v17[v20];
          unint64_t v28 = v28 - ((v37 & v28) >> v20) + ((v35 & v37) >> v20);
          unint64_t v32 = v32
              - ((v37 & v32) >> v20)
              + (((*v36 | ((unint64_t)*(unsigned int *)(v36 + 1) << 16)) & v37) >> v20);
        }
        uint64_t v38 = v17[v29];
        unint64_t v39 = v28 - ((v38 & v28) >> v29);
        unint64_t v40 = (v38 & v32) >> v29;
LABEL_40:
        unint64_t v28 = v39 + v40;
        goto LABEL_41;
      }
LABEL_85:
      uint64_t v9 = v115;
      v7 += 4 * v116;
      LOBYTE(v10) = v114;
      uint64_t v11 = v118 + v113;
      a6 = v119 - 1;
      if (v119 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_85;
    }
    unint64_t v47 = (uint64_t *)v105;
    uint64_t v48 = v106;
    while (1)
    {
      uint64_t v49 = *(v47 - 1);
      uint64_t v50 = *v47;
      uint64_t v51 = v21 + v49;
      if ((unint64_t)v15 >= v21 + v49) {
        uint64_t v52 = (unsigned __int16 *)(v21 + v49);
      }
      else {
        uint64_t v52 = v15;
      }
      if (v52 < v12) {
        uint64_t v52 = v12;
      }
      unint64_t v53 = *v52 | ((unint64_t)*(unsigned int *)(v52 + 1) << 16);
      uint64_t v54 = *v47 & 0xF;
      if ((v50 & 0xF) != 0) {
        break;
      }
      if (v20)
      {
        uint64_t v66 = (unsigned __int16 *)(v51 + v19);
        if ((unint64_t)v15 < v51 + v19) {
          uint64_t v66 = v15;
        }
        if (v66 < v12) {
          uint64_t v66 = v12;
        }
        uint64_t v67 = v17[v20];
        unint64_t v64 = v53 - ((v67 & v53) >> v20);
        unint64_t v65 = ((*v66 | ((unint64_t)*(unsigned int *)(v66 + 1) << 16)) & v67) >> v20;
        goto LABEL_76;
      }
LABEL_77:
      if (v6 == 0xFFFF) {
        unint64_t v68 = v53 | 0xFFFF000000000000;
      }
      else {
        unint64_t v68 = ((WORD1(v53)
      }
              - ((v14 + WORD1(v53) * v16 + ((v14 + WORD1(v53) * v16) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v53) - ((v14 + WORD2(v53) * v16 + ((v14 + WORD2(v53) * v16) >> 16)) >> 16)) << 32) | (unsigned __int16)(v53 - ((v14 + (unsigned __int16)v53 * v16 + ((v14 + (unsigned __int16)v53 * v16) >> 16)) >> 16)) | result;
      unint64_t v69 = HIWORD(v68);
      if (HIWORD(v68))
      {
        if (v69 == 0xFFFF)
        {
          unsigned int v70 = bswap32(v68);
          *int v7 = HIWORD(v70);
          v7[1] = v70;
          double v7[2] = bswap32(HIDWORD(v68)) >> 16;
          v7[3] = -1;
        }
        else
        {
          uint64_t v71 = v17;
          unint64_t v72 = result;
          uint64_t v73 = v19;
          uint64_t v74 = v14;
          uint64_t v75 = v16;
          RGBA64_DplusDM(v7, v68, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v69 ^ 0xFFFF);
          uint64_t v16 = v75;
          uint64_t v14 = v74;
          uint64_t v19 = v73;
          int v17 = v71;
          int v15 = v121;
          uint16x4_t result = v72;
          uint64_t v12 = v122;
          int v6 = v124;
        }
      }
      v47 += 2;
      v7 += 4;
      if (!--v48) {
        goto LABEL_85;
      }
    }
    uint64_t v55 = v50 >> 4;
    uint64_t v56 = (unsigned __int16 *)(v51 + (v50 >> 4));
    if (v15 < v56) {
      uint64_t v56 = v15;
    }
    if (v56 < v12) {
      uint64_t v56 = v12;
    }
    unint64_t v57 = *v56 | ((unint64_t)*(unsigned int *)(v56 + 1) << 16);
    if (v20)
    {
      uint64_t v58 = (unsigned __int16 *)(v51 + v19);
      if (v15 >= v58) {
        uint64_t v59 = v58;
      }
      else {
        uint64_t v59 = v15;
      }
      if (v59 < v12) {
        uint64_t v59 = v12;
      }
      unint64_t v60 = *v59 | ((unint64_t)*(unsigned int *)(v59 + 1) << 16);
      unint64_t v61 = (unsigned __int16 *)((char *)v58 + v55);
      if (v15 < v61) {
        unint64_t v61 = v15;
      }
      if (v61 < v12) {
        unint64_t v61 = v12;
      }
      uint64_t v62 = v17[v20];
      unint64_t v53 = v53 - ((v62 & v53) >> v20) + ((v60 & v62) >> v20);
      unint64_t v57 = v57 - ((v62 & v57) >> v20) + (((*v61 | ((unint64_t)*(unsigned int *)(v61 + 1) << 16)) & v62) >> v20);
    }
    uint64_t v63 = v17[v54];
    unint64_t v64 = v53 - ((v63 & v53) >> v54);
    unint64_t v65 = (v63 & v57) >> v54;
LABEL_76:
    unint64_t v53 = v64 + v65;
    goto LABEL_77;
  }
  char v125 = (uint64_t *)(v8 + 16 * a3);
  uint64_t v76 = v13 - 6;
  int v77 = v6 ^ 0xFFFF;
  unint64_t v78 = (unint64_t)(~(0xFFFF * v77 + 0x8000 + ((0xFFFF * v77 + 0x8000) >> 16)) >> 16) << 48;
  uint64_t v123 = a5;
  do
  {
    uint64_t v79 = *(char **)(v126 + 32);
    int v80 = &v79[(v11 >> v10) * v9];
    int v120 = a6;
    if (v117 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v81 = v125;
        uint64_t v82 = v123;
        do
        {
          uint64_t v83 = *v81;
          v81 += 2;
          uint64x2_t v84 = &v80[v83];
          if (v76 < &v80[v83]) {
            uint64x2_t v84 = v76;
          }
          if (v84 < v79) {
            uint64x2_t v84 = v79;
          }
          uint64_t v85 = *(unsigned __int16 *)v84;
          uint64_t v86 = *((unsigned __int16 *)v84 + 1);
          uint64_t v87 = *((unsigned __int16 *)v84 + 2);
          unint64_t v88 = v85 | (v86 << 16) | (v87 << 32) | 0xFFFF000000000000;
          unint64_t v89 = ((v86 - ((v86 * v77 + 0x8000 + ((v86 * v77 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v87 - ((v87 * v77 + 0x8000 + ((v87 * v77 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v85 - ((v85 * v77 + 0x8000 + ((v85 * v77 + 0x8000) >> 16)) >> 16)) | v78;
          if (v6 == 0xFFFF) {
            unint64_t v89 = v88;
          }
          unint64_t v90 = HIDWORD(v89);
          unint64_t v91 = HIWORD(v89);
          unsigned int v92 = bswap32(v89);
          *int v7 = HIWORD(v92);
          v7[1] = v92;
          double v7[2] = bswap32(v90) >> 16;
          v7[3] = __rev16(v91);
          v7 += 4;
          --v82;
        }
        while (v82);
      }
    }
    else
    {
      unint64_t v93 = v125;
      uint64_t v94 = v123;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v95 = *v93;
          v93 += 2;
          unsigned int v96 = &v80[v95];
          if (v76 < &v80[v95]) {
            unsigned int v96 = v76;
          }
          if ((unint64_t)v96 < *(void *)(v126 + 32)) {
            unsigned int v96 = *(char **)(v126 + 32);
          }
          uint64_t v97 = *(unsigned __int16 *)v96;
          uint64_t v98 = *((unsigned __int16 *)v96 + 1);
          uint64_t v99 = *((unsigned __int16 *)v96 + 2);
          unint64_t v100 = v97 | (v98 << 16) | (v99 << 32) | 0xFFFF000000000000;
          unint64_t v101 = ((v98 - ((v98 * v77 + 0x8000 + ((v98 * v77 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v99 - ((v99 * v77 + 0x8000 + ((v99 * v77 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v97 - ((v97 * v77 + 0x8000 + ((v97 * v77 + 0x8000) >> 16)) >> 16)) | v78;
          if (v6 == 0xFFFF) {
            unint64_t v102 = v100;
          }
          else {
            unint64_t v102 = v101;
          }
          unint64_t v103 = HIWORD(v102);
          if (HIWORD(v102))
          {
            if (v103 == 0xFFFF)
            {
              unsigned int v104 = bswap32(v102);
              *int v7 = HIWORD(v104);
              v7[1] = v104;
              double v7[2] = bswap32(HIDWORD(v102)) >> 16;
              v7[3] = -1;
            }
            else
            {
              uint16x4_t result = (unint64_t)RGBA64_DplusDM(v7, v102, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v103 ^ 0xFFFF);
              int v6 = v124;
            }
          }
          v7 += 4;
          --v94;
        }
        while (v94);
      }
    }
    uint64_t v9 = v115;
    v7 += 4 * v116;
    LOBYTE(v10) = v114;
    v11 += v113;
    a6 = v120 - 1;
  }
  while (v120 != 1);
  return result;
}

unint64_t RGBA64_image_mark_RGB48(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v120 = *a2;
  int v7 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v119 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v116 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v116 * a4;
  uint64_t v12 = *(unsigned __int16 **)(result + 32);
  uint64_t v13 = (char *)v12
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  unint64_t v130 = result;
  uint64_t v14 = 0x8000;
  int v127 = v6;
  char v117 = v10;
  uint64_t v118 = v9;
  if (*(void *)(result + 176))
  {
    uint64_t v15 = a3;
    uint64_t v114 = *((void *)a2 + 11);
    uint64_t v113 = *((void *)a2 + 13);
    uint64_t v112 = ~(-1 << v10);
    char v111 = v10 - 4;
    uint64_t v16 = (unsigned __int16 *)(v13 - 6);
    uint64_t v17 = v6 ^ 0xFFFFu;
    unint64_t v18 = (unint64_t)(~(0xFFFF * v17 + 0x8000 + ((0xFFFF * v17 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v109 = a5;
    uint64_t v110 = -v9;
    uint64_t v108 = v8 + 16 * v15 + 8;
    uint64_t v19 = BLEND16_21384;
    int v124 = (unsigned __int16 *)(v13 - 6);
    while (1)
    {
      if (((v113 - v11) | (v11 - v114)) < 0)
      {
        unsigned int v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v11 & (unint64_t)v112) >> v111) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v110 : v9;
        unsigned int v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *(void *)(v130 + 32) + (v11 >> v10) * v9;
      int v122 = a6;
      uint64_t v121 = v11;
      if (v120 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v24 = (uint64_t *)v108;
        uint64_t v25 = v109;
        while (1)
        {
          uint64_t v26 = *(v24 - 1);
          uint64_t v27 = *v24;
          uint64_t v28 = v23 + v26;
          if ((unint64_t)v16 >= v23 + v26) {
            uint64_t v29 = (unsigned __int16 *)(v23 + v26);
          }
          else {
            uint64_t v29 = v16;
          }
          if (v29 < v12) {
            uint64_t v29 = v12;
          }
          unint64_t v30 = bswap32(v29[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v29[2]) >> 16) << 32) | (bswap32(*v29) >> 16);
          uint64_t v31 = *v24 & 0xF;
          if ((v27 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            unint64_t v43 = (unsigned __int16 *)(v28 + v21);
            if ((unint64_t)v16 < v28 + v21) {
              unint64_t v43 = v16;
            }
            if (v43 < v12) {
              unint64_t v43 = v12;
            }
            uint64_t v44 = v19[v22];
            unint64_t v41 = v30 - ((v44 & v30) >> v22);
            unint64_t v42 = ((bswap32(v43[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v43[2]) >> 16) << 32) | (bswap32(*v43) >> 16)) & v44) >> v22;
            goto LABEL_40;
          }
LABEL_41:
          if (v6 == 0xFFFF) {
            unint64_t v45 = v30 | 0xFFFF000000000000;
          }
          else {
            unint64_t v45 = ((WORD1(v30)
          }
                  - ((v14 + WORD1(v30) * v17 + ((v14 + WORD1(v30) * v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v30) - ((v14 + WORD2(v30) * v17 + ((v14 + WORD2(v30) * v17) >> 16)) >> 16)) << 32) | (unsigned __int16)(v30 - ((v14 + (unsigned __int16)v30 * v17 + ((v14 + (unsigned __int16)v30 * v17) >> 16)) >> 16)) | v18;
          v24 += 2;
          unint64_t v46 = HIDWORD(v45);
          unint64_t v47 = HIWORD(v45);
          unsigned int v48 = bswap32(v45);
          *int v7 = HIWORD(v48);
          v7[1] = v48;
          double v7[2] = bswap32(v46) >> 16;
          v7[3] = __rev16(v47);
          v7 += 4;
          if (!--v25) {
            goto LABEL_85;
          }
        }
        uint64_t v32 = v27 >> 4;
        uint64_t v33 = (unsigned __int16 *)(v28 + (v27 >> 4));
        if (v16 < v33) {
          uint64_t v33 = v16;
        }
        if (v33 < v12) {
          uint64_t v33 = v12;
        }
        unint64_t v34 = bswap32(v33[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v33[2]) >> 16) << 32) | (bswap32(*v33) >> 16);
        if (v22)
        {
          unint64_t v35 = (unsigned __int16 *)(v28 + v21);
          if (v16 >= v35) {
            unint64_t v36 = v35;
          }
          else {
            unint64_t v36 = v16;
          }
          if (v36 < v12) {
            unint64_t v36 = v12;
          }
          uint16x4_t result = bswap32(v36[1]) & 0xFFFF0000;
          unint64_t v37 = result | ((unint64_t)(bswap32(v36[2]) >> 16) << 32) | (bswap32(*v36) >> 16);
          uint64_t v38 = (unsigned __int16 *)((char *)v35 + v32);
          if (v16 < v38) {
            uint64_t v38 = v16;
          }
          if (v38 < v12) {
            uint64_t v38 = v12;
          }
          uint64_t v39 = v19[v22];
          unint64_t v30 = v30 - ((v39 & v30) >> v22) + ((v37 & v39) >> v22);
          unint64_t v34 = v34
              - ((v39 & v34) >> v22)
              + (((bswap32(v38[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v38[2]) >> 16) << 32) | (bswap32(*v38) >> 16)) & v39) >> v22);
        }
        uint64_t v40 = v19[v31];
        unint64_t v41 = v30 - ((v40 & v30) >> v31);
        unint64_t v42 = (v40 & v34) >> v31;
LABEL_40:
        unint64_t v30 = v41 + v42;
        goto LABEL_41;
      }
LABEL_85:
      uint64_t v9 = v118;
      v7 += 4 * v119;
      LOBYTE(v10) = v117;
      uint64_t v11 = v121 + v116;
      a6 = v122 - 1;
      if (v122 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_85;
    }
    uint64_t v128 = v22;
    uint64_t v49 = (uint64_t *)v108;
    uint64_t v50 = v109;
    unsigned int v125 = v22;
    while (1)
    {
      uint64_t v51 = *(v49 - 1);
      uint64_t v52 = *v49;
      uint64_t v53 = v23 + v51;
      if ((unint64_t)v16 >= v23 + v51) {
        uint64_t v54 = (unsigned __int16 *)(v23 + v51);
      }
      else {
        uint64_t v54 = v16;
      }
      if (v54 < v12) {
        uint64_t v54 = v12;
      }
      unint64_t v55 = bswap32(v54[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v54[2]) >> 16) << 32) | (bswap32(*v54) >> 16);
      uint64_t v56 = *v49 & 0xF;
      if ((v52 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        unint64_t v68 = (unsigned __int16 *)(v53 + v21);
        if ((unint64_t)v16 < v53 + v21) {
          unint64_t v68 = v16;
        }
        if (v68 < v12) {
          unint64_t v68 = v12;
        }
        uint64_t v69 = v19[v128];
        unint64_t v66 = v55 - ((v69 & v55) >> v128);
        unint64_t v67 = ((bswap32(v68[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v68[2]) >> 16) << 32) | (bswap32(*v68) >> 16)) & v69) >> v128;
        goto LABEL_76;
      }
LABEL_77:
      if (v6 == 0xFFFF) {
        unint64_t v70 = v55 | 0xFFFF000000000000;
      }
      else {
        unint64_t v70 = ((WORD1(v55)
      }
              - ((v14 + WORD1(v55) * v17 + ((v14 + WORD1(v55) * v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v55) - ((v14 + WORD2(v55) * v17 + ((v14 + WORD2(v55) * v17) >> 16)) >> 16)) << 32) | (unsigned __int16)(v55 - ((v14 + (unsigned __int16)v55 * v17 + ((v14 + (unsigned __int16)v55 * v17) >> 16)) >> 16)) | v18;
      unint64_t v71 = HIWORD(v70);
      if (HIWORD(v70))
      {
        if (v71 == 0xFFFF)
        {
          unsigned int v72 = bswap32(v70);
          *int v7 = HIWORD(v72);
          v7[1] = v72;
          double v7[2] = bswap32(HIDWORD(v70)) >> 16;
          v7[3] = -1;
        }
        else
        {
          unint64_t v73 = v18;
          uint64_t v74 = v19;
          uint64_t v75 = v12;
          uint64_t v76 = v14;
          uint64_t v77 = v17;
          uint64_t v78 = v21;
          uint16x4_t result = (unint64_t)RGBA64_DplusDM(v7, v70, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v71 ^ 0xFFFF);
          uint64_t v21 = v78;
          uint64_t v17 = v77;
          uint64_t v14 = v76;
          uint64_t v12 = v75;
          uint64_t v19 = v74;
          uint64_t v16 = v124;
          unint64_t v18 = v73;
          unsigned int v22 = v125;
          int v6 = v127;
        }
      }
      v49 += 2;
      v7 += 4;
      if (!--v50) {
        goto LABEL_85;
      }
    }
    uint64_t v57 = v52 >> 4;
    uint64_t v58 = (unsigned __int16 *)(v53 + (v52 >> 4));
    if (v16 < v58) {
      uint64_t v58 = v16;
    }
    if (v58 < v12) {
      uint64_t v58 = v12;
    }
    unint64_t v59 = bswap32(v58[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v58[2]) >> 16) << 32) | (bswap32(*v58) >> 16);
    if (v22)
    {
      unint64_t v60 = (unsigned __int16 *)(v53 + v21);
      if (v16 >= v60) {
        unint64_t v61 = v60;
      }
      else {
        unint64_t v61 = v16;
      }
      if (v61 < v12) {
        unint64_t v61 = v12;
      }
      unint64_t v62 = bswap32(v61[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v61[2]) >> 16) << 32) | (bswap32(*v61) >> 16);
      uint64_t v63 = (unsigned __int16 *)((char *)v60 + v57);
      if (v16 < v63) {
        uint64_t v63 = v16;
      }
      if (v63 < v12) {
        uint64_t v63 = v12;
      }
      uint64_t v64 = v19[v128];
      unint64_t v55 = v55 - ((v64 & v55) >> v128) + ((v62 & v64) >> v128);
      unint64_t v59 = v59
          - ((v64 & v59) >> v128)
          + (((bswap32(v63[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v63[2]) >> 16) << 32) | (bswap32(*v63) >> 16)) & v64) >> v128);
    }
    uint64_t v65 = v19[v56];
    unint64_t v66 = v55 - ((v65 & v55) >> v56);
    unint64_t v67 = (v65 & v59) >> v56;
LABEL_76:
    unint64_t v55 = v66 + v67;
    goto LABEL_77;
  }
  unint64_t v129 = (uint64_t *)(v8 + 16 * a3);
  uint64_t v79 = v13 - 6;
  int v80 = v6 ^ 0xFFFF;
  unint64_t v81 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
  uint64_t v126 = a5;
  do
  {
    uint64_t v82 = *(char **)(v130 + 32);
    uint64_t v83 = &v82[(v11 >> v10) * v9];
    int v123 = a6;
    if (v120 == 1)
    {
      if (a5 >= 1)
      {
        uint64x2_t v84 = v129;
        uint64_t v85 = v126;
        do
        {
          uint64_t v86 = *v84;
          v84 += 2;
          uint64_t v87 = &v83[v86];
          if (v79 < &v83[v86]) {
            uint64_t v87 = v79;
          }
          if (v87 < v82) {
            uint64_t v87 = v82;
          }
          uint64_t v88 = bswap32(*(unsigned __int16 *)v87) >> 16;
          uint64_t v89 = bswap32(*((unsigned __int16 *)v87 + 1)) >> 16;
          uint64_t v90 = bswap32(*((unsigned __int16 *)v87 + 2)) >> 16;
          unint64_t v91 = v88 | (v90 << 32) | (v89 << 16) | 0xFFFF000000000000;
          unint64_t v92 = ((v89 - ((v89 * v80 + 0x8000 + ((v89 * v80 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v90 - ((v90 * v80 + 0x8000 + ((v90 * v80 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v88 - ((v88 * v80 + 0x8000 + ((v88 * v80 + 0x8000) >> 16)) >> 16)) | v81;
          if (v6 == 0xFFFF) {
            unint64_t v92 = v91;
          }
          unint64_t v93 = HIDWORD(v92);
          unint64_t v94 = HIWORD(v92);
          unsigned int v95 = bswap32(v92);
          *int v7 = HIWORD(v95);
          v7[1] = v95;
          double v7[2] = bswap32(v93) >> 16;
          v7[3] = __rev16(v94);
          v7 += 4;
          --v85;
        }
        while (v85);
      }
    }
    else
    {
      unsigned int v96 = v129;
      uint64_t v97 = v126;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v98 = *v96;
          v96 += 2;
          uint64_t v99 = &v83[v98];
          if (v79 < &v83[v98]) {
            uint64_t v99 = v79;
          }
          if ((unint64_t)v99 < *(void *)(v130 + 32)) {
            uint64_t v99 = *(char **)(v130 + 32);
          }
          uint64_t v100 = bswap32(*(unsigned __int16 *)v99) >> 16;
          uint64_t v101 = bswap32(*((unsigned __int16 *)v99 + 1)) >> 16;
          uint64_t v102 = bswap32(*((unsigned __int16 *)v99 + 2)) >> 16;
          unint64_t v103 = v100 | (v102 << 32) | (v101 << 16) | 0xFFFF000000000000;
          unint64_t v104 = ((v101
                 - ((v101 * v80 + 0x8000 + ((v101 * v80 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v102 - ((v102 * v80 + 0x8000 + ((v102 * v80 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v100 - ((v100 * v80 + 0x8000 + ((v100 * v80 + 0x8000) >> 16)) >> 16)) | v81;
          if (v6 == 0xFFFF) {
            unint64_t v105 = v103;
          }
          else {
            unint64_t v105 = v104;
          }
          unint64_t v106 = HIWORD(v105);
          if (HIWORD(v105))
          {
            if (v106 == 0xFFFF)
            {
              unsigned int v107 = bswap32(v105);
              *int v7 = HIWORD(v107);
              v7[1] = v107;
              double v7[2] = bswap32(HIDWORD(v105)) >> 16;
              v7[3] = -1;
            }
            else
            {
              uint16x4_t result = (unint64_t)RGBA64_DplusDM(v7, v105, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v106 ^ 0xFFFF);
              int v6 = v127;
            }
          }
          v7 += 4;
          --v97;
        }
        while (v97);
      }
    }
    uint64_t v9 = v118;
    v7 += 4 * v119;
    LOBYTE(v10) = v117;
    v11 += v116;
    a6 = v123 - 1;
  }
  while (v123 != 1);
  return result;
}

_WORD *RGBA64_image_mark_w16(_WORD *result, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = *((unsigned __int16 *)a2 + 4);
  int v125 = *a2;
  int v7 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v124 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v121 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v121 * a4;
  uint64_t v12 = (unsigned __int16 *)*((void *)result + 4);
  uint64_t v13 = (char *)v12
      + (*((_DWORD *)result + 65) - 1) * *((_DWORD *)result + 6)
      + (((*((_DWORD *)result + 2) >> 22) * *((_DWORD *)result + 64)) >> 3);
  uint64_t v135 = result;
  char v122 = v10;
  uint64_t v123 = v9;
  if (*((void *)result + 22))
  {
    uint64_t v14 = a3;
    uint64_t v119 = *((void *)a2 + 11);
    uint64_t v118 = *((void *)a2 + 13);
    uint64_t v117 = ~(-1 << v10);
    char v116 = v10 - 4;
    uint64_t v15 = (unsigned __int16 *)(v13 - 4);
    int v16 = v6 ^ 0xFFFF;
    unint64_t v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v114 = a5;
    uint64_t v115 = -v9;
    uint64_t v113 = v8 + 16 * v14 + 8;
    unint64_t v18 = BLEND16_21384;
    while (1)
    {
      if (((v118 - v11) | (v11 - v119)) < 0)
      {
        unsigned int v21 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = ((v11 & (unint64_t)v117) >> v116) & 0xF;
        uint64_t v20 = (unint64_t)(v19 - 7) >= 9 ? v115 : v9;
        unsigned int v21 = weights_21383[v19] & 0xF;
      }
      uint64_t v22 = *((void *)v135 + 4) + (v11 >> v10) * v9;
      int v128 = a6;
      uint64_t v126 = v11;
      if (v125 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v23 = (uint64_t *)v113;
        uint64_t v24 = v114;
        while (1)
        {
          uint64_t v25 = *(v23 - 1);
          uint64_t v26 = *v23;
          uint64_t v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25) {
            uint64_t v28 = (unsigned __int16 *)(v22 + v25);
          }
          else {
            uint64_t v28 = v15;
          }
          if (v28 < v12) {
            uint64_t v28 = v12;
          }
          unint64_t v29 = *v28;
          uint64_t v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0) {
            break;
          }
          if (v21)
          {
            unint64_t v42 = (unsigned __int16 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20) {
              unint64_t v42 = v15;
            }
            if (v42 < v12) {
              unint64_t v42 = v12;
            }
            uint64_t v43 = v18[v21];
            __int16 v40 = v29 - ((v43 & v29) >> v21);
            unint64_t v41 = (unint64_t)(unsigned __int16)(v43 & *v42) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          unint64_t v44 = (0x100010001 * (unsigned __int16)v29) | 0xFFFF000000000000;
          unsigned int v45 = (v29 | 0xFFFF0000) * v16;
          if (v45 >= 0xFFFE8000) {
            unsigned int v45 = -98304;
          }
          uint64_t v46 = (unsigned __int16)(v29 - ((v45 + 0x8000 + ((v45 + 0x8000) >> 16)) >> 16));
          unint64_t v47 = ((unint64_t)v46 << 16) | (v46 << 32) | v17 | v46;
          if (v6 == 0xFFFF) {
            unint64_t v47 = v44;
          }
          unint64_t v48 = HIDWORD(v47);
          unint64_t v49 = HIWORD(v47);
          unsigned int v50 = bswap32(v47);
          *int v7 = HIWORD(v50);
          v7[1] = v50;
          double v7[2] = bswap32(v48) >> 16;
          v7[3] = __rev16(v49);
          v7 += 4;
          if (!--v24) {
            goto LABEL_88;
          }
        }
        uint64_t v31 = v26 >> 4;
        uint64_t v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32) {
          uint64_t v32 = v15;
        }
        if (v32 < v12) {
          uint64_t v32 = v12;
        }
        unint64_t v33 = *v32;
        if (v21)
        {
          unint64_t v34 = (unsigned __int16 *)(v27 + v20);
          if (v15 >= v34) {
            unint64_t v35 = v34;
          }
          else {
            unint64_t v35 = v15;
          }
          if (v35 < v12) {
            unint64_t v35 = v12;
          }
          unint64_t v36 = *v35;
          unint64_t v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37) {
            unint64_t v37 = v15;
          }
          if (v37 < v12) {
            unint64_t v37 = v12;
          }
          uint64_t v38 = v18[v21];
          LODWORD(v29) = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          LODWORD(v33) = v33 - ((v38 & v33) >> v21) + ((unint64_t)(unsigned __int16)(v38 & *v37) >> v21);
        }
        uint64_t v39 = v18[v30];
        __int16 v40 = v29 - ((unint64_t)(v39 & v29) >> v30);
        unint64_t v41 = (unint64_t)(v39 & v33) >> v30;
LABEL_40:
        LOWORD(v29) = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      uint64_t v9 = v123;
      v7 += 4 * v124;
      LOBYTE(v10) = v122;
      uint64_t v11 = v126 + v121;
      a6 = v128 - 1;
      if (v128 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v133 = v21;
    uint64_t v52 = (uint64_t *)v113;
    uint64_t v51 = v114;
    unsigned int v131 = v21;
    uint64_t v130 = *((void *)v135 + 4) + (v11 >> v10) * v9;
    while (1)
    {
      uint64_t v53 = *(v52 - 1);
      uint64_t v54 = *v52;
      uint64_t v55 = v22 + v53;
      if ((unint64_t)v15 >= v22 + v53) {
        uint64_t v56 = (unsigned __int16 *)(v22 + v53);
      }
      else {
        uint64_t v56 = v15;
      }
      if (v56 < v12) {
        uint64_t v56 = v12;
      }
      unint64_t v57 = *v56;
      uint64_t v58 = *v52 & 0xF;
      if ((v54 & 0xF) != 0) {
        break;
      }
      if (v21)
      {
        unint64_t v70 = (unsigned __int16 *)(v55 + v20);
        if ((unint64_t)v15 < v55 + v20) {
          unint64_t v70 = v15;
        }
        if (v70 < v12) {
          unint64_t v70 = v12;
        }
        uint64_t v71 = v18[v133];
        __int16 v68 = v57 - ((v71 & v57) >> v133);
        unint64_t v69 = (unint64_t)(unsigned __int16)(v71 & *v70) >> v133;
        goto LABEL_77;
      }
LABEL_78:
      unint64_t v72 = (0x100010001 * (unsigned __int16)v57) | 0xFFFF000000000000;
      unsigned int v73 = (v57 | 0xFFFF0000) * v16;
      if (v73 >= 0xFFFE8000) {
        unsigned int v73 = -98304;
      }
      uint64_t v74 = (unsigned __int16)(v57 - ((v73 + 0x8000 + ((v73 + 0x8000) >> 16)) >> 16));
      unint64_t v75 = ((unint64_t)v74 << 16) | (v74 << 32) | v17 | v74;
      if (v6 == 0xFFFF) {
        unint64_t v76 = v72;
      }
      else {
        unint64_t v76 = v75;
      }
      unint64_t v77 = HIWORD(v76);
      if (HIWORD(v76))
      {
        if (v77 == 0xFFFF)
        {
          unsigned int v78 = bswap32(v76);
          *int v7 = HIWORD(v78);
          v7[1] = v78;
          double v7[2] = bswap32(HIDWORD(v76)) >> 16;
          v7[3] = -1;
        }
        else
        {
          uint64_t v79 = v6;
          unint64_t v80 = v17;
          uint64_t v81 = v20;
          uint64_t v82 = v18;
          uint16x4_t result = RGBA64_DplusDM(v7, v76, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v77 ^ 0xFFFF);
          unint64_t v18 = v82;
          uint64_t v20 = v81;
          unsigned int v21 = v131;
          unint64_t v17 = v80;
          uint64_t v6 = v79;
          uint64_t v22 = v130;
        }
      }
      v52 += 2;
      v7 += 4;
      if (!--v51) {
        goto LABEL_88;
      }
    }
    uint64_t v59 = v54 >> 4;
    unint64_t v60 = (unsigned __int16 *)(v55 + (v54 >> 4));
    if (v15 < v60) {
      unint64_t v60 = v15;
    }
    if (v60 < v12) {
      unint64_t v60 = v12;
    }
    unint64_t v61 = *v60;
    if (v21)
    {
      unint64_t v62 = (unsigned __int16 *)(v55 + v20);
      if (v15 >= v62) {
        uint64_t v63 = v62;
      }
      else {
        uint64_t v63 = v15;
      }
      if (v63 < v12) {
        uint64_t v63 = v12;
      }
      unint64_t v64 = *v63;
      uint64_t v65 = (unsigned __int16 *)((char *)v62 + v59);
      if (v15 < v65) {
        uint64_t v65 = v15;
      }
      if (v65 < v12) {
        uint64_t v65 = v12;
      }
      uint64_t v66 = v18[v133];
      LODWORD(v57) = v57 - ((v66 & v57) >> v133) + ((v66 & v64) >> v133);
      LODWORD(v61) = v61 - ((v66 & v61) >> v133) + ((unint64_t)(unsigned __int16)(v66 & *v65) >> v133);
    }
    uint64_t v67 = v18[v58];
    __int16 v68 = v57 - ((unint64_t)(v67 & v57) >> v58);
    unint64_t v69 = (unint64_t)(v67 & v61) >> v58;
LABEL_77:
    LOWORD(v57) = v68 + v69;
    goto LABEL_78;
  }
  uint64_t v83 = v13 - 4;
  int v84 = v6 ^ 0xFFFF;
  unint64_t v85 = (unint64_t)(~(0xFFFF * v84 + 0x8000 + ((0xFFFF * v84 + 0x8000) >> 16)) >> 16) << 48;
  uint64_t v132 = a5;
  int v134 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    uint64_t v86 = (char *)*((void *)v135 + 4);
    uint64_t v87 = &v86[(v11 >> v10) * v9];
    int v129 = a6;
    uint64_t v127 = v11;
    if (v125 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v89 = v132;
        uint64_t v88 = v134;
        do
        {
          uint64_t v90 = *v88;
          v88 += 2;
          unint64_t v91 = &v87[v90];
          if (v83 < &v87[v90]) {
            unint64_t v91 = v83;
          }
          if (v91 < v86) {
            unint64_t v91 = v86;
          }
          uint64_t v92 = *(unsigned __int16 *)v91;
          unsigned int v93 = (v92 | 0xFFFF0000) * v84;
          if (v93 >= 0xFFFE8000) {
            unsigned int v93 = -98304;
          }
          uint64_t v94 = 0x100010001 * v92;
          uint64_t v95 = (unsigned __int16)(v92 - ((v93 + 0x8000 + ((v93 + 0x8000) >> 16)) >> 16));
          unint64_t v96 = v94 | 0xFFFF000000000000;
          unint64_t v97 = ((unint64_t)v95 << 16) | (v95 << 32) | v85 | v95;
          if (v6 == 0xFFFF) {
            unint64_t v97 = v96;
          }
          unint64_t v98 = HIDWORD(v97);
          unint64_t v99 = HIWORD(v97);
          unsigned int v100 = bswap32(v97);
          v7[1] = v100;
          *int v7 = HIWORD(v100);
          double v7[2] = bswap32(v98) >> 16;
          v7[3] = __rev16(v99);
          v7 += 4;
          --v89;
        }
        while (v89);
      }
    }
    else
    {
      uint64_t v102 = v132;
      uint64_t v101 = v134;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v103 = *v101;
          v101 += 2;
          unint64_t v104 = &v87[v103];
          if (v83 < &v87[v103]) {
            unint64_t v104 = v83;
          }
          if ((unint64_t)v104 < *((void *)v135 + 4)) {
            unint64_t v104 = (char *)*((void *)v135 + 4);
          }
          uint64_t v105 = *(unsigned __int16 *)v104;
          unint64_t v106 = (0x100010001 * v105) | 0xFFFF000000000000;
          unsigned int v107 = (v105 | 0xFFFF0000) * v84;
          if (v107 >= 0xFFFE8000) {
            unsigned int v107 = -98304;
          }
          uint64_t v108 = (unsigned __int16)(v105 - ((v107 + 0x8000 + ((v107 + 0x8000) >> 16)) >> 16));
          unint64_t v109 = ((unint64_t)v108 << 16) | (v108 << 32) | v85 | v108;
          if (v6 == 0xFFFF) {
            unint64_t v110 = v106;
          }
          else {
            unint64_t v110 = v109;
          }
          unint64_t v111 = HIWORD(v110);
          if (HIWORD(v110))
          {
            if (v111 == 0xFFFF)
            {
              unsigned int v112 = bswap32(v110);
              *int v7 = HIWORD(v112);
              v7[1] = v112;
              double v7[2] = bswap32(HIDWORD(v110)) >> 16;
              v7[3] = -1;
            }
            else
            {
              uint16x4_t result = RGBA64_DplusDM(v7, v110, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v111 ^ 0xFFFF);
            }
          }
          v7 += 4;
          --v102;
        }
        while (v102);
      }
    }
    uint64_t v9 = v123;
    v7 += 4 * v124;
    LOBYTE(v10) = v122;
    uint64_t v11 = v127 + v121;
    a6 = v129 - 1;
  }
  while (v129 != 1);
  return result;
}

_WORD *RGBA64_image_mark_W16(_WORD *result, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = *((unsigned __int16 *)a2 + 4);
  int v125 = *a2;
  int v7 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v124 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v121 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v121 * a4;
  uint64_t v12 = (unsigned __int16 *)*((void *)result + 4);
  uint64_t v13 = (char *)v12
      + (*((_DWORD *)result + 65) - 1) * *((_DWORD *)result + 6)
      + (((*((_DWORD *)result + 2) >> 22) * *((_DWORD *)result + 64)) >> 3);
  uint64_t v135 = result;
  char v122 = v10;
  uint64_t v123 = v9;
  if (*((void *)result + 22))
  {
    uint64_t v14 = a3;
    uint64_t v119 = *((void *)a2 + 11);
    uint64_t v118 = *((void *)a2 + 13);
    uint64_t v117 = ~(-1 << v10);
    char v116 = v10 - 4;
    uint64_t v15 = (unsigned __int16 *)(v13 - 4);
    int v16 = v6 ^ 0xFFFF;
    unint64_t v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v114 = a5;
    uint64_t v115 = -v9;
    uint64_t v113 = v8 + 16 * v14 + 8;
    unint64_t v18 = BLEND16_21384;
    while (1)
    {
      if (((v118 - v11) | (v11 - v119)) < 0)
      {
        uint64_t v21 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = ((v11 & (unint64_t)v117) >> v116) & 0xF;
        uint64_t v20 = (unint64_t)(v19 - 7) >= 9 ? v115 : v9;
        uint64_t v21 = weights_21383[v19] & 0xF;
      }
      uint64_t v22 = *((void *)v135 + 4) + (v11 >> v10) * v9;
      int v128 = a6;
      uint64_t v126 = v11;
      if (v125 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v23 = (uint64_t *)v113;
        uint64_t v24 = v114;
        while (1)
        {
          uint64_t v25 = *(v23 - 1);
          uint64_t v26 = *v23;
          uint64_t v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25) {
            uint64_t v28 = (unsigned __int16 *)(v22 + v25);
          }
          else {
            uint64_t v28 = v15;
          }
          if (v28 < v12) {
            uint64_t v28 = v12;
          }
          unint64_t v29 = bswap32(*v28) >> 16;
          uint64_t v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0) {
            break;
          }
          if (v21)
          {
            unint64_t v42 = (unsigned __int16 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20) {
              unint64_t v42 = v15;
            }
            if (v42 < v12) {
              unint64_t v42 = v12;
            }
            uint64_t v43 = v18[v21];
            __int16 v40 = v29 - ((v43 & v29) >> v21);
            unint64_t v41 = (v43 & (unint64_t)(bswap32(*v42) >> 16)) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          unint64_t v44 = (0x100010001 * (unsigned __int16)v29) | 0xFFFF000000000000;
          unsigned int v45 = (v29 | 0xFFFF0000) * v16;
          if (v45 >= 0xFFFE8000) {
            unsigned int v45 = -98304;
          }
          uint64_t v46 = (unsigned __int16)(v29 - ((v45 + 0x8000 + ((v45 + 0x8000) >> 16)) >> 16));
          unint64_t v47 = ((unint64_t)v46 << 16) | (v46 << 32) | v17 | v46;
          if (v6 == 0xFFFF) {
            unint64_t v47 = v44;
          }
          unint64_t v48 = HIDWORD(v47);
          unint64_t v49 = HIWORD(v47);
          unsigned int v50 = bswap32(v47);
          *int v7 = HIWORD(v50);
          v7[1] = v50;
          double v7[2] = bswap32(v48) >> 16;
          v7[3] = __rev16(v49);
          v7 += 4;
          if (!--v24) {
            goto LABEL_88;
          }
        }
        uint64_t v31 = v26 >> 4;
        uint64_t v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32) {
          uint64_t v32 = v15;
        }
        if (v32 < v12) {
          uint64_t v32 = v12;
        }
        unint64_t v33 = bswap32(*v32) >> 16;
        if (v21)
        {
          unint64_t v34 = (unsigned __int16 *)(v27 + v20);
          if (v15 >= v34) {
            unint64_t v35 = v34;
          }
          else {
            unint64_t v35 = v15;
          }
          if (v35 < v12) {
            unint64_t v35 = v12;
          }
          unint64_t v36 = bswap32(*v35) >> 16;
          unint64_t v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37) {
            unint64_t v37 = v15;
          }
          if (v37 < v12) {
            unint64_t v37 = v12;
          }
          uint64_t v38 = v18[v21];
          LODWORD(v29) = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          LODWORD(v33) = v33 - ((v38 & v33) >> v21) + ((v38 & (unint64_t)(bswap32(*v37) >> 16)) >> v21);
        }
        uint64_t v39 = v18[v30];
        __int16 v40 = v29 - ((unint64_t)(v39 & v29) >> v30);
        unint64_t v41 = (unint64_t)(v39 & v33) >> v30;
LABEL_40:
        LOWORD(v29) = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      uint64_t v9 = v123;
      v7 += 4 * v124;
      LOBYTE(v10) = v122;
      uint64_t v11 = v126 + v121;
      a6 = v128 - 1;
      if (v128 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v133 = v21;
    uint64_t v51 = (uint64_t *)v113;
    uint64_t v52 = v114;
    uint64_t v131 = v20;
    uint64_t v130 = *((void *)v135 + 4) + (v11 >> v10) * v9;
    while (1)
    {
      uint64_t v53 = *(v51 - 1);
      uint64_t v54 = *v51;
      uint64_t v55 = v22 + v53;
      if ((unint64_t)v15 >= v22 + v53) {
        uint64_t v56 = (unsigned __int16 *)(v22 + v53);
      }
      else {
        uint64_t v56 = v15;
      }
      if (v56 < v12) {
        uint64_t v56 = v12;
      }
      unint64_t v57 = bswap32(*v56) >> 16;
      uint64_t v58 = *v51 & 0xF;
      if ((v54 & 0xF) != 0) {
        break;
      }
      if (v21)
      {
        unint64_t v70 = (unsigned __int16 *)(v55 + v20);
        if ((unint64_t)v15 < v55 + v20) {
          unint64_t v70 = v15;
        }
        if (v70 < v12) {
          unint64_t v70 = v12;
        }
        uint64_t v71 = v18[v133];
        __int16 v68 = v57 - ((v71 & v57) >> v133);
        unint64_t v69 = (v71 & (unint64_t)(bswap32(*v70) >> 16)) >> v133;
        goto LABEL_77;
      }
LABEL_78:
      unint64_t v72 = (0x100010001 * (unsigned __int16)v57) | 0xFFFF000000000000;
      unsigned int v73 = (v57 | 0xFFFF0000) * v16;
      if (v73 >= 0xFFFE8000) {
        unsigned int v73 = -98304;
      }
      uint64_t v74 = (unsigned __int16)(v57 - ((v73 + 0x8000 + ((v73 + 0x8000) >> 16)) >> 16));
      unint64_t v75 = ((unint64_t)v74 << 16) | (v74 << 32) | v17 | v74;
      if (v6 == 0xFFFF) {
        unint64_t v76 = v72;
      }
      else {
        unint64_t v76 = v75;
      }
      unint64_t v77 = HIWORD(v76);
      if (HIWORD(v76))
      {
        if (v77 == 0xFFFF)
        {
          unsigned int v78 = bswap32(v76);
          *int v7 = HIWORD(v78);
          v7[1] = v78;
          double v7[2] = bswap32(HIDWORD(v76)) >> 16;
          v7[3] = -1;
        }
        else
        {
          uint64_t v79 = v6;
          unint64_t v80 = v17;
          uint64_t v81 = v21;
          uint64_t v82 = v18;
          uint16x4_t result = RGBA64_DplusDM(v7, v76, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v77 ^ 0xFFFF);
          unint64_t v18 = v82;
          uint64_t v21 = v81;
          uint64_t v22 = v130;
          unint64_t v17 = v80;
          uint64_t v6 = v79;
          uint64_t v20 = v131;
        }
      }
      v51 += 2;
      v7 += 4;
      if (!--v52) {
        goto LABEL_88;
      }
    }
    uint64_t v59 = v54 >> 4;
    unint64_t v60 = (unsigned __int16 *)(v55 + (v54 >> 4));
    if (v15 < v60) {
      unint64_t v60 = v15;
    }
    if (v60 < v12) {
      unint64_t v60 = v12;
    }
    unint64_t v61 = bswap32(*v60) >> 16;
    if (v21)
    {
      unint64_t v62 = (unsigned __int16 *)(v55 + v20);
      if (v15 >= v62) {
        uint64_t v63 = v62;
      }
      else {
        uint64_t v63 = v15;
      }
      if (v63 < v12) {
        uint64_t v63 = v12;
      }
      unint64_t v64 = bswap32(*v63) >> 16;
      uint64_t v65 = (unsigned __int16 *)((char *)v62 + v59);
      if (v15 < v65) {
        uint64_t v65 = v15;
      }
      if (v65 < v12) {
        uint64_t v65 = v12;
      }
      uint64_t v66 = v18[v133];
      LODWORD(v57) = v57 - ((v66 & v57) >> v133) + ((v66 & v64) >> v133);
      LODWORD(v61) = v61 - ((v66 & v61) >> v133) + ((v66 & (unint64_t)(bswap32(*v65) >> 16)) >> v133);
    }
    uint64_t v67 = v18[v58];
    __int16 v68 = v57 - ((unint64_t)(v67 & v57) >> v58);
    unint64_t v69 = (unint64_t)(v67 & v61) >> v58;
LABEL_77:
    LOWORD(v57) = v68 + v69;
    goto LABEL_78;
  }
  uint64_t v83 = v13 - 4;
  int v84 = v6 ^ 0xFFFF;
  unint64_t v85 = (unint64_t)(~(0xFFFF * v84 + 0x8000 + ((0xFFFF * v84 + 0x8000) >> 16)) >> 16) << 48;
  uint64_t v132 = a5;
  int v134 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    uint64_t v86 = (char *)*((void *)v135 + 4);
    uint64_t v87 = &v86[(v11 >> v10) * v9];
    int v129 = a6;
    uint64_t v127 = v11;
    if (v125 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v89 = v132;
        uint64_t v88 = v134;
        do
        {
          uint64_t v90 = *v88;
          v88 += 2;
          unint64_t v91 = &v87[v90];
          if (v83 < &v87[v90]) {
            unint64_t v91 = v83;
          }
          if (v91 < v86) {
            unint64_t v91 = v86;
          }
          uint64_t v92 = bswap32(*(unsigned __int16 *)v91) >> 16;
          unsigned int v93 = (v92 | 0xFFFF0000) * v84;
          if (v93 >= 0xFFFE8000) {
            unsigned int v93 = -98304;
          }
          uint64_t v94 = 0x100010001 * v92;
          uint64_t v95 = (unsigned __int16)(v92 - ((v93 + 0x8000 + ((v93 + 0x8000) >> 16)) >> 16));
          unint64_t v96 = v94 | 0xFFFF000000000000;
          unint64_t v97 = ((unint64_t)v95 << 16) | (v95 << 32) | v85 | v95;
          if (v6 == 0xFFFF) {
            unint64_t v97 = v96;
          }
          unint64_t v98 = HIDWORD(v97);
          unint64_t v99 = HIWORD(v97);
          unsigned int v100 = bswap32(v97);
          v7[1] = v100;
          *int v7 = HIWORD(v100);
          double v7[2] = bswap32(v98) >> 16;
          v7[3] = __rev16(v99);
          v7 += 4;
          --v89;
        }
        while (v89);
      }
    }
    else
    {
      uint64_t v102 = v132;
      uint64_t v101 = v134;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v103 = *v101;
          v101 += 2;
          unint64_t v104 = &v87[v103];
          if (v83 < &v87[v103]) {
            unint64_t v104 = v83;
          }
          if ((unint64_t)v104 < *((void *)v135 + 4)) {
            unint64_t v104 = (char *)*((void *)v135 + 4);
          }
          uint64_t v105 = bswap32(*(unsigned __int16 *)v104) >> 16;
          unint64_t v106 = (0x100010001 * v105) | 0xFFFF000000000000;
          unsigned int v107 = (v105 | 0xFFFF0000) * v84;
          if (v107 >= 0xFFFE8000) {
            unsigned int v107 = -98304;
          }
          uint64_t v108 = (unsigned __int16)(v105 - ((v107 + 0x8000 + ((v107 + 0x8000) >> 16)) >> 16));
          unint64_t v109 = ((unint64_t)v108 << 16) | (v108 << 32) | v85 | v108;
          if (v6 == 0xFFFF) {
            unint64_t v110 = v106;
          }
          else {
            unint64_t v110 = v109;
          }
          unint64_t v111 = HIWORD(v110);
          if (HIWORD(v110))
          {
            if (v111 == 0xFFFF)
            {
              unsigned int v112 = bswap32(v110);
              *int v7 = HIWORD(v112);
              v7[1] = v112;
              double v7[2] = bswap32(HIDWORD(v110)) >> 16;
              v7[3] = -1;
            }
            else
            {
              uint16x4_t result = RGBA64_DplusDM(v7, v110, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v111 ^ 0xFFFF);
            }
          }
          v7 += 4;
          --v102;
        }
        while (v102);
      }
    }
    uint64_t v9 = v123;
    v7 += 4 * v124;
    LOBYTE(v10) = v122;
    uint64_t v11 = v127 + v121;
    a6 = v129 - 1;
  }
  while (v129 != 1);
  return result;
}

unint64_t RGBA64_image_mark_rgb32(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = a2[1];
  int v152 = *a2;
  uint64_t v8 = *(unsigned int **)(result + 32);
  if (*(void *)(result + 40)) {
    int v9 = 0;
  }
  else {
    int v9 = 255;
  }
  uint64_t v10 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v151 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 15);
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v148 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v148 * a4;
  uint64_t v15 = (char *)v8
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  unint64_t v164 = result;
  uint64_t v16 = 0x8000;
  int v162 = *((unsigned __int16 *)a2 + 4);
  int v160 = v9;
  int v161 = a2[1];
  char v149 = v13;
  uint64_t v150 = v12;
  if (*(void *)(result + 176))
  {
    uint64_t v146 = *((void *)a2 + 11);
    uint64_t v145 = *((void *)a2 + 13);
    uint64_t v144 = ~(-1 << v13);
    char v143 = v13 - 4;
    unint64_t v17 = (unsigned int *)(v15 - 4);
    uint64_t v18 = (32 - v7);
    int v19 = v6 ^ 0xFFFF;
    int32x2_t v20 = vdup_n_s32(v6 ^ 0xFFFFu);
    uint64_t v141 = v11 + 16 * a3 + 8;
    uint64_t v142 = -v12;
    uint64_t v140 = a5;
    int32x2_t v21 = vdup_n_s32(0x101u);
    uint64x2_t v22 = (uint64x2_t)xmmword_1850CDE00;
    uint64_t v23 = BLEND8_21385;
    unsigned int v157 = *(unsigned int **)(result + 32);
    int v156 = v6 ^ 0xFFFF;
    while (1)
    {
      if (((v145 - v14) | (v14 - v146)) < 0)
      {
        uint64_t v26 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v24 = ((v14 & (unint64_t)v144) >> v143) & 0xF;
        uint64_t v25 = (unint64_t)(v24 - 7) >= 9 ? v142 : v12;
        uint64_t v26 = weights_21383[v24] & 0xF;
      }
      uint64_t v27 = *(void *)(v164 + 32) + (v14 >> v13) * v12;
      int v154 = a6;
      uint64_t v153 = v14;
      if (v152 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v29 = v140;
        uint64_t v28 = (uint64_t *)v141;
        while (1)
        {
          uint64_t v30 = *(v28 - 1);
          uint64_t v31 = *v28;
          uint64_t v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30) {
            unint64_t v33 = (unsigned int *)(v27 + v30);
          }
          else {
            unint64_t v33 = v17;
          }
          if (v33 < v8) {
            unint64_t v33 = v8;
          }
          unsigned int v34 = *v33;
          char v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0) {
            break;
          }
          if (v26)
          {
            uint64_t v46 = (unsigned int *)(v32 + v25);
            if ((unint64_t)v17 < v32 + v25) {
              uint64_t v46 = v17;
            }
            if (v46 < v8) {
              uint64_t v46 = v8;
            }
            int v47 = v23[v26];
            unsigned int v44 = v34 - ((v47 & v34) >> v26);
            unsigned int v45 = (v47 & *v46) >> v26;
            goto LABEL_43;
          }
LABEL_44:
          unsigned int v48 = (v34 << v7) | (v34 >> v18);
          HIDWORD(v50) = HIBYTE(v48);
          LODWORD(v50) = v48;
          int v49 = v50 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v51 = ((unint64_t)(BYTE1(v48) | (BYTE1(v48) << 8)) << 32) | ((unint64_t)((v48 | v9) | ((v48 | v9) << 8)) << 48) | v48 & 0xFF0000 | (BYTE2(v48) << 24);
          }
          else
          {
            v52.i32[0] = v48 | v9;
            v52.i32[1] = v48 >> 8;
            int32x2_t v53 = vmul_s32((int32x2_t)vand_s8(v52, (int8x8_t)0xFF000000FFLL), v21);
            uint32x2_t v54 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v53, v20);
            int8x8_t v55 = vand_s8((int8x8_t)vsub_s32(v53, (int32x2_t)vshr_n_u32(vsra_n_u32(v54, v54, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v56.i64[0] = v55.u32[0];
            v56.i64[1] = v55.u32[1];
            int8x16_t v57 = (int8x16_t)vshlq_u64(v56, v22);
            unint64_t v51 = vorrq_s8(v57, (int8x16_t)vdupq_laneq_s64((int64x2_t)v57, 1)).u64[0] | (((BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                        - ((v16
                                                                                          + (BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                          * v19
                                                                                          + ((v16
                                                                                            + (BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                            * v19) >> 16)) >> 16)) << 16);
            int v49 = (unsigned __int16)(v49 - ((v16 + v49 * v19 + ((v16 + v49 * v19) >> 16)) >> 16));
          }
          v28 += 2;
          unsigned int v58 = bswap32(v51 | v49);
          *uint64_t v10 = HIWORD(v58);
          v10[1] = v58;
          v10[2] = bswap32(HIDWORD(v51)) >> 16;
          v10[3] = __rev16(HIWORD(v51));
          v10 += 4;
          if (!--v29) {
            goto LABEL_88;
          }
        }
        unint64_t v36 = (unsigned int *)(v32 + (v31 >> 4));
        if (v17 < v36) {
          unint64_t v36 = v17;
        }
        if (v36 < v8) {
          unint64_t v36 = v8;
        }
        unsigned int v37 = *v36;
        if (v26)
        {
          uint64_t v38 = (unsigned int *)(v32 + v25);
          if (v17 >= v38) {
            uint64_t v39 = v38;
          }
          else {
            uint64_t v39 = v17;
          }
          if (v39 < v8) {
            uint64_t v39 = v8;
          }
          unsigned int v40 = *v39;
          unint64_t v41 = (unsigned int *)((char *)v38 + (v31 >> 4));
          if (v17 < v41) {
            unint64_t v41 = v17;
          }
          if (v41 < v8) {
            unint64_t v41 = v8;
          }
          int v42 = v23[v26];
          uint16x4_t result = (v42 & v37) >> v26;
          unsigned int v34 = v34 - ((v42 & v34) >> v26) + ((v42 & v40) >> v26);
          unsigned int v37 = v37 - result + ((v42 & *v41) >> v26);
        }
        int v43 = v23[*v28 & 0xF];
        unsigned int v44 = v34 - ((v43 & v34) >> v35);
        unsigned int v45 = (v43 & v37) >> v35;
LABEL_43:
        unsigned int v34 = v44 + v45;
        goto LABEL_44;
      }
LABEL_88:
      uint64_t v12 = v150;
      v10 += 4 * v151;
      LOBYTE(v13) = v149;
      uint64_t v14 = v153 + v148;
      a6 = v154 - 1;
      if (v154 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v163 = v26;
    uint64_t v60 = v140;
    uint64_t v59 = (uint64_t *)v141;
    while (1)
    {
      uint64_t v61 = *(v59 - 1);
      uint64_t v62 = *v59;
      uint64_t v63 = v27 + v61;
      if ((unint64_t)v17 >= v27 + v61) {
        unint64_t v64 = (unsigned int *)(v27 + v61);
      }
      else {
        unint64_t v64 = v17;
      }
      if (v64 < v8) {
        unint64_t v64 = v8;
      }
      unsigned int v65 = *v64;
      char v66 = v62 & 0xF;
      if ((v62 & 0xF) != 0) {
        break;
      }
      if (v26)
      {
        unint64_t v77 = (unsigned int *)(v63 + v25);
        if ((unint64_t)v17 < v63 + v25) {
          unint64_t v77 = v17;
        }
        if (v77 < v8) {
          unint64_t v77 = v8;
        }
        int v78 = v23[v163];
        unsigned int v75 = v65 - ((v78 & v65) >> v26);
        unsigned int v76 = (v78 & *v77) >> v26;
        goto LABEL_79;
      }
LABEL_80:
      unsigned int v79 = (v65 << v7) | (v65 >> v18);
      HIDWORD(v81) = HIBYTE(v79);
      LODWORD(v81) = v79;
      unsigned int v80 = v81 >> 24;
      if (v6 == 0xFFFF)
      {
        unint64_t v82 = ((unint64_t)(BYTE1(v79) | (BYTE1(v79) << 8)) << 32) | ((unint64_t)((v79 | v9) | ((v79 | v9) << 8)) << 48) | v79 & 0xFF0000 | (BYTE2(v79) << 24);
      }
      else
      {
        v83.i32[0] = v79 | v9;
        v83.i32[1] = v79 >> 8;
        int32x2_t v84 = vmul_s32((int32x2_t)vand_s8(v83, (int8x8_t)0xFF000000FFLL), v21);
        uint32x2_t v85 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v84, v20);
        int8x8_t v86 = vand_s8((int8x8_t)vsub_s32(v84, (int32x2_t)vshr_n_u32(vsra_n_u32(v85, v85, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
        v87.i64[0] = v86.u32[0];
        v87.i64[1] = v86.u32[1];
        int8x16_t v88 = (int8x16_t)vshlq_u64(v87, v22);
        unint64_t v82 = vorrq_s8(v88, (int8x16_t)vdupq_laneq_s64((int64x2_t)v88, 1)).u64[0] | (((BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                    - ((v16
                                                                                      + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                      * v19
                                                                                      + ((v16
                                                                                        + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                        * v19) >> 16)) >> 16)) << 16);
        unsigned int v80 = (unsigned __int16)(v80 - ((v16 + v80 * v19 + ((v16 + v80 * v19) >> 16)) >> 16));
      }
      unint64_t v89 = HIWORD(v82);
      if (HIWORD(v82))
      {
        unint64_t v90 = v82 | v80;
        if (v89 == 0xFFFF)
        {
          unsigned int v91 = bswap32(v90);
          *uint64_t v10 = HIWORD(v91);
          v10[1] = v91;
          v10[2] = bswap32(HIDWORD(v82)) >> 16;
          v10[3] = -1;
        }
        else
        {
          uint64_t v92 = v18;
          uint64_t v93 = v16;
          uint64_t v94 = v23;
          uint64_t v95 = v17;
          uint64_t v96 = v27;
          uint64_t v97 = v26;
          uint64_t v98 = v25;
          uint16x4_t result = (unint64_t)RGBA64_DplusDM(v10, v90, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v89 ^ 0xFFFF);
          uint64_t v25 = v98;
          uint64_t v26 = v97;
          uint64_t v27 = v96;
          unint64_t v17 = v95;
          uint64_t v23 = v94;
          uint64_t v16 = v93;
          uint64_t v18 = v92;
          int v19 = v156;
          uint64_t v8 = v157;
          uint64x2_t v22 = (uint64x2_t)xmmword_1850CDE00;
          int v9 = v160;
          LOBYTE(v7) = v161;
          int v6 = v162;
        }
      }
      v59 += 2;
      v10 += 4;
      if (!--v60) {
        goto LABEL_88;
      }
    }
    uint64_t v67 = (unsigned int *)(v63 + (v62 >> 4));
    if (v17 < v67) {
      uint64_t v67 = v17;
    }
    if (v67 < v8) {
      uint64_t v67 = v8;
    }
    unsigned int v68 = *v67;
    if (v26)
    {
      unint64_t v69 = (unsigned int *)(v63 + v25);
      if (v17 >= v69) {
        unint64_t v70 = v69;
      }
      else {
        unint64_t v70 = v17;
      }
      if (v70 < v8) {
        unint64_t v70 = v8;
      }
      unsigned int v71 = *v70;
      unint64_t v72 = (unsigned int *)((char *)v69 + (v62 >> 4));
      if (v17 < v72) {
        unint64_t v72 = v17;
      }
      if (v72 < v8) {
        unint64_t v72 = v8;
      }
      int v73 = v23[v163];
      unsigned int v65 = v65 - ((v73 & v65) >> v26) + ((v73 & v71) >> v26);
      unsigned int v68 = v68 - ((v73 & v68) >> v26) + ((v73 & *v72) >> v26);
    }
    int v74 = v23[*v59 & 0xF];
    unsigned int v75 = v65 - ((v74 & v65) >> v66);
    unsigned int v76 = (v74 & v68) >> v66;
LABEL_79:
    unsigned int v65 = v75 + v76;
    goto LABEL_80;
  }
  unint64_t v99 = v15 - 4;
  char v100 = 32 - v7;
  int v101 = v6 ^ 0xFFFF;
  int32x2_t v102 = vdup_n_s32(v6 ^ 0xFFFFu);
  int32x2_t v103 = vdup_n_s32(0x101u);
  uint64_t v158 = a5;
  int32x4_t v159 = (uint64_t *)(v11 + 16 * a3);
  uint64x2_t v104 = (uint64x2_t)xmmword_1850CDE00;
  do
  {
    uint64_t v105 = *(char **)(v164 + 32);
    unint64_t v106 = &v105[(v14 >> v13) * v12];
    int v155 = a6;
    if (v152 == 1)
    {
      uint64_t v107 = v14;
      if (a5 >= 1)
      {
        uint64_t v109 = v158;
        uint64_t v108 = v159;
        do
        {
          uint64_t v110 = *v108;
          v108 += 2;
          unint64_t v111 = &v106[v110];
          if (v99 < &v106[v110]) {
            unint64_t v111 = v99;
          }
          if (v111 < v105) {
            unint64_t v111 = v105;
          }
          unsigned int v112 = (*(_DWORD *)v111 << v7) | (*(_DWORD *)v111 >> v100);
          HIDWORD(v114) = HIBYTE(v112);
          LODWORD(v114) = v112;
          int v113 = v114 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v115 = ((unint64_t)(BYTE1(v112) | (BYTE1(v112) << 8)) << 32) | ((unint64_t)((v112 | v9) | ((v112 | v9) << 8)) << 48) | v112 & 0xFF0000 | (BYTE2(v112) << 24);
          }
          else
          {
            v116.i32[0] = v112 | v9;
            v116.i32[1] = v112 >> 8;
            int32x2_t v117 = vmul_s32((int32x2_t)vand_s8(v116, (int8x8_t)0xFF000000FFLL), v103);
            uint32x2_t v118 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v117, v102);
            int8x8_t v119 = vand_s8((int8x8_t)vsub_s32(v117, (int32x2_t)vshr_n_u32(vsra_n_u32(v118, v118, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v120.i64[0] = v119.u32[0];
            v120.i64[1] = v119.u32[1];
            int8x16_t v121 = (int8x16_t)vshlq_u64(v120, v104);
            unint64_t v115 = vorrq_s8(v121, (int8x16_t)vdupq_laneq_s64((int64x2_t)v121, 1)).u64[0] | (((BYTE2(v112) | (BYTE2(v112) << 8))
                                                                                           - (((BYTE2(v112) | (BYTE2(v112) << 8))
                                                                                             * v101
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v112) | (BYTE2(v112) << 8)) * v101 + 0x8000) >> 16)) >> 16)) << 16);
            int v113 = (unsigned __int16)(v113
                                    - ((v113 * v101 + 0x8000 + ((v113 * v101 + 0x8000) >> 16)) >> 16));
          }
          unsigned int v122 = bswap32(v115 | v113);
          *uint64_t v10 = HIWORD(v122);
          v10[1] = v122;
          v10[2] = bswap32(HIDWORD(v115)) >> 16;
          v10[3] = __rev16(HIWORD(v115));
          v10 += 4;
          --v109;
        }
        while (v109);
      }
    }
    else
    {
      uint64_t v107 = v14;
      uint64_t v124 = v158;
      uint64_t v123 = v159;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v125 = *v123;
          v123 += 2;
          uint64_t v126 = &v106[v125];
          if (v99 < &v106[v125]) {
            uint64_t v126 = v99;
          }
          if ((unint64_t)v126 < *(void *)(v164 + 32)) {
            uint64_t v126 = *(char **)(v164 + 32);
          }
          unsigned int v127 = (*(_DWORD *)v126 << v7) | (*(_DWORD *)v126 >> v100);
          HIDWORD(v129) = HIBYTE(v127);
          LODWORD(v129) = v127;
          unsigned int v128 = v129 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v130 = ((unint64_t)(BYTE1(v127) | (BYTE1(v127) << 8)) << 32) | ((unint64_t)((v127 | v9) | ((v127 | v9) << 8)) << 48) | v127 & 0xFF0000 | (BYTE2(v127) << 24);
          }
          else
          {
            v131.i32[0] = v127 | v9;
            v131.i32[1] = v127 >> 8;
            int32x2_t v132 = vmul_s32((int32x2_t)vand_s8(v131, (int8x8_t)0xFF000000FFLL), v103);
            uint32x2_t v133 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v132, v102);
            int8x8_t v134 = vand_s8((int8x8_t)vsub_s32(v132, (int32x2_t)vshr_n_u32(vsra_n_u32(v133, v133, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v135.i64[0] = v134.u32[0];
            v135.i64[1] = v134.u32[1];
            int8x16_t v136 = (int8x16_t)vshlq_u64(v135, v104);
            unint64_t v130 = vorrq_s8(v136, (int8x16_t)vdupq_laneq_s64((int64x2_t)v136, 1)).u64[0] | (((BYTE2(v127) | (BYTE2(v127) << 8))
                                                                                           - (((BYTE2(v127) | (BYTE2(v127) << 8))
                                                                                             * v101
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v127) | (BYTE2(v127) << 8)) * v101 + 0x8000) >> 16)) >> 16)) << 16);
            unsigned int v128 = (unsigned __int16)(v128 - ((v128 * v101 + 0x8000 + ((v128 * v101 + 0x8000) >> 16)) >> 16));
          }
          unint64_t v137 = HIWORD(v130);
          if (HIWORD(v130))
          {
            unint64_t v138 = v130 | v128;
            if (v137 == 0xFFFF)
            {
              unsigned int v139 = bswap32(v138);
              *uint64_t v10 = HIWORD(v139);
              v10[1] = v139;
              v10[2] = bswap32(HIDWORD(v130)) >> 16;
              v10[3] = -1;
            }
            else
            {
              uint16x4_t result = (unint64_t)RGBA64_DplusDM(v10, v138, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v137 ^ 0xFFFF);
              uint64x2_t v104 = (uint64x2_t)xmmword_1850CDE00;
              int v9 = v160;
              LOBYTE(v7) = v161;
              int v6 = v162;
            }
          }
          v10 += 4;
          --v124;
        }
        while (v124);
      }
    }
    uint64_t v12 = v150;
    v10 += 4 * v151;
    LOBYTE(v13) = v149;
    uint64_t v14 = v107 + v148;
    a6 = v155 - 1;
  }
  while (v155 != 1);
  return result;
}

unint64_t RGBA64_image_mark_RGB32(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = a2[1];
  int v154 = *a2;
  uint64_t v8 = *(unsigned int **)(result + 32);
  if (*(void *)(result + 40)) {
    int v9 = 0;
  }
  else {
    int v9 = 255;
  }
  uint64_t v10 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v153 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 15);
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v150 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v150 * a4;
  uint64_t v15 = (char *)v8
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  unint64_t v166 = result;
  uint64_t v16 = 0x8000;
  int v164 = *((unsigned __int16 *)a2 + 4);
  int v162 = v9;
  int v163 = a2[1];
  char v151 = v13;
  uint64_t v152 = v12;
  if (*(void *)(result + 176))
  {
    uint64_t v148 = *((void *)a2 + 11);
    uint64_t v147 = *((void *)a2 + 13);
    uint64_t v146 = ~(-1 << v13);
    char v145 = v13 - 4;
    unint64_t v17 = (unsigned int *)(v15 - 4);
    uint64_t v18 = (32 - v7);
    int v19 = v6 ^ 0xFFFF;
    int32x2_t v20 = vdup_n_s32(v6 ^ 0xFFFFu);
    uint64_t v143 = v11 + 16 * a3 + 8;
    uint64_t v144 = -v12;
    uint64_t v142 = a5;
    int32x2_t v21 = vdup_n_s32(0x101u);
    uint64x2_t v22 = (uint64x2_t)xmmword_1850CDE00;
    uint64_t v23 = BLEND8_21385;
    int32x4_t v159 = *(unsigned int **)(result + 32);
    int v158 = v6 ^ 0xFFFF;
    while (1)
    {
      if (((v147 - v14) | (v14 - v148)) < 0)
      {
        uint64_t v26 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v24 = ((v14 & (unint64_t)v146) >> v145) & 0xF;
        uint64_t v25 = (unint64_t)(v24 - 7) >= 9 ? v144 : v12;
        uint64_t v26 = weights_21383[v24] & 0xF;
      }
      uint64_t v27 = *(void *)(v166 + 32) + (v14 >> v13) * v12;
      int v156 = a6;
      uint64_t v155 = v14;
      if (v154 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v29 = v142;
        uint64_t v28 = (uint64_t *)v143;
        while (1)
        {
          uint64_t v30 = *(v28 - 1);
          uint64_t v31 = *v28;
          uint64_t v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30) {
            unint64_t v33 = (unsigned int *)(v27 + v30);
          }
          else {
            unint64_t v33 = v17;
          }
          if (v33 < v8) {
            unint64_t v33 = v8;
          }
          unsigned int v34 = bswap32(*v33);
          char v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0) {
            break;
          }
          if (v26)
          {
            uint64_t v46 = (unsigned int *)(v32 + v25);
            if ((unint64_t)v17 < v32 + v25) {
              uint64_t v46 = v17;
            }
            if (v46 < v8) {
              uint64_t v46 = v8;
            }
            int v47 = v23[v26];
            unsigned int v44 = v34 - ((v47 & v34) >> v26);
            unsigned int v45 = (bswap32(*v46) & v47) >> v26;
            goto LABEL_43;
          }
LABEL_44:
          unsigned int v48 = (v34 << v7) | (v34 >> v18);
          HIDWORD(v50) = HIBYTE(v48);
          LODWORD(v50) = v48;
          int v49 = v50 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v51 = ((unint64_t)(BYTE1(v48) | (BYTE1(v48) << 8)) << 32) | ((unint64_t)((v48 | v9) | ((v48 | v9) << 8)) << 48) | v48 & 0xFF0000 | (BYTE2(v48) << 24);
          }
          else
          {
            v52.i32[0] = v48 | v9;
            v52.i32[1] = v48 >> 8;
            int32x2_t v53 = vmul_s32((int32x2_t)vand_s8(v52, (int8x8_t)0xFF000000FFLL), v21);
            uint32x2_t v54 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v53, v20);
            int8x8_t v55 = vand_s8((int8x8_t)vsub_s32(v53, (int32x2_t)vshr_n_u32(vsra_n_u32(v54, v54, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v56.i64[0] = v55.u32[0];
            v56.i64[1] = v55.u32[1];
            int8x16_t v57 = (int8x16_t)vshlq_u64(v56, v22);
            unint64_t v51 = vorrq_s8(v57, (int8x16_t)vdupq_laneq_s64((int64x2_t)v57, 1)).u64[0] | (((BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                        - ((v16
                                                                                          + (BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                          * v19
                                                                                          + ((v16
                                                                                            + (BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                            * v19) >> 16)) >> 16)) << 16);
            int v49 = (unsigned __int16)(v49 - ((v16 + v49 * v19 + ((v16 + v49 * v19) >> 16)) >> 16));
          }
          v28 += 2;
          unsigned int v58 = bswap32(v51 | v49);
          *uint64_t v10 = HIWORD(v58);
          v10[1] = v58;
          v10[2] = bswap32(HIDWORD(v51)) >> 16;
          v10[3] = __rev16(HIWORD(v51));
          v10 += 4;
          if (!--v29) {
            goto LABEL_88;
          }
        }
        unint64_t v36 = (unsigned int *)(v32 + (v31 >> 4));
        if (v17 < v36) {
          unint64_t v36 = v17;
        }
        if (v36 < v8) {
          unint64_t v36 = v8;
        }
        unsigned int v37 = bswap32(*v36);
        if (v26)
        {
          uint64_t v38 = (unsigned int *)(v32 + v25);
          if (v17 >= v38) {
            uint64_t v39 = v38;
          }
          else {
            uint64_t v39 = v17;
          }
          if (v39 < v8) {
            uint64_t v39 = v8;
          }
          unsigned int v40 = bswap32(*v39);
          unint64_t v41 = (unsigned int *)((char *)v38 + (v31 >> 4));
          if (v17 < v41) {
            unint64_t v41 = v17;
          }
          if (v41 < v8) {
            unint64_t v41 = v8;
          }
          int v42 = v23[v26];
          uint16x4_t result = (v42 & v37) >> v26;
          unsigned int v34 = v34 - ((v42 & v34) >> v26) + ((v42 & v40) >> v26);
          unsigned int v37 = v37 - result + ((bswap32(*v41) & v42) >> v26);
        }
        int v43 = v23[*v28 & 0xF];
        unsigned int v44 = v34 - ((v43 & v34) >> v35);
        unsigned int v45 = (v43 & v37) >> v35;
LABEL_43:
        unsigned int v34 = v44 + v45;
        goto LABEL_44;
      }
LABEL_88:
      uint64_t v12 = v152;
      v10 += 4 * v153;
      LOBYTE(v13) = v151;
      uint64_t v14 = v155 + v150;
      a6 = v156 - 1;
      if (v156 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v165 = v26;
    uint64_t v60 = v142;
    uint64_t v59 = (uint64_t *)v143;
    while (1)
    {
      uint64_t v61 = *(v59 - 1);
      uint64_t v62 = *v59;
      uint64_t v63 = v27 + v61;
      if ((unint64_t)v17 >= v27 + v61) {
        unint64_t v64 = (unsigned int *)(v27 + v61);
      }
      else {
        unint64_t v64 = v17;
      }
      if (v64 < v8) {
        unint64_t v64 = v8;
      }
      unsigned int v65 = bswap32(*v64);
      char v66 = v62 & 0xF;
      if ((v62 & 0xF) != 0) {
        break;
      }
      if (v26)
      {
        unint64_t v77 = (unsigned int *)(v63 + v25);
        if ((unint64_t)v17 < v63 + v25) {
          unint64_t v77 = v17;
        }
        if (v77 < v8) {
          unint64_t v77 = v8;
        }
        int v78 = v23[v165];
        unsigned int v75 = v65 - ((v78 & v65) >> v26);
        unsigned int v76 = (bswap32(*v77) & v78) >> v26;
        goto LABEL_79;
      }
LABEL_80:
      unsigned int v79 = (v65 << v7) | (v65 >> v18);
      HIDWORD(v81) = HIBYTE(v79);
      LODWORD(v81) = v79;
      unsigned int v80 = v81 >> 24;
      if (v6 == 0xFFFF)
      {
        unint64_t v82 = ((unint64_t)(BYTE1(v79) | (BYTE1(v79) << 8)) << 32) | ((unint64_t)((v79 | v9) | ((v79 | v9) << 8)) << 48) | v79 & 0xFF0000 | (BYTE2(v79) << 24);
      }
      else
      {
        v83.i32[0] = v79 | v9;
        v83.i32[1] = v79 >> 8;
        int32x2_t v84 = vmul_s32((int32x2_t)vand_s8(v83, (int8x8_t)0xFF000000FFLL), v21);
        uint32x2_t v85 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v84, v20);
        int8x8_t v86 = vand_s8((int8x8_t)vsub_s32(v84, (int32x2_t)vshr_n_u32(vsra_n_u32(v85, v85, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
        v87.i64[0] = v86.u32[0];
        v87.i64[1] = v86.u32[1];
        int8x16_t v88 = (int8x16_t)vshlq_u64(v87, v22);
        unint64_t v82 = vorrq_s8(v88, (int8x16_t)vdupq_laneq_s64((int64x2_t)v88, 1)).u64[0] | (((BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                    - ((v16
                                                                                      + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                      * v19
                                                                                      + ((v16
                                                                                        + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                        * v19) >> 16)) >> 16)) << 16);
        unsigned int v80 = (unsigned __int16)(v80 - ((v16 + v80 * v19 + ((v16 + v80 * v19) >> 16)) >> 16));
      }
      unint64_t v89 = HIWORD(v82);
      if (HIWORD(v82))
      {
        unint64_t v90 = v82 | v80;
        if (v89 == 0xFFFF)
        {
          unsigned int v91 = bswap32(v90);
          *uint64_t v10 = HIWORD(v91);
          v10[1] = v91;
          v10[2] = bswap32(HIDWORD(v82)) >> 16;
          v10[3] = -1;
        }
        else
        {
          uint64_t v92 = v16;
          uint64_t v93 = v18;
          uint64_t v94 = v23;
          uint64_t v95 = v17;
          uint64_t v96 = v27;
          uint64_t v97 = v26;
          uint64_t v98 = v25;
          uint16x4_t result = (unint64_t)RGBA64_DplusDM(v10, v90, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v89 ^ 0xFFFF);
          uint64_t v25 = v98;
          uint64_t v26 = v97;
          uint64_t v27 = v96;
          unint64_t v17 = v95;
          uint64_t v23 = v94;
          uint64_t v18 = v93;
          uint64_t v16 = v92;
          int v19 = v158;
          uint64_t v8 = v159;
          uint64x2_t v22 = (uint64x2_t)xmmword_1850CDE00;
          int v9 = v162;
          LOBYTE(v7) = v163;
          int v6 = v164;
        }
      }
      v59 += 2;
      v10 += 4;
      if (!--v60) {
        goto LABEL_88;
      }
    }
    uint64_t v67 = (unsigned int *)(v63 + (v62 >> 4));
    if (v17 < v67) {
      uint64_t v67 = v17;
    }
    if (v67 < v8) {
      uint64_t v67 = v8;
    }
    unsigned int v68 = bswap32(*v67);
    if (v26)
    {
      unint64_t v69 = (unsigned int *)(v63 + v25);
      if (v17 >= v69) {
        unint64_t v70 = v69;
      }
      else {
        unint64_t v70 = v17;
      }
      if (v70 < v8) {
        unint64_t v70 = v8;
      }
      unsigned int v71 = bswap32(*v70);
      unint64_t v72 = (unsigned int *)((char *)v69 + (v62 >> 4));
      if (v17 < v72) {
        unint64_t v72 = v17;
      }
      if (v72 < v8) {
        unint64_t v72 = v8;
      }
      int v73 = v23[v165];
      unsigned int v65 = v65 - ((v73 & v65) >> v26) + ((v73 & v71) >> v26);
      unsigned int v68 = v68 - ((v73 & v68) >> v26) + ((bswap32(*v72) & v73) >> v26);
    }
    int v74 = v23[*v59 & 0xF];
    unsigned int v75 = v65 - ((v74 & v65) >> v66);
    unsigned int v76 = (v74 & v68) >> v66;
LABEL_79:
    unsigned int v65 = v75 + v76;
    goto LABEL_80;
  }
  unint64_t v99 = (unsigned int *)(v15 - 4);
  char v100 = 32 - v7;
  int v101 = v6 ^ 0xFFFF;
  int32x2_t v102 = vdup_n_s32(v6 ^ 0xFFFFu);
  int32x2_t v103 = vdup_n_s32(0x101u);
  uint64_t v160 = a5;
  int v161 = (uint64_t *)(v11 + 16 * a3);
  uint64x2_t v104 = (uint64x2_t)xmmword_1850CDE00;
  do
  {
    uint64_t v105 = *(unsigned int **)(v166 + 32);
    unint64_t v106 = (char *)v105 + (v14 >> v13) * v12;
    int v157 = a6;
    if (v154 == 1)
    {
      uint64_t v107 = v14;
      if (a5 >= 1)
      {
        uint64_t v109 = v160;
        uint64_t v108 = v161;
        do
        {
          uint64_t v110 = *v108;
          v108 += 2;
          unint64_t v111 = (unsigned int *)&v106[v110];
          if (v99 < (unsigned int *)&v106[v110]) {
            unint64_t v111 = v99;
          }
          if (v111 < v105) {
            unint64_t v111 = v105;
          }
          unsigned int v112 = bswap32(*v111);
          unsigned int v113 = (v112 << v7) | (v112 >> v100);
          HIDWORD(v115) = HIBYTE(v113);
          LODWORD(v115) = v113;
          int v114 = v115 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v116 = ((unint64_t)(BYTE1(v113) | (BYTE1(v113) << 8)) << 32) | ((unint64_t)((v113 | v9) | ((v113 | v9) << 8)) << 48) | v113 & 0xFF0000 | (BYTE2(v113) << 24);
          }
          else
          {
            v117.i32[0] = v113 | v9;
            v117.i32[1] = v113 >> 8;
            int32x2_t v118 = vmul_s32((int32x2_t)vand_s8(v117, (int8x8_t)0xFF000000FFLL), v103);
            uint32x2_t v119 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v118, v102);
            int8x8_t v120 = vand_s8((int8x8_t)vsub_s32(v118, (int32x2_t)vshr_n_u32(vsra_n_u32(v119, v119, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v121.i64[0] = v120.u32[0];
            v121.i64[1] = v120.u32[1];
            int8x16_t v122 = (int8x16_t)vshlq_u64(v121, v104);
            unint64_t v116 = vorrq_s8(v122, (int8x16_t)vdupq_laneq_s64((int64x2_t)v122, 1)).u64[0] | (((BYTE2(v113) | (BYTE2(v113) << 8))
                                                                                           - (((BYTE2(v113) | (BYTE2(v113) << 8))
                                                                                             * v101
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v113) | (BYTE2(v113) << 8)) * v101 + 0x8000) >> 16)) >> 16)) << 16);
            int v114 = (unsigned __int16)(v114
                                    - ((v114 * v101 + 0x8000 + ((v114 * v101 + 0x8000) >> 16)) >> 16));
          }
          unsigned int v123 = bswap32(v116 | v114);
          *uint64_t v10 = HIWORD(v123);
          v10[1] = v123;
          v10[2] = bswap32(HIDWORD(v116)) >> 16;
          v10[3] = __rev16(HIWORD(v116));
          v10 += 4;
          --v109;
        }
        while (v109);
      }
    }
    else
    {
      uint64_t v107 = v14;
      uint64_t v125 = v160;
      uint64_t v124 = v161;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v126 = *v124;
          v124 += 2;
          unsigned int v127 = (unsigned int *)&v106[v126];
          if (v99 < (unsigned int *)&v106[v126]) {
            unsigned int v127 = v99;
          }
          if ((unint64_t)v127 < *(void *)(v166 + 32)) {
            unsigned int v127 = *(unsigned int **)(v166 + 32);
          }
          unsigned int v128 = bswap32(*v127);
          unsigned int v129 = (v128 << v7) | (v128 >> v100);
          HIDWORD(v131) = HIBYTE(v129);
          LODWORD(v131) = v129;
          unsigned int v130 = v131 >> 24;
          if (v6 == 0xFFFF)
          {
            unint64_t v132 = ((unint64_t)(BYTE1(v129) | (BYTE1(v129) << 8)) << 32) | ((unint64_t)((v129 | v9) | ((v129 | v9) << 8)) << 48) | v129 & 0xFF0000 | (BYTE2(v129) << 24);
          }
          else
          {
            v133.i32[0] = v129 | v9;
            v133.i32[1] = v129 >> 8;
            int32x2_t v134 = vmul_s32((int32x2_t)vand_s8(v133, (int8x8_t)0xFF000000FFLL), v103);
            uint32x2_t v135 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v134, v102);
            int8x8_t v136 = vand_s8((int8x8_t)vsub_s32(v134, (int32x2_t)vshr_n_u32(vsra_n_u32(v135, v135, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v137.i64[0] = v136.u32[0];
            v137.i64[1] = v136.u32[1];
            int8x16_t v138 = (int8x16_t)vshlq_u64(v137, v104);
            unint64_t v132 = vorrq_s8(v138, (int8x16_t)vdupq_laneq_s64((int64x2_t)v138, 1)).u64[0] | (((BYTE2(v129) | (BYTE2(v129) << 8))
                                                                                           - (((BYTE2(v129) | (BYTE2(v129) << 8))
                                                                                             * v101
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v129) | (BYTE2(v129) << 8)) * v101 + 0x8000) >> 16)) >> 16)) << 16);
            unsigned int v130 = (unsigned __int16)(v130 - ((v130 * v101 + 0x8000 + ((v130 * v101 + 0x8000) >> 16)) >> 16));
          }
          unint64_t v139 = HIWORD(v132);
          if (HIWORD(v132))
          {
            unint64_t v140 = v132 | v130;
            if (v139 == 0xFFFF)
            {
              unsigned int v141 = bswap32(v140);
              *uint64_t v10 = HIWORD(v141);
              v10[1] = v141;
              v10[2] = bswap32(HIDWORD(v132)) >> 16;
              v10[3] = -1;
            }
            else
            {
              uint16x4_t result = (unint64_t)RGBA64_DplusDM(v10, v140, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v139 ^ 0xFFFF);
              uint64x2_t v104 = (uint64x2_t)xmmword_1850CDE00;
              int v9 = v162;
              LOBYTE(v7) = v163;
              int v6 = v164;
            }
          }
          v10 += 4;
          --v125;
        }
        while (v125);
      }
    }
    uint64_t v12 = v152;
    v10 += 4 * v153;
    LOBYTE(v13) = v151;
    uint64_t v14 = v107 + v150;
    a6 = v157 - 1;
  }
  while (v157 != 1);
  return result;
}

unint64_t RGBA64_image_mark_RGB24(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v130 = *a2;
  int v7 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v129 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v126 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v126 * a4;
  uint64_t v12 = *(unsigned __int8 **)(result + 32);
  uint64_t v13 = &v12[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  unint64_t v141 = result;
  uint64_t v14 = 0x8000;
  char v127 = v10;
  uint64_t v128 = v9;
  if (*(void *)(result + 176))
  {
    uint64_t v15 = a3;
    uint64_t v124 = *((void *)a2 + 11);
    uint64_t v123 = *((void *)a2 + 13);
    uint64_t v122 = ~(-1 << v10);
    char v121 = v10 - 4;
    uint64_t v16 = v13 - 3;
    uint64_t v17 = v6 ^ 0xFFFFu;
    unint64_t v18 = (unint64_t)(~(0xFFFF * v17 + 0x8000 + ((0xFFFF * v17 + 0x8000) >> 16)) >> 16) << 48;
    uint64_t v119 = a5;
    uint64_t v120 = -v9;
    uint64_t v118 = v8 + 16 * v15 + 8;
    int v19 = BLEND8_21385;
    int8x8_t v136 = *(unsigned __int8 **)(result + 32);
    int v135 = *((unsigned __int16 *)a2 + 4);
    while (1)
    {
      if (((v123 - v11) | (v11 - v124)) < 0)
      {
        uint64_t v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v11 & (unint64_t)v122) >> v121) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v120 : v9;
        uint64_t v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *(void *)(v141 + 32) + (v11 >> v10) * v9;
      int v133 = a6;
      uint64_t v131 = v11;
      if (v130 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v24 = (uint64_t *)v118;
        uint64_t v25 = v119;
        while (1)
        {
          uint64_t v26 = *(v24 - 1);
          uint64_t v27 = *v24;
          uint64_t v28 = v23 + v26;
          if ((unint64_t)v16 >= v23 + v26) {
            uint64_t v29 = (unsigned __int8 *)(v23 + v26);
          }
          else {
            uint64_t v29 = v16;
          }
          if (v29 < v12) {
            uint64_t v29 = v12;
          }
          unsigned int v30 = (*v29 << 24) | (v29[1] << 16) | (v29[2] << 8);
          char v31 = v27 & 0xF;
          if ((v27 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            int v42 = (unsigned __int8 *)(v28 + v21);
            if ((unint64_t)v16 < v28 + v21) {
              int v42 = v16;
            }
            if (v42 < v12) {
              int v42 = v12;
            }
            unsigned int v43 = v19[v22];
            unsigned int v40 = v30 - ((v43 & v30) >> v22);
            unsigned int v41 = (((*v42 << 24) | (v42[1] << 16) | (v42[2] << 8)) & v43) >> v22;
            goto LABEL_40;
          }
LABEL_41:
          v24 += 2;
          int v44 = HIBYTE(v30) | (HIBYTE(v30) << 8);
          uint64_t v45 = BYTE1(v30) | (BYTE1(v30) << 8);
          unint64_t v46 = v30 & 0xFF0000 | (BYTE2(v30) << 24) | (unint64_t)(v45 << 32);
          unint64_t v47 = (((BYTE2(v30) | (BYTE2(v30) << 8))
                - ((v14
                  + (BYTE2(v30) | (BYTE2(v30) << 8)) * v17
                  + ((v14 + (BYTE2(v30) | (BYTE2(v30) << 8)) * v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v45 - ((v14 + v45 * v17 + ((v14 + v45 * v17) >> 16)) >> 16)) << 32);
          if (v6 == 0xFFFF)
          {
            unint64_t v47 = v46;
            unint64_t v48 = 0xFFFF000000000000;
          }
          else
          {
            int v44 = (unsigned __int16)(v44
                                   - ((v14 + v44 * v17 + ((v14 + v44 * v17) >> 16)) >> 16));
            unint64_t v48 = v18;
          }
          *int v7 = bswap32(v47 | v44) >> 16;
          v7[1] = bswap32(v47);
          double v7[2] = __rev16(HIDWORD(v47));
          v7[3] = __rev16(HIWORD(v48));
          v7 += 4;
          if (!--v25) {
            goto LABEL_88;
          }
        }
        uint64_t v32 = (unsigned __int8 *)(v28 + (v27 >> 4));
        if (v16 < v32) {
          uint64_t v32 = v16;
        }
        if (v32 < v12) {
          uint64_t v32 = v12;
        }
        uint16x4_t result = v32[1];
        int v33 = (*v32 << 24) | (result << 16) | (v32[2] << 8);
        if (v22)
        {
          unsigned int v34 = (unsigned __int8 *)(v28 + v21);
          if (v16 >= v34) {
            char v35 = v34;
          }
          else {
            char v35 = v16;
          }
          if (v35 < v12) {
            char v35 = v12;
          }
          int v36 = (*v35 << 24) | (v35[1] << 16) | (v35[2] << 8);
          unsigned int v37 = &v34[v27 >> 4];
          if (v16 < v37) {
            unsigned int v37 = v16;
          }
          if (v37 < v12) {
            unsigned int v37 = v12;
          }
          unsigned int v38 = v19[v22];
          uint16x4_t result = (v38 & v33) >> v22;
          unsigned int v30 = v30 - ((v38 & v30) >> v22) + ((v38 & v36) >> v22);
          int v33 = v33 - result + ((((*v37 << 24) | (v37[1] << 16) | (v37[2] << 8)) & v38) >> v22);
        }
        int v39 = v19[*v24 & 0xF];
        unsigned int v40 = v30 - ((v39 & v30) >> v31);
        unsigned int v41 = (v39 & v33) >> v31;
LABEL_40:
        unsigned int v30 = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      uint64_t v9 = v128;
      v7 += 4 * v129;
      LOBYTE(v10) = v127;
      uint64_t v11 = v131 + v126;
      a6 = v133 - 1;
      if (v133 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_88;
    }
    uint64_t v139 = v22;
    int v49 = (uint64_t *)v118;
    uint64_t v50 = v119;
    uint64_t v137 = v21;
    while (1)
    {
      uint64_t v51 = *(v49 - 1);
      uint64_t v52 = *v49;
      uint64_t v53 = v23 + v51;
      if ((unint64_t)v16 >= v23 + v51) {
        uint32x2_t v54 = (unsigned __int8 *)(v23 + v51);
      }
      else {
        uint32x2_t v54 = v16;
      }
      if (v54 < v12) {
        uint32x2_t v54 = v12;
      }
      unsigned int v55 = (*v54 << 24) | (v54[1] << 16) | (v54[2] << 8);
      char v56 = v52 & 0xF;
      if ((v52 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        uint64_t v67 = (unsigned __int8 *)(v53 + v21);
        if ((unint64_t)v16 < v53 + v21) {
          uint64_t v67 = v16;
        }
        if (v67 < v12) {
          uint64_t v67 = v12;
        }
        unsigned int v68 = v19[v139];
        unsigned int v65 = v55 - ((v68 & v55) >> v22);
        unsigned int v66 = (((*v67 << 24) | (v67[1] << 16) | (v67[2] << 8)) & v68) >> v22;
        goto LABEL_76;
      }
LABEL_77:
      unsigned int v69 = HIBYTE(v55) | (HIBYTE(v55) << 8);
      uint64_t v70 = BYTE1(v55) | (BYTE1(v55) << 8);
      unint64_t v71 = v55 & 0xFF0000 | (BYTE2(v55) << 24) | (unint64_t)(v70 << 32);
      unint64_t v72 = (((BYTE2(v55) | (BYTE2(v55) << 8))
            - ((v14
              + (BYTE2(v55) | (BYTE2(v55) << 8)) * v17
              + ((v14 + (BYTE2(v55) | (BYTE2(v55) << 8)) * v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v70 - ((v14 + v70 * v17 + ((v14 + v70 * v17) >> 16)) >> 16)) << 32);
      if (v6 == 0xFFFF) {
        uint64_t v73 = v69;
      }
      else {
        uint64_t v73 = (unsigned __int16)(v69
      }
                               - ((v14 + v69 * v17 + ((v14 + v69 * v17) >> 16)) >> 16));
      if (v6 == 0xFFFF)
      {
        unint64_t v72 = v71;
        unint64_t v74 = 0xFFFF000000000000;
      }
      else
      {
        unint64_t v74 = v18;
      }
      if (HIWORD(v74))
      {
        unint64_t v75 = v72 | v73;
        if (HIWORD(v74) == 0xFFFF)
        {
          unsigned int v76 = bswap32(v75);
          *int v7 = HIWORD(v76);
          v7[1] = v76;
          double v7[2] = __rev16(HIDWORD(v72));
          v7[3] = -1;
        }
        else
        {
          unint64_t v77 = v18;
          int v78 = v19;
          unsigned int v79 = v16;
          uint64_t v80 = v23;
          uint64_t v81 = v22;
          uint64_t v82 = v14;
          uint64_t v83 = v17;
          uint16x4_t result = (unint64_t)RGBA64_DplusDM(v7, v75 | v74, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), ((v75 | v74) >> 48) ^ 0xFFFF);
          uint64_t v17 = v83;
          uint64_t v14 = v82;
          uint64_t v22 = v81;
          uint64_t v23 = v80;
          uint64_t v16 = v79;
          int v19 = v78;
          uint64_t v21 = v137;
          unint64_t v18 = v77;
          int v6 = v135;
          uint64_t v12 = v136;
        }
      }
      v49 += 2;
      v7 += 4;
      if (!--v50) {
        goto LABEL_88;
      }
    }
    int8x16_t v57 = (unsigned __int8 *)(v53 + (v52 >> 4));
    if (v16 < v57) {
      int8x16_t v57 = v16;
    }
    if (v57 < v12) {
      int8x16_t v57 = v12;
    }
    int v58 = (*v57 << 24) | (v57[1] << 16) | (v57[2] << 8);
    if (v22)
    {
      uint64_t v59 = (unsigned __int8 *)(v53 + v21);
      if (v16 >= v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = v16;
      }
      if (v60 < v12) {
        uint64_t v60 = v12;
      }
      int v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
      uint64_t v62 = &v59[v52 >> 4];
      if (v16 < v62) {
        uint64_t v62 = v16;
      }
      if (v62 < v12) {
        uint64_t v62 = v12;
      }
      unsigned int v63 = v19[v139];
      unsigned int v55 = v55 - ((v63 & v55) >> v22) + ((v63 & v61) >> v22);
      int v58 = v58 - ((v63 & v58) >> v22) + ((((*v62 << 24) | (v62[1] << 16) | (v62[2] << 8)) & v63) >> v22);
    }
    int v64 = v19[*v49 & 0xF];
    unsigned int v65 = v55 - ((v64 & v55) >> v56);
    unsigned int v66 = (v64 & v58) >> v56;
LABEL_76:
    unsigned int v55 = v65 + v66;
    goto LABEL_77;
  }
  int32x2_t v84 = v13 - 3;
  int v85 = v6 ^ 0xFFFF;
  uint64_t v138 = a5;
  unint64_t v140 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    int8x8_t v86 = *(unsigned __int8 **)(v141 + 32);
    uint64x2_t v87 = &v86[(v11 >> v10) * v9];
    int v134 = a6;
    uint64_t v132 = v11;
    if (v130 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v89 = v138;
        int8x16_t v88 = v140;
        do
        {
          uint64_t v90 = *v88;
          v88 += 2;
          unsigned int v91 = &v87[v90];
          if (v84 < &v87[v90]) {
            unsigned int v91 = v84;
          }
          if (v91 < v86) {
            unsigned int v91 = v86;
          }
          int v92 = *v91;
          int v93 = v91[1];
          uint64_t v94 = v91[2] | (v91[2] << 8);
          unint64_t v95 = v94 << 32;
          int v96 = (v92 << 8) | v92;
          int v97 = v96 | (v93 << 16) | (v93 << 24);
          uint16x4_t result = v94 * v85 + 0x8000 + ((v94 * v85 + 0x8000) >> 16);
          unint64_t v98 = (((v93 | (v93 << 8))
                - (((v93 | (v93 << 8)) * v85 + 0x8000 + (((v93 | (v93 << 8)) * v85 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v94 - WORD1(result)) << 32);
          int v99 = (unsigned __int16)(v96 - ((v96 * v85 + 0x8000 + ((v96 * v85 + 0x8000) >> 16)) >> 16));
          if (v6 == 0xFFFF)
          {
            int v99 = v97;
            unint64_t v98 = v95;
            unint64_t v100 = 0xFFFF000000000000;
          }
          else
          {
            unint64_t v100 = (unint64_t)(~(0xFFFF * v85 + 0x8000 + ((0xFFFF * v85 + 0x8000) >> 16)) >> 16) << 48;
          }
          unsigned int v101 = bswap32(v98 | v99);
          *int v7 = HIWORD(v101);
          v7[1] = v101;
          double v7[2] = __rev16(HIDWORD(v98));
          v7[3] = __rev16(HIWORD(v100));
          v7 += 4;
          --v89;
        }
        while (v89);
      }
    }
    else
    {
      uint64_t v103 = v138;
      int32x2_t v102 = v140;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v104 = *v102;
          v102 += 2;
          uint64_t v105 = &v87[v104];
          if (v84 < &v87[v104]) {
            uint64_t v105 = v84;
          }
          if ((unint64_t)v105 < *(void *)(v141 + 32)) {
            uint64_t v105 = *(unsigned __int8 **)(v141 + 32);
          }
          int v106 = *v105;
          int v107 = v105[1];
          uint64_t v108 = v105[2] | (v105[2] << 8);
          unint64_t v109 = v108 << 32;
          int v110 = (v106 << 8) | v106;
          unsigned int v111 = v110 | (v107 << 16) | (v107 << 24);
          unint64_t v112 = (((v107 | (v107 << 8))
                 - (((v107 | (v107 << 8)) * v85 + 0x8000 + (((v107 | (v107 << 8)) * v85 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v108 - ((v108 * v85 + 0x8000 + ((v108 * v85 + 0x8000) >> 16)) >> 16)) << 32);
          unsigned int v113 = (unsigned __int16)(v110 - ((v110 * v85 + 0x8000 + ((v110 * v85 + 0x8000) >> 16)) >> 16));
          if (v6 == 0xFFFF) {
            uint64_t v114 = v111;
          }
          else {
            uint64_t v114 = v113;
          }
          if (v6 == 0xFFFF)
          {
            unint64_t v112 = v109;
            unint64_t v115 = 0xFFFF000000000000;
          }
          else
          {
            unint64_t v115 = (unint64_t)(~(0xFFFF * v85 + 0x8000 + ((0xFFFF * v85 + 0x8000) >> 16)) >> 16) << 48;
          }
          if (HIWORD(v115))
          {
            unint64_t v116 = v112 | v114;
            if (HIWORD(v115) == 0xFFFF)
            {
              unsigned int v117 = bswap32(v116);
              *int v7 = HIWORD(v117);
              v7[1] = v117;
              double v7[2] = __rev16(HIDWORD(v112));
              v7[3] = -1;
            }
            else
            {
              uint16x4_t result = (unint64_t)RGBA64_DplusDM(v7, v116 | v115, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), ((v116 | v115) >> 48) ^ 0xFFFF);
            }
          }
          v7 += 4;
          --v103;
        }
        while (v103);
      }
    }
    uint64_t v9 = v128;
    v7 += 4 * v129;
    LOBYTE(v10) = v127;
    uint64_t v11 = v132 + v126;
    a6 = v134 - 1;
  }
  while (v134 != 1);
  return result;
}

unint64_t RGBA64_image_mark_W8(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v116 = *a2;
  int v7 = (unsigned __int16 *)*((void *)a2 + 2);
  uint64_t v115 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v8 = *((void *)a2 + 16);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v112 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 5) + v112 * a4;
  uint64_t v12 = *(unsigned __int8 **)(result + 32);
  uint64_t v13 = &v12[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  unint64_t v126 = result;
  char v113 = v10;
  uint64_t v114 = v9;
  if (*(void *)(result + 176))
  {
    uint64_t v14 = a3;
    uint64_t v110 = *((void *)a2 + 11);
    uint64_t v109 = *((void *)a2 + 13);
    uint64_t v108 = ~(-1 << v10);
    char v107 = v10 - 4;
    uint64_t v106 = -v9;
    uint64_t v15 = v13 - 4;
    int v16 = v6 ^ 0xFFFF;
    unint64_t v17 = (unint64_t)(255 - ((255 * v16 + 0x8000 + ((255 * v16 + 0x8000) >> 16)) >> 16)) << 48;
    uint64_t v104 = v8 + 16 * v14 + 8;
    uint64_t v105 = a5;
    unint64_t v18 = BLEND8_21385;
    int v123 = *((unsigned __int16 *)a2 + 4);
    int v121 = v6 ^ 0xFFFF;
    while (1)
    {
      int v119 = a6;
      if (((v109 - v11) | (v11 - v110)) < 0)
      {
        uint64_t v21 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = ((v11 & (unint64_t)v108) >> v107) & 0xF;
        uint64_t v20 = (unint64_t)(v19 - 7) >= 9 ? v106 : v9;
        uint64_t v21 = weights_21383[v19] & 0xF;
      }
      uint64_t v117 = v11;
      uint64_t v22 = *(void *)(v126 + 32) + (v11 >> v10) * v9;
      if (v116 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v23 = (uint64_t *)v104;
        uint64_t v24 = v105;
        while (1)
        {
          uint64_t v25 = *(v23 - 1);
          uint64_t v26 = *v23;
          uint64_t v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25) {
            uint64_t v28 = (unsigned __int8 *)(v22 + v25);
          }
          else {
            uint64_t v28 = v15;
          }
          if (v28 < v12) {
            uint64_t v28 = v12;
          }
          unsigned int v29 = *v28;
          char v30 = v26 & 0xF;
          if ((v26 & 0xF) != 0) {
            break;
          }
          if (v21)
          {
            unsigned int v40 = (unsigned __int8 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20) {
              unsigned int v40 = v15;
            }
            if (v40 < v12) {
              unsigned int v40 = v12;
            }
            int v41 = v18[v21];
            v29 -= (v41 & v29) >> v21;
            unsigned int v39 = (v41 & *v40) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          unsigned int v29 = v29;
          unint64_t v42 = (0x100010001 * (v29 | (v29 << 8))) | 0xFFFF000000000000;
          uint64_t v43 = (unsigned __int16)(v29 - ((v29 * v16 + 0x8000 + ((v29 * v16 + 0x8000) >> 16)) >> 16));
          unint64_t v44 = ((unint64_t)v43 << 16) | (v43 << 32) | v17 | v43;
          if (v6 == 0xFFFF) {
            unint64_t v44 = v42;
          }
          unint64_t v45 = HIDWORD(v44);
          unint64_t v46 = HIWORD(v44);
          unsigned int v47 = bswap32(v44);
          *int v7 = HIWORD(v47);
          v7[1] = v47;
          double v7[2] = bswap32(v45) >> 16;
          v7[3] = __rev16(v46);
          v7 += 4;
          if (!--v24) {
            goto LABEL_84;
          }
        }
        char v31 = (unsigned __int8 *)(v27 + (v26 >> 4));
        if (v15 < v31) {
          char v31 = v15;
        }
        if (v31 < v12) {
          char v31 = v12;
        }
        int v32 = *v31;
        if (v21)
        {
          int v33 = (unsigned __int8 *)(v27 + v20);
          if (v15 >= v33) {
            unsigned int v34 = v33;
          }
          else {
            unsigned int v34 = v15;
          }
          if (v34 < v12) {
            unsigned int v34 = v12;
          }
          unsigned int v35 = *v34;
          int v36 = &v33[v26 >> 4];
          if (v15 < v36) {
            int v36 = v15;
          }
          if (v36 < v12) {
            int v36 = v12;
          }
          int v37 = v18[v21];
          uint16x4_t result = (v37 & v32) >> v21;
          unsigned int v29 = v29 - ((v37 & v29) >> v21) + ((v37 & v35) >> v21);
          int v32 = v32 - result + ((v37 & *v36) >> v21);
        }
        int v38 = v18[*v23 & 0xF];
        v29 -= (v38 & v29) >> v30;
        unsigned int v39 = (v38 & v32) >> v30;
LABEL_40:
        LOBYTE(v29) = v29 + v39;
        goto LABEL_41;
      }
LABEL_84:
      uint64_t v9 = v114;
      v7 += 4 * v115;
      LOBYTE(v10) = v113;
      uint64_t v11 = v117 + v112;
      a6 = v119 - 1;
      if (v119 == 1) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_84;
    }
    uint64_t v124 = v21;
    unint64_t v48 = (uint64_t *)v104;
    uint64_t v49 = v105;
    while (1)
    {
      uint64_t v50 = *(v48 - 1);
      uint64_t v51 = *v48;
      uint64_t v52 = v22 + v50;
      if ((unint64_t)v15 >= v22 + v50) {
        uint64_t v53 = (unsigned __int8 *)(v22 + v50);
      }
      else {
        uint64_t v53 = v15;
      }
      if (v53 < v12) {
        uint64_t v53 = v12;
      }
      unsigned int v54 = *v53;
      char v55 = v51 & 0xF;
      if ((v51 & 0xF) != 0) {
        break;
      }
      if (v21)
      {
        unsigned int v65 = (unsigned __int8 *)(v52 + v20);
        if ((unint64_t)v15 < v52 + v20) {
          unsigned int v65 = v15;
        }
        if (v65 < v12) {
          unsigned int v65 = v12;
        }
        int v66 = v18[v124];
        v54 -= (v66 & v54) >> v21;
        unsigned int v64 = (v66 & *v65) >> v21;
        goto LABEL_75;
      }
LABEL_76:
      unsigned int v54 = v54;
      unint64_t v67 = (0x100010001 * (v54 | (v54 << 8))) | 0xFFFF000000000000;
      uint64_t v68 = (unsigned __int16)(v54 - ((v54 * v16 + 0x8000 + ((v54 * v16 + 0x8000) >> 16)) >> 16));
      unint64_t v69 = ((unint64_t)v68 << 16) | (v68 << 32) | v17 | v68;
      if (v6 == 0xFFFF) {
        unint64_t v70 = v67;
      }
      else {
        unint64_t v70 = v69;
      }
      unint64_t v71 = HIWORD(v70);
      if (HIWORD(v70))
      {
        if (v71 == 0xFFFF)
        {
          unsigned int v72 = bswap32(v70);
          *int v7 = HIWORD(v72);
          v7[1] = v72;
          double v7[2] = bswap32(HIDWORD(v70)) >> 16;
          v7[3] = -1;
        }
        else
        {
          unint64_t v73 = v17;
          uint64_t v74 = v21;
          unint64_t v75 = v18;
          uint64_t v76 = v20;
          uint16x4_t result = (unint64_t)RGBA64_DplusDM(v7, v70, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v71 ^ 0xFFFF);
          uint64_t v20 = v76;
          unint64_t v18 = v75;
          uint64_t v21 = v74;
          unint64_t v17 = v73;
          int v16 = v121;
          int v6 = v123;
        }
      }
      v48 += 2;
      v7 += 4;
      if (!--v49) {
        goto LABEL_84;
      }
    }
    char v56 = (unsigned __int8 *)(v52 + (v51 >> 4));
    if (v15 < v56) {
      char v56 = v15;
    }
    if (v56 < v12) {
      char v56 = v12;
    }
    unsigned int v57 = *v56;
    if (v21)
    {
      int v58 = (unsigned __int8 *)(v52 + v20);
      if (v15 >= v58) {
        uint64_t v59 = v58;
      }
      else {
        uint64_t v59 = v15;
      }
      if (v59 < v12) {
        uint64_t v59 = v12;
      }
      unsigned int v60 = *v59;
      int v61 = &v58[v51 >> 4];
      if (v15 < v61) {
        int v61 = v15;
      }
      if (v61 < v12) {
        int v61 = v12;
      }
      int v62 = v18[v124];
      unsigned int v54 = v54 - ((v62 & v54) >> v21) + ((v62 & v60) >> v21);
      unsigned int v57 = v57 - ((v62 & v57) >> v21) + ((v62 & *v61) >> v21);
    }
    int v63 = v18[*v48 & 0xF];
    v54 -= (v63 & v54) >> v55;
    unsigned int v64 = (v63 & v57) >> v55;
LABEL_75:
    LOBYTE(v54) = v54 + v64;
    goto LABEL_76;
  }
  uint64_t v125 = (uint64_t *)(v8 + 16 * a3);
  unint64_t v77 = v13 - 4;
  int v78 = v6 ^ 0xFFFF;
  unint64_t v79 = (unint64_t)(255 - ((255 * v78 + 0x8000 + ((255 * v78 + 0x8000) >> 16)) >> 16)) << 48;
  uint64_t v122 = a5;
  do
  {
    uint64_t v80 = *(unsigned __int8 **)(v126 + 32);
    uint64_t v81 = &v80[(v11 >> v10) * v9];
    int v120 = a6;
    uint64_t v118 = v11;
    if (v116 == 1)
    {
      if (a5 >= 1)
      {
        uint64_t v82 = v125;
        uint64_t v83 = v122;
        do
        {
          uint64_t v84 = *v82;
          v82 += 2;
          int v85 = &v81[v84];
          if (v77 < &v81[v84]) {
            int v85 = v77;
          }
          if (v85 < v80) {
            int v85 = v80;
          }
          int v86 = *v85;
          unint64_t v87 = (0x100010001 * (v86 | (v86 << 8))) | 0xFFFF000000000000;
          uint64_t v88 = (unsigned __int16)(v86 - ((v86 * v78 + 0x8000 + ((v86 * v78 + 0x8000) >> 16)) >> 16));
          unint64_t v89 = ((unint64_t)v88 << 16) | (v88 << 32) | v79 | v88;
          if (v6 == 0xFFFF) {
            unint64_t v89 = v87;
          }
          unint64_t v90 = HIDWORD(v89);
          unint64_t v91 = HIWORD(v89);
          unsigned int v92 = bswap32(v89);
          *int v7 = HIWORD(v92);
          v7[1] = v92;
          double v7[2] = bswap32(v90) >> 16;
          v7[3] = __rev16(v91);
          v7 += 4;
          --v83;
        }
        while (v83);
      }
    }
    else
    {
      int v93 = v125;
      uint64_t v94 = v122;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v95 = *v93;
          v93 += 2;
          int v96 = &v81[v95];
          if (v77 < &v81[v95]) {
            int v96 = v77;
          }
          if ((unint64_t)v96 < *(void *)(v126 + 32)) {
            int v96 = *(unsigned __int8 **)(v126 + 32);
          }
          int v97 = *v96;
          unint64_t v98 = (0x100010001 * (v97 | (v97 << 8))) | 0xFFFF000000000000;
          uint64_t v99 = (unsigned __int16)(v97 - ((v97 * v78 + 0x8000 + ((v97 * v78 + 0x8000) >> 16)) >> 16));
          unint64_t v100 = ((unint64_t)v99 << 16) | (v99 << 32) | v79 | v99;
          if (v6 == 0xFFFF) {
            unint64_t v101 = v98;
          }
          else {
            unint64_t v101 = v100;
          }
          unint64_t v102 = HIWORD(v101);
          if (HIWORD(v101))
          {
            if (v102 == 0xFFFF)
            {
              unsigned int v103 = bswap32(v101);
              *int v7 = HIWORD(v103);
              v7[1] = v103;
              double v7[2] = bswap32(HIDWORD(v101)) >> 16;
              v7[3] = -1;
            }
            else
            {
              uint16x4_t result = (unint64_t)RGBA64_DplusDM(v7, v101, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v102 ^ 0xFFFF);
            }
          }
          v7 += 4;
          --v94;
        }
        while (v94);
      }
    }
    uint64_t v9 = v114;
    v7 += 4 * v115;
    LOBYTE(v10) = v113;
    uint64_t v11 = v118 + v112;
    a6 = v120 - 1;
  }
  while (v120 != 1);
  return result;
}

_WORD *RGBA64_DplusDAM(_WORD *result, unint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unint64_t *result = bswap32(a2+ (((((unsigned __int16)a3 * (unint64_t)a5 + 0x8000) >> 16)+ (unsigned __int16)a3 * a5+ 0x8000) >> 16)) >> 16;
  result[1] = bswap32(((((WORD1(a3) * (unint64_t)a5 + 0x8000) >> 16) + WORD1(a3) * a5 + 0x8000) >> 16)+ WORD1(a2)) >> 16;
  result[2] = bswap32(HIDWORD(a2)+ ((((WORD2(a3) * (unint64_t)a5 + 0x8000) >> 16) + WORD2(a3) * a5 + 0x8000) >> 16)) >> 16;
  result[3] = bswap32(HIWORD(a2) + ((((a5 * (unint64_t)a4 + 0x8000) >> 16) + a5 * a4 + 0x8000) >> 16)) >> 16;
  return result;
}

_WORD *RGBA64_DAM(_WORD *result, uint64_t a2, int a3, int a4)
{
  unint64_t *result = bswap32(a2- (((unsigned __int16)a2 * (a4 ^ 0xFFFF) + 0x8000 + (((unsigned __int16)a2 * (a4 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) >> 16;
  result[1] = bswap32(WORD1(a2) - ((WORD1(a2) * (a4 ^ 0xFFFF) + 0x8000 + ((WORD1(a2) * (a4 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) >> 16;
  result[2] = bswap32(HIDWORD(a2)- ((WORD2(a2) * (a4 ^ 0xFFFF) + 0x8000 + ((WORD2(a2) * (a4 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) >> 16;
  result[3] = bswap32(a3 - (((a4 ^ 0xFFFF) * a3 + 0x8000 + (((a4 ^ 0xFFFFu) * a3 + 0x8000) >> 16)) >> 16)) >> 16;
  return result;
}

_WORD *RGBA64_DpluslDA(_WORD *result, unint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = (unsigned __int16)a3 + (unint64_t)(unsigned __int16)a2;
  unint64_t v5 = WORD1(a3) + (unint64_t)WORD1(a2);
  unint64_t v6 = WORD2(a3) + (unint64_t)WORD2(a2);
  unint64_t v7 = HIWORD(a2) + a4;
  if (v4 >= 0xFFFF) {
    LODWORD(v4) = 0xFFFF;
  }
  if (v5 >= 0xFFFF) {
    LODWORD(v5) = 0xFFFF;
  }
  if (v6 >= 0xFFFF) {
    LODWORD(v6) = 0xFFFF;
  }
  if (v7 >= 0xFFFF) {
    LODWORD(v7) = 0xFFFF;
  }
  unint64_t *result = bswap32(v4) >> 16;
  result[1] = bswap32(v5) >> 16;
  result[2] = bswap32(v6) >> 16;
  result[3] = bswap32(v7) >> 16;
  return result;
}

unint64_t RGBA64_mark_constmask(uint64_t a1, int a2)
{
  int v268 = *(_DWORD *)(a1 + 4);
  int v271 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 48);
  unint64_t v260 = *(int *)(a1 + 28);
  uint64_t v262 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 136);
  unint64_t v5 = *(unsigned __int16 **)(a1 + 88);
  uint64_t v6 = bswap32(v5[3]) >> 16;
  unint64_t v7 = ((unint64_t)(bswap32(v5[2]) >> 16) << 32) | (v6 << 48);
  uint64_t v8 = (__PAIR64__(bswap32(v5[1]) >> 16, bswap32(*v5)) >> 16);
  unint64_t v9 = v7 | v8;
  pthread_mutex_lock(&RGBA64_cacheColorLock);
  uint64_t v10 = (void *)RGBA64_cacheColor;
  if (!RGBA64_cacheColor || *(void *)(RGBA64_cacheColor + 16) != v9)
  {
    uint64_t v13 = 0;
    while (1)
    {
      if (!v10) {
        goto LABEL_9;
      }
      uint64_t v14 = (char *)v10;
      uint64_t v15 = v13;
      if (v10[2] == v9) {
        break;
      }
      uint64_t v10 = (void *)*v10;
      uint64_t v13 = v14;
      if (!*(void *)v14)
      {
        if (RGBA64_cacheColorCount > 6)
        {
          *(void *)uint64_t v15 = 0;
        }
        else
        {
LABEL_9:
          int v16 = (char *)RGBA64_cacheColorBase;
          if (RGBA64_cacheColorBase)
          {
            unsigned int v17 = RGBA64_cacheColorCount;
          }
          else
          {
            int v16 = (char *)malloc_type_calloc(1uLL, 0x38A8uLL, 0x10200402493A768uLL);
            unsigned int v17 = 0;
            RGBA64_cacheColorBase = (uint64_t)v16;
          }
          uint64_t v14 = &v16[24 * v17];
          *((void *)v14 + 1) = &v16[2048 * (unint64_t)v17 + 168];
          RGBA64_cacheColorCFIndex Count = v17 + 1;
        }
        uint64_t v18 = 0;
        *(void *)uint64_t v14 = RGBA64_cacheColor;
        RGBA64_cacheColor = (uint64_t)v14;
        *((void *)v14 + 2) = v9;
        uint64_t v20 = *((void *)v14 + 1);
        uint64_t v12 = v14 + 8;
        uint64_t v19 = v20;
        int32x2_t v21 = vdup_n_s32((unsigned __int16)v8);
        int32x2_t v22 = vdup_n_s32(WORD1(v8));
        int32x2_t v23 = vdup_n_s32(WORD2(v7));
        int32x2_t v24 = vdup_n_s32(v6);
        int32x2_t v25 = vdup_n_s32(v8);
        int32x2_t v26 = (int32x2_t)0x100000000;
        int32x2_t v27 = vdup_n_s32(HIDWORD(v7));
        int32x2_t v28 = vdup_n_s32(0x101u);
        do
        {
          int32x2_t v29 = (int32x2_t)veor_s8((int8x8_t)vmul_s32(v26, v28), (int8x8_t)0xFFFF0000FFFFLL);
          uint32x2_t v30 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v21);
          uint32x2_t v31 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v22);
          uint32x2_t v32 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v23);
          uint32x2_t v33 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v24);
          int32x2_t v34 = (int32x2_t)vshr_n_u32(vsra_n_u32(v30, v30, 0x10uLL), 0x10uLL);
          int32x2_t v35 = (int32x2_t)vshr_n_u32(vsra_n_u32(v31, v31, 0x10uLL), 0x10uLL);
          int32x2_t v36 = (int32x2_t)vshr_n_u32(vsra_n_u32(v32, v32, 0x10uLL), 0x10uLL);
          int32x2_t v37 = vsub_s32(v24, (int32x2_t)vshr_n_u32(vsra_n_u32(v33, v33, 0x10uLL), 0x10uLL));
          v38.i64[0] = v37.u32[0];
          v38.i64[1] = v37.u32[1];
          int8x16_t v39 = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v38, 0x30uLL), (int8x16_t)vshll_n_s32((int32x2_t)vand_s8((int8x8_t)vsub_s32(v27, v36), (int8x8_t)0xFFFF0000FFFFLL), 0x20uLL));
          int32x2_t v40 = vshl_n_s32(vsub_s32(v22, v35), 0x10uLL);
          v38.i64[0] = v40.u32[0];
          v38.i64[1] = v40.u32[1];
          int8x16_t v41 = v38;
          int8x8_t v42 = vand_s8((int8x8_t)vsub_s32(v25, v34), (int8x8_t)0xFFFF0000FFFFLL);
          v38.i64[0] = v42.u32[0];
          v38.i64[1] = v42.u32[1];
          *(int8x16_t *)(v19 + v18) = vorrq_s8(v39, vorrq_s8(v41, v38));
          int32x2_t v26 = vadd_s32(v26, (int32x2_t)0x200000002);
          v18 += 16;
        }
        while (v18 != 2048);
        unint64_t result = pthread_mutex_unlock(&RGBA64_cacheColorLock);
        goto LABEL_20;
      }
    }
    if (v13)
    {
      *(void *)uint64_t v13 = *v10;
      *uint64_t v10 = RGBA64_cacheColor;
      RGBA64_cacheColor = (uint64_t)v10;
    }
  }
  unint64_t result = pthread_mutex_unlock(&RGBA64_cacheColorLock);
  uint64_t v12 = v10 + 1;
LABEL_20:
  int v43 = v268;
  if (!v4) {
    return result;
  }
  uint64_t v44 = *v12;
  unint64_t v45 = *(void *)(*v12 + 2040);
  unint64_t v46 = HIWORD(v45);
  unsigned int v47 = (unsigned __int16 *)(v262 + 8 * (*(int *)(a1 + 12) + (v260 >> 3) * *(int *)(a1 + 16)));
  uint64_t v48 = *(int *)(a1 + 124);
  unint64_t v49 = v4 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v48;
  uint64_t v50 = v48 - v268;
  unint64_t v51 = (v260 >> 3) - v268;
  switch(a2)
  {
    case 0:
      do
      {
        int v52 = v268;
        do
        {
          int v53 = *(unsigned __int8 *)v49;
          if (*(unsigned char *)v49)
          {
            if (v53 == 255)
            {
              *(void *)unsigned int v47 = 0;
            }
            else
            {
              unsigned int v54 = bswap32(v47[1] | (*v47 << 16));
              v55.i32[0] = (unsigned __int16)v54;
              v55.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v54), 0x10uLL).i32[1];
              v55.i64[1] = __PAIR64__(bswap32(v47[3]) >> 16, bswap32(v47[2]) >> 16);
              v56.i64[0] = 0x800000008000;
              v56.i64[1] = 0x800000008000;
              uint32x4_t v57 = (uint32x4_t)vmlaq_s32(v56, v55, vdupq_n_s32((v53 ^ 0xFF | ((v53 ^ 0xFF) << 8)) ^ 0xFFFFu));
              v55.i32[0] = v54;
              *(int8x8_t *)unsigned int v47 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v55, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL))));
            }
          }
          ++v49;
          v47 += 4;
          --v52;
        }
        while (v52);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 1:
      int v177 = -1;
      unsigned int v178 = v49 & 3;
      if ((v49 & 3) != 0)
      {
        int v43 = v178 + v268;
        int v177 = -1 << (8 * v178);
        unint64_t v179 = v49 & 3;
        v49 &= 0xFFFFFFFFFFFFFFFCLL;
        v47 -= 4 * v179;
      }
      if ((((_BYTE)v43 + (_BYTE)v49) & 3) != 0)
      {
        int v180 = 4 - (((_BYTE)v43 + (_BYTE)v49) & 3);
        v178 += v180;
        unsigned int v181 = 0xFFFFFFFF >> (8 * v180);
        if (v43 >= 4) {
          unsigned int v182 = v181;
        }
        else {
          unsigned int v182 = 0;
        }
        unsigned int v269 = v182;
        if (v43 >= 4) {
          unsigned int v181 = -1;
        }
        v177 &= v181;
      }
      else
      {
        unsigned int v269 = 0;
      }
      uint64_t v263 = v50 - v178;
      int v261 = v43 >> 2;
      unint64_t v237 = HIDWORD(v45);
      unsigned int v238 = bswap32(v45);
      unsigned int v239 = HIWORD(v238);
      unsigned __int16 v240 = v238;
      unsigned int v241 = bswap32(v237) >> 16;
      unsigned __int16 v242 = __rev16(v46);
      unint64_t v259 = v51 - v178;
      int v266 = v177;
      do
      {
        unsigned int v243 = *(_DWORD *)v49 & v177;
        int v244 = v261;
        unsigned int v245 = v269;
        if (!v243) {
          goto LABEL_327;
        }
LABEL_309:
        if (v243 == -1)
        {
          *unsigned int v47 = v239;
          v47[1] = v240;
          v47[2] = v241;
          v47[3] = v242;
          v47[4] = v239;
          v47[5] = v240;
          v47[6] = v241;
          v47[7] = v242;
          v47[8] = v239;
          v47[9] = v240;
          v47[10] = v241;
          v47[11] = v242;
LABEL_324:
          v47[12] = v239;
          v47[13] = v240;
          v47[14] = v241;
          v47[15] = v242;
          goto LABEL_327;
        }
        while (1)
        {
          if ((_BYTE)v243)
          {
            if (v243 == 255)
            {
              *unsigned int v47 = v239;
              v47[1] = v240;
              v47[2] = v241;
              v47[3] = v242;
            }
            else
            {
              unint64_t result = (unint64_t)RGBA64_DplusDM(v47, *(void *)(v44 + 8 * v243), ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | ((unint64_t)(bswap32(v47[3]) >> 16) << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), (v243 | (v243 << 8)) ^ 0xFFFFu);
            }
          }
          if (BYTE1(v243))
          {
            if (BYTE1(v243) == 255)
            {
              v47[4] = v239;
              v47[5] = v240;
              v47[6] = v241;
              v47[7] = v242;
            }
            else
            {
              unint64_t result = (unint64_t)RGBA64_DplusDM(v47 + 4, *(void *)(v44 + 8 * BYTE1(v243)), ((unint64_t)(bswap32(v47[6]) >> 16) << 32) | ((unint64_t)(bswap32(v47[7]) >> 16) << 48) | bswap32(v47[5]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[4]) >> 16), (BYTE1(v243) | (BYTE1(v243) << 8)) ^ 0xFFFFu);
            }
          }
          if (BYTE2(v243))
          {
            if (BYTE2(v243) == 255)
            {
              v47[8] = v239;
              v47[9] = v240;
              v47[10] = v241;
              v47[11] = v242;
            }
            else
            {
              unint64_t result = (unint64_t)RGBA64_DplusDM(v47 + 8, *(void *)(v44 + 8 * BYTE2(v243)), ((unint64_t)(bswap32(v47[10]) >> 16) << 32) | ((unint64_t)(bswap32(v47[11]) >> 16) << 48) | bswap32(v47[9]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[8]) >> 16), (BYTE2(v243) | (BYTE2(v243) << 8)) ^ 0xFFFFu);
            }
          }
          unsigned int v246 = HIBYTE(v243);
          if (HIBYTE(v243) == 255) {
            goto LABEL_324;
          }
          if (v246) {
            unint64_t result = (unint64_t)RGBA64_DplusDM(v47 + 12, *(void *)(v44 + 8 * v246), ((unint64_t)(bswap32(v47[14]) >> 16) << 32) | ((unint64_t)(bswap32(v47[15]) >> 16) << 48) | bswap32(v47[13]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[12]) >> 16), (__PAIR64__(v246, v243) >> 24) ^ 0xFFFF);
          }
LABEL_327:
          while (1)
          {
            int v247 = v244;
            v47 += 16;
            --v244;
            v49 += 4;
            if (v247 < 2) {
              break;
            }
            unsigned int v243 = *(_DWORD *)v49;
            if (*(_DWORD *)v49) {
              goto LABEL_309;
            }
          }
          if (!v245) {
            break;
          }
          unsigned int v245 = 0;
          unsigned int v243 = *(_DWORD *)v49 & v269;
        }
        v49 += v263;
        v47 += 4 * v259;
        BOOL v248 = v271-- == 1;
        int v177 = v266;
      }
      while (!v248);
      return result;
    case 2:
      uint64_t v183 = 0xFFFFFFFFLL;
      unsigned int v184 = v49 & 3;
      if ((v49 & 3) != 0)
      {
        int v43 = v184 + v268;
        uint64_t v183 = (-1 << (8 * v184));
        unint64_t v185 = v49 & 3;
        v49 &= 0xFFFFFFFFFFFFFFFCLL;
        v47 -= 4 * v185;
      }
      if ((((_BYTE)v43 + (_BYTE)v49) & 3) != 0)
      {
        int v186 = 4 - (((_BYTE)v43 + (_BYTE)v49) & 3);
        v184 += v186;
        unsigned int v187 = 0xFFFFFFFF >> (8 * v186);
        BOOL v188 = v43 < 4;
        int v189 = v43;
        if (v43 >= 4) {
          unsigned int v190 = v187;
        }
        else {
          unsigned int v190 = 0;
        }
        if (!v188) {
          unsigned int v187 = -1;
        }
        uint64_t v183 = v187 & v183;
      }
      else
      {
        int v189 = v43;
        unsigned int v190 = 0;
      }
      uint64_t v270 = v50 - v184;
      int v267 = v189 >> 2;
      unsigned int v249 = (unsigned __int16)~HIWORD(v45);
      unint64_t v264 = v51 - v184;
      while (2)
      {
        uint64_t v250 = v183;
        unsigned int v251 = *(_DWORD *)v49 & v183;
        int v252 = v267;
        unsigned int v253 = v190;
        if (!v251) {
          goto LABEL_349;
        }
LABEL_338:
        if (v251 == -1)
        {
          RGBA64_DplusDM(v47, v45, ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | ((unint64_t)(bswap32(v47[3]) >> 16) << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v249);
          RGBA64_DplusDM(v47 + 4, v45, ((unint64_t)(bswap32(v47[6]) >> 16) << 32) | ((unint64_t)(bswap32(v47[7]) >> 16) << 48) | bswap32(v47[5]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[4]) >> 16), v249);
          RGBA64_DplusDM(v47 + 8, v45, ((unint64_t)(bswap32(v47[10]) >> 16) << 32) | ((unint64_t)(bswap32(v47[11]) >> 16) << 48) | bswap32(v47[9]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[8]) >> 16), v249);
          unsigned int v254 = v47 + 12;
          unint64_t v255 = ((unint64_t)(bswap32(v47[14]) >> 16) << 32) | ((unint64_t)(bswap32(v47[15]) >> 16) << 48) | bswap32(v47[13]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[12]) >> 16);
          unint64_t v256 = v45;
          unsigned int v257 = (unsigned __int16)~HIWORD(v45);
LABEL_348:
          unint64_t result = (unint64_t)RGBA64_DplusDM(v254, v256, v255, v257);
          goto LABEL_349;
        }
        while (1)
        {
          if ((_BYTE)v251) {
            unint64_t result = (unint64_t)RGBA64_DplusDM(v47, *(void *)(v44 + 8 * v251), ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | ((unint64_t)(bswap32(v47[3]) >> 16) << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), HIWORD(*(void *)(v44 + 8 * v251)) ^ 0xFFFF);
          }
          if ((v251 & 0xFF00) != 0) {
            unint64_t result = (unint64_t)RGBA64_DplusDM(v47 + 4, *(void *)(v44 + 8 * BYTE1(v251)), ((unint64_t)(bswap32(v47[6]) >> 16) << 32) | ((unint64_t)(bswap32(v47[7]) >> 16) << 48) | bswap32(v47[5]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[4]) >> 16), HIWORD(*(void *)(v44 + 8 * BYTE1(v251))) ^ 0xFFFF);
          }
          if ((v251 & 0xFF0000) != 0) {
            unint64_t result = (unint64_t)RGBA64_DplusDM(v47 + 8, *(void *)(v44 + 8 * BYTE2(v251)), ((unint64_t)(bswap32(v47[10]) >> 16) << 32) | ((unint64_t)(bswap32(v47[11]) >> 16) << 48) | bswap32(v47[9]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[8]) >> 16), HIWORD(*(void *)(v44 + 8 * BYTE2(v251))) ^ 0xFFFF);
          }
          if (HIBYTE(v251))
          {
            unint64_t v256 = *(void *)(v44 + 8 * HIBYTE(v251));
            unsigned int v254 = v47 + 12;
            unint64_t v255 = ((unint64_t)(bswap32(v47[14]) >> 16) << 32) | ((unint64_t)(bswap32(v47[15]) >> 16) << 48) | bswap32(v47[13]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[12]) >> 16);
            unsigned int v257 = HIWORD(v256) ^ 0xFFFF;
            goto LABEL_348;
          }
LABEL_349:
          while (1)
          {
            int v258 = v252;
            v47 += 16;
            --v252;
            v49 += 4;
            if (v258 < 2) {
              break;
            }
            unsigned int v251 = *(_DWORD *)v49;
            if (*(_DWORD *)v49) {
              goto LABEL_338;
            }
          }
          if (!v253) {
            break;
          }
          unsigned int v253 = 0;
          unsigned int v251 = *(_DWORD *)v49 & v190;
        }
        v49 += v270;
        v47 += 4 * v264;
        BOOL v248 = v271-- == 1;
        uint64_t v183 = v250;
        if (!v248) {
          continue;
        }
        return result;
      }
    case 3:
      do
      {
        int v191 = v268;
        do
        {
          int v192 = *(unsigned __int8 *)v49;
          if (*(unsigned char *)v49)
          {
            if (v192 == 255)
            {
              unint64_t v193 = *(void *)(v44 + 8 * *((unsigned __int8 *)v47 + 6));
              unint64_t v194 = HIDWORD(v193);
              unint64_t v195 = HIWORD(v193);
              LODWORD(v193) = bswap32(v193);
              *unsigned int v47 = WORD1(v193);
              v47[1] = v193;
              v47[2] = bswap32(v194) >> 16;
              v47[3] = __rev16(v195);
            }
            else
            {
              uint64_t v196 = bswap32(v47[3]) >> 16;
              unint64_t result = (unint64_t)RGBA64_DplusDM(v47, *(void *)(v44+ 8* ((v196 * (v192 | (v192 << 8))+ 0x8000+ ((v196 * (v192 | (v192 << 8)) + 0x8000) >> 16)) >> 24)), (v196 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), (v192 | (v192 << 8)) ^ 0xFFFFu);
            }
          }
          ++v49;
          v47 += 4;
          --v191;
        }
        while (v191);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 4:
      do
      {
        int v197 = v268;
        do
        {
          int v198 = *(unsigned __int8 *)v49;
          if (*(unsigned char *)v49)
          {
            if (v198 == 255)
            {
              unint64_t v199 = *(void *)(v44 + 8 * ~*((unsigned char *)v47 + 6));
              unint64_t v200 = HIDWORD(v199);
              unint64_t v201 = HIWORD(v199);
              LODWORD(v199) = bswap32(v199);
              *unsigned int v47 = WORD1(v199);
              v47[1] = v199;
              v47[2] = bswap32(v200) >> 16;
              v47[3] = __rev16(v201);
            }
            else
            {
              int v202 = v198 | (v198 << 8);
              uint64_t v203 = bswap32(v47[3]) >> 16;
              unint64_t result = (unint64_t)RGBA64_DplusDM(v47, *(void *)(v44+ 8* (((v203 ^ 0xFFFF) * v202+ 0x8000+ (((v203 ^ 0xFFFF) * v202 + 0x8000) >> 16)) >> 24)), (v203 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v202 ^ 0xFFFFu);
            }
          }
          ++v49;
          v47 += 4;
          --v197;
        }
        while (v197);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 5:
      do
      {
        int v58 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v59 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            uint64_t v60 = bswap32(v47[3]) >> 16;
            unint64_t result = (unint64_t)RGBA64_DMplusDM(v47, v59, v60, (v60 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), HIWORD(v59) ^ 0xFFFF);
          }
          ++v49;
          v47 += 4;
          --v58;
        }
        while (v58);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 6:
      do
      {
        int v204 = v268;
        do
        {
          uint64_t v205 = *(unsigned __int8 *)v49;
          if (*(unsigned char *)v49)
          {
            unsigned int v206 = bswap32(v47[3]);
            if (HIWORD(v206) != 0xFFFF)
            {
              if ((unsigned __int16)~HIWORD(v206) == 0xFFFF)
              {
                unint64_t v207 = *(void *)(v44 + 8 * v205);
                unint64_t v208 = HIDWORD(v207);
                unint64_t v209 = HIWORD(v207);
                LODWORD(v207) = bswap32(v207);
                *unsigned int v47 = WORD1(v207);
                v47[1] = v207;
                v47[2] = bswap32(v208) >> 16;
                v47[3] = __rev16(v209);
              }
              else
              {
                unint64_t result = (unint64_t)RGBA64_DplusDM(v47, ((unint64_t)HIWORD(v206) << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), *(void *)(v44 + 8 * v205), (unsigned __int16)~HIWORD(v206));
              }
            }
          }
          ++v49;
          v47 += 4;
          --v204;
        }
        while (v204);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 7:
      int32x4_t v210 = vdupq_n_s32(v46 ^ 0xFFFF);
      do
      {
        int v211 = v268;
        do
        {
          int v212 = *(unsigned __int8 *)v49;
          if (*(unsigned char *)v49)
          {
            if (v212 == 255)
            {
              unsigned int v213 = bswap32(v47[1] | (*v47 << 16));
              v214.i32[0] = (unsigned __int16)v213;
              v214.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v213), 0x10uLL).i32[1];
              v214.i32[2] = bswap32(v47[2]) >> 16;
              v214.i32[3] = bswap32(v47[3]) >> 16;
              v215.i64[0] = 0x800000008000;
              v215.i64[1] = 0x800000008000;
              uint32x4_t v216 = (uint32x4_t)vmlaq_s32(v215, v214, v210);
              v214.i32[0] = v213;
              int32x4_t v217 = vsubq_s32(v214, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v216, v216, 0x10uLL), 0x10uLL));
            }
            else
            {
              unsigned int v218 = bswap32(v47[1] | (*v47 << 16));
              v219.i32[0] = (unsigned __int16)v218;
              v219.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v218), 0x10uLL).i32[1];
              v219.i64[1] = __PAIR64__(bswap32(v47[3]) >> 16, bswap32(v47[2]) >> 16);
              v220.i64[0] = 0x800000008000;
              v220.i64[1] = 0x800000008000;
              uint32x4_t v221 = (uint32x4_t)vmlaq_s32(v220, v219, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16((v212 | (v212 << 8))- (((v212 | (v212 << 8)) * v46+ 0x8000+ (((v212 | (v212 << 8)) * v46+ 0x8000) >> 16)) >> 16))));
              v219.i32[0] = v218;
              int32x4_t v217 = vsubq_s32(v219, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v221, v221, 0x10uLL), 0x10uLL));
            }
            *(int8x8_t *)unsigned int v47 = vrev16_s8((int8x8_t)vmovn_s32(v217));
          }
          ++v49;
          v47 += 4;
          --v211;
        }
        while (v211);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 8:
      int32x4_t v222 = vdupq_n_s32(v46);
      do
      {
        int v223 = v268;
        do
        {
          int v224 = *(unsigned __int8 *)v49;
          if (*(unsigned char *)v49)
          {
            if (v224 == 255)
            {
              unsigned int v225 = bswap32(v47[1] | (*v47 << 16));
              __int16 v226 = v225;
              __int16 v227 = 0;
              v231.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v225), 0x10uLL).i32[1];
              v231.i32[2] = bswap32(v47[2]) >> 16;
              v231.i32[3] = bswap32(v47[3]) >> 16;
              v228.i64[0] = 0x800000008000;
              v228.i64[1] = 0x800000008000;
              uint32x4_t v229 = (uint32x4_t)vmlaq_s32(v228, v231, v222);
              int32x4_t v230 = (int32x4_t)vshrq_n_u32(vsraq_n_u32(v229, v229, 0x10uLL), 0x10uLL);
              v231.i32[0] = v225;
            }
            else
            {
              unsigned int v232 = bswap32(v47[1] | (*v47 << 16));
              __int16 v233 = v232;
              __int16 v234 = 0;
              v231.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v232), 0x10uLL).i32[1];
              v231.i64[1] = __PAIR64__(bswap32(v47[3]) >> 16, bswap32(v47[2]) >> 16);
              v235.i64[0] = 0x800000008000;
              v235.i64[1] = 0x800000008000;
              uint32x4_t v236 = (uint32x4_t)vmlaq_s32(v235, v231, vdupq_n_s32((257 * v46 * v224+ 0x8000+ ((257 * v46 * v224 + 0x8000) >> 16)) >> 16));
              int32x4_t v230 = (int32x4_t)vshrq_n_u32(vsraq_n_u32(v236, v236, 0x10uLL), 0x10uLL);
              v231.i32[0] = v232;
            }
            *(int8x8_t *)unsigned int v47 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v231, v230)));
          }
          ++v49;
          v47 += 4;
          --v223;
        }
        while (v223);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 9:
      do
      {
        int v61 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v62 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            uint64_t v63 = bswap32(v47[3]) >> 16;
            unint64_t result = (unint64_t)RGBA64_DMplusDM(v47, v62, v63 ^ 0xFFFF, (v63 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), (unsigned __int16)(HIWORD(v62)+ ~(*(unsigned __int8 *)v49 | (*(unsigned __int8 *)v49 << 8))));
          }
          ++v49;
          v47 += 4;
          --v61;
        }
        while (v61);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 10:
      do
      {
        int v64 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v65 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            uint64_t v66 = bswap32(v47[3]) >> 16;
            unint64_t result = (unint64_t)RGBA64_DMplusDM(v47, v65, v66 ^ 0xFFFF, (v66 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), HIWORD(v65) ^ 0xFFFF);
          }
          ++v49;
          v47 += 4;
          --v64;
        }
        while (v64);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 11:
      do
      {
        int v67 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            uint64_t v69 = bswap32(v47[3]) >> 16;
            unint64_t v70 = ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v69 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16);
            if (v3) {
              unsigned __int16 v71 = v69;
            }
            else {
              unsigned __int16 v71 = -1;
            }
            unint64_t v68 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t result = (unint64_t)RGBA64_DAplusdDA(v47, v70, v71, v68, HIWORD(v68));
          }
          ++v49;
          v47 += 4;
          --v67;
        }
        while (v67);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 12:
      do
      {
        int v72 = v268;
        do
        {
          if (*(unsigned char *)v49) {
            unint64_t result = (unint64_t)RGBA64_DpluslD(v47, ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | ((unint64_t)(bswap32(v47[3]) >> 16) << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), *(void *)(v44 + 8 * *(unsigned __int8 *)v49));
          }
          ++v49;
          v47 += 4;
          --v72;
        }
        while (v72);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 13:
      while (1)
      {
        int v73 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v74 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v75 = HIWORD(v74);
            if (HIWORD(v74))
            {
              uint64_t v76 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v77 = v76;
                if (!v47[3])
                {
                  unsigned int v78 = bswap32(v74);
                  *unsigned int v47 = HIWORD(v78);
                  v47[1] = v78;
                  v47[2] = bswap32(HIDWORD(v74)) >> 16;
LABEL_71:
                  v47[3] = __rev16(v75);
                  goto LABEL_72;
                }
              }
              else
              {
                unsigned int v77 = 0xFFFF;
              }
              unint64_t result = PDAmultiplyPDA_14785(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v76 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v77, v74, v75);
              unint64_t v75 = HIWORD(result);
              unsigned int v79 = bswap32(result);
              *unsigned int v47 = HIWORD(v79);
              v47[1] = v79;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_71;
            }
          }
LABEL_72:
          ++v49;
          v47 += 4;
          --v73;
        }
        while (v73);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 14:
      while (1)
      {
        int v80 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v81 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v82 = HIWORD(v81);
            if (HIWORD(v81))
            {
              uint64_t v83 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v84 = v83;
                if (!v47[3])
                {
                  unsigned int v85 = bswap32(v81);
                  *unsigned int v47 = HIWORD(v85);
                  v47[1] = v85;
                  v47[2] = bswap32(HIDWORD(v81)) >> 16;
LABEL_83:
                  v47[3] = __rev16(v82);
                  goto LABEL_84;
                }
              }
              else
              {
                unsigned int v84 = 0xFFFF;
              }
              unint64_t result = PDAscreenPDA_14786(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v83 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v84, v81, v82);
              unint64_t v82 = HIWORD(result);
              unsigned int v86 = bswap32(result);
              *unsigned int v47 = HIWORD(v86);
              v47[1] = v86;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_83;
            }
          }
LABEL_84:
          ++v49;
          v47 += 4;
          --v80;
        }
        while (v80);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 15:
      while (1)
      {
        int v87 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v88 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v89 = HIWORD(v88);
            if (HIWORD(v88))
            {
              uint64_t v90 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v91 = v90;
                if (!v47[3])
                {
                  unsigned int v92 = bswap32(v88);
                  *unsigned int v47 = HIWORD(v92);
                  v47[1] = v92;
                  v47[2] = bswap32(HIDWORD(v88)) >> 16;
LABEL_95:
                  v47[3] = __rev16(v89);
                  goto LABEL_96;
                }
              }
              else
              {
                unsigned int v91 = 0xFFFF;
              }
              unint64_t result = PDAoverlayPDA_14787(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v90 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v91, v88, v89);
              unint64_t v89 = HIWORD(result);
              unsigned int v93 = bswap32(result);
              *unsigned int v47 = HIWORD(v93);
              v47[1] = v93;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_95;
            }
          }
LABEL_96:
          ++v49;
          v47 += 4;
          --v87;
        }
        while (v87);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 16:
      while (1)
      {
        int v94 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v95 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v96 = HIWORD(v95);
            if (HIWORD(v95))
            {
              uint64_t v97 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v98 = v97;
                if (!v47[3])
                {
                  unsigned int v99 = bswap32(v95);
                  *unsigned int v47 = HIWORD(v99);
                  v47[1] = v99;
                  v47[2] = bswap32(HIDWORD(v95)) >> 16;
LABEL_107:
                  v47[3] = __rev16(v96);
                  goto LABEL_108;
                }
              }
              else
              {
                unsigned int v98 = 0xFFFF;
              }
              unint64_t result = PDAdarkenPDA_14789(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v97 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v98, v95, v96);
              unint64_t v96 = HIWORD(result);
              unsigned int v100 = bswap32(result);
              *unsigned int v47 = HIWORD(v100);
              v47[1] = v100;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_107;
            }
          }
LABEL_108:
          ++v49;
          v47 += 4;
          --v94;
        }
        while (v94);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 17:
      while (1)
      {
        int v101 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v102 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v103 = HIWORD(v102);
            if (HIWORD(v102))
            {
              uint64_t v104 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v105 = v104;
                if (!v47[3])
                {
                  unsigned int v106 = bswap32(v102);
                  *unsigned int v47 = HIWORD(v106);
                  v47[1] = v106;
                  v47[2] = bswap32(HIDWORD(v102)) >> 16;
LABEL_119:
                  v47[3] = __rev16(v103);
                  goto LABEL_120;
                }
              }
              else
              {
                unsigned int v105 = 0xFFFF;
              }
              unint64_t result = PDAlightenPDA_14788(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v104 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v105, v102, v103);
              unint64_t v103 = HIWORD(result);
              unsigned int v107 = bswap32(result);
              *unsigned int v47 = HIWORD(v107);
              v47[1] = v107;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_119;
            }
          }
LABEL_120:
          ++v49;
          v47 += 4;
          --v101;
        }
        while (v101);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 18:
      while (1)
      {
        int v108 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v109 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v110 = HIWORD(v109);
            if (HIWORD(v109))
            {
              uint64_t v111 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v112 = v111;
                if (!v47[3])
                {
                  unsigned int v113 = bswap32(v109);
                  *unsigned int v47 = HIWORD(v113);
                  v47[1] = v113;
                  v47[2] = bswap32(HIDWORD(v109)) >> 16;
LABEL_131:
                  v47[3] = __rev16(v110);
                  goto LABEL_132;
                }
              }
              else
              {
                unsigned int v112 = 0xFFFF;
              }
              unint64_t result = PDAcolordodgePDA_14790(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v111 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v112, v109, v110);
              unint64_t v110 = HIWORD(result);
              unsigned int v114 = bswap32(result);
              *unsigned int v47 = HIWORD(v114);
              v47[1] = v114;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_131;
            }
          }
LABEL_132:
          ++v49;
          v47 += 4;
          --v108;
        }
        while (v108);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 19:
      while (1)
      {
        int v115 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v116 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v117 = HIWORD(v116);
            if (HIWORD(v116))
            {
              uint64_t v118 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v119 = v118;
                if (!v47[3])
                {
                  unsigned int v120 = bswap32(v116);
                  *unsigned int v47 = HIWORD(v120);
                  v47[1] = v120;
                  v47[2] = bswap32(HIDWORD(v116)) >> 16;
LABEL_143:
                  v47[3] = __rev16(v117);
                  goto LABEL_144;
                }
              }
              else
              {
                unsigned int v119 = 0xFFFF;
              }
              unint64_t result = PDAcolorburnPDA_14791(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v118 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v119, v116, v117);
              unint64_t v117 = HIWORD(result);
              unsigned int v121 = bswap32(result);
              *unsigned int v47 = HIWORD(v121);
              v47[1] = v121;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_143;
            }
          }
LABEL_144:
          ++v49;
          v47 += 4;
          --v115;
        }
        while (v115);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 20:
      while (1)
      {
        int v122 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v123 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v124 = HIWORD(v123);
            if (HIWORD(v123))
            {
              uint64_t v125 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v126 = v125;
                if (!v47[3])
                {
                  unsigned int v127 = bswap32(v123);
                  *unsigned int v47 = HIWORD(v127);
                  v47[1] = v127;
                  v47[2] = bswap32(HIDWORD(v123)) >> 16;
LABEL_155:
                  v47[3] = __rev16(v124);
                  goto LABEL_156;
                }
              }
              else
              {
                unsigned int v126 = 0xFFFF;
              }
              unint64_t result = PDAsoftlightPDA_14793(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v125 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v126, v123, v124);
              unint64_t v124 = HIWORD(result);
              unsigned int v128 = bswap32(result);
              *unsigned int v47 = HIWORD(v128);
              v47[1] = v128;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_155;
            }
          }
LABEL_156:
          ++v49;
          v47 += 4;
          --v122;
        }
        while (v122);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 21:
      while (1)
      {
        int v129 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v130 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v131 = HIWORD(v130);
            if (HIWORD(v130))
            {
              uint64_t v132 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v133 = v132;
                if (!v47[3])
                {
                  unsigned int v134 = bswap32(v130);
                  *unsigned int v47 = HIWORD(v134);
                  v47[1] = v134;
                  v47[2] = bswap32(HIDWORD(v130)) >> 16;
LABEL_167:
                  v47[3] = __rev16(v131);
                  goto LABEL_168;
                }
              }
              else
              {
                unsigned int v133 = 0xFFFF;
              }
              unint64_t result = PDAhardlightPDA_14792(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v132 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v133, v130, v131);
              unint64_t v131 = HIWORD(result);
              unsigned int v135 = bswap32(result);
              *unsigned int v47 = HIWORD(v135);
              v47[1] = v135;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_167;
            }
          }
LABEL_168:
          ++v49;
          v47 += 4;
          --v129;
        }
        while (v129);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 22:
      while (1)
      {
        int v136 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v137 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v138 = HIWORD(v137);
            if (HIWORD(v137))
            {
              uint64_t v139 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v140 = v139;
                if (!v47[3])
                {
                  unsigned int v141 = bswap32(v137);
                  *unsigned int v47 = HIWORD(v141);
                  v47[1] = v141;
                  v47[2] = bswap32(HIDWORD(v137)) >> 16;
LABEL_179:
                  v47[3] = __rev16(v138);
                  goto LABEL_180;
                }
              }
              else
              {
                unsigned int v140 = 0xFFFF;
              }
              unint64_t result = PDAdifferencePDA_14794(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v139 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v140, v137, v138);
              unint64_t v138 = HIWORD(result);
              unsigned int v142 = bswap32(result);
              *unsigned int v47 = HIWORD(v142);
              v47[1] = v142;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_179;
            }
          }
LABEL_180:
          ++v49;
          v47 += 4;
          --v136;
        }
        while (v136);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 23:
      while (1)
      {
        int v143 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v144 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v145 = HIWORD(v144);
            if (HIWORD(v144))
            {
              uint64_t v146 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v147 = v146;
                if (!v47[3])
                {
                  unsigned int v148 = bswap32(v144);
                  *unsigned int v47 = HIWORD(v148);
                  v47[1] = v148;
                  v47[2] = bswap32(HIDWORD(v144)) >> 16;
LABEL_191:
                  v47[3] = __rev16(v145);
                  goto LABEL_192;
                }
              }
              else
              {
                unsigned int v147 = 0xFFFF;
              }
              unint64_t result = PDAexclusionPDA_14795(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v146 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v147, v144, v145);
              unint64_t v145 = HIWORD(result);
              unsigned int v149 = bswap32(result);
              *unsigned int v47 = HIWORD(v149);
              v47[1] = v149;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_191;
            }
          }
LABEL_192:
          ++v49;
          v47 += 4;
          --v143;
        }
        while (v143);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 24:
      while (1)
      {
        int v150 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v151 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v152 = HIWORD(v151);
            if (HIWORD(v151))
            {
              uint64_t v153 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v154 = v153;
                if (!v47[3])
                {
                  unsigned int v155 = bswap32(v151);
                  *unsigned int v47 = HIWORD(v155);
                  v47[1] = v155;
                  v47[2] = bswap32(HIDWORD(v151)) >> 16;
LABEL_203:
                  v47[3] = __rev16(v152);
                  goto LABEL_204;
                }
              }
              else
              {
                unsigned int v154 = 0xFFFF;
              }
              unint64_t result = PDAhuePDA_14796(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v153 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v154, v151, v152);
              unint64_t v152 = HIWORD(result);
              unsigned int v156 = bswap32(result);
              *unsigned int v47 = HIWORD(v156);
              v47[1] = v156;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_203;
            }
          }
LABEL_204:
          ++v49;
          v47 += 4;
          --v150;
        }
        while (v150);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 25:
      while (1)
      {
        int v157 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t v158 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v159 = HIWORD(v158);
            if (HIWORD(v158))
            {
              uint64_t v160 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v161 = v160;
                if (!v47[3])
                {
                  unsigned int v162 = bswap32(v158);
                  *unsigned int v47 = HIWORD(v162);
                  v47[1] = v162;
                  v47[2] = bswap32(HIDWORD(v158)) >> 16;
LABEL_215:
                  v47[3] = __rev16(v159);
                  goto LABEL_216;
                }
              }
              else
              {
                unsigned int v161 = 0xFFFF;
              }
              unint64_t result = PDAsaturationPDA_14797(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v160 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v161, v158, v159);
              unint64_t v159 = HIWORD(result);
              unsigned int v163 = bswap32(result);
              *unsigned int v47 = HIWORD(v163);
              v47[1] = v163;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_215;
            }
          }
LABEL_216:
          ++v49;
          v47 += 4;
          --v157;
        }
        while (v157);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 26:
      while (1)
      {
        int v164 = v268;
        do
        {
          if (*(unsigned char *)v49)
          {
            unint64_t result = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
            unint64_t v165 = HIWORD(result);
            if (HIWORD(result))
            {
              uint64_t v166 = __rev16(v47[3]);
              if (v3)
              {
                unsigned int v167 = v166;
                if (!v47[3])
                {
                  unsigned int v168 = bswap32(result);
                  *unsigned int v47 = HIWORD(v168);
                  v47[1] = v168;
                  v47[2] = bswap32(HIDWORD(result)) >> 16;
LABEL_227:
                  v47[3] = __rev16(v165);
                  goto LABEL_228;
                }
              }
              else
              {
                unsigned int v167 = 0xFFFF;
              }
              unint64_t result = PDAluminosityPDA_14798(result, v165, ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v166 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v167);
              unint64_t v165 = HIWORD(result);
              unsigned int v169 = bswap32(result);
              *unsigned int v47 = HIWORD(v169);
              v47[1] = v169;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_227;
            }
          }
LABEL_228:
          ++v49;
          v47 += 4;
          --v164;
        }
        while (v164);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271) {
          return result;
        }
      }
    case 27:
      break;
    default:
      return result;
  }
LABEL_231:
  int v170 = v268;
  while (1)
  {
    if (!*(unsigned char *)v49) {
      goto LABEL_240;
    }
    unint64_t v171 = *(void *)(v44 + 8 * *(unsigned __int8 *)v49);
    unint64_t v172 = HIWORD(v171);
    if (!HIWORD(v171)) {
      goto LABEL_240;
    }
    uint64_t v173 = __rev16(v47[3]);
    if (!v3) {
      break;
    }
    unsigned int v174 = v173;
    if (v47[3]) {
      goto LABEL_238;
    }
    unsigned int v175 = bswap32(v171);
    *unsigned int v47 = HIWORD(v175);
    v47[1] = v175;
    v47[2] = bswap32(HIDWORD(v171)) >> 16;
LABEL_239:
    v47[3] = __rev16(v172);
LABEL_240:
    ++v49;
    v47 += 4;
    if (!--v170)
    {
      v49 += v50;
      v47 += 4 * v51;
      if (!--v271) {
        return result;
      }
      goto LABEL_231;
    }
  }
  unsigned int v174 = 0xFFFF;
LABEL_238:
  unint64_t result = PDAluminosityPDA_14798(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v173 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v174, v171, v172);
  unint64_t v172 = HIWORD(result);
  unsigned int v176 = bswap32(result);
  *unsigned int v47 = HIWORD(v176);
  v47[1] = v176;
  v47[2] = bswap32(HIDWORD(result)) >> 16;
  goto LABEL_239;
}

unint64_t RGBA64_mark_pixelmask(unint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 136);
  if (v2)
  {
    int v668 = *(_DWORD *)(result + 4);
    uint64_t v3 = v668;
    int v670 = *(_DWORD *)(result + 8);
    uint64_t v671 = *(void *)(result + 48);
    uint64_t v4 = *(void *)(result + 88);
    uint64_t v5 = *(void *)(result + 96);
    unint64_t v6 = (unint64_t)*(int *)(result + 28) >> 3;
    unint64_t v7 = (char *)(*(void *)(result + 40) + 8 * (*(int *)(result + 12) + v6 * *(int *)(result + 16)));
    uint64_t v8 = *(int *)(result + 124);
    unint64_t v9 = (unsigned char *)(v2 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v8);
    uint64_t v10 = *(int *)(result + 56);
    uint64_t v11 = *(int *)(result + 60);
    unint64_t v12 = *(int *)(result + 76);
    if (*(unsigned __int8 *)(result + 1) << 8 != 256)
    {
      int v18 = *(_DWORD *)(result + 64);
      int v17 = *(_DWORD *)(result + 68);
      uint64_t v13 = v12 >> 3;
      BOOL v19 = v5 != 0;
      uint64_t v667 = v8 - v668;
      unint64_t v666 = v6 - v668;
      if (v4)
      {
        int v664 = 0;
        unint64_t v663 = v4 + 8 * v13 * v17;
        uint64_t v665 = v13;
        uint64_t v20 = v4 + 8 * v13 * ((int)v11 % v17);
        uint64_t v14 = (char *)(v20 + 8 * ((int)v10 % v18));
        unint64_t v21 = v20 + 8 * v18;
        int v16 = 1;
        long long v669 = v14;
LABEL_16:
        switch(a2)
        {
          case 0:
            uint64_t v22 = v16;
            uint64_t v23 = 8 * v16;
            do
            {
              int v24 = v668;
              int v25 = v670;
              do
              {
                int v26 = *v9;
                if (*v9)
                {
                  if (v26 == 255)
                  {
                    *(void *)unint64_t v7 = 0;
                  }
                  else
                  {
                    unsigned int v27 = bswap32(*((unsigned __int16 *)v7 + 1) | (*(unsigned __int16 *)v7 << 16));
                    v28.i32[0] = (unsigned __int16)v27;
                    v28.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v27), 0x10uLL).i32[1];
                    v28.i64[1] = __PAIR64__(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16, bswap32(*((unsigned __int16 *)v7 + 2)) >> 16);
                    v29.i64[0] = 0x800000008000;
                    v29.i64[1] = 0x800000008000;
                    uint32x4_t v30 = (uint32x4_t)vmlaq_s32(v29, v28, vdupq_n_s32(v26 | (v26 << 8)));
                    v28.i32[0] = v27;
                    *(int8x8_t *)unint64_t v7 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v28, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v30, v30, 0x10uLL), 0x10uLL))));
                  }
                }
                v9 += v22;
                v7 += v23;
                --v24;
              }
              while (v24);
              v9 += v667;
              v7 += 8 * v666;
              --v670;
            }
            while (v25 != 1);
            return result;
          case 1:
            if (v671) {
              char v31 = v19;
            }
            else {
              char v31 = 1;
            }
            uint64_t v32 = v16;
            uint64_t v33 = -(uint64_t)v18;
            uint64_t v34 = -(v665 * v17);
            uint64_t v35 = 8 * v16;
            if (v31)
            {
              do
              {
                int v36 = v668;
                do
                {
                  int v37 = *v9;
                  if (*v9)
                  {
                    if (v37 == 255) {
                      *(void *)unint64_t v7 = *(void *)v14;
                    }
                    else {
                      unint64_t result = (unint64_t)RGBA64_DMplusDM(v7, ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16), v37 | (v37 << 8), ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), (v37 | (v37 << 8)) ^ 0xFFFFu);
                    }
                  }
                  v9 += v32;
                  int8x16_t v38 = (unsigned __int16 *)&v14[8 * v32];
                  if ((unint64_t)v38 >= v21) {
                    uint64_t v39 = v33;
                  }
                  else {
                    uint64_t v39 = 0;
                  }
                  uint64_t v14 = (char *)&v38[4 * v39];
                  v7 += v35;
                  --v36;
                }
                while (v36);
                v9 += v667;
                v7 += 8 * v666;
                int32x2_t v40 = v669;
                int8x16_t v41 = &v669[8 * v665];
                if ((unint64_t)v41 >= v663) {
                  uint64_t v42 = v34;
                }
                else {
                  uint64_t v42 = 0;
                }
                int v43 = &v41[8 * v42];
                uint64_t v44 = v21 + 8 * v42 + 8 * v665;
                if (v664)
                {
                  v14 += 8 * v665;
                }
                else
                {
                  unint64_t v21 = v44;
                  int32x2_t v40 = v43;
                  uint64_t v14 = v43;
                }
                BOOL v45 = v670 == 1;
                long long v669 = v40;
                --v670;
              }
              while (!v45);
            }
            else
            {
              do
              {
                int v637 = v668;
                do
                {
                  int v638 = *v9;
                  if (*v9)
                  {
                    if (v638 == 255)
                    {
                      unsigned __int16 v639 = *((_WORD *)v14 + 2);
                      *(_DWORD *)unint64_t v7 = *(_DWORD *)v14;
                      *((_WORD *)v7 + 2) = v639;
                      *((_WORD *)v7 + 3) = -1;
                    }
                    else
                    {
                      unint64_t result = (unint64_t)RGBA64_DMplusDAM(v7, ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), (v638 | (v638 << 8)) ^ 0xFFFFu, ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16), 0xFFFFu, v638 | (v638 << 8));
                    }
                  }
                  v9 += v32;
                  unint64_t v640 = (unsigned __int16 *)&v14[8 * v32];
                  if ((unint64_t)v640 >= v21) {
                    uint64_t v641 = v33;
                  }
                  else {
                    uint64_t v641 = 0;
                  }
                  uint64_t v14 = (char *)&v640[4 * v641];
                  v7 += v35;
                  --v637;
                }
                while (v637);
                v9 += v667;
                v7 += 8 * v666;
                uint64_t v642 = v669;
                unint64_t v643 = &v669[8 * v665];
                if ((unint64_t)v643 >= v663) {
                  uint64_t v644 = v34;
                }
                else {
                  uint64_t v644 = 0;
                }
                unint64_t v645 = &v643[8 * v644];
                uint64_t v646 = v21 + 8 * v644 + 8 * v665;
                if (v664)
                {
                  v14 += 8 * v665;
                }
                else
                {
                  unint64_t v21 = v646;
                  uint64_t v642 = v645;
                  uint64_t v14 = v645;
                }
                BOOL v45 = v670 == 1;
                long long v669 = v642;
                --v670;
              }
              while (!v45);
            }
            return result;
          case 2:
            uint64_t v46 = v16;
            uint64_t v47 = -(uint64_t)v18;
            uint64_t v48 = -(v665 * v17);
            uint64_t v49 = 8 * v16;
            while (1)
            {
              int v50 = v668;
              do
              {
                int v51 = *v9;
                if (!*v9) {
                  goto LABEL_60;
                }
                if (v51 == 255)
                {
                  uint64_t v52 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                  if (!v52) {
                    goto LABEL_60;
                  }
                  if (v52 == 0xFFFF)
                  {
                    *(void *)unint64_t v7 = *(void *)v14;
                    goto LABEL_60;
                  }
                  unint64_t v59 = (v52 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16);
                  unint64_t v60 = ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16);
                  unsigned int v61 = v52 ^ 0xFFFF;
                }
                else
                {
                  unsigned int v53 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                  int v54 = (v51 | (v51 << 8)) ^ 0xFFFF;
                  uint64_t v55 = v53 - ((v54 * v53 + 0x8000 + ((v54 * v53 + 0x8000) >> 16)) >> 16);
                  if ((_WORD)v53 == (v54 * v53 + 0x8000 + ((v54 * v53 + 0x8000) >> 16)) >> 16) {
                    goto LABEL_60;
                  }
                  unsigned int v56 = bswap32(*((unsigned __int16 *)v14 + 2));
                  unint64_t v57 = (v55 << 48) | ((unint64_t)(unsigned __int16)(HIWORD(v56)
                                                                          - ((v54 * HIWORD(v56)
                                                                            + 0x8000
                                                                            + ((v54 * HIWORD(v56) + 0x8000) >> 16)) >> 16)) << 32);
                  unsigned int v58 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                  unint64_t v59 = v57 | (unsigned __int16)(v58
                                               - (((unsigned __int16)v58 * v54
                                                 + 0x8000
                                                 + (((unsigned __int16)v58 * v54 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(HIWORD(v58) - ((HIWORD(v58) * v54 + 0x8000 + ((HIWORD(v58) * v54 + 0x8000) >> 16)) >> 16)) << 16);
                  unint64_t v60 = ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16);
                  unsigned int v61 = (unsigned __int16)~(_WORD)v55;
                }
                unint64_t result = (unint64_t)RGBA64_DplusDM(v7, v59, v60, v61);
LABEL_60:
                v9 += v46;
                unint64_t v62 = (unsigned __int16 *)&v14[8 * v46];
                if ((unint64_t)v62 >= v21) {
                  uint64_t v63 = v47;
                }
                else {
                  uint64_t v63 = 0;
                }
                uint64_t v14 = (char *)&v62[4 * v63];
                v7 += v49;
                --v50;
              }
              while (v50);
              v9 += v667;
              v7 += 8 * v666;
              int v64 = v669;
              unint64_t v65 = &v669[8 * v665];
              if ((unint64_t)v65 >= v663) {
                uint64_t v66 = v48;
              }
              else {
                uint64_t v66 = 0;
              }
              int v67 = &v65[8 * v66];
              uint64_t v68 = v21 + 8 * v66 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v68;
                int v64 = v67;
                uint64_t v14 = v67;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v64;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 3:
            uint64_t v69 = v16;
            uint64_t v70 = -(uint64_t)v18;
            uint64_t v71 = -(v665 * v17);
            uint64_t v72 = 8 * v16;
            do
            {
              int v73 = v668;
              do
              {
                int v74 = *v9;
                if (*v9)
                {
                  if (v74 == 255)
                  {
                    uint64_t v75 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                    unint64_t v76 = ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | (v75 << 48) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16);
                    if (v19) {
                      unsigned __int16 v77 = v75;
                    }
                    else {
                      unsigned __int16 v77 = -1;
                    }
                    unint64_t result = (unint64_t)RGBA64_DAM(v7, v76, v77, bswap32(*((unsigned __int16 *)v7 + 3)) >> 16);
                  }
                  else
                  {
                    int v78 = v74 | (v74 << 8);
                    uint64_t v79 = bswap32(*((unsigned __int16 *)v7 + 3)) >> 16;
                    unint64_t v80 = ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v79 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16);
                    uint64_t v81 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                    unint64_t v82 = ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | (v81 << 48) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16);
                    if (v19) {
                      unsigned __int16 v83 = v81;
                    }
                    else {
                      unsigned __int16 v83 = -1;
                    }
                    unint64_t result = (unint64_t)RGBA64_DMplusDAM(v7, v80, v78 ^ 0xFFFFu, v82, v83, (v79 * v78 + 0x8000 + ((v79 * v78 + 0x8000) >> 16)) >> 16);
                  }
                }
                v9 += v69;
                unsigned int v84 = (unsigned __int16 *)&v14[8 * v69];
                if ((unint64_t)v84 >= v21) {
                  uint64_t v85 = v70;
                }
                else {
                  uint64_t v85 = 0;
                }
                uint64_t v14 = (char *)&v84[4 * v85];
                v7 += v72;
                --v73;
              }
              while (v73);
              v9 += v667;
              v7 += 8 * v666;
              unsigned int v86 = v669;
              int v87 = &v669[8 * v665];
              if ((unint64_t)v87 >= v663) {
                uint64_t v88 = v71;
              }
              else {
                uint64_t v88 = 0;
              }
              unint64_t v89 = &v87[8 * v88];
              uint64_t v90 = v21 + 8 * v88 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v90;
                unsigned int v86 = v89;
                uint64_t v14 = v89;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v86;
              --v670;
            }
            while (!v45);
            return result;
          case 4:
            uint64_t v91 = v16;
            uint64_t v92 = -(uint64_t)v18;
            uint64_t v93 = -(v665 * v17);
            uint64_t v94 = 8 * v16;
            do
            {
              int v95 = v668;
              do
              {
                int v96 = *v9;
                if (*v9)
                {
                  if (v96 == 255)
                  {
                    uint64_t v97 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                    unint64_t v98 = ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | (v97 << 48) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16);
                    if (v19) {
                      unsigned __int16 v99 = v97;
                    }
                    else {
                      unsigned __int16 v99 = -1;
                    }
                    unint64_t result = (unint64_t)RGBA64_DAM(v7, v98, v99, bswap32(~*((unsigned __int16 *)v7 + 3)) >> 16);
                  }
                  else
                  {
                    int v100 = v96 | (v96 << 8);
                    uint64_t v101 = bswap32(*((unsigned __int16 *)v7 + 3)) >> 16;
                    unint64_t v102 = ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v101 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16);
                    uint64_t v103 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                    unint64_t v104 = ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | (v103 << 48) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16);
                    if (v19) {
                      unsigned __int16 v105 = v103;
                    }
                    else {
                      unsigned __int16 v105 = -1;
                    }
                    unint64_t result = (unint64_t)RGBA64_DMplusDAM(v7, v102, v100 ^ 0xFFFFu, v104, v105, ((v101 ^ 0xFFFF) * v100+ 0x8000+ (((v101 ^ 0xFFFF) * v100 + 0x8000) >> 16)) >> 16);
                  }
                }
                v9 += v91;
                unsigned int v106 = (unsigned __int16 *)&v14[8 * v91];
                if ((unint64_t)v106 >= v21) {
                  uint64_t v107 = v92;
                }
                else {
                  uint64_t v107 = 0;
                }
                uint64_t v14 = (char *)&v106[4 * v107];
                v7 += v94;
                --v95;
              }
              while (v95);
              v9 += v667;
              v7 += 8 * v666;
              int v108 = v669;
              unint64_t v109 = &v669[8 * v665];
              if ((unint64_t)v109 >= v663) {
                uint64_t v110 = v93;
              }
              else {
                uint64_t v110 = 0;
              }
              uint64_t v111 = &v109[8 * v110];
              uint64_t v112 = v21 + 8 * v110 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v112;
                int v108 = v111;
                uint64_t v14 = v111;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v108;
              --v670;
            }
            while (!v45);
            return result;
          case 5:
            uint64_t v337 = v16;
            uint64_t v338 = -(uint64_t)v18;
            uint64_t v673 = -(v665 * v17);
            uint64_t v339 = 8 * v16;
            do
            {
              int v340 = v668;
              do
              {
                if (*v9)
                {
                  unsigned int v341 = bswap32(*((unsigned __int16 *)v14 + 3));
                  unsigned int v342 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                  unsigned int v343 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                  int v344 = (*v9 | (*v9 << 8)) ^ 0xFFFF;
                  unsigned int v345 = (unsigned __int16)v343 * v344
                       + 0x8000
                       + (((unsigned __int16)v343 * v344 + 0x8000) >> 16);
                  unsigned int v346 = HIWORD(v343) * v344 + 0x8000 + ((HIWORD(v343) * v344 + 0x8000) >> 16);
                  unsigned int v347 = v344 * v342 + 0x8000 + ((v344 * v342 + 0x8000) >> 16);
                  uint64_t v348 = HIWORD(v341)
                       - ((v344 * HIWORD(v341) + 0x8000 + ((v344 * HIWORD(v341) + 0x8000) >> 16)) >> 16);
                  uint64_t v349 = bswap32(*((unsigned __int16 *)v7 + 3)) >> 16;
                  unint64_t result = (unint64_t)RGBA64_DMplusDM(v7, (v348 << 48) | ((unint64_t)(unsigned __int16)(v342 - HIWORD(v347)) << 32) | (unsigned __int16)(v343 - HIWORD(v345)) | ((unsigned __int16)(HIWORD(v343) - HIWORD(v346)) << 16), v349, (v349 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), (unsigned __int16)~(_WORD)v348);
                }
                v9 += v337;
                int v350 = (unsigned __int16 *)&v14[8 * v337];
                if ((unint64_t)v350 >= v21) {
                  uint64_t v351 = v338;
                }
                else {
                  uint64_t v351 = 0;
                }
                uint64_t v14 = (char *)&v350[4 * v351];
                v7 += v339;
                --v340;
              }
              while (v340);
              v9 += v667;
              v7 += 8 * v666;
              uint64_t v352 = v669;
              unsigned int v353 = &v669[8 * v665];
              uint64_t v354 = v673;
              if ((unint64_t)v353 < v663) {
                uint64_t v354 = 0;
              }
              unint64_t v355 = &v353[8 * v354];
              uint64_t v356 = v21 + 8 * v354 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v356;
                uint64_t v352 = v355;
                uint64_t v14 = v355;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v352;
              --v670;
            }
            while (!v45);
            return result;
          case 6:
            uint64_t v357 = v16;
            uint64_t v358 = -(uint64_t)v18;
            uint64_t v674 = -(v665 * v17);
            uint64_t v359 = 8 * v16;
            do
            {
              int v360 = v668;
              do
              {
                int v361 = *v9;
                if (*v9)
                {
                  unsigned int v362 = bswap32(*((unsigned __int16 *)v7 + 3));
                  if (HIWORD(v362) != 0xFFFF)
                  {
                    if ((unsigned __int16)~HIWORD(v362) == 0xFFFF)
                    {
                      uint64_t v363 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                      unint64_t v364 = ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | (v363 << 48) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16);
                      if (v19) {
                        unsigned __int16 v365 = v363;
                      }
                      else {
                        unsigned __int16 v365 = -1;
                      }
                      unint64_t result = (unint64_t)RGBA64_DAM(v7, v364, v365, v361 | (v361 << 8));
                    }
                    else
                    {
                      uint64_t v366 = HIWORD(v362);
                      int v367 = ~HIWORD(v362);
                      unint64_t v368 = (v366 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16);
                      uint64_t v369 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                      unint64_t v370 = ((unint64_t)(bswap32(*((unsigned __int16 *)v14 + 2)) >> 16) << 32) | (v369 << 48) | bswap32(*((unsigned __int16 *)v14 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v14) >> 16);
                      if (v19) {
                        unsigned __int16 v371 = v369;
                      }
                      else {
                        unsigned __int16 v371 = -1;
                      }
                      unint64_t result = (unint64_t)RGBA64_DplusDAM(v7, v368, v370, v371, (257 * v361 * (unsigned __int16)v367+ 0x8000+ ((257 * v361 * (unsigned __int16)v367 + 0x8000) >> 16)) >> 16);
                    }
                  }
                }
                v9 += v357;
                int v372 = (unsigned __int16 *)&v14[8 * v357];
                if ((unint64_t)v372 >= v21) {
                  uint64_t v373 = v358;
                }
                else {
                  uint64_t v373 = 0;
                }
                uint64_t v14 = (char *)&v372[4 * v373];
                v7 += v359;
                --v360;
              }
              while (v360);
              v9 += v667;
              v7 += 8 * v666;
              unint64_t v374 = v669;
              uint64_t v375 = &v669[8 * v665];
              uint64_t v376 = v674;
              if ((unint64_t)v375 < v663) {
                uint64_t v376 = 0;
              }
              unint64_t v377 = &v375[8 * v376];
              uint64_t v378 = v21 + 8 * v376 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v378;
                unint64_t v374 = v377;
                uint64_t v14 = v377;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v374;
              --v670;
            }
            while (!v45);
            return result;
          case 7:
            uint64_t v113 = v16;
            uint64_t v114 = -(uint64_t)v18;
            uint64_t v115 = -(v665 * v17);
            uint64_t v116 = 8 * v16;
            do
            {
              int v117 = v668;
              do
              {
                int v118 = *v9;
                if (*v9)
                {
                  if (v118 == 255)
                  {
                    unsigned int v119 = bswap32(*((unsigned __int16 *)v7 + 1) | (*(unsigned __int16 *)v7 << 16));
                    v120.i32[0] = (unsigned __int16)v119;
                    v120.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v119), 0x10uLL).i32[1];
                    v120.i64[1] = __PAIR64__(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16, bswap32(*((unsigned __int16 *)v7 + 2)) >> 16);
                    v121.i64[0] = 0x800000008000;
                    v121.i64[1] = 0x800000008000;
                    uint32x4_t v122 = (uint32x4_t)vmlaq_s32(v121, v120, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(bswap32(~*((unsigned __int16 *)v14+ 3)) >> 16)));
                    v120.i32[0] = v119;
                    *(int8x8_t *)unint64_t v7 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v120, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v122, v122, 0x10uLL), 0x10uLL))));
                  }
                  else
                  {
                    unsigned int v123 = bswap32(*((unsigned __int16 *)v14 + 3));
                    unint64_t v124 = ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16);
                    unint64_t result = (unint64_t)RGBA64_DMplusDM(v7, v124, (HIWORD(v123) * (v118 | (v118 << 8))+ 0x8000+ ((HIWORD(v123) * (v118 | (v118 << 8)) + 0x8000) >> 16)) >> 16, v124, (v118 | (v118 << 8)) ^ 0xFFFFu);
                  }
                }
                v9 += v113;
                uint64_t v125 = (unsigned __int16 *)&v14[8 * v113];
                if ((unint64_t)v125 >= v21) {
                  uint64_t v126 = v114;
                }
                else {
                  uint64_t v126 = 0;
                }
                uint64_t v14 = (char *)&v125[4 * v126];
                v7 += v116;
                --v117;
              }
              while (v117);
              v9 += v667;
              v7 += 8 * v666;
              unsigned int v127 = v669;
              unsigned int v128 = &v669[8 * v665];
              if ((unint64_t)v128 >= v663) {
                uint64_t v129 = v115;
              }
              else {
                uint64_t v129 = 0;
              }
              unint64_t v130 = &v128[8 * v129];
              uint64_t v131 = v21 + 8 * v129 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v131;
                unsigned int v127 = v130;
                uint64_t v14 = v130;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v127;
              --v670;
            }
            while (!v45);
            return result;
          case 8:
            uint64_t v379 = -(uint64_t)v18;
            uint64_t v380 = -(v665 * v17);
            do
            {
              int v381 = v668;
              do
              {
                int v382 = *v9;
                if (*v9)
                {
                  if (v382 == 255)
                  {
                    unsigned int v383 = bswap32(*((unsigned __int16 *)v7 + 1) | (*(unsigned __int16 *)v7 << 16));
                    v384.i32[0] = (unsigned __int16)v383;
                    v384.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v383), 0x10uLL).i32[1];
                    v384.i64[1] = __PAIR64__(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16, bswap32(*((unsigned __int16 *)v7 + 2)) >> 16);
                    v385.i64[0] = 0x800000008000;
                    v385.i64[1] = 0x800000008000;
                    uint32x4_t v386 = (uint32x4_t)vmlaq_s32(v385, v384, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(bswap32(*((unsigned __int16 *)v14+ 3)) >> 16)));
                    v384.i32[0] = v383;
                    int32x4_t v387 = vsubq_s32(v384, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v386, v386, 0x10uLL), 0x10uLL));
                  }
                  else
                  {
                    unsigned int v388 = bswap32(*((unsigned __int16 *)v7 + 1) | (*(unsigned __int16 *)v7 << 16));
                    unsigned int v389 = bswap32(*((unsigned __int16 *)v14 + 3)) >> 16;
                    v390.i32[0] = (unsigned __int16)v388;
                    v390.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v388), 0x10uLL).i32[1];
                    v390.i64[1] = __PAIR64__(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16, bswap32(*((unsigned __int16 *)v7 + 2)) >> 16);
                    v391.i64[0] = 0x800000008000;
                    v391.i64[1] = 0x800000008000;
                    uint32x4_t v392 = (uint32x4_t)vmlaq_s32(v391, v390, vdupq_n_s32((257 * v382 * v389 + 0x8000 + ((257 * v382 * v389 + 0x8000) >> 16)) >> 16));
                    v390.i32[0] = v388;
                    int32x4_t v387 = vsubq_s32(v390, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v392, v392, 0x10uLL), 0x10uLL));
                  }
                  *(int8x8_t *)unint64_t v7 = vrev16_s8((int8x8_t)vmovn_s32(v387));
                }
                v9 += v16;
                uint64_t v393 = (unsigned __int16 *)&v14[8 * v16];
                if ((unint64_t)v393 >= v21) {
                  uint64_t v394 = v379;
                }
                else {
                  uint64_t v394 = 0;
                }
                uint64_t v14 = (char *)&v393[4 * v394];
                v7 += 8 * v16;
                --v381;
              }
              while (v381);
              v9 += v667;
              v7 += 8 * v666;
              int v395 = v669;
              unint64_t v396 = &v669[8 * v665];
              if ((unint64_t)v396 >= v663) {
                uint64_t v397 = v380;
              }
              else {
                uint64_t v397 = 0;
              }
              unsigned int v398 = &v396[8 * v397];
              uint64_t v399 = v21 + 8 * v397 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v399;
                int v395 = v398;
                uint64_t v14 = v398;
              }
              unint64_t result = (v670 - 1);
              long long v669 = v395;
              int v670 = result;
            }
            while (result);
            return result;
          case 9:
            uint64_t v132 = v16;
            uint64_t v133 = -(uint64_t)v18;
            uint64_t v134 = -(v665 * v17);
            uint64_t v135 = 8 * v16;
            do
            {
              int v136 = v668;
              do
              {
                if (*v9)
                {
                  unsigned int v137 = bswap32(*((unsigned __int16 *)v14 + 3));
                  unsigned int v138 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                  unsigned int v139 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                  unsigned __int16 v140 = ~(*v9 | (*v9 << 8));
                  int v141 = v140;
                  unsigned int v142 = (unsigned __int16)v139 * v141
                       + 0x8000
                       + (((unsigned __int16)v139 * v141 + 0x8000) >> 16);
                  unsigned int v143 = HIWORD(v139) * v141 + 0x8000 + ((HIWORD(v139) * v141 + 0x8000) >> 16);
                  unsigned int v144 = v138 * v141 + 0x8000 + ((v138 * v141 + 0x8000) >> 16);
                  uint64_t v145 = HIWORD(v137)
                       - ((HIWORD(v137) * v141 + 0x8000 + ((HIWORD(v137) * v141 + 0x8000) >> 16)) >> 16);
                  unint64_t v146 = (v145 << 48) | ((unint64_t)(unsigned __int16)(v138 - HIWORD(v144)) << 32) | (unsigned __int16)(v139 - HIWORD(v142)) | ((unsigned __int16)(HIWORD(v139) - HIWORD(v143)) << 16);
                  uint64_t v147 = bswap32(*((unsigned __int16 *)v7 + 3)) >> 16;
                  unint64_t result = (unint64_t)RGBA64_DMplusDM(v7, v146, v147 ^ 0xFFFF, (v147 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), (unsigned __int16)(v145 + v140));
                }
                v9 += v132;
                unsigned int v148 = (unsigned __int16 *)&v14[8 * v132];
                if ((unint64_t)v148 >= v21) {
                  uint64_t v149 = v133;
                }
                else {
                  uint64_t v149 = 0;
                }
                uint64_t v14 = (char *)&v148[4 * v149];
                v7 += v135;
                --v136;
              }
              while (v136);
              v9 += v667;
              v7 += 8 * v666;
              int v150 = v669;
              unint64_t v151 = &v669[8 * v665];
              if ((unint64_t)v151 >= v663) {
                uint64_t v152 = v134;
              }
              else {
                uint64_t v152 = 0;
              }
              uint64_t v153 = &v151[8 * v152];
              uint64_t v154 = v21 + 8 * v152 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v154;
                int v150 = v153;
                uint64_t v14 = v153;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v150;
              --v670;
            }
            while (!v45);
            return result;
          case 10:
            uint64_t v400 = v16;
            uint64_t v401 = -(uint64_t)v18;
            uint64_t v675 = -(v665 * v17);
            uint64_t v402 = 8 * v16;
            do
            {
              int v403 = v668;
              do
              {
                if (*v9)
                {
                  unsigned int v404 = bswap32(*((unsigned __int16 *)v14 + 3));
                  unsigned int v405 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                  unsigned int v406 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                  int v407 = (*v9 | (*v9 << 8)) ^ 0xFFFF;
                  unsigned int v408 = (unsigned __int16)v406 * v407
                       + 0x8000
                       + (((unsigned __int16)v406 * v407 + 0x8000) >> 16);
                  unsigned int v409 = HIWORD(v406) * v407 + 0x8000 + ((HIWORD(v406) * v407 + 0x8000) >> 16);
                  unsigned int v410 = v407 * v405 + 0x8000 + ((v407 * v405 + 0x8000) >> 16);
                  uint64_t v411 = HIWORD(v404)
                       - ((v407 * HIWORD(v404) + 0x8000 + ((v407 * HIWORD(v404) + 0x8000) >> 16)) >> 16);
                  unint64_t v412 = (v411 << 48) | ((unint64_t)(unsigned __int16)(v405 - HIWORD(v410)) << 32) | (unsigned __int16)(v406 - HIWORD(v408)) | ((unsigned __int16)(HIWORD(v406) - HIWORD(v409)) << 16);
                  uint64_t v413 = bswap32(*((unsigned __int16 *)v7 + 3)) >> 16;
                  unint64_t result = (unint64_t)RGBA64_DMplusDM(v7, v412, v413 ^ 0xFFFF, (v413 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), (unsigned __int16)~(_WORD)v411);
                }
                v9 += v400;
                unsigned __int16 v414 = (unsigned __int16 *)&v14[8 * v400];
                if ((unint64_t)v414 >= v21) {
                  uint64_t v415 = v401;
                }
                else {
                  uint64_t v415 = 0;
                }
                uint64_t v14 = (char *)&v414[4 * v415];
                v7 += v402;
                --v403;
              }
              while (v403);
              v9 += v667;
              v7 += 8 * v666;
              unsigned int v416 = v669;
              unint64_t v417 = &v669[8 * v665];
              uint64_t v418 = v675;
              if ((unint64_t)v417 < v663) {
                uint64_t v418 = 0;
              }
              int v419 = &v417[8 * v418];
              uint64_t v420 = v21 + 8 * v418 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v420;
                unsigned int v416 = v419;
                uint64_t v14 = v419;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v416;
              --v670;
            }
            while (!v45);
            return result;
          case 11:
            uint64_t v155 = v16;
            uint64_t v156 = -(uint64_t)v18;
            uint64_t v647 = -(v665 * v17);
            uint64_t v157 = 8 * v16;
            do
            {
              int v158 = v668;
              do
              {
                if (*v9)
                {
                  int v159 = *v9 | (*v9 << 8);
                  unsigned int v160 = bswap32(*((unsigned __int16 *)v14 + 3));
                  unsigned int v161 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                  unsigned int v162 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                  uint64_t v163 = HIWORD(v160)
                       - ((HIWORD(v160) * (v159 ^ 0xFFFF)
                         + 0x8000
                         + ((HIWORD(v160) * (v159 ^ 0xFFFF) + 0x8000) >> 16)) >> 16);
                  unint64_t v164 = (v163 << 48) | ((unint64_t)(unsigned __int16)(v161
                                                                            - ((v161 * (v159 ^ 0xFFFF)
                                                                              + 0x8000
                                                                              + ((v161 * (v159 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v162 - (((unsigned __int16)v162 * (v159 ^ 0xFFFF) + 0x8000 + (((unsigned __int16)v162 * (v159 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(HIWORD(v162) - ((HIWORD(v162) * (v159 ^ 0xFFFF) + 0x8000 + ((HIWORD(v162) * (v159 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 16);
                  uint64_t v165 = bswap32(*((unsigned __int16 *)v7 + 3)) >> 16;
                  unint64_t v166 = ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v165 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16);
                  if (v671) {
                    unsigned __int16 v167 = v165;
                  }
                  else {
                    unsigned __int16 v167 = -1;
                  }
                  if (v19) {
                    LOWORD(v159) = v163;
                  }
                  unint64_t result = (unint64_t)RGBA64_DAplusdDA(v7, v166, v167, v164, (unsigned __int16)v159);
                }
                v9 += v155;
                unsigned int v168 = (unsigned __int16 *)&v14[8 * v155];
                if ((unint64_t)v168 >= v21) {
                  uint64_t v169 = v156;
                }
                else {
                  uint64_t v169 = 0;
                }
                uint64_t v14 = (char *)&v168[4 * v169];
                v7 += v157;
                --v158;
              }
              while (v158);
              v9 += v667;
              v7 += 8 * v666;
              int v170 = v669;
              unint64_t v171 = &v669[8 * v665];
              uint64_t v172 = v647;
              if ((unint64_t)v171 < v663) {
                uint64_t v172 = 0;
              }
              uint64_t v173 = &v171[8 * v172];
              uint64_t v174 = v21 + 8 * v172 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v174;
                int v170 = v173;
                uint64_t v14 = v173;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v170;
              --v670;
            }
            while (!v45);
            return result;
          case 12:
            uint64_t v175 = v16;
            uint64_t v176 = -(uint64_t)v18;
            uint64_t v672 = -(v665 * v17);
            uint64_t v177 = 8 * v16;
            do
            {
              int v178 = v668;
              do
              {
                if (*v9)
                {
                  int v179 = *v9 | (*v9 << 8);
                  unsigned int v180 = bswap32(*((unsigned __int16 *)v14 + 3));
                  unsigned int v181 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                  unsigned int v182 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                  uint64_t v183 = HIWORD(v180)
                       - ((HIWORD(v180) * (v179 ^ 0xFFFF)
                         + 0x8000
                         + ((HIWORD(v180) * (v179 ^ 0xFFFF) + 0x8000) >> 16)) >> 16);
                  unint64_t v184 = (v183 << 48) | ((unint64_t)(unsigned __int16)(v181
                                                                            - ((v181 * (v179 ^ 0xFFFF)
                                                                              + 0x8000
                                                                              + ((v181 * (v179 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v182 - (((unsigned __int16)v182 * (v179 ^ 0xFFFF) + 0x8000 + (((unsigned __int16)v182 * (v179 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(HIWORD(v182) - ((HIWORD(v182) * (v179 ^ 0xFFFF) + 0x8000 + ((HIWORD(v182) * (v179 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 16);
                  unint64_t v185 = ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16);
                  if (v19) {
                    LOWORD(v179) = v183;
                  }
                  unint64_t result = (unint64_t)RGBA64_DpluslDA(v7, v185, v184, (unsigned __int16)v179);
                }
                v9 += v175;
                int v186 = (unsigned __int16 *)&v14[8 * v175];
                if ((unint64_t)v186 >= v21) {
                  uint64_t v187 = v176;
                }
                else {
                  uint64_t v187 = 0;
                }
                uint64_t v14 = (char *)&v186[4 * v187];
                v7 += v177;
                --v178;
              }
              while (v178);
              v9 += v667;
              v7 += 8 * v666;
              BOOL v188 = v669;
              int v189 = &v669[8 * v665];
              uint64_t v190 = v672;
              if ((unint64_t)v189 < v663) {
                uint64_t v190 = 0;
              }
              int v191 = &v189[8 * v190];
              uint64_t v192 = v21 + 8 * v190 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v192;
                BOOL v188 = v191;
                uint64_t v14 = v191;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v188;
              --v670;
            }
            while (!v45);
            return result;
          case 13:
            uint64_t v421 = v16;
            uint64_t v422 = -(uint64_t)v18;
            uint64_t v654 = -(v665 * v17);
            uint64_t v423 = 8 * v16;
            while (1)
            {
              int v424 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_430;
                }
                LODWORD(v425) = *v9 | (*v9 << 8);
                unsigned int v426 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v427 = v425 ^ 0xFFFF;
                uint64_t v428 = HIWORD(v426)
                     - ((HIWORD(v426) * v427 + 0x8000 + ((HIWORD(v426) * v427 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v428) {
                    goto LABEL_430;
                  }
                  LODWORD(v425) = v428;
                }
                unsigned int v429 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v430 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v431 = v430
                     - (((unsigned __int16)v430 * v427
                       + 0x8000
                       + (((unsigned __int16)v430 * v427 + 0x8000) >> 16)) >> 16);
                unsigned int v432 = HIWORD(v430)
                     - ((HIWORD(v430) * v427 + 0x8000 + ((HIWORD(v430) * v427 + 0x8000) >> 16)) >> 16);
                unsigned int v433 = v429 - ((v429 * v427 + 0x8000 + ((v429 * v427 + 0x8000) >> 16)) >> 16);
                uint64_t v434 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v435 = 0xFFFF;
LABEL_428:
                  unint64_t result = PDAmultiplyPDA_14785(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v434 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v435, (unsigned __int16)v431 | ((unsigned __int16)v432 << 16) | (unint64_t)(v428 << 48) | ((unint64_t)(unsigned __int16)v433 << 32), (unsigned __int16)v425);
                  unint64_t v425 = HIWORD(result);
                  unsigned int v437 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v437);
                  *((_WORD *)v7 + 1) = v437;
                  unsigned int v436 = bswap32(HIDWORD(result));
                  goto LABEL_429;
                }
                unsigned int v435 = v434;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_428;
                }
                *(_WORD *)unint64_t v7 = bswap32(v431) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v432) >> 16;
                unsigned int v436 = bswap32(v433);
LABEL_429:
                *((_WORD *)v7 + 2) = HIWORD(v436);
                *((_WORD *)v7 + 3) = bswap32(v425) >> 16;
LABEL_430:
                v9 += v421;
                uint64_t v438 = (unsigned __int16 *)&v14[8 * v421];
                if ((unint64_t)v438 >= v21) {
                  uint64_t v439 = v422;
                }
                else {
                  uint64_t v439 = 0;
                }
                uint64_t v14 = (char *)&v438[4 * v439];
                v7 += v423;
                --v424;
              }
              while (v424);
              v9 += v667;
              v7 += 8 * v666;
              int v440 = v669;
              uint8x8_t v441 = &v669[8 * v665];
              uint64_t v442 = v654;
              if ((unint64_t)v441 < v663) {
                uint64_t v442 = 0;
              }
              uint64_t v443 = &v441[8 * v442];
              uint64_t v444 = v21 + 8 * v442 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v444;
                int v440 = v443;
                uint64_t v14 = v443;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v440;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 14:
            uint64_t v193 = v16;
            uint64_t v194 = -(uint64_t)v18;
            uint64_t v648 = -(v665 * v17);
            uint64_t v195 = 8 * v16;
            while (1)
            {
              int v196 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_210;
                }
                LODWORD(v197) = *v9 | (*v9 << 8);
                unsigned int v198 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v199 = v197 ^ 0xFFFF;
                uint64_t v200 = HIWORD(v198)
                     - ((HIWORD(v198) * v199 + 0x8000 + ((HIWORD(v198) * v199 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v200) {
                    goto LABEL_210;
                  }
                  LODWORD(v197) = v200;
                }
                unsigned int v201 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v202 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v203 = v202
                     - (((unsigned __int16)v202 * v199
                       + 0x8000
                       + (((unsigned __int16)v202 * v199 + 0x8000) >> 16)) >> 16);
                unsigned int v204 = HIWORD(v202)
                     - ((HIWORD(v202) * v199 + 0x8000 + ((HIWORD(v202) * v199 + 0x8000) >> 16)) >> 16);
                unsigned int v205 = v201 - ((v201 * v199 + 0x8000 + ((v201 * v199 + 0x8000) >> 16)) >> 16);
                uint64_t v206 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v207 = 0xFFFF;
LABEL_208:
                  unint64_t result = PDAscreenPDA_14786(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v206 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v207, (unsigned __int16)v203 | ((unsigned __int16)v204 << 16) | (unint64_t)(v200 << 48) | ((unint64_t)(unsigned __int16)v205 << 32), (unsigned __int16)v197);
                  unint64_t v197 = HIWORD(result);
                  unsigned int v209 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v209);
                  *((_WORD *)v7 + 1) = v209;
                  unsigned int v208 = bswap32(HIDWORD(result));
                  goto LABEL_209;
                }
                unsigned int v207 = v206;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_208;
                }
                *(_WORD *)unint64_t v7 = bswap32(v203) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v204) >> 16;
                unsigned int v208 = bswap32(v205);
LABEL_209:
                *((_WORD *)v7 + 2) = HIWORD(v208);
                *((_WORD *)v7 + 3) = bswap32(v197) >> 16;
LABEL_210:
                v9 += v193;
                int32x4_t v210 = (unsigned __int16 *)&v14[8 * v193];
                if ((unint64_t)v210 >= v21) {
                  uint64_t v211 = v194;
                }
                else {
                  uint64_t v211 = 0;
                }
                uint64_t v14 = (char *)&v210[4 * v211];
                v7 += v195;
                --v196;
              }
              while (v196);
              v9 += v667;
              v7 += 8 * v666;
              int v212 = v669;
              unsigned int v213 = &v669[8 * v665];
              uint64_t v214 = v648;
              if ((unint64_t)v213 < v663) {
                uint64_t v214 = 0;
              }
              int32x4_t v215 = &v213[8 * v214];
              uint64_t v216 = v21 + 8 * v214 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v216;
                int v212 = v215;
                uint64_t v14 = v215;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v212;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 15:
            uint64_t v217 = v16;
            uint64_t v218 = -(uint64_t)v18;
            uint64_t v649 = -(v665 * v17);
            uint64_t v219 = 8 * v16;
            while (1)
            {
              int v220 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_234;
                }
                LODWORD(v221) = *v9 | (*v9 << 8);
                unsigned int v222 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v223 = v221 ^ 0xFFFF;
                uint64_t v224 = HIWORD(v222)
                     - ((HIWORD(v222) * v223 + 0x8000 + ((HIWORD(v222) * v223 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v224) {
                    goto LABEL_234;
                  }
                  LODWORD(v221) = v224;
                }
                unsigned int v225 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v226 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v227 = v226
                     - (((unsigned __int16)v226 * v223
                       + 0x8000
                       + (((unsigned __int16)v226 * v223 + 0x8000) >> 16)) >> 16);
                unsigned int v228 = HIWORD(v226)
                     - ((HIWORD(v226) * v223 + 0x8000 + ((HIWORD(v226) * v223 + 0x8000) >> 16)) >> 16);
                unsigned int v229 = v225 - ((v225 * v223 + 0x8000 + ((v225 * v223 + 0x8000) >> 16)) >> 16);
                uint64_t v230 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v231 = 0xFFFF;
LABEL_232:
                  unint64_t result = PDAoverlayPDA_14787(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v230 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v231, (unsigned __int16)v227 | ((unsigned __int16)v228 << 16) | (unint64_t)(v224 << 48) | ((unint64_t)(unsigned __int16)v229 << 32), (unsigned __int16)v221);
                  unint64_t v221 = HIWORD(result);
                  unsigned int v233 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v233);
                  *((_WORD *)v7 + 1) = v233;
                  unsigned int v232 = bswap32(HIDWORD(result));
                  goto LABEL_233;
                }
                unsigned int v231 = v230;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_232;
                }
                *(_WORD *)unint64_t v7 = bswap32(v227) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v228) >> 16;
                unsigned int v232 = bswap32(v229);
LABEL_233:
                *((_WORD *)v7 + 2) = HIWORD(v232);
                *((_WORD *)v7 + 3) = bswap32(v221) >> 16;
LABEL_234:
                v9 += v217;
                __int16 v234 = (unsigned __int16 *)&v14[8 * v217];
                if ((unint64_t)v234 >= v21) {
                  uint64_t v235 = v218;
                }
                else {
                  uint64_t v235 = 0;
                }
                uint64_t v14 = (char *)&v234[4 * v235];
                v7 += v219;
                --v220;
              }
              while (v220);
              v9 += v667;
              v7 += 8 * v666;
              uint32x4_t v236 = v669;
              unint64_t v237 = &v669[8 * v665];
              uint64_t v238 = v649;
              if ((unint64_t)v237 < v663) {
                uint64_t v238 = 0;
              }
              unsigned int v239 = &v237[8 * v238];
              uint64_t v240 = v21 + 8 * v238 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v240;
                uint32x4_t v236 = v239;
                uint64_t v14 = v239;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v236;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 16:
            uint64_t v241 = v16;
            uint64_t v242 = -(uint64_t)v18;
            uint64_t v650 = -(v665 * v17);
            uint64_t v243 = 8 * v16;
            while (1)
            {
              int v244 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_258;
                }
                LODWORD(v245) = *v9 | (*v9 << 8);
                unsigned int v246 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v247 = v245 ^ 0xFFFF;
                uint64_t v248 = HIWORD(v246)
                     - ((HIWORD(v246) * v247 + 0x8000 + ((HIWORD(v246) * v247 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v248) {
                    goto LABEL_258;
                  }
                  LODWORD(v245) = v248;
                }
                unsigned int v249 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v250 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v251 = v250
                     - (((unsigned __int16)v250 * v247
                       + 0x8000
                       + (((unsigned __int16)v250 * v247 + 0x8000) >> 16)) >> 16);
                unsigned int v252 = HIWORD(v250)
                     - ((HIWORD(v250) * v247 + 0x8000 + ((HIWORD(v250) * v247 + 0x8000) >> 16)) >> 16);
                unsigned int v253 = v249 - ((v249 * v247 + 0x8000 + ((v249 * v247 + 0x8000) >> 16)) >> 16);
                uint64_t v254 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v255 = 0xFFFF;
LABEL_256:
                  unint64_t result = PDAdarkenPDA_14789(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v254 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v255, (unsigned __int16)v251 | ((unsigned __int16)v252 << 16) | (unint64_t)(v248 << 48) | ((unint64_t)(unsigned __int16)v253 << 32), (unsigned __int16)v245);
                  unint64_t v245 = HIWORD(result);
                  unsigned int v257 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v257);
                  *((_WORD *)v7 + 1) = v257;
                  unsigned int v256 = bswap32(HIDWORD(result));
                  goto LABEL_257;
                }
                unsigned int v255 = v254;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_256;
                }
                *(_WORD *)unint64_t v7 = bswap32(v251) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v252) >> 16;
                unsigned int v256 = bswap32(v253);
LABEL_257:
                *((_WORD *)v7 + 2) = HIWORD(v256);
                *((_WORD *)v7 + 3) = bswap32(v245) >> 16;
LABEL_258:
                v9 += v241;
                int v258 = (unsigned __int16 *)&v14[8 * v241];
                if ((unint64_t)v258 >= v21) {
                  uint64_t v259 = v242;
                }
                else {
                  uint64_t v259 = 0;
                }
                uint64_t v14 = (char *)&v258[4 * v259];
                v7 += v243;
                --v244;
              }
              while (v244);
              v9 += v667;
              v7 += 8 * v666;
              unint64_t v260 = v669;
              int v261 = &v669[8 * v665];
              uint64_t v262 = v650;
              if ((unint64_t)v261 < v663) {
                uint64_t v262 = 0;
              }
              uint64_t v263 = &v261[8 * v262];
              uint64_t v264 = v21 + 8 * v262 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v264;
                unint64_t v260 = v263;
                uint64_t v14 = v263;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v260;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 17:
            uint64_t v445 = v16;
            uint64_t v446 = -(uint64_t)v18;
            uint64_t v655 = -(v665 * v17);
            uint64_t v447 = 8 * v16;
            while (1)
            {
              int v448 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_454;
                }
                LODWORD(v449) = *v9 | (*v9 << 8);
                unsigned int v450 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v451 = v449 ^ 0xFFFF;
                uint64_t v452 = HIWORD(v450)
                     - ((HIWORD(v450) * v451 + 0x8000 + ((HIWORD(v450) * v451 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v452) {
                    goto LABEL_454;
                  }
                  LODWORD(v449) = v452;
                }
                unsigned int v453 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v454 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v455 = v454
                     - (((unsigned __int16)v454 * v451
                       + 0x8000
                       + (((unsigned __int16)v454 * v451 + 0x8000) >> 16)) >> 16);
                unsigned int v456 = HIWORD(v454)
                     - ((HIWORD(v454) * v451 + 0x8000 + ((HIWORD(v454) * v451 + 0x8000) >> 16)) >> 16);
                unsigned int v457 = v453 - ((v453 * v451 + 0x8000 + ((v453 * v451 + 0x8000) >> 16)) >> 16);
                uint64_t v458 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v459 = 0xFFFF;
LABEL_452:
                  unint64_t result = PDAlightenPDA_14788(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v458 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v459, (unsigned __int16)v455 | ((unsigned __int16)v456 << 16) | (unint64_t)(v452 << 48) | ((unint64_t)(unsigned __int16)v457 << 32), (unsigned __int16)v449);
                  unint64_t v449 = HIWORD(result);
                  unsigned int v461 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v461);
                  *((_WORD *)v7 + 1) = v461;
                  unsigned int v460 = bswap32(HIDWORD(result));
                  goto LABEL_453;
                }
                unsigned int v459 = v458;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_452;
                }
                *(_WORD *)unint64_t v7 = bswap32(v455) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v456) >> 16;
                unsigned int v460 = bswap32(v457);
LABEL_453:
                *((_WORD *)v7 + 2) = HIWORD(v460);
                *((_WORD *)v7 + 3) = bswap32(v449) >> 16;
LABEL_454:
                v9 += v445;
                int v462 = (unsigned __int16 *)&v14[8 * v445];
                if ((unint64_t)v462 >= v21) {
                  uint64_t v463 = v446;
                }
                else {
                  uint64_t v463 = 0;
                }
                uint64_t v14 = (char *)&v462[4 * v463];
                v7 += v447;
                --v448;
              }
              while (v448);
              v9 += v667;
              v7 += 8 * v666;
              uint64x2_t v464 = v669;
              uint64_t v465 = &v669[8 * v665];
              uint64_t v466 = v655;
              if ((unint64_t)v465 < v663) {
                uint64_t v466 = 0;
              }
              uint64_t v467 = &v465[8 * v466];
              uint64_t v468 = v21 + 8 * v466 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v468;
                uint64x2_t v464 = v467;
                uint64_t v14 = v467;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v464;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 18:
            uint64_t v469 = v16;
            uint64_t v470 = -(uint64_t)v18;
            uint64_t v656 = -(v665 * v17);
            uint64_t v471 = 8 * v16;
            while (1)
            {
              int v472 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_478;
                }
                LODWORD(v473) = *v9 | (*v9 << 8);
                unsigned int v474 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v475 = v473 ^ 0xFFFF;
                uint64_t v476 = HIWORD(v474)
                     - ((HIWORD(v474) * v475 + 0x8000 + ((HIWORD(v474) * v475 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v476) {
                    goto LABEL_478;
                  }
                  LODWORD(v473) = v476;
                }
                unsigned int v477 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v478 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v479 = v478
                     - (((unsigned __int16)v478 * v475
                       + 0x8000
                       + (((unsigned __int16)v478 * v475 + 0x8000) >> 16)) >> 16);
                unsigned int v480 = HIWORD(v478)
                     - ((HIWORD(v478) * v475 + 0x8000 + ((HIWORD(v478) * v475 + 0x8000) >> 16)) >> 16);
                unsigned int v481 = v477 - ((v477 * v475 + 0x8000 + ((v477 * v475 + 0x8000) >> 16)) >> 16);
                uint64_t v482 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v483 = 0xFFFF;
LABEL_476:
                  unint64_t result = PDAcolordodgePDA_14790(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v482 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v483, (unsigned __int16)v479 | ((unsigned __int16)v480 << 16) | (unint64_t)(v476 << 48) | ((unint64_t)(unsigned __int16)v481 << 32), (unsigned __int16)v473);
                  unint64_t v473 = HIWORD(result);
                  unsigned int v485 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v485);
                  *((_WORD *)v7 + 1) = v485;
                  unsigned int v484 = bswap32(HIDWORD(result));
                  goto LABEL_477;
                }
                unsigned int v483 = v482;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_476;
                }
                *(_WORD *)unint64_t v7 = bswap32(v479) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v480) >> 16;
                unsigned int v484 = bswap32(v481);
LABEL_477:
                *((_WORD *)v7 + 2) = HIWORD(v484);
                *((_WORD *)v7 + 3) = bswap32(v473) >> 16;
LABEL_478:
                v9 += v469;
                int v486 = (unsigned __int16 *)&v14[8 * v469];
                if ((unint64_t)v486 >= v21) {
                  uint64_t v487 = v470;
                }
                else {
                  uint64_t v487 = 0;
                }
                uint64_t v14 = (char *)&v486[4 * v487];
                v7 += v471;
                --v472;
              }
              while (v472);
              v9 += v667;
              v7 += 8 * v666;
              int32x4_t v488 = v669;
              uint32x4_t v489 = &v669[8 * v665];
              uint64_t v490 = v656;
              if ((unint64_t)v489 < v663) {
                uint64_t v490 = 0;
              }
              int32x4_t v491 = &v489[8 * v490];
              uint64_t v492 = v21 + 8 * v490 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v492;
                int32x4_t v488 = v491;
                uint64_t v14 = v491;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v488;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 19:
            uint64_t v493 = v16;
            uint64_t v494 = -(uint64_t)v18;
            uint64_t v657 = -(v665 * v17);
            uint64_t v495 = 8 * v16;
            while (1)
            {
              int v496 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_502;
                }
                LODWORD(v497) = *v9 | (*v9 << 8);
                unsigned int v498 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v499 = v497 ^ 0xFFFF;
                uint64_t v500 = HIWORD(v498)
                     - ((HIWORD(v498) * v499 + 0x8000 + ((HIWORD(v498) * v499 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v500) {
                    goto LABEL_502;
                  }
                  LODWORD(v497) = v500;
                }
                unsigned int v501 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v502 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v503 = v502
                     - (((unsigned __int16)v502 * v499
                       + 0x8000
                       + (((unsigned __int16)v502 * v499 + 0x8000) >> 16)) >> 16);
                unsigned int v504 = HIWORD(v502)
                     - ((HIWORD(v502) * v499 + 0x8000 + ((HIWORD(v502) * v499 + 0x8000) >> 16)) >> 16);
                unsigned int v505 = v501 - ((v501 * v499 + 0x8000 + ((v501 * v499 + 0x8000) >> 16)) >> 16);
                uint64_t v506 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v507 = 0xFFFF;
LABEL_500:
                  unint64_t result = PDAcolorburnPDA_14791(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v506 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v507, (unsigned __int16)v503 | ((unsigned __int16)v504 << 16) | (unint64_t)(v500 << 48) | ((unint64_t)(unsigned __int16)v505 << 32), (unsigned __int16)v497);
                  unint64_t v497 = HIWORD(result);
                  unsigned int v509 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v509);
                  *((_WORD *)v7 + 1) = v509;
                  unsigned int v508 = bswap32(HIDWORD(result));
                  goto LABEL_501;
                }
                unsigned int v507 = v506;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_500;
                }
                *(_WORD *)unint64_t v7 = bswap32(v503) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v504) >> 16;
                unsigned int v508 = bswap32(v505);
LABEL_501:
                *((_WORD *)v7 + 2) = HIWORD(v508);
                *((_WORD *)v7 + 3) = bswap32(v497) >> 16;
LABEL_502:
                v9 += v493;
                int v510 = (unsigned __int16 *)&v14[8 * v493];
                if ((unint64_t)v510 >= v21) {
                  uint64_t v511 = v494;
                }
                else {
                  uint64_t v511 = 0;
                }
                uint64_t v14 = (char *)&v510[4 * v511];
                v7 += v495;
                --v496;
              }
              while (v496);
              v9 += v667;
              v7 += 8 * v666;
              unsigned int v512 = v669;
              int32x4_t v513 = &v669[8 * v665];
              uint64_t v514 = v657;
              if ((unint64_t)v513 < v663) {
                uint64_t v514 = 0;
              }
              uint32x4_t v515 = &v513[8 * v514];
              uint64_t v516 = v21 + 8 * v514 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v516;
                unsigned int v512 = v515;
                uint64_t v14 = v515;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v512;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 20:
            uint64_t v517 = v16;
            uint64_t v518 = -(uint64_t)v18;
            uint64_t v658 = -(v665 * v17);
            uint64_t v519 = 8 * v16;
            while (1)
            {
              int v520 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_526;
                }
                LODWORD(v521) = *v9 | (*v9 << 8);
                unsigned int v522 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v523 = v521 ^ 0xFFFF;
                uint64_t v524 = HIWORD(v522)
                     - ((HIWORD(v522) * v523 + 0x8000 + ((HIWORD(v522) * v523 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v524) {
                    goto LABEL_526;
                  }
                  LODWORD(v521) = v524;
                }
                unsigned int v525 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v526 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v527 = v526
                     - (((unsigned __int16)v526 * v523
                       + 0x8000
                       + (((unsigned __int16)v526 * v523 + 0x8000) >> 16)) >> 16);
                unsigned int v528 = HIWORD(v526)
                     - ((HIWORD(v526) * v523 + 0x8000 + ((HIWORD(v526) * v523 + 0x8000) >> 16)) >> 16);
                unsigned int v529 = v525 - ((v525 * v523 + 0x8000 + ((v525 * v523 + 0x8000) >> 16)) >> 16);
                uint64_t v530 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v531 = 0xFFFF;
LABEL_524:
                  unint64_t result = PDAsoftlightPDA_14793(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v530 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v531, (unsigned __int16)v527 | ((unsigned __int16)v528 << 16) | (unint64_t)(v524 << 48) | ((unint64_t)(unsigned __int16)v529 << 32), (unsigned __int16)v521);
                  unint64_t v521 = HIWORD(result);
                  unsigned int v533 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v533);
                  *((_WORD *)v7 + 1) = v533;
                  unsigned int v532 = bswap32(HIDWORD(result));
                  goto LABEL_525;
                }
                unsigned int v531 = v530;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_524;
                }
                *(_WORD *)unint64_t v7 = bswap32(v527) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v528) >> 16;
                unsigned int v532 = bswap32(v529);
LABEL_525:
                *((_WORD *)v7 + 2) = HIWORD(v532);
                *((_WORD *)v7 + 3) = bswap32(v521) >> 16;
LABEL_526:
                v9 += v517;
                unint64_t v534 = (unsigned __int16 *)&v14[8 * v517];
                if ((unint64_t)v534 >= v21) {
                  uint64_t v535 = v518;
                }
                else {
                  uint64_t v535 = 0;
                }
                uint64_t v14 = (char *)&v534[4 * v535];
                v7 += v519;
                --v520;
              }
              while (v520);
              v9 += v667;
              v7 += 8 * v666;
              int v536 = v669;
              int v537 = &v669[8 * v665];
              uint64_t v538 = v658;
              if ((unint64_t)v537 < v663) {
                uint64_t v538 = 0;
              }
              unsigned int v539 = &v537[8 * v538];
              uint64_t v540 = v21 + 8 * v538 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v540;
                int v536 = v539;
                uint64_t v14 = v539;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v536;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 21:
            uint64_t v541 = v16;
            uint64_t v542 = -(uint64_t)v18;
            uint64_t v659 = -(v665 * v17);
            uint64_t v543 = 8 * v16;
            while (1)
            {
              int v544 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_550;
                }
                LODWORD(v545) = *v9 | (*v9 << 8);
                unsigned int v546 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v547 = v545 ^ 0xFFFF;
                uint64_t v548 = HIWORD(v546)
                     - ((HIWORD(v546) * v547 + 0x8000 + ((HIWORD(v546) * v547 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v548) {
                    goto LABEL_550;
                  }
                  LODWORD(v545) = v548;
                }
                unsigned int v549 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v550 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v551 = v550
                     - (((unsigned __int16)v550 * v547
                       + 0x8000
                       + (((unsigned __int16)v550 * v547 + 0x8000) >> 16)) >> 16);
                unsigned int v552 = HIWORD(v550)
                     - ((HIWORD(v550) * v547 + 0x8000 + ((HIWORD(v550) * v547 + 0x8000) >> 16)) >> 16);
                unsigned int v553 = v549 - ((v549 * v547 + 0x8000 + ((v549 * v547 + 0x8000) >> 16)) >> 16);
                uint64_t v554 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v555 = 0xFFFF;
LABEL_548:
                  unint64_t result = PDAhardlightPDA_14792(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v554 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v555, (unsigned __int16)v551 | ((unsigned __int16)v552 << 16) | (unint64_t)(v548 << 48) | ((unint64_t)(unsigned __int16)v553 << 32), (unsigned __int16)v545);
                  unint64_t v545 = HIWORD(result);
                  unsigned int v557 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v557);
                  *((_WORD *)v7 + 1) = v557;
                  unsigned int v556 = bswap32(HIDWORD(result));
                  goto LABEL_549;
                }
                unsigned int v555 = v554;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_548;
                }
                *(_WORD *)unint64_t v7 = bswap32(v551) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v552) >> 16;
                unsigned int v556 = bswap32(v553);
LABEL_549:
                *((_WORD *)v7 + 2) = HIWORD(v556);
                *((_WORD *)v7 + 3) = bswap32(v545) >> 16;
LABEL_550:
                v9 += v541;
                int v558 = (unsigned __int16 *)&v14[8 * v541];
                if ((unint64_t)v558 >= v21) {
                  uint64_t v559 = v542;
                }
                else {
                  uint64_t v559 = 0;
                }
                uint64_t v14 = (char *)&v558[4 * v559];
                v7 += v543;
                --v544;
              }
              while (v544);
              v9 += v667;
              v7 += 8 * v666;
              unsigned int v560 = v669;
              unsigned __int16 v561 = &v669[8 * v665];
              uint64_t v562 = v659;
              if ((unint64_t)v561 < v663) {
                uint64_t v562 = 0;
              }
              unsigned int v563 = &v561[8 * v562];
              uint64_t v564 = v21 + 8 * v562 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v564;
                unsigned int v560 = v563;
                uint64_t v14 = v563;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v560;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 22:
            uint64_t v565 = v16;
            uint64_t v566 = -(uint64_t)v18;
            uint64_t v660 = -(v665 * v17);
            uint64_t v567 = 8 * v16;
            while (1)
            {
              int v568 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_574;
                }
                LODWORD(v569) = *v9 | (*v9 << 8);
                unsigned int v570 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v571 = v569 ^ 0xFFFF;
                uint64_t v572 = HIWORD(v570)
                     - ((HIWORD(v570) * v571 + 0x8000 + ((HIWORD(v570) * v571 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v572) {
                    goto LABEL_574;
                  }
                  LODWORD(v569) = v572;
                }
                unsigned int v573 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v574 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v575 = v574
                     - (((unsigned __int16)v574 * v571
                       + 0x8000
                       + (((unsigned __int16)v574 * v571 + 0x8000) >> 16)) >> 16);
                unsigned int v576 = HIWORD(v574)
                     - ((HIWORD(v574) * v571 + 0x8000 + ((HIWORD(v574) * v571 + 0x8000) >> 16)) >> 16);
                unsigned int v577 = v573 - ((v573 * v571 + 0x8000 + ((v573 * v571 + 0x8000) >> 16)) >> 16);
                uint64_t v578 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v579 = 0xFFFF;
LABEL_572:
                  unint64_t result = PDAdifferencePDA_14794(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v578 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v579, (unsigned __int16)v575 | ((unsigned __int16)v576 << 16) | (unint64_t)(v572 << 48) | ((unint64_t)(unsigned __int16)v577 << 32), (unsigned __int16)v569);
                  unint64_t v569 = HIWORD(result);
                  unsigned int v581 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v581);
                  *((_WORD *)v7 + 1) = v581;
                  unsigned int v580 = bswap32(HIDWORD(result));
                  goto LABEL_573;
                }
                unsigned int v579 = v578;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_572;
                }
                *(_WORD *)unint64_t v7 = bswap32(v575) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v576) >> 16;
                unsigned int v580 = bswap32(v577);
LABEL_573:
                *((_WORD *)v7 + 2) = HIWORD(v580);
                *((_WORD *)v7 + 3) = bswap32(v569) >> 16;
LABEL_574:
                v9 += v565;
                unsigned __int16 v582 = (unsigned __int16 *)&v14[8 * v565];
                if ((unint64_t)v582 >= v21) {
                  uint64_t v583 = v566;
                }
                else {
                  uint64_t v583 = 0;
                }
                uint64_t v14 = (char *)&v582[4 * v583];
                v7 += v567;
                --v568;
              }
              while (v568);
              v9 += v667;
              v7 += 8 * v666;
              unsigned int v584 = v669;
              int v585 = &v669[8 * v665];
              uint64_t v586 = v660;
              if ((unint64_t)v585 < v663) {
                uint64_t v586 = 0;
              }
              uint64_t v587 = &v585[8 * v586];
              uint64_t v588 = v21 + 8 * v586 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v588;
                unsigned int v584 = v587;
                uint64_t v14 = v587;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v584;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 23:
            uint64_t v589 = v16;
            uint64_t v590 = -(uint64_t)v18;
            uint64_t v661 = -(v665 * v17);
            uint64_t v591 = 8 * v16;
            while (1)
            {
              int v592 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_598;
                }
                LODWORD(v593) = *v9 | (*v9 << 8);
                unsigned int v594 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v595 = v593 ^ 0xFFFF;
                uint64_t v596 = HIWORD(v594)
                     - ((HIWORD(v594) * v595 + 0x8000 + ((HIWORD(v594) * v595 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v596) {
                    goto LABEL_598;
                  }
                  LODWORD(v593) = v596;
                }
                unsigned int v597 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v598 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v599 = v598
                     - (((unsigned __int16)v598 * v595
                       + 0x8000
                       + (((unsigned __int16)v598 * v595 + 0x8000) >> 16)) >> 16);
                unsigned int v600 = HIWORD(v598)
                     - ((HIWORD(v598) * v595 + 0x8000 + ((HIWORD(v598) * v595 + 0x8000) >> 16)) >> 16);
                unsigned int v601 = v597 - ((v597 * v595 + 0x8000 + ((v597 * v595 + 0x8000) >> 16)) >> 16);
                uint64_t v602 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v603 = 0xFFFF;
LABEL_596:
                  unint64_t result = PDAexclusionPDA_14795(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v602 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v603, (unsigned __int16)v599 | ((unsigned __int16)v600 << 16) | (unint64_t)(v596 << 48) | ((unint64_t)(unsigned __int16)v601 << 32), (unsigned __int16)v593);
                  unint64_t v593 = HIWORD(result);
                  unsigned int v605 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v605);
                  *((_WORD *)v7 + 1) = v605;
                  unsigned int v604 = bswap32(HIDWORD(result));
                  goto LABEL_597;
                }
                unsigned int v603 = v602;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_596;
                }
                *(_WORD *)unint64_t v7 = bswap32(v599) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v600) >> 16;
                unsigned int v604 = bswap32(v601);
LABEL_597:
                *((_WORD *)v7 + 2) = HIWORD(v604);
                *((_WORD *)v7 + 3) = bswap32(v593) >> 16;
LABEL_598:
                v9 += v589;
                int v606 = (unsigned __int16 *)&v14[8 * v589];
                if ((unint64_t)v606 >= v21) {
                  uint64_t v607 = v590;
                }
                else {
                  uint64_t v607 = 0;
                }
                uint64_t v14 = (char *)&v606[4 * v607];
                v7 += v591;
                --v592;
              }
              while (v592);
              v9 += v667;
              v7 += 8 * v666;
              uint64_t v608 = v669;
              unsigned int v609 = &v669[8 * v665];
              uint64_t v610 = v661;
              if ((unint64_t)v609 < v663) {
                uint64_t v610 = 0;
              }
              unint64_t v611 = &v609[8 * v610];
              uint64_t v612 = v21 + 8 * v610 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v612;
                uint64_t v608 = v611;
                uint64_t v14 = v611;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v608;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 24:
            uint64_t v265 = v16;
            uint64_t v266 = -(uint64_t)v18;
            uint64_t v651 = -(v665 * v17);
            uint64_t v267 = 8 * v16;
            while (1)
            {
              int v268 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_282;
                }
                LODWORD(v269) = *v9 | (*v9 << 8);
                unsigned int v270 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v271 = v269 ^ 0xFFFF;
                uint64_t v272 = HIWORD(v270)
                     - ((HIWORD(v270) * v271 + 0x8000 + ((HIWORD(v270) * v271 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v272) {
                    goto LABEL_282;
                  }
                  LODWORD(v269) = v272;
                }
                unsigned int v273 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v274 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v275 = v274
                     - (((unsigned __int16)v274 * v271
                       + 0x8000
                       + (((unsigned __int16)v274 * v271 + 0x8000) >> 16)) >> 16);
                unsigned int v276 = HIWORD(v274)
                     - ((HIWORD(v274) * v271 + 0x8000 + ((HIWORD(v274) * v271 + 0x8000) >> 16)) >> 16);
                unsigned int v277 = v273 - ((v273 * v271 + 0x8000 + ((v273 * v271 + 0x8000) >> 16)) >> 16);
                uint64_t v278 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v279 = 0xFFFF;
LABEL_280:
                  unint64_t result = PDAhuePDA_14796(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v278 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v279, (unsigned __int16)v275 | ((unsigned __int16)v276 << 16) | (unint64_t)(v272 << 48) | ((unint64_t)(unsigned __int16)v277 << 32), (unsigned __int16)v269);
                  unint64_t v269 = HIWORD(result);
                  unsigned int v281 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v281);
                  *((_WORD *)v7 + 1) = v281;
                  unsigned int v280 = bswap32(HIDWORD(result));
                  goto LABEL_281;
                }
                unsigned int v279 = v278;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_280;
                }
                *(_WORD *)unint64_t v7 = bswap32(v275) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v276) >> 16;
                unsigned int v280 = bswap32(v277);
LABEL_281:
                *((_WORD *)v7 + 2) = HIWORD(v280);
                *((_WORD *)v7 + 3) = bswap32(v269) >> 16;
LABEL_282:
                v9 += v265;
                unsigned int v282 = (unsigned __int16 *)&v14[8 * v265];
                if ((unint64_t)v282 >= v21) {
                  uint64_t v283 = v266;
                }
                else {
                  uint64_t v283 = 0;
                }
                uint64_t v14 = (char *)&v282[4 * v283];
                v7 += v267;
                --v268;
              }
              while (v268);
              v9 += v667;
              v7 += 8 * v666;
              uint64_t v284 = v669;
              unsigned int v285 = &v669[8 * v665];
              uint64_t v286 = v651;
              if ((unint64_t)v285 < v663) {
                uint64_t v286 = 0;
              }
              unsigned int v287 = &v285[8 * v286];
              uint64_t v288 = v21 + 8 * v286 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v288;
                uint64_t v284 = v287;
                uint64_t v14 = v287;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v284;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 25:
            uint64_t v289 = v16;
            uint64_t v290 = -(uint64_t)v18;
            uint64_t v652 = -(v665 * v17);
            uint64_t v291 = 8 * v16;
            while (1)
            {
              int v292 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_306;
                }
                LODWORD(v293) = *v9 | (*v9 << 8);
                unsigned int v294 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v295 = v293 ^ 0xFFFF;
                uint64_t v296 = HIWORD(v294)
                     - ((HIWORD(v294) * v295 + 0x8000 + ((HIWORD(v294) * v295 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v296) {
                    goto LABEL_306;
                  }
                  LODWORD(v293) = v296;
                }
                unsigned int v297 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v298 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v299 = v298
                     - (((unsigned __int16)v298 * v295
                       + 0x8000
                       + (((unsigned __int16)v298 * v295 + 0x8000) >> 16)) >> 16);
                unsigned int v300 = HIWORD(v298)
                     - ((HIWORD(v298) * v295 + 0x8000 + ((HIWORD(v298) * v295 + 0x8000) >> 16)) >> 16);
                unsigned int v301 = v297 - ((v297 * v295 + 0x8000 + ((v297 * v295 + 0x8000) >> 16)) >> 16);
                uint64_t v302 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v303 = 0xFFFF;
LABEL_304:
                  unint64_t result = PDAsaturationPDA_14797(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v302 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v303, (unsigned __int16)v299 | ((unsigned __int16)v300 << 16) | (unint64_t)(v296 << 48) | ((unint64_t)(unsigned __int16)v301 << 32), (unsigned __int16)v293);
                  unint64_t v293 = HIWORD(result);
                  unsigned int v305 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v305);
                  *((_WORD *)v7 + 1) = v305;
                  unsigned int v304 = bswap32(HIDWORD(result));
                  goto LABEL_305;
                }
                unsigned int v303 = v302;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_304;
                }
                *(_WORD *)unint64_t v7 = bswap32(v299) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v300) >> 16;
                unsigned int v304 = bswap32(v301);
LABEL_305:
                *((_WORD *)v7 + 2) = HIWORD(v304);
                *((_WORD *)v7 + 3) = bswap32(v293) >> 16;
LABEL_306:
                v9 += v289;
                unint64_t v306 = (unsigned __int16 *)&v14[8 * v289];
                if ((unint64_t)v306 >= v21) {
                  uint64_t v307 = v290;
                }
                else {
                  uint64_t v307 = 0;
                }
                uint64_t v14 = (char *)&v306[4 * v307];
                v7 += v291;
                --v292;
              }
              while (v292);
              v9 += v667;
              v7 += 8 * v666;
              unsigned int v308 = v669;
              unsigned __int16 v309 = &v669[8 * v665];
              uint64_t v310 = v652;
              if ((unint64_t)v309 < v663) {
                uint64_t v310 = 0;
              }
              unsigned int v311 = &v309[8 * v310];
              uint64_t v312 = v21 + 8 * v310 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v312;
                unsigned int v308 = v311;
                uint64_t v14 = v311;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v308;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 26:
            uint64_t v613 = v16;
            uint64_t v614 = -(uint64_t)v18;
            uint64_t v662 = -(v665 * v17);
            uint64_t v615 = 8 * v16;
            while (1)
            {
              int v616 = v668;
              do
              {
                if (!*v9) {
                  goto LABEL_622;
                }
                LODWORD(v617) = *v9 | (*v9 << 8);
                unsigned int v618 = bswap32(*((unsigned __int16 *)v14 + 3));
                int v619 = v617 ^ 0xFFFF;
                uint64_t v620 = HIWORD(v618)
                     - ((HIWORD(v618) * v619 + 0x8000 + ((HIWORD(v618) * v619 + 0x8000) >> 16)) >> 16);
                if (v19)
                {
                  if (!(_WORD)v620) {
                    goto LABEL_622;
                  }
                  LODWORD(v617) = v620;
                }
                unsigned int v621 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
                unsigned int v622 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
                unsigned int v623 = v622
                     - (((unsigned __int16)v622 * v619
                       + 0x8000
                       + (((unsigned __int16)v622 * v619 + 0x8000) >> 16)) >> 16);
                unsigned int v624 = HIWORD(v622)
                     - ((HIWORD(v622) * v619 + 0x8000 + ((HIWORD(v622) * v619 + 0x8000) >> 16)) >> 16);
                unsigned int v625 = v621 - ((v621 * v619 + 0x8000 + ((v621 * v619 + 0x8000) >> 16)) >> 16);
                uint64_t v626 = __rev16(*((unsigned __int16 *)v7 + 3));
                if (!v671)
                {
                  unsigned int v627 = 0xFFFF;
LABEL_620:
                  unint64_t result = PDAluminosityPDA_14798((unsigned __int16)v623 | ((unsigned __int16)v624 << 16) | (unint64_t)(v620 << 48) | ((unint64_t)(unsigned __int16)v625 << 32), (unsigned __int16)v617, ((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v626 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v627);
                  unint64_t v617 = HIWORD(result);
                  unsigned int v629 = bswap32(result);
                  *(_WORD *)unint64_t v7 = HIWORD(v629);
                  *((_WORD *)v7 + 1) = v629;
                  unsigned int v628 = bswap32(HIDWORD(result));
                  goto LABEL_621;
                }
                unsigned int v627 = v626;
                if (*((_WORD *)v7 + 3)) {
                  goto LABEL_620;
                }
                *(_WORD *)unint64_t v7 = bswap32(v623) >> 16;
                *((_WORD *)v7 + 1) = bswap32(v624) >> 16;
                unsigned int v628 = bswap32(v625);
LABEL_621:
                *((_WORD *)v7 + 2) = HIWORD(v628);
                *((_WORD *)v7 + 3) = bswap32(v617) >> 16;
LABEL_622:
                v9 += v613;
                unsigned int v630 = (unsigned __int16 *)&v14[8 * v613];
                if ((unint64_t)v630 >= v21) {
                  uint64_t v631 = v614;
                }
                else {
                  uint64_t v631 = 0;
                }
                uint64_t v14 = (char *)&v630[4 * v631];
                v7 += v615;
                --v616;
              }
              while (v616);
              v9 += v667;
              v7 += 8 * v666;
              unint64_t v632 = v669;
              unsigned int v633 = &v669[8 * v665];
              uint64_t v634 = v662;
              if ((unint64_t)v633 < v663) {
                uint64_t v634 = 0;
              }
              int v635 = &v633[8 * v634];
              uint64_t v636 = v21 + 8 * v634 + 8 * v665;
              if (v664)
              {
                v14 += 8 * v665;
              }
              else
              {
                unint64_t v21 = v636;
                unint64_t v632 = v635;
                uint64_t v14 = v635;
              }
              BOOL v45 = v670 == 1;
              long long v669 = v632;
              --v670;
              if (v45) {
                return result;
              }
            }
          case 27:
            uint64_t v313 = v16;
            uint64_t v314 = -(uint64_t)v18;
            uint64_t v653 = -(v665 * v17);
            uint64_t v315 = 8 * v16;
            break;
          default:
            return result;
        }
LABEL_319:
        int v316 = v668;
        while (1)
        {
          if (*v9)
          {
            LODWORD(v317) = *v9 | (*v9 << 8);
            unsigned int v318 = bswap32(*((unsigned __int16 *)v14 + 3));
            int v319 = v317 ^ 0xFFFF;
            uint64_t v320 = HIWORD(v318)
                 - ((HIWORD(v318) * v319 + 0x8000 + ((HIWORD(v318) * v319 + 0x8000) >> 16)) >> 16);
            if (!v19) {
              goto LABEL_324;
            }
            if ((_WORD)v320) {
              break;
            }
          }
LABEL_330:
          v9 += v313;
          int v330 = (unsigned __int16 *)&v14[8 * v313];
          if ((unint64_t)v330 >= v21) {
            uint64_t v331 = v314;
          }
          else {
            uint64_t v331 = 0;
          }
          uint64_t v14 = (char *)&v330[4 * v331];
          v7 += v315;
          if (!--v316)
          {
            v9 += v667;
            v7 += 8 * v666;
            unint64_t v332 = v669;
            uint64_t v333 = &v669[8 * v665];
            uint64_t v334 = v653;
            if ((unint64_t)v333 < v663) {
              uint64_t v334 = 0;
            }
            int v335 = &v333[8 * v334];
            uint64_t v336 = v21 + 8 * v334 + 8 * v665;
            if (v664)
            {
              v14 += 8 * v665;
            }
            else
            {
              unint64_t v21 = v336;
              unint64_t v332 = v335;
              uint64_t v14 = v335;
            }
            BOOL v45 = v670 == 1;
            long long v669 = v332;
            --v670;
            if (v45) {
              return result;
            }
            goto LABEL_319;
          }
        }
        LODWORD(v317) = v320;
LABEL_324:
        unsigned int v321 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
        unsigned int v322 = bswap32(*((unsigned __int16 *)v14 + 1) | (*(unsigned __int16 *)v14 << 16));
        unsigned int v323 = v322
             - (((unsigned __int16)v322 * v319 + 0x8000 + (((unsigned __int16)v322 * v319 + 0x8000) >> 16)) >> 16);
        unsigned int v324 = HIWORD(v322)
             - ((HIWORD(v322) * v319 + 0x8000 + ((HIWORD(v322) * v319 + 0x8000) >> 16)) >> 16);
        unsigned int v325 = v321 - ((v321 * v319 + 0x8000 + ((v321 * v319 + 0x8000) >> 16)) >> 16);
        uint64_t v326 = __rev16(*((unsigned __int16 *)v7 + 3));
        if (v671)
        {
          unsigned int v327 = v326;
          if (!*((_WORD *)v7 + 3))
          {
            *(_WORD *)unint64_t v7 = bswap32(v323) >> 16;
            *((_WORD *)v7 + 1) = bswap32(v324) >> 16;
            unsigned int v328 = bswap32(v325);
LABEL_329:
            *((_WORD *)v7 + 2) = HIWORD(v328);
            *((_WORD *)v7 + 3) = bswap32(v317) >> 16;
            goto LABEL_330;
          }
        }
        else
        {
          unsigned int v327 = 0xFFFF;
        }
        unint64_t result = PDAluminosityPDA_14798(((unint64_t)(bswap32(*((unsigned __int16 *)v7 + 2)) >> 16) << 32) | (v326 << 48) | bswap32(*((unsigned __int16 *)v7 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v7) >> 16), v327, (unsigned __int16)v323 | ((unsigned __int16)v324 << 16) | (unint64_t)(v320 << 48) | ((unint64_t)(unsigned __int16)v325 << 32), (unsigned __int16)v317);
        unint64_t v317 = HIWORD(result);
        unsigned int v329 = bswap32(result);
        *(_WORD *)unint64_t v7 = HIWORD(v329);
        *((_WORD *)v7 + 1) = v329;
        unsigned int v328 = bswap32(HIDWORD(result));
        goto LABEL_329;
      }
      uint64_t v14 = 0;
      unint64_t v21 = 0;
      int v16 = 1;
LABEL_15:
      unint64_t v663 = 0;
      long long v669 = 0;
      uint64_t v665 = v13 - v3;
      int v664 = 1;
      goto LABEL_16;
    }
    uint64_t v13 = v12 >> 3;
    uint64_t v14 = (char *)(v4 + 8 * (v10 + v13 * v11));
    if (v13 != v6)
    {
      int v16 = 1;
LABEL_14:
      int v17 = 0;
      uint64_t v3 = v16 * v668;
      BOOL v19 = v5 != 0;
      unint64_t v666 = v6 - v3;
      uint64_t v667 = v8 - v3;
      unint64_t v21 = -1;
      int v18 = v13;
      goto LABEL_15;
    }
    if (v7 - v14 >= 1)
    {
      if (v668 >= (uint64_t)((unint64_t)(v7 - v14) >> 3))
      {
        v7 += 8 * v668 - 8;
        v14 += 8 * v668 - 8;
        v9 += v668 - 1;
        int v16 = -1;
        goto LABEL_13;
      }
      uint64_t v15 = *(int *)(result + 8) - 1;
      if (v7 <= &v14[8 * v6 * v15 - 8 + 8 * v668])
      {
        v7 += 8 * v6 * v15;
        uint64_t v13 = -(uint64_t)v6;
        v9 += v8 * v15;
        uint64_t v8 = -v8;
        int v16 = 1;
        v14 += 8 * v6 * v15;
        unint64_t v6 = -(uint64_t)v6;
        goto LABEL_14;
      }
    }
    int v16 = 1;
LABEL_13:
    uint64_t v13 = (unint64_t)*(int *)(result + 28) >> 3;
    goto LABEL_14;
  }
  return result;
}

_WORD *RGBA64_DMplusDAM(_WORD *result, unint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  unint64_t v6 = (unsigned __int16)a2 * (unint64_t)a3 + (unsigned __int16)a4 * (unint64_t)a6;
  unint64_t v7 = WORD1(a2) * (unint64_t)a3 + WORD1(a4) * (unint64_t)a6;
  unint64_t v8 = WORD2(a2) * (unint64_t)a3 + WORD2(a4) * (unint64_t)a6;
  unint64_t v9 = HIWORD(a2) * a3 + a6 * (unint64_t)a5;
  if (v6 >= 0xFFFE8000) {
    unint64_t v6 = 4294868992;
  }
  if (v7 >= 0xFFFE8000) {
    unint64_t v7 = 4294868992;
  }
  if (v8 >= 0xFFFE8000) {
    unint64_t v8 = 4294868992;
  }
  if (v9 >= 0xFFFE8000) {
    unint64_t v9 = 4294868992;
  }
  unint64_t *result = bswap32(((v6 + 0x8000) >> 16) + v6 + 0x8000);
  result[1] = bswap32(((v7 + 0x8000) >> 16) + v7 + 0x8000);
  result[2] = bswap32(((v8 + 0x8000) >> 16) + v8 + 0x8000);
  result[3] = bswap32(((v9 + 0x8000) >> 16) + v9 + 0x8000);
  return result;
}

_DWORD *RGBA64_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  unint64_t v8 = PIXELCONSTANT_14802(*(float **)(*(void *)a1 + 64), a4, a5, a6);
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    *(_OWORD *)a2 = xmmword_1850CDE10;
    a2[6] = 0;
    *((void *)a2 + 2) = 1;
    unsigned int v9 = bswap32(v8);
    *((_WORD *)a2 + 24) = HIWORD(v9);
    if (HIWORD(v8) == 0xFFFF) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = (char *)(a2 + 12);
    }
    *((void *)a2 + 4) = a2 + 12;
    *((void *)a2 + 5) = v10;
    *((_WORD *)a2 + 25) = v9;
    *((_WORD *)a2 + 26) = bswap32(HIDWORD(v8)) >> 16;
    *((_WORD *)a2 + 27) = __rev16(HIWORD(v8));
  }
  return a2;
}

uint64_t eStateHash(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 44);
  uint64_t v2 = *(unsigned char **)(a1 + 56);
  int v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = v2 + 1;
    do
    {
      unsigned int v1 = 257 * v1 + v3;
      int v5 = *v4++;
      int v3 = v5;
    }
    while (v5);
  }
  return v1;
}

BOOL eStateEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  int v4 = *(_DWORD *)(a1 + 44);
  if (v4 != *(_DWORD *)(a2 + 44) || strcmp(*(const char **)(a1 + 56), *(const char **)(a2 + 56))) {
    return 0;
  }
  switch(v4)
  {
    case 0:
      int v7 = *(unsigned __int8 *)(a1 + 48);
      int v8 = *(unsigned __int8 *)(a2 + 48);
      goto LABEL_11;
    case 1:
      int v7 = *(_DWORD *)(a1 + 48);
      int v8 = *(_DWORD *)(a2 + 48);
LABEL_11:
      BOOL v6 = v7 == v8;
      goto LABEL_14;
    case 2:
      BOOL v6 = *(double *)(a1 + 48) == *(double *)(a2 + 48);
      goto LABEL_14;
    case 3:
      BOOL v6 = strcmp(*(const char **)(a1 + 48), *(const char **)(a2 + 48)) == 0;
      goto LABEL_14;
    case 4:
    case 6:
      BOOL v6 = *(void *)(a1 + 48) == *(void *)(a2 + 48);
LABEL_14:
      BOOL result = v6;
      break;
    case 5:
      BOOL result = CGStyleEqualToStyle(*(void *)(a1 + 48), *(void *)(a2 + 48));
      break;
    case 7:
      BOOL result = PDFClipMaskEqualToClipMask(*(void *)(a1 + 48), *(void *)(a2 + 48));
      break;
    default:
      return 0;
  }
  return result;
}

void eStateRelease(uint64_t a1, void **a2)
{
}

_DWORD *eStateRetain(uint64_t a1, _DWORD *a2)
{
  BOOL result = a2;
  if (a2) {
    ++*a2;
  }
  return result;
}

unsigned char *emitEStateDefinition(unsigned char *result, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result[40])
  {
    unsigned int v9 = result;
    uint64_t v11 = *((void *)result + 1);
    unint64_t v10 = *((void *)result + 2);
    if (!v10)
    {
      unint64_t v10 = PDFXRefTableAddObject(*(void **)(v11 + 464));
      *((void *)v9 + 2) = v10;
    }
    PDFDocumentBeginObject(v11, v10, a3, a4, a5, a6, a7, a8);
    PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"<<", v12, v13, v14, v15, v16, v17, v171);
    PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Type /ExtGState", v18, v19, v20, v21, v22, v23, v172);
    switch(*((_DWORD *)v9 + 11))
    {
      case 0:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s %b", v24, v25, v26, v27, v28, v29, *((void *)v9 + 7));
        goto LABEL_73;
      case 1:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s %d", v24, v25, v26, v27, v28, v29, *((void *)v9 + 7));
        goto LABEL_73;
      case 2:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s %f", v24, v25, v26, v27, v28, v29, *((void *)v9 + 7));
        goto LABEL_73;
      case 3:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s /%s", v24, v25, v26, v27, v28, v29, *((void *)v9 + 7));
        goto LABEL_73;
      case 4:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((void *)v9 + 7));
        uint64_t v36 = *((void *)v9 + 6);
        if (v36)
        {
          uint64_t v37 = *((void *)v9 + 1);
          if (*(double (**)(uint64_t, double *, void *))(v36 + 72) == evaluate_identity)
          {
            int8x16_t v38 = "/Identity";
            goto LABEL_72;
          }
        }
        else
        {
          uint64_t v37 = *((void *)v9 + 1);
        }
        uint64_t v107 = *((void *)PDFDocumentAddFunction(v37, v36) + 6);
        uint64_t v108 = *((void *)v9 + 1);
        goto LABEL_43;
      case 5:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((void *)v9 + 7));
        uint64_t v39 = *((void *)v9 + 6);
        if (!v39) {
          goto LABEL_40;
        }
        double v40 = *(double *)(v39 + 64);
        float v41 = v40 * __sincos_stret((*(double *)(v39 + 48) + -180.0) * 3.14159265 / 180.0).__cosval;
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"<<", v42, v43, v44, v45, v46, v47, v173);
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Type /Style", v48, v49, v50, v51, v52, v53, v174);
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Subtype /Shadow", v54, v55, v56, v57, v58, v59, v175);
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Offset [ %f %f ]", v60, v61, v62, v63, v64, v65, COERCE__INT64(v41));
        if (*(double *)(v39 + 72) != 0.0) {
          PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Radius %f", v30, v31, v32, v33, v34, v35, *(void *)(v39 + 72));
        }
        uint64_t v66 = *((void *)v9 + 6);
        if (!v66) {
          goto LABEL_71;
        }
        unint64_t v67 = *(void *)(v66 + 24);
        if (!v67) {
          goto LABEL_71;
        }
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/ColorSpace", v30, v31, v32, v33, v34, v35, v173);
        if ((v67 & 0x8000000000000000) != 0) {
          ColorSpace = CGTaggedColorGetColorSpace(v67, v68, v69, v70, v71, v72, v73, v74);
        }
        else {
          ColorSpace = *(CGColorSpace **)(v67 + 24);
        }
        unsigned int v137 = PDFDocumentResolveColorSpace(*((void *)v9 + 1), ColorSpace);
        unsigned int v138 = PDFDocumentAddColorSpace(*((void *)v9 + 1), v137);
        PDFColorSpaceEmitReference(v138, v139, v140, v141, v142, v143, v144, v145);
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Color [", v146, v147, v148, v149, v150, v151, v176);
        if ((v67 & 0x8000000000000000) != 0) {
          uint64_t NumberOfComponents = CGTaggedColorGetNumberOfComponents(v67, v152, v153, v154, v155, v156, v157, v158);
        }
        else {
          uint64_t NumberOfComponents = *(void *)(v67 + 56);
        }
        Components = CGColorGetComponents((CGColorRef)v67);
        if (NumberOfComponents)
        {
          unsigned int v161 = (uint64_t *)Components;
          do
          {
            uint64_t v162 = *v161++;
            PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"%f", v30, v31, v32, v33, v34, v35, v162);
            --NumberOfComponents;
          }
          while (NumberOfComponents);
        }
        uint64_t v130 = *((void *)v9 + 1);
        uint64_t v163 = "]";
        goto LABEL_70;
      case 6:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((void *)v9 + 7));
        unint64_t v76 = (void *)*((void *)v9 + 6);
        if (v76)
        {
          unint64_t v77 = v76[13];
          uint64_t v78 = *((void *)v9 + 1);
          uint64_t v79 = *(void **)(v78 + 360);
          if (v79 || (uint64_t v79 = PDFFormSetCreate(*((void *)v9 + 1)), (*(void *)(v78 + 360) = v79) != 0))
          {
            if (!*((void *)v79 + 1)) {
              *((void *)v79 + 1) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &callbacks_12489);
            }
            value = 0;
            uint64_t v86 = *(void *)v79;
            int v87 = malloc_type_calloc(1uLL, 0x58uLL, 0x33BCE901uLL);
            __CFSetLastAllocationEventName();
            if (v87)
            {
              *(_DWORD *)int v87 = 1;
              v87[1] = v86;
              v87[2] = PDFContentStreamCreate(v86, 0);
              *((_DWORD *)v87 + 6) = 1;
              CFRetain(v76);
              v87[4] = v76;
              v87[8] = 0;
              v87[9] = 0;
              v87[10] = -1;
            }
            if (!CFSetGetValueIfPresent(*((CFSetRef *)v79 + 1), v87, (const void **)&value))
            {
              uint64_t v95 = (*((_DWORD *)v79 + 6) + 1);
              *((_DWORD *)v79 + 6) = v95;
              if (*((_DWORD *)v87 + 6) == 1) {
                int v96 = "Sm";
              }
              else {
                int v96 = "Fm";
              }
              snprintf_l((char *)v87 + 40, 0x10uLL, 0, "%s%zu", v96, v95);
              CFSetAddValue(*((CFMutableSetRef *)v79 + 1), v87);
              value = v87;
            }
            PDFFormRelease(v87, v88, v89, v90, v91, v92, v93, v94);
            uint64_t v97 = (const void **)*((void *)v79 + 2);
            if (!v97)
            {
              uint64_t v97 = CGOrderedSetCreate();
              *((void *)v79 + 2) = v97;
            }
            CGOrderedSetAddValue((CFSetRef *)v97, value);
            uint64_t v79 = value;
          }
          PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"<<", v80, v81, v82, v83, v84, v85, v173);
          uint64_t v103 = *((void *)v79 + 2);
          if (v103) {
            uint64_t v104 = *(void *)(v103 + 8);
          }
          else {
            uint64_t v104 = 0;
          }
          PDFDocumentPrintReference(*((void *)v9 + 1), (uint64_t)"/G %R", v104, v98, v99, v100, v101, v102);
          uint64_t v115 = *((void *)v9 + 1);
          if (v77)
          {
            PDFDocumentPrintf(v115, (uint64_t)"/S /Luminosity", v109, v110, v111, v112, v113, v114, v177);
            unsigned int v123 = CGColorGetComponents((CGColorRef)v77);
            if ((v77 & 0x8000000000000000) != 0) {
              CGColorSpaceRef v124 = CGTaggedColorGetColorSpace(v77, v116, v117, v118, v119, v120, v121, v122);
            }
            else {
              CGColorSpaceRef v124 = *(CGColorSpaceRef *)(v77 + 24);
            }
            if (v124)
            {
              uint64_t v126 = *(void *)(*((void *)v124 + 3) + 48);
              PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/BC [", v117, v118, v119, v120, v121, v122, v178);
              for (; v126; --v126)
              {
                uint64_t v127 = *(void *)v123++;
                PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"%f", v109, v110, v111, v112, v113, v114, v127);
              }
            }
            else
            {
              PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/BC [", v117, v118, v119, v120, v121, v122, v178);
            }
            uint64_t v115 = *((void *)v9 + 1);
            uint64_t v125 = "]";
          }
          else
          {
            uint64_t v125 = "/S /Alpha";
          }
          PDFDocumentPrintf(v115, (uint64_t)v125, v109, v110, v111, v112, v113, v114, v177);
          uint64_t v128 = *((void *)v9 + 6);
          if (v128)
          {
            uint64_t v129 = *(void *)(v128 + 112);
            if (v129)
            {
              uint64_t v130 = *((void *)v9 + 1);
              if (*(double (**)(uint64_t, double *, void *))(v129 + 72) == evaluate_identity)
              {
                uint64_t v163 = "/TR /Identity";
LABEL_70:
                PDFDocumentPrintf(v130, (uint64_t)v163, v30, v31, v32, v33, v34, v35, v173);
              }
              else
              {
                uint64_t v131 = PDFDocumentAddFunction(v130, v129);
                PDFDocumentPrintReference(*((void *)v9 + 1), (uint64_t)"/TR %R", v131[6], v132, v133, v134, v135, v136);
              }
            }
          }
LABEL_71:
          uint64_t v37 = *((void *)v9 + 1);
          int8x16_t v38 = ">>";
        }
        else
        {
LABEL_40:
          uint64_t v37 = *((void *)v9 + 1);
          int8x16_t v38 = "/None";
        }
        goto LABEL_72;
      case 7:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((void *)v9 + 7));
        uint64_t v105 = *((void *)v9 + 6);
        uint64_t v106 = *((void *)v9 + 1);
        if (v105)
        {
          uint64_t v107 = *(void *)(v105 + 16);
          if (!v107)
          {
            uint64_t v107 = PDFXRefTableAddObject(*(void **)(*(void *)(v105 + 8) + 464));
            *(void *)(v105 + 16) = v107;
          }
          uint64_t v108 = v106;
LABEL_43:
          PDFDocumentPrintReference(v108, (uint64_t)"%R", v107, v31, v32, v33, v34, v35);
        }
        else
        {
          int8x16_t v38 = "/None";
          uint64_t v37 = *((void *)v9 + 1);
LABEL_72:
          PDFDocumentPrintf(v37, (uint64_t)v38, v30, v31, v32, v33, v34, v35, v173);
        }
LABEL_73:
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)">>", v24, v25, v26, v27, v28, v29, v173);
        BOOL result = PDFDocumentEndObject(*((void *)v9 + 1), v164, v165, v166, v167, v168, v169, v170);
        v9[40] = 1;
        break;
      default:
        goto LABEL_73;
    }
  }
  *a2 = 1;
  return result;
}

char *aa_rectat(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  double v6 = *(double *)(a1 + 168);
  double v7 = a2;
  double v8 = a3;
  double v9 = a4;
  double v10 = a5;
  BOOL result = (char *)aa_close(a1);
  ++*(_DWORD *)(a1 + 180);
  if (v6 != 0.0)
  {
    double v7 = v6 * v7;
    double v8 = v6 * v8;
    double v9 = v6 * v9;
    double v10 = v6 * v10;
  }
  int v12 = *(_DWORD *)(a1 + 176);
  if ((v12 & 0x30000) != 0)
  {
    double v14 = *(double *)(a1 + 64);
    double v13 = *(double *)(a1 + 72);
    double v16 = *(double *)(a1 + 80);
    double v15 = *(double *)(a1 + 88);
    double v17 = fabs(v7);
    double v18 = -1.0e15;
    if (v7 <= 0.0) {
      double v19 = -1.0e15;
    }
    else {
      double v19 = 1.0e15;
    }
    if (v17 >= 1.0e15) {
      double v7 = v19;
    }
    double v20 = fabs(v8);
    if (v8 <= 0.0) {
      double v21 = -1.0e15;
    }
    else {
      double v21 = 1.0e15;
    }
    if (v20 >= 1.0e15) {
      double v8 = v21;
    }
    *(double *)(a1 + 48) = v7;
    *(double *)(a1 + 56) = v8;
    *(double *)(a1 + 32) = v7;
    *(double *)(a1 + 40) = v8;
    int v22 = (v7 > v16) | (4 * (v7 < v14));
    int v23 = (8 * (v8 < v13)) | (2 * (v8 > v15));
    if (v23) {
      BOOL v24 = v22 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (v24) {
      int v25 = 0;
    }
    else {
      int v25 = 16;
    }
    int v26 = v22 | v23 | v25;
    if (v26)
    {
      if (v7 <= v16) {
        double v27 = v7;
      }
      else {
        double v27 = v16;
      }
      if (v7 < v14) {
        double v7 = v14;
      }
      else {
        double v7 = v27;
      }
      if (v8 < v13)
      {
        double v8 = v13;
      }
      else if (v8 > v15)
      {
        double v8 = v15;
      }
    }
    *(_DWORD *)(a1 + 176) = v12 & 0xFFFF0000 | (v26 << 8) | v26;
    double v29 = fabs(v9);
    if (v9 <= 0.0) {
      double v30 = -1.0e15;
    }
    else {
      double v30 = 1.0e15;
    }
    if (v29 >= 1.0e15) {
      double v9 = v30;
    }
    double v31 = fabs(v10);
    if (v10 > 0.0) {
      double v18 = 1.0e15;
    }
    if (v31 >= 1.0e15) {
      double v10 = v18;
    }
    int v32 = (v9 > v16) | (4 * (v9 < v14));
    int v33 = (8 * (v10 < v13)) | (2 * (v10 > v15));
    if (v33) {
      BOOL v34 = v32 == 0;
    }
    else {
      BOOL v34 = 1;
    }
    if (v34) {
      int v35 = 0;
    }
    else {
      int v35 = 16;
    }
    int v36 = v32 | v33 | v35;
    if (v36)
    {
      if (v9 <= v16) {
        double v16 = v9;
      }
      if (v9 < v14) {
        double v9 = v14;
      }
      else {
        double v9 = v16;
      }
      if (v10 < v13)
      {
        double v10 = v13;
      }
      else if (v10 > v15)
      {
        double v10 = v15;
      }
    }
    BOOL v28 = (v36 & v26 & 0xF) != 0;
  }
  else
  {
    BOOL v28 = 0;
    *(double *)(a1 + 48) = v7;
    *(double *)(a1 + 56) = v8;
    *(double *)(a1 + 32) = v7;
    *(double *)(a1 + 40) = v8;
    *(_DWORD *)(a1 + 176) = v12 & 0xFFFF0000;
  }
  double v37 = *(double *)(a1 + 160);
  double v38 = *(double *)(a1 + 128);
  double v39 = *(double *)(a1 + 136);
  int v40 = (int)(v37 + v38 * v7);
  int v41 = (int)(v37 + v39 * v8);
  *(_DWORD *)(a1 + 16) = v40;
  *(_DWORD *)(a1 + 20) = v41;
  *(_DWORD *)(a1 + 24) = v40;
  *(_DWORD *)(a1 + 28) = v41;
  if (!v28)
  {
    double v42 = v37 + v38 * v9;
    if (v40 != (int)v42 && v41 != (int)(v37 + v39 * v10))
    {
      int v46 = v40;
      int v47 = (int)(v37 + v39 * v8);
      v44[0] = (int)v42;
      v44[1] = v47;
      v44[4] = v40;
      int v45 = (int)(v37 + v39 * v10);
      v44[2] = (int)v42;
      v44[3] = v45;
      return aa_add_edges((char *)a1, (uint64_t)v44, 4);
    }
  }
  return result;
}

uint64_t aa_distribute_clip_edges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 216) = 0;
  int v4 = (uint64_t *)(a1 + 216);
  unsigned int v5 = *(_DWORD *)(a1 + 176);
  *(void *)(a1 + 224) = 0;
  double v6 = *(uint64_t **)(a1 + 192);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    double v9 = 0;
    double v10 = 0;
    uint64_t v11 = 0;
    int v12 = (v5 >> 20) & 3;
    int v13 = v12 - 1;
    while (1)
    {
      int v14 = *((_DWORD *)v6 + 3);
      if (v14) {
        break;
      }
      uint64_t v17 = v8;
      uint64_t v23 = v7;
LABEL_58:
      double v6 = (uint64_t *)*v6;
      uint64_t v7 = v23;
      uint64_t v8 = v17;
      if (!v6) {
        return v11;
      }
    }
    int v15 = 0;
    double v16 = v6 + 3;
    while (1)
    {
      if (*((_WORD *)v16 + 22))
      {
        uint64_t v17 = *((unsigned int *)v16 + 6);
        uint64_t v18 = *((unsigned int *)v16 + 7);
        if ((int)a4 >= (int)v17 && (int)v18 >= (int)a3)
        {
          int v20 = *((_DWORD *)v16 + 4);
          int v21 = *((_DWORD *)v16 + 5);
          if (*((unsigned char *)v16 + 47) == 1)
          {
            if ((int)v18 > (int)a4)
            {
              v21 += (unint64_t)(*((int *)v16 + 9) * (uint64_t)((int)a4 - (int)v17)) >> 12;
              uint64_t v18 = a4;
            }
            if ((int)a3 > (int)v17)
            {
              v20 += (unint64_t)(*((int *)v16 + 9) * (uint64_t)((int)a3 - (int)v17)) >> 12;
              uint64_t v17 = a3;
            }
          }
          else
          {
            uint64_t v17 = (int)v17 <= (int)a3 ? a3 : v17;
            uint64_t v18 = (int)v18 >= (int)a4 ? a4 : v18;
          }
          if ((int)v17 < (int)v18)
          {
            if (v12)
            {
              int v21 = v20;
              int v22 = v17;
              uint64_t v23 = v18;
            }
            else
            {
              uint64_t v24 = (4095 - v18);
              uint64_t v23 = (4095 - v17);
              int v22 = v18;
              LODWORD(v18) = v17;
              uint64_t v17 = v24;
            }
            *((_DWORD *)v16 + 10) = v21;
            if (!v9 || (int)v17 < (int)v7 || (int v25 = v9, (v17 ^ v7) >= 0x1000))
            {
              if (!v10 || (int)v17 < (int)v8 || (int v25 = v10, (v17 ^ v8) >= 0x1000)) {
                int v25 = (void *)(a2 + 8 * (v22 >> 12));
              }
            }
            int v26 = (uint64_t *)*v25;
            if (*v25)
            {
              do
              {
                double v27 = v26;
                int v28 = *((_DWORD *)v26 + 5) - v22;
                if (v28)
                {
                  if (v28 * v13 > 0) {
                    goto LABEL_45;
                  }
                }
                else if (!*((_DWORD *)v27 + 4))
                {
                  goto LABEL_45;
                }
                int v26 = (uint64_t *)*v27;
                int v25 = v27;
              }
              while (*v27);
              double v10 = v27;
              double v27 = 0;
            }
            else
            {
              double v27 = 0;
LABEL_45:
              double v10 = v25;
            }
            v16[6] = (uint64_t)v27;
            v16[7] = (uint64_t)v16;
            *((_DWORD *)v16 + 16) = 0;
            *((_DWORD *)v16 + 17) = v22;
            *double v10 = v16 + 6;
            if (!v9 || (int)v23 < (int)v7 || (v23 ^ v7) >= 0x1000)
            {
              if ((int)v23 < (int)v17 || (double v9 = v10, (v23 ^ v17) >= 0x1000)) {
                double v9 = (void *)(a2 + 8 * ((int)v18 >> 12));
              }
            }
            double v29 = (uint64_t *)*v9;
            if (*v9)
            {
              do
              {
                int v30 = *((_DWORD *)v29 + 5) - v18;
                if (!v30) {
                  break;
                }
                if (v30 * v13 > 0) {
                  break;
                }
                double v9 = v29;
                double v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            v16[9] = (uint64_t)v29;
            v16[10] = (uint64_t)v16;
            *((_DWORD *)v16 + 22) = 1;
            *((_DWORD *)v16 + 23) = v18;
            uint64_t v11 = (v11 + 1);
            *double v9 = v16 + 9;
            goto LABEL_27;
          }
        }
        v16[9] = *v4;
        v16[6] = (uint64_t)(v16 + 9);
        *int v4 = (uint64_t)(v16 + 6);
      }
      else
      {
        *double v16 = *(void *)(a1 + 224);
        *(void *)(a1 + 224) = v16;
      }
      uint64_t v17 = v8;
      uint64_t v23 = v7;
LABEL_27:
      ++v15;
      v16 += 12;
      uint64_t v7 = v23;
      uint64_t v8 = v17;
      if (v15 == v14) {
        goto LABEL_58;
      }
    }
  }
  return 0;
}

uint64_t aa_render_shape(uint64_t result, int a2, void **a3, int a4, int a5, int a6, int a7, int a8, __n128 a9)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  uint64_t v9 = result;
  int v10 = *(_DWORD *)result;
  int v11 = *(_DWORD *)(result + 4);
  int v12 = *(_DWORD *)(result + 8);
  int v13 = *(_DWORD *)(result + 12);
  if (v12 - *(_DWORD *)result < 31 || v13 - v11 < 31) {
    return 0;
  }
  int v15 = *(_DWORD *)(result + 184);
  if (24 * v15 + 44 < 1) {
    return 0;
  }
  uint64_t v16 = (a4 / 4);
  uint64_t v17 = (char *)*a3;
  if (*a3)
  {
    if (a4 < 36) {
      return 0;
    }
  }
  else if (a4 >= 256)
  {
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = 64;
  }
  int v18 = v10 >> 12;
  int v19 = (v12 + 4095) >> 12;
  int v20 = v11 >> 12;
  int v21 = v13 + 4095;
  int v22 = v21 >> 12;
  if ((a2 & 4) == 0)
  {
    int v153 = 0;
    int v154 = a2;
    uint64_t v146 = a3;
    int v141 = 0;
    int v23 = v11 >> 12;
    int v24 = v21 >> 12;
    goto LABEL_15;
  }
  BOOL result = 0;
  if (a7 > a5)
  {
    uint64_t v146 = a3;
    if (a8 > a6)
    {
      int v29 = v10 >> 12;
      BOOL result = 0;
      if (v20 <= a6) {
        int v23 = a6;
      }
      else {
        int v23 = v11 >> 12;
      }
      if (v20 >= a6) {
        int v30 = 3;
      }
      else {
        int v30 = 4;
      }
      if (v22 >= a8) {
        int v24 = a8;
      }
      else {
        int v24 = v21 >> 12;
      }
      int v32 = v29 - a5;
      BOOL v31 = v29 < a5;
      if (v29 <= a5) {
        int v29 = a5;
      }
      int v33 = !v31;
      int v34 = v30 - v33 - (a8 >= v22);
      int v35 = v19 <= a7;
      if (v19 >= a7) {
        int v19 = a7;
      }
      if (v34 == v35) {
        a2 &= ~4u;
      }
      if (v24 > v23 && v19 > v29)
      {
        int v18 = v29;
        int v141 = (a8 - v22) & ~((a8 - v22) >> 31);
        int v153 = v32 & ~(v32 >> 31);
        int v154 = a2;
LABEL_15:
        int v152 = v18;
        if (v15 == 2 && *(_WORD *)(v9 + 188) == 2)
        {
          int v25 = (v10 + 15) >> 12;
          int v26 = (v12 + 4080) >> 12;
          if ((v154 & 4) != 0)
          {
            BOOL result = 0;
            if (v25 <= v152) {
              int v25 = v152;
            }
            if (v26 >= v19) {
              int v26 = v19;
            }
            if (v24 <= v23 || v26 <= v25) {
              return result;
            }
            int v20 = v23;
            int v22 = v24;
          }
          if (v17
            || (BOOL result = (uint64_t)malloc_type_realloc(0, (4 * (int)v16 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL),
                (uint64_t v17 = (char *)result) != 0))
          {
            *(void *)uint64_t v17 = 0x280000000;
            int v27 = v24 + v141;
            *((_DWORD *)v17 + 2) = v24 + v141 - v22;
            *((_DWORD *)v17 + 3) = 4;
            int v28 = v153 - v152 + v26;
            *((_DWORD *)v17 + 4) = v153 - v152 + v25;
            *((_DWORD *)v17 + 5) = v28;
            *((_DWORD *)v17 + 6) = v27 - v20;
            *(void *)(v17 + 28) = 0x7FFFFFFF00000002;
            *uint64_t v146 = v17;
            return 36;
          }
          return result;
        }
        int v157 = v19;
        int v36 = v24 - v23;
        if (v24 - v23 > 1015)
        {
          size_t v37 = 8 * (v36 + 16);
          double v39 = (char *)malloc_type_malloc(v37, 0x705560E0uLL);
          uint64_t v139 = v39;
        }
        else
        {
          size_t v37 = 8 * (v24 - v23 + 16);
          MEMORY[0x1F4188790](result, a9);
          double v39 = (char *)&v138 - v38;
          bzero((char *)&v138 - v38, v37);
          uint64_t v139 = 0;
        }
        char v40 = v154;
        bzero(v39, v37);
        uint64_t v41 = (uint64_t)&v39[-8 * v23 + 32];
        *(_DWORD *)(v9 + 176) = *(_DWORD *)(v9 + 176) & 0xFC0FFFFF | ((v40 & 1) << 25);
        uint64_t v140 = v41;
        int v142 = v23 << 12;
        if ((v40 & 4) != 0) {
          int v42 = aa_distribute_clip_edges(v9, v41, (v23 << 12), (v24 << 12));
        }
        else {
          int v42 = aa_distribute_edges(v9, v41);
        }
        int v43 = v152;
        int v44 = v157;
        if (!v42
          || !v17
          && (int v45 = (char *)malloc_type_realloc(0, (4 * (int)v16 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL),
              int v44 = v157,
              (uint64_t v17 = v45) == 0))
        {
LABEL_251:
          BOOL result = (uint64_t)v139;
          if (!v139) {
            return result;
          }
          free(v139);
          return 0;
        }
        *(void *)(v9 + 200) = 0;
        *(void *)(v9 + 208) = 0;
        int v46 = (uint64_t **)(v9 + 200);
        int v47 = &v39[8 * v36 + 32];
        uint64_t v48 = *(uint64_t **)v47;
        if (*(void *)v47)
        {
          int v49 = v141;
          signed int v50 = v142;
        }
        else
        {
          int v49 = v141;
          signed int v50 = v142;
          do
          {
            uint64_t v51 = (uint64_t *)*((void *)v47 - 1);
            v47 -= 8;
            uint64_t v48 = v51;
            ++v49;
          }
          while (!v51);
        }
        signed int v52 = *((_DWORD *)v48 + 5);
        unsigned int v53 = v52 & 0xFFFFF000;
        if (v52 == (v52 & 0xFFFFF000))
        {
          do
          {
            uint64_t v54 = v48;
            uint64_t v48 = (uint64_t *)*v48;
          }
          while (v48);
          *uint64_t v54 = *((void *)v47 - 1);
          *((void *)v47 - 1) = *(void *)v47;
          *(void *)int v47 = 0;
          unsigned int v53 = v52 - 4096;
          v47 -= 8;
        }
        else
        {
          --v49;
        }
        *(void *)uint64_t v17 = 0x280000000;
        uint64_t v55 = (int *)(v17 + 8);
        if (v52 < v23 << 12) {
          goto LABEL_69;
        }
        uint64_t v56 = v17 + 4;
        int v57 = 1;
        uint64_t v58 = v16;
        uint64_t v59 = v47;
        uint64_t v143 = v9;
        uint64_t v144 = (uint64_t **)(v9 + 200);
LABEL_73:
        signed int v60 = v52;
        if (v52 == v50)
        {
          if (*v56 != 2)
          {
            *uint64_t v55 = v49;
            v55[1] = 2;
            v55 += 2;
          }
          goto LABEL_69;
        }
        signed int v52 = v53;
        uint64_t v61 = *(void *)v59;
        if (*(void *)v59)
        {
          *(void *)uint64_t v59 = *(void *)v61;
          *(void *)uint64_t v61 = 0;
        }
        else if (!v57)
        {
          goto LABEL_247;
        }
        uint64_t v150 = v56;
        signed int v148 = v53;
        uint64_t v62 = 0;
        v55[1] = 2;
        uint64_t v158 = v55 + 1;
        int v141 = v49;
        *uint64_t v55 = v49;
        v55 += 2;
        uint64_t v145 = v59;
LABEL_78:
        signed int v151 = v60;
        uint64_t v63 = *v46;
        if (!*v46)
        {
          int v57 = 0;
          int v66 = 4096;
          goto LABEL_173;
        }
        int v64 = 0;
        int v57 = 0;
        uint64_t v65 = 4096;
        int v66 = 4096;
        uint64_t v147 = v61;
LABEL_80:
        int v67 = *((unsigned __int8 *)v63 + 47);
        if (v67 == 1)
        {
          int v68 = *((_DWORD *)v63 + 8);
          if (v68 < 0) {
            int v68 = -v68;
          }
          if (v68 >= 0x1000) {
            uint64_t v69 = 4096;
          }
          else {
            uint64_t v69 = v68;
          }
        }
        else
        {
          uint64_t v69 = 4096;
        }
        int v70 = *((unsigned __int8 *)v63 + 46);
        int v71 = *((_DWORD *)v63 + 10);
        if (v70 == 1)
        {
          int v64 = (v71 + 15) >> 12;
          goto LABEL_115;
        }
        if (v70 != 2)
        {
          uint64_t v69 = v65;
          goto LABEL_115;
        }
        int v72 = (v71 + 4080) >> 12;
        if ((int)v65 >= (int)v69) {
          LODWORD(v65) = v69;
        }
        uint64_t v69 = (v72 - v64);
        int v73 = v69 * v65;
        if ((int)v69 * (int)v65 >= v66) {
          int v73 = v66;
        }
        if ((int)v69 > 0 && (int)v65 < 4096) {
          int v66 = v73;
        }
        if ((v40 & 4) != 0)
        {
          if (v72 <= v43 || v64 >= v44) {
            goto LABEL_115;
          }
          if (v72 >= v44) {
            int v72 = v44;
          }
          if (v64 <= v43) {
            int v64 = v43;
          }
        }
        if (v64 >= v72) {
          goto LABEL_115;
        }
        int v64 = v64 - v43 + v153;
        int v75 = v72 - v43 + v153;
        if (v62 && (int v76 = *v62, *v62 >= v64))
        {
          if (v62 == v158 + 2 || (uint64_t v80 = v158, *(v62 - 2) < v64))
          {
            uint64_t v81 = v62 - 1;
            uint64_t v69 = *(v62 - 1);
            if ((int)v69 <= v64 || (*uint64_t v81 = v64, (int)v69 <= v75))
            {
              if (v76 < v75) {
                *uint64_t v62 = v75;
              }
              goto LABEL_115;
            }
            *uint64_t v62 = v75;
            int v64 = v69;
            int v75 = v76;
          }
          else
          {
            do
            {
              int v83 = v80[2];
              v80 += 2;
              int v82 = v83;
            }
            while (v83 < v64);
            unsigned int v84 = *(v80 - 1);
            uint64_t v81 = v80 - 1;
            uint64_t v69 = v84;
            if (v75 <= v82 && (int)v69 <= v64) {
              goto LABEL_115;
            }
          }
          unsigned int v77 = ((unint64_t)((char *)v81 - (char *)v158) >> 2) - 1;
        }
        else
        {
          unsigned int v77 = -1;
        }
        if ((((char *)v55 - v17) >> 2) + 5 > (int)v58)
        {
          int v149 = v75;
          LODWORD(v156) = v66;
          uint64_t v155 = v58;
          size_t v78 = (8 * (int)v58 + 511) & 0xFFFFFFFFFFFFFE00;
          if (v17 == *v146)
          {
            uint64_t v86 = (char *)malloc_type_realloc(0, v78, 0x7492344AuLL);
            uint64_t v79 = v17;
            if (!v86)
            {
LABEL_249:
              if (v79 != *v146) {
                malloc_type_realloc(v79, 0, 0x7492344AuLL);
              }
              goto LABEL_251;
            }
            uint64_t v17 = v86;
            memmove(v86, v79, 4 * (int)v58);
          }
          else
          {
            uint64_t v79 = v17;
            uint64_t v17 = (char *)malloc_type_realloc(v17, v78, 0x7492344AuLL);
            if (!v17) {
              goto LABEL_249;
            }
          }
          uint64_t v58 = (2 * v155);
          int v87 = v158;
          uint64_t v88 = v150;
          uint64_t v89 = (char *)v150 + v17 - v79;
          if (!v150) {
            uint64_t v89 = 0;
          }
          if (v17 != v79)
          {
            uint64_t v55 = (int *)((char *)v55 + v17 - v79);
            uint64_t v88 = v89;
          }
          uint64_t v150 = v88;
          if (v17 != v79) {
            int v87 = (_DWORD *)((char *)v158 + v17 - v79);
          }
          uint64_t v158 = v87;
          if (v17 == v79) {
            uint64_t v17 = v79;
          }
          int v43 = v152;
          int v44 = v157;
          uint64_t v61 = v147;
          int v66 = (int)v156;
          int v75 = v149;
        }
        if ((v77 & 0x80000000) != 0)
        {
          v55[1] = v75;
          uint64_t v62 = v55 + 1;
          *uint64_t v55 = v64;
          v55 += 2;
          char v40 = v154;
          goto LABEL_115;
        }
        int v90 = ((unint64_t)((char *)v55 - (char *)v158) >> 2) + ~v77;
        uint64_t v55 = &v158[v77 + 1];
        uint64_t v91 = (unsigned int *)&v55[v90];
        if (v90 < 1)
        {
          char v40 = v154;
        }
        else
        {
          char v40 = v154;
          do
          {
            if (v55[1] >= v64) {
              break;
            }
            v55 += 2;
          }
          while (v55 < (int *)v91);
        }
        uint64_t v92 = 0;
        unint64_t v93 = (unint64_t)((char *)v91 - (char *)v55) >> 2;
        uint64_t v95 = *v55;
        uint64_t v94 = v55[1];
        BOOL v96 = v93 != 0;
        int v97 = 2;
        BOOL v98 = 1;
        int v99 = v64;
        uint64_t v100 = (unsigned int *)v55;
        while (1)
        {
          if (v96)
          {
            if (v98 && (int)v95 > v99)
            {
              uint64_t v101 = v95;
              uint64_t v102 = v92;
LABEL_154:
              if (!v93 || v99 <= (int)v95)
              {
                uint64_t v102 = v102 ^ 2;
                *uint64_t v55 = v99;
                --v97;
                int v99 = v75;
              }
              goto LABEL_162;
            }
            uint64_t v103 = v100[2];
            LODWORD(v93) = v93 - 1;
            *uint64_t v55 = v95;
            if (!v98 && v55 == (int *)v100 && (v93 & 1) == 0)
            {
              v55 += (int)v93 + 1;
LABEL_171:
              uint64_t v62 = v55 - 1;
LABEL_115:
              v57 |= v67;
              uint64_t v63 = (uint64_t *)*v63;
              uint64_t v65 = v69;
              if (!v63)
              {
LABEL_173:
                uint64_t v156 = v62;
                if (v61)
                {
                  int v106 = v151;
                  uint64_t v107 = v144;
                  uint64_t v59 = v145;
                  if (v151 <= v148)
                  {
                    uint64_t v155 = v58;
                    uint64_t v111 = v17;
                    int v112 = *(_DWORD *)(v61 + 20);
                    uint64_t v109 = v143;
                    goto LABEL_185;
                  }
                  signed int v108 = v151 - v66;
                  int v106 = *(_DWORD *)(v61 + 20);
                  uint64_t v109 = v143;
                  if (v151 - v66 <= v106)
                  {
                    uint64_t v155 = v58;
                    uint64_t v111 = v17;
                    int v112 = v106;
                    if (v106 != v148)
                    {
                      int v113 = v142;
                      goto LABEL_186;
                    }
                    int v113 = v142;
                    if (!v57)
                    {
LABEL_186:
                      uint64_t v114 = v140;
                      while (1)
                      {
                        int v115 = *(_DWORD *)(v61 + 16);
                        if ((v115 - 2) >= 2)
                        {
                          if (v115 == 1)
                          {
                            uint64_t v116 = v61;
                            aa_ael_remove((char *)v109, v114, v113, v112, *(uint64_t **)(v61 + 8));
                            uint64_t v62 = v156;
                            int v44 = v157;
                            uint64_t v117 = *(void *)(v116 + 8);
                            *(void *)(v117 + 72) = *(void *)(v109 + 216);
                            *(void *)(v117 + 48) = v117 + 72;
                            *(void *)(v109 + 216) = v117 + 48;
                          }
                          else
                          {
                            if (v115) {
                              abort();
                            }
                            aa_ael_insert((char *)v109, v114, v113, v112, *(uint64_t ***)(v61 + 8));
                            int v44 = v157;
                            uint64_t v62 = v156;
                          }
                        }
                        uint64_t v61 = *(void *)v59;
                        if (!*(void *)v59) {
                          break;
                        }
                        *(void *)uint64_t v59 = *(void *)v61;
                        *(void *)uint64_t v61 = 0;
                        if (*(_DWORD *)(v61 + 20) != v112) {
                          goto LABEL_194;
                        }
                      }
                      int v110 = -1;
                      goto LABEL_199;
                    }
                    int v110 = 0;
                    signed int v108 = v148;
                    uint64_t v17 = v111;
                  }
                  else
                  {
                    if (v57)
                    {
                      int v110 = 0;
                      goto LABEL_203;
                    }
                    uint64_t v155 = v58;
                    uint64_t v111 = v17;
                    int v112 = v106;
                    int v106 = v151 - v66;
LABEL_185:
                    int v113 = v142;
                    if (v112 == v106) {
                      goto LABEL_186;
                    }
LABEL_194:
                    int v110 = 0;
LABEL_199:
                    uint64_t v17 = v111;
                    if (v106 == v148)
                    {
                      uint64_t v118 = v111;
                      uint64_t v119 = v61;
                      uint64_t v120 = *v107;
                      signed int v108 = v148;
                      uint64_t v58 = v155;
                      char v40 = v154;
                      goto LABEL_230;
                    }
                    int v110 = 1;
                    signed int v108 = v106;
                  }
                  uint64_t v58 = v155;
                  char v40 = v154;
LABEL_203:
                  int v46 = v107;
LABEL_204:
                  uint64_t v121 = *v46;
                  if (*v46)
                  {
                    int v122 = 0;
                    uint64_t v120 = *v46;
                    do
                    {
                      unsigned int v123 = v121;
                      if (*((unsigned char *)v121 + 47) == 1)
                      {
                        uint64_t v124 = *((int *)v121 + 9);
                        int v125 = *((_DWORD *)v121 + 4)
                             + ((unint64_t)((v108 - (uint64_t)*((int *)v121 + 6)) * v124) >> 12);
                        *((_DWORD *)v121 + 10) = v125;
                      }
                      else
                      {
                        LODWORD(v124) = 0;
                        int v125 = *((_DWORD *)v121 + 10);
                      }
                      uint64_t v121 = (uint64_t *)*v121;
                      uint64_t v126 = v123[1];
                      if (v126)
                      {
                        uint64_t v127 = *v123;
                        uint64_t v128 = v123[1];
                        do
                        {
                          int v129 = *(_DWORD *)(v128 + 40);
                          if (v125 > v129 || v125 == v129 && (int)v124 <= *(_DWORD *)(v128 + 36)) {
                            break;
                          }
                          v123[1] = *(void *)(v128 + 8);
                          uint64_t v130 = *(uint64_t ***)(v128 + 8);
                          if (v130)
                          {
                            *uint64_t v130 = v123;
                            uint64_t v127 = *v123;
                          }
                          *(void *)uint64_t v128 = v127;
                          if (v127) {
                            *(void *)(v127 + 8) = v128;
                          }
                          *(void *)(v128 + 8) = v123;
                          *unsigned int v123 = v128;
                          if (v120 == (uint64_t *)v128) {
                            uint64_t v120 = v123;
                          }
                          uint64_t v127 = v128;
                          uint64_t v128 = v123[1];
                        }
                        while (v128);
                      }
                      else
                      {
                        uint64_t v128 = 0;
                      }
                      if (v128 != v126) {
                        ++v122;
                      }
                    }
                    while (v121);
                  }
                  else
                  {
                    uint64_t v120 = 0;
                    int v122 = 0;
                  }
                  *int v46 = v120;
                  if (((v122 == 0) & ~v110) != 0)
                  {
                    int v110 = 0;
                  }
                  else
                  {
                    uint64_t v107 = v46;
                    uint64_t v118 = v17;
                    uint64_t v119 = v61;
LABEL_230:
                    aa_ael_mark(*(unsigned int *)(v109 + 176), v120);
                    int v44 = v157;
                    uint64_t v61 = v119;
                    uint64_t v17 = v118;
                    uint64_t v62 = v156;
                    int v46 = v107;
                  }
                  signed int v60 = v108;
                  int v43 = v152;
                  if (v110 < 0)
                  {
                    int v57 = 1;
                    signed int v52 = v148;
                    goto LABEL_238;
                  }
                  goto LABEL_78;
                }
                signed int v52 = v148;
                int v46 = v144;
                uint64_t v59 = v145;
                if (v151 > v148)
                {
                  if (v148 <= v151 - v66) {
                    signed int v108 = v151 - v66;
                  }
                  else {
                    signed int v108 = v148;
                  }
                  uint64_t v109 = v143;
                  if (v57)
                  {
                    uint64_t v61 = 0;
                    int v110 = 0;
                    goto LABEL_204;
                  }
                  int v57 = 1;
                  signed int v52 = v148;
                }
                int v43 = v152;
LABEL_238:
                uint64_t v131 = v158;
                int v132 = ((unint64_t)((char *)v55 - (char *)v158) >> 2) + 1;
                *uint64_t v158 = v132;
                int v49 = v141;
                signed int v50 = v142;
                uint64_t v56 = v150;
                if (v150)
                {
                  if (v132 == *v150)
                  {
                    if (v132 != 2)
                    {
                      uint64_t v133 = v150 + 1;
                      uint64_t v134 = v158 + 1;
                      while (v134 != v55)
                      {
                        int v136 = *v134++;
                        int v135 = v136;
                        int v137 = *v133++;
                        if (v135 != v137) {
                          goto LABEL_246;
                        }
                      }
                    }
                    uint64_t v55 = v158 - 1;
                  }
                  else
                  {
LABEL_246:
                    uint64_t v56 = v158;
                  }
                }
                else
                {
                  uint64_t v56 = v131;
                }
LABEL_247:
                unsigned int v53 = v52 - 4096;
                ++v49;
                v59 -= 8;
                if (v52 < v50)
                {
LABEL_69:
                  *uint64_t v55 = 0x7FFFFFFF;
                  *uint64_t v146 = v17;
                  if (v139) {
                    free(v139);
                  }
                  return (v55 - v17 + 4);
                }
                goto LABEL_73;
              }
              goto LABEL_80;
            }
            uint64_t v102 = v92 ^ 1;
            ++v100;
            uint64_t v101 = v94;
            uint64_t v94 = v103;
            if (v98) {
              goto LABEL_154;
            }
          }
          else
          {
            LODWORD(v93) = 0;
            uint64_t v102 = v92;
            uint64_t v101 = v95;
            if (v98) {
              goto LABEL_154;
            }
          }
          int v97 = 0;
LABEL_162:
          if (v92) {
            BOOL v104 = v102 == 0;
          }
          else {
            BOOL v104 = 1;
          }
          unsigned int v105 = v104;
          v55 += v105;
          BOOL v96 = v93 != 0;
          BOOL v98 = v97 != 0;
          uint64_t v95 = v101;
          uint64_t v92 = v102;
          if (!(v93 | v97)) {
            goto LABEL_171;
          }
        }
      }
    }
  }
  return result;
}

void patternRelease(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_DWORD *patternRetain(uint64_t a1, _DWORD *a2)
{
  BOOL result = a2;
  if (a2) {
    ++*a2;
  }
  return result;
}

unint64_t patternKeyHash(double *a1)
{
  return (unint64_t)((a1[5] + a1[6]) * 1000.0) + *(unsigned int *)a1;
}

uint64_t patternKeyEqual(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)))), 0xFuLL))) & (*(double *)(a1 + 48) == *(double *)(a2 + 48));
  }
  else {
    return 0;
  }
}

void patternKeyRelease(int a1, void *a2)
{
}

__n128 patternKeyRetain(uint64_t a1, __n128 *a2)
{
  int v3 = (__n128 *)malloc_type_malloc(0x38uLL, 0x1000040577F94FBuLL);
  __n128 v5 = a2[1];
  __n128 result = a2[2];
  __n128 v6 = *a2;
  v3[3].n128_u64[0] = a2[3].n128_u64[0];
  v3[1] = v5;
  v3[2] = result;
  *int v3 = v6;
  return result;
}

void emitPatternDefinition(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    if (*(_DWORD *)(v10 + 20) != 1
      || ((unsigned int v11 = *(_DWORD *)(*(void *)(v10 + 80) + 20), v12 = v11 > 4, v13 = (1 << v11) & 0x16, !v12)
        ? (BOOL v14 = v13 == 0)
        : (BOOL v14 = 1),
          v14))
    {
      PDFContentStreamBegin(*(void *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8, v169);
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Type /Pattern", v18, v19, v20, v21, v22, v23, v170);
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/PatternType 1", v24, v25, v26, v27, v28, v29, v171);
      uint64_t v36 = 1;
      if (!*(unsigned char *)(v10 + 185)) {
        uint64_t v36 = 2;
      }
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/PaintType %d", v30, v31, v32, v33, v34, v35, v36);
      uint64_t v43 = *(unsigned int *)(v10 + 152);
      if (v43 <= 2) {
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)off_1E529FAE0[v43], v37, v38, v39, v40, v41, v42, v172);
      }
      long long v44 = *(_OWORD *)(v10 + 120);
      v184[0] = *(_OWORD *)(v10 + 104);
      v184[1] = v44;
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/BBox %r", v37, v38, v39, v40, v41, v42, (uint64_t)v184);
      if (*(_DWORD *)(*(void *)(a1 + 24) + 20) == 1)
      {
        uint64_t v51 = *(void *)(a1 + 8);
        signed int v52 = "/XStep 32767 /YStep 32767";
      }
      else
      {
        uint64_t v53 = *(void *)(v10 + 144);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/XStep %f", v45, v46, v47, v48, v49, v50, *(void *)(v10 + 136));
        uint64_t v51 = *(void *)(a1 + 8);
        uint64_t v173 = v53;
        signed int v52 = "/YStep %f";
      }
      PDFDocumentPrintf(v51, (uint64_t)v52, v45, v46, v47, v48, v49, v50, v173);
      double v60 = *(double *)(v10 + 24);
      double v61 = *(double *)(v10 + 32);
      double v62 = *(double *)(v10 + 40);
      double v63 = *(double *)(v10 + 48);
      double v64 = *(double *)(v10 + 56);
      double v65 = *(double *)(v10 + 64);
      double v66 = *(double *)(a1 + 32);
      double v67 = *(double *)(a1 + 40);
      double v68 = *(double *)(a1 + 48);
      double v69 = *(double *)(a1 + 56);
      double v70 = *(double *)(a1 + 64);
      double v71 = *(double *)(a1 + 72);
      double v72 = v61 * v68 + v60 * v66;
      double v73 = v61 * v69 + v60 * v67;
      double v178 = v72;
      double v179 = v73;
      double v74 = v63 * v68 + v62 * v66;
      double v75 = v63 * v69 + v62 * v67;
      double v180 = v74;
      double v181 = v75;
      double v76 = v70 + v68 * v65 + v64 * v66;
      double v77 = v69 * v65 + v64 * v67 + v71;
      double v182 = v76;
      double v183 = v77;
      if (v72 != 1.0 || v73 != 0.0 || (v74 == 0.0 ? (BOOL v78 = v75 == 1.0) : (BOOL v78 = 0), !v78 || v76 != 0.0 || v77 != 0.0)) {
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Matrix %m", v54, v55, v56, v57, v58, v59, (uint64_t)&v178);
      }
      uint64_t v79 = *(void *)(a1 + 16);
      if (v79) {
        uint64_t v80 = *(void *)(v79 + 112);
      }
      else {
        uint64_t v80 = 0;
      }
      PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"/Resources %R", *(void *)(v80 + 16), v55, v56, v57, v58, v59);
      PDFContentStreamBeginData(*(uint64_t **)(a1 + 16), v81, v82, v83, v84, v85, v86, v87, v174);
      PDFDocumentPushContentStream(*(void *)(a1 + 8), *(void **)(a1 + 16));
      CGPatternDrawInContextDelegate(v10, *(const void **)(*(void *)(a1 + 8) + 16), 0, 0, v88, v89, v90, v91);
      PDFDocumentPopContentStream(*(void *)(a1 + 8));
      PDFContentStreamEndData(*(void *)(a1 + 16), v92, v93, v94, v95, v96, v97, v98);
      PDFContentStreamEnd(*(CFDataRef **)(a1 + 16));
      PDFResourceSetEmit(v80, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(void *)(a1 + 16);
      if (v16) {
        unint64_t v17 = *(void *)(v16 + 8);
      }
      else {
        unint64_t v17 = 0;
      }
      PDFDocumentBeginObject(v15, v17, a3, a4, a5, a6, a7, a8);
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"<<", v106, v107, v108, v109, v110, v111, v169);
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Type /Pattern", v112, v113, v114, v115, v116, v117, v175);
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/PatternType 2", v118, v119, v120, v121, v122, v123, v176);
      double v130 = *(double *)(v10 + 24);
      double v131 = *(double *)(v10 + 32);
      double v132 = *(double *)(v10 + 40);
      double v133 = *(double *)(v10 + 48);
      double v134 = *(double *)(v10 + 56);
      double v135 = *(double *)(v10 + 64);
      double v136 = *(double *)(a1 + 32);
      double v137 = *(double *)(a1 + 40);
      double v138 = *(double *)(a1 + 48);
      double v139 = *(double *)(a1 + 56);
      double v140 = *(double *)(a1 + 64);
      double v141 = *(double *)(a1 + 72);
      double v142 = v131 * v138 + v130 * v136;
      double v143 = v131 * v139 + v130 * v137;
      double v178 = v142;
      double v179 = v143;
      double v144 = v133 * v138 + v132 * v136;
      double v145 = v133 * v139 + v132 * v137;
      double v180 = v144;
      double v181 = v145;
      double v146 = v140 + v138 * v135 + v134 * v136;
      double v147 = v139 * v135 + v134 * v137 + v141;
      double v182 = v146;
      double v183 = v147;
      if (v142 != 1.0
        || v143 != 0.0
        || (v144 == 0.0 ? (BOOL v148 = v145 == 1.0) : (BOOL v148 = 0), !v148 || v146 != 0.0 || v147 != 0.0))
      {
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Matrix %m", v124, v125, v126, v127, v128, v129, (uint64_t)&v178);
      }
      if (*(_DWORD *)(v10 + 20) == 1) {
        int v149 = *(unsigned int **)(v10 + 80);
      }
      else {
        int v149 = 0;
      }
      uint64_t v150 = PDFDocumentAddShading(*(void *)(a1 + 8), v149);
      PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"/Shading %R", v150[3], v151, v152, v153, v154, v155);
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v156, v157, v158, v159, v160, v161, v177);
      PDFDocumentEndObject(*(void *)(a1 + 8), v162, v163, v164, v165, v166, v167, v168);
    }
    *(void *)(a1 + 24) = 0;
    CFRelease((CFTypeRef)v10);
    *(unsigned char *)(a1 + 96) = 1;
  }
  *a2 = 1;
}

void CGGlyph8BitBitmapSaveAsImage(size_t a1, size_t a2, size_t a3, UInt8 *bytes, char *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFDataRef v9 = CFDataCreate(0, bytes, a1 + (a2 - 1) * a3);
  uint64_t v10 = CGDataProviderCreateWithCFData(v9);
  *(_OWORD *)decode = xmmword_185293280;
  unsigned int v11 = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericGrayGamma2_2");
  CGImageRef v12 = CGImageCreate(a1, a2, 8uLL, 8uLL, a3, v11, 0, v10, decode, 0, kCGRenderingIntentDefault);
  CGImageWriteToFile(v12, a5);
  if (v9) {
    CFRelease(v9);
  }
  CGDataProviderRelease(v10);
  if (v12) {
    CFRelease(v12);
  }
}

void aa_path_iterate(uint64_t a1, int a2, double *a3)
{
  switch(a2)
  {
    case 0:
      float64x2_t v4 = vaddq_f64(*(float64x2_t *)(a1 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), a3[1]), *(float64x2_t *)(a1 + 16), *a3));
      __n128 v5 = (const double *)a1;
      float64x2_t v6 = vld1q_dup_f64(v5++);
      float64x2_t v7 = vld1q_dup_f64(v5);
      int8x16_t v8 = vbslq_s8((int8x16_t)vcgtq_f64(v6, v4), (int8x16_t)v6, vbslq_s8((int8x16_t)vcgtq_f64(v4, v7), (int8x16_t)v7, (int8x16_t)v4));
      double v9 = *(double *)&v8.i64[1];
      if (*(void *)(a1 + 64)) {
        CGFontAutohintTransformApply();
      }
      uint64_t v10 = *(void *)(a1 + 72);
      float v11 = *(double *)v8.i64;
      float v12 = v9;
      aa_moveto(v10, v11, v12);
      break;
    case 1:
      float64x2_t v13 = vaddq_f64(*(float64x2_t *)(a1 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), a3[1]), *(float64x2_t *)(a1 + 16), *a3));
      uint64_t v14 = (const double *)a1;
      float64x2_t v15 = vld1q_dup_f64(v14++);
      float64x2_t v16 = vld1q_dup_f64(v14);
      int8x16_t v17 = vbslq_s8((int8x16_t)vcgtq_f64(v15, v13), (int8x16_t)v15, vbslq_s8((int8x16_t)vcgtq_f64(v13, v16), (int8x16_t)v16, (int8x16_t)v13));
      double v18 = *(double *)&v17.i64[1];
      if (*(void *)(a1 + 64)) {
        CGFontAutohintTransformApply();
      }
      uint64_t v19 = *(void *)(a1 + 72);
      float v20 = *(double *)v17.i64;
      float v21 = v18;
      aa_lineto(v19, v20, v21);
      break;
    case 2:
      float64x2_t v22 = *(float64x2_t *)(a1 + 16);
      float64x2_t v23 = *(float64x2_t *)(a1 + 32);
      float64x2_t v24 = *(float64x2_t *)(a1 + 48);
      float64x2_t v25 = vaddq_f64(v24, vmlaq_n_f64(vmulq_n_f64(v23, a3[1]), v22, *a3));
      uint64_t v26 = (const double *)a1;
      float64x2_t v27 = vld1q_dup_f64(v26++);
      float64x2_t v28 = vld1q_dup_f64(v26);
      int8x16_t v29 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v25), (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f64(v25, v28), (int8x16_t)v28, (int8x16_t)v25));
      double v30 = *(double *)&v29.i64[1];
      float64x2_t v31 = vaddq_f64(v24, vmlaq_n_f64(vmulq_n_f64(v23, a3[3]), v22, a3[2]));
      int8x16_t v32 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v31), (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f64(v31, v28), (int8x16_t)v28, (int8x16_t)v31));
      double v33 = *(double *)&v32.i64[1];
      if (*(void *)(a1 + 64))
      {
        CGFontAutohintTransformApply();
        uint64_t v73 = v34;
        double v30 = v35;
        CGFontAutohintTransformApply();
        v29.i64[0] = v73;
        v32.i64[0] = v36;
        double v33 = v37;
      }
      uint64_t v38 = *(void *)(a1 + 72);
      float v41 = *(double *)v32.i64;
      float v39 = *(double *)v29.i64;
      float v40 = v30;
      float v42 = v33;
      aa_quadto(v38, v39, v40, v41, v42);
      break;
    case 3:
      float64x2_t v43 = *(float64x2_t *)(a1 + 16);
      float64x2_t v44 = *(float64x2_t *)(a1 + 32);
      float64x2_t v45 = *(float64x2_t *)(a1 + 48);
      uint64_t v46 = (const double *)a1;
      float64x2_t v47 = vld1q_dup_f64(v46++);
      float64x2_t v48 = vaddq_f64(v45, vmlaq_n_f64(vmulq_n_f64(v44, a3[1]), v43, *a3));
      float64x2_t v49 = vld1q_dup_f64(v46);
      int8x16_t v50 = vbslq_s8((int8x16_t)vcgtq_f64(v47, v48), (int8x16_t)v47, vbslq_s8((int8x16_t)vcgtq_f64(v48, v49), (int8x16_t)v49, (int8x16_t)v48));
      double v51 = *(double *)&v50.i64[1];
      float64x2_t v52 = vaddq_f64(v45, vmlaq_n_f64(vmulq_n_f64(v44, a3[3]), v43, a3[2]));
      int8x16_t v53 = vbslq_s8((int8x16_t)vcgtq_f64(v47, v52), (int8x16_t)v47, vbslq_s8((int8x16_t)vcgtq_f64(v52, v49), (int8x16_t)v49, (int8x16_t)v52));
      double v54 = *(double *)&v53.i64[1];
      float64x2_t v55 = vaddq_f64(v45, vmlaq_n_f64(vmulq_n_f64(v44, a3[5]), v43, a3[4]));
      int8x16_t v56 = vbslq_s8((int8x16_t)vcgtq_f64(v47, v55), (int8x16_t)v47, vbslq_s8((int8x16_t)vcgtq_f64(v55, v49), (int8x16_t)v49, (int8x16_t)v55));
      double v57 = *(double *)&v56.i64[1];
      if (*(void *)(a1 + 64))
      {
        CGFontAutohintTransformApply();
        uint64_t v72 = v58;
        double v51 = v59;
        CGFontAutohintTransformApply();
        uint64_t v74 = v60;
        double v54 = v61;
        CGFontAutohintTransformApply();
        v50.i64[0] = v72;
        v53.i64[0] = v74;
        v56.i64[0] = v62;
        double v57 = v63;
      }
      uint64_t v64 = *(void *)(a1 + 72);
      float v69 = *(double *)v56.i64;
      float v65 = *(double *)v50.i64;
      float v67 = *(double *)v53.i64;
      float v66 = v51;
      float v68 = v54;
      float v70 = v57;
      aa_cubeto(v64, v65, v66, v67, v68, v69, v70);
      break;
    case 4:
      uint64_t v71 = *(void *)(a1 + 72);
      aa_close(v71);
      break;
    default:
      abort();
  }
}

uint64_t aa_path_begin(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    int v3 = (uint64_t (*)(void, uint64_t, void))a3[2];
    if (v3) {
      return v3(a3[1], a2, a3[6]);
    }
  }
  return result;
}

void process_path_element_14853(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      float64x2_t v3 = vaddq_f64(*(float64x2_t *)(a1 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), *(double *)(*(void *)(a2 + 8) + 8)), *(float64x2_t *)(a1 + 16), **(double **)(a2 + 8)));
      float64x2_t v4 = (const double *)a1;
      float64x2_t v5 = vld1q_dup_f64(v4++);
      float64x2_t v6 = vld1q_dup_f64(v4);
      int8x16_t v7 = vbslq_s8((int8x16_t)vcgtq_f64(v5, v3), (int8x16_t)v5, vbslq_s8((int8x16_t)vcgtq_f64(v3, v6), (int8x16_t)v6, (int8x16_t)v3));
      double v8 = *(double *)&v7.i64[1];
      if (*(void *)(a1 + 64)) {
        CGFontAutohintTransformApply();
      }
      uint64_t v9 = *(void *)(a1 + 72);
      float v10 = *(double *)v7.i64;
      float v11 = v8;
      aa_moveto(v9, v10, v11);
      break;
    case 1:
      float64x2_t v12 = vaddq_f64(*(float64x2_t *)(a1 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), *(double *)(*(void *)(a2 + 8) + 8)), *(float64x2_t *)(a1 + 16), **(double **)(a2 + 8)));
      float64x2_t v13 = (const double *)a1;
      float64x2_t v14 = vld1q_dup_f64(v13++);
      float64x2_t v15 = vld1q_dup_f64(v13);
      int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_f64(v14, v12), (int8x16_t)v14, vbslq_s8((int8x16_t)vcgtq_f64(v12, v15), (int8x16_t)v15, (int8x16_t)v12));
      double v17 = *(double *)&v16.i64[1];
      if (*(void *)(a1 + 64)) {
        CGFontAutohintTransformApply();
      }
      uint64_t v18 = *(void *)(a1 + 72);
      float v19 = *(double *)v16.i64;
      float v20 = v17;
      aa_lineto(v18, v19, v20);
      break;
    case 2:
      float v21 = *(double **)(a2 + 8);
      float64x2_t v22 = *(float64x2_t *)(a1 + 16);
      float64x2_t v23 = *(float64x2_t *)(a1 + 32);
      float64x2_t v24 = *(float64x2_t *)(a1 + 48);
      float64x2_t v25 = vaddq_f64(v24, vmlaq_n_f64(vmulq_n_f64(v23, v21[1]), v22, *v21));
      uint64_t v26 = (const double *)a1;
      float64x2_t v27 = vld1q_dup_f64(v26++);
      float64x2_t v28 = vld1q_dup_f64(v26);
      int8x16_t v29 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v25), (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f64(v25, v28), (int8x16_t)v28, (int8x16_t)v25));
      double v30 = *(double *)&v29.i64[1];
      float64x2_t v31 = vaddq_f64(v24, vmlaq_n_f64(vmulq_n_f64(v23, v21[3]), v22, v21[2]));
      int8x16_t v32 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v31), (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f64(v31, v28), (int8x16_t)v28, (int8x16_t)v31));
      double v33 = *(double *)&v32.i64[1];
      if (*(void *)(a1 + 64))
      {
        CGFontAutohintTransformApply();
        uint64_t v74 = v34;
        double v30 = v35;
        CGFontAutohintTransformApply();
        v29.i64[0] = v74;
        v32.i64[0] = v36;
        double v33 = v37;
      }
      uint64_t v38 = *(void *)(a1 + 72);
      float v41 = *(double *)v32.i64;
      float v39 = *(double *)v29.i64;
      float v40 = v30;
      float v42 = v33;
      aa_quadto(v38, v39, v40, v41, v42);
      break;
    case 3:
      float64x2_t v43 = *(double **)(a2 + 8);
      float64x2_t v44 = *(float64x2_t *)(a1 + 16);
      float64x2_t v45 = *(float64x2_t *)(a1 + 32);
      float64x2_t v46 = *(float64x2_t *)(a1 + 48);
      float64x2_t v47 = (const double *)a1;
      float64x2_t v48 = vld1q_dup_f64(v47++);
      float64x2_t v49 = vaddq_f64(v46, vmlaq_n_f64(vmulq_n_f64(v45, v43[1]), v44, *v43));
      float64x2_t v50 = vld1q_dup_f64(v47);
      int8x16_t v51 = vbslq_s8((int8x16_t)vcgtq_f64(v48, v49), (int8x16_t)v48, vbslq_s8((int8x16_t)vcgtq_f64(v49, v50), (int8x16_t)v50, (int8x16_t)v49));
      double v52 = *(double *)&v51.i64[1];
      float64x2_t v53 = vaddq_f64(v46, vmlaq_n_f64(vmulq_n_f64(v45, v43[3]), v44, v43[2]));
      int8x16_t v54 = vbslq_s8((int8x16_t)vcgtq_f64(v48, v53), (int8x16_t)v48, vbslq_s8((int8x16_t)vcgtq_f64(v53, v50), (int8x16_t)v50, (int8x16_t)v53));
      double v55 = *(double *)&v54.i64[1];
      float64x2_t v56 = vaddq_f64(v46, vmlaq_n_f64(vmulq_n_f64(v45, v43[5]), v44, v43[4]));
      int8x16_t v57 = vbslq_s8((int8x16_t)vcgtq_f64(v48, v56), (int8x16_t)v48, vbslq_s8((int8x16_t)vcgtq_f64(v56, v50), (int8x16_t)v50, (int8x16_t)v56));
      double v58 = *(double *)&v57.i64[1];
      if (*(void *)(a1 + 64))
      {
        CGFontAutohintTransformApply();
        uint64_t v73 = v59;
        double v52 = v60;
        CGFontAutohintTransformApply();
        uint64_t v75 = v61;
        double v55 = v62;
        CGFontAutohintTransformApply();
        v51.i64[0] = v73;
        v54.i64[0] = v75;
        v57.i64[0] = v63;
        double v58 = v64;
      }
      uint64_t v65 = *(void *)(a1 + 72);
      float v70 = *(double *)v57.i64;
      float v66 = *(double *)v51.i64;
      float v68 = *(double *)v54.i64;
      float v67 = v52;
      float v69 = v55;
      float v71 = v58;
      aa_cubeto(v65, v66, v67, v68, v69, v70, v71);
      break;
    case 4:
      uint64_t v72 = *(void *)(a1 + 72);
      aa_close(v72);
      break;
    default:
      abort();
  }
}

BOOL CGFontGetRegistryOrderingSupplement(void *a1, void *a2, void *a3, _DWORD *a4)
{
  cid_info = get_cid_info(a1);
  if (!cid_info) {
    return 0;
  }
  double v8 = cid_info;
  pthread_mutex_lock(cid_info);
  uint64_t v9 = *(void *)v8[1].__opaque;
  if (a2) {
    *a2 = v9;
  }
  if (a3) {
    *a3 = *(void *)&v8[1].__opaque[8];
  }
  if (a4) {
    *a4 = *(_DWORD *)&v8[1].__opaque[16];
  }
  BOOL v10 = v9 != 0;
  pthread_mutex_unlock(v8);
  return v10;
}

pthread_mutex_t *get_cid_info(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a1 + 12;
  uint64_t explicit = (pthread_mutex_t *)atomic_load_explicit(a1 + 12, memory_order_acquire);
  if (!explicit)
  {
    int v13 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t explicit = (pthread_mutex_t *)malloc_type_calloc(1uLL, 0x70uLL, 0x1060040AA484A44uLL);
    pthread_mutex_init(explicit, 0);
    int v4 = (*(uint64_t (**)(void, uint64_t *, uint64_t *, int *))(a1[2] + 200))(a1[14], &v12, &v11, &v13);
    uint64_t v5 = 0;
    uint64_t v7 = v11;
    uint64_t v6 = v12;
    int v8 = v13;
    if (!v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      int v8 = 0;
    }
    *(void *)explicit[1].__opaque = v6;
    *(void *)&explicit[1].__opaque[8] = v7;
    *(_DWORD *)&explicit[1].__opaque[16] = v8;
    explicit[1].__sig = (uint64_t)a1;
    *(void *)&explicit[1].__opaque[24] = 0;
    *(void *)&explicit[1].__opaque[32] = 0;
    atomic_compare_exchange_strong(v2, (unint64_t *)&v5, (unint64_t)explicit);
    if (v5)
    {
      CGCIDInfoRelease((uint64_t)explicit);
      return (pthread_mutex_t *)v5;
    }
  }
  return explicit;
}

pthread_mutex_t *CGFontGetCIDsForGlyphs(void *a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  uint64_t result = get_cid_info(a1);
  if (result)
  {
    int v8 = result;
    if (!a3 || (uint64_t result = 0, a2) && a4)
    {
      uint64_t v9 = *(__int16 **)&v8[1].__opaque[32];
      if (v9) {
        goto LABEL_19;
      }
      if (*(void *)&v8[1].__opaque[24])
      {
        BOOL v10 = (unsigned __int16 *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
        unsigned int v11 = 0;
        *BOOL v10 = -1;
        do
        {
          uint64_t v12 = *(unsigned __int16 **)&v8[1].__opaque[24];
          if (v12)
          {
            if (v12 == (unsigned __int16 *)-1)
            {
              unsigned __int16 v13 = v11;
            }
            else
            {
              unint64_t v14 = atomic_load((unint64_t *)&v12[4 * (v11 >> 10) + 4]);
              if (v14) {
                unsigned __int16 v13 = *(_WORD *)(v14 + 2 * (v11 & 0x3FF));
              }
              else {
                unsigned __int16 v13 = *v12;
              }
            }
          }
          else
          {
            unsigned __int16 v13 = -1;
          }
          CGFontIndexMapAddIndex(v10, v13, v11++);
        }
        while (v11 != 0xFFFF);
        uint64_t v15 = 0;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&v8[1].__opaque[32], (unint64_t *)&v15, (unint64_t)v10, memory_order_relaxed, memory_order_relaxed);
        if (v15) {
          CGFontIndexMapRelease((char *)v10);
        }
      }
      uint64_t v9 = *(__int16 **)&v8[1].__opaque[32];
      if (v9)
      {
LABEL_19:
        CGFontIndexMapGetValues(v9, a2, a3, a4);
        return (pthread_mutex_t *)(a3 != 0);
      }
      else
      {
        uint64_t sig = v8[1].__sig;
        double v17 = *(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t, _WORD *))(*(void *)(sig + 16) + 264);
        uint64_t v18 = *(void *)(sig + 112);
        return (pthread_mutex_t *)v17(v18, a2, a3, a4);
      }
    }
  }
  return result;
}

uint64_t CGFontGetGlyphsForCIDs(void *a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  cid_info = get_cid_info(a1);
  if (!cid_info) {
    return 0;
  }
  if (a3)
  {
    uint64_t v8 = 0;
    if (!a2 || !a4) {
      return v8;
    }
  }
  if (*(void *)&cid_info[1].__opaque[24])
  {
    CGFontIndexMapGetValues(*(__int16 **)&cid_info[1].__opaque[24], a2, a3, a4);
    return a3 != 0;
  }
  uint64_t sig = cid_info[1].__sig;
  unsigned int v11 = *(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t, _WORD *))(*(void *)(sig + 16) + 256);
  uint64_t v12 = *(void *)(sig + 112);

  return v11(v12, a2, a3, a4);
}

void __CGEXRToneMappingGammaGetDefaultOptions_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = xmmword_1E52CC598;
  long long v7 = *(_OWORD *)off_1E52CC5A8;
  LODWORD(valuePtr[0]) = 0;
  valuePtr[0] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(v4) = 0;
  valuePtr[1] = CFNumberCreate(0, kCFNumberIntType, &v4);
  LODWORD(v4) = 0;
  valuePtr[2] = CFNumberCreate(0, kCFNumberFloatType, &v4);
  LODWORD(v4) = 1084227584;
  valuePtr[3] = CFNumberCreate(0, kCFNumberFloatType, &v4);
  CFDictionaryRef v0 = CFDictionaryCreate(0, (const void **)keys, valuePtr, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v2 = valuePtr[i];
    if (v2) {
      CFRelease(v2);
    }
  }
  CFDictionaryRef v3 = v0;
  int v4 = @"kCGApplyEXRToneMappingGamma";
  CGEXRToneMappingGammaGetDefaultOptions_exrToneMappingOptions = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&v4, (const void **)&v3, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(v0);
}

uint64_t validate_cmyk_bitmap_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 40);
  if ((v8 & 0x1F) != 0) {
    goto LABEL_2;
  }
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11 == 32)
  {
    if ((v8 & 0x100) != 0)
    {
      uint64_t v12 = 16;
      goto LABEL_10;
    }
LABEL_2:
    uint64_t v9 = "Valid parameters for CMYK color space model are:\n"
         "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
         "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
         "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOr"
         "der32Little\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOrder32Big";
LABEL_3:
    unsupported(a1, (uint64_t)v9, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (v11 == 16)
  {
    int v14 = *(_DWORD *)(a1 + 40) & 0x7000;
    if ((v8 & 0x100) != 0)
    {
      if (v14 != 4096)
      {
        uint64_t v9 = "Valid parameters for CMYK color space model are:\n"
             "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
             "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
             "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapBy"
             "teOrder32Little\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapBy"
             "teOrder32Big\n"
             "required byte order flag is kCGBitmapByteOrder16Little";
        goto LABEL_3;
      }
      uint64_t v12 = 8;
    }
    else
    {
      uint64_t v12 = 8;
      if ((v8 & 0x7000) != 0 && v14 != 4096 && v14 != 12288)
      {
        uint64_t v9 = "Valid parameters for CMYK color space model are:\n"
             "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
             "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
             "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapBy"
             "teOrder32Little\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapBy"
             "teOrder32Big\n"
             "valid byte order flags are kCGBitmapByteOrderDefault, kCGBitmapByteOrder16Big, kCGBitmapByteOrder16Little";
        goto LABEL_3;
      }
    }
    goto LABEL_21;
  }
  if (v11 != 8) {
    goto LABEL_2;
  }
  uint64_t v12 = 4;
LABEL_10:
  int v13 = *(_DWORD *)(a1 + 40) & 0x7000;
  if ((v8 & 0x7000) != 0 && v13 != 0x2000 && v13 != 0x4000)
  {
    uint64_t v9 = "Valid parameters for CMYK color space model are:\n"
         "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
         "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
         "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOr"
         "der32Little\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOr"
         "der32Big\n"
         "valid byte order flags are kCGBitmapByteOrderDefault, kCGBitmapByteOrder32Big, kCGBitmapByteOrder32Little";
    goto LABEL_3;
  }
LABEL_21:
  if (*(void *)(a1 + 72) != 8 * v12 || (*(void *)(a1 + 88) & (v12 - 1)) != 0 || (v8 & 0xF0000) != 0) {
    goto LABEL_2;
  }

  return check_sizes((void *)a1, v11, a3, a4, a5, a6, a7, a8);
}

void unsupported(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (unsupported_predicate != -1) {
    dispatch_once(&unsupported_predicate, &__block_literal_global_14916);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    unint64_t v10 = *(void *)(*(void *)(v9 + 24) + 48) - 1;
  }
  else {
    unint64_t v10 = -1;
  }
  if (unsupported_full_log)
  {
    if (v10 > 3) {
      uint64_t v11 = "NULL colorspace";
    }
    else {
      uint64_t v11 = off_1E52CC5D8[v10];
    }
    uint64_t v12 = "\n"
          "CGBitmapContextCreate: unsupported parameter combination:\n"
          " \t%s \n"
          "\t%zu bits/component, %s\n"
          " \t%zu bytes/row\n"
          "\t%s\n"
          "\t%s\n"
          "\t%s\n"
          "\t%s\n"
          "%s\n";
  }
  else
  {
    if (v10 > 3) {
      uint64_t v11 = "NULL colorspace";
    }
    else {
      uint64_t v11 = off_1E52CC5D8[v10];
    }
    uint64_t v12 = "\n"
          "CGBitmapContextCreate: unsupported parameter combination:\n"
          "\t%s | %zu bits/component, %s | %zu bytes/row.\n"
          "\t%s | %s | %s\n"
          "Set CGBITMAP_CONTEXT_LOG_ERRORS environmental variable to see more details.\n";
  }
  CGPostError((uint64_t)v12, a2, a3, a4, a5, a6, a7, a8, (char)v11);
}

char *__unsupported_block_invoke()
{
  uint64_t result = getenv("CGBITMAP_CONTEXT_LOG_ERRORS");
  unsupported_full_log = result != 0;
  return result;
}

uint64_t CGColorSpaceCreateDeviceN(unint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a1 > 0x10
    || !a1
    || !a2
    || !a3
    || !a4
    || a4[4] != a1
    || *(void *)(a3[3] + 48) != a4[6]
    || CGColorSpaceGetType(a3) - 7 < 3)
  {
    goto LABEL_70;
  }
  uint64_t v13 = 0;
  do
  {
    if (!*(void *)(a2 + 8 * v13)) {
      goto LABEL_70;
    }
    ++v13;
  }
  while (a1 != v13);
  int v14 = (char *)malloc_type_calloc(0x78uLL, 1uLL, 0x8D164248uLL);
  if (!v14)
  {
LABEL_70:
    uint64_t v53 = CGColorSpaceCreateWithState(0, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_71;
  }
  uint64_t v15 = (uint64_t)v14;
  *(_DWORD *)int v14 = 1;
  v14[12] = *(unsigned char *)(a3[3] + 12);
  *((_DWORD *)v14 + 2) = 0;
  *((_WORD *)v14 + 7) = 0;
  *((void *)v14 + 3) = 0x400000008;
  int8x16_t v16 = v14 + 24;
  *((void *)v14 + 6) = a1;
  double v17 = v14 + 48;
  *((void *)v14 + 14) = color_space_state_create_deviceN_deviceN_vtable;
  *((_DWORD *)v14 + 8) = 4;
  *((void *)v14 + 10) = 0;
  *((void *)v14 + 11) = 0;
  uint64_t v18 = malloc_type_malloc(8 * a1 + 8, 0x100004000313F17uLL);
  float v19 = v18;
  if (v18)
  {
    memset_pattern16(v18, &unk_185220EC0, 8 * a1);
    v19[a1] = 0x3FF0000000000000;
  }
  *(void *)(v15 + 40) = v19;
  float v20 = (void **)malloc_type_calloc(0x90uLL, 1uLL, 0xDAE0BFD8uLL);
  *(void *)(v15 + 96) = v20;
  if (!v20)
  {
LABEL_69:
    free((void *)v15);
    goto LABEL_70;
  }
  float v21 = v20;
  float64x2_t v22 = malloc_type_malloc(8 * a1, 0x10040436913F5uLL);
  *float v21 = v22;
  if (!v22)
  {
LABEL_68:
    free(*(void **)(v15 + 96));
    goto LABEL_69;
  }
  float64x2_t v56 = v16;
  for (uint64_t i = 0; i != a1; ++i)
  {
    size_t v24 = strlen(*(const char **)(a2 + 8 * i));
    *((void *)*v21 + i) = malloc_type_malloc(v24 + 1, 0x9B2D5ECBuLL);
    float64x2_t v25 = *v21;
    if (!*((void *)*v21 + i))
    {
      if (!i)
      {
LABEL_67:
        free(v25);
        goto LABEL_68;
      }
      for (uint64_t j = 0; j != i; ++j)
        free(*((void **)*v21 + j));
LABEL_66:
      float64x2_t v25 = *v21;
      goto LABEL_67;
    }
    strcpy(*((char **)*v21 + i), *(const char **)(a2 + 8 * i));
  }
  CFRetain(a3);
  v21[1] = a3;
  CFRetain(a4);
  v21[2] = a4;
  if (!a5)
  {
    v21[3] = 0;
    goto LABEL_32;
  }
  uint64_t v26 = malloc_type_malloc(8 * a1, 0x2004093837F09uLL);
  v21[3] = v26;
  if (!v26)
  {
    uint64_t v54 = 0;
    do
      free(*((void **)*v21 + v54++));
    while (a1 != v54);
    goto LABEL_66;
  }
  for (uint64_t k = 0; k != a1; ++k)
  {
    uint64_t v28 = *(void *)(a5 + 8 * k);
    if (v28) {
      CFRetain(*(CFTypeRef *)(a5 + 8 * k));
    }
    *((void *)v21[3] + k) = v28;
  }
LABEL_32:
  memset(md, 0, 16);
  MD5 = CGDigesterCreateMD5();
  float64x2_t v31 = MD5;
  if (MD5)
  {
    CC_MD5_Update(MD5, v56, 4u);
    CC_MD5_Update(v31, v17, 8u);
  }
  int8x16_t v32 = *(void **)(v15 + 96);
  unint64_t v33 = *(void *)(v15 + 48);
  if (v33)
  {
    for (unint64_t m = 0; m < v33; ++m)
    {
      if (v31)
      {
        size_t v35 = strlen(*(const char **)(*v32 + 8 * m));
        md5_update(v31, *(char **)(*v32 + 8 * m), v35);
        unint64_t v33 = *v17;
      }
    }
  }
  uint64_t v36 = v32[1];
  if (v36)
  {
    uint64_t v37 = *(void *)(v36 + 24);
    if (v37) {
      uint64_t v38 = (const void *)(v37 + 64);
    }
    else {
      uint64_t v38 = 0;
    }
  }
  else
  {
    uint64_t v38 = 0;
  }
  if (v31) {
    CC_MD5_Update(v31, v38, 0x10u);
  }
  if (v32[3])
  {
    unint64_t v39 = *v17;
    if (*v17)
    {
      unint64_t v40 = 0;
      do
      {
        uint64_t v41 = *(void *)(v32[3] + 8 * v40);
        if (v41)
        {
          uint64_t v42 = *(void *)(v41 + 24);
          if (v42) {
            float64x2_t v43 = (const void *)(v42 + 64);
          }
          else {
            float64x2_t v43 = 0;
          }
        }
        else
        {
          float64x2_t v43 = 0;
        }
        if (v31)
        {
          CC_MD5_Update(v31, v43, 0x10u);
          unint64_t v39 = *v17;
        }
        ++v40;
      }
      while (v40 < v39);
    }
  }
  uint64_t v44 = v32[2];
  if (v44) {
    LODWORD(v44) = *(_DWORD *)(v44 + 16);
  }
  int data = v44;
  if (v31)
  {
    CC_MD5_Update(v31, &data, 4u);
    CC_MD5_Final(md, v31);
    long long v45 = *(_OWORD *)md;
  }
  else
  {
    long long v45 = 0uLL;
  }
  long long v57 = v45;
  free(v31);
  *(_OWORD *)(v15 + 64) = v57;
  uint64_t v53 = CGColorSpaceCreateWithState((atomic_uint *)v15, v46, v47, v48, v49, v50, v51, v52);
  if (atomic_fetch_add_explicit((atomic_uint *volatile)v15, 0xFFFFFFFF, memory_order_relaxed) == 1) {
    color_space_state_dealloc(v15);
  }
LABEL_71:
  if (v53) {
    *(void *)(v53 + 24) = color_space_state_register(*(unsigned char **)(v53 + 24));
  }
  return v53;
}

uint64_t deviceN_get_descriptor(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

void deviceN_finalize(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    free(v2);
  }
  uint64_t v3 = a1[12];
  if (v3)
  {
    CGColorSpaceRelease(*(CGColorSpaceRef *)(v3 + 8));
    int v4 = *(const void **)(v3 + 16);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(void **)(v3 + 24);
    if (v5)
    {
      if (a1[6])
      {
        unint64_t v6 = 0;
        do
          CGColorSpaceRelease(*(CGColorSpaceRef *)(*(void *)(v3 + 24) + 8 * v6++));
        while (v6 < a1[6]);
        uint64_t v5 = *(void **)(v3 + 24);
      }
      free(v5);
    }
    long long v7 = *(void **)v3;
    if (*(void *)v3)
    {
      if (a1[6])
      {
        unint64_t v8 = 0;
        do
          free(*(void **)(*(void *)v3 + 8 * v8++));
        while (v8 < a1[6]);
        long long v7 = *(void **)v3;
      }
      free(v7);
    }
  }
}

uint64_t CGColorSpaceGetTintTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v8 + 24) != 8) {
    _CGHandleAssert("CGColorSpaceGetTintTransform", 226, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_DeviceN.c", "s->state->type == kCGColorSpaceDeviceN", "Colorspace must be DeviceN. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 24));
  }
  return *(void *)(*(void *)(v8 + 96) + 16);
}

uint64_t CGColorSpaceGetColorants(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v8 + 24) != 8) {
    _CGHandleAssert("CGColorSpaceGetColorants", 233, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_DeviceN.c", "s->state->type == kCGColorSpaceDeviceN", "Colorspace must be DeviceN. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 24));
  }
  return *(void *)(*(void *)(v8 + 96) + 24);
}

uint64_t CGColorSpaceGetNames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v8 + 24) != 8) {
    _CGHandleAssert("CGColorSpaceGetNames", 240, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_DeviceN.c", "s->state->type == kCGColorSpaceDeviceN", "Colorspace must be DeviceN. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 24));
  }
  return **(void **)(v8 + 96);
}

BOOL splitRotationZonesCondition(uint64_t a1, uint64_t a2, double *a3)
{
  double v3 = *(double *)(a1 + 168);
  double v4 = v3 + -360.0;
  if (v3 <= 350.0) {
    double v4 = *(double *)(a1 + 168);
  }
  double v5 = *(double *)(a2 + 168);
  if (v5 > 350.0) {
    double v5 = v5 + -360.0;
  }
  if (v4 - *a3 >= 10.0) {
    __assert_rtn("splitRotationZonesCondition", "CPZoneMaker.m", 1123, "rotation1 - *minRotation < SAME_ROTATION_ZONE_RANGE");
  }
  double v6 = v5 - *a3;
  if (v6 > 10.0) {
    *a3 = v5;
  }
  return v6 > 10.0;
}

uint64_t compareByRotation(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(*(void *)a1 + 168);
  if (v2 > 350.0) {
    double v2 = v2 + -360.0;
  }
  double v3 = *(double *)(*(void *)a2 + 168);
  double v4 = v3 + -360.0;
  if (v3 <= 350.0) {
    double v4 = *(double *)(*(void *)a2 + 168);
  }
  if (v2 < v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v2 > v4;
  }
}

uint64_t findZone(CGFloat *a1, void *a2, id *a3)
{
  while (1)
  {
    double v3 = a3;
    double v4 = a2;
    double v5 = a1;
    __double2 v6 = __sincos_stret(a1[21] * 0.0174532925);
    CGFloat v7 = *v5;
    CGFloat v8 = v5[1];
    v21.size.double width = v5[2];
    v21.size.double height = v5[3];
    v19.a = v6.__cosval;
    v19.b = v6.__sinval;
    v19.c = -v6.__sinval;
    v19.d = v6.__cosval;
    v19.tdouble x = 0.0;
    v19.tdouble y = 0.0;
    v21.origin.double x = v7;
    v21.origin.double y = v8;
    CGRect v22 = CGRectApplyAffineTransform(v21, &v19);
    CGRect v23 = CGRectInset(v22, v22.size.width * 0.1, v22.size.height * 0.3);
    double x = v23.origin.x;
    double y = v23.origin.y;
    double width = v23.size.width;
    double height = v23.size.height;
    if (!*v3) {
      break;
    }
    uint64_t result = [*v3 count];
    if (!result) {
      return result;
    }
    int v14 = result;
    uint64_t v15 = 0;
    while (1)
    {
      int8x16_t v16 = (void *)[*v3 childAtIndex:v15];
      uint64_t result = objc_msgSend(v16, "canContain:", x, y, width, height);
      if (result) {
        break;
      }
      uint64_t v15 = (v15 + 1);
      if (v14 == v15) {
        return result;
      }
    }
LABEL_12:
    *double v3 = v16;
    a1 = v5;
    a2 = v4;
    a3 = v3;
  }
  uint64_t result = [v4 count];
  uint64_t v17 = result;
  if (result)
  {
    uint64_t v18 = 0;
    while (1)
    {
      int8x16_t v16 = (void *)[v4 objectAtIndex:v18];
      uint64_t result = objc_msgSend(v16, "canContain:", x, y, width, height);
      if (result) {
        break;
      }
      if (v17 == ++v18) {
        return result;
      }
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t continueZone(int a1, CGFloat *a2, uint64_t a3)
{
  __double2 v6 = __sincos_stret(a2[21] * 0.0174532925);
  CGFloat v7 = *a2;
  CGFloat v8 = a2[1];
  v19.size.double width = a2[2];
  v19.size.double height = a2[3];
  v18.a = v6.__cosval;
  v18.b = v6.__sinval;
  v18.c = -v6.__sinval;
  v18.d = v6.__cosval;
  v18.tdouble x = 0.0;
  v18.tdouble y = 0.0;
  v19.origin.double x = v7;
  v19.origin.double y = v8;
  CGRect v20 = CGRectApplyAffineTransform(v19, &v18);
  CGRect v21 = CGRectInset(v20, v20.size.width * 0.1, v20.size.height * 0.3);
  double x = v21.origin.x;
  double y = v21.origin.y;
  double width = v21.size.width;
  double height = v21.size.height;
  uint64_t v13 = 0;
  if (objc_msgSend(*(id *)a3, "canContain:"))
  {
    int v14 = [*(id *)a3 count];
    if (!v14) {
      return 1;
    }
    int v15 = v14;
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v13 = (void *)[*(id *)a3 childAtIndex:v16];
      if (objc_msgSend(v13, "canContain:", x, y, width, height)) {
        break;
      }
      uint64_t v16 = (v16 + 1);
      if (v15 == v16) {
        return 1;
      }
    }
  }
  uint64_t result = 0;
  *(void *)a3 = v13;
  *(_DWORD *)(a3 + 8) = a1;
  return result;
}

uint64_t cutBordersCrossingText(CGFloat *a1, void *a2)
{
  __double2 v4 = __sincos_stret(a1[21] * 0.0174532925);
  CGFloat v5 = *a1;
  CGFloat v6 = a1[1];
  v83.size.double width = a1[2];
  v83.size.double height = a1[3];
  uint64_t v81 = a1;
  v82.double a = v4.__cosval;
  v82.double b = v4.__sinval;
  v82.c = -v4.__sinval;
  v82.d = v4.__cosval;
  v82.tCGFloat x = 0.0;
  v82.tdouble y = 0.0;
  v83.origin.CGFloat x = v5;
  v83.origin.double y = v6;
  CGRect v84 = CGRectApplyAffineTransform(v83, &v82);
  double y = v84.origin.y;
  CGFloat x = v84.origin.x;
  double height = v84.size.height;
  double width = v84.size.width;
  uint64_t v7 = [a2 count];
  if (v7)
  {
    v85.size.double height = height;
    v85.size.double width = width;
    v85.origin.double y = y;
    v85.origin.CGFloat x = x;
    CGRect v86 = CGRectInset(v85, width * 0.1, height * 0.3);
    CGFloat v8 = v86.origin.x;
    CGFloat v9 = v86.origin.y;
    CGFloat v10 = v86.size.width;
    CGFloat v11 = v86.size.height;
    float v66 = a2;
    CGFloat v71 = v86.size.height;
    do
    {
      uint64_t v12 = (v7 - 1);
      uint64_t v13 = objc_msgSend(a2, "objectAtIndex:", v12, v66);
      [v13 bounds];
      CGFloat v15 = v14;
      CGFloat v17 = v16;
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      v87.origin.CGFloat x = v8;
      v87.origin.double y = v9;
      v87.size.double width = v10;
      v87.size.double height = v11;
      v88.origin.CGFloat x = v15;
      v88.origin.double y = v17;
      v88.size.double width = v19;
      v88.size.double height = v21;
      if (CGRectIntersectsRect(v87, v88))
      {
        uint64_t v22 = objc_msgSend((id)objc_msgSend(v13, "page"), "PDFContext");
        uint64_t v23 = *((unsigned int *)v81 + 16);
        if (v23)
        {
          uint64_t v79 = v22;
          unint64_t v24 = 0;
          while (1)
          {
            uint64_t v25 = *(void *)(v79 + 2224);
            while (1)
            {
              unint64_t v26 = *(unsigned int *)(v25 + 52 * v23 + 8);
              if (v26 && v24 < v26) {
                break;
              }
              unint64_t v24 = 0;
              uint64_t v23 = *(unsigned int *)(v25 + 52 * v23);
              if (!v23) {
                goto LABEL_21;
              }
            }
            unsigned int v28 = *(_DWORD *)(v25 + 52 * v23 + 4 * v24 + 12);
            if (v28 >= *(_DWORD *)(v79 + 2152)) {
              break;
            }
            uint64_t v29 = *(void *)(v79 + 2112) + 216 * v28;
            double v30 = *(const CGPath **)(v29 + 96);
            if (!v30) {
              break;
            }
            int v31 = *(unsigned __int8 *)(v29 + 104);
            eoFilldouble b = *(unsigned char *)(v29 + 104) == 0;
            __double2 v33 = __sincos_stret(v81[21] * 0.0174532925);
            v32.f64[0] = v33.__cosval;
            v34.f64[0] = -v33.__sinval;
            v34.f64[1] = v33.__cosval;
            v32.f64[1] = v33.__sinval;
            double v67 = v81[1];
            float64x2_t v68 = v34;
            double v69 = *v81;
            float64x2_t v70 = vmulq_n_f64(v34, v67);
            float64x2_t v80 = v32;
            float64x2_t v35 = vaddq_f64(vmlaq_n_f64(v70, v32, *v81), (float64x2_t)0);
            v32.f64[0] = v35.f64[1];
            a2 = v66;
            if (CGPathContainsPoint(v30, 0, *(CGPoint *)((char *)&v32 - 8), eoFillb))
            {
              double eoFill = v69 + v81[2];
              CGPoint v36 = (CGPoint)vaddq_f64(vmlaq_n_f64(v70, v80, eoFill), (float64x2_t)0);
              CGFloat v37 = v36.y;
              if (CGPathContainsPoint(v30, 0, v36, v31 == 0))
              {
                float64x2_t v38 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&eoFill, 0);
                eoFilldouble a = vmulq_n_f64(v68, v67 + v81[3]);
                CGPoint v39 = (CGPoint)vaddq_f64(vmlaq_f64(eoFilla, v38, v80), (float64x2_t)0);
                CGFloat v40 = v39.y;
                if (CGPathContainsPoint(v30, 0, v39, v31 == 0))
                {
                  ++v24;
                  CGPoint v41 = (CGPoint)vaddq_f64(vmlaq_n_f64(eoFilla, v80, *v81), (float64x2_t)0);
                  CGFloat v42 = v41.y;
                  if (CGPathContainsPoint(v30, 0, v41, v31 == 0)) {
                    continue;
                  }
                }
              }
            }
            goto LABEL_59;
          }
        }
LABEL_21:
        double v43 = v10;
        double v44 = v9;
        double v45 = v8;
        int v46 = [v13 isHorizontal];
        int v47 = v46;
        v82.double a = 0.0;
        v82.double b = 0.0;
        if (v46) {
          double v48 = v15;
        }
        else {
          double v48 = v17;
        }
        if (v46) {
          double v49 = v19;
        }
        else {
          double v49 = v21;
        }
        double v50 = x;
        if (!v46) {
          double v50 = y;
        }
        double v51 = width;
        if (!v46) {
          double v51 = height;
        }
        double v52 = CGIntervalExclusion((uint64_t)&v82, v48, v49, v50, v51);
        if (fabs(v52) == INFINITY)
        {
          [v13 removeFromArray];
        }
        else
        {
          if (v47) {
            double v54 = v52;
          }
          else {
            double v54 = v15;
          }
          if (v47) {
            double v55 = v17;
          }
          else {
            double v55 = v52;
          }
          if (v47) {
            double v56 = v53;
          }
          else {
            double v56 = v19;
          }
          if (v47) {
            double v57 = v21;
          }
          else {
            double v57 = v53;
          }
          objc_msgSend(v13, "setBounds:", v54, v55, v56, v57);
          double a = v82.a;
          if (fabs(v82.a) != INFINITY)
          {
            uint64_t v59 = (void *)[v13 copy];
            uint64_t v60 = v59;
            double b = v82.b;
            if (v47) {
              double v62 = a;
            }
            else {
              double v62 = v15;
            }
            if (v47) {
              double v63 = v17;
            }
            else {
              double v63 = a;
            }
            if (v47) {
              double v64 = v82.b;
            }
            else {
              double v64 = v19;
            }
            if (v47) {
              double b = v21;
            }
            objc_msgSend(v59, "setBounds:", v62, v63, v64, b);
            [v60 addToArray:a2 atIndex:v7];
          }
        }
        CGFloat v8 = v45;
        CGFloat v9 = v44;
        CGFloat v10 = v43;
        CGFloat v11 = v71;
      }
LABEL_59:
      --v7;
    }
    while (v12);
  }
  return 1;
}

void findLineSegments(void *a1, unsigned int *a2, __n128 a3, double a4, double a5)
{
  uint64_t v7 = a1 + 2;
  long long v8 = *((_OWORD *)a1 + 1);
  CGFloat v9 = a1 + 4;
  double v10 = *((double *)a1 + 4);
  double v11 = *((double *)a1 + 5);
  uint64_t v12 = *a2;
  if ((v12 - 1) < 3)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v14 = dword_1850CE0D0[v12] - 1;
    uint64_t v15 = a1[6];
    uint64_t v16 = *((unsigned int *)a1 + 14);
    *((_DWORD *)a1 + 14) = v16 + 1;
    long long v8 = *(_OWORD *)(v13 + 16 * v14);
    *(_OWORD *)(v15 + 16 * v16) = v8;
LABEL_6:
    double v18 = *((double *)&v8 + 1);
    a3.n128_f64[0] = vabdd_f64(*(double *)&v8, v10);
    a4 = vabdd_f64(*((double *)&v8 + 1), v11);
    a5 = 2.0;
    if (a3.n128_f64[0] > 2.0 || a4 > 2.0)
    {
      long long v71 = v8;
      double v20 = (void *)[(id)*a1 copy];
      objc_msgSend(v20, "makeLineFromVertex:toVertex:", v10, v11, *(double *)&v71, v18);
      CGFloat v21 = [[CPZoneBorder alloc] initWithGraphicObject:v20];

      long long v8 = v71;
      if (v21)
      {
        double v22 = *(double *)&v71 - v10;
        double v23 = v18 - v11;
        BOOL v24 = [(CPZoneBorder *)v21 isHorizontal];
        if (v23 < 0.0) {
          int v25 = 4;
        }
        else {
          int v25 = 0;
        }
        if (v23 <= 0.0) {
          unsigned int v26 = v25;
        }
        else {
          unsigned int v26 = 2;
        }
        float64x2_t v27 = a1 + 9;
        if (v22 <= 0.0) {
          unsigned int v28 = v22 < 0.0;
        }
        else {
          unsigned int v28 = 3;
        }
        if (v24)
        {
          float64x2_t v27 = a1 + 8;
          uint64_t v29 = v28;
        }
        else
        {
          uint64_t v29 = v26;
        }
        [(CPZoneBorder *)v21 addToArray:*v27];
        double v30 = objc_alloc_init(CPZoneBorderNeighbor);
        [(CPZoneBorderNeighbor *)v30 setNeighborShape:*a1];
        [(CPZoneBorderNeighbor *)v30 setShapeSide:v29];
        [(CPZoneBorder *)v21 addNeighbor:v30];

        long long v8 = v71;
      }
    }
    *CGFloat v9 = v8;
    goto LABEL_25;
  }
  if (v12 == 4) {
    goto LABEL_6;
  }
  if (v12) {
    goto LABEL_26;
  }
  CGFloat v17 = (_OWORD *)*((void *)a2 + 1);
  *uint64_t v7 = *v17;
  a3 = *(__n128 *)v17;
  *CGFloat v9 = *v17;
LABEL_25:
  LODWORD(v12) = *a2;
LABEL_26:
  unsigned int v31 = *((_DWORD *)a1 + 2) + 1;
  *((_DWORD *)a1 + 2) = v31;
  if ((v12 | 4) != 4 && v31 < *((_DWORD *)a1 + 3)) {
    return;
  }
  unsigned int v32 = objc_msgSend((id)a1[8], "count", a3.n128_f64[0], a4, a5, *(double *)&v8);
  unsigned int v33 = [(id)a1[9] count];
  unsigned int v34 = *((_DWORD *)a1 + 14);
  if (v34)
  {
    int v35 = 0;
    char v36 = 0;
    uint64_t v37 = 0;
    unsigned int v38 = 0;
    CGPoint v39 = (double *)a1[6];
    double v40 = *v39;
    double v41 = v39[1];
    int v42 = -1;
    do
    {
      double v43 = v40;
      double v44 = v41;
      if (v35 + 1 < v34) {
        ++v35;
      }
      else {
        int v35 = 0;
      }
      double v45 = &v39[2 * v35];
      double v40 = *v45;
      double v41 = v45[1];
      if (v43 == *v45 && v44 == v41)
      {
        uint64_t v51 = v37;
      }
      else
      {
        BOOL v47 = v43 - v40 > 0.0;
        double v48 = vabdd_f64(v43, v40);
        double v49 = v44 - v41;
        double v50 = vabdd_f64(v44, v41);
        LODWORD(v51) = 2 * v47;
        if (v49 > 0.0) {
          unsigned int v52 = 1;
        }
        else {
          unsigned int v52 = 3;
        }
        if (v48 <= v50) {
          uint64_t v51 = v52;
        }
        else {
          uint64_t v51 = v51;
        }
        if (v36)
        {
          int v53 = v51 - v37;
          if (v51 - v37 == -3) {
            int v54 = 1;
          }
          else {
            int v54 = v51 - v37;
          }
          if (v53 == 3) {
            int v55 = -1;
          }
          else {
            int v55 = v54;
          }
          v38 += v55;
        }
        char v36 = 1;
      }
      ++v42;
      uint64_t v37 = v51;
    }
    while (v34 != v42);
    if ((v38 & 0x80000000) == 0)
    {
      if (v38 <= 3)
      {
        uint64_t v56 = *((unsigned int *)a1 + 20);
        if (v32 > v56)
        {
          int v57 = v32 - v56;
          do
          {
            objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a1[8], "objectAtIndex:", v56++), "neighborAtIndex:", 0), "setShapeSide:", 0);
            --v57;
          }
          while (v57);
        }
        uint64_t v58 = *((unsigned int *)a1 + 21);
        if (v33 > v58)
        {
          int v59 = v33 - v58;
          do
          {
            objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a1[9], "objectAtIndex:", v58++), "neighborAtIndex:", 0), "setShapeSide:", 0);
            --v59;
          }
          while (v59);
        }
      }
      goto LABEL_80;
    }
    uint64_t v60 = *((unsigned int *)a1 + 20);
    if (v32 > v60)
    {
      int v61 = v32 - v60;
      while (1)
      {
        double v62 = objc_msgSend((id)objc_msgSend((id)a1[8], "objectAtIndex:", v60), "neighborAtIndex:", 0);
        int v63 = [v62 shapeSide];
        if (v63 == 3) {
          break;
        }
        if (v63 == 1)
        {
          uint64_t v64 = 3;
LABEL_70:
          [v62 setShapeSide:v64];
        }
        ++v60;
        if (!--v61) {
          goto LABEL_72;
        }
      }
      uint64_t v64 = 1;
      goto LABEL_70;
    }
LABEL_72:
    uint64_t v65 = *((unsigned int *)a1 + 21);
    if (v33 > v65)
    {
      int v66 = v33 - v65;
      while (1)
      {
        double v67 = objc_msgSend((id)objc_msgSend((id)a1[9], "objectAtIndex:", v65), "neighborAtIndex:", 0);
        int v68 = [v67 shapeSide];
        if (v68 == 2) {
          break;
        }
        if (v68 == 4)
        {
          uint64_t v69 = 2;
LABEL_78:
          [v67 setShapeSide:v69];
        }
        ++v65;
        if (!--v66) {
          goto LABEL_80;
        }
      }
      uint64_t v69 = 4;
      goto LABEL_78;
    }
  }
LABEL_80:
  if (*a2)
  {
    int v70 = 0;
  }
  else
  {
    *(_OWORD *)a1[6] = *v7;
    int v70 = 1;
  }
  *((_DWORD *)a1 + 14) = v70;
  *((_DWORD *)a1 + 20) = v32;
  *((_DWORD *)a1 + 21) = v33;
}

uint64_t canBeMerged(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && [a1 zoneGraphicType] == 2
    && ([a1 lineWidth], v2 == 0.0))
  {
    return [a1 hasStroke] ^ 1;
  }
  else
  {
    return 0;
  }
}

UInt8 *read_string(__CFReadStream *a1)
{
  *(_DWORD *)buffer = 0;
  double v2 = 0;
  if (CFReadStreamRead(a1, buffer, 4))
  {
    if (*(_DWORD *)buffer)
    {
      size_t v3 = bswap32(*(unsigned int *)buffer);
      double v2 = (UInt8 *)malloc_type_malloc(v3, 0x83DA52A5uLL);
      if (v2) {
        CFReadStreamRead(a1, v2, v3);
      }
    }
  }
  return v2;
}

void cmap_release(uint64_t a1)
{
  if (a1 && atomic_fetch_add_explicit((atomic_uint *volatile)a1, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    free(*(void **)(a1 + 8));
    free(*(void **)(a1 + 16));
    cmap_release(*(void *)(a1 + 32));
    cmap_csr_set_release(*(void *)(a1 + 48));
    free((void *)a1);
  }
}

char *cmap_set_name(uint64_t a1, char *__s)
{
  __double2 v4 = *(void **)(a1 + 8);
  if (v4)
  {
    free(v4);
    *(unsigned char *)(a1 + 40) = 0;
  }
  size_t v5 = strlen(__s);
  uint64_t result = (char *)malloc_type_malloc(v5 + 1, 0x99634949uLL);
  *(void *)(a1 + 8) = result;
  if (result)
  {
    strcpy(result, __s);
    uint64_t result = (char *)strcmp(__s, "Identity-H");
    if (!result || (uint64_t result = (char *)strcmp(__s, "Identity-V"), !result)) {
      *(unsigned char *)(a1 + 40) = 1;
    }
  }
  return result;
}

uint64_t cmap_set_ros(uint64_t a1, char *__s, const char *a3, int a4)
{
  long long v8 = *(void **)(a1 + 16);
  if (v8) {
    free(v8);
  }
  size_t v9 = strlen(__s);
  size_t v10 = v9 + strlen(a3) + 35;
  double v11 = (char *)malloc_type_malloc(v10, 0x36FF4DB3uLL);
  *(void *)(a1 + 16) = v11;
  return snprintf_l(v11, v10, 0, "%s-%s-%u", __s, a3, a4);
}

void cmap_set_used_cmap(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32))
  {
    if (a2 && *(void *)(a2 + 8))
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)a2, 1u, memory_order_relaxed);
      *(void *)(a1 + 32) = a2;
      if (!*(void *)(a1 + 48))
      {
        uint64_t v4 = cmap_csr_set_create();
        *(void *)(a1 + 48) = v4;
        if (v4)
        {
          uint64_t v5 = *(void *)(a2 + 48);
          if (v5)
          {
            uint64_t v6 = v4;
            CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 8));
            if (Count)
            {
              CFIndex v8 = Count;
              for (CFIndex i = 0; i != v8; ++i)
              {
                CFDictionaryRef ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 8), i);
                cmap_csr_set_add_codespace_range((unsigned __int8 *)v6, *ValueAtIndex, *((_DWORD *)ValueAtIndex + 1), *((_DWORD *)ValueAtIndex + 2));
              }
            }
            unint64_t v11 = *(void *)(v5 + 16);
            if (v11)
            {
              uint64_t v12 = *(void *)(v6 + 16);
              if (!v12) {
                operator new();
              }
              uint64_t v13 = (unsigned __int16 *)malloc_type_malloc(2 * *(void *)(v11 + 40), 0x1000040BDFB0063uLL);
              if (v13)
              {
                CGFloat v19 = v13;
                if (*(_DWORD *)v11)
                {
                  unsigned int v20 = 0;
                  do
                  {
                    unint64_t unichars = cmap_bf_set_get_unichars(v11, (unsigned __int16)v20, (uint64_t)v19, v14, v15, v16, v17, v18);
                    cmap_bf_set_add_range(v12, v20, v20, unichars, v19);
                    ++v20;
                  }
                  while (v20 < *(_DWORD *)v11);
                }
                free(v19);
              }
            }
          }
        }
      }
    }
    else
    {
      *(void *)(a1 + 32) = 0;
    }
  }
}

uint64_t cmap_add_cid_range(uint64_t result, unsigned __int8 a2, unsigned int a3, uint64_t a4, int a5)
{
  if (result)
  {
    uint64_t v8 = result;
    unsigned int v9 = a2;
    uint64_t result = check_dimension(a2, a3, a4);
    if (result)
    {
      uint64_t result = (uint64_t)find_csr(v8, v9, a3, a4);
      if (result)
      {
        uint64_t v10 = result;
        uint64_t v11 = *(void *)(result + 16);
        if (v11)
        {
LABEL_11:
          uint64_t result = (uint64_t)add_range(v11, a3 | (unint64_t)(a4 << 32), a5);
          *(unsigned char *)(v11 + 32) = 1;
          return result;
        }
        unsigned int v12 = *(unsigned __int8 *)result;
        if (v12 <= 4 && ((1 << v12) & 0x16) != 0)
        {
          uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0x28uLL, 0x10200401AE633E8uLL);
          if (result)
          {
            uint64_t v11 = result;
            *(unsigned char *)uint64_t result = v12;
            *(unsigned char *)(result + 32) = 0;
            *(void *)(v10 + 16) = result;
            goto LABEL_11;
          }
        }
        *(void *)(v10 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t cmap_add_notdef_range(uint64_t result, unsigned __int8 a2, unsigned int a3, uint64_t a4, int a5)
{
  if (result)
  {
    uint64_t v8 = result;
    unsigned int v9 = a2;
    uint64_t result = check_dimension(a2, a3, a4);
    if (result)
    {
      uint64_t result = (uint64_t)find_csr(v8, v9, a3, a4);
      if (result)
      {
        uint64_t v10 = result;
        uint64_t v11 = *(void *)(result + 24);
        if (!v11)
        {
          unsigned int v12 = *(unsigned __int8 *)result;
          if (v12 > 4 || ((1 << v12) & 0x16) == 0)
          {
            uint64_t v11 = 0;
          }
          else
          {
            uint64_t v14 = malloc_type_calloc(1uLL, 0x28uLL, 0x10200401AE633E8uLL);
            uint64_t v11 = (uint64_t)v14;
            if (v14)
            {
              *uint64_t v14 = v12;
              v14[32] = 0;
            }
          }
          *(void *)(v10 + 24) = v11;
        }
        uint64_t result = (uint64_t)add_range(v11, a3 | (unint64_t)(a4 << 32), a5);
        *(unsigned char *)(v11 + 32) = 1;
      }
    }
  }
  return result;
}

unint64_t cmap_convert(uint64_t a1, unsigned __int16 *a2, unint64_t a3, _WORD *a4, unint64_t *a5)
{
  unint64_t v5 = a3;
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v7 = a3 >> 1;
    if (a3 >= 2)
    {
      if (v7 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = a3 >> 1;
      }
      do
      {
        *a4++ = bswap32(*a2) >> 16;
        if (a5) {
          *a5++ = 2;
        }
        ++a2;
        --v8;
      }
      while (v8);
    }
    return v7;
  }
  if (!a3) {
    return 0;
  }
  int v63 = a5;
  uint64_t v64 = a4;
  unint64_t v7 = 0;
  unsigned int v9 = *(CFArrayRef **)(a1 + 48);
  uint64_t v59 = *(void *)(a1 + 32);
  __int16 v71 = 0;
  uint64_t v65 = (unsigned __int8 *)v9 + 1;
  uint64_t v69 = v9;
  unint64_t v70 = 0;
  int64x2_t v68 = vdupq_n_s64(2uLL);
  do
  {
    if (!v9)
    {
      unint64_t v13 = v5;
      goto LABEL_57;
    }
    int v73 = 0;
    uint64_t v72 = 0;
    CFIndex Count = CFArrayGetCount(v9[1]);
    unint64_t v11 = *(unsigned __int8 *)v9;
    CFIndex v67 = Count;
    if (!Count) {
      goto LABEL_18;
    }
    unint64_t v12 = *v65 >= v5 ? v5 : *v65;
    if (v12 < v11) {
      goto LABEL_18;
    }
    int v35 = 0;
    uint64_t v36 = *(unsigned __int8 *)v9;
    unint64_t v60 = v12;
    char v61 = *(unsigned char *)v9;
    while (2)
    {
      CFIndex v37 = 0;
      uint64_t v38 = (v36 + 1) & 0x1FE;
      int v62 = v35;
      uint64x2_t v66 = (uint64x2_t)vdupq_n_s64((unint64_t)(v11 + v35) - 1);
      do
      {
        CFDictionaryRef ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v9[1], v37);
        uint64_t v40 = *ValueAtIndex;
        if (v36 == v40)
        {
          double v41 = ValueAtIndex;
          if ((_BYTE)v36)
          {
            uint64_t v42 = 0;
            unsigned int v43 = *((_DWORD *)ValueAtIndex + 1);
            char v44 = 8 * v36 - 8;
            int64x2_t v45 = (int64x2_t)xmmword_1850CD8A0;
            do
            {
              int32x2_t v46 = vmovn_s64((int64x2_t)vcgeq_u64(v66, (uint64x2_t)v45));
              if (v46.i8[0]) {
                v74[v42 + 4] = v43 >> v44;
              }
              if (v46.i8[4]) {
                v74[v42 + 5] = v43 >> (8 * (v36 + (v42 ^ 0xFE)));
              }
              v42 += 2;
              int64x2_t v45 = vaddq_s64(v45, vdupq_n_s64(2uLL));
              v44 -= 16;
            }
            while (v38 != v42);
            uint64_t v47 = 0;
            unsigned int v48 = *((_DWORD *)ValueAtIndex + 2);
            char v49 = 8 * v36 - 8;
            int64x2_t v50 = (int64x2_t)xmmword_1850CD8A0;
            do
            {
              int32x2_t v51 = vmovn_s64((int64x2_t)vcgeq_u64(v66, (uint64x2_t)v50));
              if (v51.i8[0]) {
                v74[v47] = v48 >> v49;
              }
              if (v51.i8[4]) {
                v74[v47 + 1] = v48 >> (8 * (v36 + (v47 ^ 0xFE)));
              }
              v47 += 2;
              int64x2_t v50 = vaddq_s64(v50, vdupq_n_s64(2uLL));
              v49 -= 16;
            }
            while (v38 != v47);
          }
          uint64_t v52 = 0;
          if (v36)
          {
            while (1)
            {
              unsigned int v53 = *((unsigned __int8 *)a2 + v52);
              if (v53 < v74[v52 + 4] || v53 > v74[v52]) {
                break;
              }
              if (v36 == ++v52) {
                goto LABEL_86;
              }
            }
          }
          if (v52 == v36)
          {
LABEL_86:
            int v55 = 0;
            if (v40)
            {
              uint64_t v56 = 0;
              do
                int v55 = *((unsigned __int8 *)a2 + v56++) | (v55 << 8);
              while (v36 != v56);
            }
            if (cmap_cid_set_find_matching_range(*((void *)ValueAtIndex + 2), v55, (uint64_t)&v72))
            {
              __int16 v57 = v55 + v73 - v72;
            }
            else
            {
              if (!cmap_cid_set_find_matching_range(*((void *)v41 + 3), v55, (uint64_t)&v72))
              {
                if (v59 && cmap_convert(v59, a2, *v41, &v71, &v70) == 1)
                {
LABEL_95:
                  unsigned int v9 = v69;
                  if (v64) {
                    *v64++ = v71;
                  }
                  else {
                    uint64_t v64 = 0;
                  }
                  unint64_t v13 = v70;
                  if (v63)
                  {
                    *v63++ = v70;
                    unint64_t v13 = v70;
                  }
                  else
                  {
                    int v63 = 0;
                  }
                  ++v7;
                  goto LABEL_58;
                }
                __int16 v71 = v55;
LABEL_94:
                unint64_t v70 = *v41;
                goto LABEL_95;
              }
              __int16 v57 = v73;
            }
            __int16 v71 = v57;
            goto LABEL_94;
          }
        }
        ++v37;
        unsigned int v9 = v69;
      }
      while (v37 != v67);
      int v35 = v62 + 1;
      LOBYTE(v11) = v61;
      if (v36++ != v60) {
        continue;
      }
      break;
    }
    LODWORD(v11) = *(unsigned __int8 *)v69;
LABEL_18:
    unint64_t v13 = v5;
    if (v5 >= v11)
    {
      uint64_t v14 = (unsigned __int8 *)CFArrayGetCount(v9[1]);
      if (v14)
      {
        uint64_t v15 = v14;
        unint64_t v16 = 0;
        CFIndex v17 = 0;
        uint64_t v18 = 0;
        do
        {
          uint64_t v14 = (unsigned __int8 *)CFArrayGetValueAtIndex(v69[1], v17);
          unint64_t v19 = *v14;
          if (v5 < v19) {
            goto LABEL_42;
          }
          if (*v14)
          {
            uint64_t v20 = 0;
            unsigned int v21 = *((_DWORD *)v14 + 1);
            uint64_t v22 = ((_WORD)v19 + 1) & 0x1FE;
            uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(v19 - 1);
            char v24 = 8 * v19 - 8;
            char v25 = v24;
            int64x2_t v26 = (int64x2_t)xmmword_1850CD8A0;
            do
            {
              int32x2_t v27 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)v26));
              if (v27.i8[0]) {
                v74[v20 + 4] = v21 >> v25;
              }
              if (v27.i8[4]) {
                v74[v20 + 5] = v21 >> (8 * ((v20 ^ 0xFE) + v19));
              }
              v20 += 2;
              int64x2_t v26 = vaddq_s64(v26, v68);
              v25 -= 16;
            }
            while (v22 != v20);
            uint64_t v28 = 0;
            unsigned int v29 = *((_DWORD *)v14 + 2);
            int64x2_t v30 = (int64x2_t)xmmword_1850CD8A0;
            do
            {
              int32x2_t v31 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)v30));
              if (v31.i8[0]) {
                v74[v28] = v29 >> v24;
              }
              if (v31.i8[4]) {
                v74[v28 + 1] = v29 >> (8 * ((v28 ^ 0xFE) + v19));
              }
              v28 += 2;
              int64x2_t v30 = vaddq_s64(v30, vdupq_n_s64(2uLL));
              v24 -= 16;
            }
            while (v22 != v28);
            unint64_t v32 = 0;
            while (1)
            {
              unsigned int v33 = *((unsigned __int8 *)a2 + v32);
              if (v33 < v74[v32 + 4] || v33 > v74[v32]) {
                break;
              }
              if (v19 == ++v32)
              {
                unint64_t v32 = v19;
                break;
              }
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
          if (v32 >= v16)
          {
            if (v32 == v16)
            {
              if (v18 && v19 >= *v18) {
                uint64_t v14 = v18;
              }
            }
            else if (v32 > v16)
            {
              unint64_t v16 = v32;
            }
          }
          else
          {
LABEL_42:
            uint64_t v14 = v18;
          }
          ++v17;
          uint64_t v18 = v14;
        }
        while ((unsigned __int8 *)v17 != v15);
      }
      unsigned int v34 = v65;
      if (v14) {
        unsigned int v34 = v14;
      }
      unint64_t v13 = *v34;
      unsigned int v9 = v69;
    }
LABEL_57:
    unint64_t v70 = v13;
LABEL_58:
    a2 = (unsigned __int16 *)((char *)a2 + v13);
    v5 -= v13;
  }
  while (v5);
  return v7;
}

uint64_t CGPDFObjectStreamCreate(const void **a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (CGPDFObjectStreamGetTypeID_onceToken != -1) {
      dispatch_once(&CGPDFObjectStreamGetTypeID_onceToken, &__block_literal_global_15194);
    }
    uint64_t cftype = pdf_create_cftype();
    uint64_t v2 = cftype;
    if (cftype)
    {
      uint64_t v13 = 0;
      CGPDFInteger v14 = 0;
      value = 0;
      int v11 = 0;
      *(void *)(cftype + 32) = a2;
      uint64_t v6 = *(CGPDFDictionary **)(a2 + 48);
      if (CGPDFDictionaryGetName(v6, "Type", (const char **)&value))
      {
        if (!strcmp(value, "ObjStm"))
        {
          if (!CGPDFDictionaryGetInteger(v6, "N", &v14) || v14 < 0)
          {
          }
          else
          {
            *(void *)(v2 + 16) = v14;
            if (!CGPDFDictionaryGetOffset(v6, "First", &v13) || v13 < 0)
            {
            }
            else
            {
              *(void *)(v2 + 24) = v13;
              unsigned int v9 = pdf_object_scanner_create_with_xref(a1, 1);
              *(void *)(v2 + 40) = v9;
              if (v9)
              {
                uint64_t v10 = (const void *)CGPDFStreamCreateFilterChain(a2, &v11);
                if (v10)
                {
                  unint64_t v7 = v10;
                  if (!v11)
                  {
                    pdf_object_scanner_set_source(*(uint64_t **)(v2 + 40), v10);
                    goto LABEL_11;
                  }
                  CFRelease(v7);
                }
              }
              else
              {
                pdf_error("internal error: failed to create object stream.");
              }
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
      unint64_t v7 = (const void *)v2;
      uint64_t v2 = 0;
LABEL_11:
      CFRelease(v7);
    }
  }
  return v2;
}

uint64_t __CGPDFObjectStreamGetTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFObjectStreamGetTypeID_class);
  CGPDFObjectStreamGetTypeID_id = result;
  return result;
}

void CGPDFObjectStreamFinalize(uint64_t a1)
{
  if (a1) {
    pdf_object_scanner_release(*(uint64_t **)(a1 + 40));
  }
}

uint64_t CGPDFObjectStreamGetObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 0;
  if (a1 && !(_WORD)a3)
  {
    CGPDFSourceSetPosition(*(void *)(*(void *)(a1 + 40) + 8), 0, a3, a4, a5, a6, a7, a8);
    if (!*(void *)(a1 + 16)) {
      return 0;
    }
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    do
    {
      unsigned int v21 = *(uint64_t **)(a1 + 40);
      uint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      if (pdf_object_scanner_read_object(v21, (uint64_t)&v38, v12, v13, v14, v15, v16, v17))
      {
        if (DWORD2(v38) == 12 || DWORD2(v38) == 3)
        {
          uint64_t v19 = v40;
        }
        else if ((DWORD2(v38) - 5) <= 4)
        {
          pdf_object_release_compound_value((uint64_t)&v38);
        }
      }
      unsigned int v29 = *(uint64_t **)(a1 + 40);
      uint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      if (pdf_object_scanner_read_object(v29, (uint64_t)&v38, v22, v23, v24, v25, v26, v27))
      {
        if (DWORD2(v38) == 12 || DWORD2(v38) == 3)
        {
          uint64_t v18 = v40;
        }
        else if ((DWORD2(v38) - 5) <= 4)
        {
          pdf_object_release_compound_value((uint64_t)&v38);
        }
      }
      unint64_t v31 = *(void *)(a1 + 16);
      if (a2 == v19) {
        break;
      }
      ++v20;
    }
    while (v20 < v31);
    if (v20 != v31)
    {
      CGPDFSourceSetPosition(*(void *)(*(void *)(a1 + 40) + 8), v18 + *(void *)(a1 + 24), v12, v13, v14, v15, v16, v17);
      return pdf_object_scanner_read_object(*(uint64_t **)(a1 + 40), a4, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGCFDataCreateWithContentsOfFileAtURL(const __CFURL *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    int v1 = open((const char *)buffer, 0, 0);
    int v34 = v1;
    if (v1 != -1)
    {
      uint64_t v33 = &v34;
      if (fstat(v1, &v32) != -1)
      {
        st_std::string::size_type size = v32.st_size;
        uint64_t v38 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 5;
        uint64_t v37 = 2147500032;
        if (!getattrlist((const char *)buffer, &v36, &v35, 8uLL, 0)
          && (WORD2(v35) & 0x1200) == 0x1000
          && ((uint64_t v37 = 0, v38 = 0, v36 = 0x4000000000000005, getattrlist((const char *)buffer, &v36, &v35, 8uLL, 1u))
           || HIDWORD(v35) != 1))
        {
          uint64_t v14 = mmap(0, st_size, 1, 16386, v34, 0);
          if (v14 != (void *)-1)
          {
            uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v14 length:st_size deallocator:&__block_literal_global_15219];
            goto LABEL_15;
          }
          uint64_t v23 = __error();
          strerror(*v23);
          CGPostError((uint64_t)"Failed to open file (%s): %s", v24, v25, v26, v27, v28, v29, v30, (char)buffer);
        }
        else
        {
          size_t v3 = malloc_type_malloc(st_size, 0x2AF1E476uLL);
          if (v3)
          {
            if (read(v34, v3, st_size) == st_size)
            {
              uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v3 length:st_size deallocator:&__block_literal_global_5_15221];
LABEL_15:
              uint64_t v13 = v4;
LABEL_19:
              close(v34);
              return v13;
            }
            uint64_t v15 = __error();
            strerror(*v15);
            CGPostError((uint64_t)"Failed to read contents of file (%s): %s", v16, v17, v18, v19, v20, v21, v22, (char)buffer);
          }
        }
      }
      uint64_t v13 = 0;
      goto LABEL_19;
    }
    unint64_t v5 = __error();
    strerror(*v5);
    CGPostError((uint64_t)"Failed to open file (%s): %s", v6, v7, v8, v9, v10, v11, v12, (char)buffer);
  }
  return 0;
}

void sub_184FAED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int *a30)
{
}

int **applesauce::raii::v1::detail::ScopeGuard<CGCFDataCreateWithContentsOfFileAtURL::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(int **a1)
{
  return a1;
}

void __CGCFDataCreateWithContentsOfFileAtURL_block_invoke_2(int a1, void *a2)
{
}

void __CGCFDataCreateWithContentsOfFileAtURL_block_invoke(int a1, void *a2, size_t a3)
{
  char v3 = (char)a2;
  if (munmap(a2, a3) < 0)
  {
    uint64_t v4 = __error();
    strerror(*v4);
    CGPostError((uint64_t)"Failed to unmap data (%p; 0x%lx): %s", v5, v6, v7, v8, v9, v10, v11, v3);
  }
}

unsigned __int8 *CPPDFStyleListGetStyle(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t ***)(a1 + 40);
  char v3 = *(unsigned __int8 **)(a1 + 2256);
  if (v3)
  {
    uint64_t v4 = (char *)v2 + 9;
    if (*((unsigned char *)v2 + 9))
    {
      uint64_t v5 = (CGColor *)v2[32];
      int v6 = -4;
      while (1)
      {
        if (CGColorEqualToColor(*(CGColorRef *)v3, v5)
          && CGColorEqualToColor(*((CGColorRef *)v3 + 2), (CGColorRef)v2[34])
          && *((_DWORD *)v3 + 13) == *((_DWORD *)v2 + 77)
          && *((double *)v3 + 4) == *((double *)v2 + 36)
          && *((double *)v3 + 5) == *((double *)v2 + 37)
          && v3[48] == *((unsigned __int8 *)v2 + 304)
          && v3[49] == *((unsigned __int8 *)v2 + 305)
          && *((double *)v3 + 7) == *((double *)v2 + 39)
          && *((uint64_t **)v3 + 8) == v2[31])
        {
          double v7 = *((double *)v2 + 27);
          long long v8 = *((_OWORD *)v2 + 2);
          *(_OWORD *)components = *((_OWORD *)v2 + 1);
          long long v30 = v8;
          long long v31 = *((_OWORD *)v2 + 3);
          long long v9 = *(_OWORD *)(v2 + 13);
          long long v26 = *(_OWORD *)(v2 + 11);
          long long v27 = v9;
          long long v28 = *(_OWORD *)(v2 + 15);
          if (fontSize(components, (double *)&v26, v7) == *((double *)v3 + 9)
            && *((uint64_t **)v3 + 10) == v2[47]
            && *((uint64_t **)v3 + 11) == v2[48])
          {
            break;
          }
        }
        if (v6)
        {
          char v3 = (unsigned __int8 *)*((void *)v3 + 13);
          ++v6;
          if (v3) {
            continue;
          }
        }
        char v3 = (unsigned __int8 *)malloc_type_malloc(0x70uLL, 0x10A00408C90C9C2uLL);
        *((void *)v3 + 13) = *(void *)(a1 + 2256);
        *(void *)(a1 + 2256) = v3;
        if (!*v4) {
          goto LABEL_26;
        }
        for (CFIndex i = *v2; i; CFIndex i = (uint64_t *)*i)
          *((unsigned char *)i + 9) = 1;
        goto LABEL_25;
      }
    }
  }
  else
  {
    char v3 = (unsigned __int8 *)malloc_type_malloc(0x70uLL, 0x10A00408C90C9C2uLL);
    *((void *)v3 + 13) = 0;
    *(void *)(a1 + 2256) = v3;
    uint64_t v4 = (char *)v2 + 9;
    if (*((unsigned char *)v2 + 9))
    {
      for (uint64_t j = *v2; j; uint64_t j = (uint64_t *)*j)
        *((unsigned char *)j + 9) = 1;
LABEL_25:
      *uint64_t v4 = 0;
    }
LABEL_26:
    uint64_t v12 = (CGColor *)v2[32];
    if (v12)
    {
      CopyWithAlphdouble a = CGColorCreateCopyWithAlpha(v12, *((CGFloat *)v2 + 42));
    }
    else
    {
      *(_OWORD *)components = xmmword_1852950E0;
      long long v30 = unk_1852950F0;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      CopyWithAlphdouble a = CGColorCreate(DeviceRGB, components);
      CGColorSpaceRelease(DeviceRGB);
    }
    *(void *)char v3 = CopyWithAlpha;
    uint64_t v15 = v2[33];
    if (v15)
    {
      *((void *)v3 + 1) = v15;
      CFRetain(v15);
    }
    else
    {
      *((void *)v3 + 1) = CGColorSpaceCreateDeviceRGB();
    }
    uint64_t v16 = (CGColor *)v2[34];
    if (v16)
    {
      CGColorRef v17 = CGColorCreateCopyWithAlpha(v16, *((CGFloat *)v2 + 43));
    }
    else
    {
      *(_OWORD *)components = xmmword_1852950E0;
      long long v30 = unk_1852950F0;
      uint64_t v18 = CGColorSpaceCreateDeviceRGB();
      CGColorRef v17 = CGColorCreate(v18, components);
      CGColorSpaceRelease(v18);
    }
    *((void *)v3 + 2) = v17;
    uint64_t v19 = v2[35];
    if (v19)
    {
      *((void *)v3 + 3) = v19;
      CFRetain(v19);
    }
    else
    {
      *((void *)v3 + 3) = CGColorSpaceCreateDeviceRGB();
    }
    *((_OWORD *)v3 + 2) = *((_OWORD *)v2 + 18);
    *((_WORD *)v3 + 24) = *((_WORD *)v2 + 152);
    *((_DWORD *)v3 + 13) = *((_DWORD *)v2 + 77);
    *((void *)v3 + 7) = v2[39];
    uint64_t v20 = v2[31];
    *((void *)v3 + 8) = v20;
    if (v20)
    {
      double v21 = *((double *)v2 + 27);
      long long v22 = *((_OWORD *)v2 + 2);
      *(_OWORD *)components = *((_OWORD *)v2 + 1);
      long long v30 = v22;
      long long v31 = *((_OWORD *)v2 + 3);
      long long v23 = *(_OWORD *)(v2 + 13);
      long long v26 = *(_OWORD *)(v2 + 11);
      long long v27 = v23;
      long long v28 = *(_OWORD *)(v2 + 15);
      double v24 = fontSize(components, (double *)&v26, v21);
    }
    else
    {
      double v24 = 0.0;
    }
    *((double *)v3 + 9) = v24;
    *((_OWORD *)v3 + 5) = *(_OWORD *)(v2 + 47);
    *((void *)v3 + 12) = 0;
  }
  return v3;
}

double fontSize(double *a1, double *a2, double a3)
{
  return fabs(sqrt(fabs((a2[1] * a1[2] + *a2 * *a1) * (a2[3] * a1[3] + a2[2] * a1[1])- (a2[1] * a1[3] + *a2 * a1[1]) * (a2[3] * a1[2] + a2[2] * *a1)))* a3);
}

BOOL flate_has_error(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 113) != 0;
  }
  return result;
}

void flate_filter_rewind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 114) = 0;
    *(_WORD *)(a1 + 112) = 0;
    CGPDFSourceRewind(*(void *)(a1 + 120), a2, a3, a4, a5, a6, a7, a8);
    if (inflateReset((z_streamp)a1))
    {
      if (*(void *)(a1 + 48)) {
        pdf_error("FlateDecode: rewind error: %s.");
      }
      else {
        pdf_error("FlateDecode: rewind error.");
      }
      *(unsigned char *)(a1 + 113) = 1;
    }
  }
}

uint64_t CGContextCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGContextCreateWithDelegateAndInfo(0, 0, 0, 0, 0, 0, a7, a8);
}

__CFString *context_copy_format_description(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 24);
  CFAllocatorRef v3 = CFGetAllocator((CFTypeRef)a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = Mutable;
  int v6 = "kCGContextTypeUnknown";
  switch(v2)
  {
    case 0:
      goto LABEL_15;
    case 1:
      int v6 = "kCGContextTypePDF";
      goto LABEL_15;
    case 2:
      int v6 = "kCGContextTypePostScript";
      goto LABEL_15;
    case 3:
      int v6 = "kCGContextTypeWindow";
      goto LABEL_15;
    case 4:
      CFStringAppendFormat(Mutable, 0, @"<CGContext %p> (%s)", a1, "kCGContextTypeBitmap");
      if (*(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
      {
        uint64_t v13 = *(void **)(*(void *)(a1 + 32) + 32);
      }
      else
      {
        handle_invalid_context((char)"CGBitmapContextGetColorSpace", a1, v7, v8, v9, v10, v11, v12);
        uint64_t v13 = 0;
      }
      CFStringRef v32 = CFCopyDescription(v13);
      CFStringAppendFormat(v5, 0, @"\n\t<%@>", v32);
      if (*(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
      {
        uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8);
      }
      else
      {
        handle_invalid_context((char)"CGBitmapContextGetWidth", a1, v33, v34, v35, v36, v37, v38);
        uint64_t v20 = 0;
        if (*(_DWORD *)(a1 + 16) != 1129601108) {
          goto LABEL_37;
        }
      }
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 16);
        goto LABEL_38;
      }
LABEL_37:
      handle_invalid_context((char)"CGBitmapContextGetHeight", a1, v33, v34, v35, v36, v37, v38);
      uint64_t v21 = 0;
      if (*(_DWORD *)(a1 + 16) != 1129601108) {
        goto LABEL_40;
      }
LABEL_38:
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 80);
        goto LABEL_41;
      }
LABEL_40:
      handle_invalid_context((char)"CGBitmapContextGetBitsPerComponent", a1, v33, v34, v35, v36, v37, v38);
      uint64_t v22 = 0;
      if (*(_DWORD *)(a1 + 16) != 1129601108) {
        goto LABEL_43;
      }
LABEL_41:
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 72);
        goto LABEL_44;
      }
LABEL_43:
      handle_invalid_context((char)"CGBitmapContextGetBitsPerPixel", a1, v33, v34, v35, v36, v37, v38);
      uint64_t v23 = 0;
      if (*(_DWORD *)(a1 + 16) != 1129601108) {
        goto LABEL_46;
      }
LABEL_44:
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 88);
        goto LABEL_47;
      }
LABEL_46:
      handle_invalid_context((char)"CGBitmapContextGetBytesPerRow", a1, v33, v34, v35, v36, v37, v38);
      uint64_t v24 = 0;
      if (*(_DWORD *)(a1 + 16) != 1129601108) {
        goto LABEL_49;
      }
LABEL_47:
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        unsigned int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 40);
        goto LABEL_50;
      }
LABEL_49:
      handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", a1, v33, v34, v35, v36, v37, v38);
      unsigned int v25 = 0;
LABEL_50:
      if (!v13 || *(_DWORD *)(v13[3] + 28) != 1) {
        goto LABEL_66;
      }
      if (*(_DWORD *)(a1 + 16) == 1129601108)
      {
        float v39 = *(float *)(*(void *)(*(void *)(a1 + 96) + 120) + 48);
        if (v39 != 0.0)
        {
          CFStringAppendFormat(v5, 0, @"\n\t\tEDR target headroounint64_t m = %f", v39, v43);
          goto LABEL_66;
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetEDRTargetHeadroom", a1, v33, v34, v35, v36, v37, v38);
      }
      CFStringAppendFormat(v5, 0, @"\n\t\tEDR target headroom not set");
      if (CGOSAppleInternalBuild_predicate != -1) {
        dispatch_once(&CGOSAppleInternalBuild_predicate, &__block_literal_global_18177);
      }
      if (CGOSAppleInternalBuild_is_internal && !*(unsigned char *)(v13[3] + 13))
      {
        *(_DWORD *)__s = 0;
        double HeadroomInfo = CGColorSpaceGetHeadroomInfo(v13, (int *)__s);
        double v41 = "origin unknown";
        if (*(_DWORD *)__s == 2) {
          double v41 = "estimated";
        }
        if (*(_DWORD *)__s == 1) {
          uint64_t v42 = "from color space";
        }
        else {
          uint64_t v42 = v41;
        }
        CFStringAppendFormat(v5, 0, @" [INTERNAL INFO] %f (%s) will be used as target for PQ/HLG", *(void *)&HeadroomInfo, v42);
      }
      goto LABEL_66;
    case 5:
      int v6 = "kCGContextTypeGL";
      goto LABEL_15;
    case 6:
      int v6 = "kCGContextTypeDisplayList";
      goto LABEL_15;
    case 7:
      int v6 = "kCGContextTypeKSeparation";
      goto LABEL_15;
    case 8:
      int v6 = "kCGContextTypeIOSurface";
      goto LABEL_15;
    case 9:
      int v6 = "kCGContextTypeAutomatic";
      goto LABEL_15;
    case 11:
      int v6 = "kCGContextTypeCoreAnimationAutomatic";
      goto LABEL_15;
    case 12:
      CFStringAppendFormat(Mutable, 0, @"<CGContext %p> (%s)", a1, "kCGContextTypePDFSoftmask");
      uint64_t v15 = *(void *)(a1 + 40);
      if (v15 && (uint64_t v16 = *(uint64_t (**)(void))(v15 + 248)) != 0 && (v17 = v16()) != 0)
      {
        uint64_t v18 = v17;
        CFStringRef v19 = CFCopyDescription(*(CFTypeRef *)(v17 + 32));
        CFStringAppendFormat(v5, 0, @"\n\t<%@>", v19);
        uint64_t v20 = *(void *)(v18 + 8);
        uint64_t v21 = *(void *)(v18 + 16);
        uint64_t v23 = *(void *)(v18 + 72);
        uint64_t v22 = *(void *)(v18 + 80);
        uint64_t v24 = *(void *)(v18 + 88);
        unsigned int v25 = *(_DWORD *)(v18 + 40);
LABEL_66:
        long long v26 = "kCGImageAlphaNone";
        switch(v25 & 0x1F)
        {
          case 0u:
            goto LABEL_22;
          case 1u:
            long long v26 = "kCGImageAlphaPremultipliedLast";
            goto LABEL_22;
          case 2u:
            long long v26 = "kCGImageAlphaPremultipliedFirst";
            goto LABEL_22;
          case 3u:
            long long v26 = "kCGImageAlphaLast";
            goto LABEL_22;
          case 4u:
            long long v26 = "kCGImageAlphaFirst";
            goto LABEL_22;
          case 5u:
            long long v26 = "kCGImageAlphaNoneSkipLast";
            goto LABEL_22;
          case 6u:
            long long v26 = "kCGImageAlphaNoneSkipFirst";
            goto LABEL_22;
          case 7u:
            long long v26 = "kCGImageAlphaOnly";
            goto LABEL_22;
          default:
            break;
        }
      }
      else
      {
        unsigned int v25 = 0;
        uint64_t v24 = 0;
        uint64_t v23 = 0;
        uint64_t v22 = 0;
        uint64_t v21 = 0;
        uint64_t v20 = 0;
        long long v26 = "kCGImageAlphaNone";
LABEL_22:
        __sprintf_chk(__s, 0, 0x100uLL, "%s | ", v26);
      }
      unsigned int v27 = (v25 >> 12) & 7;
      if (v27 <= 4)
      {
        size_t v28 = strlen(__s);
        sprintf(&__s[v28], "%s ", off_1E52CC6E8[v27]);
      }
      unsigned int v29 = HIWORD(v25) & 0xF;
      if (v29 <= 4)
      {
        size_t v30 = strlen(__s);
        sprintf(&__s[v30], "%s ", off_1E52CC710[v29]);
      }
      if ((v25 & 0x100) != 0)
      {
        size_t v31 = strlen(__s);
        sprintf(&__s[v31], "%s ", "| kCGBitmapFloatComponents");
      }
      CFStringAppendFormat(v5, 0, @"\n\t\tdouble width = %ld, height = %ld, bpc = %ld, bpp = %ld, row bytes = %ld \n\t\t%s", v20, v21, v22, v23, v24, __s);
      return v5;
    default:
      int v6 = "?? type";
LABEL_15:
      CFStringAppendFormat(Mutable, 0, @"<CGContext %p> (%s)", a1, v6);
      return v5;
  }
}

CFTypeID CGContextGetTypeID(void)
{
  if (_block_invoke_once_15273 != -1) {
    dispatch_once(&_block_invoke_once_15273, &__block_literal_global_5_15274);
  }
  return CGContextGetTypeID_type_id;
}

uint64_t CGContextGetDelegateInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return *(void *)(a1 + 32);
  }
  handle_invalid_context((char)"CGContextGetDelegateInfo", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CG::DisplayList::cfTypeResourceForCFType(CG::DisplayList *this, const void *a2)
{
  if (!a2) {
    return 0;
  }
  ++*((void *)this + 88);
  CFAllocatorRef v3 = (char *)this + 464;
  uint64_t v4 = (char *)*((void *)this + 58);
  if (!v4) {
    goto LABEL_15;
  }
  uint64_t v5 = (char *)this + 464;
  do
  {
    uint64_t v7 = *((void *)v4 + 4);
    int v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v8 = *(void *)(v7 + 16);
      std::__shared_weak_count::__release_shared[abi:fe180100](v6);
    }
    else
    {
      unint64_t v8 = *(void *)(v7 + 16);
    }
    uint64_t v9 = (char **)(v4 + 8);
    if (v8 >= (unint64_t)a2)
    {
      uint64_t v9 = (char **)v4;
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v3 == v5) {
    goto LABEL_15;
  }
  uint64_t v10 = *((void *)v5 + 4);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v5 + 5);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (*(void *)(v10 + 16) < (unint64_t)a2)
    {
      std::__shared_weak_count::__release_shared[abi:fe180100](v11);
      goto LABEL_15;
    }
    uint64_t v14 = *((void *)v5 + 4);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v5 + 5);
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v15 = *(void *)(v14 + 16);
      std::__shared_weak_count::__release_shared[abi:fe180100](v13);
    }
    else
    {
      unint64_t v15 = *(void *)(v14 + 16);
    }
    std::__shared_weak_count::__release_shared[abi:fe180100](v11);
    if (v15 <= (unint64_t)a2) {
      return *((void *)v5 + 4);
    }
LABEL_15:
    operator new();
  }
  if (*(const void **)(v10 + 16) != a2) {
    goto LABEL_15;
  }
  return *((void *)v5 + 4);
}

void sub_184FAFD78(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>::operator()[abi:fe180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:fe180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>::operator()[abi:fe180100](char a1, void *__p)
{
  if (a1)
  {
    CFAllocatorRef v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:fe180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      uint64_t v7 = v4;
      uint64_t v8 = *a3;
      uint64_t v9 = (std::__shared_weak_count *)a3[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = v7[4];
      uint64_t v10 = (std::__shared_weak_count *)v7[5];
      if (!v10) {
        break;
      }
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v12 = *(void *)(v8 + 16) < *(void *)(v11 + 16);
      std::__shared_weak_count::__release_shared[abi:fe180100](v10);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      if (v12)
      {
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v13 = v7[4];
        uint64_t v14 = (std::__shared_weak_count *)v7[5];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *a3;
        unint64_t v15 = (std::__shared_weak_count *)a3[1];
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v17 = *(void *)(v13 + 16) < *(void *)(v16 + 16);
          std::__shared_weak_count::__release_shared[abi:fe180100](v15);
          if (!v14) {
            goto LABEL_15;
          }
LABEL_14:
          std::__shared_weak_count::__release_shared[abi:fe180100](v14);
          goto LABEL_15;
        }
        BOOL v17 = *(void *)(v13 + 16) < *(void *)(v16 + 16);
        if (v14) {
          goto LABEL_14;
        }
LABEL_15:
        if (!v17) {
          goto LABEL_23;
        }
        uint64_t v5 = v7 + 1;
        uint64_t v4 = (void *)v7[1];
        if (!v4) {
          goto LABEL_23;
        }
      }
    }
    BOOL v12 = *(void *)(v8 + 16) < *(void *)(v11 + 16);
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    std::__shared_weak_count::__release_shared[abi:fe180100](v9);
    goto LABEL_7;
  }
  uint64_t v7 = (void *)(a1 + 8);
LABEL_23:
  *a2 = v7;
  return v5;
}

void std::shared_ptr<CG::DisplayListResourceCFTypeRef>::shared_ptr[abi:fe180100]<CG::DisplayListResourceCFTypeRef,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB001C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceCFTypeRef *,std::shared_ptr<CG::DisplayListResourceCFTypeRef>::__shared_ptr_default_delete<CG::DisplayListResourceCFTypeRef,CG::DisplayListResourceCFTypeRef>,std::allocator<CG::DisplayListResourceCFTypeRef>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG28DisplayListResourceCFTypeRefEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceCFTypeRef *,std::shared_ptr<CG::DisplayListResourceCFTypeRef>::__shared_ptr_default_delete<CG::DisplayListResourceCFTypeRef,CG::DisplayListResourceCFTypeRef>,std::allocator<CG::DisplayListResourceCFTypeRef>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<CG::DisplayListResourceCFTypeRef *,std::shared_ptr<CG::DisplayListResourceCFTypeRef>::__shared_ptr_default_delete<CG::DisplayListResourceCFTypeRef,CG::DisplayListResourceCFTypeRef>,std::allocator<CG::DisplayListResourceCFTypeRef>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>>>::operator()[abi:fe180100](char a1, void *__p)
{
  if (a1)
  {
    CFAllocatorRef v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:fe180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t CG::DisplayList::isEqualTo(CG::DisplayList *this, const CG::DisplayList *a2, uint64_t a3)
{
  uint64_t result = CGRectEqualToRect(*(CGRect *)((char *)this + 24), *(CGRect *)((char *)a2 + 24));
  if (result)
  {
    uint64_t v7 = (char *)*((void *)this + 72);
    uint64_t v8 = (char *)*((void *)this + 73);
    uint64_t v9 = (char *)*((void *)a2 + 72);
    uint64_t v10 = (char *)*((void *)a2 + 73);
    if (v8 - v7 == v10 - v9)
    {
      while (v7 != v8 && v9 != v10)
      {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)v7 + 24))(*(void *)v7, *(void *)v9, a3);
        if (!result) {
          return result;
        }
        v7 += 16;
        v9 += 16;
      }
      return v7 == v8 && v9 == v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::shared_ptr<CG::DisplayListResourceDisplayList>::shared_ptr[abi:fe180100]<CG::DisplayListResourceDisplayList,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB0298(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceDisplayList *,std::shared_ptr<CG::DisplayListResourceDisplayList>::__shared_ptr_default_delete<CG::DisplayListResourceDisplayList,CG::DisplayListResourceDisplayList>,std::allocator<CG::DisplayListResourceDisplayList>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG30DisplayListResourceDisplayListEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceDisplayList *,std::shared_ptr<CG::DisplayListResourceDisplayList>::__shared_ptr_default_delete<CG::DisplayListResourceDisplayList,CG::DisplayListResourceDisplayList>,std::allocator<CG::DisplayListResourceDisplayList>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

const void **applesauce::CF::ObjectRef<__CFDictionary const*>::~ObjectRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::vector<std::shared_ptr<CG::DisplayListEntry const>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<CG::DisplayListEntry const>>::__clear[abi:fe180100]((uint64_t *)v2);
    CFAllocatorRef v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<CG::DisplayListEntry const>>::__clear[abi:fe180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:fe180100](v4);
    }
  }
  a1[1] = v2;
}

BOOL CG::CompareEntryStatePattern::operator()(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 24);
  __s1[0] = *(_OWORD *)(a1 + 8);
  __s1[1] = v4;
  __s1[2] = *(_OWORD *)(a1 + 40);
  long long v5 = *(_OWORD *)(a2 + 24);
  v12[0] = *(_OWORD *)(a2 + 8);
  v12[1] = v5;
  v12[2] = *(_OWORD *)(a2 + 40);
  int v6 = memcmp(__s1, v12, 0x30uLL);
  BOOL result = 1;
  if ((v6 & 0x80000000) == 0)
  {
    if (v6) {
      return 0;
    }
    double v8 = *(double *)(a1 + 56);
    double v9 = *(double *)(a2 + 56);
    if (v8 >= v9)
    {
      if (v8 > v9) {
        return 0;
      }
      double v10 = *(double *)(a1 + 64);
      double v11 = *(double *)(a2 + 64);
      if (v10 >= v11 && (v10 > v11 || *(double *)(a1 + 72) >= *(double *)(a2 + 72))) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>(uint64_t a1, void *a2, uint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      uint64_t v7 = (void *)v4;
      uint64_t v8 = *a3;
      double v9 = (std::__shared_weak_count *)a3[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(void *)(v4 + 32);
      double v11 = *(std::__shared_weak_count **)(v4 + 40);
      if (!v11) {
        break;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v12 = CG::CompareEntryStatePattern::operator()(v8, v10);
      std::__shared_weak_count::__release_shared[abi:fe180100](v11);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      if (v12)
      {
        uint64_t v4 = *v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v13 = v7[4];
        uint64_t v14 = (std::__shared_weak_count *)v7[5];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *a3;
        uint64_t v16 = (std::__shared_weak_count *)a3[1];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v17 = CG::CompareEntryStatePattern::operator()(v13, v15);
          std::__shared_weak_count::__release_shared[abi:fe180100](v16);
          if (!v14) {
            goto LABEL_15;
          }
LABEL_14:
          std::__shared_weak_count::__release_shared[abi:fe180100](v14);
          goto LABEL_15;
        }
        BOOL v17 = CG::CompareEntryStatePattern::operator()(v13, v15);
        if (v14) {
          goto LABEL_14;
        }
LABEL_15:
        if (!v17) {
          goto LABEL_23;
        }
        long long v5 = v7 + 1;
        uint64_t v4 = v7[1];
        if (!v4) {
          goto LABEL_23;
        }
      }
    }
    BOOL v12 = CG::CompareEntryStatePattern::operator()(v8, v10);
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    std::__shared_weak_count::__release_shared[abi:fe180100](v9);
    goto LABEL_7;
  }
  uint64_t v7 = (void *)(a1 + 8);
LABEL_23:
  *a2 = v7;
  return v5;
}

void *std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>(uint64_t a1, void *a2, uint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      uint64_t v7 = v4;
      uint64_t v8 = *a3;
      double v9 = (std::__shared_weak_count *)a3[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = v7[4];
      uint64_t v10 = (std::__shared_weak_count *)v7[5];
      if (!v10) {
        break;
      }
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v12 = *(void *)(v8 + 8) < *(void *)(v11 + 8);
      std::__shared_weak_count::__release_shared[abi:fe180100](v10);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      if (v12)
      {
        uint64_t v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v13 = v7[4];
        uint64_t v14 = (std::__shared_weak_count *)v7[5];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *a3;
        uint64_t v15 = (std::__shared_weak_count *)a3[1];
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v17 = *(void *)(v13 + 8) < *(void *)(v16 + 8);
          std::__shared_weak_count::__release_shared[abi:fe180100](v15);
          if (!v14) {
            goto LABEL_15;
          }
LABEL_14:
          std::__shared_weak_count::__release_shared[abi:fe180100](v14);
          goto LABEL_15;
        }
        BOOL v17 = *(void *)(v13 + 8) < *(void *)(v16 + 8);
        if (v14) {
          goto LABEL_14;
        }
LABEL_15:
        if (!v17) {
          goto LABEL_23;
        }
        long long v5 = v7 + 1;
        uint64_t v4 = (void *)v7[1];
        if (!v4) {
          goto LABEL_23;
        }
      }
    }
    BOOL v12 = *(void *)(v8 + 8) < *(void *)(v11 + 8);
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    std::__shared_weak_count::__release_shared[abi:fe180100](v9);
    goto LABEL_7;
  }
  uint64_t v7 = (void *)(a1 + 8);
LABEL_23:
  *a2 = v7;
  return v5;
}

void *std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>(uint64_t a1, void *a2, uint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      uint64_t v7 = (void *)v4;
      uint64_t v8 = *a3;
      double v9 = (std::__shared_weak_count *)a3[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(void *)(v4 + 32);
      uint64_t v11 = *(std::__shared_weak_count **)(v4 + 40);
      if (!v11) {
        break;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v12 = CG::CompareEntryStateDrawing::operator()(v8, v10);
      std::__shared_weak_count::__release_shared[abi:fe180100](v11);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      if (v12)
      {
        uint64_t v4 = *v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v13 = v7[4];
        uint64_t v14 = (std::__shared_weak_count *)v7[5];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *a3;
        uint64_t v16 = (std::__shared_weak_count *)a3[1];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v17 = CG::CompareEntryStateDrawing::operator()(v13, v15);
          std::__shared_weak_count::__release_shared[abi:fe180100](v16);
          if (!v14) {
            goto LABEL_15;
          }
LABEL_14:
          std::__shared_weak_count::__release_shared[abi:fe180100](v14);
          goto LABEL_15;
        }
        BOOL v17 = CG::CompareEntryStateDrawing::operator()(v13, v15);
        if (v14) {
          goto LABEL_14;
        }
LABEL_15:
        if (!v17) {
          goto LABEL_23;
        }
        long long v5 = v7 + 1;
        uint64_t v4 = v7[1];
        if (!v4) {
          goto LABEL_23;
        }
      }
    }
    BOOL v12 = CG::CompareEntryStateDrawing::operator()(v8, v10);
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    std::__shared_weak_count::__release_shared[abi:fe180100](v9);
    goto LABEL_7;
  }
  uint64_t v7 = (void *)(a1 + 8);
LABEL_23:
  *a2 = v7;
  return v5;
}

void *std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  double v9 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_21;
  }
  uint64_t v11 = *a5;
  BOOL v12 = (std::__shared_weak_count *)a5[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a2[4];
  uint64_t v14 = (std::__shared_weak_count *)a2[5];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = CGDashCompare(*(void *)(v11 + 16), *(void *)(v13 + 16));
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v14);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v12);
  }
  if (v15 == -1)
  {
LABEL_21:
    if ((void *)*a1 == a2)
    {
      uint64_t v22 = a2;
    }
    else
    {
      uint64_t v21 = (void *)*a2;
      if (*a2)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)v21[1];
        }
        while (v21);
      }
      else
      {
        unsigned int v25 = a2;
        do
        {
          uint64_t v22 = (void *)v25[2];
          BOOL v26 = *v22 == (void)v25;
          unsigned int v25 = v22;
        }
        while (v26);
      }
      uint64_t v27 = v22[4];
      size_t v28 = (std::__shared_weak_count *)v22[5];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = *a5;
      size_t v30 = (std::__shared_weak_count *)a5[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = CGDashCompare(*(void *)(v27 + 16), *(void *)(v29 + 16));
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:fe180100](v30);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:fe180100](v28);
      }
      if (v31 != -1) {
        goto LABEL_56;
      }
    }
    if (*a2)
    {
      *a3 = v22;
      return v22 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v16 = a2[4];
  BOOL v17 = (std::__shared_weak_count *)a2[5];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *a5;
  CFStringRef v19 = (std::__shared_weak_count *)a5[1];
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = CGDashCompare(*(void *)(v16 + 16), *(void *)(v18 + 16));
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v17);
  }
  if (v20 != -1)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  a4 = a2 + 1;
  uint64_t v23 = (void *)a2[1];
  if (v23)
  {
    do
    {
      uint64_t v24 = v23;
      uint64_t v23 = (void *)*v23;
    }
    while (v23);
  }
  else
  {
    CFStringRef v32 = a2;
    do
    {
      uint64_t v24 = (void *)v32[2];
      BOOL v26 = *v24 == (void)v32;
      CFStringRef v32 = v24;
    }
    while (!v26);
  }
  if (v24 == v9) {
    goto LABEL_65;
  }
  uint64_t v33 = *a5;
  uint64_t v34 = (std::__shared_weak_count *)a5[1];
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v24[4];
  uint64_t v36 = (std::__shared_weak_count *)v24[5];
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v37 = CGDashCompare(*(void *)(v33 + 16), *(void *)(v35 + 16));
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v36);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v34);
  }
  if (v37 == -1)
  {
LABEL_65:
    if (*a4)
    {
      *a3 = v24;
      return v24;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
LABEL_56:

  return std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>((uint64_t)a1, a3, a5);
}

void *std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>(uint64_t a1, void *a2, uint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = *a3;
        double v9 = (std::__shared_weak_count *)a3[1];
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = v7[4];
        uint64_t v11 = (std::__shared_weak_count *)v7[5];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = CGDashCompare(*(void *)(v8 + 16), *(void *)(v10 + 16));
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:fe180100](v11);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:fe180100](v9);
        }
        if (v12 != -1) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_25;
        }
      }
      uint64_t v13 = v7[4];
      uint64_t v14 = (std::__shared_weak_count *)v7[5];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *a3;
      uint64_t v16 = (std::__shared_weak_count *)a3[1];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = CGDashCompare(*(void *)(v13 + 16), *(void *)(v15 + 16));
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:fe180100](v16);
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:fe180100](v14);
      }
      if (v17 != -1) {
        break;
      }
      long long v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_25:
  *a2 = v7;
  return v5;
}

void *std::__tree<std::shared_ptr<CG::DisplayListResourceColor>,CG::CompareResourceColor,std::allocator<std::shared_ptr<CG::DisplayListResourceColor>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceColor>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11 = (void *)(a1 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    do
    {
      while (1)
      {
        uint64_t v13 = v10;
        if (CGColorCompare(*(void *)(*(void *)a3 + 16), *(void *)(v10[4] + 16), a3, a4, a5, a6, a7, a8, a9) != -1) {
          break;
        }
        uint64_t v10 = (void *)*v13;
        uint64_t v11 = v13;
        if (!*v13) {
          goto LABEL_9;
        }
      }
      if (CGColorCompare(*(void *)(v13[4] + 16), *(void *)(*(void *)a3 + 16), a3, a4, a5, a6, a7, a8, a9) != -1) {
        break;
      }
      uint64_t v11 = v13 + 1;
      uint64_t v10 = (void *)v13[1];
    }
    while (v10);
  }
  else
  {
    uint64_t v13 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v13;
  return v11;
}

void *std::__tree<std::shared_ptr<CG::DisplayListResourceClip>,CG::CompareResourceClip,std::allocator<std::shared_ptr<CG::DisplayListResourceClip>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceClip>>(uint64_t a1, void *a2, uint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      uint64_t v7 = v4;
      uint64_t v8 = *a3;
      double v9 = (std::__shared_weak_count *)a3[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = v4[4];
      uint64_t v10 = (std::__shared_weak_count *)v7[5];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(void *)(v8 + 16);
      unsigned int v13 = v12 ? *(_DWORD *)(v12 + 4) : 0;
      uint64_t v14 = *(void *)(v11 + 16);
      if (!v14) {
        break;
      }
      unsigned int v15 = *(_DWORD *)(v14 + 4);
      if (v10) {
        goto LABEL_11;
      }
LABEL_12:
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:fe180100](v9);
      }
      if (v13 >= v15)
      {
        uint64_t v16 = v7[4];
        uint64_t v17 = (std::__shared_weak_count *)v7[5];
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = *a3;
        uint64_t v18 = (std::__shared_weak_count *)a3[1];
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v20 = *(void *)(v16 + 16);
        if (v20) {
          unsigned int v21 = *(_DWORD *)(v20 + 4);
        }
        else {
          unsigned int v21 = 0;
        }
        uint64_t v22 = *(void *)(v19 + 16);
        if (!v22)
        {
          unsigned int v23 = 0;
          if (!v18) {
            goto LABEL_29;
          }
LABEL_28:
          std::__shared_weak_count::__release_shared[abi:fe180100](v18);
          goto LABEL_29;
        }
        unsigned int v23 = *(_DWORD *)(v22 + 4);
        if (v18) {
          goto LABEL_28;
        }
LABEL_29:
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:fe180100](v17);
        }
        if (v21 >= v23) {
          goto LABEL_37;
        }
        long long v5 = v7 + 1;
        uint64_t v4 = (void *)v7[1];
        if (!v4) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_37;
        }
      }
    }
    unsigned int v15 = 0;
    if (!v10) {
      goto LABEL_12;
    }
LABEL_11:
    std::__shared_weak_count::__release_shared[abi:fe180100](v10);
    goto LABEL_12;
  }
  uint64_t v7 = (void *)(a1 + 8);
LABEL_37:
  *a2 = v7;
  return v5;
}

__CFString *dl_DebugDesc(int32x4_t *a1)
{
  p_std::string::size_type size = &CGRectNull.size;
  CFAllocatorRef v3 = (const CGRect *)&a1[5].u64[1];
  i64 = (CGFloat *)a1[6].i64;
  if (a1[37].i64[0] == a1[37].i64[1]) {
    i64 = &CGRectNull.origin.y;
  }
  else {
    p_std::string::size_type size = (CGSize *)&a1[6].u64[1];
  }
  if (a1[37].i64[0] == a1[37].i64[1])
  {
    CFAllocatorRef v3 = &CGRectNull;
    p_double height = &CGRectNull.size.height;
  }
  else
  {
    p_double height = (CGFloat *)a1[7].i64;
  }
  uint64_t v6 = *(void *)p_height;
  CGFloat x = v3->origin.x;
  uint64_t v8 = *(void *)i64;
  CGFloat width = p_size->width;
  CFDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"CGDisplayList %p. Bounding box: (%g, %g)[%g x %g].", a1, *(void *)&x, v8, *(void *)&width, v6);
  if (a1[37].i64[0] == a1[37].i64[1]
    || ((double v11 = *(double *)&a1[5].i64[1], *(double *)a1[6].i64 != INFINITY) ? (v12 = v11 == INFINITY) : (v12 = 1), v12))
  {
    unsigned int v13 = "yes";
  }
  else
  {
    unsigned int v13 = "no";
  }
  CFStringAppendFormat(Mutable, 0, @" Empty: %s.", v11, v13);
  CFStringAppendFormat(Mutable, 0, @" Flags: 0x%08x.", a1[5].u32[0]);
  uint64_t v14 = 0;
  int v15 = 0;
  do
  {
    v15 += a1[39].i32[v14];
    v14 += 2;
  }
  while (v14 != 28);
  uint64_t v16 = a1[10].i64[0];
  uint64_t v17 = a1[11].i64[1];
  uint64_t v18 = a1[13].i64[0];
  uint64_t v19 = a1[14].i64[1];
  uint64_t v20 = a1[16].i64[0];
  uint64_t v21 = a1[17].i64[1];
  CFStringAppendFormat(Mutable, 0, @"\nResource count: %lu, %lu unique, (%lu bytes).", v15, v17+ v16+ v18+ v19+ v20+ v21+ a1[19].i64[0]+ a1[20].i64[1]+ a1[22].i64[0]+ a1[23].i64[1]+ a1[25].i64[0]+ a1[26].i64[1]+ a1[28].i64[1]+ a1[30].i64[1], 56 * (v21 + v16)
  + 40 * (a1[19].i64[0] + v17)
  + 32 * (a1[20].i64[1] + v20 + a1[23].i64[1] + a1[25].i64[0])
  + 24 * (v19 + v18 + a1[22].i64[0] + a1[26].i64[1] + a1[28].i64[1] + a1[30].i64[1]));
  if (a1[39].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" Clip: %lu, %lu unique.", a1[39].i64[0], a1[10].i64[0]);
  }
  if (a1[39].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" Color: %lu, %lu unique.", a1[39].i64[1], a1[11].i64[1]);
  }
  if (a1[40].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" ColorSpace: %lu, %lu unique.", a1[40].i64[0], a1[13].i64[0]);
  }
  if (a1[40].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" Dash: %lu, %lu unique.", a1[40].i64[1], a1[14].i64[1]);
  }
  if (a1[41].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" Font: %lu, %lu unique.", a1[41].i64[0], a1[16].i64[0]);
  }
  if (a1[41].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" Image: %lu, %lu unique.", a1[41].i64[1], a1[17].i64[1]);
  }
  if (a1[42].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" Shading: %lu, %lu unique.", a1[42].i64[0], a1[19].i64[0]);
  }
  if (a1[45].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" Gradient: %lu, %lu unique.", a1[45].i64[1], a1[20].i64[1]);
  }
  if (a1[42].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" Pattern: %lu, %lu unique.", a1[42].i64[1], a1[22].i64[0]);
  }
  if (a1[43].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" Style: %lu, %lu unique.", a1[43].i64[0], a1[23].i64[1]);
  }
  if (a1[43].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" SoftMask: %lu, %lu unique.", a1[43].i64[1], a1[25].i64[0]);
  }
  if (a1[44].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" Function: %lu, %lu unique.", a1[44].i64[0], a1[26].i64[1]);
  }
  if (a1[44].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" DisplayList: %lu, %lu unique.", a1[44].i64[1], a1[28].i64[1]);
  }
  if (a1[45].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" CFTypeRef: %lu, %lu unique.", a1[45].i64[0], a1[30].i64[1]);
  }
  CFStringAppendFormat(Mutable, 0, @"\nEntryState count: %lu, %lu unique, (%lu bytes).", vaddvq_s32(vuzp1q_s32(a1[46], a1[47])), a1[33].i64[1] + a1[32].i64[0] + a1[35].i64[0] + a1[36].i64[1], 104 * a1[32].i64[0] + 16 * a1[33].i64[1] + 56 * a1[35].i64[0] + 80 * a1[36].i64[1]);
  if (a1[46].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" Drawing: %lu, %lu unique.", a1[46].i64[0], a1[32].i64[0]);
  }
  if (a1[46].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" Fill: %lu, %lu unique.", a1[46].i64[1], a1[33].i64[1]);
  }
  if (a1[47].i64[0]) {
    CFStringAppendFormat(Mutable, 0, @" Stroke: %lu, %lu unique.", a1[47].i64[0], a1[35].i64[0]);
  }
  if (a1[47].i64[1]) {
    CFStringAppendFormat(Mutable, 0, @" Pattern: %lu, %lu unique.", a1[47].i64[1], a1[36].i64[1]);
  }
  uint64_t v22 = (char *)a1[37].i64[1];
  unsigned int v23 = (char *)a1[37].i64[0];
  uint64_t v24 = (v22 - v23) >> 4;
  for (uint64_t i = 0; v23 != v22; i += (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26))
  {
    uint64_t v26 = *(void *)v23;
    v23 += 16;
  }
  CFStringAppendFormat(Mutable, 0, @"\nDrawing operations %lu, (%lu bytes):\n", v24, i);
  uint64_t v27 = (void *)a1[37].i64[0];
  size_t v28 = (void *)a1[37].i64[1];
  if (v27 != v28)
  {
    for (uint64_t j = 0; ; ++j)
    {
      unsigned int v30 = *(_DWORD *)(*v27 + 8);
      uint64_t v31 = "Unknown";
      if (v30 <= 8u) {
        uint64_t v31 = off_1E52CC9B8[v30];
      }
      uint64_t v32 = v30 >> 8;
      uint64_t v33 = (*(uint64_t (**)(void))(*(void *)*v27 + 16))(*v27);
      CFStringAppendFormat(Mutable, 0, @"    (%zu) %s, flags = 0x%08x, std::string::size_type size = %zu.\n", j, v31, v32, v33);
      if (j == 500) {
        break;
      }
      v27 += 2;
      if (v27 == v28) {
        return Mutable;
      }
    }
    CFStringAppendFormat(Mutable, 0, @"... %lu more entries ...\n", ((a1[37].i64[1] - a1[37].i64[0]) >> 4) - 500);
  }
  return Mutable;
}

void std::shared_ptr<CG::DisplayListResourceFunction>::shared_ptr[abi:fe180100]<CG::DisplayListResourceFunction,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB14C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceFunction *,std::shared_ptr<CG::DisplayListResourceFunction>::__shared_ptr_default_delete<CG::DisplayListResourceFunction,CG::DisplayListResourceFunction>,std::allocator<CG::DisplayListResourceFunction>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG27DisplayListResourceFunctionEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceFunction *,std::shared_ptr<CG::DisplayListResourceFunction>::__shared_ptr_default_delete<CG::DisplayListResourceFunction,CG::DisplayListResourceFunction>,std::allocator<CG::DisplayListResourceFunction>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<CG::DisplayListResourceFunction *,std::shared_ptr<CG::DisplayListResourceFunction>::__shared_ptr_default_delete<CG::DisplayListResourceFunction,CG::DisplayListResourceFunction>,std::allocator<CG::DisplayListResourceFunction>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceSoftMask>::shared_ptr[abi:fe180100]<CG::DisplayListResourceSoftMask,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB1610(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceSoftMask *,std::shared_ptr<CG::DisplayListResourceSoftMask>::__shared_ptr_default_delete<CG::DisplayListResourceSoftMask,CG::DisplayListResourceSoftMask>,std::allocator<CG::DisplayListResourceSoftMask>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG27DisplayListResourceSoftMaskEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceSoftMask *,std::shared_ptr<CG::DisplayListResourceSoftMask>::__shared_ptr_default_delete<CG::DisplayListResourceSoftMask,CG::DisplayListResourceSoftMask>,std::allocator<CG::DisplayListResourceSoftMask>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceStyle>::shared_ptr[abi:fe180100]<CG::DisplayListResourceStyle,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB1728(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceStyle *,std::shared_ptr<CG::DisplayListResourceStyle>::__shared_ptr_default_delete<CG::DisplayListResourceStyle,CG::DisplayListResourceStyle>,std::allocator<CG::DisplayListResourceStyle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG24DisplayListResourceStyleEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceStyle *,std::shared_ptr<CG::DisplayListResourceStyle>::__shared_ptr_default_delete<CG::DisplayListResourceStyle,CG::DisplayListResourceStyle>,std::allocator<CG::DisplayListResourceStyle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

uint64_t CG::DisplayList::patternResourceForPattern(CG::DisplayList *this, CGPattern *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  ++*((void *)this + 83);
  CFAllocatorRef v3 = (char *)this + 328;
  uint64_t v4 = (char *)*((void *)this + 41);
  if (!v4) {
    goto LABEL_15;
  }
  long long v5 = (char *)this + 328;
  do
  {
    uint64_t v7 = *((void *)v4 + 4);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v8 = *(void *)(v7 + 16);
      std::__shared_weak_count::__release_shared[abi:fe180100](v6);
    }
    else
    {
      unint64_t v8 = *(void *)(v7 + 16);
    }
    double v9 = (char **)(v4 + 8);
    if (v8 >= (unint64_t)a2)
    {
      double v9 = (char **)v4;
      long long v5 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v3 == v5) {
    goto LABEL_15;
  }
  uint64_t v10 = *((void *)v5 + 4);
  double v11 = (std::__shared_weak_count *)*((void *)v5 + 5);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (*(void *)(v10 + 16) < (unint64_t)a2)
    {
      std::__shared_weak_count::__release_shared[abi:fe180100](v11);
      goto LABEL_15;
    }
    uint64_t v14 = *((void *)v5 + 4);
    unsigned int v13 = (std::__shared_weak_count *)*((void *)v5 + 5);
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v15 = *(void *)(v14 + 16);
      std::__shared_weak_count::__release_shared[abi:fe180100](v13);
    }
    else
    {
      unint64_t v15 = *(void *)(v14 + 16);
    }
    std::__shared_weak_count::__release_shared[abi:fe180100](v11);
    if (v15 <= (unint64_t)a2) {
      return *((void *)v5 + 4);
    }
LABEL_15:
    operator new();
  }
  if (*(CGPattern **)(v10 + 16) != a2) {
    goto LABEL_15;
  }
  return *((void *)v5 + 4);
}

void sub_184FB1AC4(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>::operator()[abi:fe180100](0, v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<CG::DisplayListResourcePattern>::shared_ptr[abi:fe180100]<CG::DisplayListResourcePattern,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB1B6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourcePattern *,std::shared_ptr<CG::DisplayListResourcePattern>::__shared_ptr_default_delete<CG::DisplayListResourcePattern,CG::DisplayListResourcePattern>,std::allocator<CG::DisplayListResourcePattern>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG26DisplayListResourcePatternEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourcePattern *,std::shared_ptr<CG::DisplayListResourcePattern>::__shared_ptr_default_delete<CG::DisplayListResourcePattern,CG::DisplayListResourcePattern>,std::allocator<CG::DisplayListResourcePattern>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<CG::DisplayListResourcePattern *,std::shared_ptr<CG::DisplayListResourcePattern>::__shared_ptr_default_delete<CG::DisplayListResourcePattern,CG::DisplayListResourcePattern>,std::allocator<CG::DisplayListResourcePattern>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceGradient>::shared_ptr[abi:fe180100]<CG::DisplayListResourceGradient,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB1CB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceGradient *,std::shared_ptr<CG::DisplayListResourceGradient>::__shared_ptr_default_delete<CG::DisplayListResourceGradient,CG::DisplayListResourceGradient>,std::allocator<CG::DisplayListResourceGradient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG27DisplayListResourceGradientEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceGradient *,std::shared_ptr<CG::DisplayListResourceGradient>::__shared_ptr_default_delete<CG::DisplayListResourceGradient,CG::DisplayListResourceGradient>,std::allocator<CG::DisplayListResourceGradient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceShading>::shared_ptr[abi:fe180100]<CG::DisplayListResourceShading,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB1E00(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceShading *,std::shared_ptr<CG::DisplayListResourceShading>::__shared_ptr_default_delete<CG::DisplayListResourceShading,CG::DisplayListResourceShading>,std::allocator<CG::DisplayListResourceShading>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG26DisplayListResourceShadingEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceShading *,std::shared_ptr<CG::DisplayListResourceShading>::__shared_ptr_default_delete<CG::DisplayListResourceShading,CG::DisplayListResourceShading>,std::allocator<CG::DisplayListResourceShading>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceImage>::shared_ptr[abi:fe180100]<CG::DisplayListResourceImage,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB1F18(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceImage *,std::shared_ptr<CG::DisplayListResourceImage>::__shared_ptr_default_delete<CG::DisplayListResourceImage,CG::DisplayListResourceImage>,std::allocator<CG::DisplayListResourceImage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG24DisplayListResourceImageEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceImage *,std::shared_ptr<CG::DisplayListResourceImage>::__shared_ptr_default_delete<CG::DisplayListResourceImage,CG::DisplayListResourceImage>,std::allocator<CG::DisplayListResourceImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceFont>::shared_ptr[abi:fe180100]<CG::DisplayListResourceFont,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB2030(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceFont *,std::shared_ptr<CG::DisplayListResourceFont>::__shared_ptr_default_delete<CG::DisplayListResourceFont,CG::DisplayListResourceFont>,std::allocator<CG::DisplayListResourceFont>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG23DisplayListResourceFontEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceFont *,std::shared_ptr<CG::DisplayListResourceFont>::__shared_ptr_default_delete<CG::DisplayListResourceFont,CG::DisplayListResourceFont>,std::allocator<CG::DisplayListResourceFont>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceDash>::shared_ptr[abi:fe180100]<CG::DisplayListResourceDash,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB2148(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceDash *,std::shared_ptr<CG::DisplayListResourceDash>::__shared_ptr_default_delete<CG::DisplayListResourceDash,CG::DisplayListResourceDash>,std::allocator<CG::DisplayListResourceDash>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG23DisplayListResourceDashEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceDash *,std::shared_ptr<CG::DisplayListResourceDash>::__shared_ptr_default_delete<CG::DisplayListResourceDash,CG::DisplayListResourceDash>,std::allocator<CG::DisplayListResourceDash>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<CG::DisplayListResourceDash *,std::shared_ptr<CG::DisplayListResourceDash>::__shared_ptr_default_delete<CG::DisplayListResourceDash,CG::DisplayListResourceDash>,std::allocator<CG::DisplayListResourceDash>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceColorSpace>::shared_ptr[abi:fe180100]<CG::DisplayListResourceColorSpace,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB2294(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceColorSpace *,std::shared_ptr<CG::DisplayListResourceColorSpace>::__shared_ptr_default_delete<CG::DisplayListResourceColorSpace,CG::DisplayListResourceColorSpace>,std::allocator<CG::DisplayListResourceColorSpace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG29DisplayListResourceColorSpaceEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceColorSpace *,std::shared_ptr<CG::DisplayListResourceColorSpace>::__shared_ptr_default_delete<CG::DisplayListResourceColorSpace,CG::DisplayListResourceColorSpace>,std::allocator<CG::DisplayListResourceColorSpace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceColor>::shared_ptr[abi:fe180100]<CG::DisplayListResourceColor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB23AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceColor *,std::shared_ptr<CG::DisplayListResourceColor>::__shared_ptr_default_delete<CG::DisplayListResourceColor,CG::DisplayListResourceColor>,std::allocator<CG::DisplayListResourceColor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG24DisplayListResourceColorEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceColor *,std::shared_ptr<CG::DisplayListResourceColor>::__shared_ptr_default_delete<CG::DisplayListResourceColor,CG::DisplayListResourceColor>,std::allocator<CG::DisplayListResourceColor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListResourceClip>::shared_ptr[abi:fe180100]<CG::DisplayListResourceClip,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB24C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceClip *,std::shared_ptr<CG::DisplayListResourceClip>::__shared_ptr_default_delete<CG::DisplayListResourceClip,CG::DisplayListResourceClip>,std::allocator<CG::DisplayListResourceClip>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG23DisplayListResourceClipEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListResourceClip *,std::shared_ptr<CG::DisplayListResourceClip>::__shared_ptr_default_delete<CG::DisplayListResourceClip,CG::DisplayListResourceClip>,std::allocator<CG::DisplayListResourceClip>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::__shared_ptr_emplace<CG::DisplayListShape>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED095548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::__shared_ptr_emplace<CG::DisplayListShape>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED095548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t CGDisplayListGetTypeID()
{
  if (_ZZZ22CGDisplayListGetTypeIDEUb_E4once != -1) {
    dispatch_once(&_ZZZ22CGDisplayListGetTypeIDEUb_E4once, &__block_literal_global_161_15385);
  }
  return CGDisplayListGetTypeID::display_list2_type_id;
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListShape  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN2CG16DisplayListShapeEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

CG::DisplayListShape *std::__shared_ptr_pointer<CG::DisplayListShape  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(CG::DisplayListShape **)(a1 + 24);
  if (result)
  {
    CG::DisplayListShape::~DisplayListShape(result);
    JUMPOUT(0x18532A2A0);
  }
  return result;
}

void std::__shared_ptr_pointer<CG::DisplayListShape  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

const __CFURL *CG::DisplayList::serializeToURL(CG::DisplayList *this, CFURLRef anURL, const __CFDictionary *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  CFStringRef String = CFURLCopyQueryString(anURL, &stru_1ED0A02B0);
  if (!String) {
    goto LABEL_45;
  }
  CFStringGetCString(String, (char *)buffer, 255, 0x8000100u);
  uint64_t v6 = strstr((char *)buffer, "tmpRelative=");
  if (v6) {
    BOOL v7 = strncmp(v6 + 12, "yes", 3uLL) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  unint64_t v8 = strstr((char *)buffer, "addProcID=");
  if (!v8)
  {
    BOOL v9 = 0;
    if (!v7) {
      goto LABEL_14;
    }
LABEL_9:
    if (CGGetTempDirPath_predicate != -1) {
      dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_119);
    }
    CFStringRef v10 = CFURLCopyPath(anURL);
    CFStringRef v11 = v10;
    if (v10)
    {
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s/%@", &CGGetTempDirPath_tempDirPath, v10);
      CFRelease(v11);
      CFURLRef v14 = CFURLCreateWithFileSystemPath(v12, v13, kCFURLPOSIXPathStyle, 1u);
      if (!v9) {
        goto LABEL_44;
      }
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  BOOL v9 = strncmp(v8 + 10, "yes", 3uLL) == 0;
  if (v7) {
    goto LABEL_9;
  }
LABEL_14:
  if (v9)
  {
    CFURLRef v14 = 0;
LABEL_16:
    if (CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::onceToken != -1) {
      dispatch_once(&CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::onceToken, &__block_literal_global_15493);
    }
    uint64_t v15 = getpid();
    *(_DWORD *)buffer = v15;
    pthread_mutex_lock(&CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::dict_mutex);
    uint64_t v16 = *(void *)(CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::sPIDMap + 8);
    if (!v16) {
      goto LABEL_28;
    }
    uint64_t v17 = CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::sPIDMap + 8;
    do
    {
      int v18 = *(_DWORD *)(v16 + 28);
      BOOL v19 = v18 < (int)v15;
      if (v18 >= (int)v15) {
        uint64_t v20 = (uint64_t *)v16;
      }
      else {
        uint64_t v20 = (uint64_t *)(v16 + 8);
      }
      if (!v19) {
        uint64_t v17 = v16;
      }
      uint64_t v16 = *v20;
    }
    while (*v20);
    if (v17 != CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::sPIDMap + 8
      && (int)v15 >= *(_DWORD *)(v17 + 28))
    {
      uint64_t v21 = (*(_DWORD *)(v17 + 32) + 1);
    }
    else
    {
LABEL_28:
      uint64_t v21 = 1;
    }
    *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::sPIDMap, v15, buffer)+ 8) = v21;
    pthread_mutex_unlock(&CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::dict_mutex);
    if (v14) {
      CFURLRef v22 = v14;
    }
    else {
      CFURLRef v22 = anURL;
    }
    CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFURLRef v24 = CFURLCreateCopyDeletingPathExtension((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v22);
    CFStringRef PathComponent = CFURLCopyLastPathComponent(v24);
    CFStringRef v26 = CFStringCreateWithFormat(v23, 0, @"%@_%d_%d", PathComponent, v15, v21);
    CFURLRef v27 = CFURLCreateCopyDeletingLastPathComponent(v23, v22);
    CFURLRef v28 = CFURLCreateCopyAppendingPathComponent(v23, v27, v26, 1u);
    if (v14) {
      CFRelease(v14);
    }
    CFURLRef v14 = CFURLCreateCopyAppendingPathExtension(v23, v28, @"dlist");
    if (v24) {
      CFRelease(v24);
    }
    if (PathComponent) {
      CFRelease(PathComponent);
    }
    if (v26) {
      CFRelease(v26);
    }
    if (v27) {
      CFRelease(v27);
    }
    if (v28) {
      CFRelease(v28);
    }
LABEL_44:
    if (v14) {
      goto LABEL_46;
    }
  }
LABEL_45:
  CFURLRef v14 = (const __CFURL *)CFRetain(anURL);
LABEL_46:
  if (!CFURLGetFileSystemRepresentation(v14, 0, buffer, 1024))
  {
    if (v14) {
      CFRelease(v14);
    }
    return 0;
  }
  size_t v29 = strlen((const char *)buffer);
  if (v29 && buffer[v29 - 1] != 47) {
    strlcat((char *)buffer, "/", 0x401uLL);
  }
  unsigned int v30 = strchr((char *)&buffer[1], 47);
  if (v30)
  {
    uint64_t v31 = v30;
    while (1)
    {
      *uint64_t v31 = 0;
      if (mkdir((const char *)buffer, 0x1FFu) == -1 && *__error() != 17) {
        break;
      }
      *uint64_t v31 = 47;
      uint64_t v31 = strchr(v31 + 1, 47);
      if (!v31) {
        goto LABEL_55;
      }
    }
    __error();
    CGPostError((uint64_t)"%s: Failed to create directory for path: %s, errno = %d", v50, v51, v52, v53, v54, v55, v56, (char)"CFURLRef CG::DisplayList::serializeToURL(CFURLRef, CFDictionaryRef)");
    if (v14) {
      CFRelease(v14);
    }
    return 0;
  }
LABEL_55:
  v58[0] = &unk_1ED0949C0;
  v58[1] = this;
  CFTypeRef v59 = 0;
  if (v14) {
    CFTypeRef v59 = CFRetain(v14);
  }
  uint64_t v62 = 0;
  int v63 = v64;
  xmlTextWriterPtr v61 = 0;
  v58[0] = &unk_1ED094C10;
  v64[0] = 0;
  v64[1] = 0;
  v65[0] = 0;
  v65[1] = 0;
  v64[2] = v65;
  uint64_t v32 = xmlBufferCreate();
  xmlBufferPtr buf = v32;
  if (v32)
  {
    xmlTextWriterPtr v61 = xmlNewTextWriterMemory(v32, 0);
    if (!v61)
    {
      CGPostError((uint64_t)"%s: xmlNewTextWriterMemory() returned NULL", v40, v41, v42, v43, v44, v45, v46, (char)"CG::DisplayListXMLSerializer::DisplayListXMLSerializer(const DisplayList *, CFURLRef)");
      xmlBufferFree(buf);
      xmlBufferPtr buf = 0;
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: xmlBufferCreate() returned NULL", v33, v34, v35, v36, v37, v38, v39, (char)"CG::DisplayListXMLSerializer::DisplayListXMLSerializer(const DisplayList *, CFURLRef)");
  }
  int v47 = CG::DisplayListXMLSerializer::serialize((CG::DisplayListXMLSerializer *)v58);
  if (v14) {
    char v48 = v47;
  }
  else {
    char v48 = 1;
  }
  if (v47) {
    CFURLRef v49 = v14;
  }
  else {
    CFURLRef v49 = 0;
  }
  if ((v48 & 1) == 0)
  {
    CFRelease(v14);
    CFURLRef v49 = 0;
  }
  CG::DisplayListXMLSerializer::~DisplayListXMLSerializer((CG::DisplayListXMLSerializer *)v58);
  return v49;
}

void sub_184FB2C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  CG::DisplayListXMLSerializer::~DisplayListXMLSerializer((CG::DisplayListXMLSerializer *)va);
  _Unwind_Resume(a1);
}

void ___ZN2CG11DisplayList14serializeToURLEPK7__CFURLPK14__CFDictionary_block_invoke()
{
}

void ___ZNK2CG11DisplayList22copyReferencedPatternsEv_block_invoke(uint64_t a1, uint64_t a2)
{
}

uint64_t CG::DisplayList::enumeratePatternResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void **)(result + 320);
  BOOL v7 = (void *)(result + 328);
  if (v6 != (void *)(result + 328))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v6[4]);
      unint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != v7);
  }
  if (a2)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2CG11DisplayList34enumeratePatternResourcesWithBlockEbU13block_pointerFvPKNS_26DisplayListResourcePatternEE_block_invoke;
    v11[3] = &unk_1E52CC950;
    char v12 = a2;
    v11[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(*(void *)(v5 + 576), *(void *)(v5 + 584), (uint64_t)v11);
  }
  return result;
}

uint64_t ___ZNK2CG11DisplayList34enumeratePatternResourcesWithBlockEbU13block_pointerFvPKNS_26DisplayListResourcePatternEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumeratePatternResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t CG::DisplayList::enumerateDisplayListEntriesWithBlock(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      if (*(unsigned char *)(*(void *)v5 + 8) == 7)
      {
        uint64_t v6 = *(void *)(*(void *)v5 + 80);
        if (v6)
        {
          if (*(void *)(v6 + 16)) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
          }
        }
      }
      v5 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

CGImageRef CG::DisplayList::createImage(CG::DisplayList *this)
{
  uint64_t v55 = 0;
  uint64_t v56 = &v55;
  uint64_t v57 = 0x2000000000;
  char v58 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x2000000000;
  char v54 = 0;
  uint64_t v47 = 0;
  char v48 = &v47;
  uint64_t v49 = 0x2000000000;
  char v50 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  int v46 = 0;
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 0x40000000;
  _OWORD v42[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke;
  v42[3] = &unk_1E52CC7A0;
  v42[4] = &v55;
  v42[5] = &v43;
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 0x40000000;
  v41[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_2;
  v41[3] = &unk_1E52CC7C8;
  v41[4] = v42;
  CG::DisplayList::enumerateColorSpaceResourcesWithBlock((uint64_t)this, 1, (uint64_t)v41);
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 0x40000000;
  v40[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_3;
  v40[3] = &unk_1E52CC838;
  v40[5] = &v51;
  v40[6] = &v47;
  v40[4] = v42;
  CG::DisplayList::enumeratePatternResourcesWithBlock((uint64_t)this, 1, (uint64_t)v40);
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2000000000;
  int v39 = 0;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 0x40000000;
  v35[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_5;
  v35[3] = &unk_1E52CC860;
  v35[4] = &v36;
  CG::DisplayList::enumerateImageResourcesWithBlock((uint64_t)this, 1, (uint64_t)v35);
  if (*((void *)this + 33))
  {
    CFAllocatorRef v3 = v56;
  }
  else
  {
    if (*((_DWORD *)v44 + 6) <= 3u && !*((unsigned char *)v48 + 24))
    {
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 0x40000000;
      v34[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_6;
      v34[3] = &unk_1E52CC888;
      v34[4] = &v47;
      CG::DisplayList::enumerateColorResourcesWithBlock((uint64_t)this, 1, (uint64_t)v34);
      if (!*((unsigned char *)v48 + 24)) {
        *((_DWORD *)v44 + 6) = 1;
      }
    }
    CFAllocatorRef v3 = v56;
    if (*((unsigned char *)v56 + 24))
    {
      if (!*((unsigned char *)v52 + 24))
      {
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 0x40000000;
        v33[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_7;
        v33[3] = &unk_1E52CC8B0;
        v33[4] = &v51;
        CG::DisplayList::enumerateColorResourcesWithBlock((uint64_t)this, 1, (uint64_t)v33);
        CFAllocatorRef v3 = v56;
        if (!*((unsigned char *)v52 + 24)) {
          *((unsigned char *)v56 + 24) = 0;
        }
      }
    }
  }
  int v4 = *((_DWORD *)v37 + 6);
  int v5 = *((_DWORD *)v44 + 6);
  int v6 = *((unsigned __int8 *)v3 + 24);
  int v7 = CG::DisplayList::containsTransparentContent(this, v2);
  if (v7) {
    int v8 = 1;
  }
  else {
    int v8 = 5;
  }
  if (v5 == 1 && v4 == 1 && v6 == 0) {
    int v11 = v7;
  }
  else {
    int v11 = v8;
  }
  unsigned int v12 = v4 - 2;
  if ((v4 - 2) >= 4)
  {
    size_t v14 = 8;
    uint64_t v13 = 16;
  }
  else
  {
    uint64_t v13 = qword_1852223B8[v12];
    size_t v14 = qword_1852223D8[v12];
  }
  uint64_t v15 = @"kCGColorSpaceExtendedSRGB";
  if (!v6) {
    uint64_t v15 = @"kCGColorSpaceSRGB";
  }
  if (v5 == 1) {
    CFStringRef v16 = @"kCGColorSpaceGenericGrayGamma2_2";
  }
  else {
    CFStringRef v16 = v15;
  }
  CGColorSpaceRef v17 = CGColorSpaceCreateWithName(v16);
  if (v17 && *(unsigned char *)(*((void *)v17 + 3) + 13))
  {
    int v18 = 4352;
    size_t v14 = v13;
  }
  else
  {
    int v18 = 0;
  }
  size_t v19 = vcvtpd_u64_f64(*((double *)this + 5));
  size_t v20 = vcvtpd_u64_f64(*((double *)this + 6));
  if (v17 && (uint64_t v21 = *(void *)(*((void *)v17 + 3) + 48)) != 0) {
    uint64_t v22 = v21 + 1;
  }
  else {
    uint64_t v22 = 0;
  }
  CGContextRef v23 = CGBitmapContextCreateWithData(0, v19, v20, v14, ((v14 >> 3) * v19 * v22 + 31) & 0xFFFFFFFFFFFFFFE0, v17, v18 | v11, 0, 0);
  if (v23)
  {
    unsigned int v30 = v23;
    CGDisplayListDrawInContext(*((void *)this + 1), (uint64_t)v23, v24, v25, v26, v27, v28, v29);
    CGImageRef Image = CGBitmapContextCreateImage(v30);
    CFRelease(v30);
  }
  else
  {
    CGImageRef Image = 0;
  }
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  return Image;
}

void sub_184FB32E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 208), 8);
  _Block_object_dispose((const void *)(v17 - 176), 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CG11DisplayList11createImageEv_block_invoke(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) |= *(unsigned char *)(*(void *)(a2 + 24) + 14);
    uint64_t v2 = *(unsigned int *)(*(void *)(a2 + 24) + 32);
    if (v2 <= 4) {
      *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) |= dword_1852223F8[v2];
    }
  }
  return result;
}

uint64_t ___ZN2CG11DisplayList11createImageEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t CG::DisplayList::enumerateColorSpaceResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(void **)(result + 176);
  int v7 = (void *)(result + 184);
  if (v6 != (void *)(result + 184))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v6[4]);
      int v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          int v6 = v9;
        }
        while (!v10);
      }
      int v6 = v9;
    }
    while (v9 != v7);
  }
  if (a2)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2CG11DisplayList37enumerateColorSpaceResourcesWithBlockEbU13block_pointerFvPKNS_29DisplayListResourceColorSpaceEE_block_invoke;
    v11[3] = &unk_1E52CC900;
    char v12 = a2;
    v11[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(*(void *)(v5 + 576), *(void *)(v5 + 584), (uint64_t)v11);
  }
  return result;
}

void ___ZN2CG11DisplayList11createImageEv_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned char *)(v2 + 185))
  {
    *(_OWORD *)keys = xmmword_1E52CC7E8;
    long long v29 = *(_OWORD *)off_1E52CC7F8;
    values[0] = *(void **)MEMORY[0x1E4F1CFC8];
    values[1] = values[0];
    values[2] = *(void **)MEMORY[0x1E4F1CFD0];
    values[3] = values[0];
    int v4 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v4)
    {
      int v11 = v4;
      uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(v4, (const __CFDictionary *)&CGRectInfinite, v5, v6, v7, v8, v9, v10);
      if (CGDisplayList)
      {
        size_t v20 = (const void *)CGDisplayList;
        uint64_t v21 = CGDisplayListContextCreate(CGDisplayList, v13, v14, v15, v16, v17, v18, v19);
        if (v21)
        {
          uint64_t v22 = (const void *)v21;
          CGContextRef v23 = *(void (**)(void, uint64_t))(v2 + 168);
          if (v23) {
            v23(*(void *)(v2 + 80), v21);
          }
          CFRelease(v22);
        }
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 0x40000000;
        v24[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_4;
        v24[3] = &unk_1E52CC810;
        uint64_t v26 = *(void *)(a1 + 48);
        long long v25 = *(_OWORD *)(a1 + 32);
        CG::DisplayList::enumerateColorResourcesWithBlock((uint64_t)v20 + 16, 1, (uint64_t)v24);
        CFRelease(v20);
      }
      CFRelease(v11);
    }
  }
}

uint64_t ___ZN2CG11DisplayList11createImageEv_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t result = CGImageGetComponentType(*(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = CGPixelComponentMax(result, *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v4, v5, v6, v7, v8, v9);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t CG::DisplayList::enumerateImageResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void **)(result + 248);
  uint64_t v7 = (void *)(result + 256);
  if (v6 != (void *)(result + 256))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v6[4]);
      uint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != v7);
  }
  if (a2)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2CG11DisplayList32enumerateImageResourcesWithBlockEbU13block_pointerFvPKNS_24DisplayListResourceImageEE_block_invoke;
    v11[3] = &unk_1E52CC928;
    char v12 = a2;
    v11[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(*(void *)(v5 + 576), *(void *)(v5 + 584), (uint64_t)v11);
  }
  return result;
}

double *___ZN2CG11DisplayList11createImageEv_block_invoke_6(double *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = result;
    if ((v8 & 0x8000000000000000) != 0)
    {
      uint64_t result = (double *)CGTaggedColorGetColorSpace(*(void *)(a2 + 16), a2, a3, a4, a5, a6, a7, a8);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = *(double **)(v8 + 24);
      if (!result) {
        return result;
      }
    }
    if (*(_DWORD *)(*((void *)result + 3) + 28) == 1)
    {
      uint64_t result = (double *)CGColorGetComponents((CGColorRef)v8);
      double v10 = result[1];
      if (*result != v10 || v10 != result[2]) {
        *(unsigned char *)(*(void *)(*((void *)v9 + 4) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

uint64_t CG::DisplayList::enumerateColorResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void **)(result + 152);
  uint64_t v7 = (void *)(result + 160);
  if (v6 != (void *)(result + 160))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v6[4]);
      unint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != v7);
  }
  if (a2)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2CG11DisplayList32enumerateColorResourcesWithBlockEbU13block_pointerFvPKNS_24DisplayListResourceColorEE_block_invoke;
    v11[3] = &unk_1E52CC8D8;
    char v12 = a2;
    v11[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(*(void *)(v5 + 576), *(void *)(v5 + 584), (uint64_t)v11);
  }
  return result;
}

CGColorSpaceRef ___ZN2CG11DisplayList11createImageEv_block_invoke_7(CGColorSpaceRef result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    CGColorSpaceRef v9 = result;
    if ((v8 & 0x8000000000000000) != 0)
    {
      uint64_t result = CGTaggedColorGetColorSpace(*(void *)(a2 + 16), a2, a3, a4, a5, a6, a7, a8);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = *(CGColorSpaceRef *)(v8 + 24);
      if (!result) {
        return result;
      }
    }
    uint64_t v10 = *((void *)result + 3);
    if (*(_DWORD *)(v10 + 28) == 1)
    {
      if (*(unsigned char *)(v10 + 14))
      {
        uint64_t result = (CGColorSpaceRef)CGColorIsWideGamut(v8);
        *(unsigned char *)(*(void *)(*((void *)v9 + 4) + 8) + 24) |= result;
      }
    }
  }
  return result;
}

uint64_t ___ZNK2CG11DisplayList32enumerateColorResourcesWithBlockEbU13block_pointerFvPKNS_24DisplayListResourceColorEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumerateColorResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t ___ZNK2CG11DisplayList32enumerateImageResourcesWithBlockEbU13block_pointerFvPKNS_24DisplayListResourceImageEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumerateImageResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t ___ZN2CG11DisplayList11createImageEv_block_invoke_4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    if ((v9 & 0x8000000000000000) != 0)
    {
      CGColorSpaceRef ColorSpace = CGTaggedColorGetColorSpace(*(void *)(a2 + 16), a2, a3, a4, a5, a6, a7, a8);
      if (!ColorSpace) {
        goto LABEL_13;
      }
    }
    else
    {
      CGColorSpaceRef ColorSpace = *(CGColorSpaceRef *)(v9 + 24);
      if (!ColorSpace) {
        goto LABEL_13;
      }
    }
    uint64_t v11 = *((void *)ColorSpace + 3);
    if (*(unsigned char *)(v11 + 14))
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) |= CGColorIsWideGamut(v9);
      uint64_t v11 = *((void *)ColorSpace + 3);
    }
    if (*(_DWORD *)(v11 + 28) == 1)
    {
      Components = CGColorGetComponents((CGColorRef)v9);
      double v13 = Components[1];
      if (*Components != v13 || v13 != Components[2]) {
        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
      }
    }
  }
LABEL_13:
  uint64_t v14 = *(uint64_t (**)(void))(a1[4] + 16);

  return v14();
}

uint64_t ___ZNK2CG11DisplayList37enumerateColorSpaceResourcesWithBlockEbU13block_pointerFvPKNS_29DisplayListResourceColorSpaceEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumerateColorSpaceResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t CGDisplayListCreate(CG::DisplayList *a1, uint64_t a2, const CGRect *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CG::DisplayList::createCGDisplayList(a1, (const __CFDictionary *)&CGRectInfinite, a3, a4, a5, a6, a7, a8);
}

uint64_t CGDisplayListCreateCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CG::DisplayList::createCGDisplayList(a1, 0, a3, a4, a5, a6, a7, a8);
}

void std::shared_ptr<CG::DisplayListEntry const>::shared_ptr[abi:fe180100]<CG::DisplayListEntry const,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB3AF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntry const*,std::shared_ptr<CG::DisplayListEntry const>::__shared_ptr_default_delete<CG::DisplayListEntry const,CG::DisplayListEntry const>,std::allocator<CG::DisplayListEntry const>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG16DisplayListEntryEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListEntry const*,std::shared_ptr<CG::DisplayListEntry const>::__shared_ptr_default_delete<CG::DisplayListEntry const,CG::DisplayListEntry const>,std::allocator<CG::DisplayListEntry const>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListEntryStateDrawing const>::shared_ptr[abi:fe180100]<CG::DisplayListEntryStateDrawing,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB3C0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateDrawing *,std::shared_ptr<CG::DisplayListEntryStateDrawing const>::__shared_ptr_default_delete<CG::DisplayListEntryStateDrawing const,CG::DisplayListEntryStateDrawing>,std::allocator<CG::DisplayListEntryStateDrawing>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG28DisplayListEntryStateDrawingEE27__shared_ptr_default_deleteIS3_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListEntryStateDrawing *,std::shared_ptr<CG::DisplayListEntryStateDrawing const>::__shared_ptr_default_delete<CG::DisplayListEntryStateDrawing const,CG::DisplayListEntryStateDrawing>,std::allocator<CG::DisplayListEntryStateDrawing>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListEntryStateFill const>::shared_ptr[abi:fe180100]<CG::DisplayListEntryStateFill,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB3D24(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateFill *,std::shared_ptr<CG::DisplayListEntryStateFill const>::__shared_ptr_default_delete<CG::DisplayListEntryStateFill const,CG::DisplayListEntryStateFill>,std::allocator<CG::DisplayListEntryStateFill>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG25DisplayListEntryStateFillEE27__shared_ptr_default_deleteIS3_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListEntryStateFill *,std::shared_ptr<CG::DisplayListEntryStateFill const>::__shared_ptr_default_delete<CG::DisplayListEntryStateFill const,CG::DisplayListEntryStateFill>,std::allocator<CG::DisplayListEntryStateFill>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::shared_ptr<CG::DisplayListEntryStateStroke const>::shared_ptr[abi:fe180100]<CG::DisplayListEntryStateStroke,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB3E3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateStroke *,std::shared_ptr<CG::DisplayListEntryStateStroke const>::__shared_ptr_default_delete<CG::DisplayListEntryStateStroke const,CG::DisplayListEntryStateStroke>,std::allocator<CG::DisplayListEntryStateStroke>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG27DisplayListEntryStateStrokeEE27__shared_ptr_default_deleteIS3_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListEntryStateStroke *,std::shared_ptr<CG::DisplayListEntryStateStroke const>::__shared_ptr_default_delete<CG::DisplayListEntryStateStroke const,CG::DisplayListEntryStateStroke>,std::allocator<CG::DisplayListEntryStateStroke>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

BOOL CG::CompareEntryStatePattern::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 24);
  __s1[0] = *(_OWORD *)(a1 + 8);
  __s1[1] = v5;
  __s1[2] = *(_OWORD *)(a1 + 40);
  long long v6 = *(_OWORD *)(a3 + 40);
  v14[0] = *(_OWORD *)(a3 + 24);
  v14[1] = v6;
  v14[2] = *(_OWORD *)(a3 + 56);
  int v7 = memcmp(__s1, v14, 0x30uLL);
  if (v7 < 0) {
    return 1;
  }
  if (v7) {
    return 0;
  }
  double v9 = *(double *)(a1 + 56);
  uint64_t v10 = *(void *)(a2 + 120);
  double v11 = *(double *)(v10 + 24);
  if (v9 < v11) {
    return 1;
  }
  if (v9 > v11) {
    return 0;
  }
  double v12 = *(double *)(a1 + 64);
  double v13 = *(double *)(v10 + 32);
  if (v12 < v13) {
    return 1;
  }
  if (v12 > v13) {
    return 0;
  }
  return *(double *)(a1 + 72) < *(double *)(*(void *)(a2 + 144) + 16);
}

void std::shared_ptr<CG::DisplayListEntryStatePattern const>::shared_ptr[abi:fe180100]<CG::DisplayListEntryStatePattern,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_184FB4010(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStatePattern *,std::shared_ptr<CG::DisplayListEntryStatePattern const>::__shared_ptr_default_delete<CG::DisplayListEntryStatePattern const,CG::DisplayListEntryStatePattern>,std::allocator<CG::DisplayListEntryStatePattern>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG28DisplayListEntryStatePatternEE27__shared_ptr_default_deleteIS3_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<CG::DisplayListEntryStatePattern *,std::shared_ptr<CG::DisplayListEntryStatePattern const>::__shared_ptr_default_delete<CG::DisplayListEntryStatePattern const,CG::DisplayListEntryStatePattern>,std::allocator<CG::DisplayListEntryStatePattern>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

uint64_t CG::DisplayList::enumerateAllResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  long long v5 = (void *)result;
  long long v6 = *(void **)(result + 128);
  int v7 = (void *)(result + 136);
  if (v6 != (void *)(result + 136))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v6[4]);
      unint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          double v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          double v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          long long v6 = v9;
        }
        while (!v10);
      }
      long long v6 = v9;
    }
    while (v9 != v7);
  }
  double v11 = (void *)v5[19];
  if (v11 != v5 + 20)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v11[4]);
      double v12 = (void *)v11[1];
      if (v12)
      {
        do
        {
          double v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          double v13 = (void *)v11[2];
          BOOL v10 = *v13 == (void)v11;
          double v11 = v13;
        }
        while (!v10);
      }
      double v11 = v13;
    }
    while (v13 != v5 + 20);
  }
  uint64_t v14 = (void *)v5[22];
  if (v14 != v5 + 23)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v14[4]);
      uint64_t v15 = (void *)v14[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v14[2];
          BOOL v10 = *v16 == (void)v14;
          uint64_t v14 = v16;
        }
        while (!v10);
      }
      uint64_t v14 = v16;
    }
    while (v16 != v5 + 23);
  }
  uint64_t v17 = (void *)v5[25];
  if (v17 != v5 + 26)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v17[4]);
      uint64_t v18 = (void *)v17[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v17[2];
          BOOL v10 = *v19 == (void)v17;
          uint64_t v17 = v19;
        }
        while (!v10);
      }
      uint64_t v17 = v19;
    }
    while (v19 != v5 + 26);
  }
  size_t v20 = (void *)v5[28];
  if (v20 != v5 + 29)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v20[4]);
      uint64_t v21 = (void *)v20[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v20[2];
          BOOL v10 = *v22 == (void)v20;
          size_t v20 = v22;
        }
        while (!v10);
      }
      size_t v20 = v22;
    }
    while (v22 != v5 + 29);
  }
  CGContextRef v23 = (void *)v5[31];
  if (v23 != v5 + 32)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v23[4]);
      uint64_t v24 = (void *)v23[1];
      if (v24)
      {
        do
        {
          long long v25 = v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v25 = (void *)v23[2];
          BOOL v10 = *v25 == (void)v23;
          CGContextRef v23 = v25;
        }
        while (!v10);
      }
      CGContextRef v23 = v25;
    }
    while (v25 != v5 + 32);
  }
  uint64_t v26 = (void *)v5[34];
  if (v26 != v5 + 35)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v26[4]);
      uint64_t v27 = (void *)v26[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v26[2];
          BOOL v10 = *v28 == (void)v26;
          uint64_t v26 = v28;
        }
        while (!v10);
      }
      uint64_t v26 = v28;
    }
    while (v28 != v5 + 35);
  }
  long long v29 = (void *)v5[37];
  if (v29 != v5 + 38)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v29[4]);
      uint64_t v30 = (void *)v29[1];
      if (v30)
      {
        do
        {
          uint64_t v31 = v30;
          uint64_t v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          uint64_t v31 = (void *)v29[2];
          BOOL v10 = *v31 == (void)v29;
          long long v29 = v31;
        }
        while (!v10);
      }
      long long v29 = v31;
    }
    while (v31 != v5 + 38);
  }
  uint64_t v32 = (void *)v5[40];
  if (v32 != v5 + 41)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v32[4]);
      uint64_t v33 = (void *)v32[1];
      if (v33)
      {
        do
        {
          uint64_t v34 = v33;
          uint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v34 = (void *)v32[2];
          BOOL v10 = *v34 == (void)v32;
          uint64_t v32 = v34;
        }
        while (!v10);
      }
      uint64_t v32 = v34;
    }
    while (v34 != v5 + 41);
  }
  uint64_t v35 = (void *)v5[43];
  if (v35 != v5 + 44)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v35[4]);
      uint64_t v36 = (void *)v35[1];
      if (v36)
      {
        do
        {
          uint64_t v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v37 = (void *)v35[2];
          BOOL v10 = *v37 == (void)v35;
          uint64_t v35 = v37;
        }
        while (!v10);
      }
      uint64_t v35 = v37;
    }
    while (v37 != v5 + 44);
  }
  uint64_t v38 = (void *)v5[46];
  if (v38 != v5 + 47)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v38[4]);
      int v39 = (void *)v38[1];
      if (v39)
      {
        do
        {
          uint64_t v40 = v39;
          int v39 = (void *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          uint64_t v40 = (void *)v38[2];
          BOOL v10 = *v40 == (void)v38;
          uint64_t v38 = v40;
        }
        while (!v10);
      }
      uint64_t v38 = v40;
    }
    while (v40 != v5 + 47);
  }
  uint64_t v41 = (void *)v5[49];
  if (v41 != v5 + 50)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v41[4]);
      uint64_t v42 = (void *)v41[1];
      if (v42)
      {
        do
        {
          uint64_t v43 = v42;
          uint64_t v42 = (void *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          uint64_t v43 = (void *)v41[2];
          BOOL v10 = *v43 == (void)v41;
          uint64_t v41 = v43;
        }
        while (!v10);
      }
      uint64_t v41 = v43;
    }
    while (v43 != v5 + 50);
  }
  for (uint64_t i = (void *)v5[54]; i; uint64_t i = (void *)*i)
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, i[2]);
  uint64_t v45 = (void *)v5[57];
  if (v45 != v5 + 58)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, v45[4]);
      int v46 = (void *)v45[1];
      if (v46)
      {
        do
        {
          uint64_t v47 = v46;
          int v46 = (void *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          uint64_t v47 = (void *)v45[2];
          BOOL v10 = *v47 == (void)v45;
          uint64_t v45 = v47;
        }
        while (!v10);
      }
      uint64_t v45 = v47;
    }
    while (v47 != v5 + 58);
  }
  if (a2)
  {
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 0x40000000;
    v48[2] = ___ZNK2CG11DisplayList30enumerateAllResourcesWithBlockEbU13block_pointerFvPKNS_19DisplayListResourceEE_block_invoke;
    v48[3] = &unk_1E52CC978;
    char v49 = a2;
    v48[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(v5[72], v5[73], (uint64_t)v48);
  }
  return result;
}

uint64_t ___ZNK2CG11DisplayList30enumerateAllResourcesWithBlockEbU13block_pointerFvPKNS_19DisplayListResourceEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumerateAllResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t CG::DisplayList::enumerateEntriesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (a2)
  {
    uint64_t v6 = *(void *)(result + 584);
    do
    {
      if (v6 == *(void *)(v4 + 576)) {
        break;
      }
      char v9 = 0;
      uint64_t v7 = *(void *)(v6 - 16);
      v6 -= 16;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a3 + 16))(a3, v7, &v9);
    }
    while (!v9);
  }
  else
  {
    long long v5 = *(void **)(result + 576);
    if (v5 != *(void **)(result + 584))
    {
      do
      {
        char v8 = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, void, char *))(a3 + 16))(a3, *v5, &v8);
        if (v8) {
          break;
        }
        v5 += 2;
      }
      while (v5 != *(void **)(v4 + 584));
    }
  }
  return result;
}

uint64_t CGDisplayListReset(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 80) = 0;
    *(CGRect *)(result + 88) = CGRectNull;
    operator new();
  }
  return result;
}

void sub_184FB49F4(_Unwind_Exception *a1)
{
  CG::DisplayListShape::~DisplayListShape(v1);
  MEMORY[0x18532A2A0]();
  _Unwind_Resume(a1);
}

CFTypeRef CGDisplayListRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

double *CGDisplayListSetBoundingBox(double *result, double a2, double a3, double a4, double a5)
{
  if (result)
  {
    result[11] = a2;
    result[12] = a3;
    result[13] = a4;
    result[14] = a5;
  }
  return result;
}

CGFloat CGDisplayListGetBoundingBox(uint64_t a1)
{
  uint64_t v1 = &CGRectNull;
  if (a1 && *(void *)(a1 + 592) != *(void *)(a1 + 600)) {
    uint64_t v1 = (const CGRect *)(a1 + 88);
  }
  return v1->origin.x;
}

uint64_t CGDisplayListContextDelegateCreate(uint64_t result)
{
  if (result) {
    CG::DisplayList::createContextDelegate();
  }
  return result;
}

uint64_t CGDisplayListContainsTransparentContent(uint64_t result, const CGRect *a2)
{
  if (result) {
    return CG::DisplayList::containsTransparentContent((CG::DisplayList *)(result + 16), a2);
  }
  return result;
}

CFURLRef CGDisplayListSerializeToURL(uint64_t a1, const __CFURL *a2, const __CFDictionary *a3)
{
  if (a1 && a2) {
    return CG::DisplayList::serializeToURL((CG::DisplayList *)(a1 + 16), a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListCreateWithURL(const void *a1, uint64_t a2, const CGRect *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, a3, a4, a5, a6, a7, a8);
  v12[0] = 0;
  v12[1] = 0;
  v11[0] = &unk_1ED094CC0;
  v11[1] = CFRetain(a1);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v12;
  v13[0] = 0;
  v13[1] = 0;
  v12[2] = v13;
  if ((CG::DisplayListXMLDeserializer::deserializeTo((CG::DisplayListXMLDeserializer *)v11, (CG::DisplayList *)(CGDisplayList + 16)) & 1) == 0)
  {
    CFRelease((CFTypeRef)CGDisplayList);
    uint64_t CGDisplayList = 0;
  }
  CG::DisplayListXMLDeserializer::~DisplayListXMLDeserializer((CG::DisplayListXMLDeserializer *)v11);
  return CGDisplayList;
}

void sub_184FB4B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL CGDisplayListDumpToFile(uint64_t a1, char *__s)
{
  BOOL v2 = 0;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1 || !__s) {
    return v2;
  }
  size_t v5 = strlen(__s);
  if (v5 < 3 || strncmp(__s, "*/", 2uLL))
  {
    CFURLRef v13 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)__s, v5, 0);
    if (v13) {
      goto LABEL_6;
    }
LABEL_13:
    CGPostError((uint64_t)"SerializeDisplayList failed to create URL from path: %s", v6, (uint64_t)v7, v8, v9, v10, v11, v12, (char)__s);
    return 0;
  }
  CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v24 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)__s + 1, v5 - 1, 0);
  if (!v24) {
    goto LABEL_13;
  }
  CFStringRef v25 = CFURLGetString(v24);
  CFStringRef v26 = CFStringCreateWithFormat(v23, 0, @"%@%@", v25, @"?tmpRelative=yes&addProcID=yes");
  if (!v26) {
    goto LABEL_13;
  }
  CFStringRef v27 = v26;
  CFURLRef v13 = CFURLCreateWithString(v23, v26, 0);
  CFRelease(v27);
  if (!v13) {
    goto LABEL_13;
  }
LABEL_6:
  CFURLRef v14 = CG::DisplayList::serializeToURL((CG::DisplayList *)(a1 + 16), v13, v7);
  BOOL v2 = v14 != 0;
  if (v14)
  {
    CFURLRef v15 = v14;
    CFURLGetFileSystemRepresentation(v14, 1u, buffer, 1024);
    CFRelease(v15);
    uint64_t v22 = "succeeded";
  }
  else
  {
    CFURLGetFileSystemRepresentation(v13, 1u, buffer, 1024);
    uint64_t v22 = "failed";
  }
  CGLog(1, (uint64_t)"SerializeDisplayList %s to: %s", v16, v17, v18, v19, v20, v21, (char)v22);
  CFRelease(v13);
  return v2;
}

uint64_t CGDisplayListGetAuxiliaryInfo(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

CFMutableArrayRef CGDisplayListCopyReferencedPatterns(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(void *)(a1 + 352), MEMORY[0x1E4F1D510]);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CG11DisplayList22copyReferencedPatternsEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_126;
  v4[4] = Mutable;
  CG::DisplayList::enumeratePatternResourcesWithBlock(v1, 1, (uint64_t)v4);
  return Mutable;
}

uint64_t CGDisplayListContextCreateImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v11 = 0;
LABEL_10:
    handle_invalid_context((char)"CGDisplayListContextCreateImage", v11, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    uint64_t v11 = a1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v8 + 240);
  if (!v9) {
    return 0;
  }

  return v9();
}

uint64_t CGDisplayListGetNumberOfEntries(uint64_t result)
{
  if (result) {
    return (uint64_t)(*(void *)(result + 600) - *(void *)(result + 592)) >> 4;
  }
  return result;
}

uint64_t CGDisplayListGetNumberOfEntriesOfType(uint64_t result, int a2)
{
  if (result) {
    return *(void *)(result + 8 * a2 + 768);
  }
  return result;
}

uint64_t CGDisplayListEnumerateEntriesWithOptions(uint64_t result, char a2, uint64_t a3)
{
  if (result) {
    return CG::DisplayList::enumerateEntriesWithBlock(result + 16, a2, a3);
  }
  return result;
}

uint64_t CGDisplayListIsEqualToDisplayList(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2) {
      return CG::DisplayList::isEqualTo((CG::DisplayList *)(a1 + 16), (const CG::DisplayList *)(a2 + 16), 0);
    }
  }
  return result;
}

uint64_t CGDisplayListIsEqualToDisplayListWithOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2) {
      return CG::DisplayList::isEqualTo((CG::DisplayList *)(a1 + 16), (const CG::DisplayList *)(a2 + 16), a3);
    }
  }
  return result;
}

unint64_t CGDisplayListGetHash(unint64_t result)
{
  if (result) {
    return XXH64_digest(*(void **)(result + 136));
  }
  return result;
}

CGColorSpaceRef create_CalGray(CGPDFArray *a1)
{
  whitePoint[3] = *(CGFloat *)MEMORY[0x1E4F143B8];
  if (!a1 || *((void *)a1 + 2) != 2)
  {
    return 0;
  }
  CGPDFDictionaryRef value = 0;
  CGPDFReal v7 = 0.0;
  if (!CGPDFArrayGetDictionary(a1, 1uLL, &value))
  {
    return 0;
  }
  if ((get_array(value, "WhitePoint", whitePoint, (CGPDFArray *)3, 0, v1) & 1) == 0)
  {
    return 0;
  }
  if ((get_array(value, "BlackPoint", blackPoint, (CGPDFArray *)3, default_black_point_15690, v2) & 1) == 0)
  {
    return 0;
  }
  BOOL Number = CGPDFDictionaryGetNumber(value, "Gamma", &v7);
  double v4 = v7;
  if (!Number) {
    double v4 = 1.0;
  }
  return CGColorSpaceCreateCalibratedGray(whitePoint, blackPoint, v4);
}

CGColorSpaceRef create_CalRGB(CGPDFArray *a1)
{
  whitePoint[3] = *(CGFloat *)MEMORY[0x1E4F143B8];
  if (a1 && *((void *)a1 + 2) == 2)
  {
    CGPDFDictionaryRef v6 = 0;
    if (CGPDFArrayGetDictionary(a1, 1uLL, &v6))
    {
      if (get_array(v6, "WhitePoint", whitePoint, (CGPDFArray *)3, 0, v1))
      {
        if (get_array(v6, "BlackPoint", blackPoint, (CGPDFArray *)3, default_black_point_15690, v2))
        {
          if (get_array(v6, "Gamma", gamma, (CGPDFArray *)3, (uint64_t *)&xmmword_185296170, v3))
          {
            if (get_array(v6, "Matrix", matrix, (CGPDFArray *)9, color_space_state_create_calibrated_rgb_default_matrix, v4))return CGColorSpaceCreateCalibratedRGB(whitePoint, blackPoint, gamma, matrix); {
          }
            }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

CGColorSpaceRef create_Lab(CGPDFArray *a1)
{
  whitePoint[3] = *(CGFloat *)MEMORY[0x1E4F143B8];
  if (a1 && *((void *)a1 + 2) == 2)
  {
    CGPDFDictionaryRef v5 = 0;
    if (CGPDFArrayGetDictionary(a1, 1uLL, &v5))
    {
      if (get_array(v5, "WhitePoint", whitePoint, (CGPDFArray *)3, 0, v1))
      {
        if (get_array(v5, "BlackPoint", blackPoint, (CGPDFArray *)3, default_black_point_15690, v2))
        {
          if (get_array(v5, "Range", range, (CGPDFArray *)4, (uint64_t *)&xmmword_185296188, v3)) {
            return CGColorSpaceCreateLab(whitePoint, blackPoint, range);
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

uint64_t create_Separation(CGPDFArray *array)
{
  if (!array || *((void *)array + 2) != 4)
  {
    return 0;
  }
  CGPDFDictionaryRef value = 0;
  if (!CGPDFArrayGetName(array, 1uLL, (const char **)&value))
  {
    return 0;
  }
  CGPDFObjectRef v15 = 0;
  CGPDFObjectRef v16 = 0;
  if (!CGPDFArrayGetObject(array, 2uLL, &v15))
  {
    return 0;
  }
  CGPDFObjectRef v2 = v15;
  if (!v15)
  {
LABEL_18:
    return 0;
  }
  int v3 = *((_DWORD *)v15 + 2);
  if (v3 != 7)
  {
    if (v3 == 5)
    {
      CGPDFObjectRef v16 = (CGPDFObjectRef)*((void *)v15 + 4);
      if (strcmp((const char *)v16, "Pattern")) {
        goto LABEL_9;
      }
      return 0;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (CGPDFArray *)*((void *)v15 + 4);
  if (!v12 || !*((void *)v12 + 2))
  {
    return 0;
  }
  if (!CGPDFArrayGetName(v12, 0, (const char **)&v16))
  {
    return 0;
  }
  CFURLRef v13 = (const char *)v16;
  if (!strcmp((const char *)v16, "Separation")
    || !strcmp(v13, "DeviceN")
    || !strcmp(v13, "Indexed")
    || !strcmp(v13, "Pattern"))
  {
    return 0;
  }
  CGPDFObjectRef v2 = v15;
LABEL_9:
  uint64_t colorspace = cg_create_colorspace(v2);
  if (!colorspace)
  {
    return 0;
  }
  CGPDFDictionaryRef v5 = (CGColorSpace *)colorspace;
  CGPDFObjectRef v16 = 0;
  if (CGPDFArrayGetObject(array, 3uLL, &v16))
  {
    Function = CGPDFFunctionCreateFunction((char *)v16);
    uint64_t DeviceN = CGColorSpaceCreateDeviceN(1uLL, (uint64_t)&value, v5, Function, 0, v7, v8, v9);
    if (Function) {
      CFRelease(Function);
    }
  }
  else
  {
    uint64_t DeviceN = 0;
  }
  CGColorSpaceRelease(v5);
  return DeviceN;
}

uint64_t create_DeviceN(CGPDFArray *array)
{
  if (!array || (uint64_t v2 = *((void *)array + 2), (unint64_t)(v2 - 6) <= 0xFFFFFFFFFFFFFFFDLL))
  {
    return 0;
  }
  CGPDFArrayRef value = 0;
  CGPDFObjectRef v19 = 0;
  if (!CGPDFArrayGetArray(array, 1uLL, &value) || !value || (unint64_t v3 = *((void *)value + 2)) == 0)
  {
    return 0;
  }
  __n128 v4 = malloc_type_malloc(8 * v3, 0x50040EE9192B6uLL);
  if (!v4) {
    return 0;
  }
  CGPDFDictionaryRef v5 = v4;
  size_t v6 = 0;
  uint64_t v7 = (const char **)v4;
  do
  {
    if (!CGPDFArrayGetName(value, v6, v7))
    {
LABEL_27:
      free(v5);
      return 0;
    }
    ++v6;
    ++v7;
  }
  while (v3 != v6);
  if (!CGPDFArrayGetObject(array, 2uLL, &v19) || (uint64_t colorspace = cg_create_colorspace(v19)) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v9 = (CGColorSpace *)colorspace;
  if (!CGPDFArrayGetObject(array, 3uLL, &v19))
  {
LABEL_30:
    CGColorSpaceRelease(v9);
    goto LABEL_27;
  }
  Function = CGPDFFunctionCreateFunction((char *)v19);
  CFURLRef v14 = Function;
  if (Function
    && (*((void *)Function + 4) != v3 || *(void *)(*((void *)v9 + 3) + 48) != *((void *)Function + 6)))
  {
    CFRelease(v14);
    goto LABEL_30;
  }
  CGPDFDictionaryRef v17 = 0;
  if (v2 == 5 && !CGPDFArrayGetDictionary(array, 4uLL, &v17))
  {
    CGColorSpaceRelease(v9);
    if (v14) {
      CFRelease(v14);
    }
    goto LABEL_27;
  }
  uint64_t DeviceN = CGColorSpaceCreateDeviceN(v3, (uint64_t)v5, v9, v14, 0, v11, v12, v13);
  CGColorSpaceRelease(v9);
  if (v14) {
    CFRelease(v14);
  }
  free(v5);
  return DeviceN;
}

CGColorSpaceRef create_Indexed(CGPDFArrayRef array)
{
  if (array && *((void *)array + 2) == 4)
  {
    streaunint64_t m = 0;
    CGPDFObjectRef value = 0;
    CGPDFInteger v28 = 0;
    CGPDFStringRef v29 = 0;
    if (CGPDFArrayGetObject(array, 1uLL, &value))
    {
      uint64_t colorspace = cg_create_colorspace(value);
      if (colorspace)
      {
        unint64_t v3 = (CGColorSpace *)colorspace;
        if (CGPDFArrayGetInteger(array, 2uLL, &v28))
        {
          if (v28 < 0)
          {
          }
          else
          {
            if (CGPDFArrayGetStream(array, 3uLL, &stream))
            {
              CGPDFInteger v4 = v28;
              CGPDFDataFormat format = CGPDFDataFormatRaw;
              CFDataRef v5 = CGPDFStreamCopyData(stream, &format);
              if (v5)
              {
                CFDataRef v6 = v5;
                if (format) {
                  goto LABEL_10;
                }
                unint64_t v12 = *(void *)(*((void *)v3 + 3) + 48);
                unint64_t v13 = v12 * (v4 + 1);
                unint64_t Length = CFDataGetLength(v5);
                if ((v12 | (v4 + 1)) >> 32)
                {
                  uint64_t v15 = v4 >> 63;
                  CGPDFInteger v16 = v4 + 1;
                  if (v4 == -1) {
                    ++v15;
                  }
                  uint64_t v17 = (__PAIR128__(v15, v16) * v12) >> 64;
                  unint64_t v18 = v16 * v12;
                  if (v17 || v13 < v18)
                  {
LABEL_10:
                    CGColorSpaceRef Indexed = 0;
LABEL_11:
                    CFRelease(v6);
LABEL_47:
                    CGColorSpaceRelease(v3);
                    return Indexed;
                  }
                }
                if (Length >= v13)
                {
                  BytePtr = CFDataGetBytePtr(v6);
                  CGColorSpaceRef Indexed = CGColorSpaceCreateIndexed(v3, v4, BytePtr);
                  goto LABEL_11;
                }
                uint64_t v20 = malloc_type_calloc(1uLL, v12 * (v4 + 1), 0x6614BB8AuLL);
                if (v20)
                {
                  uint64_t v21 = v20;
                  uint64_t v22 = CFDataGetBytePtr(v6);
                  size_t v23 = CFDataGetLength(v6);
                  memmove(v21, v22, v23);
                  CGColorSpaceRef Indexed = CGColorSpaceCreateIndexed(v3, v4, (const unsigned __int8 *)v21);
                  free(v21);
                  goto LABEL_11;
                }
              }
              CGColorSpaceRef Indexed = 0;
              goto LABEL_47;
            }
            if (CGPDFArrayGetString(array, 3uLL, &v29))
            {
              CGPDFStringRef v9 = v29;
              unint64_t v10 = *(void *)(*((void *)v3 + 3) + 48) + *(void *)(*((void *)v3 + 3) + 48) * v28;
              if (v29)
              {
                if (*((void *)v29 + 3)) {
                  decrypt_string((uint64_t)v29);
                }
                unint64_t v11 = *((void *)v9 + 9);
              }
              else
              {
                unint64_t v11 = 0;
              }
              if (v11 >= v10)
              {
                CGPDFInteger v24 = v28;
                CGPDFStringRef v25 = v29;
                if (v29)
                {
                  if (*((void *)v29 + 3)) {
                    decrypt_string((uint64_t)v29);
                  }
                  CFStringRef v26 = (const unsigned __int8 *)v25 + 80;
                }
                else
                {
                  CFStringRef v26 = 0;
                }
                CGColorSpaceRef Indexed = CGColorSpaceCreateIndexed(v3, v24, v26);
                goto LABEL_47;
              }
            }
            else
            {
            }
          }
        }
        else
        {
        }
        CGColorSpaceRelease(v3);
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

CGColorSpaceRef create_Pattern(CGPDFArray *a1)
{
  if (!a1) {
    goto LABEL_7;
  }
  uint64_t v1 = *((void *)a1 + 2);
  if (v1 == 2)
  {
    CGPDFObjectRef value = 0;
    CGPDFArrayGetObject(a1, 1uLL, &value);
    uint64_t colorspace = (CGColorSpace *)cg_create_colorspace(value);
    if (colorspace)
    {
      CFDataRef v5 = colorspace;
      CGColorSpaceRef Pattern = CGColorSpaceCreatePattern(colorspace);
      CGColorSpaceRelease(v5);
      return Pattern;
    }
    return 0;
  }
  if (v1 != 1)
  {
LABEL_7:
    return 0;
  }

  return CGColorSpaceCreatePattern(0);
}

void cg_build_colorspace_destroy(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t compare_names_15717(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(*(void *)a1 + 32), *(const char **)(*(void *)a2 + 32));
}

void CGPDFDictionaryFinalize(uint64_t a1)
{
  CGPDFAssociationRelease(*(const void ***)(a1 + 48));
  uint64_t v2 = *(_DWORD **)(a1 + 56);
  if (v2)
  {
    do
    {
      unint64_t v3 = *(_DWORD **)v2;
      if ((v2[2] - 5) <= 4) {
        pdf_object_release_compound_value((uint64_t)v2);
      }
      free(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 72));
  CGPDFInteger v4 = *(void **)(a1 + 64);

  free(v4);
}

CFTypeRef CGPDFDictionaryRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void CGPDFDictionaryRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

size_t CGPDFDictionaryGetCount(size_t dict)
{
  if (dict) {
    return *(void *)(dict + 16);
  }
  return dict;
}

BOOL CGPDFDictionaryGetBoolean(CGPDFDictionaryRef dict, const char *key, CGPDFBoolean *value)
{
  valuedouble a = 0;
  BOOL Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea && *((_DWORD *)valuea + 2) == 2)
    {
      if (value) {
        char *value = *((unsigned char *)valuea + 32);
      }
      LOBYTE(Object) = 1;
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

BOOL CGPDFDictionaryGetNumber(CGPDFDictionaryRef dict, const char *key, CGPDFReal *value)
{
  valuedouble a = 0;
  BOOL Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      int v5 = *((_DWORD *)valuea + 2);
      switch(v5)
      {
        case 12:
          goto LABEL_6;
        case 4:
          double v6 = *((double *)valuea + 4);
          if (!value) {
            goto LABEL_8;
          }
          goto LABEL_7;
        case 3:
LABEL_6:
          double v6 = (double)*((uint64_t *)valuea + 4);
          if (!value)
          {
LABEL_8:
            LOBYTE(Object) = 1;
            return Object;
          }
LABEL_7:
          char *value = v6;
          goto LABEL_8;
      }
    }
    LOBYTE(Object) = 0;
  }
  return Object;
}

BOOL CGPDFDictionaryGetString(CGPDFDictionaryRef dict, const char *key, CGPDFStringRef *value)
{
  if (value) {
    char *value = 0;
  }
  valuedouble a = 0;
  BOOL Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      int v5 = *((_DWORD *)valuea + 2);
      LOBYTE(Object) = v5 == 6;
      if (v5 == 6 && value != 0)
      {
        char *value = (CGPDFStringRef)*((void *)valuea + 4);
        LOBYTE(Object) = 1;
      }
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

BOOL CGPDFDictionaryGetStream(CGPDFDictionaryRef dict, const char *key, CGPDFStreamRef *value)
{
  if (value) {
    char *value = 0;
  }
  valuedouble a = 0;
  BOOL Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      int v5 = *((_DWORD *)valuea + 2);
      LOBYTE(Object) = v5 == 9;
      if (v5 == 9 && value != 0)
      {
        char *value = (CGPDFStreamRef)*((void *)valuea + 4);
        LOBYTE(Object) = 1;
      }
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

double CGPDFDictionaryGetMatrix(CGPDFDictionary *a1, const char *a2, _OWORD *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  BOOL Numbers = CGPDFDictionaryGetNumbers(a1, a2, (uint64_t)v7, (CGPDFArray *)6);
  if (a3)
  {
    if (Numbers)
    {
      long long v6 = v7[1];
      *a3 = v7[0];
      a3[1] = v6;
      double result = v8[0];
      a3[2] = *(_OWORD *)v8;
    }
  }
  return result;
}

BOOL CGPDFDictionaryGetBooleans(CGPDFDictionary *a1, const char *a2, uint64_t a3, CGPDFArray *a4)
{
  CGPDFBoolean value = 0;
  arradouble y = 0;
  BOOL v6 = CGPDFDictionaryGetArray(a1, a2, &array);
  BOOL result = 0;
  if (v6)
  {
    CGPDFArrayRef v8 = array;
    if (array) {
      CGPDFArrayRef v8 = (CGPDFArrayRef)*((void *)array + 2);
    }
    if (v8 == a4)
    {
      if (a4)
      {
        size_t v9 = 0;
        do
        {
          BOOL result = CGPDFArrayGetBoolean(array, v9, &value);
          if (!result) {
            break;
          }
          *(unsigned char *)(a3 + v9++) = value;
        }
        while (a4 != (CGPDFArray *)v9);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CGPDFDictionaryGetIntegers(CGPDFDictionary *a1, const char *a2, uint64_t a3, CGPDFArray *a4)
{
  arradouble y = 0;
  CGPDFInteger value = 0;
  BOOL result = CGPDFDictionaryGetArray(a1, a2, &array);
  if (result)
  {
    CGPDFArrayRef v7 = array;
    if (array) {
      CGPDFArrayRef v7 = (CGPDFArrayRef)*((void *)array + 2);
    }
    if (v7 == a4)
    {
      if (a4)
      {
        size_t v8 = 0;
        do
        {
          BOOL result = CGPDFArrayGetInteger(array, v8, &value);
          if (!result) {
            break;
          }
          *(void *)(a3 + 8 * v8++) = value;
        }
        while (a4 != (CGPDFArray *)v8);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDictionaryGetObjectReference(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

void CGPDFDictionaryApplyFunction(CGPDFDictionaryRef dict, CGPDFDictionaryApplierFunction function, void *info)
{
  if (dict)
  {
    if (function)
    {
      for (uint64_t i = (uint64_t ****)*((void *)dict + 7); i; uint64_t i = (uint64_t ****)**i)
      {
        if (*((_DWORD *)i + 2) == 5)
        {
          BOOL v6 = (uint64_t *)i[4];
          CGPDFArrayRef v7 = *i;
          if (*i)
          {
            if (*((_DWORD *)v7 + 2) == 10) {
              pdf_xref_resolve(*((void *)dict + 3), (unint64_t)v7[2], (uint64_t)v7[3]);
            }
          }
          ((void (*)(uint64_t *))function)(v6);
        }
      }
    }
  }
}

void CGPDFDictionaryApplyBlock(CGPDFDictionaryRef dict, CGPDFDictionaryApplierBlock block, void *info)
{
  if (dict)
  {
    if (block)
    {
      for (uint64_t i = (uint64_t ****)*((void *)dict + 7); i; uint64_t i = (uint64_t ****)**i)
      {
        if (*((_DWORD *)i + 2) == 5)
        {
          BOOL v6 = (uint64_t *)i[4];
          CGPDFArrayRef v7 = *i;
          if (*i)
          {
            if (*((_DWORD *)v7 + 2) == 10) {
              pdf_xref_resolve(*((void *)dict + 3), (unint64_t)v7[2], (uint64_t)v7[3]);
            }
          }
          if (!(*((unsigned int (**)(CGPDFDictionaryApplierBlock, uint64_t *))block + 2))(block, v6)) {
            break;
          }
        }
      }
    }
  }
}

uint64_t CGPDFDictionaryApplyFunctionRaw(uint64_t result, uint64_t (*a2)(void, void, uint64_t), uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      for (uint64_t i = *(void **)(result + 56); i; uint64_t i = *(void **)*i)
      {
        if (*((_DWORD *)i + 2) == 5) {
          BOOL result = a2(i[4], *i, a3);
        }
      }
    }
  }
  return result;
}

uint64_t CGPDFDictionarySetAssociation(uint64_t result, const void *a2, const char *a3)
{
  if (result)
  {
    uint64_t v5 = result;
    BOOL v6 = (pthread_mutex_t *)(result + 72);
    pthread_mutex_lock((pthread_mutex_t *)(result + 72));
    CGPDFArrayRef v7 = *(const void ***)(v5 + 48);
    if (v7)
    {
      *(void *)(v5 + 48) = 0;
      CGPDFAssociationRelease(v7);
    }
    size_t v8 = CGPDFAssociationCreate(a2, (uint64_t)a3);
    *(void *)(v5 + 48) = v8;
    uint64_t Object = CGPDFAssociationGetObject((uint64_t)v8, a3);
    pthread_mutex_unlock(v6);
    return Object;
  }
  return result;
}

const void *CGPDFDictionaryCopyAssociation(uint64_t a1, const char *a2)
{
  if (!a1) {
    return 0;
  }
  CGPDFInteger v4 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  uint64_t Object = (const void *)CGPDFAssociationGetObject(*(void *)(a1 + 48), a2);
  BOOL v6 = Object;
  if (Object) {
    CFRetain(Object);
  }
  pthread_mutex_unlock(v4);
  return v6;
}

uint64_t CGPDFDictionaryRemoveAssociation(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (pthread_mutex_t *)(result + 72);
    pthread_mutex_lock((pthread_mutex_t *)(result + 72));
    unint64_t v3 = *(const void ***)(v1 + 48);
    if (v3)
    {
      *(void *)(v1 + 48) = 0;
      CGPDFAssociationRelease(v3);
    }
    return pthread_mutex_unlock(v2);
  }
  return result;
}

uint64_t CGPDFDictionaryPrint(uint64_t a1, FILE *a2)
{
  return CGPDFDictionaryPrintWithIndent(a1, a2, 0);
}

uint64_t CGPDFDictionaryPrintWithIndent(uint64_t result, FILE *a2, int a3)
{
  if (result)
  {
    uint64_t v4 = result;
    if (a2) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = (FILE *)*MEMORY[0x1E4F143C8];
    }
    fwrite("<<\n", 3uLL, 1uLL, v5);
    for (uint64_t i = *(uint64_t **)(v4 + 56); i; uint64_t i = *(uint64_t **)*i)
    {
      fprintf(v5, "%*s", a3 + 2, "");
      CGPDFObjectPrintWithIndent((uint64_t)i, v5, 0);
      fputc(32, v5);
      CGPDFObjectPrintWithIndent(*i, v5, (a3 + 2));
      fputc(10, v5);
    }
    return fprintf(v5, "%*s>>", a3, "");
  }
  return result;
}

uint64_t CGColorConverterGetTypeID()
{
  if (CGColorConversionInfoGetTypeID_predicate != -1) {
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
  }
  return kCGColorConverterRuntimeID;
}

CGColorConversionInfoRef CGColorConverterCreate(const __CFDictionary *a1, CGColorSpace *a2, CGColorConversionInfoTransformType a3, CGColorRenderingIntent a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return CGColorConversionInfoCreateFromListWithArguments(a1, a2, a3, a4, &a9);
}

CGColorConversionInfoRef CGColorConverterCreateSimple(CGColorSpaceRef a1, uint64_t a2)
{
  return CGColorConversionInfoCreateFromList(0, a1, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a2, 1, 0, 0);
}

void CGColorConverterRelease(const void *a1)
{
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID(a1);
    if (CGColorConversionInfoGetTypeID_predicate != -1) {
      dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
    }
    if (v2 == kCGColorConverterRuntimeID)
    {
      CFRelease(a1);
    }
  }
}

CFTypeRef CGColorConverterRetain(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (CGColorConversionInfoGetTypeID_predicate != -1) {
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
  }
  if (v2 != kCGColorConverterRuntimeID) {
    return 0;
  }

  return CFRetain(a1);
}

uint64_t getMaxLevel(int a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a1)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    if (*a4 < v4) {
      *a4 = v4;
    }
  }
  return 1;
}

BOOL isAtWidthMultiple(double *a1, double *a2)
{
  double v2 = a2[1];
  return vabdd_f64(a1[2], v2) <= a2[3] && fabs(*a1 - *a2 - rint((*a1 - *a2) / v2) * v2) <= a2[2];
}

uint64_t sameStyle(uint64_t a1, uint64_t a2)
{
  return CPPDFStyleEqual(*(void *)a2, *(void *)(a1 + 160), *(_WORD *)(a2 + 8));
}

uint64_t maxInsertionOrder(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 68);
  if (v2 > *a2) {
    *a2 = v2;
  }
  return 1;
}

uint64_t CGBlitInternal::CGApplyGainMapHeadRoom<(CGBlitVariant)0>(uint64_t result, uint64_t *a2, double a3, double a4)
{
  unint64_t v4 = *(void *)(result + 8);
  if (v4 >= 2 * a2[1]) {
    unint64_t v4 = 2 * a2[1];
  }
  if (v4 >= 2)
  {
    uint64_t v5 = 0;
    v6.i32[1] = 1081073664;
    double v7 = (a3 - a4) / 255.0;
    *(float *)&double v7 = v7;
    float32x4_t v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v7, 0);
    v8.i32[3] = 0;
    *(float *)v6.i32 = a4;
    float32x4_t v9 = (float32x4_t)vdupq_lane_s32(v6, 0);
    v9.i32[3] = 1.0;
    uint64_t v10 = *a2;
    uint64_t v11 = *(void *)result;
    unint64_t v13 = *(void *)(result + 16);
    uint64_t v12 = *(void *)(result + 24);
    uint64_t v14 = a2[3];
    if (v13 >= 2 * a2[2]) {
      unint64_t v13 = 2 * a2[2];
    }
    unint64_t v15 = v13 >> 1;
    unint64_t v16 = v13 - 1;
    uint64_t v17 = 2;
    BOOL result = 16;
    do
    {
      unint64_t v18 = 0;
      unint64_t v19 = v5 | 1;
      uint64_t v5 = v17;
      if (v19 >= v4) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v12;
      }
      uint64_t v21 = v20 + v11;
      if (v13 >= 0x20)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v10;
        uint64_t v24 = 16;
        do
        {
          unint64_t v18 = v24;
          int8x16_t v25 = vceqzq_s8(*(int8x16_t *)(v10 + v22));
          int v26 = vminvq_u8((uint8x16_t)v25) & 0x80;
          if (a4 != 1.0 || v26 == 0)
          {
            int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1850CDE70, v25);
            unsigned __int8 v29 = vaddv_s8((int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
            v28.i8[0] = vaddv_s8(*(int8x8_t *)v28.i8);
            unsigned int v30 = v28.i32[0] & 0xFFFF00FF | (v29 << 8);
            unint64_t v31 = __clz(__rbit32(v30));
            uint64_t v32 = __clz(v30) - 16;
            if (16 - v32 > v31)
            {
              uint64_t v33 = v31 + v32 - 16;
              uint64_t v34 = (float16x4_t *)(v21 + 16 * (v22 + v31));
              uint64_t v35 = (float16x4_t *)(v11 + 16 * (v22 + v31));
              uint64_t v36 = (unsigned __int8 *)(v23 + v31);
              do
              {
                unsigned int v38 = *v36++;
                unsigned int v37 = v38;
                if (a4 != 1.0 || v37 != 0)
                {
                  float32x4_t v40 = vmlaq_n_f32(v9, v8, (float)v37);
                  float16x8_t v41 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v40, vcvtq_f32_f16(*v34))), vmulq_f32(v40, vcvt_hight_f32_f16(*(float16x8_t *)v34->i8)));
                  *(float16x8_t *)v35->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v40, vcvtq_f32_f16(*v35))), vmulq_f32(v40, vcvt_hight_f32_f16(*(float16x8_t *)v35->i8)));
                  *(float16x8_t *)v34->i8 = v41;
                }
                v34 += 2;
                v35 += 2;
              }
              while (!__CFADD__(v33++, 1));
            }
          }
          uint64_t v24 = v18 + 16;
          v22 += 16;
          v23 += 16;
        }
        while (v18 + 16 <= v15);
      }
      unint64_t v43 = v15 - v18;
      if (v15 > v18)
      {
        uint64_t v44 = (float16x4_t *)(v21 + 16 * v18);
        uint64_t v45 = (unsigned __int8 *)(v10 + v18);
        int v46 = (float16x4_t *)(v11 + 16 * v18);
        do
        {
          unsigned int v48 = *v45++;
          unsigned int v47 = v48;
          if (a4 != 1.0 || v47 != 0)
          {
            float32x4_t v50 = vmlaq_n_f32(v9, v8, (float)v47);
            float16x8_t v51 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v50, vcvtq_f32_f16(*v44))), vmulq_f32(v50, vcvt_hight_f32_f16(*(float16x8_t *)v44->i8)));
            *(float16x8_t *)v46->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v50, vcvtq_f32_f16(*v46))), vmulq_f32(v50, vcvt_hight_f32_f16(*(float16x8_t *)v46->i8)));
            *(float16x8_t *)v44->i8 = v51;
          }
          v44 += 2;
          v46 += 2;
          --v43;
        }
        while (v43);
      }
      if (v13)
      {
        unsigned int v52 = *(unsigned __int8 *)(v10 + v16);
        if (a4 == 1.0 && v52 == 0) {
          goto LABEL_42;
        }
        float32x4_t v54 = vmlaq_n_f32(v9, v8, (float)v52);
        float16x4_t v55 = vcvt_f16_f32(vmulq_f32(v54, vcvtq_f32_f16(*(float16x4_t *)(v21 + 8 * v16))));
        *(float16x4_t *)(v11 + 8 * v16) = vcvt_f16_f32(vmulq_f32(v54, vcvtq_f32_f16(*(float16x4_t *)(v11 + 8 * v16))));
        *(float16x4_t *)(v21 + 8 * v16) = v55;
      }
      v11 += 2 * v12;
      v10 += v14;
LABEL_42:
      uint64_t v17 = v5 + 2;
    }
    while (v5 + 2 <= v4);
  }
  return result;
}

uint64_t CGBlitInternal::CGBufIsConstantValue<(CGBlitVariant)0>(uint64_t a1, const void *a2, float *a3)
{
  int v3 = *(_DWORD *)(a1 + 320);
  unsigned int v4 = v3 & 0x1F;
  if ((v3 & 0x1F) != 0) {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 326) + 1;
  }
  else {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 326);
  }
  if (!v5 || !*(void *)(a1 + 32) || !*(void *)(a1 + 24)) {
    return 1;
  }
  int8x8_t v7 = vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
  if (v5 > 4 || v7.u32[0] > 1uLL) {
    return 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + 324);
  if (v9 < 8) {
    return 0;
  }
  uint64_t result = 0;
  if (v9 > 0x80) {
    return result;
  }
  v7.i32[0] = v9;
  if (vaddlv_u8((uint8x8_t)vcnt_s8(v7)) > 1u) {
    return result;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  int v14 = v3 & 0x7000;
  do
  {
    int v15 = 1 << v12;
    if (a3[v12] >= INFINITY) {
      int v15 = 0;
    }
    v13 |= v15;
    ++v12;
  }
  while (v5 != v12);
  if (v14 == 0x4000 || v14 == 12288) {
    int v14 = 0;
  }
  if (!v13) {
    return 1;
  }
  int v17 = *(unsigned __int8 *)(a1 + 325);
  int8x16_t v18 = (int8x16_t)xmmword_1850CDA70;
  if (v4 <= 6 && ((1 << v4) & 0x54) != 0) {
    int8x16_t v18 = (int8x16_t)xmmword_1850CDE80;
  }
  if (v17 == 16)
  {
    if ((v3 & 0x100) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = 1;
    }
    if (v14 == 4096) {
      goto LABEL_42;
    }
    if (v14 == 0x2000)
    {
      v21.i64[0] = 0x404040404040404;
      v21.i64[1] = 0x404040404040404;
      int8x16_t v18 = veorq_s8(v18, v21);
      goto LABEL_42;
    }
    return 0;
  }
  if (v17 != 8) {
    return 0;
  }
  if (v14 == 4096)
  {
    v19.i64[0] = 0x404040404040404;
    v19.i64[1] = 0x404040404040404;
  }
  else
  {
    if (v14 != 0x2000) {
      goto LABEL_41;
    }
    v19.i64[0] = 0xC0C0C0C0C0C0C0CLL;
    v19.i64[1] = 0xC0C0C0C0C0C0C0CLL;
  }
  int8x16_t v18 = veorq_s8(v18, v19);
LABEL_41:
  unsigned int v20 = 0;
  uint64_t result = 0;
  if ((v3 & 0x100) != 0) {
    return result;
  }
LABEL_42:
  int8x16_t v45 = v18;
  int8x16_t v47 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
  int8x16_t __dst = v47;
  memcpy(&__dst, a2, 4 * v5);
  memcpy(&v47, a3, 4 * v5);
  *(double *)&long long v29 = CGBlitInternal::cgsBufferIsConstantValue_internal::CalculateLimits(v20, v5, (float32x4_t)vqtbl1q_s8(__dst, v45), (float32x4_t)vqtbl1q_s8(v47, v45), *(double *)v45.i64, v28, v22, v23, v24, v25, v26, v27);
  v46[0] = v29;
  v46[1] = v30;
  unint64_t v31 = CGBlitInternal::CGBufIsConstantValue<(CGBlitVariant)0>(CGBuf const*,float const*,float const*)::kRowFuncs[v20];
  if (*(void *)a1) {
    uint64_t v32 = *(void *)(*(void *)a1 + 32);
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v34 = *(void *)(a1 + 32);
  uint64_t v33 = *(void *)(a1 + 40);
  unint64_t v35 = (*(void *)(a1 + 24) * (unint64_t)*(unsigned __int8 *)(a1 + 324) + 7) >> 3;
  uint64_t result = ((uint64_t (*)(uint64_t, unint64_t, _OWORD *))v31)(v32, v35, v46);
  if (result)
  {
    unint64_t v39 = v34 - 1;
    if (v34 == 1) {
      return 1;
    }
    if (!*(void *)a1) {
      goto LABEL_63;
    }
    uint64_t v40 = *(void *)(*(void *)a1 + 32);
    if (!v40) {
      goto LABEL_63;
    }
    uint64_t result = ((uint64_t (*)(unint64_t, unint64_t, _OWORD *))v31)(v40 + v33 * v39, v35, v46);
    if (!result) {
      return result;
    }
    if (!*(void *)a1 || (uint64_t v41 = *(void *)(*(void *)a1 + 32)) == 0) {
LABEL_63:
    }
      _CGHandleAssert("AdvancePtr", 22, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "where != NULL", "AdvancePtr called on NULL", v36, v37, v38, v45.i8[0]);
    if (v39 < 2) {
      return 1;
    }
    uint64_t result = ((uint64_t (*)(uint64_t, unint64_t, _OWORD *))v31)(v33 + v41, v35, v46);
    if (result)
    {
      uint64_t v42 = 3;
      while (1)
      {
        if (-v33 == v41) {
          goto LABEL_63;
        }
        if (v34 == v42) {
          break;
        }
        int v43 = ((uint64_t (*)(uint64_t, unint64_t, _OWORD *))v31)(2 * v33 + v41, v35, v46);
        v41 += v33;
        ++v42;
        if (!v43)
        {
          unint64_t v44 = v42 - 2;
          return v44 >= v39;
        }
      }
      unint64_t v44 = v34 - 1;
      return v44 >= v39;
    }
  }
  return result;
}

double CGBlitInternal::cgsBufferIsConstantValue_internal::CalculateLimits(unsigned int a1, uint64_t a2, float32x4_t a3, float32x4_t a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  LODWORD(a6) = dword_1850CE110[a1];
  float32x4_t v12 = vmulq_n_f32(vaddq_f32(a3, a4), *(float *)&a6);
  float32x4_t v13 = vmulq_n_f32(vsubq_f32(a3, a4), *(float *)&a6);
  if (a1 <= 1)
  {
    float32x4_t v14 = vrndmq_f32(v12);
    float32x4_t v12 = vmaxnmq_f32(vminnmq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vrndpq_f32(v13), v14), (int8x16_t)vrndxq_f32(vmulq_n_f32(a3, *(float *)&a6)), (int8x16_t)v14), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0)), (float32x4_t)0);
  }
  if (a1 - 2 < 2)
  {
    uint64_t v16 = 4;
  }
  else if (a1 == 1)
  {
    *(int16x4_t *)v12.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(v12));
    uint64_t v16 = 2;
  }
  else if (a1)
  {
    uint64_t v16 = 0;
    float32x4_t v12 = 0uLL;
  }
  else
  {
    int16x8_t v15 = (int16x8_t)vcvtq_s32_f32(v12);
    *(int16x4_t *)v15.i8 = vmovn_s32((int32x4_t)v15);
    float32x4_t v12 = (float32x4_t)vmovn_s16(v15).u32[0];
    uint64_t v16 = 1;
  }
  uint64_t v17 = v16 * a2;
  if ((v17 & (v17 - 1)) != 0) {
    _CGHandleAssert("CalculateLimits", 126, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "0 == (arithmeticSizeBytes & (arithmeticSizeBytes-1))", "arithmetic size (%lu) is not a power of two", a10, a11, a12, v17);
  }
  *(void *)&double result = vqtbl1q_s8((int8x16_t)v12, vandq_s8(vdupq_n_s8((int)v17 - 1), (int8x16_t)xmmword_1850CDA70)).u64[0];
  return result;
}

BOOL CGBlitInternal::cgsBufferIsConstantValue_internal::TestLimitsRow<float>(float32x4_t *a1, unint64_t a2, float32x4_t *a3, uint8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 >= 0x40)
  {
    float32x4_t v9 = *a3;
    float32x4_t v10 = a3[1];
    int8x16_t v11 = 0uLL;
    int8x16_t v12 = 0uLL;
    int8x16_t v13 = 0uLL;
    int8x16_t v14 = 0uLL;
    do
    {
      float32x4_t v16 = a1[2];
      float32x4_t v15 = a1[3];
      float32x4_t v17 = *a1;
      float32x4_t v18 = a1[1];
      a1 += 4;
      int8x16_t v12 = vorrq_s8(vorrq_s8(v12, (int8x16_t)vcgtq_f32(v18, v9)), (int8x16_t)vcgtq_f32(v10, v18));
      int8x16_t v11 = vorrq_s8(vorrq_s8(v11, (int8x16_t)vcgtq_f32(v17, v9)), (int8x16_t)vcgtq_f32(v10, v17));
      int8x16_t v13 = vorrq_s8(vorrq_s8(v13, (int8x16_t)vcgtq_f32(v16, v9)), (int8x16_t)vcgtq_f32(v10, v16));
      int8x16_t v14 = vorrq_s8(vorrq_s8(v14, (int8x16_t)vcgtq_f32(v15, v9)), (int8x16_t)vcgtq_f32(v10, v15));
      a2 -= 64;
    }
    while (a2 > 0x3F);
    a4 = (uint8x16_t)vorrq_s8(vorrq_s8(v11, v13), vorrq_s8(v12, v14));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
  }
  if (!a2) {
    return 1;
  }
  if (a2 >= 0x20)
  {
    int8x8_t v19 = vmovn_s16((int16x8_t)vorrq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(*a1, *a3), (int16x8_t)vcgtq_f32(a1[1], *a3)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(a3[1], *a1), (int16x8_t)vcgtq_f32(a3[1], a1[1]))));
    a4 = (uint8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(v19, v19), vzip2_s8(v19, v19))), 0x1FuLL));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
    a2 -= 32;
    if (!a2) {
      return 1;
    }
    a1 += 2;
  }
  if (a2 < 0x10) {
    goto LABEL_14;
  }
  a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcgtq_f32(*a1, *a3), (int8x16_t)vcgtq_f32(a3[1], *a1));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0]) {
    return 0;
  }
  a2 -= 16;
  if (!a2) {
    return 1;
  }
  ++a1;
LABEL_14:
  if (a2 >= 8)
  {
    float32x2_t v20 = *(float32x2_t *)a1->f32;
    a1 = (float32x4_t *)((char *)a1 + 8);
    *(int8x8_t *)a4.i8 = vorr_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3[1].f32, v20), (int8x8_t)vcgt_f32(v20, *(float32x2_t *)a3->f32));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
    a2 -= 8;
  }
  if (!a2) {
    return 1;
  }
  if (a2 != 4) {
    _CGHandleAssert("operator()", 308, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "size == vectorSize", "size %lu did not match vectorSize (%lu)", a7, a8, a9, a2);
  }
  int v22 = a1->f32[0] < COERCE_FLOAT(a3[1].i64[0]);
  if (a1->f32[0] > COERCE_FLOAT(a3->i64[0])) {
    int v22 = 1;
  }
  unsigned int v23 = v22 << 31 >> 31;
  LOBYTE(v23) = vmaxvq_u8((uint8x16_t)v23);
  return v23 == 0;
}

BOOL CGBlitInternal::cgsBufferIsConstantValue_internal::TestLimitsRow<half>(float16x8_t *a1, unint64_t a2, float32x4_t *a3, uint8x16_t a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 >= 0x40)
  {
    int8x16_t v11 = 0uLL;
    int8x16_t v12 = 0uLL;
    float32x4_t v13 = *a3;
    float32x4_t v14 = a3[1];
    int8x16_t v15 = 0uLL;
    int8x16_t v16 = 0uLL;
    int8x16_t v17 = 0uLL;
    int8x16_t v18 = 0uLL;
    int8x16_t v19 = 0uLL;
    int8x16_t v20 = 0uLL;
    do
    {
      float16x8_t v21 = a1[2];
      float16x8_t v22 = a1[3];
      float32x4_t v23 = vcvt_hight_f32_f16(v22);
      float32x4_t v24 = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
      float32x4_t v25 = vcvt_hight_f32_f16(v21);
      float32x4_t v26 = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
      float16x8_t v28 = *a1;
      float16x8_t v27 = a1[1];
      a1 += 4;
      float32x4_t v29 = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
      float32x4_t v30 = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
      float32x4_t v31 = vcvt_hight_f32_f16(v27);
      float32x4_t v32 = vcvt_hight_f32_f16(v28);
      int8x16_t v12 = vorrq_s8(vorrq_s8(v12, (int8x16_t)vcgtq_f32(v32, v13)), (int8x16_t)vcgtq_f32(v14, v32));
      int8x16_t v16 = vorrq_s8(vorrq_s8(v16, (int8x16_t)vcgtq_f32(v31, v13)), (int8x16_t)vcgtq_f32(v14, v31));
      int8x16_t v15 = vorrq_s8(vorrq_s8(v15, (int8x16_t)vcgtq_f32(v30, v13)), (int8x16_t)vcgtq_f32(v14, v30));
      int8x16_t v11 = vorrq_s8(vorrq_s8(v11, (int8x16_t)vcgtq_f32(v29, v13)), (int8x16_t)vcgtq_f32(v14, v29));
      int8x16_t v17 = vorrq_s8(vorrq_s8(v17, (int8x16_t)vcgtq_f32(v26, v13)), (int8x16_t)vcgtq_f32(v14, v26));
      int8x16_t v18 = vorrq_s8(vorrq_s8(v18, (int8x16_t)vcgtq_f32(v25, v13)), (int8x16_t)vcgtq_f32(v14, v25));
      int8x16_t v19 = vorrq_s8(vorrq_s8(v19, (int8x16_t)vcgtq_f32(v24, v13)), (int8x16_t)vcgtq_f32(v14, v24));
      a2 -= 64;
      int8x16_t v20 = vorrq_s8(vorrq_s8(v20, (int8x16_t)vcgtq_f32(v23, v13)), (int8x16_t)vcgtq_f32(v14, v23));
    }
    while (a2 > 0x3F);
    a6 = (float32x4_t)vorrq_s8(vorrq_s8(v11, v17), vorrq_s8(v15, v19));
    a4 = (uint8x16_t)vorrq_s8((int8x16_t)a6, vorrq_s8(vorrq_s8(v12, v18), vorrq_s8(v16, v20)));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
  }
  if (!a2) {
    return 1;
  }
  if (a2 >= 0x20)
  {
    float32x4_t v33 = a3[1];
    float16x8_t v34 = a1[1];
    float32x4_t v35 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
    float32x4_t v36 = vcvt_hight_f32_f16(v34);
    float32x4_t v37 = vcvtq_f32_f16(*(float16x4_t *)a1->i8);
    a6 = vcvt_hight_f32_f16(*a1);
    int8x8_t v38 = vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v37, *a3), (int16x8_t)vcgtq_f32(a6, *a3)));
    *(int8x8_t *)a6.f32 = vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v33, v37), (int16x8_t)vcgtq_f32(v33, a6)));
    int8x8_t v39 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v35, *a3), (int16x8_t)vcgtq_f32(v36, *a3))), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v33, v35), (int16x8_t)vcgtq_f32(v33, v36))));
    *(int8x8_t *)v33.f32 = vzip1_s8(v39, v39);
    *(int8x8_t *)a6.f32 = vorr_s8(v38, *(int8x8_t *)a6.f32);
    *(int8x8_t *)v36.f32 = vzip1_s8(*(int8x8_t *)a6.f32, v39);
    int8x8_t v40 = vzip2_s8(v39, v39);
    *(int8x8_t *)a6.f32 = vzip2_s8(*(int8x8_t *)a6.f32, v40);
    a4 = (uint8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8(*(int8x8_t *)v36.f32, *(int8x8_t *)v33.f32), vorr_s8(*(int8x8_t *)a6.f32, v40))), 0x1FuLL));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
    a2 -= 32;
    if (!a2) {
      return 1;
    }
    a1 += 2;
  }
  if (a2 < 0x10) {
    goto LABEL_14;
  }
  float32x4_t v41 = a3[1];
  float32x4_t v42 = vcvtq_f32_f16(*(float16x4_t *)a1->i8);
  float32x4_t v43 = vcvt_hight_f32_f16(*a1);
  int8x16_t v44 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v42, *a3), (int16x8_t)vcgtq_f32(v43, *a3));
  a6 = (float32x4_t)vcgtq_f32(v41, v43);
  *(int8x8_t *)v44.i8 = vmovn_s16((int16x8_t)vorrq_s8(v44, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v41, v42), (int16x8_t)a6)));
  a4 = (uint8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(*(int8x8_t *)v44.i8, *(int8x8_t *)v44.i8), vzip2_s8(*(int8x8_t *)v44.i8, *(int8x8_t *)v44.i8))), 0x1FuLL));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0]) {
    return 0;
  }
  a2 -= 16;
  if (!a2) {
    return 1;
  }
  ++a1;
LABEL_14:
  if (a2 < 8) {
    goto LABEL_18;
  }
  a6 = vcvtq_f32_f16(*(float16x4_t *)a1->i8);
  a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcgtq_f32(a6, *a3), (int8x16_t)vcgtq_f32(a3[1], a6));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0]) {
    return 0;
  }
  a2 -= 8;
  if (!a2) {
    return 1;
  }
  a1 = (float16x8_t *)((char *)a1 + 8);
LABEL_18:
  if (a2 >= 4)
  {
    unsigned __int32 v45 = a1->i32[0];
    a1 = (float16x8_t *)((char *)a1 + 4);
    a6.i32[0] = v45;
    float32x2_t v46 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)a6.f32).u64[0];
    *(int8x8_t *)a4.i8 = vorr_s8((int8x8_t)vcgt_f32(v46, *(float32x2_t *)a3->f32), (int8x8_t)vcgt_f32(*(float32x2_t *)a3[1].f32, v46));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
    a2 -= 4;
  }
  if (!a2) {
    return 1;
  }
  if (a2 != 2) {
    _CGHandleAssert("operator()", 336, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "size == 2", "std::string::size_type size = %lu", a9, a10, a11, a2);
  }
  _H2 = a1->i16[0];
  __asm { FCVT            S2, H2 }
  int v54 = COERCE_FLOAT(a3->i64[0]) < _S2;
  if (COERCE_FLOAT(a3[1].i64[0]) > _S2) {
    int v54 = 1;
  }
  unsigned int v55 = v54 << 31 >> 31;
  LOBYTE(v55) = vmaxvq_u8((uint8x16_t)v55);
  return v55 == 0;
}

BOOL CGBlitInternal::cgsBufferIsConstantValue_internal::TestLimitsRow<unsigned short>(uint16x8_t *a1, unint64_t a2, uint16x8_t *a3, uint8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 >= 0x40)
  {
    uint16x8_t v9 = *a3;
    uint16x8_t v10 = a3[1];
    int8x16_t v11 = 0uLL;
    int8x16_t v12 = 0uLL;
    int8x16_t v13 = 0uLL;
    int8x16_t v14 = 0uLL;
    do
    {
      uint16x8_t v16 = a1[2];
      uint16x8_t v15 = a1[3];
      uint16x8_t v17 = *a1;
      uint16x8_t v18 = a1[1];
      a1 += 4;
      int8x16_t v12 = vorrq_s8(vorrq_s8(v12, (int8x16_t)vcgtq_u16(v18, v9)), (int8x16_t)vcgtq_u16(v10, v18));
      int8x16_t v11 = vorrq_s8(vorrq_s8(v11, (int8x16_t)vcgtq_u16(v17, v9)), (int8x16_t)vcgtq_u16(v10, v17));
      int8x16_t v13 = vorrq_s8(vorrq_s8(v13, (int8x16_t)vcgtq_u16(v16, v9)), (int8x16_t)vcgtq_u16(v10, v16));
      int8x16_t v14 = vorrq_s8(vorrq_s8(v14, (int8x16_t)vcgtq_u16(v15, v9)), (int8x16_t)vcgtq_u16(v10, v15));
      a2 -= 64;
    }
    while (a2 > 0x3F);
    a4 = (uint8x16_t)vorrq_s8(vorrq_s8(v11, v13), vorrq_s8(v12, v14));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
  }
  if (!a2) {
    return 1;
  }
  if (a2 >= 0x20)
  {
    a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vorr_s8(vmovn_s16((int16x8_t)vcgtq_u16(*a1, *a3)), vmovn_s16((int16x8_t)vcgtq_u16(a3[1], *a1)))), 0xFuLL)), vorrq_s8((int8x16_t)vcgtq_u16(a1[1], *a3), (int8x16_t)vcgtq_u16(a3[1], a1[1])));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
    a2 -= 32;
    if (!a2) {
      return 1;
    }
    a1 += 2;
  }
  if (a2 < 0x10) {
    goto LABEL_14;
  }
  a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcgtq_u16(*a1, *a3), (int8x16_t)vcgtq_u16(a3[1], *a1));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0]) {
    return 0;
  }
  a2 -= 16;
  if (!a2) {
    return 1;
  }
  ++a1;
LABEL_14:
  if (a2 < 8) {
    goto LABEL_18;
  }
  *(int8x8_t *)a4.i8 = vorr_s8((int8x8_t)vcgt_u16(*(uint16x4_t *)a3[1].i8, *(uint16x4_t *)a1->i8), (int8x8_t)vcgt_u16(*(uint16x4_t *)a1->i8, *(uint16x4_t *)a3->i8));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0]) {
    return 0;
  }
  a2 -= 8;
  if (!a2) {
    return 1;
  }
  a1 = (uint16x8_t *)((char *)a1 + 8);
LABEL_18:
  if (a2 >= 4)
  {
    int16x8_t v19 = (int16x8_t)vzip1q_s8(*(int8x16_t *)a3, *(int8x16_t *)a3);
    unsigned __int32 v30 = vmovn_s16(v19).u32[0];
    v19.i32[0] = (unsigned __int16)v30;
    v19.i32[1] = HIWORD(v30);
    unsigned __int32 v29 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a3[1], (int8x16_t)v19)).u32[0];
    v20.i32[0] = (unsigned __int16)v29;
    v20.i32[1] = HIWORD(v29);
    v21.i32[0] = a1->u16[0];
    v21.i32[1] = a1->u16[1];
    *(int8x8_t *)v19.i8 = vorr_s8((int8x8_t)vcgt_u32(v20, v21), (int8x8_t)vcgt_u32(v21, *(uint32x2_t *)v19.i8));
    HIWORD(v28) = v19.i16[2];
    LOWORD(v28) = v19.i16[0];
    v19.i32[0] = v28;
    uint16x8_t v22 = vmovl_u8(*(uint8x8_t *)v19.i8);
    v22.i8[1] = v22.i8[2];
    v22.i8[2] = v22.i8[4];
    v22.i8[3] = v22.i8[6];
    v22.i8[0] = vmaxvq_u8((uint8x16_t)v22.u32[0]);
    if (v22.i32[0]) {
      return 0;
    }
    a1 = (uint16x8_t *)((char *)a1 + 4);
    a2 -= 4;
  }
  if (!a2) {
    return 1;
  }
  if (a2 != 2) {
    _CGHandleAssert("operator()", 308, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "size == vectorSize", "size %lu did not match vectorSize (%lu)", a7, a8, a9, a2);
  }
  unsigned int v24 = a1->u16[0];
  int v26 = v24 < (unsigned __int16)a3[1].i64[0] || v24 > (unsigned __int16)a3->i64[0];
  int v27 = v26 << 31 >> 31;
  LOBYTE(v27) = vmaxvq_u8((uint8x16_t)(unsigned __int16)((__int16)((_WORD)v26 << 15) >> 15));
  return v27 == 0;
}

BOOL CGBlitInternal::cgsBufferIsConstantValue_internal::TestLimitsRow<unsigned char>(uint8x16_t *a1, unint64_t a2, uint8x16_t *a3, uint8x16_t a4, double a5, uint8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 >= 0x40)
  {
    uint8x16_t v11 = *a3;
    a6 = a3[1];
    int8x16_t v12 = 0uLL;
    int8x16_t v13 = 0uLL;
    int8x16_t v14 = 0uLL;
    int8x16_t v15 = 0uLL;
    do
    {
      uint8x16_t v17 = a1[2];
      uint8x16_t v16 = a1[3];
      uint8x16_t v18 = *a1;
      uint8x16_t v19 = a1[1];
      a1 += 4;
      int8x16_t v13 = vorrq_s8(v13, vorrq_s8((int8x16_t)vcgtq_u8(a6, v19), (int8x16_t)vcgtq_u8(v19, v11)));
      int8x16_t v12 = vorrq_s8(v12, vorrq_s8((int8x16_t)vcgtq_u8(a6, v18), (int8x16_t)vcgtq_u8(v18, v11)));
      int8x16_t v14 = vorrq_s8(v14, vorrq_s8((int8x16_t)vcgtq_u8(a6, v17), (int8x16_t)vcgtq_u8(v17, v11)));
      int8x16_t v15 = vorrq_s8(v15, vorrq_s8((int8x16_t)vcgtq_u8(a6, v16), (int8x16_t)vcgtq_u8(v16, v11)));
      a2 -= 64;
    }
    while (a2 > 0x3F);
    a4 = (uint8x16_t)vorrq_s8(vorrq_s8(v12, v14), vorrq_s8(v13, v15));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
  }
  if (!a2) {
    return 1;
  }
  if (a2 >= 0x20)
  {
    a6 = a1[1];
    a4 = (uint8x16_t)vorrq_s8(vorrq_s8((int8x16_t)vcgtq_u8(*a1, *a3), (int8x16_t)vcgtq_u8(a3[1], *a1)), vorrq_s8((int8x16_t)vcgtq_u8(a6, *a3), (int8x16_t)vcgtq_u8(a3[1], a6)));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
    a2 -= 32;
    if (!a2) {
      return 1;
    }
    a1 += 2;
  }
  if (a2 >= 0x10)
  {
    a6 = *a1;
    a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcgtq_u8(*a1, *a3), (int8x16_t)vcgtq_u8(a3[1], *a1));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
    a2 -= 16;
    if (!a2) {
      return 1;
    }
    ++a1;
  }
  if (a2 >= 8)
  {
    a6.i64[0] = a1->i64[0];
    *(int8x8_t *)a4.i8 = vorr_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a1->i8, *(uint8x8_t *)a3->i8), (int8x8_t)vcgt_u8(*(uint8x8_t *)a3[1].i8, *(uint8x8_t *)a1->i8));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0]) {
      return 0;
    }
    a2 -= 8;
    if (!a2) {
      return 1;
    }
    a1 = (uint8x16_t *)((char *)a1 + 8);
  }
  if (a2 < 4) {
    goto LABEL_21;
  }
  uint64_t v20 = *(void *)&vzip1_s8(*(int8x8_t *)a3->i8, *(int8x8_t *)a3->i8) & 0xFF00FF00FF00FFLL;
  unsigned __int32 v21 = a1->i32[0];
  a1 = (uint8x16_t *)((char *)a1 + 4);
  a6.i32[0] = v21;
  uint16x4_t v22 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)a6.i8).u64[0];
  int8x8_t v23 = vorr_s8((int8x8_t)vcgt_u16(v22, (uint16x4_t)v20), (int8x8_t)vcgt_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)a3[1].i8, (int8x8_t)v20) & 0xFF00FF00FF00FFLL), v22));
  v23.i8[1] = v23.i8[2];
  v23.i8[2] = v23.i8[4];
  v23.i8[3] = v23.i8[6];
  v23.i8[0] = vmaxvq_u8((uint8x16_t)v23.u32[0]);
  if (v23.i32[0]) {
    return 0;
  }
  a2 -= 4;
LABEL_21:
  if (!a2) {
    return 1;
  }
  if (a2 != 1)
  {
    uint8x16_t v24 = *a3;
    uint8x16_t v25 = a3[1];
    v31.i32[0] = a3->u8[0];
    v31.i32[1] = HIBYTE(a3->u16[0]);
    v32.i32[0] = v25.u8[0];
    v32.i32[1] = v25.u8[1];
    uint32x2_t v33 = (uint32x2_t)vand_s8(v32, (int8x8_t)0xFF000000FFLL);
    v32.i32[0] = a1->u8[0];
    v32.i32[1] = a1->u8[1];
    int8x8_t v34 = vorr_s8((int8x8_t)vcgt_u32((uint32x2_t)v32, (uint32x2_t)vand_s8(v31, (int8x8_t)0xFF000000FFLL)), (int8x8_t)vcgt_u32(v33, (uint32x2_t)v32));
    unint64_t v35 = v34.u8[0];
    BYTE1(v35) = v34.i8[4];
    v34.i8[0] = vmaxvq_u8((uint8x16_t)v35);
    if (v34.i32[0]) {
      return 0;
    }
    if (a2 != 2)
    {
      if (a2 != 3) {
        _CGHandleAssert("operator()", 308, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "size == vectorSize", "size %lu did not match vectorSize (%lu)", a9, a10, a11, a2 - 2);
      }
      a1 = (uint8x16_t *)((char *)a1 + 2);
      goto LABEL_24;
    }
    return 1;
  }
  uint8x16_t v24 = *a3;
  uint8x16_t v25 = a3[1];
LABEL_24:
  unsigned int v26 = a1->u8[0];
  int v28 = v26 > v24.u8[0] || v26 < v25.u8[0];
  int v29 = (v28 << 31 >> 31);
  LOBYTE(v29) = vmaxvq_u8((uint8x16_t)(v28 << 31 >> 31));
  return v29 == 0;
}

uint64_t (*CGApplyGainMapHeadRoom())(uint64_t result, uint64_t *a2, double a3, double a4)
{
  return CGBlitInternal::CGApplyGainMapHeadRoom<(CGBlitVariant)0>;
}

uint64_t (*CGBufIsConstantValue())(uint64_t a1, const void *a2, float *a3)
{
  return CGBlitInternal::CGBufIsConstantValue<(CGBlitVariant)0>;
}

uint64_t CGStyleCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return create_style_with_type(0, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CGStyleCreateShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGStyleCreateShadowWithColor(a1, 0, a3, a4, a5, a6, a7, a8);
}

unint64_t CGStyleCreateShadow2(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long double a9, long double a10, double a11)
{
  v22[0] = 0;
  v22[1] = 0x4046800000000000;
  v22[3] = 0x3FE5555555555555;
  v22[6] = 0x3FF0000000000000;
  if (result)
  {
    unint64_t v11 = result;
    if ((result & 0x8000000000000000) != 0) {
      Alphdouble a = CGTaggedColorGetAlpha(result, a2, a3, a4, a5, a6, a7, a8);
    }
    else {
      Alphdouble a = *(double *)(result + 8 * *(void *)(result + 56) + 56);
    }
    if (Alpha == 0.0)
    {
      return 0;
    }
    else
    {
      *(double *)&v22[2] = atan2(a10, a9) * 180.0 / 3.14159265 + 180.0;
      v22[4] = sqrt(a10 * a10 + a9 * a9);
      *(double *)&v22[5] = a11;
      return CGStyleCreateShadowWithColor((uint64_t)v22, v11, v16, v17, v18, v19, v20, v21);
    }
  }
  return result;
}

uint64_t CGStyleCreateFocusRing(uint64_t a1)
{
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  int v3 = DeviceRGB;
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4)
  {
    if (v4 != 1)
    {
      CGColorSpaceRelease(DeviceRGB);
      return 0;
    }
    unint64_t v5 = (const CGFloat *)&unk_185222448;
  }
  else
  {
    unint64_t v5 = (const CGFloat *)&CGStyleCreateFocusRing_focus_ring_color;
  }
  CGColorRef v6 = CGColorCreate(DeviceRGB, v5);
  uint64_t FocusRingWithColor = CGStyleCreateFocusRingWithColor(a1, v6, v7, v8, v9, v10, v11, v12);
  CGColorSpaceRelease(v3);
  if (v6) {
    CFRelease(v6);
  }
  return FocusRingWithColor;
}

uint64_t CGStyleCreateFocusRingWithColor(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  uint64_t style_with_type = create_style_with_type(2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (a2) {
    CFRetain(a2);
  }
  *(void *)(style_with_type + 24) = a2;
  *(_DWORD *)(style_with_type + 32) = 0;
  unsigned int v11 = *(_DWORD *)(a1 + 4);
  if (v11 > 1 || (*(_DWORD *)(style_with_type + 36) = v11, unsigned int v12 = *(_DWORD *)(a1 + 8), v12 >= 3))
  {
    CFRelease((CFTypeRef)style_with_type);
    return 0;
  }
  *(_DWORD *)(style_with_type + 40) = v12;
  *(float64x2_t *)(style_with_type + 48) = vmaxnmq_f64(vminnmq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)xmmword_1850CDE90), (float64x2_t)0);
  *(double *)(style_with_type + 64) = fmax(fmin(*(double *)(a1 + 32), 1.0), 0.0);
  long long v13 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(style_with_type + 88) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(style_with_type + 72) = v13;
  int v14 = *(_DWORD *)(a1 + 72);
  if (v14 < -1) {
    int v14 = -1;
  }
  *(_DWORD *)(style_with_type + 104) = v14;
  return style_with_type;
}

void CGStyleRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

double CGStyleCreateGaussianBlur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t style_with_type = create_style_with_type(3, a2, a3, a4, a5, a6, a7, a8);
  double result = fmax(fmin(*(double *)(a1 + 8), 1.79769313e308), 0.0);
  *(double *)(style_with_type + 40) = result;
  return result;
}

__n128 CGStyleCreateColorMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t style_with_type = create_style_with_type(4, a2, a3, a4, a5, a6, a7, a8);
  long long v11 = *(_OWORD *)(a1 + 16);
  long long v10 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(style_with_type + 32) = *(_OWORD *)a1;
  *(_OWORD *)(style_with_type + 48) = v11;
  *(_OWORD *)(style_with_type + 64) = v10;
  long long v12 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v13 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(style_with_type + 112) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(style_with_type + 128) = v12;
  *(_OWORD *)(style_with_type + 80) = v14;
  *(_OWORD *)(style_with_type + 96) = v13;
  long long v16 = *(_OWORD *)(a1 + 128);
  __n128 result = *(__n128 *)(a1 + 144);
  long long v17 = *(_OWORD *)(a1 + 112);
  *(void *)(style_with_type + 192) = *(void *)(a1 + 160);
  *(_OWORD *)(style_with_type + 160) = v16;
  *(__n128 *)(style_with_type + 176) = result;
  *(_OWORD *)(style_with_type + 144) = v17;
  return result;
}

CFTypeRef CGStyleRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

BOOL CGStyleEqualToStyle(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2)
  {
    int v5 = *(_DWORD *)(a1 + 20);
    if (v5 == *(_DWORD *)(a2 + 20))
    {
      BOOL result = CGColorEqualToColor(*(CGColorRef *)(a1 + 24), *(CGColorRef *)(a2 + 24));
      if (result)
      {
        switch(v5)
        {
          case 1:
            if (*(double *)(a1 + 40) != *(double *)(a2 + 40)
              || *(double *)(a1 + 48) != *(double *)(a2 + 48)
              || *(double *)(a1 + 56) != *(double *)(a2 + 56)
              || *(double *)(a1 + 64) != *(double *)(a2 + 64)
              || *(double *)(a1 + 72) != *(double *)(a2 + 72))
            {
              return 0;
            }
            double v6 = *(double *)(a1 + 80);
            double v7 = *(double *)(a2 + 80);
            goto LABEL_22;
          case 2:
            if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)
              || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
              || *(double *)(a1 + 48) != *(double *)(a2 + 48)
              || *(double *)(a1 + 56) != *(double *)(a2 + 56)
              || *(double *)(a1 + 64) != *(double *)(a2 + 64))
            {
              return 0;
            }
            BOOL result = CGRectEqualToRect(*(CGRect *)(a1 + 72), *(CGRect *)(a2 + 72));
            if (!result) {
              return result;
            }
            BOOL v8 = *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104);
            goto LABEL_23;
          case 3:
            double v6 = *(double *)(a1 + 40);
            double v7 = *(double *)(a2 + 40);
LABEL_22:
            BOOL v8 = v6 == v7;
LABEL_23:
            BOOL result = v8;
            break;
          case 4:
            uint64_t v9 = 40;
            do
            {
              double v10 = *(double *)(a1 + v9);
              double v11 = *(double *)(a2 + v9);
              BOOL result = v10 == v11;
              if (v10 != v11) {
                break;
              }
              BOOL v8 = v9 == 192;
              v9 += 8;
            }
            while (!v8);
            break;
          default:
            return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGStyleGetIdentifier(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

uint64_t CGStyleGetType(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 20);
  }
  return result;
}

uint64_t CGStyleGetDrawOrdering(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = *(unsigned int *)(a1 + 20);
  if ((result - 3) < 2) {
    return 0;
  }
  if (result != 1)
  {
    if (result != 2) {
      return 1;
    }
    uint64_t result = *(unsigned int *)(a1 + 40);
    if (result >= 3) {
      return 1;
    }
  }
  return result;
}

double CGStyleGetDrawBoundingBox(uint64_t a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v8 = a2;
  if (a1)
  {
    BOOL v9 = a2 == INFINITY || a3 == INFINITY;
    if (!v9 && a4 != 0.0 && a5 != 0.0)
    {
      if (a2 == -8.98846567e307 && a3 == -8.98846567e307 && a4 == 1.79769313e308 && a5 == 1.79769313e308)
      {
        return -8.98846567e307;
      }
      else
      {
        double v11 = 0.0;
        double v12 = 0.0;
        if (get_expansion(a1, &v11))
        {
          v13.origin.CGFloat x = v8;
          v13.origin.double y = a3;
          v13.size.CGFloat width = a4;
          v13.size.double height = a5;
          CGRect v14 = CGRectInset(v13, -v11, -v12);
          *(void *)&double v8 = (unint64_t)CGRectIntegral(v14);
        }
      }
    }
  }
  return v8;
}

uint64_t CGStyleGetData(uint64_t a1)
{
  if (a1) {
    return a1 + 32;
  }
  else {
    return 0;
  }
}

uint64_t CGStyleShouldUseCorrectShadowOffsets()
{
  return 1;
}

uint64_t CGStyleGetTypeID()
{
  if (kCGContextStyleContentEnd_block_invoke_once != -1) {
    dispatch_once(&kCGContextStyleContentEnd_block_invoke_once, &__block_literal_global_25_15979);
  }
  return CGStyleGetTypeID_style_type_id;
}

uint64_t CGStyleFilterContextDelegateCreate(uint64_t a1, uint64_t a2)
{
  if (CGStyleFilterContextDelegateCreate_once != -1) {
    dispatch_once_f(&CGStyleFilterContextDelegateCreate_once, 0, (dispatch_function_t)load_style_filter_context_delegate_creator);
  }
  int v4 = (uint64_t (*)(uint64_t, uint64_t))creator_16018;
  if (!creator_16018) {
    return 0;
  }

  return v4(a1, a2);
}

void load_style_filter_context_delegate_creator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = 0;
  double v10 = (const char **)&links;
  do
  {
    if (!strcmp("__CGStyleFilterContextDelegateCreate", *v10))
    {
      creator_16018 = (&links)[2 * v9 + 1];
      return;
    }
    ++v9;
    v10 += 2;
  }
  while (v9 != 7);

  CGPostError((uint64_t)"Failed to load style filter context delegate.", v11, v12, v13, v14, v15, v16, v17, a9);
}

void *PDFTextLayoutAddGlyphsWithPositions(void *result, const void *a2, uint64_t a3, unsigned __int16 *a4, _OWORD *a5, uint64_t a6, double a7)
{
  if (a2 && a7 != 0.0)
  {
    uint64_t v13 = result;
    uint64_t v14 = result[10];
    if (v14
      && (uint64_t v15 = *(void *)(v14 + 8), *(const void **)(v15 + 24) == a2)
      && *(double *)(v15 + 32) == a7
      && *(double *)(v15 + 40) == *(double *)a3
      && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v15 + 48), *(float64x2_t *)(a3 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(v15 + 64), *(float64x2_t *)(a3 + 24)))), 0xFuLL))) & 1) != 0&& *(double *)(v15 + 80) == *(double *)(a3 + 40))
    {
      return block_append_glyphs((uint64_t *)v15, a4, a5, a6);
    }
    else
    {
      uint64_t v16 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      *((double *)v16 + 4) = a7;
      CFRetain(a2);
      *((void *)v16 + 3) = a2;
      long long v18 = *(_OWORD *)(a3 + 16);
      long long v17 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)a3;
      *(_OWORD *)(v16 + 56) = v18;
      *(_OWORD *)(v16 + 72) = v17;
      block_append_glyphs((uint64_t *)v16, a4, a5, a6);
      uint64_t v19 = v13[10];
      uint64_t result = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
      CG::DisplayListShape *result = v19;
      result[1] = v16;
      v13[10] = result;
    }
  }
  return result;
}

void *block_append_glyphs(uint64_t *a1, unsigned __int16 *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = *a1 + a4;
  a1[1] = (uint64_t)malloc_type_realloc((void *)a1[1], 2 * v8, 0x1000040BDFB0063uLL);
  uint64_t result = malloc_type_realloc((void *)a1[2], 16 * v8, 0x1000040451B5BE8uLL);
  for (a1[2] = (uint64_t)result; v4; --v4)
  {
    int v11 = *a2++;
    __int16 v10 = v11;
    if (v11 != 0xFFFF)
    {
      uint64_t v12 = *a1;
      *(_WORD *)(a1[1] + 2 * *a1) = v10;
      *(_OWORD *)(a1[2] + 16 * v12) = *a3;
      ++*a1;
    }
    ++a3;
  }
  return result;
}

void layout_flush_block(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(void *)a2)
  {
    MEMORY[0x1F4188790](a1, a3);
    uint64_t v8 = (double *)((char *)&v42[-1] - v5 - 7);
    if (v7 <= 0xFFFFFFFFFFFFFFELL) {
      uint64_t v9 = (double *)((char *)&v42[-1] - v5 - 7);
    }
    else {
      uint64_t v9 = 0;
    }
    if (v7 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000042) {
      uint64_t v9 = (double *)malloc_type_malloc(16 * v6, 0x78F6B614uLL);
    }
    int advances = 0;
    font_info = (int *)get_font_info(*(void **)(a2 + 24));
    if (font_info) {
      double v11 = (double)font_info[2];
    }
    else {
      double v11 = 0.0;
    }
    if (*(void *)a2 == 1)
    {
      unint64_t v12 = 0;
      char v13 = 1;
      char v14 = 1;
LABEL_24:
      uint8x16_t v24 = &v9[2 * v12];
      *((unsigned char *)v24 + 8) = 1;
      *uint8x16_t v24 = 0.0;
      uint64_t v25 = PDFDocumentAddFont(a1[1], *(void *)(a2 + 24));
      layout_begin_run(a1, (float64x2_t *)(a2 + 40), *(double **)(a2 + 16), *(double *)(a2 + 32));
      if (v14 & 1) != 0 && (v13)
      {
        *(double *)(*(void *)(a1[9] + 8) + 64) = *v9 / 1000.0;
        uint64_t v27 = *(void *)a2;
        unsigned int v26 = *(const void **)(a2 + 8);
LABEL_69:
        PDFFontAddGlyphsToLayout(v25, (uint64_t)a1, v26, v27);
LABEL_70:
        if (v9 != v8) {
          free(v9);
        }
        return;
      }
      if ((v14 & 1) == 0)
      {
        *(void *)(*(void *)(a1[9] + 8) + 64) = 0;
        unint64_t v35 = *(void *)a2;
        if (!*(void *)a2) {
          goto LABEL_70;
        }
        unint64_t v36 = 0;
        unint64_t v37 = 0;
        do
        {
          if (v36 >= v35 - 1 || LOBYTE(v9[2 * v36 + 1]) == 0)
          {
            ++v36;
          }
          else
          {
            PDFFontAddGlyphsToLayout(v25, (uint64_t)a1, (const void *)(*(void *)(a2 + 8) + 2 * v37), v36 - v37 + 1);
            ++v36;
            layout_begin_run(a1, (float64x2_t *)(a2 + 40), (double *)(*(void *)(a2 + 16) + 16 * v36), *(double *)(a2 + 32));
            unint64_t v35 = *(void *)a2;
            unint64_t v37 = v36;
          }
        }
        while (v36 < v35);
        uint64_t v27 = v36 - v37;
        if (v36 == v37) {
          goto LABEL_70;
        }
        goto LABEL_68;
      }
      unint64_t v28 = *(void *)a2;
      uint64_t v29 = *(void *)a2 - 1;
      if (*(void *)a2 == 1)
      {
        double v32 = *v9;
LABEL_49:
        if (!a1)
        {
LABEL_54:
          if (!v28) {
            goto LABEL_70;
          }
          unint64_t v39 = 0;
          unint64_t v37 = 0;
          do
          {
            if (v39 >= v28 - 1 || LOBYTE(v9[2 * v39 + 1]) == 0)
            {
              ++v39;
            }
            else
            {
              PDFFontAddGlyphsToLayout(v25, (uint64_t)a1, (const void *)(*(void *)(a2 + 8) + 2 * v37), v39 - v37 + 1);
              if (a1)
              {
                uint64_t v41 = *(void *)(*(void *)(a1[9] + 8) + 72);
                if (v41) {
                  *(double *)(*(void *)(v41 + 8) + 8) = *(double *)(*(void *)(v41 + 8) + 8) - v9[2 * v39];
                }
              }
              ++v39;
              unint64_t v28 = *(void *)a2;
              unint64_t v37 = v39;
            }
          }
          while (v39 < v28);
          uint64_t v27 = v39 - v37;
          if (v39 == v37) {
            goto LABEL_70;
          }
LABEL_68:
          unsigned int v26 = (const void *)(*(void *)(a2 + 8) + 2 * v37);
          goto LABEL_69;
        }
      }
      else
      {
        uint64_t v30 = 1;
        uint64_t v31 = *(void *)a2 - 1;
        while (LOBYTE(v9[v30]))
        {
          v30 += 2;
          if (!--v31)
          {
            double v32 = *v9;
            uint32x2_t v33 = v9;
            do
            {
              double v34 = round(*v33 - v32);
              *uint32x2_t v33 = v34;
              if (v34 == 0.0) {
                *((unsigned char *)v33 + 8) = 0;
              }
              v33 += 2;
              --v29;
            }
            while (v29);
            goto LABEL_49;
          }
        }
        double v32 = 0.0;
        if (!a1) {
          goto LABEL_54;
        }
      }
      if (fabs(v32) > 0.00000596046448) {
        *(double *)(*(void *)(a1[9] + 8) + 64) = v32 / 1000.0;
      }
      goto LABEL_54;
    }
    v42[0] = v8;
    v42[1] = v42;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 3;
    char v14 = 1;
    char v13 = 1;
    while (1)
    {
      long long v18 = (double *)(*(void *)(a2 + 16) + v15 * 8);
      double v19 = *(double *)(a2 + 32);
      if (fabs((v18[3] - v18[1]) / v19 * 1000.0) <= 0.1)
      {
        double v21 = (v18[2] - *v18) / v19;
        CGFontGetGlyphAdvances(*(CGFontRef *)(a2 + 24), (const CGGlyph *)(*(void *)(a2 + 8) + v17 - 3), 1uLL, &advances);
        double v22 = round(-((double)(int)((double)(1000 * advances) / v11 + 0.5) - v21 * 1000.0) * 10.0) / 10.0;
        int8x8_t v23 = &v9[v15];
        if (fabs(v22) > 0.00000596046448)
        {
          *((unsigned char *)v23 + 8) = 1;
          v9[v15] = v22;
          if (v16) {
            goto LABEL_20;
          }
          goto LABEL_22;
        }
        *((unsigned char *)v23 + 8) = 0;
        v9[v15] = 0.0;
      }
      else
      {
        char v14 = 0;
        uint64_t v20 = &v9[v15];
        *((unsigned char *)v20 + 8) = 1;
        *uint64_t v20 = 0.0;
      }
      double v22 = 0.0;
      if (v16)
      {
LABEL_20:
        if (v22 != *v9) {
          char v13 = 0;
        }
      }
LABEL_22:
      ++v16;
      unint64_t v12 = *(void *)a2 - 1;
      v15 += 2;
      v17 += 2;
      if (v16 >= v12)
      {
        uint64_t v8 = (double *)v42[0];
        goto LABEL_24;
      }
    }
  }
}

void *layout_begin_run(void *result, float64x2_t *a2, double *a3, double a4)
{
  if (result)
  {
    uint64_t v6 = result;
    unint64_t v7 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *(void *)unint64_t v7 = 0;
    *((void *)v7 + 8) = 0;
    if (a2)
    {
      *(float64x2_t *)(v7 + 8) = vmulq_n_f64(*a2, a4);
      uint64_t v8 = v7 + 8;
      *(float64x2_t *)(v7 + 24) = vmulq_n_f64(a2[1], a4);
      *(float64x2_t *)(v7 + 40) = vaddq_f64(a2[2], vmlaq_n_f64(vmulq_n_f64(a2[1], a3[1]), *a2, *a3));
    }
    else
    {
      uint64_t v8 = 0;
    }
    *((void *)v7 + 7) = v8;
    *((void *)v7 + 9) = 0;
    uint64_t v9 = v6[9];
    uint64_t result = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    void *result = v9;
    result[1] = v7;
    v6[9] = result;
  }
  return result;
}

void *layout_append_data(void *result, char *__s2, int a3, const void *a4, uint64_t a5)
{
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = result[9];
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11)
    {
      unint64_t v12 = *(char **)v11;
      if (!*(void *)v11)
      {
LABEL_9:
        *(void *)uint64_t v11 = __s2;
        unint64_t v12 = __s2;
        goto LABEL_10;
      }
      if (!strcmp(*(const char **)v11, __s2)) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  layout_begin_run(v9, 0, 0, 0.0);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v11 = *(void *)(v9[9] + 8);
  *(void *)(v11 + 64) = v13;
  unint64_t v12 = *(char **)v11;
  if (!*(void *)v11) {
    goto LABEL_9;
  }
LABEL_10:
  if (strcmp(v12, __s2)) {
    _CGHandleAssert("layout_append_data", 380, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ContentStreams/PDFTextLayout.c", "strcmp(run->font, font) == 0", "\"%s\" != \"%s\"", v14, v15, v16, (char)v12);
  }
  uint64_t v17 = *(void *)(v11 + 72);
  if (v17 && (long long v18 = *(_DWORD **)(v17 + 8), *((double *)v18 + 1) == 0.0) && *v18 == a3)
  {
    char v19 = a3 == 2;
    uint64_t v20 = malloc_type_realloc(v18, ((*((void *)v18 + 2) + a5) << (a3 == 2)) + 24, 0xD80653D1uLL);
    uint64_t result = memcpy((char *)v20 + (v20[2] << v19) + 24, a4, a5 << v19);
    v20[2] += a5;
    *(void *)(*(void *)(v11 + 72) + 8) = v20;
  }
  else
  {
    size_t v21 = a5 << (a3 == 2);
    double v22 = malloc_type_calloc(1uLL, v21 + 24, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *(_DWORD *)double v22 = a3;
    v22[2] = a5;
    memcpy(v22 + 3, a4, v21);
    uint64_t v23 = *(void *)(v11 + 72);
    uint64_t result = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    void *result = v23;
    result[1] = v22;
    *(void *)(v11 + 72) = result;
  }
  return result;
}

void emit_sequence(unsigned char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)a2 == 1)
  {
    uint64_t v8 = "%A";
  }
  else
  {
    if (*(_DWORD *)a2 != 2) {
      abort();
    }
    uint64_t v8 = "%G";
  }
  PDFWriterPrintf(a1, (uint64_t)v8, a3, a4, a5, a6, a7, a8, *(void *)(a2 + 16));
}

uint64_t get_mask_table(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (get_mask_table_predicate != -1) {
    dispatch_once(&get_mask_table_predicate, &__block_literal_global_16059);
  }
  uint64_t result = get_mask_table_deep_mask_table;
  if (!get_mask_table_deep_mask_table) {
    _CGHandleAssert("get_mask_table", 78, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/deep-mask-copy.c", "deep_mask_table != NULL", "deep mask table allocation failed", a6, a7, a8, vars0);
  }
  return result;
}

char *gamma_table_create(long double a1)
{
  pthread_mutex_lock(&gamma_table_create_mutex);
  unsigned int v2 = (char *)gamma_table_create_gamma_table;
  if (!gamma_table_create_gamma_table || *(double *)(gamma_table_create_gamma_table + 8) != a1)
  {
    unsigned int v2 = (char *)malloc_type_malloc(0x1018uLL, 0x1000040D6031E3CuLL);
    uint64_t v3 = 0;
    *(_DWORD *)unsigned int v2 = 1;
    *((long double *)v2 + 1) = a1;
    uint64x2_t v17 = (uint64x2_t)vdupq_n_s64(0x401uLL);
    uint64x2_t v4 = (uint64x2_t)xmmword_1850CD8A0;
    int64x2_t v15 = vdupq_n_s64(2uLL);
    do
    {
      int64x2_t v21 = (int64x2_t)v4;
      unsigned __int8 v19 = vmovn_s64((int64x2_t)vcgtq_u64(v17, v4)).u8[0];
      double v5 = pow((double)(int)v3 * 0.0009765625, a1);
      int32x2_t v6 = vmin_s32((int32x2_t)__PAIR64__(vcvtd_n_s64_f64(pow((double)((int)v3 + 1) * 0.0009765625, a1), 0xAuLL), vcvtd_n_s64_f64(v5, 0xAuLL)), (int32x2_t)0x7F0000007FLL);
      if (v19) {
        *(_WORD *)&v2[2 * v3 + 16] = v6.i16[0];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x401uLL), *(uint64x2_t *)&v21)).i32[1]) {
        *(_WORD *)&v2[2 * v3 + 18] = v6.i16[2];
      }
      v3 += 2;
      uint64x2_t v4 = (uint64x2_t)vaddq_s64(v21, v15);
    }
    while (v3 != 1026);
    uint64_t v7 = 0;
    uint64x2_t v8 = (uint64x2_t)xmmword_1850CD8A0;
    uint64_t v9 = v2 + 2068;
    int64x2_t v16 = vdupq_n_s64(2uLL);
    uint64x2_t v18 = (uint64x2_t)vdupq_n_s64(0x401uLL);
    double v10 = 1.0 / a1;
    do
    {
      unsigned __int8 v20 = vmovn_s64((int64x2_t)vcgtq_u64(v18, v8)).u8[0];
      int64x2_t v22 = (int64x2_t)v8;
      double v11 = pow((double)(int)v7 * 0.0009765625, v10);
      int32x2_t v12 = vmin_s32((int32x2_t)__PAIR64__(vcvtd_n_s64_f64(pow((double)((int)v7 + 1) * 0.0009765625, v10), 0xAuLL), vcvtd_n_s64_f64(v11, 0xAuLL)), (int32x2_t)0x7F0000007FLL);
      if (v20) {
        *(v9 - 1) = v12.i16[0];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x401uLL), *(uint64x2_t *)&v22)).i32[1]) {
        *uint64_t v9 = v12.i16[2];
      }
      v7 += 2;
      uint64x2_t v8 = (uint64x2_t)vaddq_s64(v22, v16);
      v9 += 2;
    }
    while (v7 != 1026);
    uint64_t v13 = (void *)gamma_table_create_gamma_table;
    if (gamma_table_create_gamma_table
      && atomic_fetch_add_explicit((atomic_uint *volatile)gamma_table_create_gamma_table, 0xFFFFFFFF, memory_order_relaxed) == 1)
    {
      free(v13);
    }
    gamma_table_create_gamma_table = (uint64_t)v2;
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)v2, 1u, memory_order_relaxed);
  pthread_mutex_unlock(&gamma_table_create_mutex);
  return v2;
}

int64x2_t __get_mask_table_block_invoke()
{
  CFDictionaryRef v0 = malloc_type_malloc(0x1004uLL, 0x10000401CB32089uLL);
  uint64_t v1 = 0;
  get_mask_table_deep_mask_table = (uint64_t)v0;
  int32x4_t v2 = (int32x4_t)xmmword_1850CDC50;
  uint32x4_t v3 = (uint32x4_t)vdupq_n_s32(0x80808081);
  v4.i64[0] = 0x400000004;
  v4.i64[1] = 0x400000004;
  do
  {
    unsigned long long v5 = *(_OWORD *)&vshlq_n_s32(v2, 0xAuLL) | __PAIR128__(0x7F0000007FLL, 0x7F0000007FLL);
    *(int16x4_t *)&v0[v1] = vshrn_n_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)&v5, *(uint32x2_t *)v3.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v5, v3)), 7uLL);
    int32x4_t v2 = vaddq_s32(v2, v4);
    v1 += 4;
  }
  while (v1 != 256);
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = v6 + 1;
    unsigned int v8 = (((v6 + 1) >> 1) + 0x40000) / ((int)v6 + 1);
    if (v8 >= 0x7FFF) {
      LOWORD(v8) = 0x7FFF;
    }
    v0[v6++ + 257] = v8;
  }
  while (v7 != 255);
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = v9 + 1;
    unsigned int v11 = 0x100000u / ((int)v9 + 1);
    if (v11 >= 0x7FFF) {
      LOWORD(v11) = 0x7FFF;
    }
    v0[v9++ + 513] = v11;
  }
  while (v10 != 1024);
  uint64_t v12 = 0;
  int64x2_t result = (int64x2_t)xmmword_1850CD8A0;
  unsigned int v14 = 767;
  uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(0x401uLL);
  int64x2_t v16 = vdupq_n_s64(2uLL);
  do
  {
    if (vmovn_s64((int64x2_t)vcgtq_u64(v15, (uint64x2_t)result)).u8[0]) {
      LOBYTE(v0[v12 + 1537]) = (v14 - 255) >> 10;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x401uLL), *(uint64x2_t *)&result)).i32[1]) {
      HIBYTE(v0[v12 + 1537]) = v14 >> 10;
    }
    ++v12;
    int64x2_t result = vaddq_s64(result, v16);
    v14 += 510;
  }
  while (v12 != 513);
  return result;
}

void CGAnalyticsSendPDFDocumentGetNumberOfPagesEvent()
{
  CFDictionaryRef v0 = (void *)MEMORY[0x18532AD60]();
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentGetNumberOfPages");
}

void CGAnalyticsSendPDFDocumentGetCatalogEvent()
{
  CFDictionaryRef v0 = (void *)MEMORY[0x18532AD60]();
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentGetCatalog");
}

void __CGAnalyticsSendCreatePDFImageEvent_block_invoke()
{
  CGAnalyticsSendCreatePDFImageEvent_filterNameToEnumMapping = (uint64_t)&unk_1ED0AD978;
}

void std::vector<std::pair<std::shared_ptr<PDFPageNode>,unsigned long>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v1 = *a1;
  int32x4_t v2 = (char *)**a1;
  if (v2)
  {
    int32x4_t v4 = (char *)v1[1];
    unsigned long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 2);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:fe180100](v6);
        }
        v4 -= 24;
      }
      while (v4 != v2);
      unsigned long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::shared_ptr<PDFPageNode>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v1 = *a1;
  int32x4_t v2 = (char *)**a1;
  if (v2)
  {
    int32x4_t v4 = (char *)v1[1];
    unsigned long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:fe180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      unsigned long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void PDFPageTree::addNode(PDFPageTree *this, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v9 = (char *)a2[4];
  unsigned int v8 = (std::__shared_weak_count *)a2[5];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)this = v9;
  *((void *)this + 1) = v8;
  if (!v9 || *((void *)v9 + 2) == 8)
  {
    uint64_t v10 = operator new(0x70uLL);
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = &unk_1ED095510;
    v10[3] = PDFXRefTableAddObject(*(void **)(*a2 + 464));
    uint64_t v9 = (char *)(v10 + 3);
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 6) = 0u;
    *(void *)&long long v11 = v10 + 3;
    *((void *)&v11 + 1) = v10;
    long long v30 = v11;
    *(_OWORD *)this = v11;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:fe180100](v8);
    }
    uint64_t v12 = (char **)a2[3];
    if (!v12) {
      operator new();
    }
    uint64_t v13 = v12[1];
    unint64_t v14 = (unint64_t)v12[2];
    if ((unint64_t)v13 < v14)
    {
      *(void *)uint64_t v13 = v9;
      *((void *)v13 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
      }
      uint64x2_t v15 = v13 + 16;
      v12[1] = v13 + 16;
      goto LABEL_29;
    }
    uint64_t v16 = (v13 - *v12) >> 4;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v18 = v14 - (void)*v12;
    if (v18 >> 3 > v17) {
      unint64_t v17 = v18 >> 3;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19 >> 60) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    unsigned __int8 v20 = (char *)operator new(16 * v19);
    int64x2_t v21 = &v20[16 * v16];
    int64x2_t v22 = &v20[16 * v19];
    *(_OWORD *)int64x2_t v21 = v30;
    uint64x2_t v15 = v21 + 16;
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
    uint8x16_t v24 = *v12;
    uint64_t v23 = v12[1];
    if (v23 == *v12)
    {
      *uint64_t v12 = v21;
      v12[1] = v15;
      v12[2] = v22;
      if (!v24) {
        goto LABEL_29;
      }
    }
    else
    {
      do
      {
        long long v25 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v21 - 1) = v25;
        v21 -= 16;
        *(void *)uint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
      }
      while (v23 != v24);
      unsigned int v26 = *v12;
      uint8x16_t v24 = v12[1];
      *uint64_t v12 = v21;
      v12[1] = v15;
      v12[2] = v22;
      if (v24 != v26)
      {
        do
        {
          uint64_t v27 = (std::__shared_weak_count *)*((void *)v24 - 1);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:fe180100](v27);
          }
          v24 -= 16;
        }
        while (v24 != v26);
        uint8x16_t v24 = v26;
      }
      if (!v24) {
        goto LABEL_29;
      }
    }
    operator delete(v24);
    uint64_t v9 = *(char **)this;
    uint64_t v10 = (void *)*((void *)this + 1);
LABEL_29:
    v12[1] = v15;
    if (v10) {
      atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
    }
    unint64_t v28 = (std::__shared_weak_count *)a2[5];
    a2[4] = v9;
    a2[5] = v10;
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:fe180100](v28);
    }
  }
  uint64_t v29 = *((void *)v9 + 2);
  *((void *)v9 + 2) = v29 + 1;
  *(void *)&v9[8 * v29 + 24] = a3;
  *((void *)v9 + 1) += a4;
}

void sub_184FBAF5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v2);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PDFPageNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED095510;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18532A2A0);
}

void std::__shared_ptr_emplace<PDFPageNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED095510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

const void *PDFPageTree::getObjectNumberForPageNumber(CFDictionaryRef *this, const void *a2)
{
  if (!a2) {
    return 0;
  }
  Value = CFDictionaryGetValue(this[2], a2);
  if (!Value)
  {
    Value = (const void *)PDFXRefTableAddObject(*((void **)*this + 58));
    CFDictionarySetValue(this[2], a2, Value);
  }
  return Value;
}

void std::vector<std::pair<std::shared_ptr<PDFPageNode>,unsigned long>>::push_back[abi:fe180100](char **a1, uint64_t a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)*a1) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    uint64_t v10 = 3 * v8;
    long long v11 = (char *)operator new(24 * v8);
    uint64_t v12 = &v11[24 * v7];
    uint64_t v13 = &v11[8 * v10];
    *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((void *)v12 + 2) = *(void *)(a2 + 16);
    uint64_t v6 = v12 + 24;
    unint64_t v14 = *a1;
    uint64x2_t v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        long long v16 = *(_OWORD *)(v15 - 24);
        v15 -= 24;
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        *(void *)uint64x2_t v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v12 + 2) = *((void *)v15 + 2);
      }
      while (v15 != v14);
      uint64x2_t v15 = *a1;
      unint64_t v17 = a1[1];
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
      while (v17 != v15)
      {
        uint64_t v18 = (std::__shared_weak_count *)*((void *)v17 - 2);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:fe180100](v18);
        }
        v17 -= 24;
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(v4 + 16) = *(void *)(a2 + 16);
    uint64_t v6 = (char *)(v4 + 24);
  }
  a1[1] = v6;
}

uint64_t provider_for_destination_unlock(uint64_t *a1)
{
  return CGDataProviderUnlock(*a1);
}

uint64_t provider_for_destination_lock(uint64_t *a1)
{
  return CGDataProviderLock(*a1);
}

void *provider_for_destination_rewind(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *result;
  if (!*result) {
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", a6, a7, a8, v11);
  }
  if ((*(_DWORD *)(v8 + 20) | 2) != 3) {
    _CGHandleAssert("provider_for_destination_rewind", 678, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "", "Unimplemented", a6, a7, a8, v11);
  }
  unint64_t v9 = result;
  uint64_t v10 = *(uint64_t (**)(void))(v8 + 64);
  if (v10) {
    int64x2_t result = (void *)v10(*(void *)(v8 + 24));
  }
  *(unsigned char *)(v8 + 261) = 0;
  v9[85] = 0;
  v9[44] = 0;
  return result;
}

unint64_t provider_for_destination_skip_forward(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
  uint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v5, v6, v7, v8, v9, v10, v11);
  memcpy(__dst, (const void *)(a1 + 360), sizeof(__dst));
  unint64_t v20 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v13, v14, v15, v16, v17, v18, v19);
  if ((a2 & 0x8000000000000000) != 0) {
    _CGHandleAssert("provider_for_destination_skip_forward", 632, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "count >= 0", "count = %lld", v21, v22, v23, a2);
  }
  uint64_t v24 = v20;
  unint64_t v25 = byte_count_to_byte_count(v20, *(void *)(a1 + 664), *(void *)(a1 + 672), *(void *)(a1 + 680), BitsPerPixel, *(void *)(a1 + 336), a2, v23);
  uint64_t v26 = CGDataProviderSkipForwardInternal(v4, v25);
  uint64_t v30 = v26;
  if (v26 < 0) {
    _CGHandleAssert("provider_for_destination_skip_forward", 645, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "skipped >= 0", "skipped = %lld", v27, v28, v29, v26);
  }
  if (v26 != v25) {
    a2 = byte_count_to_byte_count(BitsPerPixel, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), v24, *(void *)(a1 + 664), v26, v29);
  }
  *(void *)(a1 + 352) += v30;
  *(void *)(a1 + 680) += a2;
  return a2;
}

unint64_t provider_for_destination_get_bytes(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 724)) {
    _CGHandleAssert("provider_for_destination_get_bytes", 619, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "info->src_provider_uses_random_access == false", "", a6, a7, a8, vars0);
  }

  return provider_for_destination_get_bytes_at_position_inner(a1, a2, 0, a3, 1, a6, a7, a8);
}

void CGPDFXRefTableRelease(uint64_t a1)
{
  if (a1)
  {
    int32x4_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      do
      {
        xref_table_release(v2[1]);
        int32x4_t v2 = (void *)*v2;
      }
      while (v2);
      uint32x4_t v3 = *(void **)(a1 + 8);
      if (v3)
      {
        do
        {
          uint64_t v4 = (void *)*v3;
          free(v3);
          uint32x4_t v3 = v4;
        }
        while (v4);
      }
    }
    pdf_object_scanner_release(*(uint64_t **)(a1 + 16));
    free((void *)a1);
  }
}

void xref_section_list_release(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    int32x4_t v2 = a1;
    do
    {
      uint32x4_t v3 = (void **)v2[1];
      if (v3)
      {
        free(v3[2]);
        free(v3);
      }
      int32x4_t v2 = (void *)*v2;
    }
    while (v2);
    do
    {
      uint64_t v4 = (void *)*v1;
      free(v1);
      uint64_t v1 = v4;
    }
    while (v4);
  }
}

uint64_t read_integer_16236(uint64_t a1, unint64_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = *a3;
  if (*a3 == 48)
  {
    uint64_t v12 = *(void *)(a1 + 120);
    do
    {
      if (!v12)
      {
        if (!CGPDFSourceRefill(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          unint64_t v14 = 0;
LABEL_18:
          unsigned int v11 = -1;
LABEL_19:
          *a2 = v14;
          *a3 = v11;
          return 1;
        }
        uint64_t v12 = *(void *)(a1 + 120);
      }
      --v12;
      uint64_t v13 = *(unsigned __int8 **)(a1 + 128);
      *(void *)(a1 + 120) = v12;
      *(void *)(a1 + 128) = v13 + 1;
      unsigned int v11 = *v13;
    }
    while (v11 == 48);
  }
  if (v11 - 48 > 9)
  {
    unint64_t v14 = 0;
    goto LABEL_19;
  }
  unint64_t v14 = 0;
  while (v14 <= 0xCCCCCCCCCCCCCCBLL)
  {
    unint64_t v14 = 10 * v14 + v11 - 48;
    uint64_t v15 = *(void *)(a1 + 120);
    if (!v15)
    {
      if (!CGPDFSourceRefill(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8)) {
        goto LABEL_18;
      }
      uint64_t v15 = *(void *)(a1 + 120);
    }
    uint64_t v16 = *(unsigned __int8 **)(a1 + 128);
    *(void *)(a1 + 120) = v15 - 1;
    *(void *)(a1 + 128) = v16 + 1;
    unsigned int v11 = *v16;
    if (v11 - 48 >= 0xA) {
      goto LABEL_19;
    }
  }
  return 0;
}

void xref_table_release(uint64_t a1)
{
  if (a1)
  {
    xref_section_list_release(*(void **)(a1 + 40));
    int32x4_t v2 = *(const void **)(a1 + 16);
    if (v2) {
      CFRelease(v2);
    }
    CGPDFXRefStreamRelease(*(void *)(a1 + 32));
    free((void *)a1);
  }
}

void *CGPDFXRefTableCreateByScanningObjects(const void **a1, const void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v4) {
    return v4;
  }
  *(void *)uint64_t v4 = a1;
  uint64_t v5 = pdf_object_scanner_create_with_xref(a1, 0);
  *((void *)v4 + 2) = v5;
  if (!v5) {
    goto LABEL_70;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x30uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v6
    || (uint64_t v7 = *((void *)v4 + 1),
        uint64_t v8 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL),
        *uint64_t v8 = v7,
        v8[1] = v6,
        *((void *)v4 + 1) = v8,
        uint64_t v9 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL),
        __CFSetLastAllocationEventName(),
        !v9))
  {
LABEL_70:
    CGPDFXRefTableRelease((uint64_t)v4);
    return 0;
  }
  uint64_t v10 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  *uint64_t v10 = 0;
  v10[1] = v9;
  v6[5] = v10;
  uint64_t v17 = *((void *)v4 + 2);
  if (v17) {
    uint64_t v18 = *(void **)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  CGPDFSourceSetPosition((uint64_t)v18, 0, v11, v12, v13, v14, v15, v16);
  unint64_t v26 = 0;
  unint64_t v27 = 0;
LABEL_9:
  uint64_t v28 = v18[15];
  while (v28)
  {
LABEL_13:
    --v28;
    uint64_t v29 = (unsigned __int8 *)v18[16];
    uint64_t v30 = v29 + 1;
    v18[15] = v28;
    v18[16] = v29 + 1;
    int v31 = *v29;
    if (v31 == 13 || v31 == 10)
    {
      do
      {
        if (!v28)
        {
          if (!CGPDFSourceRefill((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25)) {
            goto LABEL_45;
          }
          uint64_t v28 = v18[15];
          uint64_t v30 = (unsigned __int8 *)v18[16];
        }
        v18[15] = --v28;
        v18[16] = v30 + 1;
        uint64_t v19 = *v30;
        BOOL v33 = v19 == 10 || v19 == 13;
        ++v30;
      }
      while (v33);
      CGPDFSourceUngetc(v18, v19);
      uint64_t v40 = v18[11];
      if (v18[18])
      {
        uint64_t v41 = v18[24];
        v40 += v18[15];
      }
      else
      {
        uint64_t v41 = v18[16];
      }
      uint64_t v42 = v41 - v40;
      uint64_t v43 = v18[14];
      *(void *)&v84[0] = 0;
      if (read_integer(v18, (unint64_t *)v84, v34, v35, v36, v37, v38, v39))
      {
        unint64_t v44 = *(void *)&v84[0];
        if ((*(void *)&v84[0] & 0x8000000000000000) == 0)
        {
          *(void *)&v84[0] = 0;
          if (read_integer(v18, (unint64_t *)v84, v20, v21, v22, v23, v24, v25))
          {
            uint64_t v81 = *(void *)&v84[0];
            if ((*(void *)&v84[0] & 0x8000000000000000) == 0)
            {
              CGPDFSourceSkipWhitespace(v18, v19, v20, v21, v22, v23, v24, v25);
              if (CGPDFSourceMatch((uint64_t)v18, (uint64_t)"obj", v45, v46, v47, v48, v49, v50)
                && (uint64_t)v44 <= 10000000)
              {
                if (v44 < v27)
                {
                  float16x8_t v51 = (_WORD *)v9[2];
                  goto LABEL_40;
                }
                do
                  unint64_t v27 = 2 * v27 + 7;
                while (v44 >= v27);
                unsigned int v52 = malloc_type_realloc(v9, 8 * v27 + 24, 0x5CC96690uLL);
                if (!v52) {
                  goto LABEL_70;
                }
                uint64_t v9 = v52;
                *(void *)(v6[5] + 8) = v52;
                float16x8_t v51 = malloc_type_realloc(*((void **)v52 + 2), 2 * v27, 0x1000040BDFB0063uLL);
                if (!v51) {
                  goto LABEL_70;
                }
                v9[2] = v51;
LABEL_40:
                if (v26 <= v44)
                {
                  do
                  {
                    v51[v26] = 0;
                    v9[v26++ + 3] = 0;
                  }
                  while (v26 <= v44);
                  unint64_t v26 = v44 + 1;
                }
                if (v81 >= (unsigned __int16)v51[v44])
                {
                  v51[v44] = v81;
                  v9[v44 + 3] = v42 + v43;
                }
              }
            }
          }
        }
      }
      goto LABEL_9;
    }
  }
  if (CGPDFSourceRefill((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25))
  {
    uint64_t v28 = v18[15];
    goto LABEL_13;
  }
LABEL_45:
  v9[1] = v26;
  *uint64_t v6 = v26;
  if (a2)
  {
    v6[2] = a2;
    CFRetain(a2);
    return v4;
  }
  uint64_t v82 = 0;
  uint64_t v53 = *((void *)v4 + 2);
  if (!v53)
  {
    int v54 = 0;
    goto LABEL_52;
  }
  int v54 = *(void **)(v53 + 8);
  if (!v54)
  {
LABEL_52:
    uint64_t v55 = 0;
    goto LABEL_53;
  }
  uint64_t v55 = v54[2];
  if (v55 == -1) {
    _CGHandleAssert("CGPDFSourceGetLength", 179, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->length != (pdf_off_t)-1", "source length would overflow", v23, v24, v25, v80);
  }
LABEL_53:
  CGPDFSourceSetPosition((uint64_t)v54, v55, v20, v21, v22, v23, v24, v25);
  while (2)
  {
    if ((CGPDFSourceReverseSearch(v54, "trailer", " \n\r", " \n\r<", &v82) & 1) == 0)
    {
      v6[2] = 0;
LABEL_69:
      pdf_error("missing or invalid cross-reference trailer.");
      goto LABEL_70;
    }
    uint64_t v62 = v82;
    *(void *)CGRect v85 = 0;
    memset(v84, 0, sizeof(v84));
    CFTypeRef cf = 0;
    CGPDFSourceSetPosition(*(void *)(*((void *)v4 + 2) + 8), v82 + 7, v56, v57, v58, v59, v60, v61);
    if (!read_dictionary(*((uint64_t **)v4 + 2), &cf, v63, v64, v65, v66, v67, v68)) {
      goto LABEL_65;
    }
    Unresolveduint64_t Object = CGPDFDictionaryGetUnresolvedObject((uint64_t)cf, "Root");
    if (!UnresolvedObject
      || *((_DWORD *)UnresolvedObject + 2) != 10
      || (CGPDFXRefTableGetObject((uint64_t)v4, *((void *)UnresolvedObject + 2), *((void *)UnresolvedObject + 3), (uint64_t)v84) & 1) == 0|| DWORD2(v84[0]) != 8)
    {
      CFTypeRef v78 = cf;
      if (cf) {
LABEL_64:
      }
        CFRelease(v78);
LABEL_65:
      CGPDFSourceSetPosition((uint64_t)v54, v62, v69, v70, v71, v72, v73, v74);
      continue;
    }
    break;
  }
  double v76 = *(const void **)v85;
  double v77 = CGPDFDictionaryGetUnresolvedObject(*(uint64_t *)v85, "Pages");
  if (v76) {
    CFRelease(v76);
  }
  CFTypeRef v78 = cf;
  if (!v77)
  {
    if (cf) {
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  v6[2] = cf;
  if (!v78) {
    goto LABEL_69;
  }
  return v4;
}

CFStringRef cache_copy_debug_description(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<CGColorTransformCache %p>", a1);
}

CFStringRef cache_copy_format_description(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<CGColorTransformCache %p>", a1);
}

double CGGStateGetFlatness(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 144) + 8);
}

double CGGStateGetSmoothness(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 144) + 16);
}

uint64_t CGGStateGetFillOverprint(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 144) + 24);
}

uint64_t CGGStateGetStrokeOverprint(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 144) + 25);
}

uint64_t CGGStateGetOverprintMode(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 144) + 28);
}

uint64_t CGGStateGetBlackGeneration(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 144) + 32);
}

uint64_t CGGStateGetUndercolorRemoval(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 144) + 40);
}

uint64_t CGGStateGetTransferFunctions()
{
  return 0;
}

void *CGMetalContextCreate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7)
{
  if (!a1) {
    return 0;
  }
  if (metal_context_vtable_once != -1) {
    dispatch_once(&metal_context_vtable_once, &__block_literal_global_16330);
  }
  uint64_t v14 = metal_context_vtable_vtable;
  if (!metal_context_vtable_vtable) {
    return 0;
  }
  uint64_t v15 = malloc_type_malloc(0x38uLL, 0x2062DE7BuLL);
  *uint64_t v15 = a2;
  v15[1] = a3;
  v15[2] = CFRetain(a1);
  v15[3] = a4;
  v15[4] = a5;
  if (a6) {
    CFRetain(a6);
  }
  v15[5] = a6;
  *((_DWORD *)v15 + 12) = a7;
  uint64_t v18 = (void *)CGContextCreateWithDelegateAndInfo(0, 10, 0, 0, (uint64_t)v15, (uint64_t)metal_context_finalize, v16, v17);
  uint64_t v19 = (*(uint64_t (**)(void *, void))(v14 + 8))(v15, 0);
  v18[5] = v19;
  if (!v19)
  {
    CFRelease(v18);
    return 0;
  }
  return v18;
}

void metal_context_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8)
      {
        uint64_t v9 = *(const void **)(v8 + 16);
        if (v9) {
          CFRelease(v9);
        }
        CGColorSpaceRelease(*(CGColorSpaceRef *)(v8 + 40));
        free((void *)v8);
      }
    }
    else
    {
      handle_invalid_context((char)"metal_context_finalize", a1, a3, a4, a5, a6, a7, a8);
    }
  }
}

void *__metal_context_vtable_block_invoke()
{
  int64x2_t result = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 1);
  if (result)
  {
    int64x2_t result = dlsym(result, "CAMetalContextVTable");
    metal_context_vtable_vtable = (uint64_t)result;
  }
  return result;
}

void CGMetalContextSetDisplayMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_16330);
      uint64_t v8 = a1;
    }
    uint64_t v9 = *(void (**)(uint64_t))(metal_context_vtable_vtable + 16);
    uint64_t v10 = *(void *)(v8 + 40);
    v9(v10);
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextSetDisplayMask", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGMetalContextGetDisplayMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_16330);
      uint64_t v8 = a1;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t))(metal_context_vtable_vtable + 24);
    uint64_t v10 = *(void *)(v8 + 40);
    return v9(v10);
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextGetDisplayMask", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGMetalContextSetGPURegistryID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_16330);
      uint64_t v8 = a1;
    }
    uint64_t v9 = *(void (**)(uint64_t))(metal_context_vtable_vtable + 48);
    uint64_t v10 = *(void *)(v8 + 40);
    v9(v10);
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextSetGPURegistryID", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGMetalContextGetGPURegistryID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_16330);
      uint64_t v8 = a1;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t))(metal_context_vtable_vtable + 56);
    uint64_t v10 = *(void *)(v8 + 40);
    return v9(v10);
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextGetGPURegistryID", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

uint64_t CGMetalContextGetWidth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10) {
    return **(void **)(a1 + 32);
  }
  handle_invalid_context((char)"CGMetalContextGetWidth", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetHeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10) {
    return *(void *)(*(void *)(a1 + 32) + 8);
  }
  handle_invalid_context((char)"CGMetalContextGetHeight", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10) {
    return *(void *)(*(void *)(a1 + 32) + 16);
  }
  handle_invalid_context((char)"CGMetalContextGetTexture", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetBitsPerComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10) {
    return *(void *)(*(void *)(a1 + 32) + 24);
  }
  handle_invalid_context((char)"CGMetalContextGetBitsPerComponent", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetBitsPerPixel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10) {
    return *(void *)(*(void *)(a1 + 32) + 32);
  }
  handle_invalid_context((char)"CGMetalContextGetBitsPerPixel", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetColorSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10) {
    return *(void *)(*(void *)(a1 + 32) + 40);
  }
  handle_invalid_context((char)"CGMetalContextGetColorSpace", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetBitmapInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10) {
    return *(unsigned int *)(*(void *)(a1 + 32) + 48);
  }
  handle_invalid_context((char)"CGMetalContextGetBitmapInfo", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextCreateImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_16330);
      uint64_t v8 = a1;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(metal_context_vtable_vtable + 32);
    uint64_t v11 = *(void *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 40);
    return v9(v10, v11);
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextCreateImage", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

uint64_t CGMetalContextCreateImageReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_16330);
      uint64_t v8 = a1;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(metal_context_vtable_vtable + 40);
    uint64_t v11 = *(void *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 40);
    return v9(v10, v11);
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextCreateImageReference", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

uint64_t CGPDFShadingCreateWithObject(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int64x2_t result = (uint64_t)CGPDFObjectCopyAssociation(result, "Shading");
    if (!result)
    {
      if (CGPDFShadingGetTypeID_onceToken != -1) {
        dispatch_once(&CGPDFShadingGetTypeID_onceToken, &__block_literal_global_16339);
      }
      int64x2_t result = pdf_create_cftype();
      if (result)
      {
        uint64_t v2 = result;
        CGPDFObjectRef value = 0;
        CGPDFInteger v17 = 0;
        CGPDFBoolean v15 = 0;
        int v3 = *(_DWORD *)(v1 + 8);
        if (v3 == 9)
        {
          uint64_t v4 = *(void *)(v1 + 32);
          if (!v4)
          {
            uint64_t v6 = 0;
LABEL_12:
            *(void *)(v2 + 24) = v6;
            *(void *)(v2 + 32) = v4;
            if (CGPDFDictionaryGetObject(v6, "ColorSpace", &value))
            {
              CGColorSpaceRef colorspace = cg_create_colorspace((uint64_t)value);
              *(void *)(v2 + 40) = colorspace;
              if (colorspace)
              {
                if (CGColorSpaceGetType(colorspace) == 9)
                {
                }
                else
                {
                  *(void *)(v2 + 48) = 0;
                  uint64_t v8 = *(void *)(v2 + 40);
                  if (v8) {
                    uint64_t v9 = *(CGPDFArray **)(*(void *)(v8 + 24) + 48);
                  }
                  else {
                    uint64_t v9 = 0;
                  }
                  uint64_t v10 = (CGFloat *)malloc_type_malloc(8 * (void)v9 + 8, 0x100004000313F17uLL);
                  if (!v10) {
                    goto LABEL_18;
                  }
                  uint64_t v11 = v10;
                  if (CGPDFDictionaryGetNumbers(*(CGPDFDictionary **)(v2 + 24), "Background", (uint64_t)v10, v9))
                  {
                    v11[(void)v9] = 1.0;
                    *(void *)(v2 + 48) = CGColorCreate(*(CGColorSpaceRef *)(v2 + 40), v11);
                  }
                  free(v11);
                  BOOL Rect = CGPDFDictionaryGetRect(*(CGPDFDictionary **)(v2 + 24), "BBox", (double *)(v2 + 64));
                  *(unsigned char *)(v2 + 57) = Rect;
                  if (!Rect) {
                    *(CGRect *)(v2 + 64) = CGRectInfinite;
                  }
                  *(unsigned char *)(v2 + 56) = 0;
                  if (!CGPDFDictionaryGetBoolean(*(CGPDFDictionaryRef *)(v2 + 24), "AntiAlias", &v15)) {
                    *(unsigned char *)(v2 + 56) = v15 != 0;
                  }
                  if (CGPDFDictionaryGetInteger(*(CGPDFDictionaryRef *)(v2 + 24), "ShadingType", &v17))
                  {
                    if ((unint64_t)(v17 - 8) > 0xFFFFFFFFFFFFFFF8)
                    {
                      uint64_t v13 = *(void *)(v2 + 32);
                      if ((unint64_t)v17 > 3)
                      {
                        if (!v13)
                        {
                          pdf_error("invalid shading object: not a stream.");
                          goto LABEL_18;
                        }
                      }
                      else if (v13)
                      {
                        pdf_error("invalid shading object: not a dictionary.");
                        goto LABEL_18;
                      }
                      uint64_t v14 = off_1ED09CDB8[v17 - 1];
                      *(_DWORD *)(v2 + 16) = v17;
                      if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v2, v2 + 96, v2 + 104))
                      {
                        *(_DWORD *)(v2 + 128) = 0;
                        return CGPDFObjectSetAssociation(v1, (const void *)v2, "Shading");
                      }
                      goto LABEL_18;
                    }
                  }
                  else
                  {
                  }
                }
              }
            }
            else
            {
            }
LABEL_18:
            CFRelease((CFTypeRef)v2);
            return 0;
          }
          uint64_t v5 = (CGPDFDictionary **)(v4 + 48);
        }
        else
        {
          if (v3 != 8)
          {
            pdf_error("invalid shading: not a dictionary or stream.");
            goto LABEL_18;
          }
          uint64_t v4 = 0;
          uint64_t v5 = (CGPDFDictionary **)(v1 + 32);
        }
        uint64_t v6 = *v5;
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t __CGPDFShadingGetTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFShadingGetTypeID_class);
  CGPDFShadingGetTypeID_id = result;
  return result;
}

void CGPDFShadingFinalize(uint64_t a1)
{
  uint64_t v2 = *(void (**)(uint64_t, void))(a1 + 112);
  if (v2) {
    v2(a1, *(void *)(a1 + 96));
  }
  int v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 40));
  uint64_t v4 = *(const void **)(a1 + 120);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t CGPDFShadingGetShading(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 120);
  if (!result)
  {
    if (*(void *)(a1 + 104))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
      if (!*(void *)(a1 + 120))
      {
        int v3 = *(uint64_t (**)(uint64_t, void))(a1 + 104);
        if (v3) {
          *(void *)(a1 + 120) = v3(a1, *(void *)(a1 + 96));
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
      return *(void *)(a1 + 120);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _CGDataProviderReleaseDataCallback(void *a1, const void *a2)
{
  if (a1) {
    free(a1);
  }
}

CGImageRef create_jpeg_copy(CGImageRef image, double a2)
{
  CGImageRef v2 = image;
  double valuePtr = a2;
  if (!image) {
    return v2;
  }
  CFStringRef UTType = CGImageGetUTType(image);
  if (UTType && CFEqual(UTType, @"public.jpeg")) {
    return 0;
  }
  if ((*((unsigned char *)v2 + 39) & 4) == 0 && !*((void *)v2 + 22)) {
    goto LABEL_10;
  }
  Masuint64_t k = (__CFData *)CGImageGetMask(v2);
  if (Mask)
  {
    MaskFromAlphdouble a = Mask;
    if ((is_image_alpha_opaque((uint64_t)Mask) & 1) == 0)
    {
      CFRetain(MaskFromAlpha);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (is_image_alpha_opaque((uint64_t)v2))
  {
LABEL_10:
    MaskFromAlphdouble a = 0;
    goto LABEL_12;
  }
  MaskFromAlphdouble a = CGImageCreateMaskFromAlpha((uint64_t)v2, v7, v8, v9, v10, v11, v12, v13);
LABEL_12:
  CFDataRef Mutable = CFDataCreateMutable(0, 0);
  if (create_jpeg_copy::predicate != -1) {
    dispatch_once(&create_jpeg_copy::predicate, &__block_literal_global_16373);
  }
  uint64_t v15 = create_jpeg_copy::f(Mutable, @"public.jpeg", 1, 0);
  if (!v15)
  {
    if (MaskFromAlpha) {
      CFRelease(MaskFromAlpha);
    }
    return 0;
  }
  uint64_t v16 = (const void *)v15;
  CFDictionaryRef v17 = 0;
  if (a2 >= 0.0 && a2 <= 1.0)
  {
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
    if (v19)
    {
      CFNumberRef v20 = v19;
      values = v19;
      keys = @"kCGImageDestinationLossyCompressionQuality";
      CFDictionaryRef v17 = CFDictionaryCreate(v18, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFRelease(v20);
    }
    else
    {
      CFDictionaryRef v17 = 0;
    }
  }
  if (create_jpeg_copy::predicate != -1) {
    dispatch_once(&create_jpeg_copy::predicate, &__block_literal_global_8_16375);
  }
  create_jpeg_copy::f(v16, v2, v17);
  if (create_jpeg_copy::predicate != -1) {
    dispatch_once(&create_jpeg_copy::predicate, &__block_literal_global_12_16376);
  }
  create_jpeg_copy::f(v16);
  CFRelease(v16);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v21 = CGDataProviderCreateWithCFData(Mutable);
  CFRelease(Mutable);
  CGImageRef v2 = CGImageCreateWithJPEGDataProvider2((uint64_t)v21, 0, 0, 0, 0);
  CGDataProviderRelease(v21);
  if (v2 && MaskFromAlpha)
  {
    CGImageRef v22 = CGImageCreateWithMaskAndMatte((uint64_t)v2, (uint64_t)MaskFromAlpha, 0);
    CFRelease(v2);
    CGImageRef v2 = v22;
LABEL_33:
    CFRelease(MaskFromAlpha);
    return v2;
  }
  if (MaskFromAlpha) {
    goto LABEL_33;
  }
  return v2;
}

uint64_t is_image_alpha_opaque(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  Masuint64_t k = (unsigned int *)a1;
  if (*(void *)(a1 + 40) < 4uLL) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 39) & 4) == 0 && *(void *)(a1 + 176)) {
    Masuint64_t k = (unsigned int *)CGImageGetMask((void *)a1);
  }
  CGBuf::CGBuf((CGBuf *)v19, Mask);
  unsigned int v3 = v21;
  if (v21 == 1)
  {
    int v22 = 964689920;
    int __pattern4 = 1065353216;
    memset_pattern4(__b, &__pattern4, 4uLL);
    memset_pattern4(v24, &v22, 4uLL);
    if ((v20 & 0x1F) != 0)
    {
      int v27 = 0;
      int v25 = 2139095040;
    }
  }
  else
  {
    int v22 = 2139095040;
    int __pattern4 = 0;
    if (v21 >= 0x10u) {
      uint64_t v9 = 16;
    }
    else {
      uint64_t v9 = v21;
    }
    memset_pattern4(__b, &__pattern4, 4 * v9);
    memset_pattern4(v24, &v22, 4 * v9);
    if (v3 <= 0xF && (v20 & 0x1F) != 0)
    {
      float v10 = INFINITY;
      if ((v20 & 0x1Fu) < 5) {
        float v10 = 0.00024414;
      }
      __b[v9] = 1065353216;
      v24[v9] = v10;
    }
  }
  uint64_t IsConstantValue_0 = CGBufIsConstantValue_0((uint64_t)v19, (uint64_t)__b, (uint64_t)v24, v4, v5, v6, v7, v8);
  CGBuf::~CGBuf((CGBuf *)v19, v11, v12, v13, v14, v15, v16, v17);
  return IsConstantValue_0;
}

void sub_184FBCCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  CGBuf::~CGBuf((CGBuf *)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void *__create_jpeg_copy_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationFinalize");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationFinalize");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationFinalize");
  }
  create_jpeg_copy::f = result;
  return result;
}

void *__create_jpeg_copy_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationAddImage");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationAddImage");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationAddImage");
  }
  create_jpeg_copy::f = result;
  return result;
}

void *__create_jpeg_copy_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationCreateWithData");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationCreateWithData");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationCreateWithData");
  }
  create_jpeg_copy::f = result;
  return result;
}

_DWORD *resample_word_h_Ncpp(_DWORD *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    uint64_t v10 = *a6;
    uint64_t v11 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        uint64_t v12 = v10 + *a7 * (uint64_t)(int)v8;
        uint64_t v13 = *(int **)(a5 + 8 * v8);
        int v14 = a4;
        uint64_t v15 = result;
        do
        {
          if (v9)
          {
            uint64_t v16 = 0;
            int v17 = v15[1];
            CFAllocatorRef v18 = (unsigned __int16 *)(v12 + 2 * *v15 * (int)v9);
            do
            {
              int v19 = 0x2000;
              if (v17)
              {
                int v20 = v18;
                unsigned __int8 v21 = (__int16 *)(v15 + 2);
                int v22 = v17;
                do
                {
                  int v23 = *v21++;
                  v19 += *v20 * v23;
                  v20 += v9;
                  --v22;
                }
                while (v22);
              }
              int v24 = v19 >> 14;
              if (v24 >= 0xFFFF) {
                int v24 = 0xFFFF;
              }
              *v13++ = v24 & ~(v24 >> 31);
              ++v16;
              ++v18;
            }
            while (v16 != v9);
          }
          uint64_t v15 = (_DWORD *)((char *)v15 + v11);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

_DWORD *resample_word_h_3cpp_ap(_DWORD *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = a6[1];
    uint64_t v11 = 2 * a2 + 8;
    uint64_t v12 = a8;
    v13.i64[0] = 0xFFFF0000FFFFLL;
    v13.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a4)
      {
        uint64_t v14 = v9 + *a7 * (uint64_t)(int)v8;
        uint64_t v15 = *(int32x4_t **)(a5 + 8 * v8);
        uint64_t v16 = v10 + a7[1] * (uint64_t)(int)v8 + 2;
        int v17 = a4;
        CFAllocatorRef v18 = result;
        do
        {
          int v19 = v18[1];
          if (v19)
          {
            int v20 = (const __int16 *)(v18 + 2);
            uint64_t v21 = v14 + 6 * *v18;
            int v22 = (__int16 *)(v16 + 2 * (*v18 - 1));
            v23.i64[0] = 0x200000002000;
            v23.i64[1] = 0x200000002000;
            do
            {
              v24.i32[0] = *(_DWORD *)v21;
              v24.i16[2] = *(_WORD *)(v21 + 4);
              v24.i16[3] = *v22++;
              int16x4_t v25 = vld1_dup_s16(v20++);
              int32x4_t v23 = vmlaq_s32(v23, vmovl_s16(v25), (int32x4_t)vmovl_u16(v24));
              v21 += 6;
              --v19;
            }
            while (v19);
          }
          else
          {
            v23.i64[0] = 0x200000002000;
            v23.i64[1] = 0x200000002000;
          }
          *v15++ = vmaxq_s32(vminq_s32(vshrq_n_s32(v23, 0xEuLL), v13), (int32x4_t)0);
          CFAllocatorRef v18 = (_DWORD *)((char *)v18 + v11);
          --v17;
        }
        while (v17);
      }
      ++v8;
    }
    while (v8 != v12);
  }
  return result;
}

int *resample_word_h_4cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = 2 * a2 + 8;
    v11.i64[0] = 0xFFFF0000FFFFLL;
    v11.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a4)
      {
        uint64_t v12 = v9 + *a7 * (uint64_t)(int)v8;
        int32x4_t v13 = *(int32x4_t **)(a5 + 8 * v8);
        int v14 = a4;
        uint64_t v15 = result;
        do
        {
          int v16 = v15[1];
          if (v16)
          {
            int v17 = (const __int16 *)(v15 + 2);
            CFAllocatorRef v18 = (uint16x4_t *)(v12 + 8 * *v15);
            v19.i64[0] = 0x200000002000;
            v19.i64[1] = 0x200000002000;
            do
            {
              uint16x4_t v20 = *v18++;
              int16x4_t v21 = vld1_dup_s16(v17++);
              int32x4_t v19 = vmlaq_s32(v19, vmovl_s16(v21), (int32x4_t)vmovl_u16(v20));
              --v16;
            }
            while (v16);
          }
          else
          {
            v19.i64[0] = 0x200000002000;
            v19.i64[1] = 0x200000002000;
          }
          *v13++ = vmaxq_s32(vminq_s32(vshrq_n_s32(v19, 0xEuLL), v11), (int32x4_t)0);
          uint64_t v15 = (int *)((char *)v15 + v10);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

int *resample_word_h_3cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = 2 * a2 + 8;
    uint64_t v11 = a8;
    do
    {
      if (a4)
      {
        uint64_t v12 = *(int32x2_t **)(a5 + 8 * v8);
        uint64_t v13 = v9 + *a7 * (uint64_t)(int)v8 + 4;
        int v14 = a4;
        uint64_t v15 = result;
        do
        {
          int v16 = v15[1];
          if (v16)
          {
            int v17 = (__int16 *)(v15 + 2);
            CFAllocatorRef v18 = (unsigned __int16 *)(v13 + 6 * *v15);
            int32x2_t v19 = (int32x2_t)0x200000002000;
            int v20 = 0x2000;
            do
            {
              unsigned int v21 = *v17++;
              v22.i32[0] = *(v18 - 2);
              v22.i32[1] = *(v18 - 1);
              int32x2_t v19 = vmla_s32(v19, vdup_n_s32(v21), v22);
              v20 += *v18 * v21;
              v18 += 3;
              --v16;
            }
            while (v16);
          }
          else
          {
            int32x2_t v19 = (int32x2_t)0x200000002000;
            int v20 = 0x2000;
          }
          int32x2_t v23 = vshr_n_s32(v19, 0xEuLL);
          int v24 = v20 >> 14;
          if (v20 >> 14 >= 0xFFFF) {
            int v24 = 0xFFFF;
          }
          *uint64_t v12 = vmax_s32(vmin_s32(v23, (int32x2_t)0xFFFF0000FFFFLL), 0);
          v12[1].i32[0] = v24 & ~(v24 >> 31);
          uint64_t v12 = (int32x2_t *)((char *)v12 + 12);
          uint64_t v15 = (int *)((char *)v15 + v10);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

int *resample_word_h_1cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = 2 * a2 + 8;
    uint64_t v11 = a8;
    do
    {
      if (a4)
      {
        uint64_t v12 = v9 + *a7 * (uint64_t)(int)v8;
        uint64_t v13 = *(int **)(a5 + 8 * v8);
        int v14 = a4;
        uint64_t v15 = result;
        do
        {
          int v16 = v15[1];
          CFAllocatorRef v18 = v15 + 2;
          int v17 = *((__int16 *)v15 + 4);
          uint64_t v19 = v12 + 2 * *v15 - 2;
          int v20 = 0x2000;
          if (v16 >= 4)
          {
            int v21 = *((__int16 *)v15 + 4);
            unsigned int v22 = v15[1];
            do
            {
              int v24 = *(unsigned __int16 *)(v19 + 8);
              v19 += 8;
              int v23 = v24;
              int v16 = v22 - 4;
              int v25 = *((__int16 *)v18 + 4);
              v18 += 2;
              int v17 = v25;
              v20 += v21 * *(unsigned __int16 *)(v19 - 6)
                   + *(unsigned __int16 *)(v19 - 4) * *((__int16 *)v18 - 3)
                   + *(unsigned __int16 *)(v19 - 2) * *((__int16 *)v18 - 2)
                   + v23 * *((__int16 *)v18 - 1);
              int v21 = v25;
              BOOL v26 = v22 > 7;
              v22 -= 4;
            }
            while (v26);
          }
          if (v16)
          {
            int v27 = (unsigned __int16 *)(v19 + 2);
            uint64_t v28 = (__int16 *)v18 + 1;
            do
            {
              int v29 = *v27++;
              v20 += v17 * v29;
              int v30 = *v28++;
              int v17 = v30;
              --v16;
            }
            while (v16);
          }
          int v31 = v20 >> 14;
          if (v20 >> 14 >= 0xFFFF) {
            int v31 = 0xFFFF;
          }
          *v13++ = v31 & ~(v31 >> 31);
          uint64_t v15 = (int *)((char *)v15 + v10);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t resample_word_v_Ncpp_al(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, void *a5, uint64_t *a6)
{
  uint64_t v6 = *a5 - 2;
  int v7 = *(_DWORD *)(result + 4);
  uint64_t v8 = (const __int16 *)(result + 8);
  int v9 = a3;
  uint64_t v10 = a3 * a4;
  unint64_t v11 = v10 & 0xFFFFFFFC;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
    int v13 = 0;
    int v15 = a3;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    v14.i64[0] = 0xFFFF0000FFFFLL;
    v14.i64[1] = 0xFFFF0000FFFFLL;
    int v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v7)
      {
        int v17 = a6;
        CFAllocatorRef v18 = v8;
        int v19 = v7;
        do
        {
          uint64_t v20 = *v17++;
          int16x4_t v21 = vld1_dup_s16(v18++);
          int32x4_t v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v12), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      uint64_t v22 = v12 | 1;
      uint64_t v23 = v12 | 2;
      uint64_t v24 = v12 | 3;
      v12 += 4;
      uint64_t v25 = v6 + 8;
      int8x16_t v26 = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(v16, 0xEuLL), v14), (int32x4_t)0);
      int v27 = v26.i32[0];
      if (v13 > v26.i32[0]) {
        int v27 = v13;
      }
      BOOL v28 = v22 == v15;
      __int16 v29 = v28;
      if (v22 == v15) {
        int v30 = v9;
      }
      else {
        int v30 = 0;
      }
      uint64_t v31 = (v30 + v15);
      if (v28) {
        unsigned __int32 v32 = 0;
      }
      else {
        unsigned __int32 v32 = v27;
      }
      if (v32 <= v26.i32[1]) {
        uint64_t result = v26.u32[1];
      }
      else {
        uint64_t result = v32;
      }
      BOOL v33 = v23 == v31;
      __int16 v34 = v23 == v31;
      if (v33) {
        int v35 = v9;
      }
      else {
        int v35 = 0;
      }
      uint64_t v36 = (v35 + v31);
      if (v33) {
        unsigned __int32 v37 = 0;
      }
      else {
        unsigned __int32 v37 = result;
      }
      if (v37 <= v26.i32[2]) {
        unsigned __int32 v37 = v26.u32[2];
      }
      BOOL v38 = v24 == v36;
      __int16 v39 = v24 == v36;
      if (v38) {
        int v40 = v9;
      }
      else {
        int v40 = 0;
      }
      uint64_t v41 = (v40 + v36);
      int v42 = v26.i32[3];
      if (v38) {
        unsigned __int32 v43 = 0;
      }
      else {
        unsigned __int32 v43 = v37;
      }
      if (v43 > v26.i32[3]) {
        int v42 = v43;
      }
      BOOL v44 = v12 == v41;
      __int16 v45 = v12 == v41;
      if (v12 == v41) {
        int v46 = v9;
      }
      else {
        int v46 = 0;
      }
      int v15 = v46 + v41;
      v47.i16[0] = v29;
      v47.i16[1] = v34;
      v47.i16[2] = v39;
      if (v44) {
        int v13 = 0;
      }
      else {
        int v13 = v42;
      }
      v47.i16[3] = v45;
      v48.i64[0] = __PAIR64__(result, v27);
      v48.i64[1] = __PAIR64__(v42, v37);
      *(int16x4_t *)(v6 + 2) = vmovn_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v47), 0x1FuLL)), v48, v26));
      v6 += 8;
    }
    while (v12 < v11);
    uint64_t v6 = v25;
  }
  if ((int)v12 < (int)v10)
  {
    unint64_t v12 = v12;
    do
    {
      int v49 = 0x2000;
      if (v7)
      {
        uint64_t v50 = a6;
        float16x8_t v51 = v8;
        int v52 = v7;
        do
        {
          int v54 = *v51++;
          int v53 = v54;
          uint64_t v55 = *v50++;
          v49 += *(_DWORD *)(v55 + 4 * v12) * v53;
          --v52;
        }
        while (v52);
      }
      int v56 = v49 >> 14;
      if (v56 >= 0xFFFF) {
        int v56 = 0xFFFF;
      }
      int v57 = v56 & ~(v56 >> 31);
      if (v13 <= v57) {
        uint64_t result = v57;
      }
      else {
        uint64_t result = v13;
      }
      BOOL v58 = ++v12 == v15;
      if (v12 == v15) {
        int v59 = v9;
      }
      else {
        int v59 = 0;
      }
      v15 += v59;
      if (v58) {
        int v13 = 0;
      }
      else {
        int v13 = result;
      }
      if (v58) {
        LOWORD(v57) = result;
      }
      *(_WORD *)(v6 + 2) = v57;
      v6 += 2;
    }
    while (v12 != v10);
  }
  return result;
}

uint64_t *resample_word_v_3cpp_al(uint64_t *result, uint64_t a2, unsigned __int8 a3, int a4, _WORD **a5, uint64_t *a6)
{
  unint64_t v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    int v8 = *((_DWORD *)result + 1);
    int v9 = (__int16 *)(result + 1);
    uint64_t v10 = *a5;
    do
    {
      if (v8)
      {
        int32x2_t v11 = (int32x2_t)0x200000002000;
        int v12 = 0x2000;
        uint64_t result = a6;
        int v13 = 0x2000;
        int32x4_t v14 = v9;
        int v15 = v8;
        do
        {
          unsigned int v17 = *v14++;
          unsigned int v16 = v17;
          uint64_t v18 = *result++;
          int32x2_t v11 = vmla_s32(v11, *(int32x2_t *)(v18 + 4 * v7), vdup_n_s32(v16));
          v13 += *(_DWORD *)(v18 + 4 * (v7 | 2)) * v16;
          v12 += *(_DWORD *)(v18 + 4 * (v7 | 3)) * v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        int32x2_t v11 = (int32x2_t)0x200000002000;
        int v13 = 0x2000;
        int v12 = 0x2000;
      }
      int32x2_t v19 = vshr_n_s32(v11, 0xEuLL);
      int v20 = v13 >> 14;
      int v21 = v12 >> 14;
      if (v20 >= 0xFFFF) {
        int v20 = 0xFFFF;
      }
      unsigned int v22 = v20 & ~(v20 >> 31);
      if (v21 >= 0xFFFF) {
        int v21 = 0xFFFF;
      }
      unsigned int v23 = v21 & ~(v21 >> 31);
      int32x2_t v24 = vmax_s32(vmin_s32(v19, (int32x2_t)0xFFFF0000FFFFLL), 0);
      if (v24.i32[0] > v23) {
        unsigned int v23 = v24.i32[0];
      }
      if (v24.i32[1] > v23) {
        unsigned int v23 = v24.u32[1];
      }
      if (v22 > v23) {
        LOWORD(v23) = v22;
      }
      v10[1] = v24.i16[2];
      *uint64_t v10 = v24.i16[0];
      v10[2] = v22;
      v10[3] = v23;
      v10 += 4;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_word_v_Ncpp_af(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, void *a5, uint64_t *a6)
{
  unint64_t v6 = (_WORD *)(*a5 - 2);
  int v7 = *(_DWORD *)(result + 4);
  int v8 = (const __int16 *)(result + 8);
  int v9 = a3;
  uint64_t v10 = 2 - a3;
  uint64_t v11 = a3 * a4;
  unint64_t v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    int v14 = 0;
    unsigned int v15 = a3;
  }
  else
  {
    unint64_t v13 = 0;
    int v14 = 0;
    uint64_t result = (int)v10;
    unsigned int v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v7)
      {
        unsigned int v17 = a6;
        uint64_t v18 = v8;
        int v19 = v7;
        do
        {
          uint64_t v20 = *v17++;
          int16x4_t v21 = vld1_dup_s16(v18++);
          int32x4_t v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v13), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      int v22 = v16.i32[0] >> 14;
      int v23 = v16.i32[1] >> 14;
      if (v16.i32[0] >> 14 >= 0xFFFF) {
        int v22 = 0xFFFF;
      }
      int v24 = v22 & ~(v22 >> 31);
      if (v23 >= 0xFFFF) {
        int v23 = 0xFFFF;
      }
      if (v14 <= v24) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v14;
      }
      if ((v13 | 1) == v15)
      {
        v6[(int)v10] = v25;
        uint64_t v26 = v15 + v9;
        v15 += v9;
        unsigned int v25 = 0;
      }
      else
      {
        uint64_t v26 = v15;
      }
      unsigned int v27 = v23 & ~(v23 >> 31);
      v6[1] = v24;
      if (v25 <= v27) {
        unsigned int v28 = v23 & ~(v23 >> 31);
      }
      else {
        unsigned int v28 = v25;
      }
      if ((v13 | 2) == v26)
      {
        v6[(int)v10 + 1] = v28;
        uint64_t v26 = v15 + v9;
        v15 += v9;
        unsigned int v28 = 0;
      }
      v6[2] = v27;
      int v29 = v16.i32[2] >> 14;
      int v30 = v16.i32[3] >> 14;
      if (v16.i32[2] >> 14 >= 0xFFFF) {
        int v29 = 0xFFFF;
      }
      unsigned int v31 = v29 & ~(v29 >> 31);
      if (v30 >= 0xFFFF) {
        int v30 = 0xFFFF;
      }
      if (v28 <= v31) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v28;
      }
      if ((v13 | 3) == v26)
      {
        v6[(int)v10 + 2] = v32;
        uint64_t v26 = v15 + v9;
        v15 += v9;
        unsigned int v32 = 0;
      }
      unsigned int v33 = v30 & ~(v30 >> 31);
      v6[3] = v31;
      if (v32 <= v33) {
        int v14 = v30 & ~(v30 >> 31);
      }
      else {
        int v14 = v32;
      }
      v13 += 4;
      if (v13 == v26)
      {
        v6[(int)v10 + 3] = v14;
        v15 += v9;
        int v14 = 0;
      }
      _OWORD v6[4] = v33;
      v6 += 4;
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    unint64_t v13 = v13;
    do
    {
      int v34 = 0x2000;
      if (v7)
      {
        int v35 = a6;
        uint64_t v36 = v8;
        int v37 = v7;
        do
        {
          int v39 = *v36++;
          int v38 = v39;
          uint64_t v40 = *v35++;
          v34 += *(_DWORD *)(v40 + 4 * v13) * v38;
          --v37;
        }
        while (v37);
      }
      int v41 = v34 >> 14;
      if (v41 >= 0xFFFF) {
        int v41 = 0xFFFF;
      }
      uint64_t result = v41 & ~(v41 >> 31);
      if (v14 <= (int)result) {
        int v14 = result;
      }
      if (++v13 == v15)
      {
        v6[v10] = v14;
        v15 += v9;
        int v14 = 0;
      }
      v6[1] = result;
      ++v6;
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t *resample_word_v_3cpp_af(uint64_t *result, uint64_t a2, unsigned __int8 a3, int a4, _WORD **a5, uint64_t *a6)
{
  unint64_t v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    int v8 = *((_DWORD *)result + 1);
    int v9 = (__int16 *)(result + 1);
    uint64_t v10 = *a5;
    do
    {
      if (v8)
      {
        int32x2_t v11 = (int32x2_t)0x200000002000;
        int v12 = 0x2000;
        uint64_t result = a6;
        int v13 = 0x2000;
        int v14 = v9;
        int v15 = v8;
        do
        {
          unsigned int v17 = *v14++;
          unsigned int v16 = v17;
          uint64_t v18 = *result++;
          v13 += *(_DWORD *)(v18 + 4 * v7) * v16;
          int32x2_t v11 = vmla_s32(v11, *(int32x2_t *)(v18 + 4 * (v7 | 1)), vdup_n_s32(v16));
          v12 += *(_DWORD *)(v18 + 4 * (v7 | 3)) * v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        int32x2_t v11 = (int32x2_t)0x200000002000;
        int v13 = 0x2000;
        int v12 = 0x2000;
      }
      int v19 = v13 >> 14;
      int32x2_t v20 = vshr_n_s32(v11, 0xEuLL);
      if (v19 >= 0xFFFF) {
        int v19 = 0xFFFF;
      }
      unsigned int v21 = v19 & ~(v19 >> 31);
      int v22 = v12 >> 14;
      if (v22 >= 0xFFFF) {
        int v22 = 0xFFFF;
      }
      unsigned int v23 = v22 & ~(v22 >> 31);
      int32x2_t v24 = vmax_s32(vmin_s32(v20, (int32x2_t)0xFFFF0000FFFFLL), 0);
      if (v24.i32[0] > v21) {
        unsigned int v21 = v24.i32[0];
      }
      if (v24.i32[1] > v21) {
        unsigned int v21 = v24.u32[1];
      }
      if (v23 > v21) {
        LOWORD(v21) = v23;
      }
      *uint64_t v10 = v21;
      v10[2] = v24.i16[2];
      v10[1] = v24.i16[0];
      v10[3] = v23;
      v10 += 4;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_word_v_Ncpp(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, int16x4_t **a5, uint64_t *a6)
{
  unint64_t v6 = *a5;
  int v7 = *(_DWORD *)(result + 4);
  int v8 = (const __int16 *)(result + 8);
  uint64_t v9 = a3 * a4;
  unint64_t v10 = v9 & 0xFFFFFFFC;
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    unint64_t v11 = 0;
    v12.i64[0] = 0xFFFF0000FFFFLL;
    v12.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v13.i64[0] = 0x200000002000;
      v13.i64[1] = 0x200000002000;
      if (v7)
      {
        int v14 = a6;
        int v15 = v8;
        int v16 = v7;
        do
        {
          uint64_t v17 = *v14++;
          uint64_t result = 4 * v11;
          int16x4_t v18 = vld1_dup_s16(v15++);
          int32x4_t v13 = vmlaq_s32(v13, *(int32x4_t *)(v17 + 4 * v11), vmovl_s16(v18));
          --v16;
        }
        while (v16);
      }
      *v6++ = vmovn_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(v13, 0xEuLL), v12), (int32x4_t)0));
      v11 += 4;
    }
    while (v11 < v10);
  }
  if ((int)v11 < (int)v9)
  {
    unint64_t v11 = v11;
    do
    {
      int v19 = 0x2000;
      if (v7)
      {
        int32x2_t v20 = a6;
        unsigned int v21 = v8;
        int v22 = v7;
        do
        {
          unsigned int v23 = *v21++;
          uint64_t result = v23;
          uint64_t v24 = *v20++;
          v19 += *(_DWORD *)(v24 + 4 * v11) * result;
          --v22;
        }
        while (v22);
      }
      int v25 = v19 >> 14;
      if (v25 >= 0xFFFF) {
        int v25 = 0xFFFF;
      }
      v6->i16[0] = v25 & ~(unsigned __int16)(v25 >> 31);
      unint64_t v6 = (int16x4_t *)((char *)v6 + 2);
      ++v11;
    }
    while (v11 != v9);
  }
  return result;
}

int *resample_word_h_1cpp_ap(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = a6[1];
    uint64_t v11 = 2 * a2 + 8;
    uint64_t v12 = a8;
    while (!a4)
    {
LABEL_18:
      if (++v8 == v12) {
        return result;
      }
    }
    uint64_t v13 = v9 + *a7 * (uint64_t)(int)v8;
    uint64_t v14 = v10 + a7[1] * (uint64_t)(int)v8;
    int v15 = *(int **)(a5 + 8 * v8);
    int v16 = a4;
    uint64_t v17 = result;
    while (1)
    {
      uint64_t v19 = (uint64_t)(v17 + 2);
      int v18 = *((__int16 *)v17 + 4);
      int v20 = v17[1];
      uint64_t v21 = 2 * *v17 - 2;
      uint64_t v22 = v13 + v21;
      uint64_t v23 = v14 + v21;
      if (v20 >= 2) {
        break;
      }
      int v26 = 0x2000;
      int v25 = 0x2000;
      if (v20) {
        goto LABEL_11;
      }
LABEL_13:
      int v38 = v26 >> 14;
      int v39 = v25 >> 14;
      if (v26 >> 14 >= 0xFFFF) {
        int v38 = 0xFFFF;
      }
      int v40 = v38 & ~(v38 >> 31);
      if (v39 >= 0xFFFF) {
        int v39 = 0xFFFF;
      }
      *int v15 = v40;
      v15[1] = v39 & ~(v39 >> 31);
      v15 += 2;
      uint64_t v17 = (int *)((char *)v17 + v11);
      if (!--v16) {
        goto LABEL_18;
      }
    }
    unint64_t v24 = 0;
    int v25 = 0x2000;
    int v26 = 0x2000;
    do
    {
      unsigned int v27 = v20;
      v20 -= 2;
      int v28 = v26 + v18 * *(unsigned __int16 *)(v22 + v24 + 2);
      int v29 = v25 + v18 * *(unsigned __int16 *)(v23 + v24 + 2);
      int v30 = SHIWORD(v17[v24 / 4 + 2]);
      int v26 = v28 + v30 * *(unsigned __int16 *)(v22 + v24 + 4);
      int v25 = v29 + *(unsigned __int16 *)(v23 + v24 + 4) * v30;
      int v18 = SLOWORD(v17[v24 / 4 + 3]);
      v24 += 4;
    }
    while (v27 > 3);
    v23 += v24;
    v22 += v24;
    uint64_t v19 = (uint64_t)&v17[v24 / 4 + 2];
    if (!v20) {
      goto LABEL_13;
    }
LABEL_11:
    unsigned int v31 = (unsigned __int16 *)(v23 + 2);
    unsigned int v32 = (unsigned __int16 *)(v22 + 2);
    unsigned int v33 = (__int16 *)(v19 + 2);
    do
    {
      int v35 = *v32++;
      int v34 = v35;
      int v36 = *v31++;
      v26 += v18 * v34;
      v25 += v18 * v36;
      int v37 = *v33++;
      int v18 = v37;
      --v20;
    }
    while (v20);
    goto LABEL_13;
  }
  return result;
}

_DWORD *resample_word_h_Ncpp_ap(_DWORD *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    unsigned int v9 = a3;
    int v10 = a3 - 1;
    uint64_t v11 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v13 = 2 * a2 + 8;
    uint64_t v14 = a8;
    uint64_t v15 = 2 * a3 - 2;
    do
    {
      if (a4)
      {
        uint64_t v16 = v11 + *a7 * (uint64_t)(int)v8;
        uint64_t v17 = *(int **)(a5 + 8 * v8);
        uint64_t v18 = v12 + a7[1] * (uint64_t)(int)v8 + 2;
        int v19 = a4;
        int v20 = result;
        do
        {
          int v22 = *v20;
          int v21 = v20[1];
          uint64_t v23 = (__int16 *)(v20 + 2);
          if (v9 >= 2)
          {
            int v24 = 0;
            do
            {
              int v25 = 0x2000;
              if (v21)
              {
                int v26 = (unsigned __int16 *)(v16 + 2 * v22 * v10);
                unsigned int v27 = (__int16 *)(v20 + 2);
                int v28 = v21;
                do
                {
                  int v29 = *v27++;
                  v25 += *v26 * v29;
                  int v26 = (unsigned __int16 *)((char *)v26 + v15);
                  --v28;
                }
                while (v28);
              }
              int v30 = v25 >> 14;
              if (v30 >= 0xFFFF) {
                int v30 = 0xFFFF;
              }
              *v17++ = v30 & ~(v30 >> 31);
              ++v24;
            }
            while (v24 != v10);
          }
          if (v21)
          {
            unsigned int v31 = (unsigned __int16 *)(v18 + 2 * (v22 - 1));
            int v32 = 0x2000;
            do
            {
              int v34 = *v23++;
              int v33 = v34;
              int v35 = *v31++;
              v32 += v35 * v33;
              --v21;
            }
            while (v21);
          }
          else
          {
            int v32 = 0x2000;
          }
          int v36 = v32 >> 14;
          if (v32 >> 14 >= 0xFFFF) {
            int v36 = 0xFFFF;
          }
          *v17++ = v36 & ~(v36 >> 31);
          int v20 = (_DWORD *)((char *)v20 + v13);
          --v19;
        }
        while (v19);
      }
      ++v8;
    }
    while (v8 != v14);
  }
  return result;
}

int *resample_word_h_4cpp_ap(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = a6[1];
    uint64_t v11 = 2 * a2 + 8;
    uint64_t v12 = a8;
    v13.i64[0] = 0xFFFF0000FFFFLL;
    v13.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a4)
      {
        uint64_t v14 = v9 + *a7 * (uint64_t)(int)v8;
        uint64_t v15 = *(int32x4_t **)(a5 + 8 * v8);
        uint64_t v16 = v10 + a7[1] * (uint64_t)(int)v8 + 2;
        int v17 = a4;
        uint64_t v18 = result;
        do
        {
          int v19 = v18[1];
          if (v19)
          {
            int v21 = (__int16 *)(v18 + 2);
            uint64_t v20 = *v18;
            int v22 = (uint16x4_t *)(v14 + 8 * v20);
            uint64_t v23 = (unsigned __int16 *)(v16 + 2 * v20 - 2);
            v24.i64[0] = 0x200000002000;
            v24.i64[1] = 0x200000002000;
            int v25 = 0x2000;
            do
            {
              unsigned int v27 = *v21++;
              unsigned int v26 = v27;
              int v29 = *v23++;
              int v28 = v29;
              uint16x4_t v30 = *v22++;
              int32x4_t v24 = vmlaq_s32(v24, vmovl_s16(vdup_n_s16(v26)), (int32x4_t)vmovl_u16(v30));
              v25 += v28 * v26;
              --v19;
            }
            while (v19);
          }
          else
          {
            v24.i64[0] = 0x200000002000;
            v24.i64[1] = 0x200000002000;
            int v25 = 0x2000;
          }
          int32x4_t v31 = vshrq_n_s32(v24, 0xEuLL);
          int v32 = v25 >> 14;
          if (v25 >> 14 >= 0xFFFF) {
            int v32 = 0xFFFF;
          }
          *uint64_t v15 = vmaxq_s32(vminq_s32(v31, v13), (int32x4_t)0);
          v15[1].i32[0] = v32 & ~(v32 >> 31);
          uint64_t v15 = (int32x4_t *)((char *)v15 + 20);
          uint64_t v18 = (int *)((char *)v18 + v11);
          --v17;
        }
        while (v17);
      }
      ++v8;
    }
    while (v8 != v12);
  }
  return result;
}

uint64_t resample_word_v_Ncpp_ap(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, void *a5, uint64_t *a6)
{
  uint64_t v6 = *a5 - 2;
  uint64_t v7 = a5[1] - 2;
  int v8 = *(_DWORD *)(a1 + 4);
  uint64_t v9 = (const __int16 *)(a1 + 8);
  int v10 = a3;
  uint64_t v11 = a3 * a4;
  unint64_t v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    uint64_t result = 0;
    unsigned int v15 = a3;
  }
  else
  {
    unint64_t v13 = 0;
    LODWORD(result) = 0;
    unsigned int v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v8)
      {
        int v17 = a6;
        uint64_t v18 = v9;
        int v19 = v8;
        do
        {
          uint64_t v20 = *v17++;
          int16x4_t v21 = vld1_dup_s16(v18++);
          int32x4_t v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v13), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      int v22 = v16.i32[0] >> 14;
      if (v16.i32[0] >> 14 >= 0xFFFF) {
        int v22 = 0xFFFF;
      }
      int v23 = v22 & ~(v22 >> 31);
      if (v16.i32[1] >> 14 >= 0xFFFF) {
        int v24 = 0xFFFF;
      }
      else {
        int v24 = v16.i32[1] >> 14;
      }
      if ((int)result <= v23) {
        LODWORD(result) = v23;
      }
      if ((v13 | 1) == v15)
      {
        *(_WORD *)(v7 + 2) = result;
        v7 += 2;
        uint64_t v25 = v15 + v10;
        v15 += v10;
        LODWORD(result) = 0;
      }
      else
      {
        uint64_t v25 = v15;
        *(_WORD *)(v6 + 2) = v23;
        v6 += 2;
      }
      unsigned int v26 = v24 & ~(v24 >> 31);
      if (result <= v26) {
        unsigned int v27 = v24 & ~(v24 >> 31);
      }
      else {
        unsigned int v27 = result;
      }
      if ((v13 | 2) == v25)
      {
        *(_WORD *)(v7 + 2) = v27;
        v7 += 2;
        uint64_t v25 = v15 + v10;
        v15 += v10;
        unsigned int v27 = 0;
      }
      else
      {
        *(_WORD *)(v6 + 2) = v26;
        v6 += 2;
      }
      int v28 = v16.i32[2] >> 14;
      if (v16.i32[2] >> 14 >= 0xFFFF) {
        int v28 = 0xFFFF;
      }
      unsigned int v29 = v28 & ~(v28 >> 31);
      if (v16.i32[3] >> 14 >= 0xFFFF) {
        int v30 = 0xFFFF;
      }
      else {
        int v30 = v16.i32[3] >> 14;
      }
      if (v27 <= v29) {
        unsigned int v27 = v29;
      }
      if ((v13 | 3) == v25)
      {
        *(_WORD *)(v7 + 2) = v27;
        v7 += 2;
        uint64_t v25 = v15 + v10;
        v15 += v10;
        unsigned int v27 = 0;
      }
      else
      {
        *(_WORD *)(v6 + 2) = v29;
        v6 += 2;
      }
      unsigned int v31 = v30 & ~(v30 >> 31);
      if (v27 <= v31) {
        uint64_t result = v31;
      }
      else {
        uint64_t result = v27;
      }
      v13 += 4;
      if (v13 == v25)
      {
        *(_WORD *)(v7 + 2) = result;
        v7 += 2;
        v15 += v10;
        uint64_t result = 0;
      }
      else
      {
        *(_WORD *)(v6 + 2) = v31;
        v6 += 2;
      }
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    unint64_t v13 = v13;
    do
    {
      int v32 = 0x2000;
      if (v8)
      {
        int v33 = a6;
        int v34 = v9;
        int v35 = v8;
        do
        {
          int v37 = *v34++;
          int v36 = v37;
          uint64_t v38 = *v33++;
          v32 += *(_DWORD *)(v38 + 4 * v13) * v36;
          --v35;
        }
        while (v35);
      }
      int v39 = v32 >> 14;
      if (v39 >= 0xFFFF) {
        int v39 = 0xFFFF;
      }
      int v40 = v39 & ~(v39 >> 31);
      if ((int)result <= v40) {
        uint64_t result = v40;
      }
      else {
        uint64_t result = result;
      }
      if (++v13 == v15)
      {
        *(_WORD *)(v7 + 2) = result;
        v7 += 2;
        v15 += v10;
        uint64_t result = 0;
      }
      else
      {
        *(_WORD *)(v6 + 2) = v40;
        v6 += 2;
      }
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t resample_word_v_3cpp_ap(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    int v8 = *(_DWORD *)(result + 4);
    uint64_t v9 = (__int16 *)(result + 8);
    uint64_t v11 = *(_WORD **)a5;
    int v10 = *(_WORD **)(a5 + 8);
    do
    {
      if (v8)
      {
        int32x2_t v12 = (int32x2_t)0x200000002000;
        int v13 = 0x2000;
        uint64_t v14 = a6;
        int v15 = 0x2000;
        int32x4_t v16 = v9;
        int v17 = v8;
        do
        {
          unsigned int v19 = *v16++;
          unsigned int v18 = v19;
          uint64_t v20 = *v14++;
          int32x2_t v12 = vmla_s32(v12, *(int32x2_t *)(v20 + 4 * v7), vdup_n_s32(v18));
          v15 += *(_DWORD *)(v20 + 4 * (v7 | 2)) * v18;
          v13 += *(_DWORD *)(v20 + 4 * (v7 | 3)) * v18;
          --v17;
        }
        while (v17);
      }
      else
      {
        int32x2_t v12 = (int32x2_t)0x200000002000;
        int v15 = 0x2000;
        int v13 = 0x2000;
      }
      int32x2_t v21 = vshr_n_s32(v12, 0xEuLL);
      int v22 = v15 >> 14;
      int v23 = v13 >> 14;
      if (v22 >= 0xFFFF) {
        int v22 = 0xFFFF;
      }
      unsigned int v24 = v22 & ~(v22 >> 31);
      if (v23 >= 0xFFFF) {
        int v23 = 0xFFFF;
      }
      unsigned int v25 = v23 & ~(v23 >> 31);
      int32x2_t v26 = vmax_s32(vmin_s32(v21, (int32x2_t)0xFFFF0000FFFFLL), 0);
      uint64_t result = v26.u32[0];
      if (v26.i32[0] > v25) {
        unsigned int v25 = v26.i32[0];
      }
      if (v26.i32[1] > v25) {
        unsigned int v25 = v26.u32[1];
      }
      if (v24 > v25) {
        LOWORD(v25) = v24;
      }
      v11[1] = v26.i16[2];
      *uint64_t v11 = v26.i16[0];
      v11[2] = v24;
      v11 += 3;
      *v10++ = v25;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t handleDefaults()
{
  get_BOOLean_property("CGPDFShouldAnnotate", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldAnnotate);
  get_BOOLean_property("CGPDFShouldCompress", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldCompress);
  get_BOOLean_property("CGPDFShouldUsePNGPredictors", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldUsePNGPredictors);
  get_integer_property("CGPDFSecurityHandlerKeyLength", (const void *(*)(const char *))copy_local_domain_value, &securityHandlerKeyLength);
  get_BOOLean_property("CGPDFContextShouldOutputAllImagesAsJPEG", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldOutputAllImagesAsJPEG);
  get_BOOLean_property("CGPDFOptimizeImagesForScreenDisplay", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldOptimizeImagesForScreenDisplay);
  uint64_t result = CGPreferencesGetCGFloat("CGPDFOptimizeImagesCompressionQuality", &optimizeImagesCompressionQuality);
  didHandleDefaults = 1;
  return result;
}

CGPDFOperatorTableRef CGPDFOperatorTableRetain(CGPDFOperatorTableRef table)
{
  if (table) {
    CFRetain(table);
  }
  return table;
}

void CGPDFOperatorTableRelease(CGPDFOperatorTableRef table)
{
  if (table) {
    CFRelease(table);
  }
}

uint64_t _CGExceptionDescription(int a1, const char *a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:fe180100]((uint64_t)v22);
  v27[0] = 40;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  v27[0] = 40;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  size_t v13 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)a2, v13);
  v27[0] = 41;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)" is ", 4);
  if ((a1 - 1) > 2) {
    uint64_t v14 = "Nil";
  }
  else {
    uint64_t v14 = off_1E52CCD90[a1 - 1];
  }
  size_t v15 = strlen(v14);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)v14, v15);
  v27[0] = 41;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  if (a5)
  {
    *(void *)unsigned int v27 = &a9;
    __s = 0;
    vasprintf(&__s, a5, &a9);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)" - ", 3);
    char v26 = 34;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)&v26, 1);
    size_t v16 = strlen(__s);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)__s, v16);
    char v26 = 34;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)&v26, 1);
    free(__s);
  }
  if (a3)
  {
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)" - ", 3);
    int v17 = basename_r(a3, v27);
    size_t v18 = strlen(v17);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)v17, v18);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)" : ", 3);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v22[0] = *MEMORY[0x1E4FBA408];
  uint64_t v19 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v23[0] = v19;
  v23[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18532A250](&v25);
}

void sub_184FBE5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

__n128 recordPreviousInlineInfo(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    [*(id *)(a1 + 56) setLeftSpacerIndex:*(unsigned int *)(v2 + 52)];
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    [*(id *)(a1 + 56) setRightSpacerIndex:*(unsigned int *)(v3 + 52)];
  }
  if (*(void *)(a1 + 64))
  {
    [*(id *)(a1 + 56) setIsListItem:1];
    [*(id *)(a1 + 56) setListSpacerIndex:*(unsigned int *)(*(void *)(a1 + 64) + 52)];
  }
  *(void *)(a1 + 64) = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4 >= 1)
  {
    uint64_t v5 = *(_DWORD **)(a1 + 24);
    if (v5) {
      unsigned int v6 = *v5 + 1;
    }
    else {
      unsigned int v6 = 0;
    }
    unint64_t v7 = *(void *)(a1 + 8) + 72 * *(void *)(a1 + 80);
    unint64_t v8 = v7 + 72 * v4;
    do
    {
      CFArrayRef v9 = *(const __CFArray **)(v7 + 56);
      if (v9)
      {
        if (*(_DWORD *)v7 >= v6) {
          uint64_t v10 = *(_DWORD *)v7 - v6 + 1;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t Count = CFArrayGetCount(v9);
        if (Count)
        {
          for (CFIndex i = 0; i != Count; ++i)
            objc_msgSend(*(id *)(a1 + 56), "anchorChunk:atWordIndex:", CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 56), i), v10);
        }
      }
      v7 += 72;
    }
    while (v7 < v8);
  }
  __n128 result = *(__n128 *)(a1 + 96);
  *(__n128 *)(a1 + 80) = result;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 24) = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  return result;
}

BOOL isSplitBySpacer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 40))
  {
    int v4 = [*(id *)(a3 + 48) count];
    if (v4) {
      *(void *)(a3 + 56) = [*(id *)(a3 + 48) objectAtIndex:(v4 - 1)];
    }
    *(unsigned char *)(a3 + 40) = 0;
  }
  uint64_t v5 = *(unsigned int *)(a3 + 16);
  int v6 = *(_DWORD *)a3;
  if (v5 < *(_DWORD *)(a3 + 20)
    && (uint64_t v7 = *(void *)(a3 + 8), v8 = (_DWORD *)(v7 + 72 * v5), v6 == *v8))
  {
    BOOL v9 = *(unsigned char *)(v7 + 72 * v5 + 64) != 0;
    if (*(unsigned char *)(v7 + 72 * v5 + 64))
    {
      recordPreviousInlineInfo(a3);
      *(void *)(a3 + 32) = v8;
      if (*(void *)(a3 + 24)) {
        *(unsigned char *)(a3 + 40) = 1;
      }
    }
    else
    {
      if (*(unsigned char *)(v7 + 72 * v5 + 48) && !*(void *)(a3 + 72)) {
        *(void *)(a3 + 72) = v8;
      }
      if (*(void *)(v7 + 72 * v5 + 56))
      {
        if (*(void *)(a3 + 104))
        {
          *(void *)(a3 + 104) = (v5 + 1) - *(void *)(a3 + 96);
        }
        else
        {
          *(void *)(a3 + 96) = v5;
          *(void *)(a3 + 104) = 1;
        }
      }
    }
    ++*(_DWORD *)(a3 + 16);
    int v6 = *(_DWORD *)a3;
  }
  else
  {
    BOOL v9 = 0;
  }
  *(_DWORD *)a3 = v6 + 1;
  return v9;
}

void excludeSpacerFromBounds(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  if (a2)
  {
    double v8 = *(double *)(a2 + 8);
    double v9 = *(double *)(a2 + 24);
    double v10 = (a6 + fabs(a4)) * 0.00000011920929 + 1.17549435e-38;
    double v21 = 0.0;
    uint64_t v22 = 0;
    double v11 = CGIntervalExclusion((uint64_t)&v21, v8, v9, a4 - v10, a6 + v10 * 2.0);
    uint64_t v13 = v12;
    if (fabs(v11) == INFINITY)
    {
      uint64_t v14 = *(void *)(a2 + 48);
      *(unsigned char *)(v14 + 170) = 0;
    }
    else
    {
      double v15 = v21;
      if (fabs(v21) != INFINITY)
      {
        unsigned int v16 = *(_DWORD *)(a1 + 8);
        long long v17 = *(_OWORD *)(a2 + 16);
        v20[0] = *(_OWORD *)a2;
        v20[1] = v17;
        long long v18 = *(_OWORD *)(a2 + 48);
        void v20[2] = *(_OWORD *)(a2 + 32);
        v20[3] = v18;
        uint64_t v19 = addSpacer(a1, v16, v20);
        if (v19)
        {
          *(double *)(v19 + 8) = v15;
          *(void *)(v19 + 24) = v22;
          *(void *)(a2 + 40) = v19;
        }
      }
      *(double *)(a2 + 8) = v11;
      *(void *)(a2 + 24) = v13;
      uint64_t v14 = *(void *)(a2 + 48);
    }
    *(unsigned char *)(v14 + 169) = 1;
  }
}

uint64_t preferredSpacer(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    double v2 = *(double *)(a1 + 16);
    double v3 = *(double *)(a2 + 16);
    double v4 = 0.0;
    double v5 = 0.0;
    if (v2 != v3)
    {
      double v5 = 1.0;
      if (v3 != 0.0)
      {
        double v5 = -1.0;
        if (v2 != 0.0) {
          double v5 = (v2 - v3) / (v2 + v3);
        }
      }
    }
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a2 + 48);
    double v8 = *(double *)(a1 + 24);
    double v9 = *(double *)(a2 + 24);
    if (v8 != v9)
    {
      double v4 = 0.5;
      if (v9 != 0.0)
      {
        double v4 = -0.5;
        if (v8 != 0.0) {
          double v4 = (v8 - v9) / (v8 + v9) * 0.5;
        }
      }
    }
    double v10 = v5 + v4;
    unsigned int v11 = *(_DWORD *)(a1 + 32);
    unsigned int v12 = *(_DWORD *)(a2 + 32);
    double v13 = 0.0;
    double v14 = 0.0;
    if ((double)v11 != (double)v12)
    {
      if (v12)
      {
        if (v11) {
          double v14 = ((double)v11 - (double)v12) / ((double)v11 + (double)v12);
        }
        else {
          double v14 = -1.0;
        }
      }
      else
      {
        double v14 = 1.0;
      }
    }
    double v15 = v10 + v14;
    double v16 = *(double *)(v6 + 16);
    double v17 = *(double *)(v7 + 16);
    if (v16 != v17)
    {
      double v13 = 1.0;
      if (v17 != 0.0)
      {
        double v13 = -1.0;
        if (v16 != 0.0) {
          double v13 = (v16 - v17) / (v16 + v17);
        }
      }
    }
    int v18 = *(_DWORD *)(v6 + 32);
    double v19 = v15 + v13;
    double v20 = *(double *)(v6 + 24);
    double v21 = *(double *)(v7 + 24);
    double v22 = 0.0;
    double v23 = 0.0;
    if (v20 != v21)
    {
      double v23 = 1.0;
      if (v21 != 0.0)
      {
        double v23 = -1.0;
        if (v20 != 0.0) {
          double v23 = (v20 - v21) / (v20 + v21);
        }
      }
    }
    double v24 = v19 + v23 * 0.5;
    unsigned int v25 = (*(_DWORD *)(v6 + 56) + *(_DWORD *)(v6 + 44)) * v18;
    unsigned int v26 = (*(_DWORD *)(v7 + 56) + *(_DWORD *)(v7 + 44)) * v18;
    if ((double)v25 != (double)v26)
    {
      if (v26)
      {
        if (v25) {
          double v22 = ((double)v25 - (double)v26) / ((double)v25 + (double)v26);
        }
        else {
          double v22 = -1.0;
        }
      }
      else
      {
        double v22 = 1.0;
      }
    }
    double v27 = v24 + v22 * -2.0;
    unsigned int v28 = *(_DWORD *)(v6 + 68) * v18;
    unsigned int v29 = *(_DWORD *)(v7 + 68) * v18;
    double v30 = 0.0;
    double v31 = 0.0;
    if ((double)v28 != (double)v29)
    {
      double v31 = 1.0;
      double v32 = ((double)v28 - (double)v29) / ((double)v28 + (double)v29);
      if (!v28) {
        double v32 = -1.0;
      }
      if (v29) {
        double v31 = v32;
      }
    }
    double v33 = v27 + v31 * 0.5;
    unsigned int v34 = *(_DWORD *)(v6 + 80) * v18;
    unsigned int v35 = *(_DWORD *)(v7 + 80) * v18;
    double v36 = 1.0;
    double v37 = -1.0;
    double v38 = ((double)v34 - (double)v35) / ((double)v34 + (double)v35);
    if (!v34) {
      double v38 = -1.0;
    }
    if (!v35) {
      double v38 = 1.0;
    }
    if ((double)v34 == (double)v35) {
      double v39 = 0.0;
    }
    else {
      double v39 = v38;
    }
    double v40 = v33 + v39;
    unsigned int v41 = *(unsigned __int8 *)(v6 + 169);
    unsigned int v42 = *(unsigned __int8 *)(v7 + 169);
    if (v41) {
      double v37 = ((double)v41 - (double)v42) / ((double)v41 + (double)v42);
    }
    if (v42) {
      double v36 = v37;
    }
    if ((double)v41 != (double)v42) {
      double v30 = v36;
    }
    if (v40 + v30 >= 0.0) {
      return a1;
    }
  }
  return a2;
}

BOOL isConsistentWithNarrowWordsCommon(double *a1, double a2, double a3, double a4, double a5)
{
  double v5 = a1[2];
  double v6 = 0.0;
  if (fabs(a2) != INFINITY)
  {
    double v6 = -a3;
    if (a3 >= 0.0) {
      double v6 = a3;
    }
    double v7 = -0.0;
    if (a3 < 0.0) {
      double v7 = a3;
    }
    double v8 = a2 + v7;
    double v9 = v6 + v8;
    if (v8 <= v5)
    {
      if (v9 < v5) {
        double v6 = v5 - v8;
      }
    }
    else
    {
      double v6 = v9 - v5;
    }
  }
  double v10 = a1[5] * 0.2;
  if (v6 - a3 <= v10) {
    return 1;
  }
  double v11 = 0.0;
  if (fabs(a4) != INFINITY)
  {
    double v12 = v5 + a1[4];
    double v11 = -a5;
    if (a5 >= 0.0) {
      double v11 = a5;
    }
    double v13 = -0.0;
    if (a5 < 0.0) {
      double v13 = a5;
    }
    double v14 = a4 + v13;
    double v15 = v11 + v14;
    if (v14 <= v12)
    {
      if (v15 < v12) {
        double v11 = v12 - v14;
      }
    }
    else
    {
      double v11 = v15 - v12;
    }
  }
  return v11 - a5 <= v10;
}

uint64_t canSeparateWordRight(uint64_t result, double a2)
{
  if (result)
  {
    double v2 = *(_DWORD **)(result + 48);
    LODWORD(a2) = v2[14];
    double v3 = (double)*(unint64_t *)&a2;
    unsigned int v4 = v2[10];
    double v5 = (double)v4 * 0.5;
    if (v5 <= v3 && v2[20] + v4 >= v2[8])
    {
      LODWORD(v5) = v2[16];
      return (double)*(unint64_t *)&v5 * 0.2 > v3;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t addSpacer(uint64_t a1, unsigned int a2, long long *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 4);
  if (v3 >= *(_DWORD *)a1 || *(_DWORD *)(a1 + 8) < a2) {
    return 0;
  }
  double v6 = (_OWORD *)(*(void *)(a1 + 16) + (v3 << 6));
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[3];
  v6[2] = a3[2];
  v6[3] = v9;
  *double v6 = v7;
  v6[1] = v8;
  unsigned int v10 = *(_DWORD *)(a1 + 8) - a2;
  uint64_t v11 = a2;
  if (v10)
  {
    uint64_t v12 = *(void *)(a1 + 24) + 8 * a2;
    memmove((void *)(v12 + 8), (const void *)v12, 8 * v10);
    a2 = *(_DWORD *)(a1 + 8);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 4);
  *(void *)(*(void *)(a1 + 24) + 8 * v11) = *(void *)(a1 + 16) + (v13 << 6);
  *(_DWORD *)(a1 + 4) = v13 + 1;
  *(_DWORD *)(a1 + 8) = a2 + 1;
  return *(void *)(*(void *)(a1 + 24) + 8 * v11);
}

uint64_t segmentTextLine(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  long long v9 = (_OWORD *)(a5 + 48);
  if (!a3) {
    goto LABEL_9;
  }
  if ([**(id **)(a5 + 8) isMonospaced])
  {
    [**(id **)(a5 + 8) monospaceWidth];
    if (wordsMakeJunctionMonospaced(a2, v6, v10)) {
      goto LABEL_9;
    }
  }
  else if ((*(int *)(v6 + 8) > 1 || (*(unsigned char *)(a2 + 12) & 0xAA) != 0 || (*(unsigned char *)(v6 + 12) & 0x55) != 0) {
         && *(double *)(a2 + 16) + *(double *)(a2 + 32) < *(double *)(v6 + 16))
  }
  {
    goto LABEL_9;
  }
  *(CGRect *)(a5 + 48) = CGRectUnion(*(CGRect *)(a5 + 48), *(CGRect *)(v6 + 16));
  if (a1 + 2 == [**(id **)(a5 + 8) wordCount])
  {
    while (1)
    {
      ++a1;
      a2 = v6;
      uint64_t v6 = 0;
LABEL_9:
      double v11 = *(double *)(a5 + 48);
      double v12 = *(double *)(a5 + 56);
      double v13 = *(double *)(a5 + 64);
      double v14 = v11 + v13;
      double v15 = v12 + *(double *)(a5 + 72);
      uint64_t v16 = *(unsigned int *)(a5 + 32);
      uint64_t v17 = *(void *)(a5 + 24);
      int v18 = (_DWORD *)(v17 + 8);
      unsigned int v19 = *(_DWORD *)(v17 + 8);
      if (v16 < v19) {
        break;
      }
      double v23 = 0;
      double v21 = v11 + v13;
      double v20 = v11 + v13;
LABEL_31:
      if (!v6) {
        goto LABEL_58;
      }
      long long v27 = *(_OWORD *)(v6 + 32);
      *long long v9 = *(_OWORD *)(v6 + 16);
      v9[1] = v27;
      double v28 = *(double *)(v6 + 16);
      uint64_t v29 = *(double *)(a2 + 40) >= *(double *)(v6 + 40) ? v6 : a2;
      double v30 = *(double *)(v29 + 40);
      uint64_t v31 = *(void *)(v29 + 24);
      uint64_t v32 = *(void *)(a5 + 8);
      uint64_t v33 = *(void *)(v32 + 16);
      unsigned int v34 = *(_DWORD *)(a5 + 16);
      uint64_t v35 = v33 + 72 * v34;
      *(_DWORD *)uint64_t v35 = a1;
      *(void *)(v35 + 16) = v31;
      *(double *)(v35 + 24) = v28 - v14;
      *(double *)(v35 + 32) = v30;
      *(unsigned char *)(v35 + 48) = 0;
      *(_DWORD *)(v35 + 52) = 0;
      *(void *)(v35 + 56) = 0;
      *(unsigned char *)(v35 + 64) = 0;
      *(double *)(v35 + 8) = v14;
      double v36 = (double *)(v35 + 8);
      *(_DWORD *)(a5 + 16) = v34 + 1;
      if (v20 <= v14) {
        goto LABEL_48;
      }
      if (v21 < v28 && v23)
      {
        uint64_t v37 = v33 + 72 * v34;
        *(void *)(v37 + 40) = v23;
        double v38 = (double **)(v37 + 40);
        if (v20 <= v28)
        {
          uint64_t v39 = (v16 + 1);
          double v40 = v23;
          do
          {
            uint64_t v16 = v39;
            if (!*((unsigned char *)v40 + 56))
            {
              double v30 = v15 - v40[1];
              v40[3] = v30;
              ++*((_DWORD *)v40 + 8);
            }
            uint64_t v41 = *(void *)(a5 + 24);
            if (v16 >= *(_DWORD *)(v41 + 8)) {
              break;
            }
            double v40 = *(double **)(*(void *)(v41 + 24) + 8 * v16);
            if (!*((unsigned char *)v40 + 56))
            {
              double v30 = *v40;
              double v20 = *v40 + v40[2];
              if (*v40 < v28)
              {
                double v23 = mergeLinkage(v23, v40);
                *double v38 = v23;
              }
            }
            uint64_t v39 = v16 + 1;
          }
          while (v20 <= v28);
        }
      }
      else
      {
LABEL_48:
        int started = startSpacersAtJunction(*(void *)(a5 + 24), v16, *(_DWORD *)a5, (id *)v32, 1, *v36, v36[1], v36[2], v36[3]);
        *(void *)(v33 + 72 * v34 + 40) = *(void *)(*(void *)(*(void *)(a5 + 24) + 24)
                                                       + 8 * v16);
        LODWORD(v16) = started + v16;
      }
      *(void *)(a5 + 40) = 0;
      if (a1 + 2 != objc_msgSend(**(id **)(a5 + 8), "wordCount", v30))
      {
LABEL_58:
        *(_DWORD *)(a5 + 32) = v16;
        return 1;
      }
      *(_DWORD *)(a5 + 32) = v16;
    }
    double v20 = v11 + v13;
    double v21 = v11 + v13;
    while (1)
    {
      uint64_t v22 = *(void *)(v17 + 24) + 8 * v16;
      double v23 = *(double **)v22;
      if (!*(unsigned char *)(*(void *)v22 + 56)) {
        break;
      }
LABEL_20:
      uint64_t v16 = (v16 + 1);
      uint64_t v17 = *(void *)(a5 + 24);
      int v18 = (_DWORD *)(v17 + 8);
      unsigned int v19 = *(_DWORD *)(v17 + 8);
      if (v16 >= v19) {
        goto LABEL_31;
      }
    }
    double v21 = *v23;
    double v20 = *v23 + v23[2];
    if (v20 > v11)
    {
      if (v21 >= v14)
      {
        *(void *)(a5 + 40) = 0;
        goto LABEL_31;
      }
      if (v21 >= v11)
      {
        if (v20 > v14)
        {
          *double v23 = v14;
          double v45 = v15 - v23[1];
          v23[2] = v20 - v14;
          v23[3] = v45;
          goto LABEL_31;
        }
        unsigned int v25 = *(double **)(a5 + 40);
        if (!v25 || v16 != *(_DWORD *)(a5 + 32))
        {
          v23[3] = v12 - v23[1];
          *((unsigned char *)v23 + 56) = 1;
          *(void *)(a5 + 40) = 0;
          goto LABEL_20;
        }
        v25[5] = v23[5];
        double v21 = *v25;
        *int v18 = v19 - 1;
        if (v19 - 1 != v16) {
          memmove((void *)v22, (const void *)(v22 + 8), 8 * (v19 - 1 - v16));
        }
        LODWORD(v16) = v16 - 1;
        --*((_DWORD *)v25 + 8);
        int v26 = *((unsigned __int8 *)v25 + 56);
        *(void *)(a5 + 40) = 0;
        if (v26) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      double v24 = v23[1];
      v23[2] = v11 - v21;
      v23[3] = v15 - v24;
      if (v20 > v14)
      {
        ++*((_DWORD *)v23 + 8);
        long long v43 = *((_OWORD *)v23 + 3);
        long long v50 = *((_OWORD *)v23 + 2);
        long long v51 = v43;
        *(void *)(a5 + 40) = v23;
        uint64_t v16 = (v16 + 1);
        *(double *)&long long v47 = v14;
        *((double *)&v47 + 1) = v24;
        double v48 = v20 - v14;
        double v49 = v15 - v24;
        uint64_t v44 = addSpacer(v17, v16, &v47);
        double v23 = *(double **)(a5 + 40);
        if (v44)
        {
          *((void *)v23 + 5) = v44;
          double v21 = v14;
          double v23 = (double *)v44;
        }
        else
        {
          *(void *)(a5 + 40) = 0;
          double v21 = v14;
        }
        goto LABEL_31;
      }
      *(void *)(a5 + 40) = 0;
    }
    unsigned int v25 = v23;
LABEL_18:
    ++*((_DWORD *)v25 + 8);
LABEL_19:
    double v23 = v25;
    goto LABEL_20;
  }
  return 1;
}

BOOL wordsMakeJunctionMonospaced(uint64_t a1, uint64_t a2, double a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (a3 < 4.0)
  {
    if (v3 > 1 || (*(unsigned char *)(a1 + 12) & 0xAA) != 0 || (*(unsigned char *)(a2 + 12) & 0x55) != 0) {
      return *(double *)(a1 + 16) + *(double *)(a1 + 32) < *(double *)(a2 + 16);
    }
    return 0;
  }
  if (v3 < 2) {
    return 0;
  }
  return (uint64_t)rint((*(double *)(a2 + 16) - *(double *)(a1 + 16) - *(double *)(a1 + 32)) / a3) > 1;
}

double *mergeLinkage(double *a1, double *a2)
{
  unsigned int v2 = 0;
  if (a1)
  {
    int v3 = a1;
    do
    {
      ++v2;
      int v3 = (double *)*((void *)v3 + 5);
    }
    while (v3);
  }
  unsigned int v4 = 0;
  if (a2)
  {
    double v5 = a2;
    do
    {
      ++v4;
      double v5 = (double *)*((void *)v5 + 5);
    }
    while (v5);
  }
  uint64_t v6 = a1;
  if (v2 > v4)
  {
    do
    {
      uint64_t v6 = (double *)*((void *)v6 + 5);
      --v2;
    }
    while (v2 > v4);
    unsigned int v2 = v4;
  }
  long long v7 = a2;
  if (v4 > v2)
  {
    long long v7 = a2;
    do
    {
      long long v7 = (double *)*((void *)v7 + 5);
      --v4;
    }
    while (v4 > v2);
  }
  while (v6 != v7)
  {
    uint64_t v6 = (double *)*((void *)v6 + 5);
    long long v7 = (double *)*((void *)v7 + 5);
  }
  if (v6 == a2) {
    return a1;
  }
  if (v6 == a1) {
    return a2;
  }
  double v8 = *a1;
  if (*a1 <= *a2) {
    long long v9 = a1;
  }
  else {
    long long v9 = a2;
  }
  if (*a1 > *a2)
  {
    double v10 = a1;
  }
  else
  {
    double v8 = *a2;
    double v10 = a2;
  }
  double v11 = v9;
  while (1)
  {
    double v12 = v11;
    double v11 = (double *)*((void *)v11 + 5);
    if (v11 == v6 || v11 == 0) {
      break;
    }
    double v14 = *v11;
    if (*v11 > v8)
    {
      *((void *)v12 + 5) = v10;
      for (uint64_t i = *((void *)v10 + 5); (double *)i != v6 && i != 0; uint64_t i = *(void *)(i + 40))
      {
        double v8 = *(double *)i;
        if (*(double *)i > v14) {
          break;
        }
        double v10 = (double *)i;
      }
      *((void *)v10 + 5) = v11;
      BOOL v17 = (double *)i == v6 || i == 0;
      double v10 = (double *)i;
      if (v17) {
        return v9;
      }
    }
  }
  *((void *)v12 + 5) = v10;
  return v9;
}

uint64_t startSpacersAtJunction(uint64_t a1, uint64_t a2, int a3, id *a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9 = a5;
  double v10 = a6;
  double v13 = a6 + a8;
  double v14 = a7 + a9;
  uint64_t v61 = 0;
  if (a5 >= 0xFB)
  {
    double v25 = a7;
    uint64_t v15 = 0;
    uint64_t v37 = 0;
    double v36 = v13 - a6;
    double v35 = v14 - a7;
    goto LABEL_28;
  }
  uint64_t v15 = 0;
  if (!a3)
  {
LABEL_23:
    [*a4 bounds];
    double v25 = v34;
    double v35 = v14 - v34;
    goto LABEL_24;
  }
  uint64_t v16 = (a3 - 1);
  BOOL v17 = a4 - 3;
  while (1)
  {
    [*v17 bounds];
    double v22 = v18.n128_f64[0] + v20;
    if (v13 > v18.n128_f64[0] && v10 < v22) {
      break;
    }
LABEL_21:
    uint64_t v9 = (v9 + 1);
    uint64_t v16 = (v16 - 1);
    v17 -= 3;
    if (v16 == -1)
    {
      a4 = v17 + 3;
      goto LABEL_23;
    }
  }
  double v24 = v18.n128_f64[0];
  double v25 = v19 + v21;
  if (v10 < v18.n128_f64[0])
  {
    if (v13 > v22)
    {
      v18.n128_f64[0] = v18.n128_f64[0] + v20;
      int started = startSpacersAtJunction(a1, a2, v18, v19, v13 - v22, v14 - v19);
      int v27 = started;
      if (v15 && started)
      {
        uint64_t v28 = *(void *)(a1 + 24);
        uint64_t v29 = *(void *)(v28 + 8 * (started + a2 - 1));
        *(void *)(v29 + 40) = mergeLinkage(*(double **)(v29 + 40), *(double **)(v28 + 8 * (started + a2)));
      }
      LODWORD(v15) = v27 + v15;
    }
    if (v14 < v25) {
      double v14 = v25;
    }
    v18.n128_f64[0] = v10;
    int v30 = passSpacersThroughJunctions(a1, a2, v18, v25, v13 - v10, v14 - v25, v16, (uint64_t)v17, v9, &v61);
    int v31 = v30;
    if (v15 && v30)
    {
      uint64_t v32 = *(void *)(a1 + 24);
      uint64_t v33 = *(void *)(v32 + 8 * (v30 + a2 - 1));
      *(void *)(v33 + 40) = mergeLinkage(*(double **)(v33 + 40), *(double **)(v32 + 8 * (v30 + a2)));
    }
    uint64_t v15 = (v31 + v15);
    double v13 = v24;
    goto LABEL_21;
  }
  if (v13 <= v22)
  {
    double v39 = v13 - v10;
  }
  else
  {
    double v39 = v13 - v22;
    v18.n128_f64[0] = v18.n128_f64[0] + v20;
    int v40 = startSpacersAtJunction(a1, a2, v18, v19, v13 - v22, v14 - v19);
    int v41 = v40;
    if (v15 && v40)
    {
      uint64_t v42 = *(void *)(a1 + 24);
      uint64_t v43 = *(void *)(v42 + 8 * (v40 + a2 - 1));
      *(void *)(v43 + 40) = mergeLinkage(*(double **)(v43 + 40), *(double **)(v42 + 8 * (v40 + a2)));
    }
    uint64_t v15 = (v41 + v15);
    double v10 = v22;
  }
  if (v14 >= v25) {
    v18.n128_f64[0] = v14;
  }
  else {
    v18.n128_f64[0] = v25;
  }
  double v35 = v18.n128_f64[0] - v25;
  v18.n128_f64[0] = v10;
  int v44 = passSpacersThroughJunctions(a1, a2, v18, v25, v39, v35, v16, (uint64_t)v17, v9, &v61);
  int v45 = v44;
  if (v15 && v44)
  {
    uint64_t v46 = *(void *)(a1 + 24);
    unsigned int v47 = v44 + a2;
    uint64_t v48 = *(void *)(v46 + 8 * (v44 + a2 - 1));
    *(void *)(v48 + 40) = mergeLinkage(*(double **)(v48 + 40), *(double **)(v46 + 8 * v47));
    return (v45 + v15);
  }
  if (v13 > v22 || v44 != 0) {
    return (v45 + v15);
  }
LABEL_24:
  double v36 = v13 - v10;
  if (v15) {
    uint64_t v37 = *(void *)(*(void *)(a1 + 24) + 8 * a2);
  }
  else {
    uint64_t v37 = 0;
  }
LABEL_28:
  char v59 = 0;
  __int16 v58 = 0;
  *(double *)&long long v50 = v10;
  *((double *)&v50 + 1) = v25;
  double v51 = v36;
  double v52 = v35;
  int v53 = v9;
  int v54 = 0;
  uint64_t v55 = v37;
  uint64_t v56 = 0;
  char v57 = 0;
  int v60 = 0;
  if (addSpacer(a1, a2, &v50))
  {
    if (v61) {
      mergeLinkage(*(double **)(*(void *)(a1 + 24) + 8 * a2), v61);
    }
    return (v15 + 1);
  }
  return v15;
}

uint64_t passSpacersThroughJunctions(uint64_t a1, uint64_t a2, __n128 a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, double **a10)
{
  unsigned int v11 = a2;
  double v13 = a3.n128_f64[0] + a5;
  double v14 = a4 + a6;
  uint64_t v15 = *(unsigned int *)(a8 + 8);
  uint64_t v16 = 72 * v15;
  do
  {
    if (!v16) {
      return 0;
    }
    uint64_t v17 = *(void *)(a8 + 16);
    double v18 = *(double *)(v17 + v16 - 64);
    double v19 = v18 + *(double *)(v17 + v16 - 48);
    if (v19 <= a3.n128_f64[0]) {
      return 0;
    }
    v16 -= 72;
    --v15;
  }
  while (v18 >= v13);
  uint64_t v20 = v17 + v16;
  if (v18 >= a3.n128_f64[0]) {
    a3.n128_f64[0] = v18;
  }
  if (v19 <= v13) {
    double v13 = v19;
  }
  uint64_t started = startSpacersAtJunction(a1, a2, a3, *(double *)(v20 + 16), v13 - a3.n128_f64[0], v14 - *(double *)(v20 + 16));
  uint64_t v22 = v17 + 72 * v15;
  double v25 = *(double **)(v22 + 40);
  double v24 = (double **)(v22 + 40);
  double v23 = v25;
  if (started)
  {
    double v23 = mergeLinkage(v23, *(double **)(*(void *)(a1 + 24) + 8 * v11));
    *double v24 = v23;
  }
  if (*a10) {
    double v23 = mergeLinkage(*a10, v23);
  }
  *a10 = v23;
  return started;
}

uint64_t countJunctions(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if ((*(int *)(a2 + 8) > 1 || (*(unsigned char *)(a1 + 12) & 0xAA) != 0 || (*(unsigned char *)(a2 + 12) & 0x55) != 0)
    && *(double *)(a1 + 16) + *(double *)(a1 + 32) < *(double *)(a2 + 16))
  {
    ++*a4;
  }
  return 1;
}

uint64_t countJunctionsMonospaced(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (wordsMakeJunctionMonospaced(a1, a2, *(double *)(a4 + 8))) {
    ++**(_DWORD **)a4;
  }
  return 1;
}

uint64_t compareSegmentationsBottomAscendingLeftDescending(id *a1, id *a2)
{
  [*a1 bounds];
  double v4 = v3;
  double v6 = v5;
  [*a2 bounds];
  if (v6 < v8) {
    return 0xFFFFFFFFLL;
  }
  if (v6 > v8) {
    return 1;
  }
  if (v4 <= v7) {
    return v4 < v7;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t PDFImageEmitData(uint64_t a1, CGImage *image)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  if (image) {
    uint64_t v4 = *((void *)image + 5);
  }
  else {
    uint64_t v4 = 0;
  }
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v122 = 0u;
  uint64_t v120 = v4;
  BYTE8(v125) = ((unsigned __int16)CGImageGetBitmapInfo(image) >> 8) & 1;
  if (image && (*((unsigned char *)image + 39) & 2) != 0)
  {
    uint64_t v6 = 1;
    uint64_t v121 = 1;
LABEL_11:
    unint64_t v8 = *((void *)image + 7);
    uint64_t v7 = *((void *)image + 8);
    *(void *)&long long v123 = v8;
    goto LABEL_13;
  }
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace(image);
  if (ColorSpace) {
    uint64_t v6 = *(void *)(*((void *)ColorSpace + 3) + 48);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v121 = v6;
  if (image) {
    goto LABEL_11;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  *(void *)&long long v123 = 0;
LABEL_13:
  unint64_t v9 = v7 - v8 * v6;
  CGBitmapInfo v16 = CGImageGetBitmapInfo(image) & 0x1F;
  if (v16)
  {
    if (v16 == 6)
    {
      long long v122 = v9;
      if (image) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    if (v16 != 5)
    {
      long long v122 = 0uLL;
      if (image) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
  *(void *)&long long v122 = 0;
  *((void *)&v122 + 1) = v9;
  if (image)
  {
LABEL_17:
    size_t v17 = *((void *)image + 9);
    goto LABEL_20;
  }
LABEL_19:
  size_t v17 = 0;
LABEL_20:
  *((void *)&v123 + 1) = v17;
  if (v8 <= 8)
  {
    if (((1 << v8) & 0x116) != 0)
    {
      *(void *)&long long v124 = v8;
      unint64_t v18 = v8;
      goto LABEL_30;
    }
    if (((1 << v8) & 0xE0) != 0)
    {
      unint64_t v18 = 8;
LABEL_29:
      *(void *)&long long v124 = v18;
      goto LABEL_30;
    }
    if (v8 == 3)
    {
      unint64_t v18 = 4;
      goto LABEL_29;
    }
  }
  if (v8 > 0x20)
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/BitsPerComponent 1", v10, v11, v12, v13, v14, v15, v109);
    PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
    uint64_t v104 = *(void **)(a1 + 16);
    return PDFStreamEndData(v104);
  }
  *(void *)&long long v124 = 16;
  uint64_t v105 = *(void *)(a1 + 8);
  int v106 = *(_DWORD *)(v105 + 4);
  if (v106 <= 0)
  {
    *(_DWORD *)(v105 + 4) = 1;
    uint64_t v107 = (_DWORD *)(v105 + 8);
  }
  else
  {
    if (v106 != 1) {
      goto LABEL_83;
    }
    int v108 = *(_DWORD *)(v105 + 8);
    uint64_t v107 = (_DWORD *)(v105 + 8);
    if (v108 > 4) {
      goto LABEL_83;
    }
  }
  *uint64_t v107 = 5;
LABEL_83:
  unint64_t v18 = 16;
LABEL_30:
  unint64_t v19 = (v6 * v4 * v18 + 7) >> 3;
  *((void *)&v124 + 1) = v19;
  *(void *)&long long v125 = 0;
  *(void *)&long long v126 = 0;
  if (v8 >= v18)
  {
    double v21 = 0;
    if (v8 > v18) {
      *(void *)&long long v125 = v8 - v18;
    }
  }
  else
  {
    unint64_t v20 = ~(-1 << v8);
    double v21 = (char *)malloc_type_malloc(2 * v20 + 2, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    uint64_t v22 = 0;
    *(void *)&long long v126 = v21;
    unint64_t v23 = v20 >> 1;
    do
    {
      if (v8) {
        unint64_t v24 = v23 / v20;
      }
      else {
        LOWORD(v24) = 0;
      }
      *(_WORD *)&v21[v22] = v24;
      v22 += 2;
      v23 += ~(-1 << v18);
    }
    while (2 * v20 + 2 != v22);
  }
  double v25 = malloc_type_malloc(v17, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  *((void *)&v126 + 1) = v25;
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/BitsPerComponent %d", v26, v27, v28, v29, v30, v31, v18);
  uint64_t v32 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v32 + 73)) {
    goto LABEL_43;
  }
  int v33 = 0;
  if (v18 == 8 && *(unsigned char *)(v32 + 89))
  {
    CGColorSpaceRef v34 = CGImageGetColorSpace(image);
    if (CGColorSpaceGetType(v34) == 7)
    {
LABEL_43:
      int v33 = 0;
      goto LABEL_45;
    }
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/DecodeParms <<", v35, v36, v37, v38, v39, v40, v110);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Predictor 15", v41, v42, v43, v44, v45, v46, v111);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Colors %d", v47, v48, v49, v50, v51, v52, v6);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Columns %d", v53, v54, v55, v56, v57, v58, v4);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/BitsPerComponent %d", v59, v60, v61, v62, v63, v64, 8);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v65, v66, v67, v68, v69, v70, v112);
    int v33 = 1;
  }
LABEL_45:
  PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
  CGBitmapInfo v71 = CGImageGetBitmapInfo(image) & 0x7000;
  if (v71 == 0x2000)
  {
    DataProviderInternal = CGImageGetDataProviderInternal((char *)image, 0);
    int v73 = 4;
  }
  else
  {
    if (v71 != 4096)
    {
      uint64_t v74 = (CGDataProvider *)CGImageGetDataProviderInternal((char *)image, 0);
      CGDataProviderRetain(v74);
      goto LABEL_51;
    }
    DataProviderInternal = CGImageGetDataProviderInternal((char *)image, 0);
    int v73 = 2;
  }
  uint64_t v74 = CGDataProviderCreateWithSwappedProvider((CGDataProviderRef)DataProviderInternal, v73);
LABEL_51:
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  uint64_t v116 = CGAccessSessionCreate(v74);
  if (v33)
  {
    uint64_t v113 = v74;
    unint64_t v75 = v18 * v6 + 7;
    size_t v76 = v19 + (v75 >> 3);
    double v77 = (char *)malloc_type_calloc(1uLL, v76, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    uint64_t v128 = v77;
    CFTypeRef v78 = malloc_type_calloc(1uLL, v76, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    uint64_t v129 = v78;
    if (image)
    {
      CGRect v84 = v116;
      uint64_t v115 = *((void *)image + 6);
      if (v115)
      {
        uint64_t v85 = 0;
        unint64_t v119 = v75 >> 3;
        uint64_t v114 = a1;
        do
        {
          CGRect v86 = &(&v128)[v85 & 1][v119];
          uint64_t v118 = v85 + 1;
          CGRect v87 = &(&v128)[(v85 + 1) & 1][v119];
          unpackImageRow(v84, (uint64_t)&v120, v87, v79, v80, v81, v82, v83);
          uint64_t v117 = *(void *)(a1 + 16);
          size_t v88 = *((void *)&v124 + 1);
          uint64_t v89 = malloc_type_malloc(*((size_t *)&v124 + 1), 0x5693A1CuLL);
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          LOBYTE(a1) = 0;
          uint64_t v92 = 0xFFFFFFFFLL;
          do
          {
            uint64_t v93 = (*(uint64_t (**)(char *, char *, size_t, unint64_t, uint64_t, void *))&filters[v90 + 2])(v87, v86, v88, v119, v92, v89);
            if (v93 < v92)
            {
              uint64_t v94 = v93;
              free(v91);
              LODWORD(a1) = filters[v90];
              if (!v94)
              {
                char v127 = filters[v90];
                a1 = v114;
                CGRect v84 = v116;
                uint64_t v85 = v118;
                goto LABEL_64;
              }
              uint64_t v91 = v89;
              uint64_t v89 = malloc_type_malloc(v88, 0xA559D238uLL);
              uint64_t v92 = v94;
            }
            v90 += 4;
          }
          while (v90 != 20);
          char v127 = a1;
          if (v89 != v91) {
            free(v89);
          }
          uint64_t v89 = v91;
          a1 = v114;
          CGRect v84 = v116;
          uint64_t v85 = v118;
LABEL_64:
          CGDataConsumerPutBytes(*(void *)(v117 + 24), (uint64_t)&v127, 1);
          CGDataConsumerPutBytes(*(void *)(v117 + 24), (uint64_t)v89, v88);
          free(v89);
        }
        while (v85 != v115);
        double v77 = v128;
        CFTypeRef v78 = v129;
        double v25 = (void *)*((void *)&v126 + 1);
        double v21 = (char *)v126;
        uint64_t v74 = v113;
      }
    }
    else
    {
      CGRect v84 = v116;
    }
    free(v78);
    uint64_t v102 = v77;
  }
  else
  {
    uint64_t v95 = (char *)malloc_type_calloc(1uLL, v19, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    uint64_t v128 = v95;
    CGRect v84 = v116;
    if (image)
    {
      for (uint64_t i = *((void *)image + 6); i; --i)
      {
        unpackImageRow(v116, (uint64_t)&v120, v95, v96, v97, v98, v99, v100);
        CGDataConsumerPutBytes(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v95, v19);
      }
    }
    uint64_t v102 = v95;
  }
  free(v102);
  CGAccessSessionRelease(v84);
  CGDataProviderRelease(v74);
  free(v25);
  free(v21);
  return PDFStreamEndData(*(void **)(a1 + 16));
}

void unpackImageRow(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a2 + 16)
    && !*(void *)(a2 + 24)
    && *(void *)(a2 + 32) == *(void *)(a2 + 48)
    && !*(unsigned char *)(a2 + 72))
  {
    unint64_t v77 = *(void *)(a2 + 56);
    if (v77 > *(void *)(a2 + 40)) {
      _CGHandleAssert("unpackImageRow", 120, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/Images/PDFImageEmit.c", "info->dstBytesPerRow <= info->srcBytesPerRow", "dest bpr %lu  src bpr: %lu", a6, a7, a8, *(void *)(a2 + 56));
    }
    CGAccessSessionGetBytes(a1, a3, v77, a4, a5, a6, a7, a8);
    unint64_t v83 = *(void *)(a2 + 56);
    unint64_t v84 = *(void *)(a2 + 40);
    if (v84 > v83)
    {
      uint64_t v85 = *(char **)(a2 + 88);
      CGAccessSessionGetBytes(a1, v85, v84 - v83, v78, v79, v80, v81, v82);
    }
    return;
  }
  CGAccessSessionGetBytes(a1, *(char **)(a2 + 88), *(void *)(a2 + 40), a4, a5, a6, a7, a8);
  uint64_t v11 = *(unsigned __int8 **)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = (unsigned __int8 **)malloc_type_malloc(0x28uLL, 0x1050040F264A4C2uLL);
  *uint64_t v13 = v11;
  void v13[2] = &v11[v12];
  *((_DWORD *)v13 + 6) = 0;
  v13[4] = 0;
  uint64_t v14 = malloc_type_malloc(0x28uLL, 0x1050040F264A4C2uLL);
  v14[1] = a3;
  v14[2] = 0;
  *((_DWORD *)v14 + 6) = 0;
  v14[4] = 0;
  if (!*(void *)a2) {
    goto LABEL_94;
  }
  unint64_t v15 = 0;
  do
  {
    unint64_t v16 = *(void *)(a2 + 16);
    if (v16)
    {
      unint64_t v17 = v16 - 24;
      if (v16 <= 0x18)
      {
        unint64_t v24 = v13[4];
        unint64_t v17 = *(void *)(a2 + 16);
      }
      else
      {
        unint64_t v18 = (unint64_t)v13[4];
        if (v18 > 0x17)
        {
          unint64_t v22 = (unint64_t)v13[4];
        }
        else
        {
          unint64_t v19 = (unint64_t)v13[2];
          int v20 = *((_DWORD *)v13 + 6);
          double v21 = *v13;
          do
          {
            v20 <<= 8;
            *((_DWORD *)v13 + 6) = v20;
            if ((unint64_t)v21 < v19)
            {
              *uint64_t v13 = v21 + 1;
              v20 |= *v21;
              *((_DWORD *)v13 + 6) = v20;
              ++v21;
            }
            unint64_t v22 = v18 + 8;
            v13[4] = (unsigned __int8 *)(v18 + 8);
            _CF = v18 >= 0x10;
            v18 += 8;
          }
          while (!_CF);
        }
        unint64_t v24 = (unsigned __int8 *)(v22 - 24);
        v13[4] = (unsigned __int8 *)(v22 - 24);
      }
      if ((unint64_t)v24 < v17)
      {
        unint64_t v25 = (unint64_t)v13[2];
        int v26 = *((_DWORD *)v13 + 6);
        uint64_t v27 = *v13;
        do
        {
          v26 <<= 8;
          *((_DWORD *)v13 + 6) = v26;
          if ((unint64_t)v27 < v25)
          {
            *uint64_t v13 = v27 + 1;
            v26 |= *v27;
            *((_DWORD *)v13 + 6) = v26;
            ++v27;
          }
          v24 += 8;
          v13[4] = v24;
        }
        while ((unint64_t)v24 < v17);
      }
      v13[4] = &v24[-v17];
    }
    unint64_t v28 = *(void *)(a2 + 8);
    if (v28)
    {
      for (unint64_t i = 0; i < v28; ++i)
      {
        unint64_t v30 = *(void *)(a2 + 32);
        unint64_t v31 = v30 - 24;
        if (v30 <= 0x18)
        {
          int v37 = 0;
          unint64_t v38 = (unint64_t)v13[4];
          unint64_t v31 = *(void *)(a2 + 32);
        }
        else
        {
          unint64_t v32 = (unint64_t)v13[4];
          if (v32 >= 0x18)
          {
            unsigned int v34 = *((_DWORD *)v13 + 6);
          }
          else
          {
            unint64_t v33 = (unint64_t)v13[2];
            unsigned int v34 = *((_DWORD *)v13 + 6);
            unint64_t v35 = (unint64_t)v13[4];
            uint64_t v36 = *v13;
            do
            {
              v34 <<= 8;
              *((_DWORD *)v13 + 6) = v34;
              if ((unint64_t)v36 < v33)
              {
                *uint64_t v13 = v36 + 1;
                v34 |= *v36;
                *((_DWORD *)v13 + 6) = v34;
                ++v36;
              }
              unint64_t v32 = v35 + 8;
              v13[4] = (unsigned __int8 *)(v35 + 8);
              _CF = v35 >= 0x10;
              v35 += 8;
            }
            while (!_CF);
          }
          unint64_t v38 = v32 - 24;
          v13[4] = (unsigned __int8 *)(v32 - 24);
          int v37 = ((v34 >> (v32 - 24)) & 0xFFFFFF) << v31;
        }
        if (v38 >= v31)
        {
          unsigned int v40 = *((_DWORD *)v13 + 6);
        }
        else
        {
          unint64_t v39 = (unint64_t)v13[2];
          unsigned int v40 = *((_DWORD *)v13 + 6);
          uint64_t v41 = *v13;
          do
          {
            v40 <<= 8;
            *((_DWORD *)v13 + 6) = v40;
            if ((unint64_t)v41 < v39)
            {
              *uint64_t v13 = v41 + 1;
              v40 |= *v41;
              *((_DWORD *)v13 + 6) = v40;
              ++v41;
            }
            v38 += 8;
            v13[4] = (unsigned __int8 *)v38;
          }
          while (v38 < v31);
        }
        uint64_t v42 = (unsigned __int8 *)(v38 - v31);
        v13[4] = v42;
        LODWORD(v43) = (v40 >> (char)v42) & (0xFFFFFFFF >> -(char)v31) | v37;
        if (*(unsigned char *)(a2 + 72))
        {
          if (v30 == 16)
          {
            unint64_t v45 = *(void *)(a2 + 48);
            __asm { FCMP            H2, #0 }
            if (_NF)
            {
LABEL_57:
              unsigned int v49 = 0;
              LOWORD(v46) = 0;
              goto LABEL_62;
            }
            int v46 = ~(-1 << v45);
            if (_H2 > COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)))
            {
LABEL_59:
              unsigned int v49 = v46 & 0x7FFF0000;
              goto LABEL_62;
            }
            __asm { FCVT            S2, H2 }
            goto LABEL_61;
          }
          if (v30 == 32)
          {
            _S2 = v43;
            unint64_t v45 = *(void *)(a2 + 48);
            if (v43 < 0.0) {
              goto LABEL_57;
            }
            int v46 = ~(-1 << v45);
            if (_S2 > 1.0) {
              goto LABEL_59;
            }
LABEL_61:
            int v46 = (float)(_S2 * (float)v46);
            unsigned int v49 = v46 & 0xFFFF0000;
            goto LABEL_62;
          }
        }
        uint64_t v47 = *(void *)(a2 + 80);
        if (v47)
        {
          unsigned int v48 = 0;
          LOWORD(v43) = *(_WORD *)(v47 + 2 * LODWORD(v43));
        }
        else
        {
          unsigned int v48 = LODWORD(v43) & 0xFFFF0000;
        }
        int v46 = (v48 | LOWORD(v43)) >> *(_DWORD *)(a2 + 64);
        unsigned int v49 = v46 & 0xFFFF0000;
        unint64_t v45 = *(void *)(a2 + 48);
LABEL_62:
        unsigned int v54 = (unsigned __int16)v46 | v49;
        if (v45 >= 0x19)
        {
          unint64_t v55 = v14[4];
          if (v55 >= 8)
          {
            do
            {
              unint64_t v56 = v55 - 8;
              v14[4] = v56;
              LODWORD(v56) = *((_DWORD *)v14 + 6) >> v56;
              uint64_t v57 = (unsigned char *)v14[1];
              v14[1] = v57 + 1;
              *uint64_t v57 = v56;
              unint64_t v55 = v14[4];
            }
            while (v55 > 7);
          }
          v45 -= 24;
          *((_DWORD *)v14 + 6) = (v54 >> v45) & 0xFFFFFF | (*((_DWORD *)v14 + 6) << 24);
          for (unint64_t j = v55 | 0x18; j > 7; unint64_t j = v14[4])
          {
LABEL_67:
            v14[4] = j - 8;
            int v59 = *((_DWORD *)v14 + 6) >> (j - 8);
            uint64_t v60 = (unsigned char *)v14[1];
            v14[1] = v60 + 1;
            *uint64_t v60 = v59;
          }
          unint64_t v28 = *(void *)(a2 + 8);
          goto LABEL_69;
        }
        unint64_t j = v14[4];
        if (j >= 8) {
          goto LABEL_67;
        }
LABEL_69:
        *((_DWORD *)v14 + 6) = (0xFFFFFFFF >> -(char)v45) & v54 | (*((_DWORD *)v14 + 6) << v45);
        v14[4] = j + v45;
      }
    }
    unint64_t v61 = *(void *)(a2 + 24);
    if (v61)
    {
      unint64_t v62 = v61 - 24;
      if (v61 <= 0x18)
      {
        uint64_t v68 = v13[4];
        unint64_t v62 = *(void *)(a2 + 24);
      }
      else
      {
        unint64_t v63 = (unint64_t)v13[4];
        if (v63 > 0x17)
        {
          unint64_t v67 = (unint64_t)v13[4];
        }
        else
        {
          unint64_t v64 = (unint64_t)v13[2];
          int v65 = *((_DWORD *)v13 + 6);
          uint64_t v66 = *v13;
          do
          {
            v65 <<= 8;
            *((_DWORD *)v13 + 6) = v65;
            if ((unint64_t)v66 < v64)
            {
              *uint64_t v13 = v66 + 1;
              v65 |= *v66;
              *((_DWORD *)v13 + 6) = v65;
              ++v66;
            }
            unint64_t v67 = v63 + 8;
            v13[4] = (unsigned __int8 *)(v63 + 8);
            _CF = v63 >= 0x10;
            v63 += 8;
          }
          while (!_CF);
        }
        uint64_t v68 = (unsigned __int8 *)(v67 - 24);
        v13[4] = (unsigned __int8 *)(v67 - 24);
      }
      if ((unint64_t)v68 < v62)
      {
        unint64_t v69 = (unint64_t)v13[2];
        int v70 = *((_DWORD *)v13 + 6);
        CGBitmapInfo v71 = *v13;
        do
        {
          v70 <<= 8;
          *((_DWORD *)v13 + 6) = v70;
          if ((unint64_t)v71 < v69)
          {
            *uint64_t v13 = v71 + 1;
            v70 |= *v71;
            *((_DWORD *)v13 + 6) = v70;
            ++v71;
          }
          v68 += 8;
          v13[4] = v68;
        }
        while ((unint64_t)v68 < v62);
      }
      v13[4] = &v68[-v62];
    }
    ++v15;
  }
  while (v15 < *(void *)a2);
  for (unint64_t k = v14[4]; k; v14[4] = k)
  {
    unint64_t m = k;
    if (k >= 8)
    {
      for (unint64_t m = k; m > 7; unint64_t m = v14[4])
      {
        unint64_t v74 = m - 8;
        v14[4] = v74;
        LODWORD(v74) = *((_DWORD *)v14 + 6) >> v74;
        unint64_t v75 = (unsigned char *)v14[1];
        v14[1] = v75 + 1;
        *unint64_t v75 = v74;
      }
    }
    uint64_t v76 = -(int)k & 7;
    *((_DWORD *)v14 + 6) <<= v76;
    unint64_t k = m + v76;
  }
LABEL_94:
  free(v14);

  free(v13);
}

unint64_t none_filter(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = (unsigned __int8 *)result;
  LODWORD(result) = 0;
  while (1)
  {
    int v8 = *v6++;
    int v7 = v8;
    *a6 = v8;
    int v9 = 256 - v8;
    if ((v8 & 0x80u) != 0) {
      int v7 = v9;
    }
    __n128 result = (v7 + result);
    if (result > a5) {
      break;
    }
    ++a6;
    if (!--a3) {
      return result;
    }
  }
  return a5;
}

unint64_t sub_filter(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)result;
  LODWORD(result) = 0;
  while (1)
  {
    unsigned __int8 v7 = *v6 - v6[-a4];
    int v8 = (char)v7;
    *a6 = v7;
    int v9 = v7;
    int v10 = 256 - v7;
    if (v8 >= 0) {
      int v10 = v9;
    }
    __n128 result = (v10 + result);
    if (result > a5) {
      break;
    }
    ++v6;
    ++a6;
    if (!--a3) {
      return result;
    }
  }
  return a5;
}

unint64_t up_filter(unint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = (char *)result;
  LODWORD(result) = 0;
  while (1)
  {
    char v8 = *v6++;
    char v7 = v8;
    char v9 = *a2++;
    unsigned __int8 v10 = v7 - v9;
    int v11 = (char)v10;
    *a6 = v10;
    int v12 = v10;
    int v13 = 256 - v10;
    if (v11 >= 0) {
      int v13 = v12;
    }
    __n128 result = (v13 + result);
    if (result > a5) {
      break;
    }
    ++a6;
    if (!--a3) {
      return result;
    }
  }
  return a5;
}

unint64_t avg_filter(unint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)result;
  LODWORD(result) = 0;
  while (1)
  {
    int v7 = *a2++;
    unsigned __int8 v8 = *v6 - ((v7 + v6[-a4]) >> 1);
    int v9 = (char)v8;
    *a6 = v8;
    int v10 = v8;
    int v11 = 256 - v8;
    if (v9 >= 0) {
      int v11 = v10;
    }
    __n128 result = (v11 + result);
    if (result > a5) {
      break;
    }
    ++v6;
    ++a6;
    if (!--a3) {
      return result;
    }
  }
  return a5;
}

unint64_t paeth_filter(unint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)result;
  LODWORD(result) = 0;
  while (1)
  {
    int v7 = v6[-a4];
    int v8 = a2[-a4];
    int v9 = *a2;
    unsigned int v10 = v9 - v8;
    if (v9 - v8 < 0) {
      unsigned int v10 = v8 - v9;
    }
    unsigned int v11 = v7 - v8;
    if (v7 - v8 < 0) {
      unsigned int v11 = v8 - v7;
    }
    int v12 = v9 + v7 - v8 - v8;
    if (v12 < 0) {
      int v12 = v8 - (v9 + v7 - v8);
    }
    if (v11 <= v12) {
      LOBYTE(v8) = *a2;
    }
    if (v10 > v12 || v10 > v11) {
      LOBYTE(v7) = v8;
    }
    unsigned __int8 v14 = *v6 - v7;
    int v15 = (char)v14;
    *a6 = v14;
    int v16 = v14;
    int v17 = 256 - v14;
    if (v15 >= 0) {
      int v17 = v16;
    }
    __n128 result = (v17 + result);
    if (result > a5) {
      break;
    }
    ++v6;
    ++a2;
    ++a6;
    if (!--a3) {
      return result;
    }
  }
  return a5;
}

void CGContextSetShadow(CGContextRef c, CGSize offset, CGFloat blur)
{
  CGFloat height = offset.height;
  CGFloat width = offset.width;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  int v8 = CGColorCreate(DeviceRGB, CGContextSetShadow_components);
  CGColorSpaceRelease(DeviceRGB);
  v10.CGFloat width = width;
  v10.CGFloat height = height;
  CGContextSetShadowWithColor(c, v10, blur, v8);
  if (v8)
  {
    CFRelease(v8);
  }
}

void CGContextSetFocusRingWithColor(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  long long v19 = 0u;
  memset(&v22[16], 0, 32);
  DWORD2(v19) = 2;
  uint64_t v20 = 0x3FE999999999999ALL;
  double v21 = a9;
  *(_OWORD *)unint64_t v22 = 0x3FE0000000000000uLL;
  CGSize v10 = &CGRectZero;
  if (a3) {
    CGSize v10 = (const CGRect *)a3;
  }
  CGSize size = v10->size;
  *(CGPoint *)&v22[8] = v10->origin;
  *(CGSize *)&v22[24] = size;
  *(_DWORD *)&v22[40] = -1;
  uint64_t FocusRingWithColor = (const void *)CGStyleCreateFocusRingWithColor((uint64_t)&v19, a2, a3, a4, a5, a6, a7, a8);
  CGContextSetStyle(a1, FocusRingWithColor, v13, v14, v15, v16, v17, v18);
  if (FocusRingWithColor) {
    CFRelease(FocusRingWithColor);
  }
}

void CGContextBeginPage(CGContextRef c, const CGRect *mediaBox)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      int v9 = *((_DWORD *)c + 22);
      *((_DWORD *)c + 22) = v9 + 1;
      if (v9)
      {
        CGPostError((uint64_t)"%s: Don't nest calls to this function -- the results will not be what you expect.", (uint64_t)mediaBox, v2, v3, v4, v5, v6, v7, (char)"CGContextBeginPage");
      }
      else
      {
        if (*((_DWORD *)c + 6) == 1) {
          CGContextResetTopGState(c, (uint64_t)mediaBox, v2, v3, v4, v5, v6, v7);
        }
        if (mediaBox)
        {
          CFDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CGCFDictionarySetRect(Mutable, @"MediaBox", mediaBox->origin.x, mediaBox->origin.y, mediaBox->size.width, mediaBox->size.height);
        }
        else
        {
          CFDataRef Mutable = 0;
        }
        uint64_t v13 = *((void *)c + 5);
        if (v13)
        {
          uint64_t v14 = *(void (**)(void))(v13 + 152);
          if (v14) {
            v14();
          }
        }
        if (Mutable)
        {
          CFRelease(Mutable);
        }
      }
      return;
    }
    CGContextRef v10 = c;
  }
  else
  {
    CGContextRef v10 = 0;
  }

  handle_invalid_context((char)"CGContextBeginPage", (uint64_t)v10, v2, v3, v4, v5, v6, v7);
}

void CGContextEndPage(CGContextRef c)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      int v8 = *((_DWORD *)c + 22) - 1;
      *((_DWORD *)c + 22) = v8;
      if (v8)
      {
        CGPostError((uint64_t)"%s: Don't nest calls to this function -- the results will not be what you expect.", v1, v2, v3, v4, v5, v6, v7, (char)"CGContextEndPage");
      }
      else
      {
        uint64_t v10 = *((void *)c + 5);
        if (v10)
        {
          unsigned int v11 = *(void (**)(void))(v10 + 160);
          if (v11)
          {
            v11();
          }
        }
      }
      return;
    }
    CGContextRef v9 = c;
  }
  else
  {
    CGContextRef v9 = 0;
  }

  handle_invalid_context((char)"CGContextEndPage", (uint64_t)v9, v2, v3, v4, v5, v6, v7);
}

void CGContextSynchronize(CGContextRef c)
{
  if (!c)
  {
    CGContextRef v9 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextSynchronize", (uint64_t)v9, v1, v2, v3, v4, v5, v6);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    CGContextRef v9 = c;
    goto LABEL_7;
  }
  uint64_t v7 = *((void *)c + 5);
  if (v7)
  {
    int v8 = *(void (**)(void))(v7 + 168);
    if (v8) {
      v8();
    }
  }
}

void CGContextWait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v10 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextWait", v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    uint64_t v10 = a1;
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    CGContextRef v9 = *(void (**)(void))(v8 + 168);
    if (v9) {
      v9();
    }
  }
}

void CGContextSetFlush(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      *(void *)(a1 + 56) = a2;
      return;
    }
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetFlush", v8, a3, a4, a5, a6, a7, a8);
}

void CGContextDrawDisplayList(uint64_t a1, CFTypeRef cf, __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v15 = 0;
LABEL_14:
    handle_invalid_context((char)"CGContextDrawDisplayList", v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    uint64_t v15 = a1;
    goto LABEL_14;
  }
  if (cf
    && *((void *)cf + 74) != *((void *)cf + 75)
    && *((double *)cf + 11) != INFINITY
    && *((double *)cf + 12) != INFINITY)
  {
    if (a3)
    {
      uint64_t CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList((uint64_t)cf, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!CGDisplayList) {
        return;
      }
    }
    else
    {
      uint64_t CGDisplayList = CFRetain(cf);
    }
    CGDisplayListDelegateDrawDisplayList(*(void **)(a1 + 40), *(void *)(a1 + 112), *(void *)(a1 + 96), (uint64_t)CGDisplayList, v10, v11, v12, v13);
    if (CGDisplayList)
    {
      CFRelease(CGDisplayList);
    }
  }
}

double CGContextGetRenderingResolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return fmax(*(double *)(*(void *)(a1 + 112) + 8), *(double *)(*(void *)(a1 + 112) + 16));
  }
  handle_invalid_context((char)"CGContextGetRenderingResolution", a1, a3, a4, a5, a6, a7, a8);
  return 0.0;
}

void CGContextSetRenderingResolution(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    uint64_t v9 = *(void *)(a1 + 112);
    double v10 = 72.0;
    double v11 = 432.0;
    if (a2 <= 432.0) {
      double v11 = a2;
    }
    double v12 = 432.0;
    if (a2 <= 432.0) {
      double v12 = a2;
    }
    BOOL v13 = a2 < 72.0;
    if (a2 >= 72.0) {
      double v14 = v11;
    }
    else {
      double v14 = 72.0;
    }
    if (!v13) {
      double v10 = v12;
    }
    *(double *)(v9 + 8) = v14;
    *(double *)(v9 + 16) = v10;
  }
  else
  {
    handle_invalid_context((char)"CGContextSetRenderingResolution", a1, a4, a5, a6, a7, a8, a9);
  }
}

void CGContextSetAllowsAntialiasing(CGContextRef c, BOOL allowsAntialiasing)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *(unsigned char *)(*((void *)c + 14) + 81) = allowsAntialiasing;
      return;
    }
    CGContextRef v8 = c;
  }
  else
  {
    CGContextRef v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsAntialiasing", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

BOOL CGContextGetAllowsAntialiasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return *(unsigned char *)(*(void *)(a1 + 112) + 81) != 0;
  }
  handle_invalid_context((char)"CGContextGetAllowsAntialiasing", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

BOOL CGContextGetAllowsFontAntialiasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return *(unsigned char *)(*(void *)(a1 + 112) + 83) != 0;
  }
  handle_invalid_context((char)"CGContextGetAllowsFontAntialiasing", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextSetAllowsFontAntialiasing(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      *(unsigned char *)(*(void *)(a1 + 112) + 83) = a2;
      return;
    }
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsFontAntialiasing", v8, a3, a4, a5, a6, a7, a8);
}

BOOL CGContextGetAllowsFontSmoothing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return *(unsigned char *)(*(void *)(a1 + 112) + 84) != 0;
  }
  handle_invalid_context((char)"CGContextGetAllowsFontSmoothing", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextSetAllowsFontSmoothing(CGContextRef c, BOOL allowsFontSmoothing)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *(unsigned char *)(*((void *)c + 14) + 84) = allowsFontSmoothing;
      return;
    }
    CGContextRef v8 = c;
  }
  else
  {
    CGContextRef v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsFontSmoothing", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

BOOL CGContextGetAllowsFontSubpixelPositioning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return *(unsigned char *)(*(void *)(a1 + 112) + 85) != 0;
  }
  handle_invalid_context((char)"CGContextGetAllowsFontSubpixelPositioning", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextSetAllowsFontSubpixelPositioning(CGContextRef c, BOOL allowsFontSubpixelPositioning)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *(unsigned char *)(*((void *)c + 14) + 85) = allowsFontSubpixelPositioning;
      return;
    }
    CGContextRef v8 = c;
  }
  else
  {
    CGContextRef v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsFontSubpixelPositioning", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

BOOL CGContextGetAllowsFontSubpixelQuantization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return *(unsigned char *)(*(void *)(a1 + 112) + 86) != 0;
  }
  handle_invalid_context((char)"CGContextGetAllowsFontSubpixelQuantization", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextSetAllowsFontSubpixelQuantization(CGContextRef c, BOOL allowsFontSubpixelQuantization)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *(unsigned char *)(*((void *)c + 14) + 86) = allowsFontSubpixelQuantization;
      return;
    }
    CGContextRef v8 = c;
  }
  else
  {
    CGContextRef v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsFontSubpixelQuantization", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

uint64_t CGContextGetAllowedFontRenderingStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    CGContextRef v8 = *(unsigned __int8 **)(a1 + 112);
    return CGRenderingStateGetAllowedFontRenderingStyle(v8);
  }
  else
  {
    handle_invalid_context((char)"CGContextGetAllowedFontRenderingStyle", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGContextSetAllowsDithering(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      *(unsigned char *)(*(void *)(a1 + 112) + 82) = a2;
      return;
    }
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsDithering", v8, a3, a4, a5, a6, a7, a8);
}

BOOL CGContextGetAllowsDithering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return *(unsigned char *)(*(void *)(a1 + 112) + 82) != 0;
  }
  handle_invalid_context((char)"CGContextGetAllowsDithering", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextClipToTextClipping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateClipToTextClipping(*(void *)(a1 + 96), a2);
      return;
    }
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  handle_invalid_context((char)"CGContextClipToTextClipping", v8, a3, a4, a5, a6, a7, a8);
}

uint64_t CGContextGetColorSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v11 = 0;
LABEL_10:
    handle_invalid_context((char)"CGContextGetColorSpace", v11, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    uint64_t v11 = a1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v8 + 264);
  if (!v9) {
    return 0;
  }

  return v9();
}

uint64_t CGContextCopyDeviceColorSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v10 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextCopyDeviceColorSpace", v10, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    uint64_t v10 = a1;
    goto LABEL_8;
  }
  uint64_t v8 = *(void **)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = (uint64_t (*)(void))v8[4];
    if (v9) {
      uint64_t v8 = (void *)v9();
    }
    else {
      uint64_t v8 = 0;
    }
  }
  Cache = CGColorTransformGetCache(v8);
  if (!Cache) {
    return 0;
  }
  uint64_t v11 = Cache[2];
  if (v11) {
    CFRetain((CFTypeRef)Cache[2]);
  }
  return v11;
}

uint64_t CGContextColorIsExtendedRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v11 = 0;
LABEL_10:
    handle_invalid_context((char)"CGContextColorIsExtendedRGB", v11, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    uint64_t v11 = a1;
    goto LABEL_10;
  }
  uint64_t result = *(void *)(a1 + 40);
  if (!result) {
    return result;
  }
  uint64_t v9 = *(uint64_t (**)(void))(result + 264);
  if (v9)
  {
    uint64_t result = v9();
    if (!result) {
      return result;
    }
    uint64_t v10 = *(void *)(result + 24);
    if (*(_DWORD *)(v10 + 28) == 1) {
      return *(unsigned __int8 *)(v10 + 13) != 0;
    }
  }
  return 0;
}

void CGContextBeginPage2(CGContext *c, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      int v9 = *((_DWORD *)c + 22);
      *((_DWORD *)c + 22) = v9 + 1;
      if (v9)
      {
        CGPostError((uint64_t)"%s: Don't nest calls to this function -- the results will not be what you expect.", a2, a3, a4, a5, a6, a7, a8, (char)"CGContextBeginPage2");
      }
      else
      {
        if (*((_DWORD *)c + 6) == 1) {
          CGContextResetTopGState(c, a2, a3, a4, a5, a6, a7, a8);
        }
        uint64_t v11 = *((void *)c + 5);
        if (v11)
        {
          double v12 = *(void (**)(void))(v11 + 152);
          if (v12)
          {
            v12();
          }
        }
      }
      return;
    }
    CGContextRef v10 = c;
  }
  else
  {
    CGContextRef v10 = 0;
  }

  handle_invalid_context((char)"CGContextBeginPage2", (uint64_t)v10, a3, a4, a5, a6, a7, a8);
}

void CGContextEndPage2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      int v8 = *(_DWORD *)(a1 + 88) - 1;
      *(_DWORD *)(a1 + 88) = v8;
      if (v8)
      {
        CGPostError((uint64_t)"%s: Don't nest calls to this function -- the results will not be what you expect.", a2, a3, a4, a5, a6, a7, a8, (char)"CGContextEndPage2");
      }
      else
      {
        uint64_t v10 = *(void *)(a1 + 40);
        if (v10)
        {
          uint64_t v11 = *(void (**)(void))(v10 + 160);
          if (v11)
          {
            v11();
          }
        }
      }
      return;
    }
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = 0;
  }

  handle_invalid_context((char)"CGContextEndPage2", v9, a3, a4, a5, a6, a7, a8);
}

CGFloat CGContextGetDefaultUserSpaceToDeviceSpaceTransform@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, CGAffineTransform *a8@<X8>)
{
  if (!a1)
  {
    uint64_t v12 = 0;
LABEL_10:
    handle_invalid_context((char)"CGContextGetDefaultUserSpaceToDeviceSpaceTransform", v12, a2, a3, a4, a5, a6, a7);
LABEL_11:
    *a8 = CGAffineTransformIdentity;
    return CGAffineTransformIdentity.tx;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    uint64_t v12 = a1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = *(void (**)(void))(v9 + 40);
  if (!v10) {
    goto LABEL_11;
  }

  v10();
  return result;
}

CGSize CGContextConvertSizeToDeviceSpace(CGContextRef c, CGSize size)
{
  double height = size.height;
  double width = size.width;
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v13, c);
    double v10 = height * v13.c;
    double height = height * v13.d + v13.b * width;
    double width = v10 + v13.a * width;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertSizeToDeviceSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  double v11 = width;
  double v12 = height;
  result.double height = v12;
  result.double width = v11;
  return result;
}

CGSize CGContextConvertSizeToUserSpace(CGContextRef c, CGSize size)
{
  double height = size.height;
  double width = size.width;
  memset(&v15, 0, sizeof(v15));
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v15, c);
    CGAffineTransform v13 = v15;
    CGAffineTransformInvert(&v14, &v13);
    double v10 = height * v14.c;
    double height = height * v14.d + v14.b * width;
    double width = v10 + v14.a * width;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertSizeToUserSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  double v11 = width;
  double v12 = height;
  result.double height = v12;
  result.double width = v11;
  return result;
}

CGRect CGContextConvertRectToDeviceSpace(CGContextRef c, CGRect rect)
{
  CGFloat height = rect.size.height;
  CGFloat width = rect.size.width;
  CGFloat y = rect.origin.y;
  CGFloat x = rect.origin.x;
  memset(&v17, 0, sizeof(v17));
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v17, c);
    CGAffineTransform v16 = v17;
    v18.origin.CGFloat x = x;
    v18.origin.CGFloat y = y;
    v18.size.CGFloat width = width;
    v18.size.CGFloat height = height;
    CGRect v19 = CGRectApplyAffineTransform(v18, &v16);
    CGFloat x = v19.origin.x;
    CGFloat y = v19.origin.y;
    CGFloat width = v19.size.width;
    CGFloat height = v19.size.height;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertRectToDeviceSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  double v12 = x;
  double v13 = y;
  double v14 = width;
  double v15 = height;
  result.size.CGFloat height = v15;
  result.size.CGFloat width = v14;
  result.origin.CGFloat y = v13;
  result.origin.CGFloat x = v12;
  return result;
}

CGRect CGContextConvertRectToUserSpace(CGContextRef c, CGRect rect)
{
  double height = rect.size.height;
  double width = rect.size.width;
  double y = rect.origin.y;
  v11.n64_u64[0] = *(unint64_t *)&rect.origin.x;
  memset(&v20, 0, sizeof(v20));
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v20, c);
    CGAffineTransform v19 = v20;
    v11.n64_u64[0] = CGRectApplyInverseAffineTransform(&v19.a, v11, y, width, height).n64_u64[0];
    double y = v12;
    double width = v13;
    double height = v14;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertRectToUserSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  double v15 = v11.n64_f64[0];
  double v16 = y;
  double v17 = width;
  double v18 = height;
  result.size.double height = v18;
  result.size.double width = v17;
  result.origin.double y = v16;
  result.origin.CGFloat x = v15;
  return result;
}

uint64_t CGContextGetIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108) {
    return *(unsigned int *)(a1 + 20);
  }
  handle_invalid_context((char)"CGContextGetIdentifier", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGContextDrawsWithCorrectShadowOffsets()
{
  return 1;
}

const void *CGContextValidate(const void *result, int a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    CFTypeID v10 = CFGetTypeID(result);
    if (_block_invoke_once_15273 != -1) {
      dispatch_once(&_block_invoke_once_15273, &__block_literal_global_5_15274);
    }
    CGRect result = 0;
    if (v10 == CGContextGetTypeID_type_id)
    {
      if (!a2) {
        return (const void *)1;
      }
      if (*(_DWORD *)(v3 + 16) == 1129601108)
      {
        int v11 = *(_DWORD *)(v3 + 24);
      }
      else
      {
        handle_invalid_context((char)"CGContextGetType", v3, v4, v5, v6, v7, v8, v9);
        int v11 = 0;
      }
      if (v11 == a2) {
        return (const void *)1;
      }
    }
  }
  return result;
}

void CGContextSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    if (!*(void *)(a1 + 176))
    {
      uint64_t v6 = (CFTypeRef *)CGPropertiesCreate();
      uint64_t v7 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 176), (unint64_t *)&v7, (unint64_t)v6, memory_order_relaxed, memory_order_relaxed);
      if (v7) {
        CGPropertiesRelease(v6);
      }
    }
    uint64_t v8 = *(void *)(a1 + 176);
    CGPropertiesSetProperty(v8, a2, a3);
  }
}

const void *CGContextGetProperty(uint64_t a1, const void *a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 176)) != 0) {
    return CGPropertiesGetProperty(v2, a2);
  }
  else {
    return 0;
  }
}

const UInt8 *CGContextGetContentMD5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    double v15 = "CGContextCopyData";
    uint64_t v16 = 0;
LABEL_12:
    handle_invalid_context((char)v15, v16, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 176);
  if (v9)
  {
    Propertdouble y = (const __CFData *)CGPropertiesGetProperty(v9, @"CGContextMD5");
    if (Property) {
      return CFDataGetBytePtr(Property);
    }
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    double v15 = "CGContextCopyData";
LABEL_11:
    uint64_t v16 = a1;
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(a1 + 176);
  if (!v12)
  {
LABEL_16:
    if (*(_DWORD *)(a1 + 24) != 4) {
      return 0;
    }
    CFDataRef v14 = CGBitmapContextCopyData(a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_18;
  }
  double v13 = CGPropertiesGetProperty(v12, @"CGContextData");
  if (!v13)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108) {
      goto LABEL_16;
    }
    double v15 = "CGContextGetType";
    goto LABEL_11;
  }
  CFDataRef v14 = (const __CFData *)CFRetain(v13);
LABEL_18:
  CFDataRef v17 = v14;
  if (v14)
  {
    *(void *)md = 0;
    uint64_t v22 = 0;
    double v18 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
    CC_MD5_Init(v18);
    BytePtr = (char *)CFDataGetBytePtr(v17);
    CFIndex Length = CFDataGetLength(v17);
    if (v18)
    {
      md5_update(v18, BytePtr, Length);
      CC_MD5_Final(md, v18);
    }
    free(v18);
    Propertdouble y = CFDataCreate(0, md, 16);
    CGContextSetProperty(a1, @"CGContextMD5", Property);
    if (Property)
    {
      CFRelease(Property);
      CFRelease(v17);
      return CFDataGetBytePtr(Property);
    }
    CFRelease(v17);
  }
  return 0;
}

uint64_t CGContextGetDelegateName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    handle_invalid_context((char)"CGContextGetDelegateName", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v8 + 224);
  if (!v9) {
    return 0;
  }

  return v9();
}

uint64_t CGContextGetOwnerIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      return *(unsigned int *)(v8 + 280);
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextGetOwnerIdentity", a1, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

BOOL CGPDFShadingType1Init(CGPDFDictionary *a1, void *a2, _OWORD *a3)
{
  uint64_t v5 = a1;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1) {
    a1 = (CGPDFDictionary *)*((void *)a1 + 5);
  }
  if (CGColorSpaceGetType(a1) == 7)
  {
  }
  else
  {
    uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *a2 = v6;
    *a3 = CGPDFShadingType1Init_type1_callbacks;
    if (v5) {
      uint64_t v5 = (CGPDFDictionary *)*((void *)v5 + 3);
    }
    if (!CGPDFDictionaryGetNumbers(v5, "Domain", (uint64_t)v6, (CGPDFArray *)4))
    {
      *(_OWORD *)uint64_t v6 = xmmword_1850CD8C0;
      *((_OWORD *)v6 + 1) = xmmword_1850CD8C0;
    }
    if (CGPDFDictionaryGetNumbers(v5, "Matrix", (uint64_t)v10, (CGPDFArray *)6))
    {
      long long v7 = v10[1];
      *((_OWORD *)v6 + 2) = v10[0];
      *((_OWORD *)v6 + 3) = v7;
      *((_OWORD *)v6 + 4) = v10[2];
    }
    else
    {
      *(CGAffineTransform *)(v6 + 32) = CGAffineTransformIdentity;
    }
    *(void *)&v10[0] = 0;
    if (CGPDFDictionaryGetObject(v5, "Function", (CGPDFObjectRef *)v10))
    {
      ShadingFunction = CGPDFShadingCreateShadingFunction(*(uint64_t *)&v10[0], 2uLL);
      *((void *)v6 + 10) = ShadingFunction;
      return ShadingFunction != 0;
    }
  }
  return 0;
}

void type1_release_info_16640(int a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (const void *)a2[10];
    if (v3) {
      CFRelease(v3);
    }
    free(a2);
  }
}

uint64_t type1_create_shading(CGColor *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = (const CGRect *)a1;
    uint64_t v4 = (void *)*((void *)a1 + 5);
    a1 = (CGColor *)*((void *)a1 + 6);
    uint64_t v5 = v3 + 2;
    p_double y = &v3[2].origin.y;
    p_CGSize size = &v3[2].size;
    p_double height = &v3[2].size.height;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = &CGRectNull;
    p_double height = &CGRectNull.size.height;
    p_double y = &CGRectNull.origin.y;
    p_CGSize size = &CGRectNull.size;
  }
  double v9 = *p_height;
  double x = v5->origin.x;
  double v11 = *p_y;
  double width = p_size->width;
  v24[0] = *(void *)&v5->origin.x;
  *(double *)&float v24[1] = v11;
  *(double *)&v24[2] = width;
  *(double *)&v24[3] = v9;
  Components = CGColorGetComponents(a1);
  if (v9 == 1.79769313e308 && width == 1.79769313e308 && v11 == -8.98846567e307 && x == -8.98846567e307) {
    CGAffineTransform v19 = 0;
  }
  else {
    CGAffineTransform v19 = v24;
  }
  CGAffineTransform v20 = *(void **)(a2 + 80);
  long long v21 = *(_OWORD *)(a2 + 48);
  v23[0] = *(_OWORD *)(a2 + 32);
  v23[1] = v21;
  v23[2] = *(_OWORD *)(a2 + 64);
  return CGShadingCreateCustom(v4, (uint64_t)Components, (uint64_t)v19, a2, v23, v20, v14, v15);
}

void PDFClipMaskRelease(void **a1)
{
  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      if (a1[4])
      {
        unint64_t v3 = 0;
        do
          CGClipMaskRelease(a1[v3++ + 5]);
        while (v3 < (unint64_t)a1[4]);
      }
      free(a1);
    }
  }
}

BOOL PDFClipMaskEqualToClipMask(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4 == *(void *)(a2 + 32))
    {
      if (v4)
      {
        uint64_t v5 = v4 - 1;
        uint64_t v6 = (uint64_t *)(a2 + 40);
        long long v7 = (uint64_t *)(a1 + 40);
        do
        {
          uint64_t v9 = *v7++;
          uint64_t v8 = v9;
          uint64_t v10 = *v6++;
          BOOL result = CGClipMaskEqualToClipMask(v8, v10);
          BOOL v12 = v5-- != 0;
        }
        while (result && v12);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFData *CPPDFCreateImageFromRawData(uint64_t a1, const __CFData *a2, char a3, BOOL a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(CGPDFDictionary **)(a1 + 48);
  if (!v4) {
    return 0;
  }
  CGPDFInteger value = 0;
  if (!CGPDFDictionaryGetInteger(v4, "W", &value) && !CGPDFDictionaryGetInteger(v4, "Width", &value)) {
    return 0;
  }
  CGPDFInteger v39 = 0;
  if (!CGPDFDictionaryGetInteger(v4, "H", &v39) && !CGPDFDictionaryGetInteger(v4, "Height", &v39)) {
    return 0;
  }
  CGPDFInteger v38 = 0;
  if (!CGPDFDictionaryGetInteger(v4, "BPC", &v38) && !CGPDFDictionaryGetInteger(v4, "BitsPerComponent", &v38)) {
    CGPDFInteger v38 = 0;
  }
  CGPDFObjectRef v37 = 0;
  if (!CGPDFDictionaryGetObject(v4, "CS", &v37) && !CGPDFDictionaryGetObject(v4, "ColorSpace", &v37)) {
    CGPDFObjectRef v37 = 0;
  }
  if ((a3 & 1) == 0)
  {
    v35[0] = 0;
    a4 = (CGPDFDictionaryGetBoolean(v4, "IM", v35) || CGPDFDictionaryGetBoolean(v4, "ImageMask", v35)) && v35[0] != 0;
  }
  CGPDFBoolean v36 = 0;
  if (!CGPDFDictionaryGetBoolean(v4, "I", &v36) && !CGPDFDictionaryGetBoolean(v4, "Interpolate", &v36)) {
    CGPDFBoolean v36 = 0;
  }
  *(void *)unint64_t v35 = 0;
  BOOL v9 = CGPDFDictionaryGetArray(v4, "D", (CGPDFArrayRef *)v35)
    || CGPDFDictionaryGetArray(v4, "Decode", (CGPDFArrayRef *)v35);
  CGColorSpaceRef space = 0;
  if (v37) {
    char v10 = a4;
  }
  else {
    char v10 = 1;
  }
  if ((v10 & 1) == 0) {
    CreateColorSpaceFromInlineObject((uint64_t)v37, &space);
  }
  if (!v9)
  {
    decode = 0;
    uint64_t v11 = 0;
    goto LABEL_50;
  }
  if (*(void *)v35)
  {
    uint64_t v11 = *(void *)(*(void *)v35 + 16);
    if (v11)
    {
      decode = (CGFloat *)malloc_type_malloc(8 * v11, 0x100004000313F17uLL);
      for (size_t i = 0; i != v11; ++i)
      {
        CGPDFReal v33 = 0.0;
        CGPDFArrayGetNumber(*(CGPDFArrayRef *)v35, i, &v33);
        decode[i] = v33;
      }
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  decode = 0;
LABEL_39:
  if (space) {
    char v14 = 1;
  }
  else {
    char v14 = a4;
  }
  if ((v14 & 1) == 0)
  {
    switch(v11)
    {
      case 8:
        DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
        break;
      case 6:
        DeviceCMYK = CGColorSpaceCreateDeviceRGB();
        break;
      case 2:
        DeviceCMYK = CGColorSpaceCreateDeviceGray();
        break;
      default:
        goto LABEL_50;
    }
    CGColorSpaceRef space = DeviceCMYK;
  }
LABEL_50:
  CGDataProviderRef v16 = CGDataProviderCreateWithCFData(a2);
  if (v16)
  {
    CFDataRef v17 = v16;
    if (a4)
    {
      CGPDFInteger v38 = 1;
      CGPDFInteger v18 = value;
      CFIndex Length = CFDataGetLength(a2);
      CGPDFInteger v20 = v39 * value * v38;
      uint64_t v22 = v20 + 7;
      BOOL v21 = v20 < -7;
      uint64_t v23 = v20 + 14;
      if (!v21) {
        uint64_t v23 = v22;
      }
      if (Length < v23 >> 3)
      {
        uint64_t v8 = 0;
LABEL_70:
        CGDataProviderRelease(v17);
        goto LABEL_71;
      }
      uint64_t v31 = v18 + 7;
      if (v18 < -7) {
        uint64_t v31 = v18 + 14;
      }
      unint64_t v30 = mask_create(value, v39, v38, v38, v31 >> 3, v17, 0, v36 != 0, 4);
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v24 = space;
      if (!space) {
        goto LABEL_70;
      }
      CGPDFInteger v25 = v38;
      if (v38 < 1) {
        goto LABEL_70;
      }
      uint64_t v26 = *(void *)(*((void *)space + 3) + 48);
      CGPDFInteger v27 = value;
      CGPDFInteger v28 = CFDataGetLength(a2);
      uint64_t v8 = 0;
      BOOL v29 = v11 == 2 * v26 || decode == 0;
      if (!v29 || value * v26 * v39 * v38 / 8 > v28) {
        goto LABEL_70;
      }
      unint64_t v30 = CGImageCreate(value, v39, v38, v25 * v26, vcvtps_u32_f32((float)(unint64_t)(v25 * v26 * v27) * 0.125), v24, 0, v17, decode, v36 != 0, kCGRenderingIntentDefault);
    }
    uint64_t v8 = v30;
    goto LABEL_70;
  }
  uint64_t v8 = 0;
LABEL_71:
  if (space) {
    CGColorSpaceRelease(space);
  }
  free(decode);
  return v8;
}

uint64_t CPPDFCreateJPEGImageFromImageStream(uint64_t a1, CFDataRef theData, CGImage **a3, CFDataRef *a4)
{
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  BytePtr = CFDataGetBytePtr(theData);
  if (__PAIR64__(BytePtr[1], *BytePtr) == 0xD8000000FFLL
    && BytePtr[2] == 255
    && BytePtr[3] == 238
    && !BytePtr[4]
    && BytePtr[5] == 14)
  {
    int v9 = 0;
    CGPDFInteger v10 = BytePtr[17];
  }
  else
  {
    CGPDFInteger v10 = -1;
    int v9 = 1;
    if (!a3 && a4)
    {
      *a4 = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theData);
      return 1;
    }
  }
  if (CPPDFCreateJPEGImageFromImageStream_predicate != -1) {
    dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate, &__block_literal_global_16685);
  }
  uint64_t result = CPPDFCreateJPEGImageFromImageStream_f(theData, 0);
  if (result)
  {
    BOOL v12 = (const void *)result;
    if (v9)
    {
      if (a1) {
        double v13 = *(CGPDFDictionary **)(a1 + 48);
      }
      else {
        double v13 = 0;
      }
      CGPDFDictionaryRef value = 0;
      if (CGPDFDictionaryGetDictionary(v13, "DecodeParms", &value))
      {
        CGPDFInteger v32 = 0;
        if (CGPDFDictionaryGetInteger(value, "ColorTransform", &v32)) {
          CGPDFInteger v10 = v32;
        }
        else {
          CGPDFInteger v10 = -1;
        }
      }
      else
      {
        CGPDFInteger v10 = -1;
      }
    }
    CFDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v15 = Mutable;
    if ((v10 & 0x8000000000000000) == 0) {
      CGCFDictionarySetInteger(Mutable, @"kCGImageSourceColorTransform", v10);
    }
    if (CPPDFCreateJPEGImageFromImageStream_predicate_20 != -1) {
      dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate_20, &__block_literal_global_23_16689);
    }
    CGDataProviderRef v16 = (CGImage *)CPPDFCreateJPEGImageFromImageStream_f_19(v12, 0, v15);
    CFRelease(v12);
    CFRelease(v15);
    if (v16)
    {
      if (CGImageGetDecode(v16))
      {
        size_t v17 = *((void *)v16 + 7);
        size_t v30 = *((void *)v16 + 6);
        size_t v31 = *((void *)v16 + 5);
        size_t v18 = *((void *)v16 + 8);
        size_t v19 = *((void *)v16 + 9);
        CGColorSpaceRef ColorSpace = CGImageGetColorSpace(v16);
        CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo(v16);
        DataProviderInternal = CGImageGetDataProviderInternal((char *)v16, 0);
        BOOL shouldInterpolate = CGImageGetShouldInterpolate(v16);
        CGColorRenderingIntent intent = CGImageGetRenderingIntent(v16);
        CGImageRef v25 = CGImageCreate(v31, v30, v17, v18, v19, ColorSpace, BitmapInfo, (CGDataProviderRef)DataProviderInternal, CPPDFCreateJPEGImageFromImageStream_decode, shouldInterpolate, intent);
        CFRelease(v16);
        CGDataProviderRef v16 = v25;
      }
      CFMutableDataRef v26 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      if (CPPDFCreateJPEGImageFromImageStream_predicate_26 != -1) {
        dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate_26, &__block_literal_global_29_16690);
      }
      uint64_t v27 = CPPDFCreateJPEGImageFromImageStream_f_25(v26, @"public.jpeg", 1, 0);
      if (v27)
      {
        CGPDFInteger v28 = (const void *)v27;
        if (CPPDFCreateJPEGImageFromImageStream_predicate_35 != -1) {
          dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate_35, &__block_literal_global_38);
        }
        CPPDFCreateJPEGImageFromImageStream_f_34(v28, v16, 0);
        if (CPPDFCreateJPEGImageFromImageStream_predicate_41 != -1) {
          dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate_41, &__block_literal_global_44_16692);
        }
        char v29 = CPPDFCreateJPEGImageFromImageStream_f_40(v28);
        CFRelease(v28);
        if (v29)
        {
          if (a3)
          {
            *a3 = v16;
          }
          else if (v16)
          {
            CFRelease(v16);
          }
          if (a4) {
            *a4 = v26;
          }
          else {
            CFRelease(v26);
          }
          return 1;
        }
      }
      if (v16) {
        CFRelease(v16);
      }
      CFRelease(v26);
    }
    return 0;
  }
  return result;
}

void *__CPPDFCreateJPEGImageFromImageStream_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationAddImage");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationAddImage");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationAddImage");
  }
  CPPDFCreateJPEGImageFromImageStream_f_34 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CPPDFCreateJPEGImageFromImageStream_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationCreateWithData");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationCreateWithData");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationCreateWithData");
  }
  CPPDFCreateJPEGImageFromImageStream_f_25 = (uint64_t (*)(void, void, void, void))result;
  return result;
}

void *__CPPDFCreateJPEGImageFromImageStream_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  CPPDFCreateJPEGImageFromImageStream_f_19 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CPPDFCreateJPEGImageFromImageStream_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithData");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithData");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithData");
  }
  CPPDFCreateJPEGImageFromImageStream_f = (uint64_t (*)(void, void))result;
  return result;
}

CGPDFStream *CPPDFCreateImageFromStream(CGPDFStream *result, char a2, BOOL a3)
{
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    CGPDFDataFormat format = CGPDFDataFormatRaw;
    uint64_t result = CGPDFStreamCopyData(result, &format);
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v9 = 0;
      if (format)
      {
        if (format == CGPDFDataFormatJPEG2000)
        {
          CFDictionaryRef v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kCGImageSourceTypeIdentifierHint, (const void **)&kUTTypeJPEG2000, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (CPPDFCreateImageFromStream_predicate != -1) {
            dispatch_once(&CPPDFCreateImageFromStream_predicate, &__block_literal_global_48_16718);
          }
          uint64_t v8 = (const void *)CPPDFCreateImageFromStream_f(v6, v7);
          CFRelease(v7);
          if (v8)
          {
            if (CPPDFCreateImageFromStream_predicate_50 != -1) {
              dispatch_once(&CPPDFCreateImageFromStream_predicate_50, &__block_literal_global_53_16719);
            }
            uint64_t v9 = (CGImage *)CPPDFCreateImageFromStream_f_49(v8, 0, 0);
            CFRelease(v8);
          }
        }
        else if (format == CGPDFDataFormatJPEGEncoded)
        {
          CPPDFCreateJPEGImageFromImageStream(v5, result, &v9, 0);
        }
      }
      else
      {
        uint64_t v9 = CPPDFCreateImageFromRawData(v5, result, a2, a3);
      }
      CFRelease(v6);
      return v9;
    }
  }
  return result;
}

void *__CPPDFCreateImageFromStream_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  CPPDFCreateImageFromStream_f_49 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CPPDFCreateImageFromStream_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithData");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithData");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithData");
  }
  CPPDFCreateImageFromStream_f = (uint64_t (*)(void, void))result;
  return result;
}

CGPDFStream *CPPDFCreateMaskingImageFromStream(CGPDFStream *result)
{
  if (result)
  {
    uint64_t v1 = (CGPDFDictionary *)*((void *)result + 6);
    if (v1)
    {
      CGPDFStreamRef value = 0;
      if (CGPDFDictionaryGetStream(v1, "SMask", &value))
      {
        uint64_t v2 = value;
        BOOL v3 = 0;
        return CPPDFCreateImageFromStream(v2, 1, v3);
      }
      if (CGPDFDictionaryGetStream(v1, "Mask", &value))
      {
        uint64_t v2 = value;
        BOOL v3 = 1;
        return CPPDFCreateImageFromStream(v2, 1, v3);
      }
    }
    return 0;
  }
  return result;
}

void *CPPDFCreateMaskingColorsFromStream(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(CGPDFDictionary **)(a1 + 48);
  if (!v2) {
    return 0;
  }
  CGPDFArrayRef value = 0;
  uint64_t v4 = 0;
  if (CGPDFDictionaryGetArray(v2, "Mask", &value))
  {
    if (value)
    {
      uint64_t v5 = *((void *)value + 2);
      if (!a2) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (!a2)
      {
LABEL_7:
        uint64_t v4 = malloc_type_malloc(8 * v5, 0x100004000313F17uLL);
        if (v5)
        {
          for (size_t i = 0; i != v5; ++i)
          {
            uint64_t v8 = 0;
            CGPDFArrayGetNumber(value, i, (CGPDFReal *)&v8);
            v4[i] = v8;
          }
        }
        return v4;
      }
    }
    *a2 = v5;
    goto LABEL_7;
  }
  return v4;
}

uint64_t __get_cache_block_invoke_16740()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  get_cache_colorspace_cache = (uint64_t)malloc_type_calloc(1uLL, 0x48uLL, 0x1020040C6685353uLL);
  if (!get_cache_colorspace_cache) {
    _CGHandleAssert("get_cache_block_invoke", 111, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpaceFromICCDataCache.c", "colorspace_cache != NULL", "colorspace cache missing", v0, v1, v2, v8);
  }
  v10.__uint64_t sig = 0;
  *(void *)v10.__opaque = 0;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  pthread_mutex_init((pthread_mutex_t *)get_cache_colorspace_cache, &v10);
  pthread_mutexattr_destroy(&v10);
  cache_attributes_t attrs = *(cache_attributes_t *)byte_1ED09CFD0;
  int v3 = cache_create("com.apple.CoreGraphics.colorspace_from_ICC_data_cache", &attrs, (cache_t **)(get_cache_colorspace_cache + 64));
  if (v3) {
    _CGHandleAssert("get_cache_block_invoke", 133, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpaceFromICCDataCache.c", "cache_error == 0", "cache creation failed %d", v4, v5, v6, v3);
  }
  return cache_set_count_hint();
}

uint64_t colorsync_smart_null_16753()
{
  return 0;
}

uint64_t __CGPDFContextDelegateCreate(uint64_t a1, _OWORD *a2, const __CFDictionary *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = malloc_type_calloc(1uLL, 0x270uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v5)
  {
    *(void *)uint64_t v5 = 0x100000001;
    v5[2] = 3;
    *((unsigned char *)v5 + 72) = 0;
    uint64_t v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v6)
    {
      *(_DWORD *)uint64_t v6 = 1;
      v6[1] = v5;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      v6[2] = Mutable;
      if (Mutable)
      {
        long long v15 = *(_OWORD *)(MEMORY[0x1E4F1D530] + 16);
        *(_OWORD *)&keyCallBacks.version = *MEMORY[0x1E4F1D530];
        *(_OWORD *)&keyCallBacks.release = v15;
        keyCallBacks.equal = 0;
        keyCallBacks.hash = 0;
        CFMutableDictionaryRef v16 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &keyCallBacks, 0);
        v6[3] = v16;
        if (v16)
        {
          *((void *)v5 + 5) = v6;
          *((unsigned char *)v5 + 256) = 0;
          v5[80] = 1;
          if (a2)
          {
            long long v17 = a2[1];
            *((_OWORD *)v5 + 6) = *a2;
            *((_OWORD *)v5 + 7) = v17;
          }
          else
          {
            if (CGCFDictionaryGetRect(a3, @"MediaBox", (UInt8 *)&keyCallBacks))
            {
              long long v19 = *(_OWORD *)&keyCallBacks.version;
              long long v20 = *(_OWORD *)&keyCallBacks.release;
            }
            else
            {
              long long v19 = defaultMediaBox;
              long long v20 = unk_18520FF70;
            }
            *((_OWORD *)v5 + 6) = v19;
            *((_OWORD *)v5 + 7) = v20;
          }
          *((CGRect *)v5 + 4) = CGRectNull;
          if (CGCFDictionaryGetRect(a3, @"CropBox", (UInt8 *)&keyCallBacks))
          {
            long long v21 = *(_OWORD *)&keyCallBacks.release;
            *((_OWORD *)v5 + 8) = *(_OWORD *)&keyCallBacks.version;
            *((_OWORD *)v5 + 9) = v21;
          }
          *((CGRect *)v5 + 5) = CGRectNull;
          if (CGCFDictionaryGetRect(a3, @"BleedBox", (UInt8 *)&keyCallBacks))
          {
            long long v22 = *(_OWORD *)&keyCallBacks.release;
            *((_OWORD *)v5 + 10) = *(_OWORD *)&keyCallBacks.version;
            *((_OWORD *)v5 + 11) = v22;
          }
          *((CGRect *)v5 + 6) = CGRectNull;
          if (CGCFDictionaryGetRect(a3, @"TrimBox", (UInt8 *)&keyCallBacks))
          {
            long long v23 = *(_OWORD *)&keyCallBacks.release;
            *((_OWORD *)v5 + 12) = *(_OWORD *)&keyCallBacks.version;
            *((_OWORD *)v5 + 13) = v23;
          }
          *((CGRect *)v5 + 7) = CGRectNull;
          if (CGCFDictionaryGetRect(a3, @"ArtBox", (UInt8 *)&keyCallBacks))
          {
            long long v24 = *(_OWORD *)&keyCallBacks.release;
            *((_OWORD *)v5 + 14) = *(_OWORD *)&keyCallBacks.version;
            *((_OWORD *)v5 + 15) = v24;
          }
          if (a3)
          {
            CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a3, @"CGPDFContextCreateLinearizedPDF");
            if (Value)
            {
              CFBooleanRef v26 = Value;
              CFTypeID v27 = CFGetTypeID(Value);
              if (v27 == CFBooleanGetTypeID()) {
                *((unsigned char *)v5 + 90) = CFBooleanGetValue(v26) != 0;
              }
            }
            CFBooleanRef v28 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"CGPDFContextCreatePDFA");
            if (v28)
            {
              CFBooleanRef v29 = v28;
              CFTypeID v30 = CFGetTypeID(v28);
              if (v30 == CFBooleanGetTypeID()) {
                *((unsigned char *)v5 + 91) = CFBooleanGetValue(v29) != 0;
              }
            }
          }
          operator new();
        }
      }
      PDFMetaSetRelease(v6);
    }
    *((void *)v5 + 5) = 0;
    PDFDocumentRelease((uint64_t)v5, v7, v8, v9, v10, v11, v12, v13);
  }
  return 0;
}

void sub_184FC673C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (*(char *)(v15 - 137) < 0)
  {
    operator delete(*(void **)(v15 - 160));
    if ((v14 & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (!v14)
  {
LABEL_7:
    std::__tree<unsigned long>::destroy(*(void **)(v12 + 240));
    std::__tree<unsigned long>::destroy(*(void **)(v12 + 216));
    size_t v18 = *(void **)(v12 + 184);
    if (v18)
    {
      *(void *)(v12 + 192) = v18;
      operator delete(v18);
    }
    long long v19 = *(void **)(v12 + 160);
    if (v19)
    {
      *(void *)(v12 + 168) = v19;
      operator delete(v19);
    }
    long long v20 = *(void **)(v12 + 136);
    if (v20)
    {
      *(void *)(v12 + 144) = v20;
      operator delete(v20);
    }
    *(void *)(v15 - 160) = v12 + 112;
    std::vector<PDFIndirectObject>::__destroy_vector::operator()[abi:fe180100]((void ***)(v15 - 160));
    *(void *)(v15 - 160) = v12 + 48;
    std::vector<PDFLinearizerPageInfo>::__destroy_vector::operator()[abi:fe180100]((void ***)(v15 - 160));
    if (*(char *)(v12 + 47) < 0) {
      operator delete(*v13);
    }
    MEMORY[0x18532A2A0](v12, 0x1072C405A727712);
    long long v21 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      (*(void (**)(void *))(*(void *)v21 + 16))(v21);
      pdf_error("%s caught exception: %s");
    }
    else
    {
      pdf_error("%s caught an unknown exception");
    }
    __cxa_end_catch();
    *(void *)(v10 + 520) = 0;
    JUMPOUT(0x184FC52A8);
  }
  __cxa_free_exception(v11);
  goto LABEL_7;
}

uint64_t pdf_DrawImageApplyingToneMapping(uint64_t a1, uint64_t a2, double *a3, CGImage *a4, double a5, double a6, double a7, double a8)
{
  return 0;
}

uint64_t pdf_DrawImage(uint64_t a1, uint64_t a2, double *a3, CGImageRef image, double a5, double a6, double a7, double a8)
{
  uint64_t v14 = a2;
  uint64_t v15 = a1;
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  if (a1) {
    uint64_t v16 = *(void *)(a1 + 288);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void *)(v16 + 480);
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 72);
    if (v18)
    {
      Copdouble y = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((void *)Copy + 9) = 0x300000003;
      copyGState(v17, (uint64_t)a3);
      uint64_t v27 = v26;
      if (*(_DWORD *)(v18 + 16) == 1129601108)
      {
        uint64_t v28 = *(void *)(v18 + 40);
        if (v28)
        {
          CFBooleanRef v29 = *(void (**)(double, double, double, double))(v28 + 80);
          if (v29) {
            v29(a5, a6, a7, a8);
          }
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v18, v20, v21, v22, v23, v24, v25);
      }
      if (atomic_fetch_add_explicit((atomic_uint *volatile)Copy, 0xFFFFFFFF, memory_order_relaxed) == 1) {
        free(Copy);
      }
      CGGStateRelease(v27);
    }
  }
  CFStringRef UTType = CGImageGetUTType(image);
  if (UTType)
  {
    CFStringRef v31 = UTType;
    if (CFEqual(UTType, @"public.jpeg")) {
      BOOL v32 = 0;
    }
    else {
      BOOL v32 = CFEqual(v31, @"public.jpeg-2000") == 0;
    }
  }
  else
  {
    BOOL v32 = 1;
  }
  if (*(unsigned char *)(v16 + 88))
  {
    if (image)
    {
      double v33 = a5;
      double v34 = a8;
      double v35 = a6;
      double v37 = a3[3];
      double v36 = a3[4];
      double v38 = a3[5];
      double v39 = a3[6];
      double v40 = a7;
      BOOL v41 = a7 < 0.0;
      double v42 = a3[7];
      double v43 = a3[8];
      double v94 = v34;
      double v95 = v40;
      if (v41 || v34 < 0.0)
      {
        double v47 = v33;
        double v48 = v35;
        *(CGRect *)(&v40 - 2) = CGRectStandardize(*(CGRect *)(&v40 - 2));
      }
      else
      {
        double v44 = v33;
        double v45 = v35;
      }
      v100.double a = v38 * 0.0 + v40 * v37;
      v100.double b = v39 * 0.0 + v40 * v36;
      v100.c = v34 * v38 + v37 * 0.0;
      v100.d = v34 * v39 + v36 * 0.0;
      v100.tdouble x = v42 + v38 * v45 + v44 * v37;
      v100.tdouble y = v39 * v45 + v44 * v36 + v43;
      v103.origin.double x = 0.0;
      v103.origin.double y = 0.0;
      v103.size.double width = 1.0;
      v103.size.double height = 1.0;
      CGRect v104 = CGRectApplyAffineTransform(v103, &v100);
      double v49 = (double)*((unint64_t *)image + 5);
      double v50 = v104.size.width * 144.0 / (v49 * 72.0);
      if (v50 > 1.0) {
        double v50 = 1.0;
      }
      if (v50 >= 0.95)
      {
        int v46 = 0;
        a6 = v35;
        a8 = v94;
        a7 = v95;
        a5 = v33;
      }
      else
      {
        unint64_t v98 = llround(v50 * (double)*((unint64_t *)image + 6));
        unint64_t valuePtr = llround(v50 * v49);
        int v97 = 3;
        CFNumberRef v51 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
        CFNumberRef v52 = CFNumberCreate(0, kCFNumberCFIndexType, &v98);
        CFNumberRef v53 = CFNumberCreate(0, kCFNumberSInt32Type, &v97);
        keys[0] = @"kCGColorTransformConvertImageWidth";
        keys[1] = @"kCGColorTransformConvertImageHeight";
        keys[2] = @"kCGColorTransformConvertImageQuality";
        values[0] = v51;
        values[1] = v52;
        values[2] = v53;
        CFDictionaryRef v54 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        a6 = v35;
        a5 = v33;
        if (v51) {
          CFRelease(v51);
        }
        a8 = v94;
        if (v52) {
          CFRelease(v52);
        }
        a7 = v95;
        if (v53) {
          CFRelease(v53);
        }
        CGColorRenderingIntent RenderingIntent = CGImageGetRenderingIntent(image);
        int v46 = (CGImage *)CGColorTransformConvertImage(image, RenderingIntent, v54);
      }
    }
    else
    {
      int v46 = 0;
    }
    if (v46) {
      image = v46;
    }
  }
  else
  {
    int v46 = 0;
  }
  if (v46) {
    char v56 = v32;
  }
  else {
    char v56 = 1;
  }
  if (*(unsigned char *)(v16 + 74) || (v56 & 1) == 0)
  {
    jpeg_copdouble y = create_jpeg_copy(image, *(double *)(v16 + 80));
    uint64_t v57 = jpeg_copy;
    if (jpeg_copy) {
      image = jpeg_copy;
    }
  }
  else
  {
    uint64_t v57 = 0;
  }
  uint64_t v96 = v16;
  if (image
    && (uint64_t v59 = *((void *)image + 27)) != 0
    && CGPropertiesGetProperty(v59, @"com.apple.CoreGraphics.Is1Bit1ChannelImage"))
  {
    uint64_t v91 = v14;
    uint64_t v92 = v15;
    uint64_t v93 = a3;
    uint64_t v60 = *((void *)image + 27);
    if (v60) {
      CGPropertiesGetProperty(v60, @"com.apple.CoreGraphics.Is1Bit1ChannelImageColorSpace");
    }
    unint64_t v61 = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericGrayGamma2_2");
    size_t v62 = *((void *)image + 5);
    size_t v63 = *((void *)image + 6);
    unint64_t v64 = (char *)malloc_type_calloc(v62, v63, 0x4B71996uLL);
    CGColorSpaceRef space = v61;
    int v65 = CGBitmapContextCreateWithData(v64, v62, v63, 8uLL, v62, v61, 0, 0, 0);
    v105.origin.double x = 0.0;
    v105.origin.double y = 0.0;
    v105.size.double width = (double)v62;
    v105.size.double height = (double)v63;
    CGContextClearRect(v65, v105);
    CGContextConcatCTM(v65, (CGAffineTransform *)&CGAffineTransformIdentity);
    v106.origin.double x = 0.0;
    v106.origin.double y = 0.0;
    v106.size.double width = (double)v62;
    v106.size.double height = (double)v63;
    CGContextDrawImage(v65, v106, image);
    size_t v66 = (v62 + 7) >> 3;
    unint64_t v67 = (char *)malloc_type_calloc(v66, v63, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v63)
    {
      for (uint64_t i = 0; i != v63; ++i)
      {
        if (v62)
        {
          int v69 = 0;
          int v70 = &v64[i * v62];
          unsigned __int8 v71 = 0x80;
          size_t v72 = v62;
          int v73 = &v67[i * v66];
          do
          {
            if (v69 == 8)
            {
              ++v73;
              unsigned __int8 v71 = 0x80;
            }
            int v74 = *v70++;
            if (v74 < 0) {
              *v73 |= v71;
            }
            v71 >>= 1;
            if (v69 == 8) {
              int v69 = 1;
            }
            else {
              ++v69;
            }
            --v72;
          }
          while (v72);
        }
      }
    }
    check_clients_buffer("CGDataProviderCreateWithData", v67, v66 * v63);
    unint64_t v75 = CGDataProviderCreateWithDataInternal((uint64_t)v67, (uint64_t)v67, v66 * v63, (uint64_t)_CGDataProviderReleaseDataCallback, 0);
    uint64_t v76 = CGImageCreate(v62, v63, 1uLL, 1uLL, (v62 + 7) >> 3, space, 0, v75, 0, 0, kCGRenderingIntentDefault);
    CGDataProviderRelease(v75);
    if (v65) {
      CFRelease(v65);
    }
    CGColorSpaceRelease(space);
    a3 = v93;
    uint64_t v14 = v91;
    if (v64) {
      free(v64);
    }
    if (v76) {
      image = v76;
    }
    uint64_t v15 = v92;
  }
  else
  {
    uint64_t v76 = 0;
  }
  CFStringRef v77 = CGImageGetUTType(image);
  if (!v77 || !CFEqual(v77, @"public.jpeg-2000"))
  {
LABEL_81:
    if (!image || (*((unsigned char *)image + 39) & 4) == 0) {
      goto LABEL_90;
    }
    goto LABEL_83;
  }
  if (!image || (*((unsigned char *)image + 39) & 4) == 0)
  {
    if (!*(unsigned char *)(*(void *)(v15 + 288) + 91)) {
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  if (*((void *)image + 22) || *(unsigned char *)(*(void *)(v15 + 288) + 91))
  {
LABEL_79:
    uint64_t v78 = create_jpeg_copy(image, *(double *)(v96 + 80));
    uint64_t v57 = v78;
    if (v78) {
      image = v78;
    }
    goto LABEL_81;
  }
LABEL_83:
  if (is_image_alpha_opaque((uint64_t)image))
  {
    CGImageRef v79 = CGImageCreateCopy(image);
    CGImageRef v80 = v79;
    if (v79)
    {
      unsigned int v81 = (*((_DWORD *)v79 + 8) & 0x1F) - 1;
      if (v81 <= 3)
      {
        unsigned int v82 = *((_DWORD *)v79 + 8) & 0xFFFFFFE0 | dword_1850CE120[v81];
        unsigned int v83 = *((_DWORD *)v79 + 9) & 0xFBFFFFFF;
        *((_DWORD *)v79 + 8) = v82;
        *((_DWORD *)v79 + 9) = v83;
      }
      image = v79;
    }
    if (v15) {
      goto LABEL_89;
    }
    goto LABEL_91;
  }
LABEL_90:
  CGImageRef v80 = 0;
  if (v15)
  {
LABEL_89:
    uint64_t v84 = *(void *)(v15 + 288);
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v84 = 0;
LABEL_92:
  ContentStreaunint64_t m = (char *)PDFDocumentGetContentStream(v84);
  uint64_t v86 = (uint64_t)ContentStream;
  if (ContentStream)
  {
    long long v87 = *(_OWORD *)(v14 + 24);
    long long v88 = *(_OWORD *)(v14 + 40);
    *(_OWORD *)(ContentStream + 152) = *(_OWORD *)(v14 + 56);
    *(_OWORD *)(ContentStream + 136) = v88;
    *(_OWORD *)(ContentStream + 120) = v87;
  }
  PDFContentStreamSetRedactionPath((uint64_t)ContentStream, *(CFTypeRef *)(*(void *)(v15 + 288) + 488));
  PDFContentStreamDrawImage(v86, (uint64_t)a3, image, a5, a6, a7, a8);
  if (v80) {
    CFRelease(v80);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v76) {
    CFRelease(v76);
  }
  return 0;
}

double copyGState(uint64_t a1, uint64_t a2)
{
  Copdouble y = (double *)CGGStateCreateCopy(a2);
  double v4 = *(double *)(a1 + 80);
  double v5 = Copy[3];
  double v6 = Copy[4];
  double v7 = Copy[5];
  double v8 = Copy[6];
  double v9 = Copy[8];
  double v10 = v7 * 0.0;
  double v11 = v7 * 0.0 + v4 * v5;
  double v12 = v8 * 0.0 + v4 * v6;
  double v13 = v4 * v7 + v5 * 0.0;
  double result = v4 * v8 + v6 * 0.0;
  double v15 = Copy[7] + v10 + v5 * 0.0;
  Copy[3] = v11;
  Copy[4] = v12;
  Copy[5] = v13;
  Copy[6] = result;
  Copy[7] = v15;
  Copy[8] = v8 * 0.0 + v6 * 0.0 + v9;
  return result;
}

CGFloat pdf_GetBounds(uint64_t a1)
{
  if (a1) {
    a1 = *(void *)(a1 + 288);
  }
  ContentStreaunint64_t m = (char *)PDFDocumentGetContentStream(a1);
  uint64_t v2 = &CGRectNull;
  if (ContentStream) {
    uint64_t v2 = (const CGRect *)(ContentStream + 72);
  }
  return v2->origin.x;
}

uint64_t pdf_Operation(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf1, const __CFDictionary *a5)
{
  long long v168 = 0uLL;
  if (a1) {
    uint64_t v10 = *(void *)(a1 + 288);
  }
  else {
    uint64_t v10 = 0;
  }
  if (!CFEqual(cf1, @"kCGContextStyle"))
  {
    if (CFEqual(cf1, @"BeginTag"))
    {
      LODWORD(v169) = 0;
      if (CGCFDictionaryGetInteger(a5, @"TagType", &v169))
      {
        int v49 = v169;
        CFDictionaryRef v50 = (const __CFDictionary *)CFDictionaryGetValue(a5, @"TagProperties");
        ContentStreaunint64_t m = PDFDocumentGetContentStream(v10);
        uint64_t v58 = *ContentStream;
        if (*(_DWORD *)(*ContentStream + 544) == 2)
        {
          uint64_t v59 = 0xFFFFFFFFLL;
        }
        else
        {
          *(_DWORD *)(v58 + 544) = 1;
          if (!*(void *)(v58 + 560))
          {
            *(void *)(v58 + 560) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
            PDFDocumentPushTag((PDFDocument *)v58, 100, 0);
          }
          uint64_t v59 = (uint64_t)PDFDocumentPushTag((PDFDocument *)v58, v49, v50);
        }
        ++ContentStream[22];
        uint64_t v164 = v59;
        uint64_t v76 = "/P << /MCID %d >> BDC";
        CFStringRef v77 = (unsigned char **)ContentStream[8];
        goto LABEL_31;
      }
    }
    else
    {
      if (CFEqual(cf1, @"EndTag"))
      {
        uint64_t v68 = PDFDocumentGetContentStream(v10);
        PDFContentStreamEndTag(v68, v69, v70, v71, v72, v73, v74, v75, v164);
        return 0;
      }
      if (!CFEqual(cf1, @"BeginTagWithMCID"))
      {
        if (CFEqual(cf1, @"BeginAccessibilitySpan"))
        {
          uint64_t v96 = PDFDocumentGetContentStream(v10);
          PDFContentStreamBeginAccessibilitySpan((uint64_t)v96, a5);
          return 0;
        }
        if (CFEqual(cf1, @"EndAccessibilitySpan"))
        {
          CFStringRef v77 = (unsigned char **)*((void *)PDFDocumentGetContentStream(v10) + 8);
          uint64_t v76 = "EMC";
LABEL_31:
          PDFWriterPrintf(v77, (uint64_t)v76, v51, v52, v53, v54, v55, v56, v164);
          return 0;
        }
        if (CFEqual(cf1, @"AddDestinationAtPoint"))
        {
          if (a5)
          {
            int v97 = (void *)CFDictionaryGetValue(a5, @"Label");
            if (v97)
            {
              unint64_t v98 = v97;
              if (CGCFDictionaryGetPoint(a5, @"Point", (UInt8 *)&v168))
              {
                DestinationSet = PDFDocumentGetDestinationSet(v10);
                Destination = PDFDestinationSetGetDestination(DestinationSet, v98);
                if (Destination)
                {
                  uint64_t v101 = *(void *)(v10 + 480);
                  if (v101)
                  {
                    uint64_t v102 = Destination;
                    uint64_t result = 0;
                    v102[2] = *(void *)(v101 + 16);
                    *(_OWORD *)(v102 + 3) = v168;
                    return result;
                  }
                }
              }
            }
          }
          return 1000;
        }
        if (CFEqual(cf1, @"AddAnnotation"))
        {
          uint64_t result = 1000;
          if (a5)
          {
            uint64_t v103 = *(void *)(v10 + 480);
            if (v103)
            {
              PDFDocumentAddAnnotationToPage((PDFDocument *)v10, v103, a5);
              return 0;
            }
          }
          return result;
        }
        if (CFEqual(cf1, @"AddCatalogEntry"))
        {
          if (a5)
          {
            CGRect v104 = CFDictionaryGetValue(a5, @"Key");
            CGRect v105 = (void *)CFDictionaryGetValue(a5, @"Value");
            PDFDocumentAddCatalogEntry(v10, v104, v105);
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"SetImageTag"))
        {
          if (a5)
          {
            CGRect v106 = CFDictionaryGetValue(a5, @"Image");
            uint64_t v107 = (void *)CFDictionaryGetValue(a5, @"Tag");
            PDFDocumentAddImageTag(v10, (uint64_t)v106, v107);
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"AddPDFXInfo"))
        {
          if (a5)
          {
            PDFDocumentAddPDFXInfo(v10, a5);
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"SetOutputIntent"))
        {
          if (a5)
          {
            if (*(unsigned char *)(v10 + 91)) {
              pdf_error("SetOutputIntent cannot be used when generating PDF/A output");
            }
            else {
              PDFDocumentSetOutputIntent(v10, a5);
            }
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"ShouldDeflate"))
        {
          if (a5)
          {
            uint64_t result = (uint64_t)CFDictionaryGetValue(a5, @"ShouldDeflate");
            if (result)
            {
              int v108 = CFBooleanGetValue((CFBooleanRef)result);
              uint64_t result = 0;
              *(unsigned char *)(v10 + 73) = v108 == 0;
            }
            return result;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"BeginDrawingHiddenText"))
        {
          if (*(void *)(v10 + 480))
          {
            if (a1) {
              uint64_t v109 = *(void *)(a1 + 288);
            }
            else {
              uint64_t v109 = 0;
            }
            uint64_t result = (uint64_t)PDFDocumentGetContentStream(v109);
            if (result)
            {
              uint64_t v111 = result;
              uint64_t result = 0;
              *(unsigned char *)(v111 + 169) = 1;
            }
            return result;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"EndDrawingHiddenText"))
        {
          if (*(void *)(v10 + 480))
          {
            if (a1) {
              uint64_t v110 = *(void *)(a1 + 288);
            }
            else {
              uint64_t v110 = 0;
            }
            uint64_t result = (uint64_t)PDFDocumentGetContentStream(v110);
            if (result)
            {
              uint64_t v113 = result;
              uint64_t result = 0;
              *(unsigned char *)(v113 + 169) = 0;
            }
            return result;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"SetRedactionPath"))
        {
          if (a5)
          {
            uint64_t v112 = CFDictionaryGetValue(a5, @"RedactionPath");
            PDFDocumentSetPageRedactionPath(v10, v112);
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"SetParentTree"))
        {
          if (a5)
          {
            uint64_t v114 = CFDictionaryGetValue(a5, @"ParentTree");
            PDFDocumentSetParentTree((void *)v10, v114);
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"SetIDTree"))
        {
          if (a5)
          {
            uint64_t v115 = CFDictionaryGetValue(a5, @"IDTree");
            PDFDocumentSetIDTree((void *)v10, v115);
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"SetPageTagStructureTree"))
        {
          if (a5)
          {
            PDFDocumentSetPageTagStructureTree((void *)v10, a5);
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"BeginMarkedContentSequence"))
        {
          LODWORD(v169) = 0;
          if (CGCFDictionaryGetInteger(a5, @"TagType", &v169))
          {
            PDFDocumentBeginMarkedContentSequence(v10, v169, v116, v117, v118, v119, v120, v121);
            return 0;
          }
          return 1000;
        }
        if (CFEqual(cf1, @"BeginStructuralMarkedContentSequence"))
        {
          LODWORD(v169) = 0;
          if ((CGCFDictionaryGetInteger(a5, @"TagType", &v169) & 1) == 0) {
            return 1000;
          }
          long long v122 = (void *)[(__CFDictionary *)a5 valueForKey:@"MarkedContentItem"];
          if (!v122) {
            return 1000;
          }
          uint64_t v123 = [v122 pointerValue];
          if (!v123) {
            return 1000;
          }
          uint64_t v130 = (void *)v123;
          uint64_t v131 = PDFDocumentBeginStructuralMarkedContentSequence(v10, v169, v124, v125, v126, v127, v128, v129);
        }
        else
        {
          if (CFEqual(cf1, @"EndMarkedContentSequence"))
          {
            PDFDocumentEndMarkedContentSequence(v10, v132, v133, v134, v135, v136, v137, v138);
            return 0;
          }
          if (!CFEqual(cf1, @"BeginObjectReference"))
          {
            if (CFEqual(cf1, @"EndObjectReference"))
            {
              PDFDocumentEndObjectReference(v10, v149, v150, v151, v152, v153, v154, v155);
              return 0;
            }
            if (!CFEqual(cf1, @"AddStructureTreeRootChild")) {
              return 1006;
            }
            uint64_t v156 = (void *)[(__CFDictionary *)a5 valueForKey:@"StructureElement"];
            if (v156)
            {
              uint64_t v157 = (const void *)[v156 pointerValue];
              if (v157)
              {
                return PDFDocumentAddStructureTreeRootChild((void *)v10, v157, v158, v159, v160, v161, v162, v163);
              }
            }
            return 1000;
          }
          double v139 = (void *)[(__CFDictionary *)a5 valueForKey:@"MarkedContentItem"];
          if (!v139) {
            return 1000;
          }
          uint64_t v140 = [v139 pointerValue];
          if (!v140) {
            return 1000;
          }
          uint64_t v130 = (void *)v140;
          uint64_t v131 = PDFDocumentBeginObjectReference((void *)v10, v141, v142, v143, v144, v145, v146, v147);
        }
        uint64_t v148 = v131;
        uint64_t result = 0;
        *uint64_t v130 = v148;
        return result;
      }
      uint64_t v78 = CFDictionaryGetValue(a5, @"PageProperties");
      if (v78)
      {
        uint64_t v79 = (uint64_t)v78;
        *(void *)&long long v169 = 0;
        if (CGCFDictionaryGetNumber(a5, @"MCID", kCFNumberSInt64Type, &v169))
        {
          CGImageRef v80 = (uint64_t *)PDFDocumentGetContentStream(v10);
          PDFContentStreamBeginTagWithMCID(v80, v79, v169, v81, v82, v83, v84, v85);
          return 0;
        }
      }
    }
    return 1000;
  }
  double v11 = (char *)PDFDocumentGetContentStream(v10);
  double v12 = v11;
  if (v11)
  {
    long long v13 = *(_OWORD *)(a2 + 24);
    long long v14 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v11 + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v11 + 136) = v14;
    *(_OWORD *)(v11 + 120) = v13;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(a5, @"kCGContextStyleType");
  if (result)
  {
    uint64_t v22 = (const void *)result;
    PDFWriterAnnotate(*((void *)v12 + 8), (uint64_t)"%s: BEGIN: Draw style.", v16, v17, v18, v19, v20, v21, (uint64_t)"PDFContentStreamDrawStyle");
    PDFWriterAnnotate(*((void *)v12 + 8), (uint64_t)"  Forcing gstate reset:", v23, v24, v25, v26, v27, v28, v165);
    PDFGStateReset(*((void *)v12 + 13));
    PDFGStateEmit(*((CFArrayRef **)v12 + 13));
    PDFGStateSetClipStack(*((void *)v12 + 13), *(__CFArray **)(a3 + 112));
    PDFWriterAnnotate(*((void *)v12 + 8), (uint64_t)"  BEGIN: Drawing style:", v29, v30, v31, v32, v33, v34, v166);
    if (CFEqual(v22, @"kCGContextStyleBegin"))
    {
      PDFWriterPrintf(*((unsigned char ***)v12 + 8), (uint64_t)"/AAPL:Style", v35, v36, v37, v38, v39, v40, v167);
      BOOL v41 = CFDictionaryGetValue(a5, @"kCGContextStyle");
      uint64_t v42 = *(void *)v12;
      double v43 = *(uint64_t **)(*(void *)v12 + 408);
      if (!v43)
      {
        double v43 = (uint64_t *)malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        if (!v43)
        {
          *(void *)(v42 + 408) = 0;
LABEL_44:
          uint64_t v88 = *((void *)v12 + 14);
          uint64_t v89 = *(const void ***)(v88 + 80);
          if (!v89)
          {
            uint64_t v89 = CGOrderedSetCreate();
            *(void *)(v88 + 80) = v89;
          }
          CGOrderedSetAddValue((CFSetRef *)v89, v43);
          size_t v66 = (unsigned char **)*((void *)v12 + 8);
          uint64_t v167 = (uint64_t)(v43 + 3);
          unint64_t v67 = "/%s BDC";
          goto LABEL_47;
        }
        *double v43 = v42;
        *(void *)(v42 + 408) = v43;
      }
      long long v44 = *(_OWORD *)(v12 + 136);
      long long v169 = *(_OWORD *)(v12 + 120);
      long long v170 = v44;
      long long v171 = *(_OWORD *)(v12 + 152);
      if (!v43[1]) {
        v43[1] = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &callbacks_1440);
      }
      CGPDFArrayRef value = 0;
      uint64_t v45 = *v43;
      int v46 = malloc_type_calloc(1uLL, 0x70uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      if (v46)
      {
        *int v46 = 1;
        *((void *)v46 + 1) = v45;
        *((void *)v46 + 2) = 0;
        *((unsigned char *)v46 + 24) = 0;
        *((unsigned char *)v46 + 40) = 0;
        v46[11] = 0;
        double v47 = (char *)malloc_type_malloc(6uLL, 0x566C45D1uLL);
        __CFSetLastAllocationEventName();
        *((void *)v46 + 13) = v47;
        if (v47)
        {
          strcpy(v47, "Style");
          v46[11] = 1;
          if (v41) {
            CFRetain(v41);
          }
          *((void *)v46 + 6) = v41;
          long long v48 = v170;
          *(_OWORD *)(v46 + 14) = v169;
          *(_OWORD *)(v46 + 18) = v48;
          *(_OWORD *)(v46 + 22) = v171;
        }
        else
        {
          PDFPropertyListRelease(v46);
          int v46 = 0;
        }
      }
      if (!CFSetGetValueIfPresent((CFSetRef)v43[1], v46, (const void **)&value))
      {
        int v86 = *((_DWORD *)v43 + 6) + 1;
        *((_DWORD *)v43 + 6) = v86;
        snprintf_l((char *)v46 + 24, 0x10uLL, 0, "Pl%u", v86);
        CFSetAddValue((CFMutableSetRef)v43[1], v46);
        CGPDFArrayRef value = v46;
      }
      PDFPropertyListRelease(v46);
      long long v87 = (const void **)v43[2];
      if (!v87)
      {
        long long v87 = CGOrderedSetCreate();
        v43[2] = (uint64_t)v87;
      }
      CGOrderedSetAddValue((CFSetRef *)v87, value);
      double v43 = (uint64_t *)value;
      goto LABEL_44;
    }
    if (!CFEqual(v22, @"kCGContextStyleEnd"))
    {
      if (CFEqual(v22, @"kCGContextStyleContentBegin"))
      {
        size_t v66 = (unsigned char **)*((void *)v12 + 8);
        unint64_t v67 = "/AAPL:StyleContent BMC";
        goto LABEL_47;
      }
      if (!CFEqual(v22, @"kCGContextStyleContentEnd")) {
        goto LABEL_48;
      }
    }
    size_t v66 = (unsigned char **)*((void *)v12 + 8);
    unint64_t v67 = "EMC";
LABEL_47:
    PDFWriterPrintf(v66, (uint64_t)v67, v60, v61, v62, v63, v64, v65, v167);
LABEL_48:
    PDFWriterAnnotate(*((void *)v12 + 8), (uint64_t)"  END: Drawing style:", v60, v61, v62, v63, v64, v65, v167);
    PDFWriterAnnotate(*((void *)v12 + 8), (uint64_t)"%s: END: Draw style.", v90, v91, v92, v93, v94, v95, (uint64_t)"PDFContentStreamDrawStyle");
    return 0;
  }
  return result;
}

uint64_t pdf_EndPage(uint64_t a1)
{
  if (a1) {
    a1 = *(void *)(a1 + 288);
  }
  PDFDocumentEndPage(a1);
  return 0;
}

uint64_t pdf_BeginPage(void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  if (a1) {
    a1 = (void *)a1[36];
  }
  PDFDocumentBeginPage(a1, a4);
  return 0;
}

uint64_t pdf_DrawDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 288) + 480);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9)
    {
      Copdouble y = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((void *)Copy + 9) = 0x300000003;
      double v17 = copyGState(v8, a3);
      uint64_t v19 = v18;
      if (*(_DWORD *)(v9 + 16) == 1129601108)
      {
        uint64_t v20 = *(void *)(v9 + 40);
        if (v20)
        {
          uint64_t v21 = *(void (**)(double))(v20 + 128);
          if (v21) {
            v21(v17);
          }
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v9, v11, v12, v13, v14, v15, v16);
      }
      if (atomic_fetch_add_explicit((atomic_uint *volatile)Copy, 0xFFFFFFFF, memory_order_relaxed) == 1) {
        free(Copy);
      }
      CGGStateRelease(v19);
    }
  }
  ContentStreaunint64_t m = (char *)PDFDocumentGetContentStream(*(void *)(a1 + 288));
  uint64_t v23 = (uint64_t *)ContentStream;
  if (ContentStream)
  {
    long long v24 = *(_OWORD *)(a2 + 24);
    long long v25 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(ContentStream + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(ContentStream + 136) = v25;
    *(_OWORD *)(ContentStream + 120) = v24;
  }
  PDFContentStreamSetRedactionPath((uint64_t)ContentStream, *(CFTypeRef *)(*(void *)(a1 + 288) + 488));
  if (v23) {
    BOOL v26 = a4 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  if (!v26)
  {
    uint64_t v27 = PDFDocumentAddFormWithDisplayList(*v23, a4);
    uint64_t v28 = v23[14];
    uint64_t v29 = *(const void ***)(v28 + 56);
    if (!v29)
    {
      uint64_t v29 = CGOrderedSetCreate();
      *(void *)(v28 + 56) = v29;
    }
    CGOrderedSetAddValue((CFSetRef *)v29, v27);
    uint64_t v36 = *(void *)(v28 + 8);
    uint64_t v37 = *(void *)(v36 + 584);
    if (v37)
    {
      uint64_t v38 = *((void *)v27 + 2);
      if (v38) {
        uint64_t v38 = *(void *)(v38 + 8);
      }
      if (*(_DWORD *)(v37 + 16) == 1 && !*(void *)(v37 + 32))
      {
        *(void *)(v37 + 32) = v38;
        uint64_t v39 = *(void *)(v36 + 592);
        *(void *)(v36 + 592) = v39 + 1;
        *(void *)(v37 + 40) = v39;
      }
      else
      {
        uint64_t v39 = -1;
      }
      *((void *)v27 + 10) = v39;
    }
    PDFWriterAnnotate(v23[8], (uint64_t)"%s: BEGIN: Draw display list.", v30, v31, v32, v33, v34, v35, (uint64_t)"PDFContentStreamDrawDisplayList");
    PDFWriterAnnotate(v23[8], (uint64_t)"  Forcing gstate reset:", v40, v41, v42, v43, v44, v45, v99);
    PDFGStateReset(v23[13]);
    PDFWriterAnnotate(v23[8], (uint64_t)"  BEGIN: Drawing display list:", v46, v47, v48, v49, v50, v51, v100);
    PDFGStateSetClipStack(v23[13], *(__CFArray **)(a3 + 112));
    uint64_t v58 = v23[13];
    int v59 = *(unsigned __int8 *)(*(void *)(a3 + 144) + 24);
    if (*(unsigned __int8 *)(v58 + 200) != v59)
    {
      *(unsigned char *)(v58 + 200) = v59;
      addEmitFunction(v58, emitNonStrokeOverprintChange);
      uint64_t v58 = v23[13];
    }
    double v60 = *(double *)(*(void *)(a3 + 120) + 8);
    if (*(double *)(v58 + 168) != v60)
    {
      *(double *)(v58 + 168) = v60;
      addEmitFunction(v58, emitNonStrokeAlphaChange);
      uint64_t v58 = v23[13];
    }
    PDFGStateSetOverprintMode(v58, *(unsigned int *)(*(void *)(a3 + 144) + 28), v52, v53, v54, v55, v56, v57);
    PDFGStateSetBlackGeneration(v23[13], *(CFTypeRef *)(*(void *)(a3 + 144) + 32));
    PDFGStateSetUndercolorRemoval(v23[13], *(CFTypeRef *)(*(void *)(a3 + 144) + 40));
    PDFGStateSetStyle(v23[13], *(void *)(*(void *)(a3 + 120) + 16));
    PDFGStateSetSoftMask(v23[13], *(CFTypeRef *)(*(void *)(a3 + 120) + 40));
    uint64_t v61 = v23[13];
    int v62 = (int)(*(_DWORD *)(*(void *)(a3 + 120) + 4) << 16) >> 24;
    if ((v62 - 13) >= 0xF) {
      int v62 = 2;
    }
    if (*(_DWORD *)(v61 + 248) != v62)
    {
      *(_DWORD *)(v61 + 248) = v62;
      addEmitFunction(v61, emitBlendModeChange);
      uint64_t v61 = v23[13];
    }
    PDFGStateEmit((CFArrayRef *)v61);
    uint64_t v69 = *(void *)(*v23 + 480);
    if (v69)
    {
      CFDictionaryRef v70 = *(const __CFDictionary **)(v69 + 48);
      long long v103 = 0uLL;
      if (v70 && CGCFDictionaryGetPoint(v70, @"DisplayListOrigin", (UInt8 *)&v103)) {
        *((_OWORD *)v27 + 4) = v103;
      }
    }
    else
    {
      long long v103 = 0uLL;
    }
    long long v71 = *(_OWORD *)(a3 + 56);
    float64x2_t v72 = *(float64x2_t *)(a3 + 40);
    v104[0] = *(float64x2_t *)(a3 + 24);
    v104[1] = v72;
    long long v105 = v71;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v104[0], (float64x2_t)xmmword_1850CD830), (int32x4_t)vceqq_f64(v72, (float64x2_t)xmmword_1850CD8C0))))) & 1) != 0|| *(double *)&v105 != 0.0)
    {
      uint64_t v73 = (unsigned char **)v23[8];
    }
    else
    {
      uint64_t v73 = (unsigned char **)v23[8];
      if (*((double *)&v105 + 1) == 0.0)
      {
        PDFWriterPrintf(v73, (uint64_t)"/%s Do", v63, v64, v65, v66, v67, v68, (uint64_t)v27 + 40);
LABEL_45:
        PDFWriterAnnotate(v23[8], (uint64_t)"  END: Drawing display list:", v74, v75, v76, v77, v78, v79, v101);
        PDFWriterAnnotate(v23[8], (uint64_t)"%s: END: Draw display list.", v92, v93, v94, v95, v96, v97, (uint64_t)"PDFContentStreamDrawDisplayList");
        return 0;
      }
    }
    PDFWriterPrintf(v73, (uint64_t)"q %*m cm", v63, v64, v65, v66, v67, v68, (uint64_t)v104);
    PDFWriterPrintf((unsigned char **)v23[8], (uint64_t)"/%s Do", v80, v81, v82, v83, v84, v85, (uint64_t)v27 + 40);
    PDFWriterPrintf((unsigned char **)v23[8], (uint64_t)"Q", v86, v87, v88, v89, v90, v91, v102);
    goto LABEL_45;
  }
  return 0;
}

uint64_t pdf_DrawShading(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(a1[36] + 480);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 72);
    if (v13)
    {
      Copdouble y = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((void *)Copy + 9) = 0x300000003;
      double v21 = copyGState(v12, a3);
      uint64_t v23 = v22;
      if (*(_DWORD *)(v13 + 16) == 1129601108)
      {
        uint64_t v24 = *(void *)(v13 + 40);
        if (v24)
        {
          long long v25 = *(void (**)(double))(v24 + 96);
          if (v25) {
            v25(v21);
          }
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v13, v15, v16, v17, v18, v19, v20);
      }
      if (atomic_fetch_add_explicit((atomic_uint *volatile)Copy, 0xFFFFFFFF, memory_order_relaxed) == 1) {
        free(Copy);
      }
      CGGStateRelease(v23);
    }
  }
  unsigned int v26 = a4[5];
  BOOL v27 = v26 > 4;
  int v28 = (1 << v26) & 0x16;
  if (v27 || v28 == 0)
  {
    CGShadingDrawInContextDelegate((uint64_t)a4, a1, a2, a3, a5, a6, a7, a8);
    return 0;
  }
  ContentStreaunint64_t m = (char *)PDFDocumentGetContentStream(a1[36]);
  uint64_t v31 = (uint64_t *)ContentStream;
  if (ContentStream)
  {
    long long v32 = *(_OWORD *)(a2 + 24);
    long long v33 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(ContentStream + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(ContentStream + 136) = v33;
    *(_OWORD *)(ContentStream + 120) = v32;
  }
  PDFContentStreamSetRedactionPath((uint64_t)ContentStream, *(CFTypeRef *)(a1[36] + 488));
  if (v31 && a4)
  {
    uint64_t v34 = PDFDocumentAddShading(*v31, a4);
    uint64_t v35 = v31[14];
    uint64_t v36 = *(const void ***)(v35 + 88);
    if (!v36)
    {
      uint64_t v36 = CGOrderedSetCreate();
      *(void *)(v35 + 88) = v36;
    }
    CGOrderedSetAddValue((CFSetRef *)v36, v34);
    PDFWriterAnnotate(v31[8], (uint64_t)"Drawing shading", v37, v38, v39, v40, v41, v42, v81);
    PDFGStateSetClipStack(v31[13], *(__CFArray **)(a3 + 112));
    uint64_t v49 = v31[13];
    uint64_t v50 = *(void *)(a3 + 120);
    unsigned int v51 = *(_DWORD *)(v50 + 4);
    if (((v51 >> 20) & 0xF) != 0) {
      int v52 = v51 << 8;
    }
    else {
      int v52 = v51 << 12;
    }
    if (v52 >> 28) {
      int v53 = v52 >> 28;
    }
    else {
      int v53 = 2;
    }
    if (*(_DWORD *)(v49 + 80) != v53)
    {
      *(_DWORD *)(v49 + 80) = v53;
      addEmitFunction(v49, emitRenderingIntentChange);
      uint64_t v49 = v31[13];
      uint64_t v50 = *(void *)(a3 + 120);
    }
    double v54 = *(double *)(v50 + 8);
    if (*(double *)(v49 + 168) != v54)
    {
      *(double *)(v49 + 168) = v54;
      addEmitFunction(v49, emitNonStrokeAlphaChange);
      uint64_t v49 = v31[13];
    }
    uint64_t v55 = *(void *)(a3 + 144);
    int v56 = *(unsigned __int8 *)(v55 + 24);
    if (*(unsigned __int8 *)(v49 + 200) != v56)
    {
      *(unsigned char *)(v49 + 200) = v56;
      addEmitFunction(v49, emitNonStrokeOverprintChange);
      uint64_t v49 = v31[13];
      uint64_t v55 = *(void *)(a3 + 144);
    }
    PDFGStateSetOverprintMode(v49, *(unsigned int *)(v55 + 28), v43, v44, v45, v46, v47, v48);
    PDFGStateSetBlackGeneration(v31[13], *(CFTypeRef *)(*(void *)(a3 + 144) + 32));
    PDFGStateSetUndercolorRemoval(v31[13], *(CFTypeRef *)(*(void *)(a3 + 144) + 40));
    PDFGStateSetStyle(v31[13], *(void *)(*(void *)(a3 + 120) + 16));
    PDFGStateSetSoftMask(v31[13], *(CFTypeRef *)(*(void *)(a3 + 120) + 40));
    uint64_t v57 = v31[13];
    int v58 = (int)(*(_DWORD *)(*(void *)(a3 + 120) + 4) << 16) >> 24;
    if ((v58 - 13) >= 0xF) {
      int v58 = 2;
    }
    if (*(_DWORD *)(v57 + 248) != v58)
    {
      *(_DWORD *)(v57 + 248) = v58;
      addEmitFunction(v57, emitBlendModeChange);
      uint64_t v57 = v31[13];
    }
    PDFGStateEmit((CFArrayRef *)v57);
    long long v65 = *(_OWORD *)(a3 + 56);
    float64x2_t v66 = *(float64x2_t *)(a3 + 40);
    v83[0] = *(float64x2_t *)(a3 + 24);
    v83[1] = v66;
    long long v84 = v65;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v83[0], (float64x2_t)xmmword_1850CD830), (int32x4_t)vceqq_f64(v66, (float64x2_t)xmmword_1850CD8C0))))) & 1) != 0|| *(double *)&v84 != 0.0)
    {
      uint64_t v67 = (unsigned char **)v31[8];
    }
    else
    {
      uint64_t v67 = (unsigned char **)v31[8];
      if (*((double *)&v84 + 1) == 0.0)
      {
        PDFWriterPrintf(v67, (uint64_t)"/%s sh", v59, v60, v61, v62, v63, v64, (uint64_t)(v34 + 4));
        return 0;
      }
    }
    PDFWriterPrintf(v67, (uint64_t)"q %*m cm", v59, v60, v61, v62, v63, v64, (uint64_t)v83);
    PDFWriterPrintf((unsigned char **)v31[8], (uint64_t)"/%s sh", v68, v69, v70, v71, v72, v73, (uint64_t)(v34 + 4));
    PDFWriterPrintf((unsigned char **)v31[8], (uint64_t)"Q", v74, v75, v76, v77, v78, v79, v82);
  }
  return 0;
}

uint64_t pdf_DrawGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, unsigned __int16 *a5, double *a6, unint64_t a7)
{
  uint64_t v14 = *(void *)(*(void *)(a1 + 288) + 480);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 72);
    if (v15)
    {
      Copdouble y = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((void *)Copy + 9) = 0x300000003;
      double v23 = copyGState(v14, a3);
      uint64_t v25 = v24;
      if (*(_DWORD *)(v15 + 16) == 1129601108)
      {
        uint64_t v26 = *(void *)(v15 + 40);
        if (v26)
        {
          BOOL v27 = *(void (**)(double))(v26 + 88);
          if (v27) {
            v27(v23);
          }
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v15, v17, v18, v19, v20, v21, v22);
      }
      if (atomic_fetch_add_explicit((atomic_uint *volatile)Copy, 0xFFFFFFFF, memory_order_relaxed) == 1) {
        free(Copy);
      }
      CGGStateRelease(v25);
    }
  }
  ContentStreaunint64_t m = PDFDocumentGetContentStream(*(void *)(a1 + 288));
  if (ContentStream) {
    BOOL v29 = a4 == 0;
  }
  else {
    BOOL v29 = 1;
  }
  if (!v29 && a5 != 0 && a6 != 0 && a7 != 0)
  {
    uint64_t v33 = (uint64_t)ContentStream;
    uint64_t v34 = *(void *)(*(void *)(a3 + 136) + 8);
    uint64_t v46 = "nonmarkingreturn";
    unsigned __int16 v45 = 0;
    if (v34
      && ((*(void (**)(void, const char **, unsigned __int16 *, uint64_t))(*(void *)(v34 + 16) + 280))(*(void *)(v34 + 112), &v46, &v45, 1), (int v35 = v45) != 0))
    {
      uint64_t v44 = a3;
      unint64_t v36 = 0;
      while (a5[v36] != v45)
      {
        if (a7 == ++v36)
        {
          uint64_t v37 = 0;
          goto LABEL_37;
        }
      }
      uint64_t v38 = (unsigned __int16 *)malloc_type_malloc(2 * a7, 0x1000040BDFB0063uLL);
      uint64_t v37 = v38;
      if (v38)
      {
        memcpy(v38, a5, 2 * v36);
        if (v36 < a7)
        {
          do
          {
            int v39 = a5[v36];
            if (v39 == v35) {
              LOWORD(v39) = -1;
            }
            v37[v36++] = v39;
          }
          while (a7 != v36);
        }
        a5 = v37;
      }
LABEL_37:
      a3 = v44;
    }
    else
    {
      uint64_t v37 = 0;
    }
    long long v40 = *(_OWORD *)(a2 + 24);
    long long v41 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v33 + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v33 + 136) = v41;
    *(_OWORD *)(v33 + 120) = v40;
    PDFContentStreamSetRedactionPath(v33, *(CFTypeRef *)(*(void *)(a1 + 288) + 488));
    PDFContentStreamDrawGlyphs(v33, a3, a4, a5, a6, a7, v42);
    free(v37);
  }
  return 0;
}

uint64_t pdf_DrawPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const CGPath *a5)
{
  uint64_t v10 = *(void *)(*(void *)(a1 + 288) + 480);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 72);
    if (v11)
    {
      Copdouble y = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((void *)Copy + 9) = 0x300000003;
      copyGState(v10, a3);
      uint64_t v14 = v13;
      v37.double a = *(CGFloat *)(v10 + 80);
      v37.double b = 0.0;
      v37.c = 0.0;
      v37.d = v37.a;
      v37.tdouble x = 0.0;
      v37.tdouble y = 0.0;
      CGMutablePathRef v21 = CGPathCreateMutableCopyByTransformingPath(a5, &v37);
      if (*(_DWORD *)(v11 + 16) == 1129601108)
      {
        uint64_t v22 = *(void *)(v11 + 40);
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v11, v15, v16, v17, v18, v19, v20);
        uint64_t v22 = 0;
      }
      CGContextDelegateDrawPath(v22, (uint64_t)Copy, v14, a4, v21);
      if (atomic_fetch_add_explicit((atomic_uint *volatile)Copy, 0xFFFFFFFF, memory_order_relaxed) == 1) {
        free(Copy);
      }
      CGGStateRelease(v14);
      if (v21) {
        CFRelease(v21);
      }
    }
  }
  ContentStreaunint64_t m = (char *)PDFDocumentGetContentStream(*(void *)(a1 + 288));
  uint64_t v24 = (uint64_t)ContentStream;
  if (ContentStream)
  {
    long long v25 = *(_OWORD *)(a2 + 24);
    long long v26 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(ContentStream + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(ContentStream + 136) = v26;
    *(_OWORD *)(ContentStream + 120) = v25;
  }
  PDFContentStreamSetRedactionPath((uint64_t)ContentStream, *(CFTypeRef *)(*(void *)(a1 + 288) + 488));
  uint64_t v30 = *(const CGPath **)(v24 + 200);
  if (v30)
  {
    if (a5)
    {
      CopyByClippingWithPath = (const CGPath *)pathCreateCopyByClippingWithPath(2, a5, 1, v30, 1);
      if (CopyByClippingWithPath)
      {
        int v35 = CopyByClippingWithPath;
        PDFWritePath(v24, *(unsigned char ***)(v24 + 64), a3, a4, CopyByClippingWithPath, v32, v33, v34);
        CFRelease(v35);
      }
    }
  }
  else
  {
    PDFWritePath(v24, *(unsigned char ***)(v24 + 64), a3, a4, a5, v27, v28, v29);
  }
  return 0;
}

void pdf_Finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1) {
    uint64_t v8 = *(void *)(a1 + 288);
  }
  else {
    uint64_t v8 = 0;
  }
  PDFDocumentFinalize(v8, a2, a3, a4, a5, a6, a7, a8);

  PDFDocumentRelease(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t __CGPDFFontDescriptorGetTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFFontDescriptorGetTypeID_class);
  CGPDFFontDescriptorGetTypeID_id = result;
  return result;
}

void CGPDFFontDescriptorFinalize(uint64_t a1)
{
}

void CGPDFFontDescriptorRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFTypeRef CGPDFFontDescriptorRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

uint64_t CGPDFFontDescriptorGetDictionary(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t CGPDFFontDescriptorGetFlags(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 40);
  }
  return result;
}

uint64_t CGPDFFontDescriptorGetStyle(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(void *)(result + 24))
    {
      uint64_t v2 = (double *)malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      if (!v2) {
        return 0;
      }
      double v18 = 0.0;
      CGPDFReal value = 0.0;
      BOOL Number = CGPDFDictionaryGetNumber(*(CGPDFDictionaryRef *)(v1 + 32), "StemV", &value);
      double v4 = value;
      if (!Number) {
        double v4 = 0.0;
      }
      double *v2 = v4;
      v2[1] = 0.0;
      if (CGPDFDictionaryGetNumber(*(CGPDFDictionaryRef *)(v1 + 32), "ItalicAngle", &v18))
      {
        double v5 = v18;
        v2[1] = v18;
        if (fabs(v5) > 20.0) {
          v2[1] = -12.0;
        }
      }
      unsigned int v6 = *(_DWORD *)(v1 + 40);
      int v7 = (v6 >> 6) & 1;
      *((unsigned char *)v2 + 16) = (v6 & 0x40) != 0;
      *((unsigned char *)v2 + 18) = (v6 & 2) != 0;
      *((unsigned char *)v2 + 19) = v6 & 1;
      *((unsigned char *)v2 + 20) = BYTE2(v6) & 1;
      *((unsigned char *)v2 + 21) = (v6 & 0x20000) != 0;
      *((unsigned char *)v2 + 17) = 0;
      uint64_t v8 = *(void *)(v1 + 16);
      if (v8)
      {
        int v9 = *(_DWORD *)(v8 + 200);
        if (v9 == 7 || v9 == 4)
        {
          uint64_t v10 = *(const char **)(v8 + 32);
          if (v10)
          {
            uint64_t v11 = 0;
            uint64_t v12 = (const char **)variants;
            while (!font_name_contains_variant(v10, *v12))
            {
              ++v11;
              v12 += 3;
              if (v11 == 8)
              {
                BOOL v13 = 0;
                goto LABEL_21;
              }
            }
            BOOL v13 = (v11 & 0x7FFFFFFFFFFFFFFBLL) != 2;
LABEL_21:
            uint64_t v14 = 0;
            *((unsigned char *)v2 + 16) = v7 | v13;
            uint64_t v15 = (const char **)variants;
            while (!font_name_contains_variant(v10, *v15))
            {
              ++v14;
              v15 += 3;
              if (v14 == 8) {
                goto LABEL_24;
              }
            }
            unint64_t v16 = (0xDCuLL >> v14) & 1;
          }
          else
          {
LABEL_24:
            LOBYTE(v16) = 0;
          }
          *((unsigned char *)v2 + 17) = v16;
        }
      }
      uint64_t v17 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v1 + 24), (unint64_t *)&v17, (unint64_t)v2, memory_order_relaxed, memory_order_relaxed);
      if (v17) {
        free(v2);
      }
    }
    return *(void *)(v1 + 24);
  }
  return result;
}

uint64_t soft_mask_hash(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

BOOL soft_mask_equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t CGSoftMaskGetTypeID()
{
  if (_block_invoke_once_16928 != -1) {
    dispatch_once(&_block_invoke_once_16928, &__block_literal_global_5_16929);
  }
  return CGSoftMaskGetTypeID_soft_mask_type_id;
}

void release_soft_mask(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t draw_soft_mask(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 136);
  if (v1) {
    return v1(*(void *)(result + 120));
  }
  return result;
}

CFTypeRef CGSoftMaskRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void CGSoftMaskRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t CGSoftMaskGetIdentifier(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

BOOL CGSoftMaskEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

__n128 CGSoftMaskGetMatrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (const CGAffineTransform *)(a1 + 24);
  if (!a1) {
    uint64_t v2 = &CGAffineTransformIdentity;
  }
  long long v3 = *(_OWORD *)&v2->c;
  *(_OWORD *)a2 = *(_OWORD *)&v2->a;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)&v2->tx;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

CGFloat CGSoftMaskGetBounds(uint64_t a1)
{
  uint64_t v1 = &CGRectNull;
  if (a1) {
    uint64_t v1 = (const CGRect *)(a1 + 72);
  }
  return v1->origin.x;
}

uint64_t CGSoftMaskGetBackground(uint64_t result)
{
  if (result) {
    return *(void *)(result + 104);
  }
  return result;
}

uint64_t CGSoftMaskGetTransfer(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

_DWORD *CGPDFSecurityHandlerCreate(CGPDFArrayRef *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0xE0uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v2) {
    return v2;
  }
  CGPDFReal v40 = 0.0;
  CGPDFBoolean v39 = 0;
  CGPDFInteger v37 = 0;
  uint64_t v38 = 0;
  CGPDFStringRef v35 = 0;
  CGPDFInteger v36 = 0;
  CGPDFStringRef value = 0;
  CGPDFStringRef v34 = 0;
  *((_WORD *)v2 + 92) = 0;
  v2[47] = 0;
  *((void *)v2 + 3) = 0;
  if (CGPDFArrayGetString(*a1, 0, &value)) {
    *((void *)v2 + 3) = value;
  }
  long long v3 = a1[1];
  if (!CGPDFDictionaryGetInteger(v3, "V", &v37))
  {
    pdf_error("missing or invalid security handler version.");
LABEL_86:
    free(v2);
    return 0;
  }
  switch(v37)
  {
    case 1:
      CGPDFInteger v4 = 40;
      goto LABEL_16;
    case 2:
      CGPDFInteger v5 = 40;
      goto LABEL_11;
    case 4:
      CGPDFInteger v5 = 128;
LABEL_11:
      CGPDFInteger v36 = v5;
      BOOL Integer = CGPDFDictionaryGetInteger(v3, "Length", &v36);
      CGPDFInteger v4 = v36;
      if (!Integer || (unint64_t)(v36 - 40) <= 0x58 && (v36 & 7) == 0) {
        goto LABEL_17;
      }
      goto LABEL_86;
    case 5:
      CGPDFInteger v4 = 256;
LABEL_16:
      CGPDFInteger v36 = v4;
LABEL_17:
      *((void *)v2 + 1) = v4 / 8;
      if (!CGPDFDictionaryGetNumber(v3, "R", &v40))
      {
        pdf_error("missing or invalid security handler revision.");
        goto LABEL_86;
      }
      switch(v37)
      {
        case 0:
          double v7 = 2.0;
          break;
        case 1:
        case 2:
        case 3:
          if (v40 == 2.0) {
            goto LABEL_28;
          }
          double v7 = 3.0;
          break;
        case 4:
          double v7 = 4.0;
          break;
        case 5:
          if (v40 == 5.0) {
            goto LABEL_28;
          }
          double v7 = 6.0;
          break;
        default:
          goto LABEL_27;
      }
      if (v40 != v7)
      {
LABEL_27:
        goto LABEL_86;
      }
LABEL_28:
      _DWORD *v2 = (int)v40;
      if (!CGPDFDictionaryGetString(v3, "O", &v34))
      {
        goto LABEL_86;
      }
      CGPDFStringRef v8 = v34;
      if (!v34)
      {
        if ((int)*v2 >= 5 && (*v2 - 5) >= 2) {
          goto LABEL_54;
        }
        goto LABEL_43;
      }
      if (*((void *)v34 + 3)) {
        decrypt_string((uint64_t)v34);
      }
      unint64_t v9 = *((void *)v8 + 9);
      if ((int)*v2 < 5)
      {
        if (v9 == 32)
        {
          CGPDFStringRef v10 = v34;
          if (*((void *)v34 + 3)) {
            decrypt_string((uint64_t)v34);
          }
          long long v11 = *((_OWORD *)v10 + 6);
          *((_OWORD *)v2 + 7) = *((_OWORD *)v10 + 5);
          *((_OWORD *)v2 + 8) = v11;
          goto LABEL_54;
        }
LABEL_43:
        goto LABEL_86;
      }
      if ((*v2 - 5) >= 2) {
        goto LABEL_54;
      }
      if (v9 <= 0x2F) {
        goto LABEL_43;
      }
      CGPDFStringRef v12 = v34;
      if (*((void *)v34 + 3))
      {
        decrypt_string((uint64_t)v34);
        int v13 = *v2;
        long long v15 = *((_OWORD *)v12 + 6);
        long long v14 = *((_OWORD *)v12 + 7);
        *((_OWORD *)v2 + 7) = *((_OWORD *)v12 + 5);
        *((_OWORD *)v2 + 8) = v15;
        *((_OWORD *)v2 + 9) = v14;
        if (v13 < 5) {
          goto LABEL_49;
        }
      }
      else
      {
        long long v16 = *((_OWORD *)v34 + 5);
        long long v17 = *((_OWORD *)v34 + 7);
        *((_OWORD *)v2 + 8) = *((_OWORD *)v34 + 6);
        *((_OWORD *)v2 + 9) = v17;
        *((_OWORD *)v2 + 7) = v16;
      }
      *((void *)v2 + 20) = *((void *)v12 + 14);
      *((void *)v2 + 21) = *((void *)v12 + 15);
LABEL_49:
      if (!CGPDFDictionaryGetString(v3, "OE", (CGPDFStringRef *)v2 + 22))
      {
        goto LABEL_86;
      }
      uint64_t v18 = *((void *)v2 + 22);
      if (!v18) {
        goto LABEL_71;
      }
      if (*(void *)(v18 + 24)) {
        decrypt_string(*((void *)v2 + 22));
      }
      if (*(void *)(v18 + 72) != 32)
      {
LABEL_71:
        goto LABEL_86;
      }
LABEL_54:
      if (!CGPDFDictionaryGetString(v3, "U", &v35))
      {
        goto LABEL_86;
      }
      CGPDFStringRef v19 = v35;
      if (v35)
      {
        if (*((void *)v35 + 3)) {
          decrypt_string((uint64_t)v35);
        }
        unint64_t v20 = *((void *)v19 + 9);
        if ((int)*v2 < 5)
        {
          if (v20 == 32)
          {
            CGPDFStringRef v21 = v35;
            if (*((void *)v35 + 3)) {
              decrypt_string((uint64_t)v35);
            }
            long long v22 = *((_OWORD *)v21 + 6);
            *(_OWORD *)((char *)v2 + 33) = *((_OWORD *)v21 + 5);
            *(_OWORD *)((char *)v2 + 49) = v22;
            goto LABEL_82;
          }
          goto LABEL_69;
        }
        if ((*v2 - 5) < 2)
        {
          if (v20 <= 0x2F)
          {
LABEL_69:
            goto LABEL_86;
          }
          CGPDFStringRef v23 = v35;
          if (*((void *)v35 + 3))
          {
            decrypt_string((uint64_t)v35);
            int v24 = *v2;
            long long v26 = *((_OWORD *)v23 + 6);
            long long v25 = *((_OWORD *)v23 + 7);
            *(_OWORD *)((char *)v2 + 33) = *((_OWORD *)v23 + 5);
            *(_OWORD *)((char *)v2 + 49) = v26;
            *(_OWORD *)((char *)v2 + 65) = v25;
            if (v24 < 5) {
              goto LABEL_77;
            }
          }
          else
          {
            long long v27 = *((_OWORD *)v35 + 5);
            long long v28 = *((_OWORD *)v35 + 6);
            *(_OWORD *)((char *)v2 + 65) = *((_OWORD *)v35 + 7);
            *(_OWORD *)((char *)v2 + 49) = v28;
            *(_OWORD *)((char *)v2 + 33) = v27;
          }
          *(void *)((char *)v2 + 81) = *((void *)v23 + 14);
          *(void *)((char *)v2 + 89) = *((void *)v23 + 15);
LABEL_77:
          if (!CGPDFDictionaryGetString(v3, "UE", (CGPDFStringRef *)v2 + 13))
          {
            goto LABEL_86;
          }
          uint64_t v29 = *((void *)v2 + 13);
          if (!v29) {
            goto LABEL_94;
          }
          if (*(void *)(v29 + 24)) {
            decrypt_string(*((void *)v2 + 13));
          }
          if (*(void *)(v29 + 72) != 32)
          {
LABEL_94:
            goto LABEL_86;
          }
        }
      }
      else if ((int)*v2 < 5 || (*v2 - 5) < 2)
      {
        goto LABEL_69;
      }
LABEL_82:
      if (!CGPDFDictionaryGetOffset(v3, "P", &v38))
      {
LABEL_85:
        pdf_error("missing or invalid security handler permissions.");
        goto LABEL_86;
      }
      v2[4] = v38;
      unsigned int v30 = *v2 - 5;
      BOOL String = CGPDFDictionaryGetString(v3, "Perms", 0);
      if (v30 > 1)
      {
        if (String) {
          pdf_error("encountered unexpected /Perms entry.");
        }
      }
      else if (!String)
      {
        goto LABEL_85;
      }
      *((unsigned char *)v2 + 32) = 1;
      if ((v37 & 0xFFFFFFFFFFFFFFFELL) == 4 && CGPDFDictionaryGetBoolean(v3, "EncryptMetadata", &v39)) {
        *((unsigned char *)v2 + 32) = v39 != 0;
      }
      return v2;
    default:
      goto LABEL_86;
  }
}

uint64_t CGPDFSecurityHandlerAuthenticateUserPassword(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  size_t v3 = a3;
  if (!a2)
  {
    if (a3) {
      return 0;
    }
  }
  switch(*(_DWORD *)a1)
  {
    case 2:
      if ((get_encryption_key(a1, a2, a3, md) & 1) == 0)
      {
        pdf_error("Failed to generate file decryption key.\n");
        return 0;
      }
      *(_OWORD *)c.count = pad_16990;
      *(_OWORD *)&c.hash[2] = unk_185292F6C;
      RC4 = CGCryptorCreateRC4(md, *(void *)(a1 + 8));
      CGCryptorProcessBytes((uint64_t)RC4, &c, 0x20uLL, &c, 0x20uLL, 0);
      CGCryptorRelease((uint64_t)RC4);
      if (*(void *)c.count != *(void *)(a1 + 33)
        || *(void *)c.hash != *(void *)(a1 + 41)
        || *(void *)&c.hash[2] != *(void *)(a1 + 49)
        || *(void *)&c.hash[4] != *(void *)(a1 + 57))
      {
        return 0;
      }
      goto LABEL_61;
    case 3:
    case 4:
      if ((get_encryption_key(a1, a2, a3, md) & 1) == 0)
      {
        pdf_error("Failed to generate decryption key.\n");
        return 0;
      }
      unsigned int v6 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
      CC_MD5_Init(v6);
      if (v6)
      {
        CC_MD5_Update(v6, &pad_16990, 0x20u);
        CGPDFStringRef v8 = (uint64_t *)(a1 + 24);
        uint64_t v7 = *(void *)(a1 + 24);
        if (!v7) {
          goto LABEL_47;
        }
      }
      else
      {
        CGPDFStringRef v8 = (uint64_t *)(a1 + 24);
        uint64_t v7 = *(void *)(a1 + 24);
        if (!v7) {
          goto LABEL_48;
        }
      }
      if (*(void *)(v7 + 24))
      {
        decrypt_string(v7);
        uint64_t v19 = *v8;
        unint64_t v20 = (char *)(v7 + 80);
        if (!v19)
        {
          unint64_t v21 = 0;
          if (!v6) {
            goto LABEL_48;
          }
          goto LABEL_46;
        }
        uint64_t v7 = v19;
      }
      else
      {
        unint64_t v20 = (char *)(v7 + 80);
      }
      if (*(void *)(v7 + 24)) {
        decrypt_string(v7);
      }
      unint64_t v21 = *(void *)(v7 + 72);
      if (v6)
      {
LABEL_46:
        md5_update(v6, v20, v21);
LABEL_47:
        CC_MD5_Final((unsigned __int8 *)&c, v6);
      }
LABEL_48:
      free(v6);
      long long v22 = CGCryptorCreateRC4(md, *(void *)(a1 + 8));
      CGCryptorProcessBytes((uint64_t)v22, &c, 0x10uLL, &c, 0x10uLL, 0);
      CGCryptorRelease((uint64_t)v22);
      for (uint64_t i = 1; i != 20; ++i)
      {
        size_t v24 = *(void *)(a1 + 8);
        if (v24)
        {
          for (uint64_t j = 0; j != v24; ++j)
            *((unsigned char *)v29 + j) = md[j] ^ i;
          long long v26 = CGCryptorCreateRC4(v29, v24);
        }
        else
        {
          long long v26 = 0;
        }
        CGCryptorProcessBytes((uint64_t)v26, &c, 0x10uLL, &c, 0x10uLL, 0);
        CGCryptorRelease((uint64_t)v26);
      }
      if (*(void *)c.count == *(void *)(a1 + 33) && *(void *)c.hash == *(void *)(a1 + 41))
      {
LABEL_61:
        memcpy((void *)(a1 + 192), md, *(void *)(a1 + 8));
        return 1;
      }
      return 0;
    case 5:
      memset(&c.hash[6], 0, 72);
      if (a3 >= 0x7F) {
        LODWORD(v3) = 127;
      }
      memset(&c, 0, 32);
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, a2, v3);
      CC_SHA256_Update(&c, (const void *)(a1 + 81), 8u);
      CC_SHA256_Final(md, &c);
      uint64_t v13 = *(void *)md ^ *(void *)(a1 + 33) | *(void *)&md[8] ^ *(void *)(a1 + 41) | v32 ^ *(void *)(a1 + 49) | v33 ^ *(void *)(a1 + 57);
      BOOL v14 = v13 == 0;
      if (v13) {
        return v14;
      }
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, a2, v3);
      CC_SHA256_Update(&c, (const void *)(a1 + 89), 8u);
      CC_SHA256_Final(md, &c);
      goto LABEL_28;
    case 6:
      hash_password_revision_6(a2, a3, (const void *)(a1 + 81), 0, &c);
      uint64_t v15 = *(void *)c.count ^ *(void *)(a1 + 33) | *(void *)c.hash ^ *(void *)(a1 + 41) | *(void *)&c.hash[2] ^ *(void *)(a1 + 49) | *(void *)&c.hash[4] ^ *(void *)(a1 + 57);
      BOOL v14 = v15 == 0;
      if (v15) {
        return v14;
      }
      hash_password_revision_6(a2, v3, (const void *)(a1 + 89), 0, md);
LABEL_28:
      long long v16 = pdf_aes_create((uint64_t)md, 32);
      uint64_t v17 = *(void *)(a1 + 104);
      if (v17)
      {
        if (*(void *)(v17 + 24)) {
          decrypt_string(*(void *)(a1 + 104));
        }
        uint64_t v18 = (const void *)(v17 + 80);
      }
      else
      {
        uint64_t v18 = 0;
      }
      v29[0] = 0;
      CCCryptorUpdate((CCCryptorRef)v16[7], v18, 0x20uLL, (void *)(a1 + 192), 0x20uLL, v29);
      pdf_aes_free(v16);
      return v14;
    default:
      return 0;
  }
}

uint64_t get_encryption_key(uint64_t a1, char *a2, unint64_t a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a3 == 0;
  }
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  CGPDFStringRef v10 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v10);
  if (a3 < 0x20)
  {
    if (v10)
    {
      md5_update(v10, a2, a3);
      md5_update(v10, (char *)&pad_16990, 32 - a3);
      goto LABEL_14;
    }
  }
  else if (v10)
  {
    CC_MD5_Update(v10, a2, 0x20u);
LABEL_14:
    CC_MD5_Update(v10, (const void *)(a1 + 112), 0x20u);
    long long v11 = (const float *)(a1 + 16);
    uint32x4_t v12 = (uint32x4_t)vld1q_dup_f32(v11);
    int16x8_t v13 = (int16x8_t)vshlq_u32(v12, (uint32x4_t)xmmword_1850CDEC0);
    *(int16x4_t *)v13.i8 = vmovn_s32((int32x4_t)v13);
    unsigned __int32 data = vmovn_s16(v13).u32[0];
    CC_MD5_Update(v10, &data, 4u);
    goto LABEL_16;
  }
  BOOL v14 = (const float *)(a1 + 16);
  uint32x4_t v15 = (uint32x4_t)vld1q_dup_f32(v14);
  int16x8_t v16 = (int16x8_t)vshlq_u32(v15, (uint32x4_t)xmmword_1850CDEC0);
  *(int16x4_t *)v16.i8 = vmovn_s32((int32x4_t)v16);
  unsigned __int32 data = vmovn_s16(v16).u32[0];
LABEL_16:
  uint64_t v17 = *(void *)(a1 + 24);
  if (v17)
  {
    if (*(void *)(v17 + 24))
    {
      decrypt_string(*(void *)(a1 + 24));
      uint64_t v18 = (char *)(v17 + 80);
      if (!*(void *)(a1 + 24))
      {
        unint64_t v19 = 0;
        if (!v10) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 24);
    }
    else
    {
      uint64_t v18 = (char *)(v17 + 80);
    }
    if (*(void *)(v17 + 24)) {
      decrypt_string(v17);
    }
    unint64_t v19 = *(void *)(v17 + 72);
    if (v10) {
LABEL_24:
    }
      md5_update(v10, v18, v19);
  }
LABEL_25:
  if (*(int *)a1 >= 3 && !*(unsigned char *)(a1 + 32))
  {
    unsigned __int32 data = -1;
    if (!v10) {
      goto LABEL_29;
    }
    CC_MD5_Update(v10, &data, 4u);
    goto LABEL_28;
  }
  if (v10) {
LABEL_28:
  }
    CC_MD5_Final(md, v10);
LABEL_29:
  free(v10);
  if (*(int *)a1 >= 3)
  {
    uint64_t v20 = 50;
    do
    {
      unint64_t v21 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
      CC_MD5_Init(v21);
      if (v21)
      {
        md5_update(v21, (char *)md, *(void *)(a1 + 8));
        CC_MD5_Final(md, v21);
      }
      free(v21);
      --v20;
    }
    while (v20);
  }
  memcpy(a4, md, *(void *)(a1 + 8));
  return v5;
}

void hash_password_revision_6(const void *a1, size_t a2, const void *a3, long long *a4, _OWORD *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = (char *)malloc_type_malloc(0x3BC0uLL, 0x653C481AuLL);
  *(void *)&c.wbuf[14] = 0;
  if (a4) {
    int v10 = 48;
  }
  else {
    int v10 = 0;
  }
  memset(&c.wbuf[6], 0, 32);
  if (a2 >= 0x7F) {
    a2 = 127;
  }
  memset(&c, 0, 64);
  memset(&v31, 0, sizeof(v31));
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, a1, a2);
  CC_SHA256_Update(&c, a3, 8u);
  if (a4) {
    CC_SHA256_Update(&c, a4, 0x30u);
  }
  CC_SHA256_Final((unsigned __int8 *)&md, &c);
  int v11 = 0;
  unsigned int v12 = 0;
  int v26 = v10 + a2;
  unsigned int v13 = 32;
  while (v12 < 0x40 || (int)(v12 - 32) < v9[v11 - 1])
  {
    unsigned int v27 = v13;
    unsigned int v28 = v12;
    uint64_t v14 = v26 + v13;
    uint32x4_t v15 = v9;
    uint64_t v16 = 64;
    size_t v17 = v13;
    size_t v18 = a2 + v13;
    do
    {
      memcpy(v15, a1, a2);
      memcpy(&v15[a2], &md, v17);
      if (a4)
      {
        unint64_t v19 = &v15[v18];
        long long v20 = *a4;
        long long v21 = a4[2];
        *((_OWORD *)v19 + 1) = a4[1];
        *((_OWORD *)v19 + 2) = v21;
        *(_OWORD *)unint64_t v19 = v20;
      }
      v15 += v14;
      --v16;
    }
    while (v16);
    int v11 = v14 << 6;
    CCCryptorRef cryptorRef = 0;
    CCCryptorCreate(0, 0, 0, &md, 0x10uLL, v34, &cryptorRef);
    size_t dataOutMoved = 0;
    CCCryptorUpdate(cryptorRef, v9, (v14 << 6), v9, (v14 << 6), &dataOutMoved);
    CCCryptorRelease(cryptorRef);
    uint64_t v22 = 0;
    unsigned int v23 = 0;
    do
      unsigned int v23 = (v23 + v9[v22++] % 3u) % 3;
    while (v22 != 16);
    if (v23)
    {
      if (v23 == 1)
      {
        CC_SHA384_Init(&v31);
        CC_SHA384_Update(&v31, v9, v14 << 6);
        CC_SHA384_Final((unsigned __int8 *)&md, &v31);
        unsigned int v13 = 48;
      }
      else
      {
        unsigned int v13 = v27;
        if (v23 == 2)
        {
          CC_SHA512_Init(&v31);
          CC_SHA512_Update(&v31, v9, v14 << 6);
          CC_SHA512_Final((unsigned __int8 *)&md, &v31);
          unsigned int v13 = 64;
        }
      }
    }
    else
    {
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, v9, v14 << 6);
      CC_SHA256_Final((unsigned __int8 *)&md, &c);
      unsigned int v13 = 32;
    }
    unsigned int v12 = v28 + 1;
  }
  long long v24 = v34[0];
  *a5 = md;
  a5[1] = v24;
  free(v9);
}

uint64_t CGPDFSecurityHandlerAuthenticateOwnerPassword(uint64_t a1, _OWORD *a2, size_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  size_t v3 = a3;
  if (!a2)
  {
    if (a3) {
      return 0;
    }
  }
  int v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 - 2) < 3)
  {
    if (a3 > 0x1F)
    {
      long long v13 = a2[1];
      *(_OWORD *)c.count = *a2;
      *(_OWORD *)&c.hash[2] = v13;
    }
    else
    {
      __memcpy_chk();
      memcpy((char *)&c + v3, &pad_16990, 32 - v3);
    }
    CGGetMD5DigestOfBytes((unsigned __int8 *)&md, (char *)&c, 0x20uLL);
    if (*(int *)a1 >= 3)
    {
      uint64_t v14 = 50;
      do
      {
        CGGetMD5DigestOfBytes((unsigned __int8 *)&md, (char *)&md, *(void *)(a1 + 8));
        --v14;
      }
      while (v14);
    }
    RC4 = *(void **)(a1 + 8);
    __memcpy_chk();
    long long v16 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)c.count = *(_OWORD *)(a1 + 112);
    *(_OWORD *)&c.hash[2] = v16;
    if ((*(_DWORD *)a1 - 3) < 2)
    {
      for (uint64_t i = 0; i != 20; ++i)
      {
        if (RC4)
        {
          for (uint64_t j = 0; j != RC4; uint64_t j = (void *)((char *)j + 1))
            v28[(void)j] ^= 19 - (_BYTE)i;
          RC4 = CGCryptorCreateRC4(v28, (size_t)RC4);
        }
        CGCryptorProcessBytes((uint64_t)RC4, &c, 0x20uLL, &c, 0x20uLL, 0);
        CGCryptorRelease((uint64_t)RC4);
        RC4 = *(void **)(a1 + 8);
        if (RC4)
        {
          unint64_t v19 = v28;
          uint64_t v20 = *(void *)(a1 + 8);
          do
          {
            *v19++ ^= 19 - (_BYTE)i;
            --v20;
          }
          while (v20);
        }
      }
      return CGPDFSecurityHandlerAuthenticateUserPassword(a1, (char *)&c, 0x20uLL);
    }
    if (*(_DWORD *)a1 == 2)
    {
      long long v21 = CGCryptorCreateRC4(v28, (size_t)RC4);
      CGCryptorProcessBytes((uint64_t)v21, &c, 0x20uLL, &c, 0x20uLL, 0);
      CGCryptorRelease((uint64_t)v21);
      return CGPDFSecurityHandlerAuthenticateUserPassword(a1, (char *)&c, 0x20uLL);
    }
    return 0;
  }
  if (v8 != 5)
  {
    if (v8 != 6) {
      return 0;
    }
    hash_password_revision_6(a2, a3, (const void *)(a1 + 160), (long long *)(a1 + 33), &c);
    uint64_t v9 = *(void *)c.count ^ *(void *)(a1 + 112) | *(void *)c.hash ^ *(void *)(a1 + 120) | *(void *)&c.hash[2] ^ *(void *)(a1 + 128) | *(void *)&c.hash[4] ^ *(void *)(a1 + 136);
    BOOL v6 = v9 == 0;
    if (v9) {
      return v6;
    }
    hash_password_revision_6(a2, v3, (const void *)(a1 + 168), (long long *)(a1 + 33), &md);
    int v10 = pdf_aes_create((uint64_t)&md, 32);
    uint64_t v11 = *(void *)(a1 + 176);
    if (v11)
    {
      if (*(void *)(v11 + 24)) {
        decrypt_string(*(void *)(a1 + 176));
      }
      unsigned int v12 = (const void *)(v11 + 80);
    }
    else
    {
      unsigned int v12 = 0;
    }
    long long v24 = (void *)(a1 + 192);
    *(void *)unsigned int v28 = 0;
    uint64_t v25 = (_CCCryptor *)v10[7];
    p_size_t dataOutMoved = (size_t *)v28;
LABEL_45:
    CCCryptorUpdate(v25, v12, 0x20uLL, v24, 0x20uLL, p_dataOutMoved);
    pdf_aes_free(v10);
    return v6;
  }
  memset(&c.hash[6], 0, 72);
  if (a3 >= 0x7F) {
    LODWORD(v3) = 127;
  }
  memset(&c, 0, 32);
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, a2, v3);
  CC_SHA256_Update(&c, (const void *)(a1 + 160), 8u);
  CC_SHA256_Update(&c, (const void *)(a1 + 33), 0x20u);
  CC_SHA256_Update(&c, (const void *)(a1 + 81), 8u);
  CC_SHA256_Update(&c, (const void *)(a1 + 89), 8u);
  CC_SHA256_Final((unsigned __int8 *)&md, &c);
  uint64_t v22 = md ^ *(void *)(a1 + 112) | *((void *)&md + 1) ^ *(void *)(a1 + 120) | v31 ^ *(void *)(a1 + 128) | v32 ^ *(void *)(a1 + 136);
  BOOL v6 = v22 == 0;
  if (!v22)
  {
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, a2, v3);
    CC_SHA256_Update(&c, (const void *)(a1 + 168), 8u);
    CC_SHA256_Update(&c, (const void *)(a1 + 33), 0x20u);
    CC_SHA256_Update(&c, (const void *)(a1 + 81), 8u);
    CC_SHA256_Update(&c, (const void *)(a1 + 89), 8u);
    CC_SHA256_Final(v28, &c);
    int v10 = pdf_aes_create((uint64_t)v28, 32);
    uint64_t v23 = *(void *)(a1 + 176);
    if (v23)
    {
      if (*(void *)(v23 + 24)) {
        decrypt_string(*(void *)(a1 + 176));
      }
      unsigned int v12 = (const void *)(v23 + 80);
    }
    else
    {
      unsigned int v12 = 0;
    }
    long long v24 = (void *)(a1 + 192);
    size_t dataOutMoved = 0;
    uint64_t v25 = (_CCCryptor *)v10[7];
    p_size_t dataOutMoved = &dataOutMoved;
    goto LABEL_45;
  }
  return v6;
}

void CGPDFContextBeginMarkedContentSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 112);
    uint64_t v10 = *(void *)(a1 + 96);
    long long v13 = @"TagType";
    v14[0] = [objc_alloc(NSNumber) initWithInt:a2];
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
    if (v8)
    {
      unsigned int v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, uint64_t))(v8 + 168);
      if (v12) {
        v12(v8, v9, v10, @"BeginMarkedContentSequence", v11);
      }
    }
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextBeginMarkedContentSequence", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGPDFContextBeginStructuralMarkedContentSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 112);
    uint64_t v10 = *(void *)(a1 + 96);
    uint64_t v14 = 0;
    v15[0] = @"TagType";
    v15[1] = @"MarkedContentItem";
    v16[0] = [objc_alloc(NSNumber) initWithInt:a2];
    v16[1] = [MEMORY[0x1E4F29238] valueWithPointer:&v14];
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:2];
    if (v8)
    {
      unsigned int v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, uint64_t))(v8 + 168);
      if (v12) {
        v12(v8, v9, v10, @"BeginStructuralMarkedContentSequence", v11);
      }
    }
    return v14;
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextBeginStructuralMarkedContentSequence", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGPDFContextEndMarkedContentSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      uint64_t v9 = *(void (**)(void))(v8 + 168);
      if (v9) {
        v9();
      }
    }
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextEndMarkedContentSequence", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGPDFContextBeginObjectReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 112);
    uint64_t v10 = *(void *)(a1 + 96);
    uint64_t v14 = 0;
    uint32x4_t v15 = @"MarkedContentItem";
    v16[0] = [MEMORY[0x1E4F29238] valueWithPointer:&v14];
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:&v15 count:1];
    if (v8)
    {
      unsigned int v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, uint64_t))(v8 + 168);
      if (v12) {
        v12(v8, v9, v10, @"BeginObjectReference", v11);
      }
    }
    return v14;
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextBeginObjectReference", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGPDFContextEndObjectReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      uint64_t v9 = *(void (**)(void))(v8 + 168);
      if (v9) {
        v9();
      }
    }
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextEndObjectReference", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGPDFContextAddStructureTreeRootChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 112);
    uint64_t v10 = *(void *)(a1 + 96);
    uint64_t v14 = @"StructureElement";
    v15[0] = [MEMORY[0x1E4F29238] valueWithPointer:a2];
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:&v14 count:1];
    if (v8)
    {
      unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFString *, uint64_t))(v8 + 168);
      if (v12) {
        return v12(v8, v9, v10, @"AddStructureTreeRootChild", v11);
      }
      else {
        return 1006;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextAddStructureTreeRootChild", a1, a3, a4, a5, a6, a7, a8);
    return 1001;
  }
}

void JArithmeticDecoderStats::copy(JArithmeticDecoderStats *this)
{
}

void sub_184FCA69C(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x1010C40A1D9428BLL);
  _Unwind_Resume(a1);
}

uint64_t JArithmeticDecoder::start(JArithmeticDecoder *this)
{
  if (*((_DWORD *)this + 9))
  {
    int v2 = *((_DWORD *)this + 8);
    int v3 = v2 - 1;
    *((_DWORD *)this + 8) = v2 - 1;
    if (v2 <= 0)
    {
      int v4 = 255;
      *(_DWORD *)this = 255;
      *((_DWORD *)this + 8) = v3 - 1;
LABEL_7:
      int v8 = 255;
      goto LABEL_8;
    }
  }
  int v4 = (*(unsigned __int8 (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  int v5 = *((_DWORD *)this + 9);
  *(_DWORD *)this = v4;
  if (v5)
  {
    int v6 = *((_DWORD *)this + 8);
    BOOL v7 = __OFSUB__(v6--, 1);
    *((_DWORD *)this + 8) = v6;
    if (v6 < 0 != v7) {
      goto LABEL_7;
    }
  }
  int v8 = (*(unsigned __int8 (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  int v4 = *(_DWORD *)this;
LABEL_8:
  *((_DWORD *)this + 1) = v8;
  *((_DWORD *)this + 2) = (v4 << 16) ^ 0xFF0000;
  uint64_t result = JArithmeticDecoder::byteIn((uint64_t)this);
  int v10 = *((_DWORD *)this + 4) - 7;
  *((_DWORD *)this + 2) <<= 7;
  *((_DWORD *)this + 3) = 0x80000000;
  *((_DWORD *)this + 4) = v10;
  return result;
}

uint64_t JArithmeticDecoder::byteIn(uint64_t this)
{
  uint64_t v1 = (unsigned int *)this;
  unsigned int v2 = *(_DWORD *)(this + 4);
  if (*(_DWORD *)this != 255)
  {
    *(_DWORD *)this = v2;
    if (*(_DWORD *)(this + 36)
      && (v6 = *(_DWORD *)(this + 32), BOOL v4 = __OFSUB__(v6, 1), --v6, *(_DWORD *)(this + 32) = v6, (v6 < 0) ^ v4))
    {
      int v7 = 255;
    }
    else
    {
      this = (*(uint64_t (**)(void))(**(void **)(this + 24) + 32))(*(void *)(this + 24));
      int v7 = this;
      unsigned int v2 = *v1;
    }
    int v8 = v1[2] - (v2 << 8) + 65280;
    v1[1] = v7;
    v1[2] = v8;
    goto LABEL_11;
  }
  if (v2 > 0x8F)
  {
LABEL_11:
    int v9 = 8;
    goto LABEL_14;
  }
  *(_DWORD *)this = v2;
  if (*(_DWORD *)(this + 36)
    && (v3 = *(_DWORD *)(this + 32), BOOL v4 = __OFSUB__(v3, 1), --v3, *(_DWORD *)(this + 32) = v3, (v3 < 0) ^ v4))
  {
    int v5 = 255;
  }
  else
  {
    this = (*(uint64_t (**)(void))(**(void **)(this + 24) + 32))(*(void *)(this + 24));
    int v5 = this;
    unsigned int v2 = *v1;
  }
  int v10 = v1[2] - (v2 << 9) + 65024;
  v1[1] = v5;
  v1[2] = v10;
  int v9 = 7;
LABEL_14:
  v1[4] = v9;
  return this;
}

uint64_t JArithmeticDecoder::decodeBit(JArithmeticDecoder *this, unsigned int a2, uint64_t *a3)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)a3 + 2) <= a2) {
    return 0;
  }
  uint64_t v4 = *a3;
  unint64_t v5 = *(unsigned __int8 *)(*a3 + a2);
  unint64_t v6 = v5 >> 1;
  unsigned int v7 = JArithmeticDecoder::qeTab[v5 >> 1];
  uint64_t v8 = v5 & 1;
  unsigned int v9 = *((_DWORD *)this + 2);
  unsigned int v10 = *((_DWORD *)this + 3) - v7;
  *((_DWORD *)this + 3) = v10;
  BOOL v11 = v9 >= v10;
  unsigned int v12 = v9 - v10;
  if (v11)
  {
    *((_DWORD *)this + 2) = v12;
    if (v10 >= v7)
    {
      char v18 = 2 * JArithmeticDecoder::nlpsTab[v6];
      char v19 = v18 | v8;
      uint64_t v8 = v8 ^ 1;
      char v20 = v18 | v8;
      if (JArithmeticDecoder::switchTab[v6]) {
        char v17 = v20;
      }
      else {
        char v17 = v19;
      }
    }
    else
    {
      char v17 = v8 | (2 * JArithmeticDecoder::nmpsTab[v6]);
    }
    *(unsigned char *)(v4 + a2) = v17;
    *((_DWORD *)this + 3) = v7;
    int v21 = *((_DWORD *)this + 4);
    do
    {
      if (!v21)
      {
        JArithmeticDecoder::byteIn((uint64_t)this);
        unsigned int v7 = *((_DWORD *)this + 3);
        int v21 = *((_DWORD *)this + 4);
      }
      v7 *= 2;
      *((_DWORD *)this + 2) *= 2;
      *((_DWORD *)this + 3) = v7;
      *((_DWORD *)this + 4) = --v21;
    }
    while ((v7 & 0x80000000) == 0);
  }
  else if ((v10 & 0x80000000) == 0)
  {
    if (v10 >= v7)
    {
      char v15 = v8 | (2 * JArithmeticDecoder::nmpsTab[v6]);
    }
    else
    {
      char v13 = 2 * JArithmeticDecoder::nlpsTab[v6];
      char v14 = v13 | v8;
      uint64_t v8 = v8 ^ 1;
      char v15 = v13 | v8;
      if (!JArithmeticDecoder::switchTab[v6]) {
        char v15 = v14;
      }
    }
    *(unsigned char *)(v4 + a2) = v15;
    int v22 = *((_DWORD *)this + 4);
    do
    {
      if (!v22)
      {
        JArithmeticDecoder::byteIn((uint64_t)this);
        int v22 = *((_DWORD *)this + 4);
      }
      int v23 = 2 * *((_DWORD *)this + 3);
      *((_DWORD *)this + 2) *= 2;
      *((_DWORD *)this + 3) = v23;
      *((_DWORD *)this + 4) = --v22;
    }
    while ((v23 & 0x80000000) == 0);
  }
  return v8;
}

uint64_t JArithmeticDecoder::decodeInt(JArithmeticDecoder *a1, int *a2, uint64_t *a3)
{
  *((_DWORD *)a1 + 5) = 1;
  int v6 = JArithmeticDecoder::decodeBit(a1, 1u, a3);
  unsigned int v7 = *((_DWORD *)a1 + 5);
  if (v7 >= 0x100) {
    unsigned int v8 = v6 | (2 * v7) & 0xFE | 0x100;
  }
  else {
    unsigned int v8 = v6 | (2 * v7);
  }
  *((_DWORD *)a1 + 5) = v8;
  int v9 = JArithmeticDecoder::decodeBit(a1, v8, a3);
  unsigned int v10 = *((_DWORD *)a1 + 5);
  if (v10 >= 0x100) {
    unsigned int v11 = v9 | (2 * v10) & 0xFE | 0x100;
  }
  else {
    unsigned int v11 = v9 | (2 * v10);
  }
  *((_DWORD *)a1 + 5) = v11;
  int v12 = JArithmeticDecoder::decodeBit(a1, v11, a3);
  unsigned int v13 = *((_DWORD *)a1 + 5);
  if (v13 >= 0x100) {
    unsigned int v14 = v12 | (2 * v13) & 0xFE | 0x100;
  }
  else {
    unsigned int v14 = v12 | (2 * v13);
  }
  *((_DWORD *)a1 + 5) = v14;
  int v15 = JArithmeticDecoder::decodeBit(a1, v14, a3);
  int v16 = v15;
  unsigned int v17 = *((_DWORD *)a1 + 5);
  if (v17 >= 0x100) {
    unsigned int v18 = v15 | (2 * v17) & 0xFE | 0x100;
  }
  else {
    unsigned int v18 = v15 | (2 * v17);
  }
  *((_DWORD *)a1 + 5) = v18;
  if (v9)
  {
    if (v12)
    {
      if (v15)
      {
        int v19 = JArithmeticDecoder::decodeBit(a1, v18, a3);
        unsigned int v20 = *((_DWORD *)a1 + 5);
        if (v20 >= 0x100) {
          unsigned int v21 = v19 | (2 * v20) & 0xFE | 0x100;
        }
        else {
          unsigned int v21 = v19 | (2 * v20);
        }
        *((_DWORD *)a1 + 5) = v21;
        if (v19)
        {
          int v22 = JArithmeticDecoder::decodeBit(a1, v21, a3);
          unsigned int v23 = *((_DWORD *)a1 + 5);
          if (v23 >= 0x100) {
            unsigned int v24 = v22 | (2 * v23) & 0xFE | 0x100;
          }
          else {
            unsigned int v24 = v22 | (2 * v23);
          }
          *((_DWORD *)a1 + 5) = v24;
          int v25 = 0;
          if (v22)
          {
            int v26 = 32;
            do
            {
              int v27 = JArithmeticDecoder::decodeBit(a1, v24, a3);
              unsigned int v28 = *((_DWORD *)a1 + 5);
              if (v28 >= 0x100) {
                unsigned int v24 = v27 | (2 * v28) & 0xFE | 0x100;
              }
              else {
                unsigned int v24 = v27 | (2 * v28);
              }
              *((_DWORD *)a1 + 5) = v24;
              int v25 = v27 | (2 * v25);
              --v26;
            }
            while (v26);
            int v29 = v25 + 4436;
            if (!v6) {
              goto LABEL_66;
            }
          }
          else
          {
            int v48 = 12;
            do
            {
              int v49 = JArithmeticDecoder::decodeBit(a1, v24, a3);
              unsigned int v50 = *((_DWORD *)a1 + 5);
              if (v50 >= 0x100) {
                unsigned int v24 = v49 | (2 * v50) & 0xFE | 0x100;
              }
              else {
                unsigned int v24 = v49 | (2 * v50);
              }
              *((_DWORD *)a1 + 5) = v24;
              int v25 = v49 | (2 * v25);
              --v48;
            }
            while (v48);
            int v29 = v25 + 340;
            if (!v6) {
              goto LABEL_66;
            }
          }
        }
        else
        {
          int v44 = 0;
          int v45 = 8;
          do
          {
            int v46 = JArithmeticDecoder::decodeBit(a1, v21, a3);
            unsigned int v47 = *((_DWORD *)a1 + 5);
            if (v47 >= 0x100) {
              unsigned int v21 = v46 | (2 * v47) & 0xFE | 0x100;
            }
            else {
              unsigned int v21 = v46 | (2 * v47);
            }
            *((_DWORD *)a1 + 5) = v21;
            int v44 = v46 | (2 * v44);
            --v45;
          }
          while (v45);
          int v29 = v44 + 84;
          if (!v6) {
            goto LABEL_66;
          }
        }
      }
      else
      {
        int v41 = 6;
        do
        {
          int v42 = JArithmeticDecoder::decodeBit(a1, v18, a3);
          unsigned int v43 = *((_DWORD *)a1 + 5);
          if (v43 >= 0x100) {
            unsigned int v18 = v42 | (2 * v43) & 0xFE | 0x100;
          }
          else {
            unsigned int v18 = v42 | (2 * v43);
          }
          *((_DWORD *)a1 + 5) = v18;
          int v16 = v42 | (2 * v16);
          --v41;
        }
        while (v41);
        int v29 = v16 + 20;
        if (!v6) {
          goto LABEL_66;
        }
      }
    }
    else
    {
      int v30 = JArithmeticDecoder::decodeBit(a1, v18, a3);
      unsigned int v31 = *((_DWORD *)a1 + 5);
      if (v31 >= 0x100) {
        unsigned int v32 = v30 | (2 * v31) & 0xFE | 0x100;
      }
      else {
        unsigned int v32 = v30 | (2 * v31);
      }
      *((_DWORD *)a1 + 5) = v32;
      int v33 = (2 * v30) | (4 * v16);
      int v34 = JArithmeticDecoder::decodeBit(a1, v32, a3);
      unsigned int v35 = *((_DWORD *)a1 + 5);
      if (v35 >= 0x100) {
        unsigned int v36 = v34 | (2 * v35) & 0xFE | 0x100;
      }
      else {
        unsigned int v36 = v34 | (2 * v35);
      }
      *((_DWORD *)a1 + 5) = v36;
      int v37 = 2 * (v34 | v33);
      int v38 = JArithmeticDecoder::decodeBit(a1, v36, a3);
      unsigned int v39 = *((_DWORD *)a1 + 5);
      if (v39 >= 0x100) {
        int v40 = v38 | (2 * v39) & 0xFE | 0x100;
      }
      else {
        int v40 = v38 | (2 * v39);
      }
      *((_DWORD *)a1 + 5) = v40;
      int v29 = (v37 + 4) | v38;
      if (!v6) {
        goto LABEL_66;
      }
    }
  }
  else
  {
    int v29 = v15 | (2 * v12);
    if (!v6) {
      goto LABEL_66;
    }
  }
  if (v29)
  {
    int v29 = -v29;
LABEL_66:
    *a2 = v29;
    return 1;
  }
  return 0;
}

uint64_t JArithmeticDecoder::decodeIAID(JArithmeticDecoder *this, int a2, uint64_t *a3)
{
  unsigned int v4 = 1;
  *((_DWORD *)this + 5) = 1;
  if (a2)
  {
    int v7 = a2;
    do
    {
      unsigned int v4 = JArithmeticDecoder::decodeBit(this, v4, a3) | (2 * *((_DWORD *)this + 5));
      *((_DWORD *)this + 5) = v4;
      --v7;
    }
    while (v7);
  }
  return v4 + (-1 << a2);
}

uint64_t RenderTriangleMesh(double *a1, unsigned int a2, int *a3, int a4, uint64_t a5, uint64_t *a6, CGFloat *a7)
{
  v155[5] = *MEMORY[0x1E4F143B8];
  double v14 = *a1;
  double v13 = a1[1];
  if (a2 >= 2)
  {
    unsigned int v15 = a2 - 1;
    int v16 = a1 + 10;
    double v17 = *a1;
    double v18 = a1[1];
    while (1)
    {
      double v19 = *(v16 - 1);
      double v20 = v19 > v17 ? *(v16 - 1) : v17;
      if (v19 < v14) {
        double v14 = *(v16 - 1);
      }
      else {
        double v17 = v20;
      }
      double v21 = *v16;
      if (*v16 < v18) {
        break;
      }
      if (v21 <= v13) {
        goto LABEL_12;
      }
LABEL_13:
      v16 += 9;
      double v13 = v21;
      if (!--v15) {
        goto LABEL_16;
      }
    }
    double v18 = *v16;
LABEL_12:
    double v21 = v13;
    goto LABEL_13;
  }
  double v18 = a1[1];
  double v17 = *a1;
  double v21 = v18;
LABEL_16:
  double v23 = v17 - v14;
  double v24 = v21 - v18;
  if (v24 < 0.0 || v17 - v14 < 0.0)
  {
    v156.origin.CGFloat x = v14;
    v156.origin.double y = v18;
    v156.size.CGFloat width = v23;
    v156.size.double height = v24;
    CGRectStandardize(v156);
    v157.origin.CGFloat x = v14;
    v157.origin.double y = v18;
    v157.size.CGFloat width = v23;
    v157.size.double height = v24;
    CGRectStandardize(v157);
    v158.origin.CGFloat x = v14;
    v158.origin.double y = v18;
    v158.size.CGFloat width = v23;
    v158.size.double height = v24;
    CGRect v159 = CGRectStandardize(v158);
    if (v159.size.width >= 0.0)
    {
      v160.origin.CGFloat x = v14;
      v160.origin.double y = v18;
      v160.size.CGFloat width = v23;
      v160.size.double height = v24;
      CGRect v161 = CGRectStandardize(v160);
      if (v161.size.width < 134217727.0)
      {
        v162.origin.CGFloat x = v14;
        v162.origin.double y = v18;
        v162.size.CGFloat width = v23;
        v162.size.double height = v24;
        CGRect v163 = CGRectStandardize(v162);
        if (v163.size.height >= 0.0)
        {
          v164.origin.CGFloat x = v14;
          v164.origin.double y = v18;
          v164.size.CGFloat width = v23;
          v164.size.double height = v24;
          CGRect v165 = CGRectStandardize(v164);
          if (v165.size.height < 134217727.0)
          {
            v166.origin.CGFloat x = v14;
            v166.origin.double y = v18;
            v166.size.CGFloat width = v23;
            v166.size.double height = v24;
            if (fabs(COERCE_DOUBLE(CGRectStandardize(v166))) < 134217727.0)
            {
              v167.origin.CGFloat x = v14;
              v167.origin.double y = v18;
              v167.size.CGFloat width = v23;
              v167.size.double height = v24;
              CGRect v168 = CGRectStandardize(v167);
              goto LABEL_38;
            }
          }
        }
      }
    }
    return 0;
  }
  uint64_t result = 0;
  if (v23 < 0.0) {
    return result;
  }
  if (v23 >= 134217727.0) {
    return result;
  }
  uint64_t result = 0;
  if (v24 < 0.0 || v24 >= 134217727.0) {
    return result;
  }
  v168.origin.double y = v18;
  if (fabs(v14) >= 134217727.0) {
    return 0;
  }
LABEL_38:
  if (fabs(v168.origin.y) >= 134217727.0) {
    return 0;
  }
  v169.origin.CGFloat x = v14;
  v169.origin.double y = v18;
  v169.size.CGFloat width = v23;
  v169.size.double height = v24;
  CGRect v170 = CGRectIntegral(v169);
  CGFloat x = v170.origin.x;
  double y = v170.origin.y;
  CGFloat width = v170.size.width;
  double height = v170.size.height;
  if (v170.size.width < 0.0 || v170.size.height < 0.0)
  {
    CGRect v171 = CGRectStandardize(v170);
    unsigned int v30 = (int)v171.size.width;
    v171.origin.CGFloat x = x;
    v171.origin.double y = y;
    v171.size.CGFloat width = width;
    v171.size.double height = height;
    CGRect v170 = CGRectStandardize(v171);
  }
  else
  {
    unsigned int v30 = (int)v170.size.width;
  }
  unsigned int v31 = (int)v170.size.height;
  BOOL v32 = !v30 || v31 == 0;
  if (v32 || ((v31 * (unint64_t)(v30 * a5)) & 0xFFFFFFFF00000000) != 0) {
    return 0;
  }
  size_t v33 = v30 * a5 * v31;
  uint64_t result = (uint64_t)malloc_type_calloc(1uLL, v33, 0xE7741BFuLL);
  if (result)
  {
    uint64_t v141 = result;
    v149[0] = result;
    v149[1] = result + v33 - 1;
    v149[2] = v30;
    *(CGFloat *)&v149[3] = x;
    *(double *)&v149[4] = y;
    *(CGFloat *)&v149[5] = width;
    *(double *)&v149[6] = height;
    if (a4)
    {
      int v34 = 0;
      double v140 = floor(y + height);
      uint64_t v147 = v30 * a5;
      while (1)
      {
        int v35 = *a3;
        if (*a3 != -1)
        {
          int v36 = a3[1];
          if (v36 != -1 && v35 != -13 && a3[2] != -1) {
            break;
          }
        }
LABEL_156:
        ++v34;
        a3 += 4;
        if (v34 == a4) {
          goto LABEL_157;
        }
      }
      int v38 = a3[2];
      unsigned int v39 = &a1[9 * v35];
      double v40 = v39[1];
      int v41 = &a1[9 * v36];
      double v42 = v41[1];
      unsigned int v43 = &a1[9 * v38];
      double v44 = v43[1];
      int v45 = v41 + 4;
      if (v40 > v42)
      {
        if (v42 <= v44)
        {
          if (v40 <= v44)
          {
            int v46 = &a1[9 * v38 + 4];
            unsigned int v47 = &a1[9 * v35 + 4];
            int v48 = &a1[9 * v38];
            int v49 = v39;
          }
          else
          {
            int v46 = &a1[9 * v35 + 4];
            unsigned int v47 = &a1[9 * v38 + 4];
            int v48 = &a1[9 * v35];
            int v49 = &a1[9 * v38];
          }
          unsigned int v43 = v41;
        }
        else
        {
          int v46 = &a1[9 * v35 + 4];
          unsigned int v47 = v41 + 4;
          int v45 = &a1[9 * v38 + 4];
          int v48 = &a1[9 * v35];
          int v49 = v41;
        }
        goto LABEL_70;
      }
      if (v44 <= v42)
      {
        if (v44 <= v40)
        {
          unsigned int v47 = &a1[9 * v35 + 4];
          int v46 = v41 + 4;
          int v45 = &a1[9 * v38 + 4];
          int v48 = v41;
          int v49 = v39;
          goto LABEL_70;
        }
        unsigned int v47 = &a1[9 * v38 + 4];
        int v46 = v41 + 4;
        int v45 = &a1[9 * v35 + 4];
        int v48 = v41;
        int v49 = &a1[9 * v38];
      }
      else
      {
        int v46 = &a1[9 * v38 + 4];
        unsigned int v47 = v41 + 4;
        int v45 = &a1[9 * v35 + 4];
        int v48 = &a1[9 * v38];
        int v49 = v41;
      }
      unsigned int v43 = v39;
LABEL_70:
      double v50 = v43[1];
      uint64_t v146 = v48;
      double v51 = v48[1];
      double v52 = v50 - v51;
      if (v50 - v51 != 0.0)
      {
        double v53 = *v48;
        double v54 = *v43;
        double v56 = *v49;
        double v55 = v49[1];
        double v57 = v55 - v51;
        double v58 = *v49 - *v48;
        if (a5)
        {
          uint64_t v59 = 0;
          do
          {
            *(double *)&v155[v59] = (v45[v59] - v46[v59]) / v52;
            ++v59;
          }
          while (a5 != v59);
          uint64_t v60 = 0;
          if (v57 == 0.0) {
            double v57 = 1.0;
          }
          do
          {
            v154[v60] = (v47[v60] - v46[v60]) / v57;
            ++v60;
          }
          while (a5 != v60);
          double v61 = v50 - v55;
          if (v50 - v55 == 0.0) {
            double v61 = 1.0;
          }
          uint64_t v62 = v153;
          uint64_t v63 = v47;
          uint64_t v64 = a5;
          do
          {
            double v65 = *v45++;
            double v66 = v65;
            double v67 = *v63++;
            *v62++ = (v66 - v67) / v61;
            --v64;
          }
          while (v64);
          double v68 = v58 / v57;
          double v69 = (v54 - v56) / v61;
        }
        else
        {
          if (v57 == 0.0) {
            double v57 = 1.0;
          }
          double v68 = v58 / v57;
          double v70 = v50 - v55;
          if (v50 - v55 == 0.0) {
            double v70 = 1.0;
          }
          double v69 = (v54 - v56) / v70;
        }
        double v142 = v69;
        if (v51 >= y)
        {
          double v71 = y + height;
          uint64_t v72 = v141;
          if (v51 < y + height)
          {
            double v71 = floor(v51);
            uint64_t v72 = v141 + v30 * (int)(v140 - v71) * a5;
          }
          double v73 = (v53 - v54) * (v55 - v50) - (v56 - v54) * (v51 - v50);
          double v148 = (v54 - v53) / v52;
          uint64_t v152 = v72;
          long long v150 = 0u;
          memset(v151, 0, sizeof(v151));
          uint64_t v144 = v43;
          uint64_t v145 = v47;
          uint64_t v143 = v49;
          if (v73 >= 0.0)
          {
            if (v73 > 0.0)
            {
              if (v71 <= v55)
              {
LABEL_127:
                if (v71 > v50)
                {
                  double v117 = v71 - v55;
                  double v118 = *v49 + v117 * v142;
                  *(double *)&long long v150 = v118;
                  if (a5)
                  {
                    uint64_t v119 = 0;
                    do
                    {
                      *((double *)v151 + v119) = v47[v119] + v117 * v153[v119];
                      ++v119;
                    }
                    while (a5 != v119);
                    uint64_t v120 = (double *)&v151[2] + 1;
                    double v121 = v71 - v146[1];
                    double v122 = *v146 + v121 * v148;
                    *((double *)&v150 + 1) = v122;
                    uint64_t v123 = (double *)v155;
                    uint64_t v124 = a5;
                    do
                    {
                      double v125 = *v46++;
                      double v126 = v125;
                      double v127 = *v123++;
                      *v120++ = v126 + v121 * v127;
                      --v124;
                    }
                    while (v124);
                  }
                  else
                  {
                    double v122 = *v146 + (v71 - v146[1]) * v148;
                    *((double *)&v150 + 1) = v122;
                  }
                  if (v50 <= y) {
                    double v134 = y;
                  }
                  else {
                    double v134 = v50;
                  }
                  while (v71 > v134)
                  {
                    RenderGouradTriangleSpan((uint64_t)v149, (uint64_t)&v150, a5);
                    double v118 = v118 - v142;
                    double v122 = v122 - v148;
                    *(double *)&long long v150 = v118;
                    *((double *)&v150 + 1) = v122;
                    if (a5)
                    {
                      uint64_t v135 = 0;
                      do
                      {
                        *((double *)v151 + v135) = *((double *)v151 + v135) - v153[v135];
                        ++v135;
                      }
                      while (a5 != v135);
                      uint64_t v136 = (double *)v155;
                      uint64_t v137 = (double *)&v151[2] + 1;
                      uint64_t v138 = a5;
                      do
                      {
                        double v139 = *v136++;
                        *uint64_t v137 = *v137 - v139;
                        ++v137;
                        --v138;
                      }
                      while (v138);
                    }
                    v72 += v147;
                    uint64_t v152 = v72;
                    double v71 = v71 + -1.0;
                  }
                }
              }
              else
              {
                double v101 = v71 - v51;
                double v102 = v53 + (v71 - v51) * v68;
                double v103 = v53 + (v71 - v51) * v148;
                *(double *)&long long v150 = v102;
                *((double *)&v150 + 1) = v103;
                if (a5)
                {
                  uint64_t v104 = 0;
                  do
                  {
                    *((double *)v151 + v104) = v46[v104] + v101 * v154[v104];
                    ++v104;
                  }
                  while (a5 != v104);
                  long long v105 = (double *)v155;
                  CGRect v106 = v46;
                  uint64_t v107 = (double *)&v151[2] + 1;
                  uint64_t v108 = a5;
                  do
                  {
                    double v109 = *v106++;
                    double v110 = v109;
                    double v111 = *v105++;
                    *v107++ = v110 + v101 * v111;
                    --v108;
                  }
                  while (v108);
                }
                while (v71 > y)
                {
                  RenderGouradTriangleSpan((uint64_t)v149, (uint64_t)&v150, a5);
                  int v49 = v143;
                  double v102 = v102 - v68;
                  double v103 = v103 - v148;
                  *(double *)&long long v150 = v102;
                  *((double *)&v150 + 1) = v103;
                  if (a5)
                  {
                    uint64_t v112 = 0;
                    do
                    {
                      *((double *)v151 + v112) = *((double *)v151 + v112) - v154[v112];
                      ++v112;
                    }
                    while (a5 != v112);
                    uint64_t v113 = (double *)v155;
                    uint64_t v114 = (double *)&v151[2] + 1;
                    uint64_t v115 = a5;
                    do
                    {
                      double v116 = *v113++;
                      *uint64_t v114 = *v114 - v116;
                      ++v114;
                      --v115;
                    }
                    while (v115);
                  }
                  v72 += v147;
                  uint64_t v152 = v72;
                  double v71 = v71 + -1.0;
                  double v55 = v143[1];
                  unsigned int v47 = v145;
                  if (v71 <= v55)
                  {
                    double v50 = v144[1];
                    goto LABEL_127;
                  }
                }
              }
            }
          }
          else if (v71 <= v55)
          {
LABEL_105:
            if (v71 > v50)
            {
              double v90 = v71 - v146[1];
              double v91 = *v146 + v90 * v148;
              *(double *)&long long v150 = v91;
              if (a5)
              {
                uint64_t v92 = 0;
                do
                {
                  *((double *)v151 + v92) = v46[v92] + v90 * *(double *)&v155[v92];
                  ++v92;
                }
                while (a5 != v92);
                double v93 = v71 - v55;
                double v94 = *v49 + v93 * v142;
                *((double *)&v150 + 1) = v94;
                uint64_t v95 = v153;
                uint64_t v96 = (double *)&v151[2] + 1;
                uint64_t v97 = a5;
                do
                {
                  double v98 = *v47++;
                  double v99 = v98;
                  double v100 = *v95++;
                  *v96++ = v99 + v93 * v100;
                  --v97;
                }
                while (v97);
              }
              else
              {
                double v94 = *v49 + (v71 - v55) * v142;
                *((double *)&v150 + 1) = v94;
              }
              if (v50 <= y) {
                double v128 = y;
              }
              else {
                double v128 = v50;
              }
              while (v71 > v128)
              {
                RenderGouradTriangleSpan((uint64_t)v149, (uint64_t)&v150, a5);
                double v91 = v91 - v148;
                double v94 = v94 - v142;
                *(double *)&long long v150 = v91;
                *((double *)&v150 + 1) = v94;
                if (a5)
                {
                  uint64_t v129 = 0;
                  do
                  {
                    *((double *)v151 + v129) = *((double *)v151 + v129) - *(double *)&v155[v129];
                    ++v129;
                  }
                  while (a5 != v129);
                  uint64_t v130 = v153;
                  uint64_t v131 = (double *)&v151[2] + 1;
                  uint64_t v132 = a5;
                  do
                  {
                    double v133 = *v130++;
                    double *v131 = *v131 - v133;
                    ++v131;
                    --v132;
                  }
                  while (v132);
                }
                v72 += v147;
                uint64_t v152 = v72;
                double v71 = v71 + -1.0;
              }
            }
          }
          else
          {
            double v74 = v71 - v51;
            double v75 = v53 + (v71 - v51) * v148;
            double v76 = v53 + (v71 - v51) * v68;
            *(double *)&long long v150 = v75;
            *((double *)&v150 + 1) = v76;
            if (a5)
            {
              uint64_t v77 = 0;
              do
              {
                *((double *)v151 + v77) = v46[v77] + v74 * *(double *)&v155[v77];
                ++v77;
              }
              while (a5 != v77);
              uint64_t v78 = v154;
              uint64_t v79 = v46;
              uint64_t v80 = (double *)&v151[2] + 1;
              uint64_t v81 = a5;
              do
              {
                double v82 = *v79++;
                double v83 = v82;
                double v84 = *v78++;
                *v80++ = v83 + v74 * v84;
                --v81;
              }
              while (v81);
            }
            while (v71 > y)
            {
              RenderGouradTriangleSpan((uint64_t)v149, (uint64_t)&v150, a5);
              int v49 = v143;
              double v75 = v75 - v148;
              double v76 = v76 - v68;
              *(double *)&long long v150 = v75;
              *((double *)&v150 + 1) = v76;
              if (a5)
              {
                uint64_t v85 = 0;
                do
                {
                  *((double *)v151 + v85) = *((double *)v151 + v85) - *(double *)&v155[v85];
                  ++v85;
                }
                while (a5 != v85);
                uint64_t v86 = v154;
                uint64_t v87 = (double *)&v151[2] + 1;
                uint64_t v88 = a5;
                do
                {
                  double v89 = *v86++;
                  *uint64_t v87 = *v87 - v89;
                  ++v87;
                  --v88;
                }
                while (v88);
              }
              v72 += v147;
              uint64_t v152 = v72;
              double v71 = v71 + -1.0;
              double v55 = v143[1];
              unsigned int v47 = v145;
              if (v71 <= v55)
              {
                double v50 = v144[1];
                goto LABEL_105;
              }
            }
          }
        }
      }
      goto LABEL_156;
    }
LABEL_157:
    *a6 = v141;
    *a7 = x;
    a7[1] = y;
    uint64_t result = 1;
    a7[2] = width;
    a7[3] = height;
  }
  return result;
}

uint64_t RenderGouradTriangleSpan(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a2;
  double v4 = *(double *)(a2 + 8);
  int v5 = (int)*(double *)a2;
  if (*(double *)a2 > (double)v5) {
    ++v5;
  }
  double v6 = *(double *)(result + 24);
  int v7 = (int)v4;
  if (v5 <= (int)v6) {
    int v5 = (int)v6;
  }
  if (v4 <= (double)v7) {
    int v8 = (int)v4;
  }
  else {
    int v8 = v7 + 1;
  }
  if (v8 >= (int)(v6 + *(double *)(result + 40))) {
    int v8 = (int)(v6 + *(double *)(result + 40));
  }
  if (v5 < v8)
  {
    double v9 = 1.0;
    if (v4 != v3) {
      double v9 = 1.0 / (v4 - v3);
    }
    if (a3)
    {
      unsigned int v10 = (double *)(a2 + 56);
      unsigned int v11 = (double *)v35;
      uint64_t v12 = a3;
      do
      {
        *v11++ = v9 * (*v10 - *(v10 - 5));
        ++v10;
        --v12;
      }
      while (v12);
      double v13 = (double)v5 - v3;
      double v14 = (double *)(a2 + 16);
      unsigned int v15 = v34;
      int v16 = v33;
      double v17 = (double *)v35;
      uint64_t v18 = a3;
      do
      {
        double v19 = *v14++;
        double v20 = v19;
        double v21 = *v17++;
        *v16++ = (int)(v21 * 16777215.0);
        *v15++ = (int)((v20 + v13 * v21) * 16777215.0);
        --v18;
      }
      while (v18);
    }
    unint64_t v22 = *(void *)(a2 + 96);
    if (v22 >= *(void *)result)
    {
      unint64_t v23 = *(void *)(result + 8);
      BOOL v24 = v23 >= v22;
      uint64_t v25 = v23 - v22;
      if (v24)
      {
        uint64_t v26 = (v5 - (uint64_t)v6) * a3;
        if (v26 <= v25)
        {
          int v27 = (unsigned char *)(v22 + v26);
          while (!a3)
          {
LABEL_27:
            if (++v5 >= v8) {
              return result;
            }
          }
          unsigned int v28 = (int *)v34;
          int v29 = (int *)v33;
          uint64_t v30 = a3;
          while ((unint64_t)v27 <= *(void *)(result + 8))
          {
            int v31 = *v29++;
            int v32 = *v28;
            *v27++ = BYTE2(*v28);
            *v28++ = v32 + v31;
            if (!--v30) {
              goto LABEL_27;
            }
          }
        }
      }
    }
  }
  return result;
}

void nonOverlapOfFirst(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
}

uint64_t compareZOrder(id *a1, id *a2)
{
  uint64_t v3 = [*a1 zOrder];
  uint64_t v4 = [*a2 zOrder];
  if (v3 < v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3 > v4;
  }
}

BOOL CGHasRequiredColorSyncVersion()
{
  if (CGHasRequiredColorSyncVersion_cglibrarypredicate != -1) {
    dispatch_once(&CGHasRequiredColorSyncVersion_cglibrarypredicate, &__block_literal_global_17153);
  }
  uint64_t v0 = CGHasRequiredColorSyncVersion_f();
  if (CGHasRequiredColorSyncVersion_cglibrarypredicate_22 != -1) {
    dispatch_once(&CGHasRequiredColorSyncVersion_cglibrarypredicate_22, &__block_literal_global_25_17154);
  }
  return (CGHasRequiredColorSyncVersion_f_21() | (unint64_t)(v0 << 32)) > 0xF0000030F000005;
}

uint64_t colorsync_smart_null_17160()
{
  return 0;
}

uint64_t CGColorTransformSupportsCalibratedColor()
{
  return 1;
}

uint64_t CGColorTransformGetTypeID()
{
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1) {
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_34_17166);
  }
  return CGColorTransformGetTypeID_type_id;
}

CFStringRef color_transform_copy_format_description(void *a1)
{
  Cache = CGColorTransformGetCache(a1);
  if (Cache) {
    uint64_t v3 = Cache[2];
  }
  else {
    uint64_t v3 = 0;
  }
  return CFStringCreateWithFormat(0, 0, @"<CGColorTransform %p -> space:%@ base:%@>", a1, v3, a1[3]);
}

uint64_t color_transform_equal(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
    {
      uint64_t v5 = *(void *)(a2 + 32);
      if (*(void *)(a1 + 32))
      {
        if (v5)
        {
LABEL_7:
          Cache = CGColorTransformGetCache((void *)a1);
          if (Cache) {
            int v7 = (const void *)Cache[2];
          }
          else {
            int v7 = 0;
          }
          int v8 = CGColorTransformGetCache((void *)a2);
          if (v8) {
            double v9 = (const void *)v8[2];
          }
          else {
            double v9 = 0;
          }
          uint64_t result = CFEqual(v7, v9);
          if (result)
          {
            unsigned int v10 = *(const void **)(a1 + 32);
            if (!v10) {
              return 1;
            }
            unsigned int v11 = *(const void **)(a2 + 32);
            if (!v11) {
              return 1;
            }
            uint64_t result = CFEqual(v10, v11);
            if (result) {
              return 1;
            }
          }
          return result;
        }
      }
      else if (!v5)
      {
        goto LABEL_7;
      }
    }
    return 0;
  }
  return result;
}

void *CGColorTransformGetColorSpace(void *a1)
{
  uint64_t result = CGColorTransformGetCache(a1);
  if (result) {
    return (void *)result[2];
  }
  return result;
}

uint64_t CGColorTransformCreateCopyWithAttribute(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  values = a2;
  keys[0] = @"kCGColorConversionInfoOptions";
  if (a1)
  {
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 32);
    if (v3 && CFDictionaryGetCount(v3) >= 1)
    {
      CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v2 + 32));
      unint64_t v6 = 8 * (Count + 1);
      MEMORY[0x1F4188790](Count, v7);
      unint64_t v8 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
      if (v6 >= 0x200) {
        size_t v9 = 512;
      }
      else {
        size_t v9 = 8 * (Count + 1);
      }
      bzero((char *)&v15 - v8, v9);
      MEMORY[0x1F4188790](v10, v11);
      bzero((char *)&v15 - v8, v9);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v2 + 32), (const void **)((char *)&v15 - v8), (const void **)((char *)&v15 - v8));
      *(uint64_t *)((char *)&v15 + 8 * Count - v8) = @"kCGColorConversionInfoOptions";
      *(uint64_t *)((char *)&v15 + 8 * Count - v8) = (uint64_t)a2;
      CFDictionaryRef v12 = CFDictionaryCreate(0, (const void **)((char *)&v15 - v8), (const void **)((char *)&v15 - v8), Count + 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    else
    {
      CFDictionaryRef v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    Cache = (CGColorSpace *)CGColorTransformGetCache((void *)v2);
    if (Cache) {
      Cache = (CGColorSpace *)*((void *)Cache + 2);
    }
    uint64_t v2 = color_transform_create(Cache, v12);
    if (v12) {
      CFRelease(v12);
    }
  }
  return v2;
}

uint64_t CGColorTransformGetIdentifier(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

BOOL CGColorTransformUsesCalibratedColor(unsigned char *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1) {
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_34_17166);
  }
  return v2 == CGColorTransformGetTypeID_type_id && a1[96] != 0;
}

void *CGColorTransformConvertData(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, int a12)
{
  if (a6 == 16) {
    int v15 = 2;
  }
  else {
    int v15 = a6 == 8;
  }
  if (a6 == 32) {
    int v16 = 4;
  }
  else {
    int v16 = v15;
  }
  return CGColorTransformConvertComponentData(a1, a2, v16, a3, a4, a5, a7, a7, v18, a9, a10, v19, a12);
}

CFDictionaryRef CGColorTransformCreateResolveReferenceWhiteToneMappingOptions(const __CFDictionary *cf)
{
  CFDictionaryRef v1 = cf;
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (!cf) {
    return v1;
  }
  if (CGReferenceWhiteToneMappingGetDefaultOptions_predicate != -1) {
    dispatch_once(&CGReferenceWhiteToneMappingGetDefaultOptions_predicate, &__block_literal_global_2027);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)CGReferenceWhiteToneMappingGetDefaultOptions_options;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 != CFBooleanGetTypeID())
  {
    CFTypeID v6 = CFGetTypeID(v1);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFBooleanRef Value = CFDictionaryGetValue(v2, @"kCGApplyReferenceWhiteToneMapping");
      if (CFEqual(Value, v1) == 1)
      {
        values = v1;
        keys[0] = @"kCGApplyReferenceWhiteToneMapping";
        return CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      MutableCopdouble y = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)Value);
      if (MutableCopy)
      {
        size_t v9 = MutableCopy;
        uint64_t v10 = CFDictionaryGetValue(v1, @"kCGRWTMSourcePeak");
        if (v10 && (__n128 v11 = v10, v12 = CFGetTypeID(v10), v12 == CFNumberGetTypeID()))
        {
          CFDictionarySetValue(v9, @"kCGRWTMSourcePeak", v11);
          int v13 = 1;
        }
        else
        {
          int v13 = 0;
        }
        double v14 = CFDictionaryGetValue(v1, @"kCGRWTMSourceReferenceWhite");
        if (v14)
        {
          int v15 = v14;
          CFTypeID v16 = CFGetTypeID(v14);
          if (v16 == CFNumberGetTypeID())
          {
            CFDictionarySetValue(v9, @"kCGRWTMSourceReferenceWhite", v15);
            int v13 = 1;
          }
        }
        double v17 = CFDictionaryGetValue(v1, @"kCGRWTMEDRHeadroom");
        if (v17)
        {
          uint64_t v18 = v17;
          CFTypeID v19 = CFGetTypeID(v17);
          if (v19 == CFNumberGetTypeID())
          {
            CFDictionarySetValue(v9, @"kCGRWTMEDRHeadroom", v18);
            int v13 = 1;
          }
        }
        double v20 = CFDictionaryGetValue(v1, @"kCGRWTMTargetReferenceWhiteBase");
        if (v20)
        {
          double v21 = v20;
          CFTypeID v22 = CFGetTypeID(v20);
          if (v22 == CFNumberGetTypeID())
          {
            CFDictionarySetValue(v9, @"kCGRWTMTargetReferenceWhiteBase", v21);
            int v13 = 1;
          }
        }
        unint64_t v23 = CFDictionaryGetValue(v1, @"kCGRWTMReferenceWhiteThreshold");
        if (v23)
        {
          BOOL v24 = v23;
          CFTypeID v25 = CFGetTypeID(v23);
          if (v25 == CFNumberGetTypeID())
          {
            CFDictionarySetValue(v9, @"kCGRWTMReferenceWhiteThreshold", v24);
LABEL_33:
            values = v9;
            keys[0] = @"kCGApplyReferenceWhiteToneMapping";
            CFDictionaryRef v1 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFRelease(v9);
            return v1;
          }
        }
        if (v13) {
          goto LABEL_33;
        }
      }
    }
    return 0;
  }
  if ((CFDictionaryRef)*MEMORY[0x1E4F1CFD0] != v1 || v2 == 0) {
    return 0;
  }

  return (CFDictionaryRef)CFRetain(v2);
}

CFIndex create_colorsync_reference_white_tone_mapping_options(const void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"kCGApplyReferenceWhiteToneMapping");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v4 = Value;
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFDictionaryGetTypeID()) {
    return 0;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)keys = 0u;
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)values = 0u;
  int v12 = 0;
  uint64_t v10 = 0;
  __n128 v11 = 0;
  CFIndex v6 = 0;
  if (get_float_from_dictionary(v4, @"kCGRWTMSourcePeak", &v12))
  {
    keys[0] = @"com.apple.cmm.RWTMSourcePeak";
    int valuePtr = v12;
    values[0] = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFIndex v6 = 1;
  }
  if (get_float_from_dictionary(v4, @"kCGRWTMSourceReferenceWhite", &v12))
  {
    *(void *)((unint64_t)keys | (8 * v6)) = @"com.apple.cmm.RWTMSourceReferenceWhite";
    int valuePtr = v12;
    *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v6++ & 1))) = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  }
  if (get_float_from_dictionary(v4, @"kCGRWTMEDRHeadroom", &v12))
  {
    keys[v6] = @"com.apple.cmm.RWTMEDRHeadroom";
    int valuePtr = v12;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  }
  if (get_float_from_dictionary(v4, @"kCGRWTMTargetReferenceWhiteBase", &v12))
  {
    keys[v6] = @"com.apple.cmm.RWTMTargetReferenceWhiteBase";
    int valuePtr = v12;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  }
  if (get_float_from_dictionary(v4, @"kCGRWTMReferenceWhiteThreshold", &v12))
  {
    keys[v6] = @"com.apple.cmm.RWTMReferenceWhiteThreshold";
    int valuePtr = v12;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  }
  else if (!v6)
  {
    return v6;
  }
  unint64_t v8 = values;
  CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  do
  {
    if (*v8) {
      CFRelease(*v8);
    }
    ++v8;
    --v6;
  }
  while (v6);
  uint64_t v10 = v9;
  __n128 v11 = @"com.apple.cmm.ApplyReferenceWhiteToneMapping";
  CFIndex v6 = (CFIndex)CFDictionaryCreate(0, (const void **)&v11, (const void **)&v10, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v9) {
    CFRelease(v9);
  }
  return v6;
}

CFDictionaryRef CGColorTransformCreateResolveFlexLumaOptions(CFTypeRef cf)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (CGFlexLumaToneMappingGetDefaultOptions_predicate != -1) {
    dispatch_once(&CGFlexLumaToneMappingGetDefaultOptions_predicate, &__block_literal_global_10);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)CGFlexLumaToneMappingGetDefaultOptions_options;
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 != CFBooleanGetTypeID())
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCGFlexGTCTargetHeadroom");
      CFDictionaryRef v8 = Value;
      if (!Value) {
        return v8;
      }
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID())
      {
        CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(v2, @"kCGApplyFlexLumaScaling");
        MutableCopdouble y = CFDictionaryCreateMutableCopy(0, 0, v10);
        if (MutableCopy)
        {
          int v12 = MutableCopy;
          CFDictionarySetValue(MutableCopy, @"kCGFlexGTCTargetHeadroom", v8);
          values = v12;
          keys[0] = @"kCGApplyFlexLumaScaling";
          CFDictionaryRef v8 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFRelease(v12);
          return v8;
        }
      }
    }
    return 0;
  }
  if ((CFTypeRef)*MEMORY[0x1E4F1CFD0] != cf || v2 == 0) {
    return 0;
  }

  return (CFDictionaryRef)CFRetain(v2);
}

uint64_t get_float_from_dictionary(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberRef v5 = (const __CFNumber *)result;
    CFTypeID v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
      *a3 = valuePtr;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFDictionaryRef CGColorTransformCreateResolveFlexTRCOptions(CFTypeRef cf)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (CGFlexTRCToneMappingGetDefaultOptions_predicate != -1) {
    dispatch_once(&CGFlexTRCToneMappingGetDefaultOptions_predicate, &__block_literal_global_130);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)CGFlexTRCToneMappingGetDefaultOptions_options;
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 != CFBooleanGetTypeID())
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCGFlexGTCTargetHeadroom");
      CFDictionaryRef v8 = Value;
      if (!Value) {
        return v8;
      }
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID())
      {
        CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(v2, @"kCGApplyFlexTRC");
        MutableCopdouble y = CFDictionaryCreateMutableCopy(0, 0, v10);
        if (MutableCopy)
        {
          int v12 = MutableCopy;
          CFDictionarySetValue(MutableCopy, @"kCGFlexGTCTargetHeadroom", v8);
          values = v12;
          keys[0] = @"kCGApplyFlexTRC";
          CFDictionaryRef v8 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFRelease(v12);
          return v8;
        }
      }
    }
    return 0;
  }
  if ((CFTypeRef)*MEMORY[0x1E4F1CFD0] != cf || v2 == 0) {
    return 0;
  }

  return (CFDictionaryRef)CFRetain(v2);
}

CFDictionaryRef CGColorTransformCreateResolveExtendedRangeToneMappingOptions(const __CFDictionary *cf)
{
  CFDictionaryRef v1 = cf;
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (!cf) {
    return v1;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 == CFStringGetTypeID())
  {
    if (CFEqual(v1, @"kCGApplyEXRToneMappingGamma"))
    {
      if (CGEXRToneMappingGammaGetDefaultOptions_predicate == -1) {
        goto LABEL_5;
      }
      goto LABEL_43;
    }
    if (!CFEqual(v1, @"kCGApplyDisplayReferredExtendedRangeToneMapping"))
    {
      if (!CFEqual(v1, @"kCGApplySceneReferredExtendedRangeToneMapping")) {
        return 0;
      }
      if (CGColorTransformGetSceneReferredToneMappingDefaultOptions_predicate != -1) {
        dispatch_once(&CGColorTransformGetSceneReferredToneMappingDefaultOptions_predicate, &__block_literal_global_54_17307);
      }
      CFDictionaryRef v3 = (CFDictionaryRef)CGColorTransformGetSceneReferredToneMappingDefaultOptions_sceneReferredToneMappingOptions;
      if (!CGColorTransformGetSceneReferredToneMappingDefaultOptions_sceneReferredToneMappingOptions) {
        return 0;
      }
      goto LABEL_31;
    }
    if (CGColorTransformGetDisplayReferredToneMappingDefaultOptions_predicate == -1)
    {
LABEL_19:
      CFDictionaryRef v3 = (CFDictionaryRef)CGColorTransformGetDisplayReferredToneMappingDefaultOptions_displayReferredToneMappingOptions;
      if (!CGColorTransformGetDisplayReferredToneMappingDefaultOptions_displayReferredToneMappingOptions) {
        return 0;
      }
      goto LABEL_31;
    }
LABEL_44:
    dispatch_once(&CGColorTransformGetDisplayReferredToneMappingDefaultOptions_predicate, &__block_literal_global_42_17306);
    goto LABEL_19;
  }
  CFTypeID v4 = CFGetTypeID(v1);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  if (CFDictionaryContainsKey(v1, @"kCGApplyEXRToneMappingGamma") != 1)
  {
    if (CFDictionaryContainsKey(v1, @"kCGApplyDisplayReferredExtendedRangeToneMapping") == 1)
    {
      if (CFDictionaryGetValue(v1, @"kCGApplyDisplayReferredExtendedRangeToneMapping") != (const void *)*MEMORY[0x1E4F1CFD0])
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v1, @"kCGApplyDisplayReferredExtendedRangeToneMapping");
        CFDictionaryRef v1 = Value;
        if (Value)
        {
          CFTypeID v9 = CFGetTypeID(Value);
          if (v9 != CFDictionaryGetTypeID()) {
            return 0;
          }
          CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(v1, @"kCGApplyReferenceWhiteToneMapping");
          CFDictionaryRef ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveReferenceWhiteToneMappingOptions(v10);
          if (!ResolveReferenceWhiteToneMappingOptions) {
            return 0;
          }
          CFDictionaryRef v12 = ResolveReferenceWhiteToneMappingOptions;
          values = ResolveReferenceWhiteToneMappingOptions;
          keys[0] = @"kCGApplyDisplayReferredExtendedRangeToneMapping";
          CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFRelease(v12);
        }
        return v1;
      }
      if (CGColorTransformGetDisplayReferredToneMappingDefaultOptions_predicate == -1) {
        goto LABEL_19;
      }
      goto LABEL_44;
    }
    if (CFDictionaryContainsKey(v1, @"kCGApplySceneReferredExtendedRangeToneMapping") != 1
      || CFDictionaryGetValue(v1, @"kCGApplySceneReferredExtendedRangeToneMapping") != (const void *)*MEMORY[0x1E4F1CFD0])
    {
      return 0;
    }
LABEL_40:
    CFDictionaryRef v3 = v1;
    goto LABEL_31;
  }
  if (CFDictionaryGetValue(v1, @"kCGApplyEXRToneMappingGamma") != (const void *)*MEMORY[0x1E4F1CFD0])
  {
    CFDictionaryRef v5 = (const __CFDictionary *)CFDictionaryGetValue(v1, @"kCGApplyEXRToneMappingGamma");
    if (!v5) {
      return 0;
    }
    CFDictionaryRef v6 = v5;
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 != CFDictionaryGetTypeID()
      || CFDictionaryContainsKey(v6, @"kCGEXRToneMappingGammaDefog") != 1
      && CFDictionaryContainsKey(v6, @"kCGEXRToneMappingGammaExposure") != 1
      && CFDictionaryContainsKey(v6, @"kCGEXRToneMappingGammaKneeLow") != 1
      && CFDictionaryContainsKey(v6, @"kCGEXRToneMappingGammaKneeHigh") != 1)
    {
      return 0;
    }
    goto LABEL_40;
  }
  if (CGEXRToneMappingGammaGetDefaultOptions_predicate != -1) {
LABEL_43:
  }
    dispatch_once(&CGEXRToneMappingGammaGetDefaultOptions_predicate, &__block_literal_global_14885);
LABEL_5:
  CFDictionaryRef v3 = (CFDictionaryRef)CGEXRToneMappingGammaGetDefaultOptions_exrToneMappingOptions;
  if (!CGEXRToneMappingGammaGetDefaultOptions_exrToneMappingOptions) {
    return 0;
  }
LABEL_31:

  return (CFDictionaryRef)CFRetain(v3);
}

CFDictionaryRef create_colorsync_extended_range_tone_mapping_options(const void *a1)
{
  valuePtr[3] = *(const void **)MEMORY[0x1E4F143B8];
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID()) {
    return 0;
  }
  *(_OWORD *)keys = 0u;
  long long v38 = 0u;
  *(_OWORD *)values = 0u;
  long long v36 = 0u;
  int v32 = 0;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"kCGApplyEXRToneMappingGamma");
  if (!Value || (CFDictionaryRef v4 = Value, v5 = CFGetTypeID(Value), v5 != CFDictionaryGetTypeID()))
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"kCGApplyDisplayReferredExtendedRangeToneMapping") == 1)
    {
      CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"kCGApplyDisplayReferredExtendedRangeToneMapping");
      if (v7)
      {
        CFDictionaryRef v8 = v7;
        CFTypeID v9 = CFGetTypeID(v7);
        if (v9 == CFDictionaryGetTypeID())
        {
          CFDictionaryRef v10 = CFDictionaryGetValue(v8, @"kCGApplyReferenceWhiteToneMapping");
          if (v10 && (CFTypeID v11 = CFGetTypeID(v10), v11 == CFDictionaryGetTypeID()))
          {
            int v31 = @"com.apple.cmm.ApplyDisplayReferredToneMapping";
            CFIndex colorsync_reference_white_tone_mapping_options = create_colorsync_reference_white_tone_mapping_options(v8);
          }
          else
          {
            int v31 = @"com.apple.cmm.ApplyDisplayReferredToneMapping";
            CFTypeID v22 = CFGetTypeID(v8);
            if (v22 == CFDictionaryGetTypeID())
            {
              memset(valuePtr, 0, 24);
              memset(v39, 0, sizeof(v39));
              CFTypeID TypeID = CFNumberGetTypeID();
              ValueWithType = (void *)CGCFDictionaryGetValueWithType(v8, @"kCGPQEOTFOpticalScale", TypeID);
              if (ValueWithType)
              {
                valuePtr[0] = @"com.apple.cmm.PQEOTFOpticalScale";
                v39[0] = ValueWithType;
                CFIndex colorsync_reference_white_tone_mapping_options = 1;
              }
              else
              {
                CFIndex colorsync_reference_white_tone_mapping_options = 0;
              }
              CFTypeID v25 = CFNumberGetTypeID();
              uint64_t v26 = (void *)CGCFDictionaryGetValueWithType(v8, @"kCGTargetDisplayWhite", v25);
              if (v26)
              {
                valuePtr[colorsync_reference_white_tone_mapping_options] = @"com.apple.cmm.TargetDisplayWhite";
                v39[colorsync_reference_white_tone_mapping_options++] = v26;
              }
              CFTypeID v27 = CFNumberGetTypeID();
              unsigned int v28 = (void *)CGCFDictionaryGetValueWithType(v8, @"kCGEXRReflectanceScale", v27);
              if (v28)
              {
                valuePtr[colorsync_reference_white_tone_mapping_options] = @"com.apple.cmm.XRReflectanceScale";
                v39[colorsync_reference_white_tone_mapping_options++] = v28;
              }
              else if (!colorsync_reference_white_tone_mapping_options)
              {
                goto LABEL_48;
              }
              int v29 = v39;
              CFDictionaryRef v30 = CFDictionaryCreate(0, valuePtr, (const void **)v39, colorsync_reference_white_tone_mapping_options, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              do
              {
                if (*v29) {
                  CFRelease(*v29);
                }
                ++v29;
                --colorsync_reference_white_tone_mapping_options;
              }
              while (colorsync_reference_white_tone_mapping_options);
              size_t v33 = v30;
              int v34 = @"com.apple.cmm.ApplyPQEETFToneMapping";
              CFIndex colorsync_reference_white_tone_mapping_options = (CFIndex)CFDictionaryCreate(0, (const void **)&v34, (const void **)&v33, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v30) {
                CFRelease(v30);
              }
              goto LABEL_48;
            }
            CFIndex colorsync_reference_white_tone_mapping_options = 0;
          }
LABEL_48:
          valuePtr[0] = (const void *)colorsync_reference_white_tone_mapping_options;
          CFIndex v6 = 1;
          goto LABEL_49;
        }
      }
      int v13 = CFDictionaryGetValue((CFDictionaryRef)a1, @"kCGApplySceneReferredExtendedRangeToneMapping");
      if (v13)
      {
        CFIndex colorsync_reference_white_tone_mapping_options = (CFIndex)v13;
        CFTypeID v14 = CFGetTypeID(v13);
        if (v14 == CFDictionaryGetTypeID()) {
          _CGHandleAssert("create_colorsync_extended_range_tone_mapping_options", 1277, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransform.c", "0", "custom options not supported for kColorSyncTransformApplySceneReferredToneMapping", v15, v16, v17, (char)v31);
        }
        if (colorsync_reference_white_tone_mapping_options == *MEMORY[0x1E4F1CFD0])
        {
          int v31 = @"com.apple.cmm.ApplySceneReferredToneMapping";
          goto LABEL_48;
        }
      }
    }
    return 0;
  }
  if (get_float_from_dictionary(v4, @"kCGEXRToneMappingGammaDefog", &v32))
  {
    keys[0] = @"com.apple.cmm.ToneMappingGammaDefog";
    LODWORD(valuePtr[0]) = v32;
    values[0] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
    CFIndex v6 = 1;
  }
  else
  {
    CFIndex v6 = 0;
  }
  if (get_float_from_dictionary(v4, @"kCGEXRToneMappingGammaExposure", &v32))
  {
    *(void *)((unint64_t)keys | (8 * v6)) = @"com.apple.cmm.ToneMappingGammaExposure";
    LODWORD(valuePtr[0]) = v32;
    *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v6++ & 1))) = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  }
  if (get_float_from_dictionary(v4, @"kCGEXRToneMappingGammaKneeLow", &v32))
  {
    keys[v6] = @"com.apple.cmm.ToneMappingGammaKneeLow";
    LODWORD(valuePtr[0]) = v32;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  }
  if (get_float_from_dictionary(v4, @"kCGEXRToneMappingGammaKneeHigh", &v32))
  {
    keys[v6] = @"com.apple.cmm.ToneMappingGammaKneeHigh";
    LODWORD(valuePtr[0]) = v32;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
    goto LABEL_25;
  }
  if (v6)
  {
LABEL_25:
    CFIndex colorsync_reference_white_tone_mapping_options = (CFIndex)CFDictionaryCreate(0, (const void **)keys, (const void **)values, v6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = values[v20];
      if (v21) {
        CFRelease(v21);
      }
      ++v20;
    }
    while (v6 != v20);
    goto LABEL_29;
  }
  CFIndex colorsync_reference_white_tone_mapping_options = 0;
LABEL_29:
  int v31 = @"com.apple.cmm.ApplyEXRToneMappingGamma";
  valuePtr[0] = (const void *)colorsync_reference_white_tone_mapping_options;
LABEL_49:
  CFDictionaryRef v18 = 0;
  if (v6 && colorsync_reference_white_tone_mapping_options)
  {
    CFDictionaryRef v18 = CFDictionaryCreate(0, (const void **)&v31, valuePtr, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFRelease(valuePtr[0]);
  }
  return v18;
}

CFDictionaryRef __CGColorTransformGetSceneReferredToneMappingDefaultOptions_block_invoke()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  values = (void *)*MEMORY[0x1E4F1CFD0];
  keys[0] = @"kCGApplySceneReferredExtendedRangeToneMapping";
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CGColorTransformGetSceneReferredToneMappingDefaultOptions_sceneReferredToneMappingOptions = (uint64_t)result;
  return result;
}

void __CGColorTransformGetDisplayReferredToneMappingDefaultOptions_block_invoke()
{
  v11[1] = *(const void **)MEMORY[0x1E4F143B8];
  keys[0] = @"kCGPQEOTFOpticalScale";
  keys[1] = @"kCGTargetDisplayWhite";
  keys[2] = @"kCGEXRReflectanceScale";
  v11[0] = @"kCGApplyDisplayReferredExtendedRangeToneMapping";
  LODWORD(valuePtr) = 1120403456;
  CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  int v5 = 1120403456;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberFloatType, &v5);
  int v5 = 1063675494;
  CFNumberRef v0 = CFNumberCreate(0, kCFNumberFloatType, &v5);
  CFDictionaryRef v1 = (const void *)*MEMORY[0x1E4F1D260];
  CFTypeRef v8 = v0;
  CFTypeRef v9 = v1;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFDictionaryRef v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFTypeRef v9 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&valuePtr, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CGColorTransformGetDisplayReferredToneMappingDefaultOptions_displayReferredToneMappingOptions = (uint64_t)CFDictionaryCreate(v2, v11, &v9, 1, v3, v4);
  CFRelease(valuePtr);
  CFRelease(cf);
  CFRelease(v8);
  CFRelease(v9);
}

uint64_t CGGlyphBuilderGetQuantizationLevel(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t W8_sample_Wf(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v86 = *(void *)(result + 80);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v89 = *(void *)(result + 152) - 4;
  uint64_t v11 = *(void *)(result + 144) - 1;
  int v12 = *(_DWORD *)(result + 260) - 1;
  uint64_t v13 = *(unsigned int *)(result + 256);
  unint64_t v14 = v5 + (v12 * v7) + 4 * (v13 - 1);
  unint64_t v15 = v4 + (v12 * v6) + 4 * v13 - 4;
  int v84 = *(_DWORD *)(result + 188);
  uint64_t v87 = *(void *)(result + 72);
  uint64_t v85 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if (a3 >= v87)
    {
      if (a3 <= v88)
      {
        uint64_t v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        uint64_t v26 = a3;
        uint64_t v27 = v85;
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v88;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1) {
          goto LABEL_39;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        uint64_t v27 = v85;
        unsigned int v25 = v84 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v87 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1) {
        goto LABEL_39;
      }
      if (v18 >= v16) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      uint64_t v27 = v85;
      unsigned int v25 = v84 | v19;
      uint64_t v26 = v17 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v27) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v27 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v84;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v10;
    a3 += v9;
    v89 += 4;
    *(unsigned char *)++uint64_t v11 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v86)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_26;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v86;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_39;
  }
  if (v35 < v33) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v84;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_26:
  if (v25 < 0x400000) {
    goto LABEL_39;
  }
  uint64_t v36 = v26 >> 32;
  uint64_t v37 = v4 + SHIDWORD(v26) * (uint64_t)v6;
  unint64_t v38 = (v31 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v39 = v37 + v38;
  double v40 = *(float **)(result + 32);
  if (v15 >= v37 + v38) {
    int v41 = (float *)(v37 + v38);
  }
  else {
    int v41 = (float *)v15;
  }
  if (v41 < v40) {
    int v41 = *(float **)(result + 32);
  }
  if (v5)
  {
    unint64_t v42 = v5 + (int)v36 * (uint64_t)v7 + v38;
    unsigned int v43 = *(float **)(result + 40);
    if (v14 >= v42) {
      double v44 = (float *)v42;
    }
    else {
      double v44 = (float *)v14;
    }
    if (v44 >= v43) {
      unsigned int v43 = v44;
    }
    float v45 = *v43;
  }
  else
  {
    unint64_t v42 = 0;
    float v45 = 1.0;
  }
  float v46 = *v41;
  if (v8)
  {
    unsigned int v47 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_45:
    int v48 = v47 & 0xF;
    unsigned int v49 = v47 >> 8;
    int v50 = HIBYTE(v47) & 3;
    if (v48 == 1)
    {
      uint64_t v64 = (float *)(v39 + SBYTE1(v47) * (uint64_t)v6);
      if (v15 < (unint64_t)v64) {
        uint64_t v64 = (float *)v15;
      }
      if (v64 < v40) {
        uint64_t v64 = v40;
      }
      float v65 = *v64;
      float v66 = 1.0;
      if (v5)
      {
        double v67 = (float *)(v42 + (char)v49 * (uint64_t)v7);
        if (v14 < (unint64_t)v67) {
          double v67 = (float *)v14;
        }
        if ((unint64_t)v67 < *(void *)(result + 40)) {
          double v67 = *(float **)(result + 40);
        }
        float v66 = *v67;
      }
    }
    else
    {
      if (v48 != 2)
      {
        if (v48 == 3)
        {
          unint64_t v51 = v39 + 4 * SBYTE2(v47);
          if (v15 >= v51) {
            double v52 = (float *)(v39 + 4 * SBYTE2(v47));
          }
          else {
            double v52 = (float *)v15;
          }
          if (v52 < v40) {
            double v52 = v40;
          }
          float v53 = *v52;
          double v54 = (float *)(v51 + SBYTE1(v47) * (uint64_t)v6);
          if (v15 < (unint64_t)v54) {
            double v54 = (float *)v15;
          }
          if (v54 < v40) {
            double v54 = v40;
          }
          float v55 = *v54;
          float v56 = 1.0;
          float v57 = 1.0;
          if (v5)
          {
            unint64_t v58 = v42 + 4 * SBYTE2(v47);
            unint64_t v59 = *(void *)(result + 40);
            if (v14 >= v58) {
              uint64_t v60 = (float *)(v42 + 4 * SBYTE2(v47));
            }
            else {
              uint64_t v60 = (float *)v14;
            }
            if ((unint64_t)v60 < v59) {
              uint64_t v60 = *(float **)(result + 40);
            }
            float v56 = *v60;
            double v61 = (float *)(v58 + SBYTE1(v47) * (uint64_t)v7);
            if (v14 < (unint64_t)v61) {
              double v61 = (float *)v14;
            }
            if ((unint64_t)v61 < v59) {
              double v61 = *(float **)(result + 40);
            }
            float v57 = *v61;
          }
          float v62 = interpolate_waf[2 * v50 + 1];
          float v63 = interpolate_waf[2 * ((v47 >> 28) & 3) + 1];
          float v46 = (float)((float)((float)(v46 - (float)(v46 * v62)) + (float)(v53 * v62))
                      - (float)((float)((float)(v46 - (float)(v46 * v62)) + (float)(v53 * v62)) * v63))
              + (float)((float)((float)(v53 - (float)(v53 * v62)) + (float)(v55 * v62)) * v63);
          float v45 = (float)((float)((float)(v45 - (float)(v45 * v62)) + (float)(v56 * v62))
                      - (float)((float)((float)(v45 - (float)(v45 * v62)) + (float)(v56 * v62)) * v63))
              + (float)((float)((float)(v56 - (float)(v56 * v62)) + (float)(v57 * v62)) * v63);
        }
        goto LABEL_91;
      }
      double v68 = (float *)(v39 + 4 * SBYTE2(v47));
      if (v15 < (unint64_t)v68) {
        double v68 = (float *)v15;
      }
      if (v68 < v40) {
        double v68 = v40;
      }
      float v65 = *v68;
      float v66 = 1.0;
      if (v5)
      {
        double v69 = (float *)(v42 + 4 * SBYTE2(v47));
        if (v14 < (unint64_t)v69) {
          double v69 = (float *)v14;
        }
        if ((unint64_t)v69 < *(void *)(result + 40)) {
          double v69 = *(float **)(result + 40);
        }
        float v66 = *v69;
      }
      int v50 = (v47 >> 28) & 3;
    }
    float v70 = interpolate_waf[2 * v50 + 1];
    float v46 = (float)(v46 - (float)(v46 * v70)) + (float)(v65 * v70);
    float v45 = (float)(v45 - (float)(v45 * v70)) + (float)(v66 * v70);
  }
LABEL_91:
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  a3 += v9;
  uint64_t v73 = v88 - a3;
  a2 += v10;
  uint64_t v74 = v86 - a2;
  while (1)
  {
    int v75 = (int)(float)((float)(v45 * 255.0) + 0.5);
    if (v45 <= 1.0)
    {
      float v76 = v45;
    }
    else
    {
      int v75 = 255;
      float v76 = 1.0;
    }
    int v77 = (int)(float)((float)(v46 * 255.0) + 0.5);
    if (v46 < 0.0) {
      int v77 = 0;
    }
    if (v46 > v76) {
      int v77 = v75;
    }
    int v78 = v77 | (v75 << 24);
    if (v45 <= 0.0) {
      int v78 = 0;
    }
    *(_DWORD *)(v89 + 4 + 4 * v72) = v78;
    *(unsigned char *)(v11 + 1 + v72) = v25 >> 22;
    if (a4 - 1 == v72) {
      return result;
    }
    if ((v73 | v74 | (a3 - v87) | (a2 - v85)) < 0)
    {
      v11 += v72 + 1;
      uint64_t v89 = v89 - v71 + 4;
      a4 += ~v72;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v79 = v4 + SHIDWORD(a3) * (uint64_t)v6;
    unint64_t v80 = (a2 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v39 = v79 + v80;
    double v40 = *(float **)(result + 32);
    if (v15 >= v79 + v80) {
      uint64_t v81 = (float *)(v79 + v80);
    }
    else {
      uint64_t v81 = (float *)v15;
    }
    if (v81 < v40) {
      uint64_t v81 = *(float **)(result + 32);
    }
    if (v5)
    {
      unint64_t v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v80;
      double v82 = *(float **)(result + 40);
      if (v14 >= v42) {
        double v83 = (float *)v42;
      }
      else {
        double v83 = (float *)v14;
      }
      if (v83 >= v82) {
        double v82 = v83;
      }
      float v45 = *v82;
    }
    else
    {
      float v45 = 1.0;
    }
    float v46 = *v81;
    if (v8)
    {
      unsigned int v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        v11 += v72 + 1;
        uint64_t v89 = v89 - v71 + 4;
        a4 += ~v72;
        unsigned int v25 = -1;
        goto LABEL_45;
      }
    }
    ++v72;
    v71 -= 4;
    a3 += v9;
    v73 -= v9;
    a2 += v10;
    v74 -= v10;
    unsigned int v25 = -1;
  }
}

uint64_t W8_sample_WF(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v86 = *(void *)(result + 80);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v89 = *(void *)(result + 152) - 4;
  uint64_t v11 = *(void *)(result + 144) - 1;
  int v12 = *(_DWORD *)(result + 260) - 1;
  uint64_t v13 = *(unsigned int *)(result + 256);
  unint64_t v14 = v5 + (v12 * v7) + 4 * (v13 - 1);
  unint64_t v15 = v4 + (v12 * v6) + 4 * v13 - 4;
  int v84 = *(_DWORD *)(result + 188);
  uint64_t v87 = *(void *)(result + 72);
  uint64_t v85 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if (a3 >= v87)
    {
      if (a3 <= v88)
      {
        uint64_t v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        uint64_t v26 = a3;
        uint64_t v27 = v85;
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v88;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1) {
          goto LABEL_39;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        uint64_t v27 = v85;
        unsigned int v25 = v84 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v87 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1) {
        goto LABEL_39;
      }
      if (v18 >= v16) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      uint64_t v27 = v85;
      unsigned int v25 = v84 | v19;
      uint64_t v26 = v17 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v27) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v27 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v84;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v10;
    a3 += v9;
    v89 += 4;
    *(unsigned char *)++uint64_t v11 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v86)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_26;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v86;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_39;
  }
  if (v35 < v33) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v84;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_26:
  if (v25 < 0x400000) {
    goto LABEL_39;
  }
  uint64_t v36 = v26 >> 32;
  uint64_t v37 = v4 + SHIDWORD(v26) * (uint64_t)v6;
  unint64_t v38 = (v31 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v39 = v37 + v38;
  double v40 = *(unsigned int **)(result + 32);
  if (v15 >= v37 + v38) {
    int v41 = (unsigned int *)(v37 + v38);
  }
  else {
    int v41 = (unsigned int *)v15;
  }
  if (v41 < v40) {
    int v41 = *(unsigned int **)(result + 32);
  }
  if (v5)
  {
    unint64_t v42 = v5 + (int)v36 * (uint64_t)v7 + v38;
    unsigned int v43 = *(unsigned int **)(result + 40);
    if (v14 >= v42) {
      double v44 = (unsigned int *)v42;
    }
    else {
      double v44 = (unsigned int *)v14;
    }
    if (v44 >= v43) {
      unsigned int v43 = v44;
    }
    float v45 = COERCE_FLOAT(bswap32(*v43));
  }
  else
  {
    unint64_t v42 = 0;
    float v45 = 1.0;
  }
  float v46 = COERCE_FLOAT(bswap32(*v41));
  if (v8)
  {
    unsigned int v47 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_45:
    int v48 = v47 & 0xF;
    unsigned int v49 = v47 >> 8;
    int v50 = HIBYTE(v47) & 3;
    if (v48 == 1)
    {
      uint64_t v64 = (unsigned int *)(v39 + SBYTE1(v47) * (uint64_t)v6);
      if (v15 < (unint64_t)v64) {
        uint64_t v64 = (unsigned int *)v15;
      }
      if (v64 < v40) {
        uint64_t v64 = v40;
      }
      float v65 = COERCE_FLOAT(bswap32(*v64));
      float v66 = 1.0;
      if (v5)
      {
        double v67 = (unsigned int *)(v42 + (char)v49 * (uint64_t)v7);
        if (v14 < (unint64_t)v67) {
          double v67 = (unsigned int *)v14;
        }
        if ((unint64_t)v67 < *(void *)(result + 40)) {
          double v67 = *(unsigned int **)(result + 40);
        }
        float v66 = COERCE_FLOAT(bswap32(*v67));
      }
    }
    else
    {
      if (v48 != 2)
      {
        if (v48 == 3)
        {
          unint64_t v51 = v39 + 4 * SBYTE2(v47);
          if (v15 >= v51) {
            double v52 = (unsigned int *)(v39 + 4 * SBYTE2(v47));
          }
          else {
            double v52 = (unsigned int *)v15;
          }
          if (v52 < v40) {
            double v52 = v40;
          }
          float v53 = COERCE_FLOAT(bswap32(*v52));
          double v54 = (unsigned int *)(v51 + SBYTE1(v47) * (uint64_t)v6);
          if (v15 < (unint64_t)v54) {
            double v54 = (unsigned int *)v15;
          }
          if (v54 < v40) {
            double v54 = v40;
          }
          float v55 = COERCE_FLOAT(bswap32(*v54));
          float v56 = 1.0;
          float v57 = 1.0;
          if (v5)
          {
            unint64_t v58 = v42 + 4 * SBYTE2(v47);
            unint64_t v59 = *(void *)(result + 40);
            if (v14 >= v58) {
              uint64_t v60 = (unsigned int *)(v42 + 4 * SBYTE2(v47));
            }
            else {
              uint64_t v60 = (unsigned int *)v14;
            }
            if ((unint64_t)v60 < v59) {
              uint64_t v60 = *(unsigned int **)(result + 40);
            }
            float v56 = COERCE_FLOAT(bswap32(*v60));
            double v61 = (unsigned int *)(v58 + SBYTE1(v47) * (uint64_t)v7);
            if (v14 < (unint64_t)v61) {
              double v61 = (unsigned int *)v14;
            }
            if ((unint64_t)v61 < v59) {
              double v61 = *(unsigned int **)(result + 40);
            }
            float v57 = COERCE_FLOAT(bswap32(*v61));
          }
          float v62 = interpolate_waf[2 * v50 + 1];
          float v63 = interpolate_waf[2 * ((v47 >> 28) & 3) + 1];
          float v46 = (float)((float)((float)(v46 - (float)(v46 * v62)) + (float)(v53 * v62))
                      - (float)((float)((float)(v46 - (float)(v46 * v62)) + (float)(v53 * v62)) * v63))
              + (float)((float)((float)(v53 - (float)(v53 * v62)) + (float)(v55 * v62)) * v63);
          float v45 = (float)((float)((float)(v45 - (float)(v45 * v62)) + (float)(v56 * v62))
                      - (float)((float)((float)(v45 - (float)(v45 * v62)) + (float)(v56 * v62)) * v63))
              + (float)((float)((float)(v56 - (float)(v56 * v62)) + (float)(v57 * v62)) * v63);
        }
        goto LABEL_91;
      }
      double v68 = (unsigned int *)(v39 + 4 * SBYTE2(v47));
      if (v15 < (unint64_t)v68) {
        double v68 = (unsigned int *)v15;
      }
      if (v68 < v40) {
        double v68 = v40;
      }
      float v65 = COERCE_FLOAT(bswap32(*v68));
      float v66 = 1.0;
      if (v5)
      {
        double v69 = (unsigned int *)(v42 + 4 * SBYTE2(v47));
        if (v14 < (unint64_t)v69) {
          double v69 = (unsigned int *)v14;
        }
        if ((unint64_t)v69 < *(void *)(result + 40)) {
          double v69 = *(unsigned int **)(result + 40);
        }
        float v66 = COERCE_FLOAT(bswap32(*v69));
      }
      int v50 = (v47 >> 28) & 3;
    }
    float v70 = interpolate_waf[2 * v50 + 1];
    float v46 = (float)(v46 - (float)(v46 * v70)) + (float)(v65 * v70);
    float v45 = (float)(v45 - (float)(v45 * v70)) + (float)(v66 * v70);
  }
LABEL_91:
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  a3 += v9;
  uint64_t v73 = v88 - a3;
  a2 += v10;
  uint64_t v74 = v86 - a2;
  while (1)
  {
    int v75 = (int)(float)((float)(v45 * 255.0) + 0.5);
    if (v45 <= 1.0)
    {
      float v76 = v45;
    }
    else
    {
      int v75 = 255;
      float v76 = 1.0;
    }
    int v77 = (int)(float)((float)(v46 * 255.0) + 0.5);
    if (v46 < 0.0) {
      int v77 = 0;
    }
    if (v46 > v76) {
      int v77 = v75;
    }
    int v78 = v77 | (v75 << 24);
    if (v45 <= 0.0) {
      int v78 = 0;
    }
    *(_DWORD *)(v89 + 4 + 4 * v72) = v78;
    *(unsigned char *)(v11 + 1 + v72) = v25 >> 22;
    if (a4 - 1 == v72) {
      return result;
    }
    if ((v73 | v74 | (a3 - v87) | (a2 - v85)) < 0)
    {
      v11 += v72 + 1;
      uint64_t v89 = v89 - v71 + 4;
      a4 += ~v72;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v79 = v4 + SHIDWORD(a3) * (uint64_t)v6;
    unint64_t v80 = (a2 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v39 = v79 + v80;
    double v40 = *(unsigned int **)(result + 32);
    if (v15 >= v79 + v80) {
      uint64_t v81 = (unsigned int *)(v79 + v80);
    }
    else {
      uint64_t v81 = (unsigned int *)v15;
    }
    if (v81 < v40) {
      uint64_t v81 = *(unsigned int **)(result + 32);
    }
    if (v5)
    {
      unint64_t v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v80;
      double v82 = *(unsigned int **)(result + 40);
      if (v14 >= v42) {
        double v83 = (unsigned int *)v42;
      }
      else {
        double v83 = (unsigned int *)v14;
      }
      if (v83 >= v82) {
        double v82 = v83;
      }
      float v45 = COERCE_FLOAT(bswap32(*v82));
    }
    else
    {
      float v45 = 1.0;
    }
    float v46 = COERCE_FLOAT(bswap32(*v81));
    if (v8)
    {
      unsigned int v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        v11 += v72 + 1;
        uint64_t v89 = v89 - v71 + 4;
        a4 += ~v72;
        unsigned int v25 = -1;
        goto LABEL_45;
      }
    }
    ++v72;
    v71 -= 4;
    a3 += v9;
    v73 -= v9;
    a2 += v10;
    v74 -= v10;
    unsigned int v25 = -1;
  }
}

uint64_t W8_sample_w16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v94 = *(void *)(result + 80);
  uint64_t v95 = *(void *)(result + 64);
  uint64_t v96 = *(void *)(result + 88);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 4;
  uint64_t v12 = *(void *)(result + 144) - 1;
  int v13 = *(_DWORD *)(result + 260) - 1;
  uint64_t v14 = *(unsigned int *)(result + 256);
  unint64_t v15 = v5 + (v13 * v7) + 2 * (v14 - 1);
  unint64_t v16 = v4 + (v13 * v6) + 2 * v14 - 2;
  int v93 = *(_DWORD *)(result + 188);
  uint64_t v97 = *(void *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v97)
      {
        if (a3 <= v96)
        {
          uint64_t v25 = ((unint64_t)a3 >> 22) & 0x3C0;
          unsigned int v26 = 0x3FFFFFFF;
          uint64_t v27 = a3;
          uint64_t v28 = v95;
        }
        else
        {
          uint64_t v21 = *(void *)(result + 216);
          uint64_t v22 = *(void *)(result + 224) + v96;
          uint64_t v23 = v22 - a3 + (v21 >> 1);
          if (v23 < 1) {
            goto LABEL_40;
          }
          if (v23 >= v21) {
            LODWORD(v24) = 0x3FFFFFFF;
          }
          else {
            unint64_t v24 = (unint64_t)(*(void *)(result + 232) * v23) >> 32;
          }
          uint64_t v28 = v95;
          unsigned int v26 = v93 | v24;
          uint64_t v27 = v22 - 0x1000000;
          uint64_t v25 = 448;
        }
      }
      else
      {
        uint64_t v17 = *(void *)(result + 216);
        uint64_t v18 = v97 - *(void *)(result + 224);
        uint64_t v19 = a3 - v18 + (v17 >> 1);
        if (v19 < 1) {
          goto LABEL_40;
        }
        if (v19 >= v17) {
          LODWORD(v20) = 0x3FFFFFFF;
        }
        else {
          unint64_t v20 = (unint64_t)(*(void *)(result + 232) * v19) >> 32;
        }
        uint64_t v28 = v95;
        unsigned int v26 = v93 | v20;
        uint64_t v27 = v18 + 0x1000000;
        uint64_t v25 = 512;
      }
      if (a2 >= v28) {
        break;
      }
      uint64_t v29 = *(void *)(result + 192);
      uint64_t v30 = v28 - *(void *)(result + 200);
      uint64_t v31 = a2 - v30 + (v29 >> 1);
      if (v31 >= 1)
      {
        if (v31 < v29) {
          unsigned int v26 = ((v26 >> 15) * (((unint64_t)(*(void *)(result + 208) * v31) >> 32) >> 15)) | v93;
        }
        uint64_t v32 = v30 + 0x1000000;
        uint64_t v33 = 32;
        goto LABEL_26;
      }
LABEL_40:
      --a4;
      a2 += v10;
      a3 += v9;
      v11 += 4;
      *(unsigned char *)++uint64_t v12 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v94)
    {
      uint64_t v33 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v32 = a2;
      goto LABEL_26;
    }
    uint64_t v34 = *(void *)(result + 192);
    uint64_t v35 = *(void *)(result + 200) + v94;
    uint64_t v36 = v35 - a2 + (v34 >> 1);
    if (v36 < 1) {
      goto LABEL_40;
    }
    if (v36 < v34) {
      unsigned int v26 = ((v26 >> 15) * (((unint64_t)(*(void *)(result + 208) * v36) >> 32) >> 15)) | v93;
    }
    uint64_t v32 = v35 - 0x1000000;
    uint64_t v33 = 28;
LABEL_26:
    if (v26 < 0x400000) {
      goto LABEL_40;
    }
    uint64_t v37 = v27 >> 32;
    uint64_t v38 = v4 + (int)v37 * (uint64_t)v6;
    unint64_t v39 = (v32 >> 31) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v40 = v38 + v39;
    int v41 = *(unsigned __int16 **)(result + 32);
    if (v16 >= v38 + v39) {
      unint64_t v42 = (unsigned __int16 *)(v38 + v39);
    }
    else {
      unint64_t v42 = (unsigned __int16 *)v16;
    }
    if (v42 < v41) {
      unint64_t v42 = *(unsigned __int16 **)(result + 32);
    }
    unsigned int v43 = *v42;
    if (v5)
    {
      unint64_t v44 = v5 + (int)v37 * (uint64_t)v7 + v39;
      float v45 = *(unsigned __int16 **)(result + 40);
      if (v15 >= v44) {
        float v46 = (unsigned __int16 *)v44;
      }
      else {
        float v46 = (unsigned __int16 *)v15;
      }
      if (v46 >= v45) {
        float v45 = v46;
      }
      v43 |= *v45 << 16;
      if (!v8) {
        goto LABEL_101;
      }
    }
    else
    {
      unint64_t v44 = 0;
      if (!v8) {
        goto LABEL_101;
      }
    }
    unsigned int v47 = *(_DWORD *)(v8 + (v33 | v25));
LABEL_45:
    int v48 = v47 & 0xF;
    int v49 = HIBYTE(v47) & 3;
    switch(v48)
    {
      case 1:
        float v70 = (unsigned __int16 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v16 < (unint64_t)v70) {
          float v70 = (unsigned __int16 *)v16;
        }
        if (v70 < v41) {
          float v70 = v41;
        }
        unsigned int v71 = *v70;
        if (v5)
        {
          uint64_t v72 = (unsigned __int16 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          if (v15 < (unint64_t)v72) {
            uint64_t v72 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v72 < *(void *)(result + 40)) {
            uint64_t v72 = *(unsigned __int16 **)(result + 40);
          }
          v71 |= *v72 << 16;
        }
        int v73 = interpolate_1616[v49];
        char v74 = v49 + 1;
        unsigned int v68 = v43 - ((v73 & v43) >> v74);
        unsigned int v75 = (v73 & v71) >> v74;
        goto LABEL_100;
      case 2:
        float v76 = (unsigned __int16 *)(v40 + 2 * SBYTE2(v47));
        if (v16 < (unint64_t)v76) {
          float v76 = (unsigned __int16 *)v16;
        }
        if (v76 < v41) {
          float v76 = v41;
        }
        int v77 = *v76;
        if (v5)
        {
          int v78 = (unsigned __int16 *)(v44 + 2 * SBYTE2(v47));
          if (v15 < (unint64_t)v78) {
            int v78 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v78 < *(void *)(result + 40)) {
            int v78 = *(unsigned __int16 **)(result + 40);
          }
          v77 |= *v78 << 16;
        }
        int v79 = (v47 >> 28) & 3;
        int v80 = interpolate_1616[v79];
        char v67 = v79 + 1;
        unsigned int v68 = v43 - ((v80 & v43) >> v67);
        unsigned int v69 = v80 & v77;
        goto LABEL_99;
      case 3:
        int v50 = (unsigned __int16 *)(v40 + 2 * SBYTE2(v47));
        if (v16 < (unint64_t)v50) {
          int v50 = (unsigned __int16 *)v16;
        }
        if (v50 < v41) {
          int v50 = v41;
        }
        unsigned int v51 = *v50;
        double v52 = (unsigned __int16 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v16 >= (unint64_t)v52) {
          float v53 = v52;
        }
        else {
          float v53 = (unsigned __int16 *)v16;
        }
        if (v53 < v41) {
          float v53 = v41;
        }
        unsigned int v92 = *v53;
        double v54 = &v52[SBYTE2(v47)];
        if (v16 < (unint64_t)v54) {
          double v54 = (unsigned __int16 *)v16;
        }
        if (v54 < v41) {
          double v54 = v41;
        }
        unsigned int v55 = *v54;
        if (v5)
        {
          uint64_t v91 = 2 * SBYTE2(v47);
          float v56 = (unsigned __int16 *)(v44 + v91);
          unint64_t v57 = *(void *)(result + 40);
          if (v15 < v44 + v91) {
            float v56 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v56 < v57) {
            float v56 = *(unsigned __int16 **)(result + 40);
          }
          v51 |= *v56 << 16;
          unint64_t v58 = v44 + SBYTE1(v47) * (uint64_t)v7;
          if (v15 >= v58) {
            unint64_t v59 = (unsigned __int16 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          }
          else {
            unint64_t v59 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v59 < v57) {
            unint64_t v59 = *(unsigned __int16 **)(result + 40);
          }
          v92 |= *v59 << 16;
          uint64_t v60 = (unsigned __int16 *)(v58 + v91);
          if (v15 < v58 + v91) {
            uint64_t v60 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v60 < v57) {
            uint64_t v60 = *(unsigned __int16 **)(result + 40);
          }
          v55 |= *v60 << 16;
        }
        int v61 = interpolate_1616[v49];
        char v62 = v49 + 1;
        unsigned int v63 = v43 - ((v61 & v43) >> v62) + ((v61 & v92) >> v62);
        unsigned int v64 = v51 - ((v61 & v51) >> v62) + ((v61 & v55) >> v62);
        int v65 = (v47 >> 28) & 3;
        int v66 = interpolate_1616[v65];
        char v67 = v65 + 1;
        unsigned int v68 = v63 - ((v63 & v66) >> v67);
        unsigned int v69 = v64 & v66;
LABEL_99:
        unsigned int v75 = v69 >> v67;
LABEL_100:
        unsigned int v43 = v68 + v75;
        break;
    }
LABEL_101:
    unsigned int v81 = v43 & 0xFF000000;
    if (!v5) {
      unsigned int v81 = -16777216;
    }
    *(_DWORD *)(v11 + 4) = v81 & 0xFFFFFF00 | BYTE1(v43);
    *(unsigned char *)(v12 + 1) = v26 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v82 = 0;
    a2 += v10;
    uint64_t v83 = v94 - a2;
    a3 += v9;
    uint64_t v84 = v96 - a3;
    uint64_t v85 = -4;
    while (((v84 | v83 | (a3 - v97) | (a2 - v95)) & 0x8000000000000000) == 0)
    {
      unint64_t v86 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = v4 + SHIDWORD(a3) * (uint64_t)v6 + v86;
      int v41 = *(unsigned __int16 **)(result + 32);
      if (v16 >= v40) {
        uint64_t v87 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + v86);
      }
      else {
        uint64_t v87 = (unsigned __int16 *)v16;
      }
      if (v87 < v41) {
        uint64_t v87 = *(unsigned __int16 **)(result + 32);
      }
      unsigned int v43 = *v87;
      if (v5)
      {
        unint64_t v44 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v86;
        uint64_t v88 = *(unsigned __int16 **)(result + 40);
        if (v15 >= v44) {
          uint64_t v89 = (unsigned __int16 *)(v5 + SHIDWORD(a3) * (uint64_t)v7 + v86);
        }
        else {
          uint64_t v89 = (unsigned __int16 *)v15;
        }
        if (v89 >= v88) {
          uint64_t v88 = v89;
        }
        v43 |= *v88 << 16;
      }
      if (v8)
      {
        unsigned int v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v47 & 0xF) != 0)
        {
          v12 += v82 + 1;
          v11 -= v85;
          a4 += ~v82;
          unsigned int v26 = -1;
          goto LABEL_45;
        }
      }
      unsigned int v90 = v43 & 0xFF000000;
      if (!v5) {
        unsigned int v90 = -16777216;
      }
      *(_DWORD *)(v11 + 4 * v82 + 8) = v90 & 0xFFFFFF00 | BYTE1(v43);
      *(unsigned char *)(v12 + v82++ + 2) = -1;
      v85 -= 4;
      a2 += v10;
      v83 -= v10;
      a3 += v9;
      v84 -= v9;
      if (a4 - 1 == v82) {
        return result;
      }
    }
    v12 += v82 + 1;
    v11 -= v85;
    a4 += ~v82;
  }
  while (a4);
  return result;
}

uint64_t W8_sample_W16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v94 = *(void *)(result + 80);
  uint64_t v95 = *(void *)(result + 64);
  uint64_t v96 = *(void *)(result + 88);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v11 = *(void *)(result + 152) - 4;
  uint64_t v12 = *(void *)(result + 144) - 1;
  int v13 = *(_DWORD *)(result + 260) - 1;
  uint64_t v14 = *(unsigned int *)(result + 256);
  unint64_t v15 = v5 + (v13 * v7) + 2 * (v14 - 1);
  unint64_t v16 = v4 + (v13 * v6) + 2 * v14 - 2;
  int v93 = *(_DWORD *)(result + 188);
  uint64_t v97 = *(void *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v97)
      {
        if (a3 <= v96)
        {
          uint64_t v25 = ((unint64_t)a3 >> 22) & 0x3C0;
          unsigned int v26 = 0x3FFFFFFF;
          uint64_t v27 = a3;
          uint64_t v28 = v95;
        }
        else
        {
          uint64_t v21 = *(void *)(result + 216);
          uint64_t v22 = *(void *)(result + 224) + v96;
          uint64_t v23 = v22 - a3 + (v21 >> 1);
          if (v23 < 1) {
            goto LABEL_40;
          }
          if (v23 >= v21) {
            LODWORD(v24) = 0x3FFFFFFF;
          }
          else {
            unint64_t v24 = (unint64_t)(*(void *)(result + 232) * v23) >> 32;
          }
          uint64_t v28 = v95;
          unsigned int v26 = v93 | v24;
          uint64_t v27 = v22 - 0x1000000;
          uint64_t v25 = 448;
        }
      }
      else
      {
        uint64_t v17 = *(void *)(result + 216);
        uint64_t v18 = v97 - *(void *)(result + 224);
        uint64_t v19 = a3 - v18 + (v17 >> 1);
        if (v19 < 1) {
          goto LABEL_40;
        }
        if (v19 >= v17) {
          LODWORD(v20) = 0x3FFFFFFF;
        }
        else {
          unint64_t v20 = (unint64_t)(*(void *)(result + 232) * v19) >> 32;
        }
        uint64_t v28 = v95;
        unsigned int v26 = v93 | v20;
        uint64_t v27 = v18 + 0x1000000;
        uint64_t v25 = 512;
      }
      if (a2 >= v28) {
        break;
      }
      uint64_t v29 = *(void *)(result + 192);
      uint64_t v30 = v28 - *(void *)(result + 200);
      uint64_t v31 = a2 - v30 + (v29 >> 1);
      if (v31 >= 1)
      {
        if (v31 < v29) {
          unsigned int v26 = ((v26 >> 15) * (((unint64_t)(*(void *)(result + 208) * v31) >> 32) >> 15)) | v93;
        }
        uint64_t v32 = v30 + 0x1000000;
        uint64_t v33 = 32;
        goto LABEL_26;
      }
LABEL_40:
      --a4;
      a2 += v10;
      a3 += v9;
      v11 += 4;
      *(unsigned char *)++uint64_t v12 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v94)
    {
      uint64_t v33 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v32 = a2;
      goto LABEL_26;
    }
    uint64_t v34 = *(void *)(result + 192);
    uint64_t v35 = *(void *)(result + 200) + v94;
    uint64_t v36 = v35 - a2 + (v34 >> 1);
    if (v36 < 1) {
      goto LABEL_40;
    }
    if (v36 < v34) {
      unsigned int v26 = ((v26 >> 15) * (((unint64_t)(*(void *)(result + 208) * v36) >> 32) >> 15)) | v93;
    }
    uint64_t v32 = v35 - 0x1000000;
    uint64_t v33 = 28;
LABEL_26:
    if (v26 < 0x400000) {
      goto LABEL_40;
    }
    uint64_t v37 = v27 >> 32;
    uint64_t v38 = v4 + (int)v37 * (uint64_t)v6;
    unint64_t v39 = (v32 >> 31) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v40 = v38 + v39;
    int v41 = *(unsigned __int16 **)(result + 32);
    if (v16 >= v38 + v39) {
      unint64_t v42 = (unsigned __int16 *)(v38 + v39);
    }
    else {
      unint64_t v42 = (unsigned __int16 *)v16;
    }
    if (v42 < v41) {
      unint64_t v42 = *(unsigned __int16 **)(result + 32);
    }
    unsigned int v43 = bswap32(*v42) >> 16;
    if (v5)
    {
      unint64_t v44 = v5 + (int)v37 * (uint64_t)v7 + v39;
      float v45 = *(unsigned __int16 **)(result + 40);
      if (v15 >= v44) {
        float v46 = (unsigned __int16 *)v44;
      }
      else {
        float v46 = (unsigned __int16 *)v15;
      }
      if (v46 >= v45) {
        float v45 = v46;
      }
      v43 |= bswap32(*v45) & 0xFFFF0000;
      if (!v8) {
        goto LABEL_101;
      }
    }
    else
    {
      unint64_t v44 = 0;
      if (!v8) {
        goto LABEL_101;
      }
    }
    unsigned int v47 = *(_DWORD *)(v8 + (v33 | v25));
LABEL_45:
    int v48 = v47 & 0xF;
    int v49 = HIBYTE(v47) & 3;
    switch(v48)
    {
      case 1:
        unsigned int v71 = (unsigned __int16 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v16 < (unint64_t)v71) {
          unsigned int v71 = (unsigned __int16 *)v16;
        }
        if (v71 < v41) {
          unsigned int v71 = v41;
        }
        unsigned int v72 = bswap32(*v71) >> 16;
        if (v5)
        {
          int v73 = (unsigned __int16 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          if (v15 < (unint64_t)v73) {
            int v73 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v73 < *(void *)(result + 40)) {
            int v73 = *(unsigned __int16 **)(result + 40);
          }
          v72 |= bswap32(*v73) & 0xFFFF0000;
        }
        int v74 = interpolate_1616[v49];
        char v75 = v49 + 1;
        unsigned int v69 = v43 - ((v74 & v43) >> v75);
        unsigned int v76 = (v74 & v72) >> v75;
        goto LABEL_100;
      case 2:
        int v77 = (unsigned __int16 *)(v40 + 2 * SBYTE2(v47));
        if (v16 < (unint64_t)v77) {
          int v77 = (unsigned __int16 *)v16;
        }
        if (v77 < v41) {
          int v77 = v41;
        }
        unsigned int v78 = bswap32(*v77) >> 16;
        if (v5)
        {
          int v79 = (unsigned __int16 *)(v44 + 2 * SBYTE2(v47));
          if (v15 < (unint64_t)v79) {
            int v79 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v79 < *(void *)(result + 40)) {
            int v79 = *(unsigned __int16 **)(result + 40);
          }
          v78 |= bswap32(*v79) & 0xFFFF0000;
        }
        int v80 = (v47 >> 28) & 3;
        int v81 = interpolate_1616[v80];
        char v68 = v80 + 1;
        unsigned int v69 = v43 - ((v81 & v43) >> v68);
        unsigned int v70 = v81 & v78;
        goto LABEL_99;
      case 3:
        int v50 = (unsigned __int16 *)(v40 + 2 * SBYTE2(v47));
        if (v16 < (unint64_t)v50) {
          int v50 = (unsigned __int16 *)v16;
        }
        if (v50 < v41) {
          int v50 = v41;
        }
        unsigned int v51 = bswap32(*v50) >> 16;
        double v52 = (unsigned __int16 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v16 >= (unint64_t)v52) {
          float v53 = v52;
        }
        else {
          float v53 = (unsigned __int16 *)v16;
        }
        if (v53 < v41) {
          float v53 = v41;
        }
        unsigned int v92 = bswap32(*v53) >> 16;
        double v54 = &v52[SBYTE2(v47)];
        if (v16 < (unint64_t)v54) {
          double v54 = (unsigned __int16 *)v16;
        }
        if (v54 < v41) {
          double v54 = v41;
        }
        unsigned int v55 = bswap32(*v54) >> 16;
        if (v5)
        {
          uint64_t v56 = 2 * SBYTE2(v47);
          unint64_t v57 = (unsigned __int16 *)(v44 + v56);
          unint64_t v58 = *(void *)(result + 40);
          if (v15 < v44 + v56) {
            unint64_t v57 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v57 < v58) {
            unint64_t v57 = *(unsigned __int16 **)(result + 40);
          }
          v51 |= bswap32(*v57) & 0xFFFF0000;
          unint64_t v59 = v44 + SBYTE1(v47) * (uint64_t)v7;
          if (v15 >= v59) {
            uint64_t v60 = (unsigned __int16 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          }
          else {
            uint64_t v60 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v60 < v58) {
            uint64_t v60 = *(unsigned __int16 **)(result + 40);
          }
          v92 |= bswap32(*v60) & 0xFFFF0000;
          int v61 = (unsigned __int16 *)(v59 + v56);
          if (v15 < v59 + v56) {
            int v61 = (unsigned __int16 *)v15;
          }
          if ((unint64_t)v61 < v58) {
            int v61 = *(unsigned __int16 **)(result + 40);
          }
          v55 |= bswap32(*v61) & 0xFFFF0000;
        }
        int v62 = interpolate_1616[v49];
        char v63 = v49 + 1;
        unsigned int v64 = v43 - ((v62 & v43) >> v63) + ((v62 & v92) >> v63);
        unsigned int v65 = v51 - ((v62 & v51) >> v63) + ((v62 & v55) >> v63);
        int v66 = (v47 >> 28) & 3;
        int v67 = interpolate_1616[v66];
        char v68 = v66 + 1;
        unsigned int v69 = v64 - ((v64 & v67) >> v68);
        unsigned int v70 = v65 & v67;
LABEL_99:
        unsigned int v76 = v70 >> v68;
LABEL_100:
        unsigned int v43 = v69 + v76;
        break;
    }
LABEL_101:
    unsigned int v82 = v43 & 0xFF000000;
    if (!v5) {
      unsigned int v82 = -16777216;
    }
    *(_DWORD *)(v11 + 4) = v82 & 0xFFFFFF00 | BYTE1(v43);
    *(unsigned char *)(v12 + 1) = v26 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v83 = 0;
    a2 += v10;
    uint64_t v84 = v94 - a2;
    a3 += v9;
    uint64_t v85 = v96 - a3;
    uint64_t v86 = -4;
    while (((v85 | v84 | (a3 - v97) | (a2 - v95)) & 0x8000000000000000) == 0)
    {
      unint64_t v87 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = v4 + SHIDWORD(a3) * (uint64_t)v6 + v87;
      int v41 = *(unsigned __int16 **)(result + 32);
      if (v16 >= v40) {
        uint64_t v88 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + v87);
      }
      else {
        uint64_t v88 = (unsigned __int16 *)v16;
      }
      if (v88 < v41) {
        uint64_t v88 = *(unsigned __int16 **)(result + 32);
      }
      unsigned int v43 = bswap32(*v88) >> 16;
      if (v5)
      {
        unint64_t v44 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v87;
        uint64_t v89 = *(unsigned __int16 **)(result + 40);
        if (v15 >= v44) {
          unsigned int v90 = (unsigned __int16 *)(v5 + SHIDWORD(a3) * (uint64_t)v7 + v87);
        }
        else {
          unsigned int v90 = (unsigned __int16 *)v15;
        }
        if (v90 >= v89) {
          uint64_t v89 = v90;
        }
        v43 |= bswap32(*v89) & 0xFFFF0000;
      }
      if (v8)
      {
        unsigned int v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v47 & 0xF) != 0)
        {
          v12 += v83 + 1;
          v11 -= v86;
          a4 += ~v83;
          unsigned int v26 = -1;
          goto LABEL_45;
        }
      }
      unsigned int v91 = v43 & 0xFF000000;
      if (!v5) {
        unsigned int v91 = -16777216;
      }
      *(_DWORD *)(v11 + 4 * v83 + 8) = v91 & 0xFFFFFF00 | BYTE1(v43);
      *(unsigned char *)(v12 + v83++ + 2) = -1;
      v86 -= 4;
      a2 += v10;
      v84 -= v10;
      a3 += v9;
      v85 -= v9;
      if (a4 - 1 == v83) {
        return result;
      }
    }
    v12 += v83 + 1;
    v11 -= v86;
    a4 += ~v83;
  }
  while (a4);
  return result;
}

uint64_t W8_sample_cmyk32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(result + 40);
  uint64_t v7 = *(void *)(result + 176);
  uint64_t v87 = *(void *)(result + 80);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v101 = *(void *)(result + 120);
  uint64_t v102 = *(void *)(result + 112);
  uint64_t v8 = (unsigned int *)(*(void *)(result + 152) - 4);
  uint64_t v91 = *(void *)(result + 144) - 1;
  uint64_t v9 = 0xFF00000000;
  if (v6) {
    uint64_t v9 = 0;
  }
  uint64_t v96 = v9;
  int v10 = *(_DWORD *)(result + 260) - 1;
  int v99 = *(_DWORD *)(result + 24);
  uint64_t v95 = *(void *)(result + 32);
  uint64_t v11 = *(unsigned int *)(result + 256);
  int v86 = *(_DWORD *)(result + 188);
  int v93 = *(_DWORD *)(result + 28);
  uint64_t v94 = (unsigned __int8 *)(v6 + (v11 - 1) + (v10 * v93));
  unint64_t v100 = v95 + (v10 * v99) + 4 * v11 - 8;
  uint64_t v89 = *(void *)(result + 64);
  uint64_t v90 = *(void *)(result + 72);
  uint64_t v97 = *(void *)(result + 40);
  uint64_t v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        uint64_t v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        uint64_t v24 = a3;
        int v15 = a4;
        uint64_t v16 = v89;
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v88;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        int v15 = a4;
        uint64_t v16 = v89;
        if (v20 < 1) {
          goto LABEL_40;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v23 = v86 | v21;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(result + 216);
      uint64_t v13 = v90 - *(void *)(result + 224);
      uint64_t v14 = a3 - v13 + (v12 >> 1);
      int v15 = a4;
      uint64_t v16 = v89;
      if (v14 < 1) {
        goto LABEL_40;
      }
      if (v14 >= v12) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v14) >> 32;
      }
      unsigned int v23 = v86 | v17;
      uint64_t v24 = v13 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v28 = a2;
      }
      else
      {
        uint64_t v30 = *(void *)(result + 192);
        uint64_t v31 = *(void *)(result + 200) + v87;
        uint64_t v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1) {
          goto LABEL_40;
        }
        if (v32 < v30) {
          unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v86;
        }
        uint64_t v28 = v31 - 0x1000000;
        uint64_t v29 = 28;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(result + 192);
      uint64_t v26 = v16 - *(void *)(result + 200);
      uint64_t v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1) {
        goto LABEL_40;
      }
      if (v27 < v25) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v86;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
    }
    if (v23 >= 0x400000) {
      break;
    }
LABEL_40:
    int v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    ++v8;
    *(unsigned char *)++uint64_t v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42) {
      return result;
    }
  }
  uint64_t v33 = v24 >> 32;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  uint64_t v36 = *(unsigned int **)(result + 32);
  uint64_t v37 = (unsigned int *)v100;
  if (v100 >= v35) {
    uint64_t v37 = (unsigned int *)v35;
  }
  if (v37 < v36) {
    uint64_t v37 = *(unsigned int **)(result + 32);
  }
  unint64_t v38 = *v37;
  if (v6)
  {
    unint64_t v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    unint64_t v40 = *(unsigned __int8 **)(result + 40);
    int v41 = v94;
    unint64_t v92 = v39;
    if ((unint64_t)v94 >= v39) {
      int v41 = (unsigned __int8 *)v39;
    }
    if (v41 >= v40) {
      unint64_t v40 = v41;
    }
    v38 |= (unint64_t)*v40 << 32;
    if (!v7) {
      goto LABEL_102;
    }
  }
  else
  {
    unint64_t v92 = 0;
    if (!v7) {
      goto LABEL_102;
    }
  }
  unsigned int v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  int v44 = v43 & 0xF;
  int v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    int v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67) {
      int v67 = (unsigned int *)v100;
    }
    if (v67 >= v36) {
      uint64_t v36 = v67;
    }
    unint64_t v68 = *v36;
    if (v6)
    {
      unsigned int v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69) {
        unsigned int v69 = v94;
      }
      if ((unint64_t)v69 < *(void *)(result + 40)) {
        unsigned int v69 = *(unsigned __int8 **)(result + 40);
      }
      v68 |= (unint64_t)*v69 << 32;
    }
    uint64_t v70 = interpolate_cif10a[v45];
    char v71 = v45 + 1;
    unint64_t v65 = v38 - ((v70 & v38) >> v71);
    unint64_t v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      int v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73) {
        int v73 = (unsigned int *)v100;
      }
      if (v73 >= v36) {
        uint64_t v36 = v73;
      }
      uint64_t v74 = *v36;
      if (v6)
      {
        char v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75) {
          char v75 = v94;
        }
        if ((unint64_t)v75 < *(void *)(result + 40)) {
          char v75 = *(unsigned __int8 **)(result + 40);
        }
        v74 |= (unint64_t)*v75 << 32;
      }
      int v76 = (v43 >> 28) & 3;
      uint64_t v77 = interpolate_cif10a[v76];
      char v64 = v76 + 1;
      unint64_t v65 = v38 - ((v77 & v38) >> v64);
      unint64_t v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3) {
        goto LABEL_102;
      }
      int64_t v46 = (unint64_t)HIWORD(v43) << 56;
      unsigned int v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47) {
        unsigned int v47 = (unsigned int *)v100;
      }
      if (v47 < v36) {
        unsigned int v47 = v36;
      }
      unint64_t v48 = *v47;
      unint64_t v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49) {
        int v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      }
      else {
        int v50 = (unsigned int *)v100;
      }
      if (v50 < v36) {
        int v50 = v36;
      }
      unint64_t v51 = *v50;
      double v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52) {
        double v52 = (unsigned int *)v100;
      }
      if (v52 >= v36) {
        uint64_t v36 = v52;
      }
      unint64_t v53 = *v36;
      if (v6)
      {
        double v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        unint64_t v55 = *(void *)(result + 40);
        if (v94 < v54) {
          double v54 = v94;
        }
        if ((unint64_t)v54 < v55) {
          double v54 = *(unsigned __int8 **)(result + 40);
        }
        v48 |= (unint64_t)*v54 << 32;
        unint64_t v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56) {
          unint64_t v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        }
        else {
          unint64_t v57 = v94;
        }
        if ((unint64_t)v57 < v55) {
          unint64_t v57 = *(unsigned __int8 **)(result + 40);
        }
        v51 |= (unint64_t)*v57 << 32;
        unint64_t v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58) {
          unint64_t v58 = v94;
        }
        if ((unint64_t)v58 < v55) {
          unint64_t v58 = *(unsigned __int8 **)(result + 40);
        }
        v53 |= (unint64_t)*v58 << 32;
      }
      uint64_t v59 = interpolate_cif10a[v45];
      char v60 = v45 + 1;
      unint64_t v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      int v62 = (v43 >> 28) & 3;
      unint64_t v63 = interpolate_cif10a[v62];
      char v64 = v62 + 1;
      unint64_t v65 = v61 - ((v61 & v63) >> v64);
      unint64_t v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    unint64_t v72 = v66 >> v64;
  }
  unint64_t v38 = v65 + v72;
LABEL_102:
  uint64_t v78 = 0;
  ++v8;
  int v85 = v15;
  int v79 = v15 - 1;
  a3 += v101;
  uint64_t v80 = v88 - a3;
  a2 += v102;
  uint64_t v81 = v87 - a2;
  while (1)
  {
    CMYK32_17513(v8, v38 | v96);
    *(unsigned char *)(v91 + 1 + v78) = v23 >> 22;
    uint64_t v6 = v97;
    CFDictionaryRef result = v98;
    if (v79 == v78) {
      return result;
    }
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      int v42 = ~v78 + v85;
      goto LABEL_41;
    }
    unint64_t v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    uint64_t v36 = *(unsigned int **)(v98 + 32);
    unsigned int v82 = (unsigned int *)v100;
    if (v100 >= v35) {
      unsigned int v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    }
    if (v82 < v36) {
      unsigned int v82 = *(unsigned int **)(v98 + 32);
    }
    unint64_t v38 = *v82;
    if (v97)
    {
      uint64_t v83 = *(unsigned __int8 **)(v98 + 40);
      unint64_t v84 = (unint64_t)v94;
      unint64_t v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92) {
        unint64_t v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      }
      if (v84 >= (unint64_t)v83) {
        uint64_t v83 = (unsigned __int8 *)v84;
      }
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      unsigned int v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        int v15 = ~v78 + v85;
        unsigned int v23 = -1;
        goto LABEL_46;
      }
    }
    ++v8;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    unsigned int v23 = -1;
  }
}

unsigned int *CMYK32_17513(unsigned int *result, uint64_t a2)
{
  int v2 = BYTE4(a2) - (BYTE3(a2) + a2);
  int v3 = BYTE4(a2) - (BYTE2(a2) + a2);
  void *result = (((v3 & ~(v3 >> 31))
            + 2 * (v2 & ~(v2 >> 31))
            + ((BYTE4(a2) - (BYTE1(a2) + a2)) & ~((BYTE4(a2) - (BYTE1(a2) + a2)) >> 31))
            + 4 * (v3 & ~(v3 >> 31))) >> 3) | (HIDWORD(a2) << 24);
  return result;
}

uint64_t W8_sample_CMYK32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(result + 40);
  uint64_t v7 = *(void *)(result + 176);
  uint64_t v87 = *(void *)(result + 80);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v101 = *(void *)(result + 120);
  uint64_t v102 = *(void *)(result + 112);
  uint64_t v8 = (unsigned int *)(*(void *)(result + 152) - 4);
  uint64_t v91 = *(void *)(result + 144) - 1;
  uint64_t v9 = 0xFF00000000;
  if (v6) {
    uint64_t v9 = 0;
  }
  uint64_t v96 = v9;
  int v10 = *(_DWORD *)(result + 260) - 1;
  int v99 = *(_DWORD *)(result + 24);
  uint64_t v95 = *(void *)(result + 32);
  uint64_t v11 = *(unsigned int *)(result + 256);
  int v86 = *(_DWORD *)(result + 188);
  int v93 = *(_DWORD *)(result + 28);
  uint64_t v94 = (unsigned __int8 *)(v6 + (v11 - 1) + (v10 * v93));
  unint64_t v100 = v95 + (v10 * v99) + 4 * v11 - 8;
  uint64_t v89 = *(void *)(result + 64);
  uint64_t v90 = *(void *)(result + 72);
  uint64_t v97 = *(void *)(result + 40);
  uint64_t v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        uint64_t v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        uint64_t v24 = a3;
        int v15 = a4;
        uint64_t v16 = v89;
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v88;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        int v15 = a4;
        uint64_t v16 = v89;
        if (v20 < 1) {
          goto LABEL_40;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v23 = v86 | v21;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(result + 216);
      uint64_t v13 = v90 - *(void *)(result + 224);
      uint64_t v14 = a3 - v13 + (v12 >> 1);
      int v15 = a4;
      uint64_t v16 = v89;
      if (v14 < 1) {
        goto LABEL_40;
      }
      if (v14 >= v12) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v14) >> 32;
      }
      unsigned int v23 = v86 | v17;
      uint64_t v24 = v13 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v28 = a2;
      }
      else
      {
        uint64_t v30 = *(void *)(result + 192);
        uint64_t v31 = *(void *)(result + 200) + v87;
        uint64_t v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1) {
          goto LABEL_40;
        }
        if (v32 < v30) {
          unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v86;
        }
        uint64_t v28 = v31 - 0x1000000;
        uint64_t v29 = 28;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(result + 192);
      uint64_t v26 = v16 - *(void *)(result + 200);
      uint64_t v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1) {
        goto LABEL_40;
      }
      if (v27 < v25) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v86;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
    }
    if (v23 >= 0x400000) {
      break;
    }
LABEL_40:
    int v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    ++v8;
    *(unsigned char *)++uint64_t v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42) {
      return result;
    }
  }
  uint64_t v33 = v24 >> 32;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  uint64_t v36 = *(unsigned int **)(result + 32);
  uint64_t v37 = (unsigned int *)v100;
  if (v100 >= v35) {
    uint64_t v37 = (unsigned int *)v35;
  }
  if (v37 < v36) {
    uint64_t v37 = *(unsigned int **)(result + 32);
  }
  unint64_t v38 = bswap32(*v37);
  if (v6)
  {
    unint64_t v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    unint64_t v40 = *(unsigned __int8 **)(result + 40);
    int v41 = v94;
    unint64_t v92 = v39;
    if ((unint64_t)v94 >= v39) {
      int v41 = (unsigned __int8 *)v39;
    }
    if (v41 >= v40) {
      unint64_t v40 = v41;
    }
    v38 |= (unint64_t)*v40 << 32;
    if (!v7) {
      goto LABEL_102;
    }
  }
  else
  {
    unint64_t v92 = 0;
    if (!v7) {
      goto LABEL_102;
    }
  }
  unsigned int v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  int v44 = v43 & 0xF;
  int v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    int v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67) {
      int v67 = (unsigned int *)v100;
    }
    if (v67 >= v36) {
      uint64_t v36 = v67;
    }
    unint64_t v68 = bswap32(*v36);
    if (v6)
    {
      unsigned int v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69) {
        unsigned int v69 = v94;
      }
      if ((unint64_t)v69 < *(void *)(result + 40)) {
        unsigned int v69 = *(unsigned __int8 **)(result + 40);
      }
      v68 |= (unint64_t)*v69 << 32;
    }
    uint64_t v70 = interpolate_cif10a[v45];
    char v71 = v45 + 1;
    unint64_t v65 = v38 - ((v70 & v38) >> v71);
    unint64_t v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      int v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73) {
        int v73 = (unsigned int *)v100;
      }
      if (v73 >= v36) {
        uint64_t v36 = v73;
      }
      uint64_t v74 = bswap32(*v36);
      if (v6)
      {
        char v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75) {
          char v75 = v94;
        }
        if ((unint64_t)v75 < *(void *)(result + 40)) {
          char v75 = *(unsigned __int8 **)(result + 40);
        }
        v74 |= (unint64_t)*v75 << 32;
      }
      int v76 = (v43 >> 28) & 3;
      uint64_t v77 = interpolate_cif10a[v76];
      char v64 = v76 + 1;
      unint64_t v65 = v38 - ((v77 & v38) >> v64);
      unint64_t v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3) {
        goto LABEL_102;
      }
      int64_t v46 = (unint64_t)HIWORD(v43) << 56;
      unsigned int v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47) {
        unsigned int v47 = (unsigned int *)v100;
      }
      if (v47 < v36) {
        unsigned int v47 = v36;
      }
      unint64_t v48 = bswap32(*v47);
      unint64_t v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49) {
        int v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      }
      else {
        int v50 = (unsigned int *)v100;
      }
      if (v50 < v36) {
        int v50 = v36;
      }
      unint64_t v51 = bswap32(*v50);
      double v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52) {
        double v52 = (unsigned int *)v100;
      }
      if (v52 >= v36) {
        uint64_t v36 = v52;
      }
      unint64_t v53 = bswap32(*v36);
      if (v6)
      {
        double v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        unint64_t v55 = *(void *)(result + 40);
        if (v94 < v54) {
          double v54 = v94;
        }
        if ((unint64_t)v54 < v55) {
          double v54 = *(unsigned __int8 **)(result + 40);
        }
        v48 |= (unint64_t)*v54 << 32;
        unint64_t v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56) {
          unint64_t v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        }
        else {
          unint64_t v57 = v94;
        }
        if ((unint64_t)v57 < v55) {
          unint64_t v57 = *(unsigned __int8 **)(result + 40);
        }
        v51 |= (unint64_t)*v57 << 32;
        unint64_t v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58) {
          unint64_t v58 = v94;
        }
        if ((unint64_t)v58 < v55) {
          unint64_t v58 = *(unsigned __int8 **)(result + 40);
        }
        v53 |= (unint64_t)*v58 << 32;
      }
      uint64_t v59 = interpolate_cif10a[v45];
      char v60 = v45 + 1;
      unint64_t v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      int v62 = (v43 >> 28) & 3;
      unint64_t v63 = interpolate_cif10a[v62];
      char v64 = v62 + 1;
      unint64_t v65 = v61 - ((v61 & v63) >> v64);
      unint64_t v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    unint64_t v72 = v66 >> v64;
  }
  unint64_t v38 = v65 + v72;
LABEL_102:
  uint64_t v78 = 0;
  ++v8;
  int v85 = v15;
  int v79 = v15 - 1;
  a3 += v101;
  uint64_t v80 = v88 - a3;
  a2 += v102;
  uint64_t v81 = v87 - a2;
  while (1)
  {
    CMYK32_17513(v8, v38 | v96);
    *(unsigned char *)(v91 + 1 + v78) = v23 >> 22;
    uint64_t v6 = v97;
    CFDictionaryRef result = v98;
    if (v79 == v78) {
      return result;
    }
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      int v42 = ~v78 + v85;
      goto LABEL_41;
    }
    unint64_t v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    uint64_t v36 = *(unsigned int **)(v98 + 32);
    unsigned int v82 = (unsigned int *)v100;
    if (v100 >= v35) {
      unsigned int v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    }
    if (v82 < v36) {
      unsigned int v82 = *(unsigned int **)(v98 + 32);
    }
    unint64_t v38 = bswap32(*v82);
    if (v97)
    {
      uint64_t v83 = *(unsigned __int8 **)(v98 + 40);
      unint64_t v84 = (unint64_t)v94;
      unint64_t v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92) {
        unint64_t v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      }
      if (v84 >= (unint64_t)v83) {
        uint64_t v83 = (unsigned __int8 *)v84;
      }
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      unsigned int v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        int v15 = ~v78 + v85;
        unsigned int v23 = -1;
        goto LABEL_46;
      }
    }
    ++v8;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    unsigned int v23 = -1;
  }
}

uint64_t W8_sample_argb32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 72);
  uint64_t v74 = *(void *)(result + 80);
  uint64_t v75 = *(void *)(result + 88);
  uint64_t v7 = *(void *)(result + 112);
  uint64_t v8 = *(void *)(result + 120);
  uint64_t v9 = *(void *)(result + 152) - 4;
  uint64_t v10 = *(void *)(result + 144) - 1;
  uint64_t v12 = *(void *)(result + 32);
  uint64_t v11 = *(void *)(result + 40);
  int v72 = *(_DWORD *)(result + 188);
  unint64_t v13 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v73 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v75)
      {
        uint64_t v22 = (a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v75;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_34;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v23 = v72 | v21;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(result + 216);
      uint64_t v15 = v6 - *(void *)(result + 224);
      uint64_t v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1) {
        goto LABEL_34;
      }
      if (v16 >= v14) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v16) >> 32;
      }
      unsigned int v23 = v72 | v17;
      uint64_t v24 = v15 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v73) {
      break;
    }
    uint64_t v25 = *(void *)(result + 192);
    uint64_t v26 = v73 - *(void *)(result + 200);
    uint64_t v27 = a2 - v26 + (v25 >> 1);
    if (v27 >= 1)
    {
      if (v27 < v25) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v72;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v7;
    a3 += v8;
    v9 += 4;
    *(unsigned char *)++uint64_t v10 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v74)
  {
    uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v28 = a2;
    goto LABEL_26;
  }
  uint64_t v30 = *(void *)(result + 192);
  uint64_t v31 = *(void *)(result + 200) + v74;
  uint64_t v32 = v31 - a2 + (v30 >> 1);
  if (v32 < 1) {
    goto LABEL_34;
  }
  if (v32 < v30) {
    unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v72;
  }
  uint64_t v28 = v31 - 0x1000000;
  uint64_t v29 = 28;
LABEL_26:
  if (v23 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v33 = v12 + SHIDWORD(v24) * (uint64_t)v4;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v33 + 4 * v34;
  uint64_t v36 = *(unsigned int **)(result + 32);
  if (v13 >= v35) {
    uint64_t v37 = (unsigned int *)(v33 + 4 * v34);
  }
  else {
    uint64_t v37 = (unsigned int *)v13;
  }
  if (v37 < v36) {
    uint64_t v37 = *(unsigned int **)(result + 32);
  }
  unsigned int v38 = *v37;
  if (!v5) {
    goto LABEL_66;
  }
  unsigned int v39 = *(_DWORD *)(v5 + (v29 | v22));
LABEL_37:
  int v40 = v39 & 0xF;
  int v41 = HIBYTE(v39) & 3;
  switch(v40)
  {
    case 1:
      unint64_t v58 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      if (v13 < (unint64_t)v58) {
        unint64_t v58 = (unsigned int *)v13;
      }
      if (v58 < v36) {
        unint64_t v58 = v36;
      }
      unsigned int v59 = interpolate_8888_21358[v41];
      char v60 = v41 + 1;
      unsigned int v56 = v38 - ((v59 & v38) >> v60);
      unsigned int v61 = (v59 & *v58) >> v60;
LABEL_65:
      unsigned int v38 = v56 + v61;
      break;
    case 2:
      int v62 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v39) << 56) >> 54));
      if (v13 < (unint64_t)v62) {
        int v62 = (unsigned int *)v13;
      }
      if (v62 < v36) {
        int v62 = v36;
      }
      int v63 = (v39 >> 28) & 3;
      int v64 = interpolate_8888_21358[v63];
      char v55 = v63 + 1;
      unsigned int v56 = v38 - ((v64 & v38) >> v55);
      unsigned int v57 = v64 & *v62;
LABEL_64:
      unsigned int v61 = v57 >> v55;
      goto LABEL_65;
    case 3:
      int64_t v42 = (unint64_t)HIWORD(v39) << 56;
      unsigned int v43 = (unsigned int *)(v35 + (v42 >> 54));
      if (v13 < (unint64_t)v43) {
        unsigned int v43 = (unsigned int *)v13;
      }
      if (v43 < v36) {
        unsigned int v43 = v36;
      }
      unsigned int v44 = *v43;
      unint64_t v45 = v35 + SBYTE1(v39) * (uint64_t)v4;
      if (v13 >= v45) {
        int64_t v46 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      }
      else {
        int64_t v46 = (unsigned int *)v13;
      }
      if (v46 < v36) {
        int64_t v46 = v36;
      }
      unsigned int v47 = *v46;
      unint64_t v48 = (unsigned int *)(v45 + (v42 >> 54));
      if (v13 < (unint64_t)v48) {
        unint64_t v48 = (unsigned int *)v13;
      }
      if (v48 < v36) {
        unint64_t v48 = v36;
      }
      unsigned int v49 = interpolate_8888_21358[v41];
      char v50 = v41 + 1;
      unsigned int v51 = v38 - ((v49 & v38) >> v50) + ((v49 & v47) >> v50);
      unsigned int v52 = v44 - ((v49 & v44) >> v50) + ((v49 & *v48) >> v50);
      int v53 = (v39 >> 28) & 3;
      int v54 = interpolate_8888_21358[v53];
      char v55 = v53 + 1;
      unsigned int v56 = v51 - ((v51 & v54) >> v55);
      unsigned int v57 = v52 & v54;
      goto LABEL_64;
  }
LABEL_66:
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  a3 += v8;
  uint64_t v67 = v75 - a3;
  a2 += v7;
  uint64_t v68 = v74 - a2;
  while (1)
  {
    unsigned int v69 = v38 & 0xFF000000;
    if (!v11) {
      unsigned int v69 = -16777216;
    }
    *(_DWORD *)(v9 + 4 + 4 * v65) = v69 | ((((unsigned __int16)(v38 & 0xFF00) >> 6)
                                          + v38
                                          + ((v38 >> 15) & 0x1FE)
                                          + ((unsigned __int16)(v38 & 0xFF00) >> 8)) >> 3);
    *(unsigned char *)(v10 + 1 + v65) = v23 >> 22;
    if (a4 - 1 == v65) {
      return result;
    }
    if (((v67 | v68 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      uint64_t v9 = v9 - v66 + 4;
      v10 += v65 + 1;
      a4 += ~v65;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v35 = v70 + 4 * (a2 >> 32);
    uint64_t v36 = *(unsigned int **)(result + 32);
    if (v13 >= v35) {
      char v71 = (unsigned int *)(v70 + 4 * (a2 >> 32));
    }
    else {
      char v71 = (unsigned int *)v13;
    }
    if (v71 < v36) {
      char v71 = *(unsigned int **)(result + 32);
    }
    unsigned int v38 = *v71;
    if (v5)
    {
      unsigned int v39 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v39 & 0xF) != 0)
      {
        uint64_t v9 = v9 - v66 + 4;
        v10 += v65 + 1;
        a4 += ~v65;
        unsigned int v23 = -1;
        goto LABEL_37;
      }
    }
    v66 -= 4;
    ++v65;
    a3 += v8;
    v67 -= v8;
    a2 += v7;
    v68 -= v7;
    unsigned int v23 = -1;
  }
}

uint64_t W8_sample_ARGB32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 72);
  uint64_t v72 = *(void *)(result + 80);
  uint64_t v73 = *(void *)(result + 88);
  uint64_t v7 = *(void *)(result + 112);
  uint64_t v8 = *(void *)(result + 120);
  uint64_t v9 = *(void *)(result + 152) - 4;
  uint64_t v10 = *(void *)(result + 144) - 1;
  uint64_t v12 = *(void *)(result + 32);
  uint64_t v11 = *(void *)(result + 40);
  int v70 = *(_DWORD *)(result + 188);
  unint64_t v13 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v71 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v73)
      {
        uint64_t v22 = (a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v73;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_34;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v23 = v70 | v21;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(result + 216);
      uint64_t v15 = v6 - *(void *)(result + 224);
      uint64_t v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1) {
        goto LABEL_34;
      }
      if (v16 >= v14) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v16) >> 32;
      }
      unsigned int v23 = v70 | v17;
      uint64_t v24 = v15 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v71) {
      break;
    }
    uint64_t v25 = *(void *)(result + 192);
    uint64_t v26 = v71 - *(void *)(result + 200);
    uint64_t v27 = a2 - v26 + (v25 >> 1);
    if (v27 >= 1)
    {
      if (v27 < v25) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v70;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v7;
    a3 += v8;
    v9 += 4;
    *(unsigned char *)++uint64_t v10 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v72)
  {
    uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v28 = a2;
    goto LABEL_26;
  }
  uint64_t v30 = *(void *)(result + 192);
  uint64_t v31 = *(void *)(result + 200) + v72;
  uint64_t v32 = v31 - a2 + (v30 >> 1);
  if (v32 < 1) {
    goto LABEL_34;
  }
  if (v32 < v30) {
    unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v70;
  }
  uint64_t v28 = v31 - 0x1000000;
  uint64_t v29 = 28;
LABEL_26:
  if (v23 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v33 = v12 + SHIDWORD(v24) * (uint64_t)v4;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v33 + 4 * v34;
  uint64_t v36 = *(unsigned int **)(result + 32);
  if (v13 >= v35) {
    uint64_t v37 = (unsigned int *)(v33 + 4 * v34);
  }
  else {
    uint64_t v37 = (unsigned int *)v13;
  }
  if (v37 < v36) {
    uint64_t v37 = *(unsigned int **)(result + 32);
  }
  unsigned int v38 = bswap32(*v37);
  if (!v5) {
    goto LABEL_66;
  }
  unsigned int v39 = *(_DWORD *)(v5 + (v29 | v22));
LABEL_37:
  int v40 = v39 & 0xF;
  int v41 = HIBYTE(v39) & 3;
  switch(v40)
  {
    case 1:
      unsigned int v57 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      if (v13 < (unint64_t)v57) {
        unsigned int v57 = (unsigned int *)v13;
      }
      if (v57 < v36) {
        unsigned int v57 = v36;
      }
      int v58 = interpolate_8888_21358[v41];
      char v59 = v41 + 1;
      unsigned int v56 = v38 - ((v58 & v38) >> v59);
      unsigned int v60 = (bswap32(*v57) & v58) >> v59;
LABEL_65:
      unsigned int v38 = v56 + v60;
      break;
    case 2:
      unsigned int v61 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v39) << 56) >> 54));
      if (v13 < (unint64_t)v61) {
        unsigned int v61 = (unsigned int *)v13;
      }
      if (v61 < v36) {
        unsigned int v61 = v36;
      }
      unsigned int v52 = bswap32(*v61);
      int v62 = (v39 >> 28) & 3;
      int v54 = interpolate_8888_21358[v62];
      char v55 = v62 + 1;
      unsigned int v56 = v38 - ((v54 & v38) >> v55);
LABEL_64:
      unsigned int v60 = (v52 & v54) >> v55;
      goto LABEL_65;
    case 3:
      int64_t v42 = (unint64_t)HIWORD(v39) << 56;
      unsigned int v43 = (unsigned int *)(v35 + (v42 >> 54));
      if (v13 < (unint64_t)v43) {
        unsigned int v43 = (unsigned int *)v13;
      }
      if (v43 < v36) {
        unsigned int v43 = v36;
      }
      unsigned int v44 = bswap32(*v43);
      unint64_t v45 = v35 + SBYTE1(v39) * (uint64_t)v4;
      if (v13 >= v45) {
        int64_t v46 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      }
      else {
        int64_t v46 = (unsigned int *)v13;
      }
      if (v46 < v36) {
        int64_t v46 = v36;
      }
      unsigned int v47 = bswap32(*v46);
      unint64_t v48 = (unsigned int *)(v45 + (v42 >> 54));
      if (v13 < (unint64_t)v48) {
        unint64_t v48 = (unsigned int *)v13;
      }
      if (v48 < v36) {
        unint64_t v48 = v36;
      }
      int v49 = interpolate_8888_21358[v41];
      char v50 = v41 + 1;
      unsigned int v51 = v38 - ((v49 & v38) >> v50) + ((v49 & v47) >> v50);
      unsigned int v52 = v44 - ((v49 & v44) >> v50) + ((bswap32(*v48) & v49) >> v50);
      int v53 = (v39 >> 28) & 3;
      int v54 = interpolate_8888_21358[v53];
      char v55 = v53 + 1;
      unsigned int v56 = v51 - ((v51 & v54) >> v55);
      goto LABEL_64;
  }
LABEL_66:
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  a3 += v8;
  uint64_t v65 = v73 - a3;
  a2 += v7;
  uint64_t v66 = v72 - a2;
  while (1)
  {
    unsigned int v67 = v38 & 0xFF000000;
    if (!v11) {
      unsigned int v67 = -16777216;
    }
    *(_DWORD *)(v9 + 4 + 4 * v63) = v67 | ((((unsigned __int16)(v38 & 0xFF00) >> 6)
                                          + v38
                                          + ((v38 >> 15) & 0x1FE)
                                          + ((unsigned __int16)(v38 & 0xFF00) >> 8)) >> 3);
    *(unsigned char *)(v10 + 1 + v63) = v23 >> 22;
    if (a4 - 1 == v63) {
      return result;
    }
    if (((v65 | v66 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      uint64_t v9 = v9 - v64 + 4;
      v10 += v63 + 1;
      a4 += ~v63;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v68 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v35 = v68 + 4 * (a2 >> 32);
    uint64_t v36 = *(unsigned int **)(result + 32);
    if (v13 >= v35) {
      unsigned int v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    }
    else {
      unsigned int v69 = (unsigned int *)v13;
    }
    if (v69 < v36) {
      unsigned int v69 = *(unsigned int **)(result + 32);
    }
    unsigned int v38 = bswap32(*v69);
    if (v5)
    {
      unsigned int v39 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v39 & 0xF) != 0)
      {
        uint64_t v9 = v9 - v64 + 4;
        v10 += v63 + 1;
        a4 += ~v63;
        unsigned int v23 = -1;
        goto LABEL_37;
      }
    }
    v64 -= 4;
    ++v63;
    a3 += v8;
    v65 -= v8;
    a2 += v7;
    v66 -= v7;
    unsigned int v23 = -1;
  }
}

uint64_t W8_sample_rgba32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 72);
  uint64_t v7 = *(void *)(result + 88);
  uint64_t v74 = *(void *)(result + 80);
  uint64_t v8 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  int v72 = *(_DWORD *)(result + 188);
  uint64_t v10 = *(void *)(result + 152) - 4;
  uint64_t v11 = *(void *)(result + 144) - 1;
  uint64_t v12 = *(void *)(result + 32);
  if (*(void *)(result + 40)) {
    int v13 = 0;
  }
  else {
    int v13 = 255;
  }
  unint64_t v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v73 = *(void *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        uint64_t v23 = (a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v7;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1) {
          goto LABEL_37;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        unsigned int v24 = v72 | v22;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v6 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1) {
        goto LABEL_37;
      }
      if (v17 >= v15) {
        LODWORD(v18) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      unsigned int v24 = v72 | v18;
      uint64_t v25 = v16 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v73) {
      break;
    }
    uint64_t v26 = *(void *)(result + 192);
    uint64_t v27 = v73 - *(void *)(result + 200);
    uint64_t v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v72;
      }
      uint64_t v29 = v27 + 0x1000000;
      uint64_t v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(unsigned char *)++uint64_t v11 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v74)
  {
    uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v29 = a2;
    goto LABEL_29;
  }
  uint64_t v31 = *(void *)(result + 192);
  uint64_t v32 = *(void *)(result + 200) + v74;
  uint64_t v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1) {
    goto LABEL_37;
  }
  if (v33 < v31) {
    unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v72;
  }
  uint64_t v29 = v32 - 0x1000000;
  uint64_t v30 = 28;
LABEL_29:
  if (v24 < 0x400000) {
    goto LABEL_37;
  }
  uint64_t v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  uint64_t v35 = v29 >> 32;
  unint64_t v36 = v34 + 4 * v35;
  uint64_t v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36) {
    unsigned int v38 = (unsigned int *)(v34 + 4 * v35);
  }
  else {
    unsigned int v38 = (unsigned int *)v14;
  }
  if (v38 < v37) {
    unsigned int v38 = *(unsigned int **)(result + 32);
  }
  unsigned int v39 = *v38;
  if (!v5) {
    goto LABEL_69;
  }
  unsigned int v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  int v41 = v40 & 0xF;
  int v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      char v59 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v59) {
        char v59 = (unsigned int *)v14;
      }
      if (v59 < v37) {
        char v59 = v37;
      }
      unsigned int v60 = interpolate_8888_21358[v42];
      char v61 = v42 + 1;
      unsigned int v57 = v39 - ((v60 & v39) >> v61);
      unsigned int v62 = (v60 & *v59) >> v61;
LABEL_68:
      unsigned int v39 = v57 + v62;
      break;
    case 2:
      uint64_t v63 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v63) {
        uint64_t v63 = (unsigned int *)v14;
      }
      if (v63 < v37) {
        uint64_t v63 = v37;
      }
      int v64 = (v40 >> 28) & 3;
      int v65 = interpolate_8888_21358[v64];
      char v56 = v64 + 1;
      unsigned int v57 = v39 - ((v65 & v39) >> v56);
      unsigned int v58 = v65 & *v63;
LABEL_67:
      unsigned int v62 = v58 >> v56;
      goto LABEL_68;
    case 3:
      int64_t v43 = (unint64_t)HIWORD(v40) << 56;
      unsigned int v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44) {
        unsigned int v44 = (unsigned int *)v14;
      }
      if (v44 < v37) {
        unsigned int v44 = v37;
      }
      unsigned int v45 = *v44;
      unint64_t v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46) {
        unsigned int v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      }
      else {
        unsigned int v47 = (unsigned int *)v14;
      }
      if (v47 < v37) {
        unsigned int v47 = v37;
      }
      unsigned int v48 = *v47;
      int v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49) {
        int v49 = (unsigned int *)v14;
      }
      if (v49 < v37) {
        int v49 = v37;
      }
      unsigned int v50 = interpolate_8888_21358[v42];
      char v51 = v42 + 1;
      unsigned int v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      unsigned int v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      int v54 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      char v56 = v54 + 1;
      unsigned int v57 = v52 - ((v52 & v55) >> v56);
      unsigned int v58 = v53 & v55;
      goto LABEL_67;
  }
LABEL_69:
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  a3 += v9;
  uint64_t v68 = v7 - a3;
  a2 += v8;
  uint64_t v69 = v74 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v66) = ((((v39 >> 23) & 0x1FE)
                                     + BYTE1(v39)
                                     + (((v39 >> 8) & 0xFF00) >> 6)
                                     + (((v39 >> 8) & 0xFF00) >> 8)) >> 3) | ((v39 | v13) << 24);
    *(unsigned char *)(v11 + 1 + v66) = v24 >> 22;
    if (a4 - 1 == v66) {
      return result;
    }
    if (((v68 | v69 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      uint64_t v10 = v10 - v67 + 4;
      v11 += v66 + 1;
      a4 += ~v66;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v36 = v70 + 4 * (a2 >> 32);
    uint64_t v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36) {
      uint64_t v71 = (unsigned int *)(v70 + 4 * (a2 >> 32));
    }
    else {
      uint64_t v71 = (unsigned int *)v14;
    }
    if (v71 < v37) {
      uint64_t v71 = *(unsigned int **)(result + 32);
    }
    unsigned int v39 = *v71;
    if (v5)
    {
      unsigned int v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        uint64_t v10 = v10 - v67 + 4;
        v11 += v66 + 1;
        a4 += ~v66;
        unsigned int v24 = -1;
        goto LABEL_40;
      }
    }
    v67 -= 4;
    ++v66;
    a3 += v9;
    v68 -= v9;
    a2 += v8;
    v69 -= v8;
    unsigned int v24 = -1;
  }
}

uint64_t W8_sample_RGBA32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 72);
  uint64_t v7 = *(void *)(result + 88);
  uint64_t v72 = *(void *)(result + 80);
  uint64_t v8 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  int v70 = *(_DWORD *)(result + 188);
  uint64_t v10 = *(void *)(result + 152) - 4;
  uint64_t v11 = *(void *)(result + 144) - 1;
  uint64_t v12 = *(void *)(result + 32);
  if (*(void *)(result + 40)) {
    int v13 = 0;
  }
  else {
    int v13 = 255;
  }
  unint64_t v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v71 = *(void *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        uint64_t v23 = (a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v7;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1) {
          goto LABEL_37;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        unsigned int v24 = v70 | v22;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v6 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1) {
        goto LABEL_37;
      }
      if (v17 >= v15) {
        LODWORD(v18) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      unsigned int v24 = v70 | v18;
      uint64_t v25 = v16 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v71) {
      break;
    }
    uint64_t v26 = *(void *)(result + 192);
    uint64_t v27 = v71 - *(void *)(result + 200);
    uint64_t v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v70;
      }
      uint64_t v29 = v27 + 0x1000000;
      uint64_t v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(unsigned char *)++uint64_t v11 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v72)
  {
    uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v29 = a2;
    goto LABEL_29;
  }
  uint64_t v31 = *(void *)(result + 192);
  uint64_t v32 = *(void *)(result + 200) + v72;
  uint64_t v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1) {
    goto LABEL_37;
  }
  if (v33 < v31) {
    unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v70;
  }
  uint64_t v29 = v32 - 0x1000000;
  uint64_t v30 = 28;
LABEL_29:
  if (v24 < 0x400000) {
    goto LABEL_37;
  }
  uint64_t v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  uint64_t v35 = v29 >> 32;
  unint64_t v36 = v34 + 4 * v35;
  uint64_t v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36) {
    unsigned int v38 = (unsigned int *)(v34 + 4 * v35);
  }
  else {
    unsigned int v38 = (unsigned int *)v14;
  }
  if (v38 < v37) {
    unsigned int v38 = *(unsigned int **)(result + 32);
  }
  unsigned int v39 = bswap32(*v38);
  if (!v5) {
    goto LABEL_69;
  }
  unsigned int v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  int v41 = v40 & 0xF;
  int v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      unsigned int v58 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v58) {
        unsigned int v58 = (unsigned int *)v14;
      }
      if (v58 < v37) {
        unsigned int v58 = v37;
      }
      int v59 = interpolate_8888_21358[v42];
      char v60 = v42 + 1;
      unsigned int v57 = v39 - ((v59 & v39) >> v60);
      unsigned int v61 = (bswap32(*v58) & v59) >> v60;
LABEL_68:
      unsigned int v39 = v57 + v61;
      break;
    case 2:
      unsigned int v62 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v62) {
        unsigned int v62 = (unsigned int *)v14;
      }
      if (v62 < v37) {
        unsigned int v62 = v37;
      }
      unsigned int v53 = bswap32(*v62);
      int v63 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v63];
      char v56 = v63 + 1;
      unsigned int v57 = v39 - ((v55 & v39) >> v56);
LABEL_67:
      unsigned int v61 = (v53 & v55) >> v56;
      goto LABEL_68;
    case 3:
      int64_t v43 = (unint64_t)HIWORD(v40) << 56;
      unsigned int v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44) {
        unsigned int v44 = (unsigned int *)v14;
      }
      if (v44 < v37) {
        unsigned int v44 = v37;
      }
      unsigned int v45 = bswap32(*v44);
      unint64_t v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46) {
        unsigned int v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      }
      else {
        unsigned int v47 = (unsigned int *)v14;
      }
      if (v47 < v37) {
        unsigned int v47 = v37;
      }
      unsigned int v48 = bswap32(*v47);
      int v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49) {
        int v49 = (unsigned int *)v14;
      }
      if (v49 < v37) {
        int v49 = v37;
      }
      int v50 = interpolate_8888_21358[v42];
      char v51 = v42 + 1;
      unsigned int v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      unsigned int v53 = v45 - ((v50 & v45) >> v51) + ((bswap32(*v49) & v50) >> v51);
      int v54 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      char v56 = v54 + 1;
      unsigned int v57 = v52 - ((v52 & v55) >> v56);
      goto LABEL_67;
  }
LABEL_69:
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  a3 += v9;
  uint64_t v66 = v7 - a3;
  a2 += v8;
  uint64_t v67 = v72 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v64) = ((((v39 >> 23) & 0x1FE)
                                     + BYTE1(v39)
                                     + (((v39 >> 8) & 0xFF00) >> 6)
                                     + (((v39 >> 8) & 0xFF00) >> 8)) >> 3) | ((v39 | v13) << 24);
    *(unsigned char *)(v11 + 1 + v64) = v24 >> 22;
    if (a4 - 1 == v64) {
      return result;
    }
    if (((v66 | v67 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      uint64_t v10 = v10 - v65 + 4;
      v11 += v64 + 1;
      a4 += ~v64;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v68 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v36 = v68 + 4 * (a2 >> 32);
    uint64_t v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36) {
      uint64_t v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    }
    else {
      uint64_t v69 = (unsigned int *)v14;
    }
    if (v69 < v37) {
      uint64_t v69 = *(unsigned int **)(result + 32);
    }
    unsigned int v39 = bswap32(*v69);
    if (v5)
    {
      unsigned int v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        uint64_t v10 = v10 - v65 + 4;
        v11 += v64 + 1;
        a4 += ~v64;
        unsigned int v24 = -1;
        goto LABEL_40;
      }
    }
    v65 -= 4;
    ++v64;
    a3 += v9;
    v66 -= v9;
    a2 += v8;
    v67 -= v8;
    unsigned int v24 = -1;
  }
}

uint64_t W8_sample_RGB24(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  int v5 = *(_DWORD *)(result + 24);
  uint64_t v6 = *(void *)(result + 176);
  uint64_t v7 = *(void *)(result + 72);
  uint64_t v8 = *(void *)(result + 80);
  uint64_t v9 = *(void *)(result + 88);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v11 = *(void *)(result + 120);
  uint64_t v12 = *(void *)(result + 152) - 4;
  uint64_t v13 = *(void *)(result + 144) - 1;
  int v73 = *(_DWORD *)(result + 188);
  unint64_t v14 = v4 + (3 * *(_DWORD *)(result + 256)) + ((*(_DWORD *)(result + 260) - 1) * v5) - 3;
  uint64_t v74 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v9)
      {
        uint64_t v24 = (a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        uint64_t v27 = v8;
        uint64_t v18 = v74;
        goto LABEL_16;
      }
      uint64_t v20 = *(void *)(result + 216);
      uint64_t v21 = *(void *)(result + 224) + v9;
      uint64_t v22 = v21 - a3 + (v20 >> 1);
      uint64_t v18 = v74;
      if (v22 < 1) {
        goto LABEL_35;
      }
      if (v22 >= v20) {
        LODWORD(v23) = 0x3FFFFFFF;
      }
      else {
        unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
      }
      unsigned int v25 = v73 | v23;
      uint64_t v26 = v21 - 0x1000000;
      uint64_t v24 = 448;
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v7 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      uint64_t v18 = v74;
      if (v17 < 1) {
        goto LABEL_35;
      }
      if (v17 >= v15) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      unsigned int v25 = v73 | v19;
      uint64_t v26 = v16 + 0x1000000;
      uint64_t v24 = 512;
    }
    uint64_t v27 = v8;
LABEL_16:
    if (a2 >= v18) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v18 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v73;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_27;
    }
LABEL_35:
    --a4;
    a2 += v10;
    a3 += v11;
    v12 += 4;
    *(unsigned char *)++uint64_t v13 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v27)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_27;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v27;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_35;
  }
  if (v35 < v33) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v73;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_27:
  if (v25 < 0x400000) {
    goto LABEL_35;
  }
  uint64_t v36 = v4 + SHIDWORD(v26) * (uint64_t)v5;
  uint64_t v37 = 3 * (v31 >> 32);
  uint64_t v38 = v36 + v37;
  unsigned int v39 = *(unsigned __int8 **)(result + 32);
  if (v14 >= v36 + v37) {
    unsigned int v40 = (unsigned __int8 *)(v36 + v37);
  }
  else {
    unsigned int v40 = (unsigned __int8 *)v14;
  }
  if (v40 < v39) {
    unsigned int v40 = *(unsigned __int8 **)(result + 32);
  }
  unsigned int v41 = (v40[1] << 16) | (*v40 << 24) | (v40[2] << 8) | 0xFF;
  if (!v6) {
    goto LABEL_67;
  }
  unsigned int v42 = *(_DWORD *)(v6 + (v32 | v24));
LABEL_38:
  int v43 = v42 & 0xF;
  int v44 = HIBYTE(v42) & 3;
  switch(v43)
  {
    case 1:
      char v60 = (unsigned __int8 *)(v38 + SBYTE1(v42) * (uint64_t)v5);
      if (v14 < (unint64_t)v60) {
        char v60 = (unsigned __int8 *)v14;
      }
      if (v60 < v39) {
        char v60 = v39;
      }
      unsigned int v61 = interpolate_8888_21358[v44];
      char v62 = v44 + 1;
      unsigned int v59 = v41 - ((v61 & v41) >> v62);
      unsigned int v63 = (((v60[1] << 16) | (*v60 << 24) | (v60[2] << 8) | 0xFF) & v61) >> v62;
LABEL_66:
      unsigned int v41 = v59 + v63;
      break;
    case 2:
      uint64_t v64 = (unsigned __int8 *)(v38 + 3 * SBYTE2(v42));
      if (v14 < (unint64_t)v64) {
        uint64_t v64 = (unsigned __int8 *)v14;
      }
      if (v64 < v39) {
        uint64_t v64 = v39;
      }
      int v55 = (v64[1] << 16) | (*v64 << 24) | (v64[2] << 8) | 0xFF;
      int v65 = (v42 >> 28) & 3;
      unsigned int v57 = interpolate_8888_21358[v65];
      char v58 = v65 + 1;
      unsigned int v59 = v41 - ((v57 & v41) >> v58);
LABEL_65:
      unsigned int v63 = (v55 & v57) >> v58;
      goto LABEL_66;
    case 3:
      uint64_t v45 = 3 * SBYTE2(v42);
      unint64_t v46 = (unsigned __int8 *)(v38 + v45);
      if (v14 < v38 + v45) {
        unint64_t v46 = (unsigned __int8 *)v14;
      }
      if (v46 < v39) {
        unint64_t v46 = v39;
      }
      int v47 = (v46[1] << 16) | (*v46 << 24) | (v46[2] << 8) | 0xFF;
      unint64_t v48 = v38 + SBYTE1(v42) * (uint64_t)v5;
      if (v14 >= v48) {
        int v49 = (unsigned __int8 *)(v38 + SBYTE1(v42) * (uint64_t)v5);
      }
      else {
        int v49 = (unsigned __int8 *)v14;
      }
      if (v49 < v39) {
        int v49 = v39;
      }
      int v50 = (v49[1] << 16) | (*v49 << 24) | (v49[2] << 8) | 0xFF;
      char v51 = (unsigned __int8 *)(v48 + v45);
      if (v14 < (unint64_t)v51) {
        char v51 = (unsigned __int8 *)v14;
      }
      if (v51 < v39) {
        char v51 = v39;
      }
      unsigned int v52 = interpolate_8888_21358[v44];
      char v53 = v44 + 1;
      unsigned int v54 = v41 - ((v52 & v41) >> v53) + ((v50 & v52) >> v53);
      int v55 = v47 - ((v52 & v47) >> v53) + ((((v51[1] << 16) | (*v51 << 24) | (v51[2] << 8) | 0xFF) & v52) >> v53);
      int v56 = (v42 >> 28) & 3;
      unsigned int v57 = interpolate_8888_21358[v56];
      char v58 = v56 + 1;
      unsigned int v59 = v54 - ((v54 & v57) >> v58);
      goto LABEL_65;
  }
LABEL_67:
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  a3 += v11;
  uint64_t v68 = v9 - a3;
  a2 += v10;
  uint64_t v69 = v8 - a2;
  while (1)
  {
    *(_DWORD *)(v12 + 4 + 4 * v67) = ((((v41 >> 23) & 0x1FE)
                                     + BYTE1(v41)
                                     + (((v41 >> 8) & 0xFF00) >> 6)
                                     + (((v41 >> 8) & 0xFF00) >> 8)) >> 3) | (v41 << 24);
    *(unsigned char *)(v13 + 1 + v67) = v25 >> 22;
    if (a4 - 1 == v67) {
      return result;
    }
    if (((v68 | v69 | (a3 - v7) | (a2 - v74)) & 0x8000000000000000) != 0)
    {
      v13 += v67 + 1;
      uint64_t v12 = v12 - v66 + 4;
      a4 += ~v67;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v70 = v4 + SHIDWORD(a3) * (uint64_t)v5;
    uint64_t v71 = 3 * (a2 >> 32);
    uint64_t v38 = v70 + v71;
    unsigned int v39 = *(unsigned __int8 **)(result + 32);
    if (v14 >= v70 + v71) {
      uint64_t v72 = (unsigned __int8 *)(v70 + v71);
    }
    else {
      uint64_t v72 = (unsigned __int8 *)v14;
    }
    if (v72 < v39) {
      uint64_t v72 = *(unsigned __int8 **)(result + 32);
    }
    unsigned int v41 = (v72[1] << 16) | (*v72 << 24) | (v72[2] << 8) | 0xFF;
    if (v6)
    {
      unsigned int v42 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v42 & 0xF) != 0)
      {
        v13 += v67 + 1;
        uint64_t v12 = v12 - v66 + 4;
        a4 += ~v67;
        unsigned int v25 = -1;
        goto LABEL_38;
      }
    }
    ++v67;
    v66 -= 4;
    a3 += v11;
    v68 -= v11;
    a2 += v10;
    v69 -= v10;
    unsigned int v25 = -1;
  }
}

uint64_t W8_sample_rgb555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v87 = *(void *)(result + 80);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v91 = *(void *)(result + 152) - 4;
  uint64_t v89 = *(void *)(result + 88);
  uint64_t v90 = *(void *)(result + 144) - 1;
  if (v5) {
    int v11 = 0;
  }
  else {
    int v11 = -16777216;
  }
  int v12 = *(_DWORD *)(result + 260) - 1;
  uint64_t v13 = *(unsigned int *)(result + 256);
  int v85 = *(_DWORD *)(result + 188);
  unint64_t v14 = (unsigned __int8 *)(v5 + (v13 - 1) + (v12 * v7));
  unint64_t v15 = v4 + (v12 * v6) + 2 * v13 - 4;
  uint64_t v88 = *(void *)(result + 72);
  uint64_t v86 = *(void *)(result + 64);
  while (1)
  {
LABEL_5:
    if (a3 >= v88)
    {
      if (a3 <= v89)
      {
        uint64_t v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        uint64_t v26 = a3;
        uint64_t v27 = v86;
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v89;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1) {
          goto LABEL_43;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        uint64_t v27 = v86;
        unsigned int v25 = v85 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v88 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1) {
        goto LABEL_43;
      }
      if (v18 >= v16) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      uint64_t v27 = v86;
      unsigned int v25 = v85 | v19;
      uint64_t v26 = v17 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v27) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v27 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v85;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v10;
    a3 += v9;
    *(unsigned char *)++uint64_t v90 = 0;
    v91 += 4;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v87)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_29;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v87;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_43;
  }
  if (v35 < v33) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v85;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_29:
  if (v25 < 0x400000) {
    goto LABEL_43;
  }
  uint64_t v36 = v26 >> 32;
  uint64_t v37 = v31 >> 32;
  uint64_t v38 = v4 + (int)v36 * (uint64_t)v6;
  unint64_t v39 = v38 + 2 * v37;
  unsigned int v40 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v39) {
    unsigned int v41 = (unsigned __int16 *)(v38 + 2 * v37);
  }
  else {
    unsigned int v41 = (unsigned __int16 *)v15;
  }
  if (v41 < v40) {
    unsigned int v41 = *(unsigned __int16 **)(result + 32);
  }
  unsigned int v42 = *v41;
  if (!v5)
  {
    unint64_t v43 = 0;
    if (!v8) {
      goto LABEL_103;
    }
LABEL_46:
    unsigned int v46 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_48:
    int v47 = v46 & 0xF;
    int v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      int v65 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
      if (v15 < (unint64_t)v65) {
        int v65 = (unsigned __int16 *)v15;
      }
      if (v65 < v40) {
        int v65 = v40;
      }
      unsigned int v66 = *v65;
      if (v5)
      {
        uint64_t v67 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
        if (v14 < v67) {
          uint64_t v67 = v14;
        }
        if ((unint64_t)v67 < *(void *)(result + 40)) {
          uint64_t v67 = *(unsigned __int8 **)(result + 40);
        }
        v66 |= *v67 << 24;
      }
      int v68 = interpolate_8555_21359[v48];
      char v69 = v48 + 1;
      unsigned int v70 = v42 - ((v68 & v42) >> v69);
      unsigned int v71 = (v68 & v66) >> v69;
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          int64_t v49 = (unint64_t)HIWORD(v46) << 56;
          int v50 = (unsigned __int16 *)(v39 + (v49 >> 55));
          if (v15 < (unint64_t)v50) {
            int v50 = (unsigned __int16 *)v15;
          }
          if (v50 < v40) {
            int v50 = v40;
          }
          unsigned int v51 = *v50;
          unint64_t v52 = v39 + SBYTE1(v46) * (uint64_t)v6;
          if (v15 >= v52) {
            char v53 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
          }
          else {
            char v53 = (unsigned __int16 *)v15;
          }
          if (v53 < v40) {
            char v53 = v40;
          }
          unsigned int v54 = *v53;
          int v55 = (unsigned __int16 *)(v52 + (v49 >> 55));
          if (v15 < (unint64_t)v55) {
            int v55 = (unsigned __int16 *)v15;
          }
          if (v55 < v40) {
            int v55 = v40;
          }
          unsigned int v56 = *v55;
          if (v5)
          {
            unsigned int v57 = (unsigned __int8 *)(v43 + SBYTE2(v46));
            unint64_t v58 = *(void *)(result + 40);
            if (v14 < v57) {
              unsigned int v57 = v14;
            }
            if ((unint64_t)v57 < v58) {
              unsigned int v57 = *(unsigned __int8 **)(result + 40);
            }
            v51 |= *v57 << 24;
            unint64_t v59 = v43 + SBYTE1(v46) * (uint64_t)v7;
            if ((unint64_t)v14 >= v59) {
              char v60 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
            }
            else {
              char v60 = v14;
            }
            if ((unint64_t)v60 < v58) {
              char v60 = *(unsigned __int8 **)(result + 40);
            }
            v54 |= *v60 << 24;
            unsigned int v61 = (unsigned __int8 *)(v59 + SBYTE2(v46));
            if (v14 < v61) {
              unsigned int v61 = v14;
            }
            if ((unint64_t)v61 < v58) {
              unsigned int v61 = *(unsigned __int8 **)(result + 40);
            }
            v56 |= *v61 << 24;
          }
          int v62 = interpolate_8555_21359[v48];
          char v63 = v48 + 1;
          unsigned int v64 = v42 - ((v62 & v42) >> v63) + ((v62 & v54) >> v63);
          unsigned int v42 = v64
              - ((v64 & interpolate_8555_21359[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1))
              + (((v51 - ((v62 & v51) >> v63) + ((v62 & v56) >> v63)) & interpolate_8555_21359[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      uint64_t v72 = (unsigned __int16 *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 55));
      if (v15 < (unint64_t)v72) {
        uint64_t v72 = (unsigned __int16 *)v15;
      }
      if (v72 < v40) {
        uint64_t v72 = v40;
      }
      unsigned int v73 = *v72;
      if (v5)
      {
        uint64_t v74 = (unsigned __int8 *)(v43 + SBYTE2(v46));
        if (v14 < v74) {
          uint64_t v74 = v14;
        }
        if ((unint64_t)v74 < *(void *)(result + 40)) {
          uint64_t v74 = *(unsigned __int8 **)(result + 40);
        }
        v73 |= *v74 << 24;
      }
      int v75 = (v46 >> 28) & 3;
      int v76 = interpolate_8555_21359[v75];
      LOBYTE(v75) = v75 + 1;
      unsigned int v70 = v42 - ((v76 & v42) >> v75);
      unsigned int v71 = (v76 & v73) >> v75;
    }
    unsigned int v42 = v70 + v71;
    goto LABEL_103;
  }
  unint64_t v43 = v5 + (int)v36 * (uint64_t)v7 + v37;
  int v44 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v14 >= v43) {
    uint64_t v45 = (unsigned __int8 *)v43;
  }
  else {
    uint64_t v45 = v14;
  }
  if (v45 >= v44) {
    int v44 = v45;
  }
  v42 |= *v44 << 24;
  if (v8) {
    goto LABEL_46;
  }
LABEL_103:
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  a3 += v9;
  uint64_t v79 = v89 - a3;
  a2 += v10;
  uint64_t v80 = v87 - a2;
  while (1)
  {
    unsigned int v81 = (v42 & 0x1F)
        + ((unsigned __int16)(v42 & 0x3E0) >> 3)
        + ((v42 >> 9) & 0x3E)
        + ((unsigned __int16)(v42 & 0x3E0) >> 5);
    *(_DWORD *)(v91 + 4 + 4 * v77) = v81 & 0xF8 | (v11 | (v42 >> 5) | v42) & 0xFF000000 | (v81 >> 5);
    *(unsigned char *)(v90 + 1 + v77) = v25 >> 22;
    if (a4 - 1 == v77) {
      return result;
    }
    if ((v79 | v80 | (a3 - v88) | (a2 - v86)) < 0)
    {
      v90 += v77 + 1;
      uint64_t v91 = v91 - v78 + 4;
      a4 += ~v77;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    unint64_t v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32);
    unsigned int v40 = *(unsigned __int16 **)(result + 32);
    if (v15 >= v39) {
      unsigned int v82 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32));
    }
    else {
      unsigned int v82 = (unsigned __int16 *)v15;
    }
    if (v82 < v40) {
      unsigned int v82 = *(unsigned __int16 **)(result + 32);
    }
    unsigned int v42 = *v82;
    if (v5)
    {
      unint64_t v43 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      uint64_t v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v14 >= v43) {
        unint64_t v84 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      }
      else {
        unint64_t v84 = (unint64_t)v14;
      }
      if (v84 >= (unint64_t)v83) {
        uint64_t v83 = (unsigned __int8 *)v84;
      }
      v42 |= *v83 << 24;
    }
    if (v8)
    {
      unsigned int v46 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        v90 += v77 + 1;
        uint64_t v91 = v91 - v78 + 4;
        a4 += ~v77;
        unsigned int v25 = -1;
        goto LABEL_48;
      }
    }
    v78 -= 4;
    ++v77;
    a3 += v9;
    v79 -= v9;
    a2 += v10;
    v80 -= v10;
    unsigned int v25 = -1;
  }
}

uint64_t W8_sample_RGB555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v87 = *(void *)(result + 80);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v91 = *(void *)(result + 152) - 4;
  uint64_t v89 = *(void *)(result + 88);
  uint64_t v90 = *(void *)(result + 144) - 1;
  if (v5) {
    int v11 = 0;
  }
  else {
    int v11 = -16777216;
  }
  int v12 = *(_DWORD *)(result + 260) - 1;
  uint64_t v13 = *(unsigned int *)(result + 256);
  int v85 = *(_DWORD *)(result + 188);
  unint64_t v14 = (unsigned __int8 *)(v5 + (v13 - 1) + (v12 * v7));
  unint64_t v15 = v4 + (v12 * v6) + 2 * v13 - 4;
  uint64_t v88 = *(void *)(result + 72);
  uint64_t v86 = *(void *)(result + 64);
  while (1)
  {
LABEL_5:
    if (a3 >= v88)
    {
      if (a3 <= v89)
      {
        uint64_t v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        uint64_t v26 = a3;
        uint64_t v27 = v86;
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v89;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1) {
          goto LABEL_43;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        uint64_t v27 = v86;
        unsigned int v25 = v85 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 216);
      uint64_t v17 = v88 - *(void *)(result + 224);
      uint64_t v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1) {
        goto LABEL_43;
      }
      if (v18 >= v16) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v18) >> 32;
      }
      uint64_t v27 = v86;
      unsigned int v25 = v85 | v19;
      uint64_t v26 = v17 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v27) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v27 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v85;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v10;
    a3 += v9;
    *(unsigned char *)++uint64_t v90 = 0;
    v91 += 4;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v87)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_29;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v87;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_43;
  }
  if (v35 < v33) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v85;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_29:
  if (v25 < 0x400000) {
    goto LABEL_43;
  }
  uint64_t v36 = v26 >> 32;
  uint64_t v37 = v31 >> 32;
  uint64_t v38 = v4 + (int)v36 * (uint64_t)v6;
  unint64_t v39 = v38 + 2 * v37;
  unsigned int v40 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v39) {
    unsigned int v41 = (unsigned __int16 *)(v38 + 2 * v37);
  }
  else {
    unsigned int v41 = (unsigned __int16 *)v15;
  }
  if (v41 < v40) {
    unsigned int v41 = *(unsigned __int16 **)(result + 32);
  }
  unsigned int v42 = bswap32(*v41) >> 16;
  if (!v5)
  {
    unint64_t v43 = 0;
    if (!v8) {
      goto LABEL_103;
    }
LABEL_46:
    unsigned int v46 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_48:
    int v47 = v46 & 0xF;
    int v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      int v65 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
      if (v15 < (unint64_t)v65) {
        int v65 = (unsigned __int16 *)v15;
      }
      if (v65 < v40) {
        int v65 = v40;
      }
      unsigned int v66 = bswap32(*v65) >> 16;
      if (v5)
      {
        uint64_t v67 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
        if (v14 < v67) {
          uint64_t v67 = v14;
        }
        if ((unint64_t)v67 < *(void *)(result + 40)) {
          uint64_t v67 = *(unsigned __int8 **)(result + 40);
        }
        v66 |= *v67 << 24;
      }
      int v68 = interpolate_8555_21359[v48];
      char v69 = v48 + 1;
      unsigned int v70 = v42 - ((v68 & v42) >> v69);
      unsigned int v71 = (v68 & v66) >> v69;
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          int64_t v49 = (unint64_t)HIWORD(v46) << 56;
          int v50 = (unsigned __int16 *)(v39 + (v49 >> 55));
          if (v15 < (unint64_t)v50) {
            int v50 = (unsigned __int16 *)v15;
          }
          if (v50 < v40) {
            int v50 = v40;
          }
          unsigned int v51 = bswap32(*v50) >> 16;
          unint64_t v52 = v39 + SBYTE1(v46) * (uint64_t)v6;
          if (v15 >= v52) {
            char v53 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
          }
          else {
            char v53 = (unsigned __int16 *)v15;
          }
          if (v53 < v40) {
            char v53 = v40;
          }
          unsigned int v54 = bswap32(*v53) >> 16;
          int v55 = (unsigned __int16 *)(v52 + (v49 >> 55));
          if (v15 < (unint64_t)v55) {
            int v55 = (unsigned __int16 *)v15;
          }
          if (v55 < v40) {
            int v55 = v40;
          }
          unsigned int v56 = bswap32(*v55) >> 16;
          if (v5)
          {
            unsigned int v57 = (unsigned __int8 *)(v43 + SBYTE2(v46));
            unint64_t v58 = *(void *)(result + 40);
            if (v14 < v57) {
              unsigned int v57 = v14;
            }
            if ((unint64_t)v57 < v58) {
              unsigned int v57 = *(unsigned __int8 **)(result + 40);
            }
            v51 |= *v57 << 24;
            unint64_t v59 = v43 + SBYTE1(v46) * (uint64_t)v7;
            if ((unint64_t)v14 >= v59) {
              char v60 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
            }
            else {
              char v60 = v14;
            }
            if ((unint64_t)v60 < v58) {
              char v60 = *(unsigned __int8 **)(result + 40);
            }
            v54 |= *v60 << 24;
            unsigned int v61 = (unsigned __int8 *)(v59 + SBYTE2(v46));
            if (v14 < v61) {
              unsigned int v61 = v14;
            }
            if ((unint64_t)v61 < v58) {
              unsigned int v61 = *(unsigned __int8 **)(result + 40);
            }
            v56 |= *v61 << 24;
          }
          int v62 = interpolate_8555_21359[v48];
          char v63 = v48 + 1;
          unsigned int v64 = v42 - ((v62 & v42) >> v63) + ((v62 & v54) >> v63);
          unsigned int v42 = v64
              - ((v64 & interpolate_8555_21359[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1))
              + (((v51 - ((v62 & v51) >> v63) + ((v62 & v56) >> v63)) & interpolate_8555_21359[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      uint64_t v72 = (unsigned __int16 *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 55));
      if (v15 < (unint64_t)v72) {
        uint64_t v72 = (unsigned __int16 *)v15;
      }
      if (v72 < v40) {
        uint64_t v72 = v40;
      }
      unsigned int v73 = bswap32(*v72) >> 16;
      if (v5)
      {
        uint64_t v74 = (unsigned __int8 *)(v43 + SBYTE2(v46));
        if (v14 < v74) {
          uint64_t v74 = v14;
        }
        if ((unint64_t)v74 < *(void *)(result + 40)) {
          uint64_t v74 = *(unsigned __int8 **)(result + 40);
        }
        v73 |= *v74 << 24;
      }
      int v75 = (v46 >> 28) & 3;
      int v76 = interpolate_8555_21359[v75];
      LOBYTE(v75) = v75 + 1;
      unsigned int v70 = v42 - ((v76 & v42) >> v75);
      unsigned int v71 = (v76 & v73) >> v75;
    }
    unsigned int v42 = v70 + v71;
    goto LABEL_103;
  }
  unint64_t v43 = v5 + (int)v36 * (uint64_t)v7 + v37;
  int v44 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v14 >= v43) {
    uint64_t v45 = (unsigned __int8 *)v43;
  }
  else {
    uint64_t v45 = v14;
  }
  if (v45 >= v44) {
    int v44 = v45;
  }
  v42 |= *v44 << 24;
  if (v8) {
    goto LABEL_46;
  }
LABEL_103:
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  a3 += v9;
  uint64_t v79 = v89 - a3;
  a2 += v10;
  uint64_t v80 = v87 - a2;
  while (1)
  {
    unsigned int v81 = (v42 & 0x1F)
        + ((unsigned __int16)(v42 & 0x3E0) >> 3)
        + ((v42 >> 9) & 0x3E)
        + ((unsigned __int16)(v42 & 0x3E0) >> 5);
    *(_DWORD *)(v91 + 4 + 4 * v77) = v81 & 0xF8 | (v11 | (v42 >> 5) | v42) & 0xFF000000 | (v81 >> 5);
    *(unsigned char *)(v90 + 1 + v77) = v25 >> 22;
    if (a4 - 1 == v77) {
      return result;
    }
    if ((v79 | v80 | (a3 - v88) | (a2 - v86)) < 0)
    {
      v90 += v77 + 1;
      uint64_t v91 = v91 - v78 + 4;
      a4 += ~v77;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    unint64_t v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32);
    unsigned int v40 = *(unsigned __int16 **)(result + 32);
    if (v15 >= v39) {
      unsigned int v82 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32));
    }
    else {
      unsigned int v82 = (unsigned __int16 *)v15;
    }
    if (v82 < v40) {
      unsigned int v82 = *(unsigned __int16 **)(result + 32);
    }
    unsigned int v42 = bswap32(*v82) >> 16;
    if (v5)
    {
      unint64_t v43 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      uint64_t v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v14 >= v43) {
        unint64_t v84 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      }
      else {
        unint64_t v84 = (unint64_t)v14;
      }
      if (v84 >= (unint64_t)v83) {
        uint64_t v83 = (unsigned __int8 *)v84;
      }
      v42 |= *v83 << 24;
    }
    if (v8)
    {
      unsigned int v46 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        v90 += v77 + 1;
        uint64_t v91 = v91 - v78 + 4;
        a4 += ~v77;
        unsigned int v25 = -1;
        goto LABEL_48;
      }
    }
    v78 -= 4;
    ++v77;
    a3 += v9;
    v79 -= v9;
    a2 += v10;
    v80 -= v10;
    unsigned int v25 = -1;
  }
}

uint64_t W8_sample_W8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  int v126 = *(_DWORD *)(result + 28);
  uint64_t v5 = *(void *)(result + 112);
  uint64_t v6 = *(void *)(result + 48);
  uint64_t v7 = *(void *)(result + 56);
  if (v6)
  {
    uint64_t v125 = *(void *)(result + 112);
    if (v5 > v6) {
      uint64_t v125 = v5 % v6;
    }
  }
  else
  {
    uint64_t v125 = 0;
  }
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v10 = *(void *)(result + 40);
  uint64_t v127 = *(void *)(result + 32);
  if (v7)
  {
    uint64_t v124 = *(void *)(result + 120);
    if (v9 > v7) {
      uint64_t v124 = v9 % v7;
    }
  }
  else
  {
    uint64_t v124 = 0;
  }
  uint64_t v120 = *(void *)(result + 80);
  uint64_t v122 = *(void *)(result + 88);
  uint64_t v12 = *(void *)(result + 152) - 4;
  uint64_t v13 = *(void *)(result + 144) - 1;
  if (v10) {
    int v14 = 0;
  }
  else {
    int v14 = -16777216;
  }
  int v15 = *(_DWORD *)(result + 260) - 1;
  uint64_t v16 = *(unsigned int *)(result + 256);
  uint64_t v17 = (unsigned __int8 *)(v10 + (v16 - 1) + (v15 * v126));
  int v119 = *(_DWORD *)(result + 188);
  unint64_t v18 = v127 + v16 + (v15 * v4) - 1;
  uint64_t v121 = *(void *)(result + 64);
  uint64_t v123 = *(void *)(result + 72);
  while (1)
  {
    if (a3 < v123)
    {
      uint64_t v19 = *(void *)(result + 216);
      uint64_t v20 = v123 - *(void *)(result + 224);
      uint64_t v21 = a3 - v20 + (v19 >> 1);
      int v22 = a4;
      if (v21 < 1) {
        goto LABEL_60;
      }
      if (v21 >= v19) {
        LODWORD(v23) = 0x3FFFFFFF;
      }
      else {
        unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
      }
      unsigned int v30 = v119 | v23;
      uint64_t v31 = v20 + 0x1000000;
      uint64_t v28 = a3 - (v20 + 0x1000000);
      uint64_t v29 = 512;
      goto LABEL_24;
    }
    if (a3 <= v122)
    {
      uint64_t v28 = 0;
      uint64_t v29 = ((unint64_t)a3 >> 22) & 0x3C0;
      unsigned int v30 = 0x3FFFFFFF;
      uint64_t v31 = a3;
      int v22 = a4;
LABEL_24:
      uint64_t v32 = v121;
      goto LABEL_27;
    }
    uint64_t v24 = *(void *)(result + 216);
    uint64_t v25 = *(void *)(result + 224) + v122;
    uint64_t v26 = v25 - a3 + (v24 >> 1);
    int v22 = a4;
    if (v26 < 1) {
      goto LABEL_60;
    }
    if (v26 >= v24) {
      LODWORD(v27) = 0x3FFFFFFF;
    }
    else {
      unint64_t v27 = (unint64_t)(*(void *)(result + 232) * v26) >> 32;
    }
    uint64_t v32 = v121;
    unsigned int v30 = v119 | v27;
    uint64_t v31 = v25 - 0x1000000;
    uint64_t v28 = a3 - (v25 - 0x1000000);
    uint64_t v29 = 448;
LABEL_27:
    if (a2 >= v32) {
      break;
    }
    uint64_t v33 = *(void *)(result + 192);
    uint64_t v34 = v32 - *(void *)(result + 200);
    uint64_t v35 = a2 - v34 + (v33 >> 1);
    if (v35 >= 1)
    {
      if (v35 < v33) {
        unsigned int v30 = ((v30 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v119;
      }
      uint64_t v36 = v34 + 0x1000000;
      uint64_t v37 = a2 - (v34 + 0x1000000);
      uint64_t v38 = 32;
      goto LABEL_38;
    }
LABEL_60:
    int v55 = v22 - 1;
    a2 += v5;
    a3 += v9;
    v12 += 4;
    *(unsigned char *)++uint64_t v13 = 0;
LABEL_61:
    a4 = v55;
    if (!v55) {
      return result;
    }
  }
  if (a2 <= v120)
  {
    uint64_t v37 = 0;
    uint64_t v38 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v36 = a2;
    goto LABEL_38;
  }
  uint64_t v39 = *(void *)(result + 192);
  uint64_t v40 = *(void *)(result + 200) + v120;
  uint64_t v41 = v40 - a2 + (v39 >> 1);
  if (v41 < 1) {
    goto LABEL_60;
  }
  if (v41 < v39) {
    unsigned int v30 = ((v30 >> 15) * (((unint64_t)(*(void *)(result + 208) * v41) >> 32) >> 15)) | v119;
  }
  uint64_t v36 = v40 - 0x1000000;
  uint64_t v37 = a2 - (v40 - 0x1000000);
  uint64_t v38 = 28;
LABEL_38:
  if (v30 < 0x400000) {
    goto LABEL_60;
  }
  if (v6)
  {
    uint64_t v42 = (v7 & ((v31 % v7) >> 63)) + v31 % v7;
    uint64_t v43 = (v6 & ((v36 % v6) >> 63)) + v36 % v6;
    if (v42 >= v7) {
      uint64_t v44 = v7;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v31 = v42 - v44;
    if (v43 >= v6) {
      uint64_t v45 = v6;
    }
    else {
      uint64_t v45 = 0;
    }
    uint64_t v36 = v43 - v45;
    v28 += v31;
    v37 += v36;
  }
  uint64_t v46 = v31 >> 32;
  uint64_t v47 = v127 + SHIDWORD(v31) * (uint64_t)v4;
  unint64_t v48 = v47 + (v36 >> 32);
  int64_t v49 = *(unsigned __int8 **)(result + 32);
  if (v18 >= v48) {
    int v50 = (unsigned __int8 *)(v47 + (v36 >> 32));
  }
  else {
    int v50 = (unsigned __int8 *)v18;
  }
  if (v50 < v49) {
    int v50 = *(unsigned __int8 **)(result + 32);
  }
  unsigned int v51 = *v50;
  if (v10)
  {
    unint64_t v52 = v10 + (int)v46 * (uint64_t)v126 + (v36 >> 32);
    char v53 = *(unsigned __int8 **)(result + 40);
    if ((unint64_t)v17 >= v52) {
      unsigned int v54 = (unsigned __int8 *)v52;
    }
    else {
      unsigned int v54 = v17;
    }
    if (v54 >= v53) {
      char v53 = v54;
    }
    v51 |= *v53 << 24;
    if (!v8) {
      goto LABEL_138;
    }
  }
  else
  {
    unint64_t v52 = 0;
    if (!v8) {
      goto LABEL_138;
    }
  }
  unsigned int v56 = *(_DWORD *)(v8 + (v38 | v29));
LABEL_66:
  int v57 = v56 & 0xF;
  uint64_t v58 = v56 >> 8;
  int v59 = HIBYTE(v56) & 3;
  switch(v57)
  {
    case 1:
      LODWORD(v85) = SBYTE1(v56);
      if (v6)
      {
        uint64_t v86 = v58 << 56;
        uint64_t v87 = v28 + (v86 >> 24);
        uint64_t v88 = v7 & (v87 >> 63);
        if (v88 + v87 >= v7) {
          uint64_t v89 = v7;
        }
        else {
          uint64_t v89 = 0;
        }
        uint64_t v85 = (v88 + (v86 >> 24) - v89) >> 32;
      }
      uint64_t v90 = (unsigned __int8 *)(v48 + (int)v85 * (uint64_t)v4);
      if (v18 < (unint64_t)v90) {
        uint64_t v90 = (unsigned __int8 *)v18;
      }
      if (v90 < v49) {
        uint64_t v90 = v49;
      }
      unsigned int v91 = *v90;
      if (v10)
      {
        unint64_t v92 = (unsigned __int8 *)(v52 + (int)v85 * (uint64_t)v126);
        if (v17 < v92) {
          unint64_t v92 = v17;
        }
        if ((unint64_t)v92 < *(void *)(result + 40)) {
          unint64_t v92 = *(unsigned __int8 **)(result + 40);
        }
        v91 |= *v92 << 24;
      }
      unsigned int v51 = v51
          - ((interpolate_8888_21358[v59] & v51) >> (v59 + 1))
          + ((interpolate_8888_21358[v59] & v91) >> (v59 + 1));
      break;
    case 2:
      uint64_t v93 = SBYTE2(v56);
      if (v6)
      {
        int64_t v94 = (unint64_t)HIWORD(v56) << 56;
        uint64_t v95 = v37 + (v94 >> 24);
        uint64_t v96 = v6 & (v95 >> 63);
        if (v96 + v95 >= v6) {
          uint64_t v97 = v6;
        }
        else {
          uint64_t v97 = 0;
        }
        uint64_t v93 = (v96 + (v94 >> 24) - v97) >> 32;
      }
      uint64_t v98 = (unsigned __int8 *)(v48 + v93);
      if (v18 < v48 + v93) {
        uint64_t v98 = (unsigned __int8 *)v18;
      }
      if (v98 < v49) {
        uint64_t v98 = v49;
      }
      unsigned int v99 = *v98;
      if (v10)
      {
        unint64_t v100 = (unsigned __int8 *)(v52 + v93);
        if (v17 < v100) {
          unint64_t v100 = v17;
        }
        if ((unint64_t)v100 < *(void *)(result + 40)) {
          unint64_t v100 = *(unsigned __int8 **)(result + 40);
        }
        v99 |= *v100 << 24;
      }
      unsigned int v51 = v51
          - ((interpolate_8888_21358[(v56 >> 28) & 3] & v51) >> (((v56 >> 28) & 3) + 1))
          + ((interpolate_8888_21358[(v56 >> 28) & 3] & v99) >> (((v56 >> 28) & 3) + 1));
      break;
    case 3:
      int v60 = HIBYTE(v56) & 3;
      unsigned int v118 = v30;
      int v117 = v22;
      LODWORD(v61) = SBYTE1(v56);
      uint64_t v62 = SBYTE2(v56);
      if (v6)
      {
        uint64_t v63 = v58 << 56;
        uint64_t v64 = v28 + (v63 >> 24);
        uint64_t v65 = v37 + ((uint64_t)SBYTE2(v56) << 32);
        uint64_t v66 = v7 & (v64 >> 63);
        uint64_t v67 = v6 & (v65 >> 63);
        uint64_t v68 = v67 + v65;
        if (v66 + v64 >= v7) {
          uint64_t v69 = v7;
        }
        else {
          uint64_t v69 = 0;
        }
        if (v68 >= v6) {
          uint64_t v70 = v6;
        }
        else {
          uint64_t v70 = 0;
        }
        uint64_t v61 = (v66 + (v63 >> 24) - v69) >> 32;
        uint64_t v62 = (v67 + ((uint64_t)((unint64_t)HIWORD(v56) << 56) >> 24) - v70) >> 32;
      }
      unsigned int v71 = (unsigned __int8 *)(v48 + v62);
      if (v18 < v48 + v62) {
        unsigned int v71 = (unsigned __int8 *)v18;
      }
      if (v71 < v49) {
        unsigned int v71 = v49;
      }
      unsigned int v72 = *v71;
      unint64_t v73 = v48 + (int)v61 * (uint64_t)v4;
      if (v18 >= v73) {
        uint64_t v74 = (unsigned __int8 *)(v48 + (int)v61 * (uint64_t)v4);
      }
      else {
        uint64_t v74 = (unsigned __int8 *)v18;
      }
      if (v74 < v49) {
        uint64_t v74 = v49;
      }
      unsigned int v75 = *v74;
      int v76 = (unsigned __int8 *)(v73 + v62);
      if (v18 < (unint64_t)v76) {
        int v76 = (unsigned __int8 *)v18;
      }
      if (v76 >= v49) {
        int64_t v49 = v76;
      }
      unsigned int v77 = *v49;
      if (v10)
      {
        uint64_t v78 = (unsigned __int8 *)(v52 + v62);
        unint64_t v79 = *(void *)(result + 40);
        if ((unint64_t)v17 < v52 + v62) {
          uint64_t v78 = v17;
        }
        if ((unint64_t)v78 < v79) {
          uint64_t v78 = *(unsigned __int8 **)(result + 40);
        }
        v72 |= *v78 << 24;
        uint64_t v80 = (unsigned __int8 *)(v52 + (int)v61 * (uint64_t)v126);
        if (v17 >= v80) {
          unsigned int v81 = v80;
        }
        else {
          unsigned int v81 = v17;
        }
        if ((unint64_t)v81 < v79) {
          unsigned int v81 = *(unsigned __int8 **)(result + 40);
        }
        v75 |= *v81 << 24;
        unsigned int v82 = &v80[v62];
        if (v17 < v82) {
          unsigned int v82 = v17;
        }
        if ((unint64_t)v82 < v79) {
          unsigned int v82 = *(unsigned __int8 **)(result + 40);
        }
        v77 |= *v82 << 24;
      }
      int v83 = interpolate_8888_21358[v60];
      unsigned int v84 = v51 - ((v83 & v51) >> (v60 + 1)) + ((v83 & v75) >> (v60 + 1));
      unsigned int v51 = v84
          - ((v84 & interpolate_8888_21358[(v56 >> 28) & 3]) >> (((v56 >> 28) & 3) + 1))
          + (((v72 - ((v83 & v72) >> (v60 + 1)) + ((v83 & v77) >> (v60 + 1))) & interpolate_8888_21358[(v56 >> 28) & 3]) >> (((v56 >> 28) & 3) + 1));
      int v22 = v117;
      unsigned int v30 = v118;
      break;
  }
LABEL_138:
  *(_DWORD *)(v12 + 4) = v51 | v14;
  *(unsigned char *)(v13 + 1) = v30 >> 22;
  if (v22 != 1)
  {
    int v101 = v22;
    uint64_t v102 = 0;
    a2 += v5;
    uint64_t v103 = v120 - a2;
    a3 += v9;
    uint64_t v104 = v122 - a3;
    uint64_t v105 = -4;
    while (((v104 | v103 | (a3 - v123) | (a2 - v121)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v106 = (v7 & ((v28 + v124) >> 63)) + v28 + v124;
        uint64_t v107 = (v6 & ((v37 + v125) >> 63)) + v37 + v125;
        if (v106 >= v7) {
          uint64_t v108 = v7;
        }
        else {
          uint64_t v108 = 0;
        }
        uint64_t v109 = v106 - v108;
        if (v107 >= v6) {
          uint64_t v110 = v6;
        }
        else {
          uint64_t v110 = 0;
        }
        uint64_t v111 = v107 - v110;
        uint64_t v37 = v111;
        uint64_t v28 = v109;
      }
      else
      {
        uint64_t v111 = a2;
        uint64_t v109 = a3;
      }
      uint64_t v112 = v109 >> 32;
      uint64_t v113 = v127 + SHIDWORD(v109) * (uint64_t)v4;
      unint64_t v48 = v113 + (v111 >> 32);
      int64_t v49 = *(unsigned __int8 **)(result + 32);
      if (v18 >= v48) {
        uint64_t v114 = (unsigned __int8 *)(v113 + (v111 >> 32));
      }
      else {
        uint64_t v114 = (unsigned __int8 *)v18;
      }
      if (v114 < v49) {
        uint64_t v114 = *(unsigned __int8 **)(result + 32);
      }
      unsigned int v51 = *v114;
      if (v10)
      {
        unint64_t v52 = v10 + (int)v112 * (uint64_t)v126 + (v111 >> 32);
        uint64_t v115 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v17 >= v52) {
          double v116 = (unsigned __int8 *)v52;
        }
        else {
          double v116 = v17;
        }
        if (v116 >= v115) {
          uint64_t v115 = v116;
        }
        v51 |= *v115 << 24;
      }
      if (v8)
      {
        unsigned int v56 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v56 & 0xF) != 0)
        {
          v13 += v102 + 1;
          v12 -= v105;
          int v22 = ~v102 + v101;
          unsigned int v30 = -1;
          goto LABEL_66;
        }
      }
      *(_DWORD *)(v12 + 4 * v102 + 8) = v51 | v14;
      *(unsigned char *)(v13 + v102++ + 2) = -1;
      v105 -= 4;
      a2 += v5;
      v103 -= v5;
      a3 += v9;
      v104 -= v9;
      if (v101 - 1 == v102) {
        return result;
      }
    }
    v13 += v102 + 1;
    v12 -= v105;
    int v55 = ~v102 + v101;
    goto LABEL_61;
  }
  return result;
}

uint64_t W8_shade(uint64_t a1, __n128 a2)
{
  int v2 = (uint64_t *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t)v3;
  BOOL v7 = 0;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *v2;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  *(_OWORD *)uint64_t v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *v3;
  if (!*((void *)v3 + 12))
  {
    if (*(void *)(v4 + 72)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = *(float *)(v4 + 4) >= 1.0;
    }
  }
  int v43 = 0;
  memset(v42, 0, sizeof(v42));
  int v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((void *)v3 + 6) == 0));
  if (v11 > 27) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)v5 & 0xF000000) == 0x1000000)
  {
    if (*(void *)(v5 + 16))
    {
      int v14 = W8_shade_radial_W;
    }
    else if (*(void *)(v5 + 24))
    {
      int v14 = W8_shade_conic_W;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      int v14 = W8_shade_axial_W;
    }
    else
    {
      int v14 = W8_shade_custom_W;
    }
    *(void *)&v17[0] = v14;
    if ((void)v40)
    {
      *((void *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 2, 1, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    unint64_t v15 = *((void *)&v19 + 1) * v19;
    if ((uint64_t)(*((void *)&v19 + 1) * v19) <= 960)
    {
      uint64_t v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 2, 1, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(unsigned char *)(v5 + 1)) {
        *(void *)&long long v39 = &_blt_shade_samples_noise;
      }
      goto LABEL_29;
    }
    uint64_t v16 = malloc_type_malloc(4 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      unint64_t v15 = *((void *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)&v17[0]) {
    return 0xFFFFFFFFLL;
  }
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  W8_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1])) {
    free(v38[1]);
  }
  return 1;
}

void W8_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v352 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 4);
  uint64_t v337 = v4;
  uint64_t v338 = a1;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF) {
    return;
  }
  uint64_t v9 = *(void *)(v338 + 40);
  uint64_t v8 = *(void *)(v338 + 48);
  float v10 = *(float *)(a2 + 184);
  unsigned int v343 = *(int **)(v338 + 136);
  uint64_t v350 = *(void *)(a2 + 96);
  uint64_t v351 = v8;
  uint64_t v349 = *(void *)(a2 + 104);
  uint64_t v11 = *(int *)(v338 + 24);
  uint64_t v333 = *(int *)(v338 + 28);
  int v12 = *(_DWORD *)(v338 + 16);
  unsigned int v347 = (void *)*(int *)(v338 + 20);
  uint64_t v13 = *(int *)(v338 + 12);
  int v348 = *(_DWORD *)(v338 + 8);
  uint64_t v14 = *(int *)(a2 + 16);
  uint64_t v15 = (v14 + 6) * v5;
  if (v15 > 65439)
  {
    long long v18 = (char *)malloc_type_calloc(1uLL, v15 + 96, 0x3023562EuLL);
    uint64_t v17 = v18;
    long long v20 = v18;
    if (!v18) {
      return;
    }
  }
  else
  {
    MEMORY[0x1F4188790](a1, a4);
    uint64_t v17 = (char *)&v331 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v17, v16);
    long long v20 = 0;
  }
  unint64_t v332 = v20;
  int v340 = a3;
  unint64_t v21 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v22 = v21 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a2 + 160) = v22;
  if (v14) {
    uint64_t v23 = 4 * v5;
  }
  else {
    uint64_t v23 = 0;
  }
  unint64_t v24 = v22 + v23;
  uint64_t v25 = v9 + (v11 - 1) * v333;
  *(void *)(a2 + 144) = v21;
  *(void *)(a2 + 152) = v24;
  uint64_t v339 = a2;
  if (v351)
  {
    uint64_t v26 = v338;
    uint64_t v27 = *(int *)(v338 + 32);
    long long v28 = (unsigned char *)(v351 + v13 + (int)v27 * (uint64_t)v12);
    uint64_t v345 = v27 - v337;
    uint64_t v29 = v337;
    uint64_t v30 = 1;
  }
  else
  {
    long long v28 = 0;
    uint64_t v345 = 0;
    uint64_t v30 = 0;
    uint64_t v29 = v337;
    uint64_t v26 = v338;
  }
  int v346 = (int)(float)((float)(v10 * 255.0) + 0.5);
  long long v31 = (char *)v347 + v25;
  long long v32 = (unsigned char *)(v9 + v13 + v12 * (uint64_t)(int)v333);
  uint64_t v344 = v333 - v29;
  uint64_t v33 = *(int *)(v26 + 104);
  int v34 = *(_DWORD *)(v26 + 108);
  int v35 = *(unsigned __int8 *)(v26 + 2);
  if (v35 == 6 || v35 == 1)
  {
    int v36 = v340;
    uint64_t v37 = v339;
    uint64_t v39 = v349;
    uint64_t v38 = v350;
    if (v343)
    {
      long long v40 = 0;
      LODWORD(v41) = 0;
      uint64_t v42 = *(int *)(v26 + 124);
      int v43 = (unsigned __int8 *)v343 + v33 + (int)v42 * (uint64_t)v34;
      uint64_t v29 = v337;
      uint64_t v342 = v42 - v337;
      goto LABEL_33;
    }
LABEL_20:
    uint64_t v47 = v332;
    if (v332) {
      goto LABEL_544;
    }
    return;
  }
  if (v343)
  {
    uint64_t v331 = v31;
    shape_enum_clip_alloc((uint64_t)v18, v19, v343, 1, 1, 1, v33, v34, v4, v348);
    if (v44)
    {
      long long v40 = v44;
      unint64_t v41 = 0;
      uint64_t v45 = (int)((v14 * v5 + 15) & 0xFFFFFFF0);
      if (!v14) {
        uint64_t v45 = 4 * v5;
      }
      uint64_t v46 = v337;
      uint64_t v342 = -v337;
      int v43 = (unsigned __int8 *)(v24 + v45 + 16);
      uint64_t v37 = v339;
      uint64_t v39 = v349;
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  int v43 = 0;
  long long v40 = 0;
  uint64_t v342 = 0;
  LODWORD(v41) = 0;
  int v36 = v340;
  uint64_t v37 = v339;
  uint64_t v39 = v349;
  uint64_t v38 = v350;
LABEL_33:
  while (2)
  {
    uint64_t v334 = -v29;
    uint64_t v335 = (v4 - 1) + 1;
    uint64_t v331 = v31;
    unint64_t v336 = (unint64_t)(v31 - 1);
    int v55 = v40;
    int v341 = v346 ^ 0xFF;
LABEL_34:
    unsigned int v347 = v55;
    unsigned int v56 = *(void (**)(uint64_t))v37;
    uint64_t v349 = v39;
    uint64_t v350 = v38;
    v56(v37);
    int v57 = *(unsigned __int8 **)(v37 + 160);
    uint64_t v58 = *(unsigned char **)(v37 + 144);
    unsigned int v59 = *(_DWORD *)(v37 + 8);
    if (v59 == *(_DWORD *)(v37 + 12))
    {
      if (v346 != 255)
      {
        int v60 = v4;
        uint64_t v61 = *(unsigned char **)(v37 + 144);
        int v62 = v341;
        do
        {
          if (*v61)
          {
            unsigned int v63 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * v62;
            *(_DWORD *)int v57 = (*(_DWORD *)v57 & 0xFF0000FF)
                           - ((v63 + 65537 + ((v63 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v63 + 1 + BYTE1(v63)) >> 8));
          }
          ++v61;
          v57 += 4;
          --v60;
        }
        while (v60);
        v57 += 4 * v334;
        v58 += v335 + v334;
      }
    }
    else
    {
      uint64_t v64 = *(void *)(v37 + 152);
      int v65 = HIWORD(v59) & 0x3F;
      if (v65 == 16)
      {
        int v76 = v341;
        uint64_t v77 = 0;
        if (v346 == 255)
        {
          do
          {
            if (v58[v77]) {
              *(_DWORD *)&v57[4 * v77] = *(_DWORD *)(v64 + 4 * v77) & 0xFF000000 | BYTE1(*(_DWORD *)(v64 + 4 * v77));
            }
            ++v77;
          }
          while (v4 != v77);
        }
        else
        {
          do
          {
            if (v58[v77])
            {
              unsigned int v78 = *(_DWORD *)(v64 + 4 * v77);
              unsigned int v79 = ((v78 >> 8) & 0xFF00FF) * v76 + 65537 + (((((v78 >> 8) & 0xFF00FF) * v76) >> 8) & 0xFF00FF);
              *(_DWORD *)&v57[4 * v77] = (v78 & 0xFF000000 | BYTE1(v78)) - (v79 & 0xFF000000 | BYTE1(v79));
            }
            ++v77;
          }
          while (v4 != v77);
        }
      }
      else
      {
        int v66 = v341;
        if (v65 == 32)
        {
          if (v346 == 255)
          {
            uint64_t v83 = 0;
            unsigned int v84 = (float *)(v64 + 4);
            do
            {
              if (v58[v83])
              {
                float v85 = *v84;
                if (*v84 <= 0.0)
                {
                  int v89 = 0;
                }
                else
                {
                  int v86 = (int)(float)((float)(v85 * 255.0) + 0.5);
                  float v87 = *(v84 - 1);
                  if (v85 > 1.0)
                  {
                    float v85 = 1.0;
                    int v86 = 255;
                  }
                  int v88 = (int)(float)((float)(v87 * 255.0) + 0.5);
                  if (v87 < 0.0) {
                    int v88 = 0;
                  }
                  if (v87 > v85) {
                    int v88 = v86;
                  }
                  int v89 = v88 | (v86 << 24);
                }
                *(_DWORD *)&v57[4 * v83] = v89;
              }
              v84 += 2;
              ++v83;
            }
            while (v4 != v83);
          }
          else
          {
            uint64_t v67 = 0;
            uint64_t v68 = (float *)(v64 + 4);
            do
            {
              if (v58[v67])
              {
                float v69 = *v68;
                if (*v68 <= 0.0)
                {
                  unsigned int v75 = 0;
                }
                else
                {
                  float v70 = *(v68 - 1);
                  int v71 = (int)(float)((float)(v69 * 255.0) + 0.5);
                  if (v69 > 1.0)
                  {
                    int v71 = 255;
                    float v69 = 1.0;
                  }
                  int v72 = (int)(float)((float)(v70 * 255.0) + 0.5);
                  if (v70 < 0.0) {
                    LOBYTE(v72) = 0;
                  }
                  if (v70 > v69) {
                    LOBYTE(v72) = v71;
                  }
                  int v73 = v72 | (v71 << 24);
                  unsigned int v74 = (v72 | (v71 << 16)) * v66;
                  unsigned int v75 = v73
                      - ((v74 + 65537 + ((v74 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v74 + 1 + BYTE1(v74)) >> 8));
                }
                *(_DWORD *)&v57[4 * v67] = v75;
              }
              v68 += 2;
              ++v67;
            }
            while (v4 != v67);
          }
        }
        else if (v346 == 255)
        {
          uint64_t v90 = 0;
          do
          {
            if (v58[v90]) {
              *(_DWORD *)&v57[4 * v90] = *(_DWORD *)(v64 + 4 * v90);
            }
            ++v90;
          }
          while (v4 != v90);
        }
        else
        {
          uint64_t v80 = 0;
          do
          {
            if (v58[v80])
            {
              unsigned int v81 = *(_DWORD *)(v64 + 4 * v80);
              unsigned int v82 = (v81 | (HIBYTE(v81) << 16)) * v66;
              *(_DWORD *)&v57[4 * v80] = (v81 & 0xFF0000FF)
                                       - ((v82 + 65537 + ((v82 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v82 + 1 + BYTE1(v82)) >> 8));
            }
            ++v80;
          }
          while (v4 != v80);
        }
      }
    }
    switch(v36)
    {
      case 0:
        uint64_t v91 = v43 != 0;
        if (v351)
        {
          int v92 = v4;
          uint64_t v93 = v43;
          int v94 = v348;
          uint64_t v95 = v350;
          do
          {
            int v96 = *v58;
            if (*v58)
            {
              if (v43) {
                int v96 = ((unsigned __int16)(*v93 * (_WORD)v96 + ((*v93 * v96) >> 8) + 1) >> 8);
              }
              if (v96)
              {
                if (v96 == 255)
                {
                  LOBYTE(v97) = 0;
                  *long long v32 = 0;
                }
                else
                {
                  int v98 = *v32;
                  int v99 = *v28;
                  unsigned int v100 = (v98 | (v99 << 16)) * v96
                       + 65537
                       + ((((v98 | (v99 << 16)) * v96) >> 8) & 0xFF00FF);
                  int v101 = v98 | (v99 << 24);
                  *long long v32 = v101 - BYTE1(v100);
                  unsigned int v97 = (v101 - (v100 & 0xFF000000 | BYTE1(v100))) >> 24;
                }
                unsigned char *v28 = v97;
              }
            }
            ++v58;
            v93 += v91;
            ++v32;
            ++v28;
            --v92;
          }
          while (v92);
        }
        else
        {
          int v269 = v4;
          uint64_t v93 = v43;
          int v94 = v348;
          uint64_t v95 = v350;
          do
          {
            int v270 = *v58;
            if (*v58)
            {
              if (v43) {
                int v270 = ((unsigned __int16)(*v93 * (_WORD)v270 + ((*v93 * v270) >> 8) + 1) >> 8);
              }
              if (v270)
              {
                if (v270 == 255) {
                  LOBYTE(v271) = 0;
                }
                else {
                  unsigned int v271 = *v32
                }
                       - ((*v32 * v270 + ((*v32 * v270) >> 8) + 1) >> 8);
                *long long v32 = v271;
              }
            }
            ++v58;
            v93 += v91;
            ++v32;
            --v269;
          }
          while (v269);
        }
        int v43 = &v93[v342];
        v32 += v344;
        v28 += v345;
        uint64_t v105 = v349;
        goto LABEL_487;
      case 1:
        int v102 = *v58;
        if (v351)
        {
          if (v43)
          {
            uint64_t v103 = 0;
            uint64_t v104 = v58 + 1;
            uint64_t v105 = v349;
            uint64_t v95 = v350;
            do
            {
              if (v102)
              {
                unsigned int v106 = v43[v103] * v102 + ((v43[v103] * v102) >> 8) + 1;
                if (BYTE1(v106))
                {
                  if (BYTE1(v106) == 255)
                  {
                    unsigned int v107 = *(_DWORD *)&v57[4 * v103];
                    HIBYTE(v108) = HIBYTE(v107);
                  }
                  else
                  {
                    unsigned int v109 = (*(_DWORD *)&v57[4 * v103] | (HIBYTE(*(_DWORD *)&v57[4 * v103]) << 16))
                         * (v106 >> 8)
                         + (v32[v103] | (v28[v103] << 16)) * ((v106 >> 8) ^ 0xFF);
                    unsigned int v108 = v109 + 65537 + ((v109 >> 8) & 0xFF00FF);
                    unsigned int v107 = v108 >> 8;
                  }
                  v32[v103] = v107;
                  v28[v103] = HIBYTE(v108);
                }
              }
              int v102 = v104[v103++];
            }
            while (v4 != v103);
            uint64_t v110 = (uint64_t)&v32[v103 - 1];
            uint64_t v111 = (uint64_t)&v28[v103 - 1];
            v43 += v103 + v342;
          }
          else
          {
            unint64_t v306 = v58 + 1;
            uint64_t v111 = (uint64_t)(v28 - 1);
            uint64_t v110 = (uint64_t)(v32 - 1);
            int v307 = v4;
            uint64_t v105 = v349;
            uint64_t v95 = v350;
            do
            {
              if (v102)
              {
                if (v102 == 255)
                {
                  unsigned int v308 = *(_DWORD *)v57;
                  unsigned int v309 = *(_DWORD *)v57;
                }
                else
                {
                  unsigned int v310 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * v102
                       + (*(unsigned __int8 *)(v110 + 1) | (*(unsigned __int8 *)(v111 + 1) << 16)) * (v102 ^ 0xFF);
                  unsigned int v309 = v310 + 65537 + ((v310 >> 8) & 0xFF00FF);
                  unsigned int v308 = v309 >> 8;
                }
                *(unsigned char *)(v110 + 1) = v308;
                *(unsigned char *)(v111 + 1) = HIBYTE(v309);
              }
              int v311 = *v306++;
              int v102 = v311;
              v57 += 4;
              ++v111;
              ++v110;
              --v307;
            }
            while (v307);
            int v43 = 0;
          }
          long long v32 = (unsigned char *)(v110 + v344 + 1);
          long long v28 = (unsigned char *)(v111 + v345 + 1);
          goto LABEL_486;
        }
        uint64_t v272 = v58 + 1;
        int v273 = v4;
        if (v43)
        {
          uint64_t v105 = v349;
          uint64_t v95 = v350;
          do
          {
            if (v102)
            {
              unsigned int v274 = *v43 * v102 + ((*v43 * v102) >> 8) + 1;
              unsigned int v275 = *(unsigned char **)(v338 + 40);
              unsigned int v276 = (unsigned char *)v336;
              if (v336 >= (unint64_t)v32) {
                unsigned int v276 = v32;
              }
              if (v276 >= v275) {
                unsigned int v275 = v276;
              }
              if (BYTE1(v274))
              {
                if (BYTE1(v274) == 255) {
                  unsigned int v277 = *(_DWORD *)v57;
                }
                else {
                  unsigned int v277 = (*v57 * (v274 >> 8)
                }
                        + ((v274 >> 8) ^ 0xFF) * *v275
                        + ((*v57 * (v274 >> 8) + ((v274 >> 8) ^ 0xFF) * *v275) >> 8)
                        + 1) >> 8;
                *unsigned int v275 = v277;
              }
            }
            else
            {
              unsigned int v275 = v32;
            }
            int v278 = *v272++;
            int v102 = v278;
            v57 += 4;
            ++v43;
            long long v32 = v275 + 1;
            --v273;
          }
          while (v273);
          v43 += v342;
        }
        else
        {
          uint64_t v320 = v338;
          uint64_t v105 = v349;
          uint64_t v95 = v350;
          do
          {
            unsigned int v275 = *(unsigned char **)(v320 + 40);
            unsigned int v321 = (unsigned char *)v336;
            if (v336 >= (unint64_t)v32) {
              unsigned int v321 = v32;
            }
            if (v321 >= v275) {
              unsigned int v275 = v321;
            }
            if (v102)
            {
              if (v102 == 255) {
                unsigned int v322 = *(_DWORD *)v57;
              }
              else {
                unsigned int v322 = (*v57 * v102
              }
                      + *v275 * (v102 ^ 0xFF)
                      + ((*v57 * v102 + *v275 * (v102 ^ 0xFFu)) >> 8)
                      + 1) >> 8;
              *unsigned int v275 = v322;
            }
            int v323 = *v272++;
            int v102 = v323;
            v57 += 4;
            long long v32 = v275 + 1;
            --v273;
          }
          while (v273);
          int v43 = 0;
        }
        unsigned int v324 = &v275[v344];
        goto LABEL_539;
      case 2:
        int v112 = *v58;
        if (v351)
        {
          if (v43)
          {
            uint64_t v113 = 0;
            uint64_t v114 = v58 + 1;
            uint64_t v105 = v349;
            uint64_t v95 = v350;
            while (1)
            {
              if (!v112) {
                goto LABEL_130;
              }
              unsigned int v115 = v43[v113] * v112 + ((v43[v113] * v112) >> 8) + 1;
              if (!BYTE1(v115)) {
                goto LABEL_130;
              }
              if (BYTE1(v115) == 255)
              {
                unsigned int v116 = *(_DWORD *)&v57[4 * v113];
                unsigned int v117 = HIBYTE(v116);
                if (HIBYTE(v116))
                {
                  if (v117 == 255)
                  {
                    v32[v113] = v116;
                    LOBYTE(v116) = -1;
                  }
                  else
                  {
                    unsigned int v120 = (v32[v113] | (v28[v113] << 16)) * (v117 ^ 0xFF);
LABEL_128:
                    unsigned int v121 = ((v120 + 65537 + ((v120 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v120 + 1 + BYTE1(v120)) >> 8))
                         + (v116 & 0xFF0000FF);
                    v32[v113] = v121;
                    unsigned int v116 = HIBYTE(v121);
                  }
                  v28[v113] = v116;
                }
              }
              else
              {
                unsigned int v118 = *(_DWORD *)&v57[4 * v113];
                unsigned int v119 = (v118 | (HIBYTE(v118) << 16)) * ((v115 >> 8) ^ 0xFF);
                unsigned int v116 = (v118 & 0xFF0000FF)
                     - ((v119 + 65537 + ((v119 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v119 + 1 + BYTE1(v119)) >> 8));
                if (HIBYTE(v116))
                {
                  unsigned int v120 = (v32[v113] | (v28[v113] << 16)) * (~v116 >> 24);
                  goto LABEL_128;
                }
              }
LABEL_130:
              int v112 = v114[v113++];
              if (v4 == v113)
              {
                uint64_t v122 = (uint64_t)&v32[v113 - 1];
                uint64_t v123 = (uint64_t)&v28[v113 - 1];
                v43 += v113 + v342;
LABEL_512:
                long long v32 = (unsigned char *)(v122 + v344 + 1);
                long long v28 = (unsigned char *)(v123 + v345 + 1);
                goto LABEL_486;
              }
            }
          }
          uint64_t v312 = v58 + 1;
          uint64_t v123 = (uint64_t)(v28 - 1);
          uint64_t v122 = (uint64_t)(v32 - 1);
          int v313 = v4;
          uint64_t v105 = v349;
          uint64_t v95 = v350;
          while (1)
          {
            if (v112)
            {
              if (v112 == 255)
              {
                unsigned int v314 = *(_DWORD *)v57;
                int v315 = HIBYTE(*(_DWORD *)v57);
                if (v315)
                {
                  if (v315 == 255)
                  {
                    *(unsigned char *)(v122 + 1) = v314;
                    LOBYTE(v314) = -1;
                  }
                  else
                  {
                    unsigned int v317 = (*(unsigned __int8 *)(v122 + 1) | (*(unsigned __int8 *)(v123 + 1) << 16)) * (v315 ^ 0xFF);
LABEL_508:
                    unsigned int v318 = ((v317 + 65537 + ((v317 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v317 + 1 + BYTE1(v317)) >> 8))
                         + (v314 & 0xFF0000FF);
                    *(unsigned char *)(v122 + 1) = v318;
                    unsigned int v314 = HIBYTE(v318);
                  }
                  *(unsigned char *)(v123 + 1) = v314;
                }
              }
              else
              {
                unsigned int v316 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v112 ^ 0xFF);
                unsigned int v314 = (*(_DWORD *)v57 & 0xFF0000FF)
                     - ((v316 + 65537 + ((v316 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v316 + 1 + BYTE1(v316)) >> 8));
                if (HIBYTE(v314))
                {
                  unsigned int v317 = (*(unsigned __int8 *)(v122 + 1) | (*(unsigned __int8 *)(v123 + 1) << 16)) * (~v314 >> 24);
                  goto LABEL_508;
                }
              }
            }
            int v319 = *v312++;
            int v112 = v319;
            v57 += 4;
            ++v123;
            ++v122;
            if (!--v313)
            {
              int v43 = 0;
              goto LABEL_512;
            }
          }
        }
        unsigned int v279 = v58 + 1;
        unsigned int v280 = v32 - 1;
        int v281 = v4;
        if (!v43)
        {
          uint64_t v105 = v349;
          uint64_t v95 = v350;
          while (1)
          {
            if (v112)
            {
              if (v112 == 255)
              {
                unsigned int v325 = *(_DWORD *)v57;
                int v326 = HIBYTE(*(_DWORD *)v57);
                if (v326)
                {
                  if (v326 != 255)
                  {
                    unsigned int v327 = (v326 ^ 0xFF) * v280[1];
                    goto LABEL_534;
                  }
                  goto LABEL_535;
                }
              }
              else
              {
                unsigned int v328 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v112 ^ 0xFF);
                unsigned int v325 = (*(_DWORD *)v57 & 0xFF0000FF)
                     - ((v328 + 65537 + ((v328 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v328 + 1 + BYTE1(v328)) >> 8));
                if (HIBYTE(v325))
                {
                  unsigned int v327 = (~v325 >> 24) * v280[1];
LABEL_534:
                  v325 += (v327 + (v327 >> 8) + 1) >> 8;
LABEL_535:
                  v280[1] = v325;
                }
              }
            }
            int v329 = *v279++;
            int v112 = v329;
            v57 += 4;
            ++v280;
            if (!--v281)
            {
              int v43 = 0;
              goto LABEL_538;
            }
          }
        }
        uint64_t v105 = v349;
        uint64_t v95 = v350;
        do
        {
          if (v112)
          {
            unsigned int v282 = *v43 * v112 + ((*v43 * v112) >> 8) + 1;
            if (BYTE1(v282))
            {
              if (BYTE1(v282) == 255)
              {
                unsigned int v283 = *(_DWORD *)v57;
                int v284 = HIBYTE(*(_DWORD *)v57);
                if (!v284) {
                  goto LABEL_447;
                }
                if (v284 == 255) {
                  goto LABEL_446;
                }
                unsigned int v285 = (v284 ^ 0xFF) * v280[1];
              }
              else
              {
                unsigned int v286 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * ((v282 >> 8) ^ 0xFF);
                unsigned int v283 = (*(_DWORD *)v57 & 0xFF0000FF)
                     - ((v286 + 65537 + ((v286 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v286 + 1 + BYTE1(v286)) >> 8));
                if (!HIBYTE(v283)) {
                  goto LABEL_447;
                }
                unsigned int v285 = (~v283 >> 24) * v280[1];
              }
              v283 += (v285 + (v285 >> 8) + 1) >> 8;
LABEL_446:
              v280[1] = v283;
            }
          }
LABEL_447:
          int v287 = *v279++;
          int v112 = v287;
          v57 += 4;
          ++v43;
          ++v280;
          --v281;
        }
        while (v281);
        v43 += v342;
LABEL_538:
        unsigned int v324 = &v280[v344];
LABEL_539:
        long long v32 = v324 + 1;
        v28 += v345;
LABEL_486:
        int v94 = v348;
LABEL_487:
        int v305 = v94 - 1;
        if (v305)
        {
          int v348 = v305;
          int v55 = 0;
          unint64_t v41 = (v41 + 1);
          uint64_t v38 = *(void *)(v37 + 128) + v95;
          uint64_t v39 = *(void *)(v37 + 136) + v105;
          long long v40 = v347;
          if (v347)
          {
            uint64_t v350 = v38;
            uint64_t v46 = v337;
LABEL_23:
            uint64_t v349 = v345 + v46;
            while (1)
            {
              while (1)
              {
                unint64_t v48 = (unsigned __int8 *)*((unsigned int *)v43 - 4);
                int v49 = v48 - v41;
                if ((int)v48 <= (int)v41) {
                  break;
                }
                v348 -= v49;
                if (v348 < 1) {
                  goto LABEL_541;
                }
                uint64_t v53 = *(void *)(v37 + 136);
                v350 += *(void *)(v37 + 128) * v49;
                v39 += v53 * v49;
                v32 += (int)v333 * (uint64_t)v49;
                uint64_t v54 = v349 * v49;
                if (!v351) {
                  uint64_t v54 = 0;
                }
                v28 += v54;
                unint64_t v41 = (unint64_t)v48;
              }
              if ((int)v41 < *((_DWORD *)v43 - 3) + (int)v48) {
                break;
              }
              int v50 = (unsigned __int8 *)v41;
              unsigned int v51 = v40;
              int v52 = shape_enum_clip_scan((uint64_t)v40, (_DWORD *)v43 - 4);
              long long v40 = v51;
              unint64_t v41 = (unint64_t)v50;
              if (!v52) {
                goto LABEL_541;
              }
            }
            uint64_t v29 = v337;
            uint64_t v38 = v350;
            long long v31 = v331;
            int v36 = v340;
            continue;
          }
          goto LABEL_34;
        }
        long long v40 = v347;
LABEL_541:
        int v330 = v332;
        if (v40) {
          free(v40);
        }
        uint64_t v47 = v330;
        if (v330) {
LABEL_544:
        }
          free(v47);
        return;
      case 3:
        int v124 = v4;
        uint64_t v125 = v43;
        do
        {
          int v126 = *v58;
          if (*v58)
          {
            if (v43) {
              int v126 = ((unsigned __int16)(*v125 * (_WORD)v126 + ((*v125 * v126) >> 8) + 1) >> 8);
            }
            if (v126)
            {
              if (v126 == 255)
              {
                unsigned int v128 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16))
                     * (*v28 ^ 0xFF);
                unsigned int v127 = (*(_DWORD *)v57 & 0xFF0000FF)
                     - ((v128 + 65537 + ((v128 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v128 + 1 + BYTE1(v128)) >> 8));
                HIBYTE(v128) = HIBYTE(v127);
              }
              else
              {
                unsigned int v129 = (*v32 | (*v28 << 16)) * (v126 ^ 0xFF)
                     + ((*v28 * v126 + ((*v28 * v126) >> 8) + 1) >> 8)
                     * (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16));
                unsigned int v128 = v129 + 65537 + ((v129 >> 8) & 0xFF00FF);
                unsigned int v127 = v128 >> 8;
              }
              *long long v32 = v127;
              unsigned char *v28 = HIBYTE(v128);
            }
          }
          ++v58;
          v57 += 4;
          v125 += v43 != 0;
          ++v32;
          v28 += v30;
          --v124;
        }
        while (v124);
        goto LABEL_171;
      case 4:
        int v130 = v4;
        uint64_t v125 = v43;
        do
        {
          int v131 = *v58;
          if (*v58)
          {
            if (v43) {
              int v131 = ((unsigned __int16)(*v125 * (_WORD)v131 + ((*v125 * v131) >> 8) + 1) >> 8);
            }
            if (v131)
            {
              if (v131 == 255)
              {
                unsigned int v133 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * *v28;
                unsigned int v132 = (*(_DWORD *)v57 & 0xFF0000FF)
                     - ((v133 + 65537 + ((v133 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v133 + 1 + BYTE1(v133)) >> 8));
                HIBYTE(v133) = HIBYTE(v132);
              }
              else
              {
                unsigned int v134 = (*v32 | (*v28 << 16)) * (v131 ^ 0xFF)
                     + (((*v28 ^ 0xFF) * v131 + (((*v28 ^ 0xFFu) * v131) >> 8) + 1) >> 8)
                     * (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16));
                unsigned int v133 = v134 + 65537 + ((v134 >> 8) & 0xFF00FF);
                unsigned int v132 = v133 >> 8;
              }
              *long long v32 = v132;
              unsigned char *v28 = HIBYTE(v133);
            }
          }
          ++v58;
          v57 += 4;
          v125 += v43 != 0;
          ++v32;
          v28 += v30;
          --v130;
        }
        while (v130);
        goto LABEL_171;
      case 5:
        int v135 = v4;
        uint64_t v136 = v43;
        do
        {
          int v137 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v137 = ((unsigned __int16)(*v136 * (_WORD)v137
                                                            + ((*v136 * v137) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v138 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v137 ^ 0xFF);
              unsigned int v139 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v138 + 65537 + ((v138 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v138 + 1 + BYTE1(v138)) >> 8));
              unsigned int v140 = (HIBYTE(v139) ^ 0xFF) * (*v32 | (*v28 << 16))
                   + (v139 | (HIBYTE(v139) << 16)) * *v28;
              int v141 = v140 + 65537 + ((v140 >> 8) & 0xFF00FF);
              *long long v32 = BYTE1(v141);
              unsigned char *v28 = HIBYTE(v141);
            }
          }
          ++v58;
          v57 += 4;
          v136 += v43 != 0;
          ++v32;
          v28 += v30;
          --v135;
        }
        while (v135);
        goto LABEL_210;
      case 6:
        int v142 = v4;
        uint64_t v125 = v43;
        do
        {
          int v143 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v143 = ((unsigned __int16)(*v125 * (_WORD)v143
                                                            + ((*v125 * v143) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              int v144 = *v28;
              if ((_BYTE)v144 != 0xFF)
              {
                if (~(_BYTE)v144 == 255)
                {
                  unsigned int v145 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v143 ^ 0xFF);
                  unsigned int v146 = (*(_DWORD *)v57 & 0xFF0000FF)
                       - ((v145 + 65537 + ((v145 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v145 + 1 + BYTE1(v145)) >> 8));
                }
                else
                {
                  unsigned int v147 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16))
                       * ((~(_BYTE)v144 * v143
                         + ((~(_BYTE)v144 * v143) >> 8)
                         + 1) >> 8);
                  unsigned int v146 = ((v147 + 65537 + ((v147 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v147 + 1 + BYTE1(v147)) >> 8))
                       + (*v32 | (v144 << 24));
                }
                *long long v32 = v146;
                unsigned char *v28 = HIBYTE(v146);
              }
            }
          }
          ++v58;
          v57 += 4;
          v125 += v43 != 0;
          ++v32;
          v28 += v30;
          --v142;
        }
        while (v142);
LABEL_171:
        int v43 = &v125[v342];
        goto LABEL_211;
      case 7:
        uint64_t v148 = v43 != 0;
        if (v351)
        {
          int v149 = v4;
          long long v150 = v43;
          uint64_t v95 = v350;
          do
          {
            int v151 = *v58;
            if (*v58)
            {
              if (v43) {
                int v151 = ((unsigned __int16)(*v150 * (_WORD)v151 + ((*v150 * v151) >> 8) + 1) >> 8);
              }
              if (v151)
              {
                if (v151 == 255)
                {
                  int v152 = *v32;
                  unsigned int v155 = *v28;
                  unsigned int v153 = (v152 | (v155 << 16)) * (~*(_DWORD *)v57 >> 24);
                  unsigned int v154 = (v152 | (v155 << 24))
                       - ((v153 + 65537 + ((v153 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v153 + 1 + BYTE1(v153)) >> 8));
                  HIBYTE(v155) = HIBYTE(v154);
                }
                else
                {
                  unsigned int v156 = ((v151 ^ 0xFF) + ((v57[3] * v151 + ((v57[3] * v151) >> 8) + 1) >> 8))
                       * (*v32 | (*v28 << 16));
                  unsigned int v155 = v156 + 65537 + ((v156 >> 8) & 0xFF00FF);
                  unsigned int v154 = v155 >> 8;
                }
                *long long v32 = v154;
                unsigned char *v28 = HIBYTE(v155);
              }
            }
            ++v58;
            v57 += 4;
            v150 += v148;
            ++v32;
            ++v28;
            --v149;
          }
          while (v149);
        }
        else
        {
          int v288 = v4;
          long long v150 = v43;
          uint64_t v95 = v350;
          do
          {
            int v289 = *v58;
            if (*v58)
            {
              if (v43) {
                int v289 = ((unsigned __int16)(*v150 * (_WORD)v289 + ((*v150 * v289) >> 8) + 1) >> 8);
              }
              if (v289)
              {
                if (v289 == 255)
                {
                  unsigned int v290 = *v32
                       - (((~*(_DWORD *)v57 >> 24) * *v32
                         + (((~*(_DWORD *)v57 >> 24) * *v32) >> 8)
                         + 1) >> 8);
                }
                else
                {
                  unsigned int v291 = v57[3] * v289 + ((v57[3] * v289) >> 8) + 1;
                  unsigned int v290 = (((v289 ^ 0xFF) + (v291 >> 8)) * *v32
                        + ((((v289 ^ 0xFF) + (v291 >> 8)) * *v32) >> 8)
                        + 1) >> 8;
                }
                *long long v32 = v290;
              }
            }
            ++v58;
            v57 += 4;
            v150 += v148;
            ++v32;
            --v288;
          }
          while (v288);
        }
        goto LABEL_470;
      case 8:
        uint64_t v157 = v43 != 0;
        if (v351)
        {
          int v158 = v4;
          long long v150 = v43;
          uint64_t v95 = v350;
          do
          {
            int v159 = *v58;
            if (*v58)
            {
              if (v43) {
                int v159 = ((unsigned __int16)(*v150 * (_WORD)v159 + ((*v150 * v159) >> 8) + 1) >> 8);
              }
              if (v159)
              {
                if (v159 == 255)
                {
                  int v160 = *v32;
                  unsigned int v163 = *v28;
                  unsigned int v161 = (v160 | (v163 << 16)) * v57[3];
                  unsigned int v162 = (v160 | (v163 << 24))
                       - ((v161 + 65537 + ((v161 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v161 + 1 + BYTE1(v161)) >> 8));
                  HIBYTE(v163) = HIBYTE(v162);
                }
                else
                {
                  unsigned int v164 = ((v159 ^ 0xFF)
                        + (((~*(_DWORD *)v57 >> 24) * v159
                          + (((~*(_DWORD *)v57 >> 24) * v159) >> 8)
                          + 1) >> 8))
                       * (*v32 | (*v28 << 16));
                  unsigned int v163 = v164 + 65537 + ((v164 >> 8) & 0xFF00FF);
                  unsigned int v162 = v163 >> 8;
                }
                *long long v32 = v162;
                unsigned char *v28 = HIBYTE(v163);
              }
            }
            ++v58;
            v57 += 4;
            v150 += v157;
            ++v32;
            ++v28;
            --v158;
          }
          while (v158);
        }
        else
        {
          int v292 = v4;
          long long v150 = v43;
          uint64_t v95 = v350;
          do
          {
            int v293 = *v58;
            if (*v58)
            {
              if (v43) {
                int v293 = ((unsigned __int16)(*v150 * (_WORD)v293 + ((*v150 * v293) >> 8) + 1) >> 8);
              }
              if (v293)
              {
                if (v293 == 255)
                {
                  unsigned int v294 = *v32
                       - ((v57[3] * *v32 + ((v57[3] * *v32) >> 8) + 1) >> 8);
                }
                else
                {
                  unsigned int v295 = (~*(_DWORD *)v57 >> 24) * v293
                       + (((~*(_DWORD *)v57 >> 24) * v293) >> 8)
                       + 1;
                  unsigned int v294 = (((v293 ^ 0xFF) + (v295 >> 8)) * *v32
                        + ((((v293 ^ 0xFF) + (v295 >> 8)) * *v32) >> 8)
                        + 1) >> 8;
                }
                *long long v32 = v294;
              }
            }
            ++v58;
            v57 += 4;
            v150 += v157;
            ++v32;
            --v292;
          }
          while (v292);
        }
LABEL_470:
        int v43 = &v150[v342];
        goto LABEL_485;
      case 9:
        uint64_t v136 = v43;
        int v165 = v4;
        break;
      case 10:
        uint64_t v136 = v43;
        int v173 = v4;
        do
        {
          int v174 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v174 = ((unsigned __int16)(*v136 * (_WORD)v174
                                                            + ((*v136 * v174) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v175 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v174 ^ 0xFF);
              unsigned int v176 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v175 + 65537 + ((v175 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v175 + 1 + BYTE1(v175)) >> 8));
              unsigned int v177 = (HIBYTE(v176) ^ 0xFF) * (*v32 | (*v28 << 16))
                   + (v176 | (HIBYTE(v176) << 16)) * (*v28 ^ 0xFF);
              int v178 = v177 + 65537 + ((v177 >> 8) & 0xFF00FF);
              *long long v32 = BYTE1(v178);
              unsigned char *v28 = HIBYTE(v178);
            }
          }
          ++v58;
          v57 += 4;
          v136 += v43 != 0;
          ++v32;
          v28 += v30;
          --v173;
        }
        while (v173);
        goto LABEL_210;
      case 11:
        uint64_t v179 = v43 != 0;
        if (v351)
        {
          double v180 = v43;
          int v181 = v4;
          uint64_t v95 = v350;
          do
          {
            int v182 = *v58;
            if (*v58)
            {
              if (!v43
                || (int v182 = ((unsigned __int16)(*v180 * (_WORD)v182
                                                              + ((*v180 * v182) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                unsigned int v183 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v182 ^ 0xFF);
                unsigned int v184 = (*(_DWORD *)v57 & 0xFF0000FF)
                     - ((v183 + 65537 + ((v183 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v183 + 1 + BYTE1(v183)) >> 8));
                unsigned int v185 = ((*v28 - *v32) | (*v28 << 16))
                     + (HIBYTE(v184) << 16)
                     + (HIBYTE(v184) - v184);
                int v186 = (255 * ((v185 >> 8) & 0x10001)) | v185;
                *long long v32 = BYTE2(v186) - v186;
                unsigned char *v28 = BYTE2(v186);
              }
            }
            ++v58;
            v57 += 4;
            v180 += v179;
            ++v32;
            ++v28;
            --v181;
          }
          while (v181);
        }
        else
        {
          double v180 = v43;
          int v296 = v4;
          uint64_t v95 = v350;
          do
          {
            int v297 = *v58;
            if (*v58)
            {
              if (!v43
                || (int v297 = ((unsigned __int16)(*v180 * (_WORD)v297
                                                              + ((*v180 * v297) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                unsigned int v298 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v297 ^ 0xFF);
                unsigned int v299 = (v298 + 65537 + ((v298 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v298 + 1 + BYTE1(v298)) >> 8);
                unsigned int v300 = (*v32 ^ 0xFF)
                     - (*v57 - v299)
                     + (((*(_DWORD *)v57 & 0xFF0000FF) - v299) >> 24);
                char v301 = BYTE1(v300) | (2 * BYTE1(v300)) | (4 * (BYTE1(v300) | (2 * BYTE1(v300))));
                *long long v32 = ~((~*v32 - (*v57 - v299) + (((*(_DWORD *)v57 & 0xFF0000FF) - v299) >> 24)) | (16 * v301) | v301);
              }
            }
            ++v58;
            v57 += 4;
            v180 += v179;
            ++v32;
            --v296;
          }
          while (v296);
        }
        goto LABEL_484;
      case 12:
        uint64_t v187 = v43 != 0;
        if (v351)
        {
          double v180 = v43;
          int v188 = v4;
          uint64_t v95 = v350;
          do
          {
            int v189 = *v58;
            if (*v58)
            {
              if (!v43
                || (int v189 = ((unsigned __int16)(*v180 * (_WORD)v189
                                                              + ((*v180 * v189) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                unsigned int v190 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v189 ^ 0xFF);
                unsigned int v191 = (*(_DWORD *)v57 & 0xFF0000FF)
                     - ((v190 + 65537 + ((v190 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v190 + 1 + BYTE1(v190)) >> 8));
                unsigned int v192 = (*v32 | (*v28 << 16))
                     + v191
                     + (HIBYTE(v191) << 16);
                int v193 = (255 * ((v192 >> 8) & 0x10001)) | v192;
                *long long v32 = v193;
                unsigned char *v28 = BYTE2(v193);
              }
            }
            ++v58;
            v57 += 4;
            v180 += v187;
            ++v32;
            ++v28;
            --v188;
          }
          while (v188);
        }
        else
        {
          double v180 = v43;
          int v302 = v4;
          uint64_t v95 = v350;
          do
          {
            int v303 = *v58;
            if (*v58)
            {
              if (!v43
                || (int v303 = ((unsigned __int16)(*v180 * (_WORD)v303
                                                              + ((*v180 * v303) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                unsigned int v304 = *v32
                     + (*(_DWORD *)v57
                                       - ((unsigned __int16)(*(_DWORD *)v57 * (v303 ^ 0xFF)
                                                           + ((*(_DWORD *)v57 * (v303 ^ 0xFFu)) >> 8)
                                                           + 1) >> 8));
                *long long v32 = -(v304 >> 8) | v304;
              }
            }
            ++v58;
            v57 += 4;
            v180 += v187;
            ++v32;
            --v302;
          }
          while (v302);
        }
LABEL_484:
        int v43 = &v180[v342];
LABEL_485:
        v32 += v344;
        v28 += v345;
        uint64_t v105 = v349;
        goto LABEL_486;
      case 13:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v194 = v4;
        do
        {
          int v195 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v195 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v195
                                                            + ((*(unsigned __int8 *)v41 * v195) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v196 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v195 ^ 0xFF);
              unsigned int v197 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v196 + 65537 + ((v196 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v196 + 1 + BYTE1(v196)) >> 8));
              int v198 = HIBYTE(v197);
              if (HIBYTE(v197))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v197 = PDAmultiplyPDA_17518(*v32, *v28, (*v57 - ((unsigned __int16)(v196 + 1 + BYTE1(v196)) >> 8)), v198);
                    int v198 = HIBYTE(v197);
                  }
                  *long long v32 = v197;
                  unsigned char *v28 = v198;
                }
                else
                {
                  *long long v32 = PDAmultiplyPDA_17518(*v32, 255, (*v57 - ((unsigned __int16)(v196 + 1 + BYTE1(v196)) >> 8)), v198);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v194;
        }
        while (v194);
        goto LABEL_408;
      case 14:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v199 = v4;
        do
        {
          int v200 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v200 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v200
                                                            + ((*(unsigned __int8 *)v41 * v200) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v201 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v200 ^ 0xFF);
              unsigned int v202 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v201 + 65537 + ((v201 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v201 + 1 + BYTE1(v201)) >> 8));
              int v203 = HIBYTE(v202);
              if (HIBYTE(v202))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v202 = PDAscreenPDA_17519(*v32, *v28, (*v57 - ((unsigned __int16)(v201 + 1 + BYTE1(v201)) >> 8)), v203);
                    int v203 = HIBYTE(v202);
                  }
                  *long long v32 = v202;
                  unsigned char *v28 = v203;
                }
                else
                {
                  *long long v32 = PDAscreenPDA_17519(*v32, 255, (*v57 - ((unsigned __int16)(v201 + 1 + BYTE1(v201)) >> 8)), v203);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v199;
        }
        while (v199);
        goto LABEL_408;
      case 15:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v204 = v4;
        do
        {
          int v205 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v205 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v205
                                                            + ((*(unsigned __int8 *)v41 * v205) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v206 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v205 ^ 0xFF);
              unsigned int v207 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v206 + 65537 + ((v206 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v206 + 1 + BYTE1(v206)) >> 8));
              unsigned int v208 = HIBYTE(v207);
              if (HIBYTE(v207))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v207 = PDAoverlayPDA_17520(*v32, *v28, (*v57 - ((unsigned __int16)(v206 + 1 + BYTE1(v206)) >> 8)), v208);
                    unsigned int v208 = HIBYTE(v207);
                  }
                  *long long v32 = v207;
                  unsigned char *v28 = v208;
                }
                else
                {
                  *long long v32 = PDAoverlayPDA_17520(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v206 + 1 + BYTE1(v206)) >> 8)), v208);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v204;
        }
        while (v204);
        goto LABEL_408;
      case 16:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v209 = v4;
        do
        {
          int v210 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v210 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v210
                                                            + ((*(unsigned __int8 *)v41 * v210) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v211 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v210 ^ 0xFF);
              unsigned int v212 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v211 + 65537 + ((v211 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v211 + 1 + BYTE1(v211)) >> 8));
              unsigned int v213 = HIBYTE(v212);
              if (HIBYTE(v212))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v212 = PDAdarkenPDA_17522(*v32, *v28, (*v57 - ((unsigned __int16)(v211 + 1 + BYTE1(v211)) >> 8)), v213);
                    unsigned int v213 = HIBYTE(v212);
                  }
                  *long long v32 = v212;
                  unsigned char *v28 = v213;
                }
                else
                {
                  *long long v32 = PDAdarkenPDA_17522(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v211 + 1 + BYTE1(v211)) >> 8)), v213);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v209;
        }
        while (v209);
        goto LABEL_408;
      case 17:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v214 = v4;
        do
        {
          int v215 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v215 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v215
                                                            + ((*(unsigned __int8 *)v41 * v215) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v216 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v215 ^ 0xFF);
              unsigned int v217 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v216 + 65537 + ((v216 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v216 + 1 + BYTE1(v216)) >> 8));
              unsigned int v218 = HIBYTE(v217);
              if (HIBYTE(v217))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v217 = PDAlightenPDA_17521(*v32, *v28, (*v57 - ((unsigned __int16)(v216 + 1 + BYTE1(v216)) >> 8)), v218);
                    unsigned int v218 = HIBYTE(v217);
                  }
                  *long long v32 = v217;
                  unsigned char *v28 = v218;
                }
                else
                {
                  *long long v32 = PDAlightenPDA_17521(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v216 + 1 + BYTE1(v216)) >> 8)), v218);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v214;
        }
        while (v214);
        goto LABEL_408;
      case 18:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v219 = v4;
        do
        {
          int v220 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v220 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v220
                                                            + ((*(unsigned __int8 *)v41 * v220) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v221 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v220 ^ 0xFF);
              unsigned int v222 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v221 + 65537 + ((v221 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v221 + 1 + BYTE1(v221)) >> 8));
              unsigned int v223 = HIBYTE(v222);
              if (HIBYTE(v222))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v222 = PDAcolordodgePDA_17523(*v32, *v28, (*v57 - ((unsigned __int16)(v221 + 1 + BYTE1(v221)) >> 8)), v223);
                    unsigned int v223 = HIBYTE(v222);
                  }
                  *long long v32 = v222;
                  unsigned char *v28 = v223;
                }
                else
                {
                  *long long v32 = PDAcolordodgePDA_17523(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v221 + 1 + BYTE1(v221)) >> 8)), v223);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v219;
        }
        while (v219);
        goto LABEL_408;
      case 19:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v224 = v4;
        do
        {
          int v225 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v225 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v225
                                                            + ((*(unsigned __int8 *)v41 * v225) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v226 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v225 ^ 0xFF);
              unsigned int v227 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v226 + 65537 + ((v226 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v226 + 1 + BYTE1(v226)) >> 8));
              unsigned int v228 = HIBYTE(v227);
              if (HIBYTE(v227))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v227 = PDAcolorburnPDA_17524(*v32, *v28, (*v57 - ((unsigned __int16)(v226 + 1 + BYTE1(v226)) >> 8)), v228);
                    unsigned int v228 = HIBYTE(v227);
                  }
                  *long long v32 = v227;
                  unsigned char *v28 = v228;
                }
                else
                {
                  *long long v32 = PDAcolorburnPDA_17524(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v226 + 1 + BYTE1(v226)) >> 8)), v228);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v224;
        }
        while (v224);
        goto LABEL_408;
      case 20:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v229 = v4;
        do
        {
          int v230 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v230 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v230
                                                            + ((*(unsigned __int8 *)v41 * v230) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v231 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v230 ^ 0xFF);
              unsigned int v232 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v231 + 65537 + ((v231 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v231 + 1 + BYTE1(v231)) >> 8));
              unsigned int v233 = HIBYTE(v232);
              if (HIBYTE(v232))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v232 = PDAsoftlightPDA_17526(*v32, *v28, (*v57 - ((unsigned __int16)(v231 + 1 + BYTE1(v231)) >> 8)), v233);
                    unsigned int v233 = HIBYTE(v232);
                  }
                  *long long v32 = v232;
                  unsigned char *v28 = v233;
                }
                else
                {
                  *long long v32 = PDAsoftlightPDA_17526(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v231 + 1 + BYTE1(v231)) >> 8)), v233);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v229;
        }
        while (v229);
        goto LABEL_408;
      case 21:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v234 = v4;
        do
        {
          int v235 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v235 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v235
                                                            + ((*(unsigned __int8 *)v41 * v235) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v236 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v235 ^ 0xFF);
              unsigned int v237 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v236 + 65537 + ((v236 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v236 + 1 + BYTE1(v236)) >> 8));
              unsigned int v238 = HIBYTE(v237);
              if (HIBYTE(v237))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v237 = PDAhardlightPDA_17525(*v32, *v28, (*v57 - ((unsigned __int16)(v236 + 1 + BYTE1(v236)) >> 8)), v238);
                    unsigned int v238 = HIBYTE(v237);
                  }
                  *long long v32 = v237;
                  unsigned char *v28 = v238;
                }
                else
                {
                  *long long v32 = PDAhardlightPDA_17525(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v236 + 1 + BYTE1(v236)) >> 8)), v238);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v234;
        }
        while (v234);
        goto LABEL_408;
      case 22:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v239 = v4;
        do
        {
          int v240 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v240 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v240
                                                            + ((*(unsigned __int8 *)v41 * v240) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v241 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v240 ^ 0xFF);
              unsigned int v242 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v241 + 65537 + ((v241 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v241 + 1 + BYTE1(v241)) >> 8));
              unsigned int v243 = HIBYTE(v242);
              if (HIBYTE(v242))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v242 = PDAdifferencePDA_17527(*v32, *v28, (*v57 - ((unsigned __int16)(v241 + 1 + BYTE1(v241)) >> 8)), v243);
                    unsigned int v243 = HIBYTE(v242);
                  }
                  *long long v32 = v242;
                  unsigned char *v28 = v243;
                }
                else
                {
                  *long long v32 = PDAdifferencePDA_17527(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v241 + 1 + BYTE1(v241)) >> 8)), v243);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v239;
        }
        while (v239);
        goto LABEL_408;
      case 23:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v244 = v4;
        do
        {
          int v245 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v245 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v245
                                                            + ((*(unsigned __int8 *)v41 * v245) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v246 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v245 ^ 0xFF);
              unsigned int v247 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v246 + 65537 + ((v246 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v246 + 1 + BYTE1(v246)) >> 8));
              unsigned int v248 = HIBYTE(v247);
              if (HIBYTE(v247))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v247 = PDAexclusionPDA_17528(*v32, *v28, (*v57 - ((unsigned __int16)(v246 + 1 + BYTE1(v246)) >> 8)), v248);
                    unsigned int v248 = HIBYTE(v247);
                  }
                  *long long v32 = v247;
                  unsigned char *v28 = v248;
                }
                else
                {
                  *long long v32 = PDAexclusionPDA_17528(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v246 + 1 + BYTE1(v246)) >> 8)), v248);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v244;
        }
        while (v244);
        goto LABEL_408;
      case 24:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v249 = v4;
        do
        {
          int v250 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v250 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v250
                                                            + ((*(unsigned __int8 *)v41 * v250) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v251 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v250 ^ 0xFF);
              unsigned int v252 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v251 + 65537 + ((v251 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v251 + 1 + BYTE1(v251)) >> 8));
              unsigned int v253 = HIBYTE(v252);
              if (HIBYTE(v252))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v252 = PDAhuePDA_17529(*v32, *v28, (*v57 - ((unsigned __int16)(v251 + 1 + BYTE1(v251)) >> 8)), v253);
                    unsigned int v253 = HIBYTE(v252);
                  }
                  *long long v32 = v252;
                  unsigned char *v28 = v253;
                }
                else
                {
                  *long long v32 = PDAhuePDA_17529(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v251 + 1 + BYTE1(v251)) >> 8)), v253);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v249;
        }
        while (v249);
        goto LABEL_408;
      case 25:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v254 = v4;
        do
        {
          int v255 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v255 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v255
                                                            + ((*(unsigned __int8 *)v41 * v255) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v256 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v255 ^ 0xFF);
              unsigned int v257 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v256 + 65537 + ((v256 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v256 + 1 + BYTE1(v256)) >> 8));
              unsigned int v258 = HIBYTE(v257);
              if (HIBYTE(v257))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v257 = PDAhuePDA_17529(*v32, *v28, (*v57 - ((unsigned __int16)(v256 + 1 + BYTE1(v256)) >> 8)), v258);
                    unsigned int v258 = HIBYTE(v257);
                  }
                  *long long v32 = v257;
                  unsigned char *v28 = v258;
                }
                else
                {
                  *long long v32 = PDAhuePDA_17529(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v256 + 1 + BYTE1(v256)) >> 8)), v258);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v254;
        }
        while (v254);
        goto LABEL_408;
      case 26:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v259 = v4;
        do
        {
          int v260 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v260 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v260
                                                            + ((*(unsigned __int8 *)v41 * v260) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v261 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v260 ^ 0xFF);
              unsigned int v262 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v261 + 65537 + ((v261 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v261 + 1 + BYTE1(v261)) >> 8));
              unsigned int v263 = HIBYTE(v262);
              if (HIBYTE(v262))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v262 = PDAluminosityPDA_17531((*v57 - ((unsigned __int16)(v261 + 1 + BYTE1(v261)) >> 8)), v263, *v32, *v28);
                    unsigned int v263 = HIBYTE(v262);
                  }
                  *long long v32 = v262;
                  unsigned char *v28 = v263;
                }
                else
                {
                  *long long v32 = PDAluminosityPDA_17531((*v57 - ((unsigned __int16)(v261 + 1 + BYTE1(v261)) >> 8)), v263, *v32, 0xFFu);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v259;
        }
        while (v259);
        goto LABEL_408;
      case 27:
        LODWORD(v343) = v41;
        unint64_t v41 = (unint64_t)v43;
        int v264 = v4;
        do
        {
          int v265 = *v58;
          if (*v58)
          {
            if (!v43
              || (int v265 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v265
                                                            + ((*(unsigned __int8 *)v41 * v265) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              unsigned int v266 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * (v265 ^ 0xFF);
              unsigned int v267 = (*(_DWORD *)v57 & 0xFF0000FF)
                   - ((v266 + 65537 + ((v266 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v266 + 1 + BYTE1(v266)) >> 8));
              unsigned int v268 = HIBYTE(v267);
              if (HIBYTE(v267))
              {
                if (v351)
                {
                  if (*v28)
                  {
                    unsigned int v267 = PDAluminosityPDA_17531(*v32, *v28, (*v57 - ((unsigned __int16)(v266 + 1 + BYTE1(v266)) >> 8)), v268);
                    unsigned int v268 = HIBYTE(v267);
                  }
                  *long long v32 = v267;
                  unsigned char *v28 = v268;
                }
                else
                {
                  *long long v32 = PDAluminosityPDA_17531(*v32, 0xFFu, (*v57 - ((unsigned __int16)(v266 + 1 + BYTE1(v266)) >> 8)), v268);
                }
              }
            }
          }
          ++v58;
          v57 += 4;
          v41 += v43 != 0;
          ++v32;
          v28 += v30;
          --v264;
        }
        while (v264);
LABEL_408:
        int v43 = (unsigned __int8 *)(v41 + v342);
        v32 += v344;
        v28 += v345;
        int v36 = v340;
        uint64_t v37 = v339;
        uint64_t v105 = v349;
        uint64_t v95 = v350;
        int v94 = v348;
        LODWORD(v41) = v343;
        goto LABEL_487;
      default:
        goto LABEL_212;
    }
    break;
  }
  while (1)
  {
    unsigned int v166 = *v58;
    if (*v58)
    {
      if (!v43) {
        goto LABEL_201;
      }
      unsigned int v167 = *v136 * v166 + ((*v136 * v166) >> 8) + 1;
      if (BYTE1(v167)) {
        break;
      }
    }
LABEL_202:
    ++v58;
    v57 += 4;
    v136 += v43 != 0;
    ++v32;
    v28 += v30;
    if (!--v165)
    {
LABEL_210:
      int v43 = &v136[v342];
LABEL_211:
      v32 += v344;
      v28 += v345;
LABEL_212:
      uint64_t v105 = v349;
      uint64_t v95 = v350;
      goto LABEL_486;
    }
  }
  unsigned int v166 = v167 >> 8;
LABEL_201:
  char v168 = ~(_BYTE)v166;
  unsigned int v169 = (*(_DWORD *)v57 | (HIBYTE(*(_DWORD *)v57) << 16)) * ~(_BYTE)v166;
  unsigned int v170 = (*(_DWORD *)v57 & 0xFF0000FF)
       - ((v169 + 65537 + ((v169 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v169 + 1 + BYTE1(v169)) >> 8));
  unsigned int v171 = (v170 | (HIBYTE(v170) << 16)) * (*v28 ^ 0xFF)
       + (*v32 | (*v28 << 16)) * (v168 + HIBYTE(v170));
  int v172 = v171 + 65537 + ((v171 >> 8) & 0xFF00FF);
  *long long v32 = BYTE1(v172);
  unsigned char *v28 = HIBYTE(v172);
  goto LABEL_202;
}

uint64_t PDAmultiplyPDA_17518(int a1, int a2, int a3, int a4)
{
  unsigned int v4 = (a2 ^ 0xFF) * a3 + ((a4 ^ 0xFF) + a3) * a1;
  int v5 = 255 * (a4 + a2) - a4 * a2;
  unsigned int v6 = v4 + 128;
  if (v4 >> 7 >= 0x1FD) {
    unsigned int v6 = 65152;
  }
  unsigned int v7 = (v6 + (v6 >> 8)) >> 8;
  if (v5 >= 65152) {
    unsigned int v8 = 65152;
  }
  else {
    unsigned int v8 = v5 + 128;
  }
  return (v7 | ((v8 + (v8 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAscreenPDA_17519(int a1, int a2, int a3, int a4)
{
  unsigned int v4 = (a1 ^ 0xFF) * a3 - a1 + (a1 << 8);
  int v5 = 255 * (a4 + a2) - a4 * a2;
  unsigned int v6 = v4 + 128;
  if (v4 >> 7 >= 0x1FD) {
    unsigned int v6 = 65152;
  }
  unsigned int v7 = v6 + (v6 >> 8);
  if (v5 >= 65152) {
    unsigned int v8 = 65152;
  }
  else {
    unsigned int v8 = v5 + 128;
  }
  return (((v8 + (v8 >> 8)) << 16) | (v7 >> 8)) & 0xFF0000FF;
}

uint64_t PDAoverlayPDA_17520(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a3 >= a4) {
    unsigned int v4 = a4;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a1 >= a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = a1;
  }
  int v6 = 2 * v5 * v4;
  int v7 = (a4 + 255) * v5 + (a2 + 255) * v4 - (a4 * a2 + v6);
  int v8 = (a2 ^ 0xFF) * v4 + (a4 ^ 0xFF) * v5 + v6;
  if (v5 >= (a2 + 1) >> 1) {
    int v8 = v7;
  }
  int v9 = 255 * (a4 + a2) - a4 * a2;
  if (v8 >= 65152) {
    unsigned int v10 = 65152;
  }
  else {
    unsigned int v10 = v8 + 128;
  }
  unsigned int v11 = (v10 + (v10 >> 8)) >> 8;
  if (v9 >= 65152) {
    unsigned int v12 = 65152;
  }
  else {
    unsigned int v12 = v9 + 128;
  }
  return (v11 | ((v12 + (v12 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAlightenPDA_17521(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a3 >= a4) {
    unsigned int v4 = a4;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a1 >= a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = a1;
  }
  int v6 = a4 * v5;
  if (v4 * a2 > a4 * v5) {
    int v6 = v4 * a2;
  }
  unsigned int v7 = (a4 ^ 0xFF) * v5 + (a2 ^ 0xFF) * v4 + v6;
  int v8 = 255 * (a4 + a2) - a4 * a2;
  unsigned int v9 = v7 + 128;
  if (v7 >> 7 >= 0x1FD) {
    unsigned int v9 = 65152;
  }
  unsigned int v10 = (v9 + (v9 >> 8)) >> 8;
  if (v8 >= 65152) {
    unsigned int v11 = 65152;
  }
  else {
    unsigned int v11 = v8 + 128;
  }
  return (v10 | ((v11 + (v11 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAdarkenPDA_17522(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a3 >= a4) {
    unsigned int v4 = a4;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a1 >= a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = a1;
  }
  int v6 = a4 * v5;
  if (v4 * a2 < a4 * v5) {
    int v6 = v4 * a2;
  }
  unsigned int v7 = (a4 ^ 0xFF) * v5 + (a2 ^ 0xFF) * v4 + v6;
  int v8 = 255 * (a4 + a2) - a4 * a2;
  unsigned int v9 = v7 + 128;
  if (v7 >> 7 >= 0x1FD) {
    unsigned int v9 = 65152;
  }
  unsigned int v10 = (v9 + (v9 >> 8)) >> 8;
  if (v8 >= 65152) {
    unsigned int v11 = 65152;
  }
  else {
    unsigned int v11 = v8 + 128;
  }
  return (v10 | ((v11 + (v11 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAcolordodgePDA_17523(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a1 >= a2) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = a1;
  }
  if (a3 >= a4) {
    unsigned int v5 = a4;
  }
  else {
    unsigned int v5 = a3;
  }
  if (v4)
  {
    if (a3 >= a4) {
      int v6 = 65025;
    }
    else {
      int v6 = (int)(a4 * v4 * a4) / (int)(a4 - v5);
    }
  }
  else
  {
    int v6 = 0;
  }
  int v7 = (a4 ^ 0xFF) * v4 + (a2 ^ 0xFF) * v5 + v6;
  int v8 = 255 * (a4 + a2) - a4 * a2;
  if (v7 >= v8) {
    int v7 = 255 * (a4 + a2) - a4 * a2;
  }
  if (v7 >= 65152) {
    unsigned int v9 = 65152;
  }
  else {
    unsigned int v9 = v7 + 128;
  }
  unsigned int v10 = (v9 + (v9 >> 8)) >> 8;
  if (v8 >= 65152) {
    unsigned int v11 = 65152;
  }
  else {
    unsigned int v11 = v8 + 128;
  }
  return (v10 | ((v11 + (v11 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAcolorburnPDA_17524(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v4 = a4 * a2;
  if (a3 >= a4) {
    int v5 = a4;
  }
  else {
    int v5 = a3;
  }
  if (a1 >= a2) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = a1;
  }
  unsigned int v7 = v4 + (a4 ^ 0xFF) * v6 + (a2 ^ 0xFF) * v5;
  if (a2 <= a1) {
    goto LABEL_10;
  }
  if (v5)
  {
    unsigned int v7 = (v7 - (int)(a4 * a4 * (a2 - v6)) / v5) & ~((int)(v7 - (int)(a4 * a4 * (a2 - v6)) / v5) >> 31);
LABEL_10:
    int v8 = 255 * (a4 + a2) - v4;
    if (v7 >> 7 > 0x1FC) {
      unsigned int v9 = 65152;
    }
    else {
      unsigned int v9 = v7 + 128;
    }
    goto LABEL_14;
  }
  int v8 = 255 * (a4 + a2) - v4;
  unsigned int v9 = 128;
LABEL_14:
  if (v8 >= 65152) {
    unsigned int v10 = 65152;
  }
  else {
    unsigned int v10 = v8 + 128;
  }
  return ((v9 + (v9 >> 8)) >> 8) & 0xFFFFFF | (((unsigned __int16)(v10 + (v10 >> 8)) >> 8) << 24);
}

uint64_t PDAhardlightPDA_17525(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a3 >= a4) {
    unsigned int v4 = a4;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a1 >= a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = a1;
  }
  int v6 = 2 * v5 * v4;
  int v7 = (a2 ^ 0xFF) * v4 + (a4 ^ 0xFF) * v5 + v6;
  int v8 = (a4 + 255) * v5 + (a2 + 255) * v4 - (a4 * a2 + v6);
  if (v4 > (a4 + 1) >> 1) {
    int v9 = v8;
  }
  else {
    int v9 = v7;
  }
  int v10 = 255 * (a4 + a2) - a4 * a2;
  if (v9 >= 65152) {
    unsigned int v11 = 65152;
  }
  else {
    unsigned int v11 = v9 + 128;
  }
  unsigned int v12 = (v11 + (v11 >> 8)) >> 8;
  if (v10 >= 65152) {
    unsigned int v13 = 65152;
  }
  else {
    unsigned int v13 = v10 + 128;
  }
  return (v12 | ((v13 + (v13 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAsoftlightPDA_17526(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a1 >= a2) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = a1;
  }
  if (a3 >= a4) {
    unsigned int v5 = a4;
  }
  else {
    unsigned int v5 = a3;
  }
  int v6 = 2 * v4 * v5 - (int)(v4 * v4 * (2 * v5 - a4)) / (int)a2;
  unsigned int v7 = (a4 ^ 0xFF) * v4 + (a2 ^ 0xFF) * v5 + (v6 & ~(v6 >> 31));
  int v8 = 255 * (a4 + a2) - a4 * a2;
  unsigned int v9 = v7 + 128;
  if (v7 >> 7 >= 0x1FD) {
    unsigned int v9 = 65152;
  }
  unsigned int v10 = (v9 + (v9 >> 8)) >> 8;
  if (v8 >= 65152) {
    unsigned int v11 = 65152;
  }
  else {
    unsigned int v11 = v8 + 128;
  }
  return (v10 | ((v11 + (v11 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAdifferencePDA_17527(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a3 >= a4) {
    unsigned int v4 = a4;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a1 >= a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = a1;
  }
  unsigned int v6 = v4 + v5;
  int v7 = a4 * v5;
  int v8 = v4 * a2;
  int v10 = v7 - v8;
  BOOL v9 = v7 - v8 < 0;
  int v11 = 255 * v6 - v8 - v7;
  if (v9) {
    int v12 = -v10;
  }
  else {
    int v12 = v10;
  }
  int v13 = v11 + v12;
  int v14 = 255 * (a4 + a2) - a4 * a2;
  if (v13 >= 65152) {
    unsigned int v15 = 65152;
  }
  else {
    unsigned int v15 = v13 + 128;
  }
  unsigned int v16 = (v15 + (v15 >> 8)) >> 8;
  if (v14 >= 65152) {
    unsigned int v17 = 65152;
  }
  else {
    unsigned int v17 = v14 + 128;
  }
  return (v16 | ((v17 + (v17 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAexclusionPDA_17528(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a3 >= a4) {
    unsigned int v4 = a4;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a1 >= a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = a1;
  }
  int v6 = 255 * (v4 + v5) - 2 * v5 * v4;
  int v7 = 255 * (a4 + a2) - a4 * a2;
  if (v6 >= 65152) {
    unsigned int v8 = 65152;
  }
  else {
    unsigned int v8 = v6 + 128;
  }
  unsigned int v9 = (v8 + (v8 >> 8)) >> 8;
  if (v7 >= 65152) {
    unsigned int v10 = 65152;
  }
  else {
    unsigned int v10 = v7 + 128;
  }
  return (v9 | ((v10 + (v10 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAhuePDA_17529(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a1 >= a2) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = a1;
  }
  int v5 = (a4 ^ 0xFF) * v4;
  if (a4 == 255) {
    int v5 = 0;
  }
  else {
    LOBYTE(v4) = (unsigned __int16)(a4 * v4 + 128 + ((a4 * v4 + 128) >> 8)) >> 8;
  }
  if (a3 >= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = v5 + (a2 ^ 0xFF) * v6;
  if (v7 >> 7 >= 0x1FD) {
    unsigned int v8 = 65152;
  }
  else {
    unsigned int v8 = v7 + 128;
  }
  return (v4 + ((unsigned __int16)(v8 + (v8 >> 8)) >> 8)) | ((a4
                                                                             + a2
                                                                             - ((a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8)) << 24);
}

uint64_t PDAluminosityPDA_17531(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a3 >= a4) {
    unsigned int v4 = a4;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a1 >= a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = a1;
  }
  unsigned int v6 = (a4 ^ 0xFF) * v5;
  if (a4 == 255) {
    unsigned int v6 = 0;
  }
  if (a2 != 255)
  {
    v6 += (a2 ^ 0xFF) * v4;
    LOBYTE(v4) = (unsigned __int16)(v4 * a2 + 128 + ((v4 * a2 + 128) >> 8)) >> 8;
  }
  if (v6 >> 7 >= 0x1FD) {
    unsigned int v7 = 65152;
  }
  else {
    unsigned int v7 = v6 + 128;
  }
  return (v4 + ((unsigned __int16)(v7 + (v7 >> 8)) >> 8)) | ((a4
                                                                             + a2
                                                                             - ((a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8)) << 24);
}

void W8_shade_axial_W(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  float v8 = *(float *)(a1 + 280);
  float v9 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(void *)(a1 + 272) + 4) * (float)a3))
             + (float)(v8 * (float)(*(float *)(*(void *)(a1 + 272) + 4) * (float)a2)));
  uint64_t v10 = a1 + 368;
  uint64_t v11 = *(void *)(a1 + 368);
  uint64_t v12 = ((unint64_t)a3 >> 4) & 0xF0;
  uint64_t v13 = v11 + v12;
  if (v11) {
    uint64_t v14 = v11 + v12;
  }
  else {
    uint64_t v14 = a1 + 368;
  }
  if (v11) {
    char v15 = 15;
  }
  else {
    char v15 = 0;
  }
  float v17 = *(float *)(a1 + 336);
  LODWORD(a8) = *(_DWORD *)(a1 + 344);
  float v18 = *(float *)(a1 + 304);
  float v19 = *(float *)(a1 + 308);
  int v20 = *(_DWORD *)(a1 + 320);
  int v21 = *(_DWORD *)(a1 + 324);
  unsigned int v22 = (a2 >> 8) & 0xF;
  uint64_t v25 = a1 + 144;
  uint64_t v23 = *(_DWORD **)(a1 + 144);
  uint64_t v24 = *(void *)(v25 + 8);
  uint64_t v26 = *(unsigned __int16 **)(a1 + 376);
  uint64_t v27 = *(void *)(a1 + 360);
  if (v8 != 0.0)
  {
    if (!v11) {
      LOBYTE(v22) = 0;
    }
    while (1)
    {
      int v33 = v20;
      if (v9 >= v18)
      {
        int v33 = v21;
        if (v9 <= v19) {
          int v33 = (int)(float)(*(float *)&a8 * (float)(v9 - v17));
        }
      }
      if (v33 < 0)
      {
        if (!v26)
        {
          char v40 = 0;
          goto LABEL_39;
        }
        int v39 = *(unsigned __int8 *)(v14 + v22);
        unsigned int v37 = v39 + *v26;
        int v38 = v39 + v26[1];
      }
      else
      {
        int v34 = (unsigned __int16 *)(v27 + 2 * (2 * v33));
        int v35 = v34[1];
        int v36 = *(unsigned __int8 *)(v14 + v22);
        unsigned int v37 = v36 + *v34;
        int v38 = v36 + v35;
      }
      *(_DWORD *)uint64_t v24 = ((v37 >> 8) | (v38 << 16)) & 0xFF0000FF;
      char v40 = -1;
LABEL_39:
      LOBYTE(v22) = (v22 + 1) & v15;
      float v9 = v8 + v9;
      v24 += 4;
      *(unsigned char *)uint64_t v23 = v40;
      uint64_t v23 = (_DWORD *)((char *)v23 + 1);
      if (!--a4) {
        return;
      }
    }
  }
  if (v11) {
    int v28 = 15;
  }
  else {
    int v28 = 0;
  }
  if (v11) {
    LODWORD(v29) = (a2 >> 8) & 0xF;
  }
  else {
    LODWORD(v29) = 0;
  }
  if (v11) {
    LODWORD(v30) = (BYTE1(a2) + 1) & 0xF;
  }
  else {
    LODWORD(v30) = 0;
  }
  if (v11) {
    uint64_t v31 = v13;
  }
  else {
    uint64_t v31 = v10;
  }
  if (v9 >= v18)
  {
    int v20 = v21;
    if (v9 <= v19) {
      int v20 = (int)(float)(*(float *)&a8 * (float)(v9 - v17));
    }
  }
  if ((v20 & 0x80000000) == 0 || v26)
  {
    unint64_t v41 = (unsigned __int16 *)(v27 + 2 * (2 * v20));
    if (v20 < 0) {
      uint64_t v42 = v26;
    }
    else {
      uint64_t v42 = v41;
    }
    unsigned int v43 = v42[1];
    unsigned int v44 = *v42;
    if (v11)
    {
      int32x2_t v45 = vdup_n_s32(v44);
      int32x2_t v46 = vdup_n_s32(v43);
      int v47 = a4 + 4;
      do
      {
        LOBYTE(a8) = *(unsigned char *)(v31 + v29);
        BYTE4(a8) = *(unsigned char *)(v31 + v30);
        uint64_t v29 = (v29 + 1) & v28;
        int32x2_t v48 = (int32x2_t)vand_s8(*(int8x8_t *)&a8, (int8x8_t)0xFF000000FFLL);
        int8x8_t v49 = vorr_s8((int8x8_t)(*(void *)&vshl_n_s32(vadd_s32(v46, v48), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(void *)&vshr_n_u32((uint32x2_t)vadd_s32(v45, v48), 8uLL) & 0xFFFFFEFFFFFFFEFFLL));
        *(int8x8_t *)uint64_t v24 = v49;
        uint64_t v30 = (v30 + 1) & v28;
        v49.i8[0] = *(unsigned char *)(v31 + v29);
        v49.i8[4] = *(unsigned char *)(v31 + v30);
        int32x2_t v50 = (int32x2_t)vand_s8(v49, (int8x8_t)0xFF000000FFLL);
        a8 = COERCE_DOUBLE(vorr_s8((int8x8_t)(*(void *)&vshl_n_s32(vadd_s32(v46, v50), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(void *)&vshr_n_u32((uint32x2_t)vadd_s32(v45, v50), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
        *(double *)(v24 + 8) = a8;
        *v23++ = -1;
        v47 -= 4;
        v24 += 16;
      }
      while (v47 > 4);
    }
    else
    {
      int32x4_t v51 = vdupq_n_s32((v44 >> 8) | (BYTE1(v43) << 24));
      int v52 = a4 + 4;
      do
      {
        *(int32x4_t *)uint64_t v24 = v51;
        v24 += 16;
        *v23++ = -1;
        v52 -= 4;
      }
      while (v52 > 4);
    }
  }
  else
  {
    if (a4 >= 4) {
      int v32 = 4;
    }
    else {
      int v32 = a4;
    }
    bzero(v23, ((a4 - v32 + 3) & 0xFFFFFFFC) + 4);
  }
}

uint64_t W8_shade_custom_W(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(result + 280);
  float v5 = *(float *)(*(void *)(result + 272) + 4);
  float v6 = v5 * (float)a2;
  float v7 = v5 * (float)a3;
  float v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  uint64_t v9 = result + 368;
  uint64_t v10 = *(void *)(result + 368);
  int v11 = 15;
  if (v10) {
    uint64_t v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  }
  else {
    int v11 = 0;
  }
  float v12 = *(float *)(result + 284);
  float v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  float v14 = *(float *)(result + 304);
  float v15 = *(float *)(result + 308);
  float v16 = *(float *)(result + 312);
  float v17 = *(float *)(result + 316);
  float v18 = *(float *)(result + 336);
  float v19 = *(float *)(result + 348);
  float v20 = *(float *)(result + 344);
  float v21 = *(float *)(result + 356);
  unsigned int v22 = *(unsigned __int16 **)(result + 376);
  uint64_t v23 = *(void *)(result + 360);
  int v24 = 2 * *(_DWORD *)(result + 48);
  if (v10) {
    uint64_t v25 = ((unint64_t)a2 >> 8) & 0xF;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v27 = *(char **)(result + 144);
  uint64_t v26 = *(unsigned int **)(result + 152);
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      int v33 = (unsigned __int16 *)(v23
                               + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                               + 4 * (int)(float)(v20 * (float)(v8 - v18)));
      CFDictionaryRef result = v33[1];
      int v34 = *(unsigned __int8 *)(v9 + v25);
      unsigned int v31 = v34 + *v33;
      int v32 = v34 + result;
      goto LABEL_21;
    }
    if (v22)
    {
      CFDictionaryRef result = *(unsigned __int8 *)(v9 + v25);
      unsigned int v31 = result + *v22;
      int v32 = result + v22[1];
LABEL_21:
      unsigned int *v26 = ((v31 >> 8) | (v32 << 16)) & 0xFF0000FF;
      char v35 = -1;
      goto LABEL_22;
    }
    char v35 = 0;
LABEL_22:
    uint64_t v25 = (v25 + 1) & v11;
    float v8 = v4 + v8;
    float v13 = v12 + v13;
    ++v26;
    *v27++ = v35;
    --a4;
  }
  while (a4);
  return result;
}

void W8_shade_conic_W(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(a1 + 280);
  float v5 = *(float *)(*(void *)(a1 + 272) + 4);
  float v6 = v5 * (float)a2;
  float v7 = v5 * (float)a3;
  float v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  uint64_t v9 = *(void *)(a1 + 368);
  if (v9) {
    int v10 = 15;
  }
  else {
    int v10 = 0;
  }
  if (v9) {
    uint64_t v11 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  }
  else {
    uint64_t v11 = a1 + 368;
  }
  float v12 = *(float *)(a1 + 284);
  float v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  float v29 = *(float *)(a1 + 336);
  float v30 = *(float *)(a1 + 304);
  float v15 = *(float *)(a1 + 344);
  uint64_t v16 = *(void *)(a1 + 360);
  float v18 = *(unsigned char **)(a1 + 144);
  float v17 = *(unsigned int **)(a1 + 152);
  if (v9) {
    uint64_t v19 = ((unint64_t)a2 >> 8) & 0xF;
  }
  else {
    uint64_t v19 = 0;
  }
  float v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    float v21 = v15 * (float)((float)(v30 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v29);
    unsigned int v22 = vcvtms_s32_f32(v21);
    float v23 = ceilf(v21);
    float v24 = (float)((float)(v21 - (float)(int)floorf(v21)) * 255.0) + 0.5;
    unsigned int v25 = vcvtms_s32_f32(v15 + v21);
    float v26 = ceilf(v21 - v15);
    if (v21 < 0.0) {
      unsigned int v22 = v25;
    }
    if (v21 <= v15) {
      float v27 = v23;
    }
    else {
      float v27 = v26;
    }
    int v28 = (unsigned __int16 *)(v16 + 4 * (int)v27);
    *v17++ = (((*(unsigned __int8 *)(v11 + v19)
              + (((int)v24 * v28[1]
                + (255 - (int)v24) * *(unsigned __int16 *)(v16 + 2 * (int)(2 * v22) + 2)) >> 8)) << 16) | ((*(unsigned __int8 *)(v11 + v19) + (((int)v24 * *v28 + (255 - (int)v24) * *(unsigned __int16 *)(v16 + 2 * (int)(2 * v22))) >> 8)) >> 8)) & 0xFF0000FF;
    uint64_t v19 = (v19 + 1) & v10;
    float v8 = v4 + v8;
    float v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

void W8_shade_radial_W(uint64_t a1, unint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  float v8 = *(float *)(a1 + 280);
  float v9 = *(float *)(a1 + 284);
  float v10 = *(float *)(*(void *)(a1 + 272) + 4);
  float v11 = v10 * (float)(uint64_t)a2;
  float v12 = v10 * (float)(uint64_t)a3;
  float v13 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v12) + (float)(v8 * v11));
  float v14 = *(float *)(a1 + 300) + (float)((float)(v12 * *(float *)(a1 + 292)) + (float)(v9 * v11));
  uint64_t v16 = *(float **)(a1 + 400);
  float v17 = *(float *)(a1 + 336);
  float v18 = *(float *)(a1 + 344);
  LODWORD(a8) = *(_DWORD *)(a1 + 304);
  float v19 = *(float *)(a1 + 308);
  uint64_t v20 = *(unsigned int *)(a1 + 324);
  float v21 = v16[2];
  float v22 = v16[4];
  float v23 = v16[5];
  float v24 = v16[7];
  uint64_t v27 = a1 + 144;
  unsigned int v25 = *(char **)(a1 + 144);
  uint64_t v26 = *(void *)(v27 + 8);
  int v28 = *(unsigned __int16 **)(a1 + 376);
  uint64_t v29 = *(void *)(a1 + 360);
  uint64_t v30 = (a2 >> 8) & 0xF;
  if (v21 != 0.0 || v24 != 0.0 || v9 != 0.0)
  {
    int v40 = *(_DWORD *)(a1 + 320);
    float v41 = v16[3];
    float v42 = v16[6];
    float v43 = v16[8];
    uint64_t v44 = a1 + 368;
    uint64_t v45 = *(void *)(a1 + 368);
    uint64_t v46 = v45 + ((a3 >> 4) & 0xF0);
    BOOL v34 = v45 == 0;
    int v47 = 15;
    if (v34)
    {
      int v47 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v44 = v46;
    }
    float v48 = -v42;
    float v49 = v19 - *(float *)&a8;
    while (1)
    {
      float v50 = v48 + (float)((float)(v13 + v13) * v21);
      float v51 = (float)((float)(v14 * v14) + (float)(v13 * v13)) - v24;
      if (v23 == 0.0)
      {
        float v58 = v51 / v50;
      }
      else
      {
        float v52 = (float)((float)(v23 * -4.0) * v51) + (float)(v50 * v50);
        if (v52 < 0.0) {
          goto LABEL_51;
        }
        float v53 = sqrtf(v52);
        float v54 = v43 * (float)(v50 - v53);
        float v55 = v50 + v53;
        float v56 = v43 * v55;
        BOOL v57 = (float)(v43 * v55) <= v54;
        if ((float)(v43 * v55) <= v54) {
          float v58 = v43 * v55;
        }
        else {
          float v58 = v54;
        }
        if (v57) {
          float v56 = v54;
        }
        if (v56 < 0.0)
        {
          BOOL v59 = v56 < v41;
LABEL_37:
          int v60 = v40;
          if (v59) {
            goto LABEL_51;
          }
LABEL_38:
          if ((v60 & 0x80000000) == 0) {
            goto LABEL_50;
          }
          goto LABEL_51;
        }
        if (v56 <= 1.0)
        {
          float v61 = *(float *)&a8 + (float)(v56 * v49);
          goto LABEL_49;
        }
        if ((v20 & 0x80000000) == 0)
        {
          int v60 = v20;
          if (v56 <= v22)
          {
LABEL_50:
            int v62 = (unsigned __int16 *)(v29 + 2 * (2 * v60));
            int v63 = v62[1];
            int v64 = *(unsigned __int8 *)(v44 + v30);
            unsigned int v65 = v64 + *v62;
            int v66 = v64 + v63;
            goto LABEL_53;
          }
        }
      }
      if (v58 < 0.0)
      {
        BOOL v59 = v58 < v41;
        goto LABEL_37;
      }
      if (v58 > 1.0)
      {
        int v60 = v20;
        if (v58 > v22) {
          goto LABEL_51;
        }
        goto LABEL_38;
      }
      float v61 = *(float *)&a8 + (float)(v58 * v49);
LABEL_49:
      int v60 = (int)(float)(v18 * (float)(v61 - v17));
      if ((v60 & 0x80000000) == 0) {
        goto LABEL_50;
      }
LABEL_51:
      if (!v28)
      {
        char v68 = 0;
        goto LABEL_55;
      }
      int v67 = *(unsigned __int8 *)(v44 + v30);
      unsigned int v65 = v67 + *v28;
      int v66 = v67 + v28[1];
LABEL_53:
      *(_DWORD *)uint64_t v26 = ((v65 >> 8) | (v66 << 16)) & 0xFF0000FF;
      char v68 = -1;
LABEL_55:
      uint64_t v30 = (v30 + 1) & v47;
      float v13 = v8 + v13;
      float v14 = v9 + v14;
      v26 += 4;
      *v25++ = v68;
      if (!--a4) {
        return;
      }
    }
  }
  uint64_t v31 = a1 + 368;
  uint64_t v32 = *(void *)(a1 + 368);
  LODWORD(v33) = (BYTE1(a2) + 1) & 0xF;
  BOOL v34 = v32 == 0;
  if (v32) {
    uint64_t v35 = v32 + ((a3 >> 4) & 0xF0);
  }
  else {
    uint64_t v35 = v31;
  }
  if (v34)
  {
    LODWORD(v33) = 0;
    LODWORD(a2) = 0;
  }
  else
  {
    LODWORD(a2) = (a2 >> 8) & 0xF;
  }
  if (v34) {
    int v36 = 0;
  }
  else {
    int v36 = 15;
  }
  float v37 = v14 * v14;
  float v38 = -v23;
  if (v37 <= (float)-v23)
  {
    float v69 = fabsf(v16[8]);
    float v70 = v23 * -4.0;
    float v71 = v19 - *(float *)&a8;
    int v72 = (unsigned __int16 *)(v29 + 4 * v20);
    int v73 = a4 + 2;
    while (1)
    {
      float v74 = v37 + (float)(v13 * v13);
      float v75 = v8 + v13;
      float v76 = v37 + (float)(v75 * v75);
      if (v74 > v38 && v76 > v38)
      {
        if ((v20 & 0x80000000) != 0)
        {
          if (!v28)
          {
            char v101 = 0;
            char v100 = 0;
            goto LABEL_79;
          }
          int v85 = *v28;
          int v86 = v28[1];
        }
        else
        {
          int v85 = *v72;
          int v86 = v72[1];
        }
        int v96 = *(unsigned __int8 *)(v35 + a2);
        unsigned int v97 = v96 + v85;
        int v98 = v96 + v86;
        int v99 = *(unsigned __int8 *)(v35 + v33);
        unsigned int v93 = v99 + v85;
        int v94 = v99 + v86;
        int v95 = (v97 >> 8) | (v98 << 16);
        goto LABEL_77;
      }
      float v78 = sqrtf(v70 * v76);
      float v79 = v69 * sqrtf(v70 * v74);
      float v80 = v69 * v78;
      int v81 = (int)(float)(v18 * (float)((float)(*(float *)&a8 + (float)(v79 * v71)) - v17));
      int v82 = (int)(float)(v18 * (float)((float)(*(float *)&a8 + (float)((float)(v69 * v78) * v71)) - v17));
      if (v79 <= 1.0 && v80 <= 1.0)
      {
        float v87 = (unsigned __int16 *)(v29 + 4 * v81);
        int v88 = (unsigned __int16 *)(v29 + 4 * v82);
        int v89 = *v88;
        int v90 = v88[1];
        LODWORD(v88) = *(unsigned __int8 *)(v35 + a2);
        unsigned int v91 = v88 + *v87;
        LODWORD(v87) = v88 + v87[1];
        int v92 = *(unsigned __int8 *)(v35 + v33);
        unsigned int v93 = v92 + v89;
        int v94 = v92 + v90;
        int v95 = (v87 << 16) | (v91 >> 8);
LABEL_77:
        *(_DWORD *)uint64_t v26 = v95 & 0xFF0000FF;
        char v100 = -1;
        goto LABEL_78;
      }
      if (v79 <= 1.0)
      {
        if ((v81 & 0x80000000) == 0)
        {
          uint64_t v84 = (2 * v81);
LABEL_83:
          int v102 = (unsigned __int16 *)(v29 + 2 * v84);
          int v103 = v102[1];
          int v104 = *(unsigned __int8 *)(v35 + a2);
          unsigned int v105 = v104 + *v102;
          int v106 = v104 + v103;
          goto LABEL_86;
        }
      }
      else if (v79 <= v22)
      {
        uint64_t v84 = 2 * v20;
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_83;
        }
      }
      if (!v28)
      {
        char v100 = 0;
        goto LABEL_87;
      }
      int v107 = *(unsigned __int8 *)(v35 + a2);
      unsigned int v105 = v107 + *v28;
      int v106 = v107 + v28[1];
LABEL_86:
      *(_DWORD *)uint64_t v26 = ((v105 >> 8) | (v106 << 16)) & 0xFF0000FF;
      char v100 = -1;
LABEL_87:
      if (v80 <= 1.0)
      {
        if (v82 < 0) {
          goto LABEL_94;
        }
        uint64_t v108 = (2 * v82);
      }
      else if (v80 > v22 || (uint64_t v108 = 2 * v20, (v20 & 0x80000000) != 0))
      {
LABEL_94:
        if (!v28)
        {
          char v101 = 0;
          goto LABEL_79;
        }
        int v112 = *(unsigned __int8 *)(v35 + v33);
        unsigned int v93 = v112 + *v28;
        int v94 = v112 + v28[1];
        goto LABEL_78;
      }
      unsigned int v109 = (unsigned __int16 *)(v29 + 2 * v108);
      int v110 = v109[1];
      int v111 = *(unsigned __int8 *)(v35 + v33);
      unsigned int v93 = v111 + *v109;
      int v94 = v111 + v110;
LABEL_78:
      *(_DWORD *)(v26 + 4) = ((v93 >> 8) | (v94 << 16)) & 0xFF0000FF;
      char v101 = -1;
LABEL_79:
      float v13 = v8 + v75;
      LOBYTE(a2) = (a2 + 1) & v36;
      LOBYTE(v33) = (v33 + 1) & v36;
      v26 += 8;
      *unsigned int v25 = v100;
      v25[1] = v101;
      v25 += 2;
      v73 -= 2;
      if (v73 <= 2) {
        return;
      }
    }
  }
  if (v28 || (v20 & 0x80000000) == 0)
  {
    uint64_t v113 = (unsigned __int16 *)(v29 + 4 * v20);
    if ((int)v20 >= 0) {
      uint64_t v114 = v113;
    }
    else {
      uint64_t v114 = v28;
    }
    int32x2_t v115 = vdup_n_s32(v114[1]);
    int32x2_t v116 = vdup_n_s32(*v114);
    int v117 = a4 + 4;
    do
    {
      LOBYTE(a8) = *(unsigned char *)(v35 + a2);
      BYTE4(a8) = *(unsigned char *)(v35 + v33);
      a2 = (a2 + 1) & v36;
      int32x2_t v118 = (int32x2_t)vand_s8(*(int8x8_t *)&a8, (int8x8_t)0xFF000000FFLL);
      int8x8_t v119 = vorr_s8((int8x8_t)(*(void *)&vshl_n_s32(vadd_s32(v115, v118), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(void *)&vshr_n_u32((uint32x2_t)vadd_s32(v116, v118), 8uLL) & 0xFFFFFEFFFFFFFEFFLL));
      *(int8x8_t *)uint64_t v26 = v119;
      uint64_t v33 = (v33 + 1) & v36;
      v119.i8[0] = *(unsigned char *)(v35 + a2);
      v119.i8[4] = *(unsigned char *)(v35 + v33);
      int32x2_t v120 = (int32x2_t)vand_s8(v119, (int8x8_t)0xFF000000FFLL);
      a8 = COERCE_DOUBLE(vorr_s8((int8x8_t)(*(void *)&vshl_n_s32(vadd_s32(v115, v120), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(void *)&vshr_n_u32((uint32x2_t)vadd_s32(v116, v120), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
      *(double *)(v26 + 8) = a8;
      *(_DWORD *)unsigned int v25 = -1;
      v25 += 4;
      v117 -= 4;
      v26 += 16;
    }
    while (v117 > 4);
  }
  else
  {
    if (a4 >= 4) {
      int v39 = 4;
    }
    else {
      int v39 = a4;
    }
    bzero(v25, ((a4 - v39 + 3) & 0xFFFFFFFC) + 4);
  }
}

void W8_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(void, void))
{
  v79[1] = *MEMORY[0x1E4F143B8];
  v8.n128_u64[1] = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v70 = 0u;
  v67[0] = a3;
  v67[1] = a4;
  v8.n128_u64[0] = *(unsigned int *)(a2 + 184);
  v8.n128_f32[0] = (float)(v8.n128_f32[0] * 255.0) + 0.5;
  LOBYTE(v68) = (int)v8.n128_f32[0];
  uint64_t v9 = *(int *)(a1 + 28);
  *(void *)&long long v69 = v9;
  if (*(void *)(a1 + 48)) {
    uint64_t v10 = *(int *)(a1 + 32);
  }
  else {
    uint64_t v10 = 0;
  }
  *(void *)&long long v70 = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  unsigned int v12 = *(_DWORD *)(a2 + 20);
  unsigned int v13 = HIBYTE(v12);
  unsigned int v14 = BYTE2(v12);
  if (v11)
  {
    unint64_t v15 = *(int *)(a2 + 24);
    uint64_t v16 = (uint64_t *)(a2 + 104);
    float v17 = (uint64_t *)(a2 + 72);
    float v18 = (uint64_t *)(a2 + 88);
    unsigned int v19 = v13;
  }
  else
  {
    unint64_t v15 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    uint64_t v16 = (uint64_t *)(a2 + 96);
    float v17 = (uint64_t *)(a2 + 64);
    float v18 = (uint64_t *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 112);
    unsigned int v19 = v14;
  }
  uint64_t v20 = *v18;
  uint64_t v21 = *v17;
  uint64_t v22 = *v16;
  char v23 = v19;
  *((void *)&v71 + 1) = v19;
  *((void *)&v70 + 1) = v22;
  *((void *)&v75 + 1) = v15;
  *((void *)&v74 + 1) = v20;
  *((void *)&v73 + 1) = v21;
  *((void *)&v72 + 1) = v11;
  uint64_t v24 = *(void *)(a2 + 128);
  if (v24)
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    uint64_t v26 = (uint64_t *)(a2 + 96);
    uint64_t v27 = (uint64_t *)(a2 + 64);
    int v28 = (uint64_t *)(a2 + 80);
    unsigned int v13 = v14;
  }
  else
  {
    unint64_t v25 = *(int *)(a2 + 24);
    uint64_t v26 = (uint64_t *)(a2 + 104);
    uint64_t v27 = (uint64_t *)(a2 + 72);
    int v28 = (uint64_t *)(a2 + 88);
    uint64_t v24 = *(void *)(a2 + 136);
  }
  int v66 = &v62;
  uint64_t v29 = *v28;
  uint64_t v30 = *v27;
  uint64_t v31 = *v26;
  *(void *)&long long v72 = v13;
  *(void *)&long long v71 = v31;
  *(void *)&long long v76 = v25;
  *(void *)&long long v75 = v29;
  *(void *)&long long v74 = v30;
  *(void *)&long long v73 = v24;
  uint64_t v32 = *(int *)(a1 + 4);
  MEMORY[0x1F4188790](a1, v8);
  unsigned int v65 = (char *)&v62 - v34 - 15;
  if (v35 <= 0xFFFFFFFFFFFFFFELL) {
    float v37 = (char *)&v62 - v34 - 15;
  }
  else {
    float v37 = 0;
  }
  if (v35 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000402)
  {
    uint64_t v63 = v33;
    int v64 = a5;
    uint64_t v38 = v36;
    float v37 = (char *)malloc_type_malloc(16 * v32, 0x1B1F656EuLL);
    uint64_t v33 = v63;
    uint64_t v36 = v38;
    a5 = v64;
  }
  *((void *)&v76 + 1) = v37;
  if (v37)
  {
    uint64_t v39 = v32;
    if (*(void *)(a2 + 176))
    {
      if ((int)v32 >= 1)
      {
        int v40 = (uint64_t *)(v37 + 8);
        uint64_t v41 = -v33;
        uint64_t v42 = v36 - v22;
        do
        {
          if (((v41 + v22) | v42) < 0)
          {
            unint64_t v45 = 0;
            uint64_t v46 = 0;
          }
          else
          {
            unint64_t v43 = ((v22 & (unint64_t)~(-1 << v23)) >> (v23 - 4)) & 0xF;
            char v44 = weights_21383[v43];
            if (v43 - 7 >= 9) {
              unint64_t v45 = -(uint64_t)v15;
            }
            else {
              unint64_t v45 = v15;
            }
            uint64_t v46 = v44 & 0xF;
          }
          uint64_t v33 = v15 * (v22 >> v23);
          *(v40 - 1) = v33;
          *int v40 = v46 | (16 * v45);
          v40 += 2;
          v22 += v11;
          v42 -= v11;
          --v39;
        }
        while (v39);
      }
    }
    else if ((int)v32 >= 1)
    {
      int v47 = v37 + 8;
      do
      {
        *(v47 - 1) = v15 * (v22 >> v23);
        *int v47 = 0;
        v47 += 2;
        v22 += v11;
        --v39;
      }
      while (v39);
    }
    float v48 = v37;
    int v49 = *(_DWORD *)(a1 + 4);
    int v50 = *(_DWORD *)(a1 + 8);
    int v77 = v50;
    int v78 = v49;
    float v51 = *(int **)(a1 + 136);
    if (v51)
    {
      int v52 = *(_DWORD *)(a1 + 104);
      LODWORD(v79[0]) = *(_DWORD *)(a1 + 108);
      HIDWORD(v79[0]) = v52;
      shape_enum_clip_alloc((uint64_t)v37, v33, v51, 1, 1, 1, v52, v79[0], v49, v50);
      float v54 = v53;
      if (v53) {
        goto LABEL_36;
      }
    }
    int v55 = 0;
    int v56 = 0;
    float v54 = 0;
    v79[0] = 0;
    while (1)
    {
      uint64_t v57 = *(int *)(a1 + 16) + (uint64_t)v56;
      uint64_t v58 = *(void *)(a1 + 48);
      uint64_t v59 = *(int *)(a1 + 12) + (uint64_t)v55;
      uint64_t v60 = *(void *)(a1 + 40) + v9 * v57 + v59;
      uint64_t v61 = v58 + v10 * v57 + v59;
      if (!v58) {
        uint64_t v61 = 0;
      }
      *((void *)&v68 + 1) = v60;
      *((void *)&v69 + 1) = v61;
      a5(a2, v67);
      if (!v54) {
        break;
      }
LABEL_36:
      if (!shape_enum_clip_next((uint64_t)v54, (int *)v79 + 1, v79, &v78, &v77))
      {
        free(v54);
        break;
      }
      int v56 = v79[0];
      int v55 = HIDWORD(v79[0]);
      uint64_t v9 = v69;
      uint64_t v10 = v70;
    }
    if (v48 != v65) {
      free(v48);
    }
  }
}

uint64_t W8_image_mark_rgb32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  if (*(void *)(result + 40)) {
    int v6 = 0;
  }
  else {
    int v6 = 255;
  }
  float v7 = (unsigned char *)*((void *)a2 + 2);
  __n128 v8 = (unsigned char *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v123 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v123 = 0;
  }
  int v9 = *((unsigned __int8 *)a2 + 8);
  int v10 = a2[1];
  int v122 = *a2;
  uint64_t v121 = *((void *)a2 + 3) - a5;
  uint64_t v11 = v8 != 0;
  uint64_t v13 = *((void *)a2 + 17);
  uint64_t v12 = *((void *)a2 + 18);
  uint64_t v14 = *((void *)a2 + 9);
  uint64_t v120 = *((void *)a2 + 11);
  uint64_t v15 = *((void *)a2 + 7) + v120 * a4;
  uint64_t v16 = *(unsigned int **)(result + 32);
  float v17 = (char *)v16
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  if (*(void *)(result + 176))
  {
    uint64_t v114 = *((void *)a2 + 15);
    uint64_t v115 = *((void *)a2 + 13);
    char v112 = v14 - 4;
    uint64_t v113 = ~(-1 << v14);
    float v18 = (unsigned int *)(v17 - 4);
    int v19 = v9 ^ 0xFF;
    uint64_t v118 = result;
    uint64_t v110 = a5;
    uint64_t v111 = -v13;
    uint64_t v109 = v12 + 16 * a3 + 8;
    uint64_t v116 = *((void *)a2 + 9);
    uint64_t v117 = *((void *)a2 + 17);
    while (1)
    {
      if (((v114 - v15) | (v15 - v115)) < 0)
      {
        int v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v15 & (unint64_t)v113) >> v112) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v111 : v13;
        int v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *(void *)(result + 32) + (v15 >> v14) * v13;
      if (v122 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v24 = v15;
        unint64_t v25 = (uint64_t *)v109;
        uint64_t v26 = v110;
        while (1)
        {
          uint64_t v27 = *(v25 - 1);
          uint64_t v28 = *v25;
          uint64_t v29 = v23 + v27;
          if ((unint64_t)v18 >= v23 + v27) {
            uint64_t v30 = (unsigned int *)(v23 + v27);
          }
          else {
            uint64_t v30 = v18;
          }
          if (v30 < v16) {
            uint64_t v30 = v16;
          }
          unsigned int v31 = *v30;
          char v32 = v28 & 0xF;
          if ((v28 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            unint64_t v43 = (unsigned int *)(v29 + v21);
            if ((unint64_t)v18 < v29 + v21) {
              unint64_t v43 = v18;
            }
            if (v43 < v16) {
              unint64_t v43 = v16;
            }
            int v44 = BLEND8_21385[v22];
            unsigned int v41 = v31 - ((v44 & v31) >> v22);
            unsigned int v42 = (v44 & *v43) >> v22;
            goto LABEL_46;
          }
LABEL_47:
          unsigned int v45 = __ROL4__(v31, v10);
          int v46 = v45 | v6;
          unsigned int v47 = (((v45 >> 23) & 0x1FE) + BYTE1(v45) + (((v45 >> 8) & 0xFF00) >> 6) + (((v45 >> 8) & 0xFF00) >> 8)) >> 3;
          int v48 = v47 | (v46 << 24);
          unsigned int v49 = (v47 & 0xFF00FFFF | (v46 << 16)) * v19;
          int v50 = v48
              - ((v49 + 65537 + ((v49 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v49 + 1 + BYTE1(v49)) >> 8));
          if (v9 == 255) {
            int v50 = v48;
          }
          *float v7 = v50;
          if (v8) {
            *__n128 v8 = HIBYTE(v50);
          }
          v25 += 2;
          ++v7;
          v8 += v11;
          if (!--v26) {
            goto LABEL_99;
          }
        }
        uint64_t v33 = (unsigned int *)(v29 + (v28 >> 4));
        if (v18 < v33) {
          uint64_t v33 = v18;
        }
        if (v33 < v16) {
          uint64_t v33 = v16;
        }
        unsigned int v34 = *v33;
        if (v22)
        {
          unint64_t v35 = (unsigned int *)(v29 + v21);
          if (v18 >= v35) {
            uint64_t v36 = v35;
          }
          else {
            uint64_t v36 = v18;
          }
          if (v36 < v16) {
            uint64_t v36 = v16;
          }
          unsigned int v37 = *v36;
          uint64_t v38 = (unsigned int *)((char *)v35 + (v28 >> 4));
          if (v18 < v38) {
            uint64_t v38 = v18;
          }
          if (v38 < v16) {
            uint64_t v38 = v16;
          }
          int v39 = BLEND8_21385[v22];
          unsigned int v31 = v31 - ((v39 & v31) >> v22) + ((v39 & v37) >> v22);
          unsigned int v34 = v34 - ((v39 & v34) >> v22) + ((v39 & *v38) >> v22);
        }
        int v40 = BLEND8_21385[*v25 & 0xF];
        unsigned int v41 = v31 - ((v40 & v31) >> v32);
        unsigned int v42 = (v40 & v34) >> v32;
LABEL_46:
        unsigned int v31 = v41 + v42;
        goto LABEL_47;
      }
LABEL_98:
      uint64_t v24 = v15;
LABEL_99:
      v7 += v121;
      v8 += v123;
      uint64_t v15 = v24 + v120;
      --a6;
      uint64_t v13 = v117;
      CFDictionaryRef result = v118;
      LOBYTE(v14) = v116;
      if (!a6) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_98;
    }
    uint64_t v24 = v15;
    int v52 = (uint64_t *)v109;
    uint64_t v51 = v110;
    while (1)
    {
      uint64_t v53 = *(v52 - 1);
      uint64_t v54 = *v52;
      uint64_t v55 = v23 + v53;
      if ((unint64_t)v18 >= v23 + v53) {
        int v56 = (unsigned int *)(v23 + v53);
      }
      else {
        int v56 = v18;
      }
      if (v56 < v16) {
        int v56 = v16;
      }
      unsigned int v57 = *v56;
      char v58 = v54 & 0xF;
      if ((v54 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        long long v68 = (unsigned int *)(v55 + v21);
        if ((unint64_t)v18 < v55 + v21) {
          long long v68 = v18;
        }
        if (v68 < v16) {
          long long v68 = v16;
        }
        int v69 = BLEND8_21385[v22];
        unsigned int v66 = v57 - ((v69 & v57) >> v22);
        unsigned int v67 = (v69 & *v68) >> v22;
        goto LABEL_83;
      }
LABEL_84:
      unsigned int v70 = __ROL4__(v57, v10);
      int v71 = v70 | v6;
      unsigned int v72 = (((v70 >> 23) & 0x1FE) + BYTE1(v70) + (((v70 >> 8) & 0xFF00) >> 6) + (((v70 >> 8) & 0xFF00) >> 8)) >> 3;
      int v73 = v72 | (v71 << 24);
      unsigned int v74 = (v72 & 0xFF00FFFF | (v71 << 16)) * v19;
      unsigned int v75 = v73
          - ((v74 + 65537 + ((v74 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v74 + 1 + BYTE1(v74)) >> 8));
      if (v9 == 255) {
        unsigned int v75 = v73;
      }
      unsigned int v76 = HIBYTE(v75);
      if (v8)
      {
        if (v76)
        {
          if (v76 == 255)
          {
            *float v7 = v75;
            LOBYTE(v75) = -1;
          }
          else
          {
            unsigned int v77 = (*v7 | (*v8 << 16)) * (v76 ^ 0xFF);
            unsigned int v78 = ((v77 + 65537 + ((v77 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v77 + 1 + BYTE1(v77)) >> 8))
                + (v75 & 0xFF0000FF);
            *float v7 = v78;
            unsigned int v75 = HIBYTE(v78);
          }
          *__n128 v8 = v75;
        }
      }
      else if (v76)
      {
        if (v76 != 255) {
          v75 += ((v76 ^ 0xFF) * *v7 + (((v76 ^ 0xFF) * *v7) >> 8) + 1) >> 8;
        }
        *float v7 = v75;
      }
      v52 += 2;
      ++v7;
      v8 += v11;
      if (!--v51) {
        goto LABEL_99;
      }
    }
    uint64_t v59 = (unsigned int *)(v55 + (v54 >> 4));
    if (v18 < v59) {
      uint64_t v59 = v18;
    }
    if (v59 < v16) {
      uint64_t v59 = v16;
    }
    unsigned int v60 = *v59;
    if (v22)
    {
      if ((unint64_t)v18 >= v55 + v21) {
        uint64_t v61 = (unsigned int *)(v55 + v21);
      }
      else {
        uint64_t v61 = v18;
      }
      if (v61 < v16) {
        uint64_t v61 = v16;
      }
      unsigned int v62 = *v61;
      uint64_t v63 = (unsigned int *)(v55 + v21 + (v54 >> 4));
      if (v18 < v63) {
        uint64_t v63 = v18;
      }
      if (v63 < v16) {
        uint64_t v63 = v16;
      }
      int v64 = BLEND8_21385[v22];
      unsigned int v57 = v57 - ((v64 & v57) >> v22) + ((v64 & v62) >> v22);
      unsigned int v60 = v60 - ((v64 & v60) >> v22) + ((v64 & *v63) >> v22);
    }
    int v65 = BLEND8_21385[*v52 & 0xF];
    unsigned int v66 = v57 - ((v65 & v57) >> v58);
    unsigned int v67 = (v65 & v60) >> v58;
LABEL_83:
    unsigned int v57 = v66 + v67;
    goto LABEL_84;
  }
  float v79 = (uint64_t *)(v12 + 16 * a3);
  float v80 = v17 - 4;
  int v81 = v9 ^ 0xFF;
  uint64_t v83 = a5;
  uint64_t v84 = v15;
  do
  {
    uint64_t v85 = *(void *)(result + 32) + (v84 >> v14) * v13;
    if (v122 == 1)
    {
      if (a5 >= 1)
      {
        int v86 = v79;
        uint64_t v87 = v83;
        do
        {
          uint64_t v88 = *v86;
          v86 += 2;
          int v89 = (char *)(v85 + v88);
          if ((unint64_t)v80 < v85 + v88) {
            int v89 = v80;
          }
          if ((unint64_t)v89 < *(void *)(result + 32)) {
            int v89 = *(char **)(result + 32);
          }
          unsigned int v90 = __ROL4__(*(_DWORD *)v89, v10);
          int v91 = v90 | v6;
          unsigned int v92 = (((v90 >> 23) & 0x1FE) + BYTE1(v90) + (((v90 >> 8) & 0xFF00) >> 6) + (((v90 >> 8) & 0xFF00) >> 8)) >> 3;
          int v93 = v92 | (v91 << 24);
          unsigned int v94 = (v92 & 0xFF00FFFF | (v91 << 16)) * v81;
          int v95 = v93
              - ((v94 + 65537 + ((v94 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v94 + 1 + BYTE1(v94)) >> 8));
          if (v9 == 255) {
            int v95 = v93;
          }
          *float v7 = v95;
          if (v8) {
            *__n128 v8 = HIBYTE(v95);
          }
          ++v7;
          v8 += v11;
          --v87;
        }
        while (v87);
      }
    }
    else
    {
      int v96 = v79;
      uint64_t v97 = v83;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v98 = *v96;
          v96 += 2;
          int v99 = (char *)(v85 + v98);
          if ((unint64_t)v80 < v85 + v98) {
            int v99 = v80;
          }
          if ((unint64_t)v99 < *(void *)(result + 32)) {
            int v99 = *(char **)(result + 32);
          }
          unsigned int v100 = __ROL4__(*(_DWORD *)v99, v10);
          int v101 = v100 | v6;
          unsigned int v102 = (((v100 >> 23) & 0x1FE) + BYTE1(v100) + (((v100 >> 8) & 0xFF00) >> 6) + (((v100 >> 8) & 0xFF00) >> 8)) >> 3;
          int v103 = v102 | (v101 << 24);
          unsigned int v104 = (v102 & 0xFF00FFFF | (v101 << 16)) * v81;
          unsigned int v105 = v103
               - ((v104 + 65537 + ((v104 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v104 + 1 + BYTE1(v104)) >> 8));
          if (v9 == 255) {
            unsigned int v105 = v103;
          }
          unsigned int v106 = HIBYTE(v105);
          if (v8)
          {
            if (v106)
            {
              if (v106 == 255)
              {
                *float v7 = v105;
                *__n128 v8 = -1;
              }
              else
              {
                unsigned int v107 = (*v7 | (*v8 << 16)) * (v106 ^ 0xFF);
                unsigned int v108 = ((v107 + 65537 + ((v107 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v107 + 1 + BYTE1(v107)) >> 8))
                     + (v105 & 0xFF0000FF);
                *float v7 = v108;
                *__n128 v8 = HIBYTE(v108);
              }
            }
          }
          else if (v106)
          {
            if (v106 != 255) {
              v105 += ((v106 ^ 0xFF) * *v7 + (((v106 ^ 0xFF) * *v7) >> 8) + 1) >> 8;
            }
            *float v7 = v105;
          }
          ++v7;
          v8 += v11;
          --v97;
        }
        while (v97);
      }
    }
    v7 += v121;
    v8 += v123;
    v84 += v120;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t W8_image_mark_RGB32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  if (*(void *)(result + 40)) {
    int v6 = 0;
  }
  else {
    int v6 = 255;
  }
  float v7 = (unsigned char *)*((void *)a2 + 2);
  __n128 v8 = (unsigned char *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v123 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v123 = 0;
  }
  int v9 = *((unsigned __int8 *)a2 + 8);
  int v10 = a2[1];
  int v122 = *a2;
  uint64_t v121 = *((void *)a2 + 3) - a5;
  uint64_t v11 = v8 != 0;
  uint64_t v13 = *((void *)a2 + 17);
  uint64_t v12 = *((void *)a2 + 18);
  uint64_t v14 = *((void *)a2 + 9);
  uint64_t v120 = *((void *)a2 + 11);
  uint64_t v15 = *((void *)a2 + 7) + v120 * a4;
  uint64_t v16 = *(unsigned int **)(result + 32);
  float v17 = (char *)v16
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  if (*(void *)(result + 176))
  {
    uint64_t v114 = *((void *)a2 + 15);
    uint64_t v115 = *((void *)a2 + 13);
    char v112 = v14 - 4;
    uint64_t v113 = ~(-1 << v14);
    float v18 = (unsigned int *)(v17 - 4);
    int v19 = v9 ^ 0xFF;
    uint64_t v118 = result;
    uint64_t v110 = a5;
    uint64_t v111 = -v13;
    uint64_t v109 = v12 + 16 * a3 + 8;
    uint64_t v116 = *((void *)a2 + 9);
    uint64_t v117 = *((void *)a2 + 17);
    while (1)
    {
      if (((v114 - v15) | (v15 - v115)) < 0)
      {
        int v22 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = ((v15 & (unint64_t)v113) >> v112) & 0xF;
        uint64_t v21 = (unint64_t)(v20 - 7) >= 9 ? v111 : v13;
        int v22 = weights_21383[v20] & 0xF;
      }
      uint64_t v23 = *(void *)(result + 32) + (v15 >> v14) * v13;
      if (v122 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        uint64_t v24 = v15;
        unint64_t v25 = (uint64_t *)v109;
        uint64_t v26 = v110;
        while (1)
        {
          uint64_t v27 = *(v25 - 1);
          uint64_t v28 = *v25;
          uint64_t v29 = v23 + v27;
          if ((unint64_t)v18 >= v23 + v27) {
            uint64_t v30 = (unsigned int *)(v23 + v27);
          }
          else {
            uint64_t v30 = v18;
          }
          if (v30 < v16) {
            uint64_t v30 = v16;
          }
          unsigned int v31 = bswap32(*v30);
          char v32 = v28 & 0xF;
          if ((v28 & 0xF) != 0) {
            break;
          }
          if (v22)
          {
            unint64_t v43 = (unsigned int *)(v29 + v21);
            if ((unint64_t)v18 < v29 + v21) {
              unint64_t v43 = v18;
            }
            if (v43 < v16) {
              unint64_t v43 = v16;
            }
            int v44 = BLEND8_21385[v22];
            unsigned int v41 = v31 - ((v44 & v31) >> v22);
            unsigned int v42 = (bswap32(*v43) & v44) >> v22;
            goto LABEL_46;
          }
LABEL_47:
          unsigned int v45 = __ROL4__(v31, v10);
          int v46 = v45 | v6;
          unsigned int v47 = (((v45 >> 23) & 0x1FE) + BYTE1(v45) + (((v45 >> 8) & 0xFF00) >> 6) + (((v45 >> 8) & 0xFF00) >> 8)) >> 3;
          int v48 = v47 | (v46 << 24);
          unsigned int v49 = (v47 & 0xFF00FFFF | (v46 << 16)) * v19;
          int v50 = v48
              - ((v49 + 65537 + ((v49 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v49 + 1 + BYTE1(v49)) >> 8));
          if (v9 == 255) {
            int v50 = v48;
          }
          *float v7 = v50;
          if (v8) {
            *__n128 v8 = HIBYTE(v50);
          }
          v25 += 2;
          ++v7;
          v8 += v11;
          if (!--v26) {
            goto LABEL_99;
          }
        }
        uint64_t v33 = (unsigned int *)(v29 + (v28 >> 4));
        if (v18 < v33) {
          uint64_t v33 = v18;
        }
        if (v33 < v16) {
          uint64_t v33 = v16;
        }
        unsigned int v34 = bswap32(*v33);
        if (v22)
        {
          unint64_t v35 = (unsigned int *)(v29 + v21);
          if (v18 >= v35) {
            uint64_t v36 = v35;
          }
          else {
            uint64_t v36 = v18;
          }
          if (v36 < v16) {
            uint64_t v36 = v16;
          }
          unsigned int v37 = bswap32(*v36);
          uint64_t v38 = (unsigned int *)((char *)v35 + (v28 >> 4));
          if (v18 < v38) {
            uint64_t v38 = v18;
          }
          if (v38 < v16) {
            uint64_t v38 = v16;
          }
          int v39 = BLEND8_21385[v22];
          unsigned int v31 = v31 - ((v39 & v31) >> v22) + ((v39 & v37) >> v22);
          unsigned int v34 = v34 - ((v39 & v34) >> v22) + ((bswap32(*v38) & v39) >> v22);
        }
        int v40 = BLEND8_21385[*v25 & 0xF];
        unsigned int v41 = v31 - ((v40 & v31) >> v32);
        unsigned int v42 = (v40 & v34) >> v32;
LABEL_46:
        unsigned int v31 = v41 + v42;
        goto LABEL_47;
      }
LABEL_98:
      uint64_t v24 = v15;
LABEL_99:
      v7 += v121;
      v8 += v123;
      uint64_t v15 = v24 + v120;
      --a6;
      uint64_t v13 = v117;
      CFDictionaryRef result = v118;
      LOBYTE(v14) = v116;
      if (!a6) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_98;
    }
    uint64_t v24 = v15;
    int v52 = (uint64_t *)v109;
    uint64_t v51 = v110;
    while (1)
    {
      uint64_t v53 = *(v52 - 1);
      uint64_t v54 = *v52;
      uint64_t v55 = v23 + v53;
      if ((unint64_t)v18 >= v23 + v53) {
        int v56 = (unsigned int *)(v23 + v53);
      }
      else {
        int v56 = v18;
      }
      if (v56 < v16) {
        int v56 = v16;
      }
      unsigned int v57 = bswap32(*v56);
      char v58 = v54 & 0xF;
      if ((v54 & 0xF) != 0) {
        break;
      }
      if (v22)
      {
        long long v68 = (unsigned int *)(v55 + v21);
        if ((unint64_t)v18 < v55 + v21) {
          long long v68 = v18;
        }
        if (v68 < v16) {
          long long v68 = v16;
        }
        int v69 = BLEND8_21385[v22];
        unsigned int v66 = v57 - ((v69 & v57) >> v22);
        unsigned int v67 = (bswap32(*v68) & v69) >> v22;
        goto LABEL_83;
      }
LABEL_84:
      unsigned int v70 = __ROL4__(v57, v10);
      int v71 = v70 | v6;
      unsigned int v72 = (((v70 >> 23) & 0x1FE) + BYTE1(v70) + (((v70 >> 8) & 0xFF00) >> 6) + (((v70 >> 8) & 0xFF00) >> 8)) >> 3;
      int v73 = v72 | (v71 << 24);
      unsigned int v74 = (v72 & 0xFF00FFFF | (v71 << 16)) * v19;
      unsigned int v75 = v73
          - ((v74 + 65537 + ((v74 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v74 + 1 + BYTE1(v74)) >> 8));
      if (v9 == 255) {
        unsigned int v75 = v73;
      }
      unsigned int v76 = HIBYTE(v75);
      if (v8)
      {
        if (v76)
        {
          if (v76 == 255)
          {
            *float v7 = v75;
            LOBYTE(v75) = -1;
          }
          else
          {
            unsigned int v77 = (*v7 | (*v8 << 16)) * (v76 ^ 0xFF);
            unsigned int v78 = ((v77 + 65537 + ((v77 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v77 + 1 + BYTE1(v77)) >> 8))
                + (v75 & 0xFF0000FF);
            *float v7 = v78;
            unsigned int v75 = HIBYTE(v78);
          }
          *__n128 v8 = v75;
        }
      }
      else if (v76)
      {
        if (v76 != 255) {
          v75 += ((v76 ^ 0xFF) * *v7 + (((v76 ^ 0xFF) * *v7) >> 8) + 1) >> 8;
        }
        *float v7 = v75;
      }
      v52 += 2;
      ++v7;
      v8 += v11;
      if (!--v51) {
        goto LABEL_99;
      }
    }
    uint64_t v59 = (unsigned int *)(v55 + (v54 >> 4));
    if (v18 < v59) {
      uint64_t v59 = v18;
    }
    if (v59 < v16) {
      uint64_t v59 = v16;
    }
    unsigned int v60 = bswap32(*v59);
    if (v22)
    {
      if ((unint64_t)v18 >= v55 + v21) {
        uint64_t v61 = (unsigned int *)(v55 + v21);
      }
      else {
        uint64_t v61 = v18;
      }
      if (v61 < v16) {
        uint64_t v61 = v16;
      }
      unsigned int v62 = bswap32(*v61);
      uint64_t v63 = (unsigned int *)(v55 + v21 + (v54 >> 4));
      if (v18 < v63) {
        uint64_t v63 = v18;
      }
      if (v63 < v16) {
        uint64_t v63 = v16;
      }
      int v64 = BLEND8_21385[v22];
      unsigned int v57 = v57 - ((v64 & v57) >> v22) + ((v64 & v62) >> v22);
      unsigned int v60 = v60 - ((v64 & v60) >> v22) + ((bswap32(*v63) & v64) >> v22);
    }
    int v65 = BLEND8_21385[*v52 & 0xF];
    unsigned int v66 = v57 - ((v65 & v57) >> v58);
    unsigned int v67 = (v65 & v60) >> v58;
LABEL_83:
    unsigned int v57 = v66 + v67;
    goto LABEL_84;
  }
  float v79 = (uint64_t *)(v12 + 16 * a3);
  float v80 = (unsigned int *)(v17 - 4);
  int v81 = v9 ^ 0xFF;
  uint64_t v83 = a5;
  uint64_t v84 = v15;
  do
  {
    uint64_t v85 = *(void *)(result + 32) + (v84 >> v14) * v13;
    if (v122 == 1)
    {
      if (a5 >= 1)
      {
        int v86 = v79;
        uint64_t v87 = v83;
        do
        {
          uint64_t v88 = *v86;
          v86 += 2;
          int v89 = (unsigned int *)(v85 + v88);
          if ((unint64_t)v80 < v85 + v88) {
            int v89 = v80;
          }
          if ((unint64_t)v89 < *(void *)(result + 32)) {
            int v89 = *(unsigned int **)(result + 32);
          }
          unsigned int v90 = __ROL4__(bswap32(*v89), v10);
          int v91 = v90 | v6;
          unsigned int v92 = (((v90 >> 23) & 0x1FE) + BYTE1(v90) + (((v90 >> 8) & 0xFF00) >> 6) + (((v90 >> 8) & 0xFF00) >> 8)) >> 3;
          int v93 = v92 | (v91 << 24);
          unsigned int v94 = (v92 & 0xFF00FFFF | (v91 << 16)) * v81;
          int v95 = v93
              - ((v94 + 65537 + ((v94 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v94 + 1 + BYTE1(v94)) >> 8));
          if (v9 == 255) {
            int v95 = v93;
          }
          *float v7 = v95;
          if (v8) {
            *__n128 v8 = HIBYTE(v95);
          }
          ++v7;
          v8 += v11;
          --v87;
        }
        while (v87);
      }
    }
    else
    {
      int v96 = v79;
      uint64_t v97 = v83;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v98 = *v96;
          v96 += 2;
          int v99 = (unsigned int *)(v85 + v98);
          if ((unint64_t)v80 < v85 + v98) {
            int v99 = v80;
          }
          if ((unint64_t)v99 < *(void *)(result + 32)) {
            int v99 = *(unsigned int **)(result + 32);
          }
          unsigned int v100 = __ROL4__(bswap32(*v99), v10);
          int v101 = v100 | v6;
          unsigned int v102 = (((v100 >> 23) & 0x1FE) + BYTE1(v100) + (((v100 >> 8) & 0xFF00) >> 6) + (((v100 >> 8) & 0xFF00) >> 8)) >> 3;
          int v103 = v102 | (v101 << 24);
          unsigned int v104 = (v102 & 0xFF00FFFF | (v101 << 16)) * v81;
          unsigned int v105 = v103
               - ((v104 + 65537 + ((v104 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v104 + 1 + BYTE1(v104)) >> 8));
          if (v9 == 255) {
            unsigned int v105 = v103;
          }
          unsigned int v106 = HIBYTE(v105);
          if (v8)
          {
            if (v106)
            {
              if (v106 == 255)
              {
                *float v7 = v105;
                *__n128 v8 = -1;
              }
              else
              {
                unsigned int v107 = (*v7 | (*v8 << 16)) * (v106 ^ 0xFF);
                unsigned int v108 = ((v107 + 65537 + ((v107 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v107 + 1 + BYTE1(v107)) >> 8))
                     + (v105 & 0xFF0000FF);
                *float v7 = v108;
                *__n128 v8 = HIBYTE(v108);
              }
            }
          }
          else if (v106)
          {
            if (v106 != 255) {
              v105 += ((v106 ^ 0xFF) * *v7 + (((v106 ^ 0xFF) * *v7) >> 8) + 1) >> 8;
            }
            *float v7 = v105;
          }
          ++v7;
          v8 += v11;
          --v97;
        }
        while (v97);
      }
    }
    v7 += v121;
    v8 += v123;
    v84 += v120;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t W8_image_mark_RGB24(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = (unsigned char *)*((void *)a2 + 2);
  float v7 = (unsigned char *)*((void *)a2 + 4);
  if (v7) {
    uint64_t v108 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v108 = 0;
  }
  int v8 = *((unsigned __int8 *)a2 + 8);
  int v107 = *a2;
  uint64_t v106 = *((void *)a2 + 3) - a5;
  uint64_t v9 = v7 != 0;
  uint64_t v10 = *((void *)a2 + 17);
  uint64_t v11 = *((void *)a2 + 18);
  uint64_t v12 = *((void *)a2 + 9);
  uint64_t v105 = *((void *)a2 + 11);
  uint64_t v13 = *((void *)a2 + 7) + v105 * a4;
  uint64_t v14 = *(unsigned __int8 **)(result + 32);
  uint64_t v15 = &v14[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  if (*(void *)(result + 176))
  {
    uint64_t v101 = *((void *)a2 + 13);
    uint64_t v99 = ~(-1 << v12);
    uint64_t v100 = *((void *)a2 + 15);
    char v98 = v12 - 4;
    uint64_t v16 = v15 - 3;
    int v17 = v8 ^ 0xFF;
    uint64_t v96 = a5;
    uint64_t v97 = -v10;
    uint64_t v95 = v11 + 16 * a3 + 8;
    uint64_t v103 = *((void *)a2 + 17);
    int v104 = a5;
    uint64_t v102 = *((void *)a2 + 9);
    while (1)
    {
      if (((v100 - v13) | (v13 - v101)) < 0)
      {
        int v20 = 0;
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v18 = ((v13 & (unint64_t)v99) >> v98) & 0xF;
        uint64_t v19 = (unint64_t)(v18 - 7) >= 9 ? v97 : v10;
        int v20 = weights_21383[v18] & 0xF;
      }
      uint64_t v21 = *(void *)(result + 32) + (v13 >> v12) * v10;
      if (v107 != 1) {
        break;
      }
      if (a5 >= 1)
      {
        int v22 = (uint64_t *)v95;
        uint64_t v23 = v96;
        while (1)
        {
          uint64_t v25 = *(v22 - 1);
          uint64_t v24 = *v22;
          uint64_t v26 = v21 + v25;
          if ((unint64_t)v16 >= v21 + v25) {
            uint64_t v27 = (unsigned __int8 *)(v21 + v25);
          }
          else {
            uint64_t v27 = v16;
          }
          if (v27 < v14) {
            uint64_t v27 = v14;
          }
          unsigned int v28 = (*v27 << 24) | (v27[1] << 16) | (v27[2] << 8);
          char v29 = v24 & 0xF;
          if ((v24 & 0xF) != 0) {
            break;
          }
          if (v20)
          {
            int v39 = (unsigned __int8 *)(v26 + v19);
            if ((unint64_t)v16 < v26 + v19) {
              int v39 = v16;
            }
            if (v39 < v14) {
              int v39 = v14;
            }
            unsigned int v40 = BLEND8_21385[v20];
            unsigned int v37 = v28 - ((v40 & v28) >> v20);
            unsigned int v38 = (((*v39 << 24) | (v39[1] << 16) | (v39[2] << 8)) & v40) >> v20;
            goto LABEL_43;
          }
LABEL_44:
          unsigned int v41 = (((v28 >> 23) & 0x1FE) + BYTE1(v28) + (((v28 >> 8) & 0xFF00) >> 6) + (((v28 >> 8) & 0xFF00) >> 8)) >> 3;
          unsigned int v42 = v41 | 0xFF000000;
          unsigned int v43 = (v41 | 0xFF0000) * v17 + 65537 + ((((v41 | 0xFF0000) * v17) >> 8) & 0xFF00FF);
          unsigned int v44 = v42 - (v43 & 0xFF000000 | BYTE1(v43));
          if (v8 == 255) {
            unsigned int v44 = v42;
          }
          *int v6 = v44;
          if (v7) {
            *float v7 = HIBYTE(v44);
          }
          v22 += 2;
          ++v6;
          v7 += v9;
          if (!--v23) {
            goto LABEL_93;
          }
        }
        uint64_t v30 = (unsigned __int8 *)(v26 + (v24 >> 4));
        if (v16 < v30) {
          uint64_t v30 = v16;
        }
        if (v30 < v14) {
          uint64_t v30 = v14;
        }
        int v31 = (*v30 << 24) | (v30[1] << 16) | (v30[2] << 8);
        if (v20)
        {
          char v32 = (unsigned __int8 *)(v26 + v19);
          if (v16 >= v32) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = v16;
          }
          if (v33 < v14) {
            uint64_t v33 = v14;
          }
          unsigned int v34 = &v32[v24 >> 4];
          if (v16 < v34) {
            unsigned int v34 = v16;
          }
          if (v34 < v14) {
            unsigned int v34 = v14;
          }
          unsigned int v35 = BLEND8_21385[v20];
          unsigned int v28 = v28 - ((v35 & v28) >> v20) + ((v35 & ((*v33 << 24) | (v33[1] << 16) | (v33[2] << 8))) >> v20);
          int v31 = v31 - ((v35 & v31) >> v20) + ((((*v34 << 24) | (v34[1] << 16) | (v34[2] << 8)) & v35) >> v20);
        }
        int v36 = BLEND8_21385[*v22 & 0xF];
        unsigned int v37 = v28 - ((v36 & v28) >> v29);
        unsigned int v38 = (v36 & v31) >> v29;
LABEL_43:
        unsigned int v28 = v37 + v38;
        goto LABEL_44;
      }
LABEL_93:
      v6 += v106;
      v7 += v108;
      a5 = v104;
      v13 += v105;
      --a6;
      LOBYTE(v12) = v102;
      uint64_t v10 = v103;
      if (!a6) {
        return result;
      }
    }
    if (a5 < 1) {
      goto LABEL_93;
    }
    int v46 = (uint64_t *)v95;
    uint64_t v45 = v96;
    while (1)
    {
      uint64_t v48 = *(v46 - 1);
      uint64_t v47 = *v46;
      uint64_t v49 = v21 + v48;
      if ((unint64_t)v16 >= v21 + v48) {
        int v50 = (unsigned __int8 *)(v21 + v48);
      }
      else {
        int v50 = v16;
      }
      if (v50 < v14) {
        int v50 = v14;
      }
      unsigned int v51 = (*v50 << 24) | (v50[1] << 16) | (v50[2] << 8);
      char v52 = v47 & 0xF;
      if ((v47 & 0xF) != 0) {
        break;
      }
      if (v20)
      {
        uint64_t v63 = (unsigned __int8 *)(v49 + v19);
        if ((unint64_t)v16 < v49 + v19) {
          uint64_t v63 = v16;
        }
        if (v63 < v14) {
          uint64_t v63 = v14;
        }
        unsigned int v64 = BLEND8_21385[v20];
        unsigned int v61 = v51 - ((v64 & v51) >> v20);
        unsigned int v62 = (((*v63 << 24) | (v63[1] << 16) | (v63[2] << 8)) & v64) >> v20;
        goto LABEL_80;
      }
LABEL_81:
      unsigned int v65 = (((v51 >> 23) & 0x1FE) + BYTE1(v51) + (((v51 >> 8) & 0xFF00) >> 6) + (((v51 >> 8) & 0xFF00) >> 8)) >> 3;
      unsigned int v66 = v65 | 0xFF000000;
      unsigned int v67 = (v65 | 0xFF0000) * v17 + 65537 + ((((v65 | 0xFF0000) * v17) >> 8) & 0xFF00FF);
      unsigned int v68 = v66 - (v67 & 0xFF000000 | BYTE1(v67));
      if (v8 == 255) {
        unsigned int v68 = v66;
      }
      unsigned int v69 = HIBYTE(v68);
      if (v7)
      {
        if (v69)
        {
          if (v69 == 255)
          {
            *int v6 = v68;
            *float v7 = -1;
          }
          else
          {
            unsigned int v70 = (*v6 | (*v7 << 16)) * (v69 ^ 0xFF);
            unsigned int v71 = ((v70 + 65537 + ((v70 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v70 + 1 + BYTE1(v70)) >> 8))
                + (v68 & 0xFF0000FF);
            *int v6 = v71;
            *float v7 = HIBYTE(v71);
          }
        }
      }
      else if (v69)
      {
        if (v69 != 255) {
          v68 += ((v69 ^ 0xFF) * *v6 + (((v69 ^ 0xFF) * *v6) >> 8) + 1) >> 8;
        }
        *int v6 = v68;
      }
      v46 += 2;
      ++v6;
      v7 += v9;
      if (!--v45) {
        goto LABEL_93;
      }
    }
    uint64_t v53 = (unsigned __int8 *)(v49 + (v47 >> 4));
    if (v16 < v53) {
      uint64_t v53 = v16;
    }
    if (v53 < v14) {
      uint64_t v53 = v14;
    }
    int v54 = (*v53 << 24) | (v53[1] << 16) | (v53[2] << 8);
    if (v20)
    {
      uint64_t v55 = (unsigned __int8 *)(v49 + v19);
      if (v16 >= v55) {
        int v56 = v55;
      }
      else {
        int v56 = v16;
      }
      if (v56 < v14) {
        int v56 = v14;
      }
      int v57 = (*v56 << 24) | (v56[1] << 16) | (v56[2] << 8);
      char v58 = &v55[v47 >> 4];
      if (v16 < v58) {
        char v58 = v16;
      }
      if (v58 < v14) {
        char v58 = v14;
      }
      unsigned int v59 = BLEND8_21385[v20];
      unsigned int v51 = v51 - ((v59 & v51) >> v20) + ((v59 & v57) >> v20);
      int v54 = v54 - ((v59 & v54) >> v20) + ((((*v58 << 24) | (v58[1] << 16) | (v58[2] << 8)) & v59) >> v20);
    }
    int v60 = BLEND8_21385[*v46 & 0xF];
    unsigned int v61 = v51 - ((v60 & v51) >> v52);
    unsigned int v62 = (v60 & v54) >> v52;
LABEL_80:
    unsigned int v51 = v61 + v62;
    goto LABEL_81;
  }
  unsigned int v72 = v15 - 3;
  int v73 = v8 ^ 0xFF;
  unsigned int v74 = (uint64_t *)(v11 + 16 * a3);
  do
  {
    uint64_t v75 = *(void *)(result + 32) + (v13 >> v12) * v10;
    if (v107 == 1)
    {
      if (a5 >= 1)
      {
        unsigned int v76 = v74;
        uint64_t v77 = a5;
        do
        {
          uint64_t v78 = *v76;
          v76 += 2;
          float v79 = (unsigned __int8 *)(v75 + v78);
          if ((unint64_t)v72 < v75 + v78) {
            float v79 = v72;
          }
          if ((unint64_t)v79 < *(void *)(result + 32)) {
            float v79 = *(unsigned __int8 **)(result + 32);
          }
          unsigned int v80 = (v79[2] + 2 * *v79 + 4 * v79[1] + v79[1]) >> 3;
          unsigned int v81 = v80 | 0xFF000000;
          unsigned int v82 = (v80 | 0xFF0000) * v73 + 65537 + ((((v80 | 0xFF0000) * v73) >> 8) & 0xFF00FF);
          unsigned int v83 = v81 - (v82 & 0xFF000000 | BYTE1(v82));
          if (v8 == 255) {
            unsigned int v83 = v81;
          }
          *int v6 = v83;
          if (v7) {
            *float v7 = HIBYTE(v83);
          }
          ++v6;
          v7 += v9;
          --v77;
        }
        while (v77);
      }
    }
    else
    {
      uint64_t v84 = v74;
      uint64_t v85 = a5;
      if (a5 >= 1)
      {
        do
        {
          uint64_t v86 = *v84;
          v84 += 2;
          uint64_t v87 = (unsigned __int8 *)(v75 + v86);
          if ((unint64_t)v72 < v75 + v86) {
            uint64_t v87 = v72;
          }
          if ((unint64_t)v87 < *(void *)(result + 32)) {
            uint64_t v87 = *(unsigned __int8 **)(result + 32);
          }
          unsigned int v88 = (v87[2] + 2 * *v87 + 4 * v87[1] + v87[1]) >> 3;
          unsigned int v89 = v88 | 0xFF000000;
          unsigned int v90 = (v88 | 0xFF0000) * v73 + 65537 + ((((v88 | 0xFF0000) * v73) >> 8) & 0xFF00FF);
          unsigned int v91 = v89 - (v90 & 0xFF000000 | BYTE1(v90));
          if (v8 == 255) {
            unsigned int v91 = v89;
          }
          unsigned int v92 = HIBYTE(v91);
          if (v7)
          {
            if (v92)
            {
              if (v92 == 255)
              {
                *int v6 = v91;
                *float v7 = -1;
              }
              else
              {
                unsigned int v93 = (*v6 | (*v7 << 16)) * (v92 ^ 0xFF);
                unsigned int v94 = ((v93 + 65537 + ((v93 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v93 + 1 + BYTE1(v93)) >> 8))
                    + (v91 & 0xFF0000FF);
                *int v6 = v94;
                *float v7 = HIBYTE(v94);
              }
            }
          }
          else if (v92)
          {
            if (v92 != 255) {
              v91 += ((v92 ^ 0xFF) * *v6 + (((v92 ^ 0xFF) * *v6) >> 8) + 1) >> 8;
            }
            *int v6 = v91;
          }
          ++v6;
          v7 += v9;
          --v85;
        }
        while (v85);
      }
    }
    v6 += v106;
    v7 += v108;
    v13 += v105;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t W8_image_mark_W8(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = (unsigned char *)*((void *)a2 + 2);
  float v7 = (unsigned char *)*((void *)a2 + 4);
  if (v7) {
    uint64_t v95 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v95 = 0;
  }
  int v8 = *((unsigned __int8 *)a2 + 8);
  int v94 = *a2;
  uint64_t v93 = *((void *)a2 + 3) - a5;
  uint64_t v9 = v7 != 0;
  uint64_t v11 = *((void *)a2 + 17);
  uint64_t v10 = *((void *)a2 + 18);
  uint64_t v12 = *((void *)a2 + 9);
  uint64_t v92 = *((void *)a2 + 11);
  uint64_t v13 = *((void *)a2 + 7) + v92 * a4;
  uint64_t v14 = *(unsigned __int8 **)(result + 32);
  uint64_t v15 = &v14[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  if (*(void *)(result + 176))
  {
    uint64_t v88 = *((void *)a2 + 15);
    uint64_t v89 = *((void *)a2 + 13);
    char v86 = v12 - 4;
    uint64_t v87 = ~(-1 << v12);
    uint64_t v16 = v15 - 4;
    int v17 = v8 ^ 0xFF;
    uint64_t v85 = a5;
    uint64_t v84 = v10 + 16 * a3 + 8;
    uint64_t v90 = *((void *)a2 + 9);
    int v91 = a5;
    do
    {
      if (((v88 - v13) | (v13 - v89)) < 0)
      {
        int v20 = 0;
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v18 = ((v13 & (unint64_t)v87) >> v86) & 0xF;
        if ((unint64_t)(v18 - 7) >= 9) {
          uint64_t v19 = -v11;
        }
        else {
          uint64_t v19 = v11;
        }
        int v20 = weights_21383[v18] & 0xF;
      }
      uint64_t v21 = *(void *)(result + 32) + (v13 >> v12) * v11;
      if (v94 == 1)
      {
        if (a5 >= 1)
        {
          int v22 = (uint64_t *)v84;
          uint64_t v23 = v85;
          do
          {
            uint64_t v25 = *(v22 - 1);
            uint64_t v24 = *v22;
            uint64_t v26 = v21 + v25;
            if ((unint64_t)v16 >= v21 + v25) {
              uint64_t v27 = (unsigned __int8 *)(v21 + v25);
            }
            else {
              uint64_t v27 = v16;
            }
            if (v27 < v14) {
              uint64_t v27 = v14;
            }
            unsigned int v28 = *v27;
            if ((v24 & 0xF) != 0)
            {
              char v29 = (unsigned __int8 *)(v26 + (v24 >> 4));
              if (v16 < v29) {
                char v29 = v16;
              }
              if (v29 < v14) {
                char v29 = v14;
              }
              unsigned int v30 = *v29;
              if (v20)
              {
                int v31 = (unsigned __int8 *)(v26 + v19);
                if (v16 >= v31) {
                  char v32 = v31;
                }
                else {
                  char v32 = v16;
                }
                if (v32 < v14) {
                  char v32 = v14;
                }
                unsigned int v33 = *v32;
                unsigned int v34 = &v31[v24 >> 4];
                if (v16 < v34) {
                  unsigned int v34 = v16;
                }
                if (v34 < v14) {
                  unsigned int v34 = v14;
                }
                int v35 = BLEND8_21385[v20];
                unsigned int v28 = v28 - ((v35 & v28) >> v20) + ((v35 & v33) >> v20);
                unsigned int v30 = v30 - ((v35 & v30) >> v20) + ((v35 & *v34) >> v20);
              }
              unsigned int v28 = v28
                  - ((BLEND8_21385[*v22 & 0xF] & v28) >> (*v22 & 0xF))
                  + ((BLEND8_21385[*v22 & 0xF] & v30) >> (*v22 & 0xF));
            }
            else if (v20)
            {
              int v36 = (unsigned __int8 *)(v26 + v19);
              if ((unint64_t)v16 < v26 + v19) {
                int v36 = v16;
              }
              if (v36 < v14) {
                int v36 = v14;
              }
              unsigned int v28 = v28 - ((BLEND8_21385[v20] & v28) >> v20) + ((BLEND8_21385[v20] & *v36) >> v20);
            }
            unsigned int v37 = v28 | 0xFF000000;
            unsigned int v38 = (v28 | 0xFF0000) * v17
                + 65537
                + ((((v28 | 0xFF0000u) * v17) >> 8) & 0xFF00FF);
            unsigned int v39 = (v28 | 0xFF000000) - (v38 & 0xFF000000 | BYTE1(v38));
            if (v8 != 255) {
              unsigned int v37 = v39;
            }
            *int v6 = v37;
            if (v7) {
              *float v7 = HIBYTE(v37);
            }
            v22 += 2;
            ++v6;
            v7 += v9;
            --v23;
          }
          while (v23);
        }
      }
      else if (a5 >= 1)
      {
        unsigned int v41 = (uint64_t *)v84;
        uint64_t v40 = v85;
        do
        {
          uint64_t v43 = *(v41 - 1);
          uint64_t v42 = *v41;
          uint64_t v44 = v21 + v43;
          if ((unint64_t)v16 >= v21 + v43) {
            uint64_t v45 = (unsigned __int8 *)(v21 + v43);
          }
          else {
            uint64_t v45 = v16;
          }
          if (v45 < v14) {
            uint64_t v45 = v14;
          }
          unsigned int v46 = *v45;
          if ((v42 & 0xF) != 0)
          {
            uint64_t v47 = (unsigned __int8 *)(v44 + (v42 >> 4));
            if (v16 < v47) {
              uint64_t v47 = v16;
            }
            if (v47 < v14) {
              uint64_t v47 = v14;
            }
            unsigned int v48 = *v47;
            if (v20)
            {
              uint64_t v49 = (unsigned __int8 *)(v44 + v19);
              if (v16 >= v49) {
                int v50 = v49;
              }
              else {
                int v50 = v16;
              }
              if (v50 < v14) {
                int v50 = v14;
              }
              unsigned int v51 = *v50;
              char v52 = &v49[v42 >> 4];
              if (v16 < v52) {
                char v52 = v16;
              }
              if (v52 < v14) {
                char v52 = v14;
              }
              int v53 = BLEND8_21385[v20];
              unsigned int v46 = v46 - ((v53 & v46) >> v20) + ((v53 & v51) >> v20);
              unsigned int v48 = v48 - ((v53 & v48) >> v20) + ((v53 & *v52) >> v20);
            }
            unsigned int v46 = v46
                - ((BLEND8_21385[*v41 & 0xF] & v46) >> (*v41 & 0xF))
                + ((BLEND8_21385[*v41 & 0xF] & v48) >> (*v41 & 0xF));
          }
          else if (v20)
          {
            int v54 = (unsigned __int8 *)(v44 + v19);
            if ((unint64_t)v16 < v44 + v19) {
              int v54 = v16;
            }
            if (v54 < v14) {
              int v54 = v14;
            }
            unsigned int v46 = v46 - ((BLEND8_21385[v20] & v46) >> v20) + ((BLEND8_21385[v20] & *v54) >> v20);
          }
          unsigned int v55 = v46 | 0xFF000000;
          unsigned int v56 = (v46 | 0xFF0000) * v17
              + 65537
              + ((((v46 | 0xFF0000u) * v17) >> 8) & 0xFF00FF);
          unsigned int v57 = (v46 | 0xFF000000) - (v56 & 0xFF000000 | BYTE1(v56));
          if (v8 != 255) {
            unsigned int v55 = v57;
          }
          unsigned int v58 = HIBYTE(v55);
          if (v7)
          {
            if (v58)
            {
              if (v58 == 255)
              {
                *int v6 = v55;
                *float v7 = -1;
              }
              else
              {
                unsigned int v59 = (*v6 | (*v7 << 16)) * (v58 ^ 0xFF);
                unsigned int v60 = ((v59 + 65537 + ((v59 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v59 + 1 + BYTE1(v59)) >> 8))
                    + (v55 & 0xFF0000FF);
                *int v6 = v60;
                *float v7 = HIBYTE(v60);
              }
            }
          }
          else if (v58)
          {
            if (v58 != 255) {
              v55 += ((v58 ^ 0xFF) * *v6 + (((v58 ^ 0xFF) * *v6) >> 8) + 1) >> 8;
            }
            *int v6 = v55;
          }
          v41 += 2;
          ++v6;
          v7 += v9;
          --v40;
        }
        while (v40);
      }
      v6 += v93;
      v7 += v95;
      a5 = v91;
      v13 += v92;
      --a6;
      LOBYTE(v12) = v90;
    }
    while (a6);
  }
  else
  {
    unsigned int v61 = v15 - 4;
    int v62 = v8 ^ 0xFF;
    uint64_t v63 = (uint64_t *)(v10 + 16 * a3);
    do
    {
      uint64_t v64 = *(void *)(result + 32) + (v13 >> v12) * v11;
      if (v94 == 1)
      {
        if (a5 >= 1)
        {
          unsigned int v65 = v63;
          uint64_t v66 = a5;
          do
          {
            uint64_t v67 = *v65;
            v65 += 2;
            unsigned int v68 = (unsigned __int8 *)(v64 + v67);
            if ((unint64_t)v61 < v64 + v67) {
              unsigned int v68 = v61;
            }
            if ((unint64_t)v68 < *(void *)(result + 32)) {
              unsigned int v68 = *(unsigned __int8 **)(result + 32);
            }
            int v69 = *v68;
            unsigned int v70 = v69 | 0xFF000000;
            unsigned int v71 = (v69 | 0xFF0000) * v62 + 65537 + ((((v69 | 0xFF0000u) * v62) >> 8) & 0xFF00FF);
            unsigned int v72 = v70 - (v71 & 0xFF000000 | BYTE1(v71));
            if (v8 == 255) {
              unsigned int v72 = v70;
            }
            *int v6 = v72;
            if (v7) {
              *float v7 = HIBYTE(v72);
            }
            ++v6;
            v7 += v9;
            --v66;
          }
          while (v66);
        }
      }
      else
      {
        int v73 = v63;
        uint64_t v74 = a5;
        if (a5 >= 1)
        {
          do
          {
            uint64_t v75 = *v73;
            v73 += 2;
            unsigned int v76 = (unsigned __int8 *)(v64 + v75);
            if ((unint64_t)v61 < v64 + v75) {
              unsigned int v76 = v61;
            }
            if ((unint64_t)v76 < *(void *)(result + 32)) {
              unsigned int v76 = *(unsigned __int8 **)(result + 32);
            }
            int v77 = *v76;
            unsigned int v78 = v77 | 0xFF000000;
            unsigned int v79 = (v77 | 0xFF0000) * v62 + 65537 + ((((v77 | 0xFF0000u) * v62) >> 8) & 0xFF00FF);
            unsigned int v80 = v78 - (v79 & 0xFF000000 | BYTE1(v79));
            if (v8 == 255) {
              unsigned int v80 = v78;
            }
            unsigned int v81 = HIBYTE(v80);
            if (v7)
            {
              if (v81)
              {
                if (v81 == 255)
                {
                  *int v6 = v80;
                  *float v7 = -1;
                }
                else
                {
                  unsigned int v82 = (*v6 | (*v7 << 16)) * (v81 ^ 0xFF);
                  unsigned int v83 = ((v82 + 65537 + ((v82 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v82 + 1 + BYTE1(v82)) >> 8))
                      + (v80 & 0xFF0000FF);
                  *int v6 = v83;
                  *float v7 = HIBYTE(v83);
                }
              }
            }
            else if (v81)
            {
              if (v81 != 255) {
                v80 += ((v81 ^ 0xFF) * *v6 + (((v81 ^ 0xFF) * *v6) >> 8) + 1) >> 8;
              }
              *int v6 = v80;
            }
            ++v6;
            v7 += v9;
            --v74;
          }
          while (v74);
        }
      }
      v6 += v93;
      v7 += v95;
      v13 += v92;
      --a6;
    }
    while (a6);
  }
  return result;
}

_DWORD *CGFontIndexSetCreate()
{
  CFDictionaryRef result = malloc_type_calloc(1uLL, 0x50uLL, 0x1010040C7309667uLL);
  _DWORD *result = 1;
  return result;
}

_DWORD *CGFontIndexSetCreateCopy(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = malloc_type_calloc(1uLL, 0x50uLL, 0x1010040C7309667uLL);
  _DWORD *v2 = 1;
  for (uint64_t i = 2; i != 18; i += 2)
  {
    if (*(void *)(a1 + i * 4))
    {
      float v4 = malloc_type_calloc(1uLL, 0x400uLL, 0x4B0E1C62uLL);
      *(void *)&v2[i] = v4;
      memmove(v4, *(const void **)(a1 + i * 4), 0x400uLL);
    }
  }
  return v2;
}

atomic_uint *CGFontIndexSetRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add_explicit(result, 1u, memory_order_relaxed);
  }
  return result;
}

void CGFontIndexSetRelease(void **a1)
{
  if (a1 && atomic_fetch_add_explicit((atomic_uint *volatile)a1, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    for (uint64_t i = 1; i != 9; ++i)
      free(a1[i]);
    free(a1[9]);
    free(a1);
  }
}

char *CGFontIndexSetAddIndex(char *result, unint64_t a2)
{
  if (result && a2 != 0xFFFF)
  {
    int v3 = &result[8 * (a2 >> 13)];
    float v5 = (char *)*((void *)v3 + 1);
    float v4 = (atomic_ullong *)(v3 + 8);
    CFDictionaryRef result = v5;
    if (!v5)
    {
      CFDictionaryRef result = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x286615CAuLL);
      uint64_t v6 = 0;
      atomic_compare_exchange_strong_explicit(v4, (unint64_t *)&v6, (unint64_t)result, memory_order_relaxed, memory_order_relaxed);
      if (v6)
      {
        free(result);
        CFDictionaryRef result = (char *)*v4;
      }
    }
    result[(a2 >> 3) & 0x3FF] |= 1 << (a2 & 7);
  }
  return result;
}

char *CGFontIndexSetAddIndexes(char *result, unsigned __int16 *a2, uint64_t a3)
{
  if (result)
  {
    int v3 = a2;
    if (a2)
    {
      uint64_t v4 = a3;
      if (a3)
      {
        float v5 = result;
        do
        {
          unsigned int v6 = *v3++;
          CFDictionaryRef result = CGFontIndexSetAddIndex(v5, v6);
          --v4;
        }
        while (v4);
      }
    }
  }
  return result;
}

char *CGFontIndexSetAddIndexRange(char *result, __int16 a2, unsigned int a3)
{
  if (result && a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    do
      CFDictionaryRef result = CGFontIndexSetAddIndex(v4, (unsigned __int16)(v5++ + a2));
    while (v6 != v5);
  }
  return result;
}

uint64_t CGFontIndexSetContainsIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8 * (a2 >> 13) + 8);
  if (v2) {
    return (*(unsigned __int8 *)(v2 + ((a2 >> 3) & 0x3FF)) >> (a2 & 7)) & 1;
  }
  else {
    return 0;
  }
}

unint64_t CGFontIndexSetGetIndexRange(uint64_t a1, unint64_t a2, _WORD *a3)
{
  uint64_t v3 = 0;
  if (a1 && a2 != 0xFFFF)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(a1 + 8 * (a2 >> 13) + 8);
      if (v4)
      {
        if ((*(unsigned __int8 *)(v4 + ((a2 >> 3) & 0x3FF)) >> (a2 & 7))) {
          break;
        }
      }
      a2 = (a2 + 1);
      if (a2 == 0xFFFF) {
        return 0;
      }
    }
    if (a3) {
      *a3 = a2;
    }
    unsigned int v5 = (unsigned __int16)a2;
    uint64_t v6 = *(void *)(a1 + 8 * ((unsigned __int16)a2 >> 13) + 8);
    if (v6)
    {
      unint64_t v7 = (unsigned __int16)a2;
      do
      {
        if (((*(unsigned __int8 *)(v6 + ((v7 >> 3) & 0x3FF)) >> (v7 & 7)) & 1) == 0) {
          break;
        }
        LOWORD(a2) = a2 + 1;
        unint64_t v7 = (unsigned __int16)a2;
        uint64_t v6 = *(void *)(a1 + 8 * ((unsigned __int16)a2 >> 13) + 8);
      }
      while (v6);
    }
    return (unsigned __int16)a2 - (unint64_t)v5;
  }
  return v3;
}

uint64_t CGFontIndexSetGetCount(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFDictionaryRef result = 0;
    uint64_t v2 = 0;
    v3.i64[0] = 0x5555555555555555;
    v3.i64[1] = 0x5555555555555555;
    v4.i64[0] = 0x3333333333333333;
    v4.i64[1] = 0x3333333333333333;
    v5.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v5.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v6.i64[0] = 0x3F0000003FLL;
    v6.i64[1] = 0x3F0000003FLL;
    do
    {
      uint64_t v7 = *(void *)(v1 + 8 * v2 + 8);
      if (v7)
      {
        uint64_t v8 = 0;
        int64x2_t v9 = 0uLL;
        int64x2_t v10 = 0uLL;
        do
        {
          int8x16_t v11 = (int8x16_t)vsubq_s32(*(int32x4_t *)(v7 + v8), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(*(uint32x4_t *)(v7 + v8), 1uLL), v3));
          uint32x4_t v12 = (uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v11, 2uLL), v4), (int32x4_t)vandq_s8(v11, v4));
          uint32x4_t v13 = (uint32x4_t)vandq_s8((int8x16_t)vsraq_n_u32(v12, v12, 4uLL), v5);
          uint32x4_t v14 = vsraq_n_u32(v13, v13, 8uLL);
          uint32x4_t v15 = (uint32x4_t)vandq_s8((int8x16_t)vsraq_n_u32(v14, v14, 0x10uLL), v6);
          int64x2_t v10 = (int64x2_t)vaddw_high_u32((uint64x2_t)v10, v15);
          int64x2_t v9 = (int64x2_t)vaddw_u32((uint64x2_t)v9, *(uint32x2_t *)v15.i8);
          v8 += 16;
        }
        while (v8 != 1024);
        uint64_t v7 = vaddvq_s64(vaddq_s64(v9, v10));
      }
      result += v7;
      ++v2;
    }
    while (v2 != 8);
  }
  return result;
}

uint64_t CGFontIndexSetGetIndexes(uint64_t result, _WORD *a2)
{
  if (result && a2)
  {
    for (unint64_t i = 0; i != 0xFFFF; ++i)
    {
      uint64_t v3 = *(void *)(result + 8 * ((unsigned __int16)i >> 13) + 8);
      if (v3)
      {
        if ((*(unsigned __int8 *)(v3 + ((i >> 3) & 0x3FF)) >> (i & 7))) {
          *a2++ = i;
        }
      }
    }
  }
  return result;
}

uint64_t CGFontIndexSetGetIndexVectorSize(uint64_t a1)
{
  uint64_t v1 = 0;
  while (1)
  {
    __int16 v2 = v1 ^ 7;
    uint64_t v3 = *(void *)(a1 + 8 * (v1 ^ 7) + 8);
    if (v3) {
      break;
    }
    if (++v1 == 8) {
      return 0;
    }
  }
  uint64_t v4 = 0;
  while (((*(unsigned __int8 *)(v3 + ((v4 ^ 0x1FFFuLL) >> 3)) >> (~(_BYTE)v4 & 7)) & 1) == 0)
  {
    if (++v4 == 0x2000) {
      return 0;
    }
  }
  return (((((unsigned __int16)v4 ^ 0x1FFF) & 0xFFF8u | (unsigned __int16)(v2 << 13)) + 32) >> 3) & 0x3FFCLL;
}

void CGFontIndexSetGetIndexVector(uint64_t a1, void *a2)
{
  size_t IndexVectorSize = CGFontIndexSetGetIndexVectorSize(a1);
  bzero(a2, IndexVectorSize);
  for (unint64_t i = 0; i != 0xFFFF; ++i)
  {
    uint64_t v9 = *(void *)(a1 + 8 * ((unsigned __int16)i >> 13) + 8);
    if (v9 && ((*(unsigned __int8 *)(v9 + ((i >> 3) & 0x3FF)) >> (i & 7)) & 1) != 0)
    {
      if (i >> 5 >= IndexVectorSize >> 2) {
        _CGHandleAssert("CGFontIndexSetGetIndexVector", 284, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontIndexSet.c", "k / 32 < size / 4", "k: %zu  size: %zu", v5, v6, v7, i);
      }
      *((_DWORD *)a2 + (i >> 5)) |= 1 << ~(_BYTE)i;
    }
  }
}

uint64_t CGFontIndexSetGetName(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 72))
  {
    __int16 v2 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
    CC_MD5_Init(v2);
    time_t v9 = time(0);
    if (v2) {
      CC_MD5_Update(v2, &v9, 8u);
    }
    for (uint64_t i = 0; i != 8; ++i)
    {
      while (1)
      {
        uint64_t v4 = *(const void **)(a1 + 8 * i + 8);
        if (!v4) {
          break;
        }
        if (v2)
        {
          CC_MD5_Update(v2, v4, 0x400u);
          if (++i == 8) {
            goto LABEL_14;
          }
        }
        else if (++i == 8)
        {
          goto LABEL_15;
        }
      }
    }
    if (!v2) {
      goto LABEL_15;
    }
LABEL_14:
    CC_MD5_Final(md, v2);
LABEL_15:
    free(v2);
    uint64_t v5 = malloc_type_malloc(7uLL, 0xFBD83575uLL);
    for (uint64_t j = 0; j != 6; ++j)
      v5[j] = md[j] % 0x1Au + 65;
    uint64_t v7 = 0;
    v5[6] = 0;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 72), (unint64_t *)&v7, (unint64_t)v5, memory_order_relaxed, memory_order_relaxed);
    if (v7) {
      free(v5);
    }
  }
  return *(void *)(a1 + 72);
}