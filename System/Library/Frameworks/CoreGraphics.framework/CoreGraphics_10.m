unsigned char *CGPDFCryptFilterCreateStandard(uint64_t a1)
{
  unsigned char *v2;

  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v2)
  {
    *(void *)v2 = a1;
    v2[12] = 0;
    *((_DWORD *)v2 + 2) = 1;
    *((void *)v2 + 2) = 0;
  }
  return v2;
}

BOOL get_object_key(uint64_t a1, int a2, unint64_t a3, unsigned __int8 *a4, size_t *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  size_t __n = 0;
  BOOL result = CGPDFSecurityManagerGetDecryptionKey(*(void *)a1, __src, &__n);
  if (result)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    size_t v12 = __n;
    if (v11) {
      BOOL v13 = v11 == __n;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      int v14 = *(_DWORD *)(a1 + 8);
      if (v14 == 3)
      {
        memcpy(a4, __src, __n);
      }
      else
      {
        v15 = &__src[__n];
        *(_WORD *)v15 = a2;
        v15[2] = BYTE2(a2);
        v15[3] = a3;
        unint64_t v16 = a3 >> 8;
        unint64_t v17 = v12 + 5;
        v15[4] = v16;
        if (v14 == 2)
        {
          *(_DWORD *)&__src[v17] = 1416380787;
          unint64_t v17 = v12 + 9;
        }
        CGGetMD5DigestOfBytes(a4, __src, v17);
        if (v17 >= 0x10) {
          size_t v12 = 16;
        }
        else {
          size_t v12 = v17;
        }
      }
      *a5 = v12;
      if (pdf_is_verbose_onceToken != -1) {
        dispatch_once(&pdf_is_verbose_onceToken, &__block_literal_global_5_6606);
      }
      if (pdf_is_verbose_isVerbose)
      {
        printf("Object key: %u <", a2);
        for (; v12; --v12)
        {
          int v18 = *a4++;
          printf("%02x", v18);
        }
        puts(">");
      }
      return 1;
    }
    else
    {
      pdf_error("unsupported crypt filter key length.");
      return 0;
    }
  }
  return result;
}

void *CGPDFCryptFilterCreateDecryptor(void *result, int a2, unint64_t a3, void *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    v5 = result;
    if (*((unsigned char *)result + 12))
    {
      return CGPDFDecryptorCreate(a4, 0, 0, 0);
    }
    else
    {
      size_t v7 = 0;
      BOOL object_key = get_object_key((uint64_t)result, a2, a3, v8, &v7);
      BOOL result = 0;
      if (object_key) {
        return CGPDFDecryptorCreate(a4, *((_DWORD *)v5 + 2), v8, v7);
      }
    }
  }
  return result;
}

uint64_t ripr_retain(uint64_t result)
{
  return result;
}

uint64_t ripr_size()
{
  return 0;
}

uint64_t ripr_super()
{
  return 0;
}

CFArrayRef CGFontCopyVariationAxes(CGFontRef font)
{
  if (!font) {
    return 0;
  }
  unint64_t v15 = 0;
  uint64_t v1 = (*(uint64_t (**)(void, unint64_t *))(*((void *)font + 2) + 408))(*((void *)font + 14), &v15);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (v15)
  {
    unint64_t v4 = 0;
    v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    v6 = (double *)(v2 + 16);
    size_t v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      v8 = CFDictionaryCreateMutable(0, 0, v5, v7);
      uint64_t v9 = v8;
      v10 = (const void *)*((void *)v6 - 2);
      if (v10)
      {
        CFDictionarySetValue(v8, @"kCGFontVariationAxisName", v10);
      }
      else
      {
        *(_DWORD *)cStr = bswap32(*((_DWORD *)v6 - 2));
        char v17 = 0;
        CFStringRef v11 = CFStringCreateWithCString(alloc, cStr, 0);
        if (v11)
        {
          CFStringRef v12 = v11;
          CFDictionarySetValue(v9, @"kCGFontVariationAxisName", v11);
          CFRelease(v12);
        }
      }
      CGCFDictionarySetFloat(v9, @"kCGFontVariationAxisMinValue", *v6);
      CGCFDictionarySetFloat(v9, @"kCGFontVariationAxisMaxValue", v6[1]);
      CGCFDictionarySetFloat(v9, @"kCGFontVariationAxisDefaultValue", v6[2]);
      if (v9)
      {
        CFArrayAppendValue(Mutable, v9);
        CFRelease(v9);
      }
      ++v4;
      v6 += 5;
    }
    while (v4 < v15);
  }
  return Mutable;
}

void *pdf_source_create_predictor2_filter(const void *a1, CGPDFDictionary *a2)
{
  unint64_t v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10300406BFC95CEuLL);
  v4[3] = 8;
  *(int64x2_t *)(v4 + 1) = vdupq_n_s64(1uLL);
  if (a2)
  {
    CGPDFInteger value = 0;
    if (CGPDFDictionaryGetInteger(a2, "Colors", &value))
    {
      if (value < 1) {
        pdf_error("/%s is outside the range of allowed values.", "Colors");
      }
      else {
        v4[1] = value;
      }
    }
    if (CGPDFDictionaryGetInteger(a2, "BitsPerComponent", &value))
    {
      if ((unint64_t)value <= 0x10 && ((1 << value) & 0x10116) != 0) {
        v4[3] = value;
      }
      else {
        pdf_error("/%s is outside the range of allowed values.", "BitsPerComponent");
      }
    }
    if (CGPDFDictionaryGetInteger(a2, "Columns", &value))
    {
      if ((unint64_t)(value - 1) > 0x3FFFFFFE)
      {
        pdf_error("/%s is outside the range of allowed values.", "Columns");
        if (!a1) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      v4[2] = value;
    }
  }
  if (a1) {
LABEL_14:
  }
    CFRetain(a1);
LABEL_15:
  *unint64_t v4 = a1;
  size_t v5 = v4[1];
  unint64_t v6 = v4[3];
  if (v5 <= 0xFFFFFFFFFFFFFFF8 / v6
    && (size_t v7 = v6 * v5, v8 = v4[2], v8 <= 0xFFFFFFFFFFFFFFF8 / v7)
    && (size_t v9 = (v8 * v7 + 7) >> 3,
        v4[4] = malloc_type_malloc(v5, 0xED68B086uLL),
        (BOOL result = CGPDFSourceCreateInternal(v9)) != 0))
  {
    *((unsigned char *)result + 209) = 1;
    long long v11 = *(_OWORD *)&off_1ED098A10;
    *((_OWORD *)result + 3) = pdf_source_create_predictor2_filter_callbacks;
    *((_OWORD *)result + 4) = v11;
    result[10] = v4;
  }
  else
  {
    predictor2_filter_finalize((void **)v4);
    return 0;
  }
  return result;
}

void predictor2_filter_finalize(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1[4]);
    free(a1);
  }
}

uint64_t predictor2_filter_refill(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = (unsigned __int8 *)a2;
  uint64_t v10 = CGPDFSourceRead(*(void *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    unint64_t v11 = *(void *)(a1 + 24);
    char v12 = v11 - 1;
    if (v11 - 1 <= 7 && ((0x8Bu >> v12) & 1) != 0)
    {
      bzero(*(void **)(a1 + 32), *(void *)(a1 + 8));
      unint64_t v14 = *(void *)(a1 + 16);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = 0;
        unint64_t v17 = 0;
        unsigned int v18 = 0;
        unint64_t v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = &v8[v10];
        unsigned int v22 = 0xFFFFFFFF >> -(char)v11;
        v23 = v8;
        do
        {
          if (*(void *)(a1 + 8))
          {
            unint64_t v24 = 0;
            do
            {
              if (v11)
              {
                while (v19 < v11)
                {
                  v20 <<= 8;
                  if (v23 < v21)
                  {
                    int v25 = *v23++;
                    v20 |= v25;
                  }
                  v19 += 8;
                }
                v19 -= v11;
                int v26 = (v20 >> v19) & v22;
              }
              else
              {
                LOBYTE(v26) = 0;
              }
              *(unsigned char *)(*(void *)(a1 + 32) + v24) += v26;
              uint64_t v27 = *(void *)(a1 + 32);
              int v28 = *(unsigned __int8 *)(v27 + v24);
              if (v15 < 8)
              {
                char v29 = *(unsigned char *)(v27 + v24);
              }
              else
              {
                do
                {
                  v15 -= 8;
                  *v8++ = v18 >> v15;
                }
                while (v15 > 7);
                uint64_t v27 = *(void *)(a1 + 32);
                char v29 = *(unsigned char *)(v27 + v24);
              }
              unsigned int v18 = v22 & v28 | (v18 << v11);
              v15 += v11;
              *(unsigned char *)(v27 + v24) = v29 & (0xFF01010107010301 >> (8 * v12));
              v16 += v11;
              if (v10 == v16 >> 3) {
                break;
              }
              ++v24;
            }
            while (v24 < *(void *)(a1 + 8));
            unint64_t v14 = *(void *)(a1 + 16);
          }
          ++v17;
        }
        while (v17 < v14);
        if (v19 <= 0x18)
        {
          unsigned int v30 = v20 & (0xFFFFFFFF >> -(char)v19);
          if (!v19) {
            unsigned int v30 = 0;
          }
          goto LABEL_34;
        }
        unsigned int v30 = v20 & (0xFFFFFFFF >> (24 - v19)) | (((v20 >> (v19 - 24)) & 0xFFFFFF) << (v19 - 24));
        if (v15 >= 8)
        {
          do
          {
            v15 -= 8;
            *v8++ = v18 >> v15;
          }
          while (v15 > 7);
        }
        v15 |= 0x18uLL;
        unsigned int v18 = (v30 >> (v19 - 24)) & 0xFFFFFF | (v18 << 24);
        v19 -= 24;
        do
        {
          v15 -= 8;
          *v8++ = v18 >> v15;
LABEL_34:
          ;
        }
        while (v15 > 7);
      }
      else
      {
        unsigned int v30 = 0;
        unsigned int v18 = 0;
        unint64_t v19 = 0;
        unint64_t v15 = 0;
      }
      unint64_t v31 = v15 + v19;
      if (v31)
      {
        unsigned int v32 = (0xFFFFFFFF >> -(char)v19) & v30 | (v18 << v19);
        do
        {
          unint64_t v33 = v31;
          if (v31 >= 8)
          {
            do
            {
              v33 -= 8;
              *v8++ = v32 >> v33;
            }
            while (v33 > 7);
          }
          uint64_t v34 = -(int)v31 & 7;
          v32 <<= v34;
          unint64_t v31 = v33 + v34;
        }
        while (v31);
      }
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

uint64_t predictor2_filter_rewind(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGPDFSourceRewind(*a1, a2, a3, a4, a5, a6, a7, a8);
}

__CFString *path_debug_description(const CGPath *a1)
{
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"Path %p:\n", a1);
  CGPathApply(a1, Mutable, (CGPathApplierFunction)path_debug_desc_applier);
  return Mutable;
}

void path_debug_desc_applier(__CFString *a1, const CGPathElement *a2)
{
  points = a2->points;
  switch(a2->type)
  {
    case kCGPathElementMoveToPoint:
      CFStringAppendFormat(a1, 0, @"  moveto (%g, %g)\n", *(void *)&points->x, *(void *)&points->y);
      break;
    case kCGPathElementAddLineToPoint:
      CFStringAppendFormat(a1, 0, @"    lineto (%g, %g)\n", *(void *)&points->x, *(void *)&points->y);
      break;
    case kCGPathElementAddQuadCurveToPoint:
      CFStringAppendFormat(a1, 0, @"    quadto (%g, %g) (%g, %g)\n", *(void *)&points->x, *(void *)&points->y, *(void *)&points[1].x, *(void *)&points[1].y);
      break;
    case kCGPathElementAddCurveToPoint:
      CFStringAppendFormat(a1, 0, @"    curveto (%g, %g) (%g, %g) (%g, %g)\n", *(void *)&points->x, *(void *)&points->y, *(void *)&points[1].x, *(void *)&points[1].y, *(void *)&points[2].x, *(void *)&points[2].y);
      break;
    case kCGPathElementCloseSubpath:
      CFStringAppend(a1, @"    closepath\n");
      break;
    default:
      return;
  }
}

uint64_t path_hash(const void *a1)
{
  return 0;
}

CGPathRef CGPathCreateCopyByDashingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat phase, const CGFloat *lengths, size_t count)
{
  if (!path) {
    return 0;
  }
  if (!CGPathDisableTypeValidation)
  {
    CFTypeID v14 = CFGetTypeID(path);
    if (v14 != CGPathGetTypeID()) {
      return 0;
    }
  }
  CFTypeID TypeID = CGPathGetTypeID();
  uint64_t Instance = CGTypeCreateInstance(TypeID, 128, v16, v17, v18, v19, v20, v21);
  int v26 = (const CGPath *)Instance;
  if (Instance)
  {
    uint64_t v27 = CG::Path::Path((CG::Path *)(Instance + 16), (CGPathRef)((char *)path + 16), phase, lengths, count, 0, v23, v24, v25);
    if (transform) {
      CG::Path::apply_transform(v27, transform, v28, v29, v30, v31, v32, v33);
    }
  }
  return v26;
}

uint64_t CGPathCreateWithLineSegment(_anonymous_namespace_ *a1, const CGAffineTransform *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  v24.x = a9;
  v24.y = a10;
  v23.x = a11;
  v23.y = a12;
    return 0;
  CFTypeID TypeID = CGPathGetTypeID();
  uint64_t Instance = CGTypeCreateInstance(TypeID, 88, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = Instance;
  if (Instance) {
    CG::Path::append_line_segment(Instance + 16, (__n128 *)&v24, &v23, (const CGAffineTransform *)a1);
  }
  return v21;
}

CGPathRef CGPathCreateWithUnevenCornersRoundedRect(const CGRect *a1, _anonymous_namespace_ *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  if (a1 && is_valid)
  {
    v47.origin.CGFloat x = a9;
    v47.origin.CGFloat y = a10;
    v47.size.CGFloat width = a11;
    v47.size.CGFloat height = a12;
    CGRect v48 = CGRectStandardize(v47);
    CGFloat x = v48.origin.x;
    CGFloat y = v48.origin.y;
    CGFloat width = v48.size.width;
    CGFloat height = v48.size.height;
    CGRect v38 = v48;
    BOOL v25 = v39.width == v40 && v39.height == v41;
    if (v25
      && (v39.width == v42 ? (BOOL v26 = v39.height == v43) : (BOOL v26 = 0),
          v26 && (v39.width == v44 ? (BOOL v27 = v39.height == v45) : (BOOL v27 = 0), v27)))
    {
      if (v39.width == 0.0 || v39.height == 0.0)
      {
        v50.origin.CGFloat x = x;
        v50.origin.CGFloat y = y;
        v50.size.CGFloat width = width;
        v50.size.CGFloat height = height;
        return CGPathCreateWithRect(v50, (const CGAffineTransform *)this);
      }
      else
      {
        v49.origin.CGFloat x = x;
        v49.origin.CGFloat y = y;
        v49.size.CGFloat width = width;
        v49.size.CGFloat height = height;
        return CGPathCreateWithRoundedRect(v49, v39.width, v39.height, (const CGAffineTransform *)this);
      }
    }
    else
    {
      CFTypeID TypeID = CGPathGetTypeID();
      uint64_t Instance = CGTypeCreateInstance(TypeID, 120, v29, v30, v31, v32, v33, v34);
      uint64_t v19 = Instance;
      if (Instance) {
        CG::Path::append_uneven_rounded_rect(Instance + 16, &v38, &v39, (float64x2_t *)this);
      }
    }
  }
  return (CGPathRef)v19;
}

CGFloat anonymous namespace'::standardize_uneven_corners(float64x2_t *this, const CGRect *a2, const CGSize *a3, CGSize *a4)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    float64x2_t v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(this[1], *(float64x2_t *)((char *)&a2->origin + i * 16)), *(int8x16_t *)((char *)&a2->origin + i * 16), (int8x16_t)this[1]);
    a3[i] = (const CGSize)vbicq_s8((int8x16_t)v5, (int8x16_t)vcltzq_f64(v5));
  }
  double v6 = this[1].f64[0];
  if (a3->width + a3[1].width > v6)
  {
    a3[1].double width = v6 - a3->width;
    double v6 = this[1].f64[0];
  }
  double width = a3[2].width;
  if (width + a3[3].width > v6) {
    a3[3].double width = v6 - width;
  }
  double height = a3[1].height;
  CGFloat result = this[1].f64[1];
  if (height + a3[2].height > result)
  {
    a3[2].double height = result - height;
    CGFloat result = this[1].f64[1];
  }
  double v10 = a3->height;
  if (v10 + a3[3].height > result)
  {
    CGFloat result = result - v10;
    a3[3].double height = result;
  }
  return result;
}

CGPathRef CGPathCreateWithContinuousRoundedRect(CGAffineTransform *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  CGRect v47 = CGRectStandardize(*(CGRect *)&a2);
  CGFloat x = v47.origin.x;
  CGFloat y = v47.origin.y;
  CGFloat width = v47.size.width;
  CGFloat height = v47.size.height;
  CGRect v44 = v47;
  if (a6 >= 0.0) {
    double v21 = a6;
  }
  else {
    double v21 = 0.0;
  }
  if (a7 >= 0.0) {
    double v22 = a7;
  }
  else {
    double v22 = 0.0;
  }
  if (v47.size.width < 0.0 || v47.size.height < 0.0)
  {
    CGRect v48 = CGRectStandardize(v47);
    double v23 = v48.size.width * 0.5;
    if (v21 <= v48.size.width * 0.5) {
      double v24 = v21;
    }
    else {
      double v24 = v48.size.width * 0.5;
    }
    v49.origin.CGFloat x = x;
    v49.origin.CGFloat y = y;
    v49.size.CGFloat width = width;
    v49.size.CGFloat height = height;
    CGRect v47 = CGRectStandardize(v49);
  }
  else
  {
    double v23 = v47.size.width * 0.5;
    if (v21 <= v47.size.width * 0.5) {
      double v24 = v21;
    }
    else {
      double v24 = v47.size.width * 0.5;
    }
  }
  if (v22 > v47.size.height * 0.5) {
    double v22 = v47.size.height * 0.5;
  }
  if (v24 == 0.0 || v22 == 0.0)
  {
    CGFloat v35 = x;
    CGFloat v36 = y;
    CGFloat v37 = width;
    CGFloat v38 = height;
    return CGPathCreateWithRect(*(CGRect *)&v35, a1);
  }
  else if (v24 == v23 && v22 == v47.size.height * 0.5)
  {
    CGFloat v40 = x;
    CGFloat v41 = y;
    CGFloat v42 = width;
    CGFloat v43 = height;
    return CGPathCreateWithEllipseInRect(*(CGRect *)&v40, a1);
  }
  else
  {
      return 0;
    CFTypeID TypeID = CGPathGetTypeID();
    uint64_t Instance = CGTypeCreateInstance(TypeID, 128, v27, v28, v29, v30, v31, v32);
    uint64_t v34 = Instance;
    if (Instance)
    {
      v46.CGFloat width = v24;
      v46.CGFloat height = v22;
      CG::Path::append_continuous_rounded_rect((CG::Path *)(Instance + 16), &v44, v46, (float64x2_t *)a1);
    }
    return (CGPathRef)v34;
  }
}

void CGPathAddContinuousRoundedRect(char *cf, float64x2_t *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14)
{
  if (cf)
  {
    if (CGPathDisableTypeValidation || (CFTypeID v22 = CFGetTypeID(cf), v22 == CGPathGetTypeID()))
    {
      {
        v36.origin.CGFloat x = a9;
        v36.origin.CGFloat y = a10;
        v36.size.CGFloat width = a11;
        v36.size.double height = a12;
        CGRect v37 = CGRectStandardize(v36);
        CGFloat x = v37.origin.x;
        CGFloat y = v37.origin.y;
        CGFloat width = v37.size.width;
        double height = v37.size.height;
        CGRect v35 = v37;
        if (a13 >= 0.0) {
          double v27 = a13;
        }
        else {
          double v27 = 0.0;
        }
        if (a14 >= 0.0) {
          double v28 = a14;
        }
        else {
          double v28 = 0.0;
        }
        if (v37.size.width < 0.0 || v37.size.height < 0.0)
        {
          CGRect v38 = CGRectStandardize(v37);
          double v29 = v38.size.width * 0.5;
          if (v27 <= v38.size.width * 0.5) {
            double v30 = v27;
          }
          else {
            double v30 = v38.size.width * 0.5;
          }
          v39.origin.CGFloat x = x;
          v39.origin.CGFloat y = y;
          v39.size.CGFloat width = width;
          v39.size.double height = height;
          CGRect v40 = CGRectStandardize(v39);
          double height = v40.size.height;
        }
        else
        {
          double v29 = v37.size.width * 0.5;
          if (v27 <= v37.size.width * 0.5) {
            double v30 = v27;
          }
          else {
            double v30 = v37.size.width * 0.5;
          }
        }
        if (v28 <= height * 0.5) {
          double v31 = v28;
        }
        else {
          double v31 = height * 0.5;
        }
        if (v30 == 0.0 || v31 == 0.0)
        {
          CG::Path::append_rect((uint64_t)(cf + 16), &v35, this);
        }
        else
        {
          uint64_t v32 = (CG::Path *)(cf + 16);
          if (v30 == v29 && v31 == height * 0.5)
          {
            CG::Path::append_ellipse(v32, &v35, 1, 0, (const CGAffineTransform *)this);
          }
          else
          {
            double v34 = v30;
            CG::Path::append_continuous_rounded_rect(v32, &v35, *(CGSize *)(&v31 - 1), this);
          }
        }
      }
    }
  }
}

void CGPathAddRelativeArc(CGMutablePathRef path, const CGAffineTransform *matrix, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat delta)
{
  if (path)
  {
    CGMutablePathRef v19 = path;
    if (CGPathDisableTypeValidation
      || (uint64_t v20 = (CGPath *)CFGetTypeID(path), path = (CGMutablePathRef)CGPathGetTypeID(), v20 == path))
    {
      BOOL v21 = CGFloatValidateWithLog(x, (uint64_t)path, (uint64_t)matrix, v7, v8, v9, v10, v11, v12);
      if (v21 {
        && CGFloatValidateWithLog(y, v21, v22, v23, v24, v25, v26, v27, v28)
      }
      {
        if (fabs(startAngle) > 6283.18531 || fabs(delta) > 6283.18531)
        {
          CGPostError((uint64_t)"%s: invalid value for start or delta angle.", v36, v37, v38, v39, v40, v41, v42, (char)"CGPathAddRelativeArc");
        }
        else
        {
          v43.CGFloat x = x;
          v43.CGFloat y = y;
          CG::Path::add_arc_relative((CGMutablePathRef)((char *)v19 + 16), (float64x2_t *)&v43, radius, startAngle, delta, (CGPoint *)matrix, 0);
        }
      }
    }
  }
}

void CGPathAddLines(CGMutablePathRef path, const CGAffineTransform *m, const CGPoint *points, size_t count)
{
  if (path)
  {
    if (CGPathDisableTypeValidation)
    {
      BOOL v12 = 0;
      if (!count) {
        return;
      }
    }
    else
    {
      CFTypeID v13 = CFGetTypeID(path);
      BOOL v12 = v13 != CGPathGetTypeID();
      if (!count) {
        return;
      }
    }
    if (points)
    {
      if (!v12)
      {
        if (is_valid)
        {
          p_CGFloat y = &points->y;
          size_t v23 = count;
          while (1)
          {
            BOOL v24 = CGFloatValidateWithLog(*(p_y - 1), is_valid, v15, v16, v17, v18, v19, v20, v21);
            if (!v24) {
              break;
            }
            BOOL is_valid = CGFloatValidateWithLog(*p_y, v24, v25, v26, v27, v28, v29, v30, v31);
            if (!is_valid) {
              break;
            }
            p_y += 2;
            if (!--v23)
            {
              uint64_t v32 = (CGMutablePathRef)((char *)path + 16);
              if (count == 2)
              {
                CG::Path::append_line_segment((uint64_t)v32, (__n128 *)points, points + 1, m);
              }
              else
              {
                CG::Path::reserve_space(v32, count + 1, count + 1);
                CG::Path::move_to_point((int *)v32, (float64x2_t *)m, v33, *(__n128 *)points);
                if (count >= 2)
                {
                  size_t v35 = count - 1;
                  uint64_t v36 = points + 1;
                  do
                  {
                    float64x2_t v37 = *(float64x2_t *)v36++;
                    CG::Path::add_line_to_point(v32, (float64x2_t *)m, v34, v37);
                    --v35;
                  }
                  while (v35);
                }
              }
              return;
            }
          }
        }
      }
    }
  }
}

void CGPathAddRects(CGMutablePathRef path, const CGAffineTransform *m, const CGRect *rects, size_t count)
{
  if (path)
  {
    size_t v8 = count;
    if (CGPathDisableTypeValidation)
    {
      BOOL v12 = 0;
      if (!count) {
        return;
      }
    }
    else
    {
      CFTypeID v13 = CFGetTypeID(path);
      BOOL v12 = v13 != CGPathGetTypeID();
      if (!v8) {
        return;
      }
    }
    if (rects {
      && !v12
    }
    {
      if (v8 >= 2) {
        CG::Path::reserve_space((CGMutablePathRef)((char *)path + 16), 5 * v8, 5 * v8);
      }
      uint64_t v14 = (char *)path + 16;
      p_size = &rects->size;
      do
      {
        CGRect v17 = *(CGRect *)&p_size[-1].width;
        p_size += 2;
        CGRect v16 = CGRectStandardize(v17);
        CG::Path::append_rect((uint64_t)v14, &v16, (float64x2_t *)m);
        --v8;
      }
      while (v8);
    }
  }
}

void CGPathAddRoundedRect(CGMutablePathRef path, const CGAffineTransform *transform, CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight)
{
  if (path)
  {
    double height = rect.size.height;
    double width = rect.size.width;
    CGFloat y = rect.origin.y;
    CGFloat x = rect.origin.x;
    if (CGPathDisableTypeValidation || (CFTypeID v19 = CFGetTypeID(path), v19 == CGPathGetTypeID()))
    {
      {
        if (cornerWidth < 0.0) {
          goto LABEL_21;
        }
        BOOL v23 = height < 0.0 || width < 0.0;
        double v24 = width;
        if (v23)
        {
          v29.origin.CGFloat x = x;
          v29.origin.CGFloat y = y;
          v29.size.double width = width;
          v29.size.double height = height;
          *(CGRect *)(&v24 - 2) = CGRectStandardize(v29);
        }
        if (cornerWidth + cornerWidth > v24) {
LABEL_21:
        }
          _CGHandleAssert("CGPathAddRoundedRect", 598, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/CGPath.cc", "corner_width >= 0 && 2 * corner_width <= CGRectGetWidth(rect)", "corner width %f too big {o:{%f,%f}, s:{%f,%f}}", v20, v21, v22, SLOBYTE(cornerWidth));
        if (cornerHeight < 0.0) {
          goto LABEL_22;
        }
        double v25 = height;
        if (v23)
        {
          v30.origin.CGFloat x = x;
          v30.origin.CGFloat y = y;
          v30.size.double width = width;
          v30.size.double height = height;
          *(CGRect *)(&v25 - 3) = CGRectStandardize(v30);
        }
        if (cornerHeight + cornerHeight > v25) {
LABEL_22:
        }
          _CGHandleAssert("CGPathAddRoundedRect", 599, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/CGPath.cc", "corner_height >= 0 && 2 * corner_height <= CGRectGetHeight(rect)", "corner height %f too big {o:{%f,%f}, s:{%f,%f}}", v20, v21, v22, SLOBYTE(cornerHeight));
        uint64_t v26 = (char *)path + 16;
        v31.origin.CGFloat x = x;
        v31.origin.CGFloat y = y;
        v31.size.double width = width;
        v31.size.double height = height;
        CGRect v32 = CGRectStandardize(v31);
        if (cornerWidth == 0.0 || cornerHeight == 0.0)
        {
          CGRect v27 = v32;
          CG::Path::append_rect((uint64_t)v26, &v27, (float64x2_t *)transform);
        }
        else
        {
          CGRect v27 = v32;
          v28.double width = cornerWidth;
          v28.double height = cornerHeight;
          CG::Path::append_rounded_rect((uint64_t)v26, &v27, v28, transform);
        }
      }
    }
  }
}

uint64_t CGPathAddUnevenCornersRoundedRect(uint64_t cf, _anonymous_namespace_ *this, const CGRect *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    uint64_t v18 = cf;
    if (CGPathDisableTypeValidation || (CFTypeID v19 = CFGetTypeID((CFTypeRef)cf), cf = CGPathGetTypeID(), v19 == cf))
    {
      if (a3)
      {
        if (cf)
        {
          v34.origin.CGFloat x = a9;
          v34.origin.CGFloat y = a10;
          v34.size.CGFloat width = a11;
          v34.size.CGFloat height = a12;
          CGRect v25 = CGRectStandardize(v34);
          CGFloat width = v26.width;
          CGFloat height = v26.height;
          BOOL v23 = v26.width == v27 && v26.height == v28;
          if (v23 && v26.width == v29 && v26.height == v30 && v26.width == v31 && v26.height == v32)
          {
            uint64_t v24 = v18 + 16;
            if (v26.width == 0.0 || v26.height == 0.0) {
              return CG::Path::append_rect(v24, &v25, (float64x2_t *)this);
            }
            else {
              return CG::Path::append_rounded_rect(v24, &v25, *(CGSize *)&width, (const CGAffineTransform *)this);
            }
          }
          else
          {
            return CG::Path::append_uneven_rounded_rect(v18 + 16, &v25, &v26, (float64x2_t *)this);
          }
        }
      }
    }
  }
  return cf;
}

uint64_t CGPathAddRegion(uint64_t cf, _anonymous_namespace_ *this, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (cf)
  {
    uint64_t v10 = cf;
    if (CGPathDisableTypeValidation || (CFTypeID v11 = CFGetTypeID((CFTypeRef)cf), cf = CGPathGetTypeID(), v11 == cf))
    {
      if (cf)
      {
        return (uint64_t)CG::Path::append_region((CG::Path *)(v10 + 16), a3, (float64x2_t *)this, v12, v13, v14, v15, v16);
      }
    }
  }
  return cf;
}

uint64_t CGPathIsLine(uint64_t cf, _OWORD *a2)
{
  if (cf)
  {
    uint64_t v3 = cf;
    if (CGPathDisableTypeValidation || (CFTypeID v4 = CFGetTypeID((CFTypeRef)cf), v4 == CGPathGetTypeID()))
    {
      int v5 = *(_DWORD *)(v3 + 16);
      switch(v5)
      {
        case 9:
          if (*(void *)(v3 + 24) == 2 && *(void *)(v3 + 32) == 2)
          {
            uint64_t v7 = *(_OWORD **)(v3 + 48);
            uint64_t v8 = (char *)v7 + *(void *)(v3 + 40);
            if (!*(v8 - 1) && *(v8 - 2) == 1)
            {
              if (a2)
              {
                *a2 = *v7;
                uint64_t v7 = *(_OWORD **)(v3 + 48);
              }
              uint64_t v6 = v7 + 1;
              goto LABEL_10;
            }
          }
          break;
        case 8:
          if (*(_WORD *)(v3 + 24) == 2 && *(_WORD *)(v3 + 26) == 2 && (*(_DWORD *)(v3 + 28) & 0x3F) == 8)
          {
            if (a2) {
              *a2 = *(_OWORD *)(v3 + 32);
            }
            uint64_t v6 = (_OWORD *)(v3 + 48);
            goto LABEL_10;
          }
          break;
        case 5:
          if (a2) {
            *a2 = *(_OWORD *)(v3 + 24);
          }
          uint64_t v6 = (_OWORD *)(v3 + 40);
LABEL_10:
          a2[1] = *v6;
          return 1;
      }
    }
    return 0;
  }
  return cf;
}

uint64_t CGPathIsRectWithTransform(char *cf, CGRect *a2, CGAffineTransform *a3)
{
  if (!cf) {
    return 0;
  }
  if (!CGPathDisableTypeValidation)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 != CGPathGetTypeID()) {
      return 0;
    }
  }

  return CG::Path::is_rect((CG::Path *)(cf + 16), a2, a3);
}

uint64_t CGPathIsEllipse(char *cf, CGRect *a2, uint64_t a3, uint64_t a4, CGAffineTransform *a5)
{
  if (!cf) {
    return 0;
  }
  if (!CGPathDisableTypeValidation)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 != CGPathGetTypeID()) {
      return 0;
    }
  }

  return CG::Path::is_ellipse((CG::Path *)(cf + 16), a2, 0, 0, a5);
}

uint64_t CGPathIsEllipseWithTransform(char *cf, CGRect *a2, BOOL *a3, uint64_t a4, CGAffineTransform *a5)
{
  if (!cf) {
    return 0;
  }
  if (!CGPathDisableTypeValidation)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 != CGPathGetTypeID()) {
      return 0;
    }
  }

  return CG::Path::is_ellipse((CG::Path *)(cf + 16), a2, 0, a3, a5);
}

uint64_t CGPathIsEllipse2(char *cf, CGRect *a2, BOOL *a3, uint64_t a4, CGAffineTransform *a5)
{
  if (!cf) {
    return 0;
  }
  if (!CGPathDisableTypeValidation)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 != CGPathGetTypeID()) {
      return 0;
    }
  }

  return CG::Path::is_ellipse((CG::Path *)(cf + 16), a2, a3, 0, a5);
}

char *CGPathIsRoundedRect(char *cf, CGRect *a2, float64_t *a3, float64_t *a4)
{
  if (cf)
  {
    CFTypeID v7 = cf;
    if (CGPathDisableTypeValidation || (CFTypeID v8 = CFGetTypeID(cf), v8 == CGPathGetTypeID()))
    {
      cf = (char *)CG::Path::is_rounded_rect((CG::Path *)(v7 + 16), a2, &v9, 0);
      if (cf)
      {
        if (a3) {
          *a3 = v9.f64[0];
        }
        if (a4) {
          *a4 = v9.f64[1];
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

char *CGPathIsRoundedRectWithTransform(char *cf, CGRect *a2, float64_t *a3, float64_t *a4, CGAffineTransform *a5)
{
  if (cf)
  {
    float64x2_t v9 = cf;
    if (CGPathDisableTypeValidation || (CFTypeID v10 = CFGetTypeID(cf), v10 == CGPathGetTypeID()))
    {
      cf = (char *)CG::Path::is_rounded_rect((CG::Path *)(v9 + 16), a2, &v11, a5);
      if (cf)
      {
        if (a3) {
          *a3 = v11.f64[0];
        }
        if (a4) {
          *a4 = v11.f64[1];
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

uint64_t CGPathIsUnevenCornersRoundedRectWithTransform(uint64_t cf, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    uint64_t v7 = cf;
    if (CGPathDisableTypeValidation || (CFTypeID v8 = CFGetTypeID((CFTypeRef)cf), v8 == CGPathGetTypeID()))
    {
      int v9 = *(_DWORD *)(v7 + 16);
      if (v9 == 2)
      {
        if (a4)
        {
          if (a2) {
            *(CGRect *)a2 = unit_rect;
          }
          if (a3)
          {
            a3[3] = *(_OWORD *)(v7 + 72);
            long long v11 = *(_OWORD *)(v7 + 72);
            a3[1] = v11;
            a3[2] = v11;
            *a3 = v11;
          }
          goto LABEL_18;
        }
        double v31 = (_OWORD *)(v7 + 24);
        if (*(double *)(v7 + 32) == 0.0 && *(double *)(v7 + 40) == 0.0
          || *(double *)v31 == 0.0 && *(double *)(v7 + 48) == 0.0)
        {
          if (a2)
          {
            long long v32 = *(_OWORD *)(v7 + 40);
            *(_OWORD *)&v39.a = *v31;
            *(_OWORD *)&v39.c = v32;
            *(_OWORD *)&v39.tCGFloat x = *(_OWORD *)(v7 + 56);
            *(double *)a2 = transform_unit_rect(&v39);
            *(void *)(a2 + ++*(_DWORD *)(result + 8) = v33;
            *(void *)(a2 + 16) = v34;
            *(void *)(a2 + 24) = v35;
          }
          if (a3)
          {
            a3[3] = vabsq_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 40), *(double *)(v7 + 80)), *(float64x2_t *)(v7 + 24), *(double *)(v7 + 72)));
            long long v36 = a3[3];
            a3[1] = v36;
            a3[2] = v36;
            *a3 = v36;
          }
          return 1;
        }
      }
      else if (v9 == 3)
      {
        if (a4)
        {
          if (a2) {
            *(CGRect *)a2 = unit_rect;
          }
          if (a3)
          {
            for (uint64_t i = 0; i != 4; ++i)
              a3[i] = *(_OWORD *)(v7 + 72 + i * 16);
          }
LABEL_18:
          long long v12 = *(_OWORD *)(v7 + 24);
          long long v13 = *(_OWORD *)(v7 + 56);
          a4[1] = *(_OWORD *)(v7 + 40);
          a4[2] = v13;
          *a4 = v12;
          return 1;
        }
        uint64_t v14 = (_OWORD *)(v7 + 24);
        if (*(double *)(v7 + 32) == 0.0 && *(double *)(v7 + 40) == 0.0
          || *(double *)v14 == 0.0 && *(double *)(v7 + 48) == 0.0)
        {
          if (a2)
          {
            long long v15 = *(_OWORD *)(v7 + 40);
            *(_OWORD *)&v38.a = *v14;
            *(_OWORD *)&v38.c = v15;
            *(_OWORD *)&v38.tCGFloat x = *(_OWORD *)(v7 + 56);
            *(double *)a2 = transform_unit_rect(&v38);
            *(void *)(a2 + ++*(_DWORD *)(result + 8) = v16;
            *(void *)(a2 + 16) = v17;
            *(void *)(a2 + 24) = v18;
          }
          if (a3)
          {
            uint64_t v19 = 0;
            uint64_t v20 = *(uint64_t *)(v7 + 24);
            uint64_t v21 = *(uint64_t *)(v7 + 32);
            double v22 = *(double *)(v7 + 40);
            double v23 = *(double *)(v7 + 48);
            float64x2_t v24 = (float64x2_t)vdupq_lane_s64(v20, 0);
            float64x2_t v25 = (float64x2_t)vdupq_lane_s64(v21, 0);
            do
            {
              CGSize v26 = (const double *)(v7 + 72 + v19);
              float64x2x2_t v41 = vld2q_f64(v26);
              int64x2_t v27 = (int64x2_t)vmlaq_f64(vmulq_n_f64(v41.val[1], v22), v41.val[0], v24);
              int64x2_t v28 = (int64x2_t)vmlaq_f64(vmulq_n_f64(v41.val[1], v23), v41.val[0], v25);
              double v29 = (float64x2_t *)((char *)&v39 + v19);
              *double v29 = vabsq_f64((float64x2_t)vzip1q_s64(v27, v28));
              v29[1] = vabsq_f64((float64x2_t)vzip2q_s64(v27, v28));
              v19 += 32;
            }
            while (v19 != 64);
            if (*(double *)&v20 == 0.0 && v23 == 0.0)
            {
              for (uint64_t j = 0; j != 4; ++j)
                *a3++ = *((_OWORD *)&v39.a
                        + CG::Path::is_uneven_rounded_rect(CGRect *,CGSize *,CGAffineTransform *)const::permute[((4 * (v22 >= 0.0)) | (8 * (*(double *)&v21 >= 0.0))) + j]);
            }
            else
            {
              for (uint64_t k = 0; k != 4; ++k)
                *a3++ = *((_OWORD *)&v39.a
                        + CG::Path::is_uneven_rounded_rect(CGRect *,CGSize *,CGAffineTransform *)const::permute[((4 * (v23 >= 0.0)) | (8 * (*(double *)&v20 >= 0.0))) + k]);
            }
          }
          return 1;
        }
      }
    }
    return 0;
  }
  return cf;
}

uint64_t CGPathIsArc(uint64_t cf, void *a2, void *a3, void *a4, void *a5, _OWORD *a6)
{
  if (cf)
  {
    uint64_t v11 = cf;
    if ((CGPathDisableTypeValidation || (CFTypeID v12 = CFGetTypeID((CFTypeRef)cf), v12 == CGPathGetTypeID()))
      && *(_DWORD *)(v11 + 16) == 6)
    {
      if (a2)
      {
        *a2 = 0;
        a2[1] = 0;
      }
      if (a3) {
        *a3 = 0x3FF0000000000000;
      }
      if (a4) {
        *a4 = 0;
      }
      if (a5) {
        *a5 = *(void *)(v11 + 72);
      }
      if (a6)
      {
        long long v13 = *(_OWORD *)(v11 + 24);
        long long v14 = *(_OWORD *)(v11 + 56);
        a6[1] = *(_OWORD *)(v11 + 40);
        a6[2] = v14;
        *a6 = v13;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

BOOL CGPathIsRegion(BOOL cf, void *a2)
{
  if (cf)
  {
    uint64_t v3 = cf;
    if (CGPathDisableTypeValidation || (CFTypeID v4 = CFGetTypeID((CFTypeRef)cf), v4 == CGPathGetTypeID()))
    {
      int v5 = *(_DWORD *)(v3 + 16);
      cf = v5 == 7;
      if (a2)
      {
        if (v5 == 7)
        {
          *a2 = *(void *)(v3 + 24);
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

unint64_t CGPathGetNumberOfPoints(char *cf, int32x2_t a2)
{
  if (!cf) {
    return 0;
  }
  if (!CGPathDisableTypeValidation)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CGPathGetTypeID()) {
      return 0;
    }
  }

  return CG::Path::point_count((CG::Path *)(cf + 16), a2);
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  CGPoint v21 = point;
  if (path)
  {
    BOOL v9 = eoFill;
    CGPathRef v11 = path;
    double y = point.y;
    double x = point.x;
    if (CGPathDisableTypeValidation || (CFTypeID v12 = CFGetTypeID(path), v12 == CGPathGetTypeID()))
    {
      if (path)
      {
        if (m) {
          CGPoint v21 = (CGPoint)vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&m->c, y), *(float64x2_t *)&m->a, x));
        }
        LOBYTE(path) = CG::Path::contains_point((CGPathRef)((char *)v11 + 16), &v21, v9, v13, v14, v15, v16, v17);
      }
    }
    else
    {
      LOBYTE(path) = 0;
    }
  }
  return (char)path;
}

uint64_t CGPathIsValidGlyphPath(CFTypeRef cf)
{
  v82[3].f64[1] = *(float64_t *)MEMORY[0x1E4F143B8];
  if (!cf) {
    return 0;
  }
  if (!CGPathDisableTypeValidation)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 != CGPathGetTypeID()) {
      return 0;
    }
  }
  info[0].f64[0] = 0.0;
  CGPathApply((CGPathRef)cf, info, (CGPathApplierFunction)process_subpath_split);
  float64_t v8 = info[0].f64[0];
  if (!*(void *)&info[0].f64[0]) {
    return 1;
  }
  float64_t v9 = 0.0;
  do
  {
    double v10 = **(double **)&v8;
    CGPathRef v11 = *(char **)(*(void *)&v8 + 16);
    if (!v11) {
      goto LABEL_8;
    }
    if (*((_DWORD *)v11 + 4)) {
      goto LABEL_8;
    }
    CFTypeID v12 = *(uint64_t **)v11;
    if (!*(void *)v11) {
      goto LABEL_8;
    }
    while (1)
    {
      uint64_t v13 = (uint64_t *)*v12;
      int v14 = *((_DWORD *)v12 + 4);
      if (!v13) {
        break;
      }
      unsigned int v15 = v14 - 1;
      CFTypeID v12 = v13;
      if (v15 >= 3) {
        goto LABEL_8;
      }
    }
    if (v14 != 4) {
      goto LABEL_8;
    }
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(char **)v11;
      if (*((_DWORD *)v11 + 4) != 1
        || *((_DWORD *)v19 + 4) != 4
        || (*((double *)v11 + 3) == *((double *)v19 + 3)
          ? (BOOL v20 = *((double *)v11 + 4) == *((double *)v19 + 4))
          : (BOOL v20 = 0),
            !v20))
      {
        if (!v16 || !v19) {
          goto LABEL_30;
        }
        unint64_t v21 = *((void *)v11 + 1);
        if (v21)
        {
          double v22 = &v16[16 * *((void *)v16 + 1)];
          double v23 = *((double *)v22 + 1);
          double v24 = *((double *)v22 + 2);
          if (v23 != *((double *)v11 + 3) || v24 != *((double *)v11 + 4))
          {
LABEL_30:
            *(void *)CGPathRef v11 = v18;
            ++v17;
            uint64_t v16 = v11;
            uint64_t v18 = v11;
            goto LABEL_39;
          }
          unint64_t v26 = 0;
          int64x2_t v27 = (double *)(v11 + 48);
          while (v21 - 1 != v26)
          {
            double v28 = *(v27 - 1);
            double v29 = *v27;
            v27 += 2;
            ++v26;
            if (v23 != v28 || v24 != v29)
            {
              if (v26 < v21) {
                goto LABEL_30;
              }
              break;
            }
          }
        }
      }
      free(v11);
      uint64_t v16 = 0;
LABEL_39:
      CGPathRef v11 = v19;
    }
    while (v19);
    if (v17 > 2)
    {
      if (v17 == 3)
      {
        long long v32 = *(void **)v18;
        if (*(_DWORD *)(*(void *)v18 + 16) == 1)
        {
          while (1)
          {
            uint64_t v33 = v18;
            uint64_t v18 = v32;
            free(v33);
            if (!v18) {
              break;
            }
            long long v32 = *(void **)v18;
          }
          goto LABEL_52;
        }
      }
      else if (!v18)
      {
        goto LABEL_52;
      }
      uint64_t v34 = 0;
      do
      {
        uint64_t v35 = v18;
        uint64_t v18 = *(void **)v18;
        *uint64_t v35 = v34;
        uint64_t v34 = v35;
      }
      while (v18);
      *(void *)(*(void *)&v8 + 16) = v35;
      **(float64_t **)&float64_t v8 = v9;
      float64_t v9 = v8;
    }
    else
    {
      if (v18)
      {
        do
        {
          double v31 = *(void **)v18;
          free(v18);
          uint64_t v18 = v31;
        }
        while (v31);
      }
LABEL_52:
      *(void *)(*(void *)&v8 + 16) = 0;
LABEL_8:
      subpath_release(*(void **)&v8);
    }
    float64_t v8 = v10;
  }
  while (v10 != 0.0);
  if (v9 == 0.0) {
    return 1;
  }
  float64_t v37 = v9;
  do
  {
    if (*(_DWORD *)(*(void *)&v37 + 8) == -1)
    {
      *(_DWORD *)(*(void *)&v37 + ++*(_DWORD *)(result + 8) = 0;
      float64_t v38 = v9;
      do
      {
        if (*(void *)&v38 != *(void *)&v37)
        {
          CGAffineTransform v39 = *(void **)(*(void *)&v37 + 16);
          if (*v39)
          {
            int v40 = 0;
            int v41 = 0;
            do
            {
              float64x2_t v42 = *(float64x2_t *)&v39[2 * v39[1] + 1];
              char v80 = 0;
              uint64_t v43 = *(void *)(*(void *)&v38 + 16);
              CGRect v44 = *(void **)v43;
              if (*(void *)v43)
              {
                int v45 = 0;
                float64x2_t v46 = vsubq_f64(*(float64x2_t *)(v43 + 24), v42);
                float64x2_t v78 = v42;
                do
                {
                  info[0] = v46;
                  uint64_t v47 = v44[1];
                  if (v47)
                  {
                    CGRect v48 = (float64x2_t *)(v44 + 3);
                    CGRect v49 = v82;
                    uint64_t v50 = v44[1];
                    do
                    {
                      float64x2_t v51 = *v48++;
                      *v49++ = vsubq_f64(v51, v42);
                      --v50;
                    }
                    while (v50);
                    float64x2_t v46 = info[v47];
                  }
                  float64x2_t v79 = v46;
                  int v52 = crossing_count(info, v47, &v80, v3, v4, v5, v6, v7);
                  if (v80)
                  {
                    int v53 = 1;
                    goto LABEL_73;
                  }
                  v45 += v52;
                  CGRect v44 = (void *)*v44;
                  float64x2_t v42 = v78;
                  float64x2_t v46 = v79;
                }
                while (v44);
                if (!v45) {
                  goto LABEL_71;
                }
                ++v41;
              }
              else
              {
LABEL_71:
                int v53 = 0;
LABEL_73:
                if (!v53) {
                  ++v40;
                }
              }
              CGAffineTransform v39 = (void *)*v39;
            }
            while (*v39);
            if (v41 && (!v40 || v41 > v40 + 1)) {
              ++*(_DWORD *)(*(void *)&v37 + 8);
            }
          }
        }
        float64_t v38 = **(double **)&v38;
      }
      while (v38 != 0.0);
    }
    float64_t v37 = **(double **)&v37;
  }
  while (v37 != 0.0);
  float64_t v54 = v9;
  while (2)
  {
    if (*(_DWORD *)(*(void *)&v54 + 12) == -2)
    {
      v55 = *(double **)(*(void *)&v54 + 16);
      v56 = *(uint64_t **)v55;
      if (*(void *)v55)
      {
        double v58 = v55[3];
        double v57 = v55[4];
        double v59 = 0.0;
        while (1)
        {
          double v60 = v58;
          double v61 = v57;
          v62 = &v56[2 * v56[1]];
          double v58 = *((double *)v62 + 1);
          double v57 = *((double *)v62 + 2);
          int v63 = *((_DWORD *)v56 + 4);
          if (v63 == 3) {
            break;
          }
          if (v63 == 2)
          {
            double v64 = (v58 + v60 + *((double *)v56 + 3) * 2.0) * 0.25;
            double v65 = v57 + v61 + *((double *)v56 + 4) * 2.0;
            double v66 = -(v64 * v61);
            double v67 = v65 * 0.25;
LABEL_90:
            double v59 = v59 + v66 + v60 * v67;
            double v61 = v67;
            double v60 = v64;
          }
          double v59 = v59 + v60 * v57 - v58 * v61;
          v56 = (uint64_t *)*v56;
          if (!v56) {
            goto LABEL_94;
          }
        }
        double v64 = (v58 + v60 + *((double *)v56 + 3) * 3.0 + *((double *)v56 + 5) * 3.0) * 0.125;
        double v68 = v57 + v61 + *((double *)v56 + 4) * 3.0 + *((double *)v56 + 6) * 3.0;
        double v66 = -(v64 * v61);
        double v67 = v68 * 0.125;
        goto LABEL_90;
      }
      double v59 = 0.0;
LABEL_94:
      int v69 = v59 > 0.0;
      if (v59 == 0.0) {
        int v69 = -1;
      }
      *(_DWORD *)(*(void *)&v54 + 12) = v69;
    }
    float64_t v54 = **(double **)&v54;
    if (v54 != 0.0) {
      continue;
    }
    break;
  }
  int v70 = 0;
  float64_t v71 = v9;
  do
  {
    if (!*(_DWORD *)(*(void *)&v71 + 8))
    {
      int v72 = *(_DWORD *)(*(void *)&v71 + 12);
      if (v72 != -1)
      {
        if (v72 == 1)
        {
          ++LODWORD(v54);
        }
        else
        {
          if (v72) {
            abort();
          }
          ++v70;
        }
      }
    }
    float64_t v71 = **(double **)&v71;
  }
  while (v71 != 0.0);
  int v73 = v70 < SLODWORD(v54);
  float64_t v74 = v9;
  while (2)
  {
    int v75 = *(_DWORD *)(*(void *)&v74 + 12);
    if ((*(unsigned char *)(*(void *)&v74 + 8) & 1) == 0)
    {
      if (v75 != v73) {
        break;
      }
      goto LABEL_112;
    }
    if (v75 != v73)
    {
LABEL_112:
      float64_t v74 = **(double **)&v74;
      if (v74 == 0.0)
      {
        uint64_t v36 = 1;
        goto LABEL_115;
      }
      continue;
    }
    break;
  }
  uint64_t v36 = 0;
  do
  {
LABEL_115:
    v76 = **(void ***)&v9;
    subpath_release(*(void **)&v9);
    float64_t v9 = *(double *)&v76;
  }
  while (*(double *)&v76 != 0.0);
  return v36;
}

CFTypeRef CGPathCreateByNormalizingGlyphPath(CFTypeRef cf)
{
  CFTypeRef v1 = cf;
  if (cf)
  {
    if (CGPathDisableTypeValidation || (CFTypeID v2 = CFGetTypeID(cf), v2 == CGPathGetTypeID())) {
      CFRetain(v1);
    }
    else {
      return 0;
    }
  }
  return v1;
}

void CGPathPrint(const void *a1, FILE *a2)
{
  if (a2) {
    CFTypeID v2 = a2;
  }
  else {
    CFTypeID v2 = (FILE *)*MEMORY[0x1E4F143D8];
  }
  CFStringRef v3 = CFCopyDescription(a1);
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  fprintf_l(v2, 0, "%s", CStringPtr);

  CFRelease(v3);
}

void CGPathSaveAsImage(const CGPath *a1, char *a2)
{
  BoundingBodouble x = CGPathGetBoundingBox(a1);
  double width = BoundingBox.size.width;
  double height = BoundingBox.size.height;
  transform.a = 1.0;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = 1.0;
  transform.tdouble x = 5.0 - BoundingBox.origin.x;
  transform.tdouble y = 5.0 - BoundingBox.origin.y;
  uint64_t v6 = CGPathCreateMutableCopyByTransformingPath(a1, &transform);
  uint64_t v7 = CGColorSpaceCreateWithName(@"kCGColorSpaceSRGB");
  float64_t v8 = CGBitmapContextCreateWithData(0, (unint64_t)(width + 10.0), (unint64_t)(height + 10.0), 8uLL, 0, v7, 1u, 0, 0);
  CGContextErase((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
  CGContextAddPath(v8, v6);
  clip((uint64_t)v8, 0, v16, v17, v18, v19, v20, v21);
  if (v6) {
    CFRelease(v6);
  }
  ConstantColor = CGColorGetConstantColor(@"kCGColorBlack");
  CGContextSetFillColorWithColor(v8, ConstantColor);
  v26.size.double width = (double)(unint64_t)(width + 10.0);
  v26.size.double height = (double)(unint64_t)(height + 10.0);
  v26.origin.double x = 0.0;
  v26.origin.double y = 0.0;
  CGContextFillRect(v8, v26);
  CGImageRef Image = CGBitmapContextCreateImage(v8);
  if (v8) {
    CFRelease(v8);
  }
  CGImageWriteToFile(Image, a2);
  if (Image) {
    CFRelease(Image);
  }
}

uint64_t CGPathApplyDashedPath(uint64_t cf, const CGAffineTransform *a2, uint64_t a3, _anonymous_namespace_ *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (cf)
  {
    uint64_t v13 = cf;
    if (CGPathDisableTypeValidation)
    {
      BOOL v14 = 1;
      if (!a3) {
        return cf;
      }
    }
    else
    {
      CFTypeID v15 = CFGetTypeID((CFTypeRef)cf);
      cf = CGPathGetTypeID();
      BOOL v14 = v15 == cf;
      if (!a3) {
        return cf;
      }
    }
    if (v14)
    {
      if (cf)
      {
        int v17 = *(_DWORD *)(v13 + 16);
        uint64_t v16 = (double *)(v13 + 16);
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 0x40000000;
        v18[2] = __CGPathApplyDashedPath_block_invoke;
        v18[3] = &__block_descriptor_tmp_11_17771;
        v18[4] = a3;
        v18[5] = a2;
        if ((v17 - 10) >= 0xFFFFFFF7)
        {
          if (!a5 || !a6) {
            CG::Path::apply(v16, (uint64_t)v18);
          }
          v18[6] = v18;
          operator new();
        }
      }
    }
  }
  return cf;
}

uint64_t __CGPathApplyDashedPath_block_invoke(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = a2;
  uint64_t v5 = a3;
  return (*(uint64_t (**)(void, int *))(a1 + 32))(*(void *)(a1 + 40), &v4);
}

uint64_t CGPathApplyStrokedDashedPath(uint64_t cf, const CGAffineTransform *a2, uint64_t a3, _anonymous_namespace_ *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (cf)
  {
    uint64_t v12 = cf;
    if (CGPathDisableTypeValidation)
    {
      BOOL v13 = 1;
      if (!a3) {
        return cf;
      }
    }
    else
    {
      CFTypeID v14 = CFGetTypeID((CFTypeRef)cf);
      cf = CGPathGetTypeID();
      BOOL v13 = v14 == cf;
      if (!a3) {
        return cf;
      }
    }
    if (v13)
    {
      if (cf)
      {
        int v15 = *(_DWORD *)(v12 + 16);
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 0x40000000;
        v16[2] = __CGPathApplyStrokedDashedPath_block_invoke;
        v16[3] = &__block_descriptor_tmp_12_17772;
        v16[4] = a3;
        v16[5] = a2;
        if ((v15 - 10) >= 0xFFFFFFF7)
        {
          v16[11] = v16;
          operator new();
        }
      }
    }
  }
  return cf;
}

uint64_t __CGPathApplyStrokedDashedPath_block_invoke(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = a2;
  uint64_t v5 = a3;
  return (*(uint64_t (**)(void, int *))(a1 + 32))(*(void *)(a1 + 40), &v4);
}

void CGPathApplyIterator(char *cf, path_iterator *a2)
{
  if (cf)
  {
    if (CGPathDisableTypeValidation)
    {
      BOOL v4 = 1;
      if (!a2) {
        return;
      }
    }
    else
    {
      CFTypeID v5 = CFGetTypeID(cf);
      BOOL v4 = v5 == CGPathGetTypeID();
      if (!a2) {
        return;
      }
    }
    if (v4)
    {
      CG::Path::apply_iterator((CG::Path *)(cf + 16), a2);
    }
  }
}

CFMutableDataRef CGPathCreateEncodedData(CFMutableDataRef cf, CFDictionaryRef theDict)
{
  if (cf)
  {
    CFMutableDataRef v3 = cf;
    if (CGPathDisableTypeValidation || (CFTypeID v4 = CFGetTypeID(cf), v4 == CGPathGetTypeID()))
    {
      CFMutableDataRef theData = 0;
      BOOL v21 = 0;
      if (theDict)
      {
        Value = CFDictionaryGetValue(theDict, @"kCGPathEncodingOptionTruncatePrecision");
        if (Value) {
          BOOL v21 = Value == (const void *)*MEMORY[0x1E4F1CFD0];
        }
      }
      switch(*((_DWORD *)v3 + 4))
      {
        case 1:
          create_initialized_encoding_buffer((uint64_t)&theData, 53, 1);
          uint64_t v6 = (double *)((char *)v3 + 24);
          goto LABEL_15;
        case 2:
          create_initialized_encoding_buffer((uint64_t)&theData, 69, 2);
          encode_CGAffineTransform((uint64_t)&theData, (double *)v3 + 3);
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 9));
          double v7 = *((double *)v3 + 10);
          goto LABEL_18;
        case 3:
          create_initialized_encoding_buffer((uint64_t)&theData, 117, 3);
          encode_CGAffineTransform((uint64_t)&theData, (double *)v3 + 3);
          for (uint64_t i = 0; i != 64; i += 16)
          {
            encode_CGFloat((uint64_t)&theData, *(double *)((char *)v3 + i + 72));
            encode_CGFloat((uint64_t)&theData, *(double *)((char *)v3 + i + 80));
          }
          return theData;
        case 4:
          create_initialized_encoding_buffer((uint64_t)&theData, 54, 4);
          bytes[0] = *((unsigned char *)v3 + 73) | (2 * *((unsigned char *)v3 + 72));
          CFDataAppendBytes(theData, bytes, 1);
          uint64_t v6 = (double *)((char *)v3 + 24);
LABEL_15:
          encode_CGAffineTransform((uint64_t)&theData, v6);
          return theData;
        case 5:
          create_initialized_encoding_buffer((uint64_t)&theData, 37, 5);
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 3));
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 4));
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 5));
          double v7 = *((double *)v3 + 6);
          goto LABEL_18;
        case 6:
          create_initialized_encoding_buffer((uint64_t)&theData, 85, 6);
          encode_CGAffineTransform((uint64_t)&theData, (double *)v3 + 3);
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 9));
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 10));
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 11));
          double v7 = *((double *)v3 + 12);
LABEL_18:
          encode_CGFloat((uint64_t)&theData, v7);
          break;
        case 8:
          create_initialized_encoding_buffer((uint64_t)&theData, (16 * *((unsigned __int16 *)v3 + 12)) | 0xA, 8);
          bytes[0] = *((unsigned char *)v3 + 26);
          uint64_t v9 = theData;
          CFDataAppendBytes(theData, bytes, 1);
          *(_DWORD *)bytes = *((_DWORD *)v3 + 7);
          CFDataAppendBytes(v9, bytes, 4);
          if (*((_WORD *)v3 + 12))
          {
            unint64_t v10 = 0;
            uint64_t v11 = (double *)((char *)v3 + 40);
            do
            {
              encode_CGFloat((uint64_t)&theData, *(v11 - 1));
              double v12 = *v11;
              v11 += 2;
              encode_CGFloat((uint64_t)&theData, v12);
              ++v10;
            }
            while (v10 < *((unsigned __int16 *)v3 + 12));
          }
          break;
        case 9:
          uint64_t v13 = *((void *)v3 + 3);
          uint64_t v14 = *((void *)v3 + 4);
          create_initialized_encoding_buffer((uint64_t)&theData, v14 + 16 * v13 + 21, 9);
          *(void *)bytes = v14;
          int v15 = theData;
          CFDataAppendBytes(theData, bytes, 8);
          *(void *)bytes = v13;
          CFDataAppendBytes(v15, bytes, 8);
          if (v14)
          {
            uint64_t v16 = 0;
            uint64_t v17 = -v14;
            do
            {
              bytes[0] = *(unsigned char *)(*((void *)v3 + 6) + *((void *)v3 + 5) + v16 - 1);
              CFDataAppendBytes(v15, bytes, 1);
              --v16;
            }
            while (v17 != v16);
          }
          if (v13)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t v19 = (double *)(*((void *)v3 + 6) + v18);
              encode_CGFloat((uint64_t)&theData, *v19);
              encode_CGFloat((uint64_t)&theData, v19[1]);
              v18 += 16;
              --v13;
            }
            while (v13);
          }
          break;
        default:
          return theData;
      }
      return theData;
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

uint64_t CGPathCreateWithData(const __CFData *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CGPathGetTypeID();
  uint64_t Instance = CGTypeCreateInstance(TypeID, 128, v3, v4, v5, v6, v7, v8);
  unint64_t v10 = (CG::Path *)(Instance + 16);
  if (*(_DWORD *)(Instance + 16))
  {
LABEL_7:
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  BytePtr = CFDataGetBytePtr(a1);
  v103 = BytePtr;
  unint64_t Length = CFDataGetLength(a1);
  unint64_t v106 = Length;
  if ((uint64_t)Length < 4) {
    goto LABEL_6;
  }
  if (*(_DWORD *)BytePtr != 1) {
    goto LABEL_6;
  }
  unint64_t v13 = Length;
  int v14 = HIWORD(*(_DWORD *)BytePtr) & 1;
  unsigned __int8 v104 = HIWORD(*(_DWORD *)BytePtr) & 1;
  if (Length < 5) {
    goto LABEL_6;
  }
  int v16 = BytePtr[4];
  uint64_t v105 = 5;
  switch(v16)
  {
    case 1:
      *(_DWORD *)(Instance + 16) = 1;
      uint64_t v17 = (double *)(Instance + 24);
      goto LABEL_60;
    case 2:
      *(_DWORD *)(Instance + 16) = 2;
      if (!decode_CGAffineTransform((uint64_t)&v103, (double *)(Instance + 24))) {
        goto LABEL_6;
      }
      unint64_t v18 = v106;
      if (v104)
      {
        if ((v106 & 0x8000000000000000) != 0)
        {
          int v20 = 0;
          BOOL v67 = 0;
          *(void *)(Instance + 72) = 0;
          v98 = (double *)(Instance + 80);
          double v92 = 0.0;
        }
        else
        {
          double v92 = 0.0;
          if (v105 + 4 <= v106)
          {
            float v101 = *(float *)&v103[v105];
            v105 += 4;
            double v93 = v101;
            int v20 = 1;
          }
          else
          {
            int v20 = 0;
            double v93 = 0.0;
          }
          *(double *)(Instance + 72) = v93;
          v98 = (double *)(Instance + 80);
          if (v105 + 4 <= v18)
          {
            double v92 = *(float *)&v103[v105];
            BOOL v67 = 1;
          }
          else
          {
            BOOL v67 = 0;
          }
        }
        double *v98 = v92;
        goto LABEL_105;
      }
      if ((v106 & 0x8000000000000000) == 0)
      {
        uint64_t v19 = v105 + 8;
        if (v105 + 8 <= v106)
        {
          *(void *)(Instance + 72) = *(void *)&v103[v105];
          uint64_t v105 = v19;
          int v20 = 1;
        }
        else
        {
          int v20 = 0;
        }
        if (v105 + 8 <= v18)
        {
          *(void *)(Instance + 80) = *(void *)&v103[v105];
          goto LABEL_104;
        }
      }
      goto LABEL_7;
    case 3:
      *(_DWORD *)(Instance + 16) = 3;
      char v21 = decode_CGAffineTransform((uint64_t)&v103, (double *)(Instance + 24));
      uint64_t v22 = 0;
      int v23 = v104;
      uint64_t v25 = v105;
      unint64_t v24 = v106;
      CGRect v26 = v103;
      do
      {
        if (v21)
        {
          uint64_t v27 = Instance + v22;
          if (v23)
          {
            if ((v24 & 0x8000000000000000) != 0)
            {
              BOOL v29 = 0;
              char v31 = 0;
              *(void *)(v27 + 72) = 0;
              double v33 = 0.0;
            }
            else
            {
              uint64_t v32 = v25 + 4;
              double v33 = 0.0;
              BOOL v29 = v25 + 4 <= v24;
              if (v25 + 4 > v24)
              {
                unint64_t v35 = v25 + 4;
                uint64_t v32 = v25;
                double v34 = 0.0;
              }
              else
              {
                double v34 = *(float *)&v26[v25];
                unint64_t v35 = v25 + 8;
              }
              *(double *)(v27 + 72) = v34;
              if (v35 <= v24)
              {
                double v33 = *(float *)&v26[v32];
                char v31 = 1;
                uint64_t v25 = v35;
              }
              else
              {
                char v31 = 0;
                uint64_t v25 = v32;
              }
            }
            *(double *)(Instance + v22 + 80) = v33;
          }
          else if ((v24 & 0x8000000000000000) != 0)
          {
            BOOL v29 = 0;
            char v31 = 0;
          }
          else
          {
            uint64_t v28 = v25 + 8;
            BOOL v29 = v25 + 8 <= v24;
            if (v25 + 8 > v24)
            {
              unint64_t v30 = v25 + 8;
              uint64_t v28 = v25;
            }
            else
            {
              *(void *)(v27 + 72) = *(void *)&v26[v25];
              unint64_t v30 = v25 + 16;
            }
            if (v30 <= v24)
            {
              *(void *)(Instance + v22 + 80) = *(void *)&v26[v28];
              char v31 = 1;
              uint64_t v25 = v30;
            }
            else
            {
              char v31 = 0;
              uint64_t v25 = v28;
            }
          }
          char v21 = v29 & v31;
        }
        else
        {
          char v21 = 0;
        }
        v22 += 16;
      }
      while (v22 != 64);
      goto LABEL_133;
    case 4:
      *(_DWORD *)unint64_t v10 = 4;
      if (Length <= 5)
      {
        *(_WORD *)(Instance + 72) = 0;
        goto LABEL_6;
      }
      UInt8 v45 = BytePtr[5];
      uint64_t v105 = 6;
      uint64_t v17 = (double *)(Instance + 24);
      *(unsigned char *)(Instance + 72) = (v45 & 2) != 0;
      *(unsigned char *)(Instance + 73) = v45 & 1;
LABEL_60:
      if (decode_CGAffineTransform((uint64_t)&v103, v17)) {
        return Instance;
      }
      goto LABEL_7;
    case 5:
      *(_DWORD *)(Instance + 16) = 5;
      if (v14)
      {
        if ((uint64_t)Length < 9)
        {
          double v90 = 0.0;
          uint64_t v91 = 5;
        }
        else
        {
          double v90 = *(float *)(BytePtr + 5);
          uint64_t v91 = 9;
        }
        *(double *)(Instance + 24) = v90;
        uint64_t v95 = v91 + 4;
        if (v91 + 4 > Length)
        {
          *(void *)(Instance + 32) = 0;
          goto LABEL_6;
        }
        *(double *)(Instance + 32) = *(float *)&BytePtr[v91];
        if ((uint64_t)Length < 9) {
          goto LABEL_6;
        }
        double v96 = 0.0;
        if (v91 + 8 <= Length)
        {
          double v97 = *(float *)&BytePtr[v95];
          int v20 = 1;
          v95 += 4;
        }
        else
        {
          int v20 = 0;
          double v97 = 0.0;
        }
        *(double *)(Instance + 40) = v97;
        if (v95 + 4 <= Length) {
          double v96 = *(float *)&BytePtr[v95];
        }
        BOOL v67 = v95 + 4 <= Length;
        *(double *)(Instance + 4++*(_DWORD *)(result + 8) = v96;
      }
      else
      {
        if ((uint64_t)Length < 13) {
          goto LABEL_6;
        }
        *(void *)(Instance + 24) = *(void *)(BytePtr + 5);
        unint64_t v49 = v106;
        if ((v106 & 0x8000000000000000) != 0 || v106 < 0x15) {
          goto LABEL_6;
        }
        *(void *)(Instance + 32) = *(void *)(BytePtr + 13);
        if (v49 >= 0x1D)
        {
          uint64_t v50 = 29;
          *(void *)(Instance + 40) = *(void *)(BytePtr + 21);
          int v20 = 1;
        }
        else
        {
          int v20 = 0;
          uint64_t v50 = 21;
        }
        if (v50 + 8 > v49) {
          goto LABEL_7;
        }
        *(void *)(Instance + 4++*(_DWORD *)(result + 8) = *(void *)&BytePtr[v50];
LABEL_104:
        BOOL v67 = 1;
      }
LABEL_105:
      if (v20 && v67) {
        return Instance;
      }
      goto LABEL_7;
    case 6:
      *(_DWORD *)(Instance + 16) = 6;
      if (!decode_CGAffineTransform((uint64_t)&v103, (double *)(Instance + 24))) {
        goto LABEL_6;
      }
      unint64_t v36 = v106;
      if (!v104)
      {
        if ((v106 & 0x8000000000000000) == 0)
        {
          uint64_t v37 = v105 + 8;
          if (v105 + 8 <= v106)
          {
            float64_t v38 = v103;
            *(void *)(Instance + 72) = *(void *)&v103[v105];
            uint64_t v39 = v37 + 8;
            if (v37 + 8 <= v36)
            {
              *(void *)(Instance + 80) = *(void *)&v38[v37];
              uint64_t v40 = v37 + 16;
              if (v39 + 8 <= v36)
              {
                *(void *)(Instance + 8++*(_DWORD *)(result + 8) = *(void *)&v38[v39];
                if ((v36 & 0x8000000000000000) == 0 && v40 + 8 <= v36)
                {
                  *(void *)(Instance + 96) = *(void *)&v38[v40];
                  return Instance;
                }
              }
            }
          }
        }
        goto LABEL_6;
      }
      if ((v106 & 0x8000000000000000) != 0 || (uint64_t v94 = v105 + 4, v105 + 4 > v106))
      {
        *(void *)(Instance + 72) = 0;
        goto LABEL_6;
      }
      v99 = v103;
      *(double *)(Instance + 72) = *(float *)&v103[v105];
      uint64_t v100 = v94 + 4;
      if (v94 + 4 > v36)
      {
        *(void *)(Instance + 80) = 0;
        goto LABEL_6;
      }
      *(double *)(Instance + 80) = *(float *)&v99[v94];
      uint64_t v102 = v94 + 8;
      if (v100 + 4 > v36)
      {
        *(void *)(Instance + 8++*(_DWORD *)(result + 8) = 0;
        goto LABEL_6;
      }
      *(double *)(Instance + 8++*(_DWORD *)(result + 8) = *(float *)&v99[v100];
      if ((v36 & 0x8000000000000000) == 0 && v102 + 4 <= v36)
      {
        *(double *)(Instance + 96) = *(float *)&v99[v102];
        return Instance;
      }
      *(void *)(Instance + 96) = 0;
      goto LABEL_7;
    case 8:
      if (Length <= 5)
      {
        *(_DWORD *)(Instance + 16) = v16;
        *(void *)(Instance + 24) = 0;
        goto LABEL_7;
      }
      unsigned int v46 = BytePtr[5];
      char v21 = Length > 9;
      if (v13 < 0xA)
      {
        unsigned int v47 = 0;
        uint64_t v48 = 6;
      }
      else
      {
        unsigned int v47 = *(_DWORD *)(BytePtr + 6);
        uint64_t v48 = 10;
      }
      if (v46 > 0xA) {
        goto LABEL_6;
      }
      if (!BytePtr[5])
      {
        *(_DWORD *)(Instance + 16) = v16;
        *(_DWORD *)(Instance + 24) = 0;
        *(_DWORD *)(Instance + 2++*(_DWORD *)(result + 8) = v47;
        if (v13 <= 9) {
          goto LABEL_7;
        }
        return Instance;
      }
      int v51 = 0;
      unsigned int v52 = 0;
      while (1)
      {
        unsigned int v53 = (v47 >> v51) & 7;
        if (v53 > 4) {
          break;
        }
        v52 += point_counts[v53];
        v51 += 3;
        if (3 * v46 == v51) {
          goto LABEL_111;
        }
      }
      char v21 = 0;
LABEL_111:
      if (v52 > 7) {
        goto LABEL_6;
      }
      *(_DWORD *)(Instance + 16) = v16;
      *(_WORD *)(Instance + 24) = v52;
      *(_WORD *)(Instance + 26) = v46;
      *(_DWORD *)(Instance + 2++*(_DWORD *)(result + 8) = v47;
      if (v52)
      {
        uint64_t v68 = v52;
        int v69 = (double *)(Instance + 40);
        do
        {
          if (v21)
          {
            if (v14)
            {
              uint64_t v74 = v48 + 4;
              double v75 = 0.0;
              BOOL v71 = v48 + 4 <= v13;
              if (v48 + 4 > v13)
              {
                unint64_t v70 = v48 + 4;
                uint64_t v74 = v48;
                double v76 = 0.0;
              }
              else
              {
                double v76 = *(float *)&BytePtr[v48];
                unint64_t v70 = v48 + 8;
              }
              *(v69 - 1) = v76;
              BOOL v73 = v70 <= v13;
              if (v70 > v13) {
                unint64_t v70 = v74;
              }
              else {
                double v75 = *(float *)&BytePtr[v74];
              }
              *int v69 = v75;
            }
            else
            {
              unint64_t v70 = v48 + 8;
              BOOL v71 = v48 + 8 <= v13;
              if (v48 + 8 > v13)
              {
                unint64_t v72 = v48 + 8;
                unint64_t v70 = v48;
              }
              else
              {
                *(v69 - 1) = *(double *)&BytePtr[v48];
                unint64_t v72 = v48 + 16;
              }
              if (v72 <= v13)
              {
                *int v69 = *(double *)&BytePtr[v70];
                BOOL v73 = 1;
                unint64_t v70 = v72;
              }
              else
              {
                BOOL v73 = 0;
              }
            }
            char v21 = v71 && v73;
            uint64_t v48 = v70;
          }
          else
          {
            char v21 = 0;
          }
          v69 += 2;
          --v68;
        }
        while (v68);
      }
LABEL_133:
      if ((v21 & 1) == 0) {
        goto LABEL_6;
      }
      return Instance;
    case 9:
      if (Length >= 0xD)
      {
        uint64_t v41 = *(void *)(BytePtr + 5);
        if (Length >= 0x15)
        {
          unint64_t v42 = *(void *)(BytePtr + 13);
          char v43 = 1;
          uint64_t v44 = 21;
        }
        else
        {
          unint64_t v42 = 0;
          char v43 = 0;
          uint64_t v44 = 13;
        }
      }
      else
      {
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        char v43 = 0;
        uint64_t v44 = 5;
      }
      *(_DWORD *)unint64_t v10 = v16;
      uint64_t v54 = v44 + v41;
      uint64_t v55 = __CFADD__(v44, v41);
      uint64_t v56 = v55 << 63 >> 63;
      if (v56 != v55 || v56 < 0) {
        goto LABEL_6;
      }
      BOOL v57 = v14 == 0;
      unint64_t v58 = 8;
      if (v57) {
        unint64_t v58 = 16;
      }
      if (!is_mul_ok(v42, v58)) {
        goto LABEL_6;
      }
      unint64_t v59 = v42 * v58;
      BOOL v60 = __CFADD__(v54, v59);
      unint64_t v61 = v54 + v59;
      if (v60 || v61 > Length) {
        goto LABEL_6;
      }
      CG::Path::reserve_space(v10, v42, v41);
      if (!v41)
      {
        unsigned int v65 = 0;
        goto LABEL_137;
      }
      uint64_t v64 = 0;
      unsigned int v65 = 0;
      while (2)
      {
        if (v44 + 1 > v13)
        {
          UInt8 v66 = 0;
          char v43 = 0;
          goto LABEL_96;
        }
        UInt8 v66 = BytePtr[v44];
        if (v66 <= 4u)
        {
          if (v66 == 4) {
            ++v65;
          }
          ++v44;
LABEL_96:
          *(unsigned char *)(*(void *)(Instance + 48) + *(void *)(Instance + 40) + v64-- - 1) = v66;
          if (-v41 == v64) {
            goto LABEL_137;
          }
          continue;
        }
        break;
      }
      char v43 = 0;
      *(void *)(Instance + 32) = 0;
      ++v44;
LABEL_137:
      if (v42)
      {
        int v77 = v104;
        unint64_t v78 = v106;
        float64x2_t v79 = v103;
        char v80 = (double *)(*(void *)(Instance + 48) + 8);
        unint64_t v81 = v42;
        while ((v43 & 1) == 0)
        {
          char v43 = 0;
LABEL_152:
          *(v80 - 1) = v63;
          *char v80 = v62;
          v80 += 2;
          if (!--v81) {
            goto LABEL_161;
          }
        }
        if (v77)
        {
          if ((v78 & 0x8000000000000000) != 0)
          {
            char v82 = 0;
            char v84 = 0;
            double v63 = 0.0;
            double v62 = 0.0;
            goto LABEL_151;
          }
          double v62 = 0.0;
          if (v44 + 4 <= v78)
          {
            double v63 = *(float *)&v79[v44];
            char v82 = 1;
            v44 += 4;
          }
          else
          {
            char v82 = 0;
            double v63 = 0.0;
          }
          uint64_t v83 = v44 + 4;
          if (v44 + 4 > v78) {
            goto LABEL_148;
          }
          double v62 = *(float *)&v79[v44];
        }
        else
        {
          if ((v78 & 0x8000000000000000) != 0)
          {
            char v82 = 0;
LABEL_148:
            char v84 = 0;
LABEL_151:
            char v43 = v82 & v84;
            goto LABEL_152;
          }
          if (v44 + 8 <= v78)
          {
            double v63 = *(double *)&v79[v44];
            char v82 = 1;
            v44 += 8;
          }
          else
          {
            char v82 = 0;
          }
          uint64_t v83 = v44 + 8;
          if (v44 + 8 > v78) {
            goto LABEL_148;
          }
          double v62 = *(double *)&v79[v44];
        }
        char v84 = 1;
        uint64_t v44 = v83;
        goto LABEL_151;
      }
LABEL_161:
      *(void *)(Instance + 96) = v65;
      *(void *)(Instance + 24) = v42;
      *(void *)(Instance + 32) = v41;
      if (v43)
      {
        CG::Path::recalculate_subpath_start(v10);
        float64x2_t v85 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
        *(float64x2_t *)(Instance + 56) = v85;
        float64x2_t v86 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
        *(float64x2_t *)(Instance + 72) = v86;
        uint64_t v87 = *(void *)(Instance + 24);
        if (v87)
        {
          v88 = *(float64x2_t **)(Instance + 48);
          do
          {
            float64x2_t v89 = *v88++;
            float64x2_t v85 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v85, v89), (int8x16_t)v89, (int8x16_t)v85);
            *(float64x2_t *)(Instance + 56) = v85;
            float64x2_t v86 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v89, v86), (int8x16_t)v89, (int8x16_t)v86);
            *(float64x2_t *)(Instance + 72) = v86;
            --v87;
          }
          while (v87);
        }
        return Instance;
      }
LABEL_6:
      if (Instance) {
        goto LABEL_7;
      }
      return Instance;
    default:
      goto LABEL_6;
  }
}

char *CGImageBlockSetCreateWithType(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, double a9, double a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14)
{
  if (a1) {
    int v19 = *(_DWORD *)(a1 + 36);
  }
  else {
    int v19 = 0;
  }
  return CGImageBlockSetCreateWithBitmapInfo(a1, a2, v19, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a8);
}

atomic_uint *CGImageBlockSetRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add_explicit(result, 1u, memory_order_relaxed);
  }
  return result;
}

void CGImageBlockSetSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    if (!*(void *)(a1 + 88))
    {
      uint64_t v6 = (CFTypeRef *)CGPropertiesCreate();
      uint64_t v7 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 88), (unint64_t *)&v7, (unint64_t)v6, memory_order_relaxed, memory_order_relaxed);
      if (v7) {
        CGPropertiesRelease(v6);
      }
    }
    uint64_t v8 = *(void *)(a1 + 88);
    CGPropertiesSetProperty(v8, a2, a3);
  }
}

const void *CGImageBlockSetGetProperty(uint64_t a1, const void *a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 88)) != 0) {
    return CGPropertiesGetProperty(v2, a2);
  }
  else {
    return 0;
  }
}

double CGGStateGetLineWidth(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 128) + 8);
}

uint64_t CGGStateGetLineCap(uint64_t a1)
{
  return *(char *)(*(void *)(a1 + 128) + 2);
}

uint64_t CGGStateGetLineJoin(uint64_t a1)
{
  return *(char *)(*(void *)(a1 + 128) + 3);
}

double CGGStateGetMiterLimit(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 128) + 16);
}

double CGGStateGetLineWidthThreshold(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 128) + 24);
}

uint64_t CGGStateGetStrokeAdjust(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 128) + 1);
}

uint64_t CGGStateGetLineDash(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 128) + 32);
}

uint64_t CGGStateGetStrokeParameters(uint64_t result, void *a2, void *a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7)
{
  if (a2) {
    *a2 = *(void *)(*(void *)(result + 128) + 8);
  }
  if (a3) {
    *a3 = *(void *)(*(void *)(result + 128) + 24);
  }
  if (a4) {
    *a4 = *(void *)(*(void *)(result + 128) + 16);
  }
  if (a5) {
    *a5 = *(void *)(*(void *)(result + 128) + 32);
  }
  if (a6) {
    *a6 = *(char *)(*(void *)(result + 128) + 2);
  }
  if (a7) {
    *a7 = *(char *)(*(void *)(result + 128) + 3);
  }
  return result;
}

uint64_t cache_lock_17838()
{
  if (get_cache_predicate_17839 != -1) {
    dispatch_once(&get_cache_predicate_17839, &__block_literal_global_7_17840);
  }
  v0 = (pthread_mutex_t *)get_cache_converter_cache;

  return pthread_mutex_lock(v0);
}

uint64_t cache_unlock_17841()
{
  if (get_cache_predicate_17839 != -1) {
    dispatch_once(&get_cache_predicate_17839, &__block_literal_global_7_17840);
  }
  v0 = (pthread_mutex_t *)get_cache_converter_cache;

  return pthread_mutex_unlock(v0);
}

uint64_t release_and_remove_17845(void *a1, void *value)
{
  if (get_cache_predicate_17839 != -1) {
    dispatch_once(&get_cache_predicate_17839, &__block_literal_global_7_17840);
  }
  cache_release_value(*(cache_t **)(get_cache_converter_cache + 64), value);
  if (get_cache_predicate_17839 != -1) {
    dispatch_once(&get_cache_predicate_17839, &__block_literal_global_7_17840);
  }
  uint64_t v4 = *(cache_t **)(get_cache_converter_cache + 64);

  return cache_remove(v4, a1);
}

uint64_t __get_cache_block_invoke_17850()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  get_cache_converter_cache = (uint64_t)malloc_type_calloc(1uLL, 0x48uLL, 0x1020040C6685353uLL);
  if (!get_cache_converter_cache) {
    _CGHandleAssert("get_cache_block_invoke", 191, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGvImageConverterCache.c", "converter_cache != NULL", "converter cache missing", v0, v1, v2, v8);
  }
  v10.__sig = 0;
  *(void *)v10.__opaque = 0;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  pthread_mutex_init((pthread_mutex_t *)get_cache_converter_cache, &v10);
  pthread_mutexattr_destroy(&v10);
  cache_attributes_t attrs = *(cache_attributes_t *)byte_1ED09D1C0;
  int v3 = cache_create("com.apple.CoreGraphics.vImage_converter_cache", &attrs, (cache_t **)(get_cache_converter_cache + 64));
  if (v3) {
    _CGHandleAssert("get_cache_block_invoke", 214, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGvImageConverterCache.c", "err == 0", "error %ld creating vImage converter cache", v4, v5, v6, v3);
  }
  return cache_set_count_hint();
}

uint64_t colorsync_smart_null_17862()
{
  return 0;
}

unint64_t partial_get_packed_bytes(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a3;
  if (!a3) {
    return v8;
  }
  uint64_t v11 = *(uint64_t **)(a1 + 40);
  if (!v11)
  {
    double v12 = CGAccessSessionCreate(*(CGDataProvider **)a1);
    if (!v12) {
      return 0;
    }
    uint64_t v11 = v12;
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
  }
  unint64_t v13 = *(void *)(a1 + 48);
  unint64_t v14 = *(void *)(a1 + 56);
  BOOL v15 = v14 > v13;
  unint64_t v16 = v14 - v13;
  if (!v15) {
    return 0;
  }
  if (v16 >= v8) {
    unint64_t v17 = v8;
  }
  else {
    unint64_t v17 = v16;
  }
  unint64_t v19 = *(void *)(a1 + 16);
  unint64_t v18 = *(void *)(a1 + 24);
  uint64_t v20 = *(void *)(a1 + 88);
  unint64_t v21 = v13 % v18;
  BOOL v22 = v20 != 0;
  unint64_t v23 = v13 % v18 + v19 * (v13 / v18);
  unint64_t v24 = v23 + *(void *)(a1 + 8);
  unint64_t v25 = *(void *)(a1 + 64);
  if (v20) {
    unint64_t v26 = v24 + 1;
  }
  else {
    unint64_t v26 = v23 + *(void *)(a1 + 8);
  }
  if (v26 < v25)
  {
    CGAccessSessionRewind((uint64_t)v11);
    unint64_t v25 = 0;
    BOOL v22 = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
  }
  if (v22 + v24 > v25)
  {
    CGAccessSessionSkipForward((uint64_t)v11, v24 - v25);
    BOOL v22 = 0;
    *(void *)(a1 + 64) = v24;
    *(void *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
  }
  if (!(v21 + v22))
  {
    unint64_t v8 = 0;
    goto LABEL_35;
  }
  unint64_t v8 = 0;
  do
  {
    if (v18 - v21 >= v17) {
      unint64_t v27 = v17;
    }
    else {
      unint64_t v27 = v18 - v21;
    }
    if (v22)
    {
      if (v21 == v18 - 1) {
        goto LABEL_29;
      }
      v27 -= v17 > 1;
    }
    if (!v27)
    {
LABEL_29:
      unint64_t Bytes = 0;
      goto LABEL_30;
    }
    unint64_t Bytes = CGAccessSessionGetBytes(v11, a2, v27, a4, a5, a6, a7, a8);
    *(void *)(a1 + 64) += Bytes;
LABEL_30:
    unint64_t v29 = partial_pack_bytes((void *)a1, a2, (unsigned __int8 *)a2, Bytes);
    *(void *)(a1 + 48) += v29;
    v8 += v29;
    if (!v29) {
      return v8;
    }
    v17 -= v29;
    if (!v17) {
      return v8;
    }
    a2 += v29;
    v21 += v29;
  }
  while (v21 < v18);
  if (v19 != v18)
  {
    CGAccessSessionSkipForward((uint64_t)v11, v19 - v18);
    *(void *)(a1 + 64) += v19 - v18;
  }
LABEL_35:
  if (v17 <= v18)
  {
    if (v17)
    {
      BOOL v36 = v17 == 1;
      BOOL v37 = v18 > 1;
      if (v37 && v36) {
        unint64_t v38 = 2;
      }
      else {
        unint64_t v38 = v17;
      }
      if (v37 && v36) {
        uint64_t v39 = &v42;
      }
      else {
        uint64_t v39 = a2;
      }
      unint64_t v32 = CGAccessSessionGetBytes(v11, v39, v38, a4, a5, a6, a7, a8);
      *(void *)(a1 + 64) += v32;
      double v33 = (void *)a1;
      double v34 = a2;
      unint64_t v35 = (unsigned __int8 *)v39;
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t Chunks = CGAccessSessionGetChunks(v11, v18, v19 - v18, v17 / v18, a2, 0, a7, a8);
    *(void *)(a1 + 64) += Chunks;
    unint64_t v31 = Chunks % v19;
    if (Chunks % v19 >= v18) {
      unint64_t v31 = v18;
    }
    unint64_t v32 = v31 + Chunks / v19 * v18;
    double v33 = (void *)a1;
    double v34 = a2;
    unint64_t v35 = (unsigned __int8 *)a2;
LABEL_47:
    unint64_t v40 = partial_pack_bytes(v33, v34, v35, v32);
    *(void *)(a1 + 48) += v40;
    v8 += v40;
  }
  return v8;
}

unint64_t partial_pack_bytes(void *a1, unsigned char *a2, unsigned __int8 *a3, unint64_t a4)
{
  if (!a4) {
    return 0;
  }
  unint64_t result = 0;
  unint64_t v6 = a1[3];
  unint64_t v7 = a1[6] % v6;
  unint64_t v9 = a1[10];
  uint64_t v8 = a1[11];
  uint64_t v10 = a1[9];
  while (1)
  {
    if (v8)
    {
      if (v7 == v6 - 1) {
        unint64_t v7 = v6;
      }
    }
    else
    {
      unsigned int v11 = *a3++;
      unint64_t v9 = v11;
      --a4;
      unint64_t v7 = 1;
      uint64_t v8 = 8 - (v10 & 7);
    }
    unint64_t v12 = v7 + a4 >= v6 ? v6 : v7 + a4;
    unint64_t v13 = v12 - v7;
    if (v12 <= v7)
    {
      unint64_t v12 = v7;
    }
    else
    {
      do
      {
        unsigned int v14 = *a3++;
        unint64_t v9 = v14 | (v9 << 8);
        *a2++ = v9 >> v8;
        --v13;
      }
      while (v13);
      a4 = v7 + a4 - v12;
      unint64_t result = result + v12 - v7;
    }
    if (v12 != v6) {
      break;
    }
    uint64_t v8 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    *a2++ = v9 << v10;
    ++result;
    unint64_t v7 = v6;
    unint64_t v9 = 0;
    if (!a4) {
      goto LABEL_20;
    }
  }
  uint64_t v15 = v8;
  unint64_t v16 = v9;
LABEL_20:
  a1[10] = v16;
  a1[11] = v15;
  return result;
}

void partial_rewind(uint64_t a1)
{
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  if (v2)
  {
    CGAccessSessionRelease(v2);
    *(void *)(a1 + 40) = 0;
  }
}

uint64_t partial_skip_forward(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) += a2;
  return a2;
}

uint64_t partial_get_bytes(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = *(uint64_t **)(a1 + 40);
  if (!v11)
  {
    unint64_t v12 = CGAccessSessionCreate(*(CGDataProvider **)a1);
    if (!v12) {
      return 0;
    }
    unsigned int v11 = v12;
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 64) = 0;
  }
  unint64_t v14 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (v13 <= v14) {
    return 0;
  }
  if (v13 - v14 < a3) {
    a3 = v13 - v14;
  }
  unint64_t v16 = *(void *)(a1 + 16);
  unint64_t v15 = *(void *)(a1 + 24);
  if (v15 == v16)
  {
    unint64_t v17 = 0;
    unint64_t v16 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v13 = *(void *)(a1 + 24);
    unint64_t v17 = v14 / v15;
  }
  unint64_t v19 = v13 * v17;
  unint64_t v20 = v14 - v13 * v17;
  unint64_t v21 = v20 + v16 * v17 + *(void *)(a1 + 8);
  unint64_t v22 = *(void *)(a1 + 64);
  if (v21 < v22)
  {
    CGAccessSessionRewind((uint64_t)v11);
    unint64_t v22 = 0;
    *(void *)(a1 + 64) = 0;
  }
  if (v21 > v22)
  {
    CGAccessSessionSkipForward((uint64_t)v11, v21 - v22);
    *(void *)(a1 + 64) = v21;
  }
  if (v14 == v19)
  {
    uint64_t v18 = 0;
LABEL_25:
    if (a3 > v13)
    {
      unint64_t Chunks = CGAccessSessionGetChunks(v11, v13, v16 - v13, a3 / v13, a2, 0, a7, a8);
      *(void *)(a1 + 64) += Chunks;
      unint64_t v26 = Chunks % v16;
      if (Chunks % v16 >= v13) {
        unint64_t v26 = v13;
      }
      uint64_t v27 = v26 + Chunks / v16 * v13;
      uint64_t Bytes = *(void *)(a1 + 48);
      uint64_t v29 = v27;
      goto LABEL_31;
    }
    if (a3)
    {
      uint64_t Bytes = CGAccessSessionGetBytes(v11, a2, a3, a4, a5, a6, a7, a8);
      *(void *)(a1 + 64) += Bytes;
      uint64_t v27 = *(void *)(a1 + 48);
      uint64_t v29 = Bytes;
LABEL_31:
      *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v27 + Bytes;
      v18 += v29;
    }
  }
  else
  {
    uint64_t v18 = 0;
    if (v13 - v20 >= a3) {
      unint64_t v23 = a3;
    }
    else {
      unint64_t v23 = v13 - v20;
    }
    while (1)
    {
      uint64_t v24 = CGAccessSessionGetBytes(v11, a2, v23, a4, a5, a6, a7, a8);
      *(void *)(a1 + 64) += v24;
      *(void *)(a1 + 48) += v24;
      v18 += v24;
      if (!v24) {
        break;
      }
      a3 -= v24;
      if (!a3) {
        break;
      }
      a2 += v24;
      v23 -= v24;
      if (!v23)
      {
        if (v16 != v13)
        {
          CGAccessSessionSkipForward((uint64_t)v11, v16 - v13);
          *(void *)(a1 + 64) += v16 - v13;
        }
        goto LABEL_25;
      }
    }
  }
  return v18;
}

uint64_t partial_release_data(uint64_t *a1)
{
  return CGDataProviderReleaseData(*a1);
}

uint64_t partial_retain_data(uint64_t *a1)
{
  return CGDataProviderRetainData(*a1);
}

size_t partial_get_bytes_at_position(uint64_t a1, char *a2, uint64_t a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 < 0) {
    _CGHandleAssert("partial_get_bytes_at_position", 408, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderPartial.c", "offset >= 0", "offset %lld", a6, a7, a8, a3);
  }
  uint64_t v8 = *(void *)(a1 + 8) + a3;
  unint64_t v9 = *(void **)a1;

  return CGDataProviderDirectGetBytesAtPositionInternal(v9, a2, v8, a4, a5, a6, a7, a8);
}

CGDataProvider *CGPDFAppenderWrite(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0;
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    uint64_t v5 = ***(void ***)(*(void *)(*(void *)a1 + 16) + 16);
    if (!v5) {
      return 0;
    }
    unint64_t result = *(CGDataProvider **)(v5 + 40);
    if (result)
    {
      unint64_t result = CGDataProviderCopyData(result);
      if (result)
      {
        CFDataRef v6 = result;
        BytePtr = CFDataGetBytePtr(result);
        CFIndex Length = CFDataGetLength(v6);
        if (!*(unsigned char *)(a2 + 56))
        {
          unint64_t v9 = *(void (**)(void, const UInt8 *, CFIndex))(a2 + 72);
          if (v9)
          {
            CFIndex v10 = *(void *)(a2 + 40);
            CFIndex v11 = *(void *)(a2 + 48) + Length;
            *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v11;
            if (v11 > v10) {
              *(void *)(a2 + 40) = v11;
            }
            v9(*(void *)(a2 + 16), BytePtr, Length);
          }
        }
        CFRelease(v6);
        if (*(void *)(a1 + 24) || *(void *)(a1 + 32)) {
          goto LABEL_13;
        }
        CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
        if (Count >= 1)
        {
          CFIndex v29 = Count;
          unint64_t v30 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), 0, v30);
          unint64_t v31 = (const __CFString **)*v30;
          if ((*((_DWORD *)*v30 + 8) - 1) < 2)
          {
            free(v30);
LABEL_13:
            CFIndex v12 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
            if (v12 >= 1)
            {
              CFIndex v13 = v12;
              unint64_t v14 = (const void **)malloc_type_malloc(8 * v12, 0xC0040B8AA526DuLL);
              CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), 0, v14);
              for (uint64_t i = 0; i != v13; ++i)
              {
                unint64_t v16 = (uint64_t **)v14[i];
                AppendModeTraverseCFObject((char *)a1, v16[5], (uint64_t)&__block_literal_global_17880, (uint64_t)&__block_literal_global_27_17881);
                AppendModeTraverseCFObject((char *)a1, v16[5], (uint64_t)&__block_literal_global_30_17882, (uint64_t)&__block_literal_global_33_17883);
                unint64_t v17 = v16[5];
                uint64_t v198 = MEMORY[0x1E4F143A8];
                uint64_t v199 = 0x40000000;
                v200 = __AppendModeUpdateIndirectReferences_block_invoke_6;
                v201 = &__block_descriptor_tmp_38;
                uint64_t v202 = v13;
                v203 = v14;
                AppendModeTraverseCFObject((char *)a1, v17, (uint64_t)&__block_literal_global_36_17884, (uint64_t)&v198);
              }
              free(v14);
            }
            CGPDFDictionaryRef Info = CGPDFDocumentGetInfo(*(CGPDFDocumentRef *)a1);
            unint64_t v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
            if (Info)
            {
              CGPDFDictionaryRef v20 = Info;
              uint64_t v198 = MEMORY[0x1E4F143A8];
              uint64_t v199 = 0x40000000;
              v200 = __AppendModeWrite_block_invoke;
              v201 = &__block_descriptor_tmp_17885;
              uint64_t v202 = a1;
              v203 = Info;
              AppendModePopulateDocumentInfo(*(const __CFDictionary **)(a1 + 32), (uint64_t)&v198);
              *(_OWORD *)(a1 + 40) = *((_OWORD *)v20 + 2);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 40);
              if (v21 | (unsigned __int16)*(void *)(a1 + 48))
              {
                MutableObject = CGPDFAppenderGetMutableObject((char *)a1, v21, *(void *)(a1 + 48));
                uint64_t v198 = MEMORY[0x1E4F143A8];
                uint64_t v199 = 0x40000000;
                v200 = __AppendModeWrite_block_invoke_2;
                v201 = &__block_descriptor_tmp_16_17888;
                uint64_t v202 = (uint64_t)MutableObject;
                AppendModePopulateDocumentInfo(*(const __CFDictionary **)(a1 + 32), (uint64_t)&v198);
              }
              else
              {
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                uint64_t v198 = MEMORY[0x1E4F143A8];
                uint64_t v199 = 0x40000000;
                v200 = __AppendModeWrite_block_invoke_3;
                v201 = &__block_descriptor_tmp_17_17889;
                uint64_t v202 = (uint64_t)Mutable;
                AppendModePopulateDocumentInfo(*(const __CFDictionary **)(a1 + 32), (uint64_t)&v198);
                *(void *)(a1 + 40) = CGPDFAppenderCreateMutableObject(a1, Mutable);
                *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v23;
                CFRelease(Mutable);
                uint64_t v24 = (const void *)CGPDFReferenceCreate(*(void *)(a1 + 40), *(void *)(a1 + 48));
                CGPDFDocumentRef v25 = *(CGPDFDocumentRef *)a1;
                if (*(void *)a1)
                {
                  CGAnalyticsSendPDFDocumentGetCatalogEvent();
                  catalog = (uint64_t *)pdf_document_get_catalog(**(void **)(*((void *)v25 + 2) + 16));
                }
                else
                {
                  catalog = 0;
                }
                CGPDFAppenderMutateDictionaryValue((char *)a1, catalog, "Info", v24, 4);
                CFRelease(v24);
              }
            }
            if (*(void *)(a1 + 24))
            {
              unint64_t v32 = CFDictionaryCreateMutable(*v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CGPDFAppenderDictionarySetCGPDFName(v32, "Type", "Metadata");
              CGPDFAppenderDictionarySetCGPDFName(v32, "Subtype", "XML");
              double v33 = (unsigned char *)CGPDFStreamObjectCreate(v32, *(const void **)(a1 + 24));
              v33[32] = 1;
              CFRelease(v32);
              CGPDFDocumentRef v34 = *(CGPDFDocumentRef *)a1;
              if (*(void *)a1)
              {
                CGAnalyticsSendPDFDocumentGetCatalogEvent();
                unint64_t v35 = (uint64_t *)pdf_document_get_catalog(**(void **)(*((void *)v34 + 2) + 16));
              }
              else
              {
                unint64_t v35 = 0;
              }
              CGPDFAppenderMutateDictionaryValue((char *)a1, v35, "Metadata", v33, 4);
              CFRelease(v33);
            }
            BOOL v36 = PDFWriterCreate((const void *)a2);
            int v37 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
            unint64_t v38 = (const void **)malloc_type_malloc(8 * v37, 0x2004093837F09uLL);
            CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), 0, v38);
            v197 = v38;
            qsort_b(v38, v37, 8uLL, &__block_literal_global_67_17899);
            int v196 = v37;
            if (v37 >= 1)
            {
              uint64_t v45 = v37;
              do
              {
                unsigned int v46 = *v38;
                unsigned int v47 = (const void *)*((void *)*v38 + 5);
                if (v47)
                {
                  CFTypeID v48 = CFGetTypeID(v47);
                  if (v48 == CFDictionaryGetTypeID())
                  {
                    CFDictionaryRef v49 = (const __CFDictionary *)*((void *)v46 + 5);
                    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v49, @"/Type");
                    if (Value)
                    {
                      CFStringRef v51 = Value;
                      CFTypeID v52 = CFGetTypeID(Value);
                      if (v52 == CFStringGetTypeID()
                        && CFEqual(v51, @"/Annot")
                        && CFDictionaryGetValue(v49, @"/AAPL:AKExtras"))
                      {
                        Hash = (const void *)CGPDFAppenderDictionaryCreateHash((const __CFString *)v49);
                        CGPDFAppenderDictionarySetValue(v49, "AAPL:Hash", Hash);
                        CFRelease(Hash);
                      }
                    }
                  }
                }
                PDFWriterBeginObject(v36, *((void *)v46 + 2), (void *)v46 + 6, v40, v41, v42, v43, v44);
                if ((*((_DWORD *)v46 + 8) | 2) == 2) {
                  PDFWriteObject(v36, *((uint64_t **)v46 + 5), v54, v55, v56, v57, v58, v59, v182);
                }
                else {
                  PDFWriterPrintf((unsigned char **)v36, (uint64_t)"null", v54, v55, v56, v57, v58, v59, v182);
                }
                PDFWriterEndObject(v36, 0, v60, v61, v62, v63, v64, v65);
                ++v38;
                --v45;
              }
              while (v45);
            }
            if (v36)
            {
              UInt8 v66 = v197;
              if (*v36) {
                uint64_t v192 = *(void *)(*v36 + 40);
              }
              else {
                uint64_t v192 = 0;
              }
            }
            else
            {
              uint64_t v192 = 0;
              UInt8 v66 = v197;
            }
            uint64_t v193 = a1;
            if (*(void *)(**(void **)(*(void *)(*(void *)a1 + 16) + 16) + 8))
            {
              v191 = v36;
              CFAllocatorRef v67 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              v190 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CGPDFAppenderDictionarySetCGPDFName(v190, "Type", "XRef");
              v194 = CFArrayCreateMutable(v67, 0, MEMORY[0x1E4F1D510]);
              CFAllocatorRef allocator = v67;
              uint64_t v68 = CFDataCreateMutable(v67, 0);
              int v69 = v196 - 1;
              if (v196 >= 1)
              {
                LODWORD(v70) = 0;
                do
                {
                  uint64_t v71 = 0;
                  unint64_t v72 = v70;
                  if ((int)v70 <= v69) {
                    uint64_t v73 = v69;
                  }
                  else {
                    uint64_t v73 = v70;
                  }
                  int v74 = v73 - v70 + 1;
                  uint64_t v75 = v73 - v70;
                  while (v75 != v71)
                  {
                    double v76 = &v66[v70] + v71++;
                    if (*((void *)v76[1] + 2) != *((void *)*v76 + 2) + 1)
                    {
                      int v74 = v71;
                      break;
                    }
                  }
                  unint64_t v70 = (v74 + v70);
                  unint64_t v77 = v72;
                  do
                  {
                    unsigned int v78 = *((_DWORD *)v66[v77] + 12);
                    bytes[0] = 1;
                    CFDataAppendBytes(v68, bytes, 1);
                    for (int j = 24; j != -8; j -= 8)
                    {
                      bytes[0] = v78 >> j;
                      CFDataAppendBytes(v68, bytes, 1);
                    }
                    bytes[0] = 0;
                    CFDataAppendBytes(v68, bytes, 1);
                    ++v77;
                    UInt8 v66 = v197;
                  }
                  while (v77 < v70);
                  CGCFArrayAppendInteger(v194, *((_DWORD *)v197[v72] + 4));
                  CGCFArrayAppendInteger(v194, v74);
                }
                while ((int)v70 < v196);
              }
              CGPDFAppenderDictionarySetValue(v190, "Index", v194);
              CFRelease(v194);
              if (*(void *)v193) {
                uint64_t v80 = *(void *)(*(void *)v193 + 16);
              }
              else {
                uint64_t v80 = 0;
              }
              BOOL v36 = v191;
              uint64_t v95 = *(uint64_t **)(v80 + 16);
              uint64_t v96 = *v95;
              CGPDFAppenderDictionarySetInt32(v190, "Prev", *(_DWORD *)(*v95 + 184));
              double v97 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
              CGCFArrayAppendInteger(v97, 1);
              CGCFArrayAppendInteger(v97, 4);
              CGCFArrayAppendInteger(v97, 1);
              CGPDFAppenderDictionarySetValue(v190, "W", v97);
              CFRelease(v97);
              trailer = (CGPDFDictionary *)pdf_xref_get_trailer(v96);
              CFDictionardouble y = CGPDFAppenderCreateCFDictionary(trailer);
              CGPDFAppenderDictionarySetInt32(v190, "Size", *(_DWORD *)(v193 + 8));
              if (v191) {
                uint64_t v100 = (unsigned char *)*v191;
              }
              else {
                uint64_t v100 = 0;
              }
              DocumentID = AppendModeCreateDocumentID((uint64_t)v100, *(CGPDFArray **)(**(void **)(v80 + 16) + 48));
              CGPDFAppenderDictionarySetValue(v190, "ID", DocumentID);
              CFRelease(DocumentID);
              uint64_t v102 = (const void *)CGPDFNameCreate("Root");
              v103 = CFDictionaryGetValue(CFDictionary, v102);
              CFRelease(v102);
              CGPDFAppenderDictionarySetValue(v190, "Root", v103);
              unsigned __int8 v104 = (const void *)CGPDFNameCreate("Encrypt");
              uint64_t v105 = CFDictionaryGetValue(CFDictionary, v104);
              CFRelease(v104);
              CGPDFAppenderDictionarySetValue(v190, "Encrypt", v105);
              unint64_t v106 = (const void *)CGPDFNameCreate("Info");
              v107 = CFDictionaryGetValue(CFDictionary, v106);
              CFRelease(v106);
              if (v107)
              {
                v108 = (const void *)CGPDFNameCreate("Info");
                CFDictionarySetValue(v190, v108, v107);
                CFRelease(v108);
              }
              else
              {
                uint64_t v109 = *(void *)(v193 + 40);
                if (v109 | (unsigned __int16)*(void *)(v193 + 48)) {
                  CGPDFAppenderDictionarySetCGPDFReference(v190, "Info", v109, *(void *)(v193 + 48));
                }
              }
              CFRelease(CFDictionary);
              v110 = (__CFDictionary *)CGPDFStreamObjectCreate(v190, v68);
              *((unsigned char *)v110 + 32) = 1;
              CFRelease(v190);
              CFRelease(v68);
              PDFWriterPrintf((unsigned char **)v191, (uint64_t)"%d 0 obj\n", v111, v112, v113, v114, v115, v116, *(void *)(v193 + 8));
              PDFWriteStreamObject(v191, (uint64_t)v110);
              PDFWriterPrintf((unsigned char **)v191, (uint64_t)"endobj", v117, v118, v119, v120, v121, v122, v184);
            }
            else
            {
              PDFWriterPrintf((unsigned char **)v36, (uint64_t)"xref\n", v39, v40, v41, v42, v43, v44, v182);
              uint64_t v87 = *((void *)*v66 + 2);
              BOOL v88 = v87 == 1;
              if (v87 == 1)
              {
                uint64_t v89 = 0;
                if (v196 <= 1) {
                  int v90 = 1;
                }
                else {
                  int v90 = v196;
                }
                uint64_t v91 = 1;
                while (v90 - 1 != v89)
                {
                  int v92 = v89 + 1;
                  uint64_t v93 = v91 + 1;
                  uint64_t v91 = *((void *)v66[++v89] + 2);
                  if (v91 != v93)
                  {
                    uint64_t v94 = (v92 + 1);
                    goto LABEL_88;
                  }
                }
                uint64_t v94 = (v90 + 1);
LABEL_88:
                uint64_t v183 = v94;
                v123 = "0 %d\n";
              }
              else
              {
                v123 = "0 1\n";
              }
              PDFWriterPrintf((unsigned char **)v36, (uint64_t)v123, v81, v82, v83, v84, v85, v86, v183);
              PDFWriterPrintf((unsigned char **)v36, (uint64_t)"0000000000 65535 f \n", v124, v125, v126, v127, v128, v129, v186);
              int v195 = v196 - 1;
              if (v196 >= 1)
              {
                LODWORD(v136) = 0;
                long long v137 = 0uLL;
                do
                {
                  uint64_t v138 = 0;
                  unint64_t v139 = v136;
                  if ((int)v136 <= v195) {
                    uint64_t v140 = v195;
                  }
                  else {
                    uint64_t v140 = v136;
                  }
                  int v141 = v140 - v136 + 1;
                  uint64_t v142 = v140 - v136;
                  while (v142 != v138)
                  {
                    v143 = &v66[v136] + v138++;
                    if (*((void *)v143[1] + 2) != *((void *)*v143 + 2) + 1)
                    {
                      int v141 = v138;
                      break;
                    }
                  }
                  if (!v88)
                  {
                    PDFWriterPrintf((unsigned char **)v36, (uint64_t)"%d %d\n", v130, v131, v132, v133, v134, v135, *((void *)v66[v136] + 2));
                    long long v137 = 0uLL;
                  }
                  unint64_t v136 = (v141 + v136);
                  do
                  {
                    v144 = v36;
                    v145 = v66[v139];
                    int v146 = v145[8];
                    *(_OWORD *)bytes = v137;
                    long long v207 = v137;
                    __sprintf_chk((char *)bytes, 0, 0x20uLL, "%010llu", *((void *)v145 + 6));
                    *(_OWORD *)v204 = 0u;
                    long long v205 = 0u;
                    BOOL v147 = v146 == 1;
                    UInt8 v66 = v197;
                    if (v147) {
                      int v148 = *((unsigned __int16 *)v145 + 12) + 1;
                    }
                    else {
                      int v148 = *((unsigned __int16 *)v145 + 12);
                    }
                    __sprintf_chk(v204, 0, 0x20uLL, "%05d", v148);
                    BOOL v36 = v144;
                    PDFWriterPrintf((unsigned char **)v144, (uint64_t)"%s %s %c \n", v149, v150, v151, v152, v153, v154, (uint64_t)bytes);
                    long long v137 = 0uLL;
                    ++v139;
                  }
                  while (v139 < v136);
                  BOOL v88 = 0;
                }
                while ((int)v136 < v196);
              }
              PDFWriterPrintf((unsigned char **)v36, (uint64_t)"trailer\n", v130, v131, v132, v133, v134, v135, v187);
              if (*(void *)v193) {
                uint64_t v155 = *(void *)(*(void *)v193 + 16);
              }
              else {
                uint64_t v155 = 0;
              }
              uint64_t v156 = **(void **)(v155 + 16);
              v157 = (CGPDFDictionary *)pdf_xref_get_trailer(v156);
              v110 = CGPDFAppenderCreateCFDictionary(v157);
              CGPDFAppenderDictionarySetInt32(v110, "Size", *(_DWORD *)(v193 + 8));
              CGPDFAppenderDictionarySetInt32(v110, "Prev", *(_DWORD *)(v156 + 184));
              if (v36) {
                uint64_t v158 = *v36;
              }
              else {
                uint64_t v158 = 0;
              }
              UInt8 v66 = v197;
              v159 = AppendModeCreateDocumentID(v158, *(CGPDFArray **)(**(void **)(v155 + 16) + 48));
              CGPDFAppenderDictionarySetValue(v110, "ID", v159);
              CFRelease(v159);
              v160 = (const void *)CGPDFNameCreate("XRefStm");
              CFDictionaryRemoveValue(v110, v160);
              CFRelease(v160);
              PDFWriteDictionary((unsigned char **)v36, v110);
            }
            CFRelease(v110);
            free(v66);
            PDFWriterPrintf((unsigned char **)v36, (uint64_t)"\nstartxref\n", v161, v162, v163, v164, v165, v166, v185);
            PDFWriterPrintf((unsigned char **)v36, (uint64_t)"%O\n", v167, v168, v169, v170, v171, v172, v192);
            PDFWriterPrintf((unsigned char **)v36, (uint64_t)"%%%%EOF\n", v173, v174, v175, v176, v177, v178, v188);
            CGPDFAssociationRelease((const void **)v36);
            return (CGDataProvider *)1;
          }
          uint64_t v179 = 1;
          BOOL v180 = 1;
          do
          {
            if (*(void *)a1)
            {
              v181 = pdf_xref_resolve(**(void **)(*(void *)(*(void *)a1 + 16) + 16), *((int *)v31 + 4), *((unsigned __int16 *)v31 + 12));
              if (v181)
              {
                if (!CGPDFAppenderCGPDFObjectMatchesCFType((uint64_t)v181, v31[5])) {
                  break;
                }
              }
            }
            BOOL v180 = v179 < v29;
            if (v29 == v179) {
              break;
            }
            unint64_t v31 = (const __CFString **)v30[v179++];
          }
          while ((*((_DWORD *)v31 + 8) - 1) >= 2);
          free(v30);
          if (v180) {
            goto LABEL_13;
          }
        }
        return (CGDataProvider *)1;
      }
    }
  }
  return result;
}

void AppendModeTraverseCFObject(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  CFMutableDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  AppendModeSafelyTraverseCFObject(a1, Mutable, a2, a3, a4);

  CFRelease(Mutable);
}

BOOL __AppendModeUpdateIndirectReferences_block_invoke_6(uint64_t a1, uint64_t a2, __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (CGPDFAnnotationTypeID_onceToken != -1) {
    dispatch_once(&CGPDFAnnotationTypeID_onceToken, &__block_literal_global);
  }
  uint64_t v11 = CGPDFAnnotationTypeID_id;
  if (CGPDFAnnotationTypeID_id == a5)
  {
    CFDictionardouble y = *(CFMutableDictionaryRef *)(a6 + 24);
    if (!CFDictionary)
    {
      CFDictionardouble y = CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a6 + 16));
      *(void *)(a6 + 24) = CFDictionary;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13 >= 1)
    {
      unint64_t v14 = *(uint64_t **)(a1 + 40);
      while (1)
      {
        uint64_t v15 = *v14;
        if (*(CFMutableDictionaryRef *)(*v14 + 40) == CFDictionary) {
          break;
        }
        ++v14;
        if (!--v13) {
          goto LABEL_10;
        }
      }
      uint64_t v23 = (unsigned __int8 *)a4[2];
      int v25 = *v23;
      uint64_t v24 = (const char *)(v23 + 1);
      if (v25 == 47) {
        unint64_t v22 = v24;
      }
      else {
        unint64_t v22 = (const char *)a4[2];
      }
      uint64_t v17 = *(void *)(v15 + 16);
      uint64_t v18 = *(void *)(v15 + 24);
      goto LABEL_20;
    }
LABEL_10:
    uint64_t v16 = *(void *)(a6 + 16);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 32);
      if (v17)
      {
        uint64_t v18 = *(void *)(v16 + 40);
        unint64_t v19 = (unsigned __int8 *)a4[2];
        int v21 = *v19;
        CGPDFDictionaryRef v20 = (const char *)(v19 + 1);
        if (v21 == 47) {
          unint64_t v22 = v20;
        }
        else {
          unint64_t v22 = (const char *)a4[2];
        }
LABEL_20:
        CGPDFAppenderDictionarySetCGPDFReference(a3, v22, v17, v18);
        return v11 != a5;
      }
    }
    pdf_error("Failed to associate append mode annotation dictionaty with other annotation: unable to find match");
    CFDictionarySetValue(a3, a4, (const void *)*MEMORY[0x1E4F1D260]);
  }
  return v11 != a5;
}

void __AppendModeWrite_block_invoke(uint64_t a1, const char *a2, const void *a3)
{
}

void AppendModePopulateDocumentInfo(const __CFDictionary *a1, uint64_t a2)
{
  if (a1)
  {
    context[0] = MEMORY[0x1E4F143A8];
    context[1] = 0x40000000;
    context[2] = __AppendModePopulateDocumentInfo_block_invoke;
    context[3] = &unk_1E52CD568;
    context[4] = a2;
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)call_dict_block, context);
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v5 = CFDateCreate(v3, Current);
  (*(void (**)(uint64_t, const char *, CFDateRef))(a2 + 16))(a2, "ModDate", v5);
  CFRelease(v5);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppend(Mutable, @"iOS ");
  CFStringRef v7 = (const __CFString *)CFCopySystemVersionString();
  if (v7)
  {
    CFStringRef v8 = v7;
    CFStringAppend(Mutable, v7);
    CFStringAppend(Mutable, @" ");
    CFRelease(v8);
  }
  CFStringAppendFormat(Mutable, 0, @"Quartz PDFContext, AppendMode %d.%d", 1, 1);
  (*(void (**)(uint64_t, const char *, __CFString *))(a2 + 16))(a2, "Producer", Mutable);
  CFRelease(Mutable);
}

char *CGPDFAppenderGetMutableObject(char *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = (unsigned __int16)a3;
    if (!(a2 | (unsigned __int16)a3)) {
      return 0;
    }
    CFDataRef v6 = (CFDictionaryRef *)result;
    CFStringRef v7 = (const void *)CGPDFReferenceCreate(a2, a3);
    CFStringRef Value = CFDictionaryGetValue(v6[2], v7);
    if (Value) {
      goto LABEL_8;
    }
    if (!*v6) {
      return 0;
    }
    unint64_t result = pdf_xref_resolve(**(void **)(*((void *)*v6 + 2) + 16), (int)a2, v5);
    if (result)
    {
      CFNumberRef CFObject = CGPDFAppenderCreateCFObject((uint64_t)result, 1);
      CFStringRef Value = (void *)AppendModeObjectCreate(0, a2, a3, CFObject);
      CFRelease(CFObject);
      CFDictionarySetValue(v6[2], v7, Value);
      CFRelease(Value);
LABEL_8:
      CFRelease(v7);
      return (char *)Value[5];
    }
  }
  return result;
}

void __AppendModeWrite_block_invoke_2(uint64_t a1, const char *a2, const void *a3)
{
}

void __AppendModeWrite_block_invoke_3(uint64_t a1, const char *a2, const void *a3)
{
}

uint64_t CGPDFAppenderCreateMutableObject(uint64_t a1, const void *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v2 + 1;
    uint64_t v4 = (const void *)AppendModeObjectCreate(2, v2, 0, a2);
    uint64_t v5 = (const void *)CGPDFReferenceCreate(v2, 0);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v5, v4);
    CFRelease(v5);
    CFRelease(v4);
  }
  return v2;
}

void CGPDFAppenderMutateDictionaryValue(char *a1, uint64_t *a2, const char *a3, const void *a4, int a5)
{
  if (!a1 || !a2 || !a3 || !a4) {
    return;
  }
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  if (!(v9 | (unsigned __int16)v8))
  {
    pdf_error("CGPDFAppenderMutateDictionaryValue(...) was called with an inline / literal object");
    return;
  }
  if (CGPDFAppenderHasMutableObject((uint64_t)a1, a2[4], a2[5]))
  {
    MutableObject = CGPDFAppenderGetMutableObject(a1, v9, v8);
    uint64_t v13 = (const void *)CGPDFNameCreate(a3);
    unint64_t v14 = CFDictionaryGetValue((CFDictionaryRef)MutableObject, v13);
    CFRelease(v13);
    if (a5 != 2)
    {
      if (a5 != 4)
      {
        uint64_t v15 = (const void *)CGPDFNameCreate(a3);
        CFDictionarySetValue((CFMutableDictionaryRef)MutableObject, v15, a4);
        CFRelease(v15);
        return;
      }
      goto LABEL_27;
    }
    if (!v14)
    {
LABEL_27:
      uint64_t v22 = CGPDFAppenderCreateMutableObject((uint64_t)a1, a4);
      CGPDFAppenderDictionarySetCGPDFReference((__CFDictionary *)MutableObject, a3, v22, v21);
      return;
    }
    uint64_t v17 = v14[2];
    uint64_t v18 = v14[3];
    CGPDFAppenderReplaceMutableObject((uint64_t)a1, v17, v18, a4);
  }
  else
  {
    CGPDFObjectRef value = 0;
    if (CGPDFDictionaryGetObject((CGPDFDictionaryRef)a2, a3, &value) && value)
    {
      uint64_t v16 = *((void *)value + 2);
      if (a5 == 2 && v16 | (unsigned __int16)*((void *)value + 3))
      {
        CGPDFAppenderReplaceMutableObject((uint64_t)a1, v16, *((void *)value + 3), a4);
        return;
      }
      BOOL v23 = a5 == 2 && (v16 | (unsigned __int16)*((void *)value + 3)) == 0;
      uint64_t v24 = CGPDFAppenderGetMutableObject(a1, v9, v8);
      unint64_t v19 = v24;
      if (a5 != 4 && !v23)
      {
        CGPDFAppenderDictionarySetValue((__CFDictionary *)v24, a3, a4);
        return;
      }
    }
    else
    {
      unint64_t v19 = CGPDFAppenderGetMutableObject(a1, v9, v8);
      if (a5 != 4 && a5 != 2)
      {
        CGPDFDictionaryRef v20 = (const void *)CGPDFNameCreate(a3);
        CFDictionarySetValue((CFMutableDictionaryRef)v19, v20, a4);
        CFRelease(v20);
        return;
      }
    }
    uint64_t v25 = CGPDFAppenderCreateMutableObject((uint64_t)a1, a4);
    CGPDFAppenderDictionarySetCGPDFReference((__CFDictionary *)v19, a3, v25, v26);
  }
}

void PDFWriteObject(uint64_t *a1, uint64_t *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeID v11 = CFGetTypeID(cf);
  if (v11 == CFNullGetTypeID())
  {
    PDFWriterPrintf((unsigned char **)a1, (uint64_t)"null", v12, v13, v14, v15, v16, v17, a9);
  }
  else if (v11 == CFBooleanGetTypeID())
  {
    BOOL v80 = CFBooleanGetValue((CFBooleanRef)cf) != 0;
    PDFWriterPrintf((unsigned char **)a1, (uint64_t)"%b", v18, v19, v20, v21, v22, v23, v80);
  }
  else if (v11 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      uint64_t valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberCGFloatType, &valuePtr);
      PDFWriterPrintf((unsigned char **)a1, (uint64_t)"%f", v30, v31, v32, v33, v34, v35, valuePtr);
    }
    else
    {
      unsigned int v81 = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &v81);
      PDFWriterPrintf((unsigned char **)a1, (uint64_t)"%d", v43, v44, v45, v46, v47, v48, v81);
    }
  }
  else
  {
    if (CGPDFNameTypeID_onceToken != -1) {
      dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
    }
    if (v11 == CGPDFNameTypeID_id)
    {
      BOOL v36 = (unsigned char *)cf[2];
      if (*v36 == 47) {
        ++v36;
      }
      PDFWriterPrintf((unsigned char **)a1, (uint64_t)"/%N", v24, v25, v26, v27, v28, v29, (uint64_t)v36);
    }
    else if (v11 == CFStringGetTypeID())
    {
      PDFWriterPrintf((unsigned char **)a1, (uint64_t)"%T", v37, v38, v39, v40, v41, v42, (uint64_t)cf);
    }
    else if (v11 == CFArrayGetTypeID())
    {
      PDFWriteArray((unsigned char **)a1, (const __CFArray *)cf, v49, v50, v51, v52, v53, v54, a9);
    }
    else if (v11 == CFDictionaryGetTypeID())
    {
      PDFWriteDictionary((unsigned char **)a1, (CFDictionaryRef)cf);
    }
    else
    {
      if (CGPDFStreamObjectTypeID_onceToken != -1) {
        dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_11_20007);
      }
      if (v11 == CGPDFStreamObjectTypeID_id)
      {
        PDFWriteStreamObject(a1, (uint64_t)cf);
      }
      else
      {
        if (CGPDFReferenceTypeID_onceToken != -1) {
          dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
        }
        if (v11 == CGPDFReferenceTypeID_id)
        {
          if (cf) {
            uint64_t v61 = cf[2];
          }
          else {
            uint64_t v61 = 0;
          }
          PDFWriterPrintf((unsigned char **)a1, (uint64_t)"%R", v55, v56, v57, v58, v59, v60, v61);
        }
        else if (v11 == CFDataGetTypeID())
        {
          BytePtr = CFDataGetBytePtr((CFDataRef)cf);
          CFIndex Length = CFDataGetLength((CFDataRef)cf);
          if (a1)
          {
            uint64_t v64 = Length;
            uint64_t v65 = (unsigned char *)*a1;
            CGDataConsumerPutBytes((uint64_t)v65, (uint64_t)BytePtr, v64);
          }
        }
        else
        {
          if (CGPDFHexDataTypeID_onceToken != -1) {
            dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_15_20028);
          }
          if (v11 == CGPDFHexDataTypeID_id)
          {
            CFDataRef v66 = (const __CFData *)cf[2];
            CFIndex v67 = CFDataGetLength(v66);
            CFDataGetBytePtr(v66);
            PDFWriterPrintf((unsigned char **)a1, (uint64_t)"%X", v68, v69, v70, v71, v72, v73, v67);
          }
          else if (v11 == CFDateGetTypeID())
          {
            PDFWriterPrintf((unsigned char **)a1, (uint64_t)"%D", v74, v75, v76, v77, v78, v79, (uint64_t)cf);
          }
          else
          {
            pdf_error("Error: PDFWriteObject(...) encountered unknown object ID %d", v11);
          }
        }
      }
    }
  }
}

__CFArray *AppendModeCreateDocumentID(uint64_t a1, CGPDFArray *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CGPDFStringRef value = 0;
  CGPDFArrayGetString(a2, 0, &value);
  CGPDFStringRef v6 = value;
  if (value)
  {
    if (*((void *)value + 3)) {
      decrypt_string((uint64_t)value);
    }
    uint64_t v7 = *((void *)v6 + 9);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (char *)malloc_type_malloc(2 * v7 + 3, 0x100004077774924uLL);
  *(_WORD *)uint64_t v8 = 60;
  uint64_t v9 = v8 + 1;
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      CGPDFStringRef v11 = value;
      if (*((void *)value + 3)) {
        decrypt_string((uint64_t)value);
      }
      sprintf(v9, "%02X", *((unsigned __int8 *)v11 + i + 80));
      v9 += 2;
    }
  }
  *(_WORD *)&v8[strlen(v8)] = 62;
  size_t v12 = strlen(v8);
  CFDataRef v13 = CFDataCreate(v4, (const UInt8 *)v8, v12);
  free(v8);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v13);
  uint64_t v14 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v14);
  if (v14)
  {
    CC_MD5_Update(v14, &AppendModeCreateDocumentID_kBaselineHash, 4u);
    ++AppendModeCreateDocumentID_kBaselineHash;
    time_t data = time(0);
    CC_MD5_Update(v14, &data, 8u);
    if (a1)
    {
LABEL_13:
      uint64_t v15 = *(void *)(a1 + 40);
      goto LABEL_16;
    }
  }
  else
  {
    ++AppendModeCreateDocumentID_kBaselineHash;
    time_t data = time(0);
    if (a1) {
      goto LABEL_13;
    }
  }
  uint64_t v15 = 0;
LABEL_16:
  uint64_t v27 = v15;
  if (v14) {
    CC_MD5_Update(v14, &v27, 8u);
  }
  if (a1)
  {
    if (*(unint64_t (**)(uint64_t, const UInt8 *, unint64_t))(a1 + 72) == url_put_bytes)
    {
      uint64_t v21 = *(CFURLRef **)(a1 + 16);
      if (v21)
      {
        CFURLRef v22 = *v21;
        if (*v21)
        {
          CFStringRef v23 = CFURLGetString(*v21);
          if (v23)
          {
            CFStringRef v24 = v23;
            CFIndex Length = CFStringGetLength(v23);
            uint64_t v26 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
            v34.location = 0;
            v34.length = Length;
            CFStringGetCharacters(v24, v34, v26);
            if (v14) {
              md5_update(v14, (char *)v26, 2 * Length);
            }
            free(v26);
            CFRelease(v24);
          }
          CFRelease(v22);
        }
      }
    }
  }
  if (v14) {
    CC_MD5_Final(md, v14);
  }
  free(v14);
  __sprintf_chk(__s, 0, 0x23uLL, "<");
  uint64_t v16 = 0;
  uint64_t v17 = v31;
  do
  {
    sprintf(v17, "%02X", md[v16++]);
    v17 += 2;
  }
  while (v16 != 16);
  *(_WORD *)&__s[strlen(__s)] = 62;
  size_t v18 = strlen(__s);
  CFDataRef v19 = CFDataCreate(v4, (const UInt8 *)__s, v18);
  CFArrayAppendValue(Mutable, v19);
  CFRelease(v19);
  return Mutable;
}

void PDFWriteStreamObject(uint64_t *a1, uint64_t a2)
{
  CFAllocatorRef v4 = *(__CFDictionary **)(a2 + 16);
  CFDataRef v5 = *(const __CFData **)(a2 + 24);
  if (CFDataGetBytePtr(v5))
  {
    int v6 = *(unsigned __int8 *)(a2 + 32);
    if (*(unsigned char *)(a2 + 32))
    {
      CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      CGDataConsumerRef v8 = CGDataConsumerCreateWithCFData(Mutable);
      CGDataConsumerRef FlateEncoder = CGDataConsumerCreateFlateEncoder(v8);
      BytePtr = CFDataGetBytePtr(v5);
      CFIndex Length = CFDataGetLength(v5);
      CGDataConsumerPutBytes((uint64_t)FlateEncoder, (uint64_t)BytePtr, Length);
      CGDataConsumerClose((uint64_t)FlateEncoder);
      if (FlateEncoder) {
        CFRelease(FlateEncoder);
      }
      if (v8) {
        CFRelease(v8);
      }
      CGPDFAppenderDictionarySetCGPDFName(v4, "Filter", "FlateDecode");
      CFDataRef v5 = Mutable;
    }
    else
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    int v12 = CFDataGetLength(v5);
    CGPDFAppenderDictionarySetInt32(v4, "Length", v12);
    PDFWriteDictionary((unsigned char **)a1, *(CFDictionaryRef *)(a2 + 16));
    PDFWriterPrintf((unsigned char **)a1, (uint64_t)"stream\n", v13, v14, v15, v16, v17, v18, v32);
    CFDataRef v19 = CFDataGetBytePtr(v5);
    if (a1) {
      CGDataConsumerPutBytes(*a1, (uint64_t)v19, v12);
    }
    PDFWriterPrintf((unsigned char **)a1, (uint64_t)"\n", v20, v21, v22, v23, v24, v25, v33);
    PDFWriterPrintf((unsigned char **)a1, (uint64_t)"endstream\n", v26, v27, v28, v29, v30, v31, v34);
    if (v6)
    {
      CFRelease(Mutable);
    }
  }
  else
  {
    pdf_error("Failed to get the raw data pointer for PDFWriteStreamObject(...)");
  }
}

void PDFWriteDictionary(unsigned char **a1, CFDictionaryRef theDict)
{
  CFIndex Count = CFDictionaryGetCount(theDict);
  CFDataRef v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  int v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(theDict, v5, v6);
  PDFWriterPrintf(a1, (uint64_t)"<<", v7, v8, v9, v10, v11, v12, v23);
  if (Count >= 1)
  {
    CFDataRef v19 = v5;
    uint64_t v20 = v6;
    do
    {
      uint64_t v21 = *v19++;
      PDFWriteObject((int)a1, v21);
      uint64_t v22 = *v20++;
      PDFWriteObject((int)a1, v22);
      --Count;
    }
    while (Count);
  }
  PDFWriterPrintf(a1, (uint64_t)">>", v13, v14, v15, v16, v17, v18, v24);
  free(v6);

  free(v5);
}

void PDFWriteArray(unsigned char **a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PDFWriterPrintf(a1, (uint64_t)"[", a3, a4, a5, a6, a7, a8, v21);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v18 = Count;
    for (CFIndex i = 0; i != v18; ++i)
    {
      ValueAtIndedouble x = CFArrayGetValueAtIndex(a2, i);
      PDFWriteObject((int)a1, ValueAtIndex);
    }
  }

  PDFWriterPrintf(a1, (uint64_t)"]", v12, v13, v14, v15, v16, v17, a9);
}

uint64_t __AppendModeWriteObjects_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)a2 + 16);
  unint64_t v4 = *(void *)(*(void *)a3 + 16);
  BOOL v5 = v3 > v4;
  if (v3 >= v4) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = -1;
  }
  if (v5) {
    return 1;
  }
  else {
    return v6;
  }
}

uint64_t CGPDFAppenderHasMutableObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (a2 | (unsigned __int16)a3)
    {
      unint64_t v4 = (const void *)CGPDFReferenceCreate(a2, a3);
      uint64_t v3 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 16), v4) != 0;
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void CGPDFAppenderReplaceMutableObject(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (a1 && a4)
  {
    uint64_t v8 = (const void *)CGPDFReferenceCreate(a2, a3);
    CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v8);
    if (!Value)
    {
      CFStringRef Value = (void *)AppendModeObjectCreate(0, a2, a3, 0);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v8, Value);
      CFRelease(Value);
    }
    uint64_t v10 = (const void *)Value[5];
    if (v10) {
      CFRelease(v10);
    }
    Value[5] = CFRetain(a4);
    CFRelease(v8);
  }
}

uint64_t AppendModeObjectCreate(int a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (AppendModeObjectGetTypeID_onceToken != -1) {
    dispatch_once(&AppendModeObjectGetTypeID_onceToken, &__block_literal_global_138);
  }
  uint64_t cftype = pdf_create_cftype();
  *(void *)(cftype + 16) = a2;
  *(void *)(cftype + 24) = a3;
  *(_DWORD *)(cftype + 32) = a1;
  *(void *)(cftype + 40) = a4;
  *(void *)(cftype + 4++*(_DWORD *)(result + 8) = 0;
  if (a4) {
    CFRetain(a4);
  }
  return cftype;
}

uint64_t __AppendModeObjectGetTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&AppendModeObjectGetTypeID_class);
  AppendModeObjectGetTypeID_id = result;
  return result;
}

CFStringRef AppendModeObjectDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<AppendModeObject (%d, %d). State: %s>", *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), AppendModeObjectDebugDesc_kObjectStateNames[*(unsigned int *)(a1 + 32)]);
}

void AppendModeFinalize(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void __AppendModePopulateDocumentInfo_block_invoke(uint64_t a1, CFStringRef theString, const __CFString *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!CFStringGetCString(theString, buffer, 256, 0x600u))
  {
    pdf_error("Invalid key in documentInfo dictionary");
    return;
  }
  if (!CFEqual(theString, @"Keywords"))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    return;
  }
  CFTypeID v6 = CFGetTypeID(a3);
  if (v6 == CFStringGetTypeID())
  {
    if (CFStringGetLength(a3) < 1) {
      return;
    }
    CFArrayRef v7 = (const __CFArray *)CFRetain(a3);
    if (!v7) {
      return;
    }
    goto LABEL_18;
  }
  CFTypeID v8 = CFGetTypeID(a3);
  if (v8 == CFArrayGetTypeID())
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a3);
    if (Count >= 1)
    {
      uint64_t v10 = Count;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      MutableCopdouble y = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFArrayRef)a3);
      for (CFIndex i = 0; i < v10; ++i)
      {
        ValueAtIndedouble x = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, i);
        CFTypeID v15 = CFGetTypeID(ValueAtIndex);
        if (v15 != CFStringGetTypeID() || CFStringGetLength(ValueAtIndex) <= 0)
        {
          CFArrayRemoveValueAtIndex(MutableCopy, i);
          --v10;
          --i;
        }
      }
      if (v10 < 1)
      {
        CFArrayRef v16 = MutableCopy;
        goto LABEL_19;
      }
      CFArrayRef v7 = (const __CFArray *)CFStringCreateByCombiningStrings(v11, MutableCopy, @", ");
      CFRelease(MutableCopy);
      if (!v7) {
        return;
      }
LABEL_18:
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      CFArrayRef v16 = v7;
LABEL_19:
      CFRelease(v16);
    }
  }
}

uint64_t __AppendModeUpdateIndirectReferences_block_invoke_5()
{
  return 1;
}

uint64_t __AppendModeUpdateIndirectReferences_block_invoke_4(uint64_t a1, uint64_t a2, void *a3, const void *a4, uint64_t a5)
{
  if (CGPDFStreamObjectTypeID_onceToken != -1) {
    dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_11_20007);
  }
  if (CGPDFStreamObjectTypeID_id == a5)
  {
    uint64_t MutableObject = CGPDFAppenderCreateMutableObject(a2, a3);
    CFAllocatorRef v11 = (const void *)CGPDFReferenceCreate(MutableObject, v10);
    CFDictionarySetValue((CFMutableDictionaryRef)a3, a4, v11);
    CFRelease(v11);
  }
  return 1;
}

uint64_t __AppendModeUpdateIndirectReferences_block_invoke_3(uint64_t a1, uint64_t a2, __CFArray *a3, CFIndex a4, uint64_t a5, const void *a6)
{
  if (CGPDFStreamObjectTypeID_onceToken != -1) {
    dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_11_20007);
  }
  if (CGPDFStreamObjectTypeID_id == a5)
  {
    uint64_t MutableObject = CGPDFAppenderCreateMutableObject(a2, a6);
    uint64_t v13 = (const void *)CGPDFReferenceCreate(MutableObject, v12);
    CFArraySetValueAtIndex(a3, a4, v13);
    CFRelease(v13);
  }
  return 1;
}

void AppendModeSafelyTraverseCFObject(char *a1, __CFSet *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t MutableObject = a3;
    while (!CFSetContainsValue(a2, MutableObject))
    {
      CFSetAddValue(a2, MutableObject);
      CFTypeID v10 = CFGetTypeID(MutableObject);
      if (CGPDFReferenceTypeID_onceToken != -1) {
        dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
      }
      if (v10 == CGPDFReferenceTypeID_id)
      {
        if (!CGPDFAppenderHasMutableObject((uint64_t)a1, MutableObject[2], MutableObject[3])) {
          return;
        }
        uint64_t MutableObject = (uint64_t *)CGPDFAppenderGetMutableObject(a1, MutableObject[2], MutableObject[3]);
      }
      else
      {
        if (v10 == CFArrayGetTypeID())
        {
          CFIndex Count = CFArrayGetCount((CFArrayRef)MutableObject);
          if (Count >= 1)
          {
            CFIndex v12 = Count;
            for (CFIndex i = 0; i != v12; ++i)
            {
              ValueAtIndedouble x = CFArrayGetValueAtIndex((CFArrayRef)MutableObject, i);
              CFTypeID v15 = CFGetTypeID(ValueAtIndex);
              if ((*(unsigned int (**)(uint64_t, char *, uint64_t *, CFIndex, CFTypeID, const void *))(a4 + 16))(a4, a1, MutableObject, i, v15, ValueAtIndex))
              {
                CFArrayRef v16 = CFArrayGetValueAtIndex((CFArrayRef)MutableObject, i);
                AppendModeSafelyTraverseCFObject(a1, a2, v16, a4, a5);
              }
            }
          }
          return;
        }
        if (v10 == CFDictionaryGetTypeID())
        {
          CFIndex v17 = CFDictionaryGetCount((CFDictionaryRef)MutableObject);
          if (v17 >= 1)
          {
            CFIndex v18 = v17;
            uint64_t v24 = (const void **)malloc_type_malloc(8 * v17, 0xC0040B8AA526DuLL);
            CFDictionaryGetKeysAndValues((CFDictionaryRef)MutableObject, v24, 0);
            for (uint64_t j = 0; j != v18; ++j)
            {
              uint64_t v20 = v24[j];
              CFRetain(v20);
              CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)MutableObject, v20);
              CFTypeID v22 = CFGetTypeID(Value);
              if ((*(unsigned int (**)(uint64_t, char *, uint64_t *, const void *, CFTypeID, const void *))(a5 + 16))(a5, a1, MutableObject, v20, v22, Value))
              {
                uint64_t v23 = CFDictionaryGetValue((CFDictionaryRef)MutableObject, v20);
                if (v23) {
                  AppendModeSafelyTraverseCFObject(a1, a2, v23, a4, a5);
                }
              }
              CFRelease(v20);
            }
            free(v24);
          }
          return;
        }
        if (CGPDFStreamObjectTypeID_onceToken != -1) {
          dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_11_20007);
        }
        if (v10 != CGPDFStreamObjectTypeID_id) {
          return;
        }
        uint64_t MutableObject = (uint64_t *)MutableObject[2];
      }
      if (!MutableObject) {
        return;
      }
    }
  }
}

uint64_t __AppendModeUpdateIndirectReferences_block_invoke_2(uint64_t a1, char *a2, __CFDictionary *a3, const void *a4, uint64_t a5, const void *a6)
{
  if (_ZZZ22CGDisplayListGetTypeIDEUb_E4once != -1) {
    dispatch_once(&_ZZZ22CGDisplayListGetTypeIDEUb_E4once, &__block_literal_global_161_15385);
  }
  if (CGDisplayListGetTypeID::display_list2_type_id == a5)
  {
    uint64_t CGPDFStreamObjectFromCGDisplayList = CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList(a2, a6, 0.0, 0.0);
    uint64_t v13 = v12;
    CFRetain(a4);
    uint64_t v14 = (const void *)CGPDFReferenceCreate(CGPDFStreamObjectFromCGDisplayList, v13);
    CFDictionarySetValue(a3, a4, v14);
    CFRelease(v14);
    CFRelease(a4);
  }
  return 1;
}

uint64_t CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList(char *a1, const void *a2, double a3, double a4)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFTypeID v10 = CGDataConsumerCreateWithCFData(Mutable);
  CFAllocatorRef v11 = CGPDFContextCreate(v10, 0, 0);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v12 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CGCFDictionarySetPoint(v12, @"DisplayListOrigin", a3, a4);
  CGPDFContextBeginPage(v11, v12);
  CGContextDrawDisplayList((uint64_t)v11, a2, 0, v13, v14, v15, v16, v17);
  CGPDFContextEndPage(v11);
  CGPDFContextClose(v11);
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v12);
  CFIndex v18 = CGDataProviderCreateWithCFData(Mutable);
  CFRelease(Mutable);
  CFDataRef v19 = CGPDFDocumentCreateWithProvider(v18);
  CGDataProviderRelease(v18);
  CGPDFPageRef Page = CGPDFDocumentGetPage(v19, 1uLL);
  if (Page) {
    CGPDFPageRef Page = *(CGPDFPageRef *)(*((void *)Page + 5) + 16);
  }
  CGPDFDictionaryRef value = 0;
  if (CGPDFDictionaryGetDictionary(Page, "Resources", &value))
  {
    CGPDFDictionaryRef dict = 0;
    if (CGPDFDictionaryGetDictionary(value, "XObject", &dict))
    {
      uint64_t v34 = 0;
      uint64_t v35 = &v34;
      uint64_t v36 = 0x2000000000;
      uint64_t v37 = 0;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList_block_invoke;
      block[3] = &unk_1E52CD540;
      block[4] = &v34;
      CGPDFDictionaryApplyBlock(dict, block, 0);
      uint64_t v21 = (uint64_t *)v35[3];
      if (v21 && (CFDataRef CGPDFStreamObject = CGPDFAppenderCreateCGPDFStreamObject(v21)) != 0)
      {
        CFDataRef v23 = CGPDFStreamObject;
        uint64_t MutableObject = CGPDFAppenderCreateMutableObject((uint64_t)a1, CGPDFStreamObject);
        uint64_t v26 = v25;
        CFRelease(v23);
        uint64_t v27 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v28 = v27;
        uint64_t v29 = v35[3];
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          uint64_t v31 = *(void *)(v29 + 32);
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
        }
        CGPDFAppenderDictionarySetReferenceToReference(v27, v30, v31, MutableObject, v26);
        AppendModeDuplicateExternalObject(a1, (uint64_t)v19, (uint64_t *)v23, (uint64_t)v28);
        CFRelease(v28);
        if (!v19) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t MutableObject = 0;
        if (!v19)
        {
LABEL_18:
          _Block_object_dispose(&v34, 8);
          return MutableObject;
        }
      }
      CFRelease(v19);
      goto LABEL_18;
    }
  }
  if (v19) {
    CFRelease(v19);
  }
  return 0;
}

uint64_t __CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  if (*(_DWORD *)(a3 + 8) != 9) {
    return 1;
  }
  uint64_t v4 = *(void *)(a3 + 32);
  CGPDFDictionaryRef value = 0;
  BOOL v5 = v4 ? *(CGPDFDictionary **)(v4 + 48) : 0;
  if (!CGPDFDictionaryGetName(v5, "Subtype", (const char **)&value)) {
    return 1;
  }
  uint64_t result = strcmp(value, "Form");
  if (result) {
    return 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

void AppendModeDuplicateExternalObject(char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __AppendModeDuplicateExternalObject_block_invoke;
  v5[3] = &__block_descriptor_tmp_126_18008;
  v5[4] = a4;
  v5[5] = a2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __AppendModeDuplicateExternalObject_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_128_18009;
  v4[4] = a4;
  v4[5] = a2;
  AppendModeTraverseCFObject(a1, a3, (uint64_t)v5, (uint64_t)v4);
}

uint64_t __AppendModeDuplicateExternalObject_block_invoke(uint64_t a1, uint64_t a2, __CFArray *a3, CFIndex a4, uint64_t a5, uint64_t *key)
{
  if (CGPDFReferenceTypeID_onceToken != -1) {
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
  }
  if (CGPDFReferenceTypeID_id == a5)
  {
    CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
    if (Value)
    {
      CFArraySetValueAtIndex(a3, a4, Value);
      return 0;
    }
    if (key)
    {
      uint64_t v14 = key[2];
      kedouble y = (uint64_t *)key[3];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15
      && (uint64_t v16 = pdf_xref_resolve(**(void **)(*(void *)(v15 + 16) + 16), (int)v14, (unsigned __int16)key)) != 0)
    {
      CFNumberRef CFObject = CGPDFAppenderCreateCFObject((uint64_t)v16, 1);
      if (CFObject)
      {
        CFNumberRef v18 = CFObject;
        uint64_t MutableObject = CGPDFAppenderCreateMutableObject(a2, CFObject);
        uint64_t v21 = v20;
        CFRelease(v18);
        CGPDFAppenderDictionarySetReferenceToReference(*(__CFDictionary **)(a1 + 32), v14, (uint64_t)key, MutableObject, v21);
        CFTypeID v22 = (const void *)CGPDFReferenceCreate(MutableObject, v21);
        CFArraySetValueAtIndex(a3, a4, v22);
        CFRelease(v22);
      }
      else
      {
        pdf_error("Failed to convert object to its CoreFoundation equivalent");
      }
    }
    else
    {
      pdf_error("Failed to extract source document object");
    }
  }
  return 1;
}

uint64_t __AppendModeDuplicateExternalObject_block_invoke_2(uint64_t a1, uint64_t a2, __CFDictionary *a3, const void *a4, uint64_t a5, uint64_t *key)
{
  if (CGPDFReferenceTypeID_onceToken != -1) {
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
  }
  if (CGPDFReferenceTypeID_id == a5)
  {
    CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
    if (Value)
    {
      CFDictionarySetValue(a3, a4, Value);
      return 0;
    }
    if (key)
    {
      uint64_t v14 = key[2];
      kedouble y = (uint64_t *)key[3];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15
      && (uint64_t v16 = pdf_xref_resolve(**(void **)(*(void *)(v15 + 16) + 16), (int)v14, (unsigned __int16)key)) != 0)
    {
      CFNumberRef CFObject = CGPDFAppenderCreateCFObject((uint64_t)v16, 1);
      if (CFObject)
      {
        CFNumberRef v18 = CFObject;
        uint64_t MutableObject = CGPDFAppenderCreateMutableObject(a2, CFObject);
        uint64_t v21 = v20;
        CFRelease(v18);
        CGPDFAppenderDictionarySetReferenceToReference(*(__CFDictionary **)(a1 + 32), v14, (uint64_t)key, MutableObject, v21);
        CFTypeID v22 = (const void *)CGPDFReferenceCreate(MutableObject, v21);
        CFDictionarySetValue(a3, a4, v22);
        CFRelease(v22);
      }
      else
      {
        pdf_error("Failed to copy object");
      }
    }
    else
    {
      pdf_error("Failed to extract source document object");
    }
  }
  return 1;
}

uint64_t __AppendModeUpdateIndirectReferences_block_invoke(uint64_t a1, char *a2, __CFArray *a3, CFIndex a4, uint64_t a5, const void *a6)
{
  if (_ZZZ22CGDisplayListGetTypeIDEUb_E4once != -1) {
    dispatch_once(&_ZZZ22CGDisplayListGetTypeIDEUb_E4once, &__block_literal_global_161_15385);
  }
  if (CGDisplayListGetTypeID::display_list2_type_id == a5)
  {
    uint64_t CGPDFStreamObjectFromCGDisplayList = CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList(a2, a6, 0.0, 0.0);
    uint64_t v13 = (const void *)CGPDFReferenceCreate(CGPDFStreamObjectFromCGDisplayList, v12);
    CFArraySetValueAtIndex(a3, a4, v13);
    CFRelease(v13);
  }
  return 1;
}

uint64_t CGPDFAppenderCreatePageObject(uint64_t a1, CGPDFPage *a2)
{
  if (a2) {
    uint64_t v4 = *(CGPDFDictionary **)(*((void *)a2 + 5) + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFDictionardouble y = CGPDFAppenderCreateCFDictionary(v4);
  uint64_t v40 = (char *)a1;
  uint64_t MutableObject = CGPDFAppenderCreateMutableObject(a1, CFDictionary);
  uint64_t v41 = v7;
  uint64_t v42 = MutableObject;
  CFRelease(CFDictionary);
  CFIndex Count = CFDictionaryGetCount(CFDictionary);
  uint64_t v9 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(CFDictionary, v9, 0);
  if (Count >= 1)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v9[i];
      uint64_t v13 = (unsigned __int8 *)v12[2];
      int v15 = *v13;
      uint64_t v14 = (const char *)(v13 + 1);
      if (v15 == 47) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = (const char *)v12[2];
      }
      while (strcmp(v16, CGPDFAppenderCreatePageObject_kLegalKeyNames[v11]))
      {
        if (++v11 == 11)
        {
          CFDictionaryRemoveValue(CFDictionary, v12);
          break;
        }
      }
    }
  }
  free(v9);
  CGPDFAppenderDictionarySetCGPDFName(CFDictionary, "Type", "Page");
  for (uint64_t j = 0; j != 5; ++j)
  {
    CGRect BoxRect = CGPDFPageGetBoxRect(a2, (CGPDFBox)j);
    if (BoxRect.origin.x != INFINITY && BoxRect.origin.y != INFINITY)
    {
      PDFRect = CGCFArrayCreatePDFRect(BoxRect.origin.x, BoxRect.origin.y, BoxRect.size.width, BoxRect.size.height);
      CGPDFAppenderDictionarySetValue(CFDictionary, CGPDFAppenderCreatePageObject_kLegalKeyNames[j], PDFRect);
      CFRelease(PDFRect);
    }
  }
  int RotationAngle = CGPDFPageGetRotationAngle(a2);
  CGPDFAppenderDictionarySetInt32(CFDictionary, "Rotate", RotationAngle);
  uint64_t v21 = (const void *)CGPDFNameCreate("MediaBox");
  CFTypeID v22 = CFDictionaryGetValue(CFDictionary, v21);
  CFRelease(v21);
  if (!v22)
  {
    CFDataRef v23 = CGCFArrayCreatePDFRect(0.0, 0.0, 612.0, 792.0);
    CGPDFAppenderDictionarySetValue(CFDictionary, "MediaBox", v23);
    CFRelease(v23);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v25 = Mutable;
  if (v4)
  {
    uint64_t v26 = *((void *)v4 + 4);
    uint64_t v27 = *((void *)v4 + 5);
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  CGPDFAppenderDictionarySetReferenceToReference(Mutable, v26, v27, v42, v41);
  CGPDFDictionaryRef value = 0;
  uint64_t v28 = *(void *)v40;
  if (*(void *)v40)
  {
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    catalog = pdf_document_get_catalog(**(void **)(*(void *)(v28 + 16) + 16));
  }
  else
  {
    catalog = 0;
  }
  if (CGPDFDictionaryGetDictionary(catalog, "Pages", &value))
  {
    if (value)
    {
      uint64_t v30 = *((void *)value + 4);
      uint64_t v31 = *((void *)value + 5);
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
    }
    uint64_t v32 = (const void *)CGPDFNameCreate("Parent");
    uint64_t v33 = CFDictionaryGetValue(CFDictionary, v32);
    CFRelease(v32);
    if (v33) {
      CGPDFAppenderDictionarySetReferenceToReference(v25, v33[2], v33[3], v30, v31);
    }
  }
  CGPDFArrayRef v43 = 0;
  if (CGPDFDictionaryGetArray(v4, "Annots", &v43))
  {
    if (v43)
    {
      uint64_t v34 = *((void *)v43 + 5);
      uint64_t v35 = *((void *)v43 + 6);
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    uint64_t v36 = (const void *)CGPDFNameCreate("Annots");
    uint64_t v37 = CFDictionaryGetValue(CFDictionary, v36);
    CFRelease(v36);
    if (v37) {
      CGPDFAppenderDictionarySetReferenceToReference(v25, v37[2], v37[3], v34, v35);
    }
  }
  if (a2) {
    uint64_t v38 = *((void *)a2 + 2);
  }
  else {
    uint64_t v38 = 0;
  }
  AppendModeDuplicateExternalObject(v40, v38, (uint64_t *)CFDictionary, (uint64_t)v25);
  CFRelease(v25);
  return v42;
}

uint64_t CGPDFAppenderCreateAnnotationObject(char *a1, uint64_t a2, uint64_t a3)
{
  CFDictionardouble y = *(__CFDictionary **)(a3 + 24);
  if (!CFDictionary)
  {
    CFDictionardouble y = CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a3 + 16));
    *(void *)(a3 + 24) = CFDictionary;
  }
  if (!*(unsigned char *)(a3 + 32))
  {
    int v15 = (const void *)CGPDFNameCreate("P");
    CFDictionaryRemoveValue(CFDictionary, v15);
    CFRelease(v15);
    return CGPDFAppenderCreateMutableObject((uint64_t)a1, CFDictionary);
  }
  uint64_t v7 = (const void *)CGPDFNameCreate("AP");
  CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(CFDictionary, v7);
  CFRelease(v7);
  if (v8)
  {
    uint64_t v9 = (const void *)CGPDFNameCreate("N");
    CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(v8, v9);
    CFRelease(v9);
    if (v8)
    {
      CFTypeID v10 = CFGetTypeID(v8);
      if (_ZZZ22CGDisplayListGetTypeIDEUb_E4once != -1) {
        dispatch_once(&_ZZZ22CGDisplayListGetTypeIDEUb_E4once, &__block_literal_global_161_15385);
      }
      if (v10 == CGDisplayListGetTypeID::display_list2_type_id)
      {
        uint64_t v11 = (const void *)CGPDFNameCreate("Rect");
        memset(&v35, 0, 32);
        CGCFDictionaryGetPDFRect(CFDictionary, v11, &v35);
        CFRelease(v11);
        uint64_t CGPDFStreamObjectFromCGDisplayList = CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList(a1, v8, v35.f64[0], v35.f64[1]);
        CFDictionaryRef v8 = v13;
        if (a2) {
          uint64_t v14 = *(CGPDFDictionary **)(*(void *)(a2 + 40) + 16);
        }
        else {
          uint64_t v14 = 0;
        }
        CGPDFObjectRef value = 0;
        CGPDFDictionaryGetObject(v14, "Contents", &value);
        uint64_t v17 = *((void *)value + 2);
        uint64_t v18 = *((void *)value + 3);
        if (!(v17 | (unsigned __int16)v18))
        {
          CGPDFArrayRef v33 = 0;
          CGPDFDictionaryGetArray(v14, "Contents", &v33);
          CFArradouble y = CGPDFAppenderCreateCFArray(v33);
          uint64_t v20 = (const void *)CGPDFReferenceCreate(CGPDFStreamObjectFromCGDisplayList, (uint64_t)v8);
          CFArrayAppendValue(CFArray, v20);
          CFRelease(v20);
          CGPDFAppenderMutateDictionaryValue(a1, (uint64_t *)v14, "Contents", CFArray, 2);
          uint64_t v21 = CFArray;
LABEL_18:
          CFRelease(v21);
          goto LABEL_32;
        }
        if (CGPDFAppenderHasMutableObject((uint64_t)a1, *((void *)value + 2), *((void *)value + 3)))
        {
          uint64_t MutableObject = CGPDFAppenderGetMutableObject(a1, v17, v18);
          CFDataRef v23 = (void *)CGPDFReferenceCreate(CGPDFStreamObjectFromCGDisplayList, (uint64_t)v8);
          CFArrayAppendValue((CFMutableArrayRef)MutableObject, v23);
          uint64_t v21 = (__CFArray *)v23;
          goto LABEL_18;
        }
        if (!a2) {
          goto LABEL_25;
        }
        uint64_t v24 = *(void *)(a2 + 16);
        if (!v24) {
          goto LABEL_25;
        }
        uint64_t v25 = pdf_xref_resolve(**(void **)(*(void *)(v24 + 16) + 16), (int)v17, (unsigned __int16)v18);
        if (!v25) {
          goto LABEL_25;
        }
        int v26 = *((_DWORD *)v25 + 2);
        if (v26 != 9)
        {
          if (v26 == 7)
          {
            CFNumberRef CFObject = CGPDFAppenderCreateCFObject((uint64_t)v25, 1);
            CGPDFAppenderMutateDictionaryValue(a1, (uint64_t *)v14, "Contents", CFObject, 2);
            CFRelease(CFObject);
            uint64_t v28 = CFObject;
LABEL_34:
            CGPDFAppenderArrayAppendCGPDFReference(v28, CGPDFStreamObjectFromCGDisplayList, (uint64_t)v8);
            goto LABEL_32;
          }
LABEL_25:
          pdf_error("Unknown format for /Contents for append mode");
          goto LABEL_32;
        }
        uint64_t v29 = *((void *)v25 + 4);
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          uint64_t v31 = *(void *)(v29 + 32);
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
        }
        if (v30 | (unsigned __int16)v31)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          CGPDFAppenderMutateDictionaryValue(a1, (uint64_t *)v14, "Contents", Mutable, 4);
          CFRelease(Mutable);
          CGPDFAppenderArrayAppendCGPDFReference(Mutable, v30, v31);
          uint64_t v28 = Mutable;
          goto LABEL_34;
        }
        pdf_error("Failed to extract contents array for append burn in of annotation");
      }
      uint64_t CGPDFStreamObjectFromCGDisplayList = 0;
      CFDictionaryRef v8 = 0;
      goto LABEL_32;
    }
  }
  uint64_t CGPDFStreamObjectFromCGDisplayList = 0;
LABEL_32:
  uint64_t result = 0;
  *(void *)(a3 + 40) = CGPDFStreamObjectFromCGDisplayList;
  *(void *)(a3 + 4++*(_DWORD *)(result + 8) = v8;
  return result;
}

double __RIPStyleColorMatrix_block_invoke()
{
  rips_cm_cs = (uint64_t)CGColorSpaceCreateDeviceRGB();
  if (rips_cm_cs)
  {
    double result = *(double *)&_rips_class;
    *(void *)&RIPStyleColorMatrix_rips_cm_cls = rips_cm_super;
    *((void *)&RIPStyleColorMatrix_rips_cm_cls + 1) = rips_cm_size;
    unk_1E8F9E1A8 = off_1ED097580[0];
    qword_1E8F9E1B0 = (uint64_t)rips_cm_release;
    qword_1E8F9E1B8 = (uint64_t)rips_cm_Create;
    qword_1E8F9E1C0 = (uint64_t)rips_cm_Growth;
    qword_1E8F9E1C8 = (uint64_t)rips_cm_ColorSpace;
    qword_1E8F9E1D0 = (uint64_t)rips_cm_BltShape;
    qword_1E8F9E1D8 = (uint64_t)rips_cm_BltGlyph;
    qword_1E8F9E1E0 = (uint64_t)rips_cm_BltImage;
    qword_1E8F9E1E8 = (uint64_t)rips_cm_BltShade;
  }
  return result;
}

uint64_t rips_cm_BltShade(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  CFDictionaryRef v8 = (int *)(a3 + 12);
  if (!a3) {
    CFDictionaryRef v8 = (int *)(a2 + 12);
  }
  if (a4) {
    CFDictionaryRef v8 = a4;
  }
  if (a5) {
    CFDictionaryRef v8 = (int *)a5;
  }
  return rips_cm_Draw(a1, a2, a3, a4, v8, 0, 0, 0, a5, a6, a7, a8);
}

uint64_t rips_cm_Draw(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  long long v92 = 0uLL;
  if (!a4 || a4 == a5)
  {
    long long v92 = *(_OWORD *)a5;
    uint64_t v18 = 1;
    if (!DWORD2(v92) || !HIDWORD(v92)) {
      return v18;
    }
  }
  else if (!CGSBoundsIntersection(a4, a5, &v92))
  {
    return 1;
  }
  memset(v98, 0, sizeof(v98));
  CFDataRef v19 = (int *)(a2 + 12);
  if (a3)
  {
    if ((CGSBoundsIntersection(v19, (int *)(a3 + 12), v98) & 1) == 0) {
      return 1;
    }
  }
  else
  {
    *(_OWORD *)v98 = *(_OWORD *)v19;
    if (!*(_DWORD *)&v98[4] || !*(_DWORD *)&v98[6]) {
      return 1;
    }
  }
  v91[0] = 0;
  v91[1] = 0;
  if (!CGSBoundsIntersection((int *)&v92, (int *)v98, v91)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 160)) {
    BOOL v27 = 1;
  }
  else {
    BOOL v27 = (**(_DWORD **)(a2 + 32) & 0x3F0000u) > 0x80000;
  }
  int v28 = v27;
  if (v28) {
    unsigned int v29 = 20;
  }
  else {
    unsigned int v29 = 6;
  }
  dispatch_once_t v30 = RIPGetDepthForLayerFormat(v29, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v34 = (int *)RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)v91, 17, v30, *(unsigned int *)(a2 + 52), v31, v32, v33);
  if (!v34) {
    return 0;
  }
  uint64_t v37 = v34;
  long long v38 = *(_OWORD *)(a12 + 16);
  v131[0] = *(_OWORD *)a12;
  v131[1] = v38;
  long long v39 = *(_OWORD *)(a12 + 48);
  v131[2] = *(_OWORD *)(a12 + 32);
  v131[3] = v39;
  uint64_t v132 = *(void *)(a12 + 64);
  LODWORD(v131[0]) = 2;
  if (a6)
  {
    if ((RIPLayerBltShape(v34, 0, 0, a6, a10, a11, (uint64_t)v131, v36) & 1) == 0) {
      return 0;
    }
  }
  else if (a7)
  {
    if ((RIPLayerBltGlyph(v34, 0, 0, a7, a10, a11, 0, (uint64_t)v131) & 1) == 0) {
      return 0;
    }
  }
  else if (a8)
  {
    if ((RIPLayerBltImage((uint64_t)v34, 0, 0, a8, (uint64_t)v131, (uint64_t)a11, v35, v36) & 1) == 0) {
      return 0;
    }
  }
  else if (a9 && !RIPLayerBltShade((uint64_t)v34, 0, 0, a9, a10, (uint64_t)v131, v35, v36))
  {
    return 0;
  }
  vImagePixelCount v42 = v37[5];
  vImagePixelCount v41 = v37[6];
  dest.time_t data = (void *)*((void *)v37 + 7);
  dest.double height = v41;
  size_t v43 = v37[12];
  dest.double width = v42;
  dest.rowuint64_t Bytes = v43;
  if (*(unsigned char *)(a1 + 160)) {
    vImageUnpremultiplyData_RGBAFFFF(&dest, &dest, 0);
  }
  if (v28)
  {
    int v44 = *(_DWORD *)(a1 + 84);
    unsigned int v46 = *(_DWORD *)(a1 + 96);
    int v45 = *(_DWORD *)(a1 + 100);
    matridouble x = *(float *)(a1 + 80);
    int v116 = v45;
    int v47 = *(_DWORD *)(a1 + 124);
    unsigned int v49 = *(_DWORD *)(a1 + 136);
    int v48 = *(_DWORD *)(a1 + 140);
    int v117 = *(_DWORD *)(a1 + 120);
    int v118 = v48;
    int v50 = *(_DWORD *)(a1 + 104);
    int v51 = *(_DWORD *)(a1 + 108);
    int v119 = v44;
    int v120 = v50;
    int v52 = *(_DWORD *)(a1 + 144);
    int v53 = *(_DWORD *)(a1 + 148);
    int v121 = v47;
    int v122 = v52;
    int v54 = *(_DWORD *)(a1 + 92);
    int v123 = *(_DWORD *)(a1 + 88);
    int v124 = v51;
    int v55 = *(_DWORD *)(a1 + 132);
    int v125 = *(_DWORD *)(a1 + 128);
    int v126 = v53;
    int v56 = *(_DWORD *)(a1 + 112);
    unsigned int v57 = *(_DWORD *)(a1 + 116);
    int v127 = v54;
    int v128 = v56;
    int v58 = *(_DWORD *)(a1 + 152);
    unsigned int v59 = *(_DWORD *)(a1 + 156);
    int v129 = v55;
    int v130 = v58;
    post_bias.i64[0] = __PAIR64__(v57, v46);
    post_bias.i64[1] = __PAIR64__(v59, v49);
    vImageMatrixMultiply_ARGBFFFF(&dest, &dest, &matrix, 0, post_bias.f32, 0);
  }
  else
  {
    int v64 = *(_DWORD *)(a1 + 104);
    int v63 = *(_DWORD *)(a1 + 108);
    int v65 = *(_DWORD *)(a1 + 132);
    matridouble x = *(float *)(a1 + 128);
    int v116 = v63;
    int v66 = *(_DWORD *)(a1 + 92);
    unsigned int v68 = *(_DWORD *)(a1 + 136);
    int v67 = *(_DWORD *)(a1 + 140);
    int v117 = *(_DWORD *)(a1 + 88);
    int v118 = v67;
    int v69 = *(_DWORD *)(a1 + 120);
    int v119 = *(_DWORD *)(a1 + 124);
    int v120 = v64;
    int v70 = *(_DWORD *)(a1 + 80);
    int v71 = *(_DWORD *)(a1 + 144);
    int v72 = *(_DWORD *)(a1 + 148);
    int v121 = *(_DWORD *)(a1 + 84);
    int v122 = v71;
    unsigned int v74 = *(_DWORD *)(a1 + 96);
    int v73 = *(_DWORD *)(a1 + 100);
    int v123 = v69;
    int v124 = v73;
    int v125 = v70;
    int v126 = v72;
    int v75 = *(_DWORD *)(a1 + 112);
    unsigned int v76 = *(_DWORD *)(a1 + 116);
    int v127 = v65;
    int v128 = v75;
    p_matridouble x = &matrix;
    int v78 = *(_DWORD *)(a1 + 152);
    unsigned int v79 = *(_DWORD *)(a1 + 156);
    int v129 = v66;
    int v130 = v78;
    float32x4x4_t v134 = vld4q_f32(p_matrix);
    post_bias.i64[0] = __PAIR64__(v76, v68);
    *(int16x4_t *)v134.val[0].f32 = vmovn_s32(vcvtq_n_s32_f32(v134.val[0], 8uLL));
    *(int16x4_t *)v134.val[1].f32 = vmovn_s32(vcvtq_n_s32_f32(v134.val[1], 8uLL));
    *(int16x4_t *)v134.val[2].f32 = vmovn_s32(vcvtq_n_s32_f32(v134.val[2], 8uLL));
    *(int16x4_t *)v134.val[3].f32 = vmovn_s32(vcvtq_n_s32_f32(v134.val[3], 8uLL));
    BOOL v80 = v98;
    post_bias.i64[1] = __PAIR64__(v79, v74);
    *(int32x4_t *)uint64_t v93 = vcvtq_n_s32_f32(vmulq_f32(post_bias, (float32x4_t)vdupq_n_s32(0x437F0000u)), 8uLL);
    vst4_s16(v80, *(int16x4x4_t *)v134.val[0].f32);
    vImageMatrixMultiply_ARGB8888(&dest, &dest, v98, 256, 0, v93, 0);
  }
  if (*(unsigned char *)(a1 + 160)) {
    vImagePremultiplyData_RGBAFFFF(&dest, &dest, 0);
  }
  long long v100 = xmmword_1852934E0;
  long long v101 = unk_1852934F0;
  long long v104 = xmmword_185293520;
  long long v105 = unk_185293530;
  long long v102 = xmmword_185293500;
  long long v103 = unk_185293510;
  long long v108 = xmmword_185293560;
  long long v109 = unk_185293570;
  long long v106 = xmmword_185293540;
  long long v107 = unk_185293550;
  uint64_t v113 = 0;
  long long v111 = unk_185293590;
  long long v112 = xmmword_1852935A0;
  long long v110 = xmmword_185293580;
  *(_OWORD *)v98 = RIPImageDataInitializer;
  long long v99 = *(_OWORD *)algn_1852934D0;
  *(void *)&long long v100 = *((void *)v37 + 4);
  DWORD2(v101) = v37[5];
  DWORD2(v100) = DWORD2(v101);
  HIDWORD(v101) = v37[6];
  *(void *)&long long v101 = 0;
  HIDWORD(v100) = HIDWORD(v101);
  LODWORD(v102) = v37[12];
  *((void *)&v102 + 1) = *((void *)v37 + 7);
  *((void *)&v103 + 1) = *((void *)v37 + 9);
  LODWORD(v103) = v37[16];
  long long v104 = 0uLL;
  uint64_t v88 = 0;
  long long v84 = *(_OWORD *)(v37 + 3);
  uint64_t v89 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v85 = v98;
  long long v81 = *(_OWORD *)(a12 + 48);
  long long v95 = *(_OWORD *)(a12 + 32);
  long long v96 = v81;
  uint64_t v82 = *(void *)(a12 + 64);
  long long v83 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)uint64_t v93 = *(_OWORD *)a12;
  long long v94 = v83;
  uint64_t v97 = v82;
  *(void *)&long long v96 = 0x3FF0000000000000;
  uint64_t v18 = RIPLayerBltImage(a2, a3, (uint64_t)v91, (uint64_t)&v84, (uint64_t)v93, v60, v61, v62);
  (*(void (**)(int *))(*(void *)v37 + 24))(v37);
  return v18;
}

uint64_t rips_cm_BltImage(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t)a5;
  uint64_t v9 = (int *)(a3 + 12);
  if (!a3) {
    uint64_t v9 = (int *)(a2 + 12);
  }
  if (a4) {
    uint64_t v9 = a4;
  }
  if (!a5) {
    a5 = v9;
  }
  return rips_cm_Draw(a1, a2, a3, a4, a5, 0, 0, v8, 0, a6, a7, a8);
}

uint64_t rips_cm_BltGlyph(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFTypeID v10 = a5;
  uint64_t v11 = (int *)(a3 + 12);
  if (!a3) {
    uint64_t v11 = (int *)(a2 + 12);
  }
  if (a4) {
    uint64_t v11 = a4;
  }
  if (!a5) {
    a5 = v11;
  }
  return rips_cm_Draw(a1, a2, a3, a4, a5, 0, v10, 0, 0, a6, a7, a10);
}

uint64_t rips_cm_BltShape(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v9 = (int *)(a3 + 12);
  if (!a3) {
    uint64_t v9 = (int *)(a2 + 12);
  }
  if (a4) {
    uint64_t v9 = a4;
  }
  if (a5) {
    CFTypeID v10 = (int *)(a5 + 12);
  }
  else {
    CFTypeID v10 = v9;
  }
  return rips_cm_Draw(a1, a2, a3, a4, v10, a5, 0, 0, 0, a6, a7, a8);
}

uint64_t rips_cm_ColorSpace()
{
  return rips_cm_cs;
}

uint64_t rips_cm_Growth()
{
  return 0;
}

float *rips_cm_Create(uint64_t a1, uint64_t a2)
{
  size_t v4 = (*(uint64_t (**)(void))(a1 + 8))();
  double result = (float *)malloc_type_calloc(1uLL, v4, 0x4579193DuLL);
  if (result)
  {
    uint64_t v6 = 0;
    *(void *)double result = a1;
    *((void *)result + 1) = 0x8F100000001;
    if (a2) {
      uint64_t v7 = a2 + 32;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = (float64x2_t *)(v7 + 8);
    do
    {
      float64x2_t v10 = *v8;
      float64x2_t v9 = v8[1];
      v8 += 2;
      *(float32x4_t *)&result[v6 + 20] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v9);
      v6 += 4;
    }
    while (v6 != 20);
    BOOL v11 = result[23] != 0.0
       || result[28] != 0.0
       || result[33] != 0.0
       || result[35] != 0.0
       || result[36] != 0.0
       || result[37] != 0.0
       || result[38] != 1.0
       || result[39] != 0.0;
    BOOL v12 = result[24] != 0.0 || result[29] != 0.0 || result[34] != 0.0 || result[39] != 0.0;
    *((unsigned char *)result + 160) = v11 || v12;
  }
  return result;
}

void rips_cm_release(void *a1)
{
  int v1 = *((_DWORD *)a1 + 2) - 1;
  *((_DWORD *)a1 + 2) = v1;
  if (!v1) {
    free(a1);
  }
}

uint64_t rips_cm_size()
{
  return 168;
}

long long *rips_cm_super()
{
  return &_rips_class;
}

uint64_t __CGBufferProviderGetTypeID_block_invoke_2()
{
  uint64_t result = __CGTypeRegisterInternal(CGBufferProviderGetTypeID_runtime_class);
  CGBufferProviderGetTypeID_id = result;
  return result;
}

uint64_t buffer_provider_retain_count(uint64_t a1, atomic_uint *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case -1:
      if (atomic_fetch_add_explicit(a2 + 30, 0xFFFFFFFF, memory_order_relaxed) == 1)
      {
        buffer_provider_finalize((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        CFAllocatorRef v10 = CFGetAllocator(a2);
        CFAllocatorDeallocate(v10, a2);
      }
      break;
    case 0:
      return a2[30];
    case 1:
      return atomic_fetch_add_explicit(a2 + 30, 1u, memory_order_relaxed) + 1;
  }
  return 0;
}

void buffer_provider_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 128)) {
    _CGHandleAssert("buffer_provider_finalize", 173, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGBufferProvider.c", "provider->byte_pointer == NULL", "provider byte pointer method missing", a6, a7, a8, v12);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, *(void *)(a1 + 16));
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
  CFAllocatorRef v10 = *(const void **)(a1 + 136);
  if (v10) {
    CFRelease(v10);
  }
  _Block_release(*(const void **)(a1 + 32));
  _Block_release(*(const void **)(a1 + 40));
  BOOL v11 = *(const void **)(a1 + 48);

  _Block_release(v11);
}

__CFString *buffer_provider_copy_format_description(CFStringRef a1)
{
  if (!os_variant_has_internal_content()) {
    return @"CGBufferProvider";
  }
  if (a1)
  {
    uint64_t v3 = 0;
    asprintf(&v3, "CGBufferProvider: %p size: %zu retain count: %d retained pointer: %p", a1, a1->length, LODWORD(a1[3].length), a1[4].isa);
    a1 = CFStringCreateWithFormat(0, 0, @"%s\n%@", v3, &stru_1ED0A02B0);
    free(v3);
  }
  return (__CFString *)a1;
}

uint64_t CGBufferProviderGetTypeID()
{
  if (_block_invoke_once_18054 != -1) {
    dispatch_once(&_block_invoke_once_18054, &__block_literal_global_14_18055);
  }
  return CGBufferProviderGetTypeID_id;
}

uint64_t CGBufferProviderCreate(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    CGPostError((uint64_t)"%s: Invalid size = %jd", 0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)"CGBufferProviderCreate");
    return 0;
  }
  if (!a3) {
    return 0;
  }
  if (_block_invoke_once_18054 != -1) {
    dispatch_once(&_block_invoke_once_18054, &__block_literal_global_14_18055);
  }
  uint64_t Instance = CGTypeCreateInstance(CGBufferProviderGetTypeID_id, 128, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (!Instance)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v16.__sig) = 136315138;
      *(uint64_t *)((char *)&v16.__sig + 4) = (uint64_t)"create_buffer_provider";
      _os_log_impl(&dword_184BFE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s failed", (uint8_t *)&v16, 0xCu);
    }
    return 0;
  }
  uint64_t v14 = Instance;
  *(void *)(Instance + 16) = a1;
  *(void *)(Instance + 24) = -1;
  *(_DWORD *)(Instance + 120) = 1;
  v16.__sig = 0;
  *(void *)v16.__opaque = 0;
  pthread_mutexattr_init(&v16);
  pthread_mutexattr_settype(&v16, 2);
  pthread_mutex_init((pthread_mutex_t *)(v14 + 56), &v16);
  pthread_mutexattr_destroy(&v16);
  *(void *)(v14 + 24) = a2;
  *(void *)(v14 + 32) = _Block_copy(a3);
  *(void *)(v14 + 40) = _Block_copy(a4);
  *(void *)(v14 + 4++*(_DWORD *)(result + 8) = _Block_copy(a5);
  return v14;
}

uint64_t CGBufferProviderCreateWithCFData(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFDataGetTypeID()) {
    return 0;
  }
  CFRetain(a1);
  CFIndex Length = CFDataGetLength((CFDataRef)a1);

  return CGBufferProviderCreate((uint64_t)a1, Length, &__block_literal_global_18076, 0, &__block_literal_global_5_18077, v4, v5, v6);
}

void __CGBufferProviderCreateWithCFData_block_invoke_2(int a1, CFTypeRef cf)
{
}

UInt8 *__CGBufferProviderCreateWithCFData_block_invoke(int a1, CFMutableDataRef theData)
{
  return CFDataGetMutableBytePtr(theData);
}

uint64_t CGBufferProviderGetSize(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

char *CGBufferLockBytePtr(char *result)
{
  if (result)
  {
    int v1 = result;
    CFRetain(result);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
    uint64_t result = (char *)*((void *)v1 + 16);
    if (*((void *)v1 + 5))
    {
      if (result) {
        _CGHandleAssert("CGBufferLockBytePtr", 279, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGBufferProvider.c", "provider->byte_pointer == NULL", "provider byte pointer method missing", v2, v3, v4, v5);
      }
      goto LABEL_4;
    }
    if (!result)
    {
LABEL_4:
      *((void *)v1 + 16) = (*(uint64_t (**)(void))(*((void *)v1 + 4) + 16))();
      uint64_t v6 = 0;
      asprintf(&v6, "CGBufferProvider: %p\n", v1);
      qword_1EB288DD0 = (uint64_t)v6;
      ERROR_CGDataProvider_BufferIsNotReadable();
      ERROR_CGDataProvider_BufferIsNotBigEnough();
      qword_1EB288DD0 = 0;
      free(v6);
      return (char *)*((void *)v1 + 16);
    }
  }
  return result;
}

void CGBufferUnlockBytePtr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (!*(void *)(a1 + 128)) {
      _CGHandleAssert("CGBufferUnlockBytePtr", 302, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGBufferProvider.c", "provider->byte_pointer != NULL", "provider byte pointer method missing", a6, a7, a8, v10);
    }
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(uint64_t, void))(v9 + 16))(v9, *(void *)(a1 + 16));
    }
    *(void *)(a1 + 12++*(_DWORD *)(result + 8) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
    CFRelease((CFTypeRef)a1);
  }
}

uint64_t pattern_hash(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

BOOL pattern_equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

void pattern_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 72)) {
    _CGHandleAssert("pattern_finalize", 480, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGPattern.c", "pattern->should_free", "Method to free pattern missing", a6, a7, a8, v13);
  }
  uint64_t v9 = *(const void **)(a1 + 88);
  if (v9) {
    CFRelease(v9);
  }
  char v10 = *(const void **)(a1 + 96);
  if (v10) {
    CFRelease(v10);
  }
  if (pattern_notification_center) {
    CGNotificationCenterPostNotification(pattern_notification_center, @"kCGPatternWillDeallocate", (__CFString *)a1);
  }
  BOOL v11 = *(void (**)(uint64_t))(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 80);
    v11(v12);
  }
}

CFTypeID CGPatternGetTypeID(void)
{
  if (kCGPatternWillDeallocate_block_invoke_once != -1) {
    dispatch_once(&kCGPatternWillDeallocate_block_invoke_once, &__block_literal_global_6_18100);
  }
  return CGPatternGetTypeID_pattern_type_id;
}

void release_shading(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void draw_shading(CGShadingRef shading, CGContextRef c)
{
}

CGPatternRef CGPatternRetain(CGPatternRef pattern)
{
  if (pattern) {
    CFRetain(pattern);
  }
  return pattern;
}

CGPatternRef CGPatternCreateWithImage(unint64_t *a1, CGPatternTiling a2)
{
  return CGPatternCreateWithImage2(a1, &CGAffineTransformIdentity, a2);
}

void release_image(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void draw_image_18118(unint64_t *image, CGContextRef c)
{
  if (image)
  {
    double v2 = (double)image[5];
    double v3 = (double)image[6];
  }
  else
  {
    double v2 = 0.0;
    double v3 = 0.0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  CGContextDrawImage(c, *(CGRect *)(&v2 - 2), (CGImageRef)image);
}

uint64_t CGPatternCreateUncoloredEmpty()
{
  if (create_empty_once != -1) {
    dispatch_once_f(&create_empty_once, 0, (dispatch_function_t)create_empty);
  }
  uint64_t v0 = uncolored_empty;
  if (uncolored_empty) {
    CFRetain((CFTypeRef)uncolored_empty);
  }
  return v0;
}

CGPatternRef create_empty()
{
  v1.origin.double x = 0.0;
  v1.origin.double y = 0.0;
  v1.size.double width = 0.0;
  v1.size.double height = 0.0;
  colored_emptdouble y = (uint64_t)CGPatternCreate(0, v1, (CGAffineTransform *)&CGAffineTransformIdentity, 0.0, 0.0, kCGPatternTilingConstantSpacing, 1, &create_empty_callbacks);
  *(unsigned char *)(colored_empty + 72) = 0;
  v2.origin.double x = 0.0;
  v2.origin.double y = 0.0;
  v2.size.double width = 0.0;
  v2.size.double height = 0.0;
  CGPatternRef result = CGPatternCreate(0, v2, (CGAffineTransform *)&CGAffineTransformIdentity, 0.0, 0.0, kCGPatternTilingConstantSpacing, 0, &create_empty_callbacks);
  uncolored_emptdouble y = (uint64_t)result;
  *((unsigned char *)result + 72) = 0;
  return result;
}

uint64_t CGPatternCreateColoredEmpty()
{
  if (create_empty_once != -1) {
    dispatch_once_f(&create_empty_once, 0, (dispatch_function_t)create_empty);
  }
  uint64_t v0 = colored_empty;
  if (colored_empty) {
    CFRetain((CFTypeRef)colored_empty);
  }
  return v0;
}

uint64_t CGPatternGetIdentifier(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CGPatternIsOpaque(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 186);
}

uint64_t CGContextDrawPatternCell(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    CGRect v2 = *(uint64_t (**)(void, uint64_t))(a2 + 168);
    if (v2) {
      return v2(*(void *)(a2 + 80), result);
    }
  }
  return result;
}

void CGPatternDrawInContextDelegate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (const void *)CGContextCreateWithDelegateAndInfo(a2, 0, a3, a4, 0, 0, a7, a8);
  if (a1)
  {
    char v10 = *(void (**)(void, const void *))(a1 + 168);
    if (v10) {
      v10(*(void *)(a1 + 80), v9);
    }
  }
  if (v9)
  {
    CFRelease(v9);
  }
}

uint64_t CGPatternSetAssociate(uint64_t result, unint64_t a2)
{
  if (result)
  {
    uint64_t v2 = 0;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 88), (unint64_t *)&v2, a2, memory_order_relaxed, memory_order_relaxed);
    return *(void *)(result + 88);
  }
  return result;
}

uint64_t CGPatternGetAssociate(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

void *CGPDFNodeCreateIteratorToNode(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = malloc_type_malloc(0x48uLL, 0x10A0040D82D4B19uLL);
      if (v4)
      {
        uint64_t v9 = malloc_type_malloc(0x60uLL, 0x80040B8603338uLL);
        v4[8] = v9;
        if (v9)
        {
          BOOL v10 = 1;
          *(_DWORD *)uint64_t v4 = 1;
          v4[1] = a1;
          v4[2] = a2;
          uint64_t TextRange = CGPDFNodeGetTextRange(a1);
          uint64_t v13 = v12;
          uint64_t v14 = CGPDFNodeGetTextRange(a2);
          v4[4] = v14 + v15;
          if (v14 + v15 <= TextRange + v13)
          {
            if (v14 + v15 == TextRange + v13)
            {
              if (a1 != a2)
              {
                uint64_t v16 = a1;
                do
                {
                  uint64_t v16 = *(void *)(v16 + 8);
                  BOOL v10 = v16 != 0;
                }
                while (v16 != a2 && v16 != 0);
              }
            }
            else
            {
              BOOL v10 = 0;
            }
          }
          *((unsigned char *)v4 + 24) = v10;
          uint64_t v18 = *(void *)(a1 + 8);
          v4[5] = 0;
          void v4[6] = v18;
          if (v18)
          {
            ChildIndedouble x = CGPDFNodeGetChildIndex(a1);
          }
          else
          {
            void v4[6] = a1;
            if ((*(unsigned char *)(a1 + 1) & 2) != 0) {
              ChildIndedouble x = *(_DWORD *)(a1 + 44);
            }
            else {
              ChildIndedouble x = 0;
            }
          }
          *((_DWORD *)v4 + 14) = ChildIndex;
          *((unsigned char *)v4 + 60) = v10;
          uint64_t v20 = (void *)v4[8];
          if (a3)
          {
            *uint64_t v20 = CGPDFNodeIteratorReject;
            if (a3 == 1) {
              uint64_t v21 = CGPDFNodeIteratorAccept;
            }
            else {
              uint64_t v21 = CGPDFNodeIteratorReject;
            }
            *(void *)(v4[8] + ++*(_DWORD *)(result + 8) = v21;
            if (a4) {
              uint64_t v22 = CGPDFNodeIteratorAccept;
            }
            else {
              uint64_t v22 = CGPDFNodeIteratorReject;
            }
            *(void *)(v4[8] + 24) = v22;
            *(void *)(v4[8] + 32) = v22;
            *(void *)(v4[8] + 40) = v22;
            *(void *)(v4[8] + 16) = CGPDFNodeIteratorReject;
            if (a3 <= 1536)
            {
              switch(a3)
              {
                case 514:
                  *(void *)(v4[8] + 4++*(_DWORD *)(result + 8) = CGPDFNodeIteratorAccept;
                  uint64_t v23 = v4[8];
                  uint64_t v24 = CGPDFNodeIteratorRecurseReject;
                  goto LABEL_34;
                case 515:
                  *(void *)(v4[8] + 4++*(_DWORD *)(result + 8) = CGPDFNodeIteratorReject;
                  *(void *)(v4[8] + 56) = CGPDFNodeIteratorReject;
                  *(void *)(v4[8] + 64) = CGPDFNodeIteratorAccept;
                  uint64_t v27 = v4[8];
                  uint64_t v24 = CGPDFNodeIteratorRecurseReject;
                  goto LABEL_36;
                case 516:
                  *(void *)(v4[8] + 4++*(_DWORD *)(result + 8) = CGPDFNodeIteratorReject;
                  *(void *)(v4[8] + 56) = CGPDFNodeIteratorReject;
                  *(void *)(v4[8] + 64) = CGPDFNodeIteratorReject;
                  uint64_t v31 = v4[8];
                  uint64_t v32 = CGPDFNodeIteratorAccept;
                  goto LABEL_55;
                case 517:
                  *(void *)(v4[8] + 4++*(_DWORD *)(result + 8) = CGPDFNodeIteratorReject;
                  *(void *)(v4[8] + 56) = CGPDFNodeIteratorReject;
                  *(void *)(v4[8] + 64) = CGPDFNodeIteratorReject;
                  *(void *)(v4[8] + 72) = CGPDFNodeIteratorReject;
                  *(void *)(v4[8] + 80) = CGPDFNodeIteratorReject;
                  uint64_t v29 = v4[8];
                  uint64_t v24 = CGPDFNodeIteratorAccept;
                  goto LABEL_38;
                default:
                  if (a3 != 1) {
                    goto LABEL_49;
                  }
                  uint64_t v25 = v4[8];
                  uint64_t v24 = CGPDFNodeIteratorRecurseReject;
                  goto LABEL_33;
              }
            }
            if (a3 != 1537)
            {
              if (a3 == 1538)
              {
                *(void *)(v4[8] + 4++*(_DWORD *)(result + 8) = CGPDFNodeIteratorReject;
                *(void *)(v4[8] + 56) = CGPDFNodeIteratorReject;
                *(void *)(v4[8] + 64) = CGPDFNodeIteratorReject;
                *(void *)(v4[8] + 72) = CGPDFNodeIteratorReject;
                *(void *)(v4[8] + 80) = CGPDFNodeIteratorRecurseAccept;
                uint64_t v29 = v4[8];
                uint64_t v24 = CGPDFNodeIteratorRecurseReject;
                goto LABEL_38;
              }
LABEL_49:
              uint64_t v33 = 1;
              while (kCGPDFNodeTypeOrder[v33] != a3)
              {
                if (++v33 == 12)
                {
                  uint64_t v33 = 0;
                  goto LABEL_54;
                }
              }
              uint64_t v33 = v33;
LABEL_54:
              *(void *)(v4[8] + 8 * v33) = CGPDFNodeIteratorAccept;
              uint64_t v32 = CGPDFNodeIteratorReject;
              *(void *)(v4[8] + 4++*(_DWORD *)(result + 8) = CGPDFNodeIteratorReject;
              *(void *)(v4[8] + 56) = CGPDFNodeIteratorReject;
              *(void *)(v4[8] + 64) = CGPDFNodeIteratorReject;
              uint64_t v31 = v4[8];
LABEL_55:
              *(void *)(v31 + 72) = v32;
              uint64_t v28 = v4[8];
              uint64_t v24 = CGPDFNodeIteratorRecurseReject;
LABEL_37:
              *(void *)(v28 + 80) = v24;
              uint64_t v29 = v4[8];
LABEL_38:
              *(void *)(v29 + 8++*(_DWORD *)(result + 8) = v24;
              return v4;
            }
            *(void *)(v4[8] + 4++*(_DWORD *)(result + 8) = CGPDFNodeIteratorReject;
            *(void *)(v4[8] + 56) = CGPDFNodeIteratorAccept;
            uint64_t v26 = v4[8];
            uint64_t v24 = CGPDFNodeIteratorRecurseReject;
          }
          else
          {
            *uint64_t v20 = CGPDFNodeIteratorAccept;
            *(void *)(v4[8] + ++*(_DWORD *)(result + 8) = CGPDFNodeIteratorAccept;
            *(void *)(v4[8] + 24) = CGPDFNodeIteratorAccept;
            *(void *)(v4[8] + 32) = CGPDFNodeIteratorAccept;
            *(void *)(v4[8] + 40) = CGPDFNodeIteratorAccept;
            *(void *)(v4[8] + 16) = CGPDFNodeIteratorReject;
            uint64_t v25 = v4[8];
            uint64_t v24 = CGPDFNodeIteratorRecurseAccept;
LABEL_33:
            *(void *)(v25 + 4++*(_DWORD *)(result + 8) = v24;
            uint64_t v23 = v4[8];
LABEL_34:
            *(void *)(v23 + 56) = v24;
            uint64_t v26 = v4[8];
          }
          *(void *)(v26 + 64) = v24;
          uint64_t v27 = v4[8];
LABEL_36:
          *(void *)(v27 + 72) = v24;
          uint64_t v28 = v4[8];
          goto LABEL_37;
        }
        free(v4);
        return 0;
      }
    }
  }
  return v4;
}

uint64_t CGPDFNodeIteratorRecurseReject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(result) = *(unsigned __int8 *)(a3 + 60);
  while (1)
  {
    int v6 = result;
    int v7 = *(unsigned __int8 *)(a3 + 24);
    if (result == (v7 ^ 1))
    {
      *(unsigned char *)(a3 + 60) = 0;
      if (a2 && (*(unsigned char *)(a2 + 1) & 2) != 0)
      {
        uint64_t v8 = *(unsigned int *)(a2 + 44);
        if (!v7) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v8 = 0;
        if (!v7)
        {
LABEL_34:
          while (v8)
          {
            --v8;
            if (a2
              && (*(unsigned char *)(a2 + 1) & 2) != 0
              && *(_DWORD *)(a2 + 44) > v8
              && (uint64_t v13 = *(int **)(*(void *)(a2 + 56) + 8 * v8)) != 0)
            {
              int v14 = *v13;
            }
            else
            {
              int v14 = 0;
            }
            uint64_t v15 = 1;
            while (kCGPDFNodeTypeOrder[v15] != v14)
            {
              if (++v15 == 12)
              {
                LODWORD(v15) = 0;
                break;
              }
            }
            if (((*(uint64_t (**)(uint64_t))(*(void *)(a3 + 64) + 8 * v15))(v8) & 1) == 0) {
              return 0;
            }
          }
          goto LABEL_35;
        }
      }
      if (v8) {
        break;
      }
    }
LABEL_35:
    *(unsigned char *)(a3 + 60) = v6 ^ 1;
    uint64_t result = 1;
    if (v6) {
      return result;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    if (a2
      && (*(unsigned char *)(a2 + 1) & 2) != 0
      && v9 < *(unsigned int *)(a2 + 44)
      && (BOOL v10 = *(int **)(*(void *)(a2 + 56) + 8 * v9)) != 0)
    {
      int v11 = *v10;
    }
    else
    {
      int v11 = 0;
    }
    uint64_t v12 = 1;
    while (kCGPDFNodeTypeOrder[v12] != v11)
    {
      if (++v12 == 12)
      {
        LODWORD(v12) = 0;
        break;
      }
    }
    if (((*(uint64_t (**)(unint64_t))(*(void *)(a3 + 64) + 8 * v12))(v9) & 1) == 0) {
      return 0;
    }
    if (++v9 == v8) {
      goto LABEL_35;
    }
  }
}

uint64_t CGPDFNodeIteratorRecurseAccept(int a1, uint64_t a2, uint64_t a3)
{
  LODWORD(result) = *(unsigned __int8 *)(a3 + 60);
  while (1)
  {
    int v7 = result;
    int v8 = *(unsigned __int8 *)(a3 + 24);
    if (result == v8)
    {
      *(void *)(a3 + 40) = a2;
      if (a2) {
        uint64_t v17 = *(void *)(a2 + 8);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t result = 0;
      if (!v17) {
        uint64_t v17 = a2;
      }
      *(void *)(a3 + 4++*(_DWORD *)(result + 8) = v17;
      *(_DWORD *)(a3 + 56) = a1;
      *(unsigned char *)(a3 + 60) = v7 ^ 1;
      return result;
    }
    *(unsigned char *)(a3 + 60) = 0;
    if (!a2 || (*(unsigned char *)(a2 + 1) & 2) == 0)
    {
      if (!v8)
      {
        uint64_t v9 = 0;
LABEL_24:
        while (v9)
        {
          --v9;
          if (a2
            && (*(unsigned char *)(a2 + 1) & 2) != 0
            && *(_DWORD *)(a2 + 44) > v9
            && (int v14 = *(int **)(*(void *)(a2 + 56) + 8 * v9)) != 0)
          {
            int v15 = *v14;
          }
          else
          {
            int v15 = 0;
          }
          uint64_t v16 = 1;
          while (kCGPDFNodeTypeOrder[v16] != v15)
          {
            if (++v16 == 12)
            {
              LODWORD(v16) = 0;
              break;
            }
          }
          if (((*(uint64_t (**)(uint64_t))(*(void *)(a3 + 64) + 8 * v16))(v9) & 1) == 0) {
            return 0;
          }
        }
      }
      goto LABEL_6;
    }
    uint64_t v9 = *(unsigned int *)(a2 + 44);
    if (!v8) {
      goto LABEL_24;
    }
    if (*(_DWORD *)(a2 + 44)) {
      break;
    }
LABEL_6:
    *(unsigned char *)(a3 + 60) = v7 ^ 1;
    uint64_t result = 1;
    if (v7) {
      return result;
    }
  }
  unint64_t v10 = 0;
  while (1)
  {
    if ((*(unsigned char *)(a2 + 1) & 2) != 0
      && v10 < *(unsigned int *)(a2 + 44)
      && (int v11 = *(int **)(*(void *)(a2 + 56) + 8 * v10)) != 0)
    {
      int v12 = *v11;
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = 1;
    while (kCGPDFNodeTypeOrder[v13] != v12)
    {
      if (++v13 == 12)
      {
        LODWORD(v13) = 0;
        break;
      }
    }
    if (((*(uint64_t (**)(unint64_t))(*(void *)(a3 + 64) + 8 * v13))(v10) & 1) == 0) {
      return 0;
    }
    if (++v10 == v9) {
      goto LABEL_6;
    }
  }
}

uint64_t CGPDFNodeIteratorReject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 60) = 0;
  return 1;
}

uint64_t CGPDFNodeIteratorAccept(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CGPDFNodeIsUsedGraphic(a2);
  if ((result & 1) == 0)
  {
    *(void *)(a3 + 40) = a2;
    if (a2) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    if (!v7) {
      uint64_t v7 = a2;
    }
    *(void *)(a3 + 4++*(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(a3 + 56) = a1;
  }
  *(unsigned char *)(a3 + 60) = 0;
  return result;
}

_DWORD *CGPDFNodeIteratorRetain(_DWORD *result)
{
  if (result) {
    ++*result;
  }
  return result;
}

void CGPDFNodeIteratorRelease(void **a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1)
    {
      int v2 = *(_DWORD *)a1 - 1;
      *(_DWORD *)a1 = v2;
      if (!v2)
      {
        free(a1[8]);
        free(a1);
      }
    }
  }
}

uint64_t CGPDFNodeIteratorNextNode(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 48);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    *(void *)(v1 + 40) = 0;
    if ((*(_DWORD *)v2 & 0x200) == 0) {
      break;
    }
    uint64_t v3 = *(unsigned int *)(v2 + 44);
    unint64_t v4 = *(unsigned int *)(v1 + 56);
    if (v4 == v3) {
      goto LABEL_45;
    }
    if (!v3) {
      return 0;
    }
    if (*(unsigned char *)(v1 + 24))
    {
      if (v4 < v3)
      {
        while (1)
        {
          if ((*(unsigned char *)(v2 + 1) & 2) != 0
            && v4 < *(unsigned int *)(v2 + 44)
            && (uint64_t v5 = *(int **)(*(void *)(v2 + 56) + 8 * v4)) != 0)
          {
            int v6 = *v5;
          }
          else
          {
            int v6 = 0;
          }
          uint64_t v7 = 1;
          while (kCGPDFNodeTypeOrder[v7] != v6)
          {
            if (++v7 == 12)
            {
              LODWORD(v7) = 0;
              break;
            }
          }
          if (((*(uint64_t (**)(unint64_t))(*(void *)(v1 + 64) + 8 * v7))(v4) & 1) == 0) {
            goto LABEL_50;
          }
          if (++v4 == v3) {
            goto LABEL_19;
          }
        }
      }
LABEL_20:
      *(_DWORD *)(v1 + 56) = CGPDFNodeGetChildIndex(v2);
      uint64_t v8 = *(void *)(v2 + 8);
      *(void *)(v1 + 4++*(_DWORD *)(result + 8) = v8;
      if (v8)
      {
        char v9 = 1;
        uint64_t v2 = v8;
      }
      else
      {
        *(void *)(v1 + 4++*(_DWORD *)(result + 8) = v2;
        *(_DWORD *)(v1 + 56) = v3;
        char v9 = 1;
      }
      goto LABEL_41;
    }
    uint64_t v11 = (v4 + 1);
    while (v11)
    {
      --v11;
      if ((*(unsigned char *)(v2 + 1) & 2) != 0
        && *(_DWORD *)(v2 + 44) > v11
        && (int v12 = *(int **)(*(void *)(v2 + 56) + 8 * v11)) != 0)
      {
        int v13 = *v12;
      }
      else
      {
        int v13 = 0;
      }
      uint64_t v14 = 1;
      while (kCGPDFNodeTypeOrder[v14] != v13)
      {
        if (++v14 == 12)
        {
          LODWORD(v14) = 0;
          break;
        }
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)(v1 + 64) + 8 * v14))(v11) & 1) == 0) {
        goto LABEL_50;
      }
    }
LABEL_19:
    if (*(unsigned char *)(v1 + 24)) {
      goto LABEL_20;
    }
    do
    {
      ChildIndedouble x = CGPDFNodeGetChildIndex(v2);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (!ChildIndex && v2);
    if (!ChildIndex) {
      return 0;
    }
    char v9 = 0;
    *(_DWORD *)(v1 + 56) = ChildIndex - 1;
    *(void *)(v1 + 4++*(_DWORD *)(result + 8) = v2;
LABEL_41:
    uint64_t result = 0;
    *(unsigned char *)(v1 + 60) = v9;
    if (!v2) {
      return result;
    }
  }
  if (*(_DWORD *)(v1 + 56)) {
    return 0;
  }
  uint64_t v3 = 0;
LABEL_45:
  uint64_t v15 = 1;
  while (kCGPDFNodeTypeOrder[v15] != *(_DWORD *)v2)
  {
    if (++v15 == 12)
    {
      LODWORD(v15) = 0;
      break;
    }
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 64) + 8 * v15))(v3, v2, v1) & 1) == 0)
  {
LABEL_50:
    uint64_t v16 = *(void *)(v1 + 40);
    if (v16)
    {
      uint64_t TextRange = CGPDFNodeGetTextRange(v16);
      uint64_t v19 = *(void *)(v1 + 32);
      if (*(unsigned char *)(v1 + 24))
      {
        if (TextRange + v18 > v19) {
          return 0;
        }
        if (TextRange + v18 == v19)
        {
          uint64_t v20 = *(void *)(v1 + 40);
          uint64_t v21 = *(void *)(v1 + 16);
          if (v20 != v21)
          {
            if (v21)
            {
              do
                uint64_t v21 = *(void *)(v21 + 8);
              while (v21 != v20 && v21 != 0);
LABEL_71:
              if (v21) {
                return 0;
              }
            }
          }
        }
      }
      else
      {
        if (TextRange + v18 < v19) {
          return 0;
        }
        if (TextRange + v18 == v19)
        {
          uint64_t v21 = *(void *)(v1 + 40);
          uint64_t v23 = *(void *)(v1 + 16);
          if (v21 != v23)
          {
            if (v21)
            {
              do
                uint64_t v21 = *(void *)(v21 + 8);
              while (v21 != v23 && v21 != 0);
              goto LABEL_71;
            }
          }
        }
      }
      if (!*(unsigned char *)(v1 + 60))
      {
        int v25 = *(_DWORD *)(v1 + 56);
        if (*(unsigned char *)(v1 + 24))
        {
          *(_DWORD *)(v1 + 56) = v25 + 1;
          uint64_t v26 = *(void *)(v1 + 48);
          if (v26)
          {
            if ((*(unsigned char *)(v26 + 1) & 2) == 0 || (v25 + 1) >= *(_DWORD *)(v26 + 44))
            {
              *(_DWORD *)(v1 + 56) = CGPDFNodeGetChildIndex(*(void *)(v1 + 48));
              uint64_t v27 = *(void *)(v26 + 8);
              goto LABEL_85;
            }
          }
          else
          {
            int v29 = CGPDFNodeGetChildIndex(0);
            uint64_t v27 = 0;
            *(_DWORD *)(v1 + 56) = v29;
LABEL_85:
            *(void *)(v1 + 4++*(_DWORD *)(result + 8) = v27;
            *(unsigned char *)(v1 + 60) = 1;
          }
        }
        else if (v25)
        {
LABEL_83:
          *(_DWORD *)(v1 + 56) = v25 - 1;
        }
        else
        {
          uint64_t v28 = *(void *)(v1 + 48);
          while (v28)
          {
            int v25 = CGPDFNodeGetChildIndex(v28);
            *(_DWORD *)(v1 + 56) = v25;
            uint64_t v28 = *(void *)(v28 + 8);
            *(void *)(v1 + 4++*(_DWORD *)(result + 8) = v28;
            if (v25) {
              goto LABEL_83;
            }
          }
        }
      }
    }
    return *(void *)(v1 + 40);
  }
  return 0;
}

uint64_t CGPDFNodeIteratorRestart(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    *(void *)(result + 40) = 0;
    uint64_t result = *(void *)(result + 8);
    if (result)
    {
      uint64_t v2 = *(void *)(result + 8);
      *(void *)(v1 + 4++*(_DWORD *)(result + 8) = v2;
      if (v2)
      {
        uint64_t result = CGPDFNodeGetChildIndex(result);
      }
      else
      {
        *(void *)(v1 + 4++*(_DWORD *)(result + 8) = result;
        if ((*(unsigned char *)(result + 1) & 2) != 0) {
          uint64_t result = *(unsigned int *)(result + 44);
        }
        else {
          uint64_t result = 0;
        }
      }
    }
    else
    {
      *(void *)(v1 + 4++*(_DWORD *)(result + 8) = 0;
    }
    *(_DWORD *)(v1 + 56) = result;
    *(unsigned char *)(v1 + 60) = *(unsigned char *)(v1 + 24);
  }
  return result;
}

uint64_t CGPDFNodeIsHitByPoint(uint64_t result, double a2, double a3, double a4)
{
  if (result)
  {
    uint64_t v7 = (__n64 *)result;
    double Rotation = CGPDFNodeGetRotation(result);
    double v9 = Rotation;
    if (Rotation == 0.0)
    {
      double v12 = a3;
      double v11 = a2;
    }
    else
    {
      __double2 v10 = __sincos_stret(Rotation);
      double v11 = a3 * v10.__sinval + v10.__cosval * a2 + 0.0;
      double v12 = a3 * v10.__cosval - v10.__sinval * a2 + 0.0;
    }
    double HitTestRect = CGPDFNodeGetHitTestRect((uint64_t)v7, a4);
    uint64_t v17 = v16;
    unsigned __int32 v18 = v7->n64_u32[0];
    if (v7->n64_u32[0] == 1)
    {
      uint64_t v19 = (__n64 *)v7[1].n64_u64[0];
      if (v19)
      {
        if (v9 == 0.0)
        {
          CGPDFNodeGetHitTestRect((uint64_t)v19, a4);
        }
        else
        {
          v35.origin.double x = CGPDFNodeGetBounds(v19).n64_f64[0];
          *(CGRect *)(&v13 - 1) = CGRectInset(v35, a4, a4);
        }
      }
    }
    double v20 = HitTestRect;
    uint64_t v21 = v17;
    v34.double x = v11;
    v34.double y = v12;
    uint64_t result = CGRectContainsPoint(*(CGRect *)(&v13 - 1), v34);
    if (result)
    {
      if (v18 == 1538 || v18 == 517)
      {
        if ((v7->n64_u8[1] & 2) == 0) {
          return 0;
        }
        uint64_t v25 = v7[5].n64_u32[1];
        if (!v25) {
          return 0;
        }
        unint64_t v26 = 0;
        uint64_t v27 = v25 - 1;
        do
        {
          if ((v7->n64_u8[1] & 2) != 0 && v26 < v7[5].n64_u32[1]) {
            uint64_t v28 = *(void *)(v7[7].n64_u64[0] + 8 * v26);
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t result = CGPDFNodeIsHitByPoint(v28, a2, a3, a4);
          if (result) {
            break;
          }
        }
        while (v27 != v26++);
      }
      else
      {
        if (v18 == 516)
        {
          if ((v7->n64_u8[1] & 2) == 0) {
            return 0;
          }
          unsigned int v22 = v7[5].n64_u32[1];
          if (!v22) {
            return 0;
          }
          unsigned int ChildIndexAtX = CGPDFNodeGetChildIndexAtX(v7, v11);
          if (ChildIndexAtX <= 1)
          {
            uint64_t v24 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] ? *(__n64 **)v7[7].n64_u64[0] : 0;
            CGPDFNodeGetBounds(v24);
            if (v12 > v30 + v31 + a4) {
              return 0;
            }
          }
          if (ChildIndexAtX >= v22)
          {
            uint64_t v32 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] > v22 - 1
                ? *(__n64 **)(v7[7].n64_u64[0] + 8 * (v22 - 1))
                : 0;
            CGPDFNodeGetBounds(v32);
            if (v12 < v33 - a4) {
              return 0;
            }
          }
        }
        return 1;
      }
    }
  }
  return result;
}

double CGPDFNodeGetHitTestRect(uint64_t a1, double a2)
{
  v5.n64_u64[0] = CGPDFNodeGetBounds((__n64 *)a1).n64_u64[0];
  CGFloat v6 = v4.n64_f64[0];
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  if (v5.n64_f64[0] == INFINITY || v4.n64_f64[0] == INFINITY) {
    return v5.n64_f64[0];
  }
  if (!a1
    || ((uint64_t v12 = *(void *)(a1 + 8), *(_DWORD *)a1 == 514) ? (v13 = v12 == 0) : (v13 = 1),
        v13
     || ((v14.n64_u64[0] = CGPDFNodeGetBounds(*(__n64 **)(a1 + 8)).n64_u64[0], v14.n64_f64[0] != INFINITY)
       ? (BOOL v18 = v15.n64_f64[0] == INFINITY)
       : (BOOL v18 = 1),
         v18)))
  {
    v26.origin.double x = v5.n64_f64[0];
    v26.origin.double y = v6;
    v26.size.double width = v8;
    v26.size.double height = v10;
    v5.n64_u64[0] = (unint64_t)CGRectInset(v26, -a2, -a2);
    return v5.n64_f64[0];
  }
  v5.n64_u64[0] = (unint64_t)CGRectInset(*(CGRect *)v14.n64_u64, -a2, -a2);
  if ((*(unsigned char *)(v12 + 1) & 2) != 0)
  {
    uint64_t v20 = *(unsigned int *)(v12 + 44);
    if (v20)
    {
      uint64_t v21 = 0;
      unsigned int v22 = 0;
      while (1)
      {
        uint64_t v23 = v22;
        unsigned int v22 = *(__n64 **)(*(void *)(v12 + 56) + 8 * v21);
        if (v22 == (__n64 *)a1) {
          break;
        }
        if (v20 == ++v21)
        {
          LODWORD(v21) = *(_DWORD *)(v12 + 44);
          break;
        }
      }
      if (v23) {
        CGPDFNodeGetBounds(v23);
      }
      goto LABEL_27;
    }
  }
  else
  {
    LODWORD(v20) = 0;
  }
  LODWORD(v21) = 0;
LABEL_27:
  unsigned int v24 = v21 + 1;
  if ((int)v21 + 1 < v20)
  {
    if ((*(unsigned char *)(v12 + 1) & 2) != 0 && *(_DWORD *)(v12 + 44) > v24) {
      uint64_t v25 = *(__n64 **)(*(void *)(v12 + 56) + 8 * v24);
    }
    else {
      uint64_t v25 = 0;
    }
    CGPDFNodeGetBounds(v25);
  }
  return v5.n64_f64[0];
}

unint64_t CGPDFNodeGetChildIndexAtX(__n64 *a1, double a2)
{
  if (!a1) {
    return 0;
  }
  v4.n64_u64[0] = CGPDFNodeGetBounds(a1).n64_u64[0];
  double v5 = v4.n64_f64[0];
  double v7 = v6;
  if ((a1->n64_u8[1] & 2) == 0)
  {
    uint64_t v8 = 0;
LABEL_17:
    double v15 = v4.n64_f64[0];
LABEL_18:
    if ((v7 + v5 + v15) * 0.5 >= a2) {
      return v8;
    }
    else {
      return (v8 + 1);
    }
  }
  uint64_t v8 = a1[5].n64_u32[1];
  if (!v8) {
    goto LABEL_17;
  }
  unint64_t v9 = 0;
  double v10 = v4.n64_f64[0];
  while (1)
  {
    double v11 = (a1->n64_u8[1] & 2) != 0 && v9 < a1[5].n64_u32[1] ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v9) : 0;
    v12.n64_u64[0] = CGPDFNodeGetBounds(v11).n64_u64[0];
    double v14 = v12.n64_f64[0] + v13;
    double v15 = v10 <= v14 ? v10 : v14;
    if ((v12.n64_f64[0] + v15) * 0.5 > a2) {
      break;
    }
    ++v9;
    double v10 = v14;
    if (v8 == v9)
    {
      double v15 = v14;
      goto LABEL_18;
    }
  }
  if (v9 == v8) {
    goto LABEL_18;
  }
  return v9;
}

uint64_t CGPDFNodeGetNodeContainingPoint(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  char v8 = 0;
  uint64_t v7 = 0;
  return CGPDFNodeGetBestNodeContainingPoint(a1, a2, a3, &v7, &v8, a4, a5, a6);
}

uint64_t CGPDFNodeGetBestNodeContainingPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned char *a5, double a6, double a7, double a8)
{
  *a5 = 0;
  if (!a1 || (CGPDFNodeIsUsedGraphic(a1) & 1) != 0) {
    return 0;
  }
  int v16 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 513) {
    int v17 = 1;
  }
  else {
    int v17 = (*(_DWORD *)a1 >> 8) & 1;
  }
  if ((v16 & 0x100) != 0 || v16 == 516 || v16 == 513) {
    *a4 = a1;
  }
  if (!CGPDFNodeIsDirectlyHitByPoint(a1, a6, a7, a8)) {
    return 0;
  }
  int v18 = 1;
  if (a2 >= 2 && (a2 - 514) >= 2) {
    int v18 = a2 == 1537;
  }
  int v19 = v17 & a3;
  if (v16 == a2) {
    int v19 = 1;
  }
  if (a2) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (v16 == 1538 || (v20 ? (BOOL v21 = a2 == 0) : (BOOL v21 = 1), v21))
  {
    if (((v16 == 516) & ~v18) != 0 || v16 == 513)
    {
LABEL_73:
      if (!v20) {
        return 0;
      }
LABEL_80:
      *a5 = CGPDFNodeIsDirectlyHitByPoint(a1, a6, a7, 0.0);
      return a1;
    }
  }
  else if (v16 != 517 || (a3 & 1) == 0)
  {
    goto LABEL_73;
  }
  char v50 = v20;
  if ((*(unsigned char *)(a1 + 1) & 2) != 0)
  {
    uint64_t v22 = *(unsigned int *)(a1 + 44);
    if (v22)
    {
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v51 = *(unsigned int *)(a1 + 44);
      unsigned int v52 = a3;
      while (1)
      {
        if ((*(unsigned char *)(a1 + 1) & 2) != 0 && v23 < *(unsigned int *)(a1 + 44)) {
          uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8 * v23);
        }
        else {
          uint64_t v25 = 0;
        }
        v60[0] = 0;
        unsigned int v59 = (__n64 *)*a4;
        uint64_t BestNodeContainingPoint = CGPDFNodeGetBestNodeContainingPoint(v25, a2, a3, &v59, v60, a6, a7, a8);
        if (!BestNodeContainingPoint) {
          goto LABEL_71;
        }
        uint64_t v27 = BestNodeContainingPoint;
        if (!v24)
        {
          double v30 = v59;
          goto LABEL_70;
        }
        uint64_t v28 = (__n64 *)*a4;
        if (*a4) {
          unsigned __int32 v29 = v28->n64_u32[0];
        }
        else {
          unsigned __int32 v29 = 0;
        }
        double v30 = v59;
        if (v59) {
          unsigned __int32 v31 = v59->n64_u32[0];
        }
        else {
          unsigned __int32 v31 = 0;
        }
        v53.n64_u64[0] = CGPDFNodeGetBounds(v28).n64_u64[0];
        CGFloat v54 = v32;
        CGFloat v55 = v33;
        CGFloat v56 = v34;
        v35.n64_u64[0] = CGPDFNodeGetBounds(v30).n64_u64[0];
        CGFloat v37 = v36;
        CGFloat v39 = v38;
        CGFloat v41 = v40;
        double Rotation = CGPDFNodeGetRotation(*a4);
        double v43 = CGPDFNodeGetRotation((uint64_t)v30);
        if (*a4 && v29 != 516 && v31 == 516)
        {
          __double2 v44 = __sincos_stret(v43 - Rotation);
          v58.a = v44.__cosval;
          v58.b = v44.__sinval;
          v58.c = -v44.__sinval;
          v58.d = v44.__cosval;
          v58.tdouble x = 0.0;
          v58.tdouble y = 0.0;
          v61.origin.double x = v35.n64_f64[0];
          v61.origin.double y = v37;
          v61.size.double width = v39;
          v61.size.double height = v41;
          CGRect v65 = CGRectApplyAffineTransform(v61, &v58);
          v62.origin.double x = v53.n64_f64[0];
          v62.origin.double y = v54;
          v62.size.double width = v55;
          v62.size.double height = v56;
          if (CGRectContainsRect(v62, v65))
          {
            a3 = v52;
            uint64_t v22 = v51;
            goto LABEL_70;
          }
        }
        else if (v30)
        {
          if (v31 != 516 && v29 == 516)
          {
            __double2 v45 = __sincos_stret(Rotation - v43);
            v57.a = v45.__cosval;
            v57.b = v45.__sinval;
            v57.c = -v45.__sinval;
            v57.d = v45.__cosval;
            v57.tdouble x = 0.0;
            v57.tdouble y = 0.0;
            v63.origin.double x = v53.n64_f64[0];
            v63.origin.double y = v54;
            v63.size.double width = v55;
            v63.size.double height = v56;
            CGRect v66 = CGRectApplyAffineTransform(v63, &v57);
            v64.origin.double x = v35.n64_f64[0];
            v64.origin.double y = v37;
            v64.size.double width = v39;
            v64.size.double height = v41;
            if (CGRectContainsRect(v64, v66))
            {
              a3 = v52;
              uint64_t v22 = v51;
              goto LABEL_71;
            }
          }
        }
        if (v60[0])
        {
          a3 = v52;
          uint64_t v22 = v51;
          if (*a5)
          {
LABEL_59:
            uint64_t v46 = v27;
            while ((*(unsigned char *)(v46 + 1) & 3) == 0)
            {
              uint64_t v46 = *(void *)(v46 + 8);
              if (!v46) {
                goto LABEL_64;
              }
            }
            uint64_t v46 = *(void *)(v46 + 96);
LABEL_64:
            uint64_t v47 = v24;
            while ((*(unsigned char *)(v47 + 1) & 3) == 0)
            {
              uint64_t v47 = *(void *)(v47 + 8);
              if (!v47) {
                goto LABEL_69;
              }
            }
            uint64_t v47 = *(void *)(v47 + 96);
LABEL_69:
            if (v46 < v47) {
              goto LABEL_71;
            }
          }
LABEL_70:
          *a4 = (uint64_t)v30;
          *a5 = v60[0];
          uint64_t v24 = v27;
          goto LABEL_71;
        }
        a3 = v52;
        uint64_t v22 = v51;
        if (!*a5) {
          goto LABEL_59;
        }
LABEL_71:
        if (++v23 == v22) {
          goto LABEL_77;
        }
      }
    }
  }
  uint64_t v24 = 0;
LABEL_77:
  char v49 = v50;
  if (v24) {
    char v49 = 0;
  }
  if (v49) {
    goto LABEL_80;
  }
  return v24;
}

uint64_t CGPDFNodeIsDirectlyHitByPoint(uint64_t result, double a2, double a3, double a4)
{
  if (result)
  {
    uint64_t v7 = (__n64 *)result;
    double Rotation = CGPDFNodeGetRotation(result);
    if (Rotation == 0.0)
    {
      double v11 = a3;
      double v10 = a2;
    }
    else
    {
      __double2 v9 = __sincos_stret(Rotation);
      double v10 = a3 * v9.__sinval + v9.__cosval * a2 + 0.0;
      double v11 = a3 * v9.__cosval - v9.__sinval * a2 + 0.0;
    }
    v26.origin.double x = CGPDFNodeGetHitTestRect((uint64_t)v7, a4);
    v25.double x = v10;
    v25.double y = v11;
    uint64_t result = CGRectContainsPoint(v26, v25);
    if (result)
    {
      unsigned __int32 v12 = v7->n64_u32[0];
      if (v7->n64_u32[0] == 1538 || v12 == 517)
      {
        if ((v12 & 0x200) == 0) {
          return 0;
        }
        uint64_t v16 = v7[5].n64_u32[1];
        if (!v16) {
          return 0;
        }
        unint64_t v17 = 0;
        uint64_t v18 = v16 - 1;
        do
        {
          if ((v7->n64_u8[1] & 2) != 0 && v17 < v7[5].n64_u32[1]) {
            uint64_t v19 = *(void *)(v7[7].n64_u64[0] + 8 * v17);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t result = CGPDFNodeIsDirectlyHitByPoint(v19, a2, a3, a4);
          if (result) {
            break;
          }
        }
        while (v18 != v17++);
      }
      else
      {
        if (v12 == 516)
        {
          unsigned int v13 = v7[5].n64_u32[1];
          if (!v13) {
            return 0;
          }
          unsigned int ChildIndexAtX = CGPDFNodeGetChildIndexAtX(v7, v10);
          if (ChildIndexAtX <= 1)
          {
            double v15 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] ? *(__n64 **)v7[7].n64_u64[0] : 0;
            CGPDFNodeGetBounds(v15);
            if (v11 > v21 + v22 + a4) {
              return 0;
            }
          }
          if (ChildIndexAtX >= v13)
          {
            unint64_t v23 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] > v13 - 1
                ? *(__n64 **)(v7[7].n64_u64[0] + 8 * (v13 - 1))
                : 0;
            CGPDFNodeGetBounds(v23);
            if (v11 < v24 - a4) {
              return 0;
            }
          }
        }
        return 1;
      }
    }
  }
  return result;
}

__n64 *CGPDFNodeGetNodeAfterPoint(__n64 *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  BOOL v10 = 0;
  uint64_t result = CGPDFNodeGetClosestNodeToPoint(a1, a2, a3, &v10, a4, a5, a6);
  if (!v10)
  {
    return (__n64 *)CGPDFNodeGetNodeAfter(a1, result, a2, a3);
  }
  return result;
}

__n64 *CGPDFNodeGetClosestNodeToPoint(__n64 *a1, unsigned int a2, unsigned int a3, BOOL *a4, double a5, double a6, double a7)
{
  FirstDescendantOfType = a1;
  *a4 = 1;
  if (a1)
  {
    if (a2 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a2;
    }
    if (a2) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = 1;
    }
    unsigned __int32 v14 = a1->n64_u32[0];
    if (v12 != 1538 && v14 == v12
      || v13 && (v14 != 513 ? (BOOL v15 = (a1->n64_u32[0] & 0x100) == 0) : (BOOL v15 = 0), !v15))
    {
      *a4 = CGPDFNodeIsAfterPoint((uint64_t)a1, a5, a6, a7);
      return FirstDescendantOfType;
    }
    if (v12 == 517) {
      return 0;
    }
    ClosestAreaDescendantToPoint = a1;
    do
    {
      if (ClosestAreaDescendantToPoint->n64_u32[0] == 516)
      {
        if ((v12 - 514) >= 2 && v12 != 1 && v12 != 1537) {
          return 0;
        }
        goto LABEL_66;
      }
      ClosestAreaDescendantToPoint = (__n64 *)ClosestAreaDescendantToPoint[1].n64_u64[0];
    }
    while (ClosestAreaDescendantToPoint);
    BOOL v63 = 0;
    uint64_t v61 = 0;
    double v62 = 0.0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    ClosestAreaToPoint = CGPDFNodeGetClosestAreaToPoint(a1, v12, v13, a4, &v63, &v62, (double *)&v61, (double *)&v60, a5, a6, a7, (double *)&v59);
    if (!ClosestAreaToPoint) {
      return 0;
    }
    ClosestAreaDescendantToPoint = ClosestAreaToPoint;
    if (ClosestAreaToPoint != FirstDescendantOfType && !v63)
    {
      unsigned int v18 = (v12 >> 8) & 1;
      if (v12 == 513) {
        unsigned int v18 = 1;
      }
      if (v18) {
        uint64_t v19 = v12;
      }
      else {
        uint64_t v19 = 516;
      }
      int v20 = ClosestAreaToPoint;
      while (1)
      {
        do
        {
          ClosestAreaDescendantToPoint = v20;
          NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(FirstDescendantOfType, v20, v19, v13);
          if (!NodeBefore) {
            goto LABEL_66;
          }
          int v20 = NodeBefore;
          if (!CGPDFNodeIsStrictlyAfterPoint(NodeBefore, a5, a6, a7)) {
            goto LABEL_66;
          }
          double v22 = v20;
          if (v20->n64_u32[0] == 516)
          {
            double v22 = v20;
            if (v20[5].n64_u32[1]) {
              double v22 = *(__n64 **)v20[7].n64_u64[0];
            }
          }
          v23.n64_u64[0] = CGPDFNodeGetBounds(v22).n64_u64[0];
          double v26 = v24 + v25;
          double Rotation = CGPDFNodeGetRotation((uint64_t)v22);
          if (Rotation != 0.0)
          {
            __double2 v28 = __sincos_stret(Rotation);
            double v29 = v26 * v28.__cosval + v28.__sinval * v23.n64_f64[0];
            v23.n64_f64[0] = v28.__cosval * v23.n64_f64[0] - v28.__sinval * v26 + 0.0;
            double v26 = v29 + 0.0;
          }
          double v30 = ClosestAreaDescendantToPoint;
          if (ClosestAreaDescendantToPoint->n64_u32[0] == 516)
          {
            unsigned __int32 v31 = ClosestAreaDescendantToPoint[5].n64_u32[1];
            double v30 = ClosestAreaDescendantToPoint;
            if (v31) {
              double v30 = *(__n64 **)(ClosestAreaDescendantToPoint[7].n64_u64[0] + 8 * (v31 - 1));
            }
          }
          v32.n64_u64[0] = CGPDFNodeGetBounds(v30).n64_u64[0];
          double v34 = v33;
          double v36 = v32.n64_f64[0] + v35;
          double v37 = CGPDFNodeGetRotation((uint64_t)v30);
          if (v37 != 0.0)
          {
            __double2 v38 = __sincos_stret(v37);
            double v39 = v34 * v38.__cosval + v38.__sinval * v36;
            double v36 = v38.__cosval * v36 - v38.__sinval * v34 + 0.0;
            double v34 = v39 + 0.0;
          }
          if (!CGPDFNodeIsStrictlyAfterPoint(ClosestAreaDescendantToPoint, v23.n64_f64[0], v26, a7)) {
            goto LABEL_66;
          }
          double v40 = CGPDFNodeGetRotation((uint64_t)v20);
          if (v40 != 0.0)
          {
            __double2 v41 = __sincos_stret(v40);
            double v42 = v34 * v41.__cosval - v41.__sinval * v36;
            double v36 = v34 * v41.__sinval + v41.__cosval * v36 + 0.0;
            double v34 = v42 + 0.0;
          }
          v64.origin.double x = CGPDFNodeGetBounds(v20).n64_f64[0];
          CGRect v65 = CGRectInset(v64, -a7, -a7);
          double v43 = v65.origin.y - v34;
        }
        while (v43 > 0.0);
        if (v65.size.height + v43 < 0.0) {
          break;
        }
        unsigned __int32 v44 = v20->n64_u32[0];
        if (v20->n64_i32[0] > 512)
        {
          if (v44 - 513 < 2) {
            goto LABEL_52;
          }
          if (v44 != 516) {
            break;
          }
          unsigned int v45 = v20[5].n64_u32[1];
          if (!v45 || CGPDFNodeGetChildIndexAtX(v20, v36) < v45) {
            break;
          }
          uint64_t v46 = (v20->n64_u8[1] & 2) != 0 && v20[5].n64_u32[1] > v45 - 1
              ? *(__n64 **)(v20[7].n64_u64[0] + 8 * (v45 - 1))
              : 0;
          CGPDFNodeGetBounds(v46);
          if (v34 >= v47 - a7) {
            break;
          }
        }
        else
        {
          if (v44 - 257 >= 2 && v44 != 1) {
            break;
          }
LABEL_52:
          if (v65.origin.x + v65.size.width >= v36) {
            break;
          }
        }
      }
    }
LABEL_66:
    if (ClosestAreaDescendantToPoint->n64_u32[0] != 516) {
      return ClosestAreaDescendantToPoint;
    }
    if (v12 == 1538)
    {
      for (int i = 516; i != 1538; int i = ClosestAreaDescendantToPoint->n64_u32[0])
      {
        ClosestAreaDescendantToPoint = (__n64 *)ClosestAreaDescendantToPoint[1].n64_u64[0];
        if (!ClosestAreaDescendantToPoint) {
          break;
        }
      }
      *a4 = CGPDFNodeIsAfterPoint((uint64_t)ClosestAreaDescendantToPoint, a5, a6, a7);
    }
    else
    {
      ClosestAreaDescendantToPoint = (__n64 *)CGPDFNodeGetClosestAreaDescendantToPoint(ClosestAreaDescendantToPoint, v12, v13, a4, a5, a6, a7);
    }
    if (!ClosestAreaDescendantToPoint) {
      return 0;
    }
    if (ClosestAreaDescendantToPoint == FirstDescendantOfType) {
      return FirstDescendantOfType;
    }
    char v49 = ClosestAreaDescendantToPoint;
    do
      char v49 = (__n64 *)v49[1].n64_u64[0];
    while (v49 != FirstDescendantOfType && v49 != 0);
    if (v49) {
      return ClosestAreaDescendantToPoint;
    }
    uint64_t TextRange = CGPDFNodeGetTextRange((uint64_t)FirstDescendantOfType);
    uint64_t v54 = v53;
    uint64_t v55 = CGPDFNodeGetTextRange((uint64_t)ClosestAreaDescendantToPoint);
    if (*a4) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = v56;
    }
    if (v57 + v55 - TextRange <= TextRange + v54 - (v57 + v55))
    {
      FirstDescendantOfType = (__n64 *)CGPDFNodeGetFirstDescendantOfType((int *)FirstDescendantOfType, v12, 0);
      char v58 = 1;
    }
    else
    {
      FirstDescendantOfType = (__n64 *)CGPDFNodeGetLastDescendantOfType(FirstDescendantOfType, v12, 0);
      char v58 = 0;
    }
    *a4 = v58;
  }
  return FirstDescendantOfType;
}

uint64_t CGPDFNodeGetNodeAfter(_DWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  uint64_t v6 = (uint64_t)a2;
  if (a1 == a2) {
    return result;
  }
  while (1)
  {
    if (v6)
    {
      __double2 v9 = *(_DWORD **)(v6 + 8);
      if (v9 && (*((unsigned char *)v9 + 1) & 2) != 0) {
        unsigned int v10 = v9[11];
      }
      else {
        unsigned int v10 = 0;
      }
      if ((_DWORD *)v6 != a1)
      {
        uint64_t v13 = v6;
        do
          uint64_t v13 = *(void *)(v13 + 8);
        while ((_DWORD *)v13 != a1 && v13 != 0);
        if (!v13) {
          return 0;
        }
      }
      if (v10)
      {
        unint64_t v15 = 0;
        while (1)
        {
          uint64_t v16 = v9 && (*((unsigned char *)v9 + 1) & 2) != 0 && v15 < v9[11]
              ? *(void *)(*((void *)v9 + 7) + 8 * v15)
              : 0;
          if (v16 == v6) {
            break;
          }
          if (v10 == ++v15)
          {
            LODWORD(v15) = v10;
            break;
          }
        }
      }
      else
      {
        LODWORD(v15) = 0;
      }
      unsigned int v12 = v15 + 1;
    }
    else
    {
      int v11 = *a1;
      uint64_t v6 = (uint64_t)a1;
      if ((*a1 & 0x200) == 0) {
        goto LABEL_41;
      }
      unsigned int v12 = 0;
      unsigned int v10 = a1[11];
      __double2 v9 = a1;
    }
    if (v12 < v10) {
      break;
    }
LABEL_39:
    if (v9)
    {
      int v11 = *v9;
      uint64_t v6 = (uint64_t)v9;
LABEL_41:
      if (a3) {
        goto LABEL_44;
      }
      goto LABEL_49;
    }
    uint64_t v6 = 0;
    int v11 = 0;
    if (a3)
    {
LABEL_44:
      if (v11 != a3 && (!v6 || !a4 || *(_DWORD *)v6 != 513 && (*(_DWORD *)v6 & 0x100) == 0)) {
        goto LABEL_50;
      }
    }
LABEL_49:
    if (!CGPDFNodeIsUsedGraphic(v6)) {
      return v6;
    }
LABEL_50:
    if ((_DWORD *)v6 == a1) {
      return 0;
    }
  }
  unint64_t v17 = v12;
  uint64_t v18 = v10;
  while (1)
  {
    uint64_t v19 = v9 && (*((unsigned char *)v9 + 1) & 2) != 0 && v17 < v9[11]
        ? *(void *)(*((void *)v9 + 7) + 8 * v17)
        : 0;
    uint64_t result = CGPDFNodeGetNodeAfter(v19, 0, a3, a4);
    if (result) {
      return result;
    }
    if (v18 == ++v17) {
      goto LABEL_39;
    }
  }
}

uint64_t CGPDFNodeIsAfterPoint(uint64_t result, double a2, double a3, double a4)
{
  if (!result) {
    return result;
  }
  uint64_t v7 = (__n64 *)result;
  double v8 = CGPDFNodeTransformPoint(result, a2, a3);
  double v10 = v9;
  int v11 = v7;
  do
  {
    if (v11->n64_u32[0] == 516) {
      break;
    }
    int v11 = (__n64 *)v11[1].n64_u64[0];
  }
  while (v11);
  if (v11) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v7;
  }
  v66.origin.double x = CGPDFNodeGetBounds(v12).n64_f64[0];
  double x = v66.origin.x;
  double width = v66.size.width;
  double v15 = -a4;
  CGRect v67 = CGRectInset(v66, -a4, -a4);
  if (v67.origin.y - v10 > 0.0) {
    return 0;
  }
  if (v67.size.height + v67.origin.y - v10 < 0.0) {
    return 1;
  }
  unsigned __int32 v16 = v7->n64_u32[0];
  unsigned __int32 v17 = v12->n64_u32[0];
  if (v12->n64_u32[0] == 1538 || v17 == 517)
  {
    if ((v16 & 0x200) != 0)
    {
      uint64_t v20 = v7[5].n64_u32[1];
      if (v20)
      {
        unint64_t v21 = 0;
        uint64_t v22 = v20 - 1;
        do
        {
          if ((v7->n64_u8[1] & 2) != 0 && v21 < v7[5].n64_u32[1]) {
            uint64_t v23 = *(void *)(v7[7].n64_u64[0] + 8 * v21);
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t result = CGPDFNodeIsAfterPoint(v23, a2, a3, a4);
          if (result) {
            break;
          }
        }
        while (v22 != v21++);
        return result;
      }
    }
    return 0;
  }
  if (v17 != 516) {
    return x + width * 0.5 >= v8;
  }
  unsigned __int32 v18 = v12[5].n64_u32[1];
  if (!v18) {
    return 0;
  }
  uint64_t v19 = v12;
  while (v19->n64_u32[0] != 516)
  {
    uint64_t v19 = (__n64 *)v19[1].n64_u64[0];
    if (!v19) {
      goto LABEL_36;
    }
  }
  if (v19[13].n64_u8[0])
  {
    RotatedChildIndedouble x = CGPDFNodeGetRotatedChildIndex((uint64_t)v12, a2, a3);
    goto LABEL_37;
  }
LABEL_36:
  RotatedChildIndedouble x = CGPDFNodeGetChildIndexAtX(v12, a2);
LABEL_37:
  if (v16 == 516)
  {
    if (RotatedChildIndex >= v18)
    {
      if ((v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] > v18 - 1) {
        double v26 = *(__n64 **)(v7[7].n64_u64[0] + 8 * (v18 - 1));
      }
      else {
        double v26 = 0;
      }
      CGPDFNodeGetBounds(v26);
      BOOL v37 = a3 < v36 - a4;
      return !v37;
    }
    return 1;
  }
  if (RotatedChildIndex >= v18) {
    unsigned __int32 v27 = v18;
  }
  else {
    unsigned __int32 v27 = RotatedChildIndex;
  }
  BOOL v28 = v27 != 0;
  unsigned __int32 v29 = v27 - 1;
  if (v28) {
    unsigned int v30 = v29;
  }
  else {
    unsigned int v30 = 0;
  }
  unsigned __int32 v31 = v7;
  do
  {
    if (v31->n64_u32[0] == 515) {
      break;
    }
    unsigned __int32 v31 = (__n64 *)v31[1].n64_u64[0];
  }
  while (v31);
  ChildIndedouble x = CGPDFNodeGetChildIndex((uint64_t)v31);
  uint64_t result = 0;
  if (!v31 || ChildIndex < v30) {
    return result;
  }
  if (ChildIndex > v30) {
    return 1;
  }
  if (v16 == 515)
  {
    CGPDFNodeGetBounds(v31);
    double v35 = v34 + v33 * 0.5;
    return v35 <= a3;
  }
  if ((v31->n64_u8[1] & 2) == 0) {
    return 0;
  }
  unsigned __int32 v38 = v31[5].n64_u32[1];
  if (!v38) {
    return 0;
  }
  double v39 = v12;
  while (v39->n64_u32[0] != 516)
  {
    double v39 = (__n64 *)v39[1].n64_u64[0];
    if (!v39) {
      goto LABEL_70;
    }
  }
  if (v39[13].n64_u8[0])
  {
    unsigned __int32 ChildIndexAtY = CGPDFNodeGetRotatedChildIndex((uint64_t)v31, a2, a3);
    goto LABEL_71;
  }
LABEL_70:
  unsigned __int32 ChildIndexAtY = CGPDFNodeGetChildIndexAtY(v31, a3);
LABEL_71:
  if (ChildIndexAtY >= v38) {
    unsigned __int32 v41 = v38;
  }
  else {
    unsigned __int32 v41 = ChildIndexAtY;
  }
  BOOL v28 = v41 != 0;
  unsigned __int32 v42 = v41 - 1;
  if (v28) {
    unsigned int v43 = v42;
  }
  else {
    unsigned int v43 = 0;
  }
  unsigned __int32 v44 = v7;
  do
  {
    if (v44->n64_u32[0] == 1537) {
      break;
    }
    unsigned __int32 v44 = (__n64 *)v44[1].n64_u64[0];
  }
  while (v44);
  unsigned int v45 = CGPDFNodeGetChildIndex((uint64_t)v44);
  uint64_t result = 0;
  if (!v44 || v45 < v43) {
    return result;
  }
  if (v45 > v43) {
    return 1;
  }
  v68.origin.double x = CGPDFNodeGetBounds(v44).n64_f64[0];
  double y = v68.origin.y;
  double height = v68.size.height;
  CGRect v69 = CGRectInset(v68, v15, v15);
  if (v69.origin.y - a3 > 0.0) {
    return 0;
  }
  if (v69.size.height + v69.origin.y - a3 < 0.0) {
    return 1;
  }
  if (v16 == 1537)
  {
    double v35 = y + height * 0.5;
    return v35 <= a3;
  }
  if ((v44->n64_u8[1] & 2) == 0) {
    return 0;
  }
  unsigned int v48 = v44[5].n64_u32[1];
  if (!v48) {
    return 0;
  }
  while (v12->n64_u32[0] != 516)
  {
    unsigned int v12 = (__n64 *)v12[1].n64_u64[0];
    if (!v12) {
      goto LABEL_94;
    }
  }
  if (v12[13].n64_u8[0])
  {
    unsigned int RotatedTextLineIndexAtPoint = CGPDFNodeGetRotatedTextLineIndexAtPoint(v44, a2, a3);
    goto LABEL_95;
  }
LABEL_94:
  unsigned int RotatedTextLineIndexAtPoint = CGPDFNodeGetChildIndexAtY(v44, a3);
LABEL_95:
  if (RotatedTextLineIndexAtPoint >= v48) {
    unsigned int v50 = v48;
  }
  else {
    unsigned int v50 = RotatedTextLineIndexAtPoint;
  }
  BOOL v28 = v50 != 0;
  unsigned int v51 = v50 - 1;
  if (v28) {
    unsigned int v52 = v51;
  }
  else {
    unsigned int v52 = 0;
  }
  uint64_t v53 = v7;
  do
  {
    if (v53->n64_u32[0] == 514) {
      break;
    }
    uint64_t v53 = (__n64 *)v53[1].n64_u64[0];
  }
  while (v53);
  unsigned int v54 = CGPDFNodeGetChildIndex((uint64_t)v53);
  uint64_t result = 0;
  if (!v53 || v54 < v52) {
    return result;
  }
  if (v54 > v52) {
    return 1;
  }
  if (v16 == 514)
  {
    v55.n64_u64[0] = CGPDFNodeGetBounds(v53).n64_u64[0];
    double v57 = v56;
    uint64_t v58 = (uint64_t)v53;
    goto LABEL_109;
  }
  if ((v53->n64_u8[1] & 2) == 0) {
    return 0;
  }
  uint64_t result = 0;
  unsigned __int32 v59 = v53[5].n64_u32[1];
  if (v59 && v16 == 1)
  {
    Rotatedunsigned int ChildIndexAtX = CGPDFNodeGetRotatedChildIndexAtX(v53, a2, a3);
    unsigned __int32 v61 = RotatedChildIndexAtX >= v59 ? v59 : RotatedChildIndexAtX;
    BOOL v28 = v61 != 0;
    unsigned __int32 v62 = v61 - 1;
    unsigned int v63 = v28 ? v62 : 0;
    unsigned int v64 = CGPDFNodeGetChildIndex((uint64_t)v7);
    uint64_t result = 0;
    if (v64 >= v63)
    {
      if (v64 > v63) {
        return 1;
      }
      v55.n64_u64[0] = CGPDFNodeGetBounds(v7).n64_u64[0];
      double v57 = v65;
      uint64_t v58 = (uint64_t)v7;
LABEL_109:
      BOOL v37 = v55.n64_f64[0] + v57 * 0.5 < CGPDFNodeTransformPoint(v58, a2, a3);
      return !v37;
    }
  }
  return result;
}

__n64 *CGPDFNodeGetClosestAreaToPoint(__n64 *a1, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5, double *a6, double *a7, double *a8, double a9, CGFloat a10, double a11, double *a12)
{
  *a4 = 1;
  *a5 = 0;
  *a6 = 0.0;
  *a7 = 0.0;
  *a8 = 0.0;
  *a12 = 0.0;
  if (!a1) {
    return 0;
  }
  double v15 = a5;
  unsigned __int32 v22 = a1->n64_u32[0];
  if (a1->n64_u32[0] == 516)
  {
    uint64_t v23 = 0;
    if (a2 == 513 || (a2 & 0x100) != 0) {
      return v23;
    }
    v138.origin.double x = CGPDFNodeGetBounds(a1).n64_f64[0];
    CGRect v139 = CGRectInset(v138, -a11, -a11);
    double x = v139.origin.x;
    double v25 = v139.origin.y - a10;
    if (v139.origin.y - a10 > 0.0)
    {
      *a7 = -v25;
      *a4 = 0;
      return a1;
    }
    double v71 = v139.size.height + v25;
    if (v71 < 0.0)
    {
      double v72 = -v71;
LABEL_169:
      *a7 = v72;
      return a1;
    }
    double width = v139.size.width;
    int v124 = a8;
    if ((a1->n64_u8[1] & 2) != 0) {
      unsigned __int32 v74 = a1[5].n64_u32[1];
    }
    else {
      unsigned __int32 v74 = 0;
    }
    unsigned int ChildIndexAtX = CGPDFNodeGetChildIndexAtX(a1, a9);
    if (ChildIndexAtX >= v74) {
      unsigned int v76 = v74;
    }
    else {
      unsigned int v76 = ChildIndexAtX;
    }
    unsigned __int32 v77 = v76 - 1;
    if (!v76) {
      unsigned __int32 v77 = 0;
    }
    if (!v74)
    {
      double v105 = x - a9;
      if (width + x - a9 >= -(x - a9)) {
        double v105 = width + x - a9;
      }
      *a6 = v105;
      return a1;
    }
    unsigned __int32 v126 = v77;
    unsigned int v128 = v76;
    unsigned int v78 = 0;
    char v79 = 0;
    do
    {
      unint64_t v80 = v78;
      while (1)
      {
        long long v81 = (a1->n64_u8[1] & 2) != 0 && v80 < a1[5].n64_u32[1] ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v80) : 0;
        v148.origin.double x = CGPDFNodeGetBounds(v81).n64_f64[0];
        CGRect v149 = CGRectInset(v148, -a11, -a11);
        double v82 = v149.origin.x;
        BOOL v83 = v149.origin.y > a10 || a10 > v149.origin.y + v149.size.height;
        if (!v83 && v81 != 0 && (v81->n64_u8[1] & 2) != 0)
        {
          uint64_t v85 = v81[5].n64_u32[1];
          if (v85) {
            break;
          }
        }
LABEL_125:
        if (++v80 == v74)
        {
          if ((v79 & 1) == 0)
          {
            double v96 = x - a9;
            if (width + x - a9 >= -(x - a9)) {
              double v96 = width + x - a9;
            }
            *a6 = v96;
            if ((a1->n64_u8[1] & 2) != 0 && a1[5].n64_u32[1] > v126)
            {
              uint64_t v97 = *(__n64 **)(a1[7].n64_u64[0] + 8 * v126);
              if (v97)
              {
                if ((v97->n64_u8[1] & 2) != 0)
                {
                  unsigned __int32 v98 = v97[5].n64_u32[1];
                  if (v98)
                  {
                    unsigned __int32 ChildIndexAtY = CGPDFNodeGetChildIndexAtY(v97, a10);
                    if (ChildIndexAtY >= v98) {
                      unsigned __int32 v100 = v98;
                    }
                    else {
                      unsigned __int32 v100 = ChildIndexAtY;
                    }
                    BOOL v101 = v100 != 0;
                    unsigned __int32 v102 = v100 - 1;
                    if (!v101) {
                      unsigned __int32 v102 = 0;
                    }
                    if ((v97->n64_u8[1] & 2) != 0)
                    {
                      long long v104 = a12;
                      if (v97[5].n64_u32[1] <= v102) {
                        long long v103 = 0;
                      }
                      else {
                        long long v103 = *(__n64 **)(v97[7].n64_u64[0] + 8 * v102);
                      }
                    }
                    else
                    {
                      long long v103 = 0;
                      long long v104 = a12;
                    }
                    v152.origin.double x = CGPDFNodeGetBounds(v103).n64_f64[0];
                    CGRect v153 = CGRectInset(v152, -a11, -a11);
                    double v108 = v153.origin.x - a9;
                    double v109 = v153.origin.y - a10;
                    if (v108 < 0.0)
                    {
                      double v108 = v153.size.width + v108;
                      if (v108 > 0.0) {
                        double v108 = 0.0;
                      }
                    }
                    if (v109 < 0.0)
                    {
                      double v109 = v153.size.height + v109;
                      if (v109 > 0.0) {
                        double v109 = 0.0;
                      }
                    }
                    *int v124 = v108;
                    *long long v104 = -v109;
                  }
                }
              }
            }
          }
          goto LABEL_182;
        }
      }
      double v86 = v149.size.width;
      unint64_t v87 = 0;
      while (1)
      {
        uint64_t v88 = (v81->n64_u8[1] & 2) != 0 && v87 < v81[5].n64_u32[1] ? *(__n64 **)(v81[7].n64_u64[0] + 8 * v87) : 0;
        v150.origin.double x = CGPDFNodeGetBounds(v88).n64_f64[0];
        CGRect v151 = CGRectInset(v150, -a11, -a11);
        double v89 = v151.origin.y + v151.size.height;
        if (v151.origin.y <= a10 && a10 <= v89) {
          break;
        }
        if (v85 == ++v87) {
          goto LABEL_125;
        }
      }
      double v91 = v82 - a9;
      if (v82 - a9 < 0.0)
      {
        double v91 = v86 + v91;
        if (v91 > 0.0) {
          double v91 = 0.0;
        }
      }
      double v92 = v151.origin.x - a9;
      if (v92 < 0.0)
      {
        double v92 = v151.size.width + v92;
        if (v92 > 0.0) {
          double v92 = 0.0;
        }
      }
      if ((v79 & 1) == 0 || (double v93 = fabs(v91), v94 = fabs(*a6), v93 < v94) || v93 == v94 && fabs(v92) < fabs(*v124))
      {
        *a6 = v91;
        *int v124 = v92;
      }
      unsigned int v78 = v80 + 1;
      char v79 = 1;
    }
    while (v91 < 0.0 && v78 != v74);
LABEL_182:
    BOOL v110 = 1;
    BOOL *v15 = 1;
    if (v128 <= 1)
    {
      if ((a1->n64_u8[1] & 2) != 0 && a1[5].n64_u32[1]) {
        long long v111 = *(__n64 **)a1[7].n64_u64[0];
      }
      else {
        long long v111 = 0;
      }
      CGPDFNodeGetBounds(v111);
      if (a10 > v112 + v113 + a11)
      {
LABEL_196:
        BOOL *v15 = 0;
        return a1;
      }
      BOOL v110 = *v15;
    }
    if (!v110 || v126 + 1 != v74) {
      return a1;
    }
    uint64_t v114 = (a1->n64_u8[1] & 2) != 0 && a1[5].n64_u32[1] > v126 ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v126) : 0;
    CGPDFNodeGetBounds(v114);
    if (a10 >= v115 - a11) {
      return a1;
    }
    goto LABEL_196;
  }
  if (v22 == 513 || (a1->n64_u32[0] & 0x100) != 0)
  {
    BOOL v28 = v22 != a2 && a3 == 0;
    if (!v28 && (CGPDFNodeIsUsedGraphic((uint64_t)a1) & 1) == 0)
    {
      v140.origin.double x = CGPDFNodeGetBounds(a1).n64_f64[0];
      double v29 = v140.origin.x;
      double v30 = v140.size.width;
      CGRect v141 = CGRectInset(v140, -a11, -a11);
      double v31 = v141.origin.x - a9;
      double v32 = v141.origin.y - a10;
      if (v31 < 0.0)
      {
        double v31 = v141.size.width + v31;
        if (v31 > 0.0) {
          double v31 = 0.0;
        }
      }
      if (v32 >= 0.0 || (double v32 = v141.size.height + v32, v33 = 0.0, v32 <= 0.0))
      {
        if (v32 < 0.0)
        {
          BOOL v34 = 1;
LABEL_166:
          *a4 = v34;
          BOOL v106 = v31 == 0.0;
          if (v32 != 0.0) {
            BOOL v106 = 0;
          }
          BOOL *v15 = v106;
          *a6 = v31;
          double v72 = -v32;
          goto LABEL_169;
        }
        if (v32 != 0.0)
        {
          BOOL v34 = 0;
          goto LABEL_166;
        }
        double v33 = v32;
      }
      BOOL v34 = a9 <= v29 + v30 * 0.5;
      double v32 = v33;
      goto LABEL_166;
    }
    return 0;
  }
  if (v22 != 1538 && v22 != 517) {
    return 0;
  }
  if ((v22 & 0x400) != 0 && (double v35 = (_DWORD *)a1[13].n64_u64[0]) != 0 && *v35 == 3)
  {
    v142.origin.double x = CGPDFNodeGetBounds(a1).n64_f64[0];
    v136.double x = a9;
    v136.double y = a10;
    BOOL v125 = CGRectContainsPoint(v142, v136);
    unsigned __int32 v22 = a1->n64_u32[0];
  }
  else
  {
    BOOL v125 = 0;
  }
  if ((v22 & 0x200) == 0) {
    return 0;
  }
  uint64_t v127 = a1[5].n64_u32[1];
  if (!v127) {
    return 0;
  }
  int v123 = a8;
  unint64_t v36 = 0;
  BOOL v37 = 0;
  uint64_t v23 = 0;
  int v116 = v15;
  do
  {
    unsigned __int32 v38 = v23;
    if ((a1->n64_u8[1] & 2) != 0 && v36 < a1[5].n64_u32[1]) {
      double v39 = *(__n64 **)(a1[7].n64_u64[0] + 8 * v36);
    }
    else {
      double v39 = 0;
    }
    v135[0] = 0;
    double v133 = 0.0;
    double v134 = 0.0;
    double v131 = 0.0;
    double v132 = 0.0;
    if (v125 && !v37)
    {
      v143.origin.double x = CGPDFNodeGetBounds(v39).n64_f64[0];
      v137.double x = a9;
      v137.double y = a10;
      BOOL v40 = CGRectContainsPoint(v143, v137);
      BOOL v37 = 0;
      if (!v40) {
        goto LABEL_81;
      }
    }
    if (!v39) {
      goto LABEL_81;
    }
    ClosestAreaToPoint = (__n64 *)CGPDFNodeGetClosestAreaToPoint(v39, a2, a3, (char *)v135 + 1, v135, &v134, &v133, &v132, a9, a10, a11, &v131);
    BOOL v37 = v125;
    if (!ClosestAreaToPoint) {
      goto LABEL_81;
    }
    uint64_t v23 = ClosestAreaToPoint;
    double v42 = v133;
    if (!v38) {
      goto LABEL_43;
    }
    double v43 = fabs(v133);
    double v44 = fabs(*a7);
    if (v43 < v44) {
      goto LABEL_43;
    }
    if (v43 != v44) {
      goto LABEL_80;
    }
    unsigned __int32 v45 = v38->n64_u32[0];
    unsigned __int32 v122 = ClosestAreaToPoint->n64_u32[0];
    v118.n64_u64[0] = CGPDFNodeGetBounds(v38).n64_u64[0];
    CGFloat v119 = v46;
    CGFloat v120 = v47;
    CGFloat v121 = v48;
    v49.n64_u64[0] = CGPDFNodeGetBounds(v23).n64_u64[0];
    CGFloat v51 = v50;
    CGFloat v53 = v52;
    CGFloat rect = v54;
    double Rotation = CGPDFNodeGetRotation((uint64_t)v38);
    double v56 = CGPDFNodeGetRotation((uint64_t)v23);
    if (v45 != 516)
    {
      BOOL v37 = v122 == 516;
      int v57 = 1;
      if (LOBYTE(v135[0]))
      {
        double v15 = v116;
        if (v122 == 516)
        {
          __double2 v58 = __sincos_stret(v56 - Rotation);
          v130.a = v58.__cosval;
          v130.b = v58.__sinval;
          v130.c = -v58.__sinval;
          v130.d = v58.__cosval;
          v130.tdouble x = 0.0;
          v130.tdouble y = 0.0;
          v144.origin.double x = v49.n64_f64[0];
          v144.origin.double y = v51;
          v144.size.double width = v53;
          v144.size.double height = rect;
          CGRect v154 = CGRectApplyAffineTransform(v144, &v130);
          v145.origin.double x = v118.n64_f64[0];
          v145.origin.double y = v119;
          v145.size.double width = v120;
          v145.size.double height = v121;
          if (CGRectContainsRect(v145, v154)) {
            goto LABEL_43;
          }
          BOOL v37 = 1;
          int v57 = 1;
        }
LABEL_54:
        if (v131 == 0.0)
        {
          double v61 = *a6;
        }
        else
        {
          double v61 = *a6;
          if (*a12 != 0.0 && fabs(v132) < fabs(v61) && fabs(*v123) < fabs(v134))
          {
            double v62 = fabs(v131);
            double v63 = fabs(*a12);
            if (v62 < v63) {
              goto LABEL_43;
            }
            if (v62 != v63)
            {
LABEL_80:
              BOOL v37 = 0;
              goto LABEL_81;
            }
          }
        }
        double v64 = fabs(v134);
        double v65 = fabs(v61);
        if (v64 < v65) {
          goto LABEL_43;
        }
        if (v64 == v65)
        {
          double v66 = fabs(v132);
          double v67 = fabs(*v123);
          if (v66 < v67) {
            goto LABEL_43;
          }
          if (v66 == v67)
          {
            if ((v37 | v57 ^ 1))
            {
              if ((v37 | v57) == 1) {
                goto LABEL_43;
              }
            }
            else
            {
              CGRect v68 = v23;
              while ((v68->n64_u8[1] & 3) == 0)
              {
                CGRect v68 = (__n64 *)v68[1].n64_u64[0];
                if (!v68) {
                  goto LABEL_74;
                }
              }
              CGRect v68 = (__n64 *)v68[12].n64_u64[0];
LABEL_74:
              CGRect v69 = v38;
              while ((v69->n64_u8[1] & 3) == 0)
              {
                CGRect v69 = (__n64 *)v69[1].n64_u64[0];
                if (!v69) {
                  goto LABEL_79;
                }
              }
              CGRect v69 = (__n64 *)v69[12].n64_u64[0];
LABEL_79:
              if ((uint64_t)v68 >= (uint64_t)v69)
              {
LABEL_43:
                BOOL v37 = 0;
                *a4 = HIBYTE(v135[0]);
                BOOL *v15 = v135[0];
                *a6 = v134;
                *a7 = v42;
                double *v123 = v132;
                *a12 = v131;
                goto LABEL_82;
              }
            }
          }
        }
        goto LABEL_80;
      }
LABEL_52:
      double v15 = v116;
      goto LABEL_54;
    }
    if (v122 == 516)
    {
      BOOL v37 = 0;
      int v57 = 1;
      goto LABEL_52;
    }
    __double2 v59 = __sincos_stret(Rotation - v56);
    v129.a = v59.__cosval;
    v129.b = v59.__sinval;
    v129.c = -v59.__sinval;
    v129.d = v59.__cosval;
    v129.tdouble x = 0.0;
    v129.tdouble y = 0.0;
    v146.origin.double x = v118.n64_f64[0];
    v146.origin.double y = v119;
    v146.size.double width = v120;
    v146.size.double height = v121;
    CGRect v155 = CGRectApplyAffineTransform(v146, &v129);
    v147.origin.double x = v49.n64_f64[0];
    v147.origin.double y = v51;
    v147.size.double width = v53;
    v147.size.double height = rect;
    BOOL v60 = CGRectContainsRect(v147, v155);
    BOOL v37 = 0;
    int v57 = 0;
    double v15 = v116;
    if (!v60) {
      goto LABEL_54;
    }
LABEL_81:
    uint64_t v23 = v38;
LABEL_82:
    ++v36;
  }
  while (v36 != v127);
  BOOL v70 = v125;
  if (!v23) {
    BOOL v70 = 0;
  }
  if (v70)
  {
    BOOL *v15 = 1;
    *a6 = 0.0;
    *a7 = 0.0;
    double *v123 = 0.0;
    *a12 = 0.0;
  }
  return v23;
}

_DWORD *CGPDFNodeGetNodeBefore(_DWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v6 = result;
    if (a2)
    {
      uint64_t v7 = result;
      if (a2 != result)
      {
        double v8 = a2;
        do
          double v8 = (_DWORD *)*((void *)v8 + 1);
        while (v8 != result && v8 != 0);
        uint64_t v7 = a2;
        if (!v8) {
          return 0;
        }
      }
      int v10 = *v7;
      goto LABEL_19;
    }
    int v10 = *result;
    if (a3 && v10 != a3 && (!a4 || v10 != 513 && (v10 & 0x100) == 0))
    {
      uint64_t v7 = result;
      goto LABEL_19;
    }
    uint64_t v7 = result;
    if (CGPDFNodeIsUsedGraphic((uint64_t)result))
    {
LABEL_19:
      if ((v10 & 0x200) != 0) {
        uint64_t v11 = v7[11];
      }
      else {
        uint64_t v11 = 0;
      }
      for (unint64_t i = v11 - 1; i != -1; --i)
      {
        if ((*((unsigned char *)v7 + 1) & 2) != 0 && i < v7[11]) {
          uint64_t v13 = *(void *)(*((void *)v7 + 7) + 8 * i);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t result = (_DWORD *)CGPDFNodeGetNodeBefore(v13, 0, a3, a4);
        if (result) {
          return result;
        }
      }
      if (v7 != v6)
      {
        while (1)
        {
          unsigned __int32 v14 = v7;
          uint64_t v7 = (_DWORD *)*((void *)v7 + 1);
          if (!v7) {
            break;
          }
          if ((*((unsigned char *)v7 + 1) & 2) != 0)
          {
            unint64_t v15 = v7[11];
            if (v15 >= 2)
            {
              unint64_t v16 = 0;
              while (1)
              {
                unsigned __int32 v17 = v16 >= v15 ? 0 : *(_DWORD **)(*((void *)v7 + 7) + 8 * v16);
                if (v17 == v14) {
                  break;
                }
                if (v15 == ++v16)
                {
                  uint64_t v18 = v7[11];
                  goto LABEL_42;
                }
              }
              uint64_t v18 = v16;
LABEL_42:
              for (unint64_t j = v18 - 1; j != -1; --j)
              {
                if (j >= v15) {
                  uint64_t v20 = 0;
                }
                else {
                  uint64_t v20 = *(void *)(*((void *)v7 + 7) + 8 * j);
                }
                uint64_t result = (_DWORD *)CGPDFNodeGetNodeBefore(v20, 0, a3, a4);
                if (result) {
                  return result;
                }
              }
            }
          }
          uint64_t result = 0;
          if (v7 == v6) {
            return result;
          }
        }
      }
      return 0;
    }
    return v6;
  }
  return result;
}

uint64_t CGPDFNodeIsStrictlyAfterPoint(__n64 *a1, double a2, double a3, double a4)
{
  double Rotation = CGPDFNodeGetRotation((uint64_t)a1);
  if (Rotation != 0.0)
  {
    __double2 v9 = __sincos_stret(Rotation);
    double v10 = a3 * v9.__cosval - v9.__sinval * a2;
    a2 = a3 * v9.__sinval + v9.__cosval * a2 + 0.0;
    a3 = v10 + 0.0;
  }
  v17.origin.double x = CGPDFNodeGetBounds(a1).n64_f64[0];
  CGRect v18 = CGRectInset(v17, -a4, -a4);
  double v11 = v18.origin.y - a3;
  if (v11 > 0.0) {
    return 0;
  }
  if (v18.size.height + v11 < 0.0) {
    return 1;
  }
  if (!a1) {
    return 0;
  }
  uint64_t result = 0;
  unsigned __int32 v13 = a1->n64_u32[0];
  if (a1->n64_i32[0] <= 512)
  {
    if (v13 - 257 >= 2 && v13 != 1) {
      return result;
    }
    return v18.origin.x > a2;
  }
  if (v13 - 513 < 2) {
    return v18.origin.x > a2;
  }
  if (v13 != 516) {
    return result;
  }
  if (!a1[5].n64_u32[1] || CGPDFNodeGetChildIndexAtX(a1, a2) > 1) {
    return 0;
  }
  if ((a1->n64_u8[1] & 2) != 0 && a1[5].n64_u32[1]) {
    unsigned __int32 v14 = *(__n64 **)a1[7].n64_u64[0];
  }
  else {
    unsigned __int32 v14 = 0;
  }
  CGPDFNodeGetBounds(v14);
  return a3 > v15 + v16 + a4;
}

uint64_t CGPDFNodeGetClosestAreaDescendantToPoint(__n64 *a1, uint64_t a2, int a3, unsigned char *a4, double a5, double a6, double a7)
{
  uint64_t v7 = a1;
  *a4 = 1;
  if (!a1) {
    return (uint64_t)v7;
  }
  unsigned __int32 v13 = a1->n64_u32[0];
  if (a1->n64_u32[0] - 257 < 2)
  {
LABEL_5:
    if (v13 == a2 || a3 != 0)
    {
      *a4 = CGPDFNodeIsAfterPoint((uint64_t)a1, a5, a6, a7);
      return (uint64_t)v7;
    }
    return 0;
  }
  if (v13 != 516)
  {
    if (v13 != 513) {
      return 0;
    }
    goto LABEL_5;
  }
  if ((a2 - 514) >= 3 && a2 != 1537 && a2 != 1) {
    return 0;
  }
  v49.origin.double x = CGPDFNodeGetBounds(a1).n64_f64[0];
  double v15 = -a7;
  CGRect v50 = CGRectInset(v49, -a7, -a7);
  if (v50.origin.y - a6 > 0.0)
  {
    double v16 = v7;
LABEL_15:
    uint64_t result = CGPDFNodeGetLastDescendantOfType(v16, a2, 0);
    *a4 = 0;
    return result;
  }
  if (v50.size.height + v50.origin.y - a6 >= 0.0)
  {
    if ((v7->n64_u8[1] & 2) == 0) {
      goto LABEL_107;
    }
    unsigned __int32 v19 = v7[5].n64_u32[1];
    if (!v19) {
      goto LABEL_107;
    }
    uint64_t v20 = v7;
    while (v20->n64_u32[0] != 516)
    {
      uint64_t v20 = (__n64 *)v20[1].n64_u64[0];
      if (!v20) {
        goto LABEL_31;
      }
    }
    if (v20[13].n64_u8[0])
    {
      RotatedChildIndedouble x = CGPDFNodeGetRotatedChildIndex((uint64_t)v7, a5, a6);
      goto LABEL_32;
    }
LABEL_31:
    RotatedChildIndedouble x = CGPDFNodeGetChildIndexAtX(v7, a5);
LABEL_32:
    if (a2 == 516)
    {
      if (RotatedChildIndex < v19) {
        return (uint64_t)v7;
      }
      unsigned __int32 v22 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] > v19 - 1
          ? *(__n64 **)(v7[7].n64_u64[0] + 8 * (v19 - 1))
          : 0;
      CGPDFNodeGetBounds(v22);
      if (a6 >= v30 - a7) {
        return (uint64_t)v7;
      }
      goto LABEL_108;
    }
    if (RotatedChildIndex >= v19) {
      unsigned __int32 v23 = v19;
    }
    else {
      unsigned __int32 v23 = RotatedChildIndex;
    }
    BOOL v24 = v23 != 0;
    unsigned __int32 v25 = v23 - 1;
    if (!v24) {
      unsigned __int32 v25 = 0;
    }
    if ((v7->n64_u8[1] & 2) == 0) {
      goto LABEL_107;
    }
    if (v7[5].n64_u32[1] <= v25) {
      goto LABEL_107;
    }
    double v26 = *(__n64 **)(v7[7].n64_u64[0] + 8 * v25);
    if (!v26 || v26->n64_u32[0] != 515) {
      goto LABEL_107;
    }
    if (a2 == 515)
    {
      CGPDFNodeGetBounds(v26);
      double v29 = v28 + v27 * 0.5;
LABEL_48:
      if (v29 > a6) {
        *a4 = 0;
      }
      return (uint64_t)v26;
    }
    unsigned __int32 v31 = v26[5].n64_u32[1];
    if (!v31) {
      goto LABEL_107;
    }
    double v32 = v7;
    while (v32->n64_u32[0] != 516)
    {
      double v32 = (__n64 *)v32[1].n64_u64[0];
      if (!v32) {
        goto LABEL_61;
      }
    }
    if (v32[13].n64_u8[0])
    {
      unsigned __int32 ChildIndexAtY = CGPDFNodeGetRotatedChildIndex((uint64_t)v26, a5, a6);
      goto LABEL_62;
    }
LABEL_61:
    unsigned __int32 ChildIndexAtY = CGPDFNodeGetChildIndexAtY(v26, a6);
LABEL_62:
    if (ChildIndexAtY >= v31) {
      unsigned __int32 v34 = v31;
    }
    else {
      unsigned __int32 v34 = ChildIndexAtY;
    }
    BOOL v24 = v34 != 0;
    unsigned __int32 v35 = v34 - 1;
    if (!v24) {
      unsigned __int32 v35 = 0;
    }
    if ((v26->n64_u8[1] & 2) == 0) {
      goto LABEL_107;
    }
    if (v26[5].n64_u32[1] <= v35) {
      goto LABEL_107;
    }
    double v26 = *(__n64 **)(v26[7].n64_u64[0] + 8 * v35);
    if (!v26 || v26->n64_u32[0] != 1537) {
      goto LABEL_107;
    }
    v51.origin.double x = CGPDFNodeGetBounds(v26).n64_f64[0];
    double y = v51.origin.y;
    double height = v51.size.height;
    CGRect v52 = CGRectInset(v51, v15, v15);
    if (v52.origin.y - a6 > 0.0)
    {
      double v16 = v26;
      goto LABEL_15;
    }
    if (v52.size.height + v52.origin.y - a6 < 0.0)
    {
      CGRect v18 = (int *)v26;
      goto LABEL_20;
    }
    if (a2 == 1537)
    {
      double v29 = y + height * 0.5;
      goto LABEL_48;
    }
    if ((v26->n64_u8[1] & 2) == 0) {
      goto LABEL_107;
    }
    unsigned int v38 = v26[5].n64_u32[1];
    if (!v38) {
      goto LABEL_107;
    }
    while (v7->n64_u32[0] != 516)
    {
      uint64_t v7 = (__n64 *)v7[1].n64_u64[0];
      if (!v7) {
        goto LABEL_84;
      }
    }
    if (v7[13].n64_u8[0])
    {
      unsigned int RotatedTextLineIndexAtPoint = CGPDFNodeGetRotatedTextLineIndexAtPoint(v26, a5, a6);
      goto LABEL_85;
    }
LABEL_84:
    unsigned int RotatedTextLineIndexAtPoint = CGPDFNodeGetChildIndexAtY(v26, a6);
LABEL_85:
    if (RotatedTextLineIndexAtPoint >= v38) {
      unsigned int v40 = v38;
    }
    else {
      unsigned int v40 = RotatedTextLineIndexAtPoint;
    }
    BOOL v24 = v40 != 0;
    unsigned __int32 v41 = v40 - 1;
    if (!v24) {
      unsigned __int32 v41 = 0;
    }
    if ((v26->n64_u8[1] & 2) == 0) {
      goto LABEL_107;
    }
    if (v26[5].n64_u32[1] <= v41) {
      goto LABEL_107;
    }
    uint64_t v7 = *(__n64 **)(v26[7].n64_u64[0] + 8 * v41);
    if (!v7 || v7->n64_u32[0] != 514) {
      goto LABEL_107;
    }
    if (a2 == 514) {
      goto LABEL_95;
    }
    unsigned __int32 v44 = v7[5].n64_u32[1];
    if (!v44) {
      goto LABEL_107;
    }
    Rotatedunsigned int ChildIndexAtX = CGPDFNodeGetRotatedChildIndexAtX(v7, a5, a6);
    if (RotatedChildIndexAtX >= v44) {
      unsigned __int32 v46 = v44;
    }
    else {
      unsigned __int32 v46 = RotatedChildIndexAtX;
    }
    BOOL v24 = v46 != 0;
    unsigned __int32 v47 = v46 - 1;
    if (!v24) {
      unsigned __int32 v47 = 0;
    }
    if ((v7->n64_u8[1] & 2) != 0
      && v7[5].n64_u32[1] > v47
      && (uint64_t v7 = *(__n64 **)(v7[7].n64_u64[0] + 8 * v47)) != 0
      && v7->n64_u32[0] == 1)
    {
LABEL_95:
      double v42 = CGPDFNodeGetBounds(v7).n64_f64[0];
      if (v42 + v43 * 0.5 >= CGPDFNodeTransformPoint((uint64_t)v7, a5, a6)) {
        return (uint64_t)v7;
      }
    }
    else
    {
LABEL_107:
      uint64_t v7 = 0;
    }
LABEL_108:
    *a4 = 0;
    return (uint64_t)v7;
  }
  CGRect v18 = (int *)v7;
LABEL_20:

  return CGPDFNodeGetFirstDescendantOfType(v18, a2, 0);
}

unint64_t CGPDFNodeGetRotatedChildIndex(uint64_t a1, double a2, double a3)
{
  if (!a1) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 1) & 2) != 0) {
    uint64_t v6 = *(unsigned int *)(a1 + 44);
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v8 = 0;
  uint64_t v7 = 0;
  double v9 = INFINITY;
  while (v6 != v8)
  {
    if ((*(unsigned char *)(a1 + 1) & 2) != 0 && v8 < *(unsigned int *)(a1 + 44)) {
      double v10 = *(__n64 **)(*(void *)(a1 + 56) + 8 * v8);
    }
    else {
      double v10 = 0;
    }
    v11.n64_u64[0] = CGPDFNodeGetBounds(v10).n64_u64[0];
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
    double v19 = CGPDFNodeTransformPoint((uint64_t)v10, a2, a3);
    double v20 = v18;
    ++v8;
    if ((v18 - (v13 + v17 * 0.5)) * (v18 - (v13 + v17 * 0.5))
       + (v19 - (v11.n64_f64[0] + v15 * 0.5)) * (v19 - (v11.n64_f64[0] + v15 * 0.5)) >= v9)
    {
      uint64_t v7 = v7;
    }
    else
    {
      double v9 = (v18 - (v13 + v17 * 0.5)) * (v18 - (v13 + v17 * 0.5))
         + (v19 - (v11.n64_f64[0] + v15 * 0.5)) * (v19 - (v11.n64_f64[0] + v15 * 0.5));
      uint64_t v7 = v8;
    }
    v22.origin.double x = v11.n64_f64[0];
    v22.origin.double y = v13;
    v22.size.double width = v15;
    v22.size.double height = v17;
    if (CGRectContainsPoint(v22, *(CGPoint *)&v19)) {
      return v8;
    }
  }
  return v7;
}

unint64_t CGPDFNodeGetChildIndexAtY(__n64 *a1, double a2)
{
  if (!a1) {
    return 0;
  }
  CGPDFNodeGetBounds(a1);
  double v5 = v4;
  double v7 = v4 + v6;
  if ((a1->n64_u8[1] & 2) == 0)
  {
    uint64_t v8 = 0;
LABEL_17:
    if ((v5 + v7) * 0.5 <= a2) {
      return v8;
    }
    else {
      return (v8 + 1);
    }
  }
  uint64_t v8 = a1[5].n64_u32[1];
  if (!v8) {
    goto LABEL_17;
  }
  unint64_t v9 = 0;
  while (1)
  {
    double v10 = (a1->n64_u8[1] & 2) != 0 && v9 < a1[5].n64_u32[1] ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v9) : 0;
    CGPDFNodeGetBounds(v10);
    if (v7 < v11) {
      double v7 = v11;
    }
    if ((v11 + v12 + v7) * 0.5 < a2) {
      break;
    }
    ++v9;
    double v7 = v11;
    if (v8 == v9)
    {
      double v7 = v11;
      goto LABEL_17;
    }
  }
  if (v9 == v8) {
    goto LABEL_17;
  }
  return v9;
}

__n64 *CGPDFNodeGetRotatedTextLineIndexAtPoint(__n64 *result, double a2, double a3)
{
  if (result)
  {
    double v5 = result;
    CGPDFNodeGetBounds(result);
    if ((v5->n64_u8[1] & 2) != 0) {
      unsigned __int32 v6 = v5[5].n64_u32[1];
    }
    else {
      unsigned __int32 v6 = 0;
    }
    unint64_t v7 = 0;
    uint64_t v8 = v6;
    int v9 = -1;
    while (v8 != v7)
    {
      if ((v5->n64_u8[1] & 2) != 0 && v7 < v5[5].n64_u32[1]) {
        double v10 = *(__n64 **)(v5[7].n64_u64[0] + 8 * v7);
      }
      else {
        double v10 = 0;
      }
      v11.n64_u64[0] = CGPDFNodeGetBounds(v10).n64_u64[0];
      double v13 = v12;
      CGFloat v15 = v14;
      CGFloat v17 = v16;
      double v18 = CGPDFNodeTransformPoint((uint64_t)v10, a2, a3);
      double v20 = v18;
      double v21 = v19;
      if (v9 < 0 && v19 > v13)
      {
        if (v18 >= v11.n64_f64[0])
        {
          if (v18 > v11.n64_f64[0]) {
            int v9 = v7 + 1;
          }
        }
        else
        {
          int v9 = v7;
        }
      }
      v22.origin.double x = v11.n64_f64[0];
      v22.origin.double y = v13;
      v22.size.double width = v15;
      v22.size.double height = v17;
      ++v7;
      if (CGRectContainsPoint(v22, *(CGPoint *)&v20))
      {
        int v9 = v7;
        break;
      }
    }
    if (v9 < 0) {
      return (__n64 *)(v8 + 1);
    }
    else {
      return (__n64 *)v9;
    }
  }
  return result;
}

double CGPDFNodeTransformPoint(uint64_t a1, double a2, double a3)
{
  double Rotation = CGPDFNodeGetRotation(a1);
  if (Rotation != 0.0)
  {
    __double2 v6 = __sincos_stret(Rotation);
    return a3 * v6.__sinval + v6.__cosval * a2 + 0.0;
  }
  return a2;
}

unint64_t CGPDFNodeGetRotatedChildIndexAtX(__n64 *a1, double a2, double a3)
{
  if (!a1) {
    return 0;
  }
  v6.n64_u64[0] = CGPDFNodeGetBounds(a1).n64_u64[0];
  double v7 = v6.n64_f64[0];
  double v9 = v8;
  if ((a1->n64_u8[1] & 2) == 0)
  {
    uint64_t v10 = 0;
    goto LABEL_16;
  }
  uint64_t v10 = a1[5].n64_u32[1];
  if (!v10)
  {
LABEL_16:
    double v18 = v6.n64_f64[0];
LABEL_17:
    double v19 = CGPDFNodeTransformPoint((uint64_t)a1, a2, a3);
    double v12 = v18;
LABEL_18:
    if (v19 <= (v9 + v7 + v12) * 0.5) {
      return v10;
    }
    else {
      return (v10 + 1);
    }
  }
  unint64_t v11 = 0;
  double v12 = v6.n64_f64[0];
  while (1)
  {
    double v13 = (a1->n64_u8[1] & 2) != 0 && v11 < a1[5].n64_u32[1] ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v11) : 0;
    v14.n64_u64[0] = CGPDFNodeGetBounds(v13).n64_u64[0];
    double v16 = v15;
    double v17 = CGPDFNodeTransformPoint((uint64_t)v13, a2, a3);
    double v18 = v14.n64_f64[0] + v16;
    if (v12 > v18) {
      double v12 = v18;
    }
    if (v17 < (v14.n64_f64[0] + v12) * 0.5) {
      break;
    }
    ++v11;
    double v12 = v18;
    if (v10 == v11) {
      goto LABEL_17;
    }
  }
  double v19 = CGPDFNodeTransformPoint((uint64_t)a1, a2, a3);
  if (v11 == v10) {
    goto LABEL_18;
  }
  return v11;
}

uint64_t CGPDFNodeCompareReadingOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t TextRange = CGPDFNodeGetTextRange(a1);
  uint64_t v6 = v5;
  uint64_t v7 = CGPDFNodeGetTextRange(a2);
  if (TextRange + v6 < v7 + v8) {
    return -1;
  }
  if (TextRange + v6 > v7 + v8) {
    return 1;
  }
  if (v3 == a2) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  do
    uint64_t v3 = *(void *)(v3 + 8);
  while (v3 != a2 && v3 != 0);
  if (v3) {
    return -1;
  }
  else {
    return 1;
  }
}

uint64_t CGPDFNodeGetTextRangeIncludingWhitespace(uint64_t a1)
{
  uint64_t TextRange = CGPDFNodeGetTextRange(a1);
  uint64_t v3 = TextRange;
  if (a1 && *(_DWORD *)a1 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4 && (*(unsigned char *)(v4 + 1) & 2) != 0 && (unsigned int v5 = *(_DWORD *)(v4 + 44)) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      while (*(_DWORD *)v6 != 1537)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          return TextRange - (**(void **)(v4 + 56) != a1);
        }
      }
      if (*(double *)(v6 + 112) == 0.0) {
        return TextRange - (**(void **)(v4 + 56) != a1);
      }
      ChildIndedouble x = CGPDFNodeGetChildIndex(a1);
      int v9 = ChildIndex;
      if (ChildIndex)
      {
        if (v5 <= ChildIndex - 1) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = *(void *)(*(void *)(v4 + 56) + 8 * (ChildIndex - 1));
        }
        uint64_t v11 = CGPDFNodeGetTextRange(v10);
        uint64_t v3 = v11 + v12;
      }
      else
      {
        uint64_t v3 = CGPDFNodeGetTextRange(v4);
      }
      unsigned int v13 = v9 + 1;
      if (v9 + 1 < v5)
      {
        if ((*(unsigned char *)(v4 + 1) & 2) != 0 && *(_DWORD *)(v4 + 44) > v13) {
          uint64_t v14 = *(void *)(*(void *)(v4 + 56) + 8 * v13);
        }
        else {
          uint64_t v14 = 0;
        }
        CGPDFNodeGetTextRange(v14);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t CGPDFNodeGetTextIndexAfterPoint(_DWORD *a1, CGFloat a2, CGFloat a3, double a4)
{
  if (!a1) {
    return -1;
  }
  uint64_t TextRangeIncludingWhitespace = CGPDFNodeGetTextRangeIncludingWhitespace((uint64_t)a1);
  if (*a1 == 1)
  {
    __int16 v13 = 0;
    uint64_t TextIndexAtPoint = CGPDFNodeGetTextIndexAtPoint((uint64_t)a1, (BOOL *)&v13 + 1, (BOOL *)&v13, a2, a3, a4);
    if (HIBYTE(v13)) {
      uint64_t v10 = TextIndexAtPoint;
    }
    else {
      uint64_t v10 = TextIndexAtPoint + 1;
    }
    if (v10 < TextRangeIncludingWhitespace || v13 != 0) {
      return v10;
    }
  }
  return TextRangeIncludingWhitespace;
}

uint64_t CGPDFNodeGetTextIndexAtPoint(uint64_t a1, BOOL *a2, BOOL *a3, CGFloat a4, CGFloat a5, double a6)
{
  *a2 = 0;
  *a3 = 0;
  if (!a1) {
    return -1;
  }
  if (*(_DWORD *)a1 == 1)
  {
    uint64_t v12 = *(__n64 **)(a1 + 8);
    if (v12 && (v12->n64_u8[1] & 2) != 0 && v12[5].n64_u32[1])
    {
      double Rotation = CGPDFNodeGetRotation(a1);
      if (Rotation == 0.0)
      {
        CGPDFNodeGetHitTestRect((uint64_t)v12, a6);
        double y = v29;
        double height = v30;
        double v15 = a4;
      }
      else
      {
        __double2 v14 = __sincos_stret(Rotation);
        double v15 = a5 * v14.__sinval + v14.__cosval * a4 + 0.0;
        a5 = a5 * v14.__cosval - v14.__sinval * a4 + 0.0;
        v55.origin.double x = CGPDFNodeGetBounds(v12).n64_f64[0];
        CGRect v56 = CGRectInset(v55, a6, a6);
        double y = v56.origin.y;
        double height = v56.size.height;
      }
      uint64_t TextRangeIncludingWhitespace = CGPDFNodeGetTextRangeIncludingWhitespace(a1);
      uint64_t v33 = v32;
      uint64_t v34 = TextRangeIncludingWhitespace + v32;
      uint64_t v35 = (uint64_t)v12;
      do
      {
        if (*(_DWORD *)v35 == 515) {
          break;
        }
        uint64_t v35 = *(void *)(v35 + 8);
      }
      while (v35);
      uint64_t TextRange = CGPDFNodeGetTextRange(v35);
      if (a5 > y + height)
      {
        *a2 = 1;
        return TextRangeIncludingWhitespace - (TextRangeIncludingWhitespace > TextRange);
      }
      if (a5 < y) {
        return v34 - (v34 >= TextRange + v37);
      }
      while (v12->n64_u32[0] != 517)
      {
        uint64_t v12 = (__n64 *)v12[1].n64_u64[0];
        if (!v12)
        {
          unint64_t v38 = 0;
          goto LABEL_34;
        }
      }
      unint64_t v38 = v12[13].n64_u64[0];
LABEL_34:
      uint64_t v39 = v33 - 1;
      if (v33 < 1) {
        return TextRangeIncludingWhitespace;
      }
      uint64_t v27 = v34 - 1;
      if (v34 <= TextRangeIncludingWhitespace + 1) {
        uint64_t v40 = TextRangeIncludingWhitespace + 1;
      }
      else {
        uint64_t v40 = v34;
      }
      uint64_t v41 = 24 * TextRangeIncludingWhitespace;
      uint64_t v42 = TextRangeIncludingWhitespace;
      while (1)
      {
        p_size = &CGRectNull.size;
        if (!v38) {
          goto LABEL_53;
        }
        unsigned __int32 v44 = &CGRectNull;
        if (v42 < 0) {
          goto LABEL_49;
        }
        p_size = &CGRectNull.size;
        if (*(void *)(v38 + 48) > v42 && (uint64_t v45 = *(void *)(v38 + 24)) != 0)
        {
          unsigned __int32 v46 = *(CGSize **)(v45 + v41);
          unsigned __int32 v47 = (const CGRect *)&v46[1];
          BOOL v48 = v46 == 0;
          if (v46) {
            p_size = v46 + 2;
          }
          else {
            p_size = &CGRectNull.size;
          }
          if (v48) {
            unsigned __int32 v44 = &CGRectNull;
          }
          else {
            unsigned __int32 v44 = v47;
          }
        }
        else
        {
LABEL_53:
          unsigned __int32 v44 = &CGRectNull;
        }
LABEL_49:
        double x = v44->origin.x;
        if (v15 <= v44->origin.x + p_size->width * 0.5)
        {
          if (v42 <= TextRangeIncludingWhitespace)
          {
            *a2 = 1;
            BOOL v50 = v15 >= x - a6;
          }
          else if (v15 >= x)
          {
            BOOL v50 = 1;
            *a2 = 1;
          }
          else
          {
            --v42;
            BOOL v50 = 1;
          }
          *a3 = v50;
          return v42;
        }
        if (!v39)
        {
          double v51 = x + p_size->width + a6;
          *a3 = v15 <= v51;
          if (v15 > v51)
          {
            double HitTestRect = CGPDFNodeGetHitTestRect(a1, a6);
            *a3 = v15 <= HitTestRect + v53;
          }
          return v27;
        }
        ++v42;
        v41 += 24;
        --v39;
        if (v42 >= v34) {
          return v40;
        }
      }
    }
    return -1;
  }
  if (*(_DWORD *)a1 != 513 && (*(_DWORD *)a1 & 0x100) == 0) {
    return -1;
  }
  v57.origin.double x = CGPDFNodeGetHitTestRect(a1, a6);
  double v19 = v57.origin.x;
  double v20 = v57.origin.y;
  double width = v57.size.width;
  double v22 = v57.size.height;
  v54.double x = a4;
  v54.double y = a5;
  *a3 = CGRectContainsPoint(v57, v54);
  if (a5 >= v20)
  {
    BOOL v23 = a5 > v20 + v22;
    if (a4 <= v19 + width * 0.5) {
      BOOL v23 = 1;
    }
    *a2 = v23;
  }
  uint64_t v24 = CGPDFNodeGetTextRange(a1);
  if (*a2) {
    uint64_t v26 = v25 - 1;
  }
  else {
    uint64_t v26 = 0;
  }
  return v24 + v26;
}

uint64_t CGPDFNodeGetTextIndexBeforePoint(_DWORD *a1, CGFloat a2, CGFloat a3, double a4)
{
  if (!a1) {
    return -1;
  }
  uint64_t TextRangeIncludingWhitespace = CGPDFNodeGetTextRangeIncludingWhitespace((uint64_t)a1);
  uint64_t v10 = TextRangeIncludingWhitespace;
  uint64_t v11 = v9;
  if (*a1 != 1)
  {
    uint64_t v14 = TextRangeIncludingWhitespace + v9;
    return v14 - 1;
  }
  __int16 v15 = 0;
  uint64_t TextIndexAtPoint = CGPDFNodeGetTextIndexAtPoint((uint64_t)a1, (BOOL *)&v15 + 1, (BOOL *)&v15, a2, a3, a4);
  uint64_t result = TextIndexAtPoint - SHIBYTE(v15);
  if (!(_BYTE)v15)
  {
    uint64_t v14 = v10 + v11;
    if (result < v10 + v11) {
      return v14 - 1;
    }
  }
  return result;
}

void CGPDFNodeGetNodeRangeBetweenPoints(__n64 *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, BOOL *a6, uint64_t *a7, double a8, double a9, double a10, double a11, double a12)
{
  BOOL v71 = 0;
  ClosestNodeToPoint = CGPDFNodeGetClosestNodeToPoint(a1, a2, a3, &v71, a8, a9, a12);
  if (v71)
  {
    NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(a1, ClosestNodeToPoint, a2, a3);
    uint64_t NodeAfter = (uint64_t)ClosestNodeToPoint;
  }
  else
  {
    uint64_t NodeAfter = CGPDFNodeGetNodeAfter(a1, ClosestNodeToPoint, a2, a3);
    NodeBefore = ClosestNodeToPoint;
  }
  uint64_t v74 = NodeAfter;
  for (unint64_t i = NodeBefore; ClosestNodeToPoint; ClosestNodeToPoint = (__n64 *)ClosestNodeToPoint[1].n64_u64[0])
  {
    if (ClosestNodeToPoint->n64_u32[0] == 1538)
    {
      uint64_t v26 = (_DWORD *)ClosestNodeToPoint[13].n64_u64[0];
      if (v26)
      {
        if (*v26 == 2) {
          break;
        }
      }
    }
  }
  uint64_t v27 = CGPDFNodeGetClosestNodeToPoint(a1, a2, a3, &v71, a10, a11, a12);
  if (v71)
  {
    double v28 = (__n64 *)CGPDFNodeGetNodeBefore(a1, v27, a2, a3);
    uint64_t v29 = (uint64_t)v27;
  }
  else
  {
    uint64_t v29 = CGPDFNodeGetNodeAfter(a1, v27, a2, a3);
    double v28 = v27;
  }
  uint64_t v72 = v29;
  for (j = v28; v27; uint64_t v27 = (__n64 *)v27[1].n64_u64[0])
  {
    if (v27->n64_u32[0] == 1538)
    {
      double v30 = (_DWORD *)v27[13].n64_u64[0];
      if (v30)
      {
        if (*v30 == 2) {
          break;
        }
      }
    }
  }
  BOOL v31 = ClosestNodeToPoint == v27;
  uint64_t v32 = NodeAfter;
  if (v31)
  {
    if (ClosestNodeToPoint) {
      uint64_t v38 = (uint64_t)ClosestNodeToPoint;
    }
    else {
      uint64_t v38 = (uint64_t)a1;
    }
    CGPDFNodeMakeLayoutAreasConsistent(v38, a2, a3, (uint64_t *)&i, &v74, (uint64_t *)&j, &v72, a8, a9, a10, a11, a12);
    uint64_t v32 = v74;
    uint64_t v29 = v72;
    if (v74) {
      goto LABEL_19;
    }
LABEL_29:
    uint64_t v36 = (uint64_t)i;
    if (v29)
    {
      *a6 = 0;
      uint64_t v37 = v36;
      uint64_t v34 = a7;
      goto LABEL_31;
    }
    uint64_t v34 = a7;
    goto LABEL_41;
  }
  if (!NodeAfter) {
    goto LABEL_29;
  }
LABEL_19:
  if (!v29 || (uint64_t v33 = CGPDFNodeCompareReadingOrder(v32, v29), v33 == -1))
  {
    *a6 = 1;
    uint64_t v36 = (uint64_t)i;
    if (CGPDFNodeIsHitByPoint((uint64_t)i, a8, a9, a12)) {
      uint64_t v40 = (_DWORD *)v36;
    }
    else {
      uint64_t v40 = (_DWORD *)v32;
    }
    *a4 = (uint64_t)v40;
    uint64_t v34 = a7;
    if (CGPDFNodeIsHitByPoint(v29, a10, a11, a12))
    {
LABEL_37:
      *a5 = v29;
      goto LABEL_83;
    }
    *a5 = (uint64_t)j;
    goto LABEL_83;
  }
  uint64_t v34 = a7;
  if (v33 == 1)
  {
    *a6 = 0;
    int IsHitByPoint = CGPDFNodeIsHitByPoint(v32, a8, a9, a12);
    uint64_t v36 = (uint64_t)i;
    if (IsHitByPoint) {
      uint64_t v37 = v32;
    }
    else {
      uint64_t v37 = (uint64_t)i;
    }
LABEL_31:
    *a4 = v37;
    uint64_t v39 = (uint64_t)j;
    if (CGPDFNodeIsHitByPoint((uint64_t)j, a10, a11, a12))
    {
      *a5 = v39;
      goto LABEL_83;
    }
    goto LABEL_37;
  }
  uint64_t v36 = (uint64_t)i;
LABEL_41:
  if (CGPDFNodeIsHitByPoint(v36, a8, a9, a12))
  {
    *a4 = v36;
    char v41 = CGPDFNodeIsHitByPoint(v36, a10, a11, a12);
    uint64_t v42 = (_DWORD *)v36;
    if (v41) {
      goto LABEL_43;
    }
    *a6 = 1;
    if (CGPDFNodeIsHitByPoint(v32, a10, a11, a12)) {
      *a5 = v32;
    }
    else {
      *a5 = v36;
    }
  }
  else
  {
    if (!CGPDFNodeIsHitByPoint(v36, a10, a11, a12))
    {
      if (CGPDFNodeIsHitByPoint(v32, a8, a9, a12))
      {
        *a4 = v32;
        *a5 = v32;
        if ((CGPDFNodeIsHitByPoint(v32, a10, a11, a12) & 1) == 0)
        {
          *a6 = 0;
          goto LABEL_83;
        }
LABEL_44:
        double v43 = (int *)*a4;
        if (*a4)
        {
          int v44 = *v43;
          double Rotation = CGPDFNodeGetRotation((uint64_t)v43);
          if (Rotation != 0.0)
          {
LABEL_46:
            __double2 v46 = __sincos_stret(Rotation);
            double v47 = a9 * v46.__sinval + v46.__cosval * a8 + 0.0;
            double v48 = a9 * v46.__cosval - v46.__sinval * a8 + 0.0;
            double v49 = a11 * v46.__sinval + v46.__cosval * a10 + 0.0;
            double v50 = a11 * v46.__cosval - v46.__sinval * a10 + 0.0;
LABEL_70:
            if (v44 == 1 || v44 == 516 || v44 == 514)
            {
              if (v47 >= v49)
              {
                BOOL v54 = v47 == v49;
                if (v48 < v50) {
                  BOOL v54 = 0;
                }
                goto LABEL_82;
              }
LABEL_79:
              BOOL v54 = 1;
LABEL_82:
              *a6 = v54;
              goto LABEL_83;
            }
LABEL_78:
            if (v48 <= v50)
            {
              BOOL v54 = v48 == v50;
              if (v47 > v49) {
                BOOL v54 = 0;
              }
              goto LABEL_82;
            }
            goto LABEL_79;
          }
          goto LABEL_69;
        }
        if (v36)
        {
          int v44 = *(_DWORD *)v36;
          if (v32)
          {
LABEL_57:
            int v51 = *(_DWORD *)v32;
            goto LABEL_65;
          }
        }
        else
        {
          int v44 = 0;
          if (v32) {
            goto LABEL_57;
          }
        }
        int v51 = 0;
LABEL_65:
        if (v44 != v51)
        {
          double v47 = a8;
          double v48 = a9;
          double v49 = a10;
          double v50 = a11;
          goto LABEL_78;
        }
        double v52 = CGPDFNodeGetRotation(v36);
        if (v52 != 0.0)
        {
          double v53 = v52;
          if (v52 == CGPDFNodeGetRotation(v32))
          {
            double Rotation = v53;
            goto LABEL_46;
          }
        }
LABEL_69:
        double v50 = a11;
        double v49 = a10;
        double v48 = a9;
        double v47 = a8;
        goto LABEL_70;
      }
      if (CGPDFNodeIsHitByPoint(v32, a10, a11, a12))
      {
        *a4 = v32;
        *a5 = v32;
        goto LABEL_79;
      }
      uint64_t v42 = 0;
      *a4 = 0;
LABEL_43:
      *a5 = (uint64_t)v42;
      goto LABEL_44;
    }
    *a5 = v36;
    *a6 = 0;
    if (CGPDFNodeIsHitByPoint(v32, a8, a9, a12)) {
      *a4 = v32;
    }
    else {
      *a4 = v36;
    }
  }
LABEL_83:
  if (!v34) {
    return;
  }
  CGRect v55 = (_DWORD *)*a4;
  CGRect v56 = (_DWORD *)*a5;
  if (!*a6)
  {
    if (v55)
    {
      if (v56)
      {
        uint64_t TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint((_DWORD *)*a5, a10, a11, a12);
        __double2 v58 = (_DWORD *)*a4;
LABEL_98:
        CGFloat v59 = a8;
        CGFloat v60 = a9;
        goto LABEL_99;
      }
    }
    else
    {
      CGRect v55 = (_DWORD *)*a5;
      if (!v56) {
        goto LABEL_102;
      }
    }
    uint64_t TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint(v55, a10, a11, a12);
    __double2 v58 = v55;
    goto LABEL_98;
  }
  if (!v55)
  {
    if (v56)
    {
LABEL_94:
      uint64_t TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint(v56, a8, a9, a12);
      __double2 v58 = v56;
      goto LABEL_95;
    }
LABEL_102:
    uint64_t TextIndexAfterPoint = 0;
    uint64_t TextIndexBeforePoint = -1;
    goto LABEL_103;
  }
  if (!v56)
  {
    CGRect v56 = (_DWORD *)*a4;
    goto LABEL_94;
  }
  uint64_t TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint((_DWORD *)*a4, a8, a9, a12);
  __double2 v58 = (_DWORD *)*a5;
LABEL_95:
  CGFloat v59 = a10;
  CGFloat v60 = a11;
LABEL_99:
  uint64_t TextIndexBeforePoint = CGPDFNodeGetTextIndexBeforePoint(v58, v59, v60, a12);
  if (!*a4 && !*a5)
  {
LABEL_103:
    if (v36 | v32)
    {
      if (v36)
      {
        uint64_t TextRange = CGPDFNodeGetTextRange(v36);
        uint64_t TextIndexAfterPoint = TextRange + v63;
        if (!v32) {
          uint64_t TextIndexBeforePoint = TextRange + v63 - 1;
        }
      }
      if (v32)
      {
        uint64_t v64 = CGPDFNodeGetTextRange(v32);
        uint64_t TextIndexBeforePoint = v64 - 1;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1 && *(_DWORD *)v32 == 1 && *(void *)(v36 + 8) == *(void *)(v32 + 8))
          {
            if (*a6) {
              double v65 = a8;
            }
            else {
              double v65 = a10;
            }
            if (*a6) {
              double v66 = a9;
            }
            else {
              double v66 = a11;
            }
            if (!*a6)
            {
              a10 = a8;
              a11 = a9;
            }
            uint64_t v67 = CGPDFNodeGetTextIndexAfterPoint((_DWORD *)v36, v65, v66, a12);
            uint64_t v68 = CGPDFNodeGetTextIndexBeforePoint((_DWORD *)v32, a10, a11, a12);
            if (v67 > TextIndexAfterPoint) {
              uint64_t TextIndexAfterPoint = v67;
            }
            if (v68 < TextIndexBeforePoint) {
              uint64_t TextIndexBeforePoint = v68;
            }
          }
        }
        else
        {
          uint64_t TextIndexAfterPoint = v64;
        }
      }
    }
  }
  if (TextIndexBeforePoint >= TextIndexAfterPoint) {
    uint64_t v69 = TextIndexBeforePoint - TextIndexAfterPoint + 1;
  }
  else {
    uint64_t v69 = 0;
  }
  *uint64_t v34 = TextIndexAfterPoint;
  v34[1] = v69;
}

uint64_t CGPDFNodeMakeLayoutAreasConsistent(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, double a8, double a9, double a10, double a11, double a12)
{
  if (a1)
  {
    uint64_t v18 = a1;
    do
    {
      if (*(_DWORD *)v18 == 517) {
        break;
      }
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18);
  }
  else
  {
    uint64_t v18 = 0;
  }
  for (uint64_t i = *a4; i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)i == 516) {
      break;
    }
  }
  for (uint64_t j = *a5; j; uint64_t j = *(void *)(j + 8))
  {
    if (*(_DWORD *)j == 516) {
      break;
    }
  }
  for (uint64_t k = *a6; k; uint64_t k = *(void *)(k + 8))
  {
    if (*(_DWORD *)k == 516) {
      break;
    }
  }
  for (uint64_t m = *a7; m; uint64_t m = *(void *)(m + 8))
  {
    if (*(_DWORD *)m == 516) {
      break;
    }
  }
  int IsHitByPoint = CGPDFNodeIsHitByPoint(i, a8, a9, a12);
  int v24 = CGPDFNodeIsHitByPoint(j, a8, a9, a12);
  int v25 = CGPDFNodeIsHitByPoint(k, a10, a11, a12);
  int v26 = CGPDFNodeIsHitByPoint(m, a10, a11, a12);
  uint64_t result = *a5;
  uint64_t v28 = *a7;
  if (*a5)
  {
    if (v28)
    {
      uint64_t result = CGPDFNodeCompareReadingOrder(result, v28);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = -1;
    }
    BOOL v29 = result == -1;
    if (result == -1) {
      int v30 = v24;
    }
    else {
      int v30 = 0;
    }
    if (v30 & v25) {
      return result;
    }
  }
  else
  {
    if (!v28) {
      return result;
    }
    BOOL v29 = 0;
    uint64_t result = 1;
  }
  int v31 = v26 ^ 1;
  int v32 = IsHitByPoint ^ 1;
  if (result == 1 && (v31 & 1) == 0 && !v32) {
    return result;
  }
  int v33 = v24 ^ 1;
  char v70 = 1;
  if (!v29)
  {
    if ((v31 | IsHitByPoint))
    {
      if (((v32 | v26) & 1) == 0)
      {
        uint64_t result = CGPDFNodeIsHitByPoint(i, a10, a11, a12);
        int v33 = v24 ^ 1;
        if (result)
        {
          BOOL v37 = i != 0;
          if (i != a1 && i)
          {
            uint64_t v38 = i;
            do
            {
              uint64_t v38 = *(void *)(v38 + 8);
              BOOL v37 = v38 != 0;
            }
            while (v38 != a1 && v38 != 0);
          }
          if (v37) {
            goto LABEL_82;
          }
        }
      }
    }
    else
    {
      uint64_t result = CGPDFNodeIsHitByPoint(m, a8, a9, a12);
      int v33 = v24 ^ 1;
      if (result)
      {
        BOOL v47 = m != 0;
        if (m != a1 && m)
        {
          uint64_t v48 = m;
          do
          {
            uint64_t v48 = *(void *)(v48 + 8);
            BOOL v47 = v48 != 0;
          }
          while (v48 != a1 && v48 != 0);
        }
        if (v47) {
          goto LABEL_116;
        }
      }
    }
    if ((v33 | v25))
    {
      if (((v25 ^ 1 | v24) & 1) == 0)
      {
        uint64_t result = CGPDFNodeIsHitByPoint(k, a8, a9, a12);
        if (result)
        {
          BOOL v50 = k != 0;
          if (k != a1 && k)
          {
            uint64_t v51 = k;
            do
            {
              uint64_t v51 = *(void *)(v51 + 8);
              BOOL v50 = v51 != 0;
            }
            while (v51 != a1 && v51 != 0);
          }
          if (v50) {
            goto LABEL_105;
          }
        }
      }
      return result;
    }
    uint64_t result = CGPDFNodeIsHitByPoint(j, a10, a11, a12);
    if (!result) {
      return result;
    }
    BOOL v59 = j != 0;
    if (j != a1 && j)
    {
      uint64_t v60 = j;
      do
      {
        uint64_t v60 = *(void *)(v60 + 8);
        BOOL v59 = v60 != 0;
      }
      while (v60 != a1 && v60 != 0);
    }
    if (!v59) {
      return result;
    }
    goto LABEL_129;
  }
  if (((v33 | v25) & 1) == 0)
  {
    uint64_t result = CGPDFNodeIsHitByPoint(j, a10, a11, a12);
    int v31 = v26 ^ 1;
    int v32 = IsHitByPoint ^ 1;
    if (!result) {
      goto LABEL_70;
    }
    BOOL v40 = j != 0;
    if (j != a1 && j)
    {
      uint64_t v41 = j;
      do
      {
        uint64_t v41 = *(void *)(v41 + 8);
        BOOL v40 = v41 != 0;
      }
      while (v41 != a1 && v41 != 0);
    }
    if (!v40) {
      goto LABEL_70;
    }
LABEL_129:
    __double2 v46 = (__n64 *)j;
    goto LABEL_130;
  }
  if (((v25 ^ 1 | v24) & 1) == 0)
  {
    uint64_t result = CGPDFNodeIsHitByPoint(k, a8, a9, a12);
    int v31 = v26 ^ 1;
    int v32 = IsHitByPoint ^ 1;
    if (result)
    {
      BOOL v34 = k != 0;
      if (k != a1 && k)
      {
        uint64_t v35 = k;
        do
        {
          uint64_t v35 = *(void *)(v35 + 8);
          BOOL v34 = v35 != 0;
        }
        while (v35 != a1 && v35 != 0);
      }
      if (v34)
      {
LABEL_105:
        double v53 = (__n64 *)k;
LABEL_117:
        ClosestAreaDescendantToPoint = (_DWORD *)CGPDFNodeGetClosestAreaDescendantToPoint(v53, a2, a3, &v70, a8, a9, a12);
        __double2 v58 = ClosestAreaDescendantToPoint;
        if (v70)
        {
          uint64_t result = (uint64_t)CGPDFNodeGetNodeBefore((_DWORD *)v18, ClosestAreaDescendantToPoint, a2, a3);
          *a4 = result;
        }
        else
        {
          *a4 = (uint64_t)ClosestAreaDescendantToPoint;
          uint64_t result = CGPDFNodeGetNodeAfter((_DWORD *)v18, ClosestAreaDescendantToPoint, a2, a3);
          __double2 v58 = (_DWORD *)result;
        }
        uint64_t v63 = a5;
LABEL_136:
        *uint64_t v63 = (uint64_t)v58;
        return result;
      }
    }
  }
LABEL_70:
  if (((v31 | IsHitByPoint) & 1) == 0)
  {
    uint64_t result = CGPDFNodeIsHitByPoint(m, a8, a9, a12);
    if (!result) {
      return result;
    }
    BOOL v54 = m != 0;
    if (m != a1 && m)
    {
      uint64_t v55 = m;
      do
      {
        uint64_t v55 = *(void *)(v55 + 8);
        BOOL v54 = v55 != 0;
      }
      while (v55 != a1 && v55 != 0);
    }
    if (!v54) {
      return result;
    }
LABEL_116:
    double v53 = (__n64 *)m;
    goto LABEL_117;
  }
  if (((v32 | v26) & 1) == 0)
  {
    uint64_t result = CGPDFNodeIsHitByPoint(i, a10, a11, a12);
    if (result)
    {
      BOOL v43 = i != 0;
      if (i != a1 && i)
      {
        uint64_t v44 = i;
        do
        {
          uint64_t v44 = *(void *)(v44 + 8);
          BOOL v43 = v44 != 0;
        }
        while (v44 != a1 && v44 != 0);
      }
      if (v43)
      {
LABEL_82:
        __double2 v46 = (__n64 *)i;
LABEL_130:
        double v62 = (_DWORD *)CGPDFNodeGetClosestAreaDescendantToPoint(v46, a2, a3, &v70, a10, a11, a12);
        __double2 v58 = v62;
        if (v70)
        {
          uint64_t result = (uint64_t)CGPDFNodeGetNodeBefore((_DWORD *)v18, v62, a2, a3);
          *a6 = result;
        }
        else
        {
          *a6 = (uint64_t)v62;
          uint64_t result = CGPDFNodeGetNodeAfter((_DWORD *)v18, v62, a2, a3);
          __double2 v58 = (_DWORD *)result;
        }
        uint64_t v63 = a7;
        goto LABEL_136;
      }
    }
  }
  return result;
}

void CGPDFNodeGetNodeRangeFromIndexToPoint(__n64 *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n64 **a6, __n64 **a7, uint64_t *a8, double a9, double a10, double a11)
{
  if (a1)
  {
    double v21 = a1;
    while (v21->n64_u32[0] != 517)
    {
      double v21 = (__n64 *)v21[1].n64_u64[0];
      if (!v21) {
        goto LABEL_5;
      }
    }
    uint64_t v22 = v21[13].n64_i64[0];
  }
  else
  {
LABEL_5:
    uint64_t v22 = 0;
  }
  v23.n64_u64[0] = CGPDFLayoutGetRectForTextRange(v22, a3, 1).n64_u64[0];
  double v25 = v24;
  double v27 = v26;
  double v29 = v28;
  if (a4) {
    NodeFollowingTextIndedouble x = (__n64 *)CGPDFNodeGetNodeFollowingTextIndex(a1, a3);
  }
  else {
    NodeFollowingTextIndedouble x = (__n64 *)CGPDFNodeGetNodePrecedingTextIndex(a1, a3);
  }
  int v31 = NodeFollowingTextIndex;
  BOOL v71 = a7;
  uint64_t v72 = a3;
  if (NodeFollowingTextIndex)
  {
    int v32 = NodeFollowingTextIndex;
    do
    {
      if (v32->n64_u32[0] == a2)
      {
        uint64_t v35 = a8;
        goto LABEL_27;
      }
      int v32 = (__n64 *)v32[1].n64_u64[0];
    }
    while (v32);
    if (!a5) {
      goto LABEL_25;
    }
    if (NodeFollowingTextIndex->n64_u32[0] != 513 && (NodeFollowingTextIndex->n64_u32[0] & 0x100) == 0) {
      goto LABEL_25;
    }
    BOOL v34 = NodeFollowingTextIndex;
    do
    {
      if (v34->n64_u32[0] == 513) {
        break;
      }
      BOOL v34 = (__n64 *)v34[1].n64_u64[0];
    }
    while (v34);
    uint64_t v35 = a8;
    if (v34) {
      int v32 = v34;
    }
    else {
      int v32 = NodeFollowingTextIndex;
    }
LABEL_27:
    uint64_t v36 = v32;
    do
    {
      if (v36->n64_u32[0] == 1538)
      {
        BOOL v37 = (_DWORD *)v36[13].n64_u64[0];
        if (v37)
        {
          if (*v37 == 2) {
            break;
          }
        }
      }
      uint64_t v36 = (__n64 *)v36[1].n64_u64[0];
    }
    while (v36);
  }
  else
  {
LABEL_25:
    uint64_t v35 = a8;
    int v32 = 0;
    uint64_t v36 = 0;
  }
  BOOL v75 = 0;
  ClosestNodeToPoint = CGPDFNodeGetClosestNodeToPoint(a1, a2, a5, &v75, a9, a10, a11);
  if (v75)
  {
    NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(a1, ClosestNodeToPoint, a2, a5);
    uint64_t NodeAfter = (uint64_t)ClosestNodeToPoint;
  }
  else
  {
    uint64_t NodeAfter = CGPDFNodeGetNodeAfter(a1, ClosestNodeToPoint, a2, a5);
    NodeBefore = ClosestNodeToPoint;
  }
  uint64_t v76 = NodeAfter;
  for (uint64_t i = NodeBefore; ClosestNodeToPoint; ClosestNodeToPoint = (__n64 *)ClosestNodeToPoint[1].n64_u64[0])
  {
    if (ClosestNodeToPoint->n64_u32[0] == 1538)
    {
      uint64_t v41 = (_DWORD *)ClosestNodeToPoint[13].n64_u64[0];
      if (v41)
      {
        if (*v41 == 2) {
          break;
        }
      }
    }
  }
  if (v31 && v36 == ClosestNodeToPoint)
  {
    if (!v32)
    {
LABEL_58:
      if (!a4 || !NodeAfter)
      {
        if ((a4 & 1) == 0 && i) {
          goto LABEL_62;
        }
        uint64_t v45 = v71;
        *a6 = 0;
        __double2 v46 = v35;
        uint64_t v47 = v72;
LABEL_78:
        *uint64_t v45 = v32;
        if (a4)
        {
          if (!CGPDFNodeIsHitByPoint((uint64_t)i, a9, a10, a11)
            || (CGPDFNodeIsHitByPoint(v76, a9, a10, a11) & 1) != 0)
          {
            goto LABEL_87;
          }
        }
        else if (!CGPDFNodeIsHitByPoint(v76, a9, a10, a11) {
               || CGPDFNodeIsHitByPoint((uint64_t)i, a9, a10, a11))
        }
        {
LABEL_87:
          if (v32)
          {
            unsigned __int32 v52 = v32->n64_u32[0];
            if (v32->n64_u32[0] == 514 || v52 == 1)
            {
              CGPDFNodeGetBounds(v32);
              double v25 = v53;
              double v29 = v54;
            }
            double v55 = -0.0;
            if (a4) {
              double v56 = -0.0;
            }
            else {
              double v56 = v27;
            }
            double v57 = v23.n64_f64[0] + v56;
            if (a4) {
              double v55 = v29;
            }
            double v58 = v25 + v55;
            double Rotation = CGPDFNodeGetRotation((uint64_t)v32);
            if (Rotation == 0.0)
            {
              double v62 = a9;
              double v63 = a10;
            }
            else
            {
              __double2 v60 = __sincos_stret(Rotation);
              double v61 = v58 * v60.__cosval - v60.__sinval * v57;
              double v57 = v58 * v60.__sinval + v60.__cosval * v57 + 0.0;
              double v58 = v61 + 0.0;
              double v62 = a10 * v60.__sinval + v60.__cosval * a9 + 0.0;
              double v63 = a10 * v60.__cosval - v60.__sinval * a9 + 0.0;
            }
            if (v52 == 1 || v52 == 516 || v52 == 514)
            {
              BOOL v66 = v57 == v62;
              if (v58 < v63) {
                BOOL v66 = 0;
              }
              if (v57 < v62) {
                BOOL v66 = 1;
              }
              goto LABEL_116;
            }
          }
          else
          {
            double v64 = -0.0;
            if (a4) {
              double v65 = -0.0;
            }
            else {
              double v65 = v27;
            }
            double v57 = v23.n64_f64[0] + v65;
            if (a4) {
              double v64 = v29;
            }
            double v58 = v25 + v64;
            double v63 = a10;
            double v62 = a9;
          }
          BOOL v66 = v58 == v63;
          if (v57 > v62) {
            BOOL v66 = 0;
          }
          if (v58 > v63) {
            BOOL v66 = 1;
          }
LABEL_116:
          char v50 = v66 ^ a4;
          if (!v46) {
            return;
          }
          goto LABEL_117;
        }
LABEL_72:
        char v50 = 1;
        if (!v46) {
          return;
        }
        goto LABEL_117;
      }
      goto LABEL_69;
    }
    uint64_t v42 = (uint64_t)v32;
    while (*(_DWORD *)v42 != 516)
    {
      uint64_t v42 = *(void *)(v42 + 8);
      if (!v42) {
        goto LABEL_53;
      }
    }
    if (v22)
    {
      if (v23.n64_f64[0] != INFINITY && v25 != INFINITY)
      {
        int v73 = v32;
        uint64_t v74 = v32;
        CGPDFNodeMakeLayoutAreasConsistent(v42, a2, a5, (uint64_t *)&v73, (uint64_t *)&v74, (uint64_t *)&i, &v76, v23.n64_f64[0] + v27 * 0.5, v25 + v29 * 0.5, a9, a10, a11);
      }
    }
  }
LABEL_53:
  if (!v32)
  {
    uint64_t NodeAfter = v76;
    goto LABEL_58;
  }
  if (!a4)
  {
    uint64_t v44 = (uint64_t)i;
    if (i) {
      goto LABEL_64;
    }
LABEL_69:
    uint64_t v45 = v71;
    *a6 = v32;
    __double2 v46 = v35;
    uint64_t v47 = v72;
    goto LABEL_70;
  }
  uint64_t v44 = v76;
  if (!v76)
  {
LABEL_62:
    uint64_t v45 = v71;
    *a6 = v32;
    __double2 v46 = v35;
    uint64_t v47 = v72;
    goto LABEL_66;
  }
LABEL_64:
  uint64_t v48 = CGPDFNodeCompareReadingOrder((uint64_t)v32, v44);
  uint64_t v45 = v71;
  *a6 = v32;
  __double2 v46 = v35;
  uint64_t v47 = v72;
  if (v48 != 1)
  {
    if (v48 == -1)
    {
LABEL_66:
      if (a4)
      {
        uint64_t v49 = v76;
        if (!CGPDFNodeIsHitByPoint(v76, a9, a10, a11))
        {
          char v50 = 0;
          uint64_t v51 = (uint64_t)i;
          goto LABEL_83;
        }
LABEL_75:
        char v50 = 0;
        *uint64_t v45 = (__n64 *)v49;
        if (!v46) {
          return;
        }
        goto LABEL_117;
      }
      goto LABEL_71;
    }
    goto LABEL_78;
  }
LABEL_70:
  if (a4)
  {
LABEL_71:
    *uint64_t v45 = v32;
    goto LABEL_72;
  }
  uint64_t v49 = (uint64_t)i;
  if (CGPDFNodeIsHitByPoint((uint64_t)i, a9, a10, a11)) {
    goto LABEL_75;
  }
  char v50 = 0;
  uint64_t v51 = v76;
LABEL_83:
  *uint64_t v45 = (__n64 *)v51;
  if (!v46) {
    return;
  }
LABEL_117:
  uint64_t v67 = v47 - 1;
  if (!a4) {
    uint64_t v67 = v47 + 1;
  }
  *__double2 v46 = v67;
  if ((v50 & 1) == 0)
  {
    uint64_t v68 = *v45 ? *v45 : v32;
    if (v68)
    {
      if (a4)
      {
        uint64_t TextIndexBeforePoint = CGPDFNodeGetTextIndexBeforePoint(v68, a9, a10, a11);
        if (TextIndexBeforePoint < v47) {
          return;
        }
      }
      else
      {
        uint64_t TextIndexBeforePoint = CGPDFNodeGetTextIndexAfterPoint(v68, a9, a10, a11);
        if (TextIndexBeforePoint > v47) {
          return;
        }
      }
      *__double2 v46 = TextIndexBeforePoint;
    }
  }
}

__n64 *CGPDFNodeGetContentNodeAtPoint(uint64_t a1, double a2, double a3)
{
  char v4 = 0;
  return CGPDFNodeGetTopmostContentNodeAtPoint(a1, &v4, a2, a3);
}

__n64 *CGPDFNodeGetTopmostContentNodeAtPoint(uint64_t a1, char *a2, double a3, double a4)
{
  uint64_t v7 = (__n64 *)a1;
  double Rotation = CGPDFNodeGetRotation(a1);
  if (Rotation == 0.0)
  {
    double v11 = a4;
    double v10 = a3;
    if (!v7) {
      goto LABEL_14;
    }
  }
  else
  {
    __double2 v9 = __sincos_stret(Rotation);
    double v10 = a4 * v9.__sinval + v9.__cosval * a3 + 0.0;
    double v11 = a4 * v9.__cosval - v9.__sinval * a3 + 0.0;
    if (!v7) {
      goto LABEL_14;
    }
  }
  v32.origin.double x = CGPDFNodeGetBounds(v7).n64_f64[0];
  v30.double x = v10;
  v30.double y = v11;
  BOOL v12 = CGRectContainsPoint(v32, v30);
  if (!v12)
  {
    uint64_t v7 = 0;
    goto LABEL_15;
  }
  unsigned __int32 v13 = v7->n64_u32[0];
  if (v7->n64_i32[0] <= 512)
  {
    if (v13 == 257)
    {
LABEL_10:
      LOBYTE(v12) = 1;
      goto LABEL_15;
    }
    if (v13 != 258) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  if (v13 != 515)
  {
    if (v13 != 513)
    {
LABEL_9:
      if ((v13 & 0x200) == 0) {
        goto LABEL_10;
      }
      *a2 = 0;
      uint64_t v22 = v7[5].n64_u32[1];
      if (!v22) {
        return 0;
      }
      unint64_t v23 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        char v29 = 0;
        if ((v7->n64_u8[1] & 2) != 0 && v23 < v7[5].n64_u32[1]) {
          uint64_t v24 = *(void *)(v7[7].n64_u64[0] + 8 * v23);
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t TopmostContentNodeAtPoint = CGPDFNodeGetTopmostContentNodeAtPoint(v24, &v29, a3, a4);
        if (!TopmostContentNodeAtPoint) {
          goto LABEL_51;
        }
        char v26 = v29;
        if (!v14) {
          goto LABEL_50;
        }
        if (v29) {
          break;
        }
        if (!*a2) {
          goto LABEL_39;
        }
LABEL_51:
        if (++v23 == v22) {
          return v14;
        }
      }
      if (*a2)
      {
LABEL_39:
        uint64_t v27 = TopmostContentNodeAtPoint;
        while ((*(unsigned char *)(v27 + 1) & 3) == 0)
        {
          uint64_t v27 = *(void *)(v27 + 8);
          if (!v27) {
            goto LABEL_44;
          }
        }
        uint64_t v27 = *(void *)(v27 + 96);
LABEL_44:
        double v28 = v14;
        while ((v28->n64_u8[1] & 3) == 0)
        {
          double v28 = (__n64 *)v28[1].n64_u64[0];
          if (!v28) {
            goto LABEL_49;
          }
        }
        double v28 = (__n64 *)v28[12].n64_u64[0];
LABEL_49:
        if (v27 < (uint64_t)v28) {
          goto LABEL_51;
        }
      }
      else
      {
        char v26 = 1;
      }
LABEL_50:
      *a2 = v26;
      uint64_t v14 = (__n64 *)TopmostContentNodeAtPoint;
      goto LABEL_51;
    }
LABEL_14:
    LOBYTE(v12) = 0;
    goto LABEL_15;
  }
  *a2 = 0;
  uint64_t v16 = v7[5].n64_u32[1];
  if (!v16) {
    return v7;
  }
  unint64_t v17 = 0;
  while (1)
  {
    uint64_t v14 = (v7->n64_u8[1] & 2) != 0 && v17 < v7[5].n64_u32[1] ? *(__n64 **)(v7[7].n64_u64[0] + 8 * v17) : 0;
    v18.n64_u64[0] = CGPDFNodeGetBounds(v14).n64_u64[0];
    if (v19.n64_f64[0] <= v11) {
      break;
    }
    if (v16 == ++v17) {
      return v14;
    }
  }
  v31.double x = v10;
  v31.double y = v11;
  LOBYTE(v12) = CGRectContainsPoint(*(CGRect *)v18.n64_u64, v31);
  uint64_t v7 = v14;
LABEL_15:
  *a2 = v12;
  return v7;
}

double CGPDFNodeGetContentRect(__n64 *a1)
{
  uint64_t v1 = a1;
  v3.n64_u64[0] = CGPDFNodeGetBounds(a1).n64_u64[0];
  if (v1 && (v1->n64_u32[0] == 1537 || v1->n64_u32[0] == 514) && v3.n64_f64[0] != INFINITY && v2.n64_f64[0] != INFINITY)
  {
    while (v1->n64_u32[0] != 515)
    {
      uint64_t v1 = (__n64 *)v1[1].n64_u64[0];
      if (!v1) {
        return v3.n64_f64[0];
      }
    }
    v5.n64_u64[0] = CGPDFNodeGetBounds(v1).n64_u64[0];
    BOOL v6 = v5.n64_f64[0] == INFINITY;
    if (v7 == INFINITY) {
      BOOL v6 = 1;
    }
    if (!v6) {
      v3.n64_u64[0] = v5.n64_u64[0];
    }
  }
  return v3.n64_f64[0];
}

dispatch_once_t RIPLayerDepthForModel(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a1 + 1;
  unsigned int v9 = 0;
  unsigned int v10 = WORD1(a2) & 0x3F;
  switch(v8)
  {
    case 0:
      return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
    case 1:
      if (v10 <= 0x10)
      {
        if (v10 < 9 || (a2 & 1) != 0)
        {
          unsigned int v9 = 1;
          if (v10 >= 9 && (a2 & 1) != 0) {
            unsigned int v9 = 23;
          }
        }
        else
        {
          unsigned int v9 = 12;
        }
      }
      else
      {
        unsigned int v9 = 18;
      }
      return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
    case 2:
      if (v10 > 0x10)
      {
        unsigned int v9 = 20;
        return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v10 >= 9 && (a2 & 1) == 0)
      {
        unsigned int v9 = 14;
        return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
      }
      BOOL v12 = (a2 & 1) != 0 && v10 >= 9;
      int v13 = 24;
      int v14 = 6;
      goto LABEL_27;
    case 3:
      if (v10 <= 0x10)
      {
        if (v10 < 9 || (a2 & 1) != 0)
        {
          BOOL v12 = (a2 & 1) != 0 && v10 >= 9;
          int v13 = 25;
          int v14 = 10;
LABEL_27:
          if (v12) {
            unsigned int v9 = v13;
          }
          else {
            unsigned int v9 = v14;
          }
        }
        else
        {
          unsigned int v9 = 16;
        }
      }
      else
      {
        unsigned int v9 = 22;
      }
      return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
    default:
      return 0;
  }
}

char *RIPLayerCreateWithLayer(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = *a3;
    if (*a3)
    {
      if (a3[4])
      {
        uint64_t v6 = a2 ? (uint64_t)a2 : (uint64_t)a3 + 12;
        if ((*(_DWORD *)(v6 + 8) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 12) & 0x80000000) == 0)
        {
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          unsigned int v9 = (_DWORD **)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *))(v5 + 32))(a3, 16, &v95);
          if (v9)
          {
            unint64_t v17 = *v9;
            if (*v9)
            {
              if (v17 == (_DWORD *)RIPGetDepthForLayerFormat(0, v10, v11, v12, v13, v14, v15, v16))
              {
                size_t v23 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a1);
                uint64_t v24 = (char *)malloc_type_calloc(1uLL, v23, 0xC1091532uLL);
                double v21 = v24;
                if (!v24) {
                  goto LABEL_85;
                }
                *(void *)uint64_t v24 = a1;
                *((_DWORD *)v24 + 2) = 1;
                *(_OWORD *)(v24 + 12) = *(_OWORD *)v6;
                *((_DWORD *)v24 + 7) = 0;
                *((void *)v24 + 4) = v17;
                pthread_mutex_init((pthread_mutex_t *)(v24 + 80), 0);
              }
              else
              {
                double v21 = RIPLayerCreate(a1, v6, a3[9] != 0, (uint64_t)v17, a4, v18, v19, v20);
                if (!v21) {
                  goto LABEL_85;
                }
              }
              if ((CGSBoundsIntersection((int *)v21 + 3, (int *)a3 + 3, &v95) & 1) == 0)
              {
                if (v17 == (_DWORD *)RIPGetDepthForLayerFormat(0, v25, v26, v27, v28, v29, v30, v31)
                  && (*((_DWORD *)v21 + 5) || *((_DWORD *)v21 + 6)))
                {
                  *((void *)v21 + 9) = &the_empty_shape;
                  *((_DWORD *)v21 + 16) = 12;
                }
                goto LABEL_85;
              }
              if ((*(uint64_t (**)(char *, uint64_t, char *))(*(void *)v21 + 32))(v21, 32, v21 + 12))
              {
                int v39 = v95;
                int v40 = HIDWORD(v95);
                int v93 = HIDWORD(v95);
                int v94 = v95;
                int v42 = v96;
                unsigned int v41 = HIDWORD(v96);
                int v91 = HIDWORD(v96);
                signed int v92 = v96;
                size_t v43 = RIPGetDepthForLayerFormat(0, v32, v33, v34, v35, v36, v37, v38);
                if (v17 != (_DWORD *)v43)
                {
                  uint64_t v44 = *((void *)v21 + 7);
                  if (!v44) {
                    goto LABEL_84;
                  }
                  uint64_t v45 = (int)v95 - (uint64_t)*((int *)v21 + 3);
                  int v46 = *((_DWORD *)v21 + 6) + *((_DWORD *)v21 + 4) - (HIDWORD(v96) + HIDWORD(v95));
                  uint64_t v47 = (int)v95 - (uint64_t)*((int *)a3 + 3);
                  int v48 = *((_DWORD *)a3 + 4) - (HIDWORD(v96) + HIDWORD(v95)) + *((_DWORD *)a3 + 6);
                  CGBlt_copyBytes(v42 * (*v17 >> 25), v41, (char *)(a3[7] + (*((_DWORD *)a3 + 12) * v48) + (*v17 >> 25) * (uint64_t)(int)v47), (char *)(v44+ (*((_DWORD *)v21 + 12) * v46)+ (*v17 >> 25) * (uint64_t)((int)v95 - *((_DWORD *)v21 + 3))), *((_DWORD *)a3 + 12), *((_DWORD *)v21 + 12));
                  uint64_t v49 = *((void *)v21 + 9);
                  if (!v49 || v49 == *((void *)v21 + 7)) {
                    goto LABEL_84;
                  }
                  int v50 = *((_DWORD *)v21 + 16);
                  uint64_t v51 = (char *)(v49 + v45 + (v50 * v46));
                  uint64_t v52 = a3[9];
                  if (!v52 || v52 == a3[7])
                  {
                    CGBlt_fillBytes(v42, v41, -1, v51, *((_DWORD *)v21 + 16));
                    goto LABEL_84;
                  }
                  int v53 = *((_DWORD *)a3 + 16);
                  double v54 = (char *)(v52 + v47 + (v53 * v48));
                  int v55 = v42;
                  int v56 = v41;
                  goto LABEL_28;
                }
                double v57 = (int32x2_t *)a3[9];
                if (v57)
                {
                  int v58 = *((_DWORD *)a3 + 4);
                  int v59 = *((_DWORD *)a3 + 3) - *((_DWORD *)v21 + 3);
                  int v60 = *((_DWORD *)v21 + 5);
                  int v61 = *((_DWORD *)v21 + 6);
                  int v62 = v61 + *((_DWORD *)v21 + 4);
                  int v63 = *((_DWORD *)a3 + 5);
                  int v93 = v62 - (v58 + *((_DWORD *)a3 + 6));
                  int v94 = v59;
                  shape_combine(0, 0, 0, v60, v61, 0, v59, v93, v63 + v59, v62 - v58, v57);
                  if (v64)
                  {
                    double v65 = (void *)v64;
                    int v66 = shape_bounds(v64, &v94, &v93, &v92, &v91);
                    if (v66)
                    {
                      BOOL v68 = v66 == 9 && v94 == 0 && v93 == 0;
                      if (v68 && v92 == *((_DWORD *)v21 + 5) && v91 == *((_DWORD *)v21 + 6))
                      {
                        if (v65 != &the_empty_shape) {
                          free(v65);
                        }
                        goto LABEL_84;
                      }
                      *((void *)v21 + 9) = v65;
                      int v79 = 4 * v66;
                      goto LABEL_83;
                    }
                  }
                  goto LABEL_82;
                }
                int v69 = *((_DWORD *)a3 + 16);
                if (v69)
                {
                  size_t v43 = ripl_Containment(&v95, (_DWORD *)a3 + 3, v69);
                  unsigned int v70 = v43;
                  int v71 = *((_DWORD *)v21 + 6);
                  uint64_t v72 = *((int *)v21 + 5);
                  if (v42 == v72 && v41 == v71)
                  {
                    *((_DWORD *)v21 + 16) = v43;
                    goto LABEL_84;
                  }
                  uint64_t v74 = (int)v95 - (uint64_t)*((int *)v21 + 3);
                  int v40 = v71 + *((_DWORD *)v21 + 4) - (HIDWORD(v95) + HIDWORD(v96));
                  int v93 = v40;
                  int v94 = v74;
                  if (v43)
                  {
                    unint64_t v75 = (v72 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v76 = v71 * v75 + 4;
                    unsigned int v77 = (v71 * v75 + 19) & 0xFFFFFFF0;
                    if (v76 >> 31) {
                      size_t v43 = 0xFFFFFFFFLL;
                    }
                    else {
                      size_t v43 = v77;
                    }
                    if ((int)v43 >= 1)
                    {
                      size_t v43 = (size_t)malloc_type_malloc(v43, 0x7F66252BuLL);
                      *((void *)v21 + 7) = v43;
                      if (v43)
                      {
                        unsigned int v78 = (char *)(v43 + v40 * (int)v75 + v74);
                        *((_DWORD *)v21 + 7) &= ~2u;
                        *((_DWORD *)v21 + 12) = v75;
                        CGBlt_fillBytes(v42, v41, -1, v78, v75);
                        CGSCombineMask(0, 0, v78, v75, v42, v41, v70);
                        goto LABEL_84;
                      }
                    }
                    int v88 = v42 + v74;
                  }
                  else
                  {
                    int v88 = v74 + v42;
                  }
                  int v89 = v41 + v40;
                  int v86 = v74;
                }
                else
                {
                  uint64_t v80 = *((int *)v21 + 5);
                  if (!a3[7])
                  {
                    int v84 = *((_DWORD *)v21 + 6);
                    if (v42 == v80 && v41 == v84) {
                      goto LABEL_84;
                    }
                    int v86 = v95 - *((_DWORD *)v21 + 3);
                    int v87 = v84 + *((_DWORD *)v21 + 4) - (HIDWORD(v95) + HIDWORD(v96));
                    int v93 = v87;
                    int v94 = v86;
                    int v88 = v86 + v42;
                    int v89 = v41 + v87;
LABEL_80:
                    shape_alloc_bounds(v43, v86, v87, v88, v89);
                    *((void *)v21 + 9) = v90;
                    if (v90)
                    {
                      int v79 = 36;
LABEL_83:
                      *((_DWORD *)v21 + 16) = v79;
                      goto LABEL_84;
                    }
LABEL_82:
                    *((void *)v21 + 9) = &the_empty_shape;
                    int v79 = 12;
                    goto LABEL_83;
                  }
                  unint64_t v81 = (v80 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                  if ((v81 * *((int *)v21 + 6) + 4) >> 31) {
                    size_t v43 = 0xFFFFFFFFLL;
                  }
                  else {
                    size_t v43 = (v81 * *((_DWORD *)v21 + 6) + 19) & 0xFFFFFFF0;
                  }
                  if ((int)v43 >= 1)
                  {
                    size_t v43 = (size_t)malloc_type_malloc(v43, 0x2D4D6C7EuLL);
                    if (v43)
                    {
                      int v82 = *((_DWORD *)v21 + 6);
                      *((_DWORD *)v21 + 7) &= ~2u;
                      *((_DWORD *)v21 + 12) = v81;
                      *((void *)v21 + 7) = v43;
                      int v56 = HIDWORD(v96);
                      uint64_t v51 = (char *)(v43
                                   + (v82 + *((_DWORD *)v21 + 4) - (HIDWORD(v96) + HIDWORD(v95))) * (int)v81
                                   + (int)v95
                                   - (uint64_t)*((int *)v21 + 3));
                      uint64_t v83 = (int)v95 - (uint64_t)*((int *)a3 + 3);
                      int v93 = *((_DWORD *)a3 + 4) - (HIDWORD(v96) + HIDWORD(v95)) + *((_DWORD *)a3 + 6);
                      int v94 = v83;
                      int v53 = *((_DWORD *)a3 + 12);
                      double v54 = (char *)(a3[7] + v83 + (v53 * v93));
                      int v55 = v96;
                      int v50 = v81;
LABEL_28:
                      CGBlt_copyBytes(v55, v56, v54, v51, v53, v50);
LABEL_84:
                      (*(void (**)(char *, char *))(*(void *)v21 + 48))(v21, v21 + 12);
                      goto LABEL_85;
                    }
                  }
                  int v88 = v42 + v39;
                  int v89 = v41 + v40;
                  int v86 = v39;
                }
                int v87 = v40;
                goto LABEL_80;
              }
            }
            else
            {
              double v21 = 0;
            }
LABEL_85:
            (*(void (**)(uint64_t *, void))(*a3 + 48))(a3, 0);
            return v21;
          }
        }
      }
    }
  }
  return 0;
}

char *RIPLayerConvertLayer(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v41 = unk_185293590;
  long long v42 = xmmword_1852935A0;
  long long v37 = unk_185293550;
  long long v38 = xmmword_185293560;
  long long v39 = unk_185293570;
  long long v40 = xmmword_185293580;
  long long v33 = unk_185293510;
  long long v34 = xmmword_185293520;
  uint64_t v43 = 0;
  long long v35 = unk_185293530;
  long long v36 = xmmword_185293540;
  memset(v29, 0, sizeof(v29));
  long long v30 = xmmword_1852934E0;
  long long v31 = unk_1852934F0;
  long long v32 = xmmword_185293500;
  uint64_t v28 = 0;
  long long v27 = 0u;
  long long v26 = 0u;
  if (!a3) {
    return 0;
  }
  if (!*(void *)a3) {
    return 0;
  }
  if (!*(void *)(a3 + 32)) {
    return 0;
  }
  if ((*(_DWORD *)(a3 + 20) & 0x80000000) != 0) {
    return 0;
  }
  if ((*(_DWORD *)(a3 + 24) & 0x80000000) != 0) {
    return 0;
  }
  int v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 16, a3 + 12);
  if (!v8) {
    return 0;
  }
  *(void *)&long long v30 = *v8;
  if (!(void)v30) {
    goto LABEL_12;
  }
  *(void *)&long long v31 = 0;
  uint64_t v23 = 0;
  unsigned int v15 = *(_DWORD *)(a3 + 24);
  DWORD2(v31) = *(_DWORD *)(a3 + 20);
  HIDWORD(v31) = v15;
  int v24 = DWORD2(v31);
  unsigned int v25 = v15;
  *((void *)&v30 + 1) = __PAIR64__(v15, DWORD2(v31));
  if (!*(void *)(a3 + 56) && (ripl_CreateMask(a3, 0, v9, v10, v11, v12, v13, v14) & 1) == 0)
  {
LABEL_12:
    (*(void (**)(uint64_t, void))(*(void *)a3 + 48))(a3, 0);
    return 0;
  }
  uint64_t v16 = RIPLayerCreate(a1, (uint64_t)&v23, (*(void *)(a3 + 72) != 0) | a2, 0, a4, v12, v13, v14);
  uint64_t v20 = v16;
  if (v16)
  {
    *((void *)&v32 + 1) = *(void *)(a3 + 56);
    LODWORD(v32) = *(_DWORD *)(a3 + 48);
    LODWORD(v33) = *(_DWORD *)(a3 + 64);
    uint64_t v21 = *(void *)(a3 + 72);
    long long v34 = 0uLL;
    *((void *)&v33 + 1) = v21;
    uint64_t v28 = 0;
    *(void *)&long long v27 = 0;
    long long v26 = (unint64_t)v29;
    DWORD2(v27) = 0;
    RIPLayerBltImage((uint64_t)v16, 0, 0, (uint64_t)&v23, (uint64_t)&unk_185293238, v17, v18, v19);
    *(void *)(v20 + 12) = *(void *)(a3 + 12);
    (*(void (**)(uint64_t, char *))(*(void *)a3 + 48))(a3, v20 + 12);
  }
  else
  {
    (*(void (**)(uint64_t, void))(*(void *)a3 + 48))(a3, 0);
  }
  return v20;
}

uint64_t ripl_BltOpSourceLayer(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  int v6 = *(_DWORD *)(a5 + 12);
  int v5 = *(_DWORD *)(a5 + 16);
  int v7 = *(_DWORD *)(a5 + 20);
  int v8 = *(_DWORD *)(a5 + 24);
  if (a4)
  {
    v6 += *a4;
    v5 += a4[1];
  }
  if (v7 <= 1 && v8 <= 1)
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v10 = 4;
    *(unsigned char *)(a1 + 1) = 4;
    *(void *)(a1 + 56) = 0;
  }
  else
  {
    if ((_DWORD *)a5 != a3 && (*(unsigned char *)(a5 + 28) & 8) != 0)
    {
      uint64_t v10 = 2;
      *(unsigned char *)(a1 + 1) = 2;
      int v11 = v5 + v8 - (a3[4] + a3[6]) + *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 56) = a3[3] - v6 + *(_DWORD *)(a1 + 12);
    }
    else
    {
      uint64_t v10 = 1;
      *(unsigned char *)(a1 + 1) = 1;
      *(_DWORD *)(a1 + 56) = *a2 - v6;
      int v11 = v5 + v8 - (a2[1] + a2[3]);
    }
    *(_DWORD *)(a1 + 60) = v11;
  }
  *(_DWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 6++*(_DWORD *)(result + 8) = v8;
  int v12 = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v12;
  uint64_t v13 = *(void *)(a5 + 56);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a5 + 64);
  uint64_t v14 = *(void *)(a5 + 72);
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v13;
  *(void *)(a1 + 96) = v14;
  return v10;
}

uint64_t ripl_super()
{
  return 0;
}

void RIPLayerResample(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    BOOL v10 = !*(void *)a1 || a2 == 0;
    if (!v10 && (*a2 != 0.0 || a2[1] != 1.0))
    {
      int v11 = *(_DWORD **)(a1 + 32);
      if (v11
        && v11 == (_DWORD *)RIPGetDepthForLayerFormat(0, (uint64_t)a2, a3, a4, a5, a6, a7, a8)
        && (*(void *)(a1 + 56) || ripl_CreateMask(a1, 1, v12, v13, v14, v15, v16, v17)))
      {
        uint64_t v19 = decode_create((unsigned __int16)*v11 >> 12, *v11 >> 22, *v11 >> 22, (uint64_t)a2, 1, v18);
        if (v19)
        {
          uint64_t v22 = v19;
          decode_data(v19, *(unsigned int *)(a1 + 20), *(_DWORD *)(a1 + 24), *(char **)(a1 + 56), *(_DWORD *)(a1 + 48), *(uint16x4_t **)(a1 + 56), *(_DWORD *)(a1 + 48), 0, v20, v21, 0);
          free(v22);
        }
      }
    }
  }
}

uint64_t RIPLayerTransfer(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    if (a3)
    {
      uint64_t v9 = result;
      if (*(void *)result)
      {
        long long v23 = 0uLL;
        BOOL v10 = *(_DWORD **)(result + 32);
        if ((!v10 || (*v10 & 0x3F0000) == 0x80000) && (*(_DWORD *)(result + 20) & 0x80000000) == 0)
        {
          int v11 = *(_DWORD *)(result + 24);
          if ((v11 & 0x80000000) == 0)
          {
            result += 12;
            if (a2)
            {
              uint64_t result = CGSBoundsIntersection((int *)result, a2, &v23);
              if (!result) {
                return result;
              }
              int v12 = v23 - *(_DWORD *)(v9 + 12);
              int v13 = v11 + *(_DWORD *)(v9 + 16) - (DWORD1(v23) + HIDWORD(v23));
            }
            else
            {
              int v12 = 0;
              int v13 = 0;
              long long v23 = *(_OWORD *)result;
            }
            if (*(void *)(v9 + 56) || (uint64_t result = ripl_CreateMask(v9, 1, a3, a4, a5, a6, a7, a8), result))
            {
              int v14 = HIDWORD(v23);
              if (SHIDWORD(v23) >= 1)
              {
                int v15 = *v10 >> 25;
                int v16 = DWORD2(v23) * v15;
                int v17 = *(_DWORD *)(v9 + 48);
                __n128 v18 = (int *)(*(void *)(v9 + 56) + (v17 * v13) + v15 * v12);
                uint64_t v19 = v17 - v16;
                do
                {
                  int v20 = v16;
                  if (v16 >= 4)
                  {
                    do
                    {
                      *__n128 v18 = *(unsigned __int8 *)(a3 + *v18) | (*(unsigned __int8 *)(a3 + BYTE1(*v18)) << 8) | (*(unsigned __int8 *)(a3 + BYTE2(*v18)) << 16) | (*(unsigned __int8 *)(a3 + ((unint64_t)*v18 >> 24)) << 24);
                      ++v18;
                      BOOL v21 = v20 > 7;
                      v20 -= 4;
                    }
                    while (v21);
                  }
                  if (v20 >= 1)
                  {
                    unsigned int v22 = v20 + 1;
                    do
                    {
                      *(unsigned char *)__n128 v18 = *(unsigned char *)(a3 + *(unsigned __int8 *)v18);
                      __n128 v18 = (int *)((char *)v18 + 1);
                      --v22;
                    }
                    while (v22 > 1);
                  }
                  __n128 v18 = (int *)((char *)v18 + v19);
                  BOOL v21 = v14-- <= 1;
                }
                while (!v21);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

char *RIPLayerClip(uint64_t a1, signed int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (char *)a1;
  if (!a2) {
    return v8;
  }
  uint64_t v9 = a4;
  LODWORD(v10) = a3;
  signed int v11 = *a2;
  int v12 = a2[1];
  int v13 = *a2 + a2[2];
  int v14 = v12 + a2[3];
  int v15 = (_OWORD *)(a1 + 12);
  int v16 = *(_DWORD *)(a1 + 12);
  int v18 = *(_DWORD *)(a1 + 20);
  int v17 = *(_DWORD *)(a1 + 24);
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  int v20 = v16 + v18;
  int v21 = v19 + v17;
  uint64_t v22 = *(void *)(a1 + 72);
  if (v22 || (unsigned int v30 = *(_DWORD *)(a1 + 64)) == 0)
  {
    unsigned int v23 = v10 & 0xFFFFFF;
    if (v16 > v11) {
      signed int v11 = v16;
    }
    else {
      unsigned int v23 = v10;
    }
    a4 = v23 & 0xFFFFFF00;
    if ((int)v19 > v12)
    {
      v23 &= 0xFFFFFF00;
      int v12 = v19;
    }
    uint64_t v19 = v23 & 0xFFFF00FF;
    if (v20 < v13)
    {
      v23 &= 0xFFFF00FF;
      int v13 = v16 + v18;
    }
    if (v21 >= v14) {
      uint64_t v10 = v23;
    }
    else {
      uint64_t v10 = v23 & 0xFF00FFFF;
    }
    if (v21 < v14) {
      int v14 = v21;
    }
  }
  else if (v10)
  {
    if (v16 <= v11)
    {
      if (v16 == v11)
      {
        unsigned int v36 = (~v30 >> 24) * (~v10 >> 24);
        a5 = 4294836224;
        a4 = (-131072 - ((v36 + (v36 >> 8)) << 16)) & 0xFF000000 | v10 & 0xFFFFFF;
        LODWORD(v10) = a4;
      }
    }
    else
    {
      LODWORD(v10) = v30 & 0xFF000000 | v10 & 0xFFFFFF;
      signed int v11 = *((_DWORD *)v8 + 3);
    }
    if ((int)v19 <= v12)
    {
      if (v19 == v12)
      {
        unsigned int v37 = ~(_BYTE)v10 * ~(_BYTE)v30;
        a5 = v10 & 0xFFFFFF00;
        a4 = v37 + (v37 >> 8) + 1;
        uint64_t v19 = 255 - (a4 >> 8);
        LODWORD(v10) = v19 | a5;
      }
    }
    else
    {
      LODWORD(v10) = v10 & 0xFFFFFF00 | v30;
      int v12 = *((_DWORD *)v8 + 4);
    }
    if (v20 >= v13)
    {
      if (v20 == v13)
      {
        unsigned int v38 = ~(v10 >> 8) * ~(v30 >> 8);
        uint64_t v19 = v10 & 0xFFFF00FF;
        a4 = 65280;
        LODWORD(v10) = (65280 - ((v38 + (v38 >> 8) + 1) & 0x3FF00)) | v19;
      }
    }
    else
    {
      LODWORD(v10) = v10 & 0xFFFF00FF | (BYTE1(v30) << 8);
      int v13 = v16 + v18;
    }
    if (v21 >= v14)
    {
      uint64_t v19 = 16711680;
      unsigned int v39 = (16711680
           - ((((257 * ~HIWORD(v30) * ~WORD1(v10)) & 0xFFFF00) + 256) & 0x1FF0000)) | v10 & 0xFF00FFFF;
      if (v21 == v14) {
        uint64_t v10 = v39;
      }
      else {
        uint64_t v10 = v10;
      }
    }
    else
    {
      uint64_t v10 = v10 & 0xFF00FFFF | (BYTE2(v30) << 16);
      int v14 = v21;
    }
  }
  else
  {
    unsigned int v33 = v30 & 0xFF000000;
    if (v16 > v11) {
      signed int v11 = v16;
    }
    else {
      unsigned int v33 = 0;
    }
    if ((int)v19 <= v12) {
      a5 = 0;
    }
    else {
      a5 = v30;
    }
    a4 = v33 | a5;
    if ((int)v19 > v12) {
      int v12 = v19;
    }
    int v34 = v30 & 0xFF00;
    if (v20 >= v13) {
      int v34 = 0;
    }
    uint64_t v19 = a4 | v34;
    if (v20 < v13) {
      int v13 = v16 + v18;
    }
    unsigned int v35 = v19 | v30 & 0xFF0000;
    if (v21 < v14) {
      uint64_t v10 = v35;
    }
    else {
      uint64_t v10 = v19;
    }
    if (v21 < v14) {
      int v14 = v21;
    }
  }
  BOOL v24 = __OFSUB__(v13, v11);
  int v25 = v13 - v11;
  if ((v25 < 0) ^ v24 | (v25 == 0)) {
    BOOL v26 = 1;
  }
  else {
    BOOL v26 = v14 <= v12;
  }
  if (!v26)
  {
    *(void *)&long long v40 = __PAIR64__(v12, v11);
    int v28 = v14 - v12;
    *((void *)&v40 + 1) = __PAIR64__(v28, v25);
    if (v25 != v18 || v28 != v17)
    {
      if (*((_DWORD *)v8 + 2) == 1 && v16 == v11 && v21 == v14)
      {
        _OWORD *v15 = v40;
        if (!v22 && *((_DWORD *)v8 + 16)) {
          *((_DWORD *)v8 + 16) = 0;
        }
      }
      else
      {
        int v8 = RIPLayerCreateWithLayer((uint64_t)RIPLayer_ripl_class, (uint64_t *)&v40, (uint64_t *)v8, v9);
      }
    }
    if (v10)
    {
      if (v8)
      {
        long long v31 = (char *)*((void *)v8 + 7);
        if (!v31 && !*((void *)v8 + 9))
        {
          if (*((_DWORD *)v8 + 2) != 1) {
            int v8 = RIPLayerCreateWithLayer((uint64_t)RIPLayer_ripl_class, (uint64_t *)&v40, (uint64_t *)v8, v9);
          }
          *((_DWORD *)v8 + 16) = v10;
          return v8;
        }
        if (*((_DWORD *)v8 + 2) != 1)
        {
          int v8 = RIPLayerCreateWithLayer((uint64_t)RIPLayer_ripl_class, (uint64_t *)&v40, (uint64_t *)v8, v9);
          long long v31 = (char *)*((void *)v8 + 7);
        }
        if (!v31)
        {
          if (!ripl_CreateMask((uint64_t)v8, 1, v19, a4, a5, a6, a7, a8)) {
            return 0;
          }
          long long v31 = (char *)*((void *)v8 + 7);
        }
        CGSCombineMask(v31, *((_DWORD *)v8 + 12), v31, *((_DWORD *)v8 + 12), SDWORD2(v40), SHIDWORD(v40), v10);
        return v8;
      }
      uint64_t v32 = v10;
    }
    else
    {
      if (v8) {
        return v8;
      }
      uint64_t v32 = 0;
    }
    return RIPLayerCreateWithData((uint64_t *)&v40, 0, 0, 0, 0, v32, 0, v9);
  }

  return RIPLayerCreate((uint64_t)RIPLayer_ripl_class, 0, 0, 0, v9, a6, a7, a8);
}

__n128 RIPLayerDefine(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2)
    {
      if (!*(void *)(a1 + 56))
      {
        int v10 = a2->n128_i32[2];
        if (v10 >= 1)
        {
          int v11 = a2->n128_i32[3];
          if (v11 >= 1)
          {
            int v12 = (int *)RIPGetDepthForLayerFormat(0, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            if (v10 <= 0x7FFFFE)
            {
              int v14 = v12;
              unsigned int v15 = ((((*v12 >> 22) * v10) >> 3) + 3) & 0x3FFFFFFC;
              int v16 = (*v12 >> 2) & 3;
              unsigned int v17 = (v10 + 3) & 0xFFFFFFFC;
              if (v16 != 1) {
                unsigned int v17 = 0;
              }
              if (v16 == 2) {
                unsigned int v18 = ((((*v12 >> 22) * v10) >> 3) + 3) & 0x3FFFFFFC;
              }
              else {
                unsigned int v18 = v17;
              }
              unint64_t v19 = v11 * (unint64_t)(v18 + v15);
              if (v19 > 0x7FFFFFFB) {
                size_t v20 = 0xFFFFFFFFLL;
              }
              else {
                size_t v20 = (v19 + 19) & 0xFFFFFFF0;
              }
              if ((v20 & 0x80000000) == 0)
              {
                int v21 = (char *)malloc_type_calloc(1uLL, v20, 0xEA0DF616uLL);
                if (v21)
                {
                  uint64_t v22 = v21;
                  if (v18)
                  {
                    int v23 = (*v14 >> 2) & 3;
                    BOOL v24 = v21;
                    if (v23 != 2)
                    {
                      if (v23 == 1) {
                        BOOL v24 = &v21[v15 * v11];
                      }
                      else {
                        BOOL v24 = 0;
                      }
                    }
                  }
                  else
                  {
                    BOOL v24 = 0;
                  }
                  int v25 = *(_DWORD *)(a1 + 28) | initialize_deep_mask(v14);
                  *(_DWORD *)(a1 + 2++*(_DWORD *)(result + 8) = v25;
                  if (v14[4]) {
                    *(_DWORD *)(a1 + 2++*(_DWORD *)(result + 8) = v25 | 0x200;
                  }
                  *(void *)(a1 + 32) = v14;
                  __n128 result = *a2;
                  *(__n128 *)(a1 + 12) = *a2;
                  *(_DWORD *)(a1 + 64) = v18;
                  *(void *)(a1 + 72) = v24;
                  *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = v15;
                  *(void *)(a1 + 56) = v22;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

CGDataProvider *RIPLayerCreateImage(uint64_t a1, CGColorSpace *a2, char a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  long long v46 = xmmword_185293280;
  if (!a1) {
    return 0;
  }
  if (*(uint64_t (***)())a1 != RIPLayer_ripl_class) {
    return 0;
  }
  if (*(int *)(a1 + 20) < 1) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6 < 1) {
    return 0;
  }
  int v7 = *(UInt8 **)(a1 + 56);
  if (!v7) {
    return 0;
  }
  int v8 = *(unsigned int **)(a1 + 32);
  if (!v8) {
    return 0;
  }
  char v4 = 0;
  unsigned int v9 = *v8;
  switch((*v8 >> 8) & 0xF)
  {
    case 0u:
      provider_18241 = create_provider_18241(v7, *(unsigned int *)(a1 + 48) * (unint64_t)v6, a3);
      if (!provider_18241) {
        goto LABEL_23;
      }
      int v13 = provider_18241;
      char v4 = mask_create(*(int *)(a1 + 20), *(int *)(a1 + 24), 8uLL, 8uLL, *(unsigned int *)(a1 + 48), provider_18241, (double *)&v46, 1, 4);
      CGDataProviderRelease(v13);
      goto LABEL_109;
    case 1u:
      if ((*v8 & 0xCC) != 4) {
        goto LABEL_23;
      }
      if (a2 && !*(_DWORD *)(*((void *)a2 + 3) + 28))
      {
        DeviceGradouble y = 0;
      }
      else
      {
        DeviceGradouble y = CGColorSpaceCreateDeviceGray();
        unsigned int v9 = *v8;
      }
      unsigned int v18 = *(_DWORD *)(a1 + 48);
      unsigned int v15 = HIWORD(v9) & 0x3F;
      unsigned int v19 = v9 >> 22;
      if (v15 == 8)
      {
        int v42 = v9 >> 6;
        if (v42 == 2)
        {
          CGBitmapInfo v17 = 5;
          if ((v9 & 0xC) == 8)
          {
            if (*(void *)(a1 + 72) == *(void *)(a1 + 56)) {
              CGBitmapInfo v17 = 1;
            }
            else {
              CGBitmapInfo v17 = 5;
            }
          }
        }
        else if (v42 == 1)
        {
          CGBitmapInfo v17 = 6;
          if ((v9 & 0xC) == 8)
          {
            if (*(void *)(a1 + 72) == *(void *)(a1 + 56)) {
              CGBitmapInfo v17 = 2;
            }
            else {
              CGBitmapInfo v17 = 6;
            }
          }
        }
        else
        {
          CGBitmapInfo v17 = 0;
        }
      }
      else
      {
        int v32 = (v9 & 1) << 8;
        if ((v9 & 0x30) == 0x20)
        {
          int v32 = ((v9 & 1) << 8) | 0x1000;
          int v33 = 8448;
        }
        else
        {
          int v33 = 256;
        }
        if (v15 != 32) {
          int v33 = 0;
        }
        if (v15 == 16) {
          CGBitmapInfo v17 = v32;
        }
        else {
          CGBitmapInfo v17 = v33;
        }
      }
      if ((v9 & 0xC) == 4)
      {
        int v23 = *(UInt8 **)(a1 + 72);
        if (v23)
        {
          int v24 = *(_DWORD *)(a1 + 64);
LABEL_90:
          int v29 = HIWORD(v9) & 0x3F;
          unsigned int v31 = v9 >> 22;
          goto LABEL_91;
        }
      }
      else
      {
        int v23 = 0;
      }
      int v24 = 0;
      goto LABEL_90;
    case 3u:
      if (a2 && *(_DWORD *)(*((void *)a2 + 3) + 28) == 1)
      {
        DeviceGradouble y = 0;
      }
      else
      {
        DeviceGradouble y = CGColorSpaceCreateDeviceRGB();
        unsigned int v9 = *v8;
      }
      unsigned int v15 = HIWORD(v9) & 0x3F;
      int v16 = v9 >> 6;
      if (v16 == 2)
      {
        CGBitmapInfo v17 = 5;
        if ((v9 & 0xC) == 8)
        {
          if (*(void *)(a1 + 72) == *(void *)(a1 + 56)) {
            CGBitmapInfo v17 = 1;
          }
          else {
            CGBitmapInfo v17 = 5;
          }
        }
      }
      else if (v16 == 1)
      {
        CGBitmapInfo v17 = 6;
        if ((v9 & 0xC) == 8)
        {
          if (*(void *)(a1 + 72) == *(void *)(a1 + 56)) {
            CGBitmapInfo v17 = 2;
          }
          else {
            CGBitmapInfo v17 = 6;
          }
        }
      }
      else
      {
        CGBitmapInfo v17 = 0;
      }
      unsigned int v18 = *(_DWORD *)(a1 + 48);
      unsigned int v19 = v9 >> 22;
      if ((HIWORD(v9) & 0x3F) <= 0xFu)
      {
        if (v15 == 5)
        {
          if (v19 != 16) {
            goto LABEL_67;
          }
          int v25 = v9 & 0x30;
          int v26 = v17 | 0x1000;
        }
        else
        {
          if (v15 != 8 || v19 != 32) {
            goto LABEL_67;
          }
          int v25 = v9 & 0x30;
          int v26 = v17 | 0x2000;
        }
        BOOL v28 = v25 == 16;
        goto LABEL_65;
      }
      if (v15 == 16)
      {
        CGBitmapInfo v17 = v17 & 0xFFFFFEFF | ((v9 & 1) << 8);
        int v26 = v17 | 0x1000;
        BOOL v28 = (v9 & 0x30) == 32;
LABEL_65:
        if (v28) {
          CGBitmapInfo v17 = v26;
        }
        goto LABEL_67;
      }
      if (v15 == 32)
      {
        if ((v9 & 0x30) == 0x20) {
          int v27 = 8448;
        }
        else {
          int v27 = 256;
        }
        v17 |= v27;
      }
LABEL_67:
      if ((v9 & 0xC) == 4)
      {
        int v29 = 0;
        int v23 = 0;
        uint64_t v30 = *(void *)(a1 + 72);
        if (!v30 || v30 == *(void *)(a1 + 56))
        {
          unsigned int v31 = 0;
          int v24 = 0;
        }
        else
        {
          int v24 = *(_DWORD *)(a1 + 64);
          int v29 = (v15 + 7) & 0x78;
          int v23 = *(UInt8 **)(a1 + 72);
          unsigned int v31 = v29;
        }
      }
      else
      {
        int v23 = 0;
        int v29 = 0;
        unsigned int v31 = 0;
        int v24 = 0;
      }
LABEL_91:
      char v4 = 0;
      unint64_t v34 = *(int *)(a1 + 24);
      if (is_mul_ok(v34, v18))
      {
        unsigned int bitsPerPixel = v31;
        unsigned int bitsPerPixel_4 = v29;
        CGColorSpaceRef space = DeviceGray;
        char v4 = create_provider_18241(*(UInt8 **)(a1 + 56), v34 * v18, a3);
        if (v4)
        {
          if (space) {
            unsigned int v35 = space;
          }
          else {
            unsigned int v35 = a2;
          }
          CGImageRef v36 = CGImageCreate(*(int *)(a1 + 20), *(int *)(a1 + 24), v15, v19, (int)v18, v35, v17, v4, 0, 0, kCGRenderingIntentDefault);
          CGDataProviderRelease(v4);
          if (v23 && (unint64_t v37 = *(int *)(a1 + 24), is_mul_ok(v37, v24)))
          {
            unsigned int v38 = create_provider_18241(v23, (int)v37 * (uint64_t)v24, a3);
            unsigned int v39 = CGColorSpaceCreateDeviceGray();
            if (bitsPerPixel_4 <= 8) {
              CGBitmapInfo v40 = 0;
            }
            else {
              CGBitmapInfo v40 = v17 & 0x3100;
            }
            CGImageRef v41 = CGImageCreate(*(int *)(a1 + 20), *(int *)(a1 + 24), bitsPerPixel_4, bitsPerPixel, v24, v39, v40, v38, 0, 0, kCGRenderingIntentDefault);
            CGColorSpaceRelease(v39);
            CGDataProviderRelease(v38);
            char v4 = CGImageCreateWithMaskAndMatte((uint64_t)v36, (uint64_t)v41, RIPLayerCreateImage_matte);
            if (v41) {
              CFRelease(v41);
            }
            if (v36) {
              CFRelease(v36);
            }
          }
          else
          {
            char v4 = v36;
          }
        }
        DeviceGradouble y = space;
      }
      if (DeviceGray) {
        CGColorSpaceRelease(DeviceGray);
      }
LABEL_109:
      (*(void (**)(uint64_t, void))(*(void *)a1 + 48))(a1, 0);
      CGImageSetCachingFlags(v4, 1);
      break;
    case 4u:
      if ((*v8 & 0xCC) != 4)
      {
LABEL_23:
        char v4 = 0;
        goto LABEL_109;
      }
      if (a2 && *(_DWORD *)(*((void *)a2 + 3) + 28) == 2)
      {
        DeviceGradouble y = 0;
      }
      else
      {
        DeviceGradouble y = CGColorSpaceCreateDeviceCMYK();
        unsigned int v9 = *v8;
      }
      unsigned int v18 = *(_DWORD *)(a1 + 48);
      unsigned int v15 = HIWORD(v9) & 0x3F;
      unsigned int v19 = v9 >> 22;
      BOOL v20 = (v9 & 0x30) == 32;
      if ((v9 & 0x30) == 0x20) {
        int v21 = ((v9 & 1) << 8) | 0x1000;
      }
      else {
        int v21 = (v9 & 1) << 8;
      }
      if (v20) {
        int v22 = 8448;
      }
      else {
        int v22 = 256;
      }
      if (v15 != 32) {
        int v22 = 0;
      }
      if (v15 == 16) {
        CGBitmapInfo v17 = v21;
      }
      else {
        CGBitmapInfo v17 = v22;
      }
      int v23 = *(UInt8 **)(a1 + 72);
      if (v23) {
        int v24 = *(_DWORD *)(a1 + 64);
      }
      else {
        int v24 = 0;
      }
      int v29 = v15;
      unsigned int v31 = v15;
      goto LABEL_91;
    default:
      goto LABEL_109;
  }
  return v4;
}

CFDataRef create_provider_18241(UInt8 *bytes, unint64_t length, char a3)
{
  if (a3)
  {
    return CGDataProviderCreateWithCopyOfData((unint64_t)bytes, length);
  }
  else
  {
    CFDataRef v5 = CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CGDataProviderRef v6 = CGDataProviderCreateWithCFData(v5);
    if (v5) {
      CFRelease(v5);
    }
    return v6;
  }
}

void RIPLayerSaveTGA(uint64_t a1, const char *a2)
{
  if (a1)
  {
    if (*(uint64_t (***)())a1 == RIPLayer_ripl_class && *(int *)(a1 + 20) >= 1 && *(int *)(a1 + 24) >= 1)
    {
      if (*(void *)(a1 + 56))
      {
        if (**(_DWORD **)(a1 + 32))
        {
          __filename = 0;
          asprintf(&__filename, "%s-%d.tga", a2, RIPLayerSaveTGA_count);
          ++RIPLayerSaveTGA_count;
          uint64_t __ptr = 196608;
          uint64_t v9 = 0;
          __int16 v10 = 0;
          int v3 = *(_DWORD *)(a1 + 24);
          WORD2(v9) = *(_DWORD *)(a1 + 20);
          HIWORD(v9) = v3;
          LOBYTE(v10) = 8;
          if (__filename)
          {
            char v4 = fopen(__filename, "wb");
            if (v4)
            {
              CFDataRef v5 = v4;
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "Writing layer contents to '%s'\n", __filename);
              fwrite(&__ptr, 0x12uLL, 1uLL, v5);
              if (*(int *)(a1 + 24) >= 1)
              {
                int v6 = 0;
                int v7 = *(char **)(a1 + 56);
                do
                {
                  fwrite(v7, *(int *)(a1 + 20), 1uLL, v5);
                  ++v6;
                  v7 += *(unsigned int *)(a1 + 48);
                }
                while (v6 < *(_DWORD *)(a1 + 24));
              }
              fclose(v5);
            }
            free(__filename);
          }
        }
      }
    }
  }
}

uint64_t CGDisplayListEntryGetType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryGetType", 34, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  return *(char *)(a1 + 8);
}

double CGDisplayListEntryGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryGetBoundingBox", 40, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  return *(double *)(a1 + 16);
}

uint64_t _CGDisplayListEntryIsHidden(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("_CGDisplayListEntryIsHidden", 48, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "entryRef != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  return (*(unsigned __int8 *)(a1 + 10) >> 6) & 1;
}

uint64_t _CGDisplayListEntrySetHidden(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result) {
    _CGHandleAssert("_CGDisplayListEntrySetHidden", 57, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "entryRef != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  if (a2) {
    int v8 = 0x400000;
  }
  else {
    int v8 = 0;
  }
  *(_DWORD *)(result + ++*(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFBFFFFF | v8;
  return result;
}

uint64_t CGDisplayListEntryImageGetImage(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    int v11 = "entry != nullptr";
    int v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    int v11 = "imageEntry != nullptr";
    int v12 = "entry is not of typeDisplayListEntryImage";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryImageGetImage", 70, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  uint64_t v9 = v8[10];
  if (v9) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

__n128 CGDisplayListEntryImageGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    __int16 v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "imageEntry != nullptr";
    __int16 v10 = "entry is not of typeDisplayListEntryImage";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryImageGetCTM", 79, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  long long v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryImageGetInterpolationQuality(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    __int16 v10 = "imageEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryImage";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryImageGetInterpolationQuality", 86, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[34];
}

uint64_t CGDisplayListEntryImageGetRenderingIntent(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    __int16 v10 = "imageEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryImage";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryImageGetRenderingIntent", 93, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[37];
}

uint64_t CGDisplayListEntryGlyphsGetFont(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    char v11 = "entry != nullptr";
    int v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    char v11 = "glyphsEntry != nullptr";
    int v12 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetFont", 102, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  uint64_t v9 = v8[10];
  if (v9) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

__n128 CGDisplayListEntryGlyphsGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    __int16 v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "glyphsEntry != nullptr";
    __int16 v10 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetCTM", 111, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  long long v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

__n128 CGDisplayListEntryGlyphsGetFTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    __int16 v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "glyphsEntry != nullptr";
    __int16 v10 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetFTM", 118, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  long long v7 = *(_OWORD *)(v6 + 152);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 136);
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)(v6 + 168);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

double CGDisplayListEntryGlyphsGetScale(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    __int16 v10 = "glyphsEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetScale", 125, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[23];
}

double CGDisplayListEntryGlyphsGetDilation(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    __int16 v10 = "glyphsEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetDilation", 132, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[24];
}

uint64_t CGDisplayListEntryGlyphsGetSmoothingBGColor(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    char v11 = "entry != nullptr";
    int v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    char v11 = "glyphsEntry != nullptr";
    int v12 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetSmoothingBGColor", 139, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  uint64_t v9 = v8[26];
  if (v9) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryGlyphsGetTextDrawingMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    __int16 v10 = "glyphsEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetTextDrawingMode", 147, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[54];
}

uint64_t CGDisplayListEntryGlyphsGetFontRenderingStyle(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    __int16 v10 = "glyphsEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetFontRenderingStyle", 154, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[55];
}

uint64_t CGDisplayListEntryGlyphsGetShouldDrawBitmapRuns(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    __int16 v10 = "glyphsEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetShouldDrawBitmapRuns", 161, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[224];
}

uint64_t CGDisplayListEntryGlyphsGetCount(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    __int16 v10 = "glyphsEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetCount", 168, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[31];
}

CFDataRef CGDisplayListEntryGlyphsCopyGlyphs(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    int v13 = "entry != nullptr";
    int v14 = "entry argument is NULL";
    goto LABEL_9;
  }
  if (!v8)
  {
    int v13 = "glyphsEntry != nullptr";
    int v14 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_9:
    _CGHandleAssert("CGDisplayListEntryGlyphsCopyGlyphs", 175, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v13, v14, a6, a7, a8, vars0);
  }
  uint64_t v9 = (const UInt8 *)*((void *)v8 + 29);
  if (!v9) {
    return 0;
  }
  CFIndex v10 = 2 * *((void *)v8 + 31);
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFDataCreate(v11, v9, v10);
}

CFDataRef CGDisplayListEntryGlyphsCopyPositions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    int v13 = "entry != nullptr";
    int v14 = "entry argument is NULL";
    goto LABEL_9;
  }
  if (!v8)
  {
    int v13 = "glyphsEntry != nullptr";
    int v14 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_9:
    _CGHandleAssert("CGDisplayListEntryGlyphsCopyPositions", 186, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v13, v14, a6, a7, a8, vars0);
  }
  uint64_t v9 = (const UInt8 *)*((void *)v8 + 30);
  if (!v9) {
    return 0;
  }
  CFIndex v10 = 16 * *((void *)v8 + 31);
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFDataCreate(v11, v9, v10);
}

CFStringRef CGDisplayListEntryGlyphsCopyCharacters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v51 = "entry != nullptr";
    uint64_t v52 = "entry argument is NULL";
    goto LABEL_72;
  }
  if (!v8)
  {
LABEL_75:
    uint64_t v51 = "glyphsEntry != nullptr";
    uint64_t v52 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_72:
    _CGHandleAssert("CGDisplayListEntryGlyphsCopyCharacters", 197, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v51, v52, a6, a7, a8, (char)Property);
  }
  uint64_t v9 = v8;
  if (!v8[31]) {
    return 0;
  }
  if (!v8[29]) {
    return 0;
  }
  uint64_t v10 = v8[10];
  if (!v10) {
    return 0;
  }
  CFAllocatorRef v11 = *(void **)(v10 + 16);
  if (!v11) {
    return 0;
  }
  uint64_t explicit = atomic_load_explicit(v11 + 11, memory_order_acquire);
  if (explicit) {
    Propertdouble y = CGPropertiesGetProperty(explicit, @"com.apple.CoreGraphics.CGPDFFontToUnicodeCMap");
  }
  else {
    Propertdouble y = 0;
  }
  get_unimap(v11);
  std::vector<unsigned short>::vector(&__p, 256);
  uint64_t v15 = v9[31];
  if (v15 < 1)
  {
    int v16 = 0;
    goto LABEL_66;
  }
  int v16 = 0;
  CGBitmapInfo v17 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = (unsigned __int16 *)v9[29];
  BOOL v20 = &v19[v15];
  int v21 = Property;
  int v55 = v20;
  int v56 = v11;
  do
  {
    if (!v21)
    {
      if (v59 == __p) {
        goto LABEL_74;
      }
      uint64_t UnicharsForGlyph = CGFontGetUnicharsForGlyph((uint64_t)v11, *v19, __p);
LABEL_24:
      uint64_t v25 = UnicharsForGlyph;
      if (UnicharsForGlyph <= 0) {
        goto LABEL_62;
      }
      int v26 = (UniChar *)__p;
      uint64_t v27 = (char *)v17 - (char *)v16;
      BOOL v28 = (char *)v16 + (((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFFELL);
      if (UnicharsForGlyph > v18 - v17)
      {
        uint64_t v29 = v27 >> 1;
        uint64_t v30 = (v27 >> 1) + UnicharsForGlyph;
        if (v30 < 0) {
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
        }
        if ((char *)v18 - (char *)v16 > (unint64_t)v30) {
          uint64_t v30 = (char *)v18 - (char *)v16;
        }
        if ((unint64_t)((char *)v18 - (char *)v16) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v31 = v30;
        }
        if (v31)
        {
          int v32 = (UniChar *)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v31);
          uint64_t v34 = v33;
          unsigned int v35 = v16;
        }
        else
        {
          unsigned int v35 = v16;
          int v32 = 0;
          uint64_t v34 = 0;
        }
        int v16 = &v32[v29];
        uint64_t v44 = &v16[v25];
        uint64_t v45 = 2 * v25;
        long long v46 = v16;
        do
        {
          UniChar v47 = *v26++;
          *v46++ = v47;
          v45 -= 2;
        }
        while (v45);
        if (v17 != v35)
        {
          uint64_t v48 = v29;
          do
          {
            v32[v48 - 1] = v35[v48 - 1];
            --v48;
          }
          while (v48 * 2);
          int v16 = v32;
        }
        size_t v49 = (char *)v17 - v28;
        if (v49)
        {
          int v50 = v44;
          memmove(v44, v28, v49);
          uint64_t v44 = v50;
        }
        unsigned int v18 = &v32[v34];
        CGBitmapInfo v17 = (UniChar *)((char *)v44 + v49);
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_60;
      }
      double v54 = v16;
      CGImageRef v36 = (UniChar *)((char *)__p + 2 * UnicharsForGlyph);
      uint64_t v37 = ((char *)v17 - v28) >> 1;
      if (v37 >= UnicharsForGlyph)
      {
        unsigned int v39 = v17;
      }
      else
      {
        unsigned int v38 = (char *)__p + 2 * v37;
        memmove(v17, v38, (char *)v36 - v38);
        unsigned int v39 = (UniChar *)((char *)v17 + (char *)v36 - v38);
        if ((char *)v17 - v28 < 1)
        {
          CGBitmapInfo v17 = (UniChar *)((char *)v17 + (char *)v36 - v38);
LABEL_60:
          CFAllocatorRef v11 = v56;
          int v21 = Property;
LABEL_61:
          BOOL v20 = v55;
          goto LABEL_62;
        }
        CGImageRef v36 = (UniChar *)v38;
        int v21 = Property;
      }
      CGBitmapInfo v40 = &v39[-v25];
      CGImageRef v41 = v39;
      while (v40 < v17)
      {
        UniChar v42 = *v40++;
        *v41++ = v42;
      }
      uint64_t v43 = (UniChar *)&v28[2 * v25];
      if (v39 != v43) {
        memmove(&v39[-(v39 - v43)], v28, (char *)v39 - (char *)v43);
      }
      if (v36 != v26) {
        memmove(v28, v26, (char *)v36 - (char *)v26);
      }
      CGBitmapInfo v17 = v41;
      int v16 = v54;
      CFAllocatorRef v11 = v56;
      goto LABEL_61;
    }
    __int16 v57 = 0;
    if (!CGFontGetCIDsForGlyphs(v11, v19, 1, &v57))
    {
      int v22 = v19;
      if (v59 != __p) {
        goto LABEL_21;
      }
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    if (v59 == __p) {
      goto LABEL_74;
    }
    int v22 = (unsigned __int16 *)&v57;
LABEL_21:
    if (cmap_vtable)
    {
      int v24 = *(uint64_t (**)(void, void, void *))(cmap_vtable + 64);
      if (v24)
      {
        uint64_t UnicharsForGlyph = v24(v21[2], *v22, __p);
        goto LABEL_24;
      }
    }
LABEL_62:
    ++v19;
  }
  while (v19 < v20);
  if (v17 != v16)
  {
    CFStringRef v13 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, v17 - v16);
    goto LABEL_67;
  }
LABEL_66:
  CFStringRef v13 = 0;
LABEL_67:
  if (__p)
  {
    int v59 = __p;
    operator delete(__p);
  }
  if (v16) {
    operator delete(v16);
  }
  return v13;
}

void sub_184FEBBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CGDisplayListEntryPathGetPath(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v10 = "entry != nullptr";
    CFAllocatorRef v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    uint64_t v10 = "pathEntry != nullptr";
    CFAllocatorRef v11 = "entry is not of typeDisplayListEntryPath";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryPathGetPath", 241, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[11];
}

__n128 CGDisplayListEntryPathGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, __n128 *a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    uint64_t v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "pathEntry != nullptr";
    uint64_t v10 = "entry is not of typeDisplayListEntryPath";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryPathGetCTM", 247, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  __n128 v7 = v6[7];
  *a5 = v6[6];
  a5[1] = v7;
  __n128 result = v6[8];
  a5[2] = result;
  return result;
}

uint64_t CGDisplayListEntryPathGetDrawingMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    uint64_t v10 = "pathEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryPath";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryPathGetDrawingMode", 253, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[20];
}

__n128 CGDisplayListEntryRectsGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    uint64_t v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "rectsEntry != nullptr";
    uint64_t v10 = "entry is not of typeDisplayListEntryRects";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryRectsGetCTM", 262, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  long long v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryRectsGetDrawingMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    uint64_t v10 = "rectsEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryRects";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryRectsGetDrawingMode", 269, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[20];
}

CFDataRef CGDisplayListEntryRectsCopyRects(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFStringRef v13 = "entry != nullptr";
    int v14 = "entry argument is NULL";
    goto LABEL_9;
  }
  if (!v8)
  {
    CFStringRef v13 = "rectsEntry != nullptr";
    int v14 = "entry is not of typeDisplayListEntryRects";
LABEL_9:
    _CGHandleAssert("CGDisplayListEntryRectsCopyRects", 276, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v13, v14, a6, a7, a8, vars0);
  }
  uint64_t v9 = (const UInt8 *)*((void *)v8 + 17);
  if (!v9) {
    return 0;
  }
  CFIndex v10 = 32 * *((void *)v8 + 18);
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFDataCreate(v11, v9, v10);
}

CFDataRef CGDisplayListEntryLinesCopyPoints(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFStringRef v13 = "entry != nullptr";
    int v14 = "entry argument is NULL";
    goto LABEL_9;
  }
  if (!v8)
  {
    CFStringRef v13 = "linesEntry != nullptr";
    int v14 = "entry is not of typeDisplayListEntryLines";
LABEL_9:
    _CGHandleAssert("CGDisplayListEntryLinesCopyPoints", 289, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v13, v14, a6, a7, a8, vars0);
  }
  uint64_t v9 = (const UInt8 *)*((void *)v8 + 16);
  if (!v9) {
    return 0;
  }
  CFIndex v10 = 16 * *((void *)v8 + 17);
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFDataCreate(v11, v9, v10);
}

__n128 CGDisplayListEntryLinesGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, __n128 *a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    CFIndex v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "linesEntry != nullptr";
    CFIndex v10 = "entry is not of typeDisplayListEntryLines";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryLinesGetCTM", 300, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  __n128 v7 = v6[6];
  *a5 = v6[5];
  a5[1] = v7;
  __n128 result = v6[7];
  a5[2] = result;
  return result;
}

uint64_t CGDisplayListEntryShadingGetShading(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    char v11 = "entry != nullptr";
    int v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    char v11 = "shadingEntry != nullptr";
    int v12 = "entry is not of typeDisplayListEntryShading";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryShadingGetShading", 309, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  uint64_t v9 = v8[10];
  if (v9) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

__n128 CGDisplayListEntryShadingGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    CFIndex v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "shadingEntry != nullptr";
    CFIndex v10 = "entry is not of typeDisplayListEntryShading";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryShadingGetCTM", 318, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  long long v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryShadingGetInterpolationQuality(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    CFIndex v10 = "shadingEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryShading";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryShadingGetInterpolationQuality", 325, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[34];
}

uint64_t CGDisplayListEntryShadingGetRenderingIntent(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    CFIndex v10 = "shadingEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryShading";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryShadingGetRenderingIntent", 332, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[35];
}

uint64_t CGDisplayListEntryGradientGetGradient(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    char v11 = "entry != nullptr";
    int v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    char v11 = "gradientEntry != nullptr";
    int v12 = "entry is not of typeDisplayListEntryGradient";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryGradientGetGradient", 341, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  uint64_t v9 = v8[10];
  if (v9) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

__n128 CGDisplayListEntryGradientGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    CFIndex v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "gradientEntry != nullptr";
    CFIndex v10 = "entry is not of typeDisplayListEntryGradient";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGradientGetCTM", 350, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  long long v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryGradientGetGradientType(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    char v11 = "entry != nullptr";
    int v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    char v11 = "gradientEntry != nullptr";
    int v12 = "entry is not of typeDisplayListEntryGradient";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryGradientGetGradientType", 357, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  unsigned int v9 = v8[34];
  if (v9 - 1 >= 3) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t CGDisplayListEntryGradientGetDrawingOptions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGradientGetDrawingOptions", 379, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[35];
}

double CGDisplayListEntryGradientGetStartPoint(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetStartPoint", 387, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 1) {
    _CGHandleAssert("CGDisplayListEntryGradientGetStartPoint", 388, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeLinear", "gradient entry is not of type CGDisplayListEntryGradientLinear", a6, a7, a8, vars0);
  }
  return v8[18];
}

double CGDisplayListEntryGradientGetEndPoint(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetEndPoint", 395, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 1) {
    _CGHandleAssert("CGDisplayListEntryGradientGetEndPoint", 396, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeLinear", "gradient entry is not of type CGDisplayListEntryGradientLinear", a6, a7, a8, vars0);
  }
  return v8[20];
}

double CGDisplayListEntryGradientGetStartCenter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetStartCenter", 404, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 2) {
    _CGHandleAssert("CGDisplayListEntryGradientGetStartCenter", 405, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeRadial", "gradient entry is not of type CGDisplayListEntryGradientRadial", a6, a7, a8, vars0);
  }
  return v8[22];
}

double CGDisplayListEntryGradientGetEndCenter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetEndCenter", 412, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 2) {
    _CGHandleAssert("CGDisplayListEntryGradientGetEndCenter", 413, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeRadial", "gradient entry is not of type CGDisplayListEntryGradientRadial", a6, a7, a8, vars0);
  }
  return v8[24];
}

double CGDisplayListEntryGradientGetStartRadius(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetStartRadius", 420, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 2) {
    _CGHandleAssert("CGDisplayListEntryGradientGetStartRadius", 421, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeRadial", "gradient entry is not of type CGDisplayListEntryGradientRadial", a6, a7, a8, vars0);
  }
  return v8[26];
}

double CGDisplayListEntryGradientGetEndRadius(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetEndRadius", 428, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 2) {
    _CGHandleAssert("CGDisplayListEntryGradientGetEndRadius", 429, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeRadial", "gradient entry is not of type CGDisplayListEntryGradientRadial", a6, a7, a8, vars0);
  }
  return v8[27];
}

double CGDisplayListEntryGradientGetCenter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetCenter", 437, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 3) {
    _CGHandleAssert("CGDisplayListEntryGradientGetCenter", 438, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeConic", "gradient entry is not of type CGDisplayListEntryGradientConic", a6, a7, a8, vars0);
  }
  return v8[28];
}

double CGDisplayListEntryGradientGetAngle(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    CFIndex v10 = "gradientEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetAngle", 445, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 3) {
    _CGHandleAssert("CGDisplayListEntryGradientGetAngle", 446, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeConic", "gradient entry is not of type CGDisplayListEntryGradientConic", a6, a7, a8, vars0);
  }
  return v8[30];
}

uint64_t CGDisplayListEntryDisplayListGetDisplayList(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    char v11 = "entry != nullptr";
    int v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    char v11 = "displayListEntry != nullptr";
    int v12 = "entry is not of typeDisplayListEntryDisplayList";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryDisplayListGetDisplayList", 455, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  uint64_t v9 = v8[10];
  if (v9) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

__n128 CGDisplayListEntryDisplayListGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if (!a1)
  {
    uint64_t v9 = "entry != nullptr";
    CFIndex v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v9 = "displayListEntry != nullptr";
    CFIndex v10 = "entry is not of typeDisplayListEntryDisplayList";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryDisplayListGetCTM", 464, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  long long v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryDisplayListGetInterpolationQuality(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    CFIndex v10 = "displayListEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryDisplayList";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryDisplayListGetInterpolationQuality", 471, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[34];
}

uint64_t CGDisplayListEntryDisplayListGetImageRenderingIntent(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFIndex v10 = "entry != nullptr";
    char v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    CFIndex v10 = "displayListEntry != nullptr";
    char v11 = "entry is not of typeDisplayListEntryDisplayList";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryDisplayListGetImageRenderingIntent", 478, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[35];
}

uint64_t CGDisplayListEntryActionGetParameters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    char v11 = "entry != nullptr";
    int v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    char v11 = "actionEntry != nullptr";
    int v12 = "entry is not of typeDisplayListEntryAction";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryActionGetParameters", 487, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  uint64_t v9 = v8[11];
  if (v9) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

CGPDFContentStreamRef CGPDFContentStreamCreateWithPage(CGPDFPageRef page)
{
  return (CGPDFContentStreamRef)CGPDFContentStreamCreate(*((void *)page + 5));
}

void CGPDFContentStreamRelease(CGPDFContentStreamRef cs)
{
  if (cs) {
    CFRelease(cs);
  }
}

CGPDFContentStreamRef CGPDFContentStreamCreateWithStream(CGPDFStreamRef stream, CGPDFDictionaryRef streamResources, CGPDFContentStreamRef parent)
{
  uint64_t v6 = pdf_content_stream_create(1);
  CFArrayAppendValue(*(CFMutableArrayRef *)(v6 + 24), stream);
  if (parent)
  {
    *(void *)(v6 + 16) = *((void *)parent + 2);
    if (streamResources)
    {
      CGPDFContentStreamRef v7 = 0;
      goto LABEL_8;
    }
    CFRetain(parent);
  }
  else
  {
    CGPDFContentStreamRef v7 = 0;
    *(void *)(v6 + 16) = 0;
    if (streamResources) {
      goto LABEL_8;
    }
  }
  CGPDFContentStreamRef v7 = parent;
LABEL_8:
  *(void *)(v6 + 40) = v7;
  int v8 = (os_unfair_lock_s *)CGPDFResourcesCreate();
  uint64_t v9 = v8;
  if (v8)
  {
    os_unfair_lock_lock(v8 + 20);
    uint64_t v10 = *(void *)&v9[4]._os_unfair_lock_opaque;
    char v11 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    *char v11 = v10;
    v11[1] = streamResources;
    *(void *)&v9[4]._os_unfair_lock_opaque = v11;
    os_unfair_lock_unlock(v9 + 20);
  }
  *(void *)(v6 + 32) = v9;
  set_default_color_spaces((CGColorSpace *)v6);
  return (CGPDFContentStreamRef)v6;
}

CGPDFContentStreamRef CGPDFContentStreamRetain(CGPDFContentStreamRef cs)
{
  if (cs) {
    CFRetain(cs);
  }
  return cs;
}

CFArrayRef CGPDFContentStreamGetStreams(CFArrayRef cs)
{
  if (cs) {
    return (CFArrayRef)*((void *)cs + 3);
  }
  return cs;
}

CGPDFObjectRef CGPDFContentStreamGetResource(CGPDFContentStreamRef cs, const char *category, const char *name)
{
  if (!name) {
    return 0;
  }
  CGPDFContentStreamRef v4 = cs;
  if (!*name || cs == 0) {
    return 0;
  }
  do
  {
    uint64_t v9 = (os_unfair_lock_s *)*((void *)v4 + 4);
    uint64_t v10 = v9 + 20;
    os_unfair_lock_lock(v9 + 20);
    resource = get_resource((uint64_t)v9, (char *)category, name);
    os_unfair_lock_unlock(v10);
    if (resource) {
      break;
    }
    if (!*name) {
      break;
    }
    CGPDFContentStreamRef v4 = (CGPDFContentStreamRef)*((void *)v4 + 5);
  }
  while (v4);
  return resource;
}

CGColorSpace *CGPDFContentStreamGetColorSpace(CGColorSpace *result, const char *a2)
{
  if (result)
  {
    int v3 = result;
    while (1)
    {
      __n128 result = CGPDFResourcesGetColorSpace(*((void *)v3 + 4), a2);
      if (result) {
        break;
      }
      int v3 = (CGColorSpace *)*((void *)v3 + 5);
      if (!v3) {
        return 0;
      }
    }
  }
  return result;
}

const void *CGPDFContentStreamGetFont(uint64_t a1, const char *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = a1;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  while (1)
  {
    uint64_t v6 = *(void *)(v3 + 32);
    if (v6 && a2 != 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 80));
      int v8 = (__CFString *)CFStringCreateWithCStringNoCopy(v4, a2, 0x600u, v5);
      CFDictionaryRef v9 = *(const __CFDictionary **)(v6 + 32);
      if (!v8 || !v9 || (CFStringRef Value = CFDictionaryGetValue(v9, v8)) == 0)
      {
        CGPDFObjectRef resource = get_resource(v6, "Font", a2);
        if (resource
          && *((_DWORD *)resource + 2) == 8
          && (int v12 = (void *)CGPDFFontCreate(*((CGPDFDictionary **)resource + 4))) != 0)
        {
          CFStringRef v13 = table_set_value((__CFDictionary **)(v6 + 32), v8, v12);
          CFStringRef Value = v13;
          if (v13) {
            CFRelease(v13);
          }
        }
        else
        {
          CFStringRef Value = 0;
        }
      }
      CFRelease(v8);
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
      if (Value) {
        break;
      }
    }
    uint64_t v3 = *(void *)(v3 + 40);
    if (!v3) {
      return 0;
    }
  }
  return Value;
}

void *CGPDFContentStreamGetXObject(void *result, const char *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      __n128 result = CGPDFResourcesCopyXObject(v3[4], a2);
      if (result) {
        break;
      }
      uint64_t v3 = (void *)v3[5];
      if (!v3) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CGPDFContentStreamGetXObjectStream(uint64_t result, const char *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      CFAllocatorRef v4 = CGPDFResourcesCopyXObject(*(void *)(v3 + 32), a2);
      if (v4) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 40);
      if (!v3) {
        return 0;
      }
    }
    return v4[3];
  }
  return result;
}

void *CGPDFContentStreamGetPattern(void *result, const char *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      __n128 result = CGPDFResourcesGetPattern(v3[4], a2);
      if (result) {
        break;
      }
      uint64_t v3 = (void *)v3[5];
      if (!v3) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CGPDFContentStreamGetPatternStream(uint64_t result, const char *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      Pattern = CGPDFResourcesGetPattern(*(void *)(v3 + 32), a2);
      if (Pattern) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 40);
      if (!v3) {
        return 0;
      }
    }
    if (*((_DWORD *)Pattern + 4) == 1) {
      return Pattern[3];
    }
    return 0;
  }
  return result;
}

void *CGPDFContentStreamGetShading(void *result, const char *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      __n128 result = CGPDFResourcesGetShading(v3[4], a2);
      if (result) {
        break;
      }
      uint64_t v3 = (void *)v3[5];
      if (!v3) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CGPDFContentStreamGetShadingDictionary(uint64_t result, const char *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      Shading = CGPDFResourcesGetShading(*(void *)(v3 + 32), a2);
      if (Shading) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 40);
      if (!v3) {
        return 0;
      }
    }
    return Shading[3];
  }
  return result;
}

void *CGPDFContentStreamGetExtGState(uint64_t a1, const char *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    do
    {
      uint64_t v6 = *(void *)(v3 + 32);
      if (v6) {
        BOOL v7 = a2 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v6 + 80));
        int v8 = (__CFString *)CFStringCreateWithCStringNoCopy(v4, a2, 0x600u, v5);
        CFDictionaryRef v9 = *(const __CFDictionary **)(v6 + 64);
        if (v8)
        {
          if (v9)
          {
            CFStringRef Value = (void *)CFDictionaryGetValue(v9, v8);
            if (Value) {
              goto LABEL_13;
            }
          }
        }
        CGPDFObjectRef resource = get_resource(v6, "ExtGState", a2);
        if (resource && *((_DWORD *)resource + 2) == 8)
        {
          CFStringRef Value = table_set_value((__CFDictionary **)(v6 + 64), v8, *((void **)resource + 4));
LABEL_13:
          CFRelease(v8);
          os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
          if (Value) {
            return Value;
          }
          goto LABEL_16;
        }
        CFRelease(v8);
        os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
      }
LABEL_16:
      uint64_t v3 = *(void *)(v3 + 40);
    }
    while (v3);
  }
  return 0;
}

void *CGPDFContentStreamGetPropertyList(uint64_t a1, const char *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    do
    {
      uint64_t v6 = *(void *)(v3 + 32);
      if (v6) {
        BOOL v7 = a2 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v6 + 80));
        int v8 = (__CFString *)CFStringCreateWithCStringNoCopy(v4, a2, 0x600u, v5);
        CFDictionaryRef v9 = *(const __CFDictionary **)(v6 + 72);
        if (v8)
        {
          if (v9)
          {
            CFStringRef Value = (void *)CFDictionaryGetValue(v9, v8);
            if (Value) {
              goto LABEL_13;
            }
          }
        }
        CGPDFObjectRef resource = get_resource(v6, "Properties", a2);
        if (resource && *((_DWORD *)resource + 2) == 8)
        {
          CFStringRef Value = table_set_value((__CFDictionary **)(v6 + 72), v8, *((void **)resource + 4));
LABEL_13:
          CFRelease(v8);
          os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
          if (Value) {
            return Value;
          }
          goto LABEL_16;
        }
        CFRelease(v8);
        os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
      }
LABEL_16:
      uint64_t v3 = *(void *)(v3 + 40);
    }
    while (v3);
  }
  return 0;
}

CGColorRef CGPDFContentStreamCreateResolvedColor(uint64_t a1, uint64_t cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGColorRef v8 = (CGColorRef)cf;
  if (a1)
  {
    if (cf)
    {
      if (cf < 0) {
        CGColorSpaceRef ColorSpace = CGTaggedColorGetColorSpace(cf, cf, a3, a4, a5, a6, a7, a8);
      }
      else {
        CGColorSpaceRef ColorSpace = *(CGColorSpaceRef *)(cf + 24);
      }
    }
    else
    {
      CGColorSpaceRef ColorSpace = 0;
    }
    uint64_t v11 = *(void *)(a1 + 64);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    v15[2] = __CGColorSpaceCreateResolved_block_invoke;
    v15[3] = &__block_descriptor_tmp_57_23013;
    long long v16 = *(_OWORD *)(a1 + 48);
    uint64_t v17 = v11;
    ResolvedCGColorSpaceRef ColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(ColorSpace, (uint64_t)v15);
    if (ColorSpace == ResolvedColorSpace)
    {
      if (v8) {
        CFRetain(v8);
      }
    }
    else
    {
      Components = CGColorGetComponents(v8);
      CGColorRef v8 = CGColorCreate(ResolvedColorSpace, Components);
    }
    CGColorSpaceRelease(ResolvedColorSpace);
  }
  else if (cf)
  {
    CFRetain((CFTypeRef)cf);
  }
  return v8;
}

uint64_t PBPageLayoutPkg::PBPageLayout::formatText(PBPageLayoutPkg::PBPageLayout *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  CFAllocatorRef v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "baselineOffsets", v7);
  }
  CGColorRef v8 = (uint64_t *)*((void *)this + 22);
  CFDictionaryRef v9 = (uint64_t *)*((void *)this + 23);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "charStyleFontData");
  }
  uint64_t v11 = *((void *)this + 4);
  uint64_t v12 = *((void *)this + 5);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(a2, "characterStyleIndexes");
  }
  CFStringRef v13 = (uint64_t *)*((void *)this + 25);
  int v14 = (uint64_t *)*((void *)this + 26);
  while (v13 != v14)
  {
    uint64_t v15 = *v13++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "characterStyles");
  }
  if (*((unsigned char *)this + 308)) {
    PB::TextFormatter::format(a2, "hasRTL");
  }
  uint64_t v16 = *((void *)this + 7);
  uint64_t v17 = *((void *)this + 8);
  while (v16 != v17)
  {
    v16 += 8;
    PB::TextFormatter::format(a2, "logicalMap");
  }
  uint64_t v18 = *((void *)this + 10);
  uint64_t v19 = *((void *)this + 11);
  while (v18 != v19)
  {
    v18 += 8;
    PB::TextFormatter::format(a2, "mcids");
  }
  if (*((void *)this + 28)) {
    PB::TextFormatter::format();
  }
  BOOL v20 = (uint64_t *)*((void *)this + 29);
  int v21 = (uint64_t *)*((void *)this + 30);
  while (v20 != v21)
  {
    uint64_t v22 = *v20++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v22 + 32))(v22, a2, "preciseBBoxes");
  }
  int v23 = (uint64_t *)*((void *)this + 32);
  int v24 = (uint64_t *)*((void *)this + 33);
  while (v23 != v24)
  {
    uint64_t v25 = *v23++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v25 + 32))(v25, a2, "selectionBBoxes");
  }
  int v26 = (uint64_t *)*((void *)this + 35);
  uint64_t v27 = (uint64_t *)*((void *)this + 36);
  while (v26 != v27)
  {
    uint64_t v28 = *v26++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v28 + 32))(v28, a2, "textLines");
  }
  uint64_t v29 = *((void *)this + 13);
  uint64_t v30 = *((void *)this + 14);
  while (v29 != v30)
  {
    v29 += 4;
    PB::TextFormatter::format(a2, "textRangeMap");
  }
  uint64_t v31 = *((void *)this + 16);
  uint64_t v32 = *((void *)this + 17);
  while (v31 != v32)
  {
    v31 += 4;
    PB::TextFormatter::format(a2, "uniCharCounts");
  }
  uint64_t v33 = *((void *)this + 19);
  uint64_t v34 = *((void *)this + 20);
  while (v33 != v34)
  {
    v33 += 4;
    PB::TextFormatter::format(a2, "uniChars");
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t PBPageLayoutPkg::PBPageLayout::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 308)) {
    this = PB::Writer::write(a2);
  }
  if (v3[28]) {
    this = PB::Writer::write();
  }
  CFAllocatorRef v4 = (const PB::Base **)v3[35];
  CFAllocatorRef v5 = (const PB::Base **)v3[36];
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = v3[19];
  uint64_t v8 = v3[20];
  while (v7 != v8)
  {
    v7 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v9 = v3[16];
  uint64_t v10 = v3[17];
  while (v9 != v10)
  {
    v9 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v11 = (const PB::Base **)v3[32];
  uint64_t v12 = (const PB::Base **)v3[33];
  while (v11 != v12)
  {
    CFStringRef v13 = *v11++;
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  int v14 = (const PB::Base **)v3[29];
  uint64_t v15 = (const PB::Base **)v3[30];
  while (v14 != v15)
  {
    uint64_t v16 = *v14++;
    this = PB::Writer::writeSubmessage(a2, v16);
  }
  uint64_t v17 = v3[13];
  uint64_t v18 = v3[14];
  while (v17 != v18)
  {
    v17 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v19 = (const PB::Base **)v3[25];
  BOOL v20 = (const PB::Base **)v3[26];
  while (v19 != v20)
  {
    int v21 = *v19++;
    this = PB::Writer::writeSubmessage(a2, v21);
  }
  uint64_t v22 = v3[4];
  uint64_t v23 = v3[5];
  while (v22 != v23)
  {
    v22 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  int v24 = (float *)v3[1];
  uint64_t v25 = (float *)v3[2];
  while (v24 != v25)
  {
    float v26 = *v24++;
    this = PB::Writer::write(a2, v26);
  }
  uint64_t v27 = (const PB::Base **)v3[22];
  uint64_t v28 = (const PB::Base **)v3[23];
  while (v27 != v28)
  {
    uint64_t v29 = *v27++;
    this = PB::Writer::writeSubmessage(a2, v29);
  }
  uint64_t v30 = v3[10];
  uint64_t v31 = v3[11];
  while (v30 != v31)
  {
    v30 += 8;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v33 = v3[7];
  uint64_t v32 = v3[8];
  while (v33 != v32)
  {
    v33 += 8;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

void PBPageLayoutPkg::PBPageLayout::readFrom(PBPageLayoutPkg::PBPageLayout *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  if (v2 >= v3 || *((unsigned char *)a2 + 24) != 0) {
    return;
  }
  while (2)
  {
    uint64_t v7 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v10 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          *((unsigned char *)a2 + 24) = 1;
          return;
        }
        unint64_t v15 = v2 + 1;
        char v16 = *(unsigned char *)(v7 + v2);
        *((void *)a2 + 1) = v15;
        v10 |= (unint64_t)(v16 & 0x7F) << v13;
        if ((v16 & 0x80) == 0) {
          goto LABEL_21;
        }
        v13 += 7;
        unint64_t v2 = v15;
        BOOL v40 = v14++ > 8;
      }
      while (!v40);
LABEL_19:
      if ((PB::Reader::skip(a2) & 1) == 0) {
        return;
      }
      goto LABEL_546;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v12 = *(unsigned char *)(v7 + v2);
      v10 |= (unint64_t)(v12 & 0x7F) << v8;
      if ((v12 & 0x80) == 0) {
        break;
      }
      v8 += 7;
      unint64_t v2 = v11;
      BOOL v40 = v9++ > 8;
      if (v40) {
        goto LABEL_19;
      }
    }
LABEL_21:
    int v17 = v10 & 7;
    if (v17 == 4) {
      return;
    }
    switch((v10 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 308) |= 1u;
        unint64_t v18 = *((void *)a2 + 1);
        if (v18 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v19 = v18 + 1;
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v18);
          *((void *)a2 + 1) = v19;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 304) = v21;
        goto LABEL_546;
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        if (v17 == 2)
        {
          if (PB::Reader::placeMark()) {
            return;
          }
          if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
          {
            uint64_t v22 = (char *)*((void *)this + 20);
            while (1)
            {
              unint64_t v23 = *((void *)this + 21);
              if ((unint64_t)v22 >= v23)
              {
                int v24 = (char *)*((void *)this + 19);
                uint64_t v25 = (v22 - v24) >> 2;
                unint64_t v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) >> 62) {
                  goto LABEL_554;
                }
                uint64_t v27 = v23 - (void)v24;
                if (v27 >> 1 > v26) {
                  unint64_t v26 = v27 >> 1;
                }
                BOOL v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v28) {
                  unint64_t v29 = v26;
                }
                if (v29)
                {
                  unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v29);
                  int v24 = (char *)*((void *)this + 19);
                  uint64_t v22 = (char *)*((void *)this + 20);
                }
                else
                {
                  uint64_t v30 = 0;
                }
                uint64_t v31 = (_DWORD *)(v29 + 4 * v25);
                *uint64_t v31 = 0;
                uint64_t v32 = (char *)(v31 + 1);
                while (v22 != v24)
                {
                  int v33 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *--uint64_t v31 = v33;
                }
                *((void *)this + 19) = v31;
                *((void *)this + 20) = v32;
                *((void *)this + 21) = v29 + 4 * v30;
                if (v24) {
                  operator delete(v24);
                }
                uint64_t v22 = v32;
              }
              else
              {
                *(_DWORD *)uint64_t v22 = 0;
                v22 += 4;
              }
              *((void *)this + 20) = v22;
              if (*((char **)this + 19) == v22) {
                goto LABEL_557;
              }
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v34 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              BOOL v40 = v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v34;
              if (v40)
              {
                if (v34 <= v35) {
                  uint64_t v41 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v41 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v41 == v35) {
                    goto LABEL_319;
                  }
                  unint64_t v42 = v35 + 1;
                  char v43 = *(unsigned char *)(v36 + v35);
                  *((void *)a2 + 1) = v42;
                  v39 |= (unint64_t)(v43 & 0x7F) << v37;
                  if ((v43 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  unint64_t v35 = v42;
                  BOOL v40 = v38++ > 8;
                  if (v40)
                  {
LABEL_65:
                    LODWORD(v39) = 0;
                    goto LABEL_68;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
              }
              else
              {
                while (1)
                {
                  unint64_t v42 = v35 + 1;
                  *((void *)a2 + 1) = v35 + 1;
                  char v44 = *(unsigned char *)(v36 + v35);
                  v39 |= (unint64_t)(v44 & 0x7F) << v37;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  unint64_t v35 = v42;
                  BOOL v40 = v38++ > 8;
                  if (v40) {
                    goto LABEL_65;
                  }
                }
              }
LABEL_68:
              *((_DWORD *)v22 - 1) = v39;
              if (v42 >= v34 || *((unsigned char *)a2 + 24)) {
                goto LABEL_387;
              }
            }
          }
          goto LABEL_387;
        }
        uint64_t v166 = (char *)*((void *)this + 20);
        unint64_t v165 = *((void *)this + 21);
        if ((unint64_t)v166 >= v165)
        {
          uint64_t v182 = (char *)*((void *)this + 19);
          uint64_t v183 = (v166 - v182) >> 2;
          unint64_t v184 = v183 + 1;
          if ((unint64_t)(v183 + 1) >> 62) {
            goto LABEL_554;
          }
          uint64_t v185 = v165 - (void)v182;
          if (v185 >> 1 > v184) {
            unint64_t v184 = v185 >> 1;
          }
          BOOL v28 = (unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v186 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v28) {
            unint64_t v186 = v184;
          }
          if (v186)
          {
            unint64_t v186 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v186);
            uint64_t v182 = (char *)*((void *)this + 19);
            uint64_t v166 = (char *)*((void *)this + 20);
          }
          else
          {
            uint64_t v187 = 0;
          }
          v224 = (_DWORD *)(v186 + 4 * v183);
          _DWORD *v224 = 0;
          uint64_t v167 = v224 + 1;
          while (v166 != v182)
          {
            int v225 = *((_DWORD *)v166 - 1);
            v166 -= 4;
            *--v224 = v225;
          }
          *((void *)this + 19) = v224;
          *((void *)this + 20) = v167;
          *((void *)this + 21) = v186 + 4 * v187;
          if (v182) {
            operator delete(v182);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v166 = 0;
          uint64_t v167 = v166 + 4;
        }
        *((void *)this + 20) = v167;
        if (*((_DWORD **)this + 19) == v167) {
          goto LABEL_557;
        }
        unint64_t v226 = *((void *)a2 + 1);
        unint64_t v227 = *((void *)a2 + 2);
        uint64_t v228 = *(void *)a2;
        char v229 = 0;
        unsigned int v230 = 0;
        if (v226 <= 0xFFFFFFFFFFFFFFF5 && v226 + 10 <= v227)
        {
          uint64_t v234 = 0;
          while (1)
          {
            unint64_t v235 = v226 + 1;
            *((void *)a2 + 1) = v226 + 1;
            char v236 = *(unsigned char *)(v228 + v226);
            v234 |= (unint64_t)(v236 & 0x7F) << v229;
            if ((v236 & 0x80) == 0) {
              goto LABEL_484;
            }
            v229 += 7;
            unint64_t v226 = v235;
            BOOL v40 = v230++ > 8;
            if (v40) {
              goto LABEL_483;
            }
          }
        }
        uint64_t v234 = 0;
        if (v227 <= v226) {
          unint64_t v227 = *((void *)a2 + 1);
        }
        while (v227 != v226)
        {
          unint64_t v232 = v226 + 1;
          char v233 = *(unsigned char *)(v228 + v226);
          *((void *)a2 + 1) = v232;
          v234 |= (unint64_t)(v233 & 0x7F) << v229;
          if ((v233 & 0x80) == 0) {
            goto LABEL_477;
          }
          v229 += 7;
          unint64_t v226 = v232;
          BOOL v40 = v230++ > 8;
          if (v40) {
            goto LABEL_483;
          }
        }
        goto LABEL_476;
      case 5u:
        if (v17 == 2)
        {
          if (PB::Reader::placeMark()) {
            return;
          }
          if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
          {
            uint64_t v22 = (char *)*((void *)this + 17);
            while (1)
            {
              unint64_t v45 = *((void *)this + 18);
              if ((unint64_t)v22 >= v45)
              {
                long long v46 = (char *)*((void *)this + 16);
                uint64_t v47 = (v22 - v46) >> 2;
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62) {
                  goto LABEL_554;
                }
                uint64_t v49 = v45 - (void)v46;
                if (v49 >> 1 > v48) {
                  unint64_t v48 = v49 >> 1;
                }
                BOOL v28 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v28) {
                  unint64_t v50 = v48;
                }
                if (v50)
                {
                  unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v50);
                  long long v46 = (char *)*((void *)this + 16);
                  uint64_t v22 = (char *)*((void *)this + 17);
                }
                else
                {
                  uint64_t v51 = 0;
                }
                uint64_t v52 = (_DWORD *)(v50 + 4 * v47);
                *uint64_t v52 = 0;
                int v53 = (char *)(v52 + 1);
                while (v22 != v46)
                {
                  int v54 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *--uint64_t v52 = v54;
                }
                *((void *)this + 16) = v52;
                *((void *)this + 17) = v53;
                *((void *)this + 1++*(_DWORD *)(result + 8) = v50 + 4 * v51;
                if (v46) {
                  operator delete(v46);
                }
                uint64_t v22 = v53;
              }
              else
              {
                *(_DWORD *)uint64_t v22 = 0;
                v22 += 4;
              }
              *((void *)this + 17) = v22;
              if (*((char **)this + 16) == v22) {
                goto LABEL_557;
              }
              unint64_t v56 = *((void *)a2 + 1);
              unint64_t v55 = *((void *)a2 + 2);
              uint64_t v57 = *(void *)a2;
              char v58 = 0;
              unsigned int v59 = 0;
              uint64_t v60 = 0;
              if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v55)
              {
                if (v55 <= v56) {
                  uint64_t v62 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v62 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v62 == v56) {
                    goto LABEL_319;
                  }
                  unint64_t v63 = v56 + 1;
                  char v64 = *(unsigned char *)(v57 + v56);
                  *((void *)a2 + 1) = v63;
                  v60 |= (unint64_t)(v64 & 0x7F) << v58;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v58 += 7;
                  unint64_t v56 = v63;
                  BOOL v40 = v59++ > 8;
                  if (v40)
                  {
LABEL_109:
                    LODWORD(v60) = 0;
                    goto LABEL_112;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v60) = 0;
                }
              }
              else
              {
                while (1)
                {
                  unint64_t v63 = v56 + 1;
                  *((void *)a2 + 1) = v56 + 1;
                  char v65 = *(unsigned char *)(v57 + v56);
                  v60 |= (unint64_t)(v65 & 0x7F) << v58;
                  if ((v65 & 0x80) == 0) {
                    break;
                  }
                  v58 += 7;
                  unint64_t v56 = v63;
                  BOOL v40 = v59++ > 8;
                  if (v40) {
                    goto LABEL_109;
                  }
                }
              }
LABEL_112:
              *((_DWORD *)v22 - 1) = v60;
              if (v63 >= v55 || *((unsigned char *)a2 + 24)) {
                goto LABEL_387;
              }
            }
          }
          goto LABEL_387;
        }
        uint64_t v169 = (char *)*((void *)this + 17);
        unint64_t v168 = *((void *)this + 18);
        if ((unint64_t)v169 >= v168)
        {
          uint64_t v188 = (char *)*((void *)this + 16);
          uint64_t v189 = (v169 - v188) >> 2;
          unint64_t v190 = v189 + 1;
          if ((unint64_t)(v189 + 1) >> 62) {
            goto LABEL_554;
          }
          uint64_t v191 = v168 - (void)v188;
          if (v191 >> 1 > v190) {
            unint64_t v190 = v191 >> 1;
          }
          BOOL v28 = (unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v192 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v28) {
            unint64_t v192 = v190;
          }
          if (v192)
          {
            unint64_t v192 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v192);
            uint64_t v188 = (char *)*((void *)this + 16);
            uint64_t v169 = (char *)*((void *)this + 17);
          }
          else
          {
            uint64_t v193 = 0;
          }
          v237 = (_DWORD *)(v192 + 4 * v189);
          _DWORD *v237 = 0;
          uint64_t v167 = v237 + 1;
          while (v169 != v188)
          {
            int v238 = *((_DWORD *)v169 - 1);
            v169 -= 4;
            *--v237 = v238;
          }
          *((void *)this + 16) = v237;
          *((void *)this + 17) = v167;
          *((void *)this + 1++*(_DWORD *)(result + 8) = v192 + 4 * v193;
          if (v188) {
            operator delete(v188);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v169 = 0;
          uint64_t v167 = v169 + 4;
        }
        *((void *)this + 17) = v167;
        if (*((_DWORD **)this + 16) == v167) {
          goto LABEL_557;
        }
        unint64_t v239 = *((void *)a2 + 1);
        unint64_t v240 = *((void *)a2 + 2);
        uint64_t v241 = *(void *)a2;
        char v242 = 0;
        unsigned int v243 = 0;
        if (v239 <= 0xFFFFFFFFFFFFFFF5 && v239 + 10 <= v240)
        {
          uint64_t v234 = 0;
          while (1)
          {
            unint64_t v247 = v239 + 1;
            *((void *)a2 + 1) = v239 + 1;
            char v248 = *(unsigned char *)(v241 + v239);
            v234 |= (unint64_t)(v248 & 0x7F) << v242;
            if ((v248 & 0x80) == 0) {
              goto LABEL_484;
            }
            v242 += 7;
            unint64_t v239 = v247;
            BOOL v40 = v243++ > 8;
            if (v40) {
              goto LABEL_483;
            }
          }
        }
        uint64_t v234 = 0;
        if (v240 <= v239) {
          unint64_t v240 = *((void *)a2 + 1);
        }
        while (v240 != v239)
        {
          unint64_t v245 = v239 + 1;
          char v246 = *(unsigned char *)(v241 + v239);
          *((void *)a2 + 1) = v245;
          v234 |= (unint64_t)(v246 & 0x7F) << v242;
          if ((v246 & 0x80) == 0) {
            goto LABEL_477;
          }
          v242 += 7;
          unint64_t v239 = v245;
          BOOL v40 = v243++ > 8;
          if (v40) {
            goto LABEL_483;
          }
        }
        goto LABEL_476;
      case 6u:
        PB::PtrVector<PBPageLayoutPkg::PBRect>::emplace_back<>();
      case 7u:
        PB::PtrVector<PBPageLayoutPkg::PBRect>::emplace_back<>();
      case 8u:
        if (v17 != 2)
        {
          uint64_t v171 = (char *)*((void *)this + 14);
          unint64_t v170 = *((void *)this + 15);
          if ((unint64_t)v171 >= v170)
          {
            v194 = (char *)*((void *)this + 13);
            uint64_t v195 = (v171 - v194) >> 2;
            unint64_t v196 = v195 + 1;
            if ((unint64_t)(v195 + 1) >> 62) {
              goto LABEL_554;
            }
            uint64_t v197 = v170 - (void)v194;
            if (v197 >> 1 > v196) {
              unint64_t v196 = v197 >> 1;
            }
            BOOL v28 = (unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v28) {
              unint64_t v198 = v196;
            }
            if (v198)
            {
              unint64_t v198 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v198);
              v194 = (char *)*((void *)this + 13);
              uint64_t v171 = (char *)*((void *)this + 14);
            }
            else
            {
              uint64_t v199 = 0;
            }
            v249 = (_DWORD *)(v198 + 4 * v195);
            _DWORD *v249 = 0;
            uint64_t v167 = v249 + 1;
            while (v171 != v194)
            {
              int v250 = *((_DWORD *)v171 - 1);
              v171 -= 4;
              *--v249 = v250;
            }
            *((void *)this + 13) = v249;
            *((void *)this + 14) = v167;
            *((void *)this + 15) = v198 + 4 * v199;
            if (v194) {
              operator delete(v194);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v171 = 0;
            uint64_t v167 = v171 + 4;
          }
          *((void *)this + 14) = v167;
          if (*((_DWORD **)this + 13) == v167) {
            goto LABEL_557;
          }
          unint64_t v251 = *((void *)a2 + 1);
          unint64_t v252 = *((void *)a2 + 2);
          uint64_t v253 = *(void *)a2;
          char v254 = 0;
          unsigned int v255 = 0;
          if (v251 > 0xFFFFFFFFFFFFFFF5 || v251 + 10 > v252)
          {
            uint64_t v234 = 0;
            if (v252 <= v251) {
              unint64_t v252 = *((void *)a2 + 1);
            }
            while (v252 != v251)
            {
              unint64_t v257 = v251 + 1;
              char v258 = *(unsigned char *)(v253 + v251);
              *((void *)a2 + 1) = v257;
              v234 |= (unint64_t)(v258 & 0x7F) << v254;
              if ((v258 & 0x80) == 0) {
                goto LABEL_477;
              }
              v254 += 7;
              unint64_t v251 = v257;
              BOOL v40 = v255++ > 8;
              if (v40) {
                goto LABEL_483;
              }
            }
LABEL_476:
            LODWORD(v234) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            uint64_t v234 = 0;
            while (1)
            {
              unint64_t v259 = v251 + 1;
              *((void *)a2 + 1) = v251 + 1;
              char v260 = *(unsigned char *)(v253 + v251);
              v234 |= (unint64_t)(v260 & 0x7F) << v254;
              if ((v260 & 0x80) == 0) {
                break;
              }
              v254 += 7;
              unint64_t v251 = v259;
              BOOL v40 = v255++ > 8;
              if (v40) {
                goto LABEL_483;
              }
            }
          }
LABEL_484:
          *(v167 - 1) = v234;
          goto LABEL_546;
        }
        if (PB::Reader::placeMark()) {
          return;
        }
        if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
        {
          uint64_t v22 = (char *)*((void *)this + 14);
          while (1)
          {
            unint64_t v66 = *((void *)this + 15);
            if ((unint64_t)v22 >= v66)
            {
              uint64_t v67 = (char *)*((void *)this + 13);
              uint64_t v68 = (v22 - v67) >> 2;
              unint64_t v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 62) {
                goto LABEL_554;
              }
              uint64_t v70 = v66 - (void)v67;
              if (v70 >> 1 > v69) {
                unint64_t v69 = v70 >> 1;
              }
              BOOL v28 = (unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v28) {
                unint64_t v71 = v69;
              }
              if (v71)
              {
                unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v71);
                uint64_t v67 = (char *)*((void *)this + 13);
                uint64_t v22 = (char *)*((void *)this + 14);
              }
              else
              {
                uint64_t v72 = 0;
              }
              int v73 = (_DWORD *)(v71 + 4 * v68);
              *int v73 = 0;
              uint64_t v74 = (char *)(v73 + 1);
              while (v22 != v67)
              {
                int v75 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *--int v73 = v75;
              }
              *((void *)this + 13) = v73;
              *((void *)this + 14) = v74;
              *((void *)this + 15) = v71 + 4 * v72;
              if (v67) {
                operator delete(v67);
              }
              uint64_t v22 = v74;
            }
            else
            {
              *(_DWORD *)uint64_t v22 = 0;
              v22 += 4;
            }
            *((void *)this + 14) = v22;
            if (*((char **)this + 13) == v22) {
              goto LABEL_557;
            }
            unint64_t v77 = *((void *)a2 + 1);
            unint64_t v76 = *((void *)a2 + 2);
            uint64_t v78 = *(void *)a2;
            char v79 = 0;
            unsigned int v80 = 0;
            uint64_t v81 = 0;
            if (v77 > 0xFFFFFFFFFFFFFFF5 || v77 + 10 > v76)
            {
              if (v76 <= v77) {
                uint64_t v83 = *((void *)a2 + 1);
              }
              else {
                uint64_t v83 = *((void *)a2 + 2);
              }
              while (1)
              {
                if (v83 == v77) {
                  goto LABEL_319;
                }
                unint64_t v84 = v77 + 1;
                char v85 = *(unsigned char *)(v78 + v77);
                *((void *)a2 + 1) = v84;
                v81 |= (unint64_t)(v85 & 0x7F) << v79;
                if ((v85 & 0x80) == 0) {
                  break;
                }
                v79 += 7;
                unint64_t v77 = v84;
                BOOL v40 = v80++ > 8;
                if (v40)
                {
LABEL_155:
                  LODWORD(v81) = 0;
                  goto LABEL_158;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v81) = 0;
              }
            }
            else
            {
              while (1)
              {
                unint64_t v84 = v77 + 1;
                *((void *)a2 + 1) = v77 + 1;
                char v86 = *(unsigned char *)(v78 + v77);
                v81 |= (unint64_t)(v86 & 0x7F) << v79;
                if ((v86 & 0x80) == 0) {
                  break;
                }
                v79 += 7;
                unint64_t v77 = v84;
                BOOL v40 = v80++ > 8;
                if (v40) {
                  goto LABEL_155;
                }
              }
            }
LABEL_158:
            *((_DWORD *)v22 - 1) = v81;
            if (v84 >= v76 || *((unsigned char *)a2 + 24)) {
              goto LABEL_387;
            }
          }
        }
        goto LABEL_387;
      case 9u:
        operator new();
      case 0xAu:
        if (v17 == 2)
        {
          if (PB::Reader::placeMark()) {
            return;
          }
          if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
          {
            uint64_t v22 = (char *)*((void *)this + 5);
            while (1)
            {
              unint64_t v87 = *((void *)this + 6);
              if ((unint64_t)v22 >= v87)
              {
                int v88 = (char *)*((void *)this + 4);
                uint64_t v89 = (v22 - v88) >> 2;
                unint64_t v90 = v89 + 1;
                if ((unint64_t)(v89 + 1) >> 62) {
                  goto LABEL_554;
                }
                uint64_t v91 = v87 - (void)v88;
                if (v91 >> 1 > v90) {
                  unint64_t v90 = v91 >> 1;
                }
                BOOL v28 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v28) {
                  unint64_t v92 = v90;
                }
                if (v92)
                {
                  unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v92);
                  int v88 = (char *)*((void *)this + 4);
                  uint64_t v22 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v93 = 0;
                }
                int v94 = (_DWORD *)(v92 + 4 * v89);
                *int v94 = 0;
                uint64_t v95 = (char *)(v94 + 1);
                while (v22 != v88)
                {
                  int v96 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *--int v94 = v96;
                }
                *((void *)this + 4) = v94;
                *((void *)this + 5) = v95;
                *((void *)this + 6) = v92 + 4 * v93;
                if (v88) {
                  operator delete(v88);
                }
                uint64_t v22 = v95;
              }
              else
              {
                *(_DWORD *)uint64_t v22 = 0;
                v22 += 4;
              }
              *((void *)this + 5) = v22;
              if (*((char **)this + 4) == v22) {
                goto LABEL_557;
              }
              unint64_t v98 = *((void *)a2 + 1);
              unint64_t v97 = *((void *)a2 + 2);
              uint64_t v99 = *(void *)a2;
              char v100 = 0;
              unsigned int v101 = 0;
              uint64_t v102 = 0;
              if (v98 > 0xFFFFFFFFFFFFFFF5 || v98 + 10 > v97) {
                break;
              }
              while (1)
              {
                unint64_t v105 = v98 + 1;
                *((void *)a2 + 1) = v98 + 1;
                char v107 = *(unsigned char *)(v99 + v98);
                v102 |= (unint64_t)(v107 & 0x7F) << v100;
                if ((v107 & 0x80) == 0) {
                  break;
                }
                v100 += 7;
                unint64_t v98 = v105;
                BOOL v40 = v101++ > 8;
                if (v40) {
                  goto LABEL_200;
                }
              }
LABEL_203:
              *((_DWORD *)v22 - 1) = v102;
              if (v105 >= v97 || *((unsigned char *)a2 + 24)) {
                goto LABEL_387;
              }
            }
            if (v97 <= v98) {
              uint64_t v104 = *((void *)a2 + 1);
            }
            else {
              uint64_t v104 = *((void *)a2 + 2);
            }
            while (v104 != v98)
            {
              unint64_t v105 = v98 + 1;
              char v106 = *(unsigned char *)(v99 + v98);
              *((void *)a2 + 1) = v105;
              v102 |= (unint64_t)(v106 & 0x7F) << v100;
              if ((v106 & 0x80) == 0)
              {
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v102) = 0;
                }
                goto LABEL_203;
              }
              v100 += 7;
              unint64_t v98 = v105;
              BOOL v40 = v101++ > 8;
              if (v40)
              {
LABEL_200:
                LODWORD(v102) = 0;
                goto LABEL_203;
              }
            }
LABEL_319:
            *((unsigned char *)a2 + 24) = 1;
            *((_DWORD *)v22 - 1) = 0;
          }
          goto LABEL_387;
        }
        uint64_t v173 = (char *)*((void *)this + 5);
        unint64_t v172 = *((void *)this + 6);
        if ((unint64_t)v173 >= v172)
        {
          v200 = (char *)*((void *)this + 4);
          uint64_t v201 = (v173 - v200) >> 2;
          unint64_t v202 = v201 + 1;
          if ((unint64_t)(v201 + 1) >> 62) {
LABEL_554:
          }
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
          uint64_t v203 = v172 - (void)v200;
          if (v203 >> 1 > v202) {
            unint64_t v202 = v203 >> 1;
          }
          BOOL v28 = (unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v204 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v28) {
            unint64_t v204 = v202;
          }
          if (v204)
          {
            unint64_t v204 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v204);
            v200 = (char *)*((void *)this + 4);
            uint64_t v173 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v205 = 0;
          }
          v261 = (_DWORD *)(v204 + 4 * v201);
          _DWORD *v261 = 0;
          uint64_t v167 = v261 + 1;
          while (v173 != v200)
          {
            int v262 = *((_DWORD *)v173 - 1);
            v173 -= 4;
            *--v261 = v262;
          }
          *((void *)this + 4) = v261;
          *((void *)this + 5) = v167;
          *((void *)this + 6) = v204 + 4 * v205;
          if (v200) {
            operator delete(v200);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v173 = 0;
          uint64_t v167 = v173 + 4;
        }
        *((void *)this + 5) = v167;
        if (*((_DWORD **)this + 4) == v167) {
          goto LABEL_557;
        }
        unint64_t v263 = *((void *)a2 + 1);
        unint64_t v264 = *((void *)a2 + 2);
        uint64_t v265 = *(void *)a2;
        char v266 = 0;
        unsigned int v267 = 0;
        if (v263 <= 0xFFFFFFFFFFFFFFF5 && v263 + 10 <= v264)
        {
          uint64_t v234 = 0;
          while (1)
          {
            unint64_t v271 = v263 + 1;
            *((void *)a2 + 1) = v263 + 1;
            char v272 = *(unsigned char *)(v265 + v263);
            v234 |= (unint64_t)(v272 & 0x7F) << v266;
            if ((v272 & 0x80) == 0) {
              goto LABEL_484;
            }
            v266 += 7;
            unint64_t v263 = v271;
            BOOL v40 = v267++ > 8;
            if (v40) {
              goto LABEL_483;
            }
          }
        }
        uint64_t v234 = 0;
        if (v264 <= v263) {
          unint64_t v264 = *((void *)a2 + 1);
        }
        while (v264 != v263)
        {
          unint64_t v269 = v263 + 1;
          char v270 = *(unsigned char *)(v265 + v263);
          *((void *)a2 + 1) = v269;
          v234 |= (unint64_t)(v270 & 0x7F) << v266;
          if ((v270 & 0x80) == 0)
          {
LABEL_477:
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v234) = 0;
            }
            goto LABEL_484;
          }
          v266 += 7;
          unint64_t v263 = v269;
          BOOL v40 = v267++ > 8;
          if (v40)
          {
LABEL_483:
            LODWORD(v234) = 0;
            goto LABEL_484;
          }
        }
        goto LABEL_476;
      case 0xBu:
        if (v17 == 2)
        {
          if (PB::Reader::placeMark()) {
            return;
          }
          unint64_t v108 = *((void *)a2 + 1);
          unint64_t v109 = *((void *)a2 + 2);
          while (v108 < v109 && !*((unsigned char *)a2 + 24))
          {
            long long v111 = (char *)*((void *)this + 2);
            unint64_t v110 = *((void *)this + 3);
            if ((unint64_t)v111 >= v110)
            {
              double v113 = (char *)*((void *)this + 1);
              uint64_t v114 = (v111 - v113) >> 2;
              unint64_t v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 62) {
                goto LABEL_556;
              }
              uint64_t v116 = v110 - (void)v113;
              if (v116 >> 1 > v115) {
                unint64_t v115 = v116 >> 1;
              }
              BOOL v28 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v28) {
                unint64_t v117 = v115;
              }
              if (v117)
              {
                unint64_t v117 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v117);
                double v113 = (char *)*((void *)this + 1);
                long long v111 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v118 = 0;
              }
              CGFloat v119 = (_DWORD *)(v117 + 4 * v114);
              *CGFloat v119 = 0;
              double v112 = v119 + 1;
              while (v111 != v113)
              {
                int v120 = *((_DWORD *)v111 - 1);
                v111 -= 4;
                *--CGFloat v119 = v120;
              }
              *((void *)this + 1) = v119;
              *((void *)this + 2) = v112;
              *((void *)this + 3) = v117 + 4 * v118;
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(_DWORD *)long long v111 = 0;
              double v112 = v111 + 4;
            }
            *((void *)this + 2) = v112;
            if (*((_DWORD **)this + 1) == v112) {
              goto LABEL_557;
            }
            unint64_t v121 = *((void *)a2 + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_387;
            }
            *(v112 - 1) = *(_DWORD *)(*(void *)a2 + v121);
            unint64_t v109 = *((void *)a2 + 2);
            unint64_t v108 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v108;
          }
          goto LABEL_387;
        }
        uint64_t v175 = (char *)*((void *)this + 2);
        unint64_t v174 = *((void *)this + 3);
        if ((unint64_t)v175 >= v174)
        {
          v206 = (char *)*((void *)this + 1);
          uint64_t v207 = (v175 - v206) >> 2;
          unint64_t v208 = v207 + 1;
          if ((unint64_t)(v207 + 1) >> 62) {
LABEL_556:
          }
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
          uint64_t v209 = v174 - (void)v206;
          if (v209 >> 1 > v208) {
            unint64_t v208 = v209 >> 1;
          }
          BOOL v28 = (unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v210 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v28) {
            unint64_t v210 = v208;
          }
          if (v210)
          {
            unint64_t v210 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<float>>(v210);
            v206 = (char *)*((void *)this + 1);
            uint64_t v175 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v211 = 0;
          }
          v273 = (_DWORD *)(v210 + 4 * v207);
          _DWORD *v273 = 0;
          uint64_t v176 = v273 + 1;
          while (v175 != v206)
          {
            int v274 = *((_DWORD *)v175 - 1);
            v175 -= 4;
            *--v273 = v274;
          }
          *((void *)this + 1) = v273;
          *((void *)this + 2) = v176;
          *((void *)this + 3) = v210 + 4 * v211;
          if (v206) {
            operator delete(v206);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v175 = 0;
          uint64_t v176 = v175 + 4;
        }
        *((void *)this + 2) = v176;
        if (*((_DWORD **)this + 1) == v176) {
          goto LABEL_557;
        }
        unint64_t v275 = *((void *)a2 + 1);
        if (v275 <= 0xFFFFFFFFFFFFFFFBLL && v275 + 4 <= *((void *)a2 + 2))
        {
          *(v176 - 1) = *(_DWORD *)(*(void *)a2 + v275);
          *((void *)a2 + 1) += 4;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_546;
      case 0xCu:
        operator new();
      case 0xDu:
        if (v17 != 2)
        {
          uint64_t v178 = (char *)*((void *)this + 11);
          unint64_t v177 = *((void *)this + 12);
          if ((unint64_t)v178 >= v177)
          {
            v212 = (char *)*((void *)this + 10);
            uint64_t v213 = (v178 - v212) >> 3;
            unint64_t v214 = v213 + 1;
            if ((unint64_t)(v213 + 1) >> 61) {
              goto LABEL_555;
            }
            uint64_t v215 = v177 - (void)v212;
            if (v215 >> 2 > v214) {
              unint64_t v214 = v215 >> 2;
            }
            BOOL v28 = (unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v28) {
              unint64_t v216 = v214;
            }
            if (v216)
            {
              unint64_t v216 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v216);
              v212 = (char *)*((void *)this + 10);
              uint64_t v178 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v217 = 0;
            }
            v276 = (void *)(v216 + 8 * v213);
            void *v276 = 0;
            uint64_t v179 = v276 + 1;
            while (v178 != v212)
            {
              uint64_t v277 = *((void *)v178 - 1);
              v178 -= 8;
              *--v276 = v277;
            }
            *((void *)this + 10) = v276;
            *((void *)this + 11) = v179;
            *((void *)this + 12) = v216 + 8 * v217;
            if (v212) {
              operator delete(v212);
            }
          }
          else
          {
            *(void *)uint64_t v178 = 0;
            uint64_t v179 = v178 + 8;
          }
          *((void *)this + 11) = v179;
          if (*((void **)this + 10) == v179) {
            goto LABEL_557;
          }
          unint64_t v278 = *((void *)a2 + 1);
          unint64_t v279 = *((void *)a2 + 2);
          uint64_t v280 = *(void *)a2;
          char v281 = 0;
          unsigned int v282 = 0;
          if (v278 > 0xFFFFFFFFFFFFFFF5 || v278 + 10 > v279)
          {
            uint64_t v286 = 0;
            if (v279 <= v278) {
              unint64_t v279 = *((void *)a2 + 1);
            }
            while (v279 != v278)
            {
              unint64_t v284 = v278 + 1;
              char v285 = *(unsigned char *)(v280 + v278);
              *((void *)a2 + 1) = v284;
              v286 |= (unint64_t)(v285 & 0x7F) << v281;
              if ((v285 & 0x80) == 0) {
                goto LABEL_543;
              }
              v281 += 7;
              unint64_t v278 = v284;
              BOOL v40 = v282++ > 8;
              if (v40) {
                goto LABEL_541;
              }
            }
LABEL_542:
            uint64_t v286 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            uint64_t v286 = 0;
            while (1)
            {
              unint64_t v287 = v278 + 1;
              *((void *)a2 + 1) = v278 + 1;
              char v288 = *(unsigned char *)(v280 + v278);
              v286 |= (unint64_t)(v288 & 0x7F) << v281;
              if ((v288 & 0x80) == 0) {
                break;
              }
              v281 += 7;
              unint64_t v278 = v287;
              BOOL v40 = v282++ > 8;
              if (v40) {
                goto LABEL_541;
              }
            }
          }
LABEL_545:
          *(v179 - 1) = v286;
LABEL_546:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          if (v2 >= v3 || *((unsigned char *)a2 + 24) != 0) {
            return;
          }
          continue;
        }
        if (PB::Reader::placeMark()) {
          return;
        }
        if (*((void *)a2 + 1) >= *((void *)a2 + 2) || *((unsigned char *)a2 + 24))
        {
LABEL_387:
          PB::Reader::recallMark();
          goto LABEL_546;
        }
        unsigned __int32 v122 = (char *)*((void *)this + 11);
        while (1)
        {
          unint64_t v123 = *((void *)this + 12);
          if ((unint64_t)v122 >= v123)
          {
            int v124 = (char *)*((void *)this + 10);
            uint64_t v125 = (v122 - v124) >> 3;
            unint64_t v126 = v125 + 1;
            if ((unint64_t)(v125 + 1) >> 61) {
              goto LABEL_555;
            }
            uint64_t v127 = v123 - (void)v124;
            if (v127 >> 2 > v126) {
              unint64_t v126 = v127 >> 2;
            }
            BOOL v28 = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v28) {
              unint64_t v128 = v126;
            }
            if (v128)
            {
              unint64_t v128 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v128);
              int v124 = (char *)*((void *)this + 10);
              unsigned __int32 v122 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v129 = 0;
            }
            CGAffineTransform v130 = (void *)(v128 + 8 * v125);
            *CGAffineTransform v130 = 0;
            double v131 = (char *)(v130 + 1);
            while (v122 != v124)
            {
              uint64_t v132 = *((void *)v122 - 1);
              v122 -= 8;
              *--CGAffineTransform v130 = v132;
            }
            *((void *)this + 10) = v130;
            *((void *)this + 11) = v131;
            *((void *)this + 12) = v128 + 8 * v129;
            if (v124) {
              operator delete(v124);
            }
            unsigned __int32 v122 = v131;
          }
          else
          {
            *(void *)unsigned __int32 v122 = 0;
            v122 += 8;
          }
          *((void *)this + 11) = v122;
          if (*((char **)this + 10) == v122) {
            break;
          }
          unint64_t v134 = *((void *)a2 + 1);
          unint64_t v133 = *((void *)a2 + 2);
          uint64_t v135 = *(void *)a2;
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v138 = 0;
          if (v134 > 0xFFFFFFFFFFFFFFF5 || v134 + 10 > v133)
          {
            if (v133 <= v134) {
              uint64_t v140 = *((void *)a2 + 1);
            }
            else {
              uint64_t v140 = *((void *)a2 + 2);
            }
            while (1)
            {
              if (v140 == v134) {
                goto LABEL_336;
              }
              unint64_t v141 = v134 + 1;
              char v142 = *(unsigned char *)(v135 + v134);
              *((void *)a2 + 1) = v141;
              v138 |= (unint64_t)(v142 & 0x7F) << v136;
              if ((v142 & 0x80) == 0) {
                break;
              }
              v136 += 7;
              unint64_t v134 = v141;
              BOOL v40 = v137++ > 8;
              if (v40)
              {
LABEL_269:
                uint64_t v138 = 0;
                goto LABEL_272;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v138 = 0;
            }
          }
          else
          {
            while (1)
            {
              unint64_t v141 = v134 + 1;
              *((void *)a2 + 1) = v134 + 1;
              char v143 = *(unsigned char *)(v135 + v134);
              v138 |= (unint64_t)(v143 & 0x7F) << v136;
              if ((v143 & 0x80) == 0) {
                break;
              }
              v136 += 7;
              unint64_t v134 = v141;
              BOOL v40 = v137++ > 8;
              if (v40) {
                goto LABEL_269;
              }
            }
          }
LABEL_272:
          *((void *)v122 - 1) = v138;
          if (v141 >= v133 || *((unsigned char *)a2 + 24)) {
            goto LABEL_387;
          }
        }
LABEL_557:
        __break(1u);
        return;
      case 0xEu:
        if (v17 == 2)
        {
          if (PB::Reader::placeMark()) {
            return;
          }
          if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
          {
            unsigned __int32 v122 = (char *)*((void *)this + 8);
            while (1)
            {
              unint64_t v144 = *((void *)this + 9);
              if ((unint64_t)v122 >= v144)
              {
                CGRect v145 = (char *)*((void *)this + 7);
                uint64_t v146 = (v122 - v145) >> 3;
                unint64_t v147 = v146 + 1;
                if ((unint64_t)(v146 + 1) >> 61) {
                  goto LABEL_555;
                }
                uint64_t v148 = v144 - (void)v145;
                if (v148 >> 2 > v147) {
                  unint64_t v147 = v148 >> 2;
                }
                BOOL v28 = (unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8;
                unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v28) {
                  unint64_t v149 = v147;
                }
                if (v149)
                {
                  unint64_t v149 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v149);
                  CGRect v145 = (char *)*((void *)this + 7);
                  unsigned __int32 v122 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v150 = 0;
                }
                CGRect v151 = (void *)(v149 + 8 * v146);
                *CGRect v151 = 0;
                CGRect v152 = (char *)(v151 + 1);
                while (v122 != v145)
                {
                  uint64_t v153 = *((void *)v122 - 1);
                  v122 -= 8;
                  *--CGRect v151 = v153;
                }
                *((void *)this + 7) = v151;
                *((void *)this + ++*(_DWORD *)(result + 8) = v152;
                *((void *)this + 9) = v149 + 8 * v150;
                if (v145) {
                  operator delete(v145);
                }
                unsigned __int32 v122 = v152;
              }
              else
              {
                *(void *)unsigned __int32 v122 = 0;
                v122 += 8;
              }
              *((void *)this + ++*(_DWORD *)(result + 8) = v122;
              if (*((char **)this + 7) == v122) {
                goto LABEL_557;
              }
              unint64_t v155 = *((void *)a2 + 1);
              unint64_t v154 = *((void *)a2 + 2);
              uint64_t v156 = *(void *)a2;
              char v157 = 0;
              unsigned int v158 = 0;
              uint64_t v159 = 0;
              if (v155 > 0xFFFFFFFFFFFFFFF5 || v155 + 10 > v154) {
                break;
              }
              while (1)
              {
                unint64_t v162 = v155 + 1;
                *((void *)a2 + 1) = v155 + 1;
                char v164 = *(unsigned char *)(v156 + v155);
                v159 |= (unint64_t)(v164 & 0x7F) << v157;
                if ((v164 & 0x80) == 0) {
                  break;
                }
                v157 += 7;
                unint64_t v155 = v162;
                BOOL v40 = v158++ > 8;
                if (v40) {
                  goto LABEL_313;
                }
              }
LABEL_316:
              *((void *)v122 - 1) = v159;
              if (v162 >= v154 || *((unsigned char *)a2 + 24)) {
                goto LABEL_387;
              }
            }
            if (v154 <= v155) {
              uint64_t v161 = *((void *)a2 + 1);
            }
            else {
              uint64_t v161 = *((void *)a2 + 2);
            }
            while (v161 != v155)
            {
              unint64_t v162 = v155 + 1;
              char v163 = *(unsigned char *)(v156 + v155);
              *((void *)a2 + 1) = v162;
              v159 |= (unint64_t)(v163 & 0x7F) << v157;
              if ((v163 & 0x80) == 0)
              {
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v159 = 0;
                }
                goto LABEL_316;
              }
              v157 += 7;
              unint64_t v155 = v162;
              BOOL v40 = v158++ > 8;
              if (v40)
              {
LABEL_313:
                uint64_t v159 = 0;
                goto LABEL_316;
              }
            }
LABEL_336:
            *((unsigned char *)a2 + 24) = 1;
            *((void *)v122 - 1) = 0;
          }
          goto LABEL_387;
        }
        v181 = (char *)*((void *)this + 8);
        unint64_t v180 = *((void *)this + 9);
        if ((unint64_t)v181 >= v180)
        {
          v218 = (char *)*((void *)this + 7);
          uint64_t v219 = (v181 - v218) >> 3;
          unint64_t v220 = v219 + 1;
          if ((unint64_t)(v219 + 1) >> 61) {
LABEL_555:
          }
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
          uint64_t v221 = v180 - (void)v218;
          if (v221 >> 2 > v220) {
            unint64_t v220 = v221 >> 2;
          }
          BOOL v28 = (unint64_t)v221 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v28) {
            unint64_t v222 = v220;
          }
          if (v222)
          {
            unint64_t v222 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v222);
            v218 = (char *)*((void *)this + 7);
            v181 = (char *)*((void *)this + 8);
          }
          else
          {
            uint64_t v223 = 0;
          }
          v289 = (void *)(v222 + 8 * v219);
          void *v289 = 0;
          uint64_t v179 = v289 + 1;
          while (v181 != v218)
          {
            uint64_t v290 = *((void *)v181 - 1);
            v181 -= 8;
            *--v289 = v290;
          }
          *((void *)this + 7) = v289;
          *((void *)this + ++*(_DWORD *)(result + 8) = v179;
          *((void *)this + 9) = v222 + 8 * v223;
          if (v218) {
            operator delete(v218);
          }
        }
        else
        {
          *(void *)v181 = 0;
          uint64_t v179 = v181 + 8;
        }
        *((void *)this + ++*(_DWORD *)(result + 8) = v179;
        if (*((void **)this + 7) == v179) {
          goto LABEL_557;
        }
        unint64_t v291 = *((void *)a2 + 1);
        unint64_t v292 = *((void *)a2 + 2);
        uint64_t v293 = *(void *)a2;
        char v294 = 0;
        unsigned int v295 = 0;
        if (v291 <= 0xFFFFFFFFFFFFFFF5 && v291 + 10 <= v292)
        {
          uint64_t v286 = 0;
          while (1)
          {
            unint64_t v299 = v291 + 1;
            *((void *)a2 + 1) = v291 + 1;
            char v300 = *(unsigned char *)(v293 + v291);
            v286 |= (unint64_t)(v300 & 0x7F) << v294;
            if ((v300 & 0x80) == 0) {
              goto LABEL_545;
            }
            v294 += 7;
            unint64_t v291 = v299;
            BOOL v40 = v295++ > 8;
            if (v40) {
              goto LABEL_541;
            }
          }
        }
        uint64_t v286 = 0;
        if (v292 <= v291) {
          unint64_t v292 = *((void *)a2 + 1);
        }
        while (v292 != v291)
        {
          unint64_t v297 = v291 + 1;
          char v298 = *(unsigned char *)(v293 + v291);
          *((void *)a2 + 1) = v297;
          v286 |= (unint64_t)(v298 & 0x7F) << v294;
          if ((v298 & 0x80) == 0)
          {
LABEL_543:
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v286 = 0;
            }
            goto LABEL_545;
          }
          v294 += 7;
          unint64_t v291 = v297;
          BOOL v40 = v295++ > 8;
          if (v40)
          {
LABEL_541:
            uint64_t v286 = 0;
            goto LABEL_545;
          }
        }
        goto LABEL_542;
      default:
        goto LABEL_19;
    }
  }
}

void sub_184FEFBB0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void PB::PtrVector<PBPageLayoutPkg::PBRect>::emplace_back<>()
{
}

void sub_184FEFD3C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void PBPageLayoutPkg::PBPageLayout::~PBPageLayout(PBPageLayoutPkg::PBPageLayout *this)
{
  PBPageLayoutPkg::PBPageLayout::~PBPageLayout(this);

  JUMPOUT(0x18532A2A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void **v25;
  uint64_t vars8;

  *(void *)this = &unk_1ED094660;
  unint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 36);
    CFAllocatorRef v4 = (void *)*((void *)this + 35);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        CFAllocatorRef v5 = v6;
        *unint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      CFAllocatorRef v4 = (void *)*((void *)this + 35);
    }
    *((void *)this + 36) = v2;
    operator delete(v4);
  }
  uint64_t v25 = (void **)((char *)this + 256);
  std::vector<std::unique_ptr<PBPageLayoutPkg::PBRect>>::__destroy_vector::operator()[abi:fe180100](&v25);
  uint64_t v25 = (void **)((char *)this + 232);
  std::vector<std::unique_ptr<PBPageLayoutPkg::PBRect>>::__destroy_vector::operator()[abi:fe180100](&v25);
  uint64_t v7 = *((void *)this + 28);
  *((void *)this + 2++*(_DWORD *)(result + 8) = 0;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:fe180100](v7);
  }
  char v8 = (void *)*((void *)this + 25);
  if (v8)
  {
    unsigned int v9 = (void *)*((void *)this + 26);
    unint64_t v10 = (void *)*((void *)this + 25);
    if (v9 != v8)
    {
      do
      {
        char v12 = *--v9;
        unint64_t v11 = v12;
        *unsigned int v9 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      while (v9 != v8);
      unint64_t v10 = (void *)*((void *)this + 25);
    }
    *((void *)this + 26) = v8;
    operator delete(v10);
  }
  char v13 = (void *)*((void *)this + 22);
  if (v13)
  {
    unsigned int v14 = (void *)*((void *)this + 23);
    unint64_t v15 = (void *)*((void *)this + 22);
    if (v14 != v13)
    {
      do
      {
        int v17 = *--v14;
        char v16 = v17;
        *unsigned int v14 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      while (v14 != v13);
      unint64_t v15 = (void *)*((void *)this + 22);
    }
    *((void *)this + 23) = v13;
    operator delete(v15);
  }
  unint64_t v18 = (void *)*((void *)this + 19);
  if (v18)
  {
    *((void *)this + 20) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 16);
  if (v19)
  {
    *((void *)this + 17) = v19;
    operator delete(v19);
  }
  int v20 = (void *)*((void *)this + 13);
  if (v20)
  {
    *((void *)this + 14) = v20;
    operator delete(v20);
  }
  BOOL v21 = (void *)*((void *)this + 10);
  if (v21)
  {
    *((void *)this + 11) = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)*((void *)this + 7);
  if (v22)
  {
    *((void *)this + ++*(_DWORD *)(result + 8) = v22;
    operator delete(v22);
  }
  unint64_t v23 = (void *)*((void *)this + 4);
  if (v23)
  {
    *((void *)this + 5) = v23;
    operator delete(v23);
  }
  int v24 = (void *)*((void *)this + 1);
  if (v24)
  {
    *((void *)this + 2) = v24;
    operator delete(v24);
  }

  PB::Base::~Base(this);
}

void std::vector<std::unique_ptr<PBPageLayoutPkg::PBRect>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    CFAllocatorRef v4 = v1[1];
    CFAllocatorRef v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *CFAllocatorRef v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      CFAllocatorRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL pdf_document_unlock_with_password(uint64_t a1, char *__s)
{
  if (!a1) {
    return 1;
  }
  size_t v4 = strlen(__s);

  return CGPDFSecurityManagerUnlock(a1, __s, v4);
}

void pdf_document_finalize(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 80);
  if (v2) {
    CFRelease(v2);
  }
  free(*(void **)(a1 + 24));
  CGPropertiesRelease(*(CFTypeRef **)(a1 + 32));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 40));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 48));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 56));
  unint64_t v3 = *(uint64_t **)(a1 + 16);

  pdf_reader_release(v3);
}

CGPDFDictionaryRef pdf_document_get_catalog(uint64_t a1)
{
  CGPDFDictionaryRef value = 0;
  trailer = (CGPDFDictionary *)pdf_xref_get_trailer(a1);
  if (CGPDFDictionaryGetDictionary(trailer, "Root", &value)) {
    return value;
  }
  else {
    return 0;
  }
}

unsigned char *PDFResourceSetEmit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PDFDocumentBeginObject(*(void *)(a1 + 8), *(void *)(a1 + 16), a3, a4, a5, a6, a7, a8);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"<<", v9, v10, v11, v12, v13, v14, v97);
  if (*(_DWORD *)(a1 + 24))
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ProcSet [", v15, v16, v17, v18, v19, v20, v98);
    int v27 = *(_DWORD *)(a1 + 24);
    if (v27)
    {
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/PDF", v21, v22, v23, v24, v25, v26, v99);
      int v27 = *(_DWORD *)(a1 + 24);
      if ((v27 & 2) == 0)
      {
LABEL_4:
        if ((v27 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_33;
      }
    }
    else if ((v27 & 2) == 0)
    {
      goto LABEL_4;
    }
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Text", v21, v22, v23, v24, v25, v26, v99);
    int v27 = *(_DWORD *)(a1 + 24);
    if ((v27 & 4) == 0)
    {
LABEL_5:
      if ((v27 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_34;
    }
LABEL_33:
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ImageB", v21, v22, v23, v24, v25, v26, v99);
    int v27 = *(_DWORD *)(a1 + 24);
    if ((v27 & 8) == 0)
    {
LABEL_6:
      if ((v27 & 0x10) == 0)
      {
LABEL_8:
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"]", v21, v22, v23, v24, v25, v26, v99);
        goto LABEL_9;
      }
LABEL_7:
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ImageI", v21, v22, v23, v24, v25, v26, v99);
      goto LABEL_8;
    }
LABEL_34:
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ImageC", v21, v22, v23, v24, v25, v26, v99);
    if ((*(_DWORD *)(a1 + 24) & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_9:
  if (*(void *)(a1 + 32))
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ColorSpace <<", v15, v16, v17, v18, v19, v20, v98);
    BOOL v28 = *(void **)(a1 + 8);
    CFArrayRef v29 = *(const __CFArray **)(*(void *)(a1 + 32) + 8);
    v108.length = CFArrayGetCount(v29);
    v108.location = 0;
    CFArrayApplyFunction(v29, v108, (CFArrayApplierFunction)emitColorSpace_18530, v28);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v30, v31, v32, v33, v34, v35, v100);
  }
  if (*(void *)(a1 + 40))
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ExtGState <<", v15, v16, v17, v18, v19, v20, v98);
    uint64_t v36 = *(void **)(a1 + 8);
    CFArrayRef v37 = *(const __CFArray **)(*(void *)(a1 + 40) + 8);
    v109.length = CFArrayGetCount(v37);
    v109.location = 0;
    CFArrayApplyFunction(v37, v109, (CFArrayApplierFunction)emitEState, v36);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v38, v39, v40, v41, v42, v43, v101);
  }
  if (*(void *)(a1 + 48))
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Font <<", v15, v16, v17, v18, v19, v20, v98);
    char v44 = *(void **)(a1 + 8);
    CFArrayRef v45 = *(const __CFArray **)(*(void *)(a1 + 48) + 8);
    v110.length = CFArrayGetCount(v45);
    v110.location = 0;
    CFArrayApplyFunction(v45, v110, (CFArrayApplierFunction)emitFont, v44);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v46, v47, v48, v49, v50, v51, v102);
  }
  if (*(void *)(a1 + 56) || *(void *)(a1 + 64))
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/XObject <<", v15, v16, v17, v18, v19, v20, v98);
    uint64_t v58 = *(void *)(a1 + 64);
    if (v58)
    {
      unsigned int v59 = *(void **)(a1 + 8);
      CFArrayRef v60 = *(const __CFArray **)(v58 + 8);
      v111.length = CFArrayGetCount(v60);
      v111.location = 0;
      CFArrayApplyFunction(v60, v111, (CFArrayApplierFunction)emitImage, v59);
    }
    uint64_t v61 = *(void *)(a1 + 56);
    if (v61)
    {
      uint64_t v62 = *(void **)(a1 + 8);
      CFArrayRef v63 = *(const __CFArray **)(v61 + 8);
      v112.length = CFArrayGetCount(v63);
      v112.location = 0;
      CFArrayApplyFunction(v63, v112, (CFArrayApplierFunction)emitForm, v62);
    }
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v52, v53, v54, v55, v56, v57, v103);
  }
  if (*(void *)(a1 + 72))
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Pattern <<", v15, v16, v17, v18, v19, v20, v98);
    char v64 = *(void **)(a1 + 8);
    CFArrayRef v65 = *(const __CFArray **)(*(void *)(a1 + 72) + 8);
    v113.length = CFArrayGetCount(v65);
    v113.location = 0;
    CFArrayApplyFunction(v65, v113, (CFArrayApplierFunction)emitPattern_18529, v64);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v66, v67, v68, v69, v70, v71, v104);
  }
  if (*(void *)(a1 + 80))
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Properties <<", v15, v16, v17, v18, v19, v20, v98);
    uint64_t v72 = *(void **)(a1 + 8);
    CFArrayRef v73 = *(const __CFArray **)(*(void *)(a1 + 80) + 8);
    v114.length = CFArrayGetCount(v73);
    v114.location = 0;
    CFArrayApplyFunction(v73, v114, (CFArrayApplierFunction)emitProperties, v72);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v74, v75, v76, v77, v78, v79, v105);
  }
  if (*(void *)(a1 + 88))
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Shading <<", v15, v16, v17, v18, v19, v20, v98);
    unsigned int v80 = *(void **)(a1 + 8);
    CFArrayRef v81 = *(const __CFArray **)(*(void *)(a1 + 88) + 8);
    v115.length = CFArrayGetCount(v81);
    v115.location = 0;
    CFArrayApplyFunction(v81, v115, (CFArrayApplierFunction)emitShading, v80);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v82, v83, v84, v85, v86, v87, v106);
  }
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v15, v16, v17, v18, v19, v20, v98);
  uint64_t v95 = *(void *)(a1 + 8);

  return PDFDocumentEndObject(v95, v88, v89, v90, v91, v92, v93, v94);
}

void emitShading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void emitProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    uint64_t v10 = PDFXRefTableAddObject(*(void **)(*(void *)(a1 + 8) + 464));
    *(void *)(a1 + 16) = v10;
  }

  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 24, v10, a5, a6, a7, a8);
}

void emitPattern_18529(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 80, v9, a5, a6, a7, a8);
}

void emitForm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 40, v9, a5, a6, a7, a8);
}

void emitImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 24, v9, a5, a6, a7, a8);
}

uint64_t emitFont(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void emitEState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    uint64_t v10 = PDFXRefTableAddObject(*(void **)(*(void *)(a1 + 8) + 464));
    *(void *)(a1 + 16) = v10;
  }

  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 24, v10, a5, a6, a7, a8);
}

void emitColorSpace_18530(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (uint64_t)(a1 + 5);
  if (!a1) {
    uint64_t v9 = 0;
  }
  PDFDocumentPrintf(a2, (uint64_t)"/%N", a3, a4, a5, a6, a7, a8, v9);

  PDFColorSpaceEmitReference(a1, v10, v11, v12, v13, v14, v15, v16);
}

void PDFResourceSetAddEState(uint64_t a1, const void *a2)
{
  size_t v4 = *(const void ***)(a1 + 40);
  if (!v4)
  {
    size_t v4 = CGOrderedSetCreate();
    *(void *)(a1 + 40) = v4;
  }

  CGOrderedSetAddValue((CFSetRef *)v4, a2);
}

void *shape_empty()
{
  return &the_empty_shape;
}

BOOL shape_data_valid(_DWORD *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2 >= 0xC)
  {
    int64_t v3 = a2 >> 2;
    uint64_t v4 = (a2 >> 2) - 1;
    if ((v4 & 1) != 0 || *a1 != 0x80000000 || a1[v4] != 0x7FFFFFFF) {
      return 0;
    }
    uint64_t v5 = (int)a1[1];
    if (v4 == v5) {
      return ((v3 - 3) & 0xFFFFFFFFFFFFFFFDLL) == 0;
    }
    if (v5 != 2) {
      return 0;
    }
    if (a2 < 0x10)
    {
      return 1;
    }
    else
    {
      uint64_t v6 = 2;
      int v7 = 2;
      do
      {
        uint64_t v2 = 0;
        uint64_t v8 = v6;
        int v9 = a1[v7 + 1];
        if ((v9 & 1) != 0 || (v9 - 1024) < 0xFFFFFC02) {
          break;
        }
        uint64_t v10 = v7;
        BOOL v11 = __OFADD__(v7, v9);
        v7 += v9;
        if (v11 || v3 <= v7) {
          return 0;
        }
        uint64_t v6 = v7;
        if (v9 != 2 && v4 == v7) {
          return 0;
        }
        if (v4 > v7)
        {
          int v13 = a1[v7];
          if (v13 == 0x7FFFFFFF || v13 <= a1[v8]) {
            return 0;
          }
        }
        uint64_t v14 = v10 + 2;
        if ((int)v10 + 2 < v7)
        {
          int v15 = a1[v14];
          while (1)
          {
            int v16 = a1[v14 + 1];
            if (v16 <= v15) {
              return 0;
            }
            if (v14 + 2 >= v7) {
              break;
            }
            uint64_t v2 = 0;
            int v15 = a1[v14 + 2];
            v14 += 2;
            if (v15 <= v16) {
              return v2;
            }
          }
        }
        uint64_t v2 = 1;
      }
      while (v4 > v7);
    }
  }
  return v2;
}

double shape_alloc_bounds(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if (a5 >= 2147483646) {
    int v5 = 2147483646;
  }
  else {
    int v5 = a5;
  }
  if (a3 == 0x80000000 || a3 == -2147483647) {
    int v6 = -2147483647;
  }
  else {
    int v6 = a3;
  }
  if (a2 < a4 && v6 < v5)
  {
    int v9 = (char *)malloc_type_malloc(0x200uLL, 0x705560E0uLL);
    *(void *)int v9 = 0x280000000;
    *((_DWORD *)v9 + 2) = v6;
    *((_DWORD *)v9 + 3) = 4;
    *((_DWORD *)v9 + 4) = a2;
    *((_DWORD *)v9 + 5) = a4;
    *((_DWORD *)v9 + 6) = v5;
    double result = NAN;
    *(void *)(v9 + 2++*(_DWORD *)(result + 8) = 0x7FFFFFFF00000002;
  }
  return result;
}

uint64_t rect_to_bounds_18558(signed int *a1, signed int *a2, signed int *a3, signed int *a4, double a5, double a6, double a7, double a8)
{
  double v8 = -0.0;
  if (a7 < 0.0) {
    double v8 = a7;
  }
  double v9 = a5 + v8;
  if (a7 < 0.0) {
    a7 = -a7;
  }
  signed int v10 = vcvtmd_s64_f64(v9 + 0.00390625);
  signed int v11 = vcvtpd_s64_f64(a7 + v9 + -0.00390625);
  if (v10 >= v11) {
    return 0xFFFFFFFFLL;
  }
  *a1 = v10;
  *a3 = v11;
  double v12 = -a8;
  double v13 = -0.0;
  if (a8 < 0.0) {
    double v13 = a8;
  }
  double v14 = a6 + v13;
  if (a8 >= 0.0) {
    double v12 = a8;
  }
  signed int v15 = vcvtmd_s64_f64(v14 + 0.00390625);
  signed int v16 = vcvtpd_s64_f64(v12 + v14 + -0.00390625);
  if (v15 >= v16) {
    return 0xFFFFFFFFLL;
  }
  *a2 = v15;
  *a4 = v16;
  return 1;
}

int *shape_union_with_bounds(int *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a5 >= 2147483646) {
    int v5 = 2147483646;
  }
  else {
    int v5 = a5;
  }
  if (a3 == 0x80000000 || a3 == -2147483647) {
    int v6 = -2147483647;
  }
  else {
    int v6 = a3;
  }
  if (a2 >= a4 || v6 >= v5)
  {
    return shape_copy(a1);
  }
  else
  {
    uint64_t v8 = 0x280000000;
    int v9 = v6;
    int v10 = 4;
    int v11 = a2;
    int v12 = a4;
    int v13 = v5;
    uint64_t v14 = 0x7FFFFFFF00000002;
    return shape_union((uint64_t)a1, a1, (int *)&v8);
  }
}

_DWORD *shape_copy(_DWORD *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result == 0x80000000 && (uint64_t v2 = result[1], (int)v2 >= 1))
    {
      double result = &the_empty_shape;
      if (v1 != (_DWORD *)&the_empty_shape && v1[v2] != 0x7FFFFFFF)
      {
        signed int v3 = shape_length((uint64_t)v1);
        if (v3 >= 4)
        {
          uint64_t v4 = v3;
          double result = malloc_type_malloc((4 * v3 + 511) & 0xFFFFFFFFFFFFFE00, 0x705560E0uLL);
          uint64_t v5 = 0;
          do
          {
            result[v5] = v1[v5];
            ++v5;
          }
          while (v4 != v5);
        }
        else
        {
          return &the_empty_shape;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t shape_length(uint64_t a1)
{
  if (*(_DWORD *)a1 == 0x80000000 && *(_DWORD *)(a1 + 4) == 4 && *(_DWORD *)(a1 + 16) == 0x7FFFFFFF) {
    return 5;
  }
  if ((_UNKNOWN *)a1 == &the_empty_shape) {
    return 3;
  }
  uint64_t v2 = (_DWORD *)(a1 + 4 * *(int *)(a1 + 4));
  if (*v2 == 0x7FFFFFFF) {
    return 3;
  }
  do
  {
    signed int v3 = v2;
    v2 += (int)v2[1];
  }
  while (*v2 != 0x7FFFFFFF);
  return (((unint64_t)v3 - a1) >> 2) + 3;
}

_DWORD *shape_alloc_data(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  if (*(_DWORD *)a2 != 0x80000000) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 4);
  if ((int)v4 < 1) {
    return 0;
  }
  double result = &the_empty_shape;
  if ((_UNKNOWN *)a2 != &the_empty_shape && *(_DWORD *)(a2 + 4 * v4) != 0x7FFFFFFF && a3 >= 0x10)
  {
    unint64_t v6 = a3 >> 2;
    if (*(_DWORD *)(a2 + 4 * (a3 >> 2) - 4) == 0x7FFFFFFF)
    {
      double result = malloc_type_malloc(((a3 & 0xFFFFFFFFFFFFFFFCLL) + 511) & 0xFFFFFFFFFFFFFE00, 0x705560E0uLL);
      uint64_t v7 = 0;
      do
      {
        result[v7] = *(_DWORD *)(a2 + 4 * v7);
        ++v7;
      }
      while (v6 != v7);
    }
  }
  return result;
}

BOOL shape_is_empty(uint64_t a1)
{
  return (_UNKNOWN *)a1 == &the_empty_shape || *(_DWORD *)(a1 + 4 * *(int *)(a1 + 4)) == 0x7FFFFFFF;
}

void shape_free(int a1, void *a2)
{
  if (a2)
  {
    if (a2 != &the_empty_shape) {
      free(a2);
    }
  }
}

uint64_t shape_count(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 4 * *(int *)(a1 + 4));
  if (*v1 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v2 = (int)v1[1];
  signed int v3 = &v1[v2];
  if (*v3 == 0x7FFFFFFF) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = (result + (int)v2 / 2 - 1);
    uint64_t v2 = (int)v3[1];
    v3 += v2;
  }
  while (*v3 != 0x7FFFFFFF);
  return result;
}

BOOL shape_is_rectangular(uint64_t a1)
{
  if ((_UNKNOWN *)a1 == &the_empty_shape || *(_DWORD *)(a1 + 4 * *(int *)(a1 + 4)) == 0x7FFFFFFF) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 12) == 4 && *(_DWORD *)(a1 + 28) == 2) {
    return *(_DWORD *)(a1 + 32) == 0x7FFFFFFF;
  }
  return 0;
}

uint64_t shape_contains_point(uint64_t result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)result != 0x80000000) {
      return 0;
    }
    uint64_t result = 0;
    if ((_UNKNOWN *)v3 == &the_empty_shape) {
      return result;
    }
    uint64_t v4 = *(unsigned int *)(v3 + 4);
    if ((int)v4 < 1) {
      return result;
    }
    uint64_t v5 = (_DWORD *)(v3 + 4 * v4);
    if (*v5 == 0x7FFFFFFF) {
      return 0;
    }
    uint64_t v6 = (int)v5[1];
    uint64_t v7 = &v5[v6];
    int v8 = *v7;
    if (*v5 > a3 || v8 == 0x7FFFFFFF) {
      return 0;
    }
    while (1)
    {
      int v10 = v7;
      if (v8 > a3 && v6 != 2) {
        break;
      }
LABEL_18:
      uint64_t result = 0;
      if (v8 <= a3)
      {
        uint64_t v6 = (int)v7[1];
        v7 += v6;
        int v8 = *v7;
        uint64_t v5 = v10;
        if (*v7 != 0x7FFFFFFF) {
          continue;
        }
      }
      return result;
    }
    int v11 = v5 + 2;
    while (*v11 > a2 || v11[1] <= a2)
    {
      v11 += 2;
      if (v11 == v7) {
        goto LABEL_18;
      }
    }
    return 1;
  }
  return result;
}

uint64_t shape_contains_bounds(unint64_t a1, int a2, signed int a3, int a4, signed int a5)
{
  if (a2 >= a4) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a1 && (_UNKNOWN *)a1 != &the_empty_shape && a3 < a5)
  {
    if (*(_DWORD *)a1 == 0x80000000)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 4);
      if ((int)v6 >= 1 && *(_DWORD *)(a1 + 4 * v6) != 0x7FFFFFFF)
      {
        signed int v8 = 0x80000000;
        while (a3 >= v8)
        {
          unint64_t v9 = a1;
          uint64_t v10 = *(int *)(a1 + 4);
          a1 += 4 * v10;
          signed int v8 = *(_DWORD *)a1;
          if (a3 < *(_DWORD *)a1 && (int)v10 >= 3)
          {
            int v12 = (_DWORD *)(v9 + 8);
            while (*v12 > a2 || v12[1] < a4)
            {
              v12 += 2;
              if ((unint64_t)v12 >= a1) {
                goto LABEL_22;
              }
            }
            a3 = *(_DWORD *)a1;
            if (v8 >= a5) {
              return 1;
            }
          }
LABEL_22:
          uint64_t v5 = 0;
          if (v8 == 0x7FFFFFFF) {
            return v5;
          }
        }
      }
    }
    return 0;
  }
  return v5;
}

int *shape_enclose_with_bounds(uint64_t a1, int a2, signed int a3, signed int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = &the_empty_shape;
  if ((_UNKNOWN *)a1 != &the_empty_shape && a1 != 0 && *(_DWORD *)a1 == 0x80000000)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 4);
    if ((int)v7 >= 1 && *(_DWORD *)(a1 + 4 * v7) != 0x7FFFFFFF && a2 < a4 && a3 < a5)
    {
      *(void *)uint64_t v15 = 0x280000000;
      *(_DWORD *)&v15[8] = a3;
      v16[0] = 4;
      v16[1] = a2;
      v16[2] = a4;
      v16[3] = a5;
      uint64_t v17 = 0x7FFFFFFF00000002;
      int v13 = shape_intersect(a1, (int *)a1, (int *)v15);
      if (v13 != (int *)&the_empty_shape)
      {
        uint64_t v14 = v13;
        if (shape_bounds((uint64_t)v13, (int *)v15, &v15[4], (signed int *)&v15[8], v16) == 9
          && *(_DWORD *)v15 == a2
          && *(void *)&v15[4] == __PAIR64__(a4, a3)
          && v16[0] == a5)
        {
          if (v14) {
            free(v14);
          }
          return 0;
        }
        else
        {
          return v14;
        }
      }
    }
  }
  return (int *)v5;
}

int *shape_intersect(uint64_t a1, int *a2, int *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = a2;
  if (*a2 != 0x80000000) {
    return 0;
  }
  uint64_t v4 = a3;
  uint64_t result = 0;
  if (!a3) {
    return result;
  }
  uint64_t v6 = a2[1];
  if ((int)v6 < 1) {
    return result;
  }
  if (*a3 != 0x80000000) {
    return 0;
  }
  uint64_t v7 = a3[1];
  if ((int)v7 < 1) {
    return 0;
  }
  if (a2[v6] == 0x7FFFFFFF || a3[v7] == 0x7FFFFFFF) {
    return (int *)&the_empty_shape;
  }
  uint64_t result = (int *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
  if (result)
  {
    signed int v8 = result;
    if (*v3 == 0x7FFFFFFF)
    {
      uint64_t v9 = 512;
      uint64_t v10 = result;
LABEL_13:
      int *v8 = 0x7FFFFFFF;
      return final_check(v10, v9, v8 - v10 + 1);
    }
    uint64_t v36 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v9 = 512;
    uint64_t v10 = result;
    while (1)
    {
      if (*v4 == 0x7FFFFFFF) {
        goto LABEL_13;
      }
      int v13 = v4;
      if (v8 - v10 + 4 > v9)
      {
        uint64_t v14 = 2 * v9;
        uint64_t v15 = (int *)malloc_type_realloc(v10, (8 * v9 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
        signed int v16 = (_DWORD *)((char *)v12 + (char *)v15 - (char *)v10);
        if (!v12) {
          signed int v16 = 0;
        }
        if (v15 != v10)
        {
          signed int v8 = (int *)((char *)v8 + (char *)v15 - (char *)v10);
          int v12 = v16;
          uint64_t v10 = v15;
        }
        uint64_t v9 = v14;
      }
      if (!v10) {
        return 0;
      }
      int v17 = *v3;
      int v18 = *v13;
      if (*v13 >= *v3)
      {
        if (v17 == 0x7FFFFFFF)
        {
          uint64_t v19 = v3;
          uint64_t v3 = v11;
        }
        else
        {
          int *v8 = v17;
          uint64_t v19 = &v3[v3[1]];
        }
        if (v17 < v18 || (int v18 = *v13, *v13 == 0x7FFFFFFF))
        {
          uint64_t v20 = v3;
          uint64_t v3 = v19;
          uint64_t v4 = v13;
          int v13 = v36;
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v19 = v3;
        uint64_t v3 = v11;
      }
      int *v8 = v18;
      uint64_t v4 = &v13[v13[1]];
      uint64_t v20 = v3;
      uint64_t v3 = v19;
LABEL_34:
      uint64_t v36 = v13;
      CFArrayRef v37 = v20;
      uint64_t v21 = v20 + 2;
      uint64_t v22 = (char *)(v8 + 1);
      v8 += 2;
      if (v20 + 2 != v3)
      {
        uint64_t v23 = v13 + 2;
        if (v13 + 2 != v4)
        {
          uint64_t v24 = 0;
          do
          {
            if (v8 - v10 + 4 > v9)
            {
              uint64_t v25 = 2 * v9;
              uint64_t result = (int *)malloc_type_realloc(v10, (8 * v9 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
              int64_t v26 = (char *)result - (char *)v10;
              if (result == v10)
              {
                uint64_t v9 = v25;
              }
              else
              {
                if (v12) {
                  int v12 = (_DWORD *)((char *)v12 + v26);
                }
                else {
                  int v12 = 0;
                }
                if (!result) {
                  return result;
                }
                signed int v8 = (int *)((char *)v8 + v26);
                v22 += v26;
                uint64_t v9 = v25;
                uint64_t v10 = result;
              }
            }
            int v27 = *v21;
            int v28 = *v23;
            if (*v21 <= *v23)
            {
              uint64_t v29 = v24 ^ 1;
              ++v21;
              int *v8 = v27;
              int v28 = *v23;
            }
            else
            {
              uint64_t v29 = v24;
            }
            if (v28 <= v27)
            {
              uint64_t v29 = v29 ^ 2;
              ++v23;
              int *v8 = v28;
            }
            BOOL v31 = v24 == 3 || v29 == 3;
            v8 += v31;
            if (v21 == v3) {
              break;
            }
            uint64_t v24 = v29;
          }
          while (v23 != v4);
        }
      }
      int v32 = ((unint64_t)((char *)v8 - v22) >> 2) + 1;
      *(_DWORD *)uint64_t v22 = v32;
      if (v12 && v32 == *v12)
      {
        if (((unint64_t)((char *)v8 - v22) >> 2) != 1)
        {
          uint64_t v33 = 1;
          while (&v22[v33 * 4] != (char *)v8)
          {
            int v34 = v12[v33];
            int v35 = *(_DWORD *)&v22[v33 * 4];
            ++v33;
            if (v34 != v35) {
              goto LABEL_65;
            }
          }
        }
        signed int v8 = (int *)(v22 - 4);
      }
      else
      {
LABEL_65:
        int v12 = v22;
      }
      int v11 = v37;
      if (*v3 == 0x7FFFFFFF) {
        goto LABEL_13;
      }
    }
  }
  return result;
}

uint64_t shape_intersects_shape(signed int *a1, signed int *a2)
{
  if (!a1 || *a1 != 0x80000000) {
    return 0;
  }
  uint64_t v2 = 0;
  if (a2)
  {
    uint64_t v3 = a1[1];
    if ((int)v3 >= 1)
    {
      if (*a2 != 0x80000000) {
        return 0;
      }
      uint64_t v4 = a2[1];
      if ((int)v4 < 1 || a1[v3] == 0x7FFFFFFF || a2[v4] == 0x7FFFFFFF) {
        return 0;
      }
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      signed int v8 = 0x80000000;
      do
      {
        signed int v9 = *a2;
        if (*a2 == 0x7FFFFFFF) {
          return 0;
        }
        if (v9 >= v8)
        {
          uint64_t v10 = &a1[a1[1]];
          uint64_t v7 = a1;
          if (v8 < v9)
          {
            uint64_t v7 = a1;
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = a1;
        }
        uint64_t v6 = a2;
        a2 += a2[1];
LABEL_18:
        a1 = v10;
        int v11 = 0;
        int v12 = v7 + 2;
        int v13 = v6 + 2;
        while (v12 != a1 && v13 != a2)
        {
          signed int v14 = *v12;
          v11 ^= *v12 <= *v13;
          v12 += *v12 <= *v13;
          BOOL v15 = *v13 <= v14;
          if (v15) {
            v11 ^= 2u;
          }
          v13 += v15;
          uint64_t v2 = 1;
          if (v11 == 3) {
            return v2;
          }
        }
        uint64_t v2 = 0;
        signed int v8 = *a1;
      }
      while (*a1 != 0x7FFFFFFF);
    }
  }
  return v2;
}

int32x2_t *shape_offset(uint64_t a1, int32x2_t *a2, unsigned int a3, __int32 a4)
{
  int v7 = shape_length((uint64_t)a2);
  if (v7 <= 3) {
    goto LABEL_4;
  }
  if (v7 == 5)
  {
    a3 += a2[1].u32[0];
    a4 += a2[1].i32[1];
LABEL_4:
    if (a4 | a3)
    {
      uint64_t result = (int32x2_t *)malloc_type_malloc(0x200uLL, 0x705560E0uLL);
      *uint64_t result = (int32x2_t)0x480000000;
      result[1].i32[0] = a3;
      result[1].i32[1] = a4;
      signed int v9 = result + 2;
LABEL_6:
      v9->i32[0] = 0x7FFFFFFF;
      return result;
    }
    return (int32x2_t *)&the_empty_shape;
  }
  uint64_t result = (int32x2_t *)malloc_type_malloc((4 * v7 + 511) & 0x7FFFFFE00, 0x705560E0uLL);
  if (result)
  {
    result->i32[0] = a2->i32[0];
    result->i32[1] = a2->i32[1];
    __int32 v12 = a2[1].i32[0];
    int v11 = a2 + 1;
    __int32 v10 = v12;
    signed int v9 = result + 1;
    if (v12 != 0x7FFFFFFF)
    {
      int32x2_t v13 = vdup_n_s32(a3);
      do
      {
        uint64_t v14 = v11->i32[1];
        v9->i32[0] = v10 + a4;
        v9->i32[1] = v14;
        BOOL v15 = (int32x2_t *)((char *)v11 + 4 * v14);
        if ((int)v14 >= 3)
        {
          signed int v16 = v11 + 1;
          int v17 = v9 + 1;
          do
          {
            int32x2_t v18 = *v16++;
            *v17++ = vadd_s32(v18, v13);
          }
          while (v16 < v15);
        }
        signed int v9 = (int32x2_t *)((char *)v9 + 4 * v14);
        __int32 v10 = v15->i32[0];
        int v11 = (int32x2_t *)((char *)v11 + 4 * v14);
      }
      while (v15->i32[0] != 0x7FFFFFFF);
    }
    goto LABEL_6;
  }
  return result;
}

int *shape_intersect_with_bounds(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a6 >= 2147483646) {
    int v6 = 2147483646;
  }
  else {
    int v6 = a6;
  }
  if (a4 == 0x80000000 || a4 == -2147483647) {
    int v7 = -2147483647;
  }
  else {
    int v7 = a4;
  }
  uint64_t result = (int *)&the_empty_shape;
  if (a3 < a5 && v7 < v6)
  {
    uint64_t v9 = 0x280000000;
    int v10 = v7;
    int v11 = 4;
    int v12 = a3;
    int v13 = a5;
    int v14 = v6;
    uint64_t v15 = 0x7FFFFFFF00000002;
    return shape_intersect((uint64_t)&the_empty_shape, a2, (int *)&v9);
  }
  return result;
}

int *shape_difference(uint64_t a1, int *a2, int *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = a2;
  if (*a2 != 0x80000000) {
    return 0;
  }
  uint64_t v4 = a3;
  uint64_t result = 0;
  if (!a3) {
    return result;
  }
  uint64_t v6 = a2[1];
  if ((int)v6 < 1) {
    return result;
  }
  if (*a3 != 0x80000000) {
    return 0;
  }
  uint64_t v7 = a3[1];
  if ((int)v7 < 1) {
    return 0;
  }
  if (a2[v6] == 0x7FFFFFFF) {
    return (int *)&the_empty_shape;
  }
  if (a3[v7] == 0x7FFFFFFF)
  {
    return shape_copy(a2);
  }
  uint64_t result = (int *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
  if (!result) {
    return result;
  }
  signed int v8 = result;
  if (*v3 != 0x7FFFFFFF)
  {
    uint64_t v38 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v9 = 512;
    int v10 = result;
    while (1)
    {
      int v13 = v4;
      if (v10 - v8 + 4 > v9)
      {
        uint64_t v14 = 2 * v9;
        uint64_t v15 = (int *)malloc_type_realloc(v8, (8 * v9 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
        uint64_t v16 = &v12[(char *)v15 - (char *)v8];
        if (!v12) {
          uint64_t v16 = 0;
        }
        if (v15 != v8)
        {
          int v10 = (int *)((char *)v10 + (char *)v15 - (char *)v8);
          int v12 = v16;
          signed int v8 = v15;
        }
        uint64_t v9 = v14;
      }
      if (!v8) {
        return 0;
      }
      int v17 = *v3;
      int v18 = *v13;
      if (*v13 >= *v3)
      {
        if (v17 == 0x7FFFFFFF)
        {
          uint64_t v19 = v3;
          uint64_t v3 = v11;
        }
        else
        {
          int *v10 = v17;
          uint64_t v19 = &v3[v3[1]];
        }
        if (v17 < v18 || (int v18 = *v13, *v13 == 0x7FFFFFFF))
        {
          uint64_t v20 = v3;
          uint64_t v3 = v19;
          uint64_t v4 = v13;
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v19 = v3;
        uint64_t v3 = v11;
      }
      int *v10 = v18;
      uint64_t v4 = &v13[v13[1]];
      uint64_t v20 = v3;
      uint64_t v3 = v19;
      uint64_t v38 = v13;
LABEL_36:
      uint64_t v39 = v20;
      uint64_t v21 = v20 + 2;
      uint64_t v22 = (char *)(v10 + 1);
      v10 += 2;
      if (v20 + 2 != v3)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v38 + 2;
        do
        {
          if (v10 - v8 + 4 > v9)
          {
            uint64_t v25 = 2 * v9;
            uint64_t result = (int *)malloc_type_realloc(v8, (8 * v9 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
            int64_t v26 = (char *)result - (char *)v8;
            if (result == v8)
            {
              uint64_t v9 = v25;
            }
            else
            {
              if (v12) {
                v12 += v26;
              }
              else {
                int v12 = 0;
              }
              if (!result) {
                return result;
              }
              int v10 = (int *)((char *)v10 + v26);
              v22 += v26;
              uint64_t v9 = v25;
              signed int v8 = result;
            }
          }
          int v27 = *v21;
          int v28 = *v24;
          if (*v21 <= *v24 || v24 == v4)
          {
            uint64_t v30 = v23 ^ 1;
            ++v21;
            int *v10 = v27;
            int v28 = *v24;
          }
          else
          {
            uint64_t v30 = v23;
          }
          if (v28 <= v27 && v24 != v4)
          {
            uint64_t v30 = v30 ^ 2;
            ++v24;
            int *v10 = v28;
          }
          BOOL v33 = v23 == 1 || v30 == 1;
          v10 += v33;
          uint64_t v23 = v30;
        }
        while (v21 != v3);
      }
      int v34 = ((unint64_t)((char *)v10 - v22) >> 2) + 1;
      *(_DWORD *)uint64_t v22 = v34;
      if (v12 && v34 == *(_DWORD *)v12)
      {
        if (((unint64_t)((char *)v10 - v22) >> 2) != 1)
        {
          uint64_t v35 = 4;
          while (&v22[v35] != (char *)v10)
          {
            int v36 = *(_DWORD *)&v12[v35];
            int v37 = *(_DWORD *)&v22[v35];
            v35 += 4;
            if (v36 != v37) {
              goto LABEL_71;
            }
          }
        }
        int v10 = (int *)(v22 - 4);
        int v34 = ((unint64_t)(v22 - 4 - v12) >> 2) + 1;
      }
      else
      {
LABEL_71:
        int v12 = v22;
      }
      int v11 = v39;
      *(_DWORD *)int v12 = v34;
      if (*v3 == 0x7FFFFFFF) {
        goto LABEL_16;
      }
    }
  }
  uint64_t v9 = 512;
  int v10 = result;
LABEL_16:
  int *v10 = 0x7FFFFFFF;

  return final_check(v8, v9, v10 - v8 + 1);
}

int *shape_xor(uint64_t a1, int *a2, int *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = a2;
  if (*a2 != 0x80000000) {
    return 0;
  }
  uint64_t v4 = a3;
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a2[1];
  if ((int)v5 < 1) {
    return 0;
  }
  if (*a3 != 0x80000000) {
    return 0;
  }
  uint64_t v6 = a3[1];
  if ((int)v6 < 1) {
    return 0;
  }
  if (a2[v5] == 0x7FFFFFFF)
  {
    uint64_t v7 = a3;
LABEL_11:
    return shape_copy(v7);
  }
  if (a3[v6] == 0x7FFFFFFF)
  {
    uint64_t v7 = a2;
    goto LABEL_11;
  }
  uint64_t v9 = (char *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
  if (!v9) {
    return 0;
  }
  int v10 = v9;
  int v11 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v12 = 512;
  int v13 = v9;
  while (1)
  {
    uint64_t v14 = v4;
    if (*v3 == 0x7FFFFFFF && *v4 == 0x7FFFFFFF) {
      break;
    }
    if (((v10 - v13) >> 2) + 4 <= v12)
    {
      char v44 = v11;
    }
    else
    {
      uint64_t v15 = 2 * v12;
      uint64_t v16 = (char *)malloc_type_realloc(v13, (8 * v12 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
      int v17 = (_DWORD *)((char *)v11 + v16 - v13);
      if (!v11) {
        int v17 = 0;
      }
      if (v16 != v13)
      {
        v10 += v16 - v13;
        int v11 = v17;
      }
      char v44 = v11;
      if (v16 != v13) {
        int v13 = v16;
      }
      uint64_t v12 = v15;
    }
    if (!v13) {
      return 0;
    }
    int v18 = *v3;
    int v19 = *v14;
    if (*v14 < *v3)
    {
      uint64_t v20 = v3;
      uint64_t v3 = v42;
LABEL_36:
      *(_DWORD *)int v10 = v19;
      uint64_t v4 = &v14[v14[1]];
      uint64_t v21 = v3;
      uint64_t v3 = v20;
      goto LABEL_37;
    }
    if (v18 == 0x7FFFFFFF)
    {
      uint64_t v20 = v3;
      uint64_t v3 = v42;
    }
    else
    {
      *(_DWORD *)int v10 = v18;
      uint64_t v20 = &v3[v3[1]];
    }
    if (v18 >= v19)
    {
      int v19 = *v14;
      if (*v14 != 0x7FFFFFFF) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = v3;
    uint64_t v3 = v20;
    uint64_t v4 = v14;
    uint64_t v14 = v41;
LABEL_37:
    uint64_t v41 = v14;
    uint64_t v42 = v21;
    uint64_t v22 = v21 + 2;
    uint64_t v23 = v14 + 2;
    uint64_t v43 = v10 + 4;
    v10 += 8;
    BOOL v24 = v14 + 2 != v4;
    BOOL v25 = v21 + 2 != v3;
    if (v21 + 2 != v3 || v23 != v4)
    {
      uint64_t v26 = 0;
      while (1)
      {
        if (((v10 - v13) >> 2) + 4 > v12)
        {
          uint64_t v27 = 2 * v12;
          int v28 = (char *)malloc_type_realloc(v13, (8 * v12 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
          int64_t v29 = v28 - v13;
          if (v28 == v13)
          {
            uint64_t v12 = v27;
          }
          else
          {
            uint64_t v30 = (_DWORD *)((char *)v44 + v29);
            if (!v44) {
              uint64_t v30 = 0;
            }
            char v44 = v30;
            if (!v28) {
              return 0;
            }
            v10 += v29;
            v43 += v29;
            uint64_t v12 = v27;
            int v13 = v28;
          }
        }
        int v31 = *v22;
        int v32 = *v23;
        BOOL v33 = v23 == v4 || v31 <= v32;
        if (!v33 || !v25)
        {
          uint64_t v34 = v26;
          uint64_t v35 = v22;
        }
        else
        {
          uint64_t v34 = v26 ^ 1;
          *(_DWORD *)int v10 = v31;
          uint64_t v35 = v22 + 1;
          int v31 = *v22;
          int v32 = *v23;
        }
        BOOL v36 = v32 <= v31 || v22 == v3;
        if (v36 && v24)
        {
          uint64_t v34 = v34 ^ 2;
          ++v23;
          *(_DWORD *)int v10 = v32;
        }
        v10 += 4 * (((v26 - 1) < 2) ^ ((v34 - 1) < 2));
        BOOL v24 = v23 != v4;
        uint64_t v22 = v35;
        uint64_t v26 = v34;
        BOOL v25 = v35 != v3;
        if (v35 == v3)
        {
          uint64_t v22 = v35;
          uint64_t v26 = v34;
          if (v23 == v4) {
            break;
          }
        }
      }
    }
    int v11 = v44;
    int v37 = ((unint64_t)(v10 - v43) >> 2) + 1;
    *(_DWORD *)uint64_t v43 = v37;
    if (v44 && v37 == *v44)
    {
      if (((unint64_t)(v10 - v43) >> 2) != 1)
      {
        uint64_t v38 = 1;
        while (&v43[v38 * 4] != v10)
        {
          int v39 = v44[v38];
          int v40 = *(_DWORD *)&v43[v38 * 4];
          ++v38;
          if (v39 != v40) {
            goto LABEL_71;
          }
        }
      }
      int v10 = v43 - 4;
      int v37 = ((unint64_t)(v43 - 4 - (char *)v44) >> 2) + 1;
    }
    else
    {
LABEL_71:
      int v11 = v43;
    }
    *int v11 = v37;
  }
  *(_DWORD *)int v10 = 0x7FFFFFFF;

  return final_check((int *)v13, v12, ((v10 - v13) >> 2) + 1);
}

void shape_inset(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = (int *)a2;
  if (!(a4 | a3)
    || (v45 = 0, v46 = 0, uint64_t v7 = shape_bounds(a2, (int *)&v46 + 1, &v46, (signed int *)&v45 + 1, &v45), (int)v7 <= 3))
  {
    shape_copy(v4);
    return;
  }
  int v9 = v46;
  int v8 = HIDWORD(v46);
  int v10 = HIDWORD(v46) + a3;
  int v11 = v46 + a4;
  LODWORD(v46) = v46 + a4;
  HIDWORD(v46) = v10;
  int v13 = v45;
  int v12 = HIDWORD(v45);
  int v14 = HIDWORD(v45) - a3;
  int v15 = v45 - a4;
  LODWORD(v45) = v45 - a4;
  HIDWORD(v45) = v14;
  if (v10 >= v14 || v11 >= v15)
  {
    int v17 = v12 + v8 + (v12 + v8 < 0);
    int v18 = v13 + v9;
    char v19 = v18 < 0;
LABEL_11:
    if (v19) {
      ++v18;
    }
    int v20 = v18 >> 1;
    if ((v18 >> 1) | (v17 >> 1))
    {
      int v21 = v17 >> 1;
      uint64_t v22 = malloc_type_malloc(0x200uLL, 0x705560E0uLL);
      *(void *)uint64_t v22 = 0x480000000;
      v22[2] = v21;
      v22[3] = v20;
      v22[4] = 0x7FFFFFFF;
    }
    return;
  }
  unsigned int v23 = v7;
  if (v7 != 9)
  {
    if (!a3)
    {
      char v44 = shape_vinset(v4, a4);
LABEL_55:
      if (v44 != (int *)&the_empty_shape) {
        return;
      }
      int v17 = HIDWORD(v45) + HIDWORD(v46);
      if (HIDWORD(v45) + HIDWORD(v46) < 0 != __OFADD__(HIDWORD(v45), HIDWORD(v46))) {
        ++v17;
      }
      int v18 = v45 + v46;
      char v19 = ((int)v45 + (int)v46 < 0) ^ __OFADD__(v45, v46);
      goto LABEL_11;
    }
    BOOL v24 = (int *)malloc_type_malloc((4 * v7 + 511) & 0x7FFFFFE00, 0x705560E0uLL);
    if (v24)
    {
      int v25 = *v4;
      uint64_t v26 = v24;
      if (*v4 != 0x7FFFFFFF)
      {
        uint64_t v27 = 0;
        int v28 = v24;
        do
        {
          int64_t v29 = v28 + 2;
          uint64_t v30 = v4[1];
          int v31 = v4 + 2;
          v4 += v30;
          if (a3 <= 0)
          {
            if ((int)v30 >= 3)
            {
              int v34 = -2147483647;
              uint64_t v26 = v28 + 2;
              do
              {
                int v35 = v31[1];
                int v36 = *v31 + a3;
                if (v36 <= v34)
                {
                  int v37 = v26 - 1;
                }
                else
                {
                  *uint64_t v26 = v36;
                  int v37 = v26 + 1;
                }
                int v34 = v35 - a3;
                *int v37 = v35 - a3;
                uint64_t v26 = v37 + 1;
                v31 += 2;
              }
              while (v31 < v4);
              goto LABEL_38;
            }
          }
          else if ((int)v30 >= 3)
          {
            uint64_t v26 = v28 + 2;
            do
            {
              int v32 = *v31 + a3;
              int v33 = v31[1] - a3;
              if (v32 < v33)
              {
                *uint64_t v26 = v32;
                v26[1] = v33;
                v26 += 2;
              }
              v31 += 2;
            }
            while (v31 < v4);
            goto LABEL_38;
          }
          uint64_t v26 = v28 + 2;
LABEL_38:
          unint64_t v38 = (unint64_t)((char *)v26 - (char *)v28) >> 2;
          *int v28 = v25;
          v28[1] = v38;
          int v39 = v28 + 1;
          if (v27 && *v27 == v38)
          {
            if (v38 != 2)
            {
              uint64_t v40 = 0;
              while (&v29[v40] != v26)
              {
                int v41 = v27[v40 + 1];
                int v42 = v29[v40++];
                if (v41 != v42) {
                  goto LABEL_45;
                }
              }
            }
            int v39 = v27;
            uint64_t v26 = v28;
          }
LABEL_45:
          int v25 = *v4;
          uint64_t v27 = v39;
          int v28 = v26;
        }
        while (*v4 != 0x7FFFFFFF);
      }
      *uint64_t v26 = 0x7FFFFFFF;
      uint64_t v43 = final_check(v24, v23, v26 - v24 + 1);
      if (!a4) {
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v43 = 0;
      if (!a4)
      {
LABEL_54:
        char v44 = v43;
        goto LABEL_55;
      }
    }
    if (v43 != (int *)&the_empty_shape)
    {
      char v44 = shape_vinset(v43, a4);
      if (v43) {
        free(v43);
      }
      goto LABEL_55;
    }
    goto LABEL_54;
  }

  shape_alloc_bounds(v7, v10, v11, v14, v15);
}

int *shape_vinset(int *a1, int a2)
{
  uint64_t v2 = a1;
  if (!a2) {
    return a1;
  }
  if (a1 == (int *)&the_empty_shape || a1 == 0) {
    return a1;
  }
  int v4 = a2;
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = a1;
  while (1)
  {
    if (v4 >= 0) {
      int v8 = v4;
    }
    else {
      int v8 = -v4;
    }
    int v9 = 0x7FFFFFFF;
    int v10 = (char *)v7;
    while (1)
    {
      int v11 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v12 = *((int *)v10 + 1);
      v10 += 4 * v12;
      if ((int)v12 >= 3)
      {
        int v13 = *(_DWORD *)v10 - v11;
        if (v13 < v9) {
          int v9 = v13;
        }
        if (v13 < v8) {
          int v8 = v13;
        }
      }
    }
    unint64_t v14 = (unint64_t)(v10 - (char *)v7) >> 2;
    int v15 = v14 + 1;
    int v16 = v9 >> 1;
    BOOL v18 = v9 > 0 && v8 > v16;
    if (v4 <= -v8) {
      int v19 = -v8;
    }
    else {
      int v19 = v4;
    }
    if (v8 < v16) {
      int v16 = v8;
    }
    if (v9 > 1) {
      int v8 = v16;
    }
    if (v8 >= v4) {
      int v8 = v4;
    }
    int v20 = v4 >= 1 ? v8 : v19;
    BOOL v21 = v4 < 1 && v18;
    if (!v6) {
      break;
    }
    if (v5 >= v15) {
      goto LABEL_45;
    }
    int v5 = (v14 & 0xFFFFFE00) + 512;
    a1 = (int *)malloc_type_realloc(v6, 8 * v5, 0x7492344AuLL);
    if (!a1) {
      goto LABEL_66;
    }
LABEL_44:
    uint64_t v6 = a1;
LABEL_45:
    uint64_t v22 = &v6[v15];
    int v23 = *v7;
    *uint64_t v22 = *v7;
    int *v6 = v23;
    int v24 = v7[1];
    v22[1] = v24;
    v6[1] = v24;
    int v25 = v7 + 2;
    int v26 = v7[2];
    uint64_t v27 = v6 + 2;
    int v28 = v22 + 2;
    while (v26 != 0x7FFFFFFF)
    {
      uint64_t v29 = v25[1];
      *uint64_t v27 = v26 + v20;
      v27[1] = v29;
      v27 += 2;
      *int v28 = v26 - v20;
      v28[1] = v29;
      v28 += 2;
      uint64_t v30 = &v25[v29];
      if ((int)v29 >= 3)
      {
        int v31 = v25 + 2;
        do
        {
          int v32 = *v31;
          int v33 = v31[1];
          v31 += 2;
          *uint64_t v27 = v32;
          *int v28 = v32;
          v27[1] = v33;
          v28[1] = v33;
          v28 += 2;
          v27 += 2;
        }
        while (v31 < v30);
      }
      int v26 = *v30;
      int v25 = v30;
    }
    *int v28 = 0x7FFFFFFF;
    *uint64_t v27 = 0x7FFFFFFF;
    if (v20 < 1)
    {
      a1 = shape_union((uint64_t)a1, v6, v22);
      int v35 = a1;
      if (v21)
      {
        a1 = shape_union((uint64_t)a1, a1, v7);
        int v34 = a1;
        if (v35 && v35 != (int *)&the_empty_shape) {
          free(v35);
        }
      }
      else
      {
        int v34 = a1;
      }
    }
    else
    {
      a1 = shape_intersect((uint64_t)a1, v6, v22);
      int v34 = a1;
    }
    if (v7 != v2) {
      free(v7);
    }
    v4 -= v20;
    if (v4)
    {
      if (v34 != (int *)&the_empty_shape)
      {
        uint64_t v7 = v34;
        if (v34) {
          continue;
        }
      }
    }
    free(v6);
    return v34;
  }
  int v5 = (v14 & 0xFFFFFE00) + 512;
  a1 = (int *)malloc_type_malloc(8 * v5, 0x705560E0uLL);
  if (a1) {
    goto LABEL_44;
  }
LABEL_66:
  if (v7 != v2) {
    free(v7);
  }
  return 0;
}

double shape_combine(int32x2_t *a1, int a2, int a3, int a4, int a5, int *a6, int a7, int a8, int a9, int a10, int32x2_t *a11)
{
  int v12 = (int)a1;
  int v13 = a9;
  int v14 = a10;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a7 <= a2) {
    int v15 = a2;
  }
  else {
    int v15 = a7;
  }
  BOOL v16 = a8 < a3 || a7 < a2;
  if (a8 <= a3) {
    int v17 = a3;
  }
  else {
    int v17 = a8;
  }
  if (a9 > a4) {
    BOOL v16 = 1;
  }
  if (a9 >= a4) {
    int v13 = a4;
  }
  int v18 = a10 > a5 || v16;
  int v19 = v13 - v15;
  if (v19 < 0) {
    return result;
  }
  if (a10 >= a5) {
    int v14 = a5;
  }
  int v21 = v14 - v17;
  if (v21 < 0) {
    return result;
  }
  uint64_t v22 = a6;
  if (!a11)
  {
    int v26 = v15 - a2;
    int v27 = v17 - a3;
    if (a6) {
      goto LABEL_29;
    }
    if (a1)
    {
      if ((int)a1 <= 0)
      {
        long long v36 = xmmword_1850CDF20;
        int v37 = 0;
        int v38 = a4 - a2;
        int v39 = a5 - a3;
        uint64_t v40 = 0x7FFFFFFF00000002;
        uint64_t v41 = 0x280000000;
        int v42 = v27;
        int v43 = 4;
        int v44 = v26;
        int v45 = v19 + v26;
        int v46 = v21 + v27;
        uint64_t v47 = 0x7FFFFFFF00000002;
        shape_difference((uint64_t)a1, (int *)&v36, (int *)&v41);
        return result;
      }
      if (a1 == 1)
      {
LABEL_29:
        int v18 = 0;
        uint64_t v41 = 0x280000000;
        int v42 = v27;
        int v43 = 4;
        int v44 = v26;
        int v45 = v19 + v26;
        int v46 = v21 + v27;
        uint64_t v47 = 0x7FFFFFFF00000002;
        int v25 = (int *)&v41;
        if (a6) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
      int v34 = a4 - a2;
      int v35 = a5 - a3;
      int v26 = 0;
      int v27 = 0;
    }
    else
    {
      int v34 = v19 + v26;
      int v35 = v21 + v27;
    }
    return shape_alloc_bounds((uint64_t)a1, v26, v27, v34, v35);
  }
  if (a7 == a2 && a8 == a3)
  {
    int v25 = (int *)a11;
    if (a6) {
      goto LABEL_33;
    }
  }
  else
  {
    a1 = shape_offset((uint64_t)a1, a11, a7 - a2, a8 - a3);
    int v25 = (int *)a1;
    if (v22) {
      goto LABEL_33;
    }
  }
LABEL_32:
  long long v36 = xmmword_1850CDF20;
  int v37 = 0;
  int v38 = a4 - a2;
  int v39 = a5 - a3;
  uint64_t v40 = 0x7FFFFFFF00000002;
  uint64_t v22 = (int *)&v36;
LABEL_33:
  BOOL v29 = v25 != (int *)a11 && v25 != (int *)&v41;
  if (v12)
  {
    if ((v12 & 0x80000000) == 0)
    {
      uint64_t v30 = shape_union((uint64_t)a1, v22, v25);
      int v32 = v30;
      if (v29 && v25 && v25 != (int *)&the_empty_shape) {
        free(v25);
      }
      if (v18)
      {
        long long v36 = xmmword_1850CDF20;
        int v37 = 0;
        int v38 = a4 - a2;
        int v39 = a5 - a3;
        uint64_t v40 = 0x7FFFFFFF00000002;
        shape_intersect((uint64_t)v30, (int *)&v36, v32);
        if (v32)
        {
          if (v32 != (int *)&the_empty_shape)
          {
            int v33 = v32;
LABEL_55:
            free(v33);
            return result;
          }
        }
      }
      return result;
    }
    shape_difference((uint64_t)a1, v22, v25);
  }
  else
  {
    shape_intersect((uint64_t)a1, v22, v25);
  }
  if (v29 && v25 && v25 != (int *)&the_empty_shape)
  {
    int v33 = v25;
    goto LABEL_55;
  }
  return result;
}

_DWORD *shape_reverse_y(uint64_t a1, int a2, int a3, int a4, int a5)
{
  double result = &the_empty_shape;
  if ((_UNKNOWN *)a1 != &the_empty_shape)
  {
    int v11 = shape_length(a1);
    if (v11 == 5)
    {
      int v12 = a4 + *(_DWORD *)(a1 + 8) * a2;
      int v13 = a5 + *(_DWORD *)(a1 + 12) * a3;
      if (v13 | v12)
      {
        double result = malloc_type_malloc(0x200uLL, 0x705560E0uLL);
        *(void *)double result = 0x480000000;
        result[2] = v12;
        result[3] = v13;
        result[4] = 0x7FFFFFFF;
      }
      else
      {
        return &the_empty_shape;
      }
    }
    else
    {
      int v14 = v11;
      double result = malloc_type_malloc((4 * v11 + 511) & 0xFFFFFFFFFFFFFE00, 0x705560E0uLL);
      if (result)
      {
        int v15 = &result[v14 - 1];
        _DWORD *v15 = 0x7FFFFFFF;
        BOOL v16 = v15 - 1;
        uint64_t v17 = *(int *)(a1 + 4);
        int v18 = (int *)(a1 + 4 * v17);
        int v19 = *v18;
        if (*v18 == 0x7FFFFFFF)
        {
          int v20 = v16;
        }
        else
        {
          do
          {
            if ((int)v17 >= 3)
            {
              unsigned int v21 = v17 - 1;
              uint64_t v22 = v18 - 1;
              do
              {
                int v23 = *v22--;
                *v16-- = a4 + v23 * a2;
                --v21;
              }
              while (v21 > 1);
            }
            *BOOL v16 = v17;
            int v20 = v16 - 2;
            *(v16 - 1) = a5 + v19 * a3;
            uint64_t v17 = v18[1];
            v18 += v17;
            int v19 = *v18;
            v16 -= 2;
          }
          while (*v18 != 0x7FFFFFFF);
        }
        *(v20 - 1) = 0x80000000;
        *int v20 = v17;
      }
    }
  }
  return result;
}

void CGContextSelectFont(CGContextRef c, const char *name, CGFloat size, CGTextEncoding textEncoding)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!c)
  {
    CGContextRef v18 = 0;
LABEL_11:
    handle_invalid_context((char)"CGContextSelectFont", (uint64_t)v18, *(uint64_t *)&textEncoding, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    CGContextRef v18 = c;
    goto LABEL_11;
  }
  if (!name)
  {
    CGPostError((uint64_t)"%s: font name is NULL.", 0, *(uint64_t *)&textEncoding, v4, v5, v6, v7, v8, (char)"CGContextSelectFont");
    return;
  }
  uint64_t v11 = *(void *)&textEncoding;
  if (*((void *)c + 10)
    || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
        (*((void *)c + 10) = Mutable) != 0))
  {
    CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"%s/%d", name, v11);
    if (v14)
    {
      CFStringRef v15 = v14;
      CFStringRef Value = (CGFont *)CFDictionaryGetValue(*((CFDictionaryRef *)c + 10), v14);
      if (Value)
      {
        uint64_t v17 = Value;
LABEL_23:
        CFRelease(v15);
        CGContextSetFont(c, v17);
        CGContextSetFontSize(c, size);
        return;
      }
      CGFontRef v19 = CGFontCreateWithName((char *)name);
      if (v19)
      {
        uint64_t v17 = v19;
        if (v11 == 1)
        {
          (*(void (**)(void, char **, unsigned char *, uint64_t))(*((void *)v19 + 2) + 280))(*((void *)v19 + 14), CGPDFEncodingVectorMacRoman, v30, 256);
LABEL_22:
          CGFontSetEncodingVector((uint64_t)v17, (uint64_t)v30);
          CFDictionarySetValue(*((CFMutableDictionaryRef *)c + 10), v15, v17);
          CFRelease(v17);
          goto LABEL_23;
        }
        if (!v11)
        {
          uint64_t v27 = 0;
          int16x8_t v28 = (int16x8_t)xmmword_1850CD7D0;
          v29.i64[0] = 0x8000800080008;
          v29.i64[1] = 0x8000800080008;
          do
          {
            *(int16x8_t *)&v30[v27] = v28;
            int16x8_t v28 = vaddq_s16(v28, v29);
            v27 += 16;
          }
          while (v27 != 512);
          goto LABEL_22;
        }
        CGPostError((uint64_t)"%s: invalid encoding %d.", v20, v21, v22, v23, v24, v25, v26, (char)"get_selected_font");
        CFRelease(v17);
      }
      CFRelease(v15);
    }
  }
}

void CGContextShowText(CGContextRef c, const char *string, size_t length)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      if (string && length)
      {
        uint64_t v11 = (CGGlyph *)((uint64_t (*)(CGContextRef))MEMORY[0x1F4188790])(c);
        CFStringRef v15 = (CGGlyph *)((char *)v33 - v13);
        if (v12 <= 0x7FFFFFFFFFFFFFFELL) {
          BOOL v16 = (CGGlyph *)((char *)v33 - v13);
        }
        else {
          BOOL v16 = 0;
        }
        if (v12 - 0x7FFFFFFFFFFFFFFFLL >= 0x8000000000000066)
        {
          uint64_t v11 = (CGGlyph *)malloc_type_malloc(2 * length, 0x3E7B0513uLL);
          BOOL v16 = v11;
        }
        if (v16)
        {
          MEMORY[0x1F4188790](v11, v14);
          CGFontRef v19 = (CGSize *)((char *)v33 - v17 - 15);
          if (v18 <= 0xFFFFFFFFFFFFFFELL) {
            uint64_t v20 = (CGSize *)((char *)v33 - v17 - 15);
          }
          else {
            uint64_t v20 = 0;
          }
          if (v18 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000066) {
            uint64_t v20 = (CGSize *)malloc_type_malloc(16 * length, 0x8F3D132FuLL);
          }
          if (v20)
          {
            uint64_t v21 = *(void *)(*((void *)c + 12) + 136);
            uint64_t v22 = *(void **)(v21 + 8);
            if (v22)
            {
              double v23 = *(double *)(v21 + 16);
              if (v23 != 0.0)
              {
                unint64_t explicit = atomic_load_explicit(v22 + 4, memory_order_acquire);
                if (explicit)
                {
                  uint64_t v25 = 0;
                  do
                  {
                    v16[v25] = *(_WORD *)(explicit + 2 * string[v25]);
                    ++v25;
                  }
                  while (length != v25);
                  float64x2_t v26 = vmulq_n_f64(*(float64x2_t *)((char *)c + 120), v23);
                  float64x2_t v27 = vmulq_n_f64(*(float64x2_t *)((char *)c + 136), v23);
                  v33[0] = v26;
                  v33[1] = v27;
                  v33[2] = *(_OWORD *)((char *)c + 152);
                  CGFontGetGlyphAdvancesForStyle(v22, (uint64_t)v33, 13, (uint64_t)v16, length, (uint64_t)v20);
                  double v28 = *(double *)(*(void *)(*((void *)c + 12) + 136) + 24);
                  if (v28 != 0.0)
                  {
                    float64x2_t v29 = vmlaq_n_f64(vmulq_f64(*(float64x2_t *)((char *)c + 136), (float64x2_t)0), *(float64x2_t *)((char *)c + 120), v28);
                    uint64_t v30 = (float64x2_t *)v20;
                    size_t v31 = length;
                    do
                    {
                      *uint64_t v30 = vaddq_f64(v29, *v30);
                      ++v30;
                      --v31;
                    }
                    while (v31);
                  }
                  CGContextShowGlyphsWithAdvances(c, v16, v20, length);
                }
              }
            }
            if (v20 != v19) {
              free(v20);
            }
          }
          if (v16 != v15) {
            free(v16);
          }
        }
      }
      return;
    }
    CGContextRef v32 = c;
  }
  else
  {
    CGContextRef v32 = 0;
  }

  handle_invalid_context((char)"CGContextShowText", (uint64_t)v32, length, v3, v4, v5, v6, v7);
}

void draw_glyphs_18654(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  size_t v4 = a4;
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(v8 + 136);
  double v10 = *(double *)(v9 + 32);
  if (v10 <= 0.0) {
    goto LABEL_18;
  }
  if ((*(char *)(v9 + 1) | 4) == 7) {
    return;
  }
  double v11 = *(double *)(v9 + 16);
  double v12 = v11 * *(double *)(a1 + 120);
  double v13 = v11 * *(double *)(a1 + 128);
  double v14 = v11 * *(double *)(a1 + 136);
  double v15 = v11 * *(double *)(a1 + 144);
  double v16 = *(double *)(v8 + 24);
  double v17 = *(double *)(v8 + 32);
  double v18 = *(double *)(v8 + 40);
  double v19 = *(double *)(v8 + 48);
  double v20 = (v13 * v19 + v12 * v17) * (v13 * v19 + v12 * v17) + (v13 * v18 + v12 * v16) * (v13 * v18 + v12 * v16);
  double v21 = (v15 * v19 + v14 * v17) * (v15 * v19 + v14 * v17) + (v15 * v18 + v14 * v16) * (v15 * v18 + v14 * v16);
  double v22 = v10 * v10;
  if (v20 > v22 && v21 > v22) {
    goto LABEL_18;
  }
  uint64_t v45 = *(void *)(v9 + 16);
  double v24 = *(double *)(a1 + 152);
  CGFloat v25 = *(double *)(a1 + 160);
  float64x2_t v26 = (CGRect *)malloc_type_malloc(32 * a4, 0x2062DE7BuLL);
  float64x2_t v27 = *(void **)(*(void *)(*(void *)(a1 + 96) + 136) + 8);
  font_info = (int *)get_font_info(v27);
  CGFloat v44 = v24;
  if (font_info) {
    double v29 = (double)font_info[2];
  }
  else {
    double v29 = 0.0;
  }
  if ((CGFontGetGlyphBBoxesForStyle(v27, 0, 13, a2, v4, (uint64_t)v26) & 1) == 0)
  {
    free(v26);
LABEL_18:
    uint64_t v34 = *(void *)(a1 + 40);
    if (v34)
    {
      int v35 = *(void (**)(void))(v34 + 88);
      if (v35)
      {
        v35();
      }
    }
    return;
  }
  uint64_t v30 = 0;
  float64x2_t v46 = (float64x2_t)vdupq_lane_s64(v45, 0);
  p_size = &v26->size;
  double v32 = 1.0 / v29;
  do
  {
    CGRect v49 = *(CGRect *)&p_size[-1].width;
    transform.b = 0.0;
    transform.c = 0.0;
    transform.a = v32;
    transform.d = v32;
    transform.tCGFloat x = 0.0;
    transform.tCGFloat y = 0.0;
    CGRect v50 = CGRectApplyAffineTransform(v49, &transform);
    *(CGRect *)&p_size[-1].CGFloat width = v50;
    CGFloat y = v50.origin.y;
    p_size[-1] = (CGSize)vaddq_f64((float64x2_t)v50.origin, vdivq_f64(*(float64x2_t *)(a3 + 16 * v30++), v46));
    p_size += 2;
  }
  while (v4 != v30);
  CGContextSaveGState((CGContextRef)a1);
  transform.a = v12;
  transform.b = v13;
  transform.c = v14;
  transform.d = v15;
  transform.tCGFloat x = v44;
  transform.tCGFloat y = v25;
  CGContextConcatCTM((CGContextRef)a1, &transform);
  if (v20 < 6.25 || v21 < 6.25)
  {
    p_CGFloat width = &v26->size.width;
    CGFloat width = 0.0;
    CGFloat x = INFINITY;
    CGFloat v39 = INFINITY;
    double v40 = 0.0;
    CGFloat height = 0.0;
    do
    {
      v54.origin.CGFloat x = *(p_width - 2);
      v54.origin.CGFloat y = *(p_width - 1);
      double v42 = *p_width;
      double v43 = p_width[1];
      p_width += 4;
      v51.origin.CGFloat x = x;
      v51.origin.CGFloat y = v39;
      v51.size.CGFloat width = width;
      v51.size.CGFloat height = height;
      v54.size.CGFloat width = v42;
      v54.size.CGFloat height = v43;
      CGRect v52 = CGRectUnion(v51, v54);
      CGFloat x = v52.origin.x;
      CGFloat v39 = v52.origin.y;
      CGFloat width = v52.size.width;
      CGFloat height = v52.size.height;
      double v40 = v40 + v42 * v43;
      --v4;
    }
    while (v4);
    if (v40 <= 0.0) {
      goto LABEL_29;
    }
    CGContextSetAlpha((CGContextRef)a1, v40 / (v52.size.height * v52.size.width) * 0.33);
    CGContextBeginPath((CGContextRef)a1);
    v53.origin.CGFloat x = x;
    v53.origin.CGFloat y = v39;
    v53.size.CGFloat width = width;
    v53.size.CGFloat height = height;
    CGContextAddRect((CGContextRef)a1, v53);
  }
  else
  {
    CGContextSetAlpha((CGContextRef)a1, 0.33);
    CGContextBeginPath((CGContextRef)a1);
    CGContextAddRects((CGContextRef)a1, v26, v4);
  }
  CGContextDrawPath((CGContextRef)a1, kCGPathFill);
LABEL_29:
  CGContextRestoreGState((CGContextRef)a1);

  free(v26);
}

void clip_to_glyphs(uint64_t a1, __int16 *a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = malloc_type_malloc(0x18uLL, 0x2062DE7BuLL);
  *(_DWORD *)uint64_t v8 = 1;
  v8[1] = 0;
  v8[2] = 0;
  uint64_t v9 = *(void *)(*(void *)(a1 + 96) + 136);
  double v10 = *(double *)(v9 + 16);
  float64x2_t v11 = vmulq_n_f64(*(float64x2_t *)(a1 + 120), v10);
  float64x2_t v12 = vmulq_n_f64(*(float64x2_t *)(a1 + 136), v10);
  *(float64x2_t *)&v13.a = v11;
  *(float64x2_t *)&v13.c = v12;
  *(_OWORD *)&v13.tCGFloat x = *(_OWORD *)(a1 + 152);
  CGTextClippingAppendGlyphs((uint64_t)v8, *(const void **)(v9 + 8), &v13, a2, a3, a4);
  CGGStateClipToTextClipping(*(void *)(a1 + 96), (uint64_t)v8);
  CGTextClippingRelease(v8);
}

void CGContextShowTextAtPoint(CGContextRef c, CGFloat x, CGFloat y, const char *string, size_t length)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *((CGFloat *)c + 19) = x;
      *((CGFloat *)c + 20) = y;
      CGContextShowText(c, string, length);
      return;
    }
    CGContextRef v10 = c;
  }
  else
  {
    CGContextRef v10 = 0;
  }
  handle_invalid_context((char)"CGContextShowTextAtPoint", (uint64_t)v10, length, v5, v6, v7, v8, v9);
}

void CGContextShowGlyphs(CGContextRef c, const CGGlyph *g, size_t count)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!c)
  {
    CGContextRef v27 = 0;
LABEL_21:
    handle_invalid_context((char)"CGContextShowGlyphs", (uint64_t)v27, count, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    CGContextRef v27 = c;
    goto LABEL_21;
  }
  if (g)
  {
    if (count)
    {
      uint64_t v11 = *(void *)(*((void *)c + 12) + 136);
      float64x2_t v12 = *(CGFont **)(v11 + 8);
      if (v12)
      {
        double v13 = *(double *)(v11 + 16);
        if (v13 != 0.0)
        {
          ((void (*)(CGContextRef))MEMORY[0x1F4188790])(c);
          double v16 = (long long *)((char *)&v28 - v14 - 15);
          if (v15 <= 0xFFFFFFFFFFFFFFELL) {
            double v17 = (long long *)((char *)&v28 - v14 - 15);
          }
          else {
            double v17 = 0;
          }
          if (v15 - 0xFFFFFFFFFFFFFFFLL >= 0xF00000000000003ELL) {
            double v17 = (long long *)malloc_type_malloc(16 * count, 0xE6C4FADAuLL);
          }
          int advances = 0;
          font_info = (int *)get_font_info(v12);
          *(void *)&long long v19 = 0;
          double v20 = 0.0;
          if (font_info) {
            double v20 = (double)font_info[2];
          }
          uint64_t v21 = 0;
          double v22 = *(double *)(*(void *)(*((void *)c + 12) + 136) + 24);
          size_t v23 = count;
          do
          {
            long long v28 = v19;
            double v24 = &v17[v21];
            *(void *)double v24 = v19;
            *((void *)v24 + 1) = 0;
            CGFontGetGlyphAdvances(v12, &g[v21], 1uLL, &advances);
            *((void *)&v25 + 1) = *((void *)&v28 + 1);
            *(double *)&long long v25 = *(double *)&v28 + v22 + v13 * (double)advances / v20;
            long long v28 = v25;
            long long v19 = v25;
            ++v21;
            --v23;
          }
          while (v23);
          unsigned int v26 = *(char *)(*(void *)(*((void *)c + 12) + 136) + 1);
          if (v26 < 4)
          {
            draw_glyphs_18654((uint64_t)c, (uint64_t)g, (uint64_t)v17, count);
            goto LABEL_27;
          }
          if (v26 - 4 >= 3)
          {
            if (v26 != 7) {
              goto LABEL_27;
            }
          }
          else
          {
            draw_glyphs_18654((uint64_t)c, (uint64_t)g, (uint64_t)v17, count);
          }
          clip_to_glyphs((uint64_t)c, (__int16 *)g, v17, count);
LABEL_27:
          *(float64x2_t *)((char *)c + 152) = vaddq_f64(*(float64x2_t *)((char *)c + 152), vmlaq_n_f64(vmulq_f64(*(float64x2_t *)((char *)c + 136), (float64x2_t)0), *(float64x2_t *)((char *)c + 120), *(double *)&v28));
          if (v17 != v16) {
            free(v17);
          }
        }
      }
    }
  }
}

void CGContextShowGlyphsAtPoint(CGContextRef c, CGFloat x, CGFloat y, const CGGlyph *glyphs, size_t count)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *((CGFloat *)c + 19) = x;
      *((CGFloat *)c + 20) = y;
      CGContextShowGlyphs(c, glyphs, count);
      return;
    }
    CGContextRef v10 = c;
  }
  else
  {
    CGContextRef v10 = 0;
  }
  handle_invalid_context((char)"CGContextShowGlyphsAtPoint", (uint64_t)v10, count, v5, v6, v7, v8, v9);
}

void CGContextShowGlyphsAtPositionsWithString(CGContext *a1, const CGGlyph *a2, const CGPoint *a3, CFIndex *a4, int64_t a5, const __CFString *a6, CFIndex a7, CFIndex a8, CFDictionaryRef theDict)
{
  CFIndex v189 = a8;
  unint64_t v190 = a2;
  CFStringRef v193 = a6;
  int64_t v191 = a5;
  uint64_t v182 = a3;
  __s2[1] = *(const void **)MEMORY[0x1E4F143B8];
  LOBYTE(__s2[0]) = 0;
  if (CGCFDictionaryGetBoolean(theDict, @"rightToLeft", (BOOL *)__s2)) {
    BOOL v19 = LOBYTE(__s2[0]) == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19 && CGContextGetType((uint64_t)a1, v12, v13, v14, v15, v16, v17, v18) == 1)
  {
    v181 = a1;
    LOBYTE(__s2[0]) = 0;
    int Boolean = CGCFDictionaryGetBoolean(theDict, @"begin", (BOOL *)__s2);
    if (LOBYTE(__s2[0])) {
      int v21 = Boolean;
    }
    else {
      int v21 = 0;
    }
    LOBYTE(__s2[0]) = 0;
    CFDictionaryRef v185 = theDict;
    uint64_t v22 = CGCFDictionaryGetBoolean(theDict, @"finished", (BOOL *)__s2);
    if (LOBYTE(__s2[0])) {
      int v24 = v22;
    }
    else {
      int v24 = 0;
    }
    int v188 = v24;
    size_t v25 = 2 * v189;
    if (v189 < 0) {
      unint64_t v26 = -1;
    }
    else {
      unint64_t v26 = v189;
    }
    if (v26 >= 0x3D) {
      CFIndex v27 = 1;
    }
    else {
      CFIndex v27 = (2 * v189) | 1;
    }
    long long v28 = (char *)MEMORY[0x1F4188790](v22, v23);
    if (v26 <= 0x7FFFFFFFFFFFFFFELL) {
      double v32 = (char *)&v173 - v29;
    }
    else {
      double v32 = 0;
    }
    uint64_t v173 = v30;
    uint64_t v175 = (char *)&v173 - v29;
    int v186 = v21;
    if (v26 - 0x7FFFFFFFFFFFFFFFLL >= 0x800000000000003ELL)
    {
      long long v28 = (char *)malloc_type_malloc(v25, 0xA3470D6CuLL);
      double v32 = v28;
    }
    size_t v33 = 8 * v189;
    MEMORY[0x1F4188790](v28, v31);
    if (v34 <= 0x3FFFFFFFFFFFFFFELL) {
      long long v36 = (char *)&v173 - v35;
    }
    else {
      long long v36 = 0;
    }
    unint64_t v174 = (char *)&v173 - v35;
    if (v34 - 0x3FFFFFFFFFFFFFFFLL >= 0xC00000000000007ALL) {
      long long v36 = (char *)malloc_type_malloc(v33, 0xA5CDF6A0uLL);
    }
    int v37 = memset(v36, 255, v33);
    unint64_t v184 = &v173;
    MEMORY[0x1F4188790](v37, v38);
    CFBitVectorRef v39 = (const __CFBitVector *)((char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v26 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v26 > 0x3C)
      {
        double v40 = (UniChar *)malloc_type_calloc(v25, 1uLL, 0x552FB187uLL);
      }
      else
      {
        bzero((char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
        double v40 = (UniChar *)((char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
    }
    else
    {
      double v40 = 0;
    }
    uint64_t v41 = (uint64_t)v181;
    v198.location = a7;
    v198.length = v189;
    CFStringGetCharacters(v193, v198, v40);
    if (v191 >= 1)
    {
      uint64_t v49 = 0;
      CFIndex v50 = a7 + v189;
      do
      {
        CFIndex v51 = a4[v49];
        if (v51 >= a7 && v50 > v51)
        {
          CGRect v53 = &v36[8 * (v51 - a7)];
          uint64_t v54 = *(int *)v53;
          if (v54 == -1 || v49 < v54) {
            *(_DWORD *)CGRect v53 = v49;
          }
          uint64_t v56 = *((int *)v53 + 1);
          if (v56 == -1 || v49 > v56) {
            *((_DWORD *)v53 + 1) = v49;
          }
        }
        ++v49;
      }
      while (v191 != v49);
    }
    CFBitVectorRef v183 = v39;
    uint64_t Font = CGContextGetFont(v41, v42, v43, v44, v45, v46, v47, v48);
    uint64_t v176 = v36;
    if (Font) {
      uint64_t Font = (*(uint64_t (**)(void))(*(void *)(Font + 16) + 96))(*(void *)(Font + 112));
    }
    int64_t v187 = Font;
    CFBitVectorRef v192 = (CFBitVectorRef)v40;
    unint64_t v180 = v32;
    FPFontGetGlyphsForCharacters();
    CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
    if (v191)
    {
      CFCharacterSetRef v60 = Predefined;
      uint64_t v61 = v190;
      CFIndex v62 = a7 + v189;
      CFArrayRef v63 = a4;
      int64_t v64 = v191;
      CFCharacterSetRef v65 = Predefined;
      do
      {
        CFIndex v67 = *v63++;
        CFIndex v66 = v67;
        CFIndex v68 = v67 - a7;
        if (v67 >= a7 && v62 > v66)
        {
          uint64_t v70 = (unsigned __int16 *)((char *)v192 + 2 * v68);
          UTF32Char v71 = *v70;
          CFIndex v72 = v66 + 1;
          if ((v71 & 0xFC00) != 0xD800 || v62 <= v72)
          {
            uint64_t v74 = 1;
            if (!v60) {
              goto LABEL_79;
            }
          }
          else
          {
            int v75 = v70[1];
            BOOL v76 = (v75 & 0xFC00) == 56320;
            int v77 = v75 + (v71 << 10) - 56613888;
            if (v76) {
              UTF32Char v71 = v77;
            }
            if (v76) {
              uint64_t v74 = 2;
            }
            else {
              uint64_t v74 = 1;
            }
            if (!v60)
            {
LABEL_79:
              __s2[0] = 0;
              if (v74 != FPFontGetUnicharsForGlyph() || memcmp(v70, __s2, 2 * v74)) {
                *(_WORD *)&v180[2 * v68] = 0;
              }
              CFCharacterSetRef v60 = v65;
              goto LABEL_83;
            }
          }
          if (!CFCharacterSetIsLongCharacterMember(v60, v71)) {
            goto LABEL_79;
          }
          CFCharacterSetRef v60 = v65;
          *(_WORD *)&v180[2 * v68] = *v61;
        }
LABEL_83:
        ++v61;
        --v64;
      }
      while (v64);
    }
    if (v192 != v183) {
      free(v192);
    }
    v194 = 0;
    CFTypeID TypeID = CFStringGetTypeID();
    int CFTypeRef = CGCFDictionaryGetCFTypeRef(v185, @"CGPDFTagPropertyLanguageText", TypeID, (uint64_t *)&v194);
    CFAllocatorRef v80 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef v81 = v181;
    if (CFTypeRef)
    {
      values = v194;
      __s2[0] = @"CGPDFTagPropertyLanguageText";
      CFDictionaryRef v82 = CFDictionaryCreate(v80, __s2, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CGPDFContextBeginAccessibilitySpan((uint64_t)v81, (uint64_t)v82, v83, v84, v85, v86, v87, v88);
      CFRelease(v82);
    }
    CFMutableDictionaryRef Mutable = CFBitVectorCreateMutable(v80, 0);
    CFBitVectorSetCount(Mutable, v189);
    if (v191)
    {
      CFBitVectorRef v183 = Mutable;
      CFAllocatorRef v178 = v80;
      uint64_t v179 = 0;
      uint64_t v90 = 0;
      int64_t v187 = 0;
      CFIndex v91 = a7 + v189;
      CFBitVectorRef v192 = (CFBitVectorRef)&v176[-8 * a7 + 4];
      CFIndex v189 = (CFIndex)&v180[-2 * a7];
      do
      {
        CFIndex v92 = a4[v90];
        BOOL v93 = v92 < a7 || v91 <= v92;
        if (v93 || !CFBitVectorGetBitAtIndex(v183, v92 - a7))
        {
          RangeOfCharacterClusterAtIndeCGFloat x = CFStringGetRangeOfCharacterClusterAtIndex();
          CFIndex v96 = v95;
          uint64_t v97 = v90;
          CFDictionaryRef v185 = (CFDictionaryRef)v90;
          do
          {
            if (v96 >= 1)
            {
              uint64_t v98 = (int *)((char *)v192 + 8 * RangeOfCharacterClusterAtIndex);
              CFIndex v99 = RangeOfCharacterClusterAtIndex;
              do
              {
                if (a7 <= v99 && v91 > v99)
                {
                  uint64_t v100 = *(v98 - 1);
                  if (v97 >= v100) {
                    uint64_t v101 = *(v98 - 1);
                  }
                  else {
                    uint64_t v101 = v97;
                  }
                  if (v100 != -1) {
                    uint64_t v97 = v101;
                  }
                  uint64_t v102 = *v98;
                  if (v90 <= v102) {
                    uint64_t v103 = *v98;
                  }
                  else {
                    uint64_t v103 = v90;
                  }
                  if (v102 != -1) {
                    uint64_t v90 = v103;
                  }
                }
                ++v99;
                v98 += 2;
              }
              while (v99 < v96 + RangeOfCharacterClusterAtIndex);
            }
            if (v97 > v90) {
              break;
            }
            char v104 = 0;
            uint64_t v105 = v97;
            do
            {
              uint64_t v106 = a4[v105];
              CFIndex v107 = v96 + RangeOfCharacterClusterAtIndex;
              if (RangeOfCharacterClusterAtIndex > v106 || v107 <= v106)
              {
                uint64_t v109 = CFStringGetRangeOfCharacterClusterAtIndex();
                if (RangeOfCharacterClusterAtIndex >= v109) {
                  RangeOfCharacterClusterAtIndeCGFloat x = v109;
                }
                CFIndex v111 = v109 + v110;
                if (v107 > v109 + v110) {
                  CFIndex v111 = v107;
                }
                CFIndex v96 = v111 - RangeOfCharacterClusterAtIndex;
                char v104 = 1;
              }
              ++v105;
            }
            while (v90 + 1 != v105);
          }
          while ((v104 & 1) != 0);
          CFRange v112 = (char *)(v90 + 1);
          CFIndex v113 = RangeOfCharacterClusterAtIndex;
          if (v90 + 1 < (unint64_t)v191)
          {
            while ((__int16)v190[(void)v112] == -1)
            {
              CFIndex v114 = a4[(void)v112];
              uint64_t v115 = CFStringGetRangeOfCharacterClusterAtIndex();
              CFIndex v117 = v115 + v116;
              if (v114 < v115 + v116)
              {
                uint64_t v118 = (int *)((char *)v192 + 8 * v114);
                do
                {
                  if (a7 <= v114 && v91 > v114)
                  {
                    uint64_t v119 = *(v118 - 1);
                    if (v97 >= v119) {
                      uint64_t v120 = *(v118 - 1);
                    }
                    else {
                      uint64_t v120 = v97;
                    }
                    if (v119 != -1) {
                      uint64_t v97 = v120;
                    }
                    uint64_t v121 = *v118;
                    if (v90 <= v121) {
                      uint64_t v122 = *v118;
                    }
                    else {
                      uint64_t v122 = v90;
                    }
                    if (v121 != -1) {
                      uint64_t v90 = v122;
                    }
                  }
                  ++v114;
                  v118 += 2;
                }
                while (v117 != v114);
              }
              if (RangeOfCharacterClusterAtIndex >= v115) {
                CFIndex v113 = v115;
              }
              else {
                CFIndex v113 = RangeOfCharacterClusterAtIndex;
              }
              if (v96 + RangeOfCharacterClusterAtIndex > v117) {
                CFIndex v117 = v96 + RangeOfCharacterClusterAtIndex;
              }
              CFIndex v96 = v117 - v113;
              ++v112;
              RangeOfCharacterClusterAtIndeCGFloat x = v113;
              if (v112 == (char *)v191) {
                goto LABEL_150;
              }
            }
            CFIndex v113 = RangeOfCharacterClusterAtIndex;
          }
LABEL_150:
          CFIndex v123 = v96 + v113;
          if (v96 + v113 >= v91) {
            CFIndex v124 = v91;
          }
          else {
            CFIndex v124 = v96 + v113;
          }
          if (a7 > v113 || v113 >= v91)
          {
            CFIndex v127 = v124 - a7;
            if (a7 < v123) {
              CFIndex v128 = a7;
            }
            else {
              CFIndex v128 = 0;
            }
            if (a7 < v123) {
              CFIndex v129 = v127;
            }
            else {
              CFIndex v129 = 0;
            }
            if (v113 <= a7) {
              CFIndex v126 = v128;
            }
            else {
              CFIndex v126 = 0;
            }
            if (v113 <= a7) {
              v125.length = v129;
            }
            else {
              v125.length = 0;
            }
          }
          else
          {
            v125.length = v124 - v113;
            CFIndex v126 = v113;
          }
          v125.location = v126 - a7;
          int v130 = 1;
          CFBitVectorSetBits(v183, v125, 1u);
          int64_t v131 = v90 + 1;
          size_t v132 = v90 + 1 - v97;
          CFArrayRef v81 = v181;
          unint64_t v184 = (uint64_t *)v132;
          if (v96 == v132)
          {
            if (v96 >= 1)
            {
              unint64_t v177 = (char *)(v90 + 1);
              unint64_t v133 = (_DWORD *)((char *)v192 + 8 * v113);
              CFIndex v134 = v113;
              while (1)
              {
                if (a7 <= v134 && v91 > v134)
                {
                  int v135 = *(unsigned __int16 *)(v189 + 2 * v134);
                  if (*(_WORD *)(v189 + 2 * v134)
                    || (CFStringGetCharacterAtIndex(v193, v134) & 0xFC00) != 0xDC00
                    || v134 <= v113
                    || (CFStringGetCharacterAtIndex(v193, v134 - 1) & 0xFC00) != 0xD800)
                  {
                    int v136 = *(v133 - 1);
                    if (v136 == -1 || v136 != *v133)
                    {
                      CFArrayRef v81 = v181;
                      size_t v132 = (size_t)v184;
                      int64_t v131 = (int64_t)v177;
                      if ((v186 & 1) == 0) {
                        goto LABEL_193;
                      }
LABEL_195:
                      uint64_t v138 = v81;
                      CFIndex v139 = v113;
                      if (v187 >= 1) {
                        CGContextShowGlyphsAtPositions(v138, &v190[v179], &v182[v179], v187);
                      }
                      CFAllocatorRef v140 = v178;
                      v199.location = v139;
                      v199.length = v96;
                      unint64_t v141 = (__CFString *)CFStringCreateWithSubstring(v178, v193, v199);
                      values = v141;
                      __s2[0] = @"CGPDFTagPropertyActualText";
                      CFAllocatorRef v142 = v140;
                      CFIndex v113 = v139;
                      CFDictionaryRef v143 = CFDictionaryCreate(v142, __s2, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      CGPDFContextBeginAccessibilitySpan((uint64_t)v138, (uint64_t)v143, v144, v145, v146, v147, v148, v149);
                      CFRelease(v143);
                      CFRelease(v141);
                      int64_t v187 = 0;
                      int v150 = v188;
                      size_t v132 = (size_t)v184;
                      CFArrayRef v81 = v138;
                      goto LABEL_209;
                    }
                    if (v190[v136] != v135) {
                      break;
                    }
                  }
                }
                ++v134;
                v133 += 2;
                if (v134 >= v123)
                {
                  int v130 = 0;
LABEL_190:
                  CFArrayRef v81 = v181;
                  size_t v132 = (size_t)v184;
                  int64_t v131 = (int64_t)v177;
                  goto LABEL_191;
                }
              }
              int v130 = 1;
              goto LABEL_190;
            }
            int v130 = 0;
          }
LABEL_191:
          if (v186) {
            goto LABEL_195;
          }
          if (v130)
          {
LABEL_193:
            if (a7 <= v113 && v123 <= v91) {
              goto LABEL_195;
            }
          }
          if (v179 >= v97) {
            uint64_t v151 = v97;
          }
          else {
            uint64_t v151 = v179;
          }
          int64_t v152 = v187 + v179;
          if (v187 + v179 <= v131) {
            int64_t v152 = v131;
          }
          int64_t v153 = v152 - v151;
          if (!v187) {
            uint64_t v151 = v97;
          }
          uint64_t v179 = v151;
          if (v187) {
            int64_t v154 = v153;
          }
          else {
            int64_t v154 = v132;
          }
          int v150 = v188;
          int64_t v187 = v154;
          if (v188)
          {
LABEL_209:
            CGContextShowGlyphsAtPositions(v81, &v190[v97], &v182[v97], v132);
            BOOL v163 = a7 <= v113 && v123 <= v91;
            if ((v150 | v163)) {
              CGPDFContextEndAccessibilitySpan((uint64_t)v81, v155, v156, v157, v158, v159, v160, v161);
            }
          }
          int v188 = 0;
          int v186 = 0;
          uint64_t v90 = (uint64_t)v185;
        }
        ++v90;
      }
      while (v90 != v191);
      CFRelease(v183);
      uint64_t v170 = v187;
      if (v187 > 0) {
        CGContextShowGlyphsAtPositions(v81, &v190[v179], &v182[v179], v187);
      }
    }
    else
    {
      CFRelease(Mutable);
    }
    uint64_t v171 = v180;
    unint64_t v172 = v176;
    if (v194) {
      CGPDFContextEndAccessibilitySpan((uint64_t)v81, v164, v165, v170, v166, v167, v168, v169);
    }
    if (v188) {
      CGPDFContextEndAccessibilitySpan((uint64_t)v81, v164, v165, v170, v166, v167, v168, v169);
    }
    if (v172 != v174) {
      free(v172);
    }
    if (v171 != v175) {
      free(v171);
    }
  }
  else
  {
    CGContextShowGlyphsAtPositions(a1, v190, v182, v191);
  }
}

CGColorSpaceRef CGColorSpaceCreateCalibratedGray(const CGFloat *whitePoint, const CGFloat *blackPoint, CGFloat gamma)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!whitePoint) {
    goto LABEL_24;
  }
  uint64_t v12 = (char *)malloc_type_calloc(0x78uLL, 1uLL, 0xFE80F5F0uLL);
  if (!v12) {
    goto LABEL_24;
  }
  uint64_t v13 = (uint64_t)v12;
  *(_DWORD *)uint64_t v12 = 1;
  v12[12] = 1;
  *((_DWORD *)v12 + 2) = 0x10000;
  *((_WORD *)v12 + 7) = 256;
  *((void *)v12 + 3) = 3;
  uint64_t v14 = v12 + 24;
  *((void *)v12 + 14) = &color_space_state_create_calibrated_gray_calibrated_gray_vtable;
  *((_DWORD *)v12 + ++*(_DWORD *)(result + 8) = 0;
  *((void *)v12 + 10) = 0;
  *((void *)v12 + 11) = 0;
  *((void *)v12 + 5) = &calibrated_gray_get_default_color_components_default_gray;
  *((void *)v12 + 6) = 1;
  uint64_t v15 = (CGFloat *)malloc_type_calloc(0x90uLL, 1uLL, 0xBEDED83DuLL);
  *(void *)(v13 + 96) = v15;
  if (!v15)
  {
    free((void *)v13);
LABEL_24:
    __n128 v31 = (CGColorSpace *)CGColorSpaceCreateWithState(0, (uint64_t)blackPoint, v3, v4, v5, v6, v7, v8);
    goto LABEL_25;
  }
  for (uint64_t i = 0; i != 3; ++i)
    v15[i] = whitePoint[i];
  uint64_t v17 = 0;
  uint64_t v18 = (const CGFloat *)&default_black_point_18824;
  if (blackPoint) {
    uint64_t v18 = blackPoint;
  }
  do
  {
    v15[v17 + 3] = v18[v17];
    ++v17;
  }
  while (v17 != 3);
  v15[6] = gamma;
  memset(md, 0, 16);
  BOOL v19 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v19);
  if (v19) {
    CC_MD5_Update(v19, v14, 4u);
  }
  uint64_t v20 = 0;
  uint64_t v21 = *(void *)(v13 + 96);
  do
  {
    if (v19) {
      CC_MD5_Update(v19, (const void *)(v21 + v20), 8u);
    }
    v20 += 8;
  }
  while (v20 != 24);
  for (uint64_t j = 0; j != 3; ++j)
  {
    while (v19)
    {
      CC_MD5_Update(v19, (const void *)(v21 + 8 * j++ + 24), 8u);
      if (j == 3)
      {
        CC_MD5_Update(v19, (const void *)(v21 + 48), 8u);
        CC_MD5_Final(md, v19);
        long long v23 = *(_OWORD *)md;
        goto LABEL_21;
      }
    }
  }
  long long v23 = 0uLL;
LABEL_21:
  long long v33 = v23;
  free(v19);
  *(_OWORD *)(v13 + 64) = v33;
  __n128 v31 = (CGColorSpace *)CGColorSpaceCreateWithState((atomic_uint *)v13, v24, v25, v26, v27, v28, v29, v30);
  if (atomic_fetch_add_explicit((atomic_uint *volatile)v13, 0xFFFFFFFF, memory_order_relaxed) == 1) {
    color_space_state_dealloc(v13);
  }
LABEL_25:
  if (v31) {
    *((void *)v31 + 3) = color_space_state_register(*((unsigned char **)v31 + 3));
  }
  return v31;
}

__CFString *calibrated_gray_create_icc_profile_description()
{
  return @"CG Cal Gray";
}

uint64_t calibrated_gray_get_descriptor(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

__n128 CGColorSpaceGetCalibratedGrayData@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v5 + 24) != 3) {
    _CGHandleAssert("CGColorSpaceGetCalibratedGrayData", 122, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_CalGray.c", "space->state->type == kCGColorSpaceCalibratedGray", "Colorspace %p not calibrated grayscale. Type = %d", a2, a3, a4, a1);
  }
  uint64_t v6 = *(void *)(v5 + 96);
  long long v7 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v6;
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)(v6 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(void *)(a5 + 4++*(_DWORD *)(result + 8) = *(void *)(v6 + 48);
  return result;
}

uint64_t CGFontCopyPath(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 224))(*(void *)(result + 112));
  }
  return result;
}

int CGFontGetLeading(CGFontRef font)
{
  font_info = get_font_info(font);
  if (font_info) {
    LODWORD(font_info) = font_info[5];
  }
  return (int)font_info;
}

CGFloat CGFontGetStemV(CGFontRef font)
{
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  memset(v3, 0, sizeof(v3));
  BOOL Descriptor = CGFontGetDescriptor(font, (uint64_t)v3);
  CGFloat result = *(double *)&v4;
  if (!Descriptor) {
    return 0.0;
  }
  return result;
}

BOOL CGFontGetDescriptor(void *a1, uint64_t a2)
{
  font_info = (char *)get_font_info(a1);
  long long v5 = font_info;
  if (font_info)
  {
    uint64_t v6 = *(void *)(font_info + 12);
    v7.i64[0] = (int)v6;
    v7.i64[1] = SHIDWORD(v6);
    float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    *(double *)&uint64_t v17 = (double)*((int *)font_info + 2);
    float64x2_t v18 = (float64x2_t)vdupq_lane_s64(v17, 0);
    double v8 = (double)*((int *)font_info + 6);
    *(float64x2_t *)(a2 + 32) = vrndaq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v7), v19), v18));
    *(double *)(a2 + 4++*(_DWORD *)(result + 8) = round(v8 * 1000.0 / *(double *)&v17);
    (*(void (**)(void, uint64_t, uint64_t))(a1[2] + 128))(a1[14], a2 + 64, a2 + 72);
    int v9 = *((_DWORD *)v5 + 8);
    v10.f64[0] = *(float64_t *)(a2 + 72);
    v10.f64[1] = (double)*((int *)v5 + 9);
    *(float64x2_t *)(a2 + 72) = vrndaq_f64(vdivq_f64(vmulq_f64(v10, v19), v18));
    *(double *)(a2 + 8++*(_DWORD *)(result + 8) = round((double)v9 * 1000.0 / *(double *)&v17);
    *(void *)(a2 + 96) = 0;
    v7.i64[0] = *((int *)v5 + 5);
    v7.i64[1] = *((int *)v5 + 7);
    *(float64x2_t *)(a2 + 104) = vrndaq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v7), v19), v18));
    v11.f64[0] = *((float64_t *)v5 + 7);
    v11.f64[1] = *(float64_t *)(a2 + 64);
    *(float64x2_t *)(a2 + 56) = vrndaq_f64(vdivq_f64(vmulq_f64(v11, v19), v18));
    v12.f64[0] = (*(double (**)(void))(a1[2] + 112))(a1[14]);
    v12.f64[1] = v13;
    v15.f64[1] = v14;
    *(float64x2_t *)a2 = vrndaq_f64(vdivq_f64(vmulq_f64(v12, v19), v18));
    *(float64x2_t *)(a2 + 16) = vrndaq_f64(vdivq_f64(vmulq_f64(v15, v19), v18));
  }
  return v5 != 0;
}

unsigned char *CGFontIsItalic(void *a1)
{
  CGFloat result = get_font_info(a1);
  if (result) {
    return (unsigned char *)(result[49] != 0);
  }
  return result;
}

void *CGFontGetVMetrics(void *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t explicit = (void *)atomic_load_explicit(a1 + 7, memory_order_acquire);
  if (!explicit)
  {
    unint64_t explicit = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
    if (((*(uint64_t (**)(void, void *))(a1[2] + 120))(a1[14], explicit) & 1) == 0)
    {
      *unint64_t explicit = 0;
      explicit[1] = 0;
    }
    uint64_t v3 = 0;
    atomic_compare_exchange_strong(a1 + 7, (unint64_t *)&v3, (unint64_t)explicit);
    if (v3)
    {
      free(explicit);
      return (void *)v3;
    }
  }
  return explicit;
}

uint64_t CGFontGetPostScriptName(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 144))(*(void *)(result + 112));
  }
  return result;
}

CFStringRef CGFontCopyFullName(CFStringRef font)
{
  if (font) {
    return (CFStringRef)(*((uint64_t (**)(char *))font->data + 21))(font[3].data);
  }
  return font;
}

uint64_t CGFontCopyFamilyName(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 176))(*(void *)(result + 112));
  }
  return result;
}

CFTypeRef CGFontCopyName(uint64_t a1, __CFString *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  name_id_for_keCGFloat y = get_name_id_for_key(a2);
  if (name_id_for_key == -1) {
    return 0;
  }
  unsigned __int16 v4 = name_id_for_key;
  name_table = get_name_table(a1);
  if (!name_table) {
    return 0;
  }
  uint64_t v6 = name_table;
  Systeuint64_t m = CFLocaleGetSystem();

  return copy_localized_value(v6, System, v4);
}

uint64_t get_name_id_for_key(__CFString *a1)
{
  if (a1 == @"kCGFontNameKeyCopyright") {
    return 0;
  }
  if (a1 == @"kCGFontNameKeyFontFamily") {
    return 1;
  }
  if (a1 == @"kCGFontNameKeyFontSubfamily") {
    return 2;
  }
  if (a1 == @"kCGFontNameKeyUniqueID") {
    return 3;
  }
  if (a1 == @"kCGFontNameKeyFullName") {
    return 4;
  }
  if (a1 == @"kCGFontNameKeyVersion") {
    return 5;
  }
  if (a1 == @"kCGFontNameKeyPostScriptName") {
    return 6;
  }
  if (a1 == @"kCGFontNameKeyTrademark") {
    return 7;
  }
  if (a1 == @"kCGFontNameKeyManufacturer") {
    return 8;
  }
  if (a1 == @"kCGFontNameKeyDesigner") {
    return 9;
  }
  if (a1 == @"kCGFontNameKeyDescription") {
    return 10;
  }
  if (a1 == @"kCGFontNameKeyVendorURL") {
    return 11;
  }
  if (a1 == @"kCGFontNameKeyDesignerURL") {
    return 12;
  }
  if (a1 == @"kCGFontNameKeyLicense") {
    return 13;
  }
  if (a1 == @"kCGFontNameKeyLicenseURL") {
    return 14;
  }
  if (a1 == @"kCGFontNameKeyPreferredFamily") {
    return 16;
  }
  if (a1 == @"kCGFontNameKeyPreferredSubfamily") {
    return 17;
  }
  if (a1 == @"kCGFontNameKeySampleText") {
    return 19;
  }
  return 0xFFFFFFFFLL;
}

os_unfair_lock_s *get_name_table(uint64_t a1)
{
  uint64_t v2 = (atomic_ullong *)(a1 + 80);
  CGFloat result = (os_unfair_lock_s *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 80), memory_order_acquire);
  if (!result)
  {
    CGFloat result = CGFontNameTableCreate(a1);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(v2, (unint64_t *)&v4, (unint64_t)result);
    if (v4)
    {
      CGFontNameTableRelease((uint64_t)result);
      return (os_unfair_lock_s *)v4;
    }
  }
  return result;
}

CFLocaleRef CGFontCopyLocalizedName(uint64_t a1, uint64_t a2, __CFString *a3)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  if (!a3) {
    return 0;
  }
  name_id_for_keCGFloat y = get_name_id_for_key(a3);
  if (name_id_for_key == -1) {
    return 0;
  }
  unsigned __int16 v6 = name_id_for_key;
  name_table = get_name_table(a1);
  if (!name_table) {
    return 0;
  }

  return CGFontNameTableCopyNameForLocale(name_table, a2, v6);
}

unsigned char *CGFontIsBitmapOnly(void *a1)
{
  CGFloat result = get_font_info(a1);
  if (result) {
    return (unsigned char *)(result[104] != 0);
  }
  return result;
}

uint64_t CGFontGetIdentifier(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if (!v1)
  {
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 24), (unsigned int *)&v1, ~atomic_fetch_add_explicit(get_identifier_identifier, 1u, memory_order_relaxed), memory_order_relaxed, memory_order_relaxed);
    return *(unsigned int *)(a1 + 24);
  }
  return v1;
}

uint64_t CGSNewRegionWithRect(double *a1, void *a2)
{
  if (!a2) {
    return 1001;
  }
  if (a1)
  {
    uint64_t v3 = CGRegionCreateWithRect(*a1, a1[1], a1[2], a1[3]);
  }
  else
  {
    if (CGRegionGetTypeID_initOnce != -1) {
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
    }
    uint64_t v3 = &__kCGRegionEmptyRegion;
  }
  *a2 = v3;
  if (v3) {
    return 0;
  }
  else {
    return 1000;
  }
}

uint64_t CGSGetRegionBounds(uint64_t a1, uint64_t a2)
{
  *(double *)a2 = CGRegionGetBoundingBox(a1);
  *(void *)(a2 + ++*(_DWORD *)(result + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  return 0;
}

uint64_t CGSOffsetRegion(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10)
{
  if (!a2) {
    return 1001;
  }
  if (a1)
  {
    float64x2_t v11 = CGRegionCreateWithOffset(a1, a9, a10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    *a2 = v11;
    if (v11) {
      return 0;
    }
    else {
      return 1000;
    }
  }
  else
  {
    *a2 = 0;
    return 1001;
  }
}

uint64_t CGSIntersectRegionWithRect(void *a1, double *a2, void *a3)
{
  *a3 = CGRegionCreateIntersectionWithRect(a1, *a2, a2[1], a2[2], a2[3]);
  return 0;
}

uint64_t CGSUnionRegion(void *a1, void *a2, void *a3)
{
  *a3 = CGRegionCreateUnionWithRegion(a1, a2);
  return 0;
}

uint64_t CGSDiffRegion(int **a1, uint64_t a2, int ***a3)
{
  *a3 = CGRegionCreateDifferenceWithRegion(a1, a2);
  return 0;
}

BOOL CGSRegionIsEmpty(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  return (_UNKNOWN *)v1 == &the_empty_shape || *(_DWORD *)(v1 + 4 * *(int *)(v1 + 4)) == 0x7FFFFFFF;
}

BOOL CGSRectInRegion(BOOL a1, double *a2)
{
  return a2 && CGRegionContainsRect(a1, *a2, a2[1], a2[2], a2[3]);
}

uint64_t CGSTransformRegion(uint64_t *a1, double *a2, uint64_t **a3, float a4)
{
  if (!a3) {
    return 1001;
  }
  int64x2_t v7 = a1;
  if (!region_check(a1))
  {
    int64x2_t v7 = 0;
    uint64_t result = 1001;
    goto LABEL_108;
  }
  if (!a2)
  {
    if (!v7) {
      goto LABEL_107;
    }
    goto LABEL_94;
  }
  uint64_t v15 = v7[2];
  if ((_UNKNOWN *)v15 == &the_empty_shape)
  {
LABEL_94:
    CFRetain(v7);
LABEL_107:
    uint64_t result = 0;
    goto LABEL_108;
  }
  double v16 = *a2;
  double v17 = a2[1];
  double v18 = a2[2];
  double v19 = a2[3];
  double v21 = a2[4];
  double v20 = a2[5];
  BOOL v22 = v18 == 0.0 && v17 == 0.0;
  if (!v22 || v16 != 1.0) {
    goto LABEL_12;
  }
  if (v19 == 1.0)
  {
    if (v21 == 0.0 && v20 == 0.0) {
      goto LABEL_94;
    }
    float v77 = v21;
    float v78 = v20;
    BOOL v76 = CGRegionCreateWithOffset(v7, v77, v78, v8, v9, v10, v11, v12, v13, v14);
LABEL_106:
    int64x2_t v7 = v76;
    goto LABEL_107;
  }
  if (v19 == -1.0)
  {
    double v74 = floor(v20);
    if (floor(v21) == v21 && v74 == v20)
    {
      CFArrayRef v73 = shape_reverse_y(v7[2], 1, -1, (int)v21, (int)v20);
      if (v73)
      {
LABEL_104:
        BOOL v76 = region_create_with_shape(v73, v66, v67, v68, v69, v70, v71, v72);
        goto LABEL_106;
      }
      uint64_t v15 = v7[2];
    }
  }
LABEL_12:
  uint64_t v24 = (char *)malloc_type_malloc(0x38uLL, 0xEB07EEC6uLL);
  uint64_t v25 = v24;
  *(_DWORD *)uint64_t v24 = 0;
  *(_OWORD *)(v24 + 4) = xmmword_1850CDCD0;
  *(int32x2_t *)(v24 + 20) = vdup_n_s32(0x7FFFFFFEu);
  *((void *)v24 + 5) = 0;
  *((void *)v24 + 6) = 0;
  *((void *)v24 + 4) = 0;
  if ((_UNKNOWN *)v15 != &the_empty_shape && *(_DWORD *)(v15 + 4 * *(int *)(v15 + 4)) != 0x7FFFFFFF)
  {
    *((_DWORD *)v24 + 1) = 0;
    *((void *)v24 + 4) = v15;
    *((void *)v24 + 5) = v15 + 8;
  }
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  double v79 = -v16;
  uint64_t v26 = (int *)&the_empty_shape;
  while (shape_enum_next((uint64_t)v25, (_DWORD *)&v81 + 1, &v81, (_DWORD *)&v80 + 1, &v80))
  {
    double v27 = (double)SHIDWORD(v81);
    if (v22)
    {
      double v28 = v21 + v16 * v27;
      double v29 = v21 + v16 * (double)SHIDWORD(v80);
      double v30 = v20 + v19 * (double)(int)v81;
      double v31 = v20 + v19 * (double)(int)v80;
      if (v28 <= v29) {
        double v32 = v21 + v16 * v27;
      }
      else {
        double v32 = v21 + v16 * (double)SHIDWORD(v80);
      }
      if (v28 <= v29) {
        double v33 = v21 + v16 * (double)SHIDWORD(v80);
      }
      else {
        double v33 = v28;
      }
      if (v30 > v31) {
        double v34 = v20 + v19 * (double)(int)v80;
      }
      else {
        double v34 = v20 + v19 * (double)(int)v81;
      }
      if (v30 > v31) {
        double v35 = v20 + v19 * (double)(int)v81;
      }
      else {
        double v35 = v20 + v19 * (double)(int)v80;
      }
      goto LABEL_73;
    }
    double v36 = (double)(HIDWORD(v80) - HIDWORD(v81));
    double v37 = (double)((int)v80 - (int)v81);
    double v38 = v21 + v18 * (double)(int)v81 + v16 * v27;
    double v39 = v20 + v19 * (double)(int)v81 + v17 * v27;
    double v40 = v38 + v16 * v36;
    double v41 = v39 + v17 * v36;
    if (v40 > v38) {
      double v42 = v38 + v16 * v36;
    }
    else {
      double v42 = v38;
    }
    if (v40 >= v38) {
      double v43 = v38;
    }
    else {
      double v43 = v38 + v16 * v36;
    }
    if (v40 >= v38) {
      double v38 = v42;
    }
    if (v41 > v39) {
      double v44 = v39 + v17 * v36;
    }
    else {
      double v44 = v39;
    }
    if (v41 >= v39) {
      double v45 = v39;
    }
    else {
      double v45 = v39 + v17 * v36;
    }
    if (v41 >= v39) {
      double v46 = v44;
    }
    else {
      double v46 = v39;
    }
    double v47 = v40 + v18 * v37;
    double v48 = v41 + v19 * v37;
    if (v47 > v38) {
      double v49 = v40 + v18 * v37;
    }
    else {
      double v49 = v38;
    }
    if (v47 >= v43) {
      double v32 = v43;
    }
    else {
      double v32 = v47;
    }
    if (v47 >= v43) {
      double v50 = v49;
    }
    else {
      double v50 = v38;
    }
    if (v48 > v46) {
      double v51 = v48;
    }
    else {
      double v51 = v46;
    }
    if (v48 >= v45) {
      double v34 = v45;
    }
    else {
      double v34 = v48;
    }
    if (v48 >= v45) {
      double v52 = v51;
    }
    else {
      double v52 = v46;
    }
    double v33 = v47 + v79 * v36;
    if (v33 >= v32)
    {
      if (v33 > v50) {
        goto LABEL_69;
      }
    }
    else
    {
      double v32 = v47 + v79 * v36;
    }
    double v33 = v50;
LABEL_69:
    double v35 = v48 + -v17 * v36;
    if (v35 < v34)
    {
      double v34 = v35;
LABEL_72:
      double v35 = v52;
      goto LABEL_73;
    }
    if (v35 <= v52) {
      goto LABEL_72;
    }
LABEL_73:
    double v53 = ceil(v32 + -0.00390625);
    double v54 = floor(v33 + 0.00390625);
    double v55 = ceil(v34 + -0.00390625);
    double v56 = floor(v35 + 0.00390625);
    double v57 = floor(v32 + 0.00390625);
    double v58 = ceil(v33 + -0.00390625);
    double v59 = floor(v34 + 0.00390625);
    double v60 = ceil(v35 + -0.00390625);
    if (a4 < 0.0)
    {
      double v57 = v53;
      double v58 = v54;
      double v59 = v55;
      double v60 = v56;
    }
    int v61 = (int)v59;
    LODWORD(v81) = (int)v59;
    HIDWORD(v81) = (int)v57;
    int v62 = (int)v60;
    LODWORD(v80) = (int)v60;
    HIDWORD(v80) = (int)v58;
    if ((int)v57 < (int)v58 && v61 < v62)
    {
      int64_t v64 = shape_union_with_bounds(v26, (int)v57, v61, (int)v58, v62);
      if (v26 && v26 != (int *)&the_empty_shape) {
        free(v26);
      }
    }
    else
    {
      int64_t v64 = v26;
    }
    uint64_t v26 = v64;
    if (!v64)
    {
      free(v25);
      if (CGRegionGetTypeID_initOnce != -1) {
        dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
      }
      uint64_t result = 1000;
      goto LABEL_112;
    }
  }
  free(v25);
  if (v26 != (int *)&the_empty_shape)
  {
    CFArrayRef v73 = v26;
    goto LABEL_104;
  }
  if (CGRegionGetTypeID_initOnce != -1) {
    dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_14714);
  }
  uint64_t result = 0;
LABEL_112:
  int64x2_t v7 = (uint64_t *)&__kCGRegionEmptyRegion;
LABEL_108:
  *a3 = v7;
  return result;
}

__CFString *calibrated_rgb_create_icc_profile_description()
{
  return @"CG Cal RGB";
}

uint64_t calibrated_rgb_get_descriptor(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

void sub_184FF5ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18874(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18875(uint64_t a1)
{
}

void sub_184FF65FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void path_reverse_release_info(void **a1)
{
  path_free(a1[3]);

  free(a1);
}

unsigned __int8 **path_reverse_end(unsigned __int8 **result, uint64_t a2)
{
  if (*((unsigned char *)result + 16))
  {
    uint64_t v3 = result;
    long long v7 = *(_OWORD *)result;
    if (a2) {
      (*(void (**)(void, void, long long *, void))(a2 + 24))(*(void *)(a2 + 8), 0, &v7, *(void *)(a2 + 48));
    }
    uint64_t result = (unsigned __int8 **)path_iterator_unrollpath((void *)a2, v3 + 3);
    *((unsigned char *)v3 + 16) = 0;
  }
  if (a2)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      uint64_t v6 = *(void *)(a2 + 48);
      return (unsigned __int8 **)v4(v5, v6);
    }
  }
  return result;
}

uint64_t path_reverse_iterate(uint64_t result, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = result;
  switch(a2)
  {
    case 0:
      if (*(unsigned char *)(result + 16))
      {
        long long v12 = *(_OWORD *)result;
        if (a4) {
          (*(void (**)(void, void, long long *, void))(a4 + 24))(*(void *)(a4 + 8), 0, &v12, *(void *)(a4 + 48));
        }
        uint64_t result = (uint64_t)path_iterator_unrollpath((void *)a4, (unsigned __int8 **)(v10 + 24));
        *(unsigned char *)(v10 + 16) = 0;
      }
      *(_OWORD *)uint64_t v10 = *a3;
      return result;
    case 1:
      uint64_t result = path_add((unsigned __int8 **)(result + 24), 1u, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_OWORD *)uint64_t result = *(_OWORD *)v10;
      *(_OWORD *)uint64_t v10 = *a3;
      *(unsigned char *)(v10 + 16) = 1;
      return result;
    case 2:
      uint64_t result = path_add((unsigned __int8 **)(result + 24), 2u, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_OWORD *)uint64_t result = *a3;
      *(_OWORD *)(result + 16) = *(_OWORD *)v10;
      long long v11 = a3[1];
      goto LABEL_10;
    case 3:
      uint64_t result = path_add((unsigned __int8 **)(result + 24), 3u, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_OWORD *)uint64_t result = a3[1];
      *(_OWORD *)(result + 16) = *a3;
      *(_OWORD *)(result + 32) = *(_OWORD *)v10;
      long long v11 = a3[2];
LABEL_10:
      *(_OWORD *)uint64_t v10 = v11;
      *(unsigned char *)(v10 + 16) = 1;
      break;
    case 4:
      if (*(unsigned char *)(result + 16))
      {
        long long v12 = *(_OWORD *)result;
        if (a4)
        {
          (*(void (**)(void, void, long long *, void))(a4 + 24))(*(void *)(a4 + 8), 0, &v12, *(void *)(a4 + 48));
          path_iterator_unrollpath((void *)a4, (unsigned __int8 **)(v10 + 24));
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void, void))(a4 + 24))(*(void *)(a4 + 8), 4, 0, *(void *)(a4 + 48));
        }
        else
        {
          uint64_t result = (uint64_t)path_iterator_unrollpath(0, (unsigned __int8 **)(result + 24));
        }
        *(unsigned char *)(v10 + 16) = 0;
      }
      break;
    default:
      abort();
  }
  return result;
}

uint64_t path_reverse_begin(uint64_t result, uint64_t a2, void *a3)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  if (a3)
  {
    uint64_t v3 = (uint64_t (*)(void, uint64_t, void))a3[2];
    if (v3) {
      return v3(a3[1], a2, a3[6]);
    }
  }
  return result;
}

double __RIPStyleGaussianBlur_block_invoke()
{
  rips_gb_cs = (uint64_t)CGColorSpaceCreateDeviceRGB();
  if (rips_gb_cs)
  {
    double result = *(double *)&_rips_class;
    *(void *)&RIPStyleGaussianBlur_rips_gb_cls = rips_gb_super;
    *((void *)&RIPStyleGaussianBlur_rips_gb_cls + 1) = rips_gb_size;
    unk_1E8F9E240 = off_1ED097580[0];
    qword_1E8F9E248 = (uint64_t)rips_gb_release;
    qword_1E8F9E250 = (uint64_t)rips_gb_Create;
    qword_1E8F9E258 = (uint64_t)rips_gb_Growth;
    qword_1E8F9E260 = (uint64_t)rips_gb_ColorSpace;
    qword_1E8F9E268 = (uint64_t)rips_gb_BltShape;
    qword_1E8F9E270 = (uint64_t)rips_gb_BltGlyph;
    qword_1E8F9E278 = (uint64_t)rips_gb_BltImage;
    qword_1E8F9E280 = (uint64_t)rips_gb_BltShade;
  }
  return result;
}

uint64_t rips_gb_BltShade(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8 = (int *)(a3 + 12);
  if (!a3) {
    uint64_t v8 = (int *)(a2 + 12);
  }
  if (a4) {
    uint64_t v8 = a4;
  }
  if (a5) {
    uint64_t v8 = (int *)a5;
  }
  return rips_gb_Draw(a1, a2, a3, a4, v8, 0, 0, 0, a5, a6, a7, a8);
}

uint64_t rips_gb_Draw(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int v18 = vcvtmd_s64_f64(*(float *)(a1 + 96) + 0.5);
  if (v18 > 0)
  {
LABEL_2:
    long long v55 = 0uLL;
    v54[0] = 0;
    v54[1] = 0;
    if (!a4 || a4 == a5)
    {
      long long v55 = *(_OWORD *)a5;
      uint64_t v20 = 1;
      if (!DWORD2(v55)) {
        return v20;
      }
      uint64_t v46 = a9;
      uint64_t v47 = a12;
      if (!HIDWORD(v55)) {
        return v20;
      }
    }
    else
    {
      uint64_t v46 = a9;
      uint64_t v47 = a12;
      if (!CGSBoundsIntersection(a4, a5, &v55)) {
        return 1;
      }
    }
    v56[0] = 0uLL;
    double v21 = (int *)(a2 + 12);
    if (a3)
    {
      if ((CGSBoundsIntersection(v21, (int *)(a3 + 12), v56) & 1) == 0) {
        return 1;
      }
    }
    else
    {
      v56[0] = *(_OWORD *)v21;
      if (!DWORD2(v56[0]) || !HIDWORD(v56[0])) {
        return 1;
      }
    }
    *(void *)&long long v55 = (v55 + ~v18) | ((unint64_t)(DWORD1(v55) + ~v18) << 32);
    *((void *)&v55 + 1) = (DWORD2(v55) - 2 * ~v18) | ((unint64_t)(HIDWORD(v55) - 2 * ~v18) << 32);
    *(void *)&v56[0] = (LODWORD(v56[0]) + ~v18) | ((unint64_t)(DWORD1(v56[0]) + ~v18) << 32);
    *((void *)&v56[0] + 1) = (DWORD2(v56[0]) - 2 * ~v18) | ((unint64_t)(HIDWORD(v56[0]) - 2 * ~v18) << 32);
    if (!CGSBoundsIntersection((int *)&v55, (int *)v56, v54)) {
      return 1;
    }
    double v28 = *(_DWORD **)(a2 + 32);
    if ((*v28 & 0x3F0000u) <= 0x80000)
    {
      int v30 = (*v28 >> 8) & 0xF;
      if (!v30 || v30 == 3)
      {
LABEL_34:
        double v31 = (int *)RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)v54, 17, (uint64_t)v28, *(unsigned int *)(a2 + 52), v25, v26, v27);
        if (v31)
        {
          uint64_t v37 = (uint64_t)v31;
          long long v38 = *(_OWORD *)(v47 + 16);
          v71[0] = *(_OWORD *)v47;
          v71[1] = v38;
          long long v39 = *(_OWORD *)(v47 + 48);
          v71[2] = *(_OWORD *)(v47 + 32);
          long long v72 = v39;
          uint64_t v40 = *(void *)(v47 + 64);
          LODWORD(v71[0]) = 2;
          uint64_t v73 = v40;
          *(void *)&long long v72 = 0x3FF0000000000000;
          if (a6)
          {
            if ((RIPLayerBltShape(v31, 0, 0, a6, a10, a11, (uint64_t)v71, v36) & 1) == 0)
            {
LABEL_52:
              (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
              return 0;
            }
          }
          else if (a7)
          {
            if ((RIPLayerBltGlyph(v31, 0, 0, a7, a10, a11, 0, (uint64_t)v71) & 1) == 0) {
              goto LABEL_52;
            }
          }
          else if (a8)
          {
            if ((RIPLayerBltImage((uint64_t)v31, 0, 0, a8, (uint64_t)v71, v34, v35, v36) & 1) == 0) {
              goto LABEL_52;
            }
          }
          else
          {
            uint64_t v41 = v46;
            if (v46
              && (RIPLayerBltShade((uint64_t)v31, 0, 0, v46, a10, (uint64_t)v71, v35, v36) & 1) == 0)
            {
              goto LABEL_52;
            }
          }
          double v42 = RIPLayerGaussianBlur(v37, *(unsigned int *)(a2 + 52), v32, v41, v33, v34, v35, v36, *(float *)(a1 + 96));
          (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
          if (v42)
          {
            long long v57 = xmmword_1852934E0;
            long long v58 = unk_1852934F0;
            long long v61 = xmmword_185293520;
            long long v62 = unk_185293530;
            long long v59 = xmmword_185293500;
            long long v60 = unk_185293510;
            long long v65 = xmmword_185293560;
            long long v66 = unk_185293570;
            long long v63 = xmmword_185293540;
            long long v64 = unk_185293550;
            uint64_t v70 = 0;
            long long v68 = unk_185293590;
            long long v69 = xmmword_1852935A0;
            long long v67 = xmmword_185293580;
            memset(v56, 0, sizeof(v56));
            *(void *)&long long v57 = *((void *)v42 + 4);
            DWORD2(v5++*(_DWORD *)(result + 8) = *((_DWORD *)v42 + 5);
            DWORD2(v57) = DWORD2(v58);
            HIDWORD(v5++*(_DWORD *)(result + 8) = *((_DWORD *)v42 + 6);
            *(void *)&long long v58 = 0;
            HIDWORD(v57) = HIDWORD(v58);
            LODWORD(v59) = *((_DWORD *)v42 + 12);
            *((void *)&v59 + 1) = *((void *)v42 + 7);
            *((void *)&v60 + 1) = *((void *)v42 + 9);
            LODWORD(v60) = *((_DWORD *)v42 + 16);
            long long v61 = 0uLL;
            uint64_t v52 = 0;
            long long v48 = *(_OWORD *)(v42 + 12);
            uint64_t v53 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            double v49 = v56;
            uint64_t v20 = RIPLayerBltImage(a2, a3, (uint64_t)v54, (uint64_t)&v48, v47, v43, v44, v45);
            (*(void (**)(char *))(*(void *)v42 + 24))(v42);
            return v20;
          }
        }
        return 0;
      }
      unsigned int v29 = 6;
    }
    else
    {
      unsigned int v29 = 20;
    }
    double v28 = (_DWORD *)RIPGetDepthForLayerFormat(v29, v22, v23, (uint64_t)v28, v24, v25, v26, v27);
    goto LABEL_34;
  }
  if (a6)
  {
    return (uint64_t)RIPLayerBltShape((int *)a2, a3, a4, a6, a10, a11, a12, a12);
  }
  else if (a7)
  {
    return (uint64_t)RIPLayerBltGlyph((_DWORD *)a2, a3, a4, a7, a10, a11, 0, a12);
  }
  else if (a8)
  {
    return RIPLayerBltImage(a2, a3, (uint64_t)a4, a8, a12, 0, 0, a12);
  }
  else
  {
    if (!a9) {
      goto LABEL_2;
    }
    return (uint64_t)RIPLayerBltShade(a2, a3, (uint64_t)a4, a9, a10, a12, 0, a12);
  }
}

uint64_t rips_gb_BltImage(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t)a5;
  uint64_t v9 = (int *)(a3 + 12);
  if (!a3) {
    uint64_t v9 = (int *)(a2 + 12);
  }
  if (a4) {
    uint64_t v9 = a4;
  }
  if (!a5) {
    a5 = v9;
  }
  return rips_gb_Draw(a1, a2, a3, a4, a5, 0, 0, v8, 0, a6, a7, a8);
}

uint64_t rips_gb_BltGlyph(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = a5;
  long long v11 = (int *)(a3 + 12);
  if (!a3) {
    long long v11 = (int *)(a2 + 12);
  }
  if (a4) {
    long long v11 = a4;
  }
  if (!a5) {
    a5 = v11;
  }
  return rips_gb_Draw(a1, a2, a3, a4, a5, 0, v10, 0, 0, a6, a7, a10);
}

uint64_t rips_gb_BltShape(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v9 = (int *)(a3 + 12);
  if (!a3) {
    uint64_t v9 = (int *)(a2 + 12);
  }
  if (a4) {
    uint64_t v9 = a4;
  }
  if (a5) {
    uint64_t v10 = (int *)(a5 + 12);
  }
  else {
    uint64_t v10 = v9;
  }
  return rips_gb_Draw(a1, a2, a3, a4, v10, a5, 0, 0, 0, a6, a7, a8);
}

uint64_t rips_gb_ColorSpace()
{
  return rips_gb_cs;
}

BOOL rips_gb_Growth(uint64_t a1, _OWORD *a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2) {
    *a2 = *(_OWORD *)(a1 + 80);
  }
  return v2 != 0;
}

float rips_gb_Create(uint64_t a1, uint64_t a2, double *a3)
{
  size_t v6 = (*(uint64_t (**)(void))(a1 + 8))();
  long long v7 = (float *)malloc_type_calloc(1uLL, v6, 0x6269FC0FuLL);
  if (v7)
  {
    *(void *)long long v7 = a1;
    *((void *)v7 + 1) = 1;
    uint64_t v9 = a2 + 32;
    if (!a2) {
      uint64_t v9 = 0;
    }
    if (a3) {
      double v10 = sqrt(fabs(*a3 * a3[3] - a3[1] * a3[2]));
    }
    else {
      double v10 = 1.0;
    }
    float v11 = v10 * *(double *)(v9 + 8);
    if (v11 > 4194300.0) {
      float v11 = 4194300.0;
    }
    v7[24] = v11;
    *((_DWORD *)v7 + 3) = 2289;
    float result = v11 + 0.5;
    unsigned int v12 = vcvtms_s32_f32(result);
    *((_DWORD *)v7 + 20) = ~v12;
    *((_DWORD *)v7 + 21) = ~v12;
    int v13 = 2 * v12 + 2;
    *((_DWORD *)v7 + 22) = v13;
    *((_DWORD *)v7 + 23) = v13;
  }
  return result;
}

void rips_gb_release(void *a1)
{
  int v1 = *((_DWORD *)a1 + 2) - 1;
  *((_DWORD *)a1 + 2) = v1;
  if (!v1) {
    free(a1);
  }
}

uint64_t rips_gb_size()
{
  return 104;
}

long long *rips_gb_super()
{
  return &_rips_class;
}

uint64_t __CGPDFXObjectGetTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFXObjectGetTypeID_class);
  CGPDFXObjectGetTypeID_id = result;
  return result;
}

void CGPDFXObjectFinalize(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  switch(v1)
  {
    case 2:
      CGPDFGroupRelease(*(CGColorSpaceRef **)(a1 + 96));
      break;
    case 1:
      int v2 = *(const void **)(a1 + 96);
      if (v2) {
LABEL_5:
      }
        CFRelease(v2);
      break;
    case 0:
      int v2 = *(const void **)(a1 + 96);
      if (v2) {
        goto LABEL_5;
      }
      break;
  }
}

uint64_t CGPDFXObjectGetValue(uint64_t a1)
{
  int v2 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  if (!*(void *)(a1 + 96))
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (v3 == 2)
    {
      uint64_t v4 = (uint64_t)CGPDFGroupCreate(*(CGPDFDictionary **)(a1 + 24));
    }
    else if (v3 == 1)
    {
      uint64_t v4 = CGPDFFormCreate(*(CGPDFDictionary **)(a1 + 24));
    }
    else
    {
      if (v3) {
        abort();
      }
      uint64_t v4 = CGPDFImageCreate(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 96) = v4;
  }
  pthread_mutex_unlock(v2);
  return *(void *)(a1 + 96);
}

uint64_t CPTextServicesAppendTextLine(__CFString *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, int *a6)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (a4 < 1)
  {
    uint64_t v13 = a3;
    return v13 + 2;
  }
  uint64_t v9 = 0;
  if (a3 + a4 <= a3 + 1) {
    uint64_t v10 = a3 + 1;
  }
  else {
    uint64_t v10 = a3 + a4;
  }
  for (uint64_t i = 24 * a3 + 16; ; i += 24)
  {
    LOBYTE(v12) = 0;
    uint64_t v13 = a3 + v9;
    if (a2 && (v13 & 0x8000000000000000) == 0)
    {
      if (a2[6] <= v13) {
        goto LABEL_12;
      }
      uint64_t v12 = a2[3];
      if (v12) {
        LODWORD(v12) = *(_DWORD *)(v12 + i);
      }
    }
    if ((v12 & 8) != 0) {
      break;
    }
LABEL_12:
    if (a4 - 1 == v9) {
      break;
    }
    ++v9;
    if (a3 + v9 >= a3 + a4)
    {
      uint64_t v13 = v10;
      return v13 + 2;
    }
  }
  uint64_t v14 = v9 + 1;
  uint64_t v64 = v9;
  if (v9 < 100)
  {
    uint64_t v15 = &v65;
    if ((v9 & 0x8000000000000000) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v15 = (char *)malloc_type_malloc(2 * v14, 0x1000040BDFB0063uLL);
LABEL_20:
    uint64_t v16 = 0;
    uint64_t v17 = 24 * a3;
    do
    {
      LOWORD(v1++*(_DWORD *)(result + 8) = 0;
      if (a2 && ((a3 + v16) & 0x8000000000000000) == 0)
      {
        if (a2[6] <= a3 + v16)
        {
          LOWORD(v1++*(_DWORD *)(result + 8) = 0;
        }
        else
        {
          uint64_t v18 = a2[3];
          if (v18)
          {
            uint64_t v18 = *(void *)(v18 + v17);
            if (v18) {
              LOWORD(v1++*(_DWORD *)(result + 8) = *(_WORD *)(v18 + 8);
            }
          }
        }
      }
      *(_WORD *)&v15[2 * v16++] = v18;
      v17 += 24;
    }
    while (v9 + 1 != v16);
  }
  uint64_t v60 = v13 - a3 + 1;
  double v19 = malloc_type_malloc(6 * v14, 0x1000040BDFB0063uLL);
  if (!ubidi_open())
  {
    ResultCFIndex Length = 0;
    double v56 = 0;
    int v54 = 0;
    goto LABEL_33;
  }
  ubidi_setReorderingMode();
  ubidi_setContext();
  ubidi_setPara();
  ubidi_getLength();
  ubidi_countRuns();
  int v54 = ubidi_writeReordered();
  ProcessedCFIndex Length = ubidi_getProcessedLength();
  double v56 = (int *)malloc_type_malloc(4 * ProcessedLength, 0x100004052888210uLL);
  ubidi_getVisualMap();
  ResultCFIndex Length = ubidi_getResultLength();
  ubidi_close();
  if (v54 <= 0)
  {
LABEL_33:
    free(v19);
    double v19 = 0;
  }
  if (v9 >= 100) {
    free(v15);
  }
  if (v54 < 1)
  {
    uint64_t v51 = a6;
    int v23 = ResultLength;
    if (a6) {
      goto LABEL_77;
    }
  }
  else
  {
    long long v63 = (const UniChar *)v19;
    uint64_t v20 = a2[7];
    uint64_t RangeInCharacterRange = CPMultiUnicodesGetRangeInCharacterRange(v20, a3, v60);
    int v23 = ResultLength;
    if (v56)
    {
      uint64_t v24 = v22;
      if (v22 >= 1 && ResultLength >= 1)
      {
        CFIndex v25 = RangeInCharacterRange;
        long long v57 = a5;
        uint64_t v26 = malloc_type_malloc(8 * v60, 0x100004000313F17uLL);
        uint64_t v27 = v26;
        if ((v9 & 0x8000000000000000) == 0) {
          memset(v26, 255, 8 * v9 + 8);
        }
        CFIndex v28 = v25 + v24;
        do
        {
          if (v20
            && (CFArrayRef v29 = *(const __CFArray **)(v20 + 24)) != 0
            && (ValueAtIndeCGFloat x = (uint64_t *)CFArrayGetValueAtIndex(v29, v25)) != 0)
          {
            uint64_t v31 = *ValueAtIndex;
          }
          else
          {
            uint64_t v31 = 0;
          }
          if (v31 >= a3 && v31 <= v13) {
            v27[v31 - a3] = v25;
          }
          ++v25;
        }
        while (v25 < v28);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 1;
        uint64_t v35 = a1;
        while (1)
        {
          uint64_t v36 = v32 + v33;
          uint64_t v37 = v56[v32 + v33];
          if ((v37 & 0x80000000) != 0 || v64 < v37 || (CFIndex v38 = v27[v37], v38 == -1))
          {
            uint64_t v46 = &v63[v33];
            uint64_t v47 = v35;
            CFIndex v48 = 1;
          }
          else
          {
            if (v20)
            {
              CFArrayRef v39 = *(const __CFArray **)(v20 + 24);
              if (v39)
              {
                uint64_t v40 = CFArrayGetValueAtIndex(v39, v38);
                if (v40)
                {
                  uint64_t v41 = v35;
                  unint64_t v42 = *((void *)v40 + 2);
                  CFStringAppendCharacters(v41, *((const UniChar **)v40 + 3), v42);
                  if (v42 >= 2)
                  {
                    uint64_t v58 = v32 + ResultLength + ~v36;
                    uint64_t v43 = (char *)malloc_type_realloc(v56, 4 * (v32 + v42 - 1 + ResultLength), 0x100004052888210uLL);
                    double v56 = (int *)v43;
                    unint64_t v44 = v36 + 1;
                    if (v58)
                    {
                      memmove(&v43[4 * v42 + 4 * v36], &v43[4 * v44], 4 * v58);
                      unint64_t v45 = v42 + v36;
                      unint64_t v44 = v36 + 1;
                    }
                    else
                    {
                      unint64_t v45 = v42 + v36;
                    }
                    if (v44 < v45)
                    {
                      unint64_t v49 = v42 - 1;
                      uint64_t v50 = v32 + v34;
                      do
                      {
                        v56[v50++] = v56[v36];
                        --v49;
                      }
                      while (v49);
                    }
                    uint64_t v32 = v32 + v42 - 1;
                  }
                  uint64_t v35 = a1;
                  goto LABEL_65;
                }
              }
            }
            uint64_t v47 = v35;
            uint64_t v46 = 0;
            CFIndex v48 = 0;
          }
          CFStringAppendCharacters(v47, v46, v48);
LABEL_65:
          ++v33;
          ++v34;
          if (v33 == ResultLength)
          {
            int v23 = ResultLength + v32;
            free(v27);
            a5 = v57;
            uint64_t v51 = a6;
            uint64_t v52 = (UniChar *)v63;
            goto LABEL_76;
          }
        }
      }
    }
    uint64_t v52 = (UniChar *)v63;
    CFStringAppendCharacters(a1, v63, v54);
    uint64_t v51 = a6;
LABEL_76:
    free(v52);
    if (v51) {
LABEL_77:
    }
      *uint64_t v51 = v23;
  }
  if (a5) {
    *a5 = v56;
  }
  else {
    free(v56);
  }
  return v13 + 2;
}

FILE *PDFLinearizer::createTempFile(const char *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (CGGetTempDirPath_predicate != -1) {
    dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_119);
  }
  if (!CGGetTempDirPath_tempDirPath)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(2, "strlen(tempDir) == 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 965, 0, v11, v12, v13, v15);
    std::logic_error::logic_error(exception, &__dst);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E529EE60, MEMORY[0x1E4FBA1C0]);
  }
  strncpy((char *)&__dst, &CGGetTempDirPath_tempDirPath, 0x400uLL);
  size_t v4 = strlen((const char *)&__dst);
  if (__dst.__r_.__value_.__s.__data_[v4 - 1] != 47) {
    strncat((char *)&__dst, "/", 1023 - v4);
  }
  if (a1)
  {
    size_t v5 = strlen((const char *)&__dst);
    strncat((char *)&__dst, a1, 1023 - v5);
  }
  size_t v6 = strlen((const char *)&__dst);
  strncat((char *)&__dst, "XXXXXX", 1023 - v6);
  size_t v7 = strlen((const char *)&__dst);
  strncat((char *)&__dst, ".pdf", 1023 - v7);
  int v8 = mkstemps((char *)&__dst, 4);
  if (v8 == -1)
  {
    uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "mkstemps failed");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  MEMORY[0x18532A0F0](a2, &__dst);
  return fdopen(v8, "wb");
}

void sub_184FF7DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void std::vector<PDFIndirectObject>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<PDFIndirectObject>::destroy[abi:fe180100](v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PDFLinearizerPageInfo>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  int v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        size_t v6 = (void *)*((void *)v4 - 6);
        if (v6)
        {
          *((void *)v4 - 5) = v6;
          operator delete(v6);
        }
        v4 -= 72;
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<PDFIndirectObject>::destroy[abi:fe180100](uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    int v3 = *(void **)(a1 + 8);
    operator delete(v3);
  }
}

void PDFLinearizer::endDocument(PDFLinearizer *this, CGDataConsumer *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1ED095018;
  p_std::string context = &context;
  v36[4] = PDFWriterCreate(a2);
  std::__function::__value_func<void ()(PDFWriter *)>::__value_func[abi:fe180100]((uint64_t)&v37, (uint64_t)&context);
  std::__function::__value_func<void ()(PDFWriter *)>::~__value_func[abi:fe180100](&context);
  int v3 = (char *)this + 24;
  if (*((char *)this + 47) < 0) {
    int v3 = *(const char **)v3;
  }
  uint64_t v4 = fopen(v3, "rb");
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1ED095070;
  p_std::string context = &context;
  uint64_t v35 = v4;
  std::__function::__value_func<void ()(__sFILE *)>::__value_func[abi:fe180100]((uint64_t)v36, (uint64_t)&context);
  std::__function::__value_func<void ()(__sFILE *)>::~__value_func[abi:fe180100](&context);
  if (v35)
  {
    if (*(void *)this)
    {
      uint64_t v5 = *(void *)(*(void *)this + 464);
      if (v5)
      {
        v34[1] = 0;
        v34[0] = 0;
        uint64_t v33 = v34;
        size_t v6 = (unint64_t *)*((void *)this + 6);
        size_t v7 = (unint64_t *)*((void *)this + 7);
        while (v6 != v7)
        {
          std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v33, *v6, *v6);
          v6 += 9;
        }
        context.__r_.__value_.__r.__words[0] = 0;
        context.__r_.__value_.__l.__size_ = (std::string::size_type)&context;
        context.__r_.__value_.__r.__words[2] = 0x6002000000;
        p_std::string context = (std::string *)__Block_byref_object_copy__19070;
        CFArrayRef v29 = __Block_byref_object_dispose__19071;
        uint64_t v9 = *(void *)(v5 + 16);
        uint64_t v8 = *(void *)(v5 + 24);
        uint64_t v11 = (unint64_t *)*((void *)this + 23);
        uint64_t v10 = (unint64_t *)*((void *)this + 24);
        v30[0] = v30;
        v30[1] = v30;
        long long v31 = 0u;
        long long v32 = 0u;
        CFMutableDataRef theData = (CFMutableDataRef)((char *)&v31 + 8);
        LOBYTE(v39) = 0;
        uint64_t v12 = v8 - v9;
        if (v8 != v9)
        {
          if ((unint64_t)v12 > 0x4924924924924920) {
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
          }
          uint64_t v13 = v12 >> 4;
          uint64_t v14 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(v12 >> 4);
          *((void *)&v31 + 1) = v14;
          *((void *)&v32 + 1) = &v14[56 * v15];
          uint64_t v16 = 56 * v13;
          uint64_t v17 = v14 + 32;
          do
          {
            *(v17 - 3) = 0;
            *(v17 - 4) = v17 - 3;
            *uint64_t v17 = 0;
            v17[1] = 0;
            *(v17 - 2) = 0;
            *(v17 - 1) = v17;
            v17 += 7;
            v16 -= 56;
          }
          while (v16);
          *(void *)&long long v32 = &v14[56 * v13];
        }
        while (v11 != v10)
        {
          boost::add_edge<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config>>((uint64_t)&theData, *v11, v11[1], (uint64_t)v30);
          v11 += 2;
        }
        operator new();
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(0, "mainXRefTable", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 263, 0, v19, v20, v21, v26);
    std::logic_error::logic_error(exception, &context);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E529EE60, MEMORY[0x1E4FBA1C0]);
  }
  uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  _CGExceptionDescription(0, "srcFile.get()", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 260, 0, v23, v24, v25, v26);
  std::logic_error::logic_error(v22, &context);
  v22->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  __cxa_throw(v22, (struct type_info *)off_1E529EE60, MEMORY[0x1E4FBA1C0]);
}

void sub_184FFC0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  PDFIndirectObject::~PDFIndirectObject((PDFIndirectObject *)&STACK[0x398]);
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  std::__tree<unsigned long>::destroy(a62);
  std::__tree<unsigned long>::destroy((void *)STACK[0x2D8]);
  _Block_object_dispose(&STACK[0x458], 8);
  long long v67 = (void *)STACK[0x480];
  if (STACK[0x480])
  {
    STACK[0x488] = (unint64_t)v67;
    operator delete(v67);
  }
  _Block_object_dispose(&a66, 8);
  boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::~adjacency_list(a25);
  std::__tree<unsigned long>::destroy((void *)STACK[0x300]);
  std::unique_ptr<__sFILE,std::function<void ()(__sFILE*)>>::reset[abi:fe180100]((uint64_t *)&STACK[0x348]);
  std::__function::__value_func<void ()(__sFILE *)>::~__value_func[abi:fe180100](a22);
  std::unique_ptr<PDFWriter,std::function<void ()(PDFWriter*)>>::reset[abi:fe180100]((uint64_t *)&STACK[0x370]);
  std::__function::__value_func<void ()(PDFWriter *)>::~__value_func[abi:fe180100](a23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(PDFWriter *)>::__value_func[abi:fe180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(PDFWriter *)>::~__value_func[abi:fe180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(__sFILE *)>::__value_func[abi:fe180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(__sFILE *)>::~__value_func[abi:fe180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::string *PDFLinearizer::emitLinearizationDict(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (a1[7] == a1[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(3, "_pageInfo.size() > 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 776, 0, v84, v85, v86, v87);
    std::logic_error::logic_error(exception, &v92);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E529EE60, MEMORY[0x1E4FBA1C0]);
  }
  char v8 = a4;
  uint64_t v91 = 0;
  PDFWriterBeginObject(a2, a1[12], a1 + 33, a4, a5, a6, a7, a8);
  PDFWriterPrintf((unsigned char **)a2, (uint64_t)"<<", v12, v13, v14, v15, v16, v17, v87);
  PDFWriterPrintf((unsigned char **)a2, (uint64_t)"/Linearized 1.0", v18, v19, v20, v21, v22, v23, v88);
  PDFWriterPrintf((unsigned char **)a2, (uint64_t)"/L %O", v24, v25, v26, v27, v28, v29, a3);
  PDFWriterPrintf((unsigned char **)a2, (uint64_t)"/H [%O %d]", v30, v31, v32, v33, v34, v35, a1[38]);
  unint64_t v42 = (uint64_t *)a1[6];
  if ((uint64_t *)a1[7] == v42
    || (PDFWriterPrintf((unsigned char **)a2, (uint64_t)"/O %d", v36, v37, v38, v39, v40, v41, *v42), uint64_t v49 = a1[6], a1[7] == v49))
  {
    __break(1u);
  }
  PDFWriterPrintf((unsigned char **)a2, (uint64_t)"/E %O", v43, v44, v45, v46, v47, v48, *(void *)(v49 + 16));
  PDFWriterPrintf((unsigned char **)a2, (uint64_t)"/N %d", v50, v51, v52, v53, v54, v55, 0x8E38E38E38E38E39 * ((uint64_t)(a1[7] - a1[6]) >> 3));
  PDFWriterPrintf((unsigned char **)a2, (uint64_t)"/T %O", v56, v57, v58, v59, v60, v61, a1[37]);
  PDFWriterPrintf((unsigned char **)a2, (uint64_t)">>", v62, v63, v64, v65, v66, v67, v89);
  uint64_t result = (std::string *)PDFWriterEndObject(a2, &v91, v68, v69, v70, v71, v72, v73);
  if ((v8 & 1) == 0)
  {
    unint64_t v75 = 2 * vcvtmd_u64_f64(log10((double)(unint64_t)a3)) + 20;
    BOOL v93 = 0;
    if (v75 >= 0x101) {
      operator new[]();
    }
    memset(&v92, 32, v75);
    if (a2)
    {
      if (v93) {
        CFDictionaryRef v82 = v93;
      }
      else {
        CFDictionaryRef v82 = &v92;
      }
      CGDataConsumerPutBytes(*a2, (uint64_t)v82, v75);
    }
    PDFWriterPrintf((unsigned char **)a2, (uint64_t)"\n", v76, v77, v78, v79, v80, v81, v90);
    uint64_t result = v93;
    if (v93) {
      return (std::string *)MEMORY[0x18532A2A0](v93, 0x1000C4077774924);
    }
  }
  return result;
}

void sub_184FFCAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void PDFLinearizer::emitFirstPageTrailer(uint64_t a1, unsigned char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a1 + 320))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Trailer dict is NULL");
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  PDFWriterPrintf(a2, (uint64_t)"trailer\n", a3, a4, a5, a6, a7, a8, v97);
  PDFWriterPrintf(a2, (uint64_t)"<<", v10, v11, v12, v13, v14, v15, v98);
  uint64_t v22 = *(void *)(a1 + 88);
  if (v22) {
    uint64_t v22 = (uint64_t)(*(void *)(v22 + 24) - *(void *)(v22 + 16)) >> 4;
  }
  uint64_t v23 = *(void *)(a1 + 104);
  if (v23) {
    uint64_t v23 = (uint64_t)(*(void *)(v23 + 24) - *(void *)(v23 + 16)) >> 4;
  }
  PDFWriterPrintf(a2, (uint64_t)"/Size %d", v16, v17, v18, v19, v20, v21, v23 + v22);
  unint64_t v105 = 0;
  if (CGCFDictionaryGetNumber(*(const __CFDictionary **)(a1 + 320), @"/Root", kCFNumberLongType, &v105)) {
    PDFWriterPrintf(a2, (uint64_t)"/Root %R", v24, v25, v26, v27, v28, v29, *(void *)(a1 + 96) + 1);
  }
  if (CGCFDictionaryGetNumber(*(const __CFDictionary **)(a1 + 320), @"/Encrypt", kCFNumberLongType, &v105))
  {
    uint64_t v30 = std::map<unsigned long,unsigned long>::at(*(void **)(a1 + 240), v105);
    PDFWriterPrintf(a2, (uint64_t)"/Encrypt %R", v31, v32, v33, v34, v35, v36, *v30);
  }
  if (CGCFDictionaryGetNumber(*(const __CFDictionary **)(a1 + 320), @"/Info", kCFNumberLongType, &v105))
  {
    uint64_t v37 = std::map<unsigned long,unsigned long>::at(*(void **)(a1 + 240), v105);
    PDFWriterPrintf(a2, (uint64_t)"/Info %R", v38, v39, v40, v41, v42, v43, *v37);
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 320), @"/ID");
  if (Value)
  {
    CFDataRef v51 = Value;
    PDFWriterPrintf(a2, (uint64_t)"/ID [", v45, v46, v47, v48, v49, v50, v99);
    CFIndex Length = CFDataGetLength(v51);
    CFDataGetBytePtr(v51);
    PDFWriterPrintf(a2, (uint64_t)"%X", v53, v54, v55, v56, v57, v58, Length);
    CFIndex v59 = CFDataGetLength(v51);
    CFDataGetBytePtr(v51);
    PDFWriterPrintf(a2, (uint64_t)"%X", v60, v61, v62, v63, v64, v65, v59);
    PDFWriterPrintf(a2, (uint64_t)"]", v66, v67, v68, v69, v70, v71, v100);
  }
  PDFWriterPrintf(a2, (uint64_t)"/Prev %O", v45, v46, v47, v48, v49, v50, *(void *)(a1 + 288));
  PDFWriterPrintf(a2, (uint64_t)">>\n", v72, v73, v74, v75, v76, v77, v101);
  PDFWriterPrintf(a2, (uint64_t)"startxref\n", v78, v79, v80, v81, v82, v83, v102);
  PDFWriterPrintf(a2, (uint64_t)"0\n", v84, v85, v86, v87, v88, v89, v103);
  PDFWriterPrintf(a2, (uint64_t)"%%%%EOF\n", v90, v91, v92, v93, v94, v95, v104);
}

void sub_184FFCDB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(CGDataConsumer *)>::__value_func[abi:fe180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(CGDataConsumer *)>::~__value_func[abi:fe180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(__CFData *)>::__value_func[abi:fe180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(__CFData *)>::~__value_func[abi:fe180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<PDFWriter,std::function<void ()(PDFWriter*)>>::reset[abi:fe180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t *std::unique_ptr<CGDataConsumer,std::function<void ()(CGDataConsumer*)>>::reset[abi:fe180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t *std::unique_ptr<__CFData,std::function<void ()(__CFData*)>>::reset[abi:fe180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t *std::unique_ptr<__sFILE,std::function<void ()(__sFILE*)>>::reset[abi:fe180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

void std::__throw_bad_function_call[abi:fe180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x18532A2A0);
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::operator()(uint64_t a1, FILE **a2)
{
  return fclose(*a2);
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED0952D8;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED0952D8;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095490;
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED095490;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095438;
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED095438;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED0953E0;
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED0953E0;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095388;
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED095388;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095330;
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED095330;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::operator()(uint64_t a1, const void ***a2)
{
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095280;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED095280;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095228;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED095228;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED0951D0;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED0951D0;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::~__func()
{
}

void *std::map<unsigned long,unsigned long>::at(void *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    std::__throw_out_of_range[abi:fe180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unint64_t v2 = a1[4];
      if (v2 <= a2) {
        break;
      }
      a1 = (void *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (void *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

char *std::vector<unsigned long>::assign<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,0>(char **a1, void *a2, void *a3)
{
  if (a2 == a3)
  {
    uint64_t v19 = a1 + 1;
    uint64_t result = *a1;
    uint64_t v14 = v19;
LABEL_20:
    *uint64_t v14 = result;
    return result;
  }
  uint64_t v5 = a2;
  unint64_t v6 = 0;
  size_t v7 = a2;
  do
  {
    unint64_t v8 = v6;
    uint64_t v9 = (void *)v7[1];
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)v7[2];
        BOOL v11 = *v10 == (void)v7;
        size_t v7 = v10;
      }
      while (!v11);
    }
    ++v6;
    size_t v7 = v10;
  }
  while (v10 != a3);
  uint64_t v12 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (v8 >= (v12 - (uint64_t)*a1) >> 3)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v12 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (v8 >= 0x1FFFFFFFFFFFFFFFLL) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v20 = v12 >> 2;
    if (v12 >> 2 <= v6) {
      uint64_t v20 = v8 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    std::vector<unsigned long>::__vallocate[abi:fe180100](a1, v21);
    goto LABEL_56;
  }
  uint64_t v14 = a1 + 1;
  uint64_t v15 = a1[1];
  uint64_t v16 = (v15 - result) >> 3;
  if (v16 > v8)
  {
    if (a2 != a3)
    {
      do
      {
        *(void *)uint64_t result = v5[4];
        uint64_t v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v11 = *v18 == (void)v5;
            uint64_t v5 = v18;
          }
          while (!v11);
        }
        result += 8;
        uint64_t v5 = v18;
      }
      while (v18 != a3);
    }
    goto LABEL_20;
  }
  if (v15 - result <= -8)
  {
    uint64_t v26 = a2;
    do
    {
      uint64_t v27 = (void *)*v26;
      if (*v26)
      {
        do
        {
          uint64_t v24 = v27;
          uint64_t v27 = (void *)v27[1];
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v24 = (void *)v26[2];
          BOOL v11 = *v24 == (void)v26;
          uint64_t v26 = v24;
        }
        while (v11);
      }
      uint64_t v26 = v24;
    }
    while (!__CFADD__(v16++, 1));
    goto LABEL_48;
  }
  if (v15 != result)
  {
    uint64_t v22 = a2;
    do
    {
      uint64_t v23 = (void *)v22[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (void *)v22[2];
          BOOL v11 = *v24 == (void)v22;
          uint64_t v22 = v24;
        }
        while (!v11);
      }
      uint64_t v22 = v24;
    }
    while (v16-- > 1);
LABEL_48:
    if (v24 != a2)
    {
      do
      {
        *(void *)uint64_t result = v5[4];
        uint64_t v29 = (void *)v5[1];
        if (v29)
        {
          do
          {
            uint64_t v30 = v29;
            uint64_t v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v30 = (void *)v5[2];
            BOOL v11 = *v30 == (void)v5;
            uint64_t v5 = v30;
          }
          while (!v11);
        }
        result += 8;
        uint64_t v5 = v30;
      }
      while (v30 != v24);
    }
    uint64_t v5 = v24;
  }
LABEL_56:

  return (char *)std::vector<unsigned long>::__construct_at_end<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>((uint64_t)a1, v5, a3);
}

uint64_t std::vector<unsigned long>::__construct_at_end<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *uint64_t v3 = a2[4];
      uint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + ++*(_DWORD *)(result + 8) = v3;
  return result;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::operator()(uint64_t a1, const void ***a2)
{
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095178;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED095178;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095120;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1ED095120;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::operator()(uint64_t a1, FILE **a2)
{
  fclose(*a2);
  uint64_t v5 = *(const char **)(a1 + 8);
  uint64_t v4 = a1 + 8;
  uint64_t v3 = v5;
  if (*(char *)(v4 + 23) >= 0) {
    BOOL v6 = (const char *)v4;
  }
  else {
    BOOL v6 = v3;
  }

  return unlink(v6);
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED0950C8;
  unint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::__clone(uint64_t a1)
{
  unint64_t v2 = operator new(0x20uLL);
  *unint64_t v2 = &unk_1ED0950C8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_184FFDF80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1ED0950C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x18532A2A0);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1ED0950C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ___ZN13PDFLinearizer11emitCatalogEP9PDFWriter_block_invoke(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v6 = *(void *)(a1 + 40);
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID() && (unint64_t valuePtr = 0, CFNumberGetValue((CFNumberRef)cf, kCFNumberLongType, &valuePtr)))
  {
    unint64_t valuePtr = *std::map<unsigned long,unsigned long>::at(*(void **)(v6 + 240), valuePtr);
    PDFWriterPrintf(*(unsigned char ***)(a1 + 48), (uint64_t)"%/ %R", v8, v9, v10, v11, v12, v13, a2);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void __Block_byref_object_copy__19070(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 40;
  *(void *)(a1 + 40) = a1 + 40;
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = a1 + 40;
  uint64_t v5 = (void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (a2[9] == a2[8])
  {
LABEL_6:
    for (uint64_t i = (void *)a2[6]; i != a2 + 5; uint64_t i = (void *)i[1])
      boost::add_edge<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config>>((uint64_t)v13, i[2], i[3], v4);
    operator new();
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 48;
  while (1)
  {
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::resize(v5, 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3) + 1);
    uint64_t v10 = a2[8];
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((a2[9] - v10) >> 3);
    if (v11 <= v8) {
      break;
    }
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7 == v6) {
      break;
    }
    *(void *)(v6 + 56 * (0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3) - 1) + 4++*(_DWORD *)(result + 8) = *(void *)(v10 + v9);
    ++v8;
    v9 += 56;
    if (v8 >= v11) {
      goto LABEL_6;
    }
  }
  __break(1u);
}

void sub_184FFE26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  std::__list_imp<long long>::clear(v2);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_dispose__19071(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2) {
    MEMORY[0x18532A2A0](v2, 0xC400A2AC0F1);
  }
  uint64_t v4 = (void **)(a1 + 64);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:fe180100](&v4);

  return std::__list_imp<long long>::clear((void *)(a1 + 40));
}

void *__Block_byref_object_copy__15(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

uint64_t *___ZN13PDFLinearizer14collectObjectsEP7__sFILE_block_invoke(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(result[4] + 8) + 64);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*(void *)(result[4] + 8) + 72) - v2) >> 3) <= a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = (void *)(v2 + 56 * a2);
    uint64_t v6 = (void *)*v3;
    uint64_t v4 = v3 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      uint64_t v7 = result;
      unint64_t v8 = result + 8;
      do
      {
        unint64_t v9 = v5[4];
        uint64_t v10 = *(void *)(v7[5] + 8);
        uint64_t v13 = *(void **)(v10 + 48);
        unint64_t v11 = (void *)(v10 + 48);
        uint64_t v12 = v13;
        if (!v13) {
          goto LABEL_15;
        }
        uint64_t v14 = v11;
        do
        {
          unint64_t v15 = v12[4];
          BOOL v16 = v15 >= v9;
          if (v15 >= v9) {
            uint64_t v17 = v12;
          }
          else {
            uint64_t v17 = v12 + 1;
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          uint64_t v12 = (void *)*v17;
        }
        while (*v17);
        if (v14 == v11 || v9 < v14[4])
        {
LABEL_15:
          uint64_t result = std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v11 - 1, v5[4], v5[4]);
          uint64_t v18 = (void *)*v8;
          if (!*v8) {
            goto LABEL_26;
          }
          uint64_t v19 = v8;
          do
          {
            unint64_t v20 = v18[4];
            BOOL v21 = v20 >= v9;
            if (v20 >= v9) {
              uint64_t v22 = v18;
            }
            else {
              uint64_t v22 = v18 + 1;
            }
            if (v21) {
              uint64_t v19 = v18;
            }
            uint64_t v18 = (void *)*v22;
          }
          while (*v22);
          if (v19 == v8 || v9 < v19[4]) {
LABEL_26:
          }
            uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)(*(void *)(v7[6] + 8) + 40) + 16))();
        }
        uint64_t v23 = (void *)v5[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v5[2];
            BOOL v25 = *v24 == (void)v5;
            uint64_t v5 = v24;
          }
          while (!v25);
        }
        uint64_t v5 = v24;
      }
      while (v24 != v4);
    }
  }
  return result;
}

uint64_t std::set<unsigned long>::set[abi:fe180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      unint64_t v8 = *(void **)(a1 + 8);
      unint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          unint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          unint64_t v9 = v7;
        }
        while (v10);
      }
      unint64_t v11 = v5[4];
      if (v7[4] < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = (uint64_t **)v7;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v6) {
          uint64_t v13 = (uint64_t **)(v7 + 1);
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t **)v3;
        uint64_t v13 = (uint64_t **)v3;
        if (v6)
        {
          uint64_t v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              unint64_t v17 = v6[4];
              if (v11 >= v17) {
                break;
              }
              uint64_t v6 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            uint64_t v13 = v12 + 1;
            uint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        uint64_t v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v5[4];
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      unint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          BOOL v16 = v15;
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          BOOL v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }
        while (!v10);
      }
      uint64_t v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_184FFE634(_Unwind_Exception *a1)
{
  std::__tree<unsigned long>::destroy(*v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__20(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4++*(_DWORD *)(result + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v2;
    operator delete(v2);
  }
}

void ___ZN13PDFLinearizer14collectObjectsEP7__sFILE_block_invoke_22(uint64_t a1, uint64_t a2, off_t a3, size_t a4)
{
  if (a3)
  {
    char v5 = a3;
    unint64_t v8 = *(uint64_t **)(a1 + 40);
    if (fseeko(*(FILE **)(a1 + 48), a3, 0) == -1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _CGExceptionDescription(2, "ioResult == -1", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 474, "fseek to offset: %llu failed", v34, v35, v36, v5);
      std::logic_error::logic_error(exception, &v48);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E529EE60, MEMORY[0x1E4FBA1C0]);
    }
    unint64_t v9 = *(void **)(*(void *)(a1 + 32) + 8);
    unint64_t v10 = v9[5];
    if (v9[7] - v10 < a4)
    {
      if ((a4 & 0x8000000000000000) != 0) {
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
      }
      unint64_t v11 = (char *)v9[6];
      uint64_t v12 = operator new(a4);
      uint64_t v13 = &v11[(void)v12 - v10];
      uint64_t v14 = v13;
      if (v11 != (char *)v10)
      {
        unint64_t v15 = &v11[~v10];
        do
        {
          char v16 = *--v11;
          (v15--)[(void)v12] = v16;
        }
        while (v11 != (char *)v10);
        uint64_t v14 = v12;
      }
      v9[5] = v14;
      v9[6] = v13;
      v9[7] = &v12[a4];
      if (v10) {
        operator delete((void *)v10);
      }
    }
    if (fread(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), 1uLL, a4, *(FILE **)(a1 + 48)) != a4)
    {
      uint64_t v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _CGExceptionDescription(3, "bytesRead == length", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 478, "fread of %llu bytes at position %llu failed", v38, v39, v40, a4);
      std::logic_error::logic_error(v37, &v48);
      v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      __cxa_throw(v37, (struct type_info *)off_1E529EE60, MEMORY[0x1E4FBA1C0]);
    }
    uint64_t v47 = 0;
    if (sscanf(*(const char **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "%d 0 obj\n%n", (char *)&v47 + 4, &v47) != 1)
    {
      uint64_t v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _CGExceptionDescription(3, "count == 1", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 482, "failed to scan object number from object: %llu, offset: %llu", v42, v43, v44, v5);
      std::logic_error::logic_error(v41, &v48);
      v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      __cxa_throw(v41, (struct type_info *)off_1E529EE60, MEMORY[0x1E4FBA1C0]);
    }
    std::string::basic_string[abi:fe180100](__p, (void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + (int)v47), a4 - (int)v47);
    unint64_t v17 = v8[16];
    uint64_t v18 = (void *)v8[15];
    if ((unint64_t)v18 >= v17)
    {
      uint64_t v21 = v8[14];
      uint64_t v22 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v18 - v21) >> 3);
      if ((unint64_t)(v22 + 1) > 0x492492492492492) {
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
      }
      unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - v21) >> 3);
      uint64_t v24 = 2 * v23;
      if (2 * v23 <= v22 + 1) {
        uint64_t v24 = v22 + 1;
      }
      if (v23 >= 0x249249249249249) {
        unint64_t v25 = 0x492492492492492;
      }
      else {
        unint64_t v25 = v24;
      }
      uint64_t v50 = v8 + 16;
      if (v25)
      {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(v25);
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v26 = 0;
      }
      uint64_t v29 = &v27[56 * v22];
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      v48.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      v48.__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
      uint64_t v49 = &v27[56 * v26];
      *(void *)uint64_t v29 = a2;
      uint64_t v30 = (std::string *)(v29 + 8);
      if (SHIBYTE(v46) < 0)
      {
        std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        uint64_t v29 = (char *)v48.__r_.__value_.__r.__words[2];
      }
      else
      {
        long long v31 = *(_OWORD *)__p;
        *((void *)v29 + 3) = v46;
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
      }
      uint64_t v32 = &v27[56 * v22];
      *((void *)v32 + 4) = 0;
      *((void *)v32 + 5) = 0;
      *((void *)v32 + 6) = 0;
      v48.__r_.__value_.__r.__words[2] = (std::string::size_type)(v29 + 56);
      std::vector<PDFIndirectObject>::__swap_out_circular_buffer(v8 + 14, &v48);
      uint64_t v28 = (void *)v8[15];
      std::__split_buffer<PDFIndirectObject>::~__split_buffer((uint64_t)&v48);
    }
    else
    {
      *uint64_t v18 = a2;
      uint64_t v19 = (std::string *)(v18 + 1);
      if (SHIBYTE(v46) < 0)
      {
        std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v20 = *(_OWORD *)__p;
        v18[3] = v46;
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      }
      v18[4] = 0;
      v18[5] = 0;
      v18[6] = 0;
      uint64_t v28 = v18 + 7;
      v8[15] = (uint64_t)(v18 + 7);
    }
    v8[15] = (uint64_t)v28;
    if (SHIBYTE(v46) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_184FFEAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::reference_wrapper<PDFIndirectObject>>::insert(uint64_t a1, char *__src, void *a3)
{
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v8 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = v7;
    if (v18)
    {
      long long v20 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v18);
    }
    else
    {
      long long v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = &v20[8 * v16];
    __p = v20;
    uint64_t v27 = v21;
    uint64_t v29 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (v13 == __src) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v15 >> 2;
        }
        uint64_t v24 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v23);
        uint64_t v21 = &v24[8 * (v23 >> 2)];
        __p = v24;
        uint64_t v27 = v21;
        uint64_t v29 = &v24[8 * v25];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v22 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v22 = v16 + 1;
        }
        v21 -= 8 * (v22 >> 1);
        uint64_t v27 = v21;
      }
    }
    *(void *)uint64_t v21 = *a3;
    uint64_t v28 = v21 + 8;
    std::vector<std::reference_wrapper<PDFIndirectObject>>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, __src);
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    *(void *)__src = *a3;
  }
}

void sub_184FFED48(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL PDFLinearizerPageInfo::hasReferenceToObject(PDFLinearizerPageInfo *this, PDFLinearizerPageInfo *a2, unint64_t a3)
{
  if (a2 == this) {
    return 0;
  }
  unint64_t v3 = (a2 - this) >> 3;
  do
  {
    unint64_t v4 = v3 >> 1;
    char v5 = (unint64_t *)((char *)this + 8 * (v3 >> 1));
    unint64_t v7 = *v5;
    uint64_t v6 = (PDFLinearizerPageInfo *)(v5 + 1);
    v3 += ~(v3 >> 1);
    if (v7 < a3) {
      this = v6;
    }
    else {
      unint64_t v3 = v4;
    }
  }
  while (v3);
  return this != a2 && *(void *)this == a3;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>>>::__emplace_multi<std::pair<unsigned long,PDFIndirectObject&>>(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x30uLL);
  v6[4] = a2;
  v6[5] = a3;
  unint64_t v7 = a1 + 1;
  unint64_t v8 = a1[1];
  if (v8)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v8;
        if (v8[4] <= a2) {
          break;
        }
        unint64_t v8 = (uint64_t *)*v8;
        unint64_t v9 = v7;
        if (!*v7) {
          goto LABEL_8;
        }
      }
      unint64_t v8 = (uint64_t *)v8[1];
    }
    while (v8);
    unint64_t v9 = v7 + 1;
  }
  else
  {
    unint64_t v9 = a1 + 1;
  }
LABEL_8:

  return std::__tree<unsigned long>::__insert_node_at(a1, (uint64_t)v7, v9, v6);
}

void std::vector<std::reference_wrapper<PDFIndirectObject>>::__insert_with_size[abi:fe180100]<std::__wrap_iter<std::reference_wrapper<PDFIndirectObject>*>,std::__wrap_iter<std::reference_wrapper<PDFIndirectObject>*>>(void **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = __src;
  unint64_t v9 = a1 + 2;
  unint64_t v10 = a1[2];
  unint64_t v11 = (unint64_t)a1[1];
  if (a5 > (uint64_t)&v10[-v11] >> 3)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = a5 + ((uint64_t)(v11 - (void)*a1) >> 3);
    if (v13 >> 61) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v14 = (__dst - v12) >> 3;
    uint64_t v15 = v10 - v12;
    if (v15 >> 2 > v13) {
      unint64_t v13 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    __p[4] = v9;
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v27 = (void *)(v16 + 8 * v14);
    __p[0] = (void *)v16;
    __p[1] = v27;
    __p[3] = (void *)(v16 + 8 * v17);
    uint64_t v28 = 8 * a5;
    uint64_t v29 = &v27[a5];
    do
    {
      uint64_t v30 = *(void *)v6;
      v6 += 8;
      *v27++ = v30;
      v28 -= 8;
    }
    while (v28);
    __p[2] = v29;
    std::vector<std::reference_wrapper<PDFIndirectObject>>::__swap_out_circular_buffer(a1, (uint64_t)__p, __dst);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v18 = v11 - (void)__dst;
  uint64_t v19 = (uint64_t)(v11 - (void)__dst) >> 3;
  if (v19 >= a5)
  {
    long long v20 = &__src[8 * a5];
    unint64_t v22 = (char *)a1[1];
LABEL_17:
    unint64_t v23 = &__dst[8 * a5];
    uint64_t v24 = &v22[-8 * a5];
    uint64_t v25 = v22;
    if ((unint64_t)v24 < v11)
    {
      uint64_t v25 = v22;
      do
      {
        uint64_t v26 = *(void *)v24;
        v24 += 8;
        *(void *)uint64_t v25 = v26;
        v25 += 8;
      }
      while ((unint64_t)v24 < v11);
    }
    a1[1] = v25;
    if (v22 != v23) {
      memmove(&v22[-8 * ((v22 - v23) >> 3)], __dst, v22 - v23);
    }
    if (v20 != v6)
    {
      memmove(__dst, v6, v20 - v6);
    }
    return;
  }
  long long v20 = &__src[8 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(a1[1], &__src[8 * v19], a4 - v20);
  }
  unint64_t v22 = (char *)(v11 + v21);
  a1[1] = (void *)(v11 + v21);
  if (v18 >= 1) {
    goto LABEL_17;
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,unsigned long>>(uint64_t *result, unint64_t a2, __n128 a3)
{
  unint64_t v3 = (uint64_t **)result;
  char v5 = (uint64_t **)(result + 1);
  unint64_t v4 = (uint64_t *)result[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= a2) {
          break;
        }
        unint64_t v4 = *v6;
        char v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a2) {
        break;
      }
      unint64_t v4 = v6[1];
      if (!v4)
      {
        char v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(result + 1);
LABEL_9:
    unint64_t v8 = (__n128 *)operator new(0x30uLL);
    v8[2] = a3;
    return std::__tree<unsigned long>::__insert_node_at(v3, (uint64_t)v6, v5, (uint64_t *)v8);
  }
  return result;
}

void PDFLinearizer::updateObjectReference(std::string **this, PDFIndirectObject *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x20uLL, "%lu 0 R", a2);
  snprintf(__s, 0x20uLL, "%lu 0 R", a3);
  size_t v5 = strlen(__s);
  size_t v6 = strlen(__str);
  int64_t v7 = strlen(__str);
  std::string::size_type v8 = 0;
  uint64_t v39 = (PDFIndirectObject *)this;
  unint64_t v11 = this[1];
  unint64_t v9 = (std::string *)(this + 1);
  unint64_t v10 = v11;
  std::string::size_type __n1 = v6;
  size_t v37 = v5;
  uint64_t v35 = v5 - v6;
  int v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  std::string::size_type v13 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  BOOL v14 = v12 < 0;
  std::string::size_type size = v9->__r_.__value_.__l.__size_;
  uint64_t v38 = v9;
  if (v12 >= 0)
  {
    std::string::size_type v16 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  }
  else
  {
    unint64_t v9 = v10;
    std::string::size_type v16 = size;
  }
  int v17 = __str[0];
  while (!v7)
  {
LABEL_14:
    if (!v8) {
      goto LABEL_26;
    }
    if (v8 == -1) {
      return;
    }
    std::string::size_type v23 = v8 - 1;
    if (v14) {
      std::string::size_type v24 = size;
    }
    else {
      std::string::size_type v24 = v13;
    }
    if (v24 < v23) {
      __break(1u);
    }
    uint64_t v25 = v38;
    if (v14) {
      uint64_t v25 = v10;
    }
    unsigned int v26 = v25->__r_.__value_.__s.__data_[v23];
    if ((v26 & 0x80000000) != 0
       ? __maskrune(v26, 0x4000uLL)
       : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v26 + 60) & 0x4000)
    {
LABEL_26:
      uint64_t v28 = (void *)*((void *)v39 + 4);
      uint64_t v29 = (void *)*((void *)v39 + 5);
      if (v29 != v28)
      {
        unint64_t v30 = v29 - v28;
        do
        {
          unint64_t v31 = v30 >> 1;
          uint64_t v32 = &v28[v30 >> 1];
          std::string::size_type v34 = *v32;
          uint64_t v33 = v32 + 1;
          v30 += ~(v30 >> 1);
          if (v34 < v8) {
            uint64_t v28 = v33;
          }
          else {
            unint64_t v30 = v31;
          }
        }
        while (v30);
      }
      if (v28 == v29 || *v28 != v8)
      {
        std::string::replace(v38, v8, __n1, __s);
        PDFIndirectObject::addToReplacementOffsets(v39, v8, v35);
      }
    }
    v8 += v37;
    std::string::size_type v13 = *((unsigned __int8 *)v39 + 31);
    BOOL v14 = *((char *)v39 + 31) < 0;
    unint64_t v10 = (std::string *)*((void *)v39 + 1);
    std::string::size_type size = *((void *)v39 + 2);
    if (*((char *)v39 + 31) >= 0) {
      unint64_t v9 = v38;
    }
    else {
      unint64_t v9 = (std::string *)*((void *)v39 + 1);
    }
    if (*((char *)v39 + 31) >= 0) {
      std::string::size_type v16 = *((unsigned __int8 *)v39 + 31);
    }
    else {
      std::string::size_type v16 = *((void *)v39 + 2);
    }
    if (v16 < v8) {
      return;
    }
  }
  uint64_t v18 = (char *)v9 + v8;
  uint64_t v19 = (char *)v9 + v16;
  while (v19 - v18 >= v7)
  {
    int64_t v20 = v19 - v18 - v7;
    if (v20 == -1) {
      break;
    }
    int64_t v21 = (char *)memchr(v18, v17, v20 + 1);
    if (!v21) {
      break;
    }
    unint64_t v22 = v21;
    if (!memcmp(v21, __str, v7))
    {
      if (v22 == v19) {
        return;
      }
      std::string::size_type v8 = v22 - (char *)v9;
      goto LABEL_14;
    }
    uint64_t v18 = v22 + 1;
  }
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__base_destruct_at_end[abi:fe180100]((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void PDFIndirectObject::~PDFIndirectObject(PDFIndirectObject *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::~adjacency_list(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    MEMORY[0x18532A2A0](v2, 0xC400A2AC0F1);
  }
  unint64_t v4 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:fe180100](&v4);
  std::__list_imp<long long>::clear((void *)a1);
  return a1;
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__base_destruct_at_end[abi:fe180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 56)
  {
    std::__tree<unsigned long>::destroy(*(void **)(i - 24));
    std::__tree<unsigned long>::destroy(*(void **)(i - 48));
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2;
}

void PDFIndirectObject::addToReplacementOffsets(PDFIndirectObject *this, unint64_t a2, uint64_t a3)
{
  unint64_t v44 = a2;
  int64_t v7 = (char *)*((void *)this + 4);
  size_t v6 = (char *)*((void *)this + 5);
  uint64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    unint64_t v10 = (char *)*((void *)this + 5);
  }
  else
  {
    unint64_t v9 = v8 >> 3;
    unint64_t v10 = (char *)*((void *)this + 4);
    do
    {
      unint64_t v11 = v9 >> 1;
      int v12 = &v10[8 * (v9 >> 1)];
      unint64_t v14 = *(void *)v12;
      std::string::size_type v13 = v12 + 8;
      v9 += ~(v9 >> 1);
      if (v14 < a2) {
        unint64_t v10 = v13;
      }
      else {
        unint64_t v9 = v11;
      }
    }
    while (v9);
  }
  if (v6 == v10 || *(void *)v10 != a2)
  {
    unint64_t v15 = *((void *)this + 6);
    if ((unint64_t)v6 >= v15)
    {
      unint64_t v20 = (v8 >> 3) + 1;
      if (v20 >> 61) {
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v21 = v10 - v7;
      uint64_t v22 = (v10 - v7) >> 3;
      unint64_t v23 = v15 - (void)v7;
      unint64_t v24 = (uint64_t)(v15 - (void)v7) >> 2;
      if (v24 > v20) {
        unint64_t v20 = v24;
      }
      if (v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v20;
      }
      if (v25)
      {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v25);
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v26 = 0;
      }
      uint64_t v29 = &v27[8 * v22];
      unint64_t v30 = &v27[8 * v26];
      if (v22 == v26)
      {
        if (v21 < 1)
        {
          if (v10 == v7) {
            unint64_t v32 = 1;
          }
          else {
            unint64_t v32 = v21 >> 2;
          }
          uint64_t v33 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v32);
          uint64_t v29 = &v33[8 * (v32 >> 2)];
          unint64_t v30 = &v33[8 * v34];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          unint64_t v31 = v22 + 2;
          if (v22 >= -1) {
            unint64_t v31 = v22 + 1;
          }
          v29 -= 8 * (v31 >> 1);
        }
      }
      *(void *)uint64_t v29 = a2;
      uint64_t v35 = (char *)*((void *)this + 4);
      uint64_t v36 = v29;
      if (v35 != v10)
      {
        size_t v37 = v10;
        uint64_t v36 = v29;
        do
        {
          uint64_t v38 = *((void *)v37 - 1);
          v37 -= 8;
          *((void *)v36 - 1) = v38;
          v36 -= 8;
        }
        while (v37 != v35);
      }
      uint64_t v39 = (char *)*((void *)this + 5);
      int64_t v40 = v39 - v10;
      if (v39 != v10) {
        memmove(v29 + 8, v10, v39 - v10);
      }
      uint64_t v41 = (void *)*((void *)this + 4);
      *((void *)this + 4) = v36;
      *((void *)this + 5) = &v29[v40 + 8];
      *((void *)this + 6) = v30;
      if (v41) {
        operator delete(v41);
      }
      unint64_t v10 = v29;
    }
    else if (v10 == v6)
    {
      *(void *)size_t v6 = a2;
      *((void *)this + 5) = v6 + 8;
      unint64_t v10 = v6;
    }
    else
    {
      std::string::size_type v16 = v10 + 8;
      int v17 = v6 - 8;
      uint64_t v18 = (void *)*((void *)this + 5);
      while (v17 < v6)
      {
        uint64_t v19 = *(void *)v17;
        v17 += 8;
        *v18++ = v19;
      }
      *((void *)this + 5) = v18;
      if (v6 != v16) {
        memmove(&v6[-8 * ((v6 - v16) >> 3)], v10, v6 - v16);
      }
      unint64_t v28 = v44;
      if (v10 > (char *)&v44) {
        unint64_t v28 = a2;
      }
      *(void *)unint64_t v10 = v28;
    }
    uint64_t v42 = (void *)*((void *)this + 5);
    for (uint64_t i = v10 + 8; i != v42; ++i)
      *i += a3;
  }
}

void sub_184FFF6F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::reference_wrapper<PDFIndirectObject>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  size_t v5 = *(char **)(a2 + 8);
  size_t v6 = (char *)*a1;
  int64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    int64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + ++*(_DWORD *)(result + 8) = v7;
  unint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    int64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  std::string::size_type v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + ++*(_DWORD *)(result + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t *std::vector<PDFIndirectObject>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 56) = *(void *)(v2 + v5 - 56);
      long long v8 = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 4++*(_DWORD *)(result + 8) = v8;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 4++*(_DWORD *)(result + 8) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - ++*(_DWORD *)(result + 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - ++*(_DWORD *)(result + 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 8) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *__n128 result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<PDFIndirectObject>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::allocator<PDFIndirectObject>::destroy[abi:fe180100](i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void __destroy_helper_block_e8_56c48_ZTSNSt3__13setImNS_4lessImEENS_9allocatorImEEEE(uint64_t a1)
{
}

uint64_t __copy_helper_block_e8_56c48_ZTSNSt3__13setImNS_4lessImEENS_9allocatorImEEEE(uint64_t a1, uint64_t a2)
{
  return std::set<unsigned long>::set[abi:fe180100](a1 + 56, (void *)(a2 + 56));
}

void boost::add_edge<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config>>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 <= a3) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 24);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a4 + 32) - v9) >> 3);
  if (v8 >= v10)
  {
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::resize((void **)(a4 + 24), v8 + 1);
    uint64_t v9 = *(void *)(a4 + 24);
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a4 + 32) - v9) >> 3);
  }
  uint64_t v11 = (uint64_t *)operator new(0x28uLL);
  v11[2] = a2;
  v11[3] = a3;
  uint64_t v12 = *(void *)a4;
  *uint64_t v11 = *(void *)a4;
  v11[1] = a4;
  *(void *)(v12 + ++*(_DWORD *)(result + 8) = v11;
  *(void *)a4 = v11;
  ++*(void *)(a4 + 16);
  if (v10 > a2)
  {
    std::string::size_type v13 = v11;
    *(void *)&long long v19 = a3;
    *((void *)&v19 + 1) = v11;
    unint64_t v14 = std::__tree<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>::__emplace_unique_key_args<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>((uint64_t **)(v9 + 56 * a2), a3, &v19);
    if (!v15)
    {
      uint64_t v18 = v14;
      std::list<CGPDFPage *>::erase((uint64_t *)a4, v13);
      char v17 = 0;
      std::string::size_type v13 = v18[5];
      goto LABEL_11;
    }
    uint64_t v16 = *(void *)(a4 + 24);
    if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a4 + 32) - v16) >> 3) > a3)
    {
      *(void *)&long long v19 = a2;
      *((void *)&v19 + 1) = v13;
      std::__tree<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>::__emplace_unique_key_args<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>((uint64_t **)(v16 + 56 * a3 + 24), a2, &v19);
      char v17 = 1;
LABEL_11:
      *(void *)a1 = a2;
      *(void *)(a1 + ++*(_DWORD *)(result + 8) = a3;
      *(void *)(a1 + 16) = v13 + 4;
      *(unsigned char *)(a1 + 24) = v17;
      return;
    }
  }
  __break(1u);
}

uint64_t boost::vec_adj_list_impl<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:fe180100](&v3);
  std::__list_imp<long long>::clear((void *)a1);
  return a1;
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::resize(void **a1, unint64_t a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v5 = (char *)a1[1];
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v8 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v8 - v5) >> 3) >= v7)
    {
      uint64_t v34 = &v5[56 * v7];
      uint64_t v35 = 56 * a2 - 8 * ((v5 - (unsigned char *)*a1) >> 3);
      uint64_t v36 = v5 + 32;
      do
      {
        *(v36 - 3) = 0;
        *(v36 - 4) = v36 - 3;
        *uint64_t v36 = 0;
        v36[1] = 0;
        *(v36 - 2) = 0;
        *(v36 - 1) = v36;
        v36 += 7;
        v35 -= 56;
      }
      while (v35);
      a1[1] = v34;
      return;
    }
    if (a2 > 0x492492492492492) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v12 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(v11);
    unint64_t v14 = &v12[56 * v6];
    char v15 = &v12[56 * a2];
    uint64_t v16 = 56 * a2 - 56 * v6;
    char v17 = v14 + 32;
    do
    {
      *(v17 - 3) = 0;
      *(v17 - 4) = v17 - 3;
      *char v17 = 0;
      v17[1] = 0;
      *(v17 - 2) = 0;
      *(v17 - 1) = v17;
      v17 += 7;
      v16 -= 56;
    }
    while (v16);
    uint64_t v18 = &v12[56 * v13];
    long long v19 = (char *)*a1;
    unint64_t v20 = (char *)a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v18;
      if (!v20) {
        return;
      }
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = &v14[v21];
        *((void *)v22 - 7) = *(void *)&v20[v21 - 56];
        unint64_t v23 = &v20[v21 - 48];
        uint64_t v24 = *(void *)v23;
        *(void *)&v14[v21 - 48] = *(void *)v23;
        uint64_t v25 = (uint64_t)&v14[v21 - 48];
        uint64_t v26 = *(void *)&v20[v21 - 40];
        *((void *)v22 - 5) = v26;
        if (v26)
        {
          *(void *)(v24 + 16) = v25;
          *(void *)&v20[v21 - 56] = v23;
          *(void *)unint64_t v23 = 0;
          *(void *)&v20[v21 - 40] = 0;
        }
        else
        {
          *((void *)v22 - 7) = v25;
        }
        uint64_t v27 = &v14[v21];
        *((void *)v27 - 4) = *(void *)&v20[v21 - 32];
        unint64_t v28 = &v20[v21 - 24];
        uint64_t v29 = *(void *)v28;
        *(void *)&v14[v21 - 24] = *(void *)v28;
        uint64_t v30 = (uint64_t)&v14[v21 - 24];
        uint64_t v31 = *(void *)&v20[v21 - 16];
        *((void *)v27 - 2) = v31;
        if (v31)
        {
          *(void *)(v29 + 16) = v30;
          *(void *)&v20[v21 - 32] = v28;
          *(void *)unint64_t v28 = 0;
          *(void *)&v20[v21 - 16] = 0;
        }
        else
        {
          *((void *)v27 - 4) = v30;
        }
        *(void *)&v14[v21 - 8] = *(void *)&v20[v21 - 8];
        v21 -= 56;
      }
      while (&v20[v21] != v19);
      unint64_t v32 = (char *)*a1;
      unint64_t v20 = (char *)a1[1];
      *a1 = &v14[v21];
      a1[1] = v15;
      a1[2] = v18;
      if (v20 != v32)
      {
        do
        {
          std::__tree<unsigned long>::destroy(*((void **)v20 - 3));
          std::__tree<unsigned long>::destroy(*((void **)v20 - 6));
          v20 -= 56;
        }
        while (v20 != v32);
        unint64_t v20 = v32;
      }
      if (!v20) {
        return;
      }
    }
    operator delete(v20);
    return;
  }
  if (a2 < v6)
  {
    uint64_t v33 = (uint64_t)&v4[56 * a2];
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__base_destruct_at_end[abi:fe180100]((uint64_t)a1, v33);
  }
}

uint64_t **std::__tree<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>::__emplace_unique_key_args<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>(uint64_t **a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a3;
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    char *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::operator()(uint64_t a1, FILE **a2)
{
  return fclose(*a2);
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095070;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1ED095070;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::~__func()
{
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:fe180100](*(void *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::operator()(uint64_t a1, const void ***a2)
{
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED095018;
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1ED095018;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::~__func()
{
}

void PDFLinearizerRecordReference(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    unint64_t v7 = (char *)a1[24];
    unint64_t v6 = a1[25];
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v9 = (char *)a1[23];
      uint64_t v10 = (v7 - v9) >> 4;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60) {
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v12 = v6 - (void)v9;
      if (v12 >> 3 > v11) {
        unint64_t v11 = v12 >> 3;
      }
      BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      if (!v13) {
        unint64_t v14 = v11;
      }
      if (v14)
      {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CGPoint>>(v14);
        unint64_t v9 = (char *)a1[23];
        unint64_t v7 = (char *)a1[24];
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = (uint64_t *)(v14 + 16 * v10);
      unint64_t v17 = v14 + 16 * v15;
      *uint64_t v16 = a3;
      v16[1] = a2;
      unint64_t v8 = v16 + 2;
      if (v7 != v9)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
          v16 -= 2;
          v7 -= 16;
        }
        while (v7 != v9);
        unint64_t v9 = (char *)a1[23];
      }
      a1[23] = v16;
      a1[24] = v8;
      a1[25] = v17;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(void *)unint64_t v7 = a3;
      *((void *)v7 + 1) = a2;
      unint64_t v8 = v7 + 16;
    }
    a1[24] = v8;
  }
  else
  {
    pdf_log("%s: Invalid param. object = %lu, referrer = %lu", "void PDFLinearizer::recordReference(PDFObjectNumber, PDFObjectNumber)", a2, a3);
  }
}

float64x2_t aal_close(uint64_t a1, float64x2_t result)
{
  if (!*(_DWORD *)(a1 + 48)) {
    return result;
  }
  float v3 = *(double *)a1;
  *(float32x2_t *)&result.f64[0] = vcvt_f32_f64(*(float64x2_t *)(a1 + 16));
  float64x2_t v18 = result;
  if (*(float *)result.f64 == v3)
  {
    float v5 = *(double *)(a1 + 8);
    float v4 = *((float *)result.f64 + 1);
    if (*((float *)result.f64 + 1) == v5) {
      goto LABEL_6;
    }
  }
  else
  {
    float v4 = *((float *)result.f64 + 1);
  }
  aal_add_point(a1, *(float *)result.f64, v4);
  __n128 result = v18;
LABEL_6:
  float64x2_t v8 = *(float64x2_t *)(a1 + 32);
  int32x2_t v6 = (int32x2_t)vcvt_f32_f64(v8);
  float v7 = fabsf(*(float *)(a1 + 236));
  *(float *)v8.f64 = *(float *)(a1 + 104) - v7;
  if (*(float *)v8.f64 <= *(float *)v6.i32 || *(float *)v8.f64 <= *(float *)result.f64)
  {
    float v10 = v7 + *(float *)(a1 + 112);
    if (v10 >= *(float *)v6.i32 || v10 >= *(float *)result.f64)
    {
      *(float *)v8.f64 = *(float *)(a1 + 108) - v7;
      float32x2_t v12 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v8.f64[0], 0);
      float32x2_t v13 = (float32x2_t)vzip2_s32(*(int32x2_t *)&result.f64[0], v6);
      int32x2_t v14 = vcgt_f32(v12, v13);
      if ((v14.i32[1] & v14.i32[0] & 1) == 0)
      {
        *(float *)v14.i32 = v7 + *(float *)(a1 + 116);
        int32x2_t v15 = vcgt_f32(v13, (float32x2_t)vdup_lane_s32(v14, 0));
        if ((v15.i32[1] & v15.i32[0] & 1) == 0)
        {
          float32x2_t v17 = (float32x2_t)v6;
          uint64_t v16 = aal_new_edge(a1);
          __n128 result = v18;
          if (v16)
          {
            __n128 result = vcvtq_f64_f32(*(float32x2_t *)&v18.f64[0]);
            *(float64x2_t *)uint64_t v16 = result;
            *(float64x2_t *)(v16 + 16) = vcvtq_f64_f32(v17);
            *(_DWORD *)(v16 + 32) = 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t aal_add_point(uint64_t result, float a2, float a3)
{
  uint64_t v5 = result;
  float32x2_t v6 = vcvt_f32_f64(*(float64x2_t *)result);
  float v7 = fabsf(*(float *)(result + 236));
  float v8 = *(float *)(result + 104) - v7;
  if (v8 < v6.f32[0] || v8 < a2)
  {
    float v10 = v7 + *(float *)(result + 112);
    if (v10 > v6.f32[0] || v10 > a2)
    {
      float v12 = *(float *)(result + 108) - v7;
      float v13 = v6.f32[1];
      if (v12 < v6.f32[1] || v12 < a3)
      {
        float v15 = v7 + *(float *)(result + 116);
        if (v15 > v6.f32[1] || v15 > a3)
        {
          float32x2_t v22 = v6;
          __n128 result = aal_new_edge(result);
          if (!result) {
            return result;
          }
          float v17 = v22.f32[0];
          *(float64x2_t *)__n128 result = vcvtq_f64_f32(v22);
          *(double *)(result + 16) = a2;
          *(double *)(result + 24) = a3;
          *(_DWORD *)(result + 32) = 0;
          if (v22.f32[0] <= a2) {
            float v18 = v22.f32[0];
          }
          else {
            float v18 = a2;
          }
          if (v22.f32[0] <= a2) {
            float v17 = a2;
          }
          if (v13 <= a3) {
            float v19 = v13;
          }
          else {
            float v19 = a3;
          }
          if (v13 <= a3) {
            float v20 = a3;
          }
          else {
            float v20 = v13;
          }
          if (v18 < *(float *)(v5 + 52))
          {
            if (v18 < *(float *)(v5 + 104)) {
              float v18 = *(float *)(v5 + 104);
            }
            *(float *)(v5 + 52) = v18;
          }
          if (v17 > *(float *)(v5 + 60))
          {
            if (v17 > *(float *)(v5 + 112)) {
              float v17 = *(float *)(v5 + 112);
            }
            *(float *)(v5 + 60) = v17;
          }
          if (v19 < *(float *)(v5 + 56))
          {
            if (v19 < *(float *)(v5 + 108)) {
              float v19 = *(float *)(v5 + 108);
            }
            *(float *)(v5 + 56) = v19;
          }
          if (v20 > *(float *)(v5 + 64))
          {
            if (v20 > *(float *)(v5 + 116)) {
              float v20 = *(float *)(v5 + 116);
            }
            *(float *)(v5 + 64) = v20;
          }
        }
      }
    }
  }
  *(double *)uint64_t v5 = a2;
  *(double *)(v5 + ++*(_DWORD *)(result + 8) = a3;
  int v21 = *(_DWORD *)(v5 + 48);
  if (!v21)
  {
    *(double *)(v5 + 32) = a2;
    *(double *)(v5 + 40) = a3;
  }
  *(_DWORD *)(v5 + 4++*(_DWORD *)(result + 8) = v21 + 1;
  return result;
}

uint64_t aal_new_edge(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 184);
  unint64_t v3 = v2[1];
  unint64_t v4 = v2[2] + 1;
  if (v4 > v3)
  {
    uint64_t v2 = malloc_type_malloc(80 * v3 + 24, 0x3EDB0642uLL);
    if (!v2)
    {
      puts("ERROR -- edge pool could not be allocated");
      return 0;
    }
    uint64_t v5 = *(void **)(a1 + 176);
    do
    {
      float32x2_t v6 = v5;
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
    void *v6 = v2;
    *uint64_t v2 = 0;
    v2[1] = 2 * v3;
    unint64_t v4 = 1;
    *(void *)(a1 + 184) = v2;
  }
  uint64_t v7 = (uint64_t)&v2[5 * v4 - 2];
  v2[2] = v4;
  ++*(_DWORD *)(a1 + 168);
  return v7;
}

uint64_t aa_line_render(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  float32x2_t v49 = 0;
  uint64_t v50 = 0;
  int64x2_t v7 = vdupq_n_s64(0xC10FFFF800000000);
  *(int64x2_t *)(result + 8++*(_DWORD *)(result + 8) = v7;
  float v8 = (double *)(result + 88);
  *(_DWORD *)(result + 120) = a4;
  *(_DWORD *)(result + 124) = a5;
  *(_DWORD *)(result + 12++*(_DWORD *)(result + 8) = a6;
  *(_DWORD *)(result + 132) = a7;
  *(void *)(result + 152) = a2;
  *(void *)(result + 160) = a3;
  unsigned int v9 = (int)fabsf(*(float *)(result + 236) * 65536.0);
  if (v9 >= 0x10000) {
    unsigned int v9 = 0x10000;
  }
  *(_DWORD *)(result + 192) = v9;
  int64x2_t v45 = v7;
  *(int64x2_t *)(result + 72) = v7;
  float v10 = (int64x2_t *)(result + 72);
  unint64_t v11 = *(void **)(result + 176);
  if (v11)
  {
    uint64_t v12 = result;
    while (!v11[2])
    {
LABEL_42:
      unint64_t v11 = (void *)*v11;
      if (!v11) {
        return result;
      }
    }
    unint64_t v13 = 0;
    int32x2_t v14 = (int64x2_t *)(v11 + 7);
    while (1)
    {
      int64x2_t v48 = 0uLL;
      int64x2_t v47 = 0uLL;
      int64x2_t v48 = v14[-2];
      int64x2_t v47 = v14[-1];
      double v15 = *(double *)v48.i64;
      if (fabs(*(double *)v48.i64) <= 262143.0)
      {
        double v16 = *(double *)&v48.i64[1];
        if (fabs(*(double *)&v48.i64[1]) <= 262143.0)
        {
          double v17 = *(double *)v47.i64;
          if (fabs(*(double *)v47.i64) <= 262143.0)
          {
            double v18 = *(double *)&v47.i64[1];
            if (fabs(*(double *)&v47.i64[1]) <= 262143.0) {
              goto LABEL_13;
            }
          }
        }
      }
      __n128 result = aal_clip_edge((double *)v48.i64, (double *)v47.i64);
      if (!result) {
        break;
      }
LABEL_39:
      ++v13;
      int32x2_t v14 = (int64x2_t *)((char *)v14 + 40);
      if (v13 >= v11[2]) {
        goto LABEL_42;
      }
    }
    double v18 = *(double *)&v47.i64[1];
    double v17 = *(double *)v47.i64;
    double v16 = *(double *)&v48.i64[1];
    double v15 = *(double *)v48.i64;
LABEL_13:
    float v19 = v17 - v15;
    float v20 = v18 - v16;
    float v21 = 0.0;
    float v22 = 0.0;
    float v23 = 0.0;
    if (v19 != 0.0)
    {
      float v22 = 1.0 / v19;
      float v23 = (float)(1.0 / v19) * v20;
    }
    v49.f32[0] = v22;
    *(float *)&uint64_t v50 = v23;
    float v24 = 0.0;
    if (v20 != 0.0)
    {
      float v21 = 1.0 / v20;
      float v24 = (float)(1.0 / v20) * v19;
    }
    v49.f32[1] = v21;
    *((float *)&v50 + 1) = v24;
    if (*v8 != v15) {
      goto LABEL_35;
    }
    double v25 = *(double *)(v12 + 96);
    if (v25 != v16) {
      goto LABEL_35;
    }
    float v26 = *v8 - *(double *)(v12 + 72);
    float v27 = v25 - *(double *)(v12 + 80);
    float v28 = fabsf(v19);
    float v29 = fabsf(v20);
    if (v28 > v29 == fabsf(v26) > fabsf(v27) || (float)(v19 * v26) <= 0.0 || (float)(v20 * v27) <= 0.0) {
      goto LABEL_35;
    }
    int64x2_t v46 = v48;
    if (v28 <= v29)
    {
      double v36 = (float)(v24 * 0.5);
      BOOL v37 = v20 < 0.0;
      float v38 = v20 + 0.5;
      double v39 = v16 + -0.5;
      double v40 = v15 - v36;
      float v41 = v20 + -0.5;
      double v16 = v16 + 0.5;
      double v15 = v15 + v36;
      if (v37)
      {
        float v42 = v41;
      }
      else
      {
        double v16 = v39;
        float v42 = v38;
      }
      if (!v37) {
        double v15 = v40;
      }
      v49.f32[1] = 1.0 / v42;
      *(double *)v48.i64 = v15;
      *(double *)&v48.i64[1] = v16;
      float v43 = v17 - v15;
      if (fabsf(v43) > fabsf(v42))
      {
        v49.f32[0] = 1.0 / v43;
        *(float *)&uint64_t v50 = v42 * (float)(1.0 / v43);
      }
    }
    else
    {
      double v30 = (float)(v23 * 0.5);
      BOOL v37 = v19 < 0.0;
      float v31 = v19 + 0.5;
      double v32 = v15 + -0.5;
      double v33 = v16 - v30;
      float v34 = v19 + -0.5;
      double v15 = v15 + 0.5;
      double v16 = v16 + v30;
      if (!v37)
      {
        double v15 = v32;
        float v34 = v31;
        double v16 = v33;
      }
      v49.f32[0] = 1.0 / v34;
      *(double *)v48.i64 = v15;
      *(double *)&v48.i64[1] = v16;
      float v35 = v18 - v16;
      if (fabsf(v35) > fabsf(v34))
      {
        v49.f32[1] = 1.0 / v35;
        *((float *)&v50 + 1) = v34 * (float)(1.0 / v35);
      }
    }
    if (v14->i8[0])
    {
      int64x2_t v47 = v46;
      __n128 result = (uint64_t)line_to((float *)v12, &v49, v15, v16, *(double *)v46.i64, *(double *)&v46.i64[1]);
      *(int64x2_t *)(v12 + 72) = v45;
      *(int64x2_t *)(v12 + 8++*(_DWORD *)(result + 8) = v45;
    }
    else
    {
LABEL_35:
      if (v14->i8[0])
      {
        int64x2_t v44 = v45;
        int64x2_t *v10 = v45;
      }
      else
      {
        __n128 result = (uint64_t)line_to((float *)v12, &v49, v15, v16, v17, v18);
        int64x2_t *v10 = v48;
        int64x2_t v44 = v47;
      }
      *(int64x2_t *)float v8 = v44;
    }
    goto LABEL_39;
  }
  return result;
}

uint64_t aal_clip_edge(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = *a2;
  double v5 = a2[1];
  int v6 = (*a1 > 262143.0) | (4 * (*a1 < -262143.0)) | (2 * (v3 > 262143.0)) | (8 * (v3 < -262143.0));
  int v7 = (*a2 > 262143.0) | (4 * (*a2 < -262143.0)) | (2 * (v5 > 262143.0)) | (8 * (v5 < -262143.0));
  double v8 = v5 - v3;
  double v9 = *a2 - *a1;
  BOOL v10 = v7 == 0;
  while (1)
  {
    uint64_t v11 = v7 & v6;
    if ((v7 & v6) != 0) {
      return v11;
    }
    if (v6)
    {
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      BOOL v10 = 0;
      *a1 = v2;
      a1[1] = v3;
      double v9 = -v9;
      double v8 = -v8;
      double v2 = v4;
      double v3 = v5;
      int v6 = v7;
      int v7 = 0;
      if ((v6 & 4) == 0)
      {
LABEL_5:
        if (v6)
        {
          double v3 = v3 + (262143.0 - v2) * v8 / v9;
          int v6 = (2 * (v3 > 262143.0)) | (8 * (v3 < -262143.0));
          double v2 = 262143.0;
        }
        else if ((v6 & 2) != 0)
        {
          double v2 = v2 + v9 * (262143.0 - v3) / v8;
          int v6 = (v2 > 262143.0) | (4 * (v2 < -262143.0));
          double v3 = 262143.0;
        }
        else if ((v6 & 8) != 0)
        {
          double v2 = v2 + v9 * (-262143.0 - v3) / v8;
          int v6 = (v2 > 262143.0) | (4 * (v2 < -262143.0));
          double v3 = -262143.0;
        }
        goto LABEL_13;
      }
    }
    double v3 = v3 + (-262143.0 - v2) * v8 / v9;
    int v6 = (2 * (v3 > 262143.0)) | (8 * (v3 < -262143.0));
    double v2 = -262143.0;
LABEL_13:
    uint64_t v11 = v10 | v7 | v6;
    if (!v11)
    {
      *a2 = v2;
      a2[1] = v3;
      return v11;
    }
  }
}

float *line_to(float *result, float32x2_t *a2, double a3, double a4, double a5, double a6)
{
  float v6 = a3 - a5;
  float v7 = a4 - a6;
  if (fabsf(v6) <= fabsf(v7))
  {
    if (v7 != 0.0)
    {
      if (a4 <= a6)
      {
        float v6 = a5 - a3;
        double v9 = a6;
      }
      else
      {
        *a2 = vneg_f32(*a2);
        double v9 = a4;
        a4 = a6;
        a3 = a5;
      }
      unsigned int v19 = 2048;
      if (v6 != 0.0)
      {
        float v20 = v9 - a4;
        int v21 = (int)(sqrt((float)((float)(v20 * v20) + (float)(v6 * v6))) * a2->f32[1] * 0.5 * 4096.0 + 0.5);
        if (v21 <= 2048) {
          unsigned int v19 = 2048;
        }
        else {
          unsigned int v19 = v21;
        }
      }
      int v22 = (int)(a4 * 4096.0 + 0.5);
      int v23 = (int)(v9 * 4096.0 + 0.5);
      float v24 = (double)(int)(v22 & 0xFFFFF000) * 0.000244140625;
      float v25 = (double)(int)((v23 + 4095) & 0xFFFFF000) * 0.000244140625;
      float v26 = result[27];
      if (v26 <= v24) {
        float v26 = (double)(int)(v22 & 0xFFFFF000) * 0.000244140625;
      }
      float v27 = result[29];
      if (v27 >= v25) {
        float v27 = (double)(int)((v23 + 4095) & 0xFFFFF000) * 0.000244140625;
      }
      if (v26 < v27) {
        return (float *)draw_line((uint64_t)result, (int)v26, (int)v27, (int)v24, (int)v25 - 1, (int)((v26 - a4) * a2[1].f32[1] * 4096.0 + 0.5) + (int)(a3 * 4096.0 + 0.5), (int)(a2[1].f32[1] * 4096.0 + 0.5), (int)(a2[1].f32[0] * 4096.0 + 0.5), v19, v22, v23, 1);
      }
    }
  }
  else if (v6 != 0.0)
  {
    if (a3 <= a5)
    {
      float v7 = a6 - a4;
      double v8 = a5;
    }
    else
    {
      *a2 = vneg_f32(*a2);
      double v8 = a3;
      a4 = a6;
      a3 = a5;
    }
    unsigned int v10 = 2048;
    if (v7 != 0.0)
    {
      float v11 = v8 - a3;
      int v12 = (int)(sqrt((float)((float)(v7 * v7) + (float)(v11 * v11))) * a2->f32[0] * 0.5 * 4096.0 + 0.5);
      if (v12 <= 2048) {
        unsigned int v10 = 2048;
      }
      else {
        unsigned int v10 = v12;
      }
    }
    int v13 = (int)(a3 * 4096.0 + 0.5);
    int v14 = (int)(v8 * 4096.0 + 0.5);
    float v15 = (double)(int)(v13 & 0xFFFFF000) * 0.000244140625;
    float v16 = (double)(int)((v14 + 4095) & 0xFFFFF000) * 0.000244140625;
    float v17 = result[26];
    if (v17 <= v15) {
      float v17 = (double)(int)(v13 & 0xFFFFF000) * 0.000244140625;
    }
    float v18 = result[28];
    if (v18 >= v16) {
      float v18 = (double)(int)((v14 + 4095) & 0xFFFFF000) * 0.000244140625;
    }
    if (v17 < v18) {
      return (float *)draw_line((uint64_t)result, (int)v17, (int)v18, (int)v15, (int)v16 - 1, (int)((v17 - a3) * a2[1].f32[0] * 4096.0 + 0.5) + (int)(a4 * 4096.0 + 0.5), (int)(a2[1].f32[0] * 4096.0 + 0.5), (int)(a2[1].f32[1] * 4096.0 + 0.5), v10, v13, v14, 0);
    }
  }
  return result;
}

uint64_t draw_line(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, __int16 a10, int a11, char a12)
{
  int v13 = a2;
  uint64_t v92 = result;
  int v14 = a7 + a6;
  int v15 = ((a6 - a9) >> 4);
  int v16 = ((a9 + a6) >> 4);
  int v17 = (int)(a6 - a9) >> 12;
  int v18 = ((int)(a9 + a6 + 4095) >> 12) - 1;
  unsigned int v90 = a9 >> 3;
  if (a7 < 0)
  {
    if (a2 < a3)
    {
      int v87 = -a8;
      unsigned int v55 = (4096 - (a10 & 0xFFFu)) >> 4;
      int v56 = a11 - ((a11 - 1) & 0xFFFFF000);
      int v57 = v56 >> 4;
      unsigned int v89 = v56 >> 4;
      do
      {
        int v58 = ((v14 - a9) >> 4);
        int v59 = ((a9 + v14) >> 4);
        int v60 = (int)(v14 - a9) >> 12;
        int v61 = ((int)(a9 + v14 + 4095) >> 12) - 1;
        if (v18 == v60)
        {
          unsigned int v62 = (255 * v55) >> 8;
          if (a4 != v13) {
            LOWORD(v62) = 255;
          }
          if (a5 == v13) {
            LOBYTE(v62) = (unsigned __int16)(v62 * v89) >> 8;
          }
          int v63 = a4 == v13 || a5 == v13;
          char v95 = v62;
        }
        else if (v18 == v60 + 1)
        {
          unsigned int v64 = ((v15 + v58) >> 1) ^ 0xFF;
          int v65 = v90 - v64;
          int v66 = (int)((v90 - v64) * v55) >> 8;
          if (a4 == v13)
          {
            unsigned int v64 = (v64 * v55) >> 8;
            int v65 = v66;
          }
          if (a5 == v13)
          {
            LOBYTE(v64) = (unsigned __int16)(v64 * v57) >> 8;
            int v65 = (v65 * v57) >> 8;
          }
          int v63 = a4 == v13 || a5 == v13;
          char v95 = v64;
          if (v65 >= 255) {
            char v67 = -1;
          }
          else {
            char v67 = v65;
          }
          char v96 = v67;
        }
        else if (v18 == v60 + 2)
        {
          int v68 = ((v58 ^ 0xFF) * v87 * (v58 ^ 0xFF)) >> 21;
          if (v68 >= 255) {
            int v68 = 255;
          }
          int v69 = (v16 * v87 * v16) >> 21;
          if (v69 >= 255) {
            int v70 = 255;
          }
          else {
            int v70 = (v16 * v87 * v16) >> 21;
          }
          unsigned int v71 = (v16 + v59) >> 1;
          if (v18 != v61) {
            unsigned int v71 = v70;
          }
          unsigned int v72 = ((v15 + v58) >> 1) ^ 0xFF;
          if (v69 >= 255) {
            int v69 = 255;
          }
          if (v17 == v60)
          {
            int v68 = v72;
            unsigned int v71 = v69;
          }
          int v73 = v90 - v68 - v71;
          if (v73 >= 255) {
            int v73 = 255;
          }
          if (a4 == v13)
          {
            int v68 = (int)(v68 * v55) >> 8;
            unsigned int v71 = (int)(v71 * v55) >> 8;
            int v73 = (int)(v73 * v55) >> 8;
            int v74 = 1;
          }
          else
          {
            int v74 = 0;
          }
          if (a5 == v13)
          {
            LOBYTE(v6++*(_DWORD *)(result + 8) = (unsigned __int16)(v68 * v57) >> 8;
            LOBYTE(v71) = (unsigned __int16)(v71 * v57) >> 8;
          }
          char v95 = v68;
          if (a5 == v13) {
            char v75 = (unsigned __int16)(v73 * v57) >> 8;
          }
          else {
            char v75 = v73;
          }
          if (a5 == v13) {
            int v63 = 1;
          }
          else {
            int v63 = v74;
          }
          char v96 = v75;
          char v97 = v71;
        }
        else
        {
          int v76 = ((v58 ^ 0xFF) * v87 * (v58 ^ 0xFF)) >> 21;
          if (v76 >= 255) {
            int v76 = 255;
          }
          int v77 = (v16 * v87 * v16) >> 21;
          if (v77 >= 255) {
            int v77 = 255;
          }
          unsigned int v78 = (v16 + v59 + 255) >> 1;
          int v79 = v90 - (v76 + v78);
          if (v79 >= 255) {
            int v79 = 255;
          }
          int v80 = v78 - v77;
          if (v80 >= 255) {
            LOWORD(v80) = 255;
          }
          if (a4 == v13)
          {
            int v76 = (int)(v76 * v55) >> 8;
            int v77 = (int)(v77 * v55) >> 8;
            int v79 = (int)(v79 * v55) >> 8;
            int v80 = (int)(v79 * v55) >> 8;
            int v81 = 1;
          }
          else
          {
            int v81 = 0;
          }
          if (a5 == v13)
          {
            LOBYTE(v76) = (unsigned __int16)(v76 * v57) >> 8;
            LOBYTE(v77) = (unsigned __int16)(v77 * v57) >> 8;
            LOBYTE(v79) = (unsigned __int16)(v79 * v57) >> 8;
            int v63 = 1;
          }
          else
          {
            int v63 = v81;
          }
          char v95 = v76;
          char v96 = v79;
          if (a5 == v13) {
            char v82 = (unsigned __int16)(v80 * v57) >> 8;
          }
          else {
            char v82 = v80;
          }
          char v97 = v82;
          char v98 = v77;
        }
        if (a12)
        {
          int v83 = 1;
          int v84 = (int)(v14 - a9) >> 12;
          int v85 = v13;
        }
        else
        {
          int v83 = 0;
          int v84 = v13;
          int v85 = (int)(v14 - a9) >> 12;
        }
        __n128 result = aal_add_coverage_span(v92, v83, v84, v85, v18 - v60 + 1, (uint64_t)&v95, v63);
        ++v13;
        v14 += a7;
        int v18 = v61;
        int v17 = v60;
        int v16 = v59;
        int v15 = v58;
      }
      while (a3 != v13);
    }
  }
  else if (a2 < a3)
  {
    unsigned int v19 = (4096 - (a10 & 0xFFFu)) >> 4;
    int v20 = a11 - ((a11 - 1) & 0xFFFFF000);
    int v21 = v20 >> 4;
    unsigned int v88 = v20 >> 4;
    do
    {
      int v22 = ((v14 - a9) >> 4);
      int v23 = ((a9 + v14) >> 4);
      int v24 = (int)(v14 - a9) >> 12;
      int v25 = (int)(a9 + v14 + 4095) >> 12;
      int v26 = v25 - 1;
      int v27 = v25 - 1 - v17;
      if (v25 - 1 == v17)
      {
        unsigned int v28 = (255 * v19) >> 8;
        if (a4 != v13) {
          LOWORD(v2++*(_DWORD *)(result + 8) = 255;
        }
        if (a5 == v13) {
          LOBYTE(v2++*(_DWORD *)(result + 8) = (unsigned __int16)(v28 * v88) >> 8;
        }
        int v29 = a4 == v13 || a5 == v13;
        char v95 = v28;
      }
      else if (v25 == v17 + 2)
      {
        unsigned int v30 = ((v15 + v22) >> 1) ^ 0xFF;
        int v31 = v90 - v30;
        int v32 = (int)((v90 - v30) * v19) >> 8;
        if (a4 == v13)
        {
          unsigned int v30 = (v30 * v19) >> 8;
          int v31 = v32;
        }
        if (a5 == v13)
        {
          LOBYTE(v30) = (unsigned __int16)(v30 * v21) >> 8;
          int v31 = (v31 * v21) >> 8;
        }
        int v29 = a4 == v13 || a5 == v13;
        char v95 = v30;
        if (v31 >= 255) {
          char v33 = -1;
        }
        else {
          char v33 = v31;
        }
        char v96 = v33;
      }
      else if (v25 == v17 + 3)
      {
        int v34 = ((v15 ^ 0xFF) * a8 * (v15 ^ 0xFF)) >> 21;
        if (v34 >= 255) {
          int v34 = 255;
        }
        int v35 = (v23 * a8 * v23) >> 21;
        if (v35 >= 255) {
          int v36 = 255;
        }
        else {
          int v36 = (v23 * a8 * v23) >> 21;
        }
        unsigned int v37 = (v16 + v23) >> 1;
        if (v18 == v26) {
          int v38 = v37;
        }
        else {
          int v38 = v36;
        }
        unsigned int v39 = ((v15 + v22) >> 1) ^ 0xFF;
        if (v35 >= 255) {
          int v40 = 255;
        }
        else {
          int v40 = (v23 * a8 * v23) >> 21;
        }
        if (v17 == v24) {
          int v38 = v40;
        }
        else {
          unsigned int v39 = v34;
        }
        int v41 = v90 - v39 - v38;
        if (v41 >= 255) {
          int v41 = 255;
        }
        if (a4 == v13)
        {
          unsigned int v39 = (int)(v39 * v19) >> 8;
          int v38 = (int)(v38 * v19) >> 8;
          int v41 = (int)(v41 * v19) >> 8;
          int v42 = 1;
        }
        else
        {
          int v42 = 0;
        }
        if (a5 == v13)
        {
          LOBYTE(v39) = (unsigned __int16)(v39 * v21) >> 8;
          LOBYTE(v3++*(_DWORD *)(result + 8) = (unsigned __int16)(v38 * v21) >> 8;
        }
        char v95 = v39;
        if (a5 == v13) {
          char v43 = (unsigned __int16)(v41 * v21) >> 8;
        }
        else {
          char v43 = v41;
        }
        if (a5 == v13) {
          int v29 = 1;
        }
        else {
          int v29 = v42;
        }
        char v96 = v43;
        char v97 = v38;
      }
      else
      {
        int v44 = ((v15 ^ 0xFF) * a8 * (v15 ^ 0xFF)) >> 21;
        if (v44 >= 255) {
          int v44 = 255;
        }
        int v45 = (v23 * a8 * v23) >> 21;
        if (v45 >= 255) {
          int v45 = 255;
        }
        unsigned int v46 = (v16 + v23 + 255) >> 1;
        int v47 = v90 - (v44 + v46);
        if (v47 >= 255) {
          int v47 = 255;
        }
        int v48 = v46 - v45;
        if (v48 >= 255) {
          LOWORD(v4++*(_DWORD *)(result + 8) = 255;
        }
        if (a4 == v13)
        {
          int v44 = (int)(v44 * v19) >> 8;
          int v45 = (int)(v45 * v19) >> 8;
          int v47 = (int)(v47 * v19) >> 8;
          int v48 = (int)(v47 * v19) >> 8;
          int v49 = 1;
        }
        else
        {
          int v49 = 0;
        }
        if (a5 == v13)
        {
          LOBYTE(v44) = (unsigned __int16)(v44 * v21) >> 8;
          LOBYTE(v45) = (unsigned __int16)(v45 * v21) >> 8;
          LOBYTE(v47) = (unsigned __int16)(v47 * v21) >> 8;
          int v29 = 1;
        }
        else
        {
          int v29 = v49;
        }
        char v95 = v44;
        char v96 = v47;
        if (a5 == v13) {
          char v50 = (unsigned __int16)(v48 * v21) >> 8;
        }
        else {
          char v50 = v48;
        }
        char v97 = v50;
        char v98 = v45;
      }
      if (v27 >= 3) {
        int v51 = 3;
      }
      else {
        int v51 = v27;
      }
      if (v51 >= -1) {
        int v52 = v51 + 1;
      }
      else {
        int v52 = 0;
      }
      if (a12)
      {
        int v53 = 1;
        int v54 = v17;
        int v17 = v13;
      }
      else
      {
        int v53 = 0;
        int v54 = v13;
      }
      __n128 result = aal_add_coverage_span(v92, v53, v54, v17, v52, (uint64_t)&v95, v29);
      ++v13;
      v14 += a7;
      int v18 = v26;
      int v17 = v24;
      int v16 = v23;
      int v15 = v22;
    }
    while (a3 != v13);
  }
  return result;
}

uint64_t aal_add_coverage_span(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t v9 = result;
  if (a2)
  {
    if (*(_DWORD *)(result + 124) <= a4)
    {
      int v10 = *(_DWORD *)(result + 132);
      if (v10 > a4)
      {
        int v11 = *(_DWORD *)(result + 120);
        if (a5 + a3 > v11)
        {
          int v12 = *(_DWORD *)(result + 128);
          if (v12 > a3)
          {
            int v13 = v11 - a3;
            if (v11 <= a3) {
              int v13 = 0;
            }
            uint64_t v14 = v13;
            if (v11 <= a3) {
              int v15 = a3;
            }
            else {
              int v15 = *(_DWORD *)(result + 120);
            }
            int v16 = a5 - v13;
            int v17 = v12 - (v16 + v15);
            if (v12 >= v16 + v15) {
              int v17 = 0;
            }
            int v18 = v17 + v16;
            uint64_t v19 = *(void *)(result + 152) + *(void *)(result + 160) * (v10 + ~a4);
            int v20 = v15 - v11;
            if (v17 + v16 + v15 > v12) {
              __n128 result = puts("***** ERROR - aa_line writing outside of the mask");
            }
            uint64_t v21 = v19 + v20;
            unsigned int v22 = *(_DWORD *)(v9 + 192);
            BOOL v24 = v18 < 1 || v14 > 3;
            if (HIWORD(v22))
            {
              if (a7 == 1)
              {
                if (!v24)
                {
                  uint64_t v45 = 0;
                  do
                  {
                    unsigned int v46 = *(unsigned __int8 *)(a6 + v14 + v45) + *(unsigned __int8 *)(v21 + v45);
                    if (v46 >= 0xFF) {
                      LOBYTE(v46) = -1;
                    }
                    *(unsigned char *)(v21 + v45) = v46;
                    if ((int)v45 + 1 >= v18) {
                      break;
                    }
                    unint64_t v47 = v14 - 3 + v45++;
                  }
                  while (v47 >= 0xFFFFFFFFFFFFFFFCLL);
                }
              }
              else if (!v24)
              {
                uint64_t v65 = 0;
                do
                {
                  unsigned int v66 = *(unsigned __int8 *)(v21 + v65);
                  unsigned int v67 = *(unsigned __int8 *)(a6 + v14 + v65);
                  if (v67 <= v66) {
                    int v68 = *(unsigned __int8 *)(v21 + v65);
                  }
                  else {
                    int v68 = *(unsigned __int8 *)(a6 + v14 + v65);
                  }
                  unsigned int v69 = (v66 + v67 + 3 * v68 + 2) >> 2;
                  if (v69 >= 0xFF) {
                    LOBYTE(v69) = -1;
                  }
                  *(unsigned char *)(v21 + v65) = v69;
                  if ((int)v65 + 1 >= v18) {
                    break;
                  }
                  unint64_t v70 = v14 - 3 + v65++;
                }
                while (v70 >= 0xFFFFFFFFFFFFFFFCLL);
              }
            }
            else if (a7 == 1)
            {
              if (!v24)
              {
                uint64_t v25 = 0;
                do
                {
                  unsigned int v26 = *(unsigned __int8 *)(v21 + v25)
                      + ((v22 * *(unsigned __int8 *)(a6 + v14 + v25)) >> 16);
                  if (v26 >= 0xFF) {
                    LOBYTE(v26) = -1;
                  }
                  *(unsigned char *)(v21 + v25) = v26;
                  if ((int)v25 + 1 >= v18) {
                    break;
                  }
                  unint64_t v27 = v14 - 3 + v25++;
                }
                while (v27 >= 0xFFFFFFFFFFFFFFFCLL);
              }
            }
            else if (!v24)
            {
              uint64_t v51 = 0;
              do
              {
                unsigned int v52 = *(unsigned __int8 *)(v21 + v51);
                unsigned int v53 = v22 * *(unsigned __int8 *)(a6 + v14 + v51);
                unsigned int v54 = HIWORD(v53);
                unsigned int v55 = BYTE2(v53);
                if (v55 <= v52) {
                  unsigned int v55 = *(unsigned __int8 *)(v21 + v51);
                }
                unsigned int v56 = (v52 + v54 + 3 * v55 + 2) >> 2;
                if (v56 >= 0xFF) {
                  LOBYTE(v56) = -1;
                }
                *(unsigned char *)(v21 + v51) = v56;
                if ((int)v51 + 1 >= v18) {
                  break;
                }
                unint64_t v57 = v14 - 3 + v51++;
              }
              while (v57 >= 0xFFFFFFFFFFFFFFFCLL);
            }
          }
        }
      }
    }
  }
  else
  {
    int v28 = *(_DWORD *)(result + 120);
    BOOL v29 = __OFSUB__(a3, v28);
    int v30 = a3 - v28;
    if (v30 < 0 == v29 && *(_DWORD *)(result + 128) > a3)
    {
      int v31 = *(_DWORD *)(result + 124);
      if (a5 + a4 > v31)
      {
        int v32 = *(_DWORD *)(result + 132);
        if (v32 > a4)
        {
          int v33 = v31 - a4;
          if (v31 <= a4)
          {
            int v31 = a4;
            int v33 = 0;
          }
          int v34 = a5 - v33;
          uint64_t v35 = v33;
          int v36 = v32 - (a5 - v33 + v31);
          if (v32 >= v34 + v31) {
            int v36 = 0;
          }
          int v37 = v36 + v34;
          int v38 = (unsigned char *)(*(void *)(result + 152) + *(void *)(result + 160) * (v32 + ~v31) + v30);
          if (v36 + v34 + v31 > v32) {
            __n128 result = puts("***** ERROR - aa_line writing outside of the mask");
          }
          unsigned int v39 = *(_DWORD *)(v9 + 192);
          BOOL v41 = v37 < 1 || v35 > 3;
          if (HIWORD(v39))
          {
            if (a7 == 1)
            {
              if (!v41)
              {
                uint64_t v48 = 0;
                do
                {
                  unsigned int v49 = *(unsigned __int8 *)(a6 + v35 + v48) + *v38;
                  if (v49 >= 0xFF) {
                    LOBYTE(v49) = -1;
                  }
                  *int v38 = v49;
                  if ((int)v48 + 1 >= v37) {
                    break;
                  }
                  v38 -= *(void *)(v9 + 160);
                  unint64_t v50 = v35 - 3 + v48++;
                }
                while (v50 >= 0xFFFFFFFFFFFFFFFCLL);
              }
            }
            else if (!v41)
            {
              uint64_t v71 = 0;
              do
              {
                unsigned int v72 = *v38;
                unsigned int v73 = *(unsigned __int8 *)(a6 + v35 + v71);
                if (v73 <= v72) {
                  int v74 = *v38;
                }
                else {
                  int v74 = *(unsigned __int8 *)(a6 + v35 + v71);
                }
                unsigned int v75 = (v72 + v73 + 3 * v74 + 2) >> 2;
                if (v75 >= 0xFF) {
                  LOBYTE(v75) = -1;
                }
                *int v38 = v75;
                if ((int)v71 + 1 >= v37) {
                  break;
                }
                v38 -= *(void *)(v9 + 160);
                unint64_t v76 = v35 - 3 + v71++;
              }
              while (v76 > 0xFFFFFFFFFFFFFFFBLL);
            }
          }
          else if (a7 == 1)
          {
            if (!v41)
            {
              uint64_t v42 = 0;
              do
              {
                unsigned int v43 = *v38 + ((v39 * *(unsigned __int8 *)(a6 + v35 + v42)) >> 16);
                if (v43 >= 0xFF) {
                  LOBYTE(v43) = -1;
                }
                *int v38 = v43;
                if ((int)v42 + 1 >= v37) {
                  break;
                }
                v38 -= *(void *)(v9 + 160);
                unint64_t v44 = v35 - 3 + v42++;
              }
              while (v44 >= 0xFFFFFFFFFFFFFFFCLL);
            }
          }
          else if (!v41)
          {
            uint64_t v58 = 0;
            do
            {
              unsigned int v59 = *v38;
              unsigned int v60 = v39 * *(unsigned __int8 *)(a6 + v35 + v58);
              unsigned int v61 = HIWORD(v60);
              unsigned int v62 = BYTE2(v60);
              if (v62 <= v59) {
                unsigned int v62 = *v38;
              }
              unsigned int v63 = (v59 + v61 + 3 * v62 + 2) >> 2;
              if (v63 >= 0xFF) {
                LOBYTE(v63) = -1;
              }
              *int v38 = v63;
              if ((int)v58 + 1 >= v37) {
                break;
              }
              v38 -= *(void *)(v9 + 160);
              unint64_t v64 = v35 - 3 + v58++;
            }
            while (v64 >= 0xFFFFFFFFFFFFFFFCLL);
          }
        }
      }
    }
  }
  return result;
}

uint64_t aa_line_render_shape(uint64_t a1, void **a2, int a3, int a4, int a5, int a6, int a7)
{
  v132[0] = a3;
  long long v129 = 0uLL;
  if (!a2) {
    return 0;
  }
  float v8 = *(float *)(a1 + 52);
  float v9 = *(float *)(a1 + 64);
  BOOL v10 = v8 <= *(float *)(a1 + 60) && *(float *)(a1 + 56) <= v9;
  if (!v10 || 40 * *(_DWORD *)(a1 + 168) + 24 < 1) {
    return 0;
  }
  float v16 = *(float *)(a1 + 236);
  *(_DWORD *)(a1 + 120) = a4;
  *(_DWORD *)(a1 + 124) = a5;
  *(_DWORD *)(a1 + 12++*(_DWORD *)(result + 8) = a6;
  *(_DWORD *)(a1 + 132) = a7;
  unsigned int v17 = (int)fabsf(v16 * 65536.0);
  if (v17 >= 0x10000) {
    unsigned int v17 = 0x10000;
  }
  *(_DWORD *)(a1 + 192) = v17;
  unsigned int v18 = a7 - a5;
  size_t v19 = 16 * (a7 - a5);
  int v20 = (char *)malloc_type_malloc(v19, 0xD1AF96A2uLL);
  if (!v20)
  {
    BOOL v24 = "ERROR -- buckets could not be allocated";
    goto LABEL_109;
  }
  uint64_t v122 = v20;
  uint64_t v119 = a2;
  int v116 = a4;
  int v117 = a7;
  int v118 = a3;
  if (*(_DWORD *)(a1 + 120) == (__int16)*(_DWORD *)(a1 + 120)
    && *(_DWORD *)(a1 + 128) == (__int16)*(_DWORD *)(a1 + 128))
  {
    bzero(v20, v19);
    char v23 = 0;
  }
  else
  {
    if (a7 != a5)
    {
      if (v18 <= 1) {
        LODWORD(v21) = 1;
      }
      else {
        LODWORD(v21) = v18;
      }
      uint64_t v21 = (int)v21;
      unsigned int v22 = v20;
      do
      {
        *(_WORD *)unsigned int v22 = -1;
        *((void *)v22 + 1) = 0;
        v22 += 16;
        --v21;
      }
      while (v21);
    }
    char v23 = 1;
  }
  *(unsigned char *)(a1 + 232) = v23;
  long long v131 = 0uLL;
  long long v130 = 0uLL;
  uint64_t v25 = *(int *)(a1 + 124);
  uint64_t v26 = *(int *)(a1 + 132);
  uint64_t v27 = *(void *)(a1 + 176);
  if (!v27)
  {
LABEL_105:
    int v82 = v118 / 4;
    v132[0] = v118 / 4;
    int v83 = v119;
    int v84 = *v119;
    if (*v119)
    {
      int v85 = (__int16 *)v122;
      if (v118 > 35)
      {
        ptr = *v119;
LABEL_113:
        float v86 = fabsf(v16) * 0.5;
        unsigned int v87 = vcvtps_s32_f32(v9 + v86);
        int v88 = (v117 - v87) & ~((int)(v117 - v87) >> 31);
        CFRange v125 = (char *)v84 + 4;
        CFIndex v126 = (char *)v84 + 4;
        *int v84 = 0x280000000;
        unsigned int v89 = (int *)(v84 + 1);
        CFIndex v127 = (int *)(v84 + 1);
        if ((int)v26 > (int)v25)
        {
          unsigned int v90 = vcvtms_s32_f32(v8 - v86);
          unsigned int v91 = ((v90 - v116) & ~((int)(v90 - v116) >> 31)) - v116;
          int32x2_t v92 = vdup_n_s32(v91);
          uint64_t v93 = 16 * v26 - 16 * v25 - 8;
          while (1)
          {
            if (!aa_shape_size_check(*v83, &ptr, v132, &v127, &v126, &v125)) {
              goto LABEL_146;
            }
            --v26;
            uint64_t v94 = v127;
            char v95 = v127;
            *CFIndex v127 = v88;
            unsigned int v89 = v95 + 2;
            v94[1] = 2;
            CFIndex v126 = (char *)(v94 + 1);
            CFIndex v127 = v89;
            int v96 = v85[8 * (v26 - v25)];
            if (v96 < 0)
            {
              uint64_t v102 = *(void **)&v85[8 * (v26 - v25) + 4];
              if (v102)
              {
                while (1)
                {
                  int32x2_t v103 = (int32x2_t)v102[1];
                  if (!aa_shape_size_check(*v83, &ptr, v132, &v127, &v126, &v125)) {
                    break;
                  }
                  uint64_t v104 = v127;
                  unint64_t v105 = v127;
                  *(int32x2_t *)CFIndex v127 = vadd_s32(v92, v103);
                  CFIndex v127 = v105 + 2;
                  uint64_t v102 = (void *)*v102;
                  if (!v102)
                  {
                    unsigned int v89 = v104 + 2;
                    goto LABEL_126;
                  }
                }
LABEL_146:
                puts("ERROR -- shape allocation error");
                malloc_type_realloc(ptr, 0, 0x7492344AuLL);
                goto LABEL_142;
              }
            }
            else if (v85[8 * (v26 - v25)])
            {
              int v124 = v88;
              char v97 = v83;
              LOWORD(v9++*(_DWORD *)(result + 8) = 0;
              uint64_t v121 = v93;
              while (1)
              {
                int v99 = *(__int16 *)((char *)v85 + v93);
                int v100 = *(__int16 *)((char *)v85 + v93 + 2);
                if (!aa_shape_size_check(*v97, &ptr, v132, &v127, &v126, &v125)) {
                  break;
                }
                uint64_t v101 = v127;
                unsigned int v89 = v127 + 2;
                v127 += 2;
                *uint64_t v101 = v91 + v99;
                v101[1] = v91 + v100;
                int v98 = (__int16)(v98 + 1);
                v93 += 4;
                int v85 = (__int16 *)v122;
                if (v98 >= v96)
                {
                  int v83 = v97;
                  int v88 = v124;
                  uint64_t v93 = v121;
                  goto LABEL_126;
                }
              }
              puts("ERROR -- shape allocation error");
              malloc_type_realloc(ptr, 0, 0x7492344AuLL);
              uint64_t v115 = v122;
              goto LABEL_144;
            }
LABEL_126:
            uint64_t v106 = v126;
            int v107 = ((unint64_t)((char *)v89 - v126) >> 2) + 1;
            *(_DWORD *)CFIndex v126 = v107;
            CFRange v108 = v125;
            if (v125 && v107 == *(_DWORD *)v125)
            {
              if (v107 != 2)
              {
                uint64_t v109 = 4;
                while (&v106[v109] != (char *)v89)
                {
                  int v110 = *(_DWORD *)&v106[v109];
                  int v111 = *(_DWORD *)&v125[v109];
                  v109 += 4;
                  if (v110 != v111) {
                    goto LABEL_133;
                  }
                }
              }
              unsigned int v89 = (int *)(v106 - 4);
              CFIndex v126 = v125;
              CFIndex v127 = (int *)(v106 - 4);
            }
            else
            {
LABEL_133:
              CFRange v108 = v106;
            }
            CFRange v125 = v108;
            ++v88;
            v93 -= 16;
            if (v26 <= v25)
            {
              int v84 = ptr;
              break;
            }
          }
        }
        CFRange v112 = v89 + 2;
        *unsigned int v89 = v88;
        v89[1] = 2;
        uint64_t v113 = (char *)(v89 + 2) - (char *)v84;
        if (v132[0] <= v113 >> 2) {
          puts("failure");
        }
        *CFRange v112 = 0x7FFFFFFF;
        *int v83 = v84;
        if (*(unsigned char *)(a1 + 232)) {
          free_all_spans((void *)a1);
        }
        free(v85);
        return (v113 + 4);
      }
    }
    else
    {
      int v85 = (__int16 *)v122;
      if (v118 <= 255)
      {
        int v82 = 64;
        v132[0] = 64;
      }
      int v84 = malloc_type_realloc(0, (4 * v82 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
      ptr = v84;
      if (v84) {
        goto LABEL_113;
      }
    }
    puts("ERROR -- shape allocation error");
LABEL_142:
    uint64_t v115 = v85;
LABEL_144:
    free(v115);
    return 0;
  }
  int v28 = *(_DWORD *)(a1 + 120);
  int v29 = *(_DWORD *)(a1 + 128);
  while (1)
  {
    uint64_t v120 = (uint64_t *)v27;
    int v123 = *(_DWORD *)(v27 + 16);
    if (v123 >= 1) {
      break;
    }
LABEL_104:
    uint64_t v27 = *v120;
    if (!*v120) {
      goto LABEL_105;
    }
  }
  int v30 = 0;
  int v31 = (long long *)(v27 + 24);
  while (1)
  {
    if (v31[2]) {
      goto LABEL_32;
    }
    long long v32 = *v31;
    long long v130 = v31[1];
    long long v131 = v32;
    if (fabs(*(double *)&v32) > 262143.0
      || (double v33 = *((double *)&v131 + 1), fabs(*((double *)&v131 + 1)) > 262143.0)
      || (double v34 = *(double *)&v130, fabs(*(double *)&v130) > 262143.0)
      || (double v35 = *((double *)&v130 + 1), fabs(*((double *)&v130 + 1)) > 262143.0))
    {
      if (aal_clip_edge((double *)&v131, (double *)&v130)) {
        goto LABEL_32;
      }
      double v33 = *((double *)&v131 + 1);
      *(void *)&long long v32 = v131;
      double v35 = *((double *)&v130 + 1);
      double v34 = *(double *)&v130;
    }
    double v36 = *(double *)&v32 + -0.5;
    double v37 = v33 + -0.5;
    *(double *)&long long v131 = v36;
    *((double *)&v131 + 1) = v37;
    double v38 = v34 + -0.5;
    double v39 = v35 + -0.5;
    *(double *)&long long v130 = v34 + -0.5;
    *((double *)&v130 + 1) = v35 + -0.5;
    float v40 = v34 + -0.5 - v36;
    float v41 = v35 + -0.5 - v37;
    float v42 = -v40;
    if (v40 >= 0.0) {
      float v42 = v40;
    }
    float v43 = -v41;
    if (v41 >= 0.0) {
      float v43 = v41;
    }
    if (v42 <= v43) {
      break;
    }
    if (v36 > v38)
    {
      long long v44 = v130;
      long long v129 = v131;
      long long v130 = v131;
      long long v131 = v44;
      double v38 = *(double *)&v130;
      double v37 = *((double *)&v44 + 1);
      double v36 = *((double *)&v44 + 1);
    }
    float v45 = v36 + 0.5;
    int v46 = vcvtms_s32_f32(v45);
    float v47 = v38 + 0.5;
    unsigned int v48 = vcvtms_s32_f32(v47);
    float v49 = v41 / v40;
    float v50 = v37 + ((double)v46 - v36) * (float)(v41 / v40) + 0.5;
    signed int v51 = vcvtms_s32_f32(v50) - 1;
    if ((int)(v48 - *(char *)(a1 + 240)) >= v46)
    {
      int v67 = 0;
      int v68 = v48 - *(unsigned __int8 *)(a1 + 240) + 1;
      int v69 = v46;
      do
      {
        unsigned int v70 = vcvtms_s32_f32(v50);
        if (v51 == v70)
        {
          int v52 = v67 + 1;
        }
        else
        {
          int v52 = 1;
          if (v67 >= 1 && v51 >= (int)v25 && v51 < (int)v26 && v67 + v46 > v28 && v46 < v29)
          {
            if (v46 <= v28) {
              int v71 = v28;
            }
            else {
              int v71 = v46;
            }
            if (v46 >= v28) {
              int v72 = 0;
            }
            else {
              int v72 = v46 - v28;
            }
            int v73 = v67 + v72 + v71;
            if (v73 >= v29) {
              int v74 = v29;
            }
            else {
              int v74 = v73;
            }
            aal_insert_span(a1, (unsigned __int16 *)&v122[16 * (v51 - (int)v25)], v71, v74);
            int v52 = 1;
          }
          int v46 = v69;
          signed int v51 = v70;
        }
        ++v69;
        float v50 = v49 + v50;
        int v67 = v52;
      }
      while (v68 != v69);
    }
    else
    {
      int v52 = 0;
    }
    if (v52 >= 1)
    {
      BOOL v75 = v51 >= (int)v25 && v51 < (int)v26;
      BOOL v76 = !v75 || v52 + v46 <= v28;
      if (!v76 && v46 < v29)
      {
        int v78 = v46 <= v28 ? v28 : v46;
        int v79 = v46 >= v28 ? 0 : v46 - v28;
        int v80 = v52 + v79 + v78;
        int v81 = v80 >= v29 ? v29 : v80;
        if ((aal_insert_span(a1, (unsigned __int16 *)&v122[16 * (v51 - (int)v25)], v78, v81) & 1) == 0) {
          goto LABEL_108;
        }
      }
    }
LABEL_32:
    ++v30;
    int v31 = (long long *)((char *)v31 + 40);
    if (v30 == v123) {
      goto LABEL_104;
    }
  }
  if (v37 > v39)
  {
    long long v53 = v130;
    long long v129 = v131;
    long long v130 = v131;
    long long v131 = v53;
    double v39 = *((double *)&v130 + 1);
    double v37 = *((double *)&v53 + 1);
    double v36 = *((double *)&v53 + 1);
  }
  float v54 = v37 + 0.5;
  int v55 = vcvtms_s32_f32(v54);
  float v56 = v39 + 0.5;
  unsigned int v57 = vcvtms_s32_f32(v56);
  float v58 = v40 / v41;
  if (v41 == 0.0) {
    float v59 = 0.0;
  }
  else {
    float v59 = v58;
  }
  if ((int)(v57 - *(char *)(a1 + 240)) < v55) {
    goto LABEL_32;
  }
  float v60 = v36 + ((double)v55 - v37) * v59 + 0.5;
  uint64_t v61 = v55;
  unsigned int v62 = (unsigned __int16 *)&v122[16 * v55 + -16 * v25];
  int v63 = ~v57 + v55 + *(unsigned __int8 *)(a1 + 240);
  while (1)
  {
    if (v61 >= v25 && v61 < v26)
    {
      int v64 = vcvtms_s32_f32(v60);
      BOOL v65 = v28 > v64 || v29 <= v64;
      if (!v65 && (aal_insert_span(a1, v62, v64, v64 + 1) & 1) == 0) {
        break;
      }
    }
    ++v61;
    float v60 = v59 + v60;
    v62 += 8;
    if (__CFADD__(v63++, 1)) {
      goto LABEL_32;
    }
  }
LABEL_108:
  BOOL v24 = "ERROR -- shape allocation error";
LABEL_109:
  puts(v24);
  return 0;
}

uint64_t aal_insert_span(uint64_t a1, unsigned __int16 *a2, int a3, int a4)
{
  long long v37 = 0uLL;
  int v8 = *a2;
  if ((v8 & 0x8000) != 0) {
    goto LABEL_21;
  }
  float v9 = (__int16 *)(a2 + 4);
  if (v8 == 1)
  {
    int v11 = *v9;
    if (v11 <= a4)
    {
      int v26 = (__int16)a2[5];
      if (v26 >= a3)
      {
        if (v11 > a3) {
          *float v9 = a3;
        }
        if (v26 >= a4) {
          return 1;
        }
        goto LABEL_49;
      }
      a2[6] = a3;
      a2[7] = a4;
    }
    else
    {
      *((_DWORD *)a2 + 3) = *((_DWORD *)a2 + 2);
      a2[4] = a3;
      a2[5] = a4;
    }
    *a2 = 2;
    return 1;
  }
  if (!*a2)
  {
    a2[4] = a3;
    a2[5] = a4;
LABEL_5:
    uint64_t result = 1;
    *a2 = 1;
    return result;
  }
  int v12 = *v9;
  if (v12 > a4) {
    goto LABEL_12;
  }
  int v13 = (__int16)a2[7];
  if (v13 < a3) {
    goto LABEL_12;
  }
  int v14 = (__int16)a2[5];
  int v15 = (__int16)a2[6];
  if (v14 >= a3)
  {
    if (v15 <= a4)
    {
      unsigned __int16 v36 = a2[7];
      if (v12 > a3) {
        *float v9 = a3;
      }
      if (v13 < a4)
      {
        a2[7] = a4;
        unsigned __int16 v36 = a4;
      }
      a2[5] = v36;
      goto LABEL_5;
    }
    if (v12 > a3) {
      *float v9 = a3;
    }
    if (v14 >= a4) {
      return 1;
    }
LABEL_49:
    a2[5] = a4;
    return 1;
  }
  if (v15 <= a4)
  {
    if (v15 > a3) {
      a2[6] = a3;
    }
    if (v13 < a4) {
      a2[7] = a4;
    }
    return 1;
  }
LABEL_12:
  *(unsigned char *)(a1 + 232) = 1;
  long long v37 = *(_OWORD *)a2;
  *a2 = -1;
  *((void *)a2 + 1) = 0;
  if ((__int16)v37 < 1)
  {
LABEL_21:
    uint64_t v21 = *((void *)a2 + 1);
    if (!v21)
    {
      uint64_t result = (uint64_t)allocate_span((void *)a1);
      if (!result) {
        return result;
      }
      uint64_t v24 = result;
      *(_DWORD *)(result + ++*(_DWORD *)(result + 8) = a3;
      *(_DWORD *)(result + 12) = a4;
      *(void *)uint64_t result = 0;
LABEL_32:
      uint64_t result = 1;
      *((void *)a2 + 1) = v24;
      return result;
    }
    if (*(void *)v21)
    {
      int v22 = *(_DWORD *)(v21 + 12);
      if (v22 < a3)
      {
        while (1)
        {
          char v23 = (uint64_t *)v21;
          uint64_t v21 = *(void *)v21;
          if (!v21) {
            break;
          }
          int v22 = *(_DWORD *)(v21 + 12);
          if (v22 >= a3) {
            goto LABEL_37;
          }
        }
LABEL_38:
        uint64_t result = (uint64_t)allocate_span((void *)a1);
        if (!result) {
          return result;
        }
        *(_DWORD *)(result + ++*(_DWORD *)(result + 8) = a3;
        *(_DWORD *)(result + 12) = a4;
        if (v23)
        {
          *(void *)uint64_t result = *v23;
          uint64_t *v23 = result;
        }
        else
        {
          *(void *)uint64_t result = v21;
          *((void *)a2 + 1) = result;
        }
        return 1;
      }
      char v23 = 0;
LABEL_37:
      int v27 = *(_DWORD *)(v21 + 8);
      if (v27 > a4) {
        goto LABEL_38;
      }
      if (v27 == a4)
      {
LABEL_42:
        *(_DWORD *)(v21 + ++*(_DWORD *)(result + 8) = a3;
        return 1;
      }
      if (v22 >= a4)
      {
        if (v27 <= a3) {
          return 1;
        }
        goto LABEL_42;
      }
      int v30 = (uint64_t *)v21;
      do
      {
        int v31 = v30;
        int v30 = (uint64_t *)*v30;
      }
      while (v30 && *((_DWORD *)v30 + 2) <= a4);
      long long v32 = *(void **)v21;
      if (v30 != *(uint64_t **)v21)
      {
        if (v27 > a3) {
          *(_DWORD *)(v21 + ++*(_DWORD *)(result + 8) = a3;
        }
        int v33 = *((_DWORD *)v31 + 3);
        if (v33 <= a4) {
          int v33 = a4;
        }
        *(_DWORD *)(v21 + 12) = v33;
        *(void *)uint64_t v21 = v30;
        *int v31 = 0;
        double v34 = *(void **)(a1 + 216);
        do
        {
          double v35 = v32;
          long long v32 = (void *)*v32;
          *double v35 = v34;
          double v34 = v35;
        }
        while (v32);
        *(void *)(a1 + 216) = v35;
        return 1;
      }
      if (v27 >= a3) {
        *(_DWORD *)(v21 + ++*(_DWORD *)(result + 8) = a3;
      }
LABEL_85:
      *(_DWORD *)(v21 + 12) = a4;
      return 1;
    }
    int v25 = *(_DWORD *)(v21 + 8);
    if (v25 > a4)
    {
      uint64_t result = (uint64_t)allocate_span((void *)a1);
      if (!result) {
        return result;
      }
      uint64_t v24 = result;
      *(_DWORD *)(result + ++*(_DWORD *)(result + 8) = a3;
      *(_DWORD *)(result + 12) = a4;
      *(void *)uint64_t result = v21;
      goto LABEL_32;
    }
    int v28 = *(_DWORD *)(v21 + 12);
    if (v28 < a3)
    {
      uint64_t result = (uint64_t)allocate_span((void *)a1);
      if (result)
      {
        int v29 = (void *)result;
        *(_DWORD *)(result + ++*(_DWORD *)(result + 8) = a3;
        *(_DWORD *)(result + 12) = a4;
        *(void *)uint64_t v21 = result;
        uint64_t result = 1;
        *int v29 = 0;
      }
      return result;
    }
    if (v25 > a3) {
      *(_DWORD *)(v21 + ++*(_DWORD *)(result + 8) = a3;
    }
    if (v28 < a4) {
      goto LABEL_85;
    }
    return 1;
  }
  float v16 = 0;
  uint64_t v17 = (unsigned __int16)v37;
  unsigned int v18 = (__int16 *)((unint64_t)&v37 | 0xA);
  while (1)
  {
    uint64_t result = (uint64_t)allocate_span((void *)a1);
    if (!result) {
      return result;
    }
    int v19 = *v18;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 8) = *(v18 - 1);
    *(_DWORD *)(result + 12) = v19;
    *(void *)uint64_t result = 0;
    if (v16) {
      int v20 = v16;
    }
    else {
      int v20 = (uint64_t *)(a2 + 4);
    }
    if (!v16) {
      float v16 = (uint64_t *)result;
    }
    *int v20 = result;
    v18 += 2;
    if (!--v17) {
      goto LABEL_21;
    }
  }
}

unsigned char *aa_shape_size_check(unsigned char *a1, void **a2, int *a3, void *a4, void *a5, void *a6)
{
  float v6 = *a2;
  uint64_t v7 = *a3;
  if (((uint64_t)(*a4 - (void)*a2) >> 2) + 5 > v7)
  {
    size_t v14 = (8 * v7 + 511) & 0xFFFFFFFFFFFFFE00;
    if (v6 == a1)
    {
      float v16 = malloc_type_realloc(0, v14, 0x7492344AuLL);
      if (!v16) {
        return 0;
      }
      int v15 = v16;
      memmove(v16, a1, 4 * *a3);
    }
    else
    {
      int v15 = malloc_type_realloc(v6, v14, 0x7492344AuLL);
      if (!v15) {
        return 0;
      }
    }
    *a3 = 2 * v7;
    if (v15 != v6)
    {
      uint64_t v17 = (v15 - v6) >> 2;
      *a2 = v15;
      *a4 += 4 * v17;
      *a5 += 4 * v17;
      if (*a6) {
        *a6 += 4 * v17;
      }
      return v15;
    }
  }
  return v6;
}

void *free_all_spans(void *a1)
{
  uint64_t result = (void *)a1[28];
  if (result)
  {
    while (*result)
    {
      a1[28] = *result;
      free(result);
      uint64_t result = (void *)a1[28];
    }
    a1[25] = result + 1;
    a1[26] = result + 513;
    a1[27] = 0;
  }
  return result;
}

void *allocate_span(void *a1)
{
  uint64_t result = (void *)a1[25];
  if ((unint64_t)result >= a1[26])
  {
    uint64_t result = (void *)a1[27];
    if (result)
    {
      a1[27] = *result;
    }
    else
    {
      uint64_t result = malloc_type_malloc(0x1008uLL, 0x1020040EF3C788CuLL);
      if (result)
      {
        double v3 = result++;
        *double v3 = a1[28];
        a1[28] = v3;
        a1[25] = v3 + 3;
        a1[26] = v3 + 513;
      }
    }
  }
  else
  {
    a1[25] = result + 2;
  }
  return result;
}

void aal_stroke_iterate(uint64_t a1, int a2, double *a3, float64x2_t a4)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case -3:
      double v5 = *a3;
      if (*a3 <= 3.40282347e38)
      {
        BOOL v14 = v5 < -3.40282347e38;
        float v6 = v5;
        if (v14) {
          float v6 = -3.4028e38;
        }
      }
      else
      {
        float v6 = 3.4028e38;
      }
      double v126 = a3[1];
      if (v126 > 3.40282347e38)
      {
        int v127 = 2139095039;
LABEL_131:
        float v131 = *(float *)&v127;
        goto LABEL_148;
      }
      if (v126 < -3.40282347e38)
      {
        int v127 = -8388609;
        goto LABEL_131;
      }
      float v131 = v126;
LABEL_148:
      double v142 = a3[2];
      if (v142 > 3.40282347e38)
      {
        int v143 = 2139095039;
LABEL_152:
        float v144 = *(float *)&v143;
        goto LABEL_154;
      }
      if (v142 < -3.40282347e38)
      {
        int v143 = -8388609;
        goto LABEL_152;
      }
      float v144 = v142;
LABEL_154:
      double v145 = a3[3];
      if (v145 <= 3.40282347e38)
      {
        float v146 = -3.4028e38;
        BOOL v14 = v145 < -3.40282347e38;
        float v147 = v145;
        if (!v14) {
          float v146 = v147;
        }
      }
      else
      {
        float v146 = 3.4028e38;
      }
      *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
      float v148 = *(float *)(a1 + 144);
      BOOL v149 = v148 == 0.0;
      float v150 = v148 * v6;
      float v151 = v148 * v131;
      float v152 = v148 * v144;
      float v153 = v148 * v146;
      if (v149) {
        float v154 = v6;
      }
      else {
        float v154 = v150;
      }
      if (v149) {
        float v155 = v131;
      }
      else {
        float v155 = v151;
      }
      if (v149) {
        float v156 = v144;
      }
      else {
        float v156 = v152;
      }
      if (v149) {
        float v157 = v146;
      }
      else {
        float v157 = v153;
      }
      double v158 = v155;
      *(double *)a1 = v154;
      *(double *)(a1 + ++*(_DWORD *)(result + 8) = v155;
      *(double *)(a1 + 16) = v154;
      *(double *)(a1 + 24) = v155;
      if (v154 == v156 && v155 == v157)
      {
        float v159 = fabsf(*(float *)(a1 + 236));
        if (v154 > (float)(*(float *)(a1 + 104) - v159)
          && v154 < (float)(v159 + *(float *)(a1 + 112))
          && v155 > (float)(*(float *)(a1 + 108) - v159)
          && v155 < (float)(v159 + *(float *)(a1 + 116)))
        {
          uint64_t v160 = aal_new_edge(a1);
          if (v160)
          {
            *(double *)uint64_t v160 = (float)(v154 - (float)(v159 * 0.4));
            *(double *)(v160 + ++*(_DWORD *)(result + 8) = v158;
            *(double *)(v160 + 16) = (float)(v154 + (float)(v159 * 0.4));
            *(double *)(v160 + 24) = v158;
            *(_DWORD *)(v160 + 32) = 0;
            if (v154 < *(float *)(a1 + 52))
            {
              float v161 = *(float *)(a1 + 104);
              if (v154 >= v161) {
                float v161 = v154;
              }
              *(float *)(a1 + 52) = v161;
            }
            if (v154 > *(float *)(a1 + 60))
            {
              float v162 = *(float *)(a1 + 112);
              if (v154 <= v162) {
                float v162 = v154;
              }
              *(float *)(a1 + 60) = v162;
            }
            if (v155 < *(float *)(a1 + 56))
            {
              float v163 = *(float *)(a1 + 108);
              if (v155 >= v163) {
                float v163 = v155;
              }
              *(float *)(a1 + 56) = v163;
            }
            if (v155 > *(float *)(a1 + 64))
            {
              float v164 = *(float *)(a1 + 116);
              if (v155 <= v164) {
                float v164 = v155;
              }
              *(float *)(a1 + 64) = v164;
            }
          }
        }
      }
      else
      {
        aal_add_point(a1, v156, v155);
        aal_add_point(a1, v156, v157);
        aal_add_point(a1, v154, v157);
        aal_close(a1, v165);
        *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
      }
      return;
    case 0:
      double v7 = *a3;
      if (*a3 <= 3.40282347e38)
      {
        BOOL v14 = v7 < -3.40282347e38;
        float v8 = v7;
        if (v14) {
          float v8 = -3.4028e38;
        }
      }
      else
      {
        float v8 = 3.4028e38;
      }
      double v128 = a3[1];
      if (v128 <= 3.40282347e38)
      {
        float v129 = -3.4028e38;
        BOOL v14 = v128 < -3.40282347e38;
        float v132 = v128;
        if (!v14) {
          float v129 = v132;
        }
      }
      else
      {
        float v129 = 3.4028e38;
      }
      *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
      float v133 = *(float *)(a1 + 144);
      if (v133 == 0.0) {
        float v133 = 1.0;
      }
      double v134 = (float)(v8 * v133);
      double v135 = (float)(v129 * v133);
      *(double *)a1 = v134;
      *(double *)(a1 + ++*(_DWORD *)(result + 8) = v135;
      *(double *)(a1 + 16) = v134;
      *(double *)(a1 + 24) = v135;
      return;
    case 1:
      double v9 = *a3;
      if (*a3 > 3.40282347e38)
      {
        int v10 = 2139095039;
LABEL_128:
        float v130 = *(float *)&v10;
        goto LABEL_138;
      }
      if (v9 < -3.40282347e38)
      {
        int v10 = -8388609;
        goto LABEL_128;
      }
      float v130 = v9;
LABEL_138:
      double v136 = a3[1];
      if (v136 <= 3.40282347e38)
      {
        float v137 = -3.4028e38;
        BOOL v14 = v136 < -3.40282347e38;
        float v138 = v136;
        if (!v14) {
          float v137 = v138;
        }
      }
      else
      {
        float v137 = 3.4028e38;
      }
      float v139 = *(float *)(a1 + 144);
      if (v139 == 0.0) {
        float v139 = 1.0;
      }
      float v140 = v130 * v139;
      float v141 = v137 * v139;
      aal_add_point(a1, v140, v141);
      return;
    case 2:
      double v11 = *a3;
      double v12 = 3.40282347e38;
      double v13 = 3.40282347e38;
      if (*a3 <= 3.40282347e38)
      {
        BOOL v14 = v11 < -3.40282347e38;
        float v15 = v11;
        double v16 = v15;
        if (v14) {
          double v13 = -3.40282347e38;
        }
        else {
          double v13 = v16;
        }
      }
      double v17 = a3[1];
      double v18 = 3.40282347e38;
      if (v17 <= 3.40282347e38)
      {
        BOOL v14 = v17 < -3.40282347e38;
        float v19 = v17;
        double v20 = v19;
        if (v14) {
          double v18 = -3.40282347e38;
        }
        else {
          double v18 = v20;
        }
      }
      double v21 = a3[2];
      double v22 = 3.40282347e38;
      if (v21 <= 3.40282347e38)
      {
        BOOL v14 = v21 < -3.40282347e38;
        float v23 = v21;
        double v24 = v23;
        if (v14) {
          double v22 = -3.40282347e38;
        }
        else {
          double v22 = v24;
        }
      }
      double v25 = a3[3];
      if (v25 <= 3.40282347e38)
      {
        BOOL v14 = v25 < -3.40282347e38;
        float v26 = v25;
        double v27 = v26;
        if (v14) {
          double v12 = -3.40282347e38;
        }
        else {
          double v12 = v27;
        }
      }
      float v28 = *(float *)(a1 + 144);
      double v29 = *(float *)(a1 + 136) * 16.0;
      double v30 = *(float *)(a1 + 140) * 16.0;
      double v31 = 0.00390625;
      if (v29 >= 0.00390625)
      {
        double v31 = *(float *)(a1 + 136) * 16.0;
        if (v29 > 262144.0) {
          double v31 = 262144.0;
        }
      }
      double v32 = v28;
      double v33 = 0.00390625;
      if (v30 >= 0.00390625)
      {
        double v33 = *(float *)(a1 + 140) * 16.0;
        if (v30 > 262144.0) {
          double v33 = 262144.0;
        }
      }
      int v34 = 0;
      double v35 = *(double *)a1;
      double v36 = *(double *)(a1 + 8);
      double v37 = fabsf(*(float *)(a1 + 236));
      double v38 = *(float *)(a1 + 104) - v37;
      double v39 = *(float *)(a1 + 108) - v37;
      double v40 = v37 + *(float *)(a1 + 112);
      double v41 = v37 + *(float *)(a1 + 116);
      BOOL v55 = v28 == 0.0;
      double v42 = v13 * v32;
      double v43 = v18 * v32;
      double v44 = v22 * v32;
      double v45 = v12 * v32;
      if (!v55)
      {
        double v13 = v42;
        double v22 = v44;
        double v18 = v43;
        double v12 = v45;
      }
      int v46 = (double *)v166;
      while (2)
      {
        if (v34 > 22) {
          goto LABEL_49;
        }
        double v47 = v18 + v18;
        double v48 = v13 + v13;
        int v49 = (v35 > v40) | (4 * (v35 < v38)) | (2 * (v36 > v41)) | (8 * (v36 < v39));
        while (2)
        {
          double v50 = v22;
          double v51 = v12;
          double v52 = v35 + v22;
          if ((v52 - v48) * (v52 - v48) <= v31 && (v36 + v51 - v47) * (v36 + v51 - v47) <= v33)
          {
            double v12 = v51;
LABEL_49:
            float v56 = v22;
            float v57 = v12;
            aal_add_point(a1, v56, v57);
            if (!v34) {
              return;
            }
          }
          else
          {
            if (!v49
              || ((int v54 = (v22 > v40) | (4 * (v22 < v38)) | (2 * (v51 > v41)) | (8 * (v51 < v39))) != 0
                ? (BOOL v55 = v49 == v54)
                : (BOOL v55 = 0),
                  !v55 || v49 != ((v13 > v40) | (4 * (v13 < v38)) | (2 * (v18 > v41)) | (8 * (v18 < v39)))))
            {
              v46[4] = v22;
              v46[5] = v51;
              double v22 = (v48 + v52) * 0.25;
              double v12 = (v47 + v36 + v51) * 0.25;
              *int v46 = v22;
              v46[1] = v12;
              v46[2] = (v13 + v50) * 0.5;
              v46[3] = (v18 + v51) * 0.5;
              v46 += 6;
              ++v34;
              double v13 = (v35 + v13) * 0.5;
              double v18 = (v36 + v18) * 0.5;
              double v48 = v13 + v13;
              double v47 = v18 + v18;
              if (v34 == 23) {
                goto LABEL_49;
              }
              continue;
            }
            float v58 = v22;
            float v59 = v51;
            double v60 = v58;
            double v61 = v59;
            *(double *)a1 = v60;
            *(double *)(a1 + ++*(_DWORD *)(result + 8) = v61;
            int v62 = *(_DWORD *)(a1 + 48);
            if (!v62)
            {
              *(double *)(a1 + 32) = v60;
              *(double *)(a1 + 40) = v61;
            }
            *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = v62 + 1;
            if (!v34) {
              return;
            }
          }
          break;
        }
        double v35 = *(v46 - 6);
        double v36 = *(v46 - 5);
        v46 -= 6;
        double v13 = v46[2];
        double v18 = v46[3];
        --v34;
        double v22 = v46[4];
        double v12 = v46[5];
        continue;
      }
    case 3:
      double v63 = *a3;
      double v64 = 3.40282347e38;
      double v65 = 3.40282347e38;
      if (*a3 <= 3.40282347e38)
      {
        double v65 = -3.40282347e38;
        if (v63 >= -3.40282347e38)
        {
          float v66 = v63;
          double v65 = v66;
        }
      }
      double v67 = a3[1];
      double v68 = 3.40282347e38;
      if (v67 <= 3.40282347e38)
      {
        double v68 = -3.40282347e38;
        if (v67 >= -3.40282347e38)
        {
          float v69 = v67;
          double v68 = v69;
        }
      }
      double v70 = a3[2];
      double v71 = 3.40282347e38;
      if (v70 <= 3.40282347e38)
      {
        double v71 = -3.40282347e38;
        if (v70 >= -3.40282347e38)
        {
          float v72 = v70;
          double v71 = v72;
        }
      }
      double v73 = a3[3];
      double v74 = 3.40282347e38;
      if (v73 <= 3.40282347e38)
      {
        double v74 = -3.40282347e38;
        if (v73 >= -3.40282347e38)
        {
          float v75 = v73;
          double v74 = v75;
        }
      }
      double v76 = a3[4];
      double v77 = 3.40282347e38;
      if (v76 <= 3.40282347e38)
      {
        double v77 = -3.40282347e38;
        if (v76 >= -3.40282347e38)
        {
          float v78 = v76;
          double v77 = v78;
        }
      }
      double v79 = a3[5];
      if (v79 <= 3.40282347e38)
      {
        double v64 = -3.40282347e38;
        if (v79 >= -3.40282347e38)
        {
          float v80 = v79;
          double v64 = v80;
        }
      }
      float v81 = *(float *)(a1 + 144);
      double v82 = *(float *)(a1 + 136) * 1.77777778;
      double v83 = *(float *)(a1 + 140) * 1.77777778;
      double v84 = 0.00390625;
      if (v82 >= 0.00390625)
      {
        double v84 = *(float *)(a1 + 136) * 1.77777778;
        if (v82 > 262144.0) {
          double v84 = 262144.0;
        }
      }
      double v85 = v81;
      double v86 = 0.00390625;
      if (v83 >= 0.00390625)
      {
        double v86 = *(float *)(a1 + 140) * 1.77777778;
        if (v83 > 262144.0) {
          double v86 = 262144.0;
        }
      }
      int v87 = 0;
      double v88 = *(double *)a1;
      double v89 = *(double *)(a1 + 8);
      double v90 = fabsf(*(float *)(a1 + 236));
      double v91 = *(float *)(a1 + 104) - v90;
      double v92 = *(float *)(a1 + 108) - v90;
      double v93 = v90 + *(float *)(a1 + 112);
      double v94 = v90 + *(float *)(a1 + 116);
      BOOL v95 = v81 == 0.0;
      double v96 = v65 * v85;
      double v97 = v68 * v85;
      double v98 = v71 * v85;
      double v99 = v74 * v85;
      double v100 = v77 * v85;
      double v101 = v64 * v85;
      if (v95) {
        double v96 = v65;
      }
      else {
        double v71 = v98;
      }
      if (v95) {
        double v102 = v77;
      }
      else {
        double v102 = v100;
      }
      if (!v95)
      {
        double v68 = v97;
        double v74 = v99;
        double v64 = v101;
      }
      int32x2_t v103 = (double *)v166;
      double v104 = 0.125;
      while (2)
      {
        if (v87 > 22) {
          goto LABEL_109;
        }
        double v105 = v68 + v64;
        double v106 = v96 + v102;
        double v107 = v74 + v74;
        double v108 = v71 + v71;
        double v109 = v68 + v68;
        double v110 = v96 + v96;
        int v111 = (v88 > v93) | (4 * (v88 < v91)) | (2 * (v89 > v94)) | (8 * (v89 < v92));
LABEL_90:
        double v112 = v88 + v71;
        double v113 = v89 + v74;
        if ((v88 + v71 - v110) * (v88 + v71 - v110) <= v84
          && (v89 + v74 - v109) * (v89 + v74 - v109) <= v86
          && (v106 - v108) * (v106 - v108) <= v84
          && (v105 - v107) * (v105 - v107) <= v86)
        {
LABEL_109:
          float v119 = v102;
          float v120 = v64;
          aal_add_point(a1, v119, v120);
          double v104 = 0.125;
          if (!v87) {
            return;
          }
LABEL_110:
          double v88 = *(v103 - 8);
          double v89 = *(v103 - 7);
          v103 -= 8;
          double v96 = v103[2];
          double v68 = v103[3];
          --v87;
          double v71 = v103[4];
          double v74 = v103[5];
          double v102 = v103[6];
          double v64 = v103[7];
          continue;
        }
        break;
      }
      if (!v111
        || ((int v117 = (v102 > v93) | (4 * (v102 < v91)) | (2 * (v64 > v94)) | (8 * (v64 < v92))) != 0
          ? (BOOL v118 = v111 == v117)
          : (BOOL v118 = 0),
            !v118
         || v111 != ((v96 > v93) | (4 * (v96 < v91)) | (2 * (v68 > v94)) | (8 * (v68 < v92)))
         || v111 != ((v71 > v93) | (4 * (v71 < v91)) | (2 * (v74 > v94)) | (8 * (v74 < v92)))))
      {
        v103[6] = v102;
        v103[7] = v64;
        v103[4] = (v71 + v102) * 0.5;
        v103[5] = (v74 + v64) * 0.5;
        double v102 = (v108 + v110 + v112 + v106) * v104;
        double v64 = (v107 + v109 + v113 + v105) * v104;
        v103[2] = (v108 + v106) * 0.25;
        v103[3] = (v107 + v105) * 0.25;
        double v71 = (v110 + v112) * 0.25;
        double v74 = (v109 + v113) * 0.25;
        double *v103 = v102;
        v103[1] = v64;
        v103 += 8;
        double v96 = (v88 + v96) * 0.5;
        double v68 = (v89 + v68) * 0.5;
        ++v87;
        double v110 = v96 + v96;
        double v109 = v68 + v68;
        double v108 = v71 + v71;
        double v107 = v74 + v74;
        double v106 = v96 + v102;
        double v105 = v68 + v64;
        if (v87 == 23) {
          goto LABEL_109;
        }
        goto LABEL_90;
      }
      float v121 = v102;
      float v122 = v64;
      double v123 = v121;
      double v124 = v122;
      *(double *)a1 = v123;
      *(double *)(a1 + ++*(_DWORD *)(result + 8) = v124;
      int v125 = *(_DWORD *)(a1 + 48);
      if (!v125)
      {
        *(double *)(a1 + 32) = v123;
        *(double *)(a1 + 40) = v124;
      }
      *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = v125 + 1;
      if (v87) {
        goto LABEL_110;
      }
      return;
    case 4:
      aal_close(a1, a4);
      return;
    default:
      abort();
  }
}

float64x2_t aal_stroke_begin(uint64_t a1, float64x2_t *a2)
{
  if (a2)
  {
    float64x2_t v2 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 236)), 0);
    float64x2_t v3 = vsubq_f64(*a2, v2);
    float64x2_t result = vaddq_f64(a2[1], v2);
    *a2 = v3;
    a2[1] = result;
  }
  return result;
}

uint64_t CMYKf_sample_CMYK32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(result + 40);
  uint64_t v7 = *(void *)(result + 176);
  uint64_t v87 = *(void *)(result + 80);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v101 = *(void *)(result + 120);
  uint64_t v102 = *(void *)(result + 112);
  uint64_t v8 = *(void *)(result + 152) - 20;
  uint64_t v91 = *(void *)(result + 144) - 1;
  uint64_t v9 = 0xFF00000000;
  if (v6) {
    uint64_t v9 = 0;
  }
  uint64_t v96 = v9;
  int v10 = *(_DWORD *)(result + 260) - 1;
  int v99 = *(_DWORD *)(result + 24);
  uint64_t v95 = *(void *)(result + 32);
  uint64_t v11 = (*(_DWORD *)(result + 256) - 1);
  int v86 = *(_DWORD *)(result + 188);
  int v93 = *(_DWORD *)(result + 28);
  double v94 = (unsigned __int8 *)(v6 + v11 + (v10 * v93));
  unint64_t v100 = v95 + (v10 * v99) + 4 * v11 - 4;
  uint64_t v89 = *(void *)(result + 64);
  uint64_t v90 = *(void *)(result + 72);
  uint64_t v97 = *(void *)(result + 40);
  uint64_t v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        uint64_t v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        uint64_t v24 = a3;
        int v15 = a4;
        uint64_t v16 = v89;
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v88;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        int v15 = a4;
        uint64_t v16 = v89;
        if (v20 < 1) {
          goto LABEL_40;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v23 = v21 | v86;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(result + 216);
      uint64_t v13 = v90 - *(void *)(result + 224);
      uint64_t v14 = a3 - v13 + (v12 >> 1);
      int v15 = a4;
      uint64_t v16 = v89;
      if (v14 < 1) {
        goto LABEL_40;
      }
      if (v14 >= v12) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v14) >> 32;
      }
      unsigned int v23 = v17 | v86;
      uint64_t v24 = v13 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v28 = a2;
      }
      else
      {
        uint64_t v30 = *(void *)(result + 192);
        uint64_t v31 = *(void *)(result + 200) + v87;
        uint64_t v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1) {
          goto LABEL_40;
        }
        if (v32 < v30) {
          unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v86;
        }
        uint64_t v28 = v31 - 0x1000000;
        uint64_t v29 = 28;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(result + 192);
      uint64_t v26 = v16 - *(void *)(result + 200);
      uint64_t v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1) {
        goto LABEL_40;
      }
      if (v27 < v25) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v86;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
    }
    if (v23 >= 0x400000) {
      break;
    }
LABEL_40:
    int v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    v8 += 20;
    *(unsigned char *)++uint64_t v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42) {
      return result;
    }
  }
  uint64_t v33 = v24 >> 32;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  double v36 = *(unsigned int **)(result + 32);
  double v37 = (unsigned int *)v100;
  if (v100 >= v35) {
    double v37 = (unsigned int *)v35;
  }
  if (v37 < v36) {
    double v37 = *(unsigned int **)(result + 32);
  }
  unint64_t v38 = bswap32(*v37);
  if (v6)
  {
    unint64_t v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    double v40 = *(unsigned __int8 **)(result + 40);
    double v41 = v94;
    unint64_t v92 = v39;
    if ((unint64_t)v94 >= v39) {
      double v41 = (unsigned __int8 *)v39;
    }
    if (v41 >= v40) {
      double v40 = v41;
    }
    v38 |= (unint64_t)*v40 << 32;
    if (!v7) {
      goto LABEL_102;
    }
  }
  else
  {
    unint64_t v92 = 0;
    if (!v7) {
      goto LABEL_102;
    }
  }
  unsigned int v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  int v44 = v43 & 0xF;
  int v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    double v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67) {
      double v67 = (unsigned int *)v100;
    }
    if (v67 >= v36) {
      double v36 = v67;
    }
    unint64_t v68 = bswap32(*v36);
    if (v6)
    {
      float v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69) {
        float v69 = v94;
      }
      if ((unint64_t)v69 < *(void *)(result + 40)) {
        float v69 = *(unsigned __int8 **)(result + 40);
      }
      v68 |= (unint64_t)*v69 << 32;
    }
    uint64_t v70 = interpolate_cif10a[v45];
    char v71 = v45 + 1;
    unint64_t v65 = v38 - ((v70 & v38) >> v71);
    unint64_t v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      double v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73) {
        double v73 = (unsigned int *)v100;
      }
      if (v73 >= v36) {
        double v36 = v73;
      }
      uint64_t v74 = bswap32(*v36);
      if (v6)
      {
        float v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75) {
          float v75 = v94;
        }
        if ((unint64_t)v75 < *(void *)(result + 40)) {
          float v75 = *(unsigned __int8 **)(result + 40);
        }
        v74 |= (unint64_t)*v75 << 32;
      }
      int v76 = (v43 >> 28) & 3;
      uint64_t v77 = interpolate_cif10a[v76];
      char v64 = v76 + 1;
      unint64_t v65 = v38 - ((v77 & v38) >> v64);
      unint64_t v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3) {
        goto LABEL_102;
      }
      int64_t v46 = (unint64_t)HIWORD(v43) << 56;
      double v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47) {
        double v47 = (unsigned int *)v100;
      }
      if (v47 < v36) {
        double v47 = v36;
      }
      unint64_t v48 = bswap32(*v47);
      unint64_t v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49) {
        double v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      }
      else {
        double v50 = (unsigned int *)v100;
      }
      if (v50 < v36) {
        double v50 = v36;
      }
      unint64_t v51 = bswap32(*v50);
      double v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52) {
        double v52 = (unsigned int *)v100;
      }
      if (v52 >= v36) {
        double v36 = v52;
      }
      unint64_t v53 = bswap32(*v36);
      if (v6)
      {
        int v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        unint64_t v55 = *(void *)(result + 40);
        if (v94 < v54) {
          int v54 = v94;
        }
        if ((unint64_t)v54 < v55) {
          int v54 = *(unsigned __int8 **)(result + 40);
        }
        v48 |= (unint64_t)*v54 << 32;
        unint64_t v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56) {
          float v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        }
        else {
          float v57 = v94;
        }
        if ((unint64_t)v57 < v55) {
          float v57 = *(unsigned __int8 **)(result + 40);
        }
        v51 |= (unint64_t)*v57 << 32;
        float v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58) {
          float v58 = v94;
        }
        if ((unint64_t)v58 < v55) {
          float v58 = *(unsigned __int8 **)(result + 40);
        }
        v53 |= (unint64_t)*v58 << 32;
      }
      uint64_t v59 = interpolate_cif10a[v45];
      char v60 = v45 + 1;
      unint64_t v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      int v62 = (v43 >> 28) & 3;
      unint64_t v63 = interpolate_cif10a[v62];
      char v64 = v62 + 1;
      unint64_t v65 = v61 - ((v61 & v63) >> v64);
      unint64_t v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    unint64_t v72 = v66 >> v64;
  }
  unint64_t v38 = v65 + v72;
LABEL_102:
  uint64_t v78 = 0;
  v8 += 20;
  int v85 = v15;
  int v79 = v15 - 1;
  a3 += v101;
  uint64_t v80 = v88 - a3;
  a2 += v102;
  uint64_t v81 = v87 - a2;
  while (1)
  {
    CMYK32(v8, v38 | v96);
    *(unsigned char *)(v91 + 1 + v7++*(_DWORD *)(result + 8) = v23 >> 22;
    uint64_t v6 = v97;
    float64x2_t result = v98;
    if (v79 == v78) {
      return result;
    }
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      int v42 = ~v78 + v85;
      goto LABEL_41;
    }
    unint64_t v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    double v36 = *(unsigned int **)(v98 + 32);
    double v82 = (unsigned int *)v100;
    if (v100 >= v35) {
      double v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    }
    if (v82 < v36) {
      double v82 = *(unsigned int **)(v98 + 32);
    }
    unint64_t v38 = bswap32(*v82);
    if (v97)
    {
      double v83 = *(unsigned __int8 **)(v98 + 40);
      unint64_t v84 = (unint64_t)v94;
      unint64_t v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92) {
        unint64_t v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      }
      if (v84 >= (unint64_t)v83) {
        double v83 = (unsigned __int8 *)v84;
      }
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      unsigned int v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        int v15 = ~v78 + v85;
        unsigned int v23 = -1;
        goto LABEL_46;
      }
    }
    v8 += 20;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    unsigned int v23 = -1;
  }
}

float CMYK32(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = _blt_float[BYTE3(a2)];
  *(_DWORD *)(a1 + 4) = _blt_float[BYTE2(a2)];
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = _blt_float[BYTE1(a2)];
  *(_DWORD *)(a1 + 12) = _blt_float[a2];
  float result = *(float *)&_blt_float[BYTE4(a2)];
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMYKf_sample_cmyk32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(result + 40);
  uint64_t v7 = *(void *)(result + 176);
  uint64_t v87 = *(void *)(result + 80);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v101 = *(void *)(result + 120);
  uint64_t v102 = *(void *)(result + 112);
  uint64_t v8 = *(void *)(result + 152) - 20;
  uint64_t v91 = *(void *)(result + 144) - 1;
  uint64_t v9 = 0xFF00000000;
  if (v6) {
    uint64_t v9 = 0;
  }
  uint64_t v96 = v9;
  int v10 = *(_DWORD *)(result + 260) - 1;
  int v99 = *(_DWORD *)(result + 24);
  uint64_t v95 = *(void *)(result + 32);
  uint64_t v11 = (*(_DWORD *)(result + 256) - 1);
  int v86 = *(_DWORD *)(result + 188);
  int v93 = *(_DWORD *)(result + 28);
  double v94 = (unsigned __int8 *)(v6 + v11 + (v10 * v93));
  unint64_t v100 = v95 + (v10 * v99) + 4 * v11 - 4;
  uint64_t v89 = *(void *)(result + 64);
  uint64_t v90 = *(void *)(result + 72);
  uint64_t v97 = *(void *)(result + 40);
  uint64_t v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        uint64_t v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        uint64_t v24 = a3;
        int v15 = a4;
        uint64_t v16 = v89;
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v88;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        int v15 = a4;
        uint64_t v16 = v89;
        if (v20 < 1) {
          goto LABEL_40;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v23 = v21 | v86;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(result + 216);
      uint64_t v13 = v90 - *(void *)(result + 224);
      uint64_t v14 = a3 - v13 + (v12 >> 1);
      int v15 = a4;
      uint64_t v16 = v89;
      if (v14 < 1) {
        goto LABEL_40;
      }
      if (v14 >= v12) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v14) >> 32;
      }
      unsigned int v23 = v17 | v86;
      uint64_t v24 = v13 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v28 = a2;
      }
      else
      {
        uint64_t v30 = *(void *)(result + 192);
        uint64_t v31 = *(void *)(result + 200) + v87;
        uint64_t v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1) {
          goto LABEL_40;
        }
        if (v32 < v30) {
          unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v86;
        }
        uint64_t v28 = v31 - 0x1000000;
        uint64_t v29 = 28;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(result + 192);
      uint64_t v26 = v16 - *(void *)(result + 200);
      uint64_t v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1) {
        goto LABEL_40;
      }
      if (v27 < v25) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v86;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
    }
    if (v23 >= 0x400000) {
      break;
    }
LABEL_40:
    int v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    v8 += 20;
    *(unsigned char *)++uint64_t v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42) {
      return result;
    }
  }
  uint64_t v33 = v24 >> 32;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  double v36 = *(unsigned int **)(result + 32);
  double v37 = (unsigned int *)v100;
  if (v100 >= v35) {
    double v37 = (unsigned int *)v35;
  }
  if (v37 < v36) {
    double v37 = *(unsigned int **)(result + 32);
  }
  unint64_t v38 = *v37;
  if (v6)
  {
    unint64_t v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    double v40 = *(unsigned __int8 **)(result + 40);
    double v41 = v94;
    unint64_t v92 = v39;
    if ((unint64_t)v94 >= v39) {
      double v41 = (unsigned __int8 *)v39;
    }
    if (v41 >= v40) {
      double v40 = v41;
    }
    v38 |= (unint64_t)*v40 << 32;
    if (!v7) {
      goto LABEL_102;
    }
  }
  else
  {
    unint64_t v92 = 0;
    if (!v7) {
      goto LABEL_102;
    }
  }
  unsigned int v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  int v44 = v43 & 0xF;
  int v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    double v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67) {
      double v67 = (unsigned int *)v100;
    }
    if (v67 >= v36) {
      double v36 = v67;
    }
    unint64_t v68 = *v36;
    if (v6)
    {
      float v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69) {
        float v69 = v94;
      }
      if ((unint64_t)v69 < *(void *)(result + 40)) {
        float v69 = *(unsigned __int8 **)(result + 40);
      }
      v68 |= (unint64_t)*v69 << 32;
    }
    uint64_t v70 = interpolate_cif10a[v45];
    char v71 = v45 + 1;
    unint64_t v65 = v38 - ((v70 & v38) >> v71);
    unint64_t v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      double v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73) {
        double v73 = (unsigned int *)v100;
      }
      if (v73 >= v36) {
        double v36 = v73;
      }
      uint64_t v74 = *v36;
      if (v6)
      {
        float v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75) {
          float v75 = v94;
        }
        if ((unint64_t)v75 < *(void *)(result + 40)) {
          float v75 = *(unsigned __int8 **)(result + 40);
        }
        v74 |= (unint64_t)*v75 << 32;
      }
      int v76 = (v43 >> 28) & 3;
      uint64_t v77 = interpolate_cif10a[v76];
      char v64 = v76 + 1;
      unint64_t v65 = v38 - ((v77 & v38) >> v64);
      unint64_t v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3) {
        goto LABEL_102;
      }
      int64_t v46 = (unint64_t)HIWORD(v43) << 56;
      double v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47) {
        double v47 = (unsigned int *)v100;
      }
      if (v47 < v36) {
        double v47 = v36;
      }
      unint64_t v48 = *v47;
      unint64_t v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49) {
        double v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      }
      else {
        double v50 = (unsigned int *)v100;
      }
      if (v50 < v36) {
        double v50 = v36;
      }
      unint64_t v51 = *v50;
      double v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52) {
        double v52 = (unsigned int *)v100;
      }
      if (v52 >= v36) {
        double v36 = v52;
      }
      unint64_t v53 = *v36;
      if (v6)
      {
        int v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        unint64_t v55 = *(void *)(result + 40);
        if (v94 < v54) {
          int v54 = v94;
        }
        if ((unint64_t)v54 < v55) {
          int v54 = *(unsigned __int8 **)(result + 40);
        }
        v48 |= (unint64_t)*v54 << 32;
        unint64_t v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56) {
          float v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        }
        else {
          float v57 = v94;
        }
        if ((unint64_t)v57 < v55) {
          float v57 = *(unsigned __int8 **)(result + 40);
        }
        v51 |= (unint64_t)*v57 << 32;
        float v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58) {
          float v58 = v94;
        }
        if ((unint64_t)v58 < v55) {
          float v58 = *(unsigned __int8 **)(result + 40);
        }
        v53 |= (unint64_t)*v58 << 32;
      }
      uint64_t v59 = interpolate_cif10a[v45];
      char v60 = v45 + 1;
      unint64_t v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      int v62 = (v43 >> 28) & 3;
      unint64_t v63 = interpolate_cif10a[v62];
      char v64 = v62 + 1;
      unint64_t v65 = v61 - ((v61 & v63) >> v64);
      unint64_t v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    unint64_t v72 = v66 >> v64;
  }
  unint64_t v38 = v65 + v72;
LABEL_102:
  uint64_t v78 = 0;
  v8 += 20;
  int v85 = v15;
  int v79 = v15 - 1;
  a3 += v101;
  uint64_t v80 = v88 - a3;
  a2 += v102;
  uint64_t v81 = v87 - a2;
  while (1)
  {
    CMYK32(v8, v38 | v96);
    *(unsigned char *)(v91 + 1 + v7++*(_DWORD *)(result + 8) = v23 >> 22;
    uint64_t v6 = v97;
    float result = v98;
    if (v79 == v78) {
      return result;
    }
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      int v42 = ~v78 + v85;
      goto LABEL_41;
    }
    unint64_t v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    double v36 = *(unsigned int **)(v98 + 32);
    double v82 = (unsigned int *)v100;
    if (v100 >= v35) {
      double v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    }
    if (v82 < v36) {
      double v82 = *(unsigned int **)(v98 + 32);
    }
    unint64_t v38 = *v82;
    if (v97)
    {
      double v83 = *(unsigned __int8 **)(v98 + 40);
      unint64_t v84 = (unint64_t)v94;
      unint64_t v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92) {
        unint64_t v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      }
      if (v84 >= (unint64_t)v83) {
        double v83 = (unsigned __int8 *)v84;
      }
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      unsigned int v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        int v15 = ~v78 + v85;
        unsigned int v23 = -1;
        goto LABEL_46;
      }
    }
    v8 += 20;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    unsigned int v23 = -1;
  }
}

uint64_t CMYKf_sample_CMYK64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = *(void *)(result + 40);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v107 = *(void *)(result + 80);
  uint64_t v108 = *(void *)(result + 88);
  uint64_t v120 = *(void *)(result + 120);
  uint64_t v121 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 152) - 20;
  uint64_t v111 = *(void *)(result + 144) - 1;
  int v10 = *(_DWORD *)(result + 260) - 1;
  int v118 = *(_DWORD *)(result + 24);
  uint64_t v115 = *(void *)(result + 32);
  unsigned int v11 = *(_DWORD *)(result + 256) - 1;
  int v106 = *(_DWORD *)(result + 188);
  int v113 = *(_DWORD *)(result + 28);
  unint64_t v114 = v7 + (v10 * v113) + 2 * v11;
  unint64_t v119 = v115 + (v10 * v118) + 8 * v11 - 8;
  uint64_t v109 = *(void *)(result + 72);
  uint64_t v110 = *(void *)(result + 64);
  uint64_t v116 = v7;
  uint64_t v117 = result;
  while (1)
  {
    if (a3 >= v109)
    {
      uint64_t v17 = v9;
      if (a3 <= v108)
      {
        uint64_t v23 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        uint64_t v25 = a3;
        int v15 = a4;
        uint64_t v16 = v110;
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v108;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        int v15 = a4;
        uint64_t v16 = v110;
        if (v21 < 1) {
          goto LABEL_37;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        unsigned int v24 = v22 | v106;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(result + 216);
      uint64_t v13 = v109 - *(void *)(result + 224);
      uint64_t v14 = a3 - v13 + (v12 >> 1);
      int v15 = a4;
      uint64_t v16 = v110;
      uint64_t v17 = v9;
      if (v14 < 1) {
        goto LABEL_37;
      }
      if (v14 >= v12) {
        LODWORD(v1++*(_DWORD *)(result + 8) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v14) >> 32;
      }
      unsigned int v24 = v18 | v106;
      uint64_t v25 = v13 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v107)
      {
        uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v29 = a2;
      }
      else
      {
        uint64_t v31 = *(void *)(result + 192);
        uint64_t v32 = *(void *)(result + 200) + v107;
        uint64_t v33 = v32 - a2 + (v31 >> 1);
        if (v33 < 1) {
          goto LABEL_37;
        }
        if (v33 < v31) {
          unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v106;
        }
        uint64_t v29 = v32 - 0x1000000;
        uint64_t v30 = 28;
      }
    }
    else
    {
      uint64_t v26 = *(void *)(result + 192);
      uint64_t v27 = v16 - *(void *)(result + 200);
      uint64_t v28 = a2 - v27 + (v26 >> 1);
      if (v28 < 1) {
        goto LABEL_37;
      }
      if (v28 < v26) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v106;
      }
      uint64_t v29 = v27 + 0x1000000;
      uint64_t v30 = 32;
    }
    if (v24 >= 0x400000) {
      break;
    }
LABEL_37:
    int v43 = v15 - 1;
    a2 += v121;
    a3 += v120;
    uint64_t v9 = v17 + 20;
    *(unsigned char *)++uint64_t v111 = 0;
LABEL_38:
    a4 = v43;
    if (!v43) {
      return result;
    }
  }
  uint64_t v34 = v25 >> 32;
  uint64_t v35 = v29 >> 32;
  unint64_t v36 = v115 + SHIDWORD(v25) * (uint64_t)v118 + 8 * (v29 >> 32);
  double v37 = *(unsigned __int16 **)(result + 32);
  unint64_t v38 = (unsigned __int16 *)v119;
  if (v119 >= v36) {
    unint64_t v38 = (unsigned __int16 *)v36;
  }
  if (v38 < v37) {
    unint64_t v38 = *(unsigned __int16 **)(result + 32);
  }
  if (v7)
  {
    unint64_t v39 = v7 + (int)v34 * (uint64_t)v113 + 2 * v35;
    double v40 = *(unsigned __int16 **)(result + 40);
    double v41 = (unsigned __int16 *)v114;
    unint64_t v112 = v39;
    if (v114 >= v39) {
      double v41 = (unsigned __int16 *)v39;
    }
    if (v41 >= v40) {
      double v40 = v41;
    }
    unint64_t v42 = v4 & 0xFFFFFFFFFFFF0000 | (bswap32(*v40) >> 16);
  }
  else
  {
    unint64_t v112 = 0;
    unint64_t v42 = v4 | 0xFFFF;
  }
  unint64_t v44 = ((unint64_t)(bswap32(v38[2]) >> 16) << 32) | ((unint64_t)(bswap32(v38[3]) >> 16) << 48) | bswap32(v38[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v38) >> 16);
  if (!v8)
  {
    uint64_t v47 = v107;
    uint64_t v48 = v108;
    unint64_t v46 = v42;
    goto LABEL_101;
  }
  unsigned int v45 = *(_DWORD *)(v8 + (v30 | v23));
  unint64_t v46 = v42;
LABEL_45:
  int v49 = v45 & 0xF;
  unsigned int v50 = HIBYTE(v45) & 3;
  switch(v49)
  {
    case 1:
      float v75 = (unsigned __int16 *)(v36 + SBYTE1(v45) * (uint64_t)v118);
      if (v119 < (unint64_t)v75) {
        float v75 = (unsigned __int16 *)v119;
      }
      if (v75 >= v37) {
        double v37 = v75;
      }
      unint64_t v76 = ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
      unsigned int v77 = 0xFFFF;
      if (v7)
      {
        uint64_t v78 = (unsigned __int16 *)(v112 + SBYTE1(v45) * (uint64_t)v113);
        if (v114 < (unint64_t)v78) {
          uint64_t v78 = (unsigned __int16 *)v114;
        }
        if ((unint64_t)v78 < *(void *)(result + 40)) {
          uint64_t v78 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v77 = bswap32(*v78) >> 16;
      }
      int v79 = (char *)&interpolate_cmyk64 + 16 * v50;
      uint64_t v80 = *(void *)v79;
      char v81 = v50 + 1;
      unint64_t v82 = v44 - ((*(void *)v79 & v44) >> v81);
      LODWORD(v79) = *((unsigned __int16 *)v79 + 4);
      int v83 = v46 - ((v79 & v46) >> v81);
      unint64_t v84 = v46 & 0xFFFFFFFFFFFF0000;
      unint64_t v85 = (v80 & v76) >> v81;
      unsigned int v86 = (v79 & v77) >> v81;
      goto LABEL_99;
    case 2:
      int64_t v87 = (unint64_t)HIWORD(v45) << 56;
      uint64_t v88 = (unsigned __int16 *)(v36 + (v87 >> 53));
      if (v119 < (unint64_t)v88) {
        uint64_t v88 = (unsigned __int16 *)v119;
      }
      if (v88 >= v37) {
        double v37 = v88;
      }
      unint64_t v89 = ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
      unsigned int v90 = 0xFFFF;
      if (v7)
      {
        uint64_t v91 = (unsigned __int16 *)(v112 + (v87 >> 55));
        if (v114 < (unint64_t)v91) {
          uint64_t v91 = (unsigned __int16 *)v114;
        }
        if ((unint64_t)v91 < *(void *)(result + 40)) {
          uint64_t v91 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v90 = bswap32(*v91) >> 16;
      }
      unsigned int v92 = (v45 >> 28) & 3;
      int v93 = (char *)&interpolate_cmyk64 + 16 * v92;
      uint64_t v94 = *(void *)v93;
      LOBYTE(v92) = v92 + 1;
      unint64_t v82 = v44 - ((*(void *)v93 & v44) >> v92);
      LODWORD(v93) = *((unsigned __int16 *)v93 + 4);
      int v83 = v46 - ((v93 & v46) >> v92);
      unint64_t v84 = v46 & 0xFFFFFFFFFFFF0000;
      unint64_t v85 = (v94 & v89) >> v92;
      unsigned int v86 = (v93 & v90) >> v92;
LABEL_99:
      unint64_t v44 = v82 + v85;
      unint64_t v46 = v84 | (unsigned __int16)(v83 + v86);
      break;
    case 3:
      int64_t v51 = (unint64_t)HIWORD(v45) << 56;
      double v52 = (unsigned __int16 *)(v36 + (v51 >> 53));
      if (v119 < (unint64_t)v52) {
        double v52 = (unsigned __int16 *)v119;
      }
      if (v52 < v37) {
        double v52 = v37;
      }
      unint64_t v53 = ((unint64_t)(bswap32(v52[2]) >> 16) << 32) | ((unint64_t)(bswap32(v52[3]) >> 16) << 48) | bswap32(v52[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v52) >> 16);
      unint64_t v54 = v36 + SBYTE1(v45) * (uint64_t)v118;
      if (v119 >= v54) {
        unint64_t v55 = (unsigned __int16 *)(v36 + SBYTE1(v45) * (uint64_t)v118);
      }
      else {
        unint64_t v55 = (unsigned __int16 *)v119;
      }
      if (v55 < v37) {
        unint64_t v55 = v37;
      }
      unint64_t v56 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
      float v57 = (unsigned __int16 *)(v54 + (v51 >> 53));
      if (v119 < (unint64_t)v57) {
        float v57 = (unsigned __int16 *)v119;
      }
      if (v57 >= v37) {
        double v37 = v57;
      }
      unint64_t v58 = ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
      unsigned int v59 = 0xFFFF;
      unsigned int v60 = 0xFFFF;
      unsigned int v61 = 0xFFFF;
      if (v7)
      {
        int v62 = (unsigned __int16 *)(v112 + (v51 >> 55));
        unint64_t v63 = *(void *)(result + 40);
        if (v114 < (unint64_t)v62) {
          int v62 = (unsigned __int16 *)v114;
        }
        if ((unint64_t)v62 < v63) {
          int v62 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v61 = bswap32(*v62) >> 16;
        unint64_t v64 = v112 + SBYTE1(v45) * (uint64_t)v113;
        if (v114 >= v64) {
          unint64_t v65 = (unsigned __int16 *)(v112 + SBYTE1(v45) * (uint64_t)v113);
        }
        else {
          unint64_t v65 = (unsigned __int16 *)v114;
        }
        if ((unint64_t)v65 < v63) {
          unint64_t v65 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v60 = bswap32(*v65) >> 16;
        unint64_t v66 = (unsigned __int16 *)(v64 + (v51 >> 55));
        if (v114 < (unint64_t)v66) {
          unint64_t v66 = (unsigned __int16 *)v114;
        }
        if ((unint64_t)v66 < v63) {
          unint64_t v66 = *(unsigned __int16 **)(result + 40);
        }
        unsigned int v59 = bswap32(*v66) >> 16;
      }
      double v67 = (char *)&interpolate_cmyk64 + 16 * v50;
      uint64_t v68 = *(void *)v67;
      char v69 = v50 + 1;
      unint64_t v70 = v44 - ((*(void *)v67 & v44) >> v69);
      LODWORD(v67) = *((unsigned __int16 *)v67 + 4);
      int v71 = v46 - ((v67 & v46) >> v69) + ((v67 & v60) >> v69);
      unint64_t v72 = v53 - ((v68 & v53) >> v69) + ((v68 & v58) >> v69);
      unsigned int v73 = (v45 >> 28) & 3;
      uint64_t v74 = (char *)&interpolate_cmyk64 + 16 * v73;
      LOBYTE(v73) = v73 + 1;
      unint64_t v44 = v70
          + ((v68 & v56) >> v69)
          - (((v70 + ((v68 & v56) >> v69)) & *(void *)v74) >> v73)
          + ((v72 & *(void *)v74) >> v73);
      unint64_t v46 = v46 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)(v71
                                                          - ((unsigned __int16)(v71 & *((_WORD *)v74 + 4)) >> v73)
                                                          + (((v61
                                                             - ((v67 & v61) >> v69)
                                                             + ((v67 & v59) >> v69)) & *((unsigned __int16 *)v74 + 4)) >> v73));
      break;
  }
  uint64_t v47 = v107;
  uint64_t v48 = v108;
LABEL_101:
  uint64_t v95 = 0;
  uint64_t v96 = (float *)(v17 + 20);
  int v105 = v15;
  int v97 = v15 - 1;
  a3 += v120;
  uint64_t v98 = v48 - a3;
  a2 += v121;
  uint64_t v99 = v47 - a2;
  while (1)
  {
    uint64_t v9 = (uint64_t)v96;
    unint64_t v100 = v96;
    unint64_t v4 = v46;
    uint64_t v101 = v8;
    CMYK64(v100, v44, v46);
    *(unsigned char *)(v111 + 1 + v95) = v24 >> 22;
    uint64_t v7 = v116;
    float result = v117;
    if (v97 == v95) {
      return result;
    }
    uint64_t v8 = v101;
    if ((v98 | v99 | (a3 - v109) | (a2 - v110)) < 0)
    {
      v111 += v95 + 1;
      int v43 = ~v95 + v105;
      goto LABEL_38;
    }
    unint64_t v36 = v115 + SHIDWORD(a3) * (uint64_t)v118 + 8 * (a2 >> 32);
    double v37 = *(unsigned __int16 **)(v117 + 32);
    uint64_t v102 = (unsigned __int16 *)v119;
    if (v119 >= v36) {
      uint64_t v102 = (unsigned __int16 *)(v115 + SHIDWORD(a3) * (uint64_t)v118 + 8 * (a2 >> 32));
    }
    if (v102 < v37) {
      uint64_t v102 = *(unsigned __int16 **)(v117 + 32);
    }
    uint64_t v17 = v9;
    if (v116)
    {
      int32x2_t v103 = *(unsigned __int16 **)(v117 + 40);
      unint64_t v104 = v114;
      unint64_t v112 = v116 + SHIDWORD(a3) * (uint64_t)v113 + 2 * (a2 >> 32);
      if (v114 >= v112) {
        unint64_t v104 = v116 + SHIDWORD(a3) * (uint64_t)v113 + 2 * (a2 >> 32);
      }
      if (v104 >= (unint64_t)v103) {
        int32x2_t v103 = (unsigned __int16 *)v104;
      }
      unint64_t v46 = v4 & 0xFFFFFFFFFFFF0000 | (bswap32(*v103) >> 16);
    }
    else
    {
      unint64_t v46 = v4 | 0xFFFF;
    }
    unint64_t v44 = ((unint64_t)(bswap32(v102[2]) >> 16) << 32) | ((unint64_t)(bswap32(v102[3]) >> 16) << 48) | bswap32(v102[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v102) >> 16);
    if (v8)
    {
      unsigned int v45 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v45 & 0xF) != 0)
      {
        v111 += v95 + 1;
        int v15 = ~v95 + v105;
        unsigned int v24 = -1;
        goto LABEL_45;
      }
    }
    ++v95;
    uint64_t v96 = (float *)(v9 + 20);
    a3 += v120;
    v98 -= v120;
    a2 += v121;
    v99 -= v121;
    unsigned int v24 = -1;
  }
}

float CMYK64(float *a1, unint64_t a2, __int16 a3)
{
  *a1 = *(float *)&_blt_float[a2 + 256] + *(float *)&_blt_float[BYTE1(a2) + 512];
  a1[1] = *(float *)&_blt_float[BYTE2(a2) + 256] + *(float *)&_blt_float[BYTE3(a2) | 0x200];
  a1[2] = *(float *)&_blt_float[BYTE4(a2) + 256] + *(float *)&_blt_float[BYTE5(a2) + 512];
  a1[3] = *(float *)&_blt_float[BYTE6(a2) + 256] + *(float *)&_blt_float[HIBYTE(a2) + 512];
  float result = *(float *)&_blt_float[a3 + 256] + *(float *)&_blt_float[HIBYTE(a3) + 512];
  a1[4] = result;
  return result;
}

uint64_t CMYKf_sample_cmyk64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = *(void *)(result + 40);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v105 = *(void *)(result + 80);
  uint64_t v108 = *(void *)(result + 88);
  uint64_t v118 = *(void *)(result + 120);
  uint64_t v119 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 152) - 20;
  uint64_t v109 = *(void *)(result + 144) - 1;
  int v10 = *(_DWORD *)(result + 260) - 1;
  int v116 = *(_DWORD *)(result + 24);
  uint64_t v113 = *(void *)(result + 32);
  unsigned int v11 = *(_DWORD *)(result + 256) - 1;
  int v104 = *(_DWORD *)(result + 188);
  int v111 = *(_DWORD *)(result + 28);
  unint64_t v112 = v7 + (v10 * v111) + 2 * v11;
  unint64_t v117 = v113 + (v10 * v116) + 8 * v11 - 8;
  uint64_t v106 = *(void *)(result + 72);
  uint64_t v107 = *(void *)(result + 64);
  uint64_t v114 = v7;
  uint64_t v115 = result;
  while (1)
  {
    if (a3 >= v106)
    {
      uint64_t v17 = v9;
      if (a3 <= v108)
      {
        uint64_t v23 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        uint64_t v25 = a3;
        int v15 = a4;
        uint64_t v16 = v107;
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v108;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        int v15 = a4;
        uint64_t v16 = v107;
        if (v21 < 1) {
          goto LABEL_37;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        unsigned int v24 = v22 | v104;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(result + 216);
      uint64_t v13 = v106 - *(void *)(result + 224);
      uint64_t v14 = a3 - v13 + (v12 >> 1);
      int v15 = a4;
      uint64_t v16 = v107;
      uint64_t v17 = v9;
      if (v14 < 1) {
        goto LABEL_37;
      }
      if (v14 >= v12) {
        LODWORD(v1++*(_DWORD *)(result + 8) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v14) >> 32;
      }
      unsigned int v24 = v18 | v104;
      uint64_t v25 = v13 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v105)
      {
        uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v29 = a2;
      }
      else
      {
        uint64_t v31 = *(void *)(result + 192);
        uint64_t v32 = *(void *)(result + 200) + v105;
        uint64_t v33 = v32 - a2 + (v31 >> 1);
        if (v33 < 1) {
          goto LABEL_37;
        }
        if (v33 < v31) {
          unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v104;
        }
        uint64_t v29 = v32 - 0x1000000;
        uint64_t v30 = 28;
      }
    }
    else
    {
      uint64_t v26 = *(void *)(result + 192);
      uint64_t v27 = v16 - *(void *)(result + 200);
      uint64_t v28 = a2 - v27 + (v26 >> 1);
      if (v28 < 1) {
        goto LABEL_37;
      }
      if (v28 < v26) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v104;
      }
      uint64_t v29 = v27 + 0x1000000;
      uint64_t v30 = 32;
    }
    if (v24 >= 0x400000) {
      break;
    }
LABEL_37:
    int v43 = v15 - 1;
    a2 += v119;
    a3 += v118;
    uint64_t v9 = v17 + 20;
    *(unsigned char *)++uint64_t v109 = 0;
LABEL_38:
    a4 = v43;
    if (!v43) {
      return result;
    }
  }
  uint64_t v34 = v25 >> 32;
  uint64_t v35 = v29 >> 32;
  unint64_t v36 = v113 + SHIDWORD(v25) * (uint64_t)v116 + 8 * (v29 >> 32);
  double v37 = *(unint64_t **)(result + 32);
  unint64_t v38 = (unint64_t *)v117;
  if (v117 >= v36) {
    unint64_t v38 = (unint64_t *)v36;
  }
  if (v38 < v37) {
    unint64_t v38 = *(unint64_t **)(result + 32);
  }
  if (v7)
  {
    unint64_t v39 = v7 + (int)v34 * (uint64_t)v111 + 2 * v35;
    double v40 = *(unsigned __int16 **)(result + 40);
    double v41 = (unsigned __int16 *)v112;
    unint64_t v110 = v39;
    if (v112 >= v39) {
      double v41 = (unsigned __int16 *)v39;
    }
    if (v41 >= v40) {
      double v40 = v41;
    }
    unint64_t v42 = v4 & 0xFFFFFFFFFFFF0000 | *v40;
  }
  else
  {
    unint64_t v110 = 0;
    unint64_t v42 = v4 | 0xFFFF;
  }
  unint64_t v44 = *v38;
  if (v8)
  {
    unsigned int v45 = *(_DWORD *)(v8 + (v30 | v23));
LABEL_44:
    int v46 = v45 & 0xF;
    unsigned int v47 = v45 >> 8;
    unsigned int v48 = HIBYTE(v45) & 3;
    if (v46 == 1)
    {
      unsigned int v73 = (unint64_t *)(v36 + SBYTE1(v45) * (uint64_t)v116);
      if (v117 < (unint64_t)v73) {
        unsigned int v73 = (unint64_t *)v117;
      }
      if (v73 >= v37) {
        double v37 = v73;
      }
      unint64_t v74 = *v37;
      int v75 = 0xFFFF;
      if (v7)
      {
        unint64_t v76 = (unsigned __int16 *)(v110 + (char)v47 * (uint64_t)v111);
        if (v112 < (unint64_t)v76) {
          unint64_t v76 = (unsigned __int16 *)v112;
        }
        if ((unint64_t)v76 < *(void *)(result + 40)) {
          unint64_t v76 = *(unsigned __int16 **)(result + 40);
        }
        int v75 = *v76;
      }
      unsigned int v77 = (char *)&interpolate_cmyk64 + 16 * v48;
      uint64_t v78 = *(void *)v77;
      char v79 = v48 + 1;
      unint64_t v80 = v44 - ((*(void *)v77 & v44) >> v79);
      LODWORD(v77) = *((unsigned __int16 *)v77 + 4);
      int v81 = v42 - ((v77 & v42) >> v79);
      unint64_t v82 = v42 & 0xFFFFFFFFFFFF0000;
      unint64_t v83 = (v78 & v74) >> v79;
      unsigned int v84 = (v77 & v75) >> v79;
    }
    else
    {
      if (v46 != 2)
      {
        if (v46 == 3)
        {
          int64_t v49 = (unint64_t)HIWORD(v45) << 56;
          unsigned int v50 = (unint64_t *)(v36 + (v49 >> 53));
          if (v117 < (unint64_t)v50) {
            unsigned int v50 = (unint64_t *)v117;
          }
          if (v50 < v37) {
            unsigned int v50 = v37;
          }
          unint64_t v51 = *v50;
          unint64_t v52 = v36 + SBYTE1(v45) * (uint64_t)v116;
          if (v117 >= v52) {
            unint64_t v53 = (unint64_t *)(v36 + SBYTE1(v45) * (uint64_t)v116);
          }
          else {
            unint64_t v53 = (unint64_t *)v117;
          }
          if (v53 < v37) {
            unint64_t v53 = v37;
          }
          unint64_t v54 = *v53;
          unint64_t v55 = (unint64_t *)(v52 + (v49 >> 53));
          if (v117 < (unint64_t)v55) {
            unint64_t v55 = (unint64_t *)v117;
          }
          if (v55 >= v37) {
            double v37 = v55;
          }
          unint64_t v56 = *v37;
          int v57 = 0xFFFF;
          int v58 = 0xFFFF;
          int v59 = 0xFFFF;
          if (v7)
          {
            unsigned int v60 = (unsigned __int16 *)(v110 + (v49 >> 55));
            unint64_t v61 = *(void *)(result + 40);
            if (v112 < (unint64_t)v60) {
              unsigned int v60 = (unsigned __int16 *)v112;
            }
            if ((unint64_t)v60 < v61) {
              unsigned int v60 = *(unsigned __int16 **)(result + 40);
            }
            int v57 = *v60;
            unint64_t v62 = v110 + SBYTE1(v45) * (uint64_t)v111;
            if (v112 >= v62) {
              unint64_t v63 = (unsigned __int16 *)(v110 + SBYTE1(v45) * (uint64_t)v111);
            }
            else {
              unint64_t v63 = (unsigned __int16 *)v112;
            }
            if ((unint64_t)v63 < v61) {
              unint64_t v63 = *(unsigned __int16 **)(result + 40);
            }
            int v58 = *v63;
            unint64_t v64 = (unsigned __int16 *)(v62 + (v49 >> 55));
            if (v112 < (unint64_t)v64) {
              unint64_t v64 = (unsigned __int16 *)v112;
            }
            if ((unint64_t)v64 < v61) {
              unint64_t v64 = *(unsigned __int16 **)(result + 40);
            }
            int v59 = *v64;
          }
          unint64_t v65 = (char *)&interpolate_cmyk64 + 16 * v48;
          uint64_t v66 = *(void *)v65;
          char v67 = v48 + 1;
          unint64_t v68 = v44 - ((*(void *)v65 & v44) >> v67);
          LODWORD(v65) = *((unsigned __int16 *)v65 + 4);
          int v69 = v42 - ((v65 & v42) >> v67) + ((v65 & v58) >> v67);
          unint64_t v70 = v51 - ((v66 & v51) >> v67) + ((v66 & v56) >> v67);
          unsigned int v71 = (v45 >> 28) & 3;
          unint64_t v72 = (char *)&interpolate_cmyk64 + 16 * v71;
          LOBYTE(v71) = v71 + 1;
          unint64_t v44 = v68
              + ((v66 & v54) >> v67)
              - (((v68 + ((v66 & v54) >> v67)) & *(void *)v72) >> v71)
              + ((v70 & *(void *)v72) >> v71);
          unint64_t v42 = v42 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)(v69
                                                              - ((unsigned __int16)(v69 & *((_WORD *)v72 + 4)) >> v71)
                                                              + (((v57
                                                                 - ((v65 & v57) >> v67)
                                                                 + ((v65 & v59) >> v67)) & *((unsigned __int16 *)v72 + 4)) >> v71));
        }
        goto LABEL_99;
      }
      int64_t v85 = (unint64_t)HIWORD(v45) << 56;
      unsigned int v86 = (unint64_t *)(v36 + (v85 >> 53));
      if (v117 < (unint64_t)v86) {
        unsigned int v86 = (unint64_t *)v117;
      }
      if (v86 >= v37) {
        double v37 = v86;
      }
      unint64_t v87 = *v37;
      int v88 = 0xFFFF;
      if (v7)
      {
        unint64_t v89 = (unsigned __int16 *)(v110 + (v85 >> 55));
        if (v112 < (unint64_t)v89) {
          unint64_t v89 = (unsigned __int16 *)v112;
        }
        if ((unint64_t)v89 < *(void *)(result + 40)) {
          unint64_t v89 = *(unsigned __int16 **)(result + 40);
        }
        int v88 = *v89;
      }
      unsigned int v90 = (v45 >> 28) & 3;
      uint64_t v91 = (char *)&interpolate_cmyk64 + 16 * v90;
      uint64_t v92 = *(void *)v91;
      LOBYTE(v90) = v90 + 1;
      unint64_t v80 = v44 - ((*(void *)v91 & v44) >> v90);
      LODWORD(v91) = *((unsigned __int16 *)v91 + 4);
      int v81 = v42 - ((v91 & v42) >> v90);
      unint64_t v82 = v42 & 0xFFFFFFFFFFFF0000;
      unint64_t v83 = (v92 & v87) >> v90;
      unsigned int v84 = (v91 & v88) >> v90;
    }
    unint64_t v44 = v80 + v83;
    unint64_t v42 = v82 | (unsigned __int16)(v81 + v84);
  }
LABEL_99:
  uint64_t v93 = 0;
  uint64_t v94 = (float *)(v17 + 20);
  int v103 = v15;
  int v95 = v15 - 1;
  a3 += v118;
  uint64_t v96 = v108 - a3;
  a2 += v119;
  uint64_t v97 = v105 - a2;
  while (1)
  {
    uint64_t v9 = (uint64_t)v94;
    uint64_t v98 = v94;
    unint64_t v4 = v42;
    uint64_t v99 = v8;
    CMYK64(v98, v44, v42);
    *(unsigned char *)(v109 + 1 + v93) = v24 >> 22;
    uint64_t v7 = v114;
    float result = v115;
    if (v95 == v93) {
      return result;
    }
    uint64_t v8 = v99;
    if ((v96 | v97 | (a3 - v106) | (a2 - v107)) < 0)
    {
      v109 += v93 + 1;
      int v43 = ~v93 + v103;
      goto LABEL_38;
    }
    unint64_t v36 = v113 + SHIDWORD(a3) * (uint64_t)v116 + 8 * (a2 >> 32);
    double v37 = *(unint64_t **)(v115 + 32);
    unint64_t v100 = (unint64_t *)v117;
    if (v117 >= v36) {
      unint64_t v100 = (unint64_t *)(v113 + SHIDWORD(a3) * (uint64_t)v116 + 8 * (a2 >> 32));
    }
    if (v100 < v37) {
      unint64_t v100 = *(unint64_t **)(v115 + 32);
    }
    uint64_t v17 = v9;
    if (v114)
    {
      uint64_t v101 = *(unsigned __int16 **)(v115 + 40);
      unint64_t v102 = v112;
      unint64_t v110 = v114 + SHIDWORD(a3) * (uint64_t)v111 + 2 * (a2 >> 32);
      if (v112 >= v110) {
        unint64_t v102 = v114 + SHIDWORD(a3) * (uint64_t)v111 + 2 * (a2 >> 32);
      }
      if (v102 >= (unint64_t)v101) {
        uint64_t v101 = (unsigned __int16 *)v102;
      }
      unint64_t v42 = v4 & 0xFFFFFFFFFFFF0000 | *v101;
    }
    else
    {
      unint64_t v42 = v4 | 0xFFFF;
    }
    unint64_t v44 = *v100;
    if (v8)
    {
      unsigned int v45 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v45 & 0xF) != 0)
      {
        v109 += v93 + 1;
        int v15 = ~v93 + v103;
        unsigned int v24 = -1;
        goto LABEL_44;
      }
    }
    ++v93;
    uint64_t v94 = (float *)(v9 + 20);
    a3 += v118;
    v96 -= v118;
    a2 += v119;
    v97 -= v119;
    unsigned int v24 = -1;
  }
}

uint64_t CMYKf_sample_WF(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v9 = *(void *)(result + 72);
  uint64_t v86 = *(void *)(result + 80);
  uint64_t v87 = *(void *)(result + 64);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v11 = *(void *)(result + 112);
  uint64_t v10 = *(void *)(result + 120);
  uint64_t v12 = *(void *)(result + 152) - 20;
  uint64_t v13 = *(void *)(result + 144) - 1;
  int v14 = *(_DWORD *)(result + 260) - 1;
  unsigned int v15 = *(_DWORD *)(result + 256) - 1;
  unint64_t v16 = v5 + (v14 * v7) + 4 * v15;
  int v85 = *(_DWORD *)(result + 188);
  unint64_t v17 = v4 + (v14 * v6) + 4 * v15 - 4;
  do
  {
    while (1)
    {
      if (a3 >= v9)
      {
        if (a3 <= v88)
        {
          uint64_t v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          unsigned int v27 = 0x3FFFFFFF;
          uint64_t v28 = a3;
          uint64_t v29 = v87;
        }
        else
        {
          uint64_t v22 = *(void *)(result + 216);
          uint64_t v23 = *(void *)(result + 224) + v88;
          uint64_t v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1) {
            goto LABEL_40;
          }
          if (v24 >= v22) {
            LODWORD(v25) = 0x3FFFFFFF;
          }
          else {
            unint64_t v25 = (unint64_t)(*(void *)(result + 232) * v24) >> 32;
          }
          uint64_t v29 = v87;
          unsigned int v27 = v25 | v85;
          uint64_t v28 = v23 - 0x1000000;
          uint64_t v26 = 448;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = v9 - *(void *)(result + 224);
        uint64_t v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_40;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        uint64_t v29 = v87;
        unsigned int v27 = v21 | v85;
        uint64_t v28 = v19 + 0x1000000;
        uint64_t v26 = 512;
      }
      if (a2 >= v29) {
        break;
      }
      uint64_t v30 = *(void *)(result + 192);
      uint64_t v31 = v29 - *(void *)(result + 200);
      uint64_t v32 = a2 - v31 + (v30 >> 1);
      if (v32 >= 1)
      {
        if (v32 < v30) {
          unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v85;
        }
        uint64_t v33 = v31 + 0x1000000;
        uint64_t v34 = 32;
        goto LABEL_26;
      }
LABEL_40:
      --a4;
      a2 += v11;
      a3 += v10;
      v12 += 20;
      *(unsigned char *)++uint64_t v13 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v86)
    {
      uint64_t v34 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v33 = a2;
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(result + 192);
    uint64_t v36 = *(void *)(result + 200) + v86;
    uint64_t v37 = v36 - a2 + (v35 >> 1);
    if (v37 < 1) {
      goto LABEL_40;
    }
    if (v37 < v35) {
      unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v37) >> 32) >> 15)) | v85;
    }
    uint64_t v33 = v36 - 0x1000000;
    uint64_t v34 = 28;
LABEL_26:
    if (v27 < 0x400000) {
      goto LABEL_40;
    }
    uint64_t v38 = v28 >> 32;
    uint64_t v39 = v4 + SHIDWORD(v28) * (uint64_t)v6;
    unint64_t v40 = (v33 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v41 = v39 + v40;
    unint64_t v42 = *(unsigned int **)(result + 32);
    if (v17 >= v39 + v40) {
      int v43 = (unsigned int *)(v39 + v40);
    }
    else {
      int v43 = (unsigned int *)v17;
    }
    if (v43 >= v42) {
      unint64_t v44 = v43;
    }
    else {
      unint64_t v44 = *(unsigned int **)(result + 32);
    }
    if (v5)
    {
      unint64_t v45 = v5 + (int)v38 * (uint64_t)v7 + v40;
      int v46 = *(unsigned int **)(result + 40);
      if (v16 >= v45) {
        unsigned int v47 = (unsigned int *)v45;
      }
      else {
        unsigned int v47 = (unsigned int *)v16;
      }
      if (v47 >= v46) {
        int v46 = v47;
      }
      float v48 = COERCE_FLOAT(bswap32(*v46));
    }
    else
    {
      unint64_t v45 = 0;
      float v48 = 1.0;
    }
    float v49 = COERCE_FLOAT(bswap32(*v44));
    if (!v8) {
      goto LABEL_93;
    }
    unsigned int v50 = *(_DWORD *)(v8 + (v34 | v26));
LABEL_46:
    int v51 = v50 & 0xF;
    int v52 = HIBYTE(v50) & 3;
    if (v51 == 1)
    {
      uint64_t v66 = (unsigned int *)(v41 + SBYTE1(v50) * (uint64_t)v6);
      if (v17 < (unint64_t)v66) {
        uint64_t v66 = (unsigned int *)v17;
      }
      if (v66 < v42) {
        uint64_t v66 = v42;
      }
      float v67 = COERCE_FLOAT(bswap32(*v66));
      float v68 = 1.0;
      if (v5)
      {
        int v69 = (unsigned int *)(v45 + SBYTE1(v50) * (uint64_t)v7);
        if (v16 < (unint64_t)v69) {
          int v69 = (unsigned int *)v16;
        }
        if ((unint64_t)v69 < *(void *)(result + 40)) {
          int v69 = *(unsigned int **)(result + 40);
        }
        float v68 = COERCE_FLOAT(bswap32(*v69));
      }
      unint64_t v70 = &interpolate_waf[2 * v52];
    }
    else
    {
      if (v51 != 2)
      {
        if (v51 == 3)
        {
          unint64_t v53 = v41 + 4 * SBYTE2(v50);
          if (v17 >= v53) {
            unint64_t v54 = (unsigned int *)(v41 + 4 * SBYTE2(v50));
          }
          else {
            unint64_t v54 = (unsigned int *)v17;
          }
          if (v54 < v42) {
            unint64_t v54 = v42;
          }
          float v55 = COERCE_FLOAT(bswap32(*v54));
          unint64_t v56 = (unsigned int *)(v53 + SBYTE1(v50) * (uint64_t)v6);
          if (v17 < (unint64_t)v56) {
            unint64_t v56 = (unsigned int *)v17;
          }
          if (v56 < v42) {
            unint64_t v56 = v42;
          }
          float v57 = COERCE_FLOAT(bswap32(*v56));
          float v58 = 1.0;
          float v59 = 1.0;
          if (v5)
          {
            unint64_t v60 = v45 + 4 * SBYTE2(v50);
            unint64_t v61 = *(void *)(result + 40);
            if (v16 >= v60) {
              unint64_t v62 = (unsigned int *)(v45 + 4 * SBYTE2(v50));
            }
            else {
              unint64_t v62 = (unsigned int *)v16;
            }
            if ((unint64_t)v62 < v61) {
              unint64_t v62 = *(unsigned int **)(result + 40);
            }
            float v59 = COERCE_FLOAT(bswap32(*v62));
            unint64_t v63 = (unsigned int *)(v60 + SBYTE1(v50) * (uint64_t)v7);
            if (v16 < (unint64_t)v63) {
              unint64_t v63 = (unsigned int *)v16;
            }
            if ((unint64_t)v63 < v61) {
              unint64_t v63 = *(unsigned int **)(result + 40);
            }
            float v58 = COERCE_FLOAT(bswap32(*v63));
          }
          float v64 = interpolate_waf[2 * v52 + 1];
          float v65 = interpolate_waf[2 * ((v50 >> 28) & 3) + 1];
          float v49 = (float)((float)((float)(v49 - (float)(v49 * v64)) + (float)(v55 * v64))
                      - (float)((float)((float)(v49 - (float)(v49 * v64)) + (float)(v55 * v64)) * v65))
              + (float)((float)((float)(v55 - (float)(v55 * v64)) + (float)(v57 * v64)) * v65);
          float v48 = (float)((float)((float)(v48 - (float)(v48 * v64)) + (float)(v59 * v64))
                      - (float)((float)((float)(v48 - (float)(v48 * v64)) + (float)(v59 * v64)) * v65))
              + (float)((float)((float)(v59 - (float)(v59 * v64)) + (float)(v58 * v64)) * v65);
        }
        goto LABEL_93;
      }
      unsigned int v71 = (unsigned int *)(v41 + 4 * SBYTE2(v50));
      if (v17 < (unint64_t)v71) {
        unsigned int v71 = (unsigned int *)v17;
      }
      if (v71 < v42) {
        unsigned int v71 = v42;
      }
      float v67 = COERCE_FLOAT(bswap32(*v71));
      float v68 = 1.0;
      if (v5)
      {
        unint64_t v72 = (unsigned int *)(v45 + 4 * SBYTE2(v50));
        if (v16 < (unint64_t)v72) {
          unint64_t v72 = (unsigned int *)v16;
        }
        if ((unint64_t)v72 < *(void *)(result + 40)) {
          unint64_t v72 = *(unsigned int **)(result + 40);
        }
        float v68 = COERCE_FLOAT(bswap32(*v72));
      }
      unint64_t v70 = &interpolate_waf[2 * ((v50 >> 28) & 3)];
    }
    float v73 = v70[1];
    float v49 = (float)(v49 - (float)(v49 * v73)) + (float)(v67 * v73);
    float v48 = (float)(v48 - (float)(v48 * v73)) + (float)(v68 * v73);
LABEL_93:
    *(void *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    *(float *)(v12 + 32) = v48 - v49;
    *(float *)(v12 + 36) = v48;
    *(unsigned char *)(v13 + 1) = v27 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v74 = 0;
    int v75 = (float *)(v12 + 56);
    a2 += v11;
    uint64_t v76 = v86 - a2;
    a3 += v10;
    uint64_t v77 = v88 - a3;
    while ((((a2 - v87) | v76 | (a3 - v9) | v77) & 0x8000000000000000) == 0)
    {
      uint64_t v78 = v4 + SHIDWORD(a3) * (uint64_t)v6;
      unint64_t v79 = (a2 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v41 = v78 + v79;
      unint64_t v42 = *(unsigned int **)(result + 32);
      if (v17 >= v78 + v79) {
        unint64_t v80 = (unsigned int *)(v78 + v79);
      }
      else {
        unint64_t v80 = (unsigned int *)v17;
      }
      if (v80 < v42) {
        unint64_t v80 = *(unsigned int **)(result + 32);
      }
      if (v5)
      {
        unint64_t v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v79;
        int v81 = *(unsigned int **)(result + 40);
        if (v16 >= v45) {
          unint64_t v82 = (unsigned int *)v45;
        }
        else {
          unint64_t v82 = (unsigned int *)v16;
        }
        if (v82 >= v81) {
          int v81 = v82;
        }
        float v48 = COERCE_FLOAT(bswap32(*v81));
      }
      else
      {
        float v48 = 1.0;
      }
      float v83 = COERCE_FLOAT(bswap32(*v80));
      float v49 = v83;
      if (v8)
      {
        unsigned int v50 = *(_DWORD *)(v8 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        if ((v50 & 0xF) != 0)
        {
          v13 += v74 + 1;
          uint64_t v12 = (uint64_t)(v75 - 9);
          a4 += ~v74;
          unsigned int v27 = -1;
          goto LABEL_46;
        }
      }
      *(void *)(v75 - 3) = 0;
      *(v75 - 4) = 0.0;
      *(v75 - 1) = v48 - v83;
      *int v75 = v48;
      uint64_t v84 = v13 + v74++;
      v75 += 5;
      a2 += v11;
      *(unsigned char *)(v84 + 2) = -1;
      v76 -= v11;
      a3 += v10;
      v77 -= v10;
      if (a4 - 1 == v74) {
        return result;
      }
    }
    v13 += v74 + 1;
    uint64_t v12 = (uint64_t)(v75 - 9);
    a4 += ~v74;
  }
  while (a4);
  return result;
}

uint64_t CMYKf_sample_Wf(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  int v7 = *(_DWORD *)(result + 28);
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v9 = *(void *)(result + 72);
  uint64_t v85 = *(void *)(result + 80);
  uint64_t v86 = *(void *)(result + 64);
  uint64_t v87 = *(void *)(result + 88);
  uint64_t v11 = *(void *)(result + 112);
  uint64_t v10 = *(void *)(result + 120);
  uint64_t v12 = *(void *)(result + 152) - 20;
  uint64_t v13 = *(void *)(result + 144) - 1;
  int v14 = *(_DWORD *)(result + 260) - 1;
  unsigned int v15 = *(_DWORD *)(result + 256) - 1;
  unint64_t v16 = v5 + (v14 * v7) + 4 * v15;
  int v84 = *(_DWORD *)(result + 188);
  unint64_t v17 = v4 + (v14 * v6) + 4 * v15 - 4;
  do
  {
    while (1)
    {
      if (a3 >= v9)
      {
        if (a3 <= v87)
        {
          uint64_t v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          unsigned int v27 = 0x3FFFFFFF;
          uint64_t v28 = a3;
          uint64_t v29 = v86;
        }
        else
        {
          uint64_t v22 = *(void *)(result + 216);
          uint64_t v23 = *(void *)(result + 224) + v87;
          uint64_t v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1) {
            goto LABEL_40;
          }
          if (v24 >= v22) {
            LODWORD(v25) = 0x3FFFFFFF;
          }
          else {
            unint64_t v25 = (unint64_t)(*(void *)(result + 232) * v24) >> 32;
          }
          uint64_t v29 = v86;
          unsigned int v27 = v25 | v84;
          uint64_t v28 = v23 - 0x1000000;
          uint64_t v26 = 448;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = v9 - *(void *)(result + 224);
        uint64_t v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1) {
          goto LABEL_40;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        uint64_t v29 = v86;
        unsigned int v27 = v21 | v84;
        uint64_t v28 = v19 + 0x1000000;
        uint64_t v26 = 512;
      }
      if (a2 >= v29) {
        break;
      }
      uint64_t v30 = *(void *)(result + 192);
      uint64_t v31 = v29 - *(void *)(result + 200);
      uint64_t v32 = a2 - v31 + (v30 >> 1);
      if (v32 >= 1)
      {
        if (v32 < v30) {
          unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v84;
        }
        uint64_t v33 = v31 + 0x1000000;
        uint64_t v34 = 32;
        goto LABEL_26;
      }
LABEL_40:
      --a4;
      a2 += v11;
      a3 += v10;
      v12 += 20;
      *(unsigned char *)++uint64_t v13 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v85)
    {
      uint64_t v34 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v33 = a2;
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(result + 192);
    uint64_t v36 = *(void *)(result + 200) + v85;
    uint64_t v37 = v36 - a2 + (v35 >> 1);
    if (v37 < 1) {
      goto LABEL_40;
    }
    if (v37 < v35) {
      unsigned int v27 = ((v27 >> 15) * (((unint64_t)(*(void *)(result + 208) * v37) >> 32) >> 15)) | v84;
    }
    uint64_t v33 = v36 - 0x1000000;
    uint64_t v34 = 28;
LABEL_26:
    if (v27 < 0x400000) {
      goto LABEL_40;
    }
    uint64_t v38 = v28 >> 32;
    uint64_t v39 = v4 + SHIDWORD(v28) * (uint64_t)v6;
    unint64_t v40 = (v33 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v41 = v39 + v40;
    unint64_t v42 = *(float **)(result + 32);
    if (v17 >= v39 + v40) {
      int v43 = (float *)(v39 + v40);
    }
    else {
      int v43 = (float *)v17;
    }
    if (v43 >= v42) {
      unint64_t v44 = v43;
    }
    else {
      unint64_t v44 = *(float **)(result + 32);
    }
    if (v5)
    {
      unint64_t v45 = v5 + (int)v38 * (uint64_t)v7 + v40;
      int v46 = *(float **)(result + 40);
      if (v16 >= v45) {
        unsigned int v47 = (float *)v45;
      }
      else {
        unsigned int v47 = (float *)v16;
      }
      if (v47 >= v46) {
        int v46 = v47;
      }
      float v48 = *v46;
    }
    else
    {
      unint64_t v45 = 0;
      float v48 = 1.0;
    }
    float v49 = *v44;
    if (!v8) {
      goto LABEL_93;
    }
    unsigned int v50 = *(_DWORD *)(v8 + (v34 | v26));
LABEL_46:
    int v51 = v50 & 0xF;
    int v52 = HIBYTE(v50) & 3;
    if (v51 == 1)
    {
      uint64_t v66 = (float *)(v41 + SBYTE1(v50) * (uint64_t)v6);
      if (v17 < (unint64_t)v66) {
        uint64_t v66 = (float *)v17;
      }
      if (v66 < v42) {
        uint64_t v66 = v42;
      }
      float v67 = *v66;
      float v68 = 1.0;
      if (v5)
      {
        int v69 = (float *)(v45 + SBYTE1(v50) * (uint64_t)v7);
        if (v16 < (unint64_t)v69) {
          int v69 = (float *)v16;
        }
        if ((unint64_t)v69 < *(void *)(result + 40)) {
          int v69 = *(float **)(result + 40);
        }
        float v68 = *v69;
      }
      unint64_t v70 = &interpolate_waf[2 * v52];
    }
    else
    {
      if (v51 != 2)
      {
        if (v51 == 3)
        {
          unint64_t v53 = v41 + 4 * SBYTE2(v50);
          if (v17 >= v53) {
            unint64_t v54 = (float *)(v41 + 4 * SBYTE2(v50));
          }
          else {
            unint64_t v54 = (float *)v17;
          }
          if (v54 < v42) {
            unint64_t v54 = v42;
          }
          float v55 = *v54;
          unint64_t v56 = (float *)(v53 + SBYTE1(v50) * (uint64_t)v6);
          if (v17 < (unint64_t)v56) {
            unint64_t v56 = (float *)v17;
          }
          if (v56 < v42) {
            unint64_t v56 = v42;
          }
          float v57 = *v56;
          float v58 = 1.0;
          float v59 = 1.0;
          if (v5)
          {
            unint64_t v60 = v45 + 4 * SBYTE2(v50);
            unint64_t v61 = *(void *)(result + 40);
            if (v16 >= v60) {
              unint64_t v62 = (float *)(v45 + 4 * SBYTE2(v50));
            }
            else {
              unint64_t v62 = (float *)v16;
            }
            if ((unint64_t)v62 < v61) {
              unint64_t v62 = *(float **)(result + 40);
            }
            float v58 = *v62;
            unint64_t v63 = (float *)(v60 + SBYTE1(v50) * (uint64_t)v7);
            if (v16 < (unint64_t)v63) {
              unint64_t v63 = (float *)v16;
            }
            if ((unint64_t)v63 < v61) {
              unint64_t v63 = *(float **)(result + 40);
            }
            float v59 = *v63;
          }
          float v64 = interpolate_waf[2 * v52 + 1];
          float v65 = interpolate_waf[2 * ((v50 >> 28) & 3) + 1];
          float v49 = (float)((float)((float)(v49 - (float)(v49 * v64)) + (float)(v55 * v64))
                      - (float)((float)((float)(v49 - (float)(v49 * v64)) + (float)(v55 * v64)) * v65))
              + (float)((float)((float)(v55 - (float)(v55 * v64)) + (float)(v57 * v64)) * v65);
          float v48 = (float)((float)((float)(v48 - (float)(v48 * v64)) + (float)(v58 * v64))
                      - (float)((float)((float)(v48 - (float)(v48 * v64)) + (float)(v58 * v64)) * v65))
              + (float)((float)((float)(v58 - (float)(v58 * v64)) + (float)(v59 * v64)) * v65);
        }
        goto LABEL_93;
      }
      unsigned int v71 = (float *)(v41 + 4 * SBYTE2(v50));
      if (v17 < (unint64_t)v71) {
        unsigned int v71 = (float *)v17;
      }
      if (v71 < v42) {
        unsigned int v71 = v42;
      }
      float v67 = *v71;
      float v68 = 1.0;
      if (v5)
      {
        unint64_t v72 = (float *)(v45 + 4 * SBYTE2(v50));
        if (v16 < (unint64_t)v72) {
          unint64_t v72 = (float *)v16;
        }
        if ((unint64_t)v72 < *(void *)(result + 40)) {
          unint64_t v72 = *(float **)(result + 40);
        }
        float v68 = *v72;
      }
      unint64_t v70 = &interpolate_waf[2 * ((v50 >> 28) & 3)];
    }
    float v73 = v70[1];
    float v49 = (float)(v49 - (float)(v49 * v73)) + (float)(v67 * v73);
    float v48 = (float)(v48 - (float)(v48 * v73)) + (float)(v68 * v73);
LABEL_93:
    *(void *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    *(float *)(v12 + 32) = v48 - v49;
    *(float *)(v12 + 36) = v48;
    *(unsigned char *)(v13 + 1) = v27 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v74 = 0;
    int v75 = (float *)(v12 + 56);
    a2 += v11;
    uint64_t v76 = v85 - a2;
    a3 += v10;
    uint64_t v77 = v87 - a3;
    while ((((a2 - v86) | v76 | (a3 - v9) | v77) & 0x8000000000000000) == 0)
    {
      uint64_t v78 = v4 + SHIDWORD(a3) * (uint64_t)v6;
      unint64_t v79 = (a2 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v41 = v78 + v79;
      unint64_t v42 = *(float **)(result + 32);
      if (v17 >= v78 + v79) {
        unint64_t v80 = (float *)(v78 + v79);
      }
      else {
        unint64_t v80 = (float *)v17;
      }
      if (v80 < v42) {
        unint64_t v80 = *(float **)(result + 32);
      }
      if (v5)
      {
        unint64_t v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v79;
        int v81 = *(float **)(result + 40);
        if (v16 >= v45) {
          unint64_t v82 = (float *)v45;
        }
        else {
          unint64_t v82 = (float *)v16;
        }
        if (v82 >= v81) {
          int v81 = v82;
        }
        float v48 = *v81;
      }
      else
      {
        float v48 = 1.0;
      }
      float v49 = *v80;
      if (v8)
      {
        unsigned int v50 = *(_DWORD *)(v8 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        if ((v50 & 0xF) != 0)
        {
          v13 += v74 + 1;
          uint64_t v12 = (uint64_t)(v75 - 9);
          a4 += ~v74;
          unsigned int v27 = -1;
          goto LABEL_46;
        }
      }
      *(void *)(v75 - 3) = 0;
      *(v75 - 4) = 0.0;
      *(v75 - 1) = v48 - v49;
      *int v75 = v48;
      uint64_t v83 = v13 + v74++;
      v75 += 5;
      a2 += v11;
      *(unsigned char *)(v83 + 2) = -1;
      v76 -= v11;
      a3 += v10;
      v77 -= v10;
      if (a4 - 1 == v74) {
        return result;
      }
    }
    v13 += v74 + 1;
    uint64_t v12 = (uint64_t)(v75 - 9);
    a4 += ~v74;
  }
  while (a4);
  return result;
}

uint64_t CMYKf_sample_RGBF(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11 = *(void *)(result + 32);
  int v12 = *(_DWORD *)(result + 24);
  uint64_t v13 = *(void *)(result + 176);
  uint64_t v14 = *(void *)(result + 64);
  uint64_t v15 = *(void *)(result + 72);
  uint64_t v16 = *(void *)(result + 80);
  uint64_t v17 = *(void *)(result + 88);
  uint64_t v18 = *(void *)(result + 112);
  uint64_t v19 = *(void *)(result + 120);
  uint64_t v20 = *(void *)(result + 152) - 20;
  uint64_t v21 = *(void *)(result + 144) - 1;
  int v22 = *(_DWORD *)(result + 188);
  unint64_t v23 = v11
      + ((*(_DWORD *)(result + 260) - 1) * v12)
      + 4 * (3 * *(_DWORD *)(result + 256) - 3)
      - 12;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v15)
    {
      if ((uint64_t)a3 <= v17)
      {
        uint64_t v32 = (a3 >> 22) & 0x3C0;
        unsigned int v33 = 0x3FFFFFFF;
        HIDWORD(v34) = HIDWORD(a3);
      }
      else
      {
        uint64_t v28 = *(void *)(result + 216);
        uint64_t v29 = *(void *)(result + 224) + v17;
        uint64_t v30 = v29 - a3 + (v28 >> 1);
        if (v30 < 1) {
          goto LABEL_34;
        }
        if (v30 >= v28) {
          LODWORD(v31) = 0x3FFFFFFF;
        }
        else {
          unint64_t v31 = (unint64_t)(*(void *)(result + 232) * v30) >> 32;
        }
        unsigned int v33 = v31 | v22;
        uint64_t v34 = v29 - 0x1000000;
        uint64_t v32 = 448;
      }
    }
    else
    {
      uint64_t v24 = *(void *)(result + 216);
      uint64_t v25 = v15 - *(void *)(result + 224);
      uint64_t v26 = a3 - v25 + (v24 >> 1);
      if (v26 < 1) {
        goto LABEL_34;
      }
      if (v26 >= v24) {
        LODWORD(v27) = 0x3FFFFFFF;
      }
      else {
        unint64_t v27 = (unint64_t)(*(void *)(result + 232) * v26) >> 32;
      }
      unsigned int v33 = v27 | v22;
      uint64_t v34 = v25 + 0x1000000;
      uint64_t v32 = 512;
    }
    if (a2 >= v14) {
      break;
    }
    uint64_t v35 = *(void *)(result + 192);
    uint64_t v36 = v14 - *(void *)(result + 200);
    uint64_t v37 = a2 - v36 + (v35 >> 1);
    if (v37 >= 1)
    {
      if (v37 < v35) {
        unsigned int v33 = ((v33 >> 15) * (((unint64_t)(*(void *)(result + 208) * v37) >> 32) >> 15)) | v22;
      }
      uint64_t v38 = v36 + 0x1000000;
      uint64_t v39 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v18;
    a3 += v19;
    v20 += 20;
    *(unsigned char *)++uint64_t v21 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v16)
  {
    uint64_t v39 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v38 = a2;
    goto LABEL_26;
  }
  uint64_t v40 = *(void *)(result + 192);
  uint64_t v41 = *(void *)(result + 200) + v16;
  uint64_t v42 = v41 - a2 + (v40 >> 1);
  if (v42 < 1) {
    goto LABEL_34;
  }
  if (v42 < v40) {
    unsigned int v33 = ((v33 >> 15) * (((unint64_t)(*(void *)(result + 208) * v42) >> 32) >> 15)) | v22;
  }
  uint64_t v38 = v41 - 0x1000000;
  uint64_t v39 = 28;
LABEL_26:
  if (v33 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v43 = v38 >> 32;
  uint64_t v44 = v11 + SHIDWORD(v34) * (uint64_t)v12;
  unint64_t v45 = v44 + 12 * (int)v43;
  int v46 = *(int8x8_t **)(result + 32);
  if (v23 >= v45) {
    unsigned int v47 = (int8x8_t *)(v44 + 12 * (int)v43);
  }
  else {
    unsigned int v47 = (int8x8_t *)v23;
  }
  if (v47 < v46) {
    unsigned int v47 = *(int8x8_t **)(result + 32);
  }
  float32x2_t v48 = (float32x2_t)vrev32_s8(*v47);
  float v49 = COERCE_FLOAT(bswap32(v47[1].u32[0]));
  if (!v13) {
    goto LABEL_36;
  }
  unsigned int v50 = *(_DWORD *)(v13 + (v39 | v32));
LABEL_38:
  int v52 = v50 & 0xF;
  int v53 = HIBYTE(v50) & 3;
  if (v52 == 1)
  {
    unint64_t v60 = (int8x8_t *)(v45 + SBYTE1(v50) * (uint64_t)v12);
    if (v23 < (unint64_t)v60) {
      unint64_t v60 = (int8x8_t *)v23;
    }
    if (v60 < v46) {
      unint64_t v60 = v46;
    }
    float v61 = COERCE_FLOAT(bswap32(v60[1].u32[0]));
    LODWORD(a9) = interpolate_rgbaf_21353[4 * v53 + 3];
    int8x8_t v62 = *v60;
    goto LABEL_61;
  }
  if (v52 == 2)
  {
    unint64_t v63 = (int8x8_t *)(v45 + 12 * SBYTE2(v50));
    if (v23 < (unint64_t)v63) {
      unint64_t v63 = (int8x8_t *)v23;
    }
    if (v63 < v46) {
      unint64_t v63 = v46;
    }
    float v61 = COERCE_FLOAT(bswap32(v63[1].u32[0]));
    LODWORD(a9) = interpolate_rgbaf_21353[4 * ((v50 >> 28) & 3) + 3];
    int8x8_t v62 = *v63;
LABEL_61:
    float32x2_t v48 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a9, 0), (float32x2_t)vrev32_s8(v62), *(float *)&a9);
    float v49 = (float)(v49 - (float)(v49 * *(float *)&a9)) + (float)(v61 * *(float *)&a9);
    float v51 = *(float *)&a9 + (float)(1.0 - *(float *)&a9);
    goto LABEL_62;
  }
  if (v52 != 3)
  {
LABEL_36:
    float v51 = 1.0;
    goto LABEL_62;
  }
  unint64_t v54 = v45 + 12 * SBYTE2(v50);
  if (v23 >= v54) {
    float v55 = (int8x8_t *)(v45 + 12 * SBYTE2(v50));
  }
  else {
    float v55 = (int8x8_t *)v23;
  }
  if (v55 < v46) {
    float v55 = v46;
  }
  float v56 = COERCE_FLOAT(bswap32(v55[1].u32[0]));
  float v57 = (int8x8_t *)(v54 + SBYTE1(v50) * (uint64_t)v12);
  if (v23 < (unint64_t)v57) {
    float v57 = (int8x8_t *)v23;
  }
  if (v57 < v46) {
    float v57 = v46;
  }
  LODWORD(a10) = interpolate_rgbaf_21353[4 * v53 + 3];
  LODWORD(a11) = interpolate_rgbaf_21353[4 * ((v50 >> 28) & 3) + 3];
  float v49 = (float)((float)((float)(v49 - (float)(v49 * *(float *)&a10)) + (float)(v56 * *(float *)&a10))
              - (float)((float)((float)(v49 - (float)(v49 * *(float *)&a10)) + (float)(v56 * *(float *)&a10))
                      * *(float *)&a11))
      + (float)((float)((float)(v56 - (float)(v56 * *(float *)&a10))
                      + (float)(COERCE_FLOAT(bswap32(v57[1].u32[0])) * *(float *)&a10))
              * *(float *)&a11);
  float32x2_t v58 = (float32x2_t)vrev32_s8(*v55);
  float32x2_t v59 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a10, 0), v58, *(float *)&a10);
  a9 = COERCE_DOUBLE(vmla_n_f32(vmls_lane_f32(v58, v58, *(float32x2_t *)&a10, 0), (float32x2_t)vrev32_s8(*v57), *(float *)&a10));
  float32x2_t v48 = vmla_n_f32(vmls_lane_f32(v59, v59, *(float32x2_t *)&a11, 0), *(float32x2_t *)&a9, *(float *)&a11);
  float v51 = (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10))
              - (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10)) * *(float *)&a11))
      + (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10)) * *(float *)&a11);
LABEL_62:
  uint64_t v64 = 0;
  float v65 = (float *)(v20 + 36);
  a2 += v18;
  uint64_t v66 = v16 - a2;
  a3 += v19;
  uint64_t v67 = v17 - a3;
  while (1)
  {
    LODWORD(a9) = v48.i32[1];
    if (v48.f32[0] > v48.f32[1]) {
      *(float *)&a9 = v48.f32[0];
    }
    if (v49 > *(float *)&a9) {
      *(float *)&a9 = v49;
    }
    a10 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a9, 0));
    *((float32x2_t *)v65 - 2) = vsub_f32(*(float32x2_t *)&a10, v48);
    *(v65 - 2) = *(float *)&a9 - v49;
    *(v65 - 1) = v51 - *(float *)&a9;
    *float v65 = v51;
    *(unsigned char *)(v21 + 1 + v64) = v33 >> 22;
    if (a4 - 1 == v64) {
      return result;
    }
    if (((v67 | v66 | (a3 - v15) | (a2 - v14)) & 0x8000000000000000) != 0)
    {
      v21 += v64 + 1;
      uint64_t v20 = (uint64_t)(v65 - 4);
      a4 += ~v64;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v68 = v11 + SHIDWORD(a3) * (uint64_t)v12;
    unint64_t v45 = v68 + 12 * SHIDWORD(a2);
    int v46 = *(int8x8_t **)(result + 32);
    if (v23 >= v45) {
      int v69 = (int8x8_t *)(v68 + 12 * SHIDWORD(a2));
    }
    else {
      int v69 = (int8x8_t *)v23;
    }
    if (v69 < v46) {
      int v69 = *(int8x8_t **)(result + 32);
    }
    float32x2_t v48 = (float32x2_t)vrev32_s8(*v69);
    float v49 = COERCE_FLOAT(bswap32(v69[1].u32[0]));
    if (v13)
    {
      unsigned int v50 = *(_DWORD *)(v13 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v50 & 0xF) != 0)
      {
        v21 += v64 + 1;
        uint64_t v20 = (uint64_t)(v65 - 4);
        a4 += ~v64;
        unsigned int v33 = -1;
        goto LABEL_38;
      }
    }
    ++v64;
    v65 += 5;
    v66 -= v18;
    a2 += v18;
    a3 += v19;
    v67 -= v19;
    float v51 = 1.0;
    unsigned int v33 = -1;
  }
}

uint64_t CMYKf_sample_RGBf(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11 = *(void *)(result + 32);
  int v12 = *(_DWORD *)(result + 24);
  uint64_t v13 = *(void *)(result + 176);
  uint64_t v14 = *(void *)(result + 64);
  uint64_t v15 = *(void *)(result + 72);
  uint64_t v16 = *(void *)(result + 80);
  uint64_t v17 = *(void *)(result + 88);
  uint64_t v18 = *(void *)(result + 112);
  uint64_t v19 = *(void *)(result + 120);
  uint64_t v20 = *(void *)(result + 152) - 20;
  uint64_t v21 = *(void *)(result + 144) - 1;
  int v22 = *(_DWORD *)(result + 188);
  unint64_t v23 = v11
      + ((*(_DWORD *)(result + 260) - 1) * v12)
      + 4 * (3 * *(_DWORD *)(result + 256) - 3)
      - 12;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v15)
    {
      if ((uint64_t)a3 <= v17)
      {
        uint64_t v32 = (a3 >> 22) & 0x3C0;
        unsigned int v33 = 0x3FFFFFFF;
        HIDWORD(v34) = HIDWORD(a3);
      }
      else
      {
        uint64_t v28 = *(void *)(result + 216);
        uint64_t v29 = *(void *)(result + 224) + v17;
        uint64_t v30 = v29 - a3 + (v28 >> 1);
        if (v30 < 1) {
          goto LABEL_34;
        }
        if (v30 >= v28) {
          LODWORD(v31) = 0x3FFFFFFF;
        }
        else {
          unint64_t v31 = (unint64_t)(*(void *)(result + 232) * v30) >> 32;
        }
        unsigned int v33 = v31 | v22;
        uint64_t v34 = v29 - 0x1000000;
        uint64_t v32 = 448;
      }
    }
    else
    {
      uint64_t v24 = *(void *)(result + 216);
      uint64_t v25 = v15 - *(void *)(result + 224);
      uint64_t v26 = a3 - v25 + (v24 >> 1);
      if (v26 < 1) {
        goto LABEL_34;
      }
      if (v26 >= v24) {
        LODWORD(v27) = 0x3FFFFFFF;
      }
      else {
        unint64_t v27 = (unint64_t)(*(void *)(result + 232) * v26) >> 32;
      }
      unsigned int v33 = v27 | v22;
      uint64_t v34 = v25 + 0x1000000;
      uint64_t v32 = 512;
    }
    if (a2 >= v14) {
      break;
    }
    uint64_t v35 = *(void *)(result + 192);
    uint64_t v36 = v14 - *(void *)(result + 200);
    uint64_t v37 = a2 - v36 + (v35 >> 1);
    if (v37 >= 1)
    {
      if (v37 < v35) {
        unsigned int v33 = ((v33 >> 15) * (((unint64_t)(*(void *)(result + 208) * v37) >> 32) >> 15)) | v22;
      }
      uint64_t v38 = v36 + 0x1000000;
      uint64_t v39 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v18;
    a3 += v19;
    v20 += 20;
    *(unsigned char *)++uint64_t v21 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v16)
  {
    uint64_t v39 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v38 = a2;
    goto LABEL_26;
  }
  uint64_t v40 = *(void *)(result + 192);
  uint64_t v41 = *(void *)(result + 200) + v16;
  uint64_t v42 = v41 - a2 + (v40 >> 1);
  if (v42 < 1) {
    goto LABEL_34;
  }
  if (v42 < v40) {
    unsigned int v33 = ((v33 >> 15) * (((unint64_t)(*(void *)(result + 208) * v42) >> 32) >> 15)) | v22;
  }
  uint64_t v38 = v41 - 0x1000000;
  uint64_t v39 = 28;
LABEL_26:
  if (v33 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v43 = v38 >> 32;
  uint64_t v44 = v11 + SHIDWORD(v34) * (uint64_t)v12;
  unint64_t v45 = v44 + 12 * (int)v43;
  int v46 = *(float32x2_t **)(result + 32);
  if (v23 >= v45) {
    unsigned int v47 = (float32x2_t *)(v44 + 12 * (int)v43);
  }
  else {
    unsigned int v47 = (float32x2_t *)v23;
  }
  if (v47 < v46) {
    unsigned int v47 = *(float32x2_t **)(result + 32);
  }
  float32x2_t v48 = *v47;
  float v49 = v47[1].f32[0];
  if (!v13) {
    goto LABEL_36;
  }
  unsigned int v50 = *(_DWORD *)(v13 + (v39 | v32));
LABEL_38:
  int v52 = v50 & 0xF;
  int v53 = HIBYTE(v50) & 3;
  if (v52 == 1)
  {
    float32x2_t v58 = (float32x2_t *)(v45 + SBYTE1(v50) * (uint64_t)v12);
    if (v23 < (unint64_t)v58) {
      float32x2_t v58 = (float32x2_t *)v23;
    }
    if (v58 < v46) {
      float32x2_t v58 = v46;
    }
    float v59 = v58[1].f32[0];
    LODWORD(a9) = interpolate_rgbaf_21353[4 * v53 + 3];
    float32x2_t v60 = *v58;
    goto LABEL_61;
  }
  if (v52 == 2)
  {
    float v61 = (float32x2_t *)(v45 + 12 * SBYTE2(v50));
    if (v23 < (unint64_t)v61) {
      float v61 = (float32x2_t *)v23;
    }
    if (v61 < v46) {
      float v61 = v46;
    }
    float v59 = v61[1].f32[0];
    LODWORD(a9) = interpolate_rgbaf_21353[4 * ((v50 >> 28) & 3) + 3];
    float32x2_t v60 = *v61;
LABEL_61:
    float32x2_t v48 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a9, 0), v60, *(float *)&a9);
    float v49 = (float)(v49 - (float)(v49 * *(float *)&a9)) + (float)(v59 * *(float *)&a9);
    float v51 = *(float *)&a9 + (float)(1.0 - *(float *)&a9);
    goto LABEL_62;
  }
  if (v52 != 3)
  {
LABEL_36:
    float v51 = 1.0;
    goto LABEL_62;
  }
  unint64_t v54 = v45 + 12 * SBYTE2(v50);
  if (v23 >= v54) {
    float v55 = (float32x2_t *)(v45 + 12 * SBYTE2(v50));
  }
  else {
    float v55 = (float32x2_t *)v23;
  }
  if (v55 < v46) {
    float v55 = v46;
  }
  float v56 = (float32x2_t *)(v54 + SBYTE1(v50) * (uint64_t)v12);
  if (v23 < (unint64_t)v56) {
    float v56 = (float32x2_t *)v23;
  }
  if (v56 < v46) {
    float v56 = v46;
  }
  LODWORD(a10) = interpolate_rgbaf_21353[4 * v53 + 3];
  LODWORD(a11) = interpolate_rgbaf_21353[4 * ((v50 >> 28) & 3) + 3];
  float v49 = (float)((float)((float)(v49 - (float)(v49 * *(float *)&a10)) + (float)(v55[1].f32[0] * *(float *)&a10))
              - (float)((float)((float)(v49 - (float)(v49 * *(float *)&a10)) + (float)(v55[1].f32[0] * *(float *)&a10))
                      * *(float *)&a11))
      + (float)((float)((float)(v55[1].f32[0] - (float)(v55[1].f32[0] * *(float *)&a10))
                      + (float)(v56[1].f32[0] * *(float *)&a10))
              * *(float *)&a11);
  float32x2_t v57 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a10, 0), *v55, *(float *)&a10);
  a9 = COERCE_DOUBLE(vmla_n_f32(vmls_lane_f32(*v55, *v55, *(float32x2_t *)&a10, 0), *v56, *(float *)&a10));
  float32x2_t v48 = vmla_n_f32(vmls_lane_f32(v57, v57, *(float32x2_t *)&a11, 0), *(float32x2_t *)&a9, *(float *)&a11);
  float v51 = (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10))
              - (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10)) * *(float *)&a11))
      + (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10)) * *(float *)&a11);
LABEL_62:
  uint64_t v62 = 0;
  unint64_t v63 = (float *)(v20 + 36);
  a2 += v18;
  uint64_t v64 = v16 - a2;
  a3 += v19;
  uint64_t v65 = v17 - a3;
  while (1)
  {
    LODWORD(a9) = v48.i32[1];
    if (v48.f32[0] > v48.f32[1]) {
      *(float *)&a9 = v48.f32[0];
    }
    if (v49 > *(float *)&a9) {
      *(float *)&a9 = v49;
    }
    a10 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a9, 0));
    *((float32x2_t *)v63 - 2) = vsub_f32(*(float32x2_t *)&a10, v48);
    *(v63 - 2) = *(float *)&a9 - v49;
    *(v63 - 1) = v51 - *(float *)&a9;
    *unint64_t v63 = v51;
    *(unsigned char *)(v21 + 1 + v62) = v33 >> 22;
    if (a4 - 1 == v62) {
      return result;
    }
    if (((v65 | v64 | (a3 - v15) | (a2 - v14)) & 0x8000000000000000) != 0)
    {
      v21 += v62 + 1;
      uint64_t v20 = (uint64_t)(v63 - 4);
      a4 += ~v62;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v66 = v11 + SHIDWORD(a3) * (uint64_t)v12;
    unint64_t v45 = v66 + 12 * SHIDWORD(a2);
    int v46 = *(float32x2_t **)(result + 32);
    if (v23 >= v45) {
      uint64_t v67 = (float32x2_t *)(v66 + 12 * SHIDWORD(a2));
    }
    else {
      uint64_t v67 = (float32x2_t *)v23;
    }
    if (v67 < v46) {
      uint64_t v67 = *(float32x2_t **)(result + 32);
    }
    float32x2_t v48 = *v67;
    float v49 = v67[1].f32[0];
    if (v13)
    {
      unsigned int v50 = *(_DWORD *)(v13 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v50 & 0xF) != 0)
      {
        v21 += v62 + 1;
        uint64_t v20 = (uint64_t)(v63 - 4);
        a4 += ~v62;
        unsigned int v33 = -1;
        goto LABEL_38;
      }
    }
    ++v62;
    v63 += 5;
    v64 -= v18;
    a2 += v18;
    a3 += v19;
    v65 -= v19;
    float v51 = 1.0;
    unsigned int v33 = -1;
  }
}

uint64_t CMYKf_sample_RGBAF(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  int v13 = *(_DWORD *)(result + 24);
  uint64_t v14 = *(void *)(result + 176);
  uint64_t v15 = *(void *)(result + 64);
  uint64_t v16 = *(void *)(result + 72);
  uint64_t v17 = *(void *)(result + 80);
  uint64_t v18 = *(void *)(result + 88);
  uint64_t v19 = *(void *)(result + 112);
  uint64_t v20 = *(void *)(result + 120);
  int v21 = *(_DWORD *)(result + 188);
  uint64_t v22 = *(void *)(result + 152) - 20;
  uint64_t v23 = *(void *)(result + 144) - 1;
  uint64_t v25 = *(void *)(result + 32);
  uint64_t v24 = *(void *)(result + 40);
  unint64_t v26 = v25
      + ((*(_DWORD *)(result + 260) - 1) * v13)
      + 4 * (4 * *(_DWORD *)(result + 256) - 4)
      - 16;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v16)
    {
      if ((uint64_t)a3 <= v18)
      {
        uint64_t v35 = (a3 >> 22) & 0x3C0;
        unsigned int v36 = 0x3FFFFFFF;
        HIDWORD(v37) = HIDWORD(a3);
      }
      else
      {
        uint64_t v31 = *(void *)(result + 216);
        uint64_t v32 = *(void *)(result + 224) + v18;
        uint64_t v33 = v32 - a3 + (v31 >> 1);
        if (v33 < 1) {
          goto LABEL_34;
        }
        if (v33 >= v31) {
          LODWORD(v34) = 0x3FFFFFFF;
        }
        else {
          unint64_t v34 = (unint64_t)(*(void *)(result + 232) * v33) >> 32;
        }
        unsigned int v36 = v34 | v21;
        uint64_t v37 = v32 - 0x1000000;
        uint64_t v35 = 448;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(result + 216);
      uint64_t v28 = v16 - *(void *)(result + 224);
      uint64_t v29 = a3 - v28 + (v27 >> 1);
      if (v29 < 1) {
        goto LABEL_34;
      }
      if (v29 >= v27) {
        LODWORD(v30) = 0x3FFFFFFF;
      }
      else {
        unint64_t v30 = (unint64_t)(*(void *)(result + 232) * v29) >> 32;
      }
      unsigned int v36 = v30 | v21;
      uint64_t v37 = v28 + 0x1000000;
      uint64_t v35 = 512;
    }
    if (a2 >= v15) {
      break;
    }
    uint64_t v38 = *(void *)(result + 192);
    uint64_t v39 = v15 - *(void *)(result + 200);
    uint64_t v40 = a2 - v39 + (v38 >> 1);
    if (v40 >= 1)
    {
      if (v40 < v38) {
        unsigned int v36 = ((v36 >> 15) * (((unint64_t)(*(void *)(result + 208) * v40) >> 32) >> 15)) | v21;
      }
      uint64_t v41 = v39 + 0x1000000;
      uint64_t v42 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v19;
    a3 += v20;
    v22 += 20;
    *(unsigned char *)++uint64_t v23 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v17)
  {
    uint64_t v42 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v41 = a2;
    goto LABEL_26;
  }
  uint64_t v43 = *(void *)(result + 192);
  uint64_t v44 = *(void *)(result + 200) + v17;
  uint64_t v45 = v44 - a2 + (v43 >> 1);
  if (v45 < 1) {
    goto LABEL_34;
  }
  if (v45 < v43) {
    unsigned int v36 = ((v36 >> 15) * (((unint64_t)(*(void *)(result + 208) * v45) >> 32) >> 15)) | v21;
  }
  uint64_t v41 = v44 - 0x1000000;
  uint64_t v42 = 28;
LABEL_26:
  if (v36 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v46 = v25 + SHIDWORD(v37) * (uint64_t)v13;
  uint64_t v47 = v41 >> 32;
  unint64_t v48 = v46 + 16 * v47;
  float v49 = *(int8x8_t **)(result + 32);
  if (v26 >= v48) {
    unsigned int v50 = (int8x8_t *)(v46 + 16 * v47);
  }
  else {
    unsigned int v50 = (int8x8_t *)v26;
  }
  if (v50 < v49) {
    unsigned int v50 = *(int8x8_t **)(result + 32);
  }
  if (v24) {
    float v51 = COERCE_FLOAT(bswap32(v50[1].u32[1]));
  }
  else {
    float v51 = 1.0;
  }
  float32x2_t v52 = (float32x2_t)vrev32_s8(*v50);
  float v53 = COERCE_FLOAT(bswap32(v50[1].u32[0]));
  if (v14)
  {
    unsigned int v54 = *(_DWORD *)(v14 + (v42 | v35));
LABEL_40:
    int v55 = v54 & 0xF;
    int v56 = HIBYTE(v54) & 3;
    if (v55 == 1)
    {
      uint64_t v66 = (int8x8_t *)(v48 + SBYTE1(v54) * (uint64_t)v13);
      if (v26 < (unint64_t)v66) {
        uint64_t v66 = (int8x8_t *)v26;
      }
      if (v66 < v49) {
        uint64_t v66 = v49;
      }
      a8 = COERCE_DOUBLE(vrev32_s8(*v66));
      float v67 = COERCE_FLOAT(bswap32(v66[1].u32[0]));
      float v68 = 1.0;
      if (v24) {
        float v68 = COERCE_FLOAT(bswap32(v66[1].u32[1]));
      }
    }
    else
    {
      if (v55 != 2)
      {
        if (v55 == 3)
        {
          float32x2_t v57 = (int8x8_t *)(v48 + ((uint64_t)((unint64_t)HIWORD(v54) << 56) >> 52));
          if (v26 < (unint64_t)v57) {
            float32x2_t v57 = (int8x8_t *)v26;
          }
          if (v57 < v49) {
            float32x2_t v57 = v49;
          }
          float32x2_t v58 = (float32x2_t)vrev32_s8(*v57);
          float v59 = COERCE_FLOAT(bswap32(v57[1].u32[0]));
          float v60 = 1.0;
          float v61 = 1.0;
          if (v24) {
            float v61 = COERCE_FLOAT(bswap32(v57[1].u32[1]));
          }
          uint64_t v62 = (int8x8_t *)(v48 + SBYTE1(v54) * (uint64_t)v13 + 16 * SBYTE2(v54));
          if (v26 < (unint64_t)v62) {
            uint64_t v62 = (int8x8_t *)v26;
          }
          if (v62 < v49) {
            uint64_t v62 = v49;
          }
          float32x2_t v63 = (float32x2_t)vrev32_s8(*v62);
          float v64 = COERCE_FLOAT(bswap32(v62[1].u32[0]));
          if (v24) {
            float v60 = COERCE_FLOAT(bswap32(v62[1].u32[1]));
          }
          v11.i32[0] = interpolate_rgbaf_21353[4 * v56 + 3];
          v12.i32[0] = interpolate_rgbaf_21353[4 * ((v54 >> 28) & 3) + 3];
          float v53 = (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v59 * v11.f32[0]))
                      - (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v59 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v59 - (float)(v59 * v11.f32[0])) + (float)(v64 * v11.f32[0])) * v12.f32[0]);
          float32x2_t v65 = vmla_n_f32(vmls_lane_f32(v52, v52, v11, 0), v58, v11.f32[0]);
          a8 = COERCE_DOUBLE(vmla_n_f32(vmls_lane_f32(v58, v58, v11, 0), v63, v11.f32[0]));
          float32x2_t v52 = vmla_n_f32(vmls_lane_f32(v65, v65, v12, 0), *(float32x2_t *)&a8, v12.f32[0]);
          float v51 = (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v61 * v11.f32[0]))
                      - (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v61 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v61 - (float)(v61 * v11.f32[0])) + (float)(v60 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_70;
      }
      int v69 = (int8x8_t *)(v48 + ((uint64_t)((unint64_t)HIWORD(v54) << 56) >> 52));
      if (v26 < (unint64_t)v69) {
        int v69 = (int8x8_t *)v26;
      }
      if (v69 < v49) {
        int v69 = v49;
      }
      a8 = COERCE_DOUBLE(vrev32_s8(*v69));
      float v67 = COERCE_FLOAT(bswap32(v69[1].u32[0]));
      float v68 = 1.0;
      if (v24) {
        float v68 = COERCE_FLOAT(bswap32(v69[1].u32[1]));
      }
      int v56 = (v54 >> 28) & 3;
    }
    LODWORD(a11) = interpolate_rgbaf_21353[4 * v56 + 3];
    float32x2_t v52 = vmla_n_f32(vmls_lane_f32(v52, v52, *(float32x2_t *)&a11, 0), *(float32x2_t *)&a8, *(float *)&a11);
    float v53 = (float)(v53 - (float)(v53 * *(float *)&a11)) + (float)(v67 * *(float *)&a11);
    float v51 = (float)(v51 - (float)(v51 * *(float *)&a11)) + (float)(v68 * *(float *)&a11);
  }
LABEL_70:
  uint64_t v70 = 0;
  unsigned int v71 = (float *)(v22 + 36);
  a2 += v19;
  uint64_t v72 = v17 - a2;
  a3 += v20;
  uint64_t v73 = v18 - a3;
  while (1)
  {
    LODWORD(a++*(_DWORD *)(result + 8) = v52.i32[1];
    if (v52.f32[0] > v52.f32[1]) {
      *(float *)&a8 = v52.f32[0];
    }
    if (v53 > *(float *)&a8) {
      *(float *)&a8 = v53;
    }
    *((float32x2_t *)v71 - 2) = vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0), v52);
    *(v71 - 2) = *(float *)&a8 - v53;
    *(v71 - 1) = v51 - *(float *)&a8;
    *unsigned int v71 = v51;
    *(unsigned char *)(v23 + 1 + v70) = v36 >> 22;
    if (a4 - 1 == v70) {
      return result;
    }
    if (((v73 | v72 | (a3 - v16) | (a2 - v15)) & 0x8000000000000000) != 0)
    {
      uint64_t v22 = (uint64_t)(v71 - 4);
      v23 += v70 + 1;
      a4 += ~v70;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v74 = v25 + SHIDWORD(a3) * (uint64_t)v13;
    unint64_t v48 = v74 + 16 * (a2 >> 32);
    float v49 = *(int8x8_t **)(result + 32);
    if (v26 >= v48) {
      int v75 = (int8x8_t *)(v74 + 16 * (a2 >> 32));
    }
    else {
      int v75 = (int8x8_t *)v26;
    }
    if (v75 < v49) {
      int v75 = *(int8x8_t **)(result + 32);
    }
    if (v24) {
      float v51 = COERCE_FLOAT(bswap32(v75[1].u32[1]));
    }
    else {
      float v51 = 1.0;
    }
    float32x2_t v52 = (float32x2_t)vrev32_s8(*v75);
    float v53 = COERCE_FLOAT(bswap32(v75[1].u32[0]));
    if (v14)
    {
      unsigned int v54 = *(_DWORD *)(v14 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v54 & 0xF) != 0)
      {
        uint64_t v22 = (uint64_t)(v71 - 4);
        v23 += v70 + 1;
        a4 += ~v70;
        unsigned int v36 = -1;
        goto LABEL_40;
      }
    }
    v71 += 5;
    v72 -= v19;
    a2 += v19;
    ++v70;
    a3 += v20;
    v73 -= v20;
    unsigned int v36 = -1;
  }
}

uint64_t CMYKf_sample_RGBAf(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  int v13 = *(_DWORD *)(result + 24);
  uint64_t v14 = *(void *)(result + 176);
  uint64_t v15 = *(void *)(result + 64);
  uint64_t v16 = *(void *)(result + 72);
  uint64_t v17 = *(void *)(result + 80);
  uint64_t v18 = *(void *)(result + 88);
  uint64_t v19 = *(void *)(result + 112);
  uint64_t v20 = *(void *)(result + 120);
  int v21 = *(_DWORD *)(result + 188);
  uint64_t v22 = *(void *)(result + 152) - 20;
  uint64_t v23 = *(void *)(result + 144) - 1;
  uint64_t v25 = *(void *)(result + 32);
  uint64_t v24 = *(void *)(result + 40);
  unint64_t v26 = v25
      + ((*(_DWORD *)(result + 260) - 1) * v13)
      + 4 * (4 * *(_DWORD *)(result + 256) - 4)
      - 16;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v16)
    {
      if ((uint64_t)a3 <= v18)
      {
        uint64_t v35 = (a3 >> 22) & 0x3C0;
        unsigned int v36 = 0x3FFFFFFF;
        HIDWORD(v37) = HIDWORD(a3);
      }
      else
      {
        uint64_t v31 = *(void *)(result + 216);
        uint64_t v32 = *(void *)(result + 224) + v18;
        uint64_t v33 = v32 - a3 + (v31 >> 1);
        if (v33 < 1) {
          goto LABEL_34;
        }
        if (v33 >= v31) {
          LODWORD(v34) = 0x3FFFFFFF;
        }
        else {
          unint64_t v34 = (unint64_t)(*(void *)(result + 232) * v33) >> 32;
        }
        unsigned int v36 = v34 | v21;
        uint64_t v37 = v32 - 0x1000000;
        uint64_t v35 = 448;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(result + 216);
      uint64_t v28 = v16 - *(void *)(result + 224);
      uint64_t v29 = a3 - v28 + (v27 >> 1);
      if (v29 < 1) {
        goto LABEL_34;
      }
      if (v29 >= v27) {
        LODWORD(v30) = 0x3FFFFFFF;
      }
      else {
        unint64_t v30 = (unint64_t)(*(void *)(result + 232) * v29) >> 32;
      }
      unsigned int v36 = v30 | v21;
      uint64_t v37 = v28 + 0x1000000;
      uint64_t v35 = 512;
    }
    if (a2 >= v15) {
      break;
    }
    uint64_t v38 = *(void *)(result + 192);
    uint64_t v39 = v15 - *(void *)(result + 200);
    uint64_t v40 = a2 - v39 + (v38 >> 1);
    if (v40 >= 1)
    {
      if (v40 < v38) {
        unsigned int v36 = ((v36 >> 15) * (((unint64_t)(*(void *)(result + 208) * v40) >> 32) >> 15)) | v21;
      }
      uint64_t v41 = v39 + 0x1000000;
      uint64_t v42 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v19;
    a3 += v20;
    v22 += 20;
    *(unsigned char *)++uint64_t v23 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v17)
  {
    uint64_t v42 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v41 = a2;
    goto LABEL_26;
  }
  uint64_t v43 = *(void *)(result + 192);
  uint64_t v44 = *(void *)(result + 200) + v17;
  uint64_t v45 = v44 - a2 + (v43 >> 1);
  if (v45 < 1) {
    goto LABEL_34;
  }
  if (v45 < v43) {
    unsigned int v36 = ((v36 >> 15) * (((unint64_t)(*(void *)(result + 208) * v45) >> 32) >> 15)) | v21;
  }
  uint64_t v41 = v44 - 0x1000000;
  uint64_t v42 = 28;
LABEL_26:
  if (v36 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v46 = v25 + SHIDWORD(v37) * (uint64_t)v13;
  uint64_t v47 = v41 >> 32;
  unint64_t v48 = v46 + 16 * v47;
  float v49 = *(float32x2_t **)(result + 32);
  if (v26 >= v48) {
    unsigned int v50 = (float32x2_t *)(v46 + 16 * v47);
  }
  else {
    unsigned int v50 = (float32x2_t *)v26;
  }
  if (v50 < v49) {
    unsigned int v50 = *(float32x2_t **)(result + 32);
  }
  if (v24) {
    float v51 = v50[1].f32[1];
  }
  else {
    float v51 = 1.0;
  }
  float32x2_t v52 = *v50;
  float v53 = v50[1].f32[0];
  if (v14)
  {
    unsigned int v54 = *(_DWORD *)(v14 + (v42 | v35));
LABEL_40:
    int v55 = v54 & 0xF;
    int v56 = HIBYTE(v54) & 3;
    if (v55 == 1)
    {
      float v64 = (float32x2_t *)(v48 + SBYTE1(v54) * (uint64_t)v13);
      if (v26 < (unint64_t)v64) {
        float v64 = (float32x2_t *)v26;
      }
      if (v64 < v49) {
        float v64 = v49;
      }
      float32x2_t v65 = *v64;
      float v66 = v64[1].f32[0];
      float v67 = 1.0;
      if (v24) {
        float v67 = v64[1].f32[1];
      }
    }
    else
    {
      if (v55 != 2)
      {
        if (v55 == 3)
        {
          uint64_t v57 = SBYTE1(v54) * (uint64_t)v13;
          uint64_t v58 = 16 * SBYTE2(v54);
          float v59 = (float32x2_t *)(v48 + v58);
          if (v26 < v48 + v58) {
            float v59 = (float32x2_t *)v26;
          }
          if (v59 < v49) {
            float v59 = v49;
          }
          float32x2_t v60 = *v59;
          if (v24)
          {
            float v61 = v59[1].f32[1];
            uint64_t v62 = (float32x2_t *)(v48 + v57 + v58);
            if (v26 < (unint64_t)v62) {
              uint64_t v62 = (float32x2_t *)v26;
            }
            if (v62 < v49) {
              uint64_t v62 = v49;
            }
            float v63 = v62[1].f32[1];
          }
          else
          {
            uint64_t v62 = (float32x2_t *)(v48 + v57 + v58);
            if (v26 < (unint64_t)v62) {
              uint64_t v62 = (float32x2_t *)v26;
            }
            if (v62 < v49) {
              uint64_t v62 = v49;
            }
            float v61 = 1.0;
            float v63 = 1.0;
          }
          v11.i32[0] = interpolate_rgbaf_21353[4 * v56 + 3];
          v12.i32[0] = interpolate_rgbaf_21353[4 * ((v54 >> 28) & 3) + 3];
          float v53 = (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v59[1].f32[0] * v11.f32[0]))
                      - (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v59[1].f32[0] * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v59[1].f32[0] - (float)(v59[1].f32[0] * v11.f32[0]))
                              + (float)(v62[1].f32[0] * v11.f32[0]))
                      * v12.f32[0]);
          float32x2_t v69 = vmla_n_f32(vmls_lane_f32(v52, v52, v11, 0), v60, v11.f32[0]);
          a8 = COERCE_DOUBLE(vmla_n_f32(vmls_lane_f32(v60, v60, v11, 0), *v62, v11.f32[0]));
          float32x2_t v52 = vmla_n_f32(vmls_lane_f32(v69, v69, v12, 0), *(float32x2_t *)&a8, v12.f32[0]);
          float v51 = (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v61 * v11.f32[0]))
                      - (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v61 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v61 - (float)(v61 * v11.f32[0])) + (float)(v63 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_73;
      }
      float v68 = (float32x2_t *)(v48 + ((uint64_t)((unint64_t)HIWORD(v54) << 56) >> 52));
      if (v26 < (unint64_t)v68) {
        float v68 = (float32x2_t *)v26;
      }
      if (v68 < v49) {
        float v68 = v49;
      }
      float32x2_t v65 = *v68;
      float v66 = v68[1].f32[0];
      float v67 = 1.0;
      if (v24) {
        float v67 = v68[1].f32[1];
      }
      int v56 = (v54 >> 28) & 3;
    }
    LODWORD(a11) = interpolate_rgbaf_21353[4 * v56 + 3];
    float32x2_t v52 = vmla_n_f32(vmls_lane_f32(v52, v52, *(float32x2_t *)&a11, 0), v65, *(float *)&a11);
    float v53 = (float)(v53 - (float)(v53 * *(float *)&a11)) + (float)(v66 * *(float *)&a11);
    float v51 = (float)(v51 - (float)(v51 * *(float *)&a11)) + (float)(v67 * *(float *)&a11);
  }
LABEL_73:
  uint64_t v70 = 0;
  unsigned int v71 = (float *)(v22 + 36);
  a2 += v19;
  uint64_t v72 = v17 - a2;
  a3 += v20;
  uint64_t v73 = v18 - a3;
  while (1)
  {
    LODWORD(a++*(_DWORD *)(result + 8) = v52.i32[1];
    if (v52.f32[0] > v52.f32[1]) {
      *(float *)&a8 = v52.f32[0];
    }
    if (v53 > *(float *)&a8) {
      *(float *)&a8 = v53;
    }
    *((float32x2_t *)v71 - 2) = vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0), v52);
    *(v71 - 2) = *(float *)&a8 - v53;
    *(v71 - 1) = v51 - *(float *)&a8;
    *unsigned int v71 = v51;
    *(unsigned char *)(v23 + 1 + v70) = v36 >> 22;
    if (a4 - 1 == v70) {
      return result;
    }
    if (((v73 | v72 | (a3 - v16) | (a2 - v15)) & 0x8000000000000000) != 0)
    {
      v23 += v70 + 1;
      uint64_t v22 = (uint64_t)(v71 - 4);
      a4 += ~v70;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v74 = v25 + SHIDWORD(a3) * (uint64_t)v13;
    unint64_t v48 = v74 + 16 * (a2 >> 32);
    float v49 = *(float32x2_t **)(result + 32);
    if (v26 >= v48) {
      int v75 = (float32x2_t *)(v74 + 16 * (a2 >> 32));
    }
    else {
      int v75 = (float32x2_t *)v26;
    }
    if (v75 < v49) {
      int v75 = *(float32x2_t **)(result + 32);
    }
    if (v24) {
      float v51 = v75[1].f32[1];
    }
    else {
      float v51 = 1.0;
    }
    float32x2_t v52 = *v75;
    float v53 = v75[1].f32[0];
    if (v14)
    {
      unsigned int v54 = *(_DWORD *)(v14 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v54 & 0xF) != 0)
      {
        v23 += v70 + 1;
        uint64_t v22 = (uint64_t)(v71 - 4);
        a4 += ~v70;
        unsigned int v36 = -1;
        goto LABEL_40;
      }
    }
    ++v70;
    v71 += 5;
    v72 -= v19;
    a2 += v19;
    a3 += v20;
    v73 -= v20;
    unsigned int v36 = -1;
  }
}

uint64_t CMYKf_sample_CMYKF_inner(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  int v12 = *(_DWORD *)(result + 24);
  int v129 = *(_DWORD *)(result + 28);
  uint64_t v13 = *(void *)(result + 112);
  uint64_t v14 = *(void *)(result + 48);
  uint64_t v15 = *(void *)(result + 56);
  if (v14)
  {
    uint64_t v128 = *(void *)(result + 112);
    if (v13 > v14) {
      uint64_t v128 = v13 % v14;
    }
  }
  else
  {
    uint64_t v128 = 0;
  }
  uint64_t v16 = *(void *)(result + 176);
  uint64_t v17 = *(void *)(result + 40);
  uint64_t v130 = *(void *)(result + 32);
  uint64_t v18 = *(void *)(result + 120);
  if (v15)
  {
    uint64_t v19 = v18 % v15;
    if (v18 <= v15) {
      uint64_t v19 = *(void *)(result + 120);
    }
    uint64_t v127 = v19;
  }
  else
  {
    uint64_t v127 = 0;
  }
  uint64_t v123 = *(void *)(result + 80);
  uint64_t v125 = *(void *)(result + 88);
  uint64_t v20 = *(void *)(result + 152) - 20;
  uint64_t v21 = *(void *)(result + 144) - 1;
  int v22 = *(_DWORD *)(result + 260) - 1;
  unsigned int v23 = *(_DWORD *)(result + 256) - 1;
  unint64_t v24 = v17 + (v22 * v129) + 4 * v23;
  int v122 = *(_DWORD *)(result + 188);
  unint64_t v25 = v130 + (v22 * v12) + 16 * v23 - 16;
  uint64_t v124 = *(void *)(result + 64);
  uint64_t v126 = *(void *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 < v126)
      {
        uint64_t v26 = *(void *)(result + 216);
        uint64_t v27 = v126 - *(void *)(result + 224);
        uint64_t v28 = a3 - v27 + (v26 >> 1);
        if (v28 < 1) {
          goto LABEL_57;
        }
        if (v28 >= v26) {
          LODWORD(v29) = 0x3FFFFFFF;
        }
        else {
          unint64_t v29 = (unint64_t)(*(void *)(result + 232) * v28) >> 32;
        }
        unsigned int v36 = v122 | v29;
        uint64_t v37 = v27 + 0x1000000;
        uint64_t v34 = a3 - (v27 + 0x1000000);
        uint64_t v35 = 512;
        goto LABEL_22;
      }
      if (a3 <= v125)
      {
        uint64_t v34 = 0;
        uint64_t v35 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v36 = 0x3FFFFFFF;
        uint64_t v37 = a3;
LABEL_22:
        uint64_t v38 = v124;
        goto LABEL_25;
      }
      uint64_t v30 = *(void *)(result + 216);
      uint64_t v31 = *(void *)(result + 224) + v125;
      uint64_t v32 = v31 - a3 + (v30 >> 1);
      if (v32 < 1) {
        goto LABEL_57;
      }
      if (v32 >= v30) {
        LODWORD(v33) = 0x3FFFFFFF;
      }
      else {
        unint64_t v33 = (unint64_t)(*(void *)(result + 232) * v32) >> 32;
      }
      uint64_t v38 = v124;
      unsigned int v36 = v122 | v33;
      uint64_t v37 = v31 - 0x1000000;
      uint64_t v34 = a3 - (v31 - 0x1000000);
      uint64_t v35 = 448;
LABEL_25:
      if (a2 >= v38) {
        break;
      }
      uint64_t v39 = *(void *)(result + 192);
      uint64_t v40 = v38 - *(void *)(result + 200);
      uint64_t v41 = a2 - v40 + (v39 >> 1);
      if (v41 >= 1)
      {
        if (v41 < v39) {
          unsigned int v36 = ((v36 >> 15) * (((unint64_t)(*(void *)(result + 208) * v41) >> 32) >> 15)) | v122;
        }
        uint64_t v42 = v40 + 0x1000000;
        uint64_t v43 = a2 - (v40 + 0x1000000);
        uint64_t v44 = 32;
        goto LABEL_36;
      }
LABEL_57:
      --a4;
      a2 += v13;
      a3 += v18;
      v20 += 20;
      *(unsigned char *)++uint64_t v21 = 0;
      if (!a4) {
        return result;
      }
    }
    if (a2 <= v123)
    {
      uint64_t v43 = 0;
      uint64_t v44 = ((unint64_t)a2 >> 26) & 0x3C;
      uint64_t v42 = a2;
      goto LABEL_36;
    }
    uint64_t v45 = *(void *)(result + 192);
    uint64_t v46 = *(void *)(result + 200) + v123;
    uint64_t v47 = v46 - a2 + (v45 >> 1);
    if (v47 < 1) {
      goto LABEL_57;
    }
    if (v47 < v45) {
      unsigned int v36 = ((v36 >> 15) * (((unint64_t)(*(void *)(result + 208) * v47) >> 32) >> 15)) | v122;
    }
    uint64_t v42 = v46 - 0x1000000;
    uint64_t v43 = a2 - (v46 - 0x1000000);
    uint64_t v44 = 28;
LABEL_36:
    if (v36 < 0x400000) {
      goto LABEL_57;
    }
    if (v14)
    {
      uint64_t v48 = (v15 & ((v37 % v15) >> 63)) + v37 % v15;
      uint64_t v49 = (v14 & ((v42 % v14) >> 63)) + v42 % v14;
      if (v48 >= v15) {
        uint64_t v50 = v15;
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v37 = v48 - v50;
      if (v49 >= v14) {
        uint64_t v51 = v14;
      }
      else {
        uint64_t v51 = 0;
      }
      uint64_t v42 = v49 - v51;
      v34 += v37;
      v43 += v42;
    }
    uint64_t v52 = v37 >> 32;
    uint64_t v53 = v130 + SHIDWORD(v37) * (uint64_t)v12;
    unint64_t v54 = (v42 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v55 = v53 + 4 * v54;
    int v56 = *(int8x16_t **)(result + 32);
    if (v25 >= v55) {
      uint64_t v57 = (int8x16_t *)(v53 + 4 * v54);
    }
    else {
      uint64_t v57 = (int8x16_t *)v25;
    }
    if (v57 < v56) {
      uint64_t v57 = *(int8x16_t **)(result + 32);
    }
    if (v17)
    {
      unint64_t v58 = v17 + (int)v52 * (uint64_t)v129 + v54;
      float v59 = *(unsigned int **)(result + 40);
      if (v24 >= v58) {
        float32x2_t v60 = (unsigned int *)v58;
      }
      else {
        float32x2_t v60 = (unsigned int *)v24;
      }
      if (v60 >= v59) {
        float v59 = v60;
      }
      float v61 = COERCE_FLOAT(bswap32(*v59));
    }
    else
    {
      unint64_t v58 = 0;
      float v61 = 1.0;
    }
    float32x4_t v62 = (float32x4_t)vrev32q_s8(*v57);
    if (!v16) {
      goto LABEL_127;
    }
    unsigned int v63 = *(_DWORD *)(v16 + (v44 | v35));
LABEL_63:
    int v64 = v63 & 0xF;
    uint64_t v65 = v63 >> 8;
    int v66 = HIBYTE(v63) & 3;
    if (v64 == 1)
    {
      LODWORD(v90) = SBYTE1(v63);
      if (v14)
      {
        uint64_t v91 = v34 + ((uint64_t)SBYTE1(v63) << 32);
        uint64_t v92 = v15 & (v91 >> 63);
        if (v92 + v91 >= v15) {
          uint64_t v93 = v15;
        }
        else {
          uint64_t v93 = 0;
        }
        uint64_t v90 = (v92 + ((uint64_t)(char)v65 << 32) - v93) >> 32;
      }
      uint64_t v94 = (int8x16_t *)(v55 + (int)v90 * (uint64_t)v12);
      if (v25 < (unint64_t)v94) {
        uint64_t v94 = (int8x16_t *)v25;
      }
      if (v94 < v56) {
        uint64_t v94 = v56;
      }
      float32x4_t v95 = (float32x4_t)vrev32q_s8(*v94);
      float v96 = 1.0;
      if (v17)
      {
        uint64_t v97 = (unsigned int *)(v58 + (int)v90 * (uint64_t)v129);
        if (v24 < (unint64_t)v97) {
          uint64_t v97 = (unsigned int *)v24;
        }
        if ((unint64_t)v97 < *(void *)(result + 40)) {
          uint64_t v97 = *(unsigned int **)(result + 40);
        }
        float v96 = COERCE_FLOAT(bswap32(*v97));
      }
    }
    else
    {
      if (v64 != 2)
      {
        if (v64 == 3)
        {
          LODWORD(v67) = SBYTE1(v63);
          uint64_t v68 = SBYTE2(v63);
          if (v14)
          {
            uint64_t v69 = v65 << 56;
            int64_t v70 = (unint64_t)HIWORD(v63) << 56;
            uint64_t v71 = v34 + ((uint64_t)SBYTE1(v63) << 32);
            uint64_t v72 = v43 + (v70 >> 24);
            uint64_t v73 = v15 & (v71 >> 63);
            uint64_t v74 = v14 & (v72 >> 63);
            uint64_t v75 = v74 + v72;
            if (v73 + v71 >= v15) {
              uint64_t v76 = v15;
            }
            else {
              uint64_t v76 = 0;
            }
            if (v75 >= v14) {
              uint64_t v77 = v14;
            }
            else {
              uint64_t v77 = 0;
            }
            uint64_t v67 = (v73 + (v69 >> 24) - v76) >> 32;
            uint64_t v68 = (v74 + (v70 >> 24) - v77) >> 32;
          }
          unint64_t v78 = v55 + 16 * v68;
          if (v25 >= v78) {
            unint64_t v79 = (int8x16_t *)(v55 + 16 * v68);
          }
          else {
            unint64_t v79 = (int8x16_t *)v25;
          }
          if (v79 < v56) {
            unint64_t v79 = v56;
          }
          unint64_t v80 = (int8x16_t *)(v78 + (int)v67 * (uint64_t)v12);
          if (v25 < (unint64_t)v80) {
            unint64_t v80 = (int8x16_t *)v25;
          }
          if (v80 < v56) {
            unint64_t v80 = v56;
          }
          float32x4_t v81 = (float32x4_t)vrev32q_s8(*v79);
          float32x4_t v82 = (float32x4_t)vrev32q_s8(*v80);
          float v83 = 1.0;
          float v84 = 1.0;
          if (v17)
          {
            unint64_t v85 = v58 + 4 * v68;
            unint64_t v86 = *(void *)(result + 40);
            if (v24 >= v85) {
              uint64_t v87 = (unsigned int *)(v58 + 4 * v68);
            }
            else {
              uint64_t v87 = (unsigned int *)v24;
            }
            if ((unint64_t)v87 < v86) {
              uint64_t v87 = *(unsigned int **)(result + 40);
            }
            float v84 = COERCE_FLOAT(bswap32(*v87));
            uint64_t v88 = (unsigned int *)(v85 + (int)v67 * (uint64_t)v129);
            if (v24 < (unint64_t)v88) {
              uint64_t v88 = (unsigned int *)v24;
            }
            if ((unint64_t)v88 < v86) {
              uint64_t v88 = *(unsigned int **)(result + 40);
            }
            float v83 = COERCE_FLOAT(bswap32(*v88));
          }
          LODWORD(a11) = interpolate_cmykaf[5 * v66 + 4];
          LODWORD(a12) = interpolate_cmykaf[5 * ((v63 >> 28) & 3) + 4];
          float32x4_t v89 = vmlaq_n_f32(vmlsq_lane_f32(v62, v62, *(float32x2_t *)&a11, 0), v81, *(float *)&a11);
          float32x4_t v62 = vmlaq_n_f32(vmlsq_lane_f32(v89, v89, *(float32x2_t *)&a12, 0), vmlaq_n_f32(vmlsq_lane_f32(v81, v81, *(float32x2_t *)&a11, 0), v82, *(float *)&a11), *(float *)&a12);
          float v61 = (float)((float)((float)(v61 - (float)(v61 * *(float *)&a11)) + (float)(v84 * *(float *)&a11))
                      - (float)((float)((float)(v61 - (float)(v61 * *(float *)&a11)) + (float)(v84 * *(float *)&a11))
                              * *(float *)&a12))
              + (float)((float)((float)(v84 - (float)(v84 * *(float *)&a11)) + (float)(v83 * *(float *)&a11))
                      * *(float *)&a12);
        }
        goto LABEL_127;
      }
      uint64_t v98 = SBYTE2(v63);
      if (v14)
      {
        uint64_t v99 = v43 + ((uint64_t)SBYTE2(v63) << 32);
        uint64_t v100 = v14 & (v99 >> 63);
        if (v100 + v99 >= v14) {
          uint64_t v101 = v14;
        }
        else {
          uint64_t v101 = 0;
        }
        uint64_t v98 = (v100 + ((uint64_t)((unint64_t)HIWORD(v63) << 56) >> 24) - v101) >> 32;
      }
      unint64_t v102 = (int8x16_t *)(v55 + 16 * v98);
      if (v25 < (unint64_t)v102) {
        unint64_t v102 = (int8x16_t *)v25;
      }
      if (v102 < v56) {
        unint64_t v102 = v56;
      }
      float32x4_t v95 = (float32x4_t)vrev32q_s8(*v102);
      float v96 = 1.0;
      if (v17)
      {
        int v103 = (unsigned int *)(v58 + 4 * v98);
        if (v24 < (unint64_t)v103) {
          int v103 = (unsigned int *)v24;
        }
        if ((unint64_t)v103 < *(void *)(result + 40)) {
          int v103 = *(unsigned int **)(result + 40);
        }
        float v96 = COERCE_FLOAT(bswap32(*v103));
      }
      int v66 = (v63 >> 28) & 3;
    }
    LODWORD(a9) = interpolate_cmykaf[5 * v66 + 4];
    float32x4_t v62 = vmlaq_n_f32(vmlsq_lane_f32(v62, v62, *(float32x2_t *)&a9, 0), v95, *(float *)&a9);
    float v61 = (float)(v61 - (float)(v61 * *(float *)&a9)) + (float)(v96 * *(float *)&a9);
LABEL_127:
    *(float32x4_t *)(v20 + 20) = v62;
    *(float *)(v20 + 36) = v61;
    *(unsigned char *)(v21 + 1) = v36 >> 22;
    if (a4 == 1) {
      break;
    }
    uint64_t v104 = 0;
    uint64_t v105 = (float *)(v20 + 56);
    a2 += v13;
    uint64_t v106 = v123 - a2;
    a3 += v18;
    uint64_t v107 = v125 - a3;
    int v108 = --a4;
    while (1)
    {
      uint64_t v109 = v21 + v104 + 1;
      uint64_t v20 = (uint64_t)(v105 - 9);
      if ((v107 | v106 | (a3 - v126) | (a2 - v124)) < 0) {
        break;
      }
      if (v14)
      {
        uint64_t v110 = (v15 & ((v34 + v127) >> 63)) + v34 + v127;
        uint64_t v111 = (v14 & ((v43 + v128) >> 63)) + v43 + v128;
        if (v110 >= v15) {
          uint64_t v112 = v15;
        }
        else {
          uint64_t v112 = 0;
        }
        uint64_t v34 = v110 - v112;
        if (v111 >= v14) {
          uint64_t v113 = v14;
        }
        else {
          uint64_t v113 = 0;
        }
        uint64_t v43 = v111 - v113;
        uint64_t v114 = v34;
        uint64_t v115 = v43;
      }
      else
      {
        uint64_t v114 = a3;
        uint64_t v115 = a2;
      }
      uint64_t v116 = v114 >> 32;
      unint64_t v117 = (v115 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v55 = v130 + SHIDWORD(v114) * (uint64_t)v12 + 4 * v117;
      int v56 = *(int8x16_t **)(result + 32);
      if (v25 >= v55) {
        uint64_t v118 = (int8x16_t *)v55;
      }
      else {
        uint64_t v118 = (int8x16_t *)v25;
      }
      if (v118 < v56) {
        uint64_t v118 = *(int8x16_t **)(result + 32);
      }
      if (v17)
      {
        unint64_t v58 = v17 + (int)v116 * (uint64_t)v129 + v117;
        uint64_t v119 = *(unsigned int **)(result + 40);
        if (v24 >= v58) {
          uint64_t v120 = (unsigned int *)v58;
        }
        else {
          uint64_t v120 = (unsigned int *)v24;
        }
        if (v120 >= v119) {
          uint64_t v119 = v120;
        }
        float v61 = COERCE_FLOAT(bswap32(*v119));
      }
      else
      {
        float v61 = 1.0;
      }
      float32x4_t v62 = (float32x4_t)vrev32q_s8(*v118);
      if (v16)
      {
        unsigned int v63 = *(_DWORD *)(v16 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v63 & 0xF) != 0)
        {
          unsigned int v36 = -1;
          uint64_t v21 = v109;
          goto LABEL_63;
        }
      }
      --a4;
      *((float32x4_t *)v105 - 1) = v62;
      *uint64_t v105 = v61;
      v105 += 5;
      uint64_t v121 = v21 + v104++;
      a2 += v13;
      *(unsigned char *)(v121 + 2) = -1;
      v106 -= v13;
      a3 += v18;
      v107 -= v18;
      if (v108 == v104) {
        return result;
      }
    }
    v21 += v104 + 1;
  }
  while (a4);
  return result;
}

uint64_t CMYKf_sample_CMYKf_inner(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  int v13 = *(_DWORD *)(result + 24);
  int v132 = *(_DWORD *)(result + 28);
  uint64_t v14 = *(void *)(result + 112);
  uint64_t v15 = *(void *)(result + 48);
  uint64_t v16 = *(void *)(result + 56);
  if (v15)
  {
    uint64_t v131 = *(void *)(result + 112);
    if (v14 > v15) {
      uint64_t v131 = v14 % v15;
    }
  }
  else
  {
    uint64_t v131 = 0;
  }
  uint64_t v17 = *(void *)(result + 176);
  uint64_t v19 = *(void *)(result + 32);
  uint64_t v18 = *(void *)(result + 40);
  uint64_t v20 = *(void *)(result + 120);
  if (v16)
  {
    uint64_t v21 = v20 % v16;
    if (v20 <= v16) {
      uint64_t v21 = *(void *)(result + 120);
    }
    uint64_t v130 = v21;
  }
  else
  {
    uint64_t v130 = 0;
  }
  uint64_t v126 = *(void *)(result + 80);
  uint64_t v127 = *(void *)(result + 64);
  uint64_t v128 = *(void *)(result + 88);
  uint64_t v22 = *(void *)(result + 152) - 20;
  uint64_t v23 = *(void *)(result + 144) - 1;
  int v24 = *(_DWORD *)(result + 260) - 1;
  unsigned int v25 = *(_DWORD *)(result + 256) - 1;
  unint64_t v26 = v18 + (v24 * v132) + 4 * v25;
  int v125 = *(_DWORD *)(result + 188);
  unint64_t v27 = v19 + (v24 * v13) + 16 * v25 - 16;
  uint64_t v129 = *(void *)(result + 72);
  while (1)
  {
    if (a3 < v129)
    {
      uint64_t v28 = *(void *)(result + 216);
      uint64_t v29 = v129 - *(void *)(result + 224);
      uint64_t v30 = a3 - v29 + (v28 >> 1);
      if (v30 < 1) {
        goto LABEL_57;
      }
      if (v30 >= v28) {
        LODWORD(v31) = 0x3FFFFFFF;
      }
      else {
        unint64_t v31 = (unint64_t)(*(void *)(result + 232) * v30) >> 32;
      }
      unsigned int v38 = v125 | v31;
      uint64_t v39 = v29 + 0x1000000;
      uint64_t v36 = a3 - (v29 + 0x1000000);
      uint64_t v37 = 512;
      goto LABEL_22;
    }
    if (a3 <= v128)
    {
      uint64_t v36 = 0;
      uint64_t v37 = ((unint64_t)a3 >> 22) & 0x3C0;
      unsigned int v38 = 0x3FFFFFFF;
      uint64_t v39 = a3;
LABEL_22:
      uint64_t v40 = v127;
      goto LABEL_25;
    }
    uint64_t v32 = *(void *)(result + 216);
    uint64_t v33 = *(void *)(result + 224) + v128;
    uint64_t v34 = v33 - a3 + (v32 >> 1);
    if (v34 < 1) {
      goto LABEL_57;
    }
    if (v34 >= v32) {
      LODWORD(v35) = 0x3FFFFFFF;
    }
    else {
      unint64_t v35 = (unint64_t)(*(void *)(result + 232) * v34) >> 32;
    }
    uint64_t v40 = v127;
    unsigned int v38 = v125 | v35;
    uint64_t v39 = v33 - 0x1000000;
    uint64_t v36 = a3 - (v33 - 0x1000000);
    uint64_t v37 = 448;
LABEL_25:
    if (a2 >= v40) {
      break;
    }
    uint64_t v41 = *(void *)(result + 192);
    uint64_t v42 = v40 - *(void *)(result + 200);
    uint64_t v43 = a2 - v42 + (v41 >> 1);
    if (v43 >= 1)
    {
      if (v43 < v41) {
        unsigned int v38 = ((v38 >> 15) * (((unint64_t)(*(void *)(result + 208) * v43) >> 32) >> 15)) | v125;
      }
      uint64_t v44 = v42 + 0x1000000;
      uint64_t v45 = a2 - (v42 + 0x1000000);
      uint64_t v46 = 32;
      goto LABEL_36;
    }
LABEL_57:
    int v63 = a4 - 1;
    a2 += v14;
    a3 += v20;
    v22 += 20;
    *(unsigned char *)++uint64_t v23 = 0;
LABEL_58:
    a4 = v63;
    if (!v63) {
      return result;
    }
  }
  if (a2 <= v126)
  {
    uint64_t v45 = 0;
    uint64_t v46 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v44 = a2;
    goto LABEL_36;
  }
  uint64_t v47 = *(void *)(result + 192);
  uint64_t v48 = *(void *)(result + 200) + v126;
  uint64_t v49 = v48 - a2 + (v47 >> 1);
  if (v49 < 1) {
    goto LABEL_57;
  }
  if (v49 < v47) {
    unsigned int v38 = ((v38 >> 15) * (((unint64_t)(*(void *)(result + 208) * v49) >> 32) >> 15)) | v125;
  }
  uint64_t v44 = v48 - 0x1000000;
  uint64_t v45 = a2 - (v48 - 0x1000000);
  uint64_t v46 = 28;
LABEL_36:
  if (v38 < 0x400000) {
    goto LABEL_57;
  }
  if (v15)
  {
    uint64_t v50 = (v16 & ((v39 % v16) >> 63)) + v39 % v16;
    uint64_t v51 = (v15 & ((v44 % v15) >> 63)) + v44 % v15;
    if (v50 >= v16) {
      uint64_t v52 = v16;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v39 = v50 - v52;
    if (v51 >= v15) {
      uint64_t v53 = v15;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v44 = v51 - v53;
    v36 += v39;
    v45 += v44;
  }
  uint64_t v54 = v39 >> 32;
  unint64_t v55 = (v44 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v56 = v19 + SHIDWORD(v39) * (uint64_t)v13 + 4 * v55;
  uint64_t v57 = *(float32x4_t **)(result + 32);
  if (v27 >= v56) {
    unint64_t v58 = (float32x4_t *)v56;
  }
  else {
    unint64_t v58 = (float32x4_t *)v27;
  }
  if (v58 < v57) {
    unint64_t v58 = *(float32x4_t **)(result + 32);
  }
  if (v18)
  {
    unint64_t v59 = v18 + (int)v54 * (uint64_t)v132 + v55;
    float32x2_t v60 = *(float **)(result + 40);
    if (v26 >= v59) {
      float v61 = (float *)v59;
    }
    else {
      float v61 = (float *)v26;
    }
    if (v61 >= v60) {
      float32x2_t v60 = v61;
    }
    float v62 = *v60;
  }
  else
  {
    unint64_t v59 = 0;
    float v62 = 1.0;
  }
  float32x4_t v64 = *v58;
  if (v17)
  {
    unsigned int v65 = *(_DWORD *)(v17 + (v46 | v37));
LABEL_64:
    int v66 = v65 & 0xF;
    uint64_t v67 = v65 >> 8;
    int v68 = HIBYTE(v65) & 3;
    if (v66 == 1)
    {
      LODWORD(v92) = SBYTE1(v65);
      if (v15)
      {
        uint64_t v93 = v36 + ((uint64_t)SBYTE1(v65) << 32);
        uint64_t v94 = v16 & (v93 >> 63);
        if (v94 + v93 >= v16) {
          uint64_t v95 = v16;
        }
        else {
          uint64_t v95 = 0;
        }
        uint64_t v92 = (v94 + ((uint64_t)(char)v67 << 32) - v95) >> 32;
      }
      float v96 = (float32x4_t *)(v56 + (int)v92 * (uint64_t)v13);
      if (v27 < (unint64_t)v96) {
        float v96 = (float32x4_t *)v27;
      }
      if (v96 < v57) {
        float v96 = v57;
      }
      float32x4_t v97 = *v96;
      float v98 = 1.0;
      if (v18)
      {
        uint64_t v99 = (float *)(v59 + (int)v92 * (uint64_t)v132);
        if (v26 < (unint64_t)v99) {
          uint64_t v99 = (float *)v26;
        }
        if ((unint64_t)v99 < *(void *)(result + 40)) {
          uint64_t v99 = *(float **)(result + 40);
        }
        float v98 = *v99;
      }
      uint64_t v100 = &interpolate_cmykaf[5 * v68];
    }
    else
    {
      if (v66 != 2)
      {
        if (v66 == 3)
        {
          LODWORD(v69) = SBYTE1(v65);
          uint64_t v70 = SBYTE2(v65);
          if (v15)
          {
            uint64_t v71 = v67 << 56;
            uint64_t v72 = v36 + ((uint64_t)SBYTE1(v65) << 32);
            uint64_t v73 = v45 + ((uint64_t)SBYTE2(v65) << 32);
            uint64_t v74 = v16 & (v72 >> 63);
            uint64_t v75 = v15 & (v73 >> 63);
            uint64_t v76 = v75 + v73;
            if (v74 + v72 >= v16) {
              uint64_t v77 = v16;
            }
            else {
              uint64_t v77 = 0;
            }
            if (v76 >= v15) {
              uint64_t v78 = v15;
            }
            else {
              uint64_t v78 = 0;
            }
            uint64_t v69 = (v74 + (v71 >> 24) - v77) >> 32;
            uint64_t v79 = v75 + ((uint64_t)((unint64_t)HIWORD(v65) << 56) >> 24) - v78;
            int v68 = HIBYTE(v65) & 3;
            uint64_t v70 = v79 >> 32;
          }
          unint64_t v80 = v56 + 16 * v70;
          if (v27 >= v80) {
            float32x4_t v81 = (float32x4_t *)(v56 + 16 * v70);
          }
          else {
            float32x4_t v81 = (float32x4_t *)v27;
          }
          if (v81 < v57) {
            float32x4_t v81 = v57;
          }
          float32x4_t v82 = (float32x4_t *)(v80 + (int)v69 * (uint64_t)v13);
          if (v27 < (unint64_t)v82) {
            float32x4_t v82 = (float32x4_t *)v27;
          }
          if (v82 < v57) {
            float32x4_t v82 = v57;
          }
          float32x4_t v83 = *v81;
          float32x4_t v84 = *v82;
          float v85 = 1.0;
          float v86 = 1.0;
          if (v18)
          {
            uint64_t v87 = (float *)(v59 + 4 * v70);
            unint64_t v88 = *(void *)(result + 40);
            if (v26 >= (unint64_t)v87) {
              float32x4_t v89 = v87;
            }
            else {
              float32x4_t v89 = (float *)v26;
            }
            if ((unint64_t)v89 < v88) {
              float32x4_t v89 = *(float **)(result + 40);
            }
            float v85 = *v89;
            uint64_t v90 = (float *)((char *)v87 + (int)v69 * (uint64_t)v132);
            if (v26 < (unint64_t)v90) {
              uint64_t v90 = (float *)v26;
            }
            if ((unint64_t)v90 < v88) {
              uint64_t v90 = *(float **)(result + 40);
            }
            float v86 = *v90;
          }
          LODWORD(a11) = interpolate_cmykaf[5 * v68 + 4];
          LODWORD(a12) = interpolate_cmykaf[5 * ((v65 >> 28) & 3) + 4];
          float32x4_t v91 = vmlaq_n_f32(vmlsq_lane_f32(v64, v64, *(float32x2_t *)&a11, 0), v83, *(float *)&a11);
          float32x4_t v64 = vmlaq_n_f32(vmlsq_lane_f32(v91, v91, *(float32x2_t *)&a12, 0), vmlaq_n_f32(vmlsq_lane_f32(v83, v83, *(float32x2_t *)&a11, 0), v84, *(float *)&a11), *(float *)&a12);
          float v62 = (float)((float)((float)(v62 - (float)(v62 * *(float *)&a11)) + (float)(v85 * *(float *)&a11))
                      - (float)((float)((float)(v62 - (float)(v62 * *(float *)&a11)) + (float)(v85 * *(float *)&a11))
                              * *(float *)&a12))
              + (float)((float)((float)(v85 - (float)(v85 * *(float *)&a11)) + (float)(v86 * *(float *)&a11))
                      * *(float *)&a12);
        }
        goto LABEL_129;
      }
      uint64_t v101 = SBYTE2(v65);
      if (v15)
      {
        int64_t v102 = (unint64_t)HIWORD(v65) << 56;
        uint64_t v103 = v45 + (v102 >> 24);
        uint64_t v104 = v15 & (v103 >> 63);
        if (v104 + v103 >= v15) {
          uint64_t v105 = v15;
        }
        else {
          uint64_t v105 = 0;
        }
        uint64_t v101 = (v104 + (v102 >> 24) - v105) >> 32;
      }
      uint64_t v106 = (float32x4_t *)(v56 + 16 * v101);
      if (v27 < (unint64_t)v106) {
        uint64_t v106 = (float32x4_t *)v27;
      }
      if (v106 < v57) {
        uint64_t v106 = v57;
      }
      float32x4_t v97 = *v106;
      float v98 = 1.0;
      if (v18)
      {
        uint64_t v107 = (float *)(v59 + 4 * v101);
        if (v26 < (unint64_t)v107) {
          uint64_t v107 = (float *)v26;
        }
        if ((unint64_t)v107 < *(void *)(result + 40)) {
          uint64_t v107 = *(float **)(result + 40);
        }
        float v98 = *v107;
      }
      uint64_t v100 = &interpolate_cmykaf[5 * ((v65 >> 28) & 3)];
    }
    LODWORD(a9) = v100[4];
    float32x4_t v64 = vmlaq_n_f32(vmlsq_lane_f32(v64, v64, *(float32x2_t *)&a9, 0), v97, *(float *)&a9);
    float v62 = (float)(v62 - (float)(v62 * *(float *)&a9)) + (float)(v98 * *(float *)&a9);
  }
LABEL_129:
  *(float32x4_t *)(v22 + 20) = v64;
  *(float *)(v22 + 36) = v62;
  *(unsigned char *)(v23 + 1) = v38 >> 22;
  if (a4 != 1)
  {
    uint64_t v108 = 0;
    uint64_t v109 = (float *)(v22 + 56);
    a2 += v14;
    uint64_t v110 = v126 - a2;
    a3 += v20;
    uint64_t v111 = v128 - a3;
    while (((v111 | v110 | (a3 - v129) | (a2 - v127)) & 0x8000000000000000) == 0)
    {
      if (v15)
      {
        uint64_t v112 = (v16 & ((v36 + v130) >> 63)) + v36 + v130;
        uint64_t v113 = (v15 & ((v45 + v131) >> 63)) + v45 + v131;
        if (v112 >= v16) {
          uint64_t v114 = v16;
        }
        else {
          uint64_t v114 = 0;
        }
        uint64_t v36 = v112 - v114;
        if (v113 >= v15) {
          uint64_t v115 = v15;
        }
        else {
          uint64_t v115 = 0;
        }
        uint64_t v45 = v113 - v115;
        uint64_t v116 = v36;
        uint64_t v117 = v45;
      }
      else
      {
        uint64_t v116 = a3;
        uint64_t v117 = a2;
      }
      uint64_t v118 = v116 >> 32;
      uint64_t v119 = v19 + (int)v118 * (uint64_t)v13;
      unint64_t v120 = (v117 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v56 = v119 + 4 * v120;
      uint64_t v57 = *(float32x4_t **)(result + 32);
      if (v27 >= v56) {
        uint64_t v121 = (float32x4_t *)(v119 + 4 * v120);
      }
      else {
        uint64_t v121 = (float32x4_t *)v27;
      }
      if (v121 < v57) {
        uint64_t v121 = *(float32x4_t **)(result + 32);
      }
      if (v18)
      {
        unint64_t v59 = v18 + (int)v118 * (uint64_t)v132 + v120;
        int v122 = *(float **)(result + 40);
        if (v26 >= v59) {
          uint64_t v123 = (float *)v59;
        }
        else {
          uint64_t v123 = (float *)v26;
        }
        if (v123 >= v122) {
          int v122 = v123;
        }
        float v62 = *v122;
      }
      else
      {
        float v62 = 1.0;
      }
      float32x4_t v64 = *v121;
      if (v17)
      {
        unsigned int v65 = *(_DWORD *)(v17 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v65 & 0xF) != 0)
        {
          v23 += v108 + 1;
          uint64_t v22 = (uint64_t)(v109 - 9);
          a4 += ~v108;
          unsigned int v38 = -1;
          goto LABEL_64;
        }
      }
      *((float32x4_t *)v109 - 1) = v64;
      *uint64_t v109 = v62;
      v109 += 5;
      uint64_t v124 = v23 + v108++;
      a2 += v14;
      *(unsigned char *)(v124 + 2) = -1;
      v110 -= v14;
      a3 += v20;
      v111 -= v20;
      if (a4 - 1 == v108) {
        return result;
      }
    }
    v23 += v108 + 1;
    uint64_t v22 = (uint64_t)(v109 - 9);
    int v63 = ~v108 + a4;
    goto LABEL_58;
  }
  return result;
}

float32x2_t *CMYKf_pattern(uint64_t a1, float32x2_t *a2, unsigned int a3, int a4, float32x2_t *a5, float a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v14 = *(_DWORD **)(*(void *)a1 + 64);
  LODWORD(a10) = *v14;
  LODWORD(a11) = v14[1];
  if (a2 && a3 > 0x13
    || (double v24 = a10,
        double v25 = a11,
        uint64_t v15 = (float32x2_t *)malloc_type_malloc(0x44uLL, 0x705560E0uLL),
        a10 = v24,
        a11 = v25,
        (a2 = v15) != 0))
  {
    if (*(float *)&a10 <= a6) {
      float v16 = a6;
    }
    else {
      float v16 = *(float *)&a10;
    }
    if (*(float *)&a11 < a6) {
      float v16 = *(float *)&a11;
    }
    if (a5) {
      int v17 = a4;
    }
    else {
      int v17 = 0;
    }
    float32x2_t v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
    if (v17 == 1)
    {
      v19.f32[0] = v16 * (float)(*(float *)&a11 - a5->f32[0]);
    }
    else if (v17 == 4)
    {
      float32x2_t v18 = vmul_n_f32(*a5, v16);
      *(float *)&a10 = v16 * a5[1].f32[0];
      v19.f32[0] = v16 * a5[1].f32[1];
    }
    else
    {
      v19.i32[0] = LODWORD(a10);
      if (v17 == 3)
      {
        float32x2_t v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11, 0);
        float32x2_t v20 = vmul_n_f32(vsub_f32(v19, *a5), v16);
        float v21 = v16 * (float)(*(float *)&a11 - a5[1].f32[0]);
        v19.i32[0] = v20.i32[1];
        if (v20.f32[0] < v20.f32[1]) {
          v19.f32[0] = v20.f32[0];
        }
        if (v21 < v19.f32[0]) {
          v19.f32[0] = v16 * (float)(*(float *)&a11 - a5[1].f32[0]);
        }
        float32x2_t v18 = vsub_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 0));
        *(float *)&a10 = v21 - v19.f32[0];
      }
    }
    *(_OWORD *)a2->f32 = xmmword_1850CDBE0;
    a2[3].i32[0] = 0;
    a2[2] = (float32x2_t)1;
    a2[6] = v18;
    a2[8].f32[0] = v16;
    uint64_t v22 = a2 + 8;
    if (v16 >= *(float *)&a11) {
      uint64_t v22 = 0;
    }
    a2[4] = (float32x2_t)&a2[6];
    a2[5] = (float32x2_t)v22;
    a2[7].i32[0] = LODWORD(a10);
    a2[7].i32[1] = v19.i32[0];
  }
  return a2;
}

uint64_t CMYKf_mark(uint64_t a1, __n128 a2)
{
  return CMYKf_mark_inner(*(void *)(*(void *)a1 + 56), a2);
}

uint64_t CMYKf_mark_inner(uint64_t a1, __n128 a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v752 = *MEMORY[0x1E4F143B8];
  float32x2_t v18 = *(__int32 **)(v3 + 96);
  uint64_t v19 = *(void *)(v3 + 48);
  uint64_t v20 = *(unsigned int *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v18 == 0) + 4 * (v19 == 0));
  if ((int)v20 > 27) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v22 = v3;
  unint64_t v23 = *(unsigned int *)(v3 + 4);
  unsigned int v24 = v23 - 1;
  if ((int)v23 < 1) {
    return 0;
  }
  int v25 = *(_DWORD *)(v3 + 8);
  uint64_t v26 = (v25 - 1);
  if (v25 < 1) {
    return 0;
  }
  unint64_t v27 = *(uint16x4_t **)(v3 + 136);
  if ((*(_DWORD *)v3 & 0xFF0000) == 0x50000 || !v27)
  {
    int v29 = *(_DWORD *)v3 & 0xFF00;
    uint64_t v690 = v3;
    int v691 = *(_DWORD *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v18 == 0) + 4 * (v19 == 0));
    if (v29 == 1024)
    {
      LODWORD(v746[0]) = *(_DWORD *)(v3 + 4);
      int v745 = v25;
      v17.i32[0] = 1.0;
      if (v18) {
        v17.i32[0] = *v18;
      }
      uint64_t v30 = *(void *)(v3 + 40);
      unint64_t v31 = (unint64_t)*(int *)(v3 + 28) >> 4;
      uint64_t v33 = *(int *)(v3 + 12);
      uint64_t v32 = *(int *)(v3 + 16);
      if (v19)
      {
        unint64_t v34 = (unint64_t)*(int *)(v3 + 32) >> 2;
        uint64_t v734 = v19 + 4 * (v33 + v34 * v32);
        unsigned int v728 = 1;
      }
      else
      {
        uint64_t v734 = 0;
        unint64_t v34 = 0;
        unsigned int v728 = 0;
      }
      float32x4_t v46 = *(float32x4_t *)*(void *)(v3 + 88);
      v13.f32[0] = 1.0 - v17.f32[0];
      uint64_t v47 = v33 + v32 * v31;
      unint64_t v48 = v30 + 16 * v47;
      float32x4_t v739 = v46;
      float32x4_t v741 = v17;
      float32x4_t v732 = v13;
      unint64_t v724 = v34;
      unint64_t v726 = (unint64_t)*(int *)(v3 + 28) >> 4;
      unint64_t v730 = v48;
      if (v27)
      {
        shape_enum_clip_alloc(v2, v3, (int *)v27, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v23, v25);
        uint64_t v50 = v49;
        uint64_t v51 = v734;
        unint64_t v52 = v34;
        if (v49) {
          goto LABEL_385;
        }
        return 1;
      }
      uint64_t v737 = 0;
      if (v19) {
        unint64_t v59 = v23;
      }
      else {
        unint64_t v59 = 0;
      }
      unint64_t v52 = v34 - v59;
      unint64_t v60 = v23;
      uint64_t v51 = v734;
      float v61 = (float32x4_t *)(v30 + 16 * v47);
      int v62 = v60;
LABEL_65:
      unint64_t v48 = v31 - v60;
      switch((int)v20)
      {
        case 0:
          unint64_t v98 = v34;
          uint64_t v99 = v48 + v62;
          unsigned int v100 = v745;
          uint64_t v101 = v745 - 1;
          int64_t v102 = (char *)&v61[(v99 * v101) & (v99 >> 63)];
          if (v99 < 0) {
            uint64_t v99 = -v99;
          }
          CGBlt_fillBytes(16 * v62, v745, 0, v102, 16 * v99);
          if (v19)
          {
            uint64_t v103 = v52 + v62;
            v51 += 4 * ((v103 * v101) & (v103 >> 63));
            if (v103 >= 0) {
              v52 += v62;
            }
            else {
              unint64_t v52 = -v103;
            }
            CGBlt_fillBytes(4 * v62, v100, 0, (char *)v51, 4 * v52);
          }
          unint64_t v34 = v98;
          goto LABEL_381;
        case 1:
          uint64_t v104 = v48 + v62;
          if (v104 < 0)
          {
            v61 += v104 * (v745 - 1);
            uint64_t v104 = -v104;
          }
          uint64_t v105 = *(void *)(v690 + 88);
          unsigned int v106 = v745;
          if (v105) {
            CGSFillDRAM64((unint64_t)v61, 16 * v104, 16 * v62, v745, v105, 16, 16, 1, 0, 0);
          }
          else {
            CGBlt_fillBytes(16 * v62, v745, 0, (char *)v61, 16 * v104);
          }
          uint64_t v50 = v737;
          if (v19)
          {
            unint64_t v264 = *(int **)(v690 + 96);
            if (!v264) {
              unint64_t v264 = (int *)&_CMYK_float_alpha;
            }
            v51 += 4 * (((v52 + v62) * (int)(v106 - 1)) & ((uint64_t)(v52 + v62) >> 63));
            if ((uint64_t)(v52 + v62) >= 0) {
              v52 += v62;
            }
            else {
              unint64_t v52 = -(uint64_t)(v52 + v62);
            }
            CGBlt_fillBytes(4 * v62, v106, *v264, (char *)v51, 4 * v52);
          }
          LODWORD(v20) = v691;
          unint64_t v48 = v730;
          goto LABEL_383;
        case 2:
          int v107 = v745;
          uint64_t v108 = 4 * v728;
          float32x4_t v109 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          uint64_t v110 = 16 * v728;
          if (v19)
          {
            do
            {
              int v111 = v62;
              if (v62 >= 4)
              {
                unsigned int v112 = (v62 >> 2) + 1;
                do
                {
                  *float v61 = vmlaq_f32(v46, v109, *v61);
                  *(float *)uint64_t v51 = v17.f32[0] + (float)(*(float *)v51 * v13.f32[0]);
                  v61[1] = vmlaq_f32(v46, v109, v61[1]);
                  *(float *)(v51 + 4) = v17.f32[0] + (float)(*(float *)(v51 + 4) * v13.f32[0]);
                  v61[2] = vmlaq_f32(v46, v109, v61[2]);
                  *(float *)(v51 + ++*(_DWORD *)(result + 8) = v17.f32[0] + (float)(*(float *)(v51 + 8) * v13.f32[0]);
                  v61[3] = vmlaq_f32(v46, v109, v61[3]);
                  *(float *)(v51 + 12) = v17.f32[0] + (float)(*(float *)(v51 + 12) * v13.f32[0]);
                  v61 += 4;
                  --v112;
                  v51 += v110;
                }
                while (v112 > 1);
                int v111 = v62 & 3;
              }
              if (v111 >= 1)
              {
                unsigned int v113 = v111 + 1;
                do
                {
                  *float v61 = vmlaq_f32(v46, v109, *v61);
                  ++v61;
                  *(float *)uint64_t v51 = v17.f32[0] + (float)(*(float *)v51 * v13.f32[0]);
                  v51 += v108;
                  --v113;
                }
                while (v113 > 1);
              }
              v61 += v48;
              v51 += 4 * v52;
              --v107;
            }
            while (v107);
          }
          else
          {
            do
            {
              int v114 = v62;
              if (v62 >= 4)
              {
                unsigned int v115 = (v62 >> 2) + 1;
                do
                {
                  float32x4_t v116 = vmlaq_f32(v46, v109, v61[1]);
                  *float v61 = vmlaq_f32(v46, v109, *v61);
                  v61[1] = v116;
                  float32x4_t v117 = vmlaq_f32(v46, v109, v61[3]);
                  v61[2] = vmlaq_f32(v46, v109, v61[2]);
                  v61[3] = v117;
                  v61 += 4;
                  --v115;
                  v51 += v110;
                }
                while (v115 > 1);
                int v114 = v62 & 3;
              }
              if (v114 >= 1)
              {
                unsigned int v118 = v114 + 1;
                do
                {
                  *float v61 = vmlaq_f32(v46, v109, *v61);
                  ++v61;
                  v51 += v108;
                  --v118;
                }
                while (v118 > 1);
              }
              v61 += v48;
              v51 += 4 * v52;
              --v107;
            }
            while (v107);
          }
          goto LABEL_380;
        case 3:
          int v119 = v745;
          do
          {
            int v120 = v62;
            do
            {
              float v121 = *(float *)v51;
              if (*(float *)v51 <= 0.0)
              {
                v61->i64[0] = 0;
                v61->i64[1] = 0;
                float v122 = 0.0;
              }
              else if (v121 >= 1.0)
              {
                *float v61 = v46;
                float v122 = v17.f32[0];
              }
              else
              {
                *float v61 = vmulq_n_f32(v46, v121);
                float v122 = v17.f32[0] * v121;
              }
              *(float *)uint64_t v51 = v122;
              ++v61;
              v51 += 4 * v728;
              --v120;
            }
            while (v120);
            v61 += v48;
            v51 += 4 * v52;
            --v119;
          }
          while (v119);
          goto LABEL_380;
        case 4:
          int v123 = v745;
          do
          {
            int v124 = v62;
            do
            {
              float v125 = 1.0 - *(float *)v51;
              if (v125 <= 0.0)
              {
                v61->i64[0] = 0;
                v61->i64[1] = 0;
                float v126 = 0.0;
              }
              else if (v125 >= 1.0)
              {
                *float v61 = v46;
                float v126 = v17.f32[0];
              }
              else
              {
                *float v61 = vmulq_n_f32(v46, v125);
                float v126 = v17.f32[0] * v125;
              }
              *(float *)uint64_t v51 = v126;
              ++v61;
              v51 += 4 * v728;
              --v124;
            }
            while (v124);
            v61 += v48;
            v51 += 4 * v52;
            --v123;
          }
          while (v123);
          goto LABEL_380;
        case 5:
          int v127 = v745;
          do
          {
            int v128 = v62;
            do
            {
              float v129 = *(float *)v51;
              *float v61 = vmlaq_n_f32(vmulq_n_f32(*v61, v13.f32[0]), v46, *(float *)v51);
              ++v61;
              *(float *)uint64_t v51 = (float)(v13.f32[0] * v129) + (float)(v17.f32[0] * v129);
              v51 += 4 * v728;
              --v128;
            }
            while (v128);
            v61 += v48;
            v51 += 4 * v52;
            --v127;
          }
          while (v127);
          goto LABEL_380;
        case 6:
          int v130 = v745;
          while (1)
          {
            int v131 = v62;
            do
            {
              float v132 = *(float *)v51;
              float v133 = 1.0 - *(float *)v51;
              if (v133 >= 1.0)
              {
                *float v61 = v46;
                float v134 = v17.f32[0];
              }
              else
              {
                if (v133 <= 0.0) {
                  goto LABEL_129;
                }
                *float v61 = vmlaq_n_f32(*v61, v46, v133);
                float v134 = v132 + (float)(v17.f32[0] * v133);
              }
              *(float *)uint64_t v51 = v134;
LABEL_129:
              ++v61;
              v51 += 4 * v728;
              --v131;
            }
            while (v131);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v130) {
              goto LABEL_380;
            }
          }
        case 7:
          int v135 = v745;
          uint64_t v136 = 4 * v728;
          if (v19)
          {
            do
            {
              int v137 = v62;
              do
              {
                *float v61 = vmulq_n_f32(*v61, v17.f32[0]);
                ++v61;
                *(float *)uint64_t v51 = v17.f32[0] * *(float *)v51;
                v51 += v136;
                --v137;
              }
              while (v137);
              v61 += v48;
              v51 += 4 * v52;
              --v135;
            }
            while (v135);
          }
          else
          {
            do
            {
              int v138 = v62;
              do
              {
                *float v61 = vmulq_n_f32(*v61, v17.f32[0]);
                ++v61;
                v51 += v136;
                --v138;
              }
              while (v138);
              v61 += v48;
              v51 += 4 * v52;
              --v135;
            }
            while (v135);
          }
          goto LABEL_380;
        case 8:
          int v139 = v745;
          uint64_t v140 = 4 * v728;
          if (v19)
          {
            do
            {
              int v141 = v62;
              do
              {
                *float v61 = vmulq_n_f32(*v61, v13.f32[0]);
                ++v61;
                *(float *)uint64_t v51 = v13.f32[0] * *(float *)v51;
                v51 += v140;
                --v141;
              }
              while (v141);
              v61 += v48;
              v51 += 4 * v52;
              --v139;
            }
            while (v139);
          }
          else
          {
            do
            {
              int v142 = v62;
              do
              {
                *float v61 = vmulq_n_f32(*v61, v13.f32[0]);
                ++v61;
                v51 += v140;
                --v142;
              }
              while (v142);
              v61 += v48;
              v51 += 4 * v52;
              --v139;
            }
            while (v139);
          }
          goto LABEL_380;
        case 9:
          int v143 = v745;
          do
          {
            int v144 = v62;
            do
            {
              float v145 = *(float *)v51;
              float v146 = 1.0 - *(float *)v51;
              *float v61 = vmlaq_n_f32(vmulq_n_f32(*v61, v17.f32[0]), v46, v146);
              ++v61;
              *(float *)uint64_t v51 = (float)(v17.f32[0] * v145) + (float)(v17.f32[0] * v146);
              v51 += 4 * v728;
              --v144;
            }
            while (v144);
            v61 += v48;
            v51 += 4 * v52;
            --v143;
          }
          while (v143);
          goto LABEL_380;
        case 10:
          int v147 = v745;
          do
          {
            int v148 = v62;
            do
            {
              float v149 = *(float *)v51;
              float v150 = 1.0 - *(float *)v51;
              *float v61 = vmlaq_n_f32(vmulq_n_f32(*v61, v13.f32[0]), v46, v150);
              ++v61;
              *(float *)uint64_t v51 = (float)(v13.f32[0] * v149) + (float)(v17.f32[0] * v150);
              v51 += 4 * v728;
              --v148;
            }
            while (v148);
            v61 += v48;
            v51 += 4 * v52;
            --v147;
          }
          while (v147);
          goto LABEL_380;
        case 11:
          float32x4_t v151 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          int v152 = v745;
          if (v19)
          {
            do
            {
              int v153 = v62;
              do
              {
                float v154 = *(float *)v51;
                float v155 = v17.f32[0] + *(float *)v51;
                float v156 = v61->f32[1];
                if (v155 > 1.0) {
                  float v155 = 1.0;
                }
                v61->f32[0] = v155 - (float)(v151.f32[0] + (float)(*(float *)v51 - v61->f32[0]));
                float v157 = v61->f32[3];
                float v158 = v151.f32[2] + (float)(*(float *)v51 - v61->f32[2]);
                v61->f32[1] = v155 - (float)(v151.f32[1] + (float)(v154 - v156));
                float v159 = v151.f32[3] + (float)(*(float *)v51 - v157);
                v61->f32[2] = v155 - v158;
                *(float *)uint64_t v51 = v155;
                v61->f32[3] = v155 - v159;
                ++v61;
                v51 += 4 * v728;
                --v153;
              }
              while (v153);
              v61 += v48;
              v51 += 4 * v52;
              --v152;
            }
            while (v152);
          }
          else
          {
            __asm { FMOV            V1.4S, #1.0 }
            do
            {
              int v266 = v62;
              do
              {
                *float v61 = vsubq_f32(_Q1, vaddq_f32(v151, vsubq_f32(_Q1, *v61)));
                ++v61;
                v51 += 4 * v728;
                --v266;
              }
              while (v266);
              v61 += v48;
              v51 += 4 * v52;
              --v152;
            }
            while (v152);
          }
          goto LABEL_380;
        case 12:
          int v160 = v745;
          uint64_t v161 = 4 * v728;
          if (v19)
          {
            do
            {
              int v162 = v62;
              do
              {
                float v163 = v17.f32[0] + *(float *)v51;
                if (v163 > 1.0) {
                  float v163 = 1.0;
                }
                v164.i64[0] = v61->i64[0];
                *(float *)uint64_t v51 = v163;
                v164.i64[1] = v61->i64[1];
                *v61++ = vaddq_f32(v46, v164);
                v51 += v161;
                --v162;
              }
              while (v162);
              v61 += v48;
              v51 += 4 * v52;
              --v160;
            }
            while (v160);
          }
          else
          {
            do
            {
              int v165 = v62;
              do
              {
                *float v61 = vaddq_f32(v46, *v61);
                ++v61;
                v51 += v161;
                --v165;
              }
              while (v165);
              v61 += v48;
              v51 += 4 * v52;
              --v160;
            }
            while (v160);
          }
          goto LABEL_380;
        case 13:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          int v166 = v745;
          float32x4_t v167 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          float32x4_t v168 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          v11.i32[0] = 1.0;
          int8x16_t v169 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            int v170 = v62;
            do
            {
              if (!v19)
              {
                v13.i32[0] = 1.0;
LABEL_185:
                float32x4_t v171 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), *v61);
                float32x4_t v172 = vmulq_f32(v171, v167);
                float32x4_t v173 = (float32x4_t)vbslq_s8(v169, (int8x16_t)vmlaq_f32(v172, v168, v171), (int8x16_t)v172);
                float32x4_t v174 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32(v173, v167, 1.0 - v13.f32[0]), (int8x16_t)v173);
                v13.f32[0] = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
                *float v61 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), v174);
                if (!v19) {
                  goto LABEL_187;
                }
                goto LABEL_186;
              }
              v13.i32[0] = *(_DWORD *)v51;
              if (*(float *)v51 > 0.0) {
                goto LABEL_185;
              }
              *float v61 = v46;
              v13.i32[0] = v17.i32[0];
LABEL_186:
              *(_DWORD *)uint64_t v51 = v13.i32[0];
LABEL_187:
              ++v61;
              v51 += 4 * v728;
              --v170;
            }
            while (v170);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v166) {
              goto LABEL_380;
            }
          }
        case 14:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float32x4_t v175 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          int v176 = v745;
          __asm { FMOV            V1.4S, #1.0 }
          while (1)
          {
            int v182 = v62;
            do
            {
              if (!v19)
              {
                v12.i32[0] = 1.0;
LABEL_197:
                v11.f32[0] = (float)(v17.f32[0] + v12.f32[0]) - (float)(v12.f32[0] * v17.f32[0]);
                float32x4_t v183 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), *v61);
                float32x4_t v12 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), vmlaq_f32(v183, vsubq_f32(_Q1, v183), v175));
                *float v61 = v12;
                if (!v19) {
                  goto LABEL_199;
                }
                goto LABEL_198;
              }
              v12.i32[0] = *(_DWORD *)v51;
              if (*(float *)v51 > 0.0) {
                goto LABEL_197;
              }
              *float v61 = v46;
              v11.i32[0] = v17.i32[0];
LABEL_198:
              *(_DWORD *)uint64_t v51 = v11.i32[0];
LABEL_199:
              ++v61;
              v51 += 4 * v728;
              --v182;
            }
            while (v182);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v176) {
              goto LABEL_380;
            }
          }
        case 15:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float v184 = v46.f32[1];
          uint64_t v185 = v46.i64[1];
          int v186 = v745;
          while (1)
          {
            int v187 = v62;
            do
            {
              if (v19)
              {
                float v188 = *(float *)v51;
                if (*(float *)v51 <= 0.0)
                {
                  *float v61 = v46;
                  *(_DWORD *)uint64_t v51 = v17.i32[0];
                  goto LABEL_212;
                }
              }
              else
              {
                float v188 = 1.0;
              }
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              PDAoverlayPDA(v750.f32, v61->f32[0], v61->f32[1], v61->f32[2], v61->f32[3], v188, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v46.f32[0], v184, *(float *)&v185, *((float *)&v185 + 1), v17.f32[0]);
              *float v61 = v750;
              if (v19) {
                *(_DWORD *)uint64_t v51 = v751;
              }
              float32x4_t v46 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_212:
              ++v61;
              v51 += 4 * v728;
              --v187;
            }
            while (v187);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v186) {
              goto LABEL_366;
            }
          }
        case 16:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          int v189 = v745;
          float32x4_t v190 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          float32x4_t v191 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          v11.i32[0] = 1.0;
          int8x16_t v192 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            int v193 = v62;
            do
            {
              if (!v19)
              {
                v13.i32[0] = 1.0;
LABEL_222:
                float32x4_t v194 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), *v61);
                float32x4_t v195 = vmulq_n_f32(v194, v17.f32[0]);
                float32x4_t v196 = vmulq_n_f32(v190, v13.f32[0]);
                float32x4_t v197 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v195, v196), (int8x16_t)v196, (int8x16_t)v195);
                float32x4_t v198 = (float32x4_t)vbslq_s8(v192, (int8x16_t)vmlaq_f32(v197, v191, v194), (int8x16_t)v197);
                float32x4_t v199 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32(v198, v190, 1.0 - v13.f32[0]), (int8x16_t)v198);
                v13.f32[0] = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
                *float v61 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), v199);
                if (!v19) {
                  goto LABEL_224;
                }
                goto LABEL_223;
              }
              v13.i32[0] = *(_DWORD *)v51;
              if (*(float *)v51 > 0.0) {
                goto LABEL_222;
              }
              *float v61 = v46;
              v13.i32[0] = v17.i32[0];
LABEL_223:
              *(_DWORD *)uint64_t v51 = v13.i32[0];
LABEL_224:
              ++v61;
              v51 += 4 * v728;
              --v193;
            }
            while (v193);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v189) {
              goto LABEL_380;
            }
          }
        case 17:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          int v200 = v745;
          float32x4_t v201 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          float32x4_t v202 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          v11.i32[0] = 1.0;
          int8x16_t v203 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            int v204 = v62;
            do
            {
              if (!v19)
              {
                v13.i32[0] = 1.0;
LABEL_234:
                float32x4_t v205 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), *v61);
                float32x4_t v206 = vmulq_n_f32(v205, v17.f32[0]);
                float32x4_t v207 = vmulq_n_f32(v201, v13.f32[0]);
                float32x4_t v208 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v207, v206), (int8x16_t)v207, (int8x16_t)v206);
                float32x4_t v209 = (float32x4_t)vbslq_s8(v203, (int8x16_t)vmlaq_f32(v208, v202, v205), (int8x16_t)v208);
                float32x4_t v210 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32(v209, v201, 1.0 - v13.f32[0]), (int8x16_t)v209);
                v13.f32[0] = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
                *float v61 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), v210);
                if (!v19) {
                  goto LABEL_236;
                }
                goto LABEL_235;
              }
              v13.i32[0] = *(_DWORD *)v51;
              if (*(float *)v51 > 0.0) {
                goto LABEL_234;
              }
              *float v61 = v46;
              v13.i32[0] = v17.i32[0];
LABEL_235:
              *(_DWORD *)uint64_t v51 = v13.i32[0];
LABEL_236:
              ++v61;
              v51 += 4 * v728;
              --v204;
            }
            while (v204);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v200) {
              goto LABEL_380;
            }
          }
        case 18:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float v211 = v46.f32[1];
          uint64_t v212 = v46.i64[1];
          int v213 = v745;
          while (1)
          {
            int v214 = v62;
            do
            {
              if (v19)
              {
                float v215 = *(float *)v51;
                if (*(float *)v51 <= 0.0)
                {
                  *float v61 = v46;
                  *(_DWORD *)uint64_t v51 = v17.i32[0];
                  goto LABEL_249;
                }
              }
              else
              {
                float v215 = 1.0;
              }
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              PDAcolordodgePDA(v750.f32, v61->f32[0], v61->f32[1], v61->f32[2], v61->f32[3], v215, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v46.f32[0], v211, *(float *)&v212, *((float *)&v212 + 1), v17.f32[0]);
              *float v61 = v750;
              if (v19) {
                *(_DWORD *)uint64_t v51 = v751;
              }
              float32x4_t v46 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_249:
              ++v61;
              v51 += 4 * v728;
              --v214;
            }
            while (v214);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v213) {
              goto LABEL_366;
            }
          }
        case 19:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float v216 = v46.f32[1];
          uint64_t v217 = v46.i64[1];
          int v218 = v745;
          while (1)
          {
            int v219 = v62;
            do
            {
              if (v19)
              {
                float v220 = *(float *)v51;
                if (*(float *)v51 <= 0.0)
                {
                  *float v61 = v46;
                  *(_DWORD *)uint64_t v51 = v17.i32[0];
                  goto LABEL_262;
                }
              }
              else
              {
                float v220 = 1.0;
              }
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              PDAcolorburnPDA(v750.f32, v61->f32[0], v61->f32[1], v61->f32[2], v61->f32[3], v220, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v46.f32[0], v216, *(float *)&v217, *((float *)&v217 + 1), v17.f32[0]);
              *float v61 = v750;
              if (v19) {
                *(_DWORD *)uint64_t v51 = v751;
              }
              float32x4_t v46 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_262:
              ++v61;
              v51 += 4 * v728;
              --v219;
            }
            while (v219);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v218) {
              goto LABEL_366;
            }
          }
        case 20:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          __int32 v221 = v46.i32[1];
          uint64_t v222 = v46.i64[1];
          int v223 = v745;
          while (1)
          {
            int v224 = v62;
            do
            {
              if (v19)
              {
                v13.i32[0] = *(_DWORD *)v51;
                if (*(float *)v51 <= 0.0)
                {
                  *float v61 = v46;
                  *(_DWORD *)uint64_t v51 = v17.i32[0];
                  goto LABEL_275;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v9.i32[0] = v61->i32[0];
              PDAsoftlightPDA(&v750, *(float32x2_t *)v9.f32, v61->f32[1], v61->f32[2], v61->f32[3], *(double *)v13.i64, *(int32x2_t *)v14.f32, *(double *)v15.i64, *(double *)v16.i64, v3, (uint64_t)v27, v4, v5, v6, v7, v8, (float32x2_t)__PAIR64__(v221, v46.u32[0]), *(float *)&v222, *((float *)&v222 + 1),
                v17.f32[0]);
              v9.i32[1] = v750.i32[1];
              *float v61 = v750;
              if (v19) {
                *(_DWORD *)uint64_t v51 = v751;
              }
              float32x4_t v46 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_275:
              ++v61;
              v51 += 4 * v728;
              --v224;
            }
            while (v224);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v223) {
              goto LABEL_366;
            }
          }
        case 21:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float v225 = v46.f32[1];
          uint64_t v226 = v46.i64[1];
          int v227 = v745;
          while (1)
          {
            int v228 = v62;
            do
            {
              if (v19)
              {
                float v229 = *(float *)v51;
                if (*(float *)v51 <= 0.0)
                {
                  *float v61 = v46;
                  *(_DWORD *)uint64_t v51 = v17.i32[0];
                  goto LABEL_288;
                }
              }
              else
              {
                float v229 = 1.0;
              }
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              PDAhardlightPDA(v750.f32, v61->f32[0], v61->f32[1], v61->f32[2], v61->f32[3], v229, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v46.f32[0], v225, *(float *)&v226, *((float *)&v226 + 1), v17.f32[0]);
              *float v61 = v750;
              if (v19) {
                *(_DWORD *)uint64_t v51 = v751;
              }
              float32x4_t v46 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_288:
              ++v61;
              v51 += 4 * v728;
              --v228;
            }
            while (v228);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v227) {
              goto LABEL_366;
            }
          }
        case 22:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          int v230 = v745;
          float32x4_t v231 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          while (1)
          {
            int v232 = v62;
            do
            {
              if (!v19)
              {
                v11.i32[0] = 1.0;
LABEL_298:
                v10.f32[0] = (float)(v11.f32[0] + v17.f32[0]) - (float)(v11.f32[0] * v17.f32[0]);
                float32x4_t v233 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *v61);
                float32x4_t v234 = vaddq_f32(v233, v231);
                float32x4_t v235 = vmulq_n_f32(v233, v17.f32[0]);
                float32x4_t v236 = vmulq_n_f32(v231, v11.f32[0]);
                float32x4_t v237 = vsubq_f32(v234, v235);
                float32x4_t v238 = vsubq_f32(v235, v236);
                float32x4_t v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), vaddq_f32(vsubq_f32(v237, v236), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v238), (int8x16_t)vnegq_f32(v238), (int8x16_t)v238)));
                *float v61 = v11;
                if (!v19) {
                  goto LABEL_300;
                }
                goto LABEL_299;
              }
              v11.i32[0] = *(_DWORD *)v51;
              if (*(float *)v51 > 0.0) {
                goto LABEL_298;
              }
              *float v61 = v46;
              v10.i32[0] = v17.i32[0];
LABEL_299:
              *(_DWORD *)uint64_t v51 = v10.i32[0];
LABEL_300:
              ++v61;
              v51 += 4 * v728;
              --v232;
            }
            while (v232);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v230) {
              goto LABEL_380;
            }
          }
        case 23:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          int v239 = v745;
          float32x4_t v240 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          v241.i64[0] = 0xC0000000C0000000;
          v241.i64[1] = 0xC0000000C0000000;
          while (1)
          {
            int v242 = v62;
            do
            {
              if (!v19)
              {
                v12.i32[0] = 1.0;
LABEL_310:
                v11.f32[0] = (float)(v12.f32[0] + v17.f32[0]) - (float)(v12.f32[0] * v17.f32[0]);
                float32x4_t v243 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), *v61);
                float32x4_t v12 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), vmlaq_f32(vaddq_f32(v243, v240), v241, vmulq_f32(v240, v243)));
                *float v61 = v12;
                if (!v19) {
                  goto LABEL_312;
                }
                goto LABEL_311;
              }
              v12.i32[0] = *(_DWORD *)v51;
              if (*(float *)v51 > 0.0) {
                goto LABEL_310;
              }
              *float v61 = v46;
              v11.i32[0] = v17.i32[0];
LABEL_311:
              *(_DWORD *)uint64_t v51 = v11.i32[0];
LABEL_312:
              ++v61;
              v51 += 4 * v728;
              --v242;
            }
            while (v242);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v239)
            {
LABEL_380:
              int v745 = 0;
              goto LABEL_381;
            }
          }
        case 24:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float v244 = v46.f32[1];
          uint64_t v245 = v46.i64[1];
          int v246 = v745;
          while (1)
          {
            int v247 = v62;
            do
            {
              if (v19)
              {
                float v248 = *(float *)v51;
                if (*(float *)v51 <= 0.0)
                {
                  *float v61 = v46;
                  *(_DWORD *)uint64_t v51 = v17.i32[0];
                  goto LABEL_325;
                }
              }
              else
              {
                float v248 = 1.0;
              }
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              PDAhuePDA(v750.f32, v61->f32[0], v61->f32[1], v61->f32[2], v61->f32[3], v248, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v46.f32[0], v244, *(float *)&v245, *((float *)&v245 + 1), v17.f32[0]);
              *float v61 = v750;
              if (v19) {
                *(_DWORD *)uint64_t v51 = v751;
              }
              float32x4_t v46 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_325:
              ++v61;
              v51 += 4 * v728;
              --v247;
            }
            while (v247);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v246)
            {
LABEL_366:
              int v745 = 0;
              LODWORD(v20) = v691;
              unint64_t v34 = v724;
              unint64_t v31 = v726;
LABEL_381:
              unint64_t v48 = v730;
LABEL_382:
              uint64_t v50 = v737;
LABEL_383:
              if (!v50) {
                return 1;
              }
              int v744 = 0;
              int v743 = 0;
LABEL_385:
              if (!shape_enum_clip_next(v50, &v744, &v743, v746, &v745)) {
                goto LABEL_1217;
              }
              uint64_t v737 = v50;
              float v61 = (float32x4_t *)(v48 + 16 * v31 * v743 + 16 * v744);
              unint64_t v60 = SLODWORD(v746[0]);
              if (v19)
              {
                uint64_t v51 = v734 + 4 * v34 * v743 + 4 * v744;
                unint64_t v52 = v34 - SLODWORD(v746[0]);
              }
              int v62 = v746[0];
              float32x4_t v46 = v739;
              float32x4_t v17 = v741;
              float32x4_t v13 = v732;
              goto LABEL_65;
            }
          }
        case 25:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float v249 = v46.f32[1];
          uint64_t v250 = v46.i64[1];
          int v251 = v745;
          while (1)
          {
            int v252 = v62;
            do
            {
              if (v19)
              {
                float v253 = *(float *)v51;
                if (*(float *)v51 <= 0.0)
                {
                  *float v61 = v46;
                  *(_DWORD *)uint64_t v51 = v17.i32[0];
                  goto LABEL_338;
                }
              }
              else
              {
                float v253 = 1.0;
              }
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              PDAsaturationPDA(v750.f32, v61->f32[0], v61->f32[1], v61->f32[2], v61->f32[3], v253, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v46.f32[0], v249, *(float *)&v250, *((float *)&v250 + 1), v17.f32[0]);
              *float v61 = v750;
              if (v19) {
                *(_DWORD *)uint64_t v51 = v751;
              }
              float32x4_t v46 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_338:
              ++v61;
              v51 += 4 * v728;
              --v252;
            }
            while (v252);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v251) {
              goto LABEL_366;
            }
          }
        case 26:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float v254 = v46.f32[1];
          uint64_t v255 = v46.i64[1];
          int v256 = v745;
          while (1)
          {
            int v257 = v62;
            do
            {
              if (v19)
              {
                float v258 = *(float *)v51;
                if (*(float *)v51 <= 0.0)
                {
                  *float v61 = v46;
                  *(_DWORD *)uint64_t v51 = v17.i32[0];
                  goto LABEL_351;
                }
              }
              else
              {
                float v258 = 1.0;
              }
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              PDAluminosityPDA(v750.f32, v46.f32[0], v254, *(float *)&v255, *((float *)&v255 + 1), v17.f32[0], *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v61->f32[0], COERCE_FLOAT(*(uint64_t *)((char *)v61->i64 + 4)), COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v61->i64 + 4))), v61->f32[3], v258);
              *float v61 = v750;
              if (v19) {
                *(_DWORD *)uint64_t v51 = v751;
              }
              float32x4_t v46 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_351:
              ++v61;
              v51 += 4 * v728;
              --v257;
            }
            while (v257);
            v61 += v48;
            v51 += 4 * v52;
            if (!--v256) {
              goto LABEL_366;
            }
          }
        case 27:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_381;
          }
          float v259 = v46.f32[1];
          uint64_t v260 = v46.i64[1];
          int v261 = v745;
          break;
        default:
          goto LABEL_382;
      }
LABEL_356:
      int v262 = v62;
      while (v19)
      {
        float v263 = *(float *)v51;
        if (*(float *)v51 > 0.0) {
          goto LABEL_361;
        }
        *float v61 = v46;
        *(_DWORD *)uint64_t v51 = v17.i32[0];
LABEL_364:
        ++v61;
        v51 += 4 * v728;
        if (!--v262)
        {
          v61 += v48;
          v51 += 4 * v52;
          if (!--v261) {
            goto LABEL_366;
          }
          goto LABEL_356;
        }
      }
      float v263 = 1.0;
LABEL_361:
      float32x4_t v750 = 0uLL;
      int v751 = 0;
      PDAluminosityPDA(v750.f32, v61->f32[0], v61->f32[1], v61->f32[2], v61->f32[3], v263, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v46.f32[0], v259, *(float *)&v260, *((float *)&v260 + 1), v17.f32[0]);
      *float v61 = v750;
      if (v19) {
        *(_DWORD *)uint64_t v51 = v751;
      }
      float32x4_t v46 = v739;
      v17.i32[0] = v741.i32[0];
      goto LABEL_364;
    }
    LODWORD(v746[0]) = *(_DWORD *)(v3 + 4);
    int v745 = v25;
    uint64_t v36 = *(int *)(v3 + 12);
    uint64_t v35 = *(int *)(v3 + 16);
    unint64_t v37 = (unint64_t)*(int *)(v3 + 28) >> 4;
    uint64_t v713 = (uint64_t)v18;
    if (v19)
    {
      unint64_t v38 = (unint64_t)*(int *)(v3 + 32) >> 2;
      v698 = (char *)(v19 + 4 * (v36 + v38 * v35));
      uint64_t v39 = 0xFFFFFFFFLL;
    }
    else
    {
      v698 = 0;
      unint64_t v38 = 0;
      uint64_t v39 = 0;
    }
    uint64_t v53 = *(void *)(v3 + 88);
    unint64_t v697 = *(void *)(v3 + 40) + 16 * (v36 + v35 * v37);
    uint64_t v54 = *(unsigned int *)(v3 + 104);
    int v55 = *(_DWORD *)(v3 + 56);
    int v56 = *(_DWORD *)(v3 + 60);
    unint64_t v727 = (unint64_t)*(int *)(v3 + 76) >> 4;
    if (v29 == 256)
    {
      if (v18)
      {
        unint64_t v731 = (unint64_t)*(int *)(v3 + 80) >> 2;
        uint64_t v713 = (uint64_t)&v18[v55 + v731 * v56];
        uint64_t v57 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v713 = 0;
        unint64_t v731 = 0;
        uint64_t v57 = 0;
      }
      v53 += 16 * (v55 + v56 * v727);
      if (v727 == v37 && (uint64_t)(v697 - v53) >= 1)
      {
        if (v23 >= (v697 - v53) >> 4)
        {
          v697 += 16 * v24;
          v53 += 16 * v24;
          v698 += 4 * (v39 & v24);
          int v83 = -1;
          unint64_t v727 = (unint64_t)*(int *)(v3 + 28) >> 4;
          v713 += 4 * (v57 & v24);
          goto LABEL_48;
        }
        uint64_t v82 = v53 + 16 * v37 * v26;
        if (v697 <= v82 + 16 * (unint64_t)v24)
        {
          v697 += 16 * v37 * v26;
          unint64_t v37 = -(uint64_t)v37;
          v698 += 4 * v38 * v26;
          unint64_t v38 = -(uint64_t)v38;
          v713 += 4 * v731 * v26;
          v39 &= 1u;
          unint64_t v731 = -(uint64_t)v731;
          v57 &= 1u;
          int v83 = 1;
          uint64_t v53 = v82;
          unint64_t v727 = v37;
          goto LABEL_48;
        }
      }
      v39 &= 1u;
      v57 &= 1u;
      int v83 = 1;
LABEL_48:
      int v693 = *(_DWORD *)(v3 + 60);
      int v694 = *(_DWORD *)(v3 + 56);
      if (v27)
      {
        uint64_t v740 = v57;
        uint64_t v742 = v39;
        uint64_t v729 = 0;
        unint64_t v725 = 0;
        uint64_t v84 = -1;
        unint64_t v58 = v727;
        int v700 = v731;
        goto LABEL_53;
      }
      unint64_t v89 = v83 * (int)v23;
      unint64_t v738 = v38 - (int)v39 * (int)v23;
      unint64_t v90 = -1;
      unint64_t v91 = v731;
      int v699 = v83;
      int v700 = v731;
      unint64_t v92 = v727;
      unint64_t v58 = v727;
LABEL_61:
      uint64_t v96 = v713;
      uint64_t v701 = 0;
      uint64_t v702 = v53;
      unint64_t v725 = 0;
      unint64_t v727 = v92 - v89;
      uint64_t v729 = 0;
      unint64_t v731 = v91 - (int)v57 * (int)v23;
      uint64_t v733 = v713;
      float v86 = (char *)v713;
      unint64_t v97 = v697;
      unint64_t v88 = v698;
      goto LABEL_389;
    }
    unint64_t v58 = *(unsigned int *)(v3 + 64);
    int v700 = *(_DWORD *)(v3 + 68);
    if (v18)
    {
      unint64_t v731 = (unint64_t)*(int *)(v3 + 80) >> 2;
      uint64_t v57 = 1;
    }
    else
    {
      unint64_t v731 = 0;
      uint64_t v57 = 0;
    }
    unint64_t v725 = v53 + 16 * v727 * v700;
    v39 &= 1u;
    if (v27)
    {
      int v693 = *(_DWORD *)(v3 + 60);
      int v694 = *(_DWORD *)(v3 + 56);
      uint64_t v740 = v57;
      uint64_t v742 = v39;
      int v83 = 1;
      uint64_t v729 = *(void *)(v3 + 88);
      uint64_t v84 = v729;
LABEL_53:
      int v699 = v83;
      unint64_t v703 = v37;
      shape_enum_clip_alloc(v2, v3, (int *)v27, v83, v37, 1, v54, *(_DWORD *)(v3 + 108), v23, v25);
      uint64_t v50 = v85;
      float v86 = (char *)v713;
      uint64_t v87 = (char *)v713;
      unint64_t v88 = v698;
      unint64_t v738 = v38;
      if (!v85) {
        return 1;
      }
      goto LABEL_1194;
    }
    unint64_t v738 = v38 - (v39 * v23);
    if (!v53)
    {
      int v693 = *(_DWORD *)(v3 + 60);
      int v694 = *(_DWORD *)(v3 + 56);
      unint64_t v90 = 0;
      int v699 = 1;
      unint64_t v89 = v23;
      unint64_t v91 = v731;
      unint64_t v92 = (unint64_t)*(int *)(v3 + 76) >> 4;
      goto LABEL_61;
    }
    uint64_t v93 = v56 % v700;
    int v693 = v56 % v700;
    uint64_t v702 = *(void *)(v3 + 88);
    unint64_t v94 = v53 + 16 * v727 * v93;
    int v95 = v55 % (int)v58;
    uint64_t v53 = v94 + 16 * v95;
    unint64_t v90 = v94 + 16 * (int)v58;
    uint64_t v96 = (uint64_t)v18;
    int v694 = v95;
    uint64_t v729 = v53;
    uint64_t v701 = 0;
    if (v18)
    {
      float v86 = (char *)&v18[v731 * v93 + v95];
      int v699 = 1;
      uint64_t v57 = 1;
      uint64_t v733 = (uint64_t)v86;
    }
    else
    {
      uint64_t v733 = 0;
      float v86 = 0;
      int v699 = 1;
    }
    unint64_t v97 = v697;
    unint64_t v88 = v698;
    unint64_t v89 = v23;
LABEL_389:
    uint64_t v742 = v39;
    uint64_t v740 = v57;
    uint64_t v713 = v96;
    unint64_t v703 = v37;
    unint64_t v735 = v37 - v89;
    int v714 = v23;
    switch((int)v20)
    {
      case 0:
        unint64_t v689 = v90;
        uint64_t v267 = v735 - (int)v23;
        unint64_t v268 = v97 - 16 * ((int)v23 - 1);
        if (v699 >= 0)
        {
          unint64_t v268 = v97;
          uint64_t v267 = v735 + (int)v23;
        }
        unsigned int v269 = v745;
        uint64_t v270 = v745 - 1;
        unint64_t v271 = (char *)(v268 + 16 * ((v267 * v270) & (v267 >> 63)));
        if (v267 < 0) {
          uint64_t v267 = -v267;
        }
        CGBlt_fillBytes(16 * v23, v745, 0, v271, 16 * v267);
        if (v39)
        {
          if (v699 < 0)
          {
            uint64_t v272 = v738 - (int)v23;
            v88 += -4 * (int)v23 + 4;
          }
          else
          {
            uint64_t v272 = v738 + (int)v23;
          }
          v88 += 4 * ((v272 * v270) & (v272 >> 63));
          if (v272 < 0) {
            uint64_t v272 = -v272;
          }
          unint64_t v738 = v272;
          CGBlt_fillBytes(4 * v23, v269, 0, v88, 4 * v272);
        }
        uint64_t v53 = v702;
        goto LABEL_1156;
      case 1:
        int v273 = *(unsigned __int8 *)(v22 + 1);
        if (v273 == 2)
        {
          if ((int)v23 >= 2 && (16 * v58) <= 0x40)
          {
            v9.i32[0] = 16 * v58;
            uint8x8_t v636 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v9.f32);
            v636.i16[0] = vaddlv_u8(v636);
            if (v636.i32[0] <= 1u)
            {
              unint64_t v689 = v90;
              int v637 = v745;
              uint64_t v53 = v702;
              CGSFillDRAM64(v97, 16 * (v23 + v735), 16 * v23, v745, v702, 16 * v727, 16 * v58, v700, 16 * v694, v693);
              if (v39)
              {
                uint64_t v50 = v701;
                if (v740) {
                  CGSFillDRAM64((unint64_t)v88, 4 * (v23 + v738), 4 * v23, v637, v713, 4 * v731, 4 * v58, v700, 4 * v694, v693);
                }
                else {
                  CGBlt_fillBytes(4 * v23, v637, 1065353216, v88, 4 * (v23 + v738));
                }
                goto LABEL_1157;
              }
LABEL_1156:
              uint64_t v50 = v701;
LABEL_1157:
              unint64_t v90 = v689;
              goto LABEL_999;
            }
          }
        }
        else if (v273 == 1)
        {
          unint64_t v695 = v38;
          unint64_t v689 = v90;
          if (v699 < 0)
          {
            uint64_t v274 = v727 - (int)v23;
            v53 -= 16 * ((int)v23 - 1);
            uint64_t v275 = v735 - (int)v23;
            v97 -= 16 * ((int)v23 - 1);
          }
          else
          {
            uint64_t v274 = v727 + (int)v23;
            uint64_t v275 = v735 + (int)v23;
          }
          uint64_t v673 = v745 - 1;
          v674 = (char *)(v53 + 16 * ((v274 * v673) & (v274 >> 63)));
          if (v274 >= 0) {
            unint64_t v675 = v274;
          }
          else {
            unint64_t v675 = -v274;
          }
          if (v275 >= 0) {
            LODWORD(v676) = v275;
          }
          else {
            uint64_t v676 = -v275;
          }
          unint64_t v727 = v675;
          int v736 = v745;
          CGBlt_copyBytes(16 * v23, v745, v674, (char *)(v97 + 16 * ((v275 * v673) & (v275 >> 63))), 16 * v675, 16 * v676);
          if (v39)
          {
            int v677 = 4 * v23;
            uint64_t v50 = v701;
            uint64_t v53 = v702;
            if (v740)
            {
              uint64_t v678 = v731 - (int)v23;
              v679 = &v86[-4 * (int)v23 + 4];
              uint64_t v680 = v738 - (int)v23;
              v681 = &v88[-4 * (int)v23 + 4];
              if (v699 >= 0)
              {
                v679 = v86;
                v681 = v88;
                uint64_t v678 = v731 + (int)v23;
                uint64_t v680 = v738 + (int)v23;
              }
              float v86 = &v679[4 * ((v678 * v673) & (v678 >> 63))];
              if (v678 >= 0) {
                unint64_t v682 = v678;
              }
              else {
                unint64_t v682 = -v678;
              }
              unint64_t v88 = &v681[4 * ((v680 * v673) & (v680 >> 63))];
              if (v680 >= 0) {
                uint64_t v683 = v680;
              }
              else {
                uint64_t v683 = -v680;
              }
              unint64_t v731 = v682;
              unint64_t v738 = v683;
              CGBlt_copyBytes(v677, v736, v86, v88, 4 * v682, 4 * v683);
            }
            else
            {
              uint64_t v684 = v738 - (int)v23;
              v685 = &v88[-4 * (int)v23 + 4];
              if (v699 >= 0)
              {
                v685 = v88;
                uint64_t v684 = v738 + (int)v23;
              }
              uint64_t v686 = (v684 * v673) & (v684 >> 63);
              unint64_t v88 = &v685[4 * v686];
              if (v684 < 0) {
                uint64_t v684 = -v684;
              }
              unint64_t v738 = v684;
              CGBlt_fillBytes(v677, v736, 1065353216, &v685[4 * v686], 4 * v684);
            }
            unint64_t v38 = v695;
            goto LABEL_1157;
          }
          unint64_t v38 = v695;
          uint64_t v53 = v702;
          goto LABEL_1156;
        }
        if (v39)
        {
          uint64_t v638 = 4 * (int)v39;
          uint64_t v639 = 16 * v699;
          if (v57)
          {
            uint64_t v640 = (int)v57;
            int v641 = v745;
            uint64_t v87 = (char *)v733;
            uint64_t v278 = v729;
            do
            {
              int v642 = v23;
              do
              {
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
                *(_DWORD *)unint64_t v88 = *(_DWORD *)v86;
                unint64_t v643 = v53 + 16 * v699;
                if (v643 >= v90) {
                  uint64_t v644 = -(uint64_t)(int)v58;
                }
                else {
                  uint64_t v644 = 0;
                }
                v86 += 4 * v640 + 4 * v644;
                uint64_t v53 = v643 + 16 * v644;
                v88 += v638;
                v97 += v639;
                --v642;
              }
              while (v642);
              if (v725)
              {
                unint64_t v645 = v278 + 16 * v727;
                if (v645 >= v725) {
                  uint64_t v646 = -(uint64_t)(v731 * v700);
                }
                else {
                  uint64_t v646 = 0;
                }
                v87 += 4 * v731 + 4 * v646;
                if (v645 >= v725) {
                  uint64_t v647 = -(uint64_t)(v727 * v700);
                }
                else {
                  uint64_t v647 = 0;
                }
                uint64_t v278 = v645 + 16 * v647;
                v90 += 16 * v647 + 16 * v727;
                float v86 = v87;
                uint64_t v53 = v278;
              }
              else
              {
                v53 += 16 * v727;
                v86 += 4 * v731;
              }
              v97 += 16 * v735;
              v88 += 4 * v738;
              --v641;
            }
            while (v641);
LABEL_1150:
            uint64_t v729 = v278;
LABEL_1192:
            int v745 = 0;
            uint64_t v50 = v701;
            uint64_t v53 = v702;
            if (!v701) {
              return 1;
            }
            goto LABEL_1193;
          }
          int v655 = v745;
          uint64_t v87 = (char *)v733;
          uint64_t v584 = v729;
          do
          {
            int v656 = v23;
            do
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = 1065353216;
              unint64_t v657 = v53 + 16 * v699;
              if (v657 >= v90) {
                uint64_t v658 = -(uint64_t)(int)v58;
              }
              else {
                uint64_t v658 = 0;
              }
              v86 += 4 * v658;
              uint64_t v53 = v657 + 16 * v658;
              v88 += v638;
              v97 += v639;
              --v656;
            }
            while (v656);
            if (v725)
            {
              unint64_t v659 = v584 + 16 * v727;
              if (v659 >= v725) {
                uint64_t v660 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v660 = 0;
              }
              v87 += 4 * v731 + 4 * v660;
              if (v659 >= v725) {
                uint64_t v661 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v661 = 0;
              }
              uint64_t v584 = v659 + 16 * v661;
              v90 += 16 * v661 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v584;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            --v655;
          }
          while (v655);
        }
        else
        {
          int v648 = v745;
          uint64_t v87 = (char *)v733;
          uint64_t v584 = v729;
          do
          {
            int v649 = v23;
            do
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              unint64_t v650 = v53 + 16 * v699;
              if (v650 >= v90) {
                uint64_t v651 = -(uint64_t)(int)v58;
              }
              else {
                uint64_t v651 = 0;
              }
              v86 += 4 * (int)v57 + 4 * v651;
              uint64_t v53 = v650 + 16 * v651;
              v97 += 16 * v699;
              --v649;
            }
            while (v649);
            if (v725)
            {
              unint64_t v652 = v584 + 16 * v727;
              if (v652 >= v725) {
                uint64_t v653 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v653 = 0;
              }
              v87 += 4 * v731 + 4 * v653;
              if (v652 >= v725) {
                uint64_t v654 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v654 = 0;
              }
              uint64_t v584 = v652 + 16 * v654;
              v90 += 16 * v654 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v584;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            --v648;
          }
          while (v648);
        }
        goto LABEL_1191;
      case 2:
        uint64_t v276 = (int)v57;
        if (v39)
        {
          int v277 = v745;
          uint64_t v87 = (char *)v733;
          uint64_t v278 = v729;
          while (1)
          {
            int v279 = v23;
            do
            {
              float v280 = *(float *)v86;
              if (*(float *)v86 >= 1.0)
              {
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
                float v281 = *(float *)v86;
              }
              else
              {
                if (v280 <= 0.0) {
                  goto LABEL_409;
                }
                *(float32x4_t *)unint64_t v97 = vmlaq_n_f32(*(float32x4_t *)v53, *(float32x4_t *)v97, 1.0 - v280);
                float v281 = v280 + (float)(*(float *)v88 * (float)(1.0 - v280));
              }
              *(float *)unint64_t v88 = v281;
LABEL_409:
              unint64_t v282 = v53 + 16 * v699;
              if (v282 >= v90) {
                uint64_t v283 = -(uint64_t)(int)v58;
              }
              else {
                uint64_t v283 = 0;
              }
              v86 += 4 * v276 + 4 * v283;
              uint64_t v53 = v282 + 16 * v283;
              v88 += 4 * (int)v39;
              v97 += 16 * v699;
              --v279;
            }
            while (v279);
            if (v725)
            {
              unint64_t v284 = v278 + 16 * v727;
              if (v284 >= v725) {
                uint64_t v285 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v285 = 0;
              }
              v87 += 4 * v731 + 4 * v285;
              if (v284 >= v725) {
                uint64_t v286 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v286 = 0;
              }
              uint64_t v278 = v284 + 16 * v286;
              v90 += 16 * v286 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v278;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v277) {
              goto LABEL_1150;
            }
          }
        }
        int v583 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v584 = v729;
LABEL_1003:
        int v585 = v23;
        while (1)
        {
          float v586 = *(float *)v86;
          if (*(float *)v86 >= 1.0) {
            break;
          }
          if (v586 > 0.0)
          {
            float32x4_t v587 = vmlaq_n_f32(*(float32x4_t *)v53, *(float32x4_t *)v97, 1.0 - v586);
LABEL_1008:
            *(float32x4_t *)unint64_t v97 = v587;
          }
          unint64_t v588 = v53 + 16 * v699;
          if (v588 >= v90) {
            uint64_t v589 = -(uint64_t)(int)v58;
          }
          else {
            uint64_t v589 = 0;
          }
          v86 += 4 * (int)v57 + 4 * v589;
          uint64_t v53 = v588 + 16 * v589;
          v97 += 16 * v699;
          if (!--v585)
          {
            if (v725)
            {
              unint64_t v590 = v584 + 16 * v727;
              if (v590 >= v725) {
                uint64_t v591 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v591 = 0;
              }
              v87 += 4 * v731 + 4 * v591;
              if (v590 >= v725) {
                uint64_t v592 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v592 = 0;
              }
              uint64_t v584 = v590 + 16 * v592;
              v90 += 16 * v592 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v584;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v583) {
              goto LABEL_1191;
            }
            goto LABEL_1003;
          }
        }
        float32x4_t v587 = *(float32x4_t *)v53;
        goto LABEL_1008;
      case 3:
        if (v57)
        {
          uint64_t v287 = (int)v57;
          int v288 = v745;
          uint64_t v87 = (char *)v733;
          uint64_t v278 = v729;
          do
          {
            int v289 = v23;
            do
            {
              float v290 = *(float *)v88;
              if (*(float *)v88 <= 0.0)
              {
                *(void *)unint64_t v97 = 0;
                *(void *)(v97 + ++*(_DWORD *)(result + 8) = 0;
                float v292 = 0.0;
              }
              else
              {
                v291.i32[0] = *(_DWORD *)v53;
                if (v290 >= 1.0)
                {
                  *(_DWORD *)unint64_t v97 = v291.i32[0];
                  *(void *)(v97 + 4) = *(void *)(v53 + 4);
                  *(_DWORD *)(v97 + 12) = *(_DWORD *)(v53 + 12);
                  float v292 = *(float *)v86;
                }
                else
                {
                  v291.i32[1] = *(_DWORD *)(v53 + 4);
                  v291.i64[1] = *(void *)(v53 + 8);
                  *(float32x4_t *)unint64_t v97 = vmulq_n_f32(v291, v290);
                  float v292 = v290 * *(float *)v86;
                }
              }
              *(float *)unint64_t v88 = v292;
              unint64_t v293 = v53 + 16 * v699;
              if (v293 >= v90) {
                uint64_t v294 = -(uint64_t)(int)v58;
              }
              else {
                uint64_t v294 = 0;
              }
              v86 += 4 * v287 + 4 * v294;
              uint64_t v53 = v293 + 16 * v294;
              v88 += 4 * (int)v39;
              v97 += 16 * v699;
              --v289;
            }
            while (v289);
            if (v725)
            {
              unint64_t v295 = v278 + 16 * v727;
              if (v295 >= v725) {
                uint64_t v296 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v296 = 0;
              }
              v87 += 4 * v731 + 4 * v296;
              if (v295 >= v725) {
                uint64_t v297 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v297 = 0;
              }
              uint64_t v278 = v295 + 16 * v297;
              v90 += 16 * v297 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v278;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            --v288;
          }
          while (v288);
          goto LABEL_1150;
        }
        int v593 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v310 = v729;
        do
        {
          int v594 = v23;
          do
          {
            float v595 = *(float *)v88;
            if (*(float *)v88 <= 0.0)
            {
              *(void *)unint64_t v97 = 0;
              *(void *)(v97 + ++*(_DWORD *)(result + 8) = 0;
            }
            else
            {
              v596.i32[0] = *(_DWORD *)v53;
              if (v595 >= 1.0)
              {
                *(_DWORD *)unint64_t v97 = v596.i32[0];
                *(void *)(v97 + 4) = *(void *)(v53 + 4);
                *(_DWORD *)(v97 + 12) = *(_DWORD *)(v53 + 12);
              }
              else
              {
                v596.i32[1] = *(_DWORD *)(v53 + 4);
                v596.i64[1] = *(void *)(v53 + 8);
                *(float32x4_t *)unint64_t v97 = vmulq_n_f32(v596, v595);
              }
            }
            unint64_t v597 = v53 + 16 * v699;
            if (v597 >= v90) {
              uint64_t v598 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v598 = 0;
            }
            v86 += 4 * v598;
            uint64_t v53 = v597 + 16 * v598;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v594;
          }
          while (v594);
          if (v725)
          {
            unint64_t v599 = v310 + 16 * v727;
            if (v599 >= v725) {
              uint64_t v600 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v600 = 0;
            }
            v87 += 4 * v731 + 4 * v600;
            if (v599 >= v725) {
              uint64_t v601 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v601 = 0;
            }
            uint64_t v310 = v599 + 16 * v601;
            v90 += 16 * v601 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v310;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          --v593;
        }
        while (v593);
LABEL_1045:
        uint64_t v729 = v310;
        goto LABEL_1192;
      case 4:
        int v298 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v299 = v729;
        do
        {
          int v300 = v23;
          do
          {
            float v301 = 1.0 - *(float *)v88;
            if (v301 <= 0.0)
            {
              *(void *)unint64_t v97 = 0;
              *(void *)(v97 + ++*(_DWORD *)(result + 8) = 0;
              float v303 = 0.0;
            }
            else if (v301 >= 1.0)
            {
              if (v57) {
                float v303 = *(float *)v86;
              }
              else {
                float v303 = 1.0;
              }
            }
            else
            {
              *(float32x4_t *)unint64_t v97 = vmulq_n_f32(*(float32x4_t *)v53, v301);
              if (v57) {
                float v302 = *(float *)v86;
              }
              else {
                float v302 = 1.0;
              }
              float v303 = v301 * v302;
            }
            *(float *)unint64_t v88 = v303;
            unint64_t v304 = v53 + 16 * v699;
            if (v304 >= v90) {
              uint64_t v305 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v305 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v305;
            uint64_t v53 = v304 + 16 * v305;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v300;
          }
          while (v300);
          if (v725)
          {
            unint64_t v306 = v299 + 16 * v727;
            if (v306 >= v725) {
              uint64_t v307 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v307 = 0;
            }
            v87 += 4 * v731 + 4 * v307;
            if (v306 >= v725) {
              uint64_t v308 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v308 = 0;
            }
            uint64_t v299 = v306 + 16 * v308;
            v90 += 16 * v308 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v299;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          --v298;
        }
        while (v298);
        goto LABEL_648;
      case 5:
        int v309 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v310 = v729;
        do
        {
          int v311 = v23;
          do
          {
            float v312 = *(float *)v88;
            float v313 = *(float *)v86;
            float v314 = 1.0 - *(float *)v86;
            *(float32x4_t *)unint64_t v97 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v97, v314), *(float32x4_t *)v53, *(float *)v88);
            *(float *)unint64_t v88 = (float)(v312 * v314) + (float)(v313 * v312);
            unint64_t v315 = v53 + 16 * v699;
            if (v315 >= v90) {
              uint64_t v316 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v316 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v316;
            uint64_t v53 = v315 + 16 * v316;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v311;
          }
          while (v311);
          if (v725)
          {
            unint64_t v317 = v310 + 16 * v727;
            if (v317 >= v725) {
              uint64_t v318 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v318 = 0;
            }
            v87 += 4 * v731 + 4 * v318;
            if (v317 >= v725) {
              uint64_t v319 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v319 = 0;
            }
            uint64_t v310 = v317 + 16 * v319;
            v90 += 16 * v319 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v310;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          --v309;
        }
        while (v309);
        goto LABEL_1045;
      case 6:
        int v320 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v299 = v729;
        while (1)
        {
          int v321 = v23;
          do
          {
            float v322 = *(float *)v88;
            float v323 = 1.0 - *(float *)v88;
            if (v323 >= 1.0)
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              if (v57) {
                float v325 = *(float *)v86;
              }
              else {
                float v325 = 1.0;
              }
            }
            else
            {
              if (v323 <= 0.0) {
                goto LABEL_503;
              }
              *(float32x4_t *)unint64_t v97 = vmlaq_n_f32(*(float32x4_t *)v97, *(float32x4_t *)v53, v323);
              if (v57) {
                float v324 = *(float *)v86;
              }
              else {
                float v324 = 1.0;
              }
              float v325 = v322 + (float)(v324 * v323);
            }
            *(float *)unint64_t v88 = v325;
LABEL_503:
            unint64_t v326 = v53 + 16 * v699;
            if (v326 >= v90) {
              uint64_t v327 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v327 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v327;
            uint64_t v53 = v326 + 16 * v327;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v321;
          }
          while (v321);
          if (v725)
          {
            unint64_t v328 = v299 + 16 * v727;
            if (v328 >= v725) {
              uint64_t v329 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v329 = 0;
            }
            v87 += 4 * v731 + 4 * v329;
            if (v328 >= v725) {
              uint64_t v330 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v330 = 0;
            }
            uint64_t v299 = v328 + 16 * v330;
            v90 += 16 * v330 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v299;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          if (!--v320)
          {
LABEL_648:
            uint64_t v729 = v299;
            goto LABEL_1192;
          }
        }
      case 7:
        uint64_t v331 = (int)v57;
        if (v39)
        {
          int v332 = v745;
          uint64_t v87 = (char *)v733;
          uint64_t v278 = v729;
          while (1)
          {
            int v333 = v23;
            do
            {
              float v334 = *(float *)v86;
              if (*(float *)v86 <= 0.0)
              {
                *(void *)unint64_t v97 = 0;
                *(void *)(v97 + ++*(_DWORD *)(result + 8) = 0;
                float v335 = 0.0;
              }
              else
              {
                if (v334 >= 1.0) {
                  goto LABEL_526;
                }
                *(float32x4_t *)unint64_t v97 = vmulq_n_f32(*(float32x4_t *)v97, v334);
                float v335 = v334 * *(float *)v88;
              }
              *(float *)unint64_t v88 = v335;
LABEL_526:
              unint64_t v336 = v53 + 16 * v699;
              if (v336 >= v90) {
                uint64_t v337 = -(uint64_t)(int)v58;
              }
              else {
                uint64_t v337 = 0;
              }
              v86 += 4 * v331 + 4 * v337;
              uint64_t v53 = v336 + 16 * v337;
              v88 += 4 * (int)v39;
              v97 += 16 * v699;
              --v333;
            }
            while (v333);
            if (v725)
            {
              unint64_t v338 = v278 + 16 * v727;
              if (v338 >= v725) {
                uint64_t v339 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v339 = 0;
              }
              v87 += 4 * v731 + 4 * v339;
              if (v338 >= v725) {
                uint64_t v340 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v340 = 0;
              }
              uint64_t v278 = v338 + 16 * v340;
              v90 += 16 * v340 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v278;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v332) {
              goto LABEL_1150;
            }
          }
        }
        int v602 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v584 = v729;
        do
        {
          int v603 = v23;
          do
          {
            float v604 = *(float *)v86;
            if (*(float *)v86 <= 0.0)
            {
              *(void *)unint64_t v97 = 0;
              *(void *)(v97 + ++*(_DWORD *)(result + 8) = 0;
            }
            else if (v604 < 1.0)
            {
              *(float32x4_t *)unint64_t v97 = vmulq_n_f32(*(float32x4_t *)v97, v604);
            }
            unint64_t v605 = v53 + 16 * v699;
            if (v605 >= v90) {
              uint64_t v606 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v606 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v606;
            uint64_t v53 = v605 + 16 * v606;
            v97 += 16 * v699;
            --v603;
          }
          while (v603);
          if (v725)
          {
            unint64_t v607 = v584 + 16 * v727;
            if (v607 >= v725) {
              uint64_t v608 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v608 = 0;
            }
            v87 += 4 * v731 + 4 * v608;
            if (v607 >= v725) {
              uint64_t v609 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v609 = 0;
            }
            uint64_t v584 = v607 + 16 * v609;
            v90 += 16 * v609 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v584;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          --v602;
        }
        while (v602);
        goto LABEL_1191;
      case 8:
        uint64_t v341 = (int)v57;
        if (!v39)
        {
          int v610 = v745;
          uint64_t v87 = (char *)v733;
          uint64_t v584 = v729;
          do
          {
            int v611 = v23;
            do
            {
              float v612 = 1.0 - *(float *)v86;
              if (v612 <= 0.0)
              {
                *(void *)unint64_t v97 = 0;
                *(void *)(v97 + ++*(_DWORD *)(result + 8) = 0;
              }
              else if (v612 < 1.0)
              {
                *(float32x4_t *)unint64_t v97 = vmulq_n_f32(*(float32x4_t *)v97, v612);
              }
              unint64_t v613 = v53 + 16 * v699;
              if (v613 >= v90) {
                uint64_t v614 = -(uint64_t)(int)v58;
              }
              else {
                uint64_t v614 = 0;
              }
              v86 += 4 * (int)v57 + 4 * v614;
              uint64_t v53 = v613 + 16 * v614;
              v97 += 16 * v699;
              --v611;
            }
            while (v611);
            if (v725)
            {
              unint64_t v615 = v584 + 16 * v727;
              if (v615 >= v725) {
                uint64_t v616 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v616 = 0;
              }
              v87 += 4 * v731 + 4 * v616;
              if (v615 >= v725) {
                uint64_t v617 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v617 = 0;
              }
              uint64_t v584 = v615 + 16 * v617;
              v90 += 16 * v617 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v584;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            --v610;
          }
          while (v610);
LABEL_1191:
          uint64_t v729 = v584;
          goto LABEL_1192;
        }
        int v342 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v278 = v729;
LABEL_543:
        int v343 = v23;
        while (1)
        {
          float v344 = 1.0 - *(float *)v86;
          if (v344 <= 0.0) {
            break;
          }
          if (v344 < 1.0)
          {
            *(float32x4_t *)unint64_t v97 = vmulq_n_f32(*(float32x4_t *)v97, v344);
            float v345 = v344 * *(float *)v88;
LABEL_548:
            *(float *)unint64_t v88 = v345;
          }
          unint64_t v346 = v53 + 16 * v699;
          if (v346 >= v90) {
            uint64_t v347 = -(uint64_t)(int)v58;
          }
          else {
            uint64_t v347 = 0;
          }
          v86 += 4 * v341 + 4 * v347;
          uint64_t v53 = v346 + 16 * v347;
          v88 += 4 * (int)v39;
          v97 += 16 * v699;
          if (!--v343)
          {
            if (v725)
            {
              unint64_t v348 = v278 + 16 * v727;
              if (v348 >= v725) {
                uint64_t v349 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v349 = 0;
              }
              v87 += 4 * v731 + 4 * v349;
              if (v348 >= v725) {
                uint64_t v350 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v350 = 0;
              }
              uint64_t v278 = v348 + 16 * v350;
              v90 += 16 * v350 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v278;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v342) {
              goto LABEL_1150;
            }
            goto LABEL_543;
          }
        }
        *(void *)unint64_t v97 = 0;
        *(void *)(v97 + ++*(_DWORD *)(result + 8) = 0;
        float v345 = 0.0;
        goto LABEL_548;
      case 9:
        int v351 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v310 = v729;
        do
        {
          int v352 = v23;
          do
          {
            float v353 = *(float *)v88;
            float v354 = *(float *)v86;
            float v355 = 1.0 - *(float *)v88;
            *(float32x4_t *)unint64_t v97 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v97, *(float *)v86), *(float32x4_t *)v53, v355);
            *(float *)unint64_t v88 = (float)(v353 * v354) + (float)(v354 * v355);
            unint64_t v356 = v53 + 16 * v699;
            if (v356 >= v90) {
              uint64_t v357 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v357 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v357;
            uint64_t v53 = v356 + 16 * v357;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v352;
          }
          while (v352);
          if (v725)
          {
            unint64_t v358 = v310 + 16 * v727;
            if (v358 >= v725) {
              uint64_t v359 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v359 = 0;
            }
            v87 += 4 * v731 + 4 * v359;
            if (v358 >= v725) {
              uint64_t v360 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v360 = 0;
            }
            uint64_t v310 = v358 + 16 * v360;
            v90 += 16 * v360 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v310;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          --v351;
        }
        while (v351);
        goto LABEL_1045;
      case 10:
        int v361 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v310 = v729;
        do
        {
          int v362 = v23;
          do
          {
            float v363 = *(float *)v88;
            float v364 = *(float *)v86;
            float v365 = 1.0 - *(float *)v88;
            float v366 = 1.0 - *(float *)v86;
            *(float32x4_t *)unint64_t v97 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v97, v366), *(float32x4_t *)v53, v365);
            *(float *)unint64_t v88 = (float)(v363 * v366) + (float)(v364 * v365);
            unint64_t v367 = v53 + 16 * v699;
            if (v367 >= v90) {
              uint64_t v368 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v368 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v368;
            uint64_t v53 = v367 + 16 * v368;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v362;
          }
          while (v362);
          if (v725)
          {
            unint64_t v369 = v310 + 16 * v727;
            if (v369 >= v725) {
              uint64_t v370 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v370 = 0;
            }
            v87 += 4 * v731 + 4 * v370;
            if (v369 >= v725) {
              uint64_t v371 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v371 = 0;
            }
            uint64_t v310 = v369 + 16 * v371;
            v90 += 16 * v371 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v310;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          --v361;
        }
        while (v361);
        goto LABEL_1045;
      case 11:
        if (v39)
        {
          int v372 = v745;
          uint64_t v87 = (char *)v733;
          uint64_t v299 = v729;
          do
          {
            int v373 = v23;
            do
            {
              float v374 = 1.0;
              float v375 = 1.0;
              if (v57) {
                float v375 = *(float *)v86;
              }
              float v376 = *(float *)v88;
              float v377 = *(float *)v88 + v375;
              if (v377 > 1.0) {
                float v377 = 1.0;
              }
              if (v57) {
                float v374 = *(float *)v86;
              }
              float v378 = *(float *)(v97 + 4);
              float v379 = *(float *)(v53 + 4);
              *(float *)unint64_t v97 = v377 - (float)((float)(v376 - *(float *)v97) + (float)(v375 - *(float *)v53));
              float v380 = 1.0;
              float v381 = 1.0;
              if (v57) {
                float v381 = *(float *)v86;
              }
              float v382 = (float)(v376 - v378) + (float)(v374 - v379);
              float v383 = *(float *)v88;
              float v384 = *(float *)(v97 + 8);
              float v385 = *(float *)(v53 + 8);
              *(float *)(v97 + 4) = v377 - v382;
              if (v57) {
                float v380 = *(float *)v86;
              }
              float v386 = (float)(*(float *)v88 - *(float *)(v97 + 12)) + (float)(v380 - *(float *)(v53 + 12));
              *(float *)(v97 + ++*(_DWORD *)(result + 8) = v377 - (float)((float)(v383 - v384) + (float)(v381 - v385));
              *(float *)unint64_t v88 = v377;
              *(float *)(v97 + 12) = v377 - v386;
              unint64_t v387 = v53 + 16 * v699;
              if (v387 >= v90) {
                uint64_t v388 = -(uint64_t)(int)v58;
              }
              else {
                uint64_t v388 = 0;
              }
              v86 += 4 * (int)v57 + 4 * v388;
              uint64_t v53 = v387 + 16 * v388;
              v88 += 4 * (int)v39;
              v97 += 16 * v699;
              --v373;
            }
            while (v373);
            if (v725)
            {
              unint64_t v389 = v299 + 16 * v727;
              if (v389 >= v725) {
                uint64_t v390 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v390 = 0;
              }
              v87 += 4 * v731 + 4 * v390;
              if (v389 >= v725) {
                uint64_t v391 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v391 = 0;
              }
              uint64_t v299 = v389 + 16 * v391;
              v90 += 16 * v391 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v299;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            --v372;
          }
          while (v372);
          goto LABEL_648;
        }
        int v618 = v745;
        uint64_t v87 = (char *)v733;
        __asm { FMOV            V0.2S, #1.0 }
        uint64_t v584 = v729;
        do
        {
          int v620 = v23;
          do
          {
            v12.i32[0] = 1.0;
            if (v57) {
              v12.i32[0] = *(_DWORD *)v86;
            }
            v621.f32[0] = 1.0 - *(float *)v97;
            v621.f32[1] = 1.0 - *(float *)(v97 + 4);
            int32x2_t v622 = (int32x2_t)vsub_f32(_D0, vadd_f32(v621, vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 0), *(float32x2_t *)v53)));
            *(int32x2_t *)unint64_t v97 = v622;
            v622.i32[0] = 1.0;
            if (v57) {
              v622.i32[0] = *(_DWORD *)v86;
            }
            v623.f32[0] = 1.0 - *(float *)(v97 + 8);
            v623.f32[1] = 1.0 - *(float *)(v97 + 12);
            *(float32x2_t *)v12.f32 = vsub_f32((float32x2_t)vdup_lane_s32(v622, 0), *(float32x2_t *)(v53 + 8));
            *(float32x2_t *)(v97 + ++*(_DWORD *)(result + 8) = vsub_f32(_D0, vadd_f32(v623, *(float32x2_t *)v12.f32));
            unint64_t v624 = v53 + 16 * v699;
            if (v624 >= v90) {
              uint64_t v625 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v625 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v625;
            uint64_t v53 = v624 + 16 * v625;
            v97 += 16 * v699;
            --v620;
          }
          while (v620);
          if (v725)
          {
            unint64_t v626 = v584 + 16 * v727;
            if (v626 >= v725) {
              uint64_t v627 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v627 = 0;
            }
            v87 += 4 * v731 + 4 * v627;
            if (v626 >= v725) {
              uint64_t v628 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v628 = 0;
            }
            uint64_t v584 = v626 + 16 * v628;
            v90 += 16 * v628 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v584;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          --v618;
        }
        while (v618);
        goto LABEL_1191;
      case 12:
        if (!v39)
        {
          int v629 = v745;
          uint64_t v87 = (char *)v733;
          uint64_t v584 = v729;
          do
          {
            int v630 = v23;
            do
            {
              *(float32x4_t *)unint64_t v97 = vaddq_f32(*(float32x4_t *)v97, *(float32x4_t *)v53);
              unint64_t v631 = v53 + 16 * v699;
              if (v631 >= v90) {
                uint64_t v632 = -(uint64_t)(int)v58;
              }
              else {
                uint64_t v632 = 0;
              }
              v86 += 4 * (int)v57 + 4 * v632;
              uint64_t v53 = v631 + 16 * v632;
              v97 += 16 * v699;
              --v630;
            }
            while (v630);
            if (v725)
            {
              unint64_t v633 = v584 + 16 * v727;
              if (v633 >= v725) {
                uint64_t v634 = -(uint64_t)(v731 * v700);
              }
              else {
                uint64_t v634 = 0;
              }
              v87 += 4 * v731 + 4 * v634;
              if (v633 >= v725) {
                uint64_t v635 = -(uint64_t)(v727 * v700);
              }
              else {
                uint64_t v635 = 0;
              }
              uint64_t v584 = v633 + 16 * v635;
              v90 += 16 * v635 + 16 * v727;
              float v86 = v87;
              uint64_t v53 = v584;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            v97 += 16 * v735;
            v88 += 4 * v738;
            --v629;
          }
          while (v629);
          goto LABEL_1191;
        }
        int v392 = v745;
        uint64_t v87 = (char *)v733;
        uint64_t v299 = v729;
        do
        {
          int v393 = v23;
          do
          {
            if (v57) {
              float v394 = *(float *)v86;
            }
            else {
              float v394 = 1.0;
            }
            float v395 = *(float *)v88 + v394;
            if (v395 > 1.0) {
              float v395 = 1.0;
            }
            float32x2_t v396 = *(float32x2_t *)v97;
            float32x2_t v397 = *(float32x2_t *)v53;
            *(float *)unint64_t v88 = v395;
            *(float32x2_t *)&long long v398 = vadd_f32(v396, v397);
            *((float32x2_t *)&v398 + 1) = vadd_f32(*(float32x2_t *)(v97 + 8), *(float32x2_t *)(v53 + 8));
            *(_OWORD *)unint64_t v97 = v398;
            unint64_t v399 = v53 + 16 * v699;
            if (v399 >= v90) {
              uint64_t v400 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v400 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v400;
            uint64_t v53 = v399 + 16 * v400;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v393;
          }
          while (v393);
          if (v725)
          {
            unint64_t v401 = v299 + 16 * v727;
            if (v401 >= v725) {
              uint64_t v402 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v402 = 0;
            }
            v87 += 4 * v731 + 4 * v402;
            if (v401 >= v725) {
              uint64_t v403 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v403 = 0;
            }
            uint64_t v299 = v401 + 16 * v403;
            v90 += 16 * v403 + 16 * v727;
            float v86 = v87;
            uint64_t v53 = v299;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          --v392;
        }
        while (v392);
        goto LABEL_648;
      case 13:
        int v404 = v745;
        v9.i32[0] = 1.0;
        while (1)
        {
          int v405 = v23;
          do
          {
            v11.i32[0] = 1.0;
            v10.i32[0] = 1.0;
            if (v57)
            {
              v10.i32[0] = *(_DWORD *)v86;
              if (*(float *)v86 <= 0.0) {
                goto LABEL_659;
              }
            }
            if (v39)
            {
              v11.i32[0] = *(_DWORD *)v88;
              if (*(float *)v88 <= 0.0)
              {
                float32x4_t v11 = *(float32x4_t *)v53;
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
LABEL_658:
                *(_DWORD *)unint64_t v88 = v10.i32[0];
                goto LABEL_659;
              }
            }
            float32x4_t v406 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v97);
            float32x4_t v407 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), *(float32x4_t *)v53);
            float32x4_t v408 = vmulq_f32(v406, v407);
            float32x4_t v409 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32(v408, v406, 1.0 - v10.f32[0]), (int8x16_t)v408);
            v10.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
            float32x4_t v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32(v409, v407, 1.0 - v11.f32[0]), (int8x16_t)v409));
            *(float32x4_t *)unint64_t v97 = v11;
            if (v39) {
              goto LABEL_658;
            }
LABEL_659:
            unint64_t v410 = v53 + 16 * v699;
            if (v410 >= v90) {
              uint64_t v411 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v411 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v411;
            uint64_t v53 = v410 + 16 * v411;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v405;
          }
          while (v405);
          if (v725)
          {
            unint64_t v412 = v729 + 16 * v727;
            if (v412 >= v725) {
              uint64_t v413 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v413 = 0;
            }
            float v86 = (char *)(v733 + 4 * v731 + 4 * v413);
            if (v412 >= v725) {
              uint64_t v414 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v414 = 0;
            }
            uint64_t v53 = v412 + 16 * v414;
            v90 += 16 * v414 + 16 * v727;
            v733 += 4 * v731 + 4 * v413;
            uint64_t v729 = v53;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          if (!--v404)
          {
LABEL_908:
            int v745 = 0;
LABEL_909:
            uint64_t v53 = v702;
LABEL_998:
            uint64_t v50 = v701;
LABEL_999:
            uint64_t v87 = (char *)v733;
            if (!v50) {
              return 1;
            }
LABEL_1193:
            uint64_t v84 = v90;
            int v744 = 0;
            int v743 = 0;
LABEL_1194:
            uint64_t v733 = (uint64_t)v87;
            if (!shape_enum_clip_next(v50, &v744, &v743, v746, &v745))
            {
LABEL_1217:
              float32x4_t v81 = (void *)v50;
              goto LABEL_1218;
            }
            uint64_t v701 = v50;
            uint64_t v702 = v53;
            if (v725)
            {
              unint64_t v37 = v703;
              unint64_t v97 = v697 + 16 * v703 * v743 + 16 * v744;
              int v662 = (v743 + *(_DWORD *)(v22 + 60)) % v700;
              unint64_t v89 = SLODWORD(v746[0]);
              int v663 = (v744 + *(_DWORD *)(v22 + 56)) % (int)v58;
              unint64_t v664 = v53 + 16 * v727 * v662;
              uint64_t v53 = v664 + 16 * v663;
              unint64_t v90 = v664 + 16 * (int)v58;
              uint64_t v96 = v713;
              uint64_t v39 = v742;
              if (v742) {
                unint64_t v88 = &v698[4 * v38 * v743 + 4 * v744];
              }
              unint64_t v665 = v738;
              if (v742) {
                unint64_t v665 = v38 - SLODWORD(v746[0]);
              }
              unint64_t v738 = v665;
              if (v740) {
                uint64_t v57 = v740;
              }
              else {
                uint64_t v57 = 0;
              }
              uint64_t v666 = v733;
              if (v740) {
                uint64_t v666 = v713 + 4 * v731 * v662 + 4 * v663;
              }
              uint64_t v733 = v666;
              if (v740) {
                float v86 = (char *)(v713 + 4 * v731 * v662 + 4 * v663);
              }
              LODWORD(v23) = v746[0];
              uint64_t v729 = v664 + 16 * v663;
              int v693 = (v743 + *(_DWORD *)(v22 + 60)) % v700;
              int v694 = (v744 + *(_DWORD *)(v22 + 56)) % (int)v58;
            }
            else
            {
              int v667 = v744 * v699;
              LODWORD(v23) = v746[0];
              int v668 = LODWORD(v746[0]) * v699;
              unint64_t v37 = v703;
              unint64_t v97 = v697 + 16 * v703 * v743 + 16 * v744 * v699;
              unint64_t v89 = LODWORD(v746[0]) * v699;
              v53 += 16 * v743 * (int)v58 + 16 * v744 * v699;
              unint64_t v725 = 0;
              unint64_t v727 = (int)v58 - LODWORD(v746[0]) * v699;
              uint64_t v39 = v742;
              if (v742) {
                unint64_t v88 = &v698[4 * v38 * v743 + 4 * v667];
              }
              unint64_t v669 = v738;
              uint64_t v57 = v740;
              if (v742) {
                unint64_t v669 = v38 - v668;
              }
              unint64_t v738 = v669;
              uint64_t v96 = v713;
              uint64_t v670 = v713 + 4 * v743 * v700 + 4 * v667;
              unint64_t v671 = v700 - v668;
              if (v740) {
                float v86 = (char *)v670;
              }
              unint64_t v672 = v731;
              if (v740) {
                unint64_t v672 = v671;
              }
              unint64_t v731 = v672;
              unint64_t v90 = v84;
            }
            goto LABEL_389;
          }
        }
      case 14:
        int v415 = v745;
        __asm { FMOV            V0.4S, #1.0 }
        while (1)
        {
          int v417 = v23;
          do
          {
            v11.i32[0] = 1.0;
            v10.i32[0] = 1.0;
            if (v57)
            {
              v10.i32[0] = *(_DWORD *)v86;
              if (*(float *)v86 <= 0.0) {
                goto LABEL_684;
              }
            }
            if (v39)
            {
              v11.i32[0] = *(_DWORD *)v88;
              if (*(float *)v88 <= 0.0)
              {
                float32x4_t v11 = *(float32x4_t *)v53;
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
LABEL_683:
                *(_DWORD *)unint64_t v88 = v10.i32[0];
                goto LABEL_684;
              }
            }
            float32x4_t v418 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
            v10.f32[0] = (float)(v10.f32[0] + v11.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
            float32x4_t v419 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v97);
            float32x4_t v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), vmlaq_f32(v419, vsubq_f32(_Q0, v419), vsubq_f32(v418, *(float32x4_t *)v53)));
            *(float32x4_t *)unint64_t v97 = v11;
            if (v39) {
              goto LABEL_683;
            }
LABEL_684:
            unint64_t v420 = v53 + 16 * v699;
            if (v420 >= v90) {
              uint64_t v421 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v421 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v421;
            uint64_t v53 = v420 + 16 * v421;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v417;
          }
          while (v417);
          if (v725)
          {
            unint64_t v422 = v729 + 16 * v727;
            if (v422 >= v725) {
              uint64_t v423 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v423 = 0;
            }
            float v86 = (char *)(v733 + 4 * v731 + 4 * v423);
            if (v422 >= v725) {
              uint64_t v424 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v424 = 0;
            }
            uint64_t v53 = v422 + 16 * v424;
            v90 += 16 * v424 + 16 * v727;
            v733 += 4 * v731 + 4 * v423;
            uint64_t v729 = v53;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          if (!--v415) {
            goto LABEL_908;
          }
        }
      case 15:
        uint64_t v425 = (int)v57;
        int v704 = v745;
        unint64_t v696 = v38;
        uint64_t v426 = 4 * (int)v39;
        uint64_t v427 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v428 = -(uint64_t)(int)v58;
        uint64_t v715 = v428;
        while (1)
        {
          float v429 = 1.0;
          v14.i32[0] = 1.0;
          if (!v57 || (v14.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (float v429 = *(float *)v88, *(float *)v88 <= 0.0))
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = v14.i32[0];
            }
            else
            {
              uint64_t v430 = v425;
              unint64_t v431 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v15.i32[0] = *(_DWORD *)v53;
              v16.i32[0] = *(_DWORD *)(v53 + 12);
              PDAoverlayPDA(v750.f32, *(float *)v97, *(float *)(v97 + 4), *(float *)(v97 + 8), *(float *)(v97 + 12), v429, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v53, COERCE_FLOAT(*(void *)(v53 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v53 + 4))), v16.f32[0], v14.f32[0]);
              LODWORD(v39) = v742;
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              LODWORD(v57) = v740;
              unint64_t v90 = v431;
              uint64_t v425 = v430;
              uint64_t v428 = v715;
              uint64_t v427 = 16 * v699;
            }
          }
          unint64_t v432 = v53 + 16 * v699;
          if (v432 >= v90) {
            uint64_t v433 = v428;
          }
          else {
            uint64_t v433 = 0;
          }
          v86 += 4 * v425 + 4 * v433;
          uint64_t v53 = v432 + 16 * v433;
          v88 += v426;
          v97 += v427;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v434 = v729 + 16 * v727;
              uint64_t v435 = -(uint64_t)(v731 * v700);
              if (v434 < v725) {
                uint64_t v435 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v435);
              uint64_t v436 = -(uint64_t)(v727 * v700);
              if (v434 < v725) {
                uint64_t v436 = 0;
              }
              uint64_t v53 = v434 + 16 * v436;
              v90 += 16 * v436 + 16 * v727;
              v733 += 4 * v731 + 4 * v435;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v704) {
              break;
            }
          }
        }
        goto LABEL_997;
      case 16:
        int v437 = v745;
        v9.i32[0] = 1.0;
        while (1)
        {
          int v438 = v23;
          do
          {
            v11.i32[0] = 1.0;
            v10.i32[0] = 1.0;
            if (v57)
            {
              v10.i32[0] = *(_DWORD *)v86;
              if (*(float *)v86 <= 0.0) {
                goto LABEL_731;
              }
            }
            if (v39)
            {
              v11.i32[0] = *(_DWORD *)v88;
              if (*(float *)v88 <= 0.0)
              {
                float32x4_t v11 = *(float32x4_t *)v53;
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
LABEL_730:
                *(_DWORD *)unint64_t v88 = v10.i32[0];
                goto LABEL_731;
              }
            }
            float32x4_t v439 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v97);
            float32x4_t v440 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), *(float32x4_t *)v53);
            float32x4_t v441 = vmulq_n_f32(v439, v10.f32[0]);
            float32x4_t v442 = vmulq_n_f32(v440, v11.f32[0]);
            float32x4_t v443 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v441, v442), (int8x16_t)v442, (int8x16_t)v441);
            float32x4_t v444 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32(v443, v439, 1.0 - v10.f32[0]), (int8x16_t)v443);
            v10.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
            float32x4_t v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32(v444, v440, 1.0 - v11.f32[0]), (int8x16_t)v444));
            *(float32x4_t *)unint64_t v97 = v11;
            if (v39) {
              goto LABEL_730;
            }
LABEL_731:
            unint64_t v445 = v53 + 16 * v699;
            if (v445 >= v90) {
              uint64_t v446 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v446 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v446;
            uint64_t v53 = v445 + 16 * v446;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v438;
          }
          while (v438);
          if (v725)
          {
            unint64_t v447 = v729 + 16 * v727;
            if (v447 >= v725) {
              uint64_t v448 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v448 = 0;
            }
            float v86 = (char *)(v733 + 4 * v731 + 4 * v448);
            if (v447 >= v725) {
              uint64_t v449 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v449 = 0;
            }
            uint64_t v53 = v447 + 16 * v449;
            v90 += 16 * v449 + 16 * v727;
            v733 += 4 * v731 + 4 * v448;
            uint64_t v729 = v53;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          if (!--v437) {
            goto LABEL_908;
          }
        }
      case 17:
        int v450 = v745;
        v9.i32[0] = 1.0;
        while (1)
        {
          int v451 = v23;
          do
          {
            v11.i32[0] = 1.0;
            v10.i32[0] = 1.0;
            if (v57)
            {
              v10.i32[0] = *(_DWORD *)v86;
              if (*(float *)v86 <= 0.0) {
                goto LABEL_756;
              }
            }
            if (v39)
            {
              v11.i32[0] = *(_DWORD *)v88;
              if (*(float *)v88 <= 0.0)
              {
                float32x4_t v11 = *(float32x4_t *)v53;
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
LABEL_755:
                *(_DWORD *)unint64_t v88 = v10.i32[0];
                goto LABEL_756;
              }
            }
            float32x4_t v452 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v97);
            float32x4_t v453 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), *(float32x4_t *)v53);
            float32x4_t v454 = vmulq_n_f32(v452, v10.f32[0]);
            float32x4_t v455 = vmulq_n_f32(v453, v11.f32[0]);
            float32x4_t v456 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v455, v454), (int8x16_t)v455, (int8x16_t)v454);
            float32x4_t v457 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32(v456, v452, 1.0 - v10.f32[0]), (int8x16_t)v456);
            v10.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
            float32x4_t v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32(v457, v453, 1.0 - v11.f32[0]), (int8x16_t)v457));
            *(float32x4_t *)unint64_t v97 = v11;
            if (v39) {
              goto LABEL_755;
            }
LABEL_756:
            unint64_t v458 = v53 + 16 * v699;
            if (v458 >= v90) {
              uint64_t v459 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v459 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v459;
            uint64_t v53 = v458 + 16 * v459;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v451;
          }
          while (v451);
          if (v725)
          {
            unint64_t v460 = v729 + 16 * v727;
            if (v460 >= v725) {
              uint64_t v461 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v461 = 0;
            }
            float v86 = (char *)(v733 + 4 * v731 + 4 * v461);
            if (v460 >= v725) {
              uint64_t v462 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v462 = 0;
            }
            uint64_t v53 = v460 + 16 * v462;
            v90 += 16 * v462 + 16 * v727;
            v733 += 4 * v731 + 4 * v461;
            uint64_t v729 = v53;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          if (!--v450) {
            goto LABEL_908;
          }
        }
      case 18:
        uint64_t v463 = (int)v57;
        int v705 = v745;
        unint64_t v696 = v38;
        uint64_t v464 = 4 * (int)v39;
        uint64_t v465 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v466 = -(uint64_t)(int)v58;
        uint64_t v716 = v466;
        while (1)
        {
          float v467 = 1.0;
          v14.i32[0] = 1.0;
          if (!v57 || (v14.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (float v467 = *(float *)v88, *(float *)v88 <= 0.0))
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = v14.i32[0];
            }
            else
            {
              uint64_t v468 = v463;
              unint64_t v469 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v15.i32[0] = *(_DWORD *)v53;
              v16.i32[0] = *(_DWORD *)(v53 + 12);
              PDAcolordodgePDA(v750.f32, *(float *)v97, *(float *)(v97 + 4), *(float *)(v97 + 8), *(float *)(v97 + 12), v467, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v53, COERCE_FLOAT(*(void *)(v53 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v53 + 4))), v16.f32[0], v14.f32[0]);
              LODWORD(v39) = v742;
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              LODWORD(v57) = v740;
              unint64_t v90 = v469;
              uint64_t v463 = v468;
              uint64_t v466 = v716;
              uint64_t v465 = 16 * v699;
            }
          }
          unint64_t v470 = v53 + 16 * v699;
          if (v470 >= v90) {
            uint64_t v471 = v466;
          }
          else {
            uint64_t v471 = 0;
          }
          v86 += 4 * v463 + 4 * v471;
          uint64_t v53 = v470 + 16 * v471;
          v88 += v464;
          v97 += v465;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v472 = v729 + 16 * v727;
              uint64_t v473 = -(uint64_t)(v731 * v700);
              if (v472 < v725) {
                uint64_t v473 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v473);
              uint64_t v474 = -(uint64_t)(v727 * v700);
              if (v472 < v725) {
                uint64_t v474 = 0;
              }
              uint64_t v53 = v472 + 16 * v474;
              v90 += 16 * v474 + 16 * v727;
              v733 += 4 * v731 + 4 * v473;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v705) {
              break;
            }
          }
        }
        goto LABEL_997;
      case 19:
        uint64_t v475 = (int)v57;
        int v706 = v745;
        unint64_t v696 = v38;
        uint64_t v476 = 4 * (int)v39;
        uint64_t v477 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v478 = -(uint64_t)(int)v58;
        uint64_t v717 = v478;
        while (1)
        {
          float v479 = 1.0;
          v14.i32[0] = 1.0;
          if (!v57 || (v14.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (float v479 = *(float *)v88, *(float *)v88 <= 0.0))
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = v14.i32[0];
            }
            else
            {
              uint64_t v480 = v475;
              unint64_t v481 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v15.i32[0] = *(_DWORD *)v53;
              v16.i32[0] = *(_DWORD *)(v53 + 12);
              PDAcolorburnPDA(v750.f32, *(float *)v97, *(float *)(v97 + 4), *(float *)(v97 + 8), *(float *)(v97 + 12), v479, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v53, COERCE_FLOAT(*(void *)(v53 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v53 + 4))), v16.f32[0], v14.f32[0]);
              LODWORD(v39) = v742;
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              LODWORD(v57) = v740;
              unint64_t v90 = v481;
              uint64_t v475 = v480;
              uint64_t v478 = v717;
              uint64_t v477 = 16 * v699;
            }
          }
          unint64_t v482 = v53 + 16 * v699;
          if (v482 >= v90) {
            uint64_t v483 = v478;
          }
          else {
            uint64_t v483 = 0;
          }
          v86 += 4 * v475 + 4 * v483;
          uint64_t v53 = v482 + 16 * v483;
          v88 += v476;
          v97 += v477;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v484 = v729 + 16 * v727;
              uint64_t v485 = -(uint64_t)(v731 * v700);
              if (v484 < v725) {
                uint64_t v485 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v485);
              uint64_t v486 = -(uint64_t)(v727 * v700);
              if (v484 < v725) {
                uint64_t v486 = 0;
              }
              uint64_t v53 = v484 + 16 * v486;
              v90 += 16 * v486 + 16 * v727;
              v733 += 4 * v731 + 4 * v485;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v706) {
              break;
            }
          }
        }
        goto LABEL_997;
      case 20:
        uint64_t v487 = (int)v57;
        int v707 = v745;
        unint64_t v696 = v38;
        uint64_t v488 = 4 * (int)v39;
        uint64_t v489 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v490 = -(uint64_t)(int)v58;
        uint64_t v718 = v490;
        while (1)
        {
          v13.i32[0] = 1.0;
          v14.i32[0] = 1.0;
          if (!v57 || (v14.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (v13.i32[0] = *(_DWORD *)v88, *(float *)v88 <= 0.0))
            {
              float32x4_t v9 = *(float32x4_t *)v53;
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = v14.i32[0];
            }
            else
            {
              uint64_t v491 = v487;
              unint64_t v492 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v9.i32[0] = *(_DWORD *)v97;
              v15.i32[0] = *(_DWORD *)v53;
              v16.i32[0] = *(_DWORD *)(v53 + 12);
              uint64_t v688 = *(void *)(v53 + 4);
              int v687 = *(_DWORD *)v53;
              PDAsoftlightPDA(&v750, *(float32x2_t *)v9.f32, *(float32_t *)(v97 + 4), *(float *)(v97 + 8), *(float *)(v97 + 12), *(double *)v13.i64, *(int32x2_t *)v14.f32, *(double *)v15.i64, *(double *)v16.i64, v3, (uint64_t)v27, v96, v37, v57, v54, v90, *(float32x2_t *)((char *)&v688 - 4), *((float *)&v688 + 1), v16.f32[0],
                v14.f32[0]);
              LODWORD(v39) = v742;
              v9.i32[1] = v750.i32[1];
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              uint64_t v57 = v740;
              unint64_t v90 = v492;
              uint64_t v487 = v491;
              uint64_t v490 = v718;
              uint64_t v489 = 16 * v699;
            }
          }
          unint64_t v493 = v53 + 16 * v699;
          if (v493 >= v90) {
            uint64_t v494 = v490;
          }
          else {
            uint64_t v494 = 0;
          }
          v86 += 4 * v487 + 4 * v494;
          uint64_t v53 = v493 + 16 * v494;
          v88 += v488;
          v97 += v489;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v495 = v729 + 16 * v727;
              uint64_t v496 = -(uint64_t)(v731 * v700);
              if (v495 < v725) {
                uint64_t v496 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v496);
              uint64_t v497 = -(uint64_t)(v727 * v700);
              if (v495 < v725) {
                uint64_t v497 = 0;
              }
              uint64_t v53 = v495 + 16 * v497;
              v90 += 16 * v497 + 16 * v727;
              v733 += 4 * v731 + 4 * v496;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v707) {
              break;
            }
          }
        }
        goto LABEL_997;
      case 21:
        uint64_t v498 = (int)v57;
        int v708 = v745;
        unint64_t v696 = v38;
        uint64_t v499 = 4 * (int)v39;
        uint64_t v500 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v501 = -(uint64_t)(int)v58;
        uint64_t v719 = v501;
        while (1)
        {
          float v502 = 1.0;
          v14.i32[0] = 1.0;
          if (!v57 || (v14.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (float v502 = *(float *)v88, *(float *)v88 <= 0.0))
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = v14.i32[0];
            }
            else
            {
              uint64_t v503 = v498;
              unint64_t v504 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v15.i32[0] = *(_DWORD *)v53;
              v16.i32[0] = *(_DWORD *)(v53 + 12);
              PDAhardlightPDA(v750.f32, *(float *)v97, *(float *)(v97 + 4), *(float *)(v97 + 8), *(float *)(v97 + 12), v502, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v53, COERCE_FLOAT(*(void *)(v53 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v53 + 4))), v16.f32[0], v14.f32[0]);
              LODWORD(v39) = v742;
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              LODWORD(v57) = v740;
              unint64_t v90 = v504;
              uint64_t v498 = v503;
              uint64_t v501 = v719;
              uint64_t v500 = 16 * v699;
            }
          }
          unint64_t v505 = v53 + 16 * v699;
          if (v505 >= v90) {
            uint64_t v506 = v501;
          }
          else {
            uint64_t v506 = 0;
          }
          v86 += 4 * v498 + 4 * v506;
          uint64_t v53 = v505 + 16 * v506;
          v88 += v499;
          v97 += v500;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v507 = v729 + 16 * v727;
              uint64_t v508 = -(uint64_t)(v731 * v700);
              if (v507 < v725) {
                uint64_t v508 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v508);
              uint64_t v509 = -(uint64_t)(v727 * v700);
              if (v507 < v725) {
                uint64_t v509 = 0;
              }
              uint64_t v53 = v507 + 16 * v509;
              v90 += 16 * v509 + 16 * v727;
              v733 += 4 * v731 + 4 * v508;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v708) {
              break;
            }
          }
        }
        goto LABEL_997;
      case 22:
        int v510 = v745;
        while (1)
        {
          int v511 = v23;
          do
          {
            v10.i32[0] = 1.0;
            v9.i32[0] = 1.0;
            if (v57)
            {
              v9.i32[0] = *(_DWORD *)v86;
              if (*(float *)v86 <= 0.0) {
                goto LABEL_869;
              }
            }
            if (v39)
            {
              v10.i32[0] = *(_DWORD *)v88;
              if (*(float *)v88 <= 0.0)
              {
                float32x4_t v10 = *(float32x4_t *)v53;
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
LABEL_868:
                *(_DWORD *)unint64_t v88 = v9.i32[0];
                goto LABEL_869;
              }
            }
            float32x4_t v512 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), *(float32x4_t *)v97);
            float32x4_t v513 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            float32x4_t v514 = vmulq_n_f32(v512, v9.f32[0]);
            v9.f32[0] = (float)(v10.f32[0] + v9.f32[0]) - (float)(v10.f32[0] * v9.f32[0]);
            float32x4_t v515 = vsubq_f32(v513, *(float32x4_t *)v53);
            float32x4_t v516 = vmulq_n_f32(v515, v10.f32[0]);
            float32x4_t v517 = vsubq_f32(vaddq_f32(v512, v515), v514);
            float32x4_t v518 = vsubq_f32(v514, v516);
            float32x4_t v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0), vaddq_f32(vsubq_f32(v517, v516), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v518), (int8x16_t)vnegq_f32(v518), (int8x16_t)v518)));
            *(float32x4_t *)unint64_t v97 = v10;
            if (v39) {
              goto LABEL_868;
            }
LABEL_869:
            unint64_t v519 = v53 + 16 * v699;
            if (v519 >= v90) {
              uint64_t v520 = -(uint64_t)(int)v58;
            }
            else {
              uint64_t v520 = 0;
            }
            v86 += 4 * (int)v57 + 4 * v520;
            uint64_t v53 = v519 + 16 * v520;
            v88 += 4 * (int)v39;
            v97 += 16 * v699;
            --v511;
          }
          while (v511);
          if (v725)
          {
            unint64_t v521 = v729 + 16 * v727;
            if (v521 >= v725) {
              uint64_t v522 = -(uint64_t)(v731 * v700);
            }
            else {
              uint64_t v522 = 0;
            }
            float v86 = (char *)(v733 + 4 * v731 + 4 * v522);
            if (v521 >= v725) {
              uint64_t v523 = -(uint64_t)(v727 * v700);
            }
            else {
              uint64_t v523 = 0;
            }
            uint64_t v53 = v521 + 16 * v523;
            v90 += 16 * v523 + 16 * v727;
            v733 += 4 * v731 + 4 * v522;
            uint64_t v729 = v53;
          }
          else
          {
            v53 += 16 * v727;
            v86 += 4 * v731;
          }
          v97 += 16 * v735;
          v88 += 4 * v738;
          if (!--v510) {
            goto LABEL_908;
          }
        }
      case 23:
        int v524 = v745;
        v525.i64[0] = 0xC0000000C0000000;
        v525.i64[1] = 0xC0000000C0000000;
        break;
      case 24:
        uint64_t v535 = (int)v57;
        int v709 = v745;
        unint64_t v696 = v38;
        uint64_t v536 = 4 * (int)v39;
        uint64_t v537 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v538 = -(uint64_t)(int)v58;
        uint64_t v720 = v538;
        while (1)
        {
          float v539 = 1.0;
          v14.i32[0] = 1.0;
          if (!v57 || (v14.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (float v539 = *(float *)v88, *(float *)v88 <= 0.0))
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = v14.i32[0];
            }
            else
            {
              uint64_t v540 = v535;
              unint64_t v541 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v15.i32[0] = *(_DWORD *)v53;
              v16.i32[0] = *(_DWORD *)(v53 + 12);
              PDAhuePDA(v750.f32, *(float *)v97, *(float *)(v97 + 4), *(float *)(v97 + 8), *(float *)(v97 + 12), v539, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v53, COERCE_FLOAT(*(void *)(v53 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v53 + 4))), v16.f32[0], v14.f32[0]);
              LODWORD(v39) = v742;
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              LODWORD(v57) = v740;
              unint64_t v90 = v541;
              uint64_t v535 = v540;
              uint64_t v538 = v720;
              uint64_t v537 = 16 * v699;
            }
          }
          unint64_t v542 = v53 + 16 * v699;
          if (v542 >= v90) {
            uint64_t v543 = v538;
          }
          else {
            uint64_t v543 = 0;
          }
          v86 += 4 * v535 + 4 * v543;
          uint64_t v53 = v542 + 16 * v543;
          v88 += v536;
          v97 += v537;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v544 = v729 + 16 * v727;
              uint64_t v545 = -(uint64_t)(v731 * v700);
              if (v544 < v725) {
                uint64_t v545 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v545);
              uint64_t v546 = -(uint64_t)(v727 * v700);
              if (v544 < v725) {
                uint64_t v546 = 0;
              }
              uint64_t v53 = v544 + 16 * v546;
              v90 += 16 * v546 + 16 * v727;
              v733 += 4 * v731 + 4 * v545;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v709) {
              break;
            }
          }
        }
        goto LABEL_997;
      case 25:
        uint64_t v547 = (int)v57;
        int v710 = v745;
        unint64_t v696 = v38;
        uint64_t v548 = 4 * (int)v39;
        uint64_t v549 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v550 = -(uint64_t)(int)v58;
        uint64_t v721 = v550;
        while (1)
        {
          float v551 = 1.0;
          v14.i32[0] = 1.0;
          if (!v57 || (v14.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (float v551 = *(float *)v88, *(float *)v88 <= 0.0))
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = v14.i32[0];
            }
            else
            {
              uint64_t v552 = v547;
              unint64_t v553 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v15.i32[0] = *(_DWORD *)v53;
              v16.i32[0] = *(_DWORD *)(v53 + 12);
              PDAsaturationPDA(v750.f32, *(float *)v97, *(float *)(v97 + 4), *(float *)(v97 + 8), *(float *)(v97 + 12), v551, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v53, COERCE_FLOAT(*(void *)(v53 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v53 + 4))), v16.f32[0], v14.f32[0]);
              LODWORD(v39) = v742;
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              LODWORD(v57) = v740;
              unint64_t v90 = v553;
              uint64_t v547 = v552;
              uint64_t v550 = v721;
              uint64_t v549 = 16 * v699;
            }
          }
          unint64_t v554 = v53 + 16 * v699;
          if (v554 >= v90) {
            uint64_t v555 = v550;
          }
          else {
            uint64_t v555 = 0;
          }
          v86 += 4 * v547 + 4 * v555;
          uint64_t v53 = v554 + 16 * v555;
          v88 += v548;
          v97 += v549;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v556 = v729 + 16 * v727;
              uint64_t v557 = -(uint64_t)(v731 * v700);
              if (v556 < v725) {
                uint64_t v557 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v557);
              uint64_t v558 = -(uint64_t)(v727 * v700);
              if (v556 < v725) {
                uint64_t v558 = 0;
              }
              uint64_t v53 = v556 + 16 * v558;
              v90 += 16 * v558 + 16 * v727;
              v733 += 4 * v731 + 4 * v557;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v710) {
              break;
            }
          }
        }
        goto LABEL_997;
      case 26:
        uint64_t v559 = (int)v57;
        int v711 = v745;
        unint64_t v696 = v38;
        uint64_t v560 = 4 * (int)v39;
        uint64_t v561 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v562 = -(uint64_t)(int)v58;
        uint64_t v722 = v562;
        while (1)
        {
          v14.i32[0] = 1.0;
          float v563 = 1.0;
          if (!v57 || (float v563 = *(float *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (v14.i32[0] = *(_DWORD *)v88, *(float *)v88 <= 0.0))
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(float *)unint64_t v88 = v563;
            }
            else
            {
              uint64_t v564 = v559;
              unint64_t v565 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v15.i32[0] = *(_DWORD *)v97;
              v16.i32[0] = *(_DWORD *)(v97 + 12);
              PDAluminosityPDA(v750.f32, *(float *)v53, *(float *)(v53 + 4), *(float *)(v53 + 8), *(float *)(v53 + 12), v563, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v97, COERCE_FLOAT(*(void *)(v97 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v97 + 4))), v16.f32[0], v14.f32[0]);
              LODWORD(v39) = v742;
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              LODWORD(v57) = v740;
              unint64_t v90 = v565;
              uint64_t v559 = v564;
              uint64_t v562 = v722;
              uint64_t v561 = 16 * v699;
            }
          }
          unint64_t v566 = v53 + 16 * v699;
          if (v566 >= v90) {
            uint64_t v567 = v562;
          }
          else {
            uint64_t v567 = 0;
          }
          v86 += 4 * v559 + 4 * v567;
          uint64_t v53 = v566 + 16 * v567;
          v88 += v560;
          v97 += v561;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v568 = v729 + 16 * v727;
              uint64_t v569 = -(uint64_t)(v731 * v700);
              if (v568 < v725) {
                uint64_t v569 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v569);
              uint64_t v570 = -(uint64_t)(v727 * v700);
              if (v568 < v725) {
                uint64_t v570 = 0;
              }
              uint64_t v53 = v568 + 16 * v570;
              v90 += 16 * v570 + 16 * v727;
              v733 += 4 * v731 + 4 * v569;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v711) {
              break;
            }
          }
        }
        goto LABEL_997;
      case 27:
        uint64_t v571 = (int)v57;
        int v712 = v745;
        unint64_t v696 = v38;
        uint64_t v572 = 4 * (int)v39;
        uint64_t v573 = 16 * v699;
        unint64_t v692 = v58;
        uint64_t v574 = -(uint64_t)(int)v58;
        uint64_t v723 = v574;
        while (1)
        {
          float v575 = 1.0;
          v14.i32[0] = 1.0;
          if (!v57 || (v14.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
          {
            if (v39 && (float v575 = *(float *)v88, *(float *)v88 <= 0.0))
            {
              *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
              *(_DWORD *)unint64_t v88 = v14.i32[0];
            }
            else
            {
              uint64_t v576 = v571;
              unint64_t v577 = v90;
              float32x4_t v750 = 0uLL;
              int v751 = 0;
              v15.i32[0] = *(_DWORD *)v53;
              v16.i32[0] = *(_DWORD *)(v53 + 12);
              PDAluminosityPDA(v750.f32, *(float *)v97, *(float *)(v97 + 4), *(float *)(v97 + 8), *(float *)(v97 + 12), v575, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v53, COERCE_FLOAT(*(void *)(v53 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v53 + 4))), v16.f32[0], v14.f32[0]);
              LODWORD(v39) = v742;
              *(float32x4_t *)unint64_t v97 = v750;
              if (v742) {
                *(_DWORD *)unint64_t v88 = v751;
              }
              LODWORD(v57) = v740;
              unint64_t v90 = v577;
              uint64_t v571 = v576;
              uint64_t v574 = v723;
              uint64_t v573 = 16 * v699;
            }
          }
          unint64_t v578 = v53 + 16 * v699;
          if (v578 >= v90) {
            uint64_t v579 = v574;
          }
          else {
            uint64_t v579 = 0;
          }
          v86 += 4 * v571 + 4 * v579;
          uint64_t v53 = v578 + 16 * v579;
          v88 += v572;
          v97 += v573;
          LODWORD(v23) = v23 - 1;
          if (!v23)
          {
            if (v725)
            {
              unint64_t v580 = v729 + 16 * v727;
              uint64_t v581 = -(uint64_t)(v731 * v700);
              if (v580 < v725) {
                uint64_t v581 = 0;
              }
              float v86 = (char *)(v733 + 4 * v731 + 4 * v581);
              uint64_t v582 = -(uint64_t)(v727 * v700);
              if (v580 < v725) {
                uint64_t v582 = 0;
              }
              uint64_t v53 = v580 + 16 * v582;
              v90 += 16 * v582 + 16 * v727;
              v733 += 4 * v731 + 4 * v581;
              uint64_t v729 = v53;
            }
            else
            {
              v53 += 16 * v727;
              v86 += 4 * v731;
            }
            LODWORD(v23) = v714;
            v97 += 16 * v735;
            v88 += 4 * v738;
            if (!--v712) {
              break;
            }
          }
        }
LABEL_997:
        int v745 = 0;
        uint64_t v22 = v690;
        LODWORD(v20) = v691;
        unint64_t v38 = v696;
        uint64_t v53 = v702;
        unint64_t v58 = v692;
        goto LABEL_998;
      default:
        goto LABEL_909;
    }
LABEL_885:
    int v526 = v23;
    while (1)
    {
      v11.i32[0] = 1.0;
      v10.i32[0] = 1.0;
      if (!v57 || (v10.i32[0] = *(_DWORD *)v86, *(float *)v86 > 0.0))
      {
        if (v39 && (v11.i32[0] = *(_DWORD *)v88, *(float *)v88 <= 0.0))
        {
          float32x4_t v11 = *(float32x4_t *)v53;
          *(_OWORD *)unint64_t v97 = *(_OWORD *)v53;
        }
        else
        {
          float32x4_t v527 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
          v10.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
          float32x4_t v528 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v97);
          float32x4_t v529 = vsubq_f32(v527, *(float32x4_t *)v53);
          float32x4_t v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), vmlaq_f32(vaddq_f32(v528, v529), v525, vmulq_f32(v529, v528)));
          *(float32x4_t *)unint64_t v97 = v11;
          if (!v39) {
            goto LABEL_894;
          }
        }
        *(_DWORD *)unint64_t v88 = v10.i32[0];
      }
LABEL_894:
      unint64_t v530 = v53 + 16 * v699;
      if (v530 >= v90) {
        uint64_t v531 = -(uint64_t)(int)v58;
      }
      else {
        uint64_t v531 = 0;
      }
      v86 += 4 * (int)v57 + 4 * v531;
      uint64_t v53 = v530 + 16 * v531;
      v88 += 4 * (int)v39;
      v97 += 16 * v699;
      if (!--v526)
      {
        if (v725)
        {
          unint64_t v532 = v729 + 16 * v727;
          if (v532 >= v725) {
            uint64_t v533 = -(uint64_t)(v731 * v700);
          }
          else {
            uint64_t v533 = 0;
          }
          float v86 = (char *)(v733 + 4 * v731 + 4 * v533);
          if (v532 >= v725) {
            uint64_t v534 = -(uint64_t)(v727 * v700);
          }
          else {
            uint64_t v534 = 0;
          }
          uint64_t v53 = v532 + 16 * v534;
          v90 += 16 * v534 + 16 * v727;
          v733 += 4 * v731 + 4 * v533;
          uint64_t v729 = v53;
        }
        else
        {
          v53 += 16 * v727;
          v86 += 4 * v731;
        }
        v97 += 16 * v735;
        v88 += 4 * v738;
        if (!--v524) {
          goto LABEL_908;
        }
        goto LABEL_885;
      }
    }
  }
  uint64_t v28 = *(unsigned int *)(v3 + 128);
  if ((v28 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400) {
      CMYKf_mark_constmask(v3, v20, *(double *)v9.i64, *(double *)v10.i64, v11, v12, v13, v14, v15, v16, (uint64_t)v27, v4, v5, v6, v28, v8);
    }
    else {
      CMYKf_mark_pixelmask(v3, v20, *(float32x2_t *)v9.f32, v10, v11, v12, *(double *)v13.i64, v14, *(double *)v15.i64, *(double *)v16.i64, (uint64_t)v27, v4, v5, v6, v28, v8);
    }
    return 1;
  }
  int v40 = *(_DWORD *)(v3 + 112);
  int v41 = *(_DWORD *)(v3 + 116);
  unsigned int v42 = (v40 + 15) & 0xFFFFFFF0;
  size_t v43 = v42 * v41;
  if ((int)v43 <= 4096)
  {
    uint64_t v45 = &v750;
  }
  else
  {
    uint64_t v44 = (float32x4_t *)malloc_type_malloc(v43, 0x75DBB33BuLL);
    if (!v44) {
      return 1;
    }
    uint64_t v45 = v44;
    unint64_t v27 = *(uint16x4_t **)(v22 + 136);
    LODWORD(v2++*(_DWORD *)(result + 8) = *(_DWORD *)(v22 + 128);
  }
  CGSConvertBitsToMask(v27, *(_DWORD *)(v22 + 124), v45, v42, v40, v41, v28);
  long long v75 = *(_OWORD *)(v22 + 112);
  v746[6] = *(_OWORD *)(v22 + 96);
  long long v747 = v75;
  long long v76 = *(_OWORD *)(v22 + 144);
  long long v748 = *(_OWORD *)(v22 + 128);
  long long v749 = v76;
  long long v77 = *(_OWORD *)(v22 + 48);
  v746[2] = *(_OWORD *)(v22 + 32);
  v746[3] = v77;
  long long v78 = *(_OWORD *)(v22 + 80);
  v746[4] = *(_OWORD *)(v22 + 64);
  v746[5] = v78;
  long long v79 = *(_OWORD *)v22;
  float32x4_t v80 = *(float32x4_t *)(v22 + 16);
  v746[0] = *(_OWORD *)v22;
  v746[1] = v80;
  HIDWORD(v747) = (v40 + 15) & 0xFFFFFFF0;
  *((void *)&v748 + 1) = v45;
  if (BYTE1(v746[0]) << 8 == 1024) {
    CMYKf_mark_constmask((uint64_t)v746, v20, *(double *)&v79, *(double *)v80.i64, v69, v70, v71, v72, v73, v74, v63, v64, v65, v66, v67, v68);
  }
  else {
    CMYKf_mark_pixelmask((uint64_t)v746, v20, *(float32x2_t *)&v79, v80, v69, v70, *(double *)v71.i64, v72, *(double *)v73.i64, *(double *)v74.i64, v63, v64, v65, v66, v67, v68);
  }
  if (v45 != &v750)
  {
    float32x4_t v81 = v45;
LABEL_1218:
    free(v81);
  }
  return 1;
}

float PDAoverlayPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18 = a6 - a2;
  float v19 = a6 - a3;
  float v20 = a6 - a4;
  float v21 = a6 - a5;
  float v22 = a14 - a11;
  float v23 = a14 - a12;
  float v24 = a14 - a13;
  float v25 = (float)(v18 * (float)(a14 - a10)) + (float)(v18 * (float)(a14 - a10));
  float v26 = (float)(v19 * (float)(a14 - a11)) + (float)(v19 * (float)(a14 - a11));
  float v27 = (float)(v20 * (float)(a14 - a12)) + (float)(v20 * (float)(a14 - a12));
  float v28 = (float)(v21 * (float)(a14 - a13)) + (float)(v21 * (float)(a14 - a13));
  float v29 = a6 * a14;
  float v30 = a6 * 0.5;
  BOOL v31 = v18 < (float)(a6 * 0.5);
  float v32 = a14 + 1.0;
  float v33 = a6 + 1.0;
  float v34 = (float)((float)((float)((float)(a6 + 1.0) * (float)(a14 - a10)) + (float)(v18 * (float)(a14 + 1.0))) - v25)
      - (float)(a6 * a14);
  float v35 = 1.0 - a14;
  float v36 = 1.0 - a6;
  float v37 = (float)((float)((float)(1.0 - a6) * (float)(a14 - a10)) + (float)(v18 * (float)(1.0 - a14))) + v25;
  if (!v31) {
    float v37 = v34;
  }
  BOOL v31 = v19 < v30;
  float v38 = (float)((float)((float)(v33 * v22) + (float)(v19 * v32)) - v26) - v29;
  float v39 = (float)((float)(v36 * v22) + (float)(v19 * v35)) + v26;
  if (!v31) {
    float v39 = v38;
  }
  BOOL v31 = v20 < v30;
  float v40 = (float)((float)((float)(v33 * v23) + (float)(v20 * v32)) - v27) - v29;
  float v41 = (float)((float)(v36 * v23) + (float)(v20 * v35)) + v27;
  if (!v31) {
    float v41 = v40;
  }
  BOOL v31 = v21 < v30;
  float v42 = (float)((float)((float)(v33 * v24) + (float)(v21 * v32)) - v28) - v29;
  float v43 = (float)((float)(v36 * v24) + (float)(v21 * v35)) + v28;
  if (!v31) {
    float v43 = v42;
  }
  float v44 = (float)(a6 + a14) - v29;
  *a1 = v44 - v37;
  a1[1] = v44 - v39;
  float result = v44 - v41;
  a1[2] = v44 - v41;
  a1[3] = v44 - v43;
  a1[4] = v44;
  return result;
}

float PDAcolordodgePDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18 = a6 - a2;
  float v19 = a6 - a3;
  float v20 = a14 - a10;
  float v21 = a14 * a14;
  float v22 = 0.0;
  float v23 = 0.0;
  if (v18 != 0.0)
  {
    if (v20 == a14) {
      float v23 = 1.0;
    }
    else {
      float v23 = (float)(v18 * v21) / (float)(a14 - v20);
    }
  }
  float v24 = a6 - a4;
  float v25 = a14 - a11;
  if (v19 != 0.0)
  {
    if (v25 == a14) {
      float v22 = 1.0;
    }
    else {
      float v22 = (float)(v19 * v21) / (float)(a14 - v25);
    }
  }
  float v26 = a6 - a5;
  float v27 = a14 - a12;
  float v28 = 0.0;
  float v29 = 0.0;
  if (v24 != 0.0)
  {
    if (v27 == a14) {
      float v29 = 1.0;
    }
    else {
      float v29 = (float)(v24 * v21) / (float)(a14 - v27);
    }
  }
  float v30 = a14 - a13;
  if (v26 != 0.0)
  {
    if (v30 == a14) {
      float v28 = 1.0;
    }
    else {
      float v28 = (float)(v26 * v21) / (float)(a14 - v30);
    }
  }
  if (a14 != 1.0)
  {
    float v23 = v23 + (float)(v18 * (float)(1.0 - a14));
    float v22 = v22 + (float)(v19 * (float)(1.0 - a14));
    float v29 = v29 + (float)(v24 * (float)(1.0 - a14));
    float v28 = v28 + (float)(v26 * (float)(1.0 - a14));
  }
  float v31 = v23 + (float)(v20 * (float)(1.0 - a6));
  float v32 = v22 + (float)(v25 * (float)(1.0 - a6));
  float v33 = v29 + (float)(v27 * (float)(1.0 - a6));
  if (a6 == 1.0) {
    float v31 = v23;
  }
  else {
    float v22 = v32;
  }
  if (a6 == 1.0) {
    float v34 = v29;
  }
  else {
    float v34 = v33;
  }
  if (a6 == 1.0) {
    float v35 = v28;
  }
  else {
    float v35 = v28 + (float)(v30 * (float)(1.0 - a6));
  }
  float v36 = (float)(a6 + a14) - (float)(a6 * a14);
  if (v31 > v36) {
    float v31 = v36;
  }
  if (v22 > v36) {
    float v22 = v36;
  }
  if (v34 > v36) {
    float v34 = v36;
  }
  if (v35 > v36) {
    float v35 = v36;
  }
  *a1 = v36 - v31;
  a1[1] = v36 - v22;
  float result = v36 - v34;
  a1[2] = v36 - v34;
  a1[3] = v36 - v35;
  a1[4] = v36;
  return result;
}

float PDAcolorburnPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18 = a6 - a2;
  float v19 = a6 - a3;
  float v20 = a6 - a4;
  float v21 = a6 - a5;
  float v22 = a6 * a14;
  float v23 = a6 * a14;
  float v24 = a6 * a14;
  float v25 = a6 * a14;
  float v26 = a6 * a14;
  if (a14 != 1.0)
  {
    float v23 = v22 + (float)(v18 * (float)(1.0 - a14));
    float v24 = v22 + (float)(v19 * (float)(1.0 - a14));
    float v25 = v22 + (float)(v20 * (float)(1.0 - a14));
    float v26 = v22 + (float)(v21 * (float)(1.0 - a14));
  }
  float v27 = a14 - a10;
  float v28 = a14 - a11;
  float v29 = a14 - a12;
  float v30 = a14 - a13;
  if (a6 != 1.0)
  {
    float v23 = v23 + (float)(v27 * (float)(1.0 - a6));
    float v24 = v24 + (float)(v28 * (float)(1.0 - a6));
    float v25 = v25 + (float)(v29 * (float)(1.0 - a6));
    float v26 = v26 + (float)(v30 * (float)(1.0 - a6));
  }
  float v31 = a6 - v18;
  if (v31 != 0.0)
  {
    if (v27 == 0.0 || (float v23 = v23 - (float)((float)(v31 * (float)(a14 * a14)) / v27), v23 < 0.0)) {
      float v23 = 0.0;
    }
  }
  float v32 = a6 - v19;
  if (v32 != 0.0)
  {
    if (v28 == 0.0 || (float v24 = v24 - (float)((float)(v32 * (float)(a14 * a14)) / v28), v24 < 0.0)) {
      float v24 = 0.0;
    }
  }
  float v33 = a6 - v20;
  if (v33 != 0.0)
  {
    if (v29 == 0.0 || (float v25 = v25 - (float)((float)(v33 * (float)(a14 * a14)) / v29), v25 < 0.0)) {
      float v25 = 0.0;
    }
  }
  float v34 = a6 - v21;
  if (v34 != 0.0)
  {
    if (v30 == 0.0 || (float v26 = v26 - (float)((float)(v34 * (float)(a14 * a14)) / v30), v26 < 0.0)) {
      float v26 = 0.0;
    }
  }
  float result = (float)(a6 + a14) - v22;
  *a1 = result - v23;
  a1[1] = result - v24;
  a1[2] = result - v25;
  a1[3] = result - v26;
  a1[4] = result;
  return result;
}

float PDAhardlightPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18 = a6 - a2;
  float v19 = a6 - a3;
  float v20 = a6 - a4;
  float v21 = a6 - a5;
  float v22 = a14 - a11;
  float v23 = a14 - a12;
  float v24 = a14 - a13;
  float v25 = (float)(v18 * (float)(a14 - a10)) + (float)(v18 * (float)(a14 - a10));
  float v26 = (float)(v19 * (float)(a14 - a11)) + (float)(v19 * (float)(a14 - a11));
  float v27 = (float)(v20 * (float)(a14 - a12)) + (float)(v20 * (float)(a14 - a12));
  float v28 = (float)(v21 * (float)(a14 - a13)) + (float)(v21 * (float)(a14 - a13));
  float v29 = a6 * a14;
  float v30 = a14 * 0.5;
  float v31 = 1.0 - a14;
  float v32 = 1.0 - a6;
  float v33 = (float)((float)((float)(1.0 - a6) * (float)(a14 - a10)) + (float)(v18 * (float)(1.0 - a14))) + v25;
  float v34 = a14 + 1.0;
  float v35 = a6 + 1.0;
  float v36 = (float)((float)((float)((float)(a6 + 1.0) * (float)(a14 - a10)) + (float)(v18 * (float)(a14 + 1.0))) - v25)
      - (float)(a6 * a14);
  if ((float)(a14 - a10) <= (float)(a14 * 0.5)) {
    float v36 = v33;
  }
  float v37 = (float)((float)(v32 * v22) + (float)(v19 * v31)) + v26;
  float v38 = (float)((float)((float)(v35 * v22) + (float)(v19 * v34)) - v26) - v29;
  if (v22 <= v30) {
    float v38 = v37;
  }
  float v39 = (float)((float)(v32 * v23) + (float)(v20 * v31)) + v27;
  float v40 = (float)((float)((float)(v35 * v23) + (float)(v20 * v34)) - v27) - v29;
  if (v23 <= v30) {
    float v40 = v39;
  }
  float v41 = (float)((float)(v32 * v24) + (float)(v21 * v31)) + v28;
  float v42 = (float)((float)((float)(v35 * v24) + (float)(v21 * v34)) - v28) - v29;
  if (v24 <= v30) {
    float v42 = v41;
  }
  float v43 = (float)(a6 + a14) - v29;
  *a1 = v43 - v36;
  a1[1] = v43 - v38;
  float result = v43 - v40;
  a1[2] = v43 - v40;
  a1[3] = v43 - v42;
  a1[4] = v43;
  return result;
}

float32x4_t PDAsoftlightPDA(float32x4_t *a1, float32x2_t a2, float32_t a3, float a4, float a5, double a6, int32x2_t a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x2_t a17, float a18, float a19, float a20)
{
  *(float *)a7.i32 = a20;
  float32x2_t v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
  a2.f32[1] = a3;
  float32x2_t v19 = vsub_f32(v18, a2);
  float v20 = *(float *)&a6 - a4;
  float v21 = *(float *)&a6 - a5;
  float32x2_t v22 = (float32x2_t)vdup_lane_s32(a7, 0);
  float32x2_t v23 = vsub_f32(v22, a17);
  float v24 = a20 - a18;
  float v25 = a20 - a19;
  if (*(float *)&a6 == 0.0)
  {
    v28.i64[0] = 0;
    float v29 = 0.0;
    float v30 = 0.0;
  }
  else
  {
    float32x2_t v26 = vmul_f32(v19, v23);
    float32x2_t v27 = vsub_f32(vadd_f32(v26, v26), vdiv_f32(vmul_f32(vmul_f32(v19, v19), vsub_f32(vadd_f32(v23, v23), v22)), v18));
    *(int8x8_t *)v28.f32 = vbic_s8((int8x8_t)v27, (int8x8_t)vcltz_f32(v27));
    float v29 = (float)((float)(v20 * v24) + (float)(v20 * v24))
        - (float)((float)((float)(v20 * v20) * (float)((float)(v24 + v24) - a20)) / *(float *)&a6);
    float v30 = 0.0;
    if (v29 < 0.0) {
      float v29 = 0.0;
    }
    if ((float)((float)((float)(v21 * v25) + (float)(v21 * v25))
               - (float)((float)((float)(v21 * v21) * (float)((float)(v25 + v25) - a20)) / *(float *)&a6)) >= 0.0)
      float v30 = (float)((float)(v21 * v25) + (float)(v21 * v25))
          - (float)((float)((float)(v21 * v21) * (float)((float)(v25 + v25) - a20)) / *(float *)&a6);
  }
  if (a20 != 1.0)
  {
    *(float32x2_t *)v28.f32 = vmla_n_f32(*(float32x2_t *)v28.f32, v19, 1.0 - a20);
    float v29 = v29 + (float)(v20 * (float)(1.0 - a20));
    float v30 = v30 + (float)(v21 * (float)(1.0 - a20));
  }
  if (*(float *)&a6 != 1.0)
  {
    *(float32x2_t *)v28.f32 = vmla_n_f32(*(float32x2_t *)v28.f32, v23, 1.0 - *(float *)&a6);
    float v29 = v29 + (float)(v24 * (float)(1.0 - *(float *)&a6));
    float v30 = v30 + (float)(v25 * (float)(1.0 - *(float *)&a6));
  }
  v23.f32[0] = (float)(*(float *)&a6 + a20) - (float)(*(float *)&a6 * a20);
  v28.i64[1] = __PAIR64__(LODWORD(v30), LODWORD(v29));
  float32x4_t result = vsubq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v23, 0), v28);
  *a1 = result;
  a1[1].i32[0] = v23.i32[0];
  return result;
}

float PDAhuePDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  float v18 = a6 - a2;
  float v19 = a6 - a3;
  float v20 = a6 - a4;
  float v21 = a6 - a5;
  float v22 = a14 - a10;
  float v23 = a14 - a11;
  float v24 = a14 - a12;
  float v25 = v18 * a14;
  float v26 = v18 - (float)(v18 * a14);
  float v27 = v19 - (float)(v19 * a14);
  float v28 = v20 - (float)(v20 * a14);
  float v29 = v21 - (float)(v21 * a14);
  if (a14 == 1.0) {
    float v26 = 0.0;
  }
  else {
    float v21 = v21 * a14;
  }
  if (a14 == 1.0)
  {
    float v27 = 0.0;
    float v28 = 0.0;
    float v30 = 0.0;
  }
  else
  {
    float v30 = v29;
  }
  if (a14 == 1.0)
  {
    float v31 = v19;
  }
  else
  {
    float v20 = v20 * a14;
    float v31 = v19 * a14;
  }
  if (a14 == 1.0) {
    float v25 = v18;
  }
  float v32 = v22 * a6;
  float v33 = v23 * a6;
  float v34 = (float)(v24 + v28) - (float)(v24 * a6);
  if (a6 == 1.0)
  {
    float v32 = a14 - a10;
    float v33 = a14 - a11;
    float v35 = a14 - a12;
  }
  else
  {
    float v35 = v24 * a6;
  }
  if (a6 == 1.0) {
    float v36 = v26;
  }
  else {
    float v36 = (float)(v22 + v26) - (float)(v22 * a6);
  }
  if (a6 == 1.0) {
    float v37 = v27;
  }
  else {
    float v37 = (float)(v23 + v27) - (float)(v23 * a6);
  }
  if (a6 == 1.0) {
    float v38 = v28;
  }
  else {
    float v38 = v34;
  }
  if (a6 == 1.0) {
    float v39 = v30;
  }
  else {
    float v39 = (float)((float)(a14 - a13) + v30) - (float)((float)(a14 - a13) * a6);
  }
  float v55 = v32;
  float v56 = v33;
  float v57 = v35;
  uint64_t v40 = v32 < v33;
  BOOL v41 = v32 >= v33;
  if (v35 >= *(&v55 + v41))
  {
    uint64_t v42 = v32 >= v33;
    if (v35 > *(&v55 + v40))
    {
      BOOL v41 = v32 < v33;
      uint64_t v40 = 2;
    }
  }
  else
  {
    uint64_t v42 = 2;
  }
  float v43 = *(&v55 + v40);
  float v44 = *(&v55 + v42);
  if (v43 <= v44)
  {
    *(&v55 + v40) = 0.0;
    *(&v55 + v41) = 0.0;
  }
  else
  {
    if (v25 >= v31) {
      float v45 = v31;
    }
    else {
      float v45 = v25;
    }
    if (v25 >= v31) {
      float v46 = v25;
    }
    else {
      float v46 = v31;
    }
    if (v20 > v46) {
      float v47 = v20;
    }
    else {
      float v47 = v46;
    }
    if (v20 >= v45) {
      float v46 = v47;
    }
    else {
      float v45 = v20;
    }
    float v48 = v46 - v45;
    *(&v55 + v40) = v48;
    *(&v55 + v41) = (float)(v48 / (float)(v43 - v44)) * (float)(*(&v55 + v41) - *(&v55 + v42));
  }
  *(&v55 + v42) = 0.0;
  float v49 = (float)((float)((float)(v31 - v56) * 0.59) + (float)((float)(v25 - v55) * 0.3))
      + (float)((float)(v20 - v57) * 0.11);
  float v50 = v55 + v49;
  float v51 = v56 + v49;
  float v52 = (float)(a6 + a14) - (float)(a6 * a14);
  float v53 = v38 + (float)(v57 + v49);
  *a1 = v52 - (float)(v36 + v50);
  a1[1] = v52 - (float)(v37 + v51);
  float result = v52 - (float)(v21 + v39);
  a1[2] = v52 - v53;
  a1[3] = result;
  a1[4] = v52;
  return result;
}

float PDAsaturationPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  float v18 = a6 - a2;
  float v19 = a6 - a3;
  float v20 = a6 - a4;
  float v21 = a6 - a5;
  float v22 = a14 - a10;
  float v23 = a14 - a11;
  float v24 = a14 - a12;
  if (a14 == 1.0)
  {
    float v25 = 0.0;
    float v26 = 0.0;
    float v27 = 0.0;
    float v28 = 0.0;
  }
  else
  {
    float v25 = v18 - (float)(v18 * a14);
    float v26 = v19 - (float)(v19 * a14);
    float v27 = v20 - (float)(v20 * a14);
    float v28 = v21 - (float)(v21 * a14);
    float v21 = v21 * a14;
    float v20 = v20 * a14;
    float v19 = v19 * a14;
    float v18 = v18 * a14;
  }
  float v29 = v22 * a6;
  float v30 = v23 * a6;
  float v31 = (float)((float)(a14 - a13) + v28) - (float)((float)(a14 - a13) * a6);
  if (a6 == 1.0)
  {
    float v29 = a14 - a10;
    float v30 = a14 - a11;
    float v32 = a14 - a12;
  }
  else
  {
    float v32 = v24 * a6;
  }
  if (a6 == 1.0) {
    float v33 = v25;
  }
  else {
    float v33 = (float)(v22 + v25) - (float)(v22 * a6);
  }
  if (a6 == 1.0) {
    float v34 = v26;
  }
  else {
    float v34 = (float)(v23 + v26) - (float)(v23 * a6);
  }
  if (a6 == 1.0) {
    float v35 = v27;
  }
  else {
    float v35 = (float)(v24 + v27) - (float)(v24 * a6);
  }
  if (a6 == 1.0) {
    float v31 = v28;
  }
  float v50 = v18;
  float v51 = v19;
  float v52 = v20;
  uint64_t v36 = v18 < v19;
  BOOL v37 = v18 >= v19;
  if (v20 >= *(&v50 + v37))
  {
    uint64_t v38 = v18 >= v19;
    if (v20 > *(&v50 + v36))
    {
      BOOL v37 = v18 < v19;
      uint64_t v36 = 2;
    }
  }
  else
  {
    uint64_t v38 = 2;
  }
  float v39 = *(&v50 + v36);
  float v40 = *(&v50 + v38);
  if (v39 <= v40)
  {
    *(&v50 + v36) = 0.0;
    *(&v50 + v37) = 0.0;
  }
  else
  {
    if (v29 >= v30) {
      float v41 = v30;
    }
    else {
      float v41 = v29;
    }
    if (v29 < v30) {
      float v29 = v30;
    }
    if (v32 > v29) {
      float v42 = v32;
    }
    else {
      float v42 = v29;
    }
    if (v32 >= v41)
    {
      float v32 = v41;
      float v29 = v42;
    }
    float v43 = v29 - v32;
    *(&v50 + v36) = v43;
    *(&v50 + v37) = (float)(v43 / (float)(v39 - v40)) * (float)(*(&v50 + v37) - *(&v50 + v38));
  }
  *(&v50 + v3++*(_DWORD *)(result + 8) = 0.0;
  float v44 = (float)((float)((float)(v19 - v51) * 0.59) + (float)((float)(v18 - v50) * 0.3))
      + (float)((float)(v20 - v52) * 0.11);
  float v45 = v50 + v44;
  float v46 = v51 + v44;
  float v47 = (float)(a6 + a14) - (float)(a6 * a14);
  float v48 = v35 + (float)(v52 + v44);
  *a1 = v47 - (float)(v33 + v45);
  a1[1] = v47 - (float)(v34 + v46);
  float result = v47 - (float)(v21 + v31);
  a1[2] = v47 - v48;
  a1[3] = result;
  a1[4] = v47;
  return result;
}

float PDAluminosityPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18 = a6 - a2;
  float v19 = a6 - a3;
  float v20 = a6 - a4;
  float v21 = a14 - a10;
  float v22 = a14 - a11;
  float v23 = a14 - a12;
  float v24 = a14 - a13;
  float v25 = v18 - (float)(v18 * a14);
  float v26 = v19 - (float)(v19 * a14);
  float v27 = v20 - (float)(v20 * a14);
  float v28 = (float)(a6 - a5) - (float)((float)(a6 - a5) * a14);
  if (a14 == 1.0)
  {
    float v25 = 0.0;
    float v26 = 0.0;
    float v27 = 0.0;
    float v28 = 0.0;
  }
  else
  {
    float v20 = v20 * a14;
    float v19 = v19 * a14;
    float v18 = v18 * a14;
  }
  float v29 = (float)(v21 + v25) - (float)(v21 * a6);
  float v30 = (float)(v22 + v26) - (float)(v22 * a6);
  float v31 = (float)(v23 + v27) - (float)(v23 * a6);
  float v32 = (float)(v24 + v28) - (float)(v24 * a6);
  if (a6 == 1.0)
  {
    float v29 = v25;
    float v33 = v26;
  }
  else
  {
    float v21 = v21 * a6;
    float v22 = v22 * a6;
    float v23 = v23 * a6;
    float v24 = v24 * a6;
    float v33 = v30;
  }
  if (a6 == 1.0) {
    float v34 = v27;
  }
  else {
    float v34 = v31;
  }
  if (a6 != 1.0) {
    float v28 = v32;
  }
  float v35 = (float)((float)((float)(v22 - v19) * 0.59) + (float)((float)(v21 - v18) * 0.3))
      + (float)((float)(v23 - v20) * 0.11);
  float v36 = (float)(a6 + a14) - (float)(a6 * a14);
  *a1 = v36 - (float)(v29 + (float)(v18 + v35));
  a1[1] = v36 - (float)(v33 + (float)(v19 + v35));
  float result = v36 - (float)(v34 + (float)(v20 + v35));
  a1[2] = result;
  a1[3] = v36 - (float)(v24 + v28);
  a1[4] = v36;
  return result;
}

void CMYKf_mark_constmask(uint64_t a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 136);
  float v18 = *(float **)(a1 + 96);
  if (v18) {
    float v19 = *v18;
  }
  else {
    float v19 = 1.0;
  }
  uint64_t v21 = *(int *)(a1 + 12);
  uint64_t v20 = *(int *)(a1 + 16);
  if (v16)
  {
    unint64_t v22 = (unint64_t)*(int *)(a1 + 32) >> 2;
    float v23 = (float *)(v16 + 4 * (v21 + v22 * v20));
    uint64_t v24 = 1;
    if (!v17) {
      return;
    }
  }
  else
  {
    float v23 = 0;
    unint64_t v22 = 0;
    uint64_t v24 = 0;
    if (!v17) {
      return;
    }
  }
  uint64_t v25 = *(unsigned int *)(a1 + 4);
  uint64_t v26 = v22 - (int)v25;
  if (v16) {
    uint64_t v27 = v22 - (int)v25;
  }
  else {
    uint64_t v27 = v22;
  }
  int v28 = *(_DWORD *)(a1 + 8);
  unint64_t v29 = (unint64_t)*(int *)(a1 + 28) >> 4;
  float32x4_t v30 = *(float32x4_t *)*(void *)(a1 + 88);
  uint64_t v31 = *(void *)(a1 + 40) + 16 * (v21 + v29 * v20);
  uint64_t v32 = *(int *)(a1 + 124);
  unint64_t v33 = v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v32;
  uint64_t v34 = v32 - (int)v25;
  unint64_t v35 = v29 - (int)v25;
  __int32 v363 = v30.i32[0];
  unint64_t v353 = v35;
  uint64_t v36 = v34;
  uint64_t v37 = v25;
  uint64_t v38 = v27;
  switch((int)a2)
  {
    case 0:
      if (v16)
      {
        uint64_t v39 = 4 * v24;
        do
        {
          int v40 = v25;
          do
          {
            int v41 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v41 == 255)
              {
                *(void *)uint64_t v31 = 0;
                *(void *)(v31 + ++*(_DWORD *)(result + 8) = 0;
                float v42 = 0.0;
              }
              else
              {
                float v43 = (float)(v41 ^ 0xFFu) * 0.0039216;
                *(float32x4_t *)uint64_t v31 = vmulq_n_f32(*(float32x4_t *)v31, v43);
                float v42 = v43 * *v23;
              }
              float *v23 = v42;
            }
            ++v33;
            v31 += 16;
            float v23 = (float *)((char *)v23 + v39);
            --v40;
          }
          while (v40);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          int v266 = v25;
          do
          {
            int v267 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v267 == 255)
              {
                *(void *)uint64_t v31 = 0;
                *(void *)(v31 + ++*(_DWORD *)(result + 8) = 0;
              }
              else
              {
                *(float32x4_t *)uint64_t v31 = vmulq_n_f32(*(float32x4_t *)v31, (float)(v267 ^ 0xFFu) * 0.0039216);
              }
            }
            ++v33;
            v31 += 16;
            --v266;
          }
          while (v266);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 1:
      unsigned int v44 = v33 & 3;
      if (!v16)
      {
        int v268 = -1 << (8 * v44);
        if ((v33 & 3) != 0) {
          char v269 = v33 & 0xFC;
        }
        else {
          char v269 = v33;
        }
        if ((v33 & 3) != 0)
        {
          uint64_t v270 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          int v268 = -1;
          uint64_t v270 = (unsigned int *)v33;
        }
        if ((v33 & 3) != 0) {
          unint64_t v271 = (float32x4_t *)(v31 - 16 * (v33 & 3));
        }
        else {
          unint64_t v271 = (float32x4_t *)v31;
        }
        if ((v33 & 3) != 0) {
          int v272 = v44 + v25;
        }
        else {
          int v272 = v25;
        }
        if ((((_BYTE)v272 + v269) & 3) != 0)
        {
          int v273 = 4 - (((_BYTE)v272 + v269) & 3);
          v44 += v273;
          unsigned int v274 = 0xFFFFFFFF >> (8 * v273);
          if (v272 >= 4) {
            unsigned int v275 = v274;
          }
          else {
            unsigned int v275 = 0;
          }
          if (v272 >= 4) {
            unsigned int v274 = -1;
          }
          v268 &= v274;
        }
        else
        {
          unsigned int v275 = 0;
        }
        uint64_t v331 = v34 - v44;
        int v332 = v272 >> 2;
        unint64_t v333 = v35 - v44;
        while (1)
        {
          unsigned int v334 = *v270 & v268;
          int v335 = v332;
          unsigned int v336 = v275;
          if (!v334) {
            goto LABEL_531;
          }
LABEL_513:
          if (v334 == -1) {
            break;
          }
          while (1)
          {
            if ((_BYTE)v334)
            {
              float32x4_t v337 = v30;
              if (v334 != 255) {
                float32x4_t v337 = vmlaq_n_f32(vmulq_n_f32(v30, (float)v334 * 0.0039216), *v271, 1.0 - (float)((float)v334 * 0.0039216));
              }
              *unint64_t v271 = v337;
            }
            if (BYTE1(v334))
            {
              float32x4_t v338 = v30;
              if (BYTE1(v334) != 255) {
                float32x4_t v338 = vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE1(v334) * 0.0039216), v271[1], 1.0 - (float)((float)BYTE1(v334) * 0.0039216));
              }
              v271[1] = v338;
            }
            if (BYTE2(v334))
            {
              float32x4_t v339 = v30;
              if (BYTE2(v334) != 255) {
                float32x4_t v339 = vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE2(v334) * 0.0039216), v271[2], 1.0 - (float)((float)BYTE2(v334) * 0.0039216));
              }
              v271[2] = v339;
            }
            unsigned int v340 = HIBYTE(v334);
            if (v340 == 255) {
              goto LABEL_528;
            }
            if (v340) {
              v271[3] = vmlaq_n_f32(vmulq_n_f32(v30, (float)v340 * 0.0039216), v271[3], 1.0 - (float)((float)v340 * 0.0039216));
            }
LABEL_531:
            while (1)
            {
              int v341 = v335;
              v271 += 4;
              --v335;
              ++v270;
              if (v341 < 2) {
                break;
              }
              unsigned int v334 = *v270;
              if (*v270) {
                goto LABEL_513;
              }
            }
            if (!v336) {
              break;
            }
            unsigned int v336 = 0;
            unsigned int v334 = *v270 & v275;
          }
          uint64_t v270 = (unsigned int *)((char *)v270 + v331);
          v271 += v333;
          if (!--v28) {
            return;
          }
        }
        *unint64_t v271 = v30;
        v271[1] = v30;
        v271[2] = v30;
LABEL_528:
        v271[3] = v30;
        goto LABEL_531;
      }
      int v45 = -1 << (8 * v44);
      float v46 = (float32x4_t *)(v31 - 16 * (v33 & 3));
      if ((v33 & 3) != 0) {
        char v47 = v33 & 0xFC;
      }
      else {
        char v47 = v33;
      }
      if ((v33 & 3) != 0)
      {
        float v48 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        int v45 = -1;
        float v48 = (unsigned int *)v33;
      }
      if ((v33 & 3) != 0) {
        float v49 = &v23[-(v33 & 3)];
      }
      else {
        float v49 = v23;
      }
      if ((v33 & 3) != 0)
      {
        int v50 = v44 + v25;
      }
      else
      {
        float v46 = (float32x4_t *)v31;
        int v50 = v25;
      }
      if ((((_BYTE)v50 + v47) & 3) != 0)
      {
        int v51 = 4 - (((_BYTE)v50 + v47) & 3);
        v44 += v51;
        unsigned int v52 = 0xFFFFFFFF >> (8 * v51);
        if (v50 >= 4) {
          unsigned int v53 = v52;
        }
        else {
          unsigned int v53 = 0;
        }
        if (v50 >= 4) {
          unsigned int v52 = -1;
        }
        v45 &= v52;
      }
      else
      {
        unsigned int v53 = 0;
      }
      uint64_t v296 = v34 - v44;
      unint64_t v297 = v35 - v44;
      int v298 = v50 >> 2;
      uint64_t v299 = v26 - v44;
      do
      {
        unsigned int v300 = *v48 & v45;
        int v301 = v298;
        unsigned int v302 = v53;
        if (!v300) {
          goto LABEL_482;
        }
LABEL_461:
        if (v300 == -1)
        {
          *float v46 = v30;
          *float v49 = v19;
          v46[1] = v30;
          v49[1] = v19;
          v46[2] = v30;
          v49[2] = v19;
LABEL_479:
          v46[3] = v30;
          v49[3] = v19;
          goto LABEL_482;
        }
        while (1)
        {
          if ((_BYTE)v300)
          {
            if (v300 == 255)
            {
              *float v46 = v30;
              float v303 = v19;
            }
            else
            {
              float v304 = (float)v300 * 0.0039216;
              *float v46 = vmlaq_n_f32(vmulq_n_f32(v30, v304), *v46, 1.0 - v304);
              float v303 = (float)(v19 * v304) + (float)(*v49 * (float)(1.0 - v304));
            }
            *float v49 = v303;
          }
          if (BYTE1(v300))
          {
            if (BYTE1(v300) == 255)
            {
              v46[1] = v30;
              float v305 = v19;
            }
            else
            {
              float v306 = (float)BYTE1(v300) * 0.0039216;
              v46[1] = vmlaq_n_f32(vmulq_n_f32(v30, v306), v46[1], 1.0 - v306);
              float v305 = (float)(v19 * v306) + (float)(v49[1] * (float)(1.0 - v306));
            }
            v49[1] = v305;
          }
          if (BYTE2(v300))
          {
            if (BYTE2(v300) == 255)
            {
              v46[2] = v30;
              float v307 = v19;
            }
            else
            {
              float v308 = (float)BYTE2(v300) * 0.0039216;
              v46[2] = vmlaq_n_f32(vmulq_n_f32(v30, v308), v46[2], 1.0 - v308);
              float v307 = (float)(v19 * v308) + (float)(v49[2] * (float)(1.0 - v308));
            }
            v49[2] = v307;
          }
          unsigned int v309 = HIBYTE(v300);
          if (v309 == 255) {
            goto LABEL_479;
          }
          if (v309)
          {
            float v310 = (float)v309 * 0.0039216;
            v46[3] = vmlaq_n_f32(vmulq_n_f32(v30, v310), v46[3], 1.0 - v310);
            v49[3] = (float)(v19 * v310) + (float)(v49[3] * (float)(1.0 - v310));
          }
LABEL_482:
          while (1)
          {
            int v311 = v301;
            v46 += 4;
            v49 += 4;
            --v301;
            ++v48;
            if (v311 < 2) {
              break;
            }
            unsigned int v300 = *v48;
            if (*v48) {
              goto LABEL_461;
            }
          }
          if (!v302) {
            break;
          }
          unsigned int v302 = 0;
          unsigned int v300 = *v48 & v53;
        }
        float v48 = (unsigned int *)((char *)v48 + v296);
        v46 += v297;
        v49 += v299;
        --v28;
      }
      while (v28);
      return;
    case 2:
      *(float *)&a3 = 1.0 - v19;
      unsigned int v54 = v33 & 3;
      if (v16)
      {
        int v55 = -1 << (8 * v54);
        float v56 = (float32x4_t *)(v31 - 16 * (v33 & 3));
        if ((v33 & 3) != 0) {
          char v57 = v33 & 0xFC;
        }
        else {
          char v57 = v33;
        }
        if ((v33 & 3) != 0)
        {
          uint64_t v58 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          int v55 = -1;
          uint64_t v58 = (unsigned int *)v33;
        }
        if ((v33 & 3) != 0) {
          unint64_t v59 = &v23[-(v33 & 3)];
        }
        else {
          unint64_t v59 = v23;
        }
        if ((v33 & 3) != 0)
        {
          int v60 = v54 + v25;
        }
        else
        {
          float v56 = (float32x4_t *)v31;
          int v60 = v25;
        }
        if ((((_BYTE)v60 + v57) & 3) != 0)
        {
          int v61 = 4 - (((_BYTE)v60 + v57) & 3);
          v54 += v61;
          unsigned int v62 = 0xFFFFFFFF >> (8 * v61);
          if (v60 >= 4) {
            unsigned int v63 = v62;
          }
          else {
            unsigned int v63 = 0;
          }
          if (v60 >= 4) {
            unsigned int v62 = -1;
          }
          v55 &= v62;
        }
        else
        {
          unsigned int v63 = 0;
        }
        uint64_t v312 = v34 - v54;
        unint64_t v313 = v35 - v54;
        int v314 = v60 >> 2;
        float32x4_t v315 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
        uint64_t v316 = v26 - v54;
        while (1)
        {
          unsigned int v317 = *v58 & v55;
          int v318 = v314;
          unsigned int v319 = v63;
          if (!v317) {
            goto LABEL_503;
          }
LABEL_492:
          if (v317 == -1) {
            break;
          }
          while (1)
          {
            if ((_BYTE)v317)
            {
              float v321 = (float)v317 * 0.0039216;
              float v322 = 1.0 - (float)(v19 * v321);
              float32x4_t *v56 = vmlaq_n_f32(vmulq_n_f32(v30, v321), *v56, v322);
              *unint64_t v59 = (float)(v19 * v321) + (float)(*v59 * v322);
            }
            if ((v317 & 0xFF00) != 0)
            {
              float v323 = (float)BYTE1(v317) * 0.0039216;
              float v324 = 1.0 - (float)(v19 * v323);
              v56[1] = vmlaq_n_f32(vmulq_n_f32(v30, v323), v56[1], v324);
              v59[1] = (float)(v19 * v323) + (float)(v59[1] * v324);
            }
            if ((v317 & 0xFF0000) != 0)
            {
              float v325 = (float)BYTE2(v317) * 0.0039216;
              float v326 = 1.0 - (float)(v19 * v325);
              _OWORD v56[2] = vmlaq_n_f32(vmulq_n_f32(v30, v325), v56[2], v326);
              v59[2] = (float)(v19 * v325) + (float)(v59[2] * v326);
            }
            unsigned int v327 = HIBYTE(v317);
            if (v327)
            {
              float v328 = (float)v327 * 0.0039216;
              float v329 = 1.0 - (float)(v19 * v328);
              v56[3] = vmlaq_n_f32(vmulq_n_f32(v30, v328), v56[3], v329);
              float v320 = (float)(v19 * v328) + (float)(v59[3] * v329);
              goto LABEL_502;
            }
LABEL_503:
            while (1)
            {
              int v330 = v318;
              v56 += 4;
              v59 += 4;
              --v318;
              ++v58;
              if (v330 < 2) {
                break;
              }
              unsigned int v317 = *v58;
              if (*v58) {
                goto LABEL_492;
              }
            }
            if (!v319) {
              break;
            }
            unsigned int v319 = 0;
            unsigned int v317 = *v58 & v63;
          }
          uint64_t v58 = (unsigned int *)((char *)v58 + v312);
          v56 += v313;
          v59 += v316;
          if (!--v28) {
            return;
          }
        }
        float32x4_t *v56 = vmlaq_f32(v30, v315, *v56);
        *unint64_t v59 = v19 + (float)(*v59 * *(float *)&a3);
        v56[1] = vmlaq_f32(v30, v315, v56[1]);
        v59[1] = v19 + (float)(v59[1] * *(float *)&a3);
        _OWORD v56[2] = vmlaq_f32(v30, v315, v56[2]);
        v59[2] = v19 + (float)(v59[2] * *(float *)&a3);
        v56[3] = vmlaq_f32(v30, v315, v56[3]);
        float v320 = v19 + (float)(v59[3] * *(float *)&a3);
LABEL_502:
        v59[3] = v320;
        goto LABEL_503;
      }
      int v276 = -1 << (8 * v54);
      if ((v33 & 3) != 0) {
        char v277 = v33 & 0xFC;
      }
      else {
        char v277 = v33;
      }
      if ((v33 & 3) != 0)
      {
        uint64_t v278 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        int v276 = -1;
        uint64_t v278 = (unsigned int *)v33;
      }
      if ((v33 & 3) != 0) {
        int v279 = (float32x4_t *)(v31 - 16 * (v33 & 3));
      }
      else {
        int v279 = (float32x4_t *)v31;
      }
      if ((v33 & 3) != 0) {
        int v280 = v54 + v25;
      }
      else {
        int v280 = v25;
      }
      if ((((_BYTE)v280 + v277) & 3) != 0)
      {
        int v281 = 4 - (((_BYTE)v280 + v277) & 3);
        v54 += v281;
        unsigned int v282 = 0xFFFFFFFF >> (8 * v281);
        if (v280 >= 4) {
          unsigned int v283 = v282;
        }
        else {
          unsigned int v283 = 0;
        }
        if (v280 >= 4) {
          unsigned int v282 = -1;
        }
        v276 &= v282;
      }
      else
      {
        unsigned int v283 = 0;
      }
      uint64_t v342 = v34 - v54;
      int v343 = v280 >> 2;
      float32x4_t v344 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
      unint64_t v345 = v35 - v54;
      do
      {
        unsigned int v346 = *v278 & v276;
        int v347 = v343;
        unsigned int v348 = v283;
        if (!v346) {
          goto LABEL_551;
        }
LABEL_541:
        if (v346 == -1)
        {
          float32x4_t v349 = vmlaq_f32(v30, v344, v279[1]);
          *int v279 = vmlaq_f32(v30, v344, *v279);
          v279[1] = v349;
          float32x4_t v350 = vmlaq_f32(v30, v344, v279[3]);
          v279[2] = vmlaq_f32(v30, v344, v279[2]);
          v279[3] = v350;
          goto LABEL_551;
        }
        while (1)
        {
          if ((_BYTE)v346) {
            *int v279 = vmlaq_n_f32(vmulq_n_f32(v30, (float)v346 * 0.0039216), *v279, 1.0 - (float)(v19 * (float)((float)v346 * 0.0039216)));
          }
          if ((v346 & 0xFF00) != 0) {
            v279[1] = vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE1(v346) * 0.0039216), v279[1], 1.0 - (float)(v19 * (float)((float)BYTE1(v346) * 0.0039216)));
          }
          if ((v346 & 0xFF0000) != 0) {
            v279[2] = vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE2(v346) * 0.0039216), v279[2], 1.0 - (float)(v19 * (float)((float)BYTE2(v346) * 0.0039216)));
          }
          unsigned int v351 = HIBYTE(v346);
          if (v351) {
            v279[3] = vmlaq_n_f32(vmulq_n_f32(v30, (float)v351 * 0.0039216), v279[3], 1.0 - (float)(v19 * (float)((float)v351 * 0.0039216)));
          }
LABEL_551:
          while (1)
          {
            int v352 = v347;
            v279 += 4;
            --v347;
            ++v278;
            if (v352 < 2) {
              break;
            }
            unsigned int v346 = *v278;
            if (*v278) {
              goto LABEL_541;
            }
          }
          if (!v348) {
            break;
          }
          unsigned int v348 = 0;
          unsigned int v346 = *v278 & v283;
        }
        uint64_t v278 = (unsigned int *)((char *)v278 + v342);
        v279 += v345;
        --v28;
      }
      while (v28);
      return;
    case 3:
      uint64_t v64 = 4 * v24;
      do
      {
        int v65 = v25;
        do
        {
          unsigned int v66 = *(unsigned __int8 *)v33;
          if (*(unsigned char *)v33)
          {
            if (v66 == 255)
            {
              float v67 = v19 * *v23;
              *(float32x4_t *)uint64_t v31 = vmulq_n_f32(v30, *v23);
            }
            else
            {
              float v68 = (float)v66 * 0.0039216;
              float v69 = *v23;
              float v70 = v68 * *v23;
              float v71 = 1.0 - v68;
              *(float32x4_t *)uint64_t v31 = vmlaq_n_f32(vmulq_n_f32(v30, v70), *(float32x4_t *)v31, v71);
              float v67 = (float)(v19 * v70) + (float)(v69 * v71);
            }
            float *v23 = v67;
          }
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v64);
          --v65;
        }
        while (v65);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 4:
      uint64_t v72 = 4 * v24;
      do
      {
        int v73 = v25;
        do
        {
          unsigned int v74 = *(unsigned __int8 *)v33;
          if (*(unsigned char *)v33)
          {
            if (v74 == 255)
            {
              float v75 = 1.0 - *v23;
              float v76 = v19 * v75;
              *(float32x4_t *)uint64_t v31 = vmulq_n_f32(v30, v75);
            }
            else
            {
              float v77 = (float)v74 * 0.0039216;
              float v78 = *v23;
              float v79 = v77 * (float)(1.0 - *v23);
              float v80 = 1.0 - v77;
              *(float32x4_t *)uint64_t v31 = vmlaq_n_f32(vmulq_n_f32(v30, v79), *(float32x4_t *)v31, v80);
              float v76 = (float)(v19 * v79) + (float)(v78 * v80);
            }
            float *v23 = v76;
          }
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v72);
          --v73;
        }
        while (v73);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 5:
      uint64_t v81 = 4 * v24;
      do
      {
        int v82 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v83 = *v23;
            float v84 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            float v85 = 1.0 - (float)(v19 * v84);
            *(float32x4_t *)uint64_t v31 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v31, v85), vmulq_n_f32(v30, v84), *v23);
            float *v23 = (float)(v85 * v83) + (float)((float)(v19 * v84) * v83);
          }
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v81);
          --v82;
        }
        while (v82);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 6:
      uint64_t v86 = 4 * v24;
      while (1)
      {
        int v87 = v25;
        do
        {
          unsigned int v88 = *(unsigned __int8 *)v33;
          if (!*(unsigned char *)v33) {
            goto LABEL_98;
          }
          float v89 = *v23;
          float v90 = 1.0 - *v23;
          if (v90 >= 1.0)
          {
            float v93 = (float)v88 * 0.0039216;
            float v92 = v19 * v93;
            *(float32x4_t *)uint64_t v31 = vmulq_n_f32(v30, v93);
          }
          else
          {
            if (v90 <= 0.0) {
              goto LABEL_98;
            }
            float v91 = (float)v88 * 0.0039216;
            *(float32x4_t *)uint64_t v31 = vmlaq_n_f32(*(float32x4_t *)v31, vmulq_n_f32(v30, v91), v90);
            float v92 = v89 + (float)((float)(v19 * v91) * v90);
          }
          float *v23 = v92;
LABEL_98:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v86);
          --v87;
        }
        while (v87);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28) {
          return;
        }
      }
    case 7:
      if (v16)
      {
        uint64_t v94 = 4 * v24;
        do
        {
          int v95 = v25;
          do
          {
            unsigned int v96 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v96 == 255)
              {
                float v97 = v19 * *(float *)v31;
                float v98 = v19;
              }
              else
              {
                float v98 = (float)(v19 * (float)((float)v96 * 0.0039216)) + (float)(1.0 - (float)((float)v96 * 0.0039216));
                float v97 = v98 * *(float *)v31;
              }
              *(float *)uint64_t v31 = v97;
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v98);
              *(float *)(v31 + 12) = v98 * *(float *)(v31 + 12);
              float *v23 = v98 * *v23;
            }
            ++v33;
            v31 += 16;
            float v23 = (float *)((char *)v23 + v94);
            --v95;
          }
          while (v95);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          int v284 = v25;
          do
          {
            unsigned int v285 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v285 == 255)
              {
                float v286 = v19 * *(float *)v31;
                float v287 = v19;
              }
              else
              {
                float v287 = (float)(v19 * (float)((float)v285 * 0.0039216)) + (float)(1.0 - (float)((float)v285 * 0.0039216));
                float v286 = v287 * *(float *)v31;
              }
              *(float *)uint64_t v31 = v286;
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v287);
              *(float *)(v31 + 12) = v287 * *(float *)(v31 + 12);
            }
            ++v33;
            v31 += 16;
            --v284;
          }
          while (v284);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 8:
      float v99 = 1.0 - v19;
      if (v16)
      {
        uint64_t v100 = 4 * v24;
        do
        {
          int v101 = v25;
          do
          {
            unsigned int v102 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v102 == 255)
              {
                float v103 = v99 * *(float *)v31;
                float v104 = 1.0 - v19;
              }
              else
              {
                float v104 = (float)(v19 * (float)((float)v102 * -0.0039216)) + 1.0;
                float v103 = v104 * *(float *)v31;
              }
              *(float *)uint64_t v31 = v103;
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v104);
              *(float *)(v31 + 12) = v104 * *(float *)(v31 + 12);
              float *v23 = v104 * *v23;
            }
            ++v33;
            v31 += 16;
            float v23 = (float *)((char *)v23 + v100);
            --v101;
          }
          while (v101);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          int v288 = v25;
          do
          {
            unsigned int v289 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v289 == 255)
              {
                float v290 = v99 * *(float *)v31;
                float v291 = 1.0 - v19;
              }
              else
              {
                float v291 = (float)(v19 * (float)((float)v289 * -0.0039216)) + 1.0;
                float v290 = v291 * *(float *)v31;
              }
              *(float *)uint64_t v31 = v290;
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v291);
              *(float *)(v31 + 12) = v291 * *(float *)(v31 + 12);
            }
            ++v33;
            v31 += 16;
            --v288;
          }
          while (v288);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 9:
      uint64_t v105 = 4 * v24;
      do
      {
        int v106 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v107 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            float v108 = *v23;
            float v109 = 1.0 - *v23;
            float v110 = (float)(1.0 - v107) + (float)(v19 * v107);
            *(float32x4_t *)uint64_t v31 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v31, v110), vmulq_n_f32(v30, v107), v109);
            float *v23 = (float)(v110 * v108) + (float)((float)(v19 * v107) * v109);
          }
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v105);
          --v106;
        }
        while (v106);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 10:
      uint64_t v111 = 4 * v24;
      do
      {
        int v112 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v113 = *v23;
            float v114 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            float v115 = 1.0 - *v23;
            float v116 = 1.0 - (float)(v19 * v114);
            *(float32x4_t *)uint64_t v31 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v31, v116), vmulq_n_f32(v30, v114), v115);
            float *v23 = (float)(v116 * v113) + (float)((float)(v19 * v114) * v115);
          }
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v111);
          --v112;
        }
        while (v112);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 11:
      if (v16)
      {
        uint64_t v117 = 4 * v24;
        do
        {
          int v118 = v25;
          do
          {
            if (*(unsigned char *)v33)
            {
              float v119 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              float v120 = v30.f32[0] * v119;
              float v121 = v30.f32[1] * v119;
              float v122 = v30.f32[2] * v119;
              float v123 = v30.f32[3] * v119;
              float v124 = v19 * v119;
              float v125 = (float)(v124 - v120) + (float)(*v23 - *(float *)v31);
              float v126 = v124 + *v23;
              if (v126 > 1.0) {
                float v126 = 1.0;
              }
              float v127 = (float)(v124 - v121) + (float)(*v23 - *(float *)(v31 + 4));
              *(float *)uint64_t v31 = v126 - v125;
              float v128 = *(float *)(v31 + 12);
              float v129 = (float)(v124 - v122) + (float)(*v23 - *(float *)(v31 + 8));
              *(float *)(v31 + 4) = v126 - v127;
              float v130 = *v23 - v128;
              *(float *)(v31 + ++*(_DWORD *)(result + 8) = v126 - v129;
              float *v23 = v126;
              *(float *)(v31 + 12) = v126 - (float)((float)(v124 - v123) + v130);
            }
            ++v33;
            v31 += 16;
            float v23 = (float *)((char *)v23 + v117);
            --v118;
          }
          while (v118);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        __asm { FMOV            V1.4S, #1.0 }
        do
        {
          int v293 = v25;
          do
          {
            if (*(unsigned char *)v33)
            {
              float v294 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              a6.f32[0] = v19 * v294;
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
              *(float32x4_t *)uint64_t v31 = vsubq_f32(_Q1, vaddq_f32(vsubq_f32(a6, vmulq_n_f32(v30, v294)), vsubq_f32(_Q1, *(float32x4_t *)v31)));
            }
            ++v33;
            v31 += 16;
            --v293;
          }
          while (v293);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 12:
      if (v16)
      {
        uint64_t v131 = 4 * v24;
        do
        {
          int v132 = v25;
          do
          {
            if (*(unsigned char *)v33)
            {
              float v133 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              float v134 = (float)(v19 * v133) + *v23;
              if (v134 > 1.0) {
                float v134 = 1.0;
              }
              v135.i64[0] = *(void *)v31;
              float *v23 = v134;
              v135.i64[1] = *(void *)(v31 + 8);
              *(float32x4_t *)uint64_t v31 = vaddq_f32(vmulq_n_f32(v30, v133), v135);
            }
            ++v33;
            v31 += 16;
            float v23 = (float *)((char *)v23 + v131);
            --v132;
          }
          while (v132);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          int v295 = v25;
          do
          {
            if (*(unsigned char *)v33) {
              *(float32x4_t *)uint64_t v31 = vaddq_f32(vmulq_n_f32(v30, (float)*(unsigned __int8 *)v33 * 0.0039216), *(float32x4_t *)v31);
            }
            ++v33;
            v31 += 16;
            --v295;
          }
          while (v295);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 13:
      float32x2_t v136 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      float32x2_t v137 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL).u64[0];
      uint64_t v138 = 4 * v24;
      a6.i32[0] = 1.0;
      while (1)
      {
        int v139 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v140 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a7.f32[0] = v19 * v140;
            if ((float)(v19 * v140) > 0.0)
            {
              float32x2_t v141 = vmul_n_f32(v136, v140);
              *(float32x2_t *)a10.f32 = vmul_n_f32(v137, v140);
              if (v16)
              {
                a9.f32[0] = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_167;
                }
              }
              else
              {
                a9.i32[0] = 1.0;
              }
              float32x4_t v142 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), *(float32x4_t *)v31);
              float32x4_t v143 = (float32x4_t)vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL);
              *(float32x2_t *)&v143.i32[1] = v141;
              float32x4_t v144 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), v143);
              float32x4_t v145 = vmulq_f32(v142, v144);
              a10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a7, a6)), 0), (int8x16_t)vmlaq_n_f32(v145, v142, 1.0 - a7.f32[0]), (int8x16_t)v145);
              a7.f32[0] = (float)(a9.f32[0] + a7.f32[0]) - (float)(a9.f32[0] * a7.f32[0]);
              a9 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a9, a6)), 0), (int8x16_t)vmlaq_n_f32(a10, v144, 1.0 - a9.f32[0]), (int8x16_t)a10));
              float32x2_t v141 = (float32x2_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 4uLL).u64[0];
              if (v16)
              {
                a10 = (float32x4_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 0xCuLL);
LABEL_167:
                *(_DWORD *)uint64_t v31 = a10.i32[1];
                *(float32x2_t *)(v31 + 4) = v141;
                *(_DWORD *)(v31 + 12) = a10.i32[0];
                float *v23 = a7.f32[0];
                goto LABEL_169;
              }
              *(_DWORD *)uint64_t v31 = a9.i32[0];
              *(float32x2_t *)(v31 + 4) = v141;
              *(_DWORD *)(v31 + 12) = a9.i32[3];
            }
          }
LABEL_169:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v138);
          --v139;
        }
        while (v139);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28) {
          return;
        }
      }
    case 14:
      uint64_t v146 = 4 * v24;
      __asm { FMOV            V1.4S, #1.0 }
      while (1)
      {
        int v152 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v153 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v153;
            if ((float)(v19 * v153) > 0.0)
            {
              float32x4_t v154 = vmulq_n_f32(v30, v153);
              if (v16)
              {
                a7.f32[0] = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_181;
                }
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              float32x4_t v155 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), *(float32x4_t *)v31);
              float32x4_t v156 = vmlaq_f32(v155, vsubq_f32(_Q1, v155), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v154));
              a5.f32[0] = (float)(a5.f32[0] + a7.f32[0]) - (float)(a7.f32[0] * a5.f32[0]);
              float32x4_t v154 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v156);
              if (v16)
              {
LABEL_181:
                *(float32x4_t *)uint64_t v31 = v154;
                float *v23 = a5.f32[0];
                goto LABEL_183;
              }
              *(float32x4_t *)uint64_t v31 = v154;
            }
          }
LABEL_183:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v146);
          --v152;
        }
        while (v152);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28) {
          return;
        }
      }
    case 15:
      float v157 = v30.f32[3];
      float32x2_t v354 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      uint64_t v158 = 4 * v24;
      while (1)
      {
        int v159 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v160 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a10.f32[0] = v19 * v160;
            if ((float)(v19 * v160) > 0.0)
            {
              a8.f32[0] = v30.f32[0] * v160;
              double v161 = COERCE_DOUBLE(vmul_n_f32(v354, v160));
              float v162 = v157 * v160;
              if (v16)
              {
                float v163 = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_196;
                }
              }
              else
              {
                float v163 = 1.0;
              }
              PDAoverlayPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v163, *(double *)a8.i64, v161, *(double *)a10.i64, a8.f32[0], *(float *)&v161, *((float *)&v161 + 1), v162, a10.f32[0]);
              a8.i32[0] = v364.i32[0];
              double v161 = *(double *)((char *)v364.i64 + 4);
              float v162 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_196:
                *(_DWORD *)uint64_t v31 = a8.i32[0];
                *(double *)(v31 + 4) = v161;
                *(float *)(v31 + 12) = v162;
                float *v23 = a10.f32[0];
                goto LABEL_198;
              }
              *(_DWORD *)uint64_t v31 = v364.i32[0];
              *(double *)(v31 + 4) = v161;
              *(float *)(v31 + 12) = v162;
              v30.i32[0] = v363;
            }
          }
LABEL_198:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v158);
          --v159;
        }
        while (v159);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28) {
          return;
        }
      }
    case 16:
      float32x2_t v164 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      v30.i32[1] = vextq_s8(*(int8x16_t *)&v30, *(int8x16_t *)&v30, 8uLL).i32[1];
      uint64_t v165 = 4 * v24;
      a5.i32[0] = 1.0;
      while (1)
      {
        int v166 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v167 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a6.f32[0] = v19 * v167;
            if ((float)(v19 * v167) > 0.0)
            {
              float32x2_t v168 = vmul_n_f32(v164, v167);
              *(float32x2_t *)v169.f32 = vmul_n_f32(*(float32x2_t *)v30.f32, v167);
              if (v16)
              {
                a9.f32[0] = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_211;
                }
              }
              else
              {
                a9.i32[0] = 1.0;
              }
              v169.i32[3] = v169.i32[1];
              v169.i32[1] = v168.i32[0];
              float32x4_t v170 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), *(float32x4_t *)v31);
              v169.i32[2] = v168.i32[1];
              float32x4_t v171 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), v169);
              float32x4_t v172 = vmulq_n_f32(v170, a6.f32[0]);
              float32x4_t v173 = vmulq_n_f32(v171, a9.f32[0]);
              float32x4_t v174 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v172, v173), (int8x16_t)v173, (int8x16_t)v172);
              float32x4_t v175 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a5)), 0), (int8x16_t)vmlaq_n_f32(v174, v170, 1.0 - a6.f32[0]), (int8x16_t)v174);
              a6.f32[0] = (float)(a9.f32[0] + a6.f32[0]) - (float)(a9.f32[0] * a6.f32[0]);
              float32x4_t v169 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a9, a5)), 0), (int8x16_t)vmlaq_n_f32(v175, v171, 1.0 - a9.f32[0]), (int8x16_t)v175));
              float32x2_t v168 = (float32x2_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL).u64[0];
              if (v16)
              {
                a9 = (float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL);
                v169.i32[1] = a9.i32[1];
LABEL_211:
                *(_DWORD *)uint64_t v31 = v169.i32[0];
                *(float32x2_t *)(v31 + 4) = v168;
                *(_DWORD *)(v31 + 12) = v169.i32[1];
                float *v23 = a6.f32[0];
                goto LABEL_213;
              }
              *(_DWORD *)uint64_t v31 = v169.i32[0];
              *(float32x2_t *)(v31 + 4) = v168;
              *(_DWORD *)(v31 + 12) = v169.i32[3];
            }
          }
LABEL_213:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v165);
          --v166;
        }
        while (v166);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28) {
          return;
        }
      }
    case 17:
      float32x2_t v176 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      float32x2_t v177 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL).u64[0];
      uint64_t v178 = 4 * v24;
      a6.i32[0] = 1.0;
      while (1)
      {
        int v179 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v180 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a7.f32[0] = v19 * v180;
            if ((float)(v19 * v180) > 0.0)
            {
              float32x2_t v181 = vmul_n_f32(v176, v180);
              *(float32x2_t *)a10.f32 = vmul_n_f32(v177, v180);
              if (v16)
              {
                a9.f32[0] = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_226;
                }
              }
              else
              {
                a9.i32[0] = 1.0;
              }
              float32x4_t v182 = (float32x4_t)vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL);
              v182.i32[1] = v181.i32[0];
              float32x4_t v183 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), *(float32x4_t *)v31);
              v182.i32[2] = v181.i32[1];
              float32x4_t v184 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), v182);
              float32x4_t v185 = vmulq_n_f32(v183, a7.f32[0]);
              float32x4_t v186 = vmulq_n_f32(v184, a9.f32[0]);
              float32x4_t v187 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v186, v185), (int8x16_t)v186, (int8x16_t)v185);
              a10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a7, a6)), 0), (int8x16_t)vmlaq_n_f32(v187, v183, 1.0 - a7.f32[0]), (int8x16_t)v187);
              a7.f32[0] = (float)(a9.f32[0] + a7.f32[0]) - (float)(a9.f32[0] * a7.f32[0]);
              a9 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a9, a6)), 0), (int8x16_t)vmlaq_n_f32(a10, v184, 1.0 - a9.f32[0]), (int8x16_t)a10));
              float32x2_t v181 = (float32x2_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 4uLL).u64[0];
              if (v16)
              {
                a10 = (float32x4_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 0xCuLL);
LABEL_226:
                *(_DWORD *)uint64_t v31 = a10.i32[1];
                *(float32x2_t *)(v31 + 4) = v181;
                *(_DWORD *)(v31 + 12) = a10.i32[0];
                float *v23 = a7.f32[0];
                goto LABEL_228;
              }
              *(_DWORD *)uint64_t v31 = a9.i32[0];
              *(float32x2_t *)(v31 + 4) = v181;
              *(_DWORD *)(v31 + 12) = a9.i32[3];
            }
          }
LABEL_228:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v178);
          --v179;
        }
        while (v179);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28) {
          return;
        }
      }
    case 18:
      float v188 = v30.f32[3];
      float32x2_t v355 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      uint64_t v189 = 4 * v24;
      while (1)
      {
        int v190 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v191 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a10.f32[0] = v19 * v191;
            if ((float)(v19 * v191) > 0.0)
            {
              a8.f32[0] = v30.f32[0] * v191;
              double v192 = COERCE_DOUBLE(vmul_n_f32(v355, v191));
              float v193 = v188 * v191;
              if (v16)
              {
                float v194 = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_241;
                }
              }
              else
              {
                float v194 = 1.0;
              }
              PDAcolordodgePDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v194, *(double *)a8.i64, v192, *(double *)a10.i64, a8.f32[0], *(float *)&v192, *((float *)&v192 + 1), v193, a10.f32[0]);
              a8.i32[0] = v364.i32[0];
              double v192 = *(double *)((char *)v364.i64 + 4);
              float v193 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_241:
                *(_DWORD *)uint64_t v31 = a8.i32[0];
                *(double *)(v31 + 4) = v192;
                *(float *)(v31 + 12) = v193;
                float *v23 = a10.f32[0];
                goto LABEL_243;
              }
              *(_DWORD *)uint64_t v31 = v364.i32[0];
              *(double *)(v31 + 4) = v192;
              *(float *)(v31 + 12) = v193;
              v30.i32[0] = v363;
            }
          }
LABEL_243:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v189);
          --v190;
        }
        while (v190);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28) {
          return;
        }
      }
    case 19:
      float v195 = v30.f32[3];
      float32x2_t v356 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      uint64_t v196 = 4 * v24;
      while (1)
      {
        int v197 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v198 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a10.f32[0] = v19 * v198;
            if ((float)(v19 * v198) > 0.0)
            {
              a8.f32[0] = v30.f32[0] * v198;
              double v199 = COERCE_DOUBLE(vmul_n_f32(v356, v198));
              float v200 = v195 * v198;
              if (v16)
              {
                float v201 = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_256;
                }
              }
              else
              {
                float v201 = 1.0;
              }
              PDAcolorburnPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v201, *(double *)a8.i64, v199, *(double *)a10.i64, a8.f32[0], *(float *)&v199, *((float *)&v199 + 1), v200, a10.f32[0]);
              a8.i32[0] = v364.i32[0];
              double v199 = *(double *)((char *)v364.i64 + 4);
              float v200 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_256:
                *(_DWORD *)uint64_t v31 = a8.i32[0];
                *(double *)(v31 + 4) = v199;
                *(float *)(v31 + 12) = v200;
                float *v23 = a10.f32[0];
                goto LABEL_258;
              }
              *(_DWORD *)uint64_t v31 = v364.i32[0];
              *(double *)(v31 + 4) = v199;
              *(float *)(v31 + 12) = v200;
              v30.i32[0] = v363;
            }
          }
LABEL_258:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v196);
          --v197;
        }
        while (v197);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28) {
          return;
        }
      }
    case 20:
      float v202 = v30.f32[3];
      float32x2_t v203 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      float32x2_t v357 = v203;
      uint64_t v204 = 4 * v24;
      while (1)
      {
        int v205 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v206 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a10.f32[0] = v19 * v206;
            if ((float)(v19 * v206) > 0.0)
            {
              a8.f32[0] = v30.f32[0] * v206;
              *(float32x2_t *)&double v207 = vmul_n_f32(v357, v206);
              float v208 = v202 * v206;
              if (v16)
              {
                a7.f32[0] = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_271;
                }
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              v203.i32[0] = *(_DWORD *)v31;
              float32x2_t v203 = (float32x2_t)PDAsoftlightPDA(&v364, v203, *(float32_t *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), *(double *)a7.i64, *(int32x2_t *)a8.f32, v207, *(double *)a10.i64, a2, v26, v34, v25, v27, a15, a16, (float32x2_t)__PAIR64__(LODWORD(v207), a8.u32[0]), *((float *)&v207 + 1), v208,
                                    a10.f32[0]).u64[0];
              a8.i32[0] = v364.i32[0];
              double v207 = *(double *)((char *)v364.i64 + 4);
              float v208 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_271:
                *(_DWORD *)uint64_t v31 = a8.i32[0];
                *(double *)(v31 + 4) = v207;
                *(float *)(v31 + 12) = v208;
                float *v23 = a10.f32[0];
                goto LABEL_273;
              }
              *(_DWORD *)uint64_t v31 = v364.i32[0];
              *(double *)(v31 + 4) = v207;
              *(float *)(v31 + 12) = v208;
              v30.i32[0] = v363;
            }
          }
LABEL_273:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v204);
          --v205;
        }
        while (v205);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        uint64_t v25 = v37;
        if (!v28) {
          return;
        }
      }
    case 21:
      float v209 = v30.f32[3];
      float32x2_t v358 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      uint64_t v210 = 4 * v24;
      while (1)
      {
        int v211 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v212 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a10.f32[0] = v19 * v212;
            if ((float)(v19 * v212) > 0.0)
            {
              a8.f32[0] = v30.f32[0] * v212;
              double v213 = COERCE_DOUBLE(vmul_n_f32(v358, v212));
              float v214 = v209 * v212;
              if (v16)
              {
                float v215 = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_286;
                }
              }
              else
              {
                float v215 = 1.0;
              }
              PDAhardlightPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v215, *(double *)a8.i64, v213, *(double *)a10.i64, a8.f32[0], *(float *)&v213, *((float *)&v213 + 1), v214, a10.f32[0]);
              a8.i32[0] = v364.i32[0];
              double v213 = *(double *)((char *)v364.i64 + 4);
              float v214 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_286:
                *(_DWORD *)uint64_t v31 = a8.i32[0];
                *(double *)(v31 + 4) = v213;
                *(float *)(v31 + 12) = v214;
                float *v23 = a10.f32[0];
                goto LABEL_288;
              }
              *(_DWORD *)uint64_t v31 = v364.i32[0];
              *(double *)(v31 + 4) = v213;
              *(float *)(v31 + 12) = v214;
              v30.i32[0] = v363;
            }
          }
LABEL_288:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v210);
          --v211;
        }
        while (v211);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28) {
          return;
        }
      }
    case 22:
      float32x2_t v216 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      v30.i32[1] = vextq_s8(*(int8x16_t *)&v30, *(int8x16_t *)&v30, 8uLL).i32[1];
      uint64_t v217 = 4 * v24;
      while (1)
      {
        int v218 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v219 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a8.f32[0] = v19 * v219;
            if ((float)(v19 * v219) > 0.0)
            {
              float32x2_t v220 = vmul_n_f32(v216, v219);
              *(float32x2_t *)v221.f32 = vmul_n_f32(*(float32x2_t *)v30.f32, v219);
              if (v16)
              {
                a9.f32[0] = *v23;
                if (*v23 <= 0.0)
                {
                  v222.i32[0] = a8.i32[0];
LABEL_301:
                  *(_DWORD *)uint64_t v31 = v221.i32[0];
                  *(float32x2_t *)(v31 + 4) = v220;
                  *(_DWORD *)(v31 + 12) = v221.i32[1];
                  float *v23 = v222.f32[0];
                  goto LABEL_303;
                }
              }
              else
              {
                a9.i32[0] = 1.0;
              }
              float32x4_t v222 = *(float32x4_t *)v31;
              float32x4_t v223 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), *(float32x4_t *)v31);
              v221.i32[3] = v221.i32[1];
              v221.i32[1] = v220.i32[0];
              v222.f32[0] = (float)(a9.f32[0] + a8.f32[0]) - (float)(a9.f32[0] * a8.f32[0]);
              v221.i32[2] = v220.i32[1];
              float32x4_t v224 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0), v221);
              float32x4_t v225 = vaddq_f32(v223, v224);
              float32x4_t v226 = vmulq_n_f32(v223, a8.f32[0]);
              float32x4_t v227 = vmulq_n_f32(v224, a9.f32[0]);
              float32x4_t v228 = vsubq_f32(v225, v226);
              a8 = vsubq_f32(v226, v227);
              a9 = vnegq_f32(a8);
              float32x4_t v221 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 0), vaddq_f32(vsubq_f32(v228, v227), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(a8), (int8x16_t)a9, (int8x16_t)a8)));
              float32x2_t v220 = (float32x2_t)vextq_s8((int8x16_t)v221, (int8x16_t)v221, 4uLL).u64[0];
              if (v16)
              {
                a8 = (float32x4_t)vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL);
                v221.i32[1] = a8.i32[1];
                goto LABEL_301;
              }
              *(_DWORD *)uint64_t v31 = v221.i32[0];
              *(float32x2_t *)(v31 + 4) = v220;
              *(_DWORD *)(v31 + 12) = v221.i32[3];
            }
          }
LABEL_303:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v217);
          --v218;
        }
        while (v218);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28) {
          return;
        }
      }
    case 23:
      float32x2_t v229 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      v30.i32[1] = vextq_s8(*(int8x16_t *)&v30, *(int8x16_t *)&v30, 8uLL).i32[1];
      uint64_t v230 = 4 * v24;
      v231.i64[0] = 0xC0000000C0000000;
      v231.i64[1] = 0xC0000000C0000000;
      while (1)
      {
        int v232 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v233 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a9.f32[0] = v19 * v233;
            if ((float)(v19 * v233) > 0.0)
            {
              float32x2_t v234 = vmul_n_f32(v229, v233);
              *(float32x2_t *)v235.f32 = vmul_n_f32(*(float32x2_t *)v30.f32, v233);
              if (v16)
              {
                a10.f32[0] = *v23;
                if (*v23 <= 0.0)
                {
                  a8.i32[0] = a9.i32[0];
LABEL_316:
                  *(_DWORD *)uint64_t v31 = v235.i32[0];
                  *(float32x2_t *)(v31 + 4) = v234;
                  *(_DWORD *)(v31 + 12) = v235.i32[1];
                  float *v23 = a8.f32[0];
                  goto LABEL_318;
                }
              }
              else
              {
                a10.i32[0] = 1.0;
              }
              a8.f32[0] = (float)(a10.f32[0] + a9.f32[0]) - (float)(a10.f32[0] * a9.f32[0]);
              a10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a10.f32, 0), *(float32x4_t *)v31);
              a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0);
              v235.i32[3] = v235.i32[1];
              *(float32x2_t *)&v235.i32[1] = v234;
              float32x4_t v236 = vsubq_f32(a9, v235);
              float32x4_t v235 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0), vmlaq_f32(vaddq_f32(a10, v236), v231, vmulq_f32(v236, a10)));
              float32x2_t v234 = (float32x2_t)vextq_s8((int8x16_t)v235, (int8x16_t)v235, 4uLL).u64[0];
              if (v16)
              {
                a9 = (float32x4_t)vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL);
                v235.i32[1] = a9.i32[1];
                goto LABEL_316;
              }
              *(_DWORD *)uint64_t v31 = v235.i32[0];
              *(float32x2_t *)(v31 + 4) = v234;
              *(_DWORD *)(v31 + 12) = v235.i32[3];
            }
          }
LABEL_318:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v230);
          --v232;
        }
        while (v232);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28) {
          return;
        }
      }
    case 24:
      float v237 = v30.f32[3];
      float32x2_t v359 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      uint64_t v238 = 4 * v24;
      while (1)
      {
        int v239 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v240 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a10.f32[0] = v19 * v240;
            if ((float)(v19 * v240) > 0.0)
            {
              a8.f32[0] = v30.f32[0] * v240;
              double v241 = COERCE_DOUBLE(vmul_n_f32(v359, v240));
              float v242 = v237 * v240;
              if (v16)
              {
                float v243 = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_331;
                }
              }
              else
              {
                float v243 = 1.0;
              }
              PDAhuePDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v243, *(double *)a8.i64, v241, *(double *)a10.i64, a8.f32[0], *(float *)&v241, *((float *)&v241 + 1), v242, a10.f32[0]);
              a8.i32[0] = v364.i32[0];
              double v241 = *(double *)((char *)v364.i64 + 4);
              float v242 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_331:
                *(_DWORD *)uint64_t v31 = a8.i32[0];
                *(double *)(v31 + 4) = v241;
                *(float *)(v31 + 12) = v242;
                float *v23 = a10.f32[0];
                goto LABEL_333;
              }
              *(_DWORD *)uint64_t v31 = v364.i32[0];
              *(double *)(v31 + 4) = v241;
              *(float *)(v31 + 12) = v242;
              v30.i32[0] = v363;
            }
          }
LABEL_333:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v238);
          --v239;
        }
        while (v239);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28) {
          return;
        }
      }
    case 25:
      float v244 = v30.f32[3];
      float32x2_t v360 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      uint64_t v245 = 4 * v24;
      while (1)
      {
        int v246 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v247 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a10.f32[0] = v19 * v247;
            if ((float)(v19 * v247) > 0.0)
            {
              a8.f32[0] = v30.f32[0] * v247;
              double v248 = COERCE_DOUBLE(vmul_n_f32(v360, v247));
              float v249 = v244 * v247;
              if (v16)
              {
                float v250 = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_346;
                }
              }
              else
              {
                float v250 = 1.0;
              }
              PDAsaturationPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v250, *(double *)a8.i64, v248, *(double *)a10.i64, a8.f32[0], *(float *)&v248, *((float *)&v248 + 1), v249, a10.f32[0]);
              a8.i32[0] = v364.i32[0];
              double v248 = *(double *)((char *)v364.i64 + 4);
              float v249 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_346:
                *(_DWORD *)uint64_t v31 = a8.i32[0];
                *(double *)(v31 + 4) = v248;
                *(float *)(v31 + 12) = v249;
                float *v23 = a10.f32[0];
                goto LABEL_348;
              }
              *(_DWORD *)uint64_t v31 = v364.i32[0];
              *(double *)(v31 + 4) = v248;
              *(float *)(v31 + 12) = v249;
              v30.i32[0] = v363;
            }
          }
LABEL_348:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v245);
          --v246;
        }
        while (v246);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28) {
          return;
        }
      }
    case 26:
      float v251 = v30.f32[3];
      float32x2_t v361 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      uint64_t v252 = 4 * v24;
      while (1)
      {
        int v253 = v25;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v254 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            float v255 = v19 * v254;
            if ((float)(v19 * v254) > 0.0)
            {
              float v256 = v30.f32[0] * v254;
              float32x2_t v257 = vmul_n_f32(v361, v254);
              float v258 = v251 * v254;
              if (v16)
              {
                a8.f32[0] = *v23;
                if (*v23 <= 0.0) {
                  goto LABEL_361;
                }
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              a9.i32[0] = *(_DWORD *)v31;
              a10.i32[0] = *(_DWORD *)(v31 + 12);
              PDAluminosityPDA(v364.f32, v256, v257.f32[0], v257.f32[1], v258, v255, *(double *)a8.i64, *(double *)a9.i64, *(double *)a10.i64, *(float *)v31, COERCE_FLOAT(*(void *)(v31 + 4)), COERCE_FLOAT(HIDWORD(*(void *)(v31 + 4))), a10.f32[0], a8.f32[0]);
              float v256 = v364.f32[0];
              float32x2_t v257 = *(float32x2_t *)&v364.i32[1];
              float v258 = v364.f32[3];
              if (v16)
              {
                float v255 = *(float *)&v365;
                v30.i32[0] = v363;
LABEL_361:
                *(float *)uint64_t v31 = v256;
                *(float32x2_t *)(v31 + 4) = v257;
                *(float *)(v31 + 12) = v258;
                float *v23 = v255;
                goto LABEL_363;
              }
              *(_DWORD *)uint64_t v31 = v364.i32[0];
              *(float32x2_t *)(v31 + 4) = v257;
              *(float *)(v31 + 12) = v258;
              v30.i32[0] = v363;
            }
          }
LABEL_363:
          ++v33;
          v31 += 16;
          float v23 = (float *)((char *)v23 + v252);
          --v253;
        }
        while (v253);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28) {
          return;
        }
      }
    case 27:
      float v259 = v30.f32[3];
      float32x2_t v362 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
      uint64_t v260 = 4 * v24;
      break;
    default:
      return;
  }
  do
  {
    int v261 = v25;
    do
    {
      if (*(unsigned char *)v33)
      {
        float v262 = (float)*(unsigned __int8 *)v33 * 0.0039216;
        a10.f32[0] = v19 * v262;
        if ((float)(v19 * v262) > 0.0)
        {
          a8.f32[0] = v30.f32[0] * v262;
          double v263 = COERCE_DOUBLE(vmul_n_f32(v362, v262));
          float v264 = v259 * v262;
          if (v16)
          {
            float v265 = *v23;
            if (*v23 <= 0.0) {
              goto LABEL_376;
            }
          }
          else
          {
            float v265 = 1.0;
          }
          PDAluminosityPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v265, *(double *)a8.i64, v263, *(double *)a10.i64, a8.f32[0], *(float *)&v263, *((float *)&v263 + 1), v264, a10.f32[0]);
          a8.i32[0] = v364.i32[0];
          double v263 = *(double *)((char *)v364.i64 + 4);
          float v264 = v364.f32[3];
          if (v16)
          {
            a10.i32[0] = v365;
            v30.i32[0] = v363;
LABEL_376:
            *(_DWORD *)uint64_t v31 = a8.i32[0];
            *(double *)(v31 + 4) = v263;
            *(float *)(v31 + 12) = v264;
            float *v23 = a10.f32[0];
            goto LABEL_378;
          }
          *(_DWORD *)uint64_t v31 = v364.i32[0];
          *(double *)(v31 + 4) = v263;
          *(float *)(v31 + 12) = v264;
          v30.i32[0] = v363;
        }
      }
LABEL_378:
      ++v33;
      v31 += 16;
      float v23 = (float *)((char *)v23 + v260);
      --v261;
    }
    while (v261);
    v33 += v36;
    v31 += 16 * v353;
    v23 += v38;
    --v28;
    LODWORD(v25) = v37;
  }
  while (v28);
}

void CMYKf_mark_pixelmask(uint64_t a1, uint64_t a2, float32x2_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, float32x4_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 136);
  uint64_t v19 = *(int *)(a1 + 12);
  uint64_t v18 = *(int *)(a1 + 16);
  if (v16)
  {
    unint64_t v20 = (unint64_t)*(int *)(a1 + 32) >> 2;
    uint64_t v21 = (float *)(v16 + 4 * (v19 + v20 * v18));
    uint64_t v22 = 0xFFFFFFFFLL;
    if (!v17) {
      return;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v20 = 0;
    uint64_t v22 = 0;
    if (!v17) {
      return;
    }
  }
  uint64_t v23 = *(unsigned int *)(a1 + 4);
  int v24 = *(_DWORD *)(a1 + 8);
  uint64_t v25 = *(void *)(a1 + 96);
  unint64_t v776 = *(void *)(a1 + 88);
  unint64_t v26 = (unint64_t)*(int *)(a1 + 28) >> 4;
  uint64_t v27 = (float32x4_t *)(*(void *)(a1 + 40) + 16 * (v19 + v26 * v18));
  uint64_t v28 = *(int *)(a1 + 124);
  unint64_t v29 = (unsigned char *)(v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v28);
  uint64_t v30 = *(int *)(a1 + 56);
  uint64_t v31 = *(int *)(a1 + 60);
  unint64_t v32 = *(int *)(a1 + 76);
  if ((*(_DWORD *)a1 & 0xFF00) != 0x100)
  {
    int v33 = *(_DWORD *)(a1 + 64);
    int v34 = *(_DWORD *)(a1 + 68);
    uint64_t v770 = v32 >> 4;
    v771 = *(float **)(a1 + 96);
    if (v25)
    {
      unint64_t v768 = (unint64_t)*(int *)(a1 + 80) >> 2;
      uint64_t v25 = 1;
    }
    else
    {
      unint64_t v768 = 0;
    }
    unint64_t v35 = *(float32x4_t **)(a1 + 88);
    unint64_t v38 = v776 + 16 * v770 * v34;
    v22 &= 1u;
    int v37 = 1;
    unint64_t v772 = v776;
    goto LABEL_19;
  }
  uint64_t v770 = v32 >> 4;
  if (v25)
  {
    unint64_t v768 = (unint64_t)*(int *)(a1 + 80) >> 2;
    v771 = (float *)(v25 + 4 * (v30 + v768 * v31));
    uint64_t v25 = 0xFFFFFFFFLL;
  }
  else
  {
    v771 = 0;
    unint64_t v768 = 0;
  }
  unint64_t v35 = (float32x4_t *)(v776 + 16 * (v30 + v770 * v31));
  if (v770 == v26 && (char *)v27 - (char *)v35 >= 1)
  {
    if ((int)v23 >= (uint64_t)((unint64_t)((char *)v27 - (char *)v35) >> 4))
    {
      v27 += (int)v23 - 1;
      v35 += (int)v23 - 1;
      v29 += (int)v23 - 1;
      v21 += (int)(v22 & (v23 - 1));
      int v37 = -1;
      uint64_t v770 = (unint64_t)*(int *)(a1 + 28) >> 4;
      v771 += (int)(v25 & (v23 - 1));
      goto LABEL_16;
    }
    uint64_t v36 = v24 - 1;
    if (v27 <= &v35[v26 * v36 - 1 + (int)v23])
    {
      v27 += v26 * v36;
      v29 += v28 * v36;
      uint64_t v28 = -v28;
      v21 += v20 * v36;
      unint64_t v20 = -(uint64_t)v20;
      v22 &= 1u;
      uint64_t v770 = -(uint64_t)v26;
      v771 += v768 * v36;
      unint64_t v768 = -(uint64_t)v768;
      v25 &= 1u;
      int v37 = 1;
      v35 += v26 * v36;
      unint64_t v26 = -(uint64_t)v26;
      goto LABEL_16;
    }
  }
  v22 &= 1u;
  v25 &= 1u;
  int v37 = 1;
LABEL_16:
  unint64_t v38 = 0;
  unint64_t v772 = 0;
  unint64_t v776 = -1;
  int v34 = v768;
  int v33 = v770;
LABEL_19:
  int v39 = v37 * v23;
  int v769 = v23;
  unint64_t v765 = v38;
  int v773 = v24;
  if (v38)
  {
    uint64_t v40 = (int)v31 % v34;
    int v41 = &v35[v770 * v40];
    uint64_t v42 = (int)v30 % v33;
    unint64_t v35 = &v41[v42];
    unint64_t v776 = (unint64_t)&v41[v33];
    unint64_t v43 = v768 * v40;
    uint64_t v44 = (uint64_t)v771;
    uint64_t v45 = (uint64_t)&v771[v43 + v42];
    if (v25) {
      uint64_t v44 = v45;
    }
    v771 = (float *)v44;
    unint64_t v772 = (unint64_t)&v41[v42];
  }
  else
  {
    v770 -= v39;
    v768 -= (int)v25 * (int)v23;
  }
  uint64_t v767 = v28 - v39;
  unint64_t v766 = v26 - v39;
  unint64_t v764 = v20 - (int)v22 * (int)v23;
  uint64_t v774 = v25;
  uint64_t v775 = v22;
  switch((int)a2)
  {
    case 0:
      if (v22)
      {
        do
        {
          int v46 = v23;
          int v47 = v773;
          do
          {
            unsigned int v48 = *v29;
            if (*v29)
            {
              if (v48 == 255)
              {
                v27->i64[0] = 0;
                v27->i64[1] = 0;
                float v49 = 0.0;
              }
              else
              {
                float v50 = (float)((float)v48 * -0.0039216) + 1.0;
                *uint64_t v27 = vmulq_n_f32(*v27, v50);
                float v49 = v50 * *v21;
              }
              *uint64_t v21 = v49;
            }
            v29 += v37;
            v21 += (int)v22;
            v27 += v37;
            --v46;
          }
          while (v46);
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v47 != 1);
      }
      else
      {
        do
        {
          int v618 = v23;
          int v619 = v773;
          do
          {
            unsigned int v620 = *v29;
            if (*v29)
            {
              if (v620 == 255)
              {
                v27->i64[0] = 0;
                v27->i64[1] = 0;
              }
              else
              {
                *uint64_t v27 = vmulq_n_f32(*v27, (float)((float)v620 * -0.0039216) + 1.0);
              }
            }
            v29 += v37;
            v27 += v37;
            --v618;
          }
          while (v618);
          v29 += v767;
          v27 += v766;
          --v773;
        }
        while (v619 != 1);
      }
      return;
    case 1:
      if (v22)
      {
        uint64_t v51 = v37;
        if (v25)
        {
          uint64_t v52 = v34;
          uint64_t v53 = -(v770 * v34);
          uint64_t v54 = -(uint64_t)(v768 * v52);
          int v55 = v771;
          uint64_t v56 = -(uint64_t)v33;
          do
          {
            int v57 = v769;
            int v58 = v773;
            do
            {
              unsigned int v59 = *v29;
              if (*v29)
              {
                if (v59 == 255)
                {
                  *uint64_t v27 = *v35;
                  float v60 = *v55;
                }
                else
                {
                  float v61 = (float)v59 * 0.0039216;
                  *uint64_t v27 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - v61), *v35, v61);
                  float v60 = (float)((float)(1.0 - v61) * *v21) + (float)(*v55 * v61);
                }
                *uint64_t v21 = v60;
              }
              v29 += v51;
              unsigned int v62 = &v35[v51];
              unsigned int v63 = &v55[(int)v25];
              if ((unint64_t)v62 >= v776) {
                uint64_t v64 = v56;
              }
              else {
                uint64_t v64 = 0;
              }
              int v55 = &v63[v64];
              unint64_t v35 = &v62[v64];
              v21 += (int)v22;
              v27 += v51;
              --v57;
            }
            while (v57);
            if (v765)
            {
              unint64_t v65 = v772 + 16 * v770;
              if (v65 >= v765) {
                uint64_t v66 = v54;
              }
              else {
                uint64_t v66 = 0;
              }
              uint64_t v67 = (uint64_t)&v771[v768 + v66];
              if (v65 >= v765) {
                uint64_t v68 = v53;
              }
              else {
                uint64_t v68 = 0;
              }
              unint64_t v35 = (float32x4_t *)(v65 + 16 * v68);
              v776 += 16 * v68 + 16 * v770;
              v771 += v768 + v66;
              unint64_t v772 = (unint64_t)v35;
              int v55 = (float *)v67;
            }
            else
            {
              v35 += v770;
              v55 += v768;
            }
            v29 += v767;
            v27 += v766;
            v21 += v764;
            --v773;
          }
          while (v58 != 1);
        }
        else
        {
          uint64_t v722 = -(uint64_t)v33;
          uint64_t v723 = -(v770 * v34);
          do
          {
            int v724 = v769;
            int v725 = v773;
            do
            {
              unsigned int v726 = *v29;
              if (*v29)
              {
                if (v726 == 255)
                {
                  *uint64_t v27 = *v35;
                  float v727 = 1.0;
                }
                else
                {
                  float v728 = (float)v726 * 0.0039216;
                  *uint64_t v27 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - v728), *v35, v728);
                  float v727 = v728 + (float)((float)(1.0 - v728) * *v21);
                }
                *uint64_t v21 = v727;
              }
              v29 += v51;
              uint64_t v729 = &v35[v51];
              if ((unint64_t)v729 >= v776) {
                uint64_t v730 = v722;
              }
              else {
                uint64_t v730 = 0;
              }
              unint64_t v35 = &v729[v730];
              v21 += (int)v22;
              v27 += v51;
              --v724;
            }
            while (v724);
            v29 += v767;
            v27 += v766;
            v21 += v764;
            unint64_t v731 = v772;
            unint64_t v732 = v772 + 16 * v770;
            if (v732 >= v765) {
              uint64_t v733 = v723;
            }
            else {
              uint64_t v733 = 0;
            }
            unint64_t v734 = v776;
            unint64_t v735 = (float32x4_t *)(v732 + 16 * v733);
            uint64_t v736 = v776 + 16 * v733 + 16 * v770;
            if (v765) {
              unint64_t v734 = v736;
            }
            unint64_t v776 = v734;
            if (v765)
            {
              unint64_t v731 = (unint64_t)v735;
              unint64_t v35 = v735;
            }
            else
            {
              v35 += v770;
            }
            unint64_t v772 = v731;
            --v773;
          }
          while (v725 != 1);
        }
      }
      else
      {
        uint64_t v621 = v37;
        uint64_t v622 = -(uint64_t)v33;
        uint64_t v623 = -(v770 * v34);
        uint64_t v624 = 16 * v37;
        do
        {
          int v625 = v23;
          int v626 = v773;
          do
          {
            unsigned int v627 = *v29;
            if (*v29)
            {
              if (v627 == 255) {
                float32x4_t v628 = *v35;
              }
              else {
                float32x4_t v628 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - (float)((float)v627 * 0.0039216)), *v35, (float)v627 * 0.0039216);
              }
              *uint64_t v27 = v628;
            }
            v29 += v621;
            int v629 = &v35[v621];
            if ((unint64_t)v629 >= v776) {
              uint64_t v630 = v622;
            }
            else {
              uint64_t v630 = 0;
            }
            unint64_t v35 = &v629[v630];
            uint64_t v27 = (float32x4_t *)((char *)v27 + v624);
            --v625;
          }
          while (v625);
          v29 += v767;
          v27 += v766;
          unint64_t v631 = v772;
          unint64_t v632 = v772 + 16 * v770;
          if (v632 >= v765) {
            uint64_t v633 = v623;
          }
          else {
            uint64_t v633 = 0;
          }
          unint64_t v634 = v776;
          uint64_t v635 = (float32x4_t *)(v632 + 16 * v633);
          uint64_t v636 = v776 + 16 * v633 + 16 * v770;
          if (v765) {
            unint64_t v634 = v636;
          }
          unint64_t v776 = v634;
          if (v765)
          {
            unint64_t v631 = (unint64_t)v635;
            unint64_t v35 = v635;
          }
          else
          {
            v35 += v770;
          }
          unint64_t v772 = v631;
          --v773;
        }
        while (v626 != 1);
      }
      return;
    case 2:
      uint64_t v69 = v37;
      uint64_t v70 = -(uint64_t)v33;
      uint64_t v71 = v34;
      if (v22)
      {
        uint64_t v72 = -(v770 * v34);
        uint64_t v73 = -(uint64_t)(v768 * v71);
        unsigned int v74 = v771;
        while (1)
        {
          int v75 = v769;
          int v76 = v773;
          do
          {
            unsigned int v77 = *v29;
            if (!*v29) {
              goto LABEL_73;
            }
            if (v77 == 255)
            {
              float v78 = *v74;
              if (*v74 >= 1.0)
              {
                *uint64_t v27 = *v35;
              }
              else
              {
                if (v78 <= 0.0) {
                  goto LABEL_73;
                }
                *uint64_t v27 = vmlaq_n_f32(*v35, *v27, 1.0 - v78);
                float v78 = v78 + (float)(*v21 * (float)(1.0 - v78));
              }
            }
            else
            {
              float v79 = (float)v77 * 0.0039216;
              float v80 = v79 * *v74;
              if (v80 <= 0.0) {
                goto LABEL_73;
              }
              *uint64_t v27 = vmlaq_n_f32(vmulq_n_f32(*v35, v79), *v27, 1.0 - v80);
              float v78 = v80 + (float)(*v21 * (float)(1.0 - v80));
            }
            *uint64_t v21 = v78;
LABEL_73:
            v29 += v69;
            uint64_t v81 = &v35[v69];
            int v82 = &v74[(int)v25];
            if ((unint64_t)v81 >= v776) {
              uint64_t v83 = v70;
            }
            else {
              uint64_t v83 = 0;
            }
            unsigned int v74 = &v82[v83];
            unint64_t v35 = &v81[v83];
            v21 += (int)v22;
            v27 += v69;
            --v75;
          }
          while (v75);
          if (v765)
          {
            unint64_t v84 = v772 + 16 * v770;
            if (v84 >= v765) {
              uint64_t v85 = v73;
            }
            else {
              uint64_t v85 = 0;
            }
            uint64_t v86 = (uint64_t)&v771[v768 + v85];
            if (v84 >= v765) {
              uint64_t v87 = v72;
            }
            else {
              uint64_t v87 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v84 + 16 * v87);
            v776 += 16 * v87 + 16 * v770;
            v771 += v768 + v85;
            unint64_t v772 = (unint64_t)v35;
            unsigned int v74 = (float *)v86;
          }
          else
          {
            v35 += v770;
            v74 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
          if (v76 == 1) {
            return;
          }
        }
      }
      uint64_t v637 = -(v770 * v34);
      uint64_t v638 = -(uint64_t)(v768 * v71);
      uint64_t v639 = v771;
LABEL_781:
      int v640 = v23;
      int v641 = v773;
      while (1)
      {
        unsigned int v642 = *v29;
        if (*v29)
        {
          if (v642 == 255)
          {
            float v643 = *v639;
            if (*v639 >= 1.0)
            {
              float32x4_t v648 = *v35;
              goto LABEL_791;
            }
            if (v643 > 0.0)
            {
              float v644 = 1.0 - v643;
              float32x4_t v645 = *v35;
              goto LABEL_789;
            }
          }
          else
          {
            float v646 = (float)v642 * 0.0039216;
            float v647 = v646 * *v639;
            if (v647 > 0.0)
            {
              float v644 = 1.0 - v647;
              float32x4_t v645 = vmulq_n_f32(*v35, v646);
LABEL_789:
              float32x4_t v648 = vmlaq_n_f32(v645, *v27, v644);
LABEL_791:
              *uint64_t v27 = v648;
            }
          }
        }
        v29 += v69;
        int v649 = &v35[v69];
        unint64_t v650 = &v639[(int)v25];
        if ((unint64_t)v649 >= v776) {
          uint64_t v651 = v70;
        }
        else {
          uint64_t v651 = 0;
        }
        uint64_t v639 = &v650[v651];
        unint64_t v35 = &v649[v651];
        v27 += v69;
        if (!--v640)
        {
          if (v765)
          {
            unint64_t v652 = v772 + 16 * v770;
            if (v652 >= v765) {
              uint64_t v653 = v638;
            }
            else {
              uint64_t v653 = 0;
            }
            uint64_t v654 = (uint64_t)&v771[v768 + v653];
            if (v652 >= v765) {
              uint64_t v655 = v637;
            }
            else {
              uint64_t v655 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v652 + 16 * v655);
            v776 += 16 * v655 + 16 * v770;
            v771 += v768 + v653;
            unint64_t v772 = (unint64_t)v35;
            uint64_t v639 = (float *)v654;
          }
          else
          {
            v35 += v770;
            v639 += v768;
          }
          v29 += v767;
          v27 += v766;
          --v773;
          if (v641 == 1) {
            return;
          }
          goto LABEL_781;
        }
      }
    case 3:
      uint64_t v88 = v37;
      uint64_t v89 = v34;
      uint64_t v90 = -(v770 * v34);
      uint64_t v91 = -(uint64_t)(v768 * v89);
      uint64_t v92 = 16 * v37;
      uint64_t v93 = -(uint64_t)v33;
      uint64_t v94 = v771;
      do
      {
        int v95 = v769;
        int v96 = v773;
        do
        {
          unsigned int v97 = *v29;
          if (*v29)
          {
            if (v97 == 255)
            {
              v27->f32[0] = v35->f32[0] * *v21;
              v27->f32[1] = v35->f32[1] * *v21;
              v27->f32[2] = v35->f32[2] * *v21;
              v27->f32[3] = v35->f32[3] * *v21;
              if (v25) {
                float v98 = *v94;
              }
              else {
                float v98 = 1.0;
              }
              float v104 = v98 * *v21;
            }
            else
            {
              float v99 = (float)v97 * 0.0039216;
              float v100 = *v21;
              float v101 = v99 * *v21;
              float v102 = 1.0;
              float v103 = 1.0 - v99;
              *uint64_t v27 = vmlaq_n_f32(vmulq_n_f32(*v27, v103), *v35, v101);
              if (v25) {
                float v102 = *v94;
              }
              float v104 = (float)(v103 * v100) + (float)(v102 * v101);
            }
            *uint64_t v21 = v104;
          }
          v29 += v88;
          uint64_t v105 = &v35[v88];
          int v106 = &v94[(int)v25];
          if ((unint64_t)v105 >= v776) {
            uint64_t v107 = v93;
          }
          else {
            uint64_t v107 = 0;
          }
          uint64_t v94 = &v106[v107];
          unint64_t v35 = &v105[v107];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v92);
          --v95;
        }
        while (v95);
        if (v765)
        {
          unint64_t v108 = v772 + 16 * v770;
          if (v108 >= v765) {
            uint64_t v109 = v91;
          }
          else {
            uint64_t v109 = 0;
          }
          uint64_t v110 = (uint64_t)&v771[v768 + v109];
          if (v108 >= v765) {
            uint64_t v111 = v90;
          }
          else {
            uint64_t v111 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v108 + 16 * v111);
          v776 += 16 * v111 + 16 * v770;
          v771 += v768 + v109;
          unint64_t v772 = (unint64_t)v35;
          uint64_t v94 = (float *)v110;
        }
        else
        {
          v35 += v770;
          v94 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v96 != 1);
      return;
    case 4:
      uint64_t v112 = v37;
      uint64_t v113 = v34;
      uint64_t v114 = -(v770 * v34);
      uint64_t v115 = -(uint64_t)(v768 * v113);
      uint64_t v116 = 16 * v37;
      uint64_t v117 = -(uint64_t)v33;
      int v118 = v771;
      do
      {
        int v119 = v769;
        int v120 = v773;
        do
        {
          unsigned int v121 = *v29;
          if (*v29)
          {
            if (v121 == 255)
            {
              float v122 = 1.0;
              v27->f32[0] = v35->f32[0] * (float)(1.0 - *v21);
              v27->f32[1] = v35->f32[1] * (float)(1.0 - *v21);
              v27->f32[2] = v35->f32[2] * (float)(1.0 - *v21);
              v27->f32[3] = v35->f32[3] * (float)(1.0 - *v21);
              if (v25) {
                float v122 = *v118;
              }
              float v123 = v122 * (float)(1.0 - *v21);
            }
            else
            {
              float v124 = (float)v121 * 0.0039216;
              float v125 = *v21;
              float v126 = 1.0;
              float v127 = v124 * (float)(1.0 - *v21);
              float v128 = 1.0 - v124;
              *uint64_t v27 = vmlaq_n_f32(vmulq_n_f32(*v27, v128), *v35, v127);
              if (v25) {
                float v126 = *v118;
              }
              float v123 = (float)(v128 * v125) + (float)(v126 * v127);
            }
            *uint64_t v21 = v123;
          }
          v29 += v112;
          float v129 = &v35[v112];
          float v130 = &v118[(int)v25];
          if ((unint64_t)v129 >= v776) {
            uint64_t v131 = v117;
          }
          else {
            uint64_t v131 = 0;
          }
          int v118 = &v130[v131];
          unint64_t v35 = &v129[v131];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v116);
          --v119;
        }
        while (v119);
        if (v765)
        {
          unint64_t v132 = v772 + 16 * v770;
          if (v132 >= v765) {
            uint64_t v133 = v115;
          }
          else {
            uint64_t v133 = 0;
          }
          uint64_t v134 = (uint64_t)&v771[v768 + v133];
          if (v132 >= v765) {
            uint64_t v135 = v114;
          }
          else {
            uint64_t v135 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v132 + 16 * v135);
          v776 += 16 * v135 + 16 * v770;
          v771 += v768 + v133;
          unint64_t v772 = (unint64_t)v35;
          int v118 = (float *)v134;
        }
        else
        {
          v35 += v770;
          v118 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v120 != 1);
      return;
    case 5:
      uint64_t v136 = v37;
      uint64_t v137 = v34;
      uint64_t v138 = -(v770 * v34);
      uint64_t v139 = -(uint64_t)(v768 * v137);
      uint64_t v140 = 16 * v37;
      uint64_t v141 = -(uint64_t)v33;
      float32x4_t v142 = v771;
      do
      {
        int v143 = v769;
        int v144 = v773;
        do
        {
          if (*v29)
          {
            float v145 = *v21;
            float v146 = (float)*v29 * 0.0039216;
            float v147 = v146 * *v142;
            *uint64_t v27 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - v147), vmulq_n_f32(*v35, v146), *v21);
            *uint64_t v21 = (float)(v145 * (float)(1.0 - v147)) + (float)(v147 * v145);
          }
          v29 += v136;
          int v148 = &v35[v136];
          float v149 = &v142[(int)v25];
          if ((unint64_t)v148 >= v776) {
            uint64_t v150 = v141;
          }
          else {
            uint64_t v150 = 0;
          }
          float32x4_t v142 = &v149[v150];
          unint64_t v35 = &v148[v150];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v140);
          --v143;
        }
        while (v143);
        if (v765)
        {
          unint64_t v151 = v772 + 16 * v770;
          if (v151 >= v765) {
            uint64_t v152 = v139;
          }
          else {
            uint64_t v152 = 0;
          }
          uint64_t v153 = (uint64_t)&v771[v768 + v152];
          if (v151 >= v765) {
            uint64_t v154 = v138;
          }
          else {
            uint64_t v154 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v151 + 16 * v154);
          v776 += 16 * v154 + 16 * v770;
          v771 += v768 + v152;
          unint64_t v772 = (unint64_t)v35;
          float32x4_t v142 = (float *)v153;
        }
        else
        {
          v35 += v770;
          v142 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v144 != 1);
      return;
    case 6:
      uint64_t v155 = v37;
      uint64_t v156 = v34;
      uint64_t v157 = -(v770 * v34);
      uint64_t v158 = -(uint64_t)(v768 * v156);
      uint64_t v159 = 16 * v37;
      uint64_t v160 = -(uint64_t)v33;
      double v161 = v771;
      while (1)
      {
        int v162 = v769;
        int v163 = v773;
        do
        {
          unsigned int v164 = *v29;
          if (!*v29) {
            goto LABEL_174;
          }
          float v165 = *v21;
          float v166 = 1.0 - *v21;
          if (v166 >= 1.0)
          {
            float v169 = (float)v164 * 0.0039216;
            *uint64_t v27 = vmulq_n_f32(*v35, v169);
            if (v25) {
              float v170 = *v161;
            }
            else {
              float v170 = 1.0;
            }
            float v171 = v169 * v170;
          }
          else
          {
            if (v166 <= 0.0) {
              goto LABEL_174;
            }
            float v167 = (float)((float)v164 * 0.0039216) * v166;
            *uint64_t v27 = vmlaq_n_f32(*v27, *v35, v167);
            if (v25) {
              float v168 = *v161;
            }
            else {
              float v168 = 1.0;
            }
            float v171 = v165 + (float)(v168 * v167);
          }
          *uint64_t v21 = v171;
LABEL_174:
          v29 += v155;
          float32x4_t v172 = &v35[v155];
          float32x4_t v173 = &v161[(int)v25];
          if ((unint64_t)v172 >= v776) {
            uint64_t v174 = v160;
          }
          else {
            uint64_t v174 = 0;
          }
          double v161 = &v173[v174];
          unint64_t v35 = &v172[v174];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v159);
          --v162;
        }
        while (v162);
        if (v765)
        {
          unint64_t v175 = v772 + 16 * v770;
          if (v175 >= v765) {
            uint64_t v176 = v158;
          }
          else {
            uint64_t v176 = 0;
          }
          uint64_t v177 = (uint64_t)&v771[v768 + v176];
          if (v175 >= v765) {
            uint64_t v178 = v157;
          }
          else {
            uint64_t v178 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v175 + 16 * v178);
          v776 += 16 * v178 + 16 * v770;
          v771 += v768 + v176;
          unint64_t v772 = (unint64_t)v35;
          double v161 = (float *)v177;
        }
        else
        {
          v35 += v770;
          v161 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v163 == 1) {
          return;
        }
      }
    case 7:
      uint64_t v179 = v37;
      if (v22)
      {
        uint64_t v180 = v34;
        uint64_t v181 = -(v770 * v34);
        uint64_t v182 = -(uint64_t)(v768 * v180);
        uint64_t v183 = -(uint64_t)v33;
        float32x4_t v184 = v771;
        do
        {
          int v185 = v769;
          int v186 = v773;
          do
          {
            unsigned int v187 = *v29;
            if (*v29)
            {
              if (v187 == 255)
              {
                float v188 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * *v184;
                v27->f32[1] = v188 * *v184;
                float v189 = v27->f32[3];
                v27->f32[2] = v27->f32[2] * *v184;
                v27->f32[3] = v189 * *v184;
                float v190 = *v21 * *v184;
              }
              else
              {
                float v191 = (float)v187 * 0.0039216;
                float v192 = *v21;
                float v193 = v27->f32[1];
                v27->f32[0] = (float)((float)(1.0 - v191) * v27->f32[0]) + (float)(v27->f32[0] * (float)(v191 * *v184));
                v27->f32[1] = (float)((float)(1.0 - v191) * v193) + (float)(v193 * (float)(v191 * *v184));
                float v194 = v27->f32[3];
                v27->f32[2] = (float)((float)(1.0 - v191) * v27->f32[2]) + (float)(v27->f32[2] * (float)(v191 * *v184));
                v27->f32[3] = (float)((float)(1.0 - v191) * v194) + (float)(v194 * (float)(v191 * *v184));
                float v190 = (float)((float)(1.0 - v191) * v192) + (float)(v192 * (float)(v191 * *v184));
              }
              *uint64_t v21 = v190;
            }
            v29 += v179;
            float v195 = &v35[v179];
            uint64_t v196 = &v184[(int)v25];
            if ((unint64_t)v195 >= v776) {
              uint64_t v197 = v183;
            }
            else {
              uint64_t v197 = 0;
            }
            float32x4_t v184 = &v196[v197];
            unint64_t v35 = &v195[v197];
            v21 += (int)v22;
            v27 += v179;
            --v185;
          }
          while (v185);
          if (v765)
          {
            unint64_t v198 = v772 + 16 * v770;
            if (v198 >= v765) {
              uint64_t v199 = v182;
            }
            else {
              uint64_t v199 = 0;
            }
            uint64_t v200 = (uint64_t)&v771[v768 + v199];
            if (v198 >= v765) {
              uint64_t v201 = v181;
            }
            else {
              uint64_t v201 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v198 + 16 * v201);
            v776 += 16 * v201 + 16 * v770;
            v771 += v768 + v199;
            unint64_t v772 = (unint64_t)v35;
            float32x4_t v184 = (float *)v200;
          }
          else
          {
            v35 += v770;
            v184 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v186 != 1);
      }
      else
      {
        uint64_t v656 = -(uint64_t)v33;
        uint64_t v657 = v34;
        uint64_t v658 = -(v770 * v34);
        uint64_t v659 = -(uint64_t)(v768 * v657);
        uint64_t v660 = v771;
        do
        {
          int v661 = v23;
          int v662 = v773;
          do
          {
            unsigned int v663 = *v29;
            if (*v29)
            {
              if (v663 == 255)
              {
                float v664 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * *v660;
                v27->f32[1] = v664 * *v660;
                float v665 = v27->f32[3];
                v27->f32[2] = v27->f32[2] * *v660;
                float v666 = v665 * *v660;
              }
              else
              {
                float v667 = (float)v663 * 0.0039216;
                float v668 = v27->f32[1];
                v27->f32[0] = (float)((float)(1.0 - v667) * v27->f32[0]) + (float)(v27->f32[0] * (float)(v667 * *v660));
                v27->f32[1] = (float)((float)(1.0 - v667) * v668) + (float)(v668 * (float)(v667 * *v660));
                float v669 = v27->f32[3];
                v27->f32[2] = (float)((float)(1.0 - v667) * v27->f32[2]) + (float)(v27->f32[2] * (float)(v667 * *v660));
                float v666 = (float)((float)(1.0 - v667) * v669) + (float)(v669 * (float)(v667 * *v660));
              }
              v27->f32[3] = v666;
            }
            v29 += v179;
            uint64_t v670 = &v35[v179];
            unint64_t v671 = &v660[(int)v25];
            if ((unint64_t)v670 >= v776) {
              uint64_t v672 = v656;
            }
            else {
              uint64_t v672 = 0;
            }
            uint64_t v660 = &v671[v672];
            unint64_t v35 = &v670[v672];
            v27 += v179;
            --v661;
          }
          while (v661);
          if (v765)
          {
            unint64_t v673 = v772 + 16 * v770;
            if (v673 >= v765) {
              uint64_t v674 = v659;
            }
            else {
              uint64_t v674 = 0;
            }
            uint64_t v675 = (uint64_t)&v771[v768 + v674];
            if (v673 >= v765) {
              uint64_t v676 = v658;
            }
            else {
              uint64_t v676 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v673 + 16 * v676);
            v776 += 16 * v676 + 16 * v770;
            v771 += v768 + v674;
            unint64_t v772 = (unint64_t)v35;
            uint64_t v660 = (float *)v675;
          }
          else
          {
            v35 += v770;
            v660 += v768;
          }
          v29 += v767;
          v27 += v766;
          --v773;
        }
        while (v662 != 1);
      }
      return;
    case 8:
      uint64_t v202 = v37;
      uint64_t v203 = -(uint64_t)v33;
      uint64_t v204 = v34;
      if (v22)
      {
        uint64_t v205 = -(v770 * v34);
        uint64_t v206 = -(uint64_t)(v768 * v204);
        double v207 = v771;
        do
        {
          int v208 = v769;
          int v209 = v773;
          do
          {
            unsigned int v210 = *v29;
            if (*v29)
            {
              if (v210 == 255)
              {
                float v211 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * (float)(1.0 - *v207);
                v27->f32[1] = v211 * (float)(1.0 - *v207);
                float v212 = v27->f32[3];
                v27->f32[2] = v27->f32[2] * (float)(1.0 - *v207);
                v27->f32[3] = v212 * (float)(1.0 - *v207);
                float v213 = *v207;
              }
              else
              {
                float v214 = (float)v210 * 0.0039216;
                float v215 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * (float)(1.0 - (float)(v214 * *v207));
                v27->f32[1] = v215 * (float)(1.0 - (float)(v214 * *v207));
                float v216 = v27->f32[3];
                v27->f32[2] = v27->f32[2] * (float)(1.0 - (float)(v214 * *v207));
                v27->f32[3] = v216 * (float)(1.0 - (float)(v214 * *v207));
                float v213 = v214 * *v207;
              }
              *uint64_t v21 = *v21 * (float)(1.0 - v213);
            }
            v29 += v202;
            uint64_t v217 = &v35[v202];
            int v218 = &v207[(int)v25];
            if ((unint64_t)v217 >= v776) {
              uint64_t v219 = v203;
            }
            else {
              uint64_t v219 = 0;
            }
            double v207 = &v218[v219];
            unint64_t v35 = &v217[v219];
            v21 += (int)v22;
            v27 += v202;
            --v208;
          }
          while (v208);
          if (v765)
          {
            unint64_t v220 = v772 + 16 * v770;
            if (v220 >= v765) {
              uint64_t v221 = v206;
            }
            else {
              uint64_t v221 = 0;
            }
            uint64_t v222 = (uint64_t)&v771[v768 + v221];
            if (v220 >= v765) {
              uint64_t v223 = v205;
            }
            else {
              uint64_t v223 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v220 + 16 * v223);
            v776 += 16 * v223 + 16 * v770;
            v771 += v768 + v221;
            unint64_t v772 = (unint64_t)v35;
            double v207 = (float *)v222;
          }
          else
          {
            v35 += v770;
            v207 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v209 != 1);
      }
      else
      {
        uint64_t v677 = -(v770 * v34);
        uint64_t v678 = -(uint64_t)(v768 * v204);
        v679 = v771;
        do
        {
          int v680 = v23;
          int v681 = v773;
          do
          {
            unsigned int v682 = *v29;
            if (*v29)
            {
              if (v682 == 255)
              {
                float v683 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * (float)(1.0 - *v679);
                v27->f32[1] = v683 * (float)(1.0 - *v679);
                v27->f32[2] = v27->f32[2] * (float)(1.0 - *v679);
                float v684 = *v679;
              }
              else
              {
                float v685 = (float)v682 * 0.0039216;
                float v686 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * (float)(1.0 - (float)(v685 * *v679));
                v27->f32[1] = v686 * (float)(1.0 - (float)(v685 * *v679));
                v27->f32[2] = v27->f32[2] * (float)(1.0 - (float)(v685 * *v679));
                float v684 = v685 * *v679;
              }
              v27->f32[3] = v27->f32[3] * (float)(1.0 - v684);
            }
            v29 += v202;
            int v687 = &v35[v202];
            uint64_t v688 = &v679[(int)v25];
            if ((unint64_t)v687 >= v776) {
              uint64_t v689 = v203;
            }
            else {
              uint64_t v689 = 0;
            }
            v679 = &v688[v689];
            unint64_t v35 = &v687[v689];
            v27 += v202;
            --v680;
          }
          while (v680);
          if (v765)
          {
            unint64_t v690 = v772 + 16 * v770;
            if (v690 >= v765) {
              uint64_t v691 = v678;
            }
            else {
              uint64_t v691 = 0;
            }
            uint64_t v692 = (uint64_t)&v771[v768 + v691];
            if (v690 >= v765) {
              uint64_t v693 = v677;
            }
            else {
              uint64_t v693 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v690 + 16 * v693);
            v776 += 16 * v693 + 16 * v770;
            v771 += v768 + v691;
            unint64_t v772 = (unint64_t)v35;
            v679 = (float *)v692;
          }
          else
          {
            v35 += v770;
            v679 += v768;
          }
          v29 += v767;
          v27 += v766;
          --v773;
        }
        while (v681 != 1);
      }
      return;
    case 9:
      uint64_t v224 = v37;
      uint64_t v225 = v34;
      uint64_t v226 = -(v770 * v34);
      uint64_t v227 = -(uint64_t)(v768 * v225);
      uint64_t v228 = 16 * v37;
      uint64_t v229 = -(uint64_t)v33;
      uint64_t v230 = v771;
      do
      {
        int v231 = v769;
        int v232 = v773;
        do
        {
          if (*v29)
          {
            float v233 = *v21;
            float v234 = (float)*v29 * 0.0039216;
            float v235 = v234 * *v230;
            float v236 = 1.0 - *v21;
            float v237 = (float)(1.0 - v234) + v235;
            *uint64_t v27 = vmlaq_n_f32(vmulq_n_f32(*v27, v237), vmulq_n_f32(*v35, v234), v236);
            *uint64_t v21 = (float)(v233 * v237) + (float)(v235 * v236);
          }
          v29 += v224;
          uint64_t v238 = &v35[v224];
          int v239 = &v230[(int)v25];
          if ((unint64_t)v238 >= v776) {
            uint64_t v240 = v229;
          }
          else {
            uint64_t v240 = 0;
          }
          uint64_t v230 = &v239[v240];
          unint64_t v35 = &v238[v240];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v228);
          --v231;
        }
        while (v231);
        if (v765)
        {
          unint64_t v241 = v772 + 16 * v770;
          if (v241 >= v765) {
            uint64_t v242 = v227;
          }
          else {
            uint64_t v242 = 0;
          }
          uint64_t v243 = (uint64_t)&v771[v768 + v242];
          if (v241 >= v765) {
            uint64_t v244 = v226;
          }
          else {
            uint64_t v244 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v241 + 16 * v244);
          v776 += 16 * v244 + 16 * v770;
          v771 += v768 + v242;
          unint64_t v772 = (unint64_t)v35;
          uint64_t v230 = (float *)v243;
        }
        else
        {
          v35 += v770;
          v230 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v232 != 1);
      return;
    case 10:
      uint64_t v245 = v37;
      uint64_t v246 = v34;
      uint64_t v247 = -(v770 * v34);
      uint64_t v248 = -(uint64_t)(v768 * v246);
      uint64_t v249 = 16 * v37;
      uint64_t v250 = -(uint64_t)v33;
      float v251 = v771;
      do
      {
        int v252 = v769;
        int v253 = v773;
        do
        {
          if (*v29)
          {
            float v254 = *v21;
            float v255 = (float)*v29 * 0.0039216;
            float v256 = v255 * *v251;
            float v257 = 1.0 - *v21;
            *uint64_t v27 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - v256), vmulq_n_f32(*v35, v255), v257);
            *uint64_t v21 = (float)(v254 * (float)(1.0 - v256)) + (float)(v256 * v257);
          }
          v29 += v245;
          float v258 = &v35[v245];
          float v259 = &v251[(int)v25];
          if ((unint64_t)v258 >= v776) {
            uint64_t v260 = v250;
          }
          else {
            uint64_t v260 = 0;
          }
          float v251 = &v259[v260];
          unint64_t v35 = &v258[v260];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v249);
          --v252;
        }
        while (v252);
        if (v765)
        {
          unint64_t v261 = v772 + 16 * v770;
          if (v261 >= v765) {
            uint64_t v262 = v248;
          }
          else {
            uint64_t v262 = 0;
          }
          uint64_t v263 = (uint64_t)&v771[v768 + v262];
          if (v261 >= v765) {
            uint64_t v264 = v247;
          }
          else {
            uint64_t v264 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v261 + 16 * v264);
          v776 += 16 * v264 + 16 * v770;
          v771 += v768 + v262;
          unint64_t v772 = (unint64_t)v35;
          float v251 = (float *)v263;
        }
        else
        {
          v35 += v770;
          v251 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v253 != 1);
      return;
    case 11:
      uint64_t v265 = v37;
      if (v22)
      {
        uint64_t v266 = v34;
        uint64_t v267 = -(v770 * v34);
        uint64_t v268 = -(uint64_t)(v768 * v266);
        uint64_t v269 = -(uint64_t)v33;
        uint64_t v270 = v771;
        do
        {
          int v271 = v769;
          int v272 = v773;
          do
          {
            if (*v29)
            {
              if (v25) {
                float v273 = *v270;
              }
              else {
                float v273 = 1.0;
              }
              float v274 = (float)*v29 * 0.0039216;
              float v275 = v274 * v35->f32[2];
              float v276 = v274 * v35->f32[3];
              float v277 = v274 * v273;
              float v278 = (float)(v277 - (float)(v274 * v35->f32[0])) + (float)(*v21 - v27->f32[0]);
              float v279 = *v21 + v277;
              if (v279 > 1.0) {
                float v279 = 1.0;
              }
              float v280 = (float)(v277 - (float)(v274 * v35->f32[1])) + (float)(*v21 - v27->f32[1]);
              v27->f32[0] = v279 - v278;
              float v281 = v27->f32[3];
              float v282 = (float)(v277 - v275) + (float)(*v21 - v27->f32[2]);
              v27->f32[1] = v279 - v280;
              float v283 = (float)(v277 - v276) + (float)(*v21 - v281);
              v27->f32[2] = v279 - v282;
              *uint64_t v21 = v279;
              v27->f32[3] = v279 - v283;
            }
            v29 += v265;
            int v284 = &v35[v265];
            unsigned int v285 = &v270[(int)v25];
            if ((unint64_t)v284 >= v776) {
              uint64_t v286 = v269;
            }
            else {
              uint64_t v286 = 0;
            }
            uint64_t v270 = &v285[v286];
            unint64_t v35 = &v284[v286];
            v21 += (int)v22;
            v27 += v265;
            --v271;
          }
          while (v271);
          if (v765)
          {
            unint64_t v287 = v772 + 16 * v770;
            if (v287 >= v765) {
              uint64_t v288 = v268;
            }
            else {
              uint64_t v288 = 0;
            }
            uint64_t v289 = (uint64_t)&v771[v768 + v288];
            if (v287 >= v765) {
              uint64_t v290 = v267;
            }
            else {
              uint64_t v290 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v287 + 16 * v290);
            v776 += 16 * v290 + 16 * v770;
            v771 += v768 + v288;
            unint64_t v772 = (unint64_t)v35;
            uint64_t v270 = (float *)v289;
          }
          else
          {
            v35 += v770;
            v270 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v272 != 1);
      }
      else
      {
        uint64_t v694 = -(uint64_t)v33;
        uint64_t v695 = v34;
        uint64_t v696 = -(v770 * v34);
        uint64_t v697 = -(uint64_t)(v768 * v695);
        __asm { FMOV            V1.4S, #1.0 }
        int v699 = (unsigned __int32 *)v771;
        do
        {
          int v700 = v23;
          int v701 = v773;
          do
          {
            if (*v29)
            {
              if (v25) {
                a5.i32[0] = *v699;
              }
              else {
                a5.i32[0] = 1.0;
              }
              float v702 = (float)*v29 * 0.0039216;
              a5.f32[0] = v702 * a5.f32[0];
              a5 = vsubq_f32(_Q1, vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), vmulq_n_f32(*v35, v702)), vsubq_f32(_Q1, *v27)));
              *uint64_t v27 = a5;
            }
            v29 += v265;
            unint64_t v703 = &v35[v265];
            int v704 = &v699[(int)v25];
            if ((unint64_t)v703 >= v776) {
              uint64_t v705 = v694;
            }
            else {
              uint64_t v705 = 0;
            }
            int v699 = &v704[v705];
            unint64_t v35 = &v703[v705];
            v27 += v265;
            --v700;
          }
          while (v700);
          if (v765)
          {
            unint64_t v706 = v772 + 16 * v770;
            if (v706 >= v765) {
              uint64_t v707 = v697;
            }
            else {
              uint64_t v707 = 0;
            }
            uint64_t v708 = (uint64_t)&v771[v768 + v707];
            if (v706 >= v765) {
              uint64_t v709 = v696;
            }
            else {
              uint64_t v709 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v706 + 16 * v709);
            v776 += 16 * v709 + 16 * v770;
            v771 += v768 + v707;
            unint64_t v772 = (unint64_t)v35;
            int v699 = (unsigned __int32 *)v708;
          }
          else
          {
            v35 += v770;
            v699 += v768;
          }
          v29 += v767;
          v27 += v766;
          --v773;
        }
        while (v701 != 1);
      }
      return;
    case 12:
      uint64_t v291 = v37;
      if (v22)
      {
        uint64_t v292 = v34;
        uint64_t v293 = -(v770 * v34);
        uint64_t v294 = -(uint64_t)(v768 * v292);
        uint64_t v295 = -(uint64_t)v33;
        uint64_t v296 = v771;
        do
        {
          int v297 = v769;
          int v298 = v773;
          do
          {
            if (*v29)
            {
              if (v25) {
                float v299 = *v296;
              }
              else {
                float v299 = 1.0;
              }
              float v300 = (float)*v29 * 0.0039216;
              float32x4_t v301 = vmulq_n_f32(*v35, v300);
              float v302 = *v21 + (float)(v300 * v299);
              if (v302 > 1.0) {
                float v302 = 1.0;
              }
              v303.i64[0] = v27->i64[0];
              *uint64_t v21 = v302;
              v303.i64[1] = v27->i64[1];
              *uint64_t v27 = vaddq_f32(v301, v303);
            }
            v29 += v291;
            float v304 = &v35[v291];
            float v305 = &v296[(int)v25];
            if ((unint64_t)v304 >= v776) {
              uint64_t v306 = v295;
            }
            else {
              uint64_t v306 = 0;
            }
            uint64_t v296 = &v305[v306];
            unint64_t v35 = &v304[v306];
            v21 += (int)v22;
            v27 += v291;
            --v297;
          }
          while (v297);
          if (v765)
          {
            unint64_t v307 = v772 + 16 * v770;
            if (v307 >= v765) {
              uint64_t v308 = v294;
            }
            else {
              uint64_t v308 = 0;
            }
            uint64_t v309 = (uint64_t)&v771[v768 + v308];
            if (v307 >= v765) {
              uint64_t v310 = v293;
            }
            else {
              uint64_t v310 = 0;
            }
            unint64_t v35 = (float32x4_t *)(v307 + 16 * v310);
            v776 += 16 * v310 + 16 * v770;
            v771 += v768 + v308;
            unint64_t v772 = (unint64_t)v35;
            uint64_t v296 = (float *)v309;
          }
          else
          {
            v35 += v770;
            v296 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v298 != 1);
      }
      else
      {
        uint64_t v710 = -(uint64_t)v33;
        uint64_t v711 = -(v770 * v34);
        do
        {
          int v712 = v23;
          int v713 = v773;
          do
          {
            if (*v29) {
              *uint64_t v27 = vaddq_f32(vmulq_n_f32(*v35, (float)*v29 * 0.0039216), *v27);
            }
            v29 += v291;
            int v714 = &v35[v291];
            if ((unint64_t)v714 >= v776) {
              uint64_t v715 = v710;
            }
            else {
              uint64_t v715 = 0;
            }
            unint64_t v35 = &v714[v715];
            v27 += v291;
            --v712;
          }
          while (v712);
          v29 += v767;
          v27 += v766;
          unint64_t v716 = v772;
          unint64_t v717 = v772 + 16 * v770;
          if (v717 >= v765) {
            uint64_t v718 = v711;
          }
          else {
            uint64_t v718 = 0;
          }
          unint64_t v719 = v776;
          uint64_t v720 = (float32x4_t *)(v717 + 16 * v718);
          uint64_t v721 = v776 + 16 * v718 + 16 * v770;
          if (v765) {
            unint64_t v719 = v721;
          }
          unint64_t v776 = v719;
          if (v765)
          {
            unint64_t v716 = (unint64_t)v720;
            unint64_t v35 = v720;
          }
          else
          {
            v35 += v770;
          }
          unint64_t v772 = v716;
          --v773;
        }
        while (v713 != 1);
      }
      return;
    case 13:
      uint64_t v311 = v37;
      uint64_t v312 = v34;
      uint64_t v313 = -(v770 * v34);
      uint64_t v314 = -(uint64_t)(v768 * v312);
      uint64_t v315 = 16 * v37;
      uint64_t v316 = -(uint64_t)v33;
      a4.i32[0] = 1.0;
      unsigned int v317 = v771;
      while (1)
      {
        int v318 = v769;
        int v319 = v773;
        do
        {
          if (*v29)
          {
            float v320 = v25 ? *v317 : 1.0;
            float v321 = (float)*v29 * 0.0039216;
            a5.f32[0] = v321 * v320;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v322 = vmulq_n_f32(*v35, v321);
              if (v22)
              {
                a6.f32[0] = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_335;
                }
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              float32x4_t v323 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), *v27);
              float32x4_t v324 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v322);
              float32x4_t v325 = vmulq_f32(v323, v324);
              float32x4_t v326 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v325, v323, 1.0 - a5.f32[0]), (int8x16_t)v325);
              float32x4_t v327 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32(v326, v324, 1.0 - a6.f32[0]), (int8x16_t)v326);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              float32x4_t v322 = vsubq_f32(a6, v327);
              if (v22)
              {
LABEL_335:
                *uint64_t v27 = v322;
                *uint64_t v21 = a5.f32[0];
                goto LABEL_337;
              }
              *uint64_t v27 = v322;
            }
          }
LABEL_337:
          v29 += v311;
          float v328 = &v35[v311];
          float v329 = &v317[(int)v25];
          if ((unint64_t)v328 >= v776) {
            uint64_t v330 = v316;
          }
          else {
            uint64_t v330 = 0;
          }
          unsigned int v317 = &v329[v330];
          unint64_t v35 = &v328[v330];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v315);
          --v318;
        }
        while (v318);
        if (v765)
        {
          unint64_t v331 = v772 + 16 * v770;
          if (v331 >= v765) {
            uint64_t v332 = v314;
          }
          else {
            uint64_t v332 = 0;
          }
          uint64_t v333 = (uint64_t)&v771[v768 + v332];
          if (v331 >= v765) {
            uint64_t v334 = v313;
          }
          else {
            uint64_t v334 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v331 + 16 * v334);
          v776 += 16 * v334 + 16 * v770;
          v771 += v768 + v332;
          unint64_t v772 = (unint64_t)v35;
          unsigned int v317 = (float *)v333;
        }
        else
        {
          v35 += v770;
          v317 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v319 == 1) {
          return;
        }
      }
    case 14:
      uint64_t v335 = v37;
      uint64_t v336 = v34;
      uint64_t v337 = -(v770 * v34);
      uint64_t v338 = -(uint64_t)(v768 * v336);
      uint64_t v339 = 16 * v37;
      uint64_t v340 = -(uint64_t)v33;
      __asm { FMOV            V1.4S, #1.0 }
      unsigned int v346 = v771;
      while (1)
      {
        int v347 = v769;
        int v348 = v773;
        do
        {
          if (*v29)
          {
            float v349 = v25 ? *v346 : 1.0;
            float v350 = (float)*v29 * 0.0039216;
            a5.f32[0] = v350 * v349;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v351 = *v35;
              float32x4_t v352 = vmulq_n_f32(*v35, v350);
              if (v22)
              {
                v351.f32[0] = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_364;
                }
              }
              else
              {
                v351.i32[0] = 1.0;
              }
              float32x4_t v353 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v351.f32, 0), *v27);
              float32x4_t v354 = vmlaq_f32(v353, vsubq_f32(_Q1, v353), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v352));
              a5.f32[0] = (float)(a5.f32[0] + v351.f32[0]) - (float)(v351.f32[0] * a5.f32[0]);
              float32x4_t v352 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v354);
              if (v22)
              {
LABEL_364:
                *uint64_t v27 = v352;
                *uint64_t v21 = a5.f32[0];
                goto LABEL_366;
              }
              *uint64_t v27 = v352;
            }
          }
LABEL_366:
          v29 += v335;
          float32x2_t v355 = &v35[v335];
          float32x2_t v356 = &v346[(int)v25];
          if ((unint64_t)v355 >= v776) {
            uint64_t v357 = v340;
          }
          else {
            uint64_t v357 = 0;
          }
          unsigned int v346 = &v356[v357];
          unint64_t v35 = &v355[v357];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v339);
          --v347;
        }
        while (v347);
        if (v765)
        {
          unint64_t v358 = v772 + 16 * v770;
          if (v358 >= v765) {
            uint64_t v359 = v338;
          }
          else {
            uint64_t v359 = 0;
          }
          uint64_t v360 = (uint64_t)&v771[v768 + v359];
          if (v358 >= v765) {
            uint64_t v361 = v337;
          }
          else {
            uint64_t v361 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v358 + 16 * v361);
          v776 += 16 * v361 + 16 * v770;
          v771 += v768 + v359;
          unint64_t v772 = (unint64_t)v35;
          unsigned int v346 = (float *)v360;
        }
        else
        {
          v35 += v770;
          v346 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v348 == 1) {
          return;
        }
      }
    case 15:
      uint64_t v362 = v37;
      uint64_t v363 = (int)v25;
      float32x4_t v364 = v771;
      uint64_t v746 = -(v770 * v34);
      uint64_t v737 = -(uint64_t)(v768 * v34);
      uint64_t v365 = 4 * (int)v22;
      uint64_t v366 = 16 * v37;
      uint64_t v367 = -(uint64_t)v33;
      uint64_t v755 = v366;
      while (1)
      {
        int v368 = v769;
        do
        {
          if (*v29)
          {
            float v369 = v25 ? *v364 : 1.0;
            float v370 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v370 * v369;
            if ((float)(v370 * v369) > 0.0)
            {
              *(float *)&a9 = v370 * v35->f32[0];
              a8.f32[0] = v370 * v35->f32[1];
              float v371 = v370 * v35->f32[2];
              float v372 = v370 * v35->f32[3];
              if (v22)
              {
                float v373 = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_394;
                }
              }
              else
              {
                float v373 = 1.0;
              }
              PDAoverlayPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v373, *(double *)a8.i64, a9, a10, *(float *)&a9, a8.f32[0], v371, v372, *(float *)&a10);
              LODWORD(v22) = v775;
              a8.i32[0] = v777.i32[1];
              LODWORD(a9) = v777.i32[0];
              float v372 = v777.f32[3];
              float v371 = v777.f32[2];
              if (v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                uint64_t v366 = v755;
LABEL_394:
                v27->i32[0] = LODWORD(a9);
                v27->i32[1] = a8.i32[0];
                v27->f32[2] = v371;
                v27->f32[3] = v372;
                *uint64_t v21 = *(float *)&a10;
                goto LABEL_396;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = a8.i32[0];
              v27->f32[2] = v371;
              v27->f32[3] = v372;
              LODWORD(v25) = v774;
              uint64_t v366 = v755;
            }
          }
LABEL_396:
          v29 += v362;
          float v374 = &v35[v362];
          if ((unint64_t)v374 >= v776) {
            uint64_t v375 = v367;
          }
          else {
            uint64_t v375 = 0;
          }
          v364 += v363 + v375;
          unint64_t v35 = &v374[v375];
          uint64_t v21 = (float *)((char *)v21 + v365);
          uint64_t v27 = (float32x4_t *)((char *)v27 + v366);
          --v368;
        }
        while (v368);
        if (v765)
        {
          unint64_t v376 = v772 + 16 * v770;
          uint64_t v377 = v737;
          if (v376 < v765) {
            uint64_t v377 = 0;
          }
          float32x4_t v364 = &v771[v768 + v377];
          uint64_t v378 = v746;
          if (v376 < v765) {
            uint64_t v378 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v376 + 16 * v378);
          v776 += 16 * v378 + 16 * v770;
          v771 += v768 + v377;
          unint64_t v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v364 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773) {
          return;
        }
      }
    case 16:
      uint64_t v379 = v37;
      uint64_t v380 = v34;
      uint64_t v381 = -(v770 * v34);
      uint64_t v382 = -(uint64_t)(v768 * v380);
      uint64_t v383 = 16 * v37;
      uint64_t v384 = -(uint64_t)v33;
      a4.i32[0] = 1.0;
      float v385 = v771;
      while (1)
      {
        int v386 = v769;
        int v387 = v773;
        do
        {
          if (*v29)
          {
            float v388 = v25 ? *v385 : 1.0;
            float v389 = (float)*v29 * 0.0039216;
            a5.f32[0] = v389 * v388;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v390 = vmulq_n_f32(*v35, v389);
              if (v22)
              {
                a6.f32[0] = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_421;
                }
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              float32x4_t v391 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), *v27);
              float32x4_t v392 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v390);
              float32x4_t v393 = vmulq_n_f32(v391, a5.f32[0]);
              float32x4_t v394 = vmulq_n_f32(v392, a6.f32[0]);
              float32x4_t v395 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v393, v394), (int8x16_t)v394, (int8x16_t)v393);
              float32x4_t v396 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v395, v391, 1.0 - a5.f32[0]), (int8x16_t)v395);
              float32x4_t v397 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32(v396, v392, 1.0 - a6.f32[0]), (int8x16_t)v396);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              float32x4_t v390 = vsubq_f32(a6, v397);
              if (v22)
              {
LABEL_421:
                *uint64_t v27 = v390;
                *uint64_t v21 = a5.f32[0];
                goto LABEL_423;
              }
              *uint64_t v27 = v390;
            }
          }
LABEL_423:
          v29 += v379;
          long long v398 = &v35[v379];
          unint64_t v399 = &v385[(int)v25];
          if ((unint64_t)v398 >= v776) {
            uint64_t v400 = v384;
          }
          else {
            uint64_t v400 = 0;
          }
          float v385 = &v399[v400];
          unint64_t v35 = &v398[v400];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v383);
          --v386;
        }
        while (v386);
        if (v765)
        {
          unint64_t v401 = v772 + 16 * v770;
          if (v401 >= v765) {
            uint64_t v402 = v382;
          }
          else {
            uint64_t v402 = 0;
          }
          uint64_t v403 = (uint64_t)&v771[v768 + v402];
          if (v401 >= v765) {
            uint64_t v404 = v381;
          }
          else {
            uint64_t v404 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v401 + 16 * v404);
          v776 += 16 * v404 + 16 * v770;
          v771 += v768 + v402;
          unint64_t v772 = (unint64_t)v35;
          float v385 = (float *)v403;
        }
        else
        {
          v35 += v770;
          v385 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v387 == 1) {
          return;
        }
      }
    case 17:
      uint64_t v405 = v37;
      uint64_t v406 = v34;
      uint64_t v407 = -(v770 * v34);
      uint64_t v408 = -(uint64_t)(v768 * v406);
      uint64_t v409 = 16 * v37;
      uint64_t v410 = -(uint64_t)v33;
      a4.i32[0] = 1.0;
      uint64_t v411 = v771;
      while (1)
      {
        int v412 = v769;
        int v413 = v773;
        do
        {
          if (*v29)
          {
            float v414 = v25 ? *v411 : 1.0;
            float v415 = (float)*v29 * 0.0039216;
            a5.f32[0] = v415 * v414;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v416 = vmulq_n_f32(*v35, v415);
              if (v22)
              {
                a6.f32[0] = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_450;
                }
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              float32x4_t v417 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), *v27);
              float32x4_t v418 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v416);
              float32x4_t v419 = vmulq_n_f32(v417, a5.f32[0]);
              float32x4_t v420 = vmulq_n_f32(v418, a6.f32[0]);
              float32x4_t v421 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v420, v419), (int8x16_t)v420, (int8x16_t)v419);
              float32x4_t v422 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v421, v417, 1.0 - a5.f32[0]), (int8x16_t)v421);
              float32x4_t v423 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32(v422, v418, 1.0 - a6.f32[0]), (int8x16_t)v422);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              float32x4_t v416 = vsubq_f32(a6, v423);
              if (v22)
              {
LABEL_450:
                *uint64_t v27 = v416;
                *uint64_t v21 = a5.f32[0];
                goto LABEL_452;
              }
              *uint64_t v27 = v416;
            }
          }
LABEL_452:
          v29 += v405;
          uint64_t v424 = &v35[v405];
          uint64_t v425 = &v411[(int)v25];
          if ((unint64_t)v424 >= v776) {
            uint64_t v426 = v410;
          }
          else {
            uint64_t v426 = 0;
          }
          uint64_t v411 = &v425[v426];
          unint64_t v35 = &v424[v426];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v409);
          --v412;
        }
        while (v412);
        if (v765)
        {
          unint64_t v427 = v772 + 16 * v770;
          if (v427 >= v765) {
            uint64_t v428 = v408;
          }
          else {
            uint64_t v428 = 0;
          }
          uint64_t v429 = (uint64_t)&v771[v768 + v428];
          if (v427 >= v765) {
            uint64_t v430 = v407;
          }
          else {
            uint64_t v430 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v427 + 16 * v430);
          v776 += 16 * v430 + 16 * v770;
          v771 += v768 + v428;
          unint64_t v772 = (unint64_t)v35;
          uint64_t v411 = (float *)v429;
        }
        else
        {
          v35 += v770;
          v411 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v413 == 1) {
          return;
        }
      }
    case 18:
      uint64_t v431 = v37;
      uint64_t v432 = (int)v25;
      uint64_t v433 = v771;
      uint64_t v747 = -(v770 * v34);
      uint64_t v738 = -(uint64_t)(v768 * v34);
      uint64_t v434 = 4 * (int)v22;
      uint64_t v435 = 16 * v37;
      uint64_t v436 = -(uint64_t)v33;
      uint64_t v756 = v435;
      while (1)
      {
        int v437 = v769;
        do
        {
          if (*v29)
          {
            float v438 = v25 ? *v433 : 1.0;
            float v439 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v439 * v438;
            if ((float)(v439 * v438) > 0.0)
            {
              a8.f32[0] = v439 * v35->f32[0];
              *(float *)&a9 = v439 * v35->f32[1];
              float v440 = v439 * v35->f32[2];
              float v441 = v439 * v35->f32[3];
              if (v22)
              {
                float v442 = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_480;
                }
              }
              else
              {
                float v442 = 1.0;
              }
              PDAcolordodgePDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v442, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v440, v441, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              float v441 = v777.f32[3];
              float v440 = v777.f32[2];
              if (v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                uint64_t v435 = v756;
LABEL_480:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v440;
                v27->f32[3] = v441;
                *uint64_t v21 = *(float *)&a10;
                goto LABEL_482;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v440;
              v27->f32[3] = v441;
              LODWORD(v25) = v774;
              uint64_t v435 = v756;
            }
          }
LABEL_482:
          v29 += v431;
          float32x4_t v443 = &v35[v431];
          if ((unint64_t)v443 >= v776) {
            uint64_t v444 = v436;
          }
          else {
            uint64_t v444 = 0;
          }
          v433 += v432 + v444;
          unint64_t v35 = &v443[v444];
          uint64_t v21 = (float *)((char *)v21 + v434);
          uint64_t v27 = (float32x4_t *)((char *)v27 + v435);
          --v437;
        }
        while (v437);
        if (v765)
        {
          unint64_t v445 = v772 + 16 * v770;
          uint64_t v446 = v738;
          if (v445 < v765) {
            uint64_t v446 = 0;
          }
          uint64_t v433 = &v771[v768 + v446];
          uint64_t v447 = v747;
          if (v445 < v765) {
            uint64_t v447 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v445 + 16 * v447);
          v776 += 16 * v447 + 16 * v770;
          v771 += v768 + v446;
          unint64_t v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v433 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773) {
          return;
        }
      }
    case 19:
      uint64_t v448 = v37;
      uint64_t v449 = (int)v25;
      int v450 = v771;
      uint64_t v748 = -(v770 * v34);
      uint64_t v739 = -(uint64_t)(v768 * v34);
      uint64_t v451 = 4 * (int)v22;
      uint64_t v452 = 16 * v37;
      uint64_t v453 = -(uint64_t)v33;
      uint64_t v757 = v452;
      while (1)
      {
        int v454 = v769;
        do
        {
          if (*v29)
          {
            float v455 = v25 ? *v450 : 1.0;
            float v456 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v456 * v455;
            if ((float)(v456 * v455) > 0.0)
            {
              a8.f32[0] = v456 * v35->f32[0];
              *(float *)&a9 = v456 * v35->f32[1];
              float v457 = v456 * v35->f32[2];
              float v458 = v456 * v35->f32[3];
              if (v22)
              {
                float v459 = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_508;
                }
              }
              else
              {
                float v459 = 1.0;
              }
              PDAcolorburnPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v459, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v457, v458, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              float v458 = v777.f32[3];
              float v457 = v777.f32[2];
              if (v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                uint64_t v452 = v757;
LABEL_508:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v457;
                v27->f32[3] = v458;
                *uint64_t v21 = *(float *)&a10;
                goto LABEL_510;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v457;
              v27->f32[3] = v458;
              LODWORD(v25) = v774;
              uint64_t v452 = v757;
            }
          }
LABEL_510:
          v29 += v448;
          unint64_t v460 = &v35[v448];
          if ((unint64_t)v460 >= v776) {
            uint64_t v461 = v453;
          }
          else {
            uint64_t v461 = 0;
          }
          v450 += v449 + v461;
          unint64_t v35 = &v460[v461];
          uint64_t v21 = (float *)((char *)v21 + v451);
          uint64_t v27 = (float32x4_t *)((char *)v27 + v452);
          --v454;
        }
        while (v454);
        if (v765)
        {
          unint64_t v462 = v772 + 16 * v770;
          uint64_t v463 = v739;
          if (v462 < v765) {
            uint64_t v463 = 0;
          }
          int v450 = &v771[v768 + v463];
          uint64_t v464 = v748;
          if (v462 < v765) {
            uint64_t v464 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v462 + 16 * v464);
          v776 += 16 * v464 + 16 * v770;
          v771 += v768 + v463;
          unint64_t v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v450 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773) {
          return;
        }
      }
    case 20:
      uint64_t v465 = v37;
      uint64_t v466 = (int)v25;
      float v467 = v771;
      uint64_t v749 = -(v770 * v34);
      uint64_t v740 = -(uint64_t)(v768 * v34);
      uint64_t v468 = 4 * (int)v22;
      uint64_t v469 = 16 * v37;
      uint64_t v470 = -(uint64_t)v33;
      uint64_t v758 = v469;
      while (1)
      {
        int v471 = v769;
        do
        {
          if (*v29)
          {
            float v472 = v25 ? *v467 : 1.0;
            float v473 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v473 * v472;
            if ((float)(v473 * v472) > 0.0)
            {
              a8.f32[0] = v473 * v35->f32[0];
              *(float *)&a9 = v473 * v35->f32[1];
              float v474 = v473 * v35->f32[2];
              float v475 = v473 * v35->f32[3];
              if (v22)
              {
                *(float *)&a7 = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_536;
                }
              }
              else
              {
                LODWORD(a7) = 1.0;
              }
              a3.i32[0] = v27->i32[0];
              a3 = (float32x2_t)PDAsoftlightPDA(&v777, a3, v27->f32[1], v27->f32[2], v27->f32[3], a7, *(int32x2_t *)a8.f32, a9, a10, a2, v23, v25, v22, a14, a15, a16, (float32x2_t)__PAIR64__(LODWORD(a9), a8.u32[0]), v474, v475,
                                  *(float *)&a10).u64[0];
              uint64_t v22 = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              float v475 = v777.f32[3];
              float v474 = v777.f32[2];
              if (v775)
              {
                *(float *)&a10 = v778;
                uint64_t v25 = v774;
                uint64_t v469 = v758;
LABEL_536:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v474;
                v27->f32[3] = v475;
                *uint64_t v21 = *(float *)&a10;
                goto LABEL_538;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v474;
              v27->f32[3] = v475;
              uint64_t v25 = v774;
              uint64_t v469 = v758;
            }
          }
LABEL_538:
          v29 += v465;
          uint64_t v476 = &v35[v465];
          if ((unint64_t)v476 >= v776) {
            uint64_t v477 = v470;
          }
          else {
            uint64_t v477 = 0;
          }
          v467 += v466 + v477;
          unint64_t v35 = &v476[v477];
          uint64_t v21 = (float *)((char *)v21 + v468);
          uint64_t v27 = (float32x4_t *)((char *)v27 + v469);
          --v471;
        }
        while (v471);
        if (v765)
        {
          unint64_t v478 = v772 + 16 * v770;
          uint64_t v479 = v740;
          if (v478 < v765) {
            uint64_t v479 = 0;
          }
          float v467 = &v771[v768 + v479];
          uint64_t v480 = v749;
          if (v478 < v765) {
            uint64_t v480 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v478 + 16 * v480);
          v776 += 16 * v480 + 16 * v770;
          v771 += v768 + v479;
          unint64_t v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v467 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773) {
          return;
        }
      }
    case 21:
      uint64_t v481 = v37;
      uint64_t v482 = (int)v25;
      uint64_t v483 = v771;
      uint64_t v750 = -(v770 * v34);
      uint64_t v741 = -(uint64_t)(v768 * v34);
      uint64_t v484 = 4 * (int)v22;
      uint64_t v485 = 16 * v37;
      uint64_t v486 = -(uint64_t)v33;
      uint64_t v759 = v485;
      while (1)
      {
        int v487 = v769;
        do
        {
          if (*v29)
          {
            float v488 = v25 ? *v483 : 1.0;
            float v489 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v489 * v488;
            if ((float)(v489 * v488) > 0.0)
            {
              a8.f32[0] = v489 * v35->f32[0];
              *(float *)&a9 = v489 * v35->f32[1];
              float v490 = v489 * v35->f32[2];
              float v491 = v489 * v35->f32[3];
              if (v22)
              {
                float v492 = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_564;
                }
              }
              else
              {
                float v492 = 1.0;
              }
              PDAhardlightPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v492, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v490, v491, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              float v491 = v777.f32[3];
              float v490 = v777.f32[2];
              if (v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                uint64_t v485 = v759;
LABEL_564:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v490;
                v27->f32[3] = v491;
                *uint64_t v21 = *(float *)&a10;
                goto LABEL_566;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v490;
              v27->f32[3] = v491;
              LODWORD(v25) = v774;
              uint64_t v485 = v759;
            }
          }
LABEL_566:
          v29 += v481;
          unint64_t v493 = &v35[v481];
          if ((unint64_t)v493 >= v776) {
            uint64_t v494 = v486;
          }
          else {
            uint64_t v494 = 0;
          }
          v483 += v482 + v494;
          unint64_t v35 = &v493[v494];
          uint64_t v21 = (float *)((char *)v21 + v484);
          uint64_t v27 = (float32x4_t *)((char *)v27 + v485);
          --v487;
        }
        while (v487);
        if (v765)
        {
          unint64_t v495 = v772 + 16 * v770;
          uint64_t v496 = v741;
          if (v495 < v765) {
            uint64_t v496 = 0;
          }
          uint64_t v483 = &v771[v768 + v496];
          uint64_t v497 = v750;
          if (v495 < v765) {
            uint64_t v497 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v495 + 16 * v497);
          v776 += 16 * v497 + 16 * v770;
          v771 += v768 + v496;
          unint64_t v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v483 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773) {
          return;
        }
      }
    case 22:
      uint64_t v498 = v37;
      uint64_t v499 = v34;
      uint64_t v500 = -(v770 * v34);
      uint64_t v501 = -(uint64_t)(v768 * v499);
      uint64_t v502 = 16 * v37;
      uint64_t v503 = -(uint64_t)v33;
      unint64_t v504 = v771;
      while (1)
      {
        int v505 = v769;
        int v506 = v773;
        do
        {
          if (*v29)
          {
            float v507 = v25 ? *v504 : 1.0;
            float v508 = (float)*v29 * 0.0039216;
            a4.f32[0] = v508 * v507;
            if (a4.f32[0] > 0.0)
            {
              float32x4_t v509 = *v35;
              float32x4_t v510 = vmulq_n_f32(*v35, v508);
              if (v22)
              {
                v509.f32[0] = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_592;
                }
              }
              else
              {
                v509.i32[0] = 1.0;
              }
              *(float *)&a7 = (float)(v509.f32[0] + a4.f32[0]) - (float)(v509.f32[0] * a4.f32[0]);
              float32x4_t v511 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v509.f32, 0), *v27);
              float32x4_t v512 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), v510);
              float32x4_t v513 = vaddq_f32(v511, v512);
              float32x4_t v514 = vmulq_n_f32(v511, a4.f32[0]);
              float32x4_t v515 = vmulq_n_f32(v512, v509.f32[0]);
              float32x4_t v516 = vsubq_f32(v513, v514);
              float32x4_t v517 = vsubq_f32(v514, v515);
              a4 = vaddq_f32(vsubq_f32(v516, v515), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v517), (int8x16_t)vnegq_f32(v517), (int8x16_t)v517));
              float32x4_t v510 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0), a4);
              if (v22)
              {
                a4.i32[0] = LODWORD(a7);
LABEL_592:
                *uint64_t v27 = v510;
                *uint64_t v21 = a4.f32[0];
                goto LABEL_594;
              }
              *uint64_t v27 = v510;
            }
          }
LABEL_594:
          v29 += v498;
          float32x4_t v518 = &v35[v498];
          unint64_t v519 = &v504[(int)v25];
          if ((unint64_t)v518 >= v776) {
            uint64_t v520 = v503;
          }
          else {
            uint64_t v520 = 0;
          }
          unint64_t v504 = &v519[v520];
          unint64_t v35 = &v518[v520];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v502);
          --v505;
        }
        while (v505);
        if (v765)
        {
          unint64_t v521 = v772 + 16 * v770;
          if (v521 >= v765) {
            uint64_t v522 = v501;
          }
          else {
            uint64_t v522 = 0;
          }
          uint64_t v523 = (uint64_t)&v771[v768 + v522];
          if (v521 >= v765) {
            uint64_t v524 = v500;
          }
          else {
            uint64_t v524 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v521 + 16 * v524);
          v776 += 16 * v524 + 16 * v770;
          v771 += v768 + v522;
          unint64_t v772 = (unint64_t)v35;
          unint64_t v504 = (float *)v523;
        }
        else
        {
          v35 += v770;
          v504 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v506 == 1) {
          return;
        }
      }
    case 23:
      uint64_t v525 = v37;
      uint64_t v526 = v34;
      uint64_t v527 = -(v770 * v34);
      uint64_t v528 = -(uint64_t)(v768 * v526);
      uint64_t v529 = 16 * v37;
      uint64_t v530 = -(uint64_t)v33;
      v531.i64[0] = 0xC0000000C0000000;
      v531.i64[1] = 0xC0000000C0000000;
      unint64_t v532 = v771;
      while (1)
      {
        int v533 = v769;
        int v534 = v773;
        do
        {
          if (*v29)
          {
            float v535 = v25 ? *v532 : 1.0;
            float v536 = (float)*v29 * 0.0039216;
            a5.f32[0] = v536 * v535;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v537 = *v35;
              float32x4_t v538 = vmulq_n_f32(*v35, v536);
              if (v22)
              {
                a8.f32[0] = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_622;
                }
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              v537.f32[0] = (float)(a8.f32[0] + a5.f32[0]) - (float)(a8.f32[0] * a5.f32[0]);
              a8 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0), *v27);
              float32x4_t v539 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v538);
              float32x4_t v540 = vmlaq_f32(vaddq_f32(a8, v539), v531, vmulq_f32(v539, a8));
              a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v537.f32, 0);
              float32x4_t v538 = vsubq_f32(a5, v540);
              if (v22)
              {
                a5.i32[0] = v537.i32[0];
LABEL_622:
                *uint64_t v27 = v538;
                *uint64_t v21 = a5.f32[0];
                goto LABEL_624;
              }
              *uint64_t v27 = v538;
            }
          }
LABEL_624:
          v29 += v525;
          unint64_t v541 = &v35[v525];
          unint64_t v542 = &v532[(int)v25];
          if ((unint64_t)v541 >= v776) {
            uint64_t v543 = v530;
          }
          else {
            uint64_t v543 = 0;
          }
          unint64_t v532 = &v542[v543];
          unint64_t v35 = &v541[v543];
          v21 += (int)v22;
          uint64_t v27 = (float32x4_t *)((char *)v27 + v529);
          --v533;
        }
        while (v533);
        if (v765)
        {
          unint64_t v544 = v772 + 16 * v770;
          if (v544 >= v765) {
            uint64_t v545 = v528;
          }
          else {
            uint64_t v545 = 0;
          }
          uint64_t v546 = (uint64_t)&v771[v768 + v545];
          if (v544 >= v765) {
            uint64_t v547 = v527;
          }
          else {
            uint64_t v547 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v544 + 16 * v547);
          v776 += 16 * v547 + 16 * v770;
          v771 += v768 + v545;
          unint64_t v772 = (unint64_t)v35;
          unint64_t v532 = (float *)v546;
        }
        else
        {
          v35 += v770;
          v532 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v534 == 1) {
          return;
        }
      }
    case 24:
      uint64_t v548 = v37;
      uint64_t v549 = (int)v25;
      uint64_t v550 = v771;
      uint64_t v751 = -(v770 * v34);
      uint64_t v742 = -(uint64_t)(v768 * v34);
      uint64_t v551 = 4 * (int)v22;
      uint64_t v552 = 16 * v37;
      uint64_t v553 = -(uint64_t)v33;
      uint64_t v760 = v552;
      while (1)
      {
        int v554 = v769;
        do
        {
          if (*v29)
          {
            float v555 = v25 ? *v550 : 1.0;
            float v556 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v556 * v555;
            if ((float)(v556 * v555) > 0.0)
            {
              a8.f32[0] = v556 * v35->f32[0];
              *(float *)&a9 = v556 * v35->f32[1];
              float v557 = v556 * v35->f32[2];
              float v558 = v556 * v35->f32[3];
              if (v22)
              {
                float v559 = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_652;
                }
              }
              else
              {
                float v559 = 1.0;
              }
              PDAhuePDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v559, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v557, v558, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              float v558 = v777.f32[3];
              float v557 = v777.f32[2];
              if (v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                uint64_t v552 = v760;
LABEL_652:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v557;
                v27->f32[3] = v558;
                *uint64_t v21 = *(float *)&a10;
                goto LABEL_654;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v557;
              v27->f32[3] = v558;
              LODWORD(v25) = v774;
              uint64_t v552 = v760;
            }
          }
LABEL_654:
          v29 += v548;
          uint64_t v560 = &v35[v548];
          if ((unint64_t)v560 >= v776) {
            uint64_t v561 = v553;
          }
          else {
            uint64_t v561 = 0;
          }
          v550 += v549 + v561;
          unint64_t v35 = &v560[v561];
          uint64_t v21 = (float *)((char *)v21 + v551);
          uint64_t v27 = (float32x4_t *)((char *)v27 + v552);
          --v554;
        }
        while (v554);
        if (v765)
        {
          unint64_t v562 = v772 + 16 * v770;
          uint64_t v563 = v742;
          if (v562 < v765) {
            uint64_t v563 = 0;
          }
          uint64_t v550 = &v771[v768 + v563];
          uint64_t v564 = v751;
          if (v562 < v765) {
            uint64_t v564 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v562 + 16 * v564);
          v776 += 16 * v564 + 16 * v770;
          v771 += v768 + v563;
          unint64_t v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v550 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773) {
          return;
        }
      }
    case 25:
      uint64_t v565 = v37;
      uint64_t v566 = (int)v25;
      uint64_t v567 = v771;
      uint64_t v752 = -(v770 * v34);
      uint64_t v743 = -(uint64_t)(v768 * v34);
      uint64_t v568 = 4 * (int)v22;
      uint64_t v569 = 16 * v37;
      uint64_t v570 = -(uint64_t)v33;
      uint64_t v761 = v570;
      while (1)
      {
        int v571 = v769;
        do
        {
          if (*v29)
          {
            float v572 = v25 ? *v567 : 1.0;
            float v573 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v573 * v572;
            if ((float)(v573 * v572) > 0.0)
            {
              a8.f32[0] = v573 * v35->f32[0];
              *(float *)&a9 = v573 * v35->f32[1];
              float v574 = v573 * v35->f32[2];
              float v575 = v573 * v35->f32[3];
              if (v22)
              {
                float v576 = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_680;
                }
              }
              else
              {
                float v576 = 1.0;
              }
              PDAsaturationPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v576, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v574, v575, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              float v575 = v777.f32[3];
              float v574 = v777.f32[2];
              if (v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                uint64_t v570 = v761;
LABEL_680:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v574;
                v27->f32[3] = v575;
                *uint64_t v21 = *(float *)&a10;
                goto LABEL_682;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v574;
              v27->f32[3] = v575;
              LODWORD(v25) = v774;
              uint64_t v570 = v761;
            }
          }
LABEL_682:
          v29 += v565;
          unint64_t v577 = &v35[v565];
          if ((unint64_t)v577 >= v776) {
            uint64_t v578 = v570;
          }
          else {
            uint64_t v578 = 0;
          }
          v567 += v566 + v578;
          unint64_t v35 = &v577[v578];
          uint64_t v21 = (float *)((char *)v21 + v568);
          uint64_t v27 = (float32x4_t *)((char *)v27 + v569);
          --v571;
        }
        while (v571);
        if (v765)
        {
          unint64_t v579 = v772 + 16 * v770;
          uint64_t v580 = v743;
          if (v579 < v765) {
            uint64_t v580 = 0;
          }
          uint64_t v567 = &v771[v768 + v580];
          uint64_t v581 = v752;
          if (v579 < v765) {
            uint64_t v581 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v579 + 16 * v581);
          v776 += 16 * v581 + 16 * v770;
          v771 += v768 + v580;
          unint64_t v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v567 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773) {
          return;
        }
      }
    case 26:
      uint64_t v582 = v37;
      uint64_t v583 = (int)v25;
      uint64_t v584 = v771;
      uint64_t v753 = -(v770 * v34);
      uint64_t v744 = -(uint64_t)(v768 * v34);
      uint64_t v585 = 4 * (int)v22;
      uint64_t v586 = 16 * v37;
      uint64_t v587 = -(uint64_t)v33;
      uint64_t v762 = v587;
      while (1)
      {
        int v588 = v769;
        do
        {
          if (*v29)
          {
            float v589 = v25 ? *v584 : 1.0;
            float v590 = (float)*v29 * 0.0039216;
            float v591 = v590 * v589;
            if ((float)(v590 * v589) > 0.0)
            {
              float v592 = v590 * v35->f32[0];
              float v593 = v590 * v35->f32[1];
              float v594 = v590 * v35->f32[2];
              float v595 = v590 * v35->f32[3];
              if (v22)
              {
                a8.f32[0] = *v21;
                if (*v21 <= 0.0) {
                  goto LABEL_708;
                }
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              LODWORD(a9) = v27->i32[0];
              LODWORD(a10) = v27->i32[3];
              PDAluminosityPDA(v777.f32, v592, v593, v594, v595, v591, *(double *)a8.i64, a9, a10, v27->f32[0], COERCE_FLOAT(*(uint64_t *)((char *)v27->i64 + 4)), COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v27->i64 + 4))), *(float *)&a10, a8.f32[0]);
              LODWORD(v22) = v775;
              float v593 = v777.f32[1];
              float v592 = v777.f32[0];
              float v595 = v777.f32[3];
              float v594 = v777.f32[2];
              if (v775)
              {
                float v591 = v778;
                LODWORD(v25) = v774;
                uint64_t v587 = v762;
LABEL_708:
                v27->f32[0] = v592;
                v27->f32[1] = v593;
                v27->f32[2] = v594;
                v27->f32[3] = v595;
                *uint64_t v21 = v591;
                goto LABEL_710;
              }
              v27->i32[0] = v777.i32[0];
              v27->f32[1] = v593;
              v27->f32[2] = v594;
              v27->f32[3] = v595;
              LODWORD(v25) = v774;
              uint64_t v587 = v762;
            }
          }
LABEL_710:
          v29 += v582;
          float32x4_t v596 = &v35[v582];
          if ((unint64_t)v596 >= v776) {
            uint64_t v597 = v587;
          }
          else {
            uint64_t v597 = 0;
          }
          v584 += v583 + v597;
          unint64_t v35 = &v596[v597];
          uint64_t v21 = (float *)((char *)v21 + v585);
          uint64_t v27 = (float32x4_t *)((char *)v27 + v586);
          --v588;
        }
        while (v588);
        if (v765)
        {
          unint64_t v598 = v772 + 16 * v770;
          uint64_t v599 = v744;
          if (v598 < v765) {
            uint64_t v599 = 0;
          }
          uint64_t v584 = &v771[v768 + v599];
          uint64_t v600 = v753;
          if (v598 < v765) {
            uint64_t v600 = 0;
          }
          unint64_t v35 = (float32x4_t *)(v598 + 16 * v600);
          v776 += 16 * v600 + 16 * v770;
          v771 += v768 + v599;
          unint64_t v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v584 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773) {
          return;
        }
      }
    case 27:
      uint64_t v601 = v37;
      uint64_t v602 = (int)v25;
      int v603 = v771;
      uint64_t v754 = -(v770 * v34);
      uint64_t v745 = -(uint64_t)(v768 * v34);
      uint64_t v604 = 4 * (int)v22;
      uint64_t v605 = 16 * v37;
      uint64_t v606 = -(uint64_t)v33;
      uint64_t v763 = v606;
      break;
    default:
      return;
  }
  do
  {
    int v607 = v769;
    do
    {
      if (*v29)
      {
        float v608 = v25 ? *v603 : 1.0;
        float v609 = (float)*v29 * 0.0039216;
        *(float *)&a10 = v609 * v608;
        if ((float)(v609 * v608) > 0.0)
        {
          a8.f32[0] = v609 * v35->f32[0];
          *(float *)&a9 = v609 * v35->f32[1];
          float v610 = v609 * v35->f32[2];
          float v611 = v609 * v35->f32[3];
          if (v22)
          {
            float v612 = *v21;
            if (*v21 <= 0.0) {
              goto LABEL_736;
            }
          }
          else
          {
            float v612 = 1.0;
          }
          PDAluminosityPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v612, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v610, v611, *(float *)&a10);
          LODWORD(v22) = v775;
          LODWORD(a9) = v777.i32[1];
          a8.i32[0] = v777.i32[0];
          float v611 = v777.f32[3];
          float v610 = v777.f32[2];
          if (v775)
          {
            *(float *)&a10 = v778;
            LODWORD(v25) = v774;
            uint64_t v606 = v763;
LABEL_736:
            v27->i32[0] = a8.i32[0];
            v27->i32[1] = LODWORD(a9);
            v27->f32[2] = v610;
            v27->f32[3] = v611;
            *uint64_t v21 = *(float *)&a10;
            goto LABEL_738;
          }
          v27->i32[0] = v777.i32[0];
          v27->i32[1] = LODWORD(a9);
          v27->f32[2] = v610;
          v27->f32[3] = v611;
          LODWORD(v25) = v774;
          uint64_t v606 = v763;
        }
      }
LABEL_738:
      v29 += v601;
      unint64_t v613 = &v35[v601];
      if ((unint64_t)v613 >= v776) {
        uint64_t v614 = v606;
      }
      else {
        uint64_t v614 = 0;
      }
      v603 += v602 + v614;
      unint64_t v35 = &v613[v614];
      uint64_t v21 = (float *)((char *)v21 + v604);
      uint64_t v27 = (float32x4_t *)((char *)v27 + v605);
      --v607;
    }
    while (v607);
    if (v765)
    {
      unint64_t v615 = v772 + 16 * v770;
      uint64_t v616 = v745;
      if (v615 < v765) {
        uint64_t v616 = 0;
      }
      int v603 = &v771[v768 + v616];
      uint64_t v617 = v754;
      if (v615 < v765) {
        uint64_t v617 = 0;
      }
      unint64_t v35 = (float32x4_t *)(v615 + 16 * v617);
      v776 += 16 * v617 + 16 * v770;
      v771 += v768 + v616;
      unint64_t v772 = (unint64_t)v35;
    }
    else
    {
      v35 += v770;
      v603 += v768;
    }
    v29 += v767;
    v27 += v766;
    v21 += v764;
    --v773;
  }
  while (v773);
}

uint64_t CMYKf_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (int *)*a1;
  memset(v38, 0, 512);
  if (*((void *)a2 + 12)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(float *)(a3 + 8) >= 1.0;
  }
  int v8 = *(_DWORD *)(*((void *)v6 + 7) + 16 * *a2 + 8 * v7 + 4 * (*((void *)a2 + 6) == 0));
  if (v8 > 28) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v32, (uint64_t)v38) < 1) {
    return 0xFFFFFFFFLL;
  }
  int v18 = *v6;
  unsigned int v19 = *(_DWORD *)a3;
  unsigned int v33 = v19;
  int v34 = v18;
  if (v19 != 538985509)
  {
    unsigned int v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (v20)
    {
      if (v20 > 0xB)
      {
LABEL_20:
        int v22 = 255;
        char v21 = 1;
      }
      else
      {
        char v21 = 0;
        int v22 = 0;
        switch(v20)
        {
          case 2u:
            if (*((void *)a2 + 12)) {
              goto LABEL_20;
            }
            char v21 = 0;
            int v22 = 16;
            break;
          case 5u:
            char v21 = 0;
            int v22 = 24;
            break;
          case 6u:
            break;
          case 7u:
            char v21 = 0;
            int v22 = 32;
            break;
          case 8u:
            char v21 = 0;
            int v22 = 8;
            break;
          case 9u:
            char v21 = 0;
            int v22 = 40;
            break;
          default:
            goto LABEL_20;
        }
      }
      uint64_t v23 = CMYKF_image_sample;
      unint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYKF_image_sample[2 * v20 + 2];
      if (v32)
      {
LABEL_29:
        unsigned int v33 = *v23;
        if ((v21 & 1) == 0 && (v8 - 1) <= 1 && (v36 & 7) == 3 && (a2[2] == 5 || !a2[2]) && v20 <= 0xB)
        {
          HIDWORD(v25) = v22;
          LODWORD(v25) = v22;
          switch((v25 >> 3))
          {
            case 0u:
              unsigned int v33 = *(_DWORD *)a3;
              unint64_t v26 = CMYKf_image_mark_RGB32;
              goto LABEL_52;
            case 1u:
              unsigned int v33 = *(_DWORD *)a3;
              uint64_t v27 = CMYKf_image_mark_RGB32;
              goto LABEL_54;
            case 2u:
              unsigned int v33 = *(_DWORD *)a3;
              unint64_t v26 = (uint64_t (*)(uint64_t, int *, int, int, int, int))CMYKf_image_mark_W8;
              goto LABEL_52;
            case 3u:
              unsigned int v33 = *(_DWORD *)a3;
              unint64_t v26 = CMYKf_image_mark_RGB24;
              goto LABEL_52;
            case 4u:
              unsigned int v33 = *(_DWORD *)a3;
              unint64_t v26 = CMYKf_image_mark_rgb32;
LABEL_52:
              uint64_t v28 = v26;
              uint64_t v29 = (uint64_t)a2;
              int v30 = v8;
              int v31 = 0;
              break;
            case 5u:
              unsigned int v33 = *(_DWORD *)a3;
              uint64_t v27 = CMYKf_image_mark_rgb32;
LABEL_54:
              uint64_t v28 = v27;
              uint64_t v29 = (uint64_t)a2;
              int v30 = v8;
              int v31 = 8;
              break;
            default:
              goto LABEL_37;
          }
          CMYKf_image_mark_image(v29, (uint64_t)&v32, v30, v31, (void (*)(uint64_t, _DWORD *))v28);
          return 1;
        }
        goto LABEL_37;
      }
      if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) > 8)
      {
        if ((*(_DWORD *)a3 & 0x3F0000u) >> 16 > 0x10) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        uint64_t v23 = CMYK8_image_sample;
        unint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYK8_image_sample[2 * v20 + 2];
        if (v32)
        {
          int v24 = 8;
LABEL_28:
          int v35 = v24;
          goto LABEL_29;
        }
      }
      uint64_t v23 = CMYK16_image_sample;
      unint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYK16_image_sample[2 * v20 + 2];
      if (v32)
      {
        int v24 = 16;
        goto LABEL_28;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!v37 && (~v36 & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(void *)(a3 + 24))
    {
      if ((v36 & 4) != 0)
      {
        v17.n128_u64[0] = *(void *)(a3 + 32);
        *((void *)a2 + ++*(_DWORD *)(result + 8) = v17.n128_u64[0];
      }
      CMYKf_mark_inner(*(void *)(*a1 + 56), v17);
      return 1;
    }
  }
  unint64_t v32 = CMYKf_sample_CMYKf_inner;
LABEL_37:
  CMYKf_image_mark((uint64_t)a2, (uint64_t)&v32, v8, v17);
  return 1;
}

void CMYKf_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(uint64_t, _DWORD *))
{
  v56[0] = a3;
  v56[1] = a4;
  _OWORD v56[2] = *(_DWORD *)(a2 + 184);
  unint64_t v8 = (unint64_t)*(int *)(a1 + 28) >> 4;
  unint64_t v58 = v8;
  if (*(void *)(a1 + 48)) {
    unint64_t v9 = (unint64_t)*(int *)(a1 + 32) >> 2;
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v60 = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  if (v10)
  {
    unsigned int v12 = HIBYTE(v11);
    unint64_t v13 = *(int *)(a2 + 24);
    uint64_t v14 = (uint64_t *)(a2 + 104);
    uint64_t v15 = (uint64_t *)(a2 + 72);
    uint64_t v16 = (uint64_t *)(a2 + 88);
  }
  else
  {
    unsigned int v12 = BYTE2(v11);
    unint64_t v13 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    uint64_t v14 = (uint64_t *)(a2 + 96);
    uint64_t v15 = (uint64_t *)(a2 + 64);
    uint64_t v16 = (uint64_t *)(a2 + 80);
    uint64_t v10 = *(void *)(a2 + 112);
  }
  uint64_t v17 = *v16;
  uint64_t v18 = *v15;
  uint64_t v19 = *v14;
  char v20 = v12;
  uint64_t v63 = v12;
  uint64_t v61 = v19;
  unint64_t v71 = v13;
  uint64_t v69 = v17;
  uint64_t v67 = v18;
  uint64_t v65 = v10;
  uint64_t v21 = *(void *)(a2 + 128);
  uint64_t v54 = v18;
  uint64_t v55 = v17;
  if (v21)
  {
    unsigned int v22 = BYTE2(v11);
    unint64_t v23 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    int v24 = (uint64_t *)(a2 + 96);
    unint64_t v25 = (uint64_t *)(a2 + 64);
    unint64_t v26 = (uint64_t *)(a2 + 80);
  }
  else
  {
    unsigned int v22 = HIBYTE(v11);
    unint64_t v23 = *(int *)(a2 + 24);
    int v24 = (uint64_t *)(a2 + 104);
    unint64_t v25 = (uint64_t *)(a2 + 72);
    unint64_t v26 = (uint64_t *)(a2 + 88);
    uint64_t v21 = *(void *)(a2 + 136);
  }
  uint64_t v27 = *v26;
  uint64_t v28 = *v25;
  uint64_t v29 = *v24;
  uint64_t v64 = v22;
  uint64_t v62 = v29;
  unint64_t v72 = v23;
  uint64_t v70 = v27;
  uint64_t v68 = v28;
  uint64_t v66 = v21;
  uint64_t v30 = *(unsigned int *)(a1 + 4);
  if ((v30 & 0x80000000) == 0)
  {
    int v31 = malloc_type_malloc(16 * v30, 0xDE4F2DC6uLL);
    uint64_t v73 = v31;
    if (v31)
    {
      if (*(void *)(a2 + 176))
      {
        if (v30)
        {
          unsigned int v33 = v31 + 1;
          uint64_t v34 = v55 - v19;
          do
          {
            if (((v19 - v54) | v34) < 0)
            {
              unint64_t v37 = 0;
              uint64_t v38 = 0;
            }
            else
            {
              unint64_t v35 = ((v19 & (unint64_t)~(-1 << v20)) >> (v20 - 4)) & 0xF;
              char v36 = weights_21383[v35];
              if (v35 - 7 >= 9) {
                unint64_t v37 = -(uint64_t)v13;
              }
              else {
                unint64_t v37 = v13;
              }
              uint64_t v38 = v36 & 0xF;
            }
            *(v33 - 1) = v13 * (v19 >> v20);
            *unsigned int v33 = v38 | (16 * v37);
            v33 += 2;
            v19 += v10;
            v34 -= v10;
            --v30;
          }
          while (v30);
        }
      }
      else if (v30)
      {
        uint64_t v39 = v31 + 1;
        do
        {
          *(v39 - 1) = v13 * (v19 >> v20);
          *uint64_t v39 = 0;
          v39 += 2;
          v19 += v10;
          --v30;
        }
        while (v30);
      }
      uint64_t v40 = v31;
      int v41 = *(_DWORD *)(a1 + 4);
      int v42 = *(_DWORD *)(a1 + 8);
      int v74 = v42;
      int v75 = v41;
      unint64_t v43 = *(int **)(a1 + 136);
      if (v43)
      {
        int v44 = *(_DWORD *)(a1 + 104);
        v76[0] = *(_DWORD *)(a1 + 108);
        v76[1] = v44;
        shape_enum_clip_alloc((uint64_t)v31, v32, v43, 1, 1, 1, v44, v76[0], v41, v42);
        int v46 = v45;
        if (v45) {
          goto LABEL_32;
        }
      }
      int v47 = 0;
      int v48 = 0;
      int v46 = 0;
      *(void *)int v76 = 0;
      while (1)
      {
        uint64_t v49 = *(int *)(a1 + 16) + (uint64_t)v48;
        uint64_t v50 = *(void *)(a1 + 48);
        int v51 = v47 + *(_DWORD *)(a1 + 12);
        uint64_t v52 = *(void *)(a1 + 40) + 16 * v8 * v49 + 16 * v51;
        uint64_t v53 = v50 + 4 * v9 * v49 + 4 * v51;
        if (!v50) {
          uint64_t v53 = 0;
        }
        uint64_t v57 = v52;
        uint64_t v59 = v53;
        a5(a2, v56);
        if (!v46) {
          break;
        }
LABEL_32:
        if (!shape_enum_clip_next((uint64_t)v46, &v76[1], v76, &v75, &v74))
        {
          free(v46);
          break;
        }
        int v48 = v76[0];
        int v47 = v76[1];
        unint64_t v8 = v58;
        unint64_t v9 = v60;
      }
      free(v40);
    }
  }
}

void CMYKf_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v427 = a3;
  uint64_t v440 = *MEMORY[0x1E4F143B8];
  uint64_t v425 = *(unsigned int *)(a1 + 4);
  uint64_t v424 = (int)v425;
  unint64_t v4 = ((int)v425 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v4 <= 0x1FFFFFF)
  {
    unint64_t v6 = *(int *)(a1 + 28);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v437 = *(void *)(a1 + 40);
    a4.n128_u32[0] = *(_DWORD *)(a2 + 184);
    __n128 v431 = a4;
    unint64_t v8 = *(int **)(a1 + 136);
    uint64_t v9 = *(void *)(a2 + 104);
    uint64_t v428 = *(void *)(a2 + 96);
    uint64_t v11 = *(int *)(a1 + 12);
    uint64_t v10 = *(int *)(a1 + 16);
    int v434 = *(_DWORD *)(a1 + 8);
    uint64_t v426 = (void *)a2;
    uint64_t v12 = *(int *)(a2 + 16);
    uint64_t v13 = (v12 + 22) * v4;
    if (v13 > 65439)
    {
      uint64_t v15 = (char *)malloc_type_calloc(1uLL, v13 + 96, 0xB050C286uLL);
      uint64_t v17 = v15;
      uint64_t v18 = v426;
      if (!v15) {
        return;
      }
    }
    else
    {
      MEMORY[0x1F4188790](a1, a4);
      uint64_t v15 = (char *)&v419 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v15, v14);
      uint64_t v17 = 0;
      uint64_t v18 = v426;
    }
    float32x4_t v421 = v17;
    uint64_t v435 = v9;
    unint64_t v19 = v6 >> 4;
    unint64_t v20 = (unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v21 = v20 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v12) {
      uint64_t v22 = 20 * v4;
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v23 = v21 + v22;
    v18[18] = v20;
    v18[19] = v21 + v22;
    v18[20] = v21;
    if (v7)
    {
      unint64_t v24 = (unint64_t)*(int *)(a1 + 32) >> 2;
      unint64_t v25 = (float *)(v7 + 4 * (v11 + v24 * v10));
      uint64_t v26 = v424;
      uint64_t v432 = v24 - v424;
      uint64_t v27 = 1;
    }
    else
    {
      unint64_t v25 = 0;
      uint64_t v432 = 0;
      uint64_t v27 = 0;
      uint64_t v26 = v424;
    }
    uint64_t v28 = (float32x4_t *)(v437 + 16 * (v11 + v19 * v10));
    uint64_t v430 = v19 - v26;
    uint64_t v29 = *(int *)(a1 + 104);
    int v30 = *(_DWORD *)(a1 + 108);
    int v31 = *(unsigned __int8 *)(a1 + 2);
    if (v31 == 6 || v31 == 1)
    {
      int v32 = v427;
      unsigned int v33 = v426;
      uint64_t v34 = v428;
      uint64_t v35 = v435;
      if (v8)
      {
        unint64_t v420 = v19;
        char v36 = 0;
        LODWORD(v437) = 0;
        uint64_t v37 = *(int *)(a1 + 124);
        uint64_t v38 = (unsigned __int8 *)v8 + v29 + (int)v37 * (uint64_t)v30;
        uint64_t v26 = v424;
        uint64_t v429 = v37 - v424;
        uint64_t v39 = v425;
        goto LABEL_21;
      }
      goto LABEL_554;
    }
    unint64_t v420 = v19;
    if (v8)
    {
      uint64_t v436 = v27;
      shape_enum_clip_alloc(v27, v16, v8, 1, 1, 1, v29, v30, v425, v434);
      if (v40)
      {
        int v41 = v40;
        LODWORD(v437) = 0;
        uint64_t v42 = (int)((v12 * v4 + 15) & 0xFFFFFFF0);
        if (!v12) {
          uint64_t v42 = 20 * v4;
        }
        uint64_t v43 = v424;
        uint64_t v429 = -v424;
        uint64_t v38 = (unsigned __int8 *)(v23 + v42 + 16);
        int v32 = v427;
        uint64_t v39 = v425;
        unsigned int v33 = v426;
        uint64_t v35 = v435;
        goto LABEL_557;
      }
LABEL_554:
      if (v421) {
        free(v421);
      }
      return;
    }
    uint64_t v429 = 0;
    char v36 = 0;
    uint64_t v38 = 0;
    LODWORD(v437) = 0;
    int v32 = v427;
    uint64_t v39 = v425;
    unsigned int v33 = v426;
    uint64_t v34 = v428;
    uint64_t v35 = v435;
LABEL_21:
    uint64_t v423 = (v39 - 1) + 1;
    uint64_t v422 = -v26;
    uint64_t v44 = 4 * v27;
    uint64_t v45 = v36;
    uint64_t v436 = v27;
LABEL_22:
    uint64_t v433 = v45;
    int v46 = (void (*)(void *, uint64_t, uint64_t, uint64_t))*v33;
    uint64_t v435 = v35;
    v46(v33, v34, v35, v39);
    uint64_t v61 = (float32x4_t *)v33[20];
    uint64_t v62 = (unsigned __int8 *)v33[18];
    unsigned int v63 = *((_DWORD *)v33 + 2);
    if (v63 == *((_DWORD *)v33 + 3))
    {
      float32x4_t v55 = (float32x4_t)v431;
      if (v431.n128_f32[0] >= 1.0)
      {
        int v66 = v436;
      }
      else
      {
        int v64 = v39;
        uint64_t v65 = (unsigned char *)v33[18];
        int v66 = v436;
        do
        {
          if (*v65)
          {
            float32x4_t v54 = vmulq_n_f32(*v61, v55.f32[0]);
            *uint64_t v61 = v54;
            v61[1].f32[0] = v55.f32[0] * v61[1].f32[0];
          }
          ++v65;
          uint64_t v61 = (float32x4_t *)((char *)v61 + 20);
          --v64;
        }
        while (v64);
        uint64_t v61 = (float32x4_t *)((char *)v61 + 20 * v422);
        v62 += v423 + v422;
      }
    }
    else
    {
      uint64_t v67 = (float32x4_t *)v33[19];
      int v68 = HIWORD(v63) & 0x3F;
      float v69 = v431.n128_f32[0];
      if (v68 == 16)
      {
        int v66 = v436;
        uint64_t v74 = 0;
        int v75 = &v67->u16[4];
        int v76 = &v61->f32[2];
        if (v431.n128_f32[0] >= 1.0)
        {
          do
          {
            if (v62[v74])
            {
              unint64_t v79 = *v75;
              unint64_t v80 = *((void *)v75 - 1);
              *(v76 - 2) = *(float *)&_blt_float[v80 + 256] + *(float *)&_blt_float[BYTE1(v80) + 512];
              *(v76 - 1) = *(float *)&_blt_float[BYTE2(v80) + 256] + *(float *)&_blt_float[BYTE3(v80) | 0x200];
              float *v76 = *(float *)&_blt_float[BYTE4(v80) + 256] + *(float *)&_blt_float[BYTE5(v80) + 512];
              v76[1] = *(float *)&_blt_float[BYTE6(v80) + 256] + *(float *)&_blt_float[HIBYTE(v80) + 512];
              v76[2] = *(float *)&_blt_float[v79 + 256]
                     + *(float *)((char *)&_blt_float[512] + ((v79 >> 6) & 0x3FC));
            }
            v75 += 8;
            ++v74;
            v76 += 5;
          }
          while (v39 != v74);
        }
        else
        {
          do
          {
            if (v62[v74])
            {
              unint64_t v77 = *v75;
              unint64_t v78 = *((void *)v75 - 1);
              *(v76 - 2) = v69
                         * (float)(*(float *)&_blt_float[v78 + 256]
                                 + *(float *)&_blt_float[BYTE1(v78) + 512]);
              *(v76 - 1) = v69
                         * (float)(*(float *)&_blt_float[BYTE2(v78) + 256] + *(float *)&_blt_float[BYTE3(v78) | 0x200]);
              float *v76 = v69 * (float)(*(float *)&_blt_float[BYTE4(v78) + 256] + *(float *)&_blt_float[BYTE5(v78) + 512]);
              v76[1] = v69 * (float)(*(float *)&_blt_float[BYTE6(v78) + 256] + *(float *)&_blt_float[HIBYTE(v78) + 512]);
              v76[2] = v69
                     * (float)(*(float *)&_blt_float[v77 + 256]
                             + *(float *)((char *)&_blt_float[512] + ((v77 >> 6) & 0x3FC)));
            }
            v75 += 8;
            ++v74;
            v76 += 5;
          }
          while (v39 != v74);
        }
      }
      else
      {
        _ZF = v68 == 32;
        int v66 = v436;
        uint64_t v71 = 0;
        if (_ZF)
        {
          unint64_t v72 = v67 + 1;
          uint64_t v73 = v61 + 1;
          if (v431.n128_f32[0] >= 1.0)
          {
            do
            {
              if (v62[v71])
              {
                float32x4_t v54 = v72[-1];
                v73[-1] = v54;
                v73->i32[0] = v72->i32[0];
              }
              unint64_t v72 = (float32x4_t *)((char *)v72 + 20);
              ++v71;
              uint64_t v73 = (float32x4_t *)((char *)v73 + 20);
            }
            while (v39 != v71);
          }
          else
          {
            do
            {
              if (v62[v71])
              {
                float32x4_t v54 = vmulq_n_f32(v72[-1], v69);
                v73[-1] = v54;
                v73->f32[0] = v69 * v72->f32[0];
              }
              unint64_t v72 = (float32x4_t *)((char *)v72 + 20);
              ++v71;
              uint64_t v73 = (float32x4_t *)((char *)v73 + 20);
            }
            while (v39 != v71);
          }
        }
        else
        {
          uint64_t v81 = &v61->f32[2];
          if (v431.n128_f32[0] >= 1.0)
          {
            do
            {
              if (v62[v71])
              {
                uint64_t v83 = v67->i64[v71];
                *(v81 - 2) = *(float *)&_blt_float[BYTE3(v83)];
                *(v81 - 1) = *(float *)&_blt_float[BYTE2(v83)];
                *uint64_t v81 = *(float *)&_blt_float[BYTE1(v83)];
                v81[1] = *(float *)&_blt_float[v83];
                v81[2] = *(float *)&_blt_float[BYTE4(v83)];
              }
              ++v71;
              v81 += 5;
            }
            while (v39 != v71);
          }
          else
          {
            do
            {
              if (v62[v71])
              {
                uint64_t v82 = v67->i64[v71];
                *(v81 - 2) = v69 * *(float *)&_blt_float[BYTE3(v82)];
                *(v81 - 1) = v69 * *(float *)&_blt_float[BYTE2(v82)];
                *uint64_t v81 = v69 * *(float *)&_blt_float[BYTE1(v82)];
                v81[1] = v69 * *(float *)&_blt_float[v82];
                v81[2] = v69 * *(float *)&_blt_float[BYTE4(v82)];
              }
              ++v71;
              v81 += 5;
            }
            while (v39 != v71);
          }
        }
      }
    }
    unint64_t v84 = &xmmword_1850CE000;
    switch(v32)
    {
      case 0:
        uint64_t v85 = v38 != 0;
        int v86 = v39;
        uint64_t v87 = v38;
        if (v66)
        {
          do
          {
            unsigned int v88 = *v62;
            if (*v62)
            {
              if (v38) {
                unsigned int v88 = (*v87 * v88 + ((*v87 * v88) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v88)
              {
                if (v88 == 255)
                {
                  v28->i64[0] = 0;
                  v28->i64[1] = 0;
                  float v89 = 0.0;
                }
                else
                {
                  float v90 = (float)((float)v88 * -0.0039216) + 1.0;
                  *uint64_t v28 = vmulq_n_f32(*v28, v90);
                  float v89 = v90 * *v25;
                }
                *unint64_t v25 = v89;
              }
            }
            ++v62;
            v87 += v85;
            ++v28;
            ++v25;
            --v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            unsigned int v91 = *v62;
            if (*v62)
            {
              if (v38) {
                unsigned int v91 = (*v87 * v91 + ((*v87 * v91) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v91)
              {
                if (v91 == 255)
                {
                  v28->i64[0] = 0;
                  v28->i64[1] = 0;
                }
                else
                {
                  *uint64_t v28 = vmulq_n_f32(*v28, (float)((float)v91 * -0.0039216) + 1.0);
                }
              }
            }
            ++v62;
            v87 += v85;
            ++v28;
            --v86;
          }
          while (v86);
        }
        goto LABEL_491;
      case 1:
        unsigned __int8 v92 = *v62;
        if (v66)
        {
          if (v38)
          {
            uint64_t v93 = 0;
            f32 = v61[1].f32;
            int v95 = v62 + 1;
            int v96 = v25 - 1;
            unsigned int v97 = v28 - 1;
            uint64_t v98 = v435;
            do
            {
              if (v92)
              {
                unsigned int v99 = ((unsigned __int16)(v38[v93] * v92 + ((v38[v93] * v92) >> 8) + 1) >> 8);
                if (v99)
                {
                  if (v99 == 255)
                  {
                    v28[v93] = *(float32x4_t *)(f32 - 4);
                    float v100 = *f32;
                  }
                  else
                  {
                    float v101 = (float)v99 * 0.0039216;
                    v28[v93] = vmlaq_n_f32(vmulq_n_f32(v28[v93], 1.0 - v101), *(float32x4_t *)(f32 - 4), v101);
                    float v100 = (float)((float)(1.0 - v101) * v25[v93]) + (float)(*f32 * v101);
                  }
                  v25[v93] = v100;
                }
              }
              unsigned __int8 v92 = v95[v93++];
              f32 += 5;
              ++v96;
              ++v97;
            }
            while (v39 != v93);
            v38 += v93 + v429;
          }
          else
          {
            float32x4_t v392 = v61[1].f32;
            float32x4_t v393 = v62 + 1;
            int v96 = v25 - 1;
            unsigned int v97 = v28 - 1;
            int v394 = v39;
            uint64_t v98 = v435;
            do
            {
              if (v92)
              {
                if (v92 == 255)
                {
                  v97[1] = *(float32x4_t *)(v392 - 4);
                  float v395 = *v392;
                }
                else
                {
                  float v396 = (float)v92 * 0.0039216;
                  v97[1] = vmlaq_n_f32(vmulq_n_f32(v97[1], 1.0 - v396), *(float32x4_t *)(v392 - 4), v396);
                  float v395 = (float)((float)(1.0 - v396) * v96[1]) + (float)(*v392 * v396);
                }
                v96[1] = v395;
              }
              unsigned __int8 v397 = *v393++;
              unsigned __int8 v92 = v397;
              v392 += 5;
              ++v96;
              ++v97;
              --v394;
            }
            while (v394);
            uint64_t v38 = 0;
          }
          uint64_t v28 = &v97[v430 + 1];
          unint64_t v25 = &v96[v432 + 1];
          goto LABEL_494;
        }
        uint64_t v365 = v62 + 1;
        uint64_t v366 = v28 - 1;
        int v367 = v39;
        if (v38)
        {
          uint64_t v98 = v435;
          do
          {
            if (v92)
            {
              unsigned int v368 = ((unsigned __int16)(*v38 * v92 + ((*v38 * v92) >> 8) + 1) >> 8);
              if (v368)
              {
                if (v368 == 255) {
                  float32x4_t v369 = *v61;
                }
                else {
                  float32x4_t v369 = vmlaq_n_f32(vmulq_n_f32(v366[1], 1.0 - (float)((float)v368 * 0.0039216)), *v61, (float)v368 * 0.0039216);
                }
                v366[1] = v369;
              }
            }
            unsigned __int8 v370 = *v365++;
            unsigned __int8 v92 = v370;
            uint64_t v61 = (float32x4_t *)((char *)v61 + 20);
            ++v38;
            ++v366;
            --v367;
          }
          while (v367);
          v38 += v429;
        }
        else
        {
          uint64_t v98 = v435;
          do
          {
            if (v92)
            {
              if (v92 == 255) {
                float32x4_t v404 = *v61;
              }
              else {
                float32x4_t v404 = vmlaq_n_f32(vmulq_n_f32(v366[1], 1.0 - (float)((float)v92 * 0.0039216)), *v61, (float)v92 * 0.0039216);
              }
              v366[1] = v404;
            }
            unsigned __int8 v405 = *v365++;
            unsigned __int8 v92 = v405;
            uint64_t v61 = (float32x4_t *)((char *)v61 + 20);
            ++v366;
            --v367;
          }
          while (v367);
          uint64_t v38 = 0;
        }
        uint64_t v406 = &v366[v430];
        goto LABEL_550;
      case 2:
        unsigned __int8 v102 = *v62;
        if (v66)
        {
          if (v38)
          {
            uint64_t v103 = 0;
            float v104 = v62 + 1;
            uint64_t v105 = v25 - 1;
            int v106 = v28 - 1;
            uint64_t v98 = v435;
            while (1)
            {
              if (!v102) {
                goto LABEL_104;
              }
              unsigned int v107 = ((unsigned __int16)(v38[v103] * v102 + ((v38[v103] * v102) >> 8) + 1) >> 8);
              if (!v107) {
                goto LABEL_104;
              }
              if (v107 == 255)
              {
                float v108 = v61[1].f32[0];
                if (v108 >= 1.0)
                {
                  v28[v103] = *v61;
                  goto LABEL_103;
                }
                if (v108 > 0.0)
                {
                  v28[v103] = vmlaq_n_f32(*v61, v28[v103], 1.0 - v108);
                  float v108 = v108 + (float)(v25[v103] * (float)(1.0 - v108));
LABEL_103:
                  v25[v103] = v108;
                }
              }
              else
              {
                float v109 = (float)v107 * 0.0039216;
                float v110 = v109 * v61[1].f32[0];
                if (v110 > 0.0)
                {
                  v28[v103] = vmlaq_n_f32(vmulq_n_f32(*v61, v109), v28[v103], 1.0 - v110);
                  float v108 = v110 + (float)(v25[v103] * (float)(1.0 - v110));
                  goto LABEL_103;
                }
              }
LABEL_104:
              unsigned __int8 v102 = v104[v103];
              uint64_t v61 = (float32x4_t *)((char *)v61 + 20);
              ++v103;
              ++v105;
              ++v106;
              if (v39 == v103)
              {
                v38 += v103 + v429;
LABEL_526:
                uint64_t v28 = &v106[v430 + 1];
                unint64_t v25 = &v105[v432 + 1];
                goto LABEL_494;
              }
            }
          }
          long long v398 = v62 + 1;
          uint64_t v105 = v25 - 1;
          int v106 = v28 - 1;
          int v399 = v39;
          uint64_t v98 = v435;
          while (1)
          {
            if (v102)
            {
              if (v102 == 255)
              {
                float v400 = v61[1].f32[0];
                if (v400 >= 1.0)
                {
                  v106[1] = *v61;
                  goto LABEL_523;
                }
                if (v400 > 0.0)
                {
                  v106[1] = vmlaq_n_f32(*v61, v106[1], 1.0 - v400);
                  float v400 = v400 + (float)(v105[1] * (float)(1.0 - v400));
LABEL_523:
                  v105[1] = v400;
                }
              }
              else
              {
                float v401 = (float)v102 * 0.0039216;
                float v402 = v401 * v61[1].f32[0];
                if (v402 > 0.0)
                {
                  v106[1] = vmlaq_n_f32(vmulq_n_f32(*v61, v401), v106[1], 1.0 - v402);
                  float v400 = v402 + (float)(v105[1] * (float)(1.0 - v402));
                  goto LABEL_523;
                }
              }
            }
            unsigned __int8 v403 = *v398++;
            unsigned __int8 v102 = v403;
            uint64_t v61 = (float32x4_t *)((char *)v61 + 20);
            ++v105;
            ++v106;
            if (!--v399)
            {
              uint64_t v38 = 0;
              goto LABEL_526;
            }
          }
        }
        float v371 = v62 + 1;
        float v372 = v28 - 1;
        int v373 = v39;
        if (v38)
        {
          uint64_t v98 = v435;
          while (1)
          {
            if (!v102) {
              goto LABEL_482;
            }
            unsigned int v374 = ((unsigned __int16)(*v38 * v102 + ((*v38 * v102) >> 8) + 1) >> 8);
            if (!v374) {
              goto LABEL_482;
            }
            if (v374 == 255)
            {
              float v375 = v61[1].f32[0];
              if (v375 >= 1.0)
              {
                float32x4_t v380 = *v61;
                goto LABEL_481;
              }
              if (v375 > 0.0)
              {
                float v376 = 1.0 - v375;
                float32x4_t v377 = *v61;
                goto LABEL_479;
              }
            }
            else
            {
              float v378 = (float)v374 * 0.0039216;
              float v379 = v378 * v61[1].f32[0];
              if (v379 > 0.0)
              {
                float v376 = 1.0 - v379;
                float32x4_t v377 = vmulq_n_f32(*v61, v378);
LABEL_479:
                float32x4_t v380 = vmlaq_n_f32(v377, v372[1], v376);
LABEL_481:
                v372[1] = v380;
              }
            }
LABEL_482:
            unsigned __int8 v381 = *v371++;
            unsigned __int8 v102 = v381;
            uint64_t v61 = (float32x4_t *)((char *)v61 + 20);
            ++v38;
            ++v372;
            if (!--v373)
            {
              v38 += v429;
LABEL_549:
              uint64_t v406 = &v372[v430];
LABEL_550:
              uint64_t v28 = v406 + 1;
              v25 += v432;
LABEL_494:
              if (v434 == 1)
              {
                int v41 = v433;
LABEL_552:
                if (v41) {
                  free(v41);
                }
                goto LABEL_554;
              }
              --v434;
              uint64_t v45 = 0;
              LODWORD(v437) = v437 + 1;
              v34 += v33[16];
              uint64_t v35 = v33[17] + v98;
              if (v433)
              {
                uint64_t v428 = v34;
                uint64_t v43 = v424;
                int v41 = v433;
LABEL_557:
                uint64_t v414 = v432 + v43;
                while (1)
                {
                  while (1)
                  {
                    int v415 = *((_DWORD *)v38 - 4);
                    int v416 = v415 - v437;
                    if (v415 <= (int)v437) {
                      break;
                    }
                    v434 -= v416;
                    if (v434 < 1) {
                      goto LABEL_552;
                    }
                    uint64_t v417 = v33[17];
                    v428 += v33[16] * v416;
                    v35 += v417 * v416;
                    v28 += v420 * v416;
                    uint64_t v418 = v414 * v416;
                    if (!v436) {
                      uint64_t v418 = 0;
                    }
                    v25 += v418;
                    LODWORD(v437) = v415;
                  }
                  if ((int)v437 < *((_DWORD *)v38 - 3) + v415) {
                    break;
                  }
                  if (!shape_enum_clip_scan((uint64_t)v41, (_DWORD *)v38 - 4)) {
                    goto LABEL_552;
                  }
                }
                uint64_t v26 = v424;
                uint64_t v34 = v428;
                uint64_t v27 = v436;
                char v36 = v41;
                goto LABEL_21;
              }
              goto LABEL_22;
            }
          }
        }
        uint64_t v98 = v435;
        while (1)
        {
          if (v102)
          {
            if (v102 == 255)
            {
              float v407 = v61[1].f32[0];
              if (v407 >= 1.0)
              {
                float32x4_t v412 = *v61;
                goto LABEL_546;
              }
              if (v407 > 0.0)
              {
                float v408 = 1.0 - v407;
                float32x4_t v409 = *v61;
                goto LABEL_544;
              }
            }
            else
            {
              float v410 = (float)v102 * 0.0039216;
              float v411 = v410 * v61[1].f32[0];
              if (v411 > 0.0)
              {
                float v408 = 1.0 - v411;
                float32x4_t v409 = vmulq_n_f32(*v61, v410);
LABEL_544:
                float32x4_t v412 = vmlaq_n_f32(v409, v372[1], v408);
LABEL_546:
                v372[1] = v412;
              }
            }
          }
          unsigned __int8 v413 = *v371++;
          unsigned __int8 v102 = v413;
          uint64_t v61 = (float32x4_t *)((char *)v61 + 20);
          ++v372;
          if (!--v373)
          {
            uint64_t v38 = 0;
            goto LABEL_549;
          }
        }
      case 3:
        uint64_t v111 = v61[1].f32;
        int v112 = v39;
        uint64_t v87 = v38;
        do
        {
          unsigned int v113 = *v62;
          if (*v62)
          {
            if (v38) {
              unsigned int v113 = (*v87 * v113 + ((*v87 * v113) >> 8) + 1) >> 8;
            }
            if ((_BYTE)v113)
            {
              if (v113 == 255)
              {
                v28->f32[0] = *(v111 - 4) * *v25;
                v28->f32[1] = *(v111 - 3) * *v25;
                v28->f32[2] = *(v111 - 2) * *v25;
                v28->f32[3] = *(v111 - 1) * *v25;
                float v114 = *v111 * *v25;
              }
              else
              {
                float v115 = (float)v113 * 0.0039216;
                float v116 = *v25;
                float v117 = v115 * *v25;
                float v118 = 1.0 - v115;
                *uint64_t v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v118), *(float32x4_t *)(v111 - 4), v117);
                float v114 = (float)(v118 * v116) + (float)(*v111 * v117);
              }
              *unint64_t v25 = v114;
            }
          }
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v111 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          --v112;
        }
        while (v112);
        goto LABEL_491;
      case 4:
        int v119 = v61[1].f32;
        int v120 = v39;
        uint64_t v87 = v38;
        do
        {
          unsigned int v121 = *v62;
          if (*v62)
          {
            if (v38) {
              unsigned int v121 = (*v87 * v121 + ((*v87 * v121) >> 8) + 1) >> 8;
            }
            if ((_BYTE)v121)
            {
              if (v121 == 255)
              {
                v28->f32[0] = *(v119 - 4) * (float)(1.0 - *v25);
                v28->f32[1] = *(v119 - 3) * (float)(1.0 - *v25);
                v28->f32[2] = *(v119 - 2) * (float)(1.0 - *v25);
                v28->f32[3] = *(v119 - 1) * (float)(1.0 - *v25);
                float v122 = *v119 * (float)(1.0 - *v25);
              }
              else
              {
                float v123 = (float)v121 * 0.0039216;
                float v124 = *v25;
                float v125 = v123 * (float)(1.0 - *v25);
                float v126 = 1.0 - v123;
                *uint64_t v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v126), *(float32x4_t *)(v119 - 4), v125);
                float v122 = (float)(v126 * v124) + (float)(*v119 * v125);
              }
              *unint64_t v25 = v122;
            }
          }
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v119 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          --v120;
        }
        while (v120);
        goto LABEL_491;
      case 5:
        float v127 = v61[1].f32;
        int v128 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v129 = *v62;
          if (*v62)
          {
            if (!v38) {
              goto LABEL_133;
            }
            unsigned int v130 = *v87 * v129 + ((*v87 * v129) >> 8) + 1;
            if (BYTE1(v130)) {
              break;
            }
          }
LABEL_134:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v127 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v128) {
            goto LABEL_491;
          }
        }
        unsigned int v129 = v130 >> 8;
LABEL_133:
        float v131 = *v25;
        float v132 = (float)v129 * 0.0039216;
        float v133 = v132 * *v127;
        *uint64_t v28 = vmlaq_n_f32(vmulq_n_f32(*v28, 1.0 - v133), vmulq_n_f32(*(float32x4_t *)(v127 - 4), v132), *v25);
        *unint64_t v25 = (float)(v131 * (float)(1.0 - v133)) + (float)(v133 * v131);
        goto LABEL_134;
      case 6:
        uint64_t v134 = v61[1].f32;
        int v135 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v136 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v137 = *v87 * v136 + ((*v87 * v136) >> 8) + 1;
              if (!BYTE1(v137)) {
                goto LABEL_146;
              }
              unsigned int v136 = v137 >> 8;
            }
            float v138 = *v25;
            float v139 = 1.0 - *v25;
            if (v139 >= 1.0)
            {
              float v142 = (float)v136 * 0.0039216;
              *uint64_t v28 = vmulq_n_f32(*(float32x4_t *)(v134 - 4), v142);
              float v141 = v142 * *v134;
              goto LABEL_145;
            }
            if (v139 > 0.0)
            {
              float v140 = v139 * (float)((float)v136 * 0.0039216);
              *uint64_t v28 = vmlaq_n_f32(*v28, *(float32x4_t *)(v134 - 4), v140);
              float v141 = v138 + (float)(*v134 * v140);
LABEL_145:
              *unint64_t v25 = v141;
            }
          }
LABEL_146:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v134 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v135) {
            goto LABEL_491;
          }
        }
      case 7:
        uint64_t v143 = v38 != 0;
        int v144 = v61[1].f32;
        int v145 = v39;
        uint64_t v87 = v38;
        if (v66)
        {
          do
          {
            unsigned int v146 = *v62;
            if (*v62)
            {
              if (v38) {
                unsigned int v146 = (*v87 * v146 + ((*v87 * v146) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v146)
              {
                if (v146 == 255)
                {
                  float v147 = *v144;
                  *uint64_t v28 = vmulq_n_f32(*v28, *v144);
                  float v148 = v147 * *v25;
                }
                else
                {
                  float v149 = (float)v146 * 0.0039216;
                  float v150 = *v25;
                  float v151 = v149 * *v144;
                  float v152 = 1.0 - v149;
                  *uint64_t v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v152), *v28, v151);
                  float v148 = (float)(v152 * v150) + (float)(v150 * v151);
                }
                *unint64_t v25 = v148;
              }
            }
            ++v62;
            v87 += v143;
            ++v28;
            ++v25;
            v144 += 5;
            --v145;
          }
          while (v145);
        }
        else
        {
          do
          {
            unsigned int v153 = *v62;
            if (*v62)
            {
              if (v38) {
                unsigned int v153 = (*v87 * v153 + ((*v87 * v153) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v153)
              {
                if (v153 == 255) {
                  float32x4_t v154 = vmulq_n_f32(*v28, *v144);
                }
                else {
                  float32x4_t v154 = vmlaq_n_f32(vmulq_n_f32(*v28, 1.0 - (float)((float)v153 * 0.0039216)), *v28, (float)((float)v153 * 0.0039216) * *v144);
                }
                *uint64_t v28 = v154;
              }
            }
            ++v62;
            v87 += v143;
            ++v28;
            v144 += 5;
            --v145;
          }
          while (v145);
        }
        goto LABEL_491;
      case 8:
        uint64_t v155 = v38 != 0;
        uint64_t v156 = v61[1].f32;
        int v157 = v39;
        uint64_t v87 = v38;
        if (v66)
        {
          do
          {
            unsigned int v158 = *v62;
            if (*v62)
            {
              if (v38) {
                unsigned int v158 = (*v87 * v158 + ((*v87 * v158) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v158)
              {
                if (v158 == 255)
                {
                  float v159 = 1.0 - *v156;
                  *uint64_t v28 = vmulq_n_f32(*v28, v159);
                  float v160 = v159 * *v25;
                }
                else
                {
                  float v161 = (float)v158 * 0.0039216;
                  float v162 = *v25;
                  float v163 = v161 * (float)(1.0 - *v156);
                  float v164 = 1.0 - v161;
                  *uint64_t v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v164), *v28, v163);
                  float v160 = (float)(v164 * v162) + (float)(v162 * v163);
                }
                *unint64_t v25 = v160;
              }
            }
            ++v62;
            v87 += v155;
            ++v28;
            ++v25;
            v156 += 5;
            --v157;
          }
          while (v157);
        }
        else
        {
          do
          {
            unsigned int v165 = *v62;
            if (*v62)
            {
              if (v38) {
                unsigned int v165 = (*v87 * v165 + ((*v87 * v165) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v165)
              {
                if (v165 == 255) {
                  float32x4_t v166 = vmulq_n_f32(*v28, 1.0 - *v156);
                }
                else {
                  float32x4_t v166 = vmlaq_n_f32(vmulq_n_f32(*v28, 1.0 - (float)((float)v165 * 0.0039216)), *v28, (float)((float)v165 * 0.0039216) * (float)(1.0 - *v156));
                }
                *uint64_t v28 = v166;
              }
            }
            ++v62;
            v87 += v155;
            ++v28;
            v156 += 5;
            --v157;
          }
          while (v157);
        }
        goto LABEL_491;
      case 9:
        float v167 = v61[1].f32;
        int v168 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v169 = *v62;
          if (*v62)
          {
            if (!v38) {
              goto LABEL_195;
            }
            unsigned int v170 = *v87 * v169 + ((*v87 * v169) >> 8) + 1;
            if (BYTE1(v170)) {
              break;
            }
          }
LABEL_196:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v167 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v168) {
            goto LABEL_491;
          }
        }
        unsigned int v169 = v170 >> 8;
LABEL_195:
        float v171 = *v25;
        float v172 = (float)v169 * 0.0039216;
        float v173 = v172 * *v167;
        float v174 = 1.0 - *v25;
        float v175 = (float)(1.0 - v172) + v173;
        *uint64_t v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v175), vmulq_n_f32(*(float32x4_t *)(v167 - 4), v172), v174);
        *unint64_t v25 = (float)(v171 * v175) + (float)(v173 * v174);
        goto LABEL_196;
      case 10:
        uint64_t v176 = v61[1].f32;
        int v177 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v178 = *v62;
          if (*v62)
          {
            if (!v38) {
              goto LABEL_203;
            }
            unsigned int v179 = *v87 * v178 + ((*v87 * v178) >> 8) + 1;
            if (BYTE1(v179)) {
              break;
            }
          }
LABEL_204:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v176 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v177) {
            goto LABEL_491;
          }
        }
        unsigned int v178 = v179 >> 8;
LABEL_203:
        float v180 = *v25;
        float v181 = (float)v178 * 0.0039216;
        float v182 = v181 * *v176;
        float v183 = 1.0 - *v25;
        *uint64_t v28 = vmlaq_n_f32(vmulq_n_f32(*v28, 1.0 - v182), vmulq_n_f32(*(float32x4_t *)(v176 - 4), v181), v183);
        *unint64_t v25 = (float)(v180 * (float)(1.0 - v182)) + (float)(v182 * v183);
        goto LABEL_204;
      case 11:
        uint64_t v184 = v38 != 0;
        if (v66)
        {
          int v185 = &v61->f32[2];
          int v186 = v39;
          uint64_t v87 = v38;
          while (1)
          {
            unsigned int v187 = *v62;
            if (*v62)
            {
              if (!v38) {
                goto LABEL_212;
              }
              unsigned int v188 = *v87 * v187 + ((*v87 * v187) >> 8) + 1;
              if (BYTE1(v188)) {
                break;
              }
            }
LABEL_215:
            ++v62;
            v87 += v184;
            ++v28;
            ++v25;
            v185 += 5;
            if (!--v186) {
              goto LABEL_491;
            }
          }
          unsigned int v187 = v188 >> 8;
LABEL_212:
          float v189 = (float)v187 * 0.0039216;
          float v190 = *(v185 - 2) * v189;
          float v191 = *(v185 - 1) * v189;
          float v192 = v189 * *v185;
          float v193 = v189 * v185[1];
          float v194 = v189 * v185[2];
          float v195 = *v25 + v194;
          float v196 = (float)(v194 - v190) + (float)(*v25 - v28->f32[0]);
          if (v195 > 1.0) {
            float v195 = 1.0;
          }
          float v197 = (float)(v194 - v191) + (float)(*v25 - v28->f32[1]);
          v28->f32[0] = v195 - v196;
          float v198 = v28->f32[3];
          float v199 = (float)(v194 - v192) + (float)(*v25 - v28->f32[2]);
          v28->f32[1] = v195 - v197;
          float v200 = *v25 - v198;
          v28->f32[2] = v195 - v199;
          *unint64_t v25 = v195;
          v28->f32[3] = v195 - (float)((float)(v194 - v193) + v200);
          goto LABEL_215;
        }
        uint64_t v382 = v61[1].f32;
        int v383 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v384 = *v62;
          if (*v62)
          {
            if (!v38) {
              goto LABEL_489;
            }
            unsigned int v385 = *v87 * v384 + ((*v87 * v384) >> 8) + 1;
            if (BYTE1(v385)) {
              break;
            }
          }
LABEL_490:
          ++v62;
          v87 += v184;
          ++v28;
          v382 += 5;
          if (!--v383) {
            goto LABEL_491;
          }
        }
        unsigned int v384 = v385 >> 8;
LABEL_489:
        float v386 = (float)v384 * 0.0039216;
        v55.f32[0] = v386 * *v382;
        __asm { FMOV            V3.4S, #1.0 }
        float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
        *uint64_t v28 = vsubq_f32(_Q3, vaddq_f32(vsubq_f32(v55, vmulq_n_f32(*(float32x4_t *)(v382 - 4), v386)), vsubq_f32(_Q3, *v28)));
        goto LABEL_490;
      case 12:
        uint64_t v201 = v38 != 0;
        if (v66)
        {
          uint64_t v202 = v61[1].f32;
          int v203 = v39;
          uint64_t v87 = v38;
          while (1)
          {
            unsigned int v204 = *v62;
            if (*v62)
            {
              if (!v38) {
                goto LABEL_223;
              }
              unsigned int v205 = *v87 * v204 + ((*v87 * v204) >> 8) + 1;
              if (BYTE1(v205)) {
                break;
              }
            }
LABEL_226:
            ++v62;
            v87 += v201;
            ++v28;
            ++v25;
            v202 += 5;
            if (!--v203) {
              goto LABEL_491;
            }
          }
          unsigned int v204 = v205 >> 8;
LABEL_223:
          float v206 = (float)v204 * 0.0039216;
          float v207 = *v25 + (float)(v206 * *v202);
          if (v207 > 1.0) {
            float v207 = 1.0;
          }
          float32x4_t v208 = vmulq_n_f32(*(float32x4_t *)(v202 - 4), v206);
          v209.i64[0] = v28->i64[0];
          *unint64_t v25 = v207;
          v209.i64[1] = v28->i64[1];
          *uint64_t v28 = vaddq_f32(v208, v209);
          goto LABEL_226;
        }
        int v388 = v39;
        float v389 = v38;
        while (1)
        {
          unsigned int v390 = *v62;
          if (*v62)
          {
            if (!v38) {
              goto LABEL_502;
            }
            unsigned int v391 = *v389 * v390 + ((*v389 * v390) >> 8) + 1;
            if (BYTE1(v391)) {
              break;
            }
          }
LABEL_503:
          ++v62;
          uint64_t v61 = (float32x4_t *)((char *)v61 + 20);
          v389 += v201;
          ++v28;
          if (!--v388)
          {
            uint64_t v38 = &v389[v429];
LABEL_492:
            v28 += v430;
            v25 += v432;
LABEL_493:
            uint64_t v98 = v435;
            goto LABEL_494;
          }
        }
        unsigned int v390 = v391 >> 8;
LABEL_502:
        *uint64_t v28 = vaddq_f32(vmulq_n_f32(*v61, (float)v390 * 0.0039216), *v28);
        goto LABEL_503;
      case 13:
        unsigned int v210 = v61[1].f32;
        int v211 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v212 = *v62;
          if (*v62)
          {
            if (!v38) {
              goto LABEL_233;
            }
            unsigned int v213 = *v87 * v212 + ((*v87 * v212) >> 8) + 1;
            if (BYTE1(v213)) {
              break;
            }
          }
LABEL_239:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v210 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v211) {
            goto LABEL_491;
          }
        }
        unsigned int v212 = v213 >> 8;
LABEL_233:
        float v214 = (float)v212 * 0.0039216;
        v54.f32[0] = v214 * *v210;
        if (v54.f32[0] > 0.0)
        {
          float32x4_t v216 = *(float32x4_t *)(v210 - 4);
          float32x4_t v215 = vmulq_n_f32(v216, v214);
          v216.i32[0] = 1.0;
          v55.i32[0] = 1.0;
          if (v66)
          {
            v55.f32[0] = *v25;
            if (*v25 <= 0.0) {
              goto LABEL_237;
            }
          }
          float32x4_t v217 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), *v28);
          float32x4_t v218 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v215);
          float32x4_t v219 = vmulq_f32(v217, v218);
          float32x4_t v220 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v54, v216)), 0), (int8x16_t)vmlaq_n_f32(v219, v217, 1.0 - v54.f32[0]), (int8x16_t)v219);
          float32x4_t v221 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v55, v216)), 0), (int8x16_t)vmlaq_n_f32(v220, v218, 1.0 - v55.f32[0]), (int8x16_t)v220);
          v54.f32[0] = (float)(v55.f32[0] + v54.f32[0]) - (float)(v55.f32[0] * v54.f32[0]);
          float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
          float32x4_t v215 = vsubq_f32(v55, v221);
          if (v66)
          {
LABEL_237:
            *uint64_t v28 = v215;
            *unint64_t v25 = v54.f32[0];
          }
          else
          {
            *uint64_t v28 = v215;
          }
        }
        goto LABEL_239;
      case 14:
        uint64_t v222 = v61[1].f32;
        int v223 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v224 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v225 = *v87 * v224 + ((*v87 * v224) >> 8) + 1;
              if (!BYTE1(v225)) {
                goto LABEL_254;
              }
              unsigned int v224 = v225 >> 8;
            }
            float v226 = (float)v224 * 0.0039216;
            v54.f32[0] = v226 * *v222;
            if (v54.f32[0] > 0.0)
            {
              float32x4_t v227 = *(float32x4_t *)(v222 - 4);
              float32x4_t v228 = vmulq_n_f32(v227, v226);
              if (v66)
              {
                v227.f32[0] = *v25;
                if (*v25 <= 0.0)
                {
LABEL_252:
                  *uint64_t v28 = v228;
                  *unint64_t v25 = v54.f32[0];
                  goto LABEL_254;
                }
              }
              else
              {
                v227.i32[0] = 1.0;
              }
              float32x4_t v229 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v227.f32, 0), *v28);
              __asm { FMOV            V4.4S, #1.0 }
              float32x4_t v234 = vmlaq_f32(v229, vsubq_f32(_Q4, v229), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v228));
              v54.f32[0] = (float)(v54.f32[0] + v227.f32[0]) - (float)(v227.f32[0] * v54.f32[0]);
              float32x4_t v228 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v234);
              if (!v66)
              {
                *uint64_t v28 = v228;
                goto LABEL_254;
              }
              goto LABEL_252;
            }
          }
LABEL_254:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v222 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v223) {
            goto LABEL_491;
          }
        }
      case 15:
        uint64_t v428 = v34;
        float v235 = &v61->f32[2];
        int v236 = v39;
        float v237 = v38;
        while (1)
        {
          unsigned int v238 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v239 = *v237 * v238 + ((*v237 * v238) >> 8) + 1;
              if (!BYTE1(v239)) {
                goto LABEL_270;
              }
              unsigned int v238 = v239 >> 8;
            }
            float v240 = (float)v238 * *((float *)v84 + 677);
            float v241 = v240 * v235[2];
            if (v241 > 0.0)
            {
              *(float *)&double v58 = *(v235 - 2) * v240;
              *(float *)&double v59 = *(v235 - 1) * v240;
              float v242 = v240 * *v235;
              *(float *)&double v60 = v240 * v235[1];
              if (v66)
              {
                float v243 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_268:
                  v28->i32[0] = LODWORD(v58);
                  v28->i32[1] = LODWORD(v59);
                  v28->f32[2] = v242;
                  v28->i32[3] = LODWORD(v60);
                  *unint64_t v25 = v241;
                  goto LABEL_270;
                }
              }
              else
              {
                float v243 = 1.0;
              }
              PDAoverlayPDA(v438.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v243, v58, v59, v60, *(float *)&v58, *(float *)&v59, v242, *(float *)&v60, v241);
              int v66 = v436;
              LODWORD(v59) = v438.i32[1];
              LODWORD(v5++*(_DWORD *)(result + 8) = v438.i32[0];
              LODWORD(v60) = v438.i32[3];
              float v242 = v438.f32[2];
              if (!v436)
              {
                v28->i32[0] = v438.i32[0];
                v28->i32[1] = LODWORD(v59);
                v28->f32[2] = v242;
                v28->i32[3] = LODWORD(v60);
                unint64_t v84 = &xmmword_1850CE000;
                goto LABEL_270;
              }
              float v241 = v439;
              unint64_t v84 = &xmmword_1850CE000;
              goto LABEL_268;
            }
          }
LABEL_270:
          ++v62;
          v237 += v38 != 0;
          ++v28;
          unint64_t v25 = (float *)((char *)v25 + v44);
          v235 += 5;
          if (!--v236) {
            goto LABEL_457;
          }
        }
      case 16:
        uint64_t v244 = v61[1].f32;
        int v245 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v246 = *v62;
          if (*v62)
          {
            if (!v38) {
              goto LABEL_277;
            }
            unsigned int v247 = *v87 * v246 + ((*v87 * v246) >> 8) + 1;
            if (BYTE1(v247)) {
              break;
            }
          }
LABEL_283:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v244 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v245) {
            goto LABEL_491;
          }
        }
        unsigned int v246 = v247 >> 8;
LABEL_277:
        float v248 = (float)v246 * 0.0039216;
        v54.f32[0] = v248 * *v244;
        if (v54.f32[0] > 0.0)
        {
          float32x4_t v250 = *(float32x4_t *)(v244 - 4);
          float32x4_t v249 = vmulq_n_f32(v250, v248);
          v250.i32[0] = 1.0;
          v55.i32[0] = 1.0;
          if (v66)
          {
            v55.f32[0] = *v25;
            if (*v25 <= 0.0) {
              goto LABEL_281;
            }
          }
          float32x4_t v251 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), *v28);
          float32x4_t v252 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v249);
          float32x4_t v253 = vmulq_n_f32(v251, v54.f32[0]);
          float32x4_t v254 = vmulq_n_f32(v252, v55.f32[0]);
          float32x4_t v255 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v253, v254), (int8x16_t)v254, (int8x16_t)v253);
          float32x4_t v256 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v54, v250)), 0), (int8x16_t)vmlaq_n_f32(v255, v251, 1.0 - v54.f32[0]), (int8x16_t)v255);
          float32x4_t v257 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v55, v250)), 0), (int8x16_t)vmlaq_n_f32(v256, v252, 1.0 - v55.f32[0]), (int8x16_t)v256);
          v54.f32[0] = (float)(v55.f32[0] + v54.f32[0]) - (float)(v55.f32[0] * v54.f32[0]);
          float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
          float32x4_t v249 = vsubq_f32(v55, v257);
          if (v66)
          {
LABEL_281:
            *uint64_t v28 = v249;
            *unint64_t v25 = v54.f32[0];
          }
          else
          {
            *uint64_t v28 = v249;
          }
        }
        goto LABEL_283;
      case 17:
        float v258 = v61[1].f32;
        int v259 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v260 = *v62;
          if (*v62)
          {
            if (!v38) {
              goto LABEL_290;
            }
            unsigned int v261 = *v87 * v260 + ((*v87 * v260) >> 8) + 1;
            if (BYTE1(v261)) {
              break;
            }
          }
LABEL_296:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v258 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v259) {
            goto LABEL_491;
          }
        }
        unsigned int v260 = v261 >> 8;
LABEL_290:
        float v262 = (float)v260 * 0.0039216;
        v54.f32[0] = v262 * *v258;
        if (v54.f32[0] > 0.0)
        {
          float32x4_t v264 = *(float32x4_t *)(v258 - 4);
          float32x4_t v263 = vmulq_n_f32(v264, v262);
          v264.i32[0] = 1.0;
          v55.i32[0] = 1.0;
          if (v66)
          {
            v55.f32[0] = *v25;
            if (*v25 <= 0.0) {
              goto LABEL_294;
            }
          }
          float32x4_t v265 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), *v28);
          float32x4_t v266 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v263);
          float32x4_t v267 = vmulq_n_f32(v265, v54.f32[0]);
          float32x4_t v268 = vmulq_n_f32(v266, v55.f32[0]);
          float32x4_t v269 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v268, v267), (int8x16_t)v268, (int8x16_t)v267);
          float32x4_t v270 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v54, v264)), 0), (int8x16_t)vmlaq_n_f32(v269, v265, 1.0 - v54.f32[0]), (int8x16_t)v269);
          float32x4_t v271 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v55, v264)), 0), (int8x16_t)vmlaq_n_f32(v270, v266, 1.0 - v55.f32[0]), (int8x16_t)v270);
          v54.f32[0] = (float)(v55.f32[0] + v54.f32[0]) - (float)(v55.f32[0] * v54.f32[0]);
          float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
          float32x4_t v263 = vsubq_f32(v55, v271);
          if (v66)
          {
LABEL_294:
            *uint64_t v28 = v263;
            *unint64_t v25 = v54.f32[0];
          }
          else
          {
            *uint64_t v28 = v263;
          }
        }
        goto LABEL_296;
      case 18:
        uint64_t v428 = v34;
        int v272 = &v61->f32[2];
        int v273 = v39;
        float v237 = v38;
        while (1)
        {
          unsigned int v274 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v275 = *v237 * v274 + ((*v237 * v274) >> 8) + 1;
              if (!BYTE1(v275)) {
                goto LABEL_312;
              }
              unsigned int v274 = v275 >> 8;
            }
            float v276 = (float)v274 * *((float *)v84 + 677);
            float v277 = v276 * v272[2];
            if (v277 > 0.0)
            {
              *(float *)&double v58 = *(v272 - 2) * v276;
              *(float *)&double v59 = *(v272 - 1) * v276;
              float v278 = v276 * *v272;
              *(float *)&double v60 = v276 * v272[1];
              if (v66)
              {
                float v279 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_310:
                  v28->i32[0] = LODWORD(v58);
                  v28->i32[1] = LODWORD(v59);
                  v28->f32[2] = v278;
                  v28->i32[3] = LODWORD(v60);
                  *unint64_t v25 = v277;
                  goto LABEL_312;
                }
              }
              else
              {
                float v279 = 1.0;
              }
              PDAcolordodgePDA(v438.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v279, v58, v59, v60, *(float *)&v58, *(float *)&v59, v278, *(float *)&v60, v277);
              int v66 = v436;
              LODWORD(v59) = v438.i32[1];
              LODWORD(v5++*(_DWORD *)(result + 8) = v438.i32[0];
              LODWORD(v60) = v438.i32[3];
              float v278 = v438.f32[2];
              if (!v436)
              {
                v28->i32[0] = v438.i32[0];
                v28->i32[1] = LODWORD(v59);
                v28->f32[2] = v278;
                v28->i32[3] = LODWORD(v60);
                unint64_t v84 = &xmmword_1850CE000;
                goto LABEL_312;
              }
              float v277 = v439;
              unint64_t v84 = &xmmword_1850CE000;
              goto LABEL_310;
            }
          }
LABEL_312:
          ++v62;
          v237 += v38 != 0;
          ++v28;
          unint64_t v25 = (float *)((char *)v25 + v44);
          v272 += 5;
          if (!--v273) {
            goto LABEL_457;
          }
        }
      case 19:
        uint64_t v428 = v34;
        float v280 = &v61->f32[2];
        int v281 = v39;
        float v237 = v38;
        while (1)
        {
          unsigned int v282 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v283 = *v237 * v282 + ((*v237 * v282) >> 8) + 1;
              if (!BYTE1(v283)) {
                goto LABEL_328;
              }
              unsigned int v282 = v283 >> 8;
            }
            float v284 = (float)v282 * *((float *)v84 + 677);
            float v285 = v284 * v280[2];
            if (v285 > 0.0)
            {
              *(float *)&double v58 = *(v280 - 2) * v284;
              *(float *)&double v59 = *(v280 - 1) * v284;
              float v286 = v284 * *v280;
              *(float *)&double v60 = v284 * v280[1];
              if (v66)
              {
                float v287 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_326:
                  v28->i32[0] = LODWORD(v58);
                  v28->i32[1] = LODWORD(v59);
                  v28->f32[2] = v286;
                  v28->i32[3] = LODWORD(v60);
                  *unint64_t v25 = v285;
                  goto LABEL_328;
                }
              }
              else
              {
                float v287 = 1.0;
              }
              PDAcolorburnPDA(v438.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v287, v58, v59, v60, *(float *)&v58, *(float *)&v59, v286, *(float *)&v60, v285);
              int v66 = v436;
              LODWORD(v59) = v438.i32[1];
              LODWORD(v5++*(_DWORD *)(result + 8) = v438.i32[0];
              LODWORD(v60) = v438.i32[3];
              float v286 = v438.f32[2];
              if (!v436)
              {
                v28->i32[0] = v438.i32[0];
                v28->i32[1] = LODWORD(v59);
                v28->f32[2] = v286;
                v28->i32[3] = LODWORD(v60);
                unint64_t v84 = &xmmword_1850CE000;
                goto LABEL_328;
              }
              float v285 = v439;
              unint64_t v84 = &xmmword_1850CE000;
              goto LABEL_326;
            }
          }
LABEL_328:
          ++v62;
          v237 += v38 != 0;
          ++v28;
          unint64_t v25 = (float *)((char *)v25 + v44);
          v280 += 5;
          if (!--v281) {
            goto LABEL_457;
          }
        }
      case 20:
        uint64_t v428 = v34;
        uint64_t v288 = &v61->f32[2];
        int v289 = v39;
        float v237 = v38;
        while (1)
        {
          unsigned int v290 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v291 = *v237 * v290 + ((*v237 * v290) >> 8) + 1;
              if (!BYTE1(v291)) {
                goto LABEL_344;
              }
              unsigned int v290 = v291 >> 8;
            }
            float v292 = (float)v290 * *((float *)v84 + 677);
            float v293 = v292 * v288[2];
            if (v293 > 0.0)
            {
              *(float *)&double v58 = *(v288 - 2) * v292;
              *(float *)&double v59 = *(v288 - 1) * v292;
              float v294 = v292 * *v288;
              *(float *)&double v60 = v292 * v288[1];
              if (v66)
              {
                *(float *)&double v57 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_342:
                  v28->i32[0] = LODWORD(v58);
                  v28->i32[1] = LODWORD(v59);
                  v28->f32[2] = v294;
                  v28->i32[3] = LODWORD(v60);
                  *unint64_t v25 = v293;
                  goto LABEL_344;
                }
              }
              else
              {
                LODWORD(v57) = 1.0;
              }
              v54.i32[0] = v28->i32[0];
              float32x4_t v54 = PDAsoftlightPDA(&v438, *(float32x2_t *)v54.f32, v28->f32[1], v28->f32[2], v28->f32[3], v57, *(int32x2_t *)&v58, v59, v60, v47, v48, v49, v50, v51, v52, v53, (float32x2_t)__PAIR64__(LODWORD(v59), LODWORD(v58)), v294, *(float *)&v60,
                      v293);
              int v66 = v436;
              LODWORD(v59) = v438.i32[1];
              LODWORD(v5++*(_DWORD *)(result + 8) = v438.i32[0];
              LODWORD(v60) = v438.i32[3];
              float v294 = v438.f32[2];
              if (!v436)
              {
                v28->i32[0] = v438.i32[0];
                v28->i32[1] = LODWORD(v59);
                v28->f32[2] = v294;
                v28->i32[3] = LODWORD(v60);
                unint64_t v84 = &xmmword_1850CE000;
                goto LABEL_344;
              }
              float v293 = v439;
              unint64_t v84 = &xmmword_1850CE000;
              goto LABEL_342;
            }
          }
LABEL_344:
          ++v62;
          v237 += v38 != 0;
          ++v28;
          unint64_t v25 = (float *)((char *)v25 + v44);
          v288 += 5;
          if (!--v289) {
            goto LABEL_457;
          }
        }
      case 21:
        uint64_t v428 = v34;
        uint64_t v295 = &v61->f32[2];
        int v296 = v39;
        float v237 = v38;
        while (1)
        {
          unsigned int v297 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v298 = *v237 * v297 + ((*v237 * v297) >> 8) + 1;
              if (!BYTE1(v298)) {
                goto LABEL_360;
              }
              unsigned int v297 = v298 >> 8;
            }
            float v299 = (float)v297 * *((float *)v84 + 677);
            float v300 = v299 * v295[2];
            if (v300 > 0.0)
            {
              *(float *)&double v58 = *(v295 - 2) * v299;
              *(float *)&double v59 = *(v295 - 1) * v299;
              float v301 = v299 * *v295;
              *(float *)&double v60 = v299 * v295[1];
              if (v66)
              {
                float v302 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_358:
                  v28->i32[0] = LODWORD(v58);
                  v28->i32[1] = LODWORD(v59);
                  v28->f32[2] = v301;
                  v28->i32[3] = LODWORD(v60);
                  *unint64_t v25 = v300;
                  goto LABEL_360;
                }
              }
              else
              {
                float v302 = 1.0;
              }
              PDAhardlightPDA(v438.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v302, v58, v59, v60, *(float *)&v58, *(float *)&v59, v301, *(float *)&v60, v300);
              int v66 = v436;
              LODWORD(v59) = v438.i32[1];
              LODWORD(v5++*(_DWORD *)(result + 8) = v438.i32[0];
              LODWORD(v60) = v438.i32[3];
              float v301 = v438.f32[2];
              if (!v436)
              {
                v28->i32[0] = v438.i32[0];
                v28->i32[1] = LODWORD(v59);
                v28->f32[2] = v301;
                v28->i32[3] = LODWORD(v60);
                unint64_t v84 = &xmmword_1850CE000;
                goto LABEL_360;
              }
              float v300 = v439;
              unint64_t v84 = &xmmword_1850CE000;
              goto LABEL_358;
            }
          }
LABEL_360:
          ++v62;
          v237 += v38 != 0;
          ++v28;
          unint64_t v25 = (float *)((char *)v25 + v44);
          v295 += 5;
          if (!--v296) {
            goto LABEL_457;
          }
        }
      case 22:
        float32x4_t v303 = v61[1].f32;
        int v304 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v305 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v306 = *v87 * v305 + ((*v87 * v305) >> 8) + 1;
              if (!BYTE1(v306)) {
                goto LABEL_376;
              }
              unsigned int v305 = v306 >> 8;
            }
            float v307 = (float)v305 * 0.0039216;
            v54.f32[0] = v307 * *v303;
            if (v54.f32[0] > 0.0)
            {
              float32x4_t v308 = *(float32x4_t *)(v303 - 4);
              float32x4_t v309 = vmulq_n_f32(v308, v307);
              if (v66)
              {
                v308.f32[0] = *v25;
                if (*v25 <= 0.0)
                {
LABEL_374:
                  *uint64_t v28 = v309;
                  *unint64_t v25 = v54.f32[0];
                  goto LABEL_376;
                }
              }
              else
              {
                v308.i32[0] = 1.0;
              }
              *(float *)v56.i32 = (float)(v308.f32[0] + v54.f32[0]) - (float)(v308.f32[0] * v54.f32[0]);
              float32x4_t v310 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v308.f32, 0), *v28);
              float32x4_t v311 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v309);
              float32x4_t v312 = vaddq_f32(v310, v311);
              float32x4_t v313 = vmulq_n_f32(v310, v54.f32[0]);
              float32x4_t v314 = vmulq_n_f32(v311, v308.f32[0]);
              float32x4_t v315 = vsubq_f32(v312, v313);
              float32x4_t v316 = vsubq_f32(v313, v314);
              float32x4_t v54 = vaddq_f32(vsubq_f32(v315, v314), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v316), (int8x16_t)vnegq_f32(v316), (int8x16_t)v316));
              float32x4_t v309 = vsubq_f32((float32x4_t)vdupq_lane_s32(v56, 0), v54);
              if (!v66)
              {
                *uint64_t v28 = v309;
                goto LABEL_376;
              }
              v54.i32[0] = v56.i32[0];
              goto LABEL_374;
            }
          }
LABEL_376:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v303 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v304) {
            goto LABEL_491;
          }
        }
      case 23:
        unsigned int v317 = v61[1].f32;
        int v318 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v319 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v320 = *v87 * v319 + ((*v87 * v319) >> 8) + 1;
              if (!BYTE1(v320)) {
                goto LABEL_392;
              }
              unsigned int v319 = v320 >> 8;
            }
            float v321 = (float)v319 * 0.0039216;
            v54.f32[0] = v321 * *v317;
            if (v54.f32[0] > 0.0)
            {
              float32x4_t v322 = *(float32x4_t *)(v317 - 4);
              float32x4_t v323 = vmulq_n_f32(v322, v321);
              if (v66)
              {
                v322.f32[0] = *v25;
                if (*v25 <= 0.0)
                {
LABEL_390:
                  *uint64_t v28 = v323;
                  *unint64_t v25 = v54.f32[0];
                  goto LABEL_392;
                }
              }
              else
              {
                v322.i32[0] = 1.0;
              }
              float32x4_t v324 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v322.f32, 0);
              v322.f32[0] = (float)(v322.f32[0] + v54.f32[0]) - (float)(v322.f32[0] * v54.f32[0]);
              float32x4_t v325 = vsubq_f32(v324, *v28);
              float32x4_t v326 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v323);
              float32x4_t v327 = vaddq_f32(v325, v326);
              float32x4_t v328 = vmulq_f32(v326, v325);
              v325.i64[0] = 0xC0000000C0000000;
              v325.i64[1] = 0xC0000000C0000000;
              float32x4_t v329 = vmlaq_f32(v327, v325, v328);
              float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v322.f32, 0);
              float32x4_t v323 = vsubq_f32(v54, v329);
              if (!v66)
              {
                *uint64_t v28 = v323;
                goto LABEL_392;
              }
              v54.i32[0] = v322.i32[0];
              goto LABEL_390;
            }
          }
LABEL_392:
          ++v62;
          v87 += v38 != 0;
          ++v28;
          v317 += 5;
          unint64_t v25 = (float *)((char *)v25 + v44);
          if (!--v318)
          {
LABEL_491:
            uint64_t v38 = &v87[v429];
            goto LABEL_492;
          }
        }
      case 24:
        uint64_t v428 = v34;
        uint64_t v330 = &v61->f32[2];
        int v331 = v39;
        float v237 = v38;
        while (1)
        {
          unsigned int v332 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v333 = *v237 * v332 + ((*v237 * v332) >> 8) + 1;
              if (!BYTE1(v333)) {
                goto LABEL_408;
              }
              unsigned int v332 = v333 >> 8;
            }
            float v334 = (float)v332 * *((float *)v84 + 677);
            float v335 = v334 * v330[2];
            if (v335 > 0.0)
            {
              *(float *)&double v58 = *(v330 - 2) * v334;
              *(float *)&double v59 = *(v330 - 1) * v334;
              float v336 = v334 * *v330;
              *(float *)&double v60 = v334 * v330[1];
              if (v66)
              {
                float v337 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_406:
                  v28->i32[0] = LODWORD(v58);
                  v28->i32[1] = LODWORD(v59);
                  v28->f32[2] = v336;
                  v28->i32[3] = LODWORD(v60);
                  *unint64_t v25 = v335;
                  goto LABEL_408;
                }
              }
              else
              {
                float v337 = 1.0;
              }
              PDAhuePDA(v438.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v337, v58, v59, v60, *(float *)&v58, *(float *)&v59, v336, *(float *)&v60, v335);
              int v66 = v436;
              LODWORD(v59) = v438.i32[1];
              LODWORD(v5++*(_DWORD *)(result + 8) = v438.i32[0];
              LODWORD(v60) = v438.i32[3];
              float v336 = v438.f32[2];
              if (!v436)
              {
                v28->i32[0] = v438.i32[0];
                v28->i32[1] = LODWORD(v59);
                v28->f32[2] = v336;
                v28->i32[3] = LODWORD(v60);
                unint64_t v84 = &xmmword_1850CE000;
                goto LABEL_408;
              }
              float v335 = v439;
              unint64_t v84 = &xmmword_1850CE000;
              goto LABEL_406;
            }
          }
LABEL_408:
          ++v62;
          v237 += v38 != 0;
          ++v28;
          unint64_t v25 = (float *)((char *)v25 + v44);
          v330 += 5;
          if (!--v331) {
            goto LABEL_457;
          }
        }
      case 25:
        uint64_t v428 = v34;
        uint64_t v338 = &v61->f32[2];
        int v339 = v39;
        float v237 = v38;
        while (1)
        {
          unsigned int v340 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v341 = *v237 * v340 + ((*v237 * v340) >> 8) + 1;
              if (!BYTE1(v341)) {
                goto LABEL_424;
              }
              unsigned int v340 = v341 >> 8;
            }
            float v342 = (float)v340 * *((float *)v84 + 677);
            float v343 = v342 * v338[2];
            if (v343 > 0.0)
            {
              *(float *)&double v58 = *(v338 - 2) * v342;
              *(float *)&double v59 = *(v338 - 1) * v342;
              float v344 = v342 * *v338;
              *(float *)&double v60 = v342 * v338[1];
              if (v66)
              {
                float v345 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_422:
                  v28->i32[0] = LODWORD(v58);
                  v28->i32[1] = LODWORD(v59);
                  v28->f32[2] = v344;
                  v28->i32[3] = LODWORD(v60);
                  *unint64_t v25 = v343;
                  goto LABEL_424;
                }
              }
              else
              {
                float v345 = 1.0;
              }
              PDAsaturationPDA(v438.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v345, v58, v59, v60, *(float *)&v58, *(float *)&v59, v344, *(float *)&v60, v343);
              int v66 = v436;
              LODWORD(v59) = v438.i32[1];
              LODWORD(v5++*(_DWORD *)(result + 8) = v438.i32[0];
              LODWORD(v60) = v438.i32[3];
              float v344 = v438.f32[2];
              if (!v436)
              {
                v28->i32[0] = v438.i32[0];
                v28->i32[1] = LODWORD(v59);
                v28->f32[2] = v344;
                v28->i32[3] = LODWORD(v60);
                unint64_t v84 = &xmmword_1850CE000;
                goto LABEL_424;
              }
              float v343 = v439;
              unint64_t v84 = &xmmword_1850CE000;
              goto LABEL_422;
            }
          }
LABEL_424:
          ++v62;
          v237 += v38 != 0;
          ++v28;
          unint64_t v25 = (float *)((char *)v25 + v44);
          v338 += 5;
          if (!--v339) {
            goto LABEL_457;
          }
        }
      case 26:
        uint64_t v428 = v34;
        unsigned int v346 = &v61->f32[2];
        int v347 = v38;
        while (1)
        {
          unsigned int v348 = *v62;
          if (*v62)
          {
            if (v38)
            {
              unsigned int v349 = *v347 * v348 + ((*v347 * v348) >> 8) + 1;
              if (!BYTE1(v349)) {
                goto LABEL_440;
              }
              unsigned int v348 = v349 >> 8;
            }
            float v350 = (float)v348 * *((float *)v84 + 677);
            float v351 = v350 * v346[2];
            if (v351 > 0.0)
            {
              float v352 = *(v346 - 2) * v350;
              float v353 = *(v346 - 1) * v350;
              float v354 = v350 * *v346;
              float v355 = v350 * v346[1];
              if (v66)
              {
                *(float *)&double v58 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_438:
                  v28->f32[0] = v352;
                  v28->f32[1] = v353;
                  v28->f32[2] = v354;
                  v28->f32[3] = v355;
                  *unint64_t v25 = v351;
                  goto LABEL_440;
                }
              }
              else
              {
                LODWORD(v5++*(_DWORD *)(result + 8) = 1.0;
              }
              LODWORD(v59) = v28->i32[0];
              LODWORD(v60) = v28->i32[3];
              PDAluminosityPDA(v438.f32, v352, v353, v354, v355, v351, v58, v59, v60, v28->f32[0], COERCE_FLOAT(*(uint64_t *)((char *)v28->i64 + 4)), COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v28->i64 + 4))), *(float *)&v60, *(float *)&v58);
              int v66 = v436;
              float v353 = v438.f32[1];
              float v352 = v438.f32[0];
              float v355 = v438.f32[3];
              float v354 = v438.f32[2];
              if (!v436)
              {
                v28->i32[0] = v438.i32[0];
                v28->f32[1] = v353;
                v28->f32[2] = v354;
                v28->f32[3] = v355;
                unint64_t v84 = &xmmword_1850CE000;
                goto LABEL_440;
              }
              float v351 = v439;
              unint64_t v84 = &xmmword_1850CE000;
              goto LABEL_438;
            }
          }
LABEL_440:
          ++v62;
          v347 += v38 != 0;
          ++v28;
          unint64_t v25 = (float *)((char *)v25 + v44);
          v346 += 5;
          LODWORD(v39) = v39 - 1;
          if (!v39)
          {
            uint64_t v38 = &v347[v429];
LABEL_458:
            v28 += v430;
            v25 += v432;
            int v32 = v427;
            uint64_t v39 = v425;
            unsigned int v33 = v426;
            uint64_t v34 = v428;
            goto LABEL_493;
          }
        }
      case 27:
        uint64_t v428 = v34;
        float32x2_t v356 = &v61->f32[2];
        int v357 = v39;
        float v237 = v38;
        int v358 = v357;
        break;
      default:
        goto LABEL_493;
    }
    while (1)
    {
      unsigned int v359 = *v62;
      if (*v62)
      {
        if (v38)
        {
          unsigned int v360 = *v237 * v359 + ((*v237 * v359) >> 8) + 1;
          if (!BYTE1(v360)) {
            goto LABEL_456;
          }
          unsigned int v359 = v360 >> 8;
        }
        float v361 = (float)v359 * *((float *)v84 + 677);
        float v362 = v361 * v356[2];
        if (v362 > 0.0)
        {
          *(float *)&double v58 = *(v356 - 2) * v361;
          *(float *)&double v59 = *(v356 - 1) * v361;
          float v363 = v361 * *v356;
          *(float *)&double v60 = v361 * v356[1];
          if (v66)
          {
            float v364 = *v25;
            if (*v25 <= 0.0)
            {
LABEL_454:
              v28->i32[0] = LODWORD(v58);
              v28->i32[1] = LODWORD(v59);
              v28->f32[2] = v363;
              v28->i32[3] = LODWORD(v60);
              *unint64_t v25 = v362;
              goto LABEL_456;
            }
          }
          else
          {
            float v364 = 1.0;
          }
          PDAluminosityPDA(v438.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v364, v58, v59, v60, *(float *)&v58, *(float *)&v59, v363, *(float *)&v60, v362);
          int v66 = v436;
          LODWORD(v59) = v438.i32[1];
          LODWORD(v5++*(_DWORD *)(result + 8) = v438.i32[0];
          LODWORD(v60) = v438.i32[3];
          float v363 = v438.f32[2];
          if (!v436)
          {
            v28->i32[0] = v438.i32[0];
            v28->i32[1] = LODWORD(v59);
            v28->f32[2] = v363;
            v28->i32[3] = LODWORD(v60);
            unint64_t v84 = &xmmword_1850CE000;
            goto LABEL_456;
          }
          float v362 = v439;
          unint64_t v84 = &xmmword_1850CE000;
          goto LABEL_454;
        }
      }
LABEL_456:
      ++v62;
      v237 += v38 != 0;
      ++v28;
      v356 += 5;
      unint64_t v25 = (float *)((char *)v25 + v44);
      if (!--v358)
      {
LABEL_457:
        uint64_t v38 = &v237[v429];
        goto LABEL_458;
      }
    }
  }
}

uint64_t CMYKf_image_mark_rgb32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  if (*(void *)(result + 40)) {
    char v6 = 0;
  }
  else {
    char v6 = -1;
  }
  uint64_t v7 = (float *)*((void *)a2 + 2);
  unint64_t v8 = (float *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v117 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v117 = 0;
  }
  float v9 = *((float *)a2 + 2);
  int v10 = a2[1];
  int v116 = *a2;
  uint64_t v115 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 17);
  uint64_t v11 = *((void *)a2 + 18);
  uint64_t v13 = *((void *)a2 + 9);
  uint64_t v114 = *((void *)a2 + 11);
  uint64_t v14 = *((void *)a2 + 7) + v114 * a4;
  uint64_t v15 = *(unsigned int **)(result + 32);
  uint64_t v16 = (unsigned int *)((char *)v15
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  uint64_t v17 = 4 * (v8 != 0);
  if (*(void *)(result + 176))
  {
    uint64_t v113 = *((void *)a2 + 13);
    uint64_t v112 = *((void *)a2 + 15);
    uint64_t v111 = v11 + 16 * a3 + 8;
    while (1)
    {
      if (((v112 - v14) | (v14 - v113)) < 0)
      {
        uint64_t v19 = 0;
        unsigned int v20 = 0;
      }
      else
      {
        unint64_t v18 = ((v14 & (unint64_t)~(-1 << v13)) >> (v13 - 4)) & 0xF;
        if (v18 - 7 >= 9) {
          uint64_t v19 = -v12;
        }
        else {
          uint64_t v19 = v12;
        }
        unsigned int v20 = weights_21383[v18] & 0xF;
      }
      unint64_t v21 = (char *)v15 + (v14 >> v13) * v12;
      if (v116 == 1)
      {
        if (a5 >= 1)
        {
          float result = v20;
          uint64_t v22 = (uint64_t *)v111;
          uint64_t v23 = a5;
          do
          {
            uint64_t v24 = *(v22 - 1);
            uint64_t v25 = *v22;
            uint64_t v26 = &v21[v24];
            if (v16 >= (unsigned int *)&v21[v24]) {
              uint64_t v27 = (unsigned int *)&v21[v24];
            }
            else {
              uint64_t v27 = v16;
            }
            if (v15 > v27) {
              uint64_t v27 = v15;
            }
            unsigned int v28 = *v27;
            if ((v25 & 0xF) != 0)
            {
              uint64_t v29 = (unsigned int *)&v26[v25 >> 4];
              if (v16 < v29) {
                uint64_t v29 = v16;
              }
              if (v15 > v29) {
                uint64_t v29 = v15;
              }
              unsigned int v30 = *v29;
              if (v20)
              {
                int v31 = (unsigned int *)&v26[v19];
                if (v16 >= v31) {
                  int v32 = v31;
                }
                else {
                  int v32 = v16;
                }
                if (v15 > v32) {
                  int v32 = v15;
                }
                unsigned int v33 = *v32;
                uint64_t v34 = (unsigned int *)((char *)v31 + (v25 >> 4));
                if (v16 < v34) {
                  uint64_t v34 = v16;
                }
                if (v15 > v34) {
                  uint64_t v34 = v15;
                }
                unsigned int v35 = BLEND8_21385[v20];
                unsigned int v28 = v28 - ((v35 & v28) >> v20) + ((v35 & v33) >> v20);
                unsigned int v30 = v30 - ((v35 & v30) >> v20) + ((v35 & *v34) >> v20);
              }
              unsigned int v28 = v28
                  - ((BLEND8_21385[*v22 & 0xF] & v28) >> (*v22 & 0xF))
                  + ((BLEND8_21385[*v22 & 0xF] & v30) >> (*v22 & 0xF));
            }
            else if (v20)
            {
              char v36 = (unsigned int *)&v26[v19];
              if (v16 < (unsigned int *)&v26[v19]) {
                char v36 = v16;
              }
              if (v15 > v36) {
                char v36 = v15;
              }
              unsigned int v28 = v28 - ((BLEND8_21385[v20] & v28) >> v20) + ((BLEND8_21385[v20] & *v36) >> v20);
            }
            unsigned int v37 = __ROL4__(v28, v10);
            unsigned __int8 v38 = v37 | v6;
            float v39 = *(float *)&_blt_float[HIBYTE(v37)];
            int v40 = BYTE2(v37);
            int v41 = BYTE1(v37);
            if (v9 >= 1.0)
            {
              float v42 = *(float *)&_blt_float[v40];
              float v43 = *(float *)&_blt_float[v41];
              float v44 = *(float *)&_blt_float[v38];
            }
            else
            {
              float v39 = v9 * v39;
              float v42 = v9 * *(float *)&_blt_float[v40];
              float v43 = v9 * *(float *)&_blt_float[v41];
              float v44 = v9 * *(float *)&_blt_float[v38];
            }
            if (v39 <= v42) {
              float v45 = v42;
            }
            else {
              float v45 = v39;
            }
            if (v43 > v45) {
              float v45 = v43;
            }
            *uint64_t v7 = v45 - v39;
            v7[1] = v45 - v42;
            v7[2] = v45 - v43;
            v7[3] = v44 - v45;
            if (v8) {
              float *v8 = v44;
            }
            v22 += 2;
            v7 += 4;
            unint64_t v8 = (float *)((char *)v8 + v17);
            --v23;
          }
          while (v23);
        }
        goto LABEL_108;
      }
      if (a5 >= 1) {
        break;
      }
LABEL_108:
      v7 += 4 * v115;
      v14 += v114;
      v8 += v117;
      if (!--a6) {
        return result;
      }
    }
    int v46 = (uint64_t *)v111;
    float result = a5;
    while (1)
    {
      uint64_t v47 = *(v46 - 1);
      uint64_t v48 = *v46;
      uint64_t v49 = &v21[v47];
      if (v16 >= (unsigned int *)&v21[v47]) {
        uint64_t v50 = (unsigned int *)&v21[v47];
      }
      else {
        uint64_t v50 = v16;
      }
      if (v15 > v50) {
        uint64_t v50 = v15;
      }
      unsigned int v51 = *v50;
      if ((v48 & 0xF) != 0)
      {
        uint64_t v52 = (unsigned int *)&v49[v48 >> 4];
        if (v16 < v52) {
          uint64_t v52 = v16;
        }
        if (v15 > v52) {
          uint64_t v52 = v15;
        }
        unsigned int v53 = *v52;
        if (v20)
        {
          float32x4_t v54 = (unsigned int *)&v49[v19];
          if (v16 >= v54) {
            float32x4_t v55 = v54;
          }
          else {
            float32x4_t v55 = v16;
          }
          if (v15 > v55) {
            float32x4_t v55 = v15;
          }
          unsigned int v56 = *v55;
          double v57 = (unsigned int *)((char *)v54 + (v48 >> 4));
          if (v16 < v57) {
            double v57 = v16;
          }
          if (v15 > v57) {
            double v57 = v15;
          }
          unsigned int v58 = BLEND8_21385[v20];
          unsigned int v51 = v51 - ((v58 & v51) >> v20) + ((v58 & v56) >> v20);
          unsigned int v53 = v53 - ((v58 & v53) >> v20) + ((v58 & *v57) >> v20);
        }
        unsigned int v51 = v51
            - ((BLEND8_21385[*v46 & 0xF] & v51) >> (*v46 & 0xF))
            + ((BLEND8_21385[*v46 & 0xF] & v53) >> (*v46 & 0xF));
      }
      else if (v20)
      {
        double v59 = (unsigned int *)&v49[v19];
        if (v16 < (unsigned int *)&v49[v19]) {
          double v59 = v16;
        }
        if (v15 > v59) {
          double v59 = v15;
        }
        unsigned int v51 = v51 - ((BLEND8_21385[v20] & v51) >> v20) + ((BLEND8_21385[v20] & *v59) >> v20);
      }
      unsigned int v60 = __ROL4__(v51, v10);
      unsigned __int8 v61 = v60 | v6;
      float v62 = *(float *)&_blt_float[HIBYTE(v60)];
      int v63 = BYTE2(v60);
      int v64 = BYTE1(v60);
      if (v9 >= 1.0)
      {
        float v65 = *(float *)&_blt_float[v63];
        float v66 = *(float *)&_blt_float[v64];
        float v67 = *(float *)&_blt_float[v61];
      }
      else
      {
        float v62 = v9 * v62;
        float v65 = v9 * *(float *)&_blt_float[v63];
        float v66 = v9 * *(float *)&_blt_float[v64];
        float v67 = v9 * *(float *)&_blt_float[v61];
      }
      if (v62 <= v65) {
        float v68 = v65;
      }
      else {
        float v68 = v62;
      }
      if (v66 <= v68) {
        float v69 = v68;
      }
      else {
        float v69 = v66;
      }
      float v70 = v69 - v62;
      float v71 = v69 - v65;
      float v72 = v69 - v66;
      float v73 = v67 - v69;
      if (!v8)
      {
        if (v67 < 1.0)
        {
          if (v67 > 0.0)
          {
            float v76 = 1.0 - v67;
            float v77 = v7[1];
            *uint64_t v7 = v70 + (float)(*v7 * v76);
            v7[1] = v71 + (float)(v77 * v76);
            float v78 = v72 + (float)(v7[2] * v76);
            float v79 = v73 + (float)(v7[3] * v76);
            v7[2] = v78;
            v7[3] = v79;
          }
        }
        else
        {
          *uint64_t v7 = v70;
          v7[1] = v71;
          v7[2] = v72;
          v7[3] = v73;
        }
        goto LABEL_107;
      }
      if (v67 >= 1.0) {
        break;
      }
      if (v67 > 0.0)
      {
        float v74 = v7[1];
        *uint64_t v7 = v70 + (float)(*v7 * (float)(1.0 - v67));
        v7[1] = v71 + (float)(v74 * (float)(1.0 - v67));
        float v75 = v7[3];
        v7[2] = v72 + (float)(v7[2] * (float)(1.0 - v67));
        v7[3] = v73 + (float)(v75 * (float)(1.0 - v67));
        float v67 = v67 + (float)(*v8 * (float)(1.0 - v67));
        goto LABEL_106;
      }
LABEL_107:
      v46 += 2;
      v7 += 4;
      unint64_t v8 = (float *)((char *)v8 + v17);
      if (!--result) {
        goto LABEL_108;
      }
    }
    *uint64_t v7 = v70;
    v7[1] = v71;
    v7[2] = v72;
    v7[3] = v73;
LABEL_106:
    float *v8 = v67;
    goto LABEL_107;
  }
  uint64_t v80 = v11 + 16 * a3;
  do
  {
    uint64_t v81 = (char *)v15 + (v14 >> v13) * v12;
    if (v116 != 1)
    {
      float result = v80;
      uint64_t v91 = a5;
      if (a5 < 1) {
        goto LABEL_155;
      }
      while (1)
      {
        uint64_t v92 = *(void *)result;
        result += 16;
        uint64_t v93 = (unsigned int *)&v81[v92];
        if (v16 < (unsigned int *)&v81[v92]) {
          uint64_t v93 = v16;
        }
        if (v15 > v93) {
          uint64_t v93 = v15;
        }
        unsigned int v94 = __ROL4__(*v93, v10);
        float v95 = *(float *)&_blt_float[HIBYTE(v94)];
        if (v9 >= 1.0)
        {
          float v96 = *(float *)&_blt_float[BYTE2(v94)];
          float v97 = *(float *)&_blt_float[BYTE1(v94)];
          float v98 = *(float *)&_blt_float[(v94 | v6)];
        }
        else
        {
          float v95 = v9 * v95;
          float v96 = v9 * *(float *)&_blt_float[BYTE2(v94)];
          float v97 = v9 * *(float *)&_blt_float[BYTE1(v94)];
          float v98 = v9 * *(float *)&_blt_float[(v94 | v6)];
        }
        if (v95 <= v96) {
          float v99 = v96;
        }
        else {
          float v99 = v95;
        }
        if (v97 <= v99) {
          float v100 = v99;
        }
        else {
          float v100 = v97;
        }
        float v101 = v100 - v95;
        float v102 = v100 - v96;
        float v103 = v100 - v97;
        float v104 = v98 - v100;
        if (!v8)
        {
          if (v98 < 1.0)
          {
            if (v98 > 0.0)
            {
              float v107 = 1.0 - v98;
              float v108 = v7[1];
              *uint64_t v7 = v101 + (float)(*v7 * v107);
              v7[1] = v102 + (float)(v108 * v107);
              float v109 = v103 + (float)(v7[2] * v107);
              float v110 = v104 + (float)(v7[3] * v107);
              v7[2] = v109;
              v7[3] = v110;
            }
          }
          else
          {
            *uint64_t v7 = v101;
            v7[1] = v102;
            v7[2] = v103;
            v7[3] = v104;
          }
          goto LABEL_154;
        }
        if (v98 >= 1.0) {
          break;
        }
        if (v98 > 0.0)
        {
          float v105 = v7[1];
          *uint64_t v7 = v101 + (float)(*v7 * (float)(1.0 - v98));
          v7[1] = v102 + (float)(v105 * (float)(1.0 - v98));
          float v106 = v7[3];
          v7[2] = v103 + (float)(v7[2] * (float)(1.0 - v98));
          v7[3] = v104 + (float)(v106 * (float)(1.0 - v98));
          float v98 = v98 + (float)(*v8 * (float)(1.0 - v98));
          goto LABEL_153;
        }
LABEL_154:
        v7 += 4;
        unint64_t v8 = (float *)((char *)v8 + v17);
        if (!--v91) {
          goto LABEL_155;
        }
      }
      *uint64_t v7 = v101;
      v7[1] = v102;
      v7[2] = v103;
      v7[3] = v104;
LABEL_153:
      float *v8 = v98;
      goto LABEL_154;
    }
    if (a5 >= 1)
    {
      float result = v80;
      uint64_t v82 = a5;
      do
      {
        uint64_t v83 = *(void *)result;
        result += 16;
        unint64_t v84 = (unsigned int *)&v81[v83];
        if (v16 < (unsigned int *)&v81[v83]) {
          unint64_t v84 = v16;
        }
        if (v15 > v84) {
          unint64_t v84 = v15;
        }
        unsigned int v85 = __ROL4__(*v84, v10);
        float v86 = *(float *)&_blt_float[HIBYTE(v85)];
        if (v9 >= 1.0)
        {
          float v87 = *(float *)&_blt_float[BYTE2(v85)];
          float v88 = *(float *)&_blt_float[BYTE1(v85)];
          float v89 = *(float *)&_blt_float[(v85 | v6)];
        }
        else
        {
          float v86 = v9 * v86;
          float v87 = v9 * *(float *)&_blt_float[BYTE2(v85)];
          float v88 = v9 * *(float *)&_blt_float[BYTE1(v85)];
          float v89 = v9 * *(float *)&_blt_float[(v85 | v6)];
        }
        if (v86 <= v87) {
          float v90 = v87;
        }
        else {
          float v90 = v86;
        }
        if (v88 > v90) {
          float v90 = v88;
        }
        *uint64_t v7 = v90 - v86;
        v7[1] = v90 - v87;
        v7[2] = v90 - v88;
        v7[3] = v89 - v90;
        if (v8) {
          float *v8 = v89;
        }
        v7 += 4;
        unint64_t v8 = (float *)((char *)v8 + v17);
        --v82;
      }
      while (v82);
    }
LABEL_155:
    v7 += 4 * v115;
    v14 += v114;
    v8 += v117;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKf_image_mark_RGB32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  if (*(void *)(result + 40)) {
    char v6 = 0;
  }
  else {
    char v6 = -1;
  }
  uint64_t v7 = (float *)*((void *)a2 + 2);
  unint64_t v8 = (float *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v117 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v117 = 0;
  }
  float v9 = *((float *)a2 + 2);
  int v10 = a2[1];
  int v116 = *a2;
  uint64_t v115 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 17);
  uint64_t v11 = *((void *)a2 + 18);
  uint64_t v13 = *((void *)a2 + 9);
  uint64_t v114 = *((void *)a2 + 11);
  uint64_t v14 = *((void *)a2 + 7) + v114 * a4;
  uint64_t v15 = *(unsigned int **)(result + 32);
  uint64_t v16 = (unsigned int *)((char *)v15
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  uint64_t v17 = 4 * (v8 != 0);
  if (*(void *)(result + 176))
  {
    uint64_t v113 = *((void *)a2 + 13);
    uint64_t v112 = *((void *)a2 + 15);
    uint64_t v111 = v11 + 16 * a3 + 8;
    while (1)
    {
      if (((v112 - v14) | (v14 - v113)) < 0)
      {
        uint64_t v19 = 0;
        unsigned int v20 = 0;
      }
      else
      {
        unint64_t v18 = ((v14 & (unint64_t)~(-1 << v13)) >> (v13 - 4)) & 0xF;
        if (v18 - 7 >= 9) {
          uint64_t v19 = -v12;
        }
        else {
          uint64_t v19 = v12;
        }
        unsigned int v20 = weights_21383[v18] & 0xF;
      }
      unint64_t v21 = (char *)v15 + (v14 >> v13) * v12;
      if (v116 == 1)
      {
        if (a5 >= 1)
        {
          float result = v20;
          uint64_t v22 = (uint64_t *)v111;
          uint64_t v23 = a5;
          do
          {
            uint64_t v24 = *(v22 - 1);
            uint64_t v25 = *v22;
            uint64_t v26 = &v21[v24];
            if (v16 >= (unsigned int *)&v21[v24]) {
              uint64_t v27 = (unsigned int *)&v21[v24];
            }
            else {
              uint64_t v27 = v16;
            }
            if (v15 > v27) {
              uint64_t v27 = v15;
            }
            unsigned int v28 = bswap32(*v27);
            if ((v25 & 0xF) != 0)
            {
              uint64_t v29 = (unsigned int *)&v26[v25 >> 4];
              if (v16 < v29) {
                uint64_t v29 = v16;
              }
              if (v15 > v29) {
                uint64_t v29 = v15;
              }
              unsigned int v30 = bswap32(*v29);
              if (v20)
              {
                int v31 = (unsigned int *)&v26[v19];
                if (v16 >= v31) {
                  int v32 = v31;
                }
                else {
                  int v32 = v16;
                }
                if (v15 > v32) {
                  int v32 = v15;
                }
                unsigned int v33 = bswap32(*v32);
                uint64_t v34 = (unsigned int *)((char *)v31 + (v25 >> 4));
                if (v16 < v34) {
                  uint64_t v34 = v16;
                }
                if (v15 > v34) {
                  uint64_t v34 = v15;
                }
                int v35 = BLEND8_21385[v20];
                unsigned int v28 = v28 - ((v35 & v28) >> v20) + ((v35 & v33) >> v20);
                unsigned int v30 = v30 - ((v35 & v30) >> v20) + ((bswap32(*v34) & v35) >> v20);
              }
              unsigned int v28 = v28
                  - ((BLEND8_21385[*v22 & 0xF] & v28) >> (*v22 & 0xF))
                  + ((BLEND8_21385[*v22 & 0xF] & v30) >> (*v22 & 0xF));
            }
            else if (v20)
            {
              char v36 = (unsigned int *)&v26[v19];
              if (v16 < (unsigned int *)&v26[v19]) {
                char v36 = v16;
              }
              if (v15 > v36) {
                char v36 = v15;
              }
              unsigned int v28 = v28 - ((BLEND8_21385[v20] & v28) >> v20) + ((bswap32(*v36) & BLEND8_21385[v20]) >> v20);
            }
            unsigned int v37 = __ROL4__(v28, v10);
            unsigned __int8 v38 = v37 | v6;
            float v39 = *(float *)&_blt_float[HIBYTE(v37)];
            int v40 = BYTE2(v37);
            int v41 = BYTE1(v37);
            if (v9 >= 1.0)
            {
              float v42 = *(float *)&_blt_float[v40];
              float v43 = *(float *)&_blt_float[v41];
              float v44 = *(float *)&_blt_float[v38];
            }
            else
            {
              float v39 = v9 * v39;
              float v42 = v9 * *(float *)&_blt_float[v40];
              float v43 = v9 * *(float *)&_blt_float[v41];
              float v44 = v9 * *(float *)&_blt_float[v38];
            }
            if (v39 <= v42) {
              float v45 = v42;
            }
            else {
              float v45 = v39;
            }
            if (v43 > v45) {
              float v45 = v43;
            }
            *uint64_t v7 = v45 - v39;
            v7[1] = v45 - v42;
            v7[2] = v45 - v43;
            v7[3] = v44 - v45;
            if (v8) {
              float *v8 = v44;
            }
            v22 += 2;
            v7 += 4;
            unint64_t v8 = (float *)((char *)v8 + v17);
            --v23;
          }
          while (v23);
        }
        goto LABEL_108;
      }
      if (a5 >= 1) {
        break;
      }
LABEL_108:
      v7 += 4 * v115;
      v14 += v114;
      v8 += v117;
      if (!--a6) {
        return result;
      }
    }
    int v46 = (uint64_t *)v111;
    float result = a5;
    while (1)
    {
      uint64_t v47 = *(v46 - 1);
      uint64_t v48 = *v46;
      uint64_t v49 = &v21[v47];
      if (v16 >= (unsigned int *)&v21[v47]) {
        uint64_t v50 = (unsigned int *)&v21[v47];
      }
      else {
        uint64_t v50 = v16;
      }
      if (v15 > v50) {
        uint64_t v50 = v15;
      }
      unsigned int v51 = bswap32(*v50);
      if ((v48 & 0xF) != 0)
      {
        uint64_t v52 = (unsigned int *)&v49[v48 >> 4];
        if (v16 < v52) {
          uint64_t v52 = v16;
        }
        if (v15 > v52) {
          uint64_t v52 = v15;
        }
        unsigned int v53 = bswap32(*v52);
        if (v20)
        {
          float32x4_t v54 = (unsigned int *)&v49[v19];
          if (v16 >= v54) {
            float32x4_t v55 = v54;
          }
          else {
            float32x4_t v55 = v16;
          }
          if (v15 > v55) {
            float32x4_t v55 = v15;
          }
          unsigned int v56 = bswap32(*v55);
          double v57 = (unsigned int *)((char *)v54 + (v48 >> 4));
          if (v16 < v57) {
            double v57 = v16;
          }
          if (v15 > v57) {
            double v57 = v15;
          }
          int v58 = BLEND8_21385[v20];
          unsigned int v51 = v51 - ((v58 & v51) >> v20) + ((v58 & v56) >> v20);
          unsigned int v53 = v53 - ((v58 & v53) >> v20) + ((bswap32(*v57) & v58) >> v20);
        }
        unsigned int v51 = v51
            - ((BLEND8_21385[*v46 & 0xF] & v51) >> (*v46 & 0xF))
            + ((BLEND8_21385[*v46 & 0xF] & v53) >> (*v46 & 0xF));
      }
      else if (v20)
      {
        double v59 = (unsigned int *)&v49[v19];
        if (v16 < (unsigned int *)&v49[v19]) {
          double v59 = v16;
        }
        if (v15 > v59) {
          double v59 = v15;
        }
        unsigned int v51 = v51 - ((BLEND8_21385[v20] & v51) >> v20) + ((bswap32(*v59) & BLEND8_21385[v20]) >> v20);
      }
      unsigned int v60 = __ROL4__(v51, v10);
      unsigned __int8 v61 = v60 | v6;
      float v62 = *(float *)&_blt_float[HIBYTE(v60)];
      int v63 = BYTE2(v60);
      int v64 = BYTE1(v60);
      if (v9 >= 1.0)
      {
        float v65 = *(float *)&_blt_float[v63];
        float v66 = *(float *)&_blt_float[v64];
        float v67 = *(float *)&_blt_float[v61];
      }
      else
      {
        float v62 = v9 * v62;
        float v65 = v9 * *(float *)&_blt_float[v63];
        float v66 = v9 * *(float *)&_blt_float[v64];
        float v67 = v9 * *(float *)&_blt_float[v61];
      }
      if (v62 <= v65) {
        float v68 = v65;
      }
      else {
        float v68 = v62;
      }
      if (v66 <= v68) {
        float v69 = v68;
      }
      else {
        float v69 = v66;
      }
      float v70 = v69 - v62;
      float v71 = v69 - v65;
      float v72 = v69 - v66;
      float v73 = v67 - v69;
      if (!v8)
      {
        if (v67 < 1.0)
        {
          if (v67 > 0.0)
          {
            float v76 = 1.0 - v67;
            float v77 = v7[1];
            *uint64_t v7 = v70 + (float)(*v7 * v76);
            v7[1] = v71 + (float)(v77 * v76);
            float v78 = v72 + (float)(v7[2] * v76);
            float v79 = v73 + (float)(v7[3] * v76);
            v7[2] = v78;
            v7[3] = v79;
          }
        }
        else
        {
          *uint64_t v7 = v70;
          v7[1] = v71;
          v7[2] = v72;
          v7[3] = v73;
        }
        goto LABEL_107;
      }
      if (v67 >= 1.0) {
        break;
      }
      if (v67 > 0.0)
      {
        float v74 = v7[1];
        *uint64_t v7 = v70 + (float)(*v7 * (float)(1.0 - v67));
        v7[1] = v71 + (float)(v74 * (float)(1.0 - v67));
        float v75 = v7[3];
        v7[2] = v72 + (float)(v7[2] * (float)(1.0 - v67));
        v7[3] = v73 + (float)(v75 * (float)(1.0 - v67));
        float v67 = v67 + (float)(*v8 * (float)(1.0 - v67));
        goto LABEL_106;
      }
LABEL_107:
      v46 += 2;
      v7 += 4;
      unint64_t v8 = (float *)((char *)v8 + v17);
      if (!--result) {
        goto LABEL_108;
      }
    }
    *uint64_t v7 = v70;
    v7[1] = v71;
    v7[2] = v72;
    v7[3] = v73;
LABEL_106:
    float *v8 = v67;
    goto LABEL_107;
  }
  uint64_t v80 = v11 + 16 * a3;
  do
  {
    uint64_t v81 = (char *)v15 + (v14 >> v13) * v12;
    if (v116 != 1)
    {
      float result = v80;
      uint64_t v91 = a5;
      if (a5 < 1) {
        goto LABEL_155;
      }
      while (1)
      {
        uint64_t v92 = *(void *)result;
        result += 16;
        uint64_t v93 = (unsigned int *)&v81[v92];
        if (v16 < (unsigned int *)&v81[v92]) {
          uint64_t v93 = v16;
        }
        if (v15 > v93) {
          uint64_t v93 = v15;
        }
        unsigned int v94 = __ROL4__(bswap32(*v93), v10);
        float v95 = *(float *)&_blt_float[HIBYTE(v94)];
        if (v9 >= 1.0)
        {
          float v96 = *(float *)&_blt_float[BYTE2(v94)];
          float v97 = *(float *)&_blt_float[BYTE1(v94)];
          float v98 = *(float *)&_blt_float[(v94 | v6)];
        }
        else
        {
          float v95 = v9 * v95;
          float v96 = v9 * *(float *)&_blt_float[BYTE2(v94)];
          float v97 = v9 * *(float *)&_blt_float[BYTE1(v94)];
          float v98 = v9 * *(float *)&_blt_float[(v94 | v6)];
        }
        if (v95 <= v96) {
          float v99 = v96;
        }
        else {
          float v99 = v95;
        }
        if (v97 <= v99) {
          float v100 = v99;
        }
        else {
          float v100 = v97;
        }
        float v101 = v100 - v95;
        float v102 = v100 - v96;
        float v103 = v100 - v97;
        float v104 = v98 - v100;
        if (!v8)
        {
          if (v98 < 1.0)
          {
            if (v98 > 0.0)
            {
              float v107 = 1.0 - v98;
              float v108 = v7[1];
              *uint64_t v7 = v101 + (float)(*v7 * v107);
              v7[1] = v102 + (float)(v108 * v107);
              float v109 = v103 + (float)(v7[2] * v107);
              float v110 = v104 + (float)(v7[3] * v107);
              v7[2] = v109;
              v7[3] = v110;
            }
          }
          else
          {
            *uint64_t v7 = v101;
            v7[1] = v102;
            v7[2] = v103;
            v7[3] = v104;
          }
          goto LABEL_154;
        }
        if (v98 >= 1.0) {
          break;
        }
        if (v98 > 0.0)
        {
          float v105 = v7[1];
          *uint64_t v7 = v101 + (float)(*v7 * (float)(1.0 - v98));
          v7[1] = v102 + (float)(v105 * (float)(1.0 - v98));
          float v106 = v7[3];
          v7[2] = v103 + (float)(v7[2] * (float)(1.0 - v98));
          v7[3] = v104 + (float)(v106 * (float)(1.0 - v98));
          float v98 = v98 + (float)(*v8 * (float)(1.0 - v98));
          goto LABEL_153;
        }
LABEL_154:
        v7 += 4;
        unint64_t v8 = (float *)((char *)v8 + v17);
        if (!--v91) {
          goto LABEL_155;
        }
      }
      *uint64_t v7 = v101;
      v7[1] = v102;
      v7[2] = v103;
      v7[3] = v104;
LABEL_153:
      float *v8 = v98;
      goto LABEL_154;
    }
    if (a5 >= 1)
    {
      float result = v80;
      uint64_t v82 = a5;
      do
      {
        uint64_t v83 = *(void *)result;
        result += 16;
        unint64_t v84 = (unsigned int *)&v81[v83];
        if (v16 < (unsigned int *)&v81[v83]) {
          unint64_t v84 = v16;
        }
        if (v15 > v84) {
          unint64_t v84 = v15;
        }
        unsigned int v85 = __ROL4__(bswap32(*v84), v10);
        float v86 = *(float *)&_blt_float[HIBYTE(v85)];
        if (v9 >= 1.0)
        {
          float v87 = *(float *)&_blt_float[BYTE2(v85)];
          float v88 = *(float *)&_blt_float[BYTE1(v85)];
          float v89 = *(float *)&_blt_float[(v85 | v6)];
        }
        else
        {
          float v86 = v9 * v86;
          float v87 = v9 * *(float *)&_blt_float[BYTE2(v85)];
          float v88 = v9 * *(float *)&_blt_float[BYTE1(v85)];
          float v89 = v9 * *(float *)&_blt_float[(v85 | v6)];
        }
        if (v86 <= v87) {
          float v90 = v87;
        }
        else {
          float v90 = v86;
        }
        if (v88 > v90) {
          float v90 = v88;
        }
        *uint64_t v7 = v90 - v86;
        v7[1] = v90 - v87;
        v7[2] = v90 - v88;
        v7[3] = v89 - v90;
        if (v8) {
          float *v8 = v89;
        }
        v7 += 4;
        unint64_t v8 = (float *)((char *)v8 + v17);
        --v82;
      }
      while (v82);
    }
LABEL_155:
    v7 += 4 * v115;
    v14 += v114;
    v8 += v117;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKf_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  char v6 = (float *)*((void *)a2 + 2);
  uint64_t v7 = (float *)*((void *)a2 + 4);
  if (v7) {
    uint64_t v135 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v135 = 0;
  }
  float v8 = *((float *)a2 + 2);
  int v134 = *a2;
  uint64_t v9 = *((void *)a2 + 3) - a5;
  uint64_t v10 = *((void *)a2 + 17);
  uint64_t v11 = *((void *)a2 + 18);
  uint64_t v12 = *((void *)a2 + 9);
  uint64_t v13 = *((void *)a2 + 11);
  uint64_t v14 = *((void *)a2 + 7) + v13 * a4;
  uint64_t v15 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v16 = &v15[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  uint64_t v17 = 4 * (v7 != 0);
  if (*(void *)(a1 + 176))
  {
    uint64_t v132 = *((void *)a2 + 15);
    uint64_t v133 = *((void *)a2 + 13);
    uint64_t v131 = v11 + 16 * a3 + 8;
    while (1)
    {
      if (((v132 - v14) | (v14 - v133)) < 0)
      {
        uint64_t v19 = 0;
        unsigned int v20 = 0;
      }
      else
      {
        unint64_t v18 = ((v14 & (unint64_t)~(-1 << v12)) >> (v12 - 4)) & 0xF;
        if (v18 - 7 >= 9) {
          uint64_t v19 = -v10;
        }
        else {
          uint64_t v19 = v10;
        }
        unsigned int v20 = weights_21383[v18] & 0xF;
      }
      uint64_t result = v14 >> v12;
      uint64_t v22 = &v15[(v14 >> v12) * v10];
      if (v134 == 1)
      {
        if (a5 >= 1)
        {
          uint64_t result = v20;
          uint64_t v23 = (uint64_t *)v131;
          uint64_t v24 = a5;
          do
          {
            uint64_t v25 = *(v23 - 1);
            uint64_t v26 = *v23;
            uint64_t v27 = &v22[v25];
            if (v16 >= &v22[v25]) {
              unsigned int v28 = &v22[v25];
            }
            else {
              unsigned int v28 = v16;
            }
            if (v15 > v28) {
              unsigned int v28 = v15;
            }
            unsigned int v29 = (*v28 << 24) | (v28[1] << 16) | (v28[2] << 8);
            if ((v26 & 0xF) != 0)
            {
              unsigned int v30 = &v27[v26 >> 4];
              if (v16 < v30) {
                unsigned int v30 = v16;
              }
              if (v15 > v30) {
                unsigned int v30 = v15;
              }
              int v31 = (*v30 << 24) | (v30[1] << 16) | (v30[2] << 8);
              if (v20)
              {
                if (v16 >= &v27[v19]) {
                  int v32 = &v27[v19];
                }
                else {
                  int v32 = v16;
                }
                if (v15 > v32) {
                  int v32 = v15;
                }
                int v33 = (*v32 << 24) | (v32[1] << 16) | (v32[2] << 8);
                uint64_t v34 = &v27[v19 + (v26 >> 4)];
                if (v16 < v34) {
                  uint64_t v34 = v16;
                }
                if (v15 > v34) {
                  uint64_t v34 = v15;
                }
                unsigned int v35 = BLEND8_21385[v20];
                unsigned int v29 = v29 - ((v35 & v29) >> v20) + ((v35 & v33) >> v20);
                int v31 = v31 - ((v35 & v31) >> v20) + ((((*v34 << 24) | (v34[1] << 16) | (v34[2] << 8)) & v35) >> v20);
              }
              unsigned int v29 = v29
                  - ((BLEND8_21385[*v23 & 0xF] & v29) >> (*v23 & 0xF))
                  + ((BLEND8_21385[*v23 & 0xF] & v31) >> (*v23 & 0xF));
            }
            else if (v20)
            {
              char v36 = &v27[v19];
              if (v16 < &v27[v19]) {
                char v36 = v16;
              }
              if (v15 > v36) {
                char v36 = v15;
              }
              unsigned int v29 = v29
                  - ((BLEND8_21385[v20] & v29) >> v20)
                  + ((((*v36 << 24) | (v36[1] << 16) | (v36[2] << 8)) & BLEND8_21385[v20]) >> v20);
            }
            float v37 = *(float *)&_blt_float[HIBYTE(v29)];
            if (v8 >= 1.0)
            {
              float v48 = *(float *)&_blt_float[BYTE2(v29)];
              float v49 = *(float *)&_blt_float[BYTE1(v29)];
              if (v37 <= v48) {
                float v50 = *(float *)&_blt_float[BYTE2(v29)];
              }
              else {
                float v50 = *(float *)&_blt_float[HIBYTE(v29)];
              }
              if (v49 <= v50) {
                float v51 = v50;
              }
              else {
                float v51 = *(float *)&_blt_float[BYTE1(v29)];
              }
              float v43 = v51 - v37;
              float v44 = v51 - v48;
              float v45 = v51 - v49;
              float v47 = 1.0;
              float v46 = 1.0 - v51;
            }
            else
            {
              float v38 = v8 * v37;
              float v39 = v8 * *(float *)&_blt_float[BYTE2(v29)];
              float v40 = v8 * *(float *)&_blt_float[BYTE1(v29)];
              if (v38 <= v39) {
                float v41 = v8 * *(float *)&_blt_float[BYTE2(v29)];
              }
              else {
                float v41 = v38;
              }
              if (v40 <= v41) {
                float v42 = v41;
              }
              else {
                float v42 = v8 * *(float *)&_blt_float[BYTE1(v29)];
              }
              float v43 = v42 - v38;
              float v44 = v42 - v39;
              float v45 = v42 - v40;
              float v46 = v8 - v42;
              float v47 = v8;
            }
            float *v6 = v43;
            v6[1] = v44;
            v6[2] = v45;
            v6[3] = v46;
            if (v7) {
              *uint64_t v7 = v47;
            }
            v23 += 2;
            v6 += 4;
            uint64_t v7 = (float *)((char *)v7 + v17);
            --v24;
          }
          while (v24);
        }
        goto LABEL_118;
      }
      if (a5 >= 1) {
        break;
      }
LABEL_118:
      v6 += 4 * v9;
      v14 += v13;
      v7 += v135;
      if (!--a6) {
        return result;
      }
    }
    uint64_t v52 = (uint64_t *)v131;
    uint64_t result = a5;
    while (1)
    {
      uint64_t v53 = *(v52 - 1);
      uint64_t v54 = *v52;
      float32x4_t v55 = &v22[v53];
      if (v16 >= &v22[v53]) {
        unsigned int v56 = &v22[v53];
      }
      else {
        unsigned int v56 = v16;
      }
      if (v15 > v56) {
        unsigned int v56 = v15;
      }
      unsigned int v57 = (*v56 << 24) | (v56[1] << 16) | (v56[2] << 8);
      if ((v54 & 0xF) != 0)
      {
        int v58 = &v55[v54 >> 4];
        if (v16 < v58) {
          int v58 = v16;
        }
        if (v15 > v58) {
          int v58 = v15;
        }
        int v59 = (*v58 << 24) | (v58[1] << 16) | (v58[2] << 8);
        if (v20)
        {
          if (v16 >= &v55[v19]) {
            unsigned int v60 = &v55[v19];
          }
          else {
            unsigned int v60 = v16;
          }
          if (v15 > v60) {
            unsigned int v60 = v15;
          }
          int v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
          float v62 = &v55[v19 + (v54 >> 4)];
          if (v16 < v62) {
            float v62 = v16;
          }
          if (v15 > v62) {
            float v62 = v15;
          }
          unsigned int v63 = BLEND8_21385[v20];
          unsigned int v57 = v57 - ((v63 & v57) >> v20) + ((v63 & v61) >> v20);
          int v59 = v59 - ((v63 & v59) >> v20) + ((((*v62 << 24) | (v62[1] << 16) | (v62[2] << 8)) & v63) >> v20);
        }
        unsigned int v57 = v57
            - ((BLEND8_21385[*v52 & 0xF] & v57) >> (*v52 & 0xF))
            + ((BLEND8_21385[*v52 & 0xF] & v59) >> (*v52 & 0xF));
      }
      else if (v20)
      {
        int v64 = &v55[v19];
        if (v16 < &v55[v19]) {
          int v64 = v16;
        }
        if (v15 > v64) {
          int v64 = v15;
        }
        unsigned int v57 = v57
            - ((BLEND8_21385[v20] & v57) >> v20)
            + ((((*v64 << 24) | (v64[1] << 16) | (v64[2] << 8)) & BLEND8_21385[v20]) >> v20);
      }
      float v65 = *(float *)&_blt_float[HIBYTE(v57)];
      if (v8 >= 1.0)
      {
        float v76 = *(float *)&_blt_float[BYTE2(v57)];
        float v77 = *(float *)&_blt_float[BYTE1(v57)];
        if (v65 <= v76) {
          float v78 = *(float *)&_blt_float[BYTE2(v57)];
        }
        else {
          float v78 = *(float *)&_blt_float[HIBYTE(v57)];
        }
        if (v77 <= v78) {
          float v79 = v78;
        }
        else {
          float v79 = *(float *)&_blt_float[BYTE1(v57)];
        }
        float v71 = v79 - v65;
        float v72 = v79 - v76;
        float v73 = v79 - v77;
        float v75 = 1.0;
        float v74 = 1.0 - v79;
      }
      else
      {
        float v66 = v8 * v65;
        float v67 = v8 * *(float *)&_blt_float[BYTE2(v57)];
        float v68 = v8 * *(float *)&_blt_float[BYTE1(v57)];
        if (v66 <= v67) {
          float v69 = v8 * *(float *)&_blt_float[BYTE2(v57)];
        }
        else {
          float v69 = v66;
        }
        if (v68 <= v69) {
          float v70 = v69;
        }
        else {
          float v70 = v8 * *(float *)&_blt_float[BYTE1(v57)];
        }
        float v71 = v70 - v66;
        float v72 = v70 - v67;
        float v73 = v70 - v68;
        float v74 = v8 - v70;
        float v75 = v8;
      }
      if (v7)
      {
        if (v75 < 1.0)
        {
          if (v75 > 0.0)
          {
            float v80 = v6[1];
            float *v6 = v71 + (float)(*v6 * (float)(1.0 - v75));
            v6[1] = v72 + (float)(v80 * (float)(1.0 - v75));
            float v81 = v6[3];
            v6[2] = v73 + (float)(v6[2] * (float)(1.0 - v75));
            v6[3] = v74 + (float)(v81 * (float)(1.0 - v75));
            *uint64_t v7 = v75 + (float)(*v7 * (float)(1.0 - v75));
          }
        }
        else
        {
          float *v6 = v71;
          v6[1] = v72;
          v6[2] = v73;
          v6[3] = v74;
          *uint64_t v7 = v75;
        }
        goto LABEL_117;
      }
      if (v75 >= 1.0) {
        break;
      }
      if (v75 > 0.0)
      {
        float v82 = 1.0 - v75;
        float v83 = v6[1];
        float *v6 = v71 + (float)(*v6 * v82);
        v6[1] = v72 + (float)(v83 * v82);
        float v73 = v73 + (float)(v6[2] * v82);
        float v74 = v74 + (float)(v6[3] * v82);
        goto LABEL_116;
      }
LABEL_117:
      v52 += 2;
      v6 += 4;
      uint64_t v7 = (float *)((char *)v7 + v17);
      if (!--result) {
        goto LABEL_118;
      }
    }
    float *v6 = v71;
    v6[1] = v72;
LABEL_116:
    v6[2] = v73;
    v6[3] = v74;
    goto LABEL_117;
  }
  unint64_t v84 = (uint64_t *)(v11 + 16 * a3);
  do
  {
    uint64_t result = (uint64_t)&v15[(v14 >> v12) * v10];
    if (v134 != 1)
    {
      float v106 = v84;
      uint64_t v107 = a5;
      if (a5 < 1) {
        goto LABEL_178;
      }
      while (1)
      {
        uint64_t v108 = *v106;
        v106 += 2;
        float v109 = (unsigned __int8 *)(result + v108);
        if ((unint64_t)v16 < result + v108) {
          float v109 = v16;
        }
        if (v15 > v109) {
          float v109 = v15;
        }
        uint64_t v110 = v109[1];
        uint64_t v111 = v109[2];
        float v112 = *(float *)&_blt_float[*v109];
        if (v8 >= 1.0)
        {
          float v123 = *(float *)&_blt_float[v110];
          float v124 = *(float *)&_blt_float[v111];
          if (v112 <= v123) {
            float v125 = *(float *)&_blt_float[v110];
          }
          else {
            float v125 = *(float *)&_blt_float[*v109];
          }
          if (v124 <= v125) {
            float v126 = v125;
          }
          else {
            float v126 = *(float *)&_blt_float[v111];
          }
          float v118 = v126 - v112;
          float v119 = v126 - v123;
          float v120 = v126 - v124;
          float v122 = 1.0;
          float v121 = 1.0 - v126;
        }
        else
        {
          float v113 = v8 * v112;
          float v114 = v8 * *(float *)&_blt_float[v110];
          float v115 = v8 * *(float *)&_blt_float[v111];
          if (v113 <= v114) {
            float v116 = v8 * *(float *)&_blt_float[v110];
          }
          else {
            float v116 = v113;
          }
          if (v115 <= v116) {
            float v117 = v116;
          }
          else {
            float v117 = v8 * *(float *)&_blt_float[v111];
          }
          float v118 = v117 - v113;
          float v119 = v117 - v114;
          float v120 = v117 - v115;
          float v121 = v8 - v117;
          float v122 = v8;
        }
        if (v7)
        {
          if (v122 < 1.0)
          {
            if (v122 > 0.0)
            {
              float v127 = v6[1];
              float *v6 = v118 + (float)(*v6 * (float)(1.0 - v122));
              v6[1] = v119 + (float)(v127 * (float)(1.0 - v122));
              float v128 = v6[3];
              v6[2] = v120 + (float)(v6[2] * (float)(1.0 - v122));
              v6[3] = v121 + (float)(v128 * (float)(1.0 - v122));
              *uint64_t v7 = v122 + (float)(*v7 * (float)(1.0 - v122));
            }
          }
          else
          {
            float *v6 = v118;
            v6[1] = v119;
            v6[2] = v120;
            v6[3] = v121;
            *uint64_t v7 = v122;
          }
          goto LABEL_177;
        }
        if (v122 >= 1.0) {
          break;
        }
        if (v122 > 0.0)
        {
          float v129 = 1.0 - v122;
          float v130 = v6[1];
          float *v6 = v118 + (float)(*v6 * v129);
          v6[1] = v119 + (float)(v130 * v129);
          float v120 = v120 + (float)(v6[2] * v129);
          float v121 = v121 + (float)(v6[3] * v129);
          goto LABEL_176;
        }
LABEL_177:
        v6 += 4;
        uint64_t v7 = (float *)((char *)v7 + v17);
        if (!--v107) {
          goto LABEL_178;
        }
      }
      float *v6 = v118;
      v6[1] = v119;
LABEL_176:
      v6[2] = v120;
      v6[3] = v121;
      goto LABEL_177;
    }
    if (a5 >= 1)
    {
      unsigned int v85 = v84;
      uint64_t v86 = a5;
      do
      {
        uint64_t v87 = *v85;
        v85 += 2;
        float v88 = (unsigned __int8 *)(result + v87);
        if ((unint64_t)v16 < result + v87) {
          float v88 = v16;
        }
        if (v15 > v88) {
          float v88 = v15;
        }
        uint64_t v89 = v88[1];
        uint64_t v90 = v88[2];
        float v91 = *(float *)&_blt_float[*v88];
        if (v8 >= 1.0)
        {
          float v102 = *(float *)&_blt_float[v89];
          float v103 = *(float *)&_blt_float[v90];
          if (v91 <= v102) {
            float v104 = *(float *)&_blt_float[v89];
          }
          else {
            float v104 = *(float *)&_blt_float[*v88];
          }
          if (v103 <= v104) {
            float v105 = v104;
          }
          else {
            float v105 = *(float *)&_blt_float[v90];
          }
          float v97 = v105 - v91;
          float v98 = v105 - v102;
          float v99 = v105 - v103;
          float v101 = 1.0;
          float v100 = 1.0 - v105;
        }
        else
        {
          float v92 = v8 * v91;
          float v93 = v8 * *(float *)&_blt_float[v89];
          float v94 = v8 * *(float *)&_blt_float[v90];
          if (v92 <= v93) {
            float v95 = v8 * *(float *)&_blt_float[v89];
          }
          else {
            float v95 = v92;
          }
          if (v94 <= v95) {
            float v96 = v95;
          }
          else {
            float v96 = v8 * *(float *)&_blt_float[v90];
          }
          float v97 = v96 - v92;
          float v98 = v96 - v93;
          float v99 = v96 - v94;
          float v100 = v8 - v96;
          float v101 = v8;
        }
        float *v6 = v97;
        v6[1] = v98;
        v6[2] = v99;
        v6[3] = v100;
        if (v7) {
          *uint64_t v7 = v101;
        }
        v6 += 4;
        uint64_t v7 = (float *)((char *)v7 + v17);
        --v86;
      }
      while (v86);
    }
LABEL_178:
    v6 += 4 * v9;
    v14 += v13;
    v7 += v135;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKf_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12 = (float32x2_t *)*((void *)a2 + 2);
  uint64_t v13 = (float *)*((void *)a2 + 4);
  if (v13) {
    uint64_t v86 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v86 = 0;
  }
  float v14 = *((float *)a2 + 2);
  int v15 = *a2;
  uint64_t v16 = *((void *)a2 + 3) - a5;
  uint64_t v17 = *((void *)a2 + 17);
  uint64_t v18 = *((void *)a2 + 18);
  uint64_t v19 = *((void *)a2 + 9);
  uint64_t v20 = *((void *)a2 + 11);
  uint64_t v21 = *((void *)a2 + 7) + v20 * a4;
  uint64_t v22 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v23 = &v22[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  uint64_t v24 = 4 * (v13 != 0);
  if (*(void *)(a1 + 176))
  {
    uint64_t v85 = *((void *)a2 + 13);
    uint64_t v84 = *((void *)a2 + 15);
    float v25 = fminf(v14, 1.0);
    *(float *)&a9 = 1.0 - v25;
    float32x2_t v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    uint64_t v83 = v18 + 16 * a3 + 8;
    while (1)
    {
      if (((v84 - v21) | (v21 - v85)) < 0)
      {
        unsigned int v29 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        unint64_t v27 = ((v21 & (unint64_t)~(-1 << v19)) >> (v19 - 4)) & 0xF;
        if (v27 - 7 >= 9) {
          uint64_t v28 = -v17;
        }
        else {
          uint64_t v28 = v17;
        }
        unsigned int v29 = weights_21383[v27] & 0xF;
      }
      uint64_t result = v21 >> v19;
      int v31 = &v22[(v21 >> v19) * v17];
      if (v15 == 1)
      {
        if (a5 >= 1)
        {
          uint64_t result = v29;
          int v32 = (uint64_t *)v83;
          uint64_t v33 = a5;
          do
          {
            uint64_t v34 = *(v32 - 1);
            uint64_t v35 = *v32;
            char v36 = &v31[v34];
            if (v23 >= &v31[v34]) {
              float v37 = &v31[v34];
            }
            else {
              float v37 = v23;
            }
            if (v22 > v37) {
              float v37 = v22;
            }
            unsigned int v38 = *v37;
            if ((v35 & 0xF) != 0)
            {
              float v39 = &v36[v35 >> 4];
              if (v23 < v39) {
                float v39 = v23;
              }
              if (v22 > v39) {
                float v39 = v22;
              }
              unsigned int v40 = *v39;
              if (v29)
              {
                float v41 = &v36[v28];
                if (v23 >= v41) {
                  float v42 = v41;
                }
                else {
                  float v42 = v23;
                }
                if (v22 > v42) {
                  float v42 = v22;
                }
                unsigned int v43 = *v42;
                float v44 = &v41[v35 >> 4];
                if (v23 < v44) {
                  float v44 = v23;
                }
                if (v22 > v44) {
                  float v44 = v22;
                }
                int v45 = BLEND8_21385[v29];
                unsigned int v38 = v38 - ((v45 & v38) >> v29) + ((v45 & v43) >> v29);
                unsigned int v40 = v40 - ((v45 & v40) >> v29) + ((v45 & *v44) >> v29);
              }
              unsigned int v38 = v38
                  - ((BLEND8_21385[*v32 & 0xF] & v38) >> (*v32 & 0xF))
                  + ((BLEND8_21385[*v32 & 0xF] & v40) >> (*v32 & 0xF));
            }
            else if (v29)
            {
              float v46 = &v36[v28];
              if (v23 < &v36[v28]) {
                float v46 = v23;
              }
              if (v22 > v46) {
                float v46 = v22;
              }
              unsigned int v38 = v38 - ((BLEND8_21385[v29] & v38) >> v29) + ((BLEND8_21385[v29] & *v46) >> v29);
            }
            float v47 = *(float *)&_blt_float[v38];
            float32_t v48 = (float)(v47 - v47) * v25;
            v12->f32[0] = v48;
            v12->f32[1] = v48;
            v12[1].f32[0] = v48;
            v12[1].f32[1] = (float)(1.0 - v47) * v25;
            if (v13) {
              *uint64_t v13 = v25;
            }
            v32 += 2;
            v12 += 2;
            uint64_t v13 = (float *)((char *)v13 + v24);
            --v33;
          }
          while (v33);
        }
        goto LABEL_88;
      }
      if (a5 >= 1) {
        break;
      }
LABEL_88:
      v12 += 2 * v16;
      v21 += v20;
      v13 += v86;
      if (!--a6) {
        return result;
      }
    }
    float v49 = (uint64_t *)v83;
    uint64_t result = a5;
    while (1)
    {
      uint64_t v50 = *(v49 - 1);
      uint64_t v51 = *v49;
      uint64_t v52 = &v31[v50];
      if (v23 >= &v31[v50]) {
        uint64_t v53 = &v31[v50];
      }
      else {
        uint64_t v53 = v23;
      }
      if (v22 > v53) {
        uint64_t v53 = v22;
      }
      unsigned int v54 = *v53;
      if ((v51 & 0xF) != 0)
      {
        float32x4_t v55 = &v52[v51 >> 4];
        if (v23 < v55) {
          float32x4_t v55 = v23;
        }
        if (v22 > v55) {
          float32x4_t v55 = v22;
        }
        unsigned int v56 = *v55;
        if (v29)
        {
          if (v23 >= &v52[v28]) {
            unsigned int v57 = &v52[v28];
          }
          else {
            unsigned int v57 = v23;
          }
          if (v22 > v57) {
            unsigned int v57 = v22;
          }
          unsigned int v58 = *v57;
          int v59 = &v52[v28 + (v51 >> 4)];
          if (v23 < v59) {
            int v59 = v23;
          }
          if (v22 > v59) {
            int v59 = v22;
          }
          int v60 = BLEND8_21385[v29];
          unsigned int v54 = v54 - ((v60 & v54) >> v29) + ((v60 & v58) >> v29);
          unsigned int v56 = v56 - ((v60 & v56) >> v29) + ((v60 & *v59) >> v29);
        }
        unsigned int v54 = v54
            - ((BLEND8_21385[*v49 & 0xF] & v54) >> (*v49 & 0xF))
            + ((BLEND8_21385[*v49 & 0xF] & v56) >> (*v49 & 0xF));
      }
      else if (v29)
      {
        int v61 = &v52[v28];
        if (v23 < &v52[v28]) {
          int v61 = v23;
        }
        if (v22 > v61) {
          int v61 = v22;
        }
        unsigned int v54 = v54 - ((BLEND8_21385[v29] & v54) >> v29) + ((BLEND8_21385[v29] & *v61) >> v29);
      }
      float v62 = *(float *)&_blt_float[v54];
      float v63 = v62 - v62;
      float v64 = (float)(1.0 - v62) * v25;
      *(float *)&a12 = v63 * v25;
      if (v13)
      {
        if (v25 < 1.0)
        {
          if (v25 > 0.0)
          {
            *uint64_t v12 = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0), v26, *v12);
            float v65 = v12[1].f32[1];
            v12[1].f32[0] = *(float *)&a12 + (float)(v12[1].f32[0] * *(float *)&a9);
            v12[1].f32[1] = v64 + (float)(v65 * *(float *)&a9);
            *uint64_t v13 = v25 + (float)(*v13 * *(float *)&a9);
          }
        }
        else
        {
          v12->i32[0] = LODWORD(a12);
          v12->i32[1] = LODWORD(a12);
          v12[1].i32[0] = LODWORD(a12);
          v12[1].f32[1] = v64;
          *uint64_t v13 = v25;
        }
        goto LABEL_87;
      }
      if (v25 >= 1.0) {
        break;
      }
      if (v25 > 0.0)
      {
        *uint64_t v12 = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0), v26, *v12);
        float v64 = v64 + (float)(v12[1].f32[1] * *(float *)&a9);
        v12[1].f32[0] = *(float *)&a12 + (float)(v12[1].f32[0] * *(float *)&a9);
        goto LABEL_86;
      }
LABEL_87:
      v49 += 2;
      v12 += 2;
      uint64_t v13 = (float *)((char *)v13 + v24);
      if (!--result) {
        goto LABEL_88;
      }
    }
    v12->i32[0] = LODWORD(a12);
    v12->i32[1] = LODWORD(a12);
    v12[1].i32[0] = LODWORD(a12);
LABEL_86:
    v12[1].f32[1] = v64;
    goto LABEL_87;
  }
  float v66 = (uint64_t *)(v18 + 16 * a3);
  float v67 = fminf(v14, 1.0);
  *(float *)&a9 = 1.0 - v67;
  float32x2_t v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  do
  {
    uint64_t result = (uint64_t)&v22[(v21 >> v19) * v17];
    if (v15 != 1)
    {
      float v75 = v66;
      uint64_t v76 = a5;
      if (a5 < 1) {
        goto LABEL_118;
      }
      while (1)
      {
        uint64_t v77 = *v75;
        v75 += 2;
        float v78 = (unsigned __int8 *)(result + v77);
        if ((unint64_t)v23 < result + v77) {
          float v78 = v23;
        }
        if (v22 > v78) {
          float v78 = v22;
        }
        float v79 = *(float *)&_blt_float[*v78];
        float v80 = v79 - v79;
        float v81 = (float)(1.0 - v79) * v67;
        *(float *)&a12 = v80 * v67;
        if (v13)
        {
          if (v67 < 1.0)
          {
            if (v67 > 0.0)
            {
              *uint64_t v12 = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0), v68, *v12);
              float v82 = v12[1].f32[1];
              v12[1].f32[0] = *(float *)&a12 + (float)(v12[1].f32[0] * *(float *)&a9);
              v12[1].f32[1] = v81 + (float)(v82 * *(float *)&a9);
              *uint64_t v13 = v67 + (float)(*v13 * *(float *)&a9);
            }
          }
          else
          {
            v12->i32[0] = LODWORD(a12);
            v12->i32[1] = LODWORD(a12);
            v12[1].i32[0] = LODWORD(a12);
            v12[1].f32[1] = v81;
            *uint64_t v13 = v67;
          }
          goto LABEL_117;
        }
        if (v67 >= 1.0) {
          break;
        }
        if (v67 > 0.0)
        {
          *uint64_t v12 = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0), v68, *v12);
          float v81 = v81 + (float)(v12[1].f32[1] * *(float *)&a9);
          v12[1].f32[0] = *(float *)&a12 + (float)(v12[1].f32[0] * *(float *)&a9);
          goto LABEL_116;
        }
LABEL_117:
        v12 += 2;
        uint64_t v13 = (float *)((char *)v13 + v24);
        if (!--v76) {
          goto LABEL_118;
        }
      }
      v12->i32[0] = LODWORD(a12);
      v12->i32[1] = LODWORD(a12);
      v12[1].i32[0] = LODWORD(a12);
LABEL_116:
      v12[1].f32[1] = v81;
      goto LABEL_117;
    }
    if (a5 >= 1)
    {
      float v69 = v66;
      uint64_t v70 = a5;
      do
      {
        uint64_t v71 = *v69;
        v69 += 2;
        float v72 = (unsigned __int8 *)(result + v71);
        if ((unint64_t)v23 < result + v71) {
          float v72 = v23;
        }
        if (v22 > v72) {
          float v72 = v22;
        }
        float v73 = *(float *)&_blt_float[*v72];
        float32_t v74 = (float)(v73 - v73) * v67;
        v12->f32[0] = v74;
        v12->f32[1] = v74;
        v12[1].f32[0] = v74;
        v12[1].f32[1] = (float)(1.0 - v73) * v67;
        if (v13) {
          *uint64_t v13 = v67;
        }
        v12 += 2;
        uint64_t v13 = (float *)((char *)v13 + v24);
        --v70;
      }
      while (v70);
    }
LABEL_118:
    v12 += 2 * v16;
    v21 += v20;
    v13 += v86;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKf_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t)v3;
  v20[482] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(int **)v2;
  BOOL v8 = !*((void *)v3 + 12) && !*(void *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  int v9 = *(_DWORD *)(*(void *)(*(void *)v2 + 56) + 16 * *v3 + 8 * v8 + 4 * (*((void *)v3 + 6) == 0));
  if (v9 > 27) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v13, (uint64_t)v18) < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)v5 & 0xF000000) != 0x4000000)
  {
    if (v13) {
      goto LABEL_22;
    }
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(v5 + 16))
  {
    uint64_t v12 = CMYKf_shade_radial_CMYK;
  }
  else if (*(void *)(v5 + 24))
  {
    uint64_t v12 = CMYKf_shade_conic_CMYK;
  }
  else if (v16 < 2)
  {
    uint64_t v12 = CMYKf_shade_axial_CMYK;
  }
  else
  {
    uint64_t v12 = CMYKf_shade_custom_CMYK;
  }
  uint64_t v13 = v12;
LABEL_22:
  int v14 = *v7;
  int v15 = v14;
  CMYKf_image_mark(v6, (uint64_t)&v13, v9, v11);
  if (v17 && (v17 < &v19 || v20 < v17)) {
    free(v17);
  }
  return 1;
}

void CMYKf_shade_axial_CMYK(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v5 = *(float *)(a1 + 280);
  uint64_t v6 = *(float **)(a1 + 272);
  float v7 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(v6[1] * (float)a3)) + (float)(v5 * (float)(v6[1] * (float)a2)));
  float v8 = *(float *)(a1 + 336);
  float v9 = *(float *)(a1 + 344);
  float v10 = *(float *)(a1 + 304);
  float v11 = *(float *)(a1 + 308);
  LODWORD(v12) = *(_DWORD *)(a1 + 320);
  int v13 = *(_DWORD *)(a1 + 324);
  uint64_t v16 = a1 + 144;
  int v14 = *(_DWORD **)(a1 + 144);
  uint64_t v15 = *(void *)(v16 + 8);
  uint64_t v17 = *(float32x4_t **)(a1 + 384);
  if (*(void *)(a1 + 392)) {
    uint64_t v18 = *(float **)(a1 + 392);
  }
  else {
    uint64_t v18 = v6;
  }
  uint64_t v20 = *(void *)(a1 + 32);
  char v19 = *(float **)(a1 + 40);
  if (v19) {
    uint64_t v6 = v19;
  }
  if (v5 != 0.0)
  {
    for (uint64_t i = (float32x4_t *)(v15 + 16); ; uint64_t i = (float32x4_t *)((char *)i + 20))
    {
      LODWORD(v23) = v12;
      if (v7 >= v10)
      {
        LODWORD(v23) = v13;
        if (v7 <= v11) {
          LODWORD(v23) = (int)(float)(v9 * (float)(v7 - v8));
        }
      }
      if ((v23 & 0x80000000) != 0)
      {
        if (!v17)
        {
          char v27 = 0;
          goto LABEL_29;
        }
        float v25 = *v18;
        float32x4_t v26 = *v17;
      }
      else
      {
        uint64_t v24 = 16 * v23;
        uint64_t v23 = v23;
        if (!v19) {
          uint64_t v23 = 0;
        }
        float v25 = v6[v23];
        float32x4_t v26 = *(float32x4_t *)(v20 + v24);
        if (!v19) {
          goto LABEL_28;
        }
      }
      float32x4_t v26 = vmulq_n_f32(v26, v25);
LABEL_28:
      i[-1] = v26;
      i->f32[0] = v25;
      char v27 = -1;
LABEL_29:
      float v7 = v5 + v7;
      *(unsigned char *)int v14 = v27;
      int v14 = (_DWORD *)((char *)v14 + 1);
      if (!--a4) {
        return;
      }
    }
  }
  if (v7 >= v10)
  {
    LODWORD(v12) = v13;
    if (v7 <= v11) {
      LODWORD(v12) = (int)(float)(v9 * (float)(v7 - v8));
    }
  }
  if ((v12 & 0x80000000) == 0 || v17)
  {
    if ((v12 & 0x80000000) != 0)
    {
      float v29 = *v18;
      float32x4_t v30 = *v17;
    }
    else
    {
      uint64_t v28 = 16 * v12;
      uint64_t v12 = v12;
      if (!v19) {
        uint64_t v12 = 0;
      }
      float v29 = v6[v12];
      float32x4_t v30 = *(float32x4_t *)(v20 + v28);
      if (!v19) {
        goto LABEL_39;
      }
    }
    float32x4_t v30 = vmulq_n_f32(v30, v29);
LABEL_39:
    int v31 = a4 + 4;
    do
    {
      *(float32x4_t *)uint64_t v15 = v30;
      *(float *)(v15 + 16) = v29;
      *(float32x4_t *)(v15 + 20) = v30;
      *(float *)(v15 + 36) = v29;
      *(float32x4_t *)(v15 + 40) = v30;
      *(float *)(v15 + 56) = v29;
      *(float32x4_t *)(v15 + 60) = v30;
      v31 -= 4;
      *(float *)(v15 + 76) = v29;
      v15 += 80;
      *v14++ = -1;
    }
    while (v31 > 4);
    return;
  }
  if (a4 >= 4) {
    int v21 = 4;
  }
  else {
    int v21 = a4;
  }
  bzero(v14, ((a4 - v21 + 3) & 0xFFFFFFFC) + 4);
}

uint64_t CMYKf_shade_custom_CMYK(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, int32x4_t a6)
{
  uint64_t v6 = *(void *)(result + 272);
  float32x2_t v7 = *(float32x2_t *)(result + 280);
  *(float32x2_t *)a6.i8 = vadd_f32(*(float32x2_t *)(result + 296), vmla_n_f32(vmul_n_f32(*(float32x2_t *)(result + 288), *(float *)(v6 + 4) * (float)a3), v7, *(float *)(v6 + 4) * (float)a2));
  float32x4_t v8 = *(float32x4_t *)(result + 304);
  float v9 = *(float *)(result + 336);
  float v10 = *(float *)(result + 348);
  float v11 = *(float *)(result + 344);
  float v12 = *(float *)(result + 356);
  int v13 = *(char **)(result + 144);
  int v14 = *(float32x4_t **)(result + 384);
  uint64_t v15 = *(float **)(result + 392);
  if (!v15) {
    uint64_t v15 = *(float **)(result + 272);
  }
  uint64_t v16 = *(void *)(result + 32);
  uint64_t v17 = *(void *)(result + 40);
  if (v17) {
    int v18 = *(_DWORD *)(result + 48);
  }
  else {
    int v18 = 0;
  }
  if (v17) {
    uint64_t v6 = *(void *)(result + 40);
  }
  int v19 = 4 * *(_DWORD *)(result + 48);
  uint64_t v20 = (float32x4_t *)(*(void *)(result + 152) + 16);
  do
  {
    float32x4_t v21 = (float32x4_t)vzip1q_s32(a6, a6);
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(v8, v21))), vmovn_s32(vcgtq_f32(v21, v8))), 0xFuLL))) & 1) == 0)
    {
      int v24 = (int)(float)(v12 * (float)(*(float *)&a6.i32[1] - v10));
      float v25 = v11 * (float)(*(float *)a6.i32 - v9);
      uint64_t v26 = v16 + 4 * v19 * v24;
      uint64_t v27 = 16 * (int)v25;
      uint64_t v28 = v6 + 4 * v18 * v24;
      uint64_t result = (int)v25;
      if (!v17) {
        uint64_t result = 0;
      }
      float v22 = *(float *)(v28 + 4 * result);
      float32x4_t v23 = *(float32x4_t *)(v26 + v27);
      if (!v17) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    if (v14)
    {
      float v22 = *v15;
      float32x4_t v23 = *v14;
LABEL_15:
      float32x4_t v23 = vmulq_n_f32(v23, v22);
LABEL_16:
      v20[-1] = v23;
      v20->f32[0] = v22;
      char v29 = -1;
      goto LABEL_18;
    }
    char v29 = 0;
LABEL_18:
    *(float32x2_t *)a6.i8 = vadd_f32(v7, *(float32x2_t *)a6.i8);
    *v13++ = v29;
    uint64_t v20 = (float32x4_t *)((char *)v20 + 20);
    --a4;
  }
  while (a4);
  return result;
}

void CMYKf_shade_conic_CMYK(float32x2_t *a1, uint64_t a2, uint64_t a3, int a4, int64x2_t a5, __n128 a6)
{
  float32x2_t v7 = a1[35];
  a6.n128_u64[0] = (unint64_t)vadd_f32(a1[37], vmla_n_f32(vmul_n_f32(a1[36], *(float *)(*(void *)&a1[34] + 4) * (float)a3), v7, *(float *)(*(void *)&a1[34] + 4) * (float)a2));
  float v8 = a1[42].f32[0];
  float v9 = a1[43].f32[0];
  float v10 = a1[38].f32[0];
  float v12 = (unsigned char *)a1[18];
  float v11 = (float32x4_t *)a1[19];
  float32x2_t v13 = a1[4];
  float32x2_t v14 = a1[5];
  if (v14) {
    float32x2_t v15 = a1[5];
  }
  else {
    float32x2_t v15 = a1[34];
  }
  float v16 = a1[38].f32[1] - v10;
  *(float32x2_t *)a5.i8 = a1[5];
  int64x2_t v33 = a5;
  __asm { FMOV            V0.4S, #1.0 }
  int8x16_t v32 = (int8x16_t)_Q0;
  do
  {
    _Q0.i64[0] = 0;
    int8x16_t v34 = (int8x16_t)vdupq_lane_s64(vceqq_s64(v33, _Q0).i64[0], 0);
    __n128 v35 = a6;
    *(float *)_Q0.i32 = v9
                      * (float)((float)(v10
                                      + (float)((float)((float)(atan2f(a6.n128_f32[1], a6.n128_f32[0]) * 0.15915) + 0.5)
                                              * v16))
                              - v8);
    signed int v23 = vcvtms_s32_f32(*(float *)_Q0.i32);
    unsigned int v24 = vcvtms_s32_f32(v9 + *(float *)_Q0.i32);
    *(float *)v25.i32 = ceilf(*(float *)_Q0.i32);
    if (*(float *)_Q0.i32 < 0.0) {
      signed int v23 = v24;
    }
    float v26 = ceilf(*(float *)_Q0.i32 - v9);
    if (*(float *)_Q0.i32 > v9) {
      *(float *)v25.i32 = v26;
    }
    uint64_t v27 = v23;
    if (!*(void *)&v14) {
      uint64_t v27 = 0;
    }
    int v28 = (int)*(float *)v25.i32;
    v25.i32[0] = *(_DWORD *)(*(void *)&v15 + 4 * v27);
    uint64_t v29 = v28;
    if (!*(void *)&v14) {
      uint64_t v29 = 0;
    }
    v22.i32[0] = *(_DWORD *)(*(void *)&v15 + 4 * v29);
    float v30 = *(float *)_Q0.i32 - (float)(int)floorf(*(float *)_Q0.i32);
    float32x4_t v31 = vmulq_f32(*(float32x4_t *)(*(void *)&v13 + 16 * v23), (float32x4_t)vbslq_s8(v34, v32, (int8x16_t)vdupq_lane_s32(v25, 0)));
    *float v11 = vmlaq_n_f32(v31, vsubq_f32(vmulq_f32(*(float32x4_t *)(*(void *)&v13 + 16 * v28), (float32x4_t)vbslq_s8(v34, v32, (int8x16_t)vdupq_lane_s32(v22, 0))), v31), v30);
    v11[1].f32[0] = *(float *)v25.i32 + (float)(v30 * (float)(*(float *)v22.i32 - *(float *)v25.i32));
    a6.n128_u64[1] = v35.n128_u64[1];
    a6.n128_u64[0] = (unint64_t)vadd_f32(v7, (float32x2_t)v35.n128_u64[0]);
    *v12++ = -1;
    float v11 = (float32x4_t *)((char *)v11 + 20);
    --a4;
  }
  while (a4);
}

void CMYKf_shade_radial_CMYK(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float32x2_t v7 = *(float **)(a1 + 400);
  float v8 = *(float *)(a1 + 280);
  float v9 = *(float *)(a1 + 284);
  float v10 = *(float **)(a1 + 272);
  float v11 = v10[1];
  float v12 = v11 * (float)a2;
  float v13 = v11 * (float)a3;
  float v14 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v13) + (float)(v8 * v12));
  float v15 = *(float *)(a1 + 300) + (float)((float)(v13 * *(float *)(a1 + 292)) + (float)(v9 * v12));
  float v16 = *(float *)(a1 + 336);
  float v17 = *(float *)(a1 + 344);
  float v18 = *(float *)(a1 + 304);
  float v19 = *(float *)(a1 + 308);
  uint64_t v20 = *(unsigned int *)(a1 + 324);
  float v21 = v7[2];
  float v22 = v7[4];
  float v23 = v7[5];
  float v24 = v7[7];
  uint64_t v27 = a1 + 144;
  int32x2_t v25 = *(char **)(a1 + 144);
  uint64_t v26 = *(void *)(v27 + 8);
  int v28 = *(float32x4_t **)(a1 + 384);
  if (*(void *)(a1 + 392)) {
    uint64_t v29 = *(float **)(a1 + 392);
  }
  else {
    uint64_t v29 = v10;
  }
  uint64_t v30 = *(void *)(a1 + 32);
  uint64_t v31 = *(void *)(a1 + 40);
  if (v31) {
    int8x16_t v32 = *(float **)(a1 + 40);
  }
  else {
    int8x16_t v32 = v10;
  }
  if (v21 != 0.0 || v24 != 0.0 || v9 != 0.0)
  {
    int v36 = *(_DWORD *)(a1 + 320);
    float v37 = v7[3];
    float v38 = v7[8];
    float v39 = -v7[6];
    float v40 = v19 - v18;
    for (uint64_t i = (float32x4_t *)(v26 + 16); ; uint64_t i = (float32x4_t *)((char *)i + 20))
    {
      float v42 = v39 + (float)((float)(v14 + v14) * v21);
      float v43 = (float)((float)(v15 * v15) + (float)(v14 * v14)) - v24;
      if (v23 == 0.0)
      {
        float v50 = v43 / v42;
      }
      else
      {
        float v44 = (float)((float)(v23 * -4.0) * v43) + (float)(v42 * v42);
        if (v44 < 0.0) {
          goto LABEL_48;
        }
        float v45 = sqrtf(v44);
        float v46 = v38 * (float)(v42 - v45);
        float v47 = v42 + v45;
        float v48 = v38 * v47;
        BOOL v49 = (float)(v38 * v47) <= v46;
        if ((float)(v38 * v47) <= v46) {
          float v50 = v38 * v47;
        }
        else {
          float v50 = v46;
        }
        if (v49) {
          float v48 = v46;
        }
        if (v48 < 0.0)
        {
          _NF = v48 < v37;
LABEL_31:
          LODWORD(v52) = v36;
          if (_NF) {
            goto LABEL_48;
          }
LABEL_32:
          if ((v52 & 0x80000000) == 0) {
            goto LABEL_44;
          }
          goto LABEL_48;
        }
        if (v48 <= 1.0)
        {
          float v53 = v18 + (float)(v48 * v40);
          goto LABEL_43;
        }
        if ((v20 & 0x80000000) == 0)
        {
          LODWORD(v52) = v20;
          if (v48 <= v22)
          {
LABEL_44:
            uint64_t v54 = 16 * v52;
            uint64_t v52 = v52;
            if (!v31) {
              uint64_t v52 = 0;
            }
            float v55 = v32[v52];
            float32x4_t v56 = *(float32x4_t *)(v30 + v54);
            if (!v31) {
              goto LABEL_51;
            }
            goto LABEL_50;
          }
        }
      }
      if (v50 < 0.0)
      {
        _NF = v50 < v37;
        goto LABEL_31;
      }
      if (v50 > 1.0)
      {
        LODWORD(v52) = v20;
        if (v50 > v22) {
          goto LABEL_48;
        }
        goto LABEL_32;
      }
      float v53 = v18 + (float)(v50 * v40);
LABEL_43:
      LODWORD(v52) = (int)(float)(v17 * (float)(v53 - v16));
      if ((v52 & 0x80000000) == 0) {
        goto LABEL_44;
      }
LABEL_48:
      if (!v28)
      {
        char v57 = 0;
        goto LABEL_53;
      }
      float v55 = *v29;
      float32x4_t v56 = *v28;
LABEL_50:
      float32x4_t v56 = vmulq_n_f32(v56, v55);
LABEL_51:
      i[-1] = v56;
      i->f32[0] = v55;
      char v57 = -1;
LABEL_53:
      float v14 = v8 + v14;
      float v15 = v9 + v15;
      *v25++ = v57;
      if (!--a4) {
        return;
      }
    }
  }
  float v33 = v15 * v15;
  float v34 = -v23;
  if (v33 <= (float)-v23)
  {
    float v58 = fabsf(v7[8]);
    float v59 = v23 * -4.0;
    float v60 = v19 - v18;
    if (v31) {
      uint64_t v61 = v20;
    }
    else {
      uint64_t v61 = 0;
    }
    int v62 = a4 + 2;
    v4.i64[0] = *(void *)(a1 + 40);
    while (1)
    {
      float v63 = v33 + (float)(v14 * v14);
      float v64 = v8 + v14;
      float v65 = v33 + (float)(v64 * v64);
      if (v63 > v34 && v65 > v34)
      {
        if ((v20 & 0x80000000) != 0)
        {
          if (!v28)
          {
            char v87 = 0;
            char v85 = 0;
            goto LABEL_106;
          }
          v5.i32[0] = *(__int32 *)v29;
          float32x4_t v79 = vmulq_n_f32(*v28, *v29);
        }
        else
        {
          v5.i64[0] = 0;
          int64x2_t v5 = vceqq_s64(v4, v5);
          int8x16_t v74 = (int8x16_t)vdupq_lane_s64(v5.i64[0], 0);
          *(float *)v5.i32 = v32[v61];
          __asm { FMOV            V24.4S, #1.0 }
          float32x4_t v79 = vmulq_f32(*(float32x4_t *)(v30 + 16 * (int)v20), (float32x4_t)vbslq_s8(v74, _Q24, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0)));
        }
        *(float32x4_t *)uint64_t v26 = v79;
        *(_DWORD *)(v26 + 16) = v5.i32[0];
        goto LABEL_104;
      }
      float v67 = sqrtf(v59 * v65);
      float v68 = v58 * sqrtf(v59 * v63);
      float v69 = v58 * v67;
      uint64_t v70 = (int)(float)(v17 * (float)((float)(v18 + (float)(v68 * v60)) - v16));
      uint64_t v71 = (int)(float)(v17 * (float)((float)(v18 + (float)((float)(v58 * v67) * v60)) - v16));
      if (v68 <= 1.0 && v69 <= 1.0)
      {
        uint64_t v80 = 16 * v70;
        uint64_t v70 = (int)v70;
        if (!v31) {
          uint64_t v70 = 0;
        }
        float v81 = v32[v70];
        float32x4_t v82 = *(float32x4_t *)(v30 + v80);
        if (v31)
        {
          float32x4_t v82 = vmulq_n_f32(v82, v81);
          v5.i32[0] = *(_DWORD *)(v31 + 4 * (int)v71);
          float32x4_t v79 = vmulq_n_f32(*(float32x4_t *)(v30 + 16 * (int)v71), *(float *)v5.i32);
        }
        else
        {
          v5.i32[0] = *(__int32 *)v10;
          float32x4_t v79 = *(float32x4_t *)(v30 + 16 * (int)v71);
        }
        *(float32x4_t *)uint64_t v26 = v82;
        *(float *)(v26 + 16) = v81;
LABEL_104:
        char v85 = -1;
        goto LABEL_105;
      }
      if (v68 <= 1.0)
      {
        if ((v70 & 0x80000000) == 0)
        {
          uint64_t v73 = 4 * (int)v70;
          if (!v31) {
            uint64_t v70 = 0;
          }
LABEL_84:
          float v83 = v32[v70];
          float32x4_t v84 = *(float32x4_t *)(v30 + 4 * v73);
          if (v31) {
LABEL_88:
          }
            float32x4_t v84 = vmulq_n_f32(v84, v83);
          *(float32x4_t *)uint64_t v26 = v84;
          *(float *)(v26 + 16) = v83;
          char v85 = -1;
          goto LABEL_90;
        }
      }
      else if (v68 <= v22)
      {
        uint64_t v70 = v61;
        uint64_t v73 = 4 * (int)v20;
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_84;
        }
      }
      if (v28)
      {
        float v83 = *v29;
        float32x4_t v84 = *v28;
        goto LABEL_88;
      }
      char v85 = 0;
LABEL_90:
      if (v69 <= 1.0)
      {
        if ((v71 & 0x80000000) == 0)
        {
          uint64_t v86 = 4 * (int)v71;
          if (!v31) {
            uint64_t v71 = 0;
          }
LABEL_97:
          *(float *)v5.i32 = v32[v71];
          float32x4_t v79 = *(float32x4_t *)(v30 + 4 * v86);
          if (!v31) {
            goto LABEL_105;
          }
          goto LABEL_101;
        }
      }
      else if (v69 <= v22)
      {
        uint64_t v71 = v61;
        uint64_t v86 = 4 * (int)v20;
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_97;
        }
      }
      if (!v28)
      {
        char v87 = 0;
        goto LABEL_106;
      }
      v5.i32[0] = *(__int32 *)v29;
      float32x4_t v79 = *v28;
LABEL_101:
      float32x4_t v79 = vmulq_n_f32(v79, *(float *)v5.i32);
LABEL_105:
      *(float32x4_t *)(v26 + 20) = v79;
      *(_DWORD *)(v26 + 36) = v5.i32[0];
      char v87 = -1;
LABEL_106:
      float v14 = v8 + v64;
      v26 += 40;
      *int32x2_t v25 = v85;
      v25[1] = v87;
      v25 += 2;
      v62 -= 2;
      if (v62 <= 2) {
        return;
      }
    }
  }
  if (v28 || (v20 & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) != 0)
    {
      float v89 = *v29;
      float32x4_t v90 = *v28;
    }
    else
    {
      if (v31) {
        uint64_t v88 = v20;
      }
      else {
        uint64_t v88 = 0;
      }
      float v89 = v32[v88];
      float32x4_t v90 = *(float32x4_t *)(v30 + 16 * (int)v20);
      if (!v31) {
        goto LABEL_119;
      }
    }
    float32x4_t v90 = vmulq_n_f32(v90, v89);
LABEL_119:
    int v91 = a4 + 4;
    do
    {
      *(float32x4_t *)uint64_t v26 = v90;
      *(float *)(v26 + 16) = v89;
      *(float32x4_t *)(v26 + 20) = v90;
      *(float *)(v26 + 36) = v89;
      *(float32x4_t *)(v26 + 40) = v90;
      *(float *)(v26 + 56) = v89;
      *(float32x4_t *)(v26 + 60) = v90;
      v91 -= 4;
      *(float *)(v26 + 76) = v89;
      v26 += 80;
      *(_DWORD *)int32x2_t v25 = -1;
      v25 += 4;
    }
    while (v91 > 4);
    return;
  }
  if (a4 >= 4) {
    int v35 = 4;
  }
  else {
    int v35 = a4;
  }
  bzero(v25, ((a4 - v35 + 3) & 0xFFFFFFFC) + 4);
}

int8x16_t *CMYKF_pattern(uint64_t a1, int8x16_t *a2, unsigned int a3, int a4, float32x4_t *a5, float a6, double a7, double a8, int32x4_t a9, double a10, double a11)
{
  float v14 = *(unsigned __int32 **)(*(void *)a1 + 64);
  a9.i32[0] = *v14;
  LODWORD(a11) = v14[1];
  if (a2 && a3 > 0x13
    || (__n128 v25 = (__n128)a9,
        double v26 = a11,
        float v15 = (int8x16_t *)malloc_type_malloc(0x44uLL, 0x705560E0uLL),
        a9 = (int32x4_t)v25,
        a11 = v26,
        (a2 = v15) != 0))
  {
    if (*(float *)a9.i32 <= a6) {
      float v16 = a6;
    }
    else {
      float v16 = *(float *)a9.i32;
    }
    if (*(float *)&a11 < a6) {
      float v16 = *(float *)&a11;
    }
    if (a5) {
      int v17 = a4;
    }
    else {
      int v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int32x4_t v22 = a9;
        *(float *)&v22.i32[1] = v16 * (float)(v16 * (float)(*(float *)&a11 - a5->f32[0]));
        int8x16_t v21 = (int8x16_t)vzip1q_s32(v22, v22);
        v21.i32[2] = a9.i32[0];
        break;
      case 4:
        int8x16_t v21 = (int8x16_t)vmulq_n_f32(*a5, v16);
        break;
      case 3:
        float v18 = v16 * (float)(*(float *)&a11 - a5->f32[2]);
        float32x2_t v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11, 0);
        float32x2_t v19 = vmul_n_f32(vsub_f32(v20, *(float32x2_t *)a5->f32), v16);
        v20.i32[0] = v19.i32[1];
        if (v19.f32[0] < v19.f32[1]) {
          v20.f32[0] = v19.f32[0];
        }
        if (v20.f32[0] < v18) {
          v20.f32[0] = v16 * (float)(*(float *)&a11 - a5->f32[2]);
        }
        *(float32x2_t *)v21.i8 = vsub_f32(v19, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 0));
        *(float *)&v21.i32[2] = v18 - v20.f32[0];
        v21.i32[3] = v20.i32[0];
        break;
      default:
        int8x16_t v21 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a9.i8, 0);
        break;
    }
    *a2 = (int8x16_t)xmmword_1850CDBE0;
    a2[1].i32[2] = 0;
    a2[1].i64[0] = 1;
    a2[4].i32[0] = bswap32(LODWORD(v16));
    float v23 = a2 + 4;
    a2[3] = vrev32q_s8(v21);
    if (v16 >= *(float *)&a11) {
      float v23 = 0;
    }
    a2[2].i64[0] = (uint64_t)a2[3].i64;
    a2[2].i64[1] = (uint64_t)v23;
  }
  return a2;
}

uint64_t CMYKF_mark(uint64_t a1, __n128 a2)
{
  return CMYKF_mark_inner(*(void *)(*(void *)a1 + 56), a2);
}

uint64_t CMYKF_mark_inner(uint64_t a1, __n128 a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v827 = *MEMORY[0x1E4F143B8];
  float v18 = *(unsigned int **)(v3 + 96);
  uint64_t v19 = *(void *)(v3 + 48);
  uint64_t v20 = *(unsigned int *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v18 == 0) + 4 * (v19 == 0));
  if ((int)v20 > 27) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v22 = v3;
  uint64_t v23 = *(unsigned int *)(v3 + 4);
  int v24 = v23 - 1;
  if ((int)v23 < 1) {
    return 0;
  }
  int v25 = *(_DWORD *)(v3 + 8);
  if (v25 < 1) {
    return 0;
  }
  double v26 = *(uint16x4_t **)(v3 + 136);
  if ((*(_DWORD *)v3 & 0xFF0000) == 0x50000 || !v26)
  {
    int v28 = *(_DWORD *)v3 & 0xFF00;
    uint64_t v766 = v3;
    int v767 = *(_DWORD *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v18 == 0) + 4 * (v19 == 0));
    if (v28 == 1024)
    {
      LODWORD(v818[0]) = *(_DWORD *)(v3 + 4);
      int v824 = v25;
      v17.i32[0] = 1.0;
      if (v18) {
        v17.i32[0] = bswap32(*v18);
      }
      int8x16_t v29 = *(int8x16_t *)*(void *)(v3 + 88);
      unint64_t v30 = (unint64_t)*(int *)(v3 + 28) >> 4;
      uint64_t v32 = *(int *)(v3 + 12);
      uint64_t v31 = *(int *)(v3 + 16);
      if (v19)
      {
        unint64_t v33 = (unint64_t)*(int *)(v3 + 32) >> 2;
        uint64_t v34 = v19 + 4 * (v32 + v33 * v31);
        unsigned int v803 = 1;
      }
      else
      {
        uint64_t v34 = 0;
        unint64_t v33 = 0;
        unsigned int v803 = 0;
      }
      float32x4_t v46 = (float32x4_t)vrev32q_s8(v29);
      v12.f32[0] = 1.0 - v17.f32[0];
      uint64_t v47 = *(void *)(v3 + 40) + 16 * (v32 + v31 * v30);
      float32x4_t v814 = v46;
      float32x4_t v816 = v17;
      int8x16_t v812 = *(int8x16_t *)*(void *)(v3 + 88);
      uint64_t v808 = v12.i64[0];
      unint64_t v799 = (unint64_t)*(int *)(v3 + 28) >> 4;
      uint64_t v801 = v34;
      *(void *)v805 = v47;
      if (v26)
      {
        shape_enum_clip_alloc(v2, v3, (int *)v26, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v23, v25);
        uint64_t v49 = v48;
        uint64_t v50 = v34;
        unint64_t v51 = v33;
        if (v48) {
          goto LABEL_1238;
        }
        return 1;
      }
      uint64_t v811 = 0;
      if (v19) {
        uint64_t v59 = v23;
      }
      else {
        uint64_t v59 = 0;
      }
      unint64_t v51 = v33 - v59;
      uint64_t v50 = v34;
      float v60 = (int8x16_t *)v47;
      uint64_t v61 = v23;
LABEL_906:
      uint64_t v47 = v30 - v61;
      switch((int)v20)
      {
        case 0:
          unint64_t v540 = v33;
          uint64_t v541 = v34;
          uint64_t v542 = v47 + (int)v23;
          unsigned int v543 = v824;
          uint64_t v544 = v824 - 1;
          i8 = v60[(v542 * v544) & (v542 >> 63)].i8;
          if (v542 < 0) {
            uint64_t v542 = -v542;
          }
          int v546 = v23;
          CGBlt_fillBytes(16 * v23, v824, 0, i8, 16 * v542);
          if (v19)
          {
            uint64_t v547 = v51 + v546;
            v50 += 4 * ((v547 * v544) & (v547 >> 63));
            if (v547 >= 0) {
              v51 += v546;
            }
            else {
              unint64_t v51 = -v547;
            }
            CGBlt_fillBytes(4 * v546, v543, 0, (char *)v50, 4 * v51);
          }
          uint64_t v34 = v541;
          unint64_t v33 = v540;
          goto LABEL_1234;
        case 1:
          uint64_t v548 = (int)v23;
          uint64_t v549 = v47 + (int)v23;
          if (v549 < 0)
          {
            v60 += v549 * (v824 - 1);
            uint64_t v549 = -v549;
          }
          uint64_t v550 = *(void *)(v766 + 88);
          int v551 = v23;
          unsigned int v552 = v824;
          if (v550) {
            CGSFillDRAM64((unint64_t)v60, 16 * v549, 16 * v23, v824, v550, 16, 16, 1, 0, 0);
          }
          else {
            CGBlt_fillBytes(16 * v23, v824, 0, v60->i8, 16 * v549);
          }
          uint64_t v49 = v811;
          if (v19)
          {
            uint64_t v740 = *(int **)(v766 + 96);
            if (!v740) {
              uint64_t v740 = (int *)&unk_18529410C;
            }
            v50 += 4 * (((v51 + v548) * (int)(v552 - 1)) & ((uint64_t)(v51 + v548) >> 63));
            if ((uint64_t)(v51 + v548) >= 0) {
              v51 += v548;
            }
            else {
              unint64_t v51 = -(uint64_t)(v51 + v548);
            }
            CGBlt_fillBytes(4 * v551, v552, *v740, (char *)v50, 4 * v51);
          }
          uint64_t v34 = v801;
          uint64_t v47 = *(void *)v805;
          goto LABEL_1236;
        case 2:
          uint64_t v553 = 4 * v803;
          if (v19)
          {
            float32x4_t v554 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
            do
            {
              int v555 = v818[0];
              if (SLODWORD(v818[0]) >= 4)
              {
                unsigned int v556 = (LODWORD(v818[0]) >> 2) + 1;
                do
                {
                  unsigned int v557 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v50))
                                                                        * v12.f32[0])));
                  *float v60 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(*v60)));
                  *(_DWORD *)uint64_t v50 = v557;
                  unsigned int v558 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v50 + 4)))
                                                                        * v12.f32[0])));
                  v60[1] = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(v60[1])));
                  *(_DWORD *)(v50 + 4) = v558;
                  unsigned int v559 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v50 + 8)))
                                                                        * v12.f32[0])));
                  v60[2] = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(v60[2])));
                  *(_DWORD *)(v50 + ++*(_DWORD *)(result + 8) = v559;
                  unsigned int v560 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v50 + 12)))
                                                                        * v12.f32[0])));
                  v60[3] = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(v60[3])));
                  *(_DWORD *)(v50 + 12) = v560;
                  v60 += 4;
                  --v556;
                  v50 += 16 * v803;
                }
                while (v556 > 1);
                int v555 = v818[0] & 3;
              }
              if (v555 >= 1)
              {
                unsigned int v561 = v555 + 1;
                do
                {
                  unsigned int v562 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v50))
                                                                        * v12.f32[0])));
                  *float v60 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(*v60)));
                  ++v60;
                  *(_DWORD *)uint64_t v50 = v562;
                  v50 += v553;
                  --v561;
                }
                while (v561 > 1);
              }
              v60 += v47;
              v50 += 4 * v51;
              --v824;
            }
            while (v824);
            goto LABEL_1234;
          }
          float32x4_t v741 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
          int v742 = v824;
          do
          {
            if ((int)v23 < 4)
            {
              int v746 = v23;
            }
            else
            {
              unsigned int v743 = (v23 >> 2) + 1;
              do
              {
                int8x16_t v744 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(v60[1])));
                *float v60 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(*v60)));
                v60[1] = v744;
                int8x16_t v745 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(v60[3])));
                v60[2] = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(v60[2])));
                v60[3] = v745;
                v60 += 4;
                --v743;
                v50 += 16 * v803;
              }
              while (v743 > 1);
              int v746 = v23 & 3;
            }
            if (v746 >= 1)
            {
              unsigned int v747 = v746 + 1;
              do
              {
                *float v60 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(*v60)));
                ++v60;
                v50 += v553;
                --v747;
              }
              while (v747 > 1);
            }
            v60 += v47;
            v50 += 4 * v51;
            --v742;
          }
          while (v742);
          goto LABEL_1233;
        case 3:
          unsigned int v563 = bswap32(v17.u32[0]);
          do
          {
            int v564 = v818[0];
            do
            {
              float v565 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              if (v565 <= 0.0)
              {
                v60->i64[0] = 0;
                v60->i64[1] = 0;
                *(_DWORD *)uint64_t v50 = 0;
              }
              else if (v565 >= 1.0)
              {
                *float v60 = v29;
                *(_DWORD *)uint64_t v50 = v563;
              }
              else
              {
                *float v60 = vrev32q_s8((int8x16_t)vmulq_n_f32(v46, v565));
                *(_DWORD *)uint64_t v50 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] * v565));
              }
              ++v60;
              v50 += 4 * v803;
              --v564;
            }
            while (v564);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 4:
          unsigned int v566 = bswap32(v17.u32[0]);
          do
          {
            int v567 = v818[0];
            do
            {
              float v568 = 1.0 - COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              if (v568 <= 0.0)
              {
                v60->i64[0] = 0;
                v60->i64[1] = 0;
                *(_DWORD *)uint64_t v50 = 0;
              }
              else if (v568 >= 1.0)
              {
                *float v60 = v29;
                *(_DWORD *)uint64_t v50 = v566;
              }
              else
              {
                *float v60 = vrev32q_s8((int8x16_t)vmulq_n_f32(v46, v568));
                *(_DWORD *)uint64_t v50 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] * v568));
              }
              ++v60;
              v50 += 4 * v803;
              --v567;
            }
            while (v567);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 5:
          do
          {
            int v569 = v818[0];
            do
            {
              float v570 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              *float v60 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v12.f32[0]), v46, v570));
              ++v60;
              *(_DWORD *)uint64_t v50 = bswap32(COERCE_UNSIGNED_INT((float)(v12.f32[0] * v570) + (float)(v17.f32[0] * v570)));
              v50 += 4 * v803;
              --v569;
            }
            while (v569);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 6:
          unsigned int v571 = bswap32(v17.u32[0]);
          while (1)
          {
            int v572 = v818[0];
            do
            {
              float v573 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              float v574 = 1.0 - v573;
              int8x16_t v575 = v29;
              unsigned int v576 = v571;
              if ((float)(1.0 - v573) < 1.0)
              {
                if (v574 <= 0.0) {
                  goto LABEL_960;
                }
                unsigned int v576 = bswap32(COERCE_UNSIGNED_INT(v573 + (float)(v17.f32[0] * v574)));
                int8x16_t v575 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v60), v46, v574));
              }
              *float v60 = v575;
              *(_DWORD *)uint64_t v50 = v576;
LABEL_960:
              ++v60;
              v50 += 4 * v803;
              --v572;
            }
            while (v572);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1234;
            }
          }
        case 7:
          if (v19)
          {
            do
            {
              int v577 = v818[0];
              do
              {
                unsigned int v578 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] * COERCE_FLOAT(bswap32(*(_DWORD *)v50))));
                *float v60 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v17.f32[0]));
                ++v60;
                *(_DWORD *)uint64_t v50 = v578;
                v50 += 4 * v803;
                --v577;
              }
              while (v577);
              v60 += v47;
              v50 += 4 * v51;
              --v824;
            }
            while (v824);
            goto LABEL_1234;
          }
          int v748 = v824;
          do
          {
            int v749 = v23;
            do
            {
              *float v60 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v17.f32[0]));
              ++v60;
              v50 += 4 * v803;
              --v749;
            }
            while (v749);
            v60 += v47;
            v50 += 4 * v51;
            --v748;
          }
          while (v748);
          goto LABEL_1233;
        case 8:
          if (v19)
          {
            do
            {
              int v579 = v818[0];
              do
              {
                unsigned int v580 = bswap32(COERCE_UNSIGNED_INT(v12.f32[0] * COERCE_FLOAT(bswap32(*(_DWORD *)v50))));
                *float v60 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v12.f32[0]));
                ++v60;
                *(_DWORD *)uint64_t v50 = v580;
                v50 += 4 * v803;
                --v579;
              }
              while (v579);
              v60 += v47;
              v50 += 4 * v51;
              --v824;
            }
            while (v824);
            goto LABEL_1234;
          }
          int v750 = v824;
          do
          {
            int v751 = v23;
            do
            {
              *float v60 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v12.f32[0]));
              ++v60;
              v50 += 4 * v803;
              --v751;
            }
            while (v751);
            v60 += v47;
            v50 += 4 * v51;
            --v750;
          }
          while (v750);
          goto LABEL_1233;
        case 9:
          do
          {
            int v581 = v818[0];
            do
            {
              float v582 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              *float v60 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v17.f32[0]), v46, 1.0 - v582));
              ++v60;
              *(_DWORD *)uint64_t v50 = bswap32(COERCE_UNSIGNED_INT((float)(v17.f32[0] * v582) + (float)(v17.f32[0]
                                                                                              * (float)(1.0 - v582))));
              v50 += 4 * v803;
              --v581;
            }
            while (v581);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 10:
          do
          {
            int v583 = v818[0];
            do
            {
              float v584 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              *float v60 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v12.f32[0]), v46, 1.0 - v584));
              ++v60;
              *(_DWORD *)uint64_t v50 = bswap32(COERCE_UNSIGNED_INT((float)(v12.f32[0] * v584) + (float)(v17.f32[0]
                                                                                              * (float)(1.0 - v584))));
              v50 += 4 * v803;
              --v583;
            }
            while (v583);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 11:
          float32x4_t v585 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          if (!v19)
          {
            int v752 = v824;
            do
            {
              int v753 = v23;
              do
              {
                *float v60 = vrev32q_s8((int8x16_t)vaddq_f32(v585, (float32x4_t)vrev32q_s8(*v60)));
                ++v60;
                v50 += 4 * v803;
                --v753;
              }
              while (v753);
              v60 += v47;
              v50 += 4 * v51;
              --v752;
            }
            while (v752);
            goto LABEL_1233;
          }
          do
          {
            int v586 = v818[0];
            do
            {
              v11.i32[0] = bswap32(*(_DWORD *)v50);
              v12.f32[0] = v17.f32[0] + v11.f32[0];
              if ((float)(v17.f32[0] + v11.f32[0]) > 1.0) {
                v12.f32[0] = 1.0;
              }
              float32x4_t v587 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
              unsigned int v588 = bswap32(v12.u32[0]);
              float32x4_t v12 = (float32x4_t)vrev32q_s8(*v60);
              float32x4_t v11 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(v585, vsubq_f32(v587, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), v12))));
              *v60++ = (int8x16_t)v11;
              *(_DWORD *)uint64_t v50 = v588;
              v50 += 4 * v803;
              --v586;
            }
            while (v586);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 12:
          if (v19)
          {
            do
            {
              int v589 = v818[0];
              do
              {
                float v590 = v17.f32[0] + COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v590 > 1.0) {
                  float v590 = 1.0;
                }
                *float v60 = vrev32q_s8((int8x16_t)vaddq_f32(v46, (float32x4_t)vrev32q_s8(*v60)));
                ++v60;
                *(_DWORD *)uint64_t v50 = bswap32(LODWORD(v590));
                v50 += 4 * v803;
                --v589;
              }
              while (v589);
              v60 += v47;
              v50 += 4 * v51;
              --v824;
            }
            while (v824);
          }
          else
          {
            int v754 = v824;
            do
            {
              int v755 = v23;
              do
              {
                *float v60 = vrev32q_s8((int8x16_t)vaddq_f32(v46, (float32x4_t)vrev32q_s8(*v60)));
                ++v60;
                v50 += 4 * v803;
                --v755;
              }
              while (v755);
              v60 += v47;
              v50 += 4 * v51;
              --v754;
            }
            while (v754);
LABEL_1233:
            int v824 = 0;
          }
          goto LABEL_1234;
        case 13:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v591 = bswap32(v17.u32[0]);
          float32x4_t v592 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          float32x4_t v593 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
          v11.i32[0] = 1.0;
          int8x16_t v594 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            int v595 = v818[0];
            do
            {
              if (v19)
              {
                v13.i32[0] = bswap32(*(_DWORD *)v50);
                if (v13.f32[0] <= 0.0)
                {
                  *float v60 = v29;
                  *(_DWORD *)uint64_t v50 = v591;
                  goto LABEL_1004;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              float32x4_t v596 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              float32x4_t v597 = vmulq_f32(v596, v592);
              float32x4_t v599 = (float32x4_t)vbslq_s8(v594, (int8x16_t)vmlaq_f32(v597, v593, v596), (int8x16_t)v597);
              float32x4_t v598 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32(v599, v592, 1.0 - v13.f32[0]), (int8x16_t)v599);
              v599.f32[0] = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
              float32x4_t v13 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v599.f32, 0), v598);
              *(int8x8_t *)v13.f32 = vrev32_s8(*(int8x8_t *)v13.f32);
              v60->i64[0] = v13.i64[0];
              v60->i32[2] = bswap32(v13.u32[2]);
              v60->i32[3] = bswap32(v13.u32[3]);
              if (v19) {
                *(_DWORD *)uint64_t v50 = bswap32(v599.u32[0]);
              }
LABEL_1004:
              ++v60;
              v50 += 4 * v803;
              --v595;
            }
            while (v595);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1234;
            }
          }
        case 14:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v600 = bswap32(v17.u32[0]);
          float32x4_t v601 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          __asm { FMOV            V1.4S, #1.0 }
          while (1)
          {
            int v603 = v818[0];
            do
            {
              if (v19)
              {
                v12.i32[0] = bswap32(*(_DWORD *)v50);
                if (v12.f32[0] <= 0.0)
                {
                  *float v60 = v29;
                  *(_DWORD *)uint64_t v50 = v600;
                  goto LABEL_1016;
                }
              }
              else
              {
                v12.i32[0] = 1.0;
              }
              v11.f32[0] = (float)(v17.f32[0] + v12.f32[0]) - (float)(v12.f32[0] * v17.f32[0]);
              float32x4_t v604 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              float32x4_t v12 = (float32x4_t)vrev32q_s8((int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), vmlaq_f32(v604, vsubq_f32(_Q1, v604), v601)));
              *float v60 = (int8x16_t)v12;
              if (v19) {
                *(_DWORD *)uint64_t v50 = bswap32(v11.u32[0]);
              }
LABEL_1016:
              ++v60;
              v50 += 4 * v803;
              --v603;
            }
            while (v603);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1234;
            }
          }
        case 15:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v605 = bswap32(v17.u32[0]);
          float v606 = v46.f32[1];
          uint64_t v607 = v46.i64[1];
          while (1)
          {
            int v608 = v818[0];
            do
            {
              if (v19)
              {
                float v609 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v609 <= 0.0)
                {
                  *float v60 = v812;
                  *(_DWORD *)uint64_t v50 = v605;
                  goto LABEL_1030;
                }
              }
              else
              {
                float v609 = 1.0;
              }
              float32x4_t v825 = 0uLL;
              unsigned int v826 = 0;
              int8x16_t v610 = vrev32q_s8(*v60);
              PDAoverlayPDA(v825.f32, *(float *)v610.i32, *(float *)&v610.i32[1], *(float *)&v610.i32[2], *(float *)&v610.i32[3], v609, *(double *)v46.i64, v15, v16, v46.f32[0], v606, *(float *)&v607, *((float *)&v607 + 1), v17.f32[0]);
              unsigned int v611 = bswap32(v825.u32[0]);
              unsigned int v612 = bswap32(v825.u32[1]);
              unsigned int v613 = bswap32(v825.u32[2]);
              unsigned int v614 = bswap32(v825.u32[3]);
              if (v19)
              {
                unsigned int v615 = bswap32(v826);
                v60->i32[0] = v611;
                v60->i32[1] = v612;
                v60->i32[2] = v613;
                v60->i32[3] = v614;
                *(_DWORD *)uint64_t v50 = v615;
              }
              else
              {
                v60->i32[0] = v611;
                v60->i32[1] = v612;
                v60->i32[2] = v613;
                v60->i32[3] = v614;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1030:
              ++v60;
              v50 += 4 * v803;
              --v608;
            }
            while (v608);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1193;
            }
          }
        case 16:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v616 = bswap32(v17.u32[0]);
          float32x4_t v617 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          float32x4_t v618 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
          v11.i32[0] = 1.0;
          int8x16_t v619 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            int v620 = v818[0];
            do
            {
              if (v19)
              {
                v13.i32[0] = bswap32(*(_DWORD *)v50);
                if (v13.f32[0] <= 0.0)
                {
                  *float v60 = v29;
                  *(_DWORD *)uint64_t v50 = v616;
                  goto LABEL_1042;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              float32x4_t v621 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              float32x4_t v622 = vmulq_n_f32(v621, v17.f32[0]);
              float32x4_t v623 = vmulq_n_f32(v617, v13.f32[0]);
              float32x4_t v624 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v622, v623), (int8x16_t)v623, (int8x16_t)v622);
              float32x4_t v625 = (float32x4_t)vbslq_s8(v619, (int8x16_t)vmlaq_f32(v624, v618, v621), (int8x16_t)v624);
              int32x2_t v627 = (int32x2_t)vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)).u64[0];
              int8x16_t v626 = (int8x16_t)vdupq_lane_s32(v627, 0);
              *(float *)v627.i32 = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
              float32x4_t v13 = vsubq_f32((float32x4_t)vdupq_lane_s32(v627, 0), (float32x4_t)vbslq_s8(v626, (int8x16_t)vmlaq_n_f32(v625, v617, 1.0 - v13.f32[0]), (int8x16_t)v625));
              *(int8x8_t *)v13.f32 = vrev32_s8(*(int8x8_t *)v13.f32);
              v60->i64[0] = v13.i64[0];
              v60->i32[2] = bswap32(v13.u32[2]);
              v60->i32[3] = bswap32(v13.u32[3]);
              if (v19) {
                *(_DWORD *)uint64_t v50 = bswap32(v627.u32[0]);
              }
LABEL_1042:
              ++v60;
              v50 += 4 * v803;
              --v620;
            }
            while (v620);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1234;
            }
          }
        case 17:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v628 = bswap32(v17.u32[0]);
          float32x4_t v629 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          float32x4_t v630 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
          v11.i32[0] = 1.0;
          int8x16_t v631 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            int v632 = v818[0];
            do
            {
              if (v19)
              {
                v13.i32[0] = bswap32(*(_DWORD *)v50);
                if (v13.f32[0] <= 0.0)
                {
                  *float v60 = v29;
                  *(_DWORD *)uint64_t v50 = v628;
                  goto LABEL_1054;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              float32x4_t v633 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              float32x4_t v634 = vmulq_n_f32(v633, v17.f32[0]);
              float32x4_t v635 = vmulq_n_f32(v629, v13.f32[0]);
              float32x4_t v636 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v635, v634), (int8x16_t)v635, (int8x16_t)v634);
              float32x4_t v638 = (float32x4_t)vbslq_s8(v631, (int8x16_t)vmlaq_f32(v636, v630, v633), (int8x16_t)v636);
              float32x4_t v637 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32(v638, v629, 1.0 - v13.f32[0]), (int8x16_t)v638);
              v638.f32[0] = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
              float32x4_t v13 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v638.f32, 0), v637);
              *(int8x8_t *)v13.f32 = vrev32_s8(*(int8x8_t *)v13.f32);
              v60->i64[0] = v13.i64[0];
              v60->i32[2] = bswap32(v13.u32[2]);
              v60->i32[3] = bswap32(v13.u32[3]);
              if (v19) {
                *(_DWORD *)uint64_t v50 = bswap32(v638.u32[0]);
              }
LABEL_1054:
              ++v60;
              v50 += 4 * v803;
              --v632;
            }
            while (v632);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1234;
            }
          }
        case 18:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v639 = bswap32(v17.u32[0]);
          float v640 = v46.f32[1];
          uint64_t v641 = v46.i64[1];
          while (1)
          {
            int v642 = v818[0];
            do
            {
              if (v19)
              {
                float v643 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v643 <= 0.0)
                {
                  *float v60 = v812;
                  *(_DWORD *)uint64_t v50 = v639;
                  goto LABEL_1068;
                }
              }
              else
              {
                float v643 = 1.0;
              }
              float32x4_t v825 = 0uLL;
              unsigned int v826 = 0;
              int8x16_t v644 = vrev32q_s8(*v60);
              PDAcolordodgePDA(v825.f32, *(float *)v644.i32, *(float *)&v644.i32[1], *(float *)&v644.i32[2], *(float *)&v644.i32[3], v643, *(double *)v46.i64, v15, v16, v46.f32[0], v640, *(float *)&v641, *((float *)&v641 + 1), v17.f32[0]);
              unsigned int v645 = bswap32(v825.u32[0]);
              unsigned int v646 = bswap32(v825.u32[1]);
              unsigned int v647 = bswap32(v825.u32[2]);
              unsigned int v648 = bswap32(v825.u32[3]);
              if (v19)
              {
                unsigned int v649 = bswap32(v826);
                v60->i32[0] = v645;
                v60->i32[1] = v646;
                v60->i32[2] = v647;
                v60->i32[3] = v648;
                *(_DWORD *)uint64_t v50 = v649;
              }
              else
              {
                v60->i32[0] = v645;
                v60->i32[1] = v646;
                v60->i32[2] = v647;
                v60->i32[3] = v648;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1068:
              ++v60;
              v50 += 4 * v803;
              --v642;
            }
            while (v642);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1193;
            }
          }
        case 19:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v650 = bswap32(v17.u32[0]);
          float v651 = v46.f32[1];
          uint64_t v652 = v46.i64[1];
          while (1)
          {
            int v653 = v818[0];
            do
            {
              if (v19)
              {
                float v654 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v654 <= 0.0)
                {
                  *float v60 = v812;
                  *(_DWORD *)uint64_t v50 = v650;
                  goto LABEL_1082;
                }
              }
              else
              {
                float v654 = 1.0;
              }
              float32x4_t v825 = 0uLL;
              unsigned int v826 = 0;
              int8x16_t v655 = vrev32q_s8(*v60);
              PDAcolorburnPDA(v825.f32, *(float *)v655.i32, *(float *)&v655.i32[1], *(float *)&v655.i32[2], *(float *)&v655.i32[3], v654, *(double *)v46.i64, v15, v16, v46.f32[0], v651, *(float *)&v652, *((float *)&v652 + 1), v17.f32[0]);
              unsigned int v656 = v825.u32[1];
              unsigned int v657 = v825.u32[2];
              unsigned int v658 = v825.u32[3];
              if (v19)
              {
                unsigned int v659 = bswap32(v826);
                v60->i32[0] = bswap32(v825.u32[0]);
                v60->i32[1] = bswap32(v656);
                v60->i32[2] = bswap32(v657);
                v60->i32[3] = bswap32(v658);
                *(_DWORD *)uint64_t v50 = v659;
              }
              else
              {
                v60->i32[0] = bswap32(v825.u32[0]);
                v60->i32[1] = bswap32(v656);
                v60->i32[2] = bswap32(v657);
                v60->i32[3] = bswap32(v658);
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1082:
              ++v60;
              v50 += 4 * v803;
              --v653;
            }
            while (v653);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1193;
            }
          }
        case 20:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v660 = bswap32(v17.u32[0]);
          __int32 v661 = v46.i32[1];
          uint64_t v662 = v46.i64[1];
          while (1)
          {
            int v663 = v818[0];
            do
            {
              if (v19)
              {
                v13.i32[0] = bswap32(*(_DWORD *)v50);
                if (v13.f32[0] <= 0.0)
                {
                  *float v60 = v812;
                  *(_DWORD *)uint64_t v50 = v660;
                  goto LABEL_1096;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              float32x4_t v825 = 0uLL;
              unsigned int v826 = 0;
              int8x16_t v664 = vrev32q_s8(*v60);
              PDAsoftlightPDA(&v825, *(float32x2_t *)v664.i8, *(float32_t *)&v664.i32[1], *(float *)&v664.i32[2], *(float *)&v664.i32[3], *(double *)v13.i64, *(int32x2_t *)v46.f32, v15, v16, v3, (uint64_t)v26, v4, v5, v6, v7, v8, (float32x2_t)__PAIR64__(v661, v46.u32[0]), *(float *)&v662, *((float *)&v662 + 1),
                v17.f32[0]);
              unsigned int v665 = bswap32(v825.u32[0]);
              unsigned int v666 = bswap32(v825.u32[1]);
              unsigned int v667 = bswap32(v825.u32[2]);
              unsigned int v668 = bswap32(v825.u32[3]);
              if (v19)
              {
                unsigned int v669 = bswap32(v826);
                v60->i32[0] = v665;
                v60->i32[1] = v666;
                v60->i32[2] = v667;
                v60->i32[3] = v668;
                *(_DWORD *)uint64_t v50 = v669;
              }
              else
              {
                v60->i32[0] = v665;
                v60->i32[1] = v666;
                v60->i32[2] = v667;
                v60->i32[3] = v668;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1096:
              ++v60;
              v50 += 4 * v803;
              --v663;
            }
            while (v663);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1193;
            }
          }
        case 21:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v670 = bswap32(v17.u32[0]);
          float v671 = v46.f32[1];
          uint64_t v672 = v46.i64[1];
          while (1)
          {
            int v673 = v818[0];
            do
            {
              if (v19)
              {
                float v674 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v674 <= 0.0)
                {
                  *float v60 = v812;
                  *(_DWORD *)uint64_t v50 = v670;
                  goto LABEL_1110;
                }
              }
              else
              {
                float v674 = 1.0;
              }
              float32x4_t v825 = 0uLL;
              unsigned int v826 = 0;
              int8x16_t v675 = vrev32q_s8(*v60);
              PDAhardlightPDA(v825.f32, *(float *)v675.i32, *(float *)&v675.i32[1], *(float *)&v675.i32[2], *(float *)&v675.i32[3], v674, *(double *)v46.i64, v15, v16, v46.f32[0], v671, *(float *)&v672, *((float *)&v672 + 1), v17.f32[0]);
              unsigned int v676 = bswap32(v825.u32[0]);
              unsigned int v677 = bswap32(v825.u32[1]);
              unsigned int v678 = bswap32(v825.u32[2]);
              unsigned int v679 = bswap32(v825.u32[3]);
              if (v19)
              {
                unsigned int v680 = bswap32(v826);
                v60->i32[0] = v676;
                v60->i32[1] = v677;
                v60->i32[2] = v678;
                v60->i32[3] = v679;
                *(_DWORD *)uint64_t v50 = v680;
              }
              else
              {
                v60->i32[0] = v676;
                v60->i32[1] = v677;
                v60->i32[2] = v678;
                v60->i32[3] = v679;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1110:
              ++v60;
              v50 += 4 * v803;
              --v673;
            }
            while (v673);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1193;
            }
          }
        case 22:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v681 = bswap32(v17.u32[0]);
          float32x4_t v682 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          while (1)
          {
            int v683 = v818[0];
            do
            {
              if (v19)
              {
                v11.i32[0] = bswap32(*(_DWORD *)v50);
                if (v11.f32[0] <= 0.0)
                {
                  *float v60 = v29;
                  *(_DWORD *)uint64_t v50 = v681;
                  goto LABEL_1122;
                }
              }
              else
              {
                v11.i32[0] = 1.0;
              }
              int8x16_t v684 = *v60;
              *(float *)v684.i32 = (float)(v11.f32[0] + v17.f32[0]) - (float)(v11.f32[0] * v17.f32[0]);
              float32x4_t v685 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              float32x4_t v686 = vaddq_f32(v685, v682);
              float32x4_t v687 = vmulq_n_f32(v685, v17.f32[0]);
              float32x4_t v688 = vmulq_n_f32(v682, v11.f32[0]);
              float32x4_t v689 = vsubq_f32(v686, v687);
              float32x4_t v690 = vsubq_f32(v687, v688);
              float32x4_t v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v684.i8, 0), vaddq_f32(vsubq_f32(v689, v688), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v690), (int8x16_t)vnegq_f32(v690), (int8x16_t)v690)));
              *(int8x8_t *)v60->i8 = vrev32_s8(*(int8x8_t *)v11.f32);
              v60->i32[2] = bswap32(v11.u32[2]);
              v60->i32[3] = bswap32(v11.u32[3]);
              if (v19) {
                *(_DWORD *)uint64_t v50 = bswap32(v684.u32[0]);
              }
LABEL_1122:
              ++v60;
              v50 += 4 * v803;
              --v683;
            }
            while (v683);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1234;
            }
          }
        case 23:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v691 = bswap32(v17.u32[0]);
          float32x4_t v692 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          v693.i64[0] = 0xC0000000C0000000;
          v693.i64[1] = 0xC0000000C0000000;
          while (1)
          {
            int v694 = v818[0];
            do
            {
              if (v19)
              {
                v11.i32[0] = bswap32(*(_DWORD *)v50);
                if (v11.f32[0] <= 0.0)
                {
                  *float v60 = v29;
                  *(_DWORD *)uint64_t v50 = v691;
                  goto LABEL_1135;
                }
              }
              else
              {
                v11.i32[0] = 1.0;
              }
              float32x4_t v695 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0);
              v11.f32[0] = (float)(v11.f32[0] + v17.f32[0]) - (float)(v11.f32[0] * v17.f32[0]);
              float32x4_t v696 = vsubq_f32(v695, (float32x4_t)vrev32q_s8(*v60));
              float32x4_t v697 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), vmlaq_f32(vaddq_f32(v696, v692), v693, vmulq_f32(v692, v696)));
              if (v19)
              {
                unsigned int v698 = v11.i32[0];
                *(int8x8_t *)v11.f32 = vrev32_s8(*(int8x8_t *)v697.f32);
                v60->i64[0] = v11.i64[0];
                v60->i32[2] = bswap32(v697.u32[2]);
                v60->i32[3] = bswap32(v697.u32[3]);
                *(_DWORD *)uint64_t v50 = bswap32(v698);
              }
              else
              {
                *(int8x8_t *)v11.f32 = vrev32_s8(*(int8x8_t *)v697.f32);
                v60->i64[0] = v11.i64[0];
                v60->i32[2] = bswap32(v697.u32[2]);
                v60->i32[3] = bswap32(v697.u32[3]);
              }
LABEL_1135:
              ++v60;
              v50 += 4 * v803;
              --v694;
            }
            while (v694);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1234;
            }
          }
        case 24:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v699 = bswap32(v17.u32[0]);
          float v700 = v46.f32[1];
          uint64_t v701 = v46.i64[1];
          while (1)
          {
            int v702 = v818[0];
            do
            {
              if (v19)
              {
                float v703 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v703 <= 0.0)
                {
                  *float v60 = v812;
                  *(_DWORD *)uint64_t v50 = v699;
                  goto LABEL_1149;
                }
              }
              else
              {
                float v703 = 1.0;
              }
              float32x4_t v825 = 0uLL;
              unsigned int v826 = 0;
              int8x16_t v704 = vrev32q_s8(*v60);
              PDAhuePDA(v825.f32, *(float *)v704.i32, *(float *)&v704.i32[1], *(float *)&v704.i32[2], *(float *)&v704.i32[3], v703, *(double *)v46.i64, v15, v16, v46.f32[0], v700, *(float *)&v701, *((float *)&v701 + 1), v17.f32[0]);
              unsigned int v705 = bswap32(v825.u32[0]);
              unsigned int v706 = bswap32(v825.u32[1]);
              unsigned int v707 = bswap32(v825.u32[2]);
              unsigned int v708 = bswap32(v825.u32[3]);
              if (v19)
              {
                unsigned int v709 = bswap32(v826);
                v60->i32[0] = v705;
                v60->i32[1] = v706;
                v60->i32[2] = v707;
                v60->i32[3] = v708;
                *(_DWORD *)uint64_t v50 = v709;
              }
              else
              {
                v60->i32[0] = v705;
                v60->i32[1] = v706;
                v60->i32[2] = v707;
                v60->i32[3] = v708;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1149:
              ++v60;
              v50 += 4 * v803;
              --v702;
            }
            while (v702);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1193;
            }
          }
        case 25:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v710 = bswap32(v17.u32[0]);
          float v711 = v46.f32[1];
          uint64_t v712 = v46.i64[1];
          while (1)
          {
            int v713 = v818[0];
            do
            {
              if (v19)
              {
                float v714 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v714 <= 0.0)
                {
                  *float v60 = v812;
                  *(_DWORD *)uint64_t v50 = v710;
                  goto LABEL_1163;
                }
              }
              else
              {
                float v714 = 1.0;
              }
              float32x4_t v825 = 0uLL;
              unsigned int v826 = 0;
              int8x16_t v715 = vrev32q_s8(*v60);
              PDAsaturationPDA(v825.f32, *(float *)v715.i32, *(float *)&v715.i32[1], *(float *)&v715.i32[2], *(float *)&v715.i32[3], v714, *(double *)v46.i64, v15, v16, v46.f32[0], v711, *(float *)&v712, *((float *)&v712 + 1), v17.f32[0]);
              unsigned int v716 = bswap32(v825.u32[0]);
              unsigned int v717 = bswap32(v825.u32[1]);
              unsigned int v718 = bswap32(v825.u32[2]);
              unsigned int v719 = bswap32(v825.u32[3]);
              if (v19)
              {
                unsigned int v720 = bswap32(v826);
                v60->i32[0] = v716;
                v60->i32[1] = v717;
                v60->i32[2] = v718;
                v60->i32[3] = v719;
                *(_DWORD *)uint64_t v50 = v720;
              }
              else
              {
                v60->i32[0] = v716;
                v60->i32[1] = v717;
                v60->i32[2] = v718;
                v60->i32[3] = v719;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1163:
              ++v60;
              v50 += 4 * v803;
              --v713;
            }
            while (v713);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1193;
            }
          }
        case 26:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v721 = bswap32(v17.u32[0]);
          float v722 = v46.f32[1];
          uint64_t v723 = v46.i64[1];
          while (1)
          {
            int v724 = v818[0];
            do
            {
              if (v19)
              {
                float v725 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v725 <= 0.0)
                {
                  *float v60 = v812;
                  *(_DWORD *)uint64_t v50 = v721;
                  goto LABEL_1177;
                }
              }
              else
              {
                float v725 = 1.0;
              }
              float32x4_t v825 = 0uLL;
              unsigned int v826 = 0;
              int8x16_t v765 = vrev32q_s8(*v60);
              PDAluminosityPDA(v825.f32, v46.f32[0], v722, *(float *)&v723, *((float *)&v723 + 1), v17.f32[0], *(double *)v46.i64, v15, v16, *(float *)v765.i32, *(float *)&v765.i32[1], *(float *)&v765.i32[2], *(float *)&v765.i32[3], v725);
              unsigned int v726 = v825.u32[1];
              unsigned int v727 = v825.u32[2];
              unsigned int v728 = v825.u32[3];
              if (v19)
              {
                unsigned int v729 = bswap32(v826);
                v60->i32[0] = bswap32(v825.u32[0]);
                v60->i32[1] = bswap32(v726);
                v60->i32[2] = bswap32(v727);
                v60->i32[3] = bswap32(v728);
                *(_DWORD *)uint64_t v50 = v729;
              }
              else
              {
                v60->i32[0] = bswap32(v825.u32[0]);
                v60->i32[1] = bswap32(v726);
                v60->i32[2] = bswap32(v727);
                v60->i32[3] = bswap32(v728);
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1177:
              ++v60;
              v50 += 4 * v803;
              --v724;
            }
            while (v724);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824) {
              goto LABEL_1193;
            }
          }
        case 27:
          if (v17.f32[0] <= 0.0) {
            goto LABEL_1234;
          }
          unsigned int v730 = bswap32(v17.u32[0]);
          float v731 = v46.f32[1];
          uint64_t v732 = v46.i64[1];
          break;
        default:
          goto LABEL_1235;
      }
LABEL_1182:
      int v733 = v818[0];
      while (v19)
      {
        float v734 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
        if (v734 > 0.0) {
          goto LABEL_1187;
        }
        *float v60 = v812;
        *(_DWORD *)uint64_t v50 = v730;
LABEL_1191:
        ++v60;
        v50 += 4 * v803;
        if (!--v733)
        {
          v60 += v47;
          v50 += 4 * v51;
          if (!--v824)
          {
LABEL_1193:
            LODWORD(v20) = v767;
            unint64_t v30 = v799;
            uint64_t v34 = v801;
LABEL_1234:
            uint64_t v47 = *(void *)v805;
LABEL_1235:
            uint64_t v49 = v811;
LABEL_1236:
            if (!v49) {
              return 1;
            }
            int v823 = 0;
            int v822 = 0;
LABEL_1238:
            if (!shape_enum_clip_next(v49, &v823, &v822, v818, &v824)) {
              goto LABEL_1242;
            }
            uint64_t v811 = v49;
            float v60 = (int8x16_t *)(v47 + 16 * v30 * v822 + 16 * v823);
            uint64_t v61 = SLODWORD(v818[0]);
            if (v19)
            {
              uint64_t v50 = v34 + 4 * v33 * v822 + 4 * v823;
              unint64_t v51 = v33 - SLODWORD(v818[0]);
            }
            LODWORD(v23) = v818[0];
            float32x4_t v46 = v814;
            float32x4_t v17 = v816;
            int8x16_t v29 = v812;
            v12.i64[0] = v808;
            goto LABEL_906;
          }
          goto LABEL_1182;
        }
      }
      float v734 = 1.0;
LABEL_1187:
      float32x4_t v825 = 0uLL;
      unsigned int v826 = 0;
      int8x16_t v735 = vrev32q_s8(*v60);
      PDAluminosityPDA(v825.f32, *(float *)v735.i32, *(float *)&v735.i32[1], *(float *)&v735.i32[2], *(float *)&v735.i32[3], v734, *(double *)v46.i64, v15, v16, v46.f32[0], v731, *(float *)&v732, *((float *)&v732 + 1), v17.f32[0]);
      unsigned int v736 = v825.u32[1];
      unsigned int v737 = v825.u32[2];
      unsigned int v738 = v825.u32[3];
      if (v19)
      {
        unsigned int v739 = bswap32(v826);
        v60->i32[0] = bswap32(v825.u32[0]);
        v60->i32[1] = bswap32(v736);
        v60->i32[2] = bswap32(v737);
        v60->i32[3] = bswap32(v738);
        *(_DWORD *)uint64_t v50 = v739;
      }
      else
      {
        v60->i32[0] = bswap32(v825.u32[0]);
        v60->i32[1] = bswap32(v736);
        v60->i32[2] = bswap32(v737);
        v60->i32[3] = bswap32(v738);
      }
      v46.i64[0] = v814.i64[0];
      v17.i32[0] = v816.i32[0];
      goto LABEL_1191;
    }
    LODWORD(v818[0]) = *(_DWORD *)(v3 + 4);
    int v824 = v25;
    uint64_t v35 = *(void *)(v3 + 40);
    uint64_t v37 = *(int *)(v3 + 12);
    uint64_t v36 = *(int *)(v3 + 16);
    unint64_t v38 = (unint64_t)*(int *)(v3 + 28) >> 4;
    if (v19)
    {
      unint64_t v783 = (unint64_t)*(int *)(v3 + 32) >> 2;
      v784 = (char *)(v19 + 4 * (v37 + v783 * v36));
      uint64_t v39 = 0xFFFFFFFFLL;
    }
    else
    {
      unint64_t v783 = 0;
      v784 = 0;
      uint64_t v39 = 0;
    }
    uint64_t v52 = v23;
    int64_t v53 = (int)v23;
    uint64_t v54 = *(int8x16_t **)(v22 + 88);
    unint64_t v782 = v35 + 16 * (v37 + v38 * v36);
    int v55 = *(_DWORD *)(v22 + 56);
    int v56 = *(_DWORD *)(v22 + 60);
    unint64_t v810 = (unint64_t)*(int *)(v22 + 76) >> 4;
    if (v28 != 256)
    {
      int v787 = *(_DWORD *)(v22 + 64);
      int v786 = *(_DWORD *)(v22 + 68);
      if (v18)
      {
        unint64_t v57 = (unint64_t)*(int *)(v22 + 80) >> 2;
        uint64_t v58 = 1;
      }
      else
      {
        unint64_t v57 = 0;
        uint64_t v58 = 0;
      }
      v39 &= 1u;
      v809 = &v54[v810 * v786];
      if (v26)
      {
        float32x4_t v84 = v18;
        int v769 = *(_DWORD *)(v22 + 60);
        int v770 = *(_DWORD *)(v22 + 56);
        uint64_t v815 = v58;
        uint64_t v817 = v39;
        int v83 = 1;
        uint64_t v802 = *(void *)(v22 + 88);
        uint64_t v85 = v802;
        goto LABEL_53;
      }
      uint64_t v90 = v52;
      unint64_t v813 = v783 - (int)v39 * (int)v52;
      if (&v54[v810 * v786])
      {
        uint64_t v93 = v56 % v786;
        int v769 = v56 % v786;
        uint64_t v789 = *(void *)(v22 + 88);
        float v94 = &v54[v810 * v93];
        int v95 = v55 % v787;
        uint64_t i64 = (uint64_t)v94[v95].i64;
        unint64_t v91 = (unint64_t)&v94[v787];
        int v770 = v95;
        uint64_t v788 = 0;
        if (v58)
        {
          uint64_t v96 = (uint64_t)&v18[v57 * v93 + v95];
          int v785 = 1;
          char v87 = (unsigned int *)v96;
        }
        else
        {
          int v785 = 1;
          uint64_t v96 = (uint64_t)v18;
          char v87 = v18;
        }
        uint64_t v54 = &v94[v95];
        goto LABEL_64;
      }
      int v769 = *(_DWORD *)(v22 + 60);
      int v770 = *(_DWORD *)(v22 + 56);
      int v785 = 1;
      unint64_t v91 = *(void *)(v22 + 88);
      uint64_t i64 = v91;
      unint64_t v92 = (unint64_t)*(int *)(v22 + 76) >> 4;
LABEL_61:
      uint64_t v788 = 0;
      uint64_t v789 = (uint64_t)v54;
      unint64_t v810 = v92 - v53;
      v57 -= (int)v58 * (int)v90;
      uint64_t v96 = (uint64_t)v18;
      char v87 = v18;
LABEL_64:
      uint64_t v88 = v784;
      float v97 = (int8x16_t *)v782;
      goto LABEL_66;
    }
    if (v18)
    {
      unint64_t v57 = (unint64_t)*(int *)(v22 + 80) >> 2;
      v18 += v55 + v57 * v56;
      uint64_t v58 = 0xFFFFFFFFLL;
    }
    else
    {
      unint64_t v57 = 0;
      uint64_t v58 = 0;
    }
    v54 += v55 + v810 * v56;
    if (v810 == v38 && (uint64_t)(v782 - (void)v54) >= 1)
    {
      if (v53 >= (uint64_t)((v782 - (unint64_t)v54) >> 4))
      {
        v782 += 16 * v24;
        v54 += v24;
        v784 += 4 * (int)(v39 & v24);
        int v83 = -1;
        unint64_t v810 = v38;
        v18 += (int)(v58 & v24);
        goto LABEL_48;
      }
      uint64_t v81 = v25 - 1;
      float32x4_t v82 = &v54[v38 * v81];
      if (v782 <= (unint64_t)&v82[v24])
      {
        v782 += 16 * v38 * v81;
        unint64_t v38 = -(uint64_t)v38;
        float v98 = &v784[4 * v783 * v81];
        unint64_t v783 = -(uint64_t)v783;
        v784 = v98;
        v18 += v57 * v81;
        v39 &= 1u;
        unint64_t v57 = -(uint64_t)v57;
        v58 &= 1u;
        int v83 = 1;
        uint64_t v54 = v82;
        unint64_t v810 = v38;
        goto LABEL_48;
      }
    }
    v39 &= 1u;
    v58 &= 1u;
    int v83 = 1;
LABEL_48:
    int v769 = *(_DWORD *)(v22 + 60);
    int v770 = *(_DWORD *)(v22 + 56);
    if (v26)
    {
      float32x4_t v84 = v18;
      uint64_t v815 = v58;
      uint64_t v817 = v39;
      uint64_t v802 = 0;
      v809 = 0;
      uint64_t v85 = -1;
      int v787 = v810;
      int v786 = v57;
LABEL_53:
      int v785 = v83;
      shape_enum_clip_alloc(v2, v39, (int *)v26, v83, v38, 1, *(_DWORD *)(v22 + 104), *(_DWORD *)(v22 + 108), v52, v25);
      uint64_t v49 = v86;
      float v18 = v84;
      uint64_t v804 = (uint64_t)v84;
      char v87 = v84;
      uint64_t v88 = v784;
      unint64_t v813 = v783;
      if (!v86) {
        return 1;
      }
      while (2)
      {
        if (!shape_enum_clip_next(v49, &v823, &v822, v818, &v824))
        {
LABEL_1242:
          uint64_t v80 = (void *)v49;
LABEL_1243:
          free(v80);
          return 1;
        }
        uint64_t v788 = v49;
        uint64_t v789 = (uint64_t)v54;
        if (v809)
        {
          float v97 = (int8x16_t *)(v782 + 16 * v38 * v822 + 16 * v823);
          int v516 = (v822 + *(_DWORD *)(v22 + 60)) % v786;
          int64_t v53 = SLODWORD(v818[0]);
          int v517 = (v823 + *(_DWORD *)(v22 + 56)) % v787;
          float32x4_t v518 = &v54[v810 * v516];
          uint64_t i64 = (uint64_t)v518[v517].i64;
          unint64_t v91 = (unint64_t)&v518[v787];
          uint64_t v39 = v817;
          if (v817) {
            uint64_t v88 = &v784[4 * v783 * v822 + 4 * v823];
          }
          unint64_t v519 = v813;
          if (v817) {
            unint64_t v519 = v783 - SLODWORD(v818[0]);
          }
          unint64_t v813 = v519;
          uint64_t v58 = v815;
          uint64_t v96 = v804;
          if (v815)
          {
            uint64_t v96 = (uint64_t)&v18[v57 * v516 + v517];
            char v87 = (unsigned int *)v96;
          }
          uint64_t v90 = LODWORD(v818[0]);
          uint64_t v54 = &v518[v517];
          int v769 = (v822 + *(_DWORD *)(v22 + 60)) % v786;
          int v770 = (v823 + *(_DWORD *)(v22 + 56)) % v787;
        }
        else
        {
          int v520 = v823 * v785;
          uint64_t v90 = LODWORD(v818[0]);
          int v521 = LODWORD(v818[0]) * v785;
          float v97 = (int8x16_t *)(v782 + 16 * v38 * v822 + 16 * v823 * v785);
          int64_t v53 = LODWORD(v818[0]) * v785;
          v54 += v822 * v787 + v823 * v785;
          uint64_t v39 = v817;
          if (v817) {
            uint64_t v88 = &v784[4 * v783 * v822 + 4 * v520];
          }
          unint64_t v522 = v813;
          if (v817) {
            unint64_t v522 = v783 - v521;
          }
          unint64_t v810 = v787 - v521;
          unint64_t v813 = v522;
          uint64_t v523 = (uint64_t)&v18[v822 * v786 + v520];
          unint64_t v524 = v786 - v521;
          uint64_t v58 = v815;
          if (v815)
          {
            char v87 = (unsigned int *)v523;
            unint64_t v57 = v524;
          }
          unint64_t v91 = v85;
          uint64_t i64 = v802;
          uint64_t v96 = v804;
        }
LABEL_66:
        uint64_t v817 = v39;
        uint64_t v815 = v58;
        unint64_t v99 = v38 - v53;
        unint64_t v800 = v57;
        switch((int)v20)
        {
          case 0:
            v771 = v18;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v100 = v38 - v53;
            uint64_t v85 = v91;
            uint64_t v101 = (int)v90;
            uint64_t v102 = v38 - v53 - (int)v90;
            int v103 = v90 - 1;
            float v104 = &v97[-(int)v90 + 1];
            uint64_t v105 = v100 + (int)v90;
            if (v785 >= 0)
            {
              float v104 = v97;
              uint64_t v102 = v105;
            }
            unsigned int v106 = v824;
            uint64_t v107 = v824 - 1;
            uint64_t v108 = v104[(v102 * v107) & (v102 >> 63)].i8;
            if (v102 < 0) {
              uint64_t v102 = -v102;
            }
            int v109 = v90;
            CGBlt_fillBytes(16 * v90, v824, 0, v108, 16 * v102);
            if (v817)
            {
              if (v785 < 0)
              {
                uint64_t v110 = v813 - v101;
                v88 -= 4 * v103;
              }
              else
              {
                uint64_t v110 = v813 + v101;
              }
              v88 += 4 * ((v110 * v107) & (v110 >> 63));
              if (v110 < 0) {
                uint64_t v110 = -v110;
              }
              unint64_t v813 = v110;
              CGBlt_fillBytes(4 * v109, v106, 0, v88, 4 * v110);
            }
            goto LABEL_824;
          case 1:
            int v111 = *(unsigned __int8 *)(v22 + 1);
            if (v111 == 2)
            {
              int v112 = v90;
              if ((int)v90 >= 2 && (16 * v787) <= 0x40)
              {
                v9.i32[0] = 16 * v787;
                uint8x8_t v492 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v9.f32);
                v492.i16[0] = vaddlv_u8(v492);
                if (v492.i32[0] <= 1u)
                {
                  uint64_t v802 = i64;
                  uint64_t v804 = v96;
                  int v493 = v99;
                  uint64_t v85 = v91;
                  int v806 = v824;
                  uint64_t v54 = (int8x16_t *)v789;
                  CGSFillDRAM64((unint64_t)v97, 16 * (v90 + v493), 16 * v90, v824, v789, 16 * v810, 16 * v787, v786, 16 * v770, v769);
                  if (v817)
                  {
                    uint64_t v49 = v788;
                    if (v815) {
                      CGSFillDRAM64((unint64_t)v88, 4 * (v112 + v813), 4 * v112, v806, (uint64_t)v18, 4 * v57, 4 * v787, v786, 4 * v770, v769);
                    }
                    else {
                      CGBlt_fillBytes(4 * v112, v806, 32831, v88, 4 * (v112 + v813));
                    }
                  }
                  else
                  {
                    uint64_t v49 = v788;
                  }
                  if (!v49) {
                    return 1;
                  }
                  goto LABEL_862;
                }
              }
            }
            else
            {
              int v112 = v90;
              if (v111 == 1)
              {
                unint64_t v113 = v99;
                uint64_t v802 = i64;
                uint64_t v804 = v96;
                uint64_t v114 = (int)v90;
                v771 = v18;
                uint64_t v85 = v91;
                if (v785 < 0)
                {
                  uint64_t v115 = v810 - (int)v90;
                  v54 += -(int)v90 + 1;
                  uint64_t v116 = v113 - (int)v90;
                  v97 += -(int)v90 + 1;
                }
                else
                {
                  uint64_t v115 = v810 + (int)v90;
                  uint64_t v116 = v113 + (int)v90;
                }
                uint64_t v525 = v824 - 1;
                uint64_t v526 = v54[(v115 * v525) & (v115 >> 63)].i8;
                if (v115 >= 0) {
                  unint64_t v527 = v115;
                }
                else {
                  unint64_t v527 = -v115;
                }
                if (v116 >= 0) {
                  LODWORD(v52++*(_DWORD *)(result + 8) = v116;
                }
                else {
                  uint64_t v528 = -v116;
                }
                unint64_t v810 = v527;
                int v807 = v824;
                int v529 = v90;
                CGBlt_copyBytes(16 * v90, v824, v526, v97[(v116 * v525) & (v116 >> 63)].i8, 16 * v527, 16 * v528);
                if (v817)
                {
                  int v530 = 4 * v529;
                  uint64_t v49 = v788;
                  uint64_t v54 = (int8x16_t *)v789;
                  if (v815)
                  {
                    uint64_t v531 = v800 - v114;
                    unint64_t v532 = &v87[-v529 + 1];
                    uint64_t v533 = v813 - v114;
                    int v534 = &v88[-4 * v529 + 4];
                    if (v785 >= 0)
                    {
                      unint64_t v532 = v87;
                      int v534 = v88;
                      uint64_t v531 = v800 + v114;
                      uint64_t v533 = v813 + v114;
                    }
                    uint64_t v535 = (v531 * v525) & (v531 >> 63);
                    char v87 = &v532[v535];
                    if (v531 >= 0) {
                      unint64_t v57 = v531;
                    }
                    else {
                      unint64_t v57 = -v531;
                    }
                    uint64_t v88 = &v534[4 * ((v533 * v525) & (v533 >> 63))];
                    if (v533 >= 0) {
                      uint64_t v536 = v533;
                    }
                    else {
                      uint64_t v536 = -v533;
                    }
                    unint64_t v813 = v536;
                    CGBlt_copyBytes(v530, v807, (char *)&v532[v535], v88, 4 * v57, 4 * v536);
LABEL_826:
                    float v18 = v771;
                    LODWORD(v20) = v767;
                    if (!v49) {
                      return 1;
                    }
                    goto LABEL_862;
                  }
                  uint64_t v537 = v813 - v114;
                  float32x4_t v538 = &v88[-4 * v529 + 4];
                  if (v785 >= 0)
                  {
                    float32x4_t v538 = v88;
                    uint64_t v537 = v813 + v114;
                  }
                  uint64_t v539 = (v537 * v525) & (v537 >> 63);
                  uint64_t v88 = &v538[4 * v539];
                  if (v537 < 0) {
                    uint64_t v537 = -v537;
                  }
                  unint64_t v813 = v537;
                  CGBlt_fillBytes(v530, v807, 32831, &v538[4 * v539], 4 * v537);
                }
                else
                {
LABEL_824:
                  uint64_t v49 = v788;
                  uint64_t v54 = (int8x16_t *)v789;
                }
                unint64_t v57 = v800;
                goto LABEL_826;
              }
            }
            if (!v39)
            {
              int v503 = v824;
              do
              {
                int v504 = v112;
                do
                {
                  *float v97 = *v54;
                  int v505 = &v54[v785];
                  if ((unint64_t)v505 >= v91) {
                    uint64_t v506 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v506 = 0;
                  }
                  v87 += (int)v58 + v506;
                  uint64_t v54 = &v505[v506];
                  v97 += v785;
                  --v504;
                }
                while (v504);
                if (v809)
                {
                  unint64_t v507 = i64 + 16 * v810;
                  if (v507 >= (unint64_t)v809) {
                    uint64_t v508 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v508 = 0;
                  }
                  v96 += 4 * v57 + 4 * v508;
                  if (v507 >= (unint64_t)v809) {
                    uint64_t v509 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v509 = 0;
                  }
                  uint64_t i64 = v507 + 16 * v509;
                  v91 += 16 * v509 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v503;
              }
              while (v503);
              goto LABEL_844;
            }
            uint64_t v494 = 4 * (int)v39;
            uint64_t v495 = 16 * v785;
            if (v58)
            {
              int v496 = v824;
              do
              {
                int v497 = v112;
                do
                {
                  *float v97 = *v54;
                  *(_DWORD *)uint64_t v88 = *v87;
                  uint64_t v498 = &v54[v785];
                  if ((unint64_t)v498 >= v91) {
                    uint64_t v499 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v499 = 0;
                  }
                  v87 += (int)v58 + v499;
                  uint64_t v54 = &v498[v499];
                  v88 += v494;
                  float v97 = (int8x16_t *)((char *)v97 + v495);
                  --v497;
                }
                while (v497);
                if (v809)
                {
                  unint64_t v500 = i64 + 16 * v810;
                  if (v500 >= (unint64_t)v809) {
                    uint64_t v501 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v501 = 0;
                  }
                  v96 += 4 * v57 + 4 * v501;
                  if (v500 >= (unint64_t)v809) {
                    uint64_t v502 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v502 = 0;
                  }
                  uint64_t i64 = v500 + 16 * v502;
                  v91 += 16 * v502 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v496;
              }
              while (v496);
LABEL_844:
              uint64_t v802 = i64;
              uint64_t v804 = v96;
              uint64_t v85 = v91;
              int v824 = 0;
              goto LABEL_861;
            }
            do
            {
              int v510 = v818[0];
              do
              {
                *float v97 = *v54;
                *(_DWORD *)uint64_t v88 = 32831;
                float32x4_t v511 = &v54[v785];
                if ((unint64_t)v511 >= v91) {
                  uint64_t v512 = -(uint64_t)v787;
                }
                else {
                  uint64_t v512 = 0;
                }
                v87 += v512;
                uint64_t v54 = &v511[v512];
                v88 += v494;
                float v97 = (int8x16_t *)((char *)v97 + v495);
                --v510;
              }
              while (v510);
              if (v809)
              {
                unint64_t v513 = i64 + 16 * v810;
                if (v513 >= (unint64_t)v809) {
                  uint64_t v514 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v514 = 0;
                }
                v96 += 4 * v57 + 4 * v514;
                if (v513 >= (unint64_t)v809) {
                  uint64_t v515 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v515 = 0;
                }
                uint64_t i64 = v513 + 16 * v515;
                v91 += 16 * v515 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 2:
            if (!v39)
            {
              int v444 = v824;
              while (1)
              {
                int v445 = v90;
                do
                {
                  float v446 = COERCE_FLOAT(bswap32(*v87));
                  if (v446 >= 1.0)
                  {
                    int8x16_t v447 = *v54;
                  }
                  else
                  {
                    if (v446 <= 0.0) {
                      goto LABEL_678;
                    }
                    int8x16_t v447 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v54), (float32x4_t)vrev32q_s8(*v97), 1.0 - v446));
                  }
                  *float v97 = v447;
LABEL_678:
                  uint64_t v448 = &v54[v785];
                  if ((unint64_t)v448 >= v91) {
                    uint64_t v449 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v449 = 0;
                  }
                  v87 += (int)v58 + v449;
                  uint64_t v54 = &v448[v449];
                  v97 += v785;
                  --v445;
                }
                while (v445);
                if (v809)
                {
                  unint64_t v450 = i64 + 16 * v810;
                  if (v450 >= (unint64_t)v809) {
                    uint64_t v451 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v451 = 0;
                  }
                  v96 += 4 * v57 + 4 * v451;
                  if (v450 >= (unint64_t)v809) {
                    uint64_t v452 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v452 = 0;
                  }
                  uint64_t i64 = v450 + 16 * v452;
                  v91 += 16 * v452 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                int v824 = --v444;
                if (!v444) {
                  goto LABEL_860;
                }
              }
            }
            do
            {
              int v117 = v818[0];
              do
              {
                float v118 = COERCE_FLOAT(bswap32(*v87));
                float v119 = v118;
                if (v118 >= 1.0)
                {
                  *float v97 = *v54;
                  *(_DWORD *)uint64_t v88 = *v87;
                }
                else if (v118 > 0.0)
                {
                  unsigned int v120 = bswap32(COERCE_UNSIGNED_INT(v118 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v88))
                                                                  * (float)(1.0 - v118))));
                  *float v97 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v54), (float32x4_t)vrev32q_s8(*v97), 1.0 - v119));
                  *(_DWORD *)uint64_t v88 = v120;
                }
                float v121 = &v54[v785];
                if ((unint64_t)v121 >= v91) {
                  uint64_t v122 = -(uint64_t)v787;
                }
                else {
                  uint64_t v122 = 0;
                }
                v87 += (int)v58 + v122;
                uint64_t v54 = &v121[v122];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v117;
              }
              while (v117);
              if (v809)
              {
                unint64_t v123 = i64 + 16 * v810;
                if (v123 >= (unint64_t)v809) {
                  uint64_t v124 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v124 = 0;
                }
                v96 += 4 * v57 + 4 * v124;
                if (v123 >= (unint64_t)v809) {
                  uint64_t v125 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v125 = 0;
                }
                uint64_t i64 = v123 + 16 * v125;
                v91 += 16 * v125 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
LABEL_860:
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            uint64_t v85 = v91;
LABEL_861:
            uint64_t v49 = v788;
            uint64_t v54 = (int8x16_t *)v789;
            if (!v788) {
              return 1;
            }
LABEL_862:
            int v823 = 0;
            int v822 = 0;
            continue;
          case 3:
            if (v58)
            {
              do
              {
                int v126 = v818[0];
                do
                {
                  float v127 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                  float v128 = v127;
                  if (v127 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                    *(_DWORD *)uint64_t v88 = 0;
                  }
                  else if (v127 >= 1.0)
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = *v87;
                  }
                  else
                  {
                    unsigned int v129 = bswap32(COERCE_UNSIGNED_INT(v127 * COERCE_FLOAT(bswap32(*v87))));
                    *float v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v54), v128));
                    *(_DWORD *)uint64_t v88 = v129;
                  }
                  float v130 = &v54[v785];
                  if ((unint64_t)v130 >= v91) {
                    uint64_t v131 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v131 = 0;
                  }
                  v87 += (int)v58 + v131;
                  uint64_t v54 = &v130[v131];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v126;
                }
                while (v126);
                if (v809)
                {
                  unint64_t v132 = i64 + 16 * v810;
                  if (v132 >= (unint64_t)v809) {
                    uint64_t v133 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v133 = 0;
                  }
                  v96 += 4 * v57 + 4 * v133;
                  if (v132 >= (unint64_t)v809) {
                    uint64_t v134 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v134 = 0;
                  }
                  uint64_t i64 = v132 + 16 * v134;
                  v91 += 16 * v134 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v824;
              }
              while (v824);
            }
            else
            {
              int v453 = v824;
              do
              {
                int v454 = v90;
                do
                {
                  float v455 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                  if (v455 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                  }
                  else
                  {
                    if (v455 >= 1.0) {
                      int8x16_t v456 = *v54;
                    }
                    else {
                      int8x16_t v456 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v54), v455));
                    }
                    *float v97 = v456;
                  }
                  float v457 = &v54[v785];
                  if ((unint64_t)v457 >= v91) {
                    uint64_t v458 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v458 = 0;
                  }
                  v87 += v458;
                  uint64_t v54 = &v457[v458];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v454;
                }
                while (v454);
                if (v809)
                {
                  unint64_t v459 = i64 + 16 * v810;
                  if (v459 >= (unint64_t)v809) {
                    uint64_t v460 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v460 = 0;
                  }
                  v96 += 4 * v57 + 4 * v460;
                  if (v459 >= (unint64_t)v809) {
                    uint64_t v461 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v461 = 0;
                  }
                  uint64_t i64 = v459 + 16 * v461;
                  v91 += 16 * v461 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                int v824 = --v453;
              }
              while (v453);
            }
            goto LABEL_860;
          case 4:
            do
            {
              int v135 = v818[0];
              do
              {
                float v136 = 1.0 - COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                if (v136 <= 0.0)
                {
                  v97->i64[0] = 0;
                  v97->i64[1] = 0;
                  *(_DWORD *)uint64_t v88 = 0;
                }
                else
                {
                  if (v136 >= 1.0)
                  {
                    if (v58) {
                      unsigned int v138 = bswap32(*v87);
                    }
                    else {
                      unsigned int v138 = 1065353216;
                    }
                    unsigned int v139 = bswap32(v138);
                  }
                  else
                  {
                    if (v58) {
                      float v137 = COERCE_FLOAT(bswap32(*v87));
                    }
                    else {
                      float v137 = 1.0;
                    }
                    unsigned int v139 = bswap32(COERCE_UNSIGNED_INT(v136 * v137));
                    *float v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v54), v136));
                  }
                  *(_DWORD *)uint64_t v88 = v139;
                }
                float v140 = &v54[v785];
                if ((unint64_t)v140 >= v91) {
                  uint64_t v141 = -(uint64_t)v787;
                }
                else {
                  uint64_t v141 = 0;
                }
                v87 += (int)v58 + v141;
                uint64_t v54 = &v140[v141];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v135;
              }
              while (v135);
              if (v809)
              {
                unint64_t v142 = i64 + 16 * v810;
                if (v142 >= (unint64_t)v809) {
                  uint64_t v143 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v143 = 0;
                }
                v96 += 4 * v57 + 4 * v143;
                if (v142 >= (unint64_t)v809) {
                  uint64_t v144 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v144 = 0;
                }
                uint64_t i64 = v142 + 16 * v144;
                v91 += 16 * v144 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 5:
            do
            {
              int v145 = v818[0];
              do
              {
                float v146 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                float v147 = COERCE_FLOAT(bswap32(*v87));
                *float v97 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), 1.0 - v147), (float32x4_t)vrev32q_s8(*v54), v146));
                *(_DWORD *)uint64_t v88 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v147) * v146) + (float)(v147 * v146)));
                float v148 = &v54[v785];
                if ((unint64_t)v148 >= v91) {
                  uint64_t v149 = -(uint64_t)v787;
                }
                else {
                  uint64_t v149 = 0;
                }
                v87 += (int)v58 + v149;
                uint64_t v54 = &v148[v149];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v145;
              }
              while (v145);
              if (v809)
              {
                unint64_t v150 = i64 + 16 * v810;
                if (v150 >= (unint64_t)v809) {
                  uint64_t v151 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v151 = 0;
                }
                v96 += 4 * v57 + 4 * v151;
                if (v150 >= (unint64_t)v809) {
                  uint64_t v152 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v152 = 0;
                }
                uint64_t i64 = v150 + 16 * v152;
                v91 += 16 * v152 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 6:
            while (1)
            {
              int v153 = v818[0];
              do
              {
                float v154 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                float v155 = 1.0 - v154;
                if ((float)(1.0 - v154) >= 1.0)
                {
                  if (v58) {
                    unsigned int v157 = bswap32(*v87);
                  }
                  else {
                    unsigned int v157 = 1065353216;
                  }
                  int8x16_t v158 = *v54;
                  unsigned int v159 = bswap32(v157);
                }
                else
                {
                  if (v155 <= 0.0) {
                    goto LABEL_177;
                  }
                  if (v58) {
                    float v156 = COERCE_FLOAT(bswap32(*v87));
                  }
                  else {
                    float v156 = 1.0;
                  }
                  unsigned int v159 = bswap32(COERCE_UNSIGNED_INT(v154 + (float)(v156 * v155)));
                  int8x16_t v158 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v97), (float32x4_t)vrev32q_s8(*v54), v155));
                }
                *float v97 = v158;
                *(_DWORD *)uint64_t v88 = v159;
LABEL_177:
                float v160 = &v54[v785];
                if ((unint64_t)v160 >= v91) {
                  uint64_t v161 = -(uint64_t)v787;
                }
                else {
                  uint64_t v161 = 0;
                }
                v87 += (int)v58 + v161;
                uint64_t v54 = &v160[v161];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v153;
              }
              while (v153);
              if (v809)
              {
                unint64_t v162 = i64 + 16 * v810;
                if (v162 >= (unint64_t)v809) {
                  uint64_t v163 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v163 = 0;
                }
                v96 += 4 * v57 + 4 * v163;
                if (v162 >= (unint64_t)v809) {
                  uint64_t v164 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v164 = 0;
                }
                uint64_t i64 = v162 + 16 * v164;
                v91 += 16 * v164 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              if (!--v824) {
                goto LABEL_860;
              }
            }
          case 7:
            if (v39)
            {
              do
              {
                int v165 = v818[0];
                do
                {
                  float v166 = COERCE_FLOAT(bswap32(*v87));
                  float v167 = v166;
                  if (v166 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                    *(_DWORD *)uint64_t v88 = 0;
                  }
                  else if (v166 < 1.0)
                  {
                    unsigned int v168 = bswap32(COERCE_UNSIGNED_INT(v166 * COERCE_FLOAT(bswap32(*(_DWORD *)v88))));
                    *float v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v167));
                    *(_DWORD *)uint64_t v88 = v168;
                  }
                  unsigned int v169 = &v54[v785];
                  if ((unint64_t)v169 >= v91) {
                    uint64_t v170 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v170 = 0;
                  }
                  v87 += (int)v58 + v170;
                  uint64_t v54 = &v169[v170];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v165;
                }
                while (v165);
                if (v809)
                {
                  unint64_t v171 = i64 + 16 * v810;
                  if (v171 >= (unint64_t)v809) {
                    uint64_t v172 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v172 = 0;
                  }
                  v96 += 4 * v57 + 4 * v172;
                  if (v171 >= (unint64_t)v809) {
                    uint64_t v173 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v173 = 0;
                  }
                  uint64_t i64 = v171 + 16 * v173;
                  v91 += 16 * v173 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v824;
              }
              while (v824);
            }
            else
            {
              int v462 = v824;
              do
              {
                int v463 = v90;
                do
                {
                  float v464 = COERCE_FLOAT(bswap32(*v87));
                  if (v464 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                  }
                  else if (v464 < 1.0)
                  {
                    *float v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v464));
                  }
                  uint64_t v465 = &v54[v785];
                  if ((unint64_t)v465 >= v91) {
                    uint64_t v466 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v466 = 0;
                  }
                  v87 += (int)v58 + v466;
                  uint64_t v54 = &v465[v466];
                  v97 += v785;
                  --v463;
                }
                while (v463);
                if (v809)
                {
                  unint64_t v467 = i64 + 16 * v810;
                  if (v467 >= (unint64_t)v809) {
                    uint64_t v468 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v468 = 0;
                  }
                  v96 += 4 * v57 + 4 * v468;
                  if (v467 >= (unint64_t)v809) {
                    uint64_t v469 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v469 = 0;
                  }
                  uint64_t i64 = v467 + 16 * v469;
                  v91 += 16 * v469 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                int v824 = --v462;
              }
              while (v462);
            }
            goto LABEL_860;
          case 8:
            if (v39)
            {
              do
              {
                int v174 = v818[0];
                do
                {
                  float v175 = 1.0 - COERCE_FLOAT(bswap32(*v87));
                  if (v175 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                    *(_DWORD *)uint64_t v88 = 0;
                  }
                  else if (v175 < 1.0)
                  {
                    unsigned int v176 = bswap32(COERCE_UNSIGNED_INT(v175 * COERCE_FLOAT(bswap32(*(_DWORD *)v88))));
                    *float v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v175));
                    *(_DWORD *)uint64_t v88 = v176;
                  }
                  int v177 = &v54[v785];
                  if ((unint64_t)v177 >= v91) {
                    uint64_t v178 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v178 = 0;
                  }
                  v87 += (int)v58 + v178;
                  uint64_t v54 = &v177[v178];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v174;
                }
                while (v174);
                if (v809)
                {
                  unint64_t v179 = i64 + 16 * v810;
                  if (v179 >= (unint64_t)v809) {
                    uint64_t v180 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v180 = 0;
                  }
                  v96 += 4 * v57 + 4 * v180;
                  if (v179 >= (unint64_t)v809) {
                    uint64_t v181 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v181 = 0;
                  }
                  uint64_t i64 = v179 + 16 * v181;
                  v91 += 16 * v181 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v824;
              }
              while (v824);
            }
            else
            {
              int v470 = v824;
              do
              {
                int v471 = v90;
                do
                {
                  float v472 = 1.0 - COERCE_FLOAT(bswap32(*v87));
                  if (v472 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                  }
                  else if (v472 < 1.0)
                  {
                    *float v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v472));
                  }
                  float v473 = &v54[v785];
                  if ((unint64_t)v473 >= v91) {
                    uint64_t v474 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v474 = 0;
                  }
                  v87 += (int)v58 + v474;
                  uint64_t v54 = &v473[v474];
                  v97 += v785;
                  --v471;
                }
                while (v471);
                if (v809)
                {
                  unint64_t v475 = i64 + 16 * v810;
                  if (v475 >= (unint64_t)v809) {
                    uint64_t v476 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v476 = 0;
                  }
                  v96 += 4 * v57 + 4 * v476;
                  if (v475 >= (unint64_t)v809) {
                    uint64_t v477 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v477 = 0;
                  }
                  uint64_t i64 = v475 + 16 * v477;
                  v91 += 16 * v477 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                int v824 = --v470;
              }
              while (v470);
            }
            goto LABEL_860;
          case 9:
            do
            {
              int v182 = v818[0];
              do
              {
                float v183 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                float v184 = COERCE_FLOAT(bswap32(*v87));
                *float v97 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v184), (float32x4_t)vrev32q_s8(*v54), 1.0 - v183));
                *(_DWORD *)uint64_t v88 = bswap32(COERCE_UNSIGNED_INT((float)(v183 * v184) + (float)(v184 * (float)(1.0 - v183))));
                int v185 = &v54[v785];
                if ((unint64_t)v185 >= v91) {
                  uint64_t v186 = -(uint64_t)v787;
                }
                else {
                  uint64_t v186 = 0;
                }
                v87 += (int)v58 + v186;
                uint64_t v54 = &v185[v186];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v182;
              }
              while (v182);
              if (v809)
              {
                unint64_t v187 = i64 + 16 * v810;
                if (v187 >= (unint64_t)v809) {
                  uint64_t v188 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v188 = 0;
                }
                v96 += 4 * v57 + 4 * v188;
                if (v187 >= (unint64_t)v809) {
                  uint64_t v189 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v189 = 0;
                }
                uint64_t i64 = v187 + 16 * v189;
                v91 += 16 * v189 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 10:
            do
            {
              int v190 = v818[0];
              do
              {
                float v191 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                float v192 = COERCE_FLOAT(bswap32(*v87));
                *float v97 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), 1.0 - v192), (float32x4_t)vrev32q_s8(*v54), 1.0 - v191));
                *(_DWORD *)uint64_t v88 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v192) * v191) + (float)(v192 * (float)(1.0 - v191))));
                float v193 = &v54[v785];
                if ((unint64_t)v193 >= v91) {
                  uint64_t v194 = -(uint64_t)v787;
                }
                else {
                  uint64_t v194 = 0;
                }
                v87 += (int)v58 + v194;
                uint64_t v54 = &v193[v194];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v190;
              }
              while (v190);
              if (v809)
              {
                unint64_t v195 = i64 + 16 * v810;
                if (v195 >= (unint64_t)v809) {
                  uint64_t v196 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v196 = 0;
                }
                v96 += 4 * v57 + 4 * v196;
                if (v195 >= (unint64_t)v809) {
                  uint64_t v197 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v197 = 0;
                }
                uint64_t i64 = v195 + 16 * v197;
                v91 += 16 * v197 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 11:
            if (v39)
            {
              do
              {
                int v198 = v818[0];
                do
                {
                  if (v58) {
                    v10.i32[0] = bswap32(*v87);
                  }
                  else {
                    v10.i32[0] = 1.0;
                  }
                  float32x4_t v199 = (float32x4_t)vrev32q_s8(*v97);
                  float32x4_t v200 = (float32x4_t)vrev32q_s8(*v54);
                  v13.i32[0] = bswap32(*(_DWORD *)v88);
                  v14.f32[0] = v10.f32[0] + v13.f32[0];
                  if ((float)(v10.f32[0] + v13.f32[0]) > 1.0) {
                    v14.f32[0] = 1.0;
                  }
                  float32x4_t v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
                  float32x4_t v10 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), v200), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 0), vsubq_f32(v13, v199))));
                  *float v97 = (int8x16_t)v10;
                  *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  uint64_t v201 = &v54[v785];
                  if ((unint64_t)v201 >= v91) {
                    uint64_t v202 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v202 = 0;
                  }
                  v87 += (int)v58 + v202;
                  uint64_t v54 = &v201[v202];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v198;
                }
                while (v198);
                if (v809)
                {
                  unint64_t v203 = i64 + 16 * v810;
                  if (v203 >= (unint64_t)v809) {
                    uint64_t v204 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v204 = 0;
                  }
                  v96 += 4 * v57 + 4 * v204;
                  if (v203 >= (unint64_t)v809) {
                    uint64_t v205 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v205 = 0;
                  }
                  uint64_t i64 = v203 + 16 * v205;
                  v91 += 16 * v205 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v824;
              }
              while (v824);
            }
            else
            {
              int v478 = v824;
              do
              {
                int v479 = v90;
                do
                {
                  if (v58) {
                    v9.i32[0] = bswap32(*v87);
                  }
                  else {
                    v9.i32[0] = 1.0;
                  }
                  float32x4_t v9 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0), (float32x4_t)vrev32q_s8(*v54)), (float32x4_t)vrev32q_s8(*v97)));
                  *float v97 = (int8x16_t)v9;
                  uint64_t v480 = &v54[v785];
                  if ((unint64_t)v480 >= v91) {
                    uint64_t v481 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v481 = 0;
                  }
                  v87 += (int)v58 + v481;
                  uint64_t v54 = &v480[v481];
                  v97 += v785;
                  --v479;
                }
                while (v479);
                if (v809)
                {
                  unint64_t v482 = i64 + 16 * v810;
                  if (v482 >= (unint64_t)v809) {
                    uint64_t v483 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v483 = 0;
                  }
                  v96 += 4 * v57 + 4 * v483;
                  if (v482 >= (unint64_t)v809) {
                    uint64_t v484 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v484 = 0;
                  }
                  uint64_t i64 = v482 + 16 * v484;
                  v91 += 16 * v484 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                int v824 = --v478;
              }
              while (v478);
            }
            goto LABEL_860;
          case 12:
            if (!v39)
            {
              int v485 = v824;
              do
              {
                int v486 = v90;
                do
                {
                  *float v97 = vrev32q_s8((int8x16_t)vaddq_f32((float32x4_t)vrev32q_s8(*v97), (float32x4_t)vrev32q_s8(*v54)));
                  int v487 = &v54[v785];
                  if ((unint64_t)v487 >= v91) {
                    uint64_t v488 = -(uint64_t)v787;
                  }
                  else {
                    uint64_t v488 = 0;
                  }
                  v87 += (int)v58 + v488;
                  uint64_t v54 = &v487[v488];
                  v97 += v785;
                  --v486;
                }
                while (v486);
                if (v809)
                {
                  unint64_t v489 = i64 + 16 * v810;
                  if (v489 >= (unint64_t)v809) {
                    uint64_t v490 = -(uint64_t)(v57 * v786);
                  }
                  else {
                    uint64_t v490 = 0;
                  }
                  v96 += 4 * v57 + 4 * v490;
                  if (v489 >= (unint64_t)v809) {
                    uint64_t v491 = -(uint64_t)(v810 * v786);
                  }
                  else {
                    uint64_t v491 = 0;
                  }
                  uint64_t i64 = v489 + 16 * v491;
                  v91 += 16 * v491 + 16 * v810;
                  char v87 = (unsigned int *)v96;
                  uint64_t v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v485;
              }
              while (v485);
              goto LABEL_844;
            }
            do
            {
              int v206 = v818[0];
              do
              {
                if (v58) {
                  float v207 = COERCE_FLOAT(bswap32(*v87));
                }
                else {
                  float v207 = 1.0;
                }
                float v208 = v207 + COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                int8x16_t v209 = (int8x16_t)vaddq_f32((float32x4_t)vrev32q_s8(*v97), (float32x4_t)vrev32q_s8(*v54));
                if (v208 > 1.0) {
                  float v208 = 1.0;
                }
                *float v97 = vrev32q_s8(v209);
                *(_DWORD *)uint64_t v88 = bswap32(LODWORD(v208));
                unsigned int v210 = &v54[v785];
                if ((unint64_t)v210 >= v91) {
                  uint64_t v211 = -(uint64_t)v787;
                }
                else {
                  uint64_t v211 = 0;
                }
                v87 += (int)v58 + v211;
                uint64_t v54 = &v210[v211];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v206;
              }
              while (v206);
              if (v809)
              {
                unint64_t v212 = i64 + 16 * v810;
                if (v212 >= (unint64_t)v809) {
                  uint64_t v213 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v213 = 0;
                }
                v96 += 4 * v57 + 4 * v213;
                if (v212 >= (unint64_t)v809) {
                  uint64_t v214 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v214 = 0;
                }
                uint64_t i64 = v212 + 16 * v214;
                v91 += 16 * v214 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 13:
            v9.i32[0] = 1.0;
            do
            {
              int v215 = v818[0];
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if (v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
                  {
                    unsigned int v221 = v10.i32[0];
                    float32x4_t v10 = *(float32x4_t *)v54;
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v221);
                  }
                  else
                  {
                    float32x4_t v216 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    float32x4_t v217 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    float32x4_t v218 = vmulq_f32(v216, v217);
                    float32x4_t v219 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32(v218, v216, 1.0 - v10.f32[0]), (int8x16_t)v218);
                    float32x4_t v220 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32(v219, v217, 1.0 - v11.f32[0]), (int8x16_t)v219);
                    v11.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                    float32x4_t v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), v220);
                    *(int8x8_t *)v10.f32 = vrev32_s8(*(int8x8_t *)v10.f32);
                    v97->i64[0] = v10.i64[0];
                    v97->i32[2] = bswap32(v10.u32[2]);
                    v97->i32[3] = bswap32(v10.u32[3]);
                    if (v39) {
                      *(_DWORD *)uint64_t v88 = bswap32(v11.u32[0]);
                    }
                  }
                }
                uint64_t v222 = &v54[v785];
                if ((unint64_t)v222 >= v91) {
                  uint64_t v223 = -(uint64_t)v787;
                }
                else {
                  uint64_t v223 = 0;
                }
                v87 += (int)v58 + v223;
                uint64_t v54 = &v222[v223];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v215;
              }
              while (v215);
              if (v809)
              {
                unint64_t v224 = i64 + 16 * v810;
                if (v224 >= (unint64_t)v809) {
                  uint64_t v225 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v225 = 0;
                }
                v96 += 4 * v57 + 4 * v225;
                if (v224 >= (unint64_t)v809) {
                  uint64_t v226 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v226 = 0;
                }
                uint64_t i64 = v224 + 16 * v226;
                v91 += 16 * v226 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 14:
            __asm { FMOV            V0.4S, #1.0 }
            break;
          case 15:
            unint64_t v790 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v240 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v773 = -(uint64_t)(v57 * v786);
            uint64_t v241 = 4 * (int)v39;
            uint64_t v242 = -(uint64_t)v787;
            do
            {
              int v243 = v818[0];
              do
              {
                float v244 = 1.0;
                v14.i32[0] = 1.0;
                if (!v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if (v39 && (float v244 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v244 <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    unint64_t v245 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v246 = vrev32q_s8(*v97);
                    int8x16_t v756 = vrev32q_s8(*v54);
                    PDAoverlayPDA(v825.f32, *(float *)v246.i32, *(float *)&v246.i32[1], *(float *)&v246.i32[2], *(float *)&v246.i32[3], v244, *(double *)v14.i64, *(double *)v756.i64, v16, *(float *)v756.i32, *(float *)&v756.i32[1], *(float *)&v756.i32[2], *(float *)&v756.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    unsigned int v247 = bswap32(v825.u32[0]);
                    unsigned int v248 = bswap32(v825.u32[1]);
                    unsigned int v249 = bswap32(v825.u32[2]);
                    unsigned int v250 = bswap32(v825.u32[3]);
                    if (v817)
                    {
                      unsigned int v251 = bswap32(v826);
                      v97->i32[0] = v247;
                      v97->i32[1] = v248;
                      v97->i32[2] = v249;
                      v97->i32[3] = v250;
                      *(_DWORD *)uint64_t v88 = v251;
                    }
                    else
                    {
                      v97->i32[0] = v247;
                      v97->i32[1] = v248;
                      v97->i32[2] = v249;
                      v97->i32[3] = v250;
                    }
                    LODWORD(v5++*(_DWORD *)(result + 8) = v815;
                    unint64_t v91 = v245;
                    uint64_t v242 = -(uint64_t)v787;
                  }
                }
                float32x4_t v252 = &v54[v785];
                if ((unint64_t)v252 >= v91) {
                  uint64_t v253 = v242;
                }
                else {
                  uint64_t v253 = 0;
                }
                v87 += v240 + v253;
                uint64_t v54 = &v252[v253];
                v88 += v241;
                v97 += v785;
                --v243;
              }
              while (v243);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v254 = v802 + 16 * v810;
                uint64_t v255 = v773;
                if (v254 < (unint64_t)v809) {
                  uint64_t v255 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v255);
                uint64_t v256 = -(uint64_t)(v810 * v786);
                if (v254 < (unint64_t)v809) {
                  uint64_t v256 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v254 + 16 * v256);
                v91 += 16 * v256 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v255;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v790;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 16:
            v9.i32[0] = 1.0;
            do
            {
              int v257 = v818[0];
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if (v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
                  {
                    unsigned int v266 = v10.i32[0];
                    float32x4_t v10 = *(float32x4_t *)v54;
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v266);
                  }
                  else
                  {
                    float32x4_t v258 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    float32x4_t v259 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    float32x4_t v260 = vmulq_n_f32(v258, v10.f32[0]);
                    float32x4_t v261 = vmulq_n_f32(v259, v11.f32[0]);
                    float32x4_t v262 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v260, v261), (int8x16_t)v261, (int8x16_t)v260);
                    float32x4_t v263 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32(v262, v258, 1.0 - v10.f32[0]), (int8x16_t)v262);
                    int8x16_t v264 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0);
                    int8x16_t v265 = (int8x16_t)vmlaq_n_f32(v263, v259, 1.0 - v11.f32[0]);
                    v11.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                    float32x4_t v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vbslq_s8(v264, v265, (int8x16_t)v263));
                    *(int8x8_t *)v10.f32 = vrev32_s8(*(int8x8_t *)v10.f32);
                    v97->i64[0] = v10.i64[0];
                    v97->i32[2] = bswap32(v10.u32[2]);
                    v97->i32[3] = bswap32(v10.u32[3]);
                    if (v39) {
                      *(_DWORD *)uint64_t v88 = bswap32(v11.u32[0]);
                    }
                  }
                }
                float32x4_t v267 = &v54[v785];
                if ((unint64_t)v267 >= v91) {
                  uint64_t v268 = -(uint64_t)v787;
                }
                else {
                  uint64_t v268 = 0;
                }
                v87 += (int)v58 + v268;
                uint64_t v54 = &v267[v268];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v257;
              }
              while (v257);
              if (v809)
              {
                unint64_t v269 = i64 + 16 * v810;
                if (v269 >= (unint64_t)v809) {
                  uint64_t v270 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v270 = 0;
                }
                v96 += 4 * v57 + 4 * v270;
                if (v269 >= (unint64_t)v809) {
                  uint64_t v271 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v271 = 0;
                }
                uint64_t i64 = v269 + 16 * v271;
                v91 += 16 * v271 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 17:
            v9.i32[0] = 1.0;
            do
            {
              int v272 = v818[0];
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if (v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
                  {
                    unsigned int v280 = v10.i32[0];
                    float32x4_t v10 = *(float32x4_t *)v54;
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v280);
                  }
                  else
                  {
                    float32x4_t v273 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    float32x4_t v274 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    float32x4_t v275 = vmulq_n_f32(v273, v10.f32[0]);
                    float32x4_t v276 = vmulq_n_f32(v274, v11.f32[0]);
                    float32x4_t v277 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v276, v275), (int8x16_t)v276, (int8x16_t)v275);
                    float32x4_t v278 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32(v277, v273, 1.0 - v10.f32[0]), (int8x16_t)v277);
                    float32x4_t v279 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32(v278, v274, 1.0 - v11.f32[0]), (int8x16_t)v278);
                    v11.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                    float32x4_t v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), v279);
                    *(int8x8_t *)v10.f32 = vrev32_s8(*(int8x8_t *)v10.f32);
                    v97->i64[0] = v10.i64[0];
                    v97->i32[2] = bswap32(v10.u32[2]);
                    v97->i32[3] = bswap32(v10.u32[3]);
                    if (v39) {
                      *(_DWORD *)uint64_t v88 = bswap32(v11.u32[0]);
                    }
                  }
                }
                int v281 = &v54[v785];
                if ((unint64_t)v281 >= v91) {
                  uint64_t v282 = -(uint64_t)v787;
                }
                else {
                  uint64_t v282 = 0;
                }
                v87 += (int)v58 + v282;
                uint64_t v54 = &v281[v282];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v272;
              }
              while (v272);
              if (v809)
              {
                unint64_t v283 = i64 + 16 * v810;
                if (v283 >= (unint64_t)v809) {
                  uint64_t v284 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v284 = 0;
                }
                v96 += 4 * v57 + 4 * v284;
                if (v283 >= (unint64_t)v809) {
                  uint64_t v285 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v285 = 0;
                }
                uint64_t i64 = v283 + 16 * v285;
                v91 += 16 * v285 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 18:
            unint64_t v791 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v286 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v774 = -(uint64_t)(v57 * v786);
            uint64_t v287 = 4 * (int)v39;
            uint64_t v288 = -(uint64_t)v787;
            do
            {
              int v289 = v818[0];
              do
              {
                float v290 = 1.0;
                v14.i32[0] = 1.0;
                if (!v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if (v39 && (float v290 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v290 <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    unint64_t v291 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v292 = vrev32q_s8(*v97);
                    int8x16_t v757 = vrev32q_s8(*v54);
                    PDAcolordodgePDA(v825.f32, *(float *)v292.i32, *(float *)&v292.i32[1], *(float *)&v292.i32[2], *(float *)&v292.i32[3], v290, *(double *)v14.i64, *(double *)v757.i64, v16, *(float *)v757.i32, *(float *)&v757.i32[1], *(float *)&v757.i32[2], *(float *)&v757.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    unsigned int v293 = bswap32(v825.u32[0]);
                    unsigned int v294 = bswap32(v825.u32[1]);
                    unsigned int v295 = bswap32(v825.u32[2]);
                    unsigned int v296 = bswap32(v825.u32[3]);
                    if (v817)
                    {
                      unsigned int v297 = bswap32(v826);
                      v97->i32[0] = v293;
                      v97->i32[1] = v294;
                      v97->i32[2] = v295;
                      v97->i32[3] = v296;
                      *(_DWORD *)uint64_t v88 = v297;
                    }
                    else
                    {
                      v97->i32[0] = v293;
                      v97->i32[1] = v294;
                      v97->i32[2] = v295;
                      v97->i32[3] = v296;
                    }
                    LODWORD(v5++*(_DWORD *)(result + 8) = v815;
                    unint64_t v91 = v291;
                    uint64_t v288 = -(uint64_t)v787;
                  }
                }
                unsigned int v298 = &v54[v785];
                if ((unint64_t)v298 >= v91) {
                  uint64_t v299 = v288;
                }
                else {
                  uint64_t v299 = 0;
                }
                v87 += v286 + v299;
                uint64_t v54 = &v298[v299];
                v88 += v287;
                v97 += v785;
                --v289;
              }
              while (v289);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v300 = v802 + 16 * v810;
                uint64_t v301 = v774;
                if (v300 < (unint64_t)v809) {
                  uint64_t v301 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v301);
                uint64_t v302 = -(uint64_t)(v810 * v786);
                if (v300 < (unint64_t)v809) {
                  uint64_t v302 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v300 + 16 * v302);
                v91 += 16 * v302 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v301;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v791;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 19:
            unint64_t v792 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v303 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v775 = -(uint64_t)(v57 * v786);
            uint64_t v304 = 4 * (int)v39;
            uint64_t v305 = -(uint64_t)v787;
            do
            {
              int v306 = v818[0];
              do
              {
                float v307 = 1.0;
                v14.i32[0] = 1.0;
                if (!v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if (v39 && (float v307 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v307 <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    unint64_t v308 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v309 = vrev32q_s8(*v97);
                    int8x16_t v758 = vrev32q_s8(*v54);
                    PDAcolorburnPDA(v825.f32, *(float *)v309.i32, *(float *)&v309.i32[1], *(float *)&v309.i32[2], *(float *)&v309.i32[3], v307, *(double *)v14.i64, *(double *)v758.i64, v16, *(float *)v758.i32, *(float *)&v758.i32[1], *(float *)&v758.i32[2], *(float *)&v758.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    unsigned int v310 = bswap32(v825.u32[0]);
                    unsigned int v311 = bswap32(v825.u32[1]);
                    unsigned int v312 = bswap32(v825.u32[2]);
                    unsigned int v313 = bswap32(v825.u32[3]);
                    if (v817)
                    {
                      unsigned int v314 = bswap32(v826);
                      v97->i32[0] = v310;
                      v97->i32[1] = v311;
                      v97->i32[2] = v312;
                      v97->i32[3] = v313;
                      *(_DWORD *)uint64_t v88 = v314;
                    }
                    else
                    {
                      v97->i32[0] = v310;
                      v97->i32[1] = v311;
                      v97->i32[2] = v312;
                      v97->i32[3] = v313;
                    }
                    LODWORD(v5++*(_DWORD *)(result + 8) = v815;
                    unint64_t v91 = v308;
                    uint64_t v305 = -(uint64_t)v787;
                  }
                }
                float32x4_t v315 = &v54[v785];
                if ((unint64_t)v315 >= v91) {
                  uint64_t v316 = v305;
                }
                else {
                  uint64_t v316 = 0;
                }
                v87 += v303 + v316;
                uint64_t v54 = &v315[v316];
                v88 += v304;
                v97 += v785;
                --v306;
              }
              while (v306);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v317 = v802 + 16 * v810;
                uint64_t v318 = v775;
                if (v317 < (unint64_t)v809) {
                  uint64_t v318 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v318);
                uint64_t v319 = -(uint64_t)(v810 * v786);
                if (v317 < (unint64_t)v809) {
                  uint64_t v319 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v317 + 16 * v319);
                v91 += 16 * v319 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v318;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v792;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 20:
            unint64_t v793 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v320 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v776 = -(uint64_t)(v57 * v786);
            uint64_t v321 = 4 * (int)v39;
            uint64_t v322 = -(uint64_t)v787;
            do
            {
              int v323 = v818[0];
              do
              {
                v13.i32[0] = 1.0;
                v14.i32[0] = 1.0;
                if (!v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if (v39 && (v13.i32[0] = bswap32(*(_DWORD *)v88), v13.f32[0] <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    unint64_t v324 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v325 = vrev32q_s8(*v97);
                    int8x16_t v759 = vrev32q_s8(*v54);
                    PDAsoftlightPDA(&v825, *(float32x2_t *)v325.i8, *(float32_t *)&v325.i32[1], *(float *)&v325.i32[2], *(float *)&v325.i32[3], *(double *)v13.i64, *(int32x2_t *)v14.f32, *(double *)v759.i64, v16, v39, (uint64_t)v26, v91, v58, v96, v90, i64, *(float32x2_t *)v759.i8, *(float *)&v759.i32[2], *(float *)&v759.i32[3],
                      v14.f32[0]);
                    uint64_t v39 = v817;
                    unsigned int v326 = bswap32(v825.u32[0]);
                    unsigned int v327 = bswap32(v825.u32[1]);
                    unsigned int v328 = bswap32(v825.u32[2]);
                    unsigned int v329 = bswap32(v825.u32[3]);
                    if (v817)
                    {
                      unsigned int v330 = bswap32(v826);
                      v97->i32[0] = v326;
                      v97->i32[1] = v327;
                      v97->i32[2] = v328;
                      v97->i32[3] = v329;
                      *(_DWORD *)uint64_t v88 = v330;
                    }
                    else
                    {
                      v97->i32[0] = v326;
                      v97->i32[1] = v327;
                      v97->i32[2] = v328;
                      v97->i32[3] = v329;
                    }
                    uint64_t v58 = v815;
                    unint64_t v91 = v324;
                    uint64_t v322 = -(uint64_t)v787;
                  }
                }
                int v331 = &v54[v785];
                if ((unint64_t)v331 >= v91) {
                  uint64_t v332 = v322;
                }
                else {
                  uint64_t v332 = 0;
                }
                v87 += v320 + v332;
                uint64_t v54 = &v331[v332];
                v88 += v321;
                v97 += v785;
                --v323;
              }
              while (v323);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v333 = v802 + 16 * v810;
                uint64_t v334 = v776;
                if (v333 < (unint64_t)v809) {
                  uint64_t v334 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v334);
                uint64_t v335 = -(uint64_t)(v810 * v786);
                if (v333 < (unint64_t)v809) {
                  uint64_t v335 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v333 + 16 * v335);
                v91 += 16 * v335 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v334;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v793;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 21:
            unint64_t v794 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v336 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v777 = -(uint64_t)(v57 * v786);
            uint64_t v337 = 4 * (int)v39;
            uint64_t v338 = -(uint64_t)v787;
            do
            {
              int v339 = v818[0];
              do
              {
                float v340 = 1.0;
                v14.i32[0] = 1.0;
                if (!v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if (v39 && (float v340 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v340 <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    unint64_t v341 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v342 = vrev32q_s8(*v97);
                    int8x16_t v760 = vrev32q_s8(*v54);
                    PDAhardlightPDA(v825.f32, *(float *)v342.i32, *(float *)&v342.i32[1], *(float *)&v342.i32[2], *(float *)&v342.i32[3], v340, *(double *)v14.i64, *(double *)v760.i64, v16, *(float *)v760.i32, *(float *)&v760.i32[1], *(float *)&v760.i32[2], *(float *)&v760.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    unsigned int v343 = bswap32(v825.u32[0]);
                    unsigned int v344 = bswap32(v825.u32[1]);
                    unsigned int v345 = bswap32(v825.u32[2]);
                    unsigned int v346 = bswap32(v825.u32[3]);
                    if (v817)
                    {
                      unsigned int v347 = bswap32(v826);
                      v97->i32[0] = v343;
                      v97->i32[1] = v344;
                      v97->i32[2] = v345;
                      v97->i32[3] = v346;
                      *(_DWORD *)uint64_t v88 = v347;
                    }
                    else
                    {
                      v97->i32[0] = v343;
                      v97->i32[1] = v344;
                      v97->i32[2] = v345;
                      v97->i32[3] = v346;
                    }
                    LODWORD(v5++*(_DWORD *)(result + 8) = v815;
                    unint64_t v91 = v341;
                    uint64_t v338 = -(uint64_t)v787;
                  }
                }
                unsigned int v348 = &v54[v785];
                if ((unint64_t)v348 >= v91) {
                  uint64_t v349 = v338;
                }
                else {
                  uint64_t v349 = 0;
                }
                v87 += v336 + v349;
                uint64_t v54 = &v348[v349];
                v88 += v337;
                v97 += v785;
                --v339;
              }
              while (v339);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v350 = v802 + 16 * v810;
                uint64_t v351 = v777;
                if (v350 < (unint64_t)v809) {
                  uint64_t v351 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v351);
                uint64_t v352 = -(uint64_t)(v810 * v786);
                if (v350 < (unint64_t)v809) {
                  uint64_t v352 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v350 + 16 * v352);
                v91 += 16 * v352 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v351;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v794;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 22:
            do
            {
              int v353 = v818[0];
              do
              {
                v9.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if (v39 && (v9.i32[0] = bswap32(*(_DWORD *)v88), v9.f32[0] <= 0.0))
                  {
                    float32x4_t v9 = *(float32x4_t *)v54;
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v10.u32[0]);
                  }
                  else
                  {
                    int8x16_t v354 = *v54;
                    *(float *)v354.i32 = (float)(v9.f32[0] + v10.f32[0]) - (float)(v9.f32[0] * v10.f32[0]);
                    float32x4_t v355 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    float32x4_t v356 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    float32x4_t v357 = vmulq_n_f32(v355, v10.f32[0]);
                    float32x4_t v358 = vmulq_n_f32(v356, v9.f32[0]);
                    float32x4_t v359 = vsubq_f32(vaddq_f32(v355, v356), v357);
                    float32x4_t v360 = vsubq_f32(v357, v358);
                    float32x4_t v361 = vaddq_f32(vsubq_f32(v359, v358), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v360), (int8x16_t)vnegq_f32(v360), (int8x16_t)v360));
                    float32x4_t v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v354.i8, 0);
                    float32x4_t v9 = vsubq_f32(v10, v361);
                    *(int8x8_t *)v9.f32 = vrev32_s8(*(int8x8_t *)v9.f32);
                    v97->i64[0] = v9.i64[0];
                    v97->i32[2] = bswap32(v9.u32[2]);
                    v97->i32[3] = bswap32(v9.u32[3]);
                    if (v39) {
                      *(_DWORD *)uint64_t v88 = bswap32(v354.u32[0]);
                    }
                  }
                }
                float v362 = &v54[v785];
                if ((unint64_t)v362 >= v91) {
                  uint64_t v363 = -(uint64_t)v787;
                }
                else {
                  uint64_t v363 = 0;
                }
                v87 += (int)v58 + v363;
                uint64_t v54 = &v362[v363];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v353;
              }
              while (v353);
              if (v809)
              {
                unint64_t v364 = i64 + 16 * v810;
                if (v364 >= (unint64_t)v809) {
                  uint64_t v365 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v365 = 0;
                }
                v96 += 4 * v57 + 4 * v365;
                if (v364 >= (unint64_t)v809) {
                  uint64_t v366 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v366 = 0;
                }
                uint64_t i64 = v364 + 16 * v366;
                v91 += 16 * v366 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 23:
            v367.i64[0] = 0xC0000000C0000000;
            v367.i64[1] = 0xC0000000C0000000;
            do
            {
              int v368 = v818[0];
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if (v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
                  {
                    unsigned int v371 = v10.i32[0];
                    float32x4_t v10 = *(float32x4_t *)v54;
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v371);
                  }
                  else
                  {
                    int8x16_t v369 = *v54;
                    *(float *)v369.i32 = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                    float32x4_t v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    float32x4_t v370 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    float32x4_t v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v369.i8, 0), vmlaq_f32(vaddq_f32(v11, v370), v367, vmulq_f32(v370, v11)));
                    *(int8x8_t *)v10.f32 = vrev32_s8(*(int8x8_t *)v10.f32);
                    v97->i64[0] = v10.i64[0];
                    v97->i32[2] = bswap32(v10.u32[2]);
                    v97->i32[3] = bswap32(v10.u32[3]);
                    if (v39) {
                      *(_DWORD *)uint64_t v88 = bswap32(v369.u32[0]);
                    }
                  }
                }
                float v372 = &v54[v785];
                if ((unint64_t)v372 >= v91) {
                  uint64_t v373 = -(uint64_t)v787;
                }
                else {
                  uint64_t v373 = 0;
                }
                v87 += (int)v58 + v373;
                uint64_t v54 = &v372[v373];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v368;
              }
              while (v368);
              if (v809)
              {
                unint64_t v374 = i64 + 16 * v810;
                if (v374 >= (unint64_t)v809) {
                  uint64_t v375 = -(uint64_t)(v57 * v786);
                }
                else {
                  uint64_t v375 = 0;
                }
                v96 += 4 * v57 + 4 * v375;
                if (v374 >= (unint64_t)v809) {
                  uint64_t v376 = -(uint64_t)(v810 * v786);
                }
                else {
                  uint64_t v376 = 0;
                }
                uint64_t i64 = v374 + 16 * v376;
                v91 += 16 * v376 + 16 * v810;
                char v87 = (unsigned int *)v96;
                uint64_t v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 24:
            unint64_t v795 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v377 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v778 = -(uint64_t)(v57 * v786);
            uint64_t v378 = 4 * (int)v39;
            uint64_t v379 = -(uint64_t)v787;
            do
            {
              int v380 = v818[0];
              do
              {
                float v381 = 1.0;
                v14.i32[0] = 1.0;
                if (!v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if (v39 && (float v381 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v381 <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    unint64_t v382 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v383 = vrev32q_s8(*v97);
                    int8x16_t v761 = vrev32q_s8(*v54);
                    PDAhuePDA(v825.f32, *(float *)v383.i32, *(float *)&v383.i32[1], *(float *)&v383.i32[2], *(float *)&v383.i32[3], v381, *(double *)v14.i64, *(double *)v761.i64, v16, *(float *)v761.i32, *(float *)&v761.i32[1], *(float *)&v761.i32[2], *(float *)&v761.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    unsigned int v384 = bswap32(v825.u32[0]);
                    unsigned int v385 = bswap32(v825.u32[1]);
                    unsigned int v386 = bswap32(v825.u32[2]);
                    unsigned int v387 = bswap32(v825.u32[3]);
                    if (v817)
                    {
                      unsigned int v388 = bswap32(v826);
                      v97->i32[0] = v384;
                      v97->i32[1] = v385;
                      v97->i32[2] = v386;
                      v97->i32[3] = v387;
                      *(_DWORD *)uint64_t v88 = v388;
                    }
                    else
                    {
                      v97->i32[0] = v384;
                      v97->i32[1] = v385;
                      v97->i32[2] = v386;
                      v97->i32[3] = v387;
                    }
                    LODWORD(v5++*(_DWORD *)(result + 8) = v815;
                    unint64_t v91 = v382;
                    uint64_t v379 = -(uint64_t)v787;
                  }
                }
                float v389 = &v54[v785];
                if ((unint64_t)v389 >= v91) {
                  uint64_t v390 = v379;
                }
                else {
                  uint64_t v390 = 0;
                }
                v87 += v377 + v390;
                uint64_t v54 = &v389[v390];
                v88 += v378;
                v97 += v785;
                --v380;
              }
              while (v380);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v391 = v802 + 16 * v810;
                uint64_t v392 = v778;
                if (v391 < (unint64_t)v809) {
                  uint64_t v392 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v392);
                uint64_t v393 = -(uint64_t)(v810 * v786);
                if (v391 < (unint64_t)v809) {
                  uint64_t v393 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v391 + 16 * v393);
                v91 += 16 * v393 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v392;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v795;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 25:
            unint64_t v796 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v394 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v779 = -(uint64_t)(v57 * v786);
            uint64_t v395 = 4 * (int)v39;
            uint64_t v396 = -(uint64_t)v787;
            do
            {
              int v397 = v818[0];
              do
              {
                float v398 = 1.0;
                v14.i32[0] = 1.0;
                if (!v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if (v39 && (float v398 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v398 <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    unint64_t v399 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v400 = vrev32q_s8(*v97);
                    int8x16_t v762 = vrev32q_s8(*v54);
                    PDAsaturationPDA(v825.f32, *(float *)v400.i32, *(float *)&v400.i32[1], *(float *)&v400.i32[2], *(float *)&v400.i32[3], v398, *(double *)v14.i64, *(double *)v762.i64, v16, *(float *)v762.i32, *(float *)&v762.i32[1], *(float *)&v762.i32[2], *(float *)&v762.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    unsigned int v401 = bswap32(v825.u32[0]);
                    unsigned int v402 = bswap32(v825.u32[1]);
                    unsigned int v403 = bswap32(v825.u32[2]);
                    unsigned int v404 = bswap32(v825.u32[3]);
                    if (v817)
                    {
                      unsigned int v405 = bswap32(v826);
                      v97->i32[0] = v401;
                      v97->i32[1] = v402;
                      v97->i32[2] = v403;
                      v97->i32[3] = v404;
                      *(_DWORD *)uint64_t v88 = v405;
                    }
                    else
                    {
                      v97->i32[0] = v401;
                      v97->i32[1] = v402;
                      v97->i32[2] = v403;
                      v97->i32[3] = v404;
                    }
                    LODWORD(v5++*(_DWORD *)(result + 8) = v815;
                    unint64_t v91 = v399;
                    uint64_t v396 = -(uint64_t)v787;
                  }
                }
                uint64_t v406 = &v54[v785];
                if ((unint64_t)v406 >= v91) {
                  uint64_t v407 = v396;
                }
                else {
                  uint64_t v407 = 0;
                }
                v87 += v394 + v407;
                uint64_t v54 = &v406[v407];
                v88 += v395;
                v97 += v785;
                --v397;
              }
              while (v397);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v408 = v802 + 16 * v810;
                uint64_t v409 = v779;
                if (v408 < (unint64_t)v809) {
                  uint64_t v409 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v409);
                uint64_t v410 = -(uint64_t)(v810 * v786);
                if (v408 < (unint64_t)v809) {
                  uint64_t v410 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v408 + 16 * v410);
                v91 += 16 * v410 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v409;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v796;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 26:
            unint64_t v797 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v411 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v780 = -(uint64_t)(v57 * v786);
            uint64_t v412 = 4 * (int)v39;
            uint64_t v413 = -(uint64_t)v787;
            do
            {
              int v414 = v818[0];
              do
              {
                v14.i32[0] = 1.0;
                float v415 = 1.0;
                if (!v58 || (float v415 = COERCE_FLOAT(bswap32(*v87)), v415 > 0.0))
                {
                  if (v39 && (v14.i32[0] = bswap32(*(_DWORD *)v88), v14.f32[0] <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(LODWORD(v415));
                  }
                  else
                  {
                    unint64_t v416 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v417 = vrev32q_s8(*v54);
                    int8x16_t v763 = vrev32q_s8(*v97);
                    PDAluminosityPDA(v825.f32, *(float *)v417.i32, *(float *)&v417.i32[1], *(float *)&v417.i32[2], *(float *)&v417.i32[3], v415, *(double *)v14.i64, *(double *)v763.i64, v16, *(float *)v763.i32, *(float *)&v763.i32[1], *(float *)&v763.i32[2], *(float *)&v763.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    unsigned int v418 = bswap32(v825.u32[0]);
                    unsigned int v419 = bswap32(v825.u32[1]);
                    unsigned int v420 = bswap32(v825.u32[2]);
                    unsigned int v421 = bswap32(v825.u32[3]);
                    if (v817)
                    {
                      unsigned int v422 = bswap32(v826);
                      v97->i32[0] = v418;
                      v97->i32[1] = v419;
                      v97->i32[2] = v420;
                      v97->i32[3] = v421;
                      *(_DWORD *)uint64_t v88 = v422;
                    }
                    else
                    {
                      v97->i32[0] = v418;
                      v97->i32[1] = v419;
                      v97->i32[2] = v420;
                      v97->i32[3] = v421;
                    }
                    LODWORD(v5++*(_DWORD *)(result + 8) = v815;
                    unint64_t v91 = v416;
                    uint64_t v413 = -(uint64_t)v787;
                  }
                }
                uint64_t v423 = &v54[v785];
                if ((unint64_t)v423 >= v91) {
                  uint64_t v424 = v413;
                }
                else {
                  uint64_t v424 = 0;
                }
                v87 += v411 + v424;
                uint64_t v54 = &v423[v424];
                v88 += v412;
                v97 += v785;
                --v414;
              }
              while (v414);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v425 = v802 + 16 * v810;
                uint64_t v426 = v780;
                if (v425 < (unint64_t)v809) {
                  uint64_t v426 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v426);
                uint64_t v427 = -(uint64_t)(v810 * v786);
                if (v425 < (unint64_t)v809) {
                  uint64_t v427 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v425 + 16 * v427);
                v91 += 16 * v427 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v426;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v797;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 27:
            unint64_t v798 = v38 - v53;
            uint64_t v802 = i64;
            uint64_t v804 = v96;
            unint64_t v768 = v38;
            uint64_t v428 = (int)v58;
            unint64_t v772 = v18;
            uint64_t v781 = -(uint64_t)(v57 * v786);
            uint64_t v429 = 4 * (int)v39;
            uint64_t v430 = -(uint64_t)v787;
            do
            {
              int v431 = v818[0];
              do
              {
                float v432 = 1.0;
                v14.i32[0] = 1.0;
                if (!v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if (v39 && (float v432 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v432 <= 0.0))
                  {
                    *float v97 = *v54;
                    *(_DWORD *)uint64_t v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    unint64_t v433 = v91;
                    float32x4_t v825 = 0uLL;
                    unsigned int v826 = 0;
                    int8x16_t v434 = vrev32q_s8(*v97);
                    int8x16_t v764 = vrev32q_s8(*v54);
                    PDAluminosityPDA(v825.f32, *(float *)v434.i32, *(float *)&v434.i32[1], *(float *)&v434.i32[2], *(float *)&v434.i32[3], v432, *(double *)v14.i64, *(double *)v764.i64, v16, *(float *)v764.i32, *(float *)&v764.i32[1], *(float *)&v764.i32[2], *(float *)&v764.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    unsigned int v435 = v825.u32[1];
                    unsigned int v436 = v825.u32[2];
                    unsigned int v437 = v825.u32[3];
                    if (v817)
                    {
                      unsigned int v438 = bswap32(v826);
                      v97->i32[0] = bswap32(v825.u32[0]);
                      v97->i32[1] = bswap32(v435);
                      v97->i32[2] = bswap32(v436);
                      v97->i32[3] = bswap32(v437);
                      *(_DWORD *)uint64_t v88 = v438;
                    }
                    else
                    {
                      v97->i32[0] = bswap32(v825.u32[0]);
                      v97->i32[1] = bswap32(v435);
                      v97->i32[2] = bswap32(v436);
                      v97->i32[3] = bswap32(v437);
                    }
                    LODWORD(v5++*(_DWORD *)(result + 8) = v815;
                    unint64_t v91 = v433;
                    uint64_t v430 = -(uint64_t)v787;
                  }
                }
                float v439 = &v54[v785];
                if ((unint64_t)v439 >= v91) {
                  uint64_t v440 = v430;
                }
                else {
                  uint64_t v440 = 0;
                }
                v87 += v428 + v440;
                uint64_t v54 = &v439[v440];
                v88 += v429;
                v97 += v785;
                --v431;
              }
              while (v431);
              if (v809)
              {
                unint64_t v57 = v800;
                unint64_t v441 = v802 + 16 * v810;
                uint64_t v442 = v781;
                if (v441 < (unint64_t)v809) {
                  uint64_t v442 = 0;
                }
                char v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v442);
                uint64_t v443 = -(uint64_t)(v810 * v786);
                if (v441 < (unint64_t)v809) {
                  uint64_t v443 = 0;
                }
                uint64_t v54 = (int8x16_t *)(v441 + 16 * v443);
                v91 += 16 * v443 + 16 * v810;
                uint64_t v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v442;
              }
              else
              {
                v54 += v810;
                unint64_t v57 = v800;
                v87 += v800;
              }
              v97 += v798;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
LABEL_670:
            uint64_t v85 = v91;
            uint64_t v22 = v766;
            LODWORD(v20) = v767;
            float v18 = v772;
            unint64_t v38 = v768;
            goto LABEL_861;
          default:
            goto LABEL_860;
        }
        break;
      }
LABEL_335:
      int v232 = v818[0];
      while (1)
      {
        v11.i32[0] = 1.0;
        v10.i32[0] = 1.0;
        if (!v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
        {
          if (v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
          {
            unsigned int v234 = v10.i32[0];
            float32x4_t v10 = *(float32x4_t *)v54;
          }
          else
          {
            v12.f32[0] = (float)(v10.f32[0] + v11.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
            float32x4_t v233 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
            float32x4_t v11 = vmlaq_f32(v233, vsubq_f32(_Q0, v233), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54)));
            float32x4_t v10 = (float32x4_t)vrev32q_s8((int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), v11));
            if (!v39)
            {
              *float v97 = (int8x16_t)v10;
              goto LABEL_345;
            }
            unsigned int v234 = v12.i32[0];
          }
          *float v97 = (int8x16_t)v10;
          *(_DWORD *)uint64_t v88 = bswap32(v234);
        }
LABEL_345:
        float v235 = &v54[v785];
        if ((unint64_t)v235 >= v91) {
          uint64_t v236 = -(uint64_t)v787;
        }
        else {
          uint64_t v236 = 0;
        }
        v87 += (int)v58 + v236;
        uint64_t v54 = &v235[v236];
        v88 += 4 * (int)v39;
        v97 += v785;
        if (!--v232)
        {
          if (v809)
          {
            unint64_t v237 = i64 + 16 * v810;
            if (v237 >= (unint64_t)v809) {
              uint64_t v238 = -(uint64_t)(v57 * v786);
            }
            else {
              uint64_t v238 = 0;
            }
            v96 += 4 * v57 + 4 * v238;
            if (v237 >= (unint64_t)v809) {
              uint64_t v239 = -(uint64_t)(v810 * v786);
            }
            else {
              uint64_t v239 = 0;
            }
            uint64_t i64 = v237 + 16 * v239;
            v91 += 16 * v239 + 16 * v810;
            char v87 = (unsigned int *)v96;
            uint64_t v54 = (int8x16_t *)i64;
          }
          else
          {
            v54 += v810;
            v87 += v57;
          }
          v97 += v99;
          v88 += 4 * v813;
          if (!--v824) {
            goto LABEL_860;
          }
          goto LABEL_335;
        }
      }
    }
    v809 = 0;
    uint64_t i64 = 0;
    int v785 = v83;
    uint64_t v90 = v52;
    int64_t v53 = v83 * (int)v52;
    unint64_t v813 = v783 - (int)v39 * (int)v52;
    unint64_t v91 = -1;
    int v786 = v57;
    unint64_t v92 = v810;
    int v787 = v810;
    goto LABEL_61;
  }
  uint64_t v27 = *(unsigned int *)(v3 + 128);
  if ((v27 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400) {
      CMYKF_mark_constmask(v3, v20, *(double *)v9.i64, v10, v11, v12, v13, v14, v15, v16, (uint64_t)v26, v4, v5, v6, v27, v8);
    }
    else {
      CMYKF_mark_pixelmask(v3, v20, *(double *)v9.i64, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  int v40 = *(_DWORD *)(v3 + 112);
  int v41 = *(_DWORD *)(v3 + 116);
  unsigned int v42 = (v40 + 15) & 0xFFFFFFF0;
  size_t v43 = v42 * v41;
  if ((int)v43 <= 4096)
  {
    float v45 = &v825;
    goto LABEL_37;
  }
  float v44 = (float32x4_t *)malloc_type_malloc(v43, 0x967E044uLL);
  if (v44)
  {
    float v45 = v44;
    double v26 = *(uint16x4_t **)(v22 + 136);
    LODWORD(v27) = *(_DWORD *)(v22 + 128);
LABEL_37:
    CGSConvertBitsToMask(v26, *(_DWORD *)(v22 + 124), v45, v42, v40, v41, v27);
    long long v74 = *(_OWORD *)(v22 + 112);
    v818[6] = *(_OWORD *)(v22 + 96);
    long long v819 = v74;
    long long v75 = *(_OWORD *)(v22 + 144);
    long long v820 = *(_OWORD *)(v22 + 128);
    long long v821 = v75;
    long long v76 = *(_OWORD *)(v22 + 48);
    v818[2] = *(_OWORD *)(v22 + 32);
    v818[3] = v76;
    long long v77 = *(_OWORD *)(v22 + 80);
    v818[4] = *(_OWORD *)(v22 + 64);
    v818[5] = v77;
    long long v78 = *(_OWORD *)v22;
    float32x4_t v79 = *(float32x4_t *)(v22 + 16);
    v818[0] = *(_OWORD *)v22;
    v818[1] = v79;
    HIDWORD(v819) = (v40 + 15) & 0xFFFFFFF0;
    *((void *)&v820 + 1) = v45;
    if (BYTE1(v818[0]) << 8 == 1024) {
      CMYKF_mark_constmask((uint64_t)v818, v20, *(double *)&v78, v79, v68, v69, v70, v71, v72, v73, v62, v63, v64, v65, v66, v67);
    }
    else {
      CMYKF_mark_pixelmask((uint64_t)v818, v20, *(double *)&v78, v79, v68, v69, v70, v71, v72, v73);
    }
    if (v45 == &v825) {
      return 1;
    }
    uint64_t v80 = v45;
    goto LABEL_1243;
  }
  return 1;
}

void CMYKF_mark_constmask(uint64_t a1, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 136);
  float v18 = *(unsigned int **)(a1 + 96);
  if (v18) {
    float v19 = COERCE_FLOAT(bswap32(*v18));
  }
  else {
    float v19 = 1.0;
  }
  uint64_t v20 = *(unsigned int *)(a1 + 4);
  int v21 = *(_DWORD *)(a1 + 8);
  int8x16_t v22 = *(int8x16_t *)*(void *)(a1 + 88);
  uint64_t v24 = *(int *)(a1 + 12);
  uint64_t v23 = *(int *)(a1 + 16);
  if (v16)
  {
    unint64_t v25 = (unint64_t)*(int *)(a1 + 32) >> 2;
    double v26 = (unsigned int *)(v16 + 4 * (v24 + v25 * v23));
    uint64_t v27 = 1;
    if (!v17) {
      return;
    }
  }
  else
  {
    double v26 = 0;
    unint64_t v25 = 0;
    uint64_t v27 = 0;
    if (!v17) {
      return;
    }
  }
  uint64_t v28 = v25 - (int)v20;
  if (v16) {
    v25 -= (int)v20;
  }
  unint64_t v29 = (unint64_t)*(int *)(a1 + 28) >> 4;
  float32x4_t v30 = (float32x4_t)vrev32q_s8(v22);
  uint64_t v31 = (int8x16_t *)(*(void *)(a1 + 40) + 16 * (v24 + v29 * v23));
  uint64_t v32 = *(int *)(a1 + 124);
  unint64_t v33 = v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v32;
  uint64_t v34 = v32 - (int)v20;
  unint64_t v35 = v29 - (int)v20;
  float32x4_t v346 = v30;
  float v347 = v19;
  unint64_t v36 = v35;
  uint64_t v37 = v34;
  uint64_t v345 = v20;
  unint64_t v38 = v25;
  switch((int)a2)
  {
    case 0:
      if (v16)
      {
        uint64_t v39 = 4 * v27;
        do
        {
          int v40 = v20;
          do
          {
            int v41 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v41 == 255)
              {
                v31->i64[0] = 0;
                v31->i64[1] = 0;
                *double v26 = 0;
              }
              else
              {
                float v42 = (float)(v41 ^ 0xFFu) * 0.0039216;
                unsigned int v43 = bswap32(COERCE_UNSIGNED_INT(v42 * COERCE_FLOAT(bswap32(*v26))));
                *uint64_t v31 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v42));
                *double v26 = v43;
              }
            }
            ++v33;
            ++v31;
            double v26 = (unsigned int *)((char *)v26 + v39);
            --v40;
          }
          while (v40);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v247 = v20;
          do
          {
            int v248 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v248 == 255)
              {
                v31->i64[0] = 0;
                v31->i64[1] = 0;
              }
              else
              {
                *uint64_t v31 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), (float)(v248 ^ 0xFFu) * 0.0039216));
              }
            }
            ++v33;
            ++v31;
            --v247;
          }
          while (v247);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 1:
      unsigned int v44 = v33 & 3;
      if (!v16)
      {
        int v249 = -1 << (8 * v44);
        if ((v33 & 3) != 0) {
          char v250 = v33 & 0xFC;
        }
        else {
          char v250 = v33;
        }
        if ((v33 & 3) != 0)
        {
          unsigned int v251 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          int v249 = -1;
          unsigned int v251 = (unsigned int *)v33;
        }
        if ((v33 & 3) != 0) {
          float32x4_t v252 = &v31[-(v33 & 3)];
        }
        else {
          float32x4_t v252 = v31;
        }
        if ((v33 & 3) != 0) {
          int v253 = v44 + v20;
        }
        else {
          int v253 = v20;
        }
        if ((((_BYTE)v253 + v250) & 3) != 0)
        {
          int v254 = 4 - (((_BYTE)v253 + v250) & 3);
          v44 += v254;
          unsigned int v255 = 0xFFFFFFFF >> (8 * v254);
          if (v253 >= 4) {
            unsigned int v256 = v255;
          }
          else {
            unsigned int v256 = 0;
          }
          if (v253 >= 4) {
            unsigned int v255 = -1;
          }
          v249 &= v255;
        }
        else
        {
          unsigned int v256 = 0;
        }
        uint64_t v321 = v34 - v44;
        int v322 = v253 >> 2;
        unint64_t v323 = v35 - v44;
        while (1)
        {
          unsigned int v324 = *v251 & v249;
          int v325 = v322;
          unsigned int v326 = v256;
          if (!v324) {
            goto LABEL_522;
          }
LABEL_504:
          if (v324 == -1) {
            break;
          }
          while (1)
          {
            if ((_BYTE)v324)
            {
              int8x16_t v327 = v22;
              if (v324 != 255) {
                int8x16_t v327 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)v324 * 0.0039216), (float32x4_t)vrev32q_s8(*v252), 1.0 - (float)((float)v324 * 0.0039216)));
              }
              *float32x4_t v252 = v327;
            }
            if (BYTE1(v324))
            {
              int8x16_t v328 = v22;
              if (BYTE1(v324) != 255) {
                int8x16_t v328 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE1(v324) * 0.0039216), (float32x4_t)vrev32q_s8(v252[1]), 1.0 - (float)((float)BYTE1(v324) * 0.0039216)));
              }
              v252[1] = v328;
            }
            if (BYTE2(v324))
            {
              int8x16_t v329 = v22;
              if (BYTE2(v324) != 255) {
                int8x16_t v329 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE2(v324) * 0.0039216), (float32x4_t)vrev32q_s8(v252[2]), 1.0 - (float)((float)BYTE2(v324) * 0.0039216)));
              }
              v252[2] = v329;
            }
            unsigned int v330 = HIBYTE(v324);
            if (v330 == 255) {
              goto LABEL_519;
            }
            if (v330) {
              v252[3] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)v330 * 0.0039216), (float32x4_t)vrev32q_s8(v252[3]), 1.0 - (float)((float)v330 * 0.0039216)));
            }
LABEL_522:
            while (1)
            {
              int v331 = v325;
              v252 += 4;
              --v325;
              ++v251;
              if (v331 < 2) {
                break;
              }
              unsigned int v324 = *v251;
              if (*v251) {
                goto LABEL_504;
              }
            }
            if (!v326) {
              break;
            }
            unsigned int v326 = 0;
            unsigned int v324 = *v251 & v256;
          }
          unsigned int v251 = (unsigned int *)((char *)v251 + v321);
          v252 += v323;
          if (!--v21) {
            return;
          }
        }
        *float32x4_t v252 = v22;
        v252[1] = v22;
        v252[2] = v22;
LABEL_519:
        v252[3] = v22;
        goto LABEL_522;
      }
      int v45 = -1 << (8 * v44);
      float32x4_t v46 = &v31[-(v33 & 3)];
      if ((v33 & 3) != 0) {
        char v47 = v33 & 0xFC;
      }
      else {
        char v47 = v33;
      }
      if ((v33 & 3) != 0)
      {
        uint64_t v48 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        int v45 = -1;
        uint64_t v48 = (unsigned int *)v33;
      }
      if ((v33 & 3) != 0) {
        uint64_t v49 = &v26[-(v33 & 3)];
      }
      else {
        uint64_t v49 = v26;
      }
      if ((v33 & 3) != 0)
      {
        int v50 = v44 + v20;
      }
      else
      {
        float32x4_t v46 = v31;
        int v50 = v20;
      }
      if ((((_BYTE)v50 + v47) & 3) != 0)
      {
        int v51 = 4 - (((_BYTE)v50 + v47) & 3);
        v44 += v51;
        unsigned int v52 = 0xFFFFFFFF >> (8 * v51);
        if (v50 >= 4) {
          unsigned int v53 = v52;
        }
        else {
          unsigned int v53 = 0;
        }
        if (v50 >= 4) {
          unsigned int v52 = -1;
        }
        v45 &= v52;
      }
      else
      {
        unsigned int v53 = 0;
      }
      uint64_t v274 = v34 - v44;
      int v275 = v50 >> 2;
      unint64_t v276 = v35 - v44;
      unsigned int v277 = bswap32(LODWORD(v19));
      uint64_t v278 = v28 - v44;
      do
      {
        unsigned int v279 = *v48 & v45;
        int v280 = v275;
        unsigned int v281 = v53;
        if (!v279) {
          goto LABEL_473;
        }
LABEL_455:
        if (v279 == -1)
        {
          *float32x4_t v46 = v22;
          *uint64_t v49 = v277;
          v46[1] = v22;
          v49[1] = v277;
          v46[2] = v22;
          v49[2] = v277;
LABEL_470:
          v46[3] = v22;
          v49[3] = v277;
          goto LABEL_473;
        }
        while (1)
        {
          if ((_BYTE)v279)
          {
            int8x16_t v282 = v22;
            unsigned int v283 = v277;
            if (v279 != 255)
            {
              float v284 = (float)v279 * 0.0039216;
              unsigned int v283 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v284) + (float)(COERCE_FLOAT(bswap32(*v49))
                                                                             * (float)(1.0 - v284))));
              int8x16_t v282 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v284), (float32x4_t)vrev32q_s8(*v46), 1.0 - v284));
            }
            *float32x4_t v46 = v282;
            *uint64_t v49 = v283;
          }
          if (BYTE1(v279))
          {
            int8x16_t v285 = v22;
            unsigned int v286 = v277;
            if (BYTE1(v279) != 255)
            {
              float v287 = (float)BYTE1(v279) * 0.0039216;
              unsigned int v286 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v287) + (float)(COERCE_FLOAT(bswap32(v49[1]))
                                                                             * (float)(1.0 - v287))));
              int8x16_t v285 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v287), (float32x4_t)vrev32q_s8(v46[1]), 1.0 - v287));
            }
            v46[1] = v285;
            v49[1] = v286;
          }
          if (BYTE2(v279))
          {
            int8x16_t v288 = v22;
            unsigned int v289 = v277;
            if (BYTE2(v279) != 255)
            {
              float v290 = (float)BYTE2(v279) * 0.0039216;
              unsigned int v289 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v290) + (float)(COERCE_FLOAT(bswap32(v49[2]))
                                                                             * (float)(1.0 - v290))));
              int8x16_t v288 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v290), (float32x4_t)vrev32q_s8(v46[2]), 1.0 - v290));
            }
            v46[2] = v288;
            v49[2] = v289;
          }
          unsigned int v291 = HIBYTE(v279);
          if (v291 == 255) {
            goto LABEL_470;
          }
          if (v291)
          {
            float v292 = (float)v291 * 0.0039216;
            unsigned int v293 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v292) + (float)(COERCE_FLOAT(bswap32(v49[3]))
                                                                           * (float)(1.0 - v292))));
            v46[3] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v292), (float32x4_t)vrev32q_s8(v46[3]), 1.0 - v292));
            v49[3] = v293;
          }
LABEL_473:
          while (1)
          {
            int v294 = v280;
            v46 += 4;
            v49 += 4;
            --v280;
            ++v48;
            if (v294 < 2) {
              break;
            }
            unsigned int v279 = *v48;
            if (*v48) {
              goto LABEL_455;
            }
          }
          if (!v281) {
            break;
          }
          unsigned int v281 = 0;
          unsigned int v279 = *v48 & v53;
        }
        uint64_t v48 = (unsigned int *)((char *)v48 + v274);
        v46 += v276;
        v49 += v278;
        --v21;
      }
      while (v21);
      return;
    case 2:
      *(float *)v22.i32 = 1.0 - v19;
      unsigned int v54 = v33 & 3;
      if (v16)
      {
        int v55 = -1 << (8 * v54);
        int v56 = &v31[-(v33 & 3)];
        if ((v33 & 3) != 0) {
          char v57 = v33 & 0xFC;
        }
        else {
          char v57 = v33;
        }
        if ((v33 & 3) != 0)
        {
          uint64_t v58 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          int v55 = -1;
          uint64_t v58 = (unsigned int *)v33;
        }
        if ((v33 & 3) != 0) {
          uint64_t v59 = &v26[-(v33 & 3)];
        }
        else {
          uint64_t v59 = v26;
        }
        if ((v33 & 3) != 0)
        {
          int v60 = v54 + v20;
        }
        else
        {
          int v56 = v31;
          int v60 = v20;
        }
        if ((((_BYTE)v60 + v57) & 3) != 0)
        {
          int v61 = 4 - (((_BYTE)v60 + v57) & 3);
          v54 += v61;
          unsigned int v62 = 0xFFFFFFFF >> (8 * v61);
          if (v60 >= 4) {
            unsigned int v63 = v62;
          }
          else {
            unsigned int v63 = 0;
          }
          if (v60 >= 4) {
            unsigned int v62 = -1;
          }
          v55 &= v62;
        }
        else
        {
          unsigned int v63 = 0;
        }
        uint64_t v295 = v34 - v54;
        unint64_t v296 = v35 - v54;
        int v297 = v60 >> 2;
        float32x4_t v298 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
        uint64_t v299 = v28 - v54;
        while (1)
        {
          unsigned int v300 = *v58 & v55;
          int v301 = v297;
          unsigned int v302 = v63;
          if (!v300) {
            goto LABEL_494;
          }
LABEL_483:
          if (v300 == -1) {
            break;
          }
          while (1)
          {
            if ((_BYTE)v300)
            {
              float v308 = (float)v300 * 0.0039216;
              float v309 = 1.0 - (float)(v19 * v308);
              unsigned int v310 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v308) + (float)(COERCE_FLOAT(bswap32(*v59)) * v309)));
              int8x16_t *v56 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v308), (float32x4_t)vrev32q_s8(*v56), v309));
              *uint64_t v59 = v310;
            }
            if ((v300 & 0xFF00) != 0)
            {
              float v311 = (float)BYTE1(v300) * 0.0039216;
              float v312 = 1.0 - (float)(v19 * v311);
              unsigned int v313 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v311) + (float)(COERCE_FLOAT(bswap32(v59[1])) * v312)));
              v56[1] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v311), (float32x4_t)vrev32q_s8(v56[1]), v312));
              v59[1] = v313;
            }
            if ((v300 & 0xFF0000) != 0)
            {
              float v314 = (float)BYTE2(v300) * 0.0039216;
              float v315 = 1.0 - (float)(v19 * v314);
              unsigned int v316 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v314) + (float)(COERCE_FLOAT(bswap32(v59[2])) * v315)));
              _OWORD v56[2] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v314), (float32x4_t)vrev32q_s8(v56[2]), v315));
              v59[2] = v316;
            }
            unsigned int v317 = HIBYTE(v300);
            if (v317)
            {
              float v318 = (float)v317 * 0.0039216;
              float v319 = v19 * v318;
              int8x16_t v306 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v318), (float32x4_t)vrev32q_s8(v56[3]), 1.0 - (float)(v19 * v318));
              float v307 = v319 + (float)(COERCE_FLOAT(bswap32(v59[3])) * (float)(1.0 - v319));
              goto LABEL_493;
            }
LABEL_494:
            while (1)
            {
              int v320 = v301;
              v56 += 4;
              v59 += 4;
              --v301;
              ++v58;
              if (v320 < 2) {
                break;
              }
              unsigned int v300 = *v58;
              if (*v58) {
                goto LABEL_483;
              }
            }
            if (!v302) {
              break;
            }
            unsigned int v302 = 0;
            unsigned int v300 = *v58 & v63;
          }
          uint64_t v58 = (unsigned int *)((char *)v58 + v295);
          v56 += v296;
          v59 += v299;
          if (!--v21) {
            return;
          }
        }
        unsigned int v303 = bswap32(COERCE_UNSIGNED_INT(v19 + (float)(COERCE_FLOAT(bswap32(*v59)) * *(float *)v22.i32)));
        int8x16_t *v56 = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v298, (float32x4_t)vrev32q_s8(*v56)));
        *uint64_t v59 = v303;
        unsigned int v304 = bswap32(COERCE_UNSIGNED_INT(v19 + (float)(COERCE_FLOAT(bswap32(v59[1])) * *(float *)v22.i32)));
        v56[1] = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v298, (float32x4_t)vrev32q_s8(v56[1])));
        v59[1] = v304;
        unsigned int v305 = bswap32(COERCE_UNSIGNED_INT(v19 + (float)(COERCE_FLOAT(bswap32(v59[2])) * *(float *)v22.i32)));
        _OWORD v56[2] = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v298, (float32x4_t)vrev32q_s8(v56[2])));
        v59[2] = v305;
        int8x16_t v306 = (int8x16_t)vmlaq_f32(v30, v298, (float32x4_t)vrev32q_s8(v56[3]));
        float v307 = v19 + (float)(COERCE_FLOAT(bswap32(v59[3])) * *(float *)v22.i32);
LABEL_493:
        v56[3].i32[0] = bswap32(v306.u32[0]);
        *(int8x8_t *)((char *)v56[3].i64 + 4) = vrev32_s8(vext_s8(*(int8x8_t *)v306.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v306, v306, 8uLL), 4uLL));
        v56[3].i32[3] = bswap32(v306.u32[3]);
        v59[3] = bswap32(LODWORD(v307));
        goto LABEL_494;
      }
      int v257 = -1 << (8 * v54);
      if ((v33 & 3) != 0) {
        char v258 = v33 & 0xFC;
      }
      else {
        char v258 = v33;
      }
      if ((v33 & 3) != 0)
      {
        float32x4_t v259 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        int v257 = -1;
        float32x4_t v259 = (unsigned int *)v33;
      }
      if ((v33 & 3) != 0) {
        float32x4_t v260 = &v31[-(v33 & 3)];
      }
      else {
        float32x4_t v260 = v31;
      }
      if ((v33 & 3) != 0) {
        int v261 = v54 + v20;
      }
      else {
        int v261 = v20;
      }
      if ((((_BYTE)v261 + v258) & 3) != 0)
      {
        int v262 = 4 - (((_BYTE)v261 + v258) & 3);
        v54 += v262;
        unsigned int v263 = 0xFFFFFFFF >> (8 * v262);
        if (v261 >= 4) {
          unsigned int v264 = v263;
        }
        else {
          unsigned int v264 = 0;
        }
        if (v261 >= 4) {
          unsigned int v263 = -1;
        }
        v257 &= v263;
      }
      else
      {
        unsigned int v264 = 0;
      }
      uint64_t v332 = v34 - v54;
      int v333 = v261 >> 2;
      float32x4_t v334 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
      unint64_t v335 = v35 - v54;
      while (1)
      {
        unsigned int v336 = *v259 & v257;
        int v337 = v333;
        unsigned int v338 = v264;
        if (!v336) {
          goto LABEL_543;
        }
LABEL_532:
        if (v336 == -1) {
          break;
        }
        while (1)
        {
          if ((_BYTE)v336) {
            *float32x4_t v260 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)v336 * 0.0039216), (float32x4_t)vrev32q_s8(*v260), 1.0 - (float)(v19 * (float)((float)v336 * 0.0039216))));
          }
          if ((v336 & 0xFF00) != 0) {
            v260[1] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE1(v336) * 0.0039216), (float32x4_t)vrev32q_s8(v260[1]), 1.0 - (float)(v19 * (float)((float)BYTE1(v336) * 0.0039216))));
          }
          if ((v336 & 0xFF0000) != 0) {
            v260[2] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE2(v336) * 0.0039216), (float32x4_t)vrev32q_s8(v260[2]), 1.0 - (float)(v19 * (float)((float)BYTE2(v336) * 0.0039216))));
          }
          unsigned int v342 = HIBYTE(v336);
          if (v342)
          {
            int8x16_t v341 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)v342 * 0.0039216), (float32x4_t)vrev32q_s8(v260[3]), 1.0 - (float)(v19 * (float)((float)v342 * 0.0039216)));
            goto LABEL_542;
          }
LABEL_543:
          while (1)
          {
            int v343 = v337;
            v260 += 4;
            --v337;
            ++v259;
            if (v343 < 2) {
              break;
            }
            unsigned int v336 = *v259;
            if (*v259) {
              goto LABEL_532;
            }
          }
          if (!v338) {
            break;
          }
          unsigned int v338 = 0;
          unsigned int v336 = *v259 & v264;
        }
        float32x4_t v259 = (unsigned int *)((char *)v259 + v332);
        v260 += v335;
        if (!--v21) {
          return;
        }
      }
      int8x16_t v339 = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v334, (float32x4_t)vrev32q_s8(v260[1])));
      *float32x4_t v260 = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v334, (float32x4_t)vrev32q_s8(*v260)));
      v260[1] = v339;
      int8x16_t v340 = v260[3];
      v260[2] = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v334, (float32x4_t)vrev32q_s8(v260[2])));
      int8x16_t v341 = (int8x16_t)vmlaq_f32(v30, v334, (float32x4_t)vrev32q_s8(v340));
LABEL_542:
      v260[3].i32[0] = bswap32(v341.u32[0]);
      *(int8x8_t *)((char *)v260[3].i64 + 4) = vrev32_s8(vext_s8(*(int8x8_t *)v341.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v341, v341, 8uLL), 4uLL));
      v260[3].i32[3] = bswap32(v341.u32[3]);
      goto LABEL_543;
    case 3:
      uint64_t v64 = 4 * v27;
      do
      {
        int v65 = v20;
        do
        {
          unsigned int v66 = *(unsigned __int8 *)v33;
          if (*(unsigned char *)v33)
          {
            if (v66 == 255)
            {
              float v67 = COERCE_FLOAT(bswap32(*v26));
              unsigned int v68 = bswap32(COERCE_UNSIGNED_INT(v19 * v67));
              int8x16_t v69 = (int8x16_t)vmulq_n_f32(v30, v67);
            }
            else
            {
              float v70 = (float)v66 * 0.0039216;
              float v71 = COERCE_FLOAT(bswap32(*v26));
              float v72 = v70 * v71;
              unsigned int v68 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * (float)(v70 * v71)) + (float)(v71 * (float)(1.0 - v70))));
              int8x16_t v69 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v72), (float32x4_t)vrev32q_s8(*v31), 1.0 - v70);
            }
            *uint64_t v31 = vrev32q_s8(v69);
            *double v26 = v68;
          }
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v64);
          --v65;
        }
        while (v65);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 4:
      uint64_t v73 = 4 * v27;
      do
      {
        int v74 = v20;
        do
        {
          unsigned int v75 = *(unsigned __int8 *)v33;
          if (*(unsigned char *)v33)
          {
            if (v75 == 255)
            {
              float v76 = 1.0 - COERCE_FLOAT(bswap32(*v26));
              unsigned int v77 = bswap32(COERCE_UNSIGNED_INT(v19 * v76));
              int8x16_t v78 = (int8x16_t)vmulq_n_f32(v30, v76);
            }
            else
            {
              float v79 = (float)v75 * 0.0039216;
              float v80 = COERCE_FLOAT(bswap32(*v26));
              float v81 = v79 * (float)(1.0 - v80);
              unsigned int v77 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v81) + (float)(v80 * (float)(1.0 - v79))));
              int8x16_t v78 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v81), (float32x4_t)vrev32q_s8(*v31), 1.0 - v79);
            }
            *uint64_t v31 = vrev32q_s8(v78);
            *double v26 = v77;
          }
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v73);
          --v74;
        }
        while (v74);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 5:
      uint64_t v82 = 4 * v27;
      do
      {
        int v83 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v84 = COERCE_FLOAT(bswap32(*v26));
            float v85 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            float v86 = 1.0 - (float)(v19 * v85);
            *uint64_t v31 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v86), vmulq_n_f32(v30, v85), v84));
            *double v26 = bswap32(COERCE_UNSIGNED_INT((float)(v86 * v84) + (float)((float)(v19 * v85) * v84)));
          }
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v82);
          --v83;
        }
        while (v83);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 6:
      uint64_t v87 = 4 * v27;
      while (1)
      {
        int v88 = v20;
        do
        {
          unsigned int v89 = *(unsigned __int8 *)v33;
          if (!*(unsigned char *)v33) {
            goto LABEL_96;
          }
          float v90 = COERCE_FLOAT(bswap32(*v26));
          float v91 = 1.0 - v90;
          if ((float)(1.0 - v90) >= 1.0)
          {
            float v95 = (float)v89 * 0.0039216;
            unsigned int v93 = bswap32(COERCE_UNSIGNED_INT(v19 * v95));
            int8x16_t v94 = (int8x16_t)vmulq_n_f32(v30, v95);
          }
          else
          {
            if (v91 <= 0.0) {
              goto LABEL_96;
            }
            float v92 = (float)v89 * 0.0039216;
            unsigned int v93 = bswap32(COERCE_UNSIGNED_INT(v90 + (float)((float)(v19 * v92) * v91)));
            int8x16_t v94 = (int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v31), vmulq_n_f32(v30, v92), v91);
          }
          *uint64_t v31 = vrev32q_s8(v94);
          *double v26 = v93;
LABEL_96:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v87);
          --v88;
        }
        while (v88);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21) {
          return;
        }
      }
    case 7:
      if (v16)
      {
        uint64_t v96 = 4 * v27;
        do
        {
          int v97 = v20;
          do
          {
            unsigned int v98 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v98 == 255)
              {
                int8x16_t v99 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v19);
                float v100 = v19 * COERCE_FLOAT(bswap32(*v26));
              }
              else
              {
                float v101 = (float)(v19 * (float)((float)v98 * 0.0039216)) + (float)(1.0 - (float)((float)v98 * 0.0039216));
                int8x16_t v99 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v101);
                float v100 = v101 * COERCE_FLOAT(bswap32(*v26));
              }
              *uint64_t v31 = vrev32q_s8(v99);
              *double v26 = bswap32(LODWORD(v100));
            }
            ++v33;
            ++v31;
            double v26 = (unsigned int *)((char *)v26 + v96);
            --v97;
          }
          while (v97);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v265 = v20;
          do
          {
            unsigned int v266 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v266 == 255) {
                int8x16_t v267 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v19);
              }
              else {
                int8x16_t v267 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), (float)(v19 * (float)((float)v266 * 0.0039216))+ (float)(1.0 - (float)((float)v266 * 0.0039216)));
              }
              *uint64_t v31 = vrev32q_s8(v267);
            }
            ++v33;
            ++v31;
            --v265;
          }
          while (v265);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 8:
      float v102 = 1.0 - v19;
      if (v16)
      {
        uint64_t v103 = 4 * v27;
        do
        {
          int v104 = v20;
          do
          {
            unsigned int v105 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v105 == 255)
              {
                int8x16_t v106 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v102);
                float v107 = v102 * COERCE_FLOAT(bswap32(*v26));
              }
              else
              {
                float v108 = (float)(v19 * (float)((float)v105 * -0.0039216)) + 1.0;
                int8x16_t v106 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v108);
                float v107 = v108 * COERCE_FLOAT(bswap32(*v26));
              }
              *uint64_t v31 = vrev32q_s8(v106);
              *double v26 = bswap32(LODWORD(v107));
            }
            ++v33;
            ++v31;
            double v26 = (unsigned int *)((char *)v26 + v103);
            --v104;
          }
          while (v104);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v268 = v20;
          do
          {
            unsigned int v269 = *(unsigned __int8 *)v33;
            if (*(unsigned char *)v33)
            {
              if (v269 == 255) {
                int8x16_t v270 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v102);
              }
              else {
                int8x16_t v270 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), (float)(v19 * (float)((float)v269 * -0.0039216)) + 1.0);
              }
              *uint64_t v31 = vrev32q_s8(v270);
            }
            ++v33;
            ++v31;
            --v268;
          }
          while (v268);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 9:
      uint64_t v109 = 4 * v27;
      do
      {
        int v110 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v111 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            float v112 = COERCE_FLOAT(bswap32(*v26));
            float v113 = (float)(1.0 - v111) + (float)(v19 * v111);
            *uint64_t v31 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v113), vmulq_n_f32(v30, v111), 1.0 - v112));
            *double v26 = bswap32(COERCE_UNSIGNED_INT((float)(v113 * v112) + (float)((float)(v19 * v111) * (float)(1.0 - v112))));
          }
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v109);
          --v110;
        }
        while (v110);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 10:
      uint64_t v114 = 4 * v27;
      do
      {
        int v115 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v116 = COERCE_FLOAT(bswap32(*v26));
            float v117 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            float v118 = 1.0 - (float)(v19 * v117);
            *uint64_t v31 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v118), vmulq_n_f32(v30, v117), 1.0 - v116));
            *double v26 = bswap32(COERCE_UNSIGNED_INT((float)(v118 * v116) + (float)((float)(v19 * v117) * (float)(1.0 - v116))));
          }
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v114);
          --v115;
        }
        while (v115);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 11:
      if (v16)
      {
        uint64_t v119 = 4 * v27;
        do
        {
          int v120 = v20;
          do
          {
            if (*(unsigned char *)v33)
            {
              float v121 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              a7.i32[0] = bswap32(*v26);
              a8.f32[0] = (float)(v19 * v121) + a7.f32[0];
              if (a8.f32[0] > 1.0) {
                a8.f32[0] = 1.0;
              }
              float32x4_t v122 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
              unsigned int v123 = bswap32(a8.u32[0]);
              a8 = (float32x4_t)vrev32q_s8(*v31);
              a6.f32[0] = v19 * v121;
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
              a7 = vsubq_f32(v122, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), a8));
              *uint64_t v31 = vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32(a6, vmulq_n_f32(v30, v121)), a7));
              *double v26 = v123;
            }
            ++v33;
            ++v31;
            double v26 = (unsigned int *)((char *)v26 + v119);
            --v120;
          }
          while (v120);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v271 = v20;
          do
          {
            if (*(unsigned char *)v33)
            {
              float v272 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              a5.f32[0] = v19 * v272;
              a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              *uint64_t v31 = vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32(a5, vmulq_n_f32(v30, v272)), (float32x4_t)vrev32q_s8(*v31)));
            }
            ++v33;
            ++v31;
            --v271;
          }
          while (v271);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 12:
      if (v16)
      {
        uint64_t v124 = 4 * v27;
        do
        {
          int v125 = v20;
          do
          {
            if (*(unsigned char *)v33)
            {
              float v126 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              float v127 = (float)(v19 * v126) + COERCE_FLOAT(bswap32(*v26));
              if (v127 > 1.0) {
                float v127 = 1.0;
              }
              *uint64_t v31 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32(v30, v126), (float32x4_t)vrev32q_s8(*v31)));
              *double v26 = bswap32(LODWORD(v127));
            }
            ++v33;
            ++v31;
            double v26 = (unsigned int *)((char *)v26 + v124);
            --v125;
          }
          while (v125);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v273 = v20;
          do
          {
            if (*(unsigned char *)v33) {
              *uint64_t v31 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32(v30, (float)*(unsigned __int8 *)v33 * 0.0039216), (float32x4_t)vrev32q_s8(*v31)));
            }
            ++v33;
            ++v31;
            --v273;
          }
          while (v273);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 13:
      uint64_t v128 = 4 * v27;
      a4.i32[0] = 1.0;
      while (1)
      {
        int v129 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v130 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v130;
            if ((float)(v19 * v130) > 0.0)
            {
              float32x4_t v131 = vmulq_n_f32(v30, v130);
              if (v16)
              {
                a7.i32[0] = bswap32(*v26);
                if (a7.f32[0] <= 0.0) {
                  goto LABEL_164;
                }
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              float32x4_t v132 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              float32x4_t v133 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v131);
              float32x4_t v134 = vmulq_f32(v132, v133);
              float32x4_t v135 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v134, v132, 1.0 - a5.f32[0]), (int8x16_t)v134);
              float32x4_t v136 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a7, a4)), 0), (int8x16_t)vmlaq_n_f32(v135, v133, 1.0 - a7.f32[0]), (int8x16_t)v135);
              a5.f32[0] = (float)(a7.f32[0] + a5.f32[0]) - (float)(a7.f32[0] * a5.f32[0]);
              a7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              float32x4_t v131 = vsubq_f32(a7, v136);
              if (v16)
              {
LABEL_164:
                unsigned int v137 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v131);
                *uint64_t v31 = (int8x16_t)a5;
                *double v26 = v137;
                goto LABEL_166;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v131);
              *uint64_t v31 = (int8x16_t)a5;
            }
          }
LABEL_166:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v128);
          --v129;
        }
        while (v129);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21) {
          return;
        }
      }
    case 14:
      uint64_t v138 = 4 * v27;
      __asm { FMOV            V1.4S, #1.0 }
      while (1)
      {
        int v144 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v145 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v145;
            if ((float)(v19 * v145) > 0.0)
            {
              float32x4_t v146 = vmulq_n_f32(v30, v145);
              if (v16)
              {
                a7.i32[0] = bswap32(*v26);
                if (a7.f32[0] <= 0.0) {
                  goto LABEL_178;
                }
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              float32x4_t v147 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              float32x4_t v148 = vmlaq_f32(v147, vsubq_f32(_Q1, v147), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v146));
              a5.f32[0] = (float)(a5.f32[0] + a7.f32[0]) - (float)(a7.f32[0] * a5.f32[0]);
              float32x4_t v146 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v148);
              if (v16)
              {
LABEL_178:
                unsigned int v149 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v146);
                *uint64_t v31 = (int8x16_t)a5;
                *double v26 = v149;
                goto LABEL_180;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v146);
              *uint64_t v31 = (int8x16_t)a5;
            }
          }
LABEL_180:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v138);
          --v144;
        }
        while (v144);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21) {
          return;
        }
      }
    case 15:
      uint64_t v150 = 4 * v27;
      while (1)
      {
        int v151 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v152 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v152;
            if ((float)(v19 * v152) > 0.0)
            {
              int8x16_t v153 = (int8x16_t)vmulq_n_f32(v30, v152);
              if (v16)
              {
                float v154 = COERCE_FLOAT(bswap32(*v26));
                if (v154 <= 0.0) {
                  goto LABEL_193;
                }
              }
              else
              {
                float v154 = 1.0;
              }
              int8x16_t v155 = vrev32q_s8(*v31);
              PDAoverlayPDA((float *)v348.i32, *(float *)v155.i32, *(float *)&v155.i32[1], *(float *)&v155.i32[2], *(float *)&v155.i32[3], v154, *(double *)v153.i64, a9, a10, *(float *)v153.i32, *(float *)&v153.i32[1], *(float *)&v153.i32[2], *(float *)&v153.i32[3], *(float *)&a9);
              int8x16_t v153 = v348;
              if (v16)
              {
                *(float *)&a9 = v349;
                float32x4_t v30 = v346;
                float v19 = v347;
LABEL_193:
                *uint64_t v31 = vrev32q_s8(v153);
                *double v26 = bswap32(LODWORD(a9));
                goto LABEL_195;
              }
              *uint64_t v31 = vrev32q_s8(v348);
              float32x4_t v30 = v346;
              float v19 = v347;
            }
          }
LABEL_195:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v150);
          --v151;
        }
        while (v151);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v345;
        if (!v21) {
          return;
        }
      }
    case 16:
      uint64_t v156 = 4 * v27;
      a4.i32[0] = 1.0;
      while (1)
      {
        int v157 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v158 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v158;
            if ((float)(v19 * v158) > 0.0)
            {
              float32x4_t v159 = vmulq_n_f32(v30, v158);
              if (v16)
              {
                a6.i32[0] = bswap32(*v26);
                if (a6.f32[0] <= 0.0) {
                  goto LABEL_207;
                }
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              float32x4_t v160 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              float32x4_t v161 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v159);
              float32x4_t v162 = vmulq_n_f32(v160, a5.f32[0]);
              float32x4_t v163 = vmulq_n_f32(v161, a6.f32[0]);
              float32x4_t v164 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v162, v163), (int8x16_t)v163, (int8x16_t)v162);
              float32x4_t v165 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v164, v160, 1.0 - a5.f32[0]), (int8x16_t)v164);
              float32x4_t v166 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32(v165, v161, 1.0 - a6.f32[0]), (int8x16_t)v165);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              float32x4_t v159 = vsubq_f32(a6, v166);
              if (v16)
              {
LABEL_207:
                unsigned int v167 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v159);
                *uint64_t v31 = (int8x16_t)a5;
                *double v26 = v167;
                goto LABEL_209;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v159);
              *uint64_t v31 = (int8x16_t)a5;
            }
          }
LABEL_209:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v156);
          --v157;
        }
        while (v157);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21) {
          return;
        }
      }
    case 17:
      uint64_t v168 = 4 * v27;
      a4.i32[0] = 1.0;
      while (1)
      {
        int v169 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v170 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v170;
            if ((float)(v19 * v170) > 0.0)
            {
              float32x4_t v171 = vmulq_n_f32(v30, v170);
              if (v16)
              {
                a6.i32[0] = bswap32(*v26);
                if (a6.f32[0] <= 0.0) {
                  goto LABEL_221;
                }
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              float32x4_t v172 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              float32x4_t v173 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v171);
              float32x4_t v174 = vmulq_n_f32(v172, a5.f32[0]);
              float32x4_t v175 = vmulq_n_f32(v173, a6.f32[0]);
              float32x4_t v176 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v175, v174), (int8x16_t)v175, (int8x16_t)v174);
              float32x4_t v177 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v176, v172, 1.0 - a5.f32[0]), (int8x16_t)v176);
              float32x4_t v178 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32(v177, v173, 1.0 - a6.f32[0]), (int8x16_t)v177);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              float32x4_t v171 = vsubq_f32(a6, v178);
              if (v16)
              {
LABEL_221:
                unsigned int v179 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v171);
                *uint64_t v31 = (int8x16_t)a5;
                *double v26 = v179;
                goto LABEL_223;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v171);
              *uint64_t v31 = (int8x16_t)a5;
            }
          }
LABEL_223:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v168);
          --v169;
        }
        while (v169);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21) {
          return;
        }
      }
    case 18:
      uint64_t v180 = 4 * v27;
      while (1)
      {
        int v181 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v182 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v182;
            if ((float)(v19 * v182) > 0.0)
            {
              int8x16_t v183 = (int8x16_t)vmulq_n_f32(v30, v182);
              if (v16)
              {
                float v184 = COERCE_FLOAT(bswap32(*v26));
                if (v184 <= 0.0) {
                  goto LABEL_236;
                }
              }
              else
              {
                float v184 = 1.0;
              }
              int8x16_t v185 = vrev32q_s8(*v31);
              PDAcolordodgePDA((float *)v348.i32, *(float *)v185.i32, *(float *)&v185.i32[1], *(float *)&v185.i32[2], *(float *)&v185.i32[3], v184, *(double *)v183.i64, a9, a10, *(float *)v183.i32, *(float *)&v183.i32[1], *(float *)&v183.i32[2], *(float *)&v183.i32[3], *(float *)&a9);
              int8x16_t v183 = v348;
              if (v16)
              {
                *(float *)&a9 = v349;
                float32x4_t v30 = v346;
                float v19 = v347;
LABEL_236:
                *uint64_t v31 = vrev32q_s8(v183);
                *double v26 = bswap32(LODWORD(a9));
                goto LABEL_238;
              }
              *uint64_t v31 = vrev32q_s8(v348);
              float32x4_t v30 = v346;
              float v19 = v347;
            }
          }
LABEL_238:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v180);
          --v181;
        }
        while (v181);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v345;
        if (!v21) {
          return;
        }
      }
    case 19:
      uint64_t v186 = 4 * v27;
      while (1)
      {
        int v187 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v188 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v188;
            if ((float)(v19 * v188) > 0.0)
            {
              int8x16_t v189 = (int8x16_t)vmulq_n_f32(v30, v188);
              if (v16)
              {
                float v190 = COERCE_FLOAT(bswap32(*v26));
                if (v190 <= 0.0) {
                  goto LABEL_251;
                }
              }
              else
              {
                float v190 = 1.0;
              }
              int8x16_t v191 = vrev32q_s8(*v31);
              PDAcolorburnPDA((float *)v348.i32, *(float *)v191.i32, *(float *)&v191.i32[1], *(float *)&v191.i32[2], *(float *)&v191.i32[3], v190, *(double *)v189.i64, a9, a10, *(float *)v189.i32, *(float *)&v189.i32[1], *(float *)&v189.i32[2], *(float *)&v189.i32[3], *(float *)&a9);
              int8x16_t v189 = v348;
              if (v16)
              {
                *(float *)&a9 = v349;
                float32x4_t v30 = v346;
                float v19 = v347;
LABEL_251:
                *uint64_t v31 = vrev32q_s8(v189);
                *double v26 = bswap32(LODWORD(a9));
                goto LABEL_253;
              }
              *uint64_t v31 = vrev32q_s8(v348);
              float32x4_t v30 = v346;
              float v19 = v347;
            }
          }
LABEL_253:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v186);
          --v187;
        }
        while (v187);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v345;
        if (!v21) {
          return;
        }
      }
    case 20:
      uint64_t v192 = 4 * v27;
      while (1)
      {
        int v193 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v194 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v194;
            if ((float)(v19 * v194) > 0.0)
            {
              int8x16_t v195 = (int8x16_t)vmulq_n_f32(v30, v194);
              if (v16)
              {
                a7.i32[0] = bswap32(*v26);
                if (a7.f32[0] <= 0.0) {
                  goto LABEL_266;
                }
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              int8x16_t v196 = vrev32q_s8(*v31);
              PDAsoftlightPDA((float32x4_t *)&v348, *(float32x2_t *)v196.i8, *(float32_t *)&v196.i32[1], *(float *)&v196.i32[2], *(float *)&v196.i32[3], *(double *)a7.i64, *(int32x2_t *)v195.i8, a9, a10, a2, v28, v34, v20, a14, a15, a16, *(float32x2_t *)v195.i8, *(float *)&v195.i32[2], *(float *)&v195.i32[3],
                *(float *)&a9);
              int8x16_t v195 = v348;
              if (v16)
              {
                *(float *)&a9 = v349;
                float32x4_t v30 = v346;
                float v19 = v347;
LABEL_266:
                *uint64_t v31 = vrev32q_s8(v195);
                *double v26 = bswap32(LODWORD(a9));
                goto LABEL_268;
              }
              *uint64_t v31 = vrev32q_s8(v348);
              float32x4_t v30 = v346;
              float v19 = v347;
            }
          }
LABEL_268:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v192);
          --v193;
        }
        while (v193);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        uint64_t v20 = v345;
        if (!v21) {
          return;
        }
      }
    case 21:
      uint64_t v197 = 4 * v27;
      while (1)
      {
        int v198 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v199 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v199;
            if ((float)(v19 * v199) > 0.0)
            {
              int8x16_t v200 = (int8x16_t)vmulq_n_f32(v30, v199);
              if (v16)
              {
                float v201 = COERCE_FLOAT(bswap32(*v26));
                if (v201 <= 0.0) {
                  goto LABEL_281;
                }
              }
              else
              {
                float v201 = 1.0;
              }
              int8x16_t v202 = vrev32q_s8(*v31);
              PDAhardlightPDA((float *)v348.i32, *(float *)v202.i32, *(float *)&v202.i32[1], *(float *)&v202.i32[2], *(float *)&v202.i32[3], v201, *(double *)v200.i64, a9, a10, *(float *)v200.i32, *(float *)&v200.i32[1], *(float *)&v200.i32[2], *(float *)&v200.i32[3], *(float *)&a9);
              int8x16_t v200 = v348;
              if (v16)
              {
                *(float *)&a9 = v349;
                float32x4_t v30 = v346;
                float v19 = v347;
LABEL_281:
                *uint64_t v31 = vrev32q_s8(v200);
                *double v26 = bswap32(LODWORD(a9));
                goto LABEL_283;
              }
              *uint64_t v31 = vrev32q_s8(v348);
              float32x4_t v30 = v346;
              float v19 = v347;
            }
          }
LABEL_283:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v197);
          --v198;
        }
        while (v198);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v345;
        if (!v21) {
          return;
        }
      }
    case 22:
      uint64_t v203 = 4 * v27;
      while (1)
      {
        int v204 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v205 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a4.f32[0] = v19 * v205;
            if ((float)(v19 * v205) > 0.0)
            {
              float32x4_t v206 = vmulq_n_f32(v30, v205);
              if (v16)
              {
                a6.i32[0] = bswap32(*v26);
                if (a6.f32[0] <= 0.0) {
                  goto LABEL_296;
                }
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              int8x16_t v207 = *v31;
              *(float *)v207.i32 = (float)(a6.f32[0] + a4.f32[0]) - (float)(a6.f32[0] * a4.f32[0]);
              float32x4_t v208 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              float32x4_t v209 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), v206);
              float32x4_t v210 = vaddq_f32(v208, v209);
              float32x4_t v211 = vmulq_n_f32(v208, a4.f32[0]);
              float32x4_t v212 = vmulq_n_f32(v209, a6.f32[0]);
              float32x4_t v213 = vsubq_f32(v210, v211);
              float32x4_t v214 = vsubq_f32(v211, v212);
              float32x4_t v215 = vsubq_f32(v213, v212);
              a6 = (float32x4_t)vcltzq_f32(v214);
              float32x4_t v206 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v207.i8, 0), vaddq_f32(v215, (float32x4_t)vbslq_s8((int8x16_t)a6, (int8x16_t)vnegq_f32(v214), (int8x16_t)v214)));
              if (v16)
              {
                a4.i32[0] = v207.i32[0];
LABEL_296:
                unsigned int v216 = bswap32(a4.u32[0]);
                a4 = (float32x4_t)vrev32q_s8((int8x16_t)v206);
                *uint64_t v31 = (int8x16_t)a4;
                *double v26 = v216;
                goto LABEL_298;
              }
              a4 = (float32x4_t)vrev32q_s8((int8x16_t)v206);
              *uint64_t v31 = (int8x16_t)a4;
            }
          }
LABEL_298:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v203);
          --v204;
        }
        while (v204);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21) {
          return;
        }
      }
    case 23:
      uint64_t v217 = 4 * v27;
      v218.i64[0] = 0xC0000000C0000000;
      v218.i64[1] = 0xC0000000C0000000;
      while (1)
      {
        int v219 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v220 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a6.f32[0] = v19 * v220;
            if ((float)(v19 * v220) > 0.0)
            {
              float32x4_t v221 = vmulq_n_f32(v30, v220);
              if (v16)
              {
                a8.i32[0] = bswap32(*v26);
                if (a8.f32[0] <= 0.0) {
                  goto LABEL_311;
                }
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              int8x16_t v222 = *v31;
              *(float *)v222.i32 = (float)(a8.f32[0] + a6.f32[0]) - (float)(a8.f32[0] * a6.f32[0]);
              a8 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              float32x4_t v223 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), v221);
              a6 = vmlaq_f32(vaddq_f32(a8, v223), v218, vmulq_f32(v223, a8));
              float32x4_t v221 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.i8, 0), a6);
              if (v16)
              {
                a6.i32[0] = v222.i32[0];
LABEL_311:
                *uint64_t v31 = vrev32q_s8((int8x16_t)v221);
                *double v26 = bswap32(a6.u32[0]);
                goto LABEL_313;
              }
              *uint64_t v31 = vrev32q_s8((int8x16_t)v221);
            }
          }
LABEL_313:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v217);
          --v219;
        }
        while (v219);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21) {
          return;
        }
      }
    case 24:
      uint64_t v224 = 4 * v27;
      while (1)
      {
        int v225 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v226 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v226;
            if ((float)(v19 * v226) > 0.0)
            {
              int8x16_t v227 = (int8x16_t)vmulq_n_f32(v30, v226);
              if (v16)
              {
                float v228 = COERCE_FLOAT(bswap32(*v26));
                if (v228 <= 0.0) {
                  goto LABEL_326;
                }
              }
              else
              {
                float v228 = 1.0;
              }
              int8x16_t v229 = vrev32q_s8(*v31);
              PDAhuePDA((float *)v348.i32, *(float *)v229.i32, *(float *)&v229.i32[1], *(float *)&v229.i32[2], *(float *)&v229.i32[3], v228, *(double *)v227.i64, a9, a10, *(float *)v227.i32, *(float *)&v227.i32[1], *(float *)&v227.i32[2], *(float *)&v227.i32[3], *(float *)&a9);
              int8x16_t v227 = v348;
              if (v16)
              {
                *(float *)&a9 = v349;
                float32x4_t v30 = v346;
                float v19 = v347;
LABEL_326:
                *uint64_t v31 = vrev32q_s8(v227);
                *double v26 = bswap32(LODWORD(a9));
                goto LABEL_328;
              }
              *uint64_t v31 = vrev32q_s8(v348);
              float32x4_t v30 = v346;
              float v19 = v347;
            }
          }
LABEL_328:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v224);
          --v225;
        }
        while (v225);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v345;
        if (!v21) {
          return;
        }
      }
    case 25:
      uint64_t v230 = 4 * v27;
      while (1)
      {
        int v231 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v232 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v232;
            if ((float)(v19 * v232) > 0.0)
            {
              int8x16_t v233 = (int8x16_t)vmulq_n_f32(v30, v232);
              if (v16)
              {
                float v234 = COERCE_FLOAT(bswap32(*v26));
                if (v234 <= 0.0) {
                  goto LABEL_341;
                }
              }
              else
              {
                float v234 = 1.0;
              }
              int8x16_t v235 = vrev32q_s8(*v31);
              PDAsaturationPDA((float *)v348.i32, *(float *)v235.i32, *(float *)&v235.i32[1], *(float *)&v235.i32[2], *(float *)&v235.i32[3], v234, *(double *)v233.i64, a9, a10, *(float *)v233.i32, *(float *)&v233.i32[1], *(float *)&v233.i32[2], *(float *)&v233.i32[3], *(float *)&a9);
              int8x16_t v233 = v348;
              if (v16)
              {
                *(float *)&a9 = v349;
                float32x4_t v30 = v346;
                float v19 = v347;
LABEL_341:
                *uint64_t v31 = vrev32q_s8(v233);
                *double v26 = bswap32(LODWORD(a9));
                goto LABEL_343;
              }
              *uint64_t v31 = vrev32q_s8(v348);
              float32x4_t v30 = v346;
              float v19 = v347;
            }
          }
LABEL_343:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v230);
          --v231;
        }
        while (v231);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v345;
        if (!v21) {
          return;
        }
      }
    case 26:
      uint64_t v236 = 4 * v27;
      while (1)
      {
        int v237 = v20;
        do
        {
          if (*(unsigned char *)v33)
          {
            float v238 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            float v239 = v19 * v238;
            if ((float)(v19 * v238) > 0.0)
            {
              int8x16_t v240 = (int8x16_t)vmulq_n_f32(v30, v238);
              if (v16)
              {
                a8.i32[0] = bswap32(*v26);
                if (a8.f32[0] <= 0.0) {
                  goto LABEL_356;
                }
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              int8x16_t v344 = vrev32q_s8(*v31);
              PDAluminosityPDA((float *)v348.i32, *(float *)v240.i32, *(float *)&v240.i32[1], *(float *)&v240.i32[2], *(float *)&v240.i32[3], v239, *(double *)a8.i64, *(double *)v344.i64, a10, *(float *)v344.i32, *(float *)&v344.i32[1], *(float *)&v344.i32[2], *(float *)&v344.i32[3], a8.f32[0]);
              int8x16_t v240 = v348;
              if (v16)
              {
                float v239 = v349;
                float32x4_t v30 = v346;
                float v19 = v347;
LABEL_356:
                *uint64_t v31 = vrev32q_s8(v240);
                *double v26 = bswap32(LODWORD(v239));
                goto LABEL_358;
              }
              *uint64_t v31 = vrev32q_s8(v348);
              float32x4_t v30 = v346;
              float v19 = v347;
            }
          }
LABEL_358:
          ++v33;
          ++v31;
          double v26 = (unsigned int *)((char *)v26 + v236);
          --v237;
        }
        while (v237);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v345;
        if (!v21) {
          return;
        }
      }
    case 27:
      uint64_t v241 = 4 * v27;
      break;
    default:
      return;
  }
  do
  {
    int v242 = v20;
    do
    {
      if (*(unsigned char *)v33)
      {
        float v243 = (float)*(unsigned __int8 *)v33 * 0.0039216;
        *(float *)&a9 = v19 * v243;
        if ((float)(v19 * v243) > 0.0)
        {
          int8x16_t v244 = (int8x16_t)vmulq_n_f32(v30, v243);
          if (v16)
          {
            float v245 = COERCE_FLOAT(bswap32(*v26));
            if (v245 <= 0.0) {
              goto LABEL_371;
            }
          }
          else
          {
            float v245 = 1.0;
          }
          int8x16_t v246 = vrev32q_s8(*v31);
          PDAluminosityPDA((float *)v348.i32, *(float *)v246.i32, *(float *)&v246.i32[1], *(float *)&v246.i32[2], *(float *)&v246.i32[3], v245, *(double *)v244.i64, a9, a10, *(float *)v244.i32, *(float *)&v244.i32[1], *(float *)&v244.i32[2], *(float *)&v244.i32[3], *(float *)&a9);
          int8x16_t v244 = v348;
          if (v16)
          {
            *(float *)&a9 = v349;
            float32x4_t v30 = v346;
            float v19 = v347;
LABEL_371:
            *uint64_t v31 = vrev32q_s8(v244);
            *double v26 = bswap32(LODWORD(a9));
            goto LABEL_373;
          }
          *uint64_t v31 = vrev32q_s8(v348);
          float32x4_t v30 = v346;
          float v19 = v347;
        }
      }
LABEL_373:
      ++v33;
      ++v31;
      double v26 = (unsigned int *)((char *)v26 + v241);
      --v242;
    }
    while (v242);
    v33 += v37;
    v31 += v36;
    v26 += v38;
    --v21;
    LODWORD(v20) = v345;
  }
  while (v21);
}

void CMYKF_mark_pixelmask(uint64_t a1, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, double a9, double a10)
{
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v13 = *(int *)(a1 + 12);
  uint64_t v12 = *(int *)(a1 + 16);
  if (v10)
  {
    unint64_t v14 = (unint64_t)*(int *)(a1 + 32) >> 2;
    double v15 = (unsigned int *)(v10 + 4 * (v13 + v14 * v12));
    int v16 = -1;
    if (!v11) {
      return;
    }
  }
  else
  {
    double v15 = 0;
    unint64_t v14 = 0;
    int v16 = 0;
    if (!v11) {
      return;
    }
  }
  uint64_t v18 = *(unsigned int *)(a1 + 4);
  uint64_t v17 = *(unsigned int *)(a1 + 8);
  unint64_t v20 = *(void *)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 96);
  unint64_t v21 = (unint64_t)*(int *)(a1 + 28) >> 4;
  int8x16_t v22 = (int8x16_t *)(*(void *)(a1 + 40) + 16 * (v13 + v21 * v12));
  uint64_t v23 = *(int *)(a1 + 124);
  uint64_t v24 = (unsigned char *)(v11 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v23);
  uint64_t v25 = *(int *)(a1 + 56);
  uint64_t v26 = *(int *)(a1 + 60);
  unint64_t v27 = *(int *)(a1 + 76);
  if ((*(_DWORD *)a1 & 0xFF00) != 0x100)
  {
    int v30 = *(_DWORD *)(a1 + 64);
    int v31 = *(_DWORD *)(a1 + 68);
    uint64_t v28 = v27 >> 4;
    if (v19)
    {
      unint64_t v29 = (unint64_t)*(int *)(a1 + 80) >> 2;
      int v767 = 1;
    }
    else
    {
      unint64_t v29 = 0;
      int v767 = 0;
    }
    unint64_t v35 = v20 + 16 * v28 * v31;
    v16 &= 1u;
    int v34 = 1;
    uint64_t v766 = *(int8x16_t **)(a1 + 88);
    uint64_t v32 = v766;
    goto LABEL_19;
  }
  uint64_t v28 = v27 >> 4;
  if (v19)
  {
    unint64_t v29 = (unint64_t)*(int *)(a1 + 80) >> 2;
    v19 += 4 * (v25 + v29 * v26);
    int v767 = -1;
  }
  else
  {
    unint64_t v29 = 0;
    int v767 = 0;
  }
  uint64_t v32 = (int8x16_t *)(v20 + 16 * (v25 + v28 * v26));
  if (v28 == v21 && (char *)v22 - (char *)v32 >= 1)
  {
    if ((int)v18 >= (uint64_t)((unint64_t)((char *)v22 - (char *)v32) >> 4))
    {
      v22 += (int)v18 - 1;
      v32 += (int)v18 - 1;
      v24 += (int)v18 - 1;
      v15 += v16 & ((int)v18 - 1);
      int v34 = -1;
      uint64_t v28 = (unint64_t)*(int *)(a1 + 28) >> 4;
      v19 += 4 * (v767 & ((int)v18 - 1));
      goto LABEL_16;
    }
    uint64_t v33 = (int)v17 - 1;
    if (v22 <= &v32[v21 * v33 - 1 + (int)v18])
    {
      v22 += v21 * v33;
      uint64_t v28 = -(uint64_t)v21;
      v24 += v23 * v33;
      uint64_t v23 = -v23;
      v15 += v14 * v33;
      unint64_t v14 = -(uint64_t)v14;
      v16 &= 1u;
      v19 += 4 * v29 * v33;
      unint64_t v29 = -(uint64_t)v29;
      v767 &= 1u;
      int v34 = 1;
      v32 += v21 * v33;
      unint64_t v21 = -(uint64_t)v21;
      goto LABEL_16;
    }
  }
  v16 &= 1u;
  v767 &= 1u;
  int v34 = 1;
LABEL_16:
  unint64_t v35 = 0;
  uint64_t v766 = 0;
  unint64_t v20 = -1;
  int v31 = v29;
  int v30 = v28;
LABEL_19:
  int v768 = v16;
  int v36 = v34 * v18;
  if (v35)
  {
    uint64_t v37 = (int)v26 % v31;
    unint64_t v38 = &v32[v28 * v37];
    uint64_t v39 = (int)v25 % v30;
    uint64_t v32 = &v38[v39];
    unint64_t v20 = (unint64_t)&v38[v30];
    if (v767) {
      v19 += 4 * v29 * v37 + 4 * v39;
    }
    uint64_t v766 = &v38[v39];
  }
  else
  {
    v28 -= v36;
    v29 -= v767 * (int)v18;
  }
  uint64_t v40 = v23 - v36;
  uint64_t v41 = v21 - v36;
  unint64_t v765 = v14 - v768 * (int)v18;
  uint64_t v744 = v28;
  uint64_t v745 = v18;
  uint64_t v742 = v41;
  uint64_t v743 = v40;
  unint64_t v746 = v35;
  switch((int)a2)
  {
    case 0:
      if (v768)
      {
        do
        {
          int v42 = v18;
          do
          {
            unsigned int v43 = *v24;
            if (*v24)
            {
              if (v43 == 255)
              {
                v22->i64[0] = 0;
                v22->i64[1] = 0;
                unsigned int *v15 = 0;
              }
              else
              {
                float v44 = (float)((float)v43 * -0.0039216) + 1.0;
                unsigned int v45 = bswap32(COERCE_UNSIGNED_INT(v44 * COERCE_FLOAT(bswap32(*v15))));
                *int8x16_t v22 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v44));
                unsigned int *v15 = v45;
              }
            }
            v24 += v34;
            v15 += v768;
            v22 += v34;
            --v42;
          }
          while (v42);
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      else
      {
        do
        {
          int v605 = v18;
          do
          {
            unsigned int v606 = *v24;
            if (*v24)
            {
              if (v606 == 255)
              {
                v22->i64[0] = 0;
                v22->i64[1] = 0;
              }
              else
              {
                *int8x16_t v22 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), (float)((float)v606 * -0.0039216) + 1.0));
              }
            }
            v24 += v34;
            v22 += v34;
            --v605;
          }
          while (v605);
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      return;
    case 1:
      if (v768)
      {
        uint64_t v46 = v34;
        if (v767)
        {
          uint64_t v47 = v31;
          uint64_t v48 = -(v28 * v31);
          uint64_t v49 = -(uint64_t)(v29 * v47);
          int v50 = (unsigned int *)v19;
          uint64_t v51 = -(uint64_t)v30;
          do
          {
            int v52 = v18;
            do
            {
              unsigned int v53 = *v24;
              if (*v24)
              {
                if (v53 == 255)
                {
                  *int8x16_t v22 = *v32;
                  unsigned int *v15 = *v50;
                }
                else
                {
                  float v54 = (float)v53 * 0.0039216;
                  unsigned int v55 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v54) * COERCE_FLOAT(bswap32(*v15)))+ (float)(COERCE_FLOAT(bswap32(*v50)) * v54)));
                  *int8x16_t v22 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), 1.0 - v54), (float32x4_t)vrev32q_s8(*v32), v54));
                  unsigned int *v15 = v55;
                }
              }
              v24 += v46;
              int v56 = &v32[v46];
              char v57 = &v50[v767];
              if ((unint64_t)v56 >= v20) {
                uint64_t v58 = v51;
              }
              else {
                uint64_t v58 = 0;
              }
              int v50 = &v57[v58];
              uint64_t v32 = &v56[v58];
              v15 += v768;
              v22 += v46;
              --v52;
            }
            while (v52);
            if (v35)
            {
              unint64_t v59 = (unint64_t)&v766[v28];
              if (v59 >= v35) {
                uint64_t v60 = v49;
              }
              else {
                uint64_t v60 = 0;
              }
              v19 += 4 * v29 + 4 * v60;
              if (v59 >= v35) {
                uint64_t v61 = v48;
              }
              else {
                uint64_t v61 = 0;
              }
              uint64_t v32 = (int8x16_t *)(v59 + 16 * v61);
              v20 += 16 * v61 + 16 * v28;
              int v50 = (unsigned int *)v19;
              uint64_t v766 = v32;
            }
            else
            {
              v32 += v28;
              v50 += v29;
            }
            v24 += v40;
            v22 += v41;
            v15 += v765;
            LODWORD(v17) = v17 - 1;
          }
          while (v17);
        }
        else
        {
          uint64_t v691 = -(uint64_t)v30;
          uint64_t v692 = -(v28 * v31);
          do
          {
            int v693 = v18;
            do
            {
              unsigned int v694 = *v24;
              if (*v24)
              {
                if (v694 == 255)
                {
                  int8x16_t v695 = *v32;
                  unsigned int v696 = 32831;
                }
                else
                {
                  float v697 = (float)v694 * 0.0039216;
                  unsigned int v696 = bswap32(COERCE_UNSIGNED_INT(v697 + (float)((float)(1.0 - v697) * COERCE_FLOAT(bswap32(*v15)))));
                  int8x16_t v695 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), 1.0 - v697), (float32x4_t)vrev32q_s8(*v32), v697));
                }
                *int8x16_t v22 = v695;
                unsigned int *v15 = v696;
              }
              v24 += v46;
              unsigned int v698 = &v32[v46];
              if ((unint64_t)v698 >= v20) {
                uint64_t v699 = v691;
              }
              else {
                uint64_t v699 = 0;
              }
              uint64_t v32 = &v698[v699];
              v15 += v768;
              v22 += v46;
              --v693;
            }
            while (v693);
            v24 += v40;
            v22 += v41;
            float v700 = v766;
            v15 += v765;
            unint64_t v701 = (unint64_t)&v766[v28];
            if (v701 >= v35) {
              uint64_t v702 = v692;
            }
            else {
              uint64_t v702 = 0;
            }
            float v703 = (int8x16_t *)(v701 + 16 * v702);
            uint64_t v704 = v20 + 16 * v702 + 16 * v28;
            if (v35)
            {
              unint64_t v20 = v704;
              float v700 = v703;
            }
            uint64_t v766 = v700;
            if (v35) {
              uint64_t v32 = v703;
            }
            else {
              v32 += v28;
            }
            LODWORD(v17) = v17 - 1;
          }
          while (v17);
        }
      }
      else
      {
        uint64_t v607 = v34;
        uint64_t v608 = -(uint64_t)v30;
        uint64_t v609 = -(v28 * v31);
        uint64_t v610 = 16 * v34;
        do
        {
          int v611 = v18;
          do
          {
            unsigned int v612 = *v24;
            if (*v24)
            {
              if (v612 == 255) {
                int8x16_t v613 = *v32;
              }
              else {
                int8x16_t v613 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), 1.0 - (float)((float)v612 * 0.0039216)), (float32x4_t)vrev32q_s8(*v32), (float)v612 * 0.0039216));
              }
              *int8x16_t v22 = v613;
            }
            v24 += v607;
            unsigned int v614 = &v32[v607];
            if ((unint64_t)v614 >= v20) {
              uint64_t v615 = v608;
            }
            else {
              uint64_t v615 = 0;
            }
            uint64_t v32 = &v614[v615];
            int8x16_t v22 = (int8x16_t *)((char *)v22 + v610);
            --v611;
          }
          while (v611);
          v24 += v40;
          v22 += v41;
          unsigned int v616 = v766;
          unint64_t v617 = (unint64_t)&v766[v28];
          if (v617 >= v35) {
            uint64_t v618 = v609;
          }
          else {
            uint64_t v618 = 0;
          }
          int8x16_t v619 = (int8x16_t *)(v617 + 16 * v618);
          uint64_t v620 = v20 + 16 * v618 + 16 * v28;
          if (v35)
          {
            unint64_t v20 = v620;
            unsigned int v616 = v619;
          }
          uint64_t v766 = v616;
          if (v35) {
            uint64_t v32 = v619;
          }
          else {
            v32 += v28;
          }
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      return;
    case 2:
      uint64_t v62 = v34;
      if (v768)
      {
        uint64_t v63 = -(uint64_t)v30;
        uint64_t v64 = v31;
        uint64_t v65 = -(v28 * v31);
        uint64_t v66 = -(uint64_t)(v29 * v64);
        float v67 = (unsigned int *)v19;
        while (1)
        {
          int v68 = v18;
          do
          {
            unsigned int v69 = *v24;
            if (!*v24) {
              goto LABEL_72;
            }
            if (v69 == 255)
            {
              unsigned int v70 = *v67;
              float v71 = COERCE_FLOAT(bswap32(*v67));
              if (v71 >= 1.0)
              {
                int8x16_t v75 = *v32;
                goto LABEL_71;
              }
              if (v71 <= 0.0) {
                goto LABEL_72;
              }
              unsigned int v70 = bswap32(COERCE_UNSIGNED_INT(v71 + (float)(COERCE_FLOAT(bswap32(*v15)) * (float)(1.0 - v71))));
              int8x16_t v72 = (int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v32), (float32x4_t)vrev32q_s8(*v22), 1.0 - v71);
            }
            else
            {
              float v73 = (float)v69 * 0.0039216;
              float v74 = v73 * COERCE_FLOAT(bswap32(*v67));
              if (v74 <= 0.0) {
                goto LABEL_72;
              }
              unsigned int v70 = bswap32(COERCE_UNSIGNED_INT(v74 + (float)(COERCE_FLOAT(bswap32(*v15)) * (float)(1.0 - v74))));
              int8x16_t v72 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v73), (float32x4_t)vrev32q_s8(*v22), 1.0 - v74);
            }
            int8x16_t v75 = vrev32q_s8(v72);
LABEL_71:
            *int8x16_t v22 = v75;
            unsigned int *v15 = v70;
LABEL_72:
            v24 += v62;
            float v76 = &v32[v62];
            unsigned int v77 = &v67[v767];
            if ((unint64_t)v76 >= v20) {
              uint64_t v78 = v63;
            }
            else {
              uint64_t v78 = 0;
            }
            float v67 = &v77[v78];
            uint64_t v32 = &v76[v78];
            v15 += v768;
            v22 += v62;
            --v68;
          }
          while (v68);
          if (v35)
          {
            unint64_t v79 = (unint64_t)&v766[v28];
            if (v79 >= v35) {
              uint64_t v80 = v66;
            }
            else {
              uint64_t v80 = 0;
            }
            v19 += 4 * v29 + 4 * v80;
            if (v79 >= v35) {
              uint64_t v81 = v65;
            }
            else {
              uint64_t v81 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v79 + 16 * v81);
            v20 += 16 * v81 + 16 * v28;
            float v67 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v67 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
          if (!v17) {
            return;
          }
        }
      }
      uint64_t v621 = -(uint64_t)v30;
      uint64_t v622 = v31;
      uint64_t v623 = -(v28 * v31);
      uint64_t v624 = -(uint64_t)(v29 * v622);
      float32x4_t v625 = (unsigned int *)v19;
LABEL_783:
      int v626 = v18;
      while (1)
      {
        unsigned int v627 = *v24;
        if (*v24)
        {
          if (v627 == 255)
          {
            float v628 = COERCE_FLOAT(bswap32(*v625));
            if (v628 >= 1.0)
            {
              int8x16_t v629 = *v32;
              goto LABEL_792;
            }
            if (v628 > 0.0)
            {
              int8x16_t v629 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v32), (float32x4_t)vrev32q_s8(*v22), 1.0 - v628));
LABEL_792:
              *int8x16_t v22 = v629;
            }
          }
          else
          {
            float v630 = (float)v627 * 0.0039216;
            float v631 = COERCE_FLOAT(bswap32(*v625));
            if ((float)(v630 * v631) > 0.0)
            {
              int8x16_t v629 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v630), (float32x4_t)vrev32q_s8(*v22), 1.0 - (float)(v630 * v631)));
              goto LABEL_792;
            }
          }
        }
        v24 += v62;
        int v632 = &v32[v62];
        float32x4_t v633 = &v625[v767];
        if ((unint64_t)v632 >= v20) {
          uint64_t v634 = v621;
        }
        else {
          uint64_t v634 = 0;
        }
        float32x4_t v625 = &v633[v634];
        uint64_t v32 = &v632[v634];
        v22 += v62;
        if (!--v626)
        {
          if (v35)
          {
            unint64_t v635 = (unint64_t)&v766[v28];
            if (v635 >= v35) {
              uint64_t v636 = v624;
            }
            else {
              uint64_t v636 = 0;
            }
            v19 += 4 * v29 + 4 * v636;
            if (v635 >= v35) {
              uint64_t v637 = v623;
            }
            else {
              uint64_t v637 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v635 + 16 * v637);
            v20 += 16 * v637 + 16 * v28;
            float32x4_t v625 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v625 += v29;
          }
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
          if (!v17) {
            return;
          }
          goto LABEL_783;
        }
      }
    case 3:
      uint64_t v82 = v34;
      uint64_t v83 = v31;
      uint64_t v84 = -(v28 * v31);
      uint64_t v85 = -(uint64_t)(v29 * v83);
      uint64_t v86 = 16 * v34;
      uint64_t v87 = -(uint64_t)v30;
      int v88 = (unsigned int *)v19;
      do
      {
        int v89 = v18;
        do
        {
          unsigned int v90 = *v24;
          if (*v24)
          {
            if (v90 == 255)
            {
              if (v767) {
                float v91 = COERCE_FLOAT(bswap32(*v88));
              }
              else {
                float v91 = 1.0;
              }
              float v93 = COERCE_FLOAT(bswap32(*v15));
              unsigned int v94 = bswap32(COERCE_UNSIGNED_INT(v91 * v93));
              int8x16_t v95 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v93);
            }
            else
            {
              if (v767) {
                float v92 = COERCE_FLOAT(bswap32(*v88));
              }
              else {
                float v92 = 1.0;
              }
              float v96 = (float)v90 * 0.0039216;
              float v97 = COERCE_FLOAT(bswap32(*v15));
              float v98 = v96 * v97;
              float v99 = 1.0 - v96;
              unsigned int v94 = bswap32(COERCE_UNSIGNED_INT((float)(v99 * v97) + (float)(v92 * v98)));
              int8x16_t v95 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v99), (float32x4_t)vrev32q_s8(*v32), v98);
            }
            *int8x16_t v22 = vrev32q_s8(v95);
            unsigned int *v15 = v94;
          }
          v24 += v82;
          float v100 = &v32[v82];
          float v101 = &v88[v767];
          if ((unint64_t)v100 >= v20) {
            uint64_t v102 = v87;
          }
          else {
            uint64_t v102 = 0;
          }
          int v88 = &v101[v102];
          uint64_t v32 = &v100[v102];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v86);
          --v89;
        }
        while (v89);
        if (v35)
        {
          unint64_t v103 = (unint64_t)&v766[v28];
          if (v103 >= v35) {
            uint64_t v104 = v85;
          }
          else {
            uint64_t v104 = 0;
          }
          v19 += 4 * v29 + 4 * v104;
          if (v103 >= v35) {
            uint64_t v105 = v84;
          }
          else {
            uint64_t v105 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v103 + 16 * v105);
          v20 += 16 * v105 + 16 * v28;
          int v88 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v88 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while (v17);
      return;
    case 4:
      uint64_t v106 = v34;
      uint64_t v107 = v31;
      uint64_t v108 = -(v28 * v31);
      uint64_t v109 = -(uint64_t)(v29 * v107);
      uint64_t v110 = 16 * v34;
      uint64_t v111 = -(uint64_t)v30;
      float v112 = (unsigned int *)v19;
      do
      {
        int v113 = v18;
        do
        {
          unsigned int v114 = *v24;
          if (*v24)
          {
            if (v114 == 255)
            {
              if (v767) {
                float v115 = COERCE_FLOAT(bswap32(*v112));
              }
              else {
                float v115 = 1.0;
              }
              float v117 = 1.0 - COERCE_FLOAT(bswap32(*v15));
              unsigned int v118 = bswap32(COERCE_UNSIGNED_INT(v115 * v117));
              int8x16_t v119 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v117);
            }
            else
            {
              if (v767) {
                float v116 = COERCE_FLOAT(bswap32(*v112));
              }
              else {
                float v116 = 1.0;
              }
              float v120 = (float)v114 * 0.0039216;
              float v121 = COERCE_FLOAT(bswap32(*v15));
              float v122 = v120 * (float)(1.0 - v121);
              float v123 = 1.0 - v120;
              unsigned int v118 = bswap32(COERCE_UNSIGNED_INT((float)(v123 * v121) + (float)(v116 * v122)));
              int8x16_t v119 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v123), (float32x4_t)vrev32q_s8(*v32), v122);
            }
            *int8x16_t v22 = vrev32q_s8(v119);
            unsigned int *v15 = v118;
          }
          v24 += v106;
          uint64_t v124 = &v32[v106];
          int v125 = &v112[v767];
          if ((unint64_t)v124 >= v20) {
            uint64_t v126 = v111;
          }
          else {
            uint64_t v126 = 0;
          }
          float v112 = &v125[v126];
          uint64_t v32 = &v124[v126];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v110);
          --v113;
        }
        while (v113);
        if (v35)
        {
          unint64_t v127 = (unint64_t)&v766[v28];
          if (v127 >= v35) {
            uint64_t v128 = v109;
          }
          else {
            uint64_t v128 = 0;
          }
          v19 += 4 * v29 + 4 * v128;
          if (v127 >= v35) {
            uint64_t v129 = v108;
          }
          else {
            uint64_t v129 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v127 + 16 * v129);
          v20 += 16 * v129 + 16 * v28;
          float v112 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v112 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while (v17);
      return;
    case 5:
      uint64_t v130 = v34;
      uint64_t v131 = v31;
      uint64_t v132 = -(v28 * v31);
      uint64_t v133 = -(uint64_t)(v29 * v131);
      uint64_t v134 = 16 * v34;
      uint64_t v135 = -(uint64_t)v30;
      float32x4_t v136 = (unsigned int *)v19;
      do
      {
        int v137 = v18;
        do
        {
          if (*v24)
          {
            float v138 = COERCE_FLOAT(bswap32(*v15));
            float v139 = (float)*v24 * 0.0039216;
            float v140 = COERCE_FLOAT(bswap32(*v136));
            float v141 = 1.0 - (float)(v139 * v140);
            *int8x16_t v22 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v141), vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v139), v138));
            unsigned int *v15 = bswap32(COERCE_UNSIGNED_INT((float)(v141 * v138) + (float)((float)(v139 * v140) * v138)));
          }
          v24 += v130;
          unint64_t v142 = &v32[v130];
          uint64_t v143 = &v136[v767];
          if ((unint64_t)v142 >= v20) {
            uint64_t v144 = v135;
          }
          else {
            uint64_t v144 = 0;
          }
          float32x4_t v136 = &v143[v144];
          uint64_t v32 = &v142[v144];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v134);
          --v137;
        }
        while (v137);
        if (v35)
        {
          unint64_t v145 = (unint64_t)&v766[v28];
          if (v145 >= v35) {
            uint64_t v146 = v133;
          }
          else {
            uint64_t v146 = 0;
          }
          v19 += 4 * v29 + 4 * v146;
          if (v145 >= v35) {
            uint64_t v147 = v132;
          }
          else {
            uint64_t v147 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v145 + 16 * v147);
          v20 += 16 * v147 + 16 * v28;
          float32x4_t v136 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v136 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while (v17);
      return;
    case 6:
      uint64_t v148 = v34;
      uint64_t v149 = v31;
      uint64_t v150 = -(v28 * v31);
      uint64_t v151 = -(uint64_t)(v29 * v149);
      uint64_t v152 = 16 * v34;
      uint64_t v153 = -(uint64_t)v30;
      float v154 = (unsigned int *)v19;
      while (1)
      {
        int v155 = v18;
        do
        {
          unsigned int v156 = *v24;
          if (!*v24) {
            goto LABEL_176;
          }
          float v157 = COERCE_FLOAT(bswap32(*v15));
          float v158 = 1.0 - v157;
          if ((float)(1.0 - v157) >= 1.0)
          {
            if (v767) {
              float v160 = COERCE_FLOAT(bswap32(*v154));
            }
            else {
              float v160 = 1.0;
            }
            float v161 = (float)v156 * 0.0039216;
            unsigned int v162 = bswap32(COERCE_UNSIGNED_INT(v161 * v160));
            int8x16_t v163 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v161);
          }
          else
          {
            if (v158 <= 0.0) {
              goto LABEL_176;
            }
            if (v767) {
              float v159 = COERCE_FLOAT(bswap32(*v154));
            }
            else {
              float v159 = 1.0;
            }
            float v164 = (float)((float)v156 * 0.0039216) * v158;
            unsigned int v162 = bswap32(COERCE_UNSIGNED_INT(v157 + (float)(v159 * v164)));
            int8x16_t v163 = (int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v22), (float32x4_t)vrev32q_s8(*v32), v164);
          }
          *int8x16_t v22 = vrev32q_s8(v163);
          unsigned int *v15 = v162;
LABEL_176:
          v24 += v148;
          float32x4_t v165 = &v32[v148];
          float32x4_t v166 = &v154[v767];
          if ((unint64_t)v165 >= v20) {
            uint64_t v167 = v153;
          }
          else {
            uint64_t v167 = 0;
          }
          float v154 = &v166[v167];
          uint64_t v32 = &v165[v167];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v152);
          --v155;
        }
        while (v155);
        if (v35)
        {
          unint64_t v168 = (unint64_t)&v766[v28];
          if (v168 >= v35) {
            uint64_t v169 = v151;
          }
          else {
            uint64_t v169 = 0;
          }
          v19 += 4 * v29 + 4 * v169;
          if (v168 >= v35) {
            uint64_t v170 = v150;
          }
          else {
            uint64_t v170 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v168 + 16 * v170);
          v20 += 16 * v170 + 16 * v28;
          float v154 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v154 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!v17) {
          return;
        }
      }
    case 7:
      uint64_t v171 = v34;
      if (v768)
      {
        uint64_t v172 = v31;
        uint64_t v173 = -(v28 * v31);
        uint64_t v174 = -(uint64_t)(v29 * v172);
        uint64_t v175 = -(uint64_t)v30;
        float32x4_t v176 = (unsigned int *)v19;
        do
        {
          int v177 = v18;
          do
          {
            unsigned int v178 = *v24;
            if (*v24)
            {
              if (v178 == 255)
              {
                float v179 = COERCE_FLOAT(bswap32(*v176));
                int8x16_t v180 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v179);
                float v181 = COERCE_FLOAT(bswap32(*v15)) * v179;
              }
              else
              {
                float v182 = (float)v178 * 0.0039216;
                float v183 = COERCE_FLOAT(bswap32(*v15));
                float v184 = v182 * COERCE_FLOAT(bswap32(*v176));
                float v185 = 1.0 - v182;
                float32x4_t v186 = (float32x4_t)vrev32q_s8(*v22);
                int8x16_t v180 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v186, 1.0 - v182), v186, v184);
                float v181 = (float)(v185 * v183) + (float)(v183 * v184);
              }
              *int8x16_t v22 = vrev32q_s8(v180);
              unsigned int *v15 = bswap32(LODWORD(v181));
            }
            v24 += v171;
            int v187 = &v32[v171];
            float v188 = &v176[v767];
            if ((unint64_t)v187 >= v20) {
              uint64_t v189 = v175;
            }
            else {
              uint64_t v189 = 0;
            }
            float32x4_t v176 = &v188[v189];
            uint64_t v32 = &v187[v189];
            v15 += v768;
            v22 += v171;
            --v177;
          }
          while (v177);
          if (v35)
          {
            unint64_t v190 = (unint64_t)&v766[v28];
            if (v190 >= v35) {
              uint64_t v191 = v174;
            }
            else {
              uint64_t v191 = 0;
            }
            v19 += 4 * v29 + 4 * v191;
            if (v190 >= v35) {
              uint64_t v192 = v173;
            }
            else {
              uint64_t v192 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v190 + 16 * v192);
            v20 += 16 * v192 + 16 * v28;
            float32x4_t v176 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v176 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      else
      {
        uint64_t v638 = -(uint64_t)v30;
        uint64_t v639 = v31;
        uint64_t v640 = -(v28 * v31);
        uint64_t v641 = -(uint64_t)(v29 * v639);
        int v642 = (unsigned int *)v19;
        do
        {
          int v643 = v18;
          do
          {
            unsigned int v644 = *v24;
            if (*v24)
            {
              if (v644 == 255)
              {
                int8x16_t v645 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_n_s32(bswap32(*v642)), (float32x4_t)vrev32q_s8(*v22));
              }
              else
              {
                float32x4_t v646 = (float32x4_t)vrev32q_s8(*v22);
                int8x16_t v645 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v646, 1.0 - (float)((float)v644 * 0.0039216)), v646, (float)((float)v644 * 0.0039216) * COERCE_FLOAT(bswap32(*v642)));
              }
              *int8x16_t v22 = vrev32q_s8(v645);
            }
            v24 += v171;
            unsigned int v647 = &v32[v171];
            unsigned int v648 = &v642[v767];
            if ((unint64_t)v647 >= v20) {
              uint64_t v649 = v638;
            }
            else {
              uint64_t v649 = 0;
            }
            int v642 = &v648[v649];
            uint64_t v32 = &v647[v649];
            v22 += v171;
            --v643;
          }
          while (v643);
          if (v35)
          {
            unint64_t v650 = (unint64_t)&v766[v28];
            if (v650 >= v35) {
              uint64_t v651 = v641;
            }
            else {
              uint64_t v651 = 0;
            }
            v19 += 4 * v29 + 4 * v651;
            if (v650 >= v35) {
              uint64_t v652 = v640;
            }
            else {
              uint64_t v652 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v650 + 16 * v652);
            v20 += 16 * v652 + 16 * v28;
            int v642 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v642 += v29;
          }
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      return;
    case 8:
      uint64_t v193 = v34;
      if (v768)
      {
        uint64_t v194 = -(uint64_t)v30;
        uint64_t v195 = v31;
        uint64_t v196 = -(v28 * v31);
        uint64_t v197 = -(uint64_t)(v29 * v195);
        int v198 = (unsigned int *)v19;
        do
        {
          int v199 = v18;
          do
          {
            unsigned int v200 = *v24;
            if (*v24)
            {
              float32x4_t v201 = (float32x4_t)vrev32q_s8(*v22);
              float v202 = COERCE_FLOAT(bswap32(*v15));
              if (v200 == 255) {
                float v203 = 1.0 - COERCE_FLOAT(bswap32(*v198));
              }
              else {
                float v203 = (float)((float)((float)v200 * -0.0039216) * COERCE_FLOAT(bswap32(*v198))) + 1.0;
              }
              *int8x16_t v22 = vrev32q_s8((int8x16_t)vmulq_n_f32(v201, v203));
              unsigned int *v15 = bswap32(COERCE_UNSIGNED_INT(v203 * v202));
            }
            v24 += v193;
            int v204 = &v32[v193];
            float v205 = &v198[v767];
            if ((unint64_t)v204 >= v20) {
              uint64_t v206 = v194;
            }
            else {
              uint64_t v206 = 0;
            }
            int v198 = &v205[v206];
            uint64_t v32 = &v204[v206];
            v15 += v768;
            v22 += v193;
            --v199;
          }
          while (v199);
          if (v35)
          {
            unint64_t v207 = (unint64_t)&v766[v28];
            if (v207 >= v35) {
              uint64_t v208 = v197;
            }
            else {
              uint64_t v208 = 0;
            }
            v19 += 4 * v29 + 4 * v208;
            if (v207 >= v35) {
              uint64_t v209 = v196;
            }
            else {
              uint64_t v209 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v207 + 16 * v209);
            v20 += 16 * v209 + 16 * v28;
            int v198 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v198 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      else
      {
        uint64_t v653 = -(uint64_t)v30;
        uint64_t v654 = v31;
        uint64_t v655 = -(v28 * v31);
        uint64_t v656 = -(uint64_t)(v29 * v654);
        unsigned int v657 = (unsigned int *)v19;
        do
        {
          int v658 = v18;
          do
          {
            unsigned int v659 = *v24;
            if (*v24)
            {
              float32x4_t v660 = (float32x4_t)vrev32q_s8(*v22);
              if (v659 == 255) {
                float v661 = COERCE_FLOAT(bswap32(*v657));
              }
              else {
                float v661 = (float)((float)v659 * 0.0039216) * COERCE_FLOAT(bswap32(*v657));
              }
              *int8x16_t v22 = vrev32q_s8((int8x16_t)vmulq_n_f32(v660, 1.0 - v661));
            }
            v24 += v193;
            uint64_t v662 = &v32[v193];
            int v663 = &v657[v767];
            if ((unint64_t)v662 >= v20) {
              uint64_t v664 = v653;
            }
            else {
              uint64_t v664 = 0;
            }
            unsigned int v657 = &v663[v664];
            uint64_t v32 = &v662[v664];
            v22 += v193;
            --v658;
          }
          while (v658);
          if (v35)
          {
            unint64_t v665 = (unint64_t)&v766[v28];
            if (v665 >= v35) {
              uint64_t v666 = v656;
            }
            else {
              uint64_t v666 = 0;
            }
            v19 += 4 * v29 + 4 * v666;
            if (v665 >= v35) {
              uint64_t v667 = v655;
            }
            else {
              uint64_t v667 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v665 + 16 * v667);
            v20 += 16 * v667 + 16 * v28;
            unsigned int v657 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v657 += v29;
          }
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      return;
    case 9:
      uint64_t v210 = v34;
      uint64_t v211 = v31;
      uint64_t v212 = -(v28 * v31);
      uint64_t v213 = -(uint64_t)(v29 * v211);
      uint64_t v214 = 16 * v34;
      uint64_t v215 = -(uint64_t)v30;
      unsigned int v216 = (unsigned int *)v19;
      do
      {
        int v217 = v18;
        do
        {
          if (*v24)
          {
            float v218 = COERCE_FLOAT(bswap32(*v15));
            float v219 = (float)*v24 * 0.0039216;
            float v220 = COERCE_FLOAT(bswap32(*v216));
            float v221 = (float)(1.0 - v219) + (float)(v219 * v220);
            *int8x16_t v22 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v221), vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v219), 1.0 - v218));
            unsigned int *v15 = bswap32(COERCE_UNSIGNED_INT((float)(v221 * v218) + (float)((float)(v219 * v220) * (float)(1.0 - v218))));
          }
          v24 += v210;
          int8x16_t v222 = &v32[v210];
          float32x4_t v223 = &v216[v767];
          if ((unint64_t)v222 >= v20) {
            uint64_t v224 = v215;
          }
          else {
            uint64_t v224 = 0;
          }
          unsigned int v216 = &v223[v224];
          uint64_t v32 = &v222[v224];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v214);
          --v217;
        }
        while (v217);
        if (v35)
        {
          unint64_t v225 = (unint64_t)&v766[v28];
          if (v225 >= v35) {
            uint64_t v226 = v213;
          }
          else {
            uint64_t v226 = 0;
          }
          v19 += 4 * v29 + 4 * v226;
          if (v225 >= v35) {
            uint64_t v227 = v212;
          }
          else {
            uint64_t v227 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v225 + 16 * v227);
          v20 += 16 * v227 + 16 * v28;
          unsigned int v216 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v216 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while (v17);
      return;
    case 10:
      uint64_t v228 = v34;
      uint64_t v229 = v31;
      uint64_t v230 = -(v28 * v31);
      uint64_t v231 = -(uint64_t)(v29 * v229);
      uint64_t v232 = 16 * v34;
      uint64_t v233 = -(uint64_t)v30;
      float v234 = (unsigned int *)v19;
      do
      {
        int v235 = v18;
        do
        {
          if (*v24)
          {
            float v236 = COERCE_FLOAT(bswap32(*v15));
            float v237 = (float)*v24 * 0.0039216;
            float v238 = v237 * COERCE_FLOAT(bswap32(*v234));
            *int8x16_t v22 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), 1.0 - v238), vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v237), 1.0 - v236));
            unsigned int *v15 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v238) * v236) + (float)(v238 * (float)(1.0 - v236))));
          }
          v24 += v228;
          float v239 = &v32[v228];
          int8x16_t v240 = &v234[v767];
          if ((unint64_t)v239 >= v20) {
            uint64_t v241 = v233;
          }
          else {
            uint64_t v241 = 0;
          }
          float v234 = &v240[v241];
          uint64_t v32 = &v239[v241];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v232);
          --v235;
        }
        while (v235);
        if (v35)
        {
          unint64_t v242 = (unint64_t)&v766[v28];
          if (v242 >= v35) {
            uint64_t v243 = v231;
          }
          else {
            uint64_t v243 = 0;
          }
          v19 += 4 * v29 + 4 * v243;
          if (v242 >= v35) {
            uint64_t v244 = v230;
          }
          else {
            uint64_t v244 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v242 + 16 * v244);
          v20 += 16 * v244 + 16 * v28;
          float v234 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v234 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while (v17);
      return;
    case 11:
      uint64_t v245 = v34;
      if (v768)
      {
        uint64_t v246 = v31;
        uint64_t v247 = -(v28 * v31);
        uint64_t v248 = -(uint64_t)(v29 * v246);
        uint64_t v249 = -(uint64_t)v30;
        char v250 = (unsigned int *)v19;
        do
        {
          int v251 = v18;
          do
          {
            if (*v24)
            {
              if (v767) {
                float v252 = COERCE_FLOAT(bswap32(*v250));
              }
              else {
                float v252 = 1.0;
              }
              float v253 = (float)*v24 * 0.0039216;
              float32x4_t v254 = vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v253);
              a5.f32[0] = v253 * v252;
              a7.i32[0] = bswap32(*v15);
              a8.f32[0] = a5.f32[0] + a7.f32[0];
              if ((float)(a5.f32[0] + a7.f32[0]) > 1.0) {
                a8.f32[0] = 1.0;
              }
              float32x4_t v255 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
              unsigned int v256 = bswap32(a8.u32[0]);
              a8 = (float32x4_t)vrev32q_s8(*v22);
              a7 = vsubq_f32(v255, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), a8));
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v254), a7));
              *int8x16_t v22 = (int8x16_t)a5;
              unsigned int *v15 = v256;
            }
            v24 += v245;
            int v257 = &v32[v245];
            char v258 = &v250[v767];
            if ((unint64_t)v257 >= v20) {
              uint64_t v259 = v249;
            }
            else {
              uint64_t v259 = 0;
            }
            char v250 = &v258[v259];
            uint64_t v32 = &v257[v259];
            v15 += v768;
            v22 += v245;
            --v251;
          }
          while (v251);
          if (v35)
          {
            unint64_t v260 = (unint64_t)&v766[v28];
            if (v260 >= v35) {
              uint64_t v261 = v248;
            }
            else {
              uint64_t v261 = 0;
            }
            v19 += 4 * v29 + 4 * v261;
            if (v260 >= v35) {
              uint64_t v262 = v247;
            }
            else {
              uint64_t v262 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v260 + 16 * v262);
            v20 += 16 * v262 + 16 * v28;
            char v250 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v250 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      else
      {
        uint64_t v668 = -(uint64_t)v30;
        uint64_t v669 = v31;
        uint64_t v670 = -(v28 * v31);
        uint64_t v671 = -(uint64_t)(v29 * v669);
        uint64_t v672 = (unsigned int *)v19;
        do
        {
          int v673 = v18;
          do
          {
            if (*v24)
            {
              if (v767) {
                a4.i32[0] = bswap32(*v672);
              }
              else {
                a4.i32[0] = 1.0;
              }
              float v674 = (float)*v24 * 0.0039216;
              a4.f32[0] = v674 * a4.f32[0];
              a4 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v674)), (float32x4_t)vrev32q_s8(*v22)));
              *int8x16_t v22 = (int8x16_t)a4;
            }
            v24 += v245;
            int8x16_t v675 = &v32[v245];
            unsigned int v676 = &v672[v767];
            if ((unint64_t)v675 >= v20) {
              uint64_t v677 = v668;
            }
            else {
              uint64_t v677 = 0;
            }
            uint64_t v672 = &v676[v677];
            uint64_t v32 = &v675[v677];
            v22 += v245;
            --v673;
          }
          while (v673);
          if (v35)
          {
            unint64_t v678 = (unint64_t)&v766[v28];
            if (v678 >= v35) {
              uint64_t v679 = v671;
            }
            else {
              uint64_t v679 = 0;
            }
            v19 += 4 * v29 + 4 * v679;
            if (v678 >= v35) {
              uint64_t v680 = v670;
            }
            else {
              uint64_t v680 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v678 + 16 * v680);
            v20 += 16 * v680 + 16 * v28;
            uint64_t v672 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v672 += v29;
          }
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      return;
    case 12:
      uint64_t v263 = v34;
      if (v768)
      {
        uint64_t v264 = v31;
        uint64_t v265 = -(v28 * v31);
        uint64_t v266 = -(uint64_t)(v29 * v264);
        uint64_t v267 = -(uint64_t)v30;
        int v268 = (unsigned int *)v19;
        do
        {
          int v269 = v18;
          do
          {
            if (*v24)
            {
              if (v767) {
                float v270 = COERCE_FLOAT(bswap32(*v268));
              }
              else {
                float v270 = 1.0;
              }
              float v271 = (float)*v24 * 0.0039216;
              float32x4_t v272 = vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v271);
              float v273 = (float)(v271 * v270) + COERCE_FLOAT(bswap32(*v15));
              if (v273 > 1.0) {
                float v273 = 1.0;
              }
              *int8x16_t v22 = vrev32q_s8((int8x16_t)vaddq_f32(v272, (float32x4_t)vrev32q_s8(*v22)));
              unsigned int *v15 = bswap32(LODWORD(v273));
            }
            v24 += v263;
            uint64_t v274 = &v32[v263];
            int v275 = &v268[v767];
            if ((unint64_t)v274 >= v20) {
              uint64_t v276 = v267;
            }
            else {
              uint64_t v276 = 0;
            }
            int v268 = &v275[v276];
            uint64_t v32 = &v274[v276];
            v15 += v768;
            v22 += v263;
            --v269;
          }
          while (v269);
          if (v35)
          {
            unint64_t v277 = (unint64_t)&v766[v28];
            if (v277 >= v35) {
              uint64_t v278 = v266;
            }
            else {
              uint64_t v278 = 0;
            }
            v19 += 4 * v29 + 4 * v278;
            if (v277 >= v35) {
              uint64_t v279 = v265;
            }
            else {
              uint64_t v279 = 0;
            }
            uint64_t v32 = (int8x16_t *)(v277 + 16 * v279);
            v20 += 16 * v279 + 16 * v28;
            int v268 = (unsigned int *)v19;
            uint64_t v766 = v32;
          }
          else
          {
            v32 += v28;
            v268 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      else
      {
        uint64_t v681 = -(uint64_t)v30;
        uint64_t v682 = -(v28 * v31);
        do
        {
          int v683 = v18;
          do
          {
            if (*v24) {
              *int8x16_t v22 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), (float)*v24 * 0.0039216), (float32x4_t)vrev32q_s8(*v22)));
            }
            v24 += v263;
            int8x16_t v684 = &v32[v263];
            if ((unint64_t)v684 >= v20) {
              uint64_t v685 = v681;
            }
            else {
              uint64_t v685 = 0;
            }
            uint64_t v32 = &v684[v685];
            v22 += v263;
            --v683;
          }
          while (v683);
          v24 += v40;
          v22 += v41;
          float32x4_t v686 = v766;
          unint64_t v687 = (unint64_t)&v766[v28];
          if (v687 >= v35) {
            uint64_t v688 = v682;
          }
          else {
            uint64_t v688 = 0;
          }
          float32x4_t v689 = (int8x16_t *)(v687 + 16 * v688);
          uint64_t v690 = v20 + 16 * v688 + 16 * v28;
          if (v35)
          {
            unint64_t v20 = v690;
            float32x4_t v686 = v689;
          }
          uint64_t v766 = v686;
          if (v35) {
            uint64_t v32 = v689;
          }
          else {
            v32 += v28;
          }
          LODWORD(v17) = v17 - 1;
        }
        while (v17);
      }
      return;
    case 13:
      uint64_t v280 = v34;
      uint64_t v281 = v31;
      uint64_t v282 = -(v28 * v31);
      uint64_t v283 = -(uint64_t)(v29 * v281);
      uint64_t v284 = 16 * v34;
      uint64_t v285 = -(uint64_t)v30;
      a4.i32[0] = 1.0;
      unsigned int v286 = (unsigned int *)v19;
      while (1)
      {
        int v287 = v18;
        do
        {
          if (*v24)
          {
            float v288 = v767 ? COERCE_FLOAT(bswap32(*v286)) : 1.0;
            float v289 = (float)*v24 * 0.0039216;
            a5.f32[0] = v289 * v288;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v290 = (float32x4_t)vrev32q_s8(*v32);
              float32x4_t v291 = vmulq_n_f32(v290, v289);
              if (v768)
              {
                v290.i32[0] = bswap32(*v15);
                if (v290.f32[0] <= 0.0) {
                  goto LABEL_337;
                }
              }
              else
              {
                v290.i32[0] = 1.0;
              }
              float32x4_t v292 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v290.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              float32x4_t v293 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v291);
              float32x4_t v294 = vmulq_f32(v292, v293);
              float32x4_t v295 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v294, v292, 1.0 - a5.f32[0]), (int8x16_t)v294);
              a5.f32[0] = (float)(v290.f32[0] + a5.f32[0]) - (float)(v290.f32[0] * a5.f32[0]);
              float32x4_t v291 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v290, a4)), 0), (int8x16_t)vmlaq_n_f32(v295, v293, 1.0 - v290.f32[0]), (int8x16_t)v295));
              if (v768)
              {
LABEL_337:
                unsigned int v296 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v291);
                *int8x16_t v22 = (int8x16_t)a5;
                unsigned int *v15 = v296;
                goto LABEL_339;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v291);
              *int8x16_t v22 = (int8x16_t)a5;
            }
          }
LABEL_339:
          v24 += v280;
          int v297 = &v32[v280];
          float32x4_t v298 = &v286[v767];
          if ((unint64_t)v297 >= v20) {
            uint64_t v299 = v285;
          }
          else {
            uint64_t v299 = 0;
          }
          unsigned int v286 = &v298[v299];
          uint64_t v32 = &v297[v299];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v284);
          --v287;
        }
        while (v287);
        if (v35)
        {
          unint64_t v300 = (unint64_t)&v766[v28];
          if (v300 >= v35) {
            uint64_t v301 = v283;
          }
          else {
            uint64_t v301 = 0;
          }
          v19 += 4 * v29 + 4 * v301;
          if (v300 >= v35) {
            uint64_t v302 = v282;
          }
          else {
            uint64_t v302 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v300 + 16 * v302);
          v20 += 16 * v302 + 16 * v28;
          unsigned int v286 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v286 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!v17) {
          return;
        }
      }
    case 14:
      uint64_t v303 = v34;
      uint64_t v304 = v31;
      uint64_t v305 = -(v28 * v31);
      uint64_t v306 = -(uint64_t)(v29 * v304);
      uint64_t v307 = 16 * v34;
      uint64_t v308 = -(uint64_t)v30;
      __asm { FMOV            V1.4S, #1.0 }
      float v314 = (unsigned int *)v19;
      while (1)
      {
        int v315 = v18;
        do
        {
          if (*v24)
          {
            float v316 = v767 ? COERCE_FLOAT(bswap32(*v314)) : 1.0;
            float v317 = (float)*v24 * 0.0039216;
            a5.f32[0] = v317 * v316;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v318 = (float32x4_t)vrev32q_s8(*v32);
              float32x4_t v319 = vmulq_n_f32(v318, v317);
              if (v768)
              {
                v318.i32[0] = bswap32(*v15);
                if (v318.f32[0] <= 0.0) {
                  goto LABEL_366;
                }
              }
              else
              {
                v318.i32[0] = 1.0;
              }
              float32x4_t v320 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v318.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              float32x4_t v321 = vmlaq_f32(v320, vsubq_f32(_Q1, v320), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v319));
              a5.f32[0] = (float)(a5.f32[0] + v318.f32[0]) - (float)(v318.f32[0] * a5.f32[0]);
              float32x4_t v319 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v321);
              if (v768)
              {
LABEL_366:
                unsigned int v322 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v319);
                *int8x16_t v22 = (int8x16_t)a5;
                unsigned int *v15 = v322;
                goto LABEL_368;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v319);
              *int8x16_t v22 = (int8x16_t)a5;
            }
          }
LABEL_368:
          v24 += v303;
          unint64_t v323 = &v32[v303];
          unsigned int v324 = &v314[v767];
          if ((unint64_t)v323 >= v20) {
            uint64_t v325 = v308;
          }
          else {
            uint64_t v325 = 0;
          }
          float v314 = &v324[v325];
          uint64_t v32 = &v323[v325];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v307);
          --v315;
        }
        while (v315);
        if (v35)
        {
          unint64_t v326 = (unint64_t)&v766[v28];
          if (v326 >= v35) {
            uint64_t v327 = v306;
          }
          else {
            uint64_t v327 = 0;
          }
          v19 += 4 * v29 + 4 * v327;
          if (v326 >= v35) {
            uint64_t v328 = v305;
          }
          else {
            uint64_t v328 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v326 + 16 * v328);
          v20 += 16 * v328 + 16 * v28;
          float v314 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v314 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!v17) {
          return;
        }
      }
    case 15:
      uint64_t v329 = v34;
      uint64_t v706 = -(uint64_t)(v29 * v31);
      uint64_t v715 = -(v28 * v31);
      uint64_t v330 = 16 * v34;
      uint64_t v331 = -(uint64_t)v30;
      uint64_t v332 = (unsigned int *)v19;
      uint64_t v724 = v331;
      uint64_t v733 = v330;
      while (1)
      {
        uint64_t v747 = v19;
        int v756 = v17;
        int v333 = v18;
        int v334 = v767;
        int v335 = v768;
        do
        {
          if (*v24)
          {
            float v336 = v334 ? COERCE_FLOAT(bswap32(*v332)) : 1.0;
            float v337 = (float)*v24 * 0.0039216;
            a8.f32[0] = v337 * v336;
            if ((float)(v337 * v336) > 0.0)
            {
              int8x16_t v338 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v337);
              if (v335)
              {
                float v339 = COERCE_FLOAT(bswap32(*v15));
                if (v339 <= 0.0) {
                  goto LABEL_396;
                }
              }
              else
              {
                float v339 = 1.0;
              }
              int8x16_t v340 = vrev32q_s8(*v22);
              PDAoverlayPDA((float *)v769.i32, *(float *)v340.i32, *(float *)&v340.i32[1], *(float *)&v340.i32[2], *(float *)&v340.i32[3], v339, *(double *)a8.i64, *(double *)v338.i64, a10, *(float *)v338.i32, *(float *)&v338.i32[1], *(float *)&v338.i32[2], *(float *)&v338.i32[3], a8.f32[0]);
              int v335 = v768;
              int8x16_t v338 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                int v334 = v767;
                uint64_t v331 = v724;
                uint64_t v330 = v733;
LABEL_396:
                *int8x16_t v22 = vrev32q_s8(v338);
                unsigned int *v15 = bswap32(a8.u32[0]);
                goto LABEL_398;
              }
              *int8x16_t v22 = vrev32q_s8(v769);
              int v334 = v767;
              uint64_t v331 = v724;
              uint64_t v330 = v733;
            }
          }
LABEL_398:
          v24 += v329;
          int8x16_t v341 = &v32[v329];
          if ((unint64_t)v341 >= v20) {
            uint64_t v342 = v331;
          }
          else {
            uint64_t v342 = 0;
          }
          v332 += v767 + v342;
          uint64_t v32 = &v341[v342];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v330);
          --v333;
        }
        while (v333);
        if (v746)
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          int v343 = &v766[v744];
          int v344 = v756;
          uint64_t v345 = v706;
          if ((unint64_t)v343 < v746) {
            uint64_t v345 = 0;
          }
          uint64_t v19 = v747 + 4 * v29 + 4 * v345;
          uint64_t v346 = v715;
          if ((unint64_t)v343 < v746) {
            uint64_t v346 = 0;
          }
          uint64_t v32 = &v343[v346];
          v20 += 16 * v346 + 16 * v744;
          uint64_t v332 = (unsigned int *)(v747 + 4 * v29 + 4 * v345);
          uint64_t v766 = v32;
          uint64_t v348 = v742;
          uint64_t v347 = v743;
        }
        else
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          v32 += v744;
          uint64_t v348 = v742;
          v332 += v29;
          uint64_t v19 = v747;
          int v344 = v756;
          uint64_t v347 = v743;
        }
        v24 += v347;
        v22 += v348;
        v15 += v765;
        LODWORD(v17) = v344 - 1;
        if (!v17) {
          return;
        }
      }
    case 16:
      uint64_t v349 = v34;
      uint64_t v350 = v31;
      uint64_t v351 = -(v28 * v31);
      uint64_t v352 = -(uint64_t)(v29 * v350);
      uint64_t v353 = 16 * v34;
      uint64_t v354 = -(uint64_t)v30;
      a4.i32[0] = 1.0;
      float32x4_t v355 = (unsigned int *)v19;
      while (1)
      {
        int v356 = v18;
        do
        {
          if (*v24)
          {
            float v357 = v767 ? COERCE_FLOAT(bswap32(*v355)) : 1.0;
            float v358 = (float)*v24 * 0.0039216;
            a5.f32[0] = v358 * v357;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v359 = vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v358);
              if (v768)
              {
                a6.i32[0] = bswap32(*v15);
                if (a6.f32[0] <= 0.0) {
                  goto LABEL_423;
                }
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              float32x4_t v360 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              float32x4_t v361 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v359);
              float32x4_t v362 = vmulq_n_f32(v360, a5.f32[0]);
              float32x4_t v363 = vmulq_n_f32(v361, a6.f32[0]);
              float32x4_t v364 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v362, v363), (int8x16_t)v363, (int8x16_t)v362);
              float32x4_t v365 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v364, v360, 1.0 - a5.f32[0]), (int8x16_t)v364);
              float32x4_t v366 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32(v365, v361, 1.0 - a6.f32[0]), (int8x16_t)v365);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              float32x4_t v359 = vsubq_f32(a6, v366);
              if (v768)
              {
LABEL_423:
                unsigned int v367 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v359);
                *int8x16_t v22 = (int8x16_t)a5;
                unsigned int *v15 = v367;
                goto LABEL_425;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v359);
              *int8x16_t v22 = (int8x16_t)a5;
            }
          }
LABEL_425:
          v24 += v349;
          int v368 = &v32[v349];
          int8x16_t v369 = &v355[v767];
          if ((unint64_t)v368 >= v20) {
            uint64_t v370 = v354;
          }
          else {
            uint64_t v370 = 0;
          }
          float32x4_t v355 = &v369[v370];
          uint64_t v32 = &v368[v370];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v353);
          --v356;
        }
        while (v356);
        if (v35)
        {
          unint64_t v371 = (unint64_t)&v766[v28];
          if (v371 >= v35) {
            uint64_t v372 = v352;
          }
          else {
            uint64_t v372 = 0;
          }
          v19 += 4 * v29 + 4 * v372;
          if (v371 >= v35) {
            uint64_t v373 = v351;
          }
          else {
            uint64_t v373 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v371 + 16 * v373);
          v20 += 16 * v373 + 16 * v28;
          float32x4_t v355 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v355 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!v17) {
          return;
        }
      }
    case 17:
      uint64_t v374 = v34;
      uint64_t v375 = v31;
      uint64_t v376 = -(v28 * v31);
      uint64_t v377 = -(uint64_t)(v29 * v375);
      uint64_t v378 = 16 * v34;
      uint64_t v379 = -(uint64_t)v30;
      a4.i32[0] = 1.0;
      int v380 = (unsigned int *)v19;
      while (1)
      {
        int v381 = v18;
        do
        {
          if (*v24)
          {
            float v382 = v767 ? COERCE_FLOAT(bswap32(*v380)) : 1.0;
            float v383 = (float)*v24 * 0.0039216;
            a5.f32[0] = v383 * v382;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v384 = vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v383);
              if (v768)
              {
                a6.i32[0] = bswap32(*v15);
                if (a6.f32[0] <= 0.0) {
                  goto LABEL_452;
                }
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              float32x4_t v385 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              float32x4_t v386 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v384);
              float32x4_t v387 = vmulq_n_f32(v385, a5.f32[0]);
              float32x4_t v388 = vmulq_n_f32(v386, a6.f32[0]);
              float32x4_t v389 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v388, v387), (int8x16_t)v388, (int8x16_t)v387);
              float32x4_t v390 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32(v389, v385, 1.0 - a5.f32[0]), (int8x16_t)v389);
              float32x4_t v391 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32(v390, v386, 1.0 - a6.f32[0]), (int8x16_t)v390);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              float32x4_t v384 = vsubq_f32(a6, v391);
              if (v768)
              {
LABEL_452:
                unsigned int v392 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v384);
                *int8x16_t v22 = (int8x16_t)a5;
                unsigned int *v15 = v392;
                goto LABEL_454;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v384);
              *int8x16_t v22 = (int8x16_t)a5;
            }
          }
LABEL_454:
          v24 += v374;
          uint64_t v393 = &v32[v374];
          uint64_t v394 = &v380[v767];
          if ((unint64_t)v393 >= v20) {
            uint64_t v395 = v379;
          }
          else {
            uint64_t v395 = 0;
          }
          int v380 = &v394[v395];
          uint64_t v32 = &v393[v395];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v378);
          --v381;
        }
        while (v381);
        if (v35)
        {
          unint64_t v396 = (unint64_t)&v766[v28];
          if (v396 >= v35) {
            uint64_t v397 = v377;
          }
          else {
            uint64_t v397 = 0;
          }
          v19 += 4 * v29 + 4 * v397;
          if (v396 >= v35) {
            uint64_t v398 = v376;
          }
          else {
            uint64_t v398 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v396 + 16 * v398);
          v20 += 16 * v398 + 16 * v28;
          int v380 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v380 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!v17) {
          return;
        }
      }
    case 18:
      uint64_t v399 = v34;
      uint64_t v707 = -(uint64_t)(v29 * v31);
      uint64_t v716 = -(v28 * v31);
      uint64_t v400 = 16 * v34;
      uint64_t v401 = -(uint64_t)v30;
      unsigned int v402 = (unsigned int *)v19;
      uint64_t v725 = v401;
      uint64_t v734 = v400;
      while (1)
      {
        uint64_t v748 = v19;
        int v757 = v17;
        int v403 = v18;
        int v404 = v767;
        int v405 = v768;
        do
        {
          if (*v24)
          {
            float v406 = v404 ? COERCE_FLOAT(bswap32(*v402)) : 1.0;
            float v407 = (float)*v24 * 0.0039216;
            a8.f32[0] = v407 * v406;
            if ((float)(v407 * v406) > 0.0)
            {
              int8x16_t v408 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v407);
              if (v405)
              {
                float v409 = COERCE_FLOAT(bswap32(*v15));
                if (v409 <= 0.0) {
                  goto LABEL_482;
                }
              }
              else
              {
                float v409 = 1.0;
              }
              int8x16_t v410 = vrev32q_s8(*v22);
              PDAcolordodgePDA((float *)v769.i32, *(float *)v410.i32, *(float *)&v410.i32[1], *(float *)&v410.i32[2], *(float *)&v410.i32[3], v409, *(double *)a8.i64, *(double *)v408.i64, a10, *(float *)v408.i32, *(float *)&v408.i32[1], *(float *)&v408.i32[2], *(float *)&v408.i32[3], a8.f32[0]);
              int v405 = v768;
              int8x16_t v408 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                int v404 = v767;
                uint64_t v401 = v725;
                uint64_t v400 = v734;
LABEL_482:
                *int8x16_t v22 = vrev32q_s8(v408);
                unsigned int *v15 = bswap32(a8.u32[0]);
                goto LABEL_484;
              }
              *int8x16_t v22 = vrev32q_s8(v769);
              int v404 = v767;
              uint64_t v401 = v725;
              uint64_t v400 = v734;
            }
          }
LABEL_484:
          v24 += v399;
          uint64_t v411 = &v32[v399];
          if ((unint64_t)v411 >= v20) {
            uint64_t v412 = v401;
          }
          else {
            uint64_t v412 = 0;
          }
          v402 += v767 + v412;
          uint64_t v32 = &v411[v412];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v400);
          --v403;
        }
        while (v403);
        if (v746)
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          uint64_t v413 = &v766[v744];
          int v414 = v757;
          uint64_t v415 = v707;
          if ((unint64_t)v413 < v746) {
            uint64_t v415 = 0;
          }
          uint64_t v19 = v748 + 4 * v29 + 4 * v415;
          uint64_t v416 = v716;
          if ((unint64_t)v413 < v746) {
            uint64_t v416 = 0;
          }
          uint64_t v32 = &v413[v416];
          v20 += 16 * v416 + 16 * v744;
          unsigned int v402 = (unsigned int *)(v748 + 4 * v29 + 4 * v415);
          uint64_t v766 = v32;
          uint64_t v418 = v742;
          uint64_t v417 = v743;
        }
        else
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          v32 += v744;
          uint64_t v418 = v742;
          v402 += v29;
          uint64_t v19 = v748;
          int v414 = v757;
          uint64_t v417 = v743;
        }
        v24 += v417;
        v22 += v418;
        v15 += v765;
        LODWORD(v17) = v414 - 1;
        if (!v17) {
          return;
        }
      }
    case 19:
      uint64_t v419 = v34;
      uint64_t v708 = -(uint64_t)(v29 * v31);
      uint64_t v717 = -(v28 * v31);
      uint64_t v420 = 16 * v34;
      uint64_t v421 = -(uint64_t)v30;
      unsigned int v422 = (unsigned int *)v19;
      uint64_t v726 = v421;
      uint64_t v735 = v420;
      while (1)
      {
        uint64_t v749 = v19;
        int v758 = v17;
        int v423 = v18;
        int v424 = v767;
        int v425 = v768;
        do
        {
          if (*v24)
          {
            float v426 = v424 ? COERCE_FLOAT(bswap32(*v422)) : 1.0;
            float v427 = (float)*v24 * 0.0039216;
            a8.f32[0] = v427 * v426;
            if ((float)(v427 * v426) > 0.0)
            {
              int8x16_t v428 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v427);
              if (v425)
              {
                float v429 = COERCE_FLOAT(bswap32(*v15));
                if (v429 <= 0.0) {
                  goto LABEL_510;
                }
              }
              else
              {
                float v429 = 1.0;
              }
              int8x16_t v430 = vrev32q_s8(*v22);
              PDAcolorburnPDA((float *)v769.i32, *(float *)v430.i32, *(float *)&v430.i32[1], *(float *)&v430.i32[2], *(float *)&v430.i32[3], v429, *(double *)a8.i64, *(double *)v428.i64, a10, *(float *)v428.i32, *(float *)&v428.i32[1], *(float *)&v428.i32[2], *(float *)&v428.i32[3], a8.f32[0]);
              int v425 = v768;
              int8x16_t v428 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                int v424 = v767;
                uint64_t v421 = v726;
                uint64_t v420 = v735;
LABEL_510:
                *int8x16_t v22 = vrev32q_s8(v428);
                unsigned int *v15 = bswap32(a8.u32[0]);
                goto LABEL_512;
              }
              *int8x16_t v22 = vrev32q_s8(v769);
              int v424 = v767;
              uint64_t v421 = v726;
              uint64_t v420 = v735;
            }
          }
LABEL_512:
          v24 += v419;
          int v431 = &v32[v419];
          if ((unint64_t)v431 >= v20) {
            uint64_t v432 = v421;
          }
          else {
            uint64_t v432 = 0;
          }
          v422 += v767 + v432;
          uint64_t v32 = &v431[v432];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v420);
          --v423;
        }
        while (v423);
        if (v746)
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          unint64_t v433 = &v766[v744];
          int v434 = v758;
          uint64_t v435 = v708;
          if ((unint64_t)v433 < v746) {
            uint64_t v435 = 0;
          }
          uint64_t v19 = v749 + 4 * v29 + 4 * v435;
          uint64_t v436 = v717;
          if ((unint64_t)v433 < v746) {
            uint64_t v436 = 0;
          }
          uint64_t v32 = &v433[v436];
          v20 += 16 * v436 + 16 * v744;
          unsigned int v422 = (unsigned int *)(v749 + 4 * v29 + 4 * v435);
          uint64_t v766 = v32;
          uint64_t v438 = v742;
          uint64_t v437 = v743;
        }
        else
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          v32 += v744;
          uint64_t v438 = v742;
          v422 += v29;
          uint64_t v19 = v749;
          int v434 = v758;
          uint64_t v437 = v743;
        }
        v24 += v437;
        v22 += v438;
        v15 += v765;
        LODWORD(v17) = v434 - 1;
        if (!v17) {
          return;
        }
      }
    case 20:
      uint64_t v439 = v34;
      uint64_t v709 = -(uint64_t)(v29 * v31);
      uint64_t v718 = -(v28 * v31);
      uint64_t v440 = 16 * v34;
      uint64_t v441 = -(uint64_t)v30;
      uint64_t v442 = (unsigned int *)v19;
      uint64_t v727 = v441;
      uint64_t v736 = v440;
      while (1)
      {
        uint64_t v750 = v19;
        int v759 = v17;
        int v443 = v18;
        int v444 = v767;
        int v445 = v768;
        do
        {
          if (*v24)
          {
            float v446 = v444 ? COERCE_FLOAT(bswap32(*v442)) : 1.0;
            float v447 = (float)*v24 * 0.0039216;
            a8.f32[0] = v447 * v446;
            if ((float)(v447 * v446) > 0.0)
            {
              int8x16_t v448 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v447);
              if (v445)
              {
                a7.i32[0] = bswap32(*v15);
                if (a7.f32[0] <= 0.0) {
                  goto LABEL_538;
                }
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              int8x16_t v449 = vrev32q_s8(*v22);
              PDAsoftlightPDA((float32x4_t *)&v769, *(float32x2_t *)v449.i8, *(float32_t *)&v449.i32[1], *(float *)&v449.i32[2], *(float *)&v449.i32[3], *(double *)a7.i64, *(int32x2_t *)a8.f32, *(double *)v448.i64, a10, a2, v17, v18, v28, v40, v41, v35, *(float32x2_t *)v448.i8, *(float *)&v448.i32[2], *(float *)&v448.i32[3],
                a8.f32[0]);
              int v445 = v768;
              int8x16_t v448 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                int v444 = v767;
                uint64_t v441 = v727;
                uint64_t v440 = v736;
LABEL_538:
                *int8x16_t v22 = vrev32q_s8(v448);
                unsigned int *v15 = bswap32(a8.u32[0]);
                goto LABEL_540;
              }
              *int8x16_t v22 = vrev32q_s8(v769);
              int v444 = v767;
              uint64_t v441 = v727;
              uint64_t v440 = v736;
            }
          }
LABEL_540:
          v24 += v439;
          unint64_t v450 = &v32[v439];
          if ((unint64_t)v450 >= v20) {
            uint64_t v451 = v441;
          }
          else {
            uint64_t v451 = 0;
          }
          v442 += v767 + v451;
          uint64_t v32 = &v450[v451];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v440);
          --v443;
        }
        while (v443);
        if (v746)
        {
          uint64_t v18 = v745;
          uint64_t v452 = &v766[v744];
          int v453 = v759;
          uint64_t v454 = v709;
          if ((unint64_t)v452 < v746) {
            uint64_t v454 = 0;
          }
          uint64_t v19 = v750 + 4 * v29 + 4 * v454;
          uint64_t v455 = v718;
          if ((unint64_t)v452 < v746) {
            uint64_t v455 = 0;
          }
          uint64_t v32 = &v452[v455];
          v20 += 16 * v455 + 16 * v744;
          uint64_t v442 = (unsigned int *)(v750 + 4 * v29 + 4 * v454);
          uint64_t v766 = v32;
          uint64_t v457 = v742;
          uint64_t v456 = v743;
        }
        else
        {
          uint64_t v18 = v745;
          v32 += v744;
          uint64_t v457 = v742;
          v442 += v29;
          uint64_t v19 = v750;
          int v453 = v759;
          uint64_t v456 = v743;
        }
        v24 += v456;
        v22 += v457;
        v15 += v765;
        uint64_t v17 = (v453 - 1);
        if (!v17) {
          return;
        }
      }
    case 21:
      uint64_t v458 = v34;
      uint64_t v710 = -(uint64_t)(v29 * v31);
      uint64_t v719 = -(v28 * v31);
      uint64_t v459 = 16 * v34;
      uint64_t v460 = -(uint64_t)v30;
      uint64_t v461 = (unsigned int *)v19;
      uint64_t v728 = v460;
      uint64_t v737 = v459;
      while (1)
      {
        uint64_t v751 = v19;
        int v760 = v17;
        int v462 = v18;
        int v463 = v767;
        int v464 = v768;
        do
        {
          if (*v24)
          {
            float v465 = v463 ? COERCE_FLOAT(bswap32(*v461)) : 1.0;
            float v466 = (float)*v24 * 0.0039216;
            a8.f32[0] = v466 * v465;
            if ((float)(v466 * v465) > 0.0)
            {
              int8x16_t v467 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v466);
              if (v464)
              {
                float v468 = COERCE_FLOAT(bswap32(*v15));
                if (v468 <= 0.0) {
                  goto LABEL_566;
                }
              }
              else
              {
                float v468 = 1.0;
              }
              int8x16_t v469 = vrev32q_s8(*v22);
              PDAhardlightPDA((float *)v769.i32, *(float *)v469.i32, *(float *)&v469.i32[1], *(float *)&v469.i32[2], *(float *)&v469.i32[3], v468, *(double *)a8.i64, *(double *)v467.i64, a10, *(float *)v467.i32, *(float *)&v467.i32[1], *(float *)&v467.i32[2], *(float *)&v467.i32[3], a8.f32[0]);
              int v464 = v768;
              int8x16_t v467 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                int v463 = v767;
                uint64_t v460 = v728;
                uint64_t v459 = v737;
LABEL_566:
                *int8x16_t v22 = vrev32q_s8(v467);
                unsigned int *v15 = bswap32(a8.u32[0]);
                goto LABEL_568;
              }
              *int8x16_t v22 = vrev32q_s8(v769);
              int v463 = v767;
              uint64_t v460 = v728;
              uint64_t v459 = v737;
            }
          }
LABEL_568:
          v24 += v458;
          int v470 = &v32[v458];
          if ((unint64_t)v470 >= v20) {
            uint64_t v471 = v460;
          }
          else {
            uint64_t v471 = 0;
          }
          v461 += v767 + v471;
          uint64_t v32 = &v470[v471];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v459);
          --v462;
        }
        while (v462);
        if (v746)
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          float v472 = &v766[v744];
          int v473 = v760;
          uint64_t v474 = v710;
          if ((unint64_t)v472 < v746) {
            uint64_t v474 = 0;
          }
          uint64_t v19 = v751 + 4 * v29 + 4 * v474;
          uint64_t v475 = v719;
          if ((unint64_t)v472 < v746) {
            uint64_t v475 = 0;
          }
          uint64_t v32 = &v472[v475];
          v20 += 16 * v475 + 16 * v744;
          uint64_t v461 = (unsigned int *)(v751 + 4 * v29 + 4 * v474);
          uint64_t v766 = v32;
          uint64_t v477 = v742;
          uint64_t v476 = v743;
        }
        else
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          v32 += v744;
          uint64_t v477 = v742;
          v461 += v29;
          uint64_t v19 = v751;
          int v473 = v760;
          uint64_t v476 = v743;
        }
        v24 += v476;
        v22 += v477;
        v15 += v765;
        LODWORD(v17) = v473 - 1;
        if (!v17) {
          return;
        }
      }
    case 22:
      uint64_t v478 = v34;
      uint64_t v479 = v31;
      uint64_t v480 = -(v28 * v31);
      uint64_t v481 = -(uint64_t)(v29 * v479);
      uint64_t v482 = 16 * v34;
      uint64_t v483 = -(uint64_t)v30;
      uint64_t v484 = (unsigned int *)v19;
      while (1)
      {
        int v485 = v18;
        do
        {
          if (*v24)
          {
            float v486 = v767 ? COERCE_FLOAT(bswap32(*v484)) : 1.0;
            float v487 = (float)*v24 * 0.0039216;
            a4.f32[0] = v487 * v486;
            if (a4.f32[0] > 0.0)
            {
              float32x4_t v488 = (float32x4_t)vrev32q_s8(*v32);
              float32x4_t v489 = vmulq_n_f32(v488, v487);
              if (v768)
              {
                v488.i32[0] = bswap32(*v15);
                if (v488.f32[0] <= 0.0) {
                  goto LABEL_594;
                }
              }
              else
              {
                v488.i32[0] = 1.0;
              }
              int8x16_t v490 = *v22;
              *(float *)v490.i32 = (float)(v488.f32[0] + a4.f32[0]) - (float)(v488.f32[0] * a4.f32[0]);
              float32x4_t v491 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v488.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              float32x4_t v492 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), v489);
              float32x4_t v493 = vaddq_f32(v491, v492);
              float32x4_t v494 = vmulq_n_f32(v491, a4.f32[0]);
              float32x4_t v495 = vmulq_n_f32(v492, v488.f32[0]);
              float32x4_t v496 = vsubq_f32(v493, v494);
              float32x4_t v497 = vsubq_f32(v494, v495);
              float32x4_t v489 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v490.i8, 0), vaddq_f32(vsubq_f32(v496, v495), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v497), (int8x16_t)vnegq_f32(v497), (int8x16_t)v497)));
              if (v768)
              {
                a4.i32[0] = v490.i32[0];
LABEL_594:
                unsigned int v498 = bswap32(a4.u32[0]);
                a4 = (float32x4_t)vrev32q_s8((int8x16_t)v489);
                *int8x16_t v22 = (int8x16_t)a4;
                unsigned int *v15 = v498;
                goto LABEL_596;
              }
              a4 = (float32x4_t)vrev32q_s8((int8x16_t)v489);
              *int8x16_t v22 = (int8x16_t)a4;
            }
          }
LABEL_596:
          v24 += v478;
          uint64_t v499 = &v32[v478];
          unint64_t v500 = &v484[v767];
          if ((unint64_t)v499 >= v20) {
            uint64_t v501 = v483;
          }
          else {
            uint64_t v501 = 0;
          }
          uint64_t v484 = &v500[v501];
          uint64_t v32 = &v499[v501];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v482);
          --v485;
        }
        while (v485);
        if (v35)
        {
          unint64_t v502 = (unint64_t)&v766[v28];
          if (v502 >= v35) {
            uint64_t v503 = v481;
          }
          else {
            uint64_t v503 = 0;
          }
          v19 += 4 * v29 + 4 * v503;
          if (v502 >= v35) {
            uint64_t v504 = v480;
          }
          else {
            uint64_t v504 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v502 + 16 * v504);
          v20 += 16 * v504 + 16 * v28;
          uint64_t v484 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v484 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!v17) {
          return;
        }
      }
    case 23:
      uint64_t v505 = v34;
      uint64_t v506 = v31;
      uint64_t v507 = -(v28 * v31);
      uint64_t v508 = -(uint64_t)(v29 * v506);
      uint64_t v509 = 16 * v34;
      uint64_t v510 = -(uint64_t)v30;
      v511.i64[0] = 0xC0000000C0000000;
      v511.i64[1] = 0xC0000000C0000000;
      uint64_t v512 = (unsigned int *)v19;
      while (1)
      {
        int v513 = v18;
        do
        {
          if (*v24)
          {
            float v514 = v767 ? COERCE_FLOAT(bswap32(*v512)) : 1.0;
            float v515 = (float)*v24 * 0.0039216;
            a5.f32[0] = v515 * v514;
            if (a5.f32[0] > 0.0)
            {
              float32x4_t v516 = vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v515);
              if (v768)
              {
                a8.i32[0] = bswap32(*v15);
                if (a8.f32[0] <= 0.0) {
                  goto LABEL_624;
                }
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              int8x16_t v517 = *v22;
              *(float *)v517.i32 = (float)(a8.f32[0] + a5.f32[0]) - (float)(a8.f32[0] * a5.f32[0]);
              a8 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              float32x4_t v518 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v516);
              float32x4_t v516 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v517.i8, 0), vmlaq_f32(vaddq_f32(a8, v518), v511, vmulq_f32(v518, a8)));
              if (v768)
              {
                a5.i32[0] = v517.i32[0];
LABEL_624:
                unsigned int v519 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8((int8x16_t)v516);
                *int8x16_t v22 = (int8x16_t)a5;
                unsigned int *v15 = v519;
                goto LABEL_626;
              }
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)v516);
              *int8x16_t v22 = (int8x16_t)a5;
            }
          }
LABEL_626:
          v24 += v505;
          int v520 = &v32[v505];
          int v521 = &v512[v767];
          if ((unint64_t)v520 >= v20) {
            uint64_t v522 = v510;
          }
          else {
            uint64_t v522 = 0;
          }
          uint64_t v512 = &v521[v522];
          uint64_t v32 = &v520[v522];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v509);
          --v513;
        }
        while (v513);
        if (v35)
        {
          unint64_t v523 = (unint64_t)&v766[v28];
          if (v523 >= v35) {
            uint64_t v524 = v508;
          }
          else {
            uint64_t v524 = 0;
          }
          v19 += 4 * v29 + 4 * v524;
          if (v523 >= v35) {
            uint64_t v525 = v507;
          }
          else {
            uint64_t v525 = 0;
          }
          uint64_t v32 = (int8x16_t *)(v523 + 16 * v525);
          v20 += 16 * v525 + 16 * v28;
          uint64_t v512 = (unsigned int *)v19;
          uint64_t v766 = v32;
        }
        else
        {
          v32 += v28;
          v512 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!v17) {
          return;
        }
      }
    case 24:
      uint64_t v526 = v34;
      uint64_t v711 = -(uint64_t)(v29 * v31);
      uint64_t v720 = -(v28 * v31);
      uint64_t v527 = 16 * v34;
      uint64_t v528 = -(uint64_t)v30;
      int v529 = (unsigned int *)v19;
      uint64_t v729 = v528;
      uint64_t v738 = v527;
      while (1)
      {
        uint64_t v752 = v19;
        int v761 = v17;
        int v530 = v18;
        int v531 = v767;
        int v532 = v768;
        do
        {
          if (*v24)
          {
            float v533 = v531 ? COERCE_FLOAT(bswap32(*v529)) : 1.0;
            float v534 = (float)*v24 * 0.0039216;
            a8.f32[0] = v534 * v533;
            if ((float)(v534 * v533) > 0.0)
            {
              int8x16_t v535 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v534);
              if (v532)
              {
                float v536 = COERCE_FLOAT(bswap32(*v15));
                if (v536 <= 0.0) {
                  goto LABEL_654;
                }
              }
              else
              {
                float v536 = 1.0;
              }
              int8x16_t v537 = vrev32q_s8(*v22);
              PDAhuePDA((float *)v769.i32, *(float *)v537.i32, *(float *)&v537.i32[1], *(float *)&v537.i32[2], *(float *)&v537.i32[3], v536, *(double *)a8.i64, *(double *)v535.i64, a10, *(float *)v535.i32, *(float *)&v535.i32[1], *(float *)&v535.i32[2], *(float *)&v535.i32[3], a8.f32[0]);
              int v532 = v768;
              int8x16_t v535 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                int v531 = v767;
                uint64_t v528 = v729;
                uint64_t v527 = v738;
LABEL_654:
                *int8x16_t v22 = vrev32q_s8(v535);
                unsigned int *v15 = bswap32(a8.u32[0]);
                goto LABEL_656;
              }
              *int8x16_t v22 = vrev32q_s8(v769);
              int v531 = v767;
              uint64_t v528 = v729;
              uint64_t v527 = v738;
            }
          }
LABEL_656:
          v24 += v526;
          float32x4_t v538 = &v32[v526];
          if ((unint64_t)v538 >= v20) {
            uint64_t v539 = v528;
          }
          else {
            uint64_t v539 = 0;
          }
          v529 += v767 + v539;
          uint64_t v32 = &v538[v539];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v527);
          --v530;
        }
        while (v530);
        if (v746)
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          unint64_t v540 = &v766[v744];
          int v541 = v761;
          uint64_t v542 = v711;
          if ((unint64_t)v540 < v746) {
            uint64_t v542 = 0;
          }
          uint64_t v19 = v752 + 4 * v29 + 4 * v542;
          uint64_t v543 = v720;
          if ((unint64_t)v540 < v746) {
            uint64_t v543 = 0;
          }
          uint64_t v32 = &v540[v543];
          v20 += 16 * v543 + 16 * v744;
          int v529 = (unsigned int *)(v752 + 4 * v29 + 4 * v542);
          uint64_t v766 = v32;
          uint64_t v545 = v742;
          uint64_t v544 = v743;
        }
        else
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          v32 += v744;
          uint64_t v545 = v742;
          v529 += v29;
          uint64_t v19 = v752;
          int v541 = v761;
          uint64_t v544 = v743;
        }
        v24 += v544;
        v22 += v545;
        v15 += v765;
        LODWORD(v17) = v541 - 1;
        if (!v17) {
          return;
        }
      }
    case 25:
      uint64_t v546 = v34;
      uint64_t v712 = -(uint64_t)(v29 * v31);
      uint64_t v721 = -(v28 * v31);
      uint64_t v547 = 16 * v34;
      uint64_t v548 = -(uint64_t)v30;
      uint64_t v549 = (unsigned int *)v19;
      uint64_t v730 = v548;
      uint64_t v739 = v547;
      while (1)
      {
        uint64_t v753 = v19;
        int v762 = v17;
        int v550 = v18;
        int v551 = v767;
        int v552 = v768;
        do
        {
          if (*v24)
          {
            float v553 = v551 ? COERCE_FLOAT(bswap32(*v549)) : 1.0;
            float v554 = (float)*v24 * 0.0039216;
            a8.f32[0] = v554 * v553;
            if ((float)(v554 * v553) > 0.0)
            {
              int8x16_t v555 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v554);
              if (v552)
              {
                float v556 = COERCE_FLOAT(bswap32(*v15));
                if (v556 <= 0.0) {
                  goto LABEL_682;
                }
              }
              else
              {
                float v556 = 1.0;
              }
              int8x16_t v557 = vrev32q_s8(*v22);
              PDAsaturationPDA((float *)v769.i32, *(float *)v557.i32, *(float *)&v557.i32[1], *(float *)&v557.i32[2], *(float *)&v557.i32[3], v556, *(double *)a8.i64, *(double *)v555.i64, a10, *(float *)v555.i32, *(float *)&v555.i32[1], *(float *)&v555.i32[2], *(float *)&v555.i32[3], a8.f32[0]);
              int v552 = v768;
              int8x16_t v555 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                int v551 = v767;
                uint64_t v548 = v730;
                uint64_t v547 = v739;
LABEL_682:
                *int8x16_t v22 = vrev32q_s8(v555);
                unsigned int *v15 = bswap32(a8.u32[0]);
                goto LABEL_684;
              }
              *int8x16_t v22 = vrev32q_s8(v769);
              int v551 = v767;
              uint64_t v548 = v730;
              uint64_t v547 = v739;
            }
          }
LABEL_684:
          v24 += v546;
          unsigned int v558 = &v32[v546];
          if ((unint64_t)v558 >= v20) {
            uint64_t v559 = v548;
          }
          else {
            uint64_t v559 = 0;
          }
          v549 += v767 + v559;
          uint64_t v32 = &v558[v559];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v547);
          --v550;
        }
        while (v550);
        if (v746)
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          unsigned int v560 = &v766[v744];
          int v561 = v762;
          uint64_t v562 = v712;
          if ((unint64_t)v560 < v746) {
            uint64_t v562 = 0;
          }
          uint64_t v19 = v753 + 4 * v29 + 4 * v562;
          uint64_t v563 = v721;
          if ((unint64_t)v560 < v746) {
            uint64_t v563 = 0;
          }
          uint64_t v32 = &v560[v563];
          v20 += 16 * v563 + 16 * v744;
          uint64_t v549 = (unsigned int *)(v753 + 4 * v29 + 4 * v562);
          uint64_t v766 = v32;
          uint64_t v565 = v742;
          uint64_t v564 = v743;
        }
        else
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          v32 += v744;
          uint64_t v565 = v742;
          v549 += v29;
          uint64_t v19 = v753;
          int v561 = v762;
          uint64_t v564 = v743;
        }
        v24 += v564;
        v22 += v565;
        v15 += v765;
        LODWORD(v17) = v561 - 1;
        if (!v17) {
          return;
        }
      }
    case 26:
      uint64_t v566 = v34;
      uint64_t v713 = -(uint64_t)(v29 * v31);
      uint64_t v722 = -(v28 * v31);
      uint64_t v567 = 16 * v34;
      uint64_t v568 = -(uint64_t)v30;
      int v569 = (unsigned int *)v19;
      uint64_t v731 = v568;
      uint64_t v740 = v567;
      while (1)
      {
        uint64_t v754 = v19;
        int v763 = v17;
        int v570 = v18;
        int v571 = v767;
        int v572 = v768;
        do
        {
          if (*v24)
          {
            float v573 = v571 ? COERCE_FLOAT(bswap32(*v569)) : 1.0;
            float v574 = (float)*v24 * 0.0039216;
            float v575 = v574 * v573;
            if ((float)(v574 * v573) > 0.0)
            {
              int8x16_t v576 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v574);
              if (v572)
              {
                a8.i32[0] = bswap32(*v15);
                if (a8.f32[0] <= 0.0) {
                  goto LABEL_710;
                }
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              int8x16_t v705 = vrev32q_s8(*v22);
              PDAluminosityPDA((float *)v769.i32, *(float *)v576.i32, *(float *)&v576.i32[1], *(float *)&v576.i32[2], *(float *)&v576.i32[3], v575, *(double *)a8.i64, *(double *)v705.i64, a10, *(float *)v705.i32, *(float *)&v705.i32[1], *(float *)&v705.i32[2], *(float *)&v705.i32[3], a8.f32[0]);
              int v572 = v768;
              int8x16_t v576 = v769;
              if (v768)
              {
                float v575 = *(float *)&v770;
                int v571 = v767;
                uint64_t v568 = v731;
                uint64_t v567 = v740;
LABEL_710:
                *int8x16_t v22 = vrev32q_s8(v576);
                unsigned int *v15 = bswap32(LODWORD(v575));
                goto LABEL_712;
              }
              *int8x16_t v22 = vrev32q_s8(v769);
              int v571 = v767;
              uint64_t v568 = v731;
              uint64_t v567 = v740;
            }
          }
LABEL_712:
          v24 += v566;
          int v577 = &v32[v566];
          if ((unint64_t)v577 >= v20) {
            uint64_t v578 = v568;
          }
          else {
            uint64_t v578 = 0;
          }
          v569 += v767 + v578;
          uint64_t v32 = &v577[v578];
          v15 += v768;
          int8x16_t v22 = (int8x16_t *)((char *)v22 + v567);
          --v570;
        }
        while (v570);
        if (v746)
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          int v579 = &v766[v744];
          int v580 = v763;
          uint64_t v581 = v713;
          if ((unint64_t)v579 < v746) {
            uint64_t v581 = 0;
          }
          uint64_t v19 = v754 + 4 * v29 + 4 * v581;
          uint64_t v582 = v722;
          if ((unint64_t)v579 < v746) {
            uint64_t v582 = 0;
          }
          uint64_t v32 = &v579[v582];
          v20 += 16 * v582 + 16 * v744;
          int v569 = (unsigned int *)(v754 + 4 * v29 + 4 * v581);
          uint64_t v766 = v32;
          uint64_t v584 = v742;
          uint64_t v583 = v743;
        }
        else
        {
          LODWORD(v1++*(_DWORD *)(result + 8) = v745;
          v32 += v744;
          uint64_t v584 = v742;
          v569 += v29;
          uint64_t v19 = v754;
          int v580 = v763;
          uint64_t v583 = v743;
        }
        v24 += v583;
        v22 += v584;
        v15 += v765;
        LODWORD(v17) = v580 - 1;
        if (!v17) {
          return;
        }
      }
    case 27:
      uint64_t v585 = v34;
      uint64_t v714 = -(uint64_t)(v29 * v31);
      uint64_t v723 = -(v28 * v31);
      uint64_t v586 = 16 * v34;
      uint64_t v587 = -(uint64_t)v30;
      unsigned int v588 = (unsigned int *)v19;
      uint64_t v732 = v587;
      uint64_t v741 = v586;
      break;
    default:
      return;
  }
  do
  {
    uint64_t v755 = v19;
    int v764 = v17;
    int v589 = v18;
    int v590 = v767;
    int v591 = v768;
    do
    {
      if (*v24)
      {
        float v592 = v590 ? COERCE_FLOAT(bswap32(*v588)) : 1.0;
        float v593 = (float)*v24 * 0.0039216;
        a8.f32[0] = v593 * v592;
        if ((float)(v593 * v592) > 0.0)
        {
          int8x16_t v594 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v593);
          if (v591)
          {
            float v595 = COERCE_FLOAT(bswap32(*v15));
            if (v595 <= 0.0) {
              goto LABEL_738;
            }
          }
          else
          {
            float v595 = 1.0;
          }
          int8x16_t v596 = vrev32q_s8(*v22);
          PDAluminosityPDA((float *)v769.i32, *(float *)v596.i32, *(float *)&v596.i32[1], *(float *)&v596.i32[2], *(float *)&v596.i32[3], v595, *(double *)a8.i64, *(double *)v594.i64, a10, *(float *)v594.i32, *(float *)&v594.i32[1], *(float *)&v594.i32[2], *(float *)&v594.i32[3], a8.f32[0]);
          int v591 = v768;
          int8x16_t v594 = v769;
          if (v768)
          {
            a8.i32[0] = v770;
            int v590 = v767;
            uint64_t v587 = v732;
            uint64_t v586 = v741;
LABEL_738:
            *int8x16_t v22 = vrev32q_s8(v594);
            unsigned int *v15 = bswap32(a8.u32[0]);
            goto LABEL_740;
          }
          *int8x16_t v22 = vrev32q_s8(v769);
          int v590 = v767;
          uint64_t v587 = v732;
          uint64_t v586 = v741;
        }
      }
LABEL_740:
      v24 += v585;
      float32x4_t v597 = &v32[v585];
      if ((unint64_t)v597 >= v20) {
        uint64_t v598 = v587;
      }
      else {
        uint64_t v598 = 0;
      }
      v588 += v767 + v598;
      uint64_t v32 = &v597[v598];
      v15 += v768;
      int8x16_t v22 = (int8x16_t *)((char *)v22 + v586);
      --v589;
    }
    while (v589);
    if (v746)
    {
      LODWORD(v1++*(_DWORD *)(result + 8) = v745;
      float32x4_t v599 = &v766[v744];
      int v600 = v764;
      uint64_t v601 = v714;
      if ((unint64_t)v599 < v746) {
        uint64_t v601 = 0;
      }
      uint64_t v19 = v755 + 4 * v29 + 4 * v601;
      uint64_t v602 = v723;
      if ((unint64_t)v599 < v746) {
        uint64_t v602 = 0;
      }
      uint64_t v32 = &v599[v602];
      v20 += 16 * v602 + 16 * v744;
      unsigned int v588 = (unsigned int *)(v755 + 4 * v29 + 4 * v601);
      uint64_t v766 = v32;
      uint64_t v604 = v742;
      uint64_t v603 = v743;
    }
    else
    {
      LODWORD(v1++*(_DWORD *)(result + 8) = v745;
      v32 += v744;
      uint64_t v604 = v742;
      v588 += v29;
      uint64_t v19 = v755;
      int v600 = v764;
      uint64_t v603 = v743;
    }
    v24 += v603;
    v22 += v604;
    v15 += v765;
    LODWORD(v17) = v600 - 1;
  }
  while (v17);
}

uint64_t CMYKF_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (int *)*a1;
  memset(v38, 0, 512);
  if (*((void *)a2 + 12)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(float *)(a3 + 8) >= 1.0;
  }
  int v8 = *(_DWORD *)(*((void *)v6 + 7) + 16 * *a2 + 8 * v7 + 4 * (*((void *)a2 + 6) == 0));
  if (v8 > 28) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v32, (uint64_t)v38) < 1) {
    return 0xFFFFFFFFLL;
  }
  int v18 = *v6;
  unsigned int v19 = *(_DWORD *)a3;
  unsigned int v33 = v19;
  int v34 = v18;
  if (v19 != 538985477)
  {
    unsigned int v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (v20)
    {
      if (v20 > 0xB)
      {
LABEL_20:
        int v22 = 255;
        char v21 = 1;
      }
      else
      {
        char v21 = 0;
        int v22 = 0;
        switch(v20)
        {
          case 2u:
            if (*((void *)a2 + 12)) {
              goto LABEL_20;
            }
            char v21 = 0;
            int v22 = 16;
            break;
          case 5u:
            char v21 = 0;
            int v22 = 24;
            break;
          case 6u:
            break;
          case 7u:
            char v21 = 0;
            int v22 = 32;
            break;
          case 8u:
            char v21 = 0;
            int v22 = 8;
            break;
          case 9u:
            char v21 = 0;
            int v22 = 40;
            break;
          default:
            goto LABEL_20;
        }
      }
      uint64_t v23 = CMYKF_image_sample;
      uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYKF_image_sample[2 * v20 + 2];
      if (v32)
      {
LABEL_29:
        unsigned int v33 = *v23;
        if ((v21 & 1) == 0 && (v8 - 1) <= 1 && (v36 & 7) == 3 && (a2[2] == 5 || !a2[2]) && v20 <= 0xB)
        {
          HIDWORD(v25) = v22;
          LODWORD(v25) = v22;
          switch((v25 >> 3))
          {
            case 0u:
              unsigned int v33 = *(_DWORD *)a3;
              uint64_t v26 = CMYKF_image_mark_RGB32;
              goto LABEL_52;
            case 1u:
              unsigned int v33 = *(_DWORD *)a3;
              unint64_t v27 = CMYKF_image_mark_RGB32;
              goto LABEL_54;
            case 2u:
              unsigned int v33 = *(_DWORD *)a3;
              uint64_t v26 = (uint64_t (*)(uint64_t, int *, int, int, int, int))CMYKF_image_mark_W8;
              goto LABEL_52;
            case 3u:
              unsigned int v33 = *(_DWORD *)a3;
              uint64_t v26 = (uint64_t (*)(uint64_t, int *, int, int, int, int))CMYKF_image_mark_RGB24;
              goto LABEL_52;
            case 4u:
              unsigned int v33 = *(_DWORD *)a3;
              uint64_t v26 = CMYKF_image_mark_rgb32;
LABEL_52:
              uint64_t v28 = v26;
              uint64_t v29 = (uint64_t)a2;
              int v30 = v8;
              int v31 = 0;
              break;
            case 5u:
              unsigned int v33 = *(_DWORD *)a3;
              unint64_t v27 = CMYKF_image_mark_rgb32;
LABEL_54:
              uint64_t v28 = v27;
              uint64_t v29 = (uint64_t)a2;
              int v30 = v8;
              int v31 = 8;
              break;
            default:
              goto LABEL_37;
          }
          CMYKF_image_mark_image(v29, (uint64_t)&v32, v30, v31, (void (*)(uint64_t, _DWORD *))v28);
          return 1;
        }
        goto LABEL_37;
      }
      if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) > 8)
      {
        if ((*(_DWORD *)a3 & 0x3F0000u) >> 16 > 0x10) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        uint64_t v23 = CMYK8_image_sample;
        uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYK8_image_sample[2 * v20 + 2];
        if (v32)
        {
          int v24 = 8;
LABEL_28:
          int v35 = v24;
          goto LABEL_29;
        }
      }
      uint64_t v23 = CMYK16_image_sample;
      uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYK16_image_sample[2 * v20 + 2];
      if (v32)
      {
        int v24 = 16;
        goto LABEL_28;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!v37 && (~v36 & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(void *)(a3 + 24))
    {
      if ((v36 & 4) != 0)
      {
        v17.n128_u64[0] = *(void *)(a3 + 32);
        *((void *)a2 + ++*(_DWORD *)(result + 8) = v17.n128_u64[0];
      }
      CMYKF_mark_inner(*(void *)(*a1 + 56), v17);
      return 1;
    }
  }
  uint64_t v32 = CMYKf_sample_CMYKF_inner;
LABEL_37:
  CMYKF_image_mark((uint64_t)a2, (uint64_t)&v32, v8, v17);
  return 1;
}

void CMYKF_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(uint64_t, _DWORD *))
{
  v56[0] = a3;
  v56[1] = a4;
  _OWORD v56[2] = *(_DWORD *)(a2 + 184);
  unint64_t v8 = (unint64_t)*(int *)(a1 + 28) >> 4;
  unint64_t v58 = v8;
  if (*(void *)(a1 + 48)) {
    unint64_t v9 = (unint64_t)*(int *)(a1 + 32) >> 2;
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v60 = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  if (v10)
  {
    unsigned int v12 = HIBYTE(v11);
    unint64_t v13 = *(int *)(a2 + 24);
    uint64_t v14 = (uint64_t *)(a2 + 104);
    uint64_t v15 = (uint64_t *)(a2 + 72);
    uint64_t v16 = (uint64_t *)(a2 + 88);
  }
  else
  {
    unsigned int v12 = BYTE2(v11);
    unint64_t v13 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    uint64_t v14 = (uint64_t *)(a2 + 96);
    uint64_t v15 = (uint64_t *)(a2 + 64);
    uint64_t v16 = (uint64_t *)(a2 + 80);
    uint64_t v10 = *(void *)(a2 + 112);
  }
  uint64_t v17 = *v16;
  uint64_t v18 = *v15;
  uint64_t v19 = *v14;
  char v20 = v12;
  uint64_t v63 = v12;
  uint64_t v61 = v19;
  unint64_t v71 = v13;
  uint64_t v69 = v17;
  uint64_t v67 = v18;
  uint64_t v65 = v10;
  uint64_t v21 = *(void *)(a2 + 128);
  uint64_t v54 = v18;
  uint64_t v55 = v17;
  if (v21)
  {
    unsigned int v22 = BYTE2(v11);
    unint64_t v23 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    int v24 = (uint64_t *)(a2 + 96);
    unint64_t v25 = (uint64_t *)(a2 + 64);
    uint64_t v26 = (uint64_t *)(a2 + 80);
  }
  else
  {
    unsigned int v22 = HIBYTE(v11);
    unint64_t v23 = *(int *)(a2 + 24);
    int v24 = (uint64_t *)(a2 + 104);
    unint64_t v25 = (uint64_t *)(a2 + 72);
    uint64_t v26 = (uint64_t *)(a2 + 88);
    uint64_t v21 = *(void *)(a2 + 136);
  }
  uint64_t v27 = *v26;
  uint64_t v28 = *v25;
  uint64_t v29 = *v24;
  uint64_t v64 = v22;
  uint64_t v62 = v29;
  unint64_t v72 = v23;
  uint64_t v70 = v27;
  uint64_t v68 = v28;
  uint64_t v66 = v21;
  uint64_t v30 = *(unsigned int *)(a1 + 4);
  if ((v30 & 0x80000000) == 0)
  {
    int v31 = malloc_type_malloc(16 * v30, 0xCA75A918uLL);
    float v73 = v31;
    if (v31)
    {
      if (*(void *)(a2 + 176))
      {
        if (v30)
        {
          unsigned int v33 = v31 + 1;
          uint64_t v34 = v55 - v19;
          do
          {
            if (((v19 - v54) | v34) < 0)
            {
              unint64_t v37 = 0;
              uint64_t v38 = 0;
            }
            else
            {
              unint64_t v35 = ((v19 & (unint64_t)~(-1 << v20)) >> (v20 - 4)) & 0xF;
              char v36 = weights_21383[v35];
              if (v35 - 7 >= 9) {
                unint64_t v37 = -(uint64_t)v13;
              }
              else {
                unint64_t v37 = v13;
              }
              uint64_t v38 = v36 & 0xF;
            }
            *(v33 - 1) = v13 * (v19 >> v20);
            *unsigned int v33 = v38 | (16 * v37);
            v33 += 2;
            v19 += v10;
            v34 -= v10;
            --v30;
          }
          while (v30);
        }
      }
      else if (v30)
      {
        uint64_t v39 = v31 + 1;
        do
        {
          *(v39 - 1) = v13 * (v19 >> v20);
          *uint64_t v39 = 0;
          v39 += 2;
          v19 += v10;
          --v30;
        }
        while (v30);
      }
      uint64_t v40 = v31;
      int v41 = *(_DWORD *)(a1 + 4);
      int v42 = *(_DWORD *)(a1 + 8);
      int v74 = v42;
      int v75 = v41;
      unsigned int v43 = *(int **)(a1 + 136);
      if (v43)
      {
        int v44 = *(_DWORD *)(a1 + 104);
        v76[0] = *(_DWORD *)(a1 + 108);
        v76[1] = v44;
        shape_enum_clip_alloc((uint64_t)v31, v32, v43, 1, 1, 1, v44, v76[0], v41, v42);
        uint64_t v46 = v45;
        if (v45) {
          goto LABEL_32;
        }
      }
      int v47 = 0;
      int v48 = 0;
      uint64_t v46 = 0;
      *(void *)float v76 = 0;
      while (1)
      {
        uint64_t v49 = *(int *)(a1 + 16) + (uint64_t)v48;
        uint64_t v50 = *(void *)(a1 + 48);
        int v51 = v47 + *(_DWORD *)(a1 + 12);
        uint64_t v52 = *(void *)(a1 + 40) + 16 * v8 * v49 + 16 * v51;
        uint64_t v53 = v50 + 4 * v9 * v49 + 4 * v51;
        if (!v50) {
          uint64_t v53 = 0;
        }
        uint64_t v57 = v52;
        uint64_t v59 = v53;
        a5(a2, v56);
        if (!v46) {
          break;
        }
LABEL_32:
        if (!shape_enum_clip_next((uint64_t)v46, &v76[1], v76, &v75, &v74))
        {
          free(v46);
          break;
        }
        int v48 = v76[0];
        int v47 = v76[1];
        unint64_t v8 = v58;
        unint64_t v9 = v60;
      }
      free(v40);
    }
  }
}

void CMYKF_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v426 = a3;
  uint64_t v439 = *MEMORY[0x1E4F143B8];
  uint64_t v424 = *(unsigned int *)(a1 + 4);
  uint64_t v423 = (int)v424;
  unint64_t v4 = ((int)v424 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v4 <= 0x1FFFFFF)
  {
    unint64_t v6 = *(int *)(a1 + 28);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v436 = *(void *)(a1 + 40);
    a4.n128_u32[0] = *(_DWORD *)(a2 + 184);
    __n128 v430 = a4;
    unint64_t v8 = *(int **)(a1 + 136);
    uint64_t v9 = *(void *)(a2 + 104);
    uint64_t v427 = *(void *)(a2 + 96);
    uint64_t v11 = *(int *)(a1 + 12);
    uint64_t v10 = *(int *)(a1 + 16);
    int v433 = *(_DWORD *)(a1 + 8);
    int v425 = (void *)a2;
    uint64_t v12 = *(int *)(a2 + 16);
    uint64_t v13 = (v12 + 22) * v4;
    if (v13 > 65439)
    {
      uint64_t v15 = (char *)malloc_type_calloc(1uLL, v13 + 96, 0x5AD56BF5uLL);
      uint64_t v17 = v15;
      uint64_t v18 = v425;
      if (!v15) {
        return;
      }
    }
    else
    {
      MEMORY[0x1F4188790](a1, a4);
      uint64_t v15 = (char *)&v418 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v15, v14);
      uint64_t v17 = 0;
      uint64_t v18 = v425;
    }
    uint64_t v420 = v17;
    uint64_t v434 = v9;
    unint64_t v19 = v6 >> 4;
    unint64_t v20 = (unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v21 = v20 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v12) {
      uint64_t v22 = 20 * v4;
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v23 = v21 + v22;
    v18[18] = v20;
    v18[19] = v21 + v22;
    v18[20] = v21;
    if (v7)
    {
      unint64_t v24 = (unint64_t)*(int *)(a1 + 32) >> 2;
      unint64_t v25 = (unsigned int *)(v7 + 4 * (v11 + v24 * v10));
      uint64_t v26 = v423;
      uint64_t v431 = v24 - v423;
      uint64_t v27 = 1;
    }
    else
    {
      unint64_t v25 = 0;
      uint64_t v431 = 0;
      uint64_t v27 = 0;
      uint64_t v26 = v423;
    }
    uint64_t v28 = (int8x16_t *)(v436 + 16 * (v11 + v19 * v10));
    uint64_t v429 = v19 - v26;
    uint64_t v29 = *(int *)(a1 + 104);
    int v30 = *(_DWORD *)(a1 + 108);
    int v31 = *(unsigned __int8 *)(a1 + 2);
    if (v31 == 6 || v31 == 1)
    {
      int v32 = v426;
      unsigned int v33 = v425;
      uint64_t v34 = v427;
      uint64_t v35 = v434;
      if (v8)
      {
        unint64_t v419 = v19;
        char v36 = 0;
        LODWORD(v436) = 0;
        uint64_t v37 = *(int *)(a1 + 124);
        uint64_t v38 = (unsigned __int8 *)v8 + v29 + (int)v37 * (uint64_t)v30;
        uint64_t v26 = v423;
        uint64_t v428 = v37 - v423;
        uint64_t v39 = v424;
        goto LABEL_21;
      }
      goto LABEL_548;
    }
    unint64_t v419 = v19;
    if (v8)
    {
      uint64_t v435 = v27;
      shape_enum_clip_alloc(v27, v16, v8, 1, 1, 1, v29, v30, v424, v433);
      if (v40)
      {
        int v41 = v40;
        LODWORD(v436) = 0;
        uint64_t v42 = (int)((v12 * v4 + 15) & 0xFFFFFFF0);
        if (!v12) {
          uint64_t v42 = 20 * v4;
        }
        uint64_t v43 = v423;
        uint64_t v428 = -v423;
        uint64_t v38 = (unsigned __int8 *)(v23 + v42 + 16);
        int v32 = v426;
        uint64_t v39 = v424;
        unsigned int v33 = v425;
        uint64_t v35 = v434;
        goto LABEL_551;
      }
LABEL_548:
      if (v420) {
        free(v420);
      }
      return;
    }
    uint64_t v428 = 0;
    char v36 = 0;
    uint64_t v38 = 0;
    LODWORD(v436) = 0;
    int v32 = v426;
    uint64_t v39 = v424;
    unsigned int v33 = v425;
    uint64_t v34 = v427;
    uint64_t v35 = v434;
LABEL_21:
    uint64_t v422 = (v39 - 1) + 1;
    uint64_t v421 = -v26;
    uint64_t v44 = 4 * v27;
    unsigned int v45 = v36;
    uint64_t v435 = v27;
LABEL_22:
    uint64_t v432 = v45;
    uint64_t v46 = (void (*)(void *, uint64_t, uint64_t, uint64_t))*v33;
    uint64_t v434 = v35;
    v46(v33, v34, v35, v39);
    uint64_t v62 = (float32x4_t *)v33[20];
    uint64_t v63 = (unsigned __int8 *)v33[18];
    unsigned int v64 = *((_DWORD *)v33 + 2);
    if (v64 == *((_DWORD *)v33 + 3))
    {
      float32x4_t v55 = (float32x4_t)v430;
      if (v430.n128_f32[0] >= 1.0)
      {
        int v67 = v435;
      }
      else
      {
        int v65 = v39;
        uint64_t v66 = (unsigned char *)v33[18];
        int v67 = v435;
        do
        {
          if (*v66)
          {
            float32x4_t v54 = vmulq_n_f32(*v62, v55.f32[0]);
            float32x4_t *v62 = v54;
            v62[1].f32[0] = v55.f32[0] * v62[1].f32[0];
          }
          ++v66;
          uint64_t v62 = (float32x4_t *)((char *)v62 + 20);
          --v65;
        }
        while (v65);
        uint64_t v62 = (float32x4_t *)((char *)v62 + 20 * v421);
        v63 += v422 + v421;
      }
    }
    else
    {
      uint64_t v68 = (float32x4_t *)v33[19];
      int v69 = HIWORD(v64) & 0x3F;
      v56.i64[0] = v430.n128_u64[0];
      if (v69 == 16)
      {
        int v67 = v435;
        uint64_t v74 = 0;
        int v75 = &v68->u16[4];
        float v76 = &v62->f32[2];
        if (v430.n128_f32[0] >= 1.0)
        {
          do
          {
            if (v63[v74])
            {
              unint64_t v79 = *v75;
              unint64_t v80 = *((void *)v75 - 1);
              *(v76 - 2) = *(float *)&_blt_float[v80 + 256] + *(float *)&_blt_float[BYTE1(v80) + 512];
              *(v76 - 1) = *(float *)&_blt_float[BYTE2(v80) + 256] + *(float *)&_blt_float[BYTE3(v80) | 0x200];
              float *v76 = *(float *)&_blt_float[BYTE4(v80) + 256] + *(float *)&_blt_float[BYTE5(v80) + 512];
              v76[1] = *(float *)&_blt_float[BYTE6(v80) + 256] + *(float *)&_blt_float[HIBYTE(v80) + 512];
              v76[2] = *(float *)&_blt_float[v79 + 256]
                     + *(float *)((char *)&_blt_float[512] + ((v79 >> 6) & 0x3FC));
            }
            v75 += 8;
            ++v74;
            v76 += 5;
          }
          while (v39 != v74);
        }
        else
        {
          do
          {
            if (v63[v74])
            {
              unint64_t v77 = *v75;
              unint64_t v78 = *((void *)v75 - 1);
              *(v76 - 2) = v56.f32[0]
                         * (float)(*(float *)&_blt_float[v78 + 256]
                                 + *(float *)&_blt_float[BYTE1(v78) + 512]);
              *(v76 - 1) = v56.f32[0]
                         * (float)(*(float *)&_blt_float[BYTE2(v78) + 256] + *(float *)&_blt_float[BYTE3(v78) | 0x200]);
              float *v76 = v56.f32[0]
                   * (float)(*(float *)&_blt_float[BYTE4(v78) + 256] + *(float *)&_blt_float[BYTE5(v78) + 512]);
              v76[1] = v56.f32[0]
                     * (float)(*(float *)&_blt_float[BYTE6(v78) + 256] + *(float *)&_blt_float[HIBYTE(v78) + 512]);
              v76[2] = v56.f32[0]
                     * (float)(*(float *)&_blt_float[v77 + 256]
                             + *(float *)((char *)&_blt_float[512] + ((v77 >> 6) & 0x3FC)));
            }
            v75 += 8;
            ++v74;
            v76 += 5;
          }
          while (v39 != v74);
        }
      }
      else
      {
        _ZF = v69 == 32;
        int v67 = v435;
        uint64_t v71 = 0;
        if (_ZF)
        {
          unint64_t v72 = v68 + 1;
          float v73 = v62 + 1;
          if (v430.n128_f32[0] >= 1.0)
          {
            do
            {
              if (v63[v71])
              {
                float32x4_t v54 = v72[-1];
                v73[-1] = v54;
                v73->i32[0] = v72->i32[0];
              }
              unint64_t v72 = (float32x4_t *)((char *)v72 + 20);
              ++v71;
              float v73 = (float32x4_t *)((char *)v73 + 20);
            }
            while (v39 != v71);
          }
          else
          {
            do
            {
              if (v63[v71])
              {
                float32x4_t v54 = vmulq_n_f32(v72[-1], v56.f32[0]);
                v73[-1] = v54;
                v73->f32[0] = v56.f32[0] * v72->f32[0];
              }
              unint64_t v72 = (float32x4_t *)((char *)v72 + 20);
              ++v71;
              float v73 = (float32x4_t *)((char *)v73 + 20);
            }
            while (v39 != v71);
          }
        }
        else
        {
          uint64_t v81 = &v62->f32[2];
          if (v430.n128_f32[0] >= 1.0)
          {
            do
            {
              if (v63[v71])
              {
                uint64_t v83 = v68->i64[v71];
                *(v81 - 2) = *(float *)&_blt_float[BYTE3(v83)];
                *(v81 - 1) = *(float *)&_blt_float[BYTE2(v83)];
                *uint64_t v81 = *(float *)&_blt_float[BYTE1(v83)];
                v81[1] = *(float *)&_blt_float[v83];
                v81[2] = *(float *)&_blt_float[BYTE4(v83)];
              }
              ++v71;
              v81 += 5;
            }
            while (v39 != v71);
          }
          else
          {
            do
            {
              if (v63[v71])
              {
                uint64_t v82 = v68->i64[v71];
                *(v81 - 2) = v56.f32[0] * *(float *)&_blt_float[BYTE3(v82)];
                *(v81 - 1) = v56.f32[0] * *(float *)&_blt_float[BYTE2(v82)];
                *uint64_t v81 = v56.f32[0] * *(float *)&_blt_float[BYTE1(v82)];
                v81[1] = v56.f32[0] * *(float *)&_blt_float[v82];
                v81[2] = v56.f32[0] * *(float *)&_blt_float[BYTE4(v82)];
              }
              ++v71;
              v81 += 5;
            }
            while (v39 != v71);
          }
        }
      }
    }
    uint64_t v84 = &xmmword_1850CE000;
    switch(v32)
    {
      case 0:
        uint64_t v85 = v38 != 0;
        int v86 = v39;
        uint64_t v87 = v38;
        if (v67)
        {
          do
          {
            unsigned int v88 = *v63;
            if (*v63)
            {
              if (v38) {
                unsigned int v88 = (*v87 * v88 + ((*v87 * v88) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v88)
              {
                if (v88 == 255)
                {
                  v28->i64[0] = 0;
                  v28->i64[1] = 0;
                  *unint64_t v25 = 0;
                }
                else
                {
                  float v89 = (float)((float)v88 * -0.0039216) + 1.0;
                  unsigned int v90 = bswap32(COERCE_UNSIGNED_INT(v89 * COERCE_FLOAT(bswap32(*v25))));
                  *uint64_t v28 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v89));
                  *unint64_t v25 = v90;
                }
              }
            }
            ++v63;
            v87 += v85;
            ++v28;
            ++v25;
            --v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            unsigned int v91 = *v63;
            if (*v63)
            {
              if (v38) {
                unsigned int v91 = (*v87 * v91 + ((*v87 * v91) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v91)
              {
                if (v91 == 255)
                {
                  v28->i64[0] = 0;
                  v28->i64[1] = 0;
                }
                else
                {
                  *uint64_t v28 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), (float)((float)v91 * -0.0039216) + 1.0));
                }
              }
            }
            ++v63;
            v87 += v85;
            ++v28;
            --v86;
          }
          while (v86);
        }
        goto LABEL_398;
      case 1:
        unsigned __int8 v92 = *v63;
        if (v67)
        {
          float v93 = v28 - 1;
          unsigned int v94 = (unsigned int *)&v62[1];
          int8x16_t v95 = v63 + 1;
          float v96 = v25 - 1;
          int v97 = v39;
          if (v38)
          {
            uint64_t v98 = v434;
            do
            {
              if (v92)
              {
                unsigned int v99 = ((unsigned __int16)(*v38 * v92 + ((*v38 * v92) >> 8) + 1) >> 8);
                if (v99)
                {
                  if (v99 == 255)
                  {
                    unsigned int v100 = bswap32(*v94);
                    int8x16_t v101 = *((int8x16_t *)v94 - 1);
                  }
                  else
                  {
                    float v102 = (float)v99 * 0.0039216;
                    unsigned int v100 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v102) * COERCE_FLOAT(bswap32(v96[1])))+ (float)(*(float *)v94 * v102)));
                    int8x16_t v101 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(v93[1]), 1.0 - v102), *((float32x4_t *)v94 - 1), v102);
                  }
                  v93[1] = vrev32q_s8(v101);
                  v96[1] = v100;
                }
              }
              unsigned __int8 v103 = *v95++;
              unsigned __int8 v92 = v103;
              ++v38;
              ++v93;
              v94 += 5;
              ++v96;
              --v97;
            }
            while (v97);
            v38 += v428;
          }
          else
          {
            uint64_t v98 = v434;
            do
            {
              if (v92)
              {
                if (v92 == 255)
                {
                  unsigned int v391 = bswap32(*v94);
                  int8x16_t v392 = *((int8x16_t *)v94 - 1);
                }
                else
                {
                  float v393 = (float)v92 * 0.0039216;
                  unsigned int v391 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v393) * COERCE_FLOAT(bswap32(v96[1])))+ (float)(*(float *)v94 * v393)));
                  int8x16_t v392 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(v93[1]), 1.0 - v393), *((float32x4_t *)v94 - 1), v393);
                }
                v93[1] = vrev32q_s8(v392);
                v96[1] = v391;
              }
              unsigned __int8 v394 = *v95++;
              unsigned __int8 v92 = v394;
              ++v93;
              v94 += 5;
              ++v96;
              --v97;
            }
            while (v97);
            uint64_t v38 = 0;
          }
          uint64_t v28 = &v93[v429 + 1];
          unint64_t v25 = &v96[v431 + 1];
          goto LABEL_465;
        }
        unint64_t v371 = v63 + 1;
        uint64_t v372 = v28 - 1;
        int v373 = v39;
        if (v38)
        {
          uint64_t v98 = v434;
          do
          {
            if (v92)
            {
              unsigned int v374 = ((unsigned __int16)(*v38 * v92 + ((*v38 * v92) >> 8) + 1) >> 8);
              if (v374)
              {
                if (v374 == 255) {
                  int8x16_t v375 = *(int8x16_t *)v62;
                }
                else {
                  int8x16_t v375 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(v372[1]), 1.0 - (float)((float)v374 * 0.0039216)), *v62, (float)v374 * 0.0039216);
                }
                v372[1] = vrev32q_s8(v375);
              }
            }
            unsigned __int8 v376 = *v371++;
            unsigned __int8 v92 = v376;
            uint64_t v62 = (float32x4_t *)((char *)v62 + 20);
            ++v38;
            ++v372;
            --v373;
          }
          while (v373);
          goto LABEL_492;
        }
        uint64_t v98 = v434;
        do
        {
          if (v92)
          {
            if (v92 == 255) {
              int8x16_t v403 = *(int8x16_t *)v62;
            }
            else {
              int8x16_t v403 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(v372[1]), 1.0 - (float)((float)v92 * 0.0039216)), *v62, (float)v92 * 0.0039216);
            }
            v372[1] = vrev32q_s8(v403);
          }
          unsigned __int8 v404 = *v371++;
          unsigned __int8 v92 = v404;
          uint64_t v62 = (float32x4_t *)((char *)v62 + 20);
          ++v372;
          --v373;
        }
        while (v373);
        goto LABEL_543;
      case 2:
        unsigned __int8 v104 = *v63;
        if (v67)
        {
          if (v38)
          {
            uint64_t v105 = 0;
            uint64_t v106 = v63 + 1;
            uint64_t v107 = v25 - 1;
            uint64_t v108 = v28 - 1;
            uint64_t v98 = v434;
            while (1)
            {
              if (!v104) {
                goto LABEL_103;
              }
              unsigned int v109 = ((unsigned __int16)(v38[v105] * v104 + ((v38[v105] * v104) >> 8) + 1) >> 8);
              if (!v109) {
                goto LABEL_103;
              }
              if (v109 == 255)
              {
                float v110 = v62[1].f32[0];
                if (v110 >= 1.0)
                {
                  unsigned int v111 = bswap32(LODWORD(v110));
                  int8x16_t v112 = *(int8x16_t *)v62;
                  goto LABEL_102;
                }
                if (v110 > 0.0)
                {
                  unsigned int v111 = bswap32(COERCE_UNSIGNED_INT(v110 + (float)(COERCE_FLOAT(bswap32(v25[v105]))
                                                                  * (float)(1.0 - v110))));
                  int8x16_t v112 = (int8x16_t)vmlaq_n_f32(*v62, (float32x4_t)vrev32q_s8(v28[v105]), 1.0 - v110);
LABEL_102:
                  v28[v105] = vrev32q_s8(v112);
                  v25[v105] = v111;
                }
              }
              else
              {
                float v113 = (float)v109 * 0.0039216;
                float v114 = v113 * v62[1].f32[0];
                if (v114 > 0.0)
                {
                  unsigned int v111 = bswap32(COERCE_UNSIGNED_INT(v114 + (float)(COERCE_FLOAT(bswap32(v25[v105]))
                                                                  * (float)(1.0 - v114))));
                  int8x16_t v112 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(*v62, v113), (float32x4_t)vrev32q_s8(v28[v105]), 1.0 - v114);
                  goto LABEL_102;
                }
              }
LABEL_103:
              unsigned __int8 v104 = v106[v105];
              uint64_t v62 = (float32x4_t *)((char *)v62 + 20);
              ++v105;
              ++v107;
              ++v108;
              if (v39 == v105)
              {
                v38 += v105 + v428;
LABEL_522:
                uint64_t v28 = &v108[v429 + 1];
                unint64_t v25 = &v107[v431 + 1];
                goto LABEL_465;
              }
            }
          }
          uint64_t v395 = v63 + 1;
          uint64_t v107 = v25 - 1;
          uint64_t v108 = v28 - 1;
          int v396 = v39;
          uint64_t v98 = v434;
          while (1)
          {
            if (v104)
            {
              if (v104 == 255)
              {
                float v397 = v62[1].f32[0];
                if (v397 >= 1.0)
                {
                  unsigned int v398 = bswap32(LODWORD(v397));
                  int8x16_t v399 = *(int8x16_t *)v62;
                  goto LABEL_519;
                }
                if (v397 > 0.0)
                {
                  unsigned int v398 = bswap32(COERCE_UNSIGNED_INT(v397 + (float)(COERCE_FLOAT(bswap32(v107[1])) * (float)(1.0 - v397))));
                  int8x16_t v399 = (int8x16_t)vmlaq_n_f32(*v62, (float32x4_t)vrev32q_s8(v108[1]), 1.0 - v397);
LABEL_519:
                  v108[1] = vrev32q_s8(v399);
                  v107[1] = v398;
                }
              }
              else
              {
                float v400 = (float)v104 * 0.0039216;
                float v401 = v400 * v62[1].f32[0];
                if (v401 > 0.0)
                {
                  unsigned int v398 = bswap32(COERCE_UNSIGNED_INT(v401 + (float)(COERCE_FLOAT(bswap32(v107[1])) * (float)(1.0 - v401))));
                  int8x16_t v399 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(*v62, v400), (float32x4_t)vrev32q_s8(v108[1]), 1.0 - v401);
                  goto LABEL_519;
                }
              }
            }
            unsigned __int8 v402 = *v395++;
            unsigned __int8 v104 = v402;
            uint64_t v62 = (float32x4_t *)((char *)v62 + 20);
            ++v107;
            ++v108;
            if (!--v396)
            {
              uint64_t v38 = 0;
              goto LABEL_522;
            }
          }
        }
        uint64_t v377 = v63 + 1;
        uint64_t v372 = v28 - 1;
        int v378 = v39;
        if (v38)
        {
          uint64_t v98 = v434;
          while (1)
          {
            if (!v104) {
              goto LABEL_491;
            }
            unsigned int v379 = ((unsigned __int16)(*v38 * v104 + ((*v38 * v104) >> 8) + 1) >> 8);
            if (!v379) {
              goto LABEL_491;
            }
            if (v379 == 255)
            {
              float v380 = v62[1].f32[0];
              if (v380 >= 1.0)
              {
                int8x16_t v385 = *(int8x16_t *)v62;
                goto LABEL_490;
              }
              if (v380 > 0.0)
              {
                float v381 = 1.0 - v380;
                float32x4_t v382 = *v62;
                goto LABEL_488;
              }
            }
            else
            {
              float v383 = (float)v379 * 0.0039216;
              float v384 = v383 * v62[1].f32[0];
              if (v384 > 0.0)
              {
                float v381 = 1.0 - v384;
                float32x4_t v382 = vmulq_n_f32(*v62, v383);
LABEL_488:
                int8x16_t v385 = (int8x16_t)vmlaq_n_f32(v382, (float32x4_t)vrev32q_s8(v372[1]), v381);
LABEL_490:
                v372[1] = vrev32q_s8(v385);
              }
            }
LABEL_491:
            unsigned __int8 v386 = *v377++;
            unsigned __int8 v104 = v386;
            uint64_t v62 = (float32x4_t *)((char *)v62 + 20);
            ++v38;
            ++v372;
            if (!--v378)
            {
LABEL_492:
              v38 += v428;
              goto LABEL_544;
            }
          }
        }
        uint64_t v98 = v434;
        while (1)
        {
          if (v104)
          {
            if (v104 == 255)
            {
              float v405 = v62[1].f32[0];
              if (v405 >= 1.0)
              {
                int8x16_t v410 = *(int8x16_t *)v62;
                goto LABEL_541;
              }
              if (v405 > 0.0)
              {
                float v406 = 1.0 - v405;
                float32x4_t v407 = *v62;
                goto LABEL_539;
              }
            }
            else
            {
              float v408 = (float)v104 * 0.0039216;
              float v409 = v408 * v62[1].f32[0];
              if (v409 > 0.0)
              {
                float v406 = 1.0 - v409;
                float32x4_t v407 = vmulq_n_f32(*v62, v408);
LABEL_539:
                int8x16_t v410 = (int8x16_t)vmlaq_n_f32(v407, (float32x4_t)vrev32q_s8(v372[1]), v406);
LABEL_541:
                v372[1] = vrev32q_s8(v410);
              }
            }
          }
          unsigned __int8 v411 = *v377++;
          unsigned __int8 v104 = v411;
          uint64_t v62 = (float32x4_t *)((char *)v62 + 20);
          ++v372;
          if (!--v378)
          {
LABEL_543:
            uint64_t v38 = 0;
LABEL_544:
            uint64_t v28 = &v372[v429 + 1];
            v25 += v431;
LABEL_465:
            if (v433 == 1)
            {
              int v41 = v432;
LABEL_546:
              if (v41) {
                free(v41);
              }
              goto LABEL_548;
            }
            --v433;
            unsigned int v45 = 0;
            LODWORD(v436) = v436 + 1;
            v34 += v33[16];
            uint64_t v35 = v33[17] + v98;
            if (v432)
            {
              uint64_t v427 = v34;
              uint64_t v43 = v423;
              int v41 = v432;
LABEL_551:
              uint64_t v412 = v431 + v43;
              while (1)
              {
                while (1)
                {
                  int v413 = *((_DWORD *)v38 - 4);
                  int v414 = v413 - v436;
                  if (v413 <= (int)v436) {
                    break;
                  }
                  v433 -= v414;
                  if (v433 < 1) {
                    goto LABEL_546;
                  }
                  uint64_t v415 = v33[17];
                  v427 += v33[16] * v414;
                  v35 += v415 * v414;
                  v28 += v419 * v414;
                  uint64_t v416 = v412 * v414;
                  if (!v435) {
                    uint64_t v416 = 0;
                  }
                  v25 += v416;
                  LODWORD(v436) = v413;
                }
                if ((int)v436 < *((_DWORD *)v38 - 3) + v413) {
                  break;
                }
                if (!shape_enum_clip_scan((uint64_t)v41, (_DWORD *)v38 - 4)) {
                  goto LABEL_546;
                }
              }
              uint64_t v26 = v423;
              uint64_t v34 = v427;
              uint64_t v27 = v435;
              char v36 = v41;
              goto LABEL_21;
            }
            goto LABEL_22;
          }
        }
      case 3:
        f32 = v62[1].f32;
        int v116 = v39;
        uint64_t v87 = v38;
        do
        {
          unsigned int v117 = *v63;
          if (*v63)
          {
            if (v38) {
              unsigned int v117 = (*v87 * v117 + ((*v87 * v117) >> 8) + 1) >> 8;
            }
            if ((_BYTE)v117)
            {
              if (v117 == 255)
              {
                float v118 = COERCE_FLOAT(bswap32(*v25));
                unsigned int v119 = bswap32(COERCE_UNSIGNED_INT(*f32 * v118));
                int8x16_t v120 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(f32 - 4), v118);
              }
              else
              {
                float v121 = (float)v117 * 0.0039216;
                float v122 = COERCE_FLOAT(bswap32(*v25));
                float v123 = v121 * v122;
                float v124 = 1.0 - v121;
                unsigned int v119 = bswap32(COERCE_UNSIGNED_INT((float)(v124 * v122) + (float)(*f32 * v123)));
                int8x16_t v120 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v124), *(float32x4_t *)(f32 - 4), v123);
              }
              *uint64_t v28 = vrev32q_s8(v120);
              *unint64_t v25 = v119;
            }
          }
          ++v63;
          v87 += v38 != 0;
          ++v28;
          f32 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          --v116;
        }
        while (v116);
        goto LABEL_398;
      case 4:
        int v125 = v62[1].f32;
        int v126 = v39;
        uint64_t v87 = v38;
        do
        {
          unsigned int v127 = *v63;
          if (*v63)
          {
            if (v38) {
              unsigned int v127 = (*v87 * v127 + ((*v87 * v127) >> 8) + 1) >> 8;
            }
            if ((_BYTE)v127)
            {
              if (v127 == 255)
              {
                float v128 = 1.0 - COERCE_FLOAT(bswap32(*v25));
                unsigned int v129 = bswap32(COERCE_UNSIGNED_INT(*v125 * v128));
                int8x16_t v130 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v125 - 4), v128);
              }
              else
              {
                float v131 = (float)v127 * 0.0039216;
                float v132 = COERCE_FLOAT(bswap32(*v25));
                float v133 = v131 * (float)(1.0 - v132);
                float v134 = 1.0 - v131;
                unsigned int v129 = bswap32(COERCE_UNSIGNED_INT((float)(v134 * v132) + (float)(*v125 * v133)));
                int8x16_t v130 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v134), *(float32x4_t *)(v125 - 4), v133);
              }
              *uint64_t v28 = vrev32q_s8(v130);
              *unint64_t v25 = v129;
            }
          }
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v125 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          --v126;
        }
        while (v126);
        goto LABEL_398;
      case 5:
        uint64_t v135 = v62[1].f32;
        int v136 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v137 = *v63;
          if (*v63)
          {
            if (!v38) {
              goto LABEL_132;
            }
            unsigned int v138 = *v87 * v137 + ((*v87 * v137) >> 8) + 1;
            if (BYTE1(v138)) {
              break;
            }
          }
LABEL_133:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v135 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v136) {
            goto LABEL_398;
          }
        }
        unsigned int v137 = v138 >> 8;
LABEL_132:
        float v139 = COERCE_FLOAT(bswap32(*v25));
        float v140 = (float)v137 * 0.0039216;
        float v141 = v140 * *v135;
        *uint64_t v28 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), 1.0 - v141), vmulq_n_f32(*(float32x4_t *)(v135 - 4), v140), v139));
        *unint64_t v25 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v141) * v139) + (float)(v141 * v139)));
        goto LABEL_133;
      case 6:
        unint64_t v142 = v62[1].f32;
        int v143 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v144 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v145 = *v87 * v144 + ((*v87 * v144) >> 8) + 1;
              if (!BYTE1(v145)) {
                goto LABEL_145;
              }
              unsigned int v144 = v145 >> 8;
            }
            float v146 = COERCE_FLOAT(bswap32(*v25));
            float v147 = 1.0 - v146;
            if ((float)(1.0 - v146) >= 1.0)
            {
              float v151 = (float)v144 * 0.0039216;
              unsigned int v149 = bswap32(COERCE_UNSIGNED_INT(v151 * *v142));
              int8x16_t v150 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v142 - 4), v151);
              goto LABEL_144;
            }
            if (v147 > 0.0)
            {
              float v148 = (float)((float)v144 * 0.0039216) * v147;
              unsigned int v149 = bswap32(COERCE_UNSIGNED_INT(v146 + (float)(*v142 * v148)));
              int8x16_t v150 = (int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v28), *(float32x4_t *)(v142 - 4), v148);
LABEL_144:
              *uint64_t v28 = vrev32q_s8(v150);
              *unint64_t v25 = v149;
            }
          }
LABEL_145:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v142 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v143) {
            goto LABEL_398;
          }
        }
      case 7:
        uint64_t v152 = v38 != 0;
        uint64_t v153 = v62[1].f32;
        int v154 = v39;
        uint64_t v87 = v38;
        if (v67)
        {
          do
          {
            unsigned int v155 = *v63;
            if (*v63)
            {
              if (v38) {
                unsigned int v155 = (*v87 * v155 + ((*v87 * v155) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v155)
              {
                if (v155 == 255)
                {
                  int8x16_t v156 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), *v153);
                  float v157 = *v153 * COERCE_FLOAT(bswap32(*v25));
                }
                else
                {
                  float v158 = (float)v155 * 0.0039216;
                  float v159 = COERCE_FLOAT(bswap32(*v25));
                  float v160 = v158 * *v153;
                  float v161 = 1.0 - v158;
                  float32x4_t v162 = (float32x4_t)vrev32q_s8(*v28);
                  int8x16_t v156 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v162, 1.0 - v158), v162, v160);
                  float v157 = (float)(v161 * v159) + (float)(v159 * v160);
                }
                *uint64_t v28 = vrev32q_s8(v156);
                *unint64_t v25 = bswap32(LODWORD(v157));
              }
            }
            ++v63;
            v87 += v152;
            ++v28;
            ++v25;
            v153 += 5;
            --v154;
          }
          while (v154);
        }
        else
        {
          do
          {
            unsigned int v163 = *v63;
            if (*v63)
            {
              if (v38) {
                unsigned int v163 = (*v87 * v163 + ((*v87 * v163) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v163)
              {
                if (v163 == 255)
                {
                  int8x16_t v164 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), *v153);
                }
                else
                {
                  float32x4_t v165 = (float32x4_t)vrev32q_s8(*v28);
                  int8x16_t v164 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v165, 1.0 - (float)((float)v163 * 0.0039216)), v165, (float)((float)v163 * 0.0039216) * *v153);
                }
                *uint64_t v28 = vrev32q_s8(v164);
              }
            }
            ++v63;
            v87 += v152;
            ++v28;
            v153 += 5;
            --v154;
          }
          while (v154);
        }
        goto LABEL_398;
      case 8:
        uint64_t v166 = v38 != 0;
        uint64_t v167 = v62[1].f32;
        int v168 = v39;
        uint64_t v87 = v38;
        if (v67)
        {
          do
          {
            unsigned int v169 = *v63;
            if (*v63)
            {
              if (v38) {
                unsigned int v169 = (*v87 * v169 + ((*v87 * v169) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v169)
              {
                if (v169 == 255)
                {
                  float v170 = 1.0 - *v167;
                  int8x16_t v171 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v170);
                  float v172 = v170 * COERCE_FLOAT(bswap32(*v25));
                }
                else
                {
                  float v173 = (float)v169 * 0.0039216;
                  float v174 = COERCE_FLOAT(bswap32(*v25));
                  float v175 = v173 * (float)(1.0 - *v167);
                  float v176 = 1.0 - v173;
                  float32x4_t v177 = (float32x4_t)vrev32q_s8(*v28);
                  int8x16_t v171 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v177, 1.0 - v173), v177, v175);
                  float v172 = (float)(v176 * v174) + (float)(v174 * v175);
                }
                *uint64_t v28 = vrev32q_s8(v171);
                *unint64_t v25 = bswap32(LODWORD(v172));
              }
            }
            ++v63;
            v87 += v166;
            ++v28;
            ++v25;
            v167 += 5;
            --v168;
          }
          while (v168);
        }
        else
        {
          do
          {
            unsigned int v178 = *v63;
            if (*v63)
            {
              if (v38) {
                unsigned int v178 = (*v87 * v178 + ((*v87 * v178) >> 8) + 1) >> 8;
              }
              if ((_BYTE)v178)
              {
                if (v178 == 255)
                {
                  int8x16_t v179 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), 1.0 - *v167);
                }
                else
                {
                  float32x4_t v180 = (float32x4_t)vrev32q_s8(*v28);
                  int8x16_t v179 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v180, 1.0 - (float)((float)v178 * 0.0039216)), v180, (float)((float)v178 * 0.0039216) * (float)(1.0 - *v167));
                }
                *uint64_t v28 = vrev32q_s8(v179);
              }
            }
            ++v63;
            v87 += v166;
            ++v28;
            v167 += 5;
            --v168;
          }
          while (v168);
        }
        goto LABEL_398;
      case 9:
        float v181 = v62[1].f32;
        int v182 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v183 = *v63;
          if (*v63)
          {
            if (!v38) {
              goto LABEL_194;
            }
            unsigned int v184 = *v87 * v183 + ((*v87 * v183) >> 8) + 1;
            if (BYTE1(v184)) {
              break;
            }
          }
LABEL_195:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v181 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v182) {
            goto LABEL_398;
          }
        }
        unsigned int v183 = v184 >> 8;
LABEL_194:
        float v185 = COERCE_FLOAT(bswap32(*v25));
        float v186 = (float)v183 * 0.0039216;
        float v187 = v186 * *v181;
        float v188 = (float)(1.0 - v186) + v187;
        *uint64_t v28 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v188), vmulq_n_f32(*(float32x4_t *)(v181 - 4), v186), 1.0 - v185));
        *unint64_t v25 = bswap32(COERCE_UNSIGNED_INT((float)(v188 * v185) + (float)(v187 * (float)(1.0 - v185))));
        goto LABEL_195;
      case 10:
        uint64_t v189 = v62[1].f32;
        int v190 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v191 = *v63;
          if (*v63)
          {
            if (!v38) {
              goto LABEL_202;
            }
            unsigned int v192 = *v87 * v191 + ((*v87 * v191) >> 8) + 1;
            if (BYTE1(v192)) {
              break;
            }
          }
LABEL_203:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v189 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v190) {
            goto LABEL_398;
          }
        }
        unsigned int v191 = v192 >> 8;
LABEL_202:
        float v193 = COERCE_FLOAT(bswap32(*v25));
        float v194 = (float)v191 * 0.0039216;
        float v195 = v194 * *v189;
        *uint64_t v28 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), 1.0 - v195), vmulq_n_f32(*(float32x4_t *)(v189 - 4), v194), 1.0 - v193));
        *unint64_t v25 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v195) * v193) + (float)(v195 * (float)(1.0 - v193))));
        goto LABEL_203;
      case 11:
        uint64_t v196 = v38 != 0;
        uint64_t v197 = v62[1].f32;
        int v198 = v39;
        uint64_t v87 = v38;
        if (v67)
        {
          while (1)
          {
            unsigned int v199 = *v63;
            if (*v63)
            {
              if (!v38) {
                goto LABEL_210;
              }
              unsigned int v200 = *v87 * v199 + ((*v87 * v199) >> 8) + 1;
              if (BYTE1(v200)) {
                break;
              }
            }
LABEL_213:
            ++v63;
            v87 += v196;
            ++v28;
            ++v25;
            v197 += 5;
            if (!--v198) {
              goto LABEL_398;
            }
          }
          unsigned int v199 = v200 >> 8;
LABEL_210:
          float v201 = (float)v199 * 0.0039216;
          v55.f32[0] = v201 * *v197;
          v56.i32[0] = bswap32(*v25);
          v57.f32[0] = v55.f32[0] + v56.f32[0];
          if ((float)(v55.f32[0] + v56.f32[0]) > 1.0) {
            v57.f32[0] = 1.0;
          }
          float32x4_t v202 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 0);
          unsigned int v203 = bswap32(v57.u32[0]);
          float32x4_t v57 = (float32x4_t)vrev32q_s8(*v28);
          float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
          float32x4_t v56 = vsubq_f32(v202, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 0), v57));
          *uint64_t v28 = vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32(v55, vmulq_n_f32(*(float32x4_t *)(v197 - 4), v201)), v56));
          *unint64_t v25 = v203;
          goto LABEL_213;
        }
        while (1)
        {
          unsigned int v204 = *v63;
          if (*v63)
          {
            if (!v38) {
              goto LABEL_219;
            }
            unsigned int v205 = *v87 * v204 + ((*v87 * v204) >> 8) + 1;
            if (BYTE1(v205)) {
              break;
            }
          }
LABEL_220:
          ++v63;
          v87 += v196;
          ++v28;
          v197 += 5;
          if (!--v198) {
            goto LABEL_398;
          }
        }
        unsigned int v204 = v205 >> 8;
LABEL_219:
        float v206 = (float)v204 * 0.0039216;
        v55.f32[0] = v206 * *v197;
        float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
        *uint64_t v28 = vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32(v55, vmulq_n_f32(*(float32x4_t *)(v197 - 4), v206)), (float32x4_t)vrev32q_s8(*v28)));
        goto LABEL_220;
      case 12:
        uint64_t v207 = v38 != 0;
        if (v67)
        {
          uint64_t v208 = v62[1].f32;
          int v209 = v39;
          uint64_t v87 = v38;
          while (1)
          {
            unsigned int v210 = *v63;
            if (*v63)
            {
              if (!v38) {
                goto LABEL_228;
              }
              unsigned int v211 = *v87 * v210 + ((*v87 * v210) >> 8) + 1;
              if (BYTE1(v211)) {
                break;
              }
            }
LABEL_231:
            ++v63;
            v87 += v207;
            ++v28;
            ++v25;
            v208 += 5;
            if (!--v209) {
              goto LABEL_398;
            }
          }
          unsigned int v210 = v211 >> 8;
LABEL_228:
          float v212 = (float)v210 * 0.0039216;
          float v213 = (float)(v212 * *v208) + COERCE_FLOAT(bswap32(*v25));
          if (v213 > 1.0) {
            float v213 = 1.0;
          }
          *uint64_t v28 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v208 - 4), v212), (float32x4_t)vrev32q_s8(*v28)));
          *unint64_t v25 = bswap32(LODWORD(v213));
          goto LABEL_231;
        }
        int v387 = v39;
        float32x4_t v388 = v38;
        while (1)
        {
          unsigned int v389 = *v63;
          if (*v63)
          {
            if (!v38) {
              goto LABEL_498;
            }
            unsigned int v390 = *v388 * v389 + ((*v388 * v389) >> 8) + 1;
            if (BYTE1(v390)) {
              break;
            }
          }
LABEL_499:
          ++v63;
          uint64_t v62 = (float32x4_t *)((char *)v62 + 20);
          v388 += v207;
          ++v28;
          if (!--v387)
          {
            uint64_t v38 = &v388[v428];
LABEL_399:
            v28 += v429;
            v25 += v431;
LABEL_464:
            uint64_t v98 = v434;
            goto LABEL_465;
          }
        }
        unsigned int v389 = v390 >> 8;
LABEL_498:
        *uint64_t v28 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32(*v62, (float)v389 * 0.0039216), (float32x4_t)vrev32q_s8(*v28)));
        goto LABEL_499;
      case 13:
        uint64_t v214 = v62[1].f32;
        int v215 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v216 = *v63;
          if (*v63)
          {
            if (!v38) {
              goto LABEL_238;
            }
            unsigned int v217 = *v87 * v216 + ((*v87 * v216) >> 8) + 1;
            if (BYTE1(v217)) {
              break;
            }
          }
LABEL_244:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v214 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v215) {
            goto LABEL_398;
          }
        }
        unsigned int v216 = v217 >> 8;
LABEL_238:
        float v218 = (float)v216 * 0.0039216;
        v54.f32[0] = v218 * *v214;
        if (v54.f32[0] > 0.0)
        {
          float32x4_t v219 = vmulq_n_f32(*(float32x4_t *)(v214 - 4), v218);
          v57.i32[0] = 1.0;
          v55.i32[0] = 1.0;
          if (v67)
          {
            v55.i32[0] = bswap32(*v25);
            if (v55.f32[0] <= 0.0) {
              goto LABEL_242;
            }
          }
          float32x4_t v220 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), (float32x4_t)vrev32q_s8(*v28));
          float32x4_t v221 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v219);
          float32x4_t v222 = vmulq_f32(v220, v221);
          float32x4_t v223 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v54, v57)), 0), (int8x16_t)vmlaq_n_f32(v222, v220, 1.0 - v54.f32[0]), (int8x16_t)v222);
          int8x16_t v224 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v55, v57)), 0);
          int8x16_t v225 = (int8x16_t)vmlaq_n_f32(v223, v221, 1.0 - v55.f32[0]);
          v54.f32[0] = (float)(v55.f32[0] + v54.f32[0]) - (float)(v55.f32[0] * v54.f32[0]);
          float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
          float32x4_t v219 = vsubq_f32(v55, (float32x4_t)vbslq_s8(v224, v225, (int8x16_t)v223));
          if (v67)
          {
LABEL_242:
            unsigned int v226 = bswap32(v54.u32[0]);
            float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v219);
            *uint64_t v28 = (int8x16_t)v54;
            *unint64_t v25 = v226;
          }
          else
          {
            float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v219);
            *uint64_t v28 = (int8x16_t)v54;
          }
        }
        goto LABEL_244;
      case 14:
        uint64_t v227 = v62[1].f32;
        int v228 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v229 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v230 = *v87 * v229 + ((*v87 * v229) >> 8) + 1;
              if (!BYTE1(v230)) {
                goto LABEL_259;
              }
              unsigned int v229 = v230 >> 8;
            }
            float v231 = (float)v229 * 0.0039216;
            v54.f32[0] = v231 * *v227;
            if (v54.f32[0] > 0.0)
            {
              float32x4_t v232 = *(float32x4_t *)(v227 - 4);
              float32x4_t v233 = vmulq_n_f32(v232, v231);
              if (v67)
              {
                v232.i32[0] = bswap32(*v25);
                if (v232.f32[0] <= 0.0)
                {
LABEL_257:
                  unsigned int v240 = bswap32(v54.u32[0]);
                  float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v233);
                  *uint64_t v28 = (int8x16_t)v54;
                  *unint64_t v25 = v240;
                  goto LABEL_259;
                }
              }
              else
              {
                v232.i32[0] = 1.0;
              }
              float32x4_t v234 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v232.f32, 0), (float32x4_t)vrev32q_s8(*v28));
              __asm { FMOV            V4.4S, #1.0 }
              float32x4_t v239 = vmlaq_f32(v234, vsubq_f32(_Q4, v234), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v233));
              v54.f32[0] = (float)(v54.f32[0] + v232.f32[0]) - (float)(v232.f32[0] * v54.f32[0]);
              float32x4_t v233 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v239);
              if (!v67)
              {
                float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v233);
                *uint64_t v28 = (int8x16_t)v54;
                goto LABEL_259;
              }
              goto LABEL_257;
            }
          }
LABEL_259:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v227 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v228) {
            goto LABEL_398;
          }
        }
      case 15:
        uint64_t v427 = v34;
        uint64_t v241 = v62[1].f32;
        int v242 = v39;
        uint64_t v243 = v38;
        while (1)
        {
          unsigned int v244 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v245 = *v243 * v244 + ((*v243 * v244) >> 8) + 1;
              if (!BYTE1(v245)) {
                goto LABEL_275;
              }
              unsigned int v244 = v245 >> 8;
            }
            float v246 = (float)v244 * *((float *)v84 + 677);
            *(float *)&double v60 = v246 * *v241;
            if (*(float *)&v60 > 0.0)
            {
              int8x16_t v247 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v241 - 4), v246);
              if (v67)
              {
                float v248 = COERCE_FLOAT(bswap32(*v25));
                if (v248 <= 0.0)
                {
LABEL_273:
                  *uint64_t v28 = vrev32q_s8(v247);
                  *unint64_t v25 = bswap32(LODWORD(v60));
                  goto LABEL_275;
                }
              }
              else
              {
                float v248 = 1.0;
              }
              int8x16_t v249 = vrev32q_s8(*v28);
              PDAoverlayPDA((float *)v437.i32, *(float *)v249.i32, *(float *)&v249.i32[1], *(float *)&v249.i32[2], *(float *)&v249.i32[3], v248, *(double *)v247.i64, v60, v61, *(float *)v247.i32, *(float *)&v247.i32[1], *(float *)&v247.i32[2], *(float *)&v247.i32[3], *(float *)&v60);
              int v67 = v435;
              int8x16_t v247 = v437;
              if (!v435)
              {
                *uint64_t v28 = vrev32q_s8(v437);
                uint64_t v84 = &xmmword_1850CE000;
                goto LABEL_275;
              }
              *(float *)&double v60 = v438;
              uint64_t v84 = &xmmword_1850CE000;
              goto LABEL_273;
            }
          }
LABEL_275:
          ++v63;
          v243 += v38 != 0;
          ++v28;
          v241 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v242) {
            goto LABEL_463;
          }
        }
      case 16:
        char v250 = v62[1].f32;
        int v251 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v252 = *v63;
          if (*v63)
          {
            if (!v38) {
              goto LABEL_282;
            }
            unsigned int v253 = *v87 * v252 + ((*v87 * v252) >> 8) + 1;
            if (BYTE1(v253)) {
              break;
            }
          }
LABEL_288:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v250 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v251) {
            goto LABEL_398;
          }
        }
        unsigned int v252 = v253 >> 8;
LABEL_282:
        float v254 = (float)v252 * 0.0039216;
        v54.f32[0] = v254 * *v250;
        if (v54.f32[0] > 0.0)
        {
          float32x4_t v256 = *(float32x4_t *)(v250 - 4);
          float32x4_t v255 = vmulq_n_f32(v256, v254);
          v256.i32[0] = 1.0;
          v55.i32[0] = 1.0;
          if (v67)
          {
            v55.i32[0] = bswap32(*v25);
            if (v55.f32[0] <= 0.0) {
              goto LABEL_286;
            }
          }
          float32x4_t v257 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), (float32x4_t)vrev32q_s8(*v28));
          float32x4_t v258 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v255);
          float32x4_t v259 = vmulq_n_f32(v257, v54.f32[0]);
          float32x4_t v260 = vmulq_n_f32(v258, v55.f32[0]);
          float32x4_t v261 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v259, v260), (int8x16_t)v260, (int8x16_t)v259);
          float32x4_t v262 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v54, v256)), 0), (int8x16_t)vmlaq_n_f32(v261, v257, 1.0 - v54.f32[0]), (int8x16_t)v261);
          float32x4_t v263 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v55, v256)), 0), (int8x16_t)vmlaq_n_f32(v262, v258, 1.0 - v55.f32[0]), (int8x16_t)v262);
          v54.f32[0] = (float)(v55.f32[0] + v54.f32[0]) - (float)(v55.f32[0] * v54.f32[0]);
          float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
          float32x4_t v255 = vsubq_f32(v55, v263);
          if (v67)
          {
LABEL_286:
            unsigned int v264 = bswap32(v54.u32[0]);
            float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v255);
            *uint64_t v28 = (int8x16_t)v54;
            *unint64_t v25 = v264;
          }
          else
          {
            float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v255);
            *uint64_t v28 = (int8x16_t)v54;
          }
        }
        goto LABEL_288;
      case 17:
        uint64_t v265 = v62[1].f32;
        int v266 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v267 = *v63;
          if (*v63)
          {
            if (!v38) {
              goto LABEL_295;
            }
            unsigned int v268 = *v87 * v267 + ((*v87 * v267) >> 8) + 1;
            if (BYTE1(v268)) {
              break;
            }
          }
LABEL_301:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v265 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v266) {
            goto LABEL_398;
          }
        }
        unsigned int v267 = v268 >> 8;
LABEL_295:
        float v269 = (float)v267 * 0.0039216;
        v54.f32[0] = v269 * *v265;
        if (v54.f32[0] > 0.0)
        {
          float32x4_t v271 = *(float32x4_t *)(v265 - 4);
          float32x4_t v270 = vmulq_n_f32(v271, v269);
          v271.i32[0] = 1.0;
          v55.i32[0] = 1.0;
          if (v67)
          {
            v55.i32[0] = bswap32(*v25);
            if (v55.f32[0] <= 0.0) {
              goto LABEL_299;
            }
          }
          float32x4_t v272 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), (float32x4_t)vrev32q_s8(*v28));
          float32x4_t v273 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v270);
          float32x4_t v274 = vmulq_n_f32(v272, v54.f32[0]);
          float32x4_t v275 = vmulq_n_f32(v273, v55.f32[0]);
          float32x4_t v276 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v275, v274), (int8x16_t)v275, (int8x16_t)v274);
          float32x4_t v277 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v54, v271)), 0), (int8x16_t)vmlaq_n_f32(v276, v272, 1.0 - v54.f32[0]), (int8x16_t)v276);
          float32x4_t v278 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v55, v271)), 0), (int8x16_t)vmlaq_n_f32(v277, v273, 1.0 - v55.f32[0]), (int8x16_t)v277);
          v54.f32[0] = (float)(v55.f32[0] + v54.f32[0]) - (float)(v55.f32[0] * v54.f32[0]);
          float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
          float32x4_t v270 = vsubq_f32(v55, v278);
          if (v67)
          {
LABEL_299:
            unsigned int v279 = bswap32(v54.u32[0]);
            float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v270);
            *uint64_t v28 = (int8x16_t)v54;
            *unint64_t v25 = v279;
          }
          else
          {
            float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v270);
            *uint64_t v28 = (int8x16_t)v54;
          }
        }
        goto LABEL_301;
      case 18:
        uint64_t v427 = v34;
        uint64_t v280 = v62[1].f32;
        int v281 = v39;
        uint64_t v243 = v38;
        while (1)
        {
          unsigned int v282 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v283 = *v243 * v282 + ((*v243 * v282) >> 8) + 1;
              if (!BYTE1(v283)) {
                goto LABEL_317;
              }
              unsigned int v282 = v283 >> 8;
            }
            float v284 = (float)v282 * *((float *)v84 + 677);
            *(float *)&double v60 = v284 * *v280;
            if (*(float *)&v60 > 0.0)
            {
              int8x16_t v285 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v280 - 4), v284);
              if (v67)
              {
                float v286 = COERCE_FLOAT(bswap32(*v25));
                if (v286 <= 0.0)
                {
LABEL_315:
                  *uint64_t v28 = vrev32q_s8(v285);
                  *unint64_t v25 = bswap32(LODWORD(v60));
                  goto LABEL_317;
                }
              }
              else
              {
                float v286 = 1.0;
              }
              int8x16_t v287 = vrev32q_s8(*v28);
              PDAcolordodgePDA((float *)v437.i32, *(float *)v287.i32, *(float *)&v287.i32[1], *(float *)&v287.i32[2], *(float *)&v287.i32[3], v286, *(double *)v285.i64, v60, v61, *(float *)v285.i32, *(float *)&v285.i32[1], *(float *)&v285.i32[2], *(float *)&v285.i32[3], *(float *)&v60);
              int v67 = v435;
              int8x16_t v285 = v437;
              if (!v435)
              {
                *uint64_t v28 = vrev32q_s8(v437);
                uint64_t v84 = &xmmword_1850CE000;
                goto LABEL_317;
              }
              *(float *)&double v60 = v438;
              uint64_t v84 = &xmmword_1850CE000;
              goto LABEL_315;
            }
          }
LABEL_317:
          ++v63;
          v243 += v38 != 0;
          ++v28;
          v280 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v281) {
            goto LABEL_463;
          }
        }
      case 19:
        uint64_t v427 = v34;
        float v288 = v62[1].f32;
        int v289 = v39;
        uint64_t v243 = v38;
        while (1)
        {
          unsigned int v290 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v291 = *v243 * v290 + ((*v243 * v290) >> 8) + 1;
              if (!BYTE1(v291)) {
                goto LABEL_333;
              }
              unsigned int v290 = v291 >> 8;
            }
            float v292 = (float)v290 * *((float *)v84 + 677);
            *(float *)&double v60 = v292 * *v288;
            if (*(float *)&v60 > 0.0)
            {
              int8x16_t v293 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v288 - 4), v292);
              if (v67)
              {
                float v294 = COERCE_FLOAT(bswap32(*v25));
                if (v294 <= 0.0)
                {
LABEL_331:
                  *uint64_t v28 = vrev32q_s8(v293);
                  *unint64_t v25 = bswap32(LODWORD(v60));
                  goto LABEL_333;
                }
              }
              else
              {
                float v294 = 1.0;
              }
              int8x16_t v295 = vrev32q_s8(*v28);
              PDAcolorburnPDA((float *)v437.i32, *(float *)v295.i32, *(float *)&v295.i32[1], *(float *)&v295.i32[2], *(float *)&v295.i32[3], v294, *(double *)v293.i64, v60, v61, *(float *)v293.i32, *(float *)&v293.i32[1], *(float *)&v293.i32[2], *(float *)&v293.i32[3], *(float *)&v60);
              int v67 = v435;
              int8x16_t v293 = v437;
              if (!v435)
              {
                *uint64_t v28 = vrev32q_s8(v437);
                uint64_t v84 = &xmmword_1850CE000;
                goto LABEL_333;
              }
              *(float *)&double v60 = v438;
              uint64_t v84 = &xmmword_1850CE000;
              goto LABEL_331;
            }
          }
LABEL_333:
          ++v63;
          v243 += v38 != 0;
          ++v28;
          v288 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v289) {
            goto LABEL_463;
          }
        }
      case 20:
        uint64_t v427 = v34;
        unsigned int v296 = v62[1].f32;
        int v297 = v39;
        uint64_t v243 = v38;
        while (1)
        {
          unsigned int v298 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v299 = *v243 * v298 + ((*v243 * v298) >> 8) + 1;
              if (!BYTE1(v299)) {
                goto LABEL_349;
              }
              unsigned int v298 = v299 >> 8;
            }
            float v300 = (float)v298 * *((float *)v84 + 677);
            *(float *)&double v60 = v300 * *v296;
            if (*(float *)&v60 > 0.0)
            {
              int8x16_t v301 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v296 - 4), v300);
              if (v67)
              {
                LODWORD(v5++*(_DWORD *)(result + 8) = bswap32(*v25);
                if (*(float *)&v58 <= 0.0)
                {
LABEL_347:
                  *uint64_t v28 = vrev32q_s8(v301);
                  *unint64_t v25 = bswap32(LODWORD(v60));
                  goto LABEL_349;
                }
              }
              else
              {
                LODWORD(v5++*(_DWORD *)(result + 8) = 1.0;
              }
              int8x16_t v302 = vrev32q_s8(*v28);
              PDAsoftlightPDA((float32x4_t *)&v437, *(float32x2_t *)v302.i8, *(float32_t *)&v302.i32[1], *(float *)&v302.i32[2], *(float *)&v302.i32[3], v58, *(int32x2_t *)v301.i8, v60, v61, v47, v48, v49, v50, v51, v52, v53, *(float32x2_t *)v301.i8, *(float *)&v301.i32[2], *(float *)&v301.i32[3],
                *(float *)&v60);
              int v67 = v435;
              int8x16_t v301 = v437;
              if (!v435)
              {
                *uint64_t v28 = vrev32q_s8(v437);
                uint64_t v84 = &xmmword_1850CE000;
                goto LABEL_349;
              }
              *(float *)&double v60 = v438;
              uint64_t v84 = &xmmword_1850CE000;
              goto LABEL_347;
            }
          }
LABEL_349:
          ++v63;
          v243 += v38 != 0;
          ++v28;
          v296 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v297) {
            goto LABEL_463;
          }
        }
      case 21:
        uint64_t v427 = v34;
        uint64_t v303 = v62[1].f32;
        int v304 = v39;
        uint64_t v243 = v38;
        while (1)
        {
          unsigned int v305 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v306 = *v243 * v305 + ((*v243 * v305) >> 8) + 1;
              if (!BYTE1(v306)) {
                goto LABEL_365;
              }
              unsigned int v305 = v306 >> 8;
            }
            float v307 = (float)v305 * *((float *)v84 + 677);
            *(float *)&double v60 = v307 * *v303;
            if (*(float *)&v60 > 0.0)
            {
              int8x16_t v308 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v303 - 4), v307);
              if (v67)
              {
                float v309 = COERCE_FLOAT(bswap32(*v25));
                if (v309 <= 0.0)
                {
LABEL_363:
                  *uint64_t v28 = vrev32q_s8(v308);
                  *unint64_t v25 = bswap32(LODWORD(v60));
                  goto LABEL_365;
                }
              }
              else
              {
                float v309 = 1.0;
              }
              int8x16_t v310 = vrev32q_s8(*v28);
              PDAhardlightPDA((float *)v437.i32, *(float *)v310.i32, *(float *)&v310.i32[1], *(float *)&v310.i32[2], *(float *)&v310.i32[3], v309, *(double *)v308.i64, v60, v61, *(float *)v308.i32, *(float *)&v308.i32[1], *(float *)&v308.i32[2], *(float *)&v308.i32[3], *(float *)&v60);
              int v67 = v435;
              int8x16_t v308 = v437;
              if (!v435)
              {
                *uint64_t v28 = vrev32q_s8(v437);
                uint64_t v84 = &xmmword_1850CE000;
                goto LABEL_365;
              }
              *(float *)&double v60 = v438;
              uint64_t v84 = &xmmword_1850CE000;
              goto LABEL_363;
            }
          }
LABEL_365:
          ++v63;
          v243 += v38 != 0;
          ++v28;
          v303 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v304) {
            goto LABEL_463;
          }
        }
      case 22:
        float v311 = v62[1].f32;
        int v312 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v313 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v314 = *v87 * v313 + ((*v87 * v313) >> 8) + 1;
              if (!BYTE1(v314)) {
                goto LABEL_381;
              }
              unsigned int v313 = v314 >> 8;
            }
            float v315 = (float)v313 * 0.0039216;
            v54.f32[0] = v315 * *v311;
            if (v54.f32[0] > 0.0)
            {
              float32x4_t v316 = *(float32x4_t *)(v311 - 4);
              float32x4_t v317 = vmulq_n_f32(v316, v315);
              if (v67)
              {
                v316.i32[0] = bswap32(*v25);
                if (v316.f32[0] <= 0.0)
                {
LABEL_379:
                  unsigned int v326 = bswap32(v54.u32[0]);
                  float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v317);
                  *uint64_t v28 = (int8x16_t)v54;
                  *unint64_t v25 = v326;
                  goto LABEL_381;
                }
              }
              else
              {
                v316.i32[0] = 1.0;
              }
              int8x16_t v318 = *v28;
              *(float *)v318.i32 = (float)(v316.f32[0] + v54.f32[0]) - (float)(v316.f32[0] * v54.f32[0]);
              float32x4_t v319 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v316.f32, 0), (float32x4_t)vrev32q_s8(*v28));
              float32x4_t v320 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v317);
              float32x4_t v321 = vaddq_f32(v319, v320);
              float32x4_t v322 = vmulq_n_f32(v319, v54.f32[0]);
              float32x4_t v323 = vmulq_n_f32(v320, v316.f32[0]);
              float32x4_t v324 = vsubq_f32(v321, v322);
              float32x4_t v325 = vsubq_f32(v322, v323);
              float32x4_t v317 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v318.i8, 0), vaddq_f32(vsubq_f32(v324, v323), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v325), (int8x16_t)vnegq_f32(v325), (int8x16_t)v325)));
              if (!v67)
              {
                float32x4_t v54 = (float32x4_t)vrev32q_s8((int8x16_t)v317);
                *uint64_t v28 = (int8x16_t)v54;
                goto LABEL_381;
              }
              v54.i32[0] = v318.i32[0];
              goto LABEL_379;
            }
          }
LABEL_381:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v311 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v312) {
            goto LABEL_398;
          }
        }
      case 23:
        uint64_t v327 = v62[1].f32;
        int v328 = v39;
        uint64_t v87 = v38;
        while (1)
        {
          unsigned int v329 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v330 = *v87 * v329 + ((*v87 * v329) >> 8) + 1;
              if (!BYTE1(v330)) {
                goto LABEL_397;
              }
              unsigned int v329 = v330 >> 8;
            }
            float v331 = (float)v329 * 0.0039216;
            v55.f32[0] = v331 * *v327;
            if (v55.f32[0] > 0.0)
            {
              float32x4_t v332 = *(float32x4_t *)(v327 - 4);
              float32x4_t v333 = vmulq_n_f32(v332, v331);
              if (v67)
              {
                v332.i32[0] = bswap32(*v25);
                if (v332.f32[0] <= 0.0)
                {
LABEL_395:
                  *uint64_t v28 = vrev32q_s8((int8x16_t)v333);
                  *unint64_t v25 = bswap32(v55.u32[0]);
                  goto LABEL_397;
                }
              }
              else
              {
                v332.i32[0] = 1.0;
              }
              float32x4_t v334 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v332.f32, 0);
              v332.f32[0] = (float)(v332.f32[0] + v55.f32[0]) - (float)(v332.f32[0] * v55.f32[0]);
              float32x4_t v335 = vsubq_f32(v334, (float32x4_t)vrev32q_s8(*v28));
              float32x4_t v336 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), v333);
              float32x4_t v337 = vaddq_f32(v335, v336);
              float32x4_t v338 = vmulq_f32(v336, v335);
              v335.i64[0] = 0xC0000000C0000000;
              v335.i64[1] = 0xC0000000C0000000;
              float32x4_t v55 = vmlaq_f32(v337, v335, v338);
              float32x4_t v333 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v332.f32, 0), v55);
              if (!v67)
              {
                *uint64_t v28 = vrev32q_s8((int8x16_t)v333);
                goto LABEL_397;
              }
              v55.i32[0] = v332.i32[0];
              goto LABEL_395;
            }
          }
LABEL_397:
          ++v63;
          v87 += v38 != 0;
          ++v28;
          v327 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v328)
          {
LABEL_398:
            uint64_t v38 = &v87[v428];
            goto LABEL_399;
          }
        }
      case 24:
        uint64_t v427 = v34;
        float v339 = v62[1].f32;
        int v340 = v39;
        uint64_t v243 = v38;
        while (1)
        {
          unsigned int v341 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v342 = *v243 * v341 + ((*v243 * v341) >> 8) + 1;
              if (!BYTE1(v342)) {
                goto LABEL_414;
              }
              unsigned int v341 = v342 >> 8;
            }
            float v343 = (float)v341 * *((float *)v84 + 677);
            *(float *)&double v60 = v343 * *v339;
            if (*(float *)&v60 > 0.0)
            {
              int8x16_t v344 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v339 - 4), v343);
              if (v67)
              {
                float v345 = COERCE_FLOAT(bswap32(*v25));
                if (v345 <= 0.0)
                {
LABEL_412:
                  *uint64_t v28 = vrev32q_s8(v344);
                  *unint64_t v25 = bswap32(LODWORD(v60));
                  goto LABEL_414;
                }
              }
              else
              {
                float v345 = 1.0;
              }
              int8x16_t v346 = vrev32q_s8(*v28);
              PDAhuePDA((float *)v437.i32, *(float *)v346.i32, *(float *)&v346.i32[1], *(float *)&v346.i32[2], *(float *)&v346.i32[3], v345, *(double *)v344.i64, v60, v61, *(float *)v344.i32, *(float *)&v344.i32[1], *(float *)&v344.i32[2], *(float *)&v344.i32[3], *(float *)&v60);
              int v67 = v435;
              int8x16_t v344 = v437;
              if (!v435)
              {
                *uint64_t v28 = vrev32q_s8(v437);
                uint64_t v84 = &xmmword_1850CE000;
                goto LABEL_414;
              }
              *(float *)&double v60 = v438;
              uint64_t v84 = &xmmword_1850CE000;
              goto LABEL_412;
            }
          }
LABEL_414:
          ++v63;
          v243 += v38 != 0;
          ++v28;
          v339 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v340) {
            goto LABEL_463;
          }
        }
      case 25:
        uint64_t v427 = v34;
        uint64_t v347 = v62[1].f32;
        int v348 = v39;
        uint64_t v243 = v38;
        while (1)
        {
          unsigned int v349 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v350 = *v243 * v349 + ((*v243 * v349) >> 8) + 1;
              if (!BYTE1(v350)) {
                goto LABEL_430;
              }
              unsigned int v349 = v350 >> 8;
            }
            float v351 = (float)v349 * *((float *)v84 + 677);
            *(float *)&double v60 = v351 * *v347;
            if (*(float *)&v60 > 0.0)
            {
              int8x16_t v352 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v347 - 4), v351);
              if (v67)
              {
                float v353 = COERCE_FLOAT(bswap32(*v25));
                if (v353 <= 0.0)
                {
LABEL_428:
                  *uint64_t v28 = vrev32q_s8(v352);
                  *unint64_t v25 = bswap32(LODWORD(v60));
                  goto LABEL_430;
                }
              }
              else
              {
                float v353 = 1.0;
              }
              int8x16_t v354 = vrev32q_s8(*v28);
              PDAsaturationPDA((float *)v437.i32, *(float *)v354.i32, *(float *)&v354.i32[1], *(float *)&v354.i32[2], *(float *)&v354.i32[3], v353, *(double *)v352.i64, v60, v61, *(float *)v352.i32, *(float *)&v352.i32[1], *(float *)&v352.i32[2], *(float *)&v352.i32[3], *(float *)&v60);
              int v67 = v435;
              int8x16_t v352 = v437;
              if (!v435)
              {
                *uint64_t v28 = vrev32q_s8(v437);
                uint64_t v84 = &xmmword_1850CE000;
                goto LABEL_430;
              }
              *(float *)&double v60 = v438;
              uint64_t v84 = &xmmword_1850CE000;
              goto LABEL_428;
            }
          }
LABEL_430:
          ++v63;
          v243 += v38 != 0;
          ++v28;
          v347 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v348) {
            goto LABEL_463;
          }
        }
      case 26:
        uint64_t v427 = v34;
        float32x4_t v355 = v62[1].f32;
        int v356 = v39;
        uint64_t v243 = v38;
        while (1)
        {
          unsigned int v357 = *v63;
          if (*v63)
          {
            if (v38)
            {
              unsigned int v358 = *v243 * v357 + ((*v243 * v357) >> 8) + 1;
              if (!BYTE1(v358)) {
                goto LABEL_446;
              }
              unsigned int v357 = v358 >> 8;
            }
            float v359 = (float)v357 * *((float *)v84 + 677);
            float v360 = v359 * *v355;
            if (v360 > 0.0)
            {
              int8x16_t v361 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v355 - 4), v359);
              if (v67)
              {
                LODWORD(v59) = bswap32(*v25);
                if (*(float *)&v59 <= 0.0)
                {
LABEL_444:
                  *uint64_t v28 = vrev32q_s8(v361);
                  *unint64_t v25 = bswap32(LODWORD(v360));
                  goto LABEL_446;
                }
              }
              else
              {
                LODWORD(v59) = 1.0;
              }
              int8x16_t v417 = vrev32q_s8(*v28);
              PDAluminosityPDA((float *)v437.i32, *(float *)v361.i32, *(float *)&v361.i32[1], *(float *)&v361.i32[2], *(float *)&v361.i32[3], v360, v59, *(double *)v417.i64, v61, *(float *)v417.i32, *(float *)&v417.i32[1], *(float *)&v417.i32[2], *(float *)&v417.i32[3], *(float *)&v59);
              int v67 = v435;
              int8x16_t v361 = v437;
              if (!v435)
              {
                *uint64_t v28 = vrev32q_s8(v437);
                uint64_t v84 = &xmmword_1850CE000;
                goto LABEL_446;
              }
              float v360 = v438;
              uint64_t v84 = &xmmword_1850CE000;
              goto LABEL_444;
            }
          }
LABEL_446:
          ++v63;
          v243 += v38 != 0;
          ++v28;
          v355 += 5;
          unint64_t v25 = (unsigned int *)((char *)v25 + v44);
          if (!--v356) {
            goto LABEL_463;
          }
        }
      case 27:
        uint64_t v427 = v34;
        float32x4_t v362 = v62[1].f32;
        int v363 = v39;
        uint64_t v243 = v38;
        int v364 = v363;
        break;
      default:
        goto LABEL_464;
    }
    while (1)
    {
      unsigned int v365 = *v63;
      if (*v63)
      {
        if (v38)
        {
          unsigned int v366 = *v243 * v365 + ((*v243 * v365) >> 8) + 1;
          if (!BYTE1(v366)) {
            goto LABEL_462;
          }
          unsigned int v365 = v366 >> 8;
        }
        float v367 = (float)v365 * *((float *)v84 + 677);
        *(float *)&double v60 = v367 * *v362;
        if (*(float *)&v60 > 0.0)
        {
          int8x16_t v368 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v362 - 4), v367);
          if (v67)
          {
            float v369 = COERCE_FLOAT(bswap32(*v25));
            if (v369 <= 0.0)
            {
LABEL_460:
              *uint64_t v28 = vrev32q_s8(v368);
              *unint64_t v25 = bswap32(LODWORD(v60));
              goto LABEL_462;
            }
          }
          else
          {
            float v369 = 1.0;
          }
          int8x16_t v370 = vrev32q_s8(*v28);
          PDAluminosityPDA((float *)v437.i32, *(float *)v370.i32, *(float *)&v370.i32[1], *(float *)&v370.i32[2], *(float *)&v370.i32[3], v369, *(double *)v368.i64, v60, v61, *(float *)v368.i32, *(float *)&v368.i32[1], *(float *)&v368.i32[2], *(float *)&v368.i32[3], *(float *)&v60);
          int v67 = v435;
          int8x16_t v368 = v437;
          if (!v435)
          {
            *uint64_t v28 = vrev32q_s8(v437);
            uint64_t v84 = &xmmword_1850CE000;
            goto LABEL_462;
          }
          *(float *)&double v60 = v438;
          uint64_t v84 = &xmmword_1850CE000;
          goto LABEL_460;
        }
      }
LABEL_462:
      ++v63;
      v243 += v38 != 0;
      ++v28;
      v362 += 5;
      unint64_t v25 = (unsigned int *)((char *)v25 + v44);
      if (!--v364)
      {
LABEL_463:
        uint64_t v34 = v427;
        uint64_t v38 = &v243[v428];
        v28 += v429;
        v25 += v431;
        int v32 = v426;
        uint64_t v39 = v424;
        unsigned int v33 = v425;
        goto LABEL_464;
      }
    }
  }
}

uint64_t CMYKF_image_mark_rgb32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  if (*(void *)(result + 40)) {
    char v6 = 0;
  }
  else {
    char v6 = -1;
  }
  uint64_t v7 = (unsigned int *)*((void *)a2 + 2);
  unint64_t v8 = (unsigned int *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v119 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v119 = 0;
  }
  float v9 = *((float *)a2 + 2);
  int v10 = a2[1];
  int v118 = *a2;
  uint64_t v117 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 17);
  uint64_t v11 = *((void *)a2 + 18);
  uint64_t v13 = *((void *)a2 + 9);
  uint64_t v116 = *((void *)a2 + 11);
  uint64_t v14 = *((void *)a2 + 7) + v116 * a4;
  uint64_t v15 = *(unsigned int **)(result + 32);
  uint64_t v16 = (unsigned int *)((char *)v15
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  uint64_t v17 = 4 * (v8 != 0);
  if (*(void *)(result + 176))
  {
    uint64_t v115 = *((void *)a2 + 13);
    uint64_t v113 = ~(-1 << v13);
    uint64_t v114 = *((void *)a2 + 15);
    char v112 = v13 - 4;
    uint64_t v111 = v11 + 16 * a3 + 8;
    char v18 = *((void *)a2 + 9);
    while (1)
    {
      if (((v114 - v14) | (v14 - v115)) < 0)
      {
        unsigned int v21 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = ((v14 & (unint64_t)v113) >> v112) & 0xF;
        if ((unint64_t)(v19 - 7) >= 9) {
          uint64_t v20 = -v12;
        }
        else {
          uint64_t v20 = v12;
        }
        unsigned int v21 = weights_21383[v19] & 0xF;
      }
      uint64_t v22 = (char *)v15 + (v14 >> v13) * v12;
      if (v118 == 1)
      {
        if (a5 >= 1)
        {
          uint64_t result = v21;
          unint64_t v23 = (uint64_t *)v111;
          uint64_t v24 = a5;
          do
          {
            uint64_t v25 = *(v23 - 1);
            uint64_t v26 = *v23;
            uint64_t v27 = &v22[v25];
            if (v16 >= (unsigned int *)&v22[v25]) {
              uint64_t v28 = (unsigned int *)&v22[v25];
            }
            else {
              uint64_t v28 = v16;
            }
            if (v15 > v28) {
              uint64_t v28 = v15;
            }
            unsigned int v29 = *v28;
            if ((v26 & 0xF) != 0)
            {
              int v30 = (unsigned int *)&v27[v26 >> 4];
              if (v16 < v30) {
                int v30 = v16;
              }
              if (v15 > v30) {
                int v30 = v15;
              }
              unsigned int v31 = *v30;
              if (v21)
              {
                int v32 = (unsigned int *)&v27[v20];
                if (v16 >= v32) {
                  unsigned int v33 = v32;
                }
                else {
                  unsigned int v33 = v16;
                }
                if (v15 > v33) {
                  unsigned int v33 = v15;
                }
                unsigned int v34 = *v33;
                uint64_t v35 = (unsigned int *)((char *)v32 + (v26 >> 4));
                if (v16 < v35) {
                  uint64_t v35 = v16;
                }
                if (v15 > v35) {
                  uint64_t v35 = v15;
                }
                unsigned int v36 = BLEND8_21385[v21];
                unsigned int v29 = v29 - ((v36 & v29) >> v21) + ((v36 & v34) >> v21);
                unsigned int v31 = v31 - ((v36 & v31) >> v21) + ((v36 & *v35) >> v21);
              }
              unsigned int v29 = v29
                  - ((BLEND8_21385[*v23 & 0xF] & v29) >> (*v23 & 0xF))
                  + ((BLEND8_21385[*v23 & 0xF] & v31) >> (*v23 & 0xF));
            }
            else if (v21)
            {
              uint64_t v37 = (unsigned int *)&v27[v20];
              if (v16 < (unsigned int *)&v27[v20]) {
                uint64_t v37 = v16;
              }
              if (v15 > v37) {
                uint64_t v37 = v15;
              }
              unsigned int v29 = v29 - ((BLEND8_21385[v21] & v29) >> v21) + ((BLEND8_21385[v21] & *v37) >> v21);
            }
            unsigned int v38 = __ROL4__(v29, v10);
            unsigned __int8 v39 = v38 | v6;
            float v40 = *(float *)&_blt_float[HIBYTE(v38)];
            int v41 = BYTE2(v38);
            int v42 = BYTE1(v38);
            if (v9 >= 1.0)
            {
              float v43 = *(float *)&_blt_float[v41];
              float v44 = *(float *)&_blt_float[v42];
              float v45 = *(float *)&_blt_float[v39];
            }
            else
            {
              float v40 = v9 * v40;
              float v43 = v9 * *(float *)&_blt_float[v41];
              float v44 = v9 * *(float *)&_blt_float[v42];
              float v45 = v9 * *(float *)&_blt_float[v39];
            }
            if (v40 <= v43) {
              float v46 = v43;
            }
            else {
              float v46 = v40;
            }
            if (v44 > v46) {
              float v46 = v44;
            }
            *uint64_t v7 = bswap32(COERCE_UNSIGNED_INT(v46 - v40));
            v7[1] = bswap32(COERCE_UNSIGNED_INT(v46 - v43));
            v7[2] = bswap32(COERCE_UNSIGNED_INT(v46 - v44));
            v7[3] = bswap32(COERCE_UNSIGNED_INT(v45 - v46));
            if (v8) {
              unsigned int *v8 = bswap32(LODWORD(v45));
            }
            v23 += 2;
            v7 += 4;
            unint64_t v8 = (unsigned int *)((char *)v8 + v17);
            --v24;
          }
          while (v24);
        }
        goto LABEL_108;
      }
      if (a5 >= 1) {
        break;
      }
LABEL_108:
      v7 += 4 * v117;
      v14 += v116;
      v8 += v119;
      --a6;
      LOBYTE(v13) = v18;
      if (!a6) {
        return result;
      }
    }
    uint64_t v47 = (uint64_t *)v111;
    uint64_t result = a5;
    while (1)
    {
      uint64_t v48 = *(v47 - 1);
      uint64_t v49 = *v47;
      uint64_t v50 = &v22[v48];
      if (v16 >= (unsigned int *)&v22[v48]) {
        uint64_t v51 = (unsigned int *)&v22[v48];
      }
      else {
        uint64_t v51 = v16;
      }
      if (v15 > v51) {
        uint64_t v51 = v15;
      }
      unsigned int v52 = *v51;
      if ((v49 & 0xF) != 0)
      {
        uint64_t v53 = (unsigned int *)&v50[v49 >> 4];
        if (v16 < v53) {
          uint64_t v53 = v16;
        }
        if (v15 > v53) {
          uint64_t v53 = v15;
        }
        unsigned int v54 = *v53;
        if (v21)
        {
          float32x4_t v55 = (unsigned int *)&v50[v20];
          if (v16 >= v55) {
            float32x4_t v56 = v55;
          }
          else {
            float32x4_t v56 = v16;
          }
          if (v15 > v56) {
            float32x4_t v56 = v15;
          }
          unsigned int v57 = *v56;
          double v58 = (unsigned int *)((char *)v55 + (v49 >> 4));
          if (v16 < v58) {
            double v58 = v16;
          }
          if (v15 > v58) {
            double v58 = v15;
          }
          unsigned int v59 = BLEND8_21385[v21];
          unsigned int v52 = v52 - ((v59 & v52) >> v21) + ((v59 & v57) >> v21);
          unsigned int v54 = v54 - ((v59 & v54) >> v21) + ((v59 & *v58) >> v21);
        }
        unsigned int v52 = v52
            - ((BLEND8_21385[*v47 & 0xF] & v52) >> (*v47 & 0xF))
            + ((BLEND8_21385[*v47 & 0xF] & v54) >> (*v47 & 0xF));
      }
      else if (v21)
      {
        double v60 = (unsigned int *)&v50[v20];
        if (v16 < (unsigned int *)&v50[v20]) {
          double v60 = v16;
        }
        if (v15 > v60) {
          double v60 = v15;
        }
        unsigned int v52 = v52 - ((BLEND8_21385[v21] & v52) >> v21) + ((BLEND8_21385[v21] & *v60) >> v21);
      }
      unsigned int v61 = __ROL4__(v52, v10);
      unsigned __int8 v62 = v61 | v6;
      float v63 = *(float *)&_blt_float[HIBYTE(v61)];
      int v64 = BYTE2(v61);
      int v65 = BYTE1(v61);
      if (v9 >= 1.0)
      {
        float v66 = *(float *)&_blt_float[v64];
        float v67 = *(float *)&_blt_float[v65];
        float v68 = *(float *)&_blt_float[v62];
      }
      else
      {
        float v63 = v9 * v63;
        float v66 = v9 * *(float *)&_blt_float[v64];
        float v67 = v9 * *(float *)&_blt_float[v65];
        float v68 = v9 * *(float *)&_blt_float[v62];
      }
      if (v63 <= v66) {
        float v69 = v66;
      }
      else {
        float v69 = v63;
      }
      if (v67 <= v69) {
        float v70 = v69;
      }
      else {
        float v70 = v67;
      }
      float v71 = v70 - v63;
      float v72 = v70 - v66;
      float v73 = v70 - v67;
      float v74 = v68 - v70;
      if (v8)
      {
        if (v68 >= 1.0) {
          goto LABEL_101;
        }
        if (v68 > 0.0)
        {
          float v71 = v71 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v68));
          float v72 = v72 + (float)(COERCE_FLOAT(bswap32(v7[1])) * (float)(1.0 - v68));
          float v73 = v73 + (float)(COERCE_FLOAT(bswap32(v7[2])) * (float)(1.0 - v68));
          float v74 = v74 + (float)(COERCE_FLOAT(bswap32(v7[3])) * (float)(1.0 - v68));
          float v68 = v68 + (float)(COERCE_FLOAT(bswap32(*v8)) * (float)(1.0 - v68));
LABEL_101:
          *uint64_t v7 = bswap32(LODWORD(v71));
          v7[1] = bswap32(LODWORD(v72));
          v7[2] = bswap32(LODWORD(v73));
          v7[3] = bswap32(LODWORD(v74));
          unsigned int *v8 = bswap32(LODWORD(v68));
        }
      }
      else
      {
        if (v68 >= 1.0)
        {
          unsigned int v76 = bswap32(LODWORD(v71));
          unsigned int v77 = bswap32(LODWORD(v72));
          unsigned int v78 = bswap32(LODWORD(v73));
          float v79 = v68 - v70;
LABEL_106:
          *uint64_t v7 = v76;
          v7[1] = v77;
          v7[2] = v78;
          v7[3] = bswap32(LODWORD(v79));
          goto LABEL_107;
        }
        if (v68 > 0.0)
        {
          float v75 = 1.0 - v68;
          unsigned int v76 = bswap32(COERCE_UNSIGNED_INT(v71 + (float)(COERCE_FLOAT(bswap32(*v7)) * v75)));
          unsigned int v77 = bswap32(COERCE_UNSIGNED_INT(v72 + (float)(COERCE_FLOAT(bswap32(v7[1])) * v75)));
          unsigned int v78 = bswap32(COERCE_UNSIGNED_INT(v73 + (float)(COERCE_FLOAT(bswap32(v7[2])) * v75)));
          float v79 = v74 + (float)(COERCE_FLOAT(bswap32(v7[3])) * v75);
          goto LABEL_106;
        }
      }
LABEL_107:
      v47 += 2;
      v7 += 4;
      unint64_t v8 = (unsigned int *)((char *)v8 + v17);
      if (!--result) {
        goto LABEL_108;
      }
    }
  }
  uint64_t v80 = v11 + 16 * a3;
  do
  {
    uint64_t v81 = (char *)v15 + (v14 >> v13) * v12;
    if (v118 != 1)
    {
      uint64_t result = v80;
      uint64_t v92 = a5;
      if (a5 < 1) {
        goto LABEL_156;
      }
      while (1)
      {
        uint64_t v93 = *(void *)result;
        result += 16;
        unsigned int v94 = (unsigned int *)&v81[v93];
        if (v16 < (unsigned int *)&v81[v93]) {
          unsigned int v94 = v16;
        }
        if (v15 > v94) {
          unsigned int v94 = v15;
        }
        unsigned int v95 = __ROL4__(*v94, v10);
        float v96 = *(float *)&_blt_float[HIBYTE(v95)];
        if (v9 >= 1.0)
        {
          float v97 = *(float *)&_blt_float[BYTE2(v95)];
          float v98 = *(float *)&_blt_float[BYTE1(v95)];
          float v99 = *(float *)&_blt_float[(v95 | v6)];
        }
        else
        {
          float v96 = v9 * v96;
          float v97 = v9 * *(float *)&_blt_float[BYTE2(v95)];
          float v98 = v9 * *(float *)&_blt_float[BYTE1(v95)];
          float v99 = v9 * *(float *)&_blt_float[(v95 | v6)];
        }
        if (v96 <= v97) {
          float v100 = v97;
        }
        else {
          float v100 = v96;
        }
        if (v98 <= v100) {
          float v101 = v100;
        }
        else {
          float v101 = v98;
        }
        float v102 = v101 - v96;
        float v103 = v101 - v97;
        float v104 = v101 - v98;
        float v105 = v99 - v101;
        if (v8)
        {
          if (v99 >= 1.0) {
            goto LABEL_149;
          }
          if (v99 > 0.0)
          {
            float v102 = v102 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v99));
            float v103 = v103 + (float)(COERCE_FLOAT(bswap32(v7[1])) * (float)(1.0 - v99));
            float v104 = v104 + (float)(COERCE_FLOAT(bswap32(v7[2])) * (float)(1.0 - v99));
            float v105 = v105 + (float)(COERCE_FLOAT(bswap32(v7[3])) * (float)(1.0 - v99));
            float v99 = v99 + (float)(COERCE_FLOAT(bswap32(*v8)) * (float)(1.0 - v99));
LABEL_149:
            *uint64_t v7 = bswap32(LODWORD(v102));
            v7[1] = bswap32(LODWORD(v103));
            v7[2] = bswap32(LODWORD(v104));
            v7[3] = bswap32(LODWORD(v105));
            unsigned int *v8 = bswap32(LODWORD(v99));
          }
        }
        else
        {
          if (v99 >= 1.0)
          {
            unsigned int v107 = bswap32(LODWORD(v102));
            unsigned int v108 = bswap32(LODWORD(v103));
            unsigned int v109 = bswap32(LODWORD(v104));
            float v110 = v99 - v101;
LABEL_154:
            *uint64_t v7 = v107;
            v7[1] = v108;
            v7[2] = v109;
            v7[3] = bswap32(LODWORD(v110));
            goto LABEL_155;
          }
          if (v99 > 0.0)
          {
            float v106 = 1.0 - v99;
            unsigned int v107 = bswap32(COERCE_UNSIGNED_INT(v102 + (float)(COERCE_FLOAT(bswap32(*v7)) * v106)));
            unsigned int v108 = bswap32(COERCE_UNSIGNED_INT(v103 + (float)(COERCE_FLOAT(bswap32(v7[1])) * v106)));
            unsigned int v109 = bswap32(COERCE_UNSIGNED_INT(v104 + (float)(COERCE_FLOAT(bswap32(v7[2])) * v106)));
            float v110 = v105 + (float)(COERCE_FLOAT(bswap32(v7[3])) * v106);
            goto LABEL_154;
          }
        }
LABEL_155:
        v7 += 4;
        unint64_t v8 = (unsigned int *)((char *)v8 + v17);
        if (!--v92) {
          goto LABEL_156;
        }
      }
    }
    if (a5 >= 1)
    {
      uint64_t result = v80;
      uint64_t v82 = a5;
      do
      {
        uint64_t v83 = *(void *)result;
        result += 16;
        uint64_t v84 = (unsigned int *)&v81[v83];
        if (v16 < (unsigned int *)&v81[v83]) {
          uint64_t v84 = v16;
        }
        if (v15 > v84) {
          uint64_t v84 = v15;
        }
        unsigned int v85 = __ROL4__(*v84, v10);
        float v86 = *(float *)&_blt_float[HIBYTE(v85)];
        if (v9 >= 1.0)
        {
          float v87 = *(float *)&_blt_float[BYTE2(v85)];
          float v88 = *(float *)&_blt_float[BYTE1(v85)];
          float v89 = *(float *)&_blt_float[(v85 | v6)];
        }
        else
        {
          float v86 = v9 * v86;
          float v87 = v9 * *(float *)&_blt_float[BYTE2(v85)];
          float v88 = v9 * *(float *)&_blt_float[BYTE1(v85)];
          float v89 = v9 * *(float *)&_blt_float[(v85 | v6)];
        }
        if (v86 <= v87) {
          float v90 = v87;
        }
        else {
          float v90 = v86;
        }
        if (v88 <= v90) {
          float v91 = v90;
        }
        else {
          float v91 = v88;
        }
        *uint64_t v7 = bswap32(COERCE_UNSIGNED_INT(v91 - v86));
        v7[1] = bswap32(COERCE_UNSIGNED_INT(v91 - v87));
        v7[2] = bswap32(COERCE_UNSIGNED_INT(v91 - v88));
        v7[3] = bswap32(COERCE_UNSIGNED_INT(v89 - v91));
        if (v8) {
          unsigned int *v8 = bswap32(LODWORD(v89));
        }
        v7 += 4;
        unint64_t v8 = (unsigned int *)((char *)v8 + v17);
        --v82;
      }
      while (v82);
    }
LABEL_156:
    v7 += 4 * v117;
    v14 += v116;
    v8 += v119;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKF_image_mark_RGB32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  if (*(void *)(result + 40)) {
    char v6 = 0;
  }
  else {
    char v6 = -1;
  }
  uint64_t v7 = (unsigned int *)*((void *)a2 + 2);
  unint64_t v8 = (unsigned int *)*((void *)a2 + 4);
  if (v8) {
    uint64_t v119 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v119 = 0;
  }
  float v9 = *((float *)a2 + 2);
  int v10 = a2[1];
  int v118 = *a2;
  uint64_t v117 = *((void *)a2 + 3) - a5;
  uint64_t v12 = *((void *)a2 + 17);
  uint64_t v11 = *((void *)a2 + 18);
  uint64_t v13 = *((void *)a2 + 9);
  uint64_t v116 = *((void *)a2 + 11);
  uint64_t v14 = *((void *)a2 + 7) + v116 * a4;
  uint64_t v15 = *(unsigned int **)(result + 32);
  uint64_t v16 = (unsigned int *)((char *)v15
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  uint64_t v17 = 4 * (v8 != 0);
  if (*(void *)(result + 176))
  {
    uint64_t v115 = *((void *)a2 + 13);
    uint64_t v113 = ~(-1 << v13);
    uint64_t v114 = *((void *)a2 + 15);
    char v112 = v13 - 4;
    uint64_t v111 = v11 + 16 * a3 + 8;
    char v18 = *((void *)a2 + 9);
    while (1)
    {
      if (((v114 - v14) | (v14 - v115)) < 0)
      {
        unsigned int v21 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = ((v14 & (unint64_t)v113) >> v112) & 0xF;
        if ((unint64_t)(v19 - 7) >= 9) {
          uint64_t v20 = -v12;
        }
        else {
          uint64_t v20 = v12;
        }
        unsigned int v21 = weights_21383[v19] & 0xF;
      }
      uint64_t v22 = (char *)v15 + (v14 >> v13) * v12;
      if (v118 == 1)
      {
        if (a5 >= 1)
        {
          uint64_t result = v21;
          unint64_t v23 = (uint64_t *)v111;
          uint64_t v24 = a5;
          do
          {
            uint64_t v25 = *(v23 - 1);
            uint64_t v26 = *v23;
            uint64_t v27 = &v22[v25];
            if (v16 >= (unsigned int *)&v22[v25]) {
              uint64_t v28 = (unsigned int *)&v22[v25];
            }
            else {
              uint64_t v28 = v16;
            }
            if (v15 > v28) {
              uint64_t v28 = v15;
            }
            unsigned int v29 = bswap32(*v28);
            if ((v26 & 0xF) != 0)
            {
              int v30 = (unsigned int *)&v27[v26 >> 4];
              if (v16 < v30) {
                int v30 = v16;
              }
              if (v15 > v30) {
                int v30 = v15;
              }
              unsigned int v31 = bswap32(*v30);
              if (v21)
              {
                int v32 = (unsigned int *)&v27[v20];
                if (v16 >= v32) {
                  unsigned int v33 = v32;
                }
                else {
                  unsigned int v33 = v16;
                }
                if (v15 > v33) {
                  unsigned int v33 = v15;
                }
                unsigned int v34 = bswap32(*v33);
                uint64_t v35 = (unsigned int *)((char *)v32 + (v26 >> 4));
                if (v16 < v35) {
                  uint64_t v35 = v16;
                }
                if (v15 > v35) {
                  uint64_t v35 = v15;
                }
                int v36 = BLEND8_21385[v21];
                unsigned int v29 = v29 - ((v36 & v29) >> v21) + ((v36 & v34) >> v21);
                unsigned int v31 = v31 - ((v36 & v31) >> v21) + ((bswap32(*v35) & v36) >> v21);
              }
              unsigned int v29 = v29
                  - ((BLEND8_21385[*v23 & 0xF] & v29) >> (*v23 & 0xF))
                  + ((BLEND8_21385[*v23 & 0xF] & v31) >> (*v23 & 0xF));
            }
            else if (v21)
            {
              uint64_t v37 = (unsigned int *)&v27[v20];
              if (v16 < (unsigned int *)&v27[v20]) {
                uint64_t v37 = v16;
              }
              if (v15 > v37) {
                uint64_t v37 = v15;
              }
              unsigned int v29 = v29 - ((BLEND8_21385[v21] & v29) >> v21) + ((bswap32(*v37) & BLEND8_21385[v21]) >> v21);
            }
            unsigned int v38 = __ROL4__(v29, v10);
            unsigned __int8 v39 = v38 | v6;
            float v40 = *(float *)&_blt_float[HIBYTE(v38)];
            int v41 = BYTE2(v38);
            int v42 = BYTE1(v38);
            if (v9 >= 1.0)
            {
              float v43 = *(float *)&_blt_float[v41];
              float v44 = *(float *)&_blt_float[v42];
              float v45 = *(float *)&_blt_float[v39];
            }
            else
            {
              float v40 = v9 * v40;
              float v43 = v9 * *(float *)&_blt_float[v41];
              float v44 = v9 * *(float *)&_blt_float[v42];
              float v45 = v9 * *(float *)&_blt_float[v39];
            }
            if (v40 <= v43) {
              float v46 = v43;
            }
            else {
              float v46 = v40;
            }
            if (v44 > v46) {
              float v46 = v44;
            }
            *uint64_t v7 = bswap32(COERCE_UNSIGNED_INT(v46 - v40));
            v7[1] = bswap32(COERCE_UNSIGNED_INT(v46 - v43));
            v7[2] = bswap32(COERCE_UNSIGNED_INT(v46 - v44));
            v7[3] = bswap32(COERCE_UNSIGNED_INT(v45 - v46));
            if (v8) {
              unsigned int *v8 = bswap32(LODWORD(v45));
            }
            v23 += 2;
            v7 += 4;
            unint64_t v8 = (unsigned int *)((char *)v8 + v17);
            --v24;
          }
          while (v24);
        }
        goto LABEL_108;
      }
      if (a5 >= 1) {
        break;
      }
LABEL_108:
      v7 += 4 * v117;
      v14 += v116;
      v8 += v119;
      --a6;
      LOBYTE(v13) = v18;
      if (!a6) {
        return result;
      }
    }
    uint64_t v47 = (uint64_t *)v111;
    uint64_t result = a5;
    while (1)
    {
      uint64_t v48 = *(v47 - 1);
      uint64_t v49 = *v47;
      uint64_t v50 = &v22[v48];
      if (v16 >= (unsigned int *)&v22[v48]) {
        uint64_t v51 = (unsigned int *)&v22[v48];
      }
      else {
        uint64_t v51 = v16;
      }
      if (v15 > v51) {
        uint64_t v51 = v15;
      }
      unsigned int v52 = bswap32(*v51);
      if ((v49 & 0xF) != 0)
      {
        uint64_t v53 = (unsigned int *)&v50[v49 >> 4];
        if (v16 < v53) {
          uint64_t v53 = v16;
        }
        if (v15 > v53) {
          uint64_t v53 = v15;
        }
        unsigned int v54 = bswap32(*v53);
        if (v21)
        {
          float32x4_t v55 = (unsigned int *)&v50[v20];
          if (v16 >= v55) {
            float32x4_t v56 = v55;
          }
          else {
            float32x4_t v56 = v16;
          }
          if (v15 > v56) {
            float32x4_t v56 = v15;
          }
          unsigned int v57 = bswap32(*v56);
          double v58 = (unsigned int *)((char *)v55 + (v49 >> 4));
          if (v16 < v58) {
            double v58 = v16;
          }
          if (v15 > v58) {
            double v58 = v15;
          }
          int v59 = BLEND8_21385[v21];
          unsigned int v52 = v52 - ((v59 & v52) >> v21) + ((v59 & v57) >> v21);
          unsigned int v54 = v54 - ((v59 & v54) >> v21) + ((bswap32(*v58) & v59) >> v21);
        }
        unsigned int v52 = v52
            - ((BLEND8_21385[*v47 & 0xF] & v52) >> (*v47 & 0xF))
            + ((BLEND8_21385[*v47 & 0xF] & v54) >> (*v47 & 0xF));
      }
      else if (v21)
      {
        double v60 = (unsigned int *)&v50[v20];
        if (v16 < (unsigned int *)&v50[v20]) {
          double v60 = v16;
        }
        if (v15 > v60) {
          double v60 = v15;
        }
        unsigned int v52 = v52 - ((BLEND8_21385[v21] & v52) >> v21) + ((bswap32(*v60) & BLEND8_21385[v21]) >> v21);
      }
      unsigned int v61 = __ROL4__(v52, v10);
      unsigned __int8 v62 = v61 | v6;
      float v63 = *(float *)&_blt_float[HIBYTE(v61)];
      int v64 = BYTE2(v61);
      int v65 = BYTE1(v61);
      if (v9 >= 1.0)
      {
        float v66 = *(float *)&_blt_float[v64];
        float v67 = *(float *)&_blt_float[v65];
        float v68 = *(float *)&_blt_float[v62];
      }
      else
      {
        float v63 = v9 * v63;
        float v66 = v9 * *(float *)&_blt_float[v64];
        float v67 = v9 * *(float *)&_blt_float[v65];
        float v68 = v9 * *(float *)&_blt_float[v62];
      }
      if (v63 <= v66) {
        float v69 = v66;
      }
      else {
        float v69 = v63;
      }
      if (v67 <= v69) {
        float v70 = v69;
      }
      else {
        float v70 = v67;
      }
      float v71 = v70 - v63;
      float v72 = v70 - v66;
      float v73 = v70 - v67;
      float v74 = v68 - v70;
      if (v8)
      {
        if (v68 >= 1.0) {
          goto LABEL_101;
        }
        if (v68 > 0.0)
        {
          float v71 = v71 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v68));
          float v72 = v72 + (float)(COERCE_FLOAT(bswap32(v7[1])) * (float)(1.0 - v68));
          float v73 = v73 + (float)(COERCE_FLOAT(bswap32(v7[2])) * (float)(1.0 - v68));
          float v74 = v74 + (float)(COERCE_FLOAT(bswap32(v7[3])) * (float)(1.0 - v68));
          float v68 = v68 + (float)(COERCE_FLOAT(bswap32(*v8)) * (float)(1.0 - v68));
LABEL_101:
          *uint64_t v7 = bswap32(LODWORD(v71));
          v7[1] = bswap32(LODWORD(v72));
          v7[2] = bswap32(LODWORD(v73));
          v7[3] = bswap32(LODWORD(v74));
          unsigned int *v8 = bswap32(LODWORD(v68));
        }
      }
      else
      {
        if (v68 >= 1.0)
        {
          unsigned int v76 = bswap32(LODWORD(v71));
          unsigned int v77 = bswap32(LODWORD(v72));
          unsigned int v78 = bswap32(LODWORD(v73));
          float v79 = v68 - v70;
LABEL_106:
          *uint64_t v7 = v76;
          v7[1] = v77;
          v7[2] = v78;
          v7[3] = bswap32(LODWORD(v79));
          goto LABEL_107;
        }
        if (v68 > 0.0)
        {
          float v75 = 1.0 - v68;
          unsigned int v76 = bswap32(COERCE_UNSIGNED_INT(v71 + (float)(COERCE_FLOAT(bswap32(*v7)) * v75)));
          unsigned int v77 = bswap32(COERCE_UNSIGNED_INT(v72 + (float)(COERCE_FLOAT(bswap32(v7[1])) * v75)));
          unsigned int v78 = bswap32(COERCE_UNSIGNED_INT(v73 + (float)(COERCE_FLOAT(bswap32(v7[2])) * v75)));
          float v79 = v74 + (float)(COERCE_FLOAT(bswap32(v7[3])) * v75);
          goto LABEL_106;
        }
      }
LABEL_107:
      v47 += 2;
      v7 += 4;
      unint64_t v8 = (unsigned int *)((char *)v8 + v17);
      if (!--result) {
        goto LABEL_108;
      }
    }
  }
  uint64_t v80 = v11 + 16 * a3;
  do
  {
    uint64_t v81 = (char *)v15 + (v14 >> v13) * v12;
    if (v118 != 1)
    {
      uint64_t result = v80;
      uint64_t v92 = a5;
      if (a5 < 1) {
        goto LABEL_156;
      }
      while (1)
      {
        uint64_t v93 = *(void *)result;
        result += 16;
        unsigned int v94 = (unsigned int *)&v81[v93];
        if (v16 < (unsigned int *)&v81[v93]) {
          unsigned int v94 = v16;
        }
        if (v15 > v94) {
          unsigned int v94 = v15;
        }
        unsigned int v95 = __ROL4__(bswap32(*v94), v10);
        float v96 = *(float *)&_blt_float[HIBYTE(v95)];
        if (v9 >= 1.0)
        {
          float v97 = *(float *)&_blt_float[BYTE2(v95)];
          float v98 = *(float *)&_blt_float[BYTE1(v95)];
          float v99 = *(float *)&_blt_float[(v95 | v6)];
        }
        else
        {
          float v96 = v9 * v96;
          float v97 = v9 * *(float *)&_blt_float[BYTE2(v95)];
          float v98 = v9 * *(float *)&_blt_float[BYTE1(v95)];
          float v99 = v9 * *(float *)&_blt_float[(v95 | v6)];
        }
        if (v96 <= v97) {
          float v100 = v97;
        }
        else {
          float v100 = v96;
        }
        if (v98 <= v100) {
          float v101 = v100;
        }
        else {
          float v101 = v98;
        }
        float v102 = v101 - v96;
        float v103 = v101 - v97;
        float v104 = v101 - v98;
        float v105 = v99 - v101;
        if (v8)
        {
          if (v99 >= 1.0) {
            goto LABEL_149;
          }
          if (v99 > 0.0)
          {
            float v102 = v102 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v99));
            float v103 = v103 + (float)(COERCE_FLOAT(bswap32(v7[1])) * (float)(1.0 - v99));
            float v104 = v104 + (float)(COERCE_FLOAT(bswap32(v7[2])) * (float)(1.0 - v99));
            float v105 = v105 + (float)(COERCE_FLOAT(bswap32(v7[3])) * (float)(1.0 - v99));
            float v99 = v99 + (float)(COERCE_FLOAT(bswap32(*v8)) * (float)(1.0 - v99));
LABEL_149:
            *uint64_t v7 = bswap32(LODWORD(v102));
            v7[1] = bswap32(LODWORD(v103));
            v7[2] = bswap32(LODWORD(v104));
            v7[3] = bswap32(LODWORD(v105));
            unsigned int *v8 = bswap32(LODWORD(v99));
          }
        }
        else
        {
          if (v99 >= 1.0)
          {
            unsigned int v107 = bswap32(LODWORD(v102));
            unsigned int v108 = bswap32(LODWORD(v103));
            unsigned int v109 = bswap32(LODWORD(v104));
            float v110 = v99 - v101;
LABEL_154:
            *uint64_t v7 = v107;
            v7[1] = v108;
            v7[2] = v109;
            v7[3] = bswap32(LODWORD(v110));
            goto LABEL_155;
          }
          if (v99 > 0.0)
          {
            float v106 = 1.0 - v99;
            unsigned int v107 = bswap32(COERCE_UNSIGNED_INT(v102 + (float)(COERCE_FLOAT(bswap32(*v7)) * v106)));
            unsigned int v108 = bswap32(COERCE_UNSIGNED_INT(v103 + (float)(COERCE_FLOAT(bswap32(v7[1])) * v106)));
            unsigned int v109 = bswap32(COERCE_UNSIGNED_INT(v104 + (float)(COERCE_FLOAT(bswap32(v7[2])) * v106)));
            float v110 = v105 + (float)(COERCE_FLOAT(bswap32(v7[3])) * v106);
            goto LABEL_154;
          }
        }
LABEL_155:
        v7 += 4;
        unint64_t v8 = (unsigned int *)((char *)v8 + v17);
        if (!--v92) {
          goto LABEL_156;
        }
      }
    }
    if (a5 >= 1)
    {
      uint64_t result = v80;
      uint64_t v82 = a5;
      do
      {
        uint64_t v83 = *(void *)result;
        result += 16;
        uint64_t v84 = (unsigned int *)&v81[v83];
        if (v16 < (unsigned int *)&v81[v83]) {
          uint64_t v84 = v16;
        }
        if (v15 > v84) {
          uint64_t v84 = v15;
        }
        unsigned int v85 = __ROL4__(bswap32(*v84), v10);
        float v86 = *(float *)&_blt_float[HIBYTE(v85)];
        if (v9 >= 1.0)
        {
          float v87 = *(float *)&_blt_float[BYTE2(v85)];
          float v88 = *(float *)&_blt_float[BYTE1(v85)];
          float v89 = *(float *)&_blt_float[(v85 | v6)];
        }
        else
        {
          float v86 = v9 * v86;
          float v87 = v9 * *(float *)&_blt_float[BYTE2(v85)];
          float v88 = v9 * *(float *)&_blt_float[BYTE1(v85)];
          float v89 = v9 * *(float *)&_blt_float[(v85 | v6)];
        }
        if (v86 <= v87) {
          float v90 = v87;
        }
        else {
          float v90 = v86;
        }
        if (v88 <= v90) {
          float v91 = v90;
        }
        else {
          float v91 = v88;
        }
        *uint64_t v7 = bswap32(COERCE_UNSIGNED_INT(v91 - v86));
        v7[1] = bswap32(COERCE_UNSIGNED_INT(v91 - v87));
        v7[2] = bswap32(COERCE_UNSIGNED_INT(v91 - v88));
        v7[3] = bswap32(COERCE_UNSIGNED_INT(v89 - v91));
        if (v8) {
          unsigned int *v8 = bswap32(LODWORD(v89));
        }
        v7 += 4;
        unint64_t v8 = (unsigned int *)((char *)v8 + v17);
        --v82;
      }
      while (v82);
    }
LABEL_156:
    v7 += 4 * v117;
    v14 += v116;
    v8 += v119;
    --a6;
  }
  while (a6);
  return result;
}

unint64_t CMYKF_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = (unsigned int *)*((void *)a2 + 4);
  if (v7) {
    uint64_t v142 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v142 = 0;
  }
  LODWORD(v++*(_DWORD *)(result + 8) = a2[2];
  int v141 = *a2;
  uint64_t v140 = *((void *)a2 + 3) - a5;
  uint64_t v9 = *((void *)a2 + 17);
  uint64_t v10 = *((void *)a2 + 18);
  uint64_t v11 = *((void *)a2 + 9);
  uint64_t v12 = *((void *)a2 + 11);
  uint64_t v13 = *((void *)a2 + 7) + v12 * a4;
  uint64_t v14 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v15 = &v14[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  unint64_t result = *(void *)(a1 + 176);
  uint64_t v17 = 4 * (v7 != 0);
  __asm { FMOV            V1.2S, #1.0 }
  if (result)
  {
    uint64_t v139 = *((void *)a2 + 13);
    uint64_t v23 = *((void *)a2 + 15);
    uint64_t v138 = v10 + 16 * a3 + 8;
    while (1)
    {
      unint64_t result = v13 - v139;
      if (((v23 - v13) | (v13 - v139)) < 0)
      {
        unsigned int v26 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        unint64_t v24 = ((v13 & (unint64_t)~(-1 << v11)) >> (v11 - 4)) & 0xF;
        unint64_t result = weights_21383[v24];
        if (v24 - 7 >= 9) {
          uint64_t v25 = -v9;
        }
        else {
          uint64_t v25 = v9;
        }
        unsigned int v26 = result & 0xF;
      }
      uint64_t v27 = &v14[(v13 >> v11) * v9];
      if (v141 == 1)
      {
        if (a5 >= 1)
        {
          unint64_t result = v26;
          uint64_t v28 = (uint64_t *)v138;
          uint64_t v29 = a5;
          do
          {
            uint64_t v30 = *(v28 - 1);
            uint64_t v31 = *v28;
            int v32 = &v27[v30];
            if (v15 >= &v27[v30]) {
              unsigned int v33 = &v27[v30];
            }
            else {
              unsigned int v33 = v15;
            }
            if (v14 > v33) {
              unsigned int v33 = v14;
            }
            unsigned int v34 = (*v33 << 24) | (v33[1] << 16) | (v33[2] << 8);
            if ((v31 & 0xF) != 0)
            {
              uint64_t v35 = &v32[v31 >> 4];
              if (v15 < v35) {
                uint64_t v35 = v15;
              }
              if (v14 > v35) {
                uint64_t v35 = v14;
              }
              int v36 = (*v35 << 24) | (v35[1] << 16) | (v35[2] << 8);
              if (v26)
              {
                if (v15 >= &v32[v25]) {
                  uint64_t v37 = &v32[v25];
                }
                else {
                  uint64_t v37 = v15;
                }
                if (v14 > v37) {
                  uint64_t v37 = v14;
                }
                int v38 = (*v37 << 24) | (v37[1] << 16) | (v37[2] << 8);
                unsigned __int8 v39 = &v32[v25 + (v31 >> 4)];
                if (v15 < v39) {
                  unsigned __int8 v39 = v15;
                }
                if (v14 > v39) {
                  unsigned __int8 v39 = v14;
                }
                unsigned int v40 = BLEND8_21385[v26];
                unsigned int v34 = v34 - ((v40 & v34) >> v26) + ((v40 & v38) >> v26);
                int v36 = v36 - ((v40 & v36) >> v26) + ((((*v39 << 24) | (v39[1] << 16) | (v39[2] << 8)) & v40) >> v26);
              }
              unsigned int v34 = v34
                  - ((BLEND8_21385[*v28 & 0xF] & v34) >> (*v28 & 0xF))
                  + ((BLEND8_21385[*v28 & 0xF] & v36) >> (*v28 & 0xF));
            }
            else if (v26)
            {
              int v41 = &v32[v25];
              if (v15 < &v32[v25]) {
                int v41 = v15;
              }
              if (v14 > v41) {
                int v41 = v14;
              }
              unsigned int v34 = v34
                  - ((BLEND8_21385[v26] & v34) >> v26)
                  + ((((*v41 << 24) | (v41[1] << 16) | (v41[2] << 8)) & BLEND8_21385[v26]) >> v26);
            }
            float v42 = *(float *)&_blt_float[HIBYTE(v34)];
            if (v8 >= 1.0)
            {
              float v52 = *(float *)&_blt_float[BYTE2(v34)];
              float v53 = *(float *)&_blt_float[BYTE1(v34)];
              if (v42 <= v52) {
                float v54 = *(float *)&_blt_float[BYTE2(v34)];
              }
              else {
                float v54 = *(float *)&_blt_float[HIBYTE(v34)];
              }
              if (v53 <= v54) {
                float v55 = v54;
              }
              else {
                float v55 = *(float *)&_blt_float[BYTE1(v34)];
              }
              float v47 = v55 - v42;
              float v48 = v55 - v52;
              float v49 = v55 - v53;
              unsigned int v51 = 1.0;
              float v50 = 1.0 - v55;
            }
            else
            {
              float v43 = v8 * v42;
              float v44 = v8 * *(float *)&_blt_float[BYTE2(v34)];
              float v45 = v8 * *(float *)&_blt_float[BYTE1(v34)];
              if (v43 <= v44) {
                float v46 = v8 * *(float *)&_blt_float[BYTE2(v34)];
              }
              else {
                float v46 = v43;
              }
              if (v45 > v46) {
                float v46 = v8 * *(float *)&_blt_float[BYTE1(v34)];
              }
              float v47 = v46 - v43;
              float v48 = v46 - v44;
              float v49 = v46 - v45;
              float v50 = v8 - v46;
              unsigned int v51 = LODWORD(v8);
            }
            *(_DWORD *)uint64_t v6 = bswap32(LODWORD(v47));
            *(_DWORD *)(v6 + 4) = bswap32(LODWORD(v48));
            *(_DWORD *)(v6 + ++*(_DWORD *)(result + 8) = bswap32(LODWORD(v49));
            *(_DWORD *)(v6 + 12) = bswap32(LODWORD(v50));
            if (v7) {
              *uint64_t v7 = bswap32(v51);
            }
            v28 += 2;
            v6 += 16;
            uint64_t v7 = (unsigned int *)((char *)v7 + v17);
            --v29;
          }
          while (v29);
        }
        goto LABEL_117;
      }
      if (a5 >= 1) {
        break;
      }
LABEL_117:
      v6 += 16 * v140;
      v13 += v12;
      v7 += v142;
      if (!--a6) {
        return result;
      }
    }
    float32x4_t v56 = (uint64_t *)v138;
    unint64_t result = a5;
    while (1)
    {
      uint64_t v57 = *(v56 - 1);
      uint64_t v58 = *v56;
      int v59 = &v27[v57];
      if (v15 >= &v27[v57]) {
        double v60 = &v27[v57];
      }
      else {
        double v60 = v15;
      }
      if (v14 > v60) {
        double v60 = v14;
      }
      unsigned int v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
      if ((v58 & 0xF) != 0)
      {
        unsigned __int8 v62 = &v59[v58 >> 4];
        if (v15 < v62) {
          unsigned __int8 v62 = v15;
        }
        if (v14 > v62) {
          unsigned __int8 v62 = v14;
        }
        int v63 = (*v62 << 24) | (v62[1] << 16) | (v62[2] << 8);
        if (v26)
        {
          if (v15 >= &v59[v25]) {
            int v64 = &v59[v25];
          }
          else {
            int v64 = v15;
          }
          if (v14 > v64) {
            int v64 = v14;
          }
          int v65 = (*v64 << 24) | (v64[1] << 16) | (v64[2] << 8);
          float v66 = &v59[v25 + (v58 >> 4)];
          if (v15 < v66) {
            float v66 = v15;
          }
          if (v14 > v66) {
            float v66 = v14;
          }
          unsigned int v67 = BLEND8_21385[v26];
          unsigned int v61 = v61 - ((v67 & v61) >> v26) + ((v67 & v65) >> v26);
          int v63 = v63 - ((v67 & v63) >> v26) + ((((*v66 << 24) | (v66[1] << 16) | (v66[2] << 8)) & v67) >> v26);
        }
        unsigned int v61 = v61
            - ((BLEND8_21385[*v56 & 0xF] & v61) >> (*v56 & 0xF))
            + ((BLEND8_21385[*v56 & 0xF] & v63) >> (*v56 & 0xF));
      }
      else if (v26)
      {
        float v68 = &v59[v25];
        if (v15 < &v59[v25]) {
          float v68 = v15;
        }
        if (v14 > v68) {
          float v68 = v14;
        }
        unsigned int v61 = v61
            - ((BLEND8_21385[v26] & v61) >> v26)
            + ((((*v68 << 24) | (v68[1] << 16) | (v68[2] << 8)) & BLEND8_21385[v26]) >> v26);
      }
      float v69 = *(float *)&_blt_float[HIBYTE(v61)];
      if (v8 >= 1.0)
      {
        float v80 = *(float *)&_blt_float[BYTE2(v61)];
        v73.i32[0] = _blt_float[BYTE1(v61)];
        if (v69 <= v80) {
          float v81 = *(float *)&_blt_float[BYTE2(v61)];
        }
        else {
          float v81 = *(float *)&_blt_float[HIBYTE(v61)];
        }
        if (v73.f32[0] <= v81) {
          float v75 = v81;
        }
        else {
          float v75 = *(float *)&_blt_float[BYTE1(v61)];
        }
        float v76 = v75 - v69;
        float v77 = v75 - v80;
        float32x2_t v78 = (float32x2_t)__PAIR64__(HIDWORD(_D1), LODWORD(v75));
        float v79 = 1.0;
      }
      else
      {
        float v70 = v8 * v69;
        float v71 = *(float *)&_blt_float[BYTE2(v61)];
        float v72 = v8 * v71;
        v73.f32[0] = v8 * *(float *)&_blt_float[BYTE1(v61)];
        if (v70 <= (float)(v8 * v71)) {
          float v74 = v8 * v71;
        }
        else {
          float v74 = v70;
        }
        if (v73.f32[0] <= v74) {
          float v75 = v74;
        }
        else {
          float v75 = v8 * *(float *)&_blt_float[BYTE1(v61)];
        }
        float v76 = v75 - v70;
        float v77 = v75 - v72;
        float32x2_t v78 = (float32x2_t)__PAIR64__(LODWORD(v8), LODWORD(v75));
        float v79 = v8;
      }
      v73.f32[1] = v75;
      float32x2_t v82 = vsub_f32(v78, v73);
      if (!v7)
      {
        if (v79 < 1.0)
        {
          if (v79 > 0.0)
          {
            float v84 = 1.0 - v79;
            unsigned int v85 = bswap32(COERCE_UNSIGNED_INT(v77 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v6 + 4))) * v84)));
            *(_DWORD *)uint64_t v6 = bswap32(COERCE_UNSIGNED_INT(v76 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v6)) * v84)));
            *(_DWORD *)(v6 + 4) = v85;
            *(int8x8_t *)(v6 + ++*(_DWORD *)(result + 8) = vrev32_s8((int8x8_t)vmla_n_f32(v82, (float32x2_t)vrev32_s8(*(int8x8_t *)(v6 + 8)), v84));
          }
        }
        else
        {
          v88.u64[1] = (unint64_t)v82;
          v88.i64[0] = __PAIR64__(LODWORD(v77), LODWORD(v76));
          *(int8x16_t *)uint64_t v6 = vrev32q_s8(v88);
        }
        goto LABEL_116;
      }
      if (v79 >= 1.0) {
        break;
      }
      if (v79 > 0.0)
      {
        unsigned int v87 = bswap32(COERCE_UNSIGNED_INT(v79 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v79))));
        *(float32x2_t *)&v83.u32[2] = v82;
        v83.i64[0] = __PAIR64__(LODWORD(v77), LODWORD(v76));
        int8x16_t v86 = (int8x16_t)vmlaq_n_f32(v83, (float32x4_t)vrev32q_s8(*(int8x16_t *)v6), 1.0 - v79);
        goto LABEL_115;
      }
LABEL_116:
      v56 += 2;
      v6 += 16;
      uint64_t v7 = (unsigned int *)((char *)v7 + v17);
      if (!--result) {
        goto LABEL_117;
      }
    }
    v86.u64[1] = (unint64_t)v82;
    v86.i64[0] = __PAIR64__(LODWORD(v77), LODWORD(v76));
    unsigned int v87 = bswap32(LODWORD(v79));
LABEL_115:
    *(int8x16_t *)uint64_t v6 = vrev32q_s8(v86);
    *uint64_t v7 = v87;
    goto LABEL_116;
  }
  float v89 = (void *)(v10 + 16 * a3);
  do
  {
    float v90 = &v14[(v13 >> v11) * v9];
    if (v141 != 1)
    {
      unint64_t result = (unint64_t)v89;
      uint64_t v112 = a5;
      if (a5 < 1) {
        goto LABEL_177;
      }
      while (1)
      {
        uint64_t v113 = *(void *)result;
        result += 16;
        uint64_t v114 = &v90[v113];
        if (v15 < &v90[v113]) {
          uint64_t v114 = v15;
        }
        if (v14 > v114) {
          uint64_t v114 = v14;
        }
        uint64_t v115 = *v114;
        uint64_t v116 = v114[1];
        uint64_t v117 = v114[2];
        float v118 = *(float *)&_blt_float[v115];
        if (v8 >= 1.0)
        {
          float v129 = *(float *)&_blt_float[v116];
          v122.i32[0] = _blt_float[v117];
          if (v118 <= v129) {
            float v130 = *(float *)&_blt_float[v116];
          }
          else {
            float v130 = *(float *)&_blt_float[v115];
          }
          if (v122.f32[0] <= v130) {
            float v124 = v130;
          }
          else {
            float v124 = *(float *)&_blt_float[v117];
          }
          float v125 = v124 - v118;
          float v126 = v124 - v129;
          float32x2_t v127 = (float32x2_t)__PAIR64__(HIDWORD(_D1), LODWORD(v124));
          float v128 = 1.0;
        }
        else
        {
          float v119 = v8 * v118;
          float v120 = *(float *)&_blt_float[v116];
          float v121 = v8 * v120;
          v122.f32[0] = v8 * *(float *)&_blt_float[v117];
          if (v119 <= (float)(v8 * v120)) {
            float v123 = v8 * v120;
          }
          else {
            float v123 = v119;
          }
          if (v122.f32[0] <= v123) {
            float v124 = v123;
          }
          else {
            float v124 = v8 * *(float *)&_blt_float[v117];
          }
          float v125 = v124 - v119;
          float v126 = v124 - v121;
          float32x2_t v127 = (float32x2_t)__PAIR64__(LODWORD(v8), LODWORD(v124));
          float v128 = v8;
        }
        v122.f32[1] = v124;
        float32x2_t v131 = vsub_f32(v127, v122);
        if (!v7)
        {
          if (v128 < 1.0)
          {
            if (v128 > 0.0)
            {
              float v133 = 1.0 - v128;
              unsigned int v134 = bswap32(COERCE_UNSIGNED_INT(v126 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v6 + 4))) * v133)));
              *(_DWORD *)uint64_t v6 = bswap32(COERCE_UNSIGNED_INT(v125 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v6)) * v133)));
              *(_DWORD *)(v6 + 4) = v134;
              *(int8x8_t *)(v6 + ++*(_DWORD *)(result + 8) = vrev32_s8((int8x8_t)vmla_n_f32(v131, (float32x2_t)vrev32_s8(*(int8x8_t *)(v6 + 8)), v133));
            }
          }
          else
          {
            v137.u64[1] = (unint64_t)v131;
            v137.i64[0] = __PAIR64__(LODWORD(v126), LODWORD(v125));
            *(int8x16_t *)uint64_t v6 = vrev32q_s8(v137);
          }
          goto LABEL_176;
        }
        if (v128 >= 1.0) {
          break;
        }
        if (v128 > 0.0)
        {
          unsigned int v136 = bswap32(COERCE_UNSIGNED_INT(v128 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v128))));
          *(float32x2_t *)&v132.u32[2] = v131;
          v132.i64[0] = __PAIR64__(LODWORD(v126), LODWORD(v125));
          int8x16_t v135 = (int8x16_t)vmlaq_n_f32(v132, (float32x4_t)vrev32q_s8(*(int8x16_t *)v6), 1.0 - v128);
          goto LABEL_175;
        }
LABEL_176:
        v6 += 16;
        uint64_t v7 = (unsigned int *)((char *)v7 + v17);
        if (!--v112) {
          goto LABEL_177;
        }
      }
      v135.u64[1] = (unint64_t)v131;
      v135.i64[0] = __PAIR64__(LODWORD(v126), LODWORD(v125));
      unsigned int v136 = bswap32(LODWORD(v128));
LABEL_175:
      *(int8x16_t *)uint64_t v6 = vrev32q_s8(v135);
      *uint64_t v7 = v136;
      goto LABEL_176;
    }
    if (a5 >= 1)
    {
      unint64_t result = (unint64_t)v89;
      uint64_t v91 = a5;
      do
      {
        uint64_t v92 = *(void *)result;
        result += 16;
        uint64_t v93 = &v90[v92];
        if (v15 < &v90[v92]) {
          uint64_t v93 = v15;
        }
        if (v14 > v93) {
          uint64_t v93 = v14;
        }
        uint64_t v94 = *v93;
        uint64_t v95 = v93[1];
        uint64_t v96 = v93[2];
        float v97 = *(float *)&_blt_float[v94];
        if (v8 >= 1.0)
        {
          float v108 = *(float *)&_blt_float[v95];
          float v109 = *(float *)&_blt_float[v96];
          if (v97 <= v108) {
            float v110 = *(float *)&_blt_float[v95];
          }
          else {
            float v110 = *(float *)&_blt_float[v94];
          }
          if (v109 <= v110) {
            float v111 = v110;
          }
          else {
            float v111 = *(float *)&_blt_float[v96];
          }
          float v103 = v111 - v97;
          float v104 = v111 - v108;
          float v105 = v111 - v109;
          unsigned int v107 = 1.0;
          float v106 = 1.0 - v111;
        }
        else
        {
          float v98 = v8 * v97;
          float v99 = v8 * *(float *)&_blt_float[v95];
          float v100 = v8 * *(float *)&_blt_float[v96];
          if (v98 <= v99) {
            float v101 = v8 * *(float *)&_blt_float[v95];
          }
          else {
            float v101 = v98;
          }
          if (v100 <= v101) {
            float v102 = v101;
          }
          else {
            float v102 = v8 * *(float *)&_blt_float[v96];
          }
          float v103 = v102 - v98;
          float v104 = v102 - v99;
          float v105 = v102 - v100;
          float v106 = v8 - v102;
          unsigned int v107 = LODWORD(v8);
        }
        *(_DWORD *)uint64_t v6 = bswap32(LODWORD(v103));
        *(_DWORD *)(v6 + 4) = bswap32(LODWORD(v104));
        *(_DWORD *)(v6 + ++*(_DWORD *)(result + 8) = bswap32(LODWORD(v105));
        *(_DWORD *)(v6 + 12) = bswap32(LODWORD(v106));
        if (v7) {
          *uint64_t v7 = bswap32(v107);
        }
        v6 += 16;
        uint64_t v7 = (unsigned int *)((char *)v7 + v17);
        --v91;
      }
      while (v91);
    }
LABEL_177:
    v6 += 16 * v140;
    v13 += v12;
    v7 += v142;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKF_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6, int32x4_t _Q0, float32x2_t a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  uint64_t v13 = (int8x16_t *)*((void *)a2 + 2);
  uint64_t v14 = (unsigned int *)*((void *)a2 + 4);
  if (v14) {
    uint64_t v96 = *((void *)a2 + 5) - a5;
  }
  else {
    uint64_t v96 = 0;
  }
  LODWORD(a10) = a2[2];
  int v95 = *a2;
  uint64_t v15 = *((void *)a2 + 3) - a5;
  uint64_t v16 = *((void *)a2 + 17);
  uint64_t v17 = *((void *)a2 + 18);
  uint64_t v18 = *((void *)a2 + 9);
  uint64_t v19 = *((void *)a2 + 11);
  uint64_t v20 = *((void *)a2 + 7) + v19 * a4;
  unsigned int v21 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v22 = &v21[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  uint64_t v23 = *(void *)(a1 + 176);
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t result = 4 * (v14 != 0);
  if (v23)
  {
    uint64_t v93 = *((void *)a2 + 15);
    uint64_t v94 = *((void *)a2 + 13);
    a8.i32[0] = 1.0;
    int32x2_t v32 = vdup_lane_s32(*(int32x2_t *)&a10, 0);
    float32x2_t v29 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(a8, *(float32x2_t *)&a10), 0), (int8x8_t)v32, *(int8x8_t *)_Q0.i8);
    float v30 = fminf(*(float *)&a10, 1.0);
    unsigned int v31 = bswap32(LODWORD(v30));
    *(float *)v32.i32 = 1.0 - v30;
    float32x4_t v33 = (float32x4_t)vdupq_lane_s32(v32, 0);
    uint64_t v92 = v17 + 16 * a3 + 8;
    do
    {
      if (((v93 - v20) | (v20 - v94)) < 0)
      {
        int v36 = 0;
        uint64_t v35 = 0;
      }
      else
      {
        unint64_t v34 = ((v20 & (unint64_t)~(-1 << v18)) >> (v18 - 4)) & 0xF;
        if (v34 - 7 >= 9) {
          uint64_t v35 = -v16;
        }
        else {
          uint64_t v35 = v16;
        }
        int v36 = weights_21383[v34] & 0xF;
      }
      uint64_t v37 = &v21[(v20 >> v18) * v16];
      if (v95 == 1)
      {
        if (a5 >= 1)
        {
          int v38 = (uint64_t *)v92;
          uint64_t v39 = a5;
          do
          {
            uint64_t v40 = *(v38 - 1);
            uint64_t v41 = *v38;
            float v42 = &v37[v40];
            if (v22 >= &v37[v40]) {
              float v43 = &v37[v40];
            }
            else {
              float v43 = v22;
            }
            if (v21 > v43) {
              float v43 = v21;
            }
            unsigned int v44 = *v43;
            if ((v41 & 0xF) != 0)
            {
              float v45 = &v42[v41 >> 4];
              if (v22 < v45) {
                float v45 = v22;
              }
              if (v21 > v45) {
                float v45 = v21;
              }
              unsigned int v46 = *v45;
              if (v36)
              {
                float v47 = &v42[v35];
                if (v22 >= v47) {
                  float v48 = v47;
                }
                else {
                  float v48 = v22;
                }
                if (v21 > v48) {
                  float v48 = v21;
                }
                unsigned int v49 = *v48;
                float v50 = &v47[v41 >> 4];
                if (v22 < v50) {
                  float v50 = v22;
                }
                if (v21 > v50) {
                  float v50 = v21;
                }
                int v51 = BLEND8_21385[v36];
                unsigned int v44 = v44 - ((v51 & v44) >> v36) + ((v51 & v49) >> v36);
                unsigned int v46 = v46 - ((v51 & v46) >> v36) + ((v51 & *v50) >> v36);
              }
              unsigned int v44 = v44
                  - ((BLEND8_21385[*v38 & 0xF] & v44) >> (*v38 & 0xF))
                  + ((BLEND8_21385[*v38 & 0xF] & v46) >> (*v38 & 0xF));
            }
            else if (v36)
            {
              float v52 = &v42[v35];
              if (v22 < &v42[v35]) {
                float v52 = v22;
              }
              if (v21 > v52) {
                float v52 = v21;
              }
              unsigned int v44 = v44 - ((BLEND8_21385[v36] & v44) >> v36) + ((BLEND8_21385[v36] & *v52) >> v36);
            }
            a13.i32[0] = _blt_float[v44];
            *(int8x8_t *)a13.i8 = vrev32_s8((int8x8_t)vmul_n_f32(vsub_f32((float32x2_t)__PAIR64__(_Q0.u32[1], a13.u32[0]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 0)), v30));
            int32x4_t v53 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
            v53.i32[2] = a13.i32[0];
            *uint64_t v13 = (int8x16_t)v53;
            if (v14) {
              *uint64_t v14 = v31;
            }
            v38 += 2;
            ++v13;
            uint64_t v14 = (unsigned int *)((char *)v14 + result);
            --v39;
          }
          while (v39);
        }
      }
      else if (a5 >= 1)
      {
        float v55 = (uint64_t *)v92;
        uint64_t v54 = a5;
        do
        {
          uint64_t v56 = *(v55 - 1);
          uint64_t v57 = *v55;
          uint64_t v58 = &v37[v56];
          if (v22 >= &v37[v56]) {
            int v59 = &v37[v56];
          }
          else {
            int v59 = v22;
          }
          if (v21 > v59) {
            int v59 = v21;
          }
          unsigned int v60 = *v59;
          if ((v57 & 0xF) != 0)
          {
            unsigned int v61 = &v58[v57 >> 4];
            if (v22 < v61) {
              unsigned int v61 = v22;
            }
            if (v21 > v61) {
              unsigned int v61 = v21;
            }
            unsigned int v62 = *v61;
            if (v36)
            {
              if (v22 >= &v58[v35]) {
                int v63 = &v58[v35];
              }
              else {
                int v63 = v22;
              }
              if (v21 > v63) {
                int v63 = v21;
              }
              unsigned int v64 = *v63;
              int v65 = &v58[v35 + (v57 >> 4)];
              if (v22 < v65) {
                int v65 = v22;
              }
              if (v21 > v65) {
                int v65 = v21;
              }
              int v66 = BLEND8_21385[v36];
              unsigned int v60 = v60 - ((v66 & v60) >> v36) + ((v66 & v64) >> v36);
              unsigned int v62 = v62 - ((v66 & v62) >> v36) + ((v66 & *v65) >> v36);
            }
            unsigned int v60 = v60
                - ((BLEND8_21385[*v55 & 0xF] & v60) >> (*v55 & 0xF))
                + ((BLEND8_21385[*v55 & 0xF] & v62) >> (*v55 & 0xF));
          }
          else if (v36)
          {
            unsigned int v67 = &v58[v35];
            if (v22 < &v58[v35]) {
              unsigned int v67 = v22;
            }
            if (v21 > v67) {
              unsigned int v67 = v21;
            }
            unsigned int v60 = v60 - ((BLEND8_21385[v36] & v60) >> v36) + ((BLEND8_21385[v36] & *v67) >> v36);
          }
          a13.i32[0] = _blt_float[v60];
          int32x4_t v68 = _Q0;
          v68.i32[0] = a13.i32[0];
          *(float32x2_t *)v68.i8 = vmul_f32(vsub_f32(*(float32x2_t *)v68.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 0)), v29);
          a13 = (int8x16_t)vzip1q_s32(v68, v68);
          a13.i32[2] = v68.i32[0];
          if (v14)
          {
            if (v30 < 1.0)
            {
              if (v30 > 0.0)
              {
                unsigned int v69 = bswap32(COERCE_UNSIGNED_INT(v30 + (float)(COERCE_FLOAT(bswap32(*v14)) * *(float *)v32.i32)));
                a13 = vrev32q_s8((int8x16_t)vmlaq_f32((float32x4_t)a13, v33, (float32x4_t)vrev32q_s8(*v13)));
                *uint64_t v13 = a13;
                *uint64_t v14 = v69;
              }
            }
            else
            {
              *(int8x8_t *)a13.i8 = vrev32_s8(*(int8x8_t *)v68.i8);
              int32x4_t v70 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
              v70.i32[2] = a13.i32[0];
              *uint64_t v13 = (int8x16_t)v70;
              *uint64_t v14 = v31;
            }
          }
          else if (v30 < 1.0)
          {
            if (v30 > 0.0)
            {
              a13 = vrev32q_s8((int8x16_t)vmlaq_f32((float32x4_t)a13, v33, (float32x4_t)vrev32q_s8(*v13)));
              *uint64_t v13 = a13;
            }
          }
          else
          {
            *(int8x8_t *)a13.i8 = vrev32_s8(*(int8x8_t *)v68.i8);
            int32x4_t v71 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
            v71.i32[2] = a13.i32[0];
            *uint64_t v13 = (int8x16_t)v71;
          }
          v55 += 2;
          ++v13;
          uint64_t v14 = (unsigned int *)((char *)v14 + result);
          --v54;
        }
        while (v54);
      }
      v13 += v15;
      v20 += v19;
      v14 += v96;
      --a6;
    }
    while (a6);
  }
  else
  {
    float v72 = (uint64_t *)(v17 + 16 * a3);
    a8.i32[0] = 1.0;
    int32x2_t v76 = vdup_lane_s32(*(int32x2_t *)&a10, 0);
    float32x2_t v73 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(a8, *(float32x2_t *)&a10), 0), (int8x8_t)v76, *(int8x8_t *)_Q0.i8);
    float v74 = fminf(*(float *)&a10, 1.0);
    unsigned int v75 = bswap32(LODWORD(v74));
    *(float *)v76.i32 = 1.0 - v74;
    float32x4_t v77 = (float32x4_t)vdupq_lane_s32(v76, 0);
    do
    {
      float32x2_t v78 = &v21[(v20 >> v18) * v16];
      if (v95 == 1)
      {
        if (a5 >= 1)
        {
          float v79 = v72;
          uint64_t v80 = a5;
          do
          {
            uint64_t v81 = *v79;
            v79 += 2;
            float32x2_t v82 = &v78[v81];
            if (v22 < &v78[v81]) {
              float32x2_t v82 = v22;
            }
            if (v21 > v82) {
              float32x2_t v82 = v21;
            }
            a13.i32[0] = _blt_float[*v82];
            *(int8x8_t *)a13.i8 = vrev32_s8((int8x8_t)vmul_n_f32(vsub_f32((float32x2_t)__PAIR64__(_Q0.u32[1], a13.u32[0]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 0)), v74));
            int32x4_t v83 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
            v83.i32[2] = a13.i32[0];
            *uint64_t v13 = (int8x16_t)v83;
            if (v14) {
              *uint64_t v14 = v75;
            }
            ++v13;
            uint64_t v14 = (unsigned int *)((char *)v14 + result);
            --v80;
          }
          while (v80);
        }
      }
      else
      {
        float v84 = v72;
        uint64_t v85 = a5;
        if (a5 >= 1)
        {
          do
          {
            uint64_t v86 = *v84;
            v84 += 2;
            unsigned int v87 = &v78[v86];
            if (v22 < &v78[v86]) {
              unsigned int v87 = v22;
            }
            if (v21 > v87) {
              unsigned int v87 = v21;
            }
            a13.i32[0] = _blt_float[*v87];
            int32x4_t v88 = _Q0;
            v88.i32[0] = a13.i32[0];
            *(float32x2_t *)v88.i8 = vmul_f32(vsub_f32(*(float32x2_t *)v88.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 0)), v73);
            a13 = (int8x16_t)vzip1q_s32(v88, v88);
            a13.i32[2] = v88.i32[0];
            if (v14)
            {
              if (v74 < 1.0)
              {
                if (v74 > 0.0)
                {
                  unsigned int v89 = bswap32(COERCE_UNSIGNED_INT(v74 + (float)(COERCE_FLOAT(bswap32(*v14)) * *(float *)v76.i32)));
                  a13 = vrev32q_s8((int8x16_t)vmlaq_f32((float32x4_t)a13, v77, (float32x4_t)vrev32q_s8(*v13)));
                  *uint64_t v13 = a13;
                  *uint64_t v14 = v89;
                }
              }
              else
              {
                *(int8x8_t *)a13.i8 = vrev32_s8(*(int8x8_t *)v88.i8);
                int32x4_t v90 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
                v90.i32[2] = a13.i32[0];
                *uint64_t v13 = (int8x16_t)v90;
                *uint64_t v14 = v75;
              }
            }
            else if (v74 < 1.0)
            {
              if (v74 > 0.0)
              {
                a13 = vrev32q_s8((int8x16_t)vmlaq_f32((float32x4_t)a13, v77, (float32x4_t)vrev32q_s8(*v13)));
                *uint64_t v13 = a13;
              }
            }
            else
            {
              *(int8x8_t *)a13.i8 = vrev32_s8(*(int8x8_t *)v88.i8);
              int32x4_t v91 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
              v91.i32[2] = a13.i32[0];
              *uint64_t v13 = (int8x16_t)v91;
            }
            ++v13;
            uint64_t v14 = (unsigned int *)((char *)v14 + result);
            --v85;
          }
          while (v85);
        }
      }
      v13 += v15;
      v20 += v19;
      v14 += v96;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t CMYKF_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t)v3;
  v20[482] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(int **)v2;
  BOOL v8 = !*((void *)v3 + 12) && !*(void *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  int v9 = *(_DWORD *)(*(void *)(*(void *)v2 + 56) + 16 * *v3 + 8 * v8 + 4 * (*((void *)v3 + 6) == 0));
  if (v9 > 27) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v13, (uint64_t)v18) < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)v5 & 0xF000000) != 0x4000000)
  {
    if (v13) {
      goto LABEL_22;
    }
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(v5 + 16))
  {
    uint64_t v12 = CMYKf_shade_radial_CMYK;
  }
  else if (*(void *)(v5 + 24))
  {
    uint64_t v12 = CMYKf_shade_conic_CMYK;
  }
  else if (v16 < 2)
  {
    uint64_t v12 = CMYKf_shade_axial_CMYK;
  }
  else
  {
    uint64_t v12 = CMYKf_shade_custom_CMYK;
  }
  uint64_t v13 = v12;
LABEL_22:
  int v14 = *v7;
  int v15 = v14;
  CMYKF_image_mark(v6, (uint64_t)&v13, v9, v11);
  if (v17 && (v17 < &v19 || v20 < v17)) {
    free(v17);
  }
  return 1;
}

void *__getCTFontCreateWithNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontCreateWithName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontCreateWithNameSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetWeightSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetWeight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetWeightSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetBoundingBoxSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetBoundingBox");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetBoundingBoxSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetSlantAngleSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetSlantAngle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetSlantAngleSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetAscentSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetAscent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetAscentSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetDescentSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetDescent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetDescentSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetLeadingSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetLeading");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetLeadingSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetCapHeightSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetCapHeight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetCapHeightSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetXHeightSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetXHeight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetXHeightSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetGlyphsForCharactersSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetGlyphsForCharacters");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetGlyphsForCharactersSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetAdvancesForGlyphsSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetAdvancesForGlyphs");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetAdvancesForGlyphsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetUnderlinePositionSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetUnderlinePosition");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetUnderlinePositionSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetUnderlineThicknessSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetUnderlineThickness");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetUnderlineThicknessSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontGetUnitsPerEmSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontGetUnitsPerEm");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontGetUnitsPerEmSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTFontCopyTableSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTextLibrary();
  uint64_t result = dlsym(v2, "CTFontCopyTable");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTFontCopyTableSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreTextLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreTextLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

char *PDFContentStreamCreate(uint64_t a1, const CGRect *a2)
{
  uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0xD0uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    *(void *)uint64_t v4 = a1;
    *((void *)v4 + 1) = PDFXRefTableAddObject(*(void **)(a1 + 464));
    uint64_t v5 = &CGRectInfinite;
    if (a2) {
      uint64_t v5 = a2;
    }
    CGSize size = v5->size;
    *(CGPoint *)(v4 + 72) = v5->origin;
    *(CGSize *)(v4 + 8++*(_DWORD *)(result + 8) = size;
    uint64_t v7 = malloc_type_calloc(1uLL, 0x60uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v7)
    {
      *(_DWORD *)uint64_t v7 = 1;
      v7[1] = a1;
      *((_DWORD *)v7 + 6) = 1;
      v7[2] = PDFXRefTableAddObject(*(void **)(a1 + 464));
    }
    *((void *)v4 + 14) = v7;
    *((void *)v4 + 23) = -1;
  }
  return v4;
}

void PDFContentStreamRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(uint64_t *)(a1 + 176) >= 1)
    {
      do
        PDFContentStreamEndTag((void *)a1, a2, a3, a4, a5, a6, a7, a8, v18);
      while (*(uint64_t *)(a1 + 176) > 0);
    }
    int v9 = *(void **)(a1 + 104);
    if (v9)
    {
      BOOL v10 = (*(_DWORD *)v9)-- == 1;
      if (v10)
      {
        __n128 v11 = (const void *)v9[5];
        if (v11) {
          CFRelease(v11);
        }
        gstate_clear((uint64_t)v9);
        free(v9);
      }
    }
    CGPDFAssociationRelease(*(const void ***)(a1 + 64));
    uint64_t v12 = *(const void ****)(a1 + 112);
    if (v12)
    {
      BOOL v10 = (*(_DWORD *)v12)-- == 1;
      if (v10)
      {
        CGOrderedSetRelease(v12[4]);
        CGOrderedSetRelease(v12[5]);
        CGOrderedSetRelease(v12[6]);
        CGOrderedSetRelease(v12[7]);
        CGOrderedSetRelease(v12[8]);
        CGOrderedSetRelease(v12[9]);
        CGOrderedSetRelease(v12[10]);
        CGOrderedSetRelease(v12[11]);
        free(v12);
      }
    }
    uint64_t v13 = *(const void **)(a1 + 40);
    if (v13) {
      CFRelease(v13);
    }
    int v14 = *(const void **)(a1 + 32);
    if (v14) {
      CFRelease(v14);
    }
    int v15 = *(const void **)(a1 + 48);
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v16 = *(const void **)(a1 + 56);
    if (v16) {
      CFRelease(v16);
    }
    uint64_t v17 = *(const void **)(a1 + 200);
    if (v17) {
      CFRelease(v17);
    }
    free((void *)a1);
  }
}

void PDFContentStreamEndTag(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((uint64_t)a1[22] >= 1)
  {
    uint64_t v10 = *a1;
    CFArrayRef v11 = *(const __CFArray **)(*a1 + 560);
    if (v11 && CFArrayGetCount(v11) >= 2)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v10 + 560));
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v10 + 560), Count - 1);
    }
    --a1[22];
    uint64_t v13 = (unsigned char **)a1[8];
    PDFWriterPrintf(v13, (uint64_t)"EMC", a3, a4, a5, a6, a7, a8, a9);
  }
}

void PDFContentStreamSetRedactionPath(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 200);
    if (v4 != cf)
    {
      if (v4) {
        CFRelease(v4);
      }
      if (cf) {
        CFRetain(cf);
      }
      *(void *)(a1 + 200) = cf;
    }
  }
}

void PDFContentStreamBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    PDFDocumentBeginObject(*(void *)a1, *(void *)(a1 + 8), a3, a4, a5, a6, a7, a8);
    PDFDocumentPrintf(*(void *)a1, (uint64_t)"<<", v10, v11, v12, v13, v14, v15, v23);
    uint64_t v22 = *(void *)a1;
    if (*(unsigned char *)(*(void *)a1 + 73))
    {
      PDFDocumentPrintf(v22, (uint64_t)"/Filter /FlateDecode", v16, v17, v18, v19, v20, v21, a9);
    }
  }
}

void PDFContentStreamBeginData(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    a1[4] = (uint64_t)Mutable;
    CGDataConsumerRef Encryptor = CGDataConsumerCreateWithCFData(Mutable);
    a1[5] = (uint64_t)Encryptor;
    a1[3] = (uint64_t)Encryptor;
    uint64_t v13 = *a1;
    uint64_t v14 = *(void *)(*a1 + 56);
    if (v14)
    {
      CGDataConsumerRef Encryptor = PDFSecurityHandlerCreateEncryptor(v14, (uint64_t)Encryptor, a1[1]);
      a1[7] = (uint64_t)Encryptor;
      a1[3] = (uint64_t)Encryptor;
      uint64_t v13 = *a1;
    }
    if (*(unsigned char *)(v13 + 73))
    {
      CGDataConsumerRef Encryptor = CGDataConsumerCreateFlateEncoder(Encryptor);
      a1[6] = (uint64_t)Encryptor;
      a1[3] = (uint64_t)Encryptor;
    }
    uint64_t v15 = PDFWriterCreate(Encryptor);
    a1[8] = (uint64_t)v15;
    uint64_t v16 = *a1;
    uint64_t v17 = malloc_type_calloc(1uLL, 0x108uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v17)
    {
      *(_DWORD *)uint64_t v17 = 1;
      v17[1] = v16;
      v17[2] = v15;
      unint64_t v24 = *(void **)(v16 + 400);
      if (!v24)
      {
        unint64_t v24 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        if (v24) {
          *unint64_t v24 = v16;
        }
        *(void *)(v16 + 400) = v24;
      }
      uint64_t v25 = a1[14];
      v17[3] = v24;
      v17[4] = v25;
      v17[5] = CFArrayCreateMutable(v10, 0, 0);
      gstate_init((uint64_t)v17);
    }
    a1[13] = (uint64_t)v17;
    unsigned int v26 = (unsigned char **)a1[8];
    PDFWriterPrintf(v26, (uint64_t)"q", v18, v19, v20, v21, v22, v23, a9);
  }
}

uint64_t PDFContentStreamEndData(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    BOOL v8 = (void *)result;
    PDFWriterPrintf(*(unsigned char ***)(result + 64), (uint64_t)"Q", a3, a4, a5, a6, a7, a8, v10);
    CGDataConsumerClose(v8[6]);
    uint64_t result = CGDataConsumerClose(v8[7]);
    uint64_t v9 = v8[3];
    if (v9) {
      uint64_t v9 = *(void *)(v9 + 40);
    }
    v8[2] = v9;
  }
  return result;
}

CFDataRef *PDFContentStreamEnd(CFDataRef *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (uint64_t)*result;
    uint64_t v3 = *((void *)*result + 3);
    CFIndex Length = CFDataGetLength(result[4]);
    PDFDocumentPrintf(v2, (uint64_t)"/Length %O", v5, v6, v7, v8, v9, v10, Length);
    PDFDocumentPrintf((uint64_t)*v1, (uint64_t)">>\n", v11, v12, v13, v14, v15, v16, v45);
    PDFDocumentPrintf((uint64_t)*v1, (uint64_t)"stream\n", v17, v18, v19, v20, v21, v22, v46);
    BytePtr = CFDataGetBytePtr(v1[4]);
    CFIndex v24 = CFDataGetLength(v1[4]);
    CGDataConsumerPutBytes(v3, (uint64_t)BytePtr, v24);
    PDFDocumentPrintf((uint64_t)*v1, (uint64_t)"\n", v25, v26, v27, v28, v29, v30, v47);
    PDFDocumentPrintf((uint64_t)*v1, (uint64_t)"endstream\n", v31, v32, v33, v34, v35, v36, v48);
    uint64_t v44 = (uint64_t)*v1;
    return (CFDataRef *)PDFDocumentEndObject(v44, v37, v38, v39, v40, v41, v42, v43);
  }
  return result;
}

void PDFContentStreamDrawImage(uint64_t a1, uint64_t a2, CGImage *cf, double a4, double a5, double a6, double a7)
{
  if (!a1) {
    return;
  }
  CGImageRef Image = cf;
  if (!cf) {
    return;
  }
  uint64_t v9 = a1;
  uint64_t v10 = *(const CGPath **)(a1 + 200);
  if (!v10) {
    goto LABEL_11;
  }
  long long v11 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)&transform.a = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&transform.c = v11;
  *(_OWORD *)&transform.tdouble x = *(_OWORD *)(a2 + 56);
  *(double *)&long long v11 = a5;
  CGRect v137 = CGRectApplyAffineTransform(*(CGRect *)&a4, &transform);
  double width = v137.size.width;
  double height = v137.size.height;
  double x = v137.origin.x;
  double bytesPerRow = v137.origin.y;
  if (!CGPathIntersectsRect(v10, v137.origin.x, v137.origin.y, v137.size.width, v137.size.height))
  {
LABEL_11:
    CFRetain(Image);
    goto LABEL_12;
  }
  uint64_t v14 = (CGContext *)CGBitmapContextCreateForFlatteningImage((uint64_t)Image, 0, 0);
  CGFloat v15 = (double)*((unint64_t *)Image + 5);
  CGFloat v16 = (double)*((unint64_t *)Image + 6);
  v138.origin.double x = 0.0;
  v138.origin.CGFloat y = 0.0;
  v138.size.double width = v15;
  v138.size.double height = v16;
  CGContextDrawImage(v14, v138, Image);
  transform.a = v15 / width;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = v16 / height;
  *(float64x2_t *)&transform.tdouble x = vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)0, (float64x2_t)COERCE_UNSIGNED_INT64(v15 / width), x, 0), *(float64x2_t *)&transform.c, bytesPerRow, 0);
  uint64_t v17 = CGPathCreateMutableCopyByTransformingPath(v10, &transform);
  CGContextSetRGBFillColor(v14, 0.0, 0.0, 0.0, 1.0);
  CGContextAddPath(v14, v17);
  CGContextDrawPath(v14, kCGPathFill);
  CGImageRef Image = CGBitmapContextCreateImage(v14);
  if (v17) {
    CFRelease(v17);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (Image)
  {
LABEL_12:
    unsigned int v18 = *(char *)(*(void *)(a2 + 120) + 4);
    if ((*((unsigned char *)Image + 39) & 2) != 0)
    {
      if (*((void *)Image + 7) == 1)
      {
        uint64_t v19 = PDFDocumentAddImage(*(void *)v9, (uint64_t)Image, v18);
        int v20 = 1;
LABEL_40:
        uint64_t v49 = *(void *)(v9 + 112);
        *(_DWORD *)(v49 + 24) |= 0x1Cu;
        float v50 = *(const void ***)(v49 + 64);
        if (!v50)
        {
          float v50 = CGOrderedSetCreate();
          *(void *)(v49 + 64) = v50;
        }
        CGOrderedSetAddValue((CFSetRef *)v50, v19);
        uint64_t v51 = *(void *)(v49 + 8);
        uint64_t v52 = *(void *)(v51 + 584);
        if (v52)
        {
          uint64_t v53 = v19[2];
          if (v53) {
            uint64_t v53 = *(void *)(v53 + 8);
          }
          if (*(_DWORD *)(v52 + 16) == 1 && !*(void *)(v52 + 32))
          {
            *(void *)(v52 + 32) = v53;
            uint64_t v54 = *(void *)(v51 + 592);
            *(void *)(v51 + 592) = v54 + 1;
            *(void *)(v52 + 40) = v54;
          }
          else
          {
            uint64_t v54 = -1;
          }
          v19[13] = v54;
        }
        float v55 = *(unsigned char ***)(v9 + 64);
        uint64_t v56 = *(void *)(v9 + 104);
        PDFGStateSetClipStack(v56, *(__CFArray **)(a2 + 112));
        uint64_t v63 = *(void *)(a2 + 120);
        unsigned int v64 = *(_DWORD *)(v63 + 4);
        if (((v64 >> 20) & 0xF) != 0) {
          int v65 = v64 << 8;
        }
        else {
          int v65 = v64 << 12;
        }
        if (v65 >> 28) {
          int v66 = v65 >> 28;
        }
        else {
          int v66 = 2;
        }
        if (*(_DWORD *)(v56 + 80) != v66)
        {
          *(_DWORD *)(v56 + 80) = v66;
          addEmitFunction(v56, emitRenderingIntentChange);
          uint64_t v63 = *(void *)(a2 + 120);
        }
        double v67 = *(double *)(v63 + 8);
        if (v20)
        {
          unint64_t FillColor = CGGStateGetFillColor(a2);
          PDFGStateSetFillColor(v56, FillColor);
          long long v69 = *(_OWORD *)(v9 + 136);
          *(_OWORD *)&transform.a = *(_OWORD *)(v9 + 120);
          *(_OWORD *)&transform.c = v69;
          *(_OWORD *)&transform.tdouble x = *(_OWORD *)(v9 + 152);
          PDFGStateSetPatternMatrix(v56, (uint64_t)&transform, v70, v71, v72, v73, v74, v75, *(double *)(*(void *)(a2 + 120) + 24), *(double *)(*(void *)(a2 + 120) + 32));
          double v77 = *(double *)(*(void *)(a2 + 144) + 16);
          if (*(double *)(v56 + 224) != v77)
          {
            *(double *)(v56 + 224) = v77;
            addEmitFunction(v56, emitSmoothnessChange);
          }
          if (FillColor)
          {
            if ((FillColor & 0x8000000000000000) != 0) {
              double Alpha = CGTaggedColorGetAlpha(FillColor, v76, v57, v58, v59, v60, v61, v62);
            }
            else {
              double Alpha = *(double *)(FillColor + 8 * *(void *)(FillColor + 56) + 56);
            }
          }
          else
          {
            double Alpha = 0.0;
          }
          double v67 = v67 * Alpha;
        }
        if (*(double *)(v56 + 168) != v67)
        {
          *(double *)(v56 + 16++*(_DWORD *)(result + 8) = v67;
          addEmitFunction(v56, emitNonStrokeAlphaChange);
        }
        uint64_t v79 = *(void *)(a2 + 144);
        int v80 = *(unsigned __int8 *)(v79 + 24);
        if (*(unsigned __int8 *)(v56 + 200) != v80)
        {
          *(unsigned char *)(v56 + 200) = v80;
          addEmitFunction(v56, emitNonStrokeOverprintChange);
          uint64_t v79 = *(void *)(a2 + 144);
        }
        PDFGStateSetOverprintMode(v56, *(unsigned int *)(v79 + 28), v57, v58, v59, v60, v61, v62);
        PDFGStateSetBlackGeneration(v56, *(CFTypeRef *)(*(void *)(a2 + 144) + 32));
        PDFGStateSetUndercolorRemoval(v56, *(CFTypeRef *)(*(void *)(a2 + 144) + 40));
        PDFGStateSetStyle(v56, *(void *)(*(void *)(a2 + 120) + 16));
        PDFGStateSetSoftMask(v56, *(CFTypeRef *)(*(void *)(a2 + 120) + 40));
        int v87 = (int)(*(_DWORD *)(*(void *)(a2 + 120) + 4) << 16) >> 24;
        if ((v87 - 13) >= 0xF) {
          int v87 = 2;
        }
        if (*(_DWORD *)(v56 + 248) != v87)
        {
          *(_DWORD *)(v56 + 24++*(_DWORD *)(result + 8) = v87;
          addEmitFunction(v56, emitBlendModeChange);
        }
        PDFWriterAnnotate((uint64_t)v55, (uint64_t)"  BEGIN: synchronizing gstate.", v81, v82, v83, v84, v85, v86, (uint64_t)decode);
        PDFGStateEmit((CFArrayRef *)v56);
        PDFWriterAnnotate((uint64_t)v55, (uint64_t)"  END: synchronizing gstate.", v88, v89, v90, v91, v92, v93, (uint64_t)decodea);
        PDFWriterAnnotate((uint64_t)v55, (uint64_t)"%s: BEGIN: drawing %s.", v94, v95, v96, v97, v98, v99, (uint64_t)"PDFWriteImage");
        float64x2_t v106 = *(float64x2_t *)(a2 + 40);
        *(_OWORD *)&transform.a = *(_OWORD *)(a2 + 24);
        *(float64x2_t *)&transform.c = v106;
        *(_OWORD *)&transform.tdouble x = *(_OWORD *)(a2 + 56);
        *(float64x2_t *)&transform.tdouble x = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&transform.tx, *(float64x2_t *)&transform.a, a4), v106, a5);
        int8x16_t v107 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)&transform.a, a6);
        float64x2_t v108 = vmulq_n_f64(v106, a7);
        *(int8x16_t *)&transform.a = v107;
        *(float64x2_t *)&transform.c = v108;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(v107, v107, 8uLL), (float64x2_t)xmmword_1850CD8C0), (int32x4_t)vceqq_f64(v108, (float64x2_t)xmmword_1850CD8C0))))) & 1) == 0&& transform.tx == 0.0&& transform.ty == 0.0)
        {
          PDFWriterPrintf(v55, (uint64_t)"/%N Do", v100, v101, v102, v103, v104, v105, (uint64_t)(v19 + 3));
        }
        else if (vmlad_n_f64(-*(double *)&v107.i64[1] * v108.f64[0], v108.f64[1], *(double *)v107.i64) != 0.0)
        {
          PDFWriterPrintf(v55, (uint64_t)"q %*m cm", v100, v101, v102, v103, v104, v105, (uint64_t)&transform);
          PDFWriterPrintf(v55, (uint64_t)"/%N Do", v109, v110, v111, v112, v113, v114, (uint64_t)(v19 + 3));
          PDFWriterPrintf(v55, (uint64_t)"Q", v115, v116, v117, v118, v119, v120, (uint64_t)decodeb);
        }
        PDFWriterAnnotate((uint64_t)v55, (uint64_t)"%s: END: drawing %s.", v100, v101, v102, v103, v104, v105, (uint64_t)"PDFWriteImage");
        CFRelease(Image);
        return;
      }
      unsigned int v125 = *(char *)(*(void *)(a2 + 120) + 4);
      uint64_t NumberOfComponents = CGGStateGetFillColor(a2);
      unint64_t v29 = NumberOfComponents;
      uint64_t v126 = v9;
      if (NumberOfComponents)
      {
        if (NumberOfComponents < 0) {
          uint64_t NumberOfComponents = CGTaggedColorGetNumberOfComponents(NumberOfComponents, v22, v23, v24, v25, v26, v27, v28);
        }
        else {
          uint64_t NumberOfComponents = *(void *)(NumberOfComponents + 56);
        }
      }
      uint64_t v30 = NumberOfComponents - 1;
      uint64_t v128 = (uint64_t)Image;
      size_t v31 = *((void *)Image + 5);
      size_t v32 = *((void *)Image + 6);
      size_t bytesPerRowa = (NumberOfComponents - 1) * v31;
      size_t v124 = bytesPerRowa * v32;
      uint64_t v33 = (char *)malloc_type_malloc(bytesPerRowa * v32, 0xEBF36768uLL);
      if (v32)
      {
        for (uint64_t i = 0; i != v32; ++i)
        {
          if (v31)
          {
            uint64_t v35 = 0;
            uint64_t v36 = &v33[i * bytesPerRowa];
            do
            {
              if (v30)
              {
                for (uint64_t j = 0; j != v30; ++j)
                  v36[j] = (int)(CGColorGetComponents((CGColorRef)v29)[j] * 255.0 + 0.5);
                v36 += j;
              }
              ++v35;
            }
            while (v35 != v31);
          }
        }
      }
      check_clients_buffer("CGDataProviderCreateWithData", v33, v124);
      uint64_t v45 = CGDataProviderCreateWithDataInternal(0, (uint64_t)v33, v124, (uint64_t)release_data, 0);
      if (v29)
      {
        uint64_t v9 = v126;
        if ((v29 & 0x8000000000000000) != 0) {
          CGColorSpaceRef ColorSpace = CGTaggedColorGetColorSpace(v29, v38, v39, v40, v41, v42, v43, v44);
        }
        else {
          CGColorSpaceRef ColorSpace = *(CGColorSpace **)(v29 + 24);
        }
      }
      else
      {
        CGColorSpaceRef ColorSpace = 0;
        uint64_t v9 = v126;
      }
      CGImageRef v47 = CGImageCreate(v31, v32, 8uLL, 8 * v30, bytesPerRowa, ColorSpace, 0, v45, 0, 1, kCGRenderingIntentDefault);
      CGDataProviderRelease(v45);
      CGImageRef Image = (CGImageRef)v128;
      CGImageRef v48 = CGImageCreateWithMaskAndMatte((uint64_t)v47, v128, 0);
      if (v47) {
        CFRelease(v47);
      }
      uint64_t v19 = PDFDocumentAddImage(*(void *)v9, (uint64_t)v48, v125);
      if (v48) {
        CFRelease(v48);
      }
    }
    else
    {
      uint64_t v19 = PDFDocumentAddImage(*(void *)v9, (uint64_t)Image, v18);
    }
    int v20 = 0;
    goto LABEL_40;
  }
}

void release_data(int a1, void *a2)
{
}

void PDFContentStreamDrawGlyphs(uint64_t a1, uint64_t a2, double *a3, unsigned __int16 *a4, double *a5, unint64_t a6, __n128 a7)
{
  int8x16_t v225 = a5;
  int8x16_t v224 = a4;
  unsigned int v226 = a3;
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1, a7);
  int v228 = (char *)&v223 - v11;
  if (v10 <= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v13 = (char *)&v223 - v11;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v10 - 0x7FFFFFFFFFFFFFFFLL >= 0x8000000000000102) {
    uint64_t v13 = (char *)malloc_type_malloc(2 * a6, 0x5DCB0CDAuLL);
  }
  uint64_t v14 = (char *)MEMORY[0x1F4188790](v13, v12);
  uint64_t v23 = (char *)&v221 - v22 + 1;
  uint64_t v227 = (char *)&v221 - v22 + 1;
  if (v21 > 0xFFFFFFFFFFFFFFELL) {
    uint64_t v23 = 0;
  }
  float v231 = v14;
  if (v21 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000102) {
    unsigned int v230 = (char *)malloc_type_malloc(16 * a6, 0xD81386D7uLL);
  }
  else {
    unsigned int v230 = v23;
  }
  uint64_t v229 = a1;
  uint64_t v24 = *(const CGPath **)(a1 + 200);
  unint64_t v25 = a6;
  if (v24)
  {
    unint64_t v25 = 0;
    double v26 = *v226;
    double v27 = v226[1];
    double v29 = v226[2];
    double v28 = v226[3];
    uint64_t v30 = v224;
    size_t v31 = v225;
    unint64_t v32 = a6;
    double v235 = v226[4];
    double v234 = v226[5];
    double v233 = v27;
    do
    {
      double v33 = *v31;
      double v34 = v31[1];
      CGGlyph glyphs = *v30;
      uint64_t v35 = *(CGFont **)(*(void *)(a2 + 136) + 8);
      font_info = get_font_info(v35);
      CGFloat v237 = v33;
      double v236 = v34;
      if (font_info) {
        int v37 = font_info[2];
      }
      else {
        int v37 = 0;
      }
      double v38 = (double)v37;
      double v39 = *(double *)(*(void *)(a2 + 136) + 16) / (double)v37;
      double v40 = v26 * v39;
      double v41 = v39 * v27;
      double v42 = v26;
      double v43 = v39 * v29;
      double v44 = v29;
      double v45 = v39 * v28;
      memset(&bboxes, 0, 32);
      if (CGFontGetGlyphBBoxes(v35, &glyphs, 1uLL, (CGRect *)&bboxes))
      {
        double v46 = v42;
        CGFloat v232 = v235 + v236 * v44 + v42 * v237;
        double v47 = v233;
        v243.origin.CGFloat x = bboxes.a;
        v243.origin.CGFloat y = bboxes.b;
        CGFloat v237 = v234 + v236 * v28 + v233 * v237;
        v243.size.double width = bboxes.c;
        v243.size.double height = bboxes.d;
        v240.a = v40;
        v240.b = v41;
        v240.c = v43;
        v240.d = v45;
        v240.tCGFloat x = 0.0;
        v240.tCGFloat y = 0.0;
        CGRect v244 = CGRectApplyAffineTransform(v243, &v240);
        CGRect v245 = CGRectOffset(v244, v232, v237);
        double v26 = v46;
        double v27 = v47;
      }
      else
      {
        v246.origin.CGFloat x = -v38;
        v246.size.double width = v38 + v38;
        v240.a = v40;
        v240.b = v41;
        v240.c = v43;
        v240.d = v45;
        v240.tCGFloat x = 0.0;
        v240.tCGFloat y = 0.0;
        v246.origin.CGFloat y = -v38;
        v246.size.double height = v38 + v38;
        CGRect v247 = CGRectApplyAffineTransform(v246, &v240);
        double v27 = v233;
        CGRect v249 = CGRectOffset(v247, v235 + v236 * v44 + v42 * v237, v234 + v236 * v28 + v233 * v237);
        CGRect v245 = CGRectUnion(v249, v249);
        double v26 = v42;
      }
      double v29 = v44;
      long long v48 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)&v240.a = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v240.c = v48;
      *(_OWORD *)&v240.tCGFloat x = *(_OWORD *)(a2 + 56);
      CGRect v248 = CGRectApplyAffineTransform(v245, &v240);
      CGFloat x = v248.origin.x;
      CGFloat y = v248.origin.y;
      if ((CGPathIntersectsRect(v24, v248.origin.x, v248.origin.y, v248.size.width, v248.size.height) & 1) == 0)
      {
        v242.CGFloat x = x;
        v242.CGFloat y = y;
        if (!CGPathContainsPoint(v24, 0, v242, 0))
        {
          *(_WORD *)&v231[2 * v25] = *v30;
          *(_OWORD *)&v230[16 * v25++] = *(_OWORD *)v31;
        }
      }
      v31 += 2;
      ++v30;
      --v32;
    }
    while (v32);
  }
  if (!v25) {
    goto LABEL_34;
  }
  unsigned int v51 = *(char *)(*(void *)(a2 + 136) + 1);
  uint64_t v52 = v229;
  if (*(unsigned char *)(v229 + 169)) {
    unsigned int v51 = 3;
  }
  if (v51 >= 8)
  {
LABEL_34:
    double v67 = v230;
    if (v231 != v228) {
      free(v231);
    }
    if (v67 != v227) {
      free(v67);
    }
    return;
  }
  CGTextDrawingMode v53 = dword_185294DB8[v51];
  uint64_t v54 = *(void *)(v229 + 64);
  double v222 = *(double *)&off_1E52CD9C0[v51];
  PDFWriterAnnotate(v54, (uint64_t)"%s: BEGIN: %s", v15, v16, v17, v18, v19, v20, (uint64_t)"PDFContentStreamDrawGlyphs");
  PDFGStateSetClipStack(*(void *)(v52 + 104), *(__CFArray **)(a2 + 112));
  if (*(unsigned char *)(v52 + 169)) {
    int v61 = 3;
  }
  else {
    int v61 = v53;
  }
  if ((v61 & 1) == 0)
  {
    double v62 = *(double *)(*(void *)(a2 + 120) + 8);
    unint64_t FillColor = CGGStateGetFillColor(a2);
    PDFGStateSetFillColor(*(void *)(v52 + 104), FillColor);
    uint64_t v65 = *(void *)(v52 + 104);
    if (FillColor)
    {
      if ((FillColor & 0x8000000000000000) != 0) {
        double Alpha = CGTaggedColorGetAlpha(FillColor, v64, v55, v56, v57, v58, v59, v60);
      }
      else {
        double Alpha = *(double *)(FillColor + 8 * *(void *)(FillColor + 56) + 56);
      }
    }
    else
    {
      double Alpha = 0.0;
    }
    double v68 = v62 * Alpha;
    if (*(double *)(v65 + 168) != v68)
    {
      *(double *)(v65 + 16++*(_DWORD *)(result + 8) = v68;
      addEmitFunction(v65, emitNonStrokeAlphaChange);
    }
    uint64_t v69 = *(void *)(v52 + 104);
    int v70 = *(unsigned __int8 *)(*(void *)(a2 + 144) + 24);
    if (*(unsigned __int8 *)(v69 + 200) != v70)
    {
      *(unsigned char *)(v69 + 200) = v70;
      addEmitFunction(v69, emitNonStrokeOverprintChange);
    }
  }
  if ((v61 - 1) <= 1)
  {
    double v71 = *(double *)(*(void *)(a2 + 120) + 8);
    unint64_t StrokeColor = CGGStateGetStrokeColor(a2);
    PDFGStateSetStrokeColor(*(void *)(v52 + 104), StrokeColor);
    uint64_t v80 = *(void *)(v52 + 104);
    if (StrokeColor)
    {
      if ((StrokeColor & 0x8000000000000000) != 0) {
        double v81 = CGTaggedColorGetAlpha(StrokeColor, v73, v74, v75, v76, v77, v78, v79);
      }
      else {
        double v81 = *(double *)(StrokeColor + 8 * *(void *)(StrokeColor + 56) + 56);
      }
    }
    else
    {
      double v81 = 0.0;
    }
    double v83 = v71 * v81;
    if (*(double *)(v80 + 176) != v83)
    {
      *(double *)(v80 + 176) = v83;
      addEmitFunction(v80, emitStrokeAlphaChange);
    }
    PDFGStateSetStrokeOverprint(*(void *)(v52 + 104), *(unsigned __int8 *)(*(void *)(a2 + 144) + 25));
    uint64_t v84 = *(void *)(v52 + 104);
    uint64_t v85 = *(void *)(a2 + 128);
    double v86 = *(double *)(v85 + 8);
    if (v86 == -1.0905473e16) {
      double v86 = 0.0;
    }
    if (*(double *)(v84 + 48) != v86)
    {
      *(double *)(v84 + 4++*(_DWORD *)(result + 8) = v86;
      addEmitFunction(v84, emitLineWidthChange);
      uint64_t v84 = *(void *)(v52 + 104);
      uint64_t v85 = *(void *)(a2 + 128);
    }
    __int16 v87 = *(_WORD *)(v85 + 2);
    if (*(_DWORD *)(v84 + 56) != (char)v87)
    {
      *(_DWORD *)(v84 + 56) = (char)v87;
      addEmitFunction(v84, emitLineCapChange);
      uint64_t v84 = *(void *)(v52 + 104);
      uint64_t v85 = *(void *)(a2 + 128);
      __int16 v87 = *(_WORD *)(v85 + 2);
    }
    if (*(_DWORD *)(v84 + 60) != v87 >> 8)
    {
      *(_DWORD *)(v84 + 60) = v87 >> 8;
      addEmitFunction(v84, emitLineJoinChange);
      uint64_t v84 = *(void *)(v52 + 104);
      uint64_t v85 = *(void *)(a2 + 128);
    }
    double v88 = *(double *)(v85 + 16);
    if (*(double *)(v84 + 64) != v88)
    {
      *(double *)(v84 + 64) = v88;
      addEmitFunction(v84, emitMiterLimitChange);
      uint64_t v84 = *(void *)(v52 + 104);
      uint64_t v85 = *(void *)(a2 + 128);
    }
    PDFGStateSetLineDash(v84, *(atomic_uint **)(v85 + 32));
    uint64_t v82 = *(void *)(v52 + 104);
    goto LABEL_66;
  }
  uint64_t v82 = *(void *)(v52 + 104);
  if (v61 != 3)
  {
LABEL_66:
    double v89 = *(double *)(*(void *)(a2 + 144) + 8);
    if (*(double *)(v82 + 88) != v89)
    {
      *(double *)(v82 + 8++*(_DWORD *)(result + 8) = v89;
      addEmitFunction(v82, emitFlatnessChange);
      uint64_t v82 = *(void *)(v52 + 104);
    }
    int v90 = *(unsigned __int8 *)(*(void *)(a2 + 128) + 1);
    if (*(unsigned __int8 *)(v82 + 96) != v90)
    {
      *(unsigned char *)(v82 + 96) = v90;
      addEmitFunction(v82, emitStrokeAdjustChange);
      uint64_t v82 = *(void *)(v52 + 104);
    }
    uint64_t v91 = *(void *)(a2 + 120);
    int v92 = *(_DWORD *)(v91 + 4);
    if ((v92 & 0xF0000) != 0) {
      int v93 = v92 << 12 >> 28;
    }
    else {
      int v93 = 2;
    }
    if (*(_DWORD *)(v82 + 80) != v93)
    {
      *(_DWORD *)(v82 + 80) = v93;
      addEmitFunction(v82, emitRenderingIntentChange);
      uint64_t v82 = *(void *)(v52 + 104);
      uint64_t v91 = *(void *)(a2 + 120);
    }
    double v94 = *(double *)(v91 + 24);
    double v95 = *(double *)(v91 + 32);
    long long v96 = *(_OWORD *)(v52 + 136);
    *(_OWORD *)&v240.a = *(_OWORD *)(v52 + 120);
    *(_OWORD *)&v240.c = v96;
    *(_OWORD *)&v240.tCGFloat x = *(_OWORD *)(v52 + 152);
    PDFGStateSetPatternMatrix(v82, (uint64_t)&v240, v55, v56, v57, v58, v59, v60, v94, v95);
    uint64_t v103 = *(void *)(v52 + 104);
    uint64_t v104 = *(void *)(a2 + 144);
    double v105 = *(double *)(v104 + 16);
    if (*(double *)(v103 + 224) != v105)
    {
      *(double *)(v103 + 224) = v105;
      addEmitFunction(v103, emitSmoothnessChange);
      uint64_t v103 = *(void *)(v52 + 104);
      uint64_t v104 = *(void *)(a2 + 144);
    }
    PDFGStateSetOverprintMode(v103, *(unsigned int *)(v104 + 28), v97, v98, v99, v100, v101, v102);
    PDFGStateSetBlackGeneration(*(void *)(v52 + 104), *(CFTypeRef *)(*(void *)(a2 + 144) + 32));
    PDFGStateSetUndercolorRemoval(*(void *)(v52 + 104), *(CFTypeRef *)(*(void *)(a2 + 144) + 40));
    PDFGStateSetStyle(*(void *)(v52 + 104), *(void *)(*(void *)(a2 + 120) + 16));
    PDFGStateSetSoftMask(*(void *)(v52 + 104), *(CFTypeRef *)(*(void *)(a2 + 120) + 40));
    uint64_t v82 = *(void *)(v52 + 104);
    int v106 = (int)(*(_DWORD *)(*(void *)(a2 + 120) + 4) << 16) >> 24;
    if ((v106 - 13) >= 0xF) {
      int v106 = 2;
    }
    if (*(_DWORD *)(v82 + 248) != v106)
    {
      *(_DWORD *)(v82 + 24++*(_DWORD *)(result + 8) = v106;
      addEmitFunction(v82, emitBlendModeChange);
      uint64_t v82 = *(void *)(v52 + 104);
    }
    if (*(_DWORD *)(v82 + 184) == v61) {
      goto LABEL_84;
    }
    *(_DWORD *)(v82 + 184) = v61;
    goto LABEL_83;
  }
  if (*(_DWORD *)(v82 + 184) != 3)
  {
    *(_DWORD *)(v82 + 184) = 3;
LABEL_83:
    addEmitFunction(v82, emitTextDrawingModeChange);
  }
LABEL_84:
  PDFWriterAnnotate(*(void *)(v52 + 64), (uint64_t)"  BEGIN: synchronizing gstate.", v55, v56, v57, v58, v59, v60, v223);
  PDFGStateEmit(*(CFArrayRef **)(v52 + 104));
  PDFWriterAnnotate(*(void *)(v52 + 64), (uint64_t)"  END: synchronizing gstate.", v107, v108, v109, v110, v111, v112, v223);
  uint64_t v113 = PDFDocumentAddFont(*(void *)v52, *(void *)(*(void *)(a2 + 136) + 8));
  uint64_t v114 = (const void *)v113;
  if (*(unsigned char *)(v52 + 169)) {
    *(unsigned char *)(v113 + 56) = 1;
  }
  uint64_t v115 = *(void *)(v52 + 112);
  if (v115 && v113)
  {
    *(_DWORD *)(v115 + 24) |= 2u;
    uint64_t v116 = *(const void ***)(v115 + 48);
    if (!v116)
    {
      uint64_t v116 = CGOrderedSetCreate();
      *(void *)(v115 + 4++*(_DWORD *)(result + 8) = v116;
    }
    CGOrderedSetAddValue((CFSetRef *)v116, v114);
  }
  uint64_t v117 = *(void *)v52;
  uint64_t v118 = *(void *)(v52 + 64);
  uint64_t v119 = malloc_type_calloc(1uLL, 0x58uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  *(_DWORD *)uint64_t v119 = 1;
  v119[1] = v117;
  v119[2] = v118;
  v119[9] = 0;
  long long v120 = *(_OWORD *)(a2 + 24);
  long long v121 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v119 + 7) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v119 + 5) = v121;
  *(_OWORD *)(v119 + 3) = v120;
  uint64_t v122 = *(void *)(a2 + 136);
  float v123 = *(const void **)(v122 + 8);
  double v124 = *(double *)(v122 + 16);
  if (v25 >= a6)
  {
    PDFTextLayoutAddGlyphsWithPositions(v119, v123, (uint64_t)v226, v224, v225, a6, v124);
    unsigned int v125 = v231;
  }
  else
  {
    unsigned int v125 = v231;
    PDFTextLayoutAddGlyphsWithPositions(v119, v123, (uint64_t)v226, (unsigned __int16 *)v231, v230, v25, v124);
  }
  float v133 = (void *)v119[10];
  if (v133)
  {
    unsigned int v134 = 0;
    do
    {
      int8x16_t v135 = v133;
      float v133 = (void *)*v133;
      *int8x16_t v135 = v134;
      unsigned int v134 = v135;
    }
    while (v133);
    v119[10] = 0;
    unsigned int v136 = v135;
    do
    {
      uint64_t v137 = v136[1];
      layout_flush_block(v119, v137, v132);
      if (v137)
      {
        CGRect v138 = *(const void **)(v137 + 24);
        if (v138) {
          CFRelease(v138);
        }
        free(*(void **)(v137 + 8));
        free(*(void **)(v137 + 16));
        free((void *)v137);
      }
      unsigned int v136 = (void *)*v136;
    }
    while (v136);
    do
    {
      uint64_t v139 = (void *)*v135;
      free(v135);
      int8x16_t v135 = v139;
    }
    while (v139);
  }
  else
  {
    v119[10] = 0;
  }
  uint64_t v140 = (unsigned char **)v119[2];
  PDFWriterAnnotate((uint64_t)v140, (uint64_t)"BEGIN: begin text object.", v126, v127, v128, v129, v130, v131, v223);
  if (*((double *)v119 + 3) == 1.0
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)v119 + 2)), (int32x4_t)vceqq_f64(*((float64x2_t *)v119 + 3), (float64x2_t)xmmword_1850CD830))))) & 1) == 0&& *((double *)v119 + 8) == 0.0)
  {
    int v147 = 1;
  }
  else
  {
    PDFWriterPrintf(v140, (uint64_t)"q %*m cm", v141, v142, v143, v144, v145, v146, (uint64_t)(v119 + 3));
    int v147 = 0;
  }
  PDFWriterPrintf(v140, (uint64_t)"BT", v141, v142, v143, v144, v145, v146, v223);
  int v154 = (void *)v119[9];
  if (!v154)
  {
    v119[9] = 0;
    goto LABEL_157;
  }
  LODWORD(v237) = v147;
  unsigned int v155 = 0;
  do
  {
    int8x16_t v156 = v154;
    int v154 = (void *)*v154;
    *int8x16_t v156 = v155;
    unsigned int v155 = v156;
  }
  while (v154);
  float v157 = 0;
  v119[9] = v156;
  double v158 = 0.0;
  do
  {
    float v159 = (uint64_t *)v156[1];
    if (!v159[9]) {
      goto LABEL_150;
    }
    if (*((double *)v159 + 8) != v158)
    {
      PDFWriterPrintf(v140, (uint64_t)"%f Tc", v148, v149, v150, v151, v152, v153, v159[8]);
      double v158 = *((double *)v159 + 8);
    }
    if (!v157)
    {
      double v161 = *((double *)v159 + 7);
LABEL_133:
      if (v161 == 0.0) {
        goto LABEL_136;
      }
LABEL_134:
      double v221 = v161;
      int8x16_t v179 = v140;
      float32x4_t v180 = "%*m Tm";
      goto LABEL_135;
    }
    float v160 = (CGAffineTransform *)v157[7];
    double v161 = *((double *)v159 + 7);
    if (!v160 || v161 == 0.0) {
      goto LABEL_133;
    }
    CGAffineTransform bboxes = *v160;
    CGAffineTransformInvert(&v240, &bboxes);
    _V0.D[1] = v240.b;
    _D2 = **(double **)&v161;
    double v164 = *(double *)(*(void *)&v161 + 16);
    double v165 = *(double *)(*(void *)&v161 + 24);
    __asm { FMLA            D3, D2, V0.D[1] }
    double v171 = fabs(_D3);
    double v172 = fabs(vmlad_n_f64(v165 * v240.c, v164, v240.a));
    BOOL v174 = fabs(vmlad_n_f64(*(double *)(*(void *)&v161 + 8) * v240.c, **(double **)&v161, v240.a) + -1.0) > 0.00000596046448
        || v171 > 0.00000596046448
        || v172 > 0.00000596046448;
    double v175 = fabs(v165 * v240.d + v164 * v240.b + -1.0);
    if (v174 || v175 > 0.00000596046448) {
      goto LABEL_134;
    }
    _D3 = *(double *)(*(void *)&v161 + 32);
    __asm { FMLA            D1, D3, V0.D[1] }
    double v221 = v240.tx + vmlad_n_f64(*(double *)(*(void *)&v161 + 40) * v240.c, _D3, v240.a);
    double v222 = _D1 + v240.ty;
    int8x16_t v179 = v140;
    float32x4_t v180 = "%f %f Td";
LABEL_135:
    PDFWriterPrintf(v179, (uint64_t)v180, v148, v149, v150, v151, v152, v153, *(uint64_t *)&v221);
LABEL_136:
    PDFWriterPrintf(v140, (uint64_t)"/%s 1 Tf", v148, v149, v150, v151, v152, v153, *v159);
    float v187 = (void *)v159[9];
    if (*v187 || (uint64_t v198 = v187[1], *(double *)(v198 + 8) != 0.0))
    {
      PDFWriterPrintf(v140, (uint64_t)"[", v181, v182, v183, v184, v185, v186, v223);
      float v194 = (void *)v159[9];
      if (v194)
      {
        float v195 = 0;
        do
        {
          uint64_t v196 = v194;
          float v194 = (void *)*v194;
          *uint64_t v196 = v195;
          float v195 = v196;
        }
        while (v194);
        v159[9] = (uint64_t)v196;
        do
        {
          uint64_t v197 = v196[1];
          emit_sequence(v140, v197, v188, v189, v190, v191, v192, v193);
          if (*(double *)(v197 + 8) != 0.0) {
            PDFWriterPrintf(v140, (uint64_t)"%f", v188, v189, v190, v191, v192, v193, *(void *)(v197 + 8));
          }
          uint64_t v196 = (void *)*v196;
        }
        while (v196);
      }
      else
      {
        v159[9] = 0;
      }
      unsigned int v199 = "] TJ";
    }
    else
    {
      emit_sequence(v140, v198, v181, v182, v183, v184, v185, v186);
      unsigned int v199 = "Tj";
    }
    PDFWriterPrintf(v140, (uint64_t)v199, v188, v189, v190, v191, v192, v193, v223);
    float v157 = v159;
LABEL_150:
    int8x16_t v156 = (void *)*v156;
  }
  while (v156);
  LOBYTE(v147) = LOBYTE(v237);
  if (v158 == 0.0) {
    int v200 = 0;
  }
  else {
    int v200 = LODWORD(v237);
  }
  unsigned int v125 = v231;
  if (v200 == 1) {
    PDFWriterPrintf(v140, (uint64_t)"0 Tc", v148, v149, v150, v151, v152, v153, v223);
  }
LABEL_157:
  PDFWriterPrintf(v140, (uint64_t)"ET", v148, v149, v150, v151, v152, v153, v223);
  if ((v147 & 1) == 0) {
    PDFWriterPrintf(v140, (uint64_t)"Q", v201, v202, v203, v204, v205, v206, v223);
  }
  PDFWriterAnnotate((uint64_t)v140, (uint64_t)"BEGIN: end text object.", v201, v202, v203, v204, v205, v206, v223);
  _ZF = atomic_fetch_add_explicit((atomic_uint *volatile)v119, 0xFFFFFFFF, memory_order_relaxed) == 1;
  uint64_t v213 = v229;
  if (_ZF)
  {
    uint64_t v214 = (void *)v119[9];
    if (v214)
    {
      do
      {
        int v215 = (void *)v214[1];
        unsigned int v216 = (uint64_t **)v215[9];
        if (v216)
        {
          do
          {
            free(v216[1]);
            unsigned int v216 = (uint64_t **)*v216;
          }
          while (v216);
          unsigned int v217 = (void *)v215[9];
          if (v217)
          {
            do
            {
              float v218 = (void *)*v217;
              free(v217);
              unsigned int v217 = v218;
            }
            while (v218);
          }
        }
        free(v215);
        uint64_t v214 = (void *)*v214;
      }
      while (v214);
      float32x4_t v219 = (void *)v119[9];
      uint64_t v213 = v229;
      if (v219)
      {
        do
        {
          float32x4_t v220 = (void *)*v219;
          free(v219);
          float32x4_t v219 = v220;
        }
        while (v220);
      }
    }
    free(v119);
  }
  if (v125 != v228) {
    free(v125);
  }
  if (v230 != v227) {
    free(v230);
  }
  PDFWriterAnnotate(*(void *)(v213 + 64), (uint64_t)"%s: END", v207, v208, v209, v210, v211, v212, (uint64_t)"PDFContentStreamDrawGlyphs");
}

void PDFContentStreamBeginTagWithMCID(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a1;
  if (*(_DWORD *)(*a1 + 544) != 1)
  {
    *(_DWORD *)(v10 + 544) = 2;
    CFDictionaryRef StructureTree = (const __CFDictionary *)CGPDFTaggedPagePropertiesGetStructureTree(a2);
    if (StructureTree)
    {
      CFDictionaryRef v12 = StructureTree;
      theArraCGFloat y = 0;
      StructureElementPathForMCID(StructureTree, a3, &theArray);
      CFArrayRef v13 = theArray;
      if (theArray)
      {
        if (CFArrayGetCount(theArray) >= 1)
        {
          if (!*(void *)(v10 + 568))
          {
            if (CFDictionaryGetCount(v12) < 1)
            {
              *(void *)(v10 + 56++*(_DWORD *)(result + 8) = PDFDocumentCreateTagNode((PDFDocument *)v10, 0, 100, 0, 0);
            }
            else
            {
              uint64_t v19 = -1;
              CGCFDictionaryGetNumber(v12, @"TagNodeMCID", kCFNumberSInt64Type, &v19);
              CGPDFTagType v18 = CGPDFTagTypeDiv;
              CGCFDictionaryGetInteger(v12, @"TagNodeType", &v18);
              CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v12, @"TagNodeProperties");
              *(void *)(v10 + 56++*(_DWORD *)(result + 8) = PDFDocumentCreateTagNode((PDFDocument *)v10, v19, v18, Value, 0);
              uint64_t valuePtr = -1;
              CGCFDictionaryGetNumber(v12, @"TagNodeObjectRefID", kCFNumberSInt64Type, &valuePtr);
              CGCFDictionarySetNumber(*(__CFDictionary **)(v10 + 568), @"TagNodeObjectRefID", kCFNumberSInt64Type, &valuePtr);
              uint64_t v15 = CFDictionaryGetValue(v12, @"ID");
              if (v15)
              {
                uint64_t v16 = v15;
                if (CFGetTypeID(v15) == 134217984) {
                  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v10 + 568), @"ID", v16);
                }
              }
            }
          }
          PDFDocumentInsertStructureElementPath((PDFDocument *)v10, v13);
          CFRelease(v13);
        }
      }
    }
  }
  ++a1[22];
  PDFWriterPrintf((unsigned char **)a1[8], (uint64_t)"/P << /MCID %d >> BDC", a3, a4, a5, a6, a7, a8, a3);
}

void PDFContentStreamBeginAccessibilitySpan(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4 = 0;
  char v5 = 0;
  v21[12] = *MEMORY[0x1E4F143B8];
  v21[0] = @"CGPDFTagPropertyAlternativeText";
  v21[1] = "Alt";
  v21[2] = 0;
  v21[3] = @"CGPDFTagPropertyActualText";
  v21[4] = "ActualText";
  v21[5] = 0;
  v21[6] = @"CGPDFTagPropertyLanguageText";
  v21[7] = "Lang";
  v21[8] = 0;
  v21[9] = @"CGPDFTagPropertyExpansionText";
  v21[10] = "E";
  v21[11] = 0;
LABEL_2:
  uint64_t v6 = 3 * v4;
  do
  {
    uint64_t v20 = 0;
    uint64_t v7 = (const void *)v21[v6];
    CFTypeID TypeID = CFStringGetTypeID();
    if (CGCFDictionaryGetCFTypeRef(a2, v7, TypeID, &v20))
    {
      v21[3 * v4++ + 2] = v20;
      char v5 = 1;
      if (v4 != 4) {
        goto LABEL_2;
      }
      goto LABEL_9;
    }
    ++v4;
    v6 += 3;
  }
  while (v4 != 4);
  if ((v5 & 1) == 0)
  {
    uint64_t v15 = (unsigned char ***)(a1 + 64);
    CGPDFTagType v18 = "/Span BDC";
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v16 = *(unsigned char ***)(a1 + 64);
  uint64_t v15 = (unsigned char ***)(a1 + 64);
  PDFWriterPrintf(v16, (uint64_t)"/Span <<", v9, v10, v11, v12, v13, v14, v19);
  uint64_t v17 = 0;
  CGPDFTagType v18 = ">> BDC";
  do
  {
    if (v21[v17 + 2]) {
      PDFWriterPrintf(*v15, (uint64_t)"/%s %T", v9, v10, v11, v12, v13, v14, v21[v17 + 1]);
    }
    v17 += 3;
  }
  while (v17 != 12);
LABEL_15:
  PDFWriterPrintf(*v15, (uint64_t)v18, v9, v10, v11, v12, v13, v14, v19);
}

void *list_sort_1(void *result, unint64_t a2)
{
  if (a2 >= 2)
  {
    unint64_t v3 = a2 >> 1;
    uint64_t v4 = result;
    uint64_t v5 = (a2 >> 1) - 1;
    if (a2 >> 1 != 1)
    {
      uint64_t v4 = result;
      do
      {
        uint64_t v4 = (void *)v4[1];
        --v5;
      }
      while (v5);
    }
    uint64_t v6 = v4[1];
    v4[1] = 0;
    uint64_t v7 = (void *)list_sort_1(result, a2 >> 1);
    uint64_t result = (void *)list_sort_1(v6, a2 - v3);
    uint64_t v8 = *result;
    uint64_t v9 = *v7;
    if (*result) {
      LODWORD(v++*(_DWORD *)(result + 8) = *(_DWORD *)(v8 + 4);
    }
    if (v9) {
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
    }
    if (v8 <= v9)
    {
      uint64_t v11 = (void *)v7[1];
      uint64_t v10 = result;
      uint64_t result = v7;
    }
    else
    {
      uint64_t v10 = (void *)result[1];
      uint64_t v11 = v7;
    }
    BOOL v12 = v11 != 0;
    if (v11 && v10)
    {
      uint64_t v13 = result;
      do
      {
        uint64_t v14 = *v10;
        if (*v10) {
          LODWORD(v14) = *(_DWORD *)(v14 + 4);
        }
        uint64_t v15 = *v11;
        if (*v11) {
          LODWORD(v15) = *(_DWORD *)(v15 + 4);
        }
        if (v14 <= v15)
        {
          v13[1] = v11;
          uint64_t v17 = (void *)v11[1];
          uint64_t v16 = v10;
          uint64_t v13 = v11;
        }
        else
        {
          v13[1] = v10;
          uint64_t v16 = (void *)v10[1];
          uint64_t v17 = v11;
          uint64_t v13 = v10;
        }
        BOOL v12 = v17 != 0;
        if (!v17) {
          break;
        }
        uint64_t v10 = v16;
        uint64_t v11 = v17;
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = v11;
      uint64_t v16 = v10;
      uint64_t v13 = result;
    }
    if (v12) {
      CGPDFTagType v18 = v17;
    }
    else {
      CGPDFTagType v18 = v16;
    }
    v13[1] = v18;
  }
  return result;
}

uint64_t CGGStateRetain(uint64_t result)
{
  if (result) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 1u, memory_order_relaxed);
  }
  return result;
}

__n128 CGGStateSetCTM(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = v3;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

void handle_invalid_context(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (handle_invalid_context_predicate != -1) {
    dispatch_once(&handle_invalid_context_predicate, &__block_literal_global_19638);
  }
  if (handle_invalid_context_show_log)
  {
    uint64_t v16 = CGBacktraceCreate(0);
    CGPostError((uint64_t)"%s: invalid context %p. Backtrace:\n%s\n", v9, v10, v11, v12, v13, v14, v15, a1);
    free(v16);
  }
  else
  {
    CGPostError((uint64_t)"%s: invalid context %p. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\n", a2, a3, a4, a5, a6, a7, a8, a1);
  }
}

char *__handle_invalid_context_block_invoke()
{
  __n128 result = getenv("CG_CONTEXT_SHOW_BACKTRACE");
  handle_invalid_context_show_log = result != 0;
  return result;
}

char *__handle_invalid_numerics_block_invoke()
{
  __n128 result = getenv("CG_NUMERICS_SHOW_BACKTRACE");
  handle_invalid_numerics_show_log = result != 0;
  return result;
}

uint64_t __CGColorDataConverterGetTypeID_block_invoke_2()
{
  uint64_t result = __CGTypeRegisterInternal(CGColorDataConverterGetTypeID_runtime_class);
  CGColorDataConverterGetTypeID_id = result;
  return result;
}

uint64_t converter_retain_count(uint64_t a1, atomic_uint *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case -1:
      if (atomic_fetch_add_explicit(a2 + 4, 0xFFFFFFFF, memory_order_relaxed) == 1)
      {
        converter_provider_finalize((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        CFAllocatorRef v10 = CFGetAllocator(a2);
        CFAllocatorDeallocate(v10, a2);
      }
      break;
    case 0:
      return a2[4];
    case 1:
      return atomic_fetch_add_explicit(a2 + 4, 1u, memory_order_relaxed) + 1;
  }
  return 0;
}

uint64_t converter_provider_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 16)) {
    _CGHandleAssert("converter_provider_finalize", 60, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGConvertColorDataWithFormat.c", "CGAtomicGet(&converter->retain_count) == 0", "retain count %d", a6, a7, a8, *(_DWORD *)(a1 + 16));
  }
  uint64_t v9 = *(uint64_t **)(a1 + 88);
  if (v9) {
    CGAccessSessionRelease(v9);
  }

  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
}

CFStringRef converter_copy_format_description_19733(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 88);
  int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = 0;
  asprintf(&v5, "CGColorDataConverterRef: %p session: %p retain count: %d\n", (const void *)a1, v1, v4);
  CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"%s\n%@", v5, &stru_1ED0A02B0);
  free(v5);
  return v2;
}

BOOL CGConvertColorDataWithFormat(size_t width, size_t height, void *dst_data, CGColorDataFormat *dst_format, void *src_data, CGColorDataFormat *src_format, CFDictionaryRef options)
{
  long long v7 = *(_OWORD *)&dst_format->bitmap_info;
  v12[0] = *(_OWORD *)&dst_format->version;
  v12[1] = v7;
  v12[2] = *(_OWORD *)&dst_format->bytes_per_row;
  decode = dst_format->decode;
  long long v8 = *(_OWORD *)&src_format->bitmap_info;
  v10[0] = *(_OWORD *)&src_format->version;
  v10[1] = v8;
  v10[2] = *(_OWORD *)&src_format->bytes_per_row;
  uint64_t v11 = src_format->decode;
  return convert_color_data_with_format(0, width, (CGDataProvider *)height, (char *)dst_data, (uint64_t)v12, src_data, (uint64_t)v10, options);
}

BOOL convert_color_data_with_format(uint64_t *a1, vImagePixelCount a2, CGDataProvider *a3, char *a4, uint64_t a5, const void *a6, uint64_t a7, const __CFDictionary *a8)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (a1 && (uint64_t v16 = *a1) != 0)
  {
    uint64_t v17 = (pthread_mutex_t *)(v16 + 24);
    pthread_mutex_lock((pthread_mutex_t *)(v16 + 24));
    uint64_t v18 = *(void *)(v16 + 88);
    uint64_t v19 = *(void *)(v16 + 96);
    uint64_t v20 = *(void *)(v16 + 104);
    long long v21 = *(_OWORD *)(a5 + 16);
    __src[0] = *(_OWORD *)a5;
    __src[1] = v21;
    __src[2] = *(_OWORD *)(a5 + 32);
    *(void *)&__src[3] = *(void *)(a5 + 48);
    long long v22 = *(_OWORD *)(a7 + 16);
    v72[0] = *(_OWORD *)a7;
    v72[1] = v22;
    v72[2] = *(_OWORD *)(a7 + 32);
    *(void *)&v72[3] = *(void *)(a7 + 48);
    converted_time_t data = session_get_converted_data(v18, a2, (uint64_t)a3, a4, (uint64_t)__src, v19, (uint64_t)v72, v20);
    pthread_mutex_unlock(v17);
  }
  else
  {
    long long v24 = *(_OWORD *)(a7 + 16);
    __src[0] = *(_OWORD *)a7;
    __src[1] = v24;
    __src[2] = *(_OWORD *)(a7 + 32);
    *(void *)&__src[3] = *(void *)(a7 + 48);
    unint64_t v25 = bits_per_pixel_from_format((uint64_t)__src) * a2 + 7;
    unint64_t v26 = v25 >> 3;
    if (*(void *)(a7 + 32)) {
      unint64_t v26 = *(void *)(a7 + 32);
    }
    uint64_t v27 = v26 * ((void)a3 - 1) + (v25 >> 3);
    check_clients_buffer("CGDataProviderCreateWithData", a6, v27);
    CGDataProviderRef v28 = CGDataProviderCreateWithDataInternal(0, (uint64_t)a6, v27, 0, 0);
    if (v28)
    {
      double v29 = v28;
      int v70 = a4;
      CGColorSpaceRef v30 = colorspace_from_info(*(CFTypeRef *)(a5 + 8));
      CGColorSpaceRef v31 = colorspace_from_info(*(CFTypeRef *)(a7 + 8));
      CFDictionaryRef v32 = CGColorConversionInfoResolveOptions((uint64_t)v31, *(_DWORD *)(a7 + 16), a8);
      if (!a8 || v32)
      {
        CFDictionaryRef cf = v32;
        uint64_t v33 = color_transform_create(v30, v32);
        if (v33)
        {
          double v68 = (void *)v33;
          memset(__src, 0, sizeof(__src));
          unsigned int v34 = *(_DWORD *)(a5 + 16);
          uint64_t v35 = *(void *)(a5 + 24);
          int v36 = component_from_format(v34, v35);
          if (v30) {
            uint64_t v37 = *(void *)(*((void *)v30 + 3) + 48);
          }
          else {
            uint64_t v37 = 0;
          }
          CGBitmapPixelInfoInitialize(__src, (char *)__src, v36, v35, v37, v34 & 0x1F, v34 & 0x7000, v34 & 0xF0000, *(void *)(a5 + 48));
          memset(v72, 0, sizeof(v72));
          unsigned int v38 = *(_DWORD *)(a7 + 16);
          uint64_t v39 = *(void *)(a7 + 24);
          int v40 = component_from_format(v38, v39);
          if (v31) {
            uint64_t v41 = *(void *)(*((void *)v31 + 3) + 48);
          }
          else {
            uint64_t v41 = 0;
          }
          CGBitmapPixelInfoInitialize(v72, (char *)v72, v40, v39, v41, v38 & 0x1F, v38 & 0x7000, v38 & 0xF0000, *(void *)(a7 + 48));
          size_t v42 = *(void *)(a5 + 32);
          size_t v43 = *(void *)(a7 + 32);
          unsigned int v44 = *(_DWORD *)(a7 + 40);
          memcpy(__dst, __src, sizeof(__dst));
          memcpy(v71, v72, sizeof(v71));
          double v45 = (CGDataProvider *)CGDataProviderCreateForDestination(v68, a2, a3, (uint64_t)__dst, v42, v29, v31, v71, v43, v44);
          if (v45)
          {
            double v46 = v45;
            double v47 = CGAccessSessionCreate(v45);
            pthread_mutexattr_t v48 = *(pthread_mutexattr_t *)(a7 + 16);
            __dst[0] = *(pthread_mutexattr_t *)a7;
            __dst[1] = v48;
            __dst[2] = *(pthread_mutexattr_t *)(a7 + 32);
            __dst[3].__sig = *(void *)(a7 + 48);
            uint64_t v49 = bits_per_pixel_from_format((uint64_t)__dst);
            pthread_mutexattr_t v50 = *(pthread_mutexattr_t *)(a5 + 16);
            __dst[0] = *(pthread_mutexattr_t *)a5;
            __dst[1] = v50;
            __dst[2] = *(pthread_mutexattr_t *)(a5 + 32);
            __dst[3].__sig = *(void *)(a5 + 48);
            uint64_t v51 = bits_per_pixel_from_format((uint64_t)__dst);
            pthread_mutexattr_t v52 = *(pthread_mutexattr_t *)(a5 + 16);
            __dst[0] = *(pthread_mutexattr_t *)a5;
            __dst[1] = v52;
            __dst[2] = *(pthread_mutexattr_t *)(a5 + 32);
            __dst[3].__sig = *(void *)(a5 + 48);
            long long v53 = *(_OWORD *)(a7 + 16);
            v71[0] = *(_OWORD *)a7;
            v71[1] = v53;
            v71[2] = *(_OWORD *)(a7 + 32);
            uint64_t v54 = *(void *)(a7 + 48);
            uint64_t v55 = v51;
            *(void *)&_OWORD v71[3] = v54;
            uint64_t v56 = a2;
            uint64_t v57 = v49;
            BOOL v58 = session_get_converted_data((BOOL)v47, v56, (uint64_t)a3, v70, (uint64_t)__dst, v51, (uint64_t)v71, v49);
            converted_time_t data = v58;
            if (a1)
            {
              if (v58)
              {
                if (kCGConvertColorDataUseColorSyncForToneMapping_block_invoke_once != -1) {
                  dispatch_once(&kCGConvertColorDataUseColorSyncForToneMapping_block_invoke_once, &__block_literal_global_12_19722);
                }
                uint64_t Instance = CGTypeCreateInstance(CGColorDataConverterGetTypeID_id, 96, v59, v60, v61, v62, v63, v64);
                uint64_t v66 = Instance;
                if (Instance)
                {
                  *(void *)(Instance + 8++*(_DWORD *)(result + 8) = v47;
                  *(void *)(Instance + 96) = v55;
                  *(void *)(Instance + 104) = v57;
                  *(_DWORD *)(Instance + 16) = 1;
                  __dst[0] = 0uLL;
                  pthread_mutexattr_init(__dst);
                  pthread_mutexattr_settype(__dst, 2);
                  pthread_mutex_init((pthread_mutex_t *)(v66 + 24), __dst);
                  pthread_mutexattr_destroy(__dst);
                }
                *a1 = v66;
              }
            }
            else
            {
              CGAccessSessionRelease(v47);
            }
            CGDataProviderRelease(v46);
          }
          else
          {
            converted_time_t data = 0;
          }
          CFRelease(v68);
        }
        else
        {
          converted_time_t data = 0;
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      else
      {
        converted_time_t data = 0;
      }
      CGDataProviderRelease(v29);
    }
    else
    {
      return 0;
    }
  }
  return converted_data;
}

uint64_t bits_per_pixel_from_format(uint64_t a1)
{
  CGColorSpaceRef v2 = colorspace_from_info(*(CFTypeRef *)(a1 + 8));
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 == 5)
  {
    if ((v3 & 0xF0000) != 0) {
      return 16;
    }
    else {
      return 15;
    }
  }
  else
  {
    if (v2) {
      uint64_t v6 = *(void *)(*((void *)v2 + 3) + 48);
    }
    else {
      uint64_t v6 = 0;
    }
    if ((v3 & 0x1F) != 0) {
      uint64_t v7 = v6 + 1;
    }
    else {
      uint64_t v7 = v6;
    }
    return v7 * v4;
  }
}

CGColorSpaceRef colorspace_from_info(CFTypeRef cf)
{
  if (!cf) {
    return (CGColorSpaceRef)cf;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1) {
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_103_22795);
  }
  if (v2 == CGColorSpaceGetTypeID_type_id) {
    return (CGColorSpaceRef)cf;
  }

  return CGColorSpaceCreateWithPropertyList(cf);
}

uint64_t component_from_format(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 1:
      uint64_t result = 7;
      break;
    case 2:
      uint64_t result = 8;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      uint64_t result = 9;
      break;
    case 8:
      uint64_t result = 1;
      break;
    default:
      unsigned int v3 = 3;
      if (a2 != 32) {
        unsigned int v3 = 0;
      }
      if (a2 == 16) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = v3;
      }
      break;
  }
  return result;
}

BOOL session_get_converted_data(BOOL result, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v15 = (uint64_t *)result;
    CGAccessSessionRewind(result);
    unint64_t v17 = (unint64_t)(a8 * a2 + 7) >> 3;
    unint64_t v18 = *(void *)(a7 + 32);
    if (v18) {
      BOOL v19 = v18 >= v17;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19 && ((v20 = (unint64_t)(a6 * a2 + 7) >> 3, (unint64_t v21 = *(void *)(a5 + 32)) == 0) || v21 >= v20))
    {
      uint64_t v22 = v18 - v17;
      if (v18) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v21) {
        uint64_t v24 = v21 - v20;
      }
      else {
        uint64_t v24 = 0;
      }
      return CGAccessSessionGetChunksAtPosition(v15, 0, v20, v23, a3, a4, v24, v16) == v20 * a3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CGConvertColorData(uint64_t *a1, vImagePixelCount a2, CGDataProvider *a3, char *a4, uint64_t a5, const void *a6, uint64_t a7, const __CFDictionary *a8)
{
  long long v8 = *(_OWORD *)(a5 + 16);
  v13[0] = *(_OWORD *)a5;
  v13[1] = v8;
  v13[2] = *(_OWORD *)(a5 + 32);
  uint64_t v14 = *(void *)(a5 + 48);
  long long v9 = *(_OWORD *)(a7 + 16);
  v11[0] = *(_OWORD *)a7;
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a7 + 32);
  uint64_t v12 = *(void *)(a7 + 48);
  return convert_color_data_with_format(a1, a2, a3, a4, (uint64_t)v13, a6, (uint64_t)v11, a8);
}

void CGColorDataConverterRelease(const void *a1)
{
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID(a1);
    if (kCGConvertColorDataUseColorSyncForToneMapping_block_invoke_once != -1) {
      dispatch_once(&kCGConvertColorDataUseColorSyncForToneMapping_block_invoke_once, &__block_literal_global_12_19722);
    }
    if (v2 == CGColorDataConverterGetTypeID_id)
    {
      CFRelease(a1);
    }
  }
}

BOOL CGColorConversionInfoConvertData(void *a1, vImagePixelCount a2, CGColorSpace *a3, char *a4, long long *a5, char *a6, long long *a7)
{
  if (CGColorConversionInfoConvertData_cglibrarypredicate != -1) {
    dispatch_once(&CGColorConversionInfoConvertData_cglibrarypredicate, &__block_literal_global_15_19743);
  }
  if (CGColorConversionInfoConvertData_f() < 0xF010001)
  {
    CGPostError((uint64_t)"%s requires ColorSync version 3770.1.4 or newer", v14, v15, v16, v17, v18, v19, v20, (char)"CGColorConversionInfoConvertData");
    return 0;
  }
  if (!a1) {
    goto LABEL_21;
  }
  CFTypeID v21 = CFGetTypeID(a1);
  if (CGColorConversionInfoGetTypeID_predicate != -1) {
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
  }
  if (v21 != kCGColorConverterRuntimeID)
  {
LABEL_21:
    CGPostError((uint64_t)"%s: info %p is invalid", v14, v15, v16, v17, v18, v19, v20, (char)"CGColorConversionInfoConvertData");
    return 0;
  }
  if (!a4 || !a6)
  {
    if (!a6) {
      CGPostError((uint64_t)"%s: Source data pointer cannot be NULL", v14, v15, v16, v17, v18, v19, v20, (char)"CGColorConversionInfoConvertData");
    }
    if (!a4) {
      CGPostError((uint64_t)"%s: Destination data pointer cannot be NULL", v14, v15, v16, v17, v18, v19, v20, (char)"CGColorConversionInfoConvertData");
    }
    return 0;
  }
  ColorSyncTransforuint64_t m = CGColorConversionInfoGetColorSyncTransform(a1);
  if (CGColorConversionInfoConvertData_cglibrarypredicate_18 != -1) {
    dispatch_once(&CGColorConversionInfoConvertData_cglibrarypredicate_18, &__block_literal_global_21_19744);
  }
  unint64_t v23 = CGColorConversionInfoConvertData_f_17(ColorSyncTransform);
  if (CGColorConversionInfoConvertData_cglibrarypredicate_24 != -1) {
    dispatch_once(&CGColorConversionInfoConvertData_cglibrarypredicate_24, &__block_literal_global_27_19745);
  }
  unint64_t v24 = CGColorConversionInfoConvertData_f_23(ColorSyncTransform);
  long long v25 = a5[1];
  long long v100 = *a5;
  long long v101 = v25;
  unint64_t v98 = v24;
  BOOL v31 = verify_format((uint64_t)&v100, v24, a2, v26, v27, v28, v29, v30);
  long long v32 = a7[1];
  long long v100 = *a7;
  long long v101 = v32;
  BOOL v38 = verify_format((uint64_t)&v100, v23, a2, v33, v34, v35, v36, v37);
  BOOL v46 = v38;
  if (!v31 || !v38)
  {
    if (!v31) {
      CGPostError((uint64_t)"%s: Destination format is invalid", v39, v40, v41, v42, v43, v44, v45, (char)"CGColorConversionInfoConvertData");
    }
    if (!v46) {
      CGPostError((uint64_t)"%s: Source format is invalid", v39, v40, v41, v42, v43, v44, v45, (char)"CGColorConversionInfoConvertData");
    }
    goto LABEL_75;
  }
  int v47 = 0;
  uint64_t v48 = *((void *)a5 + 1);
  int v49 = *((_DWORD *)a5 + 1);
  if (v48 > 15)
  {
    if (v48 == 16)
    {
      if ((v49 & 0x100) != 0) {
        int v47 = 5;
      }
      else {
        int v47 = 2;
      }
    }
    else if (v48 == 32)
    {
      if ((v49 & 0x100) != 0) {
        int v47 = 4;
      }
      else {
        int v47 = 3;
      }
    }
  }
  else if (v48 == 8)
  {
    int v47 = 1;
  }
  else if (v48 == 10)
  {
    int v47 = 6;
  }
  uint64_t v51 = *((void *)a7 + 1);
  int v52 = *((_DWORD *)a7 + 1);
  if (v51 > 15)
  {
    if (v51 == 16)
    {
      if ((v52 & 0x100) != 0) {
        int v53 = 5;
      }
      else {
        int v53 = 2;
      }
      goto LABEL_53;
    }
    if (v51 == 32)
    {
      if ((v52 & 0x100) != 0) {
        int v53 = 4;
      }
      else {
        int v53 = 3;
      }
      goto LABEL_53;
    }
    goto LABEL_72;
  }
  if (v51 == 8)
  {
    int v53 = 1;
    goto LABEL_53;
  }
  if (v51 != 10)
  {
LABEL_72:
    if (!v47) {
      CGPostError((uint64_t)"%s: Incorrect destination data component", v39, v40, v41, v42, v43, v44, v45, (char)"CGColorConversionInfoConvertData");
    }
    CGPostError((uint64_t)"%s: Incorrect source data component", v39, v40, v41, v42, v43, v44, v45, (char)"CGColorConversionInfoConvertData");
    goto LABEL_75;
  }
  int v53 = 6;
LABEL_53:
  if (v47)
  {
    uint64_t v54 = v49 & 0x1F;
    uint64_t v97 = v52 & 0x1F;
    BOOL v56 = v47 == 4 && (*((_DWORD *)a5 + 1) & 0x7000) == 0x2000;
    BOOL v58 = v53 != 4 || (*((_DWORD *)a7 + 1) & 0x7000) != 0x2000;
    BOOL v96 = v56;
    if (v56)
    {
      if (!v58)
      {
        double v94 = a4;
        double v95 = 0;
        uint64_t v59 = 0;
        vImagePixelCount v60 = *((void *)a7 + 3);
        uint64_t v99 = (const CGFloat *)*((void *)a5 + 3);
        goto LABEL_93;
      }
    }
    else
    {
      if (v54 >= 7)
      {
        CGPostError((uint64_t)"Bad CGImageAlphaInfo", v39, v40, v41, v42, v43, v44, v45, v91);
        uint64_t v54 = 0;
      }
      else
      {
        uint64_t v54 = dword_185294DE0[v54];
      }
      if (!v58)
      {
        uint64_t v63 = 0;
        vImagePixelCount v60 = *((void *)a7 + 3);
        uint64_t v64 = 4 * a2;
        goto LABEL_89;
      }
    }
    uint64_t v93 = v54;
    if (v97 >= 7)
    {
      CGPostError((uint64_t)"Bad CGImageAlphaInfo", v39, v40, v41, v42, v43, v44, v45, v91);
      uint64_t v62 = 0;
      LODWORD(v97) = 0;
    }
    else
    {
      LODWORD(v97) = dword_185294DE0[v97];
      uint64_t v62 = 1;
    }
    uint64_t v64 = 4 * a2;
    vImagePixelCount v60 = 4 * a2 * (v62 + v23);
    uint64_t v63 = malloc_type_calloc(1uLL, v60 * (void)a3, 0x397CAA23uLL);
    if (!v63)
    {
      double v81 = "%s: failed to allocate local source buffer";
LABEL_101:
      CGPostError((uint64_t)v81, v65, v66, v67, v68, v69, v70, v71, (char)"CGColorConversionInfoConvertData");
      uint64_t v59 = 0;
      goto LABEL_102;
    }
    long long v72 = a7[1];
    long long v100 = *a7;
    long long v101 = v72;
    BOOL v73 = convert_src_data_to_float(a1, a2, a3, a6, (uint64_t)&v100, v63, (const CGFloat *)v60);
    if (v96 || !v73)
    {
      uint64_t v59 = 0;
      if (v73)
      {
        uint64_t v99 = (const CGFloat *)*((void *)a5 + 3);
        double v94 = a4;
        double v95 = v63;
        a6 = (char *)v63;
        uint64_t v54 = v93;
        goto LABEL_93;
      }
LABEL_102:
      int v90 = "%s: failed to convert source data to float";
      goto LABEL_103;
    }
    a6 = (char *)v63;
    uint64_t v54 = v93;
LABEL_89:
    uint64_t v82 = v54;
    unint64_t v83 = v98;
    if (v54) {
      unint64_t v83 = v98 + 1;
    }
    uint64_t v99 = (const CGFloat *)(v64 * v83);
    uint64_t v84 = malloc_type_calloc(1uLL, v64 * v83 * (void)a3, 0x3561E10EuLL);
    if (v84)
    {
      uint64_t v59 = v84;
      double v94 = (char *)v84;
      double v95 = v63;
      uint64_t v54 = v82;
LABEL_93:
      vImagePixelCount v85 = v60;
      uint64_t v86 = v54;
      if (CGColorConversionInfoConvertData_cglibrarypredicate_32 != -1) {
        dispatch_once(&CGColorConversionInfoConvertData_cglibrarypredicate_32, &__block_literal_global_35_19747);
      }
      __int16 v87 = (unsigned int (*)(uint64_t, vImagePixelCount, CGColorSpace *, char *, uint64_t, uint64_t, const CGFloat *, char *, uint64_t, vImagePixelCount, void))CGColorConversionInfoConvertData_f_31;
      uint64_t v88 = CGColorConversionInfoGetColorSyncTransform(a1);
      LODWORD(v92) = 7;
      HIDWORD(v92) = v97;
      if (v87(v88, a2, a3, v94, 7, v86, v99, a6, v92, v85, 0))
      {
        uint64_t v63 = v95;
        if (v96
          || (long long v89 = a5[1],
              long long v100 = *a5,
              long long v101 = v89,
              convert_float_data_to_dst(a1, a2, a3, a4, (uint64_t)&v100, v86, v59, v99)))
        {
          int v61 = 1;
LABEL_104:
          if (v63) {
            free(v63);
          }
          if (v59) {
            free(v59);
          }
          return v61 != 0;
        }
        int v90 = "%s: failed to convert local data to destination";
      }
      else
      {
        int v90 = "%s: ColorSyncTransformConvert failed";
        uint64_t v63 = v95;
      }
LABEL_103:
      CGPostError((uint64_t)v90, v74, v75, v76, v77, v78, v79, v80, (char)"CGColorConversionInfoConvertData");
      int v61 = 0;
      goto LABEL_104;
    }
    double v81 = "%s: failed to allocate local destination buffer";
    goto LABEL_101;
  }
  CGPostError((uint64_t)"%s: Incorrect destination data component", v39, v40, v41, v42, v43, v44, v45, (char)"CGColorConversionInfoConvertData");
LABEL_75:
  int v61 = 0;
  return v61 != 0;
}

BOOL verify_format(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)a1)
  {
    CGPostError((uint64_t)"CGColorConversionInfoConvertData: unsupported version %d", a2, a3, a4, a5, a6, a7, a8, *(_DWORD *)a1);
    return 0;
  }
  BOOL result = 0;
  if (a2 <= 4 && ((1 << a2) & 0x1A) != 0)
  {
    int v10 = *(_DWORD *)(a1 + 4);
    int v11 = v10 & 0x1F;
    uint64_t v12 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 24) < (unint64_t)(v12 * a3) >> 3 || v11 == 7) {
      return 0;
    }
    BOOL result = 0;
    int v14 = v10 & 0x7000;
    int v15 = v10 & 0xF0000;
    uint64_t v16 = *(void *)(a1 + 8);
    if (v16 <= 15)
    {
      if (v16 != 8)
      {
        if (v16 == 10)
        {
          if (v12 == 32 && (v14 == 0x4000 || v14 == 0x2000) && v15 == 196608) {
            return (v11 - 5) < 2;
          }
          return 0;
        }
        return result;
      }
      BOOL result = v12 == 24 || v12 == 32;
      if (v12 != 32 && v12 != 24) {
        return result;
      }
      return ((v10 & 0x5000) == 0 || v14 == 0x4000) && v15 == 0;
    }
    if (v16 == 16)
    {
      BOOL result = v12 == 48 || v12 == 64;
      if (v12 != 64 && v12 != 48) {
        return result;
      }
      return (v10 & 0xF5000) == 4096;
    }
    if (v16 == 32)
    {
      if ((v10 & 0x100) == 0) {
        return 0;
      }
      BOOL result = v12 == 96 || (unint64_t)(v12 == 128);
      if (v12 == 128 || v12 == 96)
      {
        BOOL result = v14 == 0x4000 || (unint64_t)(v14 == 0x2000);
        if (v14 == 0x4000 || v14 == 0x2000) {
          return v15 == 0;
        }
      }
    }
  }
  return result;
}

BOOL convert_src_data_to_float(void *a1, vImagePixelCount a2, CGColorSpace *a3, char *a4, uint64_t a5, void *a6, const CGFloat *a7)
{
  ColorSyncTransforuint64_t m = CGColorConversionInfoGetColorSyncTransform(a1);
  if (convert_src_data_to_float_cglibrarypredicate != -1) {
    dispatch_once(&convert_src_data_to_float_cglibrarypredicate, &__block_literal_global_62_19770);
  }
  uint64_t v14 = convert_src_data_to_float_f(ColorSyncTransform);
  if (v14 == 4)
  {
    CGColorSpaceRef v17 = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericCMYK");
  }
  else
  {
    int v15 = *(_DWORD *)(a5 + 4);
    if (v14 == 3)
    {
      if ((v15 & 0x100) != 0)
      {
        if (creator_for_ID_predicate != -1) {
          dispatch_once(&creator_for_ID_predicate, &__block_literal_global_307);
        }
        uint64_t v16 = (uint64_t (*)(void))qword_1EB289510;
        if (!qword_1EB289510) {
          return 0;
        }
      }
      else
      {
        if (creator_for_ID_predicate != -1) {
          dispatch_once(&creator_for_ID_predicate, &__block_literal_global_307);
        }
        uint64_t v16 = (uint64_t (*)(void))qword_1EB289508;
        if (!qword_1EB289508) {
          return 0;
        }
      }
    }
    else
    {
      if (v14 != 1) {
        return 0;
      }
      if ((v15 & 0x100) != 0)
      {
        if (creator_for_ID_predicate != -1) {
          dispatch_once(&creator_for_ID_predicate, &__block_literal_global_307);
        }
        uint64_t v16 = (uint64_t (*)(void))qword_1EB2894A0;
        if (!qword_1EB2894A0) {
          return 0;
        }
      }
      else
      {
        if (creator_for_ID_predicate != -1) {
          dispatch_once(&creator_for_ID_predicate, &__block_literal_global_307);
        }
        uint64_t v16 = (uint64_t (*)(void))off_1EB289498;
        if (!off_1EB289498) {
          return 0;
        }
      }
    }
    CGColorSpaceRef v17 = (CGColorSpaceRef)v16();
  }
  long long v25 = v17;
  if (!v17) {
    return 0;
  }
  char v26 = *(_DWORD *)(a5 + 4) & 0x1F;
  if ((*(_DWORD *)(a5 + 4) & 0x1Fu) > 6)
  {
    CGPostError((uint64_t)"Bad CGImageAlphaInfo", v18, v19, v20, v21, v22, v23, v24, (char)v51.data);
    BOOL v28 = 0;
    CGBitmapInfo v29 = 8448;
    uint32_t v27 = 96;
  }
  else
  {
    uint32_t v27 = 128;
    BOOL v28 = ((1 << v26) & 0x1E) == 0;
    if (((1 << v26) & 0x1E) != 0) {
      CGBitmapInfo v29 = 8451;
    }
    else {
      CGBitmapInfo v29 = 8453;
    }
  }
  if (*(void *)(a5 + 8) != 10)
  {
    uint64_t v38 = *(void *)(a5 + 16);
    srcFormat.bitsPerComponent = *(void *)(a5 + 8);
    srcFormat.unsigned int bitsPerPixel = v38;
    srcFormat.colorSpace = v25;
    srcFormat.bitmapCGPDFDictionaryRef Info = *(_DWORD *)(a5 + 4);
    memset(&srcFormat.version, 0, 20);
    destFormat.bitsPerComponent = 32;
    destFormat.unsigned int bitsPerPixel = v27;
    destFormat.colorSpace = v25;
    destFormat.bitmapCGPDFDictionaryRef Info = v29;
    memset(&destFormat.version, 0, 20);
    uint64_t v39 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0x100u, 0);
    if (v39)
    {
      uint64_t v40 = v39;
      srcs.time_t data = a4;
      srcs.double height = (vImagePixelCount)a3;
      size_t v41 = *(void *)(a5 + 24);
      srcs.double width = a2;
      srcs.rowuint64_t Bytes = v41;
      v51.time_t data = a6;
      v51.double height = (vImagePixelCount)a3;
      v51.double width = a2;
      v51.rowuint64_t Bytes = (size_t)a7;
      vImage_Error v42 = vImageConvert_AnyToAny(v39, &srcs, &v51, 0, 0x80u);
      if (v42 < 0 || (uint64_t v43 = malloc_type_malloc(v42, 0x1529E277uLL)) == 0)
      {
        BOOL v45 = 0;
      }
      else
      {
        uint64_t v44 = v43;
        BOOL v45 = vImageConvert_AnyToAny(v40, &srcs, &v51, v43, 0x10u) == 0;
        free(v44);
      }
      vImageConverter_Release(v40);
      return v45;
    }
    return 0;
  }
  if ((*(_DWORD *)(a5 + 4) & 0x7000) == 0x4000)
  {
    uint64_t v30 = (char *)malloc_type_malloc(*(void *)(a5 + 24) * ((void)a3 - 1) + ((*(void *)(a5 + 16) * a2) >> 3), 0x8ACDE7B7uLL);
    BOOL v31 = v30;
    if (a3)
    {
      long long v32 = 0;
      uint64_t v33 = *(void *)(a5 + 24);
      do
      {
        if (a2)
        {
          uint64_t v34 = (unsigned int *)&a4[v33 * (void)v32];
          uint64_t v35 = &v30[v33 * (void)v32];
          vImagePixelCount v36 = a2;
          do
          {
            unsigned int v37 = *v34++;
            *(_DWORD *)uint64_t v35 = bswap32(v37);
            v35 += 4;
            --v36;
          }
          while (v36);
        }
        long long v32 = (CGColorSpace *)((char *)v32 + 1);
      }
      while (v32 != a3);
    }
    a4 = v30;
  }
  else
  {
    BOOL v31 = 0;
  }
  *(void *)&srcFormat.bitsPerComponent = a4;
  srcFormat.colorSpace = a3;
  int v47 = *(const CGFloat **)(a5 + 24);
  *(void *)&srcFormat.bitmapCGPDFDictionaryRef Info = a2;
  srcFormat.decode = v47;
  *(void *)&destFormat.bitsPerComponent = a6;
  destFormat.colorSpace = a3;
  *(void *)&destFormat.bitmapCGPDFDictionaryRef Info = a2;
  destFormat.decode = a7;
  LODWORD(srcs.data) = 197121;
  vImage_Error v48 = vImageConvert_ARGB2101010ToARGBFFFF((const vImage_Buffer *)&srcFormat, (const vImage_Buffer *)&destFormat, 0, 1023, (const uint8_t *)&srcs, 0x10u);
  if (v31) {
    free(v31);
  }
  BOOL v49 = v48 == 0;
  BOOL v45 = v48 == 0;
  if (v49 && v28) {
    vImageOverwriteChannelsWithScalar_ARGBFFFF(1.0, (const vImage_Buffer *)&destFormat, (const vImage_Buffer *)&destFormat, 1u, 0x10u);
  }
  return v45;
}

BOOL convert_float_data_to_dst(void *a1, vImagePixelCount a2, CGColorSpace *a3, char *a4, uint64_t a5, int a6, void *a7, const CGFloat *a8)
{
  ColorSyncTransforuint64_t m = CGColorConversionInfoGetColorSyncTransform(a1);
  if (convert_float_data_to_dst_cglibrarypredicate != -1) {
    dispatch_once(&convert_float_data_to_dst_cglibrarypredicate, &__block_literal_global_65_19761);
  }
  uint64_t v16 = convert_float_data_to_dst_f(ColorSyncTransform);
  if (v16 == 4)
  {
    uint64_t v19 = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericCMYK");
    if (!v19) {
      return 0;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a5 + 4);
    if (v16 == 3)
    {
      if ((v17 & 0x100) != 0)
      {
        if (creator_for_ID_predicate != -1) {
          dispatch_once(&creator_for_ID_predicate, &__block_literal_global_307);
        }
        uint64_t v18 = (uint64_t (*)(void))qword_1EB289510;
        if (!qword_1EB289510) {
          return 0;
        }
      }
      else
      {
        if (creator_for_ID_predicate != -1) {
          dispatch_once(&creator_for_ID_predicate, &__block_literal_global_307);
        }
        uint64_t v18 = (uint64_t (*)(void))qword_1EB289508;
        if (!qword_1EB289508) {
          return 0;
        }
      }
    }
    else
    {
      if (v16 != 1) {
        return 0;
      }
      if ((v17 & 0x100) != 0)
      {
        if (creator_for_ID_predicate != -1) {
          dispatch_once(&creator_for_ID_predicate, &__block_literal_global_307);
        }
        uint64_t v18 = (uint64_t (*)(void))qword_1EB2894A0;
        if (!qword_1EB2894A0) {
          return 0;
        }
      }
      else
      {
        if (creator_for_ID_predicate != -1) {
          dispatch_once(&creator_for_ID_predicate, &__block_literal_global_307);
        }
        uint64_t v18 = (uint64_t (*)(void))off_1EB289498;
        if (!off_1EB289498) {
          return 0;
        }
      }
    }
    uint64_t v19 = (CGColorSpace *)v18();
    if (!v19) {
      return 0;
    }
  }
  if (*(void *)(a5 + 8) != 10)
  {
    uint64_t v26 = *(void *)(a5 + 16);
    dest.bitsPerComponent = *(void *)(a5 + 8);
    dest.unsigned int bitsPerPixel = v26;
    dest.colorSpace = v19;
    dest.bitmapCGPDFDictionaryRef Info = *(_DWORD *)(a5 + 4);
    memset(&dest.version, 0, 20);
    *(void *)&v37.renderingIntent = 0;
    if (a6) {
      uint32_t v27 = 128;
    }
    else {
      uint32_t v27 = 96;
    }
    v37.bitsPerComponent = 32;
    v37.unsigned int bitsPerPixel = v27;
    v37.colorSpace = v19;
    v37.bitmapCGPDFDictionaryRef Info = a6 | 0x2100;
    *(void *)&v37.version = 0;
    *(const CGFloat **)((char *)&v37.decode + 4) = 0;
    BOOL v28 = vImageConverter_CreateWithCGImageFormat(&v37, &dest, 0, 0x100u, 0);
    if (v28)
    {
      CGBitmapInfo v29 = v28;
      permuteMap.time_t data = a7;
      permuteMap.double height = (vImagePixelCount)a3;
      permuteMap.double width = a2;
      permuteMap.rowuint64_t Bytes = (size_t)a8;
      v35.time_t data = a4;
      v35.double height = (vImagePixelCount)a3;
      size_t v30 = *(void *)(a5 + 24);
      v35.double width = a2;
      v35.rowuint64_t Bytes = v30;
      vImage_Error v31 = vImageConvert_AnyToAny(v28, &permuteMap, &v35, 0, 0x80u);
      if (v31 < 0 || (long long v32 = malloc_type_malloc(v31, 0x3F9D2A9DuLL)) == 0)
      {
        BOOL v21 = 0;
      }
      else
      {
        uint64_t v33 = v32;
        BOOL v21 = vImageConvert_AnyToAny(v29, &permuteMap, &v35, v32, 0x10u) == 0;
        free(v33);
      }
      vImageConverter_Release(v29);
      return v21;
    }
    return 0;
  }
  *(void *)&dest.bitsPerComponent = a7;
  dest.colorSpace = a3;
  *(void *)&dest.bitmapCGPDFDictionaryRef Info = a2;
  dest.decode = a8;
  *(void *)&v37.bitsPerComponent = a4;
  v37.colorSpace = a3;
  uint64_t v20 = *(const CGFloat **)(a5 + 24);
  *(void *)&v37.bitmapCGPDFDictionaryRef Info = a2;
  v37.decode = v20;
  if (a6 == 5) {
    vImageOverwriteChannelsWithScalar_ARGBFFFF(1.0, (const vImage_Buffer *)&dest, (const vImage_Buffer *)&dest, 1u, 0x10u);
  }
  LODWORD(permuteMap.data) = 33619971;
  BOOL v21 = vImageConvert_ARGBFFFFToARGB2101010((const vImage_Buffer *)&dest, (const vImage_Buffer *)&v37, 0, 1023, (const uint8_t *)&permuteMap, 0x10u) == 0;
  if ((*(_DWORD *)(a5 + 4) & 0x7000) == 0x4000 && a3)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *(void *)(a5 + 24);
    do
    {
      if (a2)
      {
        uint64_t v24 = (unsigned int *)&a4[v23 * (void)v22];
        vImagePixelCount v25 = a2;
        do
        {
          *uint64_t v24 = bswap32(*v24);
          ++v24;
          --v25;
        }
        while (v25);
      }
      uint64_t v22 = (CGColorSpace *)((char *)v22 + 1);
    }
    while (v22 != a3);
  }
  return v21;
}

uint64_t (*__convert_float_data_to_dst_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  BOOL result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    BOOL result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformGetSrcComponentCount");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_19766;
  }
  convert_float_data_to_dst_f = (uint64_t (*)(void))v1;
  return result;
}

uint64_t colorsync_smart_null_19766()
{
  return 0;
}

uint64_t (*__convert_src_data_to_float_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  BOOL result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    BOOL result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformGetSrcComponentCount");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_19766;
  }
  convert_src_data_to_float_f = (uint64_t (*)(void))v1;
  return result;
}

void shadingRelease(int a1, void *a2)
{
}

_DWORD *shadingRetain(uint64_t a1, _DWORD *a2)
{
  BOOL result = a2;
  if (a2) {
    ++*a2;
  }
  return result;
}

void emitShadingDefinition(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      if ((*(_DWORD *)(v10 + 20) - 1) <= 3)
      {
        PDFDocumentBeginObject(*(void *)(a1 + 8), *(void *)(a1 + 24), a3, a4, a5, a6, a7, a8);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v123);
        uint64_t v23 = &CGRectInfinite;
        p_double height = &CGRectInfinite.size.height;
        p_CGFloat y = &CGRectInfinite.origin.y;
        if (*(unsigned char *)(v10 + 40)) {
          p_CGSize size = (CGSize *)(v10 + 64);
        }
        else {
          p_CGSize size = &CGRectInfinite.size;
        }
        if (*(unsigned char *)(v10 + 40))
        {
          p_CGFloat y = (CGFloat *)(v10 + 56);
          uint64_t v23 = (const CGRect *)(v10 + 48);
          p_double height = (CGFloat *)(v10 + 72);
        }
        double v27 = *p_height;
        double v28 = *p_y;
        double width = p_size->width;
        v127[0] = v23->origin.x;
        v127[1] = v28;
        v127[2] = width;
        v127[3] = v27;
        if (v127[0] != -8.98846567e307 || v28 != -8.98846567e307 || width != 1.79769313e308 || v27 != 1.79769313e308) {
          PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/BBox %r", v17, v18, v19, v20, v21, v22, (uint64_t)v127);
        }
        uint64_t v33 = PDFDocumentResolveColorSpace(*(void *)(a1 + 8), *(CGColorSpace **)(v10 + 24));
        uint64_t v34 = PDFDocumentAddColorSpace(*(void *)(a1 + 8), v33);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ColorSpace", v35, v36, v37, v38, v39, v40, v124);
        PDFColorSpaceEmitReference(v34, v41, v42, v43, v44, v45, v46, v47);
        if (v33) {
          uint64_t v54 = *(void *)(*((void *)v33 + 3) + 48);
        }
        else {
          uint64_t v54 = 0;
        }
        uint64_t v55 = *(uint64_t **)(v10 + 32);
        if (v55)
        {
          PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Background [", v48, v49, v50, v51, v52, v53, v125);
          if (v54)
          {
            uint64_t v62 = v54;
            do
            {
              uint64_t v63 = *v55++;
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"%f", v56, v57, v58, v59, v60, v61, v63);
              --v62;
            }
            while (v62);
          }
          PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"]", v56, v57, v58, v59, v60, v61, v126);
        }
        int v64 = *(_DWORD *)(v10 + 20);
        switch(v64)
        {
          case 1:
            uint64_t v73 = *(void *)(a1 + 16);
            if (v73 && (*(_DWORD *)(v73 + 20) - 1) <= 3)
            {
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ShadingType 2", v48, v49, v50, v51, v52, v53, v125);
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Coords [ %f %f %f %f ]", v74, v75, v76, v77, v78, v79, *(void *)(v73 + 120));
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Domain [ %f %f ]", v80, v81, v82, v83, v84, v85, *(void *)(v73 + 168));
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Extend [ %b %b ]", v86, v87, v88, v89, v90, v91, *(unsigned __int8 *)(v73 + 136));
            }
            long long v72 = (uint64_t *)(v10 + 184);
            break;
          case 2:
            uint64_t v92 = *(void *)(a1 + 16);
            if (v92 && (*(_DWORD *)(v92 + 20) - 1) <= 3)
            {
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ShadingType 3", v48, v49, v50, v51, v52, v53, v125);
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Coords [ %f %f %f %f %f %f ]", v93, v94, v95, v96, v97, v98, *(void *)(v92 + 120));
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Domain [ %f %f ]", v99, v100, v101, v102, v103, v104, *(void *)(v92 + 184));
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Extend [ %b %b ]", v105, v106, v107, v108, v109, v110, *(unsigned __int8 *)(v92 + 144));
            }
            long long v72 = (uint64_t *)(v10 + 200);
            break;
          case 4:
            uint64_t v65 = *(void *)(a1 + 16);
            if (v65 && (*(_DWORD *)(v65 + 20) - 1) <= 3)
            {
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ShadingType 1", v48, v49, v50, v51, v52, v53, v125);
              PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Domain [ %f %f %f %f ]", v66, v67, v68, v69, v70, v71, *(void *)(v65 + 120));
            }
            long long v72 = (uint64_t *)(v10 + 152);
            break;
          default:
LABEL_49:
            PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v48, v49, v50, v51, v52, v53, v125);
            PDFDocumentEndObject(*(void *)(a1 + 8), v116, v117, v118, v119, v120, v121, v122);
            *(void *)(a1 + 16) = 0;
            CFRelease((CFTypeRef)v10);
            *(unsigned char *)(a1 + 4++*(_DWORD *)(result + 8) = 1;
            goto LABEL_2;
        }
        uint64_t v111 = *v72;
        if (*v72)
        {
          uint64_t v112 = *(void *)(a1 + 8);
          unint64_t v113 = v54 - 1;
          uint64_t v114 = *(uint64_t **)(v112 + 368);
          if (!v114)
          {
            uint64_t v114 = PDFFunctionSetCreate(*(void *)(a1 + 8));
            *(void *)(v112 + 36++*(_DWORD *)(result + 8) = v114;
          }
          uint64_t v115 = PDFFunctionSetAddFunctionWithRange(v114, v111, v113, 1);
          if (v115) {
            PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"/Function %R", v115[6], v49, v50, v51, v52, v53);
          }
        }
        goto LABEL_49;
      }
    }
  }
LABEL_2:
  *a2 = 1;
}

unsigned char *emit_empty_image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 16);
  PDFDocumentBeginObject(*(void *)v9, *(void *)(v9 + 8), a3, a4, a5, a6, a7, a8);
  PDFDocumentPrintf(*(void *)v9, (uint64_t)"<<", v10, v11, v12, v13, v14, v15, v61);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Type /XObject", v16, v17, v18, v19, v20, v21, v62);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Subtype /Image", v22, v23, v24, v25, v26, v27, v63);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Width 1", v28, v29, v30, v31, v32, v33, v64);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Height 1", v34, v35, v36, v37, v38, v39, v65);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/BitsPerComponent 1", v40, v41, v42, v43, v44, v45, v66);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ColorSpace /DeviceGray", v46, v47, v48, v49, v50, v51, v67);
  if (*(void *)(a1 + 104) != -1) {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/StructParent %d", v52, v53, v54, v55, v56, v57, *(void *)(a1 + 104));
  }
  uint64_t v58 = *(void *)(a1 + 56);
  if (v58) {
    PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"/AAPL:EPSData %R", v58, v53, v54, v55, v56, v57);
  }
  if (*(void *)(a1 + 96)) {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/AAPL:ImageTag %T", v58, v53, v54, v55, v56, v57, *(void *)(a1 + 96));
  }
  PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
  CGDataConsumerPutBytes(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)&unk_185294DFC, 1);
  PDFStreamEndData(*(void **)(a1 + 16));
  uint64_t v59 = *(CFDataRef **)(a1 + 16);

  return PDFStreamEnd(v59);
}

void emit_interpolation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v10 + 91))
  {
    int v11 = *(_DWORD *)(a1 + 44);
    if ((v11 - 2) >= 2)
    {
      if (v11 == 1 || !CGImageGetShouldInterpolate(*(CGImageRef *)(a1 + 48))) {
        return;
      }
      uint64_t v10 = *(void *)(a1 + 8);
    }
    PDFDocumentPrintf(v10, (uint64_t)"/Interpolate true", a3, a4, a5, a6, a7, a8, a9);
  }
}

void emit_decode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    uint64_t v9 = a3;
    uint64_t v10 = a2;
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Decode [", a3, a4, a5, a6, a7, a8, v20);
    for (; v9; --v9)
    {
      uint64_t v18 = *v10++;
      PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"%f", v12, v13, v14, v15, v16, v17, v18);
    }
    uint64_t v19 = *(void *)(a1 + 8);
    PDFDocumentPrintf(v19, (uint64_t)"]", v12, v13, v14, v15, v16, v17, a9);
  }
}

uint64_t emit_jpeg_data(uint64_t a1)
{
  PDFStreamSetFilter(*(void *)(a1 + 16), "DCTDecode");
  PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
  CFDataRef v2 = *(const __CFData **)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    BytePtr = CFDataGetBytePtr(v2);
    CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 80));
    CGDataConsumerPutBytes(*(void *)(v3 + 24), (uint64_t)BytePtr, Length);
  }
  uint64_t v6 = *(void **)(a1 + 16);

  return PDFStreamEndData(v6);
}

uint64_t emit_jpeg2000_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && (*(unsigned char *)(a2 + 39) & 4) != 0 && !*(void *)(a2 + 176))
  {
    uint64_t v9 = *(void *)(a1 + 8);
    int v10 = *(_DWORD *)(v9 + 4);
    if (v10 <= 0)
    {
      *(_DWORD *)(v9 + 4) = 1;
      int v11 = (_DWORD *)(v9 + 8);
    }
    else
    {
      if (v10 != 1) {
        goto LABEL_10;
      }
      int v11 = (_DWORD *)(v9 + 8);
      if (*(int *)(v9 + 8) > 4) {
        goto LABEL_10;
      }
    }
    *int v11 = 5;
    uint64_t v9 = *(void *)(a1 + 8);
LABEL_10:
    PDFDocumentPrintf(v9, (uint64_t)"/SMaskInData 1", a3, a4, a5, a6, a7, a8, v18);
  }
  PDFStreamSetFilter(*(void *)(a1 + 16), "JPXDecode");
  PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
  CFDataRef v12 = *(const __CFData **)(a1 + 80);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    BytePtr = CFDataGetBytePtr(v12);
    CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 80));
    CGDataConsumerPutBytes(*(void *)(v13 + 24), (uint64_t)BytePtr, Length);
  }
  uint64_t v16 = *(void **)(a1 + 16);

  return PDFStreamEndData(v16);
}

unsigned char *emit_image(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 16);
  PDFDocumentBeginObject(*(void *)v10, *(void *)(v10 + 8), a3, a4, a5, a6, a7, a8);
  PDFDocumentPrintf(*(void *)v10, (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v149);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Type /XObject", v17, v18, v19, v20, v21, v22, v150);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Subtype /Image", v23, v24, v25, v26, v27, v28, v151);
  uint64_t v35 = *(void *)(a1 + 8);
  if (a2)
  {
    PDFDocumentPrintf(v35, (uint64_t)"/Width %z", v29, v30, v31, v32, v33, v34, a2[5]);
    uint64_t v42 = a2[6];
  }
  else
  {
    PDFDocumentPrintf(v35, (uint64_t)"/Width %z", v29, v30, v31, v32, v33, v34, 0);
    uint64_t v42 = 0;
  }
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Height %z", v36, v37, v38, v39, v40, v41, v42);
  emit_interpolation(a1, v43, v44, v45, v46, v47, v48, v49, v152);
  if (*(void *)(a1 + 104) != -1) {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/StructParent %d", v50, v51, v52, v53, v54, v55, *(void *)(a1 + 104));
  }
  if (!*(unsigned char *)(a1 + 73) && !*(unsigned char *)(a1 + 74) || (CGColorSpaceRef ColorSpace = *(CGColorSpaceRef *)(a1 + 88)) == 0) {
    CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)a2);
  }
  uint64_t v57 = *(void *)(a1 + 8);
  uint64_t v58 = PDFDocumentResolveColorSpace(v57, ColorSpace);
  uint64_t v59 = PDFDocumentAddColorSpace(v57, v58);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/ColorSpace", v60, v61, v62, v63, v64, v65, v153);
  PDFColorSpaceEmitReference(v59, v66, v67, v68, v69, v70, v71, v72);
  if (CGImageGetDecode((CGImageRef)a2))
  {
    if (ColorSpace) {
      uint64_t v73 = *(void *)(*((void *)ColorSpace + 3) + 48);
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v74 = 2 * v73;
    Decode = (uint64_t *)CGImageGetDecode((CGImageRef)a2);
    emit_decode(a1, Decode, v74, v76, v77, v78, v79, v80, v154);
  }
  unsigned __int32 v87 = CGImageGetRenderingIntent((CGImageRef)a2) - 1;
  if (v87 <= 3) {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)off_1E52CDB68[v87], v81, v82, v83, v84, v85, v86, v154);
  }
  uint64_t v88 = *(void *)(a1 + 56);
  if (v88) {
    PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"/AAPL:EPSData %R", v88, v82, v83, v84, v85, v86);
  }
  Masuint64_t k = CGImageGetMask(a2);
  if (Mask)
  {
    uint64_t v90 = (uint64_t)Mask;
    if (!CGImageGetMatte(a2))
    {
      uint64_t v100 = PDFDocumentAddSMask(*(void *)(a1 + 8), v90, 0, *(_DWORD *)(a1 + 44));
      goto LABEL_32;
    }
    CGColorSpaceRef v91 = CGImageGetColorSpace((CGImageRef)a2);
    if (ColorSpace)
    {
      uint64_t v92 = *(void *)(*((void *)ColorSpace + 3) + 48);
      if (v91)
      {
LABEL_23:
        uint64_t v93 = *(void *)(*((void *)v91 + 3) + 48);
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v92 = 0;
      if (v91) {
        goto LABEL_23;
      }
    }
    uint64_t v93 = 0;
LABEL_27:
    if (v92 == v93)
    {
      uint64_t v165 = 0;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      *(_OWORD *)components = 0u;
      long long v158 = 0u;
      CGImageGetMatte(a2);
      __memcpy_chk();
      components[v92] = 1.0;
      CGColorRef v101 = CGColorCreate(ColorSpace, components);
    }
    else
    {
      CGColorRef v101 = 0;
    }
    uint64_t v100 = PDFDocumentAddSMask(*(void *)(a1 + 8), v90, v101, *(_DWORD *)(a1 + 44));
    if (v101) {
      CFRelease(v101);
    }
LABEL_32:
    if (!v100) {
      goto LABEL_43;
    }
    uint64_t v102 = *(void *)(a1 + 8);
    int v103 = *(_DWORD *)(v102 + 4);
    if (v103 <= 0)
    {
      *(_DWORD *)(v102 + 4) = 1;
      uint64_t v104 = (_DWORD *)(v102 + 8);
    }
    else if (v103 != 1 || (uint64_t v104 = (_DWORD *)(v102 + 8), *(int *)(v102 + 8) > 3))
    {
LABEL_39:
      PDFDocumentPrintf(v102, (uint64_t)"/SMask", v94, v95, v96, v97, v98, v99, v154);
      uint64_t v110 = v100[2];
      if (v110) {
        uint64_t v111 = *(void *)(v110 + 8);
      }
      else {
        uint64_t v111 = 0;
      }
      PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"%R", v111, v105, v106, v107, v108, v109);
      goto LABEL_43;
    }
    *uint64_t v104 = 4;
    uint64_t v102 = *(void *)(a1 + 8);
    goto LABEL_39;
  }
LABEL_43:
  if (!CGImageGetMaskingColors(a2)) {
    goto LABEL_64;
  }
  if (!a2)
  {
    unint64_t v118 = 0;
LABEL_51:
    unint64_t v119 = 8;
    goto LABEL_52;
  }
  unint64_t v118 = a2[7];
  if (v118 - 1 >= 8)
  {
    if (v118 > 0x20)
    {
      if (*(unsigned char *)(a1 + 73))
      {
        uint64_t v120 = *(void *)(a1 + 8);
        goto LABEL_66;
      }
      if (*(unsigned char *)(a1 + 74))
      {
        uint64_t v140 = *(void *)(a1 + 8);
        goto LABEL_69;
      }
LABEL_76:
      PDFImageEmitData(a1, (CGImage *)a2);
      return PDFStreamEnd(*(CFDataRef **)(a1 + 16));
    }
    goto LABEL_51;
  }
  unint64_t v119 = qword_185294E00[v118 - 1];
LABEL_52:
  MaskingColors = (double *)CGImageGetMaskingColors(a2);
  int8x16_t v156 = a2;
  CGColorSpaceRef v122 = CGImageGetColorSpace((CGImageRef)a2);
  if (v122)
  {
    uint64_t v129 = 2 * *(void *)(*((void *)v122 + 3) + 48);
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Mask [", v123, v124, v125, v126, v127, v128, v154);
    if (v129)
    {
      if (v118 <= v119) {
        char v136 = 0;
      }
      else {
        char v136 = v118 - v119;
      }
      do
      {
        int v137 = (int)*MaskingColors;
        if (v118 >= v119) {
          unint64_t v138 = (v137 >> v136);
        }
        else {
          unint64_t v138 = (((unint64_t)~(-1 << v118) >> 1) + ~(-1 << v119) * (uint64_t)v137)
        }
               / ~(-1 << v118);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"%d", v130, v131, v132, v133, v134, v135, v138);
        ++MaskingColors;
        --v129;
      }
      while (v129);
    }
  }
  else
  {
    PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Mask [", v123, v124, v125, v126, v127, v128, v154);
  }
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"]", v130, v131, v132, v133, v134, v135, v155);
  a2 = v156;
LABEL_64:
  if (!*(unsigned char *)(a1 + 73))
  {
    if (*(unsigned char *)(a1 + 74))
    {
      uint64_t v140 = *(void *)(a1 + 8);
      if (!a2)
      {
        uint64_t v141 = 0;
        goto LABEL_73;
      }
LABEL_69:
      uint64_t v141 = a2[7];
LABEL_73:
      PDFDocumentPrintf(v140, (uint64_t)"/BitsPerComponent %z", v112, v113, v114, v115, v116, v117, v141);
      emit_jpeg2000_data(a1, (uint64_t)a2, v142, v143, v144, v145, v146, v147);
      return PDFStreamEnd(*(CFDataRef **)(a1 + 16));
    }
    goto LABEL_76;
  }
  uint64_t v120 = *(void *)(a1 + 8);
  if (!a2)
  {
    uint64_t v139 = 0;
    goto LABEL_71;
  }
LABEL_66:
  uint64_t v139 = a2[7];
LABEL_71:
  PDFDocumentPrintf(v120, (uint64_t)"/BitsPerComponent %z", v112, v113, v114, v115, v116, v117, v139);
  emit_jpeg_data(a1);
  return PDFStreamEnd(*(CFDataRef **)(a1 + 16));
}

uint64_t Coons(uint64_t result, float64x2_t *a2, double *a3, double a4, double a5)
{
  *a2 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(result + 352), *(float64x2_t *)(result + 368), a4), *(float64x2_t *)(result + 384), a5), *(float64x2_t *)(result + 400), a4 * a5), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(result + 416), *(float64x2_t *)(result + 448), a5), *(float64x2_t *)(result + 480), a4), *(float64x2_t *)(result + 512), a4 * a5), a4 * a4), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(result + 432), *(float64x2_t *)(result + 464), a4),
              *(float64x2_t *)(result + 496),
              a5),
            *(float64x2_t *)(result + 528),
            a4 * a5),
          a5 * a5);
  uint64_t v5 = *(void *)(result + 704);
  if (v5)
  {
    uint64_t v6 = (double *)(result + 544);
    do
    {
      *a3++ = *v6 + v6[5] * a4 + v6[10] * a5 + v6[15] * (a4 * a5);
      ++v6;
      --v5;
    }
    while (v5);
  }
  return result;
}

double CGGStateGetCharacterSpacing(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 136) + 24);
}

double CGGStateGetTextGreekingThreshold(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 136) + 32);
}

uint64_t CGGStateGetTextKnockout(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 1) & 1;
}

uint64_t CGGStateGetFontAntialiasingStyle(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 136) + 48);
}

uint64_t CGGStateGetFontSmoothingStyle(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 136) + 52);
}

uint64_t CGGStateGetFontSubpixelQuantizationStyle(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 136) + 56);
}

uint64_t CGGStateGetShouldAntialiasFonts(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 2) & 1;
}

uint64_t CGGStateGetShouldSmoothFonts(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 3) & 1;
}

uint64_t CGGStateGetShouldSubpixelPositionFonts(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 4) & 1;
}

uint64_t CGGStateGetShouldSubpixelQuantizeFonts(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 5) & 1;
}

double CGGStateGetFontSmoothingContrast(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 136) + 40);
}

void CGGStateSetFontSmoothingBackgroundColor(uint64_t a1, const void *a2)
{
  if (*(const void **)(*(void *)(a1 + 136) + 64) != a2)
  {
    maybe_copy_text_state(a1);
    uint64_t v4 = *(const void **)(*(void *)(a1 + 136) + 64);
    if (v4) {
      CFRelease(v4);
    }
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(*(void *)(a1 + 136) + 64) = a2;
  }
}

uint64_t CGGStateGetFontSubpixelQuantizationLevel(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 136) + 88);
}

uint64_t CGPDFReferenceTypeID()
{
  if (CGPDFReferenceTypeID_onceToken != -1) {
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
  }
  return CGPDFReferenceTypeID_id;
}

uint64_t __CGPDFReferenceTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFReferenceTypeID_class);
  CGPDFReferenceTypeID_id = result;
  return result;
}

CFStringRef CGPDFReferenceDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<CGPDFReferenceRef (%d, %d)>", *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
}

unint64_t CGPDFReferenceHash(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 24) ^ (unint64_t)(16 * *(_DWORD *)(a1 + 16));
}

BOOL CGPDFReferenceEqual(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  if (CGPDFReferenceTypeID_onceToken != -1) {
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
  }
  if (v4 != CGPDFReferenceTypeID_id) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID((CFTypeRef)a2);
  if (CGPDFReferenceTypeID_onceToken != -1) {
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
  }
  return v5 == CGPDFReferenceTypeID_id
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(unsigned __int16 *)(a1 + 24) == *(unsigned __int16 *)(a2 + 24);
}

uint64_t CGPDFReferenceCreate(uint64_t a1, uint64_t a2)
{
  if (CGPDFReferenceTypeID_onceToken != -1) {
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
  }
  uint64_t result = pdf_create_cftype();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t CGPDFReferenceGetRef(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t CGPDFNameTypeID()
{
  if (CGPDFNameTypeID_onceToken != -1) {
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
  }
  return CGPDFNameTypeID_id;
}

uint64_t __CGPDFNameTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFNameTypeID_class);
  CGPDFNameTypeID_id = result;
  return result;
}

CFStringRef CGPDFNameDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<CGPDFNameRef (%s)>", *(void *)(a1 + 16));
}

uint64_t CGPDFNameHash(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 16);
  char v2 = *v1;
  if (!*v1) {
    return 5381;
  }
  uint64_t v3 = v1 + 1;
  uint64_t result = 5381;
  do
  {
    uint64_t result = 33 * result + v2;
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

BOOL CGPDFNameEqual(const char **a1, const char **a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (CGPDFNameTypeID_onceToken != -1) {
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
  }
  if (v4 != CGPDFNameTypeID_id) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(a2);
  if (CGPDFNameTypeID_onceToken != -1) {
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
  }
  return v5 == CGPDFNameTypeID_id && strcmp(a1[2], a2[2]) == 0;
}

void CGPDFNameFinalize(uint64_t a1)
{
}

uint64_t CGPDFNameCreate(const char *a1)
{
  if (CGPDFNameTypeID_onceToken != -1) {
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
  }
  uint64_t cftype = pdf_create_cftype();
  if (*a1 == 47)
  {
    *(void *)(cftype + 16) = strdup(a1);
  }
  else
  {
    size_t v3 = strlen(a1);
    CFTypeID v4 = (char *)malloc_type_malloc(v3 + 2, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    *(void *)(cftype + 16) = v4;
    sprintf(v4, "/%s", a1);
  }
  return cftype;
}

unsigned __int8 *CGPDFNameGetString(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 16);
  int v3 = *v1;
  char v2 = v1 + 1;
  if (v3 == 47) {
    return v2;
  }
  else {
    return *(unsigned __int8 **)(a1 + 16);
  }
}

uint64_t CGPDFStreamObjectTypeID()
{
  if (CGPDFStreamObjectTypeID_onceToken != -1) {
    dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_11_20007);
  }
  return CGPDFStreamObjectTypeID_id;
}

uint64_t __CGPDFStreamObjectTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFStreamObjectTypeID_class);
  CGPDFStreamObjectTypeID_id = result;
  return result;
}

CFStringRef CGPDFStreamObjectDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
  CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 24));
  if (*(unsigned char *)(a1 + 32)) {
    CFTypeID v5 = "will";
  }
  else {
    CFTypeID v5 = "will not";
  }
  return CFStringCreateWithFormat(v2, 0, @"<CGPDFStreamObjectRef: %d key-value pairs, %d data bytes, %s flate compress>", Count, Length, v5);
}

void CGPDFStreamObjectFinalize(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFAllocatorRef v2 = *(const void **)(a1 + 24);

  CFRelease(v2);
}

uint64_t CGPDFStreamObjectCreate(const void *a1, const void *a2)
{
  if (CGPDFStreamObjectTypeID_onceToken != -1) {
    dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_11_20007);
  }
  uint64_t cftype = pdf_create_cftype();
  *(void *)(cftype + 16) = a1;
  CFRetain(a1);
  *(void *)(cftype + 24) = a2;
  CFRetain(a2);
  *(unsigned char *)(cftype + 32) = 0;
  return cftype;
}

uint64_t CGPDFStreamObjectGetDictionary(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t CGPDFStreamObjectGetData(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t CGPDFStreamObjectSetFlateEncoding(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

uint64_t CGPDFStreamObjectGetFlateEncoding(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t CGPDFHexDataTypeID()
{
  if (CGPDFHexDataTypeID_onceToken != -1) {
    dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_15_20028);
  }
  return CGPDFHexDataTypeID_id;
}

uint64_t __CGPDFHexDataTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFHexDataTypeID_class);
  CGPDFHexDataTypeID_id = result;
  return result;
}

CFStringRef CGPDFHexDataDebugDesc(uint64_t a1)
{
  CFStringRef v2 = CFCopyDescription(*(CFTypeRef *)(a1 + 16));
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<CGPDFHexDataRef %p: data: %@>", a1, v2);
  CFRelease(v2);
  return v3;
}

CFHashCode CGPDFHexDataHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

uint64_t CGPDFHexDataEqual(void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (CGPDFHexDataTypeID_onceToken != -1) {
    dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_15_20028);
  }
  if (v4 != CGPDFHexDataTypeID_id) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(a2);
  if (CGPDFHexDataTypeID_onceToken != -1) {
    dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_15_20028);
  }
  if (v5 != CGPDFHexDataTypeID_id) {
    return 0;
  }
  uint64_t v6 = (const void *)a1[2];
  uint64_t v7 = (const void *)a2[2];

  return CFEqual(v6, v7);
}

void CGPDFHexDataFinalize(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t CGPDFHexDataCreate(const UInt8 *a1, CFIndex a2)
{
  if (CGPDFHexDataTypeID_onceToken != -1) {
    dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_15_20028);
  }
  uint64_t cftype = pdf_create_cftype();
  *(void *)(cftype + 16) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, a2);
  return cftype;
}

uint64_t CGPDFHexDataGetData(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFMutableDictionaryRef CGPDFAppenderCreateCFDictionary(CGPDFDictionary *a1)
{
  if (a1) {
    CFIndex v2 = *((void *)a1 + 2);
  }
  else {
    CFIndex v2 = 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __CGPDFAppenderCreateCFDictionary_block_invoke;
  block[3] = &__block_descriptor_tmp_17_20039;
  block[4] = Mutable;
  CGPDFDictionaryApplyBlock(a1, block, 0);
  return Mutable;
}

uint64_t __CGPDFAppenderCreateCFDictionary_block_invoke(uint64_t a1, const char *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    CFNumberRef CFObject = CGPDFAppenderCreateCFObject(a3, 0);
    CGPDFAppenderDictionarySetValue(*(__CFDictionary **)(a1 + 32), a2, CFObject);
    CFRelease(CFObject);
  }
  return 1;
}

CFNumberRef CGPDFAppenderCreateCFObject(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if ((a2 & 1) == 0 && *(void *)(a1 + 16) | (unsigned __int16)*(void *)(a1 + 24))
  {
LABEL_8:
    uint64_t v7 = *(void *)(a1 + 16);
    return (CFNumberRef)CGPDFReferenceCreate(v7, v3);
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 8);
    if (v4 == 12) {
      int v5 = 3;
    }
    else {
      int v5 = *(_DWORD *)(a1 + 8);
    }
    switch(v5)
    {
      case 1:
        uint64_t v6 = MEMORY[0x1E4F1D260];
        return *(CFNumberRef *)v6;
      case 2:
        uint64_t v6 = MEMORY[0x1E4F1CFD0];
        if (!*(unsigned char *)(a1 + 32)) {
          uint64_t v6 = MEMORY[0x1E4F1CFC8];
        }
        return *(CFNumberRef *)v6;
      case 3:
        uint64_t v9 = (const void *)(a1 + 32);
        CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberType v11 = kCFNumberLongType;
        goto LABEL_17;
      case 4:
        uint64_t v9 = (const void *)(a1 + 32);
        CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberType v11 = kCFNumberCGFloatType;
LABEL_17:
        return CFNumberCreate(v10, v11, v9);
      case 5:
        if (v4 != 5) {
          goto LABEL_42;
        }
        uint64_t v12 = *(const char **)(a1 + 32);
        CFNumberRef result = (CFNumberRef)CGPDFNameCreate(v12);
        break;
      case 6:
        if (v4 != 6) {
          goto LABEL_42;
        }
        uint64_t v13 = *(void *)(a1 + 32);
        if (v13 && (*(unsigned char *)(v13 + 64) & 2) != 0)
        {
          if (*(void *)(v13 + 24))
          {
            decrypt_string(*(void *)(a1 + 32));
            uint64_t v18 = (const UInt8 *)(v13 + 80);
            if (*(void *)(v13 + 24)) {
              decrypt_string(v13);
            }
          }
          else
          {
            uint64_t v18 = (const UInt8 *)(v13 + 80);
          }
          CFIndex v19 = *(void *)(v13 + 72);
          CFNumberRef result = (CFNumberRef)CGPDFHexDataCreate(v18, v19);
        }
        else
        {
          uint64_t v14 = *(CGPDFString **)(a1 + 32);
          CFNumberRef result = (CFNumberRef)CGPDFStringCopyTextString(v14);
        }
        break;
      case 7:
        if (v4 != 7) {
          goto LABEL_42;
        }
        uint64_t v15 = *(CGPDFArray **)(a1 + 32);
        CFNumberRef result = CGPDFAppenderCreateCFArray(v15);
        break;
      case 8:
        if (v4 != 8) {
          goto LABEL_42;
        }
        uint64_t v16 = *(void *)(a1 + 32);
        CFNumberRef result = (CFNumberRef)CGPDFAppenderCreateCFDictionary(v16);
        break;
      case 9:
        if (v4 != 9) {
          goto LABEL_42;
        }
        uint64_t v17 = *(uint64_t **)(a1 + 32);
        CFNumberRef result = CGPDFAppenderCreateCGPDFStreamObject(v17);
        break;
      case 10:
        goto LABEL_8;
      default:
        pdf_error("Failed to support given object type %d for append mode", v5);
LABEL_42:
        CFNumberRef result = 0;
        break;
    }
  }
  return result;
}

void CGPDFAppenderDictionarySetValue(__CFDictionary *a1, const char *a2, const void *a3)
{
  if (a2)
  {
    int v5 = (const void *)CGPDFNameCreate(a2);
    if (a3) {
      CFDictionarySetValue(a1, v5, a3);
    }
    else {
      CFDictionaryRemoveValue(a1, v5);
    }
    CFRelease(v5);
  }
}

CFMutableArrayRef CGPDFAppenderCreateCFArray(CGPDFArray *a1)
{
  if (a1)
  {
    CFIndex v2 = *((void *)a1 + 2);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, MEMORY[0x1E4F1D510]);
    if (v2)
    {
      for (size_t i = 0; i != v2; ++i)
      {
        CGPDFObjectRef value = 0;
        if (CGPDFArrayGetObject(a1, i, &value))
        {
          CFNumberRef CFObject = (const void *)CGPDFAppenderCreateCFObject(value, 0);
          CFArrayAppendValue(Mutable, CFObject);
          CFRelease(CFObject);
        }
      }
    }
    return Mutable;
  }
  else
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    long long v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(v7, 0, v8);
  }
}

CFDataRef CGPDFAppenderCreateCGPDFStreamObject(uint64_t *a1)
{
  if (a1) {
    uint64_t v1 = a1[6];
  }
  else {
    uint64_t v1 = 0;
  }
  CFDataRef result = CGPDFStreamCopyRawData(a1);
  if (result)
  {
    CFDataRef v3 = result;
    MutableCopCGFloat y = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, result);
    CFRelease(v3);
    CFDictionarCGFloat y = (const void *)CGPDFAppenderCreateCFDictionary(v1);
    uint64_t v6 = CGPDFStreamObjectCreate(CFDictionary, MutableCopy);
    CFRelease(CFDictionary);
    CFRelease(MutableCopy);
    return (const __CFData *)v6;
  }
  return result;
}

uint64_t CGPDFAppenderCGPDFObjectMatchesCFType(uint64_t a1, const __CFString *a2)
{
  CFTypeID v4 = CFGetTypeID(a2);
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 12) {
      CGPDFObjectType v5 = kCGPDFObjectTypeInteger;
    }
    else {
      CGPDFObjectType v5 = *(_DWORD *)(a1 + 8);
    }
  }
  else
  {
    CGPDFObjectType v5 = kCGPDFObjectTypeNull;
  }
  if (v4 == CFNullGetTypeID()) {
    return v5 == kCGPDFObjectTypeNull;
  }
  if (v4 == CFBooleanGetTypeID())
  {
    BOOL v7 = 0;
    if (v5 != kCGPDFObjectTypeBoolean || !a1) {
      return v7;
    }
    if (*(_DWORD *)(a1 + 8) == 2 && (*(unsigned char *)(a1 + 32) != 1 || (const __CFString *)*MEMORY[0x1E4F1CFD0] == a2)) {
      return *(unsigned char *)(a1 + 32) || *MEMORY[0x1E4F1CFC8] == (void)a2;
    }
    return 0;
  }
  if (v4 == CFNumberGetTypeID())
  {
    if ((v5 - 5) >= 0xFFFFFFFE)
    {
      double v26 = 0.0;
      double value = 0.0;
      if (CGPDFObjectGetValue((CGPDFObjectRef)a1, v5, &value))
      {
        if (CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &v26)) {
          return vabdd_f64(value, v26) <= 0.00000011920929;
        }
      }
    }
    return 0;
  }
  if (CGPDFNameTypeID_onceToken != -1) {
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
  }
  if (v4 == CGPDFNameTypeID_id)
  {
    if (v5 == kCGPDFObjectTypeName)
    {
      time_t data = a2->data;
      int v10 = *data;
      uint64_t v9 = data + 1;
      CFNumberType v11 = v10 == 47 ? v9 : a2->data;
      if (a1)
      {
        if (*(_DWORD *)(a1 + 8) == 5)
        {
          uint64_t v12 = *(const char **)(a1 + 32);
          if (v12) {
            return strcmp(v11, v12) == 0;
          }
        }
      }
    }
    return 0;
  }
  if (v4 == CFStringGetTypeID())
  {
    BOOL v7 = 0;
    if (v5 != kCGPDFObjectTypeString || !a1) {
      return v7;
    }
    if (*(_DWORD *)(a1 + 8) == 6)
    {
      CFStringRef v13 = CGPDFStringCopyTextString(*(CGPDFStringRef *)(a1 + 32));
      if (v13)
      {
        CFStringRef v14 = v13;
        BOOL v7 = CFEqual(a2, v13);
        CFRelease(v14);
        return v7;
      }
    }
    return 0;
  }
  if (v4 == CFArrayGetTypeID())
  {
    if (a1 && *(_DWORD *)(a1 + 8) == 7)
    {
      uint64_t v15 = *(CGPDFArray **)(a1 + 32);
      if (v15) {
        size_t v16 = *((void *)v15 + 2);
      }
      else {
        size_t v16 = 0;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
      BOOL v7 = 0;
      if ((Count & 0x8000000000000000) == 0 && v16 == Count)
      {
        if (v16)
        {
          BOOL v7 = 0;
          for (i = 0; i != v16; BOOL v7 = i >= v16)
          {
            ValueAtIndeCGFloat x = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
            double value = 0.0;
            if (!ValueAtIndex) {
              break;
            }
            uint64_t v25 = ValueAtIndex;
            if (!CGPDFArrayGetObject(v15, i, (CGPDFObjectRef *)&value)) {
              break;
            }
            if ((CGPDFAppenderCGPDFObjectMatchesCFType(*(void *)&value, v25) & 1) == 0) {
              break;
            }
            ++i;
          }
        }
        else
        {
          return 1;
        }
      }
      return v7;
    }
    return 0;
  }
  if (v4 == CFDictionaryGetTypeID())
  {
    if (!a1 || *(_DWORD *)(a1 + 8) != 8) {
      return 0;
    }
    uint64_t v17 = *(void *)(a1 + 32);
    CFDictionaryRef v18 = (const __CFDictionary *)a2;
  }
  else
  {
    if (CGPDFStreamObjectTypeID_onceToken != -1) {
      dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_11_20007);
    }
    if (v4 != CGPDFStreamObjectTypeID_id)
    {
      if (CGPDFReferenceTypeID_onceToken != -1) {
        dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
      }
      BOOL v7 = 0;
      if (v4 != CGPDFReferenceTypeID_id || v5 != (kCGPDFObjectTypeDictionary|kCGPDFObjectTypeBoolean) || !a1) {
        return v7;
      }
      if (*(_DWORD *)(a1 + 8) == 10)
      {
        if (a2) {
          uint64_t v20 = a2->data;
        }
        else {
          uint64_t v20 = 0;
        }
        return *(void *)(a1 + 16) == (void)v20;
      }
      return 0;
    }
    BOOL v7 = 0;
    if (v5 != kCGPDFObjectTypeStream || !a1) {
      return v7;
    }
    if (*(_DWORD *)(a1 + 8) != 9) {
      return 0;
    }
    uint64_t v19 = *(void *)(a1 + 32);
    if (v19) {
      uint64_t v17 = *(void *)(v19 + 48);
    }
    else {
      uint64_t v17 = 0;
    }
    CFDictionaryRef v18 = (const __CFDictionary *)a2->data;
  }

  return AppendModeCGPDFDictionaryMatchesCFDictionary(v17, v18);
}

uint64_t AppendModeCGPDFDictionaryMatchesCFDictionary(uint64_t a1, CFDictionaryRef theDict)
{
  if (a1) {
    unint64_t v4 = *(void *)(a1 + 16);
  }
  else {
    unint64_t v4 = 0;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  uint64_t v6 = 0;
  if ((Count & 0x8000000000000000) == 0 && v4 == Count)
  {
    BOOL v7 = (const void **)malloc_type_malloc(8 * v4, 0xC0040B8AA526DuLL);
    long long v8 = (const void **)malloc_type_malloc(8 * v4, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues(theDict, v7, v8);
    if (v4)
    {
      uint64_t v9 = 0;
      while (1)
      {
        int v10 = v7[v9];
        CFNumberType v11 = v8[v9];
        CFTypeID v12 = CFGetTypeID(v10);
        if (CGPDFNameTypeID_onceToken != -1) {
          dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
        }
        if (v12 != CGPDFNameTypeID_id) {
          break;
        }
        CFStringRef v13 = (unsigned __int8 *)v10[2];
        int v15 = *v13;
        CFStringRef v14 = v13 + 1;
        size_t v16 = v15 == 47 ? v14 : (unsigned __int8 *)v10[2];
        UnresolvedObject = CGPDFDictionaryGetUnresolvedObject(a1, v16);
        if (!UnresolvedObject) {
          break;
        }
        uint64_t v18 = CGPDFAppenderCGPDFObjectMatchesCFType(UnresolvedObject, v11);
        uint64_t v6 = v18;
        if (++v9 >= v4 || (v18 & 1) == 0) {
          goto LABEL_20;
        }
      }
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = 1;
    }
LABEL_20:
    free(v7);
    free(v8);
  }
  return v6;
}

void CGPDFAppenderDictionarySetInt32(__CFDictionary *a1, const char *a2, int a3)
{
  int valuePtr = a3;
  if (a2)
  {
    unint64_t v4 = (const void *)CGPDFNameCreate(a2);
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(a1, v4, v5);
    CFRelease(v5);
    CFRelease(v4);
  }
}

void CGPDFAppenderDictionarySetCGPDFName(__CFDictionary *a1, const char *a2, const char *a3)
{
  if (a2 && a3)
  {
    CFNumberRef v5 = (const void *)CGPDFNameCreate(a2);
    uint64_t v6 = (const void *)CGPDFNameCreate(a3);
    CFDictionarySetValue(a1, v5, v6);
    CFRelease(v6);
    CFRelease(v5);
  }
}

void CGPDFAppenderDictionarySetCGPDFReference(__CFDictionary *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a3 | (unsigned __int16)a4)
  {
    BOOL v7 = (const void *)CGPDFNameCreate(a2);
    long long v8 = (const void *)CGPDFReferenceCreate(a3, a4);
    CFDictionarySetValue(a1, v7, v8);
    CFRelease(v8);
    CFRelease(v7);
  }
}

void CGPDFAppenderArrayAppendCGPDFReference(__CFArray *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (const void *)CGPDFReferenceCreate(a2, a3);
  CFArrayAppendValue(a1, v4);

  CFRelease(v4);
}

const void *CGPDFAppenderDictionaryGetValue(const __CFDictionary *a1, const char *a2)
{
  if (!a2) {
    return 0;
  }
  CFDataRef v3 = (const void *)CGPDFNameCreate(a2);
  CFDictionaryRef Value = CFDictionaryGetValue(a1, v3);
  CFRelease(v3);
  return Value;
}

void CGPDFAppenderDictionarySetReferenceToReference(__CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v8 = (const void *)CGPDFReferenceCreate(a2, a3);
  uint64_t v9 = (const void *)CGPDFReferenceCreate(a4, a5);
  CFDictionarySetValue(a1, v8, v9);
  CFRelease(v9);

  CFRelease(v8);
}

uint64_t CGPDFAppenderDictionaryCreateHash(const __CFString *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFIndex v2 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v2);
  AppendModeDigestCFType(v2, a1);
  if (v2) {
    CC_MD5_Final(md, v2);
  }
  free(v2);
  uint64_t v3 = 0;
  unint64_t v4 = (char *)&v7;
  do
  {
    sprintf(v4, "%02X", md[v3++]);
    v4 += 2;
  }
  while (v3 != 16);
  return CGPDFNameCreate(&v6);
}

void AppendModeDigestCFType(CC_MD5_CTX *a1, const __CFString *a2)
{
  CFTypeID v4 = CFGetTypeID(a2);
  CFTypeID data = v4;
  if (a1)
  {
    CC_MD5_Update(a1, &data, 8u);
    CFTypeID v5 = data;
  }
  else
  {
    CFTypeID v5 = v4;
  }
  if (v5 == CFBooleanGetTypeID())
  {
    LOBYTE(v36) = *MEMORY[0x1E4F1CFD0] == (void)a2;
    if (!a1) {
      return;
    }
    char v6 = (char *)&v36;
    uint64_t v7 = a1;
    CC_LONG v8 = 1;
    goto LABEL_10;
  }
  CFTypeID v9 = data;
  if (v9 == CFNumberGetTypeID())
  {
    *(void *)&long long v36 = 0;
    CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &v36);
    if (!a1) {
      return;
    }
    char v6 = (char *)&v36;
    uint64_t v7 = a1;
    CC_LONG v8 = 8;
    goto LABEL_10;
  }
  CFTypeID v10 = data;
  if (CGPDFNameTypeID_onceToken != -1) {
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
  }
  if (v10 == CGPDFNameTypeID_id)
  {
    CFNumberType v11 = a2->data;
    int v13 = *v11;
    CFTypeID v12 = v11 + 1;
    if (v13 == 47) {
      CFStringRef v14 = v12;
    }
    else {
      CFStringRef v14 = a2->data;
    }
    size_t v15 = strlen(v14);
    if (v15)
    {
      size_t v16 = v15;
      do
      {
        if (a1) {
          CC_MD5_Update(a1, v14, 1u);
        }
        ++v14;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    CFTypeID v17 = data;
    if (v17 == CFStringGetTypeID())
    {
      CFIndex Length = CFStringGetLength(a2);
      if (Length)
      {
        CFIndex v19 = Length;
        for (CFIndex i = 0; i != v19; ++i)
        {
          LOWORD(v36) = 0;
          LOWORD(v36) = CFStringGetCharacterAtIndex(a2, i);
          if (a1) {
            CC_MD5_Update(a1, &v36, 2u);
          }
        }
      }
    }
    else
    {
      CFTypeID v21 = data;
      if (v21 == CFArrayGetTypeID())
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
        *(void *)&long long v36 = Count;
        if (a1)
        {
          CC_MD5_Update(a1, &v36, 8u);
          CFIndex Count = v36;
        }
        if (Count)
        {
          unint64_t v23 = 0;
          do
          {
            ValueAtIndeCGFloat x = CFArrayGetValueAtIndex((CFArrayRef)a2, v23);
            AppendModeDigestCFType(a1, ValueAtIndex);
            ++v23;
          }
          while (v23 < (unint64_t)v36);
        }
      }
      else
      {
        CFTypeID v25 = data;
        if (v25 == CFDictionaryGetTypeID())
        {
          CFIndex v26 = CFDictionaryGetCount((CFDictionaryRef)a2);
          *(void *)&long long v36 = v26;
          if (a1)
          {
            CC_MD5_Update(a1, &v36, 8u);
            CFIndex v26 = v36;
          }
          uint64_t v27 = (const void **)malloc_type_malloc(8 * v26, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, 0, v27);
          if ((void)v36)
          {
            unint64_t v28 = 0;
            do
              AppendModeDigestCFType(a1, v27[v28++]);
            while (v28 < (unint64_t)v36);
          }
          free(v27);
        }
        else
        {
          CFTypeID v29 = data;
          if (CGPDFStreamObjectTypeID_onceToken != -1) {
            dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_11_20007);
          }
          if (v29 == CGPDFStreamObjectTypeID_id)
          {
            AppendModeDigestCFType(a1, a2->data);
            CFDataRef v30 = (const __CFData *)a2->length;
            if (v30)
            {
              CFIndex v31 = CFDataGetLength(v30);
              if (v31)
              {
                CFIndex v32 = v31;
                for (CFIndex j = 0; j != v32; ++j)
                {
                  LOBYTE(v36) = 0;
                  v38.location = j;
                  v38.length = 1;
                  CFDataGetBytes(v30, v38, (UInt8 *)&v36);
                  if (a1) {
                    CC_MD5_Update(a1, &v36, 1u);
                  }
                }
              }
            }
          }
          else
          {
            CFTypeID v34 = data;
            if (CGPDFReferenceTypeID_onceToken != -1) {
              dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
            }
            if (v34 == CGPDFReferenceTypeID_id)
            {
              long long v35 = a2 ? *(_OWORD *)&a2->data : 0;
              long long v36 = v35;
              if (a1)
              {
                CC_MD5_Update(a1, &v36, 8u);
                uint64_t v7 = a1;
                char v6 = (char *)&v36 + 8;
                CC_LONG v8 = 2;
LABEL_10:
                CC_MD5_Update(v7, v6, v8);
              }
            }
          }
        }
      }
    }
  }
}

void provider_with_masking_colors_release_info(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8)) {
    CGDataProviderUnlock(*(void *)a1);
  }
  CGDataProviderRelease(*(CGDataProviderRef *)a1);
  CFIndex v2 = *(vImageConverter **)(a1 + 928);
  if (v2) {
    vImageConverter_Release(v2);
  }
  uint64_t v3 = *(void **)(a1 + 936);
  if (v3) {
    free(v3);
  }

  free((void *)a1);
}

uint64_t provider_with_masking_colors_get_work_buffer_size(uint64_t a1)
{
  return *(void *)(a1 + 944);
}

uint64_t provider_with_masking_colors_get_bytes_per_row_count(uint64_t a1)
{
  return *(void *)(a1 + 648);
}

uint64_t provider_with_masking_colors_release_data(uint64_t *a1)
{
  CGDataProviderReleaseBytePtr(*a1);
  uint64_t v2 = *a1;

  return CGDataProviderReleaseData(v2);
}

uint64_t provider_with_masking_colors_retain_data(uint64_t *a1)
{
  CGDataProviderRetainBytePtr(*a1);
  uint64_t v2 = *a1;

  return CGDataProviderRetainData(v2);
}

unint64_t provider_with_masking_colors_get_bytes_at_position(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 8)) {
    _CGHandleAssert("provider_with_masking_colors_get_bytes_at_position", 269, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "info->src_provider_uses_random_access == true", "", a6, a7, a8, vars0);
  }

  return provider_with_masking_colors_get_bytes_at_position_inner(a1, a2, a3, a4, 0, a6, a7, a8);
}

unint64_t provider_with_masking_colors_get_bytes_at_position_inner(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x8000000000000000) != 0) {
    _CGHandleAssert("provider_with_masking_colors_get_bytes_at_position_inner", 191, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "pos >= 0", "position is negative %lld", a6, a7, a8, a3);
  }
  int v13 = (const void *)(a1 + 16);
  memcpy(__dst, (const void *)(a1 + 16), 0x130uLL);
  uint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v14, v15, v16, v17, v18, v19, v20);
  memcpy(__dst, (const void *)(a1 + 344), 0x130uLL);
  unint64_t v29 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = *(void *)(a1 + 936);
  memcpy(__src, v13, sizeof(__src));
  unint64_t v36 = destination_position_to_source_position(v29, *(void *)(a1 + 648), *(void *)(a1 + 656), BitsPerPixel, *(void *)(a1 + 320), a3, v31, v32);
  if (v36 >= 0x7FFFFFFF) {
    _CGHandleAssert("provider_with_masking_colors_get_bytes_at_position_inner", 219, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "src_pos >= 0 && src_pos < INT_MAX", "src position %lld", v33, v34, v35, v36);
  }
  unint64_t v121 = a4;
  unint64_t v37 = 8 * a4;
  int v122 = a5;
  int v123 = *(_DWORD *)(a1 + 344);
  uint64_t v136 = *(void *)(a1 + 348);
  int v137 = *(_DWORD *)(a1 + 356);
  uint64_t v38 = *(void *)(a1 + 360);
  int v39 = *(_DWORD *)(a1 + 368);
  int v119 = *(_DWORD *)(a1 + 372);
  unint64_t v40 = v29;
  unint64_t v120 = v37;
  unint64_t v41 = v37 / v29;
  memcpy(v135, (const void *)(a1 + 376), sizeof(v135));
  uint64_t v49 = *(void **)a1;
  unint64_t v118 = BitsPerPixel;
  unint64_t v50 = (v41 * BitsPerPixel + 7) >> 3;
  if (v50 > *(void *)(a1 + 944))
  {
    CGPostError((uint64_t)"%s: bytes_to_read %zd > work_buffer_size %zd", v42, v43, v44, v45, v46, v47, v48, (char)"provider_with_masking_colors_get_bytes_at_position_inner");
    if (v50 > *(void *)(a1 + 944)) {
      _CGHandleAssert("provider_with_masking_colors_get_bytes_at_position_inner", 231, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "bytes_to_read <= info->work_buffer_size", "bytes to read %zu  buffer size %zu", v46, v47, v48, v50);
    }
  }
  uint64_t v51 = *(char **)(a1 + 936);
  uint64_t v52 = v49;
  unint64_t v53 = v50;
  if (*(unsigned char *)(a1 + 8)) {
    size_t BytesAtPositionInternal = CGDataProviderDirectGetBytesAtPositionInternal(v52, v51, v36, v50, v45, v46, v47, v48);
  }
  else {
    size_t BytesAtPositionInternal = CGDataProviderSequentialGetBytesInternal((uint64_t)v52, (uint64_t)v51, v50);
  }
  unint64_t v58 = BytesAtPositionInternal;
  uint64_t v59 = *(vImageConverter **)(a1 + 928);
  if (v59)
  {
    *(void *)std::string __dst = v30;
    *(void *)&__dst[8] = v41;
    *(_OWORD *)&__dst[16] = xmmword_1850CDD00;
    *(void *)&__dst[32] = 0;
    memcpy(&__dst[40], __src, 0x130uLL);
    v124[0] = a2;
    v124[1] = v41;
    long long v125 = xmmword_1850CDD00;
    uint64_t v126 = 0;
    int v127 = v123;
    uint64_t v128 = v136;
    int v129 = v137;
    uint64_t v130 = v38;
    int v131 = v39;
    int v132 = v119;
    memcpy(v133, v135, sizeof(v133));
    vImageConverterConvert(v59, (uint64_t)__dst, (uint64_t)v124, 0);
  }
  BOOL v60 = 1;
  if (v39 != 9)
  {
    if (v39 == 8)
    {
      LOBYTE(v39) = 1;
    }
    else
    {
      BOOL v60 = v39 == 3;
      if ((v39 - 5) > 0xFFFFFFFD) {
        goto LABEL_13;
      }
    }
    _CGHandleAssert("mask_colors", 156, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "alpha_info == kCGImageAlphaFirst || alpha_info == kCGImageAlphaLast", "alpha info %d", v55, v56, v57, v39);
  }
LABEL_13:
  unint64_t v61 = 1;
  switch(v123)
  {
    case 1:
      if (v40 > v120) {
        goto LABEL_109;
      }
      uint64_t v62 = 0;
      int v63 = (v119 == 0x2000) ^ v60;
      if (v63) {
        uint64_t v64 = v38;
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v65 = &a2[v64];
      uint64_t v66 = &a2[v63 ^ 1];
      uint64_t v67 = v38 + 1;
      do
      {
        if (v38)
        {
          uint64_t v68 = 0;
          uint64_t v69 = (unsigned __int8 *)(a1 + 673);
          while (1)
          {
            unsigned int v70 = v66[v68];
            if (v70 < *(v69 - 1) || v70 > *v69) {
              break;
            }
            ++v68;
            v69 += 2;
            if (v38 == v68) {
              goto LABEL_24;
            }
          }
        }
        else
        {
LABEL_24:
          *uint64_t v65 = 0;
        }
        v66 += v67;
        v65 += v67;
        ++v62;
      }
      while (v62 != v41);
      goto LABEL_109;
    case 2:
      if (v40 > v120) {
        goto LABEL_109;
      }
      uint64_t v71 = 0;
      if (v60) {
        uint64_t v72 = v38;
      }
      else {
        uint64_t v72 = 0;
      }
      uint64_t v73 = &a2[2 * v72];
      uint64_t v74 = &a2[2 * !v60];
      do
      {
        if (v38)
        {
          uint64_t v75 = 0;
          uint64_t v76 = (unsigned __int16 *)(a1 + 674);
          while (1)
          {
            unsigned int v77 = *(unsigned __int16 *)&v74[2 * v75];
            if (v77 < *(v76 - 1) || v77 > *v76) {
              break;
            }
            ++v75;
            v76 += 2;
            if (v38 == v75) {
              goto LABEL_37;
            }
          }
        }
        else
        {
LABEL_37:
          *(_WORD *)uint64_t v73 = 0;
        }
        v73 += 2 * v38 + 2;
        ++v71;
        v74 += 2 * v38 + 2;
      }
      while (v71 != v41);
      goto LABEL_109;
    case 4:
      if (v40 > v120) {
        goto LABEL_109;
      }
      uint64_t v78 = 0;
      if (v60) {
        uint64_t v79 = v38;
      }
      else {
        uint64_t v79 = 0;
      }
      uint64_t v80 = &a2[4 * v79];
      uint64_t v81 = &a2[4 * !v60];
      do
      {
        if (v38)
        {
          uint64_t v82 = 0;
          uint64_t v83 = (double *)(a1 + 680);
          while (1)
          {
            double v84 = *(float *)&v81[4 * v82];
            if (*(v83 - 1) > v84 || *v83 < v84) {
              break;
            }
            ++v82;
            v83 += 2;
            if (v38 == v82) {
              goto LABEL_51;
            }
          }
        }
        else
        {
LABEL_51:
          *(_DWORD *)uint64_t v80 = 0;
        }
        v80 += 4 * v38 + 4;
        ++v78;
        v81 += 4 * v38 + 4;
      }
      while (v78 != v41);
      goto LABEL_109;
    case 5:
      if (v40 > v120) {
        goto LABEL_109;
      }
      uint64_t v85 = 0;
      if (v60) {
        uint64_t v86 = v38;
      }
      else {
        uint64_t v86 = 0;
      }
      unsigned __int32 v87 = &a2[2 * v86];
      uint64_t v88 = &a2[2 * !v60];
      do
      {
        if (v38)
        {
          uint64_t v89 = 0;
          uint64_t v90 = (double *)(a1 + 680);
          while (1)
          {
            _H1 = *(_WORD *)&v88[2 * v89];
            __asm { FCVT            D1, H1 }
            if (*(v90 - 1) > _D1 || *v90 < _D1) {
              break;
            }
            ++v89;
            v90 += 2;
            if (v38 == v89) {
              goto LABEL_64;
            }
          }
        }
        else
        {
LABEL_64:
          *(_WORD *)unsigned __int32 v87 = 0;
        }
        v87 += 2 * v38 + 2;
        ++v85;
        v88 += 2 * v38 + 2;
      }
      while (v85 != v41);
      goto LABEL_109;
    case 7:
      goto LABEL_68;
    case 8:
      unint64_t v61 = 2;
      goto LABEL_68;
    case 9:
      unint64_t v61 = 4;
LABEL_68:
      if (v40 > v120) {
        goto LABEL_109;
      }
      uint64_t v97 = 0;
      unsigned int v98 = 0;
      unint64_t v99 = 0;
      unsigned int v100 = 0;
      unint64_t v101 = 0;
      int v102 = ~(-1 << v61);
      int v103 = a2;
      break;
    default:
      goto LABEL_109;
  }
  do
  {
    if (v60)
    {
      int v104 = 1;
      if (!v38) {
        goto LABEL_80;
      }
LABEL_76:
      uint64_t v106 = __dst;
      uint64_t v107 = v38;
      do
      {
        if (v61 > v100)
        {
          v100 += 8;
          unsigned int v108 = *v103++;
          unint64_t v101 = v108 | (v101 << 8);
        }
        v100 -= v61;
        *v106++ = (v101 >> v100) & v102;
        --v107;
      }
      while (v107);
      goto LABEL_80;
    }
    if (v61 > v100)
    {
      v100 += 8;
      unsigned int v105 = *v103++;
      unint64_t v101 = v105 | (v101 << 8);
    }
    v100 -= v61;
    int v104 = (v101 >> v100) & v102;
    if (v38) {
      goto LABEL_76;
    }
LABEL_80:
    if (v60)
    {
      if (v61 > v100)
      {
        v100 += 8;
        unsigned int v109 = *v103++;
        unint64_t v101 = v109 | (v101 << 8);
      }
      v100 -= v61;
      int v104 = (v101 >> v100) & v102;
    }
    if (v38)
    {
      uint64_t v110 = 0;
      char v111 = 1;
LABEL_86:
      uint64_t v112 = (unsigned __int8 *)(a1 + 673 + 2 * v110);
      do
      {
        unsigned int v113 = __dst[v110];
        if (v113 < *(v112 - 1) || v113 > *v112)
        {
          char v111 = 0;
          if (++v110 != v38) {
            goto LABEL_86;
          }
          goto LABEL_95;
        }
        ++v110;
        v112 += 2;
      }
      while (v38 != v110);
      if ((v111 & 1) == 0) {
        goto LABEL_95;
      }
    }
    int v104 = 0;
LABEL_95:
    if (!v60)
    {
      if (v98 >= 8)
      {
        v98 -= 8;
        *a2++ = v99 >> v98;
      }
      unint64_t v99 = (v99 << v61) | v104 & v102;
      v98 += v61;
    }
    if (v38)
    {
      for (uint64_t i = 0; i != v38; ++i)
      {
        int v115 = __dst[i];
        uint64_t v116 = v98 - 8;
        if (v98 >= 8)
        {
          do
          {
            *a2++ = v99 >> v116;
            v116 -= 8;
            v98 -= 8;
          }
          while (v98 > 7);
        }
        unint64_t v99 = (v99 << v61) | v115 & v102;
        v98 += v61;
      }
    }
    if (v60)
    {
      if (v98 >= 8)
      {
        v98 -= 8;
        *a2++ = v99 >> v98;
      }
      unint64_t v99 = (v99 << v61) | v104 & v102;
      v98 += v61;
    }
    ++v97;
  }
  while (v97 != v41);
LABEL_109:
  unint64_t result = v121;
  if (v58 < v53) {
    unint64_t result = byte_count_to_byte_count(v118, *(void *)(a1 + 320), *(void *)(a1 + 328), *(void *)(a1 + 336), v40, *(void *)(a1 + 648), v58, v57);
  }
  if (v122)
  {
    *(void *)(a1 + 336) += v58;
    *(void *)(a1 + 664) += result;
  }
  return result;
}

uint64_t provider_with_masking_colors_unlock(uint64_t *a1)
{
  return CGDataProviderUnlock(*a1);
}

uint64_t provider_with_masking_colors_lock(uint64_t *a1)
{
  return CGDataProviderLock(*a1);
}

void provider_with_masking_colors_rewind(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (!v9) {
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", a6, a7, a8, v10);
  }
  if ((*(_DWORD *)(v9 + 20) | 2) != 3) {
    _CGHandleAssert("provider_with_masking_colors_rewind", 336, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "", "Unimplemented", a6, a7, a8, v10);
  }
  CGDataProviderRewind(v9);
  a1[83] = 0;
  a1[42] = 0;
}

unint64_t provider_with_masking_colors_skip_forward(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  memcpy(__dst, (const void *)(a1 + 16), sizeof(__dst));
  uint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v5, v6, v7, v8, v9, v10, v11);
  memcpy(__dst, (const void *)(a1 + 344), sizeof(__dst));
  unint64_t v20 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v13, v14, v15, v16, v17, v18, v19);
  if ((a2 & 0x8000000000000000) != 0) {
    _CGHandleAssert("provider_with_masking_colors_skip_forward", 290, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "count >= 0", "count = %lld", v21, v22, v23, a2);
  }
  uint64_t v24 = v20;
  unint64_t v25 = byte_count_to_byte_count(v20, *(void *)(a1 + 648), *(void *)(a1 + 656), *(void *)(a1 + 664), BitsPerPixel, *(void *)(a1 + 320), a2, v23);
  uint64_t v26 = CGDataProviderSkipForwardInternal(v4, v25);
  uint64_t v30 = v26;
  if (v26 < 0) {
    _CGHandleAssert("provider_with_masking_colors_skip_forward", 303, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "skipped >= 0", "skipped %lld", v27, v28, v29, v26);
  }
  if (v26 != v25) {
    a2 = byte_count_to_byte_count(BitsPerPixel, *(void *)(a1 + 320), *(void *)(a1 + 328), *(void *)(a1 + 336), v24, *(void *)(a1 + 648), v26, v29);
  }
  *(void *)(a1 + 336) += v30;
  *(void *)(a1 + 664) += a2;
  return a2;
}

unint64_t provider_with_masking_colors_get_bytes(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 8)) {
    _CGHandleAssert("provider_with_masking_colors_get_bytes", 277, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "info->src_provider_uses_random_access == false", "", a6, a7, a8, vars0);
  }

  return provider_with_masking_colors_get_bytes_at_position_inner(a1, a2, 0, a3, 1, a6, a7, a8);
}

uint64_t PBPageLayoutPkg::PBCharacterStyle::formatText(PBPageLayoutPkg::PBCharacterStyle *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    PB::TextFormatter::format(a2, "baselineOffset", *((float *)this + 6));
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "fillColor");
  }
  char v6 = *((unsigned char *)this + 32);
  if (v6)
  {
    PB::TextFormatter::format(a2, "fontDataIndex");
    char v6 = *((unsigned char *)this + 32);
  }
  if ((v6 & 4) != 0) {
    PB::TextFormatter::format(a2, "fontSize", *((float *)this + 7));
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t PBPageLayoutPkg::PBCharacterStyle::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::write(a2, *(float *)(v3 + 28));
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  if ((*(unsigned char *)(v3 + 32) & 2) != 0)
  {
    float v6 = *(float *)(v3 + 24);
    return PB::Writer::write(a2, v6);
  }
  return this;
}

uint64_t PBPageLayoutPkg::PBCharacterStyle::readFrom(PBPageLayoutPkg::PBCharacterStyle *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_49;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_43:
          uint64_t v25 = 0;
          goto LABEL_49;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v28);
        goto LABEL_45;
      case 3u:
        operator new();
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v29 = *((void *)a2 + 1);
        if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v29);
LABEL_45:
          *((void *)a2 + 1) += 4;
        }
        else
        {
LABEL_36:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_50;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        uint64_t v25 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_49;
      }
      unint64_t v32 = v20 + 1;
      char v33 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v32;
      v25 |= (unint64_t)(v33 & 0x7F) << v30;
      if ((v33 & 0x80) == 0) {
        break;
      }
      v30 += 7;
      unint64_t v20 = v32;
      BOOL v14 = v31++ > 8;
      if (v14) {
        goto LABEL_43;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v25 = 0;
    }
LABEL_49:
    *((void *)this + 2) = v25;
LABEL_50:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_50;
  }
  return result;
}

void PBPageLayoutPkg::PBCharacterStyle::~PBCharacterStyle(PBPageLayoutPkg::PBCharacterStyle *this)
{
  PBPageLayoutPkg::PBCharacterStyle::~PBCharacterStyle(this);

  JUMPOUT(0x18532A2A0);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1ED094698;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

BOOL __lookup_pattern_entry_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(double **)(a1 + 32);
  BOOL result = 0;
  if (*(double *)(a2 + 96) == *v2
    && *(double *)(a2 + 104) == v2[1]
    && *(double *)(a2 + 112) == v2[2]
    && *(double *)(a2 + 120) == v2[3])
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(void *)(a2 + 64) == *(void *)(*(void *)(v3 + 48) + 32)
      && *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 48))
    {
      if (*(_DWORD *)(a2 + 76) == *(_DWORD *)(v3 + 132)) {
        return 1;
      }
      uint64_t v5 = *(void *)(v3 + 136);
      uint64_t v4 = *(void *)(v3 + 144);
      if (*(void *)(a2 + 80) == v5 && *(void *)(a2 + 88) == v4) {
        return 1;
      }
    }
  }
  return result;
}

double *get_pattern_phase(double *result, int *a2, double a3, double a4, double a5, double a6)
{
  double v6 = result[2] * a4 + *result * a3;
  double v7 = result[3] * a4 + result[1] * a3;
  double v8 = a6 + result[5];
  double v9 = v6 + a5 + result[4];
  if (v9 <= 1073741820.0)
  {
    unsigned int v11 = llround(v9);
    if (v9 >= -1073741820.0) {
      int v10 = v11;
    }
    else {
      int v10 = -1073741823;
    }
  }
  else
  {
    int v10 = 0x3FFFFFFF;
  }
  *a2 = v10;
  double v12 = v7 + v8;
  if (v12 <= 1073741820.0)
  {
    if (v12 >= -1073741820.0) {
      unsigned int v13 = llround(v12);
    }
    else {
      unsigned int v13 = -1073741823;
    }
  }
  else
  {
    unsigned int v13 = 0x3FFFFFFF;
  }
  a2[1] = v13;
  return result;
}

char *create_pattern_tile_pattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6, uint64_t a7, uint64_t a8, double a9)
{
  if (a4 < 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)(a4 + 32);
  }
  double v18 = *(double *)(v16 + 104);
  double v17 = *(double *)(v16 + 112);
  double v20 = *(double *)(v16 + 120);
  double v19 = *(double *)(v16 + 128);
  if (v20 < 0.0 || v19 < 0.0)
  {
    CGRect v35 = CGRectStandardize(*(CGRect *)(v16 + 104));
    double v21 = fabs(v35.size.width);
    v35.origin.CGFloat x = v18;
    v35.origin.CGFloat y = v17;
    v35.size.double width = v20;
    v35.size.double height = v19;
    *(CGRect *)(&v22 - 3) = CGRectStandardize(v35);
  }
  else
  {
    double v21 = fabs(v20);
    double v22 = *(double *)(v16 + 128);
  }
  if (*(_DWORD *)(v16 + 20) == 1) {
    goto LABEL_9;
  }
  if (v18 == INFINITY || v17 == INFINITY) {
    return 0;
  }
  unint64_t v32 = 0;
  if (v20 != 0.0 && v19 != 0.0)
  {
LABEL_9:
    double v23 = fabs(v22);
    double v24 = fabs(*(double *)(v16 + 136));
    double v25 = fabs(*(double *)(v16 + 144));
    if (a9 >= 1.0 && *(unsigned char *)(v16 + 186) != 0 && v21 == v24 && v23 == v25) {
      uint64_t v29 = 32;
    }
    else {
      uint64_t v29 = 33;
    }
    if (a2) {
      uint64_t v30 = *(unsigned int *)(a2 + 4);
    }
    else {
      uint64_t v30 = 3;
    }
    char v33 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)a5, v29, *(void *)(*(void *)(a1 + 48) + 32), v30, (uint64_t)a6, a7, a8);
    unint64_t v32 = v33;
    if (v33) {
      build_tile((uint64_t)v33, a1, a2, a3, a4, 0, a6, (double)*a5, (double)a5[1], (double)a5[2], (double)a5[3], a9);
    }
  }
  return v32;
}

void build_tile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, _OWORD *a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  double v21 = (void *)a2;
  uint64_t v22 = a1;
  uint64_t v184 = *MEMORY[0x1E4F143B8];
  memset(&v165[16], 0, 96);
  long long v166 = 0u;
  *(_OWORD *)uint64_t v165 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  *(_OWORD *)&v165[24] = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&v165[40] = *(_OWORD *)(a2 + 136);
  *(_OWORD *)&v165[56] = *(_OWORD *)(a2 + 152);
  *(void *)&v165[72] = *(void *)(a2 + 168);
  *(_OWORD *)&v165[8] = *(_OWORD *)(a2 + 104);
  *(void *)&long long v161 = *(void *)(a2 + 16);
  *((void *)&v162 + 1) = *(void *)(a2 + 40);
  long long v163 = *(_OWORD *)(a2 + 48);
  memset(v164, 0, sizeof(v164));
  *(void *)&v164[0] = *(void *)(a2 + 64);
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)((char *)v164 + ++*(_DWORD *)(result + 8) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a2 + 72) = 0u;
  DWORD2(v166) = *(_DWORD *)(a2 + 216);
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)(a2 + 4++*(_DWORD *)(result + 8) = a1;
  CopCGFloat y = CGRenderingStateCreateCopy(a3);
  long long v25 = a7[1];
  long long v24 = a7[2];
  *(_OWORD *)(Copy + 24) = *a7;
  *(_OWORD *)(Copy + 40) = v25;
  *(_OWORD *)(Copy + 56) = v24;
  unint64_t v26 = CGGStateCreateCopy(a4);
  uint64_t v27 = (uint64_t)v26;
  if (a6)
  {
    double v28 = *a6;
    double v29 = a6[1];
    uint64_t v30 = *((void *)v26 + 15);
    if (*(double *)(v30 + 24) != *a6 || *(double *)(v30 + 32) != v29)
    {
      maybeCopyRenderingState((uint64_t)v26);
      uint64_t v31 = *(void *)(v27 + 120);
      *(double *)(v31 + 24) = v28;
      *(double *)(v31 + 32) = v29;
    }
  }
  CGGStateResetClip(v27);
  if (*(double *)(*(void *)(v27 + 120) + 8) != 1.0)
  {
    maybeCopyRenderingState(v27);
    *(void *)(*(void *)(v27 + 120) + ++*(_DWORD *)(result + 8) = 0x3FF0000000000000;
  }
  CGGStateSetStyle(v27, 0);
  CGGStateSetSoftMask(v27, 0);
  CGGStateSetCompositeOperation(v27, 2);
  if (a5 < 1)
  {
    PatternBaseColor = CGColorGetPatternBaseColor(a5);
    uint64_t v32 = 0;
    if (!PatternBaseColor)
    {
LABEL_17:
      CGGStateSetFillColor(v27, 0);
      CGGStateSetStrokeColor(v27, 0);
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  uint64_t v32 = *(void *)(a5 + 32);
  PatternBaseColor = CGColorGetPatternBaseColor(a5);
  if (PatternBaseColor)
  {
LABEL_15:
    CopyWithdouble Alpha = CGColorCreateCopyWithAlpha(PatternBaseColor, 1.0);
    CGGStateSetFillColor(v27, CopyWithAlpha);
    CGGStateSetStrokeColor(v27, CopyWithAlpha);
    if (CopyWithAlpha) {
      CFRelease(CopyWithAlpha);
    }
    goto LABEL_18;
  }
  if (!v32 || *(_DWORD *)(v32 + 20) || !*(unsigned char *)(v32 + 184) || !*(void *)(v32 + 80)) {
    goto LABEL_17;
  }
LABEL_18:
  CGRect v35 = (void *)*v21;
  CGRect v185 = CGRectStandardize(*(CGRect *)(v32 + 104));
  if (v185.size.width == 0.0 || (CGFloat height = v185.size.height, v185.size.height == 0.0))
  {
LABEL_76:
    if (atomic_fetch_add_explicit((atomic_uint *volatile)Copy, 0xFFFFFFFF, memory_order_relaxed) == 1) {
      free(Copy);
    }
    goto LABEL_78;
  }
  CGFloat x = v185.origin.x;
  CGFloat y = v185.origin.y;
  int v39 = *(_DWORD *)(v32 + 152);
  float64x2_t v40 = *(float64x2_t *)(Copy + 24);
  float64x2_t v41 = *(float64x2_t *)(Copy + 40);
  float64x2_t v42 = vmlaq_n_f64(vmulq_laneq_f64(v41, *(float64x2_t *)(v32 + 24), 1), v40, *(double *)(v32 + 24));
  float64x2_t v43 = vmlaq_n_f64(vmulq_laneq_f64(v41, *(float64x2_t *)(v32 + 40), 1), v40, *(double *)(v32 + 40));
  float64x2_t v136 = vaddq_f64(*(float64x2_t *)(Copy + 56), vmlaq_n_f64(vmulq_n_f64(v41, *(double *)(*(void *)(v27 + 120) + 32) + *(double *)(v32 + 64)), v40, *(double *)(*(void *)(v27 + 120) + 24) + *(double *)(v32 + 56)));
  double v145 = *(double *)(v32 + 136);
  double v149 = fabs(v145);
  double v141 = *(double *)(v32 + 144);
  double v152 = fabs(v141);
  CGFloat v134 = v185.origin.x;
  double width = v185.size.width;
  CGFloat rect = v185.origin.y;
  if (v185.origin.x == -8.98846567e307
    && v185.origin.y == -8.98846567e307
    && v185.size.width == 1.79769313e308
    && v185.size.height == 1.79769313e308)
  {
    int v39 = 0;
    float64x2_t v139 = v43;
    float64x2_t v140 = v42;
    double v44 = 0.0;
    double v45 = 0.0;
  }
  else
  {
    if (v145 != 0.0)
    {
      double v46 = vmuld_lane_f64(v149, v42, 1);
      double v47 = v46 * v46 + v149 * v42.f64[0] * (v149 * v42.f64[0]);
      if (v47 != 0.0 && v47 < 0.253921509) {
        float64x2_t v42 = vmulq_n_f64(v42, (double)(int)(1.0 / sqrt(v47) + 0.5));
      }
    }
    double v48 = v43.f64[1];
    if (v141 != 0.0)
    {
      double v49 = v152 * v43.f64[1] * (v152 * v43.f64[1]) + v152 * v43.f64[0] * (v152 * v43.f64[0]);
      if (v49 != 0.0 && v49 < 0.253921509)
      {
        float64x2_t v43 = vmulq_n_f64(v43, (double)(int)(1.0 / sqrt(v49) + 0.5));
        double v48 = v43.f64[1];
      }
    }
    if ((int)vmuld_lane_f64(v185.size.width * 256.0, v42, 1) | (int)(v185.size.height * 256.0 * v43.f64[0]))
    {
      if ((int)(v185.size.width * 256.0 * v42.f64[0]) | (int)(v185.size.height * 256.0 * v48))
      {
        int v39 = 0;
      }
      else
      {
        v43.f64[1] = 0.0;
        v42.f64[0] = 0.0;
      }
    }
    else
    {
      v42.f64[1] = 0.0;
      v43.f64[0] = 0.0;
    }
    float64x2_t v139 = v43;
    float64x2_t v140 = v42;
    double v44 = x;
    double v45 = y;
  }
  v186.origin.CGFloat x = a8;
  v186.origin.CGFloat y = a9;
  v186.size.double width = a10;
  v186.size.CGFloat height = a11;
  CGRect v187 = CGRectInset(v186, 0.00390625, 0.00390625);
  *(float64x2_t *)&v167.a = v140;
  *(float64x2_t *)&v167.c = v139;
  *(float64x2_t *)&v167.tCGFloat x = v136;
  v50.n64_f64[0] = CGRectApplyInverseAffineTransform(&v167.a, *(__n64 *)&v187.origin.x, v187.origin.y, v187.size.width, v187.size.height).n64_f64[0]- v44;
  if (v145 == 0.0)
  {
    float64x2_t v148 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v149, 0);
    double v56 = v50.n64_f64[0] - v50.n64_f64[0];
  }
  else
  {
    double v54 = v52.n64_f64[0] + v50.n64_f64[0];
    double v55 = floor(v50.n64_f64[0] / v149);
    double v56 = v149 * v55;
    float64x2_t v148 = vmulq_n_f64(v140, v149);
    double v149 = (double)(int)((v54 - v149 * v55) / v149);
  }
  CGFloat v57 = v134;
  double v58 = v51.n64_f64[0] - v45;
  uint64_t v132 = v22;
  double v131 = a12;
  uint64_t v130 = v21;
  if (v141 == 0.0)
  {
    double v62 = v58 - v58;
    float64x2_t v144 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v152, 0);
    float64x2_t v59 = v139;
  }
  else
  {
    float64x2_t v59 = v139;
    float64x2_t v144 = vmulq_n_f64(v139, v152);
    double v60 = v53.n64_f64[0] + v58;
    double v61 = floor(v58 / v152);
    double v62 = v152 * v61;
    double v152 = (double)(int)((v60 - v152 * v61) / v152);
  }
  double v63 = width;
  CGFloat v64 = rect;
  float64x2_t v137 = vmlaq_n_f64(vmlaq_n_f64(v136, v140, v56), v59, v62);
  *(float64x2_t *)&v167.a = v140;
  *(float64x2_t *)&v167.c = v59;
  *(float64x2_t *)&v167.tCGFloat x = v137;
  double v129 = height;
  CGFloat v65 = height;
  CGRect v188 = CGRectApplyAffineTransform(*(CGRect *)&v57, &v167);
  CGFloat v72 = v188.size.width;
  CGFloat v73 = v188.size.height;
  double v74 = v188.origin.x - v137.f64[0];
  double v75 = v188.origin.y - v137.f64[1];
  if (*(_DWORD *)(v32 + 20)
    || !*(unsigned char *)(v32 + 184)
    || (uint64_t v78 = *(void *)(v32 + 80)) == 0
    || CGImageGetClipPath(*(void **)(v32 + 80)))
  {
    unint64_t v76 = (unint64_t)v149;
    unint64_t v77 = (unint64_t)v152;
    if ((unint64_t)v152 | (unint64_t)v149
      && CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v66, v67, v68, v69, v70, v71))
    {
      CG::DisplayList::createContextDelegate();
    }
    if (v39)
    {
      __asm { FMOV            V1.2D, #1.0 }
      float64x2_t v87 = vdivq_f64(_Q1, vaddq_f64(v148, v144));
    }
    else
    {
      float64x2_t v87 = 0uLL;
    }
    float64x2_t v142 = v87;
    float64x2_t v88 = v137;
    unint64_t v89 = 0;
    float64x2_t v90 = v140;
    float64x2_t v146 = v139;
    while (1)
    {
      unint64_t v91 = 0;
      float64x2_t v138 = v88;
      float64x2_t v92 = v88;
      do
      {
        float64x2_t v150 = v92;
        float64x2_t v153 = v90;
        v191.origin.CGFloat x = v92.f64[0] + v74;
        v191.origin.CGFloat y = v92.f64[1] + v75;
        v189.origin.CGFloat x = a8;
        v189.origin.CGFloat y = a9;
        v189.size.double width = a10;
        v189.size.CGFloat height = a11;
        v191.size.double width = v72;
        v191.size.CGFloat height = v73;
        if (!CGRectIntersectsRect(v189, v191)) {
          goto LABEL_71;
        }
        float64x2_t v90 = v153;
        if (!v39)
        {
          float64x2_t v98 = v150;
          float64x2_t v101 = v146;
          goto LABEL_70;
        }
        float64x2_t v97 = v150;
        float64x2_t v98 = vrndaq_f64(v150);
        float64x2_t v99 = vmulq_f64(v142, vsubq_f64(vrndaq_f64(vaddq_f64(vaddq_f64(v150, v148), v144)), v98));
        if (v99.f64[0] != 0.0 && v99.f64[1] != 0.0)
        {
          float64x2_t v100 = vabsq_f64(v99);
          float64x2_t v90 = vmulq_f64(v100, v140);
          float64x2_t v101 = vmulq_f64(v100, v139);
LABEL_70:
          float64x2_t v153 = v90;
          *(float64x2_t *)(v27 + 24) = v90;
          float64x2_t v146 = v101;
          *(float64x2_t *)(v27 + 40) = v101;
          *(float64x2_t *)(v27 + 56) = v98;
          CGPatternDrawInContextDelegate(v32, v35, (uint64_t)Copy, v27, v93, v94, v95, v96);
LABEL_71:
          float64x2_t v97 = v150;
          float64x2_t v90 = v153;
        }
        ++v91;
        float64x2_t v92 = vaddq_f64(v97, v148);
      }
      while (v91 <= v76);
      ++v89;
      float64x2_t v88 = vaddq_f64(v138, v144);
      if (v89 > v77)
      {
        uint64_t v22 = v132;
        goto LABEL_75;
      }
    }
  }
  v167.a = v134;
  v167.b = rect;
  v167.c = width;
  v167.d = v129;
  *(void *)&long long v156 = v78;
  *(float64x2_t *)(v27 + 24) = v140;
  *(float64x2_t *)(v27 + 40) = v139;
  *(float64x2_t *)(v27 + 56) = v137;
  if (width != v145
    || v129 != v141
    || v35
    && ((uint64_t v79 = (unsigned int (*)(void *, char *, uint64_t, CGAffineTransform *, long long *, void, uint64_t))v35[17]) == 0
     || v79(v35, Copy, v27, &v167, &v156, 0, 1)))
  {
    if (v39)
    {
      __asm { FMOV            V1.2D, #1.0 }
      float64x2_t v85 = vdivq_f64(_Q1, vaddq_f64(v148, v144));
    }
    else
    {
      float64x2_t v85 = 0uLL;
    }
    float64x2_t v143 = v85;
    unint64_t v116 = 0;
    unint64_t v117 = (unint64_t)v149;
    unint64_t v118 = (unint64_t)v152;
    float64x2_t v119 = v140;
    float64x2_t v147 = v139;
    do
    {
      unint64_t v120 = 0;
      float64x2_t v121 = v137;
      do
      {
        float64x2_t v151 = v121;
        float64x2_t v154 = v119;
        v192.origin.CGFloat x = v121.f64[0] + v74;
        v192.origin.CGFloat y = v121.f64[1] + v75;
        v190.origin.CGFloat x = a8;
        v190.origin.CGFloat y = a9;
        v190.size.double width = a10;
        v190.size.CGFloat height = a11;
        v192.size.double width = v72;
        v192.size.CGFloat height = v73;
        if (!CGRectIntersectsRect(v190, v192))
        {
          float64x2_t v122 = v151;
          float64x2_t v119 = v154;
          goto LABEL_104;
        }
        float64x2_t v119 = v154;
        if (v39)
        {
          float64x2_t v122 = v151;
          float64x2_t v123 = vrndaq_f64(v151);
          float64x2_t v124 = vmulq_f64(v143, vsubq_f64(vrndaq_f64(vaddq_f64(vaddq_f64(v151, v148), v144)), v123));
          if (v124.f64[0] == 0.0 || v124.f64[1] == 0.0) {
            goto LABEL_104;
          }
          float64x2_t v125 = vabsq_f64(v124);
          float64x2_t v119 = vmulq_f64(v125, v140);
          float64x2_t v126 = vmulq_f64(v125, v139);
        }
        else
        {
          float64x2_t v122 = v151;
          float64x2_t v123 = v151;
          float64x2_t v126 = v147;
        }
        *(float64x2_t *)(v27 + 24) = v119;
        float64x2_t v147 = v126;
        *(float64x2_t *)(v27 + 40) = v126;
        *(float64x2_t *)(v27 + 56) = v123;
        if (v35)
        {
          int v127 = (uint64_t (*)(void *, char *, uint64_t, void, double, double, double, double))v35[10];
          if (!v127) {
            goto LABEL_75;
          }
          float64x2_t v155 = v119;
          int v128 = v127(v35, Copy, v27, v156, v167.a, v167.b, v167.c, v167.d);
          float64x2_t v122 = v151;
          float64x2_t v119 = v155;
          if (v128) {
            goto LABEL_75;
          }
        }
LABEL_104:
        ++v120;
        float64x2_t v121 = vaddq_f64(v122, v148);
      }
      while (v120 <= v117);
      ++v116;
      float64x2_t v137 = vaddq_f64(v137, v144);
    }
    while (v116 <= v118);
  }
LABEL_75:
  a12 = v131;
  double v21 = v130;
  if (Copy) {
    goto LABEL_76;
  }
LABEL_78:
  CGGStateRelease(v27);
  ripc_ContextRestore((uint64_t)v21, (uint64_t)&v160);
  if (a12 < 1.0)
  {
    if (v22)
    {
      uint64_t v102 = *(void *)v22;
      if (*(void *)v22)
      {
        float v103 = a12;
        if (v103 < 1.0 && (*(_DWORD *)(v22 + 20) & 0x80000000) == 0 && (*(_DWORD *)(v22 + 24) & 0x80000000) == 0)
        {
          uint64_t v183 = 0;
          long long v181 = 0u;
          long long v182 = 0u;
          long long v179 = 0u;
          long long v180 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          long long v175 = 0u;
          long long v176 = 0u;
          long long v173 = 0u;
          long long v174 = 0u;
          long long v171 = 0u;
          long long v172 = 0u;
          long long v169 = 0u;
          long long v170 = 0u;
          long long v168 = 0u;
          memset(&v167, 0, sizeof(v167));
          long long v158 = 0u;
          long long v159 = 0u;
          long long v156 = 0u;
          long long v157 = 0u;
          int v104 = (unsigned int **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v22, 32, v22 + 12);
          if (v104)
          {
            char v111 = v104;
            uint64_t v112 = *v104;
            if (*v104
              && (*(void *)(v22 + 56) || ripl_CreateMask(v22, 1, v105, v106, v107, v108, v109, v110)))
            {
              unsigned int v113 = *(CGAffineTransform **)(v22 + 40);
              if (v113)
              {
                unsigned int v114 = LODWORD(v113->a) & 0xFFFFFF00 | 1;
              }
              else
              {
                *(void *)&long long v179 = 0;
                long long v177 = 0u;
                long long v178 = 0u;
                long long v175 = 0u;
                long long v176 = 0u;
                long long v173 = 0u;
                long long v174 = 0u;
                long long v171 = 0u;
                long long v172 = 0u;
                long long v169 = 0u;
                long long v170 = 0u;
                long long v168 = 0u;
                unsigned int v113 = &v167;
                unsigned int v114 = 1;
                memset(&v167, 0, sizeof(v167));
              }
              LODWORD(v113->a) = v114;
              ripl_BltOpDestination((uint64_t)v113, v22 + 12, v22);
              ripl_BltOpSourceLayer((uint64_t)v113, (_DWORD *)(v22 + 12), (_DWORD *)v22, 0, v22);
              LODWORD(v113[2].d) = 0;
              LODWORD(v113[2].tx) = 0;
              if ((LODWORD(v113->a) & 0xFF0000) != 0)
              {
                LODWORD(v113->a) &= 0xFF00FFFF;
                HIDWORD(v113[2].d) = 0;
                v113[2].tCGFloat y = 0.0;
                v113[2].b = 0.0;
                v113[2].c = 0.0;
              }
              *(void *)&long long v156 = *v112;
              long long v157 = 0uLL;
              *((float *)&v156 + 2) = a12;
              long long v158 = *(unint64_t *)(v22 + 20);
              long long v159 = 0uLL;
              if ((*((unsigned int (**)(unsigned int **, CGAffineTransform *, long long *))v112 + 5))(v111, v113, &v156))
              {
                uint64_t v115 = v22 + 12;
              }
              else
              {
                uint64_t v115 = 0;
              }
            }
            else
            {
              uint64_t v115 = 0;
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 48))(v22, v115);
          }
        }
      }
    }
  }
}

uint64_t ripc_size()
{
  return 160;
}

CGDataProvider *CGDataProviderCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2 || !*(void *)a2) {
    return 0;
  }
  uint64_t provider = create_provider(a1, 3, a3, a4, a5, a6, a7, a8);
  int v10 = (CGDataProvider *)provider;
  if (provider)
  {
    *(void *)(provider + 40) = *(void *)a2;
    *(_OWORD *)(provider + 56) = *(_OWORD *)(a2 + 8);
    *(void *)(provider + 72) = *(void *)(a2 + 24);
    if (!CGDataProviderIsRewindable(provider))
    {
      CFDataRef v11 = CGDataProviderCopyData(v10);
      CGDataProviderRef v12 = CGDataProviderCreateWithCFData(v11);
      if (v11) {
        CFRelease(v11);
      }
      CFRelease(v10);
      return v12;
    }
  }
  return v10;
}

uint64_t CGDataProviderGetSize(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 32);
  }
  else {
    return -1;
  }
}

uint64_t CGDataProviderGetSize2(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 32);
  }
  else {
    return -1;
  }
}

CFStringRef CGPDFStringCopyTextString(CGPDFStringRef string)
{
  if (!string)
  {
    uint64_t v3 = (const UniChar *)malloc_type_malloc(0, 0x1000040BDFB0063uLL);
    unint64_t v2 = 0;
    goto LABEL_20;
  }
  if (*((void *)string + 3))
  {
    decrypt_string((uint64_t)string);
    unint64_t v2 = *((void *)string + 9);
    if (*((void *)string + 3)) {
      decrypt_string((uint64_t)string);
    }
  }
  else
  {
    unint64_t v2 = *((void *)string + 9);
  }
  uint64_t v4 = (unsigned __int8 *)string + 80;
  if (v2 < 2)
  {
    uint64_t v3 = (const UniChar *)malloc_type_malloc(2 * v2, 0x1000040BDFB0063uLL);
    if (v2)
    {
LABEL_13:
      for (uint64_t i = 0; i != v2; ++i)
      {
        int v7 = CGPDFUnicodeVectorPDFDoc[v4[i]];
        v3[i] = v7;
        if (!v7)
        {
          unsigned int v8 = v4[i] - 9;
          if (v8 > 4) {
            __int16 v9 = 32;
          }
          else {
            __int16 v9 = asc_185296CD4[(char)v8];
          }
          v3[i] = v9;
        }
      }
    }
LABEL_20:
    CFStringRef v10 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, v2);
    CFDataRef v11 = (void *)v3;
    goto LABEL_21;
  }
  int v5 = *v4;
  if (v5 == 255)
  {
    if (*((unsigned __int8 *)string + 81) != 254)
    {
LABEL_11:
      uint64_t v3 = (const UniChar *)malloc_type_malloc(2 * v2, 0x1000040BDFB0063uLL);
      goto LABEL_13;
    }
  }
  else if (v5 != 254 || *((unsigned __int8 *)string + 81) != 255)
  {
    goto LABEL_11;
  }
  if (v2)
  {
    pdf_error("suspicious Unicode text string: length is not a multiple of 2.");
    --v2;
  }
  unint64_t v13 = 0;
  while (*((unsigned char *)string + v13 + 80) || *((unsigned char *)string + v13 + 81) != 27)
  {
    v13 += 2;
    if (v13 >= v2)
    {
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      return CFStringCreateWithBytes(v14, (const UInt8 *)string + 80, v2, 0x100u, 1u);
    }
  }
  CFStringRef result = (CFStringRef)malloc_type_malloc(v2, 0x863C6011uLL);
  if (!result) {
    return result;
  }
  CFStringRef v15 = result;
  CFIndex v16 = 0;
  unint64_t v17 = 0;
  do
  {
    unint64_t v18 = v17 + 1;
    if (v4[v17] || v4[v18] != 27)
    {
      double v21 = (char *)result + v16;
      *double v21 = v4[v17];
      v16 += 2;
      v21[1] = v4[v18];
    }
    else if (v17 + 2 >= v2)
    {
      v17 += 2;
    }
    else
    {
      while (*((unsigned char *)string + v17 + 82) || *((unsigned char *)string + v17 + 83) != 27)
      {
        unint64_t v19 = v17 + 2;
        unint64_t v20 = v17 + 4;
        v17 += 2;
        if (v20 >= v2)
        {
          unint64_t v17 = v19 + 2;
          goto LABEL_43;
        }
      }
      v17 += 2;
    }
LABEL_43:
    v17 += 2;
  }
  while (v17 < v2);
  CFStringRef v10 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)result, v16, 0x100u, 1u);
  CFDataRef v11 = (void *)v15;
LABEL_21:
  free(v11);
  return v10;
}

unint64_t get_font_stream_20162(uint64_t a1, int *a2)
{
  unint64_t result = CGPDFFontGetFontDescriptor(a1);
  if (result)
  {
    unint64_t v4 = result;
    CGPDFStreamRef value = 0;
    if (CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)(result + 32), "FontFile", &value)) {
      unint64_t result = (unint64_t)value;
    }
    else {
      unint64_t result = 0;
    }
    if (result)
    {
      *a2 = 2;
      return result;
    }
    CGPDFStreamRef value = 0;
    if (CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)(v4 + 32), "FontFile3", &value)) {
      CGPDFStreamRef v5 = value;
    }
    else {
      CGPDFStreamRef v5 = 0;
    }
    if (!v5) {
      return 0;
    }
    CGPDFStreamRef value = 0;
    BOOL Name = CGPDFDictionaryGetName(*((CGPDFDictionaryRef *)v5 + 6), "Subtype", (const char **)&value);
    unint64_t result = 0;
    if (!Name) {
      return result;
    }
    int v7 = (const char *)value;
    if (!strcmp((const char *)value, "Type1C"))
    {
      int v8 = 3;
    }
    else
    {
      if (strcmp(v7, "OpenType"))
      {
        return 0;
      }
      int v8 = 6;
    }
    *a2 = v8;
    return (unint64_t)v5;
  }
  return result;
}

void type1_free(int a1, void *a2)
{
}

uint64_t CGPDFShadingType6Init(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  if (type6_info_getTypeID_onceToken != -1) {
    dispatch_once(&type6_info_getTypeID_onceToken, &__block_literal_global_20175);
  }
  uint64_t result = pdf_create_cftype();
  if (!result) {
    return result;
  }
  int v7 = (void *)result;
  CGPDFObjectRef v15 = 0;
  CGPDFInteger value = 0;
  CGPDFDataFormat format = CGPDFDataFormatRaw;
  *a2 = result;
  *a3 = CGPDFShadingType6Init_type6_callbacks;
  if (a1)
  {
    int v8 = *(_DWORD *)(a1 + 16);
    __int16 v9 = *(CGPDFDictionary **)(a1 + 24);
  }
  else
  {
    int v8 = 0;
    __int16 v9 = 0;
  }
  *(_DWORD *)(result + 16) = v8;
  if (!CGPDFDictionaryGetInteger(v9, "BitsPerCoordinate", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 0x20 || ((1 << value) & 0x101011116) == 0)
  {
    return 0;
  }
  v7[4] = value;
  if (!CGPDFDictionaryGetInteger(v9, "BitsPerComponent", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 0x10 || ((1 << value) & 0x11116) == 0)
  {
    return 0;
  }
  v7[5] = value;
  if (!CGPDFDictionaryGetInteger(v9, "BitsPerFlag", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 8 || ((1 << value) & 0x114) == 0)
  {
    return 0;
  }
  v7[6] = value;
  v7[12] = 0;
  if (!CGPDFDictionaryGetObject(v9, "Function", &v15)
    || (uint64_t result = (uint64_t)CGPDFShadingCreateShadingFunction((uint64_t)v15, 1uLL), (v7[12] = result) != 0))
  {
    if (a1) {
      CFStringRef v10 = *(void **)(a1 + 40);
    }
    else {
      CFStringRef v10 = 0;
    }
    if (v7[12] && CGColorSpaceGetType(v10) == 7)
    {
      return 0;
    }
    if (v10)
    {
      CFRetain(v10);
      v7[3] = v10;
      if (v7[12]) {
        uint64_t v11 = 2;
      }
      else {
        uint64_t v11 = 2 * *(void *)(v10[3] + 48);
      }
    }
    else
    {
      v7[3] = 0;
      uint64_t v11 = 2 * (v7[12] != 0);
    }
    CGDataProviderRef v12 = malloc_type_malloc(8 * (v11 + 4), 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    if (!v12) {
      return 0;
    }
    if (!CGPDFDictionaryGetNumbers(v9, "Decode", (uint64_t)v12, (CGPDFArray *)(v11 + 4)))
    {
      free(v12);
      return 0;
    }
    v7[7] = *v12;
    v7[9] = v12[1];
    v7[8] = v12[2];
    v7[10] = v12[3];
    memmove(v12, v12 + 4, 8 * v11);
    v7[11] = v12;
    if (a1) {
      unint64_t v13 = *(CGPDFStream **)(a1 + 32);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t result = (uint64_t)CGPDFStreamCopyData(v13, &format);
    v7[13] = result;
    if (result)
    {
      if (format == CGPDFDataFormatRaw) {
        return 1;
      }
      pdf_error("invalid shading data format.");
      return 0;
    }
  }
  return result;
}

void type6_release_info(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t type6_create_shading(CGRect *a1, const void *a2)
{
  uint64_t v3 = &CGRectNull;
  p_CGFloat height = &CGRectNull.size.height;
  p_CGFloat y = &CGRectNull.origin.y;
  p_CGSize size = &CGRectNull.size;
  if (a1)
  {
    p_CGSize size = &a1[2].size;
    p_CGFloat y = &a1[2].origin.y;
    uint64_t v3 = a1 + 2;
    p_CGFloat height = &a1[2].size.height;
  }
  double v7 = *p_height;
  double x = v3->origin.x;
  double v9 = *p_y;
  double width = p_size->width;
  v21[0] = *(void *)&v3->origin.x;
  *(double *)&v21[1] = v9;
  *(double *)&v21[2] = width;
  *(double *)&v21[3] = v7;
  if (a1)
  {
    CGFloat y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    CGFloat y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  BOOL v17 = x == -8.98846567e307;
  if (v9 != -8.98846567e307) {
    BOOL v17 = 0;
  }
  if (width != 1.79769313e308) {
    BOOL v17 = 0;
  }
  BOOL v18 = v7 == 1.79769313e308 && v17;
  if (a2)
  {
    CFRetain(a2);
    if (y == 0.0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (y == 0.0) {
      return result;
    }
  }
  if (v18) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = v21;
  }
  uint64_t result = CGShadingCreateEmpty(0, *(void **)&y, (uint64_t)Components, (uint64_t)v20, v12, v13, v14, v15);
  *(void *)(result + 80) = a2;
  *(_OWORD *)(result + 96) = type6_create_shading_type6_drawing_callbacks;
  *(void *)(result + 112) = off_1ED099370;
  return result;
}

void cg_shading_type6_release(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void cg_shading_type6_draw(uint64_t a1, CGContextRef c)
{
  unint64_t v2 = c;
  uint64_t v807 = *MEMORY[0x1E4F143B8];
  CGContextSetFillColorSpace(c, *(CGColorSpaceRef *)(a1 + 24));
  CGContextSetStrokeColorSpace(v2, *(CGColorSpaceRef *)(a1 + 24));
  if (!*(void *)(a1 + 96))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v672 = a1;
    uint64_t v5 = v4 ? *(void *)(*(void *)(v4 + 24) + 48) : 0;
    double v6 = (double *)malloc_type_malloc(32 * v5 + 32, 0x100004000313F17uLL);
    uint64_t v7 = a1;
    if (v6)
    {
      int v8 = v6;
      unsigned int v648 = &v727[v5];
      double v9 = (char *)&v704.f64[v5];
      uint64_t v10 = 8 * v5;
      int8x16_t v645 = v9 + 272;
      float32x4_t v646 = v9 + 232;
      unsigned int v644 = v9 + 312;
      unint64_t v651 = v5 + 1;
      size_t v640 = 8 * (v5 + 1);
      uint64_t v641 = v2;
      uint64_t size = 8 * v5 + 8;
      uint64_t v650 = v5;
      uint64_t v642 = 2 * v5;
      uint64_t v643 = 3 * v5;
      double v11 = 1.0;
      double v12 = 0.25;
      char v13 = 1;
      uint64_t v649 = v6;
      uint64_t v647 = 8 * v5;
      while (1)
      {
        char v673 = v13;
        uint64_t v14 = v7;
        BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v7 + 104));
        CFIndex Length = CFDataGetLength(*(CFDataRef *)(v14 + 104));
        if (!Length) {
          goto LABEL_737;
        }
        unint64_t v17 = 0;
        unsigned int v18 = 0;
        unint64_t v19 = &BytePtr[Length];
        uint64_t v671 = v19;
        do
        {
          unint64_t v20 = *(void *)(v672 + 48);
          if (*(_DWORD *)(v672 + 16) == 6)
          {
            if (v20 < 0x19)
            {
              LOBYTE(v26) = 0;
              if (!v20)
              {
LABEL_38:
                LOBYTE(v2++*(_DWORD *)(result + 8) = 0;
LABEL_39:
                unint64_t v33 = *(void *)(v672 + 32);
                unint64_t v32 = *(void *)(v672 + 40);
                double v34 = (double)(0xFFFFFFFF >> -(char)v33);
                char v35 = v28 | v26;
                double v36 = (double)(0xFFFFFFFF >> -(char)v32);
                if ((v35 & 3) != 0)
                {
                  uint64_t v37 = 0;
                  unint64_t v38 = 3 * (v35 & 3u);
                  do
                  {
                    *(_OWORD *)((char *)&x + v37) = *(_OWORD *)((char *)&x + 48 * (v35 & 3) + v37 + -192 * (v38 / 0xC));
                    v37 += 16;
                    ++v38;
                  }
                  while (v37 != 64);
                  double v39 = *(double *)(v672 + 56);
                  double v40 = *(double *)(v672 + 64);
                  double v41 = *(double *)(v672 + 72) - v39;
                  double v42 = *(double *)(v672 + 80) - v40;
                  char v43 = v33 - 24;
                  uint64_t v44 = 4;
                  while (1)
                  {
                    if (v33 < 0x19)
                    {
                      int v47 = 0;
                      unint64_t v48 = v33;
                      if (!v33) {
                        goto LABEL_59;
                      }
                    }
                    else
                    {
                      if (v17 > 0x17)
                      {
                        unint64_t v46 = v17;
                      }
                      else
                      {
                        do
                        {
                          v18 <<= 8;
                          if (BytePtr < v19)
                          {
                            int v45 = *BytePtr++;
                            v18 |= v45;
                          }
                          unint64_t v46 = v17 + 8;
                          _CF = v17 >= 0x10;
                          v17 += 8;
                        }
                        while (!_CF);
                      }
                      unint64_t v17 = v46 - 24;
                      int v47 = ((v18 >> (v46 - 24)) & 0xFFFFFF) << v43;
                      unint64_t v48 = v33 - 24;
                    }
                    while (v17 < v48)
                    {
                      v18 <<= 8;
                      if (BytePtr < v19)
                      {
                        int v49 = *BytePtr++;
                        v18 |= v49;
                      }
                      v17 += 8;
                    }
                    v17 -= v48;
                    LODWORD(v4++*(_DWORD *)(result + 8) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v48);
LABEL_59:
                    *(&x + 2 * v44) = v39 + v41 * (double)(v48 | v47) / v34;
                    if (v33 >= 0x19)
                    {
                      if (v17 > 0x17)
                      {
                        unint64_t v51 = v17;
                      }
                      else
                      {
                        do
                        {
                          v18 <<= 8;
                          if (BytePtr < v19)
                          {
                            int v50 = *BytePtr++;
                            v18 |= v50;
                          }
                          unint64_t v51 = v17 + 8;
                          _CF = v17 >= 0x10;
                          v17 += 8;
                        }
                        while (!_CF);
                      }
                      unint64_t v17 = v51 - 24;
                      int v52 = ((v18 >> (v51 - 24)) & 0xFFFFFF) << v43;
                      unint64_t v53 = v33 - 24;
LABEL_73:
                      while (v17 < v53)
                      {
                        v18 <<= 8;
                        if (BytePtr < v19)
                        {
                          int v54 = *BytePtr++;
                          v18 |= v54;
                        }
                        v17 += 8;
                      }
                      v17 -= v53;
                      LODWORD(v53) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v53);
                      goto LABEL_75;
                    }
                    int v52 = 0;
                    unint64_t v53 = v33;
                    if (v33) {
                      goto LABEL_73;
                    }
LABEL_75:
                    *(&x + 2 * v44++ + 1) = v40 + v42 * (double)(v53 | v52) / v34;
                    if (v44 == 12)
                    {
                      uint64_t v55 = 0;
                      char v56 = 1;
                      do
                      {
                        char v57 = v56;
                        if (v5)
                        {
                          uint64_t v58 = ((_BYTE)v55 + v35) & 3;
                          float64x2_t v59 = (void *)((char *)v8 + v10 * v55);
                          double v60 = (uint64_t *)((char *)v8 + v10 * v58);
                          uint64_t v61 = v5;
                          do
                          {
                            uint64_t v62 = *v60++;
                            *v59++ = v62;
                            --v61;
                          }
                          while (v61);
                        }
                        char v56 = 0;
                        uint64_t v55 = 1;
                      }
                      while ((v57 & 1) != 0);
                      char v63 = 0;
                      uint64_t v64 = 2;
                      while (1)
                      {
                        char v65 = v63;
                        if (v5) {
                          break;
                        }
LABEL_101:
                        char v63 = 1;
                        uint64_t v64 = 3;
                        if (v65) {
                          goto LABEL_347;
                        }
                      }
                      uint64_t v66 = 0;
                      uint64_t v67 = *(void *)(v672 + 88);
                      uint64_t v68 = v64 * v5;
                      while (2)
                      {
                        if (v32 < 0x19)
                        {
                          int v71 = 0;
                          unint64_t v72 = v32;
                          if (v32) {
                            goto LABEL_95;
                          }
                        }
                        else
                        {
                          if (v17 > 0x17)
                          {
                            unint64_t v70 = v17;
                          }
                          else
                          {
                            do
                            {
                              v18 <<= 8;
                              if (BytePtr < v19)
                              {
                                int v69 = *BytePtr++;
                                v18 |= v69;
                              }
                              unint64_t v70 = v17 + 8;
                              _CF = v17 >= 0x10;
                              v17 += 8;
                            }
                            while (!_CF);
                          }
                          unint64_t v17 = v70 - 24;
                          int v71 = ((v18 >> (v70 - 24)) & 0xFFFFFF) << (v32 - 24);
                          unint64_t v72 = v32 - 24;
LABEL_95:
                          while (v17 < v72)
                          {
                            v18 <<= 8;
                            if (BytePtr < v19)
                            {
                              int v73 = *BytePtr++;
                              v18 |= v73;
                            }
                            v17 += 8;
                          }
                          v17 -= v72;
                          LODWORD(v72) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v72);
                        }
                        v8[v66 + v68] = *(double *)(v67 + 16 * v66)
                                      + (*(double *)(v67 + 16 * v66 + 8) - *(double *)(v67 + 16 * v66))
                                      * (double)(v72 | v71)
                                      / v36;
                        if (++v66 == v5) {
                          goto LABEL_101;
                        }
                        continue;
                      }
                    }
                  }
                }
                uint64_t v74 = 0;
                double v75 = *(double *)(v672 + 56);
                double v76 = *(double *)(v672 + 64);
                double v77 = *(double *)(v672 + 72) - v75;
                double v78 = *(double *)(v672 + 80) - v76;
                char v79 = v33 - 24;
                while (1)
                {
                  if (v33 < 0x19)
                  {
                    int v82 = 0;
                    unint64_t v83 = v33;
                    if (!v33) {
                      goto LABEL_120;
                    }
                  }
                  else
                  {
                    if (v17 > 0x17)
                    {
                      unint64_t v81 = v17;
                    }
                    else
                    {
                      do
                      {
                        v18 <<= 8;
                        if (BytePtr < v19)
                        {
                          int v80 = *BytePtr++;
                          v18 |= v80;
                        }
                        unint64_t v81 = v17 + 8;
                        _CF = v17 >= 0x10;
                        v17 += 8;
                      }
                      while (!_CF);
                    }
                    unint64_t v17 = v81 - 24;
                    int v82 = ((v18 >> (v81 - 24)) & 0xFFFFFF) << v79;
                    unint64_t v83 = v33 - 24;
                  }
                  while (v17 < v83)
                  {
                    v18 <<= 8;
                    if (BytePtr < v19)
                    {
                      int v84 = *BytePtr++;
                      v18 |= v84;
                    }
                    v17 += 8;
                  }
                  v17 -= v83;
                  LODWORD(v83) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v83);
LABEL_120:
                  *(&x + 2 * v74) = v75 + v77 * (double)(v83 | v82) / v34;
                  if (v33 >= 0x19)
                  {
                    if (v17 > 0x17)
                    {
                      unint64_t v86 = v17;
                    }
                    else
                    {
                      do
                      {
                        v18 <<= 8;
                        if (BytePtr < v19)
                        {
                          int v85 = *BytePtr++;
                          v18 |= v85;
                        }
                        unint64_t v86 = v17 + 8;
                        _CF = v17 >= 0x10;
                        v17 += 8;
                      }
                      while (!_CF);
                    }
                    unint64_t v17 = v86 - 24;
                    int v87 = ((v18 >> (v86 - 24)) & 0xFFFFFF) << v79;
                    unint64_t v88 = v33 - 24;
LABEL_131:
                    while (v17 < v88)
                    {
                      v18 <<= 8;
                      if (BytePtr < v19)
                      {
                        int v89 = *BytePtr++;
                        v18 |= v89;
                      }
                      v17 += 8;
                    }
                    v17 -= v88;
                    LODWORD(v8++*(_DWORD *)(result + 8) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v88);
                    goto LABEL_136;
                  }
                  int v87 = 0;
                  unint64_t v88 = v33;
                  if (v33) {
                    goto LABEL_131;
                  }
LABEL_136:
                  *(&x + 2 * v74++ + 1) = v76 + v78 * (double)(v88 | v87) / v34;
                  if (v74 == 12)
                  {
                    uint64_t v90 = 0;
                    while (!v5)
                    {
LABEL_157:
                      if (++v90 == 4) {
                        goto LABEL_347;
                      }
                    }
                    uint64_t v91 = 0;
                    uint64_t v92 = *(void *)(v672 + 88);
                    while (2)
                    {
                      if (v32 < 0x19)
                      {
                        int v95 = 0;
                        unint64_t v96 = v32;
                        if (v32) {
                          goto LABEL_151;
                        }
                      }
                      else
                      {
                        if (v17 > 0x17)
                        {
                          unint64_t v94 = v17;
                        }
                        else
                        {
                          do
                          {
                            v18 <<= 8;
                            if (BytePtr < v19)
                            {
                              int v93 = *BytePtr++;
                              v18 |= v93;
                            }
                            unint64_t v94 = v17 + 8;
                            _CF = v17 >= 0x10;
                            v17 += 8;
                          }
                          while (!_CF);
                        }
                        unint64_t v17 = v94 - 24;
                        int v95 = ((v18 >> (v94 - 24)) & 0xFFFFFF) << (v32 - 24);
                        unint64_t v96 = v32 - 24;
LABEL_151:
                        while (v17 < v96)
                        {
                          v18 <<= 8;
                          if (BytePtr < v19)
                          {
                            int v97 = *BytePtr++;
                            v18 |= v97;
                          }
                          v17 += 8;
                        }
                        v17 -= v96;
                        LODWORD(v96) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v96);
                      }
                      v8[v91 + v90 * v5] = *(double *)(v92 + 16 * v91)
                                         + (*(double *)(v92 + 16 * v91 + 8) - *(double *)(v92 + 16 * v91))
                                         * (double)(v96 | v95)
                                         / v36;
                      if (++v91 == v5) {
                        goto LABEL_157;
                      }
                      continue;
                    }
                  }
                }
              }
            }
            else
            {
              if (v17 > 0x17)
              {
                unint64_t v22 = v17;
              }
              else
              {
                do
                {
                  v18 <<= 8;
                  if (BytePtr < v19)
                  {
                    int v21 = *BytePtr++;
                    v18 |= v21;
                  }
                  unint64_t v22 = v17 + 8;
                  _CF = v17 >= 0x10;
                  v17 += 8;
                }
                while (!_CF);
              }
              v20 -= 24;
              unint64_t v17 = v22 - 24;
              int v26 = ((v18 >> (v22 - 24)) & 0xFFFFFF) << v20;
              if (!v20) {
                goto LABEL_38;
              }
            }
            while (v17 < v20)
            {
              v18 <<= 8;
              if (BytePtr < v19)
              {
                int v27 = *BytePtr++;
                v18 |= v27;
              }
              v17 += 8;
            }
            v17 -= v20;
            unsigned int v28 = (v18 >> v17) & (0xFFFFFFFF >> -(char)v20);
            goto LABEL_39;
          }
          if (v20 < 0x19)
          {
            LOBYTE(v29) = 0;
            if (v20) {
              goto LABEL_31;
            }
          }
          else
          {
            if (v17 > 0x17)
            {
              unint64_t v25 = v17;
            }
            else
            {
              do
              {
                v18 <<= 8;
                if (BytePtr < v19)
                {
                  int v24 = *BytePtr++;
                  v18 |= v24;
                }
                unint64_t v25 = v17 + 8;
                _CF = v17 >= 0x10;
                v17 += 8;
              }
              while (!_CF);
            }
            v20 -= 24;
            unint64_t v17 = v25 - 24;
            int v29 = ((v18 >> (v25 - 24)) & 0xFFFFFF) << v20;
            if (v20)
            {
LABEL_31:
              while (v17 < v20)
              {
                v18 <<= 8;
                if (BytePtr < v19)
                {
                  int v30 = *BytePtr++;
                  v18 |= v30;
                }
                v17 += 8;
              }
              v17 -= v20;
              unsigned int v31 = (v18 >> v17) & (0xFFFFFFFF >> -(char)v20);
              goto LABEL_162;
            }
          }
          LOBYTE(v31) = 0;
LABEL_162:
          unint64_t v99 = *(void *)(v672 + 32);
          unint64_t v98 = *(void *)(v672 + 40);
          double v100 = (double)(0xFFFFFFFF >> -(char)v99);
          char v101 = v31 | v29;
          double v102 = (double)(0xFFFFFFFF >> -(char)v98);
          uint64_t v103 = 0;
          if ((v101 & 3) != 0)
          {
            unint64_t v104 = 3 * (v101 & 3u);
            do
            {
              *(_OWORD *)((char *)&x + v103) = *(_OWORD *)((char *)&x + 48 * (v101 & 3) + v103 + -192 * (v104 / 0xC));
              v103 += 16;
              ++v104;
            }
            while (v103 != 64);
            double v105 = *(double *)(v672 + 56);
            double v106 = *(double *)(v672 + 64);
            double v107 = *(double *)(v672 + 72) - v105;
            double v108 = *(double *)(v672 + 80) - v106;
            char v109 = v99 - 24;
            uint64_t v110 = 4;
            while (1)
            {
              if (v99 < 0x19)
              {
                int v113 = 0;
                unint64_t v114 = v99;
                if (!v99) {
                  goto LABEL_182;
                }
              }
              else
              {
                if (v17 > 0x17)
                {
                  unint64_t v112 = v17;
                }
                else
                {
                  do
                  {
                    v18 <<= 8;
                    if (BytePtr < v19)
                    {
                      int v111 = *BytePtr++;
                      v18 |= v111;
                    }
                    unint64_t v112 = v17 + 8;
                    _CF = v17 >= 0x10;
                    v17 += 8;
                  }
                  while (!_CF);
                }
                unint64_t v17 = v112 - 24;
                int v113 = ((v18 >> (v112 - 24)) & 0xFFFFFF) << v109;
                unint64_t v114 = v99 - 24;
              }
              while (v17 < v114)
              {
                v18 <<= 8;
                if (BytePtr < v19)
                {
                  int v115 = *BytePtr++;
                  v18 |= v115;
                }
                v17 += 8;
              }
              v17 -= v114;
              LODWORD(v114) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v114);
LABEL_182:
              *(&x + 2 * v110) = v105 + v107 * (double)(v114 | v113) / v100;
              if (v99 >= 0x19)
              {
                if (v17 > 0x17)
                {
                  unint64_t v117 = v17;
                }
                else
                {
                  do
                  {
                    v18 <<= 8;
                    if (BytePtr < v19)
                    {
                      int v116 = *BytePtr++;
                      v18 |= v116;
                    }
                    unint64_t v117 = v17 + 8;
                    _CF = v17 >= 0x10;
                    v17 += 8;
                  }
                  while (!_CF);
                }
                unint64_t v17 = v117 - 24;
                int v118 = ((v18 >> (v117 - 24)) & 0xFFFFFF) << v109;
                unint64_t v119 = v99 - 24;
LABEL_196:
                while (v17 < v119)
                {
                  v18 <<= 8;
                  if (BytePtr < v19)
                  {
                    int v120 = *BytePtr++;
                    v18 |= v120;
                  }
                  v17 += 8;
                }
                v17 -= v119;
                LODWORD(v119) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v119);
                goto LABEL_198;
              }
              int v118 = 0;
              unint64_t v119 = v99;
              if (v99) {
                goto LABEL_196;
              }
LABEL_198:
              *(&x + 2 * v110++ + 1) = v106 + v108 * (double)(v119 | v118) / v100;
              if (v110 == 12)
              {
                while (1)
                {
                  if (v99 < 0x19)
                  {
                    unint64_t v123 = v99;
                    if (!v99) {
                      goto LABEL_215;
                    }
                  }
                  else
                  {
                    if (v17 > 0x17)
                    {
                      unint64_t v122 = v17;
                    }
                    else
                    {
                      do
                      {
                        v18 <<= 8;
                        if (BytePtr < v19)
                        {
                          int v121 = *BytePtr++;
                          v18 |= v121;
                        }
                        unint64_t v122 = v17 + 8;
                        _CF = v17 >= 0x10;
                        v17 += 8;
                      }
                      while (!_CF);
                    }
                    unint64_t v17 = v122 - 24;
                    unint64_t v123 = v99 - 24;
                  }
                  while (v17 < v123)
                  {
                    v18 <<= 8;
                    if (BytePtr < v19)
                    {
                      int v124 = *BytePtr++;
                      v18 |= v124;
                    }
                    v17 += 8;
                  }
                  v17 -= v123;
LABEL_215:
                  if (v99 >= 0x19)
                  {
                    if (v17 > 0x17)
                    {
                      unint64_t v126 = v17;
                    }
                    else
                    {
                      do
                      {
                        v18 <<= 8;
                        if (BytePtr < v19)
                        {
                          int v125 = *BytePtr++;
                          v18 |= v125;
                        }
                        unint64_t v126 = v17 + 8;
                        _CF = v17 >= 0x10;
                        v17 += 8;
                      }
                      while (!_CF);
                    }
                    unint64_t v17 = v126 - 24;
                    unint64_t v127 = v99 - 24;
LABEL_229:
                    while (v17 < v127)
                    {
                      v18 <<= 8;
                      if (BytePtr < v19)
                      {
                        int v128 = *BytePtr++;
                        v18 |= v128;
                      }
                      v17 += 8;
                    }
                    v17 -= v127;
                    goto LABEL_231;
                  }
                  unint64_t v127 = v99;
                  if (v99) {
                    goto LABEL_229;
                  }
LABEL_231:
                  if (++v110 == 16)
                  {
                    uint64_t v129 = 0;
                    char v130 = 1;
                    do
                    {
                      char v131 = v130;
                      if (v5)
                      {
                        uint64_t v132 = ((_BYTE)v129 + v101) & 3;
                        uint64_t v133 = (void *)((char *)v8 + v10 * v129);
                        CGFloat v134 = (uint64_t *)((char *)v8 + v10 * v132);
                        uint64_t v135 = v5;
                        do
                        {
                          uint64_t v136 = *v134++;
                          *v133++ = v136;
                          --v135;
                        }
                        while (v135);
                      }
                      char v130 = 0;
                      uint64_t v129 = 1;
                    }
                    while ((v131 & 1) != 0);
                    char v137 = 0;
                    uint64_t v138 = 2;
                    while (1)
                    {
                      char v139 = v137;
                      if (v5) {
                        break;
                      }
LABEL_257:
                      char v137 = 1;
                      uint64_t v138 = 3;
                      if (v139) {
                        goto LABEL_347;
                      }
                    }
                    uint64_t v140 = 0;
                    uint64_t v141 = *(void *)(v672 + 88);
                    uint64_t v142 = v138 * v5;
                    while (2)
                    {
                      if (v98 < 0x19)
                      {
                        int v145 = 0;
                        unint64_t v146 = v98;
                        if (v98) {
                          goto LABEL_251;
                        }
                      }
                      else
                      {
                        if (v17 > 0x17)
                        {
                          unint64_t v144 = v17;
                        }
                        else
                        {
                          do
                          {
                            v18 <<= 8;
                            if (BytePtr < v19)
                            {
                              int v143 = *BytePtr++;
                              v18 |= v143;
                            }
                            unint64_t v144 = v17 + 8;
                            _CF = v17 >= 0x10;
                            v17 += 8;
                          }
                          while (!_CF);
                        }
                        unint64_t v17 = v144 - 24;
                        int v145 = ((v18 >> (v144 - 24)) & 0xFFFFFF) << (v98 - 24);
                        unint64_t v146 = v98 - 24;
LABEL_251:
                        while (v17 < v146)
                        {
                          v18 <<= 8;
                          if (BytePtr < v19)
                          {
                            int v147 = *BytePtr++;
                            v18 |= v147;
                          }
                          v17 += 8;
                        }
                        v17 -= v146;
                        LODWORD(v146) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v146);
                      }
                      v8[v140 + v142] = *(double *)(v141 + 16 * v140)
                                      + (*(double *)(v141 + 16 * v140 + 8) - *(double *)(v141 + 16 * v140))
                                      * (double)(v146 | v145)
                                      / v102;
                      if (++v140 == v5) {
                        goto LABEL_257;
                      }
                      continue;
                    }
                  }
                }
              }
            }
          }
          double v148 = *(double *)(v672 + 56);
          double v149 = *(double *)(v672 + 64);
          double v150 = *(double *)(v672 + 72) - v148;
          double v151 = *(double *)(v672 + 80) - v149;
          char v152 = v99 - 24;
          do
          {
            if (v99 < 0x19)
            {
              int v155 = 0;
              unint64_t v156 = v99;
              if (!v99) {
                goto LABEL_276;
              }
            }
            else
            {
              if (v17 > 0x17)
              {
                unint64_t v154 = v17;
              }
              else
              {
                do
                {
                  v18 <<= 8;
                  if (BytePtr < v19)
                  {
                    int v153 = *BytePtr++;
                    v18 |= v153;
                  }
                  unint64_t v154 = v17 + 8;
                  _CF = v17 >= 0x10;
                  v17 += 8;
                }
                while (!_CF);
              }
              unint64_t v17 = v154 - 24;
              int v155 = ((v18 >> (v154 - 24)) & 0xFFFFFF) << v152;
              unint64_t v156 = v99 - 24;
            }
            while (v17 < v156)
            {
              v18 <<= 8;
              if (BytePtr < v19)
              {
                int v157 = *BytePtr++;
                v18 |= v157;
              }
              v17 += 8;
            }
            v17 -= v156;
            LODWORD(v156) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v156);
LABEL_276:
            *(&x + 2 * v103) = v148 + v150 * (double)(v156 | v155) / v100;
            if (v99 < 0x19)
            {
              int v160 = 0;
              unint64_t v161 = v99;
              if (!v99) {
                goto LABEL_292;
              }
            }
            else
            {
              if (v17 > 0x17)
              {
                unint64_t v159 = v17;
              }
              else
              {
                do
                {
                  v18 <<= 8;
                  if (BytePtr < v19)
                  {
                    int v158 = *BytePtr++;
                    v18 |= v158;
                  }
                  unint64_t v159 = v17 + 8;
                  _CF = v17 >= 0x10;
                  v17 += 8;
                }
                while (!_CF);
              }
              unint64_t v17 = v159 - 24;
              int v160 = ((v18 >> (v159 - 24)) & 0xFFFFFF) << v152;
              unint64_t v161 = v99 - 24;
            }
            while (v17 < v161)
            {
              v18 <<= 8;
              if (BytePtr < v19)
              {
                int v162 = *BytePtr++;
                v18 |= v162;
              }
              v17 += 8;
            }
            v17 -= v161;
            LODWORD(v161) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v161);
LABEL_292:
            *(&x + 2 * v103++ + 1) = v149 + v151 * (double)(v161 | v160) / v100;
          }
          while (v103 != 12);
          do
          {
            if (v99 < 0x19)
            {
              unint64_t v165 = v99;
              if (!v99) {
                goto LABEL_309;
              }
            }
            else
            {
              if (v17 > 0x17)
              {
                unint64_t v164 = v17;
              }
              else
              {
                do
                {
                  v18 <<= 8;
                  if (BytePtr < v19)
                  {
                    int v163 = *BytePtr++;
                    v18 |= v163;
                  }
                  unint64_t v164 = v17 + 8;
                  _CF = v17 >= 0x10;
                  v17 += 8;
                }
                while (!_CF);
              }
              unint64_t v17 = v164 - 24;
              unint64_t v165 = v99 - 24;
            }
            while (v17 < v165)
            {
              v18 <<= 8;
              if (BytePtr < v19)
              {
                int v166 = *BytePtr++;
                v18 |= v166;
              }
              v17 += 8;
            }
            v17 -= v165;
LABEL_309:
            if (v99 < 0x19)
            {
              unint64_t v169 = v99;
              if (!v99) {
                goto LABEL_325;
              }
            }
            else
            {
              if (v17 > 0x17)
              {
                unint64_t v168 = v17;
              }
              else
              {
                do
                {
                  v18 <<= 8;
                  if (BytePtr < v19)
                  {
                    int v167 = *BytePtr++;
                    v18 |= v167;
                  }
                  unint64_t v168 = v17 + 8;
                  _CF = v17 >= 0x10;
                  v17 += 8;
                }
                while (!_CF);
              }
              unint64_t v17 = v168 - 24;
              unint64_t v169 = v99 - 24;
            }
            while (v17 < v169)
            {
              v18 <<= 8;
              if (BytePtr < v19)
              {
                int v170 = *BytePtr++;
                v18 |= v170;
              }
              v17 += 8;
            }
            v17 -= v169;
LABEL_325:
            ++v103;
          }
          while (v103 != 16);
          for (uint64_t i = 0; i != 4; ++i)
          {
            if (v5)
            {
              uint64_t v172 = 0;
              uint64_t v173 = *(void *)(v672 + 88);
              while (v98 < 0x19)
              {
                int v176 = 0;
                unint64_t v177 = v98;
                if (v98) {
                  goto LABEL_340;
                }
LABEL_345:
                v8[v172 + i * v5] = *(double *)(v173 + 16 * v172)
                                  + (*(double *)(v173 + 16 * v172 + 8) - *(double *)(v173 + 16 * v172))
                                  * (double)(v177 | v176)
                                  / v102;
                if (++v172 == v5) {
                  goto LABEL_346;
                }
              }
              if (v17 > 0x17)
              {
                unint64_t v175 = v17;
              }
              else
              {
                do
                {
                  v18 <<= 8;
                  if (BytePtr < v19)
                  {
                    int v174 = *BytePtr++;
                    v18 |= v174;
                  }
                  unint64_t v175 = v17 + 8;
                  _CF = v17 >= 0x10;
                  v17 += 8;
                }
                while (!_CF);
              }
              unint64_t v17 = v175 - 24;
              int v176 = ((v18 >> (v175 - 24)) & 0xFFFFFF) << (v98 - 24);
              unint64_t v177 = v98 - 24;
LABEL_340:
              while (v17 < v177)
              {
                v18 <<= 8;
                if (BytePtr < v19)
                {
                  int v178 = *BytePtr++;
                  v18 |= v178;
                }
                v17 += 8;
              }
              v17 -= v177;
              LODWORD(v177) = (v18 >> v17) & (0xFFFFFFFF >> -(char)v177);
              goto LABEL_345;
            }
LABEL_346:
            ;
          }
LABEL_347:
          uint64_t v682 = BytePtr;
          if ((v673 & 1) == 0)
          {
            uint64_t v206 = 0;
            double v207 = x;
            double v208 = y;
            double v209 = x;
            double v210 = y;
            do
            {
              double v212 = *(CGFloat *)((char *)&cp1x + v206);
              double v211 = *(CGFloat *)((char *)&cp1y + v206);
              if (v212 > v209) {
                double v213 = *(CGFloat *)((char *)&cp1x + v206);
              }
              else {
                double v213 = v209;
              }
              if (v212 < v207) {
                double v207 = *(CGFloat *)((char *)&cp1x + v206);
              }
              else {
                double v209 = v213;
              }
              if (v211 >= v208)
              {
                if (v211 > v210) {
                  double v210 = *(CGFloat *)((char *)&cp1y + v206);
                }
              }
              else
              {
                double v208 = *(CGFloat *)((char *)&cp1y + v206);
              }
              v206 += 16;
            }
            while (v206 != 176);
            ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox(v2);
            CGRect v809 = CGRectIntegral(ClipBoundingBox);
            CGFloat v214 = v809.origin.x;
            double v215 = v809.origin.y;
            CGFloat v216 = v809.size.width;
            CGFloat height = v809.size.height;
            CGRect v743 = v809;
            if (v809.size.height < 0.0 || v809.size.width < 0.0)
            {
              CGFloat rect = v809.origin.y;
              CGRect v810 = CGRectStandardize(v809);
              CGFloat v219 = rect;
              if (v207 <= v810.origin.x + v810.size.width)
              {
                CGFloat v220 = v214;
                CGFloat v221 = v216;
                CGFloat v222 = height;
                double v223 = COERCE_DOUBLE(CGRectStandardize(*(CGRect *)(&v219 - 1)));
                CGFloat v224 = rect;
                if (v209 >= v223)
                {
                  CGFloat v225 = v214;
                  CGFloat v226 = v216;
                  CGFloat v227 = height;
                  CGRect v811 = CGRectStandardize(*(CGRect *)(&v224 - 1));
                  if (v208 <= v811.origin.y + v811.size.height)
                  {
                    v812.origin.CGFloat x = v214;
                    v812.origin.CGFloat y = rect;
                    v812.size.uint64_t width = v216;
                    v812.size.CGFloat height = height;
                    CGRect v813 = CGRectStandardize(v812);
                    double v215 = v813.origin.y;
                    goto LABEL_397;
                  }
                }
              }
              goto LABEL_723;
            }
            double v228 = v809.origin.y + v809.size.height;
            if (v207 > v809.origin.x + v809.size.width || v209 < v809.origin.x || v208 > v228) {
              goto LABEL_723;
            }
LABEL_397:
            if (v210 < v215) {
              goto LABEL_723;
            }
            uint64_t v742 = 0;
            memset(v727, 0, sizeof(v727));
            float64x2_t v728 = 0u;
            float64x2_t v729 = 0u;
            float64x2_t v730 = 0u;
            float64x2_t v731 = 0u;
            float64x2_t v732 = 0u;
            float64x2_t v733 = 0u;
            float64x2_t v734 = 0u;
            float64x2_t v735 = 0u;
            float64x2_t v736 = 0u;
            float64x2_t v737 = 0u;
            CGContextGetCTM(&__src, v2);
            v704.f64[0] = __src.tx + __src.c * y + __src.a * x;
            v704.f64[1] = __src.ty + __src.d * y + __src.b * x;
            double v705 = __src.tx + __src.c * cp1y + __src.a * cp1x;
            double v706 = __src.ty + __src.d * cp1y + __src.b * cp1x;
            double v707 = __src.tx + __src.c * cp2y + __src.a * cp2x;
            double v708 = __src.ty + __src.d * cp2y + __src.b * cp2x;
            double v709 = __src.tx + __src.c * v752 + __src.a * v751;
            double v710 = __src.ty + __src.d * v752 + __src.b * v751;
            double v711 = __src.tx + __src.c * v754 + __src.a * v753;
            double v712 = __src.ty + __src.d * v754 + __src.b * v753;
            double v713 = __src.tx + __src.c * v756 + __src.a * v755;
            double v714 = __src.ty + __src.d * v756 + __src.b * v755;
            double v715 = __src.tx + __src.c * v758 + __src.a * v757;
            double v716 = __src.ty + __src.d * v758 + __src.b * v757;
            double v717 = __src.tx + __src.c * v760 + __src.a * v759;
            double v718 = __src.ty + __src.d * v760 + __src.b * v759;
            double v719 = __src.tx + __src.c * v762 + __src.a * v761;
            double v720 = __src.ty + __src.d * v762 + __src.b * v761;
            double v721 = __src.tx + __src.c * v764 + __src.a * v763;
            double v722 = __src.ty + __src.d * v764 + __src.b * v763;
            double v723 = __src.tx + __src.c * v766 + __src.a * v765;
            double v724 = __src.ty + __src.d * v766 + __src.b * v765;
            double v725 = __src.tx + __src.c * v768 + __src.a * v767;
            double v726 = __src.ty + __src.d * v768 + __src.b * v767;
            if (v651 > 5)
            {
LABEL_723:
              double v11 = 1.0;
              double v12 = 0.25;
              goto LABEL_724;
            }
            if (v5)
            {
              float v231 = v727;
              uint64_t v232 = v5;
              do
              {
                *float v231 = *(void *)v8;
                v231[5] = *(void *)&v8[v5];
                v231[10] = *(void *)&v8[v642];
                v231[15] = *(void *)&v8[v643];
                ++v8;
                ++v231;
                --v232;
              }
              while (v232);
            }
            *unsigned int v648 = 0x3FF0000000000000;
            *float32x4_t v646 = 0x3FF0000000000000;
            *int8x16_t v645 = 0x3FF0000000000000;
            *unsigned int v644 = 0x3FF0000000000000;
            v729.f64[0] = (v725 - v704.f64[0]) * 3.0;
            v729.f64[1] = (v726 - v704.f64[1]) * 3.0;
            v730.f64[0] = (v705 - v704.f64[0]) * 3.0;
            v730.f64[1] = (v706 - v704.f64[1]) * 3.0;
            v731.f64[0] = (v711 - v725 + v719 - v705) * 3.0 + v704.f64[0] * 5.0 + (v709 + v721) * -2.0 - v715;
            v731.f64[1] = (v712 - v726 + v720 - v706) * 3.0 + v704.f64[1] * 5.0 + (v710 + v722) * -2.0 - v716;
            v732.f64[0] = (v704.f64[0] + v723 + v725 * -2.0) * 3.0;
            v732.f64[1] = (v704.f64[1] + v724 + v726 * -2.0) * 3.0;
            v733.f64[0] = (v704.f64[0] + v707 + v705 * -2.0) * 3.0;
            v733.f64[1] = (v704.f64[1] + v708 + v706 * -2.0) * 3.0;
            v734.f64[0] = (v709 + v713 - v723 - v704.f64[0] + (v725 - v711) * 2.0) * 3.0;
            v734.f64[1] = (v710 + v714 - v724 - v704.f64[1] + (v726 - v712) * 2.0) * 3.0;
            v735.f64[0] = (v721 + v717 - v707 - v704.f64[0] + (v705 - v719) * 2.0) * 3.0;
            v735.f64[1] = (v722 + v718 - v708 - v704.f64[1] + (v706 - v720) * 2.0) * 3.0;
            v736.f64[0] = v721 - v704.f64[0] + (v725 - v723) * 3.0;
            v736.f64[1] = v722 - v704.f64[1] + (v726 - v724) * 3.0;
            unint64_t v741 = v651;
            float64x2_t v728 = v704;
            v737.f64[0] = v709 - v704.f64[0] + (v705 - v707) * 3.0;
            v737.f64[1] = v710 - v704.f64[1] + (v706 - v708) * 3.0;
            v738.f64[0] = v704.f64[0] + v715 - v709 - v721 + (v711 + v723 - v725 - v713) * 3.0;
            v738.f64[1] = v704.f64[1] + v716 - v710 - v722 + (v712 + v724 - v726 - v714) * 3.0;
            v739.f64[0] = v704.f64[0] + v715 - v721 - v709 + (v719 + v707 - v705 - v717) * 3.0;
            v739.f64[1] = v704.f64[1] + v716 - v722 - v710 + (v720 + v708 - v706 - v718) * 3.0;
            unint64_t v233 = v651;
            if (v651)
            {
              double v234 = (double *)&v704;
              do
              {
                double v235 = v234[24];
                v234[68] = v235;
                double v236 = v234[39];
                v234[73] = v236 - v235;
                double v237 = v234[29];
                v234[78] = v237 - v235;
                v234[83] = v235 + v234[34] - v237 - v236;
                ++v234;
                --v233;
              }
              while (v233);
            }
            float v238 = (float64x2_t *)malloc_type_malloc(0x30uLL, 0x1000040451B5BE8uLL);
            __asm { FMOV            V0.2D, #0.5 }
            float64x2_t v652 = _Q0;
            uint64_t v668 = v238;
            if (v238)
            {
              uint64_t v666 = (char *)malloc_type_malloc(0x78uLL, 0xABFEB9F6uLL);
              if (v666)
              {
                unsigned int v241 = v741;
                CGPoint v242 = (unsigned int *)malloc_type_calloc(1uLL, 0x50uLL, 0x1020040AF517F5CuLL);
                if (v242)
                {
                  CGRect v243 = v242;
                  *((void *)v242 + 1) = 0;
                  *((void *)v242 + 3) = 0;
                  *((void *)v242 + 5) = 0;
                  *CGPoint v242 = v241;
                  CGRect v244 = malloc_type_malloc(0x1098uLL, 0x1000040FF89C88EuLL);
                  *((void *)v243 + 1) = v244;
                  if (v244)
                  {
                    uint64_t v245 = -4248;
                    do
                    {
                      uint64_t v246 = *((void *)v243 + 1) + v245;
                      *(void *)(v246 + 4312) = 0;
                      *(_OWORD *)(v246 + 4280) = 0uLL;
                      *(_OWORD *)(v246 + 4296) = 0uLL;
                      *(_OWORD *)(v246 + 424++*(_DWORD *)(result + 8) = 0uLL;
                      *(_OWORD *)(v246 + 4264) = 0uLL;
                      v245 += 72;
                    }
                    while (v245);
                    *((void *)v243 + 2) = 0x3B00000000;
                    CGRect v247 = malloc_type_malloc(0x528uLL, 0x1000040A86A77D5uLL);
                    *((void *)v243 + 3) = v247;
                    if (v247)
                    {
                      for (uint64_t j = 0; j != 1320; j += 20)
                      {
                        uint64_t v249 = *((void *)v243 + 3) + j;
                        *(_DWORD *)(v249 + 16) = -1;
                        *(void *)uint64_t v249 = -1;
                        *(void *)(v249 + ++*(_DWORD *)(result + 8) = -1;
                      }
                      *((void *)v243 + 4) = 0x4200000000;
                      char v250 = malloc_type_malloc(0xAE0uLL, 0x1000040EED21634uLL);
                      *((void *)v243 + 5) = v250;
                      if (v250)
                      {
                        uint64_t v252 = 0;
                        *(void *)&long long v253 = -1;
                        *((void *)&v253 + 1) = -1;
                        do
                        {
                          uint64_t v254 = *((void *)v243 + 5) + v252;
                          *(_OWORD *)uint64_t v254 = v253;
                          *(_OWORD *)(v254 + 16) = v253;
                          *(void *)(v254 + 32) = -1;
                          *(void *)(v254 + 40) = 1;
                          v252 += 48;
                        }
                        while (v252 != 2784);
                        uint64_t v255 = 0;
                        rectCGFloat a = v243;
                        *((void *)v243 + 7) = -1;
                        *((void *)v243 + ++*(_DWORD *)(result + 8) = -1;
                        float32x4_t v256 = v243 + 14;
                        *(v256 - 10) = 9;
                        *(v256 - 6) = 16;
                        float v674 = v256;
                        *((void *)v256 - 1) = 0x3A00000008;
                        *(void *)&long long v251 = 0;
                        while (1)
                        {
                          uint64_t v676 = v255;
                          float64x2_t v258 = v734;
                          float64x2_t v257 = v735;
                          float64x2_t v260 = v738;
                          float64x2_t v259 = v739;
                          float64x2_t v262 = v728;
                          float64x2_t v261 = v729;
                          float64x2_t v263 = v730;
                          float64x2_t v264 = v731;
                          float64x2_t v265 = v732;
                          float64x2_t v266 = v733;
                          float64x2_t v267 = v736;
                          float64x2_t v268 = v737;
                          unint64_t v269 = v741;
                          if (v741)
                          {
                            float32x4_t v270 = v776;
                            p_src = &__src;
                            float32x4_t v272 = (double *)&v740;
                            unint64_t v273 = v741;
                            do
                            {
                              double v274 = v272[5] + v272[15] * *(double *)&v251;
                              p_src->CGFloat a = *v272 + v272[10] * *(double *)&v251 + v274 * 0.0;
                              p_src = (CGAffineTransform *)((char *)p_src + 8);
                              v270->f64[0] = v274 * 0.5;
                              float32x4_t v270 = (float64x2_t *)((char *)v270 + 8);
                              ++v272;
                              --v273;
                            }
                            while (v273);
                          }
                          uint64_t v275 = 0;
                          float64x2_t v276 = vmlaq_n_f64(v267, v260, *(double *)&v251);
                          float64x2_t v277 = vmlaq_n_f64(v265, v258, *(double *)&v251);
                          float64x2_t v278 = vmlaq_n_f64(v261, vmlaq_n_f64(v264, vmlaq_n_f64(v257, v259, *(double *)&v251), *(double *)&v251), *(double *)&v251);
                          float64x2_t v279 = vmlaq_n_f64(v262, vmlaq_n_f64(v263, vmlaq_n_f64(v266, v268, *(double *)&v251), *(double *)&v251), *(double *)&v251);
                          __asm { FMOV            V3.2D, #3.0 }
                          float64x2_t v281 = vmulq_f64(vmulq_f64(v276, _Q3), v652);
                          __asm { FMOV            V4.2D, #2.0 }
                          float64x2_t v283 = vmulq_f64(vmlaq_f64(v281, _Q4, v277), v652);
                          float64x2_t v284 = vmulq_f64(vaddq_f64(v281, v281), v652);
                          float64x2_t v285 = vmlaq_f64(v279, (float64x2_t)0, vmlaq_f64(v278, (float64x2_t)0, vmlaq_f64(v277, (float64x2_t)0, v276)));
                          float64x2_t v286 = vmlaq_f64(vmulq_f64(vmlaq_f64(v278, v652, vmlaq_f64(v277, v652, v276)), v652), (float64x2_t)0, vmlaq_f64(v283, (float64x2_t)0, v281));
                          float64x2_t v287 = vmlaq_f64(vmulq_f64(vmlaq_f64(v283, v652, v281), v652), (float64x2_t)0, v284);
                          float64x2_t v683 = vmulq_f64(v284, v652);
                          float v288 = v666;
                          int v289 = v668;
                          *(_OWORD *)uint64_t v679 = v251;
                          do
                          {
                            float64x2_t *v289 = v285;
                            if (v269)
                            {
                              unsigned int v290 = &__src;
                              float64x2_t v689 = v286;
                              *(float64x2_t *)widthf = v285;
                              float64x2_t v686 = v287;
                              memcpy(v288, &__src, 8 * v269);
                              float64x2_t v287 = v686;
                              float64x2_t v286 = v689;
                              float64x2_t v285 = *(float64x2_t *)widthf;
                              long long v251 = *(_OWORD *)v679;
                              unsigned int v291 = v776;
                              unint64_t v292 = v269;
                              do
                              {
                                double v293 = v291->f64[0];
                                unsigned int v291 = (float64x2_t *)((char *)v291 + 8);
                                v290->CGFloat a = v293 + v290->a;
                                unsigned int v290 = (CGAffineTransform *)((char *)v290 + 8);
                                --v292;
                              }
                              while (v292);
                            }
                            float64x2_t v285 = vaddq_f64(v285, v286);
                            float64x2_t v286 = vaddq_f64(v286, v287);
                            float64x2_t v287 = vaddq_f64(v683, v287);
                            ++v275;
                            ++v289;
                            v288 += 40;
                          }
                          while (v275 != 3);
                          uint64_t v294 = 0;
                          uint64_t v295 = v676;
                          uint64_t v296 = 3 * v676;
                          uint64_t v297 = 2 * v676;
                          int v298 = 3 * v676 + 1;
                          int v299 = 2 * v676 + 2;
                          int v300 = 3 * v676 + 3;
                          uint64_t width = 2 * v676 + 12;
                          uint64_t v301 = 2 * v676 + 4;
                          int v302 = 2 * (v676 + 1);
                          double v303 = *(double *)&v251 <= 1.0 ? *(double *)&v251 : 1.0;
                          double v304 = 0.0;
                          unsigned int v305 = v666;
                          for (uint64_t k = v668; ; ++k)
                          {
                            uint64_t v307 = v294 + v296;
                            uint64_t v308 = *((void *)recta + 1) + 72 * (v294 + v296);
                            *(float64x2_t *)uint64_t v308 = *k;
                            if (v304 <= 1.0) {
                              double v309 = v304;
                            }
                            else {
                              double v309 = 1.0;
                            }
                            *(double *)(v308 + 16) = v309;
                            *(double *)(v308 + 24) = v303;
                            uint64_t v310 = *recta;
                            if (v310)
                            {
                              uint64_t v311 = 0;
                              uint64_t v312 = 8 * v310;
                              uint64_t v313 = v308 + 32;
                              do
                              {
                                *(void *)(v313 + v311) = *(void *)&v305[v311];
                                v311 += 8;
                              }
                              while (v312 != v311);
                            }
                            if (v294 == 2) {
                              break;
                            }
                            uint64_t v314 = *((void *)recta + 3);
                            uint64_t v315 = v294 + v297;
                            float32x4_t v316 = (_DWORD *)(v314 + 20 * (v294 + v297));
                            int v317 = v298 + v294;
                            *float32x4_t v316 = v307;
                            v316[1] = v298 + v294;
                            int8x16_t v318 = v316 + 2;
                            if (v295 == 2)
                            {
                              *int8x16_t v318 = -1;
                              *(_DWORD *)(v314 + 20 * v315 + 12) = 3 * (v294 + v299);
                              uint64_t v319 = v294 + 1;
                            }
                            else
                            {
                              int v320 = 3 * v315;
                              *int8x16_t v318 = 3 * v315;
                              if (v295) {
                                *(_DWORD *)(v314 + 20 * v315 + 12) = 3 * (v294 + v299);
                              }
                              else {
                                *(_DWORD *)(v314 + 20 * v315 + 12) = -1;
                              }
                              uint64_t v321 = 20 * (v307 + 6);
                              int v322 = v294 + v300;
                              *(_DWORD *)(v314 + v321) = v294 + v300;
                              float32x4_t v323 = (_DWORD *)(v314 + v321);
                              v323[1] = v307;
                              v323[2] = v320 + 2;
                              int v324 = v320 + 11;
                              int v325 = 3 * v294 + 12;
                              uint64_t v295 = v676;
                              if (!v676) {
                                int v325 = -1;
                              }
                              if (!v294) {
                                int v324 = -1;
                              }
                              v323[3] = v324;
                              unsigned int v326 = (_DWORD *)(v314 + 20 * (width + v294));
                              *unsigned int v326 = v317;
                              v326[1] = v322;
                              int v327 = v320 + 1;
                              uint64_t v328 = v294 + v301;
                              int v329 = 3 * (v294 + v301) + 1;
                              v326[2] = v327;
                              v326[3] = v329;
                              uint64_t v330 = *((void *)recta + 5);
                              float v331 = (_DWORD *)(v330 + 48 * v315);
                              *float v331 = v307;
                              v331[1] = v317;
                              v331[2] = v322;
                              v331[3] = 2 * v315;
                              int v332 = 2 * (width + v294);
                              v331[4] = v332;
                              v331[5] = 2 * v307 + 12;
                              v331[6] = v325;
                              v331[7] = v329;
                              if (v294) {
                                int v333 = 3 * v301 + 2;
                              }
                              else {
                                int v333 = -1;
                              }
                              v331[8] = v333;
                              unsigned int v334 = recta[14];
                              if (v334 == -1) {
                                recta[15] = v315;
                              }
                              float32x4_t v335 = (_DWORD *)(v330 + 48 * v315);
                              v335[9] = v334;
                              recta[14] = v315;
                              v335[10] = 1;
                              v335[11] = 7 - v315;
                              uint64_t v336 = *((void *)recta + 5);
                              float32x4_t v337 = (_DWORD *)(v336 + 48 * v328);
                              uint64_t v319 = v294 + 1;
                              *float32x4_t v337 = v294 + 1 + v300;
                              v337[1] = v294 + v300;
                              int v338 = v294 + 1 + v296;
                              v337[2] = v338;
                              v337[3] = (2 * (v294 + v302)) | 1;
                              v337[4] = v332 | 1;
                              v337[5] = 2 * v338 + 13;
                              int v339 = 3 * (v294 + v302);
                              if (v676 == 1) {
                                int v339 = -1;
                              }
                              v337[6] = v339;
                              v337[7] = v327;
                              if (v294 == 1) {
                                int v340 = -1;
                              }
                              else {
                                int v340 = 3 * (v319 + v297) + 2;
                              }
                              v337[8] = v340;
                              unsigned int v341 = recta[14];
                              if (v341 == -1) {
                                recta[15] = v328;
                              }
                              unsigned int v342 = (_DWORD *)(v336 + 48 * v328);
                              v342[9] = v341;
                              _DWORD *v674 = v328;
                              v342[10] = 1;
                              v342[11] = 7 - v328;
                            }
                            double v304 = v304 + 0.5;
                            v305 += 40;
                            uint64_t v294 = v319;
                          }
                          if (v295 == 2) {
                            break;
                          }
                          float v343 = (_DWORD *)(*((void *)recta + 3) + 20 * v307);
                          v343[30] = v296 + 5;
                          v343[31] = v307;
                          v343[32] = -1;
                          v343[33] = 3 * v299 + 11;
                          *(double *)&long long v251 = *(double *)&v251 + 0.5;
                          uint64_t v255 = v676 + 1;
                        }
                        free(v666);
                        free(v668);
                        int8x16_t v344 = recta;
LABEL_466:
                        *((void *)v344 + 9) = 0;
                        signed int v345 = v344[14];
                        rectb = v344;
                        if (v345 != -1)
                        {
                          while (1)
                          {
                            int8x16_t v346 = v344;
                            uint64_t v347 = *((void *)v344 + 5);
                            int v348 = (int *)(v347 + 48 * v345);
                            v346[14] = v348[9];
                            uint64_t v349 = *((void *)v346 + 1);
                            unsigned int v350 = (double *)(v349 + 72 * *v348);
                            signed int v351 = v345;
                            int8x16_t v352 = (double *)(v349 + 72 * v348[1]);
                            double v353 = *v352;
                            double v354 = v352[1];
                            float32x4_t v355 = (double *)(v349 + 72 * v348[2]);
                            if (fabs(((v353 - *v350) * (v354 - v350[1])+ (*v355 - v353) * (v354 - v350[1] + v355[1] - v350[1])+ (*v350 - *v355) * (v355[1] - v350[1]))* 0.5) >= 8.0)
                            {
                              uint64_t v356 = 0;
                              char v357 = 0;
                              do
                              {
                                v357 |= *(_DWORD *)(v347 + 48 * v351 + 24 + v356) == -1;
                                v356 += 4;
                              }
                              while (v356 != 12);
                              if ((*(char *)(v347 + 48 * v351 + 41) < 7) | v357 & 1)
                              {
                                unint64_t v358 = 0;
                                v776[0] = 0uLL;
                                float v359 = v348;
                                do
                                {
                                  int v360 = v359[6];
                                  if (v360 != -1)
                                  {
                                    int v361 = v360 / 3;
                                    int v362 = v360 % 3;
                                    uint64_t v363 = v347 + 48 * v361;
                                    uint64_t v364 = (v358 - 1);
                                    if (!v358) {
                                      uint64_t v364 = 2;
                                    }
                                    unsigned int v365 = (double *)(v349 + 72 * v348[v364]);
                                    double v366 = *v365;
                                    double v367 = v365[1];
                                    unsigned int v368 = v362 + 2;
                                    unsigned int v369 = v362 - 1;
                                    if (v368 < 3) {
                                      unsigned int v369 = v368;
                                    }
                                    int8x16_t v370 = (double *)(v349 + 72 * *(int *)(v363 + 4 * v369));
                                    double v371 = *v370;
                                    double v372 = v370[1];
                                    int v373 = (double *)(v349 + 72 * *v359);
                                    double v374 = *v373;
                                    double v375 = v373[1];
                                    if (v358 > 1) {
                                      int v376 = -2;
                                    }
                                    else {
                                      int v376 = 1;
                                    }
                                    uint64_t v377 = (double *)(v349 + 72 * v348[(v376 + v358)]);
                                    double v378 = *v377 - v374;
                                    double v379 = v377[1] - v375;
                                    double v380 = v367 - v375;
                                    if (fabs((v366 - v374) * (v372 - v375 - v379)+ v378 * (v380 - (v372 - v375))+ (v371 - v374) * (v379 - v380)) <= 2.22507386e-308)goto LABEL_512; {
                                    if ((v371 - v374) * v379 - (v372 - v375) * v378 < 0.0 == v378 * v380
                                    }
                                                                                            - v379 * (v366 - v374) >= 0.0)
                                    {
                                      ++rectb[19];
                                      goto LABEL_508;
                                    }
                                  }
                                  ++v359;
                                  ++v358;
                                }
                                while (v358 != 3);
                                widthCGFloat a = v351;
                                uint64_t v381 = 0;
                                LODWORD(v35++*(_DWORD *)(result + 8) = -1;
                                double v382 = 0.0;
                                do
                                {
                                  uint64_t v383 = *((void *)rectb + 1);
                                  float v384 = (double *)(v383 + 72 * v348[v381]);
                                  if (v381 == 2) {
                                    uint64_t v385 = 0;
                                  }
                                  else {
                                    uint64_t v385 = v381 + 1;
                                  }
                                  unsigned __int8 v386 = (double *)(v383 + 72 * v348[v385]);
                                  uint64_t v387 = v381 + 1;
                                  double v388 = (*v384 + *v386) * 0.5;
                                  double v389 = (v384[1] + v386[1]) * 0.5;
                                  Coons((uint64_t)&v704, v776, &__src.a, (v384[2] + v386[2]) * 0.5, (v384[3] + v386[3]) * 0.5);
                                  double v390 = (v776[0].f64[1] - v389) * (v776[0].f64[1] - v389);
                                  if (v390 + (v776[0].f64[0] - v388) * (v776[0].f64[0] - v388) >= v382)
                                  {
                                    LODWORD(v35++*(_DWORD *)(result + 8) = v381;
                                    double v382 = v390 + (v776[0].f64[0] - v388) * (v776[0].f64[0] - v388);
                                  }
                                  ++v381;
                                }
                                while (v387 != 3);
                                if (v358 != -1 && v382 > 0.49)
                                {
                                  ++rectb[18];
                                  signed int v351 = widtha;
                                  break;
                                }
                                uint64_t v391 = 0;
                                uint64_t v392 = *((void *)rectb + 1) + 32;
                                LODWORD(v35++*(_DWORD *)(result + 8) = -1;
                                double v393 = 0.0;
                                do
                                {
                                  uint64_t v394 = v391 + 1;
                                  if (v391 == 2) {
                                    uint64_t v395 = 0;
                                  }
                                  else {
                                    uint64_t v395 = v391 + 1;
                                  }
                                  if (*rectb)
                                  {
                                    int v396 = (double *)(v392 + 72 * v348[v395]);
                                    float v397 = (double *)(v392 + 72 * v348[v391]);
                                    uint64_t v398 = *rectb;
                                    do
                                    {
                                      double v399 = *v397++;
                                      double v400 = v399;
                                      double v401 = *v396++;
                                      double v402 = v400 - v401;
                                      if (v402 < 0.0) {
                                        double v402 = -v402;
                                      }
                                      if (v402 >= v393)
                                      {
                                        LODWORD(v35++*(_DWORD *)(result + 8) = v391;
                                        double v393 = v402;
                                      }
                                      --v398;
                                    }
                                    while (v398);
                                  }
                                  ++v391;
                                }
                                while (v394 != 3);
                                signed int v351 = widtha;
                                if (v358 != -1 && v393 > 0.1) {
                                  break;
                                }
                              }
                            }
LABEL_512:
                            *(unsigned char *)(v347 + 48 * v351 + 40) = 0;
                            int8x16_t v344 = rectb;
LABEL_513:
                            signed int v345 = v344[14];
                            if (v345 == -1) {
                              goto LABEL_646;
                            }
                          }
LABEL_508:
                          int v687 = v348[(int)v358];
                          int v403 = ((int)v358 + 1) % 3;
                          int v404 = v348[v403];
                          int v405 = ((int)v358 + 2) % 3;
                          int v675 = v348[v405];
                          float64x2_t v744 = 0uLL;
                          uint64_t v406 = *((void *)rectb + 5);
                          int v407 = *(_DWORD *)(v347 + 48 * v351 + 4 * (int)v358 + 24);
                          int v669 = v407;
                          if (v407 == -1)
                          {
                            int v656 = 0;
                            uint64_t widthb = 0;
                            int v662 = -1;
                            int v665 = -1;
                          }
                          else
                          {
                            int v408 = v407 / 3;
                            int v409 = v407 % 3;
                            int v665 = v408;
                            unsigned int v410 = v409 + 2;
                            int v656 = v409;
                            if ((v409 + 2) >= 3) {
                              unsigned int v410 = v409 - 1;
                            }
                            uint64_t widthb = v406 + 48 * v408;
                            int v662 = *(_DWORD *)(widthb + 4 * v410);
                          }
                          uint64_t v661 = (int)v358;
                          uint64_t v658 = v403;
                          int v667 = v404;
                          uint64_t v657 = v405;
                          unint64_t v684 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v348 - v406) >> 4);
                          int8x16_t v344 = rectb;
                          float64x2_t v690 = vmulq_f64(vaddq_f64(*(float64x2_t *)(*((void *)rectb + 1) + 72 * v687 + 16), *(float64x2_t *)(*((void *)rectb + 1) + 72 * v404 + 16)), v652);
                          Coons((uint64_t)&v704, &v744, &__src.a, v690.f64[0], v690.f64[1]);
                          uint64_t v411 = 0;
                          char v412 = 1;
                          do
                          {
                            char v413 = v412;
                            CoonsMeshTriangle = AllocateCoonsMeshTriangle((uint64_t)rectb);
                            char v412 = 0;
                            uint64_t v415 = *((void *)rectb + 5);
                            v775[v411] = -1431655765 * (((unint64_t)CoonsMeshTriangle - v415) >> 4);
                            uint64_t v411 = 1;
                          }
                          while ((v413 & 1) != 0);
                          v776[0] = 0uLL;
                          if (v669 == -1)
                          {
                            uint64_t v774 = -1;
                          }
                          else
                          {
                            uint64_t v416 = 0;
                            char v417 = 1;
                            do
                            {
                              char v418 = v417;
                              unint64_t v419 = AllocateCoonsMeshTriangle((uint64_t)rectb);
                              char v417 = 0;
                              *(void *)&v776[0].f64[v416] = v419;
                              uint64_t v415 = *((void *)rectb + 5);
                              v775[v416 - 2] = -1431655765 * (((unint64_t)v419 - v415) >> 4);
                              uint64_t v416 = 1;
                            }
                            while ((v418 & 1) != 0);
                          }
                          int v420 = v775[0];
                          int v680 = v775[1];
                          uint64_t v421 = widthb;
                          if (v669 != -1)
                          {
                            *(void *)&v776[0].f64[0] = v415 + 48 * (int)v774;
                            *(void *)&v776[0].f64[1] = v415 + 48 * SHIDWORD(v774);
                            uint64_t v421 = v415 + 48 * v665;
                          }
                          uint64_t widthc = v421;
                          float64x2_t v422 = v744;
                          unsigned int v423 = rectb[4];
                          uint64_t v424 = (char *)*((void *)rectb + 1);
                          if (v423 == rectb[5])
                          {
                            float64x2_t v677 = v744;
                            uint64_t v424 = (char *)malloc_type_realloc(v424, 72 * (v423 + 50), 0x1000040FF89C88EuLL);
                            *((void *)rectb + 1) = v424;
                            if (v424)
                            {
                              unsigned int v423 = rectb[4];
                              rectb[5] += 50;
                              float64x2_t v422 = v677;
                              goto LABEL_528;
                            }
                            uint64_t v655 = 0;
                          }
                          else
                          {
LABEL_528:
                            rectb[4] = v423 + 1;
                            int v425 = (float64x2_t *)&v424[72 * v423];
                            *int v425 = v422;
                            v425[1] = v690;
                            uint64_t v426 = *rectb;
                            uint64_t v655 = v425;
                            if (v426)
                            {
                              uint64_t v427 = 72 * v423 + 32;
                              uint64_t v428 = &__src;
                              do
                              {
                                CGFloat a = v428->a;
                                uint64_t v428 = (CGAffineTransform *)((char *)v428 + 8);
                                *(CGFloat *)&v424[v427] = a;
                                v427 += 8;
                                --v426;
                              }
                              while (v426);
                            }
                          }
                          int v691 = v420;
                          int v663 = (int *)(v415 + 48 * v420);
                          uint64_t v664 = (int *)(v415 + 48 * v680);
                          uint64_t v660 = v415 + 48 * (int)v684;
                          CoonsMeshEdge = AllocateCoonsMeshEdge((uint64_t)rectb);
                          uint64_t v431 = 0;
                          uint64_t v653 = *((void *)rectb + 3);
                          uint64_t v654 = CoonsMeshEdge;
                          char v432 = 1;
                          do
                          {
                            char v433 = v432;
                            uint64_t v434 = AllocateCoonsMeshEdge((uint64_t)rectb);
                            char v432 = 0;
                            uint64_t v435 = *((void *)rectb + 3);
                            v773[v431] = -858993459 * (((unint64_t)v434 - v435) >> 2);
                            uint64_t v431 = 1;
                          }
                          while ((v433 & 1) != 0);
                          if (v669 == -1)
                          {
                            int v437 = 0;
                            uint64_t v436 = 0;
                          }
                          else
                          {
                            uint64_t v436 = AllocateCoonsMeshEdge((uint64_t)rectb);
                            uint64_t v435 = *((void *)rectb + 3);
                            int v437 = -858993459 * (((unint64_t)v436 - v435) >> 2);
                          }
                          uint64_t v438 = v658;
                          int v439 = v773[0];
                          int v440 = v773[1];
                          if (v669 != -1) {
                            uint64_t v436 = (_DWORD *)(v435 + 20 * v437);
                          }
                          int v659 = v437;
                          if (widthc)
                          {
                            int v441 = v684;
                            if (*(int *)(v415 + 48 * (int)v684 + 4 * (int)v358 + 12) >= 0) {
                              int v442 = *(_DWORD *)(v415 + 48 * (int)v684 + 4 * (int)v358 + 12) & 1;
                            }
                            else {
                              int v442 = -(*(_DWORD *)(v415 + 48 * (int)v684 + 4 * (int)v358 + 12) & 1);
                            }
                            if (*(int *)(widthc + 4 * v656 + 12) >= 0) {
                              int v443 = *(_DWORD *)(widthc + 4 * v656 + 12) & 1;
                            }
                            else {
                              int v443 = -(*(_DWORD *)(widthc + 4 * v656 + 12) & 1);
                            }
                            if (v442 == v443)
                            {
                              uint64_t v444 = 0;
                              char v445 = 1;
                              do
                              {
                                uint64_t v446 = widthc + 4 * ((v656 + 2 - (int)v444) % 3);
                                int v447 = *(_DWORD *)(v446 + 12);
                                if (v447 >= 0) {
                                  int v448 = *(_DWORD *)(v446 + 12);
                                }
                                else {
                                  int v448 = v447 + 1;
                                }
                                v773[v444 - 2] = v448 >> 1;
                                v771[v444] = (v448 & 0xFFFFFFFE) - v447 + 1;
                                char v449 = v445;
                                *(&v769 + v444) = *(_DWORD *)(v446 + 24);
                                uint64_t v444 = 1;
                                char v445 = 0;
                              }
                              while ((v449 & 1) != 0);
                            }
                            else
                            {
                              uint64_t v450 = 0;
                              char v451 = 1;
                              do
                              {
                                uint64_t v452 = widthc + 4 * ((v656 + 1 + (int)v450) % 3);
                                int v453 = *(_DWORD *)(v452 + 12);
                                if (v453 >= 0) {
                                  int v454 = *(_DWORD *)(v452 + 12);
                                }
                                else {
                                  int v454 = v453 + 1;
                                }
                                v773[v450 - 2] = v454 >> 1;
                                v771[v450] = v453 - (v454 & 0xFFFFFFFE);
                                char v455 = v451;
                                *(&v769 + v450) = *(_DWORD *)(v452 + 24);
                                uint64_t v450 = 1;
                                char v451 = 0;
                              }
                              while ((v455 & 1) != 0);
                            }
                          }
                          else
                          {
                            uint64_t v772 = -1;
                            int v441 = v684;
                          }
                          int v456 = 954437177 * ((unint64_t)((char *)v655 - v424) >> 3);
                          unint64_t v457 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v654 - v653) >> 2);
                          uint64_t v458 = (int *)(v435 + 20 * v439);
                          uint64_t v459 = (int *)(v435 + 20 * v440);
                          uint64_t v460 = (int *)(v435 + 20 * (int)v457);
                          uint64_t v461 = v415 + 48 * v441;
                          uint64_t v462 = v461 + 12;
                          int v463 = *(_DWORD *)(v461 + 12 + 4 * v657);
                          if (v463 >= 0) {
                            int v464 = *(_DWORD *)(v461 + 12 + 4 * v657);
                          }
                          else {
                            int v464 = v463 + 1;
                          }
                          uint64_t v465 = v461 + 24;
                          int v466 = *(_DWORD *)(v465 + 4 * v657);
                          int v467 = *(_DWORD *)(v462 + 4 * v438);
                          if (v467 >= 0) {
                            int v468 = v467;
                          }
                          else {
                            int v468 = v467 + 1;
                          }
                          int v469 = *(_DWORD *)(v465 + 4 * v438);
                          *uint64_t v460 = v456;
                          v460[1] = v675;
                          int v470 = 3 * v691;
                          int v471 = 3 * v691 + 1;
                          uint64_t v472 = v435 + 20 * (int)v457;
                          int v473 = 3 * v680;
                          int v474 = 3 * v680 + 1;
                          *(_DWORD *)(v472 + ++*(_DWORD *)(result + 8) = v471;
                          *(_DWORD *)(v472 + 12) = v474;
                          *uint64_t v458 = v687;
                          v458[1] = v456;
                          uint64_t v475 = v435 + 20 * v439;
                          int v476 = HIDWORD(v774);
                          int v477 = 3 * v774;
                          if (v774 == -1) {
                            int v478 = -1;
                          }
                          else {
                            int v478 = v477 + 1;
                          }
                          *(_DWORD *)(v475 + ++*(_DWORD *)(result + 8) = v470;
                          *(_DWORD *)(v475 + 12) = v478;
                          *uint64_t v459 = v456;
                          v459[1] = v667;
                          int v479 = v473 + 2;
                          uint64_t v480 = v435 + 20 * v440;
                          int v481 = 3 * v476;
                          if (v476 == -1) {
                            int v482 = -1;
                          }
                          else {
                            int v482 = v481 + 1;
                          }
                          *(_DWORD *)(v480 + ++*(_DWORD *)(result + 8) = v479;
                          *(_DWORD *)(v480 + 12) = v482;
                          if (widthc)
                          {
                            *uint64_t v436 = v662;
                            v436[1] = v456;
                            v436[2] = v477;
                            v436[3] = v481 + 2;
                          }
                          int v483 = v464 >> 1;
                          *int v663 = v687;
                          v663[1] = v456;
                          v663[2] = v675;
                          int v484 = 2 * v439;
                          uint64_t v485 = v415 + 48 * v691;
                          int v486 = -1717986918 * (((uint64_t)v654 - v653) >> 2);
                          *(_DWORD *)(v485 + 12) = v484;
                          *(_DWORD *)(v485 + 16) = v486;
                          float v487 = (_DWORD *)(v435 + 20 * (v464 >> 1));
                          if (*v487 == v675)
                          {
                            int v488 = 2 * v483;
                            int v489 = v691;
                            goto LABEL_578;
                          }
                          int v489 = v691;
                          if (v487[1] == v675)
                          {
                            int v488 = (2 * v483) | 1;
LABEL_578:
                            *(_DWORD *)(v415 + 48 * v489 + 20) = v488;
                          }
                          int8x16_t v490 = (_DWORD *)(v415 + 48 * v489);
                          v490[6] = v478;
                          v490[7] = v474;
                          v490[8] = v466;
                          uint64_t v491 = *((void *)rectb + 5);
                          unsigned int v492 = -1431655765 * (((unint64_t)v663 - v491) >> 4);
                          v490[9] = -1;
                          if (rectb[14] == -1) {
                            rectb[14] = v492;
                          }
                          else {
                            *(_DWORD *)(v491 + 48 * (int)rectb[15] + 36) = v492;
                          }
                          rectb[15] = v492;
                          uint64_t v493 = v415 + 48 * v691;
                          *(unsigned char *)(v493 + 40) = 1;
                          uint64_t v494 = v415 + 48 * (int)v684;
                          char v496 = *(unsigned char *)(v494 + 41);
                          float32x4_t v495 = (unsigned char *)(v494 + 41);
                          *(unsigned char *)(v493 + 41) = v496 + 1;
                          *(_WORD *)(v493 + 42) += 1 << (15 - v496);
                          if (v466 != -1) {
                            *(_DWORD *)(v491 + 48 * (v466 / 3) + 4 * (v466 % 3) + 24) = v470 + 2;
                          }
                          int v497 = v483;
                          uint64_t v498 = v435 + 20 * v483;
                          int v501 = *(_DWORD *)(v498 + 8);
                          uint64_t v499 = (_DWORD *)(v498 + 8);
                          int v500 = v501;
                          if (v501 != -1 && v500 / 3 == v684
                            || (uint64_t v502 = v435 + 20 * v497,
                                int v504 = *(_DWORD *)(v502 + 12),
                                uint64_t v499 = (_DWORD *)(v502 + 12),
                                int v503 = v504,
                                v504 != -1)
                            && v503 / 3 == v684)
                          {
                            *uint64_t v499 = v470 + 2;
                          }
                          int v505 = v468 >> 1;
                          *uint64_t v664 = v667;
                          v664[1] = v675;
                          v664[2] = v456;
                          uint64_t v506 = (_DWORD *)(v435 + 20 * v505);
                          if (*v506 == v667)
                          {
                            int v507 = 2 * v505;
                            uint64_t v508 = widthc;
                            int v509 = v659;
                            goto LABEL_593;
                          }
                          uint64_t v508 = widthc;
                          int v509 = v659;
                          int v510 = v680;
                          if (v506[1] == v667)
                          {
                            int v507 = (2 * v505) | 1;
LABEL_593:
                            int v510 = v680;
                            *(_DWORD *)(v415 + 48 * v680 + 12) = v507;
                          }
                          int v511 = v486 | 1;
                          uint64_t v512 = (_DWORD *)(v415 + 48 * v510);
                          int v513 = 2 * v440;
                          v512[4] = v511;
                          v512[5] = v513;
                          v512[6] = v469;
                          v512[7] = v471;
                          unsigned int v514 = -1431655765 * (((unint64_t)v664 - v491) >> 4);
                          v512[8] = v482;
                          v512[9] = -1;
                          if (rectb[14] == -1) {
                            rectb[14] = v514;
                          }
                          else {
                            *(_DWORD *)(v491 + 48 * (int)rectb[15] + 36) = v514;
                          }
                          rectb[15] = v514;
                          uint64_t v515 = v415 + 48 * v510;
                          *(unsigned char *)(v515 + 40) = 1;
                          *(unsigned char *)(v515 + 41) = *v495 + 1;
                          if (v469 != -1) {
                            *(_DWORD *)(v491 + 48 * (v469 / 3) + 4 * (v469 % 3) + 24) = v473;
                          }
                          uint64_t v516 = *((void *)rectb + 3);
                          uint64_t v517 = v516 + 20 * v505;
                          int v520 = *(_DWORD *)(v517 + 8);
                          float32x4_t v518 = (int *)(v517 + 8);
                          int v519 = v520;
                          if (v520 != -1 && v519 / 3 == v684
                            || (uint64_t v521 = v516 + 20 * v505,
                                int v523 = *(_DWORD *)(v521 + 12),
                                float32x4_t v518 = (int *)(v521 + 12),
                                int v522 = v523,
                                v523 != -1)
                            && v522 / 3 == v684)
                          {
                            *float32x4_t v518 = v473;
                          }
                          float64_t v524 = v776[0].f64[0];
                          if (*(void *)&v776[0].f64[0])
                          {
                            **(_DWORD **)&v776[0].f64[0] = v662;
                            *(_DWORD *)(*(void *)&v524 + 4) = v456;
                            *(_DWORD *)(*(void *)&v524 + ++*(_DWORD *)(result + 8) = v687;
                            *(_DWORD *)(*(void *)&v524 + 12) = 2 * v509;
                            int v525 = v772;
                            int v526 = v771[0] + 2 * v772;
                            *(_DWORD *)(*(void *)&v524 + 16) = v484 | 1;
                            *(_DWORD *)(*(void *)&v524 + 20) = v526;
                            *(_DWORD *)(*(void *)&v524 + 24) = v481 + 2;
                            *(_DWORD *)(*(void *)&v524 + 2++*(_DWORD *)(result + 8) = v470;
                            int v527 = v769;
                            *(_DWORD *)(*(void *)&v524 + 32) = v769;
                            char v528 = *(unsigned char *)(v508 + 40);
                            if (v528)
                            {
                              unsigned int v529 = -1431655765 * ((unint64_t)(*(void *)&v524 - v491) >> 4);
                              *(_DWORD *)(*(void *)&v524 + 36) = -1;
                              if (rectb[14] == -1) {
                                rectb[14] = v529;
                              }
                              else {
                                *(_DWORD *)(v491 + 48 * (int)rectb[15] + 36) = v529;
                              }
                              rectb[15] = v529;
                              char v528 = 1;
                            }
                            else
                            {
                              *(_DWORD *)(*(void *)&v524 + 36) = -1;
                            }
                            *(unsigned char *)(*(void *)&v524 + 40) = v528;
                            *(unsigned char *)(*(void *)&v524 + 41) = *(unsigned char *)(v508 + 41) + 1;
                            if (v527 != -1) {
                              *(_DWORD *)(v491 + 48 * (v527 / 3) + 4 * (v527 % 3) + 24) = v477 + 2;
                            }
                            uint64_t v530 = v516 + 20 * v525;
                            int v533 = *(_DWORD *)(v530 + 8);
                            int v531 = (_DWORD *)(v530 + 8);
                            int v532 = v533;
                            if (v533 != -1 && v532 / 3 == v665
                              || (uint64_t v534 = v516 + 20 * v525,
                                  int v536 = *(_DWORD *)(v534 + 12),
                                  int v531 = (_DWORD *)(v534 + 12),
                                  int v535 = v536,
                                  v536 != -1)
                              && v535 / 3 == v665)
                            {
                              *int v531 = v477 + 2;
                            }
                          }
                          float64_t v537 = v776[0].f64[1];
                          if (*(void *)&v776[0].f64[1])
                          {
                            **(_DWORD **)&v776[0].f64[1] = v662;
                            *(_DWORD *)(*(void *)&v537 + 4) = v667;
                            *(_DWORD *)(*(void *)&v537 + ++*(_DWORD *)(result + 8) = v456;
                            int v538 = HIDWORD(v772);
                            *(_DWORD *)(*(void *)&v537 + 12) = v771[1] + 2 * HIDWORD(v772);
                            *(_DWORD *)(*(void *)&v537 + 16) = v513 | 1;
                            *(_DWORD *)(*(void *)&v537 + 20) = (2 * v509) | 1;
                            int v539 = v770;
                            *(_DWORD *)(*(void *)&v537 + 24) = v770;
                            *(_DWORD *)(*(void *)&v537 + 2++*(_DWORD *)(result + 8) = v479;
                            *(_DWORD *)(*(void *)&v537 + 32) = v477;
                            char v540 = *(unsigned char *)(v508 + 40);
                            if (v540)
                            {
                              uint64_t v541 = *((void *)rectb + 5);
                              unsigned int v542 = -1431655765 * ((unint64_t)(*(void *)&v537 - v541) >> 4);
                              *(_DWORD *)(*(void *)&v537 + 36) = -1;
                              if (rectb[14] == -1) {
                                rectb[14] = v542;
                              }
                              else {
                                *(_DWORD *)(v541 + 48 * (int)rectb[15] + 36) = v542;
                              }
                              rectb[15] = v542;
                              char v540 = 1;
                            }
                            else
                            {
                              *(_DWORD *)(*(void *)&v537 + 36) = -1;
                            }
                            *(unsigned char *)(*(void *)&v537 + 40) = v540;
                            *(unsigned char *)(*(void *)&v537 + 41) = *(unsigned char *)(v508 + 41) + 1;
                            if (v539 != -1) {
                              *(_DWORD *)(*((void *)rectb + 5) + 48 * (v539 / 3) + 4 * (v539 % 3) + 24) = v481;
                            }
                            uint64_t v547 = v516 + 20 * v538;
                            int v550 = *(_DWORD *)(v547 + 8);
                            uint64_t v548 = (int *)(v547 + 8);
                            int v549 = v550;
                            if (v550 != -1 && v549 / 3 == v665
                              || (uint64_t v551 = v516 + 20 * v538,
                                  int v553 = *(_DWORD *)(v551 + 12),
                                  uint64_t v548 = (int *)(v551 + 12),
                                  int v552 = v553,
                                  v553 != -1)
                              && v552 / 3 == v665)
                            {
                              *uint64_t v548 = v481;
                            }
LABEL_634:
                            uint64_t v554 = *((void *)rectb + 5);
                            unsigned int v546 = -1431655765 * ((unint64_t)(v508 - v554) >> 4);
                            uint64_t v555 = rectb[14];
                            if (v555 != -1)
                            {
                              uint64_t v556 = 0xFFFFFFFFLL;
                              do
                              {
                                uint64_t v557 = v555;
                                uint64_t v555 = *(unsigned int *)(v554 + 48 * (int)v555 + 36);
                                if (v557 == v546)
                                {
                                  if (v556 == -1) {
                                    rectb[14] = v555;
                                  }
                                  else {
                                    *(_DWORD *)(v554 + 48 * (int)v556 + 36) = v555;
                                  }
                                  if (rectb[15] == v546) {
                                    rectb[15] = v556;
                                  }
                                  uint64_t v557 = v556;
                                }
                                uint64_t v556 = v557;
                              }
                              while (v555 != -1);
                            }
                            uint64_t v558 = v415 + 48 * (int)v684;
                            int v559 = *(_DWORD *)(v558 + 4 * v661 + 12) / 2;
                            uint64_t v560 = v516 + 20 * v559;
                            *(_DWORD *)(v560 + 16) = rectb[17];
                            rectb[17] = v559;
                            *(void *)uint64_t v560 = 0xC0000000CLL;
                            *(_DWORD *)(v558 + 36) = rectb[16];
                            rectb[16] = -1431655765 * ((unint64_t)(v660 - v554) >> 4);
                            *(_DWORD *)(v660 + ++*(_DWORD *)(result + 8) = -13;
                            *(void *)uint64_t v660 = 0xC0000000CLL;
                            *(_DWORD *)(v508 + 36) = rectb[16];
                          }
                          else
                          {
                            if (v508) {
                              goto LABEL_634;
                            }
                            uint64_t v543 = v415 + 48 * (int)v684;
                            int v544 = *(_DWORD *)(v543 + 4 * v661 + 12) / 2;
                            uint64_t v545 = v516 + 20 * v544;
                            *(_DWORD *)(v545 + 16) = rectb[17];
                            rectb[17] = v544;
                            *(void *)uint64_t v545 = 0xC0000000CLL;
                            unsigned int v546 = -1431655765 * ((unint64_t)(v660 - *((void *)rectb + 5)) >> 4);
                            *(_DWORD *)(v543 + 36) = rectb[16];
                            uint64_t v508 = v543;
                          }
                          rectb[16] = v546;
                          *(_DWORD *)(v508 + ++*(_DWORD *)(result + 8) = -13;
                          *(void *)uint64_t v508 = 0xC0000000CLL;
                          goto LABEL_513;
                        }
LABEL_646:
                        uint64_t v561 = v344[12];
                        if (v561)
                        {
                          LODWORD(v562) = 0;
                          uint64_t v563 = (int *)*((void *)v344 + 5);
                          do
                          {
                            int v564 = *v563;
                            v563 += 12;
                            if (v564 == -13) {
                              uint64_t v562 = v562;
                            }
                            else {
                              uint64_t v562 = (v562 + 1);
                            }
                            --v561;
                          }
                          while (v561);
                          uint64_t v678 = v562;
                          uint64_t v681 = (int **)malloc_type_malloc(8 * v562, 0x2004093837F09uLL);
                          if (v681)
                          {
                            uint64_t v565 = v344[12];
                            if (v565)
                            {
                              int v566 = 0;
                              uint64_t v567 = (int *)*((void *)v344 + 5);
                              do
                              {
                                if (*v567 != -13) {
                                  v681[v566++] = v567;
                                }
                                v567 += 12;
                                --v565;
                              }
                              while (v565);
                            }
                            long long v806 = 0uLL;
                            long long v805 = 0uLL;
                            long long v804 = 0uLL;
                            long long v803 = 0uLL;
                            long long v802 = 0uLL;
                            long long v801 = 0uLL;
                            long long v800 = 0uLL;
                            long long v799 = 0uLL;
                            long long v798 = 0uLL;
                            long long v797 = 0uLL;
                            long long v796 = 0uLL;
                            long long v795 = 0uLL;
                            long long v794 = 0uLL;
                            long long v793 = 0uLL;
                            long long v792 = 0uLL;
                            long long v791 = 0uLL;
                            long long v790 = 0uLL;
                            long long v789 = 0uLL;
                            long long v788 = 0uLL;
                            long long v787 = 0uLL;
                            long long v786 = 0uLL;
                            long long v785 = 0uLL;
                            long long v784 = 0uLL;
                            long long v783 = 0uLL;
                            long long v782 = 0uLL;
                            long long v781 = 0uLL;
                            long long v780 = 0uLL;
                            long long v779 = 0uLL;
                            long long v778 = 0uLL;
                            memset(&__src, 0, sizeof(__src));
                            uint64_t v568 = v678;
                            if (v678 >= 0xB)
                            {
                              uint64_t v608 = (uint64_t)&v681[v678 - 1];
                              uint64_t v685 = &__src;
                              uint64_t v609 = v681;
LABEL_690:
                              while (2)
                              {
                                uint64_t v688 = v609 + 2;
                                uint64_t v610 = (int **)v608;
                                for (widthe = *(double *)&v609; ; uint64_t v609 = *(int ***)&widthe)
                                {
                                  while (1)
                                  {
                                    unint64_t v611 = (4 * (v610 - v609 + (v610 - v609 < 0))) & 0xFFFFFFFFFFFFFFF8;
                                    unsigned int v612 = v609[1];
                                    v609[1] = *(int **)((char *)v609 + v611);
                                    *(int **)((char *)v609 + v611) = v612;
                                    uint64_t v613 = *((void *)v344 + 1);
                                    unsigned int v614 = *v609;
                                    uint64_t v615 = v609[1];
                                    BOOL v616 = TriangleGreater(v613, *v609, v615);
                                    unint64_t v617 = *v610;
                                    if (v616)
                                    {
                                      if (TriangleGreater(v613, *v610, v615))
                                      {
                                        if (TriangleGreater(v613, v614, v617))
                                        {
                                          *uint64_t v610 = v614;
                                          *uint64_t v609 = v609[1];
                                          v609[1] = v617;
                                        }
                                        else
                                        {
                                          *(int8x16_t *)uint64_t v609 = vextq_s8(*(int8x16_t *)v609, *(int8x16_t *)v609, 8uLL);
                                        }
                                      }
                                      else
                                      {
                                        *uint64_t v610 = v614;
                                        *uint64_t v609 = v617;
                                      }
                                    }
                                    else if (TriangleGreater(v613, v615, *v610))
                                    {
                                      if (TriangleGreater(v613, v614, v617))
                                      {
                                        *uint64_t v609 = v617;
                                        *uint64_t v610 = v614;
                                        *uint64_t v610 = v609[1];
                                        v609[1] = v614;
                                      }
                                      else
                                      {
                                        v609[1] = v617;
                                        *uint64_t v610 = v615;
                                      }
                                    }
                                    uint64_t v618 = v688;
                                    uint64_t v692 = v610;
                                    while (1)
                                    {
                                      uint64_t v619 = *((void *)rectb + 1);
                                      uint64_t v620 = v609[1];
                                      do
                                      {
                                        uint64_t v621 = v618;
                                        uint64_t v623 = *v618++;
                                        uint64_t v622 = v623;
                                      }
                                      while (TriangleGreater(v619, v620, v623));
                                      do
                                      {
                                        uint64_t v624 = v610;
                                        int v626 = *--v610;
                                        float32x4_t v625 = v626;
                                      }
                                      while (TriangleGreater(v619, v626, v620));
                                      if (v610 < v618) {
                                        break;
                                      }
                                      *uint64_t v621 = v625;
                                      *uint64_t v610 = v622;
                                      uint64_t v609 = *(int ***)&widthe;
                                    }
                                    *(void *)(*(void *)&widthe + ++*(_DWORD *)(result + 8) = v625;
                                    *uint64_t v610 = v620;
                                    unint64_t v627 = ((unint64_t)v610 - *(void *)&widthe) >> 3;
                                    uint64_t v608 = (uint64_t)v692;
                                    unint64_t v628 = (unint64_t)((char *)v692 - (char *)v621 + 8) >> 3;
                                    uint64_t v610 = v624 - 2;
                                    if ((int)v627 <= (int)v628) {
                                      break;
                                    }
                                    int8x16_t v344 = rectb;
                                    if ((int)v627 <= 10)
                                    {
                                      int8x16_t v629 = v685;
                                      _ZF = v685 == &__src;
                                      goto LABEL_715;
                                    }
                                    uint64_t v609 = *(int ***)&widthe;
                                    if ((int)v628 >= 11)
                                    {
                                      v685->CGFloat a = widthe;
                                      *(void *)&v685->b = v610;
                                      uint64_t v609 = v621;
                                      uint64_t v685 = (CGAffineTransform *)((char *)v685 + 16);
                                      goto LABEL_690;
                                    }
                                  }
                                  if ((int)v628 <= 10) {
                                    break;
                                  }
                                  int8x16_t v344 = rectb;
                                  if ((int)v627 < 11)
                                  {
                                    uint64_t v609 = v621;
                                    goto LABEL_690;
                                  }
                                  *(void *)&v685->CGFloat a = v621;
                                  *(void *)&v685->b = v692;
                                  uint64_t v685 = (CGAffineTransform *)((char *)v685 + 16);
                                }
                                int8x16_t v629 = v685;
                                _ZF = v685 == &__src;
                                int8x16_t v344 = rectb;
LABEL_715:
                                uint64_t v568 = v678;
                                if (!_ZF)
                                {
                                  uint64_t v609 = *(int ***)&v629[-1].tx;
                                  uint64_t v685 = (CGAffineTransform *)((char *)v629 - 16);
                                  uint64_t v608 = *(void *)&v629[-1].ty;
                                  continue;
                                }
                                break;
                              }
                            }
                            widthd = &v681[v568];
                            unint64_t v569 = (unint64_t)(widthd - 1);
                            if (widthd - 1 > v681)
                            {
                              uint64_t v570 = -1;
                              do
                              {
                                uint64_t v571 = 0;
                                uint64_t v572 = v570;
                                unint64_t v573 = v569;
                                --v570;
                                float v575 = *(int **)(v569 - 8);
                                v569 -= 8;
                                float v574 = v575;
                                uint64_t v576 = *((void *)rectb + 1);
                                while (TriangleGreater(v576, v574, *(int **)(v573 + 8 * v571)))
                                {
                                  ++v571;
                                  if (!(v572 + v571))
                                  {
                                    unint64_t v577 = (unint64_t)widthd;
                                    goto LABEL_666;
                                  }
                                }
                                unint64_t v577 = (unint64_t)&(&widthd[v572])[v571];
LABEL_666:
                                if (v569 != v577 - 8)
                                {
                                  if (v573 < v577)
                                  {
                                    uint64_t v578 = 0;
                                    do
                                    {
                                      uint64_t v579 = v573 + v578;
                                      *(void *)(v579 - ++*(_DWORD *)(result + 8) = *(void *)(v573 + v578);
                                      v578 += 8;
                                    }
                                    while (v579 + 8 < v577);
                                  }
                                  *(void *)(v577 - ++*(_DWORD *)(result + 8) = v574;
                                }
                              }
                              while (v569 > (unint64_t)v681);
                            }
                            int v580 = malloc_type_malloc(0x28uLL, 0x102004050851865uLL);
                            unint64_t v2 = v641;
                            if (v580)
                            {
                              uint64_t v581 = v580;
                              *int v580 = *rectb;
                              v580[4] = rectb[4];
                              v580[8] = v678;
                              uint64_t v582 = malloc_type_malloc(16 * v678, 0x1000040451B5BE8uLL);
                              if (v582)
                              {
                                uint64_t v583 = v582;
                                *((void *)v581 + 3) = v582;
                                if (v678)
                                {
                                  uint64_t v584 = 0;
                                  uint64_t v585 = v582;
                                  do
                                  {
                                    uint64_t v586 = 0;
                                    uint64_t v587 = v681[v584];
                                    v585[3] = 0;
                                    do
                                    {
                                      unsigned int v588 = &v587[v586];
                                      v585[v586] = *v588;
                                      if (v588[6] == -1) {
                                        v585[3] |= 1 << v586;
                                      }
                                      ++v586;
                                    }
                                    while (v586 != 3);
                                    ++v584;
                                    v585 += 4;
                                  }
                                  while (v584 != v678);
                                }
                                int v589 = malloc_type_malloc(72 * rectb[4], 0x1000040FF89C88EuLL);
                                if (v589)
                                {
                                  *((void *)v581 + 1) = v589;
                                  int8x16_t v344 = rectb;
                                  if (rectb[4])
                                  {
                                    unint64_t v590 = 0;
                                    uint64_t v591 = *((void *)rectb + 1);
                                    do
                                    {
                                      *(_OWORD *)int v589 = *(_OWORD *)v591;
                                      long long v592 = *(_OWORD *)(v591 + 16);
                                      long long v593 = *(_OWORD *)(v591 + 32);
                                      long long v594 = *(_OWORD *)(v591 + 48);
                                      v589[8] = *(void *)(v591 + 64);
                                      *((_OWORD *)v589 + 2) = v593;
                                      *((_OWORD *)v589 + 3) = v594;
                                      *((_OWORD *)v589 + 1) = v592;
                                      ++v590;
                                      v589 += 9;
                                      v591 += 72;
                                    }
                                    while (v590 < rectb[4]);
                                  }
                                  free(v681);
                                  if (RenderTriangleMesh(*((double **)v581 + 1), v581[4], *((int **)v581 + 3), v581[8], v651, (uint64_t *)&v742, &v743.origin.x))
                                  {
                                    CGContextSaveGState(v641);
                                    CGContextResetCTM((uint64_t)v641, v595, v596, v597, v598, v599, v600, v601);
                                    CGFloat v602 = v743.size.width;
                                    CGFloat v603 = v743.size.height;
                                    CGFloat v604 = v743.origin.x;
                                    CGFloat v605 = v743.origin.y;
                                    if (v743.size.width < 0.0 || v743.size.height < 0.0)
                                    {
                                      CGRect v814 = CGRectStandardize(v743);
                                      unint64_t v606 = (unint64_t)v814.size.width;
                                      v814.origin.CGFloat x = v604;
                                      v814.origin.CGFloat y = v605;
                                      v814.size.uint64_t width = v602;
                                      v814.size.CGFloat height = v603;
                                      *(CGRect *)(&v607 - 3) = CGRectStandardize(v814);
                                    }
                                    else
                                    {
                                      unint64_t v606 = (unint64_t)v743.size.width;
                                      double v607 = v743.size.height;
                                    }
                                    size_t widthg = v606;
                                    size_t v632 = (unint64_t)v607;
                                    size_t v633 = (v640 * v606) >> 3;
                                    uint64_t v634 = (uint64_t)v742;
                                    unint64_t v635 = v633 * (unint64_t)v607;
                                    check_clients_buffer("CGDataProviderCreateWithData", v742, v635);
                                    uint64_t v636 = CGDataProviderCreateWithDataInternal(0, v634, v635, (uint64_t)patch_data_release_20191, 0);
                                    CGImageRef v637 = CGImageCreate(widthg, v632, 8uLL, v640, v633, *(CGColorSpaceRef *)(v672 + 24), 3u, v636, 0, 0, kCGRenderingIntentDefault);
                                    CGDataProviderRelease(v636);
                                    CGImageSetCachingFlags(v637, 1);
                                    v815.origin.CGFloat x = v604;
                                    v815.origin.CGFloat y = v605;
                                    v815.size.uint64_t width = v602;
                                    v815.size.CGFloat height = v603;
                                    CGContextDrawImage(v641, v815, v637);
                                    CGContextRestoreGState(v641);
                                    if (v637) {
                                      CFRelease(v637);
                                    }
                                    uint64_t v638 = (void *)*((void *)v581 + 1);
                                    int8x16_t v344 = rectb;
                                    if (v638) {
                                      free(v638);
                                    }
                                    uint64_t v639 = (void *)*((void *)v581 + 3);
                                    if (v639) {
                                      free(v639);
                                    }
                                    free(v581);
                                  }
                                }
                                else
                                {
                                  free(v681);
                                  free(v581);
                                  free(v583);
                                  int8x16_t v344 = rectb;
                                }
                                goto LABEL_722;
                              }
                              free(v681);
                              float v631 = (int **)v581;
                            }
                            else
                            {
                              float v631 = v681;
                            }
                            free(v631);
                            int8x16_t v344 = rectb;
                          }
                        }
LABEL_722:
                        CoonsMeshFree((void **)v344);
                        int v8 = v649;
                        uint64_t v5 = v650;
                        uint64_t v10 = v647;
                        goto LABEL_723;
                      }
                    }
                  }
                  CoonsMeshFree((void **)v243);
                }
                free(v666);
              }
              free(v668);
            }
            int8x16_t v344 = 0;
            goto LABEL_466;
          }
          long long v179 = (const CGFloat *)malloc_type_malloc(size, 0x100004000313F17uLL);
          long long v180 = (CGFloat *)v179;
          if (v5)
          {
            uint64_t v181 = 0;
            long long v182 = v8;
            do
            {
              v179[v181] = 0.0;
              double v183 = 0.0;
              uint64_t v184 = v182;
              uint64_t v185 = 4;
              do
              {
                double v183 = v183 + *v184;
                v179[v181] = v183;
                uint64_t v184 = (double *)((char *)v184 + v10);
                --v185;
              }
              while (v185);
              v179[v181++] = v183 * v12;
              ++v182;
            }
            while (v181 != v5);
          }
          v179[v5] = 1.0;
          CGContextSetFillColor(v2, v179);
          CGContextMoveToPoint(v2, x, y);
          CGContextAddCurveToPoint(v2, cp1x, cp1y, cp2x, cp2y, v751, v752);
          CGContextAddCurveToPoint(v2, v753, v754, v755, v756, v757, v758);
          CGContextAddCurveToPoint(v2, v759, v760, v761, v762, v763, v764);
          CGContextAddCurveToPoint(v2, v765, v766, v767, v768, x, y);
          CGContextDrawPath(v2, kCGPathFill);
          for (uint64_t m = 0; m != 4; ++m)
          {
            if (v5)
            {
              for (uint64_t n = 0; n != v5; ++n)
              {
                uint64_t v188 = 0;
                v180[n] = 0.0;
                double v189 = 0.0;
                do
                {
                  double v189 = v189 + v8[n + (((_BYTE)m + (_BYTE)v188) & 3) * v5];
                  v180[n] = v189;
                  ++v188;
                }
                while (v188 != 2);
                v180[n] = v189 * 0.5;
              }
            }
            v180[v5] = 1.0;
            CGContextSetStrokeColor(v2, v180);
            CGContextSaveGState(v2);
            CGContextSetLineWidth(v2, 2.0);
            CGRect v190 = &x + 6 * m;
            double v191 = *v190;
            double v192 = v190[1];
            uint64_t v193 = 3 * m + 3;
            if (3 * m == 9) {
              uint64_t v193 = 0;
            }
            float v194 = &x + 2 * v193;
            CGFloat v196 = *v194;
            double v195 = v194[1];
            double v197 = vabdd_f64(v191, *v194);
            double v198 = vabdd_f64(v192, v195);
            CGContextMoveToPoint(v2, v191, v192);
            if (v197 < v11 && v198 < v11) {
              CGContextAddLineToPoint(v2, v196, v195);
            }
            else {
              CGContextAddCurveToPoint(v2, v190[2], v190[3], v190[4], v190[5], v196, v195);
            }
            CGContextSetCTM((uint64_t)v2, (long long *)&CGAffineTransformIdentity, v200, v201, v202, v203, v204, v205);
            CGContextDrawPath(v2, kCGPathStroke);
            CGContextRestoreGState(v2);
          }
          free(v180);
LABEL_724:
          BytePtr = v682;
          unint64_t v19 = v671;
        }
        while (v17 || v682 != v671);
LABEL_737:
        char v13 = 0;
        uint64_t v7 = v672;
        if ((v673 & 1) == 0)
        {
          free(v8);
          return;
        }
      }
    }
  }
}

void patch_data_release_20191(int a1, void *a2)
{
}

uint64_t __type6_info_getTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&type6_info_getTypeID_class);
  type6_info_getTypeID_id = result;
  return result;
}

void type6_info_finalize(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 104);
  if (v2) {
    CFRelease(v2);
  }
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 24));
  uint64_t v3 = *(const void **)(a1 + 96);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(void **)(a1 + 88);

  free(v4);
}

uint64_t peephole_if (uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return 0;
  }
  if (*(_DWORD *)(a1 - 16) != 259 || *(_DWORD *)(a1 - 32) != 256 || *(unsigned char *)(a1 - 24)) {
    return 0;
  }
  uint64_t v4 = *(unint64_t **)(a1 - 8);
  *a3 = -3;
  type4_program_release(v4);
  return 1;
}

uint64_t peephole_le(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return 0;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1) {
    return 0;
  }
  int v10 = 0;
  int v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  uint64_t result = 0;
  if (v7)
  {
    BOOL v9 = v10 < 1;
    *(_DWORD *)(a1 - 32) = 256;
    *(unsigned char *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_lt(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return 0;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1) {
    return 0;
  }
  unsigned int v10 = 0;
  int v7 = type4_value_compare((int *)&v10, a1 - 32, (double *)(a1 - 16));
  uint64_t result = 0;
  if (v7)
  {
    unsigned int v9 = v10 >> 31;
    *(_DWORD *)(a1 - 32) = 256;
    *(unsigned char *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_ge(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return 0;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1) {
    return 0;
  }
  int v10 = 0;
  int v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  uint64_t result = 0;
  if (v7)
  {
    BOOL v9 = v10 >= 0;
    *(_DWORD *)(a1 - 32) = 256;
    *(unsigned char *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_gt(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return 0;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1) {
    return 0;
  }
  int v10 = 0;
  int v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  uint64_t result = 0;
  if (v7)
  {
    BOOL v9 = v10 > 0;
    *(_DWORD *)(a1 - 32) = 256;
    *(unsigned char *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_ne(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return 0;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1) {
    return 0;
  }
  int v10 = 0;
  int v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  uint64_t result = 0;
  if (v7)
  {
    BOOL v9 = v10 != 0;
    *(_DWORD *)(a1 - 32) = 256;
    *(unsigned char *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_eq(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return 0;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1) {
    return 0;
  }
  int v10 = 0;
  int v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  uint64_t result = 0;
  if (v7)
  {
    BOOL v9 = v10 == 0;
    *(_DWORD *)(a1 - 32) = 256;
    *(unsigned char *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_copy(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 2 || *(_DWORD *)(a1 - 16) != 257 || *(_DWORD *)(a1 - 8) != 1) {
    return 0;
  }
  *(_DWORD *)(a1 - 16) = 260;
  *(void *)(a1 - ++*(_DWORD *)(result + 8) = type4_op_dup;
  *a3 = -1;
  return 1;
}

uint64_t peephole_dup(_OWORD *a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 2 || (*((_DWORD *)a1 - 4) - 257) > 1) {
    return 0;
  }
  *a1 = *(a1 - 1);
  *a3 = 0;
  return 1;
}

uint64_t peephole_index(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3)
  {
    if (a2 != 2) {
      return 0;
    }
    uint64_t v3 = (_DWORD *)(a1 - 16);
    if (*(_DWORD *)(a1 - 16) != 257) {
      return 0;
    }
    int v10 = *(_DWORD *)(a1 - 8);
    BOOL v9 = (uint64_t (**)(uint64_t))(a1 - 8);
    if (v10) {
      return 0;
    }
    uint64_t v4 = v9;
LABEL_16:
    *uint64_t v3 = 260;
    *uint64_t v4 = type4_op_dup;
LABEL_24:
    *a3 = -1;
    return 1;
  }
  uint64_t v3 = (_DWORD *)(a1 - 16);
  if (*(_DWORD *)(a1 - 16) != 257) {
    return 0;
  }
  uint64_t v4 = (uint64_t (**)(uint64_t))(a1 - 8);
  int v5 = *(_DWORD *)(a1 - 8);
  if (!v5)
  {
    int v13 = *(_DWORD *)(a1 - 32);
    double v6 = (_OWORD *)(a1 - 32);
    if ((v13 - 257) <= 1) {
      goto LABEL_23;
    }
    goto LABEL_16;
  }
  if (a2 < 4) {
    return 0;
  }
  if (v5 == 1)
  {
    if ((*(_DWORD *)(a1 - 32) - 257) <= 1)
    {
      int v8 = *(_DWORD *)(a1 - 48);
      double v6 = (_OWORD *)(a1 - 48);
      int v7 = v8;
      goto LABEL_22;
    }
    return 0;
  }
  uint64_t v11 = 0;
  if (a2 >= 5 && v5 == 2)
  {
    if ((*(_DWORD *)(a1 - 32) - 257) <= 1 && (*(_DWORD *)(a1 - 48) - 257) <= 1)
    {
      int v14 = *(_DWORD *)(a1 - 64);
      double v6 = (_OWORD *)(a1 - 64);
      int v7 = v14;
LABEL_22:
      if ((v7 - 257) <= 1)
      {
LABEL_23:
        *(_OWORD *)uint64_t v3 = *v6;
        goto LABEL_24;
      }
    }
    return 0;
  }
  return v11;
}

uint64_t peephole_exch(uint64_t a1, unint64_t a2, int *a3)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v3 = (long long *)(a1 - 16);
  int v4 = *(_DWORD *)(a1 - 16);
  if (v4 == 260)
  {
    if (*(BOOL (**)(uint64_t))(a1 - 8) == type4_op_exch)
    {
      int v5 = -2;
LABEL_10:
      *a3 = v5;
      return 1;
    }
    return 0;
  }
  uint64_t v6 = 0;
  if (a2 >= 3 && (v4 - 257) <= 1)
  {
    int v8 = *(_DWORD *)(a1 - 32);
    int v7 = (long long *)(a1 - 32);
    if ((v8 - 257) <= 1)
    {
      long long v9 = *v7;
      *int v7 = *v3;
      *uint64_t v3 = v9;
      int v5 = -1;
      goto LABEL_10;
    }
    return 0;
  }
  return v6;
}

uint64_t peephole_pop(uint64_t a1, unint64_t a2, int *a3)
{
  if (a2 < 2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 - 16);
  if ((v3 - 257) < 2) {
    goto LABEL_3;
  }
  if (v3 != 260) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(a1 - 8);
  if (v6 == type4_op_dup)
  {
LABEL_3:
    int v4 = -2;
LABEL_4:
    *a3 = v4;
    return 1;
  }
  if (a2 <= 2) {
    return 0;
  }
  if (v6 == type4_op_copy && *(_DWORD *)(a1 - 32) == 257 && *(_DWORD *)(a1 - 24) == 1
    || v6 == type4_op_index && *(_DWORD *)(a1 - 32) == 257)
  {
LABEL_15:
    int v4 = -3;
    goto LABEL_4;
  }
  if (a2 >= 4
    && (char *)v6 == (char *)type4_op_pop
    && *(_DWORD *)(a1 - 32) == 260
    && *(uint64_t (**)(uint64_t))(a1 - 24) == type4_op_copy
    && *(_DWORD *)(a1 - 48) == 257
    && *(_DWORD *)(a1 - 40) == 2)
  {
    int v4 = -4;
    goto LABEL_4;
  }
  if ((char *)v6 == (char *)type4_op_exch)
  {
    if ((*(_DWORD *)(a1 - 32) - 257) <= 1)
    {
      *(_OWORD *)(a1 - 16) = *(_OWORD *)(a1 - 32);
      *(_DWORD *)(a1 - 32) = 260;
      *(void *)(a1 - 24) = type4_op_pop;
      goto LABEL_41;
    }
    if ((char *)v6 == (char *)type4_op_exch
      && a2 >= 4
      && *(_DWORD *)(a1 - 32) == 260
      && *(uint64_t (**)(uint64_t))(a1 - 24) == type4_op_copy
      && *(_DWORD *)(a1 - 48) == 257
      && *(_DWORD *)(a1 - 40) == 2)
    {
      *(_DWORD *)(a1 - 4++*(_DWORD *)(result + 8) = 260;
      *(void *)(a1 - 40) = type4_op_dup;
      goto LABEL_15;
    }
  }
  if (v6 == type4_op_copy && *(_DWORD *)(a1 - 32) == 257 && *(_DWORD *)(a1 - 24) == 2)
  {
    *(_DWORD *)(a1 - 16) = 260;
    *(void *)(a1 - ++*(_DWORD *)(result + 8) = type4_op_index;
    *(_DWORD *)(a1 - 32) = 257;
    *(_DWORD *)(a1 - 24) = 1;
LABEL_41:
    int v4 = -1;
    goto LABEL_4;
  }
  uint64_t v5 = 0;
  if (a2 >= 5 && (char *)v6 == (char *)type4_op_pop)
  {
    if (*(_DWORD *)(a1 - 32) != 260
      || *(uint64_t (**)(uint64_t *))(a1 - 24) != type4_op_roll
      || *(_DWORD *)(a1 - 48) != 257
      || *(_DWORD *)(a1 - 40) != 1
      || *(_DWORD *)(a1 - 64) != 257
      || *(_DWORD *)(a1 - 56) != 3)
    {
      return 0;
    }
    *(_DWORD *)(a1 - 16) = 260;
    *(void *)(a1 - ++*(_DWORD *)(result + 8) = type4_op_pop;
    *(_DWORD *)(a1 - 32) = 260;
    *(void *)(a1 - 24) = type4_op_exch;
    *(_DWORD *)(a1 - 4++*(_DWORD *)(result + 8) = 260;
    *(void *)(a1 - 40) = type4_op_pop;
    *(_DWORD *)(a1 - 64) = 260;
    *(void *)(a1 - 56) = type4_op_exch;
    goto LABEL_41;
  }
  return v5;
}

uint64_t peephole_roll(uint64_t a1, unint64_t a2, int *a3)
{
  if (a2 < 3) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 - 32);
  if (v3 == 257 && *(_DWORD *)(a1 - 24) == 1) {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 - 16) != 257) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 - 8);
  if (v3 == 257 && v5 == 1)
  {
    int v8 = *(_DWORD *)(a1 - 24);
    if (v8 == 2)
    {
      *(_DWORD *)(a1 - 32) = 260;
      *(void *)(a1 - 24) = type4_op_exch;
      int v4 = -2;
      goto LABEL_15;
    }
    if (a2 < 6) {
      return 0;
    }
    goto LABEL_17;
  }
  uint64_t v7 = 0;
  if (a2 >= 6 && v3 == 257)
  {
    int v8 = *(_DWORD *)(a1 - 24);
LABEL_17:
    if (*(_DWORD *)(a1 - 48) == 260
      && *(uint64_t (**)(uint64_t *))(a1 - 40) == type4_op_roll
      && *(_DWORD *)(a1 - 64) == 257
      && *(_DWORD *)(a1 - 80) == 257
      && *(_DWORD *)(a1 - 72) == v8)
    {
      int v9 = *(_DWORD *)(a1 - 56) + v5;
      *(_DWORD *)(a1 - 64) = 257;
      *(_DWORD *)(a1 - 56) = v9;
LABEL_4:
      int v4 = -3;
LABEL_15:
      *a3 = v4;
      return 1;
    }
    return 0;
  }
  return v7;
}

uint64_t peephole_cvr(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 - 16);
  if ((v3 - 257) > 1) {
    return 0;
  }
  if (v3 == 258)
  {
    int v4 = *(_DWORD *)(a1 - 12);
    double v5 = *(double *)(a1 - 8);
    goto LABEL_8;
  }
  if (v3 != 257) {
    return 0;
  }
  int v4 = 0;
  double v5 = (double)*(int *)(a1 - 8);
LABEL_8:
  *(_DWORD *)(a1 - 16) = 258;
  *(_DWORD *)(a1 - 12) = v4;
  *(double *)(a1 - ++*(_DWORD *)(result + 8) = v5;
  *a3 = -1;
  return 1;
}

uint64_t peephole_cvi(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  double v5 = (_OWORD *)(a1 - 16);
  if ((*(_DWORD *)(a1 - 16) - 257) > 1) {
    return 0;
  }
  long long v10 = 0uLL;
  char v9 = 0;
  int v7 = type4_value_cvi((uint64_t)&v10, (uint64_t)v5, &v9);
  uint64_t result = 0;
  if (v7)
  {
    if (!v9)
    {
      _OWORD *v5 = v10;
      *a3 = -1;
      return 1;
    }
  }
  return result;
}

uint64_t peephole_mul(uint64_t a1, unint64_t a2, int *a3)
{
  if (a2 < 3)
  {
    if (a2 != 2) {
      return 0;
    }
    int v4 = *(_DWORD *)(a1 - 16);
  }
  else
  {
    int v4 = *(_DWORD *)(a1 - 16);
    if ((v4 - 257) <= 1 && (*(_DWORD *)(a1 - 32) - 257) <= 1)
    {
      type4_value_mul(a1 - 32, a1 - 32, a1 - 16);
LABEL_15:
      int v5 = -2;
      goto LABEL_16;
    }
  }
  if (v4 == 258)
  {
    double v6 = *(double *)(a1 - 8);
    if (v6 == 0.0)
    {
      int v5 = 0;
      *(_DWORD *)(a1 - 16) = 260;
      *(void *)(a1 - ++*(_DWORD *)(result + 8) = type4_op_pop;
      *(_DWORD *)a1 = 258;
      *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
      goto LABEL_16;
    }
    if (v6 == 1.0) {
      goto LABEL_15;
    }
  }
  else if (v4 == 257)
  {
    int v5 = *(_DWORD *)(a1 - 8);
    if (v5 == 1) {
      goto LABEL_15;
    }
    if (!v5)
    {
      *(_DWORD *)(a1 - 16) = 260;
      *(void *)(a1 - ++*(_DWORD *)(result + 8) = type4_op_pop;
      *(_DWORD *)a1 = 257;
      *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
LABEL_16:
      *a3 = v5;
      return 1;
    }
  }
  return 0;
}

uint64_t peephole_sub(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3)
  {
    if (a2 != 2) {
      return 0;
    }
    int v4 = *(_DWORD *)(a1 - 16);
LABEL_7:
    if (v4 == 258)
    {
      if (*(double *)(a1 - 8) == 0.0) {
        goto LABEL_12;
      }
    }
    else if (v4 == 257 && !*(_DWORD *)(a1 - 8))
    {
      goto LABEL_12;
    }
    return 0;
  }
  int v4 = *(_DWORD *)(a1 - 16);
  if ((v4 - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1) {
    goto LABEL_7;
  }
  type4_value_sub((double *)(a1 - 32), (double *)(a1 - 32), a1 - 16);
LABEL_12:
  *a3 = -2;
  return 1;
}

uint64_t peephole_add(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3)
  {
    if (a2 != 2) {
      return 0;
    }
    int v4 = *(_DWORD *)(a1 - 16);
LABEL_7:
    if (v4 == 258)
    {
      if (*(double *)(a1 - 8) == 0.0) {
        goto LABEL_12;
      }
    }
    else if (v4 == 257 && !*(_DWORD *)(a1 - 8))
    {
      goto LABEL_12;
    }
    return 0;
  }
  int v4 = *(_DWORD *)(a1 - 16);
  if ((v4 - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1) {
    goto LABEL_7;
  }
  type4_value_add((double *)(a1 - 32), a1 - 32, (double *)(a1 - 16));
LABEL_12:
  *a3 = -2;
  return 1;
}

void deZoneDescendantsOf(void *a1)
{
  unint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(a1, "count"));
  [a1 childrenOfClass:objc_opt_class() into:v2];
  uint64_t v3 = [v2 count];
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      int v5 = (void *)[v2 objectAtIndex:i];
      if (([v5 hasRotatedCharacters] & 1) == 0)
      {
        deZoneDescendantsOf(v5);
        [v5 promoteChildren];
        [v5 remove];
      }
    }
  }

  deZoneTablesIn(a1);
}

void deZoneTablesIn(void *a1)
{
  unsigned int v2 = [a1 countOfClass:objc_opt_class()];
  if (v2)
  {
    unsigned int v3 = v2;
    id v9 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v2];
    [a1 childrenOfClass:objc_opt_class() into:v9];
    for (uint64_t i = 0; i != v3; ++i)
    {
      int v5 = (void *)[v9 objectAtIndex:i];
      int v6 = [v5 count];
      if (v6)
      {
        int v7 = v6;
        uint64_t v8 = 0;
        do
        {
          deZoneDescendantsOf([v5 childAtIndex:v8]);
          uint64_t v8 = (v8 + 1);
        }
        while (v7 != v8);
      }
    }
  }
}

uint64_t CGPDFShadingType4Init(void *a1, uint64_t *a2, _OWORD *a3)
{
  if (type4_info_getTypeID_onceToken != -1) {
    dispatch_once(&type4_info_getTypeID_onceToken, &__block_literal_global_20264);
  }
  uint64_t result = pdf_create_cftype();
  if (!result) {
    return result;
  }
  int v7 = (void *)result;
  CGPDFObjectRef v17 = 0;
  CGPDFInteger value = 0;
  CGPDFDataFormat format = CGPDFDataFormatRaw;
  *a2 = result;
  *a3 = CGPDFShadingType4Init_type4_callbacks;
  if (a1) {
    uint64_t v8 = (CGPDFDictionary *)a1[3];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!CGPDFDictionaryGetInteger(v8, "BitsPerCoordinate", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 0x20 || ((1 << value) & 0x101011116) == 0)
  {
    return 0;
  }
  v7[3] = value;
  if (!CGPDFDictionaryGetInteger(v8, "BitsPerComponent", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 0x10 || ((1 << value) & 0x11116) == 0)
  {
    return 0;
  }
  v7[4] = value;
  if (!CGPDFDictionaryGetInteger(v8, "BitsPerFlag", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 8 || ((1 << value) & 0x114) == 0)
  {
    return 0;
  }
  v7[5] = value;
  v7[11] = 0;
  if (!CGPDFDictionaryGetObject(v8, "Function", &v17)
    || (uint64_t result = (uint64_t)CGPDFShadingCreateShadingFunction((uint64_t)v17, 1uLL), (v7[11] = result) != 0))
  {
    if (a1) {
      id v9 = (void *)a1[5];
    }
    else {
      id v9 = 0;
    }
    uint64_t v10 = v7[11];
    if (v10)
    {
      if (CGColorSpaceGetType(v9) == 7)
      {
        return 0;
      }
      uint64_t v10 = v7[11];
      if (v10) {
        uint64_t v11 = *(void *)(v10 + 48);
      }
      else {
        uint64_t v11 = 0;
      }
      if (v9) {
        uint64_t v12 = *(void *)(v9[3] + 48);
      }
      else {
        uint64_t v12 = 0;
      }
      if (v11 != v12)
      {
        pdf_error("invalid function for type 4 shading");
        return 0;
      }
    }
    if (v9)
    {
      CFRetain(v9);
      v7[2] = v9;
      if (v7[11]) {
        uint64_t v13 = 2;
      }
      else {
        uint64_t v13 = 2 * *(void *)(v9[3] + 48);
      }
    }
    else
    {
      v7[2] = 0;
      uint64_t v13 = 2 * (v10 != 0);
    }
    int v14 = malloc_type_malloc(8 * (v13 + 4), 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    if (!v14) {
      return 0;
    }
    if (!CGPDFDictionaryGetNumbers(v8, "Decode", (uint64_t)v14, (CGPDFArray *)(v13 + 4)))
    {
      free(v14);
      return 0;
    }
    v7[6] = *v14;
    v7[8] = v14[1];
    v7[7] = v14[2];
    v7[9] = v14[3];
    memmove(v14, v14 + 4, 8 * v13);
    v7[10] = v14;
    if (a1) {
      uint64_t v15 = (CGPDFStream *)a1[4];
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t result = (uint64_t)CGPDFStreamCopyData(v15, &format);
    v7[12] = result;
    if (result)
    {
      if (format == CGPDFDataFormatRaw) {
        return 1;
      }
      pdf_error("invalid shading data format.");
      return 0;
    }
  }
  return result;
}

void type4_release_info(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t type4_create_shading(CGRect *a1, const void *a2)
{
  unsigned int v3 = &CGRectNull;
  p_CGFloat height = &CGRectNull.size.height;
  p_CGFloat y = &CGRectNull.origin.y;
  p_uint64_t size = &CGRectNull.size;
  if (a1)
  {
    p_uint64_t size = &a1[2].size;
    p_CGFloat y = &a1[2].origin.y;
    unsigned int v3 = a1 + 2;
    p_CGFloat height = &a1[2].size.height;
  }
  double v7 = *p_height;
  double x = v3->origin.x;
  double v9 = *p_y;
  double width = p_size->width;
  v21[0] = *(void *)&v3->origin.x;
  *(double *)&v21[1] = v9;
  *(double *)&v21[2] = width;
  *(double *)&v21[3] = v7;
  if (a1)
  {
    CGFloat y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    CGFloat y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  BOOL v17 = x == -8.98846567e307;
  if (v9 != -8.98846567e307) {
    BOOL v17 = 0;
  }
  if (width != 1.79769313e308) {
    BOOL v17 = 0;
  }
  BOOL v18 = v7 == 1.79769313e308 && v17;
  if (a2)
  {
    CFRetain(a2);
    if (y == 0.0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (y == 0.0) {
      return result;
    }
  }
  if (v18) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = v21;
  }
  uint64_t result = CGShadingCreateEmpty(0, *(void **)&y, (uint64_t)Components, (uint64_t)v20, v12, v13, v14, v15);
  *(void *)(result + 80) = a2;
  *(_OWORD *)(result + 96) = type4_create_shading_type4_drawing_callbacks;
  *(void *)(result + 112) = off_1ED099160;
  return result;
}

void cg_shading_type4_release(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void cg_shading_type4_draw(uint64_t a1, CGContextRef c)
{
  v83[3] = *MEMORY[0x1E4F143B8];
  uint64_t v74 = a1;
  unsigned int v3 = *(CGColorSpace **)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(*((void *)v3 + 3) + 48);
    uint64_t v5 = v4 + 1;
    if ((unint64_t)(v4 + 1) > 5) {
      return;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 1;
  }
  uint64_t v82 = 0;
  memset(v83, 0, 24);
  memset(&v81, 0, sizeof(v81));
  int v80 = 0;
  double v77 = 0;
  uint64_t v78 = 0;
  v76[1] = 0;
  memset(&v75, 0, sizeof(v75));
  CGContextSetFillColorSpace(c, v3);
  CGContextSetStrokeColorSpace(c, *(CGColorSpaceRef *)(v74 + 16));
  CGContextGetCTM(&v75, c);
  int v6 = CGTriangleMeshCreate(*(void **)(v74 + 16), *(const void **)(v74 + 88));
  double v7 = v6;
  if (v6) {
    uint64_t v8 = v6[1];
  }
  else {
    uint64_t v8 = 0;
  }
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(*(CFDataRef *)(v74 + 96));
  CFIndex Length = CFDataGetLength(*(CFDataRef *)(v74 + 96));
  v76[0] = BytePtr;
  double v77 = &BytePtr[Length];
  LODWORD(v7++*(_DWORD *)(result + 8) = 0;
  uint64_t v79 = 0;
  while (v76[0] != v77)
  {
    do
      type4_read_triangle(v74, v76, (float64x2_t *)&v75, (uint64_t)v7, v8, v11);
    while (v79);
  }
  if (v7)
  {
    uint64_t v12 = v7[9];
    if (v12)
    {
      uint64_t v66 = &v63;
      is_mul_ok(3 * v12, 0x48uLL);
      uint64_t v13 = (double *)MEMORY[0x1F4188790](216 * v12, v11);
      BOOL v17 = (double *)((char *)&v63 - v16);
      char v65 = v17;
      if (v14 <= 0x38E38E38E38E38DLL) {
        BOOL v18 = v17;
      }
      else {
        BOOL v18 = 0;
      }
      if (v14 - 0x38E38E38E38E38ELL >= 0xFC71C71C71C71CF3)
      {
        uint64_t v13 = (double *)malloc_type_malloc((size_t)v13, 0x7316D395uLL);
        BOOL v18 = v13;
      }
      uint64_t v67 = v5;
      MEMORY[0x1F4188790](v13, v15);
      uint64_t v64 = (int *)((char *)&v63 - v19 - 15);
      if (v20 <= 0xFFFFFFFFFFFFFFELL) {
        int v21 = (int *)((char *)&v63 - v19 - 15);
      }
      else {
        int v21 = 0;
      }
      CGContextRef v63 = c;
      if (v20 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000082) {
        int v21 = (int *)malloc_type_malloc(16 * v12, 0xD96E95FAuLL);
      }
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      uint64_t v68 = v18 + 4;
      int v71 = v21;
      unint64_t v70 = v7;
      uint64_t v69 = v12;
      do
      {
        unint64_t v25 = &v21[4 * v24];
        v25[3] = 0;
        unint64_t v26 = v7[9];
        unint64_t v72 = v24;
        if (v26 > v24)
        {
          uint64_t v27 = 0;
          uint64_t v28 = v7[4];
          uint64_t v29 = v7[7];
          uint64_t v30 = v7[10] + v22;
          do
          {
            v83[v27] = v29 + v28 * *(void *)(v30 + v27 * 8);
            ++v27;
          }
          while (v27 != 3);
        }
        uint64_t v73 = v22;
        uint64_t v31 = 0;
        unint64_t v32 = &v68[9 * v23];
        do
        {
          uint64_t v33 = v23;
          v25[v31] = v23;
          uint64_t v34 = v83[v31];
          char v35 = &v18[9 * v23];
          *(_OWORD *)char v35 = *(_OWORD *)v34;
          v35[2] = 0.0;
          v35[3] = 0.0;
          uint64_t v36 = *(void *)(v74 + 88);
          if (v36)
          {
            uint64_t v82 = *(void *)(v34 + 16);
            CGFunctionEvaluate(v36, (char *)&v82, &v18[9 * v23 + 4]);
          }
          else if (v4)
          {
            uint64_t v37 = (uint64_t *)(v34 + 16);
            unint64_t v38 = v32;
            uint64_t v39 = v4;
            do
            {
              uint64_t v40 = *v37++;
              *(void *)v38++ = v40;
              --v39;
            }
            while (v39);
          }
          ++v23;
          v18[9 * v33 + 4 + v4] = 1.0;
          ++v31;
          v32 += 9;
        }
        while (v31 != 3);
        unint64_t v24 = v72 + 1;
        uint64_t v22 = v73 + 24;
        int v41 = v69;
        int v21 = v71;
        double v7 = v70;
      }
      while (v72 + 1 != v69);
      CGTriangleMeshRelease((uint64_t)v70);
      unsigned int v42 = v23;
      uint64_t v43 = v67;
      if (RenderTriangleMesh(v18, v42, v21, v41, v67, (uint64_t *)&v80, &v81.origin.x))
      {
        uint64_t v44 = v63;
        CGContextSaveGState(v63);
        CGContextResetCTM((uint64_t)v44, v45, v46, v47, v48, v49, v50, v51);
        CGSize size = v81.size;
        origiuint64_t n = v81.origin;
        if (v81.size.width < 0.0 || v81.size.height < 0.0)
        {
          CGRect v84 = CGRectStandardize(v81);
          size_t width = (unint64_t)v84.size.width;
          v84.origiuint64_t n = origin;
          v84.CGSize size = size;
          *(CGRect *)(&height - 3) = CGRectStandardize(v84);
        }
        else
        {
          size_t width = (unint64_t)v81.size.width;
          double height = v81.size.height;
        }
        size_t v57 = (unint64_t)height;
        size_t v58 = (8 * v43 * width) >> 3;
        uint64_t v59 = (uint64_t)v80;
        unint64_t v60 = v58 * (unint64_t)height;
        check_clients_buffer("CGDataProviderCreateWithData", v80, v60);
        uint64_t v61 = CGDataProviderCreateWithDataInternal(0, v59, v60, (uint64_t)patch_data_release_20281, 0);
        CGImageRef v62 = CGImageCreate(width, v57, 8uLL, 8 * v43, v58, *(CGColorSpaceRef *)(v74 + 16), 3u, v61, 0, 0, kCGRenderingIntentDefault);
        CGDataProviderRelease(v61);
        CGImageSetCachingFlags(v62, 1);
        v85.origiuint64_t n = origin;
        v85.CGSize size = size;
        CGContextDrawImage(v44, v85, v62);
        CGContextRestoreGState(v44);
        if (v62) {
          CFRelease(v62);
        }
        char v56 = v71;
        if (v71 == v64) {
          goto LABEL_47;
        }
      }
      else
      {
        if (v21 == v64) {
          goto LABEL_47;
        }
        char v56 = v21;
      }
      free(v56);
LABEL_47:
      if (v18 != v65) {
        free(v18);
      }
    }
  }
}

void type4_read_triangle(uint64_t a1, unsigned __int8 **a2, float64x2_t *a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  v26[2] = *(double *)MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1, a6);
  unint64_t v14 = (double *)((char *)&v22 - v13);
  if (v12 <= 0x1FFFFFFFFFFFFFFELL) {
    __n128 v15 = (double *)((char *)&v22 - v13);
  }
  else {
    __n128 v15 = 0;
  }
  if (v12 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000082) {
    __n128 v15 = (double *)malloc_type_malloc(8 * v11, 0x1664EC1FuLL);
  }
  int v16 = type4_read_vertex(a1, a2, &v23, v15, a5);
  if (v16 == 2)
  {
    float64_t v17 = v23;
    float64_t v18 = v24;
    uint64_t v19 = (void *)a4;
    unint64_t v20 = a3;
    int v21 = 1;
  }
  else
  {
    if (v16 != 1)
    {
      if (v16)
      {
        pdf_error("invalid shading flag value.");
      }
      else
      {
        type4_read_vertex(a1, a2, &v25, &v15[a5], a5);
        type4_read_vertex(a1, a2, v26, &v15[2 * a5], a5);
        CGTriangleMeshAddTriangle(a4, a3, (uint64_t)&v23, (uint64_t)v15);
      }
      goto LABEL_14;
    }
    float64_t v17 = v23;
    float64_t v18 = v24;
    uint64_t v19 = (void *)a4;
    unint64_t v20 = a3;
    int v21 = 0;
  }
  CGTriangleMeshAddTriangleWithRelativePoint(v19, v20, v21, (uint64_t *)v15, v17, v18);
LABEL_14:
  if (v15 != v14) {
    free(v15);
  }
}

void patch_data_release_20281(int a1, void *a2)
{
}

uint64_t type4_read_vertex(uint64_t a1, unsigned __int8 **a2, double *a3, double *a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a1 + 40);
  if (v5 < 0x19)
  {
    int v12 = 0;
    if (!v5) {
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  v5 -= 24;
  unint64_t v6 = (unint64_t)a2[4];
  if (v6 >= 0x18)
  {
    unsigned int v8 = *((_DWORD *)a2 + 6);
  }
  else
  {
    unint64_t v7 = (unint64_t)a2[2];
    unsigned int v8 = *((_DWORD *)a2 + 6);
    unint64_t v9 = (unint64_t)a2[4];
    uint64_t v10 = *a2;
    do
    {
      v8 <<= 8;
      *((_DWORD *)a2 + 6) = v8;
      if ((unint64_t)v10 < v7)
      {
        *a2 = v10 + 1;
        v8 |= *v10;
        *((_DWORD *)a2 + 6) = v8;
        ++v10;
      }
      unint64_t v6 = v9 + 8;
      a2[4] = (unsigned __int8 *)(v9 + 8);
      BOOL v11 = v9 >= 0x10;
      v9 += 8;
    }
    while (!v11);
  }
  a2[4] = (unsigned __int8 *)(v6 - 24);
  int v12 = ((v8 >> (v6 - 24)) & 0xFFFFFF) << v5;
  if (v5)
  {
LABEL_13:
    unint64_t v13 = (unint64_t)a2[4];
    if (v13 >= v5)
    {
      unsigned int v15 = *((_DWORD *)a2 + 6);
    }
    else
    {
      unint64_t v14 = (unint64_t)a2[2];
      unsigned int v15 = *((_DWORD *)a2 + 6);
      int v16 = *a2;
      do
      {
        v15 <<= 8;
        *((_DWORD *)a2 + 6) = v15;
        if ((unint64_t)v16 < v14)
        {
          *a2 = v16 + 1;
          v15 |= *v16;
          *((_DWORD *)a2 + 6) = v15;
          ++v16;
        }
        v13 += 8;
        a2[4] = (unsigned __int8 *)v13;
      }
      while (v13 < v5);
    }
    float64_t v17 = (unsigned __int8 *)(v13 - v5);
    a2[4] = v17;
    LODWORD(v5) = (v15 >> (char)v17) & (0xFFFFFFFF >> -(char)v5);
  }
LABEL_21:
  int v18 = 0;
  unint64_t v19 = *(void *)(a1 + 24);
  unint64_t v20 = v19;
  if (v19 >= 0x19)
  {
    unint64_t v20 = v19 - 24;
    unint64_t v21 = (unint64_t)a2[4];
    if (v21 >= 0x18)
    {
      unsigned int v23 = *((_DWORD *)a2 + 6);
    }
    else
    {
      unint64_t v22 = (unint64_t)a2[2];
      unsigned int v23 = *((_DWORD *)a2 + 6);
      unint64_t v24 = (unint64_t)a2[4];
      double v25 = *a2;
      do
      {
        v23 <<= 8;
        *((_DWORD *)a2 + 6) = v23;
        if ((unint64_t)v25 < v22)
        {
          *a2 = v25 + 1;
          v23 |= *v25;
          *((_DWORD *)a2 + 6) = v23;
          ++v25;
        }
        unint64_t v21 = v24 + 8;
        a2[4] = (unsigned __int8 *)(v24 + 8);
        BOOL v11 = v24 >= 0x10;
        v24 += 8;
      }
      while (!v11);
    }
    a2[4] = (unsigned __int8 *)(v21 - 24);
    int v18 = ((v23 >> (v21 - 24)) & 0xFFFFFF) << v20;
  }
  double v26 = (double)(0xFFFFFFFF >> -(char)v19);
  if (v20)
  {
    uint64_t v27 = a2[4];
    if ((unint64_t)v27 >= v20)
    {
      unsigned int v29 = *((_DWORD *)a2 + 6);
    }
    else
    {
      unint64_t v28 = (unint64_t)a2[2];
      unsigned int v29 = *((_DWORD *)a2 + 6);
      uint64_t v30 = *a2;
      do
      {
        v29 <<= 8;
        *((_DWORD *)a2 + 6) = v29;
        if ((unint64_t)v30 < v28)
        {
          *a2 = v30 + 1;
          v29 |= *v30;
          *((_DWORD *)a2 + 6) = v29;
          ++v30;
        }
        v27 += 8;
        a2[4] = v27;
      }
      while ((unint64_t)v27 < v20);
    }
    uint64_t v31 = &v27[-v20];
    a2[4] = v31;
    LODWORD(v20) = (v29 >> (char)v31) & (0xFFFFFFFF >> -(char)v20);
  }
  *a3 = *(double *)(a1 + 48) + (*(double *)(a1 + 64) - *(double *)(a1 + 48)) * (double)(v20 | v18) / v26;
  if (v19 < 0x19)
  {
    int v37 = 0;
    if (!v19) {
      goto LABEL_60;
    }
    goto LABEL_52;
  }
  v19 -= 24;
  unint64_t v32 = (unint64_t)a2[4];
  if (v32 >= 0x18)
  {
    unsigned int v34 = *((_DWORD *)a2 + 6);
  }
  else
  {
    unint64_t v33 = (unint64_t)a2[2];
    unsigned int v34 = *((_DWORD *)a2 + 6);
    unint64_t v35 = (unint64_t)a2[4];
    uint64_t v36 = *a2;
    do
    {
      v34 <<= 8;
      *((_DWORD *)a2 + 6) = v34;
      if ((unint64_t)v36 < v33)
      {
        *a2 = v36 + 1;
        v34 |= *v36;
        *((_DWORD *)a2 + 6) = v34;
        ++v36;
      }
      unint64_t v32 = v35 + 8;
      a2[4] = (unsigned __int8 *)(v35 + 8);
      BOOL v11 = v35 >= 0x10;
      v35 += 8;
    }
    while (!v11);
  }
  a2[4] = (unsigned __int8 *)(v32 - 24);
  int v37 = ((v34 >> (v32 - 24)) & 0xFFFFFF) << v19;
  if (v19)
  {
LABEL_52:
    unint64_t v38 = (unint64_t)a2[4];
    if (v38 >= v19)
    {
      unsigned int v40 = *((_DWORD *)a2 + 6);
    }
    else
    {
      unint64_t v39 = (unint64_t)a2[2];
      unsigned int v40 = *((_DWORD *)a2 + 6);
      int v41 = *a2;
      do
      {
        v40 <<= 8;
        *((_DWORD *)a2 + 6) = v40;
        if ((unint64_t)v41 < v39)
        {
          *a2 = v41 + 1;
          v40 |= *v41;
          *((_DWORD *)a2 + 6) = v40;
          ++v41;
        }
        v38 += 8;
        a2[4] = (unsigned __int8 *)v38;
      }
      while (v38 < v19);
    }
    unsigned int v42 = (unsigned __int8 *)(v38 - v19);
    a2[4] = v42;
    LODWORD(v19) = (v40 >> (char)v42) & (0xFFFFFFFF >> -(char)v19);
  }
LABEL_60:
  a3[1] = *(double *)(a1 + 56) + (*(double *)(a1 + 72) - *(double *)(a1 + 56)) * (double)(v19 | v37) / v26;
  if (a5)
  {
    uint64_t v43 = 0;
    unint64_t v44 = *(void *)(a1 + 32);
    uint64_t v45 = *(void *)(a1 + 80);
    while (v44 < 0x19)
    {
      int v51 = 0;
      unint64_t v52 = v44;
      if (v44) {
        goto LABEL_74;
      }
LABEL_82:
      *a4++ = *(double *)(v45 + 16 * v43)
            + (*(double *)(v45 + 16 * v43 + 8) - *(double *)(v45 + 16 * v43))
            * (double)(v52 | v51)
            / (double)(0xFFFFFFFF >> -(char)v44);
      if (++v43 == a5) {
        goto LABEL_83;
      }
    }
    unint64_t v46 = (unint64_t)a2[4];
    if (v46 >= 0x18)
    {
      unsigned int v48 = *((_DWORD *)a2 + 6);
    }
    else
    {
      unint64_t v47 = (unint64_t)a2[2];
      unsigned int v48 = *((_DWORD *)a2 + 6);
      unint64_t v49 = (unint64_t)a2[4];
      uint64_t v50 = *a2;
      do
      {
        v48 <<= 8;
        *((_DWORD *)a2 + 6) = v48;
        if ((unint64_t)v50 < v47)
        {
          *a2 = v50 + 1;
          v48 |= *v50;
          *((_DWORD *)a2 + 6) = v48;
          ++v50;
        }
        unint64_t v46 = v49 + 8;
        a2[4] = (unsigned __int8 *)(v49 + 8);
        BOOL v11 = v49 >= 0x10;
        v49 += 8;
      }
      while (!v11);
    }
    a2[4] = (unsigned __int8 *)(v46 - 24);
    int v51 = ((v48 >> (v46 - 24)) & 0xFFFFFF) << (v44 - 24);
    unint64_t v52 = v44 - 24;
LABEL_74:
    unint64_t v53 = a2[4];
    if ((unint64_t)v53 >= v52)
    {
      unsigned int v55 = *((_DWORD *)a2 + 6);
    }
    else
    {
      unint64_t v54 = (unint64_t)a2[2];
      unsigned int v55 = *((_DWORD *)a2 + 6);
      char v56 = *a2;
      do
      {
        v55 <<= 8;
        *((_DWORD *)a2 + 6) = v55;
        if ((unint64_t)v56 < v54)
        {
          *a2 = v56 + 1;
          v55 |= *v56;
          *((_DWORD *)a2 + 6) = v55;
          ++v56;
        }
        v53 += 8;
        a2[4] = v53;
      }
      while ((unint64_t)v53 < v52);
    }
    size_t v57 = &v53[-v52];
    a2[4] = v57;
    LODWORD(v52) = (v55 >> (char)v57) & (0xFFFFFFFF >> -(char)v52);
    goto LABEL_82;
  }
LABEL_83:
  size_t v58 = a2[4];
  if ((v58 & 7) != 0) {
    a2[4] = (unsigned __int8 *)((unint64_t)v58 & 0xFFFFFFFFFFFFFFF8);
  }
  return (v5 | v12) & 3;
}

uint64_t __type4_info_getTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&type4_info_getTypeID_class);
  type4_info_getTypeID_id = result;
  return result;
}

void type4_info_finalize(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 96);
  if (v2) {
    CFRelease(v2);
  }
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 16));
  unsigned int v3 = *(const void **)(a1 + 88);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(void **)(a1 + 80);

  free(v4);
}

uint64_t thread_fun(void (**a1)(uint64_t))
{
  unsigned int v2 = *a1;
  uint64_t v1 = a1[1];
  free(a1);
  v2((uint64_t)v1);
  return 0;
}

uint64_t crossing_count(float64x2_t *a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v46[2] = *(double *)MEMORY[0x1E4F143B8];
  double v12 = a1->f64[0];
  double v11 = a1->f64[1];
  double v13 = v11;
  double v14 = v11;
  double v15 = a1->f64[0];
  double v16 = a1->f64[0];
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    float64_t v17 = &a1[1].f64[1];
    uint64_t v18 = a2;
    double v16 = a1->f64[0];
    double v15 = a1->f64[0];
    double v14 = a1->f64[1];
    double v13 = v14;
    do
    {
      double v19 = *(v17 - 1);
      if (v19 > v15) {
        double v20 = *(v17 - 1);
      }
      else {
        double v20 = v15;
      }
      if (v19 < v16) {
        double v16 = *(v17 - 1);
      }
      else {
        double v15 = v20;
      }
      if (*v17 >= v14)
      {
        if (*v17 > v13) {
          double v13 = *v17;
        }
      }
      else
      {
        double v14 = *v17;
      }
      v17 += 2;
      --v18;
    }
    while (v18);
  }
  uint64_t v21 = 0;
  if (v14 > 0.0 || v13 < 0.0 || v15 < 0.0) {
    return v21;
  }
  if (v16 > 0.0)
  {
    unint64_t v22 = &a1[a2];
    if (v11 >= 0.0)
    {
      double v25 = v22->f64[1];
      if (v11 <= 0.0 || (uint64_t v21 = v25 <= 0.0) != 0)
      {
        if (v25 >= 0.0) {
          return 0;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
    else
    {
      double v23 = v22->f64[1];
      BOOL v24 = v11 <= 0.0 || v23 <= 0.0;
      return v23 >= 0.0 && v24;
    }
    return v21;
  }
  if (v14 == v13) {
    goto LABEL_26;
  }
  if (a2 != 1)
  {
    if (a2 == 2 ? get_y_inflections_2(a1, v46, 0) : get_y_inflections_3(a1, v46, 0))
    {
      v27.n128_f64[0] = subdivide(a1, a2, v45, v44, v46[0]);
      int v28 = crossing_count(v45, a2, a3, v27);
      return crossing_count(v44, a2, a3, v29) + v28;
    }
  }
  f64 = a1[a2].f64;
  double v31 = f64[1];
  uint64_t v21 = 0;
  if (v11 <= v31)
  {
    if (v11 > 0.0 || v31 < 0.0) {
      return v21;
    }
  }
  else if (v11 < 0.0 || v31 > 0.0)
  {
    return v21;
  }
  if (v11 == 0.0 && v12 == 0.0 || v31 == 0.0 && *f64 == 0.0) {
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    if ((v14 != v11 || v13 != v31) && (v14 != v31 || v13 != v11)) {
      _CGHandleAssert("crossing_count", 170, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/path-crossing.c", "(min.y == p[0].y && max.y == p[order].y) || (min.y == p[order].y && max.y == p[0].y)", "unexpected path order: min{%f,%f}, max{%f,%f}, p[%lu]{%f,%f}", a6, a7, a8, SLOBYTE(v16));
    }
    double v32 = a1[1].f64[1];
    double v33 = v12 * v32;
    double v34 = a1[1].f64[0] * v11;
    if (v12 * v32 != v34)
    {
      if (v11 < 0.0 && v11 < v32 && v33 > v34) {
        return 1;
      }
      if (v33 >= v34 || v32 >= 0.0 || v11 <= v32) {
        return 0;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_26:
    uint64_t v21 = 0;
    *a3 = 1;
    return v21;
  }
  subdivide(a1, a2, v45, v44, 0.5);
  if (!a2) {
    return 1;
  }
  uint64_t v36 = 0;
  uint64_t v37 = 2;
  if ((unint64_t)(a2 + 1) > 2) {
    uint64_t v37 = a2 + 1;
  }
  uint64_t v38 = v37 - 1;
  LOBYTE(v39) = 1;
  LOBYTE(v40) = 1;
  do
  {
    if (v40)
    {
      __n128 v35 = (__n128)vceqq_f64(v45[v36], v45[v36 + 1]);
      v35.n128_u64[0] = (unint64_t)vmovn_s64((int64x2_t)v35);
      unsigned __int32 v40 = v35.n128_u32[0] & v35.n128_u32[1];
      if ((v39 & 1) == 0) {
        goto LABEL_67;
      }
    }
    else
    {
      unsigned __int32 v40 = 0;
      if ((v39 & 1) == 0)
      {
LABEL_67:
        unsigned __int32 v39 = 0;
        goto LABEL_70;
      }
    }
    __n128 v35 = (__n128)vceqq_f64(v44[v36], v44[v36 + 1]);
    v35.n128_u64[0] = (unint64_t)vmovn_s64((int64x2_t)v35);
    unsigned __int32 v39 = v35.n128_u32[0] & v35.n128_u32[1];
LABEL_70:
    ++v36;
  }
  while (v38 != v36);
  if ((v39 | v40)) {
    return 1;
  }
  v35.n128_u64[0] = *(void *)&v45[0].f64[1];
  double v41 = v45[a2].f64[1];
  if (v45[0].f64[1] <= 0.0 && v41 >= 0.0 || (uint64_t v21 = 0, v45[0].f64[1] >= 0.0) && v41 <= 0.0) {
    uint64_t v21 = crossing_count(v45, a2, a3, v35);
  }
  v35.n128_u64[0] = *(void *)&v44[0].f64[1];
  double v42 = v44[a2].f64[1];
  if (v44[0].f64[1] <= 0.0 && v42 >= 0.0 || v44[0].f64[1] >= 0.0 && v42 <= 0.0) {
    return crossing_count(v44, a2, a3, v35) + v21;
  }
  return v21;
}

float64_t subdivide(float64x2_t *a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, double a5)
{
  *a3 = *a1;
  f64 = a3[1].f64;
  double v6 = 1.0 - a5;
  if (a2 == 2)
  {
    unint64_t v7 = &a3[1].f64[1];
    a4[2] = a1[2];
    a3[1] = vmlaq_n_f64(vmulq_n_f64(a1[1], a5), *a1, v6);
    double v8 = a1[1].f64[1];
    double v9 = a1[2].f64[0] * a5 + v6 * a1[1].f64[0];
    uint64_t v10 = 2;
  }
  else
  {
    a4[3] = a1[3];
    a3[1] = vmlaq_n_f64(vmulq_n_f64(a1[1], a5), *a1, v6);
    float64x2_t v11 = a1[2];
    float64x2_t v12 = vmlaq_n_f64(vmulq_n_f64(a1[3], a5), v11, v6);
    float64x2_t v13 = vmlaq_n_f64(vmulq_n_f64(v11, a5), a1[1], v6);
    a4[2] = v12;
    a3[2] = vmlaq_n_f64(vmulq_n_f64(v13, a5), a3[1], v6);
    f64 = a3[2].f64;
    unint64_t v7 = &a3[2].f64[1];
    double v9 = vmlad_n_f64(a4[2].f64[0] * a5, v6, v13.f64[0]);
    double v8 = v13.f64[1];
    uint64_t v10 = 3;
    a1 = a4;
  }
  a4[1].f64[0] = v9;
  float64_t v14 = a1[2].f64[1] * a5 + v6 * v8;
  a4[1].f64[1] = v14;
  double v15 = v9 * a5 + v6 * *f64;
  double v16 = a3[v10].f64;
  float64_t result = v14 * a5 + v6 * *v7;
  *double v16 = v15;
  v16[1] = result;
  a4->f64[0] = v15;
  a4->f64[1] = result;
  return result;
}

__n128 CGFontFinderCreate(unint64_t a1, __n128 *a2)
{
  if (a2)
  {
    if (!a2->n128_u32[0])
    {
      uint64_t v4 = (__n128 *)malloc_type_calloc(1uLL, 0x38uLL, 0x1080040BF00B4C8uLL);
      v4->n128_u32[0] = 1;
      v4->n128_u64[1] = a1;
      __n128 v6 = *a2;
      __n128 result = a2[1];
      v4[3].n128_u64[0] = a2[2].n128_u64[0];
      v4[1] = v6;
      v4[2] = result;
    }
  }
  return result;
}

atomic_uint *CGFontFinderRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add_explicit(result, 1u, memory_order_relaxed);
  }
  return result;
}

void CGFontFinderRelease(void *a1)
{
  if (a1 && atomic_fetch_add_explicit((atomic_uint *volatile)a1, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    unsigned int v2 = (void (*)(void))a1[6];
    if (v2) {
      v2(a1[1]);
    }
    free(a1);
  }
}

uint64_t CGFontFinderCopyURLForName(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (unsigned int v2 = *(uint64_t (**)(void))(a1 + 24)) != 0) {
    return v2(*(void *)(a1 + 8));
  }
  else {
    return 0;
  }
}

uint64_t CGFontFinderCopyURLForPlatformFont(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(uint64_t (**)(void))(a1 + 32)) != 0) {
    return v1(*(void *)(a1 + 8));
  }
  else {
    return 0;
  }
}

uint64_t CGFontFinderCopyAllURLs(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(uint64_t (**)(void))(a1 + 40)) != 0) {
    return v1(*(void *)(a1 + 8));
  }
  else {
    return 0;
  }
}

CFTypeRef CGFontFinderCreateFontWithName(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2 = 0;
  if (a1 && a2)
  {
    unsigned int v3 = *(uint64_t (**)(void))(a1 + 24);
    if (v3 && (CFURLRef v4 = (const __CFURL *)v3(*(void *)(a1 + 8))) != 0)
    {
      CFURLRef v5 = v4;
      FontsWithURL = CGFontCreateFontsWithURL(v4);
      if (FontsWithURL)
      {
        CFArrayRef v7 = FontsWithURL;
        if (CFArrayGetCount(FontsWithURL) != 1)
        {
          char Count = CFArrayGetCount(v7);
          _CGHandleAssert("CGFontFinderCreateFontWithName", 104, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontFinder.c", "CFArrayGetCount(fonts) == 1", "count = %ld", v11, v12, v13, Count);
        }
        CFRelease(v5);
        ValueAtIndedouble x = CFArrayGetValueAtIndex(v7, 0);
        CFTypeRef v2 = CFRetain(ValueAtIndex);
        CFURLRef v5 = v7;
      }
      else
      {
        CFTypeRef v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFTypeRef CGFontFinderCreateFontWithPlatformFont(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2 = 0;
  if (a1 && a2)
  {
    unsigned int v3 = *(uint64_t (**)(void))(a1 + 32);
    if (v3 && (CFURLRef v4 = (const __CFURL *)v3(*(void *)(a1 + 8))) != 0)
    {
      CFURLRef v5 = v4;
      FontsWithURL = CGFontCreateFontsWithURL(v4);
      if (FontsWithURL)
      {
        CFArrayRef v7 = FontsWithURL;
        if (CFArrayGetCount(FontsWithURL) != 1)
        {
          char Count = CFArrayGetCount(v7);
          _CGHandleAssert("CGFontFinderCreateFontWithPlatformFont", 134, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontFinder.c", "CFArrayGetCount(fonts) == 1", "count = %ld", v11, v12, v13, Count);
        }
        CFRelease(v5);
        ValueAtIndedouble x = CFArrayGetValueAtIndex(v7, 0);
        CFTypeRef v2 = CFRetain(ValueAtIndex);
        CFURLRef v5 = v7;
      }
      else
      {
        CFTypeRef v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void CGFontFinderApplyFunction(uint64_t a1, uint64_t (*a2)(const void *, uint64_t), uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      CFURLRef v4 = *(uint64_t (**)(void))(a1 + 40);
      if (v4)
      {
        CFArrayRef v6 = (const __CFArray *)v4(*(void *)(a1 + 8));
        if (v6)
        {
          CFArrayRef v7 = v6;
          CFIndex Count = CFArrayGetCount(v6);
          if (Count)
          {
            CFIndex v9 = Count;
            for (CFIndex i = 0; i != v9; ++i)
            {
              ValueAtIndedouble x = (const __CFURL *)CFArrayGetValueAtIndex(v7, i);
              FontsWithURL = CGFontCreateFontsWithURL(ValueAtIndex);
              if (FontsWithURL)
              {
                CFArrayRef v13 = FontsWithURL;
                if (CFArrayGetCount(FontsWithURL) != 1)
                {
                  char v16 = CFArrayGetCount(v13);
                  _CGHandleAssert("CGFontFinderApplyFunction", 165, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontFinder.c", "CFArrayGetCount(fonts) == 1", "count = %ld", v17, v18, v19, v16);
                }
                float64_t v14 = CFArrayGetValueAtIndex(v13, 0);
                int v15 = a2(v14, a3);
                CFRelease(v13);
                if (v15) {
                  break;
                }
              }
            }
          }
          CFRelease(v7);
        }
      }
    }
  }
}

uint64_t CGFontFinderGetDefault()
{
  uint64_t v0 = pthread_mutex_lock(&default_font_finder_mutex);
  uint64_t v8 = default_font_finder;
  if (!default_font_finder)
  {
    VTable = (uint64_t (**)(void))CGFontGetVTable(v0, v1, v2, v3, v4, v5, v6, v7);
    uint64_t v8 = (*VTable)();
  }
  pthread_mutex_unlock(&default_font_finder_mutex);
  return v8;
}

uint64_t CGFontFinderSetDefault(atomic_uint *a1)
{
  pthread_mutex_lock(&default_font_finder_mutex);
  if (a1) {
    atomic_fetch_add_explicit(a1, 1u, memory_order_relaxed);
  }
  CGFontFinderRelease((void *)default_font_finder);
  default_font_finder = (uint64_t)a1;

  return pthread_mutex_unlock(&default_font_finder_mutex);
}

void doLoadVTable()
{
  uint64_t v0 = 0;
  didLoadVTable = 1;
  uint64_t v1 = (const char **)&links;
  do
  {
    if (!strcmp("cg_jbig2_library_link_symbol", *v1))
    {
      jbig2_vtable = ((uint64_t (*)(void))(&links)[2 * v0 + 1])();
      return;
    }
    ++v0;
    v1 += 2;
  }
  while (v0 != 7);

  pdf_error("no JBIG2 library available.");
}

CFDateRef CGPDFStringCopyDate(CFDateRef string)
{
  if (string)
  {
    CFDateRef v1 = string;
    if (*((void *)string + 3))
    {
      decrypt_string((uint64_t)string);
      uint64_t v2 = (char *)v1 + 80;
      if (*((void *)v1 + 3)) {
        decrypt_string((uint64_t)v1);
      }
    }
    else
    {
      uint64_t v2 = (char *)string + 80;
    }
    unint64_t v3 = *((void *)v1 + 9);
    uint64_t v16 = v3;
    uint64_t v17 = v2;
    if (v3 < 4) {
      return 0;
    }
    CFAbsoluteTime at = 0.0;
    if (*v2 == 68 && *((unsigned char *)v1 + 81) == 58)
    {
      uint64_t v16 = v3 - 2;
      uint64_t v17 = (char *)v1 + 82;
    }
    unsigned int v15 = 0;
    if (!get_number(&v17, (unint64_t *)&v16, 4uLL, (int *)&v15)) {
      return 0;
    }
    uint64_t v4 = v15;
    if (!get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
    {
      CFTimeZoneRef v10 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v5 = 1;
      uint64_t v6 = 1;
      goto LABEL_23;
    }
    uint64_t v5 = v15;
    if (!get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
    {
      CFTimeZoneRef v10 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v6 = 1;
      goto LABEL_23;
    }
    uint64_t v6 = v15;
    if (get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
    {
      uint64_t v7 = v15;
      if (get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
      {
        uint64_t v8 = v15;
        if (get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
        {
          uint64_t v9 = v15;
          CFTimeZoneRef v10 = parse_time_zone(v17, v16);
          goto LABEL_23;
        }
        CFTimeZoneRef v10 = 0;
        goto LABEL_22;
      }
      CFTimeZoneRef v10 = 0;
    }
    else
    {
      CFTimeZoneRef v10 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v8 = 0;
LABEL_22:
    uint64_t v9 = 0;
LABEL_23:
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    string = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
    if (!string) {
      return string;
    }
    uint64_t v12 = string;
    if (v10)
    {
      CFCalendarSetTimeZone(string, v10);
    }
    else
    {
      CFTimeZoneRef v10 = CFTimeZoneCreateWithTimeIntervalFromGMT(v11, 0.0);
      CFCalendarSetTimeZone(v12, v10);
      if (!v10) {
        goto LABEL_28;
      }
    }
    CFRelease(v10);
LABEL_28:
    int v13 = CFCalendarComposeAbsoluteTime(v12, &at, "yMdHms", v4, v5, v6, v7, v8, v9);
    CFRelease(v12);
    if (v13) {
      return CFDateCreate(v11, at);
    }
    return 0;
  }
  return string;
}

uint64_t get_number(char **a1, unint64_t *a2, unint64_t a3, int *a4)
{
  if (*a2 < a3) {
    return 0;
  }
  int v9 = 0;
  CFTimeZoneRef v10 = *a1;
  uint64_t v11 = MEMORY[0x1E4F14390];
  unint64_t v12 = a3;
  do
  {
    unsigned int v14 = *v10++;
    unsigned int v13 = v14;
    if ((v14 & 0x80000000) != 0)
    {
      if (!__maskrune_l(v13, 0x400uLL, 0)) {
        return 0;
      }
    }
    else if ((*(_DWORD *)(v11 + 4 * v13 + 60) & 0x400) == 0)
    {
      return 0;
    }
    int v9 = v13 + 10 * v9 - 48;
    --v12;
  }
  while (v12);
  unint64_t v15 = *a2;
  uint64_t v16 = *a1;
  *a4 = v9;
  *a1 = &v16[a3];
  *a2 = v15 - a3;
  return 1;
}

CFTimeZoneRef parse_time_zone(char *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  int v3 = *a1;
  int v2 = v3;
  unint64_t v12 = a1 + 1;
  if (v3 == 90)
  {
    int v4 = 0;
  }
  else if (v2 == 45)
  {
    int v4 = -1;
  }
  else
  {
    if (v2 != 43) {
      return 0;
    }
    int v4 = 1;
  }
  unsigned int v10 = 0;
  unint64_t v11 = a2 - 1;
  if (!get_number(&v12, &v11, 2uLL, (int *)&v10)) {
    return 0;
  }
  if (v10 > 0x17) {
    return 0;
  }
  if (!v11--) {
    return 0;
  }
  int v6 = *v12++;
  if (v6 != 39) {
    return 0;
  }
  double v7 = (double)(int)(3600 * v4 * v10);
  if (get_number(&v12, &v11, 2uLL, (int *)&v10))
  {
    if (v10 <= 0x3B && v11 && *v12 == 39)
    {
      double v7 = v7 + (double)(int)(60 * v4 * v10);
      goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFTimeZoneCreateWithTimeIntervalFromGMT(v8, v7);
}

void lzw_filter_finalize(void ***a1)
{
  if (a1)
  {
    lzw_decoder_release(*a1);
    free(a1);
  }
}

uint64_t lzw_filter_refill(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  if (*a1 && !*(unsigned char *)(v8 + 9))
  {
    uint64_t v9 = 0;
    unsigned int v13 = (unsigned __int16 *)(v8 + 17444);
    size_t v14 = *(void *)(v8 + 17464);
    while (1)
    {
      if (v14)
      {
        if (v14 >= a3 - v9) {
          size_t v15 = a3 - v9;
        }
        else {
          size_t v15 = v14;
        }
        memcpy((void *)(a2 + v9), (const void *)(*(void *)(v8 + 17480) + *(void *)(v8 + 17472) - v14), v15);
        v9 += v15;
        size_t v14 = *(void *)(v8 + 17464) - v15;
        *(void *)(v8 + 17464) = v14;
      }
      if (v9 == a3) {
        return a3;
      }
      if (*(unsigned char *)(v8 + 8)) {
        return v9;
      }
      if (v14) {
        _CGHandleAssert("lzw_decode", 155, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/LZW/lzw-decode.c", "d->pending == 0", "pending (%lu) is nonzero for decoder %p", a6, a7, a8, v14);
      }
      unsigned int code = lzw_read_code(v8, a2, a3, a4, a5, a6, a7, a8);
      if (code == 256)
      {
        *(_DWORD *)(v8 + 1056) = 9;
        *unsigned int v13 = 258;
        *(_WORD *)(v8 + 1744++*(_DWORD *)(result + 8) = 0;
        int v21 = lzw_read_code(v8, a2, a3, a4, a5, a6, a7, a8);
        if (v21 != 257)
        {
          char v20 = v21;
          *(_WORD *)(v8 + 1744++*(_DWORD *)(result + 8) = v21;
          *(_WORD *)(v8 + 17446) = v21;
          uint64_t v19 = (void *)v8;
LABEL_27:
          lzw_push(v19, v20);
          goto LABEL_28;
        }
      }
      else
      {
        __int16 v17 = code;
        if (code != 257)
        {
          unsigned int v18 = *v13;
          if (v18 < 0x1000)
          {
            unsigned int v22 = code;
            if (code >= v18)
            {
              unsigned int v22 = *(unsigned __int16 *)(v8 + 17446);
              lzw_push((void *)v8, *(_WORD *)(v8 + 17448));
            }
            while (v22 >= 0x100)
            {
              if (v22 >= 0x1000) {
                _CGHandleAssert("lzw_decode", 202, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/LZW/lzw-decode.c", "code < LZW_TABLE_SIZE", "lzw code (%u) is outside of table bounds (%u)", a6, a7, a8, v22);
              }
              uint64_t v23 = v8 + 2 * v22;
              lzw_push((void *)v8, *(_WORD *)(v23 + 9252));
              unsigned int v22 = *(unsigned __int16 *)(v23 + 1060);
              if (*(void *)(v8 + 17464) >> 1 >= 0x801uLL)
              {
                pdf_error("LZW decode: invalid chain sequence.");
                *(unsigned char *)(v8 + 9) = 1;
                goto LABEL_28;
              }
            }
            lzw_push((void *)v8, v22);
            *(_WORD *)(v8 + 1744++*(_DWORD *)(result + 8) = v22;
            unsigned int v24 = *(unsigned __int16 *)(v8 + 17446);
            if (v24 >= 0x1000) {
              _CGHandleAssert("lzw_decode", 219, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/LZW/lzw-decode.c", "d->oldCode < LZW_TABLE_SIZE", "lzw table building: old code (%u) is outside of table bounds (%u)", a6, a7, a8, *(_WORD *)(v8 + 17446));
            }
            *(_WORD *)(v8 + 2 * *v13 + 1060) = v24;
            *(_WORD *)(v8 + 2 * *(unsigned __int16 *)(v8 + 17444) + 9252) = *(_WORD *)(v8 + 17448);
            *(_WORD *)(v8 + 17446) = v17;
            unsigned __int16 v25 = *v13 + 1;
            *unsigned int v13 = v25;
            int v26 = *(_DWORD *)(v8 + 1056);
            if (v26 <= 11)
            {
              unsigned int v27 = (unsigned __int16)(~(unsigned __int16)(-1 << v26) - *(unsigned __int8 *)(v8 + 10));
              if (v27 < v25)
              {
                if (v27 + 1 != v25) {
                  _CGHandleAssert("lzw_decode", 234, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/LZW/lzw-decode.c", "d->freeCode == maxCode + 1", "sanity check failed that the free code(%u) should be maxCode(%u) +1", a6, a7, a8, v25);
                }
                *(_DWORD *)(v8 + 1056) = v26 + 1;
              }
            }
            goto LABEL_28;
          }
          uint64_t v19 = (void *)v8;
          char v20 = v17;
          goto LABEL_27;
        }
      }
      *(unsigned char *)(v8 + ++*(_DWORD *)(result + 8) = 1;
LABEL_28:
      size_t v14 = *(void *)(v8 + 17464);
      if (!v14) {
        return v9;
      }
    }
  }
  return 0;
}

char *lzw_filter_rewind(const void ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a1) {
    uint64_t v9 = **a1;
  }
  else {
    uint64_t v9 = 0;
  }
  CGPDFSourceRewind((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  lzw_decoder_release((void **)*a1);
  __n128 result = lzw_decoder_create(v9, *((unsigned char *)a1 + 8));
  *a1 = (const void **)result;
  return result;
}

BOOL resample_float16_select(uint64_t a1, uint64_t a2, int a3)
{
  if (resample_float16_select_predicate[0] != -1) {
    dispatch_once(resample_float16_select_predicate, &__block_literal_global_20338);
  }
  if (a1 && a2)
  {
    if (a3 == 3)
    {
      if (a2 == 1) {
        return 0;
      }
      if (a2 == 4) {
        *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_3cpp_ap[0];
      }
      else {
        *(void *)(a1 + 16) = resample_float16_select_float16_v_Ncpp_ap;
      }
      *(_WORD *)(a1 + 112) = 2 * a2 - 2;
      *(_WORD *)(a1 + 114) = 2;
      switch(a2)
      {
        case 2:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_1cpp_ap[0];
          break;
        case 4:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_3cpp_ap[0];
          break;
        case 5:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_4cpp_ap[0];
          break;
        default:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_Ncpp_ap[0];
          break;
      }
    }
    else
    {
      if (a3 && a2 != 1)
      {
        if (a3 == 1)
        {
          if (a2 == 4) {
            *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_3cpp_af[0];
          }
          else {
            *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_Ncpp_af[0];
          }
        }
        else
        {
          if (a3 != 2) {
            return 0;
          }
          if (a2 == 4) {
            *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_3cpp_al[0];
          }
          else {
            *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_Ncpp_al[0];
          }
        }
      }
      else
      {
        *(void *)(a1 + 16) = resample_float16_v_Ncpp;
      }
      *(_WORD *)(a1 + 112) = 2 * a2;
      *(_WORD *)(a1 + 114) = 0;
      switch(a2)
      {
        case 1:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_1cpp[0];
          break;
        case 3:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_3cpp[0];
          break;
        case 4:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_4cpp[0];
          break;
        default:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_Ncpp[0];
          break;
      }
    }
    return (use_template_resampling_code() & 1) == 0 || resample_select_template(a1, a2, a3);
  }
  else
  {
    return 0;
  }
}

_DWORD *resample_float16_h_Ncpp(_DWORD *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    uint64_t v10 = *a6;
    uint64_t v11 = *a7;
    uint64_t v12 = 4 * a2 + 8;
    uint64_t v13 = a8;
    do
    {
      if (a4)
      {
        size_t v14 = *(_WORD **)(a5 + 8 * v8);
        int v15 = a4;
        uint64_t v16 = result;
        do
        {
          if (v9)
          {
            uint64_t v17 = 0;
            int v18 = v16[1];
            uint64_t v19 = v10 + v8 * v11 + 2 * *v16 * (int)v9;
            do
            {
              _H0 = 0;
              if (v18)
              {
                int v21 = (__int16 *)v19;
                unsigned int v22 = v16 + 2;
                int v23 = v18;
                do
                {
                  int v24 = *v22++;
                  _S1 = v24;
                  __asm { FCVT            H1, S1 }
                  _H2 = *v21;
                  __asm
                  {
                    FCVT            S2, H2
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 + (float)(_S2 * _S1);
                  __asm { FCVT            H0, S0 }
                  v21 += v9;
                  --v23;
                }
                while (v23);
              }
              *v14++ = _H0;
              ++v17;
              v19 += 2;
            }
            while (v17 != v9);
          }
          uint64_t v16 = (_DWORD *)((char *)v16 + v12);
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != v13);
  }
  return result;
}