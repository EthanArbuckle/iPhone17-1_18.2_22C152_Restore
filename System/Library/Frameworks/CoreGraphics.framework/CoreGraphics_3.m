BOOL CG::DisplayListResourcePattern::_equal_to(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*a1 - 8) + 8), *(void *)(*(void *)(*a2 - 8) + 8)))return 0; {
  v4 = a1[2];
  }
  v5 = a2[2];
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || *(_DWORD *)(v4 + 16) != *(_DWORD *)(v5 + 16)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)a1, (uint64_t)a2);
}

void CG::DisplayListResource::getChildResources(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void CG::DisplayListResourcePattern::~DisplayListResourcePattern(CG::DisplayListResourcePattern *this)
{
  CG::DisplayListResourcePattern::~DisplayListResourcePattern(this);

  JUMPOUT(0x18532A2A0);
}

{
  const void *v2;

  *(void *)this = &unk_1ED094C60;
  v2 = (const void *)*((void *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 2) = 0;
  }
}

BOOL CG::DisplayListResourceStyle::_equal_to(CG::DisplayListResourceStyle *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  uint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || *(_DWORD *)(v4 + 16) != *(_DWORD *)(v5 + 16)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

void *CG::DisplayListResourceStyle::getChildResources@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this[3];
  if (v2)
  {
    uint64_t v4 = operator new(8uLL);
    *a2 = v4;
    *uint64_t v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

__CFString *CGPDFPageCopyDebugDesc(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  v3 = Mutable;
  if (a1) {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  CFStringAppendFormat(Mutable, 0, @"<CGPDFPage %p> page number: %zu", a1, v4);
  return v3;
}

uint64_t CGPDFPageFinalize(unint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2 && a1 != 0)
    {
      uint64_t v4 = (os_unfair_lock_s *)(v2 + 208);
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 208));
      uint64_t v5 = *(void *)(v2 + 200);
      if (v5)
      {
        v6 = std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::find<CGPDFPage *>((void *)(v5 + 24), a1);
        if (v6)
        {
          v7 = v6;
          std::list<CGPDFPage *>::erase((uint64_t *)v5, (uint64_t *)v6[3]);
          std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::erase((void *)(v5 + 24), v7);
          if (*(unsigned char *)(v5 + 72))
          {
            printf("LRUCache: removed page: %lu\n", *(void *)(*(void *)(a1 + 40) + 8));
            putchar(9);
            LRUCache::print((LRUCache *)v5);
          }
        }
      }
      os_unfair_lock_unlock(v4);
    }
  }
  pdf_page_release(*(void *)(a1 + 40));
  v8 = *(const void **)(a1 + 32);
  if (v8) {
    CFRelease(v8);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    v9 = *(const void **)(a1 + 16);
    if (v9) {
      CFRelease(v9);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
  v10 = *(const void **)(a1 + 344);
  if (v10) {
    CFRelease(v10);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 336));
  v11 = *(const void **)(a1 + 368);
  if (v11) {
    CFRelease(v11);
  }
  v12 = *(const void **)(a1 + 296);
  if (v12) {
    CFRelease(v12);
  }
  v13 = *(const void **)(a1 + 312);
  if (v13) {
    CFRelease(v13);
  }
  v14 = *(const void **)(a1 + 328);
  if (v14) {
    CFRelease(v14);
  }

  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 216));
}

CFTypeID CGPDFPageGetTypeID(void)
{
  if (CGPDFPageGetTypeID_onceToken != -1) {
    dispatch_once(&CGPDFPageGetTypeID_onceToken, &__block_literal_global_170);
  }
  return CGPDFPageGetTypeID_id;
}

void CGPDFPageRelease(CGPDFPageRef page)
{
  if (page) {
    CFRelease(page);
  }
}

CGPDFPageRef CGPDFPageRetain(CGPDFPageRef page)
{
  if (page) {
    CFRetain(page);
  }
  return page;
}

uint64_t CGPDFPageGetPage(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

CGPDFDocumentRef CGPDFPageGetDocument(CGPDFDocumentRef page)
{
  if (page) {
    return (CGPDFDocumentRef)*((void *)page + 2);
  }
  return page;
}

size_t CGPDFPageGetPageNumber(size_t page)
{
  if (page) {
    return *(void *)(*(void *)(page + 40) + 8);
  }
  return page;
}

int CGPDFPageGetRotationAngle(CGPDFPageRef page)
{
  CGPDFPageRef v1 = page;
  if (page)
  {
    uint64_t v2 = (pthread_mutex_t *)((char *)page + 216);
    pthread_mutex_lock((pthread_mutex_t *)((char *)page + 216));
    LODWORD(v1) = *((_DWORD *)v1 + 12);
    pthread_mutex_unlock(v2);
  }
  return (int)v1;
}

CFTypeRef CGPDFPageGetBackgroundColorHint(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CGPDFPageRef v1 = pdf_page_copy_background_color_hint(*(void *)(a1 + 40));
  if (!v1) {
    return 0;
  }

  return CFAutorelease(v1);
}

void *CGPDFPageCopyBackgroundColorHint(void *result)
{
  if (result) {
    return pdf_page_copy_background_color_hint(result[5]);
  }
  return result;
}

double CGPDFPageGetDrawingTransformForRect@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, double *a5@<X8>, CGFloat a6@<D0>, CGFloat a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  if (a1) {
    return pdf_page_get_drawing_transform(a5, *(void *)(a1 + 40), a2, a3, a4, 0, -8.98846567e307, -8.98846567e307, 1.79769313e308, 1.79769313e308, a6, a7, a8, a9);
  }
  *(CGAffineTransform *)a5 = CGAffineTransformIdentity;
  return CGAffineTransformIdentity.tx;
}

uint64_t CGPDFPageGetColorSpace(uint64_t result)
{
  if (result) {
    return *(void *)(*(void *)(result + 40) + 56);
  }
  return result;
}

CGPDFDictionaryRef CGPDFPageGetDictionary(CGPDFDictionaryRef page)
{
  if (page) {
    return *(CGPDFDictionaryRef *)(*((void *)page + 5) + 16);
  }
  return page;
}

uint64_t CGPDFPageGetThumbnail(uint64_t result)
{
  if (result) {
    return pdf_page_get_thumbnail(*(void *)(result + 40));
  }
  return result;
}

CGImageRef CGPDFPageCopyThumbnail(uint64_t *a1)
{
  if (a1)
  {
    CGPDFPageRef v1 = a1;
    thumbnail = (const void *)pdf_page_get_thumbnail(a1[5]);
    if (thumbnail)
    {
      v3 = thumbnail;
      CFRetain(thumbnail);
      return (CGImageRef)v3;
    }
    a1 = v1;
  }

  return CGPDFPageCreateThumbnail((CGPDFPage *)a1);
}

CGImageRef CGPDFPageCreateThumbnail(CGPDFPage *a1)
{
  CGRect BoxRect = CGPDFPageGetBoxRect(a1, kCGPDFMediaBox);
  double v5 = ceil(BoxRect.size.width - BoxRect.origin.x);
  double v6 = ceil(BoxRect.size.height - BoxRect.origin.y);
  if (v5 <= 0.0 || v6 <= 0.0) {
    _CGHandleAssert("CGPDFPageCreateThumbnail", 441, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Documents/CGPDFPage.c", "dblWidth > 0 && dblHeight > 0", "width (%f) and height (%f) must be positive", v2, v3, v4, SLOBYTE(v5));
  }
  unint64_t v7 = vcvtpd_u64_f64(v5 * 256.0 / v6);
  unint64_t v8 = 256;
  unint64_t v9 = vcvtpd_u64_f64(v6 * 256.0 / v5);
  if (v5 / v6 >= 1.0)
  {
    unint64_t v8 = v9;
    unint64_t v7 = 256;
  }
  if (v8 >= 0x100) {
    size_t v10 = 256;
  }
  else {
    size_t v10 = v8;
  }
  if (v7 >= 0x100) {
    unint64_t v11 = 256;
  }
  else {
    unint64_t v11 = v7;
  }
  if (!v11 || !v10) {
    _CGHandleAssert("CGPDFPageCreateThumbnail", 464, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Documents/CGPDFPage.c", "width > 0 && height > 0", "width (%lu) and height (%lu) must be positive2", v2, v3, v4, v11);
  }
  CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v13 = DeviceRGB;
  if (DeviceRGB) {
    uint64_t v14 = *(void *)(*((void *)DeviceRGB + 3) + 48) + 1;
  }
  else {
    uint64_t v14 = 1;
  }
  v15 = malloc_type_malloc(v11 * v10 * v14, 0xCA1D17BBuLL);
  memset(v15, 255, v11 * v10 * v14);
  v16 = CGBitmapContextCreateWithData(v15, v11, v10, 8uLL, v14 * v11, v13, 5u, 0, 0);
  CGColorSpaceRelease(v13);
  CGContextScaleCTM(v16, (double)v11 / v5, (double)v11 / v5);
  memset(v23, 0, sizeof(v23));
  CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)v16, (unint64_t)a1, (uint64_t)v23, 0, v17, v18, v19, v20);
  CGImageRef Image = CGBitmapContextCreateImage(v16);
  if (v16) {
    CFRelease(v16);
  }
  return Image;
}

void CGPDFPagePurgeResources(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    uint64_t v2 = (os_unfair_lock_s *)(v1 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
    uint64_t v3 = *(void *)(v1 + 24);
    os_unfair_lock_unlock(v2);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 80));
    CFDictionaryRef v4 = *(const __CFDictionary **)(v3 + 40);
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)call_dict_block, &__block_literal_global_8164);
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 40));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 80));
  }
}

CGPDFObjectRef CGPDFPageGetContents(CGPDFObjectRef result)
{
  if (result)
  {
    uint64_t v1 = *((void *)result + 5);
    CGPDFObjectRef value = 0;
    if (CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(v1 + 16), "Contents", &value)) {
      return value;
    }
    else {
      return 0;
    }
  }
  return result;
}

void CGPDFPageSetExtraContentStream(uint64_t a1, const void *a2, const void *a3)
{
  if (a1)
  {
    double v6 = (pthread_mutex_t *)(a1 + 216);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 216));
    unint64_t v7 = *(const void **)(a1 + 368);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 368) = 0;
    }
    if (a3 && *(const void **)(a1 + 16) != a3)
    {
      CFRetain(a3);
      *(void *)(a1 + 368) = a3;
    }
    uint64_t v8 = *(void *)(a1 + 40);
    unint64_t v9 = (os_unfair_lock_s *)(v8 + 88);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 88));
    size_t v10 = *(const void **)(v8 + 40);
    if (v10 != a2)
    {
      if (v10) {
        CFRelease(v10);
      }
      if (a2) {
        CFRetain(a2);
      }
      *(void *)(v8 + 40) = a2;
      os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 88));
      unint64_t v9 = (os_unfair_lock_s *)(v8 + 32);
      os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
      unint64_t v11 = *(const void **)(v8 + 24);
      if (v11) {
        CFRelease(v11);
      }
      *(void *)(v8 + 24) = CGPDFResourcesCreateWithPage(v8, *(unsigned __int8 *)(v8 + 48));
    }
    os_unfair_lock_unlock(v9);
    pthread_mutex_unlock(v6);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 304));
    v12 = *(const void **)(a1 + 312);
    if (v12) {
      CFRelease(v12);
    }
    *(void *)(a1 + 312) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 304));
  }
}

void CGContextDrawPDFDocument(CGContextRef c, CGRect rect, CGPDFDocumentRef document, int page)
{
  if (!c) {
    return;
  }
  if (!document) {
    return;
  }
  double height = rect.size.height;
  double width = rect.size.width;
  CGFloat y = rect.origin.y;
  CGFloat x = rect.origin.x;
  CGPDFPageRef v9 = CGPDFDocumentGetPage(document, page);
  if (!v9) {
    return;
  }
  size_t v10 = v9;
  CGContextSaveGState(c);
  BOOL v17 = height < 0.0 || width < 0.0;
  if (v17)
  {
    v38.origin.CGFloat x = x;
    v38.origin.CGFloat y = y;
    v38.size.double width = width;
    v38.size.double height = height;
    *(void *)&double recta = (unint64_t)CGRectStandardize(v38);
    v39.origin.CGFloat x = x;
    v39.origin.CGFloat y = y;
    v39.size.double width = width;
    v39.size.double height = height;
    CGRect v40 = CGRectStandardize(v39);
  }
  else
  {
    double recta = x;
    v40.origin.CGFloat y = y;
  }
  if (*((_DWORD *)c + 4) == 1129601108) {
    *(float64x2_t *)(*((void *)c + 12) + 56) = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(*((void *)c + 12) + 56), *(float64x2_t *)(*((void *)c + 12) + 24), recta), *(float64x2_t *)(*((void *)c + 12) + 40), v40.origin.y);
  }
  else {
    handle_invalid_context((char)"CGContextTranslateCTM", (uint64_t)c, v11, v12, v13, v14, v15, v16);
  }
  CGRect BoxRect = CGPDFPageGetBoxRect(v10, kCGPDFMediaBox);
  double v24 = BoxRect.origin.x;
  double rectb = BoxRect.origin.y;
  double v25 = BoxRect.size.width;
  double v26 = BoxRect.size.height;
  double v27 = width;
  if (v17)
  {
    v42.origin.CGFloat x = x;
    v42.origin.CGFloat y = y;
    v42.size.double width = width;
    v42.size.double height = height;
    *(CGRect *)(&v27 - 2) = CGRectStandardize(v42);
  }
  double v33 = v27;
  BOOL v28 = v26 < 0.0 || v25 < 0.0;
  double v29 = v25;
  if (v28)
  {
    v43.origin.CGFloat x = v24;
    v43.origin.CGFloat y = rectb;
    v43.size.double width = v25;
    v43.size.double height = v26;
    CGRect v44 = CGRectStandardize(v43);
    double v29 = v44.size.width;
  }
  if (v17)
  {
    v45.origin.CGFloat x = x;
    v45.origin.CGFloat y = y;
    v45.size.double width = width;
    v45.size.double height = height;
    CGRect v46 = CGRectStandardize(v45);
    double height = v46.size.height;
  }
  double v30 = v26;
  if (v28)
  {
    v47.origin.CGFloat x = v24;
    v47.origin.CGFloat y = rectb;
    v47.size.double width = v25;
    v47.size.double height = v26;
    *(CGRect *)(&v30 - 3) = CGRectStandardize(v47);
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    handle_invalid_context((char)"CGContextScaleCTM", (uint64_t)c, v18, v19, v20, v21, v22, v23);
    if (v28) {
      goto LABEL_26;
    }
LABEL_28:
    double v34 = -v24;
    goto LABEL_29;
  }
  uint64_t v31 = *((void *)c + 12);
  float64x2_t v32 = vmulq_n_f64(*(float64x2_t *)(v31 + 40), height / v30);
  *(float64x2_t *)(v31 + 24) = vmulq_n_f64(*(float64x2_t *)(v31 + 24), v33 / v29);
  *(float64x2_t *)(v31 + 40) = v32;
  if (!v28) {
    goto LABEL_28;
  }
LABEL_26:
  v48.origin.CGFloat x = v24;
  v48.origin.CGFloat y = rectb;
  v48.size.double width = v25;
  v48.size.double height = v26;
  double v34 = -COERCE_DOUBLE(CGRectStandardize(v48));
  v49.origin.CGFloat x = v24;
  v49.origin.CGFloat y = rectb;
  v49.size.double width = v25;
  v49.size.double height = v26;
  CGRect v50 = CGRectStandardize(v49);
  double rectb = v50.origin.y;
LABEL_29:
  if (*((_DWORD *)c + 4) == 1129601108) {
    *(float64x2_t *)(*((void *)c + 12) + 56) = vmlsq_lane_f64(vmlaq_n_f64(*(float64x2_t *)(*((void *)c + 12) + 56), *(float64x2_t *)(*((void *)c + 12) + 24), v34), *(float64x2_t *)(*((void *)c + 12) + 40), rectb, 0);
  }
  else {
    handle_invalid_context((char)"CGContextTranslateCTM", (uint64_t)c, v18, v19, v20, v21, v22, v23);
  }
  memset(v37, 0, sizeof(v37));
  CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)c, (unint64_t)v10, (uint64_t)v37, 0, v20, v21, v22, v23);
  CGContextRestoreGState(c);
}

void CGContextDrawPDFPageInRect(CGContext *a1, uint64_t *a2, CGPDFBox a3, int a4, int a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  if (a2) {
    pdf_page_get_drawing_transform(&v17.a, a2[5], a3, a4, a5, 1, -8.98846567e307, -8.98846567e307, 1.79769313e308, 1.79769313e308, a6, a7, a8, a9);
  }
  else {
    CGAffineTransform v17 = CGAffineTransformIdentity;
  }
  CGContextSaveGState(a1);
  CGAffineTransform v16 = v17;
  CGContextConcatCTM(a1, &v16);
  CGRect BoxRect = CGPDFPageGetBoxRect((CGPDFPageRef)a2, a3);
  CGContextClipToRect(a1, BoxRect);
  memset(&v16, 0, 32);
  CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)a1, (unint64_t)a2, (uint64_t)&v16, 0, v12, v13, v14, v15);
  CGContextRestoreGState(a1);
}

void CGContextDrawPDFPageWithOptions(CGContext *a1, uint64_t *a2, CGPDFBox a3, CFDictionaryRef theDict, double a5, double a6)
{
  LOBYTE(v44.a) = 0;
  int v12 = CGCFDictionaryGetBoolean(theDict, @"kCGDrawPDFPageAllowUpscaleOptionKey", (BOOL *)&v44) ^ 1;
  if (LOBYTE(v44.a)) {
    int v13 = v12;
  }
  else {
    int v13 = 1;
  }
  LOBYTE(v44.a) = 0;
  int v14 = CGCFDictionaryGetBoolean(theDict, @"kCGDrawPDFPageMaintainAspectRatioOptionKey", (BOOL *)&v44) ^ 1;
  if (LOBYTE(v44.a)) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  int v45 = 0;
  if (CGCFDictionaryGetInteger(theDict, @"kCGDrawPDFPageAdditionalRotationOptionKey", &v45))
  {
    HIDWORD(v16) = -1527099483 * v45 + 47721858;
    LODWORD(v16) = HIDWORD(v16);
    if ((v16 >> 1) >= 0x2D82D83)
    {
      pdf_error("%s: value of CGContextDrawPDFPageOptionAdditionalRotation must be a multiple of 90", "void CGContextDrawPDFPageWithOptions(CGContextRef _Nonnull, CGPDFPageRef _Nonnull, CGPDFBox, CGSize, CFDictionaryRef _Nonnull)");
      return;
    }
  }
  LOBYTE(v44.a) = 0;
  int Boolean = CGCFDictionaryGetBoolean(theDict, @"kCGDrawPDFPageDrawAnnotationsOptionKey", (BOOL *)&v44);
  if (LOBYTE(v44.a)) {
    int v18 = Boolean;
  }
  else {
    int v18 = 0;
  }
  LOBYTE(v44.a) = 0;
  int v19 = CGCFDictionaryGetBoolean(theDict, @"kCGDrawPDFPageIsThumbnailOptionKey", (BOOL *)&v44);
  if (LOBYTE(v44.a)) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (void *)[(__CFDictionary *)theDict valueForKey:@"kCGDrawPDFPageSourceRectOptionKey"];
  if (v21)
  {
    [v21 rectValue];
  }
  else
  {
    CGFloat v23 = -8.98846567e307;
    CGFloat v25 = 1.79769313e308;
    CGFloat v24 = 1.79769313e308;
    CGFloat v22 = -8.98846567e307;
  }
  memset(&v44, 0, sizeof(v44));
  pdf_page_get_drawing_transform(&v44.a, a2[5], a3, v45, v15, v13, v22, v23, v24, v25, 0.0, 0.0, a5, a6);
  LOBYTE(transform.a) = 0;
  if (CGCFDictionaryGetBoolean(theDict, @"kCGDrawPDFPageWhiteBackgroundOptionKey", (BOOL *)&transform)&& LOBYTE(transform.a))
  {
    GenericGraCGFloat y = CGColorCreateGenericGray(1.0, 1.0);
    goto LABEL_25;
  }
  if (theDict)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"kCGDrawPDFPageBackgroundColorOptionKey");
    if (Value)
    {
      GenericGraCGFloat y = CGColorCreateWithPropertyList(Value);
LABEL_25:
      BOOL v28 = GenericGray;
      if (GenericGray)
      {
        CGContextSaveGState(a1);
        CGContextSetFillColorWithColor(a1, v28);
        ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox(a1);
        CGContextFillRect(a1, ClipBoundingBox);
        CGContextRestoreGState(a1);
        CFRelease(v28);
      }
    }
  }
  CGContextSaveGState(a1);
  CGAffineTransform transform = v44;
  CGContextConcatCTM(a1, &transform);
  CGRect BoxRect = CGPDFPageGetBoxRect((CGPDFPageRef)a2, a3);
  CGContextClipToRect(a1, BoxRect);
  CGContextSetAllowsAntialiasing(a1, 1);
  CGContextSetShouldAntialias(a1, 1);
  CGContextSetTextGreekingThreshold((uint64_t)a1, 0.0, v29, v30, v31, v32, v33, v34, v35);
  CGContextSetInterpolationQuality(a1, kCGInterpolationHigh);
  if (v20) {
    CGContextSetLineWidthThreshold((uint64_t)a1, 0.0, v36, v37, v38, v39, v40, v41, v42);
  }
  if (v18)
  {
    CGContextDrawPDFPageWithAnnotations(a1, (unint64_t)a2, 0, v38, v39, v40, v41, v42);
  }
  else
  {
    memset(&transform, 0, 32);
    CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)a1, (unint64_t)a2, (uint64_t)&transform, 0, v39, v40, v41, v42);
  }
  CGContextRestoreGState(a1);
}

void CGContextDrawPDFPageWithAnnotations(CGContext *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a2)
  {
    memset(v16, 0, sizeof(v16));
    CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)a1, a2, (uint64_t)v16, 0, a5, a6, a7, a8);
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 336));
    Annotations = *(__CFArray **)(a2 + 344);
    if (!Annotations)
    {
      Annotations = LoadAnnotations(a2);
      *(void *)(a2 + 344) = Annotations;
    }
    CFIndex Count = CFArrayGetCount(Annotations);
    if (Count)
    {
      CFIndex v13 = Count;
      for (CFIndex i = 0; i != v13; ++i)
      {
        ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 344), i);
        CGContextSaveGState(a1);
        if (a3) {
          (*(void (**)(uint64_t, CGContext *, unint64_t, const void *))(a3 + 16))(a3, a1, a2, ValueAtIndex);
        }
        else {
          CGContextDrawPDFAnnotation(a1, (uint64_t)ValueAtIndex);
        }
        CGContextRestoreGState(a1);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 336));
  }
}

__CFArray *LoadAnnotations(uint64_t a1)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CGPDFArrayRef value = 0;
  if (CGPDFDictionaryGetArray(*(CGPDFDictionaryRef *)(*(void *)(a1 + 40) + 16), "Annots", &value))
  {
    if (value)
    {
      uint64_t v3 = *((void *)value + 2);
      if (v3)
      {
        for (size_t i = 0; i != v3; ++i)
        {
          uint64_t v7 = 0;
          if (CGPDFArrayGetDictionary(value, i, (CGPDFDictionaryRef *)&v7))
          {
            double v5 = (const void *)CGPDFAnnotationCreateWithCGPDFDictionary(v7);
            CFArrayAppendValue(Mutable, v5);
            CFRelease(v5);
          }
        }
      }
    }
  }
  return Mutable;
}

void CGContextDrawPDFPageWithProgressCallback(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[0] = 0;
  long long v9 = 0u;
  v8[1] = a3;
  CGContextDrawPDFPageWithDrawingCallbacks(a1, a2, (uint64_t)v8, a4, a5, a6, a7, a8);
}

void CGContextDrawPDFPageWithContentTypes(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[0] = 1;
  v8[1] = 0;
  void v8[2] = 0;
  v8[3] = a3;
  CGContextDrawPDFPageWithDrawingCallbacks(a1, a2, (uint64_t)v8, 0, a5, a6, a7, a8);
}

const void *CGPDFPageGetProperty(uint64_t a1, const void *a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 72)) != 0) {
    return CGPropertiesGetProperty(v2, a2);
  }
  else {
    return 0;
  }
}

void CGPDFPageSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!*(void *)(v5 + 72))
    {
      double v6 = (CFTypeRef *)CGPropertiesCreate();
      uint64_t v7 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v5 + 72), (unint64_t *)&v7, (unint64_t)v6, memory_order_relaxed, memory_order_relaxed);
      if (v7) {
        CGPropertiesRelease(v6);
      }
    }
    uint64_t v8 = *(void *)(v5 + 72);
    CGPropertiesSetProperty(v8, a2, a3);
  }
}

void CGPDFPageRemoveProperty(uint64_t a1, const void *a2)
{
  if (a1 && a2)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 72);
    if (v2) {
      CGPropertiesRemoveProperty(v2, a2);
    }
  }
}

CGPDFContentStreamRef *CGPDFPageCopyTextString(CGPDFContentStreamRef *result)
{
  if (result)
  {
    uint64_t v1 = (CGPDFContentStreamRef *)CGPDFTextExtractorCreateWithPage((uint64_t)result[5], 0);
    uint64_t v2 = CGPDFTextExtractorCopyTextString(v1);
    CGPDFTextExtractorRelease(v1);
    return v2;
  }
  return result;
}

CGPDFContentStreamRef *CGPDFPageCopyTextStringWithGlyphs(CGPDFContentStreamRef *result)
{
  if (result)
  {
    uint64_t v1 = (CGPDFContentStreamRef *)CGPDFTextExtractorCreateWithPage((uint64_t)result[5], 1);
    uint64_t v2 = CGPDFTextExtractorCopyTextString(v1);
    CGPDFTextExtractorRelease(v1);
    return v2;
  }
  return result;
}

uint64_t CGPDFPagePrint(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 40);
    CGPDFStreamRef v10 = 0;
    uint64_t v3 = (FILE *)(a2 ? a2 : *MEMORY[0x1E4F143C8]);
    fprintf(v3, "Page %zu:\n", *(void *)(v2 + 8));
    CGPDFDictionaryPrintWithIndent(*(void *)(v2 + 16), v3, 0);
    fputc(10, v3);
    CGPDFObjectRef value = 0;
    result = CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(v2 + 16), "Contents", &value);
    if (result && value != 0)
    {
      int v5 = *((_DWORD *)value + 2);
      if (v5 == 7)
      {
        uint64_t v7 = (CGPDFArray *)*((void *)value + 4);
        if (v7)
        {
          uint64_t v8 = *((void *)v7 + 2);
          if (v8)
          {
            for (size_t i = 0; i != v8; ++i)
            {
              result = CGPDFArrayGetStream(v7, i, &v10);
              if (result)
              {
                fprintf(v3, "Stream %zu:\n", i);
                result = stream_print((uint64_t)v10, v3, 0, 1);
              }
            }
          }
        }
      }
      else if (v5 == 9)
      {
        uint64_t v6 = *((void *)value + 4);
        fwrite("Stream 1:\n", 0xAuLL, 1uLL, v3);
        return stream_print(v6, v3, 0, 1);
      }
    }
  }
  return result;
}

BOOL CGPDFPageContainsWideGamutContent(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 284);
  if (v2) {
    return v2 == 1;
  }
  CGPDFDictionaryRef v4 = *(CGPDFDictionaryRef *)(*(void *)(a1 + 40) + 16);
  CGPDFDictionaryRef value = 0;
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  while (!CGPDFDictionaryGetDictionary(v4, "Resources", &value))
  {
    v10[0] = 0;
    CFSetAddValue(Mutable, v4);
    if (!CGPDFDictionaryGetDictionary(v4, "Parent", v10) || CFSetContainsValue(Mutable, v10[0])) {
      break;
    }
    CGPDFDictionaryRef v4 = v10[0];
  }
  CFRelease(Mutable);
  v10[0] = 0;
  v10[1] = 0;
  if (value && resourceDictionaryContainsWideGamutContent(v10, value))
  {
    int v6 = 1;
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    int v6 = 2;
  }
  *(_DWORD *)(a1 + 284) = v6;
  CGPDFDictionaryRef v7 = v10[0];
  if (v10[0])
  {
    do
    {
      uint64_t v8 = (CGPDFDictionary *)*((void *)v7 + 1);
      free(v7);
      CGPDFDictionaryRef v7 = v8;
    }
    while (v8);
  }
  return v3;
}

BOOL resourceDictionaryContainsWideGamutContent(unsigned char *a1, CGPDFDictionaryRef dict)
{
  BOOL result = 1;
  if (!a1[8])
  {
    CGPDFDictionaryRef value = 0;
    if (!CGPDFDictionaryGetDictionary(dict, "ColorSpace", &value)
      || (CGPDFDictionaryApplyFunction(value, (CGPDFDictionaryApplierFunction)wideGamutColorSpaceDetector, a1), !a1[8]))
    {
      CGPDFDictionaryRef dicta = 0;
      if (!CGPDFDictionaryGetDictionary(dict, "XObject", &dicta)) {
        return 0;
      }
      CGPDFDictionaryApplyFunction(dicta, (CGPDFDictionaryApplierFunction)wideGamutImageDetector, a1);
      if (!a1[8]) {
        return 0;
      }
    }
  }
  return result;
}

void wideGamutImageDetector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 8)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = a2 == 0;
  }
  if (v3) {
    return;
  }
  if (*(_DWORD *)(a2 + 8) != 9) {
    return;
  }
  CGPDFDictionaryRef v4 = *(CGPDFStream **)(a2 + 32);
  if (!v4) {
    return;
  }
  int v5 = (CGPDFDictionary *)*((void *)v4 + 6);
  if (!v5) {
    return;
  }
  CGPDFDictionaryRef value = 0;
  if (!CGPDFDictionaryGetName(v5, "Subtype", (const char **)&value)) {
    return;
  }
  CGPDFDictionaryRef v7 = value;
  if (!strcmp(value, "PS")) {
    return;
  }
  if (strcmp(v7, "Image"))
  {
    if (strcmp(v7, "Form")) {
      return;
    }
    __s1 = 0;
    if (CGPDFDictionaryGetName(v5, "Subtype2", (const char **)&__s1) && !strcmp(__s1, "PS")) {
      return;
    }
    CGPDFDictionaryRef dict = 0;
    CGPDFDictionaryGetDictionary(v5, "Resources", &dict);
    CGPDFDictionaryRef v8 = dict;
    if (!dict) {
      return;
    }
    long long v9 = *(CGPDFDictionaryRef **)a3;
    if (*(void *)a3)
    {
      CGPDFStreamRef v10 = *(CGPDFDictionaryRef **)a3;
      while (*v10 != dict)
      {
        CGPDFStreamRef v10 = (CGPDFDictionaryRef *)v10[1];
        if (!v10) {
          goto LABEL_19;
        }
      }
      return;
    }
LABEL_19:
    uint64_t v11 = (CGPDFDictionaryRef *)malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
    if (v11)
    {
      CGPDFDictionaryRef *v11 = v8;
      v11[1] = (CGPDFDictionaryRef)v9;
      long long v9 = v11;
    }
    *(void *)a3 = v9;
    if (!resourceDictionaryContainsWideGamutContent(a3, dict)) {
      return;
    }
LABEL_38:
    *(unsigned char *)(a3 + 8) = 1;
    return;
  }
  __s1 = 0;
  CGPDFDictionaryGetArray(v5, "ColorSpace", (CGPDFArrayRef *)&__s1);
  if (__s1)
  {
    CGPDFDictionaryRef dict = 0;
    if (CGPDFArrayGetName((CGPDFArrayRef)__s1, 0, (const char **)&dict) && !strcmp((const char *)dict, "ICCBased"))
    {
      CGPDFStreamRef v18 = 0;
      if (CGPDFArrayGetStream((CGPDFArrayRef)__s1, 1uLL, &v18) && isStreamWideGamutICCProfile(v18)) {
        goto LABEL_38;
      }
    }
  }
  if (canFilterEmbedICCProfiles(v5))
  {
    LODWORD(dict) = 0;
    CFDataRef v12 = CGPDFStreamCopyData(v4, (CGPDFDataFormat *)&dict);
    if (v12)
    {
      CFDataRef v13 = v12;
      if (wideGamutImageDetector_predicate != -1) {
        dispatch_once(&wideGamutImageDetector_predicate, &__block_literal_global_65);
      }
      int v14 = (const void *)wideGamutImageDetector_f(v13, 0);
      CFRelease(v13);
      if (v14)
      {
        if (wideGamutImageDetector_predicate_68 != -1) {
          dispatch_once(&wideGamutImageDetector_predicate_68, &__block_literal_global_71);
        }
        int v15 = (CGImage *)wideGamutImageDetector_f_67(v14, 0, 0);
        CFRelease(v14);
        if (v15)
        {
          CGColorSpaceRef ColorSpace = CGImageGetColorSpace(v15);
          if (!ColorSpace)
          {
            CFRelease(v15);
            return;
          }
          int v17 = *(unsigned __int8 *)(*((void *)ColorSpace + 3) + 14);
          CFRelease(v15);
          if (v17) {
            goto LABEL_38;
          }
        }
      }
    }
  }
}

BOOL isStreamWideGamutICCProfile(CGPDFStream *a1)
{
  CGPDFDataFormat format = CGPDFDataFormatRaw;
  CFDataRef v1 = CGPDFStreamCopyData(a1, &format);
  BOOL v2 = (BOOL)v1;
  if (v1)
  {
    Retained = (CGColorSpace *)CGColorSpaceFromICCDataCacheGetRetained(v1);
    CFRelease((CFTypeRef)v2);
    if (Retained)
    {
      BOOL v2 = *(unsigned char *)(*((void *)Retained + 3) + 14) != 0;
      CGColorSpaceRelease(Retained);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t canFilterEmbedICCProfiles(CGPDFDictionary *a1)
{
  CGPDFDictionaryRef value = 0;
  if (CGPDFDictionaryGetName(a1, "Filter", (const char **)&value))
  {
    BOOL v2 = value;
    if (strcmp(value, "DCTDecode")) {
      return strcmp(v2, "JPXDecode") == 0;
    }
  }
  else
  {
    arraCGFloat y = 0;
    uint64_t result = CGPDFDictionaryGetArray(a1, "Filter", &array);
    if (!result) {
      return result;
    }
    if (!array) {
      return 0;
    }
    uint64_t v4 = *((void *)array + 2);
    if (!v4) {
      return 0;
    }
    size_t v5 = 0;
    while (1)
    {
      if (CGPDFArrayGetName(array, v5, (const char **)&value))
      {
        int v6 = value;
        if (!strcmp(value, "DCTDecode") || !strcmp(v6, "JPXDecode")) {
          break;
        }
      }
      if (v4 == ++v5) {
        return 0;
      }
    }
  }
  return 1;
}

void *__wideGamutImageDetector_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  wideGamutImageDetector_f_67 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__wideGamutImageDetector_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithData");
  }
  uint64_t result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithData");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithData");
  }
  wideGamutImageDetector_f = (uint64_t (*)(void, void))result;
  return result;
}

void wideGamutColorSpaceDetector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 8)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = a2 == 0;
  }
  if (!v3 && *(_DWORD *)(a2 + 8) == 7)
  {
    size_t v5 = *(CGPDFArray **)(a2 + 32);
    CGPDFDictionaryRef value = 0;
    if (CGPDFArrayGetName(v5, 0, (const char **)&value) && !strcmp(value, "ICCBased"))
    {
      CGPDFStreamRef v6 = 0;
      if (CGPDFArrayGetStream(v5, 1uLL, &v6) && isStreamWideGamutICCProfile(v6)) {
        *(unsigned char *)(a3 + 8) = 1;
      }
    }
  }
}

uint64_t CGPDFPageCreateWithImage(uint64_t a1, uint64_t a2, int a3, const __CFDictionary *a4)
{
  HIDWORD(v5) = -1527099483 * a3 + 47721858;
  LODWORD(v5) = HIDWORD(v5);
  if ((v5 >> 1) < 0x2D82D83)
  {
    if (a2)
    {
      CGSize v9 = *(CGSize *)(a2 + 16);
      mediaBox.origin = *(CGPoint *)a2;
      mediaBox.size = v9;
    }
    else
    {
      mediaBox.origin.CGFloat x = 0.0;
      mediaBox.origin.CGFloat y = 0.0;
      mediaBox.size = (CGSize)xmmword_1850CD850;
    }
    Mutable = CFDataCreateMutable(0, 0);
    uint64_t v11 = CGDataConsumerCreateWithCFData(Mutable);
    CFDataRef v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDataRef v13 = v12;
    if (v12) {
      CFDictionarySetValue(v12, @"kCGPDFContextShouldOutputAllImagesAsJPEG", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    double v37 = 0.0;
    if (a4)
    {
      int v14 = @"kCGImageDestinationLossyCompressionQuality";
      if (CFDictionaryContainsKey(a4, @"kCGImageDestinationLossyCompressionQuality")
        || (int v14 = @"kCGPDFContextJPEGCompressionQuality",
            CFDictionaryContainsKey(a4, @"kCGPDFContextJPEGCompressionQuality")))
      {
        CGCFDictionaryGetFloat(a4, v14, &v37);
        CGCFDictionarySetFloat(v13, @"kCGPDFContextJPEGCompressionQuality", v37);
      }
    }
    int v15 = CGPDFContextCreate(v11, &mediaBox, v13);
    if (v11) {
      CFRelease(v11);
    }
    CFRelease(v13);
    if (a1)
    {
      double v16 = (double)*(unint64_t *)(a1 + 40);
      double v17 = (double)*(unint64_t *)(a1 + 48);
      int v18 = *(unsigned __int8 *)(a1 + 38);
      if ((v18 - 9) <= 0xFFFFFFF7)
      {
        pdf_error("Invalid image orientation, assuming 1.");
        int v18 = 1;
      }
    }
    else
    {
      int v18 = 1;
      double v16 = 0.0;
      double v17 = 0.0;
    }
    int v19 = a3 % 360;
    if (a3 % 360 < 0) {
      LOWORD(v19) = a3 % 360 + 360;
    }
    int v20 = dword_1850CECB8[4 * (v18 - 1) + (unsigned __int16)v19 / 0x5Au];
    if ((v20 - 5) >= 4) {
      double v21 = v16;
    }
    else {
      double v21 = v17;
    }
    if ((v20 - 5) >= 4) {
      double v22 = v17;
    }
    else {
      double v22 = v16;
    }
    BOOL v39 = 0;
    int Boolean = CGCFDictionaryGetBoolean(a4, @"kCGPDFPageCreateWithImageAllowUpscale", &v39);
    if (v39) {
      int v24 = Boolean;
    }
    else {
      int v24 = 0;
    }
    double v25 = mediaBox.size.width / v21;
    if (mediaBox.size.width / v21 >= mediaBox.size.height / v22) {
      double v25 = mediaBox.size.height / v22;
    }
    if (v25 <= 1.0) {
      int v24 = 1;
    }
    if (v24) {
      double v26 = v25;
    }
    else {
      double v26 = 1.0;
    }
    CGPDFContextBeginPage(v15, 0);
    CGContextTranslateCTM(v15, (mediaBox.size.width - v21 * v26) * 0.5, (mediaBox.size.height - v22 * v26) * 0.5);
    CGContextScaleCTM(v15, v26, v26);
    CGImageGetTransformForOrientationAndSize(v20, v27, v28, v29, v30, v31, v32, (uint64_t)&transform, v16, v17);
    CGContextConcatCTM(v15, &transform);
    v40.origin.CGFloat x = 0.0;
    v40.origin.CGFloat y = 0.0;
    v40.size.double width = v16;
    v40.size.double height = v17;
    CGContextDrawImage(v15, v40, (CGImageRef)a1);
    CGPDFContextEndPage(v15);
    CGPDFContextClose(v15);
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v33 = CGDataProviderCreateWithCFData(Mutable);
    CFRelease(Mutable);
    CGPDFDocumentRef v34 = CGPDFDocumentCreateWithProvider(v33);
    CGDataProviderRelease(v33);
    uint64_t v6 = CGPDFDocumentCopyPage((uint64_t)v34, 1uLL);
    if (v34) {
      CFRelease(v34);
    }
  }
  else
  {
    pdf_error("%s: Invalid rotation parameter (%d). It must be a multiple of 90.", "CGPDFPageCreateWithImage", a3);
    return 0;
  }
  return v6;
}

uint64_t CGPDFPageCreate(CFTypeRef *a1, unint64_t a2)
{
  return CGPDFPageCreate2(a1, a2, 0);
}

void CGPDFPageSetBoxRect(uint64_t a1, unsigned int a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6)
{
  if (a1)
  {
    if (a2 <= 4)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        CFDataRef v12 = (double *)(a1 + 32 * a2);
        v12[7] = a3;
        v12[8] = a4;
        v12[9] = a5;
        v12[10] = a6;
        CFDataRef v13 = off_1E529F3B8[a2];
        int v14 = *(char **)(v7 + 216);
        int v15 = (os_unfair_lock_s *)(v7 + 212);
        os_unfair_lock_lock((os_unfair_lock_t)(v7 + 212));
        PDFRect = CGCFArrayCreatePDFRect(a3, a4, a5, a6);
        CGPDFAppenderMutateDictionaryValue(v14, *(uint64_t **)(*(void *)(a1 + 40) + 16), v13, PDFRect, 0);
        CFRelease(PDFRect);
        os_unfair_lock_unlock(v15);
      }
    }
  }
}

void CGPDFPageSetRotationAngle(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    HIDWORD(v4) = -1527099483 * a2;
    LODWORD(v4) = -1527099483 * a2;
    if ((v4 >> 1) <= 0x2D82D82 && (a2 & 0x80000000) == 0)
    {
      uint64_t v12 = v2;
      uint64_t v13 = v3;
      uint64_t v6 = *(void *)(a1 + 16);
      if (v6)
      {
        unsigned int v7 = a2 % 0x168;
        unsigned int valuePtr = a2 % 0x168;
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 216));
        *(_DWORD *)(a1 + 48) = v7;
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 216));
        CGPDFDictionaryRef v8 = *(char **)(v6 + 216);
        CGSize v9 = (os_unfair_lock_s *)(v6 + 212);
        os_unfair_lock_lock(v9);
        CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
        CGPDFAppenderMutateDictionaryValue(v8, *(uint64_t **)(*(void *)(a1 + 40) + 16), "Rotate", v10, 0);
        CFRelease(v10);
        os_unfair_lock_unlock(v9);
      }
    }
  }
}

os_unfair_lock_s *CGPDFPageGetAnnotationCount(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = result + 84;
    os_unfair_lock_lock(result + 84);
    Annotations = *(__CFArray **)(v1 + 344);
    if (!Annotations)
    {
      Annotations = LoadAnnotations(v1);
      *(void *)(v1 + 344) = Annotations;
    }
    CFIndex Count = CFArrayGetCount(Annotations);
    os_unfair_lock_unlock(v2);
    return (os_unfair_lock_s *)Count;
  }
  return result;
}

const void *CGPDFPageGetAnnotationAtIndex(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 0;
  }
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 336);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
  Annotations = *(__CFArray **)(a1 + 344);
  if (!Annotations)
  {
    Annotations = LoadAnnotations(a1);
    *(void *)(a1 + 344) = Annotations;
  }
  unint64_t Count = CFArrayGetCount(Annotations);
  ValueAtIndeCGFloat x = 0;
  if ((Count & 0x8000000000000000) == 0 && Count > a2) {
    ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 344), a2);
  }
  os_unfair_lock_unlock(v4);
  return ValueAtIndex;
}

uint64_t AppendModeFindAnnotation(char *a1, CFArrayRef theArray, uint64_t a3, CFIndex *a4, void *a5)
{
  uint64_t result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    uint64_t v10 = result;
    for (CFIndex i = 0; v10 != i; ++i)
    {
      ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(theArray, i);
      uint64_t v13 = ValueAtIndex;
      if (ValueAtIndex)
      {
        uint64_t v14 = ValueAtIndex[2];
        uint64_t v15 = ValueAtIndex[3];
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      if (CGPDFAppenderHasMutableObject((uint64_t)a1, v14, v15)) {
        MutableObject = CGPDFAppenderGetMutableObject(a1, v14, v15);
      }
      else {
        MutableObject = 0;
      }
      uint64_t v17 = *(void *)(a3 + 16);
      uint64_t result = *(void *)(a3 + 24);
      if (result)
      {
        if (!v17) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t result = (uint64_t)CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a3 + 16));
        *(void *)(a3 + 24) = result;
        if (!v17)
        {
LABEL_13:
          uint64_t v18 = 0;
          goto LABEL_14;
        }
      }
      uint64_t v18 = *(void *)(v17 + 32);
LABEL_14:
      if (MutableObject == (char *)result || v14 == v18)
      {
        *a5 = v13;
        *a4 = i;
        return result;
      }
    }
  }
  return result;
}

uint64_t CGPDFPageGetReferenceForAnnotation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    unint64_t v5 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    if (*(void *)(a1 + 344))
    {
      uint64_t v8 = 0;
      CGSize v9 = &v8;
      uint64_t v10 = 0x2000000000;
      uint64_t v11 = 0;
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 0x40000000;
      v7[2] = __CGPDFPageGetReferenceForAnnotation_block_invoke;
      v7[3] = &unk_1E529F2D8;
      v7[4] = &v8;
      v7[5] = a2;
      AppendModeUpdateAnnotations((void *)a1, (uint64_t)v7);
      os_unfair_lock_unlock(v5);
      uint64_t v2 = v9[3];
      _Block_object_dispose(&v8, 8);
    }
    else
    {
      os_unfair_lock_unlock(v5);
      return 0;
    }
  }
  return v2;
}

uint64_t __CGPDFPageGetReferenceForAnnotation_block_invoke(uint64_t a1, char *a2, CFArrayRef theArray)
{
  uint64_t v5 = 0;
  uint64_t result = AppendModeFindAnnotation(a2, theArray, *(void *)(a1 + 40), &v6, &v5);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  return result;
}

void AppendModeUpdateAnnotations(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 212));
    uint64_t v5 = *(char **)(v4 + 216);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[44];
  uint64_t v7 = a1[45];
  if (v6 | (unsigned __int16)v7) {
    goto LABEL_13;
  }
  uint64_t v8 = *(uint64_t **)(a1[5] + 16);
  CGPDFArrayRef value = 0;
  if (CGPDFDictionaryGetArray((CGPDFDictionaryRef)v8, "Annots", &value))
  {
    CGSize v9 = value;
    if (value)
    {
      uint64_t v6 = *((void *)value + 5);
      uint64_t v7 = *((void *)value + 6);
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    a1[44] = v6;
    a1[45] = v7;
    if (!(v6 | (unsigned __int16)v7))
    {
      CFArraCGFloat y = CGPDFAppenderCreateCFArray(v9);
      uint64_t MutableObject = CGPDFAppenderCreateMutableObject((uint64_t)v5, CFArray);
      a1[44] = MutableObject;
      a1[45] = v14;
      uint64_t v15 = (const void *)CGPDFReferenceCreate(MutableObject, v14);
      CGPDFAppenderMutateDictionaryValue(v5, v8, "Annots", v15, 0);
      goto LABEL_23;
    }
LABEL_13:
    CFArraCGFloat y = CGPDFAppenderGetMutableObject(v5, v6, v7);
    if (!CFArray) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  CFArraCGFloat y = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CGPDFAppenderMutateDictionaryValue(v5, v8, "Annots", CFArray, 2);
  if (v8)
  {
    uint64_t v11 = v8[4];
    uint64_t v12 = v8[5];
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  double v16 = CGPDFAppenderGetMutableObject(v5, v11, v12);
  uint64_t v17 = (const void *)CGPDFNameCreate("Annots");
  uint64_t v18 = CFDictionaryGetValue((CFDictionaryRef)v16, v17);
  CFRelease(v17);
  if (v18) {
    long long v19 = v18[1];
  }
  else {
    long long v19 = 0uLL;
  }
  *((_OWORD *)a1 + 22) = v19;
LABEL_23:
  CFRelease(CFArray);
  if (CFArray) {
LABEL_14:
  }
    (*(void (**)(uint64_t, char *, const void *))(a2 + 16))(a2, v5, CFArray);
LABEL_15:
  if (v4) {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 212));
  }
}

void CGPDFPageAddAnnotation(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    PageAddAnnotation((void *)a1, a2, -1);
    os_unfair_lock_unlock(v4);
  }
}

void PageAddAnnotation(void *a1, void *value, CFIndex idx)
{
  Annotations = (__CFArray *)a1[43];
  if (!Annotations)
  {
    Annotations = LoadAnnotations((uint64_t)a1);
    a1[43] = Annotations;
  }
  if (idx == -1)
  {
    idCGFloat x = CFArrayGetCount(Annotations);
    Annotations = (__CFArray *)a1[43];
  }
  CFArrayInsertValueAtIndex(Annotations, idx, value);
  if (*((unsigned char *)value + 32))
  {
    uint64_t v7 = a1[2];
    if (v7)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v7 + 212));
      CGPDFAppenderCreateAnnotationObject(*(char **)(v7 + 216), (uint64_t)a1, (uint64_t)value);
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 212));
    }
    else
    {
      CGPDFAppenderCreateAnnotationObject(0, (uint64_t)a1, (uint64_t)value);
    }
  }
  else
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    void v8[2] = __PageAddAnnotation_block_invoke;
    v8[3] = &__block_descriptor_tmp_84;
    void v8[4] = a1;
    v8[5] = value;
    v8[6] = idx;
    AppendModeUpdateAnnotations(a1, (uint64_t)v8);
  }
}

void __PageAddAnnotation_block_invoke(uint64_t *a1, char *a2, const __CFArray *a3)
{
  uint64_t AnnotationObject = CGPDFAppenderCreateAnnotationObject(a2, a1[4], a1[5]);
  if (AnnotationObject | (unsigned __int16)v6)
  {
    uint64_t v7 = AnnotationObject;
    uint64_t v8 = v6;
    CFIndex Count = CFArrayGetCount(a3);
    uint64_t v10 = a1[6];
    CFIndex v11 = Count - 1;
    if (v10 <= Count) {
      CFIndex v11 = a1[6];
    }
    if (v10 < 0 || Count == 0) {
      CFIndex v13 = 0;
    }
    else {
      CFIndex v13 = v11;
    }
    uint64_t v14 = (const void *)CGPDFReferenceCreate(v7, v8);
    CFArrayInsertValueAtIndex(a3, v13, v14);
    CFRelease(v14);
  }
}

void CGPDFPageRemoveAnnotation(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    if (*(void *)(a1 + 344)) {
      PageRemoveAnnotation(a1, a2);
    }
    os_unfair_lock_unlock(v4);
  }
}

CFIndex PageRemoveAnnotation(uint64_t a1, uint64_t a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 344);
  v30.length = CFArrayGetCount(v4);
  v30.location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v4, v30, (const void *)a2);
  if (FirstIndexOfValue != -1)
  {
    if (!*(unsigned char *)(a2 + 32))
    {
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 0x40000000;
      v28[2] = __PageRemoveAnnotation_block_invoke;
      v28[3] = &__block_descriptor_tmp_85;
      v28[4] = a2;
      AppendModeUpdateAnnotations((void *)a1, (uint64_t)v28);
      goto LABEL_32;
    }
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 212));
      if (!*(unsigned char *)(a2 + 32))
      {
LABEL_31:
        os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 212));
        goto LABEL_32;
      }
      uint64_t v7 = *(void *)(v6 + 216);
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(CGPDFDictionary **)(*(void *)(a1 + 40) + 16);
    CGPDFObjectRef value = 0;
    CGPDFDictionaryGetObject(v8, "Contents", &value);
    uint64_t v9 = *((void *)value + 2);
    uint64_t v10 = *((void *)value + 3);
    if (!(v9 | (unsigned __int16)v10)
      || (CGPDFAppenderHasMutableObject(v7, *((void *)value + 2), *((void *)value + 3)) & 1) == 0)
    {
      if (v8)
      {
        uint64_t v11 = *((void *)v8 + 4);
        uint64_t v8 = (CGPDFDictionary *)*((void *)v8 + 5);
      }
      else
      {
        uint64_t v11 = 0;
      }
      if (!CGPDFAppenderHasMutableObject(v7, v11, (uint64_t)v8)) {
        goto LABEL_30;
      }
      uint64_t MutableObject = CGPDFAppenderGetMutableObject((char *)v7, v11, (uint64_t)v8);
      CFIndex v13 = (const void *)CGPDFNameCreate("Contents");
      uint64_t v14 = CFDictionaryGetValue((CFDictionaryRef)MutableObject, v13);
      CFRelease(v13);
      if (!v14) {
        goto LABEL_30;
      }
      CFTypeID v15 = CFGetTypeID(v14);
      if (CGPDFReferenceTypeID_onceToken != -1) {
        dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
      }
      if (v15 != CGPDFReferenceTypeID_id) {
        goto LABEL_30;
      }
      uint64_t v9 = v14[2];
      uint64_t v10 = v14[3];
    }
    double v16 = CGPDFAppenderGetMutableObject((char *)v7, v9, v10);
    if (v16)
    {
      CFArrayRef v17 = (const __CFArray *)v16;
      CFTypeID v18 = CFGetTypeID(v16);
      if (v18 == CFArrayGetTypeID())
      {
        uint64_t v20 = *(void *)(a2 + 40);
        uint64_t v19 = *(void *)(a2 + 48);
        CFIndex Count = CFArrayGetCount(v17);
        if (Count >= 1)
        {
          CFIndex v22 = Count;
          CFIndex v23 = 0;
          while (1)
          {
            ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v17, v23);
            uint64_t v25 = ValueAtIndex ? ValueAtIndex[2] : 0;
            if (v25 == v20) {
              break;
            }
            if (v22 == ++v23) {
              goto LABEL_30;
            }
          }
          CFArrayRemoveValueAtIndex(v17, v23);
          double v26 = (const void *)CGPDFReferenceCreate(v20, v19);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v7 + 16), v26);
          CFRelease(v26);
        }
      }
    }
LABEL_30:
    if (v6) {
      goto LABEL_31;
    }
LABEL_32:
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 344), FirstIndexOfValue);
  }
  return FirstIndexOfValue;
}

void __PageRemoveAnnotation_block_invoke(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t v10 = 0;
  idCGFloat x = 0;
  AppendModeFindAnnotation((char *)a2, theArray, *(void *)(a1 + 32), &idx, &v10);
  if (v10)
  {
    uint64_t v5 = *(void *)(v10 + 16);
    uint64_t v6 = *(void *)(v10 + 24);
    CFArrayRemoveValueAtIndex(theArray, idx);
    uint64_t v7 = (const void *)CGPDFReferenceCreate(v5, v6);
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), v7);
    if (Value)
    {
      Value[8] = 1;
    }
    else
    {
      uint64_t v9 = (const void *)AppendModeObjectCreate(1, v5, v6, 0);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), v7, v9);
      CFRelease(v9);
    }
    CFRelease(v7);
  }
}

void CGPDFPageSubstituteAnnotation(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v6 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    if (*(void *)(a1 + 344))
    {
      CFIndex v7 = PageRemoveAnnotation(a1, a2);
      if (v7 != -1) {
        PageAddAnnotation((void *)a1, a3, v7);
      }
    }
    os_unfair_lock_unlock(v6);
  }
}

void CGPDFPageSubstituteAnnotationDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v6 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    if (*(void *)(a1 + 344))
    {
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 0x40000000;
      v7[2] = __CGPDFPageSubstituteAnnotationDictionary_block_invoke;
      v7[3] = &__block_descriptor_tmp_51;
      v7[4] = a2;
      v7[5] = a3;
      AppendModeUpdateAnnotations((void *)a1, (uint64_t)v7);
      os_unfair_lock_unlock(v6);
    }
    else
    {
      os_unfair_lock_unlock(v6);
    }
  }
}

void __CGPDFPageSubstituteAnnotationDictionary_block_invoke(uint64_t a1, char *a2, CFArrayRef theArray)
{
  uint64_t v10 = 0;
  AppendModeFindAnnotation(a2, theArray, *(void *)(a1 + 32), &v11, &v10);
  if (v10)
  {
    uint64_t v5 = *(void *)(v10 + 16);
    uint64_t v6 = *(void *)(v10 + 24);
    CGPDFAppenderReplaceMutableObject((uint64_t)a2, v5, v6, *(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t MutableObject = CGPDFAppenderGetMutableObject(a2, v5, v6);
    uint64_t v9 = *(char **)(v7 + 24);
    if (v9 != MutableObject)
    {
      if (v9) {
        CFRelease(v9);
      }
      *(void *)(v7 + 24) = MutableObject;
      if (MutableObject)
      {
        CFRetain(MutableObject);
      }
    }
  }
}

void CGPDFPageSortAnnotations(void *a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = __CGPDFPageSortAnnotations_block_invoke;
  v2[3] = &__block_descriptor_tmp_53;
  v2[4] = a2;
  v2[5] = a1;
  AppendModeUpdateAnnotations(a1, (uint64_t)v2);
}

void __CGPDFPageSortAnnotations_block_invoke(uint64_t a1, char *a2, const __CFArray *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFArrayGetCount(a3);
  MutableCopCGFloat y = CFArrayCreateMutableCopy(v6, Count, a3);
  CFIndex v10 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  if (v10 >= 1)
  {
    CFIndex v11 = v10;
    for (CFIndex i = 0; i != v11; ++i)
    {
      ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
      CGPDFObjectRef value = 0;
      idCGFloat x = 0;
      AppendModeFindAnnotation(a2, MutableCopy, (uint64_t)ValueAtIndex, &idx, &value);
      if (value)
      {
        CFArrayAppendValue(Mutable, value);
        CFArrayRemoveValueAtIndex(MutableCopy, idx);
      }
    }
  }
  CFIndex v14 = CFArrayGetCount(Mutable);
  if (v14 != CFArrayGetCount(*(CFArrayRef *)(a1 + 32)))
  {
    pdf_error("Error: Failed sort annotations array for append-mode");
    if (!MutableCopy) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CGPDFAppenderReplaceMutableObject((uint64_t)a2, *(void *)(*(void *)(a1 + 40) + 352), *(void *)(*(void *)(a1 + 40) + 360), Mutable);
  if (MutableCopy) {
LABEL_10:
  }
    CFRelease(MutableCopy);
LABEL_11:
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void CGPDFPageEnumerateAnnotations(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CFArrayRef v4 = (void *)MEMORY[0x18532AD60]();
    send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFPageEnumerateAnnotations");
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    Annotations = *(__CFArray **)(a1 + 344);
    if (!Annotations)
    {
      Annotations = LoadAnnotations(a1);
      *(void *)(a1 + 344) = Annotations;
    }
    CFIndex Count = CFArrayGetCount(Annotations);
    if (Count)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 344), i);
        (*(void (**)(uint64_t, uint64_t, const void *))(a2 + 16))(a2, a1, ValueAtIndex);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 336));
  }
}

void CGPDFPageCopyPageLayout(uint64_t a1)
{
}

void CGPDFPageCopyPageLayoutWithCTLD(uint64_t a1, int a2)
{
  if (!a1) {
    return;
  }
  CFArrayRef v4 = (os_unfair_lock_s *)(a1 + 304);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 304));
  uint64_t v5 = *(const void **)(a1 + 312);
  if (v5 && CFRetain(v5)) {
    goto LABEL_205;
  }
  v217 = v4;
  int v215 = a2;
  if (CGPDFPageLayoutGetTypeID(void)::onceToken != -1) {
    dispatch_once(&CGPDFPageLayoutGetTypeID(void)::onceToken, &__block_literal_global_12270);
  }
  uint64_t cftype = pdf_create_cftype();
  if (!cftype)
  {
    *(void *)(a1 + 312) = 0;
    goto LABEL_204;
  }
  uint64_t v7 = cftype;
  *(void *)(cftype + 16) = a1;
  uint64_t v8 = (PageLayout *)(cftype + 16);
  *(unsigned char *)(cftype + 24) = 0;
  *(_OWORD *)(cftype + 192) = 0u;
  *(_OWORD *)(cftype + 32) = 0u;
  *(_OWORD *)(cftype + 48) = 0u;
  *(_OWORD *)(cftype + 64) = 0u;
  *(_OWORD *)(cftype + 80) = 0u;
  *(_OWORD *)(cftype + 96) = 0u;
  *(_OWORD *)(cftype + 112) = 0u;
  *(_OWORD *)(cftype + 128) = 0u;
  *(_OWORD *)(cftype + 144) = 0u;
  *(_OWORD *)(cftype + 160) = 0u;
  *(_OWORD *)(cftype + 176) = 0u;
  *(_OWORD *)(cftype + 208) = 0u;
  *(_OWORD *)(cftype + 224) = 0u;
  *(_OWORD *)(cftype + 240) = 0u;
  *(_OWORD *)(cftype + 256) = 0u;
  *(_OWORD *)(cftype + 272) = 0u;
  *(_OWORD *)(cftype + 288) = 0u;
  *(_OWORD *)(cftype + 304) = 0u;
  *(_OWORD *)(cftype + 320) = 0u;
  *(_OWORD *)(cftype + 336) = 0u;
  *(_OWORD *)(cftype + 352) = 0u;
  *(_OWORD *)(cftype + 368) = 0u;
  *(_DWORD *)(cftype + 384) = 1065353216;
  *(_DWORD *)(cftype + 392) = 0;
  *(_OWORD *)(cftype + 400) = 0u;
  *(_OWORD *)(cftype + 416) = 0u;
  *(_OWORD *)(cftype + 432) = 0u;
  *(_OWORD *)(cftype + 448) = 0u;
  *(_OWORD *)(cftype + 464) = 0u;
  *(_OWORD *)(cftype + 480) = 0u;
  uint64_t v230 = a1;
  v231 = (void *)(cftype + 16);
  *(_OWORD *)v232 = 0u;
  *(_OWORD *)v233 = 0u;
  long long v234 = 0u;
  memset(v235, 0, sizeof(v235));
  int v236 = 1065353216;
  memset(v237, 0, sizeof(v237));
  int v238 = 1065353216;
  long long v239 = 0u;
  obj[0] = 0;
  obj[1] = objc_alloc_init(MEMORY[0x1E4F28E78]);

  __int16 v242 = 32;
  uint64_t v9 = (CGPDFContentStream *)CGPDFContentStreamCreate(*(void *)(a1 + 40));
  CFIndex v10 = CGPDFOperatorTableCreate();
  if (v10)
  {
    for (uint64_t i = 0; i != 100; i += 2)
      CGPDFOperatorTableSetCallback(v10, (&off_1ED09A190)[i], (CGPDFOperatorCallback)(&off_1ED09A190)[i + 1]);
  }
  CGRect BoxRect = CGPDFPageGetBoxRect((CGPDFPageRef)a1, kCGPDFCropBox);
  CGFloat x = BoxRect.origin.x;
  CGFloat y = BoxRect.origin.y;
  CGFloat width = BoxRect.size.width;
  CGFloat height = BoxRect.size.height;
  info = (int8x8_t *)&v230;
  v244 = v10;
  double v16 = CGPDFRStateCreate();
  v245 = v16;
  uint64_t v216 = a1;
  if (v16) {
    CFArrayRef v17 = (void ***)*v16;
  }
  else {
    CFArrayRef v17 = 0;
  }
  v246 = v17;
  char v247 = 0;
  CGFloat v248 = x;
  CGFloat v249 = y;
  CGFloat v250 = width;
  CGFloat v251 = height;
  v253 = 0;
  uint64_t v254 = 0;
  __p = 0;
  char v255 = 0;
  long long v256 = 0u;
  memset(v257, 0, sizeof(v257));
  int v258 = 1065353216;
  long long v259 = 0u;
  long long v260 = 0u;
  unint64_t v261 = 0;
  uint64_t v214 = v7;
  CGMutablePathRef Mutable = CGPathCreateMutable();
  CGMutablePathRef v19 = Mutable;
  uint64_t v20 = (void *)*((void *)&v260 + 1);
  if (*((void *)&v260 + 1) >= v261)
  {
    CFIndex v22 = (void *)v260;
    uint64_t v23 = (uint64_t)(*((void *)&v260 + 1) - v260) >> 3;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v25 = v261 - v260;
    if ((uint64_t)(v261 - v260) >> 2 > v24) {
      unint64_t v24 = v25 >> 2;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    v265 = &v261;
    if (v26)
    {
      unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v26);
      uint64_t v20 = (void *)*((void *)&v260 + 1);
      CFIndex v22 = (void *)v260;
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v28 = (CGMutablePathRef *)(v26 + 8 * v23);
    unint64_t v29 = v26 + 8 * v27;
    unint64_t v264 = v29;
    *uint64_t v28 = v19;
    *((void *)&v263 + 1) = v28 + 1;
    if (v20 == v22)
    {
      double v21 = v28 + 1;
      uint64_t v7 = v214;
    }
    else
    {
      uint64_t v7 = v214;
      do
      {
        CFRange v30 = (CGPath *)*--v20;
        *--uint64_t v28 = v30;
        *uint64_t v20 = 0;
      }
      while (v20 != v22);
      double v21 = (void *)*((void *)&v263 + 1);
      unint64_t v29 = v264;
    }
    long long v31 = v260;
    *(void *)&long long v260 = v28;
    *((void *)&v260 + 1) = v21;
    long long v263 = v31;
    unint64_t v32 = v261;
    unint64_t v261 = v29;
    unint64_t v264 = v32;
    v262 = (void **)v31;
    std::__split_buffer<applesauce::CF::ObjectRef<CGPath *>>::~__split_buffer((uint64_t)&v262);
  }
  else
  {
    **((void **)&v260 + 1) = Mutable;
    double v21 = v20 + 1;
  }
  *((void *)&v260 + 1) = v21;
  uint64_t v33 = CGPDFScannerCreate(v9, v10, &info);
  CGPDFScannerScan(v33);
  if (v33) {
    CFRelease(v33);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  CGPDFRStateRelease(v245);
  v262 = (void **)&v260;
  std::vector<applesauce::CF::ObjectRef<CGPath *>>::__destroy_vector::operator()[abi:fe180100](&v262);
  if (*((void *)&v259 + 1)) {
    CFRelease(*((CFTypeRef *)&v259 + 1));
  }
  uint64_t v34 = v216;
  if ((void)v259) {
    CFRelease((CFTypeRef)v259);
  }
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)v257);

  if (__p)
  {
    v253 = __p;
    operator delete(__p);
  }
  v218 = (uint64_t *)*((void *)&v239 + 1);
  uint64_t v35 = (double *)v239;
  if ((void)v239 == *((void *)&v239 + 1)) {
    goto LABEL_189;
  }
  uint64_t v36 = 0;
  BOOL v241 = 0;
  do
  {
    uint64_t v37 = *((void *)v35 + 12);
    uint64_t v38 = *((void *)v35 + 13);
    if (v37 != v38)
    {
      uint64_t v39 = v37 + 2;
      do
      {
        uint64_t v40 = *(unsigned __int16 *)(v39 - 2);
        uint64_t v41 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
        int v42 = [v41 characterIsMember:v40];

        if (v39 == v38) {
          char v43 = 0;
        }
        else {
          char v43 = v42;
        }
        v39 += 2;
      }
      while ((v43 & 1) != 0);
      if (!v42) {
        goto LABEL_55;
      }
    }
    if (!*((unsigned char *)v35 + 216))
    {
      CGAffineTransform v44 = v36;
    }
    else
    {
LABEL_55:
      CGAffineTransform v44 = v35;
      if (v36)
      {
        double v45 = v36[18];
        double v46 = v35[18];
        if ((v45 != 0.0 || v46 != 0.0) && vabdd_f64(v45, v46) > 0.174532925) {
          goto LABEL_95;
        }
        CGRect v47 = (void *)*((void *)v36 + 17);
        CGRect v48 = (void *)*((void *)v35 + 17);
        double v49 = v36[21];
        font_info = get_font_info(v47);
        int v51 = font_info ? font_info[2] : 0;
        double v52 = v35[21];
        v53 = get_font_info(v47);
        int v54 = v53 ? v53[2] : 0;
        double v55 = v49 / (double)v51;
        if (v47 == v48 && vabdd_f64(v55, v52 / (double)v54) <= 2.22044605e-16) {
          goto LABEL_76;
        }
        double v56 = v36[24];
        double v57 = v36[26];
        double v58 = v35[24];
        double v59 = v35[26];
        v60 = get_font_info(v47);
        int v61 = v60 ? v60[3] : 0;
        v62 = get_font_info(v47);
        int v63 = v62 ? v62[4] : 0;
        if (v56 > v58 || v59 > v57 * 0.4 || (v64 = v56 + v55 * (double)(v61 - v63), CGAffineTransform v44 = v35, v58 > v64))
        {
LABEL_76:
          double v65 = v35[25];
          if (v65 == 0.0 || (double v66 = v36[25], v66 == 0.0))
          {
            if (vabdd_f64(v35[15], v36[15]) > v36[16]) {
              goto LABEL_95;
            }
          }
          else
          {
            double v67 = v35[26];
            CGFloat v68 = v35[23];
            double rect = v35[24];
            double v69 = v36[26];
            CGFloat v70 = v36[23];
            double v71 = v36[24];
            BOOL v72 = v69 < 0.0 || v66 < 0.0;
            double v73 = v36[23];
            if (v72) {
              *(void *)&double v73 = (unint64_t)CGRectStandardize(*(CGRect *)(v36 + 23));
            }
            BOOL v74 = v67 < 0.0 || v65 < 0.0;
            double v75 = v68;
            double v76 = v65;
            if (v74)
            {
              v268.origin.CGFloat x = v68;
              v268.origin.CGFloat y = rect;
              v268.size.CGFloat width = v65;
              v268.size.CGFloat height = v67;
              *(CGRect *)&double v75 = CGRectStandardize(v268);
            }
            if (v73 > v75 + v76) {
              goto LABEL_95;
            }
            double v77 = v71;
            if (v72)
            {
              v269.origin.CGFloat x = v70;
              v269.origin.CGFloat y = v71;
              v269.size.CGFloat width = v66;
              v269.size.CGFloat height = v69;
              CGRect v270 = CGRectStandardize(v269);
              double v77 = v270.origin.y;
            }
            if (v74)
            {
              v271.origin.CGFloat x = v68;
              v271.origin.CGFloat y = rect;
              v271.size.CGFloat width = v65;
              v271.size.CGFloat height = v67;
              CGRect v272 = CGRectStandardize(v271);
              if (v77 > v272.origin.y + v272.size.height) {
                goto LABEL_95;
              }
              v273.origin.CGFloat x = v68;
              v273.origin.CGFloat y = rect;
              v273.size.CGFloat width = v65;
              v273.size.CGFloat height = v67;
              CGRect v274 = CGRectStandardize(v273);
              double rect = v274.origin.y;
            }
            else if (v77 > rect + v67)
            {
              goto LABEL_95;
            }
            if (v72)
            {
              v279.origin.CGFloat x = v70;
              v279.origin.CGFloat y = v71;
              v279.size.CGFloat width = v66;
              v279.size.CGFloat height = v69;
              CGRect v280 = CGRectStandardize(v279);
              double v71 = v280.origin.y;
              double v69 = v280.size.height;
            }
            if (rect > v71 + v69)
            {
LABEL_95:
              PageLayoutFactory::appendCurLine((PageLayoutFactory *)&v230, &v241);
              CGAffineTransform v44 = v35;
              goto LABEL_96;
            }
          }
          PageLayoutFactory::getSpaceWidth((int8x8_t *)&v230, (const TextChunk *)v36);
          uint64_t v144 = *((void *)v36 + 4);
          if (*((void *)v36 + 3) == v144) {
            goto LABEL_208;
          }
          v145 = (double *)*((void *)v35 + 3);
          if (v145 == *((double **)v35 + 4)) {
            goto LABEL_208;
          }
          double v146 = v143;
          double v148 = *(double *)(v144 - 16);
          double v147 = *(double *)(v144 - 8);
          double v149 = *(double *)(v144 - 32);
          double v150 = *v145;
          CGFloat v151 = v145[1];
          double v152 = v145[2];
          double v153 = v145[3];
          if (v148 < 0.0 || v147 < 0.0)
          {
            uint64_t v154 = *(void *)(v144 - 24);
            uint64_t v155 = *(void *)(v144 - 32);
            uint64_t v156 = *(void *)(v144 - 16);
            CGRect v281 = CGRectStandardize(*(CGRect *)(&v147 - 3));
            double v149 = v281.origin.x;
            double v148 = v281.size.width;
          }
          if (v152 < 0.0 || v153 < 0.0)
          {
            v282.origin.CGFloat x = v150;
            v282.origin.CGFloat y = v151;
            v282.size.CGFloat width = v152;
            v282.size.CGFloat height = v153;
            *(void *)&double v150 = (unint64_t)CGRectStandardize(v282);
          }
          CGAffineTransform v44 = v35;
          if (vabdd_f64(v150, v149 + v148) > v146)
          {
            CGAffineTransform v44 = v35;
            if (!*((unsigned char *)v35 + 216))
            {
              uint64_t v157 = *((void *)v36 + 7);
              if (*((void *)v36 + 6) == v157) {
                goto LABEL_208;
              }
              double v158 = v35[23];
              double v159 = v35[25];
              double v160 = v35[26];
              if (v159 < 0.0 || v160 < 0.0)
              {
                uint64_t v161 = *((void *)v35 + 24);
                uint64_t v162 = *((void *)v35 + 23);
                *(void *)&double v158 = (unint64_t)CGRectStandardize(*(CGRect *)(&v159 - 2));
              }
              double v163 = v36[23];
              double v165 = v36[25];
              double v164 = v36[26];
              if (v165 < 0.0 || v164 < 0.0)
              {
                uint64_t v166 = *((void *)v36 + 24);
                uint64_t v167 = *((void *)v36 + 23);
                uint64_t v168 = *((void *)v36 + 25);
                CGRect v283 = CGRectStandardize(*(CGRect *)(&v164 - 3));
                double v163 = v283.origin.x;
                double v165 = v283.size.width;
              }
              double v169 = *(double *)(v157 - 16);
              double v170 = *(double *)(v157 - 8);
              double v171 = *(double *)(v157 - 32);
              CGFloat v172 = *(double *)(v157 - 24);
              if (v169 < 0.0 || v170 < 0.0)
              {
                uint64_t v173 = *(void *)(v157 - 24);
                uint64_t v174 = *(void *)(v157 - 8);
                *(CGRect *)&double v171 = CGRectStandardize(*(CGRect *)&v171);
              }
              PageLayoutFactory::addUniChars((uint64_t)&v230, *((void *)v36 + 28), &v242, 1, -1, v163 + v165, NAN, v158 - (v163 + v165), NAN, v171 + v169, v172, NAN, v170, v140, v141, v142, *((void *)v36 + 18), *((void *)v36 + 19));
              CGAffineTransform v44 = v35;
            }
          }
        }
      }
    }
LABEL_96:
    std::vector<unsigned short>::reserve(v232, (uint64_t)(*((void *)v35 + 13) - *((void *)v35 + 12)) >> 1);
    v262 = 0;
    v266[0] = 32;
    info = (int8x8_t *)&v230;
    v244 = (CGPDFOperatorTable *)v35;
    v245 = v35 + 12;
    v246 = &v262;
    PageLayoutFactory::getSpaceWidth((int8x8_t *)&v230, (const TextChunk *)v35);
    double v220 = v84;
    v85 = (double *)*((void *)v35 + 3);
    if (*((double **)v35 + 4) == v85) {
      goto LABEL_208;
    }
    v86 = (CGFloat *)*((void *)v35 + 6);
    if (*((CGFloat **)v35 + 7) == v86) {
      goto LABEL_208;
    }
    double v88 = v85[2];
    double v87 = v85[3];
    double v89 = *v85;
    double v90 = v85[1];
    CGFloat v91 = v86[1];
    double v224 = v86[2];
    CGFloat v222 = *v86;
    double v223 = v86[3];
    PageLayoutFactory::addChunkUnicodes(PageLayoutFactory::TextChunk const&)::$_0::operator()((uint64_t)&info, 0, v78, v79, v80, v81, v82, v83);
    double v98 = *v35;
    uint64_t v99 = *((void *)v35 + 1);
    uint64_t v100 = v99 - *(void *)v35;
    if ((unint64_t)v100 >= 3)
    {
      double v101 = v87;
      CGFloat v102 = v90;
      unint64_t v103 = v100 >> 1;
      uint64_t v104 = 56;
      uint64_t v105 = 2;
      unint64_t v106 = 1;
      do
      {
        uint64_t v107 = *((void *)v35 + 3);
        if (v106 >= (*((void *)v35 + 4) - v107) >> 5) {
          goto LABEL_208;
        }
        uint64_t v108 = *((void *)v35 + 6);
        if (v106 >= (*((void *)v35 + 7) - v108) >> 5 || v103 <= v106 - 1) {
          goto LABEL_208;
        }
        CGFloat v110 = *(double *)(v107 + v104 - 24);
        CGFloat v109 = *(double *)(v107 + v104 - 16);
        double v111 = *(double *)(v107 + v104 - 8);
        double v112 = *(double *)(v107 + v104);
        double v227 = *(double *)(v108 + v104 - 16);
        double recta = *(double *)(v108 + v104 - 24);
        double v225 = *(double *)(v108 + v104);
        double v226 = *(double *)(v108 + v104 - 8);
        if (*(unsigned __int16 *)(*(void *)&v98 + v105 - 2) != *(unsigned __int16 *)(*(void *)&v98 + v105)) {
          goto LABEL_114;
        }
        double v221 = v91;
        if (v111 < 0.0 || (double v113 = *(double *)(v107 + v104 - 24), v112 < 0.0))
        {
          v275.origin.CGFloat x = *(CGFloat *)(v107 + v104 - 24);
          v275.origin.CGFloat y = *(CGFloat *)(v107 + v104 - 16);
          double v114 = v102;
          v275.size.CGFloat width = *(CGFloat *)(v107 + v104 - 8);
          CGFloat v115 = v275.origin.y;
          double v116 = v101;
          v275.size.CGFloat height = *(CGFloat *)(v107 + v104);
          unint64_t v117 = (unint64_t)CGRectStandardize(v275);
          CGFloat v102 = v114;
          double v101 = v116;
          CGFloat v109 = v115;
          double v113 = *(double *)&v117;
        }
        if (v88 < 0.0 || (double v118 = v89, v101 < 0.0))
        {
          double v119 = v89;
          CGFloat v120 = v102;
          double v121 = v89;
          double v122 = v102;
          double v123 = v88;
          double v219 = v111;
          double v124 = v112;
          double v125 = v88;
          double v126 = v110;
          double v127 = v109;
          double v128 = v101;
          *(void *)&double v118 = (unint64_t)CGRectStandardize(*(CGRect *)(&v101 - 3));
          CGFloat v102 = v122;
          double v89 = v121;
          double v101 = v128;
          CGFloat v109 = v127;
          CGFloat v110 = v126;
          double v88 = v125;
          double v112 = v124;
          double v111 = v219;
        }
        double v129 = v113 - v118;
        CGFloat v91 = v221;
        if (v129 < v220 * 0.5)
        {
          uint64_t v130 = *((void *)v35 + 9);
          if (v106 >= (*((void *)v35 + 10) - v130) >> 3) {
            goto LABEL_208;
          }
          v262 = (void **)((char *)v262 + *(void *)(v130 + 8 * v106));
        }
        else
        {
LABEL_114:
          if (v88 < 0.0 || v101 < 0.0)
          {
            double v131 = v89;
            CGFloat v132 = v102;
            double v133 = v88;
            CGRect v276 = CGRectStandardize(*(CGRect *)(&v101 - 3));
            double v89 = v276.origin.x;
            double v88 = v276.size.width;
          }
          if (v111 < 0.0 || v112 < 0.0)
          {
            v277.origin.CGFloat x = v110;
            v277.origin.CGFloat y = v109;
            v277.size.CGFloat width = v111;
            v277.size.CGFloat height = v112;
            *(void *)&double v134 = (unint64_t)CGRectStandardize(v277);
          }
          else
          {
            double v134 = v110;
          }
          double v135 = v89 + v88;
          double v136 = v134 - (v89 + v88);
          if (v136 > v220 && *((unsigned char *)v35 + 216) == 0)
          {
            if (v224 < 0.0 || v223 < 0.0)
            {
              v278.origin.CGFloat x = v222;
              v278.origin.CGFloat y = v91;
              v278.size.CGFloat width = v224;
              v278.size.CGFloat height = v223;
              *(CGRect *)&double v138 = CGRectStandardize(v278);
            }
            else
            {
              double v138 = v222;
              double v139 = v224;
            }
            PageLayoutFactory::addUniChars((uint64_t)&v230, *((void *)v35 + 28), v266, 1, -1, v135, NAN, v136, NAN, v138 + v139, v91, NAN, v223, v95, v96, v97, *((void *)v35 + 18), *((void *)v35 + 19));
          }
          PageLayoutFactory::addChunkUnicodes(PageLayoutFactory::TextChunk const&)::$_0::operator()((uint64_t)&info, v106, v92, v93, v94, v95, v96, v97);
          CGFloat v91 = v227;
          double v224 = v226;
          CGFloat v222 = recta;
          double v223 = v225;
          double v98 = *v35;
          uint64_t v99 = *((void *)v35 + 1);
          double v89 = v110;
          CGFloat v102 = v109;
          double v88 = v111;
          double v101 = v112;
        }
        ++v106;
        unint64_t v103 = (v99 - *(void *)&v98) >> 1;
        v105 += 2;
        v104 += 32;
      }
      while (v106 < v103);
    }
    v35 += 29;
    uint64_t v36 = v44;
  }
  while (v35 != (double *)v218);
  uint64_t v7 = v214;
  PageLayoutFactory::appendCurLine((PageLayoutFactory *)&v230, &v241);
  uint64_t v34 = v216;
  uint64_t v175 = [obj[1] length];
  if ([obj[1] length] && objc_msgSend(obj[1], "characterAtIndex:", v175 - 1) == 10)
  {
    v176 = [obj[1] substringToIndex:v175 - 1];
    v177 = (void *)[v176 mutableCopy];
    id v178 = obj[1];
    obj[1] = v177;

    v179 = v231;
    uint64_t v180 = v231[26];
    if (v231[25] == v180) {
      goto LABEL_208;
    }
    v231[26] = v180 - 8;
    uint64_t v181 = v179[29];
    if (v179[28] == v181) {
      goto LABEL_208;
    }
    v179[29] = v181 - 8;
    v182 = (uint64_t *)v179[19];
    v183 = (uint64_t *)v179[20];
    while (v182 != v183)
    {
      uint64_t v184 = *v182;
      if (v175 - 1 < (unint64_t)*v182) {
        uint64_t v184 = v175 - 1;
      }
      *v182++ = v184;
    }
    if (*((unsigned char *)v179 + 8))
    {
      uint64_t v185 = v179[38];
      if (v179[37] != v185)
      {
        v179[38] = v185 - 8;
        goto LABEL_171;
      }
LABEL_208:
      __break(1u);
      return;
    }
  }
LABEL_171:
  v186 = (id *)v231;
  if (v231[19] != v231[20])
  {
    uint64_t v187 = [obj[1] length];
    uint64_t v188 = v187;
    v190 = (uint64_t *)v186[20];
    unint64_t v189 = (unint64_t)v186[21];
    if ((unint64_t)v190 >= v189)
    {
      v192 = (uint64_t *)v186[19];
      uint64_t v193 = v190 - v192;
      unint64_t v194 = v193 + 1;
      if ((unint64_t)(v193 + 1) >> 61) {
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v195 = v189 - (void)v192;
      if (v195 >> 2 > v194) {
        unint64_t v194 = v195 >> 2;
      }
      BOOL v196 = (unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v196) {
        unint64_t v197 = v194;
      }
      if (v197)
      {
        unint64_t v197 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v197);
        v192 = (uint64_t *)v186[19];
        v190 = (uint64_t *)v186[20];
      }
      else
      {
        uint64_t v198 = 0;
      }
      v199 = (uint64_t *)(v197 + 8 * v193);
      unint64_t v200 = v197 + 8 * v198;
      uint64_t *v199 = v188;
      v191 = v199 + 1;
      while (v190 != v192)
      {
        uint64_t v201 = *--v190;
        *--v199 = v201;
      }
      v186[19] = v199;
      v186[20] = v191;
      v186[21] = (id)v200;
      if (v192) {
        operator delete(v192);
      }
    }
    else
    {
      uint64_t *v190 = v187;
      v191 = v190 + 1;
    }
    v186[20] = v191;
    v186 = (id *)v231;
  }
  objc_storeStrong(v186 + 3, obj[1]);
LABEL_189:
  if (*(unsigned char *)(v7 + 24))
  {
    uint64_t v203 = *(void *)(v7 + 312);
    uint64_t v202 = *(void *)(v7 + 320);
    if (v202 == v203 || [*(id *)(v7 + 40) length] != (v202 - v203) >> 3) {
      *(unsigned char *)(v7 + 24) = 0;
    }
  }
  if (TextRecognitionLibraryCore(0))
  {
    if ((CGPDFDocumentIsLayoutWithCTLDEnabled() & v215) == 1)
    {
      v204.n128_f64[0] = CFAbsoluteTimeGetCurrent();
      double v205 = v204.n128_f64[0];
      PageLayout::splitLines(v8, 0, 0, v204, v206, v207, v208, v209);
      id v210 = PageLayout::getOrderedLayout(v8);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      pdf_log("CTLD took %g seconds", Current - v205);
      if (*(unsigned char *)(v7 + 24))
      {
        uint64_t v213 = *(void *)(v7 + 312);
        uint64_t v212 = *(void *)(v7 + 320);
        if (v212 == v213 || [*(id *)(v7 + 40) length] != (v212 - v213) >> 3) {
          *(unsigned char *)(v7 + 24) = 0;
        }
      }
    }
  }

  info = (int8x8_t *)&v239;
  std::vector<PageLayoutFactory::TextChunk>::__destroy_vector::operator()[abi:fe180100]((void ***)&info);
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)v237);
  std::__hash_table<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::__unordered_map_hasher<applesauce::CF::ObjectRef<CGFont *>,std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::hash<applesauce::CF::ObjectRef<CGFont *>>,std::equal_to<applesauce::CF::ObjectRef<CGFont *>>,true>,std::__unordered_map_equal<applesauce::CF::ObjectRef<CGFont *>,std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::equal_to<applesauce::CF::ObjectRef<CGFont *>>,std::hash<applesauce::CF::ObjectRef<CGFont *>>,true>,std::allocator<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>>>::~__hash_table((uint64_t)v235);
  if (v233[1])
  {
    *(void **)&long long v234 = v233[1];
    operator delete(v233[1]);
  }
  if (v232[0])
  {
    v232[1] = v232[0];
    operator delete(v232[0]);
  }
  *(void *)(v34 + 312) = v7;
  CFRetain((CFTypeRef)v7);
LABEL_204:
  CFArrayRef v4 = v217;
LABEL_205:
  os_unfair_lock_unlock(v4);
}

void sub_184D2AD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  *(void *)(v55 - 160) = a12;
  std::vector<PageLayoutFactory::TextChunk>::__destroy_vector::operator()[abi:fe180100]((void ***)(v55 - 160));
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::__unordered_map_hasher<applesauce::CF::ObjectRef<CGFont *>,std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::hash<applesauce::CF::ObjectRef<CGFont *>>,std::equal_to<applesauce::CF::ObjectRef<CGFont *>>,true>,std::__unordered_map_equal<applesauce::CF::ObjectRef<CGFont *>,std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::equal_to<applesauce::CF::ObjectRef<CGFont *>>,std::hash<applesauce::CF::ObjectRef<CGFont *>>,true>,std::allocator<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>>>::~__hash_table((uint64_t)&a39);
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  double v57 = *(void **)(v53 + 472);
  if (v57)
  {
    *(void *)(v53 + 480) = v57;
    operator delete(v57);
  }
  double v58 = *(void **)(v53 + 448);
  if (v58)
  {
    *(void *)(v53 + 456) = v58;
    operator delete(v58);
  }
  double v59 = (void **)(v52 + 384);
  v60 = *(void **)(v53 + 424);
  if (v60)
  {
    *(void *)(v53 + 432) = v60;
    operator delete(v60);
  }
  int v61 = *v59;
  if (*v59)
  {
    *(void *)(v53 + 408) = v61;
    operator delete(v61);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,PDFAtomicElement * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,PDFAtomicElement * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,PDFAtomicElement * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,PDFAtomicElement * {__strong}>>>::~__hash_table(v52 + 336);

  v62 = *(void **)(v53 + 312);
  if (v62)
  {
    *(void *)(v53 + 320) = v62;
    operator delete(v62);
  }
  int v63 = *(void **)(v53 + 288);
  if (v63)
  {
    *(void *)(v53 + 296) = v63;
    operator delete(v63);
  }
  a31 = v52 + 248;
  std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a31);
  double v64 = *(void **)(v53 + 240);
  if (v64)
  {
    *(void *)(v53 + 248) = v64;
    operator delete(v64);
  }
  double v65 = *(void **)(v53 + 216);
  if (v65)
  {
    *(void *)(v53 + 224) = v65;
    operator delete(v65);
  }
  a31 = a11;
  std::vector<PageLayout::CharacterStyle>::__destroy_vector::operator()[abi:fe180100]((void ***)&a31);
  double v66 = *(void **)(v53 + 168);
  if (v66)
  {
    *(void *)(v53 + 176) = v66;
    operator delete(v66);
  }
  double v67 = *(void **)(v53 + 144);
  if (v67)
  {
    *(void *)(v53 + 152) = v67;
    operator delete(v67);
  }
  CGFloat v68 = *(void **)(v53 + 120);
  if (v68)
  {
    *(void *)(v53 + 128) = v68;
    operator delete(v68);
  }
  double v69 = *(void **)(v53 + 96);
  if (v69)
  {
    *(void *)(v53 + 104) = v69;
    operator delete(v69);
  }
  CGFloat v70 = *(void **)(v53 + 72);
  if (v70)
  {
    *(void *)(v53 + 80) = v70;
    operator delete(v70);
  }
  double v71 = *(void **)(v53 + 48);
  if (v71)
  {
    *(void *)(v53 + 56) = v71;
    operator delete(v71);
  }

  _Unwind_Resume(a1);
}

uint64_t CGPDFPageInsertTableDescriptions(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (CGPDFDocumentIsTaggedPDF(*(void *)(result + 16))) {
      return 0;
    }
    uint64_t result = CGPDFDocumentIsLayoutWithCTLDEnabled();
    if (result)
    {
      CGPDFPageCopyPageLayoutWithCTLD(v3, 0);
      CGPDFPageLayoutInsertTableDescriptions(v4, a2);
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 320));
      *(void *)(v3 + 328) = 0;
      uint64_t v5 = *(const void **)(v3 + 16);
      if (!v5)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 320));
        return 0;
      }
      CFRetain(*(CFTypeRef *)(v3 + 16));
      CFTypeRef v6 = CGPDFDocumentCopyTaggedContext((uint64_t)v5);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = (uint64_t *)*((void *)v6 + 2);
        uint64_t v9 = *v8;
        if (*(void *)(*v8 + 24))
        {
          CFIndex v10 = (std::mutex *)(v9 + 32);
          std::mutex::lock((std::mutex *)(v9 + 32));
          RemovePageNodesFromStructureElement(*(StructureElement **)(*v8 + 24), (CGPDFPage *)v3);
          std::mutex::unlock(v10);
        }
        CFRelease(v7);
      }
      CFRelease(v5);
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 320));
      CGPDFPageCopyRootTaggedNode(v3);
      return 1;
    }
  }
  return result;
}

CFTypeRef CGPDFPageCopyRootTaggedNode(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 320);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 320));
    uint64_t v3 = *(const void **)(a1 + 328);
    if (v3)
    {
      CFTypeRef v4 = CFRetain(v3);
      if (v4)
      {
LABEL_16:
        os_unfair_lock_unlock(v2);
        return v4;
      }
    }
    uint64_t v5 = *(const void **)(a1 + 16);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(a1 + 16));
      CFTypeRef v6 = CGPDFDocumentCopyTaggedContext((uint64_t)v5);
      if (v6)
      {
        uint64_t v7 = v6;
        TaggedParser::AddPage(*((TaggedParser **)v6 + 2), (CGPDFPage *)a1);
        uint64_t v8 = v7[2];
        uint64_t v9 = (std::mutex *)(*(void *)v8 + 32);
        std::mutex::lock(v9);
        CFIndex v10 = *(void **)v8;
        if (*(unsigned char *)(*(void *)v8 + 97))
        {
          std::mutex::unlock(v9);
          CFTypeRef v4 = 0;
          *(void *)(a1 + 328) = 0;
        }
        else
        {
          if (!*v10
            || (CGPDFTaggedNodeFromStructureElement = (const void *)CreateCGPDFTaggedNodeFromStructureElement(v10[3], (CGPDFPage *)a1)) == 0)
          {
            CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
            TaggedParser::CreateStructureElement();
          }
          std::mutex::unlock(v9);
          *(void *)(a1 + 328) = CGPDFTaggedNodeFromStructureElement;
          CFTypeRef v4 = CFRetain(CGPDFTaggedNodeFromStructureElement);
        }
        CFRelease(v7);
      }
      else
      {
        CFTypeRef v4 = 0;
        *(void *)(a1 + 328) = 0;
      }
      CFRelease(v5);
      goto LABEL_16;
    }
  }
  return 0;
}

void sub_184D2B2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, void *a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

CFTypeRef CGPDFPageCopyLayout(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  uint64_t v3 = *(const void **)(a1 + 296);
  if (!v3 || (CFTypeRef v4 = CFRetain(v3)) == 0)
  {
    uint64_t v5 = CGPDFLayoutCreateWithPage(a1);
    *(void *)(a1 + 296) = v5;
    if (v5) {
      CFTypeRef v4 = CFRetain(v5);
    }
    else {
      CFTypeRef v4 = 0;
    }
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

void CGPDFPageSetLayout(uint64_t a1, const void *a2)
{
  CFTypeRef v4 = (os_unfair_lock_s *)(a1 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  uint64_t v5 = *(const void **)(a1 + 296);
  if (v5 != a2)
  {
    if (v5) {
      CFRelease(v5);
    }
    if (a2) {
      CFTypeRef v6 = CFRetain(a2);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(a1 + 296) = v6;
  }

  os_unfair_lock_unlock(v4);
}

CFTypeRef CGPDFPageGetLayout(CFTypeRef result)
{
  if (result)
  {
    CFTypeRef v1 = CGPDFPageCopyLayout((uint64_t)result);
    return CFAutorelease(v1);
  }
  return result;
}

void CGPDFPageRemoveLayout(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  uint64_t v3 = *(const void **)(a1 + 296);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 296) = 0;

  os_unfair_lock_unlock(v2);
}

void *std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18532A140](v23, a1);
  if (v23[0])
  {
    CFTypeRef v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      CFIndex v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:fe180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      uint64_t v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x18532A150](v23);
  return a1;
}

void sub_184D2B70C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x18532A150](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x184D2B6E0);
}

void sub_184D2B778(_Unwind_Exception *a1)
{
}

uint64_t CGPDFBase14GetBase14Name(char *a1)
{
  LODWORD(result) = get_base14_name(a1);
  if ((int)result >= 15) {
    return 0;
  }
  else {
    return result;
  }
}

unsigned int *get_base14_name(char *a1)
{
  CFTypeRef v1 = a1;
  uint64_t v2 = strchr(a1, 43);
  if (v2)
  {
    uint64_t v3 = v2;
    if (v2 - v1 == 6)
    {
      if (v2 <= v1)
      {
LABEL_10:
        CFTypeRef v1 = v3 + 1;
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v5 = MEMORY[0x1E4F14390];
        while (1)
        {
          unsigned int v6 = v1[v4];
          if (!((v6 & 0x80000000) != 0 ? __maskrune_l(v6, 0x8000uLL, 0) : *(_DWORD *)(v5 + 4 * v6 + 60) & 0x8000)) {
            break;
          }
          if (++v4 == 6) {
            goto LABEL_10;
          }
        }
      }
    }
    if (!*v1) {
      return 0;
    }
  }
  uint64_t result = (unsigned int *)bsearch(v1, &base14_font, 0x35uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))base14_name_compare);
  if (result) {
    return (unsigned int *)result[2];
  }
  return result;
}

uint64_t base14_name_compare(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

char *CGPDFBase14GetInfo(int a1)
{
  if ((a1 - 1) > 0xD) {
    return 0;
  }
  else {
    return off_1E529F9D0[a1 - 1];
  }
}

BOOL CGPDFFontNameHasAlias(char *a1, char **a2)
{
  unsigned int base14_name = get_base14_name(a1);
  if (base14_name - 1 <= 0xD)
  {
    if (a2)
    {
      uint64_t v5 = *(const char **)off_1E529F9D0[base14_name - 1];
LABEL_7:
      unsigned int v6 = strdup(v5);
LABEL_8:
      *a2 = v6;
      return 1;
    }
    return 1;
  }
  if (base14_name - 15 <= 0xB)
  {
    if (a2)
    {
      uint64_t v5 = off_1E529FA40[base14_name - 15];
      goto LABEL_7;
    }
    return 1;
  }
  int v8 = strchr(a1, 44);
  BOOL result = v8 != 0;
  if (a2 && v8)
  {
    unsigned int v6 = strdup(a1);
    if (v6) {
      v6[v8 - a1] = 45;
    }
    goto LABEL_8;
  }
  return result;
}

CFTypeRef CGCFRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void CGCFRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

BOOL CGCFEqual(unint64_t cf1, unint64_t a2)
{
  if (!(cf1 | a2)) {
    return 1;
  }
  BOOL result = 0;
  if (cf1)
  {
    if (a2) {
      return CFEqual((CFTypeRef)cf1, (CFTypeRef)a2) != 0;
    }
  }
  return result;
}

CFMutableArrayRef CGCFArrayCreate()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
}

void CGCFArrayApplyBlock(const __CFArray *a1, void *a2)
{
  v4.length = CFArrayGetCount(a1);
  v4.location = 0;

  CFArrayApplyFunction(a1, v4, (CFArrayApplierFunction)call_array_block, a2);
}

uint64_t call_array_block(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

const void *CGCFArrayGetLastValue(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    return 0;
  }

  return CFArrayGetValueAtIndex(a1, Count - 1);
}

void CGCFArrayAppendInteger(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
    }
  }
}

void CGCFArrayAppendCGFloat(__CFArray *a1, double a2)
{
  double valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
    }
  }
}

void CGCFArrayAppendRect(__CFArray *a1, double a2, double a3, double a4, double a5)
{
  *(double *)int v8 = a2;
  *(double *)&v8[1] = a3;
  *(double *)&void v8[2] = a4;
  *(double *)&v8[3] = a5;
  if (a1)
  {
    CFDataRef v6 = CFDataCreate(0, (const UInt8 *)v8, 32);
    if (v6)
    {
      CFDataRef v7 = v6;
      CFArrayAppendValue(a1, v6);
      CFRelease(v7);
    }
  }
}

BOOL CGCFArrayGetRectAtIndex(const __CFArray *a1, CFIndex a2, UInt8 *a3)
{
  if (!a1) {
    return 0;
  }
  ValueAtIndeCGFloat x = (const __CFData *)CFArrayGetValueAtIndex(a1, a2);
  if (!ValueAtIndex) {
    return 0;
  }
  CFDataRef v5 = ValueAtIndex;
  CFTypeID v6 = CFGetTypeID(ValueAtIndex);
  if (v6 != CFDataGetTypeID()) {
    return 0;
  }

  return get_value_from_data(v5, a3, 32);
}

BOOL get_value_from_data(const __CFData *a1, UInt8 *a2, CFIndex a3)
{
  CFIndex Length = CFDataGetLength(a1);
  BOOL v8 = Length >= 0 && Length == a3;
  if (a2 && v8)
  {
    v10.location = 0;
    v10.length = a3;
    CFDataGetBytes(a1, v10, a2);
  }
  return v8;
}

CFMutableDictionaryRef CGCFDictionaryCreate()
{
  return CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

CFDictionaryRef CGCFDictionaryCreateWithKeyAndValue(void *a1, const void *a2)
{
  CFNumberRef v3 = a2;
  keys = a1;
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, &v3, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

CFMutableDictionaryRef CGCFDictionaryCreateCopy(CFDictionaryRef theDict)
{
  return CFDictionaryCreateMutableCopy(0, 0, theDict);
}

CFArrayRef CGCFDictionaryCopyKeys(const __CFDictionary *a1, const CFArrayCallBacks *a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(a1);
  MEMORY[0x1F4188790](Count, v5);
  BOOL v8 = (const void **)((char *)v12 - v7);
  if (v6 <= 0x1FFFFFFFFFFFFFFELL)
  {
    if (v6 > 0x100)
    {
      int v9 = (const void **)malloc_type_calloc(8 * Count, 1uLL, 0x6BD02CD3uLL);
    }
    else
    {
      bzero((char *)v12 - v7, 8 * Count);
      int v9 = v8;
    }
  }
  else
  {
    int v9 = 0;
  }
  CFDictionaryGetKeysAndValues(a1, v9, 0);
  CFArrayRef v10 = CFArrayCreate(0, v9, Count, a2);
  if (v9 != v8) {
    free(v9);
  }
  return v10;
}

CFArrayRef CGCFDictionaryCopyValues(const __CFDictionary *a1, const CFArrayCallBacks *a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(a1);
  MEMORY[0x1F4188790](Count, v5);
  BOOL v8 = (const void **)((char *)v12 - v7);
  if (v6 <= 0x1FFFFFFFFFFFFFFELL)
  {
    if (v6 > 0x100)
    {
      int v9 = (const void **)malloc_type_calloc(8 * Count, 1uLL, 0x7EE311CCuLL);
    }
    else
    {
      bzero((char *)v12 - v7, 8 * Count);
      int v9 = v8;
    }
  }
  else
  {
    int v9 = 0;
  }
  CFDictionaryGetKeysAndValues(a1, 0, v9);
  CFArrayRef v10 = CFArrayCreate(0, v9, Count, a2);
  if (v9 != v8) {
    free(v9);
  }
  return v10;
}

void CGCFDictionaryApplyBlock(const __CFDictionary *a1, void *context)
{
}

uint64_t call_dict_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void CGCFDictionarySetCString(__CFDictionary *a1, const void *a2, char *cStr)
{
  if (a1)
  {
    if (a2)
    {
      CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
      if (v5)
      {
        CFStringRef v6 = v5;
        CFDictionarySetValue(a1, a2, v5);
        CFRelease(v6);
      }
    }
  }
}

void CGCFDictionarySetLongInteger(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  if (a1 && a2)
  {
    CFNumberRef v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

uint64_t CGCFDictionaryGetIntegerWithDefault(const __CFDictionary *a1, const void *a2, unsigned int a3)
{
  unsigned int v5 = 0;
  if (CGCFDictionaryGetInteger(a1, a2, &v5)) {
    return v5;
  }
  else {
    return a3;
  }
}

void CGCFDictionarySetBoolean(__CFDictionary *a1, const void *a2, int a3)
{
  if (a1 && a2)
  {
    CFNumberRef v3 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!a3) {
      CFNumberRef v3 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(a1, a2, *v3);
  }
}

uint64_t CGCFDictionaryGetBooleanWithDefault(const __CFDictionary *a1, const void *a2, unsigned int a3)
{
  BOOL v5 = 0;
  if (CGCFDictionaryGetBoolean(a1, a2, &v5)) {
    return v5;
  }
  else {
    return a3;
  }
}

uint64_t CGCFDictionaryGetFloatWithDefault(const __CFDictionary *a1, const void *a2)
{
  uint64_t v3 = 0;
  return CGCFDictionaryGetFloat(a1, a2, &v3);
}

void CGCFDictionarySetNumber(__CFDictionary *a1, const void *a2, CFNumberType a3, void *valuePtr)
{
  if (a1 && a2 && valuePtr)
  {
    if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 0x3E8)
    {
      a3 = kCFNumberLongType;
    }
    else if (a3 == -1)
    {
      return;
    }
    CFNumberRef v6 = CFNumberCreate(0, a3, valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
    }
  }
}

BOOL CGCFDictionaryGetNumber(const __CFDictionary *a1, const void *a2, CFNumberType a3, void *a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a4)
  {
    CFNumberType v6 = a3;
    if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 0x3E8)
    {
      CFNumberType v6 = kCFNumberLongType;
    }
    else if (a3 == -1)
    {
      return 0;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      CFNumberRef v8 = Value;
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID()) {
        return CFNumberGetValue(v8, v6, a4) != 0;
      }
    }
    return 0;
  }
  return v4;
}

void CGCFDictionarySetCFTypeRef(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (theDict && key)
  {
    if (value) {
      CFDictionarySetValue(theDict, key, value);
    }
  }
}

void CGCFDictionarySetPoint(__CFDictionary *a1, const void *a2, double a3, double a4)
{
  *(double *)CFNumberRef v8 = a3;
  *(double *)&v8[1] = a4;
  if (a1 && a2)
  {
    CFDataRef v6 = CFDataCreate(0, (const UInt8 *)v8, 16);
    if (v6)
    {
      CFDataRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
    }
  }
}

BOOL CGCFDictionaryGetPoint(const __CFDictionary *a1, const void *a2, UInt8 *a3)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  CFDataRef v5 = Value;
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFDataGetTypeID()) {
    return 0;
  }

  return get_value_from_data(v5, a3, 16);
}

void CGCFDictionarySetSize(__CFDictionary *a1, const void *a2, double a3, double a4)
{
  *(double *)CFNumberRef v8 = a3;
  *(double *)&v8[1] = a4;
  if (a1 && a2)
  {
    CFDataRef v6 = CFDataCreate(0, (const UInt8 *)v8, 16);
    if (v6)
    {
      CFDataRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
    }
  }
}

BOOL CGCFDictionaryGetSize(const __CFDictionary *a1, const void *a2, UInt8 *a3)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  CFDataRef v5 = Value;
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFDataGetTypeID()) {
    return 0;
  }

  return get_value_from_data(v5, a3, 16);
}

void CGCFDictionarySetRect(__CFDictionary *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  *(double *)CFArrayRef v10 = a3;
  *(double *)&v10[1] = a4;
  *(double *)&CGPDFDictionaryRef v10[2] = a5;
  *(double *)&v10[3] = a6;
  if (a1 && a2)
  {
    CFDataRef v8 = CFDataCreate(0, (const UInt8 *)v10, 32);
    if (v8)
    {
      CFDataRef v9 = v8;
      CFDictionarySetValue(a1, a2, v8);
      CFRelease(v9);
    }
  }
}

__CFArray *CGCFArrayCreatePDFRect(CGFloat a1, CGFloat y, CGFloat a3, double height)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CGMutablePathRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D510]);
  BOOL v10 = height < 0.0 || a3 < 0.0;
  *(double *)&unint64_t v11 = a1;
  if (v10)
  {
    CGFloat v12 = y;
    CGFloat v13 = a3;
    double v14 = height;
    unint64_t v11 = (unint64_t)CGRectStandardize(*(CGRect *)&v11);
  }
  double valuePtr = *(double *)&v11;
  CFNumberRef v15 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v15);
  CFRelease(v15);
  if (v10)
  {
    v25.origin.CGFloat x = a1;
    v25.origin.CGFloat y = y;
    v25.size.CGFloat width = a3;
    v25.size.CGFloat height = height;
    CGRect v26 = CGRectStandardize(v25);
  }
  else
  {
    v26.origin.CGFloat y = y;
  }
  double valuePtr = v26.origin.y;
  CFNumberRef v16 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v16);
  CGFloat v17 = a1;
  if (v10)
  {
    CGFloat v18 = y;
    CGFloat v19 = a3;
    double v20 = height;
    *(CGRect *)&CGFloat v17 = CGRectStandardize(*(CGRect *)&v17);
  }
  else
  {
    v27.size.CGFloat width = a3;
  }
  double valuePtr = v17 + v27.size.width;
  CFNumberRef v21 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v21);
  if (v10)
  {
    v28.origin.CGFloat x = a1;
    v28.origin.CGFloat y = y;
    v28.size.CGFloat width = a3;
    v28.size.CGFloat height = height;
    CGRect v29 = CGRectStandardize(v28);
    CGFloat y = v29.origin.y;
    CGFloat height = v29.size.height;
  }
  double valuePtr = y + height;
  CFNumberRef v22 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v22);
  CFRelease(v22);
  return Mutable;
}

uint64_t CGCFDictionaryGetPDFRect(const __CFDictionary *a1, const void *a2, float64x2_t *a3)
{
  uint64_t v3 = 0;
  if (a1 && a2 && a3)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      CFArrayRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFArrayGetTypeID() && CFArrayGetCount(v6) >= 4)
      {
        CFIndex v9 = 0;
        while (1)
        {
          ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v6, v9);
          CFTypeID v11 = CFGetTypeID(ValueAtIndex);
          if (v11 != CFNumberGetTypeID()) {
            break;
          }
          if (++v9 == 4)
          {
            CFNumberRef v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 0);
            CFNumberGetValue(v12, kCFNumberDoubleType, a3);
            uint64_t v3 = 1;
            CFNumberRef v13 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 1);
            CFNumberGetValue(v13, kCFNumberDoubleType, &a3->f64[1]);
            CFNumberRef v14 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 2);
            CFNumberGetValue(v14, kCFNumberDoubleType, &a3[1]);
            CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 3);
            CFNumberGetValue(v15, kCFNumberDoubleType, &a3[1].f64[1]);
            a3[1] = vsubq_f64(a3[1], *a3);
            return v3;
          }
        }
      }
    }
    return 0;
  }
  return v3;
}

__CFData *CGCFURLCopyFileData(CFURLRef fileURL)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CFTypeRef v1 = CFReadStreamCreateWithFile(0, fileURL);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  if (CFReadStreamOpen(v1))
  {
    for (uint64_t i = CFDataCreateMutable(0, 0); ; CFDataAppendBytes(i, buffer, v4))
    {
      CFIndex v4 = CFReadStreamRead(v2, buffer, 1024);
      if (!v4) {
        break;
      }
    }
    CFReadStreamClose(v2);
  }
  else
  {
    uint64_t i = 0;
  }
  CFRelease(v2);
  return i;
}

void add_keys_and_values(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (value && key)
  {
    if (theDict) {
      CFDictionarySetValue(theDict, key, value);
    }
  }
}

uint64_t (*__object_md5_creator_block_invoke_2())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  BOOL result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    BOOL result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileGetMD5");
  }
  if (result) {
    CFTypeRef v1 = result;
  }
  else {
    CFTypeRef v1 = colorsync_smart_null;
  }
  object_md5_creator_f_2 = (uint64_t (*)(void))v1;
  return result;
}

uint64_t colorsync_smart_null()
{
  return 0;
}

void PDFPatternRelease(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      BOOL v10 = (const void *)a1[3];
      if (v10) {
        CFRelease(v10);
      }
      uint64_t v11 = a1[2];
      if (v11) {
        PDFContentStreamRelease(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      free(a1);
    }
  }
}

uint64_t CPCopyObject(void *a1, NSZone *a2)
{
  if (!a1) {
    return 0;
  }
  Class = object_getClass(a1);
  uint64_t v5 = objc_msgSend(NSAllocateObject(Class, 0, a2), "initSuper");
  if (v5) {
    CPAssignVariables(Class, (uint64_t)a1, v5, (uint64_t)a2);
  }
  return v5;
}

void CPAssignVariables(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && (objc_class *)objc_opt_class() != a1)
  {
    Class Superclass = class_getSuperclass(a1);
    CPAssignVariables(Superclass, a2, a3, a4);
    outCFIndex Count = 0;
    CFIndex v9 = class_copyIvarList(a1, &outCount);
    if (outCount)
    {
      for (unint64_t i = 0; i < outCount; ++i)
      {
        uint64_t v11 = v9[i];
        ptrdiff_t Offset = ivar_getOffset(v11);
        CFNumberRef v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29238], "allocWithZone:", a4), "initWithBytes:objCType:", a2 + Offset, ivar_getTypeEncoding(v11));
        [v13 getValue:a3 + Offset];
      }
    }
    free(v9);
  }
}

void std::vector<applesauce::CF::ObjectRef<CGPath *>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  CFTypeRef v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CFIndex v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFArrayRef v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:fe180100]<applesauce::CF::ObjectRef<CGPath *>,0>(v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  CFIndex v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:fe180100]<applesauce::CF::ObjectRef<CGPath *>,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t std::__split_buffer<applesauce::CF::ObjectRef<CGPath *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    CFIndex v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:fe180100]<applesauce::CF::ObjectRef<CGPath *>,0>(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGPath *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGDisplayList *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void PageLayoutFactory::ScannerContext::op_Wstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v3 = *((void *)a2 + 3);
  if (v3)
  {
    *(unsigned char *)(v3 + 48) = 0;
    uint64_t v4 = *((void *)a2 + 3);
    if (v4) {
      *(_WORD *)(v4 + 48) = 256;
    }
  }
}

void PageLayoutFactory::ScannerContext::op_W(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v3 = *((void *)a2 + 3);
  if (v3)
  {
    *(_WORD *)(v3 + 48) = 1;
    uint64_t v4 = *((void *)a2 + 3);
    if (v4) {
      *(unsigned char *)(v4 + 49) = 0;
    }
  }
}

void PageLayoutFactory::ScannerContext::op_bstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PageLayoutFactory::ScannerContext::addCurrentPath(PageLayoutFactory::ScannerContext *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v9 = *((void *)this + 23);
    if (*((void *)this + 22) == v9) {
      goto LABEL_28;
    }
    BOOL v10 = *(CGPath **)(v9 - 8);
    if (v10 && !CGPathIsEmpty(*(CGPathRef *)(v9 - 8))) {
      CGPathCloseSubpath(v10);
    }
    else {
      CGPostError((uint64_t)"%s: no current point.", a2, a3, a4, a5, a6, a7, a8, (char)"void PageLayoutFactory::ScannerContext::closeCurrentPath()");
    }
  }
  uint64_t v11 = *((void *)this + 23);
  if (*((void *)this + 22) == v11) {
LABEL_28:
  }
    __break(1u);
  uint64_t v12 = *(void *)this;
  CFNumberRef v13 = *(const CGPath **)(v11 - 8);
  if (v13) {
    CFRetain(*(CFTypeRef *)(v11 - 8));
  }
  if (!CGPathIsLine((uint64_t)v13, &v36))
  {
    if (!CGPathIsRect(v13, &rect)) {
      goto LABEL_22;
    }
    CGFloat width = rect.size.width;
    double height = rect.size.height;
    double x = rect.origin.x;
    double y = rect.origin.y;
    if (rect.size.width < 0.0 || rect.size.height < 0.0)
    {
      CGRect v40 = CGRectStandardize(rect);
      double v17 = v40.origin.x + v40.size.width;
      v40.origin.double x = x;
      v40.origin.double y = y;
      v40.size.CGFloat width = width;
      v40.size.double height = height;
      *(CGRect *)(&v24 - 1) = CGRectStandardize(v40);
      double height = v27;
    }
    else
    {
      double v17 = rect.origin.x + rect.size.width;
      double v24 = rect.origin.y;
    }
    double v25 = v24 + height;
    CGRect v28 = *(PageLayout **)(v12 + 8);
    CGRect v26 = (PageLayout **)(v12 + 8);
    PageLayout::addVertEdge(v28, v18, v19, x, y, v25);
    PageLayout::addVertEdge(*v26, v29, v30, v17, rect.origin.y, v25);
    PageLayout::addHorzEdge(*v26, v31, v32, rect.origin.x, rect.origin.y, v17);
    double v16 = rect.origin.x;
    goto LABEL_21;
  }
  double v16 = *(double *)&v36;
  double v17 = v37;
  if (*(double *)&v36 == v37)
  {
    PageLayout::addVertEdge(*(PageLayout **)(v12 + 8), v14, v15, *(double *)&v36, *((double *)&v36 + 1), v38);
    goto LABEL_22;
  }
  double v25 = *((double *)&v36 + 1);
  if (*((double *)&v36 + 1) == v38)
  {
    CGRect v26 = (PageLayout **)(v12 + 8);
LABEL_21:
    PageLayout::addHorzEdge(*v26, v14, v15, v16, v25, v17);
  }
LABEL_22:
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v33 = *((void *)this + 23);
  if (*((void *)this + 22) == v33) {
    goto LABEL_28;
  }
  uint64_t v34 = *(const void **)(v33 - 8);
  *(void *)(v33 - 8) = 0;
  if (v34) {
    CFRelease(v34);
  }
}

void sub_184D2CF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void PageLayoutFactory::ScannerContext::op_Bstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PageLayoutFactory::ScannerContext::op_b(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PageLayoutFactory::ScannerContext::op_B(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PageLayoutFactory::ScannerContext::op_fstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PageLayoutFactory::ScannerContext::op_f(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PageLayoutFactory::ScannerContext::op_s(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PageLayoutFactory::ScannerContext::op_S(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PageLayoutFactory::ScannerContext::op_n(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v3 = *((void *)a2 + 23);
  if (*((void *)a2 + 22) == v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(const void **)(v3 - 8);
    *(void *)(v3 - 8) = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
}

void PageLayoutFactory::ScannerContext::op_re(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v17 = 0.0;
  CGPDFReal v18 = 0.0;
  CGPDFReal v16 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v16)
    && CGPDFScannerPopNumber(this, &v17)
    && CGPDFScannerPopNumber(this, &v18))
  {
    uint64_t v5 = (const CGAffineTransform *)*((void *)a2 + 3);
    if (!v5) {
      uint64_t v5 = &CGAffineTransformIdentity;
    }
    long long v7 = *(_OWORD *)&v5->c;
    long long v6 = *(_OWORD *)&v5->tx;
    *(_OWORD *)&v14.a = *(_OWORD *)&v5->a;
    *(_OWORD *)&v14.c = v7;
    *(_OWORD *)&v14.tdouble x = v6;
    PageLayoutFactory::ScannerContext::ensureCurrentPath(a2);
    uint64_t v8 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v8)
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = *(CGPath **)(v8 - 8);
      CGPDFReal v11 = v16;
      CGPDFReal v10 = v17;
      CGPDFReal v12 = v18;
      if (v16 < 0.0 || (CGPDFReal v13 = value, value < 0.0))
      {
        CGPathMoveToPoint(*(CGMutablePathRef *)(v8 - 8), &v14, v18, v17);
        CGPathAddLineToPoint(v9, &v14, v18 + v16, v17);
        CGPathAddLineToPoint(v9, &v14, v18 + v16, v17 + value);
        CGPathAddLineToPoint(v9, &v14, v18, v17 + value);
        CGPathCloseSubpath(v9);
      }
      else
      {
        CGPathAddRect(*(CGMutablePathRef *)(v8 - 8), &v14, *(CGRect *)&v12);
      }
    }
  }
}

void PageLayoutFactory::ScannerContext::ensureCurrentPath(PageLayoutFactory::ScannerContext *this)
{
  uint64_t v1 = *((void *)this + 23);
  if (*((void *)this + 22) == v1) {
    goto LABEL_7;
  }
  if (*(void *)(v1 - 8)) {
    return;
  }
  CGMutablePathRef Mutable = CGPathCreateMutable();
  uint64_t v4 = *((void *)this + 23);
  if (*((void *)this + 22) == v4)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = *(const void **)(v4 - 8);
  *(void *)(v4 - 8) = Mutable;
  if (v5) {
    CFRelease(v5);
  }
}

void PageLayoutFactory::ScannerContext::op_h(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)a2 + 23);
  if (*((void *)a2 + 22) == v8) {
    goto LABEL_9;
  }
  uint64_t v9 = *(const CGPath **)(v8 - 8);
  if (!v9 || CGPathIsEmpty(v9))
  {
    CGPostError((uint64_t)"%s: no current point.", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"static void PageLayoutFactory::ScannerContext::op_h(CGPDFScannerRef, void *)");
    return;
  }
  uint64_t v11 = *((void *)a2 + 23);
  if (*((void *)a2 + 22) == v11)
  {
LABEL_9:
    __break(1u);
  }
  else
  {
    CGPDFReal v12 = *(CGPath **)(v11 - 8);
    CGPathCloseSubpath(v12);
  }
}

void PageLayoutFactory::ScannerContext::op_y(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v21 = 0.0;
  CGPDFReal v22 = 0.0;
  CGPDFReal value = 0.0;
  CGPDFReal v20 = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v20)
    && CGPDFScannerPopNumber(this, &v21)
    && CGPDFScannerPopNumber(this, &v22))
  {
    uint64_t v12 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v12) {
      goto LABEL_14;
    }
    CGPDFReal v13 = *(const CGPath **)(v12 - 8);
    if (!v13 || CGPathIsEmpty(v13))
    {
      CGPostError((uint64_t)"%s: no current point.", v5, v6, v7, v8, v9, v10, v11, (char)"static void PageLayoutFactory::ScannerContext::op_y(CGPDFScannerRef, void *)");
      return;
    }
    CGAffineTransform v14 = &CGAffineTransformIdentity;
    if (*((void *)a2 + 3)) {
      CGAffineTransform v14 = (const CGAffineTransform *)*((void *)a2 + 3);
    }
    long long v16 = *(_OWORD *)&v14->c;
    long long v15 = *(_OWORD *)&v14->tx;
    *(_OWORD *)&m.a = *(_OWORD *)&v14->a;
    *(_OWORD *)&m.c = v16;
    *(_OWORD *)&m.tdouble x = v15;
    uint64_t v17 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v17) {
LABEL_14:
    }
      __break(1u);
    else {
      CGPathAddCurveToPoint(*(CGMutablePathRef *)(v17 - 8), &m, v22, v21, v20, value, v20, value);
    }
  }
}

void PageLayoutFactory::ScannerContext::op_v(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v31 = 0.0;
  CGPDFReal v32 = 0.0;
  CGPDFReal value = 0.0;
  CGPDFReal v30 = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v30)
    && CGPDFScannerPopNumber(this, &v31)
    && CGPDFScannerPopNumber(this, &v32))
  {
    uint64_t v12 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v12) {
      goto LABEL_17;
    }
    CGPDFReal v13 = *(const CGPath **)(v12 - 8);
    if (v13 && !CGPathIsEmpty(*(CGPathRef *)(v12 - 8)))
    {
      CGPoint CurrentPoint = CGPathGetCurrentPoint(v13);
      double v24 = (CGAffineTransform *)*((void *)a2 + 3);
      if (!v24) {
        double v24 = (CGAffineTransform *)&CGAffineTransformIdentity;
      }
      CGAffineTransform m = *v24;
      double v14 = CGPointApplyInverseAffineTransform(&m.a, v16, v17, v18, v19, v20, v21, v22, CurrentPoint.x, CurrentPoint.y);
    }
    else
    {
      CGPostError((uint64_t)"%s: no current point.", v5, v6, v7, v8, v9, v10, v11, (char)"CGPoint PageLayoutFactory::ScannerContext::getPathCurrentPoint()");
      double v14 = 0.0;
      CGFloat v15 = 0.0;
    }
    double v25 = (const CGAffineTransform *)*((void *)a2 + 3);
    if (!v25) {
      double v25 = &CGAffineTransformIdentity;
    }
    long long v27 = *(_OWORD *)&v25->c;
    long long v26 = *(_OWORD *)&v25->tx;
    *(_OWORD *)&m.a = *(_OWORD *)&v25->a;
    *(_OWORD *)&m.c = v27;
    *(_OWORD *)&m.tdouble x = v26;
    uint64_t v28 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v28) {
LABEL_17:
    }
      __break(1u);
    else {
      CGPathAddCurveToPoint(*(CGMutablePathRef *)(v28 - 8), &m, v14, v15, v32, v31, v30, value);
    }
  }
}

void PageLayoutFactory::ScannerContext::op_c(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v23 = 0.0;
  CGPDFReal v24 = 0.0;
  CGPDFReal v21 = 0.0;
  CGPDFReal v22 = 0.0;
  CGPDFReal v20 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v20)
    && CGPDFScannerPopNumber(this, &v21)
    && CGPDFScannerPopNumber(this, &v22)
    && CGPDFScannerPopNumber(this, &v23)
    && CGPDFScannerPopNumber(this, &v24))
  {
    uint64_t v12 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v12) {
      goto LABEL_16;
    }
    CGPDFReal v13 = *(const CGPath **)(v12 - 8);
    if (!v13 || CGPathIsEmpty(v13))
    {
      CGPostError((uint64_t)"%s: no current point.", v5, v6, v7, v8, v9, v10, v11, (char)"static void PageLayoutFactory::ScannerContext::op_c(CGPDFScannerRef, void *)");
      return;
    }
    double v14 = &CGAffineTransformIdentity;
    if (*((void *)a2 + 3)) {
      double v14 = (const CGAffineTransform *)*((void *)a2 + 3);
    }
    long long v16 = *(_OWORD *)&v14->c;
    long long v15 = *(_OWORD *)&v14->tx;
    *(_OWORD *)&m.a = *(_OWORD *)&v14->a;
    *(_OWORD *)&m.c = v16;
    *(_OWORD *)&m.tdouble x = v15;
    uint64_t v17 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v17) {
LABEL_16:
    }
      __break(1u);
    else {
      CGPathAddCurveToPoint(*(CGMutablePathRef *)(v17 - 8), &m, v24, v23, v22, v21, v20, value);
    }
  }
}

void PageLayoutFactory::ScannerContext::op_l(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal value = 0.0;
  CGPDFReal v20 = 0.0;
  if (CGPDFScannerPopNumber(this, &value) && CGPDFScannerPopNumber(this, &v20))
  {
    uint64_t v12 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v12) {
      goto LABEL_12;
    }
    CGPDFReal v13 = *(const CGPath **)(v12 - 8);
    if (!v13 || CGPathIsEmpty(v13))
    {
      CGPostError((uint64_t)"%s: no current point.", v5, v6, v7, v8, v9, v10, v11, (char)"static void PageLayoutFactory::ScannerContext::op_l(CGPDFScannerRef, void *)");
      return;
    }
    double v14 = &CGAffineTransformIdentity;
    if (*((void *)a2 + 3)) {
      double v14 = (const CGAffineTransform *)*((void *)a2 + 3);
    }
    long long v16 = *(_OWORD *)&v14->c;
    long long v15 = *(_OWORD *)&v14->tx;
    *(_OWORD *)&m.a = *(_OWORD *)&v14->a;
    *(_OWORD *)&m.c = v16;
    *(_OWORD *)&m.tdouble x = v15;
    uint64_t v17 = *((void *)a2 + 23);
    if (*((void *)a2 + 22) == v17) {
LABEL_12:
    }
      __break(1u);
    else {
      CGPathAddLineToPoint(*(CGMutablePathRef *)(v17 - 8), &m, v20, value);
    }
  }
}

void PageLayoutFactory::ScannerContext::op_m(PageLayoutFactory::ScannerContext *this, const CGAffineTransform **a2, void *a3)
{
  CGPDFReal value = 0.0;
  CGPDFReal v11 = 0.0;
  if (CGPDFScannerPopNumber(this, &value) && CGPDFScannerPopNumber(this, &v11))
  {
    PageLayoutFactory::ScannerContext::ensureCurrentPath((PageLayoutFactory::ScannerContext *)a2);
    uint64_t v5 = &CGAffineTransformIdentity;
    if (a2[3]) {
      uint64_t v5 = a2[3];
    }
    long long v7 = *(_OWORD *)&v5->c;
    long long v6 = *(_OWORD *)&v5->tx;
    *(_OWORD *)&v9.a = *(_OWORD *)&v5->a;
    *(_OWORD *)&v9.c = v7;
    *(_OWORD *)&v9.tdouble x = v6;
    uint64_t v8 = a2[23];
    if (a2[22] == v8) {
      __break(1u);
    }
    else {
      CGPathMoveToPoint(*(CGMutablePathRef *)&v8[-1].ty, &v9, v11, value);
    }
  }
}

void PageLayoutFactory::ScannerContext::op_EMC(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v3 = *((void *)a2 + 9);
  uint64_t v4 = *((void *)a2 + 10);
  if (v3 == v4)
  {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else
  {
    uint64_t v5 = v4 - 8;
    *((void *)a2 + 10) = v5;
  }
  if (*((void *)a2 + 14) == (v5 - v3) >> 3)
  {
    *((unsigned char *)a2 + 96) = 0;
    long long v6 = (void *)*((void *)a2 + 13);
    *((void *)a2 + 13) = 0;
  }
}

void PageLayoutFactory::ScannerContext::op_BMC(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    uint64_t v5 = (char *)*((void *)a2 + 10);
    unint64_t v4 = *((void *)a2 + 11);
    if ((unint64_t)v5 >= v4)
    {
      long long v7 = (char *)*((void *)a2 + 9);
      uint64_t v8 = (v5 - v7) >> 3;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v11) {
        unint64_t v12 = v9;
      }
      if (v12)
      {
        unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v12);
        long long v7 = (char *)*((void *)a2 + 9);
        uint64_t v5 = (char *)*((void *)a2 + 10);
      }
      else
      {
        uint64_t v13 = 0;
      }
      double v14 = (void *)(v12 + 8 * v8);
      unint64_t v15 = v12 + 8 * v13;
      void *v14 = -1;
      long long v6 = v14 + 1;
      while (v5 != v7)
      {
        uint64_t v16 = *((void *)v5 - 1);
        v5 -= 8;
        *--double v14 = v16;
      }
      *((void *)a2 + 9) = v14;
      *((void *)a2 + 10) = v6;
      *((void *)a2 + 11) = v15;
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(void *)uint64_t v5 = -1;
      long long v6 = v5 + 8;
    }
    *((void *)a2 + 10) = v6;
  }
}

void PageLayoutFactory::ScannerContext::op_BDC(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  int v3 = *((_DWORD *)this + 18);
  if (v3 <= 0)
  {
    pdf_error("stack underflow.", a2, a3);
  }
  else
  {
    uint64_t v4 = *((void *)this + 10);
    unsigned int v5 = v3 - 1;
    *((_DWORD *)this + 18) = v5;
    if (!v4) {
      return;
    }
    int v7 = *(_DWORD *)(v4 + 40 * v5 + 8);
    if (v7 == 8)
    {
      unint64_t v9 = 0;
      uint64_t v8 = *(CGPDFDictionary **)(v4 + 40 * v5 + 32);
    }
    else
    {
      if (v7 != 5) {
        return;
      }
      uint64_t v8 = 0;
      unint64_t v9 = *(const char **)(v4 + 40 * v5 + 32);
    }
    __s1 = 0;
    if (CGPDFScannerPopName(this, (const char **)&__s1))
    {
      uint64_t v10 = __s1;
      if (!v9)
      {
        double v14 = a2;
        unint64_t v15 = __s1;
        uint64_t v13 = v8;
        goto LABEL_19;
      }
      uint64_t v11 = **(void **)a2;
      if (v11)
      {
        unint64_t v12 = *(CGPDFDictionary **)(*(void *)(v11 + 40) + 16);
        if (v12)
        {
          CGPDFDictionaryRef value = 0;
          if (!CGPDFDictionaryGetDictionary(v12, "Resources", &value))
          {
            CGPDFDictionaryRef dict = 0;
            if (CGPDFDictionaryGetDictionary(value, "Properties", &dict))
            {
              CGPDFDictionaryRef v17 = 0;
              if (!CGPDFDictionaryGetDictionary(dict, v9, &v17))
              {
                uint64_t v13 = v17;
                double v14 = a2;
                unint64_t v15 = v10;
LABEL_19:
                PageLayoutFactory::ScannerContext::beginMarkedContentSequence(v14, v15, v13);
              }
            }
          }
        }
      }
    }
  }
}

void PageLayoutFactory::ScannerContext::beginMarkedContentSequence(PageLayoutFactory::ScannerContext *this, const char *__s1, CGPDFDictionaryRef dict)
{
  CGPDFStringRef value = 0;
  if (!*((unsigned char *)this + 96) && !strcmp(__s1, "Span") && CGPDFDictionaryGetString(dict, "ActualText", &value))
  {
    CFStringRef v5 = CGPDFStringCopyTextString(value);
    CGPDFInteger v30 = (CGPDFInteger)v5;
    if (v5)
    {
      CFStringRef v6 = v5;
      if (CFStringGetLength(v5) == 1)
      {
        *((unsigned char *)this + 96) = 1;
        int v7 = (void *)*((void *)this + 13);
        *((void *)this + 13) = v6;

        *((void *)this + 14) = (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 3;
      }
      else
      {
        CFRelease(v6);
      }
    }
  }
  CGPDFInteger v30 = 0;
  BOOL Integer = CGPDFDictionaryGetInteger(dict, "MCID", &v30);
  uint64_t v10 = (char *)*((void *)this + 10);
  unint64_t v9 = *((void *)this + 11);
  if (!Integer || (CGPDFInteger v11 = v30, v30 < 0))
  {
    if ((unint64_t)v10 < v9)
    {
      *(void *)uint64_t v10 = -1;
      unint64_t v12 = v10 + 8;
      goto LABEL_14;
    }
    double v14 = (char *)*((void *)this + 9);
    uint64_t v21 = (v10 - v14) >> 3;
    unint64_t v22 = v21 + 1;
    if (!((unint64_t)(v21 + 1) >> 61))
    {
      uint64_t v23 = v9 - (void)v14;
      if (v23 >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      BOOL v18 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v18) {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v24);
        double v14 = (char *)*((void *)this + 9);
        uint64_t v10 = (char *)*((void *)this + 10);
      }
      else
      {
        uint64_t v25 = 0;
      }
      long long v26 = (CGPDFInteger *)(v24 + 8 * v21);
      unint64_t v27 = v24 + 8 * v25;
      *long long v26 = -1;
      uint64_t v13 = v26 + 1;
      while (v10 != v14)
      {
        CGPDFInteger v29 = *((void *)v10 - 1);
        v10 -= 8;
        *--long long v26 = v29;
      }
      goto LABEL_37;
    }
LABEL_40:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
  }
  if ((unint64_t)v10 < v9)
  {
    *(void *)uint64_t v10 = v30;
    unint64_t v12 = v10 + 8;
LABEL_14:
    uint64_t v13 = v12;
    goto LABEL_39;
  }
  double v14 = (char *)*((void *)this + 9);
  uint64_t v15 = (v10 - v14) >> 3;
  unint64_t v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) >> 61) {
    goto LABEL_40;
  }
  uint64_t v17 = v9 - (void)v14;
  if (v17 >> 2 > v16) {
    unint64_t v16 = v17 >> 2;
  }
  BOOL v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v18) {
    unint64_t v19 = v16;
  }
  if (v19)
  {
    unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v19);
    double v14 = (char *)*((void *)this + 9);
    uint64_t v10 = (char *)*((void *)this + 10);
  }
  else
  {
    uint64_t v20 = 0;
  }
  long long v26 = (CGPDFInteger *)(v19 + 8 * v15);
  unint64_t v27 = v19 + 8 * v20;
  *long long v26 = v11;
  uint64_t v13 = v26 + 1;
  while (v10 != v14)
  {
    CGPDFInteger v28 = *((void *)v10 - 1);
    v10 -= 8;
    *--long long v26 = v28;
  }
LABEL_37:
  *((void *)this + 9) = v26;
  *((void *)this + 10) = v13;
  *((void *)this + 11) = v27;
  if (v14) {
    operator delete(v14);
  }
LABEL_39:
  *((void *)this + 10) = v13;
}

void sub_184D2DBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void PageLayoutFactory::ScannerContext::op_gs(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFStringRef value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    ExtGState = (CGPDFDictionary *)CGPDFContentStreamGetExtGState(*((void *)this + 7), value);
    if (ExtGState)
    {
      arradouble y = 0;
      if (CGPDFDictionaryGetArray(ExtGState, "Font", &array))
      {
        CGPDFDictionaryRef v11 = 0;
        if (CGPDFArrayGetDictionary(array, 0, &v11))
        {
          uint64_t v10 = 0;
          if (CGPDFArrayGetNumber(array, 1uLL, (CGPDFReal *)&v10))
          {
            CFStringRef v6 = (const void *)CGPDFFontCreate(v11);
            if (v6)
            {
              CGPDFGStateSetFont(*((void *)a2 + 3), v6);
              uint64_t v7 = *((void *)a2 + 3);
              if (v7)
              {
                uint64_t v8 = v10;
                *(void *)(v7 + 128) = v10;
                uint64_t v9 = *(void *)(v7 + 272);
                if (v9) {
                  *(void *)(v9 + 56) = v8;
                }
              }
            }
          }
        }
      }
    }
  }
}

void PageLayoutFactory::ScannerContext::op_Do(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFStringRef value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    CFStringRef v5 = (CGPDFContentStream *)*((void *)this + 7);
    if (v5)
    {
      CFStringRef v6 = value;
      uint64_t v7 = *((void *)this + 7);
      while (1)
      {
        uint64_t v8 = CGPDFResourcesCopyXObject(*(void *)(v7 + 32), v6);
        if (v8) {
          break;
        }
        uint64_t v7 = *(void *)(v7 + 40);
        if (!v7) {
          return;
        }
      }
      uint64_t v9 = v8;
      int v10 = *((_DWORD *)v8 + 4);
      if (v10 == 2)
      {
        uint64_t v24 = CGPDFXObjectGetValue((uint64_t)v8);
        if (v24)
        {
          uint64_t v25 = *(CGPDFStream **)v24;
          long long v26 = *(CGPDFDictionary **)(v24 + 88);
        }
        else
        {
          uint64_t v25 = 0;
          long long v26 = 0;
        }
        uint64_t v34 = (const CGAffineTransform *)(v24 + 40);
      }
      else
      {
        if (v10 != 1)
        {
          if (v10)
          {
            pdf_error("unrecognized or unsupported XObject subtype.");
          }
          else
          {
            CGPDFDictionaryRef v11 = (const CGAffineTransform *)*((void *)a2 + 3);
            if (!v11) {
              CGPDFDictionaryRef v11 = &CGAffineTransformIdentity;
            }
            long long v12 = *(_OWORD *)&v11->c;
            *(_OWORD *)&v42.a = *(_OWORD *)&v11->a;
            *(_OWORD *)&v42.c = v12;
            *(_OWORD *)&v42.tCGFloat x = *(_OWORD *)&v11->tx;
            uint64_t v13 = 0;
            *(void *)&long long v12 = 0;
            double v14 = 1.0;
            double v15 = 1.0;
            CGRect v45 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v12 - 8), &v42);
            CGFloat x = v45.origin.x;
            CGFloat y = v45.origin.y;
            CGFloat width = v45.size.width;
            CGFloat height = v45.size.height;
            uint64_t v20 = *(void **)(*(void *)a2 + 8);
            unint64_t v22 = (CGRect *)v20[52];
            unint64_t v21 = v20[53];
            if ((unint64_t)v22 >= v21)
            {
              unint64_t v27 = (CGRect *)v20[51];
              uint64_t v28 = v22 - v27;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 59) {
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
              }
              uint64_t v30 = v21 - (void)v27;
              if (v30 >> 4 > v29) {
                unint64_t v29 = v30 >> 4;
              }
              BOOL v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0;
              unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
              if (!v31) {
                unint64_t v32 = v29;
              }
              if (v32)
              {
                unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CGRect>>(v32);
                unint64_t v27 = (CGRect *)v20[51];
                unint64_t v22 = (CGRect *)v20[52];
              }
              else
              {
                uint64_t v33 = 0;
              }
              uint64_t v39 = (CGFloat *)(v32 + 32 * v28);
              *uint64_t v39 = x;
              v39[1] = y;
              unint64_t v40 = v32 + 32 * v33;
              v39[2] = width;
              v39[3] = height;
              uint64_t v23 = (CGRect *)(v39 + 4);
              if (v22 != v27)
              {
                do
                {
                  CGSize size = v22[-1].size;
                  *((_OWORD *)v39 - 2) = v22[-1].origin;
                  *((CGSize *)v39 - 1) = size;
                  v39 -= 4;
                  --v22;
                }
                while (v22 != v27);
                unint64_t v27 = (CGRect *)v20[51];
              }
              v20[51] = v39;
              v20[52] = v23;
              v20[53] = v40;
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              *unint64_t v22 = v45;
              uint64_t v23 = v22 + 1;
            }
            v20[52] = v23;
          }
LABEL_46:
          CFRelease(v9);
          return;
        }
        uint64_t v24 = CGPDFXObjectGetValue((uint64_t)v8);
        if (v24)
        {
          uint64_t v25 = *(CGPDFStream **)(v24 + 16);
          long long v26 = *(CGPDFDictionary **)(v24 + 104);
        }
        else
        {
          uint64_t v25 = 0;
          long long v26 = 0;
        }
        uint64_t v34 = (const CGAffineTransform *)(v24 + 56);
      }
      if (!v24) {
        uint64_t v34 = &CGAffineTransformIdentity;
      }
      long long v35 = *(_OWORD *)&v34->c;
      v44[0] = *(_OWORD *)&v34->a;
      v44[1] = v35;
      v44[2] = *(_OWORD *)&v34->tx;
      CGPDFRStateGSave(*((void *)a2 + 2));
      CGPDFGStateConcatCTM(*((double **)a2 + 3), (double *)v44);
      long long v36 = CGPDFContentStreamCreateWithStream(v25, v26, v5);
      double v37 = CGPDFScannerCreate(v36, *((CGPDFOperatorTableRef *)a2 + 1), a2);
      CGPDFScannerScan(v37);
      if (v37) {
        CFRelease(v37);
      }
      if (v36) {
        CFRelease(v36);
      }
      CGPDFRStateGRestore(*((void *)a2 + 2));
      double v38 = (void *)*((void *)a2 + 2);
      if (v38) {
        double v38 = (void *)*v38;
      }
      *((void *)a2 + 3) = v38;
      goto LABEL_46;
    }
  }
}

void PageLayoutFactory::ScannerContext::op_TJ(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFArrayRef value = 0;
  if (CGPDFScannerPopArray(this, &value))
  {
    if (*((unsigned char *)a2 + 32))
    {
      TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
      v5.n128_f64[0] = CGPDFTextObjectAppendStrings((uint64_t)TextObject, value);
      CGPDFTextLayoutDrawGlyphs(*((void **)TextObject + 21), (void (*)(uint64_t, uint64_t, long long *, uint64_t, uint64_t, char *, char *, void, uint64_t))PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke, (uint64_t)a2, v5);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2, double *a3, uint64_t a4, uint64_t a5, CGGlyph *a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v350 = *MEMORY[0x1E4F143B8];
  if (a9)
  {
    double v13 = *a3;
    double v14 = a3[1];
    double v15 = a3[2];
    double v16 = a3[3];
    double v17 = a3[4];
    double v18 = a3[5];
    Font = (CGFont *)CGPDFFontGetFont(a2);
    uint64_t v20 = *(const CGAffineTransform **)(a1 + 24);
    if (!v20) {
      uint64_t v20 = &CGAffineTransformIdentity;
    }
    double b = v20->b;
    double c = v20->c;
    double d = v20->d;
    tdouble y = v20->ty;
    CGFloat v25 = v14 * c + v13 * v20->a;
    CGFloat v26 = v16 * c + v15 * v20->a;
    CGFloat v27 = v20->tx + c * v18 + v17 * v20->a;
    memset(&v348, 0, sizeof(v348));
    double v337 = v14 * d + v13 * b;
    double v338 = v25;
    transform.double a = v25;
    transform.double b = v337;
    double v335 = v16 * d + v15 * b;
    double v336 = v26;
    transform.double c = v26;
    transform.double d = v335;
    double v333 = d * v18 + v17 * b + ty;
    double v334 = v27;
    transform.tdouble x = v27;
    transform.tdouble y = v333;
    CGAffineTransformDecompose(&v348, &transform);
    if (v348.horizontalShear < 2.22044605e-16) {
      v348.horizontalShear = 0.0;
    }
    if (v348.scale.width >= 0.0)
    {
      double rotation = v348.rotation;
    }
    else
    {
      double rotation = v348.rotation + 3.14159265;
      v348.scale.double width = -v348.scale.width;
      v348.double rotation = v348.rotation + 3.14159265;
    }
    int8x16_t scale = (int8x16_t)v348.scale;
    unint64_t CMap = CGPDFFontGetCMap(a2);
    if (CMap
      && cmap_vtable
      && (uint64_t v30 = *(unsigned int (**)(void))(cmap_vtable + 40)) != 0
      && v30(*(void *)(CMap + 16)))
    {
      int v327 = 0;
      double rotation = rotation + -1.57079633;
      int8x16_t scale = vextq_s8(scale, scale, 8uLL);
    }
    else
    {
      int v327 = 1;
    }
    if (a2) {
      BOOL v31 = (const CGAffineTransform *)(a2 + 56);
    }
    else {
      BOOL v31 = &CGAffineTransformIdentity;
    }
    double v32 = v31->d;
    double v33 = fabs(v31->a);
    if (v31->a == 0.0) {
      double v33 = 0.001;
    }
    *(double *)&uint64_t v323 = v33;
    double v34 = fabs(v32);
    if (v32 == 0.0) {
      double v35 = 0.001;
    }
    else {
      double v35 = v34;
    }
    unint64_t FontDescriptor = CGPDFFontGetFontDescriptor(a2);
    if (FontDescriptor) {
      double v37 = *(CGPDFDictionary **)(FontDescriptor + 32);
    }
    else {
      double v37 = 0;
    }
    glyphs = a6;
    font_info = get_font_info(Font);
    if (font_info) {
      int v39 = font_info[2];
    }
    else {
      int v39 = 0;
    }
    double v317 = (double)v39;
    if (v327)
    {
      transform.double a = 0.0;
      double v40 = 0.0;
      if (CGPDFDictionaryGetNumber(v37, "Ascent", &transform.a)) {
        double v41 = v35 * transform.a;
      }
      else {
        double v41 = 0.0;
      }
      BOOL v42 = v41 != 0.0 || Font == 0;
      if (!v42 && v39 != 0)
      {
        CGAffineTransform v44 = get_font_info(Font);
        if (v44) {
          int v45 = v44[3];
        }
        else {
          int v45 = 0;
        }
        double v41 = (double)v45 / v317;
      }
      if (CGPDFDictionaryGetNumber(v37, "Descent", &transform.a))
      {
        transform.double a = fabs(transform.a);
        double v40 = v35 * transform.a;
      }
      if (v40 == 0.0 && Font && v39)
      {
        CGRect v48 = get_font_info(Font);
        if (v48) {
          int v49 = v48[4];
        }
        else {
          int v49 = 0;
        }
        double v40 = (double)-v49 / v317;
      }
    }
    else
    {
      transform.double a = 0.0;
      BOOL Number = CGPDFDictionaryGetNumber(v37, "DW", &transform.a);
      double a = transform.a;
      if (!Number) {
        double a = 1000.0;
      }
      double v41 = *(double *)&v323 * a * 0.5;
      double v40 = v41;
    }
    uint64_t v329 = a1;
    if (v41 == 0.0 || v40 == 0.0)
    {
      unint64_t v50 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
      unint64_t v51 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v50 >> 47) ^ v50);
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      int8x8_t v53 = *(int8x8_t *)(a1 + 128);
      if (v53)
      {
        uint8x8_t v54 = (uint8x8_t)vcnt_s8(v53);
        v54.i16[0] = vaddlv_u8(v54);
        if (v54.u32[0] > 1uLL)
        {
          unint64_t v55 = v52;
          if (v52 >= *(void *)&v53) {
            unint64_t v55 = v52 % *(void *)&v53;
          }
        }
        else
        {
          unint64_t v55 = v52 & (*(void *)&v53 - 1);
        }
        double v56 = *(double ***)(*(void *)(a1 + 120) + 8 * v55);
        if (v56)
        {
          for (uint64_t i = *v56; i; uint64_t i = *(double **)i)
          {
            unint64_t v58 = *((void *)i + 1);
            if (v58 == v52)
            {
              if (*((void *)i + 2) == a2)
              {
                double v41 = i[3];
                double v40 = i[4];
                goto LABEL_181;
              }
            }
            else
            {
              if (v54.u32[0] > 1uLL)
              {
                if (v58 >= *(void *)&v53) {
                  v58 %= *(void *)&v53;
                }
              }
              else
              {
                v58 &= *(void *)&v53 - 1;
              }
              if (v58 != v55) {
                break;
              }
            }
          }
        }
      }
      if (a2) {
        double v59 = *(CGPDFDictionary **)(a2 + 16);
      }
      else {
        double v59 = 0;
      }
      unint64_t v324 = v52;
      value.double a = 0.0;
      if (!CGPDFDictionaryGetDictionary(v59, "Resources", (CGPDFDictionaryRef *)&value)) {
        value.double a = 0.0;
      }
      Procedures = CGPDFFontGetProcedures(a2);
      if (Procedures)
      {
        unint64_t v68 = (unint64_t)Procedures;
        uint64_t v69 = 0;
        double v70 = 2.22507386e-308;
        double y = 1.79769313e308;
        uint64_t v9 = (uint64_t)&CGRectNull;
        do
        {
          BOOL v72 = *(CGPDFStream **)(v68 + v69);
          if (v72)
          {
            if (!*(void *)(a1 + 160))
            {
              uint64_t CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v62, v63, v64, v65, v66, v67);
              BOOL v74 = *(const void **)(a1 + 160);
              *(void *)(a1 + 160) = CGDisplayList;
              if (v74) {
                CFRelease(v74);
              }
            }
            double v75 = *(CGContext **)(a1 + 168);
            if (!v75)
            {
              double v75 = (CGContext *)CGDisplayListContextCreate(*(void *)(a1 + 160), v61, (uint64_t)v62, v63, v64, v65, v66, v67);
              double v76 = *(const void **)(a1 + 168);
              *(void *)(a1 + 168) = v75;
              if (v76)
              {
                CFRelease(v76);
                double v75 = *(CGContext **)(a1 + 168);
              }
            }
            uint64_t v77 = *(void *)(a1 + 160);
            CGContextSaveGState(v75);
            long long v78 = *(_OWORD *)&v31->c;
            *(_OWORD *)&transform.double a = *(_OWORD *)&v31->a;
            *(_OWORD *)&transform.double c = v78;
            *(_OWORD *)&transform.tdouble x = *(_OWORD *)&v31->tx;
            CGContextConcatCTM(v75, &transform);
            uint64_t v79 = CGPDFDrawingContextCreateWithStream(v72, *(CGPDFDictionary **)&value.a, 0);
            CGPDFDrawingContextDrawGlyphStream((CGPDFContentStreamRef *)v79, v72, *(CGPDFDictionary **)&value.a, (uint64_t)v75);
            CGPDFDrawingContextRelease(v79);
            CGContextRestoreGState(v75);
            p_double height = &CGRectNull.size.height;
            p_double y = &CGRectNull.origin.y;
            p_CGSize size = &CGRectNull.size;
            if (v77)
            {
              uint64_t v83 = (const CGRect *)(v77 + 88);
              if (*(void *)(v77 + 592) == *(void *)(v77 + 600))
              {
                uint64_t v83 = &CGRectNull;
              }
              else
              {
                p_CGSize size = (CGSize *)(v77 + 104);
                p_double y = (CGFloat *)(v77 + 96);
                p_double height = (CGFloat *)(v77 + 112);
              }
            }
            else
            {
              uint64_t v83 = &CGRectNull;
            }
            double height = *p_height;
            double x = v83->origin.x;
            double v86 = *p_y;
            double width = p_size->width;
            CGDisplayListReset(v77);
            a1 = v329;
            if (x != INFINITY && v86 != INFINITY)
            {
              if (width < 0.0 || height < 0.0)
              {
                v352.origin.double x = x;
                v352.origin.double y = v86;
                v352.size.double width = width;
                v352.size.double height = height;
                CGRect v353 = CGRectStandardize(v352);
                if (v353.origin.y < y) {
                  double y = v353.origin.y;
                }
                v354.origin.double x = x;
                v354.origin.double y = v86;
                v354.size.double width = width;
                v354.size.double height = height;
                CGRect v355 = CGRectStandardize(v354);
                double v86 = v355.origin.y;
                double height = v355.size.height;
              }
              else if (v86 < y)
              {
                double y = v86;
              }
              if (v70 < v86 + height) {
                double v70 = v86 + height;
              }
            }
          }
          v69 += 8;
        }
        while (v69 != 2048);
        double v41 = v70 * 1.05;
        double v40 = y * -1.25;
        unint64_t v89 = *(void *)(a1 + 128);
        if (v89)
        {
          uint8x8_t v90 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
          v90.i16[0] = vaddlv_u8(v90);
          if (v90.u32[0] > 1uLL)
          {
            unint64_t v68 = v324;
            if (v324 >= v89) {
              unint64_t v68 = v324 % v89;
            }
          }
          else
          {
            unint64_t v68 = v324 & (v89 - 1);
          }
          CGFloat v91 = *(void **)(*(void *)(a1 + 120) + 8 * v68);
          if (v91)
          {
            for (j = (void *)*v91; j; j = (void *)*j)
            {
              unint64_t v93 = j[1];
              if (v93 == v324)
              {
                if (j[2] == a2) {
                  goto LABEL_181;
                }
              }
              else
              {
                if (v90.u32[0] > 1uLL)
                {
                  if (v93 >= v89) {
                    v93 %= v89;
                  }
                }
                else
                {
                  v93 &= v89 - 1;
                }
                if (v93 != v68) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v94 = (double *)operator new(0x28uLL);
        *uint64_t v94 = 0.0;
        *((void *)v94 + 1) = v324;
        *((void *)v94 + 2) = a2;
        float v95 = (float)(unint64_t)(*(void *)(a1 + 144) + 1);
        v94[3] = v41;
        v94[4] = v40;
        float v96 = *(float *)(a1 + 152);
        if ((((float)(v96 * (float)v89) >= v95) & ~(v89 == 0)) != 0)
        {
LABEL_171:
          uint64_t v113 = *(void *)(a1 + 120);
          double v114 = *(double ***)(v113 + 8 * v68);
          if (v114)
          {
            *(void *)uint64_t v94 = *v114;
          }
          else
          {
            *uint64_t v94 = *(double *)(a1 + 136);
            *(void *)(a1 + 136) = v94;
            *(void *)(v113 + 8 * v68) = a1 + 136;
            if (!*(void *)v94)
            {
LABEL_180:
              ++*(void *)(a1 + 144);
              goto LABEL_181;
            }
            unint64_t v115 = *(void *)(*(void *)v94 + 8);
            if ((v89 & (v89 - 1)) != 0)
            {
              if (v115 >= v89) {
                v115 %= v89;
              }
            }
            else
            {
              v115 &= v89 - 1;
            }
            double v114 = (double **)(*(void *)(a1 + 120) + 8 * v115);
          }
          *double v114 = v94;
          goto LABEL_180;
        }
        BOOL v97 = 1;
        if (v89 >= 3) {
          BOOL v97 = (v89 & (v89 - 1)) != 0;
        }
        unint64_t v98 = v97 | (2 * v89);
        unint64_t v99 = vcvtps_u32_f32(v95 / v96);
        if (v98 <= v99) {
          int8x8_t prime = (int8x8_t)v99;
        }
        else {
          int8x8_t prime = (int8x8_t)v98;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v89 = *(void *)(a1 + 128);
        }
        if (*(void *)&prime > v89)
        {
LABEL_137:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:fe180100]();
          }
          double v101 = operator new(8 * *(void *)&prime);
          CGFloat v102 = *(void **)(a1 + 120);
          *(void *)(a1 + 120) = v101;
          if (v102) {
            operator delete(v102);
          }
          uint64_t v103 = 0;
          *(int8x8_t *)(a1 + 128) = prime;
          do
            *(void *)(*(void *)(a1 + 120) + 8 * v103++) = 0;
          while (*(void *)&prime != v103);
          uint64_t v104 = *(void **)(a1 + 136);
          if (v104)
          {
            unint64_t v105 = v104[1];
            uint8x8_t v106 = (uint8x8_t)vcnt_s8(prime);
            v106.i16[0] = vaddlv_u8(v106);
            if (v106.u32[0] > 1uLL)
            {
              if (v105 >= *(void *)&prime) {
                v105 %= *(void *)&prime;
              }
            }
            else
            {
              v105 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 120) + 8 * v105) = a1 + 136;
            CGFloat v110 = (void *)*v104;
            if (*v104)
            {
              do
              {
                unint64_t v111 = v110[1];
                if (v106.u32[0] > 1uLL)
                {
                  if (v111 >= *(void *)&prime) {
                    v111 %= *(void *)&prime;
                  }
                }
                else
                {
                  v111 &= *(void *)&prime - 1;
                }
                if (v111 != v105)
                {
                  uint64_t v112 = *(void *)(a1 + 120);
                  if (!*(void *)(v112 + 8 * v111))
                  {
                    *(void *)(v112 + 8 * v111) = v104;
                    goto LABEL_162;
                  }
                  *uint64_t v104 = *v110;
                  *CGFloat v110 = **(void **)(*(void *)(a1 + 120) + 8 * v111);
                  **(void **)(*(void *)(a1 + 120) + 8 * v111) = v110;
                  CGFloat v110 = v104;
                }
                unint64_t v111 = v105;
LABEL_162:
                uint64_t v104 = v110;
                CGFloat v110 = (void *)*v110;
                unint64_t v105 = v111;
              }
              while (v110);
            }
          }
          unint64_t v89 = (unint64_t)prime;
          goto LABEL_166;
        }
        if (*(void *)&prime < v89)
        {
          unint64_t v107 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 144) / *(float *)(a1 + 152));
          if (v89 < 3 || (uint8x8_t v108 = (uint8x8_t)vcnt_s8((int8x8_t)v89), v108.i16[0] = vaddlv_u8(v108), v108.u32[0] > 1uLL))
          {
            unint64_t v107 = std::__next_prime(v107);
          }
          else
          {
            uint64_t v109 = 1 << -(char)__clz(v107 - 1);
            if (v107 >= 2) {
              unint64_t v107 = v109;
            }
          }
          if (*(void *)&prime <= v107) {
            int8x8_t prime = (int8x8_t)v107;
          }
          if (*(void *)&prime < v89)
          {
            if (!*(void *)&prime)
            {
              v311 = *(void **)(a1 + 120);
              *(void *)(a1 + 120) = 0;
              unint64_t v68 = v324;
              if (v311) {
                operator delete(v311);
              }
              unint64_t v89 = 0;
              *(void *)(a1 + 128) = 0;
              goto LABEL_167;
            }
            goto LABEL_137;
          }
          unint64_t v89 = *(void *)(a1 + 128);
        }
LABEL_166:
        unint64_t v68 = v324;
LABEL_167:
        if ((v89 & (v89 - 1)) != 0)
        {
          if (v68 >= v89) {
            v68 %= v89;
          }
        }
        else
        {
          v68 &= v89 - 1;
        }
        goto LABEL_171;
      }
    }
LABEL_181:
    if (v41 != 0.0 && v40 != 0.0)
    {
      __double2 v116 = __sincos_stret(rotation);
      uint64_t v117 = *(void *)a1;
      double v118 = (uint64_t *)(*(void *)a1 + 104);
      v318 = (void ***)a2;
      unint64_t v119 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
      unint64_t v120 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v119 >> 47) ^ v119);
      unint64_t v121 = 0x9DDFEA08EB382D69 * (v120 ^ (v120 >> 47));
      unint64_t v122 = *(void *)(*(void *)a1 + 112);
      v320 = Font;
      if (v122)
      {
        uint8x8_t v123 = (uint8x8_t)vcnt_s8((int8x8_t)v122);
        v123.i16[0] = vaddlv_u8(v123);
        unint64_t v124 = v123.u32[0];
        if (v123.u32[0] > 1uLL)
        {
          uint64_t v9 = v121;
          if (v121 >= v122) {
            uint64_t v9 = v121 % v122;
          }
        }
        else
        {
          uint64_t v9 = v121 & (v122 - 1);
        }
        double v126 = *(void ***)(*v118 + 8 * v9);
        if (v126)
        {
          double v127 = *v126;
          if (*v126)
          {
            CGSize v128 = (CGSize)scale;
            do
            {
              unint64_t v129 = v127[1];
              if (v129 == v121)
              {
                if ((void ***)v127[2] == v318) {
                  goto LABEL_226;
                }
              }
              else
              {
                if (v124 > 1)
                {
                  if (v129 >= v122) {
                    v129 %= v122;
                  }
                }
                else
                {
                  v129 &= v122 - 1;
                }
                if (v129 != v9) {
                  break;
                }
              }
              double v127 = (void *)*v127;
            }
            while (v127);
          }
        }
      }
      double v127 = operator new(0x20uLL);
      *double v127 = 0;
      v127[1] = v121;
      v127[2] = v318;
      v127[3] = 0;
      float v130 = (float)(unint64_t)(*(void *)(v117 + 128) + 1);
      float v131 = *(float *)(v117 + 136);
      if ((((float)(v131 * (float)v122) >= v130) & ~(v122 == 0)) == 0)
      {
        BOOL v132 = 1;
        if (v122 >= 3) {
          BOOL v132 = (v122 & (v122 - 1)) != 0;
        }
        unint64_t v133 = v132 | (2 * v122);
        unint64_t v134 = vcvtps_u32_f32(v130 / v131);
        if (v133 <= v134) {
          size_t v135 = v134;
        }
        else {
          size_t v135 = v133;
        }
        std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>((uint64_t)v118, v135);
        unint64_t v122 = *(void *)(v117 + 112);
        if ((v122 & (v122 - 1)) != 0)
        {
          if (v121 >= v122) {
            uint64_t v9 = v121 % v122;
          }
          else {
            uint64_t v9 = v121;
          }
        }
        else
        {
          uint64_t v9 = (v122 - 1) & v121;
        }
      }
      uint64_t v136 = *v118;
      v137 = *(void **)(*v118 + 8 * v9);
      if (v137)
      {
        *double v127 = *v137;
        CGSize v128 = (CGSize)scale;
      }
      else
      {
        *double v127 = *(void *)(v117 + 120);
        *(void *)(v117 + 120) = v127;
        *(void *)(v136 + 8 * v9) = v117 + 120;
        CGSize v128 = (CGSize)scale;
        if (!*v127)
        {
LABEL_225:
          ++*(void *)(v117 + 128);
LABEL_226:
          CGSize v331 = v128;
          double v139 = v128.height;
          uint64_t v140 = v127[3];
          FillColor = (void *)CGPDFGStateGetFillColor(*(void *)(a1 + 24));
          uint64_t v142 = FillColor;
          CGFloat v325 = v139;
          double v143 = (v331.width + v139) * 0.5;
          v346[0] = v140;
          *(double *)&v346[1] = v143;
          if (FillColor) {
            CFRetain(FillColor);
          }
          CFTypeRef cf = v142;
          uint64_t v144 = *(void *)(a1 + 80);
          if (*(void *)(a1 + 72) == v144) {
            uint64_t v145 = -1;
          }
          else {
            uint64_t v145 = *(void *)(v144 - 8);
          }
          double v146 = *(int64x2_t **)a1;
          double v147 = *(void **)(*(void *)a1 + 8);
          uint64_t v148 = v147[22];
          unint64_t v149 = v147[23];
          if (v148 == v149)
          {
            unint64_t v151 = v147[22];
            unint64_t v150 = v151;
          }
          else
          {
            unint64_t v150 = v147[23];
            unint64_t v151 = v147[22];
            while (*(void *)v151 != v140
                 || *(double *)(v151 + 8) != v143
                 || !CGColorEqualToColor(*(CGColorRef *)(v151 + 16), (CGColorRef)v142))
            {
              v151 += 24;
              if (v151 == v149)
              {
                unint64_t v151 = v149;
                break;
              }
            }
          }
          if (v151 == v150)
          {
            unint64_t v153 = v147[24];
            if (v150 >= v153)
            {
              unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - v148) >> 3) + 1;
              if (v155 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
              }
              unint64_t v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - v148) >> 3);
              if (2 * v156 > v155) {
                unint64_t v155 = 2 * v156;
              }
              if (v156 >= 0x555555555555555) {
                unint64_t v157 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v157 = v155;
              }
              *(void *)&transform.tdouble x = v147 + 24;
              if (v157)
              {
                double v159 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v157);
              }
              else
              {
                double v159 = 0;
                uint64_t v158 = 0;
              }
              *(void *)&CGFloat v160 = &v159[24 * v158];
              transform.double d = v160;
              uint64_t v161 = std::construct_at[abi:fe180100]<PageLayout::CharacterStyle,PageLayout::CharacterStyle const&,PageLayout::CharacterStyle*>((uint64_t)&v159[8 * ((uint64_t)(v149 - v148) >> 3)], (uint64_t)v346);
              *(void *)&CGFloat v154 = v161 + 24;
              *(void *)&transform.double c = v161 + 24;
              uint64_t v163 = v147[22];
              unint64_t v162 = v147[23];
              if (v162 == v163)
              {
                int64x2_t v164 = vdupq_n_s64(v162);
              }
              else
              {
                do
                {
                  *(_OWORD *)(v161 - 24) = *(_OWORD *)(v162 - 24);
                  *(void *)(v161 - 8) = *(void *)(v162 - 8);
                  v161 -= 24;
                  *(void *)(v162 - 8) = 0;
                  v162 -= 24;
                }
                while (v162 != v163);
                int64x2_t v164 = *((int64x2_t *)v147 + 11);
                CGFloat v154 = transform.c;
                CGFloat v160 = transform.d;
              }
              v147[22] = v161;
              *((CGFloat *)v147 + 23) = v154;
              *(int64x2_t *)&transform.double b = v164;
              CGFloat v165 = *((double *)v147 + 24);
              *((CGFloat *)v147 + 24) = v160;
              transform.double d = v165;
              *(void *)&transform.double a = v164.i64[0];
              std::__split_buffer<PageLayout::CharacterStyle>::~__split_buffer((uint64_t)&transform);
            }
            else
            {
              std::construct_at[abi:fe180100]<PageLayout::CharacterStyle,PageLayout::CharacterStyle const&,PageLayout::CharacterStyle*>(v150, (uint64_t)v346);
              *(void *)&CGFloat v154 = v150 + 24;
            }
            double v152 = rotation;
            *((CGFloat *)v147 + 23) = v154;
            unint64_t v151 = *(void *)&v154 - 24;
            double v146 = *(int64x2_t **)a1;
          }
          else
          {
            double v152 = rotation;
          }
          double v166 = v116.__cosval * v333 - v334 * v116.__sinval + 0.0;
          double v167 = (v335 * v116.__cosval - v336 * v116.__sinval) * 0.0
               + (v337 * v116.__cosval - v338 * v116.__sinval) * 0.0;
          CGFloat v168 = v331.width;
          double v312 = v40;
          double v313 = v41;
          double v169 = vmuld_lane_f64(v41, (float64x2_t)v331, 1);
          double v170 = vmuld_lane_f64(v40, (float64x2_t)v331, 1);
          double v171 = v166 + v167;
          double v172 = v166 + v167 - v170;
          double v173 = v169 + v170;
          uint64_t v174 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v151 - v147[22]) >> 3);
          unint64_t v175 = v146[10].u64[0];
          unint64_t v176 = v146[9].u64[1];
          if (v176 >= v175)
          {
            uint64_t v181 = v146[9].i64[0];
            uint64_t v182 = 0x34F72C234F72C235 * ((uint64_t)(v176 - v181) >> 3);
            if ((unint64_t)(v182 + 1) > 0x11A7B9611A7B961) {
              std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
            }
            unint64_t v183 = 0x34F72C234F72C235 * ((uint64_t)(v175 - v181) >> 3);
            uint64_t v184 = 2 * v183;
            if (2 * v183 <= v182 + 1) {
              uint64_t v184 = v182 + 1;
            }
            if (v183 >= 0x8D3DCB08D3DCB0) {
              unint64_t v185 = 0x11A7B9611A7B961;
            }
            else {
              unint64_t v185 = v184;
            }
            *(void *)&transform.tdouble x = v146[10].i64;
            if (v185)
            {
              if (v185 > 0x11A7B9611A7B961) {
                std::__throw_bad_array_new_length[abi:fe180100]();
              }
              v186 = (char *)operator new(232 * v185);
            }
            else
            {
              v186 = 0;
            }
            *(void *)&transform.double a = v186;
            *(void *)&transform.double b = &v186[232 * v182];
            transform.double c = transform.b;
            *(void *)&transform.double d = &v186[232 * v185];
            v177 = v320;
            v351.double width = v331.width;
            v351.double height = v325;
            PageLayoutFactory::TextChunk::TextChunk(*(PageLayoutFactory::TextChunk **)&transform.b, a9, v172, v173, v320, v152, v171, v351, v145, *(unsigned char *)(a1 + 96), v174);
            CGFloat v187 = transform.b;
            *(void *)&CGFloat v180 = *(void *)&transform.c + 232;
            *(void *)&transform.c += 232;
            uint64_t v189 = v146[9].i64[0];
            unint64_t v188 = v146[9].u64[1];
            v179 = glyphs;
            if (v188 == v189)
            {
              int64x2_t v196 = vdupq_n_s64(v188);
            }
            else
            {
              do
              {
                *(void *)(*(void *)&v187 - 232) = 0;
                *(void *)(*(void *)&v187 - 224) = 0;
                *(void *)&v187 -= 232;
                *(void *)(*(void *)&v187 + 16) = 0;
                long long v190 = *(_OWORD *)(v188 - 232);
                v188 -= 232;
                **(_OWORD **)&CGFloat v187 = v190;
                *(void *)(*(void *)&v187 + 16) = *(void *)(v188 + 16);
                *(void *)unint64_t v188 = 0;
                *(void *)(v188 + 8) = 0;
                *(void *)(v188 + 16) = 0;
                *(void *)(*(void *)&v187 + 24) = 0;
                *(void *)(*(void *)&v187 + 32) = 0;
                *(void *)(*(void *)&v187 + 40) = 0;
                *(_OWORD *)(*(void *)&v187 + 24) = *(_OWORD *)(v188 + 24);
                *(void *)(*(void *)&v187 + 40) = *(void *)(v188 + 40);
                *(void *)(v188 + 24) = 0;
                *(void *)(v188 + 32) = 0;
                *(void *)(v188 + 40) = 0;
                *(void *)(*(void *)&v187 + 48) = 0;
                *(void *)(*(void *)&v187 + 56) = 0;
                *(void *)(*(void *)&v187 + 64) = 0;
                *(_OWORD *)(*(void *)&v187 + 48) = *(_OWORD *)(v188 + 48);
                *(void *)(*(void *)&v187 + 64) = *(void *)(v188 + 64);
                *(void *)(v188 + 48) = 0;
                *(void *)(v188 + 56) = 0;
                *(void *)(v188 + 64) = 0;
                *(void *)(*(void *)&v187 + 72) = 0;
                *(void *)(*(void *)&v187 + 80) = 0;
                *(void *)(*(void *)&v187 + 88) = 0;
                *(_OWORD *)(*(void *)&v187 + 72) = *(_OWORD *)(v188 + 72);
                *(void *)(*(void *)&v187 + 88) = *(void *)(v188 + 88);
                *(void *)(v188 + 72) = 0;
                *(void *)(v188 + 80) = 0;
                *(void *)(v188 + 88) = 0;
                *(void *)(*(void *)&v187 + 96) = 0;
                *(void *)(*(void *)&v187 + 104) = 0;
                *(void *)(*(void *)&v187 + 112) = 0;
                *(_OWORD *)(*(void *)&v187 + 96) = *(_OWORD *)(v188 + 96);
                *(void *)(*(void *)&v187 + 112) = *(void *)(v188 + 112);
                *(void *)(v188 + 104) = 0;
                *(void *)(v188 + 112) = 0;
                *(void *)(v188 + 96) = 0;
                long long v191 = *(_OWORD *)(v188 + 184);
                long long v192 = *(_OWORD *)(v188 + 200);
                long long v193 = *(_OWORD *)(v188 + 216);
                *(_OWORD *)(*(void *)&v187 + 168) = *(_OWORD *)(v188 + 168);
                *(_OWORD *)(*(void *)&v187 + 216) = v193;
                *(_OWORD *)(*(void *)&v187 + 200) = v192;
                *(_OWORD *)(*(void *)&v187 + 184) = v191;
                long long v194 = *(_OWORD *)(v188 + 136);
                long long v195 = *(_OWORD *)(v188 + 152);
                *(_OWORD *)(*(void *)&v187 + 120) = *(_OWORD *)(v188 + 120);
                *(_OWORD *)(*(void *)&v187 + 152) = v195;
                *(_OWORD *)(*(void *)&v187 + 136) = v194;
              }
              while (v188 != v189);
              int64x2_t v196 = v146[9];
              CGFloat v180 = transform.c;
            }
            *(CGFloat *)v146[9].i64 = v187;
            *(CGFloat *)&v146[9].i64[1] = v180;
            *(int64x2_t *)&transform.double b = v196;
            CGFloat v197 = *(double *)v146[10].i64;
            v146[10].i64[0] = *(void *)&transform.d;
            transform.double d = v197;
            *(void *)&transform.double a = v196.i64[0];
            std::__split_buffer<PageLayoutFactory::TextChunk>::~__split_buffer((uint64_t)&transform);
          }
          else
          {
            v177 = v320;
            CGFloat v178 = v325;
            PageLayoutFactory::TextChunk::TextChunk((PageLayoutFactory::TextChunk *)v146[9].i64[1], a9, v166 + v167 - v170, v169 + v170, v320, v152, v171, *(CGSize *)&v168, v145, *(unsigned char *)(a1 + 96), v174);
            v179 = glyphs;
            *(void *)&CGFloat v180 = v176 + 232;
            v146[9].i64[1] = v176 + 232;
          }
          *(CGFloat *)&v146[9].i64[1] = v180;
          uint64_t v198 = *(void *)(*(void *)a1 + 152);
          if (*(void *)(*(void *)a1 + 144) == v198) {
            goto LABEL_523;
          }
          v344 = 0;
          uint64_t v345 = 0;
          v343 = &v344;
          v199 = v179;
          uint64_t v200 = a9;
          BOOL GlyphBBoxes = CGFontGetGlyphBBoxes(v177, v199, a9, *(CGRect **)(v198 - 208));
          Advances = CGPDFFontGetAdvances(v318);
          uint64_t v201 = 0;
          unint64_t v202 = 0;
          float64x2_t v319 = (float64x2_t)vdupq_lane_s64(v323, 0);
          float64x2_t v326 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v317, 0);
          if (a9 <= 1) {
            uint64_t v200 = 1;
          }
          uint64_t v203 = (double *)(a4 + 8);
          do
          {
            uint64_t v204 = *(void *)(v198 - 208);
            if (v202 >= (*(void *)(v198 - 200) - v204) >> 5) {
              goto LABEL_523;
            }
            uint64_t v205 = *(void *)(v198 - 184);
            if (v202 >= (*(void *)(v198 - 176) - v205) >> 5) {
              goto LABEL_523;
            }
            if (GlyphBBoxes)
            {
              double v206 = (float64x2_t *)(v204 + v201);
              float64x2_t v207 = vdivq_f64(*(float64x2_t *)(v204 + v201 + 16), v326);
              *double v206 = vdivq_f64(*(float64x2_t *)(v204 + v201), v326);
              v206[1] = v207;
            }
            else
            {
              uint64_t v208 = *(void *)(a5 + 8 * v202);
              uint64_t v209 = v204 + v201;
              *(void *)uint64_t v209 = 0;
              *(double *)(v209 + 8) = -v312;
              *(void *)(v209 + 16) = v208;
              *(double *)(v209 + 24) = v313 + v312;
            }
            id v210 = (CGFloat *)(v204 + v201);
            v211 = (_OWORD *)(v205 + v201);
            long long v212 = *(_OWORD *)(v204 + v201 + 16);
            _OWORD *v211 = *(_OWORD *)(v204 + v201);
            v211[1] = v212;
            uint64_t v213 = (CGFloat *)(v204 + v201);
            double v214 = *(double *)(v204 + v201);
            *(void *)&long long v212 = *(void *)(v204 + v201 + 8);
            uint64_t v215 = *(void *)(v204 + v201 + 16);
            uint64_t v216 = *(void *)(v204 + v201 + 24);
            double v217 = *(v203 - 1);
            double v218 = *v203;
            value.double a = v338;
            value.double b = v337;
            value.double c = v336;
            value.double d = v335;
            value.tdouble x = v334;
            value.tdouble y = v333;
            double v219 = v214 + v217;
            *(double *)&long long v212 = *(double *)&v212 + v218;
            CGRect v356 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v212 - 8), &value);
            if (CGRectIntersectsRect(v356, *(CGRect *)(a1 + 40)))
            {
              std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v343, v202, v202);
              uint64_t v220 = v205 + v201;
              *(float64x2_t *)(v205 + v201) = vaddq_f64(*(float64x2_t *)(v203 - 1), *(float64x2_t *)(v205 + v201));
              v221.f64[0] = *(v203 - 1);
              if (v327)
              {
                CGFloat v222 = (void *)(v204 + v201);
                *CGFloat v222 = *(void *)&v221.f64[0];
                double v223 = *v203 + v213[1];
                v213[1] = v223;
                uint64_t v224 = *(void *)(a5 + 8 * v202);
                v222[2] = v224;
                double v225 = v213[3];
              }
              else
              {
                double v226 = (float64x2_t *)(v204 + v201);
                v226->f64[0] = v221.f64[0] + v226->f64[0];
                v213[1] = *v203;
                double v225 = *(double *)&v323
                     * CGPDFAdvancesGetVerticalAdvance((uint64_t)Advances, *(unsigned __int16 *)(a7 + 2 * v202), (uint64_t)&transform);
                v226[1].f64[1] = v225;
                float64x2_t v221 = vmlaq_f64(*v226, *(float64x2_t *)&transform.a, v319);
                *double v226 = v221;
                double v223 = v221.f64[1];
                uint64_t v224 = *((void *)v213 + 2);
              }
              v341.double a = v337 * v116.__sinval + v338 * v116.__cosval;
              v341.double b = v337 * v116.__cosval - v338 * v116.__sinval;
              v341.double c = v335 * v116.__sinval + v336 * v116.__cosval;
              v341.double d = v335 * v116.__cosval - v336 * v116.__sinval;
              v341.tdouble x = v116.__sinval * v333 + v334 * v116.__cosval + 0.0;
              v341.tdouble y = v116.__cosval * v333 - v334 * v116.__sinval + 0.0;
              CGRect v357 = CGRectApplyAffineTransform(*(CGRect *)v221.f64, &v341);
              *id v210 = v357.origin.x;
              v213[1] = v357.origin.y;
              v213[2] = v357.size.width;
              v213[3] = v357.size.height;
              double v227 = (CGFloat *)(v205 + v201);
              v357.origin.double x = *(CGFloat *)(v205 + v201);
              v357.origin.double y = *(CGFloat *)(v220 + 8);
              v357.size.double width = *(CGFloat *)(v205 + v201 + 16);
              v357.size.double height = *(CGFloat *)(v205 + v201 + 24);
              v340.double a = v337 * v116.__sinval + v338 * v116.__cosval;
              v340.double b = v337 * v116.__cosval - v338 * v116.__sinval;
              v340.double c = v335 * v116.__sinval + v336 * v116.__cosval;
              v340.double d = v335 * v116.__cosval - v336 * v116.__sinval;
              v340.tdouble x = v116.__sinval * v333 + v334 * v116.__cosval + 0.0;
              v340.tdouble y = v116.__cosval * v333 - v334 * v116.__sinval + 0.0;
              CGRect v358 = CGRectApplyAffineTransform(v357, &v340);
              *double v227 = v358.origin.x;
              *(CGFloat *)(v220 + 8) = v358.origin.y;
              v227[2] = v358.size.width;
              v227[3] = v358.size.height;
              v359.origin.double x = *v210;
              v359.origin.double y = v213[1];
              v359.size.double width = v213[2];
              v359.size.double height = v213[3];
              *(CGRect *)(v198 - 48) = CGRectUnion(*(CGRect *)(v198 - 48), v359);
              a1 = v329;
            }
            ++v202;
            v201 += 32;
            v203 += 2;
          }
          while (v200 != v202);
          if (v345)
          {
            v339[0] = a1;
            v339[1] = v198 - 232;
            if (*(unsigned char *)(a1 + 96))
            {
              v228 = *(void **)(a1 + 104);
              if (v228)
              {
                unint64_t v229 = [v228 length];
                std::vector<unsigned short>::resize((char **)(v198 - 136), v229);
                [*(id *)(a1 + 104) getCharacters:*(void *)(v198 - 136)];
                uint64_t v230 = *(unint64_t **)(v198 - 160);
                v231 = *(unint64_t **)(v198 - 152);
                if (v231 == v230) {
                  goto LABEL_523;
                }
                *uint64_t v230 = v229;
                v232 = v230 + 1;
                uint64_t v233 = (char *)v231 - v232;
                if (v233 >= 1) {
                  bzero(v232, 8 * (((unint64_t)v233 >> 3) - ((unint64_t)v233 > 7)) + 8);
                }
                long long v234 = *(void **)(a1 + 104);
                *(void *)(a1 + 104) = 0;
              }
              *(unsigned char *)(a1 + 96) = 0;
              goto LABEL_298;
            }
            Encoding = CGPDFFontGetEncoding((atomic_ullong *)v318);
            if (Encoding)
            {
              CGRect v271 = v343;
              if (v343 != &v344)
              {
                uint64_t v272 = (uint64_t)Encoding;
                do
                {
                  unint64_t v273 = v271[4];
                  transform.double a = 0.0;
                  UnicodesForIndedouble x = (_WORD *)CGPDFEncodingGetUnicodesForIndex(v272, *(unsigned __int8 *)(a8 + v273), &transform);
                  PageLayoutFactory::ScannerContext::drawGlyphs(CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)::{lambda(unsigned short const*,unsigned long,unsigned long)#1}::operator()(v339, UnicodesForIndex, v273, *(uint64_t *)&transform.a);
                  CGRect v275 = (void *)v271[1];
                  if (v275)
                  {
                    do
                    {
                      CGRect v276 = (void **)v275;
                      CGRect v275 = (void *)*v275;
                    }
                    while (v275);
                  }
                  else
                  {
                    do
                    {
                      CGRect v276 = (void **)v271[2];
                      BOOL v42 = *v276 == v271;
                      CGRect v271 = v276;
                    }
                    while (!v42);
                  }
                  CGRect v271 = v276;
                }
                while (v276 != &v344);
              }
LABEL_298:
              memmove(*(void **)(v198 - 232), glyphs, 2 * a9);
              if (v345 == (uint64_t)(*(void *)(v198 - 224) - *(void *)(v198 - 232)) >> 1) {
                goto LABEL_506;
              }
              v235 = v343;
              memset(&transform, 0, 32);
              LODWORD(transform.tx) = 1065353216;
              if (v343 != &v344)
              {
                unint64_t v236 = 0;
                uint64_t v237 = 0;
                while (1)
                {
                  unint64_t v238 = v235[4];
                  if (v236)
                  {
                    uint8x8_t v239 = (uint8x8_t)vcnt_s8((int8x8_t)v236);
                    v239.i16[0] = vaddlv_u8(v239);
                    if (v239.u32[0] > 1uLL)
                    {
                      uint64_t v203 = (double *)v235[4];
                      if (v238 >= v236) {
                        uint64_t v203 = (double *)(v238 % v236);
                      }
                    }
                    else
                    {
                      uint64_t v203 = (double *)((v236 - 1) & v238);
                    }
                    v240 = *(void **)(*(void *)&transform.a + 8 * (void)v203);
                    if (v240)
                    {
                      for (k = (void *)*v240; k; k = (void *)*k)
                      {
                        unint64_t v242 = k[1];
                        if (v242 == v238)
                        {
                          if (k[2] == v238) {
                            goto LABEL_373;
                          }
                        }
                        else
                        {
                          if (v239.u32[0] > 1uLL)
                          {
                            if (v242 >= v236) {
                              v242 %= v236;
                            }
                          }
                          else
                          {
                            v242 &= v236 - 1;
                          }
                          if ((double *)v242 != v203) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  v243 = operator new(0x18uLL);
                  void *v243 = 0;
                  v243[1] = v238;
                  v243[2] = v235[4];
                  float v244 = (float)(unint64_t)(v237 + 1);
                  if (!v236 || (float)(*(float *)&transform.tx * (float)v236) < v244) {
                    break;
                  }
LABEL_363:
                  CGFloat v260 = transform.a;
                  unint64_t v261 = *(void **)(*(void *)&transform.a + 8 * (void)v203);
                  if (v261)
                  {
                    void *v243 = *v261;
                  }
                  else
                  {
                    void *v243 = *(void *)&transform.c;
                    *(void *)&transform.double c = v243;
                    *(void *)(*(void *)&v260 + 8 * (void)v203) = &transform.c;
                    if (!*v243) {
                      goto LABEL_372;
                    }
                    unint64_t v262 = *(void *)(*v243 + 8);
                    if ((v236 & (v236 - 1)) != 0)
                    {
                      if (v262 >= v236) {
                        v262 %= v236;
                      }
                    }
                    else
                    {
                      v262 &= v236 - 1;
                    }
                    unint64_t v261 = (void *)(*(void *)&transform.a + 8 * v262);
                  }
                  *unint64_t v261 = v243;
LABEL_372:
                  uint64_t v237 = ++*(void *)&transform.d;
LABEL_373:
                  long long v263 = (void *)v235[1];
                  if (v263)
                  {
                    do
                    {
                      unint64_t v264 = (void **)v263;
                      long long v263 = (void *)*v263;
                    }
                    while (v263);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v264 = (void **)v235[2];
                      BOOL v42 = *v264 == v235;
                      v235 = v264;
                    }
                    while (!v42);
                  }
                  v235 = v264;
                  if (v264 == &v344) {
                    goto LABEL_389;
                  }
                }
                BOOL v245 = (v236 & (v236 - 1)) != 0;
                if (v236 < 3) {
                  BOOL v245 = 1;
                }
                unint64_t v246 = v245 | (2 * v236);
                unint64_t v247 = vcvtps_u32_f32(v244 / *(float *)&transform.tx);
                if (v246 <= v247) {
                  size_t v248 = v247;
                }
                else {
                  size_t v248 = v246;
                }
                if (v248 == 1)
                {
                  size_t v248 = 2;
                }
                else if ((v248 & (v248 - 1)) != 0)
                {
                  size_t v248 = std::__next_prime(v248);
                  unint64_t v236 = *(void *)&transform.b;
                }
                if (v248 > v236) {
                  goto LABEL_329;
                }
                if (v248 < v236)
                {
                  unint64_t v255 = vcvtps_u32_f32((float)*(unint64_t *)&transform.d / *(float *)&transform.tx);
                  if (v236 < 3
                    || (uint8x8_t v256 = (uint8x8_t)vcnt_s8((int8x8_t)v236), v256.i16[0] = vaddlv_u8(v256), v256.u32[0] > 1uLL))
                  {
                    unint64_t v255 = std::__next_prime(v255);
                  }
                  else
                  {
                    uint64_t v257 = 1 << -(char)__clz(v255 - 1);
                    if (v255 >= 2) {
                      unint64_t v255 = v257;
                    }
                  }
                  if (v248 <= v255) {
                    size_t v248 = v255;
                  }
                  if (v248 >= v236)
                  {
                    unint64_t v236 = *(void *)&transform.b;
                  }
                  else
                  {
                    if (v248)
                    {
LABEL_329:
                      if (v248 >> 61) {
                        std::__throw_bad_array_new_length[abi:fe180100]();
                      }
                      CGFloat v249 = operator new(8 * v248);
                      CGFloat v250 = transform.a;
                      *(void *)&transform.double a = v249;
                      if (v250 != 0.0) {
                        operator delete(*(void **)&v250);
                      }
                      uint64_t v251 = 0;
                      *(void *)&transform.double b = v248;
                      do
                        *(void *)(*(void *)&transform.a + 8 * v251++) = 0;
                      while (v248 != v251);
                      CGFloat v252 = transform.c;
                      if (*(void *)&transform.c)
                      {
                        size_t v253 = *(void *)(*(void *)&transform.c + 8);
                        uint8x8_t v254 = (uint8x8_t)vcnt_s8((int8x8_t)v248);
                        v254.i16[0] = vaddlv_u8(v254);
                        if (v254.u32[0] > 1uLL)
                        {
                          if (v253 >= v248) {
                            v253 %= v248;
                          }
                        }
                        else
                        {
                          v253 &= v248 - 1;
                        }
                        *(void *)(*(void *)&transform.a + 8 * v253) = &transform.c;
                        double v258 = **(double **)&v252;
                        if (**(void **)&v252)
                        {
                          do
                          {
                            size_t v259 = *(void *)(*(void *)&v258 + 8);
                            if (v254.u32[0] > 1uLL)
                            {
                              if (v259 >= v248) {
                                v259 %= v248;
                              }
                            }
                            else
                            {
                              v259 &= v248 - 1;
                            }
                            if (v259 != v253)
                            {
                              if (!*(void *)(*(void *)&transform.a + 8 * v259))
                              {
                                *(CGFloat *)(*(void *)&transform.a + 8 * v259) = v252;
                                goto LABEL_354;
                              }
                              **(void **)&CGFloat v252 = **(void **)&v258;
                              **(void **)&double v258 = **(void **)(*(void *)&transform.a + 8 * v259);
                              **(double **)(*(void *)&transform.a + 8 * v259) = v258;
                              double v258 = v252;
                            }
                            size_t v259 = v253;
LABEL_354:
                            CGFloat v252 = v258;
                            double v258 = **(double **)&v258;
                            size_t v253 = v259;
                          }
                          while (v258 != 0.0);
                        }
                      }
                      unint64_t v236 = v248;
                      goto LABEL_358;
                    }
                    CGFloat v265 = transform.a;
                    transform.double a = 0.0;
                    if (v265 != 0.0) {
                      operator delete(*(void **)&v265);
                    }
                    unint64_t v236 = 0;
                    transform.double b = 0.0;
                  }
                }
LABEL_358:
                if ((v236 & (v236 - 1)) != 0)
                {
                  if (v238 >= v236) {
                    uint64_t v203 = (double *)(v238 % v236);
                  }
                  else {
                    uint64_t v203 = (double *)v238;
                  }
                }
                else
                {
                  uint64_t v203 = (double *)((v236 - 1) & v238);
                }
                goto LABEL_363;
              }
LABEL_389:
              v267 = *(_WORD **)(v198 - 232);
              v266 = *(_WORD **)(v198 - 224);
              if (v267 == v266 || !*(void *)&transform.c)
              {
                CGRect v268 = *(_WORD **)(v198 - 232);
LABEL_409:
                if (v268 != v266)
                {
                  CGRect v277 = v268 + 1;
                  if (v268 + 1 != v266)
                  {
                    CGFloat v278 = transform.c;
                    do
                    {
                      if (v278 != 0.0)
                      {
                        CGFloat v279 = v278;
                        while (*(void *)(*(void *)&v279 + 16) != v277 - v267)
                        {
                          CGFloat v279 = **(double **)&v279;
                          if (v279 == 0.0) {
                            goto LABEL_418;
                          }
                        }
                        *v268++ = *v277;
                      }
LABEL_418:
                      ++v277;
                    }
                    while (v277 != v266);
                  }
                  if (v266 < v268) {
                    goto LABEL_523;
                  }
                  if (v268 != v266) {
                    *(void *)(v198 - 224) = v268;
                  }
                }
              }
              else
              {
                CGRect v268 = *(_WORD **)(v198 - 232);
                do
                {
                  CGFloat v269 = transform.c;
                  while (*(void *)(*(void *)&v269 + 16) != v268 - v267)
                  {
                    CGFloat v269 = **(double **)&v269;
                    if (v269 == 0.0) {
                      goto LABEL_409;
                    }
                  }
                  ++v268;
                }
                while (v268 != v266);
              }
              CGRect v281 = *(_OWORD **)(v198 - 208);
              CGRect v280 = *(_OWORD **)(v198 - 200);
              if (v281 == v280 || !*(void *)&transform.c)
              {
LABEL_431:
                if (v281 != v280)
                {
                  v284 = v281 + 2;
                  if (v281 + 2 != v280)
                  {
                    do
                    {
                      CGFloat v285 = transform.c;
                      if (*(void *)&transform.c)
                      {
                        while (*(void *)(*(void *)&v285 + 16) != ((uint64_t)v284 - *(void *)(v198 - 208)) >> 5)
                        {
                          CGFloat v285 = **(double **)&v285;
                          if (v285 == 0.0) {
                            goto LABEL_438;
                          }
                        }
                        long long v286 = v284[1];
                        *CGRect v281 = *v284;
                        v281[1] = v286;
                        v281 += 2;
                      }
LABEL_438:
                      v284 += 2;
                    }
                    while (v284 != v280);
                    CGRect v280 = *(_OWORD **)(v198 - 200);
                  }
                  if (v280 < v281) {
                    goto LABEL_523;
                  }
                  if (v281 != v280) {
                    *(void *)(v198 - 200) = v281;
                  }
                }
              }
              else
              {
                CGRect v282 = *(_OWORD **)(v198 - 208);
                do
                {
                  CGFloat v283 = transform.c;
                  while (*(void *)(*(void *)&v283 + 16) != ((char *)v282 - (char *)v281) >> 5)
                  {
                    CGFloat v283 = **(double **)&v283;
                    if (v283 == 0.0)
                    {
                      CGRect v281 = v282;
                      goto LABEL_431;
                    }
                  }
                  v282 += 2;
                }
                while (v282 != v280);
              }
              v288 = *(_OWORD **)(v198 - 184);
              v287 = *(_OWORD **)(v198 - 176);
              if (v288 == v287 || !*(void *)&transform.c)
              {
LABEL_452:
                if (v288 != v287)
                {
                  v291 = v288 + 2;
                  if (v288 + 2 != v287)
                  {
                    do
                    {
                      CGFloat v292 = transform.c;
                      if (*(void *)&transform.c)
                      {
                        while (*(void *)(*(void *)&v292 + 16) != ((uint64_t)v291 - *(void *)(v198 - 184)) >> 5)
                        {
                          CGFloat v292 = **(double **)&v292;
                          if (v292 == 0.0) {
                            goto LABEL_459;
                          }
                        }
                        long long v293 = v291[1];
                        _OWORD *v288 = *v291;
                        v288[1] = v293;
                        v288 += 2;
                      }
LABEL_459:
                      v291 += 2;
                    }
                    while (v291 != v287);
                    v287 = *(_OWORD **)(v198 - 176);
                  }
                  if (v287 < v288) {
                    goto LABEL_523;
                  }
                  if (v288 != v287) {
                    *(void *)(v198 - 176) = v288;
                  }
                }
              }
              else
              {
                v289 = *(_OWORD **)(v198 - 184);
                do
                {
                  CGFloat v290 = transform.c;
                  while (*(void *)(*(void *)&v290 + 16) != ((char *)v289 - (char *)v288) >> 5)
                  {
                    CGFloat v290 = **(double **)&v290;
                    if (v290 == 0.0)
                    {
                      v288 = v289;
                      goto LABEL_452;
                    }
                  }
                  v289 += 2;
                }
                while (v289 != v287);
              }
              v295 = *(void **)(v198 - 160);
              v294 = *(void **)(v198 - 152);
              if (v295 != v294 && *(void *)&transform.c)
              {
                v296 = *(void **)(v198 - 160);
                do
                {
                  CGFloat v297 = transform.c;
                  while (*(void *)(*(void *)&v297 + 16) != v296 - v295)
                  {
                    CGFloat v297 = **(double **)&v297;
                    if (v297 == 0.0) {
                      goto LABEL_474;
                    }
                  }
                  ++v296;
                }
                while (v296 != v294);
                goto LABEL_487;
              }
              v296 = *(void **)(v198 - 160);
LABEL_474:
              if (v296 == v294)
              {
LABEL_487:
                std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)&transform);
                goto LABEL_506;
              }
              v298 = v296 + 1;
              if (v296 + 1 != v294)
              {
                CGFloat v299 = transform.c;
                do
                {
                  if (v299 != 0.0)
                  {
                    CGFloat v300 = v299;
                    while (*(void *)(*(void *)&v300 + 16) != v298 - v295)
                    {
                      CGFloat v300 = **(double **)&v300;
                      if (v300 == 0.0) {
                        goto LABEL_483;
                      }
                    }
                    *v296++ = *v298;
                  }
LABEL_483:
                  ++v298;
                }
                while (v298 != v294);
              }
              if (v294 >= v296)
              {
                if (v296 != v294) {
                  *(void *)(v198 - 152) = v296;
                }
                goto LABEL_487;
              }
LABEL_523:
              __break(1u);
              return;
            }
            if (a7)
            {
              ROSUnicodeunint64_t CMap = CGPDFFontGetToUnicodeCMap((uint64_t)v318);
              if (!ROSUnicodeCMap) {
                ROSUnicodeunint64_t CMap = (uint64_t)CGPDFFontGetROSUnicodeCMap((char *)v318);
              }
              v302 = v343;
              if (v343 != &v344)
              {
                do
                {
                  unint64_t v303 = v302[4];
                  if (ROSUnicodeCMap
                    && cmap_vtable
                    && (v304 = *(uint64_t (**)(void, void, CGAffineTransform *))(cmap_vtable + 64)) != 0)
                  {
                    uint64_t v305 = v304(*(void *)(ROSUnicodeCMap + 16), *(unsigned __int16 *)(a7 + 2 * v303), &transform);
                  }
                  else
                  {
                    uint64_t v305 = 0;
                  }
                  PageLayoutFactory::ScannerContext::drawGlyphs(CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)::{lambda(unsigned short const*,unsigned long,unsigned long)#1}::operator()(v339, &transform, v303, v305);
                  v306 = (void *)v302[1];
                  if (v306)
                  {
                    do
                    {
                      v307 = (void **)v306;
                      v306 = (void *)*v306;
                    }
                    while (v306);
                  }
                  else
                  {
                    do
                    {
                      v307 = (void **)v302[2];
                      BOOL v42 = *v307 == v302;
                      v302 = v307;
                    }
                    while (!v42);
                  }
                  v302 = v307;
                }
                while (v307 != &v344);
              }
              goto LABEL_298;
            }
          }
          v308 = *(int64x2_t **)a1;
          uint64_t v309 = *(void *)(*(void *)a1 + 152);
          if (*(void *)(*(void *)a1 + 144) != v309)
          {
            uint64_t v310 = v309 - 232;
            std::__destroy_at[abi:fe180100]<PageLayoutFactory::TextChunk,0>(v309 - 232);
            v308[9].i64[1] = v310;
LABEL_506:
            std::__tree<unsigned long>::destroy(v344);
            if (cf) {
              CFRelease(cf);
            }
            return;
          }
          goto LABEL_523;
        }
        unint64_t v138 = *(void *)(*v127 + 8);
        if ((v122 & (v122 - 1)) != 0)
        {
          if (v138 >= v122) {
            v138 %= v122;
          }
        }
        else
        {
          v138 &= v122 - 1;
        }
        v137 = (void *)(*v118 + 8 * v138);
      }
      void *v137 = v127;
      goto LABEL_225;
    }
    if (a2) {
      double v125 = *(const char **)(a2 + 32);
    }
    else {
      double v125 = 0;
    }
    pdf_error("Failed to determine ascent and decent for font: %s\n", v125);
  }
}

void sub_184D2FE1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

PageLayoutFactory::TextChunk *PageLayoutFactory::TextChunk::TextChunk(PageLayoutFactory::TextChunk *this, unint64_t a2, double a3, double a4, CGFont *a5, double a6, double a7, CGSize a8, uint64_t a9, char a10, uint64_t a11)
{
  CGFloat height = a8.height;
  CGFloat width = a8.width;
  uint64_t v23 = std::vector<unsigned short>::vector(this, a2);
  std::vector<CGRect>::vector(v23 + 3, a2);
  std::vector<CGRect>::vector((void *)this + 6, a2);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:fe180100]((void *)this + 9, a2);
    uint64_t v24 = (char *)*((void *)this + 10);
    bzero(v24, 8 * a2);
    *((void *)this + 10) = &v24[8 * a2];
  }
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((double *)this + 15) = a3;
  *((double *)this + 16) = a4;
  *((void *)this + 17) = a5;
  *((double *)this + 18) = a6;
  *((double *)this + 19) = a7;
  *((CGFloat *)this + 20) = width;
  *((CGFloat *)this + 21) = height;
  *((void *)this + 22) = a9;
  *(CGRect *)((char *)this + 184) = CGRectNull;
  *((unsigned char *)this + 216) = a10;
  *((void *)this + 28) = a11;
  std::vector<unsigned short>::reserve((void **)this + 12, a2);
  return this;
}

void sub_184D2FFF0(_Unwind_Exception *exception_object)
{
  CFStringRef v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  CFStringRef v6 = (uint64_t **)(result + 1);
  __n128 v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        __n128 v5 = *v7;
        CFStringRef v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      __n128 v5 = v7[1];
      if (!v5)
      {
        CFStringRef v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<unsigned long>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void std::__destroy_at[abi:fe180100]<PageLayoutFactory::TextChunk,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  __n128 v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  CFStringRef v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    unint64_t v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
  }
  unint64_t v8 = v7 - v3;
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  CGPDFDictionaryRef v11 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v10);
  long long v12 = *a1;
  double v13 = a1[1];
  double v14 = &v11[2 * v5];
  double v16 = &v11[2 * v15];
  bzero(v14, 2 * v6);
  double v17 = &v14[2 * v6];
  while (v13 != v12)
  {
    __int16 v18 = *((_WORD *)v13 - 1);
    v13 -= 2;
    *((_WORD *)v14 - 1) = v18;
    v14 -= 2;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

void PageLayoutFactory::ScannerContext::drawGlyphs(CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)::{lambda(unsigned short const*,unsigned long,unsigned long)#1}::operator()(uint64_t *a1, _WORD *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3;
  if (a4)
  {
    uint64_t v6 = a4;
    uint64_t v7 = a2;
    uint64_t v8 = *a1;
    uint64_t v9 = 2 * a4;
    uint64_t v10 = 2 * a4;
    CGPDFDictionaryRef v11 = a2;
    while (1)
    {
      int v12 = MEMORY[0x18532B8C0](*v11);
      if (v12 == 1 || v12 == 13) {
        break;
      }
      ++v11;
      v10 -= 2;
      if (!v10)
      {
        uint64_t v59 = a1[1] + 96;
        do
        {
          std::back_insert_iterator<std::vector<unsigned short>>::operator=[abi:fe180100](&v59, v7++);
          v9 -= 2;
        }
        while (v9);
        goto LABEL_71;
      }
    }
    *(unsigned char *)(*(void *)(*(void *)v8 + 8) + 8) = 1;
    unsigned int v14 = v6 - 1;
    if ((int)v6 - 1 >= 0)
    {
      unsigned int v15 = v6;
      do
      {
        if (v14
          && (v16 = v15 - 2, __int16 v17 = v7[v16], (v17 & 0xFC00) == 0xD800)
          && (v7[v14] & 0xFC00) == 0xDC00)
        {
          __int16 v18 = (void *)a1[1];
          uint64_t v20 = (char *)v18[13];
          unint64_t v19 = v18[14];
          if ((unint64_t)v20 >= v19)
          {
            double v35 = (char *)v18[12];
            uint64_t v36 = v20 - v35;
            if (v20 - v35 <= -3) {
              goto LABEL_77;
            }
            uint64_t v37 = v36 >> 1;
            unint64_t v38 = v19 - (void)v35;
            if (v38 <= (v36 >> 1) + 1) {
              unint64_t v39 = v37 + 1;
            }
            else {
              unint64_t v39 = v38;
            }
            if (v38 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v40 = v39;
            }
            if (v40)
            {
              uint64_t v40 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v40);
              double v35 = (char *)v18[12];
              uint64_t v20 = (char *)v18[13];
              __int16 v17 = v7[v16];
            }
            else
            {
              uint64_t v41 = 0;
            }
            BOOL v42 = (_WORD *)(v40 + 2 * v37);
            *BOOL v42 = v17;
            unint64_t v21 = v42 + 1;
            while (v20 != v35)
            {
              __int16 v43 = *((_WORD *)v20 - 1);
              v20 -= 2;
              *--BOOL v42 = v43;
            }
            v18[12] = v42;
            v18[13] = v21;
            v18[14] = v40 + 2 * v41;
            if (v35) {
              operator delete(v35);
            }
          }
          else
          {
            *(_WORD *)uint64_t v20 = v17;
            unint64_t v21 = v20 + 2;
          }
          v18[13] = v21;
          CGAffineTransform v44 = (void *)a1[1];
          double v46 = (char *)v44[13];
          unint64_t v45 = v44[14];
          if ((unint64_t)v46 >= v45)
          {
            CGRect v48 = (char *)v44[12];
            uint64_t v49 = v46 - v48;
            if (v46 - v48 <= -3) {
              goto LABEL_77;
            }
            uint64_t v50 = v49 >> 1;
            unint64_t v51 = v45 - (void)v48;
            if (v51 <= (v49 >> 1) + 1) {
              unint64_t v52 = v50 + 1;
            }
            else {
              unint64_t v52 = v51;
            }
            if (v51 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v53 = v52;
            }
            if (v53)
            {
              uint64_t v53 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v53);
              CGRect v48 = (char *)v44[12];
              double v46 = (char *)v44[13];
            }
            else
            {
              uint64_t v54 = 0;
            }
            unint64_t v55 = (_WORD *)(v53 + 2 * v50);
            *unint64_t v55 = v7[v14];
            CGRect v47 = v55 + 1;
            while (v46 != v48)
            {
              __int16 v56 = *((_WORD *)v46 - 1);
              v46 -= 2;
              *--unint64_t v55 = v56;
            }
            v44[12] = v55;
            v44[13] = v47;
            v44[14] = v53 + 2 * v54;
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            *(_WORD *)double v46 = v7[v14];
            CGRect v47 = v46 + 2;
          }
          v44[13] = v47;
          unsigned int v14 = v16;
        }
        else
        {
          unint64_t v22 = (void *)a1[1];
          uint64_t v24 = (char *)v22[13];
          unint64_t v23 = v22[14];
          if ((unint64_t)v24 >= v23)
          {
            CGFloat v26 = (char *)v22[12];
            uint64_t v27 = v24 - v26;
            if (v24 - v26 <= -3) {
              goto LABEL_77;
            }
            uint64_t v28 = v27 >> 1;
            unint64_t v29 = v23 - (void)v26;
            if (v29 <= (v27 >> 1) + 1) {
              unint64_t v30 = v28 + 1;
            }
            else {
              unint64_t v30 = v29;
            }
            if (v29 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v31 = v30;
            }
            if (v31)
            {
              uint64_t v31 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v31);
              CGFloat v26 = (char *)v22[12];
              uint64_t v24 = (char *)v22[13];
            }
            else
            {
              uint64_t v32 = 0;
            }
            double v33 = (_WORD *)(v31 + 2 * v28);
            *double v33 = v7[v14];
            CGFloat v25 = v33 + 1;
            while (v24 != v26)
            {
              __int16 v34 = *((_WORD *)v24 - 1);
              v24 -= 2;
              *--double v33 = v34;
            }
            v22[12] = v33;
            v22[13] = v25;
            v22[14] = v31 + 2 * v32;
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_WORD *)uint64_t v24 = v7[v14];
            CGFloat v25 = v24 + 2;
          }
          v22[13] = v25;
        }
        unsigned int v15 = v14--;
      }
      while ((v14 & 0x80000000) == 0);
    }
LABEL_71:
    uint64_t v57 = *(void *)(a1[1] + 72);
    unint64_t v4 = a3;
    if (a3 >= (*(void *)(a1[1] + 80) - v57) >> 3)
    {
LABEL_76:
      __break(1u);
LABEL_77:
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
  }
  else
  {
    uint64_t v57 = *(void *)(a1[1] + 72);
    if (a3 >= (*(void *)(a1[1] + 80) - v57) >> 3) {
      goto LABEL_76;
    }
    uint64_t v6 = 0;
  }
  *(void *)(v57 + 8 * v4) = v6;
}

void std::__tree<unsigned long>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<unsigned long>::destroy(*a1);
    std::__tree<unsigned long>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(2 * a1);
}

uint64_t *std::back_insert_iterator<std::vector<unsigned short>>::operator=[abi:fe180100](uint64_t *a1, _WORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(_WORD **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_WORD **)v4;
    uint64_t v9 = (uint64_t)v6 - *(void *)v4;
    if (v9 <= -3) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v5 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    BOOL v13 = v11 >= 0x7FFFFFFFFFFFFFFELL;
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v13) {
      uint64_t v14 = v12;
    }
    if (v14)
    {
      uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v14);
      uint64_t v8 = *(_WORD **)v4;
      uint64_t v6 = *(_WORD **)(v4 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (_WORD *)(v14 + 2 * v10);
    uint64_t v17 = v14 + 2 * v15;
    _WORD *v16 = *a2;
    uint64_t v7 = v16 + 1;
    while (v6 != v8)
    {
      __int16 v18 = *--v6;
      *--uint64_t v16 = v18;
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v17;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _WORD *v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              CGPDFDictionaryRef v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__split_buffer<PageLayoutFactory::TextChunk>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 232;
    std::__destroy_at[abi:fe180100]<PageLayoutFactory::TextChunk,0>(i - 232);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:fe180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_184D30998(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CGRect>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGRect>::__vallocate[abi:fe180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_184D30A10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(a2);
    unint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFELL];
    uint64_t v7 = &v4[2 * v6];
    int v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v9 != *a1)
    {
      uint64_t v10 = v5;
      do
      {
        __int16 v11 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v10 - 1) = v11;
        v10 -= 2;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *std::vector<unsigned long>::__vallocate[abi:fe180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<CGRect>::__vallocate[abi:fe180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<CGRect>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<CGRect>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(32 * a1);
}

char *std::vector<unsigned short>::__vallocate[abi:fe180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void PageLayoutFactory::ScannerContext::op_doublequote(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v17 = 0.0;
  CGPDFStringRef value = 0;
  CGPDFReal v16 = 0.0;
  if (CGPDFScannerPopString(this, &value) && CGPDFScannerPopNumber(this, &v17) && CGPDFScannerPopNumber(this, &v16))
  {
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v5 = *((void *)a2 + 3);
      if (v5)
      {
        CGPDFReal v6 = v17;
        *(CGPDFReal *)(v5 + 72) = v17;
        uint64_t v7 = *(CGPDFReal **)(v5 + 272);
        if (v7) {
          CGPDFReal *v7 = v6;
        }
        uint64_t v8 = *((void *)a2 + 3);
        if (v8)
        {
          CGPDFReal v9 = v16;
          *(CGPDFReal *)(v8 + 80) = v16;
          uint64_t v10 = *(void *)(v8 + 272);
          if (v10) {
            *(CGPDFReal *)(v10 + 8) = v9;
          }
        }
      }
      TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
      uint64_t v12 = (uint64_t)TextObject;
      uint64_t v13 = *((void *)a2 + 3);
      if (v13) {
        double v14 = *(double *)(v13 + 96);
      }
      else {
        double v14 = 0.0;
      }
      CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, 0.0, -v14);
      v15.n128_f64[0] = CGPDFTextObjectAppendString(v12, (uint64_t)value);
      CGPDFTextLayoutDrawGlyphs(*(void **)(v12 + 168), (void (*)(uint64_t, uint64_t, long long *, uint64_t, uint64_t, char *, char *, void, uint64_t))PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke, (uint64_t)a2, v15);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_singlequote(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFStringRef value = 0;
  if (CGPDFScannerPopString(this, &value))
  {
    if (*((unsigned char *)a2 + 32))
    {
      TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
      uint64_t v5 = (uint64_t)TextObject;
      uint64_t v6 = *((void *)a2 + 3);
      if (v6) {
        double v7 = *(double *)(v6 + 96);
      }
      else {
        double v7 = 0.0;
      }
      CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, 0.0, -v7);
      v8.n128_f64[0] = CGPDFTextObjectAppendString(v5, (uint64_t)value);
      CGPDFTextLayoutDrawGlyphs(*(void **)(v5 + 168), (void (*)(uint64_t, uint64_t, long long *, uint64_t, uint64_t, char *, char *, void, uint64_t))PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke, (uint64_t)a2, v8);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_Tj(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFStringRef value = 0;
  if (CGPDFScannerPopString(this, &value))
  {
    if (*((unsigned char *)a2 + 32))
    {
      TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
      v5.n128_f64[0] = CGPDFTextObjectAppendString((uint64_t)TextObject, (uint64_t)value);
      CGPDFTextLayoutDrawGlyphs(*((void **)TextObject + 21), (void (*)(uint64_t, uint64_t, long long *, uint64_t, uint64_t, char *, char *, void, uint64_t))PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke, (uint64_t)a2, v5);
    }
    else
    {
    }
  }
}

double PageLayoutFactory::ScannerContext::op_Tstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  if (*((unsigned char *)a2 + 32))
  {
    TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
    uint64_t v5 = *((void *)a2 + 3);
    if (v5) {
      double v6 = *(double *)(v5 + 96);
    }
    else {
      double v6 = 0.0;
    }
    *(void *)&double result = CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, 0.0, -v6).n128_u64[0];
  }
  else
  {
  }
  return result;
}

void PageLayoutFactory::ScannerContext::op_Tm(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v16 = 0.0;
  CGPDFReal v17 = 0.0;
  CGPDFReal v14 = 0.0;
  CGPDFReal v15 = 0.0;
  uint64_t v12 = 0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, (CGPDFReal *)&v12)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v14)
    && CGPDFScannerPopNumber(this, &v15)
    && CGPDFScannerPopNumber(this, &v16)
    && CGPDFScannerPopNumber(this, &v17))
  {
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v5 = v12;
      CGPDFReal v6 = value;
      CGPDFReal v7 = v14;
      CGPDFReal v8 = v15;
      CGPDFReal v9 = v16;
      CGPDFReal v10 = v17;
      TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
      *((CGPDFReal *)TextObject + 9) = v10;
      *((CGPDFReal *)TextObject + 10) = v9;
      *((CGPDFReal *)TextObject + 11) = v8;
      *((CGPDFReal *)TextObject + 12) = v7;
      *((CGPDFReal *)TextObject + 13) = v6;
      *((void *)TextObject + 14) = v5;
      *((CGPDFReal *)TextObject + 15) = v10;
      *((CGPDFReal *)TextObject + 16) = v9;
      *((CGPDFReal *)TextObject + 17) = v8;
      *((CGPDFReal *)TextObject + 18) = v7;
      *((CGPDFReal *)TextObject + 19) = v6;
      *((void *)TextObject + 20) = v5;
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_TD(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  double v9 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &v9) && CGPDFScannerPopNumber(this, &value))
  {
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v5 = *((void *)a2 + 3);
      if (v5)
      {
        double v6 = -v9;
        *(double *)(v5 + 96) = -v9;
        uint64_t v7 = *(void *)(v5 + 272);
        if (v7) {
          *(double *)(v7 + 24) = v6;
        }
      }
      TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
      CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, value, v9);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_Td(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  double v6 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &v6) && CGPDFScannerPopNumber(this, &value))
  {
    if (*((unsigned char *)a2 + 32))
    {
      TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
      CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, value, v6);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_ET(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  if (*((unsigned char *)a2 + 32)) {
    *((unsigned char *)a2 + 32) = 0;
  }
  else {
}
  }

CGFloat PageLayoutFactory::ScannerContext::op_BT(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  if (*((unsigned char *)a2 + 32))
  {
    pdf_error("warning: already in a text object.");
  }
  else
  {
    *((unsigned char *)a2 + 32) = 1;
    TextObject = CGPDFGStateGetTextObject(*((void *)a2 + 3));
    CGFloat result = CGAffineTransformIdentity.a;
    *(CGAffineTransform *)(TextObject + 72) = CGAffineTransformIdentity;
    *(CGAffineTransform *)(TextObject + 120) = CGAffineTransformIdentity;
  }
  return result;
}

BOOL PageLayoutFactory::ScannerContext::op_Ts(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal value = 0.0;
  BOOL result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 3);
    if (v5)
    {
      CGPDFReal v6 = value;
      *(CGPDFReal *)(v5 + 104) = value;
      uint64_t v7 = *(void *)(v5 + 272);
      if (v7) {
        *(CGPDFReal *)(v7 + 32) = v6;
      }
    }
  }
  return result;
}

void PageLayoutFactory::ScannerContext::op_Tr(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFInteger value = 0;
  if (CGPDFScannerPopInteger(this, &value))
  {
    int v4 = value;
    if ((unint64_t)value >= 8)
    {
      pdf_error("invalid text drawing mode: %ld.", value);
    }
    else
    {
      uint64_t v5 = *((void *)a2 + 3);
      if (v5)
      {
        *(_DWORD *)(v5 + 112) = value;
        uint64_t v6 = *(void *)(v5 + 272);
        if (v6) {
          CGPDFTextObjectSetTextDrawingMode(v6, v4);
        }
      }
    }
  }
}

void PageLayoutFactory::ScannerContext::op_Tf(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  float v96 = 0;
  CGPDFReal value = 0.0;
  if (!CGPDFScannerPopNumber(this, &value) || !CGPDFScannerPopName(this, (const char **)&v96)) {
    return;
  }
  Font = CGPDFContentStreamGetFont(*((void *)this + 7), v96);
  if (!Font)
  {
    return;
  }
  unint64_t v7 = (unint64_t)Font;
  CGPDFReal v8 = (void *)CGPDFFontGetFont((uint64_t)Font);
  unint64_t v9 = (unint64_t)v8;
  if (v8)
  {
    CFRetain(v8);
    unint64_t v100 = v9;
    uint64_t v10 = *(void *)a2;
    CFRetain((CFTypeRef)v9);
  }
  else
  {
    unint64_t v100 = 0;
    uint64_t v10 = *(void *)a2;
  }
  __p[0] = (void *)v9;
  __p[1] = (void *)0xBFF0000000000000;
  unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
  unint64_t v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v11 >> 47) ^ v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
  unint64_t v14 = *(void *)(v10 + 72);
  if (!v14) {
    goto LABEL_25;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
    if (v13 >= v14) {
      unint64_t v3 = v13 % v14;
    }
  }
  else
  {
    unint64_t v3 = v13 & (v14 - 1);
  }
  CGPDFReal v16 = *(double ***)(*(void *)(v10 + 64) + 8 * v3);
  if (!v16 || (CGPDFReal v17 = *v16) == 0)
  {
LABEL_25:
    unint64_t v19 = (double *)operator new(0x20uLL);
    uint64_t v20 = (void *)(v10 + 80);
    double v101 = v19;
    CGFloat v102 = (char *)(v10 + 80);
    *unint64_t v19 = 0.0;
    *((void *)v19 + 1) = v13;
    if (v9) {
      CFRetain((CFTypeRef)v9);
    }
    *((void *)v19 + 2) = v9;
    v19[3] = -1.0;
    LOBYTE(v103) = 1;
    float v21 = (float)(unint64_t)(*(void *)(v10 + 88) + 1);
    float v22 = *(float *)(v10 + 96);
    if (v14 && (float)(v22 * (float)v14) >= v21)
    {
LABEL_73:
      unint64_t v39 = *(double ***)(*(void *)(v10 + 64) + 8 * v3);
      CGPDFReal v17 = v101;
      if (v39)
      {
        *(void *)double v101 = *v39;
      }
      else
      {
        *double v101 = *(double *)(v10 + 80);
        *(void *)(v10 + 80) = v17;
        *(void *)(*(void *)(v10 + 64) + 8 * v3) = v20;
        if (!*(void *)v17) {
          goto LABEL_82;
        }
        unint64_t v40 = *(void *)(*(void *)v17 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v40 >= v14) {
            v40 %= v14;
          }
        }
        else
        {
          v40 &= v14 - 1;
        }
        unint64_t v39 = (double **)(*(void *)(v10 + 64) + 8 * v40);
      }
      *unint64_t v39 = v17;
LABEL_82:
      double v101 = 0;
      ++*(void *)(v10 + 88);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,void *>>>>::reset[abi:fe180100]((uint64_t)&v101);
      char v41 = 0;
      if (!v9) {
        goto LABEL_84;
      }
      goto LABEL_83;
    }
    BOOL v23 = 1;
    if (v14 >= 3) {
      BOOL v23 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v14);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v14 = *(void *)(v10 + 72);
    if (*(void *)&prime > v14) {
      goto LABEL_39;
    }
    if (*(void *)&prime < v14)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(v10 + 88) / *(float *)(v10 + 96));
      if (v14 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v14)
      {
        unint64_t v14 = *(void *)(v10 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:fe180100]();
          }
          uint64_t v27 = operator new(8 * *(void *)&prime);
          uint64_t v28 = *(void **)(v10 + 64);
          *(void *)(v10 + 64) = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(v10 + 72) = prime;
          do
            *(void *)(*(void *)(v10 + 64) + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          unint64_t v30 = (void *)*v20;
          if (*v20)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v10 + 64) + 8 * v31) = v20;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  uint64_t v38 = *(void *)(v10 + 64);
                  if (!*(void *)(v38 + 8 * v37))
                  {
                    *(void *)(v38 + 8 * v37) = v30;
                    goto LABEL_64;
                  }
                  *unint64_t v30 = *v36;
                  *uint64_t v36 = **(void **)(*(void *)(v10 + 64) + 8 * v37);
                  **(void **)(*(void *)(v10 + 64) + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_64:
                unint64_t v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v14 = (unint64_t)prime;
          goto LABEL_68;
        }
        uint64_t v59 = *(void **)(v10 + 64);
        *(void *)(v10 + 64) = 0;
        if (v59) {
          operator delete(v59);
        }
        unint64_t v14 = 0;
        *(void *)(v10 + 72) = 0;
      }
    }
LABEL_68:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v3 = v13 % v14;
      }
      else {
        unint64_t v3 = v13;
      }
    }
    else
    {
      unint64_t v3 = (v14 - 1) & v13;
    }
    goto LABEL_73;
  }
  while (1)
  {
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 == v13) {
      break;
    }
    if (v15.u32[0] > 1uLL)
    {
      if (v18 >= v14) {
        v18 %= v14;
      }
    }
    else
    {
      v18 &= v14 - 1;
    }
    if (v18 != v3) {
      goto LABEL_25;
    }
LABEL_24:
    CGPDFReal v17 = *(double **)v17;
    if (!v17) {
      goto LABEL_25;
    }
  }
  if (*((void *)v17 + 2) != v9) {
    goto LABEL_24;
  }
  char v41 = 1;
  if (v9) {
LABEL_83:
  }
    CFRelease((CFTypeRef)v9);
LABEL_84:
  if ((v41 & 1) == 0)
  {
    uint64_t v42 = *(void *)a2;
    uint64_t v94 = *(void *)(*(void *)(*(void *)a2 + 8) + 248);
    uint64_t v95 = *(void *)(*(void *)(*(void *)a2 + 8) + 256);
    __int16 v43 = (uint64_t *)(*(void *)a2 + 104);
    unint64_t v44 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
    unint64_t v45 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v44 >> 47) ^ v44);
    unint64_t v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
    unint64_t v47 = *(void *)(*(void *)a2 + 112);
    if (v47)
    {
      uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
      v48.i16[0] = vaddlv_u8(v48);
      if (v48.u32[0] > 1uLL)
      {
        unint64_t v14 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
        if (v46 >= v47) {
          unint64_t v14 = v46 % v47;
        }
      }
      else
      {
        unint64_t v14 = v46 & (v47 - 1);
      }
      uint64_t v49 = *(void **)(*v43 + 8 * v14);
      if (v49)
      {
        for (uint64_t i = (void *)*v49; i; uint64_t i = (void *)*i)
        {
          unint64_t v51 = i[1];
          if (v51 == v46)
          {
            if (i[2] == v7) {
              goto LABEL_135;
            }
          }
          else
          {
            if (v48.u32[0] > 1uLL)
            {
              if (v51 >= v47) {
                v51 %= v47;
              }
            }
            else
            {
              v51 &= v47 - 1;
            }
            if (v51 != v14) {
              break;
            }
          }
        }
      }
    }
    unint64_t v52 = operator new(0x20uLL);
    *unint64_t v52 = 0;
    v52[1] = v46;
    v52[2] = v7;
    v52[3] = (v95 - v94) >> 5;
    float v53 = (float)(unint64_t)(*(void *)(v42 + 128) + 1);
    float v54 = *(float *)(v42 + 136);
    if (!v47 || (float)(v54 * (float)v47) < v53)
    {
      BOOL v55 = 1;
      if (v47 >= 3) {
        BOOL v55 = (v47 & (v47 - 1)) != 0;
      }
      unint64_t v56 = v55 | (2 * v47);
      unint64_t v57 = vcvtps_u32_f32(v53 / v54);
      if (v56 <= v57) {
        size_t v58 = v57;
      }
      else {
        size_t v58 = v56;
      }
      std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>(v42 + 104, v58);
      unint64_t v47 = *(void *)(v42 + 112);
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v46 >= v47) {
          unint64_t v14 = v46 % v47;
        }
        else {
          unint64_t v14 = v46;
        }
      }
      else
      {
        unint64_t v14 = (v47 - 1) & v46;
      }
    }
    uint64_t v60 = *v43;
    uint64_t v61 = *(void **)(*v43 + 8 * v14);
    if (v61)
    {
      *unint64_t v52 = *v61;
      goto LABEL_133;
    }
    *unint64_t v52 = *(void *)(v42 + 120);
    *(void *)(v42 + 120) = v52;
    *(void *)(v60 + 8 * v14) = v42 + 120;
    if (*v52)
    {
      unint64_t v62 = *(void *)(*v52 + 8);
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v62 >= v47) {
          v62 %= v47;
        }
      }
      else
      {
        v62 &= v47 - 1;
      }
      uint64_t v61 = (void *)(*v43 + 8 * v62);
LABEL_133:
      *uint64_t v61 = v52;
    }
    ++*(void *)(v42 + 128);
LABEL_135:
    if (v9) {
      uint64_t v63 = (void *)(*(uint64_t (**)(void))(*(void *)(v9 + 16) + 152))(*(void *)(v9 + 112));
    }
    else {
      uint64_t v63 = 0;
    }
    if ((unint64_t)[v63 length] >= 8
      && [v63 characterAtIndex:6] == 43)
    {
      uint64_t v64 = [v63 substringFromIndex:7];

      uint64_t v63 = (void *)v64;
    }
    unint64_t FontDescriptor = CGPDFFontGetFontDescriptor(v7);
    if (FontDescriptor) {
      int v66 = *(_DWORD *)(FontDescriptor + 40);
    }
    else {
      int v66 = 0;
    }
    uint64_t v67 = *(uint64_t **)(*(void *)a2 + 8);
    id v68 = v63;
    if ([v68 UTF8String]) {
      uint64_t v69 = (char *)[v68 UTF8String];
    }
    else {
      uint64_t v69 = "";
    }
    std::string::basic_string[abi:fe180100]<0>(__p, v69);
    unint64_t v71 = v67[32];
    unint64_t v70 = v67[33];
    if (v71 >= v70)
    {
      uint64_t v73 = v67[31];
      uint64_t v74 = (uint64_t)(v71 - v73) >> 5;
      unint64_t v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 59) {
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v76 = v70 - v73;
      if (v76 >> 4 > v75) {
        unint64_t v75 = v76 >> 4;
      }
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v77 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v77 = v75;
      }
      unint64_t v105 = v67 + 33;
      long long v78 = (double *)std::__allocate_at_least[abi:fe180100]<std::allocator<CGRect>>(v77);
      uint64_t v79 = (char *)&v78[4 * v74];
      double v101 = v78;
      CGFloat v102 = v79;
      uint64_t v104 = &v78[4 * v80];
      long long v81 = *(_OWORD *)__p;
      *((void *)v79 + 2) = v99;
      *(_OWORD *)uint64_t v79 = v81;
      __p[1] = 0;
      uint64_t v99 = 0;
      __p[0] = 0;
      *((_DWORD *)v79 + 6) = v66;
      uint64_t v103 = v79 + 32;
      std::vector<std::pair<std::string,unsigned int>>::__swap_out_circular_buffer(v67 + 31, &v101);
      uint64_t v82 = v67[32];
      std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer((uint64_t)&v101);
      int v83 = SHIBYTE(v99);
      v67[32] = v82;
      if (v83 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v72 = *(_OWORD *)__p;
      *(void *)(v71 + 16) = v99;
      *(_OWORD *)unint64_t v71 = v72;
      *(_DWORD *)(v71 + 24) = v66;
      v67[32] = v71 + 32;
    }
    unint64_t CMap = CGPDFFontGetCMap(v7);
    Advances = CGPDFFontGetAdvances((void ***)v7);
    unint64_t v86 = 32;
    if (CMap)
    {
      uint64_t v87 = CGPDFFontGetToUnicodeCMap(v7);
      LOWORD(v101) = 32;
      if (!v87
        || !cmap_vtable
        || (double v88 = *(uint64_t (**)(void, double **, uint64_t))(cmap_vtable + 72)) == 0)
      {
        unint64_t v86 = 0;
        goto LABEL_164;
      }
      int v89 = v88(*(void *)(v87 + 16), &v101, 1);
      if (v89 != -1)
      {
        unint64_t v86 = v89;
        goto LABEL_164;
      }
    }
    else
    {
LABEL_164:
      double HorizontalAdvance = CGPDFAdvancesGetHorizontalAdvance((uint64_t)Advances, v86);
      if (HorizontalAdvance != 0.0) {
        v17[3] = HorizontalAdvance / 1000.0;
      }
    }
  }
  if (v9) {
    CFRelease((CFTypeRef)v9);
  }
  CGPDFGStateSetFont(*((void *)a2 + 3), (CFTypeRef)v7);
  uint64_t v91 = *((void *)a2 + 3);
  if (v91)
  {
    CGPDFReal v92 = value;
    *(CGPDFReal *)(v91 + 128) = value;
    uint64_t v93 = *(void *)(v91 + 272);
    if (v93) {
      *(CGPDFReal *)(v93 + 56) = v92;
    }
  }
}

void sub_184D31B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20,__int16 a21,char a22,char a23)
{
  operator delete(v23);
  applesauce::CF::ObjectRef<CGFont *>::~ObjectRef(&a20);
  _Unwind_Resume(a1);
}

const void **std::pair<applesauce::CF::ObjectRef<CGFont *> const,double>::~pair(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t *std::vector<std::pair<std::string,unsigned int>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 32;
      long long v6 = *(_OWORD *)(v3 - 32);
      *(void *)(v4 - 16) = *(void *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 32) = 0;
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      v4 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *BOOL result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGFont *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,void *>>>>::reset[abi:fe180100](uint64_t a1)
{
  uint64_t v1 = *(const void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:fe180100]<std::pair<applesauce::CF::ObjectRef<CGFont *> const,double>,0>(v1[2]);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:fe180100]<std::pair<applesauce::CF::ObjectRef<CGFont *> const,double>,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

BOOL PageLayoutFactory::ScannerContext::op_TL(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal value = 0.0;
  BOOL result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 3);
    if (v5)
    {
      CGPDFReal v6 = value;
      *(CGPDFReal *)(v5 + 96) = value;
      uint64_t v7 = *(void *)(v5 + 272);
      if (v7) {
        *(CGPDFReal *)(v7 + 24) = v6;
      }
    }
  }
  return result;
}

BOOL PageLayoutFactory::ScannerContext::op_Tz(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal value = 0.0;
  BOOL result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 3);
    if (v5)
    {
      CGPDFReal v6 = value;
      *(CGPDFReal *)(v5 + 88) = value;
      uint64_t v7 = *(void *)(v5 + 272);
      if (v7) {
        *(CGPDFReal *)(v7 + 16) = v6;
      }
    }
  }
  return result;
}

BOOL PageLayoutFactory::ScannerContext::op_Tw(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal value = 0.0;
  BOOL result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 3);
    if (v5)
    {
      CGPDFReal v6 = value;
      *(CGPDFReal *)(v5 + 80) = value;
      uint64_t v7 = *(void *)(v5 + 272);
      if (v7) {
        *(CGPDFReal *)(v7 + 8) = v6;
      }
    }
  }
  return result;
}

BOOL PageLayoutFactory::ScannerContext::op_Tc(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal value = 0.0;
  BOOL result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 3);
    if (v5)
    {
      CGPDFReal v6 = value;
      *(CGPDFReal *)(v5 + 72) = value;
      uint64_t v7 = *(CGPDFReal **)(v5 + 272);
      if (v7) {
        CGPDFReal *v7 = v6;
      }
    }
  }
  return result;
}

void PageLayoutFactory::ScannerContext::op_scn(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  unint64_t FillColor = CGPDFGStateGetFillColor(*((void *)a2 + 3));
  if (FillColor)
  {
    if ((FillColor & 0x8000000000000000) != 0)
    {
      CGColorSpaceRef ColorSpace = CGTaggedColorGetColorSpace(FillColor, v6, v7, (uint64_t)v8, v9, v10, v11, v12);
      if (!ColorSpace) {
        goto LABEL_8;
      }
LABEL_7:
      if (*(_DWORD *)(*((void *)ColorSpace + 3) + 28) == 6) {
        return;
      }
      goto LABEL_8;
    }
    CGColorSpaceRef ColorSpace = *(CGColorSpaceRef *)(FillColor + 24);
    if (ColorSpace) {
      goto LABEL_7;
    }
  }
  else
  {
    CGColorSpaceRef ColorSpace = 0;
  }
LABEL_8:

  PageLayoutFactory::ScannerContext::set_color(this, a2, ColorSpace, v8);
}

void PageLayoutFactory::ScannerContext::set_color(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, PageLayoutFactory::ScannerContext *a3, CGColorSpace *a4)
{
  CGColorSpaceRef ColorSpace = a3;
  if (a3)
  {
LABEL_2:
    uint64_t v7 = *(void *)(*((void *)ColorSpace + 3) + 48);
    uint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > 0x1FFFFFFFFFFFFFFELL) {
      return;
    }
    goto LABEL_12;
  }
  unint64_t FillColor = CGPDFGStateGetFillColor(*((void *)a2 + 3));
  if (FillColor)
  {
    if ((FillColor & 0x8000000000000000) != 0)
    {
      CGColorSpaceRef ColorSpace = CGTaggedColorGetColorSpace(FillColor, v10, v11, v12, v13, v14, v15, v16);
      if (ColorSpace) {
        goto LABEL_2;
      }
    }
    else
    {
      CGColorSpaceRef ColorSpace = *(CGColorSpaceRef *)(FillColor + 24);
      if (ColorSpace) {
        goto LABEL_2;
      }
    }
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    CGColorSpaceRef ColorSpace = 0;
  }
  uint64_t v8 = 1;
LABEL_12:
  CGPDFReal v17 = (CGFloat *)malloc_type_malloc(8 * v8, 0xC68A489AuLL);
  if (v17)
  {
    unint64_t v18 = v17;
    if (v7)
    {
      uint64_t v19 = v7 - 1;
      while (1)
      {
        CGPDFReal value = 0.0;
        if (!CGPDFScannerPopNumber(this, &value)) {
          break;
        }
        v18[v19--] = value;
        if (v19 == -1) {
          goto LABEL_17;
        }
      }
      pdf_error("missing or invalid arguments for color operator.");
    }
    else
    {
LABEL_17:
      uint64_t v20 = *((void *)a2 + 3);
      if (v20) {
        double v21 = *(double *)(v20 + 200);
      }
      else {
        double v21 = 1.0;
      }
      v18[v7] = v21;
      CGColorRef v22 = CGColorCreate(ColorSpace, v18);
      CGPDFGStateSetFillColor(*((void *)a2 + 3), v22);
      if (v22) {
        CFRelease(v22);
      }
    }
    free(v18);
  }
}

void PageLayoutFactory::ScannerContext::op_sc(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3, CGColorSpace *a4)
{
}

void PageLayoutFactory::ScannerContext::op_cs(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    uint64_t v5 = *((void *)this + 7);
    if (v5)
    {
      uint64_t v6 = value;
      uint64_t v7 = v5;
      while (1)
      {
        CGColorSpaceRef ColorSpace = CGPDFResourcesGetColorSpace(*(void *)(v7 + 32), v6);
        if (ColorSpace) {
          break;
        }
        uint64_t v7 = *(void *)(v7 + 40);
        if (!v7) {
          goto LABEL_6;
        }
      }
      uint64_t v9 = ColorSpace;
    }
    else
    {
LABEL_6:
      uint64_t v9 = 0;
    }
    ResolvedCGColorSpaceRef ColorSpace = (CGColorSpace *)CGPDFContentStreamCreateResolvedColorSpace(v5, v9);
    if (ResolvedColorSpace)
    {
      uint64_t v11 = ResolvedColorSpace;
      uint64_t v12 = CGColorSpaceCopyDefaultColor((uint64_t)ResolvedColorSpace);
      CGPDFGStateSetFillColor(*((void *)a2 + 3), v12);
      CGColorSpaceRelease(v11);
      if (v12) {
        CFRelease(v12);
      }
    }
  }
}

void PageLayoutFactory::ScannerContext::op_rg(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 7);
    while (1)
    {
      CGColorSpaceRef ColorSpace = CGPDFResourcesGetColorSpace(*(void *)(v6 + 32), "DeviceRGB");
      if (ColorSpace) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      if (!v6) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = ColorSpace;
  }
  else
  {
LABEL_5:
    uint64_t v8 = 0;
  }
  ResolvedCGColorSpaceRef ColorSpace = (PageLayoutFactory::ScannerContext *)CGPDFContentStreamCreateResolvedColorSpace(v5, v8);
  PageLayoutFactory::ScannerContext::set_color(this, a2, ResolvedColorSpace, v10);

  CGColorSpaceRelease(ResolvedColorSpace);
}

void PageLayoutFactory::ScannerContext::op_k(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 7);
    while (1)
    {
      CGColorSpaceRef ColorSpace = CGPDFResourcesGetColorSpace(*(void *)(v6 + 32), "DeviceCMYK");
      if (ColorSpace) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      if (!v6) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = ColorSpace;
  }
  else
  {
LABEL_5:
    uint64_t v8 = 0;
  }
  ResolvedCGColorSpaceRef ColorSpace = (PageLayoutFactory::ScannerContext *)CGPDFContentStreamCreateResolvedColorSpace(v5, v8);
  PageLayoutFactory::ScannerContext::set_color(this, a2, ResolvedColorSpace, v10);

  CGColorSpaceRelease(ResolvedColorSpace);
}

void PageLayoutFactory::ScannerContext::op_g(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 7);
    while (1)
    {
      CGColorSpaceRef ColorSpace = CGPDFResourcesGetColorSpace(*(void *)(v6 + 32), "DeviceGray");
      if (ColorSpace) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      if (!v6) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = ColorSpace;
  }
  else
  {
LABEL_5:
    uint64_t v8 = 0;
  }
  ResolvedCGColorSpaceRef ColorSpace = (PageLayoutFactory::ScannerContext *)CGPDFContentStreamCreateResolvedColorSpace(v5, v8);
  PageLayoutFactory::ScannerContext::set_color(this, a2, ResolvedColorSpace, v10);

  CGColorSpaceRelease(ResolvedColorSpace);
}

double PageLayoutFactory::ScannerContext::op_cm(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v12 = 0.0;
  CGPDFReal v13 = 0.0;
  CGPDFReal v10 = 0.0;
  CGPDFReal v11 = 0.0;
  CGPDFReal value = 0.0;
  CGPDFReal v9 = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v9)
    && CGPDFScannerPopNumber(this, &v10)
    && CGPDFScannerPopNumber(this, &v11)
    && CGPDFScannerPopNumber(this, &v12)
    && CGPDFScannerPopNumber(this, &v13))
  {
    uint64_t v6 = (double *)*((void *)a2 + 3);
    v7[0] = v13;
    v7[1] = v12;
    v7[2] = v11;
    v7[3] = v10;
    v7[4] = v9;
    v7[5] = value;
    return CGPDFGStateConcatCTM(v6, v7);
  }
  return result;
}

void PageLayoutFactory::ScannerContext::op_Q(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  if (*((unsigned char *)a2 + 32))
  {
  }
  else
  {
    uint64_t v4 = *((void *)a2 + 23);
    if (v4 == *((void *)a2 + 22)
      || (uint64_t v6 = *(const void **)(v4 - 8),
          uint64_t v5 = v4 - 8,
          std::__destroy_at[abi:fe180100]<applesauce::CF::ObjectRef<CGPath *>,0>(v6),
          *((void *)a2 + 23) = v5,
          *((void *)a2 + 22) == v5))
    {
      pdf_error("warning: gstate path stack underflow.");
      CGMutablePathRef Mutable = CGPathCreateMutable();
      CGMutablePathRef v8 = Mutable;
      unint64_t v9 = *((void *)a2 + 24);
      CGPDFReal v10 = (CGMutablePathRef *)*((void *)a2 + 23);
      if ((unint64_t)v10 >= v9)
      {
        CGPDFReal v11 = (void *)*((void *)a2 + 22);
        uint64_t v12 = v10 - (CGMutablePathRef *)v11;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
        }
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        uint64_t v27 = (char *)a2 + 192;
        if (v15)
        {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v15);
          CGPDFReal v11 = (void *)*((void *)a2 + 22);
          CGPDFReal v10 = (CGMutablePathRef *)*((void *)a2 + 23);
        }
        else
        {
          uint64_t v16 = 0;
        }
        CGPDFReal v17 = (CGMutablePathRef *)(v15 + 8 * v12);
        unint64_t v18 = v15 + 8 * v16;
        unint64_t v26 = v18;
        *CGPDFReal v17 = v8;
        uint64_t v19 = v17 + 1;
        *((void *)&v25 + 1) = v17 + 1;
        if (v10 != v11)
        {
          do
          {
            uint64_t v20 = *--v10;
            *--CGPDFReal v17 = v20;
            CGMutablePathRef *v10 = 0;
          }
          while (v10 != v11);
          uint64_t v19 = (void *)*((void *)&v25 + 1);
          unint64_t v18 = v26;
        }
        long long v21 = *((_OWORD *)a2 + 11);
        *((void *)a2 + 22) = v17;
        *((void *)a2 + 23) = v19;
        long long v25 = v21;
        unint64_t v22 = *((void *)a2 + 24);
        *((void *)a2 + 24) = v18;
        unint64_t v26 = v22;
        uint64_t v24 = v21;
        std::__split_buffer<applesauce::CF::ObjectRef<CGPath *>>::~__split_buffer((uint64_t)&v24);
        *((void *)a2 + 23) = v19;
      }
      else
      {
        CGMutablePathRef *v10 = Mutable;
        *((void *)a2 + 23) = v10 + 1;
      }
    }
    CGPDFRStateGRestore(*((void *)a2 + 2));
    BOOL v23 = (void *)*((void *)a2 + 2);
    if (v23) {
      BOOL v23 = (void *)*v23;
    }
    *((void *)a2 + 3) = v23;
  }
}

void sub_184D3256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void PageLayoutFactory::ScannerContext::op_q(PageLayoutFactory::ScannerContext *this, int64x2_t *a2, void *a3)
{
  if (a2[2].i8[0])
  {
  }
  else
  {
    CGPDFRStateGSave(a2[1].i64[0]);
    uint64_t v4 = (void *)a2[1].i64[0];
    if (v4) {
      uint64_t v4 = (void *)*v4;
    }
    a2[1].i64[1] = (uint64_t)v4;
    uint64_t v5 = a2[11].i64[1];
    if (a2[11].i64[0] == v5)
    {
      __break(1u);
    }
    else
    {
      MutableCopdouble y = CGPathCreateMutableCopy(*(CGPathRef *)(v5 - 8));
      unint64_t v7 = a2[12].u64[0];
      CGMutablePathRef v8 = (void *)a2[11].i64[1];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = a2[11].i64[0];
        uint64_t v11 = ((uint64_t)v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
        }
        uint64_t v12 = v7 - v10;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t v27 = a2 + 12;
        if (v14)
        {
          uint64_t v16 = std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v14);
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v15 = 0;
        }
        CGPDFReal v17 = (char *)&v16[v15];
        unint64_t v26 = v17;
        unint64_t v18 = std::construct_at[abi:fe180100]<applesauce::CF::ObjectRef<CGPath *>,applesauce::CF::ObjectRef<CGPath *> const&,applesauce::CF::ObjectRef<CGPath *>*>(&v16[v11], MutableCopy);
        unint64_t v9 = v18 + 1;
        v25.i64[1] = (uint64_t)(v18 + 1);
        uint64_t v20 = (void *)a2[11].i64[0];
        uint64_t v19 = (void *)a2[11].i64[1];
        if (v19 == v20)
        {
          int64x2_t v22 = vdupq_n_s64((unint64_t)v19);
        }
        else
        {
          do
          {
            uint64_t v21 = *--v19;
            *--unint64_t v18 = v21;
            *uint64_t v19 = 0;
          }
          while (v19 != v20);
          int64x2_t v22 = a2[11];
          unint64_t v9 = (void *)v25.i64[1];
          CGPDFReal v17 = v26;
        }
        a2[11].i64[0] = (uint64_t)v18;
        a2[11].i64[1] = (uint64_t)v9;
        int64x2_t v25 = v22;
        uint64_t v23 = a2[12].i64[0];
        a2[12].i64[0] = (uint64_t)v17;
        unint64_t v26 = (char *)v23;
        uint64_t v24 = v22.i64[0];
        std::__split_buffer<applesauce::CF::ObjectRef<CGPath *>>::~__split_buffer((uint64_t)&v24);
      }
      else
      {
        unint64_t v9 = std::construct_at[abi:fe180100]<applesauce::CF::ObjectRef<CGPath *>,applesauce::CF::ObjectRef<CGPath *> const&,applesauce::CF::ObjectRef<CGPath *>*>(v8, MutableCopy)+ 1;
      }
      a2[11].i64[1] = (uint64_t)v9;
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
  }
}

void sub_184D3271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *std::construct_at[abi:fe180100]<applesauce::CF::ObjectRef<CGPath *>,applesauce::CF::ObjectRef<CGPath *> const&,applesauce::CF::ObjectRef<CGPath *>*>(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

uint64_t compareAnchorXIncreasingYDecreasing(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  double v3 = *(double *)(*a1 + 96);
  uint64_t v4 = *a2;
  double v5 = *(double *)(*a2 + 96);
  if (v3 < v5) {
    return 0xFFFFFFFFLL;
  }
  if (v3 > v5) {
    return 1;
  }
  double v6 = *(double *)(v2 + 104);
  double v7 = *(double *)(v4 + 104);
  if (v6 > v7) {
    return 0xFFFFFFFFLL;
  }
  if (v6 < v7) {
    return 1;
  }
  double v9 = *(double *)(v2 + 144);
  double v10 = *(double *)(v4 + 144);
  if (v9 >= v10) {
    return v9 > v10;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t compareAnchorYDecreasingXIncreasing(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  double v3 = *(double *)(*a1 + 104);
  uint64_t v4 = *a2;
  double v5 = *(double *)(*a2 + 104);
  if (v3 > v5) {
    return 0xFFFFFFFFLL;
  }
  if (v3 < v5) {
    return 1;
  }
  double v6 = *(double *)(v2 + 96);
  double v7 = *(double *)(v4 + 96);
  if (v6 < v7) {
    return 0xFFFFFFFFLL;
  }
  if (v6 > v7) {
    return 1;
  }
  double v9 = *(double *)(v2 + 144);
  double v10 = *(double *)(v4 + 144);
  if (v9 >= v10) {
    return v9 > v10;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t compareAnchorYDecreasingXIncreasingApprox(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(*(void *)a1 + 96);
  double v3 = *(double *)(*(void *)a1 + 104);
  double v4 = *(double *)(*(void *)a2 + 96);
  double v5 = *(double *)(*(void *)a2 + 104);
  if (vabdd_f64(v3, v5) > 0.2)
  {
    if (v3 > v5) {
      return 0xFFFFFFFFLL;
    }
    if (v3 < v5) {
      return 1;
    }
  }
  if (v2 < v4) {
    return 0xFFFFFFFFLL;
  }
  if (v2 > v4) {
    return 1;
  }
  double v7 = *(double *)(*(void *)a1 + 144);
  double v8 = *(double *)(*(void *)a2 + 144);
  if (v7 < v8) {
    return 0xFFFFFFFFLL;
  }
  return v7 > v8;
}

void PDFShadingRelease(void *a1)
{
  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      double v3 = (const void *)a1[2];
      if (v3) {
        CFRelease(v3);
      }
      free(a1);
    }
  }
}

void *CGFontGetGlyphBBoxesForStyle(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    uint64_t v11 = result;
    font_info = get_font_info(result);
    if (font_info)
    {
      if (font_info[104]) {
        a3 = a3 & 0xFFFFFFFE;
      }
      else {
        a3 = a3;
      }
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11[2] + 312);
    uint64_t v14 = v11[14];
    return (void *)v13(v14, a2, a3, a4, a5, a6);
  }
  return result;
}

double CGFontGetContainingBoundingBoxForGlyphs(void *a1, uint64_t a2, uint64_t a3)
{
  CGFloat width = 0.0;
  double x = INFINITY;
  if (a1)
  {
    uint64_t v5 = a3;
    CGFloat height = 0.0;
    if (a3)
    {
      memset(&v13, 0, sizeof(v13));
      CGFloat y = INFINITY;
      double x = INFINITY;
      do
      {
        font_info = get_font_info(a1);
        if (font_info) {
          BOOL v11 = font_info[104] != 0;
        }
        else {
          BOOL v11 = 0;
        }
        if ((*(unsigned int (**)(void, void, BOOL, uint64_t, uint64_t, CGRect *))(a1[2] + 312))(a1[14], 0, !v11, a2, 1, &v13))
        {
          v14.origin.double x = x;
          v14.origin.CGFloat y = y;
          v14.size.CGFloat width = width;
          v14.size.CGFloat height = height;
          CGRect v15 = CGRectUnion(v14, v13);
          double x = v15.origin.x;
          CGFloat y = v15.origin.y;
          CGFloat width = v15.size.width;
          CGFloat height = v15.size.height;
        }
        a2 += 2;
        --v5;
      }
      while (v5);
    }
  }
  return x;
}

uint64_t CGFontGetGlyphVerticalAdvances(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 320))(*(void *)(result + 112));
  }
  return result;
}

uint64_t CGFontGetGlyphVerticalOffsets(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 328))(*(void *)(result + 112));
  }
  return result;
}

CGGlyph CGFontGetGlyphWithGlyphName(CGFontRef font, CFStringRef name)
{
  CFIndex Length = CFStringGetLength(name);
  CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x600u) + 1;
  double v6 = malloc_type_malloc(v5, 0x8E9959A7uLL);
  double v9 = v6;
  if (CFStringGetCString(name, (char *)v6, v5, 0x600u))
  {
    CGGlyph v8 = 0;
    if (font)
    {
      (*(void (**)(void, void **, CGGlyph *, uint64_t))(*((void *)font + 2) + 280))(*((void *)font + 14), &v9, &v8, 1);
      double v6 = v9;
    }
    free(v6);
    return v8;
  }
  else
  {
    free(v6);
    return 0;
  }
}

uint64_t CGFontGetGlyphsForGlyphNames(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 280))(*(void *)(result + 112));
  }
  return result;
}

CFStringRef CGFontCopyGlyphNameForGlyph(CGFontRef font, CGGlyph glyph)
{
  if (!font)
  {
    double v7 = (char *)malloc_type_malloc(1uLL, 0x1135AE3FuLL);
    goto LABEL_7;
  }
  uint64_t v2 = glyph;
  uint64_t v4 = (*(uint64_t (**)(void))(*((void *)font + 2) + 288))(*((void *)font + 14));
  uint64_t v5 = v4 + 1;
  if (v4 != -1)
  {
    double v7 = (char *)malloc_type_malloc(v4 + 1, 0x1135AE3FuLL);
    if ((*(unsigned int (**)(void, uint64_t, char *, uint64_t))(*((void *)font + 2) + 296))(*((void *)font + 14), v2, v7, v5))
    {
      CFStringRef v6 = CFStringCreateWithCString(0, v7, 0x600u);
LABEL_8:
      free(v7);
      return v6;
    }
LABEL_7:
    CFStringRef v6 = 0;
    goto LABEL_8;
  }
  return 0;
}

uint64_t CGFontGetGlyphNameMaxLength(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 288))(*(void *)(result + 112));
  }
  return result;
}

uint64_t CGFontGetGlyphNameForGlyph(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 296))(*(void *)(result + 112));
  }
  return result;
}

uint64_t CGFontGetGlyphForGlyphName(uint64_t result, uint64_t a2)
{
  uint64_t v3 = a2;
  unsigned __int16 v2 = 0;
  if (result)
  {
    (*(void (**)(void, uint64_t *, unsigned __int16 *, uint64_t))(*(void *)(result + 16) + 280))(*(void *)(result + 112), &v3, &v2, 1);
    return v2;
  }
  return result;
}

uint64_t PBPageLayoutPkg::PBRange::formatText(PBPageLayoutPkg::PBRange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "length");
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "location");
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t PBPageLayoutPkg::PBRange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t PBPageLayoutPkg::PBRange::readFrom(PBPageLayoutPkg::PBRange *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26 + 1;
            char v39 = *(unsigned char *)(v27 + v26);
            *((void *)a2 + 1) = v38;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            unint64_t v26 = v38;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
LABEL_63:
          unint64_t v3 = v38;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
              break;
            }
          }
        }
LABEL_64:
        *((void *)this + 1) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19 + 1;
            char v35 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v34;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            unint64_t v19 = v34;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_59:
          unint64_t v3 = v34;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void PBPageLayoutPkg::PBRange::~PBRange(PBPageLayoutPkg::PBRange *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x18532A2A0);
}

void *color_space_state_create_generic_lab()
{
  uint64_t result = color_space_state_create_lab((uint64_t)&xmmword_18520FAB8, default_black_point_18824, (long long *)generic_lab_range, @"Generic Lab color space", @"Generic Lab Profile");
  if (result)
  {
    result[10] = @"kCGColorSpaceGenericLab";
    *((_DWORD *)result + 5) = 5;
  }
  return result;
}

void *color_space_state_create_lab(uint64_t a1, char *a2, long long *a3, const void *a4, const void *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  unsigned int v10 = malloc_type_calloc(0x78uLL, 1uLL, 0xEAC61AC0uLL);
  unint64_t v11 = v10;
  if (!v10) {
    return v11;
  }
  *(_DWORD *)unsigned int v10 = 1;
  v10[12] = 1;
  *((_DWORD *)v10 + 2) = 0x10000;
  *((void *)v10 + 3) = 0x300000005;
  *((_WORD *)v10 + 7) = 0;
  *((void *)v10 + 14) = color_space_state_create_lab_lab_vtable;
  *((_DWORD *)v10 + 8) = 3;
  *((void *)v10 + 10) = 0;
  *((void *)v10 + 11) = 0;
  *((void *)v10 + 5) = &xmmword_1852950E0;
  *((void *)v10 + 6) = 3;
  unint64_t v12 = (char *)malloc_type_calloc(0x90uLL, 1uLL, 0x6888CC2CuLL);
  v11[12] = v12;
  if (!v12)
  {
    free(v11);
    return 0;
  }
  char v13 = v12;
  for (uint64_t i = 0; i != 24; i += 8)
    *(void *)&v12[i] = *(void *)(a1 + i);
  uint64_t v15 = 0;
  unsigned int v16 = (char *)&default_black_point_18824;
  if (a2) {
    unsigned int v16 = a2;
  }
  do
  {
    *(void *)&v12[v15 + 24] = *(void *)&v16[v15];
    v15 += 8;
  }
  while (v15 != 24);
  uint64_t v17 = 0;
  char v18 = &xmmword_185296188;
  if (a3) {
    char v18 = a3;
  }
  do
  {
    *(void *)&v12[v17 + 48] = *(void *)((char *)v18 + v17);
    v17 += 8;
  }
  while (v17 != 32);
  if (a4) {
    CFTypeRef v19 = CFRetain(a4);
  }
  else {
    CFTypeRef v19 = 0;
  }
  *((void *)v13 + 10) = v19;
  if (a5) {
    CFTypeRef v20 = CFRetain(a5);
  }
  else {
    CFTypeRef v20 = 0;
  }
  *((void *)v13 + 11) = v20;
  memset(md, 0, 16);
  char v21 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v21);
  if (v21) {
    CC_MD5_Update(v21, v11 + 3, 4u);
  }
  uint64_t v22 = 0;
  uint64_t v23 = v11[12];
  do
  {
    if (v21) {
      CC_MD5_Update(v21, (const void *)(v23 + v22), 8u);
    }
    v22 += 8;
  }
  while (v22 != 24);
  for (uint64_t j = 0; j != 24; j += 8)
  {
    if (v21) {
      CC_MD5_Update(v21, (const void *)(v23 + 24 + j), 8u);
    }
  }
  for (uint64_t k = 0; k != 4; ++k)
  {
    while (v21)
    {
      CC_MD5_Update(v21, (const void *)(v23 + 8 * k++ + 48), 8u);
      if (k == 4)
      {
        CC_MD5_Final(md, v21);
        long long v26 = *(_OWORD *)md;
        goto LABEL_36;
      }
    }
  }
  long long v26 = 0uLL;
LABEL_36:
  long long v28 = v26;
  free(v21);
  *((_OWORD *)v11 + 4) = v28;
  return v11;
}

__CFString *lab_create_debug_description(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CGMutablePathRef Mutable = CFStringCreateMutable(v2, 0);
  int v4 = *(void **)(a1[3] + 96);
  CFStringAppendFormat(Mutable, 0, @"%@; white point [%.4f, %.4f, %.4f] range [%.1f %.1f, %.1f %.1f]",
    v4[10],
    *v4,
    v4[1],
    v4[2],
    v4[6],
    v4[7],
    v4[8],
    v4[9]);
  return Mutable;
}

CFTypeRef lab_create_icc_profile_description(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v8 + 24) != 5) {
    _CGHandleAssert("lab_create_icc_profile_description", 66, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_Lab.c", "space->state->type == kCGColorSpaceLAB", "Colorspace not of Lab type. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 24));
  }
  CFTypeRef result = *(CFTypeRef *)(*(void *)(v8 + 96) + 88);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t lab_get_descriptor(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

void lab_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 24);
  if (v8 != 5) {
    _CGHandleAssert("lab_finalize", 40, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_Lab.c", "state->type == kCGColorSpaceLAB", "Colorspace not of Lab type. type = %d", a6, a7, a8, v8);
  }
  uint64_t v9 = *(void *)(a1 + 96);
  if (v9)
  {
    unsigned int v10 = *(const void **)(v9 + 80);
    if (v10) {
      CFRelease(v10);
    }
    unint64_t v11 = *(const void **)(v9 + 88);
    if (v11)
    {
      CFRelease(v11);
    }
  }
}

CGColorSpaceRef CGColorSpaceCreateLab(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *range)
{
  if (*whitePoint > 0.9643) {
    goto LABEL_32;
  }
  if (*whitePoint < 0.9641) {
    goto LABEL_32;
  }
  double v3 = whitePoint[1];
  if (v3 > 1.0001) {
    goto LABEL_32;
  }
  if (v3 < 0.9999) {
    goto LABEL_32;
  }
  double v4 = whitePoint[2];
  if (v4 > 0.825 || v4 < 0.8248) {
    goto LABEL_32;
  }
  if (blackPoint)
  {
    if (*blackPoint > 0.0001 || *blackPoint < -0.0001) {
      goto LABEL_32;
    }
    uint64_t v5 = 0;
    unint64_t v6 = 2;
    while (v5 != 2)
    {
      double v7 = blackPoint[++v5];
      if (v7 > 0.0001 || v7 < -0.0001)
      {
        unint64_t v6 = v5 - 1;
        break;
      }
    }
    if (!range || v6 <= 1) {
      goto LABEL_32;
    }
  }
  else if (!range)
  {
LABEL_32:
    ladouble b = (atomic_uint *)color_space_state_create_lab((uint64_t)whitePoint, (char *)blackPoint, (long long *)range, @"Lab color space", @"Lab Profile");
    char v24 = (CGColorSpace *)CGColorSpaceCreateWithState(lab, v17, v18, v19, v20, v21, v22, v23);
    if (lab && atomic_fetch_add_explicit(lab, 0xFFFFFFFF, memory_order_relaxed) == 1) {
      color_space_state_dealloc((uint64_t)lab);
    }
    if (v24) {
      *((void *)v24 + 3) = color_space_state_register(*((unsigned char **)v24 + 3));
    }
    return v24;
  }
  if (*range > -127.9999 || *range < -128.0001) {
    goto LABEL_32;
  }
  uint64_t v8 = 1;
  while (v8 != 4)
  {
    uint64_t v9 = v8;
    double v10 = range[v8];
    double v11 = generic_lab_range[v8];
    double v12 = v11 + 0.0001;
    double v13 = v11 + -0.0001;
    ++v8;
    if (v10 > v12 || v10 < v13)
    {
      if ((unint64_t)(v9 - 1) < 3) {
        goto LABEL_32;
      }
      break;
    }
  }

  return CGColorSpaceCreateWithName(@"kCGColorSpaceGenericLab");
}

__n128 CGColorSpaceGetLabData@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, _OWORD *a5@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v5 + 24) != 5) {
    _CGHandleAssert("CGColorSpaceGetLabData", 210, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_Lab.c", "space->state->type == kCGColorSpaceLAB", "Colorspace not of Lab type. type = %d", a2, a3, a4, *(_DWORD *)(v5 + 24));
  }
  uint64_t v6 = *(void *)(v5 + 96);
  long long v7 = *(_OWORD *)(v6 + 48);
  a5[2] = *(_OWORD *)(v6 + 32);
  a5[3] = v7;
  long long v8 = *(_OWORD *)(v6 + 80);
  a5[4] = *(_OWORD *)(v6 + 64);
  a5[5] = v8;
  __n128 result = *(__n128 *)v6;
  long long v10 = *(_OWORD *)(v6 + 16);
  *a5 = *(_OWORD *)v6;
  a5[1] = v10;
  return result;
}

uint64_t cg_cmap_create_with_name(uint64_t a1)
{
  CFAllocatorRef v2 = (uint64_t (**)(uint64_t))cmap_vtable;
  if (!cmap_vtable)
  {
    pthread_once(&load_vtable_once, do_load_vtable);
    CFAllocatorRef v2 = (uint64_t (**)(uint64_t))cmap_vtable;
    if (!cmap_vtable) {
      return 0;
    }
  }
  double v3 = *v2;
  if (!*v2) {
    return 0;
  }

  return v3(a1);
}

void do_load_vtable()
{
  uint64_t v0 = 0;
  uint64_t v1 = (const char **)&links;
  do
  {
    if (!strcmp("cg_cmap_library_link_symbol", *v1))
    {
      cmap_vtable = ((uint64_t (*)(void))(&links)[2 * v0 + 1])();
      return;
    }
    ++v0;
    v1 += 2;
  }
  while (v0 != 7);

  pdf_error("no CMap library available.");
}

double *CGPDFCharacterCreate(__int16 a1, __int16 a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __n128 result = (double *)malloc_type_malloc(0x60uLL, 0x1000040FA0C22F2uLL);
  if (result)
  {
    *(void *)__n128 result = 1;
    *((_WORD *)result + 4) = a1;
    result[2] = a3;
    result[3] = a4;
    result[4] = a5;
    result[5] = a6;
    result[6] = a7;
    result[7] = a8;
    result[8] = a9;
    result[9] = a10;
    *((_WORD *)result + 40) = a2;
    *((void *)result + 11) = a17;
  }
  return result;
}

void *pdf_source_create_png_filter(const void *a1, CGPDFDictionary *a2)
{
  double v4 = (int64x2_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10300405CAD4B32uLL);
  v4->i32[2] = 1;
  v4[2].i64[0] = 8;
  v4[1] = vdupq_n_s64(1uLL);
  if (a2)
  {
    CGPDFInteger value = 0;
    if (CGPDFDictionaryGetInteger(a2, "Predictor", &value))
    {
      if ((unint64_t)(value - 10) >= 6 && (unint64_t)(value - 1) > 1) {
        pdf_error("/%s is outside the range of allowed values.", "Predictor");
      }
      else {
        v4->i32[2] = value;
      }
    }
    if (CGPDFDictionaryGetInteger(a2, "Colors", &value))
    {
      if (value < 1) {
        pdf_error("/%s is outside the range of allowed values.", "Colors");
      }
      else {
        v4[1].i64[0] = value;
      }
    }
    if (CGPDFDictionaryGetInteger(a2, "BitsPerComponent", &value))
    {
      if ((unint64_t)value <= 0x10 && ((1 << value) & 0x10116) != 0) {
        v4[2].i64[0] = value;
      }
      else {
        pdf_error("/%s is outside the range of allowed values.", "BitsPerComponent");
      }
    }
    if (CGPDFDictionaryGetInteger(a2, "Columns", &value))
    {
      if (value < 1)
      {
        pdf_error("/%s is outside the range of allowed values.", "Columns");
        if (!a1) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      v4[1].i64[1] = value;
    }
  }
  if (a1) {
LABEL_18:
  }
    CFRetain(a1);
LABEL_19:
  v4->i64[0] = (uint64_t)a1;
  unint64_t v5 = v4[1].u64[0];
  unint64_t v6 = v4[2].u64[0];
  if (v5 <= 0xFFFFFFFFFFFFFFF8 / v6
    && (unint64_t v7 = v6 * v5, v4[2].i64[1] = (v7 + 7) >> 3, v8 = v4[1].u64[1], v8 <= 0xFFFFFFFFFFFFFFF8 / v7)
    && (size_t v9 = (v8 * v7 + 7) >> 3,
        v4[3].i64[0] = (uint64_t)malloc_type_calloc(1uLL, v9, 0x52B0FB7uLL),
        (__n128 result = CGPDFSourceCreateInternal(v9)) != 0))
  {
    *((unsigned char *)result + 209) = 1;
    long long v11 = *(_OWORD *)&off_1ED0989F0;
    *((_OWORD *)result + 3) = pdf_source_create_png_filter_callbacks;
    *((_OWORD *)result + 4) = v11;
    result[10] = v4;
  }
  else
  {
    png_filter_finalize((void **)v4);
    return 0;
  }
  return result;
}

void png_filter_finalize(void **a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1[6]);
    free(a1);
  }
}

unint64_t png_filter_refill(uint64_t a1, unsigned char *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = CGPDFSourceGetc(*(void *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v11 == -1) {
    return 0;
  }
  int v17 = v11;
  unint64_t v18 = CGPDFSourceRead(*(void *)a1, (uint64_t)a2, a3, v12, v13, v14, v15, v16);
  unint64_t result = 0;
  if (a2 && v18)
  {
    if (a3 > v18) {
      bzero(&a2[v18], a3 - v18);
    }
    size_t v21 = *(void *)(a1 + 40);
    uint64_t v20 = *(char **)(a1 + 48);
    switch(v17)
    {
      case 0:
        break;
      case 1:
        if (v21 < a3)
        {
          uint64_t v22 = a2;
          size_t v23 = a3;
          do
          {
            v22[v21] += *v22;
            --v23;
            ++v22;
          }
          while (v21 != v23);
        }
        break;
      case 2:
        if (a3)
        {
          char v24 = a2;
          size_t v25 = a3;
          do
          {
            char v26 = *v20++;
            *v24++ += v26;
            --v25;
          }
          while (v25);
        }
        break;
      case 3:
        if (v21)
        {
          uint64_t v27 = a2;
          long long v28 = *(unsigned __int8 **)(a1 + 48);
          uint64_t v29 = *(void *)(a1 + 40);
          do
          {
            unsigned int v30 = *v28++;
            *v27++ += v30 >> 1;
            --v29;
          }
          while (v29);
        }
        if (v21 < a3)
        {
          char v31 = a2;
          size_t v32 = a3;
          do
          {
            v31[v21] += (*v31 + v20[v21]) >> 1;
            --v32;
            ++v31;
            ++v20;
          }
          while (v21 != v32);
        }
        break;
      case 4:
        if (a3)
        {
          unint64_t v33 = 0;
          do
          {
            if (v33 >= v21)
            {
              int v34 = a2[v33 - v21];
              int v35 = v20[v33 - v21];
            }
            else
            {
              int v34 = 0;
              int v35 = 0;
            }
            int v36 = v20[v33];
            unsigned int v37 = v36 - v35;
            if (v36 - v35 < 0) {
              unsigned int v37 = v35 - v36;
            }
            unsigned int v38 = v34 - v35;
            if (v34 - v35 < 0) {
              unsigned int v38 = v35 - v34;
            }
            int v39 = v34 + v36 - v35 - v35;
            if (v39 < 0) {
              int v39 = v35 - (v34 + v36 - v35);
            }
            if (v38 <= v39) {
              LOBYTE(v35) = v20[v33];
            }
            if (v37 > v39 || v37 > v38) {
              LOBYTE(v34) = v35;
            }
            a2[v33++] += v34;
          }
          while (a3 != v33);
        }
        break;
      default:
        pdf_error("unrecognized PNG predictor: %d", v17);
        break;
    }
    memmove(*(void **)(a1 + 48), a2, a3);
    return v18;
  }
  return result;
}

uint64_t png_filter_rewind(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGPDFSourceRewind(*a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CGPDFShadingType5Init(void *a1, uint64_t *a2, _OWORD *a3)
{
  if (type5_info_getTypeID_onceToken != -1) {
    dispatch_once(&type5_info_getTypeID_onceToken, &__block_literal_global_550);
  }
  uint64_t result = pdf_create_cftype();
  if (result)
  {
    unint64_t v7 = (void *)result;
    CGPDFObjectRef v14 = 0;
    CGPDFInteger value = 0;
    CGPDFDataFormat format = CGPDFDataFormatRaw;
    *a2 = result;
    *a3 = CGPDFShadingType5Init_type5_callbacks;
    if (a1) {
      unint64_t v8 = (CGPDFDictionary *)a1[3];
    }
    else {
      unint64_t v8 = 0;
    }
    if (!CGPDFDictionaryGetInteger(v8, "BitsPerCoordinate", &value))
    {
      return 0;
    }
    if ((unint64_t)value > 0x20 || ((1 << value) & 0x101011116) == 0)
    {
      return 0;
    }
    v7[3] = value;
    if (!CGPDFDictionaryGetInteger(v8, "BitsPerComponent", &value))
    {
      return 0;
    }
    if ((unint64_t)value > 0x10 || ((1 << value) & 0x11116) == 0)
    {
      return 0;
    }
    v7[4] = value;
    if (!CGPDFDictionaryGetInteger(v8, "VerticesPerRow", &value))
    {
      return 0;
    }
    if ((unint64_t)(value - 0x40000000000000) <= 0xFFC0000000000001)
    {
      return 0;
    }
    v7[5] = value;
    v7[11] = 0;
    if (!CGPDFDictionaryGetObject(v8, "Function", &v14)
      || (uint64_t result = (uint64_t)CGPDFShadingCreateShadingFunction((uint64_t)v14, 1uLL), (v7[11] = result) != 0))
    {
      if (a1) {
        size_t v9 = (void *)a1[5];
      }
      else {
        size_t v9 = 0;
      }
      if (v7[11] && CGColorSpaceGetType(v9) == 7)
      {
        return 0;
      }
      if (v9)
      {
        CFRetain(v9);
        v7[2] = v9;
        if (v7[11]) {
          uint64_t v10 = 2;
        }
        else {
          uint64_t v10 = 2 * *(void *)(v9[3] + 48);
        }
      }
      else
      {
        v7[2] = 0;
        uint64_t v10 = 2 * (v7[11] != 0);
      }
      int v11 = malloc_type_malloc(8 * (v10 + 4), 0x566C45D1uLL);
      __CFSetLastAllocationEventName();
      if (!v11) {
        return 0;
      }
      if (!CGPDFDictionaryGetNumbers(v8, "Decode", (uint64_t)v11, (CGPDFArray *)(v10 + 4)))
      {
        free(v11);
        return 0;
      }
      double v7[6] = *v11;
      v7[8] = v11[1];
      v7[7] = v11[2];
      v7[9] = v11[3];
      memmove(v11, v11 + 4, 8 * v10);
      v7[10] = v11;
      if (a1) {
        uint64_t v12 = (CGPDFStream *)a1[4];
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t result = (uint64_t)CGPDFStreamCopyData(v12, &format);
      v7[12] = result;
      if (result)
      {
        if (format == CGPDFDataFormatRaw) {
          return 1;
        }
        pdf_error("invalid shading data format.");
        return 0;
      }
    }
  }
  return result;
}

void type5_release_info(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t type5_create_shading(CGRect *a1, const void *a2)
{
  double v3 = &CGRectNull;
  p_CGFloat height = &CGRectNull.size.height;
  p_CGFloat y = &CGRectNull.origin.y;
  p_CGSize size = &CGRectNull.size;
  if (a1)
  {
    p_CGSize size = &a1[2].size;
    p_CGFloat y = &a1[2].origin.y;
    double v3 = a1 + 2;
    p_CGFloat height = &a1[2].size.height;
  }
  double v7 = *p_height;
  double x = v3->origin.x;
  double v9 = *p_y;
  double width = p_size->width;
  v21[0] = *(void *)&v3->origin.x;
  *(double *)&v21[1] = v9;
  *(double *)&v21[2] = width;
  *(double *)&v21[3] = v7;
  if (a1)
  {
    CGFloat y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    CGFloat y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  BOOL v17 = x == -8.98846567e307;
  if (v9 != -8.98846567e307) {
    BOOL v17 = 0;
  }
  if (width != 1.79769313e308) {
    BOOL v17 = 0;
  }
  BOOL v18 = v7 == 1.79769313e308 && v17;
  if (a2)
  {
    CFRetain(a2);
    if (y == 0.0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (y == 0.0) {
      return result;
    }
  }
  if (v18) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v21;
  }
  uint64_t result = CGShadingCreateEmpty(0, *(void **)&y, (uint64_t)Components, (uint64_t)v20, v12, v13, v14, v15);
  *(void *)(result + 80) = a2;
  *(_OWORD *)(result + 96) = type5_create_shading_type5_drawing_callbacks;
  *(void *)(result + 112) = off_1ED0992F8;
  return result;
}

void cg_shading_type5_release(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void cg_shading_type5_draw(uint64_t a1, CGContextRef c)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40) > 0x1000000uLL) {
    return;
  }
  uint64_t v3 = a1;
  uint64_t v128 = 0;
  memset(&v127, 0, sizeof(v127));
  double v126 = 0;
  float v131 = 0;
  BOOL v132 = 0;
  float v130 = 0;
  CGContextSetFillColorSpace(c, *(CGColorSpaceRef *)(a1 + 16));
  CGContextSetStrokeColorSpace(c, *(CGColorSpaceRef *)(v3 + 16));
  CGContextGetCTM(&v129, c);
  v125[0] = *(float64x2_t *)&v129.a;
  v125[1] = *(float64x2_t *)&v129.c;
  v125[2] = *(float64x2_t *)&v129.tx;
  double v4 = CGTriangleMeshCreate(*(void **)(v3 + 16), *(const void **)(v3 + 88));
  unint64_t v122 = v4;
  CGContextRef v117 = c;
  if (v4) {
    uint64_t v5 = v4[1];
  }
  else {
    uint64_t v5 = 0;
  }
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v3 + 96));
  CFIndex Length = CFDataGetLength(*(CFDataRef *)(v3 + 96));
  double v118 = &v113;
  is_mul_ok(*(void *)(v3 + 40), 0x90uLL);
  double v9 = (char *)MEMORY[0x1F4188790](Length, v8);
  uint64_t v14 = (char *)&v113 - v13 - 15;
  if (v11 <= 0x1C71C71C71C71C6) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v11 - 0x1C71C71C71C71C7 >= 0xFE38E38E38E38E9ELL)
  {
    double v9 = (char *)malloc_type_malloc(16 * v10, 0x2429D2AuLL);
    uint64_t v15 = v9;
  }
  is_mul_ok(*(void *)(v3 + 40), 0x90uLL);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v20 = (char *)&v113 - v19 - 15;
  if (v17 <= 0x1C71C71C71C71C6) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = 0;
  }
  if (v17 - 0x1C71C71C71C71C7 >= 0xFE38E38E38E38E9ELL) {
    size_t v21 = (char *)malloc_type_malloc(16 * v16, 0xCCA3497AuLL);
  }
  if (!v15) {
    goto LABEL_84;
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  unsigned int v24 = 0;
  size_t v25 = &BytePtr[Length];
  char v26 = v15;
  uint8x8_t v123 = v15;
  unint64_t v121 = v21;
  do
  {
    if (!v23 && BytePtr == v25) {
      break;
    }
    uint64_t v27 = *(void *)(v3 + 40);
    if (!v27)
    {
      if (v22) {
        goto LABEL_77;
      }
      goto LABEL_80;
    }
    uint64_t v28 = 0;
    unint64_t v29 = *(void *)(v3 + 24);
    unint64_t v30 = *(void *)(v3 + 32);
    v18.n128_f64[0] = (double)(0xFFFFFFFF >> -(char)v29);
    char v31 = v29 - 24;
    do
    {
      if (v29 < 0x19)
      {
        int v35 = 0;
        unint64_t v36 = v29;
        if (!v29)
        {
          unsigned int v38 = 0;
          goto LABEL_37;
        }
      }
      else
      {
        if (v23 > 0x17)
        {
          unint64_t v33 = v23;
        }
        else
        {
          do
          {
            v24 <<= 8;
            if (BytePtr < v25)
            {
              int v32 = *BytePtr++;
              v24 |= v32;
            }
            unint64_t v33 = v23 + 8;
            BOOL v34 = v23 >= 0x10;
            v23 += 8;
          }
          while (!v34);
        }
        unint64_t v23 = v33 - 24;
        int v35 = ((v24 >> (v33 - 24)) & 0xFFFFFF) << v31;
        unint64_t v36 = v29 - 24;
      }
      while (v23 < v36)
      {
        v24 <<= 8;
        if (BytePtr < v25)
        {
          int v37 = *BytePtr++;
          v24 |= v37;
        }
        v23 += 8;
      }
      v23 -= v36;
      unsigned int v38 = (v24 >> v23) & (0xFFFFFFFF >> -(char)v36);
LABEL_37:
      int v39 = (double *)&v26[144 * v28];
      *int v39 = *(double *)(v3 + 48)
           + (*(double *)(v3 + 64) - *(double *)(v3 + 48)) * (double)(v38 | v35) / v18.n128_f64[0];
      if (v29 < 0x19)
      {
        int v42 = 0;
        unint64_t v43 = v29;
        if (!v29) {
          goto LABEL_53;
        }
      }
      else
      {
        if (v23 > 0x17)
        {
          unint64_t v41 = v23;
        }
        else
        {
          do
          {
            v24 <<= 8;
            if (BytePtr < v25)
            {
              int v40 = *BytePtr++;
              v24 |= v40;
            }
            unint64_t v41 = v23 + 8;
            BOOL v34 = v23 >= 0x10;
            v23 += 8;
          }
          while (!v34);
        }
        unint64_t v23 = v41 - 24;
        int v42 = ((v24 >> (v41 - 24)) & 0xFFFFFF) << v31;
        unint64_t v43 = v29 - 24;
      }
      while (v23 < v43)
      {
        v24 <<= 8;
        if (BytePtr < v25)
        {
          int v44 = *BytePtr++;
          v24 |= v44;
        }
        v23 += 8;
      }
      v23 -= v43;
      LODWORD(v43) = (v24 >> v23) & (0xFFFFFFFF >> -(char)v43);
LABEL_53:
      v39[1] = *(double *)(v3 + 56)
             + (*(double *)(v3 + 72) - *(double *)(v3 + 56)) * (double)(v43 | v42) / v18.n128_f64[0];
      if (v5)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v39 + 2;
        uint64_t v47 = *(void *)(v3 + 80);
        while (v30 < 0x19)
        {
          int v50 = 0;
          unint64_t v51 = v30;
          if (v30) {
            goto LABEL_63;
          }
          unsigned int v53 = 0;
LABEL_71:
          *v46++ = *(double *)(v47 + 16 * v45)
                 + (*(double *)(v47 + 16 * v45 + 8) - *(double *)(v47 + 16 * v45))
                 * (double)(v53 | v50)
                 / (double)(0xFFFFFFFF >> -(char)v30);
          if (++v45 == v5) {
            goto LABEL_72;
          }
        }
        if (v23 > 0x17)
        {
          unint64_t v49 = v23;
        }
        else
        {
          do
          {
            v24 <<= 8;
            if (BytePtr < v25)
            {
              int v48 = *BytePtr++;
              v24 |= v48;
            }
            unint64_t v49 = v23 + 8;
            BOOL v34 = v23 >= 0x10;
            v23 += 8;
          }
          while (!v34);
        }
        unint64_t v23 = v49 - 24;
        int v50 = ((v24 >> (v49 - 24)) & 0xFFFFFF) << (v30 - 24);
        unint64_t v51 = v30 - 24;
LABEL_63:
        while (v23 < v51)
        {
          v24 <<= 8;
          if (BytePtr < v25)
          {
            int v52 = *BytePtr++;
            v24 |= v52;
          }
          v23 += 8;
        }
        v23 -= v51;
        unsigned int v53 = (v24 >> v23) & (0xFFFFFFFF >> -(char)v51);
        goto LABEL_71;
      }
LABEL_72:
      v23 &= 0xFFFFFFFFFFFFFFF8;
      ++v28;
    }
    while (v28 != v27);
    if (!v22 || v27 == 1) {
      goto LABEL_80;
    }
LABEL_77:
    unint64_t v54 = 0;
    unint64_t v124 = v26;
    BOOL v55 = v26;
    uint64_t v56 = v3;
    uint64_t v57 = (uint64_t)v122;
    do
    {
      ++v54;
      float v130 = v22;
      v22 += 144;
      float v131 = v22;
      BOOL v132 = v55;
      CGTriangleMeshAddTriangleWithTrianglePoints(v57, v125, (uint64_t)&v130);
      float v130 = v22;
      float v131 = v55;
      v55 += 144;
      BOOL v132 = v55;
      CGTriangleMeshAddTriangleWithTrianglePoints(v57, v125, (uint64_t)&v130);
    }
    while (v54 < *(void *)(v56 + 40) - 1);
    uint64_t v3 = v56;
    uint64_t v15 = v123;
    size_t v21 = v121;
    char v26 = v124;
LABEL_80:
    if (v26 == v15) {
      size_t v58 = v21;
    }
    else {
      size_t v58 = v15;
    }
    uint64_t v22 = v26;
    char v26 = v58;
  }
  while (v58);
LABEL_84:
  memset(&v129, 0, 24);
  uint64_t v59 = v122;
  if (v122)
  {
    uint64_t v60 = (char *)v122[9];
    if (v60)
    {
      MEMORY[0x1F4188790](v21, v18);
      uint64_t v64 = (char *)&v113 - v61 - 15;
      if (v62 <= 0xFFFFFFFFFFFFFFELL) {
        uint64_t v65 = (char *)&v113 - v61 - 15;
      }
      else {
        uint64_t v65 = 0;
      }
      if (v62 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000102) {
        uint64_t v65 = (char *)malloc_type_malloc(16 * (void)v60, 0x6681A47EuLL);
      }
      is_mul_ok(3 * (void)v60, 0x48uLL);
      size_t v66 = MEMORY[0x1F4188790](216 * (void)v60, v63);
      uint64_t v69 = (char *)&v113 - v68;
      if (v67 <= 0x38E38E38E38E38DLL) {
        unint64_t v70 = (char *)&v113 - v68;
      }
      else {
        unint64_t v70 = 0;
      }
      if (v67 - 0x38E38E38E38E38ELL >= 0xFC71C71C71C71F73) {
        unint64_t v70 = (char *)malloc_type_malloc(v66, 0xB949159DuLL);
      }
      uint64_t v71 = *(void *)(v3 + 16);
      if (v71)
      {
        uint64_t v72 = *(void *)(*(void *)(v71 + 24) + 48);
        if ((unint64_t)(v72 + 1) > 5)
        {
          CGTriangleMeshRelease((uint64_t)v59);
          if (v70 == v69) {
            goto LABEL_127;
          }
LABEL_126:
          free(v70);
          goto LABEL_127;
        }
        uint64_t v114 = v72 + 1;
        unint64_t v115 = v69;
        __double2 v116 = v64;
      }
      else
      {
        unint64_t v115 = v69;
        __double2 v116 = v64;
        uint64_t v72 = 0;
        uint64_t v114 = 1;
      }
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      unint64_t v119 = v70 + 32;
      unint64_t v121 = v65;
      unint64_t v120 = v60;
      do
      {
        uint64_t v76 = &v65[16 * (void)v74];
        *((_DWORD *)v76 + 3) = 0;
        unint64_t v77 = v59[9];
        uint8x8_t v123 = v74;
        if (v77 > (unint64_t)v74)
        {
          uint64_t v78 = 0;
          uint64_t v79 = v59[4];
          uint64_t v80 = v59[7];
          long long v81 = &v73[v59[10]];
          do
          {
            *(void *)((char *)&v129.a + v78) = v80 + v79 * *(void *)&v81[v78];
            v78 += 8;
          }
          while (v78 != 24);
        }
        unint64_t v124 = v73;
        uint64_t v82 = 0;
        int v83 = &v119[72 * v75];
        do
        {
          uint64_t v84 = v75;
          *(_DWORD *)&v76[4 * v82] = v75;
          uint64_t v85 = *((void *)&v129.a + v82);
          unint64_t v86 = &v70[72 * v75];
          *(_OWORD *)unint64_t v86 = *(_OWORD *)v85;
          *((void *)v86 + 2) = 0;
          *((void *)v86 + 3) = 0;
          uint64_t v87 = *(void *)(v3 + 88);
          if (v87)
          {
            uint64_t v128 = *(void *)(v85 + 16);
            CGFunctionEvaluate(v87, (char *)&v128, (double *)&v70[72 * v75 + 32]);
          }
          else if (v72)
          {
            double v88 = (uint64_t *)(v85 + 16);
            int v89 = v83;
            uint64_t v90 = v72;
            do
            {
              uint64_t v91 = *v88++;
              *(void *)int v89 = v91;
              v89 += 8;
              --v90;
            }
            while (v90);
          }
          ++v75;
          *(void *)&v70[72 * v84 + 32 + 8 * v72] = 0x3FF0000000000000;
          ++v82;
          v83 += 72;
        }
        while (v82 != 3);
        uint64_t v74 = v123 + 1;
        uint64_t v73 = v124 + 24;
        int v92 = (int)v120;
        uint64_t v59 = v122;
        uint64_t v65 = v121;
      }
      while (v123 + 1 != v120);
      CGTriangleMeshRelease((uint64_t)v122);
      uint64_t v93 = v114;
      if (RenderTriangleMesh((double *)v70, v75, (int *)v65, v92, v114, (uint64_t *)&v126, &v127.origin.x))
      {
        uint64_t v94 = v117;
        CGContextSaveGState(v117);
        CGContextResetCTM((uint64_t)v94, v95, v96, v97, v98, v99, v100, v101);
        CGSize size = v127.size;
        CGPoint origin = v127.origin;
        uint64_t v104 = v115;
        if (v127.size.width < 0.0 || v127.size.height < 0.0)
        {
          CGRect v134 = CGRectStandardize(v127);
          size_t width = (unint64_t)v134.size.width;
          v134.CGPoint origin = origin;
          v134.CGSize size = size;
          *(CGRect *)(&height - 3) = CGRectStandardize(v134);
        }
        else
        {
          size_t width = (unint64_t)v127.size.width;
          double height = v127.size.height;
        }
        size_t v107 = (unint64_t)height;
        size_t v108 = 8 * v93;
        uint64_t v109 = (uint64_t)v126;
        unint64_t v110 = ((v108 * width) >> 3) * (unint64_t)height;
        check_clients_buffer("CGDataProviderCreateWithData", v126, v110);
        unint64_t v111 = CGDataProviderCreateWithDataInternal(0, v109, v110, (uint64_t)patch_data_release, 0);
        CGImageRef v112 = CGImageCreate(width, v107, 8uLL, v108, (v108 * width) >> 3, *(CGColorSpaceRef *)(v3 + 16), 3u, v111, 0, 0, kCGRenderingIntentDefault);
        CGDataProviderRelease(v111);
        CGImageSetCachingFlags(v112, 1);
        v135.CGPoint origin = origin;
        v135.CGSize size = size;
        CGContextDrawImage(v94, v135, v112);
        CGContextRestoreGState(v94);
        if (v112) {
          CFRelease(v112);
        }
        uint64_t v64 = v116;
        uint64_t v65 = v121;
        if (v70 != v104) {
          goto LABEL_126;
        }
LABEL_127:
        if (v65 != v64) {
LABEL_128:
        }
          free(v65);
      }
      else
      {
        if (v70 != v115) {
          free(v70);
        }
        if (v65 != v116) {
          goto LABEL_128;
        }
      }
    }
  }
}

void patch_data_release(int a1, void *a2)
{
}

uint64_t __type5_info_getTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&type5_info_getTypeID_class);
  type5_info_getTypeID_idouble d = result;
  return result;
}

void type5_info_finalize(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 96);
  if (v2) {
    CFRelease(v2);
  }
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 16));
  uint64_t v3 = *(const void **)(a1 + 88);
  if (v3) {
    CFRelease(v3);
  }
  double v4 = *(void **)(a1 + 80);

  free(v4);
}

double DECODE_RANGE(uint64_t a1, uint64_t a2, uint64_t a3, double result, double a5, double a6)
{
  if (!a3) {
    a5 = 1.0;
  }
  double v6 = 0.0;
  if (a3) {
    double v6 = result;
  }
  double v7 = a5 - v6;
  float v8 = v7;
  float v9 = v6;
  *(float *)a1 = v9;
  *(float *)(a1 + 4) = v8;
  if (!a2)
  {
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    return result;
  }
  double v10 = v7 * a6;
  if (!a3)
  {
    double v15 = (double)~(-1 << a2);
    double v16 = v10 / v15;
    double v17 = a6 * 0.0;
    double v18 = a6 * 0.0 + v16 * v15;
    double v19 = fabs(v16);
    if (v19 <= (double)~(-1 << (30 - a2)))
    {
      unsigned int v23 = __clz((int)v19) - 17;
      if ((int)v19 >= 0x8000) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = v23;
      }
      double v22 = (double)(1 << v20);
    }
    else
    {
      unsigned int v20 = 0;
      BOOL v21 = v16 <= 0.0;
      double v16 = -32768.0;
      if (!v21) {
        double v16 = 32767.0;
      }
      double v22 = 1.0;
    }
    if (v18 >= v17)
    {
      if (v17 <= 65535.0)
      {
        if (v18 < 0.0)
        {
LABEL_30:
          unsigned int v20 = 0;
          double v17 = 0.0;
          double v16 = 0.0;
          double v22 = 0.0;
        }
LABEL_31:
        int v24 = (int)(v17 * v22);
        uint64_t result = v16 * v22;
        *(_DWORD *)(a1 + 8) = v24;
        *(_DWORD *)(a1 + 12) = (int)(v16 * v22);
        *(_DWORD *)(a1 + 16) = v20;
        return result;
      }
    }
    else if (v18 <= 65535.0)
    {
      if (v17 >= 0.0) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    unsigned int v20 = 0;
    double v22 = 1.0;
    double v16 = 0.0;
    double v17 = 65535.0;
    goto LABEL_31;
  }
  uint64_t v11 = 1 << a2;
  double v12 = v10 / (double)(unint64_t)(v11 - 1);
  *(void *)(a1 + 8) = 0;
  uint64_t result = result * a6;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v13 = (unsigned char *)(a1 + 20);
  do
  {
    if (result >= 0.0)
    {
      int v14 = (int)result;
      if (result > 255.0) {
        LOBYTE(v14) = -1;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
    }
    *v13++ = v14;
    uint64_t result = v12 + result;
    --v11;
  }
  while (v11);
  return result;
}

int8x8_t *decode_swap(uint64_t a1, int8x8_t *a2, int8x8_t *a3, int a4)
{
  if (a1 == 2)
  {
    float v8 = a2;
    if (a4 < 8)
    {
      int v10 = a4;
    }
    else
    {
      do
      {
        int8x8_t v9 = *a3++;
        int v10 = a4 - 8;
        *v8++ = vrev16_s8(v9);
        BOOL v7 = a4 > 0xF;
        a4 -= 8;
      }
      while (v7);
    }
    if (v10 >= 1)
    {
      unsigned int v13 = v10 + 2;
      do
      {
        unsigned int v14 = a3->u16[0];
        a3 = (int8x8_t *)((char *)a3 + 2);
        v8->i16[0] = bswap32(v14) >> 16;
        float v8 = (int8x8_t *)((char *)v8 + 2);
        v13 -= 2;
      }
      while (v13 > 2);
    }
    return a2;
  }
  if (a1 == 4)
  {
    double v4 = (int8x16_t *)a2;
    if (a4 < 16)
    {
      int v6 = a4;
    }
    else
    {
      do
      {
        int8x16_t v5 = *(int8x16_t *)a3->i8;
        a3 += 2;
        int v6 = a4 - 16;
        *v4++ = vrev32q_s8(v5);
        BOOL v7 = a4 > 0x1F;
        a4 -= 16;
      }
      while (v7);
    }
    if (v6 >= 1)
    {
      unsigned int v11 = v6 + 4;
      do
      {
        unsigned int v12 = a3->i32[0];
        a3 = (int8x8_t *)((char *)a3 + 4);
        v4->i32[0] = bswap32(v12);
        double v4 = (int8x16_t *)((char *)v4 + 4);
        v11 -= 4;
      }
      while (v11 > 4);
    }
    return a2;
  }
  return a3;
}

uint64_t decode_byte_8bpc_1(uint64_t result, int a2, int a3, uint64_t a4, int a5, unsigned char *a6, int a7, uint64_t a8, void *a9, int a10)
{
  uint64_t v10 = a5 - (uint64_t)(a3 * (int)result);
  uint64_t v11 = a7 - (uint64_t)(int)result;
  if (a8)
  {
    if (a8 == 2)
    {
      uint64_t v15 = *a9 + 20;
      do
      {
        int v16 = result + 1;
        do
        {
          *a6++ = *(unsigned char *)(v15 + *(unsigned __int8 *)(a4 + a10));
          a4 += a3;
          --v16;
        }
        while (v16 > 1);
        a4 += (int)v10;
        a6 += (int)v11;
        BOOL v13 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v13 | (a2 == 0)));
    }
    else if (a8 == 1)
    {
      do
      {
        int v12 = result + 1;
        do
        {
          *a6++ = ~*(unsigned char *)(a4 + a10);
          a4 += a3;
          --v12;
        }
        while (v12 > 1);
        a4 += (int)v10;
        a6 += (int)v11;
        BOOL v13 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v13 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      int v14 = result + 1;
      do
      {
        *a6++ = *(unsigned char *)(a4 + a10);
        a4 += a3;
        --v14;
      }
      while (v14 > 1);
      a4 += v10;
      a6 += v11;
      BOOL v13 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v13 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_byte_8bpc_3a(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, unsigned char *a7, int a8, unsigned char *a9, int a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v15 = a6 - (uint64_t)(a3 * (int)result);
  int v16 = -3 * result + a8;
  uint64_t v17 = a10 - (uint64_t)(int)result;
  if (a11)
  {
    if (a11 == 2)
    {
      uint64_t v31 = 8;
      uint64_t v32 = 16;
      if (a13 > a14) {
        uint64_t v31 = 16;
      }
      uint64_t v33 = *(void *)(a12 + v31);
      uint64_t v34 = 24;
      if (a13 > a14) {
        uint64_t v32 = 24;
      }
      if (a14 <= a13) {
        uint64_t v34 = 0;
      }
      uint64_t v35 = *(void *)(a12 + v34);
      uint64_t v36 = *(void *)(a12 + 8 * (a13 > a14)) + 20;
      uint64_t v37 = a13 + (uint64_t)a4;
      uint64_t v38 = 2 * a4;
      uint64_t v39 = *(void *)(a12 + v32) + 20;
      uint64_t v40 = v38 + a13;
      uint64_t result = (result + 1);
      do
      {
        int v41 = result;
        do
        {
          char v42 = *(unsigned char *)(v36 + *(unsigned __int8 *)(a5 + a13));
          char v43 = *(unsigned char *)(v33 + 20 + *(unsigned __int8 *)(a5 + v37));
          char v44 = *(unsigned char *)(v39 + *(unsigned __int8 *)(a5 + v40));
          *a9++ = *(unsigned char *)(v35 + 20 + *(unsigned __int8 *)(a5 + a14));
          *a7 = v42;
          a7[1] = v43;
          a7[2] = v44;
          a5 += a3;
          a7 += 3;
          --v41;
        }
        while (v41 > 1);
        a5 += (int)v15;
        a7 += v16;
        a9 += (int)v17;
        BOOL v24 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v24 | (a2 == 0)));
    }
    else if (a11 == 1)
    {
      uint64_t v18 = a13 + (uint64_t)a4;
      int v19 = result + 1;
      uint64_t v20 = 2 * a4 + a13;
      do
      {
        LODWORD(result) = v19;
        do
        {
          char v21 = *(unsigned char *)(a5 + a13);
          char v22 = *(unsigned char *)(a5 + v18);
          char v23 = *(unsigned char *)(a5 + v20);
          *a9++ = ~*(unsigned char *)(a5 + a14);
          *a7 = ~v21;
          a7[1] = ~v22;
          a7[2] = ~v23;
          a5 += a3;
          a7 += 3;
          uint64_t result = (result - 1);
        }
        while ((int)result > 1);
        a5 += (int)v15;
        a7 += v16;
        a9 += (int)v17;
        BOOL v24 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v24 | (a2 == 0)));
    }
  }
  else
  {
    uint64_t v25 = a13 + (uint64_t)a4;
    int v26 = result + 1;
    uint64_t v27 = 2 * a4 + a13;
    do
    {
      LODWORD(result) = v26;
      do
      {
        char v28 = *(unsigned char *)(a5 + a13);
        char v29 = *(unsigned char *)(a5 + v25);
        char v30 = *(unsigned char *)(a5 + v27);
        *a9++ = *(unsigned char *)(a5 + a14);
        *a7 = v28;
        a7[1] = v29;
        a7[2] = v30;
        a5 += a3;
        a7 += 3;
        uint64_t result = (result - 1);
      }
      while ((int)result > 1);
      a5 += v15;
      a7 += v16;
      a9 += v17;
      BOOL v24 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v24 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_byte_8bpc_4(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, unsigned char *a7, int a8, uint64_t a9, void *a10, int a11)
{
  uint64_t v11 = a6 - (uint64_t)(a3 * (int)result);
  uint64_t v12 = a8 - 4 * (int)result;
  if (a9)
  {
    if (a9 == 2)
    {
      uint64_t v30 = *a10 + 20;
      uint64_t v31 = a10[1] + 20;
      uint64_t v32 = a10[2] + 20;
      uint64_t v33 = a10[3] + 20;
      uint64_t v34 = a11 + (uint64_t)a4;
      uint64_t v35 = 2 * a4 + a11;
      uint64_t v36 = v35 + a4;
      uint64_t result = (result + 1);
      do
      {
        int v37 = result;
        do
        {
          char v38 = *(unsigned char *)(v31 + *(unsigned __int8 *)(a5 + v34));
          char v39 = *(unsigned char *)(v32 + *(unsigned __int8 *)(a5 + v35));
          char v40 = *(unsigned char *)(v33 + *(unsigned __int8 *)(a5 + v36));
          *a7 = *(unsigned char *)(v30 + *(unsigned __int8 *)(a5 + a11));
          a7[1] = v38;
          a7[2] = v39;
          a5 += a3;
          a7[3] = v40;
          a7 += 4;
          --v37;
        }
        while (v37 > 1);
        a5 += (int)v11;
        a7 += (int)v12;
        BOOL v21 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v21 | (a2 == 0)));
    }
    else if (a9 == 1)
    {
      uint64_t v13 = a11 + (uint64_t)a4;
      uint64_t v14 = 2 * a4 + a11;
      uint64_t v15 = a3;
      int v16 = result + 1;
      uint64_t v17 = v14 + a4;
      do
      {
        int v18 = v16;
        do
        {
          uint64_t result = *(unsigned __int8 *)(a5 + v13);
          char v19 = *(unsigned char *)(a5 + v14);
          char v20 = *(unsigned char *)(a5 + v17);
          *a7 = ~*(unsigned char *)(a5 + a11);
          a7[1] = ~(_BYTE)result;
          a7[2] = ~v19;
          a5 += v15;
          a7[3] = ~v20;
          a7 += 4;
          --v18;
        }
        while (v18 > 1);
        a5 += (int)v11;
        a7 += (int)v12;
        BOOL v21 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v21 | (a2 == 0)));
    }
  }
  else
  {
    uint64_t v22 = a11 + (uint64_t)a4;
    uint64_t v23 = 2 * a4 + a11;
    uint64_t v24 = v23 + a4;
    uint64_t v25 = a3;
    int v26 = result + 1;
    do
    {
      int v27 = v26;
      do
      {
        uint64_t result = *(unsigned __int8 *)(a5 + v22);
        char v28 = *(unsigned char *)(a5 + v23);
        char v29 = *(unsigned char *)(a5 + v24);
        *a7 = *(unsigned char *)(a5 + a11);
        a7[1] = result;
        a7[2] = v28;
        a5 += v25;
        a7[3] = v29;
        a7 += 4;
        --v27;
      }
      while (v27 > 1);
      a5 += v11;
      a7 += v12;
      BOOL v21 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v21 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_byte_8bpc_4a(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, unsigned char *a7, int a8, unsigned char *a9, int a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v15 = a6 - (uint64_t)(a3 * (int)result);
  uint64_t v16 = a8 - 4 * (int)result;
  uint64_t v17 = a10 - (uint64_t)(int)result;
  if (a11)
  {
    if (a11 == 2)
    {
      uint64_t v35 = 8;
      uint64_t v36 = 16;
      if (a13 > a14) {
        uint64_t v35 = 16;
      }
      uint64_t v37 = *(void *)(a12 + v35);
      uint64_t v38 = 24;
      if (a13 > a14) {
        uint64_t v36 = 24;
      }
      uint64_t v39 = *(void *)(a12 + v36);
      if (a13 > a14) {
        uint64_t v38 = 32;
      }
      uint64_t v40 = a3;
      uint64_t v41 = *(void *)(a12 + 8 * (a13 > a14)) + 20;
      uint64_t v42 = v37 + 20;
      uint64_t v43 = v39 + 20;
      uint64_t v44 = *(void *)(a12 + v38) + 20;
      uint64_t v45 = *(void *)(a12 + 32 * (a14 > a13)) + 20;
      uint64_t result = (result + 1);
      uint64_t v46 = a13 + (uint64_t)a4;
      uint64_t v47 = 2 * a4 + a13;
      uint64_t v48 = v47 + a4;
      do
      {
        int v49 = result;
        do
        {
          char v50 = *(unsigned char *)(v41 + *(unsigned __int8 *)(a5 + a13));
          char v51 = *(unsigned char *)(v42 + *(unsigned __int8 *)(a5 + v46));
          char v52 = *(unsigned char *)(v43 + *(unsigned __int8 *)(a5 + v47));
          char v53 = *(unsigned char *)(v44 + *(unsigned __int8 *)(a5 + v48));
          *a9++ = *(unsigned char *)(v45 + *(unsigned __int8 *)(a5 + a14));
          *a7 = v50;
          a7[1] = v51;
          a7[2] = v52;
          a5 += v40;
          a7[3] = v53;
          a7 += 4;
          --v49;
        }
        while (v49 > 1);
        a5 += (int)v15;
        a7 += (int)v16;
        a9 += (int)v17;
        BOOL v26 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v26 | (a2 == 0)));
    }
    else if (a11 == 1)
    {
      uint64_t v18 = 2 * a4 + a13;
      uint64_t v19 = a3;
      int v20 = result + 1;
      uint64_t result = v18 + a4;
      do
      {
        int v21 = v20;
        do
        {
          char v22 = *(unsigned char *)(a5 + a13);
          char v23 = *(unsigned char *)(a5 + a13 + (uint64_t)a4);
          char v24 = *(unsigned char *)(a5 + v18);
          char v25 = *(unsigned char *)(a5 + result);
          *a9++ = ~*(unsigned char *)(a5 + a14);
          *a7 = ~v22;
          a7[1] = ~v23;
          a7[2] = ~v24;
          a5 += v19;
          a7[3] = ~v25;
          a7 += 4;
          --v21;
        }
        while (v21 > 1);
        a5 += (int)v15;
        a7 += v16;
        a9 += v17;
        BOOL v26 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v26 | (a2 == 0)));
    }
  }
  else
  {
    uint64_t v27 = 2 * a4 + a13;
    uint64_t v28 = a3;
    int v29 = result + 1;
    uint64_t result = v27 + a4;
    do
    {
      int v30 = v29;
      do
      {
        char v31 = *(unsigned char *)(a5 + a13);
        char v32 = *(unsigned char *)(a5 + a13 + (uint64_t)a4);
        char v33 = *(unsigned char *)(a5 + v27);
        char v34 = *(unsigned char *)(a5 + result);
        *a9++ = *(unsigned char *)(a5 + a14);
        *a7 = v31;
        a7[1] = v32;
        a7[2] = v33;
        a5 += v28;
        a7[3] = v34;
        a7 += 4;
        --v30;
      }
      while (v30 > 1);
      a5 += v15;
      a7 += (int)v16;
      a9 += (int)v17;
      BOOL v26 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v26 | (a2 == 0)));
  }
  return result;
}

void *decode_byte_nbpc_N(int a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, void *a8, int a9)
{
  int v9 = 0;
  if (a2 >= 8) {
    int v10 = 8;
  }
  else {
    int v10 = a2;
  }
  int v11 = a9 * a1;
  uint64_t v12 = (unsigned __int8 *)(a4 + (a5 >> 3));
  int v13 = *v12;
  int v14 = 8 - (a5 & 7);
  int v15 = a9 * a2 - a3;
  uint64_t result = a8;
  do
  {
    char v17 = v14 - v10;
    if (v14 - v10 < 0)
    {
      LODWORD(v18) = -v14 >> 3;
      unsigned int v19 = -v14 & 0xFFFFFFF8;
      if (v14 >= -7) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v18;
      }
      v12 += v18;
      if (v14 >= -7) {
        unsigned int v19 = 0;
      }
      v14 += v19;
      do
      {
        int v20 = *++v12;
        v14 += 8;
        int v13 = v20 | (v13 << 8);
      }
      while (v14 - v10 < 0);
      char v17 = v14 - v10;
    }
    int v21 = v9 + 1;
    *(unsigned char *)(a6 + v9) = *(unsigned char *)(*result + ((v13 >> v17) & ~(-1 << v10)) + 20);
    if (v9 + 1 >= a9) {
      int v9 = 0;
    }
    else {
      ++v9;
    }
    if (v21 >= a9) {
      int v22 = v15;
    }
    else {
      int v22 = 0;
    }
    if (v21 >= a9) {
      int v23 = a7;
    }
    else {
      int v23 = 0;
    }
    v14 += v22 - a2;
    a6 += v23;
    uint64_t result = &a8[v9];
    --v11;
  }
  while (v11);
  return result;
}

uint64_t decode_byte_nbpc_1(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  if (a2 >= 8) {
    int v7 = 8;
  }
  else {
    int v7 = a2;
  }
  uint64_t v8 = a6 - 1;
  int v9 = (unsigned __int8 *)(a4 + (a5 >> 3));
  int v10 = 8 - (a5 & 7);
  int v11 = *v9;
  do
  {
    char v12 = v10 - v7;
    if (v10 - v7 < 0)
    {
      LODWORD(v13) = -v10 >> 3;
      unsigned int v14 = -v10 & 0xFFFFFFF8;
      if (v10 >= -7) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v13;
      }
      v9 += v13;
      if (v10 >= -7) {
        unsigned int v14 = 0;
      }
      v10 += v14;
      do
      {
        int v15 = *++v9;
        v10 += 8;
        int v11 = v15 | (v11 << 8);
      }
      while (v10 - v7 < 0);
      char v12 = v10 - v7;
    }
    v10 -= a3;
    *(unsigned char *)++uint64_t v8 = *(unsigned char *)(a7 + ((v11 >> v12) & ~(-1 << v7)) + 20);
    uint64_t result = (result - 1);
  }
  while (result);
  return result;
}

uint64_t decode_byte_16bpc(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  int v8 = a8 * result;
  uint64_t v9 = a4;
  if (a7 == 1)
  {
    while (1)
    {
      uint64_t v10 = a3 - 2;
      if (v8 >= 5) {
        break;
      }
      if (v8 > 0)
      {
        uint64_t v17 = a5 - 1;
        int v16 = v8;
LABEL_8:
        uint64_t v18 = (char *)(v10 + 2);
        unsigned int v19 = (unsigned char *)(v17 + 1);
        unsigned int v20 = v16 + 1;
        do
        {
          char v21 = *v18;
          v18 += 2;
          *v19++ = ~v21;
          --v20;
        }
        while (v20 > 1);
      }
      a3 += v9;
      a5 += a6;
      if (!--a2) {
        return result;
      }
    }
    uint64_t v11 = 0;
    unsigned int v12 = v8 + 4;
    do
    {
      char v13 = *(unsigned char *)(v10 + 8);
      v10 += 8;
      char v14 = ~*(unsigned char *)(v10 - 4);
      uint64_t result = ~*(unsigned __int8 *)(v10 - 2);
      int v15 = (unsigned char *)(a5 + v11);
      unsigned char *v15 = ~*(unsigned char *)(v10 - 6);
      v15[1] = v14;
      v15[2] = result;
      v15[3] = ~v13;
      v11 += 4;
      v12 -= 4;
    }
    while (v12 > 8);
    int v16 = v8 - v11;
    uint64_t v17 = a5 + v11 - 1;
    goto LABEL_8;
  }
  do
  {
    uint64_t v22 = a3 - 2;
    if (v8 < 5)
    {
      if (v8 <= 0) {
        goto LABEL_20;
      }
      uint64_t v29 = a5 - 1;
      int v28 = v8;
    }
    else
    {
      uint64_t v23 = 0;
      unsigned int v24 = v8 + 4;
      do
      {
        char v25 = *(unsigned char *)(v22 + 8);
        v22 += 8;
        char v26 = *(unsigned char *)(v22 - 4);
        uint64_t result = *(unsigned __int8 *)(v22 - 2);
        uint64_t v27 = (unsigned char *)(a5 + v23);
        *uint64_t v27 = *(unsigned char *)(v22 - 6);
        v27[1] = v26;
        v27[2] = result;
        v27[3] = v25;
        v24 -= 4;
        v23 += 4;
      }
      while (v24 > 8);
      int v28 = v8 - v23;
      uint64_t v29 = a5 + v23 - 1;
    }
    unsigned int v30 = v28 + 1;
    char v31 = (unsigned char *)(v29 + 1);
    char v32 = (char *)(v22 + 2);
    do
    {
      char v33 = *v32;
      v32 += 2;
      *v31++ = v33;
      --v30;
    }
    while (v30 > 1);
LABEL_20:
    a3 += v9;
    a5 += a6;
    --a2;
  }
  while (a2);
  return result;
}

uint64_t decode_byte_8bpc_N(int a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t *a8, int a9)
{
  uint64_t v9 = 0;
  int v10 = a9 * a1;
  uint64_t v11 = (unsigned __int8 *)(a4 - a3);
  uint64_t v12 = a6 - 1;
  LODWORD(result) = a5 - a9 * a1 * a3;
  switch(a9)
  {
    case 1:
      uint64_t v9 = *a8;
      goto LABEL_3;
    case 2:
      uint64_t v14 = *a8;
      uint64_t v9 = a8[1];
      uint64_t v15 = v9;
      uint64_t v16 = *a8;
      break;
    case 3:
      goto LABEL_6;
    case 4:
      uint64_t v9 = a8[3];
LABEL_6:
      uint64_t v16 = *a8;
      uint64_t v15 = a8[1];
      uint64_t v14 = a8[2];
      break;
    default:
LABEL_3:
      uint64_t v14 = v9;
      uint64_t v15 = v9;
      uint64_t v16 = v9;
      break;
  }
  int v17 = 0;
  uint64_t result = (int)result;
  do
  {
    if (v9)
    {
      if (v10 < 4)
      {
LABEL_18:
        int v23 = v10;
      }
      else
      {
        unsigned int v18 = v10;
        do
        {
          uint64_t v19 = v11[a3];
          uint64_t v20 = v11[2 * a3];
          uint64_t v21 = v11[3 * a3];
          v11 += 4 * a3;
          char v22 = *(unsigned char *)(v16 + v19 + 20);
          LOBYTE(v20) = *(unsigned char *)(v15 + v20 + 20);
          LOBYTE(v21) = *(unsigned char *)(v14 + v21 + 20);
          *(unsigned char *)(v12 + 4) = *(unsigned char *)(v9 + *v11 + 20);
          v12 += 4;
          int v23 = v18 - 4;
          *(unsigned char *)(v12 - 3) = v22;
          *(unsigned char *)(v12 - 2) = v20;
          *(unsigned char *)(v12 - 1) = v21;
          BOOL v24 = v18 > 7;
          v18 -= 4;
        }
        while (v24);
      }
      uint64_t v16 = a8[v17];
      if (v23 >= 1)
      {
        unsigned int v28 = v23 + 1;
        do
        {
          v11 += a3;
          *(unsigned char *)++uint64_t v12 = *(unsigned char *)(v16 + *v11 + 20);
          if (v17 + 1 < a9) {
            ++v17;
          }
          else {
            int v17 = 0;
          }
          uint64_t v16 = a8[v17];
          --v28;
        }
        while (v28 > 1);
      }
      goto LABEL_25;
    }
    if (!v14) {
      goto LABEL_18;
    }
    if (v10 >= 1)
    {
      unsigned int v25 = v10 + 3;
      do
      {
        uint64_t v26 = v11[a3];
        uint64_t v27 = v11[2 * a3];
        v11 += 3 * a3;
        LOBYTE(v26) = *(unsigned char *)(v16 + v26 + 20);
        LOBYTE(v27) = *(unsigned char *)(v15 + v27 + 20);
        *(unsigned char *)(v12 + 3) = *(unsigned char *)(v14 + *v11 + 20);
        v12 += 3;
        *(unsigned char *)(v12 - 2) = v26;
        *(unsigned char *)(v12 - 1) = v27;
        v25 -= 3;
      }
      while (v25 > 3);
    }
LABEL_25:
    v11 += (int)result;
    v12 += a7 - v10;
    --a2;
  }
  while (a2);
  return result;
}

uint64_t decode_word_16bpc_1(uint64_t result, int a2, int a3, uint64_t a4, int a5, _WORD *a6, int a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v10 = a5 - (uint64_t)(a3 * (int)result);
  uint64_t v11 = a7 - 2 * (int)result;
  if (a8)
  {
    if (a8 == 2)
    {
      int v16 = *(_DWORD *)(*(void *)a9 + 8);
      int v15 = *(_DWORD *)(*(void *)a9 + 12);
      int v17 = *(_DWORD *)(*(void *)a9 + 16);
      int v18 = result + 1;
      do
      {
        int v19 = v18;
        do
        {
          unsigned int v20 = bswap32(*(unsigned __int16 *)(a4 + a10));
          a4 += a3;
          LODWORD(result) = ((int)(v16 + v15 * HIWORD(v20)) >> v17) & ~((int)(v16 + v15 * HIWORD(v20)) >> v17 >> 31);
          if (result >= 0xFFFF) {
            uint64_t result = 0xFFFFLL;
          }
          else {
            uint64_t result = result;
          }
          *a6++ = result;
          --v19;
        }
        while (v19 > 1);
        a4 += (int)v10;
        a6 = (_WORD *)((char *)a6 + (int)v11);
        BOOL v13 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v13 | (a2 == 0)));
    }
    else if (a8 == 1)
    {
      do
      {
        int v12 = result + 1;
        do
        {
          *a6++ = bswap32(~*(unsigned __int16 *)(a4 + a10)) >> 16;
          a4 += a3;
          --v12;
        }
        while (v12 > 1);
        a4 += (int)v10;
        a6 = (_WORD *)((char *)a6 + (int)v11);
        BOOL v13 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v13 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      int v14 = result + 1;
      do
      {
        *a6++ = bswap32(*(unsigned __int16 *)(a4 + a10)) >> 16;
        a4 += a3;
        --v14;
      }
      while (v14 > 1);
      a4 += v10;
      a6 = (_WORD *)((char *)a6 + v11);
      BOOL v13 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v13 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_word_16bpc_3(uint64_t result, int a2, int a3, uint64_t a4, int a5, _WORD *a6, int a7, uint64_t a8, void *a9, int a10)
{
  uint64_t v10 = a5 - (uint64_t)(a3 * (int)result);
  int v11 = a7 - 6 * result;
  if (a8)
  {
    if (a8 == 2)
    {
      int v19 = (_DWORD *)a9[1];
      unsigned int v20 = (_DWORD *)a9[2];
      uint64_t v21 = a3;
      int v23 = *(_DWORD *)(*a9 + 8);
      int v22 = *(_DWORD *)(*a9 + 12);
      int v25 = v19[2];
      int v24 = v19[3];
      int v27 = v20[2];
      int v26 = v20[3];
      int v28 = *(_DWORD *)(*a9 + 16);
      int v29 = v19[4];
      int v30 = v20[4];
      uint64_t result = (result + 1);
      do
      {
        int v31 = result;
        do
        {
          unsigned int v32 = bswap32(*(unsigned __int16 *)(a4 + a10));
          unsigned int v33 = bswap32(*(unsigned __int16 *)(a4 + a10 + 2));
          unsigned int v34 = bswap32(*(unsigned __int16 *)(a4 + a10 + 4));
          a4 += v21;
          unsigned int v35 = ((int)(v23 + v22 * HIWORD(v32)) >> v28) & ~((int)(v23 + v22 * HIWORD(v32)) >> v28 >> 31);
          unsigned int v36 = ((int)(v25 + v24 * HIWORD(v33)) >> v29) & ~((int)(v25 + v24 * HIWORD(v33)) >> v29 >> 31);
          unsigned int v37 = ((int)(v27 + v26 * HIWORD(v34)) >> v30) & ~((int)(v27 + v26 * HIWORD(v34)) >> v30 >> 31);
          if (v35 >= 0xFFFF) {
            LOWORD(v35) = -1;
          }
          if (v36 >= 0xFFFF) {
            LOWORD(v36) = -1;
          }
          if (v37 >= 0xFFFF) {
            LOWORD(v37) = -1;
          }
          *a6 = v35;
          a6[1] = v36;
          a6[2] = v37;
          a6 += 3;
          --v31;
        }
        while (v31 > 1);
        a4 += (int)v10;
        a6 = (_WORD *)((char *)a6 + v11);
        BOOL v15 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v15 | (a2 == 0)));
    }
    else if (a8 == 1)
    {
      do
      {
        int v12 = result + 1;
        do
        {
          int v13 = *(unsigned __int16 *)(a4 + a10 + 2);
          int v14 = *(unsigned __int16 *)(a4 + a10 + 4);
          *a6 = bswap32(~*(unsigned __int16 *)(a4 + a10)) >> 16;
          a6[1] = bswap32(~v13) >> 16;
          a6[2] = bswap32(~v14) >> 16;
          a4 += a3;
          a6 += 3;
          --v12;
        }
        while (v12 > 1);
        a4 += (int)v10;
        a6 = (_WORD *)((char *)a6 + v11);
        BOOL v15 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v15 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      int v16 = result + 1;
      do
      {
        unsigned int v17 = bswap32(*(unsigned __int16 *)(a4 + a10 + 2));
        unsigned int v18 = bswap32(*(unsigned __int16 *)(a4 + a10 + 4));
        *a6 = bswap32(*(unsigned __int16 *)(a4 + a10)) >> 16;
        a6[1] = HIWORD(v17);
        a6[2] = HIWORD(v18);
        a4 += a3;
        a6 += 3;
        --v16;
      }
      while (v16 > 1);
      a4 += v10;
      a6 = (_WORD *)((char *)a6 + v11);
      BOOL v15 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v15 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_word_16bpc_4(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint16x4_t *a6, int a7, uint64_t a8, void *a9, int a10)
{
  uint64_t v10 = a5 - (uint64_t)(a3 * (int)result);
  uint64_t v11 = a7 - 8 * (int)result;
  if (a8)
  {
    if (a8 == 2)
    {
      unsigned int v17 = (_DWORD *)a9[1];
      unsigned int v18 = (_DWORD *)a9[2];
      int v19 = (_DWORD *)a9[3];
      v20.i32[0] = *(_DWORD *)(*a9 + 8);
      v21.i32[0] = *(_DWORD *)(*a9 + 12);
      v20.i32[1] = v17[2];
      v20.i32[2] = v18[2];
      v20.i32[3] = v19[2];
      v21.i32[1] = v17[3];
      v21.i32[2] = v18[3];
      v21.i32[3] = v19[3];
      v22.i32[0] = *(_DWORD *)(*a9 + 16);
      v22.i32[1] = v17[4];
      v22.i32[2] = v18[4];
      v22.i32[3] = v19[4];
      int32x4_t v23 = vnegq_s32(v22);
      do
      {
        int v24 = result + 1;
        do
        {
          uint64_t v25 = a4 + a3;
          *a6++ = vqmovn_u32((uint32x4_t)vmaxq_s32(vshlq_s32(vmlaq_s32(v20, v21, (int32x4_t)vmovl_u16((uint16x4_t)vrev16_s8(*(int8x8_t *)(a4 + a10)))), v23), (int32x4_t)0));
          --v24;
          a4 = v25;
        }
        while (v24 > 1);
        a4 = v25 + (int)v10;
        a6 = (uint16x4_t *)((char *)a6 + (int)v11);
        BOOL v14 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v14 | (a2 == 0)));
    }
    else if (a8 == 1)
    {
      do
      {
        int v12 = result + 1;
        do
        {
          uint64_t v13 = a4 + a3;
          *a6++ = (uint16x4_t)vrev16_s8(vmvn_s8(*(int8x8_t *)(a4 + a10)));
          --v12;
          a4 = v13;
        }
        while (v12 > 1);
        a4 = v13 + (int)v10;
        a6 = (uint16x4_t *)((char *)a6 + (int)v11);
        BOOL v14 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v14 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      int v15 = result + 1;
      do
      {
        uint64_t v16 = a4 + a3;
        *a6++ = (uint16x4_t)vrev16_s8(*(int8x8_t *)(a4 + a10));
        --v15;
        a4 = v16;
      }
      while (v15 > 1);
      a4 = v16 + v10;
      a6 = (uint16x4_t *)((char *)a6 + v11);
      BOOL v14 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v14 | (a2 == 0)));
  }
  return result;
}

void append_tree_path_component(const ClipperLib::PolyNode *a1, CGPathRandomAccess *a2, CGAffineTransform *a3, CGAffineTransform *a4, __CFArray *a5)
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  long long v31 = cgpoint_null;
  __n128 v10 = *(__n128 *)&a3->c;
  v29[0] = *(__n128 *)&a3->a;
  v29[1] = v10;
  v29[2] = *(__n128 *)&a3->tx;
  float64x2_t v11 = *(float64x2_t *)&a4->c;
  v28[0] = *(float64x2_t *)&a4->a;
  v28[1] = v11;
  v28[2] = *(float64x2_t *)&a4->tx;
  CGPathRandomAccess::recreate_path_from_clipper(a2, (uint64_t *)a1 + 1, v29, v28, (CGPathOutputFiltering *)&Mutable, 0);
  uint64_t v13 = (void *)*((void *)a1 + 4);
  int v12 = (void *)*((void *)a1 + 5);
  while (v13 != v12)
  {
    uint64_t v14 = *v13;
    int v15 = (uint64_t *)(*v13 + 8);
    __n128 v16 = *(__n128 *)&a3->c;
    v27[0] = *(__n128 *)&a3->a;
    v27[1] = v16;
    v27[2] = *(__n128 *)&a3->tx;
    float64x2_t v17 = *(float64x2_t *)&a4->c;
    v26[0] = *(float64x2_t *)&a4->a;
    v26[1] = v17;
    v26[2] = *(float64x2_t *)&a4->tx;
    CGPathRandomAccess::recreate_path_from_clipper(a2, v15, v27, v26, (CGPathOutputFiltering *)&Mutable, 0);
    unsigned int v18 = *(const ClipperLib::PolyNode ***)(v14 + 32);
    int v19 = *(const ClipperLib::PolyNode ***)(v14 + 40);
    while (v18 != v19)
    {
      int32x4_t v20 = *v18;
      long long v21 = *(_OWORD *)&a3->c;
      *(_OWORD *)&v25.double a = *(_OWORD *)&a3->a;
      *(_OWORD *)&v25.double c = v21;
      *(_OWORD *)&v25.tdouble x = *(_OWORD *)&a3->tx;
      long long v22 = *(_OWORD *)&a4->c;
      *(_OWORD *)&v24.double a = *(_OWORD *)&a4->a;
      *(_OWORD *)&v24.double c = v22;
      *(_OWORD *)&v24.tdouble x = *(_OWORD *)&a4->tx;
      append_tree_path_component(v20, a2, &v25, &v24, a5);
      ++v18;
    }
    ++v13;
  }
  CFTypeRef v23 = CGPathOutputFiltering::cg_path((CGPathOutputFiltering *)&Mutable);
  CFArrayAppendValue(a5, v23);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_184D37AEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 - 104);
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke(uint64_t a1, double a2, double a3)
{
  uint64_t v3 = *(CGPathOutputFiltering **)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&v5.double a = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v5.double c = v4;
  *(_OWORD *)&v5.tdouble x = *(_OWORD *)(a1 + 72);
  CGPathOutputFiltering::add_line_to_point(v3, a2, a3, &v5);
}

void *__Block_byref_object_copy_(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  result[7] = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1) {
    operator delete(v1);
  }
}

__n128 __Block_byref_object_copy__10(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke_12(uint64_t a1, double a2, double a3)
{
  int v6 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  char v20 = 0;
  std::vector<BOOL>::push_back(v6, &v20);
  int v7 = *(void **)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = (double *)v7[6];
  unint64_t v8 = v7[7];
  if ((unint64_t)v9 >= v8)
  {
    float64x2_t v11 = (double *)v7[5];
    uint64_t v12 = ((char *)v9 - (char *)v11) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    BOOL v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    if (!v15) {
      unint64_t v16 = v13;
    }
    if (v16)
    {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CGPoint>>(v16);
      float64x2_t v11 = (double *)v7[5];
      uint64_t v9 = (double *)v7[6];
    }
    else
    {
      uint64_t v17 = 0;
    }
    unsigned int v18 = (double *)(v16 + 16 * v12);
    unint64_t v19 = v16 + 16 * v17;
    *unsigned int v18 = a2;
    v18[1] = a3;
    __n128 v10 = v18 + 2;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 2;
        v9 -= 2;
      }
      while (v9 != v11);
      float64x2_t v11 = (double *)v7[5];
    }
    v7[5] = v18;
    double v7[6] = v10;
    v7[7] = v19;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    double *v9 = a2;
    v9[1] = a3;
    __n128 v10 = v9 + 2;
  }
  double v7[6] = v10;
}

void ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke_2_14(uint64_t a1, char *a2)
{
  long long v4 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back(v4, __p);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  int v6 = *(char **)(v5 + 48);
  int v7 = (void *)(v5 + 56);
  uint64_t v8 = *(void *)(v5 + 56);
  if (v8 - (uint64_t)v6 >= 64)
  {
    memmove(*(void **)(v5 + 48), a2, 0x40uLL);
    *(void *)(v5 + 48) = v6 + 64;
  }
  else
  {
    uint64_t v11 = *(void *)(v5 + 40);
    __n128 v10 = (void **)(v5 + 40);
    uint64_t v9 = v11;
    uint64_t v12 = (uint64_t)&v6[-v11] >> 4;
    if ((unint64_t)(v12 + 4) >> 60) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v13 = v8 - v9;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 4)) {
      uint64_t v14 = v12 + 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    __p[4] = v7;
    if (v15) {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CGPoint>>(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = 0;
    unint64_t v18 = v15 + 16 * v12;
    __p[0] = (void *)v15;
    __p[1] = (void *)v18;
    __p[3] = (void *)(v15 + 16 * v16);
    do
    {
      *(_OWORD *)(v18 + v17) = *(_OWORD *)&a2[v17];
      v17 += 16;
    }
    while (v17 != 64);
    __p[2] = (void *)(v18 + 64);
    std::vector<CGPoint>::__swap_out_circular_buffer(v10, (uint64_t)__p, v6);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
}

void std::vector<BOOL>::push_back(uint64_t *a1, unsigned char *a2)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((uint64_t)a1, v7);
    unint64_t v4 = a1[1];
  }
  a1[1] = v4 + 1;
  uint64_t v8 = *a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)(v8 + 8 * v9) | v10;
  }
  else {
    uint64_t v11 = *(void *)(v8 + 8 * v9) & ~v10;
  }
  *(void *)(v8 + 8 * v9) = v11;
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<CGPoint>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(16 * a1);
}

void *std::vector<CGPoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      unint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v3 = (uint64_t *)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(((a2 - 1) >> 6) + 1);
    unint64_t v4 = *(void **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    int v6 = v5 & 0x3F;
    *(void *)&long long v8 = v5;
    *((void *)&v8 + 1) = v7;
    unint64_t v9 = (v5 - 1) >> 6;
    if (v5 < 0x41) {
      unint64_t v9 = 0;
    }
    v3[v9] = 0;
    if (v5 > 0x3F || (v5 & 0x3F) != 0)
    {
      int v10 = 0;
      int v11 = 0;
      int64_t v12 = &v4[v5 >> 6];
      uint64_t v13 = v3;
      do
      {
        uint64_t v14 = 1 << v10;
        if ((*v4 >> v11)) {
          uint64_t v15 = *v13 | v14;
        }
        else {
          uint64_t v15 = *v13 & ~v14;
        }
        uint64_t *v13 = v15;
        v4 += v11 == 63;
        if (v11 == 63) {
          int v11 = 0;
        }
        else {
          ++v11;
        }
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
      }
      while (v4 != v12 || v11 != v6);
    }
    uint64_t v16 = *(void **)a1;
    *(void *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v8;
    if (v16)
    {
      operator delete(v16);
    }
  }
}

uint64_t *CGPathRandomAccessSubpath::append_sections_to_path(uint64_t *result, unint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  int64_t v12 = result;
  unint64_t v13 = (result[1] - *result) >> 4;
  unint64_t v14 = a2 % v13;
  while (1)
  {
    uint64_t v15 = *v12;
    unint64_t v16 = (v12[1] - *v12) >> 4;
    if (v16 <= v14) {
      break;
    }
    uint64_t v17 = v15 + 16 * v14;
    if (*(unsigned char *)(v17 + 8))
    {
      uint64_t v18 = v12[3];
      if (*(void *)v17 >= (unint64_t)((v12[4] - v18) >> 4)) {
        break;
      }
      __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a7, v18 + 16 * *(void *)v17);
    }
    else
    {
      if (a5)
      {
        if (v14 == a2 && (a4 & 1) != 0) {
          goto LABEL_15;
        }
        unint64_t v19 = *(void *)v17;
      }
      else
      {
        unint64_t v20 = v14 + 1;
        if (a4 && v20 % v13 == a3) {
          goto LABEL_15;
        }
        unint64_t v19 = *(void *)(v15 + 16 * (v20 % v16));
      }
      uint64_t v21 = v12[3];
      if (v19 >= (v12[4] - v21) >> 4) {
        break;
      }
      __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t, double, double))(a6 + 16))(a6, *(double *)(v21 + 16 * v19), *(double *)(v21 + 16 * v19 + 8));
    }
LABEL_15:
    if (v14 + 1 == v13) {
      unint64_t v14 = 0;
    }
    else {
      ++v14;
    }
    if (v14 == a3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

CGPathRef CGPathCreateCopyByNormalizing(CGPathRef path, BOOL evenOddFillRule)
{
  if (path)
  {
    BOOL v2 = evenOddFillRule;
    if (CGPathDisableTypeValidation || (CFTypeID v4 = CFGetTypeID(path), v4 == CGPathGetTypeID()))
    {
      memset(v8, 0, sizeof(v8));
      memset(v7, 0, sizeof(v7));
      memset(v6, 0, sizeof(v6));
      clip<std::vector<std::vector<ClipperLib::IntPoint>>>(v6, 1, path, v2, 0, v2, 1, (CGPathRandomAccess *)v8, (uint64_t)v7);
    }
  }
  return 0;
}

void sub_184D383A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)(v17 - 80);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:fe180100](&a17);
  a17 = (void **)(v17 - 56);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:fe180100](&a17);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v1 = *a1;
  BOOL v2 = (char *)**a1;
  if (v2)
  {
    CFTypeID v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = (char *)v1[1];
      do
      {
        long long v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        CFTypeID v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v1 = *a1;
  BOOL v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<CGPathRandomAccessSubpath>::destroy[abi:fe180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CGPathRandomAccessSubpath>::destroy[abi:fe180100](uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this)
{
  *(void *)this = &unk_1ED094568;
  BOOL v2 = (ClipperLib::Clipper *)((char *)this + 144);
  *((void *)this + 18) = &unk_1ED0945B0;
  std::__list_imp<long long>::clear((void *)this + 11);
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  ClipperLib::ClipperBase::~ClipperBase(v2);
}

{
  ClipperLib::ClipperBase *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1ED094568;
  BOOL v2 = (ClipperLib::Clipper *)((char *)this + 144);
  *((void *)this + 18) = &unk_1ED0945B0;
  std::__list_imp<long long>::clear((void *)this + 11);
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  ClipperLib::ClipperBase::~ClipperBase(v2);

  JUMPOUT(0x18532A2A0);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(24 * a1);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<ClipperLib::IntPoint>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(48 * a1);
}

__n128 __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__18(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

CGPathRef CGPathCreateCopyByUnioningPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingWithPath(1, path, evenOddFillRule, maskPath, evenOddFillRule);
}

CGPathRef CGPathCreateCopyBySubtractingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingWithPath(2, path, evenOddFillRule, maskPath, evenOddFillRule);
}

CGPathRef CGPathCreateCopyBySymmetricDifferenceOfPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingWithPath(3, path, evenOddFillRule, maskPath, evenOddFillRule);
}

BOOL CGPathIntersectsPath(CGPathRef path1, CGPathRef path2, BOOL evenOddFillRule)
{
  if (path1)
  {
    BOOL v3 = evenOddFillRule;
    if (CGPathDisableTypeValidation)
    {
      if (!path2) {
        return 0;
      }
LABEL_9:
      memset(v12, 0, sizeof(v12));
      memset(v11, 0, sizeof(v11));
      clip<std::vector<std::vector<ClipperLib::IntPoint>>>(v10, 0, path1, v3, path2, v3, 0, (CGPathRandomAccess *)v12, (uint64_t)v11);
    }
    CFTypeID v6 = CFGetTypeID(path1);
    CFTypeID TypeID = CGPathGetTypeID();
    if (path2)
    {
      if (v6 == TypeID)
      {
        if (CGPathDisableTypeValidation) {
          goto LABEL_9;
        }
        CFTypeID v8 = CFGetTypeID(path2);
        if (v8 == CGPathGetTypeID()) {
          goto LABEL_9;
        }
      }
    }
  }
  return 0;
}

void sub_184D3882C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  _Unwind_Resume(a1);
}

const CGPath *CGPathIntersectsRect(const CGPath *cf, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  unint64_t v5 = cf;
  if (cf)
  {
    if (CGPathDisableTypeValidation || (CFTypeID v10 = CFGetTypeID(cf), v10 == CGPathGetTypeID()))
    {
      v13.origin.double x = a2;
      v13.origin.CGFloat y = a3;
      v13.size.size_t width = a4;
      v13.size.double height = a5;
      int v11 = CGPathCreateWithRect(v13, 0);
      unint64_t v5 = (const CGPath *)CGPathIntersectsPath(v5, v11, 1);
      if (v11) {
        CFRelease(v11);
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t pathCreateCopyByClippingLineWithPath(int a1, CGPathRef path, const CGPath *a3, int a4)
{
  if (path)
  {
    if (CGPathDisableTypeValidation)
    {
      if (!a3) {
        return 0;
      }
LABEL_9:
      memset(v20, 0, 24);
      memset(v16, 0, sizeof(v16));
      long long v15 = 0u;
      long long v14 = 0u;
      CGRect v13 = &unk_1ED094608;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      memset(v12, 0, sizeof(v12));
      clip<ClipperLib::PolyTree>(v12, a1, path, a4, 0, a3, a4, (CGPathRandomAccess *)v20, (ClipperLib::PolyTree *)&v13);
    }
    CFTypeID v8 = CFGetTypeID(path);
    CFTypeID TypeID = CGPathGetTypeID();
    if (a3)
    {
      if (v8 == TypeID)
      {
        if (CGPathDisableTypeValidation) {
          goto LABEL_9;
        }
        CFTypeID v10 = CFGetTypeID(a3);
        if (v10 == CGPathGetTypeID()) {
          goto LABEL_9;
        }
      }
    }
  }
  return 0;
}

void sub_184D393A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef cf,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)&a33);
  if (v57) {
    operator delete(v57);
  }
  ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)&a57);
  a57 = v58 - 168;
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:fe180100]((void ***)&a57);
  _Unwind_Resume(a1);
}

void clip<ClipperLib::PolyTree>(_OWORD *a1, int a2, CGPathRef path, int a4, int a5, const CGPath *a6, int a7, CGPathRandomAccess *a8, ClipperLib::PolyTree *a9)
{
  BoundingBoCGFloat x = CGPathGetBoundingBox(path);
  CGFloat x = BoundingBox.origin.x;
  CGFloat y = BoundingBox.origin.y;
  CGFloat width = BoundingBox.size.width;
  CGFloat height = BoundingBox.size.height;
  if (a6)
  {
    CGRect v55 = CGPathGetBoundingBox(a6);
    v52.origin.CGFloat x = x;
    v52.origin.CGFloat y = y;
    v52.size.CGFloat width = width;
    v52.size.CGFloat height = height;
    CGRect v53 = CGRectUnion(v52, v55);
    CGFloat x = v53.origin.x;
    CGFloat y = v53.origin.y;
    CGFloat width = v53.size.width;
    CGFloat height = v53.size.height;
  }
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v54.origin.CGFloat x = x;
  v54.origin.CGFloat y = y;
  v54.size.CGFloat width = width;
  v54.size.CGFloat height = height;
  transform_for_bounds(v54, (uint64_t)a1);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  CGAffineTransform v25 = &unk_1ED094568;
  unsigned int v36 = &unk_1ED0945B0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long __p = 0u;
  uint64_t v30 = 0;
  v31[0] = v31;
  v31[1] = v31;
  v31[2] = 0;
  char v32 = 0;
  char v39 = 0;
  char v33 = 0;
  char v34 = 0;
  unsigned int v35 = interpolate_intersection_metadata;
  __int16 v43 = 1;
  long long v18 = a1[1];
  *(_OWORD *)&v24.double a = *a1;
  *(_OWORD *)&v24.double c = v18;
  *(_OWORD *)&v24.tCGFloat x = a1[2];
  CGPathRandomAccess::add_path(a8, path, &v24, a5);
  CFIndex v20 = v19;
  long long v21 = a1[1];
  *(_OWORD *)&v23.double a = *a1;
  *(_OWORD *)&v23.double c = v21;
  *(_OWORD *)&v23.tCGFloat x = a1[2];
  v50.location = v22;
  v50.length = v20;
  CGPathRandomAccess::clipper_paths_for_subpath_range(a8, v50, &v23);
}

void sub_184D39CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  CFTypeID v10 = a2 - 1;
  int v11 = v9;
  while (1)
  {
    unint64_t v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    unint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v155 = *(void *)(*v10 + 8);
          if (*(void *)(*v10 + 16) == v155) {
            goto LABEL_503;
          }
          uint64_t v156 = *v11;
          unint64_t v157 = *(void *)(v155 + 16);
          unint64_t v158 = *(void *)(v155 + 32);
          unint64_t v159 = v157 >= v158 ? *(void *)(v155 + 32) : *(void *)(v155 + 16);
          uint64_t v160 = *(void *)(v156 + 8);
          if (*(void *)(v156 + 16) == v160) {
            goto LABEL_503;
          }
          unint64_t v161 = *(void *)(v160 + 16);
          unint64_t v162 = *(void *)(v160 + 32);
          if (v161 >= v162) {
            unint64_t v163 = *(void *)(v160 + 32);
          }
          else {
            unint64_t v163 = *(void *)(v160 + 16);
          }
          if (v159 < v163) {
            goto LABEL_248;
          }
          double v164 = *(double *)(v155 + 24);
          double v165 = *(double *)(v155 + 40);
          double v166 = (double *)(v160 + 24);
          double v167 = (double *)(v160 + 40);
          if (v161 >= v162) {
            double v166 = v167;
          }
          if (v157 >= v158) {
            double v164 = v165;
          }
          if (v159 == v163 && v164 < *v166)
          {
LABEL_248:
            uint64_t *v11 = *v10;
            uint64_t *v10 = v156;
          }
          break;
        case 3uLL:
          return std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v11, v11 + 1, a2 - 1);
        case 4uLL:
          return std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v11, v11 + 1, v11 + 2, a2 - 1);
        case 5uLL:
          return std::__sort5_maybe_branchless[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,0>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191)
    {
      double v169 = v11 + 1;
      BOOL v171 = v11 == a2 || v169 == a2;
      if (a4)
      {
        if (!v171)
        {
          uint64_t v172 = 0;
          double v173 = v11;
          do
          {
            uint64_t v174 = v169;
            uint64_t v175 = v173[1];
            uint64_t v176 = *(void *)(v175 + 8);
            if (*(void *)(v175 + 16) == v176) {
              goto LABEL_503;
            }
            uint64_t v177 = *v173;
            unint64_t v178 = *(void *)(v176 + 16);
            unint64_t v179 = *(void *)(v176 + 32);
            CGFloat v180 = v178 >= v179 ? *(uint64_t **)(v176 + 32) : *(uint64_t **)(v176 + 16);
            uint64_t v181 = *(void *)(v177 + 8);
            if (*(void *)(v177 + 16) == v181) {
              goto LABEL_503;
            }
            unint64_t v182 = *(void *)(v181 + 16);
            unint64_t v183 = *(void *)(v181 + 32);
            if (v182 >= v183) {
              __n128 result = *(uint64_t **)(v181 + 32);
            }
            else {
              __n128 result = *(uint64_t **)(v181 + 16);
            }
            if (v180 < result) {
              goto LABEL_285;
            }
            double v184 = *(double *)(v176 + 24);
            double v185 = *(double *)(v176 + 40);
            v186 = (double *)(v181 + 24);
            CGFloat v187 = (double *)(v181 + 40);
            if (v182 >= v183) {
              v186 = v187;
            }
            if (v178 >= v179) {
              double v184 = v185;
            }
            if (v180 == result && v184 < *v186)
            {
LABEL_285:
              v173[1] = v177;
              uint64_t v189 = v11;
              if (v173 != v11)
              {
                uint64_t v190 = v172;
                do
                {
                  uint64_t v191 = *(void *)(v175 + 8);
                  if (*(void *)(v175 + 16) == v191) {
                    goto LABEL_503;
                  }
                  uint64_t v192 = *(uint64_t *)((char *)v11 + v190 - 8);
                  unint64_t v193 = *(void *)(v191 + 16);
                  unint64_t v194 = *(void *)(v191 + 32);
                  unint64_t v195 = v193 >= v194 ? *(void *)(v191 + 32) : *(void *)(v191 + 16);
                  __n128 result = *(uint64_t **)(v192 + 8);
                  if (*(uint64_t **)(v192 + 16) == result) {
                    goto LABEL_503;
                  }
                  unint64_t v196 = result[2];
                  unint64_t v197 = result[4];
                  if (v196 >= v197) {
                    unint64_t v198 = result[4];
                  }
                  else {
                    unint64_t v198 = result[2];
                  }
                  if (v195 >= v198)
                  {
                    double v199 = *(double *)(v191 + 24);
                    double v200 = *(double *)(v191 + 40);
                    uint64_t v201 = (double *)(result + 3);
                    result += 5;
                    if (v196 >= v197) {
                      uint64_t v201 = (double *)result;
                    }
                    if (v193 >= v194) {
                      double v199 = v200;
                    }
                    if (v195 != v198 || v199 >= *v201)
                    {
                      uint64_t v189 = (uint64_t *)((char *)v11 + v190);
                      goto LABEL_307;
                    }
                  }
                  *(uint64_t *)((char *)v11 + v190) = v192;
                  v190 -= 8;
                }
                while (v190);
                uint64_t v189 = v11;
              }
LABEL_307:
              *uint64_t v189 = v175;
            }
            double v169 = v174 + 1;
            v172 += 8;
            double v173 = v174;
          }
          while (v174 + 1 != a2);
        }
      }
      else if (!v171)
      {
        uint64_t v319 = 0;
        uint64_t v320 = -1;
        uint64_t v321 = 1;
        v322 = v11;
        do
        {
          uint64_t v323 = v321;
          uint64_t v324 = *v169;
          uint64_t v325 = *(void *)(*v169 + 8);
          if (*(void *)(*v169 + 16) == v325) {
            goto LABEL_503;
          }
          uint64_t v326 = *v322;
          unint64_t v327 = *(void *)(v325 + 16);
          unint64_t v328 = *(void *)(v325 + 32);
          unint64_t v329 = v327 >= v328 ? *(void *)(v325 + 32) : *(void *)(v325 + 16);
          uint64_t v331 = v326 + 8;
          uint64_t v330 = *(void *)(v326 + 8);
          if (*(void *)(v331 + 8) == v330) {
            goto LABEL_503;
          }
          unint64_t v332 = *(void *)(v330 + 16);
          unint64_t v333 = *(void *)(v330 + 32);
          if (v332 >= v333) {
            unint64_t v334 = *(void *)(v330 + 32);
          }
          else {
            unint64_t v334 = *(void *)(v330 + 16);
          }
          if (v329 < v334) {
            goto LABEL_479;
          }
          double v335 = *(double *)(v325 + 24);
          double v336 = *(double *)(v325 + 40);
          double v337 = (double *)(v330 + 24);
          __n128 result = (uint64_t *)(v330 + 40);
          if (v332 >= v333) {
            double v337 = (double *)result;
          }
          if (v327 >= v328) {
            double v335 = v336;
          }
          if (v329 == v334 && v335 < *v337)
          {
LABEL_479:
            *double v169 = v11[v319];
            uint64_t v339 = v320;
            CGAffineTransform v340 = v322;
            while (1)
            {
              uint64_t v341 = *(void *)(v324 + 8);
              if (*(void *)(v324 + 16) == v341) {
                goto LABEL_503;
              }
              uint64_t v342 = *(v340 - 1);
              unint64_t v343 = *(void *)(v341 + 16);
              unint64_t v344 = *(void *)(v341 + 32);
              __n128 result = v343 >= v344 ? *(uint64_t **)(v341 + 32) : *(uint64_t **)(v341 + 16);
              uint64_t v345 = *(void *)(v342 + 8);
              if (*(void *)(v342 + 16) == v345) {
                goto LABEL_503;
              }
              unint64_t v346 = *(void *)(v345 + 16);
              unint64_t v347 = *(void *)(v345 + 32);
              CGAffineTransformComponents v348 = v346 >= v347 ? *(uint64_t **)(v345 + 32) : *(uint64_t **)(v345 + 16);
              if (result >= v348)
              {
                double v349 = *(double *)(v341 + 24);
                double v350 = *(double *)(v341 + 40);
                CGSize v351 = (double *)(v345 + 24);
                CGRect v352 = (double *)(v345 + 40);
                if (v346 >= v347) {
                  CGSize v351 = v352;
                }
                if (v343 >= v344) {
                  double v349 = v350;
                }
                if (result != v348 || v349 >= *v351) {
                  break;
                }
              }
              *v340-- = v342;
              BOOL v4 = __CFADD__(v339++, 1);
              if (v4) {
                goto LABEL_503;
              }
            }
            *CGAffineTransform v340 = v324;
          }
          ++v322;
          uint64_t v321 = v323 + 1;
          double v169 = &v11[v323 + 1];
          --v320;
          uint64_t v319 = v323;
        }
        while (v169 != a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    long long v15 = &v11[v13 >> 1];
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v9, &v9[v13 >> 1], a2 - 1);
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v9 + 1, v15 - 1, a2 - 2);
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v9 + 2, &v9[v14 + 1], a2 - 3);
      __n128 result = std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v15 - 1, v15, &v9[v14 + 1]);
      uint64_t v16 = *v9;
      uint64_t *v9 = *v15;
      uint64_t *v15 = v16;
    }
    else
    {
      __n128 result = std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(&v9[v13 >> 1], v9, a2 - 1);
    }
    --a3;
    uint64_t v17 = *v9;
    if (a4) {
      goto LABEL_29;
    }
    uint64_t v18 = *(v9 - 1);
    uint64_t v19 = *(void *)(v18 + 8);
    if (*(void *)(v18 + 16) == v19) {
      goto LABEL_503;
    }
    unint64_t v20 = *(void *)(v19 + 16);
    unint64_t v21 = *(void *)(v19 + 32);
    unint64_t v22 = v20 >= v21 ? *(void *)(v19 + 32) : *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v17 + 8);
    if (*(void *)(v17 + 16) == v23) {
      goto LABEL_503;
    }
    unint64_t v24 = *(void *)(v23 + 16);
    unint64_t v25 = *(void *)(v23 + 32);
    unint64_t v26 = v24 >= v25 ? *(void *)(v23 + 32) : *(void *)(v23 + 16);
    if (v22 < v26) {
      goto LABEL_29;
    }
    double v27 = *(double *)(v19 + 24);
    double v28 = *(double *)(v19 + 40);
    int v29 = (double *)(v23 + 24);
    uint64_t v30 = (double *)(v23 + 40);
    if (v24 >= v25) {
      int v29 = v30;
    }
    double v31 = *v29;
    if (v20 >= v21) {
      double v27 = v28;
    }
    if (v22 == v26 && v27 < v31)
    {
LABEL_29:
      for (uint64_t i = v9 + 1; ; ++i)
      {
        if (i == a2) {
          goto LABEL_503;
        }
        uint64_t v34 = *i;
        uint64_t v35 = *(void *)(*i + 8);
        if (*(void *)(*i + 16) == v35) {
          goto LABEL_503;
        }
        unint64_t v36 = *(void *)(v35 + 16);
        unint64_t v37 = *(void *)(v35 + 32);
        unint64_t v38 = v36 >= v37 ? *(void *)(v35 + 32) : *(void *)(v35 + 16);
        uint64_t v39 = *(void *)(v17 + 8);
        if (*(void *)(v17 + 16) == v39) {
          goto LABEL_503;
        }
        unint64_t v40 = *(void *)(v39 + 16);
        unint64_t v41 = *(void *)(v39 + 32);
        unint64_t v42 = v40 >= v41 ? *(void *)(v39 + 32) : *(void *)(v39 + 16);
        if (v38 >= v42)
        {
          double v43 = *(double *)(v35 + 24);
          double v44 = *(double *)(v35 + 40);
          uint64_t v45 = (double *)(v39 + 24);
          uint64_t v46 = (double *)(v39 + 40);
          if (v40 >= v41) {
            uint64_t v45 = v46;
          }
          double v47 = *v45;
          if (v36 >= v37) {
            double v43 = v44;
          }
          if (v38 != v42 || v43 >= v47) {
            break;
          }
        }
      }
      uint64_t v49 = a2 - 1;
      if (i - 1 != v9)
      {
        while (1)
        {
          CFRange v50 = v49;
          if (v49 + 1 == v9) {
            goto LABEL_503;
          }
          uint64_t v51 = *(void *)(*v49 + 8);
          if (*(void *)(*v50 + 16) == v51) {
            goto LABEL_503;
          }
          unint64_t v52 = *(void *)(v51 + 16);
          unint64_t v53 = *(void *)(v51 + 32);
          if (v52 >= v53) {
            unint64_t v54 = *(void *)(v51 + 32);
          }
          else {
            unint64_t v54 = *(void *)(v51 + 16);
          }
          if (v54 >= v42)
          {
            CGRect v55 = (double *)(v51 + 40);
            uint64_t v56 = (double *)(v51 + 24);
            if (v52 >= v53) {
              uint64_t v56 = v55;
            }
            double v57 = *v56;
            uint64_t v49 = v50 - 1;
            if (v54 != v42 || v57 >= v47) {
              continue;
            }
          }
          goto LABEL_81;
        }
      }
      uint64_t v59 = a2 - 1;
      while (1)
      {
        CFRange v50 = v59;
        uint64_t v60 = v59 + 1;
        if (i >= v60) {
          break;
        }
        uint64_t v61 = *(void *)(*v50 + 8);
        if (*(void *)(*v50 + 16) == v61) {
          goto LABEL_503;
        }
        unint64_t v62 = *(void *)(v61 + 16);
        unint64_t v63 = *(void *)(v61 + 32);
        if (v62 >= v63) {
          unint64_t v64 = *(void *)(v61 + 32);
        }
        else {
          unint64_t v64 = *(void *)(v61 + 16);
        }
        if (v64 >= v42)
        {
          uint64_t v65 = (double *)(v61 + 40);
          size_t v66 = (double *)(v61 + 24);
          if (v62 >= v63) {
            size_t v66 = v65;
          }
          double v67 = *v66;
          uint64_t v59 = v50 - 1;
          if (v64 != v42 || v67 >= v47) {
            continue;
          }
        }
        goto LABEL_81;
      }
      CFRange v50 = v60;
LABEL_81:
      int v11 = i;
      if (i < v50)
      {
        uint64_t v69 = *v50;
        int v11 = i;
        unint64_t v70 = v50;
        do
        {
          *v11++ = v69;
          *unint64_t v70 = v34;
          while (1)
          {
            if (v11 == a2) {
              goto LABEL_503;
            }
            uint64_t v34 = *v11;
            uint64_t v71 = *(void *)(*v11 + 8);
            if (*(void *)(*v11 + 16) == v71) {
              goto LABEL_503;
            }
            unint64_t v72 = *(void *)(v71 + 16);
            unint64_t v73 = *(void *)(v71 + 32);
            unint64_t v74 = v72 >= v73 ? *(void *)(v71 + 32) : *(void *)(v71 + 16);
            uint64_t v75 = *(void *)(v17 + 8);
            if (*(void *)(v17 + 16) == v75) {
              goto LABEL_503;
            }
            unint64_t v76 = *(void *)(v75 + 16);
            unint64_t v77 = *(void *)(v75 + 32);
            unint64_t v78 = v76 >= v77 ? *(void *)(v75 + 32) : *(void *)(v75 + 16);
            if (v74 >= v78)
            {
              double v79 = *(double *)(v71 + 24);
              double v80 = *(double *)(v71 + 40);
              long long v81 = (double *)(v75 + 24);
              uint64_t v82 = (double *)(v75 + 40);
              if (v76 >= v77) {
                long long v81 = v82;
              }
              double v83 = *v81;
              if (v72 >= v73) {
                double v79 = v80;
              }
              if (v74 != v78 || v79 >= v83) {
                break;
              }
            }
            ++v11;
          }
          uint64_t v85 = v70 - 1;
          do
          {
            if (v85 + 1 == v9) {
              goto LABEL_503;
            }
            unint64_t v70 = v85;
            uint64_t v69 = *v85;
            uint64_t v86 = *(void *)(*v85 + 8);
            if (*(void *)(v69 + 16) == v86) {
              goto LABEL_503;
            }
            unint64_t v87 = *(void *)(v86 + 16);
            unint64_t v88 = *(void *)(v86 + 32);
            if (v87 >= v88) {
              unint64_t v89 = *(void *)(v86 + 32);
            }
            else {
              unint64_t v89 = *(void *)(v86 + 16);
            }
            if (v89 < v78) {
              break;
            }
            uint64_t v90 = (double *)(v86 + 40);
            uint64_t v91 = (double *)(v86 + 24);
            if (v87 >= v88) {
              uint64_t v91 = v90;
            }
            double v92 = *v91;
            uint64_t v85 = v70 - 1;
          }
          while (v89 != v78 || v92 >= v83);
        }
        while (v11 < v70);
      }
      uint64_t v94 = v11 - 1;
      if (v11 - 1 != v9) {
        uint64_t *v9 = *v94;
      }
      *uint64_t v94 = v17;
      if (i < v50) {
        goto LABEL_123;
      }
      BOOL v95 = std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v9, v11 - 1);
      __n128 result = (uint64_t *)std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v11, a2);
      if (result)
      {
        a2 = v11 - 1;
        if (v95) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v95)
      {
LABEL_123:
        __n128 result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,false>(v9, v11 - 1, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v96 = *(void *)(*v10 + 8);
      if (*(void *)(*v10 + 16) == v96) {
        goto LABEL_503;
      }
      unint64_t v97 = *(void *)(v96 + 16);
      unint64_t v98 = *(void *)(v96 + 32);
      if (v97 >= v98) {
        unint64_t v99 = *(void *)(v96 + 32);
      }
      else {
        unint64_t v99 = *(void *)(v96 + 16);
      }
      if (v26 < v99) {
        goto LABEL_150;
      }
      uint64_t v100 = (double *)(v96 + 24);
      uint64_t v101 = (double *)(v96 + 40);
      if (v97 < v98) {
        uint64_t v101 = v100;
      }
      if (v26 == v99 && v31 < *v101)
      {
LABEL_150:
        CGImageRef v112 = v9 + 1;
        while (v112 != a2)
        {
          int v11 = v112;
          uint64_t v114 = (uint64_t *)(*v112 + 8);
          uint64_t v113 = *v114;
          if (v114[1] == *v114) {
            break;
          }
          unint64_t v115 = *(void *)(v113 + 16);
          unint64_t v116 = *(void *)(v113 + 32);
          if (v115 >= v116) {
            unint64_t v117 = *(void *)(v113 + 32);
          }
          else {
            unint64_t v117 = *(void *)(v113 + 16);
          }
          if (v26 >= v117)
          {
            double v118 = (double *)(v113 + 24);
            unint64_t v119 = (double *)(v113 + 40);
            if (v115 < v116) {
              unint64_t v119 = v118;
            }
            double v120 = *v119;
            CGImageRef v112 = v11 + 1;
            if (v26 != v117 || v31 >= v120) {
              continue;
            }
          }
          goto LABEL_164;
        }
        goto LABEL_503;
      }
      uint64_t v103 = v9 + 1;
      do
      {
        int v11 = v103;
        if (v103 >= a2) {
          break;
        }
        uint64_t v104 = *(void *)(*v103 + 8);
        if (*(void *)(*v11 + 16) == v104) {
          goto LABEL_503;
        }
        unint64_t v105 = *(void *)(v104 + 16);
        unint64_t v106 = *(void *)(v104 + 32);
        unint64_t v107 = v105 >= v106 ? *(void *)(v104 + 32) : *(void *)(v104 + 16);
        if (v26 < v107) {
          break;
        }
        size_t v108 = (double *)(v104 + 24);
        uint64_t v109 = (double *)(v104 + 40);
        if (v105 < v106) {
          uint64_t v109 = v108;
        }
        double v110 = *v109;
        uint64_t v103 = v11 + 1;
      }
      while (v26 != v107 || v31 >= v110);
LABEL_164:
      unint64_t v122 = a2;
      if (v11 < a2)
      {
        unint64_t v122 = a2 - 1;
        if (a2 != v9)
        {
          while (1)
          {
            uint64_t v123 = *(void *)(*v122 + 8);
            if (*(void *)(*v122 + 16) == v123) {
              break;
            }
            unint64_t v124 = *(void *)(v123 + 16);
            unint64_t v125 = *(void *)(v123 + 32);
            if (v124 >= v125) {
              unint64_t v126 = *(void *)(v123 + 32);
            }
            else {
              unint64_t v126 = *(void *)(v123 + 16);
            }
            if (v26 >= v126)
            {
              CGRect v127 = (double *)(v123 + 24);
              uint64_t v128 = (double *)(v123 + 40);
              if (v124 < v125) {
                uint64_t v128 = v127;
              }
              if (v26 != v126 || v31 >= *v128) {
                goto LABEL_181;
              }
            }
            BOOL v5 = v122-- == v9;
            if (v5) {
              goto LABEL_503;
            }
          }
        }
        goto LABEL_503;
      }
LABEL_181:
      if (v11 < v122)
      {
        uint64_t v130 = *v11;
        uint64_t v131 = *v122;
        do
        {
          uint64_t *v11 = v131;
          *unint64_t v122 = v130;
          BOOL v132 = v11 + 1;
          do
          {
            if (v132 == a2) {
              goto LABEL_503;
            }
            uint64_t v133 = *(void *)(v17 + 8);
            if (*(void *)(v17 + 16) == v133) {
              goto LABEL_503;
            }
            int v11 = v132;
            uint64_t v130 = *v132;
            unint64_t v134 = *(void *)(v133 + 16);
            unint64_t v135 = *(void *)(v133 + 32);
            unint64_t v136 = v134 >= v135 ? *(void *)(v133 + 32) : *(void *)(v133 + 16);
            uint64_t v137 = *(void *)(v130 + 8);
            if (*(void *)(v130 + 16) == v137) {
              goto LABEL_503;
            }
            double v138 = *(double *)(v133 + 24);
            double v139 = *(double *)(v133 + 40);
            unint64_t v140 = *(void *)(v137 + 16);
            unint64_t v141 = *(void *)(v137 + 32);
            if (v140 >= v141) {
              unint64_t v142 = *(void *)(v137 + 32);
            }
            else {
              unint64_t v142 = *(void *)(v137 + 16);
            }
            if (v136 < v142) {
              break;
            }
            __n128 result = (uint64_t *)(v137 + 24);
            double v143 = (double *)(v137 + 40);
            if (v140 < v141) {
              double v143 = (double *)result;
            }
            double v144 = *v143;
            double v145 = v134 >= v135 ? v139 : v138;
            BOOL v132 = v11 + 1;
          }
          while (v136 != v142 || v145 >= v144);
          if (v122 == v9) {
            goto LABEL_503;
          }
          if (v134 >= v135) {
            double v138 = v139;
          }
          --v122;
          while (1)
          {
            uint64_t v131 = *v122;
            uint64_t v147 = *(void *)(*v122 + 8);
            if (*(void *)(*v122 + 16) == v147) {
              goto LABEL_503;
            }
            unint64_t v148 = *(void *)(v147 + 16);
            unint64_t v149 = *(void *)(v147 + 32);
            unint64_t v150 = v148 >= v149 ? *(void *)(v147 + 32) : *(void *)(v147 + 16);
            if (v136 >= v150)
            {
              unint64_t v151 = (double *)(v147 + 24);
              double v152 = (double *)(v147 + 40);
              if (v148 < v149) {
                double v152 = v151;
              }
              if (v136 != v150 || v138 >= *v152) {
                break;
              }
            }
            BOOL v5 = v122-- == v9;
            if (v5) {
              goto LABEL_503;
            }
          }
        }
        while (v11 < v122);
      }
      CGFloat v154 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        uint64_t *v9 = *v154;
      }
      a4 = 0;
      *CGFloat v154 = v17;
    }
  }
  if (v11 != a2)
  {
    int64_t v203 = (v13 - 2) >> 1;
    int64_t v204 = v203;
    do
    {
      int64_t v205 = v204;
      if (v203 >= v204)
      {
        uint64_t v206 = (2 * v204) | 1;
        float64x2_t v207 = &v11[v206];
        if (2 * v205 + 2 < (uint64_t)v13)
        {
          uint64_t v208 = *(void *)(*v207 + 8);
          if (*(void *)(*v207 + 16) == v208) {
            goto LABEL_503;
          }
          uint64_t v209 = v207[1];
          unint64_t v210 = *(void *)(v208 + 16);
          unint64_t v211 = *(void *)(v208 + 32);
          unint64_t v212 = v210 >= v211 ? *(void *)(v208 + 32) : *(void *)(v208 + 16);
          uint64_t v214 = v209 + 8;
          uint64_t v213 = *(void *)(v209 + 8);
          if (*(void *)(v214 + 8) == v213) {
            goto LABEL_503;
          }
          unint64_t v215 = *(void *)(v213 + 16);
          unint64_t v216 = *(void *)(v213 + 32);
          if (v215 >= v216) {
            unint64_t v217 = *(void *)(v213 + 32);
          }
          else {
            unint64_t v217 = *(void *)(v213 + 16);
          }
          if (v212 < v217) {
            goto LABEL_332;
          }
          double v218 = *(double *)(v208 + 24);
          double v219 = *(double *)(v208 + 40);
          uint64_t v220 = (double *)(v213 + 24);
          float64x2_t v221 = (double *)(v213 + 40);
          if (v215 >= v216) {
            uint64_t v220 = v221;
          }
          if (v210 >= v211) {
            double v218 = v219;
          }
          if (v212 == v217 && v218 < *v220)
          {
LABEL_332:
            ++v207;
            uint64_t v206 = 2 * v205 + 2;
          }
        }
        uint64_t v223 = *v207;
        uint64_t v224 = *(void *)(*v207 + 8);
        if (*(void *)(*v207 + 16) == v224) {
          goto LABEL_503;
        }
        double v225 = &v11[v205];
        uint64_t v226 = *v225;
        __n128 result = *(uint64_t **)(v224 + 16);
        unint64_t v227 = *(void *)(v224 + 32);
        unint64_t v228 = (unint64_t)result >= v227 ? *(void *)(v224 + 32) : *(void *)(v224 + 16);
        uint64_t v229 = *(void *)(v226 + 8);
        if (*(void *)(v226 + 16) == v229) {
          goto LABEL_503;
        }
        unint64_t v230 = *(void *)(v229 + 16);
        unint64_t v231 = *(void *)(v229 + 32);
        if (v230 >= v231) {
          unint64_t v232 = *(void *)(v229 + 32);
        }
        else {
          unint64_t v232 = *(void *)(v229 + 16);
        }
        if (v228 >= v232)
        {
          double v233 = *(double *)(v224 + 24);
          double v234 = *(double *)(v224 + 40);
          v235 = (double *)(v229 + 24);
          unint64_t v236 = (double *)(v229 + 40);
          if (v230 >= v231) {
            v235 = v236;
          }
          if ((unint64_t)result >= v227) {
            double v233 = v234;
          }
          if (v228 != v232 || v233 >= *v235)
          {
            do
            {
              unint64_t v238 = v207;
              *double v225 = v223;
              if (v203 < v206) {
                break;
              }
              uint64_t v239 = 2 * v206;
              uint64_t v206 = (2 * v206) | 1;
              float64x2_t v207 = &v11[v206];
              uint64_t v240 = v239 + 2;
              if (v240 < (uint64_t)v13)
              {
                uint64_t v241 = *(void *)(*v207 + 8);
                if (*(void *)(*v207 + 16) == v241) {
                  goto LABEL_503;
                }
                uint64_t v242 = v207[1];
                unint64_t v243 = *(void *)(v241 + 16);
                unint64_t v244 = *(void *)(v241 + 32);
                unint64_t v245 = v243 >= v244 ? *(void *)(v241 + 32) : *(void *)(v241 + 16);
                uint64_t v247 = v242 + 8;
                uint64_t v246 = *(void *)(v242 + 8);
                if (*(void *)(v247 + 8) == v246) {
                  goto LABEL_503;
                }
                unint64_t v248 = *(void *)(v246 + 16);
                unint64_t v249 = *(void *)(v246 + 32);
                if (v248 >= v249) {
                  unint64_t v250 = *(void *)(v246 + 32);
                }
                else {
                  unint64_t v250 = *(void *)(v246 + 16);
                }
                if (v245 < v250) {
                  goto LABEL_370;
                }
                double v251 = *(double *)(v241 + 24);
                double v252 = *(double *)(v241 + 40);
                size_t v253 = (double *)(v246 + 24);
                uint8x8_t v254 = (double *)(v246 + 40);
                if (v248 >= v249) {
                  size_t v253 = v254;
                }
                if (v243 >= v244) {
                  double v251 = v252;
                }
                if (v245 == v250 && v251 < *v253)
                {
LABEL_370:
                  ++v207;
                  uint64_t v206 = v240;
                }
              }
              uint64_t v223 = *v207;
              uint64_t v256 = *(void *)(*v207 + 8);
              if (*(void *)(*v207 + 16) == v256) {
                goto LABEL_503;
              }
              __n128 result = *(uint64_t **)(v256 + 16);
              unint64_t v257 = *(void *)(v256 + 32);
              unint64_t v258 = (unint64_t)result >= v257 ? *(void *)(v256 + 32) : *(void *)(v256 + 16);
              uint64_t v259 = *(void *)(v226 + 8);
              if (*(void *)(v226 + 16) == v259) {
                goto LABEL_503;
              }
              unint64_t v260 = *(void *)(v259 + 16);
              unint64_t v261 = *(void *)(v259 + 32);
              unint64_t v262 = v260 >= v261 ? *(void *)(v259 + 32) : *(void *)(v259 + 16);
              if (v258 < v262) {
                break;
              }
              double v263 = *(double *)(v256 + 24);
              double v264 = *(double *)(v256 + 40);
              CGFloat v265 = (double *)(v259 + 24);
              v266 = (double *)(v259 + 40);
              if (v260 >= v261) {
                CGFloat v265 = v266;
              }
              if ((unint64_t)result >= v257) {
                double v263 = v264;
              }
              BOOL v267 = v258 == v262 && v263 < *v265;
              double v225 = v238;
            }
            while (!v267);
            *unint64_t v238 = v226;
          }
        }
      }
      int64_t v204 = v205 - 1;
    }
    while (v205);
    uint64_t v268 = (unint64_t)v12 >> 3;
    while (2)
    {
      uint64_t v269 = 0;
      uint64_t v270 = *v11;
      CGRect v271 = v11;
      do
      {
        uint64_t v272 = v271;
        v271 += v269 + 1;
        uint64_t v273 = 2 * v269;
        uint64_t v269 = (2 * v269) | 1;
        uint64_t v274 = v273 + 2;
        if (v274 < v268)
        {
          uint64_t v275 = *(void *)(*v271 + 8);
          if (*(void *)(*v271 + 16) == v275) {
            goto LABEL_503;
          }
          uint64_t v276 = v271[1];
          unint64_t v277 = *(void *)(v275 + 16);
          __n128 result = *(uint64_t **)(v275 + 32);
          unint64_t v278 = v277 >= (unint64_t)result ? *(void *)(v275 + 32) : *(void *)(v275 + 16);
          uint64_t v280 = v276 + 8;
          uint64_t v279 = *(void *)(v276 + 8);
          if (*(void *)(v280 + 8) == v279) {
            goto LABEL_503;
          }
          unint64_t v281 = *(void *)(v279 + 16);
          unint64_t v282 = *(void *)(v279 + 32);
          if (v281 >= v282) {
            unint64_t v283 = *(void *)(v279 + 32);
          }
          else {
            unint64_t v283 = *(void *)(v279 + 16);
          }
          if (v278 < v283) {
            goto LABEL_412;
          }
          double v284 = *(double *)(v275 + 24);
          double v285 = *(double *)(v275 + 40);
          long long v286 = (double *)(v279 + 24);
          v287 = (double *)(v279 + 40);
          if (v281 >= v282) {
            long long v286 = v287;
          }
          if (v277 >= (unint64_t)result) {
            double v284 = v285;
          }
          if (v278 == v283 && v284 < *v286)
          {
LABEL_412:
            ++v271;
            uint64_t v269 = v274;
          }
        }
        *uint64_t v272 = *v271;
      }
      while (v269 <= (uint64_t)((unint64_t)(v268 - 2) >> 1));
      if (v271 != --a2)
      {
        *CGRect v271 = *a2;
        *a2 = v270;
        uint64_t v289 = (char *)v271 - (char *)v11 + 8;
        if (v289 < 9) {
          goto LABEL_456;
        }
        unint64_t v290 = ((unint64_t)v289 >> 3) - 2;
        unint64_t v291 = v290 >> 1;
        CGFloat v292 = &v11[v290 >> 1];
        uint64_t v293 = *(void *)(*v292 + 8);
        if (*(void *)(*v292 + 16) == v293) {
          goto LABEL_503;
        }
        uint64_t v270 = *v271;
        unint64_t v294 = *(void *)(v293 + 16);
        unint64_t v295 = *(void *)(v293 + 32);
        __n128 result = v294 >= v295 ? *(uint64_t **)(v293 + 32) : *(uint64_t **)(v293 + 16);
        uint64_t v296 = *(void *)(v270 + 8);
        if (*(void *)(v270 + 16) == v296) {
          goto LABEL_503;
        }
        unint64_t v297 = *(void *)(v296 + 16);
        unint64_t v298 = *(void *)(v296 + 32);
        CGFloat v299 = v297 >= v298 ? *(uint64_t **)(v296 + 32) : *(uint64_t **)(v296 + 16);
        if (result >= v299)
        {
          double v300 = *(double *)(v293 + 24);
          double v301 = *(double *)(v293 + 40);
          v302 = (double *)(v296 + 24);
          unint64_t v303 = (double *)(v296 + 40);
          if (v297 >= v298) {
            v302 = v303;
          }
          if (v294 >= v295) {
            double v300 = v301;
          }
          if (result != v299 || v300 >= *v302) {
            goto LABEL_456;
          }
        }
        *CGRect v271 = *v292;
        if (v290 >= 2)
        {
          while (1)
          {
            unint64_t v305 = v291 - 1;
            unint64_t v291 = (v291 - 1) >> 1;
            CGRect v271 = &v11[v291];
            uint64_t v306 = *(void *)(*v271 + 8);
            if (*(void *)(*v271 + 16) == v306) {
              break;
            }
            unint64_t v307 = *(void *)(v306 + 16);
            unint64_t v308 = *(void *)(v306 + 32);
            __n128 result = v307 >= v308 ? *(uint64_t **)(v306 + 32) : *(uint64_t **)(v306 + 16);
            uint64_t v309 = *(void *)(v270 + 8);
            if (*(void *)(v270 + 16) == v309) {
              break;
            }
            unint64_t v310 = *(void *)(v309 + 16);
            unint64_t v311 = *(void *)(v309 + 32);
            if (v310 >= v311) {
              double v312 = *(uint64_t **)(v309 + 32);
            }
            else {
              double v312 = *(uint64_t **)(v309 + 16);
            }
            if (result >= v312)
            {
              double v313 = *(double *)(v306 + 24);
              double v314 = *(double *)(v306 + 40);
              v315 = (double *)(v309 + 24);
              v316 = (double *)(v309 + 40);
              if (v310 >= v311) {
                v315 = v316;
              }
              if (v307 >= v308) {
                double v313 = v314;
              }
              if (result != v312 || v313 >= *v315) {
                goto LABEL_435;
              }
            }
            *CGFloat v292 = *v271;
            CGFloat v292 = &v11[v291];
            if (v305 <= 1) {
              goto LABEL_455;
            }
          }
LABEL_503:
          __break(1u);
          JUMPOUT(0x184D3ACECLL);
        }
LABEL_435:
        CGRect v271 = v292;
      }
LABEL_455:
      *CGRect v271 = v270;
LABEL_456:
      if (v268-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

void *std::__hash_table<ClipperLib::PolyNode *,std::hash<ClipperLib::PolyNode *>,std::equal_to<ClipperLib::PolyNode *>,std::allocator<ClipperLib::PolyNode *>>::find<ClipperLib::PolyNode *>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= a2) {
      unint64_t v7 = v5 % a2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (a2 - 1);
  }
  CFTypeID v8 = *(void **)(a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2) {
            v10 %= a2;
          }
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void ClipperLib::PolyTree::~PolyTree(ClipperLib::PolyTree *this)
{
  *(void *)this = &unk_1ED094608;
  ClipperLib::PolyTree::Clear(this);
  BOOL v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  ClipperLib::PolyNode::~PolyNode(this);
}

{
  uint64_t vars8;

  ClipperLib::PolyTree::~PolyTree(this);

  JUMPOUT(0x18532A2A0);
}

void ClipperLib::PolyNode::~PolyNode(ClipperLib::PolyNode *this)
{
  *(void *)this = &unk_1ED0945E8;
  BOOL v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  ClipperLib::PolyNode::~PolyNode(this);

  JUMPOUT(0x18532A2A0);
}

uint64_t *std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (*(void *)(*a2 + 16) == v4) {
    goto LABEL_80;
  }
  uint64_t v5 = *result;
  unint64_t v6 = *(void *)(v4 + 16);
  unint64_t v7 = *(void *)(v4 + 32);
  unint64_t v8 = v6 >= v7 ? *(void *)(v4 + 32) : *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v5 + 8);
  if (*(void *)(v5 + 16) == v9) {
    goto LABEL_80;
  }
  double v10 = *(double *)(v4 + 24);
  double v11 = *(double *)(v4 + 40);
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v13 = *(void *)(v9 + 32);
  if (v12 >= v13) {
    unint64_t v14 = *(void *)(v9 + 32);
  }
  else {
    unint64_t v14 = *(void *)(v9 + 16);
  }
  if (v8 >= v14)
  {
    long long v15 = (double *)(v9 + 24);
    uint64_t v16 = (double *)(v9 + 40);
    if (v12 < v13) {
      uint64_t v16 = v15;
    }
    double v17 = v6 >= v7 ? v11 : v10;
    if (v8 != v14 || v17 >= *v16)
    {
      uint64_t v19 = *(void *)(*a3 + 8);
      if (*(void *)(*a3 + 16) != v19)
      {
        unint64_t v20 = *(void *)(v19 + 16);
        unint64_t v21 = *(void *)(v19 + 32);
        if (v20 >= v21) {
          unint64_t v22 = *(void *)(v19 + 32);
        }
        else {
          unint64_t v22 = *(void *)(v19 + 16);
        }
        if (v22 >= v8)
        {
          uint64_t v23 = (double *)(v19 + 40);
          unint64_t v24 = (double *)(v19 + 24);
          if (v20 >= v21) {
            unint64_t v24 = v23;
          }
          if (v22 != v8 || *v24 >= v17) {
            return result;
          }
        }
        *a2 = *a3;
        *a3 = v3;
        uint64_t v26 = *(void *)(*a2 + 8);
        if (*(void *)(*a2 + 16) != v26)
        {
          uint64_t v27 = *result;
          unint64_t v28 = *(void *)(v26 + 16);
          unint64_t v29 = *(void *)(v26 + 32);
          unint64_t v30 = v28 >= v29 ? *(void *)(v26 + 32) : *(void *)(v26 + 16);
          uint64_t v31 = *(void *)(v27 + 8);
          if (*(void *)(v27 + 16) != v31)
          {
            unint64_t v32 = *(void *)(v31 + 16);
            unint64_t v33 = *(void *)(v31 + 32);
            if (v32 >= v33) {
              unint64_t v34 = *(void *)(v31 + 32);
            }
            else {
              unint64_t v34 = *(void *)(v31 + 16);
            }
            if (v30 < v34) {
              goto LABEL_46;
            }
            double v35 = *(double *)(v26 + 24);
            double v36 = *(double *)(v26 + 40);
            unint64_t v37 = (double *)(v31 + 24);
            unint64_t v38 = (double *)(v31 + 40);
            if (v32 >= v33) {
              unint64_t v37 = v38;
            }
            if (v28 >= v29) {
              double v35 = v36;
            }
            if (v30 == v34 && v35 < *v37)
            {
LABEL_46:
              *__n128 result = *a2;
              *a2 = v27;
            }
            return result;
          }
        }
      }
LABEL_80:
      __break(1u);
      return result;
    }
  }
  uint64_t v39 = *(void *)(*a3 + 8);
  if (*(void *)(*a3 + 16) == v39) {
    goto LABEL_80;
  }
  unint64_t v40 = *(void *)(v39 + 16);
  unint64_t v41 = *(void *)(v39 + 32);
  if (v40 >= v41) {
    unint64_t v42 = *(void *)(v39 + 32);
  }
  else {
    unint64_t v42 = *(void *)(v39 + 16);
  }
  if (v42 < v8) {
    goto LABEL_77;
  }
  uint64_t v43 = v39 + 40;
  uint64_t v44 = v39 + 24;
  if (v6 >= v7) {
    double v10 = v11;
  }
  uint64_t v45 = (double *)(v40 >= v41 ? v43 : v44);
  if (v42 == v8 && *v45 < v10)
  {
LABEL_77:
    *__n128 result = *a3;
    goto LABEL_78;
  }
  *__n128 result = v3;
  *a2 = v5;
  uint64_t v47 = *(void *)(*a3 + 8);
  if (*(void *)(*a3 + 16) == v47) {
    goto LABEL_80;
  }
  unint64_t v48 = *(void *)(v47 + 16);
  unint64_t v49 = *(void *)(v47 + 32);
  unint64_t v50 = v48 >= v49 ? *(void *)(v47 + 32) : *(void *)(v47 + 16);
  uint64_t v51 = *(void *)(v5 + 8);
  if (*(void *)(v5 + 16) == v51) {
    goto LABEL_80;
  }
  unint64_t v52 = *(void *)(v51 + 16);
  unint64_t v53 = *(void *)(v51 + 32);
  if (v52 >= v53) {
    unint64_t v54 = *(void *)(v51 + 32);
  }
  else {
    unint64_t v54 = *(void *)(v51 + 16);
  }
  if (v50 < v54) {
    goto LABEL_76;
  }
  double v55 = *(double *)(v47 + 24);
  double v56 = *(double *)(v47 + 40);
  double v57 = (double *)(v51 + 24);
  uint64_t v58 = (double *)(v51 + 40);
  if (v52 >= v53) {
    double v57 = v58;
  }
  if (v48 >= v49) {
    double v55 = v56;
  }
  if (v50 == v54 && v55 < *v57)
  {
LABEL_76:
    *a2 = *a3;
LABEL_78:
    *a3 = v5;
  }
  return result;
}

uint64_t *std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __n128 result = std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a2, a3);
  uint64_t v9 = *(void *)(*a4 + 8);
  if (*(void *)(*a4 + 16) == v9) {
    goto LABEL_54;
  }
  uint64_t v10 = *a3;
  unint64_t v11 = *(void *)(v9 + 16);
  unint64_t v12 = *(void *)(v9 + 32);
  unint64_t v13 = v11 >= v12 ? *(void *)(v9 + 32) : *(void *)(v9 + 16);
  uint64_t v14 = *(void *)(v10 + 8);
  if (*(void *)(v10 + 16) == v14) {
    goto LABEL_54;
  }
  unint64_t v15 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 32);
  if (v15 >= v16) {
    unint64_t v17 = *(void *)(v14 + 32);
  }
  else {
    unint64_t v17 = *(void *)(v14 + 16);
  }
  if (v13 < v17) {
    goto LABEL_19;
  }
  double v18 = *(double *)(v9 + 24);
  double v19 = *(double *)(v9 + 40);
  unint64_t v20 = (double *)(v14 + 24);
  unint64_t v21 = (double *)(v14 + 40);
  if (v15 >= v16) {
    unint64_t v20 = v21;
  }
  if (v11 >= v12) {
    double v18 = v19;
  }
  if (v13 == v17 && v18 < *v20)
  {
LABEL_19:
    *a3 = *a4;
    *a4 = v10;
    uint64_t v23 = *(void *)(*a3 + 8);
    if (*(void *)(*a3 + 16) != v23)
    {
      uint64_t v24 = *a2;
      unint64_t v25 = *(void *)(v23 + 16);
      unint64_t v26 = *(void *)(v23 + 32);
      unint64_t v27 = v25 >= v26 ? *(void *)(v23 + 32) : *(void *)(v23 + 16);
      uint64_t v28 = *(void *)(v24 + 8);
      if (*(void *)(v24 + 16) != v28)
      {
        unint64_t v29 = *(void *)(v28 + 16);
        unint64_t v30 = *(void *)(v28 + 32);
        if (v29 >= v30) {
          unint64_t v31 = *(void *)(v28 + 32);
        }
        else {
          unint64_t v31 = *(void *)(v28 + 16);
        }
        if (v27 >= v31)
        {
          double v32 = *(double *)(v23 + 24);
          double v33 = *(double *)(v23 + 40);
          unint64_t v34 = (double *)(v28 + 24);
          double v35 = (double *)(v28 + 40);
          if (v29 >= v30) {
            unint64_t v34 = v35;
          }
          if (v25 >= v26) {
            double v32 = v33;
          }
          if (v27 != v31 || v32 >= *v34) {
            return result;
          }
        }
        *a2 = *a3;
        *a3 = v24;
        uint64_t v37 = *(void *)(*a2 + 8);
        if (*(void *)(*a2 + 16) != v37)
        {
          uint64_t v38 = *a1;
          unint64_t v39 = *(void *)(v37 + 16);
          unint64_t v40 = *(void *)(v37 + 32);
          unint64_t v41 = v39 >= v40 ? *(void *)(v37 + 32) : *(void *)(v37 + 16);
          uint64_t v42 = *(void *)(v38 + 8);
          if (*(void *)(v38 + 16) != v42)
          {
            unint64_t v43 = *(void *)(v42 + 16);
            unint64_t v44 = *(void *)(v42 + 32);
            if (v43 >= v44) {
              unint64_t v45 = *(void *)(v42 + 32);
            }
            else {
              unint64_t v45 = *(void *)(v42 + 16);
            }
            if (v41 < v45) {
              goto LABEL_52;
            }
            double v46 = *(double *)(v37 + 24);
            double v47 = *(double *)(v37 + 40);
            unint64_t v48 = (double *)(v42 + 24);
            unint64_t v49 = (double *)(v42 + 40);
            if (v43 >= v44) {
              unint64_t v48 = v49;
            }
            if (v39 >= v40) {
              double v46 = v47;
            }
            if (v41 == v45 && v46 < *v48)
            {
LABEL_52:
              *a1 = *a2;
              *a2 = v38;
            }
            return result;
          }
        }
      }
    }
LABEL_54:
    __break(1u);
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  __n128 result = std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a2, a3, a4);
  uint64_t v11 = *(void *)(*a5 + 8);
  if (*(void *)(*a5 + 16) == v11) {
    goto LABEL_69;
  }
  uint64_t v12 = *a4;
  unint64_t v13 = *(void *)(v11 + 16);
  unint64_t v14 = *(void *)(v11 + 32);
  unint64_t v15 = v13 >= v14 ? *(void *)(v11 + 32) : *(void *)(v11 + 16);
  uint64_t v16 = *(void *)(v12 + 8);
  if (*(void *)(v12 + 16) == v16) {
    goto LABEL_69;
  }
  unint64_t v17 = *(void *)(v16 + 16);
  unint64_t v18 = *(void *)(v16 + 32);
  if (v17 >= v18) {
    unint64_t v19 = *(void *)(v16 + 32);
  }
  else {
    unint64_t v19 = *(void *)(v16 + 16);
  }
  if (v15 < v19) {
    goto LABEL_19;
  }
  double v20 = *(double *)(v11 + 24);
  double v21 = *(double *)(v11 + 40);
  unint64_t v22 = (double *)(v16 + 24);
  uint64_t v23 = (double *)(v16 + 40);
  if (v17 >= v18) {
    unint64_t v22 = v23;
  }
  if (v13 >= v14) {
    double v20 = v21;
  }
  if (v15 == v19 && v20 < *v22)
  {
LABEL_19:
    *a4 = *a5;
    *a5 = v12;
    uint64_t v25 = *(void *)(*a4 + 8);
    if (*(void *)(*a4 + 16) != v25)
    {
      uint64_t v26 = *a3;
      unint64_t v27 = *(void *)(v25 + 16);
      unint64_t v28 = *(void *)(v25 + 32);
      unint64_t v29 = v27 >= v28 ? *(void *)(v25 + 32) : *(void *)(v25 + 16);
      uint64_t v30 = *(void *)(v26 + 8);
      if (*(void *)(v26 + 16) != v30)
      {
        unint64_t v31 = *(void *)(v30 + 16);
        unint64_t v32 = *(void *)(v30 + 32);
        if (v31 >= v32) {
          unint64_t v33 = *(void *)(v30 + 32);
        }
        else {
          unint64_t v33 = *(void *)(v30 + 16);
        }
        if (v29 >= v33)
        {
          double v34 = *(double *)(v25 + 24);
          double v35 = *(double *)(v25 + 40);
          double v36 = (double *)(v30 + 24);
          uint64_t v37 = (double *)(v30 + 40);
          if (v31 >= v32) {
            double v36 = v37;
          }
          if (v27 >= v28) {
            double v34 = v35;
          }
          if (v29 != v33 || v34 >= *v36) {
            return result;
          }
        }
        *a3 = *a4;
        *a4 = v26;
        uint64_t v39 = *(void *)(*a3 + 8);
        if (*(void *)(*a3 + 16) != v39)
        {
          uint64_t v40 = *a2;
          unint64_t v41 = *(void *)(v39 + 16);
          unint64_t v42 = *(void *)(v39 + 32);
          unint64_t v43 = v41 >= v42 ? *(void *)(v39 + 32) : *(void *)(v39 + 16);
          uint64_t v44 = *(void *)(v40 + 8);
          if (*(void *)(v40 + 16) != v44)
          {
            unint64_t v45 = *(void *)(v44 + 16);
            unint64_t v46 = *(void *)(v44 + 32);
            if (v45 >= v46) {
              unint64_t v47 = *(void *)(v44 + 32);
            }
            else {
              unint64_t v47 = *(void *)(v44 + 16);
            }
            if (v43 >= v47)
            {
              double v48 = *(double *)(v39 + 24);
              double v49 = *(double *)(v39 + 40);
              unint64_t v50 = (double *)(v44 + 24);
              uint64_t v51 = (double *)(v44 + 40);
              if (v45 >= v46) {
                unint64_t v50 = v51;
              }
              if (v41 >= v42) {
                double v48 = v49;
              }
              if (v43 != v47 || v48 >= *v50) {
                return result;
              }
            }
            *a2 = *a3;
            *a3 = v40;
            uint64_t v52 = *(void *)(*a2 + 8);
            if (*(void *)(*a2 + 16) != v52)
            {
              uint64_t v53 = *a1;
              unint64_t v54 = *(void *)(v52 + 16);
              unint64_t v55 = *(void *)(v52 + 32);
              unint64_t v56 = v54 >= v55 ? *(void *)(v52 + 32) : *(void *)(v52 + 16);
              uint64_t v57 = *(void *)(v53 + 8);
              if (*(void *)(v53 + 16) != v57)
              {
                unint64_t v58 = *(void *)(v57 + 16);
                unint64_t v59 = *(void *)(v57 + 32);
                if (v58 >= v59) {
                  unint64_t v60 = *(void *)(v57 + 32);
                }
                else {
                  unint64_t v60 = *(void *)(v57 + 16);
                }
                if (v56 < v60) {
                  goto LABEL_67;
                }
                double v61 = *(double *)(v52 + 24);
                double v62 = *(double *)(v52 + 40);
                unint64_t v63 = (double *)(v57 + 24);
                unint64_t v64 = (double *)(v57 + 40);
                if (v58 >= v59) {
                  unint64_t v63 = v64;
                }
                if (v54 >= v55) {
                  double v61 = v62;
                }
                if (v56 == v60 && v61 < *v63)
                {
LABEL_67:
                  *a1 = *a2;
                  *a2 = v53;
                }
                return result;
              }
            }
          }
        }
      }
    }
LABEL_69:
    __break(1u);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *(void *)(v6 + 8);
      if (*(void *)(v6 + 16) == v7) {
        goto LABEL_71;
      }
      uint64_t v8 = *a1;
      unint64_t v9 = *(void *)(v7 + 16);
      unint64_t v10 = *(void *)(v7 + 32);
      unint64_t v11 = v9 >= v10 ? *(void *)(v7 + 32) : *(void *)(v7 + 16);
      uint64_t v12 = *(void *)(v8 + 8);
      if (*(void *)(v8 + 16) == v12) {
        goto LABEL_71;
      }
      unint64_t v13 = *(void *)(v12 + 16);
      unint64_t v14 = *(void *)(v12 + 32);
      if (v13 >= v14) {
        unint64_t v15 = *(void *)(v12 + 32);
      }
      else {
        unint64_t v15 = *(void *)(v12 + 16);
      }
      if (v11 < v15) {
        goto LABEL_20;
      }
      double v16 = *(double *)(v7 + 24);
      double v17 = *(double *)(v7 + 40);
      unint64_t v18 = (double *)(v12 + 24);
      unint64_t v19 = (double *)(v12 + 40);
      if (v13 >= v14) {
        unint64_t v18 = v19;
      }
      if (v9 >= v10) {
        double v16 = v17;
      }
      if (v11 == v15 && v16 < *v18)
      {
LABEL_20:
        *a1 = v6;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      double v21 = a1 + 2;
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a1 + 1, a1 + 2);
      unint64_t v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      break;
  }
  while (1)
  {
    uint64_t v25 = *v22;
    uint64_t v26 = *(void *)(*v22 + 8);
    if (*(void *)(*v22 + 16) == v26
      || ((uint64_t v27 = *v21, v28 = *(void *)(v26 + 16), v29 = *(void *)(v26 + 32), v28 >= v29)
        ? (unint64_t v30 = *(void *)(v26 + 32))
        : (unint64_t v30 = *(void *)(v26 + 16)),
          uint64_t v31 = *(void *)(v27 + 8),
          *(void *)(v27 + 16) == v31))
    {
LABEL_71:
      __break(1u);
      JUMPOUT(0x184D3B7E8);
    }
    unint64_t v32 = *(void *)(v31 + 16);
    unint64_t v33 = *(void *)(v31 + 32);
    unint64_t v34 = v32 >= v33 ? *(void *)(v31 + 32) : *(void *)(v31 + 16);
    if (v30 < v34) {
      goto LABEL_41;
    }
    double v35 = *(double *)(v26 + 24);
    double v36 = *(double *)(v26 + 40);
    uint64_t v37 = (double *)(v31 + 24);
    uint64_t v38 = (double *)(v31 + 40);
    if (v32 >= v33) {
      uint64_t v37 = v38;
    }
    if (v28 >= v29) {
      double v35 = v36;
    }
    if (v30 == v34 && v35 < *v37)
    {
LABEL_41:
      *unint64_t v22 = v27;
      uint64_t v40 = a1;
      if (v21 != a1)
      {
        uint64_t v41 = v23;
        do
        {
          uint64_t v42 = *(void *)(v25 + 8);
          if (*(void *)(v25 + 16) == v42) {
            goto LABEL_71;
          }
          uint64_t v43 = *(uint64_t *)((char *)a1 + v41 + 8);
          unint64_t v44 = *(void *)(v42 + 16);
          unint64_t v45 = *(void *)(v42 + 32);
          unint64_t v46 = v44 >= v45 ? *(void *)(v42 + 32) : *(void *)(v42 + 16);
          uint64_t v47 = *(void *)(v43 + 8);
          if (*(void *)(v43 + 16) == v47) {
            goto LABEL_71;
          }
          unint64_t v48 = *(void *)(v47 + 16);
          unint64_t v49 = *(void *)(v47 + 32);
          if (v48 >= v49) {
            unint64_t v50 = *(void *)(v47 + 32);
          }
          else {
            unint64_t v50 = *(void *)(v47 + 16);
          }
          if (v46 >= v50)
          {
            double v51 = *(double *)(v42 + 24);
            double v52 = *(double *)(v42 + 40);
            uint64_t v53 = (double *)(v47 + 24);
            unint64_t v54 = (double *)(v47 + 40);
            if (v48 >= v49) {
              uint64_t v53 = v54;
            }
            if (v44 >= v45) {
              double v51 = v52;
            }
            if (v46 != v50 || v51 >= *v53)
            {
              uint64_t v40 = (uint64_t *)((char *)a1 + v41 + 16);
              goto LABEL_63;
            }
          }
          *(uint64_t *)((char *)a1 + v41 + 16) = v43;
          v41 -= 8;
        }
        while (v41 != -16);
        uint64_t v40 = a1;
      }
LABEL_63:
      *uint64_t v40 = v25;
      if (++v24 == 8) {
        return v22 + 1 == a2;
      }
    }
    double v21 = v22;
    v23 += 8;
    if (++v22 == a2) {
      return 1;
    }
  }
}

CGPathRef CGPathCreateCopyOfLineBySubtractingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingLineWithPath(2, path, maskPath, evenOddFillRule);
}

CGPathRef CGPathCreateCopyOfLineByIntersectingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingLineWithPath(0, path, maskPath, evenOddFillRule);
}

CFArrayRef CGPathCreateSeparateComponents(CGPathRef path, BOOL evenOddFillRule)
{
  if (path)
  {
    BOOL v2 = evenOddFillRule;
    if (CGPathDisableTypeValidation || (CFTypeID v4 = CFGetTypeID(path), v4 == CGPathGetTypeID()))
    {
      memset(v14, 0, sizeof(v14));
      memset(v10, 0, sizeof(v10));
      long long v9 = 0u;
      long long v8 = 0u;
      uint64_t v7 = &unk_1ED094608;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      memset(v6, 0, sizeof(v6));
      clip<ClipperLib::PolyTree>(v6, 1, path, v2, 1, 0, v2, (CGPathRandomAccess *)v14, (ClipperLib::PolyTree *)&v7);
    }
  }
  return 0;
}

void sub_184D3B9DC(_Unwind_Exception *a1)
{
  ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)(v1 - 160));
  *(void *)(v1 - 160) = v1 - 56;
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:fe180100](v3);
  _Unwind_Resume(a1);
}

CGPathRef CGPathCreateCopyByFlattening(CGPathRef path, CGFloat flatteningThreshold)
{
  BOOL v2 = path;
  if (path)
  {
    if (CGPathDisableTypeValidation || (CFTypeID v4 = CFGetTypeID(path), v4 == CGPathGetTypeID()))
    {
      uint64_t v7 = 0;
      long long v8 = &v7;
      uint64_t v9 = 0x2000000000;
      CGMutablePathRef Mutable = 0;
      CGMutablePathRef Mutable = CGPathCreateMutable();
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 0x40000000;
      v6[2] = __CGPathCreateCopyByFlattening_block_invoke;
      _OWORD v6[3] = &unk_1E529FCB8;
      v6[4] = &v7;
      *(CGFloat *)&v6[5] = flatteningThreshold;
      CGPathApplyWithBlock(v2, v6);
      BOOL v2 = (const CGPath *)v8[3];
      _Block_object_dispose(&v7, 8);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_184D3BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __CGPathCreateCopyByFlattening_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  switch(*(_DWORD *)a2)
  {
    case 0:
      CFTypeID v4 = *(CGPath **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      uint64_t v5 = *(double **)(a2 + 8);
      CGFloat v6 = *v5;
      CGFloat v7 = v5[1];
      CGPathMoveToPoint(v4, 0, v6, v7);
      break;
    case 1:
      long long v8 = *(CGPath **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      uint64_t v9 = *(double **)(a2 + 8);
      CGFloat v10 = *v9;
      CGFloat v11 = v9[1];
      CGPathAddLineToPoint(v8, 0, v10, v11);
      break;
    case 2:
      CGPoint CurrentPoint = CGPathGetCurrentPoint((CGPathRef)*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      uint64_t v12 = *(float64x2_t **)(a2 + 8);
      float64x2_t v13 = v12[1];
      float64x2_t v14 = (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL);
      __n128 v16 = (__n128)vsubq_f64(*v12, v13);
      float64x2_t v23 = vmlaq_f64((float64x2_t)CurrentPoint, v14, vsubq_f64(*v12, (float64x2_t)CurrentPoint));
      float64x2_t v24 = vmlaq_f64(v13, v14, (float64x2_t)v16);
      __n128 v25 = (__n128)v12[1];
      double v15 = *(double *)(a1 + 40);
      v21[0] = MEMORY[0x1E4F143A8];
      v16.n128_u64[0] = 0x40000000;
      v21[1] = 0x40000000;
      v21[2] = __CGPathCreateCopyByFlattening_block_invoke_2;
      v21[3] = &unk_1E529FC68;
      void v21[4] = *(void *)(a1 + 32);
      double v17 = v21;
      goto LABEL_10;
    case 3:
      CGPoint CurrentPoint = CGPathGetCurrentPoint((CGPathRef)*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      unint64_t v18 = *(__n128 **)(a2 + 8);
      __n128 v16 = v18[1];
      float64x2_t v23 = *(float64x2_t *)v18;
      float64x2_t v24 = (float64x2_t)v16;
      __n128 v25 = v18[2];
      double v15 = *(double *)(a1 + 40);
      v20[0] = MEMORY[0x1E4F143A8];
      v16.n128_u64[0] = 0x40000000;
      v20[1] = 0x40000000;
      v20[2] = __CGPathCreateCopyByFlattening_block_invoke_3;
      v20[3] = &unk_1E529FC90;
      v20[4] = *(void *)(a1 + 32);
      double v17 = v20;
LABEL_10:
      subdivide_bezier_with_flatness((uint64_t)&CurrentPoint, (uint64_t)v17, v15, v16);
      break;
    case 4:
      unint64_t v19 = *(CGPath **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      CGPathCloseSubpath(v19);
      break;
    default:
      return;
  }
}

void __CGPathCreateCopyByFlattening_block_invoke_2(uint64_t a1, CGFloat a2, CGFloat a3)
{
}

void __CGPathCreateCopyByFlattening_block_invoke_3(uint64_t a1, CGFloat a2, CGFloat a3)
{
}

uint64_t PDFMarkedContentItem::PDFMarkedContentItem(uint64_t result, int a2, void *a3)
{
  *(_DWORD *)BOOL result = a2;
  if (a3) {
    uint64_t v3 = a3[2];
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)(result + 8) = v3;
  *(void *)(result + 32) = 0;
  if (a2)
  {
    *(void *)(result + 16) = 0;
    uint64_t v4 = -1;
  }
  else
  {
    uint64_t v5 = a3[11];
    a3[11] = v5 + 1;
    *(void *)(result + 16) = v5;
    uint64_t v4 = a3[12];
    if (v4 == -1)
    {
      uint64_t v6 = a3[1];
      uint64_t v4 = *(void *)(v6 + 592);
      *(void *)(v6 + 592) = v4 + 1;
      a3[12] = v4;
    }
  }
  *(void *)(result + 24) = v4;
  return result;
}

uint64_t (**cg_jbig2_library_link_symbol())(void)
{
  return cg_jbig2_vtable;
}

uint64_t rewind(void *a1)
{
  uint64_t result = a1[2];
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t read_bytes(void *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = a1[2];
  if (!v5) {
    operator new();
  }
  if (!a3) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
    if (v7 == -1) {
      break;
    }
    a2[v6++] = v7;
    if (a3 == v6) {
      return a3;
    }
  }
  return v6;
}

void sub_184D3C4D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x184D3C468);
  }
  _Unwind_Resume(exception_object);
}

uint64_t release_state(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 16);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    if (*(void *)v1) {
      CFRelease(*(CFTypeRef *)v1);
    }
    uint64_t v3 = *(const void **)(v1 + 8);
    if (v3) {
      CFRelease(v3);
    }
    JUMPOUT(0x18532A2A0);
  }
  return result;
}

uint64_t create_state(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 0;
}

uint64_t get_version(void)
{
  return 1;
}

void CGBufferStorage::FreeStorage(CGBufferStorage *this, void *a2, void *a3)
{
}

uint64_t CGBufferStorage::UnMapStorage(uint64_t this, void *a2, void *a3)
{
  if (this) {
    return munmap(*(void **)(this + 48), *(void *)(this + 56));
  }
  return this;
}

char *CGBufferStorage::Create(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = 1 << a2;
  if ((unint64_t)(1 << a2) <= 8) {
    size_t v5 = 8;
  }
  else {
    size_t v5 = 1 << a2;
  }
  if ((a2 & 0x600) != 0) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  memptr = 0;
  if ((a2 & 0x600) != 0)
  {
    unint64_t v7 = (a2 << 53 >> 63) & (2 * *MEMORY[0x1E4F14B00]);
    unint64_t v8 = (((a1 + 127) & 0xFFFFFFFFFFFFFFE0) + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    uint64_t v9 = v8 + v7;
    CGFloat v10 = (char *)mmap(0, v8 + v7, 3, 4097, 905969664, 0);
    memptr = v10;
    if (v10 == (char *)-1) {
      return 0;
    }
    unint64_t v18 = (unint64_t)(a2 & 0x200) >> 9;
    unint64_t v19 = &v10[v7 >> 1];
    if ((a2 & 0x200) != 0) {
      uint64_t result = &v10[v9 - (v7 >> 1) - 96];
    }
    else {
      uint64_t result = &v10[v7 >> 1];
    }
    if ((a2 & 0x200) != 0) {
      double v21 = v19;
    }
    else {
      double v21 = v19 + 96;
    }
    unint64_t v22 = v8 - 96;
    float64x2_t v23 = CGBufferStorage::UnMapStorage;
  }
  else
  {
    uint64_t v24 = (v5 + 95) & -(uint64_t)v5;
    uint64_t v25 = a1 + v5 + v24 - 1;
    uint64_t v9 = v25 & -(uint64_t)v5;
    if (v5 == 16)
    {
      uint64_t result = (char *)malloc_type_malloc(v25 & 0xFFFFFFFFFFFFFFF0, 0x797A1631uLL);
      memptr = result;
      if (!result) {
        return result;
      }
    }
    else
    {
      malloc_type_posix_memalign(&memptr, v5, v25 & -(uint64_t)v5, 0x3847BF77uLL);
      uint64_t result = (char *)memptr;
      if (!memptr) {
        return result;
      }
    }
    LOBYTE(v18) = 0;
    double v21 = &result[v24];
    unint64_t v22 = v9 - v24;
    float64x2_t v23 = CGBufferStorage::FreeStorage;
  }
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  atomic_store(1uLL, (unint64_t *)result);
  *((void *)result + 6) = memptr;
  *((void *)result + 7) = v9;
  *((void *)result + 1) = v6;
  *((void *)result + 2) = v21;
  *((void *)result + 3) = v22;
  *((void *)result + 9) = 0;
  *((void *)result + 10) = 0;
  *((void *)result + 8) = v23;
  result[88] = v18 & 1;
  if (v22 < a1
    || (v18 & 1) == 0
    && (BOOL v27 = ((unint64_t)&v21[v22 - a1] & -(uint64_t)v6) >= (unint64_t)v21,
        double v21 = (char *)((unint64_t)&v21[v22 - a1] & -(uint64_t)v6),
        !v27))
  {
    addouble d = atomic_fetch_add((atomic_ullong *volatile)result, 0xFFFFFFFFFFFFFFFFLL);
    if (add <= 0) {
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", v15, v16, v17, v28);
    }
    if (add == 1) {
      CGBufferStorage::~CGBufferStorage((atomic_ullong *)result, v11, v12, v13, v14, v15, v16, v17);
    }
    return 0;
  }
  *((void *)result + 4) = v21;
  *((void *)result + 5) = a1;
  return result;
}

void CGBufferStorage::~CGBufferStorage(atomic_ullong *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (atomic_load_explicit(this, memory_order_acquire)) {
    _CGHandleAssert("~CGBufferStorage", 206, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "0 == atomic_load_explicit(&refCount, std::memory_order_acquire)", "CGBufferStorage destructed with non-zero reference count", a6, a7, a8, v11);
  }
  uint64_t v9 = (void (*)(atomic_ullong, atomic_ullong))this[9];
  if (v9) {
    v9(this[10], this[2]);
  }
  CGFloat v10 = (void (*)(atomic_ullong *, atomic_ullong))this[8];
  if (v10) {
    v10(this, this[6]);
  }
}

char *CGBufferStorage::CreateWithBuffer(uint64_t this, void *a2, uint64_t a3, void (*a4)(void *, void *), void *a5)
{
  uint64_t result = CGBufferStorage::Create(0, 5);
  if (result)
  {
    *((void *)result + 1) = -this & this;
    *((void *)result + 2) = this;
    *((void *)result + 4) = this;
    *((void *)result + 5) = a2;
    *((void *)result + 3) = a2;
    *((void *)result + 9) = a3;
    *((void *)result + 10) = a4;
  }
  return result;
}

void CGBufferStorage::ReleaseImageBlockSet(uint64_t this, void *a2, void *a3)
{
  if (this) {
    CGImageBlockSetRelease(this);
  }
}

char *CGBufferStorage::CreateWithImageBlockSet(char *result, unint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    if (*((void *)result + 15) > a2)
    {
      uint64_t v3 = *(uint64_t **)&result[8 * a2 + 128];
      if (v3)
      {
        unint64_t v4 = (unint64_t)*((double *)result + 6);
        unint64_t v5 = (unint64_t)*((double *)result + 7);
        if (v4 && v5 != 0)
        {
          uint64_t v7 = v3[5];
          uint64_t v8 = *((void *)result + 9);
          atomic_fetch_add_explicit((atomic_uint *volatile)result, 1u, memory_order_relaxed);
          uint64_t v9 = *v3;
          uint64_t result = CGBufferStorage::Create(0, 5);
          if (result)
          {
            uint64_t v10 = v8 * v4 + (v5 - 1) * v7;
            *((void *)result + 1) = -v9 & v9;
            *((void *)result + 2) = v9;
            *((void *)result + 4) = v9;
            *((void *)result + 5) = v10;
            *((void *)result + 3) = v10;
            *((void *)result + 9) = CGBufferStorage::ReleaseImageBlockSet;
            *((void *)result + 10) = v2;
            return result;
          }
          CGImageBlockSetRelease(v2);
        }
      }
    }
    return 0;
  }
  return result;
}

void CGBufferStorage::ReleaseCFData(CFTypeRef this, void *a2, void *a3)
{
  if (this) {
    CFRelease(this);
  }
}

char *CGBufferStorage::CreateWithCFData(CGBufferStorage *this, const __CFData *a2)
{
  if (!this) {
    return 0;
  }
  uint64_t BytePtr = (uint64_t)CFDataGetBytePtr(this);
  CFIndex Length = CFDataGetLength(this);
  unint64_t v5 = CGBufferStorage::Create(0, 5);
  size_t v6 = v5;
  if (v5)
  {
    *((void *)v5 + 1) = -BytePtr & BytePtr;
    *((void *)v5 + 2) = BytePtr;
    *((void *)v5 + 4) = BytePtr;
    *((void *)v5 + 5) = Length;
    *((void *)v5 + 3) = Length;
    *((void *)v5 + 9) = CGBufferStorage::ReleaseCFData;
    *((void *)v5 + 10) = this;
    CFRetain(this);
  }
  return v6;
}

uint64_t CGBufferStorage::Resize(CGBufferStorage *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 3);
  unint64_t v3 = v2 - a2;
  if (v2 < a2) {
    return 0;
  }
  unint64_t v5 = *((void *)this + 2);
  if (!*((unsigned char *)this + 88))
  {
    unint64_t v6 = (v3 + v5) & -*((void *)this + 1);
    BOOL v7 = v5 > v6;
    unint64_t v5 = v6;
    if (v7) {
      return 0;
    }
  }
  *((void *)this + 4) = v5;
  *((void *)this + 5) = a2;
  return 1;
}

void CGBufferStorage::DataProviderReleaseInfoCallback(atomic_ullong *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (this)
  {
    addouble d = atomic_fetch_add(this, 0xFFFFFFFFFFFFFFFFLL);
    if (add <= 0) {
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", a6, a7, a8, vars0);
    }
    if (add == 1)
    {
      CGBufferStorage::~CGBufferStorage(this, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void CGBufferStorage::BitmapContextReleaseDataCallback(atomic_ullong *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (this)
  {
    addouble d = atomic_fetch_add(this, 0xFFFFFFFFFFFFFFFFLL);
    if (add <= 0) {
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", a6, a7, a8, vars0);
    }
    if (add == 1)
    {
      CGBufferStorage::~CGBufferStorage(this, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void CGBuf::CGBuf(CGBuf *this, CGContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((void *)this + 40) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (!a2) {
    return;
  }
  if (*((_DWORD *)a2 + 4) == 1129601108 && *((_DWORD *)a2 + 6) == 4)
  {
    uint64_t v10 = *(void *)(*((void *)a2 + 4) + 8);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetWidth", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v10 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108) {
      goto LABEL_8;
    }
  }
  if (*((_DWORD *)a2 + 6) == 4)
  {
    uint64_t v11 = *(void *)(*((void *)a2 + 4) + 16);
    goto LABEL_9;
  }
LABEL_8:
  handle_invalid_context((char)"CGBitmapContextGetHeight", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = 0;
  if (*((_DWORD *)a2 + 4) != 1129601108) {
    goto LABEL_11;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 6) != 4)
  {
LABEL_11:
    handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    unsigned int v12 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  unsigned int v12 = *(_DWORD *)(*((void *)a2 + 4) + 40);
LABEL_12:
  if (*((_DWORD *)a2 + 6) == 4)
  {
    unsigned int v13 = *(_DWORD *)(*((void *)a2 + 4) + 72);
    goto LABEL_15;
  }
LABEL_14:
  handle_invalid_context((char)"CGBitmapContextGetBitsPerPixel", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  unsigned int v13 = 0;
  if (*((_DWORD *)a2 + 4) != 1129601108) {
    goto LABEL_17;
  }
LABEL_15:
  if (*((_DWORD *)a2 + 6) != 4)
  {
LABEL_17:
    handle_invalid_context((char)"CGBitmapContextGetBitsPerComponent", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    unsigned int v14 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  unsigned int v14 = *(_DWORD *)(*((void *)a2 + 4) + 80);
LABEL_18:
  if (*((_DWORD *)a2 + 6) == 4)
  {
    uint64_t v15 = *(CGColorSpace **)(*((void *)a2 + 4) + 32);
    goto LABEL_21;
  }
LABEL_20:
  handle_invalid_context((char)"CGBitmapContextGetColorSpace", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v15 = 0;
LABEL_21:
  CGBuf::Init((int8x8_t *)this, v10, v11, v12, v13, v14, v15, 0, 0, 4);
  if (*((_DWORD *)a2 + 4) == 1129601108 && *((_DWORD *)a2 + 6) == 4)
  {
    uint64_t v22 = *(void *)(*((void *)a2 + 4) + 64);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetData", (uint64_t)a2, v16, v17, v18, v19, v20, v21);
    uint64_t v22 = 0;
  }
  uint64_t v24 = *((void *)this + 4);
  uint64_t v23 = *((void *)this + 5);
  uint64_t v25 = *((void *)this + 3);
  uint64_t v26 = *((unsigned __int8 *)this + 324);
  BOOL v27 = CGBufferStorage::Create(0, 5);
  if (v27)
  {
    unint64_t v28 = (v24 - 1) * v23 + ((unint64_t)(v25 * v26 + 7) >> 3);
    *((void *)v27 + 1) = -v22 & v22;
    *((void *)v27 + 2) = v22;
    *((void *)v27 + 4) = v22;
    *((void *)v27 + 5) = v28;
    *((void *)v27 + 3) = v28;
    *((void *)v27 + 9) = ReleaseCGContext;
    *((void *)v27 + 10) = a2;
  }
  *(void *)this = v27;
  CFRetain(a2);
  *((void *)this + 2) = a2;
}

{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  CGColorSpace *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;

  *((void *)this + 40) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (!a2) {
    return;
  }
  if (*((_DWORD *)a2 + 4) == 1129601108 && *((_DWORD *)a2 + 6) == 4)
  {
    uint64_t v10 = *(void *)(*((void *)a2 + 4) + 8);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetWidth", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v10 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108) {
      goto LABEL_8;
    }
  }
  if (*((_DWORD *)a2 + 6) == 4)
  {
    uint64_t v11 = *(void *)(*((void *)a2 + 4) + 16);
    goto LABEL_9;
  }
LABEL_8:
  handle_invalid_context((char)"CGBitmapContextGetHeight", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = 0;
  if (*((_DWORD *)a2 + 4) != 1129601108) {
    goto LABEL_11;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 6) != 4)
  {
LABEL_11:
    handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    unsigned int v12 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  unsigned int v12 = *(_DWORD *)(*((void *)a2 + 4) + 40);
LABEL_12:
  if (*((_DWORD *)a2 + 6) == 4)
  {
    unsigned int v13 = *(_DWORD *)(*((void *)a2 + 4) + 72);
    goto LABEL_15;
  }
LABEL_14:
  handle_invalid_context((char)"CGBitmapContextGetBitsPerPixel", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  unsigned int v13 = 0;
  if (*((_DWORD *)a2 + 4) != 1129601108) {
    goto LABEL_17;
  }
LABEL_15:
  if (*((_DWORD *)a2 + 6) != 4)
  {
LABEL_17:
    handle_invalid_context((char)"CGBitmapContextGetBitsPerComponent", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    unsigned int v14 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  unsigned int v14 = *(_DWORD *)(*((void *)a2 + 4) + 80);
LABEL_18:
  if (*((_DWORD *)a2 + 6) == 4)
  {
    uint64_t v15 = *(CGColorSpace **)(*((void *)a2 + 4) + 32);
    goto LABEL_21;
  }
LABEL_20:
  handle_invalid_context((char)"CGBitmapContextGetColorSpace", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v15 = 0;
LABEL_21:
  CGBuf::Init((int8x8_t *)this, v10, v11, v12, v13, v14, v15, 0, 0, 4);
  if (*((_DWORD *)a2 + 4) == 1129601108 && *((_DWORD *)a2 + 6) == 4)
  {
    uint64_t v22 = *(void *)(*((void *)a2 + 4) + 64);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetData", (uint64_t)a2, v16, v17, v18, v19, v20, v21);
    uint64_t v22 = 0;
  }
  uint64_t v24 = *((void *)this + 4);
  uint64_t v23 = *((void *)this + 5);
  uint64_t v25 = *((void *)this + 3);
  uint64_t v26 = *((unsigned __int8 *)this + 324);
  BOOL v27 = CGBufferStorage::Create(0, 5);
  if (v27)
  {
    unint64_t v28 = (v24 - 1) * v23 + ((unint64_t)(v25 * v26 + 7) >> 3);
    *((void *)v27 + 1) = -v22 & v22;
    *((void *)v27 + 2) = v22;
    *((void *)v27 + 4) = v22;
    *((void *)v27 + 5) = v28;
    *((void *)v27 + 3) = v28;
    *((void *)v27 + 9) = ReleaseCGContext;
    *((void *)v27 + 10) = a2;
  }
  *(void *)this = v27;
  CFRetain(a2);
  *((void *)this + 2) = a2;
}

void sub_184D3CEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void CGBuf::Init(int8x8_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, CGColorSpace *cf, const void *a8, __int8 a9, uint64_t a10)
{
  uint64_t v11 = cf;
  unsigned int v34 = a5;
  unsigned int v35 = a4;
  unsigned int v33 = a6;
  unint64_t v32 = cf;
  if ((a10 & 0x800) != 0)
  {
    LegalizeForContext(&v35, &v34, &v33, &v32);
    a5 = v34;
    a4 = v35;
    a6 = v33;
    uint64_t v11 = v32;
  }
  a1[3] = (int8x8_t)a2;
  a1[4] = (int8x8_t)a3;
  a1[40].i32[0] = a4;
  a1[40].i8[4] = a5;
  a1[40].i8[5] = a6;
  a1[40].i8[7] = a9;
  if (!v11)
  {
    int v17 = a5 / a6;
    int v18 = a5 % a6;
    a1[40].i8[6] = a5 / a6;
    BOOL v19 = (a4 & 0xF0000) != 0x20000 && (a5 != 16 || a6 != 5 || (a4 & 0x1F) != 0);
    if (v18 == 1) {
      int v18 = v19;
    }
    if ((a4 & 0x1F) != 0 && !v18)
    {
      LOBYTE(v17) = v17 - 1;
      a1[40].i8[6] = v17;
    }
    switch(v17)
    {
      case 4u:
        CGColorSpaceRef DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
        break;
      case 3u:
        CGColorSpaceRef DeviceCMYK = CGColorSpaceCreateDeviceRGB();
        break;
      case 1u:
        CGColorSpaceRef DeviceCMYK = CGColorSpaceCreateDeviceGray();
        break;
      default:
        CGColorSpaceRef DeviceCMYK = 0;
        break;
    }
    a1[6] = (int8x8_t)DeviceCMYK;
    if (a8) {
      goto LABEL_5;
    }
LABEL_32:
    a1[7] = 0;
    memset_pattern16(&a1[8], &xmmword_185293280, 0x100uLL);
    uint64_t v16 = 0;
    goto LABEL_33;
  }
  CFRetain(v11);
  a1[6] = (int8x8_t)v11;
  a1[40].i8[6] = *(void *)(*((void *)v11 + 3) + 48);
  if (!a8) {
    goto LABEL_32;
  }
LABEL_5:
  uint64_t v15 = a1[40].u8[6];
  if ((a1[40].i32[0] & 0x1Fu) - 1 < 4) {
    ++v15;
  }
  uint64_t v16 = a1 + 8;
  a1[7] = (int8x8_t)&a1[8];
  memcpy(&a1[8], a8, 16 * v15);
LABEL_33:
  __int32 v23 = a1[40].i32[0];
  uint64_t v24 = a1[40].u8[4];
  if ((v23 & 0xF0000) != 0) {
    goto LABEL_46;
  }
  int v25 = a1[40].u8[5];
  if (v25 == 10)
  {
    if (v24 == 32)
    {
      if (v16
        && !memcmp(v16, &InferPixelFormat(unsigned long,unsigned long,unsigned int,double const*)::kCIF10decode, 0x40uLL))
      {
        int v26 = 0x40000;
      }
      else
      {
        int v26 = 196608;
      }
      goto LABEL_45;
    }
  }
  else if (v25 == 5 && v24 == 16)
  {
    if ((v23 & 0x1F) != 0) {
      int v26 = ((a1[40].i32[0] & 0x1F) != 7) << 16;
    }
    else {
      int v26 = 0x20000;
    }
    goto LABEL_45;
  }
  int v26 = 0;
LABEL_45:
  a1[40].i32[0] = v26 | v23;
LABEL_46:
  unint64_t v27 = *(void *)&a1[3] * v24 + 7;
  uint64_t v28 = 8;
  if ((unint64_t)(1 << a10) > 8) {
    uint64_t v28 = 1 << a10;
  }
  if ((a10 & 0x600) != 0) {
    unint64_t v29 = 1 << a10;
  }
  else {
    unint64_t v29 = v28;
  }
  a1[5] = (int8x8_t)((v29 + (v27 >> 3) - 1) & -(uint64_t)v29);
  if (GetCachelineSize(void)::onceToken != -1) {
    dispatch_once(&GetCachelineSize(void)::onceToken, &__block_literal_global_593);
  }
  if (GetCachelineSize(void)::cachelineSize > v29) {
    unint64_t v29 = GetCachelineSize(void)::cachelineSize;
  }
  int8x8_t v30 = a1[5];
  if (*MEMORY[0x1E4F14B00] < (unint64_t)(8 * *(void *)&v30) && v29 << 6 <= *MEMORY[0x1E4F14B00])
  {
    uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] <= 1uLL)
    {
      do
        *(void *)&v30 += v29;
      while ((*(void *)&v30 & (*(void *)&v30 - 1)) == 0);
      a1[5] = v30;
    }
  }
}

void CGBuf::~CGBuf(CGBuf *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (CGColorSpace *)*((void *)this + 6);
  if (v9) {
    CGColorSpaceRelease(v9);
  }
  *((void *)this + 6) = 0;
  uint64_t v10 = *(atomic_ullong **)this;
  if (*(void *)this)
  {
    addouble d = atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFFLL);
    if (add <= 0) {
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", a6, a7, a8, v14);
    }
    if (add == 1) {
      CGBufferStorage::~CGBufferStorage(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(void *)this = 0;
  unsigned int v12 = (const void *)*((void *)this + 1);
  if (v12) {
    CFRelease(v12);
  }
  *((void *)this + 1) = 0;
  unsigned int v13 = (const void *)*((void *)this + 2);
  if (v13) {
    CFRelease(v13);
  }
  *((void *)this + 2) = 0;
}

void ReleaseCGContext(CFTypeRef cf, void *a2)
{
  if (cf) {
    CFRelease(cf);
  }
}

CGColorSpaceRef LegalizeForContext(unsigned int *a1, unsigned int *a2, unsigned int *a3, CGColorSpace **a4)
{
  unsigned int v5 = *a3;
  unsigned int v6 = *a2 / *a3;
  int v7 = 1 << *a1;
  BOOL v8 = (v7 & 0xFE) != 0;
  if (*a2 == v6 * *a3) {
    LOBYTE(v9) = *a2 / *a3 - 1;
  }
  else {
    unsigned int v9 = *a2 / *a3;
  }
  if ((v7 & 0xFE) == 0) {
    LOBYTE(v9) = v6;
  }
  if (v5 < 9 || (*a1 & 0x1F) == 7)
  {
    *a3 = 8;
    unsigned int v13 = *a1 & 0xFFFF8EFF;
  }
  else
  {
    if (v5 > 0xB)
    {
      if (v5 > 0x10)
      {
        *a3 = 32;
        unsigned int v10 = *a1 & 0xFFFF8EE0;
        unsigned int v11 = (*a1 & 0x1F) - (((1 << *a1) & 0x54) != 0);
        int v12 = 8448;
        goto LABEL_15;
      }
    }
    else if ((*a1 & 0x100) == 0)
    {
      *a3 = 16;
      unsigned int v10 = *a1 & 0xFFFF8EE0;
      unsigned int v11 = (*a1 & 0x1F) - (((1 << *a1) & 0x54) != 0);
      int v12 = 4352;
LABEL_15:
      unsigned int v13 = v10 | v12 | v11;
      goto LABEL_16;
    }
    *a3 = 16;
    unsigned int v13 = *a1 & 0xFFFF8FE0 | ((*a1 & 0x1F) - (((1 << *a1) & 0x54) != 0)) | 0x1000;
  }
LABEL_16:
  *a1 = v13;
  int v14 = v9;
  if ((v9 & 0xFC) != 0) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = v9;
  }
  if (v14 == 2) {
    int v15 = 3;
  }
  else {
    int v15 = v9;
  }
  switch(v15)
  {
    case 0:
      int v15 = 0;
      *a1 = v13 & 0xFFFFFFE0 | 7;
      *a3 = 8;
      unsigned int v20 = *a1 & 0xFFFF8EFF;
      BOOL v8 = 1;
      goto LABEL_32;
    case 1:
      BOOL v8 = 0;
      unsigned int v20 = v13 & 0xFFFFFFE0;
      int v15 = 1;
      goto LABEL_32;
    case 2:
    case 3:
      int v16 = v7 & 0x61;
      unsigned int v17 = (0x76521210u >> (4 * (v13 & 0x1F))) & 7;
      BOOL v18 = v16 == 0;
      if (v16) {
        unsigned int v19 = 5;
      }
      else {
        unsigned int v19 = v13 & 0xFFFFFFE0;
      }
      if (!v18) {
        unsigned int v17 = v13 & 0xFFFFFFE0;
      }
      unsigned int v20 = v17 | v19;
      BOOL v8 = 1;
      int v15 = 3;
      goto LABEL_32;
    case 4:
      BOOL v8 = 0;
      unsigned int v20 = v13 & 0xFFFFFFE0;
      int v15 = 4;
LABEL_32:
      *a1 = v20;
      break;
    default:
      break;
  }
  *a2 = (v8 + v15) * *a3;
  CGColorSpaceRef result = *a4;
  if (*a4)
  {
    if (*(void *)(*((void *)result + 3) + 48) == v15) {
      return result;
    }
    CGColorSpaceRelease(result);
    *a4 = 0;
  }
  switch(v15)
  {
    case 4:
      CGColorSpaceRef result = CGColorSpaceCreateDeviceCMYK();
      break;
    case 3:
      CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
      break;
    case 1:
      CGColorSpaceRef result = CGColorSpaceCreateDeviceGray();
      break;
    default:
      CGColorSpaceRef result = 0;
      break;
  }
  *a4 = result;
  return result;
}

uint64_t ___ZL16GetCachelineSizev_block_invoke()
{
  size_t v2 = 8;
  uint64_t v3 = 0;
  uint64_t result = sysctlbyname("hw.cachelinesize", &v3, &v2, 0, 0);
  if (v2 == 4) {
    uint64_t v1 = v3;
  }
  else {
    uint64_t v1 = v3;
  }
  if (result) {
    uint64_t v1 = 32;
  }
  GetCachelineSize(void)::cachelineSize = v1;
  return result;
}

void sub_184D3D848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t _FillBuffer<half>(uint64_t result, unint64_t a2, unsigned int *a3, double a4, double a5, float _S2)
{
  unint64_t v7 = a2;
  BOOL v8 = (_WORD *)result;
  unint64_t i = a2;
  unsigned int v10 = (int *)result;
  if (a2 >= 4)
  {
    unsigned int v10 = (int *)result;
    for (unint64_t i = a2; i > 3; i -= 4)
    {
      int v11 = rand_r(a3);
      uint64_t result = rand_r(a3);
      *v10++ = v11 ^ (result << 16);
    }
  }
  for (; i; --i)
  {
    uint64_t result = rand_r(a3);
    *(unsigned char *)unsigned int v10 = result;
    unsigned int v10 = (int *)((char *)v10 + 1);
  }
  if (v7 >= 2)
  {
    do
    {
      LOWORD(_S2) = *v8;
      _S2 = (float)((float)LODWORD(_S2) * 0.000030518) + -0.25;
      __asm { FCVT            H2, S2 }
      *v8++ = LOWORD(_S2);
      v7 -= 2;
    }
    while (v7 > 1);
  }
  return result;
}

float *_FillBuffer<float>(float *result, unint64_t a2, unsigned int *a3)
{
  unint64_t v4 = a2;
  unsigned int v5 = result;
  unint64_t i = a2;
  unint64_t v7 = (int *)result;
  if (a2 >= 4)
  {
    unint64_t v7 = (int *)result;
    for (unint64_t i = a2; i > 3; i -= 4)
    {
      int v8 = rand_r(a3);
      uint64_t result = (float *)rand_r(a3);
      *v7++ = v8 ^ (result << 16);
    }
  }
  for (; i; --i)
  {
    uint64_t result = (float *)rand_r(a3);
    *(unsigned char *)unint64_t v7 = (_BYTE)result;
    unint64_t v7 = (int *)((char *)v7 + 1);
  }
  if (v4 >= 4)
  {
    do
    {
      *unsigned int v5 = (float)((float)*(unsigned int *)v5 * 3.4925e-10) + -0.25;
      ++v5;
      v4 -= 4;
    }
    while (v4 > 3);
  }
  return result;
}

uint64_t CGBuf::FillBuffer(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 325);
  if (v2 != 32)
  {
    uint64_t v3 = _FillBuffer<unsigned char>;
    if (v2 != 16) {
      goto LABEL_10;
    }
    if ((*(_DWORD *)(a1 + 320) & 0x100) != 0)
    {
      BOOL v4 = (*(_DWORD *)(a1 + 320) & 0x7000) == 4096;
      uint64_t v3 = _SwapBuffer<half>;
      unsigned int v5 = _FillBuffer<half>;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v3 = _FillBuffer<unsigned char>;
    goto LABEL_10;
  }
  if ((*(_DWORD *)(a1 + 320) & 0x100) == 0) {
    goto LABEL_6;
  }
  BOOL v4 = (*(_DWORD *)(a1 + 320) & 0x7000) == 0x2000;
  uint64_t v3 = _SwapBuffer<float>;
  unsigned int v5 = _FillBuffer<float>;
LABEL_8:
  if (v4) {
    uint64_t v3 = v5;
  }
LABEL_10:
  unsigned int v7 = (HIDWORD(a2) & 0xFF000000 | v2)
     + *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32)
     + *(unsigned __int8 *)(a1 + 324)
     + *(unsigned __int8 *)(a1 + 326)
     + *(unsigned __int8 *)(a1 + 327);
  return ((uint64_t (*)(void, void, unsigned int *))v3)(*(void *)(*(void *)a1 + 32), *(void *)(*(void *)a1 + 40), &v7);
}

float *_SwapBuffer<float>(float *a1, unint64_t a2, unsigned int *a3)
{
  size_t v3 = a2;
  BOOL v4 = (int8x16_t *)a1;
  uint64_t result = _FillBuffer<float>(a1, a2, a3);
  if (v3 >= 0x10)
  {
    do
    {
      *BOOL v4 = vqtbl1q_s8(*v4, (int8x16_t)xmmword_1850CD860);
      ++v4;
      v3 -= 16;
    }
    while (v3 > 0xF);
  }
  if (v3)
  {
    int8x16_t v6 = 0u;
    memcpy(&v6, v4, v3);
    int8x16_t v6 = vqtbl1q_s8(v6, (int8x16_t)xmmword_1850CD860);
    return (float *)memcpy(v4, &v6, v3);
  }
  return result;
}

void *_SwapBuffer<half>(uint64_t a1, unint64_t a2, unsigned int *a3, double a4, double a5, float a6)
{
  size_t v6 = a2;
  unsigned int v7 = (int8x16_t *)a1;
  uint64_t result = (void *)_FillBuffer<half>(a1, a2, a3, a4, a5, a6);
  if (v6 >= 0x10)
  {
    do
    {
      int8x16_t *v7 = vqtbl1q_s8(*v7, (int8x16_t)xmmword_1850CD870);
      ++v7;
      v6 -= 16;
    }
    while (v6 > 0xF);
  }
  if (v6)
  {
    int8x16_t v9 = 0u;
    memcpy(&v9, v7, v6);
    int8x16_t v9 = vqtbl1q_s8(v9, (int8x16_t)xmmword_1850CD870);
    return memcpy(v7, &v9, v6);
  }
  return result;
}

int *_FillBuffer<unsigned char>(int *result, unint64_t a2, unsigned int *a3)
{
  unint64_t v4 = a2;
  unsigned int v5 = result;
  if (a2 >= 4)
  {
    do
    {
      int v6 = rand_r(a3);
      uint64_t result = (int *)rand_r(a3);
      *v5++ = v6 ^ (result << 16);
      v4 -= 4;
    }
    while (v4 > 3);
  }
  for (; v4; --v4)
  {
    uint64_t result = (int *)rand_r(a3);
    *(unsigned char *)unsigned int v5 = (_BYTE)result;
    unsigned int v5 = (int *)((char *)v5 + 1);
  }
  return result;
}

char *CGBuf::CreateBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 24) * *(unsigned __int8 *)(a1 + 324) + 7;
  if (v8 >= v9 >> 3)
  {
    uint64_t result = CGBufferStorage::Create((v9 >> 3) + a3 + (*(void *)(a1 + 32) - 1) * v8, a2);
    *(void *)a1 = result;
    if (result)
    {
      if ((a2 & 0x100) != 0) {
        CGBuf::FillBuffer(a1, a2);
      }
      return (char *)1;
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: rowBytes is too small", a2, a3, a4, a5, a6, a7, a8, (char)"CreateBuffer");
    return 0;
  }
  return result;
}

char *CGBuf::CreateBufferWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 24) * *(unsigned __int8 *)(a1 + 324) + 7;
  if (v8 >= v9 >> 3)
  {
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t result = CGBufferStorage::Create(0, 5);
    if (result)
    {
      *((void *)result + 1) = -a2 & a2;
      *((void *)result + 2) = a2;
      uint64_t v17 = (v9 >> 3) + (v16 - 1) * v8;
      *((void *)result + 4) = a2;
      *((void *)result + 5) = v17;
      *((void *)result + 3) = v17;
      *((void *)result + 9) = a3;
      *((void *)result + 10) = a4;
      *(void *)a1 = result;
      if ((a5 & 0x100) != 0) {
        CGBuf::FillBuffer(a1, a5);
      }
      return (char *)1;
    }
    else
    {
      *(void *)a1 = 0;
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: rowBytes is too small", a2, a3, a4, a5, a6, a7, a8, (char)"CreateBufferWithData");
    return 0;
  }
  return result;
}

uint64_t CGBuf::CGBuf(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, CGColorSpace *a7, const void *a8, __int8 a9, uint64_t a10)
{
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::Init((int8x8_t *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if ((CGBuf::CreateBuffer(a1, a10, 0, v11, v12, v13, v14, v15) & 1) == 0)
  {
    CGBuf::~CGBuf((CGBuf *)a1, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v32 = 0;
    memset(v31, 0, sizeof(v31));
    *(void *)(a1 + 320) = 0;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CGBuf::~CGBuf((CGBuf *)v31, v23, v24, v25, v26, v27, v28, v29);
  }
  return a1;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[20];
  uint64_t v32;

  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::Init((int8x8_t *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if ((CGBuf::CreateBuffer(a1, a10, 0, v11, v12, v13, v14, v15) & 1) == 0)
  {
    CGBuf::~CGBuf((CGBuf *)a1, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v32 = 0;
    memset(v31, 0, sizeof(v31));
    *(void *)(a1 + 320) = 0;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CGBuf::~CGBuf((CGBuf *)v31, v23, v24, v25, v26, v27, v28, v29);
  }
  return a1;
}

void sub_184D3DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_184D3E014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t CGBuf::CGBuf(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, CGColorSpace *cf, const void *a9, __int8 a10, uint64_t a11)
{
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::Init((int8x8_t *)a1, a2[2], a2[2], a3, a4, a5, cf, a9, a10, a11);
  *(void *)(a1 + 40) = a2[3];
  if (*a2) {
    BufferWithDatdouble a = CGBuf::CreateBufferWithData(a1, *a2, a6, a7, a11, v17, v18, v19);
  }
  else {
    BufferWithDatdouble a = CGBuf::CreateBuffer(a1, a11, 0, v15, v16, v17, v18, v19);
  }
  if ((BufferWithData & 1) == 0)
  {
    CGBuf::~CGBuf((CGBuf *)a1, v21, v22, v23, v24, v25, v26, v27);
    uint64_t v37 = 0;
    memset(v36, 0, sizeof(v36));
    *(void *)(a1 + 320) = 0;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CGBuf::~CGBuf((CGBuf *)v36, v28, v29, v30, v31, v32, v33, v34);
  }
  return a1;
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 BufferWithData;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v36[20];
  uint64_t v37;

  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::Init((int8x8_t *)a1, a2[2], a2[2], a3, a4, a5, cf, a9, a10, a11);
  *(void *)(a1 + 40) = a2[3];
  if (*a2) {
    BufferWithDatdouble a = CGBuf::CreateBufferWithData(a1, *a2, a6, a7, a11, v17, v18, v19);
  }
  else {
    BufferWithDatdouble a = CGBuf::CreateBuffer(a1, a11, 0, v15, v16, v17, v18, v19);
  }
  if ((BufferWithData & 1) == 0)
  {
    CGBuf::~CGBuf((CGBuf *)a1, v21, v22, v23, v24, v25, v26, v27);
    uint64_t v37 = 0;
    memset(v36, 0, sizeof(v36));
    *(void *)(a1 + 320) = 0;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CGBuf::~CGBuf((CGBuf *)v36, v28, v29, v30, v31, v32, v33, v34);
  }
  return a1;
}

void sub_184D3E17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_184D3E2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void CGBuf::CGBuf(CGBuf *this, unsigned int *cf)
{
  *((void *)this + 40) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (cf)
  {
    CFRetain(cf);
    *((void *)this + 1) = cf;
    ImageProvider = CGImageGetImageProvider(cf);
    if (ImageProvider)
    {
      uint64_t v12 = (uint64_t)ImageProvider;
      {
        CGBuf::CGBuf(CGImage *)::keys = @"kCGImageBlockSingletonRequest";
      }
      {
        CGBuf::CGBuf(CGImage *)::values = *MEMORY[0x1E4F1CFD0];
      }
      *((unsigned char *)this + 324) = 8 * *(unsigned char *)(v12 + 48);
      *((_DWORD *)this + 80) = *(_DWORD *)(v12 + 36) & 0x1F;
      uint64_t v13 = *(void *)(v12 + 120);
      if (!v13
        || (PropertCGFloat y = (CGColorSpace *)CGPropertiesGetProperty(v13, @"kCGImageProviderColorSpaceChangedOnImageCopy")) == 0)
      {
        PropertCGFloat y = *(CGColorSpace **)(v12 + 40);
      }
      *((void *)this + 6) = Property;
      switch(*(_DWORD *)(v12 + 32))
      {
        case 1:
          unsigned int v15 = 8;
          *((unsigned char *)this + 325) = 8;
          unsigned int v16 = *((_DWORD *)this + 80);
          goto LABEL_16;
        case 2:
          unsigned int v15 = 16;
          *((unsigned char *)this + 325) = 16;
          unsigned int v16 = *((_DWORD *)this + 80) | 0x1000;
          goto LABEL_15;
        case 3:
          unsigned int v15 = 32;
          *((unsigned char *)this + 325) = 32;
          unsigned int v16 = *((_DWORD *)this + 80) | 0x2000;
          goto LABEL_15;
        case 4:
          unsigned int v15 = 32;
          *((unsigned char *)this + 325) = 32;
          int v17 = *((_DWORD *)this + 80);
          int v18 = 8448;
          goto LABEL_14;
        case 5:
          unsigned int v15 = 16;
          *((unsigned char *)this + 325) = 16;
          int v17 = *((_DWORD *)this + 80);
          int v18 = 4352;
LABEL_14:
          unsigned int v16 = v17 | v18;
LABEL_15:
          *((_DWORD *)this + 80) = v16;
LABEL_16:
          uint64_t v19 = *((void *)cf + 5);
          uint64_t v20 = *((void *)cf + 6);
          unsigned int v21 = *((unsigned __int8 *)this + 324);
          Decode = CGImageGetDecode((CGImageRef)cf);
          __int8 RenderingIntent = CGImageGetRenderingIntent((CGImageRef)cf);
          CGBuf::Init((int8x8_t *)this, v19, v20, v16, v21, v15, Property, Decode, RenderingIntent, 4);
          CFDictionaryRef v24 = CFDictionaryCreate(0, (const void **)&CGBuf::CGBuf(CGImage *)::keys, (const void **)&CGBuf::CGBuf(CGImage *)::values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v25 = CGImageProviderCopyImageBlockSetWithOptions(v12, (uint64_t)v24);
          if (v24) {
            CFRelease(v24);
          }
          if (!v25) {
            goto LABEL_52;
          }
          *(void *)this = 0;
          if (*(void *)(v25 + 120) != 1
            || (uint64_t v26 = *(void *)(v25 + 128)) == 0
            || (uint64_t v27 = CGBufferStorage::CreateWithImageBlockSet((char *)v25, 0),
                *(void *)this = v27,
                *((void *)this + 5) = *(void *)(v26 + 40),
                !v27))
          {
            uint64_t v28 = CGBufferStorage::Create((*((void *)this + 4) - 1) * *((void *)this + 5)+ ((*((void *)this + 3) * (unint64_t)*((unsigned __int8 *)this + 324) + 7) >> 3), 4);
            *(void *)this = v28;
            if (v28)
            {
              uint64_t v29 = *(void *)(v25 + 120);
              if (v29)
              {
                unint64_t v30 = 0;
                uint64_t v81 = *(void *)(v25 + 72);
                do
                {
                  if (*(void *)(v25 + 120) > v30)
                  {
                    uint64_t v31 = *(double **)(v25 + 8 * v30 + 128);
                    if (v31)
                    {
                      uint64_t v32 = 0;
                      unint64_t v33 = (unint64_t)fmax(v31[1], 0.0);
                      unint64_t v34 = (unint64_t)fmax(v31[2], 0.0);
                      unint64_t v35 = (unint64_t)fmax(v31[3], 0.0);
                      unint64_t v37 = *((void *)this + 3);
                      unint64_t v36 = *((void *)this + 4);
                      unint64_t v38 = v37 - v33;
                      if (v37 < v33) {
                        unint64_t v38 = 0;
                      }
                      if (v35 + v33 > v37) {
                        unint64_t v35 = v38;
                      }
                      double v39 = fmax(v31[4], 0.0);
                      unint64_t v40 = v36 - v34;
                      if (v36 < v34) {
                        unint64_t v40 = 0;
                      }
                      if ((unint64_t)v39 + v34 <= v36) {
                        unint64_t v41 = (unint64_t)v39;
                      }
                      else {
                        unint64_t v41 = v40;
                      }
                      if (v37 > v33)
                      {
                        if (v36 <= v34)
                        {
                          unint64_t v44 = 0;
                        }
                        else
                        {
                          int8x8_t v42 = *(int8x8_t *)this;
                          if (*(void *)this) {
                            int8x8_t v42 = *(int8x8_t *)(*(void *)&v42 + 32);
                          }
                          unint64_t v43 = *((void *)this + 5) * v34;
                          if (!*(void *)&v42) {
                            unint64_t v43 = 0;
                          }
                          unint64_t v44 = v43 + *(void *)&v42;
                        }
                        unint64_t v45 = (*((unsigned __int8 *)this + 324) * v33) >> 3;
                        if (!v44) {
                          unint64_t v45 = 0;
                        }
                        uint64_t v32 = (char *)(v45 + v44);
                      }
                      if (v41)
                      {
                        unint64_t v46 = *(char **)v31;
                        uint64_t v47 = (char *)*((void *)v31 + 5);
                        size_t v48 = v35 * v81;
                        do
                        {
                          memcpy(v32, v46, v48);
                          unint64_t v46 = &v46[(void)v47];
                          v32 += *((void *)this + 5);
                          --v41;
                        }
                        while (v41);
                      }
                    }
                  }
                  ++v30;
                }
                while (v30 != v29);
              }
            }
          }
          CGImageBlockSetRelease(v25);
          if (!*(void *)this) {
            goto LABEL_52;
          }
          return;
        default:
LABEL_52:
          CGBuf::~CGBuf(this, v5, v6, v7, v8, v9, v10, v11);
          uint64_t v102 = 0;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          *((void *)this + 40) = 0;
          *((_OWORD *)this + 18) = 0u;
          *((_OWORD *)this + 19) = 0u;
          *((_OWORD *)this + 16) = 0u;
          *((_OWORD *)this + 17) = 0u;
          *((_OWORD *)this + 14) = 0u;
          *((_OWORD *)this + 15) = 0u;
          *((_OWORD *)this + 12) = 0u;
          *((_OWORD *)this + 13) = 0u;
          *((_OWORD *)this + 10) = 0u;
          *((_OWORD *)this + 11) = 0u;
          *((_OWORD *)this + 8) = 0u;
          *((_OWORD *)this + 9) = 0u;
          *((_OWORD *)this + 6) = 0u;
          *((_OWORD *)this + 7) = 0u;
          *((_OWORD *)this + 4) = 0u;
          *((_OWORD *)this + 5) = 0u;
          *((_OWORD *)this + 2) = 0u;
          *((_OWORD *)this + 3) = 0u;
          *(_OWORD *)this = 0u;
          *((_OWORD *)this + 1) = 0u;
          CGBuf::~CGBuf((CGBuf *)&v82, v49, v50, v51, v52, v53, v54, v55);
          break;
      }
    }
    uint64_t v56 = *((void *)cf + 5);
    uint64_t v57 = *((void *)cf + 6);
    CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo((CGImageRef)cf);
    unsigned int v59 = cf[16];
    unsigned int v60 = cf[14];
    CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)cf);
    double v62 = CGImageGetDecode((CGImageRef)cf);
    __int8 v63 = CGImageGetRenderingIntent((CGImageRef)cf);
    CGBuf::Init((int8x8_t *)this, v56, v57, BitmapInfo, v59, v60, ColorSpace, v62, v63, 4);
    DataProviderInternal = CGImageGetDataProviderInternal((char *)cf, 0);
    if (!DataProviderInternal
      || (unint64_t v72 = CGDataProviderCopyData((CGDataProviderRef)DataProviderInternal)) == 0
      || (unint64_t v73 = v72,
          *(void *)this = CGBufferStorage::CreateWithCFData(v72, v65),
          *((void *)this + 5) = *((void *)cf + 9),
          CFRelease(v73),
          !*(void *)this))
    {
      CGBuf::~CGBuf(this, (uint64_t)v65, v66, v67, v68, v69, v70, v71);
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      *((void *)this + 40) = 0;
      *((_OWORD *)this + 18) = 0u;
      *((_OWORD *)this + 19) = 0u;
      *((_OWORD *)this + 16) = 0u;
      *((_OWORD *)this + 17) = 0u;
      *((_OWORD *)this + 14) = 0u;
      *((_OWORD *)this + 15) = 0u;
      *((_OWORD *)this + 12) = 0u;
      *((_OWORD *)this + 13) = 0u;
      *((_OWORD *)this + 10) = 0u;
      *((_OWORD *)this + 11) = 0u;
      *((_OWORD *)this + 8) = 0u;
      *((_OWORD *)this + 9) = 0u;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = 0u;
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 5) = 0u;
      *((_OWORD *)this + 2) = 0u;
      *((_OWORD *)this + 3) = 0u;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
      CGBuf::~CGBuf((CGBuf *)&v82, v74, v75, v76, v77, v78, v79, v80);
    }
  }
}

{
  void *ImageProvider;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGColorSpace *Property;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  const CGFloat *Decode;
  __int8 RenderingIntent;
  CFDictionaryRef v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  double *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CGBitmapInfo BitmapInfo;
  unsigned int v59;
  unsigned int v60;
  CGColorSpace *ColorSpace;
  const CGFloat *v62;
  __int8 v63;
  char *DataProviderInternal;
  CFDataRef v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CGBufferStorage *v72;
  CGBufferStorage *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  uint64_t v102;

  *((void *)this + 40) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (cf)
  {
    CFRetain(cf);
    *((void *)this + 1) = cf;
    ImageProvider = CGImageGetImageProvider(cf);
    if (ImageProvider)
    {
      uint64_t v12 = (uint64_t)ImageProvider;
      {
        CGBuf::CGBuf(CGImage *)::keys = @"kCGImageBlockSingletonRequest";
      }
      {
        CGBuf::CGBuf(CGImage *)::values = *MEMORY[0x1E4F1CFD0];
      }
      *((unsigned char *)this + 324) = 8 * *(unsigned char *)(v12 + 48);
      *((_DWORD *)this + 80) = *(_DWORD *)(v12 + 36) & 0x1F;
      uint64_t v13 = *(void *)(v12 + 120);
      if (!v13
        || (PropertCGFloat y = (CGColorSpace *)CGPropertiesGetProperty(v13, @"kCGImageProviderColorSpaceChangedOnImageCopy")) == 0)
      {
        PropertCGFloat y = *(CGColorSpace **)(v12 + 40);
      }
      *((void *)this + 6) = Property;
      switch(*(_DWORD *)(v12 + 32))
      {
        case 1:
          unsigned int v15 = 8;
          *((unsigned char *)this + 325) = 8;
          unsigned int v16 = *((_DWORD *)this + 80);
          goto LABEL_16;
        case 2:
          unsigned int v15 = 16;
          *((unsigned char *)this + 325) = 16;
          unsigned int v16 = *((_DWORD *)this + 80) | 0x1000;
          goto LABEL_15;
        case 3:
          unsigned int v15 = 32;
          *((unsigned char *)this + 325) = 32;
          unsigned int v16 = *((_DWORD *)this + 80) | 0x2000;
          goto LABEL_15;
        case 4:
          unsigned int v15 = 32;
          *((unsigned char *)this + 325) = 32;
          int v17 = *((_DWORD *)this + 80);
          int v18 = 8448;
          goto LABEL_14;
        case 5:
          unsigned int v15 = 16;
          *((unsigned char *)this + 325) = 16;
          int v17 = *((_DWORD *)this + 80);
          int v18 = 4352;
LABEL_14:
          unsigned int v16 = v17 | v18;
LABEL_15:
          *((_DWORD *)this + 80) = v16;
LABEL_16:
          uint64_t v19 = *((void *)cf + 5);
          uint64_t v20 = *((void *)cf + 6);
          unsigned int v21 = *((unsigned __int8 *)this + 324);
          Decode = CGImageGetDecode((CGImageRef)cf);
          __int8 RenderingIntent = CGImageGetRenderingIntent((CGImageRef)cf);
          CGBuf::Init((int8x8_t *)this, v19, v20, v16, v21, v15, Property, Decode, RenderingIntent, 4);
          CFDictionaryRef v24 = CFDictionaryCreate(0, (const void **)&CGBuf::CGBuf(CGImage *)::keys, (const void **)&CGBuf::CGBuf(CGImage *)::values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v25 = CGImageProviderCopyImageBlockSetWithOptions(v12, (uint64_t)v24);
          if (v24) {
            CFRelease(v24);
          }
          if (!v25) {
            goto LABEL_52;
          }
          *(void *)this = 0;
          if (*(void *)(v25 + 120) != 1
            || (uint64_t v26 = *(void *)(v25 + 128)) == 0
            || (uint64_t v27 = CGBufferStorage::CreateWithImageBlockSet((char *)v25, 0),
                *(void *)this = v27,
                *((void *)this + 5) = *(void *)(v26 + 40),
                !v27))
          {
            uint64_t v28 = CGBufferStorage::Create((*((void *)this + 4) - 1) * *((void *)this + 5)+ ((*((void *)this + 3) * (unint64_t)*((unsigned __int8 *)this + 324) + 7) >> 3), 4);
            *(void *)this = v28;
            if (v28)
            {
              uint64_t v29 = *(void *)(v25 + 120);
              if (v29)
              {
                unint64_t v30 = 0;
                uint64_t v81 = *(void *)(v25 + 72);
                do
                {
                  if (*(void *)(v25 + 120) > v30)
                  {
                    uint64_t v31 = *(double **)(v25 + 8 * v30 + 128);
                    if (v31)
                    {
                      uint64_t v32 = 0;
                      unint64_t v33 = (unint64_t)fmax(v31[1], 0.0);
                      unint64_t v34 = (unint64_t)fmax(v31[2], 0.0);
                      unint64_t v35 = (unint64_t)fmax(v31[3], 0.0);
                      unint64_t v37 = *((void *)this + 3);
                      unint64_t v36 = *((void *)this + 4);
                      unint64_t v38 = v37 - v33;
                      if (v37 < v33) {
                        unint64_t v38 = 0;
                      }
                      if (v35 + v33 > v37) {
                        unint64_t v35 = v38;
                      }
                      double v39 = fmax(v31[4], 0.0);
                      unint64_t v40 = v36 - v34;
                      if (v36 < v34) {
                        unint64_t v40 = 0;
                      }
                      if ((unint64_t)v39 + v34 <= v36) {
                        unint64_t v41 = (unint64_t)v39;
                      }
                      else {
                        unint64_t v41 = v40;
                      }
                      if (v37 > v33)
                      {
                        if (v36 <= v34)
                        {
                          unint64_t v44 = 0;
                        }
                        else
                        {
                          int8x8_t v42 = *(int8x8_t *)this;
                          if (*(void *)this) {
                            int8x8_t v42 = *(int8x8_t *)(*(void *)&v42 + 32);
                          }
                          unint64_t v43 = *((void *)this + 5) * v34;
                          if (!*(void *)&v42) {
                            unint64_t v43 = 0;
                          }
                          unint64_t v44 = v43 + *(void *)&v42;
                        }
                        unint64_t v45 = (*((unsigned __int8 *)this + 324) * v33) >> 3;
                        if (!v44) {
                          unint64_t v45 = 0;
                        }
                        uint64_t v32 = (char *)(v45 + v44);
                      }
                      if (v41)
                      {
                        unint64_t v46 = *(char **)v31;
                        uint64_t v47 = (char *)*((void *)v31 + 5);
                        size_t v48 = v35 * v81;
                        do
                        {
                          memcpy(v32, v46, v48);
                          unint64_t v46 = &v46[(void)v47];
                          v32 += *((void *)this + 5);
                          --v41;
                        }
                        while (v41);
                      }
                    }
                  }
                  ++v30;
                }
                while (v30 != v29);
              }
            }
          }
          CGImageBlockSetRelease(v25);
          if (!*(void *)this) {
            goto LABEL_52;
          }
          return;
        default:
LABEL_52:
          CGBuf::~CGBuf(this, v5, v6, v7, v8, v9, v10, v11);
          uint64_t v102 = 0;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          *((void *)this + 40) = 0;
          *((_OWORD *)this + 18) = 0u;
          *((_OWORD *)this + 19) = 0u;
          *((_OWORD *)this + 16) = 0u;
          *((_OWORD *)this + 17) = 0u;
          *((_OWORD *)this + 14) = 0u;
          *((_OWORD *)this + 15) = 0u;
          *((_OWORD *)this + 12) = 0u;
          *((_OWORD *)this + 13) = 0u;
          *((_OWORD *)this + 10) = 0u;
          *((_OWORD *)this + 11) = 0u;
          *((_OWORD *)this + 8) = 0u;
          *((_OWORD *)this + 9) = 0u;
          *((_OWORD *)this + 6) = 0u;
          *((_OWORD *)this + 7) = 0u;
          *((_OWORD *)this + 4) = 0u;
          *((_OWORD *)this + 5) = 0u;
          *((_OWORD *)this + 2) = 0u;
          *((_OWORD *)this + 3) = 0u;
          *(_OWORD *)this = 0u;
          *((_OWORD *)this + 1) = 0u;
          CGBuf::~CGBuf((CGBuf *)&v82, v49, v50, v51, v52, v53, v54, v55);
          break;
      }
    }
    uint64_t v56 = *((void *)cf + 5);
    uint64_t v57 = *((void *)cf + 6);
    CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo((CGImageRef)cf);
    unsigned int v59 = cf[16];
    unsigned int v60 = cf[14];
    CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)cf);
    double v62 = CGImageGetDecode((CGImageRef)cf);
    __int8 v63 = CGImageGetRenderingIntent((CGImageRef)cf);
    CGBuf::Init((int8x8_t *)this, v56, v57, BitmapInfo, v59, v60, ColorSpace, v62, v63, 4);
    DataProviderInternal = CGImageGetDataProviderInternal((char *)cf, 0);
    if (!DataProviderInternal
      || (unint64_t v72 = CGDataProviderCopyData((CGDataProviderRef)DataProviderInternal)) == 0
      || (unint64_t v73 = v72,
          *(void *)this = CGBufferStorage::CreateWithCFData(v72, v65),
          *((void *)this + 5) = *((void *)cf + 9),
          CFRelease(v73),
          !*(void *)this))
    {
      CGBuf::~CGBuf(this, (uint64_t)v65, v66, v67, v68, v69, v70, v71);
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      *((void *)this + 40) = 0;
      *((_OWORD *)this + 18) = 0u;
      *((_OWORD *)this + 19) = 0u;
      *((_OWORD *)this + 16) = 0u;
      *((_OWORD *)this + 17) = 0u;
      *((_OWORD *)this + 14) = 0u;
      *((_OWORD *)this + 15) = 0u;
      *((_OWORD *)this + 12) = 0u;
      *((_OWORD *)this + 13) = 0u;
      *((_OWORD *)this + 10) = 0u;
      *((_OWORD *)this + 11) = 0u;
      *((_OWORD *)this + 8) = 0u;
      *((_OWORD *)this + 9) = 0u;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = 0u;
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 5) = 0u;
      *((_OWORD *)this + 2) = 0u;
      *((_OWORD *)this + 3) = 0u;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
      CGBuf::~CGBuf((CGBuf *)&v82, v74, v75, v76, v77, v78, v79, v80);
    }
  }
}

void sub_184D3E8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_184D3EEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

CGImageRef CGBuf::CreateCGImage(CGBuf *this, BOOL a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v5 = *(const void **)(v2 + 32);
  unint64_t v6 = (*((void *)this + 4) - 1) * *((void *)this + 5)
     + ((*((void *)this + 3) * (unint64_t)*((unsigned __int8 *)this + 324) + 7) >> 3);
  check_clients_buffer("CGDataProviderCreateWithData", v5, v6);
  uint64_t v7 = CGDataProviderCreateWithDataInternal(v2, (uint64_t)v5, v6, (uint64_t)CGBufferStorage::DataProviderReleaseInfoCallback, 0);
  if (!v7) {
    return 0;
  }
  uint64_t v11 = *(atomic_ullong **)this;
  if ((uint64_t)atomic_load_explicit(*(atomic_ullong *volatile *)this, memory_order_acquire) <= 0) {
    _CGHandleAssert("Retain", 244, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "0 < atomic_load_explicit(&refCount, std::memory_order_acquire)", "CGBuf retained with 0 refcount", v8, v9, v10, decode);
  }
  uint64_t v12 = v7;
  atomic_fetch_add(v11, 1uLL);
  CGImageRef v13 = CGImageCreate(*((void *)this + 3), *((void *)this + 4), *((unsigned __int8 *)this + 325), *((unsigned __int8 *)this + 324), *((void *)this + 5), *((CGColorSpaceRef *)this + 6), *((_DWORD *)this + 80), v7, *((const CGFloat **)this + 7), a2, (CGColorRenderingIntent)*((unsigned __int8 *)this + 327));
  CGDataProviderRelease(v12);
  return v13;
}

CGContextRef CGBuf::CreateCGBitmapContext(size_t *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (atomic_ullong *)*this;
  if (!*this) {
    return 0;
  }
  if ((uint64_t)atomic_load_explicit(v8, memory_order_acquire) <= 0) {
    _CGHandleAssert("Retain", 244, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "0 < atomic_load_explicit(&refCount, std::memory_order_acquire)", "CGBuf retained with 0 refcount", a6, a7, a8, releaseInfo);
  }
  atomic_fetch_add(v8, 1uLL);
  return CGBitmapContextCreateWithData(*(void **)(*this + 32), this[3], this[4], *((unsigned __int8 *)this + 325), this[5], (CGColorSpaceRef)this[6], *((_DWORD *)this + 80), (CGBitmapContextReleaseDataCallback)CGBufferStorage::BitmapContextReleaseDataCallback, (void *)*this);
}

uint64_t CGBuf::_GetAlphaData(CGBuf *this, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 0;
  uint64_t v9 = *((void *)this + 2);
  if (!v9) {
    return 0;
  }
  if (*(_DWORD *)(v9 + 16) == 1129601108 && *(_DWORD *)(v9 + 24) == 4)
  {
    unint64_t v11 = *(void *)(*(void *)(v9 + 32) + 136);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetAlphaBytesPerRow", v9, a3, a4, a5, a6, a7, a8);
    unint64_t v11 = 0;
    uint64_t v9 = *((void *)this + 2);
  }
  *a2 = v11;

  return CGBitmapContextGetAlphaData(v9, v9, a3, a4, a5, a6, a7, a8);
}

uint64_t CGBuf::ReInit(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, CGColorSpace *cf1, const void *a10, __int8 a11, uint64_t a12)
{
  CGColorSpaceRef v16 = cf1;
  unsigned int v84 = a5;
  unsigned int v85 = a4;
  unsigned int v83 = a6;
  unsigned int v17 = *(_DWORD *)(a1 + 320);
  int v18 = *(unsigned __int8 *)(a1 + 325);
  uint64_t v82 = a12;
  int v80 = *(unsigned __int8 *)(a1 + 324);
  if ((a12 & 0x800) != 0)
  {
    LegalizeForContext(&v85, &v84, &v83, &cf1);
    CGColorSpaceRef v16 = cf1;
  }
  unsigned int v81 = v17;
  if (!v16)
  {
    unsigned int v20 = v85;
    unsigned int v22 = v84 / v83;
    unsigned int v21 = v85 & 0x1F;
    unsigned int v25 = v84 != 16 || v83 != 5 || v21 != 0;
    if ((v85 & 0xF0000) == 0x20000) {
      unsigned int v25 = 0;
    }
    if (v84 % v83 != 1) {
      unsigned int v25 = v84 % v83;
    }
    BOOL v27 = (v85 & 0x1F) != 0 && v25 == 0;
    unsigned __int8 v28 = v22 - v27;
    int v29 = (v22 - v27);
    switch(v29)
    {
      case 4:
        CGColorSpaceRef DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
        break;
      case 3:
        CGColorSpaceRef DeviceCMYK = CGColorSpaceCreateDeviceRGB();
        break;
      case 1:
        CGColorSpaceRef DeviceCMYK = CGColorSpaceCreateDeviceGray();
        break;
      default:
        CGColorSpaceRef v16 = 0;
        goto LABEL_34;
    }
    CGColorSpaceRef v16 = DeviceCMYK;
LABEL_34:
    cf1 = v16;
    unint64_t v19 = v28;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(a1 + 48);
  if (v19) {
    unint64_t v19 = *(void *)(*(void *)(v19 + 24) + 48);
  }
  unsigned int v20 = v85;
  LOBYTE(v21) = v85 & 0x1F;
LABEL_35:
  uint64_t v31 = a10;
  if (((1 << v21) & 0x9E) != 0) {
    unint64_t v32 = v19 + 1;
  }
  else {
    unint64_t v32 = v19;
  }
  if (*(void *)(a1 + 24) != a2)
  {
    unsigned int v33 = v83;
LABEL_56:
    unint64_t v43 = *(const void **)(a1 + 8);
    if (v43) {
      CFRelease(v43);
    }
    __int8 v44 = a11;
    *(void *)(a1 + 8) = 0;
    unint64_t v45 = *(const void **)(a1 + 16);
    if (v45) {
      CFRelease(v45);
    }
    *(void *)(a1 + 16) = 0;
    CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 48));
    *(void *)(a1 + 48) = 0;
    CGBuf::Init((int8x8_t *)a1, a2, a3, v20, v84, v33, v16, v31, v44, v82);
    goto LABEL_61;
  }
  unsigned int v33 = v83;
  if (*(void *)(a1 + 32) != a3
    || v83 != *(unsigned __int8 *)(a1 + 325)
    || *(_DWORD *)(a1 + 320) != v20
    || v84 != *(unsigned __int8 *)(a1 + 324)
    || !CFEqual(v16, *(CFTypeRef *)(a1 + 48)))
  {
    goto LABEL_56;
  }
  unint64_t v40 = v31 ? v31 : &CompareDecodes(double const*,double const*,unsigned long)::kDefaultDecode;
  unint64_t v41 = *(void *)(a1 + 56)
      ? *(const void **)(a1 + 56)
      : &CompareDecodes(double const*,double const*,unsigned long)::kDefaultDecode;
  if (v40 != v41)
  {
    uint64_t v42 = 16;
    if (v32 < 0x10) {
      uint64_t v42 = v32;
    }
    if (memcmp(v40, v41, 16 * v42)) {
      goto LABEL_56;
    }
  }
LABEL_61:
  int8x8_t v46 = *(int8x8_t *)a1;
  if (*(void *)a1)
  {
    if (*(unsigned __int8 *)(a1 + 325) == v18 && ((*(_DWORD *)(a1 + 320) ^ v81) & 0x100) == 0)
    {
      unint64_t v47 = a8
          + (*(void *)(a1 + 32) - 1) * *(void *)(a1 + 40)
          + ((*(void *)(a1 + 24) * (unint64_t)*(unsigned __int8 *)(a1 + 324) + 7) >> 3);
      unint64_t v48 = *(void *)(*(void *)&v46 + 24);
      BOOL v49 = v48 >= v47;
      unint64_t v50 = v48 - v47;
      if (v49)
      {
        uint64_t v68 = *(void *)(*(void *)&v46 + 32);
        uint64_t v67 = *(void *)(*(void *)&v46 + 40);
        unint64_t v69 = *(void *)(*(void *)&v46 + 16);
        if (*(unsigned char *)(*(void *)&v46 + 88)
          || (v70 = (v50 + v69) & -*(void *)(*(void *)&v46 + 8), v71 = v69 > v70, unint64_t v69 = v70, !v71))
        {
          *(void *)(*(void *)&v46 + 32) = v69;
          *(void *)(*(void *)&v46 + 40) = v47;
          if (v68 != v69)
          {
            unint64_t v72 = *(const void **)(a1 + 8);
            if (v72) {
              CFRelease(v72);
            }
            *(void *)(a1 + 8) = 0;
            unint64_t v73 = *(const void **)(a1 + 16);
            if (v73) {
              CFRelease(v73);
            }
            *(void *)(a1 + 16) = 0;
          }
          if ((v82 & 0x100) == 0) {
            return 1;
          }
          if (v68 == v69 && v67 == *(void *)(*(void *)a1 + 40))
          {
            int v74 = v81 & 0x7000;
            switch((v81 >> 12) & 7)
            {
              case 0u:
                if (v18 == 8) {
                  goto LABEL_97;
                }
                if (v18 != 32 && v18 != 16)
                {
LABEL_116:
                  __break(1u);
                  JUMPOUT(0x184D3F698);
                }
                int v76 = 0;
                goto LABEL_98;
              case 1u:
              case 3u:
                if (v18 != 16) {
                  goto LABEL_116;
                }
                BOOL v75 = v74 == 4096;
                goto LABEL_88;
              case 2u:
              case 4u:
                if (v18 == 32)
                {
                  BOOL v75 = v74 == 0x2000;
LABEL_88:
                  int v76 = v75;
                }
                else
                {
                  if (v18 != 8 || v80 != 32) {
LABEL_115:
                  }
                    __assert_rtn("IsFormatHostEndian", "CGBuf.cpp", 1074, "bitsPerComponent == 8 && bitsPerPixel == 32");
LABEL_97:
                  int v76 = 1;
                }
LABEL_98:
                int v77 = *(unsigned __int8 *)(a1 + 325);
                switch((*(_DWORD *)(a1 + 320) >> 12) & 7)
                {
                  case 0:
                    if (v77 == 8) {
                      goto LABEL_112;
                    }
                    if (v77 != 16 && v77 != 32) {
                      goto LABEL_116;
                    }
                    if (v76) {
                      goto LABEL_113;
                    }
                    return 1;
                  case 1:
                  case 3:
                    if (v77 != 16) {
                      goto LABEL_116;
                    }
                    int v78 = 4096;
                    goto LABEL_103;
                  case 2:
                  case 4:
                    if (v77 == 32)
                    {
                      int v78 = 0x2000;
LABEL_103:
                      if (v76 == ((*(_DWORD *)(a1 + 320) & 0x7000) == v78)) {
                        return 1;
                      }
                      goto LABEL_113;
                    }
                    if (v77 != 8 || *(unsigned char *)(a1 + 324) != 32) {
                      goto LABEL_115;
                    }
LABEL_112:
                    if ((v76 & 1) == 0) {
                      goto LABEL_113;
                    }
                    return 1;
                  default:
                    goto LABEL_116;
                }
              default:
                goto LABEL_116;
            }
          }
LABEL_113:
          CGBuf::FillBuffer(a1, v82);
          return 1;
        }
      }
    }
    addouble d = atomic_fetch_add(*(atomic_ullong *volatile *)&v46, 0xFFFFFFFFFFFFFFFFLL);
    if (add <= 0) {
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", v37, v38, v39, v79);
    }
    if (add == 1) {
      CGBufferStorage::~CGBufferStorage(*(atomic_ullong **)&v46, (uint64_t)v41, v34, v35, v36, v37, v38, v39);
    }
    *(void *)a1 = 0;
  }
  if (CGBuf::CreateBuffer(a1, v82, a8, v35, v36, v37, v38, v39)) {
    return 1;
  }
  CGBuf::~CGBuf((CGBuf *)a1, v52, v53, v54, v55, v56, v57, v58);
  uint64_t v87 = 0;
  memset(v86, 0, sizeof(v86));
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::~CGBuf((CGBuf *)v86, v60, v61, v62, v63, v64, v65, v66);
  return 0;
}

uint64_t _PrintChannel<unsigned char>(char **a1, unint64_t *a2, void *a3)
{
  size_t v3 = (unsigned __int8 *)(*a3)++;
  return StringPrint(a1, a2, "0x2.2x", *v3);
}

uint64_t StringPrint(char **a1, unint64_t *a2, const char *a3, ...)
{
  va_start(va, a3);
  uint64_t result = vsnprintf(*a1, *a2, a3, va);
  size_t v6 = (int)result;
  size_t v7 = *a2;
  if (*a2 < (int)result) {
    size_t v6 = *a2;
  }
  *a1 += v6;
  *a2 = v7 - v6;
  return result;
}

uint64_t _PrintChannel<unsigned short>(char **a1, unint64_t *a2, void *a3)
{
  uint64_t v3 = *(unsigned __int16 *)*a3;
  *a3 += 2;
  return StringPrint(a1, a2, "0x4.4x", v3);
}

uint64_t _PrintChannel<half>(char **a1, unint64_t *a2, _WORD **a3)
{
  __int16 v3 = *(*a3)++;
  _H0 = v3;
  __asm { FCVT            D0, H0 }
  return StringPrint(a1, a2, "%f (0x4.4x)", _D0);
}

uint64_t _PrintChannel<float>(char **a1, unint64_t *a2, _DWORD **a3)
{
  float v3 = *(float *)(*a3)++;
  return StringPrint(a1, a2, "%10.14f (%a)", v3, v3);
}

uint64_t _PrintChannel_WrongEndian<unsigned short>(char **a1, unint64_t *a2, void *a3)
{
  unsigned int v3 = *(unsigned __int16 *)*a3;
  *a3 += 2;
  return StringPrint(a1, a2, "0x4.4x", bswap32(v3) >> 16);
}

uint64_t _PrintChannel_WrongEndian<half>(char **a1, unint64_t *a2, void *a3)
{
  unsigned int v3 = *(unsigned __int16 *)*a3;
  *a3 += 2;
  _H0 = bswap32(v3) >> 16;
  __asm { FCVT            D0, H0 }
  return StringPrint(a1, a2, "%f (0x4.4x)", _D0);
}

uint64_t _PrintChannel_WrongEndian<float>(char **a1, unint64_t *a2, unsigned int **a3)
{
  double v4 = COERCE_FLOAT(bswap32(**a3));
  return StringPrint(a1, a2, "%10.14f (%a)", v4, v4);
}

uint64_t UnsupportedFormat(char **a1, unint64_t *a2, void **a3)
{
  return StringPrint(a1, a2, "<Unhandled pixel format>");
}

uint64_t CGBuf::PrintPixel(CGBuf *this, char **a2, unint64_t *a3, unint64_t a4, unint64_t a5)
{
  if (*((void *)this + 3) <= a4) {
    return StringPrint(a2, a3, "<Out of bounds: x coordinate (%lu) >= width (%lu))>");
  }
  if (*((void *)this + 4) <= a5) {
    return StringPrint(a2, a3, "<Out of bounds: y coordinate (%lu) >= height (%lu))>");
  }
  uint64_t v7 = *((unsigned __int8 *)this + 326);
  int v8 = *((_DWORD *)this + 80);
  BOOL v9 = (v8 & 0x1F) != 0;
  if ((v8 & 0x1F) != 0) {
    uint64_t v10 = v7 + 1;
  }
  else {
    uint64_t v10 = *((unsigned __int8 *)this + 326);
  }
  int v11 = *((unsigned __int8 *)this + 325);
  uint64_t v12 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel<unsigned char>;
  if (v11 == 8) {
    goto LABEL_15;
  }
  if (v11 != 32)
  {
    if (v11 == 16)
    {
      BOOL v13 = (v8 & 0x7000) == 4096;
      if ((v8 & 0x100) != 0)
      {
        uint64_t v14 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel_WrongEndian<half>;
        unsigned int v15 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel<half>;
      }
      else
      {
        uint64_t v14 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel_WrongEndian<unsigned short>;
        unsigned int v15 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel<unsigned short>;
      }
      goto LABEL_20;
    }
    uint64_t v12 = UnsupportedFormat;
LABEL_15:
    unsigned int v17 = v12;
    if (v10) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  BOOL v13 = (v8 & 0x7000) == 0x2000;
  uint64_t v14 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel_WrongEndian<float>;
  unsigned int v15 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel<float>;
LABEL_20:
  if (v13) {
    unsigned int v17 = v15;
  }
  else {
    unsigned int v17 = v14;
  }
  if (v10)
  {
LABEL_24:
    unint64_t v19 = (const void *)(*(void *)this + *((void *)this + 5) * a5 + ((*((unsigned __int8 *)this + 324) * a4) >> 3));
    StringPrint(a2, a3, "%p { ", v19);
    v17(a2, a3, (void **)&v19);
    if (v10 != 1)
    {
      uint64_t v18 = v9 + v7 - 1;
      do
      {
        StringPrint(a2, a3, ", ");
        v17(a2, a3, (void **)&v19);
        --v18;
      }
      while (v18);
    }
    return StringPrint(a2, a3, " }");
  }
LABEL_16:

  return StringPrint(a2, a3, "<no channels>");
}

uint64_t CGBuf::Print(CGBuf *this, char **a2, unint64_t *a3, const char *a4)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v5 = *(const void **)(v4 + 32);
    uint64_t v4 = *(void *)(v4 + 40);
  }
  else
  {
    uint64_t v5 = 0;
  }
  int v6 = *((_DWORD *)this + 80);
  if ((v6 & 0x1Fu) <= 7) {
    uint64_t v7 = off_1E52CC648[v6 & 0x1F];
  }
  else {
    uint64_t v7 = "<invalid alpha>";
  }
  if ((unsigned __int16)(v6 & 0x7000) >> 12 <= 4u) {
    int v8 = *(char **)((char *)GetByteOrderName(CGImageByteOrderInfo)::kByteOrderNames
  }
                  + ((unint64_t)(v6 & 0x7000) >> 9));
  else {
    int v8 = "<invalid byte order>";
  }
  unint64_t v9 = *((unsigned __int8 *)this + 327);
  if (v9 <= 4) {
    uint64_t v10 = GetRenderingIntentName(CGColorRenderingIntent)::kRenderingIntentNames[v9];
  }
  else {
    uint64_t v10 = "<invalid rendering intent>";
  }
  if ((v6 & 0x100) != 0) {
    int v11 = "float";
  }
  else {
    int v11 = "unorm";
  }
  return StringPrint(a2, a3, "%s%p CGBuf:\n%s\tbuffer:             %p  (%lu bytes)\n%s\tsize:               {%lu x %lu}\n%s\tbits per pixel:     %u\n%s\tcomponent type:     %s%u\n%s\talpha:              %s\n%s\tbyteOrder:          %s\n%s\trowBytes:           %lu\n%s\tcolorSpace:         %p\n%s\tCGImage:            %p\n%s\tcontext:            %p\n%s\tdecode:             %p\n%s\trendering intent:   %s\n", a4, this, a4, v5,
           v4,
           a4,
           *((void *)this + 3),
           *((void *)this + 4),
           a4,
           *((unsigned __int8 *)this + 324),
           a4,
           v11,
           *((unsigned __int8 *)this + 325),
           a4,
           v7,
           a4,
           v8,
           a4,
           *((void *)this + 5),
           a4,
           *((const void **)this + 6),
           a4,
           *((const void **)this + 1),
           a4,
           *((const void **)this + 2),
           a4,
           *((const void **)this + 7),
           a4,
           v10);
}

uint64_t CGBuf::Print(CGBuf *this, const CGBuf *a2, __n128 a3)
{
  unsigned int v3 = (CGBuf *)MEMORY[0x1F4188790](this, a3);
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (v3)
  {
    unint64_t v5 = 4096;
    int v6 = v7;
    CGBuf::Print(v3, &v6, &v5, "");
    return printf("%s", v7);
  }
  else
  {
    return puts("CGBuf <NULL>");
  }
}

double boundsForOverlap(void *a1, int a2, int a3)
{
  [a1 normalizedBounds];
  double v7 = v6;
  double v9 = v8;
  unsigned int v10 = [a1 count];
  if (v10)
  {
    unsigned int v11 = v10;
    uint64_t v12 = 0;
    double v13 = 0.0;
    while (1)
    {
      uint64_t v14 = (void *)[a1 childAtIndex:v12];
      if ([v14 leftSpacerIndex] != a2
        || [v14 rightSpacerIndex] != a3)
      {
        break;
      }
      [v14 normalizedBounds];
      double v13 = v13 + v15;
      uint64_t v12 = (v12 + 1);
      if (v11 == v12)
      {
        double v16 = v13 / (double)v11 * 6.0;
        double v17 = (v16 - v9) * 0.5;
        BOOL v18 = v9 < v16;
        double v19 = 0.0;
        if (v18) {
          double v19 = v17;
        }
        return v7 - v19;
      }
    }
  }
  return v7;
}

uint64_t center_finalize(uint64_t a1)
{
  registry_release(*(void **)(a1 + 80));

  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
}

uint64_t CGNotificationCenterRemoveCallback(uint64_t result, uint64_t a2, __CFString *a3, __CFString *a4)
{
  if (a2)
  {
    uint64_t v5 = result;
    if (a3) {
      double v6 = a3;
    }
    else {
      double v6 = @"kCGNotificationAnyName";
    }
    if (a4) {
      double v7 = a4;
    }
    else {
      double v7 = @"kCGNotificationAnyObject";
    }
    double v8 = (pthread_mutex_t *)(result + 16);
    pthread_mutex_lock((pthread_mutex_t *)(result + 16));
    for (unint64_t i = *(uint64_t **)(v5 + 80); i; *(void *)(v5 + 80) = i)
    {
      while (1)
      {
        uint64_t v10 = *i;
        if (*(void *)(*i + 32) == a2 && *(__CFString **)(v10 + 24) == v7 && CFEqual(v6, *(CFTypeRef *)(v10 + 16))) {
          break;
        }
        unint64_t i = (uint64_t *)i[1];
        if (!i) {
          goto LABEL_15;
        }
      }
      unint64_t i = x_list_remove(*(void **)(v5 + 80), v10);
      registry_entry_release((CFTypeRef *)v10);
    }
LABEL_15:
    return pthread_mutex_unlock(v8);
  }
  return result;
}

void *skip_comment(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8 = result;
  while (1)
  {
    uint64_t v9 = v8[2];
    uint64_t v10 = *(void *)(v9 + 120);
    if (!v10)
    {
      uint64_t result = (void *)CGPDFSourceRefill(v8[2], a2, a3, a4, a5, a6, a7, a8);
      if (!result) {
        return result;
      }
      uint64_t v10 = *(void *)(v9 + 120);
    }
    unsigned int v11 = *(unsigned __int8 **)(v9 + 128);
    *(void *)(v9 + 120) = v10 - 1;
    *(void *)(v9 + 128) = v11 + 1;
    int v12 = *v11;
    if (v12 == 10) {
      return result;
    }
    if (v12 == 13)
    {
      uint64_t v13 = v8[2];
      uint64_t v14 = *(void *)(v13 + 120);
      if (v14)
      {
LABEL_10:
        double v15 = *(unsigned __int8 **)(v13 + 128);
        *(void *)(v13 + 120) = v14 - 1;
        *(void *)(v13 + 128) = v15 + 1;
        int v16 = *v15;
        if (v16 == 10) {
          return result;
        }
      }
      else
      {
        uint64_t result = (void *)CGPDFSourceRefill(v8[2], a2, a3, a4, a5, a6, a7, a8);
        if (result)
        {
          uint64_t v14 = *(void *)(v13 + 120);
          goto LABEL_10;
        }
        int v16 = -1;
      }
      double v17 = (void *)v8[2];
      return CGPDFSourceUngetc(v17, v16);
    }
  }
}

void *skip_to_delimiter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  while (1)
  {
    uint64_t v9 = a1[2];
    uint64_t v10 = *(void *)(v9 + 120);
    if (!v10)
    {
      uint64_t result = (void *)CGPDFSourceRefill(a1[2], a2, a3, a4, a5, a6, a7, a8);
      if (!result) {
        return result;
      }
      uint64_t v10 = *(void *)(v9 + 120);
    }
    int v12 = *(unsigned __int8 **)(v9 + 128);
    *(void *)(v9 + 120) = v10 - 1;
    *(void *)(v9 + 128) = v12 + 1;
    unsigned int v13 = *v12;
    if (v13 <= 0x3E && ((1 << v13) & 0x5000832100003601) != 0) {
      break;
    }
    if (v13 - 91 <= 0x22 && ((1 << (v13 - 91)) & 0x500000005) != 0) {
      break;
    }
    unint64_t v16 = a1[3];
    unint64_t v17 = a1[4];
    BOOL v18 = (void *)a1[5];
    if (v16 >= v17)
    {
      size_t v19 = 2 * v17 + 128;
      a1[4] = v19;
      BOOL v18 = malloc_type_realloc(v18, v19, 0x33EA2F66uLL);
      a1[5] = (uint64_t)v18;
      if (!v18) {
        _CGHandleAssert("lex_grow_buffer", 55, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFLexer.c", "lexer->buffer != NULL", "lexer buffer missing", a6, a7, a8, v22);
      }
      unint64_t v16 = a1[3];
    }
    a1[3] = v16 + 1;
    *((unsigned char *)v18 + v16) = v13;
  }
  unsigned int v20 = (void *)a1[2];
  int v21 = *v12;

  return CGPDFSourceUngetc(v20, v21);
}

char *create_image_stream(const void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, CGDataProvider *a12, CGDataProvider *a13, uint64_t *a14)
{
  if (a8 < a6) {
    _CGHandleAssert("create_image_stream", 145, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "src_image_bytes_per_row >= image_data_bytes_per_row", "src image bpr: %lu  image bpr: %lu", a6, a7, a8, a8);
  }
  if (a9 < a7) {
    _CGHandleAssert("create_image_stream", 146, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "src_smask_bytes_per_row >= smask_data_bytes_per_row", "src mask bpr: %lu  mask bpr: %lu", a6, a7, a8, a9);
  }
  unsigned int v18 = *(_DWORD *)(a2 + 24);
  if (v18 >= 2 && v18 != 3) {
    _CGHandleAssert("create_image_stream", 149, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "pixel_info.alpha_info == kCGImageAlphaNone || pixel_info.alpha_info == kCGImageAlphaLast || pixel_info.alpha_info == kCGImageAlphaPremultipliedLast", "alpha unsupported (%d)", a6, a7, a8, *(_DWORD *)(a2 + 24));
  }
  CFDictionaryRef v24 = (char *)malloc_type_calloc(1uLL, 0x518uLL, 0x10B0040ABF645E3uLL);
  if (v24)
  {
    unsigned int v25 = a14;
    if (a1) {
      CFRetain(a1);
    }
    *(void *)CFDictionaryRef v24 = a1;
    memcpy(v24 + 8, (const void *)a2, 0x130uLL);
    if (*(void *)(a2 + 40))
    {
      unsigned int v26 = *(_DWORD *)(a2 + 24) - 1;
      if (v26 > 8) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = qword_185211998[v26];
      }
      uint64_t v28 = v27 + *(void *)(a2 + 16);
      if (v28)
      {
        int v29 = v24 + 64;
        unint64_t v30 = (uint64_t *)(a2 + 56);
        do
        {
          *(v29 - 1) = *(v30 - 1);
          uint64_t v31 = *v30;
          v30 += 2;
          *int v29 = v31;
          v29 += 2;
          --v28;
        }
        while (v28);
      }
      *((void *)v24 + 6) = v24 + 56;
    }
    *((void *)v24 + 39) = a4;
    *((void *)v24 + 40) = a5;
    *((void *)v24 + 41) = a6;
    *((void *)v24 + 42) = a7;
    *((void *)v24 + 44) = a8;
    *((void *)v24 + 45) = a9;
    CGDataProviderRetain(a12);
    *((void *)v24 + 66) = a12;
    CGDataProviderRetain(a13);
    *((void *)v24 + 67) = a13;
    if (a13) {
      BOOL v35 = a14 == 0;
    }
    else {
      BOOL v35 = 1;
    }
    int v36 = !v35;
    if (a3) {
      int v36 = 0;
    }
    v24[520] = v36;
    if (a14)
    {
      uint64_t v37 = *(void *)(a2 + 16);
      if (v37)
      {
        uint64_t v38 = v24 + 544;
        uint64_t v39 = a14;
        do
        {
          uint64_t v40 = *v39++;
          *v38++ = v40;
          --v37;
        }
        while (v37);
      }
    }
    if (*(_DWORD *)(a2 + 24))
    {
      unint64_t v41 = v24 + 521;
      BOOL v42 = 1;
      v24[521] = 1;
    }
    else
    {
      BOOL v42 = a13 != 0;
      unint64_t v41 = v24 + 521;
      v24[521] = v42;
      if (!a13)
      {
        int v47 = 0;
LABEL_46:
        unint64_t v48 = CGAccessSessionCreate(a12);
        *((void *)v24 + 84) = v48;
        if (!v48) {
          goto LABEL_59;
        }
        unint64_t v49 = a6 > 0x10000 ? 1 : 0x10000 / a6;
        *((void *)v24 + 43) = v49;
        size_t v50 = a10 + v49 * a6;
        uint64_t v51 = malloc_type_calloc(1uLL, v50, 0xD1A5B1B7uLL);
        *((void *)v24 + 46) = v51;
        if (!v51) {
          goto LABEL_59;
        }
        if (*v41)
        {
          if (!a9) {
            _CGHandleAssert("create_image_stream", 218, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "src_smask_bytes_per_row > 0", "bpr %lu", v52, v53, v54, 0);
          }
          uint64_t v55 = malloc_type_calloc(1uLL, a11 + v49 * a7, 0x387CD7CFuLL);
          *((void *)v24 + 47) = v55;
          if (!v55) {
            goto LABEL_59;
          }
        }
        if (a13)
        {
          uint64_t v56 = CGAccessSessionCreate(a13);
          *((void *)v24 + 85) = v56;
          if (!v56) {
            goto LABEL_59;
          }
        }
        if (v47)
        {
          uint64_t v57 = malloc_type_calloc(1uLL, v50, 0x965A843DuLL);
          *((void *)v24 + 48) = v57;
          if (!v57) {
            goto LABEL_59;
          }
          memcpy(v24 + 696, (const void *)a2, 0x130uLL);
          memcpy(v24 + 1000, (const void *)a2, 0x130uLL);
          *((_DWORD *)v24 + 180) = 5;
          *((_DWORD *)v24 + 256) = 0;
          memset(&srcFormat, 0, sizeof(srcFormat));
          memcpy(__dst, v24 + 696, sizeof(__dst));
          CGBitmapPixelInfoGet_vImageFormat((uint64_t)&srcFormat, (uint64_t)__dst, v58, v59, v60, v61, v62, v63);
          memset(&destFormat, 0, sizeof(destFormat));
          memcpy(__dst, v24 + 1000, sizeof(__dst));
          CGBitmapPixelInfoGet_vImageFormat((uint64_t)&destFormat, (uint64_t)__dst, v64, v65, v66, v67, v68, v69);
          vImageConverterRef v70 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0x100u, 0);
          *((void *)v24 + 86) = v70;
          if (!v70)
          {
LABEL_59:
            CGImageStreamRelease(v24);
            return 0;
          }
        }
        return v24;
      }
    }
    if (v36)
    {
      if (!a13 || !a14) {
        _CGHandleAssert("create_image_stream", 187, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "src_image_matte != NULL && src_smask_data_provider != NULL", "matte %p  provider %p", v32, v33, v34, (char)a14);
      }
      uint64_t v43 = *(void *)(a2 + 16);
      if (v43)
      {
        __int8 v44 = v24 + 392;
        do
        {
          uint64_t v45 = *v25++;
          *v44++ = v45;
          --v43;
        }
        while (v43);
      }
    }
    int v47 = v42 && a13 == 0;
    goto LABEL_46;
  }
  return v24;
}

void CGImageStreamRelease(void *a1)
{
  uint64_t v2 = (CGDataProvider *)a1[66];
  if (v2) {
    CGDataProviderRelease(v2);
  }
  unsigned int v3 = (uint64_t *)a1[84];
  if (v3) {
    CGAccessSessionRelease(v3);
  }
  uint64_t v4 = (CGDataProvider *)a1[67];
  if (v4) {
    CGDataProviderRelease(v4);
  }
  uint64_t v5 = (uint64_t *)a1[85];
  if (v5) {
    CGAccessSessionRelease(v5);
  }
  double v6 = (void *)a1[46];
  if (v6) {
    free(v6);
  }
  double v7 = (void *)a1[47];
  if (v7) {
    free(v7);
  }
  double v8 = (void *)a1[48];
  if (v8) {
    free(v8);
  }
  uint64_t v9 = (vImageConverter *)a1[86];
  if (v9) {
    vImageConverter_Release(v9);
  }

  free(a1);
}

uint64_t CGColorTRCGetTypeID()
{
  if (CGColorTRCGetTypeID_cglibrarypredicate != -1) {
    dispatch_once(&CGColorTRCGetTypeID_cglibrarypredicate, &__block_literal_global_785);
  }
  uint64_t v0 = (uint64_t (*)(void))CGColorTRCGetTypeID_f;

  return v0();
}

uint64_t colorsync_smart_null_791()
{
  return 0;
}

uint64_t CGColorMatrixGetTypeID()
{
  if (CGColorMatrixGetTypeID_cglibrarypredicate != -1) {
    dispatch_once(&CGColorMatrixGetTypeID_cglibrarypredicate, &__block_literal_global_16);
  }
  uint64_t v0 = (uint64_t (*)(void))CGColorMatrixGetTypeID_f;

  return v0();
}

uint64_t CGColorNxMTransformGetTypeID()
{
  if (CGColorNxMTransformGetTypeID_cglibrarypredicate != -1) {
    dispatch_once(&CGColorNxMTransformGetTypeID_cglibrarypredicate, &__block_literal_global_24);
  }
  uint64_t v0 = (uint64_t (*)(void))CGColorNxMTransformGetTypeID_f;

  return v0();
}

uint64_t CGColorNxMLUTGetTypeID()
{
  if (CGColorNxMTransformGetTypeID_cglibrarypredicate != -1) {
    dispatch_once(&CGColorNxMTransformGetTypeID_cglibrarypredicate, &__block_literal_global_24);
  }
  uint64_t v0 = (uint64_t (*)(void))CGColorNxMTransformGetTypeID_f;

  return v0();
}

double CGColorNxMTransformGetTransform@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (CGColorNxMTransformGetTransform_cglibrarypredicate != -1) {
    dispatch_once(&CGColorNxMTransformGetTransform_cglibrarypredicate, &__block_literal_global_28);
  }
  int v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  CGColorNxMTransformGetTransform_f(&v6, a1);
  double result = *(double *)&v6;
  long long v5 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v8;
  return result;
}

uint64_t (*__nxm_get_properties_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  double result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    double result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetProperties");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_791;
  }
  nxm_get_properties_f = (uint64_t)v1;
  return result;
}

uint64_t (*__nxm_get_input_range_block_invoke_2())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  double result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    double result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetInputRange");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_791;
  }
  nxm_get_input_range_f_82 = (uint64_t)v1;
  return result;
}

uint64_t (*__nxm_get_input_range_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  double result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    double result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetInputRange");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_791;
  }
  nxm_get_input_range_f = v1;
  return result;
}

uint64_t (*__nxm_get_output_range_block_invoke_2())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  double result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    double result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetOutputRange");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_791;
  }
  nxm_get_output_range_f_109 = (uint64_t)v1;
  return result;
}

uint64_t (*__nxm_get_output_range_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  double result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    double result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetOutputRange");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_791;
  }
  nxm_get_output_range_f = v1;
  return result;
}

uint64_t __CGColorConversionInfoIterateFunctionsWithCallbacks_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    return 1;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v6 = *(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v4 + 16);
  long long v7 = *(_OWORD *)(v5 + 56);
  v9[1] = *(_OWORD *)(v5 + 40);
  v9[2] = v7;
  v10[0] = *(_OWORD *)(v5 + 72);
  *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)(v5 + 84);
  v9[0] = *(_OWORD *)(v5 + 24);
  return v6(v4, v9, a2, a3);
}

uint64_t CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks(uint64_t a1, CGColorSpace *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, int a9)
{
  if (!a1 || !*(unsigned char *)(*(void *)(a1 + 24) + 10)) {
    return 0;
  }
  unsigned int Type = CGColorSpaceGetType(a2);
  uint64_t v18 = 0;
  if (Type <= 0xB && ((1 << Type) & 0xC78) != 0)
  {
    uint64_t v18 = 1;
    CGColorConversionInfoRef v19 = CGColorConversionInfoCreateFromList(0, a2, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a1, 1, 0, 0);
    if (v19)
    {
      CGColorConversionInfoRef v20 = v19;
      uint64_t v21 = CGColorConversionInfoIterateFunctionsWithCallbacks(v19, a3, a4, a5, a6, a7, a8, a9);
      CFRelease(v20);
      return v21;
    }
  }
  return v18;
}

uint64_t CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacksAndOptions(uint64_t a1, CGColorSpace *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, CFDictionaryRef options)
{
  unsigned int Type = CGColorSpaceGetType(a2);
  uint64_t v19 = 0;
  if (Type > 0xB) {
    return v19;
  }
  if (((1 << Type) & 0xC78) == 0) {
    return v19;
  }
  uint64_t v19 = 1;
  CGColorConversionInfoRef v20 = CGColorConversionInfoCreateFromList(options, a2, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a1, 1, 0, 0);
  if (!v20) {
    return v19;
  }
  CGColorConversionInfoRef v21 = v20;
  uint64_t v22 = CGColorConversionInfoIterateFunctionsWithCallbacks(v20, a3, a4, a5, a6, a7, a8, a9);
  CFRelease(v21);
  return v22;
}

void CGFontDBRelease(char *a1)
{
  if (a1)
  {
    uint64_t v2 = *(const void **)a1;
    if (v2) {
      CFRelease(v2);
    }
    unsigned int v3 = (const void *)*((void *)a1 + 1);
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)*((void *)a1 + 2);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = (const void *)*((void *)a1 + 3);
    if (v5) {
      CFRelease(v5);
    }
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
    free(a1);
  }
}

uint64_t CGFontDBAddFontsAtPath(uint64_t result, uint64_t a2)
{
  if (result && a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    add_fonts_at_path_locked(v3, a2, 0, v5, v6, v7, v8, v9);
    return pthread_mutex_unlock(v4);
  }
  return result;
}

void add_fonts_at_path_locked(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a2)
  {
    if (a3
      && (CFArrayRef v11 = (const __CFArray *)CGFontCreateWithPathAndName(a2, (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8)) != 0)
    {
      CFArrayRef v12 = v11;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), a3, v11);
    }
    else
    {
      FontsWithPath = CGFontCreateFontsWithPath(a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!FontsWithPath) {
        return;
      }
      CFArrayRef v12 = FontsWithPath;
      CFIndex Count = CFArrayGetCount(FontsWithPath);
      if (Count)
      {
        CFIndex v15 = Count;
        for (CFIndex i = 0; i != v15; ++i)
        {
          ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v12, i);
          if (ValueAtIndex)
          {
            uint64_t v18 = ValueAtIndex;
            uint64_t v19 = (const void *)(*(uint64_t (**)(void))(ValueAtIndex[2] + 152))(ValueAtIndex[14]);
            if (v19)
            {
              CGColorConversionInfoRef v20 = v19;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), v19, v18);
              CFRelease(v20);
            }
            CGColorConversionInfoRef v21 = (const void *)(*(uint64_t (**)(void))(v18[2] + 168))(v18[14]);
            if (v21)
            {
              uint64_t v22 = v21;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), v21, v18);
              CFRelease(v22);
            }
          }
        }
      }
    }
    CFRelease(v12);
  }
}

uint64_t CGFontDBAddFont(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    if (a2)
    {
      uint64_t v5 = (const void *)(*(uint64_t (**)(void))(a2[2] + 152))(a2[14]);
      if (v5)
      {
        uint64_t v6 = v5;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 8), v5, a2);
        CFRelease(v6);
      }
      uint64_t v7 = (const void *)(*(uint64_t (**)(void))(a2[2] + 168))(a2[14]);
      if (v7)
      {
        uint64_t v8 = v7;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 8), v7, a2);
        CFRelease(v8);
      }
    }
    return pthread_mutex_unlock(v4);
  }
  return result;
}

uint64_t CGFontDBRemoveFont(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (CFArrayRef *)result;
    uint64_t v4 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    if (a2)
    {
      uint64_t v5 = (void *)(*(uint64_t (**)(void))(*(void *)(a2 + 16) + 152))(*(void *)(a2 + 112));
      uint64_t v6 = (void *)(*(uint64_t (**)(void))(*(void *)(a2 + 16) + 168))(*(void *)(a2 + 112));
      remove_font_names_locked(v3, v5, v6);
      if (v5) {
        CFRelease(v5);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      remove_font_names_locked(v3, 0, 0);
    }
    return pthread_mutex_unlock(v4);
  }
  return result;
}

void remove_font_names_locked(CFArrayRef *a1, void *key, void *a3)
{
  if (key) {
    CFDictionaryRemoveValue(a1[1], key);
  }
  if (a3) {
    CFDictionaryRemoveValue(a1[1], a3);
  }
  CFIndex Count = CFArrayGetCount(*a1);
  if (Count)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(*a1, i);
      CFDictionaryRef v10 = ValueAtIndex;
      if (key && CFDictionaryContainsKey(ValueAtIndex, key) || a3 && CFDictionaryContainsKey(v10, a3))
      {
        CFIndex v11 = CFDictionaryGetCount(v10);
        MutableCopCGFloat y = CFDictionaryCreateMutableCopy(0, v11, v10);
        unsigned int v13 = MutableCopy;
        if (key) {
          CFDictionaryRemoveValue(MutableCopy, key);
        }
        if (a3) {
          CFDictionaryRemoveValue(v13, a3);
        }
        CFArraySetValueAtIndex(*a1, i, v13);
        CFRelease(v13);
      }
    }
  }
}

uint64_t CGFontDBRemoveFontByName(uint64_t result, void *a2)
{
  if (result && a2)
  {
    uint64_t v3 = (CFArrayRef *)result;
    uint64_t v4 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    remove_font_names_locked(v3, a2, 0);
    return pthread_mutex_unlock(v4);
  }
  return result;
}

uint64_t CGFontDBPurgeAllFonts(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v1 + 8));
    return pthread_mutex_unlock(v2);
  }
  return result;
}

void CGFontDBAddFontReferencesAtPath(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2)
    {
      FontsWithPath = CGFontCreateFontsWithPath((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (FontsWithPath)
      {
        CFArrayRef v11 = FontsWithPath;
        CFArrayRef v12 = (pthread_mutex_t *)(a1 + 32);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
        ValueAtIndeCGFloat x = (__CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, 0);
        CFIndex Count = CFArrayGetCount(v11);
        if (Count)
        {
          CFIndex v15 = Count;
          for (CFIndex i = 0; i != v15; ++i)
          {
            unint64_t v17 = CFArrayGetValueAtIndex(v11, i);
            if (v17)
            {
              uint64_t v18 = v17;
              uint64_t v19 = (const void *)(*(uint64_t (**)(void))(v17[2] + 152))(v17[14]);
              if (v19)
              {
                CGColorConversionInfoRef v20 = v19;
                CFDictionarySetValue(ValueAtIndex, v19, a2);
                CFRelease(v20);
              }
              CGColorConversionInfoRef v21 = (const void *)(*(uint64_t (**)(void))(v18[2] + 168))(v18[14]);
              if (v21)
              {
                uint64_t v22 = v21;
                CFDictionarySetValue(ValueAtIndex, v21, a2);
                CFRelease(v22);
              }
            }
          }
        }
        pthread_mutex_unlock(v12);
        CFRelease(v11);
      }
    }
  }
}

DIR *CGFontDBAddFontsInDirectory(uint64_t a1, CFStringRef string, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(&v6, 0, sizeof(v6));
  double result = (DIR *)CFStringGetFileSystemRepresentation(string, buffer, 1025);
  if (result)
  {
    double result = (DIR *)stat(buffer, &v6);
    if (!result && (v6.st_mode & 0xF000) == 0x4000) {
      return activate_directory(a1, (uint64_t)buffer, a3);
    }
  }
  return result;
}

DIR *activate_directory(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  __strcpy_chk();
  size_t v5 = strlen(__s);
  size_t v6 = v5;
  if (__s[v5 - 1] != 47)
  {
    *(_WORD *)&__s[v5] = 47;
    size_t v6 = v5 + 1;
  }
  double result = opendir(__s);
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = &__s[v6];
    size_t v10 = 1024 - v6;
    while (1)
    {
      CFArrayRef v11 = readdir(v8);
      if (!v11) {
        break;
      }
      CFArrayRef v12 = v11;
      d_name = v11->d_name;
      if (strcmp(v11->d_name, ".") && strcmp(d_name, ".."))
      {
        strncpy(v9, d_name, v10);
        int d_type = v12->d_type;
        if (d_type == 8)
        {
          CFStringRef v15 = CFStringCreateWithFileSystemRepresentation(0, __s);
          if (v15)
          {
            CFStringRef v22 = v15;
            CGFontDBAddFontReferencesAtPath(a1, v15, v16, v17, v18, v19, v20, v21);
            CFRelease(v22);
          }
        }
        else if (d_type == 4)
        {
          if (a3) {
            activate_directory(a1, __s, 1);
          }
        }
      }
    }
    return (DIR *)closedir(v8);
  }
  return result;
}

__CFDictionary *CGFontDBCreatePlist(CFArrayRef *a1)
{
  if (!a1) {
    return 0;
  }
  CGMutablePathRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v3)
    {
      CFMutableDictionaryRef v4 = v3;
      CFIndex Count = CFArrayGetCount(*a1);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; i != v6; ++i)
        {
          ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(*a1, i);
          CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)append_to_dictionary, v4);
        }
      }
      CFDictionaryApplyFunction(a1[1], (CFDictionaryApplierFunction)get_names_and_paths, v4);
      CFDictionarySetValue(Mutable, @"Names", v4);
    }
    else
    {
      CFMutableDictionaryRef v4 = Mutable;
      CGMutablePathRef Mutable = 0;
    }
    CFRelease(v4);
  }
  return Mutable;
}

void get_names_and_paths(const void *a1, CFTypeRef cf, __CFDictionary *a3)
{
  CFTypeID v9 = CFGetTypeID(cf);
  if (_block_invoke_once_3318 != -1) {
    dispatch_once(&_block_invoke_once_3318, &__block_literal_global_8_3319);
  }
  if (v9 != CGFontGetTypeID_font_type_id)
  {
    if (cf)
    {
      CFTypeID v13 = CFGetTypeID(cf);
      CFStringRef v14 = CFCopyTypeIDDescription(v13);
      LOBYTE(v12) = CFStringGetCStringPtr(v14, 0x8000100u);
    }
    else
    {
      CFArrayRef v12 = "<NULL>";
    }
    _CGHandleAssert("get_names_and_paths", 460, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontDB.c", "CFGetTypeID(value) == CGFontGetTypeID()", "value is a %s", v6, v7, v8, (char)v12);
  }
  if (cf)
  {
    size_t v10 = (const void *)(*(uint64_t (**)(void))(*((void *)cf + 2) + 224))(*((void *)cf + 14));
    if (v10)
    {
      CFArrayRef v11 = v10;
      CFDictionarySetValue(a3, a1, v10);
      CFRelease(v11);
    }
  }
}

void append_to_dictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (value) {
    CFDictionarySetValue(theDict, key, value);
  }
}

const void *CGFontDBGetFontWithName(uint64_t a1, const void *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
    return 0;
  }
  if (CGFontDBGetLocal_once != -1) {
    dispatch_once_f(&CGFontDBGetLocal_once, 0, (dispatch_function_t)create_local_db);
  }
  uint64_t v3 = local_db;
  if (!a2) {
    return 0;
  }
LABEL_3:
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), a2);
  if (Value)
  {
LABEL_4:
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
    return Value;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)v3);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    while (1)
    {
      ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)v3, v8);
      size_t v10 = CFDictionaryGetValue(ValueAtIndex, a2);
      if (v10) {
        break;
      }
      if (v7 == ++v8) {
        goto LABEL_14;
      }
    }
    add_fonts_at_path_locked(v3, (uint64_t)v10, a2, v11, v12, v13, v14, v15);
    uint64_t v19 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), a2);
    CFArrayRef Value = v19;
    if (v19)
    {
      CFTypeRef v20 = CFRetain(v19);
      CFAutorelease(v20);
    }
    goto LABEL_4;
  }
LABEL_14:
  CFTypeRef v16 = copy_aliased_font_name_locked(v3, a2);
  if (!v16)
  {
    CFArrayRef Value = 0;
    goto LABEL_4;
  }
  uint64_t v17 = v16;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
  uint64_t v18 = CGFontDBGetFontWithName(v3, v17);
  CFRelease(v17);
  return (const void *)v18;
}

CFTypeRef copy_aliased_font_name_locked(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 16);
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      do
      {
        ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v7);
        CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, a2);
        if (Value) {
          goto LABEL_13;
        }
      }
      while (v6 != ++v7);
    }
  }
  CFArrayRef v10 = *(const __CFArray **)(a1 + 24);
  if (!v10) {
    return 0;
  }
  CFIndex v11 = CFArrayGetCount(v10);
  if (v11 < 1) {
    return 0;
  }
  CFIndex v12 = v11;
  CFIndex v13 = 0;
  while (1)
  {
    CFDictionaryRef v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v13);
    CFArrayRef Value = CFDictionaryGetValue(v14, a2);
    if (Value) {
      break;
    }
    if (v12 == ++v13) {
      return 0;
    }
  }
LABEL_13:

  return CFRetain(Value);
}

CFTypeRef CGFontDBCopyFontWithName(uint64_t a1, const void *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
    return 0;
  }
  if (CGFontDBGetLocal_once != -1) {
    dispatch_once_f(&CGFontDBGetLocal_once, 0, (dispatch_function_t)create_local_db);
  }
  uint64_t v3 = local_db;
  if (!a2) {
    return 0;
  }
LABEL_3:
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), a2);
  if (Value)
  {
    CFTypeRef v5 = Value;
    CFRetain(Value);
LABEL_5:
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
    return v5;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)v3);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)v3, v9);
      CFIndex v11 = CFDictionaryGetValue(ValueAtIndex, a2);
      if (v11) {
        break;
      }
      if (v8 == ++v9) {
        goto LABEL_15;
      }
    }
    add_fonts_at_path_locked(v3, (uint64_t)v11, a2, v12, v13, v14, v15, v16);
    CFTypeRef v20 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), a2);
    if (v20)
    {
      CFTypeRef v5 = CFRetain(v20);
      goto LABEL_5;
    }
LABEL_19:
    CFTypeRef v5 = 0;
    goto LABEL_5;
  }
LABEL_15:
  CFTypeRef v17 = copy_aliased_font_name_locked(v3, a2);
  if (!v17) {
    goto LABEL_19;
  }
  uint64_t v18 = v17;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
  uint64_t v19 = CGFontDBCopyFontWithName(v3, v18);
  CFRelease(v18);
  return (CFTypeRef)v19;
}

void CGFontDBApplyFunction(uint64_t a1, unsigned int (*a2)(const void *, uint64_t), uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = a1;
    if (a1) {
      goto LABEL_6;
    }
    if (CGFontDBGetLocal_once != -1) {
      dispatch_once_f(&CGFontDBGetLocal_once, 0, (dispatch_function_t)create_local_db);
    }
    uint64_t v5 = local_db;
    if (local_db)
    {
LABEL_6:
      pthread_mutex_lock((pthread_mutex_t *)(v5 + 32));
      apply_function_locked((CFArrayRef *)v5, a2, a3);
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 32));
    }
  }
}

void apply_function_locked(CFArrayRef *a1, unsigned int (*a2)(const void *, uint64_t), uint64_t a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFArrayGetCount(*a1);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(*a1, i);
      fault_all_in_map_locked((uint64_t)a1, ValueAtIndex);
    }
  }
  CFIndex v10 = CFDictionaryGetCount(a1[1]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v14 = (const void **)((char *)v20 - v13);
  if (v12 <= 0x1FFFFFFFFFFFFFFELL) {
    uint64_t v15 = (const void **)((char *)v20 - v13);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v12 - 0x1FFFFFFFFFFFFFFFLL >= 0xE00000000000007ALL) {
    uint64_t v15 = (const void **)malloc_type_malloc(8 * v10, 0x446BBC51uLL);
  }
  if (v15)
  {
    CFDictionaryGetKeysAndValues(a1[1], 0, v15);
    CFMutableSetRef Mutable = CFSetCreateMutable(0, v10, MEMORY[0x1E4F1D548]);
    if (Mutable)
    {
      CFTypeRef v17 = Mutable;
      if (v10)
      {
        uint64_t v18 = v15;
        do
        {
          uint64_t v19 = *v18;
          if (!CFSetContainsValue(v17, *v18))
          {
            if (a2(v19, a3)) {
              break;
            }
            CFSetAddValue(v17, v19);
          }
          ++v18;
          --v10;
        }
        while (v10);
      }
      CFRelease(v17);
    }
    if (v15 != v14) {
      free(v15);
    }
  }
}

void fault_all_in_map_locked(uint64_t a1, CFDictionaryRef theDict)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    if (Count)
    {
      CFIndex v6 = Count;
      MEMORY[0x1F4188790](Count, v5);
      CFIndex v9 = (const void **)((char *)&v17[-1] - v7 - 7);
      if (v8 <= 0x1FFFFFFFFFFFFFFELL) {
        CFIndex v10 = (const void **)((char *)&v17[-1] - v7 - 7);
      }
      else {
        CFIndex v10 = 0;
      }
      if (v8 - 0x1FFFFFFFFFFFFFFFLL >= 0xE00000000000007ALL) {
        CFIndex v10 = (const void **)malloc_type_malloc(16 * v6, 0xBD55515BuLL);
      }
      if (v10)
      {
        CFDictionaryGetKeysAndValues(theDict, v10, &v10[v6]);
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v10[i])) {
            add_fonts_at_path_locked(a1, (uint64_t)*(&v10[v6] + i), v10[i], v12, v13, v14, v15, v16);
          }
        }
        if (v10 != v9) {
          free(v10);
        }
      }
    }
  }
}

uint64_t CGPDFImageCreate(uint64_t a1)
{
  v34[1] = *(CGPDFStreamRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  masuint64_t k = (uint64_t)CGPDFDictionaryCopyAssociation(*(void *)(a1 + 48), "Image");
  if (mask) {
    goto LABEL_36;
  }
  CFArrayRef v4 = *(CGPDFDictionary **)(a1 + 48);
  CGPDFBoolean value = CGPDFDictionaryGetBoolean(v4, "ImageMask", &value);
  arraCGFloat y = 0;
  v34[0] = 0;
  if (CGPDFDictionaryGetName(v4, "Filter", (const char **)v34))
  {
    CGPDFStreamRef v5 = v34[0];
  }
  else if (CGPDFDictionaryGetArray(v4, "Filter", &array) && array && (uint64_t v6 = *((void *)array + 2)) != 0)
  {
    if (CGPDFArrayGetName(array, v6 - 1, (const char **)v34)) {
      CGPDFStreamRef v5 = v34[0];
    }
    else {
      CGPDFStreamRef v5 = 0;
    }
  }
  else
  {
    CGPDFStreamRef v5 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x18532AD60]();
  if (CGAnalyticsSendCreatePDFImageEvent_onceToken == -1)
  {
    if (v5)
    {
LABEL_13:
      uint64_t v8 = objc_msgSend((id)CGAnalyticsSendCreatePDFImageEvent_filterNameToEnumMapping, "objectForKeyedSubscript:", objc_msgSend(NSString, "stringWithUTF8String:", v5));
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(&CGAnalyticsSendCreatePDFImageEvent_onceToken, &__block_literal_global_16123);
    if (v5) {
      goto LABEL_13;
    }
  }
  uint64_t v8 = 0;
LABEL_16:
  CFIndex v9 = (CGPDFStream *)&unk_1ED0ADA48;
  if (v8) {
    CFIndex v9 = (CGPDFStream *)v8;
  }
  arraCGFloat y = (CGPDFArrayRef)@"filterName";
  v34[0] = v9;
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v34 forKeys:&array count:1];
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CreatePDFImage");
  if (value)
  {
    masuint64_t k = create_mask((void *)a1);
    goto LABEL_34;
  }
  v34[0] = (CGPDFStreamRef)a1;
  if (CGPDFImageGetTypeID_onceToken != -1) {
    dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_852);
  }
  uint64_t cftype = pdf_create_cftype();
  masuint64_t k = cftype;
  if (!cftype) {
    goto LABEL_34;
  }
  pthread_mutex_init((pthread_mutex_t *)(cftype + 152), 0);
  *(void *)(mask + 24) = a1;
  *(unsigned char *)(mask + 16) = 0;
  uint64_t DataProvider = CGPDFStreamCreateDataProvider((const void *)a1, (int *)(mask + 40));
  *(void *)(mask + 32) = DataProvider;
  if (!DataProvider) {
    goto LABEL_33;
  }
  CGPDFArrayRef v32 = 0;
  arraCGFloat y = 0;
  CGPDFObjectRef v31 = 0;
  int v30 = 0;
  CGPDFBoolean v29 = 0;
  CGPDFDictionaryRef dict = 0;
  uint64_t v12 = *(CGPDFDictionary **)(a1 + 48);
  if (!CGPDFDictionaryGetInteger(v12, "Width", (CGPDFInteger *)&array) || (uint64_t)array <= 0)
  {
LABEL_33:
    CFRelease((CFTypeRef)mask);
    masuint64_t k = 0;
    goto LABEL_34;
  }
  *(void *)(mask + 48) = array;
  if (!CGPDFDictionaryGetInteger(v12, "Height", (CGPDFInteger *)&array) || (uint64_t)array <= 0)
  {
LABEL_32:
    pdf_error(v14);
    goto LABEL_33;
  }
  *(void *)(mask + 56) = array;
  if (*(_DWORD *)(mask + 40) == 2)
  {
    CGPDFArrayRef v13 = 0;
  }
  else
  {
    if (!CGPDFDictionaryGetInteger(v12, "BitsPerComponent", (CGPDFInteger *)&array))
    {
      goto LABEL_33;
    }
    CGPDFArrayRef v13 = array;
    if ((unint64_t)array > 0x10 || ((1 << (char)array) & 0x10116) == 0)
    {
      goto LABEL_33;
    }
  }
  *(void *)(mask + 64) = v13;
  set_image_rendering_intent(mask, v12);
  if (!CGPDFDictionaryGetObject(v12, "ColorSpace", &v31))
  {
    if (*(_DWORD *)(mask + 40) != 2)
    {
      goto LABEL_33;
    }
    CGPDFObjectRef v31 = 0;
    goto LABEL_47;
  }
  if (!v31)
  {
LABEL_47:
    *(void *)(mask + 72) = 0;
    goto LABEL_48;
  }
  CGColorSpaceRef colorspace = cg_create_colorspace((uint64_t)v31);
  *(void *)(mask + 72) = colorspace;
  if (!colorspace || CGColorSpaceGetType(colorspace) == 9)
  {
    goto LABEL_33;
  }
LABEL_48:
  *(unsigned char *)(mask + 84) = 0;
  if (CGPDFDictionaryGetBoolean(v12, "Interpolate", &v29)) {
    *(unsigned char *)(mask + 84) = v29 != 0;
  }
  uint64_t v17 = *(void *)(mask + 72);
  if (v17) {
    uint64_t v18 = *(void *)(*(void *)(v17 + 24) + 48);
  }
  else {
    uint64_t v18 = 0;
  }
  set_image_decode_array(mask, v12, v18, 0);
  if ((v19 & 1) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(mask + 88) = v18 == 3;
  if (*(_DWORD *)(mask + 40) == 1)
  {
    if (CGPDFDictionaryGetDictionary(v12, "DecodeParms", &dict) || CGPDFDictionaryGetDictionary(v12, "DP", &dict))
    {
      if (dict && CGPDFDictionaryGetInteger(dict, "ColorTransform", (CGPDFInteger *)&array))
      {
        if ((unint64_t)array > 1) {
        else
        }
          *(_DWORD *)(mask + 88) = array;
      }
    }
    else
    {
      CGPDFDictionaryRef dict = 0;
    }
  }
  CGPDFInteger v27 = 0;
  CGPDFBoolean v26 = 0;
  if (CGPDFDictionaryGetInteger(v12, "SMaskInData", &v27) && v27
    || CGPDFDictionaryGetBoolean(v12, "SMaskInData", &v26) && v26)
  {
    *(unsigned char *)(mask + 120) = 1;
  }
  if (CGPDFDictionaryGetStream(v12, "SMask", v34))
  {
    smasuint64_t k = create_smask((void *)v34[0], v18);
    *(void *)(mask + 112) = smask;
    if (!smask) {
      goto LABEL_33;
    }
  }
  else if (CGPDFDictionaryGetStream(v12, "Mask", v34))
  {
    uint64_t v21 = create_mask((void *)v34[0]);
    *(void *)(mask + 104) = v21;
    if (!v21) {
      goto LABEL_33;
    }
  }
  else if (CGPDFDictionaryGetArray(v12, "Mask", &v32))
  {
    uint64_t v22 = 2 * v18;
    uint64_t v23 = malloc_type_malloc(16 * v18, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    *(void *)(mask + 128) = v23;
    if (!CGPDFArrayGetNumbers((uint64_t)v32, (uint64_t)v23, v22))
    {
      goto LABEL_33;
    }
  }
  if (CGPDFDictionaryGetStream(v12, "AAPL:EPSData", v34))
  {
    uint64_t v24 = CGPDFStreamCreateDataProvider(v34[0], &v30);
    *(void *)(mask + 96) = v24;
    if (!v24 || v30) {
      goto LABEL_32;
    }
  }
LABEL_34:
  if (mask) {
    masuint64_t k = CGPDFDictionarySetAssociation(*(void *)(a1 + 48), (const void *)mask, "Image");
  }
LABEL_36:
  os_unfair_lock_unlock(v2);
  return mask;
}

uint64_t create_mask(void *a1)
{
  if (CGPDFImageGetTypeID_onceToken != -1) {
    dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_852);
  }
  uint64_t cftype = pdf_create_cftype();
  uint64_t v3 = cftype;
  if (cftype)
  {
    pthread_mutex_init((pthread_mutex_t *)(cftype + 152), 0);
    *(void *)(v3 + 24) = a1;
    *(unsigned char *)(v3 + 16) = 1;
    uint64_t DataProvider = CGPDFStreamCreateDataProvider(a1, (int *)(v3 + 40));
    *(void *)(v3 + 32) = DataProvider;
    if (!DataProvider)
    {
LABEL_22:
      CFRelease((CFTypeRef)v3);
      return 0;
    }
    CGPDFInteger v15 = 0;
    *(_WORD *)CGPDFBoolean value = 0;
    if (a1) {
      a1 = (void *)a1[6];
    }
    if (!CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)a1, "ImageMask", &value[1]) || !value[1])
    {
      goto LABEL_22;
    }
    if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "Width", &v15) || v15 <= 0)
    {
      goto LABEL_22;
    }
    *(void *)(v3 + 48) = v15;
    if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "Height", &v15) || v15 <= 0)
    {
      goto LABEL_22;
    }
    *(void *)(v3 + 56) = v15;
    if (*(_DWORD *)(v3 + 40) == 2)
    {
      uint64_t v8 = 0;
    }
    else
    {
      BOOL Integer = CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "BitsPerComponent", &v15);
      uint64_t v8 = 1;
      if (Integer && v15 != 1)
      {
        goto LABEL_22;
      }
    }
    *(void *)(v3 + 64) = v8;
    *(void *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    *(unsigned char *)(v3 + 84) = 0;
    if (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)a1, "Interpolate", value)) {
      *(unsigned char *)(v3 + 84) = value[0] != 0;
    }
    double v9 = set_image_decode_array(v3, (CGPDFDictionaryRef)a1, 1, 0);
    if ((v10 & 1) == 0)
    {
      goto LABEL_22;
    }
  }
  return v3;
}

void set_image_rendering_intent(uint64_t a1, CGPDFDictionaryRef dict)
{
  CGPDFBoolean value = 0;
  if (CGPDFDictionaryGetName(dict, "Intent", (const char **)&value))
  {
    uint64_t v3 = value;
    if (!strcmp(value, "AbsoluteColorimetric"))
    {
      int v4 = 1;
      goto LABEL_12;
    }
    if (!strcmp(v3, "RelativeColorimetric"))
    {
      int v4 = 2;
      goto LABEL_12;
    }
    if (!strcmp(v3, "Saturation"))
    {
      int v4 = 4;
      goto LABEL_12;
    }
    if (!strcmp(v3, "Perceptual"))
    {
      int v4 = 3;
      goto LABEL_12;
    }
  }
  int v4 = 0;
LABEL_12:
  *(_DWORD *)(a1 + 80) = v4;
}

CGPDFReal set_image_decode_array(uint64_t a1, CGPDFDictionaryRef dict, uint64_t a3, int a4)
{
  if ((*(_DWORD *)(a1 + 40) != 2 || CGPDFDictionaryGetObject(dict, "ColorSpace", 0) || *(unsigned char *)(a1 + 16))
    && ((arraCGFloat y = 0, CGPDFDictionaryGetArray(dict, "Decode", &array))
     || a4 && CGPDFDictionaryGetArray(dict, "D", &array)))
  {
    double v9 = (CGPDFReal *)malloc_type_malloc(16 * a3, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    *(void *)(a1 + 136) = v9;
    char v10 = array;
    if (array)
    {
      uint64_t v11 = 2 * a3;
      if (*((void *)array + 2) >= (unint64_t)(2 * a3))
      {
        if (v11)
        {
          size_t v12 = 0;
          CGPDFReal value = 0.0;
          do
          {
            if (!CGPDFArrayGetNumber(v10, v12, &value)) {
              break;
            }
            CGPDFReal result = value;
            v9[v12++] = value;
          }
          while (v11 != v12);
        }
      }
    }
  }
  else
  {
    *(void *)(a1 + 136) = 0;
  }
  return result;
}

uint64_t create_smask(void *a1, uint64_t a2)
{
  if (CGPDFImageGetTypeID_onceToken != -1) {
    dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_852);
  }
  uint64_t cftype = pdf_create_cftype();
  uint64_t v5 = cftype;
  if (cftype)
  {
    pthread_mutex_init((pthread_mutex_t *)(cftype + 152), 0);
    *(void *)(v5 + 24) = a1;
    *(unsigned char *)(v5 + 16) = 0;
    uint64_t DataProvider = CGPDFStreamCreateDataProvider(a1, (int *)(v5 + 40));
    *(void *)(v5 + 32) = DataProvider;
    if (DataProvider)
    {
      __s1 = 0;
      CGPDFInteger v15 = 0;
      arraCGFloat y = 0;
      *(_WORD *)CGPDFReal value = 0;
      if (a1) {
        a1 = (void *)a1[6];
      }
      if (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)a1, "ImageMask", &value[1]) && value[1])
      {
      }
      else if (CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "Width", &v15) && v15 > 0)
      {
        *(void *)(v5 + 48) = v15;
        if (CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "Height", &v15) && v15 > 0)
        {
          *(void *)(v5 + 56) = v15;
          if (*(_DWORD *)(v5 + 40) == 2)
          {
            CGPDFInteger v7 = 0;
          }
          else
          {
            if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "BitsPerComponent", &v15))
            {
              goto LABEL_18;
            }
            CGPDFInteger v7 = v15;
            if ((unint64_t)v15 > 0x10 || ((1 << v15) & 0x10116) == 0)
            {
              goto LABEL_18;
            }
          }
          *(void *)(v5 + 64) = v7;
          if (CGPDFDictionaryGetName((CGPDFDictionaryRef)a1, "ColorSpace", (const char **)&__s1))
          {
            if (__s1)
            {
              if (strcmp(__s1, "DeviceGray"))
              {
                goto LABEL_18;
              }
              DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
            }
            else
            {
              DeviceGraCGFloat y = 0;
            }
          }
          else
          {
            if (*(_DWORD *)(v5 + 40) != 2)
            {
              goto LABEL_18;
            }
            DeviceGraCGFloat y = 0;
            __s1 = 0;
          }
          *(void *)(v5 + 72) = DeviceGray;
          *(unsigned char *)(v5 + 84) = 0;
          if (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)a1, "Interpolate", value)) {
            *(unsigned char *)(v5 + 84) = value[0] != 0;
          }
          set_image_decode_array(v5, (CGPDFDictionaryRef)a1, 1, 0);
          if (v10)
          {
            *(void *)(v5 + 144) = 0;
            if (CGPDFDictionaryGetArray((CGPDFDictionaryRef)a1, "Matte", &array)
              && (uint64_t v11 = malloc_type_malloc(8 * a2, 0x566C45D1uLL),
                  __CFSetLastAllocationEventName(),
                  *(void *)(v5 + 144) = v11,
                  (CGPDFArrayGetNumbers((uint64_t)array, (uint64_t)v11, a2) & 1) == 0))
            {
            }
            else if (CGPDFDictionaryGetObject((CGPDFDictionaryRef)a1, "Mask", 0))
            {
            }
            else
            {
              if (!CGPDFDictionaryGetStream((CGPDFDictionaryRef)a1, "SMask", 0)) {
                return v5;
              }
            }
          }
          else
          {
          }
          goto LABEL_18;
        }
      }
      else
      {
      }
    }
LABEL_18:
    CFRelease((CFTypeRef)v5);
    return 0;
  }
  return v5;
}

uint64_t __CGPDFImageGetTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFImageGetTypeID_class);
  CGPDFImageGetTypeID_idouble d = result;
  return result;
}

uint64_t CGPDFImageFinalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 216);
  if (v2) {
    CFRelease(v2);
  }
  CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 96));
  CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 32));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 72));
  uint64_t v3 = *(const void **)(a1 + 112);
  if (v3) {
    CFRelease(v3);
  }
  int v4 = *(const void **)(a1 + 104);
  if (v4) {
    CFRelease(v4);
  }
  free(*(void **)(a1 + 128));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 144));

  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 152));
}

uint64_t CGPDFImageCreateInline(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  if (a2) {
    int v4 = *(CGPDFDictionary **)(a2 + 48);
  }
  else {
    int v4 = 0;
  }
  CGPDFBoolean value = 0;
  if (!CGPDFDictionaryGetBoolean(v4, "ImageMask", &value) && !CGPDFDictionaryGetBoolean(v4, "IM", &value))
  {
    CGPDFBoolean value = 0;
LABEL_24:
    if (CGPDFImageGetTypeID_onceToken != -1) {
      dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_852);
    }
    uint64_t cftype = pdf_create_cftype();
    uint64_t v6 = cftype;
    if (!cftype) {
      return v6;
    }
    pthread_mutex_init((pthread_mutex_t *)(cftype + 152), 0);
    *(void *)(v6 + 24) = v2;
    *(unsigned char *)(v6 + 16) = 0;
    uint64_t DataProvider = CGPDFStreamCreateDataProvider(v2, (int *)(v6 + 40));
    *(void *)(v6 + 32) = DataProvider;
    if (!DataProvider)
    {
LABEL_107:
      CFRelease((CFTypeRef)v6);
      return 0;
    }
    CGPDFInteger v42 = 0;
    CGPDFReal v43 = 0.0;
    CGPDFDictionaryRef dict = 0;
    CGPDFObjectRef v41 = 0;
    CGPDFBoolean v39 = 0;
    if (v2) {
      uint64_t v2 = (void *)v2[6];
    }
    if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v2, "Width", &v43) || (double v16 = v43, v43 < 1.0))
    {
      if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v2, "W", &v43) || (double v16 = v43, v43 < 1.0))
      {
        goto LABEL_107;
      }
    }
    *(void *)(v6 + 48) = (unint64_t)v16;
    if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v2, "Height", &v43) || (double v17 = v43, v43 < 1.0))
    {
      if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v2, "H", &v43) || (double v17 = v43, v43 < 1.0))
      {
        goto LABEL_107;
      }
    }
    *(void *)(v6 + 56) = (unint64_t)v17;
    if (*(_DWORD *)(v6 + 40) == 2)
    {
      CGPDFInteger v18 = 0;
    }
    else
    {
      if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "BitsPerComponent", &v42)
        && !CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "BPC", &v42))
      {
        goto LABEL_107;
      }
      CGPDFInteger v18 = v42;
      if ((unint64_t)v42 > 0x10 || ((1 << v42) & 0x10116) == 0)
      {
        return 0;
      }
    }
    *(void *)(v6 + 64) = v18;
    if (!CGPDFDictionaryGetObject((CGPDFDictionaryRef)v2, "ColorSpace", &v41)
      && !CGPDFDictionaryGetObject((CGPDFDictionaryRef)v2, "CS", &v41))
    {
      if (*(_DWORD *)(v6 + 40) != 2)
      {
        goto LABEL_107;
      }
      CGColorSpaceRef v21 = 0;
      CGPDFObjectRef v41 = 0;
      goto LABEL_60;
    }
    if (!v41)
    {
      CGColorSpaceRef v21 = 0;
      goto LABEL_60;
    }
    CGPDFStringRef v45 = 0;
    CGPDFInteger v46 = 0;
    CGPDFInteger v44 = 0;
    int v19 = *((_DWORD *)v41 + 2);
    if (v19 == 7)
    {
      uint64_t v22 = (CGPDFArray *)*((void *)v41 + 4);
      if (v22)
      {
        if (*((void *)v22 + 2) == 4 && CGPDFArrayGetName(*((CGPDFArrayRef *)v41 + 4), 0, (const char **)&v46))
        {
          uint64_t v23 = (const char *)v46;
          if ((!strcmp((const char *)v46, "Indexed") || !strcmp(v23, "I"))
            && CGPDFArrayGetName(v22, 1uLL, (const char **)&v46)
            && CGPDFArrayGetInteger(v22, 2uLL, &v44)
            && CGPDFArrayGetString(v22, 3uLL, &v45))
          {
            CGColorSpaceRef inline_device_color_space = create_inline_device_color_space((const char *)v46);
            if (inline_device_color_space)
            {
              unsigned int v25 = inline_device_color_space;
              CGPDFStringRef v26 = v45;
              CGPDFInteger v27 = *(void *)(*((void *)inline_device_color_space + 3) + 48)
                  + *(void *)(*((void *)inline_device_color_space + 3) + 48) * v44;
              if (v45)
              {
                if (*((void *)v45 + 3)) {
                  decrypt_string((uint64_t)v45);
                }
                uint64_t v28 = *((void *)v26 + 9);
              }
              else
              {
                uint64_t v28 = 0;
              }
              if (v27 == v28)
              {
                CGPDFStringRef v36 = v45;
                if (v45)
                {
                  if (*((void *)v45 + 3)) {
                    decrypt_string((uint64_t)v45);
                  }
                  Indexedouble d = CGColorSpaceCreateIndexed(v25, v44, (const unsigned __int8 *)v36 + 80);
                  CGColorSpaceRelease(v25);
                  *(void *)(v6 + 72) = Indexed;
                  if (Indexed) {
                    goto LABEL_61;
                  }
LABEL_105:
LABEL_106:
                  pdf_error(v10);
                  goto LABEL_107;
                }
              }
              CGColorSpaceRelease(v25);
            }
          }
        }
      }
    }
    else if (v19 == 5)
    {
      CGPDFInteger v46 = *((void *)v41 + 4);
      CGColorSpaceRef v20 = create_inline_device_color_space((const char *)v46);
      if (v20)
      {
        CGColorSpaceRef v21 = v20;
LABEL_60:
        *(void *)(v6 + 72) = v21;
LABEL_61:
        set_image_rendering_intent(v6, (CGPDFDictionaryRef)v2);
        *(unsigned char *)(v6 + 84) = (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)v2, "Interpolate", &v39)
                            || CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)v2, "I", &v39))
                           && v39 != 0;
        uint64_t v30 = *(void *)(v6 + 72);
        if (v30) {
          CGPDFInteger v31 = *(void *)(*(void *)(v30 + 24) + 48);
        }
        else {
          CGPDFInteger v31 = 0;
        }
        CGPDFInteger v42 = v31;
        set_image_decode_array(v6, (CGPDFDictionaryRef)v2, v31, 1);
        if ((v32 & 1) == 0)
        {
          goto LABEL_107;
        }
        *(_DWORD *)(v6 + 88) = v42 == 3;
        if (*(_DWORD *)(v6 + 40) == 1
          && (CGPDFDictionaryGetDictionary((CGPDFDictionaryRef)v2, "DecodeParms", &dict)
           || CGPDFDictionaryGetDictionary((CGPDFDictionaryRef)v2, "DP", &dict))
          && dict
          && CGPDFDictionaryGetInteger(dict, "ColorTransform", &v42))
        {
          if ((unint64_t)v42 > 1) {
          else
          }
            *(_DWORD *)(v6 + 88) = (int)v43;
        }
        return v6;
      }
      if (a1)
      {
        uint64_t v33 = (const char *)v46;
        while (1)
        {
          CGColorSpaceRef ColorSpace = CGPDFResourcesGetColorSpace(*(void *)(a1 + 32), v33);
          if (ColorSpace) {
            break;
          }
          a1 = *(void *)(a1 + 40);
          if (!a1) {
            goto LABEL_104;
          }
        }
        CGColorSpaceRef v21 = ColorSpace;
        CFRetain(ColorSpace);
        goto LABEL_60;
      }
    }
LABEL_104:
    *(void *)(v6 + 72) = 0;
    goto LABEL_105;
  }
  if (!value) {
    goto LABEL_24;
  }
  if (CGPDFImageGetTypeID_onceToken != -1) {
    dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_852);
  }
  uint64_t v5 = pdf_create_cftype();
  uint64_t v6 = v5;
  if (!v5) {
    return v6;
  }
  pthread_mutex_init((pthread_mutex_t *)(v5 + 152), 0);
  *(void *)(v6 + 24) = v2;
  *(unsigned char *)(v6 + 16) = 1;
  uint64_t v7 = CGPDFStreamCreateDataProvider(v2, (int *)(v6 + 40));
  *(void *)(v6 + 32) = v7;
  if (!v7) {
    goto LABEL_107;
  }
  CGPDFInteger v46 = 0;
  LOBYTE(v45) = 0;
  if (v2) {
    uint64_t v2 = (void *)v2[6];
  }
  if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "Width", &v46) || (CGPDFInteger v8 = v46, v46 <= 0))
  {
    BOOL Integer = CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "W", &v46);
    if (!Integer) {
      goto LABEL_106;
    }
    CGPDFInteger v8 = v46;
    if (v46 < 1) {
      goto LABEL_106;
    }
  }
  *(void *)(v6 + 48) = v8;
  if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "Height", &v46) || (CGPDFInteger v11 = v46, v46 <= 0))
  {
    BOOL v12 = CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "H", &v46);
    if (!v12) {
      goto LABEL_106;
    }
    CGPDFInteger v11 = v46;
    if (v46 < 1) {
      goto LABEL_106;
    }
  }
  *(void *)(v6 + 56) = v11;
  if (*(_DWORD *)(v6 + 40) == 2)
  {
    CGPDFInteger v13 = 0;
    goto LABEL_79;
  }
  if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "BitsPerComponent", &v46)
    && !CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "BPC", &v46))
  {
    CGPDFInteger v13 = 1;
    CGPDFInteger v46 = 1;
    goto LABEL_79;
  }
  CGPDFInteger v13 = v46;
  if (v46 != 1)
  {
    goto LABEL_107;
  }
LABEL_79:
  *(void *)(v6 + 64) = v13;
  *(unsigned char *)(v6 + 84) = (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)v2, "Interpolate", (CGPDFBoolean *)&v45)
                      || CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)v2, "I", (CGPDFBoolean *)&v45))
                     && (_BYTE)v45 != 0;
  set_image_decode_array(v6, (CGPDFDictionaryRef)v2, 1, 1);
  if ((v29 & 1) == 0)
  {
    goto LABEL_107;
  }
  return v6;
}

CGColorSpaceRef create_inline_device_color_space(const char *a1)
{
  if (!strcmp(a1, "G") || !strcmp(a1, "DeviceGray"))
  {
    return CGColorSpaceCreateDeviceGray();
  }
  else if (!strcmp(a1, "RGB") || !strcmp(a1, "DeviceRGB"))
  {
    return CGColorSpaceCreateDeviceRGB();
  }
  else if (!strcmp(a1, "CMYK") || !strcmp(a1, "DeviceCMYK"))
  {
    return CGColorSpaceCreateDeviceCMYK();
  }
  else
  {
    return 0;
  }
}

CGImageRef CGPDFImageCreateImage(CGImage *a1, uint64_t a2)
{
  return CGPDFImageCreateImageForRenderingSize(a1, a2, 0.0, 0.0);
}

CGImageRef CGPDFImageCreateImageForRenderingSize(CGImageRef result, uint64_t a2, double a3, double a4)
{
  if (result)
  {
    uint64_t v7 = (uint64_t)result;
    CGPDFInteger v8 = (pthread_mutex_t *)((char *)result + 152);
    pthread_mutex_lock((pthread_mutex_t *)((char *)result + 152));
    if (a3 == 0.0 && a4 == 0.0) {
      goto LABEL_4;
    }
    double v10 = (double)*(unint64_t *)(v7 + 48) / a3;
    if (v10 >= (double)*(unint64_t *)(v7 + 56) / a4) {
      double v10 = (double)*(unint64_t *)(v7 + 56) / a4;
    }
    if (v10 >= 16.0)
    {
      int v9 = 16;
    }
    else if (v10 >= 8.0)
    {
      int v9 = 8;
    }
    else if (v10 >= 4.0)
    {
      int v9 = 4;
    }
    else
    {
      if (v10 < 2.0)
      {
LABEL_4:
        int v9 = 1;
        goto LABEL_15;
      }
      int v9 = 2;
    }
LABEL_15:
    if (!*(unsigned char *)(v7 + 16))
    {
      ResolvedCGColorSpaceRef ColorSpace = (CGColorSpace *)CGPDFContentStreamCreateResolvedColorSpace(a2, *(void **)(v7 + 72));
      if (!CGColorSpaceEqualToColorSpace((uint64_t)ResolvedColorSpace, *(void *)(v7 + 72)))
      {
        CGImageRef image_for_image = create_image_for_image(v7, ResolvedColorSpace, v9);
        CGColorSpaceRelease(ResolvedColorSpace);
        pthread_mutex_unlock(v8);
        return image_for_image;
      }
      CGColorSpaceRelease(ResolvedColorSpace);
    }
    uint64_t v12 = *(void *)(v7 + 216);
    if (!v12) {
      goto LABEL_40;
    }
    uint64_t v13 = *(void *)(v12 + 216);
    if (v13)
    {
      PropertCGFloat y = (const __CFNumber *)CGPropertiesGetProperty(v13, @"com.apple.CoreGraphics.SubsampleFactor");
      if (Property)
      {
        int valuePtr = 0;
        CFNumberGetValue(Property, kCFNumberIntType, &valuePtr);
        if (v9 < valuePtr)
        {
          pdf_log("CGPDFImage(%p): subsample_factor MISMATCH. existing = %d, requestedouble d = %d\n", (const void *)v7, valuePtr, v9);
          CGPDFInteger v15 = *(const void **)(v7 + 216);
          if (v15) {
            CFRelease(v15);
          }
          *(void *)(v7 + 216) = 0;
        }
      }
    }
    double v16 = *(const void **)(v7 + 216);
    if (!v16)
    {
LABEL_40:
      if (*(unsigned char *)(v7 + 16))
      {
        if (*(_DWORD *)(v7 + 40))
        {
          *(void *)(v7 + 216) = 0;
LABEL_37:
          pthread_mutex_unlock(v8);
          return *(CGImageRef *)(v7 + 216);
        }
        CGPDFInteger v18 = mask_create(*(void *)(v7 + 48), *(void *)(v7 + 56), *(void *)(v7 + 64), *(void *)(v7 + 64), (unint64_t)(*(void *)(v7 + 48) * *(void *)(v7 + 64) + 7) >> 3, *(CGDataProviderRef *)(v7 + 32), *(double **)(v7 + 136), *(unsigned __int8 *)(v7 + 84), 4);
      }
      else
      {
        pdf_log("CGPDFImage(%p): Creating image with subsample_factor = %d\n", (const void *)v7, v9);
        CGPDFInteger v18 = create_image_for_image(v7, *(CGColorSpace **)(v7 + 72), v9);
      }
      *(void *)(v7 + 216) = v18;
      if (!v18) {
        goto LABEL_37;
      }
      int v21 = *(void *)(v7 + 48) / *((void *)v18 + 5);
      CFNumberRef v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v21);
      if (v19)
      {
        CFNumberRef v20 = v19;
        CGImageSetProperty(*(void *)(v7 + 216), @"com.apple.CoreGraphics.SubsampleFactor", v19);
        CFRelease(v20);
      }
      double v16 = *(const void **)(v7 + 216);
      if (!v16) {
        goto LABEL_37;
      }
    }
    CFRetain(v16);
    goto LABEL_37;
  }
  return result;
}

CGImageRef create_image_for_image(uint64_t a1, CGColorSpace *a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 == 2)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(double **)(a1 + 136);
    int v15 = *(unsigned __int8 *)(a1 + 84);
    int v16 = *(_DWORD *)(a1 + 80);
    int v17 = *(unsigned __int8 *)(a1 + 120);
    if (CGImageCreateWithJPEG2000DataProvider_predicate != -1) {
      dispatch_once(&CGImageCreateWithJPEG2000DataProvider_predicate, &__block_literal_global_173_5217);
    }
    CopyWithCGColorSpaceRef ColorSpace = (CGImageRef)CGImageCreateWithJPEG2000DataProvider_f(v13, 0);
    if (!CopyWithColorSpace) {
      return CopyWithColorSpace;
    }
    if (CGImageCreateWithJPEG2000DataProvider_predicate_175 != -1) {
      dispatch_once(&CGImageCreateWithJPEG2000DataProvider_predicate_175, &__block_literal_global_178);
    }
    CFNumberRef v19 = (const void *)CGImageCreateWithJPEG2000DataProvider_f_174(CopyWithColorSpace);
    if (!v19 || !CFEqual(v19, @"public.jpeg-2000"))
    {
      uint64_t v36 = 0;
LABEL_101:
      CFRelease(CopyWithColorSpace);
      return (CGImageRef)v36;
    }
    CFMutableSetRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v21 = Mutable;
    if (Mutable)
    {
      if (!v17) {
        CFDictionaryAddValue(Mutable, @"kCGImageSourceSkipAlpha", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      CFDictionaryAddValue(v21, @"kCGImageSourceShouldCache", (const void *)*MEMORY[0x1E4F1CFC8]);
    }
    if (CGImageCreateWithJPEG2000DataProvider_predicate_186 != -1) {
      dispatch_once(&CGImageCreateWithJPEG2000DataProvider_predicate_186, &__block_literal_global_189);
    }
    CGImageRef Image = (CGImageRef)CGImageCreateWithJPEG2000DataProvider_f_185(CopyWithColorSpace, 0, v21);
    if (v21) {
      CFRelease(v21);
    }
    CFRelease(CopyWithColorSpace);
    if (!Image) {
      return 0;
    }
    *((_DWORD *)Image + 9) = ((v15 != 0) << 24) | (v16 << 8) | *((_DWORD *)Image + 9) & 0xFEFF00FF;
    if (a2)
    {
      CopyWithCGColorSpaceRef ColorSpace = CGImageCreateCopyWithColorSpace(Image, a2);
      CFRelease(Image);
      if (!CopyWithColorSpace) {
        return CopyWithColorSpace;
      }
      unint64_t v23 = *(void *)(*((void *)a2 + 3) + 48);
      CGImageRef Image = CopyWithColorSpace;
    }
    else
    {
      unint64_t v23 = 0;
    }
    CGPDFInteger v42 = (void **)Image;
    CGPDFReal v43 = v14;
    goto LABEL_75;
  }
  if (v5 == 1)
  {
    uint64_t v25 = *(void *)(a1 + 32);
    CGPDFStringRef v26 = *(double **)(a1 + 136);
    int v27 = *(unsigned __int8 *)(a1 + 84);
    int v28 = *(_DWORD *)(a1 + 80);
    int v29 = *(_DWORD *)(a1 + 88);
    if (CGImageCreateWithJPEGDataProvider3_predicate != -1) {
      dispatch_once(&CGImageCreateWithJPEGDataProvider3_predicate, &__block_literal_global_121);
    }
    uint64_t v30 = CGImageCreateWithJPEGDataProvider3_f(v25, 0);
    if (!v30) {
      return 0;
    }
    CGPDFInteger v31 = (const void *)v30;
    if (CGImageCreateWithJPEGDataProvider3_predicate_123 != -1) {
      dispatch_once(&CGImageCreateWithJPEGDataProvider3_predicate_123, &__block_literal_global_126);
    }
    char v32 = (const void *)CGImageCreateWithJPEGDataProvider3_f_122(v31);
    if (v32 && CFEqual(v32, @"public.jpeg"))
    {
      uint64_t v33 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v34 = v33;
      if (v33)
      {
        if (*MEMORY[0x1E4F1CFC8]) {
          CFDictionarySetValue(v33, @"kCGImageSourceShouldCache", (const void *)*MEMORY[0x1E4F1CFC8]);
        }
        if ((v29 & 0x80000000) == 0)
        {
          CGCFDictionarySetInteger(v34, @"kCGImageSourceColorTransform", v29);
          if (a2) {
            CFDictionarySetValue(v34, @"kCGImageSourceColorTransformSpace", a2);
          }
        }
        if (a3 >= 2) {
          CGCFDictionarySetInteger(v34, @"kCGImageSourceSubsampleFactor", a3);
        }
      }
      if (CGImageCreateWithJPEGDataProvider3_predicate_167 != -1) {
        dispatch_once(&CGImageCreateWithJPEGDataProvider3_predicate_167, &__block_literal_global_170_5187);
      }
      uint64_t v35 = CGImageCreateWithJPEGDataProvider3_f_166(v31, 0, v34);
      if (v35)
      {
        CGImageRef Image = (CGImageRef)v35;
        if (v34) {
          CFRelease(v34);
        }
        CFRelease(v31);
        *((_DWORD *)Image + 9) = ((v27 != 0) << 24) | (v28 << 8) | *((_DWORD *)Image + 9) & 0xFEFF00FF;
        if (a2)
        {
          cgimage_set_decode_array((void **)Image, v26, *(void *)(*((void *)a2 + 3) + 48));
          CGPDFInteger v31 = Image;
          CGImageRef Image = CGImageCreateCopyWithColorSpace(Image, a2);
LABEL_54:
          CFRelease(v31);
          goto LABEL_69;
        }
        CGPDFInteger v42 = (void **)Image;
        CGPDFReal v43 = v26;
        unint64_t v23 = 0;
LABEL_75:
        cgimage_set_decode_array(v42, v43, v23);
        goto LABEL_76;
      }
      if (v34) {
        CFRelease(v34);
      }
    }
    CGImageRef Image = 0;
    goto LABEL_54;
  }
  if (v5) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v7 = *(void *)(v6 + 48);
  if (!v7) {
    return 0;
  }
  size_t v8 = *(void *)(a1 + 64) * v7;
  unint64_t v9 = *(void *)(a1 + 48);
  if (v9 >= 0xFFFFFFFFFFFFFFF7 / v8) {
    return 0;
  }
  unint64_t v10 = v8 * v9 + 7;
  CGPDFInteger v11 = *(void **)(a1 + 72);
  if (v11)
  {
    BOOL v12 = CGColorSpaceGetType(v11) == 6;
    uint64_t v6 = *((void *)a2 + 3);
  }
  else
  {
    BOOL v12 = 0;
  }
  size_t v37 = v10 >> 3;
  BOOL v39 = (*(_DWORD *)(v6 + 28) - 5) > 1
     || (uint64_t v38 = **(void **)(v6 + 96)) == 0
     || *(_DWORD *)(*(void *)(v38 + 24) + 28) == 0;
  if (v7 != 1 || v8 != 1) {
    BOOL v12 = 1;
  }
  if (v12 || !v39 || *(void *)(a1 + 128))
  {
    CGImageRef Image = CGImageCreate(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v8, v37, a2, 0, *(CGDataProviderRef *)(a1 + 32), *(const CGFloat **)(a1 + 136), *(unsigned char *)(a1 + 84), (CGColorRenderingIntent)*(_DWORD *)(a1 + 80));
  }
  else
  {
    pthread_mutex_lock(&imageCacheLock);
    uint64_t v61 = *(const void **)(a1 + 216);
    if (v61)
    {
      CFRetain(v61);
      CGImageRef Image = *(CGImageRef *)(a1 + 216);
    }
    else
    {
      uint64_t v62 = CGImageCreate(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), 1uLL, v37, a2, 0, *(CGDataProviderRef *)(a1 + 32), *(const CGFloat **)(a1 + 136), *(unsigned char *)(a1 + 84), (CGColorRenderingIntent)*(_DWORD *)(a1 + 80));
      uint64_t v63 = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericGrayGamma2_2");
      uint64_t v64 = CGBitmapContextCreateWithData(0, *(void *)(a1 + 48), *(void *)(a1 + 56), 8uLL, 0, v63, 0, 0, 0);
      v65.size.CGFloat width = (double)*(unint64_t *)(a1 + 48);
      v65.size.CGFloat height = (double)*(unint64_t *)(a1 + 56);
      v65.origin.CGFloat x = 0.0;
      v65.origin.CGFloat y = 0.0;
      CGContextDrawImage(v64, v65, v62);
      if (v62) {
        CFRelease(v62);
      }
      CGImageRef Image = CGBitmapContextCreateImage(v64);
      if (v64) {
        CFRelease(v64);
      }
      CGColorSpaceRelease(v63);
      CGImageSetProperty((uint64_t)Image, @"com.apple.CoreGraphics.Is1Bit1ChannelImage", (const void *)*MEMORY[0x1E4F1CFD0]);
      CGImageSetProperty((uint64_t)Image, @"com.apple.CoreGraphics.Is1Bit1ChannelImageColorSpace", a2);
    }
    pthread_mutex_unlock(&imageCacheLock);
  }
LABEL_69:
  if (!Image) {
    return 0;
  }
LABEL_76:
  if (*(unsigned char *)(a1 + 120) && *(_DWORD *)(a1 + 40) == 2)
  {
    if ((*((unsigned char *)Image + 39) & 4) != 0)
    {
      CGPDFInteger v44 = *(const void **)(a1 + 112);
      if (v44) {
        CFRelease(v44);
      }
      *(void *)(a1 + 112) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 120) = 0;
    }
  }
  CGPDFStringRef v45 = *(const CGFloat **)(a1 + 128);
  if (v45)
  {
    CopyWithCGColorSpaceRef ColorSpace = CGImageCreateWithMaskingColors(Image, v45);
    goto LABEL_96;
  }
  uint64_t v46 = *(void *)(a1 + 112);
  if (v46)
  {
    uint64_t ImageForRenderingSize = CGPDFImageCreateImageForRenderingSize(v46, 0, 0.0, 0.0);
    if (ImageForRenderingSize)
    {
      unint64_t v48 = (const void *)ImageForRenderingSize;
      if (is_image_alpha_opaque(ImageForRenderingSize))
      {
        CopyWithCGColorSpaceRef ColorSpace = 0;
      }
      else
      {
        CGImageRef v50 = CGImageCreateWithMaskAndMatte((uint64_t)Image, (uint64_t)v48, *(uint64_t **)(a1 + 144));
        CopyWithCGColorSpaceRef ColorSpace = v50;
        if (v50)
        {
          CopyByApplyingSoftMasuint64_t k = CGImageCreateCopyByApplyingSoftMask((uint64_t)v50, v51, v52, v53, v54, v55, v56, v57);
          if (CopyByApplyingSoftMask)
          {
            uint64_t v59 = CopyByApplyingSoftMask;
            CFRelease(CopyWithColorSpace);
            CopyWithCGColorSpaceRef ColorSpace = v59;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_98:
    CopyWithCGColorSpaceRef ColorSpace = Image;
    goto LABEL_99;
  }
  uint64_t v49 = *(void *)(a1 + 104);
  if (!v49) {
    goto LABEL_98;
  }
  unint64_t v48 = (const void *)CGPDFImageCreateImageForRenderingSize(v49, 0, 0.0, 0.0);
  CopyWithCGColorSpaceRef ColorSpace = CGImageCreateWithMaskAndMatte((uint64_t)Image, (uint64_t)v48, 0);
  if (v48) {
LABEL_95:
  }
    CFRelease(v48);
LABEL_96:
  if (!CopyWithColorSpace) {
    goto LABEL_98;
  }
  CFRelease(Image);
LABEL_99:
  uint64_t v60 = *(CGDataProvider **)(a1 + 96);
  if (v60)
  {
    uint64_t v36 = CGImageCreateWithEPSDataProvider(v60, (uint64_t)CopyWithColorSpace);
    if (v36) {
      goto LABEL_101;
    }
  }
  return CopyWithColorSpace;
}

void CGContextDrawRadialGradient(CGContextRef c, CGGradientRef gradient, CGPoint startCenter, CGFloat startRadius, CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      if (gradient)
      {
        uint64_t v14 = *((void *)c + 5);
        if (v14)
        {
          double y = endCenter.y;
          double x = endCenter.x;
          double v20 = startCenter.y;
          double v21 = startCenter.x;
          uint64_t v22 = *(unsigned int (**)(__n128, __n128, double, __n128, __n128, double))(v14 + 112);
          if (!v22
            || v22((__n128)startCenter, *(__n128 *)&startCenter.y, startRadius, (__n128)endCenter, *(__n128 *)&endCenter.y, endRadius) == 1006)
          {
            unint64_t v23 = (void *)*((void *)gradient + 3);
            CGFunctionRef Function = CGGradientGetFunction((uint64_t)gradient, (uint64_t)gradient, *(uint64_t *)&options, v7, v8, v9, v10, v11);
            CGPDFStringRef v26 = Function ? (double *)*((void *)Function + 5) : 0;
            RadialInternal = (CGShading *)CGShadingCreateRadialInternal(v23, 0, 0, v26, Function, options & 1, (options >> 1) & 1, v25, v21, v20, startRadius, x, y, endRadius);
            CGContextDrawShading(c, RadialInternal);
            if (RadialInternal)
            {
              CFRelease(RadialInternal);
            }
          }
        }
      }
      return;
    }
    CGContextRef v27 = c;
  }
  else
  {
    CGContextRef v27 = 0;
  }

  handle_invalid_context((char)"CGContextDrawRadialGradient", (uint64_t)v27, *(uint64_t *)&options, v7, v8, v9, v10, v11);
}

void CGContextDrawConicGradient(CGContextRef c, CGGradientRef gradient, CGPoint center, CGFloat angle)
{
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      if (gradient)
      {
        uint64_t v12 = *((void *)c + 5);
        if (v12)
        {
          double y = center.y;
          double x = center.x;
          int v16 = *(unsigned int (**)(__n128, __n128, double))(v12 + 120);
          if (!v16 || v16((__n128)center, *(__n128 *)&center.y, angle) == 1006)
          {
            int v17 = (void *)*((void *)gradient + 3);
            CGFunctionRef Function = CGGradientGetFunction((uint64_t)gradient, (uint64_t)gradient, v4, v5, v6, v7, v8, v9);
            Conidouble c = (CGShading *)CGShadingCreateConic(v17, Function, x, y, angle, v19, v20, v21, v22, v23, v24);
            CGContextDrawShading(c, Conic);
            if (Conic)
            {
              CFRelease(Conic);
            }
          }
        }
      }
      return;
    }
    CGContextRef v26 = c;
  }
  else
  {
    CGContextRef v26 = 0;
  }

  handle_invalid_context((char)"CGContextDrawConicGradient", (uint64_t)v26, v4, v5, v6, v7, v8, v9);
}

char *CGSScanconverterAddLineToPoint(char *result, double a2, double a3)
{
  if (fabs(a2) != INFINITY && fabs(a3) != INFINITY)
  {
    uint64_t v5 = (double *)result;
    double v6 = *((double *)result + 1);
    double v7 = *((double *)result + 2);
    if (v6 != a2 || v7 != a3)
    {
      if (v6 >= a2)
      {
        if (v6 <= a2)
        {
LABEL_16:
          v5[1] = a2;
          v5[2] = a3;
          double v14 = fmin(v5[6], a3);
          v5[5] = fmin(v5[5], a2);
          v5[6] = v14;
          double v15 = fmax(v5[8], a3);
          v5[7] = fmax(v5[7], a2);
          v5[8] = v15;
          return result;
        }
        float v9 = 0.0;
        if (v6 - a2 >= 0.00001) {
          float v9 = (a3 - v7) / (a2 - v6);
        }
        float v10 = a2;
        float v11 = v6;
        float v12 = a3;
        float v13 = -1.0;
      }
      else
      {
        float v9 = 0.0;
        if (a2 - v6 >= 0.00001) {
          float v9 = (a3 - v7) / (a2 - v6);
        }
        float v10 = v6;
        float v11 = a2;
        float v12 = v7;
        float v13 = 1.0;
      }
      uint64_t result = add_quadratic((char **)result, v10, v11, v13, 0.0, v9, v12);
      goto LABEL_16;
    }
  }
  return result;
}

char *add_quadratic(char **a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  double v14 = a1[10];
  unint64_t v15 = (unint64_t)a1[11];
  unint64_t v16 = (unint64_t)(v14 + 1);
  uint64_t result = *a1;
  if (v15 < (unint64_t)(v14 + 1))
  {
    if (2 * v15 <= v16) {
      uint64_t v18 = (uint64_t)(v14 + 1);
    }
    else {
      uint64_t v18 = 2 * v15;
    }
    uint64_t result = (char *)malloc_type_realloc(result, 24 * v18, 0x1000040504FFAC1uLL);
    *a1 = result;
    if (!result) {
      _CGHandleAssert("grow", 98, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGSScanConverter.c", "sc->quadratics != NULL", "quadratics missing", v19, v20, v21, v23);
    }
    a1[11] = (char *)v18;
    double v14 = a1[10];
    unint64_t v16 = (unint64_t)(v14 + 1);
  }
  a1[10] = (char *)v16;
  uint64_t v22 = (float *)&result[24 * (void)v14];
  *uint64_t v22 = a2;
  v22[1] = a3;
  v22[2] = a4;
  v22[3] = a5;
  v22[4] = a6;
  v22[5] = a7;
  return result;
}

char *approximateMonotonicCube(char *result, int a2, double a3, double a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, double a9, double a10)
{
  if (a2 <= 500)
  {
    double v10 = a10;
    double v12 = a8.n128_f64[0];
    double v13 = a7.n128_f64[0];
    double v14 = a6.n128_f64[0];
    double v15 = a5.n128_f64[0];
    uint64_t v18 = result;
    double v108 = a9 * a9;
    uint64_t v19 = (a2 + 1);
    double v20 = 0.5;
    double v21 = 2.0;
    double v22 = 0.25;
    double v23 = 3.0;
    double v24 = -3.0;
    double v25 = 4.0;
    double v26 = 12.0;
    double v27 = 8.0;
    double v28 = 6.0;
    while (1)
    {
      float v29 = *((float *)v18 + 18);
      double v30 = (float)(v29 * v29);
      BOOL v31 = (a4 + v14 * -2.0 + v12) * (a4 + v14 * -2.0 + v12) + (a3 + v15 * -2.0 + v13) * (a3 + v15 * -2.0 + v13) > v30
         || (v14 + v12 * -2.0 + v10) * (v14 + v12 * -2.0 + v10) + (v15 + v13 * -2.0 + a9) * (v15 + v13 * -2.0 + a9) > v30;
      if (!v31) {
        break;
      }
      if (vabdd_f64(a9, a3) + vabdd_f64(v10, a4) <= 60.0)
      {
        double v46 = 1.0 / (a3 - a9);
        double v117 = v14 + v12 * v21;
        double v115 = v12 + v10;
        double v47 = v46
            * (v46
             * (v46
              * ((a9 * (v117 + a4 * v24)
                - (v12 + v10 + a4 * -2.0) * v15
                - a3 * (v12 + v14 * v21 + v10 * v24)
                + v13 * (a4 + v14 + v10 * -2.0))
               * 0.9)));
        double v48 = v46 * (a4 + v47 * (a9 * a9 - a3 * a3) - v10);
        double v111 = v48 + v47 * a3;
        double v49 = (v15 * v25 + a3 * v25 + v13) * 0.111111111;
        double v112 = v15 * v26;
        double v50 = (v15 * v26 + a3 * v27 + v13 * v28 + a9) * 0.037037037;
        double v51 = (v14 * v25 + a4 * v25 + v12) * 0.111111111;
        double v52 = v14 * v26;
        double v53 = (v14 * v26 + a4 * v27 + v12 * 6.0 + v10) * 0.037037037;
        double v109 = a4 - a3 * v111;
        double v55 = v47 * -0.333333333;
        double v110 = v48;
        double v56 = v48 * -0.5;
        double v57 = v29;
        if (fabs(((v50 * (a4 + v51 * 6.0 + v53 * 10.0 + (v14 + a4 * v21) * 0.333333333 * v23)- ((v14 + a4 * v21) * 0.333333333 * 6.0 + a4 * 10.0 + v51 * v23 + v53) * a3+ (v15 + a3 * v21) * 0.333333333 * v23 * (-(v51 - a4 * v21) - v53)+ v49 * -3.0 * (-((v14 + a4 * v21) * 0.333333333 - v53 * v21) - a4))* 0.05+ v47 * -0.333333333 * (a3 * -(a3 * a3) + v50 * v50 * v50)+ v48 * -0.5 * (v50 * v50 - a3 * a3)- v109 * (v50 - a3))/ sqrt((v53 - a4) * (v53 - a4) + (v50 - a3) * (v50 - a3))) <= v57)
        {
          double v58 = (a3 + v15 * 6.0 + v13 * 12.0 + a9 * 8.0) * 0.037037037;
          double v59 = (v14 + v12 * 4.0 + v10 * 4.0) * 0.111111111;
          double v60 = (a4 + v14 * 6.0 + v12 * 12.0 + v10 * 8.0) * 0.037037037;
          double v61 = (v12 + v10 * v21) * 0.333333333;
          double v62 = a9 * (v60 + v61 * 6.0 + v10 * 10.0 + v59 * v23) - v58 * (v59 * 6.0 + v60 * 10.0 + v61 * 3.0 + v10);
          double v23 = 3.0;
          double v22 = 0.25;
          double v63 = v62 + (v15 + v13 * 4.0 + a9 * 4.0) * 0.111111111 * 3.0 * (-(v61 - v60 * 2.0) - v10);
          double v21 = 2.0;
          double v64 = v63 + (v13 + a9 * 2.0) * 0.333333333 * -3.0 * (-(v59 - v10 * 2.0) - v60);
          double v65 = (v52 + a4 * 4.0 + v12 * 9.0 + v10 * 2.0) * 0.037037037;
          double v66 = (v14 * 9.0 + a4 * 2.0 + v12 * 12.0 + v10 * 4.0) * 0.037037037;
          double v20 = 0.5;
          double v67 = -(a4 + -a3 * v111);
          double v54 = v50 * v50;
          BOOL v31 = fabs(((v58 * (v53 + v66 * 6.0 + v60 * 10.0 + v65 * 3.0)- v50 * (v60 + v65 * 6.0 + v53 * 10.0 + v66 * 3.0)+ (v112 + a3 * 4.0 + v13 * 9.0 + a9 * 2.0) * 0.037037037 * 3.0 * (-(v66 - v53 * 2.0) - v60)+ (v15 * 9.0 + a3 * 2.0 + v13 * 12.0 + a9 * 4.0) * 0.037037037 * -3.0 * (-(v65 - v60 * 2.0) - v53))* 0.05+ v55 * (v58 * v58 * v58 - v54 * v50)+ v56 * -(v54 - v58 * v58)+ v67 * (v58 - v50))/ sqrt((v60 - v53) * (v60 - v53) + (v58 - v50) * (v58 - v50))) <= v57;
          double v68 = fabs((v64 * 0.05 + v55 * (v108 * a9 - v58 * v58 * v58) + v56 * -(v58 * v58 - a9 * a9) + v67 * (a9 - v58))/ sqrt((v10 - v60) * (v10 - v60) + (a9 - v58) * (a9 - v58)));
          if (v31 && v68 <= v57)
          {
            double v85 = a9 - a3;
            double v86 = v56 / v47;
            BOOL v87 = v56 / v47 > a3 && v86 < a9;
            if (v87 || (v86 > a9 ? (BOOL v88 = v86 < a3) : (BOOL v88 = 0), v89 = a4, v88)) {
              double v89 = v109 + v86 * 0.5 * v110;
            }
            double v90 = fmin(a3, a9);
            double v91 = fmax(a3, a9);
            double v92 = fmin(fmin(a4, v10), v89);
            double v93 = fmax(fmax(a4, v10), v89);
            BOOL v96 = v85 > 0.0;
            BOOL v87 = v85 < 0.0;
            double v97 = 0.0;
            if (v87) {
              double v97 = -1.0;
            }
            if (v96) {
              double v97 = 1.0;
            }
            float v98 = v97;
            float v99 = v47;
            float v100 = v110 + (v47 + v47) * v90;
            float v101 = v109 + v90 * v47 * v90 + v110 * v90;
            float v94 = v90;
            float v95 = v91;
            uint64_t result = add_quadratic((char **)v18, v94, v95, v98, v99, v100, v101);
            double v102 = *((double *)v18 + 8);
            unsigned int v81 = (double *)(v18 + 64);
            float v103 = fmin(*(v81 - 3), v90);
            float v104 = fmin(*(v81 - 2), v92);
            *(v81 - 3) = v103;
            *(v81 - 2) = v104;
            float v105 = fmax(*(v81 - 1), v91);
            *(v81 - 1) = v105;
            double v84 = fmax(v102, v93);
            goto LABEL_89;
          }
        }
        a5.n128_f64[0] = (a3 + v15) * v20;
        a7.n128_f64[0] = (a3 + v15 * v21 + v13) * v22;
        double v32 = (a3 + v15 * v23 + v13 * v23 + a9) * 0.125;
        a6.n128_f64[0] = (a4 + v14) * v20;
        a8.n128_f64[0] = (a4 + v14 * v21 + v12) * v22;
        double v33 = (a4 + v14 * v23 + v12 * v23 + v10) * 0.125;
        if (v33 != v10
          || v32 != a9
          || a5.n128_f64[0] != v15
          || a6.n128_f64[0] != v14
          || a7.n128_f64[0] != v13
          || a8.n128_f64[0] != v12)
        {
          double v70 = (a3 + v15 * v23 + v13 * v23 + a9) * 0.125;
          double v114 = v33;
          uint64_t result = (char *)approximateMonotonicCube(v18, v19, a3, a4, a5, a6, a7, a8);
          double v33 = v114;
          double v32 = v70;
          double v10 = a10;
          double v23 = 3.0;
          double v22 = 0.25;
          double v21 = 2.0;
          double v20 = 0.5;
        }
        double v39 = (v15 + v13 * v21 + a9) * v22;
        double v40 = (v13 + a9) * v20;
        double v41 = (v117 + v10) * v22;
        double v42 = v115 * v20;
        double v24 = -3.0;
        if (v115 * v20 == v12 && v40 == v13)
        {
          double v25 = 4.0;
          double v26 = 12.0;
          double v27 = 8.0;
          double v28 = 6.0;
          if (v41 == v14 && v39 == v15 && v32 == a3 && v33 == a4) {
            return result;
          }
        }
        else
        {
          double v25 = 4.0;
          double v26 = 12.0;
          double v27 = 8.0;
          double v28 = 6.0;
        }
      }
      else
      {
        a5.n128_f64[0] = (a3 + v15) * v20;
        a7.n128_f64[0] = (a3 + v15 * v21 + v13) * v22;
        double v32 = (a3 + v15 * v23 + v13 * v23 + a9) * 0.125;
        a6.n128_f64[0] = (a4 + v14) * v20;
        a8.n128_f64[0] = (a4 + v14 * v21 + v12) * v22;
        double v33 = (a4 + v14 * v23 + v12 * v23 + v10) * 0.125;
        if (v33 != v10
          || v32 != a9
          || a5.n128_f64[0] != v15
          || a6.n128_f64[0] != v14
          || a7.n128_f64[0] != v13
          || a8.n128_f64[0] != v12)
        {
          double v116 = (a3 + v15 * v23 + v13 * v23 + a9) * 0.125;
          double v113 = (a4 + v14 * v23 + v12 * v23 + v10) * 0.125;
          uint64_t result = (char *)approximateMonotonicCube(v18, v19, a3, a4, a5, a6, a7, a8);
          double v33 = v113;
          double v32 = v116;
          double v28 = 6.0;
          double v27 = 8.0;
          double v26 = 12.0;
          double v25 = 4.0;
          double v24 = -3.0;
          double v23 = 3.0;
          double v22 = 0.25;
          double v21 = 2.0;
          double v20 = 0.5;
        }
        double v39 = (v15 + v13 * v21 + a9) * v22;
        double v40 = (v13 + a9) * v20;
        double v41 = (v14 + v12 * v21 + v10) * v22;
        double v42 = (v12 + v10) * v20;
        if (v42 == v12 && v40 == v13)
        {
          BOOL v43 = v41 == v14 && v39 == v15;
          BOOL v44 = v43 && v32 == a3;
          if (v44 && v33 == a4) {
            return result;
          }
        }
      }
      uint64_t v19 = (v19 + 1);
      double v12 = v42;
      double v13 = v40;
      double v14 = v41;
      double v15 = v39;
      a4 = v33;
      a3 = v32;
      if (v19 == 502) {
        return result;
      }
    }
    if (a3 != a9 || a4 != v10)
    {
      v71.f64[0] = fmin(a3, a9);
      double v72 = fmax(a3, a9);
      double v73 = 0.0;
      double v74 = a9 - a3;
      if (a3 == a9) {
        double v75 = 0.0;
      }
      else {
        double v75 = (v10 - a4) / (a9 - a3);
      }
      if (v71.f64[0] != v72)
      {
        if (v74 < 0.0) {
          double v73 = -1.0;
        }
        if (v74 > 0.0) {
          double v73 = 1.0;
        }
        float v78 = v73;
        float v79 = v75;
        float v80 = v10 - v75 * (a9 - v71.f64[0]);
        float64_t v118 = v71.f64[0];
        float v76 = v71.f64[0];
        float v77 = v72;
        uint64_t result = add_quadratic((char **)v18, v76, v77, v78, 0.0, v79, v80);
        v71.f64[0] = v118;
      }
      double v82 = *((double *)v18 + 8);
      unsigned int v81 = (double *)(v18 + 64);
      v71.f64[1] = fmin(a4, v10);
      *(float64x2_t *)(v81 - 3) = vcvtq_f64_f32(vcvt_f32_f64(vminnmq_f64(*(float64x2_t *)(v81 - 3), v71)));
      float v83 = fmax(*(v81 - 1), v72);
      *(v81 - 1) = v83;
      double v84 = fmax(v82, fmax(a4, v10));
LABEL_89:
      float v106 = v84;
      *unsigned int v81 = v106;
    }
  }
  return result;
}

double *CGSScanconverterGetBoundingBox(double *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  double v5 = result[7];
  double v6 = result[5];
  if (v5 <= v6 || (double v7 = result[8], v8 = result[6], v7 <= v8))
  {
    *a5 = 0;
    *a4 = 0;
    *a3 = 0;
    *a2 = 0;
  }
  else
  {
    unsigned int v9 = vcvtmd_s64_f64(v6);
    unsigned int v10 = vcvtmd_s64_f64(v8);
    *a2 = v9 - 1;
    *a3 = v10 - 2;
    *a4 = vcvtpd_s64_f64(v5) - v9 + 2;
    *a5 = vcvtpd_s64_f64(v7) - v10 + 3;
  }
  return result;
}

_WORD *delta_create(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t *a4)
{
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  CGSScanconverterGetBoundingBox((double *)a1, (_DWORD *)&v97 + 1, &v97, (_DWORD *)&v96 + 1, &v96);
  int v8 = HIDWORD(v96);
  if (SHIDWORD(v96) >= 0x8000) {
    return 0;
  }
  int v9 = v96;
  if ((int)v96 >= 0x8000) {
    return 0;
  }
  uint64_t v10 = SHIDWORD(v97);
  unsigned int v11 = v97 >= 0 ? HIDWORD(v97) : -HIDWORD(v97);
  if (v11 > 0x8000) {
    return 0;
  }
  int v12 = v97;
  unsigned int v13 = (int)v97 >= 0 ? v97 : -(int)v97;
  if (v13 > 0x8000) {
    return 0;
  }
  unint64_t v14 = (int)v96 + 2;
  size_t v15 = (8 * SHIDWORD(v96) + 34) & 0xFFFFFFFFFFFFFFF0;
  if (v15 >= 0xFFFFFFFFFFFFFFFFLL / v14) {
    return 0;
  }
  unint64_t v94 = (8 * SHIDWORD(v96) + 34) & 0xFFFFFFFFFFFFFFF0;
  uint64_t result = malloc_type_calloc((int)v96 + 2, v15, 0xE69EAACEuLL);
  if (result)
  {
    uint64_t v17 = *(void *)(a1 + 80);
    if (v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = (unint64_t)result + v94 * v14 - 2;
      double v20 = *(double *)a1;
      uint64_t v95 = -4 * v10;
      uint64_t v21 = (uint64_t)(int)v94 >> 1;
      uint64_t v93 = (uint64_t)&result[-4 * v10 + 7];
      uint64_t v22 = 2 * ((int)v94 >> 1);
      do
      {
        double v23 = (float *)(*(void *)&v20 + 24 * v18);
        float v24 = v23[3];
        float v25 = v23[4];
        int v26 = vcvtps_s32_f32(*v23 * 4.0);
        signed int v27 = vcvtps_s32_f32(v23[1] * 4.0);
        if (v24 == 0.0 && v25 == 0.0)
        {
          float v28 = *(float *)(*(void *)&v20 + 24 * v18 + 20);
          if (v28 <= 16383.0)
          {
            unsigned int v29 = vcvtmd_s64_f64(v28 * 65536.0 + 0.5);
            int v30 = ((int)(v29 + 0x8000) >> 16) - 2;
            uint64_t v31 = (uint64_t)&result[(v30 - v12) * (int)v21 + 7 + v26 + v95];
            unsigned int v32 = v29 - (v30 << 16);
            double v33 = (char *)&vKernel
                + 12 * (((int)(v32 + 512) >> 10) & 0x3F)
                + 2 * ((((int)(v32 + 512) >> 10) + 192) >> 6);
            float v34 = *(float *)(*(void *)&v20 + 24 * v18 + 8);
            if ((v32 - 65024) >> 17)
            {
              unsigned int v60 = (((int)(v32 + 512) >> 10) + 192) >> 6;
              if (v34 >= 0.0)
              {
                if (v26 < v27)
                {
                  do
                  {
                    int v86 = 4;
                    BOOL v87 = (_WORD *)v31;
                    BOOL v88 = v33;
                    do
                    {
                      double v89 = v87;
                      if (v60 + v86 - 4 <= 5 && v87 >= result && (unint64_t)v87 <= v19) {
                        *v87 += *v88;
                      }
                      --v88;
                      BOOL v87 = (_WORD *)((char *)v87 + v22);
                      --v86;
                    }
                    while (v86);
                    v60 -= 4;
                    if (v60 <= 5)
                    {
                      double v92 = &v89[v21];
                      if (v92 >= result && (unint64_t)v92 <= v19) {
                        *v92 += *v88;
                      }
                    }
                    ++v26;
                    v31 += 2;
                  }
                  while (v26 != v27);
                }
              }
              else if (v26 < v27)
              {
                do
                {
                  int v61 = 4;
                  double v62 = (_WORD *)v31;
                  double v63 = v33;
                  do
                  {
                    double v64 = v62;
                    if (v60 + v61 - 4 <= 5 && v62 >= result && (unint64_t)v62 <= v19) {
                      *v62 -= *v63;
                    }
                    --v63;
                    double v62 = (_WORD *)((char *)v62 + v22);
                    --v61;
                  }
                  while (v61);
                  v60 -= 4;
                  if (v60 <= 5)
                  {
                    double v67 = &v64[v21];
                    if (v67 >= result && (unint64_t)v67 <= v19) {
                      *v67 -= *v63;
                    }
                  }
                  ++v26;
                  v31 += 2;
                }
                while (v26 != v27);
              }
            }
            else if (v34 >= 0.0)
            {
              if (v26 < v27)
              {
                do
                {
                  int v81 = 4;
                  double v82 = (_WORD *)v31;
                  float v83 = v33;
                  do
                  {
                    double v84 = v82;
                    if (v82 >= result && (unint64_t)v82 <= v19) {
                      *v82 += *v83;
                    }
                    --v83;
                    double v82 = (_WORD *)((char *)v82 + v22);
                    --v81;
                  }
                  while (v81);
                  double v85 = &v84[v21];
                  if (v85 >= result && (unint64_t)v85 <= v19) {
                    *v85 += *v83;
                  }
                  ++v26;
                  v31 += 2;
                }
                while (v26 != v27);
              }
            }
            else if (v26 < v27)
            {
              do
              {
                int v35 = 4;
                uint64_t v36 = (_WORD *)v31;
                size_t v37 = v33;
                do
                {
                  uint64_t v38 = v36;
                  if (v36 >= result && (unint64_t)v36 <= v19) {
                    *v36 -= *v37;
                  }
                  --v37;
                  uint64_t v36 = (_WORD *)((char *)v36 + v22);
                  --v35;
                }
                while (v35);
                double v39 = &v38[v21];
                if (v39 >= result && (unint64_t)v39 <= v19) {
                  *v39 -= *v37;
                }
                ++v26;
                v31 += 2;
              }
              while (v26 != v27);
            }
          }
          goto LABEL_140;
        }
        float v40 = -(float)(*v23 - (float)((float)v26 * 0.25));
        float v41 = (float)((float)(v25 * v40) + (float)((float)(v40 * v40) * v24))
            + *(float *)(*(void *)&v20 + 24 * v18 + 20);
        if (v41 <= 16383.0)
        {
          float v42 = v24 * 0.125;
          if ((float)(v24 * 0.125) <= 16383.0)
          {
            float v43 = (float)((float)(v25 * 0.25) + (float)(v24 * 0.0625)) + (float)(v40 * (float)(v24 * 0.5));
            if (v43 <= 16383.0)
            {
              int v44 = vcvtmd_s64_f64(v41 * 65536.0 + 0.5);
              signed int v45 = vcvtmd_s64_f64(v43 * 65536.0 + 0.5);
              unsigned int v46 = vcvtmd_s64_f64(v42 * 65536.0 + 0.5);
              if (*(float *)(*(void *)&v20 + 24 * v18 + 8) >= 0.0)
              {
                if (v26 >= v27) {
                  goto LABEL_140;
                }
                uint64_t v68 = v26;
                uint64_t v69 = v93 + 2 * v26;
                while (2)
                {
                  if (v44 > 0x3FFFFFFF || v45 > 0x3FFFFFFF) {
                    goto LABEL_140;
                  }
                  int v71 = ((v44 + 0x8000) >> 16) - 2;
                  uint64_t v72 = (v71 - v12) * (int)v21;
                  int v73 = v44 - (v71 << 16);
                  double v74 = (_WORD *)((char *)&vKernel
                                + 12 * (((v73 + 512) >> 10) & 0x3F)
                                + 2 * ((((v73 + 512) >> 10) + 192) >> 6));
                  if ((v73 - 65024) < 0x20000)
                  {
                    double v75 = (_WORD *)(v69 + 2 * v72);
                    int v76 = 4;
                    do
                    {
                      if (v75 >= result && (unint64_t)v75 <= v19) {
                        *v75 += *v74;
                      }
                      --v74;
                      double v75 = (_WORD *)((char *)v75 + v22);
                      --v76;
                    }
                    while (v76);
                    goto LABEL_108;
                  }
                  int v77 = (((v73 + 512) >> 10) + 192) >> 6;
                  int v78 = 4;
                  double v75 = (_WORD *)(v69 + 2 * v72);
                  do
                  {
                    if ((v77 + v78 - 4) <= 5 && v75 >= result && (unint64_t)v75 <= v19) {
                      *v75 += *v74;
                    }
                    --v74;
                    double v75 = (_WORD *)((char *)v75 + v22);
                    --v78;
                  }
                  while (v78);
                  if ((v77 - 10) >= 0xFFFFFFFA)
                  {
LABEL_108:
                    if (v75 >= result && (unint64_t)v75 <= v19) {
                      *v75 += *v74;
                    }
                  }
                  ++v68;
                  v44 += v45;
                  v45 += v46;
                  v69 += 2;
                  if (v68 == v27) {
                    goto LABEL_140;
                  }
                  continue;
                }
              }
              if (v26 < v27)
              {
                uint64_t v47 = v26;
                uint64_t v48 = v93 + 2 * v26;
                do
                {
                  if (v44 > 0x3FFFFFFF || v45 > 0x3FFFFFFF) {
                    break;
                  }
                  int v50 = ((v44 + 0x8000) >> 16) - 2;
                  uint64_t v51 = (v50 - v12) * (int)v21;
                  int v52 = v44 - (v50 << 16);
                  double v53 = (_WORD *)((char *)&vKernel
                                + 12 * (((v52 + 512) >> 10) & 0x3F)
                                + 2 * ((((v52 + 512) >> 10) + 192) >> 6));
                  if ((v52 - 65024) >= 0x20000)
                  {
                    int v56 = (((v52 + 512) >> 10) + 192) >> 6;
                    int v57 = 4;
                    double v54 = (_WORD *)(v48 + 2 * v51);
                    do
                    {
                      if ((v56 + v57 - 4) <= 5 && v54 >= result && (unint64_t)v54 <= v19) {
                        *v54 -= *v53;
                      }
                      --v53;
                      double v54 = (_WORD *)((char *)v54 + v22);
                      --v57;
                    }
                    while (v57);
                    if ((v56 - 10) < 0xFFFFFFFA) {
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    double v54 = (_WORD *)(v48 + 2 * v51);
                    int v55 = 4;
                    do
                    {
                      if (v54 >= result && (unint64_t)v54 <= v19) {
                        *v54 -= *v53;
                      }
                      --v53;
                      double v54 = (_WORD *)((char *)v54 + v22);
                      --v55;
                    }
                    while (v55);
                  }
                  if (v54 >= result && (unint64_t)v54 <= v19) {
                    *v54 -= *v53;
                  }
LABEL_63:
                  ++v47;
                  v44 += v45;
                  v45 += v46;
                  v48 += 2;
                }
                while (v47 != v27);
              }
            }
          }
        }
LABEL_140:
        ++v18;
      }
      while (v18 != v17);
    }
    *a2 = v8;
    *a3 = v9;
    *a4 = v94;
  }
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)23,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  uint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  double v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0xFFFFFFFFFFFFLL;
  a13.i64[1] = 0xFFFFFFFFFFFFLL;
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    __int32 v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      int v55 = (int8x16_t *)&v20[v16];
      int v56 = (int8x16_t *)v20;
      do
        int v57 = v56++;
      while (v56 <= v55 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v57)) & 0x80) != 0);
      do
      {
        double v58 = v57;
        int v57 = (int8x16_t *)((char *)v57 + 4);
      }
      while (v57 <= v55 && !v58->i32[0]);
      if (v58 < v55)
      {
        while (!v58->i8[0])
        {
          double v58 = (int8x16_t *)((char *)v58 + 1);
          if (v58 >= v55)
          {
            double v58 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v59 = (char *)v58 - v20;
      int64_t v60 = ((char *)v58 - v20) * a6;
      v17 += v60;
      v19 += v60;
      v20 += v60;
      v16 -= v59;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF) {
      break;
    }
    unsigned int v32 = (int8x16_t *)&v20[v16];
    double v33 = (int8x16_t *)v20;
    do
      float v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      int v35 = v34;
      float v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        int v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          int v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v36 = 0;
    int64_t v37 = (char *)v35 - v20;
    unint64_t v38 = (char *)v35 - v20;
    do
    {
      int8x16_t v39 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v36]));
      int8x16_t v40 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v36]));
      int16x8_t v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850CD880);
      int16x8_t v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      int8x16_t v44 = (int8x16_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      uint16x8_t v45 = (uint16x8_t)vmvnq_s8(v44);
      uint16x8_t v46 = (uint16x8_t)vandq_s8(v44, (int8x16_t)a13);
      int8x16_t v47 = (int8x16_t)vcgtq_u16(v46, v45);
      uint16x8_t v48 = vabdq_u16(v45, v46);
      uint32x4_t v49 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8);
      uint32x4_t v50 = vmull_high_u16(v43, v48);
      uint32x4_t v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v28), v29);
      uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v28), v29);
      uint16x8_t v53 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL), vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
      int8x16_t v54 = vbslq_s8(v47, (int8x16_t)vqsubq_u16((uint16x8_t)v44, v53), (int8x16_t)vqaddq_u16((uint16x8_t)v44, v53));
      int8x16_t v15 = (int8x16_t)vceqzq_s16(v41);
      *(int8x16_t *)&v19->i8[v36] = vrev16q_s8(vbslq_s8(v15, v40, vbslq_s8((int8x16_t)vceqzq_s16(v42), v39, (int8x16_t)vminq_u16((uint16x8_t)v54, (uint16x8_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1850CD880)))));
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v36);
    uint64_t v17 = (int8x8_t *)((char *)v17 + v36);
    unint64_t v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v61 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    int16x8_t v62 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v63 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v61]));
    int8x16_t v64 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v62)), vrev16q_s8(*(int8x16_t *)&v19->i8[v61]));
    int16x8_t v65 = (int16x8_t)vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v62.i8);
    uint32x4_t v66 = vmull_high_u16(v63, (uint16x8_t)v62);
    uint32x4_t v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)v65, v28), v29);
    *(uint16x4_t *)v67.i8 = vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL);
    uint32x4_t v68 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v66, v28), v29);
    uint32x4_t v69 = vsraq_n_u32(v68, v68, 0x10uLL);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(*(int16x4_t *)v67.i8, 3);
    int16x4_t v70 = (int16x4_t)vqshrn_n_u32(v69, 0x10uLL);
    uint16x4_t v71 = vmin_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v65.i8);
    int8x16_t v72 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v67.i8, v69, 0x10uLL);
    v65.u64[1] = (unint64_t)vdup_lane_s16(v70, 3);
    int16x8_t v73 = (int16x8_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1850CD880);
    int8x16_t v74 = (int8x16_t)vminq_u16((uint16x8_t)v64, (uint16x8_t)v73);
    uint16x8_t v75 = (uint16x8_t)vmvnq_s8(v74);
    uint16x8_t v76 = (uint16x8_t)vandq_s8(v74, (int8x16_t)a13);
    int8x16_t v77 = (int8x16_t)vcgtq_u16(v76, v75);
    int8x16_t v78 = (int8x16_t)vabdq_u16(v75, v76);
    uint32x4_t v79 = vmull_u16(vmin_u16((uint16x4_t)v70, (uint16x4_t)v65.u64[1]), (uint16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL));
    uint32x4_t v80 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v71, *(uint16x4_t *)v78.i8), v28), v29);
    uint32x4_t v81 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v79, v28), v29);
    uint16x8_t v82 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v80, v80, 0x10uLL), 0x10uLL), vsraq_n_u32(v81, v81, 0x10uLL), 0x10uLL);
    int8x16_t v83 = vbslq_s8(v77, (int8x16_t)vqsubq_u16((uint16x8_t)v74, v82), (int8x16_t)vqaddq_u16((uint16x8_t)v74, v82));
    int8x16_t v84 = vbslq_s8((int8x16_t)vceqzq_s16(v73), v72, (int8x16_t)vminq_u16((uint16x8_t)v83, (uint16x8_t)vqtbl1q_s8(v83, (int8x16_t)xmmword_1850CD880)));
    int8x16_t v15 = (int8x16_t)vceqzq_s16(v65);
    *(int8x16_t *)&v19->i8[v61] = vrev16q_s8(vbslq_s8(v15, v64, v84));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v31 = *(unsigned __int16 *)v20;
    v61 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      uint64_t v17 = (int8x8_t *)((char *)v17 + v61);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v61);
      goto LABEL_37;
    }
  }
  uint64_t v17 = (int8x8_t *)((char *)v17 + v27 + v61);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v61);
LABEL_40:
  uint64_t v85 = v16 + a14;
  if (v85)
  {
    if (a7) {
      __int16 v86 = 0;
    }
    else {
      __int16 v86 = -1;
    }
    int8x8_t v87 = 0;
    v87.i16[3] = v86;
    int8x8_t v88 = 0;
    if (a8) {
      __int16 v89 = 0;
    }
    else {
      __int16 v89 = -1;
    }
    v88.i16[3] = v89;
    uint32x4_t v90 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v91.i64[0] = 0x800000008000;
    v91.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int16x4_t v92 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        int16x4_t v93 = (int16x4_t)vorr_s8(vbic_s8(v88, (int8x8_t)vceqz_s16(v92)), vrev16_s8(*v19));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v87, vrev16_s8(*v17)), (uint16x4_t)v92), v90), v91);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        int16x4_t v94 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        int16x4_t v95 = vdup_lane_s16(v93, 3);
        int8x8_t v96 = (int8x8_t)vmin_u16((uint16x4_t)v93, (uint16x4_t)v95);
        uint16x4_t v97 = (uint16x4_t)vmvn_s8(v96);
        uint16x4_t v98 = (uint16x4_t)v96;
        v98.i16[3] = 0;
        uint32x4_t v99 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v94), vabd_u16(v97, v98)), v90), v91);
        *(uint16x4_t *)v99.i8 = vqshrn_n_u32(vsraq_n_u32(v99, v99, 0x10uLL), 0x10uLL);
        *(int8x8_t *)v99.i8 = vbsl_s8((int8x8_t)vcgt_u16(v98, v97), (int8x8_t)vqsub_u16((uint16x4_t)v96, *(uint16x4_t *)v99.i8), (int8x8_t)vqadd_u16((uint16x4_t)v96, *(uint16x4_t *)v99.i8));
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v94), (int8x8_t)v93, vbsl_s8((int8x8_t)vceqz_s16(v95), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v99.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v99.i8, 3)))));
        *unint64_t v19 = *(int8x8_t *)a13.i8;
      }
      float v100 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v100 >= v18) {
        uint64_t v101 = -(uint64_t)a5;
      }
      else {
        uint64_t v101 = 0;
      }
      uint64_t v17 = &v100[v101];
      v19 += a6;
      --v85;
    }
    while (v85);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)22,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  uint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  double v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    __int32 v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      int v57 = (int8x16_t *)&v20[v16];
      double v58 = (int8x16_t *)v20;
      do
        int64_t v59 = v58++;
      while (v58 <= v57 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v59)) & 0x80) != 0);
      do
      {
        int64_t v60 = v59;
        int64_t v59 = (int8x16_t *)((char *)v59 + 4);
      }
      while (v59 <= v57 && !v60->i32[0]);
      if (v60 < v57)
      {
        while (!v60->i8[0])
        {
          int64_t v60 = (int8x16_t *)((char *)v60 + 1);
          if (v60 >= v57)
          {
            int64_t v60 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v61 = (char *)v60 - v20;
      int64_t v62 = ((char *)v60 - v20) * a6;
      v17 += v62;
      v19 += v62;
      v20 += v62;
      v16 -= v61;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    __int32 v31 = (int8x16_t *)&v20[v16];
    unsigned int v32 = (int8x16_t *)v20;
    do
      double v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      float v34 = v33;
      double v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        float v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          float v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v20;
    unint64_t v37 = (char *)v34 - v20;
    do
    {
      int8x16_t v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      int8x16_t v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      int16x8_t v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850CD880);
      int16x8_t v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      uint16x8_t v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      uint32x4_t v44 = vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3);
      uint32x4_t v45 = vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7);
      v44.i32[3] = 0;
      uint32x4_t v46 = vabdq_u32(vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3), v44);
      v45.i32[3] = 0;
      uint32x4_t v47 = vabdq_u32(vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7), v45);
      uint16x8_t v48 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      uint32x4_t v49 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8);
      uint32x4_t v50 = vqaddq_u32(v47, vmull_high_u16(v43, v48));
      uint16x8_t v51 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      uint32x4_t v52 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v51.i8);
      uint32x4_t v53 = vqaddq_u32(v50, vmull_high_u16(v42, v51));
      uint32x4_t v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(v46, v49), v52), v28), a13);
      *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
      uint32x4_t v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v53, v28), a13);
      uint32x4_t v56 = vsraq_n_u32(v55, v55, 0x10uLL);
      *(int16x4_t *)v51.i8 = vdup_lane_s16(*(int16x4_t *)v54.i8, 3);
      v51.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v56, 0x10uLL), 3);
      int8x16_t v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v54.i8, v56, 0x10uLL), v51));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    uint64_t v17 = (int8x8_t *)((char *)v17 + v35);
    unint64_t v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v63 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    int16x8_t v64 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v65 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v63]));
    int16x8_t v66 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v64)), vrev16q_s8(*(int8x16_t *)&v19->i8[v63]));
    uint32x4_t v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v65.i8, *(uint16x4_t *)v64.i8), v28), a13);
    int16x4_t v68 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL);
    uint32x4_t v69 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v65, (uint16x8_t)v64), v28), a13);
    uint32x4_t v70 = vsraq_n_u32(v69, v69, 0x10uLL);
    int16x4_t v71 = (int16x4_t)vqshrn_n_u32(v70, 0x10uLL);
    *(int16x4_t *)v64.i8 = vdup_lane_s16(v68, 3);
    int16x8_t v72 = (int16x8_t)vqtbl1q_s8((int8x16_t)v66, (int8x16_t)xmmword_1850CD880);
    int8x16_t v73 = (int8x16_t)vminq_u16((uint16x8_t)v66, (uint16x8_t)v72);
    uint16x4_t v74 = vmin_u16((uint16x4_t)v68, *(uint16x4_t *)v64.i8);
    uint32x4_t v75 = vmull_lane_u16(*(uint16x4_t *)v73.i8, (uint16x4_t)v68, 3);
    int8x16_t v76 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v68, v70, 0x10uLL);
    v64.i64[1] = vdupq_lane_s16(v71, 3).u64[0];
    uint16x4_t v77 = vmin_u16((uint16x4_t)v71, (uint16x4_t)v64.u64[1]);
    int8x16_t v78 = (int8x16_t)vdupq_laneq_s16(v66, 7);
    uint16x4_t v79 = (uint16x4_t)vextq_s8(v73, v73, 8uLL).u64[0];
    uint32x4_t v80 = vmull_high_lane_u16((uint16x8_t)v73, (uint16x4_t)v71, 3);
    v75.i32[3] = 0;
    v80.i32[3] = 0;
    uint32x4_t v81 = vqaddq_u32(vabdq_u32(vmull_lane_u16(v74, *(uint16x4_t *)v66.i8, 3), v75), vmull_u16(*(uint16x4_t *)v73.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v64.i8)));
    int8x16_t v82 = vmvnq_s8((int8x16_t)v72);
    uint32x4_t v83 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v81, vmull_u16(v74, *(uint16x4_t *)v82.i8)), v28), a13);
    *(uint16x4_t *)v83.i8 = vqshrn_n_u32(vsraq_n_u32(v83, v83, 0x10uLL), 0x10uLL);
    uint32x4_t v84 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_u16(v77, (uint16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), v80), vmull_u16(v79, (uint16x4_t)vmvn_s8((int8x8_t)v64.u64[1]))), vmull_u16(v77, (uint16x4_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL))), v28), a13);
    uint32x4_t v85 = vsraq_n_u32(v84, v84, 0x10uLL);
    *(int16x4_t *)v86.i8 = vdup_lane_s16(*(int16x4_t *)v83.i8, 3);
    v86.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v85, 0x10uLL), 3);
    int8x16_t v15 = (int8x16_t)vceqzq_s16(v64);
    *(int8x16_t *)&v19->i8[v63] = vrev16q_s8(vbslq_s8(v15, (int8x16_t)v66, vbslq_s8((int8x16_t)vceqzq_s16(v72), v76, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v83.i8, v85, 0x10uLL), v86))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v30 = *(unsigned __int16 *)v20;
    v63 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      uint64_t v17 = (int8x8_t *)((char *)v17 + v63);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v63);
      goto LABEL_37;
    }
  }
  uint64_t v17 = (int8x8_t *)((char *)v17 + v27 + v63);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v63);
LABEL_40:
  uint64_t v87 = v16 + a14;
  if (v87)
  {
    if (a7) {
      __int16 v88 = 0;
    }
    else {
      __int16 v88 = -1;
    }
    int8x8_t v89 = 0;
    v89.i16[3] = v88;
    int8x8_t v90 = 0;
    if (a8) {
      __int16 v91 = 0;
    }
    else {
      __int16 v91 = -1;
    }
    v90.i16[3] = v91;
    uint32x4_t v92 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v93.i64[0] = 0x800000008000;
    v93.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int16x4_t v94 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        int16x4_t v95 = (int16x4_t)vorr_s8(vbic_s8(v90, (int8x8_t)vceqz_s16(v94)), vrev16_s8(*v19));
        uint32x4_t v96 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v89, vrev16_s8(*v17)), (uint16x4_t)v94), v92), v93);
        *(uint16x4_t *)v96.i8 = vqshrn_n_u32(vsraq_n_u32(v96, v96, 0x10uLL), 0x10uLL);
        int16x4_t v97 = vdup_lane_s16(*(int16x4_t *)v96.i8, 3);
        int16x4_t v98 = vdup_lane_s16(v95, 3);
        uint16x4_t v99 = vmin_u16(*(uint16x4_t *)v96.i8, (uint16x4_t)v97);
        uint16x4_t v100 = vmin_u16((uint16x4_t)v95, (uint16x4_t)v98);
        uint32x4_t v101 = vmull_lane_u16(v100, *(uint16x4_t *)v96.i8, 3);
        v101.i32[3] = 0;
        uint32x4_t v102 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_lane_u16(v99, (uint16x4_t)v95, 3), v101), vmull_u16(v100, (uint16x4_t)vmvn_s8((int8x8_t)v97))), vmull_u16(v99, (uint16x4_t)vmvn_s8((int8x8_t)v98))), v92), v93);
        *(uint16x4_t *)v102.i8 = vqshrn_n_u32(vsraq_n_u32(v102, v102, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v97), (int8x8_t)v95, vbsl_s8((int8x8_t)vceqz_s16(v98), *(int8x8_t *)v96.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v102.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v102.i8, 3)))));
        *unint64_t v19 = *(int8x8_t *)a13.i8;
      }
      float v103 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v103 >= v18) {
        uint64_t v104 = -(uint64_t)a5;
      }
      else {
        uint64_t v104 = 0;
      }
      uint64_t v17 = &v103[v104];
      v19 += a6;
      --v87;
    }
    while (v87);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)21,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v18 = a16;
  unint64_t v19 = *result;
  unint64_t v20 = *a3;
  unsigned int v21 = *a2;
  int8x16_t v22 = *a4;
  if (a16 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  if (a8) {
    unsigned int v26 = 0;
  }
  else {
    unsigned int v26 = -1;
  }
  int8x16_t v27 = vandq_s8((int8x16_t)vdupq_n_s16(v26), v24);
  uint64_t v28 = 2 * a6;
  uint64_t v29 = 16 * a6;
  uint32x4_t v30 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a14.i64[0] = 0x800000008000;
  a14.i64[1] = 0x800000008000;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    __int32 v32 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      uint16x8_t v65 = (int8x16_t *)&v22[v18];
      int16x8_t v66 = (int8x16_t *)v22;
      do
        uint32x4_t v67 = v66++;
      while (v66 <= v65 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v67)) & 0x80) != 0);
      do
      {
        int16x4_t v68 = v67;
        uint32x4_t v67 = (int8x16_t *)((char *)v67 + 4);
      }
      while (v67 <= v65 && !v68->i32[0]);
      if (v68 < v65)
      {
        while (!v68->i8[0])
        {
          int16x4_t v68 = (int8x16_t *)((char *)v68 + 1);
          if (v68 >= v65)
          {
            int16x4_t v68 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      int64_t v69 = (char *)v68 - v22;
      int64_t v70 = ((char *)v68 - v22) * a6;
      v19 += v70;
      v21 += v70;
      v22 += v70;
      v18 -= v69;
      goto LABEL_37;
    }
    if (v32 != 0xFFFF) {
      break;
    }
    double v33 = (int8x16_t *)&v22[v18];
    float v34 = (int8x16_t *)v22;
    do
      uint64_t v35 = v34++;
    while (v34 <= v33 && (vminvq_u8((uint8x16_t)vceqq_s8(*v35, v31)) & 0x80) != 0);
    do
    {
      int64_t v36 = v35;
      uint64_t v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= v33 && v36->i32[0] == -1);
    if (v36 < v33)
    {
      while (v36->u8[0] == 255)
      {
        int64_t v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= v33)
        {
          int64_t v36 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    uint64_t v37 = 0;
    int64_t v38 = (char *)v36 - v22;
    unint64_t v39 = (char *)v36 - v22;
    do
    {
      int8x16_t v40 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v37]));
      int16x8_t v41 = (int16x8_t)vorrq_s8(v27, vrev16q_s8(*(int8x16_t *)&v21->i8[v37]));
      int16x8_t v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850CD880);
      int16x8_t v43 = (int16x8_t)vqtbl1q_s8((int8x16_t)v41, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v44 = vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      uint16x8_t v45 = vminq_u16((uint16x8_t)v41, (uint16x8_t)v43);
      int16x8_t v46 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v42, (uint16x8_t)0), v44);
      int8x16_t v47 = (int8x16_t)vzip1q_s16(v46, v46);
      uint32x4_t v48 = vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v45.i8);
      uint32x4_t v49 = vmull_high_u16(v44, v45);
      uint16x8_t v50 = vqsubq_u16((uint16x8_t)v43, v45);
      uint16x8_t v51 = vqsubq_u16((uint16x8_t)v42, v44);
      uint32x4_t v52 = vmull_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v51.i8);
      uint32x4_t v53 = vmull_high_u16(v50, v51);
      uint32x4_t v54 = (uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v46, v46), (int8x16_t)vqaddq_u32(v49, v49), (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v41, 7), (uint16x8_t)v40, 7), vqaddq_u32(v53, v53)));
      uint16x8_t v55 = (uint16x8_t)vbslq_s8(v47, (int8x16_t)vqaddq_u32(v48, v48), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v41.i8, 3), *(uint16x4_t *)v40.i8, 3), vqaddq_u32(v52, v52)));
      uint16x8_t v56 = (uint16x8_t)vmvnq_s8((int8x16_t)v42);
      uint32x4_t v57 = vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v56.i8);
      uint32x4_t v58 = vqaddq_u32(v54, vmull_high_u16(v45, v56));
      uint16x8_t v59 = (uint16x8_t)vmvnq_s8((int8x16_t)v43);
      uint32x4_t v60 = vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v59.i8);
      uint32x4_t v61 = vqaddq_u32(v58, vmull_high_u16(v44, v59));
      uint32x4_t v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v55, v57), v60), v30), a14);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      uint32x4_t v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v61, v30), a14);
      uint32x4_t v64 = vsraq_n_u32(v63, v63, 0x10uLL);
      *(int16x4_t *)v55.i8 = vdup_lane_s16(*(int16x4_t *)v62.i8, 3);
      v55.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v64, 0x10uLL), 3);
      int16x8_t v17 = (int16x8_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v62.i8, v64, 0x10uLL), v55);
      int8x16_t v16 = vbslq_s8((int8x16_t)vceqzq_s16(v43), v40, (int8x16_t)v17);
      *(int8x16_t *)&v21->i8[v37] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v42), (int8x16_t)v41, v16));
      v22 += v28;
      v39 -= 2;
      v37 += v29;
    }
    while (v39 > 1);
    unsigned int v21 = (int8x8_t *)((char *)v21 + v37);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v37);
    unint64_t v18 = v18 - v38 + v39;
LABEL_37:
    if (v18 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v71 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    int16x8_t v72 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v73 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v71]));
    int16x8_t v74 = (int16x8_t)vorrq_s8(vbicq_s8(v27, (int8x16_t)vceqzq_s16(v72)), vrev16q_s8(*(int8x16_t *)&v21->i8[v71]));
    uint32x4_t v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v72.i8), v30), a14);
    int16x4_t v76 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v75, v75, 0x10uLL), 0x10uLL);
    uint32x4_t v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v73, (uint16x8_t)v72), v30), a14);
    uint32x4_t v78 = vsraq_n_u32(v77, v77, 0x10uLL);
    int16x4_t v79 = (int16x4_t)vqshrn_n_u32(v78, 0x10uLL);
    *(int16x4_t *)v72.i8 = vdup_lane_s16(v76, 3);
    *(uint16x4_t *)v73.i8 = vmin_u16((uint16x4_t)v76, *(uint16x4_t *)v72.i8);
    uint16x8_t v80 = (uint16x8_t)vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v74.i8, 3), (uint16x4_t)v76, 3);
    int8x16_t v81 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v76, v78, 0x10uLL);
    v72.u64[1] = (unint64_t)vdup_lane_s16(v79, 3);
    int16x8_t v82 = (int16x8_t)vqtbl1q_s8((int8x16_t)v74, (int8x16_t)xmmword_1850CD880);
    uint16x8_t v83 = vminq_u16((uint16x8_t)v81, (uint16x8_t)v72);
    int8x16_t v84 = (int8x16_t)vminq_u16((uint16x8_t)v74, (uint16x8_t)v82);
    int16x8_t v85 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v72, (uint16x8_t)0), v83);
    uint32x4_t v86 = vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v84.i8);
    uint16x4_t v87 = vmin_u16((uint16x4_t)v79, (uint16x4_t)v72.u64[1]);
    uint16x4_t v88 = (uint16x4_t)vextq_s8(v84, v84, 8uLL).u64[0];
    uint32x4_t v89 = vmull_u16(v87, v88);
    uint16x8_t v90 = vqsubq_u16((uint16x8_t)v82, (uint16x8_t)v84);
    uint16x8_t v91 = vqsubq_u16((uint16x8_t)v72, v83);
    uint32x4_t v92 = vmull_u16(*(uint16x4_t *)v90.i8, *(uint16x4_t *)v91.i8);
    uint32x4_t v93 = vmull_high_u16(v90, v91);
    int8x16_t v94 = vmvnq_s8((int8x16_t)v82);
    uint32x4_t v95 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vbslq_s8((int8x16_t)vzip1q_s16(v85, v85), (int8x16_t)vqaddq_u32(v86, v86), (int8x16_t)vqsubq_u32((uint32x4_t)v80, vqaddq_u32(v92, v92))), vmull_u16(*(uint16x4_t *)v84.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v72.i8))), vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v94.i8)), v30), a14);
    *(uint16x4_t *)v95.i8 = vqshrn_n_u32(vsraq_n_u32(v95, v95, 0x10uLL), 0x10uLL);
    uint32x4_t v96 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v85, v85), (int8x16_t)vqaddq_u32(v89, v89), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_laneq_s16(v74, 7), (uint16x4_t)v79, 3), vqaddq_u32(v93, v93))), vmull_u16(v88, (uint16x4_t)vmvn_s8((int8x8_t)v72.u64[1]))), vmull_u16(v87, (uint16x4_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL))), v30), a14);
    uint32x4_t v97 = vsraq_n_u32(v96, v96, 0x10uLL);
    *(int16x4_t *)v80.i8 = vdup_lane_s16(*(int16x4_t *)v95.i8, 3);
    v80.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v97, 0x10uLL), 3);
    int8x16_t v98 = (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v95.i8, v97, 0x10uLL), v80);
    int16x8_t v17 = vceqzq_s16(v82);
    int8x16_t v16 = (int8x16_t)vceqzq_s16(v72);
    *(int8x16_t *)&v21->i8[v71] = vrev16q_s8(vbslq_s8(v16, (int8x16_t)v74, vbslq_s8((int8x16_t)v17, v81, v98)));
    v22 += v28;
    v18 -= 2;
    if (v18 < 2) {
      break;
    }
    __int32 v32 = *(unsigned __int16 *)v22;
    v71 += v29;
    if ((unsigned __int16)(v32 - 1) >= 0xFFFEu)
    {
      unint64_t v19 = (int8x8_t *)((char *)v19 + v71);
      unsigned int v21 = (int8x8_t *)((char *)v21 + v71);
      goto LABEL_37;
    }
  }
  unint64_t v19 = (int8x8_t *)((char *)v19 + v29 + v71);
  unsigned int v21 = (int8x8_t *)((char *)v21 + v29 + v71);
LABEL_40:
  uint64_t v99 = v18 + a15;
  if (v99)
  {
    if (a7) {
      __int16 v100 = 0;
    }
    else {
      __int16 v100 = -1;
    }
    int8x8_t v101 = 0;
    v101.i16[3] = v100;
    if (a8) {
      __int16 v102 = 0;
    }
    else {
      __int16 v102 = -1;
    }
    int8x8_t v103 = 0;
    v103.i16[3] = v102;
    uint32x4_t v104 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v105.i64[0] = 0x800000008000;
    v105.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a14.i32[0] = *v22;
        int16x4_t v106 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a14.i8, 0);
        int8x8_t v107 = vbic_s8(v103, (int8x8_t)vceqz_s16(v106));
        a14 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v101, vrev16_s8(*v19)), (uint16x4_t)v106), v104), v105);
        *(uint16x4_t *)a14.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a14, (uint32x4_t)a14, 0x10uLL), 0x10uLL);
        int16x4_t v108 = vdup_lane_s16(*(int16x4_t *)a14.i8, 3);
        int16x4_t v109 = (int16x4_t)vorr_s8(v107, vrev16_s8(*v21));
        int16x4_t v110 = vdup_lane_s16(v109, 3);
        uint16x4_t v111 = vmin_u16(*(uint16x4_t *)a14.i8, (uint16x4_t)v108);
        uint16x4_t v112 = vmin_u16((uint16x4_t)v109, (uint16x4_t)v110);
        *(uint16x4_t *)v17.i8 = vcge_u16(vrhadd_u16((uint16x4_t)v108, 0), v111);
        uint32x4_t v113 = vmull_u16(v111, v112);
        uint32x4_t v114 = vmull_u16(vqsub_u16((uint16x4_t)v110, v112), vqsub_u16((uint16x4_t)v108, v111));
        int16x8_t v17 = (int16x8_t)vbslq_s8((int8x16_t)vzip1q_s16(v17, v17), (int8x16_t)vqaddq_u32(v113, v113), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v110, *(uint16x4_t *)a14.i8, 3), vqaddq_u32(v114, v114)));
        uint32x4_t v115 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v17, vmull_u16(v112, (uint16x4_t)vmvn_s8((int8x8_t)v108))), vmull_u16(v111, (uint16x4_t)vmvn_s8((int8x8_t)v110))), v104), v105);
        *(uint16x4_t *)v115.i8 = vqshrn_n_u32(vsraq_n_u32(v115, v115, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a14.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v108), (int8x8_t)v109, vbsl_s8((int8x8_t)vceqz_s16(v110), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v115.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v115.i8, 3)))));
        *unsigned int v21 = *(int8x8_t *)a14.i8;
      }
      double v116 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v116 >= v20) {
        uint64_t v117 = -(uint64_t)a5;
      }
      else {
        uint64_t v117 = 0;
      }
      unint64_t v19 = &v116[v117];
      v21 += a6;
      --v99;
    }
    while (v99);
  }
  *uint64_t result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)20,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  int16x8_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    __int32 v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      uint32x4_t v63 = (int8x16_t *)&v20[v16];
      uint32x4_t v64 = (int8x16_t *)v20;
      do
        uint16x8_t v65 = v64++;
      while (v64 <= v63 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v65)) & 0x80) != 0);
      do
      {
        int16x8_t v66 = v65;
        uint16x8_t v65 = (int8x16_t *)((char *)v65 + 4);
      }
      while (v65 <= v63 && !v66->i32[0]);
      if (v66 < v63)
      {
        while (!v66->i8[0])
        {
          int16x8_t v66 = (int8x16_t *)((char *)v66 + 1);
          if (v66 >= v63)
          {
            int16x8_t v66 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v67 = (char *)v66 - v20;
      int64_t v68 = ((char *)v66 - v20) * a6;
      v17 += v68;
      v19 += v68;
      v20 += v68;
      v16 -= v67;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    int8x16_t v31 = (int8x16_t *)&v20[v16];
    __int32 v32 = (int8x16_t *)v20;
    do
      double v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      float v34 = v33;
      double v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        float v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          float v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v20;
    unint64_t v37 = (char *)v34 - v20;
    do
    {
      int8x16_t v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      int8x16_t v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      int16x8_t v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850CD880);
      int16x8_t v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      uint16x8_t v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      int16x4_t v44 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v43.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v41.i8)))));
      int32x4_t v45 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16(v43, v43)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL)))));
      uint32x4_t v46 = vmull_lane_u16((uint16x4_t)v44, *(uint16x4_t *)v38.i8, 3);
      uint16x8_t v47 = vqsubq_u16(v43, (uint16x8_t)vqmovun_high_s32(v44, v45));
      uint32x4_t v48 = vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v42.i8);
      uint32x4_t v49 = vmull_high_u16(v47, v42);
      uint32x4_t v50 = vqaddq_u32(v46, vqaddq_u32(v48, v48));
      uint32x4_t v51 = vqaddq_u32(vmull_laneq_u16((uint16x4_t)vqmovun_s32(v45), (uint16x8_t)v38, 7), vqaddq_u32(v49, v49));
      uint16x8_t v52 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      uint32x4_t v53 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v52.i8);
      uint32x4_t v54 = vmull_high_u16(v43, v52);
      uint16x8_t v55 = (uint16x8_t)vqaddq_u32(v50, v53);
      uint32x4_t v56 = vqaddq_u32(v51, v54);
      uint16x8_t v57 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      uint32x4_t v58 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v57.i8);
      uint32x4_t v59 = vqaddq_u32(v56, vmull_high_u16(v42, v57));
      uint32x4_t v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32((uint32x4_t)v55, v58), v28), a13);
      *(uint16x4_t *)v60.i8 = vqshrn_n_u32(vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL);
      uint32x4_t v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v59, v28), a13);
      uint32x4_t v62 = vsraq_n_u32(v61, v61, 0x10uLL);
      *(int16x4_t *)v55.i8 = vdup_lane_s16(*(int16x4_t *)v60.i8, 3);
      v55.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v62, 0x10uLL), 3);
      int8x16_t v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v60.i8, v62, 0x10uLL), v55));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    int16x8_t v17 = (int8x8_t *)((char *)v17 + v35);
    unint64_t v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v69 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    int16x8_t v70 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    int16x8_t v71 = (int16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v69]));
    int8x16_t v72 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v70)), vrev16q_s8(*(int8x16_t *)&v19->i8[v69]));
    uint32x4_t v73 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8), v28), a13);
    int16x4_t v74 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v73, v73, 0x10uLL), 0x10uLL);
    uint32x4_t v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v71, (uint16x8_t)v70), v28), a13);
    uint32x4_t v76 = vsraq_n_u32(v75, v75, 0x10uLL);
    int16x4_t v77 = (int16x4_t)vqshrn_n_u32(v76, 0x10uLL);
    *(int16x4_t *)v71.i8 = vdup_lane_s16(v74, 3);
    int16x8_t v78 = (int16x8_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1850CD880);
    int8x16_t v79 = (int8x16_t)vminq_u16((uint16x8_t)v72, (uint16x8_t)v78);
    int16x4_t v80 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v79.i8, *(uint16x4_t *)v79.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v78.i8)))));
    uint32x4_t v81 = vmull_lane_u16((uint16x4_t)v80, (uint16x4_t)v74, 3);
    uint16x4_t v82 = vmin_u16((uint16x4_t)v74, *(uint16x4_t *)v71.i8);
    v71.u64[1] = (unint64_t)vdup_lane_s16(v77, 3);
    int8x16_t v83 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v74, v76, 0x10uLL);
    int32x4_t v84 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16((uint16x8_t)v79, (uint16x8_t)v79)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL)))));
    int8x16_t v85 = (int8x16_t)vqsubq_u16((uint16x8_t)v79, (uint16x8_t)vqmovun_high_s32(v80, v84));
    uint32x4_t v86 = vmull_u16(*(uint16x4_t *)v85.i8, v82);
    uint16x4_t v87 = vmin_u16((uint16x4_t)v77, (uint16x4_t)v71.u64[1]);
    uint32x4_t v88 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), v87);
    uint32x4_t v89 = vqaddq_u32(vqaddq_u32(vmull_lane_u16((uint16x4_t)vqmovun_s32(v84), (uint16x4_t)v77, 3), vqaddq_u32(v88, v88)), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v71.u64[1])));
    int8x16_t v90 = vmvnq_s8((int8x16_t)v78);
    uint32x4_t v91 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32(v81, vqaddq_u32(v86, v86)), vmull_u16(*(uint16x4_t *)v79.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v71.i8))), vmull_u16(v82, *(uint16x4_t *)v90.i8)), v28), a13);
    *(uint16x4_t *)v91.i8 = vqshrn_n_u32(vsraq_n_u32(v91, v91, 0x10uLL), 0x10uLL);
    uint32x4_t v92 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v89, vmull_u16(v87, (uint16x4_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL))), v28), a13);
    uint32x4_t v93 = vsraq_n_u32(v92, v92, 0x10uLL);
    *(int16x4_t *)v90.i8 = vdup_lane_s16(*(int16x4_t *)v91.i8, 3);
    v90.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v93, 0x10uLL), 3);
    int8x16_t v94 = vbslq_s8((int8x16_t)vceqzq_s16(v78), v83, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v91.i8, v93, 0x10uLL), (uint16x8_t)v90));
    int8x16_t v15 = (int8x16_t)vceqzq_s16(v71);
    *(int8x16_t *)&v19->i8[v69] = vrev16q_s8(vbslq_s8(v15, v72, v94));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v30 = *(unsigned __int16 *)v20;
    v69 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      int16x8_t v17 = (int8x8_t *)((char *)v17 + v69);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v69);
      goto LABEL_37;
    }
  }
  int16x8_t v17 = (int8x8_t *)((char *)v17 + v27 + v69);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v69);
LABEL_40:
  uint64_t v95 = v16 + a14;
  if (v95)
  {
    if (a7) {
      __int16 v96 = 0;
    }
    else {
      __int16 v96 = -1;
    }
    int8x8_t v97 = 0;
    v97.i16[3] = v96;
    int8x8_t v98 = 0;
    if (a8) {
      __int16 v99 = 0;
    }
    else {
      __int16 v99 = -1;
    }
    v98.i16[3] = v99;
    uint32x4_t v100 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v101.i64[0] = 0x800000008000;
    v101.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int16x4_t v102 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        int8x8_t v103 = vbic_s8(v98, (int8x8_t)vceqz_s16(v102));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v97, vrev16_s8(*v17)), (uint16x4_t)v102), v100), v101);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        int16x4_t v104 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        int16x4_t v105 = (int16x4_t)vorr_s8(v103, vrev16_s8(*v19));
        int16x4_t v106 = vdup_lane_s16(v105, 3);
        uint16x4_t v107 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v104);
        uint16x4_t v108 = vmin_u16((uint16x4_t)v105, (uint16x4_t)v106);
        uint16x4_t v109 = (uint16x4_t)vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(v108, v108)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v106)))));
        uint32x4_t v110 = vmull_lane_u16(v109, *(uint16x4_t *)a13.i8, 3);
        uint32x4_t v111 = vmull_u16(vqsub_u16(v108, v109), v107);
        uint32x4_t v112 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32(v110, vqaddq_u32(v111, v111)), vmull_u16(v108, (uint16x4_t)vmvn_s8((int8x8_t)v104))), vmull_u16(v107, (uint16x4_t)vmvn_s8((int8x8_t)v106))), v100), v101);
        *(uint16x4_t *)v112.i8 = vqshrn_n_u32(vsraq_n_u32(v112, v112, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v104), (int8x8_t)v105, vbsl_s8((int8x8_t)vceqz_s16(v106), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v112.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v112.i8, 3)))));
        *unint64_t v19 = *(int8x8_t *)a13.i8;
      }
      uint32x4_t v113 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v113 >= v18) {
        uint64_t v114 = -(uint64_t)a5;
      }
      else {
        uint64_t v114 = 0;
      }
      int16x8_t v17 = &v113[v114];
      v19 += a6;
      --v95;
    }
    while (v95);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)19,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int8x8_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v17 = a16;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a16 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = -1;
  }
  v23.i64[0] = 0xFFFF000000000000;
  v23.i64[1] = 0xFFFF000000000000;
  int8x16_t v24 = vandq_s8((int8x16_t)vdupq_n_s16(v22), v23);
  if (a8) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = -1;
  }
  int8x16_t v26 = vandq_s8((int8x16_t)vdupq_n_s16(v25), v23);
  uint64_t v27 = 2 * a6;
  uint64_t v28 = 16 * a6;
  float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x37800080u);
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  a14.i32[1] = 0;
  uint32x4_t v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v32.i64[0] = 0x800000008000;
  v32.i64[1] = 0x800000008000;
  while (1)
  {
    __int32 v33 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      uint32x4_t v61 = (int8x16_t *)&v21[v17];
      uint32x4_t v62 = (int8x16_t *)v21;
      do
        uint32x4_t v63 = v62++;
      while (v62 <= v61 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v63)) & 0x80) != 0);
      do
      {
        uint32x4_t v64 = v63;
        uint32x4_t v63 = (int8x16_t *)((char *)v63 + 4);
      }
      while (v63 <= v61 && !v64->i32[0]);
      if (v64 < v61)
      {
        while (!v64->i8[0])
        {
          uint32x4_t v64 = (int8x16_t *)((char *)v64 + 1);
          if (v64 >= v61)
          {
            uint32x4_t v64 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      int64_t v65 = (char *)v64 - v21;
      int64_t v66 = ((char *)v64 - v21) * a6;
      v18 += v66;
      v20 += v66;
      v21 += v66;
      v17 -= v65;
      goto LABEL_37;
    }
    if (v33 != 0xFFFF) {
      break;
    }
    float v34 = (int8x16_t *)&v21[v17];
    uint64_t v35 = (int8x16_t *)v21;
    do
      int64_t v36 = v35++;
    while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, v30)) & 0x80) != 0);
    do
    {
      unint64_t v37 = v36;
      int64_t v36 = (int8x16_t *)((char *)v36 + 4);
    }
    while (v36 <= v34 && v37->i32[0] == -1);
    if (v37 < v34)
    {
      while (v37->u8[0] == 255)
      {
        unint64_t v37 = (int8x16_t *)((char *)v37 + 1);
        if (v37 >= v34)
        {
          unint64_t v37 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    uint64_t v38 = 0;
    int64_t v39 = (char *)v37 - v21;
    unint64_t v40 = (char *)v37 - v21;
    do
    {
      int16x8_t v41 = (int16x8_t)vorrq_s8(v24, vrev16q_s8(*(int8x16_t *)&v18->i8[v38]));
      int8x16_t v42 = vorrq_s8(v26, vrev16q_s8(*(int8x16_t *)&v20->i8[v38]));
      int16x8_t v43 = (int16x8_t)vqtbl1q_s8((int8x16_t)v41, (int8x16_t)xmmword_1850CD880);
      int16x8_t v44 = (int16x8_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v45 = vminq_u16((uint16x8_t)v41, (uint16x8_t)v43);
      uint16x8_t v46 = vminq_u16((uint16x8_t)v42, (uint16x8_t)v44);
      uint16x8_t v47 = vqsubq_u16((uint16x8_t)v44, v46);
      float32x4_t v48 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8));
      float32x4_t v49 = vcvtq_f32_u32(vmovl_high_u16(v47));
      uint16x4_t v50 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v41.i8, 3);
      uint16x4_t v51 = (uint16x4_t)vdup_laneq_s16(v41, 7);
      float32x4_t v52 = vcvtq_f32_u32(vmovl_high_u16(v45));
      float32x4_t v53 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8));
      uint16x8_t v54 = (uint16x8_t)vmvnq_s8((int8x16_t)v43);
      uint32x4_t v55 = vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v54.i8);
      uint32x4_t v56 = vmull_high_u16(v46, v54);
      uint16x8_t v57 = (uint16x8_t)vmvnq_s8((int8x16_t)v44);
      uint32x4_t v58 = vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v57.i8);
      float32x4_t v59 = vaddq_f32(vcvtq_f32_u32(v56), vcvtq_f32_u32(vmull_high_u16(v45, v57)));
      *(int16x4_t *)v56.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v55), vcvtq_f32_u32(v58)), vcvtq_f32_u32(vmull_lane_u16(v50, *(uint16x4_t *)v42.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v48, vcvtq_f32_u32(vmull_lane_u16(v50, *(uint16x4_t *)v41.i8, 3))), v53), (int8x16_t)vceqzq_f32(v48))), v29)));
      int32x4_t v60 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(v59, vcvtq_f32_u32(vmull_laneq_u16(v51, (uint16x8_t)v42, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v49, vcvtq_f32_u32(vmull_laneq_u16(v51, (uint16x8_t)v41, 7))), v52), (int8x16_t)vceqzq_f32(v49))), v29));
      *(int16x4_t *)v48.f32 = vdup_lane_s16(*(int16x4_t *)v56.i8, 3);
      *(int16x4_t *)&v48.u32[2] = vdup_lane_s16(vqmovun_s32(v60), 3);
      int8x16_t v16 = (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v56.i8, v60), (uint16x8_t)v48);
      *(int8x16_t *)&v20->i8[v38] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v43), v42, vbslq_s8((int8x16_t)vceqzq_s16(v44), (int8x16_t)v41, v16)));
      v21 += v27;
      v40 -= 2;
      v38 += v28;
    }
    while (v40 > 1);
    unint64_t v20 = (int8x8_t *)((char *)v20 + v38);
    unint64_t v18 = (int8x8_t *)((char *)v18 + v38);
    unint64_t v17 = v17 - v39 + v40;
LABEL_37:
    if (v17 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v67 = 0;
  while (1)
  {
    v16.i32[0] = v33;
    int16x8_t v68 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v69 = (uint16x8_t)vorrq_s8(v24, vrev16q_s8(*(int8x16_t *)&v18->i8[v67]));
    int8x16_t v70 = vorrq_s8(vbicq_s8(v26, (int8x16_t)vceqzq_s16(v68)), vrev16q_s8(*(int8x16_t *)&v20->i8[v67]));
    int16x8_t v71 = (int16x8_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v69.i8, *(uint16x4_t *)v68.i8), v31), v32);
    int16x4_t v72 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)v71, (uint32x4_t)v71, 0x10uLL), 0x10uLL);
    uint32x4_t v73 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v69, (uint16x8_t)v68), v31), v32);
    uint32x4_t v74 = vsraq_n_u32(v73, v73, 0x10uLL);
    int16x4_t v75 = (int16x4_t)vqshrn_n_u32(v74, 0x10uLL);
    *(int16x4_t *)v71.i8 = vdup_lane_s16(v72, 3);
    uint32x4_t v76 = vmull_lane_u16(*(uint16x4_t *)v71.i8, (uint16x4_t)v72, 3);
    uint16x4_t v77 = vmin_u16((uint16x4_t)v72, *(uint16x4_t *)v71.i8);
    int8x16_t v78 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v72, v74, 0x10uLL);
    v71.u64[1] = (unint64_t)vdup_lane_s16(v75, 3);
    int16x8_t v79 = (int16x8_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_1850CD880);
    int8x16_t v80 = (int8x16_t)vminq_u16((uint16x8_t)v70, (uint16x8_t)v79);
    uint16x8_t v81 = vqsubq_u16((uint16x8_t)v79, (uint16x8_t)v80);
    float32x4_t v82 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v81.i8));
    float32x4_t v83 = vcvtq_f32_u32(vmovl_high_u16(v81));
    uint16x4_t v84 = vmin_u16((uint16x4_t)v75, (uint16x4_t)v71.u64[1]);
    uint32x4_t v85 = vmull_u16(*(uint16x4_t *)v80.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v71.i8));
    uint32x4_t v86 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v71.u64[1]));
    int8x16_t v87 = vmvnq_s8((int8x16_t)v79);
    *(int16x4_t *)v76.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v85), vcvtq_f32_u32(vmull_u16(v77, *(uint16x4_t *)v87.i8))), vcvtq_f32_u32(vmull_lane_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v82, vcvtq_f32_u32(v76)), vcvtq_f32_u32(vmovl_u16(v77))), (int8x16_t)vceqzq_f32(v82))), v29)));
    int32x4_t v88 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v86), vcvtq_f32_u32(vmull_u16(v84, (uint16x4_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)))), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)v71.u64[1], (uint16x8_t)v70, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v83, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v71.u64[1], (uint16x4_t)v75, 3))), vcvtq_f32_u32(vmovl_u16(v84))), (int8x16_t)vceqzq_f32(v83))), v29));
    *(int16x4_t *)v89.i8 = vdup_lane_s16(*(int16x4_t *)v76.i8, 3);
    v89.u64[1] = (unint64_t)vdup_lane_s16(vqmovun_s32(v88), 3);
    int8x16_t v90 = (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v76.i8, v88), v89);
    int8x16_t v16 = (int8x16_t)vceqzq_s16(v79);
    *(int8x16_t *)&v20->i8[v67] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v71), v70, vbslq_s8(v16, v78, v90)));
    v21 += v27;
    v17 -= 2;
    if (v17 < 2) {
      break;
    }
    __int32 v33 = *(unsigned __int16 *)v21;
    v67 += v28;
    if ((unsigned __int16)(v33 - 1) >= 0xFFFEu)
    {
      unint64_t v18 = (int8x8_t *)((char *)v18 + v67);
      unint64_t v20 = (int8x8_t *)((char *)v20 + v67);
      goto LABEL_37;
    }
  }
  unint64_t v18 = (int8x8_t *)((char *)v18 + v28 + v67);
  unint64_t v20 = (int8x8_t *)((char *)v20 + v28 + v67);
LABEL_40:
  uint64_t v91 = v17 + a15;
  if (v91)
  {
    if (a7) {
      __int16 v92 = 0;
    }
    else {
      __int16 v92 = -1;
    }
    int8x8_t v93 = 0;
    v93.i16[3] = v92;
    int8x8_t v94 = 0;
    if (a8) {
      __int16 v95 = 0;
    }
    else {
      __int16 v95 = -1;
    }
    v94.i16[3] = v95;
    uint32x4_t v96 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v97.i64[0] = 0x800000008000;
    v97.i64[1] = 0x800000008000;
    float32x4_t v98 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      if (*v21)
      {
        a14.i32[0] = *v21;
        int16x4_t v99 = (int16x4_t)vdup_lane_s8(a14, 0);
        int16x4_t v100 = (int16x4_t)vorr_s8(vbic_s8(v94, (int8x8_t)vceqz_s16(v99)), vrev16_s8(*v20));
        uint32x4_t v101 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v93, vrev16_s8(*v18)), (uint16x4_t)v99), v96), v97);
        *(uint16x4_t *)v101.i8 = vqshrn_n_u32(vsraq_n_u32(v101, v101, 0x10uLL), 0x10uLL);
        int16x4_t v102 = vdup_lane_s16(*(int16x4_t *)v101.i8, 3);
        int16x4_t v103 = vdup_lane_s16(v100, 3);
        uint16x4_t v104 = vmin_u16(*(uint16x4_t *)v101.i8, (uint16x4_t)v102);
        uint16x4_t v105 = vmin_u16((uint16x4_t)v100, (uint16x4_t)v103);
        float32x4_t v106 = vcvtq_f32_u32(vmovl_u16(vqsub_u16((uint16x4_t)v103, v105)));
        int16x4_t v107 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmull_u16(v105, (uint16x4_t)vmvn_s8((int8x8_t)v102))), vcvtq_f32_u32(vmull_u16(v104, (uint16x4_t)vmvn_s8((int8x8_t)v103)))), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v102, (uint16x4_t)v100, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v106, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v102, *(uint16x4_t *)v101.i8, 3))), vcvtq_f32_u32(vmovl_u16(v104))), (int8x16_t)vceqzq_f32(v106))), v98)));
        a14 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v102), (int8x8_t)v100, vbsl_s8((int8x8_t)vceqz_s16(v103), *(int8x8_t *)v101.i8, (int8x8_t)vmin_u16((uint16x4_t)v107, (uint16x4_t)vdup_lane_s16(v107, 3)))));
        *unint64_t v20 = a14;
      }
      uint16x4_t v108 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v108 >= v19) {
        uint64_t v109 = -(uint64_t)a5;
      }
      else {
        uint64_t v109 = 0;
      }
      unint64_t v18 = &v108[v109];
      v20 += a6;
      --v91;
    }
    while (v91);
  }
  *uint64_t result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)18,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0xFFFFFFFFFFFFLL;
  a13.i64[1] = 0xFFFFFFFFFFFFLL;
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    __int32 v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      uint32x4_t v58 = (int8x16_t *)&v20[v16];
      float32x4_t v59 = (int8x16_t *)v20;
      do
        int32x4_t v60 = v59++;
      while (v59 <= v58 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v60)) & 0x80) != 0);
      do
      {
        uint32x4_t v61 = v60;
        int32x4_t v60 = (int8x16_t *)((char *)v60 + 4);
      }
      while (v60 <= v58 && !v61->i32[0]);
      if (v61 < v58)
      {
        while (!v61->i8[0])
        {
          uint32x4_t v61 = (int8x16_t *)((char *)v61 + 1);
          if (v61 >= v58)
          {
            uint32x4_t v61 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v62 = (char *)v61 - v20;
      int64_t v63 = ((char *)v61 - v20) * a6;
      v17 += v63;
      v19 += v63;
      v20 += v63;
      v16 -= v62;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF) {
      break;
    }
    int32x4_t v32 = (int8x16_t *)&v20[v16];
    __int32 v33 = (int8x16_t *)v20;
    do
      float v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      uint64_t v35 = v34;
      float v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        uint64_t v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          uint64_t v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v36 = 0;
    int64_t v37 = (char *)v35 - v20;
    unint64_t v38 = (char *)v35 - v20;
    do
    {
      int16x8_t v39 = (int16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v36]));
      int8x16_t v40 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v36]));
      int16x8_t v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)v39, (int8x16_t)xmmword_1850CD880);
      int16x8_t v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850CD880);
      int8x16_t v43 = (int8x16_t)vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      int16x8_t v44 = (int16x8_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      uint16x8_t v45 = (uint16x8_t)vandq_s8(v43, (int8x16_t)a13);
      int16x8_t v46 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v44, v44), (int8x16_t)vcgtq_u16((uint16x8_t)v41, v45));
      int8x16_t v47 = (int8x16_t)vmovl_high_s16(v46);
      uint16x8_t v48 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v41, v45), (int8x16_t)vceqzq_s16(v44));
      uint16x8_t v49 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      uint16x8_t v50 = (uint16x8_t)vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44.i8)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v39.i8, 3), *(uint16x4_t *)v39.i8, 3))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v46.i8)), vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v49.i8));
      uint32x4_t v51 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v44)), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v39, 7), (uint16x8_t)v39, 7))), vcvtq_f32_u32(vmovl_high_u16(v48)))), v47), vmull_high_u16((uint16x8_t)v44, v49));
      uint16x8_t v52 = (uint16x8_t)vmvnq_s8((int8x16_t)v42);
      uint32x4_t v53 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v52.i8);
      uint32x4_t v54 = vqaddq_u32(v51, vmull_high_u16((uint16x8_t)v43, v52));
      uint32x4_t v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32((uint32x4_t)v50, v53), v28), v29);
      *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
      uint32x4_t v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v28), v29);
      uint32x4_t v57 = vsraq_n_u32(v56, v56, 0x10uLL);
      *(int16x4_t *)v50.i8 = vdup_lane_s16(*(int16x4_t *)v55.i8, 3);
      v50.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v57, 0x10uLL), 3);
      int8x16_t v15 = vbslq_s8((int8x16_t)vceqzq_s16(v42), (int8x16_t)v39, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v55.i8, v57, 0x10uLL), v50));
      *(int8x16_t *)&v19->i8[v36] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v41), v40, v15));
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v36);
    unint64_t v17 = (int8x8_t *)((char *)v17 + v36);
    unint64_t v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v64 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    int16x8_t v65 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v66 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v64]));
    int8x16_t v67 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v65)), vrev16q_s8(*(int8x16_t *)&v19->i8[v64]));
    uint32x4_t v68 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v66.i8, *(uint16x4_t *)v65.i8), v28), v29);
    int16x4_t v69 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v68, v68, 0x10uLL), 0x10uLL);
    uint32x4_t v70 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v66, (uint16x8_t)v65), v28), v29);
    uint32x4_t v71 = vsraq_n_u32(v70, v70, 0x10uLL);
    int16x4_t v72 = (int16x4_t)vqshrn_n_u32(v71, 0x10uLL);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(v69, 3);
    uint32x4_t v73 = vmull_lane_u16(*(uint16x4_t *)v65.i8, (uint16x4_t)v69, 3);
    uint16x4_t v74 = vmin_u16((uint16x4_t)v69, *(uint16x4_t *)v65.i8);
    v65.u64[1] = (unint64_t)vdup_lane_s16(v72, 3);
    int8x16_t v75 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v69, v71, 0x10uLL);
    int16x8_t v76 = (int16x8_t)vqtbl1q_s8(v67, (int8x16_t)xmmword_1850CD880);
    int16x8_t v77 = (int16x8_t)vminq_u16((uint16x8_t)v67, (uint16x8_t)v76);
    uint16x8_t v78 = (uint16x8_t)vandq_s8((int8x16_t)vminq_u16((uint16x8_t)v75, (uint16x8_t)v65), (int8x16_t)a13);
    int16x8_t v79 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v77, v77), (int8x16_t)vcgtq_u16((uint16x8_t)v65, v78));
    uint16x8_t v80 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v65, v78), (int8x16_t)vceqzq_s16(v77));
    uint32x4_t v81 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v77.i8)), vcvtq_f32_u32(v73)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v80.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v79.i8)), vmull_u16(*(uint16x4_t *)v77.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v65.i8)));
    uint32x4_t v82 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v77)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v65.u64[1], (uint16x4_t)v72, 3))), vcvtq_f32_u32(vmovl_high_u16(v80)))), (int8x16_t)vmovl_high_s16(v79)), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v65.u64[1])));
    int8x16_t v83 = vmvnq_s8((int8x16_t)v76);
    uint32x4_t v84 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v81, vmull_u16(v74, *(uint16x4_t *)v83.i8)), v28), v29);
    *(uint16x4_t *)v84.i8 = vqshrn_n_u32(vsraq_n_u32(v84, v84, 0x10uLL), 0x10uLL);
    uint32x4_t v85 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v82, vmull_u16(vmin_u16((uint16x4_t)v72, (uint16x4_t)v65.u64[1]), (uint16x4_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL))), v28), v29);
    uint32x4_t v86 = vsraq_n_u32(v85, v85, 0x10uLL);
    *(int16x4_t *)v87.i8 = vdup_lane_s16(*(int16x4_t *)v84.i8, 3);
    v87.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v86, 0x10uLL), 3);
    int8x16_t v15 = (int8x16_t)vceqzq_s16(v65);
    *(int8x16_t *)&v19->i8[v64] = vrev16q_s8(vbslq_s8(v15, v67, vbslq_s8((int8x16_t)vceqzq_s16(v76), v75, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v84.i8, v86, 0x10uLL), v87))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v31 = *(unsigned __int16 *)v20;
    v64 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      unint64_t v17 = (int8x8_t *)((char *)v17 + v64);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v64);
      goto LABEL_37;
    }
  }
  unint64_t v17 = (int8x8_t *)((char *)v17 + v27 + v64);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v64);
LABEL_40:
  uint64_t v88 = v16 + a14;
  if (v88)
  {
    if (a7) {
      __int16 v89 = 0;
    }
    else {
      __int16 v89 = -1;
    }
    int8x8_t v90 = 0;
    v90.i16[3] = v89;
    int8x8_t v91 = 0;
    if (a8) {
      __int16 v92 = 0;
    }
    else {
      __int16 v92 = -1;
    }
    v91.i16[3] = v92;
    uint32x4_t v93 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v94.i64[0] = 0x800000008000;
    v94.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int16x4_t v95 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        int16x4_t v96 = (int16x4_t)vorr_s8(vbic_s8(v91, (int8x8_t)vceqz_s16(v95)), vrev16_s8(*v19));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v90, vrev16_s8(*v17)), (uint16x4_t)v95), v93), v94);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        int16x4_t v97 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        int16x4_t v98 = vdup_lane_s16(v96, 3);
        uint16x4_t v99 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v97);
        int16x4_t v100 = (int16x4_t)vmin_u16((uint16x4_t)v96, (uint16x4_t)v98);
        uint32x4_t v101 = vmull_u16(v99, (uint16x4_t)vmvn_s8((int8x8_t)v98));
        v99.i16[3] = 0;
        uint32x4_t v102 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v100)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v97, *(uint16x4_t *)a13.i8, 3))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vqsub_u16((uint16x4_t)v97, v99), (int8x8_t)vceqz_s16(v100)))))), (int8x16_t)vmovl_s16((int16x4_t)vbic_s8((int8x8_t)vtst_s16(v100, v100), (int8x8_t)vcgt_u16((uint16x4_t)v97, v99)))), vmull_u16((uint16x4_t)v100, (uint16x4_t)vmvn_s8((int8x8_t)v97))), v101),
                                          v93),
                             v94);
        *(uint16x4_t *)v102.i8 = vqshrn_n_u32(vsraq_n_u32(v102, v102, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v97), (int8x8_t)v96, vbsl_s8((int8x8_t)vceqz_s16(v98), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v102.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v102.i8, 3)))));
        *unint64_t v19 = *(int8x8_t *)a13.i8;
      }
      int16x4_t v103 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v103 >= v18) {
        uint64_t v104 = -(uint64_t)a5;
      }
      else {
        uint64_t v104 = 0;
      }
      unint64_t v17 = &v103[v104];
      v19 += a6;
      --v88;
    }
    while (v88);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)17,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    __int32 v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      uint32x4_t v51 = (int8x16_t *)&v20[v16];
      uint16x8_t v52 = (int8x16_t *)v20;
      do
        uint32x4_t v53 = v52++;
      while (v52 <= v51 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v53)) & 0x80) != 0);
      do
      {
        uint32x4_t v54 = v53;
        uint32x4_t v53 = (int8x16_t *)((char *)v53 + 4);
      }
      while (v53 <= v51 && !v54->i32[0]);
      if (v54 < v51)
      {
        while (!v54->i8[0])
        {
          uint32x4_t v54 = (int8x16_t *)((char *)v54 + 1);
          if (v54 >= v51)
          {
            uint32x4_t v54 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v55 = (char *)v54 - v20;
      int64_t v56 = ((char *)v54 - v20) * a6;
      v17 += v56;
      v19 += v56;
      v20 += v56;
      v16 -= v55;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    __int32 v31 = (int8x16_t *)&v20[v16];
    int32x4_t v32 = (int8x16_t *)v20;
    do
      __int32 v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      float v34 = v33;
      __int32 v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        float v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          float v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v20;
    unint64_t v37 = (char *)v34 - v20;
    do
    {
      int8x16_t v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      int8x16_t v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      int16x8_t v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850CD880);
      int16x8_t v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      uint16x8_t v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      uint32x4_t v44 = vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3);
      uint16x8_t v45 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      uint32x4_t v46 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v45.i8);
      uint16x8_t v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      uint32x4_t v48 = vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7), vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7)), vmull_high_u16(v42, v45)), vmull_high_u16(v43, v47));
      uint32x4_t v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(v44, vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3)), v46), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8)), v28), a13);
      uint32x4_t v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v28), a13);
      int8x16_t v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    unint64_t v17 = (int8x8_t *)((char *)v17 + v35);
    unint64_t v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v57 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    int16x8_t v58 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v59 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v57]));
    int16x8_t v60 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v58)), vrev16q_s8(*(int8x16_t *)&v19->i8[v57]));
    uint32x4_t v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), v28), a13);
    int16x4_t v62 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
    uint32x4_t v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v59, (uint16x8_t)v58), v28), a13);
    uint32x4_t v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    int16x4_t v65 = (int16x4_t)vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v58.i8 = vdup_lane_s16(v62, 3);
    int16x8_t v66 = (int16x8_t)vqtbl1q_s8((int8x16_t)v60, (int8x16_t)xmmword_1850CD880);
    int8x16_t v67 = (int8x16_t)vminq_u16((uint16x8_t)v60, (uint16x8_t)v66);
    uint16x4_t v68 = vmin_u16((uint16x4_t)v62, *(uint16x4_t *)v58.i8);
    uint32x4_t v69 = vmull_lane_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)v62, 3);
    int8x16_t v70 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v62, v64, 0x10uLL);
    v58.i64[1] = vdupq_lane_s16(v65, 3).u64[0];
    int8x16_t v71 = (int8x16_t)vdupq_laneq_s16(v60, 7);
    uint16x4_t v72 = vmin_u16((uint16x4_t)v65, (uint16x4_t)v58.u64[1]);
    uint16x4_t v73 = (uint16x4_t)vextq_s8(v67, v67, 8uLL).u64[0];
    int8x16_t v74 = vmvnq_s8((int8x16_t)v66);
    uint32x4_t v75 = vqaddq_u32(vmaxq_u32(vmull_lane_u16(v68, *(uint16x4_t *)v60.i8, 3), v69), vmull_u16(v68, *(uint16x4_t *)v74.i8));
    uint32x4_t v76 = vqaddq_u32(vmaxq_u32(vmull_u16(v72, (uint16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)), vmull_high_lane_u16((uint16x8_t)v67, (uint16x4_t)v65, 3)), vmull_u16(v72, (uint16x4_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)));
    uint32x4_t v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v75, vmull_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v58.i8))), v28), a13);
    uint32x4_t v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v76, vmull_u16(v73, (uint16x4_t)vmvn_s8((int8x8_t)v58.u64[1]))), v28), a13);
    int8x16_t v15 = (int8x16_t)vceqzq_s16(v58);
    *(int8x16_t *)&v19->i8[v57] = vrev16q_s8(vbslq_s8(v15, (int8x16_t)v60, vbslq_s8((int8x16_t)vceqzq_s16(v66), v70, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v77, v77, 0x10uLL), 0x10uLL), vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v30 = *(unsigned __int16 *)v20;
    v57 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      unint64_t v17 = (int8x8_t *)((char *)v17 + v57);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  unint64_t v17 = (int8x8_t *)((char *)v17 + v27 + v57);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v57);
LABEL_40:
  uint64_t v79 = v16 + a14;
  if (v79)
  {
    if (a7) {
      __int16 v80 = 0;
    }
    else {
      __int16 v80 = -1;
    }
    int8x8_t v81 = 0;
    v81.i16[3] = v80;
    int8x8_t v82 = 0;
    if (a8) {
      __int16 v83 = 0;
    }
    else {
      __int16 v83 = -1;
    }
    v82.i16[3] = v83;
    uint32x4_t v84 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v85.i64[0] = 0x800000008000;
    v85.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int16x4_t v86 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        int8x8_t v87 = vbic_s8(v82, (int8x8_t)vceqz_s16(v86));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v81, vrev16_s8(*v17)), (uint16x4_t)v86), v84), v85);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        int16x4_t v88 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        int16x4_t v89 = (int16x4_t)vorr_s8(v87, vrev16_s8(*v19));
        int16x4_t v90 = vdup_lane_s16(v89, 3);
        uint16x4_t v91 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v88);
        uint16x4_t v92 = vmin_u16((uint16x4_t)v89, (uint16x4_t)v90);
        uint32x4_t v93 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_lane_u16(v91, (uint16x4_t)v89, 3), vmull_lane_u16(v92, *(uint16x4_t *)a13.i8, 3)), vmull_u16(v91, (uint16x4_t)vmvn_s8((int8x8_t)v90))), vmull_u16(v92, (uint16x4_t)vmvn_s8((int8x8_t)v88))), v84), v85);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v88), (int8x8_t)v89, vbsl_s8((int8x8_t)vceqz_s16(v90), *(int8x8_t *)a13.i8, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v93, v93, 0x10uLL), 0x10uLL))));
        *unint64_t v19 = *(int8x8_t *)a13.i8;
      }
      int32x4_t v94 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v94 >= v18) {
        uint64_t v95 = -(uint64_t)a5;
      }
      else {
        uint64_t v95 = 0;
      }
      unint64_t v17 = &v94[v95];
      v19 += a6;
      --v79;
    }
    while (v79);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)16,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    __int32 v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      uint32x4_t v51 = (int8x16_t *)&v20[v16];
      uint16x8_t v52 = (int8x16_t *)v20;
      do
        uint32x4_t v53 = v52++;
      while (v52 <= v51 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v53)) & 0x80) != 0);
      do
      {
        uint32x4_t v54 = v53;
        uint32x4_t v53 = (int8x16_t *)((char *)v53 + 4);
      }
      while (v53 <= v51 && !v54->i32[0]);
      if (v54 < v51)
      {
        while (!v54->i8[0])
        {
          uint32x4_t v54 = (int8x16_t *)((char *)v54 + 1);
          if (v54 >= v51)
          {
            uint32x4_t v54 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v55 = (char *)v54 - v20;
      int64_t v56 = ((char *)v54 - v20) * a6;
      v17 += v56;
      v19 += v56;
      v20 += v56;
      v16 -= v55;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    __int32 v31 = (int8x16_t *)&v20[v16];
    int32x4_t v32 = (int8x16_t *)v20;
    do
      __int32 v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      float v34 = v33;
      __int32 v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        float v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          float v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v20;
    unint64_t v37 = (char *)v34 - v20;
    do
    {
      int8x16_t v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      int8x16_t v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      int16x8_t v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850CD880);
      int16x8_t v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      uint16x8_t v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      uint32x4_t v44 = vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3);
      uint16x8_t v45 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      uint32x4_t v46 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v45.i8);
      uint16x8_t v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      uint32x4_t v48 = vqaddq_u32(vqaddq_u32(vminq_u32(vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7), vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7)), vmull_high_u16(v42, v45)), vmull_high_u16(v43, v47));
      uint32x4_t v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3), v44), v46), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8)), v28), a13);
      uint32x4_t v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v28), a13);
      int8x16_t v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    unint64_t v17 = (int8x8_t *)((char *)v17 + v35);
    unint64_t v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v57 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    int16x8_t v58 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v59 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v57]));
    int16x8_t v60 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v58)), vrev16q_s8(*(int8x16_t *)&v19->i8[v57]));
    uint32x4_t v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), v28), a13);
    int16x4_t v62 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
    uint32x4_t v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v59, (uint16x8_t)v58), v28), a13);
    uint32x4_t v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    int16x4_t v65 = (int16x4_t)vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v58.i8 = vdup_lane_s16(v62, 3);
    int16x8_t v66 = (int16x8_t)vqtbl1q_s8((int8x16_t)v60, (int8x16_t)xmmword_1850CD880);
    int8x16_t v67 = (int8x16_t)vminq_u16((uint16x8_t)v60, (uint16x8_t)v66);
    uint16x4_t v68 = vmin_u16((uint16x4_t)v62, *(uint16x4_t *)v58.i8);
    uint32x4_t v69 = vmull_lane_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)v62, 3);
    int8x16_t v70 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v62, v64, 0x10uLL);
    v58.i64[1] = vdupq_lane_s16(v65, 3).u64[0];
    int8x16_t v71 = (int8x16_t)vdupq_laneq_s16(v60, 7);
    uint16x4_t v72 = vmin_u16((uint16x4_t)v65, (uint16x4_t)v58.u64[1]);
    uint16x4_t v73 = (uint16x4_t)vextq_s8(v67, v67, 8uLL).u64[0];
    int8x16_t v74 = vmvnq_s8((int8x16_t)v66);
    uint32x4_t v75 = vqaddq_u32(vminq_u32(v69, vmull_lane_u16(v68, *(uint16x4_t *)v60.i8, 3)), vmull_u16(v68, *(uint16x4_t *)v74.i8));
    uint32x4_t v76 = vqaddq_u32(vminq_u32(vmull_high_lane_u16((uint16x8_t)v67, (uint16x4_t)v65, 3), vmull_u16(v72, (uint16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL))), vmull_u16(v72, (uint16x4_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)));
    uint32x4_t v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v75, vmull_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v58.i8))), v28), a13);
    uint32x4_t v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v76, vmull_u16(v73, (uint16x4_t)vmvn_s8((int8x8_t)v58.u64[1]))), v28), a13);
    int8x16_t v15 = (int8x16_t)vceqzq_s16(v58);
    *(int8x16_t *)&v19->i8[v57] = vrev16q_s8(vbslq_s8(v15, (int8x16_t)v60, vbslq_s8((int8x16_t)vceqzq_s16(v66), v70, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v77, v77, 0x10uLL), 0x10uLL), vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v30 = *(unsigned __int16 *)v20;
    v57 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      unint64_t v17 = (int8x8_t *)((char *)v17 + v57);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  unint64_t v17 = (int8x8_t *)((char *)v17 + v27 + v57);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v57);
LABEL_40:
  uint64_t v79 = v16 + a14;
  if (v79)
  {
    if (a7) {
      __int16 v80 = 0;
    }
    else {
      __int16 v80 = -1;
    }
    int8x8_t v81 = 0;
    v81.i16[3] = v80;
    int8x8_t v82 = 0;
    if (a8) {
      __int16 v83 = 0;
    }
    else {
      __int16 v83 = -1;
    }
    v82.i16[3] = v83;
    uint32x4_t v84 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v85.i64[0] = 0x800000008000;
    v85.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int16x4_t v86 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        int8x8_t v87 = vbic_s8(v82, (int8x8_t)vceqz_s16(v86));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v81, vrev16_s8(*v17)), (uint16x4_t)v86), v84), v85);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        int16x4_t v88 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        int16x4_t v89 = (int16x4_t)vorr_s8(v87, vrev16_s8(*v19));
        int16x4_t v90 = vdup_lane_s16(v89, 3);
        uint16x4_t v91 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v88);
        uint16x4_t v92 = vmin_u16((uint16x4_t)v89, (uint16x4_t)v90);
        uint32x4_t v93 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(v91, (uint16x4_t)v89, 3), vmull_lane_u16(v92, *(uint16x4_t *)a13.i8, 3)), vmull_u16(v91, (uint16x4_t)vmvn_s8((int8x8_t)v90))), vmull_u16(v92, (uint16x4_t)vmvn_s8((int8x8_t)v88))), v84), v85);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v88), (int8x8_t)v89, vbsl_s8((int8x8_t)vceqz_s16(v90), *(int8x8_t *)a13.i8, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v93, v93, 0x10uLL), 0x10uLL))));
        *unint64_t v19 = *(int8x8_t *)a13.i8;
      }
      int32x4_t v94 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v94 >= v18) {
        uint64_t v95 = -(uint64_t)a5;
      }
      else {
        uint64_t v95 = 0;
      }
      unint64_t v17 = &v94[v95];
      v19 += a6;
      --v79;
    }
    while (v79);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)15,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v17 = a16;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a16 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = -1;
  }
  v23.i64[0] = 0xFFFF000000000000;
  v23.i64[1] = 0xFFFF000000000000;
  int8x16_t v24 = vandq_s8((int8x16_t)vdupq_n_s16(v22), v23);
  if (a8) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = -1;
  }
  int8x16_t v26 = vandq_s8((int8x16_t)vdupq_n_s16(v25), v23);
  uint64_t v27 = 2 * a6;
  uint64_t v28 = 16 * a6;
  uint32x4_t v29 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a14.i64[0] = 0x800000008000;
  a14.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    __int32 v31 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      uint16x8_t v52 = (int8x16_t *)&v21[v17];
      uint32x4_t v53 = (int8x16_t *)v21;
      do
        uint32x4_t v54 = v53++;
      while (v53 <= v52 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v54)) & 0x80) != 0);
      do
      {
        int64_t v55 = v54;
        uint32x4_t v54 = (int8x16_t *)((char *)v54 + 4);
      }
      while (v54 <= v52 && !v55->i32[0]);
      if (v55 < v52)
      {
        while (!v55->i8[0])
        {
          int64_t v55 = (int8x16_t *)((char *)v55 + 1);
          if (v55 >= v52)
          {
            int64_t v55 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      int64_t v56 = (char *)v55 - v21;
      int64_t v57 = ((char *)v55 - v21) * a6;
      v18 += v57;
      v20 += v57;
      v21 += v57;
      v17 -= v56;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF) {
      break;
    }
    int32x4_t v32 = (int8x16_t *)&v21[v17];
    __int32 v33 = (int8x16_t *)v21;
    do
      float v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      uint64_t v35 = v34;
      float v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        uint64_t v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          uint64_t v35 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    uint64_t v36 = 0;
    int64_t v37 = (char *)v35 - v21;
    unint64_t v38 = (char *)v35 - v21;
    do
    {
      int16x8_t v39 = (int16x8_t)vorrq_s8(v24, vrev16q_s8(*(int8x16_t *)&v18->i8[v36]));
      int8x16_t v40 = vorrq_s8(v26, vrev16q_s8(*(int8x16_t *)&v20->i8[v36]));
      int16x8_t v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)v39, (int8x16_t)xmmword_1850CD880);
      int16x8_t v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850CD880);
      int16x8_t v43 = (int16x8_t)vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      int16x8_t v44 = (int16x8_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      uint16x8_t v45 = (uint16x8_t)vsubq_s16(v41, v43);
      uint16x8_t v46 = (uint16x8_t)vsubq_s16(v42, v44);
      int16x8_t v47 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v42, (uint16x8_t)0), (uint16x8_t)v44);
      int8x16_t v48 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v44.i8), vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v43.i8));
      int8x16_t v49 = (int8x16_t)vqaddq_u32(vmull_high_u16(v45, (uint16x8_t)v44), vmull_high_u16(v46, (uint16x8_t)v43));
      uint32x4_t v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v47.i8), v48, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v39.i8, 3), *(uint16x4_t *)v40.i8, 3), (uint32x4_t)v48)), v29), a14);
      uint32x4_t v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v47), v49, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v39, 7), (uint16x8_t)v40, 7), (uint32x4_t)v49)), v29), a14);
      int8x16_t v16 = (int8x16_t)vceqzq_s16(v42);
      *(int8x16_t *)&v20->i8[v36] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v41), v40, vbslq_s8(v16, (int8x16_t)v39, (int8x16_t)vsubq_s16(vaddq_s16(v44, v43), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL), vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL)))));
      v21 += v27;
      v38 -= 2;
      v36 += v28;
    }
    while (v38 > 1);
    unint64_t v20 = (int8x8_t *)((char *)v20 + v36);
    unint64_t v18 = (int8x8_t *)((char *)v18 + v36);
    unint64_t v17 = v17 - v37 + v38;
LABEL_37:
    if (v17 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v58 = 0;
  while (1)
  {
    v16.i32[0] = v31;
    int16x8_t v59 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v60 = (uint16x8_t)vorrq_s8(v24, vrev16q_s8(*(int8x16_t *)&v18->i8[v58]));
    int8x16_t v61 = vorrq_s8(vbicq_s8(v26, (int8x16_t)vceqzq_s16(v59)), vrev16q_s8(*(int8x16_t *)&v20->i8[v58]));
    uint32x4_t v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v59.i8), v29), a14);
    *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
    uint32x4_t v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v60, (uint16x8_t)v59), v29), a14);
    uint32x4_t v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    *(uint16x4_t *)v59.i8 = vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(*(int16x4_t *)v62.i8, 3);
    uint16x4_t v66 = vmin_u16(*(uint16x4_t *)v62.i8, *(uint16x4_t *)v65.i8);
    int8x16_t v67 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v62.i8, v64, 0x10uLL);
    v65.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v59.i8, 3);
    int16x8_t v68 = (int16x8_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_1850CD880);
    int16x8_t v69 = (int16x8_t)vminq_u16((uint16x8_t)v67, v65);
    int16x8_t v70 = (int16x8_t)vminq_u16((uint16x8_t)v61, (uint16x8_t)v68);
    uint16x8_t v71 = (uint16x8_t)vsubq_s16((int16x8_t)v65, v69);
    int8x16_t v72 = (int8x16_t)vsubq_s16(v68, v70);
    uint32x4_t v73 = vmull_u16(*(uint16x4_t *)v72.i8, v66);
    uint32x4_t v74 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), vmin_u16(*(uint16x4_t *)v59.i8, (uint16x4_t)v65.u64[1]));
    int16x8_t v75 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v68, (uint16x8_t)0), (uint16x8_t)v70);
    int8x16_t v76 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8), v73);
    int8x16_t v77 = (int8x16_t)vqaddq_u32(vmull_high_u16(v71, (uint16x8_t)v70), v74);
    uint32x4_t v78 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v75), v77, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)v65.u64[1], (uint16x8_t)v61, 7), (uint32x4_t)v77));
    uint32x4_t v79 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v75.i8), v76, (int8x16_t)vqsubq_u32(vmull_lane_u16(*(uint16x4_t *)v65.i8, *(uint16x4_t *)v61.i8, 3), (uint32x4_t)v76)), v29), a14);
    uint32x4_t v80 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v78, v29), a14);
    int8x16_t v81 = (int8x16_t)vsubq_s16(vaddq_s16(v70, v69), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v79, v79, 0x10uLL), 0x10uLL), vsraq_n_u32(v80, v80, 0x10uLL), 0x10uLL));
    int8x16_t v16 = (int8x16_t)vceqzq_s16(v68);
    *(int8x16_t *)&v20->i8[v58] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)v65), v61, vbslq_s8(v16, v67, v81)));
    v21 += v27;
    v17 -= 2;
    if (v17 < 2) {
      break;
    }
    __int32 v31 = *(unsigned __int16 *)v21;
    v58 += v28;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      unint64_t v18 = (int8x8_t *)((char *)v18 + v58);
      unint64_t v20 = (int8x8_t *)((char *)v20 + v58);
      goto LABEL_37;
    }
  }
  unint64_t v18 = (int8x8_t *)((char *)v18 + v28 + v58);
  unint64_t v20 = (int8x8_t *)((char *)v20 + v28 + v58);
LABEL_40:
  uint64_t v82 = v17 + a15;
  if (v82)
  {
    if (a7) {
      __int16 v83 = 0;
    }
    else {
      __int16 v83 = -1;
    }
    int8x8_t v84 = 0;
    v84.i16[3] = v83;
    if (a8) {
      __int16 v85 = 0;
    }
    else {
      __int16 v85 = -1;
    }
    int8x8_t v86 = 0;
    v86.i16[3] = v85;
    uint32x4_t v87 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v88.i64[0] = 0x800000008000;
    v88.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a14.i32[0] = *v21;
        int16x4_t v89 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a14.i8, 0);
        int16x4_t v90 = (int16x4_t)vorr_s8(vbic_s8(v86, (int8x8_t)vceqz_s16(v89)), vrev16_s8(*v20));
        uint32x4_t v91 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v84, vrev16_s8(*v18)), (uint16x4_t)v89), v87), v88);
        *(uint16x4_t *)v91.i8 = vqshrn_n_u32(vsraq_n_u32(v91, v91, 0x10uLL), 0x10uLL);
        int16x4_t v92 = vdup_lane_s16(*(int16x4_t *)v91.i8, 3);
        int16x4_t v93 = vdup_lane_s16(v90, 3);
        int16x4_t v94 = (int16x4_t)vmin_u16(*(uint16x4_t *)v91.i8, (uint16x4_t)v92);
        int16x4_t v95 = (int16x4_t)vmin_u16((uint16x4_t)v90, (uint16x4_t)v93);
        int8x16_t v96 = (int8x16_t)vqaddq_u32(vmull_u16((uint16x4_t)vsub_s16(v92, v94), (uint16x4_t)v95), vmull_u16((uint16x4_t)vsub_s16(v93, v95), (uint16x4_t)v94));
        uint32x4_t v97 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)vcgt_u16(vrhadd_u16((uint16x4_t)v93, 0), (uint16x4_t)v95)), v96, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v92, (uint16x4_t)v90, 3), (uint32x4_t)v96)), v87), v88);
        *(int8x8_t *)a14.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v92), (int8x8_t)v90, vbsl_s8((int8x8_t)vceqz_s16(v93), *(int8x8_t *)v91.i8, (int8x8_t)vsub_s16(vadd_s16(v95, v94), (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v97, v97, 0x10uLL), 0x10uLL)))));
        *unint64_t v20 = *(int8x8_t *)a14.i8;
      }
      int16x4_t v98 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v98 >= v19) {
        uint64_t v99 = -(uint64_t)a5;
      }
      else {
        uint64_t v99 = 0;
      }
      unint64_t v18 = &v98[v99];
      v20 += a6;
      --v82;
    }
    while (v82);
  }
  *uint64_t result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)14,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    __int32 v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      int16x8_t v43 = (int8x16_t *)&v20[v16];
      int16x8_t v44 = (int8x16_t *)v20;
      do
        uint16x8_t v45 = v44++;
      while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v45)) & 0x80) != 0);
      do
      {
        uint16x8_t v46 = v45;
        uint16x8_t v45 = (int8x16_t *)((char *)v45 + 4);
      }
      while (v45 <= v43 && !v46->i32[0]);
      if (v46 < v43)
      {
        while (!v46->i8[0])
        {
          uint16x8_t v46 = (int8x16_t *)((char *)v46 + 1);
          if (v46 >= v43)
          {
            uint16x8_t v46 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v47 = (char *)v46 - v20;
      int64_t v48 = ((char *)v46 - v20) * a6;
      v17 += v48;
      v19 += v48;
      v20 += v48;
      v16 -= v47;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    __int32 v31 = (int8x16_t *)&v20[v16];
    int32x4_t v32 = (int8x16_t *)v20;
    do
      __int32 v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      float v34 = v33;
      __int32 v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        float v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          float v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v20;
    unint64_t v37 = (char *)v34 - v20;
    do
    {
      int8x16_t v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      int8x16_t v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      uint16x8_t v40 = (uint16x8_t)vbicq_s8(v39, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850CD880)));
      uint32x4_t v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v40.i8), v28), a13);
      uint32x4_t v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v38, v40), v28), a13);
      int8x16_t v15 = (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850CD880));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8(v15, v39, (int8x16_t)vqaddq_u16(vqsubq_u16((uint16x8_t)v38, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL), vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL)), v40)));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    unint64_t v17 = (int8x8_t *)((char *)v17 + v35);
    unint64_t v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v49 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    int16x8_t v50 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v51 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v49]));
    int8x16_t v52 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v50)), vrev16q_s8(*(int8x16_t *)&v19->i8[v49]));
    uint32x4_t v53 = vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8);
    uint32x4_t v54 = vmull_high_u16(v51, (uint16x8_t)v50);
    uint32x4_t v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v53, v28), a13);
    *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
    uint32x4_t v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v28), a13);
    uint32x4_t v57 = vsraq_n_u32(v56, v56, 0x10uLL);
    *(uint16x4_t *)v53.i8 = vqshrn_n_u32(v57, 0x10uLL);
    *(int16x4_t *)v58.i8 = vdup_lane_s16(*(int16x4_t *)v55.i8, 3);
    int8x16_t v59 = vbicq_s8(v52, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1850CD880)));
    uint32x4_t v60 = vmull_u16(*(uint16x4_t *)v55.i8, *(uint16x4_t *)v59.i8);
    uint16x8_t v61 = vqshrn_high_n_u32(*(uint16x4_t *)v55.i8, v57, 0x10uLL);
    v58.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v53.i8, 3);
    uint32x4_t v62 = vmull_u16(*(uint16x4_t *)v53.i8, (uint16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
    uint32x4_t v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v60, v28), a13);
    uint32x4_t v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v62, v28), a13);
    int8x16_t v65 = (int8x16_t)vqaddq_u16(vqsubq_u16(v61, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL), vsraq_n_u32(v64, v64, 0x10uLL), 0x10uLL)), (uint16x8_t)v59);
    int8x16_t v15 = (int8x16_t)vceqzq_s16(v58);
    *(int8x16_t *)&v19->i8[v49] = vrev16q_s8(vbslq_s8(v15, v52, v65));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v30 = *(unsigned __int16 *)v20;
    v49 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      unint64_t v17 = (int8x8_t *)((char *)v17 + v49);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v49);
      goto LABEL_37;
    }
  }
  unint64_t v17 = (int8x8_t *)((char *)v17 + v27 + v49);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v49);
LABEL_40:
  uint64_t v66 = v16 + a14;
  if (v66)
  {
    if (a7) {
      __int16 v67 = 0;
    }
    else {
      __int16 v67 = -1;
    }
    int8x8_t v68 = 0;
    v68.i16[3] = v67;
    int8x8_t v69 = 0;
    if (a8) {
      __int16 v70 = 0;
    }
    else {
      __int16 v70 = -1;
    }
    v69.i16[3] = v70;
    uint32x4_t v71 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v72.i64[0] = 0x800000008000;
    v72.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int16x4_t v73 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        int16x4_t v74 = (int16x4_t)vorr_s8(vbic_s8(v69, (int8x8_t)vceqz_s16(v73)), vrev16_s8(*v19));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v68, vrev16_s8(*v17)), (uint16x4_t)v73), v71), v72);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        uint16x4_t v75 = (uint16x4_t)vbic_s8((int8x8_t)v74, (int8x8_t)vdup_lane_s16(vceqz_s16(v74), 3));
        uint32x4_t v76 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)a13.i8, v75), v71), v72);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vdup_lane_s16(vceqz_s16(*(int16x4_t *)a13.i8), 3), (int8x8_t)v74, (int8x8_t)vqadd_u16(vqsub_u16(*(uint16x4_t *)a13.i8, vqshrn_n_u32(vsraq_n_u32(v76, v76, 0x10uLL), 0x10uLL)), v75)));
        *unint64_t v19 = *(int8x8_t *)a13.i8;
      }
      int8x16_t v77 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v77 >= v18) {
        uint64_t v78 = -(uint64_t)a5;
      }
      else {
        uint64_t v78 = 0;
      }
      unint64_t v17 = &v77[v78];
      v19 += a6;
      --v66;
    }
    while (v66);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)13,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    __int32 v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      uint32x4_t v53 = (int8x16_t *)&v20[v16];
      uint32x4_t v54 = (int8x16_t *)v20;
      do
        uint32x4_t v55 = v54++;
      while (v54 <= v53 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v55)) & 0x80) != 0);
      do
      {
        uint32x4_t v56 = v55;
        uint32x4_t v55 = (int8x16_t *)((char *)v55 + 4);
      }
      while (v55 <= v53 && !v56->i32[0]);
      if (v56 < v53)
      {
        while (!v56->i8[0])
        {
          uint32x4_t v56 = (int8x16_t *)((char *)v56 + 1);
          if (v56 >= v53)
          {
            uint32x4_t v56 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v57 = (char *)v56 - v20;
      int64_t v58 = ((char *)v56 - v20) * a6;
      v17 += v58;
      v19 += v58;
      v20 += v58;
      v16 -= v57;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    __int32 v31 = (int8x16_t *)&v20[v16];
    int32x4_t v32 = (int8x16_t *)v20;
    do
      __int32 v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      float v34 = v33;
      __int32 v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        float v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          float v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v20;
    unint64_t v37 = (char *)v34 - v20;
    do
    {
      int8x16_t v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      int8x16_t v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      int16x8_t v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850CD880);
      int16x8_t v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850CD880);
      int8x16_t v42 = (int8x16_t)vceqzq_s16(v41);
      uint16x8_t v43 = (uint16x8_t)vbicq_s8(v39, v42);
      uint32x4_t v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v43.i8), v28), a13);
      uint32x4_t v45 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v38, v43), v28), a13);
      uint16x8_t v46 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v44, v44, 0x10uLL), 0x10uLL), vsraq_n_u32(v45, v45, 0x10uLL), 0x10uLL);
      uint16x8_t v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      uint16x8_t v48 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      uint32x4_t v49 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v47.i8), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8));
      uint32x4_t v50 = vqaddq_u32(vmull_high_u16((uint16x8_t)v38, v47), vmull_high_u16(v43, v48));
      uint32x4_t v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v28), a13);
      uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v28), a13);
      int8x16_t v15 = (int8x16_t)vceqzq_s16(v40);
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8(v15, v39, vbslq_s8(v42, v38, (int8x16_t)vqaddq_u16(v46, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL), vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL)))));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    unint64_t v17 = (int8x8_t *)((char *)v17 + v35);
    unint64_t v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v59 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    int16x8_t v60 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v61 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v59]));
    int8x16_t v62 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v60)), vrev16q_s8(*(int8x16_t *)&v19->i8[v59]));
    uint32x4_t v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v60.i8), v28), a13);
    *(uint16x4_t *)v63.i8 = vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL);
    uint32x4_t v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v61, (uint16x8_t)v60), v28), a13);
    uint32x4_t v65 = vsraq_n_u32(v64, v64, 0x10uLL);
    *(uint16x4_t *)v61.i8 = vqshrn_n_u32(v65, 0x10uLL);
    *(int16x4_t *)v66.i8 = vdup_lane_s16(*(int16x4_t *)v63.i8, 3);
    int16x8_t v67 = (int16x8_t)vqtbl1q_s8(v62, (int8x16_t)xmmword_1850CD880);
    int8x16_t v68 = (int8x16_t)vceqzq_s16(v67);
    int8x16_t v69 = vbicq_s8(v62, v68);
    uint32x4_t v70 = vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v69.i8);
    int8x16_t v71 = vmvnq_s8((int8x16_t)v67);
    uint32x4_t v72 = vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v71.i8);
    v66.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v61.i8, 3);
    int8x16_t v73 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v63.i8, v65, 0x10uLL);
    v65.i64[0] = vextq_s8(v69, v69, 8uLL).u64[0];
    uint32x4_t v74 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v70, v28), a13);
    uint32x4_t v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v65.i8), v28), a13);
    uint32x4_t v76 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v61.i8, (uint16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)), vmull_u16(*(uint16x4_t *)v65.i8, (uint16x4_t)vmvn_s8((int8x8_t)v66.u64[1])));
    uint32x4_t v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v72, vmull_u16(*(uint16x4_t *)v69.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v66.i8))), v28), a13);
    uint32x4_t v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v76, v28), a13);
    int8x16_t v79 = vbslq_s8(v68, v73, (int8x16_t)vqaddq_u16(vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v74, v74, 0x10uLL), 0x10uLL), vsraq_n_u32(v75, v75, 0x10uLL), 0x10uLL), vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v77, v77, 0x10uLL), 0x10uLL), vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL)));
    int8x16_t v15 = (int8x16_t)vceqzq_s16(v66);
    *(int8x16_t *)&v19->i8[v59] = vrev16q_s8(vbslq_s8(v15, v62, v79));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v30 = *(unsigned __int16 *)v20;
    v59 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      unint64_t v17 = (int8x8_t *)((char *)v17 + v59);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v59);
      goto LABEL_37;
    }
  }
  unint64_t v17 = (int8x8_t *)((char *)v17 + v27 + v59);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v59);
LABEL_40:
  uint64_t v80 = v16 + a14;
  if (v80)
  {
    if (a7) {
      __int16 v81 = 0;
    }
    else {
      __int16 v81 = -1;
    }
    int8x8_t v82 = 0;
    v82.i16[3] = v81;
    int8x8_t v83 = 0;
    if (a8) {
      __int16 v84 = 0;
    }
    else {
      __int16 v84 = -1;
    }
    v83.i16[3] = v84;
    uint32x4_t v85 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v86.i64[0] = 0x800000008000;
    v86.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int16x4_t v87 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        int16x4_t v88 = (int16x4_t)vorr_s8(vbic_s8(v83, (int8x8_t)vceqz_s16(v87)), vrev16_s8(*v19));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v82, vrev16_s8(*v17)), (uint16x4_t)v87), v85), v86);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        int16x4_t v89 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        int16x4_t v90 = vdup_lane_s16(v88, 3);
        int8x8_t v91 = (int8x8_t)vceqz_s16(v90);
        uint16x4_t v92 = (uint16x4_t)vbic_s8((int8x8_t)v88, v91);
        uint32x4_t v93 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)a13.i8, v92), v85), v86);
        uint32x4_t v94 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)vmvn_s8((int8x8_t)v90)), vmull_u16(v92, (uint16x4_t)vmvn_s8((int8x8_t)v89))), v85), v86);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v89), (int8x8_t)v88, vbsl_s8(v91, *(int8x8_t *)a13.i8, (int8x8_t)vqadd_u16(vqshrn_n_u32(vsraq_n_u32(v93, v93, 0x10uLL), 0x10uLL), vqshrn_n_u32(vsraq_n_u32(v94, v94, 0x10uLL), 0x10uLL)))));
        *unint64_t v19 = *(int8x8_t *)a13.i8;
      }
      int16x4_t v95 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v95 >= v18) {
        uint64_t v96 = -(uint64_t)a5;
      }
      else {
        uint64_t v96 = 0;
      }
      unint64_t v17 = &v95[v96];
      v19 += a6;
      --v80;
    }
    while (v80);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)12,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, uint32x4_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18 = a18;
  unint64_t v19 = *result;
  unint64_t v20 = *a3;
  unsigned int v21 = *a2;
  int8x16_t v22 = *a4;
  if (a18 < 2) {
    goto LABEL_37;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a11 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  while (1)
  {
    unsigned __int32 v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      int8x16_t v38 = (int8x16_t *)&v22[v18];
      int8x16_t v39 = (int8x16_t *)v22;
      do
        int16x8_t v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v40)) & 0x80) != 0);
      do
      {
        int16x8_t v41 = v40;
        int16x8_t v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && !v41->i32[0]);
      if (v41 < v38)
      {
        while (!v41->i8[0])
        {
          int16x8_t v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            int16x8_t v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      int64_t v42 = (char *)v41 - v22;
      int64_t v43 = ((char *)v41 - v22) * a6;
      v19 += v43;
      v21 += v43;
      v22 += v43;
      v18 -= v42;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    __int32 v31 = (int8x16_t *)&v22[v18];
    int32x4_t v32 = (int8x16_t *)v22;
    do
      __int32 v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v28)) & 0x80) != 0);
    do
    {
      float v34 = v33;
      __int32 v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        float v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          float v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v22;
    unint64_t v37 = (char *)v34 - v22;
    do
    {
      *(int8x16_t *)&v21->i8[v35] = vrev16q_s8((int8x16_t)vqaddq_u16((uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v35]), (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]))));
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    unsigned int v21 = (int8x8_t *)((char *)v21 + v35);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    unint64_t v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1) {
      goto LABEL_37;
    }
  }
  uint64_t v44 = 0;
  while (1)
  {
    a15.i32[0] = v30;
    uint16x8_t v45 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v46 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v44]));
    uint32x4_t v47 = vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v45.i8);
    uint32x4_t v48 = vmull_high_u16(v46, v45);
    uint32x4_t v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v47, a11), v29);
    uint32x4_t v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, a11), v29);
    a15 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL);
    *(int8x16_t *)&v21->i8[v44] = vrev16q_s8((int8x16_t)vqaddq_u16((uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v44]), a15));
    v22 += v26;
    v18 -= 2;
    if (v18 < 2) {
      break;
    }
    unsigned __int32 v30 = *(unsigned __int16 *)v22;
    v44 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      unint64_t v19 = (int8x8_t *)((char *)v19 + v44);
      unsigned int v21 = (int8x8_t *)((char *)v21 + v44);
      goto LABEL_34;
    }
  }
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v44);
  unsigned int v21 = (int8x8_t *)((char *)v21 + v27 + v44);
LABEL_37:
  uint64_t v51 = v18 + a17;
  if (v51)
  {
    int8x8_t v52 = 0;
    if (a7) {
      __int16 v53 = 0;
    }
    else {
      __int16 v53 = -1;
    }
    v52.i16[3] = v53;
    uint32x4_t v54 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v55.i64[0] = 0x800000008000;
    v55.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        a11 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v52, vrev16_s8(*v19)), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a11.i8, 0)), v54), v55);
        *(int8x8_t *)a11.i8 = vrev16_s8((int8x8_t)vqadd_u16((uint16x4_t)vrev16_s8(*v21), vqshrn_n_u32(vsraq_n_u32(a11, a11, 0x10uLL), 0x10uLL)));
        *unsigned int v21 = *(int8x8_t *)a11.i8;
      }
      uint32x4_t v56 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v56 >= v20) {
        uint64_t v57 = -(uint64_t)a5;
      }
      else {
        uint64_t v57 = 0;
      }
      unint64_t v19 = &v56[v57];
      v21 += a6;
      --v51;
    }
    while (v51);
  }
  *uint64_t result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)11,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int8x8_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 2) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  int8x16_t v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a13.i32[1] = 0;
  uint32x4_t v29 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v30.i64[0] = 0x800000008000;
  v30.i64[1] = 0x800000008000;
  while (1)
  {
    __int32 v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      int64_t v42 = (int8x16_t *)&v20[v16];
      int64_t v43 = (int8x16_t *)v20;
      do
        uint64_t v44 = v43++;
      while (v43 <= v42 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v44)) & 0x80) != 0);
      do
      {
        uint16x8_t v45 = v44;
        uint64_t v44 = (int8x16_t *)((char *)v44 + 4);
      }
      while (v44 <= v42 && !v45->i32[0]);
      if (v45 < v42)
      {
        while (!v45->i8[0])
        {
          uint16x8_t v45 = (int8x16_t *)((char *)v45 + 1);
          if (v45 >= v42)
          {
            uint16x8_t v45 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      int64_t v46 = (char *)v45 - v20;
      int64_t v47 = ((char *)v45 - v20) * a6;
      v17 += v47;
      v19 += v47;
      v20 += v47;
      v16 -= v46;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF) {
      break;
    }
    int32x4_t v32 = (int8x16_t *)&v20[v16];
    __int32 v33 = (int8x16_t *)v20;
    do
      float v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v28)) & 0x80) != 0);
    do
    {
      uint64_t v35 = v34;
      float v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        uint64_t v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          uint64_t v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    uint64_t v36 = 0;
    int64_t v37 = (char *)v35 - v20;
    unint64_t v38 = (char *)v35 - v20;
    do
    {
      int8x16_t v39 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v36]));
      int8x16_t v40 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v36]));
      int8x16_t v15 = vqtbl1q_s8(v39, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v41 = (uint16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850CD880);
      *(int8x16_t *)&v19->i8[v36] = vrev16q_s8((int8x16_t)vqsubq_u16(vqaddq_u16(v41, (uint16x8_t)v15), vqaddq_u16(vqsubq_u16((uint16x8_t)v15, (uint16x8_t)v39), vqsubq_u16(v41, (uint16x8_t)v40))));
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    unint64_t v19 = (int8x8_t *)((char *)v19 + v36);
    unint64_t v17 = (int8x8_t *)((char *)v17 + v36);
    unint64_t v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1) {
      goto LABEL_40;
    }
  }
  uint64_t v48 = 0;
  while (1)
  {
    int8x16_t v49 = vrev16q_s8(*(int8x16_t *)&v19->i8[v48]);
    v15.i32[0] = v31;
    int16x8_t v50 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v51 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v48]));
    int8x16_t v52 = (int8x16_t)vceqzq_s16(v50);
    int8x16_t v53 = vorrq_s8(vbicq_s8(v25, v52), v49);
    uint32x4_t v54 = vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8);
    uint32x4_t v55 = vmull_high_u16(v51, (uint16x8_t)v50);
    uint32x4_t v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v29), v30);
    *(uint16x4_t *)v56.i8 = vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL);
    uint32x4_t v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v55, v29), v30);
    uint32x4_t v58 = vsraq_n_u32(v57, v57, 0x10uLL);
    *(int16x4_t *)v59.i8 = vdup_lane_s16(*(int16x4_t *)v56.i8, 3);
    uint16x8_t v60 = vqshrn_high_n_u32(*(uint16x4_t *)v56.i8, v58, 0x10uLL);
    v59.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v58, 0x10uLL), 3);
    uint16x8_t v61 = (uint16x8_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1850CD880);
    int8x16_t v15 = (int8x16_t)vqsubq_u16(v59, v60);
    *(int8x16_t *)&v19->i8[v48] = vrev16q_s8(vbslq_s8(v52, v49, (int8x16_t)vqsubq_u16(vqaddq_u16(v61, v59), vqaddq_u16((uint16x8_t)v15, vqsubq_u16(v61, (uint16x8_t)v53)))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2) {
      break;
    }
    __int32 v31 = *(unsigned __int16 *)v20;
    v48 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      unint64_t v17 = (int8x8_t *)((char *)v17 + v48);
      unint64_t v19 = (int8x8_t *)((char *)v19 + v48);
      goto LABEL_37;
    }
  }
  unint64_t v17 = (int8x8_t *)((char *)v17 + v27 + v48);
  unint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v48);
LABEL_40:
  uint64_t v62 = v16 + a14;
  if (v62)
  {
    if (a7) {
      __int16 v63 = 0;
    }
    else {
      __int16 v63 = -1;
    }
    int8x8_t v64 = 0;
    v64.i16[3] = v63;
    int8x8_t v65 = 0;
    if (a8) {
      __int16 v66 = 0;
    }
    else {
      __int16 v66 = -1;
    }
    v65.i16[3] = v66;
    uint32x4_t v67 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v68.i64[0] = 0x800000008000;
    v68.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        int8x8_t v69 = vrev16_s8(*v19);
        int16x4_t v70 = (int16x4_t)vdup_lane_s8(a13, 0);
        int8x8_t v71 = (int8x8_t)vceqz_s16(v70);
        int16x4_t v72 = (int16x4_t)vorr_s8(vbic_s8(v65, v71), v69);
        uint32x4_t v73 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v64, vrev16_s8(*v17)), (uint16x4_t)v70), v67), v68);
        *(uint16x4_t *)v73.i8 = vqshrn_n_u32(vsraq_n_u32(v73, v73, 0x10uLL), 0x10uLL);
        uint16x4_t v74 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v73.i8, 3);
        uint16x4_t v75 = (uint16x4_t)vdup_lane_s16(v72, 3);
        a13 = vrev16_s8(vbsl_s8(v71, v69, (int8x8_t)vqsub_u16(vqadd_u16(v75, v74), vqadd_u16(vqsub_u16(v74, *(uint16x4_t *)v73.i8), vqsub_u16(v75, (uint16x4_t)v72)))));
        *unint64_t v19 = a13;
      }
      uint32x4_t v76 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v76 >= v18) {
        uint64_t v77 = -(uint64_t)a5;
      }
      else {
        uint64_t v77 = 0;
      }
      unint64_t v17 = &v76[v77];
      v19 += a6;
      --v62;
    }
    while (v62);
  }
  *uint64_t result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)10,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a17 < 2) {
    goto LABEL_34;
  }
  uint64_t v22 = 2 * a6;
  uint64_t v23 = 16 * a6;
  uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      uint16x8_t v41 = (int8x16_t *)&v21[v17];
      int64_t v42 = (int8x16_t *)v21;
      do
        int64_t v43 = v42++;
      while (v42 <= v41 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v43)) & 0x80) != 0);
      do
      {
        uint64_t v44 = v43;
        int64_t v43 = (int8x16_t *)((char *)v43 + 4);
      }
      while (v43 <= v41 && !v44->i32[0]);
      if (v44 < v41)
      {
        while (!v44->i8[0])
        {
          uint64_t v44 = (int8x16_t *)((char *)v44 + 1);
          if (v44 >= v41)
          {
            uint64_t v44 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      int64_t v45 = (char *)v44 - v21;
      int64_t v46 = ((char *)v44 - v21) * a6;
      v18 += v46;
      v20 += v46;
      v21 += v46;
      v17 -= v45;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF) {
      break;
    }
    uint64_t v27 = (int8x16_t *)&v21[v17];
    int8x16_t v28 = (int8x16_t *)v21;
    do
      uint32x4_t v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      int32x4_t v30 = v29;
      uint32x4_t v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        int32x4_t v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          int32x4_t v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    uint64_t v31 = 0;
    int64_t v32 = (char *)v30 - v21;
    unint64_t v33 = (char *)v30 - v21;
    do
    {
      int8x16_t v34 = vrev16q_s8(*(int8x16_t *)&v18->i8[v31]);
      int8x16_t v35 = vrev16q_s8(*(int8x16_t *)&v20->i8[v31]);
      a13 = vmvnq_s8(v35);
      uint16x8_t v36 = (uint16x8_t)vmvnq_s8(v34);
      uint32x4_t v37 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)a13.i8, 3), vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v36.i8, 3));
      uint32x4_t v38 = vqaddq_u32(vmull_high_laneq_u16((uint16x8_t)v34, (uint16x8_t)a13, 7), vmull_high_laneq_u16((uint16x8_t)v35, v36, 7));
      uint32x4_t v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v24), v25);
      uint32x4_t v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v38, v24), v25);
      *(int8x16_t *)&v20->i8[v31] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v39, v39, 0x10uLL), 0x10uLL), vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    unint64_t v20 = (int8x8_t *)((char *)v20 + v31);
    unint64_t v18 = (int8x8_t *)((char *)v18 + v31);
    unint64_t v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1) {
      goto LABEL_34;
    }
  }
  uint64_t v47 = 0;
  while (1)
  {
    uint16x8_t v48 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v47]);
    int8x16_t v49 = vrev16q_s8(*(int8x16_t *)&v20->i8[v47]);
    a13.i32[0] = v26;
    uint16x8_t v50 = (uint16x8_t)vqtbl1q_s8(a13, (int8x16_t)xmmword_1850CD890);
    uint32x4_t v51 = vmull_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v50.i8);
    uint32x4_t v52 = vmull_high_u16(v48, v50);
    uint32x4_t v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v51, v24), v25);
    *(uint16x4_t *)v53.i8 = vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    uint32x4_t v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v52, v24), v25);
    *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
    uint16x8_t v55 = (uint16x8_t)vmvnq_s8(v49);
    a13 = (int8x16_t)vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v53.i8, *(uint16x4_t *)v55.i8, 3), vmull_u16(*(uint16x4_t *)v49.i8, (uint16x4_t)vmvn_s8((int8x8_t)vdup_lane_s16(*(int16x4_t *)v53.i8, 3))));
    uint32x4_t v56 = vqaddq_u32(vmull_laneq_u16(*(uint16x4_t *)v54.i8, v55, 7), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)vdup_lane_s16(*(int16x4_t *)v54.i8, 3))));
    uint32x4_t v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)a13, v24), v25);
    uint32x4_t v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v56, v24), v25);
    *(int8x16_t *)&v20->i8[v47] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL), vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2) {
      break;
    }
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    v47 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      unint64_t v18 = (int8x8_t *)((char *)v18 + v47);
      unint64_t v20 = (int8x8_t *)((char *)v20 + v47);
      goto LABEL_31;
    }
  }
  unint64_t v18 = (int8x8_t *)((char *)v18 + v23 + v47);
  unint64_t v20 = (int8x8_t *)((char *)v20 + v23 + v47);
LABEL_34:
  uint64_t v59 = v17 + a16;
  if (v59)
  {
    uint32x4_t v60 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v61.i64[0] = 0x800000008000;
    v61.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        int8x8_t v62 = vrev16_s8(*v20);
        uint32x4_t v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v18), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v60), v61);
        *(uint16x4_t *)v63.i8 = vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v63.i8, (uint16x4_t)vmvn_s8(v62), 3), vmull_lane_u16((uint16x4_t)v62, (uint16x4_t)vmvn_s8(*(int8x8_t *)v63.i8), 3)), v60), v61);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL));
        *unint64_t v20 = *(int8x8_t *)a9.i8;
      }
      int8x8_t v64 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v64 >= v19) {
        uint64_t v65 = -(uint64_t)a5;
      }
      else {
        uint64_t v65 = 0;
      }
      unint64_t v18 = &v64[v65];
      v20 += a6;
      --v59;
    }
    while (v59);
  }
  *uint64_t result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)9,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint32x4_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a17 < 2) {
    goto LABEL_34;
  }
  uint64_t v22 = 2 * a6;
  uint64_t v23 = 16 * a6;
  uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      uint16x8_t v41 = (int8x16_t *)&v21[v17];
      int64_t v42 = (int8x16_t *)v21;
      do
        int64_t v43 = v42++;
      while (v42 <= v41 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v43)) & 0x80) != 0);
      do
      {
        uint64_t v44 = v43;
        int64_t v43 = (int8x16_t *)((char *)v43 + 4);
      }
      while (v43 <= v41 && !v44->i32[0]);
      if (v44 < v41)
      {
        while (!v44->i8[0])
        {
          uint64_t v44 = (int8x16_t *)((char *)v44 + 1);
          if (v44 >= v41)
          {
            uint64_t v44 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      int64_t v45 = (char *)v44 - v21;
      int64_t v46 = ((char *)v44 - v21) * a6;
      v18 += v46;
      v20 += v46;
      v21 += v46;
      v17 -= v45;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF) {
      break;
    }
    uint64_t v27 = (int8x16_t *)&v21[v17];
    int8x16_t v28 = (int8x16_t *)v21;
    do
      uint32x4_t v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      int32x4_t v30 = v29;
      uint32x4_t v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        int32x4_t v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          int32x4_t v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    uint64_t v31 = 0;
    int64_t v32 = (char *)v30 - v21;
    unint64_t v33 = (char *)v30 - v21;
    do
    {
      uint16x8_t v34 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v31]);
      int8x16_t v35 = vrev16q_s8(*(int8x16_t *)&v20->i8[v31]);
      uint16x8_t v36 = (uint16x8_t)vmvnq_s8(v35);
      uint32x4_t v37 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v36.i8, 3), vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3));
      a13 = vmull_high_laneq_u16(v34, v36, 7);
      uint32x4_t v38 = vqaddq_u32(a13, vmull_high_laneq_u16((uint16x8_t)v35, v34, 7));
      uint32x4_t v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v24), v25);
      uint32x4_t v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v38, v24), v25);
      *(int8x16_t *)&v20->i8[v31] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v39, v39, 0x10uLL), 0x10uLL), vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    unint64_t v20 = (int8x8_t *)((char *)v20 + v31);
    unint64_t v18 = (int8x8_t *)((char *)v18 + v31);
    unint64_t v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1) {
      goto LABEL_34;
    }
  }
  uint64_t v47 = 0;
  while (1)
  {
    uint16x8_t v48 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v47]);
    int8x16_t v49 = vrev16q_s8(*(int8x16_t *)&v20->i8[v47]);
    a13.i32[0] = v26;
    int8x16_t v50 = vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850CD890);
    uint32x4_t v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v50.i8), v24), v25);
    *(uint16x4_t *)v51.i8 = vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL);
    uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v48, (uint16x8_t)v50), v24), v25);
    *(uint16x4_t *)v52.i8 = vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
    uint16x8_t v53 = (uint16x8_t)vmvnq_s8(v49);
    uint16x8_t v54 = (uint16x8_t)vmvnq_s8(v50);
    uint32x4_t v55 = vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v54.i8);
    a13 = vqaddq_u32(vmull_laneq_u16(*(uint16x4_t *)v52.i8, v53, 7), vmull_high_u16((uint16x8_t)v49, v54));
    uint32x4_t v56 = vmull_high_lane_u16((uint16x8_t)v49, *(uint16x4_t *)v52.i8, 3);
    uint32x4_t v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v53.i8, 3), v55), vmull_lane_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v51.i8, 3)), v24), v25);
    uint32x4_t v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(a13, v56), v24), v25);
    *(int8x16_t *)&v20->i8[v47] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL), vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2) {
      break;
    }
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    v47 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      unint64_t v18 = (int8x8_t *)((char *)v18 + v47);
      unint64_t v20 = (int8x8_t *)((char *)v20 + v47);
      goto LABEL_31;
    }
  }
  unint64_t v18 = (int8x8_t *)((char *)v18 + v23 + v47);
  unint64_t v20 = (int8x8_t *)((char *)v20 + v23 + v47);
LABEL_34:
  uint64_t v59 = v17 + a16;
  if (v59)
  {
    uint32x4_t v60 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v61.i64[0] = 0x800000008000;
    v61.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        int8x8_t v62 = vrev16_s8(*v20);
        int8x8_t v63 = vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        uint32x4_t v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v18), (uint16x4_t)v63), v60), v61);
        *(uint16x4_t *)v64.i8 = vqshrn_n_u32(vsraq_n_u32(v64, v64, 0x10uLL), 0x10uLL);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v64.i8, (uint16x4_t)vmvn_s8(v62), 3), vmull_u16((uint16x4_t)v62, (uint16x4_t)vmvn_s8(v63))), vmull_lane_u16((uint16x4_t)v62, *(uint16x4_t *)v64.i8, 3)), v60), v61);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL));
        *unint64_t v20 = *(int8x8_t *)a9.i8;
      }
      uint64_t v65 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v65 >= v19) {
        uint64_t v66 = -(uint64_t)a5;
      }
      else {
        uint64_t v66 = 0;
      }
      unint64_t v18 = &v65[v66];
      v20 += a6;
      --v59;
    }
    while (v59);
  }
  *uint64_t result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)8,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a17 < 2) {
    goto LABEL_34;
  }
  uint64_t v22 = 2 * a6;
  uint64_t v23 = 16 * a6;
  uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      uint32x4_t v38 = (int8x16_t *)&v21[v17];
      uint32x4_t v39 = (int8x16_t *)v21;
      do
        uint32x4_t v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v40)) & 0x80) != 0);
      do
      {
        uint16x8_t v41 = v40;
        uint32x4_t v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && !v41->i32[0]);
      if (v41 < v38)
      {
        while (!v41->i8[0])
        {
          uint16x8_t v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            uint16x8_t v41 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      int64_t v42 = (char *)v41 - v21;
      int64_t v43 = ((char *)v41 - v21) * a6;
      v18 += v43;
      v20 += v43;
      v21 += v43;
      v17 -= v42;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF) {
      break;
    }
    uint64_t v27 = (int8x16_t *)&v21[v17];
    int8x16_t v28 = (int8x16_t *)v21;
    do
      uint32x4_t v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      int32x4_t v30 = v29;
      uint32x4_t v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        int32x4_t v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          int32x4_t v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    uint64_t v31 = 0;
    int64_t v32 = (char *)v30 - v21;
    unint64_t v33 = (char *)v30 - v21;
    do
    {
      uint16x8_t v34 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v31]);
      uint16x8_t v35 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v20->i8[v31]);
      uint32x4_t v36 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3), v24), v25);
      uint32x4_t v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v35, v34, 7), v24), v25);
      a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v36, v36, 0x10uLL), 0x10uLL), vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL);
      *(int8x16_t *)&v20->i8[v31] = vrev16q_s8((int8x16_t)vqsubq_u16(v35, a13));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    unint64_t v20 = (int8x8_t *)((char *)v20 + v31);
    unint64_t v18 = (int8x8_t *)((char *)v18 + v31);
    unint64_t v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1) {
      goto LABEL_34;
    }
  }
  uint64_t v44 = 0;
  while (1)
  {
    uint16x8_t v45 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v44]);
    int8x16_t v46 = vrev16q_s8(*(int8x16_t *)&v20->i8[v44]);
    a13.i32[0] = v26;
    uint16x8_t v47 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850CD890);
    uint32x4_t v48 = vmull_lane_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v45.i8, 3);
    uint32x4_t v49 = vmull_high_laneq_u16(v47, v45, 7);
    uint32x4_t v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v24), v25);
    uint32x4_t v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v24), v25);
    uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v46.i8, vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL)), v24), v25);
    uint32x4_t v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL)), v24), v25);
    a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    *(int8x16_t *)&v20->i8[v44] = vrev16q_s8((int8x16_t)vqsubq_u16((uint16x8_t)v46, a13));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2) {
      break;
    }
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    v44 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      unint64_t v18 = (int8x8_t *)((char *)v18 + v44);
      unint64_t v20 = (int8x8_t *)((char *)v20 + v44);
      goto LABEL_31;
    }
  }
  unint64_t v18 = (int8x8_t *)((char *)v18 + v23 + v44);
  unint64_t v20 = (int8x8_t *)((char *)v20 + v23 + v44);
LABEL_34:
  uint64_t v54 = v17 + a16;
  if (v54)
  {
    uint32x4_t v55 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v56.i64[0] = 0x800000008000;
    v56.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        uint16x4_t v57 = (uint16x4_t)vrev16_s8(*v20);
        uint32x4_t v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0), (uint16x4_t)vrev16_s8(*v18), 3), v55), v56);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v57, vqshrn_n_u32(vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL)), v55), v56);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqsub_u16(v57, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL)));
        *unint64_t v20 = *(int8x8_t *)a9.i8;
      }
      uint64_t v59 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v59 >= v19) {
        uint64_t v60 = -(uint64_t)a5;
      }
      else {
        uint64_t v60 = 0;
      }
      unint64_t v18 = &v59[v60];
      v20 += a6;
      --v54;
    }
    while (v54);
  }
  *uint64_t result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)7,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a17 < 2) {
    goto LABEL_34;
  }
  uint64_t v22 = 2 * a6;
  uint64_t v23 = 16 * a6;
  uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      uint32x4_t v39 = (int8x16_t *)&v21[v17];
      uint32x4_t v40 = (int8x16_t *)v21;
      do
        uint16x8_t v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        int64_t v42 = v41;
        uint16x8_t v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          int64_t v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            int64_t v42 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      int64_t v43 = (char *)v42 - v21;
      int64_t v44 = ((char *)v42 - v21) * a6;
      v18 += v44;
      v20 += v44;
      v21 += v44;
      v17 -= v43;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF) {
      break;
    }
    uint64_t v27 = (int8x16_t *)&v21[v17];
    int8x16_t v28 = (int8x16_t *)v21;
    do
      uint32x4_t v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      int32x4_t v30 = v29;
      uint32x4_t v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        int32x4_t v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          int32x4_t v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    uint64_t v31 = 0;
    int64_t v32 = (char *)v30 - v21;
    unint64_t v33 = (char *)v30 - v21;
    do
    {
      uint16x8_t v34 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v31]);
      uint16x8_t v35 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v20->i8[v31]);
      a13 = (uint16x8_t)vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3);
      uint32x4_t v36 = vmull_high_laneq_u16(v35, v34, 7);
      uint32x4_t v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)a13, v24), v25);
      uint32x4_t v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v36, v24), v25);
      *(int8x16_t *)&v20->i8[v31] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    unint64_t v20 = (int8x8_t *)((char *)v20 + v31);
    unint64_t v18 = (int8x8_t *)((char *)v18 + v31);
    unint64_t v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1) {
      goto LABEL_34;
    }
  }
  uint64_t v45 = 0;
  while (1)
  {
    uint16x8_t v46 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v45]);
    uint16x8_t v47 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v20->i8[v45]);
    a13.i32[0] = v26;
    uint16x8_t v48 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850CD890);
    uint32x4_t v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v46.i8, 3), v24), v25);
    uint32x4_t v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v48, v46, 7), v24), v25);
    uint16x8_t v51 = vqsubq_u16(v48, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
    uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v51.i8), v24), v25);
    uint32x4_t v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v47, v51), v24), v25);
    a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    *(int8x16_t *)&v20->i8[v45] = vrev16q_s8((int8x16_t)vqsubq_u16(v47, a13));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2) {
      break;
    }
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    v45 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      unint64_t v18 = (int8x8_t *)((char *)v18 + v45);
      unint64_t v20 = (int8x8_t *)((char *)v20 + v45);
      goto LABEL_31;
    }
  }
  unint64_t v18 = (int8x8_t *)((char *)v18 + v23 + v45);
  unint64_t v20 = (int8x8_t *)((char *)v20 + v23 + v45);
LABEL_34:
  uint64_t v54 = v17 + a16;
  if (v54)
  {
    uint32x4_t v55 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v56.i64[0] = 0x800000008000;
    v56.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        uint16x4_t v57 = (uint16x4_t)vrev16_s8(*v20);
        uint16x4_t v58 = (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        uint32x4_t v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v58, (uint16x4_t)vrev16_s8(*v18), 3), v55), v56);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v57, vqsub_u16(v58, vqshrn_n_u32(vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL))), v55), v56);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqsub_u16(v57, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL)));
        *unint64_t v20 = *(int8x8_t *)a9.i8;
      }
      uint64_t v60 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v60 >= v19) {
        uint64_t v61 = -(uint64_t)a5;
      }
      else {
        uint64_t v61 = 0;
      }
      unint64_t v18 = &v60[v61];
      v20 += a6;
      --v54;
    }
    while (v54);
  }
  *uint64_t result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)6,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v15 = a14;
  unint64_t v16 = *result;
  unint64_t v17 = *a3;
  unint64_t v18 = *a2;
  unint64_t v19 = *a4;
  if (a14 < 2) {
    goto LABEL_37;
  }
  if (a7) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = -1;
  }
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  int8x16_t v22 = vandq_s8((int8x16_t)vdupq_n_s16(v20), v21);
  uint64_t v23 = 2 * a6;
  uint64_t v24 = 16 * a6;
  uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a11.i64[0] = 0x800000008000;
  a11.i64[1] = 0x800000008000;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  while (1)
  {
    __int32 v27 = *(unsigned __int16 *)v19;
    if (!*(_WORD *)v19)
    {
      int64_t v44 = (int8x16_t *)&v19[v15];
      uint64_t v45 = (int8x16_t *)v19;
      do
        uint16x8_t v46 = v45++;
      while (v45 <= v44 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v46)) & 0x80) != 0);
      do
      {
        uint16x8_t v47 = v46;
        uint16x8_t v46 = (int8x16_t *)((char *)v46 + 4);
      }
      while (v46 <= v44 && !v47->i32[0]);
      if (v47 < v44)
      {
        while (!v47->i8[0])
        {
          uint16x8_t v47 = (int8x16_t *)((char *)v47 + 1);
          if (v47 >= v44)
          {
            uint16x8_t v47 = (int8x16_t *)&v19[v15];
            break;
          }
        }
      }
      int64_t v48 = (char *)v47 - v19;
      int64_t v49 = ((char *)v47 - v19) * a6;
      v16 += v49;
      v18 += v49;
      v19 += v49;
      v15 -= v48;
      goto LABEL_34;
    }
    if (v27 != 0xFFFF) {
      break;
    }
    int8x16_t v28 = (int8x16_t *)&v19[v15];
    uint32x4_t v29 = (int8x16_t *)v19;
    do
      int32x4_t v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v26)) & 0x80) != 0);
    do
    {
      uint64_t v31 = v30;
      int32x4_t v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        uint64_t v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          uint64_t v31 = (int8x16_t *)&v19[v15];
          break;
        }
      }
    }
    uint64_t v32 = 0;
    int64_t v33 = (char *)v31 - v19;
    unint64_t v34 = (char *)v31 - v19;
    do
    {
      int8x16_t v35 = vrev16q_s8(*(int8x16_t *)&v18->i8[v32]);
      uint16x8_t v36 = (uint16x8_t)vorrq_s8(v22, vrev16q_s8(*(int8x16_t *)&v16->i8[v32]));
      int16x8_t v37 = (int16x8_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v38 = (uint16x8_t)vbicq_s8(v35, (int8x16_t)vceqzq_s16(v37));
      uint16x8_t v39 = (uint16x8_t)vmvnq_s8((int8x16_t)v37);
      uint32x4_t v40 = vmull_u16(*(uint16x4_t *)v36.i8, *(uint16x4_t *)v39.i8);
      uint32x4_t v41 = vmull_high_u16(v36, v39);
      uint32x4_t v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v40, v25), a11);
      uint32x4_t v43 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v41, v25), a11);
      int8x16_t v14 = (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL), vsraq_n_u32(v43, v43, 0x10uLL), 0x10uLL);
      *(int8x16_t *)&v18->i8[v32] = vrev16q_s8((int8x16_t)vqaddq_u16(v38, (uint16x8_t)v14));
      v19 += v23;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    unint64_t v18 = (int8x8_t *)((char *)v18 + v32);
    unint64_t v16 = (int8x8_t *)((char *)v16 + v32);
    unint64_t v15 = v15 - v33 + v34;
LABEL_34:
    if (v15 <= 1) {
      goto LABEL_37;
    }
  }
  uint64_t v50 = 0;
  while (1)
  {
    int8x16_t v51 = vrev16q_s8(*(int8x16_t *)&v18->i8[v50]);
    v14.i32[0] = v27;
    int16x8_t v52 = (int16x8_t)vqtbl1q_s8(v14, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v53 = (uint16x8_t)vorrq_s8(v22, vrev16q_s8(*(int8x16_t *)&v16->i8[v50]));
    uint32x4_t v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v53.i8, *(uint16x4_t *)v52.i8), v25), a11);
    uint32x4_t v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v53, (uint16x8_t)v52), v25), a11);
    int16x8_t v56 = (int16x8_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_1850CD880);
    uint16x8_t v57 = (uint16x8_t)vbicq_s8(v51, (int8x16_t)vceqzq_s16(v56));
    int8x16_t v58 = vmvnq_s8((int8x16_t)v56);
    uint32x4_t v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL), *(uint16x4_t *)v58.i8), v25), a11);
    uint32x4_t v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL), (uint16x4_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), v25), a11);
    int8x16_t v14 = (int8x16_t)vceqzq_s16(v52);
    *(int8x16_t *)&v18->i8[v50] = vrev16q_s8(vbslq_s8(v14, v51, (int8x16_t)vqaddq_u16(v57, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL), vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL))));
    v19 += v23;
    v15 -= 2;
    if (v15 < 2) {
      break;
    }
    __int32 v27 = *(unsigned __int16 *)v19;
    v50 += v24;
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu)
    {
      unint64_t v16 = (int8x8_t *)((char *)v16 + v50);
      unint64_t v18 = (int8x8_t *)((char *)v18 + v50);
      goto LABEL_34;
    }
  }
  unint64_t v16 = (int8x8_t *)((char *)v16 + v24 + v50);
  unint64_t v18 = (int8x8_t *)((char *)v18 + v24 + v50);
LABEL_37:
  uint64_t v61 = v15 + a13;
  if (v61)
  {
    int8x8_t v62 = 0;
    if (a7) {
      __int16 v63 = 0;
    }
    else {
      __int16 v63 = -1;
    }
    v62.i16[3] = v63;
    uint32x4_t v64 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v65.i64[0] = 0x800000008000;
    v65.i64[1] = 0x800000008000;
    do
    {
      if (*v19)
      {
        a11.i32[0] = *v19;
        int16x4_t v66 = (int16x4_t)vrev16_s8(*v18);
        int16x4_t v67 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        uint32x4_t v68 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v62, vrev16_s8(*v16)), (uint16x4_t)v67), v64), v65);
        int16x4_t v69 = vdup_lane_s16(v66, 3);
        uint32x4_t v70 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v68, v68, 0x10uLL), 0x10uLL), (uint16x4_t)vmvn_s8((int8x8_t)v69)), v64), v65);
        *(int8x8_t *)a11.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v67), (int8x8_t)v66, (int8x8_t)vqadd_u16((uint16x4_t)vbic_s8((int8x8_t)v66, (int8x8_t)vceqz_s16(v69)), vqshrn_n_u32(vsraq_n_u32(v70, v70, 0x10uLL), 0x10uLL))));
        *unint64_t v18 = *(int8x8_t *)a11.i8;
      }
      int8x8_t v71 = &v16[a6];
      v19 += a6;
      if ((unint64_t)v71 >= v17) {
        uint64_t v72 = -(uint64_t)a5;
      }
      else {
        uint64_t v72 = 0;
      }
      unint64_t v16 = &v71[v72];
      v18 += a6;
      --v61;
    }
    while (v61);
  }
  *uint64_t result = v16;
  *a3 = v17;
  *a2 = v18;
  *a4 = v19;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)5,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13 = a13;
  int8x16_t v14 = *result;
  unint64_t v15 = *a3;
  unint64_t v16 = *a2;
  unint64_t v17 = *a4;
  if (a13 < 2) {
    goto LABEL_34;
  }
  uint64_t v18 = 2 * a6;
  uint64_t v19 = 16 * a6;
  uint32x4_t v20 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v21.i64[0] = 0x800000008000;
  v21.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    __int32 v22 = *(unsigned __int16 *)v17;
    if (!*(_WORD *)v17)
    {
      uint16x8_t v39 = (int8x16_t *)&v17[v13];
      uint32x4_t v40 = (int8x16_t *)v17;
      do
        uint32x4_t v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        uint32x4_t v42 = v41;
        uint32x4_t v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          uint32x4_t v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            uint32x4_t v42 = (int8x16_t *)&v17[v13];
            break;
          }
        }
      }
      int64_t v43 = (char *)v42 - v17;
      int64_t v44 = ((char *)v42 - v17) * a6;
      v14 += v44;
      v16 += v44;
      v17 += v44;
      v13 -= v43;
      goto LABEL_31;
    }
    if (v22 != 0xFFFF) {
      break;
    }
    uint64_t v23 = (int8x16_t *)&v17[v13];
    uint64_t v24 = (int8x16_t *)v17;
    do
      uint32x4_t v25 = v24++;
    while (v24 <= v23 && (vminvq_u8((uint8x16_t)vceqq_s8(*v25, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      int8x16_t v26 = v25;
      uint32x4_t v25 = (int8x16_t *)((char *)v25 + 4);
    }
    while (v25 <= v23 && v26->i32[0] == -1);
    if (v26 < v23)
    {
      while (v26->u8[0] == 255)
      {
        int8x16_t v26 = (int8x16_t *)((char *)v26 + 1);
        if (v26 >= v23)
        {
          int8x16_t v26 = (int8x16_t *)&v17[v13];
          break;
        }
      }
    }
    uint64_t v27 = 0;
    int64_t v28 = (char *)v26 - v17;
    unint64_t v29 = (char *)v26 - v17;
    do
    {
      uint16x8_t v30 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v14->i8[v27]);
      uint16x8_t v31 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v16->i8[v27]);
      uint32x4_t v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v30.i8, 3), v20), v21);
      uint32x4_t v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v31, v30, 7), v20), v21);
      uint16x8_t v34 = vqsubq_u16(v31, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL));
      uint32x4_t v35 = vmull_lane_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v31.i8, 3);
      uint32x4_t v36 = vmull_high_laneq_u16(v30, v31, 7);
      uint32x4_t v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v35, v20), v21);
      uint32x4_t v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v36, v20), v21);
      *(int8x16_t *)&v16->i8[v27] = vrev16q_s8((int8x16_t)vqaddq_u16(v34, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL)));
      v17 += v18;
      v29 -= 2;
      v27 += v19;
    }
    while (v29 > 1);
    unint64_t v16 = (int8x8_t *)((char *)v16 + v27);
    int8x16_t v14 = (int8x8_t *)((char *)v14 + v27);
    unint64_t v13 = v13 - v28 + v29;
LABEL_31:
    if (v13 <= 1) {
      goto LABEL_34;
    }
  }
  uint64_t v45 = 0;
  while (1)
  {
    int8x16_t v46 = *(int8x16_t *)&v16->i8[v45];
    uint16x8_t v47 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v14->i8[v45]);
    uint16x8_t v48 = (uint16x8_t)vrev16q_s8(v46);
    v46.i32[0] = v22;
    uint16x8_t v49 = (uint16x8_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1850CD890);
    uint32x4_t v50 = vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v49.i8);
    uint32x4_t v51 = vmull_high_u16(v47, v49);
    uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v20), v21);
    *(uint16x4_t *)v52.i8 = vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
    uint32x4_t v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v51, v20), v21);
    *(uint16x4_t *)v53.i8 = vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    uint32x4_t v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v52.i8, 3), v20), v21);
    uint32x4_t v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_lane_u16(v48, *(uint16x4_t *)v53.i8, 3), v20), v21);
    uint16x8_t v56 = vqsubq_u16(v48, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL), vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL));
    uint32x4_t v57 = vmull_lane_u16(*(uint16x4_t *)v52.i8, *(uint16x4_t *)v48.i8, 3);
    uint32x4_t v58 = vmull_laneq_u16(*(uint16x4_t *)v53.i8, v48, 7);
    uint32x4_t v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v57, v20), v21);
    uint32x4_t v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v58, v20), v21);
    *(int8x16_t *)&v16->i8[v45] = vrev16q_s8((int8x16_t)vqaddq_u16(v56, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL), vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL)));
    v17 += v18;
    v13 -= 2;
    if (v13 < 2) {
      break;
    }
    __int32 v22 = *(unsigned __int16 *)v17;
    v45 += v19;
    if ((unsigned __int16)(v22 - 1) >= 0xFFFEu)
    {
      int8x16_t v14 = (int8x8_t *)((char *)v14 + v45);
      unint64_t v16 = (int8x8_t *)((char *)v16 + v45);
      goto LABEL_31;
    }
  }
  int8x16_t v14 = (int8x8_t *)((char *)v14 + v19 + v45);
  unint64_t v16 = (int8x8_t *)((char *)v16 + v19 + v45);
LABEL_34:
  uint64_t v61 = v13 + a12;
  if (v61)
  {
    uint32x4_t v62 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v63.i64[0] = 0x800000008000;
    v63.i64[1] = 0x800000008000;
    do
    {
      if (*v17)
      {
        a9.i32[0] = *v17;
        uint16x4_t v64 = (uint16x4_t)vrev16_s8(*v16);
        uint32x4_t v65 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v14), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v62), v63);
        *(uint16x4_t *)v65.i8 = vqshrn_n_u32(vsraq_n_u32(v65, v65, 0x10uLL), 0x10uLL);
        uint32x4_t v66 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v64, *(uint16x4_t *)v65.i8, 3), v62), v63);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v65.i8, v64, 3), v62), v63);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqadd_u16(vqsub_u16(v64, vqshrn_n_u32(vsraq_n_u32(v66, v66, 0x10uLL), 0x10uLL)), vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL)));
        int8x8_t *v16 = *(int8x8_t *)a9.i8;
      }
      int16x4_t v67 = &v14[a6];
      v17 += a6;
      if ((unint64_t)v67 >= v15) {
        uint64_t v68 = -(uint64_t)a5;
      }
      else {
        uint64_t v68 = 0;
      }
      int8x16_t v14 = &v67[v68];
      v16 += a6;
      --v61;
    }
    while (v61);
  }
  *uint64_t result = v14;
  *a3 = v15;
  *a2 = v16;
  *a4 = v17;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)4,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, double a12, double a13, double a14, int8x16_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18 = a18;
  uint64_t v19 = *result;
  unint64_t v20 = *a3;
  int32x4_t v21 = *a2;
  __int32 v22 = *a4;
  if (a18 < 2) {
    goto LABEL_37;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      uint32x4_t v42 = (int8x16_t *)&v22[v18];
      int64_t v43 = (int8x16_t *)v22;
      do
        int64_t v44 = v43++;
      while (v43 <= v42 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v44)) & 0x80) != 0);
      do
      {
        uint64_t v45 = v44;
        int64_t v44 = (int8x16_t *)((char *)v44 + 4);
      }
      while (v44 <= v42 && !v45->i32[0]);
      if (v45 < v42)
      {
        while (!v45->i8[0])
        {
          uint64_t v45 = (int8x16_t *)((char *)v45 + 1);
          if (v45 >= v42)
          {
            uint64_t v45 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      int64_t v46 = (char *)v45 - v22;
      int64_t v47 = ((char *)v45 - v22) * a6;
      v19 += v47;
      v21 += v47;
      v22 += v47;
      v18 -= v46;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    uint16x8_t v31 = (int8x16_t *)&v22[v18];
    uint32x4_t v32 = (int8x16_t *)v22;
    do
      uint32x4_t v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, (int8x16_t)a11)) & 0x80) != 0);
    do
    {
      uint16x8_t v34 = v33;
      uint32x4_t v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        uint16x8_t v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          uint16x8_t v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v22;
    unint64_t v37 = (char *)v34 - v22;
    do
    {
      uint16x8_t v38 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v35]);
      uint16x8_t v39 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      uint32x4_t v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v39.i8, *(uint16x4_t *)v38.i8, 3), v28), v29);
      uint32x4_t v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v39, v38, 7), v28), v29);
      a15 = (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL), vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL);
      *(int8x16_t *)&v21->i8[v35] = vrev16q_s8((int8x16_t)vqsubq_u16(v39, (uint16x8_t)a15));
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    int32x4_t v21 = (int8x8_t *)((char *)v21 + v35);
    uint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    unint64_t v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1) {
      goto LABEL_37;
    }
  }
  uint64_t v48 = 0;
  while (1)
  {
    int8x16_t v49 = vrev16q_s8(*(int8x16_t *)&v21->i8[v48]);
    a15.i32[0] = v30;
    int8x16_t v50 = vqtbl1q_s8(a15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v51 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v48]));
    uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8), v28), v29);
    uint32x4_t v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v51, (uint16x8_t)v50), v28), v29);
    a15 = vmvnq_s8(v50);
    uint16x8_t v54 = (uint16x8_t)vmvnq_s8(v49);
    uint32x4_t v55 = vqaddq_u32(vmull_high_u16((uint16x8_t)v49, (uint16x8_t)a15), vmull_laneq_u16(vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL), v54, 7));
    uint32x4_t v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)a15.i8), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), *(uint16x4_t *)v54.i8, 3)), v28), v29);
    uint32x4_t v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v55, v28), v29);
    *(int8x16_t *)&v21->i8[v48] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL), vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL));
    v22 += v26;
    v18 -= 2;
    if (v18 < 2) {
      break;
    }
    unsigned __int32 v30 = *(unsigned __int16 *)v22;
    v48 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      uint64_t v19 = (int8x8_t *)((char *)v19 + v48);
      int32x4_t v21 = (int8x8_t *)((char *)v21 + v48);
      goto LABEL_34;
    }
  }
  uint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v48);
  int32x4_t v21 = (int8x8_t *)((char *)v21 + v27 + v48);
LABEL_37:
  uint64_t v58 = v18 + a17;
  if (v58)
  {
    int8x8_t v59 = 0;
    if (a7) {
      __int16 v60 = 0;
    }
    else {
      __int16 v60 = -1;
    }
    v59.i16[3] = v60;
    uint32x4_t v61 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v62.i64[0] = 0x800000008000;
    v62.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        int8x8_t v63 = vrev16_s8(*v21);
        int8x8_t v64 = vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        uint32x4_t v65 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v59, vrev16_s8(*v19)), (uint16x4_t)v64), v61), v62);
        a11 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16((uint16x4_t)v63, (uint16x4_t)vmvn_s8(v64)), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v65, v65, 0x10uLL), 0x10uLL), (uint16x4_t)vmvn_s8(v63), 3)), v61), v62);
        *(int8x8_t *)a11.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a11, (uint32x4_t)a11, 0x10uLL), 0x10uLL));
        *int32x4_t v21 = *(int8x8_t *)a11.i8;
      }
      uint32x4_t v66 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v66 >= v20) {
        uint64_t v67 = -(uint64_t)a5;
      }
      else {
        uint64_t v67 = 0;
      }
      uint64_t v19 = &v66[v67];
      v21 += a6;
      --v58;
    }
    while (v58);
  }
  *uint64_t result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)3,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, double a12, double a13, double a14, uint32x4_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18 = a18;
  uint64_t v19 = *result;
  unint64_t v20 = *a3;
  int32x4_t v21 = *a2;
  __int32 v22 = *a4;
  if (a18 < 2) {
    goto LABEL_37;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  int8x16_t v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  uint64_t v26 = 2 * a6;
  uint64_t v27 = 16 * a6;
  uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      int64_t v43 = (int8x16_t *)&v22[v18];
      int64_t v44 = (int8x16_t *)v22;
      do
        uint64_t v45 = v44++;
      while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v45)) & 0x80) != 0);
      do
      {
        int64_t v46 = v45;
        uint64_t v45 = (int8x16_t *)((char *)v45 + 4);
      }
      while (v45 <= v43 && !v46->i32[0]);
      if (v46 < v43)
      {
        while (!v46->i8[0])
        {
          int64_t v46 = (int8x16_t *)((char *)v46 + 1);
          if (v46 >= v43)
          {
            int64_t v46 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      int64_t v47 = (char *)v46 - v22;
      int64_t v48 = ((char *)v46 - v22) * a6;
      v19 += v48;
      v21 += v48;
      v22 += v48;
      v18 -= v47;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF) {
      break;
    }
    uint16x8_t v31 = (int8x16_t *)&v22[v18];
    uint32x4_t v32 = (int8x16_t *)v22;
    do
      uint32x4_t v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, (int8x16_t)a11)) & 0x80) != 0);
    do
    {
      uint16x8_t v34 = v33;
      uint32x4_t v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        uint16x8_t v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          uint16x8_t v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    uint64_t v35 = 0;
    int64_t v36 = (char *)v34 - v22;
    unint64_t v37 = (char *)v34 - v22;
    do
    {
      uint16x8_t v38 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v35]);
      uint16x8_t v39 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      a15 = vmull_lane_u16(*(uint16x4_t *)v39.i8, *(uint16x4_t *)v38.i8, 3);
      uint32x4_t v40 = vmull_high_laneq_u16(v39, v38, 7);
      uint32x4_t v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(a15, v28), v29);
      uint32x4_t v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v40, v28), v29);
      *(int8x16_t *)&v21->i8[v35] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL), vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL));
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    int32x4_t v21 = (int8x8_t *)((char *)v21 + v35);
    uint64_t v19 = (int8x8_t *)((char *)v19 + v35);
    unint64_t v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1) {
      goto LABEL_37;
    }
  }
  uint64_t v49 = 0;
  while (1)
  {
    uint16x8_t v50 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v49]);
    a15.i32[0] = v30;
    int8x16_t v51 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v52 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v49]));
    uint32x4_t v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v52.i8, *(uint16x4_t *)v51.i8), v28), v29);
    uint32x4_t v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v52, (uint16x8_t)v51), v28), v29);
    uint16x8_t v55 = (uint16x8_t)vmvnq_s8(v51);
    uint32x4_t v56 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v55.i8), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL), *(uint16x4_t *)v50.i8, 3));
    a15 = vmull_high_u16(v50, v55);
    uint32x4_t v57 = vqaddq_u32(a15, vmull_laneq_u16(vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL), v50, 7));
    uint32x4_t v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v56, v28), v29);
    uint32x4_t v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v57, v28), v29);
    *(int8x16_t *)&v21->i8[v49] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL), vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL));
    v22 += v26;
    v18 -= 2;
    if (v18 < 2) {
      break;
    }
    unsigned __int32 v30 = *(unsigned __int16 *)v22;
    v49 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      uint64_t v19 = (int8x8_t *)((char *)v19 + v49);
      int32x4_t v21 = (int8x8_t *)((char *)v21 + v49);
      goto LABEL_34;
    }
  }
  uint64_t v19 = (int8x8_t *)((char *)v19 + v27 + v49);
  int32x4_t v21 = (int8x8_t *)((char *)v21 + v27 + v49);
LABEL_37:
  uint64_t v60 = v18 + a17;
  if (v60)
  {
    int8x8_t v61 = 0;
    if (a7) {
      __int16 v62 = 0;
    }
    else {
      __int16 v62 = -1;
    }
    v61.i16[3] = v62;
    uint32x4_t v63 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v64.i64[0] = 0x800000008000;
    v64.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        uint16x4_t v65 = (uint16x4_t)vrev16_s8(*v21);
        int8x8_t v66 = vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        uint32x4_t v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v61, vrev16_s8(*v19)), (uint16x4_t)v66), v63), v64);
        a11 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(v65, (uint16x4_t)vmvn_s8(v66)), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL), v65, 3)), v63), v64);
        *(int8x8_t *)a11.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a11, (uint32x4_t)a11, 0x10uLL), 0x10uLL));
        *int32x4_t v21 = *(int8x8_t *)a11.i8;
      }
      uint64_t v68 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v68 >= v20) {
        uint64_t v69 = -(uint64_t)a5;
      }
      else {
        uint64_t v69 = 0;
      }
      uint64_t v19 = &v68[v69];
      v21 += a6;
      --v60;
    }
    while (v60);
  }
  *uint64_t result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)2,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18 = a18;
  uint64_t v19 = *result;
  unint64_t v20 = *a3;
  int32x4_t v21 = *a2;
  __int32 v22 = *a4;
  if (a18 < 2) {
    goto LABEL_34;
  }
  uint64_t v23 = 2 * a6;
  uint64_t v24 = 16 * a6;
  uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a9.i64[0] = 0x800000008000;
  a9.i64[1] = 0x800000008000;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v27 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      uint16x8_t v39 = (int8x16_t *)&v22[v18];
      uint32x4_t v40 = (int8x16_t *)v22;
      do
        uint32x4_t v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        uint32x4_t v42 = v41;
        uint32x4_t v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          uint32x4_t v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            uint32x4_t v42 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      int64_t v43 = (char *)v42 - v22;
      int64_t v44 = ((char *)v42 - v22) * a6;
      v19 += v44;
      v21 += v44;
      v22 += v44;
      v18 -= v43;
      goto LABEL_31;
    }
    if (v27 != 0xFFFF) {
      break;
    }
    uint32x4_t v28 = (int8x16_t *)&v22[v18];
    int32x4_t v29 = (int8x16_t *)v22;
    do
      unsigned __int32 v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v26)) & 0x80) != 0);
    do
    {
      uint16x8_t v31 = v30;
      unsigned __int32 v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        uint16x8_t v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          uint16x8_t v31 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    uint64_t v32 = 0;
    int64_t v33 = (char *)v31 - v22;
    unint64_t v34 = (char *)v31 - v22;
    do
    {
      int8x16_t v35 = vrev16q_s8(*(int8x16_t *)&v19->i8[v32]);
      uint16x8_t v36 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v32]);
      a14 = vbicq_s8(v35, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_1850CD880)));
      uint32x4_t v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v36.i8, *(uint16x4_t *)v35.i8, 3), v25), a9);
      uint32x4_t v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v36, (uint16x8_t)v35, 7), v25), a9);
      *(int8x16_t *)&v21->i8[v32] = vrev16q_s8((int8x16_t)vqaddq_u16((uint16x8_t)a14, vqsubq_u16(v36, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL))));
      v22 += v23;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    int32x4_t v21 = (int8x8_t *)((char *)v21 + v32);
    uint64_t v19 = (int8x8_t *)((char *)v19 + v32);
    unint64_t v18 = v18 - v33 + v34;
LABEL_31:
    if (v18 <= 1) {
      goto LABEL_34;
    }
  }
  uint64_t v45 = 0;
  while (1)
  {
    uint16x8_t v46 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v19->i8[v45]);
    uint16x8_t v47 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v45]);
    a14.i32[0] = v27;
    uint16x8_t v48 = (uint16x8_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_1850CD890);
    int16x8_t v49 = (int16x8_t)vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v48.i8);
    uint32x4_t v50 = vmull_high_u16(v46, v48);
    uint32x4_t v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)v49, v25), a9);
    *(uint16x4_t *)v51.i8 = vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL);
    uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v25), a9);
    uint32x4_t v53 = vsraq_n_u32(v52, v52, 0x10uLL);
    *(int16x4_t *)v49.i8 = vdup_lane_s16(*(int16x4_t *)v51.i8, 3);
    int16x4_t v54 = (int16x4_t)vqshrn_n_u32(v53, 0x10uLL);
    v49.i64[1] = vdupq_lane_s16(v54, 3).u64[0];
    uint16x8_t v55 = (uint16x8_t)vbicq_s8((int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v51.i8, v53, 0x10uLL), (int8x16_t)vceqzq_s16(v49));
    uint32x4_t v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v51.i8, 3), v25), a9);
    uint32x4_t v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_lane_u16(v47, (uint16x4_t)v54, 3), v25), a9);
    a14 = (int8x16_t)vsraq_n_u32(v57, v57, 0x10uLL);
    *(int8x16_t *)&v21->i8[v45] = vrev16q_s8((int8x16_t)vqaddq_u16(v55, vqsubq_u16(v47, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL), (uint32x4_t)a14, 0x10uLL))));
    v22 += v23;
    v18 -= 2;
    if (v18 < 2) {
      break;
    }
    unsigned __int32 v27 = *(unsigned __int16 *)v22;
    v45 += v24;
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu)
    {
      uint64_t v19 = (int8x8_t *)((char *)v19 + v45);
      int32x4_t v21 = (int8x8_t *)((char *)v21 + v45);
      goto LABEL_31;
    }
  }
  uint64_t v19 = (int8x8_t *)((char *)v19 + v24 + v45);
  int32x4_t v21 = (int8x8_t *)((char *)v21 + v24 + v45);
LABEL_34:
  uint64_t v58 = v18 + a17;
  if (v58)
  {
    uint32x4_t v59 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v60.i64[0] = 0x800000008000;
    v60.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a9.i32[0] = *v22;
        uint32x4_t v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v19), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v59), v60);
        *(uint16x4_t *)v61.i8 = vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
        uint16x4_t v62 = (uint16x4_t)vrev16_s8(*v21);
        uint16x4_t v63 = (uint16x4_t)vbic_s8(*(int8x8_t *)v61.i8, (int8x8_t)vceqz_s16(vdup_lane_s16(*(int16x4_t *)v61.i8, 3)));
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v62, *(uint16x4_t *)v61.i8, 3), v59), v60);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqadd_u16(v63, vqsub_u16(v62, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL))));
        *int32x4_t v21 = *(int8x8_t *)a9.i8;
      }
      int32x4_t v64 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v64 >= v20) {
        uint64_t v65 = -(uint64_t)a5;
      }
      else {
        uint64_t v65 = 0;
      }
      uint64_t v19 = &v64[v65];
      v21 += a6;
      --v58;
    }
    while (v58);
  }
  *uint64_t result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)1,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, uint32x4_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  int32x4_t v21 = *a4;
  if (a17 < 2) {
    goto LABEL_34;
  }
  uint64_t v22 = 2 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  uint64_t v24 = 16 * a6;
  a9 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  while (1)
  {
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      unint64_t v34 = (int8x16_t *)&v21[v17];
      int8x16_t v35 = (int8x16_t *)v21;
      do
        uint16x8_t v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v36)) & 0x80) != 0);
      do
      {
        uint32x4_t v37 = v36;
        uint16x8_t v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && !v37->i32[0]);
      if (v37 < v34)
      {
        while (!v37->i8[0])
        {
          uint32x4_t v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            uint32x4_t v37 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      int64_t v38 = (char *)v37 - v21;
      int64_t v39 = ((char *)v37 - v21) * a6;
      v18 += v39;
      v20 += v39;
      v21 += v39;
      v17 -= v38;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF) {
      break;
    }
    unsigned __int32 v27 = (int8x16_t *)&v21[v17];
    uint32x4_t v28 = (int8x16_t *)v21;
    do
      int32x4_t v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, v23)) & 0x80) != 0);
    do
    {
      unsigned __int32 v30 = v29;
      int32x4_t v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        unsigned __int32 v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          unsigned __int32 v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    uint64_t v31 = 0;
    int64_t v32 = (char *)v30 - v21;
    unint64_t v33 = (char *)v30 - v21;
    do
    {
      *(_OWORD *)&v20->i8[v31] = *(_OWORD *)&v18->i8[v31];
      v21 += v22;
      v33 -= 2;
      v31 += v24;
    }
    while (v33 > 1);
    unint64_t v20 = (int8x8_t *)((char *)v20 + v31);
    unint64_t v18 = (int8x8_t *)((char *)v18 + v31);
    unint64_t v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1) {
      goto LABEL_34;
    }
  }
  uint64_t v40 = 0;
  while (1)
  {
    uint16x8_t v41 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v40]);
    uint16x8_t v42 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v20->i8[v40]);
    a13.i32[0] = v26;
    a13 = vqtbl1q_s8(a13, (int8x16_t)xmmword_1850CD890);
    uint16x8_t v43 = (uint16x8_t)vmvnq_s8(a13);
    uint32x4_t v44 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)a13.i8), vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v43.i8));
    uint32x4_t v45 = vqaddq_u32(vmull_high_u16(v41, (uint16x8_t)a13), vmull_high_u16(v42, v43));
    uint32x4_t v46 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v44, a9), v25);
    uint32x4_t v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v45, a9), v25);
    *(int8x16_t *)&v20->i8[v40] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v46, v46, 0x10uLL), 0x10uLL), vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2) {
      break;
    }
    unsigned __int32 v26 = *(unsigned __int16 *)v21;
    v40 += v24;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      unint64_t v18 = (int8x8_t *)((char *)v18 + v40);
      unint64_t v20 = (int8x8_t *)((char *)v20 + v40);
      goto LABEL_31;
    }
  }
  unint64_t v18 = (int8x8_t *)((char *)v18 + v24 + v40);
  unint64_t v20 = (int8x8_t *)((char *)v20 + v24 + v40);
LABEL_34:
  uint64_t v48 = v17 + a16;
  if (v48)
  {
    uint32x4_t v49 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v50.i64[0] = 0x800000008000;
    v50.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        int8x8_t v51 = vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        a9 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v18), (uint16x4_t)v51), vmull_u16((uint16x4_t)vrev16_s8(*v20), (uint16x4_t)vmvn_s8(v51))), v49), v50);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32(a9, a9, 0x10uLL), 0x10uLL));
        *unint64_t v20 = *(int8x8_t *)a9.i8;
      }
      uint32x4_t v52 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v52 >= v19) {
        uint64_t v53 = -(uint64_t)a5;
      }
      else {
        uint64_t v53 = 0;
      }
      unint64_t v18 = &v52[v53];
      v20 += a6;
      --v48;
    }
    while (v48);
  }
  *uint64_t result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

uint64_t *VEC::template_mark_pixelmask_row<(CGCompositeOperation)0,_RGBA16_t>(uint64_t *result, int8x16_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int8x8_t a9, double a10, double a11, double a12, uint32x4_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  int32x4_t v21 = *a4;
  if (a17 < 2) {
    goto LABEL_33;
  }
  uint64_t v22 = 2 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  uint64_t v24 = 16 * a6;
  a9.i32[1] = 0;
  uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v26.i64[0] = 0x800000008000;
  v26.i64[1] = 0x800000008000;
  while (1)
  {
    unsigned __int32 v27 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      int64_t v39 = (int8x16_t *)&v21[v17];
      uint64_t v40 = (int8x16_t *)v21;
      do
        uint16x8_t v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        uint16x8_t v42 = v41;
        uint16x8_t v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          uint16x8_t v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            uint16x8_t v42 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      int64_t v43 = (char *)v42 - v21;
      int64_t v44 = ((char *)v42 - v21) * a6;
      v18 += 8 * v44;
      unint64_t v20 = (int8x16_t *)((char *)v20 + 8 * v44);
      v21 += v44;
      v17 -= v43;
      goto LABEL_30;
    }
    if (v27 != 0xFFFF) {
      break;
    }
    uint32x4_t v28 = (int8x16_t *)&v21[v17];
    int32x4_t v29 = (int8x16_t *)v21;
    do
      unsigned __int32 v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v23)) & 0x80) != 0);
    do
    {
      uint64_t v31 = v30;
      unsigned __int32 v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        uint64_t v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          uint64_t v31 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    uint64_t v32 = 0;
    int64_t v33 = (char *)v31 - v21;
    unint64_t v34 = (char *)v31 - v21;
    do
    {
      *(int8x16_t *)((char *)v20 + v32) = 0uLL;
      v21 += v22;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    unint64_t v20 = (int8x16_t *)((char *)v20 + v32);
    v18 += v32;
    unint64_t v17 = v17 - v33 + v34;
LABEL_30:
    if (v17 <= 1) {
      goto LABEL_33;
    }
  }
  while (1)
  {
    uint16x8_t v35 = (uint16x8_t)vrev16q_s8(*v20);
    a13.i32[0] = v27;
    uint16x8_t v36 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850CD890);
    uint32x4_t v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v36.i8), v25), v26);
    uint32x4_t v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v35, v36), v25), v26);
    a13 = vsraq_n_u32(v38, v38, 0x10uLL);
    *unint64_t v20 = vrev16q_s8((int8x16_t)vqsubq_u16(v35, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), a13, 0x10uLL)));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2) {
      break;
    }
    unsigned __int32 v27 = *(unsigned __int16 *)v21;
    v18 += v24;
    unint64_t v20 = (int8x16_t *)((char *)v20 + v24);
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu) {
      goto LABEL_30;
    }
  }
  v18 += v24;
  unint64_t v20 = (int8x16_t *)((char *)v20 + v24);
LABEL_33:
  uint64_t v45 = v17 + a16;
  if (v45)
  {
    uint32x4_t v46 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v47.i64[0] = 0x800000008000;
    v47.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        uint16x4_t v48 = (uint16x4_t)vrev16_s8(*(int8x8_t *)v20->i8);
        uint32x4_t v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v48, (uint16x4_t)vdup_lane_s8(a9, 0)), v46), v47);
        a9 = vrev16_s8((int8x8_t)vqsub_u16(v48, vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL)));
        v20->i64[0] = *(uint64_t *)&a9;
      }
      unint64_t v50 = v18 + 8 * a6;
      v21 += a6;
      if (v50 >= v19) {
        uint64_t v51 = -(uint64_t)a5;
      }
      else {
        uint64_t v51 = 0;
      }
      unint64_t v18 = v50 + 8 * v51;
      unint64_t v20 = (int8x16_t *)((char *)v20 + 8 * a6);
      --v45;
    }
    while (v45);
  }
  *uint64_t result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)23,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  uint64_t v10 = *result;
  unint64_t v11 = *a3;
  int v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0xFFFFFFFFFFFFLL;
    v20.i64[1] = 0xFFFFFFFFFFFFLL;
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v22 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v23 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880);
      int16x8_t v25 = (int16x8_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      int8x16_t v27 = (int8x16_t)vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      uint16x8_t v28 = (uint16x8_t)vmvnq_s8(v27);
      uint16x8_t v29 = (uint16x8_t)vandq_s8(v27, v20);
      int8x16_t v30 = (int8x16_t)vcgtq_u16(v29, v28);
      uint16x8_t v31 = vabdq_u16(v28, v29);
      uint32x4_t v32 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8);
      uint32x4_t v33 = vmull_high_u16(v26, v31);
      uint32x4_t v34 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v32, v19), v21);
      uint32x4_t v35 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v33, v19), v21);
      uint16x8_t v36 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v34, v34, 0x10uLL), 0x10uLL), vsraq_n_u32(v35, v35, 0x10uLL), 0x10uLL);
      int8x16_t v37 = vbslq_s8(v30, (int8x16_t)vqsubq_u16((uint16x8_t)v27, v36), (int8x16_t)vqaddq_u16((uint16x8_t)v27, v36));
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v24), v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), v22, (int8x16_t)vminq_u16((uint16x8_t)v37, (uint16x8_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_1850CD880)))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    int v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    uint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v38 = v9 + a8;
  if (v38)
  {
    if (a6) {
      __int16 v39 = 0;
    }
    else {
      __int16 v39 = -1;
    }
    int8x8_t v40 = 0;
    v40.i16[3] = v39;
    int8x8_t v41 = 0;
    if (a7) {
      __int16 v42 = 0;
    }
    else {
      __int16 v42 = -1;
    }
    v41.i16[3] = v42;
    uint32x4_t v43 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v44.i64[0] = 0x800000008000;
    v44.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v45 = (int16x4_t)vorr_s8(v40, vrev16_s8(*v10));
      int16x4_t v46 = (int16x4_t)vorr_s8(v41, vrev16_s8(*v12));
      int16x4_t v47 = vdup_lane_s16(v45, 3);
      int16x4_t v48 = vdup_lane_s16(v46, 3);
      int8x8_t v49 = (int8x8_t)vmin_u16((uint16x4_t)v46, (uint16x4_t)v48);
      uint16x4_t v50 = (uint16x4_t)vmvn_s8(v49);
      uint16x4_t v51 = (uint16x4_t)v49;
      v51.i16[3] = 0;
      uint32x4_t v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vmin_u16((uint16x4_t)v45, (uint16x4_t)v47), vabd_u16(v50, v51)), v43), v44);
      *(uint16x4_t *)v52.i8 = vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
      *(int8x8_t *)v52.i8 = vbsl_s8((int8x8_t)vcgt_u16(v51, v50), (int8x8_t)vqsub_u16((uint16x4_t)v49, *(uint16x4_t *)v52.i8), (int8x8_t)vqadd_u16((uint16x4_t)v49, *(uint16x4_t *)v52.i8));
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v47), (int8x8_t)v46, vbsl_s8((int8x8_t)vceqz_s16(v48), (int8x8_t)v45, (int8x8_t)vmin_u16(*(uint16x4_t *)v52.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v52.i8, 3)))));
      uint64_t v53 = &v10[a5];
      if ((unint64_t)v53 >= v11) {
        uint64_t v54 = -(uint64_t)a4;
      }
      else {
        uint64_t v54 = 0;
      }
      uint64_t v10 = &v53[v54];
      v12 += a5;
      --v38;
    }
    while (v38);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)22,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  uint64_t v10 = *result;
  unint64_t v11 = *a3;
  int v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD880);
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      uint16x8_t v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      uint32x4_t v27 = vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3);
      v27.i32[3] = 0;
      uint32x4_t v28 = vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7);
      uint16x8_t v29 = (uint16x8_t)vabdq_u32(vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3), v27);
      v28.i32[3] = 0;
      uint32x4_t v30 = vabdq_u32(vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7), v28);
      uint16x8_t v31 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      uint32x4_t v32 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8);
      uint32x4_t v33 = vqaddq_u32(v30, vmull_high_u16(v26, v31));
      uint16x8_t v34 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      uint32x4_t v35 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v34.i8);
      uint32x4_t v36 = vqaddq_u32(v33, vmull_high_u16(v25, v34));
      uint32x4_t v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v29, v32), v35), v19), v20);
      *(uint16x4_t *)v37.i8 = vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL);
      uint32x4_t v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v36, v19), v20);
      uint32x4_t v39 = vsraq_n_u32(v38, v38, 0x10uLL);
      *(int16x4_t *)v29.i8 = vdup_lane_s16(*(int16x4_t *)v37.i8, 3);
      v29.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v39, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v37.i8, v39, 0x10uLL), v29))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    int v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    uint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v40 = v9 + a8;
  if (v40)
  {
    if (a6) {
      __int16 v41 = 0;
    }
    else {
      __int16 v41 = -1;
    }
    int8x8_t v42 = 0;
    v42.i16[3] = v41;
    int8x8_t v43 = 0;
    if (a7) {
      __int16 v44 = 0;
    }
    else {
      __int16 v44 = -1;
    }
    v43.i16[3] = v44;
    uint32x4_t v45 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v46.i64[0] = 0x800000008000;
    v46.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v47 = (int16x4_t)vorr_s8(v42, vrev16_s8(*v10));
      int16x4_t v48 = (int16x4_t)vorr_s8(v43, vrev16_s8(*v12));
      int16x4_t v49 = vdup_lane_s16(v47, 3);
      int16x4_t v50 = vdup_lane_s16(v48, 3);
      uint16x4_t v51 = vmin_u16((uint16x4_t)v47, (uint16x4_t)v49);
      uint16x4_t v52 = vmin_u16((uint16x4_t)v48, (uint16x4_t)v50);
      uint32x4_t v53 = vmull_lane_u16(v52, (uint16x4_t)v47, 3);
      v53.i32[3] = 0;
      uint32x4_t v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_lane_u16(v51, (uint16x4_t)v48, 3), v53), vmull_u16(v52, (uint16x4_t)vmvn_s8((int8x8_t)v49))), vmull_u16(v51, (uint16x4_t)vmvn_s8((int8x8_t)v50))), v45), v46);
      *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v49), (int8x8_t)v48, vbsl_s8((int8x8_t)vceqz_s16(v50), (int8x8_t)v47, (int8x8_t)vmin_u16(*(uint16x4_t *)v54.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v54.i8, 3)))));
      uint16x8_t v55 = &v10[a5];
      if ((unint64_t)v55 >= v11) {
        uint64_t v56 = -(uint64_t)a4;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v10 = &v55[v56];
      v12 += a5;
      --v40;
    }
    while (v40);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)21,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10 = a9;
  unint64_t v11 = *result;
  unint64_t v12 = *a3;
  uint64_t v13 = *a2;
  if (a9 >= 2)
  {
    uint64_t v14 = 0;
    if (a6) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = -1;
    }
    v16.i64[0] = 0xFFFF000000000000;
    v16.i64[1] = 0xFFFF000000000000;
    int8x16_t v17 = vandq_s8((int8x16_t)vdupq_n_s16(v15), v16);
    if (a7) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = -1;
    }
    int8x16_t v19 = vandq_s8((int8x16_t)vdupq_n_s16(v18), v16);
    uint32x4_t v20 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v22 = vorrq_s8(v17, vrev16q_s8(*(int8x16_t *)v11[v14].i8));
      int16x8_t v23 = (int16x8_t)vorrq_s8(v19, vrev16q_s8(*(int8x16_t *)v13[v14].i8));
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880);
      int16x8_t v25 = (int16x8_t)vqtbl1q_s8((int8x16_t)v23, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      uint16x8_t v27 = vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      int16x8_t v28 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v24, (uint16x8_t)0), v26);
      int8x16_t v29 = (int8x16_t)vzip1q_s16(v28, v28);
      uint32x4_t v30 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v27.i8);
      uint32x4_t v31 = vmull_high_u16(v26, v27);
      uint16x8_t v32 = vqsubq_u16((uint16x8_t)v25, v27);
      uint16x8_t v33 = vqsubq_u16((uint16x8_t)v24, v26);
      uint32x4_t v34 = vmull_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v33.i8);
      uint32x4_t v35 = vmull_high_u16(v32, v33);
      uint32x4_t v36 = (uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v28, v28), (int8x16_t)vqaddq_u32(v31, v31), (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v23, 7), (uint16x8_t)v22, 7), vqaddq_u32(v35, v35)));
      uint32x4_t v37 = (uint32x4_t)vbslq_s8(v29, (int8x16_t)vqaddq_u32(v30, v30), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v23.i8, 3), *(uint16x4_t *)v22.i8, 3), vqaddq_u32(v34, v34)));
      uint16x8_t v38 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      uint32x4_t v39 = vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v38.i8);
      uint32x4_t v40 = vqaddq_u32(v36, vmull_high_u16(v27, v38));
      uint16x8_t v41 = (uint16x8_t)vmvnq_s8((int8x16_t)v25);
      uint32x4_t v42 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v41.i8);
      uint32x4_t v43 = vqaddq_u32(v40, vmull_high_u16(v26, v41));
      uint32x4_t v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(v37, v39), v42), v20), v21);
      *(uint16x4_t *)v44.i8 = vqshrn_n_u32(vsraq_n_u32(v44, v44, 0x10uLL), 0x10uLL);
      uint32x4_t v45 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v43, v20), v21);
      uint32x4_t v46 = vsraq_n_u32(v45, v45, 0x10uLL);
      *(int16x4_t *)v41.i8 = vdup_lane_s16(*(int16x4_t *)v44.i8, 3);
      v41.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v46, 0x10uLL), 3);
      int16x8_t v9 = (int16x8_t)vqshrn_high_n_u32(*(uint16x4_t *)v44.i8, v46, 0x10uLL);
      *(int8x16_t *)v13[v14].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v24), (int8x16_t)v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), v22, (int8x16_t)vminq_u16((uint16x8_t)v9, v41))));
      v10 -= 2;
      v14 += 2 * a5;
    }
    while (v10 > 1);
    uint64_t v13 = (int8x8_t *)((char *)v13 + v14 * 8);
    unint64_t v11 = (int8x8_t *)((char *)v11 + v14 * 8);
  }
  uint64_t v47 = v10 + a8;
  if (v47)
  {
    if (a6) {
      __int16 v48 = 0;
    }
    else {
      __int16 v48 = -1;
    }
    int8x8_t v49 = 0;
    v49.i16[3] = v48;
    if (a7) {
      __int16 v50 = 0;
    }
    else {
      __int16 v50 = -1;
    }
    int8x8_t v51 = 0;
    v51.i16[3] = v50;
    uint32x4_t v52 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v53.i64[0] = 0x800000008000;
    v53.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v54 = (int16x4_t)vorr_s8(v49, vrev16_s8(*v11));
      int16x4_t v55 = vdup_lane_s16(v54, 3);
      int16x4_t v56 = (int16x4_t)vorr_s8(v51, vrev16_s8(*v13));
      int16x4_t v57 = vdup_lane_s16(v56, 3);
      uint16x4_t v58 = vmin_u16((uint16x4_t)v54, (uint16x4_t)v55);
      uint16x4_t v59 = vmin_u16((uint16x4_t)v56, (uint16x4_t)v57);
      *(uint16x4_t *)v9.i8 = vcge_u16(vrhadd_u16((uint16x4_t)v55, 0), v58);
      uint32x4_t v60 = vmull_u16(v58, v59);
      uint32x4_t v61 = vmull_u16(vqsub_u16((uint16x4_t)v57, v59), vqsub_u16((uint16x4_t)v55, v58));
      int16x8_t v9 = (int16x8_t)vbslq_s8((int8x16_t)vzip1q_s16(v9, v9), (int8x16_t)vqaddq_u32(v60, v60), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v57, (uint16x4_t)v54, 3), vqaddq_u32(v61, v61)));
      uint32x4_t v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v9, vmull_u16(v59, (uint16x4_t)vmvn_s8((int8x8_t)v55))), vmull_u16(v58, (uint16x4_t)vmvn_s8((int8x8_t)v57))), v52), v53);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      int8x8_t *v13 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v55), (int8x8_t)v56, vbsl_s8((int8x8_t)vceqz_s16(v57), (int8x8_t)v54, (int8x8_t)vmin_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v62.i8, 3)))));
      uint16x4_t v63 = &v11[a5];
      if ((unint64_t)v63 >= v12) {
        uint64_t v64 = -(uint64_t)a4;
      }
      else {
        uint64_t v64 = 0;
      }
      unint64_t v11 = &v63[v64];
      v13 += a5;
      --v47;
    }
    while (v47);
  }
  *uint64_t result = v11;
  *a3 = v12;
  *a2 = v13;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)20,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD880);
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      uint16x8_t v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      int16x4_t v27 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v26.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v24.i8)))));
      int32x4_t v28 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16(v26, v26)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)))));
      uint32x4_t v29 = vmull_lane_u16((uint16x4_t)v27, *(uint16x4_t *)v21.i8, 3);
      uint16x8_t v30 = vqsubq_u16(v26, (uint16x8_t)vqmovun_high_s32(v27, v28));
      uint32x4_t v31 = vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v25.i8);
      uint32x4_t v32 = vmull_high_u16(v30, v25);
      uint32x4_t v33 = vqaddq_u32(v29, vqaddq_u32(v31, v31));
      uint32x4_t v34 = vqaddq_u32(vmull_laneq_u16((uint16x4_t)vqmovun_s32(v28), (uint16x8_t)v21, 7), vqaddq_u32(v32, v32));
      uint16x8_t v35 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      uint32x4_t v36 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v35.i8);
      uint32x4_t v37 = vmull_high_u16(v26, v35);
      uint32x4_t v38 = vqaddq_u32(v33, v36);
      uint32x4_t v39 = vqaddq_u32(v34, v37);
      uint16x8_t v40 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      uint32x4_t v41 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v40.i8);
      uint32x4_t v42 = vqaddq_u32(v39, vmull_high_u16(v25, v40));
      uint32x4_t v43 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v38, v41), v19), v20);
      *(uint16x4_t *)v43.i8 = vqshrn_n_u32(vsraq_n_u32(v43, v43, 0x10uLL), 0x10uLL);
      uint32x4_t v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v42, v19), v20);
      uint32x4_t v45 = vsraq_n_u32(v44, v44, 0x10uLL);
      *(int16x4_t *)v40.i8 = vdup_lane_s16(*(int16x4_t *)v43.i8, 3);
      v40.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v45, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v43.i8, v45, 0x10uLL), v40))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v46 = v9 + a8;
  if (v46)
  {
    if (a6) {
      __int16 v47 = 0;
    }
    else {
      __int16 v47 = -1;
    }
    int8x8_t v48 = 0;
    v48.i16[3] = v47;
    int8x8_t v49 = 0;
    if (a7) {
      __int16 v50 = 0;
    }
    else {
      __int16 v50 = -1;
    }
    v49.i16[3] = v50;
    uint32x4_t v51 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v52.i64[0] = 0x800000008000;
    v52.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v53 = (int16x4_t)vorr_s8(v48, vrev16_s8(*v10));
      int16x4_t v54 = vdup_lane_s16(v53, 3);
      int16x4_t v55 = (int16x4_t)vorr_s8(v49, vrev16_s8(*v12));
      int16x4_t v56 = vdup_lane_s16(v55, 3);
      uint16x4_t v57 = vmin_u16((uint16x4_t)v53, (uint16x4_t)v54);
      uint16x4_t v58 = vmin_u16((uint16x4_t)v55, (uint16x4_t)v56);
      uint16x4_t v59 = (uint16x4_t)vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(v58, v58)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v56)))));
      uint32x4_t v60 = vmull_lane_u16(v59, (uint16x4_t)v53, 3);
      uint32x4_t v61 = vmull_u16(vqsub_u16(v58, v59), v57);
      uint32x4_t v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32(v60, vqaddq_u32(v61, v61)), vmull_u16(v58, (uint16x4_t)vmvn_s8((int8x8_t)v54))), vmull_u16(v57, (uint16x4_t)vmvn_s8((int8x8_t)v56))), v51), v52);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v54), (int8x8_t)v55, vbsl_s8((int8x8_t)vceqz_s16(v56), (int8x8_t)v53, (int8x8_t)vmin_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v62.i8, 3)))));
      uint16x4_t v63 = &v10[a5];
      if ((unint64_t)v63 >= v11) {
        uint64_t v64 = -(uint64_t)a4;
      }
      else {
        uint64_t v64 = 0;
      }
      unint64_t v10 = &v63[v64];
      v12 += a5;
      --v46;
    }
    while (v46);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)19,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      int16x8_t v20 = (int16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v21 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)v20, (int8x16_t)xmmword_1850CD880);
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v24 = vminq_u16((uint16x8_t)v20, (uint16x8_t)v22);
      uint16x8_t v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      uint16x8_t v26 = vqsubq_u16((uint16x8_t)v23, v25);
      float32x4_t v27 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v26.i8));
      float32x4_t v28 = vcvtq_f32_u32(vmovl_high_u16(v26));
      uint16x4_t v29 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v20.i8, 3);
      uint16x4_t v30 = (uint16x4_t)vdup_laneq_s16(v20, 7);
      float32x4_t v31 = vcvtq_f32_u32(vmovl_high_u16(v24));
      float32x4_t v32 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v24.i8));
      uint16x8_t v33 = (uint16x8_t)vmvnq_s8((int8x16_t)v22);
      uint32x4_t v34 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v33.i8);
      uint32x4_t v35 = vmull_high_u16(v25, v33);
      uint16x8_t v36 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      uint32x4_t v37 = vmull_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v36.i8);
      float32x4_t v38 = vaddq_f32(vcvtq_f32_u32(v35), vcvtq_f32_u32(vmull_high_u16(v24, v36)));
      *(int16x4_t *)v35.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v34), vcvtq_f32_u32(v37)), vcvtq_f32_u32(vmull_lane_u16(v29, *(uint16x4_t *)v21.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v27, vcvtq_f32_u32(vmull_lane_u16(v29, *(uint16x4_t *)v20.i8, 3))), v32), (int8x16_t)vceqzq_f32(v27))), v19)));
      int32x4_t v39 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(v38, vcvtq_f32_u32(vmull_laneq_u16(v30, (uint16x8_t)v21, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v28, vcvtq_f32_u32(vmull_laneq_u16(v30, (uint16x8_t)v20, 7))), v31), (int8x16_t)vceqzq_f32(v28))), v19));
      *(int16x4_t *)v28.f32 = vdup_lane_s16(*(int16x4_t *)v35.i8, 3);
      *(int16x4_t *)&v28.u32[2] = vdup_lane_s16(vqmovun_s32(v39), 3);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v22), v21, vbslq_s8((int8x16_t)vceqzq_s16(v23), (int8x16_t)v20, (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v35.i8, v39), (uint16x8_t)v28))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v40 = v9 + a8;
  if (v40)
  {
    int8x8_t v41 = 0;
    if (a6) {
      __int16 v42 = 0;
    }
    else {
      __int16 v42 = -1;
    }
    int8x8_t v43 = 0;
    v43.i16[3] = v42;
    if (a7) {
      __int16 v44 = 0;
    }
    else {
      __int16 v44 = -1;
    }
    v41.i16[3] = v44;
    float32x4_t v45 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      int16x4_t v46 = (int16x4_t)vorr_s8(v43, vrev16_s8(*v10));
      int16x4_t v47 = (int16x4_t)vorr_s8(v41, vrev16_s8(*v12));
      int16x4_t v48 = vdup_lane_s16(v46, 3);
      int16x4_t v49 = vdup_lane_s16(v47, 3);
      uint16x4_t v50 = vmin_u16((uint16x4_t)v46, (uint16x4_t)v48);
      uint16x4_t v51 = vmin_u16((uint16x4_t)v47, (uint16x4_t)v49);
      float32x4_t v52 = vcvtq_f32_u32(vmovl_u16(vqsub_u16((uint16x4_t)v49, v51)));
      int16x4_t v53 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmull_u16(v51, (uint16x4_t)vmvn_s8((int8x8_t)v48))), vcvtq_f32_u32(vmull_u16(v50, (uint16x4_t)vmvn_s8((int8x8_t)v49)))), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v48, (uint16x4_t)v47, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v52, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v48, (uint16x4_t)v46, 3))), vcvtq_f32_u32(vmovl_u16(v50))), (int8x16_t)vceqzq_f32(v52))), v45)));
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v48), (int8x8_t)v47, vbsl_s8((int8x8_t)vceqz_s16(v49), (int8x8_t)v46, (int8x8_t)vmin_u16((uint16x4_t)v53, (uint16x4_t)vdup_lane_s16(v53, 3)))));
      int16x4_t v54 = &v10[a5];
      if ((unint64_t)v54 >= v11) {
        uint64_t v55 = -(uint64_t)a4;
      }
      else {
        uint64_t v55 = 0;
      }
      unint64_t v10 = &v54[v55];
      v12 += a5;
      --v40;
    }
    while (v40);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)18,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0xFFFFFFFFFFFFLL;
    v20.i64[1] = 0xFFFFFFFFFFFFLL;
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      int16x8_t v22 = (int16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v23 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)v22, (int8x16_t)xmmword_1850CD880);
      int16x8_t v25 = (int16x8_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_1850CD880);
      int8x16_t v26 = (int8x16_t)vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      int16x8_t v27 = (int16x8_t)vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      uint16x8_t v28 = (uint16x8_t)vandq_s8(v26, v20);
      int16x8_t v29 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v27, v27), (int8x16_t)vcgtq_u16((uint16x8_t)v24, v28));
      int8x16_t v30 = (int8x16_t)vmovl_high_s16(v29);
      uint16x8_t v31 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v24, v28), (int8x16_t)vceqzq_s16(v27));
      uint16x8_t v32 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      uint32x4_t v33 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v27.i8)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v22.i8, 3), *(uint16x4_t *)v22.i8, 3))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8)), vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v32.i8));
      uint32x4_t v34 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v27)), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v22, 7), (uint16x8_t)v22, 7))), vcvtq_f32_u32(vmovl_high_u16(v31)))), v30), vmull_high_u16((uint16x8_t)v27, v32));
      uint16x8_t v35 = (uint16x8_t)vmvnq_s8((int8x16_t)v25);
      uint32x4_t v36 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v35.i8);
      uint32x4_t v37 = vqaddq_u32(v34, vmull_high_u16((uint16x8_t)v26, v35));
      uint32x4_t v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v33, v36), v19), v21);
      *(uint16x4_t *)v38.i8 = vqshrn_n_u32(vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL);
      uint32x4_t v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v19), v21);
      uint32x4_t v40 = vsraq_n_u32(v39, v39, 0x10uLL);
      *(int16x4_t *)v35.i8 = vdup_lane_s16(*(int16x4_t *)v38.i8, 3);
      v35.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v40, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v24), v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), (int8x16_t)v22, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v38.i8, v40, 0x10uLL), v35))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v41 = v9 + a8;
  if (v41)
  {
    if (a6) {
      __int16 v42 = 0;
    }
    else {
      __int16 v42 = -1;
    }
    int8x8_t v43 = 0;
    v43.i16[3] = v42;
    int8x8_t v44 = 0;
    if (a7) {
      __int16 v45 = 0;
    }
    else {
      __int16 v45 = -1;
    }
    v44.i16[3] = v45;
    uint32x4_t v46 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v47.i64[0] = 0x800000008000;
    v47.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v48 = (int16x4_t)vorr_s8(v43, vrev16_s8(*v10));
      int16x4_t v49 = (int16x4_t)vorr_s8(v44, vrev16_s8(*v12));
      int16x4_t v50 = vdup_lane_s16(v48, 3);
      int16x4_t v51 = vdup_lane_s16(v49, 3);
      uint16x4_t v52 = vmin_u16((uint16x4_t)v48, (uint16x4_t)v50);
      int16x4_t v53 = (int16x4_t)vmin_u16((uint16x4_t)v49, (uint16x4_t)v51);
      uint32x4_t v54 = vmull_u16(v52, (uint16x4_t)vmvn_s8((int8x8_t)v51));
      v52.i16[3] = 0;
      uint32x4_t v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v53)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v50, (uint16x4_t)v48, 3))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vqsub_u16((uint16x4_t)v50, v52), (int8x8_t)vceqz_s16(v53)))))), (int8x16_t)vmovl_s16((int16x4_t)vbic_s8((int8x8_t)vtst_s16(v53, v53), (int8x8_t)vcgt_u16((uint16x4_t)v50, v52)))), vmull_u16((uint16x4_t)v53, (uint16x4_t)vmvn_s8((int8x8_t)v50))), v54),
                                       v46),
                          v47);
      *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v50), (int8x8_t)v49, vbsl_s8((int8x8_t)vceqz_s16(v51), (int8x8_t)v48, (int8x8_t)vmin_u16(*(uint16x4_t *)v55.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v55.i8, 3)))));
      int16x4_t v56 = &v10[a5];
      if ((unint64_t)v56 >= v11) {
        uint64_t v57 = -(uint64_t)a4;
      }
      else {
        uint64_t v57 = 0;
      }
      unint64_t v10 = &v56[v57];
      v12 += a5;
      --v41;
    }
    while (v41);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)17,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD880);
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      uint16x8_t v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      uint32x4_t v27 = vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3);
      uint16x8_t v28 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      uint32x4_t v29 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v28.i8);
      uint16x8_t v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      uint32x4_t v31 = vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7), vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7)), vmull_high_u16(v25, v28)), vmull_high_u16(v26, v30));
      uint32x4_t v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(v27, vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3)), v29), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v30.i8)), v19), v20);
      uint32x4_t v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v31, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v34 = v9 + a8;
  if (v34)
  {
    if (a6) {
      __int16 v35 = 0;
    }
    else {
      __int16 v35 = -1;
    }
    int8x8_t v36 = 0;
    v36.i16[3] = v35;
    int8x8_t v37 = 0;
    if (a7) {
      __int16 v38 = 0;
    }
    else {
      __int16 v38 = -1;
    }
    v37.i16[3] = v38;
    uint32x4_t v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v41 = (int16x4_t)vorr_s8(v36, vrev16_s8(*v10));
      int16x4_t v42 = vdup_lane_s16(v41, 3);
      int16x4_t v43 = (int16x4_t)vorr_s8(v37, vrev16_s8(*v12));
      int16x4_t v44 = vdup_lane_s16(v43, 3);
      uint16x4_t v45 = vmin_u16((uint16x4_t)v41, (uint16x4_t)v42);
      uint16x4_t v46 = vmin_u16((uint16x4_t)v43, (uint16x4_t)v44);
      uint32x4_t v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_lane_u16(v45, (uint16x4_t)v43, 3), vmull_lane_u16(v46, (uint16x4_t)v41, 3)), vmull_u16(v45, (uint16x4_t)vmvn_s8((int8x8_t)v44))), vmull_u16(v46, (uint16x4_t)vmvn_s8((int8x8_t)v42))), v39), v40);
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v42), (int8x8_t)v43, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL))));
      int16x4_t v48 = &v10[a5];
      if ((unint64_t)v48 >= v11) {
        uint64_t v49 = -(uint64_t)a4;
      }
      else {
        uint64_t v49 = 0;
      }
      unint64_t v10 = &v48[v49];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)16,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD880);
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      uint16x8_t v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      uint32x4_t v27 = vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3);
      uint16x8_t v28 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      uint32x4_t v29 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v28.i8);
      uint16x8_t v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      uint32x4_t v31 = vqaddq_u32(vqaddq_u32(vminq_u32(vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7), vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7)), vmull_high_u16(v25, v28)), vmull_high_u16(v26, v30));
      uint32x4_t v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3), v27), v29), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v30.i8)), v19), v20);
      uint32x4_t v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v31, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v34 = v9 + a8;
  if (v34)
  {
    if (a6) {
      __int16 v35 = 0;
    }
    else {
      __int16 v35 = -1;
    }
    int8x8_t v36 = 0;
    v36.i16[3] = v35;
    int8x8_t v37 = 0;
    if (a7) {
      __int16 v38 = 0;
    }
    else {
      __int16 v38 = -1;
    }
    v37.i16[3] = v38;
    uint32x4_t v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v41 = (int16x4_t)vorr_s8(v36, vrev16_s8(*v10));
      int16x4_t v42 = vdup_lane_s16(v41, 3);
      int16x4_t v43 = (int16x4_t)vorr_s8(v37, vrev16_s8(*v12));
      int16x4_t v44 = vdup_lane_s16(v43, 3);
      uint16x4_t v45 = vmin_u16((uint16x4_t)v41, (uint16x4_t)v42);
      uint16x4_t v46 = vmin_u16((uint16x4_t)v43, (uint16x4_t)v44);
      uint32x4_t v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(v45, (uint16x4_t)v43, 3), vmull_lane_u16(v46, (uint16x4_t)v41, 3)), vmull_u16(v45, (uint16x4_t)vmvn_s8((int8x8_t)v44))), vmull_u16(v46, (uint16x4_t)vmvn_s8((int8x8_t)v42))), v39), v40);
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v42), (int8x8_t)v43, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL))));
      int16x4_t v48 = &v10[a5];
      if ((unint64_t)v48 >= v11) {
        uint64_t v49 = -(uint64_t)a4;
      }
      else {
        uint64_t v49 = 0;
      }
      unint64_t v10 = &v48[v49];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)15,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      int16x8_t v21 = (int16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8((int8x16_t)v21, (int8x16_t)xmmword_1850CD880);
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880);
      int16x8_t v25 = (int16x8_t)vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      int16x8_t v26 = (int16x8_t)vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      uint16x8_t v27 = (uint16x8_t)vsubq_s16(v23, v25);
      uint16x8_t v28 = (uint16x8_t)vsubq_s16(v24, v26);
      int16x8_t v29 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v24, (uint16x8_t)0), (uint16x8_t)v26);
      int8x16_t v30 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v26.i8), vmull_u16(*(uint16x4_t *)v28.i8, *(uint16x4_t *)v25.i8));
      int8x16_t v31 = (int8x16_t)vqaddq_u32(vmull_high_u16(v27, (uint16x8_t)v26), vmull_high_u16(v28, (uint16x8_t)v25));
      uint32x4_t v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8), v30, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v21.i8, 3), *(uint16x4_t *)v22.i8, 3), (uint32x4_t)v30)), v19), v20);
      uint32x4_t v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v29), v31, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v21, 7), (uint16x8_t)v22, 7), (uint32x4_t)v31)), v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), (int8x16_t)v21, (int8x16_t)vsubq_s16(vaddq_s16(v26, v25), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL)))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v34 = v9 + a8;
  if (v34)
  {
    if (a6) {
      __int16 v35 = 0;
    }
    else {
      __int16 v35 = -1;
    }
    int8x8_t v36 = 0;
    v36.i16[3] = v35;
    if (a7) {
      __int16 v37 = 0;
    }
    else {
      __int16 v37 = -1;
    }
    int8x8_t v38 = 0;
    v38.i16[3] = v37;
    uint32x4_t v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v41 = (int16x4_t)vorr_s8(v36, vrev16_s8(*v10));
      int16x4_t v42 = (int16x4_t)vorr_s8(v38, vrev16_s8(*v12));
      int16x4_t v43 = vdup_lane_s16(v41, 3);
      int16x4_t v44 = vdup_lane_s16(v42, 3);
      int16x4_t v45 = (int16x4_t)vmin_u16((uint16x4_t)v41, (uint16x4_t)v43);
      int16x4_t v46 = (int16x4_t)vmin_u16((uint16x4_t)v42, (uint16x4_t)v44);
      int8x16_t v47 = (int8x16_t)vqaddq_u32(vmull_u16((uint16x4_t)vsub_s16(v43, v45), (uint16x4_t)v46), vmull_u16((uint16x4_t)vsub_s16(v44, v46), (uint16x4_t)v45));
      uint32x4_t v48 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)vcgt_u16(vrhadd_u16((uint16x4_t)v44, 0), (uint16x4_t)v46)), v47, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v43, (uint16x4_t)v42, 3), (uint32x4_t)v47)), v39), v40);
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v43), (int8x8_t)v42, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vsub_s16(vadd_s16(v46, v45), (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v48, v48, 0x10uLL), 0x10uLL)))));
      uint64_t v49 = &v10[a5];
      if ((unint64_t)v49 >= v11) {
        uint64_t v50 = -(uint64_t)a4;
      }
      else {
        uint64_t v50 = 0;
      }
      unint64_t v10 = &v49[v50];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)14,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      uint16x8_t v23 = (uint16x8_t)vbicq_s8(v22, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880)));
      uint32x4_t v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v23.i8), v19), v20);
      uint32x4_t v25 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v21, v23), v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD880)), v22, (int8x16_t)vqaddq_u16(vqsubq_u16((uint16x8_t)v21, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL), vsraq_n_u32(v25, v25, 0x10uLL), 0x10uLL)), v23)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v26 = v9 + a8;
  if (v26)
  {
    if (a6) {
      __int16 v27 = 0;
    }
    else {
      __int16 v27 = -1;
    }
    int8x8_t v28 = 0;
    v28.i16[3] = v27;
    int8x8_t v29 = 0;
    if (a7) {
      __int16 v30 = 0;
    }
    else {
      __int16 v30 = -1;
    }
    v29.i16[3] = v30;
    uint32x4_t v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v32.i64[0] = 0x800000008000;
    v32.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v33 = (int16x4_t)vorr_s8(v28, vrev16_s8(*v10));
      int16x4_t v34 = (int16x4_t)vorr_s8(v29, vrev16_s8(*v12));
      uint16x4_t v35 = (uint16x4_t)vbic_s8((int8x8_t)v34, (int8x8_t)vdup_lane_s16(vceqz_s16(v34), 3));
      uint32x4_t v36 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)v33, v35), v31), v32);
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vdup_lane_s16(vceqz_s16(v33), 3), (int8x8_t)v34, (int8x8_t)vqadd_u16(vqsub_u16((uint16x4_t)v33, vqshrn_n_u32(vsraq_n_u32(v36, v36, 0x10uLL), 0x10uLL)), v35)));
      __int16 v37 = &v10[a5];
      if ((unint64_t)v37 >= v11) {
        uint64_t v38 = -(uint64_t)a4;
      }
      else {
        uint64_t v38 = 0;
      }
      unint64_t v10 = &v37[v38];
      v12 += a5;
      --v26;
    }
    while (v26);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)13,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD880);
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850CD880);
      int8x16_t v25 = (int8x16_t)vceqzq_s16(v24);
      uint16x8_t v26 = (uint16x8_t)vbicq_s8(v22, v25);
      uint32x4_t v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v26.i8), v19), v20);
      uint32x4_t v28 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v21, v26), v19), v20);
      uint16x8_t v29 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL), vsraq_n_u32(v28, v28, 0x10uLL), 0x10uLL);
      uint16x8_t v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      uint16x8_t v31 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      uint32x4_t v32 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v30.i8), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8));
      uint32x4_t v33 = vqaddq_u32(vmull_high_u16((uint16x8_t)v21, v30), vmull_high_u16(v26, v31));
      uint32x4_t v34 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v32, v19), v20);
      uint32x4_t v35 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v33, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8(v25, v21, (int8x16_t)vqaddq_u16(v29, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v34, v34, 0x10uLL), 0x10uLL), vsraq_n_u32(v35, v35, 0x10uLL), 0x10uLL)))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v36 = v9 + a8;
  if (v36)
  {
    if (a6) {
      __int16 v37 = 0;
    }
    else {
      __int16 v37 = -1;
    }
    int8x8_t v38 = 0;
    v38.i16[3] = v37;
    int8x8_t v39 = 0;
    if (a7) {
      __int16 v40 = 0;
    }
    else {
      __int16 v40 = -1;
    }
    v39.i16[3] = v40;
    uint32x4_t v41 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v42.i64[0] = 0x800000008000;
    v42.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v43 = (int16x4_t)vorr_s8(v38, vrev16_s8(*v10));
      int16x4_t v44 = (int16x4_t)vorr_s8(v39, vrev16_s8(*v12));
      int16x4_t v45 = vdup_lane_s16(v43, 3);
      int16x4_t v46 = vdup_lane_s16(v44, 3);
      int8x8_t v47 = (int8x8_t)vceqz_s16(v46);
      uint16x4_t v48 = (uint16x4_t)vbic_s8((int8x8_t)v44, v47);
      uint32x4_t v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)v43, v48), v41), v42);
      uint32x4_t v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16((uint16x4_t)v43, (uint16x4_t)vmvn_s8((int8x8_t)v46)), vmull_u16(v48, (uint16x4_t)vmvn_s8((int8x8_t)v45))), v41), v42);
      int8x8_t *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v45), (int8x8_t)v44, vbsl_s8(v47, (int8x8_t)v43, (int8x8_t)vqadd_u16(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL)))));
      int16x4_t v51 = &v10[a5];
      if ((unint64_t)v51 >= v11) {
        uint64_t v52 = -(uint64_t)a4;
      }
      else {
        uint64_t v52 = 0;
      }
      unint64_t v10 = &v51[v52];
      v12 += a5;
      --v36;
    }
    while (v36);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)12,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    do
    {
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16((uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8), (uint16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v17 = v9 + a8;
  if (v17)
  {
    int8x8_t v18 = 0;
    if (a6) {
      __int16 v19 = 0;
    }
    else {
      __int16 v19 = -1;
    }
    v18.i16[3] = v19;
    do
    {
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqadd_u16((uint16x4_t)vrev16_s8(*v12), (uint16x4_t)vorr_s8(v18, vrev16_s8(*v10))));
      int32x4_t v20 = &v10[a5];
      if ((unint64_t)v20 >= v11) {
        uint64_t v21 = -(uint64_t)a4;
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v10 = &v20[v21];
      v12 += a5;
      --v17;
    }
    while (v17);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)11,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    int8x16_t v15 = (int8x16_t)vdupq_n_s16(v14);
    v16.i64[0] = 0xFFFF000000000000;
    v16.i64[1] = 0xFFFF000000000000;
    if (a7) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = -1;
    }
    int8x16_t v18 = vandq_s8(v15, v16);
    int8x16_t v19 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v16);
    do
    {
      int8x16_t v20 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int8x16_t v21 = vorrq_s8(v19, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      uint16x8_t v22 = (uint16x8_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v23 = (uint16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD880);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqsubq_u16(vqaddq_u16(v23, v22), vqaddq_u16(vqsubq_u16(v22, (uint16x8_t)v20), vqsubq_u16(v23, (uint16x8_t)v21))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v24 = v9 + a8;
  if (v24)
  {
    int8x8_t v25 = 0;
    if (a6) {
      __int16 v26 = 0;
    }
    else {
      __int16 v26 = -1;
    }
    int8x8_t v27 = 0;
    v27.i16[3] = v26;
    if (a7) {
      __int16 v28 = 0;
    }
    else {
      __int16 v28 = -1;
    }
    v25.i16[3] = v28;
    do
    {
      int16x4_t v29 = (int16x4_t)vorr_s8(v27, vrev16_s8(*v10));
      int16x4_t v30 = (int16x4_t)vorr_s8(v25, vrev16_s8(*v12));
      uint16x4_t v31 = (uint16x4_t)vdup_lane_s16(v29, 3);
      uint16x4_t v32 = (uint16x4_t)vdup_lane_s16(v30, 3);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqsub_u16(vqadd_u16(v32, v31), vqadd_u16(vqsub_u16(v31, (uint16x4_t)v29), vqsub_u16(v32, (uint16x4_t)v30))));
      uint32x4_t v33 = &v10[a5];
      if ((unint64_t)v33 >= v11) {
        uint64_t v34 = -(uint64_t)a4;
      }
      else {
        uint64_t v34 = 0;
      }
      unint64_t v10 = &v33[v34];
      v12 += a5;
      --v24;
    }
    while (v24);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)10,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v16 = vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      int8x16_t v17 = vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint16x8_t v18 = (uint16x8_t)vmvnq_s8(v17);
      uint16x8_t v19 = (uint16x8_t)vmvnq_s8(v16);
      uint32x4_t v20 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v18.i8, 3), vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v19.i8, 3));
      uint32x4_t v21 = vqaddq_u32(vmull_high_laneq_u16((uint16x8_t)v16, v18, 7), vmull_high_laneq_u16((uint16x8_t)v17, v19, 7));
      uint32x4_t v22 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v20, v14), v15);
      uint32x4_t v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v22, v22, 0x10uLL), 0x10uLL), vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v24 = v9 + a8;
  if (v24)
  {
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v26.i64[0] = 0x800000008000;
    v26.i64[1] = 0x800000008000;
    do
    {
      int8x8_t v27 = vrev16_s8(*v10);
      int8x8_t v28 = vrev16_s8(*v12);
      uint32x4_t v29 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_lane_u16((uint16x4_t)v27, (uint16x4_t)vmvn_s8(v28), 3), vmull_lane_u16((uint16x4_t)v28, (uint16x4_t)vmvn_s8(v27), 3)), v25), v26);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32(v29, v29, 0x10uLL), 0x10uLL));
      int16x4_t v30 = &v10[a5];
      if ((unint64_t)v30 >= v11) {
        uint64_t v31 = -(uint64_t)a4;
      }
      else {
        uint64_t v31 = 0;
      }
      unint64_t v10 = &v30[v31];
      v12 += a5;
      --v24;
    }
    while (v24);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)9,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      uint16x8_t v16 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      uint16x8_t v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint32x4_t v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8, 3), v14), v15);
      uint32x4_t v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v16, v17, 7), v14), v15);
      uint16x8_t v20 = vqsubq_u16(v16, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL));
      uint32x4_t v21 = vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3);
      uint32x4_t v22 = vmull_high_laneq_u16(v17, v16, 7);
      uint32x4_t v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      uint32x4_t v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v25 = v9 + a8;
  if (v25)
  {
    uint32x4_t v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      uint16x4_t v28 = (uint16x4_t)vrev16_s8(*v10);
      uint16x4_t v29 = (uint16x4_t)vrev16_s8(*v12);
      uint32x4_t v30 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v28, v29, 3), v26), v27);
      *(uint16x4_t *)v30.i8 = vqsub_u16(v28, vqshrn_n_u32(vsraq_n_u32(v30, v30, 0x10uLL), 0x10uLL));
      uint32x4_t v31 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v29, v28, 3), v26), v27);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqadd_u16(*(uint16x4_t *)v30.i8, vqshrn_n_u32(vsraq_n_u32(v31, v31, 0x10uLL), 0x10uLL)));
      uint16x4_t v32 = &v10[a5];
      if ((unint64_t)v32 >= v11) {
        uint64_t v33 = -(uint64_t)a4;
      }
      else {
        uint64_t v33 = 0;
      }
      unint64_t v10 = &v32[v33];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)8,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      uint16x8_t v16 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      uint16x8_t v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint32x4_t v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      uint32x4_t v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, v16, 7), v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v20 = v9 + a8;
  if (v20)
  {
    uint32x4_t v21 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v22.i64[0] = 0x800000008000;
    v22.i64[1] = 0x800000008000;
    do
    {
      uint16x4_t v23 = (uint16x4_t)vrev16_s8(*v12);
      uint32x4_t v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v23, (uint16x4_t)vrev16_s8(*v10), 3), v21), v22);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqsub_u16(v23, vqshrn_n_u32(vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL)));
      uint64_t v25 = &v10[a5];
      if ((unint64_t)v25 >= v11) {
        uint64_t v26 = -(uint64_t)a4;
      }
      else {
        uint64_t v26 = 0;
      }
      unint64_t v10 = &v25[v26];
      v12 += a5;
      --v20;
    }
    while (v20);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)7,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      uint16x8_t v16 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      uint16x8_t v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint32x4_t v18 = vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3);
      uint32x4_t v19 = vmull_high_laneq_u16(v17, v16, 7);
      uint32x4_t v20 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v18, v14), v15);
      uint32x4_t v21 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v19, v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v20, v20, 0x10uLL), 0x10uLL), vsraq_n_u32(v21, v21, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v22 = v9 + a8;
  if (v22)
  {
    uint32x4_t v23 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v24.i64[0] = 0x800000008000;
    v24.i64[1] = 0x800000008000;
    do
    {
      uint32x4_t v25 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16((uint16x4_t)vrev16_s8(*v12), (uint16x4_t)vrev16_s8(*v10), 3), v23), v24);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32(v25, v25, 0x10uLL), 0x10uLL));
      uint64_t v26 = &v10[a5];
      if ((unint64_t)v26 >= v11) {
        uint64_t v27 = -(uint64_t)a4;
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v10 = &v26[v27];
      v12 += a5;
      --v22;
    }
    while (v22);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)6,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    uint32x4_t v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v19 = vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint16x8_t v20 = (uint16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      int16x8_t v21 = (int16x8_t)vqtbl1q_s8(v19, (int8x16_t)xmmword_1850CD880);
      uint16x8_t v22 = (uint16x8_t)vbicq_s8(v19, (int8x16_t)vceqzq_s16(v21));
      uint16x8_t v23 = (uint16x8_t)vmvnq_s8((int8x16_t)v21);
      uint32x4_t v24 = vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v23.i8);
      uint32x4_t v25 = vmull_high_u16(v20, v23);
      uint32x4_t v26 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v24, v17), v18);
      uint32x4_t v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v25, v17), v18);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16(v22, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v26, v26, 0x10uLL), 0x10uLL), vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v28 = v9 + a8;
  if (v28)
  {
    int8x8_t v29 = 0;
    if (a6) {
      __int16 v30 = 0;
    }
    else {
      __int16 v30 = -1;
    }
    v29.i16[3] = v30;
    uint32x4_t v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v32.i64[0] = 0x800000008000;
    v32.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v33 = (int16x4_t)vrev16_s8(*v12);
      int16x4_t v34 = vdup_lane_s16(v33, 3);
      uint32x4_t v35 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v29, vrev16_s8(*v10)), (uint16x4_t)vmvn_s8((int8x8_t)v34)), v31), v32);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqadd_u16((uint16x4_t)vbic_s8((int8x8_t)v33, (int8x8_t)vceqz_s16(v34)), vqshrn_n_u32(vsraq_n_u32(v35, v35, 0x10uLL), 0x10uLL)));
      uint64_t v36 = &v10[a5];
      if ((unint64_t)v36 >= v11) {
        uint64_t v37 = -(uint64_t)a4;
      }
      else {
        uint64_t v37 = 0;
      }
      unint64_t v10 = &v36[v37];
      v12 += a5;
      --v28;
    }
    while (v28);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)5,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      uint16x8_t v16 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      uint16x8_t v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint32x4_t v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      uint32x4_t v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, v16, 7), v14), v15);
      uint16x8_t v20 = vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL));
      uint32x4_t v21 = vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8, 3);
      uint32x4_t v22 = vmull_high_laneq_u16(v16, v17, 7);
      uint32x4_t v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      uint32x4_t v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v25 = v9 + a8;
  if (v25)
  {
    uint32x4_t v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      uint16x4_t v28 = (uint16x4_t)vrev16_s8(*v10);
      uint16x4_t v29 = (uint16x4_t)vrev16_s8(*v12);
      uint32x4_t v30 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v29, v28, 3), v26), v27);
      uint32x4_t v31 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v28, v29, 3), v26), v27);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqadd_u16(vqsub_u16(v29, vqshrn_n_u32(vsraq_n_u32(v30, v30, 0x10uLL), 0x10uLL)), vqshrn_n_u32(vsraq_n_u32(v31, v31, 0x10uLL), 0x10uLL)));
      int32x4_t v32 = &v10[a5];
      if ((unint64_t)v32 >= v11) {
        uint64_t v33 = -(uint64_t)a4;
      }
      else {
        uint64_t v33 = 0;
      }
      unint64_t v10 = &v32[v33];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)4,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    uint32x4_t v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      uint16x8_t v19 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint16x8_t v20 = (uint16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      uint32x4_t v21 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8, 3), v17), v18);
      uint32x4_t v22 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v20, v19, 7), v17), v18);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqsubq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v21, v21, 0x10uLL), 0x10uLL), vsraq_n_u32(v22, v22, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v23 = v9 + a8;
  if (v23)
  {
    int8x8_t v24 = 0;
    if (a6) {
      __int16 v25 = 0;
    }
    else {
      __int16 v25 = -1;
    }
    v24.i16[3] = v25;
    uint32x4_t v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      uint16x4_t v28 = (uint16x4_t)vorr_s8(v24, vrev16_s8(*v10));
      uint32x4_t v29 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v28, (uint16x4_t)vrev16_s8(*v12), 3), v26), v27);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqsub_u16(v28, vqshrn_n_u32(vsraq_n_u32(v29, v29, 0x10uLL), 0x10uLL)));
      uint32x4_t v30 = &v10[a5];
      if ((unint64_t)v30 >= v11) {
        uint64_t v31 = -(uint64_t)a4;
      }
      else {
        uint64_t v31 = 0;
      }
      unint64_t v10 = &v30[v31];
      v12 += a5;
      --v23;
    }
    while (v23);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)3,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    if (a6) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = -1;
    }
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    int8x16_t v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    uint32x4_t v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      uint16x8_t v19 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint16x8_t v20 = (uint16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      uint32x4_t v21 = vmull_lane_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8, 3);
      uint32x4_t v22 = vmull_high_laneq_u16(v20, v19, 7);
      uint32x4_t v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v17), v18);
      uint32x4_t v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v17), v18);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v25 = v9 + a8;
  if (v25)
  {
    int8x8_t v26 = 0;
    if (a6) {
      __int16 v27 = 0;
    }
    else {
      __int16 v27 = -1;
    }
    v26.i16[3] = v27;
    uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v29.i64[0] = 0x800000008000;
    v29.i64[1] = 0x800000008000;
    do
    {
      uint32x4_t v30 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16((uint16x4_t)vorr_s8(v26, vrev16_s8(*v10)), (uint16x4_t)vrev16_s8(*v12), 3), v28), v29);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32(v30, v30, 0x10uLL), 0x10uLL));
      uint64_t v31 = &v10[a5];
      if ((unint64_t)v31 >= v11) {
        uint64_t v32 = -(uint64_t)a4;
      }
      else {
        uint64_t v32 = 0;
      }
      unint64_t v10 = &v31[v32];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)2,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      int8x16_t v16 = vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      uint16x8_t v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      uint16x8_t v18 = (uint16x8_t)vbicq_s8(v16, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850CD880)));
      uint32x4_t v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      uint32x4_t v20 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, (uint16x8_t)v16, 7), v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16(v18, vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL), vsraq_n_u32(v20, v20, 0x10uLL), 0x10uLL))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    unint64_t v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  uint64_t v21 = v9 + a8;
  if (v21)
  {
    uint32x4_t v22 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v23.i64[0] = 0x800000008000;
    v23.i64[1] = 0x800000008000;
    do
    {
      int16x4_t v24 = (int16x4_t)vrev16_s8(*v10);
      uint16x4_t v25 = (uint16x4_t)vrev16_s8(*v12);
      uint16x4_t v26 = (uint16x4_t)vbic_s8((int8x8_t)v24, (int8x8_t)vceqz_s16(vdup_lane_s16(v24, 3)));
      uint32x4_t v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v25, (uint16x4_t)v24, 3), v22), v23);
      int8x8_t *v12 = vrev16_s8((int8x8_t)vqadd_u16(v26, vqsub_u16(v25, vqshrn_n_u32(vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL))));
      uint32x4_t v28 = &v10[a5];
      if ((unint64_t)v28 >= v11) {
        uint64_t v29 = -(uint64_t)a4;
      }
      else {
        uint64_t v29 = 0;
      }
      unint64_t v10 = &v28[v29];
      v12 += a5;
      --v21;
    }
    while (v21);
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

void **VEC::template_mark_pixelshape_row<(CGCompositeOperation)1,_RGBA16_t>(void **result, void **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = *(_OWORD *)&v10[v13];
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (void *)((char *)v12 + v13 * 8);
    unint64_t v10 = (void *)((char *)v10 + v13 * 8);
  }
  for (uint64_t i = v9 + a8; i; --i)
  {
    void *v12 = *v10;
    int32x4_t v15 = &v10[a5];
    if ((unint64_t)v15 >= v11) {
      uint64_t v16 = -(uint64_t)a4;
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v10 = &v15[v16];
    v12 += a5;
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

uint64_t *VEC::template_mark_pixelshape_row<(CGCompositeOperation)0,_RGBA16_t>(uint64_t *result, void **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 2)
  {
    uint64_t v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = 0uLL;
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    unint64_t v12 = (void *)((char *)v12 + v13 * 8);
    v10 += v13 * 8;
  }
  for (uint64_t i = v9 + a8; i; --i)
  {
    void *v12 = 0;
    unint64_t v15 = v10 + 8 * a5;
    if (v15 >= v11) {
      uint64_t v16 = -(uint64_t)a4;
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v10 = v15 + 8 * v16;
    v12 += a5;
  }
  *uint64_t result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

void Type1C::create_subset()
{
}

void sub_184D508B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  MEMORY[0x18532A2A0](v20, 0x10F3C4094E7248ELL);
  _Unwind_Resume(a1);
}

uint64_t Type1C::get_format(Type1C *this)
{
  return 3;
}

void Type1C::~Type1C(Type1C *this)
{
  SimpleFont::~SimpleFont(this);

  JUMPOUT(0x18532A2A0);
}

uint64_t cmap_csr_set_create()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200404BE0E0E6uLL);
  uint64_t v1 = (uint64_t)v0;
  if (v0)
  {
    *uint64_t v0 = 8;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
    *(void *)(v1 + 8) = Mutable;
    if (!Mutable)
    {
      cmap_csr_set_release(v1);
      return 0;
    }
  }
  return v1;
}

void cmap_csr_set_release(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 8);
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(v2);
      if (Count)
      {
        CFIndex v4 = Count;
        for (CFIndex i = 0; i != v4; ++i)
        {
          ValueAtIndedouble x = (void ***)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
          cmap_cid_set_release(ValueAtIndex[2]);
          cmap_cid_set_release(ValueAtIndex[3]);
          free(ValueAtIndex);
        }
      }
      CFRelease(*(CFTypeRef *)(a1 + 8));
    }
    cmap_bf_set_release(*(void *)(a1 + 16));
    free((void *)a1);
  }
}

void cmap_csr_set_add_codespace_range(unsigned __int8 *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  double v6 = csr_create(a2, a3, a4);
  if (v6)
  {
    CFArrayAppendValue(*((CFMutableArrayRef *)a1 + 1), v6);
    if (*a1 > a2) {
      *a1 = a2;
    }
    if (a1[1] < a2) {
      a1[1] = a2;
    }
  }
}

_DWORD *csr_create(unsigned int a1, unsigned int a2, unsigned int a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t result = malloc_type_calloc(1uLL, 0x20uLL, 0x102004001854A68uLL);
  if (result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = ((_WORD)a1 + 1) & 0x1FE;
    uint64x2_t v9 = (uint64x2_t)vdupq_n_s64((unint64_t)a1 - 1);
    int64x2_t v10 = (int64x2_t)xmmword_1850CD8A0;
    char v11 = 8 * a1 - 8;
    int64x2_t v12 = vdupq_n_s64(2uLL);
    char v13 = v11;
    do
    {
      int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v10));
      if (v14.i8[0]) {
        v25[v7 + 4] = a2 >> v13;
      }
      if (v14.i8[4]) {
        v25[v7 + 5] = a2 >> (8 * ((v7 ^ 0xFE) + a1));
      }
      v7 += 2;
      int64x2_t v10 = vaddq_s64(v10, v12);
      v13 -= 16;
    }
    while (v8 != v7);
    uint64_t v15 = 0;
    int64x2_t v16 = (int64x2_t)xmmword_1850CD8A0;
    int64x2_t v17 = vdupq_n_s64(2uLL);
    char v18 = 8 * a1 - 8;
    do
    {
      int32x2_t v19 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v16));
      if (v19.i8[0]) {
        v25[v15] = a3 >> v18;
      }
      if (v19.i8[4]) {
        v25[v15 + 1] = a3 >> (8 * ((v15 ^ 0xFE) + a1));
      }
      v15 += 2;
      int64x2_t v16 = vaddq_s64(v16, v17);
      v18 -= 16;
    }
    while (v8 != v15);
    int16x4_t v24 = result;
    uint64_t v20 = 0;
    do
    {
      unsigned int v21 = v25[v20 + 4];
      unsigned int v22 = v25[v20];
      if (v21 > v22)
      {
        pdf_log("Incorrect start/end range ordering; fixing.");
        int v23 = ((v22 ^ v21) << v11);
        a2 ^= v23;
        a3 ^= v23;
      }
      ++v20;
      v11 -= 8;
    }
    while (a1 != v20);
    uint64_t result = v24;
    *(unsigned char *)int16x4_t v24 = a1;
    v24[1] = a2;
    v24[2] = a3;
  }
  return result;
}

BOOL check_dimension(BOOL result, unsigned int a2, unsigned int a3)
{
  if ((result - 5) < 0xFFFFFFFC) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (result + 1) & 0x1FE;
  uint64x2_t v5 = (uint64x2_t)vdupq_n_s64((unint64_t)result - 1);
  int64x2_t v6 = (int64x2_t)xmmword_1850CD8A0;
  char v7 = 8 * result - 8;
  int64x2_t v8 = vdupq_n_s64(2uLL);
  char v9 = v7;
  do
  {
    int32x2_t v10 = vmovn_s64((int64x2_t)vcgeq_u64(v5, (uint64x2_t)v6));
    if (v10.i8[0]) {
      v25[v3] = a2 >> v9;
    }
    if (v10.i8[4]) {
      v25[v3 + 1] = a2 >> (8 * ((v3 ^ 0xFE) + result));
    }
    v3 += 2;
    int64x2_t v6 = vaddq_s64(v6, v8);
    v9 -= 16;
  }
  while (v4 != v3);
  uint64_t v11 = 0;
  int64x2_t v12 = (int64x2_t)xmmword_1850CD8A0;
  int64x2_t v13 = vdupq_n_s64(2uLL);
  do
  {
    int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v5, (uint64x2_t)v12));
    if (v14.i8[0]) {
      v24[v11] = a3 >> v7;
    }
    if (v14.i8[4]) {
      v24[v11 + 1] = a3 >> (8 * ((v11 ^ 0xFE) + result));
    }
    v11 += 2;
    int64x2_t v12 = vaddq_s64(v12, v13);
    v7 -= 16;
  }
  while (v4 != v11);
  if (result == 2 && !a2 && a3 == 0xFFFF) {
    return 1;
  }
  if (!result)
  {
    uint64_t v15 = result - 1 - 1;
    int64x2_t v16 = v24;
    int64x2_t v17 = v25;
    do
    {
      int v19 = *v17++;
      int v18 = v19;
      int v21 = *v16++;
      int v20 = v21;
      BOOL v23 = v15-- != 0;
      uint64_t result = v18 == v20;
    }
    while (v18 == v20 && v23);
  }
  return result;
}

unsigned __int8 *find_csr(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t result = (unsigned __int8 *)CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  int8x8_t v38 = result;
  if (result)
  {
    CFIndex v8 = 0;
    uint64x2_t v37 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    uint64_t v9 = ((_WORD)a2 + 1) & 0x1FE;
    int64x2_t v36 = vdupq_n_s64(2uLL);
    do
    {
      CFIndex v40 = v8;
      uint64_t result = (unsigned __int8 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v8);
      if (*result == a2)
      {
        if (!a2) {
          return result;
        }
        uint64_t v10 = 0;
        char v11 = 8 * a2 - 8;
        int64x2_t v12 = (int64x2_t)xmmword_1850CD8A0;
        do
        {
          int32x2_t v13 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v12));
          if (v13.i8[0]) {
            v44[v10] = a3 >> v11;
          }
          if (v13.i8[4]) {
            v44[v10 + 1] = a3 >> (8 * ((v10 ^ 0xFE) + a2));
          }
          v10 += 2;
          int64x2_t v12 = vaddq_s64(v12, v36);
          v11 -= 16;
        }
        while (v9 != v10);
        uint64_t v14 = 0;
        char v15 = 8 * a2 - 8;
        int64x2_t v16 = (int64x2_t)xmmword_1850CD8A0;
        do
        {
          int32x2_t v17 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v16));
          if (v17.i8[0]) {
            v43[v14] = a4 >> v15;
          }
          if (v17.i8[4]) {
            v43[v14 + 1] = a4 >> (8 * ((v14 ^ 0xFE) + a2));
          }
          v14 += 2;
          int64x2_t v16 = vaddq_s64(v16, vdupq_n_s64(2uLL));
          v15 -= 16;
        }
        while (v9 != v14);
        uint64_t v18 = 0;
        unsigned int v19 = *((_DWORD *)result + 1);
        char v20 = 8 * a2 - 8;
        int64x2_t v21 = (int64x2_t)xmmword_1850CD8A0;
        do
        {
          int32x2_t v22 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v21));
          if (v22.i8[0]) {
            v42[v18] = v19 >> v20;
          }
          if (v22.i8[4]) {
            v42[v18 + 1] = v19 >> (8 * ((v18 ^ 0xFE) + a2));
          }
          v18 += 2;
          int64x2_t v21 = vaddq_s64(v21, vdupq_n_s64(2uLL));
          v20 -= 16;
        }
        while (v9 != v18);
        uint64_t v23 = 0;
        unsigned int v24 = *((_DWORD *)result + 2);
        char v25 = 8 * a2 - 8;
        int64x2_t v26 = (int64x2_t)xmmword_1850CD8A0;
        do
        {
          int32x2_t v27 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v26));
          if (v27.i8[0]) {
            v41[v23] = v24 >> v25;
          }
          if (v27.i8[4]) {
            v41[v23 + 1] = v24 >> (8 * ((v23 ^ 0xFE) + a2));
          }
          v23 += 2;
          int64x2_t v26 = vaddq_s64(v26, vdupq_n_s64(2uLL));
          v25 -= 16;
        }
        while (v9 != v23);
        uint32x4_t v28 = v41;
        uint64_t v29 = v44;
        uint32x4_t v30 = v42;
        uint64_t v31 = v43;
        uint64_t v32 = a2;
        while (1)
        {
          unsigned int v34 = *v31++;
          unsigned int v33 = v34;
          unsigned int v35 = *v30++;
          if (v33 < v35 || *v29 > *v28) {
            break;
          }
          ++v28;
          ++v29;
          if (!--v32) {
            return result;
          }
        }
      }
      CFIndex v8 = v40 + 1;
    }
    while ((unsigned __int8 *)(v40 + 1) != v38);
    return 0;
  }
  return result;
}

uint64_t CGPDFMarkedContentItemCreate(void)
{
  if (CGPDFMarkedContentItemGetTypeID(void)::onceToken != -1) {
    dispatch_once(&CGPDFMarkedContentItemGetTypeID(void)::onceToken, &__block_literal_global_984);
  }

  return pdf_create_cftype();
}

uint64_t ___ZL31CGPDFMarkedContentItemGetTypeIDv_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFMarkedContentItemGetTypeID(void)::CGPDFMarkedContentItemType);
  CGPDFMarkedContentItemGetTypeID(void)::typeID = result;
  return result;
}

CFTypeRef CGPDFMarkedContentItemRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void CGPDFMarkedContentItemRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void PDFInfoSetValue(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 8);
  if (v6) {
    MutableCopdouble y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v6);
  }
  else {
    MutableCopdouble y = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFIndex v8 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, a2, a3);
    uint64_t v9 = *(const void **)(a1 + 8);
    if (v9) {
      CFRelease(v9);
    }
    *(void *)(a1 + 8) = v8;
  }
}

CFDictionaryRef PDFInfoGetString(const __CFDictionary *result, const void *a2, const void *a3)
{
  if (result)
  {
    CFDictionaryRef v3 = result;
    uint64_t result = (const __CFDictionary *)*((void *)result + 1);
    if (result)
    {
      CGPDFBoolean value = 0;
      if (CFDictionaryGetValueIfPresent(result, a2, (const void **)&value)
        || a3 && CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)v3 + 1), a3, (const void **)&value))
      {
        uint64_t result = (const __CFDictionary *)value;
        if (value)
        {
          CFTypeID v5 = CFGetTypeID(value);
          if (v5 == CFStringGetTypeID()) {
            return (const __CFDictionary *)value;
          }
          else {
            return 0;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFDictionaryRef PDFInfoCopyProducer(const __CFDictionary **a1)
{
  CFDictionaryRef Mutable = (const __CFDictionary *)a1;
  if (a1)
  {
    CFDictionaryRef Value = a1[1];
    if (Value) {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"CGPDFContextProducer");
    }
    if (Value == (const __CFDictionary *)*MEMORY[0x1E4F1D260])
    {
      return 0;
    }
    else
    {
      CFDictionaryRef String = PDFInfoGetString(Mutable, @"CGPDFContextProducer", 0);
      if (String)
      {
        CFDictionaryRef Mutable = String;
        CFRetain(String);
      }
      else
      {
        CFDictionaryRef Mutable = (const __CFDictionary *)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        CFStringAppend((CFMutableStringRef)Mutable, @"iOS ");
        CFStringRef v4 = (const __CFString *)CFCopySystemVersionString();
        if (v4)
        {
          CFStringRef v5 = v4;
          CFStringAppend((CFMutableStringRef)Mutable, v4);
          CFStringAppend((CFMutableStringRef)Mutable, @" ");
          CFRelease(v5);
        }
        CFStringAppend((CFMutableStringRef)Mutable, @"Quartz PDFContext");
      }
    }
  }
  return Mutable;
}

void *PDFInfoGetNowDate(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[3];
    if (!result)
    {
      CFDictionaryRef v2 = (const __CFDictionary *)v1[1];
      if (v2)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(v2, @"CGPDFContextDate");
        if (Value != (const void *)*MEMORY[0x1E4F1D260])
        {
          CFStringRef v4 = Value;
          if (Value)
          {
            CFTypeID v5 = CFGetTypeID(Value);
            if (v5 == CFDateGetTypeID())
            {
              uint64_t result = CFRetain(v4);
LABEL_10:
              v1[3] = result;
              return result;
            }
          }
LABEL_9:
          CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          uint64_t result = CFDateCreate(v6, Current);
          goto LABEL_10;
        }
      }
      else if (*MEMORY[0x1E4F1D260])
      {
        goto LABEL_9;
      }
      return 0;
    }
  }
  return result;
}

CFStringRef PDFInfoCopyKeywordsString(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 8);
  if (!v1) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v1, @"kCGPDFContextKeywords");
  if (!Value) {
    return 0;
  }
  CFStringRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID())
  {
    CFTypeID v6 = CFGetTypeID(v3);
    if (v6 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)v3);
      if (Count)
      {
        uint64_t v8 = Count;
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        MutableCopdouble y = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFArrayRef)v3);
        if (v8 < 1) {
          goto LABEL_18;
        }
        for (CFIndex i = 0; i < v8; ++i)
        {
          ValueAtIndedouble x = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, i);
          CFTypeID v13 = CFGetTypeID(ValueAtIndex);
          if (v13 != CFStringGetTypeID() || CFStringGetLength(ValueAtIndex) <= 0)
          {
            CFArrayRemoveValueAtIndex(MutableCopy, i);
            --v8;
            --i;
          }
        }
        if (v8)
        {
LABEL_18:
          CFStringRef v14 = CFStringCreateByCombiningStrings(v9, MutableCopy, @", ");
          CFRelease(MutableCopy);
          return v14;
        }
        CFRelease(MutableCopy);
      }
    }
    return 0;
  }
  if (CFStringGetLength(v3) < 1) {
    return 0;
  }

  return (CFStringRef)CFRetain(v3);
}

void emit_key_string(uint64_t *a1, CFStringRef theString, const __CFString *a3)
{
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (a3)
    {
      if (Length >= 1 && CFStringGetLength(a3) >= 1) {
        PDFDocumentPrintf(*a1, (uint64_t)"%/ %T", v7, v8, v9, v10, v11, v12, (uint64_t)theString);
      }
    }
  }
}

BOOL compareBaseline(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 104) != *(double *)(a2 + 104);
}

uint64_t MinMax(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 68);
  if (v2 < *a2) {
    *a2 = v2;
  }
  if (v2 > a2[1]) {
    a2[1] = v2;
  }
  return 1;
}

uint64_t graphicBetween(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 68);
  unsigned int v5 = *(_DWORD *)(a2 + 68);
  if (v4 + 1 >= v5)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 68);
    if (v5 + 1 >= v4) {
      return 0;
    }
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a2 + 68);
    unsigned int v5 = *(_DWORD *)(a1 + 68);
  }
  unint64_t v7 = *(void *)(a3 + 2160);
  while (v7 < *(void *)(a3 + 2168))
  {
    unsigned int v8 = *(_DWORD *)(v7 + 68);
    v7 += 184;
    if (v8 > v5)
    {
      if (v8 < v6)
      {
        CGFloat v9 = *(double *)(v7 - 184);
        CGFloat v10 = *(double *)(v7 - 176);
        CGFloat v11 = *(double *)(v7 - 168);
        CGFloat v12 = *(double *)(v7 - 160);
        v14.origin.double x = v9;
        v14.origin.double y = v10;
        v14.size.CGFloat width = v11;
        v14.size.CGFloat height = v12;
        if (CGRectIntersectsRect(*(CGRect *)a1, v14))
        {
          v15.origin.double x = v9;
          v15.origin.double y = v10;
          v15.size.CGFloat width = v11;
          v15.size.CGFloat height = v12;
          if (CGRectIntersectsRect(*(CGRect *)a2, v15)) {
            return 1;
          }
        }
      }
      return 0;
    }
  }
  return 0;
}

uint64_t CGColorConverterIterateFunctionsWithCallbacks(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a8;
  unsigned int v9 = a7;
  unsigned int v14 = a2;
  CGPostError((uint64_t)"%s: This function is deprected. Please use CGColorConversionInfoIterateFunctionsWithCallbacks", a2, a3, a4, a5, a6, a7, a8, (char)"CGColorConverterIterateFunctionsWithCallbacks");

  return CGColorConversionInfoIterateFunctionsWithCallbacks(a1, v14, a3, a4, a5, a6, v9, v8);
}

uint64_t CGColorConverterIterateColorSpaceFunctionsWithCallbacks(uint64_t a1, CGColorSpace *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  unsigned int v9 = a8;
  unsigned int v14 = a3;
  CGPostError((uint64_t)"%s: This function is deprected. Please use CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"CGColorConverterIterateColorSpaceFunctionsWithCallbacks");

  return CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks(a1, a2, v14, a4, a5, a6, a7, v9, a9);
}

uint64_t clipMaskHash(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

BOOL clipMaskEqual(uint64_t a1, uint64_t a2)
{
  return PDFClipMaskEqualToClipMask(a1, a2);
}

void clipMaskRelease(int a1, void **a2)
{
}

_DWORD *clipMaskRetain(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a2;
  if (a2) {
    ++*a2;
  }
  return result;
}

void emitClipMaskDefinition(uint64_t a1, unsigned char *a2)
{
  if (*(unsigned char *)(a1 + 24)) {
    goto LABEL_47;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(v4 + 4);
  if (v5 <= 0)
  {
    *(_DWORD *)(v4 + 4) = 1;
    unsigned int v6 = (_DWORD *)(v4 + 8);
  }
  else
  {
    if (v5 != 1) {
      goto LABEL_8;
    }
    int v7 = *(_DWORD *)(v4 + 8);
    unsigned int v6 = (_DWORD *)(v4 + 8);
    if (v7 > 3) {
      goto LABEL_8;
    }
  }
  _DWORD *v6 = 4;
LABEL_8:
  CGRect v228 = CGRectNull;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    unsigned int v9 = (const CGRect **)(a1 + 40);
    CGFloat height = 0.0;
    CGFloat y = INFINITY;
    CGFloat v12 = 0.0;
    CGFloat v13 = INFINITY;
    do
    {
      CGRect v15 = *v9++;
      unsigned int v14 = v15;
      p_CGFloat height = &CGRectNull.size.height;
      p_CGFloat y = &CGRectNull.origin.y;
      p_CGSize size = &CGRectNull.size;
      unsigned int v19 = v15 + 2;
      char v20 = &v15[2].origin.y;
      int64x2_t v21 = &v15[2].size;
      int32x2_t v22 = &v15[2].size.height;
      if (v15)
      {
        p_CGSize size = v21;
        p_CGFloat y = v20;
        p_CGFloat height = v22;
      }
      else
      {
        unsigned int v19 = &CGRectNull;
      }
      uint64_t v23 = *(void *)p_height;
      CGFloat x = v19->origin.x;
      uint64_t v25 = *(void *)p_y;
      CGFloat width = p_size->width;
      if (v14) {
        int32x2_t v27 = (const CGAffineTransform *)&v14->origin.y;
      }
      else {
        int32x2_t v27 = &CGAffineTransformIdentity;
      }
      long long v28 = *(_OWORD *)&v27->c;
      *(_OWORD *)&v227.double a = *(_OWORD *)&v27->a;
      *(_OWORD *)&v227.double c = v28;
      *(_OWORD *)&v227.tCGFloat x = *(_OWORD *)&v27->tx;
      CGRect v231 = CGRectApplyAffineTransform(*(CGRect *)&x, &v227);
      v229.origin.CGFloat x = v13;
      v229.origin.CGFloat y = y;
      v229.size.CGFloat width = v12;
      v229.size.CGFloat height = height;
      CGRect v230 = CGRectUnion(v229, v231);
      CGFloat v13 = v230.origin.x;
      CGFloat y = v230.origin.y;
      CGFloat v12 = v230.size.width;
      CGFloat height = v230.size.height;
      --v8;
    }
    while (v8);
    CGRect v228 = v230;
  }
  uint64_t v29 = PDFContentStreamCreate(*(void *)(a1 + 8), &v228);
  int64x2_t v36 = (uint64_t *)v29;
  if (v29)
  {
    uint64_t v37 = *((void *)v29 + 1);
    uint64_t v38 = *((void *)v29 + 14);
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
  }
  uint64_t v40 = *(void *)(a1 + 8);
  unint64_t v39 = *(void *)(a1 + 16);
  if (!v39)
  {
    unint64_t v39 = PDFXRefTableAddObject(*(void **)(v40 + 464));
    *(void *)(a1 + 16) = v39;
  }
  PDFDocumentBeginObject(v40, v39, v30, v31, v32, v33, v34, v35);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"<<", v41, v42, v43, v44, v45, v46, v211);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Type /Mask", v47, v48, v49, v50, v51, v52, v212);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/S /Luminosity", v53, v54, v55, v56, v57, v58, v213);
  PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"/G %R", v37, v59, v60, v61, v62, v63);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v64, v65, v66, v67, v68, v69, v214);
  PDFDocumentEndObject(*(void *)(a1 + 8), v70, v71, v72, v73, v74, v75, v76);
  PDFContentStreamBegin((uint64_t)v36, v77, v78, v79, v80, v81, v82, v83, v215);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Type /XObject", v84, v85, v86, v87, v88, v89, v216);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Subtype /Form", v90, v91, v92, v93, v94, v95, v217);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/FormType 1", v96, v97, v98, v99, v100, v101, v218);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/BBox %r", v102, v103, v104, v105, v106, v107, (uint64_t)&v228);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Matrix [1 0 0 1 0 0]", v108, v109, v110, v111, v112, v113, v219);
  PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"/Resources %R", *(void *)(v38 + 16), v114, v115, v116, v117, v118);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Group <<", v119, v120, v121, v122, v123, v124, v220);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/S /Transparency", v125, v126, v127, v128, v129, v130, v221);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/CS /DeviceGray", v131, v132, v133, v134, v135, v136, v222);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/I true", v137, v138, v139, v140, v141, v142, v223);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/K false", v143, v144, v145, v146, v147, v148, v224);
  PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)">>", v149, v150, v151, v152, v153, v154, v225);
  PDFContentStreamBeginData(v36, v155, v156, v157, v158, v159, v160, v161, v226);
  unint64_t v162 = CGGStateCreate();
  DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
  CGColorRef v164 = CGColorCreate(DeviceGray, dbl_185220EC0);
  CGColorSpaceRelease(DeviceGray);
  CGGStateSetFillColor((uint64_t)v162, v164);
  if (v164) {
    CFRelease(v164);
  }
  if (*(void *)(a1 + 32))
  {
    unint64_t v165 = 0;
    double v166 = v162 + 24;
    do
    {
      uint64_t v167 = *(void *)(a1 + 40 + 8 * v165);
      CGFloat v168 = (const CGAffineTransform *)(v167 + 8);
      if (!v167) {
        CGFloat v168 = &CGAffineTransformIdentity;
      }
      long long v169 = *(_OWORD *)&v168->a;
      long long v170 = *(_OWORD *)&v168->tx;
      *(_OWORD *)(v162 + 40) = *(_OWORD *)&v168->c;
      *(_OWORD *)(v162 + 56) = v170;
      *double v166 = v169;
      BOOL v171 = &CGRectNull.size.height;
      uint64_t v172 = &CGRectNull.origin.y;
      double v173 = (const CGRect *)(v167 + 64);
      uint64_t v174 = (CGFloat *)(v167 + 72);
      uint64_t v175 = (CGFloat *)(v167 + 88);
      BOOL v176 = v167 == 0;
      if (v167) {
        uint64_t v177 = (CGSize *)(v167 + 80);
      }
      else {
        uint64_t v177 = &CGRectNull.size;
      }
      if (v176)
      {
        unint64_t v178 = &CGRectNull;
      }
      else
      {
        uint64_t v172 = v174;
        unint64_t v178 = v173;
      }
      if (!v176) {
        BOOL v171 = v175;
      }
      CGGStateClipToRect((uint64_t)v162, v178->origin.x, *v172, v177->width, *v171);
      ++v165;
      unint64_t v179 = *(void *)(a1 + 32);
    }
    while (v165 < v179);
    if (v179)
    {
      unint64_t v180 = 0;
      do
      {
        uint64_t v181 = *(void **)(a1 + 40 + 8 * v180);
        unint64_t v182 = (const CGAffineTransform *)(v181 + 1);
        if (!v181) {
          unint64_t v182 = &CGAffineTransformIdentity;
        }
        long long v183 = *(_OWORD *)&v182->a;
        long long v184 = *(_OWORD *)&v182->tx;
        *(_OWORD *)(v162 + 40) = *(_OWORD *)&v182->c;
        *(_OWORD *)(v162 + 56) = v184;
        *double v166 = v183;
        if (v181)
        {
          double v185 = *((double *)v181 + 8);
          double v186 = *((double *)v181 + 9);
          double v187 = *((double *)v181 + 10);
          double v188 = *((double *)v181 + 11);
          uint64_t v189 = (CGImage *)v181[7];
        }
        else
        {
          uint64_t v189 = 0;
          double v187 = 0.0;
          double v186 = INFINITY;
          double v185 = INFINITY;
          double v188 = 0.0;
        }
        PDFContentStreamDrawImage((uint64_t)v36, (uint64_t)v162, v189, v185, v186, v187, v188);
        CGGStateSetCompositeOperation((uint64_t)v162, 13);
        ++v180;
      }
      while (v180 < *(void *)(a1 + 32));
    }
  }
  CGGStateRelease((uint64_t)v162);
  PDFContentStreamEndData((uint64_t)v36, v190, v191, v192, v193, v194, v195, v196);
  PDFContentStreamEnd((CFDataRef *)v36);
  PDFResourceSetEmit(v38, v197, v198, v199, v200, v201, v202, v203);
  PDFContentStreamRelease((uint64_t)v36, v204, v205, v206, v207, v208, v209, v210);
  *(unsigned char *)(a1 + 24) = 1;
LABEL_47:
  *a2 = 1;
}

void CGPDFGStateRelease(void *a1)
{
  if (a1)
  {
    CGPDFGStateReleaseProperties(a1);
    free(a1);
  }
}

__n128 CGPDFGStateGetCTM@<Q0>(const CGAffineTransform *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = &CGAffineTransformIdentity;
  if (a1) {
    unsigned int v2 = a1;
  }
  long long v3 = *(_OWORD *)&v2->c;
  *(_OWORD *)a2 = *(_OWORD *)&v2->a;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)&v2->tx;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 CGPDFGStateSetCTM(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    __n128 result = *(__n128 *)a2;
    long long v3 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v3;
    *(__n128 *)a1 = result;
  }
  return result;
}

double CGPDFGStateConcatCTM(double *a1, double *a2)
{
  if (a1)
  {
    double v2 = a2[1];
    double v3 = a2[2];
    double v4 = a2[3];
    double v5 = a2[4];
    double v6 = a2[5];
    double v7 = a1[1];
    double v8 = a1[2];
    double v9 = a1[3];
    double v10 = v2 * v8 + *a2 * *a1;
    double result = v2 * v9 + *a2 * v7;
    double v12 = v4 * v8 + v3 * *a1;
    double v13 = v4 * v9 + v3 * v7;
    double v14 = a1[4] + v8 * v6 + v5 * *a1;
    double v15 = v9 * v6 + v5 * v7 + a1[5];
    *a1 = v10;
    a1[1] = result;
    a1[2] = v12;
    a1[3] = v13;
    a1[4] = v14;
    a1[5] = v15;
  }
  return result;
}

BOOL CGPDFGStateHasPendingClip(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 48) != 0;
  }
  return result;
}

uint64_t CGPDFGStateSetHasPendingClip(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 48) = a2;
    if (a2) {
      *(unsigned char *)(result + 49) = 0;
    }
  }
  return result;
}

BOOL CGPDFGStateHasPendingEOClip(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 49) != 0;
  }
  return result;
}

uint64_t CGPDFGStateSetHasPendingEOClip(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 49) = a2;
    if (a2) {
      *(unsigned char *)(result + 48) = 0;
    }
  }
  return result;
}

uint64_t CGPDFGStateGetStrokeColor(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    double result = *(void *)(result + 64);
    if (!result)
    {
      DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
      *(void *)(v1 + 64) = CGColorSpaceCopyDefaultColor((uint64_t)DeviceGray);
      CGColorSpaceRelease(DeviceGray);
      return *(void *)(v1 + 64);
    }
  }
  return result;
}

void CGPDFGStateSetStrokeColor(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 64);
    if (v4 != cf)
    {
      if (v4) {
        CFRelease(v4);
      }
      if (cf) {
        CFRetain(cf);
      }
      *(void *)(a1 + 64) = cf;
    }
  }
}

char *CGPDFGStateGetTextObject(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  double v2 = *(char **)(a1 + 272);
  if (!v2)
  {
    double v2 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v2)
    {
      *(void *)double v2 = 0;
      *((void *)v2 + 1) = 0;
      *((void *)v2 + 3) = 0;
      *((void *)v2 + 4) = 0;
      *((_DWORD *)v2 + 10) = 0;
      *((void *)v2 + 6) = 0;
      *((void *)v2 + 7) = 0;
      v2[64] = 1;
      *(CGAffineTransform *)(v2 + 120) = CGAffineTransformIdentity;
      *(CGAffineTransform *)(v2 + 72) = CGAffineTransformIdentity;
      *((void *)v2 + 21) = 0;
      *((void *)v2 + 22) = 0;
      *(_OWORD *)double v2 = *(_OWORD *)(a1 + 72);
      *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 88);
      CGPDFTextObjectSetFont((uint64_t)v2, *(CFTypeRef *)(a1 + 120));
      *((void *)v2 + 7) = *(void *)(a1 + 128);
      CGPDFTextObjectSetTextDrawingMode((uint64_t)v2, *(_DWORD *)(a1 + 112));
      *((void *)v2 + 4) = *(void *)(a1 + 104);
      v2[64] = *(unsigned char *)(a1 + 136);
      *(void *)(a1 + 272) = v2;
    }
  }
  return v2;
}

double CGPDFGStateGetCharacterSpacing(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 72);
  }
  else {
    return 0.0;
  }
}

uint64_t CGPDFGStateSetCharacterSpacing(uint64_t result, double a2)
{
  if (result)
  {
    *(double *)(result + 72) = a2;
    double v2 = *(double **)(result + 272);
    if (v2) {
      *double v2 = a2;
    }
  }
  return result;
}

double CGPDFGStateGetWordSpacing(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 80);
  }
  else {
    return 0.0;
  }
}

uint64_t CGPDFGStateSetWordSpacing(uint64_t result, double a2)
{
  if (result)
  {
    *(double *)(result + 80) = a2;
    uint64_t v2 = *(void *)(result + 272);
    if (v2) {
      *(double *)(v2 + 8) = a2;
    }
  }
  return result;
}

double CGPDFGStateGetHorizontalScale(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 88);
  }
  else {
    return 100.0;
  }
}

uint64_t CGPDFGStateSetHorizontalScale(uint64_t result, double a2)
{
  if (result)
  {
    *(double *)(result + 88) = a2;
    uint64_t v2 = *(void *)(result + 272);
    if (v2) {
      *(double *)(v2 + 16) = a2;
    }
  }
  return result;
}

double CGPDFGStateGetLeading(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 96);
  }
  else {
    return 0.0;
  }
}

uint64_t CGPDFGStateSetLeading(uint64_t result, double a2)
{
  if (result)
  {
    *(double *)(result + 96) = a2;
    uint64_t v2 = *(void *)(result + 272);
    if (v2) {
      *(double *)(v2 + 24) = a2;
    }
  }
  return result;
}

double CGPDFGStateGetTextRise(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 104);
  }
  else {
    return 0.0;
  }
}

uint64_t CGPDFGStateSetTextRise(uint64_t result, double a2)
{
  if (result)
  {
    *(double *)(result + 104) = a2;
    uint64_t v2 = *(void *)(result + 272);
    if (v2) {
      *(double *)(v2 + 32) = a2;
    }
  }
  return result;
}

uint64_t CGPDFGStateGetTextDrawingMode(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 112);
  }
  return result;
}

uint64_t CGPDFGStateSetTextDrawingMode(uint64_t result, int a2)
{
  if (result)
  {
    *(_DWORD *)(result + 112) = a2;
    double result = *(void *)(result + 272);
    if (result) {
      return CGPDFTextObjectSetTextDrawingMode(result, a2);
    }
  }
  return result;
}

uint64_t CGPDFGStateGetFont(uint64_t result)
{
  if (result) {
    return *(void *)(result + 120);
  }
  return result;
}

void CGPDFGStateSetFont(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 120);
    if (v4 != cf)
    {
      if (v4) {
        CFRelease(v4);
      }
      if (cf) {
        CFRetain(cf);
      }
      *(void *)(a1 + 120) = cf;
      uint64_t v5 = *(void *)(a1 + 272);
      if (v5)
      {
        CGPDFTextObjectSetFont(v5, cf);
      }
    }
  }
}

double CGPDFGStateGetFontSize(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 128);
  }
  else {
    return 0.0;
  }
}

uint64_t CGPDFGStateSetFontSize(uint64_t result, double a2)
{
  if (result)
  {
    *(double *)(result + 128) = a2;
    uint64_t v2 = *(void *)(result + 272);
    if (v2) {
      *(double *)(v2 + 56) = a2;
    }
  }
  return result;
}

BOOL CGPDFGStateGetTextKnockout(uint64_t a1)
{
  return !a1 || *(unsigned char *)(a1 + 136) != 0;
}

uint64_t CGPDFGStateSetTextKnockout(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 136) = a2;
  }
  return result;
}

double CGPDFGStateGetLineWidth(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 144);
  }
  else {
    return 1.0;
  }
}

uint64_t CGPDFGStateSetLineWidth(uint64_t result, double a2)
{
  if (result) {
    *(double *)(result + 144) = a2;
  }
  return result;
}

uint64_t CGPDFGStateGetLineCap(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 152);
  }
  return result;
}

uint64_t CGPDFGStateSetLineCap(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 152) = a2;
  }
  return result;
}

uint64_t CGPDFGStateGetLineJoin(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 156);
  }
  return result;
}

uint64_t CGPDFGStateSetLineJoin(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 156) = a2;
  }
  return result;
}

double CGPDFGStateGetMiterLimit(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 160);
  }
  else {
    return 10.0;
  }
}

uint64_t CGPDFGStateSetMiterLimit(uint64_t result, double a2)
{
  if (result) {
    *(double *)(result + 160) = a2;
  }
  return result;
}

uint64_t CGPDFGStateGetDash(uint64_t result)
{
  if (result) {
    return *(void *)(result + 168);
  }
  return result;
}

void CGPDFGStateSetDash(uint64_t a1, atomic_uint *a2)
{
  if (a1)
  {
    CFTypeRef v4 = *(atomic_uint **)(a1 + 168);
    if (v4 != a2)
    {
      if (v4 && atomic_fetch_add_explicit(v4, 0xFFFFFFFF, memory_order_relaxed) == 1) {
        free(v4);
      }
      if (a2) {
        atomic_fetch_add_explicit(a2, 1u, memory_order_relaxed);
      }
      *(void *)(a1 + 168) = a2;
    }
  }
}

uint64_t CGPDFGStateGetRenderingIntent(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 176);
  }
  else {
    return 2;
  }
}

uint64_t CGPDFGStateSetRenderingIntent(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 176) = a2;
  }
  return result;
}

BOOL CGPDFGStateGetStrokeAdjust(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 180) != 0;
  }
  return result;
}

uint64_t CGPDFGStateSetStrokeAdjust(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 180) = a2;
  }
  return result;
}

uint64_t CGPDFGStateGetBlendMode(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 184);
  }
  return result;
}

uint64_t CGPDFGStateSetBlendMode(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 184) = a2;
  }
  return result;
}

uint64_t CGPDFGStateSetBlendModeAsObject(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    double result = CGPDFBlendModeFromCGPDFObject(a2);
    if (result != -1) {
      *(_DWORD *)(v2 + 184) = result;
    }
  }
  return result;
}

uint64_t CGPDFBlendModeFromCGPDFObject(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 7)
  {
    if (v1 == 5)
    {
      uint64_t v2 = *(const char **)(a1 + 32);
      return get_blend_mode_for_name(v2);
    }
    return 0xFFFFFFFFLL;
  }
  CFTypeRef v4 = *(CGPDFArray **)(a1 + 32);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *((void *)v4 + 2);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  size_t v6 = 0;
  CGPDFBoolean value = 0;
  while (!CGPDFArrayGetName(v4, v6, (const char **)&value))
  {
    if (v5 == ++v6) {
      return 0xFFFFFFFFLL;
    }
  }
  return get_blend_mode_for_name(value);
}

uint64_t get_blend_mode_for_name(const char *a1)
{
  uint64_t result = strcmp(a1, "Normal");
  if (result)
  {
    uint64_t result = strcmp(a1, "Compatible");
    if (result)
    {
      if (!strcmp(a1, "Multiply"))
      {
        return 1;
      }
      else if (!strcmp(a1, "Screen"))
      {
        return 2;
      }
      else if (!strcmp(a1, "Overlay"))
      {
        return 3;
      }
      else if (!strcmp(a1, "Darken"))
      {
        return 4;
      }
      else if (!strcmp(a1, "Lighten"))
      {
        return 5;
      }
      else if (!strcmp(a1, "ColorDodge"))
      {
        return 6;
      }
      else if (!strcmp(a1, "ColorBurn"))
      {
        return 7;
      }
      else if (!strcmp(a1, "HardLight"))
      {
        return 8;
      }
      else if (!strcmp(a1, "SoftLight"))
      {
        return 9;
      }
      else if (!strcmp(a1, "Difference"))
      {
        return 10;
      }
      else if (!strcmp(a1, "Exclusion"))
      {
        return 11;
      }
      else if (!strcmp(a1, "Hue"))
      {
        return 12;
      }
      else if (!strcmp(a1, "Saturation"))
      {
        return 13;
      }
      else if (!strcmp(a1, "Color"))
      {
        return 14;
      }
      else if (!strcmp(a1, "Luminosity"))
      {
        return 15;
      }
      else
      {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t CGPDFGStateGetSoftMask(uint64_t result)
{
  if (result) {
    return *(void *)(result + 192);
  }
  return result;
}

void CGPDFGStateSetSoftMask(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 192);
    if (v4 != cf)
    {
      if (v4) {
        CFRelease(v4);
      }
      if (cf) {
        CFRetain(cf);
      }
      *(void *)(a1 + 192) = cf;
    }
  }
}

double CGPDFGStateGetFillAlpha(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 200);
  }
  else {
    return 1.0;
  }
}

void CGPDFGStateSetFillAlpha(uint64_t a1, CGFloat a2)
{
  if (a1)
  {
    *(CGFloat *)(a1 + 200) = a2;
    unint64_t FillColor = (CGColor *)CGPDFGStateGetFillColor(a1);
    CopyWithAlphdouble a = CGColorCreateCopyWithAlpha(FillColor, a2);
    CGPDFGStateSetFillColor(a1, CopyWithAlpha);
    if (CopyWithAlpha)
    {
      CFRelease(CopyWithAlpha);
    }
  }
}

double CGPDFGStateGetStrokeAlpha(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 208);
  }
  else {
    return 1.0;
  }
}

void CGPDFGStateSetStrokeAlpha(uint64_t a1, CGFloat a2)
{
  if (a1)
  {
    *(CGFloat *)(a1 + 208) = a2;
    StrokeColor = (CGColor *)CGPDFGStateGetStrokeColor(a1);
    CopyWithAlphdouble a = CGColorCreateCopyWithAlpha(StrokeColor, a2);
    CGPDFGStateSetStrokeColor(a1, CopyWithAlpha);
    if (CopyWithAlpha)
    {
      CFRelease(CopyWithAlpha);
    }
  }
}

BOOL CGPDFGStateGetAlphaIsShape(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 216) != 0;
  }
  return result;
}

uint64_t CGPDFGStateSetAlphaIsShape(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 216) = a2;
  }
  return result;
}

BOOL CGPDFGStateGetFillOverprint(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 217) != 0;
  }
  return result;
}

uint64_t CGPDFGStateSetFillOverprint(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 217) = a2;
  }
  return result;
}

BOOL CGPDFGStateGetStrokeOverprint(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 218) != 0;
  }
  return result;
}

uint64_t CGPDFGStateSetStrokeOverprint(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 218) = a2;
  }
  return result;
}

uint64_t CGPDFGStateGetOverprintMode(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 220);
  }
  return result;
}

uint64_t CGPDFGStateSetOverprintMode(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 220) = a2;
  }
  return result;
}

uint64_t CGPDFGStateGetBlackGeneration(uint64_t result)
{
  if (result) {
    return *(void *)(result + 224);
  }
  return result;
}

void CGPDFGStateSetBlackGeneration(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 224);
    if (v4 != cf)
    {
      if (v4) {
        CFRelease(v4);
      }
      if (cf) {
        CFRetain(cf);
      }
      *(void *)(a1 + 224) = cf;
    }
  }
}

uint64_t CGPDFGStateGetUndercolorRemoval(uint64_t result)
{
  if (result) {
    return *(void *)(result + 232);
  }
  return result;
}

void CGPDFGStateSetUndercolorRemoval(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 232);
    if (v4 != cf)
    {
      if (v4) {
        CFRelease(v4);
      }
      if (cf) {
        CFRetain(cf);
      }
      *(void *)(a1 + 232) = cf;
    }
  }
}

uint64_t CGPDFGStateGetTransferFunctions(uint64_t result)
{
  if (result) {
    return *(void *)(result + 240);
  }
  return result;
}

void *CGPDFGStateSetTransferFunctions(void *result, void *cf)
{
  if (result)
  {
    double v3 = result;
    if (!cf || (uint64_t result = (void *)CFArrayGetCount((CFArrayRef)cf), result == (void *)4))
    {
      uint64_t result = (void *)v3[30];
      if (result != cf)
      {
        if (result) {
          CFRelease(result);
        }
        if (cf) {
          uint64_t result = CFRetain(cf);
        }
        else {
          uint64_t result = 0;
        }
        v3[30] = result;
      }
    }
  }
  return result;
}

uint64_t CGPDFGStateGetHalftone()
{
  return 0;
}

double CGPDFGStateGetFlatness(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 248);
  }
  else {
    return 0.0;
  }
}

uint64_t CGPDFGStateSetFlatness(uint64_t result, double a2)
{
  if (result) {
    *(double *)(result + 248) = a2;
  }
  return result;
}

double CGPDFGStateGetSmoothness(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 256);
  }
  else {
    return 0.0;
  }
}

uint64_t CGPDFGStateSetSmoothness(uint64_t result, double a2)
{
  if (result) {
    *(double *)(result + 256) = a2;
  }
  return result;
}

uint64_t CGPDFGStateGetShadowStyle(uint64_t result)
{
  if (result) {
    return *(void *)(result + 264);
  }
  return result;
}

void CGPDFGStateSetShadowStyle(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 264);
    if (v4 != cf)
    {
      if (v4) {
        CFRelease(v4);
      }
      if (cf) {
        CFRetain(cf);
      }
      *(void *)(a1 + 264) = cf;
    }
  }
}

void ***std::back_insert_iterator<std::vector<std::pair<unsigned long,CFRange>>>::operator=[abi:fe180100](void ***a1, long long *a2)
{
  CFTypeRef v4 = *a1;
  size_t v6 = (char *)(*a1)[1];
  uint64_t v5 = (char *)(*a1)[2];
  if (v6 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*v4) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*v4) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 24 * v9;
    unint64_t v15 = v12 + 24 * v13;
    long long v16 = *a2;
    *(void *)(v14 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v14 = v16;
    double v8 = (void *)(v14 + 24);
    uint64_t v18 = (char *)*v4;
    int32x2_t v17 = (char *)v4[1];
    if (v17 != *v4)
    {
      do
      {
        long long v19 = *(_OWORD *)(v17 - 24);
        *(void *)(v14 - 8) = *((void *)v17 - 1);
        *(_OWORD *)(v14 - 24) = v19;
        v14 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      int32x2_t v17 = (char *)*v4;
    }
    *CFTypeRef v4 = (void *)v14;
    v4[1] = v8;
    v4[2] = (void *)v15;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    long long v7 = *a2;
    *((void *)v6 + 2) = *((void *)a2 + 2);
    *(_OWORD *)size_t v6 = v7;
    double v8 = v6 + 24;
  }
  v4[1] = v8;
  return a1;
}

void Selection::cacheRectsAndTransforms(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 23;
  os_unfair_lock_lock(this + 23);
  if (LOBYTE(this[22]._os_unfair_lock_opaque))
  {
    LOBYTE(this[22]._os_unfair_lock_opaque) = 0;
    if (*(void *)&this[4]._os_unfair_lock_opaque != *(void *)&this[6]._os_unfair_lock_opaque)
    {
      CGPDFPageCopyPageLayoutWithCTLD(*(void *)&this->_os_unfair_lock_opaque, 1);
      CFTypeRef v4 = v3;
      uint64_t v5 = *(unint64_t **)&this[4]._os_unfair_lock_opaque;
      uint64_t v37 = *(unint64_t **)&this[6]._os_unfair_lock_opaque;
      if (v5 != v37)
      {
        while (2)
        {
          unint64_t v7 = *v5;
          int64_t v6 = v5[1];
          uint64_t v38 = v5;
          int64_t v8 = v5[2] + v6;
          do
          {
            uint64_t v9 = v4[6];
            if (0x8E38E38E38E38E39 * ((v4[7] - v9) >> 3) <= v7) {
              goto LABEL_39;
            }
            unint64_t v10 = (double *)(v9 + 72 * v7);
            double v11 = *v10;
            uint64_t v12 = *((void *)v10 + 1);
            __double2 v13 = __sincos_stret(v10[7]);
            double v14 = -v13.__sinval;
            unint64_t v15 = *(void *)&this[18]._os_unfair_lock_opaque;
            unint64_t v16 = *(void *)&this[20]._os_unfair_lock_opaque;
            if (v15 >= v16)
            {
              uint64_t v18 = *(void *)&this[16]._os_unfair_lock_opaque;
              unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - v18) >> 4);
              unint64_t v20 = v19 + 1;
              if (v19 + 1 > 0x333333333333333) {
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
              }
              unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v18) >> 4);
              if (2 * v21 > v20) {
                unint64_t v20 = 2 * v21;
              }
              if (v21 >= 0x199999999999999) {
                unint64_t v22 = 0x333333333333333;
              }
              else {
                unint64_t v22 = v20;
              }
              if (v22) {
                unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<CGRect,CGAffineTransform>>>(v22);
              }
              else {
                uint64_t v23 = 0;
              }
              unint64_t v24 = v22 + 80 * v19;
              *(CGRect *)unint64_t v24 = CGRectNull;
              *(double *)(v24 + 32) = v13.__cosval;
              *(double *)(v24 + 40) = v13.__sinval;
              *(double *)(v24 + 48) = v14;
              *(double *)(v24 + 56) = v13.__cosval;
              *(void *)(v24 + 64) = 0;
              *(void *)(v24 + 72) = 0;
              int64x2_t v26 = *(char **)&this[16]._os_unfair_lock_opaque;
              uint64_t v25 = *(char **)&this[18]._os_unfair_lock_opaque;
              unint64_t v27 = v24;
              if (v25 != v26)
              {
                do
                {
                  *(_OWORD *)(v27 - 80) = *((_OWORD *)v25 - 5);
                  long long v28 = *((_OWORD *)v25 - 4);
                  long long v29 = *((_OWORD *)v25 - 3);
                  long long v30 = *((_OWORD *)v25 - 1);
                  *(_OWORD *)(v27 - 32) = *((_OWORD *)v25 - 2);
                  *(_OWORD *)(v27 - 16) = v30;
                  *(_OWORD *)(v27 - 64) = v28;
                  *(_OWORD *)(v27 - 48) = v29;
                  v27 -= 80;
                  v25 -= 80;
                }
                while (v25 != v26);
                uint64_t v25 = *(char **)&this[16]._os_unfair_lock_opaque;
              }
              unint64_t v17 = v24 + 80;
              *(void *)&this[16]._os_unfair_lock_opaque = v27;
              *(void *)&this[18]._os_unfair_lock_opaque = v24 + 80;
              *(void *)&this[20]._os_unfair_lock_opaque = v22 + 80 * v23;
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              *(CGRect *)unint64_t v15 = CGRectNull;
              *(double *)(v15 + 32) = v13.__cosval;
              *(double *)(v15 + 40) = v13.__sinval;
              *(double *)(v15 + 48) = v14;
              *(double *)(v15 + 56) = v13.__cosval;
              *(void *)(v15 + 64) = 0;
              *(void *)(v15 + 72) = 0;
              unint64_t v17 = v15 + 80;
            }
            *(void *)&this[18]._os_unfair_lock_opaque = v17;
            BOOL v31 = v6 < v8;
            if (v6 < v8)
            {
              int64_t v32 = v12 + *(void *)&v11;
              if (v6 < v32)
              {
                uint64_t v33 = v4[15];
                uint64_t v34 = v4[16] - v33;
                if (v6 <= (unint64_t)(v34 >> 5)) {
                  uint64_t v35 = v34 >> 5;
                }
                else {
                  uint64_t v35 = v6;
                }
                uint64_t v36 = v33 + 32 * v6 + 16;
                while (v35 != v6)
                {
                  *(CGRect *)(v17 - 80) = CGRectUnion(*(CGRect *)(v17 - 80), *(CGRect *)(v36 - 16));
                  BOOL v31 = ++v6 < v8;
                  if (v6 < v8)
                  {
                    v36 += 32;
                    if (v6 < v32) {
                      continue;
                    }
                  }
                  goto LABEL_31;
                }
LABEL_39:
                __break(1u);
                return;
              }
            }
LABEL_31:
            ++v7;
          }
          while (v31);
          uint64_t v5 = v38 + 3;
          if (v38 + 3 != v37) {
            continue;
          }
          break;
        }
      }
      if (v4) {
        CFRelease(v4);
      }
    }
  }

  os_unfair_lock_unlock(v2);
}

void sub_184D5328C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, uint64_t a11, const void *a12)
{
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<CGRect,CGAffineTransform>>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(80 * a1);
}

const void **applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void Selection::cacheStringRanges(Selection *this)
{
  if (*((void *)this + 2) != *((void *)this + 3))
  {
    uint64_t v2 = (void **)((char *)this + 40);
    if (*((void *)this + 6) == *((void *)this + 5))
    {
      CGPDFPageCopyPageLayoutWithCTLD(*(void *)this, 1);
      CFTypeRef v4 = (void *)v3;
      v27[0] = v2;
      v27[1] = (void **)v3;
      if (!*(unsigned char *)(v3 + 24))
      {
        uint64_t v19 = *((void *)this + 2);
        uint64_t v20 = *((void *)this + 3);
        while (v19 != v20)
        {
          unint64_t v21 = *(void *)(v19 + 8);
          uint64_t v22 = v4[21];
          unint64_t v23 = (v4[22] - v22) >> 3;
          if (v23 <= v21) {
            std::vector<unsigned long>::__throw_out_of_range[abi:fe180100]();
          }
          unint64_t v24 = *(void *)(v19 + 16) + v21;
          if (v23 <= v24) {
            std::vector<unsigned long>::__throw_out_of_range[abi:fe180100]();
          }
          uint64_t v25 = *(void *)(v22 + 8 * v21);
          uint64_t v26 = *(void *)(v22 + 8 * v24) - v25;
          *(void *)&long long v29 = v25;
          *((void *)&v29 + 1) = v26;
          std::back_insert_iterator<std::vector<CFRange>>::operator=[abi:fe180100](v27, &v29);
          v19 += 24;
        }
LABEL_34:
        CFRelease(v4);
        return;
      }
      id v5 = objc_alloc_init(MEMORY[0x1E4F28E60]);
      uint64_t v7 = *((void *)this + 2);
      uint64_t v6 = *((void *)this + 3);
      while (v7 != v6)
      {
        uint64_t v8 = *(void *)(v7 + 16);
        if (v8 >= 1)
        {
          unint64_t v9 = *(void *)(v7 + 8);
          int64_t v10 = v8 + v9;
          uint64_t v12 = v4[12];
          uint64_t v11 = v4[13];
          while (1)
          {
            if (v9 >= (v11 - v12) >> 3) {
              goto LABEL_27;
            }
            if (*(void *)(v12 + 8 * v9)) {
              break;
            }
LABEL_20:
            if ((uint64_t)++v9 >= v10) {
              goto LABEL_21;
            }
          }
          uint64_t v13 = 0;
          while (1)
          {
            uint64_t v14 = v4[21];
            if (v9 >= (v4[22] - v14) >> 3) {
              std::vector<unsigned long>::__throw_out_of_range[abi:fe180100]();
            }
            unint64_t v15 = (void *)v4[39];
            unint64_t v16 = (void *)v4[40];
            if (v15 == v16)
            {
              uint64_t v18 = (void *)v4[39];
            }
            else
            {
              uint64_t v17 = *(void *)(v14 + 8 * v9) + v13;
              uint64_t v18 = (void *)v4[39];
              while (*v18 != v17)
              {
                if (++v18 == v16)
                {
                  uint64_t v18 = (void *)v4[40];
                  break;
                }
              }
            }
            [v5 addIndex:v18 - v15];
            uint64_t v12 = v4[12];
            uint64_t v11 = v4[13];
            if (v9 >= (v11 - v12) >> 3) {
              break;
            }
            if ((unint64_t)++v13 >= *(void *)(v12 + 8 * v9)) {
              goto LABEL_20;
            }
          }
LABEL_27:
          std::vector<unsigned long>::__throw_out_of_range[abi:fe180100]();
        }
LABEL_21:
        v7 += 24;
      }
      *(void *)&long long v29 = 0;
      *((void *)&v29 + 1) = &v29;
      uint64_t v30 = 0x4012000000;
      BOOL v31 = __Block_byref_object_copy__1121;
      int64_t v32 = __Block_byref_object_dispose__1122;
      uint64_t v33 = "";
      long long v34 = xmmword_1850CD8B0;
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      v28[2] = ___ZNK10PageLayout31ConvertTextRangesToStringRangesIRNSt3__16ranges14transform_viewB10llvm18_nuaINS2_8ref_viewINS1_6vectorINS1_4pairIm7CFRangeEENS1_9allocatorIS8_EEEEEEZN9Selection17cacheStringRangesEvE3__0EENS1_20back_insert_iteratorINS5_IS7_NS9_IS7_EEEEEEEEvOT_OT0__block_invoke;
      float64x2_t v28[3] = &unk_1E52CC288;
      v28[4] = &v29;
      void v28[5] = v4 + 2;
      v28[6] = v27;
      [v5 enumerateRangesUsingBlock:v28];
      if (*(void *)(*((void *)&v29 + 1) + 48) != -1) {
        std::back_insert_iterator<std::vector<CFRange>>::operator=[abi:fe180100](v27, (_OWORD *)(*((void *)&v29 + 1) + 48));
      }
      _Block_object_dispose(&v29, 8);

      if (v4) {
        goto LABEL_34;
      }
    }
  }
}

void sub_184D536A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  JUMPOUT(0x184D536B4);
}

void std::vector<unsigned long>::__throw_out_of_range[abi:fe180100]()
{
}

void ***std::back_insert_iterator<std::vector<CFRange>>::operator=[abi:fe180100](void ***a1, _OWORD *a2)
{
  CFTypeRef v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = ((char *)v6 - (unsigned char *)*v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v10 = v5 - (void)*v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CGPoint>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (_OWORD *)(v11 + 16 * v8);
    unint64_t v14 = v11 + 16 * v12;
    _OWORD *v13 = *a2;
    uint64_t v7 = v13 + 1;
    unint64_t v16 = (char *)*v4;
    unint64_t v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        *--uint64_t v13 = *((_OWORD *)v15 - 1);
        v15 -= 16;
      }
      while (v15 != v16);
      unint64_t v15 = (char *)*v4;
    }
    *CFTypeRef v4 = v13;
    v4[1] = v7;
    v4[2] = (void *)v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    _OWORD *v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  v4[1] = v7;
  return a1;
}

__n128 __Block_byref_object_copy__1121(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void ***___ZNK10PageLayout31ConvertTextRangesToStringRangesIRNSt3__16ranges14transform_viewB10llvm18_nuaINS2_8ref_viewINS1_6vectorINS1_4pairIm7CFRangeEENS1_9allocatorIS8_EEEEEEZN9Selection17cacheStringRangesEvE3__0EENS1_20back_insert_iteratorINS5_IS7_NS9_IS7_EEEEEEEEvOT_OT0__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = a2 + a3;
  __n128 result = (void ***)[*(id *)(v6 + 24) length];
  if (v7 < (unint64_t)result)
  {
    __n128 result = (void ***)[*(id *)(v6 + 24) characterAtIndex:v7];
    if (result == 10) {
      ++v3;
    }
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v10 = *(void *)(v9 + 48);
  if (v10 != -1)
  {
    uint64_t v11 = *(void *)(v9 + 56);
    if (v11 + v10 == a2)
    {
      *(void *)(v9 + 56) = v11 + v3;
      return result;
    }
    __n128 result = std::back_insert_iterator<std::vector<CFRange>>::operator=[abi:fe180100](*(void ****)(a1 + 48), (_OWORD *)(v9 + 48));
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(void *)(v9 + 48) = a2;
  *(void *)(v9 + 56) = v3;
  return result;
}

void std::__throw_out_of_range[abi:fe180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:fe180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E529EE70, MEMORY[0x1E4FBA1D0]);
}

void sub_184D538D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:fe180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void Selection::Normalize(Selection *this)
{
  CGPDFPageCopyPageLayoutWithCTLD(*(void *)this, 1);
  uint64_t v3 = v2;
  uint64_t v6 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  CFTypeRef v4 = (char **)((char *)this + 16);
  if (v6 == v5)
  {
    long long __p = (void *)*((void *)this + 2);
    *CFTypeRef v4 = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  else
  {
    uint64_t v7 = (v2[16] - v2[15]) >> 5;
    uint64_t v8 = *((void *)this + 2);
    do
    {
      uint64_t v9 = *(void *)(v8 + 8);
      BOOL v10 = v9 >= 1 && v9 < v7;
      if (v10)
      {
        uint64_t v11 = v2[12];
        unint64_t v12 = (v2[13] - v11) >> 3;
        uint64_t v13 = (32 * v9) | 0x10;
        while (v12 > v9)
        {
          if (*((void *)v11 + v9))
          {
            unint64_t v14 = v2[18];
            if (v9 >= (unint64_t)((v2[19] - v14) >> 5)) {
              goto LABEL_59;
            }
            if (*(double *)((char *)v14 + v13) != 0.0) {
              goto LABEL_16;
            }
          }
          v13 -= 32;
          BOOL v10 = v9-- <= 1;
          uint64_t v15 = *(void *)(v8 + 16) + 1;
          *(void *)(v8 + 8) = v9;
          *(void *)(v8 + 16) = v15;
          if (v10)
          {
            uint64_t v9 = 0;
            goto LABEL_16;
          }
        }
        goto LABEL_59;
      }
LABEL_16:
      uint64_t v16 = *(void *)(v8 + 16);
      unint64_t v17 = v16 + v9;
      if (v16 + v9 < v7 && (v17 & 0x8000000000000000) == 0)
      {
        uint64_t v18 = v2[12];
        if ((v2[13] - v18) >> 3 <= v17) {
          uint64_t v19 = v16 + v9;
        }
        else {
          uint64_t v19 = (v2[13] - v18) >> 3;
        }
        uint64_t v20 = (32 * v17) | 0x10;
        uint64_t v21 = (uint64_t)v18 + 8 * v9;
        uint64_t v22 = v9 - v19;
        while (v22 + v16)
        {
          if (!*(void *)(v21 + 8 * v16)) {
            goto LABEL_62;
          }
          unint64_t v23 = v2[18];
          if (v9 + v16 >= (unint64_t)((v2[19] - v23) >> 5)) {
            break;
          }
          if (*(double *)((char *)v23 + v20) == 0.0)
          {
LABEL_62:
            *(void *)(v8 + 16) = ++v16;
            v20 += 32;
            if (v9 + v16 < v7) {
              continue;
            }
          }
          goto LABEL_27;
        }
LABEL_59:
        __break(1u);
        return;
      }
LABEL_27:
      v8 += 24;
    }
    while (v8 != v5);
    unint64_t v24 = 0;
    uint64_t v25 = -1;
    *CFTypeRef v4 = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    long long __p = (void *)v6;
    do
    {
      unint64_t v27 = (_OWORD *)(v6 + 8);
      uint64_t v26 = *(void *)(v6 + 8);
      if (v25 >= v26)
      {
        uint64_t v31 = *(void *)(v6 + 16) + v26;
        if (v31 > v25)
        {
          if (*v4 == (char *)v24) {
            goto LABEL_59;
          }
          *(void *)(v24 - 8) += v31 - *(void *)(v24 - 16);
          uint64_t v25 = v31;
        }
      }
      else
      {
        LineIndeCGFloat x = PageLayout::getLineIndex(v3[6], v3[7], v26);
        unint64_t v29 = LineIndex;
        unint64_t v30 = *((void *)this + 4);
        if (v24 >= v30)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)*v4) >> 3);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
          }
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)*v4) >> 3);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x555555555555555) {
            unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35) {
            unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v35);
          }
          else {
            uint64_t v36 = 0;
          }
          unint64_t v37 = v35 + 24 * v32;
          *(void *)unint64_t v37 = v29;
          *(_OWORD *)(v37 + 8) = *v27;
          unint64_t v39 = (char *)*((void *)this + 2);
          uint64_t v38 = (char *)*((void *)this + 3);
          unint64_t v40 = v37;
          if (v38 != v39)
          {
            do
            {
              long long v41 = *(_OWORD *)(v38 - 24);
              *(void *)(v40 - 8) = *((void *)v38 - 1);
              *(_OWORD *)(v40 - 24) = v41;
              v40 -= 24;
              v38 -= 24;
            }
            while (v38 != v39);
            uint64_t v38 = *v4;
          }
          unint64_t v24 = v37 + 24;
          *((void *)this + 2) = v40;
          *((void *)this + 3) = v37 + 24;
          *((void *)this + 4) = v35 + 24 * v36;
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *(void *)unint64_t v24 = LineIndex;
          *(_OWORD *)(v24 + 8) = *v27;
          v24 += 24;
        }
        *((void *)this + 3) = v24;
      }
      v6 += 24;
    }
    while (v6 != v5);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_184D53C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, const void *a10)
{
  if (__p) {
    operator delete(__p);
  }
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef(&a10);
  _Unwind_Resume(a1);
}

void Selection::CreateSelectionsByLine(void)const::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (**(void **)(a1 + 16) != a2)
  {
    uint64_t v8 = *(const void ***)a1;
    uint64_t v9 = **(void ***)(a1 + 8);
    [**(id **)(a1 + 24) addObject:v9];

    **(void **)(a1 + 8) = CGPDFSelectionCreateWithPage(*v8);
    **(void **)(a1 + 16) = a2;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void **)v10;
  uint64_t v13 = *(void **)(*(void *)v10 + 192);
  unint64_t v12 = *(void *)(*(void *)v10 + 200);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = v11[23];
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - v15) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v15) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v20 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v19);
    uint64_t v21 = &v20[24 * v16];
    unint64_t v23 = &v20[24 * v22];
    *(void *)uint64_t v21 = a2;
    *((void *)v21 + 1) = a3;
    *((void *)v21 + 2) = a4;
    unint64_t v14 = v21 + 24;
    uint64_t v25 = (char *)v11[23];
    unint64_t v24 = (char *)v11[24];
    if (v24 != v25)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v21 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v21 - 24) = v26;
        v21 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      unint64_t v24 = (char *)v11[23];
    }
    v11[23] = v21;
    v11[24] = v14;
    v11[25] = v23;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    void *v13 = a2;
    v13[1] = a3;
    unint64_t v14 = v13 + 3;
    v13[2] = a4;
  }
  v11[24] = v14;
}

void sub_184D53DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PDFWritePath(uint64_t a1, unsigned char **a2, uint64_t a3, uint64_t a4, const CGPath *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a4;
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"%s: BEGIN: %s", a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"PDFWritePath");
  if (a1) {
    uint64_t v13 = *(void *)(a1 + 104);
  }
  else {
    uint64_t v13 = 0;
  }
  PDFGStateSetClipStack(v13, *(__CFArray **)(a3 + 112));
  if (v9 < 2)
  {
    int v21 = 0;
    int v20 = 1;
    goto LABEL_20;
  }
  if (v9 - 3 >= 2)
  {
    int v20 = 0;
    int v21 = 0;
    if (v9 != 2) {
      goto LABEL_20;
    }
  }
  else
  {
    int v20 = 1;
  }
  uint64_t v22 = *(void *)(a3 + 128);
  double v23 = *(double *)(v22 + 8);
  if (v23 == -1.0905473e16) {
    double v23 = 0.0;
  }
  if (*(double *)(v13 + 48) != v23)
  {
    *(double *)(v13 + 48) = v23;
    addEmitFunction(v13, emitLineWidthChange);
    uint64_t v22 = *(void *)(a3 + 128);
  }
  __int16 v24 = *(_WORD *)(v22 + 2);
  if (*(_DWORD *)(v13 + 56) != (char)v24)
  {
    *(_DWORD *)(v13 + 56) = (char)v24;
    addEmitFunction(v13, emitLineCapChange);
    uint64_t v22 = *(void *)(a3 + 128);
    __int16 v24 = *(_WORD *)(v22 + 2);
  }
  if (*(_DWORD *)(v13 + 60) != v24 >> 8)
  {
    *(_DWORD *)(v13 + 60) = v24 >> 8;
    addEmitFunction(v13, emitLineJoinChange);
    uint64_t v22 = *(void *)(a3 + 128);
  }
  double v25 = *(double *)(v22 + 16);
  if (*(double *)(v13 + 64) != v25)
  {
    *(double *)(v13 + 64) = v25;
    addEmitFunction(v13, emitMiterLimitChange);
    uint64_t v22 = *(void *)(a3 + 128);
  }
  PDFGStateSetLineDash(v13, *(atomic_uint **)(v22 + 32));
  int v21 = 1;
LABEL_20:
  double v26 = *(double *)(*(void *)(a3 + 144) + 8);
  if (*(double *)(v13 + 88) != v26)
  {
    *(double *)(v13 + 88) = v26;
    addEmitFunction(v13, emitFlatnessChange);
  }
  int v27 = *(unsigned __int8 *)(*(void *)(a3 + 128) + 1);
  if (*(unsigned __int8 *)(v13 + 96) != v27)
  {
    *(unsigned char *)(v13 + 96) = v27;
    addEmitFunction(v13, emitStrokeAdjustChange);
  }
  int v28 = *(_DWORD *)(*(void *)(a3 + 120) + 4);
  if ((v28 & 0xF0000) != 0) {
    int v29 = v28 << 12 >> 28;
  }
  else {
    int v29 = 2;
  }
  if (*(_DWORD *)(v13 + 80) != v29)
  {
    *(_DWORD *)(v13 + 80) = v29;
    addEmitFunction(v13, emitRenderingIntentChange);
  }
  double v30 = *(double *)(*(void *)(a3 + 144) + 16);
  if (*(double *)(v13 + 224) != v30)
  {
    *(double *)(v13 + 224) = v30;
    addEmitFunction(v13, emitSmoothnessChange);
  }
  double v31 = *(double *)(*(void *)(a3 + 120) + 8);
  if (v20)
  {
    unint64_t FillColor = CGGStateGetFillColor(a3);
    PDFGStateSetFillColor(v13, FillColor);
    if (FillColor)
    {
      if ((FillColor & 0x8000000000000000) != 0) {
        Alphdouble a = CGTaggedColorGetAlpha(FillColor, v33, v34, v35, v36, v37, v38, v39);
      }
      else {
        Alphdouble a = *(double *)(FillColor + 8 * *(void *)(FillColor + 56) + 56);
      }
    }
    else
    {
      Alphdouble a = 0.0;
    }
    double v41 = v31 * Alpha;
    if (*(double *)(v13 + 168) != v41)
    {
      *(double *)(v13 + 168) = v41;
      addEmitFunction(v13, emitNonStrokeAlphaChange);
    }
    int v42 = *(unsigned __int8 *)(*(void *)(a3 + 144) + 24);
    if (*(unsigned __int8 *)(v13 + 200) != v42)
    {
      *(unsigned char *)(v13 + 200) = v42;
      addEmitFunction(v13, emitNonStrokeOverprintChange);
    }
    uint64_t v43 = &CGAffineTransformIdentity;
    if (a1) {
      uint64_t v43 = (const CGAffineTransform *)(a1 + 120);
    }
    float64x2_t v44 = *(float64x2_t *)&v43->c;
    float64x2_t v123 = *(float64x2_t *)&v43->a;
    float64x2_t v124 = v44;
    long long v125 = *(_OWORD *)&v43->tx;
    PDFGStateSetPatternMatrix(v13, (uint64_t)&v123, v34, v35, v36, v37, v38, v39, *(double *)(*(void *)(a3 + 120) + 24), *(double *)(*(void *)(a3 + 120) + 32));
  }
  if (v21)
  {
    unint64_t StrokeColor = CGGStateGetStrokeColor(a3);
    PDFGStateSetStrokeColor(v13, StrokeColor);
    if (StrokeColor)
    {
      if ((StrokeColor & 0x8000000000000000) != 0) {
        double v53 = CGTaggedColorGetAlpha(StrokeColor, v46, v47, v48, v49, v50, v51, v52);
      }
      else {
        double v53 = *(double *)(StrokeColor + 8 * *(void *)(StrokeColor + 56) + 56);
      }
    }
    else
    {
      double v53 = 0.0;
    }
    double v54 = v31 * v53;
    if (*(double *)(v13 + 176) != v54)
    {
      *(double *)(v13 + 176) = v54;
      addEmitFunction(v13, emitStrokeAlphaChange);
    }
    PDFGStateSetStrokeOverprint(v13, *(unsigned __int8 *)(*(void *)(a3 + 144) + 25));
    uint64_t v61 = &CGAffineTransformIdentity;
    if (a1) {
      uint64_t v61 = (const CGAffineTransform *)(a1 + 120);
    }
    long long v62 = *(_OWORD *)&v61->c;
    *(_OWORD *)&v122.double a = *(_OWORD *)&v61->a;
    *(_OWORD *)&v122.double c = v62;
    *(_OWORD *)&v122.tCGFloat x = *(_OWORD *)&v61->tx;
    PDFGStateSetPatternMatrix(v13, (uint64_t)&v122, v55, v56, v57, v58, v59, v60, *(double *)(*(void *)(a3 + 120) + 24), *(double *)(*(void *)(a3 + 120) + 32));
  }
  PDFGStateSetOverprintMode(v13, *(unsigned int *)(*(void *)(a3 + 144) + 28), v14, v15, v16, v17, v18, v19);
  PDFGStateSetBlackGeneration(v13, *(CFTypeRef *)(*(void *)(a3 + 144) + 32));
  PDFGStateSetUndercolorRemoval(v13, *(CFTypeRef *)(*(void *)(a3 + 144) + 40));
  PDFGStateSetStyle(v13, *(void *)(*(void *)(a3 + 120) + 16));
  PDFGStateSetSoftMask(v13, *(CFTypeRef *)(*(void *)(a3 + 120) + 40));
  int v69 = (int)(*(_DWORD *)(*(void *)(a3 + 120) + 4) << 16) >> 24;
  if ((v69 - 13) >= 0xF) {
    int v69 = 2;
  }
  if (*(_DWORD *)(v13 + 248) != v69)
  {
    *(_DWORD *)(v13 + 248) = v69;
    addEmitFunction(v13, emitBlendModeChange);
  }
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  BEGIN: synchronizing gstate.", v63, v64, v65, v66, v67, v68, v115);
  PDFGStateEmit((CFArrayRef *)v13);
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  END: synchronizing gstate.", v70, v71, v72, v73, v74, v75, v116);
  if (v9 - 2 > 2)
  {
    PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  BEGIN: drawing path.", v76, v77, v78, v79, v80, v81, v117);
    write_path(a2, 0, a5);
    if (v9 > 4)
    {
      uint64_t v96 = "n";
      goto LABEL_68;
    }
  }
  else
  {
    PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  BEGIN: drawing path.", v76, v77, v78, v79, v80, v81, v117);
    long long v88 = *(_OWORD *)(a3 + 56);
    float64x2_t v89 = *(float64x2_t *)(a3 + 40);
    float64x2_t v123 = *(float64x2_t *)(a3 + 24);
    float64x2_t v124 = v89;
    long long v125 = v88;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v123, (float64x2_t)xmmword_1850CD830), (int32x4_t)vceqq_f64(v89, (float64x2_t)xmmword_1850CD8C0))))) & 1) != 0|| *(double *)&v125 != 0.0|| *((double *)&v125 + 1) != 0.0)
    {
      PDFWriterPrintf(a2, (uint64_t)"q %*m cm", v82, v83, v84, v85, v86, v87, (uint64_t)&v123);
      *(float64x2_t *)&v121.double a = v123;
      *(float64x2_t *)&v121.double c = v124;
      *(_OWORD *)&v121.tCGFloat x = v125;
      CGAffineTransformInvert(&v122, &v121);
      float64x2_t v123 = *(float64x2_t *)&v122.a;
      float64x2_t v124 = *(float64x2_t *)&v122.c;
      long long v125 = *(_OWORD *)&v122.tx;
      write_path(a2, v123.f64, a5);
      PDFWriterPrintf(a2, (uint64_t)off_1E52A02D0[v9], v97, v98, v99, v100, v101, v102, v119);
      uint64_t v96 = "Q";
      goto LABEL_68;
    }
    write_path(a2, 0, a5);
  }
  uint64_t v96 = off_1E52A02D0[v9];
LABEL_68:
  PDFWriterPrintf(a2, (uint64_t)v96, v90, v91, v92, v93, v94, v95, v118);
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  END: drawing path.", v103, v104, v105, v106, v107, v108, v120);
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"%s: END", v109, v110, v111, v112, v113, v114, (uint64_t)"PDFWritePath");
}

void write_path(unsigned char **a1, double *a2, CGPathRef path)
{
  long long v21 = 0u;
  long long v20 = 0u;
  memset(&rect, 0, sizeof(rect));
  if (a2)
  {
    uint64_t v5 = (const CGAffineTransform *)a2;
    if ((a2[1] == 0.0 && a2[2] == 0.0 || *a2 == 0.0 && a2[3] == 0.0) && CGPathIsRect(path, &rect))
    {
      long long v6 = *(_OWORD *)&v5->c;
      *(_OWORD *)&v14.double a = *(_OWORD *)&v5->a;
      *(_OWORD *)&v14.double c = v6;
      *(_OWORD *)&v14.tCGFloat x = *(_OWORD *)&v5->tx;
      CGRect rect = CGRectApplyAffineTransform(rect, &v14);
LABEL_9:
      PDFWriterPrintf(a1, (uint64_t)"%*r re", v7, v8, v9, v10, v11, v12, (uint64_t)&rect);
      return;
    }
  }
  else
  {
    if (CGPathIsRect(path, &rect)) {
      goto LABEL_9;
    }
    uint64_t v5 = &CGAffineTransformIdentity;
  }
  info = a1;
  long long v13 = *(_OWORD *)&v5->c;
  long long v17 = *(_OWORD *)&v5->a;
  long long v18 = v13;
  long long v19 = *(_OWORD *)&v5->tx;
  CGPathApply(path, &info, (CGPathApplierFunction)write_path_element);
}

void write_path_element(unsigned char ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      float64x2_t v25 = vaddq_f64(*(float64x2_t *)(a1 + 5), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 3), *(double *)(*(void *)(a2 + 8) + 8)), *(float64x2_t *)(a1 + 1), **(double **)(a2 + 8)));
      PDFWriterPrintf(*a1, (uint64_t)"%f %f m", a3, a4, a5, a6, a7, a8, *(uint64_t *)&v25.f64[0]);
      *(float64x2_t *)(a1 + 7) = v25;
      goto LABEL_8;
    case 1:
      float64x2_t v26 = vaddq_f64(*(float64x2_t *)(a1 + 5), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 3), *(double *)(*(void *)(a2 + 8) + 8)), *(float64x2_t *)(a1 + 1), **(double **)(a2 + 8)));
      PDFWriterPrintf(*a1, (uint64_t)"%f %f l", a3, a4, a5, a6, a7, a8, *(uint64_t *)&v26.f64[0]);
      float64x2_t v9 = v26;
      goto LABEL_9;
    case 2:
      uint64_t v10 = *(double **)(a2 + 8);
      double v11 = *((double *)a1 + 1);
      double v12 = *((double *)a1 + 3);
      double v13 = *((double *)a1 + 5);
      double v14 = v10[2];
      double v15 = v10[3];
      double v16 = v13 + v12 * v15 + v11 * v14;
      double v17 = *((double *)a1 + 6) + *((double *)a1 + 4) * v15 + *((double *)a1 + 2) * v14;
      PDFWriterPrintf(*a1, (uint64_t)"%f %f %f %f %f %f c", a3, a4, a5, a6, a7, a8, COERCE__INT64((*((double *)a1 + 9) + (v13 + v10[1] * v12 + v11 * *v10) * 2.0) / 3.0));
      goto LABEL_6;
    case 3:
      long long v18 = *(double **)(a2 + 8);
      double v19 = *((double *)a1 + 1);
      double v20 = *((double *)a1 + 3);
      double v21 = *((double *)a1 + 5);
      double v22 = v18[4];
      double v23 = v18[5];
      double v16 = v21 + v20 * v23 + v19 * v22;
      double v17 = *((double *)a1 + 6) + *((double *)a1 + 4) * v23 + *((double *)a1 + 2) * v22;
      PDFWriterPrintf(*a1, (uint64_t)"%f %f %f %f %f %f c", a3, a4, a5, a6, a7, a8, COERCE__INT64(v21 + v18[1] * v20 + v19 * *v18));
LABEL_6:
      *((double *)a1 + 9) = v16;
      *((double *)a1 + 10) = v17;
      break;
    case 4:
      PDFWriterPrintf(*a1, (uint64_t)"h", a3, a4, a5, a6, a7, a8, v24);
LABEL_8:
      float64x2_t v9 = *(float64x2_t *)(a1 + 7);
LABEL_9:
      *(float64x2_t *)(a1 + 9) = v9;
      break;
    default:
      return;
  }
}

void PDFWriteClipPath(unsigned char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ClipPath = (const CGPath *)CGClipCreateClipPath(a2, a2, a3, a4, a5, a6, a7, a8);
  if (ClipPath)
  {
    double v11 = ClipPath;
    write_path(a1, 0, ClipPath);
    unsigned int v18 = *(unsigned __int16 *)(a2 + 8);
    if (v18 > 0x2FF) {
      double v19 = "n";
    }
    else {
      double v19 = off_1E52A02B8[(__int16)v18 >> 8];
    }
    PDFWriterPrintf(a1, (uint64_t)v19, v12, v13, v14, v15, v16, v17, v20);
    CFRelease(v11);
  }
}

double medianDouble(uint64_t a1, int a2)
{
  if (!a2) {
    return 0.0;
  }
  unsigned int v2 = a2 - 1;
  unsigned int v3 = (a2 - 1) >> 1;
  if ((a2 - 1) < 2)
  {
    unsigned int v4 = 0;
  }
  else
  {
    unsigned int v4 = 0;
    LODWORD(v5) = 1;
    do
    {
      uint64_t v6 = (v2 + v4) >> 1;
      double v7 = *(double *)(a1 + 8 * v6);
      double v8 = *(double *)(a1 + 8 * v2);
      if (v7 <= v8)
      {
        double v7 = *(double *)(a1 + 8 * v2);
      }
      else
      {
        *(double *)(a1 + 8 * v6) = v8;
        *(double *)(a1 + 8 * v2) = v7;
      }
      double v9 = *(double *)(a1 + 8 * v4);
      if (v9 > v7)
      {
        *(double *)(a1 + 8 * v4) = v7;
        *(double *)(a1 + 8 * v2) = v9;
        double v9 = *(double *)(a1 + 8 * v4);
      }
      double v10 = *(double *)(a1 + 8 * v6);
      if (v10 > v9)
      {
        *(double *)(a1 + 8 * v6) = v9;
        *(double *)(a1 + 8 * v4) = v10;
        double v10 = *(double *)(a1 + 8 * v6);
      }
      *(void *)(a1 + 8 * v6) = *(void *)(a1 + 8 * v5);
      *(double *)(a1 + 8 * v5) = v10;
      double v11 = *(double *)(a1 + 8 * v4);
      LODWORD(v6) = v2;
      while (1)
      {
        do
        {
          uint64_t v5 = (v5 + 1);
          double v12 = *(double *)(a1 + 8 * v5);
        }
        while (v12 < v11);
        do
        {
          int v13 = v6;
          uint64_t v6 = (v6 - 1);
          double v14 = *(double *)(a1 + 8 * v6);
        }
        while (v14 > v11);
        if (v6 < v5) {
          break;
        }
        *(double *)(a1 + 8 * v5) = v14;
        *(double *)(a1 + 8 * v6) = v12;
      }
      *(double *)(a1 + 8 * v4) = v14;
      *(double *)(a1 + 8 * v6) = v11;
      if (v6 <= v3) {
        unsigned int v4 = v5;
      }
      if (v6 >= v3) {
        unsigned int v2 = v13 - 2;
      }
      LODWORD(v5) = v4 + 1;
    }
    while (v2 > v4 + 1);
  }
  if (v2 <= v4) {
    return *(double *)(a1 + 8 * v3);
  }
  double v16 = *(double *)(a1 + 8 * v4);
  double v17 = *(double *)(a1 + 8 * v2);
  if (v16 > v17)
  {
    *(double *)(a1 + 8 * v4) = v17;
    *(double *)(a1 + 8 * v2) = v16;
    double v17 = v16;
    double v16 = *(double *)(a1 + 8 * v4);
  }
  return (v16 + v17) * 0.5;
}

uint64_t compareDouble(double *a1, double *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

CFTypeID CGColorConversionInfoGetTypeID(void)
{
  if (CGColorConversionInfoGetTypeID_predicate != -1) {
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
  }
  return kCGColorConverterRuntimeID;
}

CFStringRef cg_color_conversion_info_copy_debug_description(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v2, 0, @"<CGColorConversionInfo %p> transform:%@ options:%@\n", a1, a1[2], a1[3]);
  }
  else
  {
    CFAllocatorRef v4 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v4, 0, @"<NULL CGColorConversionInfo>");
  }
}

CFStringRef cg_color_conversion_info_copy_format_description(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<CGColorConversionInfo %p>", a1);
}

uint64_t cg_color_conversion_info_equal(void *cf, void *a2)
{
  if (cf == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (cf && a2)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (CGColorConversionInfoGetTypeID_predicate != -1)
    {
      CFTypeID v9 = v5;
      dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
      CFTypeID v5 = v9;
    }
    if (v5 != kCGColorConverterRuntimeID) {
      return 0;
    }
    CFTypeID v6 = CFGetTypeID(a2);
    if (CGColorConversionInfoGetTypeID_predicate != -1)
    {
      CFTypeID v10 = v6;
      dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
      CFTypeID v6 = v10;
    }
    if (v6 == kCGColorConverterRuntimeID)
    {
      double v7 = (const void *)cf[2];
      double v8 = (const void *)a2[2];
      return CFEqual(v7, v8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFDictionaryRef create_new_transform_options(CFDictionaryRef theDict)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if (theDict) {
    CFIndex Count = CFDictionaryGetCount(theDict);
  }
  else {
    CFIndex Count = 0;
  }
  if (create_3DLUT_for_PQEETF_predicate != -1) {
    dispatch_once(&create_3DLUT_for_PQEETF_predicate, &__block_literal_global_111);
  }
  uint64_t v3 = create_3DLUT_for_PQEETF_status;
  if (create_3DLUT_for_HLG_SceneReferredMapping_predicate[0] != -1) {
    dispatch_once(create_3DLUT_for_HLG_SceneReferredMapping_predicate, &__block_literal_global_115);
  }
  unint64_t v4 = 8 * (Count + create_3DLUT_for_HLG_SceneReferredMapping_status + v3);
  MEMORY[0x1F4188790]();
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  CFTypeID v6 = (char *)v10 - v5;
  if (v4 >= 0x200) {
    size_t v7 = 512;
  }
  else {
    size_t v7 = v4;
  }
  bzero((char *)v10 - v5, v7);
  MEMORY[0x1F4188790]();
  double v8 = (char *)v10 - v5;
  bzero((char *)v10 - v5, v7);
  if (!theDict
    || (CFDictionaryGetKeysAndValues(theDict, (const void **)((char *)v10 - v5), (const void **)((char *)v10 - v5)),
        !CFDictionaryContainsKey(theDict, @"kCGPQEETF3DLut")))
  {
    if (create_3DLUT_for_PQEETF_predicate != -1) {
      dispatch_once(&create_3DLUT_for_PQEETF_predicate, &__block_literal_global_111);
    }
    if (create_3DLUT_for_PQEETF_status)
    {
      *(void *)&v6[8 * Count] = @"kCGPQEETF3DLut";
      *(void *)&v8[8 * Count++] = *MEMORY[0x1E4F1CFD0];
    }
    if (!theDict) {
      goto LABEL_19;
    }
  }
  if (!CFDictionaryContainsKey(theDict, @"kCGPQEETF3DLut"))
  {
LABEL_19:
    if (create_3DLUT_for_HLG_SceneReferredMapping_predicate[0] != -1) {
      dispatch_once(create_3DLUT_for_HLG_SceneReferredMapping_predicate, &__block_literal_global_115);
    }
    if (create_3DLUT_for_HLG_SceneReferredMapping_status)
    {
      *(void *)&v6[8 * Count] = @"kCGHLGSceneMapping3DLut";
      *(void *)&v8[8 * Count++] = *MEMORY[0x1E4F1CFD0];
    }
  }
  return CFDictionaryCreate(0, (const void **)((char *)v10 - v5), (const void **)((char *)v10 - v5), Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

uint64_t colorsync_smart_null_1203()
{
  return 0;
}

void modify(const __CFDictionary *a1, __CFArray *a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (CFDictionaryGetValue(a1, @"com.apple.cmm.ExtendedRange") == (const void *)*MEMORY[0x1E4F1CFC8])
  {
    uint64_t Count = CFDictionaryGetCount(a1);
    MEMORY[0x1F4188790]();
    unint64_t v5 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    CFTypeID v6 = (const void **)((char *)v15 - v5);
    if ((unint64_t)(8 * Count) >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = 8 * Count;
    }
    bzero((char *)v15 - v5, v7);
    MEMORY[0x1F4188790]();
    double v8 = (const void **)((char *)v15 - v5);
    bzero((char *)v15 - v5, v7);
    CFDictionaryGetKeysAndValues(a1, (const void **)((char *)v15 - v5), (const void **)((char *)v15 - v5));
    if (Count >= 1)
    {
      CFTypeID v9 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFTypeID v10 = (CFTypeRef *)((char *)v15 - v5);
      double v11 = v8;
      uint64_t v12 = Count;
      do
      {
        if (CFEqual(*v10, @"com.apple.cmm.ExtendedRange")) {
          const CGPath *v11 = v9;
        }
        ++v11;
        ++v10;
        --v12;
      }
      while (v12);
    }
    CFDictionaryRef v13 = CFDictionaryCreate(0, v6, v8, Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v13)
    {
      CFDictionaryRef v14 = v13;
      CFArrayAppendValue(a2, v13);
      CFRelease(v14);
    }
  }
  else
  {
    CFArrayAppendValue(a2, a1);
  }
}

CGColorConversionInfoRef CGColorConversionInfoCreate(CGColorSpaceRef src, CGColorSpaceRef dst)
{
  return CGColorConversionInfoCreateFromList(0, src, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, dst, 1, 0, 0);
}

CGColorConversionInfoRef CGColorConversionInfoCreateWithOptions(CGColorSpaceRef src, CGColorSpaceRef dst, CFDictionaryRef options)
{
  return CGColorConversionInfoCreateFromList(options, src, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, dst, 1, 0, 0);
}

uint64_t CGToneMappingMethodFromString(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFStringGetTypeID()) {
    return 5;
  }
  if (CFEqual(a1, @"kCGToneMappingDefault") == 1) {
    return 0;
  }
  uint64_t result = CFEqual(a1, @"kCGToneMappingImageSpecificLumaScaling");
  if (result != 1)
  {
    if (CFEqual(a1, @"kCGToneMappingReferenceWhiteBased") == 1) {
      return 2;
    }
    if (CFEqual(a1, @"kCGToneMappingITURecommended") == 1) {
      return 3;
    }
    if (CFEqual(a1, @"kCGToneMappingEXRGamma") == 1) {
      return 4;
    }
    CFEqual(a1, @"kCGToneMappingNone");
    return 5;
  }
  return result;
}

uint64_t profile_set_checker(const __CFDictionary *a1, uint64_t a2)
{
  CFStringRef Value = CFDictionaryGetValue(a1, @"ColorSyncProfile");
  if (profile_set_checker_cglibrarypredicate != -1) {
    dispatch_once(&profile_set_checker_cglibrarypredicate, &__block_literal_global_95_1219);
  }
  if (profile_set_checker_f(Value))
  {
    uint64_t result = 1;
  }
  else
  {
    if (profile_set_checker_cglibrarypredicate_98 != -1) {
      dispatch_once(&profile_set_checker_cglibrarypredicate_98, &__block_literal_global_101);
    }
    uint64_t result = profile_set_checker_f_97(Value);
  }
  if (*(unsigned char *)(a2 + 8)) {
    char v5 = 1;
  }
  else {
    char v5 = result;
  }
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t (*__profile_set_checker_block_invoke_2())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  uint64_t result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    uint64_t result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileIsHLGBased");
  }
  if (result) {
    int v1 = result;
  }
  else {
    int v1 = colorsync_smart_null_1203;
  }
  profile_set_checker_f_97 = v1;
  return result;
}

uint64_t (*__profile_set_checker_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  uint64_t result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    uint64_t result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileIsPQBased");
  }
  if (result) {
    int v1 = result;
  }
  else {
    int v1 = colorsync_smart_null_1203;
  }
  profile_set_checker_f = v1;
  return result;
}

uint64_t CGColorConversionInfoCreateWithColorSyncCodeFragment(const void *a1, const __CFDictionary *a2)
{
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFArrayGetTypeID())
    && (ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a1, 0)) != 0)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"com.apple.cmm.ProfileSequnce");
    CFArrayRef v14 = Value;
    uint64_t v15 = 0;
    v17.length = CFArrayGetCount(Value);
    v17.location = 0;
    CFArrayApplyFunction(Value, v17, (CFArrayApplierFunction)profile_set_checker, &v14);
    int v7 = v15;
    if (Value) {
      CFArrayRef Value = (const __CFArray *)CFRetain(Value);
    }
    if (v7)
    {
      if (create_3DLUT_for_PQEETF_predicate != -1) {
        dispatch_once(&create_3DLUT_for_PQEETF_predicate, &__block_literal_global_111);
      }
      if (create_3DLUT_for_PQEETF_status) {
        goto LABEL_13;
      }
      if (create_3DLUT_for_HLG_SceneReferredMapping_predicate[0] != -1) {
        dispatch_once(create_3DLUT_for_HLG_SceneReferredMapping_predicate, &__block_literal_global_115);
      }
      if (create_3DLUT_for_HLG_SceneReferredMapping_status)
      {
LABEL_13:
        CFDictionaryRef new_transform_options = create_new_transform_options(a2);
LABEL_21:
        CFDictionaryRef v11 = new_transform_options;
        goto LABEL_24;
      }
      goto LABEL_19;
    }
    CFArrayRef v9 = Value;
  }
  else
  {
    CFArrayRef v9 = 0;
  }
  if (linked_on_golden_gate_or_later() || (CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510])) == 0)
  {
    CFArrayRef Value = v9;
    if (a2) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  CFArrayRef Value = Mutable;
  v18.length = CFArrayGetCount(v9);
  v18.location = 0;
  CFArrayApplyFunction(v9, v18, (CFArrayApplierFunction)modify, Value);
  if (v9) {
    CFRelease(v9);
  }
LABEL_19:
  if (a2)
  {
LABEL_20:
    CFDictionaryRef new_transform_options = (const __CFDictionary *)CFRetain(a2);
    goto LABEL_21;
  }
LABEL_23:
  CFDictionaryRef v11 = 0;
LABEL_24:
  Retainedouble d = CGColorSyncTransformCacheGetRetained(Value, v11);
  if (Value) {
    CFRelease(Value);
  }
  if (v11) {
    CFRelease(v11);
  }

  return create_conversion_info(Retained, a2);
}

CFDictionaryRef CGColorConversionInfoResolveOptions(uint64_t a1, __int16 a2, CFDictionaryRef theDict)
{
  CFDictionaryRef Value = theDict;
  if (!theDict) {
    return Value;
  }
  if (CFDictionaryContainsKey(theDict, @"kCGColorConversionInfoOptions") == 1) {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"kCGColorConversionInfoOptions");
  }
  if (CFDictionaryContainsKey(Value, @"kCGApplyReferenceWhiteToneMapping")
    || CFDictionaryContainsKey(Value, @"kCGImageExtendedRangeToneMappingInfo")
    || CFDictionaryContainsKey(Value, @"kCGApplyFlexLumaScaling")
    || CFDictionaryContainsKey(Value, @"kCGApplyFlexTRC"))
  {
    CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"kCGApplyReferenceWhiteToneMapping");
    int v7 = CFDictionaryGetValue(Value, @"kCGApplyFlexTRC");
    double v8 = CFDictionaryGetValue(Value, @"kCGApplyFlexLumaScaling");
    if (v6)
    {
      if (a1)
      {
        CFArrayRef v9 = *(unsigned char **)(a1 + 24);
        if (!v9[16] && !v9[17])
        {
          CFDictionaryRef Value = 0;
          if ((a2 & 0xF00) != 0x100 || !v9[13]) {
            return Value;
          }
        }
        CFDictionaryRef ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveReferenceWhiteToneMappingOptions(v6);
        if (CFEqual(ResolveReferenceWhiteToneMappingOptions, v6) == 1)
        {
          CFDictionaryRef v11 = v6;
LABEL_23:
          CFDictionaryRef Value = (const __CFDictionary *)CFRetain(v11);
          goto LABEL_24;
        }
        return ResolveReferenceWhiteToneMappingOptions;
      }
      return 0;
    }
    uint64_t v12 = v8;
    if (v8)
    {
      CFDictionaryRef ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveFlexLumaOptions(v8);
      if (CFEqual(ResolveReferenceWhiteToneMappingOptions, v12) == 1)
      {
        if (!v7)
        {
          CFDictionaryRef Value = 0;
          goto LABEL_24;
        }
        goto LABEL_22;
      }
      return ResolveReferenceWhiteToneMappingOptions;
    }
    if (v7)
    {
      CFDictionaryRef ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveFlexTRCOptions(v7);
      if (CFEqual(ResolveReferenceWhiteToneMappingOptions, v7) == 1)
      {
LABEL_22:
        CFDictionaryRef v11 = (const __CFDictionary *)v7;
        goto LABEL_23;
      }
      return ResolveReferenceWhiteToneMappingOptions;
    }
    if (a1 && *(unsigned char *)(*(void *)(a1 + 24) + 13))
    {
      CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"kCGImageExtendedRangeToneMappingInfo");
      if (v13)
      {
        CFDictionaryRef v14 = v13;
        CFDictionaryRef ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveExtendedRangeToneMappingOptions(v13);
        if (CFEqual(ResolveReferenceWhiteToneMappingOptions, v14))
        {
          if (Value)
          {
            CFDictionaryRef v11 = Value;
            goto LABEL_23;
          }
        }
        else
        {
          CFIndex Count = CFDictionaryGetCount(Value);
          CFDictionaryRef Value = CFDictionaryCreateMutableCopy(0, Count, Value);
          CFDictionarySetValue(Value, @"kCGImageExtendedRangeToneMappingInfo", ResolveReferenceWhiteToneMappingOptions);
        }
LABEL_24:
        if (ResolveReferenceWhiteToneMappingOptions) {
          CFRelease(ResolveReferenceWhiteToneMappingOptions);
        }
        return Value;
      }
      return 0;
    }
  }
  if (!Value) {
    return Value;
  }

  return (CFDictionaryRef)CFRetain(Value);
}

uint64_t CGCreateSettingsForDefaultToneMapping(void *cf, void *a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a3) {
    _CGHandleAssert("CGCreateSettingsForDefaultToneMapping", 1201, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "settings != NULL", "settings == NULL", a9, a10, a11, v37);
  }
  uint64_t result = 0;
  *a3 = 0;
  if (a4 >= 1.0 || a4 <= 0.0) {
    float v16 = a4;
  }
  else {
    float v16 = 1.0;
  }
  if (a4 >= 0.0) {
    float v17 = v16;
  }
  else {
    float v17 = 0.0;
  }
  if (a5 >= 1.0 || a5 <= 0.0) {
    float v19 = a5;
  }
  else {
    float v19 = 1.0;
  }
  if (a5 >= 0.0) {
    float v20 = v19;
  }
  else {
    float v20 = 0.0;
  }
  if (cf && v17 >= 1.0)
  {
    CFTypeID v22 = CFGetTypeID(cf);
    if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1) {
      dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_103_22795);
    }
    uint64_t result = 0;
    if (a2 && v22 == CGColorSpaceGetTypeID_type_id)
    {
      CFTypeID v23 = CFGetTypeID(a2);
      if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1) {
        dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_103_22795);
      }
      if (v23 == CGColorSpaceGetTypeID_type_id)
      {
        switch(conversion_type(cf, a2))
        {
          case 0u:
            if (default_settings_edr_to_edr((uint64_t)cf, (uint64_t)a2, a3, v17, v20, a6, v25, v26, v27, v28, v29))return 1; {
            goto LABEL_80;
            }
          case 1u:
            if ((default_settings_edr_to_hdr((uint64_t)cf, (uint64_t)a2, a3, v17, v20, a6, v25, v26, v27, v28, v29) & 1) == 0)goto LABEL_80; {
            return 1;
            }
          case 2u:
            if (v17 == 0.0) {
              float v30 = 1.0;
            }
            else {
              float v30 = v17;
            }
            if (v30 != 1.0
              || (default_settings_edr_to_sdr((BOOL)cf, (uint64_t)a2, a3, v20, a6) & 1) == 0)
            {
              goto LABEL_80;
            }
            return 1;
          case 3u:
            if ((default_settings_hdr_to_edr((uint64_t)cf, a2, a3, v17, v20, a6, v25, v26, v27, v28, v29) & 1) == 0)goto LABEL_80; {
            return 1;
            }
          case 4u:
            if ((default_settings_hdr_to_hdr((uint64_t)cf, a2, a3, v17, v20, a6, v25, v26, v27, v28, v29) & 1) == 0)goto LABEL_80; {
            return 1;
            }
          case 5u:
            if (v17 == 0.0) {
              float v31 = 1.0;
            }
            else {
              float v31 = v17;
            }
            if (v31 != 1.0 || (default_settings_hdr_to_sdr((BOOL)cf, a2, a3, v20, a6) & 1) == 0) {
              goto LABEL_80;
            }
            return 1;
          case 6u:
            if (v20 == 0.0) {
              float v32 = 1.0;
            }
            else {
              float v32 = v20;
            }
            if (v32 != 1.0) {
              goto LABEL_80;
            }
            default_settings_sdr_to_edr((uint64_t)cf, (BOOL)a2, v24, v25, v26, v27, v28, v29);
            return 1;
          case 7u:
            if (v20 != 1.0) {
              goto LABEL_80;
            }
            default_settings_sdr_to_hdr(0, (uint64_t)cf, (BOOL)a2, 1.0, v25, v26, v27, v28, v29);
            return 1;
          case 8u:
            uint64_t v33 = cf[3];
            if (*(unsigned char *)(v33 + 13) || *(unsigned char *)(v33 + 16) || *(unsigned char *)(v33 + 17) || *(_DWORD *)(v33 + 28) != 1) {
              _CGHandleAssert("CGCreateSettingsForDefaultToneMapping", 1295, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "colorspace_is_sdr(target_space) == true", "Target color space is not SDR", v27, v28, v29, v37);
            }
            uint64_t v34 = a2[3];
            if (*(unsigned char *)(v34 + 13) || *(unsigned char *)(v34 + 16) || *(unsigned char *)(v34 + 17) || *(_DWORD *)(v34 + 28) != 1) {
              _CGHandleAssert("CGCreateSettingsForDefaultToneMapping", 1296, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "colorspace_is_sdr(source_space) == true", "Source color space is not SDR", v27, v28, v29, v37);
            }
            if (v17 == 1.0 && v20 == 1.0) {
              return 1;
            }
            goto LABEL_80;
          case 9u:
            uint64_t v35 = cf[3];
            if (*(unsigned char *)(v35 + 13)
              || *(unsigned char *)(v35 + 16)
              || !*(unsigned char *)(v35 + 17) && *(_DWORD *)(v35 + 28) == 1
              || *(unsigned char *)(v35 + 16)
              || *(unsigned char *)(v35 + 17))
            {
              uint64_t v36 = a2[3];
              if (*(unsigned char *)(v36 + 13) || *(unsigned char *)(v36 + 16) || !*(unsigned char *)(v36 + 17) && *(_DWORD *)(v36 + 28) == 1) {
                goto LABEL_80;
              }
              if (*(unsigned char *)(v36 + 16) || *(unsigned char *)(v36 + 17)) {
                goto LABEL_80;
              }
            }
            return 1;
          default:
LABEL_80:
            CGLog(2, (uint64_t)"%s failed for %s", v24, v25, v26, v27, v28, v29, (char)"CGCreateSettingsForDefaultToneMapping");
            return 0;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t conversion_type(void *a1, CFTypeRef cf)
{
  if (!a1) {
    goto LABEL_7;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1) {
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_103_22795);
  }
  if (v4 == CGColorSpaceGetTypeID_type_id)
  {
    uint64_t v5 = a1[3];
    BOOL v6 = *(unsigned char *)(v5 + 13) == 0;
    if (*(unsigned char *)(v5 + 16)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = *(unsigned char *)(v5 + 17) == 0;
    }
    if (*(unsigned __int8 *)(v5 + 16) | *(unsigned __int8 *)(v5 + 13) || *(unsigned char *)(v5 + 17))
    {
      BOOL v8 = 0;
      if (!cf) {
        return 9;
      }
    }
    else
    {
      BOOL v8 = *(_DWORD *)(v5 + 28) == 1;
      if (!cf) {
        return 9;
      }
    }
  }
  else
  {
LABEL_7:
    BOOL v8 = 0;
    BOOL v6 = 1;
    BOOL v7 = 1;
    if (!cf) {
      return 9;
    }
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1) {
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_103_22795);
  }
  if (v9 != CGColorSpaceGetTypeID_type_id) {
    return 9;
  }
  uint64_t v10 = *((void *)cf + 3);
  int v11 = *(unsigned __int8 *)(v10 + 13);
  if (*(unsigned char *)(v10 + 16)) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = *(unsigned char *)(v10 + 17) == 0;
  }
  BOOL v13 = !(v11 | *(unsigned __int8 *)(v10 + 16)) && !*(unsigned char *)(v10 + 17) && *(_DWORD *)(v10 + 28) == 1;
  BOOL v14 = !v6;
  if (!v11) {
    BOOL v14 = 0;
  }
  if (v14) {
    return 0;
  }
  BOOL v15 = !v7;
  if (!v11) {
    BOOL v15 = 0;
  }
  if (v15) {
    return 1;
  }
  int v16 = !v8;
  if (v11 && !v16) {
    return 2;
  }
  if (!v12 && !v6) {
    return 3;
  }
  if (!v12 && !v7) {
    return 4;
  }
  if ((v12 | v16) != 1) {
    return 5;
  }
  if (!v6 && v13) {
    return 6;
  }
  unsigned int v18 = v8 ? 8 : 9;
  uint64_t result = v7 ? v18 : 7;
  if (!v13) {
    return 9;
  }
  return result;
}

CFMutableDictionaryRef default_settings_edr_to_edr(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a1 || !*(unsigned char *)(*(void *)(a1 + 24) + 13)) {
    _CGHandleAssert("default_settings_edr_to_edr", 1081, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_space) == true", "Target color space is not extended", a9, a10, a11, vars0);
  }
  if (!a2 || !*(unsigned char *)(*(void *)(a2 + 24) + 13)) {
    _CGHandleAssert("default_settings_edr_to_edr", 1082, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_space) == true", "Source color space is not extended", a9, a10, a11, vars0);
  }

  return default_rwtm_settings(a3, a4, a5, a6);
}

CFMutableDictionaryRef default_settings_edr_to_hdr(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a1 || (uint64_t v11 = *(void *)(a1 + 24), !*(unsigned char *)(v11 + 16)) && !*(unsigned char *)(v11 + 17)) {
    _CGHandleAssert("default_settings_edr_to_hdr", 1095, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_space) == true", "Target color space is not HDR", a9, a10, a11, vars0);
  }
  if (!a2 || !*(unsigned char *)(*(void *)(a2 + 24) + 13)) {
    _CGHandleAssert("default_settings_edr_to_hdr", 1096, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_space) == true", "Source color space is not extended", a9, a10, a11, vars0);
  }

  return default_rwtm_settings(a3, a4, a5, a6);
}

CFMutableDictionaryRef default_settings_edr_to_sdr(BOOL a1, uint64_t a2, CFMutableDictionaryRef *a3, float a4, float a5)
{
  if (!colorspace_is_sdr(a1)) {
    _CGHandleAssert("default_settings_edr_to_sdr", 1109, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "colorspace_is_sdr(target_space) == true", "Target color space is not SDR", v9, v10, v11, v13);
  }
  if (!a2 || !*(unsigned char *)(*(void *)(a2 + 24) + 13)) {
    _CGHandleAssert("default_settings_edr_to_sdr", 1110, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_space) == true", "Source color space is not extended", v9, v10, v11, v13);
  }

  return default_rwtm_settings(a3, 1.0, a4, a5);
}

CFMutableDictionaryRef default_settings_hdr_to_edr(uint64_t a1, void *a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a1 || !*(unsigned char *)(*(void *)(a1 + 24) + 13)) {
    _CGHandleAssert("default_settings_hdr_to_edr", 1124, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_space) == true", "Target color space is not extended", a9, a10, a11, vars0);
  }
  if (!a2 || (uint64_t v11 = a2[3], !*(unsigned char *)(v11 + 16)) && !*(unsigned char *)(v11 + 17)) {
    _CGHandleAssert("default_settings_hdr_to_edr", 1125, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_space) == true", "Source color space is not HDR", a9, a10, a11, vars0);
  }

  return default_settings_hdr_to_any(a2, a3, a4, a5, a6);
}

CFMutableDictionaryRef default_settings_hdr_to_hdr(uint64_t a1, void *a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a1 || (uint64_t v11 = *(void *)(a1 + 24), !*(unsigned char *)(v11 + 16)) && !*(unsigned char *)(v11 + 17)) {
    _CGHandleAssert("default_settings_hdr_to_hdr", 1138, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_space) == true", "Target color space is not HDR", a9, a10, a11, vars0);
  }
  if (!a2 || (uint64_t v12 = a2[3], !*(unsigned char *)(v12 + 16)) && !*(unsigned char *)(v12 + 17)) {
    _CGHandleAssert("default_settings_hdr_to_hdr", 1139, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_space) == true", "Source color space is not HDR", a9, a10, a11, vars0);
  }

  return default_settings_hdr_to_any(a2, a3, a4, a5, a6);
}

CFMutableDictionaryRef default_settings_hdr_to_sdr(BOOL a1, void *a2, CFMutableDictionaryRef *a3, float a4, float a5)
{
  if (!colorspace_is_sdr(a1)) {
    _CGHandleAssert("default_settings_hdr_to_sdr", 1152, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "colorspace_is_sdr(target_space) == true", "Target color space is not SDR", v9, v10, v11, v14);
  }
  if (!a2 || (uint64_t v12 = a2[3], !*(unsigned char *)(v12 + 16)) && !*(unsigned char *)(v12 + 17)) {
    _CGHandleAssert("default_settings_hdr_to_sdr", 1153, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_space) == true", "Source color space is not HDR", v9, v10, v11, v14);
  }

  return default_settings_hdr_to_any(a2, a3, 1.0, a4, a5);
}

BOOL default_settings_sdr_to_edr(uint64_t a1, BOOL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !*(unsigned char *)(*(void *)(a1 + 24) + 13)) {
    _CGHandleAssert("default_settings_sdr_to_edr", 1167, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_space) == true", "Target color space is not extended", a6, a7, a8, vars0);
  }
  BOOL result = colorspace_is_sdr(a2);
  if (!result) {
    _CGHandleAssert("default_settings_sdr_to_edr", 1168, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "colorspace_is_sdr(source_space) == true", "Source color space is not DDR", v9, v10, v11, vars0);
  }
  return result;
}

BOOL default_settings_sdr_to_hdr(int a1, uint64_t a2, BOOL a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a2 || (uint64_t v11 = *(void *)(a2 + 24), !*(unsigned char *)(v11 + 16)) && !*(unsigned char *)(v11 + 17)) {
    _CGHandleAssert("default_settings_sdr_to_hdr", 1183, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_space) == true", "Target color space is not HDR", a7, a8, a9, v16);
  }
  BOOL result = colorspace_is_sdr(a3);
  if (!result) {
    _CGHandleAssert("default_settings_sdr_to_hdr", 1184, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "colorspace_is_sdr(source_space) == true", "Source color space is not SDR", v13, v14, v15, v16);
  }
  if ((a1 - 3) >= 3 && a4 != 1.0) {
    _CGHandleAssert("default_settings_sdr_to_hdr", 1186, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "source_headroom == 1.0f || ignore_headroom == true", "Source headroom is not SDR", v13, v14, v15, v16);
  }
  return result;
}

BOOL colorspace_is_sdr(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return !*(unsigned char *)(v1 + 13) && !*(unsigned char *)(v1 + 16) && !*(unsigned char *)(v1 + 17) && *(_DWORD *)(v1 + 28) == 1;
  }
  return result;
}

CFMutableDictionaryRef default_settings_hdr_to_any(void *a1, CFMutableDictionaryRef *a2, float a3, float a4, float a5)
{
  if (CGColorSpaceContainsFlexGTCInfo((BOOL)a1))
  {
    float v17 = vabds_f32(a4, CGColorSpaceGetHeadroomInfo(a1, 0));
    if (v17 > 0.00001)
    {
      double v23 = a4;
      CGPostError((uint64_t)"Image headroom (%f) != Gain Map Preview headroom (%f)", v10, v11, v12, v13, v14, v15, v16, SLOBYTE(v23));
    }
    CFMutableDictionaryRef result = 0;
    if (a3 >= 1.0 && v17 <= 0.0001)
    {
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (result)
      {
        float v20 = result;
        float valuePtr = a3;
        CFMutableDictionaryRef result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        if (result)
        {
          double v21 = result;
          CFDictionarySetValue(v20, @"kCGFlexGTCTargetHeadroom", result);
          CFRelease(v21);
          CFMutableDictionaryRef result = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (result)
          {
            CFTypeID v22 = result;
            CFDictionarySetValue(result, @"kCGApplyFlexLumaScaling", v20);
            CFRelease(v20);
            *a2 = v22;
            return (CFMutableDictionaryRef)1;
          }
        }
      }
    }
  }
  else
  {
    return default_rwtm_settings(a2, a3, a4, a5);
  }
  return result;
}

CFMutableDictionaryRef default_rwtm_settings(CFMutableDictionaryRef *a1, float a2, float a3, float a4)
{
  if (a2 < 1.0) {
    return 0;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (result)
  {
    uint64_t v10 = result;
    float valuePtr = a2;
    CFMutableDictionaryRef result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (result)
    {
      uint64_t v11 = result;
      CFDictionarySetValue(v10, @"kCGRWTMEDRHeadroom", result);
      CFRelease(v11);
      float v15 = a3 * a4;
      CFMutableDictionaryRef result = CFNumberCreate(0, kCFNumberFloatType, &v15);
      if (result)
      {
        uint64_t v12 = result;
        CFDictionarySetValue(v10, @"kCGRWTMSourcePeak", result);
        CFRelease(v12);
        CFMutableDictionaryRef result = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (result)
        {
          CFMutableDictionaryRef v13 = result;
          CFDictionarySetValue(result, @"kCGApplyReferenceWhiteToneMapping", v10);
          CFRelease(v10);
          *a1 = v13;
          return (CFMutableDictionaryRef)1;
        }
      }
    }
  }
  return result;
}

uint64_t CGCreateToneMappingSettingForMethod(int a1, void *cf, void *a3, CFMutableStringRef theString, __CFDictionary **a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11)
{
  if (!a5) {
    _CGHandleAssert("CGCreateToneMappingSettingForMethod", 1549, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "settings != NULL", "settings == NULL", a6, a7, a8, v35);
  }
  *a5 = 0;
  if (!cf || !*(unsigned char *)(cf[3] + 10))
  {
    if (theString) {
      CFStringAppendFormat(theString, 0, @"Target color space does not support output");
    }
    else {
      CGPostError((uint64_t)"Target color space does not support output", (uint64_t)cf, (uint64_t)a3, 0, (uint64_t)a5, a6, a7, a8, v35);
    }
    return 0;
  }
  if (a1)
  {
    unsigned int v18 = a1 - 3;
    if (a9 < 1.0 && v18 > 2) {
      return 0;
    }
    CFTypeID v20 = CFGetTypeID(cf);
    if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    {
      CFTypeID v33 = v20;
      dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_103_22795);
      CFTypeID v20 = v33;
    }
    uint64_t result = 0;
    if (a3 && v20 == CGColorSpaceGetTypeID_type_id)
    {
      CFTypeID v22 = CFGetTypeID(a3);
      if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
      {
        CFTypeID v34 = v22;
        dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_103_22795);
        CFTypeID v22 = v34;
      }
      if (v22 == CGColorSpaceGetTypeID_type_id)
      {
        int v28 = conversion_type(cf, a3);
        uint64_t result = 0;
        switch(v28)
        {
          case 0:
            uint64_t result = (uint64_t)settings_edr_to_edr(a1, (uint64_t)cf, (uint64_t)a3, a5, a9, a10, a11, v24, v25, v26, v27);
            break;
          case 1:
            uint64_t result = settings_edr_to_hdr(a1, (uint64_t)cf, (uint64_t)a3, a5, a9, a10, a11, v24, v25, v26, v27);
            break;
          case 2:
            uint64_t result = (uint64_t)settings_edr_to_sdr(a1, (BOOL)cf, (uint64_t)a3, a5, a9, a10, a11);
            break;
          case 3:
            uint64_t result = (uint64_t)settings_hdr_to_edr(a1, (uint64_t)cf, a3, a5, a9, a10, a11, v24, v25, v26, v27);
            break;
          case 4:
            uint64_t result = (uint64_t)settings_hdr_to_hdr(a1, (uint64_t)cf, a3, a5, a9, a10, a11, v24, v25, v26, v27);
            break;
          case 5:
            if (a9 == 0.0) {
              float v29 = 1.0;
            }
            else {
              float v29 = a9;
            }
            if (v18 >= 3 && v29 != 1.0) {
              return 0;
            }
            uint64_t result = settings_hdr_to_sdr(a1, (BOOL)cf, a3, a5, v29, a10, a11);
            break;
          case 7:
            if (a10 == 0.0) {
              float v30 = 1.0;
            }
            else {
              float v30 = a10;
            }
            if (v18 >= 3 && v30 != 1.0) {
              return 0;
            }
            default_settings_sdr_to_hdr(a1, (uint64_t)cf, (BOOL)a3, v30, v23, v24, v25, v26, v27);
            uint64_t result = 1;
            break;
          case 9:
            uint64_t v31 = cf[3];
            if (*(unsigned char *)(v31 + 13)
              || *(unsigned char *)(v31 + 16)
              || !*(unsigned char *)(v31 + 17) && *(_DWORD *)(v31 + 28) == 1
              || *(unsigned char *)(v31 + 16)
              || *(unsigned char *)(v31 + 17))
            {
              if ((uint64_t v32 = a3[3], *(unsigned char *)(v32 + 13))
                || *(unsigned char *)(v32 + 16)
                || !*(unsigned char *)(v32 + 17) && *(_DWORD *)(v32 + 28) == 1
                || *(unsigned char *)(v32 + 16)
                || *(unsigned char *)(v32 + 17))
              {
                _CGHandleAssert("CGCreateToneMappingSettingForMethod", 1652, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "(colorspace_is_sdr(target_space) == false && CGColorSpaceUsesExtendedRange(target_space) == false && CGColorSpaceUsesITUR_2100TF(target_space) == false) || (colorspace_is_sdr(source_space) == false && CGColorSpaceUsesExtendedRange(source_space) == false && CGColorSpaceUsesITUR_2100TF(source_space) == false)", "color spaces are not unknown", v25, v26, v27, v35);
              }
            }
            return 0;
          default:
            return result;
        }
        return result;
      }
      return 0;
    }
  }
  else
  {
    return CGCreateSettingsForDefaultToneMapping(cf, a3, a5, a9, a10, a11, (uint64_t)theString, (uint64_t)a5, a6, a7, a8);
  }
  return result;
}

CFMutableDictionaryRef settings_edr_to_edr(int a1, uint64_t a2, uint64_t a3, __CFDictionary **a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2 || !*(unsigned char *)(*(void *)(a2 + 24) + 13)) {
    _CGHandleAssert("settings_edr_to_edr", 1372, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_space) == true", "Target color space is not extended", a9, a10, a11, vars0);
  }
  if (!a3 || !*(unsigned char *)(*(void *)(a3 + 24) + 13)) {
    _CGHandleAssert("settings_edr_to_edr", 1373, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_space) == true", "Source color space is not extended", a9, a10, a11, vars0);
  }
  switch(a1)
  {
    case 5:
      return (CFMutableDictionaryRef)default_settings_for_no_tone_mapping(a4);
    case 4:
      if (fabsf(a5 + -1.0) >= 0.00001) {
        return 0;
      }
      return default_settings_for_exr_gamma_mapping(a4);
    case 2:
      return default_rwtm_settings(a4, a5, a6, a7);
    default:
      return 0;
  }
}

uint64_t settings_edr_to_hdr(int a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2 || (uint64_t v11 = *(void *)(a2 + 24), !*(unsigned char *)(v11 + 16)) && !*(unsigned char *)(v11 + 17)) {
    _CGHandleAssert("settings_edr_to_hdr", 1398, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_space) == true", "Target color space is not HDR", a9, a10, a11, vars0);
  }
  if (!a3 || !*(unsigned char *)(*(void *)(a3 + 24) + 13)) {
    _CGHandleAssert("settings_edr_to_hdr", 1399, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_space) == true", "Source color space is not extended", a9, a10, a11, vars0);
  }
  if (a1 == 3)
  {
    if (a5 == 0.0 && a6 == 0.0) {
      return 1;
    }
    else {
      return a6 == 4.9261 && a5 == a6;
    }
  }
  else if (a1 == 2)
  {
    return (uint64_t)default_rwtm_settings(a4, a5, a6, a7);
  }
  else
  {
    return 0;
  }
}

CFMutableDictionaryRef settings_edr_to_sdr(int a1, BOOL a2, uint64_t a3, CFMutableDictionaryRef *a4, float a5, float a6, float a7)
{
  if (!colorspace_is_sdr(a2)) {
    _CGHandleAssert("settings_edr_to_sdr", 1425, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "colorspace_is_sdr(target_space) == true", "Target color space is not SDR", v13, v14, v15, v17);
  }
  if (!a3 || !*(unsigned char *)(*(void *)(a3 + 24) + 13)) {
    _CGHandleAssert("settings_edr_to_sdr", 1426, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_space) == true", "Source color space is not extended", v13, v14, v15, v17);
  }
  if (a5 == 1.0)
  {
    if (a1 != 5)
    {
      if (a1 != 4)
      {
        if (a1 == 2)
        {
          return default_rwtm_settings(a4, 1.0, a6, a7);
        }
        return 0;
      }
LABEL_18:
      return default_settings_for_exr_gamma_mapping(a4);
    }
  }
  else
  {
    if (a1 == 3) {
      return 0;
    }
    if (a1 == 4) {
      goto LABEL_18;
    }
    if (a1 != 5) {
      _CGHandleAssert("settings_edr_to_sdr", 1428, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "target_headroom == 1.0f || ignore_headroom == true", "Target headroom is not SDR", v13, v14, v15, v17);
    }
  }

  return (CFMutableDictionaryRef)default_settings_for_no_tone_mapping(a4);
}

CFMutableDictionaryRef settings_hdr_to_edr(int a1, uint64_t a2, void *a3, CFMutableDictionaryRef *a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2 || !*(unsigned char *)(*(void *)(a2 + 24) + 13)) {
    _CGHandleAssert("settings_hdr_to_edr", 1450, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_space) == true", "Target color space is not extended", a9, a10, a11, v19);
  }
  if (!a3 || (uint64_t v16 = a3[3], !*(unsigned char *)(v16 + 16)) && !*(unsigned char *)(v16 + 17)) {
    _CGHandleAssert("settings_hdr_to_edr", 1451, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_space) == true", "Source color space is not HDR", a9, a10, a11, v19);
  }
  int v17 = a1 - 1;
  CFMutableDictionaryRef result = (CFMutableDictionaryRef)1;
  switch(v17)
  {
    case 0:
      if (!CGColorSpaceContainsFlexGTCInfo((BOOL)a3)) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 1:
LABEL_8:
      CFMutableDictionaryRef result = default_settings_hdr_to_any(a3, a4, a5, a6, a7);
      break;
    case 2:
      return result;
    case 4:
      CFMutableDictionaryRef result = (CFMutableDictionaryRef)default_settings_for_no_tone_mapping(a4);
      break;
    default:
LABEL_11:
      CFMutableDictionaryRef result = 0;
      break;
  }
  return result;
}

CFMutableDictionaryRef settings_hdr_to_hdr(int a1, uint64_t a2, void *a3, CFMutableDictionaryRef *a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2 || (uint64_t v16 = *(void *)(a2 + 24), !*(unsigned char *)(v16 + 16)) && !*(unsigned char *)(v16 + 17)) {
    _CGHandleAssert("settings_hdr_to_hdr", 1475, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_space) == true", "Target color space is not HDR", a9, a10, a11, v20);
  }
  if (!a3 || (uint64_t v17 = a3[3], !*(unsigned char *)(v17 + 16)) && !*(unsigned char *)(v17 + 17)) {
    _CGHandleAssert("settings_hdr_to_hdr", 1476, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_space) == true", "Source color space is not HDR", a9, a10, a11, v20);
  }
  int v18 = a1 - 1;
  CFMutableDictionaryRef result = (CFMutableDictionaryRef)1;
  switch(v18)
  {
    case 0:
      if (!CGColorSpaceContainsFlexGTCInfo((BOOL)a3)) {
        goto LABEL_12;
      }
      goto LABEL_9;
    case 1:
LABEL_9:
      CFMutableDictionaryRef result = default_settings_hdr_to_any(a3, a4, a5, a6, a7);
      break;
    case 2:
      return result;
    case 4:
      CFMutableDictionaryRef result = (CFMutableDictionaryRef)default_settings_for_no_tone_mapping(a4);
      break;
    default:
LABEL_12:
      CFMutableDictionaryRef result = 0;
      break;
  }
  return result;
}

uint64_t settings_hdr_to_sdr(int a1, BOOL a2, void *a3, CFMutableDictionaryRef *a4, float a5, float a6, float a7)
{
  if (!colorspace_is_sdr(a2)) {
    _CGHandleAssert("settings_hdr_to_sdr", 1500, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "colorspace_is_sdr(target_space) == true", "Target color space is not SDR", v13, v14, v15, v18);
  }
  if (!a3 || (uint64_t v16 = a3[3], !*(unsigned char *)(v16 + 16)) && !*(unsigned char *)(v16 + 17)) {
    _CGHandleAssert("settings_hdr_to_sdr", 1501, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_space) == true", "Source color space is not HDR", v13, v14, v15, v18);
  }
  if (a5 == 1.0)
  {
    uint64_t result = 1;
    switch(a1)
    {
      case 1:
        if (!CGColorSpaceContainsFlexGTCInfo((BOOL)a3)) {
          return 0;
        }
        goto LABEL_8;
      case 2:
LABEL_8:
        uint64_t result = (uint64_t)default_settings_hdr_to_any(a3, a4, 1.0, a6, a7);
        break;
      case 3:
        return result;
      case 5:
        goto LABEL_13;
      default:
        return 0;
    }
  }
  else if (a1 == 3)
  {
    return 1;
  }
  else if (a1 == 5)
  {
LABEL_13:
    return default_settings_for_no_tone_mapping(a4);
  }
  else
  {
    return 0;
  }
  return result;
}

BOOL default_settings_for_no_tone_mapping(__CFDictionary **a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v3 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, @"kCGSkipToneMappingForBT2100", (const void *)*MEMORY[0x1E4F1CFD0]);
    *a1 = v3;
  }
  return v3 != 0;
}

CFMutableDictionaryRef default_settings_for_exr_gamma_mapping(CFMutableDictionaryRef *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (result)
  {
    CFTypeID v4 = result;
    CFDictionarySetValue(result, @"kCGApplyEXRToneMappingGamma", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFMutableDictionaryRef result = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (result)
    {
      CFMutableDictionaryRef v5 = result;
      CFDictionarySetValue(result, @"kCGImageExtendedRangeToneMappingInfo", v4);
      *a1 = v5;
      return (CFMutableDictionaryRef)1;
    }
  }
  return result;
}

uint64_t CGCreateResolvedToneMappingSettingForMethod(unsigned int a1, void *a2, void *a3, const void *a4, CFMutableStringRef theString, __CFDictionary **a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  float v15 = 1.0;
  if (a9 >= 1.0 || a9 <= 0.0) {
    float v17 = a9;
  }
  else {
    float v17 = 1.0;
  }
  if (a9 >= 0.0) {
    float v18 = v17;
  }
  else {
    float v18 = 0.0;
  }
  if (a10 >= 1.0 || a10 <= 0.0) {
    float v15 = a10;
  }
  if (a10 >= 0.0) {
    float v20 = v15;
  }
  else {
    float v20 = 0.0;
  }
  int v21 = CGCreateToneMappingSettingForMethod(a1, a2, a3, theString, a6, (uint64_t)a6, a7, a8, v18, v20, a11);
  char v29 = v21;
  if (a4 && v21)
  {
    CFDictionaryRef Mutable = *a6;
    if (!*a6)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *a6 = Mutable;
    }
    switch(a1)
    {
      case 0u:
        CFTypeID v31 = CFGetTypeID(a4);
        if (v31 == CFDictionaryGetTypeID() && !CFDictionaryGetCount((CFDictionaryRef)a4)) {
          return 1;
        }
        if (theString)
        {
          CFStringAppendFormat(theString, 0, @"No options are accepted for 'kCGToneMappingDefault'");
          goto LABEL_88;
        }
        uint64_t v76 = "No options are accepted for 'kCGToneMappingDefault'";
        goto LABEL_95;
      case 1u:
        CFTypeID v66 = CFGetTypeID(a4);
        if (v66 == CFDictionaryGetTypeID() && !CFDictionaryGetCount((CFDictionaryRef)a4)) {
          return 1;
        }
        if (theString)
        {
          CFStringAppendFormat(theString, 0, @"No options are accepted for 'kCGToneMappingImageSpecificLumaScaling'");
          goto LABEL_88;
        }
        uint64_t v76 = "No options are accepted for 'kCGToneMappingImageSpecificLumaScaling'";
        goto LABEL_95;
      case 2u:
        uint64_t v91 = @"kCGRWTMSourcePeak";
        uint64_t v92 = @"kCGRWTMSourceReferenceWhite";
        uint64_t v93 = @"kCGRWTMEDRHeadroom";
        uint64_t v94 = @"kCGRWTMTargetReferenceWhiteBase";
        uint64_t v95 = @"kCGRWTMReferenceWhiteThreshold";
        if (!verify_options_dictionary((const __CFDictionary *)a4, (const void **)&v91, 5))
        {
          if (theString)
          {
            CFStringAppendFormat(theString, 0, @"Unkonwn options for 'kCGToneMappingReferenceWhiteBased'");
            goto LABEL_88;
          }
          uint64_t v76 = "Unkonwn options for 'kCGToneMappingReferenceWhiteBased'";
          goto LABEL_95;
        }
        CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(Mutable, @"kCGApplyReferenceWhiteToneMapping");
        double v41 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGRWTMSourcePeak");
        if (v41)
        {
          int v42 = v41;
          CFTypeID v43 = CFGetTypeID(v41);
          if (v43 == CFNumberGetTypeID())
          {
            if (Value) {
              CFDictionarySetValue(Value, @"kCGRWTMSourcePeak", v42);
            }
          }
        }
        float64x2_t v44 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGRWTMSourceReferenceWhite");
        if (v44)
        {
          uint64_t v45 = v44;
          CFTypeID v46 = CFGetTypeID(v44);
          if (v46 == CFNumberGetTypeID())
          {
            if (Value) {
              CFDictionarySetValue(Value, @"kCGRWTMSourceReferenceWhite", v45);
            }
          }
        }
        uint64_t v47 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGRWTMEDRHeadroom");
        if (v47)
        {
          uint64_t v48 = v47;
          CFTypeID v49 = CFGetTypeID(v47);
          if (v49 == CFNumberGetTypeID())
          {
            if (Value) {
              CFDictionarySetValue(Value, @"kCGRWTMEDRHeadroom", v48);
            }
          }
        }
        uint64_t v50 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGRWTMTargetReferenceWhiteBase");
        if (v50)
        {
          uint64_t v51 = v50;
          CFTypeID v52 = CFGetTypeID(v50);
          if (v52 == CFNumberGetTypeID())
          {
            if (Value) {
              CFDictionarySetValue(Value, @"kCGRWTMTargetReferenceWhiteBase", v51);
            }
          }
        }
        double v53 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGRWTMReferenceWhiteThreshold");
        if (!v53) {
          return 1;
        }
        double v54 = v53;
        CFTypeID v55 = CFGetTypeID(v53);
        CFTypeID TypeID = CFNumberGetTypeID();
        uint64_t result = 1;
        if (v55 == TypeID && Value)
        {
          uint64_t v57 = @"kCGRWTMReferenceWhiteThreshold";
          uint64_t v58 = Value;
          goto LABEL_76;
        }
        return result;
      case 3u:
        uint64_t v91 = @"kCGUse100nitsHLGOOTF";
        uint64_t v92 = @"kCGUseBT1886ForCoreVideoGamma";
        uint64_t v93 = @"kCGSkipBoostToHDR";
        uint64_t v94 = @"kCGUseLegacyHDREcosystem";
        if (!verify_options_dictionary((const __CFDictionary *)a4, (const void **)&v91, 4))
        {
          if (theString)
          {
            CFStringAppendFormat(theString, 0, @"Unkonwn options for 'kCGToneMappingITURecommended'");
            goto LABEL_88;
          }
          uint64_t v76 = "Unkonwn options for 'kCGToneMappingITURecommended'";
          goto LABEL_95;
        }
        uint64_t v67 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGUse100nitsHLGOOTF");
        if (v67)
        {
          uint64_t v68 = v67;
          CFTypeID v69 = CFGetTypeID(v67);
          CFTypeID v70 = CFBooleanGetTypeID();
          if (Mutable)
          {
            if (v69 == v70) {
              CFDictionarySetValue(Mutable, @"kCGUse100nitsHLGOOTF", v68);
            }
          }
        }
        uint64_t v71 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGUseBT1886ForCoreVideoGamma");
        if (!v71) {
          return 1;
        }
        double v54 = v71;
        CFTypeID v72 = CFGetTypeID(v71);
        CFTypeID v73 = CFBooleanGetTypeID();
        uint64_t result = 1;
        if (!Mutable || v72 != v73) {
          return result;
        }
        uint64_t v57 = @"kCGUseBT1886ForCoreVideoGamma";
        uint64_t v58 = Mutable;
LABEL_76:
        uint64_t v74 = v54;
        goto LABEL_77;
      case 4u:
        uint64_t v91 = @"kCGEXRToneMappingGammaDefog";
        uint64_t v92 = @"kCGEXRToneMappingGammaExposure";
        uint64_t v93 = @"kCGEXRToneMappingGammaKneeLow";
        uint64_t v94 = @"kCGEXRToneMappingGammaKneeHigh";
        if (verify_options_dictionary((const __CFDictionary *)a4, (const void **)&v91, 4))
        {
          if (Mutable)
          {
            CFDictionaryRef v59 = (const __CFDictionary *)CFDictionaryGetValue(Mutable, @"kCGImageExtendedRangeToneMappingInfo");
            if (v59)
            {
              CFDictionaryRef v60 = v59;
              CFTypeID v61 = CFGetTypeID(v59);
              if (v61 == CFDictionaryGetTypeID())
              {
                CFDictionaryRef v62 = (const __CFDictionary *)CFDictionaryGetValue(v60, @"kCGApplyEXRToneMappingGamma");
                if (v62 && (CFDictionaryRef v63 = v62, v64 = CFGetTypeID(v62), v64 == CFDictionaryGetTypeID())) {
                  MutableCopCGFloat y = CFDictionaryCreateMutableCopy(0, 0, v63);
                }
                else {
                  MutableCopCGFloat y = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                }
                uint64_t v77 = MutableCopy;
                if (MutableCopy)
                {
                  uint64_t v78 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGEXRToneMappingGammaDefog");
                  if (v78)
                  {
                    uint64_t v79 = v78;
                    CFTypeID v80 = CFGetTypeID(v78);
                    if (v80 == CFNumberGetTypeID()) {
                      CFDictionarySetValue(v77, @"kCGEXRToneMappingGammaDefog", v79);
                    }
                  }
                  uint64_t v81 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGEXRToneMappingGammaExposure");
                  if (v81)
                  {
                    uint64_t v82 = v81;
                    CFTypeID v83 = CFGetTypeID(v81);
                    if (v83 == CFNumberGetTypeID()) {
                      CFDictionarySetValue(v77, @"kCGEXRToneMappingGammaExposure", v82);
                    }
                  }
                  uint64_t v84 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGEXRToneMappingGammaKneeLow");
                  if (v84)
                  {
                    uint64_t v85 = v84;
                    CFTypeID v86 = CFGetTypeID(v84);
                    if (v86 == CFNumberGetTypeID()) {
                      CFDictionarySetValue(v77, @"kCGEXRToneMappingGammaKneeLow", v85);
                    }
                  }
                  uint64_t v87 = CFDictionaryGetValue((CFDictionaryRef)a4, @"kCGEXRToneMappingGammaKneeHigh");
                  if (v87)
                  {
                    long long v88 = v87;
                    CFTypeID v89 = CFGetTypeID(v87);
                    if (v89 == CFNumberGetTypeID()) {
                      CFDictionarySetValue(v77, @"kCGEXRToneMappingGammaKneeHigh", v88);
                    }
                  }
                  CFDictionarySetValue(v60, @"kCGApplyEXRToneMappingGamma", v77);
                  CFRelease(v77);
                }
                else
                {
                  uint64_t v57 = @"kCGApplyEXRToneMappingGamma";
                  uint64_t v58 = v60;
                  uint64_t v74 = 0;
LABEL_77:
                  CFDictionarySetValue(v58, v57, v74);
                }
              }
            }
          }
          return 1;
        }
        if (theString)
        {
          CFStringAppendFormat(theString, 0, @"Unkonwn options for 'kCGToneMappingEXRGamma'");
          goto LABEL_88;
        }
        uint64_t v76 = "Unkonwn options for 'kCGToneMappingEXRGamma'";
        goto LABEL_95;
      case 5u:
        CFTypeID v75 = CFGetTypeID(a4);
        if (v75 == CFDictionaryGetTypeID() && !CFDictionaryGetCount((CFDictionaryRef)a4)) {
          return 1;
        }
        if (theString)
        {
          CFStringAppendFormat(theString, 0, @"No options are accepted for 'kCGToneMappingNone'");
          goto LABEL_88;
        }
        uint64_t v76 = "No options are accepted for 'kCGToneMappingNone'";
LABEL_95:
        CGPostError((uint64_t)v76, v32, v33, v34, v35, v36, v37, v38, v90);
        break;
      default:
        goto LABEL_28;
    }
    goto LABEL_96;
  }
LABEL_28:
  if (v29) {
    return 1;
  }
  if (!theString)
  {
    if (a1 < 6)
    {
LABEL_96:
      CGPostError((uint64_t)"Resolving options for tone mapping method %s failed", v22, v23, v24, v25, v26, v27, v28, (char)off_1E52A0468[a1]);
      return 0;
    }
LABEL_34:
    _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", v26, v27, v28, v90);
  }
  if (a1 >= 6) {
    goto LABEL_34;
  }
LABEL_88:
  CFStringAppendFormat(theString, 0, @"Resolving options for tone mapping method %s failed", off_1E52A0468[a1]);
  return 0;
}

BOOL verify_options_dictionary(const __CFDictionary *a1, const void **a2, uint64_t a3)
{
  CFIndex Count = CFDictionaryGetCount(a1);
  uint64_t v7 = 0;
  do
  {
    CFAllocatorRef v8 = *a2++;
    if (CFDictionaryContainsKey(a1, v8) == 1) {
      ++v7;
    }
    --a3;
  }
  while (a3);
  return Count == v7;
}

CFDictionaryRef CGColorConversionInfoCreateOptionsForToneMapping(unsigned int a1, void *a2, void *a3, const void *a4, CFMutableStringRef theString, float a6, float a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
  {
    CFStringAppendFormat(theString, 0, @"target color space is NULL");
    return 0;
  }
  CFDictionaryRef theDict = 0;
  int v11 = CGCreateResolvedToneMappingSettingForMethod(a1, a2, a3, a4, theString, &theDict, a10, a11, a6, a7, a8);
  CFDictionaryRef result = 0;
  if (!v11 || !theDict) {
    goto LABEL_6;
  }
  if (CFDictionaryGetCount(theDict) >= 1)
  {
    values = theDict;
    keys = @"kCGColorConversionInfoOptions";
    CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
LABEL_6:
    if (v11) {
      return result;
    }
    goto LABEL_7;
  }
  CFDictionaryRef result = 0;
  if (v11) {
    return result;
  }
LABEL_7:
  if (CGColorConversionInfoCreateOptionsForToneMapping_predicate != -1) {
    dispatch_once(&CGColorConversionInfoCreateOptionsForToneMapping_predicate, &__block_literal_global_63);
  }
  CFDictionaryRef result = (CFDictionaryRef)CGColorConversionInfoCreateOptionsForToneMapping_bad_color_conversion_info_options;
  if (CGColorConversionInfoCreateOptionsForToneMapping_bad_color_conversion_info_options) {
    return (CFDictionaryRef)CFRetain((CFTypeRef)CGColorConversionInfoCreateOptionsForToneMapping_bad_color_conversion_info_options);
  }
  return result;
}

CFDictionaryRef __CGColorConversionInfoCreateOptionsForToneMapping_block_invoke()
{
  uint64_t v1 = (const void *)*MEMORY[0x1E4F1CFD0];
  keys = @"kCGColorConversionInfoOptionsFailed";
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, &v1, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CGColorConversionInfoCreateOptionsForToneMapping_bad_color_conversion_info_options = (uint64_t)result;
  return result;
}

CFDictionaryRef CGCreatePayloadForToneMapping(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = xmmword_1E52A0340;
  uint64_t v14 = @"kCGToneMappingMethodOptions";
  if (a1 >= 6) {
    _CGHandleAssert("CGToneMappingMethodString", 522, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", a6, a7, a8, v11);
  }
  values[0] = *((void **)&off_1E52A0438 + a1);
  if (CGImageDefaultReferenceWhite_once != -1) {
    dispatch_once(&CGImageDefaultReferenceWhite_once, &__block_literal_global_268);
  }
  values[1] = (void *)CGImageDefaultReferenceWhite_media_white;
  values[2] = a2;
  if (a2) {
    CFIndex v9 = 3;
  }
  else {
    CFIndex v9 = 2;
  }
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

CGColorConversionInfoRef CGColorConversionInfoCreateForToneMapping(void *a1, void *a2, unsigned int a3, const void *a4, CFErrorRef *a5, float a6, float a7)
{
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  float v16 = a7;
  if (a3 - 3 <= 2)
  {
    if (a6 != 0.0 || (float v16 = 1.0, a7 != 0.0))
    {
      CFStringAppendFormat(Mutable, 0, @"%s does not handle headroom; both headroom values shall be set to 0.0f",
        off_1E52A0468[a3]);
      goto LABEL_16;
    }
  }
  BOOL is_sdr = colorspace_is_sdr((BOOL)a1);
  float v18 = 0.0;
  if (a6 == 1.0) {
    float v18 = 1.0;
  }
  if (!is_sdr) {
    float v18 = a6;
  }
  if (a3 - 3 >= 3) {
    float v19 = v18;
  }
  else {
    float v19 = 1.0;
  }
  if (v19 < 1.0)
  {
    CFStringAppendFormat(Mutable, 0, @"source headrooCGAffineTransform m = %f is invalid", a6);
LABEL_16:
    int v23 = 0;
    goto LABEL_17;
  }
  if (v16 < 1.0)
  {
    CFStringAppendFormat(Mutable, 0, @"target headrooCGAffineTransform m = %f is invalid", v16);
    goto LABEL_16;
  }
  if (v19 < v16)
  {
    if (a2)
    {
      uint64_t v39 = a2[3];
      BOOL v40 = *(unsigned char *)(v39 + 16) || *(unsigned char *)(v39 + 17) != 0;
    }
    else
    {
      BOOL v40 = 0;
    }
    BOOL v43 = colorspace_is_sdr((BOOL)a1);
    BOOL v44 = v19 != 1.0 || !v43;
    if (v44 || !v40)
    {
      CFStringAppendFormat(Mutable, 0, @"cannot tone map from source headrooCGAffineTransform m = %f to target headrooCGAffineTransform m = %f", v19, v16);
      goto LABEL_16;
    }
  }
  switch(conversion_type(a2, a1))
  {
    case 0u:
      int v48 = verify_parameters_edr_to_edr((uint64_t)a1, (uint64_t)a2, a3, Mutable, v16, v47, v20, v21, v22);
      break;
    case 1u:
      int v48 = verify_parameters_edr_to_hdr((uint64_t)a1, (uint64_t)a2, a3, Mutable, v47, v20, v21, v22);
      break;
    case 2u:
      int v48 = verify_parameters_edr_to_sdr((uint64_t)a1, (BOOL)a2, a3, Mutable, v16);
      break;
    case 3u:
      if (!a2 || !*(unsigned char *)(a2[3] + 13)) {
        goto LABEL_16;
      }
      goto LABEL_71;
    case 4u:
      if (!a2) {
        goto LABEL_16;
      }
      uint64_t v49 = a2[3];
      if (!*(unsigned char *)(v49 + 16) && !*(unsigned char *)(v49 + 17)) {
        goto LABEL_16;
      }
      goto LABEL_71;
    case 5u:
      if (!colorspace_is_sdr((BOOL)a2)) {
        goto LABEL_16;
      }
LABEL_71:
      int v48 = verify_parameters_hdr_to_any((uint64_t)a1, a3, Mutable, v19, v46, v47, v20, v21, v22);
      break;
    case 6u:
      int v48 = verify_parameters_sdr_to_edr((BOOL)a1, (uint64_t)a2, a3, Mutable);
      break;
    case 7u:
      int v48 = verify_parameters_sdr_to_hdr((BOOL)a1, (uint64_t)a2, a3, Mutable);
      break;
    case 8u:
      int v48 = verify_parameters_sdr_to_sdr((BOOL)a1, (BOOL)a2, a3, Mutable);
      break;
    case 9u:
      if (a1) {
        CFStringRef v50 = CFCopyDescription(a1);
      }
      else {
        CFStringRef v50 = @"NULL";
      }
      if (a2) {
        CFStringRef v51 = CFCopyDescription(a2);
      }
      else {
        CFStringRef v51 = @"NULL";
      }
      CFStringAppendFormat(Mutable, 0, @" conversion from %@ to %@ cannot be handled by tone mapping", v50, v51);
      if (v50) {
        CFRelease(v50);
      }
      if (v51) {
        CFRelease(v51);
      }
      goto LABEL_16;
    default:
      goto LABEL_16;
  }
  int v23 = v48;
LABEL_17:
  if (CGImageDefaultReferenceWhite_once != -1) {
    dispatch_once(&CGImageDefaultReferenceWhite_once, &__block_literal_global_268);
  }
  CFNumberRef v24 = (const __CFNumber *)CGImageDefaultReferenceWhite_media_white;
  float v25 = 0.0;
  if (CGImageDefaultReferenceWhite_media_white)
  {
    CFTypeID v26 = CFGetTypeID((CFTypeRef)CGImageDefaultReferenceWhite_media_white);
    if (v26 == CFNumberGetTypeID())
    {
      float valuePtr = 0.0;
      CFNumberGetValue(v24, kCFNumberFloatType, &valuePtr);
      float v25 = valuePtr;
    }
  }
  float v53 = v25;
  if (a4)
  {
    CFTypeID v27 = CFGetTypeID(a4);
    if (v27 == CFDictionaryGetTypeID())
    {
      uint64_t v28 = a3 == 2 ? @"kCGRWTMSourceReferenceWhite" : @"kCGHDRMediaReferenceWhite";
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a4, v28);
      if (Value)
      {
        CFNumberRef v30 = Value;
        CFTypeID v31 = CFGetTypeID(Value);
        if (v31 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v30, kCFNumberFloatType, &v53);
          float v25 = v53;
        }
      }
    }
  }
  if (v23)
  {
    CFDictionaryRef OptionsForToneMapping = CGColorConversionInfoCreateOptionsForToneMapping(a3, a2, a1, a4, Mutable, a7, a6, v25, v20, v21, v22);
    if (OptionsForToneMapping)
    {
      CFDictionaryRef v33 = OptionsForToneMapping;
      if (CFDictionaryContainsKey(OptionsForToneMapping, @"kCGColorConversionInfoOptionsFailed"))
      {
        if (a3 >= 6) {
          _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", v34, v35, v36, v52);
        }
        CFStringAppendFormat(Mutable, 0, @"failed to create valid options for tone mapping method %s", off_1E52A0468[a3]);
        handle_error((char)Mutable, a5, a1, a2, a3, a4, a6, a7);
        CGColorConversionInfoRef v37 = 0;
      }
      else
      {
        CFDictionaryRef v41 = (const __CFDictionary *)CFDictionaryGetValue(v33, @"kCGColorConversionInfoOptions");
        CGColorConversionInfoRef v37 = CGColorConversionInfoCreateFromList(v41, (CGColorSpaceRef)a1, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a2, 1, 0, 0);
      }
      CFRelease(v33);
    }
    else
    {
      CGColorConversionInfoRef v37 = CGColorConversionInfoCreateFromList(0, (CGColorSpaceRef)a1, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a2, 1, 0, 0);
    }
  }
  else
  {
    uint64_t v38 = CFStringCreateMutable(v14, 0);
    CFStringAppendFormat(v38, 0, @"invalid parameters: %@", Mutable);
    handle_error((char)v38, a5, a1, a2, a3, a4, a6, a7);
    if (v38) {
      CFRelease(v38);
    }
    CGColorConversionInfoRef v37 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v37;
}

uint64_t verify_parameters_edr_to_edr(uint64_t result, uint64_t a2, unsigned int a3, CFMutableStringRef theString, float a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (result)
  {
    if (*(unsigned char *)(*(void *)(result + 24) + 13)) {
      BOOL v9 = a2 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9 || !*(unsigned char *)(*(void *)(a2 + 24) + 13))
    {
      return 0;
    }
    else
    {
      if (a3)
      {
        uint64_t v10 = 4u;
        do
        {
          if (v10 == 16)
          {
            if (a3 >= 6) {
              _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", a7, a8, a9, v13);
            }
            CFStringAppendFormat(theString, 0, @"incorrect method %s", off_1E52A0468[a3]);
            return 0;
          }
          int v11 = *(_DWORD *)((char *)&unk_1850CE090 + v10);
          v10 += 4;
        }
        while (v11 != a3);
        if (a5 != 1.0 && a3 == 4)
        {
          CFStringAppendFormat(theString, 0, @"target headroom for kCGToneMappingEXRGamma must be equal 1.0");
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t verify_parameters_edr_to_hdr(uint64_t result, uint64_t a2, unsigned int a3, CFMutableStringRef theString, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    if (*(unsigned char *)(*(void *)(result + 24) + 13)) {
      BOOL v8 = a2 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      if (*(unsigned char *)(v9 + 16) || *(unsigned char *)(v9 + 17))
      {
        if (a3 <= 5)
        {
          CFDictionaryRef result = 1;
          if (((1 << a3) & 0x25) != 0) {
            return result;
          }
        }
        if (a3 >= 6) {
          _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", a6, a7, a8, v10);
        }
        CFStringAppendFormat(theString, 0, @"incorrect method %s", off_1E52A0468[a3]);
      }
    }
    return 0;
  }
  return result;
}

uint64_t verify_parameters_edr_to_sdr(uint64_t result, BOOL a2, unsigned int a3, __CFString *a4, float a5)
{
  if (result)
  {
    if (*(unsigned char *)(*(void *)(result + 24) + 13))
    {
      CFDictionaryRef result = colorspace_is_sdr(a2);
      if (!result) {
        return result;
      }
      if (a5 == 1.0)
      {
        if (!a3) {
          return 1;
        }
        for (uint64_t i = 4u; i != 16; i += 4)
        {
          int v12 = *(_DWORD *)((char *)&unk_1850CE090 + i);
          if (v12 == a3) {
            return 1;
          }
        }
        if (a3 >= 6) {
          _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", v8, v9, v10, v13);
        }
        CFStringAppendFormat(a4, 0, @"incorrect method %s", off_1E52A0468[a3]);
      }
      else
      {
        CFStringAppendFormat(a4, 0, @"incorrect target headroom %f for EDR to SDR", a5);
      }
    }
    return 0;
  }
  return result;
}

uint64_t verify_parameters_hdr_to_any(uint64_t result, unsigned int a2, __CFString *a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (result)
  {
    int v11 = (void *)result;
    uint64_t v12 = *(void *)(result + 24);
    if (*(unsigned char *)(v12 + 16) || *(unsigned char *)(v12 + 17))
    {
      if (!a2) {
        return 1;
      }
      uint64_t v13 = 0;
      do
      {
        if (v13 == 16)
        {
          if (a2 >= 6) {
            _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", a7, a8, a9, v16);
          }
          CFStringAppendFormat(a3, 0, @"incorrect method %s", off_1E52A0468[a2]);
          return 0;
        }
        int v14 = *(_DWORD *)((char *)&unk_18519F478 + v13 + 4);
        v13 += 4;
      }
      while (v14 != a2);
      if (a2 != 1) {
        return 1;
      }
      if (CGColorSpaceContainsFlexGTCInfo(result))
      {
        float HeadroomInfo = CGColorSpaceGetHeadroomInfo(v11, 0);
        if (vabds_f32(HeadroomInfo, a4) <= 0.00001) {
          return 1;
        }
        CFStringAppendFormat(a3, 0, @"source headroom %f does not match luma scaling information %f", a4, HeadroomInfo);
      }
      else
      {
        CFStringAppendFormat(a3, 0, @"source color space does not contain luma scaling information");
      }
    }
    return 0;
  }
  return result;
}

uint64_t verify_parameters_sdr_to_edr(BOOL a1, uint64_t a2, unsigned int a3, __CFString *a4)
{
  BOOL is_sdr = colorspace_is_sdr(a1);
  uint64_t result = 0;
  if (a2 && is_sdr)
  {
    if (*(unsigned char *)(*(void *)(a2 + 24) + 13))
    {
      char v12 = 0;
      uint64_t v13 = 0;
      do
      {
        char v14 = v12;
        if (dword_1850CEA70[v13] == a3) {
          return 1;
        }
        char v12 = 1;
        uint64_t v13 = 1;
      }
      while ((v14 & 1) == 0);
      if (a3 >= 6) {
        _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", v7, v8, v9, v15);
      }
      CFStringAppendFormat(a4, 0, @"incorrect method %s", off_1E52A0468[a3]);
    }
    return 0;
  }
  return result;
}

uint64_t verify_parameters_sdr_to_hdr(BOOL a1, uint64_t a2, unsigned int a3, __CFString *a4)
{
  BOOL is_sdr = colorspace_is_sdr(a1);
  uint64_t result = 0;
  if (a2 && is_sdr)
  {
    uint64_t v12 = *(void *)(a2 + 24);
    if (!*(unsigned char *)(v12 + 16) && !*(unsigned char *)(v12 + 17)) {
      return 0;
    }
    if (a3 > 5 || (uint64_t result = 1, ((1 << a3) & 0x29) == 0))
    {
      if (a3 >= 6) {
        _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", v7, v8, v9, v13);
      }
      CFStringAppendFormat(a4, 0, @"incorrect method %s", off_1E52A0468[a3]);
      return 0;
    }
  }
  return result;
}

BOOL verify_parameters_sdr_to_sdr(BOOL a1, BOOL a2, unsigned int a3, __CFString *a4)
{
  BOOL result = colorspace_is_sdr(a1);
  if (result)
  {
    BOOL result = colorspace_is_sdr(a2);
    if (result)
    {
      char v11 = 0;
      uint64_t v12 = 0;
      do
      {
        char v13 = v11;
        if (dword_1850CEA70[v12] == a3) {
          return 1;
        }
        char v11 = 1;
        uint64_t v12 = 1;
      }
      while ((v13 & 1) == 0);
      if (a3 >= 6) {
        _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", v8, v9, v10, v14);
      }
      CFStringAppendFormat(a4, 0, @"incorrect method %s", off_1E52A0468[a3]);
      return 0;
    }
  }
  return result;
}

void handle_error(char a1, CFErrorRef *a2, const void *a3, const void *a4, unsigned int a5, const void *a6, float a7, float a8)
{
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return;
  }
  float v18 = Mutable;
  CFStringAppendFormat(Mutable, 0, @"\n%@\n");
  CFStringRef v19 = CFCopyDescription(a3);
  CFStringRef v20 = CFCopyDescription(a4);
  if (a6) {
    CFStringRef v21 = CFCopyDescription(a6);
  }
  else {
    CFStringRef v21 = @"<NULL>";
  }
  CFStringAppendFormat(v18, 0, @"parameters:\n");
  if (a5 >= 6) {
    _CGHandleAssert("method_name", 575, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", v22, v23, v24, a1);
  }
  CFStringAppendFormat(v18, 0, @"\tmethod: %s\n", off_1E52A0468[a5]);
  CFStringAppendFormat(v18, 0, @"\tsource: %@\n", v19);
  CFStringAppendFormat(v18, 0, @"\tsource headroom: %f\n", a7);
  CFStringAppendFormat(v18, 0, @"\ttarget: %@\n", v20);
  CFStringAppendFormat(v18, 0, @"\ttarget headroom: %f\n", a8);
  CFStringAppendFormat(v18, 0, @"\toptions:\n\t\t %@\n", v21);
  if (a2)
  {
    float v25 = (void *)*MEMORY[0x1E4F1D140];
    values = v18;
    keys = v25;
    CFDictionaryRef v26 = CFDictionaryCreate(v16, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *a2 = CFErrorCreate(v16, @"CGColorConversionInfoCreateForToneMapping", -1, v26);
    if (v26) {
      CFRelease(v26);
    }
    if (!v19) {
      goto LABEL_11;
    }
  }
  else
  {
    __sprintf_chk(handle_error_message, 0, 0x401uLL, "CGColorConversionInfoCreateForToneMapping failed: ");
    size_t v27 = strlen(handle_error_message);
    CFIndex Length = CFStringGetLength(v18);
    char v29 = (UInt8 *)&handle_error_message[v27];
    CFIndex v30 = 1024 - v27;
    if (!CFStringGetCString(v18, (char *)v29, v30, 0x8000100u))
    {
      v40.location = 0;
      v40.length = Length;
      CFStringGetBytes(v18, v40, 0x600u, 0x3Fu, 0, v29, v30, 0);
    }
    handle_error_message[strlen(handle_error_message)] = 0;
    CGPostError((uint64_t)"%s", v31, v32, v33, v34, v35, v36, v37, (char)handle_error_message);
    if (!v19) {
      goto LABEL_11;
    }
  }
  CFRelease(v19);
LABEL_11:
  if (v20) {
    CFRelease(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
  CFRelease(v18);
}

void low_memory_notification_callback(__CFNotificationCenter *a1, os_unfair_lock_s *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  if (a2)
  {
    BOOL v6 = a2 + 52;
    os_unfair_lock_lock(a2 + 52);
    uint64_t v7 = *(void *)&a2[50]._os_unfair_lock_opaque;
    if (v7 && *(void *)(v7 + 16) >= 2uLL)
    {
      do
        LRUCache::pop_back((uint64_t **)v7);
      while (*(void *)(v7 + 16) > 1uLL);
    }
    os_unfair_lock_unlock(v6);
  }
}

void LRUCache::pop_back(uint64_t **this)
{
  uint64_t v1 = this[2];
  if (v1
    && ((unint64_t v3 = (*this)[2], !*((unsigned char *)this + 72))
     || (!v3 ? (uint64_t v4 = 0) : (uint64_t v4 = *(void *)(*(void *)(v3 + 40) + 8)),
         printf("LRUCache: removing page: %lu\n", v4),
         (uint64_t v1 = this[2]) != 0)))
  {
    CFMutableDictionaryRef v5 = *this;
    uint64_t v6 = **this;
    *(void *)(v6 + 8) = (*this)[1];
    *(void *)v5[1] = v6;
    this[2] = (uint64_t *)((char *)v1 - 1);
    operator delete(v5);
    uint64_t v7 = this + 3;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::find<CGPDFPage *>(v7, v3);
    if (v8) {
      std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::erase(v7, v8);
    }
    CGPDFPagePurgeResources(v3);
  }
  else
  {
    __break(1u);
  }
}

void std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::erase(void *a1, void *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  unint64_t v3 = __p[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  CFMutableDictionaryRef v5 = *(void **)(*a1 + 8 * v3);
  do
  {
    uint64_t v6 = v5;
    CFMutableDictionaryRef v5 = (void *)*v5;
  }
  while (v5 != __p);
  if (v6 == a1 + 2) {
    goto LABEL_18;
  }
  unint64_t v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v2) {
      v7 %= *(void *)&v2;
    }
  }
  else
  {
    v7 &= *(void *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*__p) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(*__p + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    if (v8 != v3) {
LABEL_19:
    }
      *(void *)(*a1 + 8 * v3) = 0;
  }
  uint64_t v9 = *__p;
  if (*__p)
  {
    unint64_t v10 = *(void *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v2) {
        v10 %= *(void *)&v2;
      }
    }
    else
    {
      v10 &= *(void *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(void *)(*a1 + 8 * v10) = v6;
      uint64_t v9 = *__p;
    }
  }
  void *v6 = v9;
  void *__p = 0;
  --a1[3];
  operator delete(__p);
}

uint64_t CGPDFDocumentFinalize(char *a1)
{
  int8x8_t v2 = (void *)*((void *)a1 + 3);
  if (v2)
  {
    if (*((void *)a1 + 4))
    {
      unint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(void *)(*((void *)a1 + 3) + 8 * v3);
        if (v4)
        {
          if (*(unsigned char *)(v4 + 24)
            || (*(void *)(v4 + 16) = 0, (uint64_t v4 = *(void *)(*((void *)a1 + 3) + 8 * v3)) != 0))
          {
            CFRelease((CFTypeRef)v4);
          }
        }
        ++v3;
      }
      while (v3 < *((void *)a1 + 4));
      int8x8_t v2 = (void *)*((void *)a1 + 3);
    }
    free(v2);
  }
  CFMutableDictionaryRef v5 = (const void *)*((void *)a1 + 2);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)a1 + 5);
  if (v6) {
    CFRelease(v6);
  }
  unint64_t v7 = (const void *)*((void *)a1 + 6);
  if (v7) {
    CFRelease(v7);
  }
  unint64_t v8 = (const void *)*((void *)a1 + 24);
  if (v8) {
    CFRelease(v8);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, @"CGPDFDocumentLowMemoryNotificationName", 0);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 52);
  unint64_t v10 = (uint64_t *)*((void *)a1 + 25);
  if (v10)
  {
    char v11 = (void *)v10[5];
    if (v11)
    {
      do
      {
        uint64_t v12 = (void *)*v11;
        operator delete(v11);
        char v11 = v12;
      }
      while (v12);
    }
    char v13 = (void *)v10[3];
    _OWORD v10[3] = 0;
    if (v13) {
      operator delete(v13);
    }
    if (v10[2])
    {
      uint64_t v15 = *v10;
      char v14 = (uint64_t *)v10[1];
      uint64_t v16 = *v14;
      *(void *)(v16 + 8) = *(void *)(*v10 + 8);
      **(void **)(v15 + 8) = v16;
      void v10[2] = 0;
      if (v14 != v10)
      {
        do
        {
          float v17 = (uint64_t *)v14[1];
          operator delete(v14);
          char v14 = v17;
        }
        while (v17 != v10);
      }
    }
    MEMORY[0x18532A2A0](v10, 0x10A0C404B5732FELL);
  }
  *((void *)a1 + 25) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 52);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 53);
  uint64_t v18 = *((void *)a1 + 27);
  if (v18)
  {
    CFRelease(*(CFTypeRef *)(v18 + 16));
    CFStringRef v19 = *(const void **)(v18 + 24);
    if (v19) {
      CFRelease(v19);
    }
    CFStringRef v20 = *(const void **)(v18 + 32);
    if (v20) {
      CFRelease(v20);
    }
    free((void *)v18);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 53);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 56);
  CFStringRef v21 = (const void *)*((void *)a1 + 29);
  if (v21) {
    CFRelease(v21);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 56);
  pthread_mutex_destroy((pthread_mutex_t *)a1 + 2);

  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
}

void __CGPDFDocumentCreateWithProvider_block_invoke_2()
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"CGPDFDocumentLowMemoryNotificationName", 0, 0, 1u);
}

CFTypeID CGPDFDocumentGetTypeID(void)
{
  if (CGPDFDocumentGetTypeID::onceToken != -1) {
    dispatch_once(&CGPDFDocumentGetTypeID::onceToken, &__block_literal_global_25);
  }
  return CGPDFDocumentGetTypeID::id;
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
  if (document) {
    CFRelease(document);
  }
}

BOOL CGPDFDocumentIsLinearized(BOOL result)
{
  if (result) {
    return *(void *)(**(void **)(*(void *)(result + 16) + 16) + 24) != 0;
  }
  return result;
}

BOOL CGPDFDocumentIsEncrypted(CGPDFDocumentRef document)
{
  if (document) {
    LOBYTE(document) = *(void *)(**(void **)(*((void *)document + 2) + 16) + 40) != 0;
  }
  return (char)document;
}

CGPDFDocumentRef CGPDFDocumentCreateWithURL(CFURLRef url)
{
  valuePtr[1] = *MEMORY[0x1E4F143B8];
  if (!url) {
    return 0;
  }
  CGDataProviderRef v2 = CGDataProviderCreateWithURL(url);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v2;
  CGDataProviderSetProperty((uint64_t)v2, @"from_url", (const void *)*MEMORY[0x1E4F1CFD0]);
  CGPDFDocumentRef v4 = CGPDFDocumentCreateWithProvider(v3);
  uint64_t v5 = *((void *)v3 + 34);
  if (v5)
  {
    PropertCGFloat y = (const __CFNumber *)CGPropertiesGetProperty(v5, @"CGDataProviderTrustToken");
    CGDataProviderRelease(v3);
    if (Property)
    {
      LODWORD(valuePtr[0]) = 0;
      if (CFNumberGetValue(Property, kCFNumberIntType, valuePtr))
      {
        uint64_t v7 = rootless_verify_trusted_by_self_token();
        goto LABEL_9;
      }
    }
  }
  else
  {
    CGDataProviderRelease(v3);
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = (void *)MEMORY[0x18532AD60]();
  unint64_t v10 = @"isTrustedURL";
  valuePtr[0] = [NSNumber numberWithBool:v7];
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:valuePtr forKeys:&v10 count:1];
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentCreateWithURL");
  if (v4)
  {
    if (*(void *)(**(void **)(*((void *)v4 + 2) + 16) + 40) || CGPDFDocumentGetPage(v4, 1uLL))
    {
      *((void *)v4 + 5) = url;
      CFRetain(url);
      return v4;
    }
    CFRelease(v4);
    return 0;
  }
  return v4;
}

CGPDFDocumentRef CGPDFDocumentRetain(CGPDFDocumentRef document)
{
  if (document) {
    CFRetain(document);
  }
  return document;
}

void CGPDFDocumentGetVersion(CGPDFDocumentRef document, int *majorVersion, int *minorVersion)
{
  *(void *)&v30[45] = *MEMORY[0x1E4F143B8];
  if (!document)
  {
    *minorVersion = 0;
    *majorVersion = 0;
    return;
  }
  unint64_t v10 = *(uint64_t **)(*((void *)document + 2) + 16);
  uint64_t v11 = *(void *)*v10;
  CGPDFSourceSetPosition(v11, 0, (uint64_t)minorVersion, v3, v4, v5, v6, v7);
  for (uint64_t i = 0; i != 63; ++i)
  {
    int v20 = CGPDFSourceGetc(v11, v12, v13, v14, v15, v16, v17, v18);
    if ((v20 + 1) <= 0xE && ((1 << (v20 + 1)) & 0x4801) != 0) {
      break;
    }
    value[i] = v20;
  }
  uint64_t v28 = 0;
  value[i] = 0;
  if (*(_DWORD *)value == 1178882085 && value[4] == 45)
  {
    uint64_t v24 = &value[5];
  }
  else
  {
    if (*(void *)value != 0x6F64412D53502125 || *(void *)&value[3] != 0x2D65626F64412D53) {
      return;
    }
    uint64_t v24 = v30;
  }
  if (convert_version(v24, majorVersion, minorVersion))
  {
    *(void *)CGPDFBoolean value = 0;
    trailer = (CGPDFDictionary *)pdf_xref_get_trailer(*v10);
    if (CGPDFDictionaryGetDictionary(trailer, "Root", (CGPDFDictionaryRef *)value))
    {
      if (*(void *)value)
      {
        if (CGPDFDictionaryGetName(*(CGPDFDictionaryRef *)value, "Version", (const char **)&v28))
        {
          *(_DWORD *)CGPDFBoolean value = 0;
          int v27 = 0;
          if (convert_version(v28, value, &v27))
          {
            if (*(int *)value <= *majorVersion)
            {
              if (*(_DWORD *)value != *majorVersion) {
                return;
              }
              int v26 = v27;
              if (v27 <= *minorVersion) {
                return;
              }
            }
            else
            {
              *majorVersion = *(_DWORD *)value;
              int v26 = v27;
            }
            *minorVersion = v26;
          }
        }
      }
    }
  }
}

BOOL CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef document, const char *password)
{
  if (document) {
    LOBYTE(document) = pdf_document_unlock_with_password(*(void *)(**(void **)(*((void *)document + 2) + 16) + 40), (char *)password);
  }
  return (char)document;
}

BOOL CGPDFDocumentUnlockAsOwnerWithPassword(BOOL result, char *__s)
{
  if (result)
  {
    uint64_t v2 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 40);
    if (v2)
    {
      size_t v4 = strlen(__s);
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 && ((size_t v6 = v4, __s) || !v4))
      {
        pthread_mutex_lock(&lock);
        int v7 = CGPDFSecurityHandlerAuthenticateOwnerPassword(v5, __s, v6);
        *(unsigned char *)(v5 + 184) = v7;
        if (v7) {
          int v8 = 4095;
        }
        else {
          int v8 = 0;
        }
        *(unsigned char *)(v5 + 185) = v7;
        *(_DWORD *)(v5 + 188) = v8;
        pthread_mutex_unlock(&lock);
        return *(unsigned char *)(v5 + 185) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL CGPDFDocumentIsUnlocked(CGPDFDocumentRef document)
{
  if (!document) {
    return 1;
  }
  uint64_t v1 = *(void *)(**(void **)(*((void *)document + 2) + 16) + 40);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  return v2 && *(unsigned char *)(v2 + 184) != 0;
}

BOOL CGPDFDocumentIsUnlockedAsOwner(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v1 = *(void *)(**(void **)(*(void *)(a1 + 16) + 16) + 40);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  return v2 && *(unsigned char *)(v2 + 185) != 0;
}

BOOL CGPDFDocumentAllowsPrinting(CGPDFDocumentRef document)
{
  return (CGPDFDocumentGetPermissions((uint64_t)document) & 3) != 0;
}

uint64_t CGPDFDocumentGetPermissions(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 40);
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 16);
      if (v2) {
        uint64_t v3 = (unsigned int *)(v2 + 188);
      }
      else {
        uint64_t v3 = (unsigned int *)&CGPDFPermissionsNone;
      }
      unsigned int v4 = *v3;
    }
    else
    {
      unsigned int v4 = 4095;
    }
    return (v4 >> 1) & 4 | ((int)(v4 << 31) >> 31) & (v4 >> 1) & 3;
  }
  return result;
}

BOOL CGPDFDocumentAllowsCopying(CGPDFDocumentRef document)
{
  return CGPDFDocumentGetPermissions((uint64_t)document) > 3;
}

size_t CGPDFDocumentGetNumberOfPages(size_t document)
{
  if (document)
  {
    size_t v1 = document;
    CGAnalyticsSendPDFDocumentGetNumberOfPagesEvent();
    uint64_t v2 = *(uint64_t **)(*(void *)(v1 + 16) + 16);
    return (size_t)pdf_reader_get_number_of_pages(v2);
  }
  return document;
}

uint64_t CGPDFDocumentGetPageNoCreate(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(uint64_t **)(*(void *)(result + 16) + 16);
    uint64_t v5 = *(void *)(*v4 + 40);
    if ((!v5 || (uint64_t v6 = *(void *)(v5 + 16)) != 0 && *(unsigned char *)(v6 + 184))
      && a2 - 1 < (unint64_t)pdf_reader_get_number_of_pages(v4)
      && (uint64_t v7 = *(void *)(v3 + 24)) != 0)
    {
      return *(void *)(v7 + 8 * (a2 - 1));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDocumentCopyPage(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 0;
  }
  unsigned int v4 = *(uint64_t **)(*(void *)(a1 + 16) + 16);
  uint64_t v5 = *(void *)(*v4 + 40);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 16);
    if (!v6 || !*(unsigned char *)(v6 + 184)) {
      return 0;
    }
  }
  if (a2 - 1 >= (unint64_t)pdf_reader_get_number_of_pages(v4)) {
    return 0;
  }
  ensure_page_array_exists(a1);

  return CGPDFPageCreate2((CFTypeRef *)a1, a2, 1);
}

CGPDFDictionaryRef CGPDFDocumentGetCatalog(CGPDFDictionaryRef document)
{
  if (document)
  {
    CGPDFDictionaryRef v1 = document;
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    uint64_t v2 = **(void **)(*((void *)v1 + 2) + 16);
    return pdf_document_get_catalog(v2);
  }
  return document;
}

CGPDFDictionaryRef CGPDFDocumentGetInfo(CGPDFDictionaryRef document)
{
  if (document)
  {
    CGPDFDictionaryRef v1 = document;
    uint64_t v2 = (void *)MEMORY[0x18532AD60]();
    send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentGetInfo");
    uint64_t v3 = *(uint64_t **)(*((void *)v1 + 2) + 16);
    CGPDFDictionaryRef value = 0;
    trailer = (CGPDFDictionary *)pdf_xref_get_trailer(*v3);
    if (CGPDFDictionaryGetDictionary(trailer, "Info", &value)) {
      return value;
    }
    else {
      return 0;
    }
  }
  return document;
}

CGPDFArrayRef CGPDFDocumentGetID(CGPDFArrayRef document)
{
  if (document) {
    return *(CGPDFArrayRef *)(**(void **)(*((void *)document + 2) + 16) + 48);
  }
  return document;
}

uint64_t CGPDFDocumentGetDataProvider(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = ***(void ***)(*(void *)(result + 16) + 16);
    if (v1) {
      return *(void *)(v1 + 40);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *CGPDFDocumentGetPageDictionary(void *result, unint64_t a2)
{
  if (result) {
    return pdf_document_get_page_dictionary(*(void *)(result[2] + 16), a2);
  }
  return result;
}

BOOL CGDataProviderContainsLinearizedPDF(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  uint64_t v8 = a1[4];
  if (v8 == -1)
  {
    CGPostError((uint64_t)"Invalid data provider size. Sequential data providers are not supported for linearized PDF.\n", (uint64_t)a2, -1, a4, a5, a6, a7, a8, v32);
    return 0;
  }
  unint64_t v10 = CGPDFSourceCreate(a1, 0, v8);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  uint64_t v12 = v10[2];
  if (v12 >= 4096) {
    uint64_t v13 = 4096;
  }
  else {
    uint64_t v13 = v10[2];
  }
  if (v12 == -1) {
    size_t v14 = 4096;
  }
  else {
    size_t v14 = v13;
  }
  v10[12] = v14;
  free((void *)v10[11]);
  uint64_t v15 = malloc_type_calloc(1uLL, v14, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  v11[11] = v15;
  v11[13] = 0;
  v11[14] = 0;
  v11[15] = 0;
  v11[16] = v15;
  CGPDFSourceRead((uint64_t)v11, (uint64_t)__dst, 4uLL, v16, v17, v18, v19, v20);
  linearization_dictionarCGFloat y = (CGPDFDictionary *)xref_read_linearization_dictionary(v11, v21, v22, v23, v24, v25, v26, v27);
  BOOL v29 = linearization_dictionary != 0;
  if (linearization_dictionary)
  {
    CFIndex v30 = linearization_dictionary;
    if (a2) {
      CGPDFDictionaryGetOffset(linearization_dictionary, "L", a2);
    }
    CFRelease(v11);
    CFRelease(v30);
  }
  return v29;
}

uint64_t CGPDFDocumentGetLinearizedDictionary(uint64_t result)
{
  if (result) {
    return *(void *)(**(void **)(*(void *)(result + 16) + 16) + 24);
  }
  return result;
}

uint64_t CGPDFDocumentCreateLinearizedRangesForPage(uint64_t result, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (result) {
    return pdf_reader_get_linearized_page_ranges(*(void *)(**(void **)(*(void *)(result + 16) + 16) + 32), a2, a3, a4);
  }
  return result;
}

uint64_t CGPDFDocumentPreloadLinearizedPageData(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  capacitCGFloat y = 0;
  uint64_t v17 = 0;
  if (!pdf_reader_get_linearized_page_ranges(*(void *)(**(void **)(v2 + 16) + 32), a2, (uint64_t *)&v17, &capacity)|| (v3 = ***(void ***)(v2 + 16)) == 0|| (unsigned int v4 = *(void **)(v3 + 40)) == 0|| (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, MEMORY[0x1E4F1D510])) == 0)
  {
    free(v17);
    return 0;
  }
  uint64_t v6 = Mutable;
  if (capacity)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1D260];
    do
    {
      CFArraySetValueAtIndex(v6, v7++, v8);
      CFIndex v9 = capacity;
    }
    while (v7 < capacity);
  }
  else
  {
    CFIndex v9 = 0;
  }
  CGDataProviderGetBytesInRanges(v4, v6, (uint64_t)v17, v9);
  if (capacity)
  {
    CFIndex v12 = 0;
    while (1)
    {
      ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v6, v12);
      CFTypeID v14 = CFGetTypeID(ValueAtIndex);
      BOOL v15 = v14 == CFDataGetTypeID();
      uint64_t v10 = v15;
      if (!v15) {
        break;
      }
      if (++v12 >= (unint64_t)capacity) {
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    uint64_t v10 = 1;
  }
  free(v17);
  CFRelease(v6);
  return v10;
}

uint64_t CGPDFDocumentGetLinearizedOutlineRange(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 32);
    if (v2 && (uint64_t v3 = *(void *)(v2 + 80)) != 0)
    {
      uint64_t v4 = *(unsigned int *)(v3 + 4);
      uint64_t v5 = *(unsigned int *)(v3 + 12);
      *a2 = v4;
      a2[1] = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDocumentGetLinearizedNamedDestinationRange(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 32);
    if (v2 && (uint64_t v3 = *(void *)(v2 + 88)) != 0)
    {
      uint64_t v4 = *(unsigned int *)(v3 + 4);
      uint64_t v5 = *(unsigned int *)(v3 + 12);
      *a2 = v4;
      a2[1] = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CGPDFDictionaryRef CGPDFDocumentGetDestination(CGPDFDictionaryRef result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = *((void *)result + 2);
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
LABEL_12:
      BOOL result = *(CGPDFDictionaryRef *)v4;
      if (!*(void *)v4) {
        return result;
      }
      CGPDFDictionaryRef value = 0;
      if (*(unsigned char *)(v4 + 8))
      {
        if (a2 && *(_DWORD *)(a2 + 8) == 6) {
          return CGPDFNameTreeGetValue(result, *(void *)(a2 + 32));
        }
        return 0;
      }
      if (a2 && *(_DWORD *)(a2 + 8) == 5)
      {
        if (CGPDFDictionaryGetObject(result, *(const char **)(a2 + 32), &value)) {
          return value;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 64));
    if (*(void *)(v3 + 24))
    {
LABEL_11:
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 64));
      uint64_t v4 = *(void *)(v3 + 24);
      if (!v4) {
        return 0;
      }
      goto LABEL_12;
    }
    CGPDFDictionaryRef v8 = 0;
    CGPDFDictionaryRef value = 0;
    uint64_t v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *(void *)uint64_t v5 = 0;
    catalog = pdf_document_get_catalog(**(void **)(v3 + 16));
    if (CGPDFDictionaryGetDictionary(catalog, "Names", &value))
    {
      if (CGPDFDictionaryGetDictionary(value, "Dests", &v8))
      {
        char v7 = 1;
LABEL_9:
        *(void *)uint64_t v5 = v8;
        v5[8] = v7;
      }
    }
    else if (CGPDFDictionaryGetDictionary(catalog, "Dests", &v8))
    {
      char v7 = 0;
      goto LABEL_9;
    }
    *(void *)(v3 + 24) = v5;
    goto LABEL_11;
  }
  return result;
}

const void *CGPDFDocumentGetProperty(uint64_t a1, const void *a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 32)) != 0) {
    return CGPropertiesGetProperty(v2, a2);
  }
  else {
    return 0;
  }
}

void CGPDFDocumentSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (!*(void *)(v5 + 32))
    {
      uint64_t v6 = (CFTypeRef *)CGPropertiesCreate();
      uint64_t v7 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v5 + 32), (unint64_t *)&v7, (unint64_t)v6, memory_order_relaxed, memory_order_relaxed);
      if (v7) {
        CGPropertiesRelease(v6);
      }
    }
    uint64_t v8 = *(void *)(v5 + 32);
    CGPropertiesSetProperty(v8, a2, a3);
  }
}

void CGPDFDocumentRemoveProperty(uint64_t a1, const void *a2)
{
  if (a1 && a2)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 32);
    if (v2) {
      CGPropertiesRemoveProperty(v2, a2);
    }
  }
}

void CGPDFDocumentSetDeviceGrayColorSpace(uint64_t a1, CGColorSpace *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(CGColorSpace **)(v2 + 40);
  if (v3 != a2)
  {
    CGColorSpaceRelease(v3);
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(v2 + 40) = a2;
  }
}

void CGPDFDocumentSetDeviceRGBColorSpace(uint64_t a1, CGColorSpace *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(CGColorSpace **)(v2 + 48);
  if (v3 != a2)
  {
    CGColorSpaceRelease(v3);
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(v2 + 48) = a2;
  }
}

void CGPDFDocumentSetDeviceCMYKColorSpace(uint64_t a1, CGColorSpace *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(CGColorSpace **)(v2 + 56);
  if (v3 != a2)
  {
    CGColorSpaceRelease(v3);
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(v2 + 56) = a2;
  }
}

uint64_t CGPDFDocumentAuthenticateUserPassword(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v2 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 40);
    if (v2)
    {
      size_t v4 = strlen(__s);
      uint64_t v5 = *(void *)(v2 + 16);
      return CGPDFSecurityHandlerAuthenticateUserPassword(v5, __s, v4);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t CGPDFDocumentAuthenticateOwnerPassword(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v2 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 40);
    if (v2)
    {
      size_t v4 = strlen(__s);
      uint64_t v5 = *(void *)(v2 + 16);
      return CGPDFSecurityHandlerAuthenticateOwnerPassword(v5, __s, v4);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

CGPDFAccessPermissions CGPDFDocumentGetAccessPermissions(CGPDFDocumentRef document)
{
  if (document)
  {
    uint64_t v1 = *(void *)(**(void **)(*((void *)document + 2) + 16) + 40);
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 16);
      if (v2) {
        uint64_t v3 = (unsigned int *)(v2 + 188);
      }
      else {
        uint64_t v3 = (unsigned int *)&CGPDFPermissionsNone;
      }
      unsigned int v4 = *v3;
    }
    else
    {
      unsigned int v4 = 4095;
    }
    int v5 = (v4 & 3) != 0;
    if ((v4 & 5) != 0) {
      v5 |= 2u;
    }
    int v6 = (v4 >> 4) & 4 | (16 * ((v4 >> 3) & 3)) | v5;
    if ((v4 & 0x80) != 0) {
      v6 |= 0xC0u;
    }
    LODWORD(document) = (v4 >> 2) & 0xC0 | (v4 >> 7) & 8 | v6;
  }
  return document;
}

uint64_t CGPDFDocumentGetRawPermissions(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 40);
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 16);
      if (v2) {
        return *(unsigned int *)(v2 + 16);
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

CFDataRef CGPDFDocumentCopyHashedOwnerPassword(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(**(void **)(*(void *)(a1 + 16) + 16) + 40);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(_DWORD **)(v1 + 16);
  if (!v2) {
    return 0;
  }
  int v5 = *v2;
  uint64_t v3 = (const UInt8 *)(v2 + 28);
  int v4 = v5;
  uint64_t v6 = 48;
  if ((v5 - 5) >= 2) {
    uint64_t v6 = 0;
  }
  if (v4 >= 5) {
    CFIndex v7 = v6;
  }
  else {
    CFIndex v7 = 32;
  }
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, v7);
}

CFDataRef CGPDFDocumentCopyHashedUserPassword(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(**(void **)(*(void *)(a1 + 16) + 16) + 40);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(int **)(v1 + 16);
  if (!v2) {
    return 0;
  }
  int v5 = *v2;
  uint64_t v3 = (const UInt8 *)v2 + 33;
  int v4 = v5;
  uint64_t v6 = 48;
  if ((v5 - 5) >= 2) {
    uint64_t v6 = 0;
  }
  if (v4 >= 5) {
    CFIndex v7 = v6;
  }
  else {
    CFIndex v7 = 32;
  }
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, v7);
}

CFDataRef CGPDFDocumentCopyEncryptionKey(CFDataRef result)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    BOOL result = *(CFDataRef *)(**(void **)(*((void *)result + 2) + 16) + 40);
    if (result)
    {
      CFIndex length = 0;
      DecryptionKeCGFloat y = CGPDFSecurityManagerGetDecryptionKey((uint64_t)result, bytes, &length);
      BOOL result = 0;
      if (DecryptionKey) {
        return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, length);
      }
    }
  }
  return result;
}

uint64_t CGPDFDocumentGetEncryptMetadata(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 40);
    if (v1)
    {
      BOOL result = *(void *)(v1 + 8);
      if (result)
      {
        CGPDFBoolean value = 0;
        BOOL v2 = !CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)result, "EncryptMetadata", &value);
        return value || v2;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDocumentGetEncryptionVersion(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(**(void **)(*(void *)(result + 16) + 16) + 40);
    if (v1) {
      return *(void *)(v1 + 48);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDocumentGetNumberOfObjects(uint64_t result)
{
  if (result) {
    return *(void *)(**(void **)(*(void *)(result + 16) + 16) + 160);
  }
  return result;
}

char *CGPDFDocumentGetObject(char *result, int a2, unsigned __int16 a3)
{
  if (result) {
    return pdf_xref_resolve(**(void **)(*((void *)result + 2) + 16), a2, a3);
  }
  return result;
}

uint64_t CGPDFDocumentGetURL(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

char *CGPDFDocumentPrintObject(char *result, int a2, unsigned __int16 a3, FILE *a4)
{
  if (result)
  {
    BOOL result = pdf_xref_resolve(**(void **)(*((void *)result + 2) + 16), a2, a3);
    if (result)
    {
      if (*((_DWORD *)result + 2) == 9)
      {
        uint64_t v5 = *((void *)result + 4);
        return (char *)stream_print(v5, a4, 0, 1);
      }
      else
      {
        return (char *)CGPDFObjectPrintWithIndent((uint64_t)result, a4, 0);
      }
    }
  }
  return result;
}

BOOL CGPDFDocumentIsTaggedPDF(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = CGPDFDocumentCopyTaggedContext(a1);
  if (!v1) {
    return 0;
  }
  BOOL v2 = (void **)v1[2];
  if (v2) {
    BOOL v3 = **v2 != 0;
  }
  else {
    BOOL v3 = 0;
  }
  CFRelease(v1);
  return v3;
}

CFTypeRef CGPDFDocumentCopyTaggedContext(uint64_t a1)
{
  BOOL v2 = (os_unfair_lock_s *)(a1 + 224);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 224));
  BOOL v3 = *(const void **)(a1 + 232);
  if (!v3 || (CFTypeRef v4 = CFRetain(v3)) == 0)
  {
    if (CGPDFTaggedContextGetTypeID(void)::onceToken != -1) {
      dispatch_once(&CGPDFTaggedContextGetTypeID(void)::onceToken, &__block_literal_global_54_14074);
    }
    _CFRuntimeCreateInstance();
    operator new();
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

void sub_184D5B6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x18532A2A0](v16, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t CGPDFDocumentIsSimpleSelectionEnabled()
{
  return 1;
}

uint64_t CGPDFDocumentIsLayoutWithCTLDEnabled()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    BOOL v1 = 0;
    return !get_BOOLean_property("CGLayoutWithCTLD", (const void *(*)(const char *))copy_local_domain_value, &v1)|| v1;
  }
  return result;
}

CGRect CGPDFDocumentGetMediaBox(CGPDFDocumentRef document, int page)
{
  if ((CGPDFDocumentGetMediaBox::warned & 1) == 0)
  {
    CGPDFDocumentGetMediaBox::warnedouble d = 1;
  }
  uint64_t v10 = CGPDFDocumentGetPage(document, page);

  return CGPDFPageGetBoxRect(v10, kCGPDFMediaBox);
}

CGRect CGPDFDocumentGetCropBox(CGPDFDocumentRef document, int page)
{
  if ((CGPDFDocumentGetCropBox::warned & 1) == 0)
  {
    CGPDFDocumentGetCropBox::warnedouble d = 1;
  }
  uint64_t v10 = CGPDFDocumentGetPage(document, page);

  return CGPDFPageGetBoxRect(v10, kCGPDFCropBox);
}

CGRect CGPDFDocumentGetBleedBox(CGPDFDocumentRef document, int page)
{
  if ((CGPDFDocumentGetBleedBox::warned & 1) == 0)
  {
    CGPDFDocumentGetBleedBox::warnedouble d = 1;
  }
  uint64_t v10 = CGPDFDocumentGetPage(document, page);

  return CGPDFPageGetBoxRect(v10, kCGPDFBleedBox);
}

CGRect CGPDFDocumentGetTrimBox(CGPDFDocumentRef document, int page)
{
  if ((CGPDFDocumentGetTrimBox::warned & 1) == 0)
  {
    CGPDFDocumentGetTrimBox::warnedouble d = 1;
  }
  uint64_t v10 = CGPDFDocumentGetPage(document, page);

  return CGPDFPageGetBoxRect(v10, kCGPDFTrimBox);
}

CGRect CGPDFDocumentGetArtBox(CGPDFDocumentRef document, int page)
{
  if ((CGPDFDocumentGetArtBox::warned & 1) == 0)
  {
    CGPDFDocumentGetArtBox::warnedouble d = 1;
  }
  uint64_t v10 = CGPDFDocumentGetPage(document, page);

  return CGPDFPageGetBoxRect(v10, kCGPDFArtBox);
}

int CGPDFDocumentGetRotationAngle(CGPDFDocumentRef document, int page)
{
  if ((CGPDFDocumentGetRotationAngle::warned & 1) == 0)
  {
    CGPDFDocumentGetRotationAngle::warnedouble d = 1;
  }
  uint64_t v10 = CGPDFDocumentGetPage(document, page);

  return CGPDFPageGetRotationAngle(v10);
}

CGPDFPageRef CGPDFDocumentGetPageForPageDictionary(CGPDFDocument *a1, uint64_t a2)
{
  PageNumberForPageDictionarCGFloat y = CGPDFDocumentGetPageNumberForPageDictionary((uint64_t)a1, a2);
  if (PageNumberForPageDictionary == -1) {
    return 0;
  }

  return CGPDFDocumentGetPage(a1, PageNumberForPageDictionary);
}

unint64_t CGPDFDocumentGetPageNumberForPageDictionary(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (v3 = *(void *)(a2 + 32), uint64_t v4 = *(void *)(a2 + 40), v3 | (unsigned __int16)v4)) {
    return CGPDFDocumentGetPageNumberForPageReference(a1, v3, v4);
  }
  else {
    return -1;
  }
}

unint64_t CGPDFDocumentGetPageNumberForPageReference(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v6 = (pthread_mutex_t *)(a1 + 128);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  if (!*(void *)(a1 + 192)
    || (unint64_t valuePtr = a3 | (unint64_t)(a2 << 36),
        CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr),
        CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 192), v7),
        CFRelease(v7),
        !Value)
    || (CFTypeID v9 = CFGetTypeID(Value), v9 != CFNumberGetTypeID()))
  {
    CGAnalyticsSendPDFDocumentGetNumberOfPagesEvent();
    number_of_pages = pdf_reader_get_number_of_pages(*(uint64_t **)(*(void *)(a1 + 16) + 16));
    uint64_t v12 = **(void **)(*(void *)(a1 + 16) + 16);
    if (*(void *)(v12 + 24))
    {
      uint64_t v13 = *(void *)(v12 + 32);
      if (!v13) {
        goto LABEL_23;
      }
      uint64_t v14 = *(void *)(v13 + 64);
      uint64_t v15 = *(void *)(v14 + 48);
      uint64_t v16 = *(void *)(v14 + 56);
      if (v15 == v16) {
        goto LABEL_23;
      }
      uint64_t v17 = v15;
      while (*(void *)(v17 + 56) != a2)
      {
        v17 += 64;
        if (v17 == v16) {
          goto LABEL_23;
        }
      }
      uint64_t v22 = (v17 - v15) >> 6;
      unint64_t v10 = v22 + 1;
      if (v22 == -1) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v18 = number_of_pages;
      if (!number_of_pages)
      {
LABEL_23:
        unint64_t v10 = -1;
LABEL_24:
        pthread_mutex_unlock(v6);
        return v10;
      }
      unint64_t v10 = 1;
      while (1)
      {
        page_dictionarCGFloat y = pdf_document_get_page_dictionary(*(void *)(*(void *)(a1 + 16) + 16), v10);
        if (page_dictionary)
        {
          uint64_t v21 = page_dictionary[4];
          uint64_t v20 = page_dictionary[5];
        }
        else
        {
          uint64_t v21 = 0;
          LOWORD(v20) = 0;
        }
        if (v21 | (unsigned __int16)v20 && v21 == a2 && (unsigned __int16)v20 == a3) {
          break;
        }
        if (++v10 > (unint64_t)v18) {
          goto LABEL_23;
        }
      }
    }
    if (v10 != -1)
    {
      CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (!*(void *)(a1 + 192)) {
        *(void *)(a1 + 192) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      unint64_t valuePtr = a3 | (unint64_t)(a2 << 36);
      CFNumberRef v25 = CFNumberCreate(v24, kCFNumberSInt64Type, &valuePtr);
      unint64_t valuePtr = v10;
      CFNumberRef v26 = CFNumberCreate(v24, kCFNumberSInt64Type, &valuePtr);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 192), v25, v26);
      CFRelease(v26);
      CFRelease(v25);
    }
    goto LABEL_24;
  }
  unint64_t valuePtr = 0;
  CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &valuePtr);
  pthread_mutex_unlock(v6);
  return valuePtr;
}

uint64_t CGPDFDocumentEnableTaggedStructureSerialization(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 120) = a2;
  }
  return result;
}

CGPDFDictionaryRef CGPDFDocumentGetPageBoxes(CGPDFDictionaryRef result, CGRect *a2)
{
  if (result && a2)
  {
    CGPDFDictionaryRef v3 = result;
    number_of_pages = pdf_reader_get_number_of_pages(*(uint64_t **)(*((void *)result + 2) + 16));
    uint64_t result = pdf_document_get_catalog(**(void **)(*((void *)v3 + 2) + 16));
    if (number_of_pages) {
      BOOL v5 = result == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      CGPDFDictionaryRef value = 0;
      uint64_t result = (CGPDFDictionaryRef)CGPDFDictionaryGetDictionary(result, "Pages", &value);
      if (result)
      {
        uint64_t v6 = 1;
        return (CGPDFDictionaryRef)parse_page_nodes((uint64_t)&v6, (unint64_t)number_of_pages, a2, value);
      }
    }
  }
  return result;
}

uint64_t parse_page_nodes(uint64_t result, unint64_t a2, CGRect *a3, CGPDFDictionary *a4)
{
  if (*(void *)result <= a2)
  {
    CFNumberRef v7 = (unint64_t *)result;
    CGPDFDictionaryRef value = 0;
    uint64_t result = CGPDFDictionaryGetName(a4, "Type", (const char **)&value);
    if (result)
    {
      uint64_t v8 = value;
      if (!strcmp(value, "Page"))
      {
        uint64_t v11 = &a3[5 * *v7];
        p_CGFloat x = &v11[-5].origin.x;
        uint64_t v13 = 0x7FFFFFFFFFFFFFBLL;
        do
        {
          uint64_t v14 = (_OWORD *)&v11[v13].origin.x;
          _OWORD *v14 = 0uLL;
          v14[1] = 0uLL;
          ++v13;
        }
        while (v13 * 32);
        CGPDFDictionaryGetRect(a4, "MediaBox", &v11[-5].origin.x);
        CGPDFDictionaryGetRect(a4, "CropBox", p_x + 4);
        CGPDFDictionaryGetRect(a4, "BleedBox", p_x + 8);
        CGPDFDictionaryGetRect(a4, "TrimBox", p_x + 12);
        uint64_t result = CGPDFDictionaryGetRect(a4, "ArtBox", p_x + 16);
        ++*v7;
      }
      else
      {
        uint64_t result = strcmp(v8, "Pages");
        if (!result)
        {
          arraCGFloat y = 0;
          uint64_t result = CGPDFDictionaryGetArray(a4, "Kids", &array);
          if (result)
          {
            if (array)
            {
              uint64_t v9 = *((void *)array + 2);
              if (v9)
              {
                for (size_t i = 0; i != v9; ++i)
                {
                  CGPDFDictionaryRef dict = 0;
                  uint64_t result = CGPDFArrayGetDictionary(array, i, &dict);
                  if (result)
                  {
                    uint64_t result = parse_page_nodes(v7, a2, a3, dict);
                    if (*v7 > a2) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__CFArray *CGPDFDocumentCopyIncrementalUpdatePositions(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = ***(void ***)(*(void *)(a1 + 16) + 16);
  CGPDFSourceSetPosition(v3, 0, v4, v5, v6, v7, v8, v9);
  while (v3)
  {
    if (*(unsigned char *)(v3 + 208)) {
      break;
    }
    uint64_t v31 = 0;
    if ((CGPDFSourceForwardSearch((void *)v3, "startxref", "\n\r", &v31) & 1) == 0) {
      break;
    }
    uint64_t v16 = v31;
    CGPDFSourceSetPosition(v3, v31 + 9, v10, v11, v12, v13, v14, v15);
    uint64_t v32 = 0;
    if (!read_integer((void *)v3, (unint64_t *)&v32, v17, v18, v19, v20, v21, v22)) {
      break;
    }
    if (v32 < 0) {
      break;
    }
    uint64_t v32 = 0;
    if ((CGPDFSourceForwardSearch((void *)v3, "%%EOF", 0, &v32) & 1) == 0) {
      break;
    }
    uint64_t v29 = v32;
    CGPDFSourceSetPosition(v3, v32 + 5, v23, v24, v25, v26, v27, v28);
    if (v29 - v16 - 9 <= 16) {
      CGCFArrayAppendInteger(Mutable, v29 + 5);
    }
  }
  return Mutable;
}

uint64_t LRUCache::print(LRUCache *this)
{
  putchar(91);
  uint64_t v2 = (LRUCache *)*((void *)this + 1);
  if (v2 != this)
  {
    unint64_t v3 = 1;
    do
    {
      uint64_t v4 = *((void *)v2 + 2);
      if (v4) {
        uint64_t v4 = *(void *)(*(void *)(v4 + 40) + 8);
      }
      printf("%ld", v4);
      if (v3 < *((void *)this + 2)) {
        putchar(32);
      }
      uint64_t v2 = (LRUCache *)*((void *)v2 + 1);
      ++v3;
    }
    while (v2 != this);
  }

  return puts("]");
}

CFDictionaryRef CGPDFDocumentGetOutline(CGPDFDocumentRef document)
{
  if (!document) {
    return 0;
  }
  uint64_t v2 = *(void *)(**(void **)(*((void *)document + 2) + 16) + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (!v3 || !*(unsigned char *)(v3 + 184)) {
      return 0;
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)document + 56));
  CFDictionaryRef v4 = (const __CFDictionary *)*((void *)document + 6);
  if (!v4)
  {
    __s1 = 0;
    CGPDFDictionaryRef value = 0;
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    catalog = pdf_document_get_catalog(**(void **)(*((void *)document + 2) + 16));
    if (CGPDFDictionaryGetDictionary(catalog, "Outlines", &value)
      && (!CGPDFDictionaryGetName(value, "Type", (const char **)&__s1) || !strcmp(__s1, "Outlines")))
    {
      CGPDFDictionaryRef dict = 0;
      if (CGPDFDictionaryGetDictionary(catalog, "Pages", &dict))
      {
        uint64_t v6 = dict;
        uint64_t v15 = 0;
        if (CGPDFDictionaryGetName(dict, "Type", (const char **)&v15) && !strcmp(v15, "Pages"))
        {
          CGPDFInteger v14 = 0;
          if (CGPDFDictionaryGetInteger(v6, "Count", &v14) && v14 >= 1)
          {
            uint64_t v8 = (CGPDFDictionary **)malloc_type_calloc(v14 + 1, 8uLL, 0x33BCE901uLL);
            __CFSetLastAllocationEventName();
            if (v8)
            {
              char *v8 = (CGPDFDictionary *)(v14 + 1);
              CGPDFDictionaryRef v13 = (CGPDFDictionaryRef)1;
              populatePageMap(v6, v8, (unint64_t *)&v13);
              CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
              CGPDFInteger v14 = (CGPDFInteger)Mutable;
              uint64_t v15 = (char *)@"Children";
              CFDictionaryRef v4 = CFDictionaryCreate(0, (const void **)&v15, (const void **)&v14, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CFRelease(Mutable);
              CGPDFDictionaryRef v13 = 0;
              if (CGPDFDictionaryGetDictionary(value, "First", &v13))
              {
                do
                  buildOutline(v13, Mutable, catalog, document);
                while (CGPDFDictionaryGetDictionary(v13, "Next", &v13));
              }
              free(v8);
              goto LABEL_6;
            }
          }
        }
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)document + 56));
    return 0;
  }
LABEL_6:
  pthread_mutex_unlock((pthread_mutex_t *)((char *)document + 56));
  return v4;
}

uint64_t populatePageMap(CGPDFDictionary *a1, CGPDFDictionary **a2, unint64_t *a3)
{
  CGPDFDictionaryRef value = 0;
  if (CGPDFDictionaryGetName(a1, "Type", (const char **)&value) || (uint64_t result = strcmp(value, "Pages"), !result))
  {
    arraCGFloat y = 0;
    uint64_t result = CGPDFDictionaryGetArray(a1, "Kids", &array);
    if (result)
    {
      if (array)
      {
        uint64_t v7 = *((void *)array + 2);
        if (v7)
        {
          for (size_t i = 0; i != v7; ++i)
          {
            CGPDFDictionaryRef dict = 0;
            uint64_t result = CGPDFArrayGetDictionary(array, i, &dict);
            if (result)
            {
              uint64_t result = CGPDFDictionaryGetName(dict, "Type", (const char **)&value);
              if (result)
              {
                uint64_t v9 = value;
                if (!strcmp(value, "Pages"))
                {
                  uint64_t result = populatePageMap(dict, a2, a3);
                }
                else
                {
                  uint64_t result = strcmp(v9, "Page");
                  if (!result)
                  {
                    unint64_t v10 = *a3;
                    if (*a3 >= (unint64_t)*a2) {
                      return result;
                    }
                    uint64_t v11 = dict;
                    *a3 = v10 + 1;
                    a2[v10] = v11;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void buildOutline(CGPDFDictionary *a1, __CFArray *a2, CGPDFDictionary *a3, CGPDFDocument *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  CGPDFStringRef value = 0;
  if (!CGPDFDictionaryGetString(a1, "Title", &value)) {
    return;
  }
  CGPDFDictionaryRef v39 = 0;
  CGPDFObjectRef v40 = 0;
  CGPDFStringRef v38 = 0;
  if (!CGPDFDictionaryGetObject(a1, "Dest", &v40) && !CGPDFDictionaryGetDictionary(a1, "A", &v39)) {
    return;
  }
  CGPDFObjectRef v8 = v40;
  if (!v40)
  {
    dict[0] = 0;
    if (!CGPDFDictionaryGetName(v39, "S", (const char **)dict)) {
      return;
    }
    CGPDFDictionaryRef v13 = (const char *)dict[0];
    if (!strcmp((const char *)dict[0], "GoTo"))
    {
      if (!CGPDFDictionaryGetObject(v39, "D", &v40)) {
        return;
      }
    }
    else if (strcmp(v13, "URI") || !CGPDFDictionaryGetString(v39, "URI", &v38))
    {
      return;
    }
    CGPDFObjectRef v8 = v40;
    if (!v40)
    {
      CGPDFStringRef v19 = v38;
      if (v38)
      {
        if (!*((void *)v38 + 3))
        {
          uint64_t v20 = (const UInt8 *)v38 + 80;
          goto LABEL_60;
        }
        decrypt_string((uint64_t)v38);
        uint64_t v20 = (const UInt8 *)v19 + 80;
        if (v38)
        {
          CGPDFStringRef v19 = v38;
LABEL_60:
          if (*((void *)v19 + 3)) {
            decrypt_string((uint64_t)v19);
          }
          CFIndex v26 = *((void *)v19 + 9);
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v20 = 0;
      }
      CFIndex v26 = 0;
LABEL_63:
      CFURLRef v27 = CFURLCreateWithBytes(0, v20, v26, 0x8000100u, 0);
      if (!v27) {
        return;
      }
      uint64_t v18 = v27;
      CFNumberRef v14 = 0;
      CFDictionaryRef DictionaryRepresentation = 0;
      int v17 = 1;
      goto LABEL_65;
    }
  }
  array[0] = 0;
  int v9 = *((_DWORD *)v8 + 2);
  if (v9 == 12) {
    int v10 = 3;
  }
  else {
    int v10 = *((_DWORD *)v8 + 2);
  }
  if (v10 == 6)
  {
    dict[0] = 0;
    CGPDFDictionaryRef v37 = 0;
    if (!CGPDFDictionaryGetDictionary(a3, "Names", dict)) {
      return;
    }
    if (!CGPDFDictionaryGetDictionary(dict[0], "Dests", &v37)) {
      return;
    }
    if (!v40) {
      return;
    }
    if (*((_DWORD *)v40 + 2) != 6) {
      return;
    }
    uint64_t v12 = nameTreeSearch(v37, *((CGPDFString **)v40 + 4));
    array[0] = v12;
    if (!v12) {
      return;
    }
  }
  else if (v10 == 5)
  {
    dict[0] = 0;
    if (!v8) {
      return;
    }
    if (v9 != 5) {
      return;
    }
    uint64_t v11 = (const char *)*((void *)v8 + 4);
    if (!CGPDFDictionaryGetDictionary(a3, "Dests", dict) || !CGPDFDictionaryGetArray(dict[0], v11, array)) {
      return;
    }
    uint64_t v12 = array[0];
  }
  else
  {
    if (!v8 || v9 != 7) {
      return;
    }
    uint64_t v12 = (CGPDFArray *)*((void *)v8 + 4);
    array[0] = v12;
  }
  __s1 = 0;
  CGPDFDictionaryRef v37 = 0;
  if (!CGPDFArrayGetDictionary(v12, 0, &v37)) {
    return;
  }
  if (!CGPDFArrayGetName(array[0], 1uLL, (const char **)&__s1)) {
    return;
  }
  unint64_t valuePtr = CGPDFDocumentGetPageNumberForPageDictionary((uint64_t)a4, (uint64_t)v37);
  if (!valuePtr) {
    return;
  }
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  uint64_t v15 = __s1;
  if (!strcmp(__s1, "FitR") && array[0] && *((void *)array[0] + 2) == 6)
  {
    uint64_t v21 = 0;
    *(_OWORD *)CGPDFDictionaryRef dict = 0u;
    *(_OWORD *)uint64_t v46 = 0u;
    while (CGPDFArrayGetNumber(array[0], 0, (CGPDFReal *)&dict[v21]))
    {
      if (++v21 == 4)
      {
        CGPDFDictionaryRef v22 = dict[0];
        CGPDFDictionaryRef v23 = dict[1];
        double v24 = v46[0] - *(double *)dict;
        double v25 = v46[1] - *(double *)&dict[1];
        goto LABEL_58;
      }
    }
    goto LABEL_34;
  }
  if (strcmp(v15, "XYZ") || !array[0] || *((void *)array[0] + 2) != 5) {
    goto LABEL_34;
  }
  dict[0] = 0;
  uint64_t v34 = 0;
  CFDictionaryRef DictionaryRepresentation = 0;
  if (!CGPDFArrayGetNumber(array[0], 2uLL, (CGPDFReal *)dict)) {
    goto LABEL_35;
  }
  if (!CGPDFArrayGetNumber(array[0], 3uLL, (CGPDFReal *)&v34))
  {
LABEL_34:
    CFDictionaryRef DictionaryRepresentation = 0;
    goto LABEL_35;
  }
  CGPDFDictionaryRef v22 = dict[0];
  CGPDFDictionaryRef v23 = v34;
  double v24 = 0.0;
  double v25 = 0.0;
LABEL_58:
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)&v22);
LABEL_35:
  if (v14)
  {
    int v17 = 0;
    uint64_t v18 = 0;
LABEL_65:
    uint64_t v28 = (CGPDFArray *)CGPDFStringCopyTextString(value);
    CGPDFDictionaryRef v37 = 0;
    DictionarCGFloat y = CGPDFDictionaryGetDictionary(a1, "First", &v37);
    CFMutableArrayRef Mutable = 0;
    if (Dictionary) {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    }
    *(_OWORD *)uint64_t v46 = 0uLL;
    CFDictionaryRef v43 = 0;
    uint64_t v44 = 0;
    dict[0] = (CGPDFDictionaryRef)@"Title";
    dict[1] = (CGPDFDictionaryRef)@"Destination";
    if (v17) {
      uint64_t v31 = v18;
    }
    else {
      uint64_t v31 = v14;
    }
    array[0] = v28;
    array[1] = v31;
    if (DictionaryRepresentation)
    {
      *(void *)&v46[0] = @"DestinationRect";
      CFDictionaryRef v43 = DictionaryRepresentation;
      CFIndex v32 = 3;
    }
    else
    {
      CFIndex v32 = 2;
    }
    if (Mutable)
    {
      dict[v32] = (CGPDFDictionaryRef)@"Children";
      array[v32++] = Mutable;
    }
    CFDictionaryRef v33 = CFDictionaryCreate(0, (const void **)dict, (const void **)array, v32, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayAppendValue(a2, v33);
    CFRelease(v28);
    if ((v17 & 1) == 0) {
      CFRelease(v14);
    }
    if (DictionaryRepresentation) {
      CFRelease(DictionaryRepresentation);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v37)
    {
      do
        buildOutline(v37, Mutable, a3, a4);
      while (CGPDFDictionaryGetDictionary(v37, "Next", &v37));
    }
    return;
  }
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
}

CGPDFArrayRef nameTreeSearch(CGPDFDictionary *a1, CGPDFString *a2)
{
  if (a2)
  {
    if (*((void *)a2 + 3)) {
      decrypt_string((uint64_t)a2);
    }
    CFDictionaryRef v4 = (char *)a2 + 80;
  }
  else
  {
    CFDictionaryRef v4 = 0;
  }
  CGPDFArrayRef value = 0;
  if (CGPDFDictionaryGetArray(a1, "Limits", &value) && value && *((void *)value + 2) == 2)
  {
    CGPDFStringRef v16 = 0;
    arraCGFloat y = 0;
    if (!CGPDFArrayGetString(value, 0, &array) || !CGPDFArrayGetString(value, 1uLL, &v16)) {
      return 0;
    }
    uint64_t v5 = (const char *)array;
    if (array)
    {
      if (*((void *)array + 3)) {
        decrypt_string((uint64_t)array);
      }
      v5 += 80;
    }
    uint64_t v6 = (const char *)v16;
    if (v16)
    {
      if (*((void *)v16 + 3)) {
        decrypt_string((uint64_t)v16);
      }
      v6 += 80;
    }
    if (!v5 || strcmp(v4, v5) < 0 || !v6 || strcmp(v4, v6) >= 1) {
      return 0;
    }
  }
  arraCGFloat y = 0;
  if (!CGPDFDictionaryGetArray(a1, "Names", &array) || !array || (size_t v7 = *((void *)array + 2)) == 0)
  {
LABEL_34:
    CGPDFStringRef v16 = 0;
    BOOL v10 = CGPDFDictionaryGetArray(a1, "Kids", &v16);
    CGPDFArrayRef result = 0;
    if (!v10) {
      return result;
    }
    if (v16)
    {
      uint64_t v12 = *((void *)v16 + 2);
      if (v12)
      {
        size_t v13 = 0;
        while (1)
        {
          CGPDFDictionaryRef dict = 0;
          if (CGPDFArrayGetDictionary(v16, v13, &dict))
          {
            CGPDFArrayRef result = (CGPDFArrayRef)nameTreeSearch(dict, a2);
            if (result) {
              break;
            }
          }
          if (v12 == ++v13) {
            return 0;
          }
        }
        return result;
      }
    }
    return 0;
  }
  size_t v8 = 0;
  while (1)
  {
    CGPDFDictionaryRef dict = 0;
    CGPDFStringRef v16 = 0;
    CGPDFArrayRef v14 = 0;
    if (CGPDFArrayGetString(array, v8, &v16)
      && CGPDFArrayGetDictionary(array, v8 + 1, &dict)
      && CGPDFDictionaryGetArray(dict, "D", &v14))
    {
      CGPDFStringRef v9 = v16;
      if (*((void *)v16 + 3)) {
        decrypt_string((uint64_t)v16);
      }
      if (!strcmp(v4, (const char *)v9 + 80)) {
        return v14;
      }
    }
    v8 += 2;
    if (v8 >= v7) {
      goto LABEL_34;
    }
  }
}

CGDataProvider *CGPDFDocumentAppendChanges(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1 && *(void *)(**(void **)(*(void *)(a1 + 16) + 16) + 40)) {
    return 0;
  }
  CFURLRef v2 = *(const __CFURL **)(a1 + 40);
  if (!v2 || !CFURLGetFileSystemRepresentation(v2, 1u, (UInt8 *)buffer, 1024)) {
    return 0;
  }
  if (_xpc_runtime_is_app_sandboxed())
  {
    uint64_t v3 = (std::__fs::filesystem::path *)_amkrtemp();
    if (v3) {
      goto LABEL_17;
    }
    int v4 = open((const char *)buffer, 512, 448);
    if ((v4 & 0x80000000) == 0)
    {
      close(v4);
      uint64_t v3 = (std::__fs::filesystem::path *)_amkrtemp();
      if (v3) {
        goto LABEL_17;
      }
    }
    __error();
    CGPostError((uint64_t)" _amkrtemp(\"%s\") failed.  errno = %d\n", v5, v6, v7, v8, v9, v10, v11, (char)buffer);
  }
  size_t v12 = strlen((const char *)buffer);
  uint64_t v3 = (std::__fs::filesystem::path *)malloc_type_malloc(v12 + 7, 0xDEE86E7uLL);
  strncpy((char *)v3, (const char *)buffer, v12 + 1);
  if (_xpc_runtime_is_app_sandboxed())
  {
    if (!v3) {
      return 0;
    }
  }
  else
  {
    CGPDFArrayRef v14 = strrchr((char *)v3, 47);
    if (v14) {
      uint64_t v15 = v14 + 1;
    }
    else {
      uint64_t v15 = (char *)v3;
    }
    size_t v16 = strlen(v15);
    memmove(v15 + 1, v15, v16 + 1);
    char *v15 = 46;
    strcat((char *)v3, "-XXXX");
    mktemp((char *)v3);
  }
LABEL_17:
  int v17 = CGDataConsumerCreateWithFilename((const char *)v3);
  uint64_t v18 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  size_t v13 = CGPDFAppenderWrite(*(void *)(a1 + 216), (uint64_t)v17);
  CFRelease(v17);
  os_unfair_lock_unlock(v18);
  if (v13)
  {
    rename(v3, buffer, v19);
    size_t v13 = (CGDataProvider *)(v20 == 0);
  }
  unlink((const char *)v3);
  free(v3);
  return v13;
}

CGDataProvider *CGPDFDocumentCopyToConsumerWithChanges(uint64_t a1, uint64_t a2)
{
  if (a1 && *(void *)(**(void **)(*(void *)(a1 + 16) + 16) + 40)) {
    return 0;
  }
  else {
    return CGPDFAppenderWrite(*(void *)(a1 + 216), a2);
  }
}

void CGPDFDocumentAppendPage(uint64_t a1, CGPDFPage *a2)
{
  int v4 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  theArraCGFloat y = 0;
  size_t v12 = 0;
  AppendModeGetMutablePages((CGPDFDocument *)a1, &v12, &theArray);
  uint64_t PageObject = CGPDFAppenderCreatePageObject(*(void *)(a1 + 216), a2);
  uint64_t v7 = (const void *)CGPDFReferenceCreate(PageObject, v6);
  CFArrayRef v8 = theArray;
  CFArrayAppendValue(theArray, v7);
  CFRelease(v7);
  uint64_t v9 = v12;
  int Count = CFArrayGetCount(v8);
  CGPDFAppenderDictionarySetInt32(v9, "Count", Count);

  os_unfair_lock_unlock(v4);
}

void AppendModeGetMutablePages(CGPDFDocument *a1, __CFDictionary **a2, __CFArray **a3)
{
  catalog = pdf_document_get_catalog(**(void **)(*((void *)a1 + 2) + 16));
  if (catalog)
  {
    CGPDFDictionaryRef value = 0;
    if (CGPDFDictionaryGetDictionary(catalog, "Pages", &value))
    {
      if (value)
      {
        uint64_t v7 = *((void *)value + 4);
        uint64_t v8 = *((void *)value + 5);
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
      }
      *a2 = (__CFDictionary *)CGPDFAppenderGetMutableObject(*((char **)a1 + 27), v7, v8);
      CGPDFArrayRef v36 = 0;
      if (CGPDFDictionaryGetArray(value, "Kids", &v36))
      {
        if (v36)
        {
          uint64_t v9 = *((void *)v36 + 5);
          uint64_t v10 = *((void *)v36 + 6);
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v10 = 0;
        }
        if (v9 | (unsigned __int16)v10)
        {
          uint64_t MutableObject = (__CFArray *)CGPDFAppenderGetMutableObject(*((char **)a1 + 27), v9, v10);
        }
        else
        {
          CFDictionaryRef v11 = *a2;
          size_t v12 = (const void *)CGPDFNameCreate("Kids");
          uint64_t MutableObject = (__CFArray *)CFDictionaryGetValue(v11, v12);
          CFRelease(v12);
        }
        *a3 = MutableObject;
        CFIndex Count = CFArrayGetCount(MutableObject);
        if (Count >= 1)
        {
          CFIndex v15 = Count;
          CFIndex v16 = 0;
          while (1)
          {
            ValueAtIndeCGFloat x = (unsigned __int16 *)CFArrayGetValueAtIndex(MutableObject, v16);
            CFTypeID v18 = CFGetTypeID(ValueAtIndex);
            if (CGPDFReferenceTypeID_onceToken != -1) {
              dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
            }
            if (v18 == CGPDFReferenceTypeID_id)
            {
              if (ValueAtIndex)
              {
                uint64_t v19 = *((void *)ValueAtIndex + 2);
                uint64_t v20 = ValueAtIndex[12];
              }
              else
              {
                LODWORD(v19) = 0;
                uint64_t v20 = 0;
              }
              uint64_t v21 = pdf_xref_resolve(**(void **)(*((void *)a1 + 2) + 16), (int)v19, v20);
              if (v21)
              {
                if (*((_DWORD *)v21 + 2) == 8)
                {
                  CGPDFDictionaryRef v22 = (CGPDFDictionary *)*((void *)v21 + 4);
                  __s1 = 0;
                  if (!CGPDFDictionaryGetName(v22, "Type", (const char **)&__s1) || strcmp(__s1, "Page")) {
                    break;
                  }
                }
              }
            }
            if (v15 == ++v16) {
              return;
            }
          }
          CFIndex v23 = CFArrayGetCount(MutableObject);
          double v24 = pdf_document_get_catalog(**(void **)(*((void *)a1 + 2) + 16));
          __s1 = 0;
          if (CGPDFDictionaryGetDictionary(v24, "Pages", (CGPDFDictionaryRef *)&__s1))
          {
            CFMutableArrayRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
            AppendModeExtractPagesTree((CGPDFDocument *)__s1, MutableObject, Mutable, v26);
            CFRelease(Mutable);
          }
          if (v23 >= 1)
          {
            do
            {
              CFArrayRemoveValueAtIndex(MutableObject, 0);
              --v23;
            }
            while (v23);
          }
          if (__s1)
          {
            uint64_t v27 = *((void *)__s1 + 4);
            uint64_t v28 = *((void *)__s1 + 5);
          }
          else
          {
            uint64_t v27 = 0;
            uint64_t v28 = 0;
          }
          uint64_t v29 = (const void *)CGPDFReferenceCreate(v27, v28);
          for (CFIndex i = 0; i < CFArrayGetCount(MutableObject); ++i)
          {
            uint64_t v31 = CFArrayGetValueAtIndex(MutableObject, i);
            CFTypeID v32 = CFGetTypeID(v31);
            if (CGPDFReferenceTypeID_onceToken != -1) {
              dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_19979);
            }
            if (v32 == CGPDFReferenceTypeID_id)
            {
              if (v31)
              {
                uint64_t v33 = v31[2];
                uint64_t v34 = v31[3];
              }
              else
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
              }
              uint64_t v35 = CGPDFAppenderGetMutableObject(*((char **)a1 + 27), v33, v34);
              CGPDFAppenderDictionarySetValue((__CFDictionary *)v35, "Parent", v29);
            }
          }
        }
      }
      else
      {
        pdf_error("Error: Failed to retrieve /Kids from pages dictionary");
      }
    }
    else
    {
      pdf_error("Error: Failed to retrieve /Pages from document catalog for append-mode");
    }
  }
  else
  {
    pdf_error("Error: Failed to retrieve document catalog for append-mode");
  }
}

void AppendModeExtractPagesTree(CGPDFDocument *a1, CGPDFDictionary *a2, __CFArray *a3, __CFSet *a4)
{
  uint64_t v6 = a1;
  if (a1)
  {
    a1 = (CGPDFDocument *)*((void *)a1 + 4);
    uint64_t v7 = *((void *)v6 + 5);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (const void *)CGPDFReferenceCreate((uint64_t)a1, v7);
  if (CFSetContainsValue(a3, v8))
  {
    CFRelease(v8);
  }
  else
  {
    CFSetAddValue(a3, v8);
    CFRelease(v8);
    CGPDFArrayRef value = 0;
    if (CGPDFDictionaryGetArray(v6, "Kids", &value))
    {
      if (value)
      {
        uint64_t v9 = *((void *)value + 2);
        if (v9)
        {
          for (size_t i = 0; i != v9; ++i)
          {
            CGPDFDictionaryRef dict = 0;
            if (CGPDFArrayGetDictionary(value, i, &dict))
            {
              __s1 = 0;
              if (CGPDFDictionaryGetName(dict, "Type", (const char **)&__s1))
              {
                CFDictionaryRef v11 = __s1;
                if (!strcmp(__s1, "Page"))
                {
                  if (dict)
                  {
                    uint64_t v13 = *((void *)dict + 4);
                    uint64_t v14 = *((void *)dict + 5);
                  }
                  else
                  {
                    uint64_t v13 = 0;
                    uint64_t v14 = 0;
                  }
                  CFIndex v15 = (const void *)CGPDFReferenceCreate(v13, v14);
                  CFArrayAppendValue(a2, v15);
                  CFRelease(v15);
                }
                else if (!strcmp(v11, "Pages"))
                {
                  AppendModeExtractPagesTree(dict, a2, a3, v12);
                }
              }
            }
          }
        }
      }
    }
  }
}

void CGPDFDocumentInsertPageAtIndex(uint64_t a1, CGPDFPage *a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  theArraCGFloat y = 0;
  int v17 = 0;
  AppendModeGetMutablePages((CGPDFDocument *)a1, &v17, &theArray);
  uint64_t v7 = theArray;
  CFIndex Count = CFArrayGetCount(theArray);
  unint64_t v9 = a3 - 1;
  if (v9 < Count + 1)
  {
    unint64_t v10 = Count;
    uint64_t PageObject = CGPDFAppenderCreatePageObject(*(void *)(a1 + 216), a2);
    uint64_t v13 = (const void *)CGPDFReferenceCreate(PageObject, v12);
    if (v9 >= v10) {
      CFArrayAppendValue(v7, v13);
    }
    else {
      CFArrayInsertValueAtIndex(v7, v9, v13);
    }
    CFRelease(v13);
    uint64_t v14 = v17;
    int v15 = CFArrayGetCount(v7);
    CGPDFAppenderDictionarySetInt32(v14, "Count", v15);
  }

  os_unfair_lock_unlock(v6);
}

void CGPDFDocumentRemovePageAtIndex(os_unfair_lock_s *a1, CFIndex a2)
{
  int v4 = a1 + 53;
  os_unfair_lock_lock(a1 + 53);
  unint64_t v10 = 0;
  CFDictionaryRef v11 = 0;
  AppendModeGetMutablePages((CGPDFDocument *)a1, &v11, &v10);
  uint64_t v6 = v10;
  uint64_t v5 = v11;
  if (v11) {
    BOOL v7 = v10 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  BOOL v8 = v7 || a2 == 0;
  if (!v8 && CFArrayGetCount(v10) >= a2)
  {
    CFArrayRemoveValueAtIndex(v6, a2 - 1);
    int Count = CFArrayGetCount(v6);
    CGPDFAppenderDictionarySetInt32(v5, "Count", Count);
  }

  os_unfair_lock_unlock(v4);
}

void CGPDFDocumentExchangePagesAtIndices(uint64_t a1, unint64_t a2, unint64_t a3)
{
  number_of_pages = pdf_reader_get_number_of_pages(*(uint64_t **)(*(void *)(a1 + 16) + 16));
  if (a2 && a2 != a3 && (unint64_t)number_of_pages >= a2 && a3 - 1 < (unint64_t)number_of_pages)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
    CFDictionaryRef v11 = 0;
    uint64_t v12 = 0;
    AppendModeGetMutablePages((CGPDFDocument *)a1, &v12, &v11);
    BOOL v8 = v11;
    KidsArrayPageIndeCGFloat x = AppendModeGetKidsArrayPageIndex((CGPDFDocument *)a1, v11, a2);
    CFIndex v10 = AppendModeGetKidsArrayPageIndex((CGPDFDocument *)a1, v8, a3);
    if ((KidsArrayPageIndex & 0x8000000000000000) == 0 && (v10 & 0x8000000000000000) == 0) {
      CFArrayExchangeValuesAtIndices(v8, KidsArrayPageIndex, v10);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 212));
  }
}

CFIndex AppendModeGetKidsArrayPageIndex(CGPDFDocument *a1, __CFArray *a2, unint64_t a3)
{
  if (!a1) {
    return -1;
  }
  page_dictionarCGFloat y = pdf_document_get_page_dictionary(*(void *)(*((void *)a1 + 2) + 16), a3);
  if (!page_dictionary) {
    return -1;
  }
  uint64_t v5 = page_dictionary;
  uint64_t v6 = page_dictionary[4];
  if (!(v6 | (unsigned __int16)v5[5])) {
    return -1;
  }
  unint64_t v9 = (const void *)CGPDFReferenceCreate(v6, v5[5]);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
LABEL_10:
    CFIndex v7 = -1;
  }
  else
  {
    CFIndex v11 = Count;
    CFIndex v7 = 0;
    while (1)
    {
      ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(a2, v7);
      if (CFEqual(ValueAtIndex, v9)) {
        break;
      }
      if (v11 == ++v7) {
        goto LABEL_10;
      }
    }
  }
  CFRelease(v9);
  return v7;
}

void CGPDFDocumentAppendMetadata(uint64_t a1, const __CFData *a2)
{
  int v4 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  uint64_t v5 = *(void *)(a1 + 216);
  if (v5)
  {
    CFDataRef v6 = *(const __CFData **)(v5 + 24);
    if (v6 != a2)
    {
      if (v6) {
        CFRelease(v6);
      }
      if (a2) {
        MutableCopCGFloat y = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
      }
      else {
        MutableCopCGFloat y = 0;
      }
      *(void *)(v5 + 24) = MutableCopy;
    }
  }

  os_unfair_lock_unlock(v4);
}

void CGPDFDocumentAppendDocumentInfo(uint64_t a1, const void *a2)
{
  int v4 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  uint64_t v5 = *(void *)(a1 + 216);
  if (v5) {
    BOOL v6 = a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    CFIndex v7 = *(const void **)(v5 + 32);
    if (v7 != a2)
    {
      if (v7) {
        CFRelease(v7);
      }
      *(void *)(v5 + 32) = a2;
      CFRetain(a2);
    }
  }

  os_unfair_lock_unlock(v4);
}

CGDataConsumerRef CGDataConsumerCreate(void *info, const CGDataConsumerCallbacks *cbks)
{
  if (!cbks) {
    return 0;
  }
  if (_block_invoke_once_1409 != -1) {
    dispatch_once(&_block_invoke_once_1409, &__block_literal_global_8_1410);
  }
  CGDataConsumerRef result = (CGDataConsumerRef)CGTypeCreateInstance(CGDataConsumerGetTypeID_data_consumer_type_id, 96, v2, v3, v4, v5, v6, v7);
  if (result)
  {
    *((void *)result + 2) = info;
    *(_OWORD *)((char *)result + 24) = 0u;
    *(_OWORD *)((char *)result + 40) = 0u;
    *((unsigned char *)result + 56) = 0;
    CGDataConsumerPutBytesCallback putBytes = cbks->putBytes;
    if (cbks->putBytes == (CGDataConsumerPutBytesCallback)1)
    {
      CGDataConsumerCallbacks v12 = *cbks;
      CGDataConsumerCallbacks v13 = cbks[2];
      *((CGDataConsumerCallbacks *)result + 5) = cbks[1];
      *((CGDataConsumerCallbacks *)result + 6) = v13;
      *((CGDataConsumerCallbacks *)result + 4) = v12;
    }
    else
    {
      *((void *)result + 8) = 0;
      if (putBytes)
      {
        *((void *)result + 9) = putBytes;
        *((void *)result + 11) = 0;
        *((void *)result + 12) = 0;
        *((void *)result + 10) = 0;
        *((void *)result + 13) = cbks->releaseConsumer;
      }
      else
      {
        *(CGDataConsumerCallbacks *)((char *)result + 72) = *(CGDataConsumerCallbacks *)&cbks->releaseConsumer;
        *((void *)result + 11) = 0;
        *((CGDataConsumerCallbacks *)result + 6) = *(const CGDataConsumerCallbacks *)((char *)cbks + 24);
      }
    }
  }
  return result;
}

uint64_t __CGDataConsumerGetTypeID_block_invoke_2()
{
  uint64_t result = __CGTypeRegisterInternal(CGDataConsumerGetTypeID_class);
  CGDataConsumerGetTypeID_data_consumer_type_idouble d = result;
  return result;
}

void data_consumer_reclaim(uint64_t a1)
{
  CGDataConsumerClose(a1);
  uint64_t v2 = *(void (**)(void))(a1 + 104);
  if (v2)
  {
    v2(*(void *)(a1 + 16));
    *(void *)(a1 + 104) = 0;
  }
  free(*(void **)(a1 + 24));
  *(void *)(a1 + 24) = 0;
}

uint64_t CGDataConsumerClose(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 56))
    {
      uint64_t v2 = *(uint64_t (**)(void))(result + 96);
      if (v2)
      {
        uint64_t v3 = *(void (**)(void))(result + 80);
        if (v3)
        {
          v3(*(void *)(result + 16));
          uint64_t v2 = *(uint64_t (**)(void))(v1 + 96);
        }
        uint64_t result = v2(*(void *)(v1 + 16));
        *(unsigned char *)(v1 + 56) = 1;
      }
    }
  }
  return result;
}

CFStringRef data_consumer_copy_debug_description(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CGDataConsumer %p>", a1);
}

CFStringRef data_consumer_copy_format_description(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<CGDataConsumer %p>", a1);
}

CFTypeID CGDataConsumerGetTypeID(void)
{
  if (_block_invoke_once_1409 != -1) {
    dispatch_once(&_block_invoke_once_1409, &__block_literal_global_8_1410);
  }
  return CGDataConsumerGetTypeID_data_consumer_type_id;
}

const char *CGDataConsumerCreateWithFilename(const char *result)
{
  if (result)
  {
    uint64_t v1 = fopen(result, "wb");
    if (v1)
    {
      cbks.CGDataConsumerPutBytesCallback putBytes = (CGDataConsumerPutBytesCallback)1;
      cbks.releaseConsumer = (CGDataConsumerReleaseInfoCallback)file_put_bytes;
      CFIndex v11 = file_flush_bytes;
      CGDataConsumerCallbacks v12 = file_set_position;
      CGDataConsumerCallbacks v13 = file_close;
      uint64_t v14 = 0;
      return (const char *)CGDataConsumerCreate(v1, &cbks);
    }
    else
    {
      CFAllocatorRef v2 = __error();
      strerror(*v2);
      return 0;
    }
  }
  return result;
}

void file_close(FILE *a1)
{
  if (fclose(a1))
  {
    uint64_t v1 = __error();
    strerror(*v1);
    CGPostError((uint64_t)"CGDataConsumer(%s): fclose failed: %s.", v2, v3, v4, v5, v6, v7, v8, (char)"file_close");
  }
}

BOOL file_set_position(FILE *a1, uint64_t a2)
{
  int v2 = fseek(a1, a2, 0);
  if (v2)
  {
    uint64_t v3 = __error();
    strerror(*v3);
    CGPostError((uint64_t)"CGDataConsumer(%s): fseek failed: %s.", v4, v5, v6, v7, v8, v9, v10, (char)"file_set_position");
  }
  return v2 == 0;
}

void file_flush_bytes(FILE *a1)
{
  if (fflush(a1))
  {
    uint64_t v1 = __error();
    strerror(*v1);
    CGPostError((uint64_t)"CGDataConsumer(%s): fflush failed: %s.", v2, v3, v4, v5, v6, v7, v8, (char)"file_flush_bytes");
  }
}

size_t file_put_bytes(FILE *__stream, void *__ptr, size_t a3)
{
  return fwrite(__ptr, 1uLL, a3, __stream);
}

CGDataConsumerRef CGDataConsumerCreateWithFile(CGDataConsumerRef result)
{
  if (result)
  {
    v1.CGDataConsumerPutBytesCallback putBytes = (CGDataConsumerPutBytesCallback)1;
    v1.releaseConsumer = (CGDataConsumerReleaseInfoCallback)file_put_bytes;
    uint64_t v2 = file_flush_bytes;
    uint64_t v3 = file_set_position;
    uint64_t v4 = file_close;
    uint64_t v5 = 0;
    return CGDataConsumerCreate(result, &v1);
  }
  return result;
}

CGDataConsumerRef CGDataConsumerCreateWithURL(CGDataConsumerRef url)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (url)
  {
    CFURLRef v1 = url;
    CFStringRef v2 = CFURLCopyScheme(url);
    if (v2 && (v3 = v2, CFComparisonResult v4 = CFStringCompare(v2, @"file", 0), CFRelease(v3), v4 == kCFCompareEqualTo))
    {
      if (CFURLGetFileSystemRepresentation(v1, 1u, (UInt8 *)&cbks, 1025)) {
        return (CGDataConsumerRef)CGDataConsumerCreateWithFilename((const char *)&cbks);
      }
      CGPostError((uint64_t)"%s: failed to get file system representation of url.", v7, v8, v9, v10, v11, v12, v13, (char)"CGDataConsumerCreateWithURL");
    }
    else
    {
      uint64_t v5 = malloc_type_malloc(0x18uLL, 0x2062DE7BuLL);
      CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
      v5[1] = Mutable;
      if (Mutable)
      {
        *uint64_t v5 = CFRetain(v1);
        v5[2] = 0;
        cbks.CGDataConsumerPutBytesCallback putBytes = (CGDataConsumerPutBytesCallback)1;
        cbks.releaseConsumer = (CGDataConsumerReleaseInfoCallback)url_put_bytes;
        uint64_t v15 = 0;
        CFIndex v16 = url_set_position;
        int v17 = url_close;
        uint64_t v18 = 0;
        return CGDataConsumerCreate(v5, &cbks);
      }
      free(v5);
    }
    return 0;
  }
  return url;
}

void url_close(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFURLRef v9 = (const __CFURL *)*a1;
  if (!*a1) {
    goto LABEL_19;
  }
  CFTypeRef v10 = a1[1];
  CFTypeID v11 = CFGetTypeID(*a1);
  CFTypeID v12 = CFURLGetTypeID();
  if (!v10 || v11 != v12) {
    goto LABEL_19;
  }
  CFTypeID v14 = CFGetTypeID(v10);
  if (v14 != CFDataGetTypeID() || CFDataGetLength((CFDataRef)v10) < 1) {
    goto LABEL_19;
  }
  int v15 = CGCFURLGetType(v9);
  if (v15 != 2)
  {
    if (v15 == 1)
    {
      CFIndex v16 = CFWriteStreamCreateWithFTPURL(0, v9);
      if (v16)
      {
        int v17 = v16;
        if (CFWriteStreamOpen(v16) == 1)
        {
          CFIndex Length = CFDataGetLength((CFDataRef)v10);
          uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)v10);
          CFIndex v20 = CFWriteStreamWrite(v17, BytePtr, Length);
          CFWriteStreamClose(v17);
          CFRelease(v17);
          if (v20 == Length) {
            goto LABEL_20;
          }
        }
        else
        {
          CFRelease(v17);
        }
      }
    }
LABEL_19:
    CGPostError((uint64_t)"CGDataConsumer(%s): write failed.", a2, a3, a4, a5, a6, a7, a8, (char)"url_close");
    goto LABEL_20;
  }
  CFAllocatorRef v21 = CFGetAllocator(v9);
  Request = CFHTTPMessageCreateRequest(v21, @"PUT", v9, (CFStringRef)*MEMORY[0x1E4F18F88]);
  CFIndex v23 = CFDataGetLength((CFDataRef)v10);
  CFStringRef v24 = CFStringCreateWithFormat(v21, 0, @"%ld", v23);
  CFHTTPMessageSetHeaderFieldValue(Request, @"Content-Length", v24);
  CFRelease(v24);
  double v25 = http_message_send_request(Request);
  CFRelease(Request);
  if (!v25) {
    goto LABEL_19;
  }
  CFIndex ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(v25);
  CFRelease(v25);
  if ((unint64_t)(ResponseStatusCode - 200) >= 0x64) {
    goto LABEL_19;
  }
LABEL_20:
  CFRelease(a1[1]);
  CFRelease(*a1);

  free(a1);
}

BOOL url_set_position(uint64_t a1, CFIndex a2)
{
  CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 8));
  if (Length >= a2) {
    *(void *)(a1 + 16) = a2;
  }
  return Length >= a2;
}

unint64_t url_put_bytes(uint64_t a1, const UInt8 *a2, unint64_t a3)
{
  CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 8));
  v7.location = *(void *)(a1 + 16);
  unint64_t v8 = Length - v7.location;
  if (Length <= v7.location)
  {
    CFTypeRef v10 = *(__CFData **)(a1 + 8);
    CFTypeID v11 = a2;
    CFIndex v12 = a3;
    goto LABEL_8;
  }
  if (v8 >= a3) {
    CFIndex v9 = a3;
  }
  else {
    CFIndex v9 = Length - v7.location;
  }
  v7.CFIndex length = v9;
  CFDataReplaceBytes(*(CFMutableDataRef *)(a1 + 8), v7, a2, v9);
  if (v8 < a3)
  {
    CFTypeRef v10 = *(__CFData **)(a1 + 8);
    CFTypeID v11 = &a2[v9];
    CFIndex v12 = a3 - v9;
LABEL_8:
    CFDataAppendBytes(v10, v11, v12);
  }
  *(void *)(a1 + 16) += a3;
  return a3;
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CGDataConsumerRef data)
{
  if (data)
  {
    CGDataConsumerRef v1 = data;
    CFStringRef v2 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
    CFTypeRef v3 = CFRetain(v1);
    *CFStringRef v2 = v3;
    if (v3)
    {
      v2[1] = 0;
      v4.CGDataConsumerPutBytesCallback putBytes = (CGDataConsumerPutBytesCallback)1;
      v4.releaseConsumer = (CGDataConsumerReleaseInfoCallback)data_put_bytes;
      uint64_t v5 = 0;
      uint64_t v6 = data_set_position;
      CFRange v7 = data_release;
      uint64_t v8 = 0;
      return CGDataConsumerCreate(v2, &v4);
    }
    else
    {
      free(v2);
      return 0;
    }
  }
  return data;
}

void data_release(CFTypeRef *a1)
{
  CFRelease(*a1);

  free(a1);
}

BOOL data_set_position(uint64_t a1, CFIndex a2)
{
  CFIndex Length = CFDataGetLength(*(CFDataRef *)a1);
  if (Length >= a2) {
    *(void *)(a1 + 8) = a2;
  }
  return Length >= a2;
}

unint64_t data_put_bytes(uint64_t a1, const UInt8 *a2, unint64_t a3)
{
  CFIndex Length = CFDataGetLength(*(CFDataRef *)a1);
  v7.location = *(void *)(a1 + 8);
  unint64_t v8 = Length - v7.location;
  if (Length <= v7.location)
  {
    CFTypeRef v10 = *(__CFData **)a1;
    CFTypeID v11 = a2;
    CFIndex v12 = a3;
    goto LABEL_8;
  }
  if (v8 >= a3) {
    CFIndex v9 = a3;
  }
  else {
    CFIndex v9 = Length - v7.location;
  }
  v7.CFIndex length = v9;
  CFDataReplaceBytes(*(CFMutableDataRef *)a1, v7, a2, v9);
  if (v8 < a3)
  {
    CFTypeRef v10 = *(__CFData **)a1;
    CFTypeID v11 = &a2[v9];
    CFIndex v12 = a3 - v9;
LABEL_8:
    CFDataAppendBytes(v10, v11, v12);
  }
  *(void *)(a1 + 8) += a3;
  return a3;
}

CGDataConsumerRef CGDataConsumerRetain(CGDataConsumerRef consumer)
{
  if (consumer) {
    CFRetain(consumer);
  }
  return consumer;
}

void CGDataConsumerRelease(CGDataConsumerRef consumer)
{
  if (consumer) {
    CFRelease(consumer);
  }
}

uint64_t CGDataConsumerPutBytes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  CGDataConsumerCallbacks v4 = *(uint64_t (**)(void))(a1 + 72);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48) + a3;
  *(void *)(a1 + 48) = v6;
  if (v6 > v5) {
    *(void *)(a1 + 40) = v6;
  }
  return v4(*(void *)(a1 + 16));
}

unsigned char *CGDataConsumerPrintf(unsigned char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return CGDataConsumerVPrintf(a1, a2, &a9);
}

unsigned char *CGDataConsumerVPrintf(unsigned char *result, char *a2, va_list a3)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    if (result[56] || !*((void *)result + 9)) {
      return 0;
    }
    if (*((void *)result + 3)
      || (*((void *)result + 4) = 1024,
          uint64_t result = malloc_type_malloc(0x400uLL, 0x705560E0uLL),
          (*(void *)(v3 + 24) = result) != 0))
    {
      while (1)
      {
        unsigned int v5 = vsnprintf_l(*(char **)(v3 + 24), *(void *)(v3 + 32), 0, a2, a3);
        if ((v5 & 0x80000000) != 0) {
          break;
        }
        if (*(void *)(v3 + 32) > (unint64_t)v5)
        {
          uint64_t v7 = *(void *)(v3 + 40);
          uint64_t v8 = *(void *)(v3 + 48) + v5;
          *(void *)(v3 + 48) = v8;
          if (v8 > v7) {
            *(void *)(v3 + 40) = v8;
          }
          return (unsigned char *)(*(uint64_t (**)(void, void))(v3 + 72))(*(void *)(v3 + 16), *(void *)(v3 + 24));
        }
        size_t v6 = v5 + 1;
        *(void *)(v3 + 32) = v6;
        *(void *)(v3 + 24) = malloc_type_realloc(*(void **)(v3 + 24), v6, 0x7492344AuLL);
      }
      return 0;
    }
  }
  return result;
}

uint64_t CGDataConsumerGetByteCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t CGDataConsumerSetPosition(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 56)) {
      return 0;
    }
    uint64_t v3 = *(uint64_t (**)(void))(result + 88);
    if (!v3)
    {
      return 0;
    }
    else
    {
      uint64_t result = v3(*(void *)(result + 16));
      if (result)
      {
        *(void *)(v2 + 48) = a2;
        return 1;
      }
    }
  }
  return result;
}

uint64_t CGDataConsumerGetPosition(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t CGDataConsumerFlush(uint64_t result)
{
  if (result && !*(unsigned char *)(result + 56))
  {
    CGDataConsumerRef v1 = *(uint64_t (**)(void))(result + 80);
    if (v1) {
      return v1(*(void *)(result + 16));
    }
  }
  return result;
}

uint64_t CGDataConsumerGetURL(uint64_t result)
{
  if (result)
  {
    if (*(unint64_t (**)(uint64_t, const UInt8 *, unint64_t))(result + 72) == url_put_bytes
      && (uint64_t v1 = *(void *)(result + 16)) != 0)
    {
      return *(void *)v1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t propertyListHash(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 44);
  uint64_t v2 = *(unsigned char **)(a1 + 104);
  int v3 = *v2;
  if (*v2)
  {
    CGDataConsumerCallbacks v4 = v2 + 1;
    do
    {
      unsigned int v1 = 257 * v1 + v3;
      int v5 = *v4++;
      int v3 = v5;
    }
    while (v5);
  }
  return v1;
}

BOOL propertyListEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  int v4 = *(_DWORD *)(a1 + 44);
  if (v4 != *(_DWORD *)(a2 + 44)) {
    return 0;
  }
  int v5 = strcmp(*(const char **)(a1 + 104), *(const char **)(a2 + 104));
  if (v4 != 1 || v5 != 0) {
    return 0;
  }
  BOOL result = CGStyleEqualToStyle(*(void *)(a1 + 48), *(void *)(a2 + 48));
  if (result)
  {
    if (*(double *)(a1 + 56) == *(double *)(a2 + 56)) {
      return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(a2 + 80)))), 0xFuLL))) & (*(double *)(a1 + 96) == *(double *)(a2 + 96));
    }
    return 0;
  }
  return result;
}

void propertyListRelease(uint64_t a1, _DWORD *a2)
{
}

_DWORD *propertyListRetain(uint64_t a1, _DWORD *a2)
{
  BOOL result = a2;
  if (a2) {
    ++*a2;
  }
  return result;
}

unsigned char *emitPropertyListDefinition(unsigned char *result, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result[40])
  {
    CFIndex v9 = result;
    uint64_t v11 = *((void *)result + 1);
    unint64_t v10 = *((void *)result + 2);
    if (!v10)
    {
      unint64_t v10 = PDFXRefTableAddObject(*(void **)(v11 + 464));
      *((void *)v9 + 2) = v10;
    }
    PDFDocumentBeginObject(v11, v10, a3, a4, a5, a6, a7, a8);
    PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"<<", v12, v13, v14, v15, v16, v17, v115);
    PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Type /PropertyList", v18, v19, v20, v21, v22, v23, v116);
    if (*((_DWORD *)v9 + 11) == 1)
    {
      PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((void *)v9 + 13));
      CGPDFArrayRef v36 = (double *)*((void *)v9 + 6);
      uint64_t v37 = *((void *)v9 + 1);
      if (v36)
      {
        PDFDocumentPrintf(v37, (uint64_t)"<<", v30, v31, v32, v33, v34, v35, v118);
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Type /Style", v38, v39, v40, v41, v42, v43, v119);
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Subtype /Shadow", v44, v45, v46, v47, v48, v49, v120);
        double v50 = v36[8];
        __double2 v51 = __sincos_stret((v36[6] + -180.0) * 3.14159265 / 180.0);
        PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Offset [ %f %f ]", v52, v53, v54, v55, v56, v57, COERCE__INT64(*((double *)v9 + 9) * (v50 * v51.__sinval) + *((double *)v9 + 7) * (v50 * v51.__cosval)));
        double v58 = v36[9];
        if (v58 != 0.0)
        {
          double v59 = *((double *)v9 + 7);
          double v60 = *((double *)v9 + 8);
          double v61 = *((double *)v9 + 9);
          double v62 = *((double *)v9 + 10);
          double v63 = sqrt((v62 * 0.0 + v60 * v58) * (v62 * 0.0 + v60 * v58) + (v61 * 0.0 + v59 * v58)
                                                                       * (v61 * 0.0 + v59 * v58));
          double v64 = sqrt((v58 * v62 + v60 * 0.0) * (v58 * v62 + v60 * 0.0) + (v58 * v61 + v59 * 0.0)
                                                                       * (v58 * v61 + v59 * 0.0));
          if (v63 > v64) {
            double v64 = v63;
          }
          PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Radius %f", v30, v31, v32, v33, v34, v35, *(uint64_t *)&v64);
        }
        if (*((double *)v9 + 7) != 1.0
          || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)v9 + 4)), (int32x4_t)vceqq_f64(*((float64x2_t *)v9 + 5), (float64x2_t)xmmword_1850CD830))))) & 1) != 0|| *((double *)v9 + 12) != 0.0)
        {
          PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/BMatrix %m", v30, v31, v32, v33, v34, v35, (uint64_t)(v9 + 56));
        }
        uint64_t v65 = *((void *)v9 + 6);
        if (v65)
        {
          unint64_t v66 = *(void *)(v65 + 24);
          if (v66)
          {
            PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/ColorSpace", v30, v31, v32, v33, v34, v35, v118);
            if ((v66 & 0x8000000000000000) != 0) {
              CGColorSpaceRef ColorSpace = CGTaggedColorGetColorSpace(v66, v67, v68, v69, v70, v71, v72, v73);
            }
            else {
              CGColorSpaceRef ColorSpace = *(CGColorSpace **)(v66 + 24);
            }
            uint64_t v76 = PDFDocumentResolveColorSpace(*((void *)v9 + 1), ColorSpace);
            uint64_t v77 = PDFDocumentAddColorSpace(*((void *)v9 + 1), v76);
            PDFColorSpaceEmitReference(v77, v78, v79, v80, v81, v82, v83, v84);
            PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"/Color [", v85, v86, v87, v88, v89, v90, v121);
            if ((v66 & 0x8000000000000000) != 0) {
              uint64_t NumberOfComponents = CGTaggedColorGetNumberOfComponents(v66, v91, v92, v93, v94, v95, v96, v97);
            }
            else {
              uint64_t NumberOfComponents = *(void *)(v66 + 56);
            }
            Components = CGColorGetComponents((CGColorRef)v66);
            if (NumberOfComponents)
            {
              uint64_t v106 = (uint64_t *)Components;
              do
              {
                uint64_t v107 = *v106++;
                PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"%f", v100, v101, v102, v103, v104, v105, v107);
                --NumberOfComponents;
              }
              while (NumberOfComponents);
            }
            PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)"]", v100, v101, v102, v103, v104, v105, v122);
          }
        }
        uint64_t v37 = *((void *)v9 + 1);
        CFTypeID v75 = ">>";
      }
      else
      {
        CFTypeID v75 = "/None";
      }
      PDFDocumentPrintf(v37, (uint64_t)v75, v30, v31, v32, v33, v34, v35, v118);
    }
    PDFDocumentPrintf(*((void *)v9 + 1), (uint64_t)">>", v24, v25, v26, v27, v28, v29, v117);
    BOOL result = PDFDocumentEndObject(*((void *)v9 + 1), v108, v109, v110, v111, v112, v113, v114);
    v9[40] = 1;
  }
  *a2 = 1;
  return result;
}

void iosurface_context_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8)
      {
        CFIndex v9 = *(const void **)(v8 + 16);
        if (v9) {
          CFRelease(v9);
        }
        CGColorSpaceRelease(*(CGColorSpaceRef *)(v8 + 40));
        free((void *)v8);
      }
    }
    else
    {
      handle_invalid_context((char)"iosurface_context_finalize", a1, a3, a4, a5, a6, a7, a8);
    }
  }
}

void CGIOSurfaceContextSetDisplayMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      uint64_t v8 = a1;
    }
    CFIndex v9 = *(void (**)(uint64_t))(vtable + 16);
    uint64_t v10 = *(void *)(v8 + 40);
    v9(v10);
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextSetDisplayMask", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGIOSurfaceContextGetDisplayMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      uint64_t v8 = a1;
    }
    CFIndex v9 = *(uint64_t (**)(uint64_t))(vtable + 24);
    uint64_t v10 = *(void *)(v8 + 40);
    return v9(v10);
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextGetDisplayMask", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGIOSurfaceContextSetGPURegistryID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      uint64_t v8 = a1;
    }
    if (*(int *)vtable >= 3)
    {
      CFIndex v9 = *(void (**)(uint64_t))(vtable + 56);
      uint64_t v10 = *(void *)(v8 + 40);
      v9(v10);
    }
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextSetGPURegistryID", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGIOSurfaceContextGetGPURegistryID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (!a1 || *(_DWORD *)(a1 + 16) != 1129601108 || *(_DWORD *)(a1 + 24) != 8)
  {
    handle_invalid_context((char)"CGIOSurfaceContextGetGPURegistryID", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (iosurface_context_vtable_once != -1)
  {
    dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
    uint64_t v8 = a1;
  }
  if (*(int *)vtable < 3) {
    return 0;
  }
  CFIndex v9 = *(uint64_t (**)(uint64_t))(vtable + 64);
  uint64_t v10 = *(void *)(v8 + 40);

  return v9(v10);
}

uint64_t CGIOSurfaceContextGetWidth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8) {
    return **(void **)(a1 + 32);
  }
  handle_invalid_context((char)"CGIOSurfaceContextGetWidth", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetHeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8) {
    return *(void *)(*(void *)(a1 + 32) + 8);
  }
  handle_invalid_context((char)"CGIOSurfaceContextGetHeight", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8) {
    return *(void *)(*(void *)(a1 + 32) + 16);
  }
  handle_invalid_context((char)"CGIOSurfaceContextGetSurface", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetBitsPerComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8) {
    return *(void *)(*(void *)(a1 + 32) + 24);
  }
  handle_invalid_context((char)"CGIOSurfaceContextGetBitsPerComponent", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetBitsPerPixel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8) {
    return *(void *)(*(void *)(a1 + 32) + 32);
  }
  handle_invalid_context((char)"CGIOSurfaceContextGetBitsPerPixel", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetColorSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8) {
    return *(void *)(*(void *)(a1 + 32) + 40);
  }
  handle_invalid_context((char)"CGIOSurfaceContextGetColorSpace", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetBitmapInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8) {
    return *(unsigned int *)(*(void *)(a1 + 32) + 48);
  }
  handle_invalid_context((char)"CGIOSurfaceContextGetBitmapInfo", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextCreateImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      uint64_t v8 = a1;
    }
    CFIndex v9 = *(uint64_t (**)(uint64_t, uint64_t))(vtable + 32);
    uint64_t v12 = v8 + 32;
    uint64_t v11 = *(void *)(v8 + 32);
    uint64_t v10 = *(void *)(v12 + 8);
    return v9(v10, v11);
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextCreateImage", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

uint64_t CGIOSurfaceContextCreateImageReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (!a1 || *(_DWORD *)(a1 + 16) != 1129601108 || *(_DWORD *)(a1 + 24) != 8)
  {
    handle_invalid_context((char)"CGIOSurfaceContextCreateImageReference", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (iosurface_context_vtable_once != -1)
  {
    dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
    uint64_t v8 = a1;
  }
  if (*(int *)vtable < 1) {
    return 0;
  }
  CFIndex v9 = *(uint64_t (**)(uint64_t, uint64_t))(vtable + 40);
  uint64_t v12 = v8 + 32;
  uint64_t v11 = *(void *)(v8 + 32);
  uint64_t v10 = *(void *)(v12 + 8);

  return v9(v10, v11);
}

uint64_t CGIOSurfaceContextGetSizeLimits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || *(_DWORD *)(a1 + 16) != 1129601108 || *(_DWORD *)(a1 + 24) != 8)
  {
    handle_invalid_context((char)"CGIOSurfaceContextGetSizeLimits", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (iosurface_context_vtable_once != -1) {
    dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
  }
  if (*(int *)vtable < 2) {
    return 0;
  }
  uint64_t v8 = *(uint64_t (**)(void))(vtable + 48);

  return v8();
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)23,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  uint64_t v17 = *result;
  unint64_t v18 = *a3;
  uint64_t v19 = *a2;
  uint64_t v20 = *a4;
  if (a15 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  int8x16_t v24 = vandq_s8(vdupq_n_s8(v23), v22);
  uint64_t v25 = 4 * a6;
  uint64_t v26 = 16 * a6;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    __int32 v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      uint64_t v35 = (unsigned __int8 *)&v20[v16];
      CGPDFArrayRef v36 = (int8x16_t *)v20;
      do
        uint64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        uint64_t v38 = v37;
        uint64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          uint64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            uint64_t v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v20;
      unint64_t v41 = (char *)v38 - v20;
      do
      {
        int8x16_t v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        int8x16_t v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        int8x16_t v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        int8x16_t v47 = (int8x16_t)vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        uint8x16_t v48 = (uint8x16_t)vmvnq_s8(v47);
        int8x16_t v49 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), v48);
        uint8x16_t v50 = vabdq_u8(v48, (uint8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)));
        uint16x8_t v51 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v50.i8);
        uint16x8_t v52 = vmull_high_u8(v46, v50);
        uint16x8_t v53 = vminq_u16(v51, v27);
        uint16x8_t v54 = vminq_u16(v52, v27);
        uint8x16_t v55 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL);
        int8x16_t v56 = vbslq_s8(v49, (int8x16_t)vqsubq_u8((uint8x16_t)v47, v55), (int8x16_t)vqaddq_u8((uint8x16_t)v47, v55));
        int8x16_t v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vminq_u8((uint8x16_t)v56, (uint8x16_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_1850CD8D0))));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      uint64_t v19 = (_DWORD *)((char *)v19 + v39);
      uint64_t v17 = (unsigned __int32 *)((char *)v17 + v39);
      unint64_t v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28) {
      break;
    }
    uint64_t v29 = (unsigned __int8 *)&v20[v16];
    uint64_t v30 = (int8x16_t *)v20;
    do
      uint64_t v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      uint64_t v32 = v31;
      uint64_t v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        uint64_t v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          uint64_t v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v20;
    int64_t v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v57 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    int8x16_t v58 = vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v59 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v57), a9);
    int8x16_t v60 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v58)), *(int8x16_t *)((char *)v19 + v57));
    v94.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v58.i8);
    uint16x8_t v61 = vmull_high_u8(v59, (uint8x16_t)v58);
    uint16x8_t v62 = vminq_u16((uint16x8_t)v94.val[1], v27);
    uint16x8_t v63 = vminq_u16(v61, v27);
    v94.val[0] = (int8x16_t)vrsraq_n_u16(v62, v62, 8uLL);
    uint16x8_t v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v94.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v94.val[0], 8uLL);
    *(uint8x8_t *)v94.val[1].i8 = vqrshrn_n_u16(v64, 8uLL);
    int8x16_t v65 = vqtbl2q_s8(v94, (int8x16_t)xmmword_1850CD8F0);
    v94.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v94.val[0].i8, v64, 8uLL);
    int8x16_t v66 = vqtbl1q_s8(v60, (int8x16_t)xmmword_1850CD8D0);
    v94.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v94.val[0], (uint8x16_t)v65);
    int8x16_t v67 = (int8x16_t)vminq_u8((uint8x16_t)v60, (uint8x16_t)v66);
    uint8x16_t v68 = (uint8x16_t)vmvnq_s8(v67);
    int8x16_t v69 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), v68);
    uint8x16_t v70 = vabdq_u8(v68, (uint8x16_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)));
    uint16x8_t v71 = vmull_u8(*(uint8x8_t *)v94.val[1].i8, *(uint8x8_t *)v70.i8);
    v94.val[1] = (int8x16_t)vmull_high_u8((uint8x16_t)v94.val[1], v70);
    uint16x8_t v72 = vminq_u16(v71, v27);
    v94.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v94.val[1], v27);
    uint8x16_t v73 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v72, v72, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v94.val[1], (uint16x8_t)v94.val[1], 8uLL), 8uLL);
    v94.val[1] = vbslq_s8(v69, (int8x16_t)vqsubq_u8((uint8x16_t)v67, v73), (int8x16_t)vqaddq_u8((uint8x16_t)v67, v73));
    int8x16_t v74 = vbslq_s8(vceqzq_s8(v66), v94.val[0], (int8x16_t)vminq_u8((uint8x16_t)v94.val[1], (uint8x16_t)vqtbl1q_s8(v94.val[1], (int8x16_t)xmmword_1850CD8D0)));
    int8x16_t v15 = vceqzq_s8(v65);
    *(int8x16_t *)((char *)v19 + v57) = vbslq_s8(v15, v60, v74);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4) {
      break;
    }
    __int32 v28 = *(_DWORD *)v20;
    v57 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      uint64_t v17 = (unsigned __int32 *)((char *)v17 + v57);
      uint64_t v19 = (_DWORD *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  uint64_t v17 = (unsigned __int32 *)((char *)v17 + v26 + v57);
  uint64_t v19 = (_DWORD *)((char *)v19 + v26 + v57);
LABEL_40:
  uint64_t v75 = v16 + a14;
  if (v75)
  {
    if (a7) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v76), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v77 = 0;
    }
    else {
      unsigned int v77 = -1;
    }
    int8x8_t v78 = vand_s8(vdup_n_s8(v77), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v79 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      uint16x8_t v80 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v81) = v80.i8[0];
      BYTE1(v81) = v80.i8[2];
      BYTE2(v81) = v80.i8[4];
      HIBYTE(v81) = v80.i8[6];
      v80.i32[0] = *v19;
      uint16x8_t v82 = vmovl_u8(*(uint8x8_t *)v80.i8);
      LOBYTE(v83) = v82.i8[0];
      BYTE1(v83) = v82.i8[2];
      BYTE2(v83) = v82.i8[4];
      HIBYTE(v83) = v82.i8[6];
      v82.i8[7] = 0;
      v82.i8[0] = *v20;
      v82.i8[1] = *v20;
      v82.i8[2] = *v20;
      *(__int32 *)((char *)v82.i32 + 3) = *v20;
      int8x8_t v84 = vorr_s8(vbic_s8(v78, vceqz_s8(*(int8x8_t *)v82.i8)), (int8x8_t)v83);
      uint16x8_t v85 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v81, *(int8x8_t *)a9.i8), *(uint8x8_t *)v82.i8), v79);
      a13 = vrsraq_n_u16(v85, v85, 8uLL);
      int8x8_t v86 = (int8x8_t)vqrshrn_n_u16(a13, 8uLL);
      *(int8x8_t *)a13.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v86, a13, 8uLL), (int8x8_t)0x707070703030303);
      *(int8x8_t *)v87.i8 = v84;
      v87.u64[1] = (unint64_t)v84;
      *(int8x8_t *)v87.i8 = vqtbl1_s8(v87, (int8x8_t)0x707070703030303);
      int8x8_t v88 = (int8x8_t)vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v87.i8);
      uint8x8_t v89 = (uint8x8_t)vmvn_s8(v88);
      uint16x8_t v90 = vminq_u16(vmull_u8(vmin_u8((uint8x8_t)v86, *(uint8x8_t *)a13.i8), vabd_u8(v89, (uint8x8_t)(*(void *)&v88 & 0xFFFFFF00FFFFFFLL))), v79);
      *(uint8x8_t *)v90.i8 = vqrshrn_n_u16(vrsraq_n_u16(v90, v90, 8uLL), 8uLL);
      *(int8x8_t *)v91.i8 = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)(*(void *)&v88 & 0xFFFFFF00FFFFFFLL), v89), (int8x8_t)vqsub_u8((uint8x8_t)v88, *(uint8x8_t *)v90.i8), (int8x8_t)vqadd_u8((uint8x8_t)v88, *(uint8x8_t *)v90.i8));
      v91.i64[1] = v91.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, vbsl_s8(vceqz_s8(*(int8x8_t *)v87.i8), v86, (int8x8_t)vmin_u8(*(uint8x8_t *)v91.i8, (uint8x8_t)vqtbl1_s8(v91, (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *uint64_t v19 = a13.i32[0];
      uint64_t v92 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v92 >= v18) {
        uint64_t v93 = -(uint64_t)a5;
      }
      else {
        uint64_t v93 = 0;
      }
      uint64_t v17 = &v92[v93];
      v19 += a6;
      --v75;
    }
    while (v75);
  }
  *BOOL result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)22,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint8x8_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v18 = a16;
  uint64_t v19 = *result;
  unint64_t v20 = *a3;
  unsigned int v21 = *a2;
  int8x16_t v22 = *a4;
  if (a16 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = -1;
  }
  int8x16_t v26 = vandq_s8(vdupq_n_s8(v25), v24);
  uint64_t v27 = 4 * a6;
  uint64_t v28 = 16 * a6;
  uint16x8_t v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  v30.i64[0] = 0xFFFFFFFFFFFFLL;
  v30.i64[1] = 0xFFFFFFFFFFFFLL;
  a14.i32[1] = 117901063;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    __int32 v32 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      uint64_t v39 = (unsigned __int8 *)&v22[v18];
      int64_t v40 = (int8x16_t *)v22;
      do
        unint64_t v41 = v40++;
      while (v40 <= (int8x16_t *)v39 && (vminvq_u8((uint8x16_t)vceqq_s8(*v41, v31)) & 0x80) != 0);
      do
      {
        int8x16_t v42 = v41;
        unint64_t v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= (int8x16_t *)v39 && v42->i32[0] == -1);
      if (v42 < (int8x16_t *)v39)
      {
        while (v42->u8[0] == 255)
        {
          int8x16_t v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= (int8x16_t *)v39)
          {
            int8x16_t v42 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      uint64_t v43 = 0;
      int64_t v44 = (char *)v42 - v22;
      unint64_t v45 = (char *)v42 - v22;
      do
      {
        int8x16_t v46 = vorrq_s8(*(int8x16_t *)((char *)v19 + v43), a9);
        int8x16_t v47 = vorrq_s8(*(int8x16_t *)((char *)v21 + v43), v26);
        int8x16_t v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v49 = vqtbl1q_s8(v47, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        uint8x16_t v51 = vminq_u8((uint8x16_t)v47, (uint8x16_t)v49);
        uint8x16_t v52 = (uint8x16_t)vmvnq_s8(v48);
        uint8x16_t v53 = (uint8x16_t)vmvnq_s8(v49);
        v99.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v48.i8), v30)), vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v52.i8)), vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v53.i8));
        uint16x8_t v54 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v50, (uint8x16_t)v49), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v51, (uint8x16_t)v48), v30)), vmull_high_u8(v51, v52)), vmull_high_u8(v50, v53));
        uint16x8_t v55 = vminq_u16((uint16x8_t)v99.val[1], v29);
        uint16x8_t v56 = vminq_u16(v54, v29);
        v99.val[0] = (int8x16_t)vrsraq_n_u16(v55, v55, 8uLL);
        uint16x8_t v57 = vrsraq_n_u16(v56, v56, 8uLL);
        *(uint8x8_t *)v99.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v99.val[0], 8uLL);
        *(uint8x8_t *)v99.val[1].i8 = vqrshrn_n_u16(v57, 8uLL);
        int8x16_t v17 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v99.val[0].i8, v57, 8uLL), (uint8x16_t)vqtbl2q_s8(v99, (int8x16_t)xmmword_1850CD8F0));
        int8x16_t v16 = vceqzq_s8(v48);
        *(int8x16_t *)((char *)v21 + v43) = vbslq_s8(v16, v47, vbslq_s8(vceqzq_s8(v49), v46, v17));
        v22 += v27;
        v45 -= 4;
        v43 += v28;
      }
      while (v45 > 3);
      unsigned int v21 = (_DWORD *)((char *)v21 + v43);
      uint64_t v19 = (_DWORD *)((char *)v19 + v43);
      unint64_t v18 = v18 - v44 + v45;
      goto LABEL_37;
    }
    if (v32) {
      break;
    }
    int64_t v33 = (unsigned __int8 *)&v22[v18];
    int64_t v34 = (int8x16_t *)v22;
    do
      uint64_t v35 = v34++;
    while (v34 <= (int8x16_t *)v33 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v35)) & 0x80) != 0);
    do
    {
      CGPDFArrayRef v36 = v35;
      uint64_t v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= (int8x16_t *)v33 && !v36->i32[0]);
    if (v36 < (int8x16_t *)v33)
    {
      while (!v36->i8[0])
      {
        CGPDFArrayRef v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= (int8x16_t *)v33)
        {
          CGPDFArrayRef v36 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    int64_t v37 = (char *)v36 - v22;
    int64_t v38 = ((char *)v36 - v22) * a6;
    v19 += v38;
    v21 += v38;
    v22 += v38;
    v18 -= v37;
LABEL_37:
    if (v18 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v58 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    int8x16_t v59 = vqtbl1q_s8(v16, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v60 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v58), a9);
    int8x16_t v61 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v59)), *(int8x16_t *)((char *)v21 + v58));
    uint16x8_t v62 = vminq_u16(vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v59.i8), v29);
    uint16x8_t v63 = vminq_u16(vmull_high_u8(v60, (uint8x16_t)v59), v29);
    uint16x8_t v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v60.i8 = vqrshrn_n_u16(vrsraq_n_u16(v62, v62, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v64, 8uLL);
    int8x16_t v65 = vqtbl2q_s8(*(int8x16x2_t *)(&v17 - 1), (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v66 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v60.i8, v64, 8uLL);
    int8x16_t v67 = vqtbl1q_s8(v61, (int8x16_t)xmmword_1850CD8D0);
    uint8x16_t v68 = vminq_u8((uint8x16_t)v66, (uint8x16_t)v65);
    uint8x16_t v69 = vminq_u8((uint8x16_t)v61, (uint8x16_t)v67);
    uint8x16_t v70 = (uint8x16_t)vmvnq_s8(v65);
    uint8x16_t v71 = (uint8x16_t)vmvnq_s8(v67);
    v100.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v67.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v69.i8, *(uint8x8_t *)v65.i8), v30)), vmull_u8(*(uint8x8_t *)v69.i8, *(uint8x8_t *)v70.i8)), vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v71.i8));
    uint16x8_t v72 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v68, (uint8x16_t)v67), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v69, (uint8x16_t)v65), v30)), vmull_high_u8(v69, v70)), vmull_high_u8(v68, v71));
    uint16x8_t v73 = vminq_u16((uint16x8_t)v100.val[1], v29);
    uint16x8_t v74 = vminq_u16(v72, v29);
    v100.val[0] = (int8x16_t)vrsraq_n_u16(v73, v73, 8uLL);
    uint16x8_t v75 = vrsraq_n_u16(v74, v74, 8uLL);
    *(uint8x8_t *)v100.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v100.val[0], 8uLL);
    *(uint8x8_t *)v100.val[1].i8 = vqrshrn_n_u16(v75, 8uLL);
    int8x16_t v17 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v100.val[0].i8, v75, 8uLL), (uint8x16_t)vqtbl2q_s8(v100, (int8x16_t)xmmword_1850CD8F0));
    int8x16_t v16 = vbslq_s8(vceqzq_s8(v67), v66, v17);
    *(int8x16_t *)((char *)v21 + v58) = vbslq_s8(vceqzq_s8(v65), v61, v16);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4) {
      break;
    }
    __int32 v32 = *(_DWORD *)v22;
    v58 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      uint64_t v19 = (_DWORD *)((char *)v19 + v58);
      unsigned int v21 = (_DWORD *)((char *)v21 + v58);
      goto LABEL_37;
    }
  }
  uint64_t v19 = (_DWORD *)((char *)v19 + v28 + v58);
  unsigned int v21 = (_DWORD *)((char *)v21 + v28 + v58);
LABEL_40:
  uint64_t v76 = v18 + a15;
  if (v76)
  {
    if (a7) {
      unsigned int v77 = 0;
    }
    else {
      unsigned int v77 = -1;
    }
    int8x8_t v78 = vdup_n_s8(v77);
    if (a8) {
      unsigned int v79 = 0;
    }
    else {
      unsigned int v79 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(v78, (int8x8_t)0xFF000000FF000000);
    int8x8_t v80 = vand_s8(vdup_n_s8(v79), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v81 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    v82.i64[0] = 0xFFFFFFFFFFFFLL;
    v82.i64[1] = 0xFFFFFFFFFFFFLL;
    do
    {
      a14.i32[0] = *v19;
      uint16x8_t v83 = vmovl_u8(a14);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i32[0] = *v21;
      uint16x8_t v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
      LOBYTE(v86) = v85.i8[0];
      BYTE1(v86) = v85.i8[2];
      BYTE2(v86) = v85.i8[4];
      HIBYTE(v86) = v85.i8[6];
      v85.i8[7] = 0;
      v85.i8[0] = *v22;
      v85.i8[1] = *v22;
      v85.i8[2] = *v22;
      *(__int32 *)((char *)v85.i32 + 3) = *v22;
      int8x8_t v87 = vorr_s8(vbic_s8(v80, vceqz_s8(*(int8x8_t *)v85.i8)), (int8x8_t)v86);
      uint16x8_t v88 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v84, *(int8x8_t *)a9.i8), *(uint8x8_t *)v85.i8), v81);
      int8x16_t v89 = (int8x16_t)vrsraq_n_u16(v88, v88, 8uLL);
      int8x8_t v90 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v89, 8uLL);
      *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v90, (uint16x8_t)v89, 8uLL), (int8x8_t)0x707070703030303);
      *(int8x8_t *)v91.i8 = v87;
      v91.u64[1] = (unint64_t)v87;
      *(int8x8_t *)v91.i8 = vqtbl1_s8(v91, (int8x8_t)0x707070703030303);
      uint8x8_t v92 = vmin_u8((uint8x8_t)v90, *(uint8x8_t *)v89.i8);
      uint8x8_t v93 = vmin_u8((uint8x8_t)v87, *(uint8x8_t *)v91.i8);
      uint16x8_t v94 = vminq_u16(vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(v92, *(uint8x8_t *)v91.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(v93, *(uint8x8_t *)v89.i8), v82)), vmull_u8(v93, (uint8x8_t)vmvn_s8(*(int8x8_t *)v89.i8))), vmull_u8(v92, (uint8x8_t)vmvn_s8(*(int8x8_t *)v91.i8))), v81);
      uint16x8_t v95 = vrsraq_n_u16(v94, v94, 8uLL);
      uint8x8_t v96 = vqrshrn_n_u16(v95, 8uLL);
      *(int8x8_t *)v89.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v89.i8), v87, vbsl_s8(vceqz_s8(*(int8x8_t *)v91.i8), v90, (int8x8_t)vmin_u8(v96, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v96, v95, 8uLL), (int8x8_t)0x707070703030303))));
      a14 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v89, a9));
      *unsigned int v21 = a14.i32[0];
      uint64_t v97 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v97 >= v20) {
        uint64_t v98 = -(uint64_t)a5;
      }
      else {
        uint64_t v98 = 0;
      }
      uint64_t v19 = &v97[v98];
      v21 += a6;
      --v76;
    }
    while (v76);
  }
  *BOOL result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)21,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint8x8_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v19 = a16;
  unint64_t v20 = *result;
  unint64_t v21 = *a3;
  int8x16_t v22 = *a2;
  unsigned int v23 = *a4;
  if (a16 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  v25.i64[0] = 0xFF000000FF000000;
  v25.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v24), v25);
  if (a8) {
    unsigned int v26 = 0;
  }
  else {
    unsigned int v26 = -1;
  }
  int8x16_t v27 = vandq_s8(vdupq_n_s8(v26), v25);
  uint64_t v28 = 4 * a6;
  uint64_t v29 = 16 * a6;
  uint16x8_t v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a14.i32[1] = 117901063;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    __int32 v32 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      uint64_t v39 = (unsigned __int8 *)&v23[v19];
      int64_t v40 = (int8x16_t *)v23;
      do
        unint64_t v41 = v40++;
      while (v40 <= (int8x16_t *)v39 && (vminvq_u8((uint8x16_t)vceqq_s8(*v41, v31)) & 0x80) != 0);
      do
      {
        int8x16_t v42 = v41;
        unint64_t v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= (int8x16_t *)v39 && v42->i32[0] == -1);
      if (v42 < (int8x16_t *)v39)
      {
        while (v42->u8[0] == 255)
        {
          int8x16_t v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= (int8x16_t *)v39)
          {
            int8x16_t v42 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      uint64_t v43 = 0;
      int64_t v44 = (char *)v42 - v23;
      unint64_t v45 = (char *)v42 - v23;
      do
      {
        int8x16_t v46 = vorrq_s8(*(int8x16_t *)((char *)v20 + v43), a9);
        int8x16_t v47 = vorrq_s8(*(int8x16_t *)((char *)v22 + v43), v27);
        int8x16_t v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v49 = vqtbl1q_s8(v47, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        uint8x16_t v51 = vminq_u8((uint8x16_t)v47, (uint8x16_t)v49);
        int8x16_t v52 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v48, (uint8x16_t)0), v50);
        int8x16_t v53 = vzip1q_s8(v52, v52);
        uint16x8_t v54 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v51.i8);
        uint16x8_t v55 = vmull_high_u8(v50, v51);
        uint8x16_t v56 = vqsubq_u8((uint8x16_t)v49, v51);
        uint8x16_t v57 = vqsubq_u8((uint8x16_t)v48, v50);
        uint16x8_t v58 = vmull_u8(*(uint8x8_t *)v56.i8, *(uint8x8_t *)v57.i8);
        uint16x8_t v59 = vmull_high_u8(v56, v57);
        uint16x8_t v60 = (uint16x8_t)vbslq_s8(vzip2q_s8(v52, v52), (int8x16_t)vqaddq_u16(v55, v55), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v49, (uint8x16_t)v48), vqaddq_u16(v59, v59)));
        uint16x8_t v61 = (uint16x8_t)vbslq_s8(v53, (int8x16_t)vqaddq_u16(v54, v54), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), vqaddq_u16(v58, v58)));
        uint8x16_t v62 = (uint8x16_t)vmvnq_s8(v48);
        uint16x8_t v63 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v62.i8);
        uint16x8_t v64 = vqaddq_u16(v60, vmull_high_u8(v51, v62));
        uint8x16_t v65 = (uint8x16_t)vmvnq_s8(v49);
        uint16x8_t v66 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v65.i8);
        uint16x8_t v67 = vmull_high_u8(v50, v65);
        v127.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v61, v63), v66);
        uint16x8_t v68 = vqaddq_u16(v64, v67);
        uint16x8_t v69 = vminq_u16((uint16x8_t)v127.val[1], v30);
        uint16x8_t v70 = vminq_u16(v68, v30);
        v127.val[0] = (int8x16_t)vrsraq_n_u16(v69, v69, 8uLL);
        uint16x8_t v71 = vrsraq_n_u16(v70, v70, 8uLL);
        *(uint8x8_t *)v127.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v127.val[0], 8uLL);
        *(uint8x8_t *)v127.val[1].i8 = vqrshrn_n_u16(v71, 8uLL);
        int8x16_t v18 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v127.val[0].i8, v71, 8uLL), (uint8x16_t)vqtbl2q_s8(v127, (int8x16_t)xmmword_1850CD8F0));
        int8x16_t v17 = vceqzq_s8(v49);
        int8x16_t v16 = vceqzq_s8(v48);
        *(int8x16_t *)((char *)v22 + v43) = vbslq_s8(v16, v47, vbslq_s8(v17, v46, v18));
        v23 += v28;
        v45 -= 4;
        v43 += v29;
      }
      while (v45 > 3);
      int8x16_t v22 = (_DWORD *)((char *)v22 + v43);
      unint64_t v20 = (_DWORD *)((char *)v20 + v43);
      unint64_t v19 = v19 - v44 + v45;
      goto LABEL_37;
    }
    if (v32) {
      break;
    }
    int64_t v33 = (unsigned __int8 *)&v23[v19];
    int64_t v34 = (int8x16_t *)v23;
    do
      uint64_t v35 = v34++;
    while (v34 <= (int8x16_t *)v33 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v35)) & 0x80) != 0);
    do
    {
      CGPDFArrayRef v36 = v35;
      uint64_t v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= (int8x16_t *)v33 && !v36->i32[0]);
    if (v36 < (int8x16_t *)v33)
    {
      while (!v36->i8[0])
      {
        CGPDFArrayRef v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= (int8x16_t *)v33)
        {
          CGPDFArrayRef v36 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    int64_t v37 = (char *)v36 - v23;
    int64_t v38 = ((char *)v36 - v23) * a6;
    v20 += v38;
    v22 += v38;
    v23 += v38;
    v19 -= v37;
LABEL_37:
    if (v19 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v72 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    int8x16_t v73 = vqtbl1q_s8(v16, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v74 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v20 + v72), a9);
    int8x16_t v75 = vorrq_s8(vbicq_s8(v27, vceqzq_s8(v73)), *(int8x16_t *)((char *)v22 + v72));
    uint16x8_t v76 = vminq_u16(vmull_u8(*(uint8x8_t *)v74.i8, *(uint8x8_t *)v73.i8), v30);
    uint16x8_t v77 = vminq_u16(vmull_high_u8(v74, (uint8x16_t)v73), v30);
    uint16x8_t v78 = vrsraq_n_u16(v77, v77, 8uLL);
    *(uint8x8_t *)v74.i8 = vqrshrn_n_u16(vrsraq_n_u16(v76, v76, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(v78, 8uLL);
    int8x16_t v79 = vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v17 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v74.i8, v78, 8uLL);
    int8x16_t v80 = vqtbl1q_s8(v75, (int8x16_t)xmmword_1850CD8D0);
    uint8x16_t v81 = vminq_u8((uint8x16_t)v17, (uint8x16_t)v79);
    uint8x16_t v82 = vminq_u8((uint8x16_t)v75, (uint8x16_t)v80);
    int8x16_t v83 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v79, (uint8x16_t)0), v81);
    int8x16_t v84 = vzip1q_s8(v83, v83);
    uint16x8_t v85 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v82.i8);
    uint16x8_t v86 = vmull_high_u8(v81, v82);
    uint8x16_t v87 = vqsubq_u8((uint8x16_t)v80, v82);
    uint8x16_t v88 = vqsubq_u8((uint8x16_t)v79, v81);
    uint16x8_t v89 = vmull_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v88.i8);
    uint16x8_t v90 = vmull_high_u8(v87, v88);
    uint16x8_t v91 = (uint16x8_t)vbslq_s8(vzip2q_s8(v83, v83), (int8x16_t)vqaddq_u16(v86, v86), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v80, (uint8x16_t)v79), vqaddq_u16(v90, v90)));
    uint16x8_t v92 = (uint16x8_t)vbslq_s8(v84, (int8x16_t)vqaddq_u16(v85, v85), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v80.i8, *(uint8x8_t *)v79.i8), vqaddq_u16(v89, v89)));
    uint8x16_t v93 = (uint8x16_t)vmvnq_s8(v79);
    uint16x8_t v94 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v93.i8);
    uint16x8_t v95 = vqaddq_u16(v91, vmull_high_u8(v82, v93));
    uint8x16_t v96 = (uint8x16_t)vmvnq_s8(v80);
    uint16x8_t v97 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v96.i8);
    uint16x8_t v98 = vmull_high_u8(v81, v96);
    v128.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v92, v94), v97);
    uint16x8_t v99 = vqaddq_u16(v95, v98);
    uint16x8_t v100 = vminq_u16((uint16x8_t)v128.val[1], v30);
    uint16x8_t v101 = vminq_u16(v99, v30);
    v128.val[0] = (int8x16_t)vrsraq_n_u16(v100, v100, 8uLL);
    uint16x8_t v102 = vrsraq_n_u16(v101, v101, 8uLL);
    *(uint8x8_t *)v128.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v128.val[0], 8uLL);
    *(uint8x8_t *)v128.val[1].i8 = vqrshrn_n_u16(v102, 8uLL);
    int8x16_t v18 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v128.val[0].i8, v102, 8uLL), (uint8x16_t)vqtbl2q_s8(v128, (int8x16_t)xmmword_1850CD8F0));
    int8x16_t v16 = vbslq_s8(vceqzq_s8(v80), v17, v18);
    *(int8x16_t *)((char *)v22 + v72) = vbslq_s8(vceqzq_s8(v79), v75, v16);
    v23 += v28;
    v19 -= 4;
    if (v19 < 4) {
      break;
    }
    __int32 v32 = *(_DWORD *)v23;
    v72 += v29;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (_DWORD *)((char *)v20 + v72);
      int8x16_t v22 = (_DWORD *)((char *)v22 + v72);
      goto LABEL_37;
    }
  }
  unint64_t v20 = (_DWORD *)((char *)v20 + v29 + v72);
  int8x16_t v22 = (_DWORD *)((char *)v22 + v29 + v72);
LABEL_40:
  uint64_t v103 = v19 + a15;
  if (v103)
  {
    if (a7) {
      unsigned int v104 = 0;
    }
    else {
      unsigned int v104 = -1;
    }
    int8x8_t v105 = vdup_n_s8(v104);
    if (a8) {
      unsigned int v106 = 0;
    }
    else {
      unsigned int v106 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(v105, (int8x8_t)0xFF000000FF000000);
    int8x8_t v107 = vand_s8(vdup_n_s8(v106), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v108 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v20;
      uint16x8_t v109 = vmovl_u8(a14);
      LOBYTE(v110) = v109.i8[0];
      BYTE1(v110) = v109.i8[2];
      BYTE2(v110) = v109.i8[4];
      HIBYTE(v110) = v109.i8[6];
      v109.i32[0] = *v22;
      uint16x8_t v111 = vmovl_u8(*(uint8x8_t *)v109.i8);
      LOBYTE(v112) = v111.i8[0];
      BYTE1(v112) = v111.i8[2];
      BYTE2(v112) = v111.i8[4];
      HIBYTE(v112) = v111.i8[6];
      v111.i8[7] = 0;
      v111.i8[0] = *v23;
      v111.i8[1] = *v23;
      v111.i8[2] = *v23;
      *(__int32 *)((char *)v111.i32 + 3) = *v23;
      int8x8_t v113 = vorr_s8(vbic_s8(v107, vceqz_s8(*(int8x8_t *)v111.i8)), (int8x8_t)v112);
      uint16x8_t v114 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v110, *(int8x8_t *)a9.i8), *(uint8x8_t *)v111.i8), v108);
      int8x16_t v115 = (int8x16_t)vrsraq_n_u16(v114, v114, 8uLL);
      int8x8_t v116 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v115, 8uLL);
      *(int8x8_t *)v115.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v116, (uint16x8_t)v115, 8uLL), (int8x8_t)0x707070703030303);
      *(int8x8_t *)v117.i8 = v113;
      v117.u64[1] = (unint64_t)v113;
      *(int8x8_t *)v117.i8 = vqtbl1_s8(v117, (int8x8_t)0x707070703030303);
      uint8x8_t v118 = vmin_u8((uint8x8_t)v116, *(uint8x8_t *)v115.i8);
      uint8x8_t v119 = vmin_u8((uint8x8_t)v113, *(uint8x8_t *)v117.i8);
      *(uint8x8_t *)v17.i8 = vcge_u8(vrhadd_u8(*(uint8x8_t *)v115.i8, 0), v118);
      uint16x8_t v120 = vmull_u8(v118, v119);
      uint16x8_t v121 = vmull_u8(vqsub_u8(*(uint8x8_t *)v117.i8, v119), vqsub_u8(*(uint8x8_t *)v115.i8, v118));
      uint16x8_t v122 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vbslq_s8(vzip1q_s8(v17, v17), (int8x16_t)vqaddq_u16(v120, v120), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v117.i8, *(uint8x8_t *)v115.i8), vqaddq_u16(v121, v121))), vmull_u8(v119, (uint8x8_t)vmvn_s8(*(int8x8_t *)v115.i8))), vmull_u8(v118, (uint8x8_t)vmvn_s8(*(int8x8_t *)v117.i8))), v108);
      uint16x8_t v123 = vrsraq_n_u16(v122, v122, 8uLL);
      uint8x8_t v124 = vqrshrn_n_u16(v123, 8uLL);
      int8x16_t v17 = (int8x16_t)vqrshrn_high_n_u16(v124, v123, 8uLL);
      *(int8x8_t *)v115.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v115.i8), v113, vbsl_s8(vceqz_s8(*(int8x8_t *)v117.i8), v116, (int8x8_t)vmin_u8(v124, (uint8x8_t)vqtbl1_s8(v17, (int8x8_t)0x707070703030303))));
      a14 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v115, a9));
      *int8x16_t v22 = a14.i32[0];
      long long v125 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v125 >= v21) {
        uint64_t v126 = -(uint64_t)a5;
      }
      else {
        uint64_t v126 = 0;
      }
      unint64_t v20 = &v125[v126];
      v22 += a6;
      --v103;
    }
    while (v103);
  }
  *BOOL result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)20,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v18 = a15;
  unint64_t v19 = *result;
  unint64_t v20 = *a3;
  unint64_t v21 = *a2;
  int8x16_t v22 = *a4;
  if (a15 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = -1;
  }
  int8x16_t v26 = vandq_s8(vdupq_n_s8(v25), v24);
  uint64_t v27 = 4 * a6;
  uint64_t v28 = 16 * a6;
  uint16x8_t v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i32[1] = 117901063;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    __int32 v31 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      int64_t v38 = (unsigned __int8 *)&v22[v18];
      uint64_t v39 = (int8x16_t *)v22;
      do
        int64_t v40 = v39++;
      while (v39 <= (int8x16_t *)v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, v30)) & 0x80) != 0);
      do
      {
        unint64_t v41 = v40;
        int64_t v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= (int8x16_t *)v38 && v41->i32[0] == -1);
      if (v41 < (int8x16_t *)v38)
      {
        while (v41->u8[0] == 255)
        {
          unint64_t v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= (int8x16_t *)v38)
          {
            unint64_t v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      uint64_t v42 = 0;
      int64_t v43 = (char *)v41 - v22;
      unint64_t v44 = (char *)v41 - v22;
      do
      {
        int8x16_t v45 = vorrq_s8(*(int8x16_t *)((char *)v19 + v42), a9);
        int8x16_t v46 = vorrq_s8(*(int8x16_t *)((char *)v21 + v42), v26);
        int8x16_t v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v49 = vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        uint8x16_t v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        uint16x8_t v51 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v50.i8);
        uint16x8_t v52 = vmull_high_u8(v50, v50);
        int8x8_t v53 = (int8x8_t)vextq_s8(v48, v48, 8uLL).u64[0];
        *(int8x8_t *)v51.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v51.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v51)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
        int16x8_t v54 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v52.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v53, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v52)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v53, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
        uint16x8_t v55 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v47.i8);
        uint16x8_t v56 = vmull_u8((uint8x8_t)vqmovun_s16(v54), (uint8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
        uint8x16_t v57 = vqsubq_u8(v50, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v51.i8, v54));
        uint16x8_t v58 = vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v49.i8);
        uint16x8_t v59 = vmull_high_u8(v57, v49);
        uint16x8_t v60 = vqaddq_u16(v55, vqaddq_u16(v58, v58));
        uint16x8_t v61 = vqaddq_u16(v56, vqaddq_u16(v59, v59));
        uint8x16_t v62 = (uint8x16_t)vmvnq_s8(v47);
        uint16x8_t v63 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v62.i8);
        uint16x8_t v64 = vmull_high_u8(v50, v62);
        uint16x8_t v65 = vqaddq_u16(v60, v63);
        uint16x8_t v66 = vqaddq_u16(v61, v64);
        uint8x16_t v67 = (uint8x16_t)vmvnq_s8(v48);
        uint16x8_t v68 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v67.i8);
        uint16x8_t v69 = vmull_high_u8(v49, v67);
        v135.val[1] = (int8x16_t)vqaddq_u16(v65, v68);
        uint16x8_t v70 = vqaddq_u16(v66, v69);
        uint16x8_t v71 = vminq_u16((uint16x8_t)v135.val[1], v29);
        uint16x8_t v72 = vminq_u16(v70, v29);
        v135.val[0] = (int8x16_t)vrsraq_n_u16(v71, v71, 8uLL);
        uint16x8_t v73 = vrsraq_n_u16(v72, v72, 8uLL);
        *(uint8x8_t *)v135.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v135.val[0], 8uLL);
        *(uint8x8_t *)v135.val[1].i8 = vqrshrn_n_u16(v73, 8uLL);
        uint8x16_t v74 = (uint8x16_t)vqtbl2q_s8(v135, (int8x16_t)xmmword_1850CD8F0);
        uint8x16_t v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v135.val[0].i8, v73, 8uLL);
        int8x16_t v16 = (int8x16_t)vminq_u8(v17, v74);
        int8x16_t v15 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v21 + v42) = vbslq_s8(v15, v46, vbslq_s8(vceqzq_s8(v48), v45, v16));
        v22 += v27;
        v44 -= 4;
        v42 += v28;
      }
      while (v44 > 3);
      unint64_t v21 = (_DWORD *)((char *)v21 + v42);
      unint64_t v19 = (_DWORD *)((char *)v19 + v42);
      unint64_t v18 = v18 - v43 + v44;
      goto LABEL_37;
    }
    if (v31) {
      break;
    }
    __int32 v32 = (unsigned __int8 *)&v22[v18];
    int64_t v33 = (int8x16_t *)v22;
    do
      int64_t v34 = v33++;
    while (v33 <= (int8x16_t *)v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      uint64_t v35 = v34;
      int64_t v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= (int8x16_t *)v32 && !v35->i32[0]);
    if (v35 < (int8x16_t *)v32)
    {
      while (!v35->i8[0])
      {
        uint64_t v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= (int8x16_t *)v32)
        {
          uint64_t v35 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    int64_t v36 = (char *)v35 - v22;
    int64_t v37 = ((char *)v35 - v22) * a6;
    v19 += v37;
    v21 += v37;
    v22 += v37;
    v18 -= v36;
LABEL_37:
    if (v18 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v75 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    int8x16_t v76 = vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v77 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v75), a9);
    int8x16_t v78 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v76)), *(int8x16_t *)((char *)v21 + v75));
    uint16x8_t v79 = vminq_u16(vmull_u8(*(uint8x8_t *)v77.i8, *(uint8x8_t *)v76.i8), v29);
    uint16x8_t v80 = vminq_u16(vmull_high_u8(v77, (uint8x16_t)v76), v29);
    uint16x8_t v81 = vrsraq_n_u16(v80, v80, 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(vrsraq_n_u16(v79, v79, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v81, 8uLL);
    int8x16_t v82 = vqtbl2q_s8(*(int8x16x2_t *)v16.i8, (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v83 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v16.i8, v81, 8uLL);
    int8x16_t v84 = vqtbl1q_s8(v78, (int8x16_t)xmmword_1850CD8D0);
    uint8x16_t v85 = vminq_u8((uint8x16_t)v83, (uint8x16_t)v82);
    uint8x16_t v86 = vminq_u8((uint8x16_t)v78, (uint8x16_t)v84);
    uint16x8_t v87 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v86.i8);
    uint16x8_t v88 = vmull_high_u8(v86, v86);
    int8x8_t v89 = (int8x8_t)vextq_s8(v84, v84, 8uLL).u64[0];
    *(int8x8_t *)v87.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v87.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v87)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
    int16x8_t v90 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v88.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v89, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v88)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v89, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
    uint16x8_t v91 = vmull_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v82.i8);
    uint16x8_t v92 = vmull_u8((uint8x8_t)vqmovun_s16(v90), (uint8x8_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
    uint8x16_t v93 = vqsubq_u8(v86, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v87.i8, v90));
    uint16x8_t v94 = vmull_u8(*(uint8x8_t *)v93.i8, *(uint8x8_t *)v85.i8);
    uint16x8_t v95 = vmull_high_u8(v93, v85);
    uint16x8_t v96 = vqaddq_u16(v91, vqaddq_u16(v94, v94));
    uint16x8_t v97 = vqaddq_u16(v92, vqaddq_u16(v95, v95));
    uint8x16_t v98 = (uint8x16_t)vmvnq_s8(v82);
    uint16x8_t v99 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v98.i8);
    uint16x8_t v100 = vmull_high_u8(v86, v98);
    uint16x8_t v101 = vqaddq_u16(v96, v99);
    uint16x8_t v102 = vqaddq_u16(v97, v100);
    uint8x16_t v103 = (uint8x16_t)vmvnq_s8(v84);
    uint16x8_t v104 = vmull_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v103.i8);
    uint16x8_t v105 = vmull_high_u8(v85, v103);
    v136.val[1] = (int8x16_t)vqaddq_u16(v101, v104);
    uint16x8_t v106 = vqaddq_u16(v102, v105);
    uint16x8_t v107 = vminq_u16((uint16x8_t)v136.val[1], v29);
    uint16x8_t v108 = vminq_u16(v106, v29);
    v136.val[0] = (int8x16_t)vrsraq_n_u16(v107, v107, 8uLL);
    uint16x8_t v109 = vrsraq_n_u16(v108, v108, 8uLL);
    *(uint8x8_t *)v136.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v136.val[0], 8uLL);
    *(uint8x8_t *)v136.val[1].i8 = vqrshrn_n_u16(v109, 8uLL);
    uint8x16_t v110 = (uint8x16_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_1850CD8F0);
    uint8x16_t v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v136.val[0].i8, v109, 8uLL);
    int8x16_t v16 = (int8x16_t)vminq_u8(v17, v110);
    int8x16_t v15 = vbslq_s8(vceqzq_s8(v84), v83, v16);
    *(int8x16_t *)((char *)v21 + v75) = vbslq_s8(vceqzq_s8(v82), v78, v15);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4) {
      break;
    }
    __int32 v31 = *(_DWORD *)v22;
    v75 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v19 = (_DWORD *)((char *)v19 + v75);
      unint64_t v21 = (_DWORD *)((char *)v21 + v75);
      goto LABEL_37;
    }
  }
  unint64_t v19 = (_DWORD *)((char *)v19 + v28 + v75);
  unint64_t v21 = (_DWORD *)((char *)v21 + v28 + v75);
LABEL_40:
  uint64_t v111 = v18 + a14;
  if (v111)
  {
    if (a7) {
      unsigned int v112 = 0;
    }
    else {
      unsigned int v112 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v112), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v113 = 0;
    }
    else {
      unsigned int v113 = -1;
    }
    int8x8_t v114 = vand_s8(vdup_n_s8(v113), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v115 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v19;
      uint16x8_t v116 = vmovl_u8(a13);
      LOBYTE(v117) = v116.i8[0];
      BYTE1(v117) = v116.i8[2];
      BYTE2(v117) = v116.i8[4];
      HIBYTE(v117) = v116.i8[6];
      v116.i32[0] = *v21;
      int8x16_t v118 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v116.i8);
      LOBYTE(v119) = v118.i8[0];
      BYTE1(v119) = v118.i8[2];
      BYTE2(v119) = v118.i8[4];
      HIBYTE(v119) = v118.i8[6];
      v120.i8[7] = 0;
      v120.i8[0] = *v22;
      v120.i8[1] = *v22;
      v120.i8[2] = *v22;
      *(__int32 *)((char *)v120.i32 + 3) = *v22;
      *(int8x8_t *)v118.i8 = vorr_s8(vbic_s8(v114, vceqz_s8(v120)), (int8x8_t)v119);
      uint16x8_t v121 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v117, *(int8x8_t *)a9.i8), (uint8x8_t)v120), v115);
      uint16x8_t v122 = vrsraq_n_u16(v121, v121, 8uLL);
      int8x8_t v123 = (int8x8_t)vqrshrn_n_u16(v122, 8uLL);
      *(int8x8_t *)v122.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v123, v122, 8uLL), (int8x8_t)0x707070703030303);
      v124.i64[0] = v118.i64[0];
      v124.i64[1] = v118.i64[0];
      *(int8x8_t *)v124.i8 = vqtbl1_s8(v124, (int8x8_t)0x707070703030303);
      uint8x8_t v125 = vmin_u8((uint8x8_t)v123, *(uint8x8_t *)v122.i8);
      uint8x8_t v126 = vmin_u8(*(uint8x8_t *)v118.i8, *(uint8x8_t *)v124.i8);
      uint16x8_t v127 = vmull_u8(v126, v126);
      *(int8x8_t *)v127.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v127.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v118.u8[3]) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v127)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v118.u8[7]) & 0xFF00FF00FF00FFLL)))))));
      uint16x8_t v128 = vmull_u8(*(uint8x8_t *)v127.i8, *(uint8x8_t *)v122.i8);
      uint16x8_t v129 = vmull_u8(vqsub_u8(v126, *(uint8x8_t *)v127.i8), v125);
      uint16x8_t v130 = vminq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(v128, vqaddq_u16(v129, v129)), vmull_u8(v126, (uint8x8_t)vmvn_s8(*(int8x8_t *)v122.i8))), vmull_u8(v125, (uint8x8_t)vmvn_s8(*(int8x8_t *)v124.i8))), v115);
      uint16x8_t v131 = vrsraq_n_u16(v130, v130, 8uLL);
      uint8x8_t v132 = vqrshrn_n_u16(v131, 8uLL);
      *(int8x8_t *)v118.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v122.i8), *(int8x8_t *)v118.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v124.i8), v123, (int8x8_t)vmin_u8(v132, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v132, v131, 8uLL), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v118, a9));
      *unint64_t v21 = a13.i32[0];
      uint64_t v133 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v133 >= v20) {
        uint64_t v134 = -(uint64_t)a5;
      }
      else {
        uint64_t v134 = 0;
      }
      unint64_t v19 = &v133[v134];
      v21 += a6;
      --v111;
    }
    while (v111);
  }
  *BOOL result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)19,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v19 = a16;
  unint64_t v20 = *result;
  unint64_t v21 = *a3;
  int8x16_t v22 = *a2;
  unsigned int v23 = *a4;
  if (a16 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  v25.i64[0] = 0xFF000000FF000000;
  v25.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v24), v25);
  if (a8) {
    unsigned int v26 = 0;
  }
  else {
    unsigned int v26 = -1;
  }
  int8x16_t v27 = vandq_s8(vdupq_n_s8(v26), v25);
  uint64_t v28 = 4 * a6;
  uint64_t v29 = 16 * a6;
  float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  a14.i64[0] = -1;
  a14.i64[1] = -1;
  while (1)
  {
    __int32 v31 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      int64_t v38 = (unsigned __int8 *)&v23[v19];
      uint64_t v39 = (int8x16_t *)v23;
      do
        int64_t v40 = v39++;
      while (v39 <= (int8x16_t *)v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, a14)) & 0x80) != 0);
      do
      {
        unint64_t v41 = v40;
        int64_t v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= (int8x16_t *)v38 && v41->i32[0] == -1);
      if (v41 < (int8x16_t *)v38)
      {
        while (v41->u8[0] == 255)
        {
          unint64_t v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= (int8x16_t *)v38)
          {
            unint64_t v41 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      uint64_t v42 = 0;
      int64_t v43 = (char *)v41 - v23;
      unint64_t v44 = (char *)v41 - v23;
      do
      {
        int8x16_t v45 = vorrq_s8(*(int8x16_t *)((char *)v20 + v42), a9);
        int8x16_t v46 = vorrq_s8(*(int8x16_t *)((char *)v22 + v42), v27);
        int8x16_t v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v49 = (int8x16_t)vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        uint8x16_t v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        int8x16_t v51 = (int8x16_t)vqsubq_u8((uint8x16_t)v48, v50);
        float32x4_t v52 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        float32x4_t v53 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        int8x8_t v54 = (int8x8_t)vextq_s8(v51, v51, 8uLL).u64[0];
        float32x4_t v55 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v54, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        float32x4_t v56 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v54, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        uint16x8_t v57 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v47.i8);
        uint16x8_t v58 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v47);
        int8x8_t v59 = (int8x8_t)vextq_s8(v49, v49, 8uLL).u64[0];
        uint64_t v60 = *(void *)&vzip2_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        uint64_t v61 = *(void *)&vzip1_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        uint16x8_t v62 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v48.i8);
        uint16x8_t v63 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v48);
        uint8x16_t v64 = (uint8x16_t)vmvnq_s8(v47);
        uint16x8_t v65 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v64.i8);
        uint16x8_t v66 = vmull_high_u8(v50, v64);
        uint8x16_t v67 = (uint8x16_t)vmvnq_s8(v48);
        uint16x8_t v68 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v67.i8);
        uint16x8_t v69 = vmull_high_u8((uint8x16_t)v49, v67);
        int32x4_t v18 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v65)), vcvtq_f32_u32(vmovl_high_u16(v68))), vcvtq_f32_u32(vmovl_high_u16(v62))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v53, vcvtq_f32_u32(vmovl_high_u16(v57))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v60))), (int8x16_t)vceqzq_f32(v53))), v30));
        int16x8_t v70 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v68.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v62.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v52, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v57.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v61))), (int8x16_t)vceqzq_f32(v52))), v30))), v18);
        *(int8x8_t *)v70.i8 = vqmovun_s16(v70);
        int16x8_t v71 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v66.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v69.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v63.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v55, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v58.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v59, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v55))), v30))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                        vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v66)), vcvtq_f32_u32(vmovl_high_u16(v69))),
                        vcvtq_f32_u32(vmovl_high_u16(v63))),
                      (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v56, vcvtq_f32_u32(vmovl_high_u16(v58))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v59, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v56))), v30)));
        *(int8x8_t *)v18.i8 = vqmovun_s16(v71);
        int8x16_t v17 = (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v70.i8, v71), (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_1850CD8F0));
        int8x16_t v16 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v22 + v42) = vbslq_s8(v16, v46, vbslq_s8(vceqzq_s8(v48), v45, v17));
        v23 += v28;
        v44 -= 4;
        v42 += v29;
      }
      while (v44 > 3);
      int8x16_t v22 = (_DWORD *)((char *)v22 + v42);
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v42);
      unint64_t v19 = v19 - v43 + v44;
      goto LABEL_37;
    }
    if (v31) {
      break;
    }
    __int32 v32 = (unsigned __int8 *)&v23[v19];
    int64_t v33 = (int8x16_t *)v23;
    do
      int64_t v34 = v33++;
    while (v33 <= (int8x16_t *)v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      uint64_t v35 = v34;
      int64_t v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= (int8x16_t *)v32 && !v35->i32[0]);
    if (v35 < (int8x16_t *)v32)
    {
      while (!v35->i8[0])
      {
        uint64_t v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= (int8x16_t *)v32)
        {
          uint64_t v35 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    int64_t v36 = (char *)v35 - v23;
    int64_t v37 = ((char *)v35 - v23) * a6;
    v20 += v37;
    v22 += v37;
    v23 += v37;
    v19 -= v36;
LABEL_37:
    if (v19 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v72 = 0;
  while (1)
  {
    v16.i32[0] = v31;
    int8x16_t v73 = vqtbl1q_s8(v16, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v74 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v20 + v72), a9);
    int8x16_t v75 = vorrq_s8(vbicq_s8(v27, vceqzq_s8(v73)), *(int8x16_t *)((char *)v22 + v72));
    uint16x8_t v76 = vmull_u8(*(uint8x8_t *)v74.i8, *(uint8x8_t *)v73.i8);
    uint16x8_t v77 = vmull_high_u8(v74, (uint8x16_t)v73);
    uint16x8_t v78 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    uint16x8_t v79 = vminq_u16(v76, v78);
    uint16x8_t v80 = vminq_u16(v77, v78);
    uint16x8_t v81 = vrsraq_n_u16(v80, v80, 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(vrsraq_n_u16(v79, v79, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(v81, 8uLL);
    int8x16_t v82 = vqtbl2q_s8(*(int8x16x2_t *)v17.i8, (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v83 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v17.i8, v81, 8uLL);
    int8x16_t v84 = vqtbl1q_s8(v75, (int8x16_t)xmmword_1850CD8D0);
    int8x16_t v85 = (int8x16_t)vminq_u8((uint8x16_t)v83, (uint8x16_t)v82);
    uint8x16_t v86 = vminq_u8((uint8x16_t)v75, (uint8x16_t)v84);
    int8x16_t v87 = (int8x16_t)vqsubq_u8((uint8x16_t)v84, v86);
    float32x4_t v88 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    *(int8x8_t *)v18.i8 = vzip2_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)a9.i8);
    v18.i32[0] &= 0xFF00FFu;
    v18.i16[2] = v18.u8[4];
    v18.i16[3] = v18.u8[6];
    float32x4_t v89 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8));
    int8x8_t v90 = (int8x8_t)vextq_s8(v87, v87, 8uLL).u64[0];
    float32x4_t v91 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v90, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    float32x4_t v92 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v90, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    uint16x8_t v93 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v82.i8);
    uint16x8_t v94 = vmull_high_u8((uint8x16_t)v82, (uint8x16_t)v82);
    int8x8_t v95 = (int8x8_t)vextq_s8(v85, v85, 8uLL).u64[0];
    uint64_t v96 = *(void *)&vzip2_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    uint64_t v97 = *(void *)&vzip1_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    uint16x8_t v98 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v84.i8);
    uint16x8_t v99 = vmull_high_u8((uint8x16_t)v82, (uint8x16_t)v84);
    uint8x16_t v100 = (uint8x16_t)vmvnq_s8(v82);
    uint16x8_t v101 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v100.i8);
    uint16x8_t v102 = vmull_high_u8(v86, v100);
    uint8x16_t v103 = (uint8x16_t)vmvnq_s8(v84);
    uint16x8_t v104 = vmull_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v103.i8);
    uint16x8_t v105 = vmull_high_u8((uint8x16_t)v85, v103);
    int32x4_t v18 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v101)), vcvtq_f32_u32(vmovl_high_u16(v104))), vcvtq_f32_u32(vmovl_high_u16(v98))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v89, vcvtq_f32_u32(vmovl_high_u16(v93))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v96))), (int8x16_t)vceqzq_f32(v89))), v30));
    int16x8_t v106 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v101.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v104.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v98.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v88, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v93.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v97))), (int8x16_t)vceqzq_f32(v88))), v30))), v18);
    *(int8x8_t *)v106.i8 = vqmovun_s16(v106);
    int16x8_t v107 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v102.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v105.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v99.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v91, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v94.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v95, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v91))), v30))), vcvtnq_s32_f32(vmulq_f32(
                 vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v102)), vcvtq_f32_u32(vmovl_high_u16(v105))), vcvtq_f32_u32(vmovl_high_u16(v99))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v92, vcvtq_f32_u32(vmovl_high_u16(v94))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v95, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v92))), v30)));
    *(int8x8_t *)v18.i8 = vqmovun_s16(v107);
    int8x16_t v17 = (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v106.i8, v107), (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_1850CD8F0));
    int8x16_t v16 = vbslq_s8(vceqzq_s8(v84), v83, v17);
    *(int8x16_t *)((char *)v22 + v72) = vbslq_s8(vceqzq_s8(v82), v75, v16);
    v23 += v28;
    v19 -= 4;
    if (v19 < 4) {
      break;
    }
    __int32 v31 = *(_DWORD *)v23;
    v72 += v29;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v72);
      int8x16_t v22 = (_DWORD *)((char *)v22 + v72);
      goto LABEL_37;
    }
  }
  unint64_t v20 = (unsigned __int32 *)((char *)v20 + v29 + v72);
  int8x16_t v22 = (_DWORD *)((char *)v22 + v29 + v72);
LABEL_40:
  uint64_t v108 = v19 + a15;
  if (v108)
  {
    if (a7) {
      unsigned int v109 = 0;
    }
    else {
      unsigned int v109 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v109), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v110 = 0;
    }
    else {
      unsigned int v110 = -1;
    }
    int8x8_t v111 = vand_s8(vdup_n_s8(v110), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v112 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    float32x4_t v113 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    do
    {
      a14.i32[0] = *v20;
      uint16x8_t v114 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v115) = v114.i8[0];
      BYTE1(v115) = v114.i8[2];
      BYTE2(v115) = v114.i8[4];
      HIBYTE(v115) = v114.i8[6];
      v114.i32[0] = *v22;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v114.i8);
      LOBYTE(v116) = a14.i8[0];
      BYTE1(v116) = a14.i8[2];
      BYTE2(v116) = a14.i8[4];
      HIBYTE(v116) = a14.i8[6];
      v117.i8[7] = 0;
      v117.i8[0] = *v23;
      v117.i8[1] = *v23;
      v117.i8[2] = *v23;
      *(__int32 *)((char *)v117.i32 + 3) = *v23;
      *(int8x8_t *)a14.i8 = vorr_s8(vbic_s8(v111, vceqz_s8(v117)), (int8x8_t)v116);
      uint16x8_t v118 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v115, *(int8x8_t *)a9.i8), (uint8x8_t)v117), v112);
      uint16x8_t v119 = vrsraq_n_u16(v118, v118, 8uLL);
      int8x8_t v120 = (int8x8_t)vqrshrn_n_u16(v119, 8uLL);
      *(int8x8_t *)v119.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v120, v119, 8uLL), (int8x8_t)0x707070703030303);
      v121.i64[0] = a14.i64[0];
      v121.i64[1] = a14.i64[0];
      *(int8x8_t *)v121.i8 = vqtbl1_s8(v121, (int8x8_t)0x707070703030303);
      int8x8_t v122 = (int8x8_t)vmin_u8((uint8x8_t)v120, *(uint8x8_t *)v119.i8);
      uint8x8_t v123 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v121.i8);
      int8x8_t v124 = (int8x8_t)vqsub_u8(*(uint8x8_t *)v121.i8, v123);
      float32x4_t v125 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v124, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      float32x4_t v126 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v124, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      uint16x8_t v127 = vmull_u8(*(uint8x8_t *)v119.i8, *(uint8x8_t *)v119.i8);
      uint64_t v128 = *(void *)&vzip2_s8(v122, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      uint64_t v129 = *(void *)&vzip1_s8(v122, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      uint16x8_t v130 = vmull_u8(*(uint8x8_t *)v119.i8, *(uint8x8_t *)v121.i8);
      uint16x8_t v131 = vmull_u8(v123, (uint8x8_t)vmvn_s8(*(int8x8_t *)v119.i8));
      uint16x8_t v132 = vmull_u8((uint8x8_t)v122, (uint8x8_t)vmvn_s8(*(int8x8_t *)v121.i8));
      int16x8_t v133 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v131.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v132.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v130.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v125, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v127.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v129))), (int8x16_t)vceqzq_f32(v125))), v113))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                       vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v131)), vcvtq_f32_u32(vmovl_high_u16(v132))),
                       vcvtq_f32_u32(vmovl_high_u16(v130))),
                     (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v126, vcvtq_f32_u32(vmovl_high_u16(v127))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v128))), (int8x16_t)vceqzq_f32(v126))), v113)));
      *(int8x8_t *)v131.i8 = vqmovun_s16(v133);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v119.i8), *(int8x8_t *)a14.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v121.i8), v120, (int8x8_t)vmin_u8(*(uint8x8_t *)v131.i8, (uint8x8_t)vqtbl1_s8(vqmovun_high_s16(*(int8x8_t *)v131.i8, v133), (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *int8x16_t v22 = a14.i32[0];
      uint64_t v134 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v134 >= v21) {
        uint64_t v135 = -(uint64_t)a5;
      }
      else {
        uint64_t v135 = 0;
      }
      unint64_t v20 = &v134[v135];
      v22 += a6;
      --v108;
    }
    while (v108);
  }
  *BOOL result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)18,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v18 = a15;
  unint64_t v19 = *result;
  unint64_t v20 = *a3;
  unint64_t v21 = *a2;
  int8x16_t v22 = *a4;
  if (a15 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = -1;
  }
  int8x16_t v26 = vandq_s8(vdupq_n_s8(v25), v24);
  uint64_t v27 = 4 * a6;
  uint64_t v28 = 16 * a6;
  uint16x8_t v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i32[1] = 117901063;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    __int32 v31 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      int64_t v38 = (unsigned __int8 *)&v22[v18];
      uint64_t v39 = (int8x16_t *)v22;
      do
        int64_t v40 = v39++;
      while (v39 <= (int8x16_t *)v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, v30)) & 0x80) != 0);
      do
      {
        unint64_t v41 = v40;
        int64_t v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= (int8x16_t *)v38 && v41->i32[0] == -1);
      if (v41 < (int8x16_t *)v38)
      {
        while (v41->u8[0] == 255)
        {
          unint64_t v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= (int8x16_t *)v38)
          {
            unint64_t v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      uint64_t v42 = 0;
      unint64_t v43 = (char *)v41 - v22;
      unint64_t v44 = v43;
      do
      {
        int8x16_t v45 = vorrq_s8(*(int8x16_t *)((char *)v19 + v42), a9);
        int8x16_t v46 = vorrq_s8(*(int8x16_t *)((char *)v21 + v42), v26);
        int8x16_t v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v49 = vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        int8x16_t v50 = (int8x16_t)vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        uint8x16_t v51 = (uint8x16_t)vmvnq_s8(v48);
        uint16x8_t v52 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v51.i8);
        v126.val[1] = (int8x16_t)vmull_high_u8(v49, v51);
        unsigned long long v53 = *(_OWORD *)&v49 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
        int8x16_t v54 = vbicq_s8(vtstq_s8(v50, v50), (int8x16_t)vcgtq_u8((uint8x16_t)v47, (uint8x16_t)v53));
        int8x16_t v55 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v47, (uint8x16_t)v53), vceqzq_s8(v50));
        uint64_t v56 = *(void *)&vzip1_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        uint64_t v57 = *(void *)&vzip2_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v55.i64[0] = vextq_s8(v55, v55, 8uLL).u64[0];
        uint16x8_t v58 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v47.i8);
        uint16x8_t v59 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v47);
        int8x8_t v60 = (int8x8_t)vextq_s8(v50, v50, 8uLL).u64[0];
        int8x16_t v61 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v58.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v56))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v58))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v57)))));
        int8x16_t v62 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v60, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v59.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v60, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v59))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
        uint8x16_t v63 = (uint8x16_t)vmvnq_s8(v47);
        uint16x8_t v64 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v63.i8);
        uint16x8_t v65 = vmull_high_u8((uint8x16_t)v50, v63);
        uint16x8_t v66 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v61, (int8x16_t)vmovl_s8(*(int8x8_t *)v54.i8)), v64), v52), v29);
        uint16x8_t v67 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v62, (int8x16_t)vmovl_high_s8(v54)), v65), (uint16x8_t)v126.val[1]), v29);
        v126.val[0] = (int8x16_t)vrsraq_n_u16(v66, v66, 8uLL);
        uint16x8_t v68 = vrsraq_n_u16(v67, v67, 8uLL);
        *(uint8x8_t *)v126.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v126.val[0], 8uLL);
        *(uint8x8_t *)v126.val[1].i8 = vqrshrn_n_u16(v68, 8uLL);
        uint8x16_t v69 = (uint8x16_t)vqtbl2q_s8(v126, (int8x16_t)xmmword_1850CD8F0);
        uint8x16_t v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v126.val[0].i8, v68, 8uLL);
        int8x16_t v16 = (int8x16_t)vminq_u8(v17, v69);
        int8x16_t v15 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v21 + v42) = vbslq_s8(v15, v46, vbslq_s8(vceqzq_s8(v48), v45, v16));
        v22 += v27;
        v44 -= 4;
        v42 += v28;
      }
      while (v44 > 3);
      unint64_t v21 = (_DWORD *)((char *)v21 + v42);
      unint64_t v19 = (_DWORD *)((char *)v19 + v42);
      unint64_t v18 = v18 - v43 + v44;
      goto LABEL_37;
    }
    if (v31) {
      break;
    }
    __int32 v32 = (unsigned __int8 *)&v22[v18];
    int64_t v33 = (int8x16_t *)v22;
    do
      int64_t v34 = v33++;
    while (v33 <= (int8x16_t *)v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      uint64_t v35 = v34;
      int64_t v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= (int8x16_t *)v32 && !v35->i32[0]);
    if (v35 < (int8x16_t *)v32)
    {
      while (!v35->i8[0])
      {
        uint64_t v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= (int8x16_t *)v32)
        {
          uint64_t v35 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    int64_t v36 = (char *)v35 - v22;
    int64_t v37 = ((char *)v35 - v22) * a6;
    v19 += v37;
    v21 += v37;
    v22 += v37;
    v18 -= v36;
LABEL_37:
    if (v18 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v70 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    int8x16_t v71 = vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v72 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v70), a9);
    int8x16_t v73 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v71)), *(int8x16_t *)((char *)v21 + v70));
    uint16x8_t v74 = vminq_u16(vmull_u8(*(uint8x8_t *)v72.i8, *(uint8x8_t *)v71.i8), v29);
    uint16x8_t v75 = vminq_u16(vmull_high_u8(v72, (uint8x16_t)v71), v29);
    uint16x8_t v76 = vrsraq_n_u16(v75, v75, 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(vrsraq_n_u16(v74, v74, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v76, 8uLL);
    int8x16_t v77 = vqtbl2q_s8(*(int8x16x2_t *)v16.i8, (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v78 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v16.i8, v76, 8uLL);
    int8x16_t v79 = vqtbl1q_s8(v73, (int8x16_t)xmmword_1850CD8D0);
    uint8x16_t v80 = vminq_u8((uint8x16_t)v78, (uint8x16_t)v77);
    int8x16_t v81 = (int8x16_t)vminq_u8((uint8x16_t)v73, (uint8x16_t)v79);
    uint8x16_t v82 = (uint8x16_t)vmvnq_s8(v79);
    uint16x8_t v83 = vmull_u8(*(uint8x8_t *)v80.i8, *(uint8x8_t *)v82.i8);
    v127.val[1] = (int8x16_t)vmull_high_u8(v80, v82);
    unsigned long long v84 = *(_OWORD *)&v80 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
    int8x16_t v85 = vbicq_s8(vtstq_s8(v81, v81), (int8x16_t)vcgtq_u8((uint8x16_t)v77, (uint8x16_t)v84));
    int8x16_t v86 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v77, (uint8x16_t)v84), vceqzq_s8(v81));
    uint64_t v87 = *(void *)&vzip1_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    uint64_t v88 = *(void *)&vzip2_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v86.i64[0] = vextq_s8(v86, v86, 8uLL).u64[0];
    uint16x8_t v89 = vmull_u8(*(uint8x8_t *)v77.i8, *(uint8x8_t *)v77.i8);
    uint16x8_t v90 = vmull_high_u8((uint8x16_t)v77, (uint8x16_t)v77);
    int8x8_t v91 = (int8x8_t)vextq_s8(v81, v81, 8uLL).u64[0];
    int8x16_t v92 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v89.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v87))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v89))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v88)))));
    int8x16_t v93 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v91, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v90.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v91, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v90))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
    uint8x16_t v94 = (uint8x16_t)vmvnq_s8(v77);
    uint16x8_t v95 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v94.i8);
    uint16x8_t v96 = vmull_high_u8((uint8x16_t)v81, v94);
    uint16x8_t v97 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v92, (int8x16_t)vmovl_s8(*(int8x8_t *)v85.i8)), v95), v83), v29);
    uint16x8_t v98 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v93, (int8x16_t)vmovl_high_s8(v85)), v96), (uint16x8_t)v127.val[1]), v29);
    v127.val[0] = (int8x16_t)vrsraq_n_u16(v97, v97, 8uLL);
    uint16x8_t v99 = vrsraq_n_u16(v98, v98, 8uLL);
    *(uint8x8_t *)v127.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v127.val[0], 8uLL);
    *(uint8x8_t *)v127.val[1].i8 = vqrshrn_n_u16(v99, 8uLL);
    uint8x16_t v100 = (uint8x16_t)vqtbl2q_s8(v127, (int8x16_t)xmmword_1850CD8F0);
    uint8x16_t v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v127.val[0].i8, v99, 8uLL);
    int8x16_t v16 = (int8x16_t)vminq_u8(v17, v100);
    int8x16_t v15 = vbslq_s8(vceqzq_s8(v79), v78, v16);
    *(int8x16_t *)((char *)v21 + v70) = vbslq_s8(vceqzq_s8(v77), v73, v15);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4) {
      break;
    }
    __int32 v31 = *(_DWORD *)v22;
    v70 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v19 = (_DWORD *)((char *)v19 + v70);
      unint64_t v21 = (_DWORD *)((char *)v21 + v70);
      goto LABEL_37;
    }
  }
  unint64_t v19 = (_DWORD *)((char *)v19 + v28 + v70);
  unint64_t v21 = (_DWORD *)((char *)v21 + v28 + v70);
LABEL_40:
  uint64_t v101 = v18 + a14;
  if (v101)
  {
    if (a7) {
      unsigned int v102 = 0;
    }
    else {
      unsigned int v102 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v102), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v103 = 0;
    }
    else {
      unsigned int v103 = -1;
    }
    int8x8_t v104 = vand_s8(vdup_n_s8(v103), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v105 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v19;
      uint16x8_t v106 = vmovl_u8(a13);
      LOBYTE(v107) = v106.i8[0];
      BYTE1(v107) = v106.i8[2];
      BYTE2(v107) = v106.i8[4];
      HIBYTE(v107) = v106.i8[6];
      v106.i32[0] = *v21;
      int8x16_t v108 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v106.i8);
      LOBYTE(v109) = v108.i8[0];
      BYTE1(v109) = v108.i8[2];
      BYTE2(v109) = v108.i8[4];
      HIBYTE(v109) = v108.i8[6];
      v110.i8[7] = 0;
      v110.i8[0] = *v22;
      v110.i8[1] = *v22;
      v110.i8[2] = *v22;
      *(__int32 *)((char *)v110.i32 + 3) = *v22;
      *(int8x8_t *)v108.i8 = vorr_s8(vbic_s8(v104, vceqz_s8(v110)), (int8x8_t)v109);
      uint16x8_t v111 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v107, *(int8x8_t *)a9.i8), (uint8x8_t)v110), v105);
      uint16x8_t v112 = vrsraq_n_u16(v111, v111, 8uLL);
      int8x8_t v113 = (int8x8_t)vqrshrn_n_u16(v112, 8uLL);
      *(int8x8_t *)v112.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v113, v112, 8uLL), (int8x8_t)0x707070703030303);
      v114.i64[0] = v108.i64[0];
      v114.i64[1] = v108.i64[0];
      *(int8x8_t *)v114.i8 = vqtbl1_s8(v114, (int8x8_t)0x707070703030303);
      uint8x8_t v115 = vmin_u8((uint8x8_t)v113, *(uint8x8_t *)v112.i8);
      int8x8_t v116 = (int8x8_t)vmin_u8(*(uint8x8_t *)v108.i8, *(uint8x8_t *)v114.i8);
      uint16x8_t v117 = vmull_u8(v115, (uint8x8_t)vmvn_s8(*(int8x8_t *)v114.i8));
      *(void *)&v115 &= 0xFFFFFF00FFFFFFuLL;
      int8x16_t v118 = (int8x16_t)vmovl_s8(vbic_s8(vtst_s8(v116, v116), (int8x8_t)vcgt_u8(*(uint8x8_t *)v112.i8, v115)));
      int8x8_t v119 = vorr_s8((int8x8_t)vqsub_u8(*(uint8x8_t *)v112.i8, v115), vceqz_s8(v116));
      uint16x8_t v120 = vmull_u8(*(uint8x8_t *)v112.i8, *(uint8x8_t *)v112.i8);
      uint16x8_t v121 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v116, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v120.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v119, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v116, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v120))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v119, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))),
                                 v118),
                   vmull_u8((uint8x8_t)v116, (uint8x8_t)vmvn_s8(*(int8x8_t *)v112.i8))),
                 v117),
               v105);
      uint16x8_t v122 = vrsraq_n_u16(v121, v121, 8uLL);
      uint8x8_t v123 = vqrshrn_n_u16(v122, 8uLL);
      *(int8x8_t *)v108.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v112.i8), *(int8x8_t *)v108.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v114.i8), v113, (int8x8_t)vmin_u8(v123, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v123, v122, 8uLL), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v108, a9));
      *unint64_t v21 = a13.i32[0];
      int8x8_t v124 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v124 >= v20) {
        uint64_t v125 = -(uint64_t)a5;
      }
      else {
        uint64_t v125 = 0;
      }
      unint64_t v19 = &v124[v125];
      v21 += a6;
      --v101;
    }
    while (v101);
  }
  *BOOL result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)17,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  uint8x16_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  int8x16_t v24 = vandq_s8(vdupq_n_s8(v23), v22);
  uint64_t v25 = 4 * a6;
  uint64_t v26 = 16 * a6;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    __int32 v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      uint64_t v35 = (unsigned __int8 *)&v20[v16];
      int64_t v36 = (int8x16_t *)v20;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, a13)) & 0x80) != 0);
      do
      {
        int64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          int64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            int64_t v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v20;
      unint64_t v41 = (char *)v38 - v20;
      do
      {
        int8x16_t v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        int8x16_t v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        int8x16_t v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        uint8x16_t v47 = vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        uint16x8_t v48 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
        uint8x16_t v49 = (uint8x16_t)vmvnq_s8(v45);
        uint16x8_t v50 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v49.i8);
        uint8x16_t v51 = (uint8x16_t)vmvnq_s8(v44);
        uint16x8_t v52 = vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8(v46, (uint8x16_t)v45), vmull_high_u8(v47, (uint8x16_t)v44)), vmull_high_u8(v46, v49)), vmull_high_u8(v47, v51));
        uint16x8_t v53 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v48, vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v44.i8)), v50), vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v51.i8)), v27);
        uint16x8_t v54 = vminq_u16(v52, v27);
        int8x16_t v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL)));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      unint64_t v19 = (_DWORD *)((char *)v19 + v39);
      uint8x16_t v17 = (unsigned __int32 *)((char *)v17 + v39);
      unint64_t v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28) {
      break;
    }
    uint16x8_t v29 = (unsigned __int8 *)&v20[v16];
    int8x16_t v30 = (int8x16_t *)v20;
    do
      __int32 v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      __int32 v32 = v31;
      __int32 v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        __int32 v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          __int32 v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v20;
    int64_t v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v55 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    int8x16_t v56 = vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v57 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v55), a9);
    int8x16_t v58 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v56)), *(int8x16_t *)((char *)v19 + v55));
    v91.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v56.i8);
    uint16x8_t v59 = vmull_high_u8(v57, (uint8x16_t)v56);
    uint16x8_t v60 = vminq_u16((uint16x8_t)v91.val[1], v27);
    uint16x8_t v61 = vminq_u16(v59, v27);
    v91.val[0] = (int8x16_t)vrsraq_n_u16(v60, v60, 8uLL);
    uint16x8_t v62 = vrsraq_n_u16(v61, v61, 8uLL);
    *(uint8x8_t *)v91.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v91.val[0], 8uLL);
    *(uint8x8_t *)v91.val[1].i8 = vqrshrn_n_u16(v62, 8uLL);
    int8x16_t v63 = vqtbl2q_s8(v91, (int8x16_t)xmmword_1850CD8F0);
    v91.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v91.val[0].i8, v62, 8uLL);
    int8x16_t v64 = vqtbl1q_s8(v58, (int8x16_t)xmmword_1850CD8D0);
    v91.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v91.val[0], (uint8x16_t)v63);
    uint8x16_t v65 = vminq_u8((uint8x16_t)v58, (uint8x16_t)v64);
    uint16x8_t v66 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v64.i8);
    uint8x16_t v67 = (uint8x16_t)vmvnq_s8(v64);
    uint16x8_t v68 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v67.i8);
    uint8x16_t v69 = (uint8x16_t)vmvnq_s8(v63);
    v91.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8((uint8x16_t)v91.val[1], (uint8x16_t)v64), vmull_high_u8(v65, (uint8x16_t)v63)), vmull_high_u8((uint8x16_t)v91.val[1], v67)), vmull_high_u8(v65, v69));
    uint16x8_t v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v66, vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v63.i8)), v68), vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v69.i8)), v27);
    v91.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v91.val[1], v27);
    int8x16_t v71 = vbslq_s8(vceqzq_s8(v64), v91.val[0], (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v91.val[1], (uint16x8_t)v91.val[1], 8uLL), 8uLL));
    int8x16_t v15 = vceqzq_s8(v63);
    *(int8x16_t *)((char *)v19 + v55) = vbslq_s8(v15, v58, v71);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4) {
      break;
    }
    __int32 v28 = *(_DWORD *)v20;
    v55 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      uint8x16_t v17 = (unsigned __int32 *)((char *)v17 + v55);
      unint64_t v19 = (_DWORD *)((char *)v19 + v55);
      goto LABEL_37;
    }
  }
  uint8x16_t v17 = (unsigned __int32 *)((char *)v17 + v26 + v55);
  unint64_t v19 = (_DWORD *)((char *)v19 + v26 + v55);
LABEL_40:
  uint64_t v72 = v16 + a14;
  if (v72)
  {
    if (a7) {
      unsigned int v73 = 0;
    }
    else {
      unsigned int v73 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v73), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v74 = 0;
    }
    else {
      unsigned int v74 = -1;
    }
    int8x8_t v75 = vand_s8(vdup_n_s8(v74), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v76 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      uint16x8_t v77 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v78) = v77.i8[0];
      BYTE1(v78) = v77.i8[2];
      BYTE2(v78) = v77.i8[4];
      HIBYTE(v78) = v77.i8[6];
      v77.i32[0] = *v19;
      uint16x8_t v79 = vmovl_u8(*(uint8x8_t *)v77.i8);
      LOBYTE(v80) = v79.i8[0];
      BYTE1(v80) = v79.i8[2];
      BYTE2(v80) = v79.i8[4];
      HIBYTE(v80) = v79.i8[6];
      v79.i8[7] = 0;
      v79.i8[0] = *v20;
      v79.i8[1] = *v20;
      v79.i8[2] = *v20;
      *(__int32 *)((char *)v79.i32 + 3) = *v20;
      int8x8_t v81 = vorr_s8(vbic_s8(v75, vceqz_s8(*(int8x8_t *)v79.i8)), (int8x8_t)v80);
      uint16x8_t v82 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v78, *(int8x8_t *)a9.i8), *(uint8x8_t *)v79.i8), v76);
      uint16x8_t v83 = vrsraq_n_u16(v82, v82, 8uLL);
      int8x8_t v84 = (int8x8_t)vqrshrn_n_u16(v83, 8uLL);
      int8x16_t v85 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v84, v83, 8uLL);
      *(int8x8_t *)v83.i8 = v81;
      a13.u64[1] = (unint64_t)v81;
      *(int8x8_t *)v85.i8 = vqtbl1_s8(v85, (int8x8_t)0x707070703030303);
      *(int8x8_t *)a13.i8 = vqtbl1_s8(a13, (int8x8_t)0x707070703030303);
      uint8x8_t v86 = vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v85.i8);
      uint8x8_t v87 = vmin_u8((uint8x8_t)v81, *(uint8x8_t *)a13.i8);
      uint16x8_t v88 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_u8(v86, *(uint8x8_t *)a13.i8), vmull_u8(v87, *(uint8x8_t *)v85.i8)), vmull_u8(v86, (uint8x8_t)vmvn_s8(*(int8x8_t *)a13.i8))), vmull_u8(v87, (uint8x8_t)vmvn_s8(*(int8x8_t *)v85.i8))), v76);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v85.i8), v81, vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v88, v88, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *unint64_t v19 = a13.i32[0];
      uint16x8_t v89 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v89 >= v18) {
        uint64_t v90 = -(uint64_t)a5;
      }
      else {
        uint64_t v90 = 0;
      }
      uint8x16_t v17 = &v89[v90];
      v19 += a6;
      --v72;
    }
    while (v72);
  }
  *BOOL result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)16,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  uint8x16_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  int8x16_t v24 = vandq_s8(vdupq_n_s8(v23), v22);
  uint64_t v25 = 4 * a6;
  uint64_t v26 = 16 * a6;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    __int32 v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      uint64_t v35 = (unsigned __int8 *)&v20[v16];
      int64_t v36 = (int8x16_t *)v20;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, a13)) & 0x80) != 0);
      do
      {
        int64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          int64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            int64_t v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v20;
      unint64_t v41 = (char *)v38 - v20;
      do
      {
        int8x16_t v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        int8x16_t v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        int8x16_t v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        uint8x16_t v47 = vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        uint16x8_t v48 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
        uint8x16_t v49 = (uint8x16_t)vmvnq_s8(v45);
        uint16x8_t v50 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v49.i8);
        uint8x16_t v51 = (uint8x16_t)vmvnq_s8(v44);
        uint16x8_t v52 = vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v47, (uint8x16_t)v44), vmull_high_u8(v46, (uint8x16_t)v45)), vmull_high_u8(v46, v49)), vmull_high_u8(v47, v51));
        uint16x8_t v53 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v44.i8), v48), v50), vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v51.i8)), v27);
        uint16x8_t v54 = vminq_u16(v52, v27);
        int8x16_t v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL)));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      unint64_t v19 = (_DWORD *)((char *)v19 + v39);
      uint8x16_t v17 = (unsigned __int32 *)((char *)v17 + v39);
      unint64_t v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28) {
      break;
    }
    uint16x8_t v29 = (unsigned __int8 *)&v20[v16];
    int8x16_t v30 = (int8x16_t *)v20;
    do
      __int32 v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      __int32 v32 = v31;
      __int32 v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        __int32 v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          __int32 v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v20;
    int64_t v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v55 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    int8x16_t v56 = vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v57 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v55), a9);
    int8x16_t v58 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v56)), *(int8x16_t *)((char *)v19 + v55));
    v91.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v56.i8);
    uint16x8_t v59 = vmull_high_u8(v57, (uint8x16_t)v56);
    uint16x8_t v60 = vminq_u16((uint16x8_t)v91.val[1], v27);
    uint16x8_t v61 = vminq_u16(v59, v27);
    v91.val[0] = (int8x16_t)vrsraq_n_u16(v60, v60, 8uLL);
    uint16x8_t v62 = vrsraq_n_u16(v61, v61, 8uLL);
    *(uint8x8_t *)v91.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v91.val[0], 8uLL);
    *(uint8x8_t *)v91.val[1].i8 = vqrshrn_n_u16(v62, 8uLL);
    int8x16_t v63 = vqtbl2q_s8(v91, (int8x16_t)xmmword_1850CD8F0);
    v91.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v91.val[0].i8, v62, 8uLL);
    int8x16_t v64 = vqtbl1q_s8(v58, (int8x16_t)xmmword_1850CD8D0);
    v91.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v91.val[0], (uint8x16_t)v63);
    uint8x16_t v65 = vminq_u8((uint8x16_t)v58, (uint8x16_t)v64);
    uint16x8_t v66 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v64.i8);
    uint8x16_t v67 = (uint8x16_t)vmvnq_s8(v64);
    uint16x8_t v68 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v67.i8);
    uint8x16_t v69 = (uint8x16_t)vmvnq_s8(v63);
    v91.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v65, (uint8x16_t)v63), vmull_high_u8((uint8x16_t)v91.val[1], (uint8x16_t)v64)), vmull_high_u8((uint8x16_t)v91.val[1], v67)), vmull_high_u8(v65, v69));
    uint16x8_t v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v63.i8), v66), v68), vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v69.i8)), v27);
    v91.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v91.val[1], v27);
    int8x16_t v71 = vbslq_s8(vceqzq_s8(v64), v91.val[0], (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v91.val[1], (uint16x8_t)v91.val[1], 8uLL), 8uLL));
    int8x16_t v15 = vceqzq_s8(v63);
    *(int8x16_t *)((char *)v19 + v55) = vbslq_s8(v15, v58, v71);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4) {
      break;
    }
    __int32 v28 = *(_DWORD *)v20;
    v55 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      uint8x16_t v17 = (unsigned __int32 *)((char *)v17 + v55);
      unint64_t v19 = (_DWORD *)((char *)v19 + v55);
      goto LABEL_37;
    }
  }
  uint8x16_t v17 = (unsigned __int32 *)((char *)v17 + v26 + v55);
  unint64_t v19 = (_DWORD *)((char *)v19 + v26 + v55);
LABEL_40:
  uint64_t v72 = v16 + a14;
  if (v72)
  {
    if (a7) {
      unsigned int v73 = 0;
    }
    else {
      unsigned int v73 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v73), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v74 = 0;
    }
    else {
      unsigned int v74 = -1;
    }
    int8x8_t v75 = vand_s8(vdup_n_s8(v74), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v76 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      uint16x8_t v77 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v78) = v77.i8[0];
      BYTE1(v78) = v77.i8[2];
      BYTE2(v78) = v77.i8[4];
      HIBYTE(v78) = v77.i8[6];
      v77.i32[0] = *v19;
      uint16x8_t v79 = vmovl_u8(*(uint8x8_t *)v77.i8);
      LOBYTE(v80) = v79.i8[0];
      BYTE1(v80) = v79.i8[2];
      BYTE2(v80) = v79.i8[4];
      HIBYTE(v80) = v79.i8[6];
      v79.i8[7] = 0;
      v79.i8[0] = *v20;
      v79.i8[1] = *v20;
      v79.i8[2] = *v20;
      *(__int32 *)((char *)v79.i32 + 3) = *v20;
      int8x8_t v81 = vorr_s8(vbic_s8(v75, vceqz_s8(*(int8x8_t *)v79.i8)), (int8x8_t)v80);
      uint16x8_t v82 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v78, *(int8x8_t *)a9.i8), *(uint8x8_t *)v79.i8), v76);
      uint16x8_t v83 = vrsraq_n_u16(v82, v82, 8uLL);
      int8x8_t v84 = (int8x8_t)vqrshrn_n_u16(v83, 8uLL);
      int8x16_t v85 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v84, v83, 8uLL);
      *(int8x8_t *)v83.i8 = v81;
      a13.u64[1] = (unint64_t)v81;
      *(int8x8_t *)v85.i8 = vqtbl1_s8(v85, (int8x8_t)0x707070703030303);
      *(int8x8_t *)a13.i8 = vqtbl1_s8(a13, (int8x8_t)0x707070703030303);
      uint8x8_t v86 = vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v85.i8);
      uint8x8_t v87 = vmin_u8((uint8x8_t)v81, *(uint8x8_t *)a13.i8);
      uint16x8_t v88 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(v86, *(uint8x8_t *)a13.i8), vmull_u8(v87, *(uint8x8_t *)v85.i8)), vmull_u8(v86, (uint8x8_t)vmvn_s8(*(int8x8_t *)a13.i8))), vmull_u8(v87, (uint8x8_t)vmvn_s8(*(int8x8_t *)v85.i8))), v76);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v85.i8), v81, vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v88, v88, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *unint64_t v19 = a13.i32[0];
      uint16x8_t v89 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v89 >= v18) {
        uint64_t v90 = -(uint64_t)a5;
      }
      else {
        uint64_t v90 = 0;
      }
      uint8x16_t v17 = &v89[v90];
      v19 += a6;
      --v72;
    }
    while (v72);
  }
  *BOOL result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)15,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v17 = a16;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a16 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = -1;
  }
  v23.i64[0] = 0xFF000000FF000000;
  v23.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v22), v23);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8(vdupq_n_s8(v24), v23);
  uint64_t v26 = 4 * a6;
  uint64_t v27 = 16 * a6;
  uint16x8_t v28 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a14.i64[0] = -1;
  a14.i64[1] = -1;
  while (1)
  {
    __int32 v29 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      int64_t v36 = (unsigned __int8 *)&v21[v17];
      int64_t v37 = (int8x16_t *)v21;
      do
        int64_t v38 = v37++;
      while (v37 <= (int8x16_t *)v36 && (vminvq_u8((uint8x16_t)vceqq_s8(*v38, (int8x16_t)a14)) & 0x80) != 0);
      do
      {
        uint64_t v39 = v38;
        int64_t v38 = (int8x16_t *)((char *)v38 + 4);
      }
      while (v38 <= (int8x16_t *)v36 && v39->i32[0] == -1);
      if (v39 < (int8x16_t *)v36)
      {
        while (v39->u8[0] == 255)
        {
          uint64_t v39 = (int8x16_t *)((char *)v39 + 1);
          if (v39 >= (int8x16_t *)v36)
          {
            uint64_t v39 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      uint64_t v40 = 0;
      int64_t v41 = (char *)v39 - v21;
      unint64_t v42 = (char *)v39 - v21;
      do
      {
        int8x16_t v43 = vorrq_s8(*(int8x16_t *)((char *)v18 + v40), a9);
        int8x16_t v44 = vorrq_s8(*(int8x16_t *)((char *)v20 + v40), v25);
        int8x16_t v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v46 = vqtbl1q_s8(v44, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v47 = (int8x16_t)vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        int8x16_t v48 = (int8x16_t)vminq_u8((uint8x16_t)v44, (uint8x16_t)v46);
        uint8x16_t v49 = (uint8x16_t)vsubq_s8(v45, v47);
        uint8x16_t v50 = (uint8x16_t)vsubq_s8(v46, v48);
        int8x16_t v51 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v46, (uint8x16_t)0), (uint8x16_t)v48);
        int8x16_t v52 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v47.i8));
        int8x16_t v53 = (int8x16_t)vqaddq_u16(vmull_high_u8(v49, (uint8x16_t)v48), vmull_high_u8(v50, (uint8x16_t)v47));
        uint16x8_t v54 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v51.i8), v52, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v46.i8), (uint16x8_t)v52)), v28);
        uint16x8_t v55 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v51), v53, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v45, (uint8x16_t)v46), (uint16x8_t)v53)), v28);
        int8x16_t v16 = vceqzq_s8(v45);
        *(int8x16_t *)((char *)v20 + v40) = vbslq_s8(v16, v44, vbslq_s8(vceqzq_s8(v46), v43, vsubq_s8(vaddq_s8(v48, v47), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v54, v54, 8uLL), 8uLL), vrsraq_n_u16(v55, v55, 8uLL), 8uLL))));
        v21 += v26;
        v42 -= 4;
        v40 += v27;
      }
      while (v42 > 3);
      unint64_t v20 = (_DWORD *)((char *)v20 + v40);
      unint64_t v18 = (unsigned __int32 *)((char *)v18 + v40);
      unint64_t v17 = v17 - v41 + v42;
      goto LABEL_37;
    }
    if (v29) {
      break;
    }
    int8x16_t v30 = (unsigned __int8 *)&v21[v17];
    __int32 v31 = (int8x16_t *)v21;
    do
      __int32 v32 = v31++;
    while (v31 <= (int8x16_t *)v30 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v32)) & 0x80) != 0);
    do
    {
      int64_t v33 = v32;
      __int32 v32 = (int8x16_t *)((char *)v32 + 4);
    }
    while (v32 <= (int8x16_t *)v30 && !v33->i32[0]);
    if (v33 < (int8x16_t *)v30)
    {
      while (!v33->i8[0])
      {
        int64_t v33 = (int8x16_t *)((char *)v33 + 1);
        if (v33 >= (int8x16_t *)v30)
        {
          int64_t v33 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    int64_t v34 = (char *)v33 - v21;
    int64_t v35 = ((char *)v33 - v21) * a6;
    v18 += v35;
    v20 += v35;
    v21 += v35;
    v17 -= v34;
LABEL_37:
    if (v17 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v56 = 0;
  while (1)
  {
    v16.i32[0] = v29;
    int8x16_t v57 = vqtbl1q_s8(v16, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v58 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v56), a9);
    int8x16_t v59 = vorrq_s8(vbicq_s8(v25, vceqzq_s8(v57)), *(int8x16_t *)((char *)v20 + v56));
    v95.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v58.i8, *(uint8x8_t *)v57.i8);
    uint16x8_t v60 = vmull_high_u8(v58, (uint8x16_t)v57);
    uint16x8_t v61 = vminq_u16((uint16x8_t)v95.val[1], v28);
    uint16x8_t v62 = vminq_u16(v60, v28);
    v95.val[0] = (int8x16_t)vrsraq_n_u16(v61, v61, 8uLL);
    uint16x8_t v63 = vrsraq_n_u16(v62, v62, 8uLL);
    *(uint8x8_t *)v95.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v95.val[0], 8uLL);
    *(uint8x8_t *)v95.val[1].i8 = vqrshrn_n_u16(v63, 8uLL);
    int8x16_t v64 = vqtbl2q_s8(v95, (int8x16_t)xmmword_1850CD8F0);
    v95.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v95.val[0].i8, v63, 8uLL);
    int8x16_t v65 = vqtbl1q_s8(v59, (int8x16_t)xmmword_1850CD8D0);
    v95.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v95.val[0], (uint8x16_t)v64);
    int8x16_t v66 = (int8x16_t)vminq_u8((uint8x16_t)v59, (uint8x16_t)v65);
    uint8x16_t v67 = (uint8x16_t)vsubq_s8(v64, v95.val[1]);
    uint8x16_t v68 = (uint8x16_t)vsubq_s8(v65, v66);
    int8x16_t v69 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v65, (uint8x16_t)0), (uint8x16_t)v66);
    int8x16_t v70 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v67.i8, *(uint8x8_t *)v66.i8), vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v95.val[1].i8));
    int8x16_t v71 = (int8x16_t)vqaddq_u16(vmull_high_u8(v67, (uint8x16_t)v66), vmull_high_u8(v68, (uint8x16_t)v95.val[1]));
    uint16x8_t v72 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v69.i8), v70, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v64.i8, *(uint8x8_t *)v65.i8), (uint16x8_t)v70)), v28);
    uint16x8_t v73 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v69), v71, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v64, (uint8x16_t)v65), (uint16x8_t)v71)), v28);
    int8x16_t v74 = vbslq_s8(vceqzq_s8(v65), v95.val[0], vsubq_s8(vaddq_s8(v66, v95.val[1]), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v72, v72, 8uLL), 8uLL), vrsraq_n_u16(v73, v73, 8uLL), 8uLL)));
    int8x16_t v16 = vceqzq_s8(v64);
    *(int8x16_t *)((char *)v20 + v56) = vbslq_s8(v16, v59, v74);
    v21 += v26;
    v17 -= 4;
    if (v17 < 4) {
      break;
    }
    __int32 v29 = *(_DWORD *)v21;
    v56 += v27;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v18 = (unsigned __int32 *)((char *)v18 + v56);
      unint64_t v20 = (_DWORD *)((char *)v20 + v56);
      goto LABEL_37;
    }
  }
  unint64_t v18 = (unsigned __int32 *)((char *)v18 + v27 + v56);
  unint64_t v20 = (_DWORD *)((char *)v20 + v27 + v56);
LABEL_40:
  uint64_t v75 = v17 + a15;
  if (v75)
  {
    if (a7) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = -1;
    }
    int8x8_t v77 = vdup_n_s8(v76);
    if (a8) {
      unsigned int v78 = 0;
    }
    else {
      unsigned int v78 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(v77, (int8x8_t)0xFF000000FF000000);
    int8x8_t v79 = vand_s8(vdup_n_s8(v78), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v80 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v18;
      uint16x8_t v81 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v82) = v81.i8[0];
      BYTE1(v82) = v81.i8[2];
      BYTE2(v82) = v81.i8[4];
      HIBYTE(v82) = v81.i8[6];
      v81.i32[0] = *v20;
      uint16x8_t v83 = vmovl_u8(*(uint8x8_t *)v81.i8);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i8[7] = 0;
      v83.i8[0] = *v21;
      v83.i8[1] = *v21;
      v83.i8[2] = *v21;
      *(__int32 *)((char *)v83.i32 + 3) = *v21;
      int8x8_t v85 = vorr_s8(vbic_s8(v79, vceqz_s8(*(int8x8_t *)v83.i8)), (int8x8_t)v84);
      uint16x8_t v86 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v82, *(int8x8_t *)a9.i8), *(uint8x8_t *)v83.i8), v80);
      a14 = vrsraq_n_u16(v86, v86, 8uLL);
      int8x8_t v87 = (int8x8_t)vqrshrn_n_u16(a14, 8uLL);
      *(int8x8_t *)a14.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v87, a14, 8uLL), (int8x8_t)0x707070703030303);
      *(int8x8_t *)v88.i8 = v85;
      v88.u64[1] = (unint64_t)v85;
      *(int8x8_t *)v88.i8 = vqtbl1_s8(v88, (int8x8_t)0x707070703030303);
      int8x8_t v89 = (int8x8_t)vmin_u8((uint8x8_t)v87, *(uint8x8_t *)a14.i8);
      int8x8_t v90 = (int8x8_t)vmin_u8((uint8x8_t)v85, *(uint8x8_t *)v88.i8);
      int8x16_t v91 = (int8x16_t)vqaddq_u16(vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)a14.i8, v89), (uint8x8_t)v90), vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v88.i8, v90), (uint8x8_t)v89));
      uint16x8_t v92 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8((int8x8_t)vcgt_u8(vrhadd_u8(*(uint8x8_t *)v88.i8, 0), (uint8x8_t)v90)), v91, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v88.i8), (uint16x8_t)v91)), v80);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)a14.i8), v85, vbsl_s8(vceqz_s8(*(int8x8_t *)v88.i8), v87, vsub_s8(vadd_s8(v90, v89), (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v92, v92, 8uLL), 8uLL))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a14, a9));
      *unint64_t v20 = a14.i32[0];
      int8x16_t v93 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v93 >= v19) {
        uint64_t v94 = -(uint64_t)a5;
      }
      else {
        uint64_t v94 = 0;
      }
      unint64_t v18 = &v93[v94];
      v20 += a6;
      --v75;
    }
    while (v75);
  }
  *BOOL result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)14,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  int8x16_t v24 = vandq_s8(vdupq_n_s8(v23), v22);
  uint64_t v25 = 4 * a6;
  uint64_t v26 = 16 * a6;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    __int32 v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      int64_t v35 = (unsigned __int8 *)&v20[v16];
      int64_t v36 = (int8x16_t *)v20;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        int64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          int64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            int64_t v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v20;
      unint64_t v41 = (char *)v38 - v20;
      do
      {
        int8x16_t v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        int8x16_t v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        uint8x16_t v44 = (uint8x16_t)vbicq_s8(v43, vceqzq_s8(vqtbl1q_s8(v43, (int8x16_t)xmmword_1850CD8D0)));
        uint16x8_t v45 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v44.i8), v27);
        uint16x8_t v46 = vminq_u16(vmull_high_u8((uint8x16_t)v42, v44), v27);
        int8x16_t v15 = vceqzq_s8(vqtbl1q_s8(v42, (int8x16_t)xmmword_1850CD8D0));
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v42, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL)), v44));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      unint64_t v19 = (_DWORD *)((char *)v19 + v39);
      unint64_t v17 = (unsigned __int32 *)((char *)v17 + v39);
      unint64_t v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28) {
      break;
    }
    __int32 v29 = (unsigned __int8 *)&v20[v16];
    int8x16_t v30 = (int8x16_t *)v20;
    do
      __int32 v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      __int32 v32 = v31;
      __int32 v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        __int32 v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          __int32 v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v20;
    int64_t v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v47 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    int8x16_t v48 = vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v49 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v47), a9);
    int8x16_t v50 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v48)), *(int8x16_t *)((char *)v19 + v47));
    v76.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8);
    uint16x8_t v51 = vmull_high_u8(v49, (uint8x16_t)v48);
    uint16x8_t v52 = vminq_u16((uint16x8_t)v76.val[1], v27);
    uint16x8_t v53 = vminq_u16(v51, v27);
    v76.val[0] = (int8x16_t)vrsraq_n_u16(v52, v52, 8uLL);
    uint16x8_t v54 = vrsraq_n_u16(v53, v53, 8uLL);
    *(uint8x8_t *)v76.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v76.val[0], 8uLL);
    *(uint8x8_t *)v76.val[1].i8 = vqrshrn_n_u16(v54, 8uLL);
    int8x16_t v55 = vqtbl2q_s8(v76, (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v56 = vbicq_s8(v50, vceqzq_s8(vqtbl1q_s8(v50, (int8x16_t)xmmword_1850CD8D0)));
    uint16x8_t v57 = vmull_u8(*(uint8x8_t *)v76.val[0].i8, *(uint8x8_t *)v56.i8);
    v76.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v76.val[0].i8, v54, 8uLL);
    uint16x8_t v58 = vminq_u16(v57, v27);
    v76.val[1] = (int8x16_t)vminq_u16(vmull_u8(*(uint8x8_t *)v76.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), v27);
    int8x16_t v59 = (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v76.val[0], vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v58, v58, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v76.val[1], (uint16x8_t)v76.val[1], 8uLL), 8uLL)), (uint8x16_t)v56);
    int8x16_t v15 = vceqzq_s8(v55);
    *(int8x16_t *)((char *)v19 + v47) = vbslq_s8(v15, v50, v59);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4) {
      break;
    }
    __int32 v28 = *(_DWORD *)v20;
    v47 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v17 = (unsigned __int32 *)((char *)v17 + v47);
      unint64_t v19 = (_DWORD *)((char *)v19 + v47);
      goto LABEL_37;
    }
  }
  unint64_t v17 = (unsigned __int32 *)((char *)v17 + v26 + v47);
  unint64_t v19 = (_DWORD *)((char *)v19 + v26 + v47);
LABEL_40:
  uint64_t v60 = v16 + a14;
  if (v60)
  {
    if (a7) {
      unsigned int v61 = 0;
    }
    else {
      unsigned int v61 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v61), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v62 = 0;
    }
    else {
      unsigned int v62 = -1;
    }
    int8x8_t v63 = vand_s8(vdup_n_s8(v62), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v64 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      uint16x8_t v65 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v66) = v65.i8[0];
      BYTE1(v66) = v65.i8[2];
      BYTE2(v66) = v65.i8[4];
      HIBYTE(v66) = v65.i8[6];
      v65.i32[0] = *v19;
      uint16x8_t v67 = vmovl_u8(*(uint8x8_t *)v65.i8);
      LOBYTE(v68) = v67.i8[0];
      BYTE1(v68) = v67.i8[2];
      BYTE2(v68) = v67.i8[4];
      HIBYTE(v68) = v67.i8[6];
      v67.i8[7] = 0;
      v67.i8[0] = *v20;
      v67.i8[1] = *v20;
      v67.i8[2] = *v20;
      *(__int32 *)((char *)v67.i32 + 3) = *v20;
      int8x8_t v69 = vorr_s8(vbic_s8(v63, vceqz_s8(*(int8x8_t *)v67.i8)), (int8x8_t)v68);
      uint16x8_t v70 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v66, *(int8x8_t *)a9.i8), *(uint8x8_t *)v67.i8), v64);
      a13 = vrsraq_n_u16(v70, v70, 8uLL);
      uint8x8_t v71 = vqrshrn_n_u16(a13, 8uLL);
      *(int8x8_t *)v72.i8 = v69;
      v72.u64[1] = (unint64_t)v69;
      *(int8x8_t *)v72.i8 = vbic_s8(v69, vceqz_s8(vqtbl1_s8(v72, (int8x8_t)0x707070703030303)));
      uint16x8_t v73 = vminq_u16(vmull_u8(v71, *(uint8x8_t *)v72.i8), v64);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v71, a13, 8uLL), (int8x8_t)0x707070703030303)), v69, (int8x8_t)vqadd_u8(vqsub_u8(v71, vqrshrn_n_u16(vrsraq_n_u16(v73, v73, 8uLL), 8uLL)), *(uint8x8_t *)v72.i8));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *unint64_t v19 = a13.i32[0];
      int8x16_t v74 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v74 >= v18) {
        uint64_t v75 = -(uint64_t)a5;
      }
      else {
        uint64_t v75 = 0;
      }
      unint64_t v17 = &v74[v75];
      v19 += a6;
      --v60;
    }
    while (v60);
  }
  *BOOL result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)13,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a15 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = -1;
  }
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  int8x16_t v24 = vandq_s8(vdupq_n_s8(v23), v22);
  uint64_t v25 = 4 * a6;
  uint64_t v26 = 16 * a6;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    __int32 v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      int64_t v35 = (unsigned __int8 *)&v20[v16];
      int64_t v36 = (int8x16_t *)v20;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        int64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          int64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            int64_t v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v20;
      unint64_t v41 = (char *)v38 - v20;
      do
      {
        int8x16_t v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        int8x16_t v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        int8x16_t v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_1850CD8D0);
        int8x16_t v46 = vceqzq_s8(v45);
        uint8x16_t v47 = (uint8x16_t)vbicq_s8(v43, v46);
        uint16x8_t v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v47.i8), v27);
        uint16x8_t v49 = vminq_u16(vmull_high_u8((uint8x16_t)v42, v47), v27);
        uint8x16_t v50 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL);
        uint8x16_t v51 = (uint8x16_t)vmvnq_s8(v45);
        uint8x16_t v52 = (uint8x16_t)vmvnq_s8(v44);
        uint16x8_t v53 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v51.i8);
        uint16x8_t v54 = vqaddq_u16(vmull_high_u8((uint8x16_t)v42, v51), vmull_high_u8(v47, v52));
        uint16x8_t v55 = vminq_u16(vqaddq_u16(v53, vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v52.i8)), v27);
        uint16x8_t v56 = vminq_u16(v54, v27);
        int8x16_t v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(v46, v42, (int8x16_t)vqaddq_u8(v50, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL), vrsraq_n_u16(v56, v56, 8uLL), 8uLL))));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      unint64_t v19 = (_DWORD *)((char *)v19 + v39);
      unint64_t v17 = (unsigned __int32 *)((char *)v17 + v39);
      unint64_t v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28) {
      break;
    }
    __int32 v29 = (unsigned __int8 *)&v20[v16];
    int8x16_t v30 = (int8x16_t *)v20;
    do
      __int32 v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      __int32 v32 = v31;
      __int32 v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        __int32 v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          __int32 v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v20;
    int64_t v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v57 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    int8x16_t v58 = vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v59 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v57), a9);
    int8x16_t v60 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v58)), *(int8x16_t *)((char *)v19 + v57));
    v98.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v58.i8);
    uint16x8_t v61 = vmull_high_u8(v59, (uint8x16_t)v58);
    uint16x8_t v62 = vminq_u16((uint16x8_t)v98.val[1], v27);
    uint16x8_t v63 = vminq_u16(v61, v27);
    v98.val[0] = (int8x16_t)vrsraq_n_u16(v62, v62, 8uLL);
    uint16x8_t v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v98.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v98.val[0], 8uLL);
    *(uint8x8_t *)v98.val[1].i8 = vqrshrn_n_u16(v64, 8uLL);
    int8x16_t v65 = vqtbl2q_s8(v98, (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v66 = vqtbl1q_s8(v60, (int8x16_t)xmmword_1850CD8D0);
    int8x16_t v67 = vceqzq_s8(v66);
    int8x16_t v68 = vbicq_s8(v60, v67);
    uint16x8_t v69 = vmull_u8(*(uint8x8_t *)v98.val[0].i8, *(uint8x8_t *)v68.i8);
    int8x16_t v70 = vmvnq_s8(v66);
    uint16x8_t v71 = vmull_u8(*(uint8x8_t *)v98.val[0].i8, *(uint8x8_t *)v70.i8);
    uint16x8_t v72 = vmull_u8(*(uint8x8_t *)v98.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
    v98.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v98.val[0].i8, v64, 8uLL);
    uint16x8_t v73 = vminq_u16(v69, v27);
    v98.val[1] = (int8x16_t)vminq_u16(vmull_u8(*(uint8x8_t *)v98.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)), v27);
    uint8x16_t v74 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v73, v73, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v98.val[1], (uint16x8_t)v98.val[1], 8uLL), 8uLL);
    v98.val[1] = vmvnq_s8(v65);
    uint16x8_t v75 = vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v98.val[1].i8);
    v98.val[1] = (int8x16_t)vqaddq_u16(v72, vmull_high_u8((uint8x16_t)v68, (uint8x16_t)v98.val[1]));
    uint16x8_t v76 = vminq_u16(vqaddq_u16(v71, v75), v27);
    v98.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v98.val[1], v27);
    int8x16_t v77 = vbslq_s8(v67, v98.val[0], (int8x16_t)vqaddq_u8(v74, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v76, v76, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v98.val[1], (uint16x8_t)v98.val[1], 8uLL), 8uLL)));
    int8x16_t v15 = vceqzq_s8(v65);
    *(int8x16_t *)((char *)v19 + v57) = vbslq_s8(v15, v60, v77);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4) {
      break;
    }
    __int32 v28 = *(_DWORD *)v20;
    v57 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v17 = (unsigned __int32 *)((char *)v17 + v57);
      unint64_t v19 = (_DWORD *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  unint64_t v17 = (unsigned __int32 *)((char *)v17 + v26 + v57);
  unint64_t v19 = (_DWORD *)((char *)v19 + v26 + v57);
LABEL_40:
  uint64_t v78 = v16 + a14;
  if (v78)
  {
    if (a7) {
      unsigned int v79 = 0;
    }
    else {
      unsigned int v79 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v79), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v80 = 0;
    }
    else {
      unsigned int v80 = -1;
    }
    int8x8_t v81 = vand_s8(vdup_n_s8(v80), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v82 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      uint16x8_t v83 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i32[0] = *v19;
      uint16x8_t v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
      LOBYTE(v86) = v85.i8[0];
      BYTE1(v86) = v85.i8[2];
      BYTE2(v86) = v85.i8[4];
      HIBYTE(v86) = v85.i8[6];
      v85.i8[7] = 0;
      v85.i8[0] = *v20;
      v85.i8[1] = *v20;
      v85.i8[2] = *v20;
      *(__int32 *)((char *)v85.i32 + 3) = *v20;
      int8x8_t v87 = vorr_s8(vbic_s8(v81, vceqz_s8(*(int8x8_t *)v85.i8)), (int8x8_t)v86);
      uint16x8_t v88 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v84, *(int8x8_t *)a9.i8), *(uint8x8_t *)v85.i8), v82);
      int8x16_t v89 = (int8x16_t)vrsraq_n_u16(v88, v88, 8uLL);
      int8x8_t v90 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v89, 8uLL);
      int8x16_t v91 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v90, (uint16x8_t)v89, 8uLL);
      *(int8x8_t *)v89.i8 = v87;
      v89.u64[1] = (unint64_t)v87;
      *(int8x8_t *)v91.i8 = vqtbl1_s8(v91, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v89.i8 = vqtbl1_s8(v89, (int8x8_t)0x707070703030303);
      int8x8_t v92 = vceqz_s8(*(int8x8_t *)v89.i8);
      uint8x8_t v93 = (uint8x8_t)vbic_s8(v87, v92);
      uint16x8_t v94 = vminq_u16(vmull_u8((uint8x8_t)v90, v93), v82);
      uint16x8_t v95 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v90, (uint8x8_t)vmvn_s8(*(int8x8_t *)v89.i8)), vmull_u8(v93, (uint8x8_t)vmvn_s8(*(int8x8_t *)v91.i8))), v82);
      a13 = vrsraq_n_u16(v95, v95, 8uLL);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v91.i8), v87, vbsl_s8(v92, v90, (int8x8_t)vqadd_u8(vqrshrn_n_u16(vrsraq_n_u16(v94, v94, 8uLL), 8uLL), vqrshrn_n_u16(a13, 8uLL))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *unint64_t v19 = a13.i32[0];
      uint16x8_t v96 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v96 >= v18) {
        uint64_t v97 = -(uint64_t)a5;
      }
      else {
        uint64_t v97 = 0;
      }
      unint64_t v17 = &v96[v97];
      v19 += a6;
      --v78;
    }
    while (v78);
  }
  *BOOL result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)12,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int8x16_t a8, double a9, uint8x8_t a10, double a11, double a12, double a13, uint8x16_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a17 < 4) {
    goto LABEL_37;
  }
  if (a7) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = -1;
  }
  v23.i64[0] = 0xFF000000FF000000;
  v23.i64[1] = 0xFF000000FF000000;
  a8 = vandq_s8(vdupq_n_s8(v22), v23);
  uint64_t v24 = 4 * a6;
  uint64_t v25 = 16 * a6;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  a10.i32[1] = 16843009;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    unsigned __int32 v28 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      int64_t v35 = (unsigned __int8 *)&v21[v17];
      int64_t v36 = (int8x16_t *)v21;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v26)) & 0x80) != 0);
      do
      {
        int64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          int64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            int64_t v38 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v21;
      unint64_t v41 = (char *)v38 - v21;
      do
      {
        *(uint8x16_t *)((char *)v20 + v39) = vqaddq_u8(*(uint8x16_t *)((char *)v20 + v39), (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v39), a8));
        v21 += v24;
        v41 -= 4;
        v39 += v25;
      }
      while (v41 > 3);
      unint64_t v20 = (_DWORD *)((char *)v20 + v39);
      unint64_t v18 = (_DWORD *)((char *)v18 + v39);
      unint64_t v17 = v17 - v40 + v41;
      goto LABEL_34;
    }
    if (v28) {
      break;
    }
    __int32 v29 = (unsigned __int8 *)&v21[v17];
    int8x16_t v30 = (int8x16_t *)v21;
    do
      __int32 v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      __int32 v32 = v31;
      __int32 v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        __int32 v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          __int32 v32 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v21;
    int64_t v34 = ((char *)v32 - v21) * a6;
    v18 += v34;
    v20 += v34;
    v21 += v34;
    v17 -= v33;
LABEL_34:
    if (v17 <= 3) {
      goto LABEL_37;
    }
  }
  uint64_t v42 = 0;
  while (1)
  {
    a14.i32[0] = v28;
    uint8x16_t v43 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v44 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v42), a8);
    uint16x8_t v45 = vmull_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v43.i8);
    uint16x8_t v46 = vmull_high_u8(v44, v43);
    uint16x8_t v47 = vminq_u16(v45, v27);
    uint16x8_t v48 = vminq_u16(v46, v27);
    a14 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v47, v47, 8uLL), 8uLL), vrsraq_n_u16(v48, v48, 8uLL), 8uLL);
    *(uint8x16_t *)((char *)v20 + v42) = vqaddq_u8(*(uint8x16_t *)((char *)v20 + v42), a14);
    v21 += v24;
    v17 -= 4;
    if (v17 < 4) {
      break;
    }
    unsigned __int32 v28 = *(_DWORD *)v21;
    v42 += v25;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v18 = (_DWORD *)((char *)v18 + v42);
      unint64_t v20 = (_DWORD *)((char *)v20 + v42);
      goto LABEL_34;
    }
  }
  unint64_t v18 = (_DWORD *)((char *)v18 + v25 + v42);
  unint64_t v20 = (_DWORD *)((char *)v20 + v25 + v42);
LABEL_37:
  uint64_t v49 = v17 + a16;
  if (v49)
  {
    if (a7) {
      unsigned int v50 = 0;
    }
    else {
      unsigned int v50 = -1;
    }
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v50), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v51 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v18;
      uint16x8_t v52 = vmovl_u8(a10);
      LOBYTE(v53) = v52.i8[0];
      BYTE1(v53) = v52.i8[2];
      BYTE2(v53) = v52.i8[4];
      HIBYTE(v53) = v52.i8[6];
      v52.i32[0] = *v20;
      uint16x8_t v54 = vmovl_u8(*(uint8x8_t *)v52.i8);
      LOBYTE(v55) = v54.i8[0];
      BYTE1(v55) = v54.i8[2];
      BYTE2(v55) = v54.i8[4];
      HIBYTE(v55) = v54.i8[6];
      v54.i8[7] = 0;
      v54.i8[0] = *v21;
      v54.i8[1] = *v21;
      v54.i8[2] = *v21;
      *(__int32 *)((char *)v54.i32 + 3) = *v21;
      uint16x8_t v56 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v53, *(int8x8_t *)a8.i8), *(uint8x8_t *)v54.i8), v51);
      int8x16_t v57 = (int8x16_t)vrsraq_n_u16(v56, v56, 8uLL);
      *(uint8x8_t *)v57.i8 = vqadd_u8((uint8x8_t)v55, vqrshrn_n_u16((uint16x8_t)v57, 8uLL));
      a10 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v57, a8));
      *unint64_t v20 = a10.i32[0];
      int8x16_t v58 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v58 >= v19) {
        uint64_t v59 = -(uint64_t)a5;
      }
      else {
        uint64_t v59 = 0;
      }
      unint64_t v18 = &v58[v59];
      v20 += a6;
      --v49;
    }
    while (v49);
  }
  *BOOL result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)11,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v17 = a15;
  unint64_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unsigned int v21 = *a4;
  if (a15 < 4) {
    goto LABEL_40;
  }
  if (a7) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = -1;
  }
  v23.i64[0] = 0xFF000000FF000000;
  v23.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v22), v23);
  if (a8) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = -1;
  }
  int8x16_t v25 = vandq_s8(vdupq_n_s8(v24), v23);
  uint64_t v26 = 4 * a6;
  uint64_t v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a13.i32[1] = 16843009;
  uint16x8_t v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    __int32 v30 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      int64_t v37 = (unsigned __int8 *)&v21[v17];
      int64_t v38 = (int8x16_t *)v21;
      do
        uint64_t v39 = v38++;
      while (v38 <= (int8x16_t *)v37 && (vminvq_u8((uint8x16_t)vceqq_s8(*v39, v28)) & 0x80) != 0);
      do
      {
        int64_t v40 = v39;
        uint64_t v39 = (int8x16_t *)((char *)v39 + 4);
      }
      while (v39 <= (int8x16_t *)v37 && v40->i32[0] == -1);
      if (v40 < (int8x16_t *)v37)
      {
        while (v40->u8[0] == 255)
        {
          int64_t v40 = (int8x16_t *)((char *)v40 + 1);
          if (v40 >= (int8x16_t *)v37)
          {
            int64_t v40 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      uint64_t v41 = 0;
      int64_t v42 = (char *)v40 - v21;
      unint64_t v43 = (char *)v40 - v21;
      do
      {
        int8x16_t v44 = vorrq_s8(*(int8x16_t *)((char *)v18 + v41), a9);
        int8x16_t v45 = vorrq_s8(*(int8x16_t *)((char *)v20 + v41), v25);
        int8x16_t v15 = vqtbl1q_s8(v44, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v46 = (uint8x16_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_1850CD8D0);
        *(uint8x16_t *)((char *)v20 + v41) = vqsubq_u8(vqaddq_u8(v46, (uint8x16_t)v15), vqaddq_u8(vqsubq_u8((uint8x16_t)v15, (uint8x16_t)v44), vqsubq_u8(v46, (uint8x16_t)v45)));
        v21 += v26;
        v43 -= 4;
        v41 += v27;
      }
      while (v43 > 3);
      unint64_t v20 = (_DWORD *)((char *)v20 + v41);
      unint64_t v18 = (_DWORD *)((char *)v18 + v41);
      unint64_t v17 = v17 - v42 + v43;
      goto LABEL_37;
    }
    if (v30) {
      break;
    }
    __int32 v31 = (unsigned __int8 *)&v21[v17];
    __int32 v32 = (int8x16_t *)v21;
    do
      int64_t v33 = v32++;
    while (v32 <= (int8x16_t *)v31 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v33)) & 0x80) != 0);
    do
    {
      int64_t v34 = v33;
      int64_t v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= (int8x16_t *)v31 && !v34->i32[0]);
    if (v34 < (int8x16_t *)v31)
    {
      while (!v34->i8[0])
      {
        int64_t v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= (int8x16_t *)v31)
        {
          int64_t v34 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    int64_t v35 = (char *)v34 - v21;
    int64_t v36 = ((char *)v34 - v21) * a6;
    v18 += v36;
    v20 += v36;
    v21 += v36;
    v17 -= v35;
LABEL_37:
    if (v17 <= 3) {
      goto LABEL_40;
    }
  }
  uint64_t v47 = 0;
  while (1)
  {
    int8x16_t v48 = *(int8x16_t *)((char *)v20 + v47);
    v15.i32[0] = v30;
    int8x16_t v49 = vqtbl1q_s8(v15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v50 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v47), a9);
    int8x16_t v51 = vceqzq_s8(v49);
    int8x16_t v52 = vorrq_s8(vbicq_s8(v25, v51), v48);
    uint16x8_t v53 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8);
    uint16x8_t v54 = vmull_high_u8(v50, (uint8x16_t)v49);
    uint16x8_t v55 = vminq_u16(v53, v29);
    uint16x8_t v56 = vminq_u16(v54, v29);
    uint16x8_t v57 = vrsraq_n_u16(v56, v56, 8uLL);
    *(uint8x8_t *)v53.i8 = vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(v57, 8uLL);
    uint8x16_t v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v16 - 1), (int8x16_t)xmmword_1850CD8F0);
    uint8x16_t v59 = vqrshrn_high_n_u16(*(uint8x8_t *)v53.i8, v57, 8uLL);
    uint8x16_t v60 = (uint8x16_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1850CD8D0);
    uint8x16_t v16 = vqaddq_u8(v60, v58);
    int8x16_t v15 = (int8x16_t)vqsubq_u8(v58, v59);
    *(int8x16_t *)((char *)v20 + v47) = vbslq_s8(v51, v48, (int8x16_t)vqsubq_u8(v16, vqaddq_u8((uint8x16_t)v15, vqsubq_u8(v60, (uint8x16_t)v52))));
    v21 += v26;
    v17 -= 4;
    if (v17 < 4) {
      break;
    }
    __int32 v30 = *(_DWORD *)v21;
    v47 += v27;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v18 = (_DWORD *)((char *)v18 + v47);
      unint64_t v20 = (_DWORD *)((char *)v20 + v47);
      goto LABEL_37;
    }
  }
  unint64_t v18 = (_DWORD *)((char *)v18 + v27 + v47);
  unint64_t v20 = (_DWORD *)((char *)v20 + v27 + v47);
LABEL_40:
  uint64_t v61 = v17 + a14;
  if (v61)
  {
    if (a7) {
      unsigned int v62 = 0;
    }
    else {
      unsigned int v62 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v62), (int8x8_t)0xFF000000FF000000);
    if (a8) {
      unsigned int v63 = 0;
    }
    else {
      unsigned int v63 = -1;
    }
    int8x8_t v64 = vand_s8(vdup_n_s8(v63), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v65 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v18;
      uint16x8_t v66 = vmovl_u8(a13);
      LOBYTE(v67) = v66.i8[0];
      BYTE1(v67) = v66.i8[2];
      BYTE2(v67) = v66.i8[4];
      HIBYTE(v67) = v66.i8[6];
      v66.i32[0] = *v20;
      uint16x8_t v68 = vmovl_u8(*(uint8x8_t *)v66.i8);
      LOBYTE(v69) = v68.i8[0];
      BYTE1(v69) = v68.i8[2];
      BYTE2(v69) = v68.i8[4];
      HIBYTE(v69) = v68.i8[6];
      v68.i8[7] = 0;
      v68.i8[0] = *v21;
      v68.i8[1] = *v21;
      v68.i8[2] = *v21;
      *(__int32 *)((char *)v68.i32 + 3) = *v21;
      int8x8_t v70 = vceqz_s8(*(int8x8_t *)v68.i8);
      uint8x8_t v71 = (uint8x8_t)vorr_s8(vbic_s8(v64, v70), (int8x8_t)v69);
      uint16x8_t v72 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v67, *(int8x8_t *)a9.i8), *(uint8x8_t *)v68.i8), v65);
      int8x16_t v73 = (int8x16_t)vrsraq_n_u16(v72, v72, 8uLL);
      uint8x8_t v74 = vqrshrn_n_u16((uint16x8_t)v73, 8uLL);
      int8x16_t v75 = (int8x16_t)vqrshrn_high_n_u16(v74, (uint16x8_t)v73, 8uLL);
      *(uint8x8_t *)v73.i8 = v71;
      v73.u64[1] = (unint64_t)v71;
      *(int8x8_t *)v75.i8 = vqtbl1_s8(v75, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v73.i8 = vqtbl1_s8(v73, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v73.i8 = vbsl_s8(v70, (int8x8_t)v69, (int8x8_t)vqsub_u8(vqadd_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v75.i8), vqadd_u8(vqsub_u8(*(uint8x8_t *)v75.i8, v74), vqsub_u8(*(uint8x8_t *)v73.i8, v71))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v73, a9));
      *unint64_t v20 = a13.i32[0];
      uint16x8_t v76 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v76 >= v19) {
        uint64_t v77 = -(uint64_t)a5;
      }
      else {
        uint64_t v77 = 0;
      }
      unint64_t v18 = &v76[v77];
      v20 += a6;
      --v61;
    }
    while (v61);
  }
  *BOOL result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)10,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, uint16x8_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v19 = a18;
  unint64_t v20 = *result;
  unint64_t v21 = *a3;
  unsigned int v22 = *a2;
  int8x16_t v23 = *a4;
  if (a18 < 4) {
    goto LABEL_34;
  }
  uint64_t v24 = 4 * a6;
  uint64_t v25 = 16 * a6;
  uint16x8_t v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v27 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      int64_t v34 = (unsigned __int8 *)&v23[v19];
      int64_t v35 = (int8x16_t *)v23;
      do
        int64_t v36 = v35++;
      while (v35 <= (int8x16_t *)v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        int64_t v37 = v36;
        int64_t v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= (int8x16_t *)v34 && v37->i32[0] == -1);
      if (v37 < (int8x16_t *)v34)
      {
        while (v37->u8[0] == 255)
        {
          int64_t v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= (int8x16_t *)v34)
          {
            int64_t v37 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      uint64_t v38 = 0;
      int64_t v39 = (char *)v37 - v23;
      unint64_t v40 = (char *)v37 - v23;
      do
      {
        int8x16_t v41 = *(int8x16_t *)((char *)v20 + v38);
        int8x16_t v42 = *(int8x16_t *)((char *)v22 + v38);
        uint8x16_t v43 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v42), (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v44 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v41), (int8x16_t)xmmword_1850CD8D0);
        uint16x8_t v18 = vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v43.i8);
        uint16x8_t v45 = vmull_high_u8((uint8x16_t)v41, v43);
        a14 = vqaddq_u16(v18, vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v44.i8));
        uint16x8_t v46 = vqaddq_u16(v45, vmull_high_u8((uint8x16_t)v42, v44));
        uint16x8_t v47 = vminq_u16(a14, v26);
        uint16x8_t v48 = vminq_u16(v46, v26);
        *(uint8x16_t *)((char *)v22 + v38) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v47, v47, 8uLL), 8uLL), vrsraq_n_u16(v48, v48, 8uLL), 8uLL);
        v23 += v24;
        v40 -= 4;
        v38 += v25;
      }
      while (v40 > 3);
      unsigned int v22 = (_DWORD *)((char *)v22 + v38);
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v38);
      unint64_t v19 = v19 - v39 + v40;
      goto LABEL_31;
    }
    if (v27) {
      break;
    }
    int8x16_t v28 = (unsigned __int8 *)&v23[v19];
    uint16x8_t v29 = (int8x16_t *)v23;
    do
      __int32 v30 = v29++;
    while (v29 <= (int8x16_t *)v28 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v30)) & 0x80) != 0);
    do
    {
      __int32 v31 = v30;
      __int32 v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= (int8x16_t *)v28 && !v31->i32[0]);
    if (v31 < (int8x16_t *)v28)
    {
      while (!v31->i8[0])
      {
        __int32 v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= (int8x16_t *)v28)
        {
          __int32 v31 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    int64_t v32 = (char *)v31 - v23;
    int64_t v33 = ((char *)v31 - v23) * a6;
    v20 += v33;
    v22 += v33;
    v23 += v33;
    v19 -= v32;
LABEL_31:
    if (v19 <= 3) {
      goto LABEL_34;
    }
  }
  uint64_t v49 = 0;
  while (1)
  {
    uint8x16_t v50 = *(uint8x16_t *)((char *)v20 + v49);
    int8x16_t v51 = *(int8x16_t *)((char *)v22 + v49);
    a14.i32[0] = v27;
    uint8x16_t v52 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_1850CD8E0);
    uint16x8_t v53 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v52.i8);
    uint16x8_t v54 = vmull_high_u8(v50, v52);
    uint16x8_t v55 = vminq_u16(v53, v26);
    uint16x8_t v56 = vminq_u16(v54, v26);
    *(uint8x8_t *)v53.i8 = vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    int8x16_t v57 = vqtbl1q_s8(vmvnq_s8(v51), (int8x16_t)xmmword_1850CD8D0);
    uint8x16_t v58 = (uint8x16_t)vmvnq_s8(vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_1850CD8F0));
    uint16x8_t v59 = vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v57.i8);
    a14 = vmull_u8(*(uint8x8_t *)v18.i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL));
    uint16x8_t v60 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v58.i8);
    uint16x8_t v61 = vmull_high_u8((uint8x16_t)v51, v58);
    uint16x8_t v62 = vminq_u16(vqaddq_u16(v59, v60), v26);
    uint16x8_t v63 = vminq_u16(vqaddq_u16(a14, v61), v26);
    *(uint8x16_t *)((char *)v22 + v49) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v62, v62, 8uLL), 8uLL), vrsraq_n_u16(v63, v63, 8uLL), 8uLL);
    v23 += v24;
    v19 -= 4;
    if (v19 < 4) {
      break;
    }
    unsigned __int32 v27 = *(_DWORD *)v23;
    v49 += v25;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v49);
      unsigned int v22 = (_DWORD *)((char *)v22 + v49);
      goto LABEL_31;
    }
  }
  unint64_t v20 = (unsigned __int32 *)((char *)v20 + v25 + v49);
  unsigned int v22 = (_DWORD *)((char *)v22 + v25 + v49);
LABEL_34:
  uint64_t v64 = v19 + a17;
  if (v64)
  {
    int8x16_t v65 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      uint16x8_t v66 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v67) = v66.i8[0];
      BYTE1(v67) = v66.i8[2];
      BYTE2(v67) = v66.i8[4];
      HIBYTE(v67) = v66.i8[6];
      v66.i32[0] = *v22;
      uint16x8_t v68 = vmovl_u8(*(uint8x8_t *)v66.i8);
      LOBYTE(v69) = v68.i8[0];
      BYTE1(v69) = v68.i8[2];
      BYTE2(v69) = v68.i8[4];
      HIBYTE(v69) = v68.i8[6];
      v68.i8[7] = 0;
      v68.i8[0] = *v23;
      v68.i8[1] = *v23;
      v68.i8[2] = *v23;
      *(__int32 *)((char *)v68.i32 + 3) = *v23;
      uint16x8_t v70 = vminq_u16(vmull_u8((uint8x8_t)v67, *(uint8x8_t *)v68.i8), (uint16x8_t)v65);
      *(uint8x8_t *)v70.i8 = vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL);
      *(int8x8_t *)v71.i8 = vmvn_s8((int8x8_t)v69);
      v71.i64[1] = v71.i64[0];
      *(int8x8_t *)v72.i8 = vmvn_s8(*(int8x8_t *)v70.i8);
      v72.i64[1] = v72.i64[0];
      uint16x8_t v73 = vminq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v70.i8, (uint8x8_t)vqtbl1_s8(v71, (int8x8_t)0x707070703030303)), vmull_u8((uint8x8_t)v69, (uint8x8_t)vqtbl1_s8(v72, (int8x8_t)0x707070703030303))), (uint16x8_t)v65);
      a9 = vrsraq_n_u16(v73, v73, 8uLL);
      *(uint8x8_t *)a9.i8 = vqrshrn_n_u16(a9, 8uLL);
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, v65));
      *unsigned int v22 = a9.i32[0];
      uint8x8_t v74 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v74 >= v21) {
        uint64_t v75 = -(uint64_t)a5;
      }
      else {
        uint64_t v75 = 0;
      }
      unint64_t v20 = &v74[v75];
      v22 += a6;
      --v64;
    }
    while (v64);
  }
  *BOOL result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)9,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, uint16x8_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v19 = a18;
  unint64_t v20 = *result;
  unint64_t v21 = *a3;
  unsigned int v22 = *a2;
  int8x16_t v23 = *a4;
  if (a18 < 4) {
    goto LABEL_34;
  }
  uint64_t v24 = 4 * a6;
  uint64_t v25 = 16 * a6;
  uint16x8_t v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v27 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      int64_t v34 = (unsigned __int8 *)&v23[v19];
      int64_t v35 = (int8x16_t *)v23;
      do
        int64_t v36 = v35++;
      while (v35 <= (int8x16_t *)v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        int64_t v37 = v36;
        int64_t v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= (int8x16_t *)v34 && v37->i32[0] == -1);
      if (v37 < (int8x16_t *)v34)
      {
        while (v37->u8[0] == 255)
        {
          int64_t v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= (int8x16_t *)v34)
          {
            int64_t v37 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      uint64_t v38 = 0;
      int64_t v39 = (char *)v37 - v23;
      unint64_t v40 = (char *)v37 - v23;
      do
      {
        int8x16_t v41 = *(int8x16_t *)((char *)v20 + v38);
        int8x16_t v42 = *(int8x16_t *)((char *)v22 + v38);
        uint8x16_t v43 = (uint8x16_t)vqtbl1q_s8(v41, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v44 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v42), (int8x16_t)xmmword_1850CD8D0);
        uint16x8_t v18 = vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v44.i8);
        uint16x8_t v45 = vmull_high_u8((uint8x16_t)v41, v44);
        uint16x8_t v46 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8);
        uint16x8_t v47 = vmull_high_u8((uint8x16_t)v42, v43);
        a14 = vqaddq_u16(v18, v46);
        uint16x8_t v48 = vqaddq_u16(v45, v47);
        uint16x8_t v49 = vminq_u16(a14, v26);
        uint16x8_t v50 = vminq_u16(v48, v26);
        *(uint8x16_t *)((char *)v22 + v38) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL), vrsraq_n_u16(v50, v50, 8uLL), 8uLL);
        v23 += v24;
        v40 -= 4;
        v38 += v25;
      }
      while (v40 > 3);
      unsigned int v22 = (_DWORD *)((char *)v22 + v38);
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v38);
      unint64_t v19 = v19 - v39 + v40;
      goto LABEL_31;
    }
    if (v27) {
      break;
    }
    int8x16_t v28 = (unsigned __int8 *)&v23[v19];
    uint16x8_t v29 = (int8x16_t *)v23;
    do
      __int32 v30 = v29++;
    while (v29 <= (int8x16_t *)v28 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v30)) & 0x80) != 0);
    do
    {
      __int32 v31 = v30;
      __int32 v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= (int8x16_t *)v28 && !v31->i32[0]);
    if (v31 < (int8x16_t *)v28)
    {
      while (!v31->i8[0])
      {
        __int32 v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= (int8x16_t *)v28)
        {
          __int32 v31 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    int64_t v32 = (char *)v31 - v23;
    int64_t v33 = ((char *)v31 - v23) * a6;
    v20 += v33;
    v22 += v33;
    v23 += v33;
    v19 -= v32;
LABEL_31:
    if (v19 <= 3) {
      goto LABEL_34;
    }
  }
  uint64_t v51 = 0;
  while (1)
  {
    uint8x16_t v52 = *(uint8x16_t *)((char *)v20 + v51);
    int8x16_t v53 = *(int8x16_t *)((char *)v22 + v51);
    a14.i32[0] = v27;
    int8x16_t v54 = vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_1850CD8E0);
    uint16x8_t v55 = vminq_u16(vmull_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v54.i8), v26);
    uint16x8_t v56 = vminq_u16(vmull_high_u8(v52, (uint8x16_t)v54), v26);
    uint16x8_t v57 = vrsraq_n_u16(v55, v55, 8uLL);
    *(uint8x8_t *)v57.i8 = vqrshrn_n_u16(v57, 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    uint8x16_t v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v59 = vqtbl1q_s8(vmvnq_s8(v53), (int8x16_t)xmmword_1850CD8D0);
    uint16x8_t v60 = vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v59.i8);
    uint16x8_t v61 = vmull_u8(*(uint8x8_t *)v18.i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
    uint8x16_t v62 = (uint8x16_t)vmvnq_s8(v54);
    uint16x8_t v18 = vqaddq_u16(v60, vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v62.i8));
    a14 = vqaddq_u16(v61, vmull_high_u8((uint8x16_t)v53, v62));
    uint16x8_t v63 = vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v58.i8);
    uint16x8_t v64 = vmull_high_u8((uint8x16_t)v53, v58);
    uint16x8_t v65 = vminq_u16(vqaddq_u16(v18, v63), v26);
    uint16x8_t v66 = vminq_u16(vqaddq_u16(a14, v64), v26);
    *(uint8x16_t *)((char *)v22 + v51) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v65, v65, 8uLL), 8uLL), vrsraq_n_u16(v66, v66, 8uLL), 8uLL);
    v23 += v24;
    v19 -= 4;
    if (v19 < 4) {
      break;
    }
    unsigned __int32 v27 = *(_DWORD *)v23;
    v51 += v25;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v51);
      unsigned int v22 = (_DWORD *)((char *)v22 + v51);
      goto LABEL_31;
    }
  }
  unint64_t v20 = (unsigned __int32 *)((char *)v20 + v25 + v51);
  unsigned int v22 = (_DWORD *)((char *)v22 + v25 + v51);
LABEL_34:
  uint64_t v67 = v19 + a17;
  if (v67)
  {
    int8x16_t v68 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      uint16x8_t v69 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v70) = v69.i8[0];
      BYTE1(v70) = v69.i8[2];
      BYTE2(v70) = v69.i8[4];
      HIBYTE(v70) = v69.i8[6];
      v69.i32[0] = *v22;
      uint16x8_t v71 = vmovl_u8(*(uint8x8_t *)v69.i8);
      LOBYTE(v72) = v71.i8[0];
      BYTE1(v72) = v71.i8[2];
      BYTE2(v72) = v71.i8[4];
      HIBYTE(v72) = v71.i8[6];
      v71.i8[7] = 0;
      v71.i8[0] = *v23;
      v71.i8[1] = *v23;
      v71.i8[2] = *v23;
      *(__int32 *)((char *)v71.i32 + 3) = *v23;
      uint16x8_t v73 = vminq_u16(vmull_u8((uint8x8_t)v70, *(uint8x8_t *)v71.i8), (uint16x8_t)v68);
      uint16x8_t v74 = vrsraq_n_u16(v73, v73, 8uLL);
      *(int8x8_t *)v75.i8 = vmvn_s8((int8x8_t)v72);
      v75.i64[1] = v75.i64[0];
      uint8x8_t v76 = vqrshrn_n_u16(v74, 8uLL);
      uint16x8_t v77 = vminq_u16(vqaddq_u16(vqaddq_u16(vmull_u8(v76, (uint8x8_t)vqtbl1_s8(v75, (int8x8_t)0x707070703030303)), vmull_u8((uint8x8_t)v72, (uint8x8_t)vmvn_s8(*(int8x8_t *)v71.i8))), vmull_u8((uint8x8_t)v72, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v76, v74, 8uLL), (int8x8_t)0x707070703030303))), (uint16x8_t)v68);
      a9 = vrsraq_n_u16(v77, v77, 8uLL);
      *(uint8x8_t *)a9.i8 = vqrshrn_n_u16(a9, 8uLL);
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, v68));
      *unsigned int v22 = a9.i32[0];
      uint64_t v78 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v78 >= v21) {
        uint64_t v79 = -(uint64_t)a5;
      }
      else {
        uint64_t v79 = 0;
      }
      unint64_t v20 = &v78[v79];
      v22 += a6;
      --v67;
    }
    while (v67);
  }
  *BOOL result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)8,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, char **a4, int a5, int a6, int8x16_t a7, double a8, uint16x8_t a9, double a10, __n128 a11, double a12, uint8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  uint16x8_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unint64_t v21 = *a4;
  if (a17 < 4) {
    goto LABEL_34;
  }
  uint64_t v22 = 4 * a6;
  uint64_t v23 = 16 * a6;
  a7.i64[1] = 0xF0F0F0F0B0B0B0BLL;
  uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v25 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      int64_t v32 = (unsigned __int8 *)&v21[v17];
      int64_t v33 = (int8x16_t *)v21;
      do
        int64_t v34 = v33++;
      while (v33 <= (int8x16_t *)v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        int64_t v35 = v34;
        int64_t v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= (int8x16_t *)v32 && v35->i32[0] == -1);
      if (v35 < (int8x16_t *)v32)
      {
        while (v35->u8[0] == 255)
        {
          int64_t v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= (int8x16_t *)v32)
          {
            int64_t v35 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      uint64_t v36 = 0;
      int64_t v37 = (char *)v35 - v21;
      unint64_t v38 = (char *)v35 - v21;
      do
      {
        uint8x16_t v39 = *(uint8x16_t *)((char *)v20 + v36);
        uint8x16_t v40 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v36), (int8x16_t)xmmword_1850CD8D0);
        uint16x8_t v41 = vminq_u16(vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v40.i8), v24);
        uint16x8_t v42 = vminq_u16(vmull_high_u8(v39, v40), v24);
        a13 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v41, v41, 8uLL), 8uLL), vrsraq_n_u16(v42, v42, 8uLL), 8uLL);
        a11 = (__n128)vqsubq_u8(v39, a13);
        *(__n128 *)((char *)v20 + v36) = a11;
        v21 += v22;
        v38 -= 4;
        v36 += v23;
      }
      while (v38 > 3);
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v36);
      uint16x8_t v18 = (unsigned __int32 *)((char *)v18 + v36);
      unint64_t v17 = v17 - v37 + v38;
      goto LABEL_31;
    }
    if (v25) {
      break;
    }
    uint16x8_t v26 = (unsigned __int8 *)&v21[v17];
    unsigned __int32 v27 = (int8x16_t *)v21;
    do
    {
      int8x16_t v28 = v27++;
      if (v27 > (int8x16_t *)v26) {
        break;
      }
      a11 = (__n128)vceqzq_s8(*v28);
    }
    while ((vminvq_u8((uint8x16_t)a11) & 0x80) != 0);
    do
    {
      uint16x8_t v29 = v28;
      int8x16_t v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= (int8x16_t *)v26 && !v29->i32[0]);
    if (v29 < (int8x16_t *)v26)
    {
      while (!v29->i8[0])
      {
        uint16x8_t v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= (int8x16_t *)v26)
        {
          uint16x8_t v29 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    int64_t v30 = (char *)v29 - v21;
    int64_t v31 = ((char *)v29 - v21) * a6;
    v18 += v31;
    v20 += v31;
    v21 += v31;
    v17 -= v30;
LABEL_31:
    if (v17 <= 3) {
      goto LABEL_34;
    }
  }
  uint64_t v43 = 0;
  while (1)
  {
    int8x16_t v44 = *(int8x16_t *)((char *)v20 + v43);
    a13.i32[0] = v25;
    uint8x16_t v45 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v46 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v43), (int8x16_t)xmmword_1850CD8D0);
    uint16x8_t v47 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
    uint16x8_t v48 = vmull_high_u8(v46, v45);
    uint16x8_t v49 = vminq_u16(v47, v24);
    uint16x8_t v50 = vminq_u16(v48, v24);
    uint16x8_t v51 = vminq_u16(vmull_u8(*(uint8x8_t *)v44.i8, vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL)), v24);
    uint16x8_t v52 = vminq_u16(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)), v24);
    a13 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
    a11 = (__n128)vqsubq_u8((uint8x16_t)v44, a13);
    *(__n128 *)((char *)v20 + v43) = a11;
    v21 += v22;
    v17 -= 4;
    if (v17 < 4) {
      break;
    }
    unsigned __int32 v25 = *(_DWORD *)v21;
    v43 += v23;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      uint16x8_t v18 = (unsigned __int32 *)((char *)v18 + v43);
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v43);
      goto LABEL_31;
    }
  }
  uint16x8_t v18 = (unsigned __int32 *)((char *)v18 + v23 + v43);
  unint64_t v20 = (unsigned __int32 *)((char *)v20 + v23 + v43);
LABEL_34:
  uint64_t v53 = v17 + a16;
  if (v53)
  {
    a7.i64[0] = -4244438269;
    uint16x8_t v54 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      uint16x8_t v55 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i8[7] = 0;
      v55.i8[0] = *v21;
      v55.i8[1] = *v21;
      v55.i8[2] = *v21;
      *(__int32 *)((char *)v55.i32 + 3) = *v21;
      a11.n128_u32[0] = *v18;
      a11.n128_u64[1] = a11.n128_u64[0];
      a11.n128_u64[0] = (unint64_t)vqtbl1_s8((int8x16_t)a11, (int8x8_t)-4244438269);
      uint16x8_t v57 = vminq_u16(vmull_u8((uint8x8_t)a11.n128_u64[0], *(uint8x8_t *)v55.i8), v54);
      uint16x8_t v58 = vminq_u16(vmull_u8((uint8x8_t)v56, vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL)), v54);
      a9 = vrsraq_n_u16(v58, v58, 8uLL);
      *(uint8x8_t *)a9.i8 = vqsub_u8((uint8x8_t)v56, vqrshrn_n_u16(a9, 8uLL));
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, a7));
      *unint64_t v20 = a9.i32[0];
      int8x16_t v59 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v59 >= v19) {
        uint64_t v60 = -(uint64_t)a5;
      }
      else {
        uint64_t v60 = 0;
      }
      uint16x8_t v18 = &v59[v60];
      v20 += a6;
      --v53;
    }
    while (v53);
  }
  *BOOL result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)7,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, char **a4, int a5, int a6, int8x16_t a7, double a8, uint16x8_t a9, double a10, __n128 a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17 = a17;
  uint16x8_t v18 = *result;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  unint64_t v21 = *a4;
  if (a17 < 4) {
    goto LABEL_34;
  }
  uint64_t v22 = 4 * a6;
  uint64_t v23 = 16 * a6;
  a7.i64[1] = 0xF0F0F0F0B0B0B0BLL;
  uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v25 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      int64_t v32 = (unsigned __int8 *)&v21[v17];
      int64_t v33 = (int8x16_t *)v21;
      do
        int64_t v34 = v33++;
      while (v33 <= (int8x16_t *)v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        int64_t v35 = v34;
        int64_t v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= (int8x16_t *)v32 && v35->i32[0] == -1);
      if (v35 < (int8x16_t *)v32)
      {
        while (v35->u8[0] == 255)
        {
          int64_t v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= (int8x16_t *)v32)
          {
            int64_t v35 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      uint64_t v36 = 0;
      int64_t v37 = (char *)v35 - v21;
      unint64_t v38 = (char *)v35 - v21;
      do
      {
        uint8x16_t v39 = *(uint8x16_t *)((char *)v20 + v36);
        uint8x16_t v40 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v36), (int8x16_t)xmmword_1850CD8D0);
        a13 = vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v40.i8);
        uint16x8_t v41 = vmull_high_u8(v39, v40);
        uint16x8_t v42 = vminq_u16(a13, v24);
        uint16x8_t v43 = vminq_u16(v41, v24);
        a11 = (__n128)vrsraq_n_u16(v43, v43, 8uLL);
        *(uint8x16_t *)((char *)v20 + v36) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v42, v42, 8uLL), 8uLL), (uint16x8_t)a11, 8uLL);
        v21 += v22;
        v38 -= 4;
        v36 += v23;
      }
      while (v38 > 3);
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v36);
      uint16x8_t v18 = (unsigned __int32 *)((char *)v18 + v36);
      unint64_t v17 = v17 - v37 + v38;
      goto LABEL_31;
    }
    if (v25) {
      break;
    }
    uint16x8_t v26 = (unsigned __int8 *)&v21[v17];
    unsigned __int32 v27 = (int8x16_t *)v21;
    do
    {
      int8x16_t v28 = v27++;
      if (v27 > (int8x16_t *)v26) {
        break;
      }
      a11 = (__n128)vceqzq_s8(*v28);
    }
    while ((vminvq_u8((uint8x16_t)a11) & 0x80) != 0);
    do
    {
      uint16x8_t v29 = v28;
      int8x16_t v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= (int8x16_t *)v26 && !v29->i32[0]);
    if (v29 < (int8x16_t *)v26)
    {
      while (!v29->i8[0])
      {
        uint16x8_t v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= (int8x16_t *)v26)
        {
          uint16x8_t v29 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    int64_t v30 = (char *)v29 - v21;
    int64_t v31 = ((char *)v29 - v21) * a6;
    v18 += v31;
    v20 += v31;
    v21 += v31;
    v17 -= v30;
LABEL_31:
    if (v17 <= 3) {
      goto LABEL_34;
    }
  }
  uint64_t v44 = 0;
  while (1)
  {
    uint8x16_t v45 = *(uint8x16_t *)((char *)v20 + v44);
    a13.i32[0] = v25;
    uint8x16_t v46 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v47 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v44), (int8x16_t)xmmword_1850CD8D0);
    uint16x8_t v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v47.i8), v24);
    uint16x8_t v49 = vminq_u16(vmull_high_u8(v46, v47), v24);
    uint8x16_t v50 = vqsubq_u8(v46, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL));
    uint16x8_t v51 = vminq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v50.i8), v24);
    uint16x8_t v52 = vminq_u16(vmull_high_u8(v45, v50), v24);
    a13 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
    a11 = (__n128)vqsubq_u8(v45, (uint8x16_t)a13);
    *(__n128 *)((char *)v20 + v44) = a11;
    v21 += v22;
    v17 -= 4;
    if (v17 < 4) {
      break;
    }
    unsigned __int32 v25 = *(_DWORD *)v21;
    v44 += v23;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      uint16x8_t v18 = (unsigned __int32 *)((char *)v18 + v44);
      unint64_t v20 = (unsigned __int32 *)((char *)v20 + v44);
      goto LABEL_31;
    }
  }
  uint16x8_t v18 = (unsigned __int32 *)((char *)v18 + v23 + v44);
  unint64_t v20 = (unsigned __int32 *)((char *)v20 + v23 + v44);
LABEL_34:
  uint64_t v53 = v17 + a16;
  if (v53)
  {
    a7.i64[0] = -4244438269;
    uint16x8_t v54 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      uint16x8_t v55 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i8[7] = 0;
      v55.i8[0] = *v21;
      v55.i8[1] = *v21;
      v55.i8[2] = *v21;
      *(__int32 *)((char *)v55.i32 + 3) = *v21;
      a11.n128_u32[0] = *v18;
      a11.n128_u64[1] = a11.n128_u64[0];
      a11 = (__n128)vminq_u16(vmull_u8(*(uint8x8_t *)v55.i8, (uint8x8_t)vqtbl1_s8((int8x16_t)a11, (int8x8_t)-4244438269)), v54);
      a11.n128_u64[0] = (unint64_t)vqrshrn_n_u16(vrsraq_n_u16((uint16x8_t)a11, (uint16x8_t)a11, 8uLL), 8uLL);
      uint16x8_t v57 = vminq_u16(vmull_u8((uint8x8_t)v56, vqsub_u8(*(uint8x8_t *)v55.i8, (uint8x8_t)a11.n128_u64[0])), v54);
      a9 = vrsraq_n_u16(v57, v57, 8uLL);
      *(uint8x8_t *)a9.i8 = vqsub_u8((uint8x8_t)v56, vqrshrn_n_u16(a9, 8uLL));
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, a7));
      *unint64_t v20 = a9.i32[0];
      uint16x8_t v58 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v58 >= v19) {
        uint64_t v59 = -(uint64_t)a5;
      }
      else {
        uint64_t v59 = 0;
      }
      uint16x8_t v18 = &v58[v59];
      v20 += a6;
      --v53;
    }
    while (v53);
  }
  *BOOL result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)6,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, int8x16_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18 = a18;
  unint64_t v19 = *result;
  unint64_t v20 = *a3;
  unint64_t v21 = *a2;
  uint64_t v22 = *a4;
  if (a18 < 4) {
    goto LABEL_37;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  uint64_t v25 = 4 * a6;
  uint64_t v26 = 16 * a6;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v28 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      int64_t v35 = (unsigned __int8 *)&v22[v18];
      uint64_t v36 = (int8x16_t *)v22;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        unint64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          unint64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            unint64_t v38 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v22;
      unint64_t v41 = (char *)v38 - v22;
      do
      {
        int8x16_t v42 = *(int8x16_t *)((char *)v21 + v39);
        uint8x16_t v43 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        int8x16_t v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v45 = (uint8x16_t)vbicq_s8(v42, vceqzq_s8(v44));
        uint8x16_t v46 = (uint8x16_t)vmvnq_s8(v44);
        uint16x8_t v47 = vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v46.i8);
        uint16x8_t v48 = vmull_high_u8(v43, v46);
        uint16x8_t v49 = vminq_u16(v47, v27);
        uint16x8_t v50 = vminq_u16(v48, v27);
        a15 = (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL), vrsraq_n_u16(v50, v50, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v21 + v39) = vqaddq_u8(v45, (uint8x16_t)a15);
        v22 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      unint64_t v21 = (_DWORD *)((char *)v21 + v39);
      unint64_t v19 = (unsigned __int32 *)((char *)v19 + v39);
      unint64_t v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28) {
      break;
    }
    uint16x8_t v29 = (unsigned __int8 *)&v22[v18];
    int64_t v30 = (int8x16_t *)v22;
    do
      int64_t v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      int64_t v32 = v31;
      int64_t v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        int64_t v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          int64_t v32 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v22;
    int64_t v34 = ((char *)v32 - v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 += v34;
    v18 -= v33;
LABEL_34:
    if (v18 <= 3) {
      goto LABEL_37;
    }
  }
  uint64_t v51 = 0;
  while (1)
  {
    int8x16_t v52 = *(int8x16_t *)((char *)v21 + v51);
    a15.i32[0] = v28;
    int8x16_t v53 = vqtbl1q_s8(a15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v54 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v51), a8);
    uint16x8_t v55 = vminq_u16(vmull_u8(*(uint8x8_t *)v54.i8, *(uint8x8_t *)v53.i8), v27);
    uint16x8_t v56 = vminq_u16(vmull_high_u8(v54, (uint8x16_t)v53), v27);
    int8x16_t v57 = vqtbl1q_s8(v52, (int8x16_t)xmmword_1850CD8D0);
    uint8x16_t v58 = (uint8x16_t)vbicq_s8(v52, vceqzq_s8(v57));
    int8x16_t v59 = vmvnq_s8(v57);
    uint16x8_t v60 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL), *(uint8x8_t *)v59.i8), v27);
    uint16x8_t v61 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), v27);
    a15 = vceqzq_s8(v53);
    *(int8x16_t *)((char *)v21 + v51) = vbslq_s8(a15, v52, (int8x16_t)vqaddq_u8(v58, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v60, v60, 8uLL), 8uLL), vrsraq_n_u16(v61, v61, 8uLL), 8uLL)));
    v22 += v25;
    v18 -= 4;
    if (v18 < 4) {
      break;
    }
    unsigned __int32 v28 = *(_DWORD *)v22;
    v51 += v26;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v19 = (unsigned __int32 *)((char *)v19 + v51);
      unint64_t v21 = (_DWORD *)((char *)v21 + v51);
      goto LABEL_34;
    }
  }
  unint64_t v19 = (unsigned __int32 *)((char *)v19 + v26 + v51);
  unint64_t v21 = (_DWORD *)((char *)v21 + v26 + v51);
LABEL_37:
  uint64_t v62 = v18 + a17;
  if (v62)
  {
    if (a7) {
      unsigned int v63 = 0;
    }
    else {
      unsigned int v63 = -1;
    }
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v63), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v64 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      uint16x8_t v65 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v66) = v65.i8[0];
      BYTE1(v66) = v65.i8[2];
      BYTE2(v66) = v65.i8[4];
      HIBYTE(v66) = v65.i8[6];
      v65.i32[0] = *v21;
      v65.i64[0] = vmovl_u8(*(uint8x8_t *)v65.i8).u64[0];
      LOBYTE(v67) = v65.i8[0];
      BYTE1(v67) = v65.i8[2];
      BYTE2(v67) = v65.i8[4];
      HIBYTE(v67) = v65.i8[6];
      v68.i8[7] = 0;
      v68.i8[0] = *v22;
      v68.i8[1] = *v22;
      v68.i8[2] = *v22;
      *(__int32 *)((char *)v68.i32 + 3) = *v22;
      uint16x8_t v69 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v66, *(int8x8_t *)a8.i8), v68), v64);
      *(int8x8_t *)v65.i8 = vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v65.i8, 6), (int8x8_t)-4244438269);
      uint8x8_t v70 = (uint8x8_t)vbic_s8((int8x8_t)v67, vceqz_s8(*(int8x8_t *)v65.i8));
      uint16x8_t v71 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v69, v69, 8uLL), 8uLL), (uint8x8_t)vmvn_s8(*(int8x8_t *)v65.i8)), v64);
      a11 = vrsraq_n_u16(v71, v71, 8uLL);
      *(int8x8_t *)a11.i8 = vbsl_s8(vceqz_s8((int8x8_t)v68), (int8x8_t)v67, (int8x8_t)vqadd_u8(v70, vqrshrn_n_u16(a11, 8uLL)));
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *unint64_t v21 = a11.i32[0];
      unsigned int v72 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v72 >= v20) {
        uint64_t v73 = -(uint64_t)a5;
      }
      else {
        uint64_t v73 = 0;
      }
      unint64_t v19 = &v72[v73];
      v21 += a6;
      --v62;
    }
    while (v62);
  }
  *BOOL result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)5,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, double a9, uint8x8_t a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v19 = a18;
  unint64_t v20 = *result;
  unint64_t v21 = *a3;
  uint64_t v22 = *a2;
  unsigned int v23 = *a4;
  if (a18 < 4) {
    goto LABEL_34;
  }
  uint64_t v24 = 4 * a6;
  uint64_t v25 = 16 * a6;
  uint16x8_t v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  v27.i64[0] = -1;
  v27.i64[1] = -1;
  a10.i32[1] = 16843009;
  while (1)
  {
    unsigned __int32 v28 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      int64_t v35 = (unsigned __int8 *)&v23[v19];
      uint64_t v36 = (int8x16_t *)v23;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v27)) & 0x80) != 0);
      do
      {
        unint64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          unint64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            unint64_t v38 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v23;
      unint64_t v41 = (char *)v38 - v23;
      do
      {
        int8x16_t v42 = *(int8x16_t *)((char *)v20 + v39);
        int8x16_t v43 = *(int8x16_t *)((char *)v22 + v39);
        uint8x16_t v44 = (uint8x16_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_1850CD8D0);
        uint8x16_t v45 = (uint8x16_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1850CD8D0);
        uint16x8_t v46 = vminq_u16(vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v44.i8), v26);
        uint16x8_t v47 = vminq_u16(vmull_high_u8((uint8x16_t)v43, v44), v26);
        uint8x16_t v18 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v46, v46, 8uLL), 8uLL), vrsraq_n_u16(v47, v47, 8uLL), 8uLL);
        uint16x8_t v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v42.i8), v26);
        uint16x8_t v49 = vminq_u16(vmull_high_u8(v45, (uint8x16_t)v42), v26);
        a14 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v22 + v39) = vqaddq_u8(vqsubq_u8((uint8x16_t)v43, v18), (uint8x16_t)a14);
        v23 += v24;
        v41 -= 4;
        v39 += v25;
      }
      while (v41 > 3);
      uint64_t v22 = (_DWORD *)((char *)v22 + v39);
      unint64_t v20 = (_DWORD *)((char *)v20 + v39);
      unint64_t v19 = v19 - v40 + v41;
      goto LABEL_31;
    }
    if (v28) {
      break;
    }
    uint16x8_t v29 = (unsigned __int8 *)&v23[v19];
    int64_t v30 = (int8x16_t *)v23;
    do
      int64_t v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      int64_t v32 = v31;
      int64_t v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        int64_t v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          int64_t v32 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v23;
    int64_t v34 = ((char *)v32 - v23) * a6;
    v20 += v34;
    v22 += v34;
    v23 += v34;
    v19 -= v33;
LABEL_31:
    if (v19 <= 3) {
      goto LABEL_34;
    }
  }
  uint64_t v50 = 0;
  while (1)
  {
    uint8x16_t v51 = *(uint8x16_t *)((char *)v20 + v50);
    int8x16_t v52 = *(int8x16_t *)((char *)v22 + v50);
    a14.i32[0] = v28;
    uint8x16_t v53 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_1850CD8E0);
    uint16x8_t v54 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v53.i8);
    uint16x8_t v55 = vmull_high_u8(v51, v53);
    uint16x8_t v56 = vminq_u16(v54, v26);
    uint16x8_t v57 = vminq_u16(v55, v26);
    *(uint8x8_t *)v54.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL);
    uint8x16_t v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_1850CD8F0);
    int8x16_t v59 = vqtbl1q_s8(v52, (int8x16_t)xmmword_1850CD8D0);
    uint16x8_t v60 = vminq_u16(vmull_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v58.i8), v26);
    uint16x8_t v61 = vminq_u16(vmull_high_u8((uint8x16_t)v52, v58), v26);
    uint8x16_t v62 = vqsubq_u8((uint8x16_t)v52, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v60, v60, 8uLL), 8uLL), vrsraq_n_u16(v61, v61, 8uLL), 8uLL));
    uint16x8_t v63 = vminq_u16(vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v54.i8), v26);
    uint16x8_t v64 = vminq_u16(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), *(uint8x8_t *)v18.i8), v26);
    a14 = vrsraq_n_u16(v64, v64, 8uLL);
    *(uint8x16_t *)((char *)v22 + v50) = vqaddq_u8(v62, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v63, v63, 8uLL), 8uLL), a14, 8uLL));
    v23 += v24;
    v19 -= 4;
    if (v19 < 4) {
      break;
    }
    unsigned __int32 v28 = *(_DWORD *)v23;
    v50 += v25;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (_DWORD *)((char *)v20 + v50);
      uint64_t v22 = (_DWORD *)((char *)v22 + v50);
      goto LABEL_31;
    }
  }
  unint64_t v20 = (_DWORD *)((char *)v20 + v25 + v50);
  uint64_t v22 = (_DWORD *)((char *)v22 + v25 + v50);
LABEL_34:
  uint64_t v65 = v19 + a17;
  if (v65)
  {
    int8x16_t v66 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v20;
      uint16x8_t v67 = vmovl_u8(a10);
      LOBYTE(v68) = v67.i8[0];
      BYTE1(v68) = v67.i8[2];
      BYTE2(v68) = v67.i8[4];
      HIBYTE(v68) = v67.i8[6];
      v67.i32[0] = *v22;
      v67.i64[0] = vmovl_u8(*(uint8x8_t *)v67.i8).u64[0];
      LOBYTE(v69) = v67.i8[0];
      BYTE1(v69) = v67.i8[2];
      BYTE2(v69) = v67.i8[4];
      HIBYTE(v69) = v67.i8[6];
      v70.i8[7] = 0;
      v70.i8[0] = *v23;
      v70.i8[1] = *v23;
      v70.i8[2] = *v23;
      *(__int32 *)((char *)v70.i32 + 3) = *v23;
      uint16x8_t v71 = vminq_u16(vmull_u8((uint8x8_t)v68, v70), (uint16x8_t)v66);
      uint16x8_t v72 = vrsraq_n_u16(v71, v71, 8uLL);
      uint8x8_t v73 = vqrshrn_n_u16(v72, 8uLL);
      uint16x8_t v74 = vminq_u16(vmull_u8((uint8x8_t)v69, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v73, v72, 8uLL), (int8x8_t)0x707070703030303)), (uint16x8_t)v66);
      uint16x8_t v75 = vminq_u16(vmull_u8((uint8x8_t)vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v67.i8, 6), (int8x8_t)-4244438269), v73), (uint16x8_t)v66);
      int8x16_t v76 = (int8x16_t)vrsraq_n_u16(v75, v75, 8uLL);
      *(uint8x8_t *)v76.i8 = vqadd_u8(vqsub_u8((uint8x8_t)v69, vqrshrn_n_u16(vrsraq_n_u16(v74, v74, 8uLL), 8uLL)), vqrshrn_n_u16((uint16x8_t)v76, 8uLL));
      a10 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v76, v66));
      *uint64_t v22 = a10.i32[0];
      uint16x8_t v77 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v77 >= v21) {
        uint64_t v78 = -(uint64_t)a5;
      }
      else {
        uint64_t v78 = 0;
      }
      unint64_t v20 = &v77[v78];
      v22 += a6;
      --v65;
    }
    while (v65);
  }
  *BOOL result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)4,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18 = a18;
  unint64_t v19 = *result;
  unint64_t v20 = *a3;
  unint64_t v21 = *a2;
  uint64_t v22 = *a4;
  if (a18 < 4) {
    goto LABEL_37;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  uint64_t v25 = 4 * a6;
  uint64_t v26 = 16 * a6;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v28 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      int64_t v35 = (unsigned __int8 *)&v22[v18];
      uint64_t v36 = (int8x16_t *)v22;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        unint64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          unint64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            unint64_t v38 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v22;
      unint64_t v41 = (char *)v38 - v22;
      do
      {
        uint8x16_t v42 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        uint8x16_t v43 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v21 + v39), (int8x16_t)xmmword_1850CD8D0);
        uint16x8_t v44 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8), v27);
        uint16x8_t v45 = vminq_u16(vmull_high_u8(v42, v43), v27);
        a15 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v44, v44, 8uLL), 8uLL), vrsraq_n_u16(v45, v45, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v21 + v39) = vqsubq_u8(v42, (uint8x16_t)a15);
        v22 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      unint64_t v21 = (_DWORD *)((char *)v21 + v39);
      unint64_t v19 = (unsigned __int32 *)((char *)v19 + v39);
      unint64_t v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28) {
      break;
    }
    uint16x8_t v29 = (unsigned __int8 *)&v22[v18];
    int64_t v30 = (int8x16_t *)v22;
    do
      int64_t v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      int64_t v32 = v31;
      int64_t v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        int64_t v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          int64_t v32 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v22;
    int64_t v34 = ((char *)v32 - v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 += v34;
    v18 -= v33;
LABEL_34:
    if (v18 <= 3) {
      goto LABEL_37;
    }
  }
  uint64_t v46 = 0;
  while (1)
  {
    int8x16_t v47 = *(int8x16_t *)((char *)v21 + v46);
    a15.i32[0] = v28;
    int8x16_t v48 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v49 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v46), a8);
    uint16x8_t v50 = vminq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), v27);
    uint16x8_t v51 = vminq_u16(vmull_high_u8(v49, (uint8x16_t)v48), v27);
    uint8x16_t v52 = (uint8x16_t)vmvnq_s8(v48);
    int8x16_t v53 = vqtbl1q_s8(vmvnq_s8(v47), (int8x16_t)xmmword_1850CD8D0);
    uint16x8_t v54 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v52.i8);
    uint16x8_t v55 = vmull_high_u8((uint8x16_t)v47, v52);
    a15 = vqaddq_u16(v54, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL), *(uint8x8_t *)v53.i8));
    uint16x8_t v56 = vqaddq_u16(v55, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
    uint16x8_t v57 = vminq_u16(a15, v27);
    uint16x8_t v58 = vminq_u16(v56, v27);
    *(uint8x16_t *)((char *)v21 + v46) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL), vrsraq_n_u16(v58, v58, 8uLL), 8uLL);
    v22 += v25;
    v18 -= 4;
    if (v18 < 4) {
      break;
    }
    unsigned __int32 v28 = *(_DWORD *)v22;
    v46 += v26;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v19 = (unsigned __int32 *)((char *)v19 + v46);
      unint64_t v21 = (_DWORD *)((char *)v21 + v46);
      goto LABEL_34;
    }
  }
  unint64_t v19 = (unsigned __int32 *)((char *)v19 + v26 + v46);
  unint64_t v21 = (_DWORD *)((char *)v21 + v26 + v46);
LABEL_37:
  uint64_t v59 = v18 + a17;
  if (v59)
  {
    if (a7) {
      unsigned int v60 = 0;
    }
    else {
      unsigned int v60 = -1;
    }
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v60), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v61 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      uint16x8_t v62 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v63) = v62.i8[0];
      BYTE1(v63) = v62.i8[2];
      BYTE2(v63) = v62.i8[4];
      HIBYTE(v63) = v62.i8[6];
      v62.i32[0] = *v21;
      uint16x8_t v64 = vmovl_u8(*(uint8x8_t *)v62.i8);
      LOBYTE(v65) = v64.i8[0];
      BYTE1(v65) = v64.i8[2];
      BYTE2(v65) = v64.i8[4];
      HIBYTE(v65) = v64.i8[6];
      v64.i8[7] = 0;
      v64.i8[0] = *v22;
      v64.i8[1] = *v22;
      v64.i8[2] = *v22;
      *(__int32 *)((char *)v64.i32 + 3) = *v22;
      uint16x8_t v66 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v63, *(int8x8_t *)a8.i8), *(uint8x8_t *)v64.i8), v61);
      *(int8x8_t *)v67.i8 = vmvn_s8((int8x8_t)v65);
      v67.i64[1] = v67.i64[0];
      uint16x8_t v68 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v65, (uint8x8_t)vmvn_s8(*(int8x8_t *)v64.i8)), vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v66, v66, 8uLL), 8uLL), (uint8x8_t)vqtbl1_s8(v67, (int8x8_t)0x707070703030303))), v61);
      a11 = vrsraq_n_u16(v68, v68, 8uLL);
      *(uint8x8_t *)a11.i8 = vqrshrn_n_u16(a11, 8uLL);
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *unint64_t v21 = a11.i32[0];
      unsigned int v69 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v69 >= v20) {
        uint64_t v70 = -(uint64_t)a5;
      }
      else {
        uint64_t v70 = 0;
      }
      unint64_t v19 = &v69[v70];
      v21 += a6;
      --v59;
    }
    while (v59);
  }
  *BOOL result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)3,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18 = a18;
  unint64_t v19 = *result;
  unint64_t v20 = *a3;
  unint64_t v21 = *a2;
  uint64_t v22 = *a4;
  if (a18 < 4) {
    goto LABEL_37;
  }
  if (a7) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = -1;
  }
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  uint64_t v25 = 4 * a6;
  uint64_t v26 = 16 * a6;
  uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    unsigned __int32 v28 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      int64_t v35 = (unsigned __int8 *)&v22[v18];
      uint64_t v36 = (int8x16_t *)v22;
      do
        int64_t v37 = v36++;
      while (v36 <= (int8x16_t *)v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        unint64_t v38 = v37;
        int64_t v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= (int8x16_t *)v35 && v38->i32[0] == -1);
      if (v38 < (int8x16_t *)v35)
      {
        while (v38->u8[0] == 255)
        {
          unint64_t v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= (int8x16_t *)v35)
          {
            unint64_t v38 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      uint64_t v39 = 0;
      int64_t v40 = (char *)v38 - v22;
      unint64_t v41 = (char *)v38 - v22;
      do
      {
        uint8x16_t v42 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        uint8x16_t v43 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v21 + v39), (int8x16_t)xmmword_1850CD8D0);
        a15 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8);
        uint16x8_t v44 = vmull_high_u8(v42, v43);
        uint16x8_t v45 = vminq_u16(a15, v27);
        uint16x8_t v46 = vminq_u16(v44, v27);
        *(uint8x16_t *)((char *)v21 + v39) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL);
        v22 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      unint64_t v21 = (_DWORD *)((char *)v21 + v39);
      unint64_t v19 = (unsigned __int32 *)((char *)v19 + v39);
      unint64_t v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28) {
      break;
    }
    uint16x8_t v29 = (unsigned __int8 *)&v22[v18];
    int64_t v30 = (int8x16_t *)v22;
    do
      int64_t v31 = v30++;
    while (v30 <= (int8x16_t *)v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      int64_t v32 = v31;
      int64_t v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= (int8x16_t *)v29 && !v32->i32[0]);
    if (v32 < (int8x16_t *)v29)
    {
      while (!v32->i8[0])
      {
        int64_t v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= (int8x16_t *)v29)
        {
          int64_t v32 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    int64_t v33 = (char *)v32 - v22;
    int64_t v34 = ((char *)v32 - v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 += v34;
    v18 -= v33;
LABEL_34:
    if (v18 <= 3) {
      goto LABEL_37;
    }
  }
  uint64_t v47 = 0;
  while (1)
  {
    int8x16_t v48 = *(int8x16_t *)((char *)v21 + v47);
    a15.i32[0] = v28;
    int8x16_t v49 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v50 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v47), a8);
    int8x16_t v51 = vqtbl1q_s8(v48, (int8x16_t)xmmword_1850CD8D0);
    uint16x8_t v52 = vminq_u16(vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8), v27);
    uint16x8_t v53 = vminq_u16(vmull_high_u8(v50, (uint8x16_t)v49), v27);
    uint8x16_t v54 = (uint8x16_t)vmvnq_s8(v49);
    uint16x8_t v55 = vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v54.i8);
    uint16x8_t v56 = vmull_high_u8((uint8x16_t)v48, v54);
    a15 = vqaddq_u16(v55, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL), *(uint8x8_t *)v51.i8));
    uint16x8_t v57 = vqaddq_u16(v56, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
    uint16x8_t v58 = vminq_u16(a15, v27);
    uint16x8_t v59 = vminq_u16(v57, v27);
    *(uint8x16_t *)((char *)v21 + v47) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v58, v58, 8uLL), 8uLL), vrsraq_n_u16(v59, v59, 8uLL), 8uLL);
    v22 += v25;
    v18 -= 4;
    if (v18 < 4) {
      break;
    }
    unsigned __int32 v28 = *(_DWORD *)v22;
    v47 += v26;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v19 = (unsigned __int32 *)((char *)v19 + v47);
      unint64_t v21 = (_DWORD *)((char *)v21 + v47);
      goto LABEL_34;
    }
  }
  unint64_t v19 = (unsigned __int32 *)((char *)v19 + v26 + v47);
  unint64_t v21 = (_DWORD *)((char *)v21 + v26 + v47);
LABEL_37:
  uint64_t v60 = v18 + a17;
  if (v60)
  {
    if (a7) {
      unsigned int v61 = 0;
    }
    else {
      unsigned int v61 = -1;
    }
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v61), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v62 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      uint16x8_t v63 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v64) = v63.i8[0];
      BYTE1(v64) = v63.i8[2];
      BYTE2(v64) = v63.i8[4];
      HIBYTE(v64) = v63.i8[6];
      v63.i32[0] = *v21;
      v63.i64[0] = vmovl_u8(*(uint8x8_t *)v63.i8).u64[0];
      LOBYTE(v65) = v63.i8[0];
      BYTE1(v65) = v63.i8[2];
      BYTE2(v65) = v63.i8[4];
      HIBYTE(v65) = v63.i8[6];
      v66.i8[7] = 0;
      v66.i8[0] = *v22;
      v66.i8[1] = *v22;
      v66.i8[2] = *v22;
      *(__int32 *)((char *)v66.i32 + 3) = *v22;
      uint16x8_t v67 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v64, *(int8x8_t *)a8.i8), v66), v62);
      uint16x8_t v68 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v65, (uint8x8_t)vmvn_s8((int8x8_t)v66)), vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v67, v67, 8uLL), 8uLL), (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v63.i8, 6), (int8x8_t)-4244438269))), v62);
      a11 = vrsraq_n_u16(v68, v68, 8uLL);
      *(uint8x8_t *)a11.i8 = vqrshrn_n_u16(a11, 8uLL);
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *unint64_t v21 = a11.i32[0];
      unsigned int v69 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v69 >= v20) {
        uint64_t v70 = -(uint64_t)a5;
      }
      else {
        uint64_t v70 = 0;
      }
      unint64_t v19 = &v69[v70];
      v21 += a6;
      --v60;
    }
    while (v60);
  }
  *BOOL result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)1,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, uint8x8_t a8, double a9, double a10, double a11, int8x16_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v16 = a16;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a16 < 4) {
    goto LABEL_34;
  }
  uint64_t v21 = 4 * a6;
  uint64_t v22 = 16 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  a8.i32[1] = 16843009;
  uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    unsigned __int32 v25 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      int64_t v32 = (unsigned __int8 *)&v20[v16];
      int64_t v33 = (int8x16_t *)v20;
      do
        int64_t v34 = v33++;
      while (v33 <= (int8x16_t *)v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v23)) & 0x80) != 0);
      do
      {
        int64_t v35 = v34;
        int64_t v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= (int8x16_t *)v32 && v35->i32[0] == -1);
      if (v35 < (int8x16_t *)v32)
      {
        while (v35->u8[0] == 255)
        {
          int64_t v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= (int8x16_t *)v32)
          {
            int64_t v35 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      uint64_t v36 = 0;
      int64_t v37 = (char *)v35 - v20;
      unint64_t v38 = (char *)v35 - v20;
      do
      {
        *(_OWORD *)((char *)v19 + v36) = *(_OWORD *)((char *)v17 + v36);
        v20 += v21;
        v38 -= 4;
        v36 += v22;
      }
      while (v38 > 3);
      unint64_t v19 = (_DWORD *)((char *)v19 + v36);
      unint64_t v17 = (_DWORD *)((char *)v17 + v36);
      unint64_t v16 = v16 - v37 + v38;
      goto LABEL_31;
    }
    if (v25) {
      break;
    }
    uint64_t v26 = (unsigned __int8 *)&v20[v16];
    uint16x8_t v27 = (int8x16_t *)v20;
    do
      unsigned __int32 v28 = v27++;
    while (v27 <= (int8x16_t *)v26 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v28)) & 0x80) != 0);
    do
    {
      uint16x8_t v29 = v28;
      unsigned __int32 v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= (int8x16_t *)v26 && !v29->i32[0]);
    if (v29 < (int8x16_t *)v26)
    {
      while (!v29->i8[0])
      {
        uint16x8_t v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= (int8x16_t *)v26)
        {
          uint16x8_t v29 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    int64_t v30 = (char *)v29 - v20;
    int64_t v31 = ((char *)v29 - v20) * a6;
    v17 += v31;
    v19 += v31;
    v20 += v31;
    v16 -= v30;
LABEL_31:
    if (v16 <= 3) {
      goto LABEL_34;
    }
  }
  uint64_t v39 = 0;
  while (1)
  {
    uint8x16_t v40 = *(uint8x16_t *)((char *)v17 + v39);
    uint8x16_t v41 = *(uint8x16_t *)((char *)v19 + v39);
    a12.i32[0] = v25;
    a12 = vqtbl1q_s8(a12, (int8x16_t)xmmword_1850CD8E0);
    uint8x16_t v42 = (uint8x16_t)vmvnq_s8(a12);
    uint16x8_t v43 = vmlal_u8(vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v42.i8), *(uint8x8_t *)v40.i8, *(uint8x8_t *)a12.i8);
    uint16x8_t v44 = vmlal_high_u8(vmull_high_u8(v41, v42), v40, (uint8x16_t)a12);
    uint16x8_t v45 = vminq_u16(v43, v24);
    uint16x8_t v46 = vminq_u16(v44, v24);
    *(uint8x16_t *)((char *)v19 + v39) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL);
    v20 += v21;
    v16 -= 4;
    if (v16 < 4) {
      break;
    }
    unsigned __int32 v25 = *(_DWORD *)v20;
    v39 += v22;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      unint64_t v17 = (_DWORD *)((char *)v17 + v39);
      unint64_t v19 = (_DWORD *)((char *)v19 + v39);
      goto LABEL_31;
    }
  }
  unint64_t v17 = (_DWORD *)((char *)v17 + v22 + v39);
  unint64_t v19 = (_DWORD *)((char *)v19 + v22 + v39);
LABEL_34:
  uint64_t v47 = v16 + a15;
  if (v47)
  {
    int8x16_t v48 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = *v17;
      uint16x8_t v49 = vmovl_u8(a8);
      LOBYTE(v50) = v49.i8[0];
      BYTE1(v50) = v49.i8[2];
      BYTE2(v50) = v49.i8[4];
      HIBYTE(v50) = v49.i8[6];
      v49.i32[0] = *v19;
      uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)v49.i8);
      LOBYTE(v52) = v51.i8[0];
      BYTE1(v52) = v51.i8[2];
      BYTE2(v52) = v51.i8[4];
      HIBYTE(v52) = v51.i8[6];
      v51.i8[7] = 0;
      v51.i8[0] = *v20;
      v51.i8[1] = *v20;
      v51.i8[2] = *v20;
      *(__int32 *)((char *)v51.i32 + 3) = *v20;
      uint16x8_t v53 = vminq_u16(vmlal_u8(vmull_u8((uint8x8_t)v52, (uint8x8_t)vmvn_s8(*(int8x8_t *)v51.i8)), (uint8x8_t)v50, *(uint8x8_t *)v51.i8), (uint16x8_t)v48);
      int8x16_t v54 = (int8x16_t)vrsraq_n_u16(v53, v53, 8uLL);
      *(uint8x8_t *)v54.i8 = vqrshrn_n_u16((uint16x8_t)v54, 8uLL);
      a8 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v54, v48));
      *unint64_t v19 = a8.i32[0];
      uint16x8_t v55 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v55 >= v18) {
        uint64_t v56 = -(uint64_t)a5;
      }
      else {
        uint64_t v56 = 0;
      }
      unint64_t v17 = &v55[v56];
      v19 += a6;
      --v47;
    }
    while (v47);
  }
  *BOOL result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

uint64_t *vec::template_mark_pixelmask_row<(CGCompositeOperation)0,_rgba8_t>(uint64_t *result, uint8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, uint16x8_t a8, double a9, double a10, double a11, uint16x8_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v16 = a16;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  unint64_t v20 = *a4;
  if (a16 < 4) {
    goto LABEL_33;
  }
  uint64_t v21 = 4 * a6;
  uint64_t v22 = 16 * a6;
  a8.i64[0] = -1;
  a8.i64[1] = -1;
  uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    unsigned __int32 v24 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      int64_t v34 = (unsigned __int8 *)&v20[v16];
      int64_t v35 = (int8x16_t *)v20;
      do
        uint64_t v36 = v35++;
      while (v35 <= (int8x16_t *)v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a8)) & 0x80) != 0);
      do
      {
        int64_t v37 = v36;
        uint64_t v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= (int8x16_t *)v34 && v37->i32[0] == -1);
      if (v37 < (int8x16_t *)v34)
      {
        while (v37->u8[0] == 255)
        {
          int64_t v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= (int8x16_t *)v34)
          {
            int64_t v37 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      uint64_t v38 = 0;
      int64_t v39 = (char *)v37 - v20;
      unint64_t v40 = (char *)v37 - v20;
      do
      {
        *(_OWORD *)&v19->i8[v38] = 0uLL;
        v20 += v21;
        v40 -= 4;
        v38 += v22;
      }
      while (v40 > 3);
      unint64_t v19 = (uint8x8_t *)((char *)v19 + v38);
      v17 += v38;
      unint64_t v16 = v16 - v39 + v40;
      goto LABEL_30;
    }
    if (v24) {
      break;
    }
    unsigned __int32 v25 = (unsigned __int8 *)&v20[v16];
    uint64_t v26 = (int8x16_t *)v20;
    do
      uint16x8_t v27 = v26++;
    while (v26 <= (int8x16_t *)v25 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v27)) & 0x80) != 0);
    do
    {
      unsigned __int32 v28 = v27;
      uint16x8_t v27 = (int8x16_t *)((char *)v27 + 4);
    }
    while (v27 <= (int8x16_t *)v25 && !v28->i32[0]);
    if (v28 < (int8x16_t *)v25)
    {
      while (!v28->i8[0])
      {
        unsigned __int32 v28 = (int8x16_t *)((char *)v28 + 1);
        if (v28 >= (int8x16_t *)v25)
        {
          unsigned __int32 v28 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    int64_t v29 = (char *)v28 - v20;
    int64_t v30 = ((char *)v28 - v20) * a6;
    v17 += 4 * v30;
    unint64_t v19 = (uint8x8_t *)((char *)v19 + 4 * v30);
    v20 += v30;
    v16 -= v29;
LABEL_30:
    if (v16 <= 3) {
      goto LABEL_33;
    }
  }
  while (1)
  {
    a12.i32[0] = v24;
    uint8x16_t v31 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_1850CD8E0);
    uint16x8_t v32 = vminq_u16(vmull_u8(*v19, *(uint8x8_t *)v31.i8), v23);
    uint16x8_t v33 = vminq_u16(vmull_high_u8(*(uint8x16_t *)v19->i8, v31), v23);
    a12 = vrsraq_n_u16(v33, v33, 8uLL);
    *(uint8x16_t *)v19->i8 = vqsubq_u8(*(uint8x16_t *)v19->i8, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v32, v32, 8uLL), 8uLL), a12, 8uLL));
    v20 += v21;
    v16 -= 4;
    if (v16 < 4) {
      break;
    }
    unsigned __int32 v24 = *(_DWORD *)v20;
    v17 += v22;
    unint64_t v19 = (uint8x8_t *)((char *)v19 + v22);
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE) {
      goto LABEL_30;
    }
  }
  v17 += v22;
  unint64_t v19 = (uint8x8_t *)((char *)v19 + v22);
LABEL_33:
  uint64_t v41 = v16 + a15;
  if (v41)
  {
    int8x16_t v42 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = v19->i32[0];
      uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)a8.i8);
      LOBYTE(v44) = v43.i8[0];
      BYTE1(v44) = v43.i8[2];
      BYTE2(v44) = v43.i8[4];
      HIBYTE(v44) = v43.i8[6];
      v43.i8[7] = 0;
      v43.i8[0] = *v20;
      v43.i8[1] = *v20;
      v43.i8[2] = *v20;
      *(__int32 *)((char *)v43.i32 + 3) = *v20;
      uint16x8_t v45 = vminq_u16(vmull_u8((uint8x8_t)v44, *(uint8x8_t *)v43.i8), (uint16x8_t)v42);
      a8 = vrsraq_n_u16(v45, v45, 8uLL);
      *(uint8x8_t *)a8.i8 = vqsub_u8((uint8x8_t)v44, vqrshrn_n_u16(a8, 8uLL));
      *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, v42));
      v19->i32[0] = a8.i32[0];
      unint64_t v46 = v17 + 4 * a6;
      v20 += a6;
      if (v46 >= v18) {
        uint64_t v47 = -(uint64_t)a5;
      }
      else {
        uint64_t v47 = 0;
      }
      unint64_t v17 = v46 + 4 * v47;
      unint64_t v19 = (uint8x8_t *)((char *)v19 + 4 * a6);
      --v41;
    }
    while (v41);
  }
  *BOOL result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)23,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  int8x16_t v15 = *result;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    if (a6) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = -1;
    }
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      int8x16_t v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      int8x16_t v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      uint8x16_t v30 = (uint8x16_t)vmvnq_s8(v29);
      int8x16_t v31 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), v30);
      uint8x16_t v32 = vabdq_u8(v30, (uint8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)));
      uint16x8_t v33 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v32.i8);
      uint16x8_t v34 = vmull_high_u8(v28, v32);
      uint16x8_t v35 = vminq_u16(v33, v23);
      uint16x8_t v36 = vminq_u16(v34, v23);
      uint8x16_t v37 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL);
      int8x16_t v38 = vbslq_s8(v31, (int8x16_t)vqsubq_u8((uint8x16_t)v29, v37), (int8x16_t)vqaddq_u8((uint8x16_t)v29, v37));
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8((uint8x16_t)v38, (uint8x16_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850CD8D0))));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    unint64_t v17 = (_DWORD *)((char *)v17 + v18 * 4);
    int8x16_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v39 = v14 + a8;
  if (v39)
  {
    if (a6) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v41 = 0;
    }
    else {
      unsigned int v41 = -1;
    }
    int8x8_t v42 = vand_s8(vdup_n_s8(v41), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a13.i8[0];
      BYTE1(v46) = a13.i8[2];
      BYTE2(v46) = a13.i8[4];
      HIBYTE(v46) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      int8x8_t v47 = vorr_s8((int8x8_t)v46, v42);
      v48.i64[0] = a13.i64[0];
      v48.i64[1] = a13.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x707070703030303);
      int8x8_t v50 = (int8x8_t)vmin_u8((uint8x8_t)v47, *(uint8x8_t *)v49.i8);
      uint8x8_t v51 = (uint8x8_t)vmvn_s8(v50);
      uint16x8_t v52 = vminq_u16(vmull_u8(vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v48.i8), vabd_u8(v51, (uint8x8_t)(*(void *)&v50 & 0xFFFFFF00FFFFFFLL))), v43);
      *(uint8x8_t *)v52.i8 = vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
      *(int8x8_t *)v53.i8 = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)(*(void *)&v50 & 0xFFFFFF00FFFFFFLL), v51), (int8x8_t)vqsub_u8((uint8x8_t)v50, *(uint8x8_t *)v52.i8), (int8x8_t)vqadd_u8((uint8x8_t)v50, *(uint8x8_t *)v52.i8));
      v53.i64[1] = v53.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(vceqz_s8(*(int8x8_t *)v49.i8), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u8(*(uint8x8_t *)v53.i8, (uint8x8_t)vqtbl1_s8(v53, (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *unint64_t v17 = a13.i32[0];
      int8x16_t v54 = &v15[a5];
      if ((unint64_t)v54 >= v16) {
        uint64_t v55 = -(uint64_t)a4;
      }
      else {
        uint64_t v55 = 0;
      }
      int8x16_t v15 = &v54[v55];
      v17 += a5;
      --v39;
    }
    while (v39);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)22,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  unint64_t v15 = a15;
  unint64_t v16 = *result;
  unint64_t v17 = *a3;
  uint64_t v18 = *a2;
  if (a15 >= 4)
  {
    uint64_t v19 = 0;
    if (a6) {
      unsigned int v20 = 0;
    }
    else {
      unsigned int v20 = -1;
    }
    int8x16_t v21 = vdupq_n_s8(v20);
    v22.i64[0] = 0xFF000000FF000000;
    v22.i64[1] = 0xFF000000FF000000;
    if (a7) {
      unsigned int v23 = 0;
    }
    else {
      unsigned int v23 = -1;
    }
    a9 = vandq_s8(v21, v22);
    int8x16_t v24 = vandq_s8(vdupq_n_s8(v23), v22);
    uint16x8_t v25 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a14.i64[0] = 0xFFFFFFFFFFFFLL;
    a14.i64[1] = 0xFFFFFFFFFFFFLL;
    do
    {
      int8x16_t v26 = vorrq_s8(*(int8x16_t *)&v16[v19], a9);
      int8x16_t v27 = vorrq_s8(*(int8x16_t *)&v18[v19], v24);
      int8x16_t v28 = vqtbl1q_s8(v26, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v29 = vqtbl1q_s8(v27, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v30 = vminq_u8((uint8x16_t)v26, (uint8x16_t)v28);
      uint8x16_t v31 = vminq_u8((uint8x16_t)v27, (uint8x16_t)v29);
      uint8x16_t v32 = (uint8x16_t)vmvnq_s8(v28);
      uint8x16_t v33 = (uint8x16_t)vmvnq_s8(v29);
      v57.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v29.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v28.i8), a14)), vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v32.i8)), vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v33.i8));
      uint16x8_t v34 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v30, (uint8x16_t)v29), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v31, (uint8x16_t)v28), a14)), vmull_high_u8(v31, v32)), vmull_high_u8(v30, v33));
      uint16x8_t v35 = vminq_u16((uint16x8_t)v57.val[1], v25);
      uint16x8_t v36 = vminq_u16(v34, v25);
      v57.val[0] = (int8x16_t)vrsraq_n_u16(v35, v35, 8uLL);
      uint16x8_t v37 = vrsraq_n_u16(v36, v36, 8uLL);
      *(uint8x8_t *)v57.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v57.val[0], 8uLL);
      *(uint8x8_t *)v57.val[1].i8 = vqrshrn_n_u16(v37, 8uLL);
      *(int8x16_t *)&v18[v19] = vbslq_s8(vceqzq_s8(v28), v27, vbslq_s8(vceqzq_s8(v29), v26, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v57.val[0].i8, v37, 8uLL), (uint8x16_t)vqtbl2q_s8(v57, (int8x16_t)xmmword_1850CD8F0))));
      v15 -= 4;
      v19 += 4 * a5;
    }
    while (v15 > 3);
    uint64_t v18 = (_DWORD *)((char *)v18 + v19 * 4);
    unint64_t v16 = (unsigned __int32 *)((char *)v16 + v19 * 4);
  }
  uint64_t v38 = v15 + a8;
  if (v38)
  {
    if (a6) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = -1;
    }
    int8x8_t v41 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FF000000);
    v42.i64[0] = 0xFFFFFFFFFFFFLL;
    v42.i64[1] = 0xFFFFFFFFFFFFLL;
    uint16x8_t v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v16;
      uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v18;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a14.i8[0];
      BYTE1(v46) = a14.i8[2];
      BYTE2(v46) = a14.i8[4];
      HIBYTE(v46) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      int8x8_t v47 = vorr_s8((int8x8_t)v46, v41);
      v48.i64[0] = a14.i64[0];
      v48.i64[1] = a14.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x707070703030303);
      uint8x8_t v50 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v48.i8);
      uint8x8_t v51 = vmin_u8((uint8x8_t)v47, *(uint8x8_t *)v49.i8);
      uint16x8_t v52 = vminq_u16(vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(v50, *(uint8x8_t *)v49.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(v51, *(uint8x8_t *)v48.i8), v42)), vmull_u8(v51, (uint8x8_t)vmvn_s8(*(int8x8_t *)v48.i8))), vmull_u8(v50, (uint8x8_t)vmvn_s8(*(int8x8_t *)v49.i8))), v43);
      uint16x8_t v53 = vrsraq_n_u16(v52, v52, 8uLL);
      uint8x8_t v54 = vqrshrn_n_u16(v53, 8uLL);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(vceqz_s8(*(int8x8_t *)v49.i8), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u8(v54, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v54, v53, 8uLL), (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *uint64_t v18 = a14.i32[0];
      uint64_t v55 = &v16[a5];
      if ((unint64_t)v55 >= v17) {
        uint64_t v56 = -(uint64_t)a4;
      }
      else {
        uint64_t v56 = 0;
      }
      unint64_t v16 = &v55[v56];
      v18 += a5;
      --v38;
    }
    while (v38);
  }
  *BOOL result = v16;
  *a3 = v17;
  *a2 = v18;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)21,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  unint64_t v16 = a15;
  unint64_t v17 = *result;
  unint64_t v18 = *a3;
  uint64_t v19 = *a2;
  if (a15 >= 4)
  {
    uint64_t v20 = 0;
    if (a6) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vdupq_n_s8(v21);
    v23.i64[0] = 0xFF000000FF000000;
    v23.i64[1] = 0xFF000000FF000000;
    if (a7) {
      unsigned int v24 = 0;
    }
    else {
      unsigned int v24 = -1;
    }
    a9 = vandq_s8(v22, v23);
    int8x16_t v25 = vandq_s8(vdupq_n_s8(v24), v23);
    uint16x8_t v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a14 = 0uLL;
    do
    {
      int8x16_t v27 = vorrq_s8(*(int8x16_t *)&v17[v20], a9);
      int8x16_t v28 = vorrq_s8(*(int8x16_t *)&v19[v20], v25);
      int8x16_t v29 = vqtbl1q_s8(v27, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v30 = vqtbl1q_s8(v28, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v31 = vminq_u8((uint8x16_t)v27, (uint8x16_t)v29);
      uint8x16_t v32 = vminq_u8((uint8x16_t)v28, (uint8x16_t)v30);
      int8x16_t v33 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v29, (uint8x16_t)0), v31);
      int8x16_t v34 = vzip1q_s8(v33, v33);
      uint16x8_t v35 = vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v32.i8);
      uint16x8_t v36 = vmull_high_u8(v31, v32);
      uint8x16_t v37 = vqsubq_u8((uint8x16_t)v30, v32);
      uint8x16_t v38 = vqsubq_u8((uint8x16_t)v29, v31);
      uint16x8_t v39 = vmull_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v38.i8);
      uint16x8_t v40 = vmull_high_u8(v37, v38);
      uint16x8_t v41 = (uint16x8_t)vbslq_s8(vzip2q_s8(v33, v33), (int8x16_t)vqaddq_u16(v36, v36), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v30, (uint8x16_t)v29), vqaddq_u16(v40, v40)));
      uint16x8_t v42 = (uint16x8_t)vbslq_s8(v34, (int8x16_t)vqaddq_u16(v35, v35), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v29.i8), vqaddq_u16(v39, v39)));
      uint8x16_t v43 = (uint8x16_t)vmvnq_s8(v29);
      uint16x8_t v44 = vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v43.i8);
      uint16x8_t v45 = vqaddq_u16(v41, vmull_high_u8(v32, v43));
      uint8x16_t v46 = (uint8x16_t)vmvnq_s8(v30);
      uint16x8_t v47 = vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v46.i8);
      uint16x8_t v48 = vmull_high_u8(v31, v46);
      v74.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v42, v44), v47);
      uint16x8_t v49 = vqaddq_u16(v45, v48);
      uint16x8_t v50 = vminq_u16((uint16x8_t)v74.val[1], v26);
      uint16x8_t v51 = vminq_u16(v49, v26);
      v74.val[0] = (int8x16_t)vrsraq_n_u16(v50, v50, 8uLL);
      uint16x8_t v52 = vrsraq_n_u16(v51, v51, 8uLL);
      *(uint8x8_t *)v74.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v74.val[0], 8uLL);
      *(uint8x8_t *)v74.val[1].i8 = vqrshrn_n_u16(v52, 8uLL);
      uint8x16_t v53 = (uint8x16_t)vqtbl2q_s8(v74, (int8x16_t)xmmword_1850CD8F0);
      int8x16_t v15 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v74.val[0].i8, v52, 8uLL);
      *(int8x16_t *)&v19[v20] = vbslq_s8(vceqzq_s8(v29), v28, vbslq_s8(vceqzq_s8(v30), v27, (int8x16_t)vminq_u8((uint8x16_t)v15, v53)));
      v16 -= 4;
      v20 += 4 * a5;
    }
    while (v16 > 3);
    uint64_t v19 = (_DWORD *)((char *)v19 + v20 * 4);
    unint64_t v17 = (unsigned __int32 *)((char *)v17 + v20 * 4);
  }
  uint64_t v54 = v16 + a8;
  if (v54)
  {
    if (a6) {
      unsigned int v55 = 0;
    }
    else {
      unsigned int v55 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v55), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v56 = 0;
    }
    else {
      unsigned int v56 = -1;
    }
    int8x8_t v57 = vand_s8(vdup_n_s8(v56), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v58 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v17;
      uint16x8_t v59 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v60) = v59.i8[0];
      BYTE1(v60) = v59.i8[2];
      BYTE2(v60) = v59.i8[4];
      HIBYTE(v60) = v59.i8[6];
      v59.i32[0] = *v19;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v59.i8);
      LOBYTE(v61) = a14.i8[0];
      BYTE1(v61) = a14.i8[2];
      BYTE2(v61) = a14.i8[4];
      HIBYTE(v61) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v60, *(int8x8_t *)a9.i8);
      int8x8_t v62 = vorr_s8((int8x8_t)v61, v57);
      v63.i64[0] = a14.i64[0];
      v63.i64[1] = a14.i64[0];
      *(int8x8_t *)v64.i8 = v62;
      v64.u64[1] = (unint64_t)v62;
      *(int8x8_t *)v63.i8 = vqtbl1_s8(v63, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v64.i8 = vqtbl1_s8(v64, (int8x8_t)0x707070703030303);
      uint8x8_t v65 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v63.i8);
      uint8x8_t v66 = vmin_u8((uint8x8_t)v62, *(uint8x8_t *)v64.i8);
      *(uint8x8_t *)v15.i8 = vcge_u8(vrhadd_u8(*(uint8x8_t *)v63.i8, 0), v65);
      uint16x8_t v67 = vmull_u8(v65, v66);
      uint16x8_t v68 = vmull_u8(vqsub_u8(*(uint8x8_t *)v64.i8, v66), vqsub_u8(*(uint8x8_t *)v63.i8, v65));
      uint16x8_t v69 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vbslq_s8(vzip1q_s8(v15, v15), (int8x16_t)vqaddq_u16(v67, v67), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v64.i8, *(uint8x8_t *)v63.i8), vqaddq_u16(v68, v68))), vmull_u8(v66, (uint8x8_t)vmvn_s8(*(int8x8_t *)v63.i8))), vmull_u8(v65, (uint8x8_t)vmvn_s8(*(int8x8_t *)v64.i8))), v58);
      uint16x8_t v70 = vrsraq_n_u16(v69, v69, 8uLL);
      uint8x8_t v71 = vqrshrn_n_u16(v70, 8uLL);
      int8x16_t v15 = (int8x16_t)vqrshrn_high_n_u16(v71, v70, 8uLL);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v63.i8), v62, vbsl_s8(vceqz_s8(*(int8x8_t *)v64.i8), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u8(v71, (uint8x8_t)vqtbl1_s8(v15, (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *uint64_t v19 = a14.i32[0];
      uint16x8_t v72 = &v17[a5];
      if ((unint64_t)v72 >= v18) {
        uint64_t v73 = -(uint64_t)a4;
      }
      else {
        uint64_t v73 = 0;
      }
      unint64_t v17 = &v72[v73];
      v19 += a5;
      --v54;
    }
    while (v54);
  }
  *BOOL result = v17;
  *a3 = v18;
  *a2 = v19;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)20,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  int8x16_t v15 = *result;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    if (a6) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = -1;
    }
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a13.i32[1] = 117901063;
    do
    {
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      int8x16_t v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      uint8x16_t v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      uint16x8_t v30 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v29.i8);
      uint16x8_t v31 = vmull_high_u8(v29, v29);
      int8x8_t v32 = (int8x8_t)vextq_s8(v27, v27, 8uLL).u64[0];
      *(int8x8_t *)v30.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v30.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v30)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
      int16x8_t v33 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v32, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v31)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v32, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
      uint16x8_t v34 = vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v26.i8);
      uint16x8_t v35 = vmull_u8((uint8x8_t)vqmovun_s16(v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
      uint8x16_t v36 = vqsubq_u8(v29, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v30.i8, v33));
      uint16x8_t v37 = vmull_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v28.i8);
      uint16x8_t v38 = vmull_high_u8(v36, v28);
      uint16x8_t v39 = vqaddq_u16(v34, vqaddq_u16(v37, v37));
      uint16x8_t v40 = vqaddq_u16(v35, vqaddq_u16(v38, v38));
      uint8x16_t v41 = (uint8x16_t)vmvnq_s8(v26);
      uint16x8_t v42 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v41.i8);
      uint16x8_t v43 = vmull_high_u8(v29, v41);
      uint16x8_t v44 = vqaddq_u16(v39, v42);
      uint16x8_t v45 = vqaddq_u16(v40, v43);
      uint8x16_t v46 = (uint8x16_t)vmvnq_s8(v27);
      uint16x8_t v47 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v46.i8);
      uint16x8_t v48 = vmull_high_u8(v28, v46);
      v75.val[1] = (int8x16_t)vqaddq_u16(v44, v47);
      uint16x8_t v49 = vqaddq_u16(v45, v48);
      uint16x8_t v50 = vminq_u16((uint16x8_t)v75.val[1], v23);
      uint16x8_t v51 = vminq_u16(v49, v23);
      v75.val[0] = (int8x16_t)vrsraq_n_u16(v50, v50, 8uLL);
      uint16x8_t v52 = vrsraq_n_u16(v51, v51, 8uLL);
      *(uint8x8_t *)v75.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v75.val[0], 8uLL);
      *(uint8x8_t *)v75.val[1].i8 = vqrshrn_n_u16(v52, 8uLL);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v75.val[0].i8, v52, 8uLL), (uint8x16_t)vqtbl2q_s8(v75, (int8x16_t)xmmword_1850CD8F0))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    unint64_t v17 = (_DWORD *)((char *)v17 + v18 * 4);
    int8x16_t v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  uint64_t v53 = v14 + a8;
  if (v53)
  {
    if (a6) {
      unsigned int v54 = 0;
    }
    else {
      unsigned int v54 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v54), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v55 = 0;
    }
    else {
      unsigned int v55 = -1;
    }
    int8x8_t v56 = vand_s8(vdup_n_s8(v55), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v57 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      uint16x8_t v58 = vmovl_u8(a13);
      LOBYTE(v59) = v58.i8[0];
      BYTE1(v59) = v58.i8[2];
      BYTE2(v59) = v58.i8[4];
      HIBYTE(v59) = v58.i8[6];
      v58.i32[0] = *v17;
      int8x16_t v60 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v58.i8);
      LOBYTE(v61) = v60.i8[0];
      BYTE1(v61) = v60.i8[2];
      BYTE2(v61) = v60.i8[4];
      HIBYTE(v61) = v60.i8[6];
      *(int8x8_t *)v60.i8 = vorr_s8((int8x8_t)v59, *(int8x8_t *)a9.i8);
      int8x8_t v62 = vorr_s8((int8x8_t)v61, v56);
      v63.i64[0] = v60.i64[0];
      v63.i64[1] = v60.i64[0];
      *(int8x8_t *)v63.i8 = vqtbl1_s8(v63, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v64.i8 = v62;
      v64.u64[1] = (unint64_t)v62;
      *(int8x8_t *)v64.i8 = vqtbl1_s8(v64, (int8x8_t)0x707070703030303);
      uint8x8_t v65 = vmin_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v63.i8);
      uint8x8_t v66 = vmin_u8((uint8x8_t)v62, *(uint8x8_t *)v64.i8);
      uint16x8_t v67 = vmull_u8(v66, v66);
      *(int8x8_t *)v67.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v67.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v62.u8[3]) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v67)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v62.u8[7]) & 0xFF00FF00FF00FFLL)))))));
      uint16x8_t v68 = vmull_u8(*(uint8x8_t *)v67.i8, *(uint8x8_t *)v63.i8);
      uint16x8_t v69 = vmull_u8(vqsub_u8(v66, *(uint8x8_t *)v67.i8), v65);
      uint16x8_t v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(v68, vqaddq_u16(v69, v69)), vmull_u8(v66, (uint8x8_t)vmvn_s8(*(int8x8_t *)v63.i8))), vmull_u8(v65, (uint8x8_t)vmvn_s8(*(int8x8_t *)v64.i8))), v57);
      uint16x8_t v71 = vrsraq_n_u16(v70, v70, 8uLL);
      uint8x8_t v72 = vqrshrn_n_u16(v71, 8uLL);
      *(int8x8_t *)v60.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v63.i8), v62, vbsl_s8(vceqz_s8(*(int8x8_t *)v64.i8), *(int8x8_t *)v60.i8, (int8x8_t)vmin_u8(v72, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v72, v71, 8uLL), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v60, a9));
      *unint64_t v17 = a13.i32[0];
      uint64_t v73 = &v15[a5];
      if ((unint64_t)v73 >= v16) {
        uint64_t v74 = -(uint64_t)a4;
      }
      else {
        uint64_t v74 = 0;
      }
      int8x16_t v15 = &v73[v74];
      v17 += a5;
      --v53;
    }
    while (v53);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)19,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  int8x16_t v15 = *result;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    if (a6) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = -1;
    }
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    a13.i32[1] = 117901063;
    do
    {
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      int8x16_t v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v28 = (int8x16_t)vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      uint8x16_t v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      int8x16_t v30 = (int8x16_t)vqsubq_u8((uint8x16_t)v27, v29);
      float32x4_t v31 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      float32x4_t v32 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      int8x8_t v33 = (int8x8_t)vextq_s8(v30, v30, 8uLL).u64[0];
      float32x4_t v34 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v33, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      float32x4_t v35 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v33, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      uint16x8_t v36 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v26.i8);
      uint16x8_t v37 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v26);
      int8x8_t v38 = (int8x8_t)vextq_s8(v28, v28, 8uLL).u64[0];
      uint64_t v39 = *(void *)&vzip2_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      uint64_t v40 = *(void *)&vzip1_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      uint16x8_t v41 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8);
      uint16x8_t v42 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v27);
      uint8x16_t v43 = (uint8x16_t)vmvnq_s8(v26);
      uint16x8_t v44 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v43.i8);
      uint16x8_t v45 = vmull_high_u8(v29, v43);
      uint8x16_t v46 = (uint8x16_t)vmvnq_s8(v27);
      uint16x8_t v47 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v46.i8);
      uint16x8_t v48 = vmull_high_u8((uint8x16_t)v28, v46);
      v76.val[1] = (int8x16_t)vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v44)), vcvtq_f32_u32(vmovl_high_u16(v47))), vcvtq_f32_u32(vmovl_high_u16(v41))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v32, vcvtq_f32_u32(vmovl_high_u16(v36))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v39))), (int8x16_t)vceqzq_f32(v32))), v23));
      v76.val[0] = (int8x16_t)vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v41.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v31, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v36.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v40))), (int8x16_t)vceqzq_f32(v31))), v23))), (int32x4_t)v76.val[1]);
      *(int8x8_t *)v76.val[0].i8 = vqmovun_s16((int16x8_t)v76.val[0]);
      int16x8_t v49 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v42.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v34, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v38, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v34))), v23))), vcvtnq_s32_f32(vmulq_f32(
                  vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v45)), vcvtq_f32_u32(vmovl_high_u16(v48))), vcvtq_f32_u32(vmovl_high_u16(v42))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v35, vcvtq_f32_u32(vmovl_high_u16(v37))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v38, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v35))), v23)));
      *(int8x8_t *)v76.val[1].i8 = vqmovun_s16(v49);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v76.val[0].i8, v49), (uint8x16_t)vqtbl2q_s8(v76, (int8x16_t)xmmword_1850CD8F0))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    unint64_t v17 = (_DWORD *)((char *)v17 + v18 * 4);
    int8x16_t v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  uint64_t v50 = v14 + a8;
  if (v50)
  {
    if (a6) {
      unsigned int v51 = 0;
    }
    else {
      unsigned int v51 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v51), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v52 = 0;
    }
    else {
      unsigned int v52 = -1;
    }
    int8x8_t v53 = vand_s8(vdup_n_s8(v52), (int8x8_t)0xFF000000FF000000);
    float32x4_t v54 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    do
    {
      a13.i32[0] = *v15;
      uint16x8_t v55 = vmovl_u8(a13);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i32[0] = *v17;
      int8x16_t v57 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v55.i8);
      LOBYTE(v58) = v57.i8[0];
      BYTE1(v58) = v57.i8[2];
      BYTE2(v58) = v57.i8[4];
      HIBYTE(v58) = v57.i8[6];
      int8x8_t v59 = vorr_s8((int8x8_t)v56, *(int8x8_t *)a9.i8);
      *(int8x8_t *)v57.i8 = vorr_s8((int8x8_t)v58, v53);
      *(int8x8_t *)v60.i8 = v59;
      v60.u64[1] = (unint64_t)v59;
      *(int8x8_t *)v60.i8 = vqtbl1_s8(v60, (int8x8_t)0x707070703030303);
      v61.i64[0] = v57.i64[0];
      v61.i64[1] = v57.i64[0];
      *(int8x8_t *)v61.i8 = vqtbl1_s8(v61, (int8x8_t)0x707070703030303);
      int8x8_t v62 = (int8x8_t)vmin_u8((uint8x8_t)v59, *(uint8x8_t *)v60.i8);
      uint8x8_t v63 = vmin_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v61.i8);
      int8x8_t v64 = (int8x8_t)vqsub_u8(*(uint8x8_t *)v61.i8, v63);
      float32x4_t v65 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      float32x4_t v66 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      uint16x8_t v67 = vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v60.i8);
      uint64_t v68 = *(void *)&vzip2_s8(v62, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      uint64_t v69 = *(void *)&vzip1_s8(v62, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      uint16x8_t v70 = vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v61.i8);
      uint16x8_t v71 = vmull_u8(v63, (uint8x8_t)vmvn_s8(*(int8x8_t *)v60.i8));
      uint16x8_t v72 = vmull_u8((uint8x8_t)v62, (uint8x8_t)vmvn_s8(*(int8x8_t *)v61.i8));
      int16x8_t v73 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v71.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v72.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v70.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v65, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v67.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v69))), (int8x16_t)vceqzq_f32(v65))), v54))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                      vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v71)), vcvtq_f32_u32(vmovl_high_u16(v72))),
                      vcvtq_f32_u32(vmovl_high_u16(v70))),
                    (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v66, vcvtq_f32_u32(vmovl_high_u16(v67))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v68))), (int8x16_t)vceqzq_f32(v66))), v54)));
      *(int8x8_t *)v71.i8 = vqmovun_s16(v73);
      *(int8x8_t *)v57.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v60.i8), *(int8x8_t *)v57.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v61.i8), v59, (int8x8_t)vmin_u8(*(uint8x8_t *)v71.i8, (uint8x8_t)vqtbl1_s8(vqmovun_high_s16(*(int8x8_t *)v71.i8, v73), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v57, a9));
      *unint64_t v17 = a13.i32[0];
      uint64_t v74 = &v15[a5];
      if ((unint64_t)v74 >= v16) {
        uint64_t v75 = -(uint64_t)a4;
      }
      else {
        uint64_t v75 = 0;
      }
      int8x16_t v15 = &v74[v75];
      v17 += a5;
      --v50;
    }
    while (v50);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)18,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  int8x16_t v15 = *result;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    if (a6) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = -1;
    }
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a13.i32[1] = 117901063;
    do
    {
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      int8x16_t v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      int8x16_t v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      uint8x16_t v30 = (uint8x16_t)vmvnq_s8(v27);
      uint16x8_t v31 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v30.i8);
      v71.val[1] = (int8x16_t)vmull_high_u8(v28, v30);
      unsigned long long v32 = *(_OWORD *)&v28 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
      int8x16_t v33 = vbicq_s8(vtstq_s8(v29, v29), (int8x16_t)vcgtq_u8((uint8x16_t)v26, (uint8x16_t)v32));
      int8x16_t v34 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v26, (uint8x16_t)v32), vceqzq_s8(v29));
      uint64_t v35 = *(void *)&vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      uint64_t v36 = *(void *)&vzip2_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v34.i64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
      uint16x8_t v37 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v26.i8);
      uint16x8_t v38 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v26);
      int8x8_t v39 = (int8x8_t)vextq_s8(v29, v29, 8uLL).u64[0];
      int8x16_t v40 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v35))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v37))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v36)))));
      int8x16_t v41 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v39, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v38.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v39, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v38))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
      uint8x16_t v42 = (uint8x16_t)vmvnq_s8(v26);
      uint16x8_t v43 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v42.i8);
      uint16x8_t v44 = vmull_high_u8((uint8x16_t)v29, v42);
      uint16x8_t v45 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v40, (int8x16_t)vmovl_s8(*(int8x8_t *)v33.i8)), v43), v31), v23);
      uint16x8_t v46 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v41, (int8x16_t)vmovl_high_s8(v33)), v44), (uint16x8_t)v71.val[1]), v23);
      v71.val[0] = (int8x16_t)vrsraq_n_u16(v45, v45, 8uLL);
      uint16x8_t v47 = vrsraq_n_u16(v46, v46, 8uLL);
      *(uint8x8_t *)v71.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v71.val[0], 8uLL);
      *(uint8x8_t *)v71.val[1].i8 = vqrshrn_n_u16(v47, 8uLL);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v71.val[0].i8, v47, 8uLL), (uint8x16_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_1850CD8F0))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    unint64_t v17 = (_DWORD *)((char *)v17 + v18 * 4);
    int8x16_t v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  uint64_t v48 = v14 + a8;
  if (v48)
  {
    if (a6) {
      unsigned int v49 = 0;
    }
    else {
      unsigned int v49 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v49), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v50 = 0;
    }
    else {
      unsigned int v50 = -1;
    }
    int8x8_t v51 = vand_s8(vdup_n_s8(v50), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v52 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      uint16x8_t v53 = vmovl_u8(a13);
      LOBYTE(v54) = v53.i8[0];
      BYTE1(v54) = v53.i8[2];
      BYTE2(v54) = v53.i8[4];
      HIBYTE(v54) = v53.i8[6];
      v53.i32[0] = *v17;
      int8x16_t v55 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v53.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      *(int8x8_t *)v55.i8 = vorr_s8((int8x8_t)v54, *(int8x8_t *)a9.i8);
      int8x8_t v57 = vorr_s8((int8x8_t)v56, v51);
      v58.i64[0] = v55.i64[0];
      v58.i64[1] = v55.i64[0];
      *(int8x8_t *)v58.i8 = vqtbl1_s8(v58, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v59.i8 = v57;
      v59.u64[1] = (unint64_t)v57;
      *(int8x8_t *)v59.i8 = vqtbl1_s8(v59, (int8x8_t)0x707070703030303);
      uint8x8_t v60 = vmin_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v58.i8);
      int8x8_t v61 = (int8x8_t)vmin_u8((uint8x8_t)v57, *(uint8x8_t *)v59.i8);
      uint16x8_t v62 = vmull_u8(v60, (uint8x8_t)vmvn_s8(*(int8x8_t *)v59.i8));
      *(void *)&v60 &= 0xFFFFFF00FFFFFFuLL;
      int8x16_t v63 = (int8x16_t)vmovl_s8(vbic_s8(vtst_s8(v61, v61), (int8x8_t)vcgt_u8(*(uint8x8_t *)v58.i8, v60)));
      int8x8_t v64 = vorr_s8((int8x8_t)vqsub_u8(*(uint8x8_t *)v58.i8, v60), vceqz_s8(v61));
      uint16x8_t v65 = vmull_u8(*(uint8x8_t *)v58.i8, *(uint8x8_t *)v58.i8);
      uint16x8_t v66 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v61, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v61, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v65))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip2_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))),
                                v63),
                  vmull_u8((uint8x8_t)v61, (uint8x8_t)vmvn_s8(*(int8x8_t *)v58.i8))),
                v62),
              v52);
      uint16x8_t v67 = vrsraq_n_u16(v66, v66, 8uLL);
      uint8x8_t v68 = vqrshrn_n_u16(v67, 8uLL);
      *(int8x8_t *)v55.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v58.i8), v57, vbsl_s8(vceqz_s8(*(int8x8_t *)v59.i8), *(int8x8_t *)v55.i8, (int8x8_t)vmin_u8(v68, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v68, v67, 8uLL), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v55, a9));
      *unint64_t v17 = a13.i32[0];
      uint64_t v69 = &v15[a5];
      if ((unint64_t)v69 >= v16) {
        uint64_t v70 = -(uint64_t)a4;
      }
      else {
        uint64_t v70 = 0;
      }
      int8x16_t v15 = &v69[v70];
      v17 += a5;
      --v48;
    }
    while (v48);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)17,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  int8x16_t v15 = *result;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    if (a6) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = -1;
    }
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      int8x16_t v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      uint8x16_t v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      uint16x8_t v30 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v27.i8);
      uint8x16_t v31 = (uint8x16_t)vmvnq_s8(v27);
      uint16x8_t v32 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v31.i8);
      uint8x16_t v33 = (uint8x16_t)vmvnq_s8(v26);
      uint16x8_t v34 = vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8(v28, (uint8x16_t)v27), vmull_high_u8(v29, (uint8x16_t)v26)), vmull_high_u8(v28, v31)), vmull_high_u8(v29, v33));
      uint16x8_t v35 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v30, vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v26.i8)), v32), vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v33.i8)), v23);
      uint16x8_t v36 = vminq_u16(v34, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL)));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    unint64_t v17 = (_DWORD *)((char *)v17 + v18 * 4);
    int8x16_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v37 = v14 + a8;
  if (v37)
  {
    if (a6) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v38 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v38), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = -1;
    }
    int8x8_t v40 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v41 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      uint16x8_t v42 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v43) = v42.i8[0];
      BYTE1(v43) = v42.i8[2];
      BYTE2(v43) = v42.i8[4];
      HIBYTE(v43) = v42.i8[6];
      v42.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v42.i8);
      LOBYTE(v44) = a13.i8[0];
      BYTE1(v44) = a13.i8[2];
      BYTE2(v44) = a13.i8[4];
      HIBYTE(v44) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v43, *(int8x8_t *)a9.i8);
      int8x8_t v45 = vorr_s8((int8x8_t)v44, v40);
      v46.i64[0] = a13.i64[0];
      v46.i64[1] = a13.i64[0];
      *(int8x8_t *)v46.i8 = vqtbl1_s8(v46, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v47.i8 = v45;
      v47.u64[1] = (unint64_t)v45;
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x707070703030303);
      uint8x8_t v48 = vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v46.i8);
      uint8x8_t v49 = vmin_u8((uint8x8_t)v45, *(uint8x8_t *)v47.i8);
      uint16x8_t v50 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_u8(v48, *(uint8x8_t *)v47.i8), vmull_u8(v49, *(uint8x8_t *)v46.i8)), vmull_u8(v48, (uint8x8_t)vmvn_s8(*(int8x8_t *)v47.i8))), vmull_u8(v49, (uint8x8_t)vmvn_s8(*(int8x8_t *)v46.i8))), v41);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v46.i8), v45, vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), *(int8x8_t *)a13.i8, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *unint64_t v17 = a13.i32[0];
      int8x8_t v51 = &v15[a5];
      if ((unint64_t)v51 >= v16) {
        uint64_t v52 = -(uint64_t)a4;
      }
      else {
        uint64_t v52 = 0;
      }
      int8x16_t v15 = &v51[v52];
      v17 += a5;
      --v37;
    }
    while (v37);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)16,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  int8x16_t v15 = *result;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    if (a6) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = -1;
    }
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      int8x16_t v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      uint8x16_t v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      uint16x8_t v30 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v27.i8);
      uint8x16_t v31 = (uint8x16_t)vmvnq_s8(v27);
      uint16x8_t v32 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v31.i8);
      uint8x16_t v33 = (uint8x16_t)vmvnq_s8(v26);
      uint16x8_t v34 = vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v29, (uint8x16_t)v26), vmull_high_u8(v28, (uint8x16_t)v27)), vmull_high_u8(v28, v31)), vmull_high_u8(v29, v33));
      uint16x8_t v35 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v26.i8), v30), v32), vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v33.i8)), v23);
      uint16x8_t v36 = vminq_u16(v34, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL)));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    unint64_t v17 = (_DWORD *)((char *)v17 + v18 * 4);
    int8x16_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v37 = v14 + a8;
  if (v37)
  {
    if (a6) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v38 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v38), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = -1;
    }
    int8x8_t v40 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v41 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      uint16x8_t v42 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v43) = v42.i8[0];
      BYTE1(v43) = v42.i8[2];
      BYTE2(v43) = v42.i8[4];
      HIBYTE(v43) = v42.i8[6];
      v42.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v42.i8);
      LOBYTE(v44) = a13.i8[0];
      BYTE1(v44) = a13.i8[2];
      BYTE2(v44) = a13.i8[4];
      HIBYTE(v44) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v43, *(int8x8_t *)a9.i8);
      int8x8_t v45 = vorr_s8((int8x8_t)v44, v40);
      v46.i64[0] = a13.i64[0];
      v46.i64[1] = a13.i64[0];
      *(int8x8_t *)v46.i8 = vqtbl1_s8(v46, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v47.i8 = v45;
      v47.u64[1] = (unint64_t)v45;
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x707070703030303);
      uint8x8_t v48 = vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v46.i8);
      uint8x8_t v49 = vmin_u8((uint8x8_t)v45, *(uint8x8_t *)v47.i8);
      uint16x8_t v50 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(v48, *(uint8x8_t *)v47.i8), vmull_u8(v49, *(uint8x8_t *)v46.i8)), vmull_u8(v48, (uint8x8_t)vmvn_s8(*(int8x8_t *)v47.i8))), vmull_u8(v49, (uint8x8_t)vmvn_s8(*(int8x8_t *)v46.i8))), v41);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v46.i8), v45, vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), *(int8x8_t *)a13.i8, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *unint64_t v17 = a13.i32[0];
      int8x8_t v51 = &v15[a5];
      if ((unint64_t)v51 >= v16) {
        uint64_t v52 = -(uint64_t)a4;
      }
      else {
        uint64_t v52 = 0;
      }
      int8x16_t v15 = &v51[v52];
      v17 += a5;
      --v37;
    }
    while (v37);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)15,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  unint64_t v15 = a15;
  unint64_t v16 = *result;
  unint64_t v17 = *a3;
  uint64_t v18 = *a2;
  if (a15 >= 4)
  {
    uint64_t v19 = 0;
    if (a6) {
      unsigned int v20 = 0;
    }
    else {
      unsigned int v20 = -1;
    }
    v21.i64[0] = 0xFF000000FF000000;
    v21.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v20), v21);
    if (a7) {
      unsigned int v22 = 0;
    }
    else {
      unsigned int v22 = -1;
    }
    int8x16_t v23 = vandq_s8(vdupq_n_s8(v22), v21);
    uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v16[v19], a9);
      int8x16_t v26 = vorrq_s8(*(int8x16_t *)&v18[v19], v23);
      int8x16_t v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v28 = vqtbl1q_s8(v26, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      int8x16_t v30 = (int8x16_t)vminq_u8((uint8x16_t)v26, (uint8x16_t)v28);
      uint8x16_t v31 = (uint8x16_t)vsubq_s8(v27, v29);
      uint8x16_t v32 = (uint8x16_t)vsubq_s8(v28, v30);
      int8x16_t v33 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v28, (uint8x16_t)0), (uint8x16_t)v30);
      int8x16_t v34 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v30.i8), vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v29.i8));
      int8x16_t v35 = (int8x16_t)vqaddq_u16(vmull_high_u8(v31, (uint8x16_t)v30), vmull_high_u8(v32, (uint8x16_t)v29));
      uint16x8_t v36 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v33.i8), v34, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v28.i8), (uint16x8_t)v34)), v24);
      uint16x8_t v37 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v33), v35, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v27, (uint8x16_t)v28), (uint16x8_t)v35)), v24);
      a14 = vbslq_s8(vceqzq_s8(v27), v26, vbslq_s8(vceqzq_s8(v28), v25, vsubq_s8(vaddq_s8(v30, v29), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v36, v36, 8uLL), 8uLL), vrsraq_n_u16(v37, v37, 8uLL), 8uLL))));
      *(int8x16_t *)&v18[v19] = a14;
      v15 -= 4;
      v19 += 4 * a5;
    }
    while (v15 > 3);
    uint64_t v18 = (_DWORD *)((char *)v18 + v19 * 4);
    unint64_t v16 = (unsigned __int32 *)((char *)v16 + v19 * 4);
  }
  uint64_t v38 = v15 + a8;
  if (v38)
  {
    if (a6) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = -1;
    }
    int8x8_t v41 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v42 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v16;
      uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v44) = v43.i8[0];
      BYTE1(v44) = v43.i8[2];
      BYTE2(v44) = v43.i8[4];
      HIBYTE(v44) = v43.i8[6];
      v43.i32[0] = *v18;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v43.i8);
      LOBYTE(v45) = a14.i8[0];
      BYTE1(v45) = a14.i8[2];
      BYTE2(v45) = a14.i8[4];
      HIBYTE(v45) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v44, *(int8x8_t *)a9.i8);
      int8x8_t v46 = vorr_s8((int8x8_t)v45, v41);
      v47.i64[0] = a14.i64[0];
      v47.i64[1] = a14.i64[0];
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v48.i8 = v46;
      v48.u64[1] = (unint64_t)v46;
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x707070703030303);
      int8x8_t v49 = (int8x8_t)vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v47.i8);
      int8x8_t v50 = (int8x8_t)vmin_u8((uint8x8_t)v46, *(uint8x8_t *)v48.i8);
      int8x16_t v51 = (int8x16_t)vqaddq_u16(vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v47.i8, v49), (uint8x8_t)v50), vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v48.i8, v50), (uint8x8_t)v49));
      uint16x8_t v52 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8((int8x8_t)vcgt_u8(vrhadd_u8(*(uint8x8_t *)v48.i8, 0), (uint8x8_t)v50)), v51, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v48.i8), (uint16x8_t)v51)), v42);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), v46, vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), *(int8x8_t *)a14.i8, vsub_s8(vadd_s8(v50, v49), (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *uint64_t v18 = a14.i32[0];
      uint16x8_t v53 = &v16[a5];
      if ((unint64_t)v53 >= v17) {
        uint64_t v54 = -(uint64_t)a4;
      }
      else {
        uint64_t v54 = 0;
      }
      unint64_t v16 = &v53[v54];
      v18 += a5;
      --v38;
    }
    while (v38);
  }
  *BOOL result = v16;
  *a3 = v17;
  *a2 = v18;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)14,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  unint64_t v15 = *result;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    if (a6) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = -1;
    }
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      uint8x16_t v26 = (uint8x16_t)vbicq_s8(v25, vceqzq_s8(vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0)));
      uint16x8_t v27 = vminq_u16(vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v26.i8), v23);
      uint16x8_t v28 = vminq_u16(vmull_high_u8((uint8x16_t)v24, v26), v23);
      a13 = vbslq_s8(vceqzq_s8(vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0)), v25, (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v24, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), vrsraq_n_u16(v28, v28, 8uLL), 8uLL)), v26));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    unint64_t v17 = (_DWORD *)((char *)v17 + v18 * 4);
    unint64_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v29 = v14 + a8;
  if (v29)
  {
    if (a6) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v30), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = -1;
    }
    int8x8_t v32 = vand_s8(vdup_n_s8(v31), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v33 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v35) = v34.i8[0];
      BYTE1(v35) = v34.i8[2];
      BYTE2(v35) = v34.i8[4];
      HIBYTE(v35) = v34.i8[6];
      v34.i32[0] = *v17;
      uint16x8_t v36 = vmovl_u8(*(uint8x8_t *)v34.i8);
      LOBYTE(v37) = v36.i8[0];
      BYTE1(v37) = v36.i8[2];
      BYTE2(v37) = v36.i8[4];
      HIBYTE(v37) = v36.i8[6];
      *(int8x8_t *)v36.i8 = vorr_s8((int8x8_t)v35, *(int8x8_t *)a9.i8);
      int8x8_t v38 = vorr_s8((int8x8_t)v37, v32);
      *(int8x8_t *)v39.i8 = v38;
      v39.u64[1] = (unint64_t)v38;
      *(int8x8_t *)v39.i8 = vbic_s8(v38, vceqz_s8(vqtbl1_s8(v39, (int8x8_t)0x707070703030303)));
      uint16x8_t v40 = vminq_u16(vmull_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v39.i8), v33);
      a13.i64[1] = v36.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(vqtbl1_s8(a13, (int8x8_t)0x707070703030303)), v38, (int8x8_t)vqadd_u8(vqsub_u8(*(uint8x8_t *)v36.i8, vqrshrn_n_u16(vrsraq_n_u16(v40, v40, 8uLL), 8uLL)), *(uint8x8_t *)v39.i8));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *unint64_t v17 = a13.i32[0];
      int8x8_t v41 = &v15[a5];
      if ((unint64_t)v41 >= v16) {
        uint64_t v42 = -(uint64_t)a4;
      }
      else {
        uint64_t v42 = 0;
      }
      unint64_t v15 = &v41[v42];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)13,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  unint64_t v15 = *result;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    if (a6) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = -1;
    }
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      int8x16_t v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      int8x16_t v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_1850CD8D0);
      int8x16_t v28 = vceqzq_s8(v27);
      uint8x16_t v29 = (uint8x16_t)vbicq_s8(v25, v28);
      uint16x8_t v30 = vminq_u16(vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v29.i8), v23);
      uint16x8_t v31 = vminq_u16(vmull_high_u8((uint8x16_t)v24, v29), v23);
      uint8x16_t v32 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v30, v30, 8uLL), 8uLL), vrsraq_n_u16(v31, v31, 8uLL), 8uLL);
      uint8x16_t v33 = (uint8x16_t)vmvnq_s8(v27);
      uint8x16_t v34 = (uint8x16_t)vmvnq_s8(v26);
      uint16x8_t v35 = vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v33.i8);
      uint16x8_t v36 = vqaddq_u16(vmull_high_u8((uint8x16_t)v24, v33), vmull_high_u8(v29, v34));
      uint16x8_t v37 = vminq_u16(vqaddq_u16(v35, vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v34.i8)), v23);
      uint16x8_t v38 = vminq_u16(v36, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(v28, v24, (int8x16_t)vqaddq_u8(v32, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v37, v37, 8uLL), 8uLL), vrsraq_n_u16(v38, v38, 8uLL), 8uLL))));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    unint64_t v17 = (_DWORD *)((char *)v17 + v18 * 4);
    unint64_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v39 = v14 + a8;
  if (v39)
  {
    if (a6) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v41 = 0;
    }
    else {
      unsigned int v41 = -1;
    }
    int8x8_t v42 = vand_s8(vdup_n_s8(v41), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a13.i8[0];
      BYTE1(v46) = a13.i8[2];
      BYTE2(v46) = a13.i8[4];
      HIBYTE(v46) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      int8x8_t v47 = vorr_s8((int8x8_t)v46, v42);
      v48.i64[0] = a13.i64[0];
      v48.i64[1] = a13.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x707070703030303);
      int8x8_t v50 = vceqz_s8(*(int8x8_t *)v49.i8);
      uint8x8_t v51 = (uint8x8_t)vbic_s8(v47, v50);
      uint16x8_t v52 = vminq_u16(vmull_u8(*(uint8x8_t *)a13.i8, v51), v43);
      uint16x8_t v53 = vminq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)a13.i8, (uint8x8_t)vmvn_s8(*(int8x8_t *)v49.i8)), vmull_u8(v51, (uint8x8_t)vmvn_s8(*(int8x8_t *)v48.i8))), v43);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(v50, *(int8x8_t *)a13.i8, (int8x8_t)vqadd_u8(vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL), vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *unint64_t v17 = a13.i32[0];
      uint64_t v54 = &v15[a5];
      if ((unint64_t)v54 >= v16) {
        uint64_t v55 = -(uint64_t)a4;
      }
      else {
        uint64_t v55 = 0;
      }
      unint64_t v15 = &v54[v55];
      v17 += a5;
      --v39;
    }
    while (v39);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)12,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v10 = a10;
  uint64_t v11 = *result;
  unint64_t v12 = *a3;
  uint64_t v13 = *a2;
  if (a10 >= 4)
  {
    uint64_t v14 = 0;
    if (a6) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = -1;
    }
    v16.i64[0] = 0xFF000000FF000000;
    v16.i64[1] = 0xFF000000FF000000;
    a7 = vandq_s8(vdupq_n_s8(v15), v16);
    do
    {
      *(uint8x16_t *)&v13[v14] = vqaddq_u8(*(uint8x16_t *)&v13[v14], (uint8x16_t)vorrq_s8(*(int8x16_t *)&v11[v14], a7));
      v10 -= 4;
      v14 += 4 * a5;
    }
    while (v10 > 3);
    uint64_t v13 = (_DWORD *)((char *)v13 + v14 * 4);
    uint64_t v11 = (_DWORD *)((char *)v11 + v14 * 4);
  }
  uint64_t v17 = v10 + a9;
  if (v17)
  {
    if (a6) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = -1;
    }
    v19.i32[1] = -16777216;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v18), (int8x8_t)0xFF000000FF000000);
    do
    {
      v19.i32[0] = *v11;
      uint16x8_t v20 = vmovl_u8(v19);
      LOBYTE(v21) = v20.i8[0];
      BYTE1(v21) = v20.i8[2];
      BYTE2(v21) = v20.i8[4];
      HIBYTE(v21) = v20.i8[6];
      v20.i32[0] = *v13;
      int8x16_t v22 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v20.i8);
      LOBYTE(v23) = v22.i8[0];
      BYTE1(v23) = v22.i8[2];
      BYTE2(v23) = v22.i8[4];
      HIBYTE(v23) = v22.i8[6];
      *(uint8x8_t *)v22.i8 = vqadd_u8((uint8x8_t)v23, (uint8x8_t)vorr_s8((int8x8_t)v21, *(int8x8_t *)a7.i8));
      uint8x8_t v19 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v22, a7));
      _DWORD *v13 = v19.i32[0];
      int8x16_t v24 = &v11[a5];
      if ((unint64_t)v24 >= v12) {
        uint64_t v25 = -(uint64_t)a4;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v11 = &v24[v25];
      v13 += a5;
      --v17;
    }
    while (v17);
  }
  *BOOL result = v11;
  *a3 = v12;
  *a2 = v13;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)11,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, int8x16_t a12, unint64_t a13)
{
  unint64_t v13 = a13;
  uint64_t v14 = *result;
  unint64_t v15 = *a3;
  int8x16_t v16 = *a2;
  if (a13 >= 4)
  {
    uint64_t v17 = 0;
    if (a6) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = -1;
    }
    int8x16_t v19 = vdupq_n_s8(v18);
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    if (a7) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = -1;
    }
    a9 = vandq_s8(v19, v20);
    int8x16_t v22 = vandq_s8(vdupq_n_s8(v21), v20);
    do
    {
      int8x16_t v23 = vorrq_s8(*(int8x16_t *)&v14[v17], a9);
      int8x16_t v24 = vorrq_s8(*(int8x16_t *)&v16[v17], v22);
      uint8x16_t v25 = (uint8x16_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v26 = (uint8x16_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_1850CD8D0);
      a12 = (int8x16_t)vqsubq_u8(vqaddq_u8(v26, v25), vqaddq_u8(vqsubq_u8(v25, (uint8x16_t)v23), vqsubq_u8(v26, (uint8x16_t)v24)));
      *(int8x16_t *)&v16[v17] = a12;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    int8x16_t v16 = (_DWORD *)((char *)v16 + v17 * 4);
    uint64_t v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  uint64_t v27 = v13 + a8;
  if (v27)
  {
    if (a6) {
      unsigned int v28 = 0;
    }
    else {
      unsigned int v28 = -1;
    }
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v28), (int8x8_t)0xFF000000FF000000);
    if (a7) {
      unsigned int v29 = 0;
    }
    else {
      unsigned int v29 = -1;
    }
    int8x8_t v30 = vand_s8(vdup_n_s8(v29), (int8x8_t)0xFF000000FF000000);
    do
    {
      a12.i32[0] = *v14;
      uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)a12.i8);
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      v31.i32[0] = *v16;
      a12 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v31.i8);
      LOBYTE(v33) = a12.i8[0];
      BYTE1(v33) = a12.i8[2];
      BYTE2(v33) = a12.i8[4];
      HIBYTE(v33) = a12.i8[6];
      *(int8x8_t *)a12.i8 = vorr_s8((int8x8_t)v32, *(int8x8_t *)a9.i8);
      uint8x8_t v34 = (uint8x8_t)vorr_s8((int8x8_t)v33, v30);
      v35.i64[0] = a12.i64[0];
      v35.i64[1] = a12.i64[0];
      *(int8x8_t *)v35.i8 = vqtbl1_s8(v35, (int8x8_t)0x707070703030303);
      *(uint8x8_t *)v36.i8 = v34;
      v36.u64[1] = (unint64_t)v34;
      *(int8x8_t *)v36.i8 = vqtbl1_s8(v36, (int8x8_t)0x707070703030303);
      *(uint8x8_t *)a12.i8 = vqsub_u8(vqadd_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v35.i8), vqadd_u8(vqsub_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)a12.i8), vqsub_u8(*(uint8x8_t *)v36.i8, v34)));
      *(int8x8_t *)a12.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a12, a9));
      _DWORD *v16 = a12.i32[0];
      uint16x8_t v37 = &v14[a5];
      if ((unint64_t)v37 >= v15) {
        uint64_t v38 = -(uint64_t)a4;
      }
      else {
        uint64_t v38 = 0;
      }
      uint64_t v14 = &v37[v38];
      v16 += a5;
      --v27;
    }
    while (v27);
  }
  *BOOL result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)10,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, uint16x8_t a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  unint64_t v15 = *result;
  unint64_t v16 = *a3;
  uint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    uint16x8_t v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v20 = *(int8x16_t *)&v15[v18];
      int8x16_t v21 = *(int8x16_t *)&v17[v18];
      uint8x16_t v22 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v21), (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v23 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v20), (int8x16_t)xmmword_1850CD8D0);
      uint16x8_t v24 = vmull_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v22.i8);
      uint16x8_t v25 = vmull_high_u8((uint8x16_t)v20, v22);
      a10 = vqaddq_u16(v24, vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v23.i8));
      uint16x8_t v26 = vqaddq_u16(v25, vmull_high_u8((uint8x16_t)v21, v23));
      uint16x8_t v27 = vminq_u16(a10, v19);
      uint16x8_t v28 = vminq_u16(v26, v19);
      a8 = vrsraq_n_u16(v28, v28, 8uLL);
      *(uint8x16_t *)&v17[v18] = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), a8, 8uLL);
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    uint64_t v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    unint64_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v29 = v14 + a13;
  if (v29)
  {
    a6.i64[0] = -4244438269;
    uint16x8_t v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = *v15;
      int8x8_t v31 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a8.i8).u64[0];
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      a10.i32[0] = *v17;
      int8x8_t v33 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      *(int8x8_t *)a10.i8 = vmvn_s8(vqtbl1_s8(vdupq_lane_s8(v33, 6), (int8x8_t)-4244438269));
      uint16x8_t v35 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v32, *(uint8x8_t *)a10.i8), vmull_u8((uint8x8_t)v34, (uint8x8_t)vmvn_s8(vqtbl1_s8(vdupq_lane_s8(v31, 6), (int8x8_t)-4244438269)))), v30);
      a8 = vrsraq_n_u16(v35, v35, 8uLL);
      *(uint8x8_t *)a8.i8 = vqrshrn_n_u16(a8, 8uLL);
      *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *uint64_t v17 = a8.i32[0];
      int8x16_t v36 = &v15[a5];
      if ((unint64_t)v36 >= v16) {
        uint64_t v37 = -(uint64_t)a4;
      }
      else {
        uint64_t v37 = 0;
      }
      unint64_t v15 = &v36[v37];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)9,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  unint64_t v15 = *result;
  unint64_t v16 = *a3;
  uint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    uint16x8_t v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v20 = *(int8x16_t *)&v15[v18];
      int8x16_t v21 = *(int8x16_t *)&v17[v18];
      uint8x16_t v22 = (uint8x16_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v23 = (uint8x16_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD8D0);
      uint16x8_t v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v23.i8), v19);
      uint16x8_t v25 = vminq_u16(vmull_high_u8((uint8x16_t)v20, v23), v19);
      uint8x16_t v26 = vqsubq_u8((uint8x16_t)v20, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), vrsraq_n_u16(v25, v25, 8uLL), 8uLL));
      uint16x8_t v27 = vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v21.i8);
      uint16x8_t v28 = vmull_high_u8(v22, (uint8x16_t)v21);
      uint16x8_t v29 = vminq_u16(v27, v19);
      uint16x8_t v30 = vminq_u16(v28, v19);
      a10 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v29, v29, 8uLL), 8uLL), vrsraq_n_u16(v30, v30, 8uLL), 8uLL);
      a8 = (__n128)vqaddq_u8(v26, (uint8x16_t)a10);
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    uint64_t v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    unint64_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v31 = v14 + a13;
  if (v31)
  {
    a6.i64[0] = -4244438269;
    uint16x8_t v32 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      int8x8_t v33 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      a10.i32[0] = *v17;
      int8x8_t v35 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v36) = v35.i8[0];
      BYTE1(v36) = v35.i8[2];
      BYTE2(v36) = v35.i8[4];
      HIBYTE(v36) = v35.i8[6];
      a10 = vminq_u16(vmull_u8((uint8x8_t)v34, (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v35, 6), (int8x8_t)-4244438269)), v32);
      *(uint8x8_t *)a10.i8 = vqrshrn_n_u16(vrsraq_n_u16(a10, a10, 8uLL), 8uLL);
      uint16x8_t v37 = vminq_u16(vmull_u8((uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v33, 6), (int8x8_t)-4244438269), (uint8x8_t)v36), v32);
      a8 = (__n128)vrsraq_n_u16(v37, v37, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqadd_u8(vqsub_u8((uint8x8_t)v34, *(uint8x8_t *)a10.i8), vqrshrn_n_u16((uint16x8_t)a8, 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *uint64_t v17 = a8.n128_u32[0];
      uint64_t v38 = &v15[a5];
      if ((unint64_t)v38 >= v16) {
        uint64_t v39 = -(uint64_t)a4;
      }
      else {
        uint64_t v39 = 0;
      }
      unint64_t v15 = &v38[v39];
      v17 += a5;
      --v31;
    }
    while (v31);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)8,_rgba8_t>(_DWORD **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  unint64_t v12 = a12;
  unint64_t v13 = *result;
  unint64_t v14 = *a3;
  unint64_t v15 = *a2;
  if (a12 >= 4)
  {
    uint64_t v16 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    uint16x8_t v17 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      uint8x16_t v18 = *(uint8x16_t *)&v15[v16];
      uint8x16_t v19 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v13[v16], (int8x16_t)xmmword_1850CD8D0);
      uint16x8_t v20 = vminq_u16(vmull_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8), v17);
      uint16x8_t v21 = vminq_u16(vmull_high_u8(v18, v19), v17);
      a8 = (__n128)vqsubq_u8(v18, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v20, v20, 8uLL), 8uLL), vrsraq_n_u16(v21, v21, 8uLL), 8uLL));
      *(__n128 *)&v15[v16] = a8;
      v12 -= 4;
      v16 += 4 * a5;
    }
    while (v12 > 3);
    unint64_t v15 = (unsigned __int32 *)((char *)v15 + v16 * 4);
    unint64_t v13 = (_DWORD *)((char *)v13 + v16 * 4);
  }
  uint64_t v22 = v12 + a11;
  if (v22)
  {
    a6.i64[0] = -4244438269;
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      int8x16_t v24 = (int8x16_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]);
      LOBYTE(v25) = v24.i8[0];
      BYTE1(v25) = v24.i8[2];
      BYTE2(v25) = v24.i8[4];
      HIBYTE(v25) = v24.i8[6];
      v24.i32[0] = *v13;
      v24.i64[1] = v24.i64[0];
      uint16x8_t v26 = vminq_u16(vmull_u8((uint8x8_t)v25, (uint8x8_t)vqtbl1_s8(v24, (int8x8_t)-4244438269)), v23);
      a8 = (__n128)vrsraq_n_u16(v26, v26, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqsub_u8((uint8x8_t)v25, vqrshrn_n_u16((uint16x8_t)a8, 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      unsigned __int32 *v15 = a8.n128_u32[0];
      uint16x8_t v27 = &v13[a5];
      if ((unint64_t)v27 >= v14) {
        uint64_t v28 = -(uint64_t)a4;
      }
      else {
        uint64_t v28 = 0;
      }
      unint64_t v13 = &v27[v28];
      v15 += a5;
      --v22;
    }
    while (v22);
  }
  *BOOL result = v13;
  *a3 = v14;
  *a2 = v15;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)6,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, __n128 a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13 = a13;
  unint64_t v14 = *result;
  unint64_t v15 = *a3;
  uint64_t v16 = *a2;
  if (a13 >= 4)
  {
    uint64_t v17 = 0;
    if (a6) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = -1;
    }
    v19.i64[0] = 0xFF000000FF000000;
    v19.i64[1] = 0xFF000000FF000000;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    uint16x8_t v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v21 = *(int8x16_t *)&v16[v17];
      uint8x16_t v22 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      int8x16_t v23 = vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v24 = (uint8x16_t)vbicq_s8(v21, vceqzq_s8(v23));
      uint8x16_t v25 = (uint8x16_t)vmvnq_s8(v23);
      uint16x8_t v26 = vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v25.i8);
      uint16x8_t v27 = vmull_high_u8(v22, v25);
      uint16x8_t v28 = vminq_u16(v26, v20);
      uint16x8_t v29 = vminq_u16(v27, v20);
      a10 = (__n128)vqaddq_u8(v24, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v28, v28, 8uLL), 8uLL), vrsraq_n_u16(v29, v29, 8uLL), 8uLL));
      *(__n128 *)&v16[v17] = a10;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    uint64_t v16 = (_DWORD *)((char *)v16 + v17 * 4);
    unint64_t v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  uint64_t v30 = v13 + a12;
  if (v30)
  {
    if (a6) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = -1;
    }
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v31), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v32 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.n128_u32[0] = *v14;
      uint16x8_t v33 = vmovl_u8((uint8x8_t)a10.n128_u64[0]);
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      v33.i32[0] = *v16;
      v33.i64[0] = vmovl_u8(*(uint8x8_t *)v33.i8).u64[0];
      LOBYTE(v35) = v33.i8[0];
      BYTE1(v35) = v33.i8[2];
      BYTE2(v35) = v33.i8[4];
      HIBYTE(v35) = v33.i8[6];
      *(int8x8_t *)v33.i8 = vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v33.i8, 6), (int8x8_t)-4244438269);
      uint8x8_t v36 = (uint8x8_t)vbic_s8((int8x8_t)v35, vceqz_s8(*(int8x8_t *)v33.i8));
      uint16x8_t v37 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v34, *(int8x8_t *)a7.i8), (uint8x8_t)vmvn_s8(*(int8x8_t *)v33.i8)), v32);
      a10 = (__n128)vrsraq_n_u16(v37, v37, 8uLL);
      a10.n128_u64[0] = (unint64_t)vqadd_u8(v36, vqrshrn_n_u16((uint16x8_t)a10, 8uLL));
      a10.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a10, a7));
      _DWORD *v16 = a10.n128_u32[0];
      uint64_t v38 = &v14[a5];
      if ((unint64_t)v38 >= v15) {
        uint64_t v39 = -(uint64_t)a4;
      }
      else {
        uint64_t v39 = 0;
      }
      unint64_t v14 = &v38[v39];
      v16 += a5;
      --v30;
    }
    while (v30);
  }
  *BOOL result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)5,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint8x16_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  unint64_t v15 = *result;
  unint64_t v16 = *a3;
  uint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    uint16x8_t v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v20 = *(int8x16_t *)&v15[v18];
      int8x16_t v21 = *(int8x16_t *)&v17[v18];
      uint8x16_t v22 = (uint8x16_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v23 = (uint8x16_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850CD8D0);
      uint16x8_t v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v19);
      uint16x8_t v25 = vminq_u16(vmull_high_u8((uint8x16_t)v21, v22), v19);
      uint8x16_t v26 = vqsubq_u8((uint8x16_t)v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), vrsraq_n_u16(v25, v25, 8uLL), 8uLL));
      uint16x8_t v27 = vminq_u16(vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v20.i8), v19);
      uint16x8_t v28 = vminq_u16(vmull_high_u8(v23, (uint8x16_t)v20), v19);
      a10 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), vrsraq_n_u16(v28, v28, 8uLL), 8uLL);
      a8 = (__n128)vqaddq_u8(v26, a10);
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    uint64_t v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    unint64_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v29 = v14 + a13;
  if (v29)
  {
    a6.i64[0] = -4244438269;
    uint16x8_t v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      int8x8_t v31 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      a10.i32[0] = *v17;
      int8x8_t v33 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      *(int8x8_t *)a10.i8 = vqtbl1_s8(vdupq_lane_s8(v33, 6), (int8x8_t)-4244438269);
      uint16x8_t v35 = vminq_u16(vmull_u8((uint8x8_t)v34, (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v31, 6), (int8x8_t)-4244438269)), v30);
      a8 = (__n128)vrsraq_n_u16(v35, v35, 8uLL);
      uint16x8_t v36 = vminq_u16(vmull_u8(*(uint8x8_t *)a10.i8, (uint8x8_t)v32), v30);
      a8.n128_u64[0] = (unint64_t)vqadd_u8(vqsub_u8((uint8x8_t)v34, vqrshrn_n_u16((uint16x8_t)a8, 8uLL)), vqrshrn_n_u16(vrsraq_n_u16(v36, v36, 8uLL), 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *uint64_t v17 = a8.n128_u32[0];
      uint16x8_t v37 = &v15[a5];
      if ((unint64_t)v37 >= v16) {
        uint64_t v38 = -(uint64_t)a4;
      }
      else {
        uint64_t v38 = 0;
      }
      unint64_t v15 = &v37[v38];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)4,_rgba8_t>(unsigned __int32 **result, __int32 **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, int8x16_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13 = a13;
  unint64_t v14 = *result;
  unint64_t v15 = *a3;
  unint64_t v16 = *a2;
  if (a13 >= 4)
  {
    uint64_t v17 = 0;
    if (a6) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = -1;
    }
    v19.i64[0] = 0xFF000000FF000000;
    v19.i64[1] = 0xFF000000FF000000;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    uint16x8_t v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      uint8x16_t v21 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      uint8x16_t v22 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v16[v17], (int8x16_t)xmmword_1850CD8D0);
      uint16x8_t v23 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v20);
      uint16x8_t v24 = vminq_u16(vmull_high_u8(v21, v22), v20);
      a10 = (int8x16_t)vqsubq_u8(v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v23, v23, 8uLL), 8uLL), vrsraq_n_u16(v24, v24, 8uLL), 8uLL));
      *(int8x16_t *)&v16[v17] = a10;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    unint64_t v16 = (__int32 *)((char *)v16 + v17 * 4);
    unint64_t v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  uint64_t v25 = v13 + a12;
  if (v25)
  {
    if (a6) {
      unsigned int v26 = 0;
    }
    else {
      unsigned int v26 = -1;
    }
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v26), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v14;
      a10 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a10.i8);
      v28.i32[1] = 0;
      LOBYTE(v29) = a10.i8[0];
      BYTE1(v29) = a10.i8[2];
      BYTE2(v29) = a10.i8[4];
      HIBYTE(v29) = a10.i8[6];
      *(int8x8_t *)a10.i8 = vorr_s8((int8x8_t)v29, *(int8x8_t *)a7.i8);
      v28.i32[0] = *v16;
      v28.i64[1] = *v16;
      uint16x8_t v30 = vminq_u16(vmull_u8(*(uint8x8_t *)a10.i8, (uint8x8_t)vqtbl1_s8(v28, (int8x8_t)-4244438269)), v27);
      *(uint8x8_t *)a10.i8 = vqsub_u8(*(uint8x8_t *)a10.i8, vqrshrn_n_u16(vrsraq_n_u16(v30, v30, 8uLL), 8uLL));
      *(int8x8_t *)a10.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a10, a7));
      __int32 *v16 = a10.i32[0];
      int8x8_t v31 = &v14[a5];
      if ((unint64_t)v31 >= v15) {
        uint64_t v32 = -(uint64_t)a4;
      }
      else {
        uint64_t v32 = 0;
      }
      unint64_t v14 = &v31[v32];
      v16 += a5;
      --v25;
    }
    while (v25);
  }
  *BOOL result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)3,_rgba8_t>(unsigned __int32 **result, __int32 **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13 = a13;
  unint64_t v14 = *result;
  unint64_t v15 = *a3;
  unint64_t v16 = *a2;
  if (a13 >= 4)
  {
    uint64_t v17 = 0;
    if (a6) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = -1;
    }
    v19.i64[0] = 0xFF000000FF000000;
    v19.i64[1] = 0xFF000000FF000000;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    uint16x8_t v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      uint8x16_t v21 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      uint8x16_t v22 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v16[v17], (int8x16_t)xmmword_1850CD8D0);
      uint16x8_t v23 = vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8);
      uint16x8_t v24 = vmull_high_u8(v21, v22);
      uint16x8_t v25 = vminq_u16(v23, v20);
      uint16x8_t v26 = vminq_u16(v24, v20);
      a10 = vrsraq_n_u16(v26, v26, 8uLL);
      *(uint8x16_t *)&v16[v17] = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v25, v25, 8uLL), 8uLL), a10, 8uLL);
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    unint64_t v16 = (__int32 *)((char *)v16 + v17 * 4);
    unint64_t v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  uint64_t v27 = v13 + a12;
  if (v27)
  {
    if (a6) {
      unsigned int v28 = 0;
    }
    else {
      unsigned int v28 = -1;
    }
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v28), (int8x8_t)0xFF000000FF000000);
    uint16x8_t v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v14;
      uint16x8_t v30 = vmovl_u8(*(uint8x8_t *)a10.i8);
      v31.i32[1] = 0;
      LOBYTE(v32) = v30.i8[0];
      BYTE1(v32) = v30.i8[2];
      BYTE2(v32) = v30.i8[4];
      HIBYTE(v32) = v30.i8[6];
      *(int8x8_t *)v30.i8 = vorr_s8((int8x8_t)v32, *(int8x8_t *)a7.i8);
      v31.i32[0] = *v16;
      v31.i64[1] = *v16;
      uint16x8_t v33 = vminq_u16(vmull_u8(*(uint8x8_t *)v30.i8, (uint8x8_t)vqtbl1_s8(v31, (int8x8_t)-4244438269)), v29);
      a10 = vrsraq_n_u16(v33, v33, 8uLL);
      *(uint8x8_t *)a10.i8 = vqrshrn_n_u16(a10, 8uLL);
      *(int8x8_t *)a10.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a10, a7));
      __int32 *v16 = a10.i32[0];
      unsigned int v34 = &v14[a5];
      if ((unint64_t)v34 >= v15) {
        uint64_t v35 = -(uint64_t)a4;
      }
      else {
        uint64_t v35 = 0;
      }
      unint64_t v14 = &v34[v35];
      v16 += a5;
      --v27;
    }
    while (v27);
  }
  *BOOL result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)2,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14 = a14;
  unint64_t v15 = *result;
  unint64_t v16 = *a3;
  uint64_t v17 = *a2;
  if (a14 >= 4)
  {
    uint64_t v18 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    uint16x8_t v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      int8x16_t v20 = *(int8x16_t *)&v15[v18];
      uint8x16_t v21 = *(uint8x16_t *)&v17[v18];
      int8x16_t v22 = vqtbl1q_s8(v20, (int8x16_t)xmmword_1850CD8D0);
      uint8x16_t v23 = (uint8x16_t)vbicq_s8(v20, vceqzq_s8(v22));
      uint16x8_t v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v19);
      uint16x8_t v25 = vminq_u16(vmull_high_u8(v21, (uint8x16_t)v22), v19);
      a10 = vrsraq_n_u16(v25, v25, 8uLL);
      a8 = (__n128)vqaddq_u8(v23, vqsubq_u8(v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), a10, 8uLL)));
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    uint64_t v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    unint64_t v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  uint64_t v26 = v14 + a13;
  if (v26)
  {
    a6.i64[0] = -4244438269;
    uint16x8_t v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      int8x8_t v28 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v29) = v28.i8[0];
      BYTE1(v29) = v28.i8[2];
      BYTE2(v29) = v28.i8[4];
      HIBYTE(v29) = v28.i8[6];
      a10.i32[0] = *v17;
      a10 = vmovl_u8(*(uint8x8_t *)a10.i8);
      LOBYTE(v30) = a10.i8[0];
      BYTE1(v30) = a10.i8[2];
      BYTE2(v30) = a10.i8[4];
      HIBYTE(v30) = a10.i8[6];
      int8x8_t v31 = vqtbl1_s8(vdupq_lane_s8(v28, 6), (int8x8_t)-4244438269);
      *(int8x8_t *)a10.i8 = vceqz_s8(v31);
      uint16x8_t v32 = vminq_u16(vmull_u8((uint8x8_t)v30, (uint8x8_t)v31), v27);
      a8 = (__n128)vrsraq_n_u16(v32, v32, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqadd_u8((uint8x8_t)vbic_s8((int8x8_t)v29, *(int8x8_t *)a10.i8), vqsub_u8((uint8x8_t)v30, vqrshrn_n_u16((uint16x8_t)a8, 8uLL)));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *uint64_t v17 = a8.n128_u32[0];
      uint16x8_t v33 = &v15[a5];
      if ((unint64_t)v33 >= v16) {
        uint64_t v34 = -(uint64_t)a4;
      }
      else {
        uint64_t v34 = 0;
      }
      unint64_t v15 = &v33[v34];
      v17 += a5;
      --v26;
    }
    while (v26);
  }
  *BOOL result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)1,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 4)
  {
    uint64_t v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = *(_OWORD *)&v10[v13];
      v9 -= 4;
      v13 += 4 * a5;
    }
    while (v9 > 3);
    unint64_t v12 = (_DWORD *)((char *)v12 + v13 * 4);
    unint64_t v10 = (_DWORD *)((char *)v10 + v13 * 4);
  }
  for (uint64_t i = v9 + a8; i; --i)
  {
    _DWORD *v12 = *v10;
    unint64_t v15 = &v10[a5];
    if ((unint64_t)v15 >= v11) {
      uint64_t v16 = -(uint64_t)a4;
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v10 = &v15[v16];
    v12 += a5;
  }
  *BOOL result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

uint64_t *vec::template_mark_pixelshape_row<(CGCompositeOperation)0,_rgba8_t>(uint64_t *result, _DWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  unint64_t v10 = *result;
  unint64_t v11 = *a3;
  unint64_t v12 = *a2;
  if (a9 >= 4)
  {
    uint64_t v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = 0uLL;
      v9 -= 4;
      v13 += 4 * a5;
    }
    while (v9 > 3);
    unint64_t v12 = (_DWORD *)((char *)v12 + v13 * 4);
    v10 += v13 * 4;
  }
  for (uint64_t i = v9 + a8; i; --i)
  {
    _DWORD *v12 = 0;
    unint64_t v15 = v10 + 4 * a5;
    if (v15 >= v11) {
      uint64_t v16 = -(uint64_t)a4;
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v10 = v15 + 4 * v16;
    v12 += a5;
  }
  *BOOL result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

void *CGBitmapContextCreateWithAlpha(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, double a9, double a10, uint64_t a11)
{
  if (a4 <= 7) {
    _CGHandleAssert("CGBitmapContextCreateWithAlpha", 289, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGBitmapContext.c", "bits_per_component >= 8", "bpc: %zu", a4, (uint64_t)a7, a8, a4);
  }
  uint64_t v11 = 8;
  if ((a8 & 0xF0000) != 0x40000) {
    uint64_t v11 = a4;
  }
  BOOL result = (void *)CGBitmapContextInfoCreate(a1, 0, 0, a2, a3, a4, a5, a6, a9, a10, a7, a8, v11, 0, 0);
  if (result)
  {
    return bitmap_context_create((uint64_t)result, a11, (char)"CGBitmapContextCreateWithAlpha", v13, v14, v15, v16, v17);
  }
  return result;
}

void *CGBitmapContextCreateWithPlanarAlpha(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, int a7)
{
  if ((a4 - 1) > 5)
  {
    unint64_t v7 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v8 = 0;
    return CGBitmapContextCreateWithAlpha(a1, a2, a3, v7, v8 * v7 + 2 * (a4 == 6), a5, a6, a7 | (((a4 & 0xFFFFFFFE) == 4) << 8), 72.0, 72.0, 0);
  }
  unint64_t v7 = qword_18519F490[a4 - 1];
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = *(void *)(a6[3] + 48);
  return CGBitmapContextCreateWithAlpha(a1, a2, a3, v7, v8 * v7 + 2 * (a4 == 6), a5, a6, a7 | (((a4 & 0xFFFFFFFE) == 4) << 8), 72.0, 72.0, 0);
}

CGContextRef CGBitmapContextCreateWithShareableMappedData(size_t a1, size_t a2, CGColorSpace *a3, size_t *a4)
{
  if (!a3)
  {
    int v9 = 0;
    uint64_t v10 = 1;
    BOOL v13 = 1;
LABEL_10:
    char v14 = 3;
    size_t v15 = 8;
    goto LABEL_11;
  }
  uint64_t v7 = *((void *)a3 + 3);
  int v8 = *(unsigned __int8 *)(v7 + 14);
  if (*(unsigned char *)(v7 + 13)) {
    int v9 = 4352;
  }
  else {
    int v9 = 0;
  }
  uint64_t v10 = *(void *)(v7 + 48);
  int v11 = *(_DWORD *)(v7 + 28);
  BOOL v12 = v11 == 2;
  BOOL v13 = v11 != 2;
  if (!v12) {
    ++v10;
  }
  if (!v8) {
    goto LABEL_10;
  }
  char v14 = 4;
  size_t v15 = 16;
LABEL_11:
  size_t v16 = ((((v10 << v14) * a1) >> 3) + 31) & 0x3FFFFFFFFFFFFFE0;
  uint32_t v17 = v9 | v13;
  size_t v18 = (*MEMORY[0x1E4F14B00] + v16 * a2 - 1) & -*MEMORY[0x1E4F14B00];
  *a4 = v18;
  uint16x8_t v19 = mmap(0, v18, 3, 4097, 872415232, 0);
  return CGBitmapContextCreateWithData(v19, a1, a2, v15, v16, a3, v17, 0, 0);
}

uint64_t CGBitmapContextDelegateCreateWithDictionary(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8, double a9, double a10, uint64_t a11)
{
  uint64_t result = CGBitmapContextInfoCreate(a1, 0, 0, a2, a3, a4, a5, a6, a9, a10, a7, a8, 0, 0, 0);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = bitmap_context_delegate_create(result, a11);
    CGBitmapContextInfoRelease(v12);
    return v13;
  }
  return result;
}

CGImageAlphaInfo CGBitmapContextGetAlphaInfo(CGContextRef context)
{
  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4) {
    return *(_DWORD *)(*((void *)context + 4) + 40) & 0x1F;
  }
  handle_invalid_context((char)"CGBitmapContextGetAlphaInfo", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

uint64_t CGBitmapContextGetAlphaData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4) {
    return *(void *)(*(void *)(a1 + 32) + 120);
  }
  handle_invalid_context((char)"CGBitmapContextGetAlphaData", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGBitmapContextGetAlphaBytesPerRow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4) {
    return *(void *)(*(void *)(a1 + 32) + 136);
  }
  handle_invalid_context((char)"CGBitmapContextGetAlphaBytesPerRow", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

__CFData *CGBitmapContextCopyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = *(void *)(v8 + 88);
    CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
    uint64_t v12 = Mutable;
    if (Mutable)
    {
      CFDataAppendBytes(Mutable, *(const UInt8 **)(v8 + 64), v10 * v9);
      uint64_t v13 = *(const UInt8 **)(v8 + 120);
      if (v13) {
        CFDataAppendBytes(v12, v13, *(void *)(v8 + 136) * *(void *)(v8 + 16));
      }
    }
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextCopyData", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return v12;
}

void *CGBitmapContextCreateForFlatteningImage(uint64_t a1, CGColorSpaceRef *a2, const __CFDictionary *a3)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID((CFTypeRef)a1);
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1) {
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_276_4949);
  }
  if (v6 != CGImageGetTypeID_image_type_id) {
    return 0;
  }
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  CGColorSpaceRef v8 = ColorSpace;
  int v9 = *(_DWORD *)(a1 + 36);
  if (ColorSpace)
  {
    uint64_t v10 = *((void *)ColorSpace + 3);
    if (*(unsigned char *)(v10 + 10))
    {
      if (*(_DWORD *)(v10 + 28) != 3) {
        goto LABEL_31;
      }
    }
  }
  while (1)
  {
    CGColorSpaceRef v12 = v8;
    int Type = CGColorSpaceGetType(v8);
    if (Type != 7) {
      break;
    }
    CGColorSpaceRef v8 = 0;
    if (v12)
    {
      CGColorSpaceRef v8 = 0;
      uint64_t v11 = *((void *)v12 + 3);
      if ((*(_DWORD *)(v11 + 28) - 5) <= 1) {
        CGColorSpaceRef v8 = **(CGColorSpaceRef **)(v11 + 96);
      }
    }
  }
  if (Type == 8)
  {
    if (!v8) {
      goto LABEL_29;
    }
    uint64_t v14 = *((void *)v8 + 3);
    int v15 = *(_DWORD *)(v14 + 24);
    switch(v15)
    {
      case 6:
        size_t v16 = (CGColorSpaceRef *)(*(void *)(v14 + 96) + 56);
        break;
      case 10:
        size_t v16 = (CGColorSpaceRef *)(*(void *)(v14 + 96) + 48);
        break;
      case 8:
        size_t v16 = (CGColorSpaceRef *)(*(void *)(v14 + 96) + 8);
        break;
      default:
        CGColorSpaceRef v8 = 0;
        CGColorSpaceRef v12 = 0;
        goto LABEL_37;
    }
    CGColorSpaceRef v12 = *v16;
  }
  if (!v12) {
    goto LABEL_29;
  }
  uint64_t v17 = *((void *)v12 + 3);
  if (!*(unsigned char *)(v17 + 10) || *(_DWORD *)(v17 + 28) == 3)
  {
    uint64_t v18 = *(void *)(v17 + 48);
    switch(v18)
    {
      case 1:
        CFStringRef v19 = @"kCGColorSpaceGenericGrayGamma2_2";
        break;
      case 4:
        CFStringRef v19 = @"kCGColorSpaceGenericCMYK";
        break;
      case 3:
        CFStringRef v19 = @"kCGColorSpaceSRGB";
        break;
      default:
LABEL_29:
        CGColorSpaceRef v8 = 0;
        goto LABEL_37;
    }
    CGColorSpaceRef v8 = CGColorSpaceCreateWithName(v19);
    if (v8) {
      goto LABEL_39;
    }
LABEL_37:
    if ((v9 & 0x2000000) != 0) {
      goto LABEL_39;
    }
    return 0;
  }
  CGColorSpaceRef v8 = v12;
LABEL_31:
  CFRetain(v8);
  CGColorSpaceRef v12 = 0;
LABEL_39:
  CGImageAlphaInfo AlphaInfo = CGImageGetAlphaInfo((CGImageRef)a1);
  CGImageByteOrderInfo ByteOrderInfo = CGImageGetByteOrderInfo((CGImageRef)a1);
  int v22 = *(_DWORD *)(a1 + 36);
  CGBitmapInfo v44 = CGImageGetBitmapInfo((CGImageRef)a1) & 0xF00;
  unint64_t v23 = *(int *)(a1 + 40);
  int v46 = 0;
  if (CGCFDictionaryGetInteger(a3, @"kCGImageWidth", &v46)) {
    unint64_t v23 = v46;
  }
  size_t v24 = *(int *)(a1 + 48);
  int v47 = 0;
  if (CGCFDictionaryGetInteger(a3, @"kCGImageHeight", &v47)) {
    size_t v24 = v47;
  }
  UpscaledComponentint Type = CGImageGetUpscaledComponentType((CGImage *)a1);
  unint64_t BitsPerComponent = CGPixelComponentGetBitsPerComponent(UpscaledComponentType, v26, v27, v28, v29, v30, v31, v32);
  if (v8)
  {
    size_t v37 = BitsPerComponent;
    int v38 = 0;
    uint64_t v34 = 0;
    int v39 = v22 & 0xC000000;
    switch(*(void *)(*((void *)v8 + 3) + 48))
    {
      case 0:
        goto LABEL_45;
      case 1:
        uint64_t v34 = (BitsPerComponent >> 3) * v23;
        if (!v39) {
          goto LABEL_61;
        }
        uint64_t v42 = BitsPerComponent;
        goto LABEL_60;
      case 3:
        uint64_t v34 = 4 * v23 * (BitsPerComponent >> 3);
        if (v39)
        {
          if ((*(unsigned char *)(a1 + 39) & 4) == 0)
          {
LABEL_57:
            int v38 = 1;
            break;
          }
          if (AlphaInfo == kCGImageAlphaFirst)
          {
            int v38 = 2;
          }
          else
          {
            if (AlphaInfo == kCGImageAlphaLast || AlphaInfo == kCGImageAlphaNone) {
              goto LABEL_57;
            }
            int v38 = AlphaInfo;
          }
        }
        else
        {
          int v38 = 5;
        }
        break;
      case 4:
        uint64_t v34 = 4 * v23 * (BitsPerComponent >> 3);
        if (!v39)
        {
LABEL_61:
          int v38 = 0;
          break;
        }
        uint64_t v42 = 4 * BitsPerComponent;
LABEL_60:
        unsigned int v40 = CGBitmapContextCreateWithAlpha(0, v23, v24, BitsPerComponent, v42, v34, v8, v44 | ByteOrderInfo, 72.0, 72.0, (uint64_t)a3);
        goto LABEL_48;
      default:
        break;
    }
  }
  else
  {
LABEL_45:
    if ((v9 & 0x2000000) == 0) {
      _CGHandleAssert("CGBitmapContextCreateForFlatteningImage", 814, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGBitmapContext.c", "create_alpha_only == true", "", v34, v35, v36, releaseInfo);
    }
    uint64_t v34 = 0;
    int v38 = 7;
    size_t v37 = 8;
  }
  unsigned int v40 = CGBitmapContextCreateWithData(0, v23, v24, v37, v34, v8, ByteOrderInfo | v38 | v44, 0, 0);
LABEL_48:
  int8x16_t v20 = v40;
  if (a2 && v12) {
    *a2 = v12;
  }
  CGColorSpaceRelease(v8);
  return v20;
}

char *CGPDFShadingType3Init(CGPDFDictionary *a1, void *a2, _OWORD *a3)
{
  uint64_t v5 = a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    a1 = (CGPDFDictionary *)*((void *)a1 + 5);
  }
  if (CGColorSpaceGetType(a1) == 7)
  {
    return 0;
  }
  CFTypeID v6 = malloc_type_calloc(1uLL, 0x50uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v6) {
    return 0;
  }
  CGPDFObjectRef value = 0;
  *a2 = v6;
  *a3 = CGPDFShadingType3Init_type3_callbacks;
  if (v5) {
    uint64_t v5 = (CGPDFDictionary *)*((void *)v5 + 3);
  }
  if (!CGPDFDictionaryGetNumbers(v5, "Coords", (uint64_t)v11, (CGPDFArray *)6))
  {
    return 0;
  }
  long long v7 = v11[1];
  _OWORD *v6 = v11[0];
  v6[1] = v7;
  double v8 = v13;
  *((void *)v6 + 4) = v12;
  *((double *)v6 + 5) = v8;
  if (*(double *)&v7 < 0.0 || v8 < 0.0)
  {
    return 0;
  }
  if (!CGPDFDictionaryGetNumbers(v5, "Domain", (uint64_t)(v6 + 3), (CGPDFArray *)2)) {
    _OWORD v6[3] = xmmword_1850CD8C0;
  }
  if (!CGPDFDictionaryGetObject(v5, "Function", &value))
  {
    return 0;
  }
  uint64_t result = CGPDFShadingCreateShadingFunction((uint64_t)value, 1uLL);
  *((void *)v6 + 8) = result;
  if (result)
  {
    if (!CGPDFDictionaryGetBooleans(v5, "Extend", (uint64_t)v6 + 72, (CGPDFArray *)2)) {
      *((_WORD *)v6 + 36) = 0;
    }
    return (char *)1;
  }
  return result;
}

void type3_release_info(int a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (const void *)a2[8];
    if (v3) {
      CFRelease(v3);
    }
    free(a2);
  }
}

uint64_t type3_create_shading(CGRect *a1, uint64_t a2)
{
  uint64_t v3 = &CGRectNull;
  p_CGFloat height = &CGRectNull.size.height;
  p_CGFloat y = &CGRectNull.origin.y;
  p_CGSize size = &CGRectNull.size;
  if (a1)
  {
    p_CGSize size = &a1[2].size;
    p_CGFloat y = &a1[2].origin.y;
    uint64_t v3 = a1 + 2;
    p_CGFloat height = &a1[2].size.height;
  }
  double v7 = *p_height;
  double x = v3->origin.x;
  double v9 = *p_y;
  double width = p_size->width;
  v19[0] = *(void *)&v3->origin.x;
  *(double *)&v19[1] = v9;
  *(double *)&v19[2] = width;
  *(double *)&v19[3] = v7;
  if (a1)
  {
    CGFloat y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    CGFloat y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  if (v7 == 1.79769313e308 && width == 1.79769313e308 && v9 == -8.98846567e307 && x == -8.98846567e307) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v19;
  }
  return CGShadingCreateRadialInternal(*(void **)&y, (uint64_t)Components, (uint64_t)v17, (double *)(a2 + 48), *(void **)(a2 + 64), *(unsigned char *)(a2 + 72) != 0, *(unsigned char *)(a2 + 73) != 0, v13, *(double *)a2, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a2 + 40));
}

uint64_t cache_lock()
{
  if (get_cache_predicate != -1) {
    dispatch_once(&get_cache_predicate, &__block_literal_global_1505);
  }
  uint64_t v0 = (pthread_mutex_t *)get_cache_image_cache;

  return pthread_mutex_lock(v0);
}

uint64_t cache_unlock()
{
  if (get_cache_predicate != -1) {
    dispatch_once(&get_cache_predicate, &__block_literal_global_1505);
  }
  uint64_t v0 = (pthread_mutex_t *)get_cache_image_cache;

  return pthread_mutex_unlock(v0);
}

uint64_t release_and_remove(void *a1, void *value)
{
  if (get_cache_predicate != -1) {
    dispatch_once(&get_cache_predicate, &__block_literal_global_1505);
  }
  cache_release_value(*(cache_t **)(get_cache_image_cache + 64), value);
  if (get_cache_predicate != -1) {
    dispatch_once(&get_cache_predicate, &__block_literal_global_1505);
  }
  uint64_t v4 = *(cache_t **)(get_cache_image_cache + 64);

  return cache_remove(v4, a1);
}

void rip_image_data_make_purgeable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("rip_image_data_make_purgeable", 146, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "data != NULL", "NULL data", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 104);
  if (v8 && *(unsigned char *)(v8 + 8))
  {
    double v9 = *(void **)(v8 + 16);
    malloc_make_purgeable(v9);
  }
}

BOOL rip_image_data_make_nonpurgeable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("rip_image_data_make_nonpurgeable", 136, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "data != NULL", "NULL data", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 104);
  return !v8 || !*(unsigned char *)(v8 + 8) || malloc_make_nonpurgeable(*(void **)(v8 + 16)) == 0;
}

void rip_image_data_value_release(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("rip_image_data_value_release", 126, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "data != NULL", "NULL data", a6, a7, a8, v8);
  }
  RIPImageDataRelease(a1);
}

void *rip_image_data_key_retain(uint64_t a1, void *a2)
{
  uint64_t result = malloc_type_malloc(0x48uLL, 0x106004019ECFB16uLL);
  if (result)
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a1;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v6 = *(_OWORD *)(a1 + 32);
    long long v7 = *(_OWORD *)(a1 + 48);
    result[8] = *(void *)(a1 + 64);
    *((_OWORD *)result + 2) = v6;
    *((_OWORD *)result + 3) = v7;
    *((_OWORD *)result + 1) = v5;
  }
  *a2 = result;
  return result;
}

BOOL rip_image_data_key_is_equal(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  BOOL result = 0;
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(void *)(a1 + 40) == *(void *)(a2 + 40)
    && *(void *)(a1 + 48) == *(void *)(a2 + 48)
    && *(void *)(a1 + 56) == *(void *)(a2 + 56))
  {
    uint64_t v4 = *(const void **)(a1 + 64);
    long long v5 = *(const void **)(a2 + 64);
    if (a1 != a2 && *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      if (v7 != *(void *)(a2 + 16) || v6 != *(void *)(a2 + 24)) {
        return 0;
      }
    }
    BOOL result = v4 == v5;
    if (v4 && v4 != v5)
    {
      if (v5) {
        return CFEqual(v4, *(CFTypeRef *)(a2 + 64)) != 0;
      }
    }
  }
  return result;
}

uint64_t rip_image_data_key_hash(uint64_t a1)
{
  v3[9] = *MEMORY[0x1E4F143B8];
  memset(&v3[1], 0, 32);
  v3[0] = *(void *)a1;
  LODWORD(v3[1]) = *(_DWORD *)(a1 + 8);
  *(_OWORD *)&v3[2] = *(_OWORD *)(a1 + 16);
  LODWORD(v3[4]) = *(_DWORD *)(a1 + 32);
  *(_OWORD *)&v3[5] = *(_OWORD *)(a1 + 40);
  uint64_t v1 = *(void *)(a1 + 64);
  v3[7] = 0;
  v3[8] = v1;
  return MEMORY[0x18532A6B0](v3, 56);
}

uint64_t CGRIPImageCachePrint()
{
  if (get_cache_predicate != -1) {
    dispatch_once(&get_cache_predicate, &__block_literal_global_1505);
  }
  uint64_t v0 = *(void *)(get_cache_image_cache + 64);

  return MEMORY[0x1F40CA608](v0);
}

uint64_t CGRIPImageCachePurge()
{
  if (get_cache_predicate != -1) {
    dispatch_once(&get_cache_predicate, &__block_literal_global_1505);
  }
  uint64_t v0 = *(cache_t **)(get_cache_image_cache + 64);

  return cache_remove_all(v0);
}

uint64_t colorsync_smart_null_1547()
{
  return 0;
}

uint64_t *__profile_can_be_used_as_destination_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  BOOL result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (BOOL result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericGrayGamma22Profile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  profile_can_be_used_as_destination_s = v1;
  return result;
}

uint64_t (*__profile_can_be_used_as_destination_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  BOOL result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    BOOL result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1547;
  }
  profile_can_be_used_as_destination_f = v1;
  return result;
}

uint64_t CGCMSUtilsCreateProfileForCalGray(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  float32x2_t valuePtr = vcvt_f32_f64(*(float64x2_t *)a1);
  float v1 = *(double *)(a1 + 16);
  float v42 = v1;
  float32x2_t v39 = vcvt_f32_f64(*(float64x2_t *)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 48);
  float v3 = *(double *)(a1 + 40);
  float v40 = v3;
  keys[1] = *(_OWORD *)&off_1E52A07D8;
  keys[2] = xmmword_1E52A07E8;
  keys[3] = *(_OWORD *)off_1E52A07F8;
  int v38 = @"createImmutableCopy";
  keys[0] = xmmword_1E52A07C8;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  values = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CFNumberRef v32 = CFNumberCreate(0, kCFNumberFloatType, (char *)&valuePtr + 4);
  CFNumberRef v33 = CFNumberCreate(0, kCFNumberFloatType, &v42);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 3, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != 24; i += 8)
  {
    uint64_t v7 = *(void **)((char *)&values + i);
    if (v7) {
      CFRelease(v7);
    }
  }
  values = CFNumberCreate(0, kCFNumberFloatType, &v39);
  CFNumberRef v32 = CFNumberCreate(0, kCFNumberFloatType, (char *)&v39 + 4);
  CFNumberRef v33 = CFNumberCreate(0, kCFNumberFloatType, &v40);
  CFArrayRef v8 = CFArrayCreate(v4, (const void **)&values, 3, MEMORY[0x1E4F1D510]);
  for (uint64_t j = 0; j != 24; j += 8)
  {
    uint64_t v10 = *(void **)((char *)&values + j);
    if (v10) {
      CFRelease(v10);
    }
  }
  values = CFNumberCreate(0, kCFNumberSInt16Type, &CGCMSUtilsCreateProfileForCalGray_iccDate);
  CFNumberRef v32 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F556);
  CFNumberRef v33 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F558);
  *(void *)&long long v34 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F55A);
  *((void *)&v34 + 1) = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F55C);
  *(void *)&long long v35 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F55E);
  CFArrayRef v11 = CFArrayCreate(v4, (const void **)&values, 6, MEMORY[0x1E4F1D510]);
  for (uint64_t k = 0; k != 48; k += 8)
  {
    uint64_t v13 = *(void **)((char *)&values + k);
    if (v13) {
      CFRelease(v13);
    }
  }
  __int16 v29 = 0;
  uint64_t v28 = v2;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  v30[0] = CFNumberCreate(0, kCFNumberSInt16Type, &v29);
  v30[1] = CFNumberCreate(0, kCFNumberDoubleType, &v28);
  v30[2] = CFNumberCreate(0, kCFNumberDoubleType, &v27);
  v30[3] = CFNumberCreate(0, kCFNumberDoubleType, &v26);
  v30[4] = CFNumberCreate(0, kCFNumberDoubleType, &v25);
  v30[5] = CFNumberCreate(0, kCFNumberDoubleType, &v24);
  v30[6] = CFNumberCreate(0, kCFNumberDoubleType, &v23);
  v30[7] = CFNumberCreate(0, kCFNumberDoubleType, &v22);
  CFArrayRef v14 = CFArrayCreate(0, (const void **)v30, 8, MEMORY[0x1E4F1D510]);
  for (uint64_t m = 0; m != 8; ++m)
  {
    size_t v16 = v30[m];
    if (v16) {
      CFRelease(v16);
    }
  }
  values = v5;
  CFNumberRef v32 = v8;
  CFNumberRef v33 = v14;
  *(void *)&long long v34 = @"CG Cal Gray";
  *((void *)&v34 + 1) = @"calGray";
  *(void *)&long long v35 = @"4.0";
  *((void *)&v35 + 1) = *MEMORY[0x1E4F1CFD0];
  *(void *)&long long v36 = v11;
  *((void *)&v36 + 1) = *((void *)&v35 + 1);
  CFDictionaryRef v17 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t n = 0; n != 24; n += 8)
  {
    CFStringRef v19 = *(void **)((char *)&values + n);
    if (v19) {
      CFRelease(v19);
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  if (CGCMSUtilsCreateProfileForCalGray_cglibrarypredicate != -1) {
    dispatch_once(&CGCMSUtilsCreateProfileForCalGray_cglibrarypredicate, &__block_literal_global_152);
  }
  uint64_t ProfileForCalGray_f = CGCMSUtilsCreateProfileForCalGray_f(v17);
  if (v17) {
    CFRelease(v17);
  }
  return ProfileForCalGray_f;
}

uint64_t CGCMSUtilsCreateProfileForCalLab(char *valuePtr, uint64_t a2)
{
  values[3] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = CFNumberCreate(0, kCFNumberCGFloatType, valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCGFloatType, valuePtr + 8);
  values[2] = CFNumberCreate(0, kCFNumberCGFloatType, valuePtr + 16);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFArrayRef v6 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 3, MEMORY[0x1E4F1D510]);
  v22[0] = CFNumberCreate(0, kCFNumberCGFloatType, (const void *)a2);
  v22[1] = CFNumberCreate(0, kCFNumberCGFloatType, (const void *)(a2 + 8));
  v22[2] = CFNumberCreate(0, kCFNumberCGFloatType, (const void *)(a2 + 16));
  CFArrayRef v7 = CFArrayCreate(v4, (const void **)v22, 3, v5);
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v9 = values[i];
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = v22[i];
    if (v10) {
      CFRelease(v10);
    }
  }
  *(_OWORD *)keys = xmmword_1E52A0850;
  long long v21 = *(_OWORD *)off_1E52A0860;
  v19[0] = v6;
  v19[1] = v7;
  CFArrayRef v11 = (const void *)*MEMORY[0x1E4F1CFD0];
  v19[2] = @"Lab";
  v19[3] = v11;
  CFDictionaryRef v12 = CFDictionaryCreate(v4, (const void **)keys, v19, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v13 = 0;
  char v14 = 1;
  do
  {
    char v15 = v14;
    size_t v16 = v19[v13];
    if (v16) {
      CFRelease(v16);
    }
    char v14 = 0;
    uint64_t v13 = 1;
  }
  while ((v15 & 1) != 0);
  if (CGCMSUtilsCreateProfileForCalLab_cglibrarypredicate != -1) {
    dispatch_once(&CGCMSUtilsCreateProfileForCalLab_cglibrarypredicate, &__block_literal_global_161);
  }
  uint64_t ProfileForCalLab_f = CGCMSUtilsCreateProfileForCalLab_f(v12);
  if (v12) {
    CFRelease(v12);
  }
  return ProfileForCalLab_f;
}

CFTypeRef CGCMSUtilsCreateLinearITUR2020Profile()
{
  if (CGCMSUtilsCreateLinearITUR2020Profile_once != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearITUR2020Profile_once, &__block_literal_global_294);
  }
  CFTypeRef result = (CFTypeRef)CGCMSUtilsCreateLinearITUR2020Profile_linear_profile;
  if (CGCMSUtilsCreateLinearITUR2020Profile_linear_profile)
  {
    return CFRetain(result);
  }
  return result;
}

void __CGCMSUtilsCreateLinearITUR2020Profile_block_invoke()
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (_block_invoke_5_cglibrarypredicate != -1) {
    dispatch_once(&_block_invoke_5_cglibrarypredicate, &__block_literal_global_297);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))_block_invoke_5_f;
  if (_block_invoke_5_cglibrarypredicate_298 != -1) {
    dispatch_once(&_block_invoke_5_cglibrarypredicate_298, &__block_literal_global_301);
  }
  uint64_t v1 = v0(_block_invoke_5_s);
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    uint64_t v31 = 0x3FE6A7EF9DB22D0ELL;
    uint64_t v30 = 0x3FD2B020C49BA5E3;
    uint64_t v29 = 0x3FC5C28F5C28F5C3;
    uint64_t v28 = 0x3FE9810624DD2F1BLL;
    uint64_t v27 = 0x3FC0C49BA5E353F8;
    uint64_t v26 = 0x3FA78D4FDF3B645ALL;
    uint64_t v25 = 0x3FD40346DC5D6388;
    uint64_t v24 = 0x3FD50E5604189375;
    keys[10] = xmmword_1E52A0BE0;
    keys[11] = *(_OWORD *)off_1E52A0BF0;
    uint16x8_t v62 = @"createImmutableCopy";
    keys[6] = xmmword_1E52A0BA0;
    keys[7] = *(_OWORD *)&off_1E52A0BB0;
    keys[8] = xmmword_1E52A0BC0;
    keys[9] = *(_OWORD *)&off_1E52A0BD0;
    keys[2] = xmmword_1E52A0B60;
    keys[3] = *(_OWORD *)&off_1E52A0B70;
    _OWORD keys[4] = xmmword_1E52A0B80;
    keys[5] = *(_OWORD *)&off_1E52A0B90;
    keys[0] = xmmword_1E52A0B40;
    keys[1] = *(_OWORD *)&off_1E52A0B50;
    __int16 valuePtr = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0x3FF0000000000000;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    values[0] = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
    values[1] = CFNumberCreate(0, kCFNumberDoubleType, &v22);
    values[2] = CFNumberCreate(0, kCFNumberDoubleType, &v21);
    values[3] = CFNumberCreate(0, kCFNumberDoubleType, &v20);
    values[4] = CFNumberCreate(0, kCFNumberDoubleType, &v19);
    values[5] = CFNumberCreate(0, kCFNumberDoubleType, &v18);
    values[6] = CFNumberCreate(0, kCFNumberDoubleType, &v17);
    values[7] = CFNumberCreate(0, kCFNumberDoubleType, &v16);
    CFArrayRef v3 = CFArrayCreate(0, (const void **)values, 8, MEMORY[0x1E4F1D510]);
    if (_block_invoke_5_cglibrarypredicate_305 != -1) {
      dispatch_once(&_block_invoke_5_cglibrarypredicate_305, &__block_literal_global_308);
    }
    CFAllocatorRef v4 = (const void *)_block_invoke_5_f_304(v2, @"rXYZ");
    if (_block_invoke_5_cglibrarypredicate_310 != -1) {
      dispatch_once(&_block_invoke_5_cglibrarypredicate_310, &__block_literal_global_313);
    }
    CFArrayRef v5 = (const void *)_block_invoke_5_f_309(v2, @"gXYZ");
    if (_block_invoke_5_cglibrarypredicate_315 != -1) {
      dispatch_once(&_block_invoke_5_cglibrarypredicate_315, &__block_literal_global_318);
    }
    CFArrayRef v6 = (const void *)_block_invoke_5_f_314(v2, @"bXYZ");
    long long v58 = 0u;
    long long v59 = 0u;
    v57[0] = CFNumberCreate(0, kCFNumberSInt16Type, &_block_invoke_5_iccDate);
    v57[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F592);
    v57[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F594);
    v57[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F596);
    v57[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F598);
    v57[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F59A);
    CFArrayRef v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v57, 6, MEMORY[0x1E4F1D510]);
    for (uint64_t i = 0; i != 6; ++i)
    {
      uint64_t v9 = v57[i];
      if (v9) {
        CFRelease(v9);
      }
    }
    *(void *)bytes = 1885563235;
    LODWORD(v33) = 16779273;
    CFDataRef v10 = CFDataCreate(0, bytes, 12);
    *(void *)bytes = @"displayRGB";
    CFNumberRef v33 = @"4.0";
    long long v34 = @"Rec. ITU-R BT.2020-1 Linear";
    CFArrayRef v35 = v3;
    CFArrayRef v36 = v3;
    CFArrayRef v37 = v3;
    CFArrayRef v38 = v7;
    CFNumberRef v39 = CFNumberCreate(0, kCFNumberDoubleType, &v31);
    CFNumberRef v40 = CFNumberCreate(0, kCFNumberDoubleType, &v30);
    CFNumberRef v41 = CFNumberCreate(0, kCFNumberDoubleType, &v29);
    CFNumberRef v42 = CFNumberCreate(0, kCFNumberDoubleType, &v28);
    CFNumberRef v43 = CFNumberCreate(0, kCFNumberDoubleType, &v27);
    CFNumberRef v44 = CFNumberCreate(0, kCFNumberDoubleType, &v26);
    CFNumberRef v45 = CFNumberCreate(0, kCFNumberDoubleType, &v25);
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberDoubleType, &v24);
    uint64_t v12 = *MEMORY[0x1E4F1CFD0];
    CFNumberRef v46 = v11;
    uint64_t v47 = v12;
    uint64_t v48 = v12;
    uint64_t v49 = v12;
    uint64_t v50 = v12;
    uint64_t v51 = v12;
    uint16x8_t v52 = v4;
    uint16x8_t v53 = v5;
    uint64_t v54 = v6;
    CFDataRef v55 = v10;
    uint64_t v56 = v12;
    CFDictionaryRef v13 = CFDictionaryCreate(0, (const void **)keys, (const void **)bytes, 25, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (_block_invoke_5_cglibrarypredicate_323 != -1) {
      dispatch_once(&_block_invoke_5_cglibrarypredicate_323, &__block_literal_global_326);
    }
    CGCMSUtilsCreateLinearITUR2020Profile_linear_profile = _block_invoke_5_f_322(v13);
    if (v3) {
      CFRelease(v3);
    }
    if (v7) {
      CFRelease(v7);
    }
    for (uint64_t j = 56; j != 120; j += 8)
    {
      char v15 = *(const void **)&bytes[j];
      if (v15) {
        CFRelease(v15);
      }
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v13) {
      CFRelease(v13);
    }
    CFRelease(v2);
  }
}

uint64_t *__CGCMSUtilsCreateLinearITUR2020Profile_block_invoke_3()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020Profile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  _block_invoke_5_s = v1;
  return result;
}

uint64_t CGCMSUtilsCreateLinearizedProfile(uint64_t a1)
{
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate, &__block_literal_global_329);
  }
  uint64_t LinearizedProfile_f = CGCMSUtilsCreateLinearizedProfile_f(a1, 0);
  if (!LinearizedProfile_f) {
    return 0;
  }
  CFArrayRef v3 = (const void *)LinearizedProfile_f;
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_331 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_331, &__block_literal_global_334);
  }
  CFDataRef LinearizedProfile_f_330 = (const __CFData *)CGCMSUtilsCreateLinearizedProfile_f_330(v3);
  if (!LinearizedProfile_f_330) {
    goto LABEL_34;
  }
  CFDataRef v5 = LinearizedProfile_f_330;
  uint64_t BytePtr = CFDataGetBytePtr(LinearizedProfile_f_330);
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_336 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_336, &__block_literal_global_339);
  }
  int LinearizedProfile_f_335 = CGCMSUtilsCreateLinearizedProfile_f_335(v3);
  if (*((_DWORD *)BytePtr + 5) == 1482250784 && *((_DWORD *)BytePtr + 4) == 1196573017)
  {
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_341 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_341, &__block_literal_global_344);
    }
    int LinearizedProfile_f_340 = CGCMSUtilsCreateLinearizedProfile_f_340(v3, @"kTRC");
  }
  else
  {
    int LinearizedProfile_f_340 = 0;
  }
  if (((LinearizedProfile_f_335 | LinearizedProfile_f_340) & 1) == 0)
  {
LABEL_34:
    uint64_t v18 = v3;
LABEL_35:
    CFRelease(v18);
    return 0;
  }
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_349 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_349, &__block_literal_global_352);
  }
  uint64_t LinearizedProfile_f_348 = CGCMSUtilsCreateLinearizedProfile_f_348();
  if (!LinearizedProfile_f_348)
  {
    CFRelease(v3);
    CFRelease(v5);
    return LinearizedProfile_f_348;
  }
  MutableCopCGFloat y = CFDataCreateMutableCopy(0, 0, v5);
  if (!MutableCopy)
  {
    CFRelease(v3);
    uint64_t v18 = v5;
    goto LABEL_35;
  }
  CFNumberRef v11 = MutableCopy;
  Mutableuint64_t BytePtr = CFDataGetMutableBytePtr(MutableCopy);
  *(void *)(MutableBytePtr + 92) = 0;
  *(void *)(MutableBytePtr + 84) = 0;
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_355 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_355, &__block_literal_global_358);
  }
  CGCMSUtilsCreateLinearizedProfile_f_354(LinearizedProfile_f_348, v11);
  CFRelease(v11);
  CFRelease(v5);
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_361 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_361, &__block_literal_global_364);
  }
  LinearizedProfile_f_360 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_360(v3, @"wtpt");
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_366 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_366, &__block_literal_global_369);
  }
  CGCMSUtilsCreateLinearizedProfile_f_365(LinearizedProfile_f_348, @"wtpt", LinearizedProfile_f_360);
  if (LinearizedProfile_f_360) {
    CFRelease(LinearizedProfile_f_360);
  }
  *(void *)bytes = 1987212643;
  int v26 = 0x1000000;
  __int16 v27 = 1;
  CFDataRef v14 = CFDataCreateWithBytesNoCopy(0, bytes, 14, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v14)
  {
    CFRelease(v3);
LABEL_78:
    uint64_t v18 = (const void *)LinearizedProfile_f_348;
    goto LABEL_35;
  }
  CFDataRef v15 = v14;
  if ((LinearizedProfile_f_335 ^ 1 | LinearizedProfile_f_340))
  {
    if (!LinearizedProfile_f_340) {
      goto LABEL_67;
    }
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_426 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_426, &__block_literal_global_429);
    }
    uint64_t v16 = @"kTRC";
    uint64_t v17 = &CGCMSUtilsCreateLinearizedProfile_f_425;
  }
  else
  {
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_372 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_372, &__block_literal_global_375);
    }
    LinearizedProfile_f_371 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_371(v3, @"rXYZ");
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_377 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_377, &__block_literal_global_380);
    }
    LinearizedProfile_f_376 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_376(v3, @"gXYZ");
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_382 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_382, &__block_literal_global_385);
    }
    LinearizedProfile_f_381 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_381(v3, @"bXYZ");
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_387 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_387, &__block_literal_global_390);
    }
    CGCMSUtilsCreateLinearizedProfile_f_386(LinearizedProfile_f_348, @"rXYZ", LinearizedProfile_f_371);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_392 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_392, &__block_literal_global_395);
    }
    CGCMSUtilsCreateLinearizedProfile_f_391(LinearizedProfile_f_348, @"gXYZ", LinearizedProfile_f_376);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_397 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_397, &__block_literal_global_400);
    }
    CGCMSUtilsCreateLinearizedProfile_f_396(LinearizedProfile_f_348, @"bXYZ", LinearizedProfile_f_381);
    if (LinearizedProfile_f_371) {
      CFRelease(LinearizedProfile_f_371);
    }
    if (LinearizedProfile_f_376) {
      CFRelease(LinearizedProfile_f_376);
    }
    if (LinearizedProfile_f_381) {
      CFRelease(LinearizedProfile_f_381);
    }
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_402 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_402, &__block_literal_global_405);
    }
    CGCMSUtilsCreateLinearizedProfile_f_401(LinearizedProfile_f_348, @"rTRC", v15);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_410 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_410, &__block_literal_global_413);
    }
    CGCMSUtilsCreateLinearizedProfile_f_409(LinearizedProfile_f_348, @"gTRC", v15);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_418 != -1) {
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_418, &__block_literal_global_421);
    }
    uint64_t v16 = @"bTRC";
    uint64_t v17 = &CGCMSUtilsCreateLinearizedProfile_f_417;
  }
  ((void (*)(uint64_t, __CFString *, CFDataRef))*v17)(LinearizedProfile_f_348, v16, v15);
LABEL_67:
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_431 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_431, &__block_literal_global_434);
  }
  LinearizedProfile_f_430 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_430(v3);
  CFStringRef v24 = CFStringCreateWithFormat(0, 0, @"%@ Linearized", LinearizedProfile_f_430);
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_440 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_440, &__block_literal_global_443);
  }
  CGCMSUtilsCreateLinearizedProfile_f_439(LinearizedProfile_f_348, v24, 0);
  if (LinearizedProfile_f_430) {
    CFRelease(LinearizedProfile_f_430);
  }
  if (v24) {
    CFRelease(v24);
  }
  CFRelease(v15);
  CFRelease(v3);
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_446 != -1) {
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_446, &__block_literal_global_449);
  }
  if ((CGCMSUtilsCreateLinearizedProfile_f_445(LinearizedProfile_f_348, 0, 0) & 1) == 0) {
    goto LABEL_78;
  }
  return LinearizedProfile_f_348;
}

CFDictionaryRef copy_profile_dictionary_with_parameters(const __CFDictionary *result, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    CFDictionaryRef v8 = result;
    unint64_t Count = CFDictionaryGetCount(result);
    if (Count >= 8) {
      _CGHandleAssert("copy_profile_dictionary_with_parameters", 1450, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSUtils.c", "count <= kPROFILE_DICT_COUNT", "count: %zu  dictionary count: %d", v9, v10, v11, Count);
    }
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)keys = 0u;
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)values = 0u;
    CFDictionaryGetKeysAndValues(v8, (const void **)keys, (const void **)values);
    if (Count != 7) {
      uint64_t v22 = @"kCGColorSpace";
    }
    for (uint64_t i = 0; i != 7; ++i)
    {
      if (CFEqual(keys[i], @"ColorSyncTransformTag")) {
        values[i] = a3;
      }
      if (CFEqual(keys[i], @"ColorSyncRenderingIntent")) {
        values[i] = a4;
      }
      if (CFEqual(keys[i], @"ColorSyncBlackPointCompensation")) {
        values[i] = a5;
      }
      if (CFEqual(keys[i], @"kCGColorSpace")) {
        values[i] = a2;
      }
    }
    return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  return result;
}

CGPDFStreamRef get_font_stream(uint64_t a1)
{
  unint64_t FontDescriptor = CGPDFFontGetFontDescriptor(a1);
  if (!FontDescriptor) {
    return 0;
  }
  CGPDFStreamRef value = 0;
  if (CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)(FontDescriptor + 32), "FontFile2", &value)) {
    CGPDFStreamRef v2 = value;
  }
  else {
    CGPDFStreamRef v2 = 0;
  }
  if (v2)
  {
    CGPDFStreamRef value = 0;
    if (CGPDFDictionaryGetName(*((CGPDFDictionaryRef *)v2 + 6), "Subtype", (const char **)&value))
    {
      CFArrayRef v3 = (const char *)value;
      if (strcmp((const char *)value, "OpenType"))
      {
        return 0;
      }
    }
  }
  return v2;
}

CGFontRef CGPDFFontFindTrueTypeOrCIDType2(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = 0;
  while (v1[v3] - 91 >= 0xFFFFFFE6)
  {
    if (++v3 == 6)
    {
      uint64_t v4 = 7;
      if (v1[6] != 43) {
        uint64_t v4 = 0;
      }
      v1 += v4;
      break;
    }
  }
  if (a1)
  {
    int v5 = *(_DWORD *)(a1 + 200);
    CGFontRef v6 = CGFontCreateWithName(v1);
    if (!v6) {
      goto LABEL_15;
    }
    CGFontRef v7 = v6;
    if (v5 == 4) {
      return v7;
    }
  }
  else
  {
    CGFontRef v7 = CGFontCreateWithName(v1);
    int v5 = 0;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (CGPDFFontHasMatchingROS(a1, v7)) {
    return v7;
  }
  CFRelease(v7);
LABEL_15:
  __s2 = 0;
  if (CGPDFFontNameHasAlias(v1, &__s2))
  {
    CFDictionaryRef v8 = __s2;
    if (strcmp(v1, __s2))
    {
      CGFontRef v9 = CGFontCreateWithName(v8);
      CFDictionaryRef v8 = __s2;
      if (v9)
      {
        CGFontRef v7 = v9;
        uint64_t v10 = "CIDFontType2";
        if (v5 == 4) {
          uint64_t v10 = "TrueType";
        }
        free(__s2);
        return v7;
      }
    }
    free(v8);
  }
  char v11 = 0;
  uint64_t v12 = 0;
  while (2)
  {
    CFDictionaryRef v13 = (const char **)&variants[3 * v12];
    while (1)
    {
      CFDataRef v14 = *v13;
      if (font_name_contains_variant(v1, *v13)) {
        break;
      }
      ++v12;
      v13 += 3;
      if (v12 == 8)
      {
        if ((v11 & 1) == 0) {
          return 0;
        }
        goto LABEL_31;
      }
    }
    CGFontRef font_with_variant = find_font_with_variant(v1, v14, variants[3 * v12 + 1], v5);
    if (font_with_variant) {
      return font_with_variant;
    }
    ++v12;
    char v11 = 1;
    if (v12 != 8) {
      continue;
    }
    break;
  }
LABEL_31:
  uint64_t v16 = 0;
  while (1)
  {
    long long v17 = variants[v16];
    if (font_name_contains_variant(v1, v17))
    {
      CGFontRef font_with_variant = find_font_with_variant(v1, v17, "", v5);
      if (font_with_variant) {
        break;
      }
    }
    v16 += 3;
    if (v16 == 24) {
      return 0;
    }
  }
  return font_with_variant;
}

BOOL font_name_contains_variant(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  size_t v5 = strlen(a2);
  return v4 >= v5 && !strcmp(&a1[v4 - v5], a2);
}

CGFontRef find_font_with_variant(const char *a1, const char *a2, const char *a3, int a4)
{
  size_t v8 = strlen(a1);
  size_t v9 = strlen(a3);
  uint64_t v10 = (char *)malloc_type_malloc(v8 + v9 + 1, 0xE8456C36uLL);
  if (!v10) {
    return 0;
  }
  char v11 = v10;
  strcpy(v10, a1);
  uint64_t v12 = &v11[strlen(a1)];
  size_t v13 = strlen(a2);
  strcpy(&v12[-v13], a3);
  CGFontRef v14 = CGFontCreateWithName(v11);
  if (v14)
  {
    if (pdf_is_verbose_onceToken != -1) {
      dispatch_once(&pdf_is_verbose_onceToken, &__block_literal_global_5_6606);
    }
    if (pdf_is_verbose_isVerbose)
    {
      printable_name = create_printable_name(a1);
      uint64_t v16 = create_printable_name(v11);
      long long v17 = (char *)v16;
      uint64_t v18 = "CIDFontType2";
      if (a4 == 4) {
        uint64_t v18 = "TrueType";
      }
      free(v17);
      free(printable_name);
    }
  }
  free(v11);
  return v14;
}

unsigned char *create_printable_name(const char *a1)
{
  size_t v2 = strlen(a1);
  uint64_t v3 = malloc_type_malloc(3 * v2 + 1, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v3)
  {
    char v4 = *a1;
    if (*a1)
    {
      uint64_t v5 = 0;
      CGFontRef v6 = (unsigned __int8 *)(a1 + 1);
      do
      {
        CGFontRef v7 = &v3[v5];
        if ((v4 - 127) > 0xA1u)
        {
          ++v5;
          char *v7 = v4;
        }
        else
        {
          sprintf_l(v7, 0, "#%02x", v4);
          v5 += 3;
        }
        int v8 = *v6++;
        char v4 = v8;
      }
      while (v8);
    }
    else
    {
      uint64_t v5 = 0;
    }
    v3[v5] = 0;
  }
  return v3;
}

uint64_t TaggedParser::ScannerContext::op_EMC(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::EndMarkedContentSequence(**((void **)a2 + 6), *(CGPDFPage **)a2);
}

void TaggedParser::ScannerContext::op_BMC(TaggedParser::ScannerContext *this, TaggedParser **a2, void *a3)
{
  CGPDFStreamRef value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value)) {
    TaggedParser::BeginMarkedContentSequence(a2[6], *a2, 0, v4);
  }
}

void TaggedParser::ScannerContext::op_BDC(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  int v3 = *((_DWORD *)this + 18);
  if (v3 <= 0)
  {
    pdf_error("stack underflow.", a2, a3);
  }
  else
  {
    uint64_t v4 = *((void *)this + 10);
    unsigned int v5 = v3 - 1;
    *((_DWORD *)this + 18) = v5;
    if (!v4) {
      return;
    }
    int v7 = *(_DWORD *)(v4 + 40 * v5 + 8);
    if (v7 == 8)
    {
      size_t v9 = 0;
      int v8 = *(CGPDFDictionary **)(v4 + 40 * v5 + 32);
    }
    else
    {
      if (v7 != 5) {
        return;
      }
      int v8 = 0;
      size_t v9 = *(const char **)(v4 + 40 * v5 + 32);
    }
    CGPDFStreamRef value = 0;
    if (CGPDFScannerPopName(this, (const char **)&value))
    {
      char v11 = (TaggedParser *)*((void *)a2 + 6);
      uint64_t v12 = *(CGPDFPage **)a2;
      if (v9) {
        TaggedParser::BeginMarkedContentSequence(v11, v12, v9, v10);
      }
      else {
        TaggedParser::BeginMarkedContentSequence(v11, v12, v8, (CGPDFDictionary *)v10);
      }
    }
  }
}

void TaggedParser::ScannerContext::op_EI(TaggedParser::ScannerContext *this, CGPDFPage **a2, void *a3)
{
  CGPDFStreamRef value = 0;
  if (CGPDFScannerPopStream(this, &value))
  {
    uint64_t Inline = CGPDFImageCreateInline(*((void *)this + 7), (uint64_t)value);
    if (Inline)
    {
      CGFontRef v6 = (const void *)Inline;
      TaggedParser::ScannerContext::drawImage(a2);
      CFRelease(v6);
    }
  }
}

void TaggedParser::ScannerContext::drawImage(CGPDFPage **a1)
{
  CGContextGetCTM(&v4, a1[9]);
  v6.origin.double x = 0.0;
  v6.origin.CGFloat y = 0.0;
  v6.size.double width = 1.0;
  v6.size.CGFloat height = 1.0;
  CGRect v7 = CGRectApplyAffineTransform(v6, &v4);
  size_t v2 = a1[6];
  int v3 = *a1;

  TaggedParser::AddGraphicBounds(v2, v3, v7, 1);
}

void TaggedParser::ScannerContext::op_Do(TaggedParser::ScannerContext *this, CGPDFPage **a2, void *a3)
{
  CGPDFStreamRef value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    unsigned int v5 = (CGPDFContentStream *)*((void *)this + 7);
    if (v5)
    {
      CGRect v6 = value;
      uint64_t v7 = *((void *)this + 7);
      while (1)
      {
        int v8 = CGPDFResourcesCopyXObject(*(void *)(v7 + 32), v6);
        if (v8) {
          break;
        }
        uint64_t v7 = *(void *)(v7 + 40);
        if (!v7) {
          return;
        }
      }
      size_t v9 = v8;
      int v10 = *((_DWORD *)v8 + 4);
      if (v10 == 2)
      {
        uint64_t v11 = CGPDFXObjectGetValue((uint64_t)v8);
        if (v11)
        {
          uint64_t v12 = *(CGPDFStream **)v11;
          size_t v13 = *(CGPDFDictionary **)(v11 + 88);
        }
        else
        {
          uint64_t v12 = 0;
          size_t v13 = 0;
        }
        CGFontRef v14 = (const CGAffineTransform *)(v11 + 40);
      }
      else
      {
        if (v10 != 1)
        {
          if (v10)
          {
            pdf_error("unrecognized or unsupported XObject subtype.");
          }
          else
          {
            CGPDFXObjectGetValue((uint64_t)v8);
            TaggedParser::ScannerContext::drawImage(a2);
          }
LABEL_27:
          CFRelease(v9);
          return;
        }
        uint64_t v11 = CGPDFXObjectGetValue((uint64_t)v8);
        if (v11)
        {
          uint64_t v12 = *(CGPDFStream **)(v11 + 16);
          size_t v13 = *(CGPDFDictionary **)(v11 + 104);
        }
        else
        {
          uint64_t v12 = 0;
          size_t v13 = 0;
        }
        CGFontRef v14 = (const CGAffineTransform *)(v11 + 56);
      }
      if (!v11) {
        CGFontRef v14 = &CGAffineTransformIdentity;
      }
      long long v15 = *(_OWORD *)&v14->c;
      *(_OWORD *)&transform.double a = *(_OWORD *)&v14->a;
      *(_OWORD *)&transform.double c = v15;
      *(_OWORD *)&transform.tdouble x = *(_OWORD *)&v14->tx;
      CGContextSaveGState(a2[9]);
      CGContextConcatCTM(a2[9], &transform);
      uint64_t v16 = CGPDFContentStreamCreateWithStream(v12, v13, v5);
      long long v17 = CGPDFScannerCreate(v16, a2[5], a2);
      CGPDFScannerScan(v17);
      if (v17) {
        CFRelease(v17);
      }
      if (v16) {
        CFRelease(v16);
      }
      CGContextRestoreGState(a2[9]);
      goto LABEL_27;
    }
  }
}

void TaggedParser::ScannerContext::op_Wstar(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  *((_DWORD *)a2 + 14) = 2;
}

void TaggedParser::ScannerContext::op_W(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  *((_DWORD *)a2 + 14) = 1;
}

uint64_t TaggedParser::ScannerContext::op_bstar(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathEOFillStroke, 1);
}

uint64_t TaggedParser::ScannerContext::drawPath(CGContextRef *this, CGPathDrawingMode mode, int a3)
{
  if (a3) {
    CGContextClosePath(this[9]);
  }
  CGContextDrawPath(this[9], mode);
  TaggedParser::ScannerContext::handleClipPath((TaggedParser::ScannerContext *)this);
  CGContextRef v5 = this[8];
  CGRect v6 = &CGRectNull;
  p_CGFloat height = &CGRectNull.size.height;
  p_CGFloat y = &CGRectNull.origin.y;
  p_CGSize size = &CGRectNull.size;
  if (v5)
  {
    BOOL v10 = *((void *)v5 + 74) == *((void *)v5 + 75);
    uint64_t v11 = (const CGRect *)((char *)v5 + 88);
    uint64_t v12 = (CGFloat *)((char *)v5 + 96);
    size_t v13 = (CGSize *)((char *)v5 + 104);
    CGFontRef v14 = (CGFloat *)((char *)v5 + 112);
    if (!v10)
    {
      p_CGSize size = v13;
      p_CGFloat y = v12;
      CGRect v6 = v11;
      p_CGFloat height = v14;
    }
  }
  v18.size.CGFloat height = *p_height;
  v18.origin.double x = v6->origin.x;
  v18.origin.CGFloat y = *p_y;
  v18.size.double width = p_size->width;
  TaggedParser::AddGraphicBounds(this[6], *this, v18, 0);
  uint64_t v15 = (uint64_t)this[8];

  return CGDisplayListReset(v15);
}

void TaggedParser::ScannerContext::handleClipPath(TaggedParser::ScannerContext *this)
{
  int v1 = *((_DWORD *)this + 14);
  if (v1)
  {
    *((_DWORD *)this + 14) = 0;
    int v3 = CGContextCopyPath(*((CGContextRef *)this + 9));
    if (v3)
    {
      CGAffineTransform v4 = v3;
      CGContextAddPath(*((CGContextRef *)this + 9), v3);
      clip(*((void *)this + 9), v1 == 2, v5, v6, v7, v8, v9, v10);
      CFRelease(v4);
    }
  }
}

uint64_t TaggedParser::ScannerContext::op_Bstar(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathEOFillStroke, 0);
}

uint64_t TaggedParser::ScannerContext::op_b(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathFillStroke, 1);
}

uint64_t TaggedParser::ScannerContext::op_B(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathFillStroke, 0);
}

uint64_t TaggedParser::ScannerContext::op_fstar(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathEOFill, 0);
}

uint64_t TaggedParser::ScannerContext::op_f(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathFill, 0);
}

uint64_t TaggedParser::ScannerContext::op_s(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathStroke, 1);
}

uint64_t TaggedParser::ScannerContext::op_S(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathStroke, 0);
}

void TaggedParser::ScannerContext::op_n(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGContextBeginPath(a2[9]);

  TaggedParser::ScannerContext::handleClipPath((TaggedParser::ScannerContext *)a2);
}

void TaggedParser::ScannerContext::op_re(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal y = 0.0;
  CGPDFReal x = 0.0;
  double v10 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &v10)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &y)
    && CGPDFScannerPopNumber(this, &x))
  {
    CGPDFReal v6 = value;
    CGPDFReal v5 = y;
    uint64_t v7 = (CGContext *)*((void *)a2 + 9);
    CGPDFReal v8 = x;
    if (value < 0.0 || (double v9 = v10, v10 < 0.0))
    {
      CGContextMoveToPoint(v7, x, y);
      CGContextAddLineToPoint(*((CGContextRef *)a2 + 9), x + value, y);
      CGContextAddLineToPoint(*((CGContextRef *)a2 + 9), x + value, y + v10);
      CGContextAddLineToPoint(*((CGContextRef *)a2 + 9), x, y + v10);
      CGContextClosePath(*((CGContextRef *)a2 + 9));
    }
    else
    {
      CGContextAddRect(v7, *(CGRect *)&v8);
    }
  }
}

void TaggedParser::ScannerContext::op_h(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
}

void TaggedParser::ScannerContext::op_y(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal v7 = 0.0;
  CGPDFReal v8 = 0.0;
  CGFloat v5 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &v5)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v7)
    && CGPDFScannerPopNumber(this, &v8))
  {
    CGContextAddCurveToPoint(a2[9], v8, v7, value, v5, value, v5);
  }
}

void TaggedParser::ScannerContext::op_v(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v8 = 0.0;
  CGPDFReal v9 = 0.0;
  CGFloat v6 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &v6)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v8)
    && CGPDFScannerPopNumber(this, &v9))
  {
    PathCGPoint CurrentPoint = CGContextGetPathCurrentPoint((CGContextRef)*((void *)a2 + 9));
    CGContextAddCurveToPoint(*((CGContextRef *)a2 + 9), PathCurrentPoint.x, PathCurrentPoint.y, v9, v8, value, v6);
  }
}

void TaggedParser::ScannerContext::op_c(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal v10 = 0.0;
  CGPDFReal v8 = 0.0;
  CGPDFReal v9 = 0.0;
  CGPDFReal value = 0.0;
  CGPDFReal v7 = 0.0;
  CGFloat y = 0.0;
  if (CGPDFScannerPopNumber(this, &y)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v7)
    && CGPDFScannerPopNumber(this, &v8)
    && CGPDFScannerPopNumber(this, &v9)
    && CGPDFScannerPopNumber(this, &v10))
  {
    CGContextAddCurveToPoint(a2[9], v10, v9, v8, v7, value, y);
  }
}

void TaggedParser::ScannerContext::op_l(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGFloat v5 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &v5) && CGPDFScannerPopNumber(this, &value)) {
    CGContextAddLineToPoint(a2[9], value, v5);
  }
}

void TaggedParser::ScannerContext::op_m(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGFloat v5 = 0.0;
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &v5) && CGPDFScannerPopNumber(this, &value)) {
    CGContextMoveToPoint(a2[9], value, v5);
  }
}

void TaggedParser::ScannerContext::op_i(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &value)) {
    CGContextSetFlatness(a2[9], value);
  }
}

void TaggedParser::ScannerContext::op_M(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &value))
  {
    if (value >= 1.0) {
      CGContextSetMiterLimit(a2[9], value);
    }
    else {
      pdf_error("invalid miter limit: %g.", value);
    }
  }
}

void TaggedParser::ScannerContext::op_d(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &value))
  {
    arraCGFloat y = 0;
    if (CGPDFScannerPopArray(this, &array))
    {
      if (array)
      {
        size_t v5 = *((void *)array + 2);
        if (v5 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000002)
        {
          CGFloat v6 = (CGFloat *)malloc_type_malloc(8 * v5, 0x6F779235uLL);
          if (v6)
          {
            CGPDFReal v7 = v6;
            if (CGPDFArrayGetNumbers((uint64_t)array, (uint64_t)v6, v5)) {
              CGContextSetLineDash(a2[9], value, v7, v5);
            }
            else {
              pdf_error("invalid dash array.");
            }
            free(v7);
          }
        }
      }
    }
  }
}

void TaggedParser::ScannerContext::op_w(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal value = 0.0;
  if (CGPDFScannerPopNumber(this, &value))
  {
    if (value >= 0.0) {
      CGContextSetLineWidth(a2[9], value);
    }
    else {
      pdf_error("invalid line width: %g.", value);
    }
  }
}

void TaggedParser::ScannerContext::op_J(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFInteger value = 0;
  if (CGPDFScannerPopInteger(this, &value))
  {
    if ((unint64_t)value >= 3) {
      pdf_error("invalid line cap: %ld.", value);
    }
    else {
      CGContextSetLineCap(a2[9], (CGLineCap)value);
    }
  }
}

void TaggedParser::ScannerContext::op_j(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFInteger value = 0;
  if (CGPDFScannerPopInteger(this, &value))
  {
    if ((unint64_t)value >= 3) {
      pdf_error("invalid line join: %ld.", value);
    }
    else {
      CGContextSetLineJoin(a2[9], (CGLineJoin)value);
    }
  }
}

void TaggedParser::ScannerContext::op_cm(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v11 = 0.0;
  CGPDFReal v12 = 0.0;
  CGPDFReal v9 = 0.0;
  CGPDFReal v10 = 0.0;
  CGPDFReal value = 0.0;
  CGPDFReal v8 = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v8)
    && CGPDFScannerPopNumber(this, &v9)
    && CGPDFScannerPopNumber(this, &v10)
    && CGPDFScannerPopNumber(this, &v11)
    && CGPDFScannerPopNumber(this, &v12))
  {
    size_t v5 = (CGContext *)*((void *)a2 + 9);
    v6.double a = v12;
    v6.double b = v11;
    v6.double c = v10;
    v6.double d = v9;
    v6.tCGPDFReal x = v8;
    v6.tCGFloat y = value;
    CGContextConcatCTM(v5, &v6);
  }
}

void TaggedParser::ScannerContext::op_Q(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
}

void TaggedParser::ScannerContext::op_q(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
}

CGAffineTransform *__cdecl CGAffineTransformMake(CGAffineTransform *__return_ptr retstr, CGFloat a, CGFloat b, CGFloat c, CGFloat d, CGFloat tx, CGFloat ty)
{
  retstr->double a = a;
  retstr->double b = b;
  retstr->double c = c;
  retstr->double d = d;
  retstr->tCGPDFReal x = tx;
  retstr->tCGFloat y = ty;
  return result;
}

BOOL CGAffineTransformIsRectilinear(double *a1)
{
  if (a1[1] == 0.0 && a1[2] == 0.0) {
    return 1;
  }
  if (*a1 == 0.0) {
    return a1[3] == 0.0;
  }
  return 0;
}

BOOL CGAffineTransformIsSingular(double *a1)
{
  return *a1 * a1[3] - a1[1] * a1[2] == 0.0;
}

void CGAffineTransformMakeWithRect(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  if (a4 < 0.0 || a5 < 0.0) {
    *(CGRect *)&a2 = CGRectStandardize(*(CGRect *)&a2);
  }
  *(double *)a1 = a4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a3;
}

CGAffineTransformComponents *__cdecl CGAffineTransformDecompose(CGAffineTransformComponents *__return_ptr retstr, CGAffineTransform *transform)
{
  double a = transform->a;
  CGFloat b = transform->b;
  *(double *)v6.i64 = atan2(b, transform->a);
  int8x16_t v17 = v6;
  __double2 v9 = __sincos_stret(*(double *)v6.i64);
  double v10 = b / v9.__sinval;
  if (fabs(v9.__cosval) >= fabs(v9.__sinval)) {
    double v10 = a / v9.__cosval;
  }
  double c = transform->c;
  double d = transform->d;
  double v13 = d * v9.__cosval - c * v9.__sinval;
  double v14 = 0.0;
  if (v13 != 0.0) {
    double v14 = (v9.__sinval * d + c * v9.__cosval) / v13;
  }
  if (v13 < 0.0)
  {
    double v10 = -v10;
    double v13 = -v13;
    v8.i64[0] = 0x400921FB54442D18;
    v16.f64[0] = NAN;
    v16.f64[1] = NAN;
    double v15 = *(double *)v17.i64 - *(double *)vbslq_s8((int8x16_t)vnegq_f64(v16), v8, v17).i64;
  }
  else
  {
    double v15 = *(double *)v17.i64;
  }
  retstr->scale.double width = v10;
  retstr->scale.CGFloat height = v13;
  retstr->horizontalShear = v14;
  retstr->double rotation = v15;
  retstr->translatiouint64_t n = *(CGVector *)&transform->tx;
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformMakeWithComponents(CGAffineTransform *__return_ptr retstr, CGAffineTransformComponents *components)
{
  __double2 v5 = __sincos_stret(components->rotation);
  double height = components->scale.height;
  double horizontalShear = components->horizontalShear;
  CGFloat v8 = components->scale.width * v5.__sinval;
  retstr->double a = components->scale.width * v5.__cosval;
  retstr->CGFloat b = v8;
  retstr->double c = height * horizontalShear * v5.__cosval - height * v5.__sinval;
  retstr->double d = v5.__cosval * height + height * horizontalShear * v5.__sinval;
  *(CGVector *)&retstr->tCGPDFReal x = components->translation;
  return result;
}

BOOL CGAffineTransformDecompose_SPI(_OWORD *a1, CGSize *a2, CGFloat *a3, BOOL *a4, CGVector *a5)
{
  long long v9 = a1[1];
  *(_OWORD *)&v11.double a = *a1;
  *(_OWORD *)&v11.double c = v9;
  *(_OWORD *)&v11.tCGPDFReal x = a1[2];
  memset(&v12, 0, sizeof(v12));
  CGAffineTransformDecompose(&v12, &v11);
  if (a2) {
    *a2 = v12.scale;
  }
  if (a3) {
    *a3 = v12.rotation;
  }
  if (a4) {
    *a4 = v12.scale.width < 0.0;
  }
  if (a5) {
    *a5 = v12.translation;
  }
  return fabs(v12.horizontalShear) < 1.42108547e-14;
}

void *color_space_state_create_generic_gray()
{
  if (color_space_state_create_generic_gray_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_generic_gray_cglibrarypredicate, &__block_literal_global_1742);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_generic_gray_f;
  if (color_space_state_create_generic_gray_cglibrarypredicate_2 != -1) {
    dispatch_once(&color_space_state_create_generic_gray_cglibrarypredicate_2, &__block_literal_global_5);
  }
  int v1 = (void *)v0(color_space_state_create_generic_gray_s);
  size_t v2 = create_from_profile(v1, 0);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpaceGenericGray";
    *(void *)(v2[12] + 48) = @"Generic Gray Profile";
  }
  return v2;
}

uint64_t colorsync_smart_null_1748()
{
  return 0;
}

uint64_t *__color_space_state_create_generic_gray_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericGrayProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_generic_gray_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_generic_gray_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_generic_gray_f = v1;
  return result;
}

void *color_space_state_create_extended_display_p3()
{
  if (color_space_state_create_extended_display_p3_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_extended_display_p3_cglibrarypredicate, &__block_literal_global_46);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_extended_display_p3_f;
  if (color_space_state_create_extended_display_p3_cglibrarypredicate_47 != -1) {
    dispatch_once(&color_space_state_create_extended_display_p3_cglibrarypredicate_47, &__block_literal_global_50_1771);
  }
  uint64_t v1 = (void *)v0(color_space_state_create_extended_display_p3_s);
  size_t v2 = create_from_profile(v1, 1);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpaceExtendedDisplayP3";
    *((_DWORD *)v2 + 5) = 8;
    *(void *)(v2[12] + 48) = @"Display P3 Extended";
  }
  return v2;
}

uint64_t *__color_space_state_create_extended_display_p3_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3Profile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_extended_display_p3_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_extended_display_p3_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_extended_display_p3_f = v1;
  return result;
}

void *color_space_state_create_extended_linear_display_p3()
{
  LinearDisplayP3Profile = CGCMSUtilsCreateLinearDisplayP3Profile();
  uint64_t v1 = create_from_profile(LinearDisplayP3Profile, 1);
  if (LinearDisplayP3Profile) {
    CFRelease(LinearDisplayP3Profile);
  }
  if (v1)
  {
    v1[10] = @"kCGColorSpaceExtendedLinearDisplayP3";
    *((_DWORD *)v1 + 5) = 10;
    *(void *)(v1[12] + 48) = @"Display P3 Extended Linear";
  }
  return v1;
}

void *color_space_state_create_p3_709()
{
  if (color_space_state_create_p3_709_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_p3_709_cglibrarypredicate, &__block_literal_global_81);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_p3_709_f;
  if (color_space_state_create_p3_709_cglibrarypredicate_82 != -1) {
    dispatch_once(&color_space_state_create_p3_709_cglibrarypredicate_82, &__block_literal_global_85);
  }
  uint64_t v1 = (void *)v0(color_space_state_create_p3_709_s);
  size_t v2 = create_from_profile(v1, 0);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpaceDisplayP3_709OETF";
    *((_DWORD *)v2 + 5) = 13;
    *(void *)(v2[12] + 48) = @"Display P3; ITU-R 709 OETF";
  }
  return v2;
}

uint64_t *__color_space_state_create_p3_709_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3_709OETFProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_p3_709_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_p3_709_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_p3_709_f = v1;
  return result;
}

void *color_space_state_create_acescg_linear()
{
  if (color_space_state_create_acescg_linear_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_acescg_linear_cglibrarypredicate, &__block_literal_global_136);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_acescg_linear_f;
  if (color_space_state_create_acescg_linear_cglibrarypredicate_137 != -1) {
    dispatch_once(&color_space_state_create_acescg_linear_cglibrarypredicate_137, &__block_literal_global_140_1813);
  }
  uint64_t v1 = (void *)v0(color_space_state_create_acescg_linear_s);
  size_t v2 = create_from_profile(v1, 0);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpaceACESCGLinear";
    *((_DWORD *)v2 + 5) = 19;
    *(void *)(v2[12] + 48) = @"ACES CG Linear (Academy Color Encoding System AP1)";
  }
  return v2;
}

uint64_t *__color_space_state_create_acescg_linear_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncACESCGLinearProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_acescg_linear_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_acescg_linear_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_acescg_linear_f = v1;
  return result;
}

void *color_space_state_create_itur_709_pq()
{
  if (color_space_state_create_itur_709_pq_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_itur_709_pq_cglibrarypredicate, &__block_literal_global_158);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_itur_709_pq_f;
  if (color_space_state_create_itur_709_pq_cglibrarypredicate_159 != -1) {
    dispatch_once(&color_space_state_create_itur_709_pq_cglibrarypredicate_159, &__block_literal_global_162);
  }
  uint64_t v1 = (void *)v0(color_space_state_create_itur_709_pq_s);
  size_t v2 = create_from_profile(v1, 0);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpaceITUR_709_PQ";
    *((_DWORD *)v2 + 5) = 21;
    *(void *)(v2[12] + 48) = @"Rec. ITU-R BT.709-5; SMPTE ST 2084 PQ";
  }
  return v2;
}

uint64_t *__color_space_state_create_itur_709_pq_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709_PQProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_itur_709_pq_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_itur_709_pq_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_itur_709_pq_f = v1;
  return result;
}

void *color_space_state_create_itur_709_hlg()
{
  if (color_space_state_create_itur_709_hlg_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_itur_709_hlg_cglibrarypredicate, &__block_literal_global_169);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_itur_709_hlg_f;
  if (color_space_state_create_itur_709_hlg_cglibrarypredicate_170 != -1) {
    dispatch_once(&color_space_state_create_itur_709_hlg_cglibrarypredicate_170, &__block_literal_global_173);
  }
  uint64_t v1 = (void *)v0(color_space_state_create_itur_709_hlg_s);
  size_t v2 = create_from_profile(v1, 0);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpaceITUR_709_HLG";
    *((_DWORD *)v2 + 5) = 22;
    *(void *)(v2[12] + 48) = @"Rec. ITU-R BT.709-5; ARIB STD-B67 HLG";
  }
  return v2;
}

uint64_t *__color_space_state_create_itur_709_hlg_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709_HLGProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_itur_709_hlg_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_itur_709_hlg_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_itur_709_hlg_f = v1;
  return result;
}

void *color_space_state_create_linear_itur_2020()
{
  LinearITUR2020Profile = CGCMSUtilsCreateLinearITUR2020Profile();
  uint64_t v1 = create_from_profile(LinearITUR2020Profile, 0);
  if (LinearITUR2020Profile) {
    CFRelease(LinearITUR2020Profile);
  }
  if (v1)
  {
    v1[10] = @"kCGColorSpaceLinearITUR_2020";
    *((_DWORD *)v1 + 5) = 24;
    *(void *)(v1[12] + 48) = @"Rec. ITU-R BT.2020-1 Linear";
  }
  return v1;
}

void *color_space_state_create_extended_itur_2020()
{
  if (color_space_state_create_extended_itur_2020_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_extended_itur_2020_cglibrarypredicate, &__block_literal_global_205);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_extended_itur_2020_f;
  if (color_space_state_create_extended_itur_2020_cglibrarypredicate_206 != -1) {
    dispatch_once(&color_space_state_create_extended_itur_2020_cglibrarypredicate_206, &__block_literal_global_209);
  }
  uint64_t v1 = (void *)v0(color_space_state_create_extended_itur_2020_s);
  size_t v2 = create_from_profile(v1, 1);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpaceExtendedITUR_2020";
    *((_DWORD *)v2 + 5) = 25;
    *(void *)(v2[12] + 48) = @"Rec. ITU-R BT.2020-1 Extended";
  }
  return v2;
}

uint64_t *__color_space_state_create_extended_itur_2020_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020Profile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_extended_itur_2020_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_extended_itur_2020_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_extended_itur_2020_f = v1;
  return result;
}

void *color_space_state_create_extended_linear_itur_2020()
{
  LinearITUR2020Profile = CGCMSUtilsCreateLinearITUR2020Profile();
  uint64_t v1 = create_from_profile(LinearITUR2020Profile, 1);
  if (LinearITUR2020Profile) {
    CFRelease(LinearITUR2020Profile);
  }
  if (v1)
  {
    v1[10] = @"kCGColorSpaceExtendedLinearITUR_2020";
    *((_DWORD *)v1 + 5) = 26;
    *(void *)(v1[12] + 48) = @"Rec. ITU-R BT.2020-1 Extended Linear";
  }
  return v1;
}

void *color_space_state_create_dci_p3()
{
  if (color_space_state_create_dci_p3_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_dci_p3_cglibrarypredicate, &__block_literal_global_251);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_dci_p3_f;
  if (color_space_state_create_dci_p3_cglibrarypredicate_252 != -1) {
    dispatch_once(&color_space_state_create_dci_p3_cglibrarypredicate_252, &__block_literal_global_255);
  }
  uint64_t v1 = (void *)v0(color_space_state_create_dci_p3_s);
  size_t v2 = create_from_profile(v1, 0);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpaceDCIP3";
    *((_DWORD *)v2 + 5) = 31;
    *(void *)(v2[12] + 48) = @"SMPTE RP 431-2-2007 DCI (P3)";
  }
  return v2;
}

uint64_t *__color_space_state_create_dci_p3_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDCIP3Profile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_dci_p3_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_dci_p3_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_dci_p3_f = v1;
  return result;
}

void *color_space_state_create_extended_linear_gray()
{
  LinearGrayProfile = CGCMSUtilsCreateLinearGrayProfile();
  uint64_t v1 = create_from_profile(LinearGrayProfile, 1);
  if (LinearGrayProfile) {
    CFRelease(LinearGrayProfile);
  }
  if (v1)
  {
    v1[10] = @"kCGColorSpaceExtendedLinearGray";
    *((_DWORD *)v1 + 5) = 4;
    *(void *)(v1[12] + 48) = @"Linear Gray";
  }
  return v1;
}

void *color_space_state_create_perceptual_rgb()
{
  if (color_space_state_create_perceptual_rgb_cglibrarypredicate != -1) {
    dispatch_once(&color_space_state_create_perceptual_rgb_cglibrarypredicate, &__block_literal_global_282);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))color_space_state_create_perceptual_rgb_f;
  if (color_space_state_create_perceptual_rgb_cglibrarypredicate_283 != -1) {
    dispatch_once(&color_space_state_create_perceptual_rgb_cglibrarypredicate_283, &__block_literal_global_286);
  }
  uint64_t v1 = (void *)v0(color_space_state_create_perceptual_rgb_s);
  size_t v2 = create_from_profile(v1, 0);
  if (v1) {
    CFRelease(v1);
  }
  if (v2)
  {
    v2[10] = @"kCGColorSpacePerceptualStandardRGB";
    *(void *)(v2[12] + 48) = @"Perceptual Standard RGB 1.0";
  }
  return v2;
}

uint64_t *__color_space_state_create_perceptual_rgb_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFTypeRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncPerceptualStandardRGBProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_perceptual_rgb_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_perceptual_rgb_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFTypeRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFTypeRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_perceptual_rgb_f = v1;
  return result;
}

uint64_t CGPDFCIDToGlyphMapCreate(char *a1)
{
  uint64_t v1 = a1;
  if (!a1) {
    return (uint64_t)v1;
  }
  int v2 = *((_DWORD *)a1 + 50);
  if (v2 != 7)
  {
    if (v2 == 6) {
      return -1;
    }
    else {
      return 0;
    }
  }
  CGPDFStreamRef value = 0;
  __s1 = 0;
  CGPDFDataFormat format = CGPDFDataFormatRaw;
  CGAffineTransform v4 = (CGPDFDictionary *)*((void *)a1 + 2);
  if (!CGPDFDictionaryGetStream(v4, "CIDToGIDMap", &value))
  {
    uint64_t Font = CGPDFFontGetFont((uint64_t)v1);
    if (Font)
    {
      uint64_t v12 = Font;
      pthread_mutex_lock((pthread_mutex_t *)(v1 + 136));
      int v13 = v1[304];
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 136));
      if (v13)
      {
        __int16 v17 = 8226;
        __int16 v16 = 0;
        (*(void (**)(void, __int16 *, __int16 *, uint64_t))(*(void *)(v12 + 16) + 376))(*(void *)(v12 + 112), &v17, &v16, 1);
        __int16 v14 = v16;
        uint64_t v1 = (char *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
        *(_WORD *)uint64_t v1 = v14;
        return (uint64_t)v1;
      }
    }
    if (CGPDFFontIsEmbedded((uint64_t)v1))
    {
      if (!CGPDFDictionaryGetName(v4, "CIDToGIDMap", (const char **)&__s1)) {
        return -1;
      }
      double v15 = __s1;
      if (!strcmp(__s1, "Identity")) {
        return -1;
      }
    }
    else
    {
      pdf_log("missing or invalid CIDToGIDMap entry.");
    }
    return 0;
  }
  CFDataRef v5 = CGPDFStreamCopyData(value, &format);
  if (!v5 || format)
  {
    pdf_error("invalid CIDToGIDMap entry.");
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  uint64_t v1 = (char *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
  *(_WORD *)uint64_t v1 = 0;
  uint64_t BytePtr = CFDataGetBytePtr(v5);
  unint64_t v7 = CFDataGetLength(v5) & 0xFFFFFFFFFFFFFFFELL;
  if (v7)
  {
    int v8 = 0;
    for (unint64_t i = 0; i < v7; i += 2)
    {
      int v10 = v8 + 1;
      CGFontIndexMapAddIndex((unsigned __int16 *)v1, (unsigned __int16)v8, bswap32(*(unsigned __int16 *)&BytePtr[i]) >> 16);
      int v8 = v10;
    }
  }
  CFRelease(v5);
  return (uint64_t)v1;
}

BOOL CGCFDictionaryGetPointerAsNSValue(void *a1, uint64_t a2, void *a3)
{
  CGAffineTransform v4 = (void *)[a1 valueForKey:a2];
  CFDataRef v5 = v4;
  if (v4) {
    *a3 = [v4 pointerValue];
  }
  return v5 != 0;
}

BOOL CGCFDictionaryGetRectAsNSValue(void *a1, uint64_t a2, void *a3)
{
  CGAffineTransform v4 = (void *)[a1 valueForKey:a2];
  CFDataRef v5 = v4;
  if (v4)
  {
    [v4 rectValue];
    *a3 = v6;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v9;
  }
  return v5 != 0;
}

void AddLazyPdfOperators(CGPDFOperatorTable *a1)
{
  CGPDFOperatorTableSetCallback(a1, "b", (CGPDFOperatorCallback)op_b);
  CGPDFOperatorTableSetCallback(a1, "B", (CGPDFOperatorCallback)op_B);
  CGPDFOperatorTableSetCallback(a1, "BDC", (CGPDFOperatorCallback)op_BDC);
  CGPDFOperatorTableSetCallback(a1, "BMC", (CGPDFOperatorCallback)op_BMC);
  CGPDFOperatorTableSetCallback(a1, "BT", (CGPDFOperatorCallback)op_BT);
  CGPDFOperatorTableSetCallback(a1, "b*", (CGPDFOperatorCallback)op_bstar);
  CGPDFOperatorTableSetCallback(a1, "B*", (CGPDFOperatorCallback)op_Bstar);
  CGPDFOperatorTableSetCallback(a1, "c", (CGPDFOperatorCallback)op_c);
  CGPDFOperatorTableSetCallback(a1, "cm", (CGPDFOperatorCallback)op_cm);
  CGPDFOperatorTableSetCallback(a1, "cs", (CGPDFOperatorCallback)op_cs);
  CGPDFOperatorTableSetCallback(a1, "CS", (CGPDFOperatorCallback)op_CS);
  CGPDFOperatorTableSetCallback(a1, "Do", (CGPDFOperatorCallback)op_Do);
  CGPDFOperatorTableSetCallback(a1, "d", (CGPDFOperatorCallback)op_d);
  CGPDFOperatorTableSetCallback(a1, "DP", (CGPDFOperatorCallback)op_DP);
  CGPDFOperatorTableSetCallback(a1, "d0", (CGPDFOperatorCallback)op_d0);
  CGPDFOperatorTableSetCallback(a1, "d1", (CGPDFOperatorCallback)op_d1);
  CGPDFOperatorTableSetCallback(a1, "EI", (CGPDFOperatorCallback)op_EI);
  CGPDFOperatorTableSetCallback(a1, "EMC", (CGPDFOperatorCallback)op_EMC);
  CGPDFOperatorTableSetCallback(a1, "ET", (CGPDFOperatorCallback)op_ET);
  CGPDFOperatorTableSetCallback(a1, "f", (CGPDFOperatorCallback)op_f);
  CGPDFOperatorTableSetCallback(a1, "F", (CGPDFOperatorCallback)op_f);
  CGPDFOperatorTableSetCallback(a1, "f*", (CGPDFOperatorCallback)op_fstar);
  CGPDFOperatorTableSetCallback(a1, "g", (CGPDFOperatorCallback)op_g);
  CGPDFOperatorTableSetCallback(a1, "G", (CGPDFOperatorCallback)op_G);
  CGPDFOperatorTableSetCallback(a1, "gs", (CGPDFOperatorCallback)op_gs);
  CGPDFOperatorTableSetCallback(a1, "h", (CGPDFOperatorCallback)op_h);
  CGPDFOperatorTableSetCallback(a1, "i", (CGPDFOperatorCallback)op_i);
  CGPDFOperatorTableSetCallback(a1, "j", (CGPDFOperatorCallback)op_j);
  CGPDFOperatorTableSetCallback(a1, "J", (CGPDFOperatorCallback)op_J);
  CGPDFOperatorTableSetCallback(a1, "k", (CGPDFOperatorCallback)op_k);
  CGPDFOperatorTableSetCallback(a1, "K", (CGPDFOperatorCallback)op_K);
  CGPDFOperatorTableSetCallback(a1, "l", (CGPDFOperatorCallback)op_l);
  CGPDFOperatorTableSetCallback(a1, "m", (CGPDFOperatorCallback)op_m);
  CGPDFOperatorTableSetCallback(a1, "M", (CGPDFOperatorCallback)op_M);
  CGPDFOperatorTableSetCallback(a1, "MP", (CGPDFOperatorCallback)op_MP);
  CGPDFOperatorTableSetCallback(a1, "n", (CGPDFOperatorCallback)op_n);
  CGPDFOperatorTableSetCallback(a1, "q", (CGPDFOperatorCallback)op_q);
  CGPDFOperatorTableSetCallback(a1, "Q", (CGPDFOperatorCallback)op_Q);
  CGPDFOperatorTableSetCallback(a1, "re", (CGPDFOperatorCallback)op_re);
  CGPDFOperatorTableSetCallback(a1, "RG", (CGPDFOperatorCallback)op_RG);
  CGPDFOperatorTableSetCallback(a1, "rg", (CGPDFOperatorCallback)op_rg);
  CGPDFOperatorTableSetCallback(a1, "ri", (CGPDFOperatorCallback)op_ri);
  CGPDFOperatorTableSetCallback(a1, "s", (CGPDFOperatorCallback)op_s);
  CGPDFOperatorTableSetCallback(a1, "S", (CGPDFOperatorCallback)op_S);
  CGPDFOperatorTableSetCallback(a1, "sc", (CGPDFOperatorCallback)op_sc);
  CGPDFOperatorTableSetCallback(a1, "SC", (CGPDFOperatorCallback)op_SC);
  CGPDFOperatorTableSetCallback(a1, "SCN", (CGPDFOperatorCallback)op_SCN);
  CGPDFOperatorTableSetCallback(a1, "scn", (CGPDFOperatorCallback)op_scn);
  CGPDFOperatorTableSetCallback(a1, "sh", (CGPDFOperatorCallback)op_sh);
  CGPDFOperatorTableSetCallback(a1, "Tc", (CGPDFOperatorCallback)op_Tc);
  CGPDFOperatorTableSetCallback(a1, "Td", (CGPDFOperatorCallback)op_Td);
  CGPDFOperatorTableSetCallback(a1, "TD", (CGPDFOperatorCallback)op_TD);
  CGPDFOperatorTableSetCallback(a1, "Tf", (CGPDFOperatorCallback)op_Tf);
  CGPDFOperatorTableSetCallback(a1, "Tj", (CGPDFOperatorCallback)op_Tj);
  CGPDFOperatorTableSetCallback(a1, "TJ", (CGPDFOperatorCallback)op_TJ);
  CGPDFOperatorTableSetCallback(a1, "TL", (CGPDFOperatorCallback)op_TL);
  CGPDFOperatorTableSetCallback(a1, "Tm", (CGPDFOperatorCallback)op_Tm);
  CGPDFOperatorTableSetCallback(a1, "Tr", (CGPDFOperatorCallback)op_Tr);
  CGPDFOperatorTableSetCallback(a1, "T*", (CGPDFOperatorCallback)op_Tstar);
  CGPDFOperatorTableSetCallback(a1, "Ts", (CGPDFOperatorCallback)op_Ts);
  CGPDFOperatorTableSetCallback(a1, "Tw", (CGPDFOperatorCallback)op_Tw);
  CGPDFOperatorTableSetCallback(a1, "Tz", (CGPDFOperatorCallback)op_Tz);
  CGPDFOperatorTableSetCallback(a1, "v", (CGPDFOperatorCallback)op_v);
  CGPDFOperatorTableSetCallback(a1, "W", (CGPDFOperatorCallback)op_W);
  CGPDFOperatorTableSetCallback(a1, "w", (CGPDFOperatorCallback)op_w);
  CGPDFOperatorTableSetCallback(a1, "W*", (CGPDFOperatorCallback)op_Wstar);
  CGPDFOperatorTableSetCallback(a1, "y", (CGPDFOperatorCallback)op_y);
  CGPDFOperatorTableSetCallback(a1, "'", (CGPDFOperatorCallback)op_quo);

  CGPDFOperatorTableSetCallback(a1, "\"", (CGPDFOperatorCallback)op_quoquo);
}

void op_y(CGPDFScanner *a1, uint64_t a2)
{
  CGPDFReal value = 0.0;
  CGPDFReal v7 = 0.0;
  CGFloat v4 = 0.0;
  CGPDFReal v5 = 0.0;
  if (CGPDFScannerPopNumber(a1, &value)
    && CGPDFScannerPopNumber(a1, &v7)
    && CGPDFScannerPopNumber(a1, &v4)
    && CGPDFScannerPopNumber(a1, &v5)
    && !CGPathIsEmpty(*(CGPathRef *)(*(void *)(a2 + 40) + 64)))
  {
    CGPathAddCurveToPoint(*(CGMutablePathRef *)(*(void *)(a2 + 40) + 64), (const CGAffineTransform *)(*(void *)(a2 + 40) + 16), v5, v4, v7, value, v7, value);
  }
}

CGMutablePathRef op_Wstar(uint64_t a1, CGPath *a2)
{
  return CPPDFLazyContextAddShape(a2);
}

BOOL op_w(CGPDFScanner *a1, uint64_t a2)
{
  BOOL result = CGPDFScannerPopNumber(a1, (CGPDFReal *)(*(void *)(a2 + 40) + 296));
  if (result) {
    *(unsigned char *)(*(void *)(a2 + 40) + 9) = 1;
  }
  return result;
}

CGMutablePathRef op_W(uint64_t a1, CGPath *a2)
{
  return CPPDFLazyContextAddShape(a2);
}

void op_v(CGPDFScanner *a1, uint64_t a2)
{
  CGPDFReal value = 0.0;
  CGPDFReal v9 = 0.0;
  double v6 = 0.0;
  CGPDFReal v7 = 0.0;
  if (CGPDFScannerPopNumber(a1, &value)
    && CGPDFScannerPopNumber(a1, &v9)
    && CGPDFScannerPopNumber(a1, &v6)
    && CGPDFScannerPopNumber(a1, &v7)
    && !CGPathIsEmpty(*(CGPathRef *)(*(void *)(a2 + 40) + 64)))
  {
    CGPoint CurrentPoint = CGPathGetCurrentPoint((CGPathRef)*(void *)(*(void *)(a2 + 40) + 64));
    uint64_t v5 = *(void *)(a2 + 40);
    CGPathAddCurveToPoint(*(CGMutablePathRef *)(v5 + 64), 0, CurrentPoint.x, CurrentPoint.y, *(double *)(v5 + 48) + v6 * *(double *)(v5 + 32) + *(double *)(v5 + 16) * v7, *(double *)(v5 + 56) + v6 * *(double *)(v5 + 40) + *(double *)(v5 + 24) * v7, *(double *)(v5 + 48) + *(double *)(v5 + 32) * value + *(double *)(v5 + 16) * v9, *(double *)(v5 + 56) + *(double *)(v5 + 40) * value + *(double *)(v5 + 24) * v9);
  }
}

void op_sh(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (common_op_sh(a1, (double *)a2, &v6, &v5))
    {
      CPPDFContextSaveGState(a2);
      uint64_t v3 = *(void *)(a2 + 40);
      *(void *)(v3 + 376) = v6;
      CGFloat v4 = *(const void **)(v3 + 64);
      if (v4)
      {
        CFRelease(v4);
        uint64_t v3 = *(void *)(a2 + 40);
      }
      *(void *)(v3 + 64) = v5;
      CPPDFLazyContextAddShape((CGMutablePathRef)a2);
      CPPDFContextRestoreGState(a2);
    }
  }
}

CGMutablePathRef op_S(uint64_t a1, CGPath *a2)
{
  if (!*((unsigned char *)a2 + 2336)) {
    return CPPDFLazyContextAddShape(a2);
  }
  return result;
}

void op_s(uint64_t a1, CGPath *a2)
{
  if (!*((unsigned char *)a2 + 2336))
  {
    op_h(a1, (uint64_t)a2);
    if (!*((unsigned char *)a2 + 2336))
    {
      CPPDFLazyContextAddShape(a2);
    }
  }
}

void op_h(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336) && !CGPathIsEmpty(*(CGPathRef *)(*(void *)(a2 + 40) + 64)))
  {
    uint64_t v3 = *(CGPath **)(*(void *)(a2 + 40) + 64);
    CGPathCloseSubpath(v3);
  }
}

CGPDFScanner *op_ri(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336)) {
    return (CGPDFScanner *)common_op_ri(a1, a2);
  }
  return a1;
}

void op_rg(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
    CGColorRef v5 = common_PopRGBAlphaCGColorCreate(a1, DeviceRGB);
    uint64_t v6 = *(void *)(a2 + 40);
    CGPDFReal v7 = *(const void **)(v6 + 256);
    if (v7)
    {
      CFRelease(v7);
      uint64_t v6 = *(void *)(a2 + 40);
    }
    *(void *)(v6 + 256) = v5;
    uint64_t v8 = *(CGColorSpace **)(v6 + 264);
    if (v8)
    {
      CGColorSpaceRelease(v8);
      uint64_t v6 = *(void *)(a2 + 40);
    }
    *(void *)(v6 + 264) = DeviceRGB;
    *(unsigned char *)(v6 + 9) = 1;
  }
}

void op_RG(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
    CGColorRef v5 = common_PopRGBAlphaCGColorCreate(a1, DeviceRGB);
    uint64_t v6 = *(void *)(a2 + 40);
    CGPDFReal v7 = *(const void **)(v6 + 272);
    if (v7)
    {
      CFRelease(v7);
      uint64_t v6 = *(void *)(a2 + 40);
    }
    *(void *)(v6 + 272) = v5;
    uint64_t v8 = *(CGColorSpace **)(v6 + 280);
    if (v8)
    {
      CGColorSpaceRelease(v8);
      uint64_t v6 = *(void *)(a2 + 40);
    }
    *(void *)(v6 + 280) = DeviceRGB;
    *(unsigned char *)(v6 + 9) = 1;
  }
}

void op_re(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    memset(&v3, 0, sizeof(v3));
    if (common_ReadCGRect(a1, &v3.origin.x)) {
      CGPathAddRect(*(CGMutablePathRef *)(*(void *)(a2 + 40) + 64), (const CGAffineTransform *)(*(void *)(a2 + 40) + 16), v3);
    }
  }
}

void op_Q(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336)) {
    CPPDFContextRestoreGState(a2);
  }
}

void op_q(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336)) {
    CPPDFContextSaveGState(a2);
  }
}

CGPDFScanner *op_MP(CGPDFScanner *result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGPDFReal value = 0;
    return (CGPDFScanner *)CGPDFScannerPopName(result, (const char **)&value);
  }
  return result;
}

BOOL op_M(BOOL result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGMutablePathRef result = CGPDFScannerPopNumber((CGPDFScannerRef)result, (CGPDFReal *)(*(void *)(a2 + 40) + 288));
    if (result) {
      *(unsigned char *)(*(void *)(a2 + 40) + 9) = 1;
    }
  }
  return result;
}

void op_m(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGFloat y = 0.0;
    CGPDFReal value = 0.0;
    if (!CGPDFScannerPopNumber(a1, &y)) {
      CGFloat y = 0.0;
    }
    if (CGPDFScannerPopNumber(a1, &value))
    {
      CGFloat v4 = value;
    }
    else
    {
      CGPDFReal value = 0.0;
      CGFloat v4 = 0.0;
    }
    CGPathMoveToPoint(*(CGMutablePathRef *)(*(void *)(a2 + 40) + 64), (const CGAffineTransform *)(*(void *)(a2 + 40) + 16), v4, y);
  }
}

void op_l(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGFloat v4 = 0.0;
    CGPDFReal value = 0.0;
    if (!CGPDFScannerPopNumber(a1, &v4)) {
      CGFloat v4 = 0.0;
    }
    if (!CGPDFScannerPopNumber(a1, &value)) {
      CGPDFReal value = 0.0;
    }
    if (!CGPathIsEmpty(*(CGPathRef *)(*(void *)(a2 + 40) + 64))) {
      CGPathAddLineToPoint(*(CGMutablePathRef *)(*(void *)(a2 + 40) + 64), (const CGAffineTransform *)(*(void *)(a2 + 40) + 16), value, v4);
    }
  }
}

void op_K(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGColorSpaceRef DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
    CGColorRef v5 = common_PopCMYKAlphaCGColorCreate(a1, DeviceCMYK);
    uint64_t v6 = *(void *)(a2 + 40);
    CGPDFReal v7 = *(const void **)(v6 + 272);
    if (v7)
    {
      CFRelease(v7);
      uint64_t v6 = *(void *)(a2 + 40);
    }
    *(void *)(v6 + 272) = v5;
    uint64_t v8 = *(CGColorSpace **)(v6 + 280);
    if (v8)
    {
      CGColorSpaceRelease(v8);
      uint64_t v6 = *(void *)(a2 + 40);
    }
    *(void *)(v6 + 280) = DeviceCMYK;
    *(unsigned char *)(v6 + 9) = 1;
  }
}

void op_k(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGColorSpaceRef DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
    CGColorRef v5 = common_PopCMYKAlphaCGColorCreate(a1, DeviceCMYK);
    uint64_t v6 = *(void *)(a2 + 40);
    CGPDFReal v7 = *(const void **)(v6 + 256);
    if (v7)
    {
      CFRelease(v7);
      uint64_t v6 = *(void *)(a2 + 40);
    }
    *(void *)(v6 + 256) = v5;
    uint64_t v8 = *(CGColorSpace **)(v6 + 264);
    if (v8)
    {
      CGColorSpaceRelease(v8);
      uint64_t v6 = *(void *)(a2 + 40);
    }
    *(void *)(v6 + 264) = DeviceCMYK;
    *(unsigned char *)(v6 + 9) = 1;
  }
}

BOOL op_J(BOOL result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGPDFInteger value = 0;
    CGMutablePathRef result = CGPDFScannerPopInteger((CGPDFScannerRef)result, &value);
    if (result)
    {
      uint64_t v3 = *(void *)(a2 + 40);
      *(unsigned char *)(v3 + 304) = value;
      *(unsigned char *)(v3 + 9) = 1;
    }
  }
  return result;
}

BOOL op_j(BOOL result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGPDFInteger value = 0;
    CGMutablePathRef result = CGPDFScannerPopInteger((CGPDFScannerRef)result, &value);
    if (result)
    {
      uint64_t v3 = *(void *)(a2 + 40);
      *(unsigned char *)(v3 + 305) = value;
      *(unsigned char *)(v3 + 9) = 1;
    }
  }
  return result;
}

CGPDFReal op_i(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGPDFReal value = 0.0;
    if (CGPDFScannerPopNumber(a1, &value))
    {
      CGPDFReal result = value;
      uint64_t v4 = *(void *)(a2 + 40);
      *(CGPDFReal *)(v4 + 312) = value;
      *(unsigned char *)(v4 + 9) = 1;
    }
  }
  return result;
}

CGPDFScanner *op_gs(CGPDFScanner *result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    uint64_t v3 = result;
    CGPDFReal value = 0;
    CGPDFReal result = (CGPDFScanner *)CGPDFScannerPopName(result, (const char **)&value);
    if (result)
    {
      CGPDFReal result = common_GetResourceDictionary(*((CGPDFObjectRef *)v3 + 7), "ExtGState", value);
      if (result)
      {
        uint64_t v4 = result;
        CGPDFReal result = (CGPDFScanner *)common_op_gs(a2, result);
        if (result)
        {
          CGPDFDictionaryRef v6 = 0;
          CGPDFReal result = (CGPDFScanner *)CGPDFDictionaryGetDictionary(v4, "SMask", &v6);
          uint64_t v5 = *(void *)(a2 + 40);
          if (result) {
            *(void *)(v5 + 368) = v6;
          }
          *(unsigned char *)(v5 + 9) = 1;
        }
      }
    }
  }
  return result;
}

void op_G(CGPDFScanner *a1, uint64_t a2)
{
  CGPDFBoolean value[2] = *(CGPDFReal *)MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 2336))
  {
    value[1] = 1.0;
    if (CGPDFScannerPopNumber(a1, value))
    {
      DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
      CGColorRef v4 = CGColorCreate(DeviceGray, value);
      uint64_t v5 = *(void *)(a2 + 40);
      CGPDFDictionaryRef v6 = *(CGColorSpace **)(v5 + 280);
      if (v6)
      {
        CGColorSpaceRelease(v6);
        uint64_t v5 = *(void *)(a2 + 40);
      }
      *(void *)(v5 + 280) = DeviceGray;
      CGPDFReal v7 = *(const void **)(v5 + 272);
      if (v7)
      {
        CFRelease(v7);
        uint64_t v5 = *(void *)(a2 + 40);
      }
      *(void *)(v5 + 272) = v4;
      *(unsigned char *)(v5 + 9) = 1;
    }
  }
}

void op_g(CGPDFScanner *a1, uint64_t a2)
{
  CGPDFBoolean value[2] = *(CGPDFReal *)MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 2336))
  {
    value[1] = 1.0;
    if (CGPDFScannerPopNumber(a1, value))
    {
      DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
      CGColorRef v4 = CGColorCreate(DeviceGray, value);
      uint64_t v5 = *(void *)(a2 + 40);
      CGPDFDictionaryRef v6 = *(CGColorSpace **)(v5 + 264);
      if (v6)
      {
        CGColorSpaceRelease(v6);
        uint64_t v5 = *(void *)(a2 + 40);
      }
      *(void *)(v5 + 264) = DeviceGray;
      CGPDFReal v7 = *(const void **)(v5 + 256);
      if (v7)
      {
        CFRelease(v7);
        uint64_t v5 = *(void *)(a2 + 40);
      }
      *(void *)(v5 + 256) = v4;
      *(unsigned char *)(v5 + 9) = 1;
    }
  }
}

CGMutablePathRef op_fstar(uint64_t a1, CGPath *a2)
{
  if (!*((unsigned char *)a2 + 2336)) {
    return CPPDFLazyContextAddShape(a2);
  }
  return result;
}

CGMutablePathRef op_f(uint64_t a1, CGPath *a2)
{
  if (!*((unsigned char *)a2 + 2336)) {
    return CPPDFLazyContextAddShape(a2);
  }
  return result;
}

void op_DP(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGPDFReal value = 0;
    int v2 = *((_DWORD *)a1 + 18);
    if (v2 <= 0)
    {
      pdf_error("stack underflow.");
    }
    else
    {
      *((_DWORD *)a1 + 18) = v2 - 1;
      CGPDFScannerPopName(a1, (const char **)&value);
    }
  }
}

void op_Do(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGPDFReal v9 = 0;
    CGPDFReal v7 = 0;
    CGPDFDictionaryRef dict = 0;
    if (common_op_Do(a1, &v9, &dict, (uint64_t)&v7))
    {
      uint64_t v3 = v9;
      if (!strcmp(v9, "Image"))
      {
        CGPDFReal v5 = 0.0;
        CGPDFReal value = 0.0;
        CGColorRef v4 = dict;
        CGPDFDictionaryGetNumber(dict, "Width", &value);
        CGPDFDictionaryGetNumber(v4, "Height", &v5);
      }
      else if (!strcmp(v3, "Form"))
      {
        DoPdfForm(a2, v7, 1);
      }
    }
  }
}

double op_cm(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGAffineTransform v5 = CGAffineTransformIdentity;
    if (common_ReadCGAffineTransform(a1, &v5.a))
    {
      CGAffineTransform v4 = v5;
      return CPPDFContextConcatCTM(*(double **)(a2 + 40), &v4.a);
    }
  }
  return result;
}

void op_c(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2336))
  {
    CGFloat v8 = 0.0;
    CGFloat v6 = 0.0;
    CGFloat v7 = 0.0;
    CGFloat v4 = 0.0;
    CGFloat v5 = 0.0;
    CGFloat y = 0.0;
    if (common_ReadCGPathCurve(a1, &v8, &v7, &v6, &v5, &v4, &y)
      && !CGPathIsEmpty(*(CGPathRef *)(*(void *)(a2 + 40) + 64)))
    {
      CGPathAddCurveToPoint(*(CGMutablePathRef *)(*(void *)(a2 + 40) + 64), (const CGAffineTransform *)(*(void *)(a2 + 40) + 16), v8, v7, v6, v5, v4, y);
    }
  }
}

CGMutablePathRef op_Bstar(uint64_t a1, CGPath *a2)
{
  if (!*((unsigned char *)a2 + 2336)) {
    return CPPDFLazyContextAddShape(a2);
  }
  return result;
}

void op_bstar(uint64_t a1, CGPath *a2)
{
  if (!*((unsigned char *)a2 + 2336))
  {
    op_h(a1, (uint64_t)a2);
    if (!*((unsigned char *)a2 + 2336))
    {
      CPPDFLazyContextAddShape(a2);
    }
  }
}

CGMutablePathRef op_B(uint64_t a1, CGPath *a2)
{
  if (!*((unsigned char *)a2 + 2336)) {
    return CPPDFLazyContextAddShape(a2);
  }
  return result;
}

void op_b(uint64_t a1, CGPath *a2)
{
  if (!*((unsigned char *)a2 + 2336))
  {
    op_h(a1, (uint64_t)a2);
    if (!*((unsigned char *)a2 + 2336))
    {
      CPPDFLazyContextAddShape(a2);
    }
  }
}

uint64_t CGSRegionGetShape(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t CGSGetRegionData(void *a1, void *a2, _DWORD *a3)
{
  if (!a2)
  {
    uint64_t result = 1001;
    if (!a3) {
      return result;
    }
    LODWORD(v8) = 0;
    goto LABEL_11;
  }
  *a2 = 0;
  if (!a3) {
    return 1001;
  }
  *a3 = 0;
  if (!region_check(a1)) {
    return 1001;
  }
  CGFloat v6 = (_DWORD *)a1[2];
  int v7 = shape_length((uint64_t)v6);
  *a2 = v6;
  if (!v7) {
    return 1001;
  }
  unint64_t v8 = 4 * v7;
  if (!(v8 >> 31) && shape_data_valid(v6, v8))
  {
    uint64_t result = 0;
LABEL_11:
    *a3 = v8;
    return result;
  }
  return 1007;
}

unint64_t CGSGetRegionRectCount(void *a1)
{
  unint64_t result = (unint64_t)region_check(a1);
  if (result)
  {
    uint64_t v3 = (_DWORD *)(a1[2] + 4 * *(int *)(a1[2] + 4));
    if (*v3 == 0x7FFFFFFF) {
      return 0;
    }
    uint64_t v4 = (int)v3[1];
    CGFloat v5 = &v3[v4];
    if (*v5 == 0x7FFFFFFF)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = 0;
      do
      {
        unint64_t result = (result + (int)v4 / 2 - 1);
        uint64_t v4 = (int)v5[1];
        v5 += v4;
      }
      while (*v5 != 0x7FFFFFFF);
    }
  }
  return result;
}

uint64_t CGSNewRegionWithData(_DWORD *a1, unsigned int a2, void *a3)
{
  *a3 = 0;
  uint64_t result = 1001;
  if (a1 && a2)
  {
    unint64_t v6 = a2;
    BOOL v7 = shape_data_valid(a1, a2);
    if (v7)
    {
      unint64_t v8 = shape_alloc_data(v7, (uint64_t)a1, v6);
      __int16 v16 = region_create_with_shape(v8, v9, v10, v11, v12, v13, v14, v15);
      uint64_t result = 0;
      *a3 = v16;
    }
    else
    {
      return 1007;
    }
  }
  return result;
}

void *CGSCreateRegionFromData(_DWORD *a1, unsigned int a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v3 = a2;
  BOOL v4 = shape_data_valid(a1, a2);
  if (!v4) {
    return 0;
  }
  CGFloat v5 = shape_alloc_data(v4, (uint64_t)a1, v3);

  return region_create_with_shape(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t CGSRegionFromBitmap(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11, void *a12)
{
  uint64_t v13 = 0;
  uint64_t v14 = a12;
  if (a3 + a2 <= a1)
  {
    unsigned int v15 = a8;
    if (((a9 | a8) & 0x80000000) == 0)
    {
      if (a9) {
        BOOL v16 = a8 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16 || a10 == 0)
      {
        uint64_t v13 = (int *)&the_empty_shape;
      }
      else
      {
        int v18 = a7;
        int v19 = a6;
        unint64_t v23 = a2;
        int v84 = a1;
        uint64_t v13 = (int *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
        if (v13)
        {
          CFStringRef v24 = v13;
          *(void *)uint64_t v13 = 0x280000000;
          uint64_t v25 = (char *)(v13 + 2);
          if (a3 >= 0x20) {
            int v26 = 32;
          }
          else {
            int v26 = a3;
          }
          if (a3 > 0x20) {
            unint64_t v27 = -1;
          }
          else {
            unint64_t v27 = ~(-1 << a3);
          }
          if (a4 <= a5) {
            unint64_t v28 = a5;
          }
          else {
            unint64_t v28 = a4;
          }
          if (a4 >= a5) {
            unint64_t v29 = a5;
          }
          else {
            unint64_t v29 = a4;
          }
          if (v29 > v27) {
            unint64_t v29 = -1;
          }
          if (v28 > v27) {
            unint64_t v28 = -1;
          }
          if (a9 < 0)
          {
            a2 = 512;
LABEL_98:
            *(_DWORD *)uint64_t v25 = 0x7FFFFFFF;
            uint64_t v13 = final_check(v24, a2, ((v25 - (char *)v24) >> 2) + 1);
          }
          else
          {
            unint64_t v30 = v29 & v27;
            unint64_t v31 = v28 & v27;
            CFNumberRef v32 = v13 + 1;
            unint64_t v75 = v23 >> 3;
            uint64_t v76 = v15;
            int v74 = 8 - (v23 & 7);
            int v33 = -v26;
            a2 = 512;
            int v34 = v84;
            int v35 = a9;
            uint64_t v36 = a10;
            unint64_t v82 = v27;
            int v83 = v26;
            unint64_t v80 = v28 & v27;
            unint64_t v81 = v30;
            int v73 = v19;
            while (1)
            {
              *((_DWORD *)v25 + 1) = 2;
              CFArrayRef v37 = v25 + 4;
              *(_DWORD *)uint64_t v25 = v18;
              v25 += 8;
              int v78 = v35;
              if (v35) {
                break;
              }
LABEL_86:
              int v68 = ((unint64_t)(v25 - v37) >> 2) + 1;
              *(_DWORD *)CFArrayRef v37 = v68;
              if (v32 && v68 == *v32)
              {
                if (((unint64_t)(v25 - v37) >> 2) != 1)
                {
                  uint64_t v69 = 1;
                  while (&v37[v69 * 4] != v25)
                  {
                    int v70 = v32[v69];
                    int v71 = *(_DWORD *)&v37[v69 * 4];
                    ++v69;
                    if (v70 != v71) {
                      goto LABEL_93;
                    }
                  }
                }
                uint64_t v25 = v37 - 4;
              }
              else
              {
LABEL_93:
                CFNumberRef v32 = v37;
              }
              int v35 = v78 - 1;
              ++v18;
              if (v78 <= 0) {
                goto LABEL_98;
              }
            }
            if (((v25 - (char *)v24) >> 2) + 4 > a2)
            {
              uint64_t v38 = 2 * a2;
              CFNumberRef v39 = v32;
              CFNumberRef v40 = v37;
              CFNumberRef v41 = (int *)malloc_type_realloc(v24, (8 * a2 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
              unint64_t v31 = v80;
              unint64_t v30 = v81;
              unint64_t v27 = v82;
              int v26 = v83;
              int v34 = v84;
              if (v41 == v24)
              {
                CFArrayRef v37 = v40;
              }
              else
              {
                v25 += (char *)v41 - (char *)v24;
                CFArrayRef v37 = &v40[(char *)v41 - (char *)v24];
              }
              if (v41 == v24) {
                CFNumberRef v32 = v39;
              }
              else {
                CFNumberRef v32 = (_DWORD *)((char *)v39 + (char *)v41 - (char *)v24);
              }
              if (v41 != v24) {
                CFStringRef v24 = v41;
              }
              a2 = v38;
            }
            if (v24)
            {
              int v77 = v18;
              int v42 = 0;
              uint64_t v79 = v36;
              uint64_t v43 = v76;
              CFNumberRef v44 = (unsigned __int8 *)(v36 + v75);
              unint64_t v45 = *v44;
              int v46 = v19;
              int v47 = v74;
              while (1)
              {
                char v48 = v47 - v26;
                if (v47 - v26 < 0)
                {
                  unsigned int v49 = -v47 >> 3;
                  unsigned int v50 = -v47 & 0xFFFFFFF8;
                  BOOL v51 = v47 < -7;
                  if (v47 >= -7) {
                    unsigned int v50 = 0;
                  }
                  v47 += v50;
                  if (v51) {
                    uint64_t v52 = v49;
                  }
                  else {
                    uint64_t v52 = 0;
                  }
                  v44 += v52;
                  do
                  {
                    unsigned int v53 = *++v44;
                    v47 += 8;
                    unint64_t v45 = v53 | (v45 << 8);
                  }
                  while (v33 + v47 < 0);
                  char v48 = v33 + v47;
                }
                unint64_t v54 = (v45 >> v48) & v27;
                BOOL v55 = v54 < v30 || v54 > v31;
                int v56 = !v55;
                *(_DWORD *)uint64_t v25 = v46;
                if (v42 != v56)
                {
                  v25 += 4;
                  if (((v25 - (char *)v24) >> 2) + 4 > a2)
                  {
                    uint64_t v85 = 2 * a2;
                    unsigned int v86 = v25;
                    int8x8_t v57 = v24;
                    long long v58 = v24;
                    long long v59 = v32;
                    uint8x8_t v60 = v37;
                    int8x8_t v61 = (int *)malloc_type_realloc(v57, (8 * a2 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
                    CFNumberRef v32 = v59;
                    CFStringRef v24 = v58;
                    a2 = v85;
                    uint64_t v25 = v86;
                    unint64_t v31 = v80;
                    unint64_t v30 = v81;
                    unint64_t v27 = v82;
                    int v26 = v83;
                    int v34 = v84;
                    uint16x8_t v62 = (_DWORD *)((char *)v32 + (char *)v61 - (char *)v24);
                    if (!v32) {
                      uint16x8_t v62 = 0;
                    }
                    if (v61 == v24)
                    {
                      CFArrayRef v37 = v60;
                    }
                    else
                    {
                      uint64_t v25 = &v86[(char *)v61 - (char *)v24];
                      CFArrayRef v37 = &v60[(char *)v61 - (char *)v24];
                    }
                    if (v61 != v24)
                    {
                      CFNumberRef v32 = v62;
                      CFStringRef v24 = v61;
                    }
                  }
                  if (!v24) {
                    break;
                  }
                }
                v47 -= v34;
                ++v46;
                int v42 = v56;
                if (!--v43)
                {
                  uint64_t v36 = v79 + a11;
                  if (!v56)
                  {
                    int v18 = v77;
                    int v19 = v73;
                    goto LABEL_86;
                  }
                  *(_DWORD *)uint64_t v25 = v46;
                  v25 += 4;
                  if (((v25 - (char *)v24) >> 2) + 4 > a2)
                  {
                    uint64_t v63 = 2 * a2;
                    int8x8_t v64 = v32;
                    uint16x8_t v65 = v37;
                    uint16x8_t v66 = (int *)malloc_type_realloc(v24, (8 * a2 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
                    unint64_t v31 = v80;
                    unint64_t v30 = v81;
                    unint64_t v27 = v82;
                    int v26 = v83;
                    int v34 = v84;
                    uint16x8_t v67 = (_DWORD *)((char *)v64 + (char *)v66 - (char *)v24);
                    if (!v64) {
                      uint16x8_t v67 = 0;
                    }
                    if (v66 == v24)
                    {
                      CFArrayRef v37 = v65;
                    }
                    else
                    {
                      v25 += (char *)v66 - (char *)v24;
                      CFArrayRef v37 = &v65[(char *)v66 - (char *)v24];
                    }
                    if (v66 == v24) {
                      CFNumberRef v32 = v64;
                    }
                    else {
                      CFNumberRef v32 = v67;
                    }
                    if (v66 != v24) {
                      CFStringRef v24 = v66;
                    }
                    a2 = v63;
                  }
                  int v18 = v77;
                  int v19 = v73;
                  if (v24) {
                    goto LABEL_86;
                  }
                  break;
                }
              }
            }
            uint64_t v13 = 0;
          }
          uint64_t v14 = a12;
        }
      }
    }
  }
  void *v14 = region_create_with_shape(v13, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

CFTypeRef CGSRegionMergeFlushAndMoveRegions(unint64_t cf, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, void *a10, int *a11, int *a12)
{
  int v12 = a8;
  int v13 = a7;
  if (cf | a2)
  {
    UnionWithRegiouint64_t n = (void *)cf;
    if (!a2)
    {
      if (cf)
      {
        UnionWithRegiouint64_t n = CFRetain((CFTypeRef)cf);
        if (a6) {
          goto LABEL_19;
        }
        goto LABEL_27;
      }
      goto LABEL_18;
    }
    __int16 v17 = CGRegionCreateWithOffset((void *)a2, (double)(int)a3, (double)(int)a4, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    int v18 = v17;
    if (UnionWithRegion)
    {
      UnionWithRegiouint64_t n = CGRegionCreateUnionWithRegion(UnionWithRegion, v17);
      if (!v18)
      {
LABEL_18:
        if (a6) {
          goto LABEL_19;
        }
        goto LABEL_27;
      }
    }
    else
    {
      if (!v17)
      {
        UnionWithRegiouint64_t n = 0;
        if (a6)
        {
LABEL_19:
          long long v21 = CGRegionCreateWithOffset(a6, (double)v13, (double)v12, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
          uint64_t v22 = CGRegionCreateUnionWithRegion(v21, UnionWithRegion);
          if (v21) {
            CFRelease(v21);
          }
          if (UnionWithRegion) {
            CFRelease(UnionWithRegion);
          }
          if (a5) {
            goto LABEL_24;
          }
          goto LABEL_28;
        }
LABEL_27:
        uint64_t v22 = UnionWithRegion;
        if (a5)
        {
LABEL_24:
          unint64_t v23 = CGRegionCreateUnionWithRegion(a5, v22);
          if (v22) {
            CFRelease(v22);
          }
          goto LABEL_29;
        }
LABEL_28:
        unint64_t v23 = v22;
LABEL_29:
        CFTypeRef result = 0;
        int v13 = 0;
        int v12 = 0;
        *a9 = v23;
        goto LABEL_30;
      }
      UnionWithRegiouint64_t n = CFRetain(v17);
    }
    CFRelease(v18);
    goto LABEL_18;
  }
  if (a5) {
    CFTypeRef v19 = CFRetain(a5);
  }
  else {
    CFTypeRef v19 = 0;
  }
  *a9 = v19;
  if (a6) {
    CFTypeRef result = CFRetain(a6);
  }
  else {
    CFTypeRef result = 0;
  }
LABEL_30:
  *a10 = result;
  *a11 = v13;
  *a12 = v12;
  return result;
}

uint64_t sortTopDescending(void *a1, void *a2)
{
  [a1 normalizedBounds];
  double v7 = v4;
  double v8 = v6;
  if (v5 < 0.0 || v6 < 0.0)
  {
    *(CGRect *)&double v3 = CGRectStandardize(*(CGRect *)&v3);
    double v7 = v9;
    double v8 = v10;
  }
  objc_msgSend(a2, "normalizedBounds", v3);
  if (v13 < 0.0 || v14 < 0.0) {
    *(CGRect *)(&v12 - 1) = CGRectStandardize(*(CGRect *)&v11);
  }
  double v15 = v12 + v14;
  if (v7 + v8 > v15) {
    return -1;
  }
  else {
    return v7 + v8 < v15;
  }
}

BOOL sizeChange(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(*(void *)(a1 + 160) + 72);
  double v3 = *(double *)(*(void *)(a2 + 160) + 72);
  return v2 > v3 + v3 || v3 > v2 + v2;
}

BOOL fits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 16)) {
    double v5 = fmax(*(double *)(a2 + 144) * 0.3, 1.0);
  }
  else {
    double v5 = *(double *)(a3 + 8);
  }
  double v6 = *(double *)(a2 + 96);
  double v7 = *(double *)(a1 + 96);
  if (v6 >= v7)
  {
    double v8 = v7 + *(double *)(a1 + 144) - v6;
  }
  else
  {
    double v5 = *(double *)a3;
    double v8 = v6 + *(double *)(a2 + 144) - v7;
  }
  if (v8 >= v5)
  {
    int v22 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a2 + 68);
    if (v22 < 0) {
      int v22 = *(_DWORD *)(a2 + 68) - *(_DWORD *)(a1 + 68);
    }
    return v22 == 1;
  }
  else
  {
    double v9 = *(double *)(a2 + 120);
    double v10 = *(double *)(a2 + 128);
    double v11 = *(double *)(a2 + 136);
    BOOL v12 = v11 < 0.0 || v10 < 0.0;
    double y = *(double *)(a2 + 120);
    double height = *(double *)(a2 + 136);
    if (v12)
    {
      CGRect v25 = CGRectStandardize(*(CGRect *)(a2 + 112));
      double y = v25.origin.y;
      double height = v25.size.height;
    }
    CGFloat rect = v10;
    double v15 = *(double *)(a1 + 120);
    double v16 = *(double *)(a1 + 128);
    double v17 = *(double *)(a1 + 136);
    BOOL v18 = v17 < 0.0 || v16 < 0.0;
    double v19 = *(double *)(a1 + 120);
    if (v18)
    {
      CGRect v26 = CGRectStandardize(*(CGRect *)(a1 + 112));
      double v19 = v26.origin.y;
    }
    double v20 = y + height;
    if (v12)
    {
      v27.origin.CGPDFReal x = *(CGFloat *)(a2 + 112);
      v27.origin.double y = v9;
      v27.size.double width = rect;
      v27.size.double height = v11;
      CGRect v28 = CGRectStandardize(v27);
      double v9 = v28.origin.y;
    }
    if (v19 <= v20)
    {
      if (v18)
      {
        v29.origin.CGPDFReal x = *(CGFloat *)(a1 + 112);
        v29.origin.double y = v15;
        v29.size.double width = v16;
        v29.size.double height = v17;
        CGRect v30 = CGRectStandardize(v29);
        double v15 = v30.origin.y;
        double v17 = v30.size.height;
      }
      double v21 = v9 - v20;
      if (v9 <= v15 + v17) {
        double v21 = 0.0;
      }
    }
    else
    {
      double v21 = v19 - v20;
    }
    return v21 <= 0.0;
  }
}

int *resample_byte_h_Ncpp(int *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = a3;
    uint64_t v10 = *a6;
    uint64_t v11 = a3;
    uint64_t v12 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        uint64_t v13 = v10 + *a7 * (uint64_t)(int)v8;
        double v14 = *(int **)(a5 + 8 * v8);
        int v15 = a4;
        double v16 = result;
        do
        {
          if (v9)
          {
            uint64_t v17 = 0;
            int v18 = v16[1];
            uint64_t v19 = v13 + *v16 * (uint64_t)v9;
            do
            {
              if (v18)
              {
                double v20 = (unsigned __int8 *)(v19 + v17);
                int v21 = 0x2000;
                int v22 = (__int16 *)(v16 + 2);
                int v23 = v18;
                do
                {
                  int v24 = *v22++;
                  v21 += *v20 * v24;
                  v20 += v11;
                  --v23;
                }
                while (v23);
              }
              else
              {
                int v21 = 0x2000;
              }
              int v25 = v21 >> 14;
              if (v25 >= 255) {
                int v25 = 255;
              }
              *v14++ = v25 & ~(v25 >> 31);
              ++v17;
            }
            while (v17 != v11);
          }
          double v16 = (int *)((char *)v16 + v12);
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

int *resample_byte_h_3cpp_ap(int *result, unsigned int a2, double a3, double a4, double a5, int32x4_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t *a10, int *a11, int a12)
{
  if (a12 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a10;
    uint64_t v14 = a10[1];
    uint64_t v15 = 2 * a2 + 8;
    uint64_t v16 = a12;
    v17.i64[0] = 0xFF000000FFLL;
    v17.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a8)
      {
        uint64_t v18 = v13 + *a11 * (uint64_t)(int)v12;
        uint64_t v19 = *(int32x4_t **)(a9 + 8 * v12);
        uint64_t v20 = v14 + a11[1] * (uint64_t)(int)v12 + 1;
        int v21 = a8;
        int v22 = result;
        do
        {
          int v23 = v22[1];
          if (v23)
          {
            int v24 = (const __int16 *)(v22 + 2);
            uint64_t v25 = *v22;
            uint64_t v26 = v25 + v20;
            CGRect v27 = (unsigned __int8 *)(v18 + 3 * v25);
            CGRect v28 = (unsigned __int8 *)(v26 - 1);
            v29.i64[0] = 0x200000002000;
            v29.i64[1] = 0x200000002000;
            do
            {
              a6.i8[0] = *v27;
              a6.i8[4] = v27[1];
              unsigned __int16 v30 = *v28++;
              a6.i16[1] = a6.i16[2];
              a6.i8[4] = v27[2];
              a6.i16[3] = v30;
              int16x4_t v31 = vld1_dup_s16(v24++);
              a6 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)a6.i8), (int8x16_t)v17);
              int32x4_t v29 = vmlaq_s32(v29, vmovl_s16(v31), a6);
              v27 += 3;
              --v23;
            }
            while (v23);
          }
          else
          {
            v29.i64[0] = 0x200000002000;
            v29.i64[1] = 0x200000002000;
          }
          *v19++ = vmaxq_s32(vminq_s32(vshrq_n_s32(v29, 0xEuLL), v17), (int32x4_t)0);
          int v22 = (int *)((char *)v22 + v15);
          --v21;
        }
        while (v21);
      }
      ++v12;
    }
    while (v12 != v16);
  }
  return result;
}

int *resample_byte_h_4cpp(int *result, unsigned int a2, double a3, double a4, double a5, uint8x8_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t *a10, int *a11, int a12)
{
  if (a12 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a10;
    uint64_t v14 = 2 * a2 + 8;
    v15.i64[0] = 0xFF000000FFLL;
    v15.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a8)
      {
        uint64_t v16 = v13 + *a11 * (uint64_t)(int)v12;
        int32x4_t v17 = *(int32x4_t **)(a9 + 8 * v12);
        int v18 = a8;
        uint64_t v19 = result;
        do
        {
          int v20 = v19[1];
          if (v20)
          {
            int v21 = (const __int16 *)(v19 + 2);
            int v22 = (__int32 *)(v16 + 4 * *v19);
            v23.i64[0] = 0x200000002000;
            v23.i64[1] = 0x200000002000;
            do
            {
              __int32 v24 = *v22++;
              a6.i32[0] = v24;
              a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
              int16x4_t v25 = vld1_dup_s16(v21++);
              int32x4_t v23 = vmlal_s16(v23, v25, (int16x4_t)a6);
              --v20;
            }
            while (v20);
          }
          else
          {
            v23.i64[0] = 0x200000002000;
            v23.i64[1] = 0x200000002000;
          }
          *v17++ = vmaxq_s32(vminq_s32(vshrq_n_s32(v23, 0xEuLL), v15), (int32x4_t)0);
          uint64_t v19 = (int *)((char *)v19 + v14);
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != a12);
  }
  return result;
}

int *resample_byte_h_3cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        uint64_t v11 = *(int32x2_t **)(a5 + 8 * v8);
        uint64_t v12 = v9 + *a7 * (uint64_t)(int)v8 + 2;
        int v13 = a4;
        uint64_t v14 = result;
        do
        {
          int v15 = v14[1];
          if (v15)
          {
            uint64_t v16 = (__int16 *)(v14 + 2);
            int32x4_t v17 = (unsigned __int8 *)(v12 + 3 * *v14);
            int32x2_t v18 = (int32x2_t)0x200000002000;
            int v19 = 0x2000;
            do
            {
              unsigned int v20 = *v16++;
              v21.i32[0] = *(v17 - 2);
              v21.i32[1] = *(v17 - 1);
              int32x2_t v18 = vmla_s32(v18, vdup_n_s32(v20), v21);
              v19 += *v17 * v20;
              v17 += 3;
              --v15;
            }
            while (v15);
          }
          else
          {
            int32x2_t v18 = (int32x2_t)0x200000002000;
            int v19 = 0x2000;
          }
          int32x2_t v22 = vshr_n_s32(v18, 0xEuLL);
          int v23 = v19 >> 14;
          if (v19 >> 14 >= 255) {
            int v23 = 255;
          }
          int32x2_t *v11 = vmax_s32(vmin_s32(v22, (int32x2_t)0xFF000000FFLL), 0);
          v11[1].i32[0] = v23 & ~(v23 >> 31);
          uint64_t v11 = (int32x2_t *)((char *)v11 + 12);
          uint64_t v14 = (int *)((char *)v14 + v10);
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

int *resample_byte_h_1cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = 2 * a2 + 8;
    uint64_t v11 = a8;
    do
    {
      if (a4)
      {
        uint64_t v12 = v9 + *a7 * (uint64_t)(int)v8;
        int v13 = *(int **)(a5 + 8 * v8);
        int v14 = a4;
        int v15 = result;
        do
        {
          int v16 = v15[1];
          int32x2_t v18 = v15 + 2;
          int v17 = *((__int16 *)v15 + 4);
          uint64_t v19 = *v15 + v12 - 1;
          int v20 = 0x2000;
          if (v16 >= 4)
          {
            int v21 = *((__int16 *)v15 + 4);
            unsigned int v22 = v15[1];
            do
            {
              int v24 = *(unsigned __int8 *)(v19 + 4);
              v19 += 4;
              int v23 = v24;
              int v16 = v22 - 4;
              int v25 = *((__int16 *)v18 + 4);
              v18 += 2;
              int v17 = v25;
              v20 += v21 * *(unsigned __int8 *)(v19 - 3)
                   + *(unsigned __int8 *)(v19 - 2) * *((__int16 *)v18 - 3)
                   + *(unsigned __int8 *)(v19 - 1) * *((__int16 *)v18 - 2)
                   + v23 * *((__int16 *)v18 - 1);
              int v21 = v25;
              BOOL v26 = v22 > 7;
              v22 -= 4;
            }
            while (v26);
          }
          if (v16)
          {
            CGRect v27 = (unsigned __int8 *)(v19 + 1);
            CGRect v28 = (__int16 *)v18 + 1;
            do
            {
              int v29 = *v27++;
              v20 += v17 * v29;
              int v30 = *v28++;
              int v17 = v30;
              --v16;
            }
            while (v16);
          }
          int v31 = v20 >> 14;
          if (v20 >> 14 >= 255) {
            int v31 = 255;
          }
          *v13++ = v31 & ~(v31 >> 31);
          int v15 = (int *)((char *)v15 + v10);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t resample_byte_v_Ncpp_al(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, void *a5, uint64_t *a6)
{
  uint64_t v6 = *a5 - 1;
  int v7 = *(_DWORD *)(result + 4);
  uint64_t v8 = (const __int16 *)(result + 8);
  int v9 = a3;
  uint64_t v10 = a3 * a4;
  unint64_t v11 = v10 & 0xFFFFFFFC;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
    int v13 = 0;
    int v15 = a3;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    int v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v7)
      {
        int v17 = a6;
        int32x2_t v18 = v8;
        int v19 = v7;
        do
        {
          uint64_t v20 = *v17++;
          int16x4_t v21 = vld1_dup_s16(v18++);
          int32x4_t v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v12), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      uint64_t v22 = v12 | 1;
      uint64_t v23 = v12 | 2;
      uint64_t v24 = v12 | 3;
      v12 += 4;
      uint64_t v25 = v6 + 4;
      int8x16_t v26 = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(v16, 0xEuLL), v14), (int32x4_t)0);
      int v27 = v26.i32[0];
      if (v13 > v26.i32[0]) {
        int v27 = v13;
      }
      BOOL v28 = v22 == v15;
      CFTypeRef result = v28;
      if (v28) {
        int v29 = v9;
      }
      else {
        int v29 = 0;
      }
      uint64_t v30 = (v29 + v15);
      if (v28) {
        unsigned __int32 v31 = 0;
      }
      else {
        unsigned __int32 v31 = v27;
      }
      __int32 v32 = v26.i32[1];
      if (v31 > v26.i32[1]) {
        __int32 v32 = v31;
      }
      BOOL v33 = v23 == v30;
      __int16 v34 = v23 == v30;
      if (v33) {
        int v35 = v9;
      }
      else {
        int v35 = 0;
      }
      uint64_t v36 = (v35 + v30);
      if (v33) {
        unsigned __int32 v37 = 0;
      }
      else {
        unsigned __int32 v37 = v32;
      }
      __int32 v38 = v26.i32[2];
      if (v37 > v26.i32[2]) {
        __int32 v38 = v37;
      }
      BOOL v39 = v24 == v36;
      __int16 v40 = v24 == v36;
      if (v39) {
        int v41 = v9;
      }
      else {
        int v41 = 0;
      }
      uint64_t v42 = (v41 + v36);
      if (v39) {
        unsigned __int32 v43 = 0;
      }
      else {
        unsigned __int32 v43 = v38;
      }
      int v44 = v26.i32[3];
      if (v43 > v26.i32[3]) {
        int v44 = v43;
      }
      BOOL v45 = v12 == v42;
      __int16 v46 = v12 == v42;
      if (v12 == v42) {
        int v47 = v9;
      }
      else {
        int v47 = 0;
      }
      int v15 = v47 + v42;
      if (v45) {
        int v13 = 0;
      }
      else {
        int v13 = v44;
      }
      v48.i16[0] = result;
      v48.i16[1] = v34;
      v48.i16[2] = v40;
      v48.i16[3] = v46;
      v49.i64[0] = __PAIR64__(v32, v27);
      v49.i64[1] = __PAIR64__(v44, v38);
      int16x8_t v50 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v48), 0x1FuLL)), v49, v26);
      *(int16x4_t *)v50.i8 = vmovn_s32((int32x4_t)v50);
      *(_DWORD *)(v6 + 1) = vmovn_s16(v50).u32[0];
      v6 += 4;
    }
    while (v12 < v11);
    uint64_t v6 = v25;
  }
  if ((int)v12 < (int)v10)
  {
    unint64_t v12 = v12;
    do
    {
      int v51 = 0x2000;
      if (v7)
      {
        uint64_t v52 = a6;
        unsigned int v53 = v8;
        int v54 = v7;
        do
        {
          int v56 = *v53++;
          int v55 = v56;
          uint64_t v57 = *v52++;
          v51 += *(_DWORD *)(v57 + 4 * v12) * v55;
          --v54;
        }
        while (v54);
      }
      int v58 = v51 >> 14;
      if (v58 >= 255) {
        int v58 = 255;
      }
      int v59 = v58 & ~(v58 >> 31);
      if (v13 <= v59) {
        CFTypeRef result = v59;
      }
      else {
        CFTypeRef result = v13;
      }
      BOOL v60 = ++v12 == v15;
      if (v12 == v15) {
        int v61 = v9;
      }
      else {
        int v61 = 0;
      }
      v15 += v61;
      if (v60) {
        int v13 = 0;
      }
      else {
        int v13 = result;
      }
      if (v60) {
        LOBYTE(v59) = result;
      }
      *(unsigned char *)++uint64_t v6 = v59;
    }
    while (v12 != v10);
  }
  return result;
}

uint64_t *resample_byte_v_3cpp_al(uint64_t *result, uint64_t a2, unsigned __int8 a3, int a4, unsigned char **a5, uint64_t *a6)
{
  unint64_t v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    int v8 = *((_DWORD *)result + 1);
    int v9 = (__int16 *)(result + 1);
    uint64_t v10 = *a5;
    do
    {
      if (v8)
      {
        int32x2_t v11 = (int32x2_t)0x200000002000;
        int v12 = 0x2000;
        CFTypeRef result = a6;
        int v13 = 0x2000;
        int32x4_t v14 = v9;
        int v15 = v8;
        do
        {
          unsigned int v17 = *v14++;
          unsigned int v16 = v17;
          uint64_t v18 = *result++;
          int32x2_t v11 = vmla_s32(v11, *(int32x2_t *)(v18 + 4 * v7), vdup_n_s32(v16));
          v13 += *(_DWORD *)(v18 + 4 * (v7 | 2)) * v16;
          v12 += *(_DWORD *)(v18 + 4 * (v7 | 3)) * v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        int32x2_t v11 = (int32x2_t)0x200000002000;
        int v13 = 0x2000;
        int v12 = 0x2000;
      }
      int32x2_t v19 = vshr_n_s32(v11, 0xEuLL);
      int v20 = v13 >> 14;
      int v21 = v12 >> 14;
      if (v20 >= 255) {
        int v20 = 255;
      }
      unsigned int v22 = v20 & ~(v20 >> 31);
      if (v21 >= 255) {
        int v21 = 255;
      }
      unsigned int v23 = v21 & ~(v21 >> 31);
      int32x2_t v24 = vmax_s32(vmin_s32(v19, (int32x2_t)0xFF000000FFLL), 0);
      if (v24.i32[0] > v23) {
        unsigned int v23 = v24.i32[0];
      }
      if (v24.i32[1] > v23) {
        unsigned int v23 = v24.u32[1];
      }
      if (v22 > v23) {
        LOBYTE(v23) = v22;
      }
      v10[1] = v24.i8[4];
      unsigned char *v10 = v24.i8[0];
      void v10[2] = v22;
      _OWORD v10[3] = v23;
      v10 += 4;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_byte_v_Ncpp_af(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, void *a5, uint64_t *a6)
{
  unint64_t v6 = (unsigned char *)(*a5 - 1);
  int v7 = *(_DWORD *)(result + 4);
  int v8 = (const __int16 *)(result + 8);
  int v9 = a3;
  uint64_t v10 = 2 - a3;
  uint64_t v11 = a3 * a4;
  unint64_t v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    int v14 = 0;
    unsigned int v15 = a3;
  }
  else
  {
    unint64_t v13 = 0;
    int v14 = 0;
    CFTypeRef result = 255;
    unsigned int v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v7)
      {
        unsigned int v17 = a6;
        uint64_t v18 = v8;
        int v19 = v7;
        do
        {
          uint64_t v20 = *v17++;
          int16x4_t v21 = vld1_dup_s16(v18++);
          int32x4_t v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v13), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      int v22 = v16.i32[0] >> 14;
      int v23 = v16.i32[1] >> 14;
      if (v16.i32[0] >> 14 >= 255) {
        int v22 = 255;
      }
      int v24 = v22 & ~(v22 >> 31);
      if (v23 >= 255) {
        int v23 = 255;
      }
      if (v14 <= v24) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v14;
      }
      if ((v13 | 1) == v15)
      {
        v6[v10] = v25;
        uint64_t v26 = v15 + v9;
        v15 += v9;
        unsigned int v25 = 0;
      }
      else
      {
        uint64_t v26 = v15;
      }
      unsigned int v27 = v23 & ~(v23 >> 31);
      v6[1] = v24;
      if (v25 <= v27) {
        unsigned int v28 = v23 & ~(v23 >> 31);
      }
      else {
        unsigned int v28 = v25;
      }
      if ((v13 | 2) == v26)
      {
        v6[v10 + 1] = v28;
        uint64_t v26 = v15 + v9;
        v15 += v9;
        unsigned int v28 = 0;
      }
      v6[2] = v27;
      int v29 = v16.i32[2] >> 14;
      int v30 = v16.i32[3] >> 14;
      if (v16.i32[2] >> 14 >= 255) {
        int v29 = 255;
      }
      unsigned int v31 = v29 & ~(v29 >> 31);
      if (v30 >= 255) {
        int v30 = 255;
      }
      if (v28 <= v31) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v28;
      }
      if ((v13 | 3) == v26)
      {
        v6[v10 + 2] = v32;
        uint64_t v26 = v15 + v9;
        v15 += v9;
        unsigned int v32 = 0;
      }
      unsigned int v33 = v30 & ~(v30 >> 31);
      _OWORD v6[3] = v31;
      if (v32 <= v33) {
        int v14 = v30 & ~(v30 >> 31);
      }
      else {
        int v14 = v32;
      }
      v13 += 4;
      if (v13 == v26)
      {
        v6[v10 + 3] = v14;
        v15 += v9;
        int v14 = 0;
      }
      v6[4] = v33;
      v6 += 4;
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    unint64_t v13 = v13;
    do
    {
      int v34 = 0x2000;
      if (v7)
      {
        int v35 = a6;
        uint64_t v36 = v8;
        int v37 = v7;
        do
        {
          int v39 = *v36++;
          int v38 = v39;
          uint64_t v40 = *v35++;
          v34 += *(_DWORD *)(v40 + 4 * v13) * v38;
          --v37;
        }
        while (v37);
      }
      int v41 = v34 >> 14;
      if (v41 >= 255) {
        int v41 = 255;
      }
      CFTypeRef result = v41 & ~(v41 >> 31);
      if (v14 <= (int)result) {
        int v14 = result;
      }
      if (++v13 == v15)
      {
        v6[v10] = v14;
        v15 += v9;
        int v14 = 0;
      }
      *++unint64_t v6 = result;
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t *resample_byte_v_3cpp_af(uint64_t *result, uint64_t a2, unsigned __int8 a3, int a4, unsigned char **a5, uint64_t *a6)
{
  unint64_t v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    int v8 = *((_DWORD *)result + 1);
    int v9 = (__int16 *)(result + 1);
    uint64_t v10 = *a5;
    do
    {
      if (v8)
      {
        int32x2_t v11 = (int32x2_t)0x200000002000;
        int v12 = 0x2000;
        CFTypeRef result = a6;
        int v13 = 0x2000;
        int v14 = v9;
        int v15 = v8;
        do
        {
          unsigned int v17 = *v14++;
          unsigned int v16 = v17;
          uint64_t v18 = *result++;
          v13 += *(_DWORD *)(v18 + 4 * v7) * v16;
          int32x2_t v11 = vmla_s32(v11, *(int32x2_t *)(v18 + 4 * (v7 | 1)), vdup_n_s32(v16));
          v12 += *(_DWORD *)(v18 + 4 * (v7 | 3)) * v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        int32x2_t v11 = (int32x2_t)0x200000002000;
        int v13 = 0x2000;
        int v12 = 0x2000;
      }
      int v19 = v13 >> 14;
      int32x2_t v20 = vshr_n_s32(v11, 0xEuLL);
      if (v19 >= 255) {
        int v19 = 255;
      }
      unsigned int v21 = v19 & ~(v19 >> 31);
      int v22 = v12 >> 14;
      if (v22 >= 255) {
        int v22 = 255;
      }
      unsigned int v23 = v22 & ~(v22 >> 31);
      int32x2_t v24 = vmax_s32(vmin_s32(v20, (int32x2_t)0xFF000000FFLL), 0);
      if (v24.i32[0] > v21) {
        unsigned int v21 = v24.i32[0];
      }
      if (v24.i32[1] > v21) {
        unsigned int v21 = v24.u32[1];
      }
      if (v23 > v21) {
        LOBYTE(v21) = v23;
      }
      unsigned char *v10 = v21;
      void v10[2] = v24.i8[4];
      v10[1] = v24.i8[0];
      _OWORD v10[3] = v23;
      v10 += 4;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_byte_v_Ncpp(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _DWORD **a5, uint64_t *a6)
{
  unint64_t v6 = *a5;
  int v7 = *(_DWORD *)(result + 4);
  int v8 = (const __int16 *)(result + 8);
  uint64_t v9 = a3 * a4;
  unint64_t v10 = v9 & 0xFFFFFFFC;
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    unint64_t v11 = 0;
    v12.i64[0] = 0xFF000000FFLL;
    v12.i64[1] = 0xFF000000FFLL;
    do
    {
      v13.i64[0] = 0x200000002000;
      v13.i64[1] = 0x200000002000;
      if (v7)
      {
        int v14 = a6;
        int v15 = v8;
        int v16 = v7;
        do
        {
          uint64_t v17 = *v14++;
          CFTypeRef result = 4 * v11;
          int16x4_t v18 = vld1_dup_s16(v15++);
          int32x4_t v13 = vmlaq_s32(v13, *(int32x4_t *)(v17 + 4 * v11), vmovl_s16(v18));
          --v16;
        }
        while (v16);
      }
      int16x8_t v19 = (int16x8_t)vmaxq_s32(vminq_s32(vshrq_n_s32(v13, 0xEuLL), v12), (int32x4_t)0);
      *(int16x4_t *)v19.i8 = vmovn_s32((int32x4_t)v19);
      *v6++ = vmovn_s16(v19).u32[0];
      v11 += 4;
    }
    while (v11 < v10);
  }
  if ((int)v11 < (int)v9)
  {
    unint64_t v11 = v11;
    do
    {
      int v20 = 0x2000;
      if (v7)
      {
        unsigned int v21 = a6;
        int v22 = v8;
        int v23 = v7;
        do
        {
          unsigned int v24 = *v22++;
          CFTypeRef result = v24;
          uint64_t v25 = *v21++;
          v20 += *(_DWORD *)(v25 + 4 * v11) * result;
          --v23;
        }
        while (v23);
      }
      int v26 = v20 >> 14;
      if (v26 >= 255) {
        int v26 = 255;
      }
      *(unsigned char *)unint64_t v6 = v26 & ~(v26 >> 31);
      unint64_t v6 = (_DWORD *)((char *)v6 + 1);
      ++v11;
    }
    while (v11 != v9);
  }
  return result;
}

int *resample_byte_h_1cpp_ap(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = a6[1];
    uint64_t v11 = 2 * a2 + 8;
    uint64_t v12 = a8;
    while (!a4)
    {
LABEL_18:
      if (++v8 == v12) {
        return result;
      }
    }
    uint64_t v13 = v9 + *a7 * (uint64_t)(int)v8;
    uint64_t v14 = v10 + a7[1] * (uint64_t)(int)v8;
    int v15 = *(int **)(a5 + 8 * v8);
    int v16 = a4;
    uint64_t v17 = result;
    while (1)
    {
      int v18 = v17[1];
      int v20 = v17 + 2;
      int v19 = *((__int16 *)v17 + 4);
      uint64_t v21 = *v17 - 1;
      uint64_t v22 = v13 + v21;
      uint64_t v23 = v14 + v21;
      if (v18 >= 2) {
        break;
      }
      int v27 = 0x2000;
      int v26 = 0x2000;
      if (v18) {
        goto LABEL_11;
      }
LABEL_13:
      int v39 = v27 >> 14;
      int v40 = v26 >> 14;
      if (v27 >> 14 >= 255) {
        int v39 = 255;
      }
      int v41 = v39 & ~(v39 >> 31);
      if (v40 >= 255) {
        int v40 = 255;
      }
      int *v15 = v41;
      v15[1] = v40 & ~(v40 >> 31);
      v15 += 2;
      uint64_t v17 = (int *)((char *)v17 + v11);
      if (!--v16) {
        goto LABEL_18;
      }
    }
    uint64_t v24 = 0;
    unsigned int v25 = v18 + 2;
    int v26 = 0x2000;
    int v27 = 0x2000;
    do
    {
      int v28 = v27 + v19 * *(unsigned __int8 *)(v22 + v24 + 1);
      int v29 = v26 + v19 * *(unsigned __int8 *)(v23 + v24 + 1);
      int v30 = *((__int16 *)v20++ + 2);
      int v19 = v30;
      int v31 = *((__int16 *)v20 - 1);
      int v27 = v28 + v31 * *(unsigned __int8 *)(v22 + v24 + 2);
      int v26 = v29 + *(unsigned __int8 *)(v23 + v24 + 2) * v31;
      v24 += 2;
      v25 -= 2;
    }
    while (v25 > 3);
    v23 += v24;
    v18 -= v24;
    v22 += v24;
    if (!v18) {
      goto LABEL_13;
    }
LABEL_11:
    unsigned int v32 = (unsigned __int8 *)(v23 + 1);
    unsigned int v33 = (unsigned __int8 *)(v22 + 1);
    int v34 = (__int16 *)v20 + 1;
    do
    {
      int v36 = *v33++;
      int v35 = v36;
      int v37 = *v32++;
      v27 += v19 * v35;
      v26 += v19 * v37;
      int v38 = *v34++;
      int v19 = v38;
      --v18;
    }
    while (v18);
    goto LABEL_13;
  }
  return result;
}

int *resample_byte_h_Ncpp_ap(int *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a8 >= 1)
  {
    uint64_t v8 = 0;
    unsigned int v9 = a3;
    int v10 = a3 - 1;
    uint64_t v11 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v13 = 2 * a2 + 8;
    uint64_t v14 = a8;
    do
    {
      if (a4)
      {
        uint64_t v15 = v11 + *a7 * (uint64_t)(int)v8;
        int v16 = *(int **)(a5 + 8 * v8);
        uint64_t v17 = v12 + a7[1] * (uint64_t)(int)v8 + 1;
        int v18 = a4;
        int v19 = result;
        do
        {
          int v20 = v19[1];
          uint64_t v21 = *v19;
          uint64_t v22 = (__int16 *)(v19 + 2);
          if (v9 >= 2)
          {
            int v23 = 0;
            do
            {
              int v24 = 0x2000;
              if (v20)
              {
                unsigned int v25 = (unsigned __int8 *)(v15 + (int)v21 * (uint64_t)v10);
                int v26 = (__int16 *)(v19 + 2);
                int v27 = v20;
                do
                {
                  int v28 = *v26++;
                  int v29 = *v25;
                  v25 += v10;
                  v24 += v29 * v28;
                  --v27;
                }
                while (v27);
              }
              int v30 = v24 >> 14;
              if (v30 >= 255) {
                int v30 = 255;
              }
              *v16++ = v30 & ~(v30 >> 31);
              ++v23;
            }
            while (v23 != v10);
          }
          if (v20)
          {
            int v31 = (unsigned __int8 *)(v21 + v17 - 1);
            int v32 = 0x2000;
            do
            {
              int v34 = *v22++;
              int v33 = v34;
              int v35 = *v31++;
              v32 += v35 * v33;
              --v20;
            }
            while (v20);
          }
          else
          {
            int v32 = 0x2000;
          }
          int v36 = v32 >> 14;
          if (v32 >> 14 >= 255) {
            int v36 = 255;
          }
          *v16++ = v36 & ~(v36 >> 31);
          int v19 = (int *)((char *)v19 + v13);
          --v18;
        }
        while (v18);
      }
      ++v8;
    }
    while (v8 != v14);
  }
  return result;
}

int *resample_byte_h_4cpp_ap(int *result, unsigned int a2, double a3, double a4, double a5, uint8x8_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t *a10, int *a11, int a12)
{
  if (a12 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a10;
    uint64_t v14 = a10[1];
    uint64_t v15 = 2 * a2 + 8;
    uint64_t v16 = a12;
    v17.i64[0] = 0xFF000000FFLL;
    v17.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a8)
      {
        uint64_t v18 = v13 + *a11 * (uint64_t)(int)v12;
        int v19 = *(int32x4_t **)(a9 + 8 * v12);
        uint64_t v20 = v14 + a11[1] * (uint64_t)(int)v12 + 1;
        int v21 = a8;
        uint64_t v22 = result;
        do
        {
          int v23 = v22[1];
          if (v23)
          {
            unsigned int v25 = (__int16 *)(v22 + 2);
            uint64_t v24 = *v22;
            int v26 = (__int32 *)(v18 + 4 * v24);
            int v27 = (unsigned __int8 *)(v24 + v20 - 1);
            v28.i64[0] = 0x200000002000;
            v28.i64[1] = 0x200000002000;
            int v29 = 0x2000;
            do
            {
              unsigned int v31 = *v25++;
              unsigned int v30 = v31;
              int v33 = *v27++;
              int v32 = v33;
              __int32 v34 = *v26++;
              a6.i32[0] = v34;
              a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
              int32x4_t v28 = vmlal_s16(v28, vdup_n_s16(v30), (int16x4_t)a6);
              v29 += v32 * v30;
              --v23;
            }
            while (v23);
          }
          else
          {
            v28.i64[0] = 0x200000002000;
            v28.i64[1] = 0x200000002000;
            int v29 = 0x2000;
          }
          int32x4_t v35 = vshrq_n_s32(v28, 0xEuLL);
          int v36 = v29 >> 14;
          if (v29 >> 14 >= 255) {
            int v36 = 255;
          }
          *int v19 = vmaxq_s32(vminq_s32(v35, v17), (int32x4_t)0);
          v19[1].i32[0] = v36 & ~(v36 >> 31);
          int v19 = (int32x4_t *)((char *)v19 + 20);
          uint64_t v22 = (int *)((char *)v22 + v15);
          --v21;
        }
        while (v21);
      }
      ++v12;
    }
    while (v12 != v16);
  }
  return result;
}

uint64_t resample_byte_v_Ncpp_ap(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, void *a5, uint64_t *a6)
{
  uint64_t v6 = *a5 - 1;
  uint64_t v7 = a5[1] - 1;
  int v8 = *(_DWORD *)(a1 + 4);
  unsigned int v9 = (const __int16 *)(a1 + 8);
  int v10 = a3;
  uint64_t v11 = a3 * a4;
  unint64_t v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    uint64_t result = 0;
    unsigned int v15 = a3;
  }
  else
  {
    unint64_t v13 = 0;
    LODWORD(result) = 0;
    unsigned int v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v8)
      {
        int32x4_t v17 = a6;
        uint64_t v18 = v9;
        int v19 = v8;
        do
        {
          uint64_t v20 = *v17++;
          int16x4_t v21 = vld1_dup_s16(v18++);
          int32x4_t v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v13), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      int v22 = v16.i32[0] >> 14;
      if (v16.i32[0] >> 14 >= 255) {
        int v22 = 255;
      }
      int v23 = v22 & ~(v22 >> 31);
      if (v16.i32[1] >> 14 >= 255) {
        int v24 = 255;
      }
      else {
        int v24 = v16.i32[1] >> 14;
      }
      if ((int)result <= v23) {
        LODWORD(result) = v23;
      }
      if ((v13 | 1) == v15)
      {
        *(unsigned char *)++uint64_t v7 = result;
        uint64_t v25 = v15 + v10;
        v15 += v10;
        LODWORD(result) = 0;
      }
      else
      {
        uint64_t v25 = v15;
        *(unsigned char *)++uint64_t v6 = v23;
      }
      unsigned int v26 = v24 & ~(v24 >> 31);
      if (result <= v26) {
        unsigned int v27 = v24 & ~(v24 >> 31);
      }
      else {
        unsigned int v27 = result;
      }
      if ((v13 | 2) == v25)
      {
        *(unsigned char *)++uint64_t v7 = v27;
        uint64_t v25 = v15 + v10;
        v15 += v10;
        unsigned int v27 = 0;
      }
      else
      {
        *(unsigned char *)++uint64_t v6 = v26;
      }
      int v28 = v16.i32[2] >> 14;
      if (v16.i32[2] >> 14 >= 255) {
        int v28 = 255;
      }
      unsigned int v29 = v28 & ~(v28 >> 31);
      if (v16.i32[3] >> 14 >= 255) {
        int v30 = 255;
      }
      else {
        int v30 = v16.i32[3] >> 14;
      }
      if (v27 <= v29) {
        unsigned int v27 = v29;
      }
      if ((v13 | 3) == v25)
      {
        *(unsigned char *)++uint64_t v7 = v27;
        uint64_t v25 = v15 + v10;
        v15 += v10;
        unsigned int v27 = 0;
      }
      else
      {
        *(unsigned char *)++uint64_t v6 = v29;
      }
      unsigned int v31 = v30 & ~(v30 >> 31);
      if (v27 <= v31) {
        uint64_t result = v31;
      }
      else {
        uint64_t result = v27;
      }
      v13 += 4;
      if (v13 == v25)
      {
        *(unsigned char *)++uint64_t v7 = result;
        v15 += v10;
        uint64_t result = 0;
      }
      else
      {
        *(unsigned char *)++uint64_t v6 = v31;
      }
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    unint64_t v13 = v13;
    do
    {
      int v32 = 0x2000;
      if (v8)
      {
        int v33 = a6;
        __int32 v34 = v9;
        int v35 = v8;
        do
        {
          int v37 = *v34++;
          int v36 = v37;
          uint64_t v38 = *v33++;
          v32 += *(_DWORD *)(v38 + 4 * v13) * v36;
          --v35;
        }
        while (v35);
      }
      int v39 = v32 >> 14;
      if (v39 >= 255) {
        int v39 = 255;
      }
      int v40 = v39 & ~(v39 >> 31);
      if ((int)result <= v40) {
        uint64_t result = v40;
      }
      else {
        uint64_t result = result;
      }
      if (++v13 == v15)
      {
        *(unsigned char *)++uint64_t v7 = result;
        v15 += v10;
        uint64_t result = 0;
      }
      else
      {
        *(unsigned char *)++uint64_t v6 = v40;
      }
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t resample_byte_v_3cpp_ap(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    int v8 = *(_DWORD *)(result + 4);
    unsigned int v9 = (__int16 *)(result + 8);
    uint64_t v11 = *(unsigned char **)a5;
    int v10 = *(unsigned char **)(a5 + 8);
    do
    {
      if (v8)
      {
        int32x2_t v12 = (int32x2_t)0x200000002000;
        int v13 = 0x2000;
        uint64_t v14 = a6;
        int v15 = 0x2000;
        int32x4_t v16 = v9;
        int v17 = v8;
        do
        {
          unsigned int v19 = *v16++;
          unsigned int v18 = v19;
          uint64_t v20 = *v14++;
          int32x2_t v12 = vmla_s32(v12, *(int32x2_t *)(v20 + 4 * v7), vdup_n_s32(v18));
          v15 += *(_DWORD *)(v20 + 4 * (v7 | 2)) * v18;
          v13 += *(_DWORD *)(v20 + 4 * (v7 | 3)) * v18;
          --v17;
        }
        while (v17);
      }
      else
      {
        int32x2_t v12 = (int32x2_t)0x200000002000;
        int v15 = 0x2000;
        int v13 = 0x2000;
      }
      int32x2_t v21 = vshr_n_s32(v12, 0xEuLL);
      int v22 = v15 >> 14;
      int v23 = v13 >> 14;
      if (v22 >= 255) {
        int v22 = 255;
      }
      unsigned int v24 = v22 & ~(v22 >> 31);
      if (v23 >= 255) {
        int v23 = 255;
      }
      unsigned int v25 = v23 & ~(v23 >> 31);
      int32x2_t v26 = vmax_s32(vmin_s32(v21, (int32x2_t)0xFF000000FFLL), 0);
      uint64_t result = v26.u32[0];
      if (v26.i32[0] > v25) {
        unsigned int v25 = v26.i32[0];
      }
      if (v26.i32[1] > v25) {
        unsigned int v25 = v26.u32[1];
      }
      if (v24 > v25) {
        LOBYTE(v25) = v24;
      }
      v11[1] = v26.i8[4];
      unsigned char *v11 = v26.i8[0];
      _OWORD v11[2] = v24;
      v11 += 3;
      *v10++ = v25;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t CGReferenceWhiteToneMappingGetDefaultOptions()
{
  if (CGReferenceWhiteToneMappingGetDefaultOptions_predicate != -1) {
    dispatch_once(&CGReferenceWhiteToneMappingGetDefaultOptions_predicate, &__block_literal_global_2027);
  }
  return CGReferenceWhiteToneMappingGetDefaultOptions_options;
}

void __CGReferenceWhiteToneMappingGetDefaultOptions_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = xmmword_1E52A1900;
  long long v6 = *(_OWORD *)off_1E52A1910;
  unint64_t v7 = @"kCGRWTMReferenceWhiteThreshold";
  LODWORD(valuePtr[0]) = 1148846080;
  valuePtr[0] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  int v3 = 1128988672;
  valuePtr[1] = CFNumberCreate(0, kCFNumberFloatType, &v3);
  int v3 = 1065353216;
  void valuePtr[2] = CFNumberCreate(0, kCFNumberFloatType, &v3);
  int v3 = 1056964608;
  valuePtr[3] = CFNumberCreate(0, kCFNumberFloatType, &v3);
  int v3 = 1076538027;
  valuePtr[4] = CFNumberCreate(0, kCFNumberFloatType, &v3);
  CFDictionaryRef v0 = CFDictionaryCreate(0, (const void **)keys, valuePtr, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 5; ++i)
  {
    double v2 = valuePtr[i];
    if (v2) {
      CFRelease(v2);
    }
  }
  keys[0] = @"kCGApplyReferenceWhiteToneMapping";
  valuePtr[0] = v0;
  CGReferenceWhiteToneMappingGetDefaultOptions_options = (uint64_t)CFDictionaryCreate(0, (const void **)keys, valuePtr, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v0) {
    CFRelease(v0);
  }
}

BOOL IsCGPDFTaggedNodeTypeContent(int a1)
{
  return a1 == 1 || a1 == 700;
}

BOOL IsCGPDFTaggedNodeTypeGroup(int a1)
{
  return (a1 - 100) < 0xC;
}

BOOL IsCGPDFTaggedNodeTypeHeader(int a1)
{
  return (a1 - 201) < 7;
}

BOOL IsCGPDFTaggedNodeTypeList(int a1)
{
  return (a1 & 0xFFFFFFFC) == 300;
}

BOOL IsCGPDFTaggedNodeTypeTable(int a1)
{
  return (a1 - 400) < 7;
}

BOOL IsCGPDFTaggedNodeTypeInline(int a1)
{
  return (a1 - 500) < 8;
}

BOOL IsCGPDFTaggedNodeTypeRuby(int a1)
{
  return (a1 - 600) < 7;
}

BOOL IsCGPDFTaggedNodeTypeIllustration(int a1)
{
  return (a1 - 700) < 3;
}

const char *CGPDFTaggedNodeTypeGetName(int a1)
{
  if (a1 <= 399)
  {
    if (a1 > 199)
    {
      switch(a1)
      {
        case 200:
          uint64_t result = "P";
          break;
        case 201:
          uint64_t result = "H";
          break;
        case 202:
          uint64_t result = "H1";
          break;
        case 203:
          uint64_t result = "H2";
          break;
        case 204:
          uint64_t result = "H3";
          break;
        case 205:
          uint64_t result = "H4";
          break;
        case 206:
          uint64_t result = "H5";
          break;
        case 207:
          uint64_t result = "H6";
          break;
        default:
          switch(a1)
          {
            case 300:
              uint64_t result = "L";
              break;
            case 301:
              uint64_t result = "LI";
              break;
            case 302:
              uint64_t result = "Lbl";
              break;
            case 303:
              uint64_t result = "LBody";
              break;
            default:
              return "Unknown";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 'd':
          uint64_t result = "Document";
          break;
        case 'e':
          uint64_t result = "Part";
          break;
        case 'f':
          uint64_t result = "Art";
          break;
        case 'g':
          uint64_t result = "Sect";
          break;
        case 'h':
          uint64_t result = "Div";
          break;
        case 'i':
          uint64_t result = "BlockQuote";
          break;
        case 'j':
          uint64_t result = "Caption";
          break;
        case 'k':
          uint64_t result = "TOC";
          break;
        case 'l':
          uint64_t result = "TOCI";
          break;
        case 'm':
          uint64_t result = "Index";
          break;
        case 'n':
          uint64_t result = "NonStruct";
          break;
        case 'o':
          uint64_t result = "Private";
          break;
        default:
          if (a1 != 1) {
            return "Unknown";
          }
          uint64_t result = "Word";
          break;
      }
    }
  }
  else if (a1 > 599)
  {
    if (a1 > 699)
    {
      if (a1 > 701)
      {
        if (a1 == 702)
        {
          return "Form";
        }
        else if (a1 == 800)
        {
          return "OBJR";
        }
        else
        {
          return "Unknown";
        }
      }
      else if (a1 == 700)
      {
        return "Figure";
      }
      else
      {
        return "Formula";
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
          uint64_t result = "Ruby";
          break;
        case 601:
          uint64_t result = "RB";
          break;
        case 602:
          uint64_t result = "RT";
          break;
        case 603:
          uint64_t result = "RP";
          break;
        case 604:
          uint64_t result = "Warichu";
          break;
        case 605:
          uint64_t result = "WT";
          break;
        case 606:
          uint64_t result = "WP";
          break;
        default:
          return "Unknown";
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 500:
        uint64_t result = "Span";
        break;
      case 501:
        uint64_t result = "Quote";
        break;
      case 502:
        uint64_t result = "Note";
        break;
      case 503:
        uint64_t result = "Reference";
        break;
      case 504:
        uint64_t result = "BibEntry";
        break;
      case 505:
        uint64_t result = "Code";
        break;
      case 506:
        uint64_t result = "Link";
        break;
      case 507:
        uint64_t result = "Annot";
        break;
      default:
        switch(a1)
        {
          case 400:
            uint64_t result = "Table";
            break;
          case 401:
            uint64_t result = "TR";
            break;
          case 402:
            uint64_t result = "TH";
            break;
          case 403:
            uint64_t result = "TD";
            break;
          case 404:
            uint64_t result = "THead";
            break;
          case 405:
            uint64_t result = "TBody";
            break;
          case 406:
            uint64_t result = "TFoot";
            break;
          default:
            return "Unknown";
        }
        break;
    }
  }
  return result;
}

uint64_t get_y_inflections_2(float64x2_t *a1, double *a2, float64x2_t *a3)
{
  float64x2_t v3 = *a1;
  float64x2_t v4 = vsubq_f64(a1[1], *a1);
  float64x2_t v5 = vaddq_f64(v4, v4);
  float64x2_t v6 = vsubq_f64(vsubq_f64(a1[2], v5), *a1);
  double v7 = vmuld_lane_f64(-2.0, v6, 1);
  double v8 = v7 * 0.0001;
  double v9 = v7 * 0.9999;
  double v10 = v5.f64[1];
  if (v6.f64[1] <= 0.0 || v9 >= v5.f64[1] || v5.f64[1] >= v8)
  {
    if (v6.f64[1] >= 0.0) {
      return 0;
    }
    double v10 = v5.f64[1];
    if (v8 >= v5.f64[1] || v5.f64[1] >= v9) {
      return 0;
    }
  }
  double v15 = -v10 / (v6.f64[1] + v6.f64[1]);
  if (a2) {
    *a2 = v15;
  }
  if (a3) {
    *a3 = vmlaq_n_f64(v3, vmlaq_n_f64(v5, v6, v15), v15);
  }
  return 1;
}

CFStringRef converter_copy_debug_description(const void *a1)
{
  return converter_copy_format_description(a1, 0);
}

CFStringRef converter_copy_format_description(CFTypeRef cf, const __CFDictionary *a2)
{
  if (cf) {
    CFIndex v4 = CFGetRetainCount(cf);
  }
  else {
    CFIndex v4 = 0;
  }
  CFAllocatorRef v5 = CFGetAllocator(cf);
  return CFStringCreateWithFormat(v5, a2, @"<CGCMSConverter %p refunint64_t Count = %ld>", cf, v4);
}

void *create_lookup_table(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (uint64_t v11 = *(void *)(a1 + 24), *(_DWORD *)(v11 + 28) == 5)) {
    unint64_t v12 = *(void *)(*(void *)(v11 + 96) + 8) + 1;
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(a3 + 40);
  if (a2) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 24) + 48);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v12 >= 0x101) {
    _CGHandleAssert("create_lookup_table", 4521, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "count <= 256", "oversize table count=%lu components=%lu", a6, a7, a8, v12);
  }
  if (!(v13 * v12)) {
    return 0;
  }
  double v15 = malloc_type_calloc(v13 * v12, 1uLL, 0xCDEECB40uLL);
  if (v15)
  {
    uint64_t v57 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    uint64_t v36 = 0;
    memset(v35, 0, sizeof(v35));
    long long v34 = 0u;
    long long v33 = 0u;
    long long v32 = 0u;
    CFDataRef v16 = CGColorSpaceCopyColorTable(a1);
    CFDataRef v17 = v16;
    if (v16) {
      uint64_t BytePtr = CFDataGetBytePtr(v16);
    }
    else {
      uint64_t BytePtr = 0;
    }
    v37[0] = BytePtr;
    v37[1] = v12;
    _OWORD v37[2] = 1;
    v37[3] = v14 * v12;
    *(void *)&long long v39 = 8;
    *((void *)&v39 + 1) = v14;
    int v19 = *(_DWORD *)(a3 + 84);
    DWORD2(v38) = 1;
    LODWORD(v38) = v19;
    v31[0] = v15;
    v31[1] = v12;
    v31[2] = 1;
    v31[3] = v13 * v12;
    *(void *)&long long v33 = 8;
    *((void *)&v33 + 1) = v13;
    DWORD2(v32) = 1;
    LODWORD(v32) = v19;
    if (a4)
    {
      if (v13) {
        memcpy((char *)v35 + 8, a4, 8 * v13);
      }
      *(void *)&v35[0] = (char *)v35 + 8;
    }
    if (BytePtr && v14 * v12 != CFDataGetLength(v17))
    {
      CFDataGetLength(v17);
      _CGHandleAssert("create_lookup_table", 4560, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "srcFormat.data == NULL || count * nSrcComponents == safe_unsigned_cast(CFDataGetLength(colorTable))", "src data %p,  count: %zu ncomponents %zu length: %zu", v28, v29, v30, (char)BytePtr);
    }
    if ((CGCMSConverterConvert((void *)a3, (uint64_t)v37, (uint64_t)v31) & 1) == 0)
    {
      CGPostError((uint64_t)"%s : Unable to complete color conversion", v20, v21, v22, v23, v24, v25, v26, (char)"create_lookup_table");
      free(v15);
      double v15 = 0;
    }
    if (v17) {
      CFRelease(v17);
    }
  }
  return v15;
}

uint64_t deviceN_converter_info@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __src[4] = 0;
  unsigned int v13 = *(_DWORD *)(a2 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  if (v14) {
    uint64_t v15 = *(void *)(*(void *)(v14 + 24) + 48);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v13 - 7 < 3) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = v13;
  }
  unint64_t BitsPerComponent = CGPixelComponentGetBitsPerComponent(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v16 == v13)
  {
    int v21 = *(_DWORD *)(a2 + 64);
    if (v21 == 8) {
      int v22 = 1;
    }
    else {
      int v22 = *(_DWORD *)(a2 + 64);
    }
    if (v21 == 9) {
      int v23 = 3;
    }
    else {
      int v23 = v22;
    }
  }
  else
  {
    int v23 = 0;
  }
  if (BitsPerComponent - 33 <= 0xFFFFFFFFFFFFFFDFLL) {
    _CGHandleAssert("CGBitmapPixelInfoInitialize", 56, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "bits_per_component > 0 && bits_per_component <= 32", "bpc: %zu", v18, v19, v20, BitsPerComponent);
  }
  unsigned int v24 = *(_DWORD *)(a2 + 68);
  if ((v23 - 1) > 8) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = qword_185211998[v23 - 1];
  }
  uint64_t v26 = *(void *)a2;
  uint64_t v27 = (v25 + v15) * *(void *)(a2 + 8);
  *(_OWORD *)&__src[1] = *(_OWORD *)(a2 + 8);
  __src[0] = v26;
  __src[3] = v27 * (BitsPerComponent >> 3);
  __src[5] = v16;
  __src[6] = BitsPerComponent;
  __src[7] = v15;
  __src[8] = __PAIR64__(v24, v23);
  memset(&__src[9], 0, 272);
  LODWORD(__src[4]) = *(_DWORD *)(a1 + 84);
  *(_OWORD *)(a9 + 8) = 0u;
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(_OWORD *)(a9 + 72) = 0u;
  uint64_t result = (uint64_t)CGCMSConverterCreateCachedCGvImageConverter((void *)a1, __src, a3);
  *(void *)a9 = result;
  if (result)
  {
    uint64_t v29 = (vImage_Error *)result;
    memcpy(__dst, __src, sizeof(__dst));
    memcpy(v30, a3, sizeof(v30));
    uint64_t result = CGvImageConverterGetBufferSize(v29, (uint64_t)__dst, (uint64_t)v30);
    *(void *)(a9 + 16) = result;
  }
  return result;
}

void post_conversion_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGPostError((uint64_t)"%s - failed width = %d double height = %d dst component = %s dstLayout = %s dstBytesPerRow = %d src component = %s srcLayout = %s srcBytesPerRow = %d", a2, a3, a4, a5, a6, a7, a8, a3);
}

uint64_t convert_deviceN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v220[44] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    _CGHandleAssert("convert_deviceN", 4649, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "converter", "converter is NULL", a6, a7, a8, v170[0]);
  }
  unint64_t v12 = *(void **)(a1 + 96);
  TintTransforuint64_t m = CGColorSpaceGetTintTransform((uint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v13 = *(void **)(a1 + 32);
  unsigned int v14 = *(_DWORD *)(a2 + 64) - 1;
  if (v14 > 8) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = qword_185211998[v14];
  }
  uint64_t v16 = (_DWORD *)(a2 + 40);
  uint64_t v177 = a4;
  if (v13) {
    uint64_t v179 = *(void *)(v13[3] + 48);
  }
  else {
    uint64_t v179 = 0;
  }
  uint64_t v203 = *(char **)(a2 + 56);
  double v185 = *(unsigned __int8 **)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  uint64_t v178 = *(void *)(a2 + 16);
  uint64_t v181 = *(void *)(a2 + 24);
  uint64_t v182 = v17;
  uint64_t v176 = *(void *)(a3 + 24);
  memcpy(v220, (const void *)(a2 + 40), 0x130uLL);
  uint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v220, v18, v19, v20, v21, v22, v23, v24);
  unint64_t v26 = *(void *)(a2 + 48);
  uint64_t v183 = *(void *)(a2 + 16);
  int Type = CGColorSpaceGetType(v13);
  int v27 = CGColorSpaceGetType(v12);
  if (TintTransform)
  {
    int v191 = v27;
    uint64_t v35 = *v16;
    if (v35 > 9 || ((1 << v35) & 0x3B6) == 0) {
      _CGHandleAssert("convert_deviceN", 4679, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "src_component == kCGPixelComponent1BitInteger || src_component == kCGPixelComponent2BitInteger || src_component == kCGPixelComponent4BitInteger || src_component == kCGPixelComponent8BitInteger || src_component == kCGPixelComponent16BitInteger || src_component == kCGPixelComponent16BitFloat || src_component == kCGPixelComponent32BitFloat", "invalid src component type %u", v32, v33, v34, *v16);
    }
    memset(&v216[34], 0, 32);
    if ((v35 - 7) < 3) {
      int v36 = 1;
    }
    else {
      int v36 = v35;
    }
    memset(v216, 0, 272);
    uint64_t v37 = v35;
    uint64_t BitsPerComponent = CGPixelComponentGetBitsPerComponent(v36, v28, v29, v30, v31, v32, v33, v34);
    uint64_t v193 = v37;
    double v173 = (void *)a3;
    if (v36 == v37)
    {
      uint64_t v39 = *(unsigned int *)(a2 + 64);
      if (v39 == 9)
      {
        uint64_t v39 = 3;
      }
      else if (v39 == 8)
      {
        uint64_t v39 = 1;
      }
    }
    else
    {
      uint64_t v39 = 0;
    }
    uint64_t v202 = v15;
    long long v41 = CGBitmapPixelInfoInitialize(v216, (char *)v216, v36, BitsPerComponent, v179, v39, *(unsigned int *)(a2 + 68), 0, *(void *)(a2 + 80));
    uint64_t v192 = a2;
    uint64_t v43 = *(void *)(a2 + 8);
    uint64_t v44 = v216[2];
    if ((LODWORD(v216[3]) - 1) >= 9)
    {
      uint64_t v45 = 0;
      uint64_t v46 = v216[2] * v43;
    }
    else
    {
      uint64_t v45 = qword_185211998[LODWORD(v216[3]) - 1];
      uint64_t v46 = (v45 + v216[2]) * v43;
    }
    uint64_t v47 = v46 * (v216[1] >> 3);
    uint64_t v175 = v170;
    int v48 = v193 & 0xFFFFFFFE;
    v42.n128_u32[0] = 1132396544;
    if ((v193 & 0xFFFFFFFE) == 4) {
      v42.n128_f32[0] = 1.0;
    }
    if (Type == 5) {
      float v49 = 65536.0;
    }
    else {
      float v49 = 65535.0;
    }
    if (v36 == 2) {
      float v50 = v49;
    }
    else {
      float v50 = v42.n128_f32[0];
    }
    MEMORY[0x1F4188790](v41, v42);
    uint64_t v174 = &v170[-v58];
    if (v59) {
      goto LABEL_33;
    }
    if (v51 > 0x400)
    {
      int v68 = (char *)malloc_type_calloc(v51, 1uLL, 0x786814AEuLL);
      int v66 = Type;
      int v67 = v193;
      uint64_t v172 = v68;
      if (!v68)
      {
LABEL_33:
        CGPostError((uint64_t)"%s : Unable to allocate", v51, v52, v53, v54, v55, v56, v57, (char)"convert_deviceN");
        return 0;
      }
    }
    else
    {
      LODWORD(v201) = v48;
      uint64_t v60 = v44;
      uint64_t v61 = v45;
      unint64_t v62 = v26;
      uint64_t v63 = BitsPerPixel;
      uint64_t v64 = v47;
      uint16x8_t v65 = v174;
      bzero(v174, v51);
      uint64_t v172 = v65;
      uint64_t v47 = v64;
      uint64_t BitsPerPixel = v63;
      unint64_t v26 = v62;
      uint64_t v45 = v61;
      uint64_t v44 = v60;
      int v48 = (int)v201;
      int v66 = Type;
      int v67 = v193;
    }
    uint64_t v180 = v47;
    uint64_t v171 = a1;
    float v69 = 256.0;
    if (v66 != 5) {
      float v69 = 255.0;
    }
    float v70 = 1.0;
    if (v36 == 2) {
      float v70 = v49;
    }
    long long v214 = 0u;
    long long v215 = 0u;
    long long v212 = 0u;
    long long v213 = 0u;
    if (v36 == 1) {
      float v71 = v69;
    }
    else {
      float v71 = v70;
    }
    long long v210 = 0uLL;
    long long v211 = 0uLL;
    if (v66 == 5)
    {
      CGColorSpaceGetLabData((uint64_t)v13, v55, v56, v57, &v210);
      int v67 = v193;
      int v66 = Type;
    }
    unsigned int v196 = *(_DWORD *)(v192 + 64);
    _ZF = v196 == 2 || (v196 & 0xFFFFFFFD) == 4;
    char v73 = _ZF;
    int v74 = v191;
    if (v183)
    {
      unint64_t v75 = v26;
      uint64_t v76 = &v203[v202];
      uint64_t v77 = v45 + v44;
      unint64_t v78 = BitsPerPixel;
      unsigned int v79 = v196 & 0xFFFFFFFB;
      BOOL v80 = v196 - 3 < 0xFFFFFFFE;
      uint64_t v81 = (uint64_t)&v203[v202 - 1];
      _ZF = v66 == 5;
      BOOL v82 = v66 != 5;
      if (_ZF) {
        float v83 = 100.0;
      }
      else {
        float v83 = 1.0;
      }
      char v84 = v48 != 4 || v82;
      if (v48 == 4) {
        double v85 = 0.0;
      }
      else {
        double v85 = 0.5;
      }
      BOOL v86 = v76 == (char *)1 || v196 - 3 < 0xFFFFFFFE;
      double v87 = v71;
      double v88 = v50;
      if (v77 == 1) {
        BOOL v80 = 1;
      }
      BOOL v189 = v80;
      BOOL v190 = v86;
      uint64_t v197 = (double *)&v206 + 1;
      uint64_t v187 = 2 * v77;
      uint64_t v188 = 4 * v77;
      unint64_t v186 = v78 / v75;
      long long v184 = v172;
      do
      {
        if (v182)
        {
          int8x16_t v89 = v184;
          int8x8_t v90 = v184;
          int8x16_t v91 = v184;
          uint64_t v92 = v182;
          uint8x8_t v93 = v185;
          uint16x8_t v94 = v185;
          uint16x8_t v95 = v185;
          do
          {
            uint64_t v202 = v92;
            memset(v220, 0, 128);
            memset(v219, 0, 96);
            long long v217 = 0u;
            long long v218 = 0u;
            if (v76)
            {
              unint64_t v96 = 0;
              uint64_t v97 = 0;
              unint64_t v98 = 0;
              double v99 = 1.0;
              uint8x16_t v100 = v197;
              uint64_t v101 = v185;
              while (2)
              {
                long long v206 = v212;
                long long v207 = v213;
                long long v208 = v214;
                long long v209 = v215;
                unsigned int v102 = v211;
                float v103 = 1.0;
                long long v204 = v210;
                long long v205 = v211;
                float v104 = 0.0;
                if (v74 == 5)
                {
                  if (v96)
                  {
                    if (v96 <= 2)
                    {
                      float v104 = *(v100 - 1);
                      float v103 = *v100;
                    }
                  }
                  else
                  {
                    float v103 = 100.0;
                  }
                }
                double v105 = v99;
                switch(v67)
                {
                  case 1:
                    if (v96) {
                      char v106 = 0;
                    }
                    else {
                      char v106 = v73;
                    }
                    _ZF = v79 == 1;
                    LOBYTE(v102) = v95[v96];
                    goto LABEL_90;
                  case 2:
                    if (v96) {
                      char v106 = 0;
                    }
                    else {
                      char v106 = v73;
                    }
                    _ZF = v79 == 1;
                    LOWORD(v102) = *(_WORD *)&v94[2 * v96];
LABEL_90:
                    _S3 = (float)v102;
                    goto LABEL_103;
                  case 3:
                  case 6:
                    goto LABEL_123;
                  case 4:
                    if (v96) {
                      char v106 = 0;
                    }
                    else {
                      char v106 = v73;
                    }
                    _ZF = v79 == 1;
                    _S3 = *(float *)&v93[4 * v96];
                    goto LABEL_103;
                  case 5:
                    if (v96) {
                      char v106 = 0;
                    }
                    else {
                      char v106 = v73;
                    }
                    _H3 = *(_WORD *)&v94[2 * v96];
                    __asm { FCVT            S3, H3 }
LABEL_103:
                    float v109 = v104 + (float)((float)((float)(v103 - v104) * _S3) / v50);
                    goto LABEL_113;
                  case 7:
                    if (!v97)
                    {
                      unsigned int v117 = *v101++;
                      unint64_t v98 = v117 | (v98 << 8);
                      LODWORD(v97) = 8;
                    }
                    uint64_t v118 = (v97 - 1);
                    if ((v98 >> (v97 - 1))) {
                      float v119 = v104 + (float)((float)((float)(v103 - v104) * 255.0) / v50);
                    }
                    else {
                      float v119 = 0.0;
                    }
                    if (v96) {
                      char v125 = 0;
                    }
                    else {
                      char v125 = v73;
                    }
                    double v105 = v119;
                    BOOL v127 = v79 == 1 && v81 == v96;
                    if (v125)
                    {
                      uint64_t v97 = v118;
                    }
                    else
                    {
                      uint64_t v97 = v118;
                      if (!v127)
                      {
LABEL_121:
                        *(double *)&v220[v96] = v105;
                        uint64_t v97 = v118;
LABEL_122:
                        double v105 = v99;
                      }
                    }
LABEL_123:
                    ++v96;
                    v100 += 2;
                    double v99 = v105;
                    if (v76 == (char *)v96) {
                      goto LABEL_154;
                    }
                    continue;
                  case 8:
                    if (v97 <= 1)
                    {
                      unsigned int v108 = *v101++;
                      unint64_t v98 = v108 | (v98 << 8);
                      LODWORD(v97) = v97 + 8;
                    }
                    uint64_t v97 = (v97 - 2);
                    if (((v98 >> v97) & 3) != 0) {
                      float v109 = v104 + (float)((float)((float)(v103 - v104) * (float)(int)(85 * ((v98 >> v97) & 3))) / v50);
                    }
                    else {
                      float v109 = 0.0;
                    }
                    if (v96) {
                      char v106 = 0;
                    }
                    else {
                      char v106 = v73;
                    }
                    _ZF = v79 == 1;
LABEL_113:
                    double v105 = v109;
                    char v121 = _ZF && v81 == v96;
                    if ((v106 & 1) == 0)
                    {
                      uint64_t v118 = v97;
                      if ((v121 & 1) == 0) {
                        goto LABEL_121;
                      }
                    }
                    goto LABEL_123;
                  case 9:
                    if (v97 <= 3)
                    {
                      unsigned int v111 = *v101++;
                      unint64_t v98 = v111 | (v98 << 8);
                      LODWORD(v97) = v97 + 8;
                    }
                    uint64_t v97 = (v97 - 4);
                    if (((v98 >> v97) & 0xF) != 0) {
                      float v112 = v104
                    }
                           + (float)((float)((float)(v103 - v104)
                                           * (float)(int)((v98 >> v97) & 0xF | (16 * ((v98 >> v97) & 0xF))))
                                   / v50);
                    else {
                      float v112 = 0.0;
                    }
                    if (v96) {
                      char v122 = 0;
                    }
                    else {
                      char v122 = v73;
                    }
                    double v105 = v112;
                    BOOL v124 = v79 == 1 && v81 == v96;
                    if (v122) {
                      goto LABEL_123;
                    }
                    uint64_t v118 = v97;
                    if (v124) {
                      goto LABEL_123;
                    }
                    goto LABEL_121;
                  default:
                    goto LABEL_122;
                }
              }
            }
            double v105 = 1.0;
LABEL_154:
            if (!v190)
            {
              uint64_t v128 = (double *)v220;
              uint64_t v129 = v76 - 1;
              do
              {
                if (v105 == 0.0)
                {
                  *uint64_t v128 = 0.0;
                }
                else if (v105 != 1.0)
                {
                  *uint64_t v128 = *v128 / v105;
                }
                ++v128;
                --v129;
              }
              while (v129);
            }
            uint64_t v198 = v95;
            uint64_t v199 = v89;
            uint64_t v200 = v94;
            uint64_t v201 = v93;
            uint64_t v203 = v91;
            uint16x8_t v130 = v90;
            uint64_t v131 = *(void *)(v192 + 80);
            if (v131)
            {
              if (v196 <= 6 && ((1 << v196) & 0x54) != 0 || (uint16x8_t v132 = v76, v79 == 1)) {
                uint16x8_t v132 = v76 - 1;
              }
              if (v132)
              {
                int16x8_t v133 = (double *)(v131 + 8);
                uint64_t v134 = (double *)v220;
                do
                {
                  float v135 = *(v133 - 1);
                  float v136 = *v133;
                  double v137 = (*v134 - v135) / (float)(v136 - v135) + 0.0;
                  if (v137 < 1.0) {
                    double v138 = v137;
                  }
                  else {
                    double v138 = 1.0;
                  }
                  float v139 = v138;
                  double v140 = v139;
                  if (v137 >= 0.0) {
                    double v141 = v140;
                  }
                  else {
                    double v141 = 0.0;
                  }
                  *v134++ = v141;
                  v133 += 2;
                  --v132;
                }
                while (v132);
              }
            }
            CGFunctionEvaluate(TintTransform, (char *)v220, (double *)&v217);
            int v142 = Type;
            uint64_t v143 = v130;
            uint64_t v144 = v203;
            uint64_t v146 = v200;
            uint64_t v145 = v201;
            uint64_t v147 = v198;
            uint64_t v148 = v199;
            if (!v189)
            {
              uint64_t v149 = (double *)&v217;
              uint64_t v150 = v77 - 1;
              do
              {
                if (v105 == 0.0)
                {
                  *uint64_t v149 = 0.0;
                }
                else if (v105 != 1.0)
                {
                  *uint64_t v149 = v105 * *v149;
                }
                ++v149;
                --v150;
              }
              while (v150);
            }
            int v67 = v193;
            int v74 = v191;
            if (v77)
            {
              unint64_t v151 = 0;
              double v152 = v105 * v87 + v85;
              float v153 = v152;
              if (v152 > v88) {
                float v153 = v50;
              }
              if (v152 >= 0.0) {
                float v154 = v153;
              }
              else {
                float v154 = 0.0;
              }
              uint64_t v155 = v143;
              uint64_t v156 = v197;
              do
              {
                if (v151) {
                  char v157 = 0;
                }
                else {
                  char v157 = v73;
                }
                if (v79 == 1 && v77 - 1 == v151) {
                  char v157 = 1;
                }
                if (v84)
                {
                  _S2 = v154;
                  if ((v157 & 1) == 0)
                  {
                    long long v206 = v212;
                    long long v207 = v213;
                    long long v208 = v214;
                    long long v209 = v215;
                    float v160 = 0.0;
                    long long v204 = v210;
                    long long v205 = v211;
                    if (v142 == 5 && v151)
                    {
                      float v161 = 1.0;
                      if (v151 <= 2)
                      {
                        float v160 = *(v156 - 1);
                        float v161 = *v156;
                      }
                    }
                    else
                    {
                      float v161 = v83;
                    }
                    double v162 = (*((double *)&v217 + v151) - v160) * v87 / (float)(v161 - v160) + v85;
                    float v163 = v162;
                    if (v162 > v88) {
                      float v163 = v50;
                    }
                    if (v162 >= 0.0) {
                      _S2 = v163;
                    }
                    else {
                      _S2 = 0.0;
                    }
                  }
                }
                else
                {
                  _S2 = v105;
                  if ((v157 & 1) == 0) {
                    _S2 = *((double *)&v217 + v151);
                  }
                }
                switch(v36)
                {
                  case 1:
                    v148[v151] = (int)_S2;
                    break;
                  case 2:
                    *(_WORD *)uint64_t v155 = (int)_S2;
                    break;
                  case 4:
                    *(float *)&v144[4 * v151] = _S2;
                    break;
                  case 5:
                    __asm { FCVT            H2, S2 }
                    *(_WORD *)uint64_t v155 = _H2;
                    break;
                }
                ++v151;
                v156 += 2;
                v155 += 2;
              }
              while (v77 != v151);
            }
            uint16x8_t v95 = &v147[v186];
            int8x16_t v89 = &v148[v77];
            uint16x8_t v94 = &v146[2 * v186];
            int8x16_t v91 = &v144[v188];
            uint8x8_t v93 = &v145[4 * v186];
            int8x8_t v90 = &v143[v187];
            uint64_t v92 = v202 - 1;
          }
          while (v202 != 1);
        }
        v185 += v181;
        --v183;
        v184 += v180;
      }
      while (v183);
    }
    v220[4] = 0;
    v219[0] = 0;
    unint64_t v165 = v172;
    v220[0] = v172;
    v220[1] = v182;
    v220[2] = v178;
    v220[3] = v180;
    memcpy(&v220[5], v216, 0x130uLL);
    v220[10] = 0;
    v220[7] = v179;
    LODWORD(v220[4]) = *(_DWORD *)(v171 + 84);
    *(void *)&long long v217 = *v173;
    *((void *)&v217 + 1) = v182;
    *(void *)&long long v218 = v178;
    *((void *)&v218 + 1) = v176;
    memcpy(&v219[1], v173 + 5, 0x130uLL);
    LODWORD(v219[0]) = v220[4];
    double v166 = *(uint64_t (**)(uint64_t, void *, long long *, long long *))(v171 + 104);
    long long v167 = *(_OWORD *)(v177 + 48);
    long long v206 = *(_OWORD *)(v177 + 32);
    long long v207 = v167;
    long long v208 = *(_OWORD *)(v177 + 64);
    *(void *)&long long v209 = *(void *)(v177 + 80);
    long long v168 = *(_OWORD *)(v177 + 16);
    long long v204 = *(_OWORD *)v177;
    long long v205 = v168;
    uint64_t v40 = v166(v171, v220, &v217, &v204);
    if (v165 != v174) {
      free(v165);
    }
  }
  else
  {
    CGPostError((uint64_t)"%s : Unable to complete color conversion", v28, v29, v30, v31, v32, v33, v34, (char)"convert_deviceN");
    return 0;
  }
  return v40;
}

void indexed_converter_info(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 80) = 0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (*(void *)(a3 + 80)
    && ((uint64_t v8 = *(void *)(a1 + 200)) == 0 || (v9 = *(void *)(v8 + 24), (*(_DWORD *)(v9 + 28) - 5) > 1)
      ? (uint64_t v10 = 0)
      : (uint64_t v10 = **(void **)(v9 + 96)),
        int v36 = 0,
        (uint64_t v11 = CGCMSConverterCreate(*(void *)(a1 + 24), v10, *(unsigned int *)(a1 + 84), *(unsigned __int8 *)(a1 + 80), *(void *)(a1 + 72), &v36)) != 0))
  {
    uint64_t v16 = (const void *)v11;
    lookup_table = (char *)create_lookup_table(*(void *)(a1 + 200), v10, v11, *(const void **)(a3 + 80), v12, v13, v14, v15);
    *(void *)(a4 + 24) = lookup_table;
    CFRelease(v16);
  }
  else
  {
    lookup_table = 0;
  }
  uint64_t v18 = *(double **)(a2 + 80);
  if (v18)
  {
    uint64_t v19 = *(void *)(a1 + 200);
    if (v19 && (uint64_t v20 = *(void *)(v19 + 24), *(_DWORD *)(v20 + 28) == 5)) {
      double v21 = (double)*(unint64_t *)(*(void *)(v20 + 96) + 8);
    }
    else {
      double v21 = 1.84467441e19;
    }
    if (*v18 == 0.0 && v18[1] == v21)
    {
      int v22 = 0;
      int v23 = 0;
    }
    else if (*v18 == v21 && v18[1] == 0.0)
    {
      int v22 = 1;
      int v23 = 1;
    }
    else
    {
      int v22 = 0;
      int v23 = 2;
    }
    uint64_t v24 = lookup_table;
    if (lookup_table)
    {
      if (!v22) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v24 = *(char **)(a1 + 216);
      if (!v22)
      {
LABEL_34:
        *(_DWORD *)(a4 + 32) = v23;
        return;
      }
    }
    uint64_t v25 = *(unsigned int *)(a1 + 208);
    uint64_t v26 = *(void *)(a1 + 40);
    int v27 = malloc_type_calloc(v26 * v25, 1uLL, 0xD0BE99B9uLL);
    uint64_t v28 = v27;
    if (v25 && v27)
    {
      uint64_t v29 = 0;
      uint64_t v30 = &v24[v26 * (v25 - 1)];
      uint64_t v31 = v27;
      do
      {
        uint64_t v32 = v30;
        uint64_t v33 = v31;
        for (uint64_t i = v26; i; --i)
        {
          char v35 = *v32++;
          *v33++ = v35;
        }
        ++v29;
        v31 += v26;
        v30 -= v26;
      }
      while (v29 != v25);
    }
    if (lookup_table) {
      free(lookup_table);
    }
    *(void *)(a4 + 24) = v28;
    goto LABEL_34;
  }
}

uint64_t convert_indexed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  double v9 = 1.0;
  if (*(_DWORD *)(a4 + 32) == 2) {
    double v9 = (*(double *)(*(void *)(a2 + 80) + 8) - **(double **)(a2 + 80))
  }
       / (double)(*(_DWORD *)(a1 + 208) - 1);
  uint64_t v10 = (int *)(a3 + 40);
  uint64_t v11 = (_DWORD *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  BOOL v13 = v12 != 8 || (*(_DWORD *)(a3 + 40) - 7) > 2;
  int v325 = *(_DWORD *)(a4 + 32);
  if (!v13)
  {
    unint64_t v50 = *(void *)(a3 + 48);
    _ZF = v50 - 1 < 2 || v50 == 4;
    if (!_ZF) {
      _CGHandleAssert("convert_indexed_1_2_4_bit", 4127, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "bits_per_component == 1 || bits_per_component == 2 || bits_per_component == 4", "%lu bits per component content unhandled here", a6, a7, a8, *(void *)(a3 + 48));
    }
    uint64_t v52 = *(void *)(a4 + 24);
    if (!v52) {
      uint64_t v52 = *(void *)(a1 + 216);
    }
    uint64_t v54 = *(void *)(a2 + 8);
    uint64_t v53 = *(void *)(a2 + 16);
    uint64_t v55 = *(float **)a2;
    uint64_t v56 = *(void *)a3;
    uint64_t v57 = *(void *)(a1 + 40);
    memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
    unint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v59, v60, v61, v62, v63, v64, v65);
    if (v52)
    {
      int v68 = *(_DWORD *)(a2 + 64);
      if (v68 == 8) {
        int v69 = 1;
      }
      else {
        int v69 = *(_DWORD *)(a2 + 64);
      }
      if (v68 == 9) {
        int v70 = 3;
      }
      else {
        int v70 = v69;
      }
      int v71 = *(_DWORD *)(v8 + 64);
      if (v71 == 9)
      {
        int v71 = 3;
      }
      else if (v71 == 8)
      {
        int v71 = 1;
      }
      BOOL v323 = (v70 & 0xFFFFFFFD) == 4;
      float v147 = flt_1850CE358[v50 == 2];
      if (v50 == 1) {
        float v147 = 0.0039216;
      }
      if (v53)
      {
        uint64_t v148 = *(void *)(a2 + 24);
        uint64_t v149 = *(void *)(v8 + 24);
        int v150 = (*(_DWORD *)(a1 + 208) - 1);
        BOOL v152 = (v71 - 5) < 0xFFFFFFFC || (v70 - 5) < 0xFFFFFFFE;
        _ZF = v70 == 4;
        uint64_t v153 = -1;
        if (!_ZF) {
          uint64_t v153 = 1;
        }
        char v154 = v50 - 24;
        while (!v54)
        {
LABEL_113:
          uint64_t v55 = (float *)((char *)v55 + v148);
          v56 += v149;
          if (!--v53) {
            return 1;
          }
        }
        unsigned int v155 = 0;
        unint64_t v156 = 0;
        char v157 = (unsigned __int8 *)v55 + v323;
        uint64_t v158 = v54;
        uint64_t v159 = (unsigned char *)v56;
        while (1)
        {
          unsigned int v160 = *v157;
          if (v9 != 1.0)
          {
            double v67 = (double)v160 * v9 + 0.5 + **(double **)(a2 + 80);
            unsigned int v160 = (int)v67;
          }
          if (v152)
          {
            LOBYTE(v161) = -1;
            if (!v71) {
              goto LABEL_93;
            }
          }
          else
          {
            unsigned int v161 = v157[v153];
            if (v325 == 2)
            {
              double v67 = fmax(fmin((double)v161* (*(double *)(*(void *)(a2 + 80) + 24) - *(double *)(*(void *)(a2 + 80) + 16))+ 0.5+ *(double *)(*(void *)(a2 + 80) + 16) * 255.0, 255.0), 0.0);
              unsigned int v161 = (int)v67;
            }
            else if (v325 == 1)
            {
              LOBYTE(v161) = ~(_BYTE)v161;
            }
          }
          if (v71 == 4 || v71 == 2)
          {
            if (v50 < 0x19)
            {
              int v163 = v50;
              if (v155 >= 8) {
                goto LABEL_90;
              }
            }
            else
            {
              uint64_t v162 = v155 - 8;
              if (v155 >= 8)
              {
                do
                {
                  *v159++ = v156 >> v162;
                  v162 -= 8;
                  v155 -= 8;
                }
                while (v155 > 7);
              }
              unint64_t v156 = ((unint64_t)v161 >> v154) | (v156 << 24);
              v155 |= 0x18u;
              int v163 = v50 - 24;
LABEL_90:
              uint64_t v164 = v155 - 8;
              do
              {
                v155 -= 8;
                *v159++ = v156 >> v164;
                v164 -= 8;
              }
              while (v155 > 7);
            }
            unint64_t v156 = ~(-1 << v163) & v161 | (v156 << v163);
            v155 += v163;
          }
LABEL_93:
          if (v57)
          {
            uint64_t v165 = 0;
            unint64_t v166 = (v150 - v160) & ((int)(v150 - v160) >> 31);
            uint64_t v167 = v52 + v57 * (v160 + ((v150 - v160) & ((int)(v150 - v160) >> 31)));
            while (1)
            {
              LOBYTE(v67) = *(unsigned char *)(v167 + v165);
              *(float *)&double v67 = v147 * (float)LODWORD(v67);
              LODWORD(v166) = llroundf(*(float *)&v67);
              if (v50 >= 0x19) {
                break;
              }
              int v169 = v50;
              if (v155 >= 8) {
                goto LABEL_100;
              }
LABEL_102:
              unint64_t v156 = ~(-1 << v169) & v166 | (v156 << v169);
              v155 += v169;
              if (++v165 == v57) {
                goto LABEL_103;
              }
            }
            uint64_t v168 = v155 - 8;
            if (v155 >= 8)
            {
              do
              {
                *v159++ = v156 >> v168;
                v168 -= 8;
                v155 -= 8;
              }
              while (v155 > 7);
            }
            unint64_t v156 = (v166 >> v154) | (v156 << 24);
            v155 |= 0x18u;
            int v169 = v50 - 24;
LABEL_100:
            uint64_t v170 = v155 - 8;
            do
            {
              v155 -= 8;
              *v159++ = v156 >> v170;
              v170 -= 8;
            }
            while (v155 > 7);
            goto LABEL_102;
          }
LABEL_103:
          if ((v71 & 0xFFFFFFFD) == 1)
          {
            if (v50 < 0x19)
            {
              int v172 = v50;
              if (v155 >= 8) {
                goto LABEL_109;
              }
            }
            else
            {
              uint64_t v171 = v155 - 8;
              if (v155 >= 8)
              {
                do
                {
                  *v159++ = v156 >> v171;
                  v171 -= 8;
                  v155 -= 8;
                }
                while (v155 > 7);
              }
              unint64_t v156 = ((unint64_t)v161 >> v154) | (v156 << 24);
              v155 |= 0x18u;
              int v172 = v50 - 24;
LABEL_109:
              uint64_t v173 = v155 - 8;
              do
              {
                v155 -= 8;
                *v159++ = v156 >> v173;
                v173 -= 8;
              }
              while (v155 > 7);
            }
            unint64_t v156 = ~(-1 << v172) & v161 | (v156 << v172);
            v155 += v172;
          }
          v157 += BitsPerPixel >> 3;
          if (!--v158) {
            goto LABEL_113;
          }
        }
      }
      return 1;
    }
    float v109 = "convert_indexed_1_2_4_bit";
LABEL_267:
    CGPostError((uint64_t)"%s : Unable to complete color conversion", v36, v37, v38, v39, v40, v41, v42, (char)v109);
    return 0;
  }
  if (v12 == 8)
  {
    uint64_t v14 = *(void *)(a4 + 24);
    if (!v14) {
      uint64_t v14 = *(void *)(a1 + 216);
    }
    uint64_t v302 = v14;
    uint64_t v15 = *(void *)(a2 + 16);
    uint64_t v301 = *(void *)(a2 + 8);
    uint64_t v16 = *(float **)a2;
    uint64_t v17 = *(void *)a3;
    uint64_t v19 = *(void *)(a1 + 40);
    memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
    uint64_t v27 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v20, v21, v22, v23, v24, v25, v26);
    memcpy(__dst, (const void *)(v8 + 40), 0x130uLL);
    uint64_t v35 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v28, v29, v30, v31, v32, v33, v34);
    if (!v302)
    {
      float v109 = "convert_indexed_8bit";
      goto LABEL_267;
    }
    unint64_t v320 = v27;
    int v43 = *v10;
    if (*v10 > 5 || ((1 << v43) & 0x36) == 0) {
      _CGHandleAssert("convert_indexed_8bit", 4224, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "dst_component == kCGPixelComponent8BitInteger || dst_component == kCGPixelComponent16BitInteger || dst_component == kCGPixelComponent16BitFloat || dst_component == kCGPixelComponent32BitFloat", "unhandled component type %u", v40, v41, v42, *v10);
    }
    unint64_t v44 = v35;
    uint64_t v299 = *(void *)(v8 + 24);
    uint64_t v300 = *(void *)(a2 + 24);
    int v315 = *(_DWORD *)(a1 + 208);
    int Type = CGColorSpaceGetType(*(void **)(a1 + 24));
    memset(&v334, 0, sizeof(v334));
    memset(&v333, 0, sizeof(v333));
    memset(&v332, 0, sizeof(v332));
    if (Type == 5)
    {
      CGColorSpaceGetLabData(*(void *)(a1 + 24), v45, v46, v47, &v332);
      int v49 = 1132462080;
    }
    else
    {
      int v49 = 1132396544;
    }
    float v174 = *(float *)&v49;
    int v175 = v325;
    uint64_t v176 = v15;
    uint64_t v177 = v301;
    uint64_t v178 = v302;
    uint64_t v179 = v16;
    uint64_t v180 = v17;
    uint64_t v181 = a2;
    int v182 = *(_DWORD *)(a2 + 64);
    uint64_t v184 = v299;
    uint64_t v183 = v300;
    if (v182 == 9)
    {
      int v182 = 3;
    }
    else if (v182 == 8)
    {
      int v182 = 1;
    }
    int v187 = *(_DWORD *)(v8 + 64);
    if (v187 == 9)
    {
      unint64_t v104 = 3;
    }
    else if (v187 == 8)
    {
      unint64_t v104 = 1;
    }
    else
    {
      unint64_t v104 = *(unsigned int *)(v8 + 64);
    }
    BOOL v304 = (v182 & 0xFFFFFFFD) == 4;
    BOOL v189 = v104 == 2 || (v104 & 0xFFFFFFFD) == 4;
    BOOL v303 = v189;
    if (v15)
    {
      unint64_t v291 = (int *)(v8 + 40);
      uint64_t v294 = v8;
      uint64_t v105 = v320 >> 3;
      uint64_t v106 = v44 >> 3;
      int v190 = (v315 - 1);
      BOOL v192 = (v182 - 3) < 2 && (v104 - 1) < 4;
      BOOL v324 = v192;
      if (v182 == 4) {
        uint64_t v193 = -1;
      }
      else {
        uint64_t v193 = 1;
      }
      unint64_t v311 = v44 >> 5;
      uint64_t v314 = v193;
      unint64_t v319 = v44 >> 4;
      uint64_t v297 = v105;
      unint64_t v298 = v104;
      uint64_t v296 = v44 >> 3;
      int v295 = v190;
      do
      {
        if (v177)
        {
          uint64_t v194 = (float *)(v180 + 4 * v303);
          uint64_t v195 = (char *)(v180 + 2 * v303);
          unsigned int v196 = (unsigned char *)(v180 + v303);
          uint64_t v197 = (unsigned __int8 *)v179 + v304;
          uint64_t v198 = v177;
          uint64_t v199 = v195;
          do
          {
            unsigned int v200 = *v197;
            if (v9 != 1.0) {
              unsigned int v200 = (int)((double)v200 * v9 + 0.5 + **(double **)(v181 + 80));
            }
            vImage_Buffer v330 = v333;
            vImage_Buffer v331 = v334;
            vImage_Buffer permuteMap = v332;
            if (v19)
            {
              unint64_t v201 = 0;
              uint64_t v202 = v178 + v19 * (v200 + ((v190 - v200) & ((int)(v190 - v200) >> 31)));
              uint64_t v203 = 32;
              while (2)
              {
                switch(v43)
                {
                  case 1:
                    v196[v201] = *(unsigned char *)(v202 + v201);
                    goto LABEL_167;
                  case 2:
                    v199[v201] = *(unsigned __int8 *)(v202 + v201) | (*(unsigned __int8 *)(v202 + v201) << 8);
                    goto LABEL_167;
                  case 4:
                    __dst[1] = v330;
                    __dst[2] = v331;
                    unsigned int width = permuteMap.width;
                    float v205 = 1.0;
                    __dst[0] = permuteMap;
                    float v206 = 0.0;
                    if (Type == 5)
                    {
                      if (v201)
                      {
                        if (v201 <= 2)
                        {
                          float v206 = *(double *)((char *)&__dst[0].data + v203);
                          float v205 = *(double *)((char *)&__dst[0].height + v203);
                        }
                      }
                      else
                      {
                        float v205 = 100.0;
                      }
                    }
                    LOBYTE(width) = *(unsigned char *)(v202 + v201);
                    v194[v201] = v206 + (float)((float)((float)(v205 - v206) * (float)width) / v174);
                    goto LABEL_167;
                  case 5:
                    __dst[1] = v330;
                    __dst[2] = v331;
                    unsigned int v207 = permuteMap.width;
                    float v208 = 1.0;
                    __dst[0] = permuteMap;
                    float v209 = 0.0;
                    if (Type == 5)
                    {
                      if (v201)
                      {
                        if (v201 <= 2)
                        {
                          float v209 = *(double *)((char *)&__dst[0].data + v203);
                          float v208 = *(double *)((char *)&__dst[0].height + v203);
                        }
                      }
                      else
                      {
                        float v208 = 100.0;
                      }
                    }
                    LOBYTE(v207) = *(unsigned char *)(v202 + v201);
                    _S0 = v209 + (float)((float)((float)(v208 - v209) * (float)v207) / v174);
                    __asm { FCVT            H0, S0 }
                    *(_WORD *)&v195[2 * v201] = LOWORD(_S0);
LABEL_167:
                    ++v201;
                    v203 += 16;
                    if (v19 == v201) {
                      break;
                    }
                    continue;
                  default:
                    goto LABEL_301;
                }
                break;
              }
            }
            if (!v104) {
              goto LABEL_204;
            }
            if (v324)
            {
              unsigned int v213 = v197[v314];
              if (v175 == 2)
              {
                int v214 = (int)fmax(fmin((double)v213* (*(double *)(*(void *)(v181 + 80) + 24) - *(double *)(*(void *)(v181 + 80) + 16))+ 0.5+ *(double *)(*(void *)(v181 + 80) + 16) * 255.0, 255.0), 0.0);
              }
              else if (v175 == 1)
              {
                LOWORD(v214) = ~(_WORD)v213;
              }
              else
              {
                LOWORD(v214) = v197[v314];
              }
            }
            else
            {
              LOWORD(v214) = 255;
            }
            if (v104 > 6) {
LABEL_308:
            }
              _CGHandleAssert("write_out_alpha", 4062, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled alpha info %u", v104, v105, v106, v104);
            uint64_t v215 = v19;
            if (((1 << v104) & 0x2A) == 0)
            {
              if (((1 << v104) & 0x54) == 0) {
                goto LABEL_308;
              }
              uint64_t v215 = -1;
            }
            switch(v43)
            {
              case 1:
                v196[v215] = v214;
                if (v19 && v104 <= 2 && (_BYTE)v214 != 0xFF)
                {
                  int v216 = v214 | (v214 << 8);
                  long long v217 = v196;
                  uint64_t v218 = v19;
                  do
                  {
                    unsigned char *v217 = (v216 * *v217 + 0x7FFF) >> 16;
                    ++v217;
                    --v218;
                  }
                  while (v218);
LABEL_204:
                  v197 += v105;
                  switch(v43)
                  {
                    case 1:
                      goto LABEL_206;
                    case 2:
                      goto LABEL_208;
                    case 4:
                      goto LABEL_211;
                    case 5:
                      goto LABEL_214;
                    default:
                      goto LABEL_305;
                  }
                }
                v197 += v105;
LABEL_206:
                v196 += v106;
                break;
              case 2:
                v199[v215] = v214 | (unsigned __int16)((_WORD)v214 << 8);
                if (v19 && v104 <= 2 && (_BYTE)v214 != 0xFF)
                {
                  int v225 = v214 | (v214 << 8);
                  uint64_t v226 = v199;
                  uint64_t v227 = v19;
                  do
                  {
                    *uint64_t v226 = (v225 * (unsigned __int16)*v226 + 0x7FFF) >> 16;
                    ++v226;
                    --v227;
                  }
                  while (v227);
                  goto LABEL_204;
                }
                v197 += v105;
LABEL_208:
                v199 += v319;
                break;
              case 4:
                if ((_BYTE)v214 == 0xFF)
                {
                  v194[v215] = 1.0;
                }
                else
                {
                  float v219 = (double)v214 / 255.0;
                  v194[v215] = v219;
                  if (v104 <= 2)
                  {
                    if ((_BYTE)v214)
                    {
                      uint64_t v220 = v194;
                      uint64_t v221 = v19;
                      if (v19)
                      {
                        do
                        {
                          *uint64_t v220 = *v220 * v194[v215];
                          ++v220;
                          --v221;
                        }
                        while (v221);
                        goto LABEL_204;
                      }
                    }
                    else if (v19)
                    {
                      unint64_t v307 = v179;
                      uint64_t v309 = v176;
                      uint64_t v305 = v180;
                      bzero(v194, 4 * v19);
                      int v190 = v295;
                      uint64_t v106 = v296;
                      uint64_t v105 = v297;
                      unint64_t v104 = v298;
                      uint64_t v184 = v299;
                      uint64_t v183 = v300;
                      uint64_t v177 = v301;
                      uint64_t v180 = v305;
                      uint64_t v179 = v307;
                      uint64_t v176 = v309;
                      uint64_t v178 = v302;
                      int v175 = v325;
                      uint64_t v181 = a2;
                    }
                  }
                }
                v197 += v105;
LABEL_211:
                v194 += v311;
                break;
              case 5:
                if ((_BYTE)v214 == 0xFF)
                {
                  *(_WORD *)&v195[2 * v215] = COERCE_UNSIGNED_INT(1.0);
                }
                else
                {
                  _S0 = (float)v214 / 255.0;
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)&v195[2 * v215] = LOWORD(_S0);
                  if (v104 <= 2)
                  {
                    if ((_BYTE)v214)
                    {
                      uint64_t v223 = (short float *)v195;
                      uint64_t v224 = v19;
                      if (v19)
                      {
                        do
                        {
                          *uint64_t v223 = *v223 * *(short float *)&v195[2 * v215];
                          ++v223;
                          --v224;
                        }
                        while (v224);
                        goto LABEL_204;
                      }
                    }
                    else if (v19)
                    {
                      unint64_t v308 = v179;
                      uint64_t v310 = v176;
                      uint64_t v306 = v180;
                      bzero(v195, 2 * v19);
                      int v190 = v295;
                      uint64_t v106 = v296;
                      uint64_t v105 = v297;
                      unint64_t v104 = v298;
                      uint64_t v184 = v299;
                      uint64_t v183 = v300;
                      uint64_t v177 = v301;
                      uint64_t v180 = v306;
                      uint64_t v179 = v308;
                      uint64_t v176 = v310;
                      uint64_t v178 = v302;
                      int v175 = v325;
                      uint64_t v181 = a2;
                    }
                  }
                }
                v197 += v105;
LABEL_214:
                v195 += 2 * v319;
                break;
              default:
                _CGHandleAssert("write_out_alpha", 4080, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v104, v105, v106, v43);
            }
            --v198;
          }
          while (v198);
        }
        uint64_t v179 = (float *)((char *)v179 + v183);
        v180 += v184;
        --v176;
      }
      while (v176);
      uint64_t v10 = v291;
      uint64_t v8 = v294;
      int v187 = *(_DWORD *)(v294 + 64);
    }
    if ((v187 - 1) > 8) {
      uint64_t v228 = 0;
    }
    else {
      uint64_t v228 = qword_185211998[v187 - 1];
    }
    if (*(_DWORD *)(v8 + 68) == 0x2000 && *v10 == 1 && v228 + *(void *)(v8 + 56) == 4)
    {
      CGRect v229 = *(char **)v8;
      uint64_t v230 = *(void *)(v8 + 8) * *(void *)(v8 + 16);
      LODWORD(permuteMap.data) = 66051;
      __dst[0].datdouble a = v229;
      __dst[0].double height = 1;
      __dst[0].unsigned int width = v230 & 0x3FFFFFFFFFFFFFFFLL;
      __dst[0].rowBytes = 4 * v230;
      vImagePermuteChannels_ARGB8888(__dst, __dst, (const uint8_t *)&permuteMap, 0);
    }
    return 1;
  }
  if (v12 == 32)
  {
    if (*v11 == 4)
    {
      uint64_t v111 = *(void *)(a4 + 24);
      memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
      if (CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v112, v113, v114, v115, v116, v117, v118) != 32
        || *(void *)(a2 + 48) != 32)
      {
        memcpy(__dst, v11, 0x130uLL);
        char v272 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v265, v266, v267, v268, v269, v270, v271);
        _CGHandleAssert("convert_indexed_float", 4425, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "CGBitmapPixelInfoGetBitsPerPixel(src->pixel_info) == 32 && CGBitmapPixelInfoGetBitsPerComponent(src->pixel_info) == 32", "invalid pixel type bpp %lu bpc %lu", v273, v274, v275, v272);
      }
      if (!v111) {
        uint64_t v111 = *(void *)(a1 + 216);
      }
      uint64_t v120 = *(void *)(a2 + 8);
      uint64_t v119 = *(void *)(a2 + 16);
      char v121 = *(float **)a2;
      uint64_t v293 = v8;
      char v122 = *(char **)v8;
      uint64_t v123 = *(void *)(a1 + 40);
      memcpy(__dst, v11, 0x130uLL);
      uint64_t v131 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v124, v125, v126, v127, v128, v129, v130);
      memcpy(__dst, v10, 0x130uLL);
      uint64_t v139 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v132, v133, v134, v135, v136, v137, v138);
      if (!v111)
      {
        float v109 = "convert_indexed_float";
        goto LABEL_267;
      }
      unint64_t v318 = v139;
      unint64_t v322 = v131;
      if (*v10 > 5 || ((1 << *v10) & 0x36) == 0) {
        _CGHandleAssert("convert_indexed_float", 4450, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "dst_component == kCGPixelComponent8BitInteger || dst_component == kCGPixelComponent16BitInteger || dst_component == kCGPixelComponent16BitFloat || dst_component == kCGPixelComponent32BitFloat", "invalid destination component type %u", v40, v41, v42, *v10);
      }
      int v327 = *v10;
      uint64_t v140 = *(void *)(a2 + 24);
      uint64_t v141 = *(void *)(v293 + 24);
      int v313 = *(_DWORD *)(a1 + 208);
      int v145 = CGColorSpaceGetType(*(void **)(a1 + 24));
      memset(&v334, 0, sizeof(v334));
      memset(&v333, 0, sizeof(v333));
      memset(&v332, 0, sizeof(v332));
      if (v145 == 5)
      {
        CGColorSpaceGetLabData(*(void *)(a1 + 24), v142, v143, v144, &v332);
        float v146 = 256.0;
      }
      else
      {
        float v146 = 255.0;
      }
      if (v119)
      {
        float v231 = v9;
        unint64_t v232 = v318 >> 6;
        do
        {
          if (v120)
          {
            uint64_t v233 = v120;
            double v234 = v121;
            v235 = v122;
            unint64_t v236 = v122;
            uint64_t v237 = v122;
            uint64_t v238 = (uint64_t)v122;
            do
            {
              float v239 = *v234 * 255.0;
              if (v231 != 1.0) {
                float v239 = **(double **)(a2 + 80) + (float)((float)(v239 * v231) + 0.5);
              }
              float v240 = fmaxf(v239, 0.0);
              if (v240 > 255.0) {
                float v240 = 255.0;
              }
              vImage_Buffer v330 = v333;
              vImage_Buffer v331 = v334;
              vImage_Buffer permuteMap = v332;
              if (v123)
              {
                unint64_t v143 = 0;
                uint64_t v144 = v111
                     + v123
                     * (((v313 - 1 - (int)v240) & (((v313 - 1) - (int)v240) >> 31))
                                       + (int)v240);
                uint64_t v241 = 32;
                do
                {
                  switch(v327)
                  {
                    case 1:
                      *(unsigned char *)(v238 + v143) = *(unsigned char *)(v144 + v143);
                      break;
                    case 2:
                      *(_WORD *)&v237[2 * v143] = *(unsigned __int8 *)(v144 + v143) | (*(unsigned __int8 *)(v144 + v143) << 8);
                      break;
                    case 4:
                      __dst[1] = v330;
                      __dst[2] = v331;
                      unsigned int v242 = permuteMap.width;
                      float v243 = 1.0;
                      __dst[0] = permuteMap;
                      float v244 = 0.0;
                      if (v145 == 5)
                      {
                        if (v143)
                        {
                          if (v143 <= 2)
                          {
                            float v244 = *(double *)((char *)&__dst[0].data + v241);
                            float v243 = *(double *)((char *)&__dst[0].height + v241);
                          }
                        }
                        else
                        {
                          float v243 = 100.0;
                        }
                      }
                      LOBYTE(v242) = *(unsigned char *)(v144 + v143);
                      *(float *)&v235[4 * v143] = v244 + (float)((float)((float)(v243 - v244) * (float)v242) / v146);
                      break;
                    case 5:
                      __dst[1] = v330;
                      __dst[2] = v331;
                      unsigned int v245 = permuteMap.width;
                      float v246 = 1.0;
                      __dst[0] = permuteMap;
                      float v247 = 0.0;
                      if (v145 == 5)
                      {
                        if (v143)
                        {
                          if (v143 <= 2)
                          {
                            float v247 = *(double *)((char *)&__dst[0].data + v241);
                            float v246 = *(double *)((char *)&__dst[0].height + v241);
                          }
                        }
                        else
                        {
                          float v246 = 100.0;
                        }
                      }
                      LOBYTE(v245) = *(unsigned char *)(v144 + v143);
                      _S5 = v247 + (float)((float)((float)(v246 - v247) * (float)v245) / v146);
                      __asm { FCVT            H5, S5 }
                      *(_WORD *)&v236[2 * v143] = LOWORD(_S5);
                      break;
                    default:
                      _CGHandleAssert("write_out_pixel", 3967, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v238, v143, v144, v327);
                  }
                  ++v143;
                  v241 += 16;
                }
                while (v123 != v143);
              }
              switch(v327)
              {
                case 1:
                  v238 += v318 >> 5;
                  break;
                case 2:
                  v237 += 2 * v232;
                  break;
                case 4:
                  v235 += 4 * (v318 >> 7);
                  break;
                case 5:
                  v236 += 2 * v232;
                  break;
                default:
                  _CGHandleAssert("increment_dest_pointer", 4116, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v238, v143, v144, v327);
              }
              v234 += v322 >> 5;
              --v233;
            }
            while (v233);
          }
          char v121 = (float *)((char *)v121 + v140);
          v122 += v141;
          --v119;
        }
        while (v119);
      }
      return 1;
    }
LABEL_309:
    CGPostError((uint64_t)"%s : Unable to complete color conversion", a2, a3, a4, a5, a6, a7, a8, (char)"convert_indexed");
    _CGHandleAssert("convert_indexed", 4508, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "", "Unimplemented", v287, v288, v289, v290);
  }
  if (v12 != 16) {
    goto LABEL_309;
  }
  if (*v11 != 5)
  {
    if (*v11 == 2)
    {
      uint64_t v73 = *(void *)(a4 + 24);
      memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
      if (CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v74, v75, v76, v77, v78, v79, v80) != 16
        || *(void *)(a2 + 48) != 16
        || *v11 != 2)
      {
        memcpy(__dst, v11, 0x130uLL);
        char v283 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v276, v277, v278, v279, v280, v281, v282);
        _CGHandleAssert("convert_indexed_16bit", 4298, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "CGBitmapPixelInfoGetBitsPerPixel(src->pixel_info) == 16 && CGBitmapPixelInfoGetBitsPerComponent(src->pixel_info) == 16 && CGBitmapPixelInfoGetCGPixelComponentType(src->pixel_info) == kCGPixelComponent16BitInteger", "bpp %lu  bpc %lu  type %u", v284, v285, v286, v283);
      }
      if (!v73) {
        uint64_t v73 = *(void *)(a1 + 216);
      }
      uint64_t v82 = *(void *)(a2 + 8);
      uint64_t v81 = *(void *)(a2 + 16);
      float v83 = *(float **)a2;
      uint64_t v292 = v8;
      char v84 = *(char **)v8;
      uint64_t v85 = *(void *)(a1 + 40);
      memcpy(__dst, v11, 0x130uLL);
      uint64_t v93 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v86, v87, v88, v89, v90, v91, v92);
      memcpy(__dst, v10, 0x130uLL);
      uint64_t v101 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v94, v95, v96, v97, v98, v99, v100);
      if (!v73)
      {
        float v109 = "convert_indexed_16bit";
        goto LABEL_267;
      }
      unint64_t v317 = v101;
      unint64_t v321 = v93;
      if (*v10 > 5 || ((1 << *v10) & 0x36) == 0) {
        _CGHandleAssert("convert_indexed_16bit", 4323, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "dst_component == kCGPixelComponent8BitInteger || dst_component == kCGPixelComponent16BitInteger || dst_component == kCGPixelComponent16BitFloat || dst_component == kCGPixelComponent32BitFloat", "invalid destination component type = %u", v40, v41, v42, *v10);
      }
      int v326 = *v10;
      uint64_t v102 = *(void *)(a2 + 24);
      uint64_t v103 = *(void *)(v292 + 24);
      int v312 = *(_DWORD *)(a1 + 208);
      int v107 = CGColorSpaceGetType(*(void **)(a1 + 24));
      memset(&v334, 0, sizeof(v334));
      memset(&v333, 0, sizeof(v333));
      memset(&v332, 0, sizeof(v332));
      if (v107 == 5)
      {
        CGColorSpaceGetLabData(*(void *)(a1 + 24), v104, v105, v106, &v332);
        float v108 = 256.0;
      }
      else
      {
        float v108 = 255.0;
      }
      LOBYTE(v43) = v326;
      if (v81)
      {
        unint64_t v249 = v317 >> 5;
        do
        {
          if (v82)
          {
            uint64_t v250 = v82;
            double v251 = v83;
            double v252 = v84;
            size_t v253 = v84;
            uint8x8_t v254 = v84;
            unint64_t v255 = v84;
            do
            {
              unsigned int v256 = *(unsigned __int16 *)v251;
              if (v9 != 1.0) {
                unsigned int v256 = (int)((double)v256 * v9 + 0.5 + **(double **)(a2 + 80));
              }
              unsigned int v257 = v256 >> 8;
              vImage_Buffer v330 = v333;
              vImage_Buffer v331 = v334;
              vImage_Buffer permuteMap = v332;
              if (v85)
              {
                unint64_t v104 = 0;
                uint64_t v105 = v73
                     + v85
                     * (v257 + ((v312 - 1 - v257) & ((int)((v312 - 1) - v257) >> 31)));
                uint64_t v106 = 32;
                do
                {
                  switch(v326)
                  {
                    case 1:
                      v255[v104] = *(unsigned char *)(v105 + v104);
                      break;
                    case 2:
                      *(_WORD *)&v254[2 * v104] = *(unsigned __int8 *)(v105 + v104) | (*(unsigned __int8 *)(v105 + v104) << 8);
                      break;
                    case 4:
                      __dst[1] = v330;
                      __dst[2] = v331;
                      unsigned int v258 = permuteMap.width;
                      float v259 = 1.0;
                      __dst[0] = permuteMap;
                      float v260 = 0.0;
                      if (v107 == 5)
                      {
                        if (v104)
                        {
                          if (v104 <= 2)
                          {
                            float v260 = *(double *)((char *)&__dst[0].data + v106);
                            float v259 = *(double *)((char *)&__dst[0].height + v106);
                          }
                        }
                        else
                        {
                          float v259 = 100.0;
                        }
                      }
                      LOBYTE(v258) = *(unsigned char *)(v105 + v104);
                      *(float *)&v252[4 * v104] = v260 + (float)((float)((float)(v259 - v260) * (float)v258) / v108);
                      break;
                    case 5:
                      __dst[1] = v330;
                      __dst[2] = v331;
                      unsigned int v261 = permuteMap.width;
                      float v262 = 1.0;
                      __dst[0] = permuteMap;
                      float v263 = 0.0;
                      if (v107 == 5)
                      {
                        if (v104)
                        {
                          if (v104 <= 2)
                          {
                            float v263 = *(double *)((char *)&__dst[0].data + v106);
                            float v262 = *(double *)((char *)&__dst[0].height + v106);
                          }
                        }
                        else
                        {
                          float v262 = 100.0;
                        }
                      }
                      LOBYTE(v261) = *(unsigned char *)(v105 + v104);
                      _S3 = v263 + (float)((float)((float)(v262 - v263) * (float)v261) / v108);
                      __asm { FCVT            H3, S3 }
                      *(_WORD *)&v253[2 * v104] = LOWORD(_S3);
                      break;
                    default:
LABEL_301:
                      _CGHandleAssert("write_out_pixel", 3967, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v104, v105, v106, v43);
                  }
                  ++v104;
                  v106 += 16;
                }
                while (v85 != v104);
              }
              switch(v326)
              {
                case 1:
                  v255 += v317 >> 4;
                  break;
                case 2:
                  v254 += 2 * v249;
                  break;
                case 4:
                  v252 += 4 * (v317 >> 6);
                  break;
                case 5:
                  v253 += 2 * v249;
                  break;
                default:
LABEL_305:
                  _CGHandleAssert("increment_dest_pointer", 4116, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v104, v105, v106, v43);
              }
              double v251 = (float *)((char *)v251 + 2 * (v321 >> 4));
              --v250;
            }
            while (v250);
          }
          float v83 = (float *)((char *)v83 + v102);
          v84 += v103;
          --v81;
        }
        while (v81);
      }
      return 1;
    }
    goto LABEL_309;
  }
  uint64_t v185 = *(void *)(a4 + 24);

  return convert_indexed_float16(a1, a2, (uint64_t *)a3, v185, v9);
}

uint64_t convert_indexed_float16(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, double a5)
{
  uint64_t v121 = a1;
  uint64_t v120 = a2;
  uint64_t v119 = a3;
  uint64_t v118 = a4;
  double v117 = a5;
  memcpy(__dst, (const void *)(a2 + 40), sizeof(__dst));
  uint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v5, v6, v7, v8, v9, v10, v11);
  BOOL v13 = 0;
  if (BitsPerPixel == 16)
  {
    memcpy(v115, (const void *)(v120 + 40), sizeof(v115));
    CGPixelComponentunsigned int Type = CGBitmapPixelInfoGetCGPixelComponentType(v115[1]);
    BOOL v13 = 0;
    if (CGPixelComponentType == 16)
    {
      memcpy(v114, (const void *)(v120 + 40), sizeof(v114));
      BOOL v13 = CGBitmapPixelInfoGetCGPixelComponentType(v114[0]) == 5;
    }
  }
  if (!v13)
  {
    memcpy(v113, (const void *)(v120 + 40), sizeof(v113));
    char v22 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v113, v15, v16, v17, v18, v19, v20, v21);
    memcpy(v112, (const void *)(v120 + 40), sizeof(v112));
    CGBitmapPixelInfoGetCGPixelComponentType(v112[1]);
    memcpy(v111, (const void *)(v120 + 40), sizeof(v111));
    CGBitmapPixelInfoGetCGPixelComponentType(v111[0]);
    _CGHandleAssert("convert_indexed_float16", 4361, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "CGBitmapPixelInfoGetBitsPerPixel(src->pixel_info) == 16 && CGBitmapPixelInfoGetBitsPerComponent(src->pixel_info) == 16 && CGBitmapPixelInfoGetCGPixelComponentType(src->pixel_info) == kCGPixelComponent16BitFloat", "bpp %lu  bpc %lu  type %u", v23, v24, v25, v22);
  }
  if (!v118) {
    uint64_t v118 = *(void *)(v121 + 216);
  }
  uint64_t v110 = 0;
  uint64_t v110 = *(void *)(v120 + 8);
  uint64_t v109 = 0;
  uint64_t v109 = *(void *)(v120 + 16);
  float v108 = 0;
  float v108 = *(__int16 **)v120;
  uint64_t v107 = 0;
  uint64_t v107 = *v119;
  uint64_t v106 = 0;
  uint64_t v106 = *(void *)(v121 + 40);
  unint64_t v105 = 0;
  memcpy(v104, (const void *)(v120 + 40), sizeof(v104));
  unint64_t v105 = (unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v104, v26, v27, v28, v29, v30, v31, v32) >> 4;
  unint64_t v103 = 0;
  memcpy(v102, v119 + 5, sizeof(v102));
  unint64_t v103 = (unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v102, v33, v34, v35, v36, v37, v38, v39) >> 4;
  uint64_t v101 = 0;
  uint64_t v101 = *(void *)(v120 + 24);
  uint64_t v100 = 0;
  uint64_t v100 = v119[3];
  unsigned __int8 v99 = 0;
  unsigned __int8 v99 = *(_DWORD *)(v121 + 208) - 1;
  if (v118)
  {
    unsigned int v97 = 0;
    memcpy(v96, v119 + 5, sizeof(v96));
    unsigned int v97 = CGBitmapPixelInfoGetCGPixelComponentType(v96[0]);
    BOOL v50 = 1;
    if (v97 != 1)
    {
      BOOL v50 = 1;
      if (v97 != 2)
      {
        BOOL v50 = 1;
        if (v97 != 5) {
          BOOL v50 = v97 == 4;
        }
      }
    }
    if (!v50) {
      _CGHandleAssert("convert_indexed_float16", 4386, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "dst_component == kCGPixelComponent8BitInteger || dst_component == kCGPixelComponent16BitInteger || dst_component == kCGPixelComponent16BitFloat || dst_component == kCGPixelComponent32BitFloat", "invalid destination component type %u", v47, v48, v49, v97);
    }
    unsigned int Type = 0;
    unsigned int Type = CGColorSpaceGetType(*(void **)(v121 + 24));
    memset(__b, 0, sizeof(__b));
    if (Type == 5) {
      CGColorSpaceGetLabData(*(void *)(v121 + 24), v51, v52, v53, __b);
    }
    else {
      memset(__b, 0, sizeof(__b));
    }
    float v93 = 0.0;
    float v54 = 256.0;
    if (Type != 5) {
      float v54 = 255.0;
    }
    float v93 = v54;
    float v55 = v117;
    float v92 = v55;
    while (v109--)
    {
      uint64_t v91 = v110;
      uint64_t v90 = v108;
      uint64_t v89 = v107;
      uint64_t v88 = v107;
      uint64_t v87 = v107;
      for (uint64_t i = v107; v91--; increment_dest_pointer(v97, &v89, &v88, &v87, &i, v103, v79, v80))
      {
        __int16 v85 = 0;
        _H0 = *v90;
        __asm { FCVT            S0, H0 }
        _S0 = _S0 * 255.0;
        __asm { FCVT            H0, S0 }
        __int16 v85 = LOWORD(_S0);
        if (v92 != 1.0)
        {
          float v65 = **(double **)(v120 + 80);
          _H1 = v85;
          __asm { FCVT            S1, H1 }
          _S0 = v65 + (float)((float)(_S1 * v92) + 0.5);
          __asm { FCVT            H0, S0 }
          __int16 v85 = LOWORD(_S0);
        }
        _H0 = v85;
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0)
        {
          _S0 = 0.0;
        }
        else
        {
          _H0 = v85;
          __asm { FCVT            S0, H0 }
        }
        if (_S0 <= 255.0)
        {
          _H0 = v85;
          __asm { FCVT            S0, H0 }
          if (_S0 <= 0.0)
          {
            _S0 = 0;
          }
          else
          {
            _H0 = v85;
            __asm { FCVT            S0, H0 }
          }
        }
        else
        {
          _S0 = 1132396544;
        }
        __asm { FCVT            H0, S0 }
        __int16 v85 = _H0;
        __asm { FCVT            S0, H0 }
        unsigned __int8 v84 = (int)_S0;
        uint64_t pixel_ptr = 0;
        uint64_t pixel_ptr = get_pixel_ptr(v118, v84, v99, v106);
        memcpy(v82, __b, sizeof(v82));
        write_out_pixel(v97, v89, v88, v87, i, pixel_ptr, Type, v82, v93, v106);
        v90 += v105;
      }
      float v108 = (__int16 *)((char *)v108 + v101);
      v107 += v100;
    }
    char v122 = 1;
    int v98 = 1;
  }
  else
  {
    CGPostError((uint64_t)"%s : Unable to complete color conversion", v40, v41, v42, v43, v44, v45, v46, (char)"convert_indexed_float16");
    char v122 = 0;
    int v98 = 1;
  }
  return v122 & 1;
}

uint64_t get_pixel_ptr(uint64_t a1, int a2, int a3, uint64_t a4)
{
  return a1 + (((a3 - a2) & ((a3 - a2) >> 31)) + a2) * a4;
}

uint64_t write_out_pixel(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8, float a9, uint64_t a10)
{
  if (a10)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 32;
    do
    {
      switch((int)result)
      {
        case 1:
          *(unsigned char *)(a2 + v10) = *(unsigned char *)(a6 + v10);
          break;
        case 2:
          *(_WORD *)(a3 + 2 * v10) = *(unsigned __int8 *)(a6 + v10) | (*(unsigned __int8 *)(a6 + v10) << 8);
          break;
        case 4:
          long long v12 = a8[3];
          long long v29 = a8[2];
          long long v30 = v12;
          long long v13 = a8[5];
          long long v31 = a8[4];
          long long v32 = v13;
          long long v14 = a8[1];
          float v15 = 1.0;
          long long v27 = *a8;
          long long v28 = v14;
          float v16 = 0.0;
          if (a7 == 5)
          {
            if (v10)
            {
              if (v10 <= 2)
              {
                float v16 = *(double *)((char *)&v27 + v11);
                float v15 = *(double *)((char *)&v27 + v11 + 8);
              }
            }
            else
            {
              float v15 = 100.0;
            }
          }
          LOBYTE(v14) = *(unsigned char *)(a6 + v10);
          *(float *)(a5 + 4 * v10) = v16 + (float)((float)((float)(v15 - v16) * (float)v14) / a9);
          break;
        case 5:
          long long v17 = a8[3];
          long long v29 = a8[2];
          long long v30 = v17;
          long long v18 = a8[5];
          long long v31 = a8[4];
          long long v32 = v18;
          long long v19 = a8[1];
          float v20 = 1.0;
          long long v27 = *a8;
          long long v28 = v19;
          float v21 = 0.0;
          if (a7 == 5)
          {
            if (v10)
            {
              if (v10 <= 2)
              {
                float v21 = *(double *)((char *)&v27 + v11);
                float v20 = *(double *)((char *)&v27 + v11 + 8);
              }
            }
            else
            {
              float v20 = 100.0;
            }
          }
          LOBYTE(v19) = *(unsigned char *)(a6 + v10);
          _S1 = v21 + (float)((float)((float)(v20 - v21) * (float)v19) / a9);
          __asm { FCVT            H1, S1 }
          *(_WORD *)(a4 + 2 * v10) = LOWORD(_S1);
          break;
        default:
          _CGHandleAssert("write_out_pixel", 3967, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", a6, a7, (uint64_t)a8, result);
      }
      ++v10;
      v11 += 16;
    }
    while (a10 != v10);
  }
  return result;
}

uint64_t increment_dest_pointer(uint64_t result, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch((int)result)
  {
    case 1:
      *a2 += a6;
      break;
    case 2:
      *a3 += a6 & 0xFFFFFFFFFFFFFFFELL;
      break;
    case 4:
      *a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      break;
    case 5:
      *a4 += a6 & 0xFFFFFFFFFFFFFFFELL;
      break;
    default:
      _CGHandleAssert("increment_dest_pointer", 4116, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", a6, a7, a8, result);
  }
  return result;
}

uint64_t (*__convert_using_colorsync_transform_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  uint64_t result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    uint64_t result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformConvert");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_2143;
  }
  convert_using_colorsync_transform_f = (uint64_t (*)(void, void, void, void, void, void, void, void))v1;
  return result;
}

uint64_t colorsync_smart_null_2143()
{
  return 0;
}

const void *__use_colorsync_for_flexTRC_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_FLEXTRC", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_flexTRC_from_defaults_status);
}

const void *__use_colorsync_for_flexLuma_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_FLEXTRC", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_flexLuma_from_defaults_status);
}

const void *__use_colorsync_for_reference_white_tone_mapping_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_REFERENCE_WHITE_TONEMAPPING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_reference_white_tone_mapping_from_defaults_status);
}

const void *__use_colorsync_for_exr_gamma_tone_mapping_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_EXR_TONEMAPPING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_exr_gamma_tone_mapping_from_defaults_status);
}

const void *__use_colorsync_for_scene_referred_tone_mapping_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_DISPLAY_REFERRED_TONEMAPPING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_scene_referred_tone_mapping_from_defaults_status);
}

const void *__use_colorsync_for_display_referred_tone_mapping_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_DISPLAY_REFERRED_TONEMAPPING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_display_referred_tone_mapping_from_defaults_status);
}

const void *__use_colorsync_for_hdr_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_HDR", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_hdr_from_defaults_status);
}

uint64_t convert_Lab_to_device(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a2 + 40);
  if (v8 != *(_DWORD *)(a3 + 40) || v8 > 5 || ((1 << v8) & 0x36) == 0) {
    _CGHandleAssert("convert_Lab_to_device", 3791, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "src_component == dst_component && (src_component == kCGPixelComponent8BitInteger || src_component == kCGPixelComponent16BitInteger || src_component == kCGPixelComponent16BitFloat || src_component == kCGPixelComponent32BitFloat)", "invalid src (%u) dest (%u) component types", a6, a7, a8, *(_DWORD *)(a2 + 40));
  }
  int Type = CGColorSpaceGetType(*(void **)(a1 + 24));
  if (Type != 1)
  {
    int v15 = Type;
    memcpy(__dst, (const void *)a3, sizeof(__dst));
    unint64_t v23 = *(void *)(a3 + 8);
    unint64_t v24 = *(void *)(a3 + 16);
    if (!is_mul_ok(v23, v24)
      || (unint64_t v25 = v23 * v24, !is_mul_ok(v25, 3uLL))
      || (unint64_t v26 = 3 * v25, v27 = *(void *)(a3 + 48) >> 3, !is_mul_ok(v26, v27))
      || (long long v28 = malloc_type_calloc(v26 * v27, 1uLL, 0xEE5D36C2uLL)) == 0)
    {
      CGPostError((uint64_t)"%s : Unable to allocate", v16, v17, v18, v19, v20, v21, v22, (char)"convert_Lab_to_device");
      return 0;
    }
    long long v29 = v28;
    __dst[0] = (uint64_t)v28;
    Lab_to_rgb((uint64_t *)a2, __dst);
    if (v15 == 2)
    {
      rgb_to_cmyk(__dst, (uint64_t *)a3);
    }
    else
    {
      if (v15)
      {
        uint64_t v14 = 0;
        goto LABEL_22;
      }
      rgb_to_gray(__dst, (void *)a3);
    }
    uint64_t v14 = 1;
LABEL_22:
    free(v29);
    return v14;
  }
  Lab_to_rgb((uint64_t *)a2, (uint64_t *)a3);
  return 1;
}

void Lab_to_rgb(uint64_t *a1, uint64_t *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  CFIndex v4 = a2 + 5;
  uint64_t v5 = *a2;
  memcpy(__dst, a1 + 5, sizeof(__dst));
  unint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v6, v7, v8, v9, v10, v11, v12);
  memcpy(__dst, v4, sizeof(__dst));
  unint64_t v21 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v14, v15, v16, v17, v18, v19, v20);
  unint64_t v22 = a1[2];
  if (v22)
  {
    unint64_t v23 = 0;
    uint64_t v24 = a1[6];
    unint64_t v25 = BitsPerPixel >> 3;
    unint64_t v26 = v21 >> 3;
    unint64_t v27 = a1[1];
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v43 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    float64x2_t v44 = _Q0;
    int64x2_t v33 = vdupq_n_s64(0x406FE00000000000uLL);
    float64x2_t v42 = (float64x2_t)v33;
    do
    {
      if (v27)
      {
        unint64_t v34 = 0;
        uint64_t v35 = v5;
        uint64_t v36 = v3;
        do
        {
          switch(v24)
          {
            case 32:
              pixel_Lab_to_rgb((float *)v35, (float *)v36);
              break;
            case 16:
              v33.i16[0] = *(_WORD *)v36;
              int v39 = *(unsigned __int8 *)(v36 + 3) - 128;
              __dst[0] = (float)((float)v33.u32[0] * 100.0) / 65535.0;
              __dst[1] = (float)v39;
              __dst[2] = (float)v39;
              pixel_Lab_to_rgb((float *)&v45, __dst);
              *(int32x2_t *)v33.i8 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(v44, v43, vcvtq_f64_f32(v45)))), (int32x2_t)0xFF000000FFLL), 0);
              *(_WORD *)(v35 + 2) = v33.i16[2];
              *(_WORD *)uint64_t v35 = v33.i16[0];
              *(double *)v33.i64 = v46 * 65535.0 + 0.5;
              int v40 = (int)*(double *)v33.i64;
              if ((int)*(double *)v33.i64 >= 255) {
                int v40 = 255;
              }
              *(_WORD *)(v35 + 4) = v40 & ~(unsigned __int16)(v40 >> 31);
              break;
            case 8:
              v33.i8[0] = *(unsigned char *)v36;
              int v37 = *(unsigned __int8 *)(v36 + 1) - 128;
              __dst[0] = (float)((float)v33.u32[0] * 100.0) / 255.0;
              __dst[1] = (float)v37;
              __dst[2] = (float)v37;
              pixel_Lab_to_rgb((float *)&v45, __dst);
              *(int32x2_t *)v33.i8 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(v44, v42, vcvtq_f64_f32(v45)))), (int32x2_t)0xFF000000FFLL), 0);
              *(unsigned char *)(v35 + 1) = v33.i8[4];
              *(unsigned char *)uint64_t v35 = v33.i8[0];
              *(double *)v33.i64 = v46 * 255.0 + 0.5;
              int v38 = (int)*(double *)v33.i64;
              if ((int)*(double *)v33.i64 >= 255) {
                int v38 = 255;
              }
              *(unsigned char *)(v35 + 2) = v38 & ~(v38 >> 31);
              break;
          }
          v36 += v25;
          v35 += v26;
          ++v34;
          unint64_t v27 = a1[1];
        }
        while (v34 < v27);
        unint64_t v22 = a1[2];
      }
      v3 += a1[3];
      v5 += a2[3];
      ++v23;
    }
    while (v23 < v22);
  }
}

unint64_t rgb_to_gray(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2 + 5;
  uint64_t v6 = (_DWORD *)*a2;
  memcpy(v39, a1 + 5, sizeof(v39));
  unint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v39, v7, v8, v9, v10, v11, v12, v13);
  memcpy(v39, v5, sizeof(v39));
  unint64_t result = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v39, v15, v16, v17, v18, v19, v20, v21);
  unint64_t v25 = a1[2];
  if (v25)
  {
    unint64_t v26 = 0;
    uint64_t v27 = a1[6];
    unint64_t v28 = a1[1];
    unint64_t v29 = v28;
    do
    {
      if (v29)
      {
        unint64_t v30 = 0;
        long long v31 = (float *)(v4 + 4);
        long long v32 = v6;
        do
        {
          switch(v27)
          {
            case 32:
              double v24 = v31[1];
              double v23 = *v31 * 0.59 + *(v31 - 1) * 0.3 + v24 * 0.11;
              *(float *)&double v23 = v23;
              if (*(float *)&v23 <= 1.0) {
                *(float *)&double v24 = *(float *)&v23;
              }
              else {
                *(float *)&double v24 = 1.0;
              }
              if (*(float *)&v23 >= 0.0) {
                *(float *)&double v23 = *(float *)&v24;
              }
              else {
                *(float *)&double v23 = 0.0;
              }
              *long long v32 = LODWORD(v23);
              break;
            case 16:
              LOWORD(v23) = *((_WORD *)v31 - 2);
              LOWORD(v24) = *((_WORD *)v31 - 1);
              *(double *)&unint64_t v36 = (double)*(unint64_t *)&v24 * 0.59;
              double v37 = *(double *)&v36 + (double)*(unint64_t *)&v23 * 0.3;
              LOWORD(v36) = *(_WORD *)v31;
              double v24 = (double)v36;
              double v23 = v37 + v24 * 0.11;
              int v38 = v23;
              if ((int)v23 >= 255) {
                int v38 = 255;
              }
              *(_WORD *)long long v32 = v38 & ~(unsigned __int16)(v38 >> 31);
              break;
            case 8:
              LOBYTE(v23) = *((unsigned char *)v31 - 4);
              LOBYTE(v24) = *((unsigned char *)v31 - 3);
              *(double *)&unint64_t v33 = (double)*(unint64_t *)&v24 * 0.59;
              double v34 = *(double *)&v33 + (double)*(unint64_t *)&v23 * 0.3;
              LOBYTE(v33) = *((unsigned char *)v31 - 2);
              double v24 = (double)v33;
              double v23 = v34 + v24 * 0.11;
              int v35 = v23;
              if ((int)v23 >= 255) {
                int v35 = 255;
              }
              *(unsigned char *)long long v32 = v35 & ~(v35 >> 31);
              unint64_t v28 = a1[1];
              break;
          }
          long long v32 = (_DWORD *)((char *)v32 + (result >> 3));
          ++v30;
          long long v31 = (float *)((char *)v31 + (BitsPerPixel >> 3));
        }
        while (v30 < v28);
        unint64_t v25 = a1[2];
        unint64_t v29 = v28;
      }
      v4 += a1[3];
      uint64_t v6 = (_DWORD *)((char *)v6 + a2[3]);
      ++v26;
    }
    while (v26 < v25);
  }
  return result;
}

unint64_t rgb_to_cmyk(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2 + 5;
  uint64_t v6 = *a2;
  memcpy(v64, a1 + 5, sizeof(v64));
  unint64_t BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v64, v7, v8, v9, v10, v11, v12, v13);
  memcpy(v64, v5, sizeof(v64));
  unint64_t result = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v64, v15, v16, v17, v18, v19, v20, v21);
  unint64_t v23 = a1[2];
  if (v23)
  {
    unint64_t v24 = 0;
    uint64_t v25 = a1[6];
    unint64_t v26 = result >> 3;
    unint64_t v27 = a1[1];
    unint64_t v28 = v27;
    do
    {
      if (v28)
      {
        unint64_t v29 = 0;
        unint64_t v30 = (float *)(v6 + 12);
        long long v31 = (float *)(v4 + 4);
        do
        {
          switch(v25)
          {
            case 32:
              float v42 = 1.0 - *(v31 - 1);
              float v43 = 1.0 - *v31;
              float v44 = 1.0 - v31[1];
              if (v43 <= v44) {
                float v45 = 1.0 - *v31;
              }
              else {
                float v45 = 1.0 - v31[1];
              }
              if (v42 <= v44) {
                float v44 = 1.0 - *(v31 - 1);
              }
              if (v42 <= v43) {
                float v46 = v44;
              }
              else {
                float v46 = v45;
              }
              if (v42 <= 1.0) {
                float v47 = 1.0 - *(v31 - 1);
              }
              else {
                float v47 = 1.0;
              }
              if (v42 >= 0.0) {
                float v48 = v47;
              }
              else {
                float v48 = 0.0;
              }
              float v49 = v48 - v46;
              if (v49 <= 1.0) {
                float v50 = v49;
              }
              else {
                float v50 = 1.0;
              }
              if (v49 >= 0.0) {
                float v51 = v50;
              }
              else {
                float v51 = 0.0;
              }
              *(v30 - 3) = v51;
              float v52 = 1.0 - *v31;
              if (v52 <= 1.0) {
                float v53 = 1.0 - *v31;
              }
              else {
                float v53 = 1.0;
              }
              if (v52 >= 0.0) {
                float v54 = v53;
              }
              else {
                float v54 = 0.0;
              }
              float v55 = v54 - v46;
              if (v55 <= 1.0) {
                float v56 = v55;
              }
              else {
                float v56 = 1.0;
              }
              if (v55 >= 0.0) {
                float v57 = v56;
              }
              else {
                float v57 = 0.0;
              }
              *(v30 - 2) = v57;
              float v58 = 1.0 - v31[1];
              if (v58 <= 1.0) {
                float v59 = 1.0 - v31[1];
              }
              else {
                float v59 = 1.0;
              }
              if (v58 >= 0.0) {
                float v60 = v59;
              }
              else {
                float v60 = 0.0;
              }
              float v61 = v60 - v46;
              if (v61 <= 1.0) {
                float v62 = v61;
              }
              else {
                float v62 = 1.0;
              }
              if (v61 >= 0.0) {
                float v63 = v62;
              }
              else {
                float v63 = 0.0;
              }
              *(v30 - 1) = v63;
              *unint64_t v30 = v46;
              break;
            case 16:
              unsigned int v37 = *((unsigned __int16 *)v31 - 2);
              unsigned int v38 = *((unsigned __int16 *)v31 - 1);
              if (v38 <= v37) {
                unsigned int v38 = *((unsigned __int16 *)v31 - 2);
              }
              if (v38 <= *(unsigned __int16 *)v31) {
                unsigned int v38 = *(unsigned __int16 *)v31;
              }
              unint64_t result = ~v38;
              int v39 = v37 ^ 0xFFFF;
              if (v39 >= 255) {
                int v39 = 255;
              }
              *((_WORD *)v30 - 6) = (v39 - result) & ~(unsigned __int16)((v39 - (unsigned __int16)result) >> 31);
              int v40 = *((unsigned __int16 *)v31 - 1) ^ 0xFFFF;
              if (v40 >= 255) {
                int v40 = 255;
              }
              *((_WORD *)v30 - 5) = (v40 - result) & ~(unsigned __int16)((v40 - (unsigned __int16)result) >> 31);
              int v41 = *(unsigned __int16 *)v31 ^ 0xFFFF;
              if (v41 >= 255) {
                int v41 = 255;
              }
              *((_WORD *)v30 - 4) = (v41 - result) & ~(unsigned __int16)((v41 - (unsigned __int16)result) >> 31);
              *((_WORD *)v30 - 3) = result;
              break;
            case 8:
              unsigned int v32 = *((unsigned __int8 *)v31 - 4);
              unsigned int v33 = *((unsigned __int8 *)v31 - 3);
              unint64_t result = *((unsigned __int8 *)v31 - 2);
              if (v33 <= v32) {
                unsigned int v33 = *((unsigned __int8 *)v31 - 4);
              }
              if (v33 <= result) {
                LOBYTE(v33) = *((unsigned char *)v31 - 2);
              }
              unsigned __int8 v34 = ~(_BYTE)v33;
              *((unsigned char *)v30 - 12) = (~(_BYTE)v32 - v34) & ~((int)((v32 ^ 0xFF) - v34) >> 31);
              int v35 = (*((unsigned __int8 *)v31 - 3) ^ 0xFF) - v34;
              *((unsigned char *)v30 - 11) = v35 & ~(v35 >> 31);
              int v36 = (*((unsigned __int8 *)v31 - 2) ^ 0xFF) - v34;
              *((unsigned char *)v30 - 10) = v36 & ~(v36 >> 31);
              *((unsigned char *)v30 - 9) = v34;
              unint64_t v27 = a1[1];
              break;
          }
          ++v29;
          unint64_t v30 = (float *)((char *)v30 + v26);
          long long v31 = (float *)((char *)v31 + (BitsPerPixel >> 3));
        }
        while (v29 < v27);
        unint64_t v23 = a1[2];
        unint64_t v28 = v27;
      }
      v4 += a1[3];
      v6 += a2[3];
      ++v24;
    }
    while (v24 < v23);
  }
  return result;
}

void pixel_Lab_to_rgb(float *a1, float *a2)
{
  float v3 = (*a2 + 16.0) / 116.0;
  float v4 = v3 + (float)(a2[1] * 0.002);
  float v5 = v3 + (float)(a2[2] * -0.005);
  if (v4 <= 0.0008856) {
    float v6 = (float)(v4 + -0.13793) * 0.12842;
  }
  else {
    float v6 = v4 * (float)(v4 * v4);
  }
  float v7 = (float)(v3 * v3) * v3;
  if (v3 <= 0.0008856) {
    float v7 = (float)(v3 + -0.13793) * 0.12842;
  }
  float v8 = v5 * (float)(v5 * v5);
  if (v5 <= 0.0008856) {
    float v8 = (float)(v5 + -0.13793) * 0.12842;
  }
  float v9 = v6 * 0.9642;
  float v10 = (float)((float)(v7 * 1.9163) + (float)(v9 * -0.97879)) + (float)((float)(v8 * 0.8249) * 0.033455);
  float v11 = (float)((float)(v7 * -0.22899) + (float)(v9 * 0.071983)) + (float)((float)(v8 * 0.8249) * 1.4054);
  float v12 = powf((float)((float)(v7 * -1.6174) + (float)(v9 * 3.1341)) + (float)((float)(v8 * 0.8249) * -0.49063), 0.45455);
  if (v12 <= 1.0) {
    float v13 = v12;
  }
  else {
    float v13 = 1.0;
  }
  if (v12 >= 0.0) {
    float v14 = v13;
  }
  else {
    float v14 = 0.0;
  }
  *a1 = v14;
  float v15 = powf(v10, 0.45455);
  if (v15 <= 1.0) {
    float v16 = v15;
  }
  else {
    float v16 = 1.0;
  }
  if (v15 >= 0.0) {
    float v17 = v16;
  }
  else {
    float v17 = 0.0;
  }
  a1[1] = v17;
  float v18 = powf(v11, 0.45455);
  if (v18 <= 1.0) {
    float v19 = v18;
  }
  else {
    float v19 = 1.0;
  }
  if (v18 >= 0.0) {
    float v20 = v19;
  }
  else {
    float v20 = 0.0;
  }
  a1[2] = v20;
}

double null_buffer_converter_info@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t convert_device(uint64_t a1, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3, uint64_t a4)
{
  unsigned int Type = CGColorSpaceGetType(*(void **)(a1 + 24));
  unsigned int v9 = CGColorSpaceGetType(*(void **)(a1 + 32));
  if (v9 >= 3) {
    _CGHandleAssert("convert_device", 3678, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "(int)srcType >= kCGColorSpaceDeviceGray && (int)srcType <= kCGColorSpaceDeviceCMYK", "invalid src colorspace type %d", v11, v12, v13, v9);
  }
  if (Type >= 3) {
    _CGHandleAssert("convert_device", 3679, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "(int)dstType >= kCGColorSpaceDeviceGray && (int)dstType <= kCGColorSpaceDeviceCMYK", "invalid dest colorspace type %d", v11, v12, v13, Type);
  }
  long long v14 = *(_OWORD *)(a4 + 48);
  void v17[2] = *(_OWORD *)(a4 + 32);
  v17[3] = v14;
  v17[4] = *(_OWORD *)(a4 + 64);
  uint64_t v18 = *(void *)(a4 + 80);
  long long v15 = *(_OWORD *)(a4 + 16);
  v17[0] = *(_OWORD *)a4;
  v17[1] = v15;
  return convert_using_vImageConverter(a1, a2, a3, (vImageConverter ***)v17, v10, v11, v12, v13);
}

char *create_gray_to_RGBX8_texture(const __CFData *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  float v4 = (char *)malloc_type_calloc(4 * a2, 1uLL, 0xC37185EDuLL);
  if (v4)
  {
    uint64_t BytePtr = CFDataGetBytePtr(a1);
    if (v2)
    {
      float v6 = v4 + 3;
      float v7 = (unsigned __int16 *)(BytePtr + 4);
      do
      {
        unsigned int v8 = (*(v7 - 2) + 128) >> 8;
        if (v8 >= 0xFF) {
          LOBYTE(v8) = -1;
        }
        *(v6 - 3) = v8;
        unsigned int v9 = (*(v7 - 1) + 128) >> 8;
        if (v9 >= 0xFF) {
          LOBYTE(v9) = -1;
        }
        *(v6 - 2) = v9;
        int v10 = *v7;
        v7 += 3;
        unsigned int v11 = (v10 + 128) >> 8;
        if (v11 >= 0xFF) {
          LOBYTE(v11) = -1;
        }
        *(v6 - 1) = v11;
        unsigned char *v6 = -1;
        v6 += 4;
        --v2;
      }
      while (v2);
    }
  }
  return v4;
}

char *create_RGB_to_RGBX8_texture(const __CFData *a1, uint64_t a2)
{
  uint64_t v4 = a2 * a2;
  float v5 = (char *)malloc_type_calloc(4 * a2 * a2 * a2, 1uLL, 0x5CE1A924uLL);
  if (v5)
  {
    uint64_t BytePtr = CFDataGetBytePtr(a1);
    if (a2)
    {
      uint64_t v7 = 0;
      unsigned int v8 = v5 + 3;
      unsigned int v9 = BytePtr + 4;
      do
      {
        uint64_t v10 = 0;
        unsigned int v11 = v9;
        uint64_t v12 = v8;
        do
        {
          uint64_t v13 = v11;
          long long v14 = v12;
          uint64_t v15 = a2;
          do
          {
            unsigned int v16 = (*((unsigned __int16 *)v13 - 2) + 128) >> 8;
            if (v16 >= 0xFF) {
              LOBYTE(v16) = -1;
            }
            *(v14 - 3) = v16;
            unsigned int v17 = (*((unsigned __int16 *)v13 - 1) + 128) >> 8;
            if (v17 >= 0xFF) {
              LOBYTE(v17) = -1;
            }
            *(v14 - 2) = v17;
            unsigned int v18 = (*(unsigned __int16 *)v13 + 128) >> 8;
            if (v18 >= 0xFF) {
              LOBYTE(v18) = -1;
            }
            *(v14 - 1) = v18;
            unsigned char *v14 = -1;
            v14 += 4;
            v13 += 6 * v4;
            --v15;
          }
          while (v15);
          ++v10;
          v12 += 4 * a2;
          v11 += 6 * a2;
        }
        while (v10 != a2);
        ++v7;
        v8 += 4 * v4;
        v9 += 6;
      }
      while (v7 != a2);
    }
  }
  return v5;
}

char *create_RGB_to_RGBX16_texture(const __CFData *a1, uint64_t a2)
{
  uint64_t v4 = a2 * a2;
  float v5 = (char *)malloc_type_calloc(8 * a2 * a2 * a2, 1uLL, 0x650C9C43uLL);
  if (v5)
  {
    uint64_t BytePtr = CFDataGetBytePtr(a1);
    if (a2)
    {
      uint64_t v7 = 0;
      unsigned int v8 = v5 + 4;
      unsigned int v9 = BytePtr + 4;
      do
      {
        uint64_t v10 = 0;
        unsigned int v11 = v9;
        uint64_t v12 = v8;
        do
        {
          uint64_t v13 = v11;
          long long v14 = v12;
          uint64_t v15 = a2;
          do
          {
            *(v14 - 2) = *((_WORD *)v13 - 2);
            *(v14 - 1) = *((_WORD *)v13 - 1);
            _WORD *v14 = *(_WORD *)v13;
            v14[1] = -1;
            v14 += 4;
            v13 += 6 * v4;
            --v15;
          }
          while (v15);
          ++v10;
          v12 += 4 * a2;
          v11 += 6 * a2;
        }
        while (v10 != a2);
        ++v7;
        v8 += 8 * v4;
        v9 += 6;
      }
      while (v7 != a2);
    }
  }
  return v5;
}

char *create_RGB_to_RGBXF_texture(const __CFData *a1, uint64_t a2)
{
  uint64_t v4 = a2 * a2;
  float v5 = (char *)malloc_type_calloc(16 * a2 * a2 * a2, 1uLL, 0xE6AEACF1uLL);
  if (v5)
  {
    uint64_t BytePtr = CFDataGetBytePtr(a1);
    if (a2)
    {
      uint64_t v8 = 0;
      unsigned int v9 = BytePtr + 2;
      float32x2_t v10 = (float32x2_t)vdup_n_s32(0x477FFF00u);
      __asm { FMOV            V3.2S, #1.0 }
      unsigned int v16 = v5;
      do
      {
        uint64_t v17 = 0;
        unsigned int v18 = v16;
        float v19 = v9;
        do
        {
          float v20 = v18;
          uint64_t v21 = v19;
          uint64_t v22 = a2;
          do
          {
            v7.i16[0] = *((_WORD *)v21 - 1);
            *(float *)v7.i32 = (float)v7.u32[0] / 65535.0;
            if (*(float *)v7.i32 > 1.0) {
              *(float *)v7.i32 = 1.0;
            }
            *(_DWORD *)float v20 = v7.i32[0];
            v23.i32[0] = *(unsigned __int16 *)v21;
            v23.i32[1] = *((unsigned __int16 *)v21 + 1);
            float32x2_t v24 = vdiv_f32(vcvt_f32_u32(v23), v10);
            int8x8_t v7 = vbsl_s8((int8x8_t)vcgt_f32(v24, _D3), (int8x8_t)_D3, (int8x8_t)v24);
            *(int8x8_t *)(v20 + 4) = v7;
            *((_DWORD *)v20 + 3) = 1065353216;
            v21 += 6 * v4;
            v20 += 16;
            --v22;
          }
          while (v22);
          ++v17;
          v19 += 6 * a2;
          v18 += 16 * a2;
        }
        while (v17 != a2);
        ++v8;
        v9 += 6;
        v16 += 16 * v4;
      }
      while (v8 != a2);
    }
  }
  return v5;
}

uint64_t (*__create_calibrated_lookup_texture_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  double result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    double result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformCopyProperty");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_2143;
  }
  create_calibrated_lookup_texture_f = v1;
  return result;
}

uint64_t (*__create_calibrated_parametric_data_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  double result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    double result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformCopyProperty");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_2143;
  }
  create_calibrated_parametric_data_f = v1;
  return result;
}

uint64_t insertSpacesBefore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = *(double *)(a2 + 16);
  double v7 = rint((v6 - *(double *)(a4 + 16)) / *(double *)(a4 + 8));
  [*(id *)a4 setSpaces:(uint64_t)v7 & ~((uint64_t)v7 >> 63) beforeWordAtIndex:a1];
  *(double *)(a4 + 16) = v6 + *(double *)(a2 + 32);
  return 1;
}

void *CGPDFSourceCreateForJBIG2(const void *a1, uint64_t a2, uint64_t a3)
{
  double result = CGPDFSourceCreate(a1, a2, a3);
  if (result)
  {
    uint64_t v4 = result;
    jbig2_filter = pdf_source_create_jbig2_filter(result, 0, 0);
    CFRelease(v4);
    return jbig2_filter;
  }
  return result;
}

unsigned char *pdf_source_create_jbig2_filter(const void *a1, CGPDFStream *a2, CGPDFDictionary *a3)
{
  double result = malloc_type_calloc(1uLL, 0x20uLL, 0x10A0040169B3756uLL);
  if (result)
  {
    double v7 = result;
    CGPDFStreamRef value = 0;
    int v18 = 0;
    result[24] = 0;
    if (a1) {
      CFRetain(a1);
    }
    *(void *)double v7 = a1;
    if (CGPDFDictionaryGetStream(a3, "JBIG2Globals", &value))
    {
      if (value)
      {
        CFMutableDataRef Mutable = CFSetCreateMutable(0, 0, 0);
        CGPDFStreamRef v17 = a2;
        if (a2)
        {
          while (!CFSetContainsValue(Mutable, a2))
          {
            CFSetAddValue(Mutable, v17);
            if (v17) {
              unsigned int v9 = (CGPDFDictionary *)*((void *)v17 + 6);
            }
            else {
              unsigned int v9 = 0;
            }
            CGPDFDictionaryRef dict = 0;
            if (!CGPDFDictionaryGetDictionary(v9, "DecodeParms", &dict)
              && !CGPDFDictionaryGetDictionary(v9, "DP", &dict)
              || !dict
              || !CGPDFDictionaryGetStream(dict, "JBIG2Globals", &v17))
            {
              CGPDFStreamRef v17 = 0;
              goto LABEL_28;
            }
            a2 = v17;
            if (!v17) {
              goto LABEL_28;
            }
          }
          pdf_error("JBIG2Filter: JBIG2Globals reference loop");
          goto LABEL_32;
        }
LABEL_28:
        CFRelease(Mutable);
        uint64_t v15 = CGPDFStreamCreateFilterChain(value, &v18);
        *((void *)v7 + 1) = v15;
        if (!v15 || v18)
        {
LABEL_32:
          jbig2_filter_finalize((CFTypeRef *)v7);
          return 0;
        }
        uint64_t v10 = v15;
LABEL_19:
        CFTypeRef v11 = *(CFTypeRef *)v7;
        if ((didLoadVTable & 1) == 0) {
          pthread_once(&loadVTable_once, doLoadVTable);
        }
        if (jbig2_vtable && (uint64_t v12 = *(uint64_t (**)(CFTypeRef, uint64_t))(jbig2_vtable + 8)) != 0) {
          uint64_t v13 = v12(v11, v10);
        }
        else {
          uint64_t v13 = 0;
        }
        *((void *)v7 + 2) = v13;
        double result = CGPDFSourceCreateInternal(0x1000uLL);
        if (result)
        {
          result[209] = 1;
          long long v14 = *(_OWORD *)&off_1ED0989B0;
          *((_OWORD *)result + 3) = pdf_source_create_jbig2_filter_callbacks;
          *((_OWORD *)result + 4) = v14;
          *((void *)result + 10) = v7;
          return result;
        }
        goto LABEL_32;
      }
    }
    else
    {
      CGPDFStreamRef value = 0;
    }
    uint64_t v10 = 0;
    *((void *)v7 + 1) = 0;
    goto LABEL_19;
  }
  return result;
}

void jbig2_filter_finalize(CFTypeRef *a1)
{
  if (a1)
  {
    CFTypeRef v2 = a1[2];
    if ((didLoadVTable & 1) == 0) {
      pthread_once(&loadVTable_once, doLoadVTable);
    }
    if (jbig2_vtable)
    {
      float v3 = *(void (**)(CFTypeRef))(jbig2_vtable + 16);
      if (v3) {
        v3(v2);
      }
    }
    CFTypeRef v4 = a1[1];
    if (v4) {
      CFRelease(v4);
    }
    if (*a1) {
      CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t jbig2_filter_refill(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if ((didLoadVTable & 1) == 0) {
    pthread_once(&loadVTable_once, doLoadVTable);
  }
  if (!jbig2_vtable
    || (uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(jbig2_vtable + 24)) == 0
    || (uint64_t result = v8(v7, a2, a3)) == 0)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t jbig2_filter_rewind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(a1 + 24) = 0;
  CGPDFSourceRewind(*(void *)a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t result = CGPDFSourceRewind(*(void *)(a1 + 8), v9, v10, v11, v12, v13, v14, v15);
  uint64_t v17 = *(void *)(a1 + 16);
  if ((didLoadVTable & 1) == 0) {
    uint64_t result = pthread_once(&loadVTable_once, doLoadVTable);
  }
  if (jbig2_vtable)
  {
    int v18 = *(uint64_t (**)(uint64_t))(jbig2_vtable + 32);
    if (v18)
    {
      return v18(v17);
    }
  }
  return result;
}

void *rips_BltShade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return RIPLayerBltShade(a2, a3, a4, a5, a6, a8, a7, a8);
}

uint64_t rips_BltImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return RIPLayerBltImage(a2, a3, a4, a5, a8, a6, a7, a8);
}

uint64_t (**rips_BltGlyph(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  return RIPLayerBltGlyph(a2, a3, a4, a5, a6, a7, a8, a10);
}

void *rips_BltShape(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  return RIPLayerBltShape(a2, a3, a4, a5, a6, a7, a8, a8);
}

uint64_t rips_ColorSpace()
{
  return 0;
}

uint64_t rips_Growth()
{
  return 0;
}

void rips_release(void *a1)
{
  int v1 = *((_DWORD *)a1 + 2) - 1;
  *((_DWORD *)a1 + 2) = v1;
  if (!v1) {
    free(a1);
  }
}

uint64_t rips_retain(uint64_t result)
{
  return result;
}

uint64_t rips_size()
{
  return 80;
}

uint64_t rips_super()
{
  return 0;
}

CFTypeRef CGPDFStringRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void CGPDFStringRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

size_t CGPDFStringGetLength(size_t string)
{
  if (string)
  {
    size_t v1 = string;
    if (*(void *)(string + 24)) {
      decrypt_string(string);
    }
    return *(void *)(v1 + 72);
  }
  return string;
}

void decrypt_string(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if ((*(unsigned char *)(a1 + 64) & 1) == 0
    && (*(void *)(a1 + 32) | (unsigned __int16)*(void *)(a1 + 40)
     || *(void *)(a1 + 48) | *(unsigned __int16 *)(a1 + 56)))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 40);
    if (!v3) {
      goto LABEL_25;
    }
    uint64_t v4 = *(void *)(a1 + 48) | (unsigned __int16)*(void *)(a1 + 56);
    uint64_t v5 = v4 ? *(void *)(a1 + 48) : *(void *)(a1 + 32);
    unint64_t v6 = v4 ? *(void *)(a1 + 56) : *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(v3 + 16);
    if (!v7) {
      goto LABEL_25;
    }
    if (!*(unsigned char *)(v7 + 184)) {
      goto LABEL_25;
    }
    uint64_t v8 = *(void *)(v3 + 40);
    if (!v8) {
      goto LABEL_25;
    }
    size_t v9 = *(void *)(a1 + 72);
    if (!*(unsigned char *)(v8 + 12))
    {
      size_t v19 = 0;
      if (!get_object_key(v8, v5, v6, v20, &v19)) {
        goto LABEL_25;
      }
      int v10 = *(_DWORD *)(v8 + 8);
      if ((v10 - 2) >= 2)
      {
        if (v10 != 1) {
          goto LABEL_25;
        }
        RC4 = CGCryptorCreateRC4(v20, v19);
        if (!RC4) {
          goto LABEL_25;
        }
        uint64_t v18 = (uint64_t)RC4;
        CGCryptorProcessBytes((uint64_t)RC4, (const void *)(a1 + 80), v9, (void *)(a1 + 80), v9, 0);
        CGCryptorRelease(v18);
      }
      else
      {
        uint64_t v11 = pdf_aes_create((uint64_t)v20, v19);
        if (!v11) {
          goto LABEL_25;
        }
        uint64_t v12 = v11;
        int v13 = pdf_aes_process_buffer((uint64_t)v11, (const void *)(a1 + 80), (void *)(a1 + 80), v9);
        pdf_aes_free(v12);
        if (!v13) {
          goto LABEL_25;
        }
        size_t v14 = *(unsigned __int8 *)(v9 + a1 + 80 - 1);
        BOOL v15 = v9 >= v14;
        size_t v16 = v9 - v14;
        if (v15) {
          size_t v9 = v16;
        }
        else {
          pdf_error("invalid AES padding.");
        }
        if (v9 > 0xF)
        {
          v9 -= 16;
          memmove((void *)(a1 + 80), (const void *)(a1 + 96), v9);
        }
        else
        {
          pdf_error("invalid AES padding.");
          size_t v9 = 0;
        }
      }
    }
    *(void *)(a1 + 72) = v9;
    *(unsigned char *)(a1 + v9 + 80) = 0;
LABEL_25:
    *(unsigned char *)(a1 + 64) |= 1u;
  }
  os_unfair_lock_unlock(v2);
}

const unsigned __int8 *__cdecl CGPDFStringGetBytePtr(const unsigned __int8 *string)
{
  if (string)
  {
    size_t v1 = string;
    if (*((void *)string + 3)) {
      decrypt_string((uint64_t)string);
    }
    return v1 + 80;
  }
  return string;
}

uint64_t CGPDFStringPrint(uint64_t result, FILE *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (a2) {
      uint64_t v3 = a2;
    }
    else {
      uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
    }
    if (*(void *)(result + 24))
    {
      decrypt_string(result);
      if (*(void *)(v2 + 24)) {
        decrypt_string(v2);
      }
    }
    uint64_t v4 = *(void *)(v2 + 72);
    fputc(40, v3);
    if (v4)
    {
      uint64_t v5 = (char *)(v2 + 80);
      uint64_t v6 = MEMORY[0x1E4F14390];
      do
      {
        int v7 = *v5++;
        unsigned int v8 = v7;
        if (v7 < 0)
        {
          if (__maskrune(v8, 0x40000uLL))
          {
LABEL_12:
            if (v8 - 40 <= 0x34 && ((1 << (v8 - 40)) & 0x10000000000003) != 0) {
              fputc(92, v3);
            }
            fputc(v8, v3);
            goto LABEL_20;
          }
        }
        else if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x40000) != 0)
        {
          goto LABEL_12;
        }
        fprintf(v3, "\\%03o", v8);
LABEL_20:
        --v4;
      }
      while (v4);
    }
    return fputc(41, v3);
  }
  return result;
}

void Type1CSubset::emit_font_file(Type1CSubset *this, uint64_t a2)
{
  embedded_font_datdouble a = (const __CFData *)Type1Subset::create_embedded_font_data(this);
  if (embedded_font_data)
  {
    CFDataRef v5 = embedded_font_data;
    uint64_t v6 = **(void **)(*((void *)this + 1) + 8);
    int v7 = PDFStreamCreateWithObjectNumber(v6, a2);
    PDFDocumentBeginObject(*v7, v7[1], v8, v9, v10, v11, v12, v13);
    PDFDocumentPrintf(*v7, (uint64_t)"<<", v14, v15, v16, v17, v18, v19, v28);
    PDFDocumentPrintf(v6, (uint64_t)"/Subtype /Type1C", v20, v21, v22, v23, v24, v25, v29);
    PDFStreamBeginData((CGDataConsumerRef)v7);
    uint64_t BytePtr = CFDataGetBytePtr(v5);
    CFIndex Length = CFDataGetLength(v5);
    CGDataConsumerPutBytes(v7[3], (uint64_t)BytePtr, Length);
    PDFStreamEndData(v7);
    PDFStreamEnd((CFDataRef *)v7);
    PDFStreamRelease((uint64_t)v7);
    CFRelease(v5);
  }
}

void Type1CSubset::~Type1CSubset(Type1CSubset *this)
{
  FontSubset::~FontSubset(this);

  JUMPOUT(0x18532A2A0);
}

void FontSubset::~FontSubset(FontSubset *this)
{
  *(void *)this = &unk_1ED0935F8;
  std::__tree<unsigned long>::destroy(*((void **)this + 15));
  std::__tree<unsigned long>::destroy(*((void **)this + 12));
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void CGPDFAssociationRelease(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

CFMutableArrayRef CGPDFDocumentCopyOutputIntents(__CFArray *a1)
{
  CFMutableArrayRef Mutable = a1;
  if (a1)
  {
    CGPDFDictionaryRef dict = 0;
    CGPDFArrayRef value = 0;
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    catalog = pdf_document_get_catalog(**(void **)(*((void *)Mutable + 2) + 16));
    CFMutableArrayRef Mutable = 0;
    if (CGPDFDictionaryGetArray(catalog, "OutputIntents", &value))
    {
      if (value && (uint64_t v3 = *((void *)value + 2)) != 0)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        size_t v4 = 0;
        CFDataRef v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
        uint64_t v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
        do
        {
          if (CGPDFArrayGetDictionary(value, v4, &dict))
          {
            CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(0, 0, v5, v6);
            CGPDFDictionaryApplyFunction(dict, (CGPDFDictionaryApplierFunction)build_output_intent, v7);
            CFArrayAppendValue(Mutable, v7);
            CFRelease(v7);
          }
          ++v4;
        }
        while (v3 != v4);
      }
      else
      {
        return 0;
      }
    }
  }
  return Mutable;
}

void build_output_intent(const char *a1, uint64_t a2, void *cf)
{
  if (!a2) {
    return;
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 == 5)
  {
    CFMutableDictionaryRef v7 = *(const char **)(a2 + 32);
    CFAllocatorRef v8 = CFGetAllocator(cf);
    CFStringRef v6 = CFStringCreateWithCString(v8, v7, 0x600u);
LABEL_6:
    CFStringRef v9 = v6;
    if (!v6) {
      return;
    }
    goto LABEL_13;
  }
  if (v5 == 6)
  {
    CFStringRef v6 = CGPDFStringCopyTextString(*(CGPDFStringRef *)(a2 + 32));
    goto LABEL_6;
  }
  CGPDFDataFormat format = CGPDFDataFormatRaw;
  if (v5 == 9)
  {
    CFDataRef v10 = CGPDFStreamCopyData(*(CGPDFStreamRef *)(a2 + 32), &format);
    if (v10)
    {
      CFDataRef v11 = v10;
      CFStringRef v9 = format ? 0 : (CFStringRef)CGColorSpaceFromICCDataCacheGetRetained(v10);
      CFRelease(v11);
      if (v9)
      {
LABEL_13:
        CFAllocatorRef v12 = CFGetAllocator(cf);
        CFStringRef v13 = CFStringCreateWithCString(v12, a1, 0x600u);
        if (v13)
        {
          CFStringRef v14 = v13;
          CFDictionarySetValue((CFMutableDictionaryRef)cf, v13, v9);
          CFRelease(v14);
        }
        CFRelease(v9);
      }
    }
  }
}

char *CGPDFFunctionCreateFunction(char *result)
{
  if (!result) {
    return result;
  }
  CGPDFInteger value = 0;
  int v1 = *((_DWORD *)result + 2);
  if (v1 != 9)
  {
    if (v1 != 8)
    {
      pdf_error("invalid function: not a dictionary or stream.");
      return 0;
    }
    uint64_t v2 = 0;
    uint64_t v3 = (CGPDFDictionary **)(result + 32);
    goto LABEL_7;
  }
  uint64_t v2 = *((void *)result + 4);
  if (v2)
  {
    uint64_t v3 = (CGPDFDictionary **)(v2 + 48);
LABEL_7:
    size_t v4 = *v3;
    goto LABEL_8;
  }
  size_t v4 = 0;
LABEL_8:
  if (!CGPDFDictionaryGetInteger(v4, "FunctionType", &value))
  {
    return 0;
  }
  switch(value)
  {
    case 0:
      if (!v2)
      {
        pdf_error("invalid Type 0 function: not a stream.");
        return 0;
      }
      uint64_t result = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x10900401C976371uLL);
      if (!result) {
        return result;
      }
      int v5 = result;
      v58[0] = 0;
      unint64_t v56 = 0;
      CFStringRef v6 = *(CGPDFDictionary **)(v2 + 48);
      CFMutableDictionaryRef v7 = pdf_dictionary_copy_numbers(v6, "Domain", &v56);
      *((void *)v5 + 1) = v7;
      if (!v7 || !v56 || (v56 & 1) != 0)
      {
        goto LABEL_97;
      }
      *(void *)int v5 = v56 >> 1;
      CFAllocatorRef v8 = pdf_dictionary_copy_numbers(v6, "Range", &v56);
      *((void *)v5 + 3) = v8;
      if (!v8 || !v56 || (v56 & 1) != 0)
      {
        goto LABEL_97;
      }
      *((void *)v5 + 2) = v56 >> 1;
      CFStringRef v9 = malloc_type_malloc(8 * *(void *)v5, 0x100004000313F17uLL);
      *((void *)v5 + 6) = v9;
      if (!v9) {
        goto LABEL_97;
      }
      if (!CGPDFDictionaryGetIntegers(v6, "Size", (uint64_t)v9, *(CGPDFArray **)v5))
      {
        goto LABEL_97;
      }
      CFDataRef v10 = *(CGPDFArray **)v5;
      if (*(void *)v5)
      {
        CFDataRef v11 = (uint64_t *)*((void *)v5 + 6);
        while (1)
        {
          uint64_t v13 = *v11++;
          uint64_t v12 = v13;
          if (v13 <= 0) {
            break;
          }
          if ((double)v12 > 9.00719925e15)
          {
            pdf_error("invalid function: sample count is out of range.");
            goto LABEL_97;
          }
          CFDataRef v10 = (CGPDFArray *)((char *)v10 - 1);
          if (!v10) {
            goto LABEL_25;
          }
        }
        pdf_error("invalid function: every domain of a sampling function must have at least one sample.");
LABEL_97:
        type0_release((void **)v5);
        return 0;
      }
LABEL_25:
      if (!CGPDFDictionaryGetInteger(v6, "BitsPerSample", v58)
        || v58[0] < 1
        || v58[0] > 32
        || (uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v58[0]), v14.i16[0] = vaddlv_u8(v14), v14.u32[0] >= 2uLL))
      {
        goto LABEL_97;
      }
      *((void *)v5 + 7) = v58[0];
      if (CGPDFDictionaryGetInteger(v6, "Order", v58))
      {
        CGPDFInteger v15 = v58[0];
        if ((v58[0] & 0xFFFFFFFFFFFFFFFDLL) != 1)
        {
          goto LABEL_97;
        }
      }
      else
      {
        CGPDFInteger v15 = 1;
      }
      *((void *)v5 + ++*(_DWORD *)(result + 8) = v15;
      unsigned __int8 v34 = *(CGPDFArray **)v5;
      if (*(void *)v5)
      {
        int v35 = (uint64_t *)*((void *)v5 + 6);
        double v36 = 1.0;
        do
        {
          uint64_t v37 = *v35++;
          double v36 = v36 * (double)v37;
          unsigned __int8 v34 = (CGPDFArray *)((char *)v34 - 1);
        }
        while (v34);
        double v38 = v36 * 0.125;
      }
      else
      {
        double v38 = 0.125;
      }
      double v39 = ceil(v38 * (double)*((unint64_t *)v5 + 7) * (double)*((unint64_t *)v5 + 2));
      if (v39 > 1.12589991e15)
      {
        pdf_error("invalid function: arithmetic overflow.");
        goto LABEL_97;
      }
      size_t v40 = (unint64_t)v39;
      int v41 = malloc_type_malloc((unint64_t)v39, 0x4B1C5008uLL);
      *((void *)v5 + 10) = v41;
      if (!v41) {
        goto LABEL_97;
      }
      if (CGPDFStreamGetData(v2, (uint64_t)v41, v40) != v40)
      {
        pdf_error("invalid function: failed to read %zu bytes.");
        goto LABEL_97;
      }
      *((void *)v5 + 9) = v40;
      float v42 = malloc_type_malloc(16 * *(void *)v5, 0x100004000313F17uLL);
      *((void *)v5 + 5) = v42;
      if (!v42) {
        goto LABEL_97;
      }
      if (!CGPDFDictionaryGetNumbers(v6, "Encode", (uint64_t)v42, (CGPDFArray *)(2 * *(void *)v5)))
      {
        float v43 = *(CGPDFArray **)v5;
        if (*(void *)v5)
        {
          float v44 = (uint64_t *)*((void *)v5 + 6);
          float v45 = (double *)(*((void *)v5 + 5) + 8);
          do
          {
            *(v45 - 1) = 0.0;
            uint64_t v46 = *v44++;
            *float v45 = (double)(v46 - 1);
            v45 += 2;
            float v43 = (CGPDFArray *)((char *)v43 - 1);
          }
          while (v43);
        }
      }
      float v47 = malloc_type_malloc(16 * *((void *)v5 + 2), 0x100004000313F17uLL);
      *((void *)v5 + 4) = v47;
      if (!v47) {
        goto LABEL_97;
      }
      BOOL Numbers = CGPDFDictionaryGetNumbers(v6, "Decode", (uint64_t)v47, (CGPDFArray *)(2 * *((void *)v5 + 2)));
      size_t v49 = *((void *)v5 + 2);
      if (Numbers)
      {
        float v50 = (const CGFloat *)*((void *)v5 + 3);
      }
      else
      {
        float v50 = (const CGFloat *)*((void *)v5 + 3);
        if (v49)
        {
          uint64_t v51 = 0;
          uint64_t v52 = *((void *)v5 + 4);
          uint64_t v53 = *((void *)v5 + 2);
          do
          {
            float v54 = (void *)(v52 + v51 * 8);
            *float v54 = *(void *)&v50[v51];
            v54[1] = *(void *)&v50[v51 + 1];
            v51 += 2;
            --v53;
          }
          while (v53);
        }
      }
      uint64_t result = (char *)CGFunctionCreate(v5, *(void *)v5, *((const CGFloat **)v5 + 1), v49, v50, &type0_callbacks);
      if (!result)
      {
        pdf_error("unable to create Type 0 function.");
        goto LABEL_97;
      }
      unsigned int v33 = copy_pdf_description_20616;
      goto LABEL_73;
    case 2:
      if (v2) {
        goto LABEL_39;
      }
      return cg_function_type2_create(v4);
    case 3:
      if (v2)
      {
LABEL_39:
        pdf_error("invalid function: not a dictionary.");
        return 0;
      }
      return cg_function_type3_create(v4);
    case 4:
      if (!v2)
      {
        pdf_error("invalid Type 4 function: not a stream.");
        return 0;
      }
      uint64_t result = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A00400F0CD34FuLL);
      if (!result) {
        return result;
      }
      uint64_t v16 = (uint64_t)result;
      unint64_t v56 = 0;
      uint64_t v17 = *(CGPDFDictionary **)(v2 + 48);
      uint64_t v18 = pdf_dictionary_copy_numbers(v17, "Domain", &v56);
      *(void *)(v16 + ++*(_DWORD *)(result + 8) = v18;
      if (!v18 || !v56 || (v56 & 1) != 0)
      {
LABEL_62:
        type4_release(v16);
        return 0;
      }
      *(void *)uint64_t v16 = v56 >> 1;
      uint64_t v19 = pdf_dictionary_copy_numbers(v17, "Range", &v56);
      *(void *)(v16 + 24) = v19;
      if (!v19 || !v56 || (v56 & 1) != 0)
      {
        goto LABEL_62;
      }
      *(void *)(v16 + 16) = v56 >> 1;
      int v57 = 0;
      uint64_t v20 = CGPDFStreamCreateFilterChain(v2, &v57);
      uint64_t v21 = v20;
      if (!v20 || v57)
      {
        if (!v20)
        {
LABEL_65:
          *(void *)(v16 + 32) = 0;
          goto LABEL_62;
        }
LABEL_64:
        CFRelease(v21);
        goto LABEL_65;
      }
      uint64_t v22 = malloc_type_malloc(0x20uLL, 0x103004057E7F81CuLL);
      if (!v22) {
        goto LABEL_64;
      }
      uint64_t v29 = v22;
      v22[2] = 0;
      v22[3] = 0;
      *uint64_t v22 = v21;
      v22[1] = 0;
      if (type4_lexer_scan((void **)v22, (uint64_t)v58, v23, v24, v25, v26, v27, v28) == 123)
      {
        unint64_t v30 = scan((void **)v29);
      }
      else
      {
        unint64_t v30 = 0;
      }
      free((void *)v29[1]);
      free(v29);
      CFRelease(v21);
      *(void *)(v16 + 32) = v30;
      if (!v30) {
        goto LABEL_62;
      }
      long long v31 = evaluation_create((void *)v16);
      *(void *)(v16 + 4++*(_DWORD *)(result + 8) = v31;
      if (!v31) {
        goto LABEL_62;
      }
      unsigned int v32 = evaluation_create((void *)v16);
      *(void *)(v16 + 40) = v32;
      if (!v32) {
        goto LABEL_62;
      }
      uint64_t result = (char *)CGFunctionCreate((void *)v16, *(void *)v16, *(const CGFloat **)(v16 + 8), *(void *)(v16 + 16), *(const CGFloat **)(v16 + 24), &type4_callbacks);
      if (!result)
      {
        pdf_error("unable to create Type 4 function.");
        goto LABEL_62;
      }
      unsigned int v33 = copy_pdf_description;
LABEL_73:
      *((void *)result + 11) = v33;
      return result;
    default:
      return 0;
  }
}

CGPDFReal *pdf_dictionary_copy_numbers(CGPDFDictionary *a1, const char *a2, void *a3)
{
  arradouble y = 0;
  CGPDFReal value = 0.0;
  size_t v4 = 0;
  if (!CGPDFDictionaryGetArray(a1, a2, &array)) {
    return v4;
  }
  if (!array)
  {
    uint64_t v5 = 0;
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v5 = *((void *)array + 2);
  if (a3) {
LABEL_4:
  }
    *a3 = v5;
LABEL_5:
  size_t v4 = (CGPDFReal *)malloc_type_malloc(8 * v5, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v4 && v5)
  {
    size_t v6 = 0;
    while (CGPDFArrayGetNumber(array, v6, &value))
    {
      v4[v6++] = value;
      if (v5 == v6) {
        return v4;
      }
    }
    free(v4);
    return 0;
  }
  return v4;
}

double *CGPDFTextStyleCreate(const void *a1, const void *a2, const void *a3, double a4, double a5, double a6)
{
  size_t v6 = 0;
  if (a1)
  {
    if (a4 >= 0.0 && a2 != 0)
    {
      uint8x8_t v14 = (double *)malloc_type_malloc(0x38uLL, 0x1020040AA3C56B0uLL);
      size_t v6 = v14;
      if (v14)
      {
        *(void *)uint8x8_t v14 = 1;
        CFRetain(a1);
        *((void *)v6 + 1) = a1;
        v6[2] = round(a4);
        CFRetain(a2);
        *((void *)v6 + 3) = a2;
        if (a3) {
          CFRetain(a3);
        }
        *((void *)v6 + 4) = a3;
        double v15 = round(a5 * 1000.0) / 1000.0;
        v6[5] = v15;
        void v6[6] = round(a6);
        if (v15 < 0.001 || 6.28318531 - v15 < 0.001) {
          v6[5] = 0.0;
        }
      }
    }
  }
  return v6;
}

void CGPDFTextStyleRelease(void *a1)
{
  if (a1)
  {
    if ((*a1)-- == 1)
    {
      uint64_t v3 = (const void *)a1[1];
      if (v3) {
        CFRelease(v3);
      }
      size_t v4 = (const void *)a1[3];
      if (v4) {
        CFRelease(v4);
      }
      uint64_t v5 = (const void *)a1[4];
      if (v5) {
        CFRelease(v5);
      }
      free(a1);
    }
  }
}

uint64_t CGPDFTextStyleEqualToPDFTextStyle(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1 || *(void *)(a1 + 8) != *(void *)(a2 + 8) || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
    return 0;
  }
  uint64_t result = CGColorEqualToColor(*(CGColorRef *)(a1 + 24), *(CGColorRef *)(a2 + 24));
  if (result)
  {
    uint64_t result = CGColorEqualToColor(*(CGColorRef *)(a1 + 32), *(CGColorRef *)(a2 + 32));
    if (result) {
      return *(double *)(a1 + 40) == *(double *)(a2 + 40) && *(double *)(a1 + 48) == *(double *)(a2 + 48);
    }
  }
  return result;
}

void ccitt_fax_filter_finalize(CFTypeRef *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[4];
    if (v2)
    {
      uint64_t v3 = (void *)v2[4];
      if (v3) {
        free(v3);
      }
      free(v2);
    }
    if (*a1) {
      CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t ccitt_fax_filter_refill(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v6 = a1;
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(_DWORD *)v7 != 4)
  {
    int v99 = *(_DWORD *)(v7 + 4);
    if ((v99 & 6) == 4)
    {
      int v100 = *(_DWORD *)(v7 + 20);
      if ((v100 & 7) != 0)
      {
        *(_DWORD *)(v7 + 16) >>= v100 & 7;
        *(_DWORD *)(v7 + 20) = v100 & 0xFFFFFFF8;
      }
    }
    if (*(_DWORD *)(v7 + 24))
    {
      int k = *(_DWORD *)(v7 + 20);
LABEL_138:
      for (int i = 1; ; int i = *(_DWORD *)(v7 + 24) + 1)
      {
        *(_DWORD *)(v7 + 24) = i;
        while (1)
        {
          if (k <= 7)
          {
            int v103 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
            if (v103 == -1)
            {
              if (!*(_DWORD *)(v7 + 20)) {
                goto LABEL_186;
              }
              int k = 8;
            }
            else
            {
              int v104 = *(_DWORD *)(v7 + 20);
              *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v103] << v104;
              int k = v104 + 8;
            }
          }
          unsigned int v105 = *(_DWORD *)(v7 + 16);
          if ((_BYTE)v105) {
            break;
          }
          k -= 8;
          *(_DWORD *)(v7 + 16) = v105 >> 8;
          *(_DWORD *)(v7 + 20) = k;
        }
        if ((v105 & 1) == 0)
        {
          do
          {
            char v106 = v105;
            --k;
            v105 >>= 1;
          }
          while ((v106 & 2) == 0);
        }
        int v107 = k - 1;
        unsigned int v108 = v105 >> 1;
        *(_DWORD *)(v7 + 16) = v108;
        *(_DWORD *)(v7 + 20) = k - 1;
        if (*(unsigned char *)(v7 + 4)) {
          break;
        }
        if (k <= 11)
        {
          int v109 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          if (v109 == -1)
          {
            if (!*(_DWORD *)(v7 + 20)) {
              goto LABEL_186;
            }
            unsigned int v108 = *(_DWORD *)(v7 + 16);
            goto LABEL_162;
          }
          int v110 = *(_DWORD *)(v7 + 20);
          unsigned int v108 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v109] << v110);
          int v107 = v110 + 8;
          *(_DWORD *)(v7 + 16) = v108;
          *(_DWORD *)(v7 + 20) = v110 + 8;
          if (v110 <= 2)
          {
            int v111 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
            unsigned int v108 = *(_DWORD *)(v7 + 16);
            if (v111 != -1)
            {
              int v112 = *(_DWORD *)(v7 + 20);
              v108 |= TIFFBitRevTable[v111] << v112;
              *(_DWORD *)(v7 + 16) = v108;
              int v107 = v112 + 8;
LABEL_163:
              *(_DWORD *)(v7 + 20) = v107;
              goto LABEL_164;
            }
LABEL_162:
            int v107 = 11;
            goto LABEL_163;
          }
        }
LABEL_164:
        if ((v108 & 0x7FF) != 0) {
          goto LABEL_228;
        }
        int k = v107 - 11;
        *(_DWORD *)(v7 + 20) = v107 - 11;
        unsigned int v117 = v108 >> 11;
LABEL_172:
        *(_DWORD *)(v7 + 16) = v117;
      }
      if (k <= 12)
      {
        int v113 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
        if (v113 == -1)
        {
          if (!*(_DWORD *)(v7 + 20)) {
            goto LABEL_186;
          }
          unsigned int v108 = *(_DWORD *)(v7 + 16);
          goto LABEL_168;
        }
        int v114 = *(_DWORD *)(v7 + 20);
        unsigned int v108 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v113] << v114);
        int v107 = v114 + 8;
        *(_DWORD *)(v7 + 16) = v108;
        *(_DWORD *)(v7 + 20) = v114 + 8;
        if (v114 <= 3)
        {
          int v115 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          unsigned int v108 = *(_DWORD *)(v7 + 16);
          if (v115 != -1)
          {
            int v116 = *(_DWORD *)(v7 + 20);
            v108 |= TIFFBitRevTable[v115] << v116;
            *(_DWORD *)(v7 + 16) = v108;
            int v107 = v116 + 8;
            goto LABEL_169;
          }
LABEL_168:
          int v107 = 12;
LABEL_169:
          *(_DWORD *)(v7 + 20) = v107;
        }
      }
      if ((v108 & 0xFFE) == 0)
      {
        int k = v107 - 12;
        *(_DWORD *)(v7 + 20) = v107 - 12;
        unsigned int v117 = v108 >> 12;
        goto LABEL_172;
      }
LABEL_228:
      int v123 = *(_DWORD *)(v7 + 24);
      if (v123 >= 2 && v123 != 6)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Line %d: bad RTC (%d EOLs)\n", *(_DWORD *)(v7 + 60), v123);
        int v123 = *(_DWORD *)(v7 + 24);
      }
      if (v123 > 5) {
        int v123 = -1;
      }
LABEL_187:
      if ((v99 & 1) == 0)
      {
        if (v123 < 0) {
          goto LABEL_543;
        }
        uint64_t v330 = a3;
        int v124 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        uint64_t v125 = *(_WORD **)(v7 + 48);
        signed int v126 = *(_DWORD *)(v7 + 12);
        int v127 = *(_DWORD *)(v7 + 20);
        uint64_t v128 = v125;
        while (1)
        {
          int v129 = 0;
          while (2)
          {
            if (v127 <= 11)
            {
              int v130 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
              if (v130 == -1)
              {
                if (!*(_DWORD *)(v7 + 20))
                {
LABEL_265:
                  if (v129
                    && (unint64_t)v128 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                  {
                    *v128++ = v129;
                  }
                  if (v124 == v126) {
                    goto LABEL_543;
                  }
                  BOOL v162 = v124 > v126;
                  if (v124 > v126 && v128 > v125)
                  {
                    int v163 = v128 - 1;
                    uint64_t v164 = v128 - 1;
                    do
                    {
                      int v165 = *v164--;
                      v124 -= v165;
                      BOOL v162 = v124 > v126;
                      BOOL v166 = v124 > v126 && v163 > v125;
                      int v163 = v164;
                    }
                    while (v166);
                    uint64_t v128 = v164 + 1;
                  }
                  if (v124 >= v126)
                  {
                    if (!v162) {
                      goto LABEL_543;
                    }
                    unint64_t v312 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                    if ((unint64_t)v128 < v312) {
                      *v128++ = v126;
                    }
                    if ((unint64_t)v128 >= v312) {
                      goto LABEL_543;
                    }
                    uint64_t result = 0;
                    *uint64_t v128 = 0;
                  }
                  else
                  {
                    unint64_t v167 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                    if (((v128 - v125) & 2) != 0 && (unint64_t)v128 < v167) {
                      *v128++ = 0;
                    }
                    if ((unint64_t)v128 >= v167) {
                      goto LABEL_543;
                    }
                    uint64_t result = 0;
                    *uint64_t v128 = v126 - (v124 & ~(unsigned __int16)(v124 >> 31));
                  }
                  goto LABEL_544;
                }
              }
              else
              {
                int v131 = *(_DWORD *)(v7 + 20);
                int v127 = v131 + 8;
                *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v130] << v131;
                *(_DWORD *)(v7 + 20) = v131 + 8;
                if (v131 > 3) {
                  goto LABEL_198;
                }
                int v132 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                if (v132 != -1)
                {
                  int v133 = *(_DWORD *)(v7 + 20);
                  *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v132] << v133;
                  int v127 = v133 + 8;
                  goto LABEL_198;
                }
              }
              int v127 = 12;
            }
LABEL_198:
            unsigned int v134 = *(_DWORD *)(v7 + 16);
            uint64_t v135 = v134 & 0xFFF;
            int v136 = *((unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v135 + 1);
            v127 -= v136;
            unsigned int v137 = v134 >> v136;
            *(_DWORD *)(v7 + 16) = v137;
            *(_DWORD *)(v7 + 20) = v127;
            switch(4 * v135)
            {
              case 0:
              case 18:
                goto LABEL_238;
              case 1:
              case 10:
              case 22:
              case 24:
                int v138 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v135 + 1);
                v124 += v138;
                v129 += v138;
                continue;
              case 4:
              case 8:
              case 12:
              case 16:
              case 20:
                int v139 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v135 + 1);
                if ((unint64_t)v128 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
                  *v128++ = v139 + v129;
                }
                v124 += v139;
                if (v124 >= v126) {
                  goto LABEL_243;
                }
                int v129 = 0;
                break;
              default:
                goto LABEL_239;
            }
            break;
          }
          while (1)
          {
            if (v127 > 12) {
              goto LABEL_212;
            }
            int v140 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
            if (v140 == -1)
            {
              if (!*(_DWORD *)(v7 + 20)) {
                goto LABEL_265;
              }
              unsigned int v137 = *(_DWORD *)(v7 + 16);
            }
            else
            {
              int v141 = *(_DWORD *)(v7 + 20);
              unsigned int v137 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v140] << v141);
              int v127 = v141 + 8;
              *(_DWORD *)(v7 + 16) = v137;
              *(_DWORD *)(v7 + 20) = v141 + 8;
              if (v141 > 4) {
                goto LABEL_212;
              }
              int v142 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
              unsigned int v137 = *(_DWORD *)(v7 + 16);
              if (v142 != -1)
              {
                int v143 = *(_DWORD *)(v7 + 20);
                v137 |= TIFFBitRevTable[v142] << v143;
                int v127 = v143 + 8;
                goto LABEL_212;
              }
            }
            int v127 = 13;
LABEL_212:
            uint64_t v144 = v137 & 0x1FFF;
            int v145 = &pdf_TIFFFaxBlackTable[2 * v144];
            int v146 = *((unsigned __int8 *)v145 + 1);
            v127 -= v146;
            v137 >>= v146;
            *(_DWORD *)(v7 + 16) = v137;
            *(_DWORD *)(v7 + 20) = v127;
            int v147 = *(unsigned __int8 *)v145;
            if ((v147 - 10) >= 2) {
              break;
            }
            int v148 = pdf_TIFFFaxBlackTable[2 * v144 + 1];
            v124 += v148;
            v129 += v148;
          }
          if (v147 != 8)
          {
            if (v147 == 12) {
LABEL_238:
            }
              *(_DWORD *)(v7 + 24) = 1;
            else {
LABEL_239:
            }
              *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
            if (v129
              && (unint64_t)v128 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
            {
              *v128++ = v129;
            }
            goto LABEL_243;
          }
          int v149 = pdf_TIFFFaxBlackTable[2 * v144 + 1];
          if ((unint64_t)v128 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
            *v128++ = v149 + v129;
          }
          v124 += v149;
          if (v124 >= v126)
          {
LABEL_243:
            if (v124 != v126)
            {
              BOOL v155 = v124 > v126;
              if (v124 > v126 && v128 > v125)
              {
                unint64_t v156 = v128 - 1;
                char v157 = v128 - 1;
                do
                {
                  int v158 = *v157--;
                  v124 -= v158;
                  BOOL v155 = v124 > v126;
                  BOOL v159 = v124 > v126 && v156 > v125;
                  unint64_t v156 = v157;
                }
                while (v159);
                uint64_t v128 = v157 + 1;
              }
              if (v124 >= v126)
              {
                if (v155)
                {
                  unint64_t v161 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                  if ((unint64_t)v128 < v161) {
                    *v128++ = v126;
                  }
                  if ((unint64_t)v128 < v161) {
                    *v128++ = 0;
                  }
                }
              }
              else
              {
                unint64_t v160 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                if (((v128 - v125) & 2) != 0 && (unint64_t)v128 < v160) {
                  *v128++ = 0;
                }
                if ((unint64_t)v128 < v160) {
                  *v128++ = v126 - (v124 & ~(unsigned __int16)(v124 >> 31));
                }
              }
            }
            if (*(_DWORD *)(v7 + 28)) {
              goto LABEL_543;
            }
            fill_runs(a2, v125, v128, v126, *(_DWORD *)(v7 + 4) & 0x10);
            goto LABEL_549;
          }
        }
      }
      if (v123 < 0) {
        goto LABEL_543;
      }
      *(_DWORD *)(v7 + 24) = 0;
      int v150 = *(_DWORD *)(v7 + 20);
      if (v150 <= 0)
      {
        int v151 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
        if (v151 == -1)
        {
          if (!*(_DWORD *)(v7 + 20)) {
            goto LABEL_543;
          }
          int v150 = 1;
        }
        else
        {
          int v152 = *(_DWORD *)(v7 + 20);
          *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v151] << v152;
          int v150 = v152 + 8;
        }
      }
      unint64_t v329 = a2;
      uint64_t v330 = a3;
      int v168 = v150 - 1;
      signed int v13 = *(_DWORD *)(v7 + 12);
      unsigned int v169 = *(_DWORD *)(v7 + 16);
      unsigned int v170 = v169 >> 1;
      *(_DWORD *)(v7 + 16) = v169 >> 1;
      *(_DWORD *)(v7 + 20) = v168;
      CFAllocatorRef v8 = *(_WORD **)(v7 + 48);
      if ((v169 & 1) == 0)
      {
        uint64_t v331 = v6;
        if (v13 < 1)
        {
          int v172 = 0;
          uint64_t v27 = *(_WORD **)(v7 + 48);
          goto LABEL_448;
        }
        LOWORD(v171) = 0;
        int v172 = 0;
        int j = 0;
        float v174 = *(unsigned __int16 **)(v7 + 40);
        int v177 = *v174;
        uint64_t v176 = v174 + 1;
        int v175 = v177;
        uint64_t v27 = *(_WORD **)(v7 + 48);
LABEL_288:
        if (v168 <= 6)
        {
          int v178 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          if (v178 == -1)
          {
            if (!*(_DWORD *)(v7 + 20))
            {
LABEL_622:
              if (j) {
                goto LABEL_623;
              }
              goto LABEL_625;
            }
            unsigned int v170 = *(_DWORD *)(v7 + 16);
            int v168 = 7;
          }
          else
          {
            int v179 = *(_DWORD *)(v7 + 20);
            unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v178] << v179);
            int v168 = v179 + 8;
          }
        }
        uint64_t v180 = v170 & 0x7F;
        int v181 = *((unsigned __int8 *)&pdf_TIFFFaxMainTable + 4 * v180 + 1);
        v168 -= v181;
        v170 >>= v181;
        *(_DWORD *)(v7 + 16) = v170;
        *(_DWORD *)(v7 + 20) = v168;
        switch(4 * v180)
        {
          case 0:
          case 0x200:
          case 0x212:
            if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
              *v27++ = v13 - v172;
            }
            if (v168 <= 3)
            {
              int v321 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
              if (v321 == -1)
              {
                if (!*(_DWORD *)(v7 + 20)) {
                  goto LABEL_622;
                }
                unsigned int v170 = *(_DWORD *)(v7 + 16);
                int v168 = 4;
              }
              else
              {
                int v322 = *(_DWORD *)(v7 + 20);
                unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v321] << v322);
                int v168 = v322 + 8;
              }
            }
            if ((v170 & 0xF) != 0) {
              *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
            }
            uint64_t result = 0;
            *(_DWORD *)(v7 + 16) = v170 >> 4;
            *(_DWORD *)(v7 + 20) = v168 - 4;
            *(_DWORD *)(v7 + 24) = 1;
            goto LABEL_558;
          case 4:
          case 9:
          case 0xCLL:
          case 0x11:
          case 0x14:
          case 0x19:
          case 0x1CLL:
          case 0x24:
          case 0x29:
          case 0x2CLL:
          case 0x31:
          case 0x34:
          case 0x39:
          case 0x3CLL:
          case 0x44:
          case 0x49:
          case 0x4CLL:
          case 0x51:
          case 0x54:
          case 0x59:
          case 0x5CLL:
          case 0x64:
          case 0x69:
          case 0x6CLL:
          case 0x71:
          case 0x74:
          case 0x79:
          case 0x7CLL:
          case 0x82:
          case 0x84:
          case 0x89:
          case 0x8CLL:
          case 0x91:
          case 0x94:
          case 0x99:
          case 0x9CLL:
          case 0xA4:
          case 0xA9:
          case 0xACLL:
          case 0xB1:
          case 0xB4:
          case 0xB9:
          case 0xBCLL:
          case 0xC4:
          case 0xC9:
          case 0xCCLL:
          case 0xD1:
          case 0xD4:
          case 0xD9:
          case 0xDCLL:
          case 0xE4:
          case 0xE9:
          case 0xECLL:
          case 0xF1:
          case 0xF4:
          case 0xF9:
          case 0xFCLL:
          case 0x104:
          case 0x109:
          case 0x10CLL:
          case 0x111:
          case 0x114:
          case 0x119:
          case 0x11CLL:
          case 0x124:
          case 0x129:
          case 0x12CLL:
          case 0x131:
          case 0x134:
          case 0x139:
          case 0x13CLL:
          case 0x144:
          case 0x149:
          case 0x14CLL:
          case 0x151:
          case 0x154:
          case 0x159:
          case 0x15CLL:
          case 0x164:
          case 0x169:
          case 0x16CLL:
          case 0x171:
          case 0x174:
          case 0x179:
          case 0x17CLL:
          case 0x182:
          case 0x184:
          case 0x189:
          case 0x18CLL:
          case 0x191:
          case 0x194:
          case 0x199:
          case 0x19CLL:
          case 0x1A4:
          case 0x1A9:
          case 0x1ACLL:
          case 0x1B1:
          case 0x1B4:
          case 0x1B9:
          case 0x1BCLL:
          case 0x1C4:
          case 0x1C9:
          case 0x1CCLL:
          case 0x1D1:
          case 0x1D4:
          case 0x1D9:
          case 0x1DCLL:
          case 0x1E4:
          case 0x1E9:
          case 0x1ECLL:
          case 0x1F1:
          case 0x1F4:
          case 0x1F9:
          case 0x1FCLL:
          case 0x206:
            uint64_t v209 = *(unsigned int *)(v7 + 56);
            if (v27 != v8 && v175 <= v172)
            {
              long long v210 = v176 + 1;
              do
              {
                if ((unint64_t)v210 >= *(void *)(v7 + 40) + 2 * v209) {
                  break;
                }
                int v211 = *(v210 - 1);
                int v212 = *v210;
                v210 += 2;
                v175 += v211 + v212;
              }
              while (v175 <= v172);
              uint64_t v176 = v210 - 1;
            }
            int v172 = v175;
            if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * v209) {
              *v27++ = j + v171 + v175;
            }
            if ((unint64_t)v176 >= *(void *)(v7 + 40) + 2 * v209) {
              goto LABEL_448;
            }
            int j = 0;
            int v213 = *v176++;
            v175 += v213;
            goto LABEL_358;
          case 5:
          case 0xALL:
          case 0xDLL:
          case 0x15:
          case 0x1ALL:
          case 0x1DLL:
          case 0x20:
          case 0x25:
          case 0x2ALL:
          case 0x2DLL:
          case 0x35:
          case 0x3ALL:
          case 0x3DLL:
          case 0x45:
          case 0x4ALL:
          case 0x4DLL:
          case 0x55:
          case 0x5ALL:
          case 0x5DLL:
          case 0x60:
          case 0x65:
          case 0x6ALL:
          case 0x6DLL:
          case 0x75:
          case 0x7ALL:
          case 0x7DLL:
          case 0x85:
          case 0x8ALL:
          case 0x8DLL:
          case 0x95:
          case 0x9ALL:
          case 0x9DLL:
          case 0xA0:
          case 0xA5:
          case 0xAALL:
          case 0xADLL:
          case 0xB5:
          case 0xBALL:
          case 0xBDLL:
          case 0xC5:
          case 0xCALL:
          case 0xCDLL:
          case 0xD5:
          case 0xDALL:
          case 0xDDLL:
          case 0xE0:
          case 0xE5:
          case 0xEALL:
          case 0xEDLL:
          case 0xF5:
          case 0xFALL:
          case 0xFDLL:
          case 0x105:
          case 0x10ALL:
          case 0x10DLL:
          case 0x115:
          case 0x11ALL:
          case 0x11DLL:
          case 0x120:
          case 0x125:
          case 0x12ALL:
          case 0x12DLL:
          case 0x135:
          case 0x13ALL:
          case 0x13DLL:
          case 0x145:
          case 0x14ALL:
          case 0x14DLL:
          case 0x155:
          case 0x15ALL:
          case 0x15DLL:
          case 0x160:
          case 0x165:
          case 0x16ALL:
          case 0x16DLL:
          case 0x175:
          case 0x17ALL:
          case 0x17DLL:
          case 0x185:
          case 0x18ALL:
          case 0x18DLL:
          case 0x195:
          case 0x19ALL:
          case 0x19DLL:
          case 0x1A0:
          case 0x1A5:
          case 0x1AALL:
          case 0x1ADLL:
          case 0x1B5:
          case 0x1BALL:
          case 0x1BDLL:
          case 0x1C5:
          case 0x1CALL:
          case 0x1CDLL:
          case 0x1D5:
          case 0x1DALL:
          case 0x1DDLL:
          case 0x1E0:
          case 0x1E5:
          case 0x1EALL:
          case 0x1EDLL:
          case 0x1F5:
          case 0x1FALL:
          case 0x1FDLL:
            uint64_t v182 = *(void *)(v7 + 40);
            uint64_t v183 = *(unsigned int *)(v7 + 56);
            if (v27 != v8 && v175 <= v172)
            {
              uint64_t v184 = v176 + 1;
              do
              {
                if ((unint64_t)v184 >= v182 + 2 * v183) {
                  break;
                }
                int v185 = *(v184 - 1);
                int v186 = *v184;
                v184 += 2;
                v175 += v185 + v186;
              }
              while (v175 <= v172);
              uint64_t v176 = v184 - 1;
            }
            unint64_t v187 = v182 + 2 * v183;
            if ((unint64_t)v176 >= v187) {
              goto LABEL_445;
            }
            int v188 = v175 + *v176;
            j += v188 - v172;
            if ((unint64_t)(v176 + 1) >= v187)
            {
              int v172 = v175 + *v176;
              goto LABEL_445;
            }
            int v189 = v176[1];
            v176 += 2;
            int v175 = v188 + v189;
            int v172 = v188;
            goto LABEL_358;
          case 8:
          case 0x28:
          case 0x40:
          case 0x48:
          case 0x68:
          case 0x80:
          case 0x88:
          case 0xA8:
          case 0xC8:
          case 0xE8:
          case 0x108:
          case 0x128:
          case 0x140:
          case 0x148:
          case 0x168:
          case 0x188:
          case 0x1A8:
          case 0x1C8:
          case 0x1E8:
          case 0x209:
          case 0x20ELL:
          case 0x215:
            if (v27 != v8 && v175 <= v172)
            {
              uint64_t v220 = v176 + 1;
              do
              {
                if ((unint64_t)v220 >= *(void *)(v7 + 40) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
                  break;
                }
                int v221 = *(v220 - 1);
                int v222 = *v220;
                v220 += 2;
                v175 += v221 + v222;
              }
              while (v175 <= v172);
              uint64_t v176 = v220 - 1;
            }
            int v223 = v172 + *((unsigned __int16 *)&pdf_TIFFFaxMainTable + 2 * v180 + 1);
            BOOL v68 = __OFSUB__(v175, v223);
            int v224 = v175 - v223;
            if (v224 < 0 != v68) {
              goto LABEL_445;
            }
            if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
              *v27++ = v224 + j;
            }
            int j = 0;
            v172 += v224;
            int v225 = *--v176;
            v175 -= v225;
            goto LABEL_358;
          case 0x10:
          case 0x30:
          case 0x42:
          case 0x50:
          case 0x70:
          case 0x90:
          case 0xB0:
          case 0xC2:
          case 0xD0:
          case 0xF0:
          case 0x110:
          case 0x130:
          case 0x142:
          case 0x150:
          case 0x170:
          case 0x190:
          case 0x1B0:
          case 0x1C2:
          case 0x1D0:
          case 0x1F0:
            if (((v27 - v8) & 2) == 0)
            {
              while (1)
              {
                if (v168 > 11) {
                  goto LABEL_312;
                }
                int v190 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                if (v190 == -1)
                {
                  if (!*(_DWORD *)(v7 + 20)) {
                    goto LABEL_622;
                  }
                  unsigned int v170 = *(_DWORD *)(v7 + 16);
                }
                else
                {
                  int v191 = *(_DWORD *)(v7 + 20);
                  unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v190] << v191);
                  int v168 = v191 + 8;
                  *(_DWORD *)(v7 + 16) = v170;
                  *(_DWORD *)(v7 + 20) = v191 + 8;
                  if (v191 > 3) {
                    goto LABEL_312;
                  }
                  int v192 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                  unsigned int v170 = *(_DWORD *)(v7 + 16);
                  if (v192 != -1)
                  {
                    int v193 = *(_DWORD *)(v7 + 20);
                    v170 |= TIFFBitRevTable[v192] << v193;
                    int v168 = v193 + 8;
                    goto LABEL_312;
                  }
                }
                int v168 = 12;
LABEL_312:
                uint64_t v194 = v170 & 0xFFF;
                uint64_t v195 = (unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v194;
                int v196 = v195[1];
                v168 -= v196;
                v170 >>= v196;
                *(_DWORD *)(v7 + 16) = v170;
                *(_DWORD *)(v7 + 20) = v168;
                int v197 = *v195;
                if (v197 != 9 && v197 != 11)
                {
                  if (v197 != 7) {
                    goto LABEL_444;
                  }
                  int v226 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v194 + 1);
                  if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
                    *v27++ = v226 + j;
                  }
                  for (int j = 0; ; j += v226)
                  {
                    v172 += v226;
                    if (v168 > 12) {
                      goto LABEL_372;
                    }
                    int v227 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                    if (v227 == -1)
                    {
                      if (!*(_DWORD *)(v7 + 20)) {
                        goto LABEL_622;
                      }
                      unsigned int v170 = *(_DWORD *)(v7 + 16);
                    }
                    else
                    {
                      int v228 = *(_DWORD *)(v7 + 20);
                      unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v227] << v228);
                      int v168 = v228 + 8;
                      *(_DWORD *)(v7 + 16) = v170;
                      *(_DWORD *)(v7 + 20) = v228 + 8;
                      if (v228 > 4) {
                        goto LABEL_372;
                      }
                      int v229 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                      unsigned int v170 = *(_DWORD *)(v7 + 16);
                      if (v229 != -1)
                      {
                        int v230 = *(_DWORD *)(v7 + 20);
                        v170 |= TIFFBitRevTable[v229] << v230;
                        int v168 = v230 + 8;
                        goto LABEL_372;
                      }
                    }
                    int v168 = 13;
LABEL_372:
                    uint64_t v231 = v170 & 0x1FFF;
                    unint64_t v232 = &pdf_TIFFFaxBlackTable[2 * v231];
                    int v233 = *((unsigned __int8 *)v232 + 1);
                    v168 -= v233;
                    v170 >>= v233;
                    *(_DWORD *)(v7 + 16) = v170;
                    *(_DWORD *)(v7 + 20) = v168;
                    int v234 = *(unsigned __int8 *)v232;
                    if ((v234 - 10) >= 2)
                    {
                      if (v234 == 8)
                      {
                        unsigned int v245 = (char *)&pdf_TIFFFaxBlackTable[2 * v231];
                        goto LABEL_396;
                      }
LABEL_444:
                      *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
LABEL_445:
                      if (j)
                      {
LABEL_446:
                        if ((unint64_t)v27 < *(void *)(v7 + 48)
                                                   + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                          *v27++ = j;
                      }
LABEL_448:
                      if (v172 == v13)
                      {
                        uint64_t v6 = v331;
                        goto LABEL_546;
                      }
                      BOOL v274 = v172 > v13;
                      uint64_t v6 = v331;
                      if (v172 > v13 && v27 > v8)
                      {
                        uint64_t v275 = v27 - 1;
                        uint64_t v276 = v27 - 1;
                        do
                        {
                          int v277 = *v276--;
                          v172 -= v277;
                          BOOL v274 = v172 > v13;
                          BOOL v278 = v172 > v13 && v275 > v8;
                          uint64_t v275 = v276;
                        }
                        while (v278);
                        uint64_t v27 = v276 + 1;
                      }
                      if (v172 < v13)
                      {
                        unint64_t v279 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                        if (((v27 - v8) & 2) != 0 && (unint64_t)v27 < v279) {
                          *v27++ = 0;
                        }
                        if ((unint64_t)v27 >= v279) {
                          goto LABEL_546;
                        }
                        int v280 = v172 & ~(v172 >> 31);
                        goto LABEL_485;
                      }
                      goto LABEL_486;
                    }
                    int v226 = pdf_TIFFFaxBlackTable[2 * v231 + 1];
                  }
                }
                int v199 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v194 + 1);
                j += v199;
                v172 += v199;
              }
            }
            break;
          case 0x18:
          case 0x21:
          case 0x38:
          case 0x58:
          case 0x61:
          case 0x78:
          case 0x98:
          case 0xA1:
          case 0xB8:
          case 0xC0:
          case 0xD8:
          case 0xE1:
          case 0xF8:
          case 0x118:
          case 0x121:
          case 0x138:
          case 0x158:
          case 0x161:
          case 0x178:
          case 0x180:
          case 0x198:
          case 0x1A1:
          case 0x1B8:
          case 0x1C0:
          case 0x1D8:
          case 0x1E1:
          case 0x1F8:
          case 0x205:
          case 0x20DLL:
            uint64_t v214 = *(unsigned int *)(v7 + 56);
            if (v27 != v8 && v175 <= v172)
            {
              uint64_t v215 = v176 + 1;
              do
              {
                if ((unint64_t)v215 >= *(void *)(v7 + 40) + 2 * v214) {
                  break;
                }
                int v216 = *(v215 - 1);
                int v217 = *v215;
                v215 += 2;
                v175 += v216 + v217;
              }
              while (v175 <= v172);
              uint64_t v176 = v215 - 1;
            }
            int v218 = *((unsigned __int16 *)&pdf_TIFFFaxMainTable + 2 * v180 + 1);
            if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * v214) {
              *v27++ = v218 + j + v171 + v175;
            }
            int v172 = v175 + v218;
            if ((unint64_t)v176 >= *(void *)(v7 + 40) + 2 * v214) {
              goto LABEL_448;
            }
            int j = 0;
            int v219 = *v176++;
            v175 += v219;
            goto LABEL_358;
          case 0x41:
          case 0xC1:
          case 0x100:
          case 0x141:
          case 0x1C1:
          case 0x211:
          case 0x219:
            if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
              *v27++ = v13 - v172;
            }
            goto LABEL_445;
          default:
            goto LABEL_444;
        }
        while (1)
        {
          if (v168 > 12) {
            goto LABEL_326;
          }
          int v200 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          if (v200 == -1)
          {
            if (!*(_DWORD *)(v7 + 20)) {
              goto LABEL_622;
            }
            unsigned int v170 = *(_DWORD *)(v7 + 16);
          }
          else
          {
            int v201 = *(_DWORD *)(v7 + 20);
            unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v200] << v201);
            int v168 = v201 + 8;
            *(_DWORD *)(v7 + 16) = v170;
            *(_DWORD *)(v7 + 20) = v201 + 8;
            if (v201 > 4) {
              goto LABEL_326;
            }
            int v202 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
            unsigned int v170 = *(_DWORD *)(v7 + 16);
            if (v202 != -1)
            {
              int v203 = *(_DWORD *)(v7 + 20);
              v170 |= TIFFBitRevTable[v202] << v203;
              int v168 = v203 + 8;
              goto LABEL_326;
            }
          }
          int v168 = 13;
LABEL_326:
          uint64_t v204 = v170 & 0x1FFF;
          float v205 = &pdf_TIFFFaxBlackTable[2 * v204];
          int v206 = *((unsigned __int8 *)v205 + 1);
          v168 -= v206;
          v170 >>= v206;
          *(_DWORD *)(v7 + 16) = v170;
          *(_DWORD *)(v7 + 20) = v168;
          int v207 = *(unsigned __int8 *)v205;
          if ((v207 - 10) >= 2)
          {
            if (v207 != 8) {
              goto LABEL_444;
            }
            int v235 = pdf_TIFFFaxBlackTable[2 * v204 + 1];
            if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
              *v27++ = v235 + j;
            }
            for (int j = 0; ; j += v235)
            {
              v172 += v235;
              if (v168 > 11) {
                goto LABEL_386;
              }
              int v236 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
              if (v236 == -1)
              {
                if (!*(_DWORD *)(v7 + 20)) {
                  goto LABEL_622;
                }
                unsigned int v170 = *(_DWORD *)(v7 + 16);
              }
              else
              {
                int v237 = *(_DWORD *)(v7 + 20);
                unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v236] << v237);
                int v168 = v237 + 8;
                *(_DWORD *)(v7 + 16) = v170;
                *(_DWORD *)(v7 + 20) = v237 + 8;
                if (v237 > 3) {
                  goto LABEL_386;
                }
                int v238 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                unsigned int v170 = *(_DWORD *)(v7 + 16);
                if (v238 != -1)
                {
                  int v239 = *(_DWORD *)(v7 + 20);
                  v170 |= TIFFBitRevTable[v238] << v239;
                  int v168 = v239 + 8;
                  goto LABEL_386;
                }
              }
              int v168 = 12;
LABEL_386:
              uint64_t v240 = v170 & 0xFFF;
              uint64_t v241 = (unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v240;
              int v242 = v241[1];
              v168 -= v242;
              v170 >>= v242;
              *(_DWORD *)(v7 + 16) = v170;
              *(_DWORD *)(v7 + 20) = v168;
              int v243 = *v241;
              if (v243 != 9 && v243 != 11)
              {
                if (v243 != 7) {
                  goto LABEL_444;
                }
                unsigned int v245 = (char *)&pdf_TIFFFaxWhiteTable + 4 * v240;
LABEL_396:
                int v246 = *((unsigned __int16 *)v245 + 1);
                uint64_t v247 = *(unsigned int *)(v7 + 56);
                if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * v247) {
                  *v27++ = v246 + j;
                }
                v172 += v246;
                if (v27 == v8)
                {
                  int j = 0;
                  uint64_t v27 = v8;
                }
                else if (v175 <= v172 && v175 < v13)
                {
                  unint64_t v249 = *(void *)(v7 + 40) + 2 * v247;
                  uint64_t v250 = v176 + 1;
                  do
                  {
                    if ((unint64_t)v250 >= v249) {
                      break;
                    }
                    int v251 = *(v250 - 1);
                    int v252 = *v250;
                    v250 += 2;
                    v175 += v251 + v252;
                  }
                  while (v175 <= v172 && v175 < v13);
                  int j = 0;
                  uint64_t v176 = v250 - 1;
                }
                else
                {
                  int j = 0;
                }
LABEL_358:
                int v171 = -v172;
                if (v172 >= v13)
                {
                  if (!j) {
                    goto LABEL_448;
                  }
                  if (v168 > 0)
                  {
LABEL_614:
                    if (v170)
                    {
                      *(_DWORD *)(v7 + 16) = v170 >> 1;
                      *(_DWORD *)(v7 + 20) = v168 - 1;
                    }
                    else
                    {
                      *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
                    }
                    goto LABEL_446;
                  }
                  int v313 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                  if (v313 != -1)
                  {
                    int v314 = *(_DWORD *)(v7 + 20);
                    unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v313] << v314);
                    int v168 = v314 + 8;
                    *(_DWORD *)(v7 + 16) = v170;
                    *(_DWORD *)(v7 + 20) = v168;
                    goto LABEL_614;
                  }
                  if (*(_DWORD *)(v7 + 20))
                  {
                    int v168 = 1;
                    *(_DWORD *)(v7 + 20) = 1;
                    unsigned int v170 = *(_DWORD *)(v7 + 16);
                    goto LABEL_614;
                  }
LABEL_623:
                  if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
                    *v27++ = j;
                  }
LABEL_625:
                  if (v172 == v13) {
                    goto LABEL_557;
                  }
                  BOOL v287 = v172 > v13;
                  uint64_t v6 = v331;
                  if (v172 > v13 && v27 > v8)
                  {
                    BOOL v323 = v27 - 1;
                    BOOL v324 = v27 - 1;
                    do
                    {
                      int v325 = *v324--;
                      v172 -= v325;
                      BOOL v287 = v172 > v13;
                      BOOL v326 = v172 > v13 && v323 > v8;
                      BOOL v323 = v324;
                    }
                    while (v326);
                    uint64_t v27 = v324 + 1;
                  }
                  if (v172 < v13)
                  {
                    unint64_t v327 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                    if (((v27 - v8) & 2) != 0 && (unint64_t)v27 < v327) {
                      *v27++ = 0;
                    }
                    if ((unint64_t)v27 >= v327) {
                      goto LABEL_543;
                    }
                    uint64_t result = 0;
                    int v293 = v172 & ~(v172 >> 31);
                    goto LABEL_573;
                  }
LABEL_640:
                  if (!v287) {
                    goto LABEL_543;
                  }
                  unint64_t v328 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                  if ((unint64_t)v27 < v328) {
                    *v27++ = v13;
                  }
                  if ((unint64_t)v27 >= v328) {
                    goto LABEL_543;
                  }
                  uint64_t result = 0;
                  *uint64_t v27 = 0;
                  goto LABEL_544;
                }
                goto LABEL_288;
              }
              int v235 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v240 + 1);
            }
          }
          int v208 = pdf_TIFFFaxBlackTable[2 * v204 + 1];
          j += v208;
          v172 += v208;
        }
      }
      int v254 = 0;
      uint64_t v27 = *(_WORD **)(v7 + 48);
LABEL_413:
      int v255 = 0;
      while (2)
      {
        if (v168 > 11) {
          goto LABEL_422;
        }
        int v256 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
        if (v256 == -1)
        {
          if (!*(_DWORD *)(v7 + 20))
          {
LABEL_493:
            if (v255 && (unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
              *v27++ = v255;
            }
            if (v254 == v13) {
              goto LABEL_543;
            }
            BOOL v287 = v254 > v13;
            if (v254 > v13 && v27 > v8)
            {
              uint64_t v288 = v27 - 1;
              uint64_t v289 = v27 - 1;
              do
              {
                int v290 = *v289--;
                v254 -= v290;
                BOOL v287 = v254 > v13;
                BOOL v291 = v254 > v13 && v288 > v8;
                uint64_t v288 = v289;
              }
              while (v291);
              uint64_t v27 = v289 + 1;
            }
            if (v254 < v13)
            {
              unint64_t v292 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
              if (((v27 - v8) & 2) != 0 && (unint64_t)v27 < v292) {
                *v27++ = 0;
              }
              if ((unint64_t)v27 >= v292) {
                goto LABEL_543;
              }
              uint64_t result = 0;
              int v293 = v254 & ~(v254 >> 31);
              goto LABEL_573;
            }
            goto LABEL_640;
          }
          unsigned int v170 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          int v257 = *(_DWORD *)(v7 + 20);
          unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v256] << v257);
          int v168 = v257 + 8;
          *(_DWORD *)(v7 + 16) = v170;
          *(_DWORD *)(v7 + 20) = v257 + 8;
          if (v257 > 3) {
            goto LABEL_422;
          }
          int v258 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          unsigned int v170 = *(_DWORD *)(v7 + 16);
          if (v258 != -1)
          {
            int v259 = *(_DWORD *)(v7 + 20);
            v170 |= TIFFBitRevTable[v258] << v259;
            int v168 = v259 + 8;
            goto LABEL_422;
          }
        }
        int v168 = 12;
LABEL_422:
        uint64_t v260 = v170 & 0xFFF;
        int v261 = *((unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v260 + 1);
        v168 -= v261;
        v170 >>= v261;
        *(_DWORD *)(v7 + 16) = v170;
        *(_DWORD *)(v7 + 20) = v168;
        switch(4 * v260)
        {
          case 0:
          case 0x12:
            goto LABEL_465;
          case 1:
          case 0xALL:
          case 0x16:
          case 0x18:
            int v262 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v260 + 1);
            v254 += v262;
            v255 += v262;
            continue;
          case 4:
          case 8:
          case 0xCLL:
          case 0x10:
          case 0x14:
            int v263 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v260 + 1);
            if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
              *v27++ = v263 + v255;
            }
            v254 += v263;
            if (v254 >= v13) {
              goto LABEL_470;
            }
            int v255 = 0;
            break;
          default:
            goto LABEL_466;
        }
        break;
      }
      while (1)
      {
        if (v168 > 12) {
          goto LABEL_436;
        }
        int v264 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
        if (v264 == -1)
        {
          if (!*(_DWORD *)(v7 + 20)) {
            goto LABEL_493;
          }
          unsigned int v170 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          int v265 = *(_DWORD *)(v7 + 20);
          unsigned int v170 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v264] << v265);
          int v168 = v265 + 8;
          *(_DWORD *)(v7 + 16) = v170;
          *(_DWORD *)(v7 + 20) = v265 + 8;
          if (v265 > 4) {
            goto LABEL_436;
          }
          int v266 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          unsigned int v170 = *(_DWORD *)(v7 + 16);
          if (v266 != -1)
          {
            int v267 = *(_DWORD *)(v7 + 20);
            v170 |= TIFFBitRevTable[v266] << v267;
            int v168 = v267 + 8;
            goto LABEL_436;
          }
        }
        int v168 = 13;
LABEL_436:
        uint64_t v268 = v170 & 0x1FFF;
        uint64_t v269 = &pdf_TIFFFaxBlackTable[2 * v268];
        int v270 = *((unsigned __int8 *)v269 + 1);
        v168 -= v270;
        v170 >>= v270;
        *(_DWORD *)(v7 + 16) = v170;
        *(_DWORD *)(v7 + 20) = v168;
        int v271 = *(unsigned __int8 *)v269;
        if ((v271 - 10) >= 2)
        {
          if (v271 != 8)
          {
            if (v271 == 12) {
LABEL_465:
            }
              *(_DWORD *)(v7 + 24) = 1;
            else {
LABEL_466:
            }
              *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
            if (v255 && (unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
              *v27++ = v255;
            }
LABEL_470:
            if (v254 == v13) {
              goto LABEL_546;
            }
            BOOL v274 = v254 > v13;
            if (v254 > v13 && v27 > v8)
            {
              uint64_t v281 = v27 - 1;
              uint64_t v282 = v27 - 1;
              do
              {
                int v283 = *v282--;
                v254 -= v283;
                BOOL v274 = v254 > v13;
                BOOL v284 = v254 > v13 && v281 > v8;
                uint64_t v281 = v282;
              }
              while (v284);
              uint64_t v27 = v282 + 1;
            }
            if (v254 < v13)
            {
              unint64_t v285 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
              if (((v27 - v8) & 2) != 0 && (unint64_t)v27 < v285) {
                *v27++ = 0;
              }
              if ((unint64_t)v27 >= v285) {
                goto LABEL_546;
              }
              int v280 = v254 & ~(v254 >> 31);
LABEL_485:
              *v27++ = v13 - v280;
              goto LABEL_546;
            }
LABEL_486:
            if (v274)
            {
              unint64_t v286 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
              if ((unint64_t)v27 < v286) {
                *v27++ = v13;
              }
              if ((unint64_t)v27 < v286) {
                *v27++ = 0;
              }
            }
            goto LABEL_546;
          }
          int v273 = pdf_TIFFFaxBlackTable[2 * v268 + 1];
          if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
            *v27++ = v273 + v255;
          }
          v254 += v273;
          if (v254 >= v13) {
            goto LABEL_470;
          }
          goto LABEL_413;
        }
        int v272 = pdf_TIFFFaxBlackTable[2 * v268 + 1];
        v254 += v272;
        v255 += v272;
      }
    }
    for (int k = *(_DWORD *)(v7 + 20); ; *(_DWORD *)(v7 + 20) = k)
    {
      if (k > 10) {
        goto LABEL_183;
      }
      int v118 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
      if (v118 == -1) {
        break;
      }
      int v119 = *(_DWORD *)(v7 + 20);
      int k = v119 + 8;
      *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v118] << v119;
      *(_DWORD *)(v7 + 20) = v119 + 8;
      if (v119 > 2) {
        goto LABEL_183;
      }
      int v120 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
      if (v120 == -1) {
        goto LABEL_181;
      }
      int v121 = *(_DWORD *)(v7 + 20);
      *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v120] << v121;
      int k = v121 + 8;
LABEL_182:
      *(_DWORD *)(v7 + 20) = k;
LABEL_183:
      unsigned int v122 = *(_DWORD *)(v7 + 16);
      if ((v122 & 0x7FF) == 0) {
        goto LABEL_138;
      }
      if ((*(unsigned char *)(v7 + 4) & 2) == 0)
      {
        int v123 = 0;
        goto LABEL_187;
      }
      --k;
      *(_DWORD *)(v7 + 16) = v122 >> 1;
    }
    if (!*(_DWORD *)(v7 + 20))
    {
LABEL_186:
      int v123 = -1;
      goto LABEL_187;
    }
LABEL_181:
    int k = 11;
    goto LABEL_182;
  }
  unint64_t v329 = a2;
  uint64_t v330 = a3;
  CFStringRef v9 = *(unsigned __int16 **)(v7 + 40);
  CFAllocatorRef v8 = *(_WORD **)(v7 + 48);
  int v12 = *v9;
  CFDataRef v11 = v9 + 1;
  int v10 = v12;
  signed int v13 = *(_DWORD *)(v7 + 12);
  if ((*(unsigned char *)(v7 + 4) & 4) != 0)
  {
    int v14 = *(_DWORD *)(v7 + 20);
    if ((v14 & 7) != 0)
    {
      *(_DWORD *)(v7 + 16) >>= v14 & 7;
      *(_DWORD *)(v7 + 20) = v14 & 0xFFFFFFF8;
    }
  }
  uint64_t v331 = a1;
  if (v13 < 1)
  {
    int v16 = 0;
    uint64_t v27 = v8;
    goto LABEL_521;
  }
  LOWORD(v15) = 0;
  int v16 = 0;
  int m = 0;
  int v18 = *(_DWORD *)(v7 + 20);
  vImage_Buffer v332 = v8;
LABEL_9:
  if (v18 <= 6)
  {
    int v19 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
    if (v19 == -1)
    {
      if (!*(_DWORD *)(v7 + 20))
      {
        uint64_t v27 = v8;
        CFAllocatorRef v8 = v332;
LABEL_553:
        if (m) {
          goto LABEL_554;
        }
        goto LABEL_556;
      }
      int v18 = 7;
    }
    else
    {
      int v20 = *(_DWORD *)(v7 + 20);
      *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v19] << v20;
      int v18 = v20 + 8;
    }
  }
  unsigned int v21 = *(_DWORD *)(v7 + 16);
  uint64_t v22 = v21 & 0x7F;
  int v23 = *((unsigned __int8 *)&pdf_TIFFFaxMainTable + 4 * v22 + 1);
  v18 -= v23;
  unsigned int v24 = v21 >> v23;
  *(_DWORD *)(v7 + 16) = v24;
  *(_DWORD *)(v7 + 20) = v18;
  switch(4 * v22)
  {
    case 0:
    case 512:
    case 530:
      uint64_t v27 = v8;
      if ((unint64_t)v8 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
      {
        _WORD *v8 = v13 - v16;
        uint64_t v27 = v8 + 1;
      }
      CFAllocatorRef v8 = v332;
      if (v18 <= 3)
      {
        int v294 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
        if (v294 == -1)
        {
          if (!*(_DWORD *)(v7 + 20)) {
            goto LABEL_553;
          }
          unsigned int v24 = *(_DWORD *)(v7 + 16);
          int v18 = 4;
        }
        else
        {
          int v295 = *(_DWORD *)(v7 + 20);
          unsigned int v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v294] << v295);
          int v18 = v295 + 8;
        }
      }
      if ((v24 & 0xF) != 0) {
        *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
      }
      unsigned int v315 = v24 >> 4;
      *(_DWORD *)(v7 + 16) = v315;
      *(_DWORD *)(v7 + 20) = v18 - 4;
      *(_DWORD *)(v7 + 24) = 1;
      uint64_t v6 = v331;
      if (v18 > 16) {
        goto LABEL_602;
      }
      int v316 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
      if (v316 == -1)
      {
        if (!*(_DWORD *)(v7 + 20)) {
          goto LABEL_543;
        }
        unsigned int v315 = *(_DWORD *)(v7 + 16);
      }
      else
      {
        int v317 = *(_DWORD *)(v7 + 20);
        unsigned int v315 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v316] << v317);
        *(_DWORD *)(v7 + 16) = v315;
        *(_DWORD *)(v7 + 20) = v317 + 8;
        if (v317 > 4)
        {
LABEL_602:
          if ((v315 & 0x1FFF) == 0x1001) {
            goto LABEL_543;
          }
          uint64_t result = 0;
          *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
          goto LABEL_544;
        }
        int v318 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
        unsigned int v315 = *(_DWORD *)(v7 + 16);
        if (v318 != -1)
        {
          int v319 = *(_DWORD *)(v7 + 20);
          v315 |= TIFFBitRevTable[v318] << v319;
          *(_DWORD *)(v7 + 16) = v315;
          int v320 = v319 + 8;
LABEL_601:
          *(_DWORD *)(v7 + 20) = v320;
          goto LABEL_602;
        }
      }
      int v320 = 13;
      goto LABEL_601;
    case 4:
    case 9:
    case 12:
    case 17:
    case 20:
    case 25:
    case 28:
    case 36:
    case 41:
    case 44:
    case 49:
    case 52:
    case 57:
    case 60:
    case 68:
    case 73:
    case 76:
    case 81:
    case 84:
    case 89:
    case 92:
    case 100:
    case 105:
    case 108:
    case 113:
    case 116:
    case 121:
    case 124:
    case 130:
    case 132:
    case 137:
    case 140:
    case 145:
    case 148:
    case 153:
    case 156:
    case 164:
    case 169:
    case 172:
    case 177:
    case 180:
    case 185:
    case 188:
    case 196:
    case 201:
    case 204:
    case 209:
    case 212:
    case 217:
    case 220:
    case 228:
    case 233:
    case 236:
    case 241:
    case 244:
    case 249:
    case 252:
    case 260:
    case 265:
    case 268:
    case 273:
    case 276:
    case 281:
    case 284:
    case 292:
    case 297:
    case 300:
    case 305:
    case 308:
    case 313:
    case 316:
    case 324:
    case 329:
    case 332:
    case 337:
    case 340:
    case 345:
    case 348:
    case 356:
    case 361:
    case 364:
    case 369:
    case 372:
    case 377:
    case 380:
    case 386:
    case 388:
    case 393:
    case 396:
    case 401:
    case 404:
    case 409:
    case 412:
    case 420:
    case 425:
    case 428:
    case 433:
    case 436:
    case 441:
    case 444:
    case 452:
    case 457:
    case 460:
    case 465:
    case 468:
    case 473:
    case 476:
    case 484:
    case 489:
    case 492:
    case 497:
    case 500:
    case 505:
    case 508:
    case 518:
      uint64_t v53 = *(unsigned int *)(v7 + 56);
      if (v8 != v332 && v10 <= v16)
      {
        float v54 = v11 + 1;
        do
        {
          if ((unint64_t)v54 >= *(void *)(v7 + 40) + 2 * v53) {
            break;
          }
          int v55 = *(v54 - 1);
          int v56 = *v54;
          v54 += 2;
          v10 += v55 + v56;
        }
        while (v10 <= v16);
        CFDataRef v11 = v54 - 1;
      }
      int v16 = v10;
      if ((unint64_t)v8 < *(void *)(v7 + 48) + 2 * v53) {
        *v8++ = m + v15 + v10;
      }
      uint64_t v27 = v8;
      if ((unint64_t)v11 >= *(void *)(v7 + 40) + 2 * v53) {
        goto LABEL_492;
      }
      int m = 0;
      int v57 = *v11++;
      v10 += v57;
      goto LABEL_79;
    case 5:
    case 10:
    case 13:
    case 21:
    case 26:
    case 29:
    case 32:
    case 37:
    case 42:
    case 45:
    case 53:
    case 58:
    case 61:
    case 69:
    case 74:
    case 77:
    case 85:
    case 90:
    case 93:
    case 96:
    case 101:
    case 106:
    case 109:
    case 117:
    case 122:
    case 125:
    case 133:
    case 138:
    case 141:
    case 149:
    case 154:
    case 157:
    case 160:
    case 165:
    case 170:
    case 173:
    case 181:
    case 186:
    case 189:
    case 197:
    case 202:
    case 205:
    case 213:
    case 218:
    case 221:
    case 224:
    case 229:
    case 234:
    case 237:
    case 245:
    case 250:
    case 253:
    case 261:
    case 266:
    case 269:
    case 277:
    case 282:
    case 285:
    case 288:
    case 293:
    case 298:
    case 301:
    case 309:
    case 314:
    case 317:
    case 325:
    case 330:
    case 333:
    case 341:
    case 346:
    case 349:
    case 352:
    case 357:
    case 362:
    case 365:
    case 373:
    case 378:
    case 381:
    case 389:
    case 394:
    case 397:
    case 405:
    case 410:
    case 413:
    case 416:
    case 421:
    case 426:
    case 429:
    case 437:
    case 442:
    case 445:
    case 453:
    case 458:
    case 461:
    case 469:
    case 474:
    case 477:
    case 480:
    case 485:
    case 490:
    case 493:
    case 501:
    case 506:
    case 509:
      uint64_t v25 = *(void *)(v7 + 40);
      uint64_t v26 = *(unsigned int *)(v7 + 56);
      uint64_t v27 = v8;
      if (v8 != v332 && v10 <= v16)
      {
        uint64_t v28 = v11 + 1;
        do
        {
          if ((unint64_t)v28 >= v25 + 2 * v26) {
            break;
          }
          int v29 = *(v28 - 1);
          int v30 = *v28;
          v28 += 2;
          v10 += v29 + v30;
        }
        while (v10 <= v16);
        CFDataRef v11 = v28 - 1;
      }
      unint64_t v31 = v25 + 2 * v26;
      if ((unint64_t)v11 >= v31) {
        goto LABEL_520;
      }
      int v32 = v10 + *v11;
      m += v32 - v16;
      if ((unint64_t)(v11 + 1) >= v31)
      {
        int v16 = v10 + *v11;
LABEL_520:
        CFAllocatorRef v8 = v332;
        if (m) {
          goto LABEL_225;
        }
        goto LABEL_521;
      }
      int v33 = v11[1];
      v11 += 2;
      int v10 = v32 + v33;
      int v16 = v32;
      goto LABEL_79;
    case 8:
    case 40:
    case 64:
    case 72:
    case 104:
    case 128:
    case 136:
    case 168:
    case 200:
    case 232:
    case 264:
    case 296:
    case 320:
    case 328:
    case 360:
    case 392:
    case 424:
    case 456:
    case 488:
    case 521:
    case 526:
    case 533:
      uint64_t v27 = v8;
      CFAllocatorRef v8 = v332;
      if (v27 != v332 && v10 <= v16)
      {
        uint64_t v64 = v11 + 1;
        do
        {
          if ((unint64_t)v64 >= *(void *)(v7 + 40) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
            break;
          }
          int v65 = *(v64 - 1);
          int v66 = *v64;
          v64 += 2;
          v10 += v65 + v66;
        }
        while (v10 <= v16);
        CFDataRef v11 = v64 - 1;
      }
      int v67 = v16 + *((unsigned __int16 *)&pdf_TIFFFaxMainTable + 2 * v22 + 1);
      BOOL v68 = __OFSUB__(v10, v67);
      int v69 = v10 - v67;
      if (v69 < 0 != v68) {
        goto LABEL_224;
      }
      if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
        *v27++ = v69 + m;
      }
      CFAllocatorRef v8 = v27;
      int m = 0;
      v16 += v69;
      int v70 = *--v11;
      v10 -= v70;
      goto LABEL_79;
    case 16:
    case 48:
    case 66:
    case 80:
    case 112:
    case 144:
    case 176:
    case 194:
    case 208:
    case 240:
    case 272:
    case 304:
    case 322:
    case 336:
    case 368:
    case 400:
    case 432:
    case 450:
    case 464:
    case 496:
      uint64_t v27 = v8;
      CFAllocatorRef v8 = v332;
      if (((v27 - v332) & 2) != 0)
      {
        while (1)
        {
          if (v18 > 12) {
            goto LABEL_47;
          }
          int v44 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          if (v44 == -1)
          {
            if (!*(_DWORD *)(v7 + 20)) {
              goto LABEL_553;
            }
            unsigned int v24 = *(_DWORD *)(v7 + 16);
          }
          else
          {
            int v45 = *(_DWORD *)(v7 + 20);
            unsigned int v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v44] << v45);
            int v18 = v45 + 8;
            *(_DWORD *)(v7 + 16) = v24;
            *(_DWORD *)(v7 + 20) = v45 + 8;
            if (v45 > 4) {
              goto LABEL_47;
            }
            int v46 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
            unsigned int v24 = *(_DWORD *)(v7 + 16);
            if (v46 != -1)
            {
              int v47 = *(_DWORD *)(v7 + 20);
              v24 |= TIFFBitRevTable[v46] << v47;
              int v18 = v47 + 8;
              goto LABEL_47;
            }
          }
          int v18 = 13;
LABEL_47:
          uint64_t v48 = v24 & 0x1FFF;
          size_t v49 = &pdf_TIFFFaxBlackTable[2 * v48];
          int v50 = *((unsigned __int8 *)v49 + 1);
          v18 -= v50;
          v24 >>= v50;
          *(_DWORD *)(v7 + 16) = v24;
          *(_DWORD *)(v7 + 20) = v18;
          int v51 = *(unsigned __int8 *)v49;
          if ((v51 - 10) >= 2)
          {
            if (v51 != 8) {
              goto LABEL_223;
            }
            int v80 = pdf_TIFFFaxBlackTable[2 * v48 + 1];
            if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
              *v27++ = v80 + m;
            }
            for (int m = 0; ; m += v80)
            {
              v16 += v80;
              if (v18 > 11) {
                goto LABEL_107;
              }
              int v81 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
              if (v81 == -1)
              {
                if (!*(_DWORD *)(v7 + 20)) {
                  goto LABEL_553;
                }
                unsigned int v24 = *(_DWORD *)(v7 + 16);
              }
              else
              {
                int v82 = *(_DWORD *)(v7 + 20);
                unsigned int v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v81] << v82);
                int v18 = v82 + 8;
                *(_DWORD *)(v7 + 16) = v24;
                *(_DWORD *)(v7 + 20) = v82 + 8;
                if (v82 > 3) {
                  goto LABEL_107;
                }
                int v83 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                unsigned int v24 = *(_DWORD *)(v7 + 16);
                if (v83 != -1)
                {
                  int v84 = *(_DWORD *)(v7 + 20);
                  v24 |= TIFFBitRevTable[v83] << v84;
                  int v18 = v84 + 8;
                  goto LABEL_107;
                }
              }
              int v18 = 12;
LABEL_107:
              uint64_t v85 = v24 & 0xFFF;
              uint64_t v86 = (unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v85;
              int v87 = v86[1];
              v18 -= v87;
              v24 >>= v87;
              *(_DWORD *)(v7 + 16) = v24;
              *(_DWORD *)(v7 + 20) = v18;
              int v88 = *v86;
              if (v88 != 9 && v88 != 11)
              {
                if (v88 != 7) {
                  goto LABEL_223;
                }
                uint64_t v90 = (char *)&pdf_TIFFFaxWhiteTable + 4 * v85;
LABEL_117:
                int v91 = *((unsigned __int16 *)v90 + 1);
                uint64_t v92 = *(unsigned int *)(v7 + 56);
                if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * v92) {
                  *v27++ = v91 + m;
                }
                v16 += v91;
                if (v27 == v332)
                {
LABEL_125:
                  int m = 0;
                }
                else
                {
                  if (v10 > v16 || v10 >= v13)
                  {
                    CFAllocatorRef v8 = v27;
                    goto LABEL_125;
                  }
                  unint64_t v94 = *(void *)(v7 + 40) + 2 * v92;
                  uint64_t v95 = v11 + 1;
                  do
                  {
                    if ((unint64_t)v95 >= v94) {
                      break;
                    }
                    int v96 = *(v95 - 1);
                    int v97 = *v95;
                    v95 += 2;
                    v10 += v96 + v97;
                  }
                  while (v10 <= v16 && v10 < v13);
                  CFAllocatorRef v8 = v27;
                  int m = 0;
                  CFDataRef v11 = v95 - 1;
                }
LABEL_79:
                int v15 = -v16;
                if (v16 >= v13)
                {
                  if (!m)
                  {
                    uint64_t v27 = v8;
LABEL_492:
                    CFAllocatorRef v8 = v332;
                    goto LABEL_521;
                  }
                  uint64_t v27 = v8;
                  CFAllocatorRef v8 = v332;
                  if (v18 > 0) {
                    goto LABEL_586;
                  }
                  int v153 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
                  if (v153 != -1)
                  {
                    int v154 = *(_DWORD *)(v7 + 20);
                    unsigned int v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v153] << v154);
                    *(_DWORD *)(v7 + 16) = v24;
                    int v18 = v154 + 8;
                    goto LABEL_585;
                  }
                  if (*(_DWORD *)(v7 + 20))
                  {
                    unsigned int v24 = *(_DWORD *)(v7 + 16);
                    int v18 = 1;
LABEL_585:
                    *(_DWORD *)(v7 + 20) = v18;
LABEL_586:
                    if (v24)
                    {
                      *(_DWORD *)(v7 + 16) = v24 >> 1;
                      *(_DWORD *)(v7 + 20) = v18 - 1;
                    }
                    else
                    {
                      *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
                    }
                    goto LABEL_225;
                  }
LABEL_554:
                  if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
                    *v27++ = m;
                  }
LABEL_556:
                  if (v16 == v13)
                  {
LABEL_557:
                    uint64_t result = 0;
LABEL_558:
                    uint64_t v6 = v331;
                    goto LABEL_544;
                  }
                  BOOL v287 = v16 > v13;
                  uint64_t v6 = v331;
                  if (v16 > v13 && v27 > v8)
                  {
                    unint64_t v307 = v27 - 1;
                    unint64_t v308 = v27 - 1;
                    do
                    {
                      int v309 = *v308--;
                      v16 -= v309;
                      BOOL v287 = v16 > v13;
                      BOOL v310 = v16 > v13 && v307 > v8;
                      unint64_t v307 = v308;
                    }
                    while (v310);
                    uint64_t v27 = v308 + 1;
                  }
                  if (v16 < v13)
                  {
                    unint64_t v311 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                    if (((v27 - v8) & 2) != 0 && (unint64_t)v27 < v311) {
                      *v27++ = 0;
                    }
                    if ((unint64_t)v27 >= v311) {
                      goto LABEL_543;
                    }
                    uint64_t result = 0;
                    int v293 = v16 & ~(v16 >> 31);
LABEL_573:
                    *uint64_t v27 = v13 - v293;
                    goto LABEL_544;
                  }
                  goto LABEL_640;
                }
                goto LABEL_9;
              }
              int v80 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v85 + 1);
            }
          }
          int v52 = pdf_TIFFFaxBlackTable[2 * v48 + 1];
          m += v52;
          v16 += v52;
        }
      }
      while (1)
      {
        if (v18 > 11) {
          goto LABEL_33;
        }
        int v34 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
        if (v34 == -1)
        {
          if (!*(_DWORD *)(v7 + 20)) {
            goto LABEL_553;
          }
          unsigned int v24 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          int v35 = *(_DWORD *)(v7 + 20);
          unsigned int v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v34] << v35);
          int v18 = v35 + 8;
          *(_DWORD *)(v7 + 16) = v24;
          *(_DWORD *)(v7 + 20) = v35 + 8;
          if (v35 > 3) {
            goto LABEL_33;
          }
          int v36 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          unsigned int v24 = *(_DWORD *)(v7 + 16);
          if (v36 != -1)
          {
            int v37 = *(_DWORD *)(v7 + 20);
            v24 |= TIFFBitRevTable[v36] << v37;
            int v18 = v37 + 8;
            goto LABEL_33;
          }
        }
        int v18 = 12;
LABEL_33:
        uint64_t v38 = v24 & 0xFFF;
        double v39 = (unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v38;
        int v40 = v39[1];
        v18 -= v40;
        v24 >>= v40;
        *(_DWORD *)(v7 + 16) = v24;
        *(_DWORD *)(v7 + 20) = v18;
        int v41 = *v39;
        if (v41 != 9 && v41 != 11) {
          break;
        }
        int v43 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v38 + 1);
        m += v43;
        v16 += v43;
      }
      if (v41 != 7) {
        goto LABEL_223;
      }
      int v71 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v38 + 1);
      if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
        *v27++ = v71 + m;
      }
      int m = 0;
      while (2)
      {
        v16 += v71;
        if (v18 > 12) {
          goto LABEL_93;
        }
        int v72 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
        if (v72 == -1)
        {
          if (!*(_DWORD *)(v7 + 20)) {
            goto LABEL_553;
          }
          unsigned int v24 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          int v73 = *(_DWORD *)(v7 + 20);
          unsigned int v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v72] << v73);
          int v18 = v73 + 8;
          *(_DWORD *)(v7 + 16) = v24;
          *(_DWORD *)(v7 + 20) = v73 + 8;
          if (v73 > 4) {
            goto LABEL_93;
          }
          int v74 = (*(uint64_t (**)(void))(v7 + 64))(*(void *)(v7 + 72));
          unsigned int v24 = *(_DWORD *)(v7 + 16);
          if (v74 != -1)
          {
            int v75 = *(_DWORD *)(v7 + 20);
            v24 |= TIFFBitRevTable[v74] << v75;
            int v18 = v75 + 8;
            goto LABEL_93;
          }
        }
        int v18 = 13;
LABEL_93:
        uint64_t v76 = v24 & 0x1FFF;
        uint64_t v77 = &pdf_TIFFFaxBlackTable[2 * v76];
        int v78 = *((unsigned __int8 *)v77 + 1);
        v18 -= v78;
        v24 >>= v78;
        *(_DWORD *)(v7 + 16) = v24;
        *(_DWORD *)(v7 + 20) = v18;
        int v79 = *(unsigned __int8 *)v77;
        if ((v79 - 10) < 2)
        {
          int v71 = pdf_TIFFFaxBlackTable[2 * v76 + 1];
          m += v71;
          continue;
        }
        break;
      }
      if (v79 == 8)
      {
        uint64_t v90 = (char *)&pdf_TIFFFaxBlackTable[2 * v76];
        goto LABEL_117;
      }
LABEL_223:
      *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
LABEL_224:
      if (m)
      {
LABEL_225:
        if ((unint64_t)v27 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
          *v27++ = m;
        }
      }
LABEL_521:
      if (v16 == v13)
      {
        uint64_t v6 = v331;
      }
      else
      {
        BOOL v296 = v16 > v13;
        uint64_t v6 = v331;
        if (v16 > v13 && v27 > v8)
        {
          uint64_t v297 = v27 - 1;
          unint64_t v298 = v27 - 1;
          do
          {
            int v299 = *v298--;
            v16 -= v299;
            BOOL v296 = v16 > v13;
            BOOL v300 = v16 > v13 && v297 > v8;
            uint64_t v297 = v298;
          }
          while (v300);
          uint64_t v27 = v298 + 1;
        }
        if (v16 >= v13)
        {
          if (v296)
          {
            unint64_t v302 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
            if ((unint64_t)v27 < v302) {
              *v27++ = v13;
            }
            if ((unint64_t)v27 < v302) {
              *v27++ = 0;
            }
          }
        }
        else
        {
          unint64_t v301 = *(void *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
          if (((v27 - v8) & 2) != 0 && (unint64_t)v27 < v301) {
            *v27++ = 0;
          }
          if ((unint64_t)v27 < v301) {
            *v27++ = v13 - (v16 & ~(unsigned __int16)(v16 >> 31));
          }
        }
      }
      if (*(int *)(v7 + 24) > 0)
      {
LABEL_543:
        uint64_t result = 0;
        goto LABEL_544;
      }
LABEL_546:
      fill_runs(v329, v8, v27, v13, *(_DWORD *)(v7 + 4) & 0x10);
      uint64_t v303 = *(void *)(v7 + 48);
      if ((unint64_t)v27 < v303 + 2 * (unint64_t)*(unsigned int *)(v7 + 56)) {
        *uint64_t v27 = 0;
      }
      uint64_t v304 = *(void *)(v7 + 40);
      *(void *)(v7 + 40) = v303;
      *(void *)(v7 + 4++*(_DWORD *)(result + 8) = v304;
LABEL_549:
      uint64_t result = v330;
      ++*(_DWORD *)(v7 + 60);
      int v305 = *(_DWORD *)(v6 + 16);
      BOOL v68 = __OFSUB__(v305, 1);
      int v306 = v305 - 1;
      if (v306 < 0 == v68)
      {
        *(_DWORD *)(v6 + 16) = v306;
        if (!v306) {
LABEL_544:
        }
          *(unsigned char *)(v6 + ++*(_DWORD *)(result + 8) = 1;
      }
      return result;
    case 24:
    case 33:
    case 56:
    case 88:
    case 97:
    case 120:
    case 152:
    case 161:
    case 184:
    case 192:
    case 216:
    case 225:
    case 248:
    case 280:
    case 289:
    case 312:
    case 344:
    case 353:
    case 376:
    case 384:
    case 408:
    case 417:
    case 440:
    case 448:
    case 472:
    case 481:
    case 504:
    case 517:
    case 525:
      uint64_t v58 = *(unsigned int *)(v7 + 56);
      if (v8 != v332 && v10 <= v16)
      {
        float v59 = v11 + 1;
        do
        {
          if ((unint64_t)v59 >= *(void *)(v7 + 40) + 2 * v58) {
            break;
          }
          int v60 = *(v59 - 1);
          int v61 = *v59;
          v59 += 2;
          v10 += v60 + v61;
        }
        while (v10 <= v16);
        CFDataRef v11 = v59 - 1;
      }
      int v62 = *((unsigned __int16 *)&pdf_TIFFFaxMainTable + 2 * v22 + 1);
      if ((unint64_t)v8 < *(void *)(v7 + 48) + 2 * v58) {
        *v8++ = v62 + m + v15 + v10;
      }
      uint64_t v27 = v8;
      int v16 = v10 + v62;
      if ((unint64_t)v11 >= *(void *)(v7 + 40) + 2 * v58) {
        goto LABEL_492;
      }
      int m = 0;
      int v63 = *v11++;
      v10 += v63;
      goto LABEL_79;
    case 65:
    case 193:
    case 256:
    case 321:
    case 449:
    case 529:
    case 537:
      uint64_t v27 = v8;
      if ((unint64_t)v8 < *(void *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
      {
        _WORD *v8 = v13 - v16;
        uint64_t v27 = v8 + 1;
      }
      goto LABEL_520;
    default:
      *(_DWORD *)(v7 + 2++*(_DWORD *)(result + 8) = 1;
      uint64_t v27 = v8;
      goto LABEL_520;
  }
}

CFTypeID CGLayerGetTypeID(void)
{
  if (_block_invoke_once_2249 != -1) {
    dispatch_once(&_block_invoke_once_2249, &__block_literal_global_5_2250);
  }
  return CGLayerGetTypeID_layer_type_id;
}

CGLayerRef CGLayerRetain(CGLayerRef layer)
{
  if (layer) {
    CFRetain(layer);
  }
  return layer;
}

void CGLayerRelease(CGLayerRef layer)
{
  if (layer) {
    CFRelease(layer);
  }
}

CGSize CGLayerGetSize(CGLayerRef layer)
{
  int v1 = (const CGSize *)((char *)layer + 24);
  p_double height = (CGFloat *)((char *)layer + 32);
  if (!layer)
  {
    int v1 = &CGSizeZero;
    p_double height = &CGSizeZero.height;
  }
  double v3 = *p_height;
  double width = v1->width;
  result.double height = v3;
  result.double width = width;
  return result;
}

void CGContextDrawLayerInRect(CGContextRef context, CGRect rect, CGLayerRef layer)
{
  if (!context)
  {
    CGContextRef v12 = 0;
LABEL_9:
    handle_invalid_context((char)"CGContextDrawLayerInRect", (uint64_t)v12, v3, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)context + 4) != 1129601108)
  {
    CGContextRef v12 = context;
    goto LABEL_9;
  }
  if (layer)
  {
    uint64_t v9 = *((void *)layer + 2);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 40);
      if (v10)
      {
        CFDataRef v11 = *(void (**)(__n128, __n128, __n128, __n128))(v10 + 216);
        if (v11) {
          v11((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
        }
      }
    }
  }
}

void xt_font_cfarray_release(uint64_t a1, uint64_t a2)
{
}

atomic_ullong *xt_font_cfarray_retain(uint64_t a1, atomic_ullong *a2)
{
  CGSize result = a2;
  if (a2) {
    atomic_fetch_add_explicit(a2, 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL rip_auto_context_serialize_display_list(uint64_t a1, char *a2)
{
  return a2 && a1 && (uint64_t v2 = *(void *)(a1 + 288)) != 0 && CGDisplayListDumpToFile(*(void *)(v2 + 72), a2);
}

void rip_auto_context_release_bitmap_context_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

const char *rip_auto_context_get_name()
{
  return "CGAutomaticBitmapContext";
}

uint64_t rip_auto_context_draw_layer(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    uint64_t v13 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(a1 + 288);
  uint64_t v13 = v12 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v12 + 112));
  if (!v12)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a7);
    goto LABEL_7;
  }
  uint64_t v14 = *(void *)(v12 + 88);
  if (!v14)
  {
    uint64_t v14 = *(void *)(v12 + 80);
    rip_auto_context_update_content_info_from_GState(v12, a7);
    if (v14) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v22 = 0;
    goto LABEL_15;
  }
  rip_auto_context_update_content_info_from_GState(v12, a7);
LABEL_9:
  uint64_t v23 = *(void *)(v14 + 40);
  if (v23)
  {
    unsigned int v24 = *(uint64_t (**)(double, double, double, double))(v23 + 216);
    if (v24) {
      uint64_t v22 = v24(a2, a3, a4, a5);
    }
    else {
      uint64_t v22 = 1006;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(unsigned char *)(v12 + 105) |= rip_auto_context_contains_transparency(v12, v15, v16, v17, v18, v19, v20, v21);
LABEL_15:
  pthread_mutex_unlock((pthread_mutex_t *)v13);
  return v22;
}

uint64_t rip_auto_context_get_layer(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a1;
  if (!a1)
  {
    uint64_t v14 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(a1 + 288);
  uint64_t v14 = v13 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v13 + 112));
  if (!v13)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a7);
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(v13 + 88);
  if (v15)
  {
    rip_auto_context_update_content_info_from_GState(v13, a7);
  }
  else
  {
    uint64_t v15 = *(void *)(v13 + 80);
    rip_auto_context_update_content_info_from_GState(v13, a7);
    if (!v15) {
      goto LABEL_13;
    }
  }
  uint64_t v23 = *(void *)(v15 + 40);
  if (v23 && (unsigned int v24 = *(uint64_t (**)(double, double, double, double))(v23 + 208)) != 0) {
    uint64_t v8 = v24(a2, a3, a4, a5);
  }
  else {
    uint64_t v8 = 0;
  }
  *(unsigned char *)(v13 + 105) |= rip_auto_context_contains_transparency(v13, v16, v17, v18, v19, v20, v21, v22);
LABEL_13:
  pthread_mutex_unlock((pthread_mutex_t *)v14);
  return v8;
}

void rip_auto_context_draw_display_list(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 288);
    uint64_t v5 = v4 + 112;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 112;
  }
  pthread_mutex_lock((pthread_mutex_t *)v5);
  rip_auto_context_update_content_info_from_GState(v4, a3);
  _CGHandleAssert("rip_auto_context_draw_display_list", 774, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/AutomaticBitmapContext/RIPAutomaticContext.c", "0", "function automatically fails", v6, v7, v8, v9);
}

uint64_t rip_auto_context_draw_images(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CGImage **a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    uint64_t v10 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 288);
  uint64_t v10 = v9 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 112));
  if (!v9)
  {
LABEL_6:
    uint64_t v18 = 0;
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)(v9 + 88);
  if (!v18) {
    uint64_t v18 = *(void *)(v9 + 80);
  }
LABEL_7:
  if (a7)
  {
    uint64_t v19 = a5;
    uint64_t v20 = a7;
    do
    {
      uint64_t v21 = *v19++;
      rip_auto_context_update_content_info_from_image(v9, v21);
      --v20;
    }
    while (v20);
  }
  if (v18)
  {
    uint64_t v22 = *(void *)(v18 + 40);
    if (v22)
    {
      uint64_t v23 = *(uint64_t (**)(void))(v22 + 136);
      if (v23) {
        uint64_t v24 = v23();
      }
      else {
        uint64_t v24 = 1006;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    *(unsigned char *)(v9 + 105) |= rip_auto_context_contains_transparency(v9, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    uint64_t v24 = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)v10);
  return v24;
}

uint64_t rip_auto_context_draw_lines(uint64_t a1, uint64_t a2, uint64_t a3, const CGPoint *a4, unint64_t a5)
{
  if (!a1)
  {
    uint64_t v10 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 288);
  uint64_t v10 = v9 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 112));
  if (!v9)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a3);
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(v9 + 88);
  if (v11)
  {
    rip_auto_context_update_content_info_from_GState(v9, a3);
  }
  else
  {
    uint64_t v11 = *(void *)(v9 + 80);
    rip_auto_context_update_content_info_from_GState(v9, a3);
    if (!v11) {
      goto LABEL_9;
    }
  }
  CGContextDelegateDrawLines(*(void *)(v11 + 40), a2, a3, a4, a5);
  *(unsigned char *)(v9 + 105) |= rip_auto_context_contains_transparency(v9, v12, v13, v14, v15, v16, v17, v18);
LABEL_9:

  return pthread_mutex_unlock((pthread_mutex_t *)v10);
}

double rip_auto_context_get_bounds(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_9;
  }
  uint64_t v1 = *(void *)(a1 + 288);
  uint64_t v2 = v1 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 112));
  if (!v1) {
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(v1 + 88);
  if (!v3)
  {
    uint64_t v3 = *(void *)(v1 + 80);
    if (!v3) {
      goto LABEL_9;
    }
  }
  uint64_t v4 = *(void *)(v3 + 40);
  if (!v4)
  {
    unint64_t v7 = 0x7FF0000000000000;
    goto LABEL_10;
  }
  uint64_t v5 = *(double (**)(void))(v4 + 48);
  if (!v5)
  {
LABEL_9:
    unint64_t v7 = 0xFFDFFFFFFFFFFFFFLL;
LABEL_10:
    double v6 = *(double *)&v7;
    goto LABEL_11;
  }
  double v6 = v5();
LABEL_11:
  pthread_mutex_unlock((pthread_mutex_t *)v2);
  return v6;
}

uint64_t rip_auto_context_get_transform@<X0>(uint64_t a1@<X0>, CGAffineTransform *a2@<X8>)
{
  if (a1) {
    uint64_t v3 = *(void *)(a1 + 288);
  }
  else {
    uint64_t v3 = 0;
  }
  *a2 = CGAffineTransformIdentity;
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 112));
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 88);
    if (v4 || (uint64_t v4 = *(void *)(v3 + 80)) != 0)
    {
      uint64_t v5 = *(void *)(v4 + 40);
      if (v5 && (double v6 = *(void (**)(void))(v5 + 40)) != 0) {
        v6();
      }
      else {
        *a2 = CGAffineTransformIdentity;
      }
    }
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 112));
}

uint64_t SimpleFont::emit_definitions(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 64);
  uint64_t v2 = *(uint64_t **)(this + 72);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  return this;
}

void SimpleFont::emit_references(SimpleFont *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t *)*((void *)this + 8);
  for (int i = (uint64_t *)*((void *)this + 9); v8 != i; ++v8)
  {
    uint64_t v10 = *v8;
    if (*(void *)(*v8 + 104))
    {
      uint64_t v11 = (void *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      PDFDocumentPrintNameReferencePair(**(void **)(*(void *)(v10 + 8) + 8), (uint64_t)"/%N %R", (uint64_t)v11, *(void *)(v10 + 48), a5, a6, a7, a8);
    }
  }
}

void SimpleFont::add_glyphs_to_layout(SimpleFont *this, void *a2, unsigned __int16 **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v9 = a3;
    uint64_t v10 = this;
    do
    {
      uint64_t v11 = v8;
      uint64_t v12 = v8 + 1;
      subset_for_glyph = SimpleFont::get_subset_for_glyph(v10, *v8, (uint64_t)a3, a4, a5, a6, a7, a8);
      do
      {
        uint64_t v8 = v12;
        if (v12 == v9[1]) {
          break;
        }
        ++v12;
      }
      while (SimpleFont::get_subset_for_glyph(v10, *v8, (uint64_t)a3, a4, a5, a6, a7, a8) == subset_for_glyph);
      if (subset_for_glyph)
      {
        if (v11 == v8) {
          goto LABEL_37;
        }
        unint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v31 = subset_for_glyph;
        uint64_t v17 = (uint64_t **)(subset_for_glyph + 11);
        do
        {
          __int16 v18 = *((_WORD *)std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v17, *v11, v11)+ 14);
          if (v16 >= v15)
          {
            uint64_t v19 = (uint64_t)&v16[-v14 + 1];
            if (v19 < 0) {
              std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
            }
            if (2 * (uint64_t)&v15[-v14] > (unint64_t)v19) {
              uint64_t v19 = 2 * (void)&v15[-v14];
            }
            if ((unint64_t)&v15[-v14] >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v20 = v19;
            }
            if (v20) {
              uint64_t v21 = (char *)operator new(v20);
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v22 = &v16[(void)v21 - v14];
            *uint64_t v22 = v18;
            uint64_t v23 = v22 + 1;
            if (v16 != (char *)v14)
            {
              uint64_t v24 = &v16[~v14];
              do
              {
                char v25 = *--v16;
                (v24--)[(void)v21] = v25;
              }
              while (v16 != (char *)v14);
              uint64_t v22 = v21;
            }
            uint64_t v15 = &v21[v20];
            if (v14) {
              operator delete((void *)v14);
            }
            unint64_t v14 = (unint64_t)v22;
            uint64_t v16 = v23;
          }
          else
          {
            *v16++ = v18;
          }
        }
        while (v11++ != v8 - 1);
        if (v16 == (char *)v14)
        {
LABEL_37:
          __break(1u);
          return;
        }
        uint64_t v27 = (char *)(v31 + 2);
        uint64_t v10 = this;
        uint64_t v9 = a3;
        if (*((char *)v31 + 39) < 0) {
          uint64_t v27 = *(char **)v27;
        }
        layout_append_data(a2, v27, 1, (const void *)v14, (uint64_t)&v16[-v14]);
        if (v14) {
          operator delete((void *)v14);
        }
      }
    }
    while (v8 != v9[1]);
  }
}

void sub_184D7C198(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *SimpleFont::get_subset_for_glyph(SimpleFont *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 0xFFFF) {
    return 0;
  }
  uint64_t v11 = (uint64_t **)((char *)this + 96);
  uint64_t v10 = (char **)*((void *)this + 12);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v12 = (uint64_t **)((char *)this + 96);
  do
  {
    unsigned int v13 = *((unsigned __int16 *)v10 + 16);
    BOOL v14 = v13 >= a2;
    if (v13 >= a2) {
      uint64_t v15 = v10;
    }
    else {
      uint64_t v15 = v10 + 1;
    }
    if (v14) {
      uint64_t v12 = (uint64_t **)v10;
    }
    uint64_t v10 = (char **)*v15;
  }
  while (*v15);
  if (v12 == v11 || *((unsigned __int16 *)v12 + 16) > a2)
  {
LABEL_13:
    uint64_t v16 = (FontSubset **)*((void *)this + 8);
    uint64_t v17 = (FontSubset **)*((void *)this + 9);
    if (v16 == v17)
    {
      uint64_t v18 = (*(uint64_t (**)(SimpleFont *, uint64_t))(*(void *)this + 48))(this, 1);
      uint64_t v19 = v18;
      uint64_t v21 = (uint64_t *)*((void *)this + 9);
      unint64_t v20 = *((void *)this + 10);
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = *((void *)this + 8);
        uint64_t v24 = ((uint64_t)v21 - v23) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_72;
        }
        uint64_t v25 = v20 - v23;
        uint64_t v26 = v25 >> 2;
        if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
          uint64_t v26 = v24 + 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        int v29 = (uint64_t *)(v27 + 8 * v24);
        unint64_t v30 = v27 + 8 * v28;
        *int v29 = v19;
        uint64_t v17 = (FontSubset **)(v29 + 1);
        int v32 = (char *)*((void *)this + 8);
        unint64_t v31 = (char *)*((void *)this + 9);
        if (v31 != v32)
        {
          do
          {
            uint64_t v33 = *((void *)v31 - 1);
            v31 -= 8;
            *--int v29 = v33;
          }
          while (v31 != v32);
          unint64_t v31 = (char *)*((void *)this + 8);
        }
        *((void *)this + ++*(_DWORD *)(result + 8) = v29;
        *((void *)this + 9) = v17;
        *((void *)this + 10) = v30;
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *uint64_t v21 = v18;
        uint64_t v17 = (FontSubset **)(v21 + 1);
      }
      *((void *)this + 9) = v17;
      uint64_t v16 = (FontSubset **)*((void *)this + 8);
    }
    if (v16 == v17) {
      goto LABEL_70;
    }
    if (FontSubset::add_glyph(*v16, a2))
    {
      int v34 = (FontSubset **)*((void *)this + 8);
      if (v34 != *((FontSubset ***)this + 9))
      {
        int v35 = *v34;
        goto LABEL_59;
      }
      goto LABEL_70;
    }
    uint64_t v37 = *((void *)this + 8);
    uint64_t v36 = *((void *)this + 9);
    if ((unint64_t)(v36 - v37) >= 9)
    {
      if (v37 == v36) {
        goto LABEL_70;
      }
      if (FontSubset::add_glyph(*(FontSubset **)(v36 - 8), a2))
      {
        uint64_t v38 = *((void *)this + 9);
        if (*((void *)this + 8) != v38)
        {
          int v35 = *(FontSubset **)(v38 - 8);
          goto LABEL_59;
        }
LABEL_70:
        __break(1u);
LABEL_71:
        _CGHandleAssert("add_glyph", 65, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/Fonts/SimpleFont.cc", "subset->add_glyph(glyph)", "glyph addition failed", a6, a7, a8, v58);
      }
    }
    int v35 = (FontSubset *)(*(uint64_t (**)(SimpleFont *, void))(*(void *)this + 48))(this, 0);
    if ((FontSubset::add_glyph(v35, a2) & 1) == 0) {
      goto LABEL_71;
    }
    int v40 = (FontSubset **)*((void *)this + 9);
    unint64_t v39 = *((void *)this + 10);
    if ((unint64_t)v40 < v39)
    {
      *int v40 = v35;
      int v41 = v40 + 1;
LABEL_58:
      *((void *)this + 9) = v41;
LABEL_59:
      uint64_t v53 = *v11;
      uint64_t v12 = v11;
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v12 = (uint64_t **)v53;
            unsigned int v54 = *((unsigned __int16 *)v53 + 16);
            if (v54 <= a2) {
              break;
            }
            uint64_t v53 = *v12;
            uint64_t v11 = v12;
            if (!*v12) {
              goto LABEL_66;
            }
          }
          if (v54 >= a2) {
            break;
          }
          uint64_t v53 = v12[1];
          if (!v53)
          {
            uint64_t v11 = v12 + 1;
            goto LABEL_66;
          }
        }
      }
      else
      {
LABEL_66:
        int v55 = (uint64_t *)v12;
        uint64_t v12 = (uint64_t **)operator new(0x30uLL);
        *((_WORD *)v12 + 16) = a2;
        v12[5] = (uint64_t *)v35;
        unsigned __int16 *v12 = 0;
        v12[1] = 0;
        void v12[2] = v55;
        unsigned __int16 *v11 = (uint64_t *)v12;
        uint64_t v56 = **((void **)this + 11);
        int v57 = (uint64_t *)v12;
        if (v56)
        {
          *((void *)this + 11) = v56;
          int v57 = *v11;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v57);
        ++*((void *)this + 13);
      }
      return v12[5];
    }
    uint64_t v42 = *((void *)this + 8);
    uint64_t v43 = ((uint64_t)v40 - v42) >> 3;
    if (!((unint64_t)(v43 + 1) >> 61))
    {
      uint64_t v44 = v39 - v42;
      uint64_t v45 = v44 >> 2;
      if (v44 >> 2 <= (unint64_t)(v43 + 1)) {
        uint64_t v45 = v43 + 1;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v45;
      }
      if (v46) {
        unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v46);
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = (FontSubset **)(v46 + 8 * v43);
      unint64_t v49 = v46 + 8 * v47;
      *uint64_t v48 = v35;
      int v41 = v48 + 1;
      int v51 = (char *)*((void *)this + 8);
      int v50 = (char *)*((void *)this + 9);
      if (v50 != v51)
      {
        do
        {
          int v52 = (FontSubset *)*((void *)v50 - 1);
          v50 -= 8;
          *--uint64_t v48 = v52;
        }
        while (v50 != v51);
        int v50 = (char *)*((void *)this + 8);
      }
      *((void *)this + ++*(_DWORD *)(result + 8) = v48;
      *((void *)this + 9) = v41;
      *((void *)this + 10) = v49;
      if (v50) {
        operator delete(v50);
      }
      goto LABEL_58;
    }
LABEL_72:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
  }
  return v12[5];
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  double v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((unsigned __int16 *)v5 + 13);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        double v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        double v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v9 + 26) = *a3;
    std::__tree<unsigned long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t SimpleFont::SimpleFont(uint64_t a1, uint64_t a2, CFTypeRef cf, int a4)
{
  *(void *)a1 = &unk_1ED094478;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2;
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 16) = cf;
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)a1 = &unk_1ED093620;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = a1 + 96;
  return a1;
}

void SimpleFont::~SimpleFont(SimpleFont *this)
{
  *(void *)this = &unk_1ED093620;
  uint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = (void *)*((void *)this + 9);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  std::__tree<unsigned long>::destroy(*((void **)this + 12));
  uint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }

  PDFFont::~PDFFont(this);
}

void *PDFWriterCreate(const void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v2)
  {
    if (a1)
    {
      CFRetain(a1);
      *uint64_t v2 = a1;
      v2[1] = 0;
      v2[3] = 0;
      *((_WORD *)v2 + ++*(_DWORD *)(result + 8) = 0;
    }
    else
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

void PDFWriterPrintf(unsigned char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1) {
    PDFWriterVPrintf(a1, a2, (uint64_t)&a9, a4, a5, a6, a7, a8);
  }
}

void PDFWriterVPrintf(unsigned char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v368 = (double **)a3;
  if (a1)
  {
    unsigned int v8 = (char *)a2;
    uint64_t v10 = *a1;
    if ((unint64_t)a1[3] > 0x48 || *((unsigned char *)a1 + 16)) {
      emit_whitespace((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
    }
    char v367 = 0;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    CFAllocatorRef v365 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    CFAllocatorRef v366 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      while (1)
      {
        unsigned int v13 = *v8;
        if (v13 > 0x1F) {
          break;
        }
        if (v13 == 10)
        {
          *((unsigned char *)a1 + 17) = 0;
          emit_newline(a1, a2, a3, a4, a5, a6, a7, a8);
          ++v8;
        }
        else
        {
          if (!*v8) {
            return;
          }
LABEL_15:
          char v367 = *v8;
          a1[3] += CGDataConsumerPutBytes((uint64_t)v10, (uint64_t)&v367, 1);
          *((unsigned char *)a1 + 16) = 1;
          ++v8;
        }
      }
      if (v13 == 32)
      {
        emit_whitespace((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v8;
      }
      else
      {
        if (v13 != 37) {
          goto LABEL_15;
        }
        uint64_t v14 = v8[1];
        if (v14 == 42)
        {
          uint64_t v15 = v8[2];
          v8 += 3;
        }
        else
        {
          v8 += 2;
          uint64_t v15 = v14;
        }
        if ((int)v15 > 97)
        {
          if ((int)v15 > 113)
          {
            if (v15 == 114)
            {
              uint64_t v180 = v368++;
              int v181 = *v180;
              if (v181[1] == INFINITY || *v181 == INFINITY) {
                uint64_t v183 = &CGRectZero;
              }
              else {
                uint64_t v183 = (const CGRect *)v181;
              }
              uint64_t v184 = *a1;
              if (v14 == 42)
              {
                double x = v183->origin.x;
                double width = v183->size.width;
                double height = v183->size.height;
                if (width < 0.0 || height < 0.0)
                {
                  CGFloat y = v183->origin.y;
                  *(void *)&double x = (unint64_t)CGRectStandardize(*(CGRect *)&x);
                }
                v363 = PDFWriteNumber(v184, x, a2, a3, a4, a5, a6, a7, a8, (char)v335);
                uint64_t v195 = CGDataConsumerPrintf(*a1, " ", v189, v190, v191, v192, v193, v194, v346);
                int v203 = *a1;
                double v204 = v183->origin.y;
                double v205 = v183->size.width;
                double v206 = v183->size.height;
                v361 = v195;
                if (v205 < 0.0 || v206 < 0.0)
                {
                  CGFloat v207 = v183->origin.x;
                  *(CGRect *)(&v204 - 1) = CGRectStandardize(*(CGRect *)(&v204 - 1));
                }
                int v208 = PDFWriteNumber(v203, v204, v196, v197, v198, v199, v200, v201, v202, v347);
                int v222 = CGDataConsumerPrintf(*a1, " ", v209, v210, v211, v212, v213, v214, v348);
                int v223 = *a1;
                double v224 = v183->size.width;
                double v225 = v183->size.height;
                if (v224 < 0.0 || v225 < 0.0)
                {
                  CGFloat v226 = v183->origin.x;
                  CGFloat v227 = v183->origin.y;
                  *(CGRect *)(&v224 - 2) = CGRectStandardize(*(CGRect *)(&v224 - 2));
                }
                int v228 = PDFWriteNumber(v223, v224, v215, v216, v217, v218, v219, v220, v221, v349);
                int v242 = CGDataConsumerPrintf(*a1, " ", v229, v230, v231, v232, v233, v234, v350);
                int v243 = *a1;
                double v244 = v183->size.width;
                double v245 = v183->size.height;
                if (v244 < 0.0 || v245 < 0.0)
                {
                  CGFloat v246 = v183->origin.x;
                  CGFloat v247 = v183->origin.y;
                  *(CGRect *)(&v245 - 3) = CGRectStandardize(*(CGRect *)(&v244 - 2));
                }
                uint64_t i = (uint64_t)&v363[(void)v361
                                 + (unint64_t)&v222[(void)v208]
                                 + (unint64_t)&v242[(void)v228]
                                 + (unint64_t)PDFWriteNumber(v243, v245, v235, v236, v237, v238, v239, v240, v241, v351)];
              }
              else
              {
                unint64_t v249 = CGDataConsumerPrintf(*a1, "[", a3, a4, a5, a6, a7, a8, (char)v335);
                int v257 = *a1;
                double v258 = v183->origin.x;
                double v259 = v183->size.width;
                double v260 = v183->size.height;
                v364 = v249;
                if (v259 < 0.0 || v260 < 0.0)
                {
                  CGFloat v261 = v183->origin.y;
                  *(void *)&double v258 = (unint64_t)CGRectStandardize(*(CGRect *)&v258);
                }
                v362 = PDFWriteNumber(v257, v258, v250, v251, v252, v253, v254, v255, v256, v352);
                uint64_t v268 = CGDataConsumerPrintf(*a1, " ", v262, v263, v264, v265, v266, v267, v353);
                uint64_t v276 = *a1;
                double v277 = v183->origin.y;
                double v278 = v183->size.width;
                double v279 = v183->size.height;
                v360 = v268;
                if (v278 < 0.0 || v279 < 0.0)
                {
                  CGFloat v280 = v183->origin.x;
                  *(CGRect *)(&v277 - 1) = CGRectStandardize(*(CGRect *)(&v277 - 1));
                }
                uint64_t v281 = PDFWriteNumber(v276, v277, v269, v270, v271, v272, v273, v274, v275, v354);
                int v295 = CGDataConsumerPrintf(*a1, " ", v282, v283, v284, v285, v286, v287, v355);
                BOOL v296 = *a1;
                double v297 = v183->origin.x;
                double v298 = v183->size.width;
                double v299 = v183->size.height;
                if (v298 < 0.0 || v299 < 0.0)
                {
                  CGFloat v300 = v183->origin.y;
                  *(CGRect *)&double v297 = CGRectStandardize(*(CGRect *)&v297);
                }
                unint64_t v301 = (unint64_t)PDFWriteNumber(v296, v297 + v298, v288, v289, v290, v291, v292, v293, v294, v356);
                unsigned int v315 = CGDataConsumerPrintf(*a1, " ", v302, v303, v304, v305, v306, v307, v357);
                int v316 = *a1;
                double v317 = v183->origin.y;
                double v318 = v183->size.width;
                double v319 = v183->size.height;
                if (v318 < 0.0 || v319 < 0.0)
                {
                  CGFloat v320 = v183->origin.x;
                  *(CGRect *)(&v317 - 1) = CGRectStandardize(*(CGRect *)(&v317 - 1));
                }
                int v321 = PDFWriteNumber(v316, v317 + v319, v308, v309, v310, v311, v312, v313, v314, v358);
                uint64_t i = (uint64_t)&v362[(unint64_t)&v360[(void)v364]
                                 + (unint64_t)&v295[(void)v281]
                                 + (void)v315
                                 + v301
                                 + (unint64_t)&CGDataConsumerPrintf(*a1, "]", v322, v323, v324, v325, v326, v327, v359)[(void)v321]];
              }
              CFAllocatorRef v12 = v365;
              CFAllocatorRef v11 = v366;
            }
            else
            {
              if (v15 == 115)
              {
                unint64_t v248 = v368++;
                double v335 = *v248;
                int v29 = v10;
                uint64_t v28 = "%s";
LABEL_84:
                uint64_t v53 = (uint64_t)CGDataConsumerPrintf(v29, v28, a3, a4, a5, a6, a7, a8, (char)v335);
              }
              else if (v15 == 122)
              {
                unint64_t v30 = (double ***)v368++;
                unint64_t v31 = *v30;
LABEL_37:
                uint64_t v53 = (uint64_t)CGDataConsumerPrintf(v10, "%d", a3, a4, a5, a6, a7, a8, (char)v31);
              }
              else
              {
LABEL_86:
                char v367 = v15;
LABEL_88:
                uint64_t v53 = CGDataConsumerPutBytes((uint64_t)v10, (uint64_t)&v367, 1);
              }
LABEL_89:
              uint64_t i = v53;
            }
          }
          else
          {
            switch((int)v15)
            {
              case 'b':
                unint64_t v27 = v368++;
                if (*(_DWORD *)v27) {
                  uint64_t v28 = "true";
                }
                else {
                  uint64_t v28 = "false";
                }
                int v29 = v10;
                goto LABEL_84;
              case 'c':
                int v52 = (char *)v368++;
                uint64_t v53 = (uint64_t)CGDataConsumerPrintf(v10, "%c", a3, a4, a5, a6, a7, a8, *v52);
                goto LABEL_89;
              case 'd':
                unint64_t v31 = v368++;
                LODWORD(v31) = *(_DWORD *)v31;
                goto LABEL_37;
              case 'f':
                unsigned int v54 = (double *)v368++;
                uint64_t v53 = (uint64_t)PDFWriteNumber(v10, *v54, a2, a3, a4, a5, a6, a7, a8, (char)v335);
                goto LABEL_89;
              case 'm':
                int v55 = v368++;
                uint64_t v56 = *v55;
                int v57 = *a1;
                if (v14 != 42)
                {
                  CGDataConsumerPrintf(v57, "[", a3, a4, a5, a6, a7, a8, (char)v335);
                  int v57 = *a1;
                }
                char v58 = PDFWriteNumber(v57, *v56, a2, a3, a4, a5, a6, a7, a8, (char)v335);
                int v65 = &v58[(void)CGDataConsumerPrintf(*a1, " ", v59, v60, v61, v62, v63, v64, v336)];
                int v73 = PDFWriteNumber(*a1, v56[1], v66, v67, v68, v69, v70, v71, v72, v337);
                int v80 = &v65[(unint64_t)&CGDataConsumerPrintf(*a1, " ", v74, v75, v76, v77, v78, v79, v338)[(void)v73]];
                int v88 = PDFWriteNumber(*a1, v56[2], v81, v82, v83, v84, v85, v86, v87, v339);
                uint64_t v95 = &CGDataConsumerPrintf(*a1, " ", v89, v90, v91, v92, v93, v94, v340)[(void)v88];
                int v103 = &v80[(unint64_t)&PDFWriteNumber(*a1, v56[3], v96, v97, v98, v99, v100, v101, v102, v341)[(void)v95]];
                int v110 = CGDataConsumerPrintf(*a1, " ", v104, v105, v106, v107, v108, v109, v342);
                int v118 = &PDFWriteNumber(*a1, v56[4], v111, v112, v113, v114, v115, v116, v117, v343)[(void)v110];
                uint64_t v125 = &CGDataConsumerPrintf(*a1, " ", v119, v120, v121, v122, v123, v124, v344)[(void)v118];
                uint64_t i = (uint64_t)&v103[(unint64_t)&PDFWriteNumber(*a1, v56[5], v126, v127, v128, v129, v130, v131, v132, v345)[(void)v125]];
                CFAllocatorRef v11 = v366;
                if (v14 != 42)
                {
                  uint64_t v133 = (uint64_t)CGDataConsumerPrintf(*a1, "]", a3, a4, a5, a6, a7, a8, (char)v335);
LABEL_47:
                  i += v133;
                }
                break;
              default:
                goto LABEL_86;
            }
          }
        }
        else
        {
          switch((int)v15)
          {
            case 'A':
              uint64_t v16 = v368++;
              CFIndex v17 = (CFIndex)*v16;
              v368 = v16 + 2;
              CFStringRef v23 = (const __CFString *)CFDataCreateWithBytesNoCopy(v11, (const UInt8 *)v16[1], v17, v12);
              uint64_t v24 = (uint64_t)a1;
              CFDataRef v25 = (const __CFData *)v23;
              uint64_t v26 = 0;
              goto LABEL_60;
            case 'B':
            case 'C':
            case 'E':
            case 'F':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'P':
            case 'Q':
            case 'V':
            case 'W':
              goto LABEL_86;
            case 'D':
              unsigned int v134 = (uint64_t *)v368++;
              CFStringRef v23 = (const __CFString *)PDFCreateDateString(*v134);
              int v141 = print_ascii_string((uint64_t)a1, v23, v135, v136, v137, v138, v139, v140, (char)v335);
              goto LABEL_61;
            case 'G':
              int v142 = v368++;
              int v143 = *v142;
              v368 = v142 + 2;
              uint64_t v144 = v142[1];
              for (uint64_t i = CGDataConsumerPutBytes((uint64_t)v10, (uint64_t)"<", 1); v143; v143 = (double *)((char *)v143 - 1))
              {
                __int16 v151 = *(_WORD *)v144;
                uint64_t v144 = (double *)((char *)v144 + 2);
                i += (uint64_t)CGDataConsumerPrintf(v10, "%04x", v145, v146, v147, v148, v149, v150, v151);
              }
              uint64_t v133 = CGDataConsumerPutBytes((uint64_t)v10, (uint64_t)">", 1);
              goto LABEL_47;
            case 'N':
              int v152 = (unsigned __int8 **)v368++;
              uint64_t v53 = print_name(a1, *v152, a3, a4, a5, a6, a7, a8);
              goto LABEL_89;
            case 'O':
              int v153 = v368++;
              uint64_t v53 = (uint64_t)CGDataConsumerPrintf(v10, "%llu", a3, a4, a5, a6, a7, a8, (char)*v153);
              goto LABEL_89;
            case 'R':
              int v154 = v368++;
              uint64_t v53 = (uint64_t)CGDataConsumerPrintf(v10, "%lu 0 R", a3, a4, a5, a6, a7, a8, (char)*v154);
              goto LABEL_89;
            case 'S':
              BOOL v155 = (const __CFString **)v368++;
              uint64_t v53 = (uint64_t)print_ascii_string((uint64_t)a1, *v155, a3, a4, a5, a6, a7, a8, (char)v335);
              goto LABEL_89;
            case 'T':
              unint64_t v156 = (CFStringRef *)v368++;
              CFStringRef v157 = *v156;
              if (!*v156) {
                goto LABEL_117;
              }
              ExternalRepresentatiouint64_t n = CFStringCreateExternalRepresentation(v11, *v156, 0x600u, 0);
              if (ExternalRepresentation)
              {
                CFDataRef v164 = ExternalRepresentation;
LABEL_55:
                uint64_t i = (uint64_t)print_data((uint64_t)a1, v164, 0, v159, v160, v161, v162, v163, (char)v335);
                CFRelease(v164);
                break;
              }
              CFIndex Length = CFStringGetLength(v157);
              if (Length)
              {
                CFIndex v329 = Length;
                uint64_t v330 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
                if (v330)
                {
                  uint64_t v331 = v330;
                  v370.locatiouint64_t n = 0;
                  v370.CFIndex length = v329;
                  CFStringGetCharacters(v157, v370, v330);
                  CFMutableArrayRef Mutable = CFDataCreateMutable(v11, 0);
                  if (Mutable)
                  {
                    CFDataRef v164 = Mutable;
                    *(_WORD *)bytes = -2;
                    CFDataAppendBytes(Mutable, bytes, 2);
                    if (v329 >= 1)
                    {
                      vImage_Buffer v333 = v331;
                      do
                      {
                        unsigned int v334 = *v333++;
                        *(_WORD *)bytes = bswap32(v334) >> 16;
                        CFDataAppendBytes(v164, bytes, 2);
                        --v329;
                      }
                      while (v329);
                    }
                    free(v331);
                    goto LABEL_55;
                  }
                  free(v331);
                }
              }
LABEL_117:
              uint64_t i = (uint64_t)print_data((uint64_t)a1, 0, 0, a4, a5, a6, a7, a8, (char)v335);
              break;
            case 'U':
              int v165 = (CFURLRef *)v368++;
              CFURLRef v166 = CFURLCopyAbsoluteURL(*v165);
              if (!v166)
              {
                uint64_t v53 = (uint64_t)print_data((uint64_t)a1, 0, 0, v167, v168, v169, v170, v171, (char)v335);
                goto LABEL_89;
              }
              CFStringRef v23 = (const __CFString *)v166;
              CFDataRef v172 = CFURLCreateData(v11, v166, 0x8000100u, 0);
              uint64_t i = (uint64_t)print_data((uint64_t)a1, v172, 0, v173, v174, v175, v176, v177, (char)v335);
              if (v172) {
                CFRelease(v172);
              }
LABEL_62:
              CFRelease(v23);
              break;
            case 'X':
              int v178 = v368++;
              CFIndex v179 = (CFIndex)*v178;
              v368 = v178 + 2;
              CFStringRef v23 = (const __CFString *)CFDataCreateWithBytesNoCopy(v11, (const UInt8 *)v178[1], v179, v12);
              uint64_t v24 = (uint64_t)a1;
              CFDataRef v25 = (const __CFData *)v23;
              uint64_t v26 = 1;
LABEL_60:
              int v141 = print_data(v24, v25, v26, v18, v19, v20, v21, v22, (char)v335);
LABEL_61:
              uint64_t i = (uint64_t)v141;
              if (v23) {
                goto LABEL_62;
              }
              break;
            default:
              if (v15 == 37)
              {
                char v367 = 37;
                *((unsigned char *)a1 + 17) = 1;
                goto LABEL_88;
              }
              if (v15 != 47) {
                goto LABEL_86;
              }
              int v32 = (CFStringRef *)v368++;
              CFStringRef v33 = *v32;
              CFIndex v34 = CFStringGetLength(*v32);
              CFIndex v35 = CFStringGetMaximumSizeForEncoding(v34, 0x8000100u) + 1;
              uint64_t v36 = (char *)malloc_type_malloc(v35, 0xE59A9ED3uLL);
              if (v36)
              {
                uint64_t v37 = (unsigned __int8 *)v36;
                if (CFStringGetCString(v33, v36, v35, 0x8000100u))
                {
                  uint64_t v44 = CGDataConsumerPrintf(*a1, "/", v38, v39, v40, v41, v42, v43, (char)v335);
                  uint64_t i = (uint64_t)&v44[print_name(a1, v37 + 1, v45, v46, v47, v48, v49, v50)];
                }
                else
                {
                  uint64_t i = 0;
                }
                free(v37);
              }
              else
              {
                uint64_t i = 0;
              }
              break;
          }
        }
        a1[3] += i;
        *((unsigned char *)a1 + 16) = 1;
      }
    }
  }
}

unsigned char *emit_whitespace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 24) < 0x49uLL)
  {
    CGSize result = CGDataConsumerPrintf(*(unsigned char **)a1, " ", a3, a4, a5, a6, a7, a8, v10);
    *(void *)(a1 + 24) += result;
    *(unsigned char *)(a1 + 16) = 0;
  }
  else
  {
    return emit_newline((unsigned char **)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

unsigned char *print_ascii_string(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = a1;
  if (a2)
  {
    ExternalRepresentatiouint64_t n = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x600u, 0);
    if (ExternalRepresentation)
    {
      CFDataRef v16 = ExternalRepresentation;
      CFIndex v17 = print_data(v9, ExternalRepresentation, 0, v11, v12, v13, v14, v15, v19);
      CFRelease(v16);
      return v17;
    }
    pdf_error("Warning: can't convert string to ASCII.");
    a1 = v9;
  }

  return print_data(a1, 0, 0, a4, a5, a6, a7, a8, a9);
}

uint64_t print_name(unsigned char **a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  for (uint64_t i = 0; ; i += (uint64_t)v15)
  {
    unsigned int v12 = *a2++;
    uint64_t v11 = v12;
    if (v12 <= 0x3E)
    {
      if (((1 << v11) & 0x5000832800000000) != 0) {
        goto LABEL_9;
      }
      if (!v11) {
        break;
      }
    }
    if ((v11 - 91) <= 0x22 && ((1 << (v11 - 91)) & 0x500000005) != 0)
    {
LABEL_9:
      uint64_t v14 = *a1;
LABEL_10:
      uint64_t v15 = CGDataConsumerPrintf(v14, "#%02x", a3, a4, a5, a6, a7, a8, v11);
      continue;
    }
    uint64_t v14 = *a1;
    if ((v11 - 127) <= 0xFFFFFFA1) {
      goto LABEL_10;
    }
    uint64_t v15 = CGDataConsumerPrintf(v14, "%c", a3, a4, a5, a6, a7, a8, v11);
  }
  return i;
}

unsigned char *print_data(uint64_t a1, CFDataRef theData, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFDataRef v10 = theData;
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    if (theData)
    {
      uint64_t v13 = *(void *)(*(void *)v12 + 280);
      if (v13)
      {
        CFIndex Length = CFDataGetLength(theData);
        CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 16), @"kCGPDFContextEncryptionCipher");
        if (Value
          && ((CFDataRef v16 = Value, CFEqual(Value, @"kCGPDFContextEncryptionCipherAESv2"))
           || CFEqual(v16, @"kCGPDFContextEncryptionCipherAESv3")))
        {
          size_t v17 = Length + 32;
          int v18 = 1;
        }
        else
        {
          int v18 = 0;
          size_t v17 = Length;
        }
        CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v17);
        if (Mutable)
        {
          uint64_t v21 = Mutable;
          size_t v35 = Length;
          Mutableuint64_t BytePtr = CFDataGetMutableBytePtr(Mutable);
          CFStringRef v23 = MutableBytePtr;
          if (v18)
          {
            *(_OWORD *)Mutableuint64_t BytePtr = *(_OWORD *)(v12 + 108);
            CFStringRef v23 = MutableBytePtr + 16;
            v17 -= 16;
            uint64_t v24 = 16;
          }
          else
          {
            uint64_t v24 = 0;
          }
          pdf_cryptor = get_pdf_cryptor(v12, v13);
          size_t v36 = 0;
          uint64_t BytePtr = CFDataGetBytePtr(v10);
          CGCryptorProcessBytes((uint64_t)pdf_cryptor, BytePtr, v35, v23, v17, &v36);
          CFIndex v28 = v36 + v24;
          if (v18)
          {
            CGCryptorDrain((uint64_t)pdf_cryptor, &v23[v36], v17 - v36, &v36);
            v28 += v36;
          }
          CFDataSetLength(v21, v28);
          CGCryptorRelease((uint64_t)pdf_cryptor);
          CFIndex v34 = PDFWriteCFData(*(unsigned char **)a1, v21, a3, v29, v30, v31, v32, v33, v35);
          CFRelease(v21);
          return v34;
        }
      }
    }
    char v19 = *(unsigned char **)a1;
    theDatdouble a = 0;
  }
  else
  {
    char v19 = *(unsigned char **)a1;
  }

  return PDFWriteCFData(v19, theData, a3, a4, a5, a6, a7, a8, a9);
}

unsigned char *emit_newline(unsigned char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGSize result = CGDataConsumerPrintf(*a1, "\n", a3, a4, a5, a6, a7, a8, v16);
  if (*((unsigned char *)a1 + 17)) {
    CGSize result = CGDataConsumerPrintf(*a1, "%%%% ", v10, v11, v12, v13, v14, v15, v17);
  }
  *((unsigned char *)a1 + 16) = 0;
  a1[3] = 0;
  return result;
}

uint64_t *PDFWriterBeginObject(uint64_t *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    char v9 = a2;
    uint64_t v10 = result;
    if (result[3]) {
      emit_newline((unsigned char **)result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    uint64_t v11 = *v10;
    if (a3)
    {
      if (v11) {
        uint64_t v12 = *(void *)(v11 + 48);
      }
      else {
        uint64_t v12 = 0;
      }
      *a3 = v12;
    }
    return (uint64_t *)CGDataConsumerPrintf((unsigned char *)v11, "%lu 0 obj\n", (uint64_t)a3, a4, a5, a6, a7, a8, v9);
  }
  return result;
}

unsigned char *PDFWriterEndObject(unsigned char *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    char v9 = (unsigned char **)result;
    if (*((void *)result + 3)) {
      emit_newline((unsigned char **)result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    CGSize result = CGDataConsumerPrintf(*v9, "endobj\n", a3, a4, a5, a6, a7, a8, v11);
    if (a2)
    {
      uint64_t v10 = (uint64_t)*v9;
      if (*v9) {
        uint64_t v10 = *(void *)(v10 + 48);
      }
      *a2 = v10;
    }
  }
  return result;
}

void PDFWriterAnnotate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if ((didHandleDefaults & 1) == 0) {
      pthread_once(&once_16436, (void (*)(void))handleDefaults);
    }
    if (shouldAnnotate)
    {
      if (*(void *)(a1 + 24)) {
        PDFWriterPrintf((unsigned char **)a1, (uint64_t)"\n", a3, a4, a5, a6, a7, a8, v22);
      }
      PDFWriterPrintf((unsigned char **)a1, (uint64_t)"%%%% ", a3, a4, a5, a6, a7, a8, v22);
      PDFWriterVPrintf((unsigned char **)a1, a2, (uint64_t)&a9, v11, v12, v13, v14, v15);
      PDFWriterPrintf((unsigned char **)a1, (uint64_t)"\n", v16, v17, v18, v19, v20, v21, v23);
    }
  }
}

unint64_t CGTaggedColorCreate_Float32BPC(unsigned int a1, unsigned int a2, unsigned int a3)
{
  if (CGTaggedColorCreate_predicate != -1) {
    dispatch_once(&CGTaggedColorCreate_predicate, &__block_literal_global_34);
  }
  unint64_t result = ((unint64_t)a1 << 11) | (32 * a2) | ((unint64_t)a3 << 23) | 0x850000000000000FLL;
  unint64_t v7 = *MEMORY[0x1E4FBA8E0] ^ result;
  if ((~v7 & 0xC000000000000007) != 0) {
    return v7 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(MEMORY[0x1E4FBA8D0] + (v7 & 7));
  }
  return result;
}

__CFString *color_copy_format_description(unint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<CGColor %p> ", a1);
  if (a1)
  {
    if ((a1 & 0x8000000000000000) != 0) {
      CGColorSpaceRef ColorSpace = CGTaggedColorGetColorSpace(a1, v4, v5, v6, v7, v8, v9, v10);
    }
    else {
      CGColorSpaceRef ColorSpace = *(CGColorSpaceRef *)(a1 + 24);
    }
  }
  else
  {
    CGColorSpaceRef ColorSpace = 0;
  }
  CFStringRef v12 = CFCopyDescription(ColorSpace);
  if (v12)
  {
    CFStringRef v13 = v12;
    CFStringAppend(Mutable, @"[");
    CFStringAppend(Mutable, v13);
    CFStringAppend(Mutable, @"] ");
    CFRelease(v13);
  }
  CFStringAppend(Mutable, @"( ");
  Components = CGColorGetComponents((CGColorRef)a1);
  unint64_t v22 = 0;
  if (!a1) {
    goto LABEL_11;
  }
LABEL_9:
  if ((a1 & 0x8000000000000000) != 0) {
    unint64_t NumberOfComponents = CGTaggedColorGetNumberOfComponents(a1, v14, v15, v16, v17, v18, v19, v20);
  }
  else {
    unint64_t NumberOfComponents = *(void *)(a1 + 56);
  }
  while (v22 < NumberOfComponents)
  {
    CFStringAppendFormat(Mutable, 0, @"%g ", *(void *)&Components[v22++]);
    if (a1) {
      goto LABEL_9;
    }
LABEL_11:
    unint64_t NumberOfComponents = 0;
  }
  CFStringAppend(Mutable, @""));
  return Mutable;
}

CGColorSpaceRef CGTaggedColorGetColorSpace(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *MEMORY[0x1E4FBA8E0];
  if ((a1 & 0xC000000000000007) == 0xC000000000000007) {
    int v9 = 7;
  }
  else {
    int v9 = *MEMORY[0x1E4FBA8E0];
  }
  unsigned int v10 = v9 ^ a1;
  if ((v10 & 0x18) == 8)
  {
    int v11 = (v10 >> 5) & 0x3F;
    CGColorSpaceRef v12 = 0;
    switch(v11)
    {
      case 0:
        return v12;
      case 1:
        goto LABEL_11;
      case 2:
        goto LABEL_13;
      case 4:
        goto LABEL_12;
      case 5:
        goto LABEL_18;
      case 7:
        CFStringRef v13 = @"kCGColorSpaceSRGB";
        goto LABEL_14;
      case 8:
        CFStringRef v13 = @"kCGColorSpaceAdobeRGB1998";
        goto LABEL_14;
      case 9:
        CFStringRef v13 = @"kCGColorSpaceGenericGrayGamma2_2";
        goto LABEL_14;
      case 12:
        CFStringRef v13 = @"kCGColorSpaceDisplayP3";
        goto LABEL_14;
      case 13:
        CFStringRef v13 = @"kCGColorSpaceDCIP3";
        goto LABEL_14;
      case 14:
        CFStringRef v13 = @"kCGColorSpaceExtendedSRGB";
        goto LABEL_14;
      case 15:
        CFStringRef v13 = @"kCGColorSpaceExtendedGray";
        goto LABEL_14;
      case 16:
        CFStringRef v13 = @"kCGColorSpaceLinearSRGB";
        goto LABEL_14;
      case 17:
        CFStringRef v13 = @"kCGColorSpaceExtendedLinearSRGB";
        goto LABEL_14;
      default:
        _CGHandleAssert("CGTaggedColorGetColorSpace", 36, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointerInternal.h", "0", "Unexpected color space %d", a6, a7, a8, v11);
    }
  }
  if ((a1 & 0xC000000000000007) == 0xC000000000000007) {
    uint64_t v8 = 0;
  }
  unsigned int v14 = v8 ^ a1;
  uint64_t v15 = ((v8 ^ a1) >> 3) & 3;
  if (v15) {
    _CGHandleAssert("CGTaggedColorGetPlainSpace", 348, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointer.h", "TAGGED_PAYLOAD_COLOR_TYPE(payload) == kCGTaggedColorTypePlain", "invalid tagged color payload %llu", a6, a7, a8, v15);
  }
  switch((v14 >> 5) & 0x3F)
  {
    case 0u:
LABEL_11:
      CFStringRef v13 = @"kCGColorSpaceGenericRGB";
      goto LABEL_14;
    case 1u:
LABEL_12:
      CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
      break;
    case 2u:
LABEL_13:
      CFStringRef v13 = @"kCGColorSpaceGenericGray";
LABEL_14:
      CGColorSpaceRef DeviceRGB = CGColorSpaceCreateWithName(v13);
      break;
    case 3u:
LABEL_18:
      CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceGray();
      break;
    default:
      _CGHandleAssert("CGTaggedColorGetColorSpace", 45, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointerInternal.h", "0", "Unexpected color space %d", a6, a7, a8, (v10 >> 5) & 0x3F);
  }
  CGColorSpaceRef v12 = DeviceRGB;
  if (DeviceRGB) {
    CFAutorelease(DeviceRGB);
  }
  return v12;
}

uint64_t CGTaggedColorGetNumberOfComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *MEMORY[0x1E4FBA8E0];
  if ((~a1 & 0xC000000000000007) == 0) {
    LOWORD(v++*(_DWORD *)(result + 8) = 7;
  }
  unsigned int v9 = (unsigned __int16)(v8 ^ a1) >> 11;
  if (v9 >= 0x10 || ((0xFF0Fu >> v9) & 1) == 0) {
    _CGHandleAssert("CGTaggedColorGetNumberOfComponents", 376, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointer.h", "0", "invalid tagged payload storage flavor (%u)", a6, a7, a8, v9);
  }
  return qword_185206108[v9];
}

double CGTaggedColorGetComponents(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *MEMORY[0x1E4FBA8E0];
  if ((~a1 & 0xC000000000000007) == 0) {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v8 ^ a1;
  uint64_t v10 = 0xFFFFFFFF00000;
  if ((~(v8 ^ a1) & 7) != 0) {
    uint64_t v10 = 0xFFFFFFFFFF00000;
  }
  unsigned int v11 = (((v8 ^ a1) >> 3) >> 8) & 0x1F;
  unint64_t v12 = v10 & (v9 >> 3);
  unint64_t v13 = v12 >> 20;
  switch(v11)
  {
    case 0u:
      *(double *)a2 = (double)BYTE3(v13) / 255.0;
      int8x8_t v14 = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v9), (uint64x2_t)xmmword_1850CD920)), (int8x8_t)0xFF000000FFLL);
      v15.i64[0] = v14.u32[0];
      v15.i64[1] = v14.u32[1];
      *(float64x2_t *)(a2 + ++*(_DWORD *)(result + 8) = vdivq_f64(vcvtq_f64_u64(v15), (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL));
      double result = (double)(v12 >> 20) / 255.0;
      goto LABEL_15;
    case 1u:
      unsigned int v17 = (unsigned __int16)(v9 >> 39);
      unsigned int v18 = (unsigned __int16)(v12 >> 20);
      double v19 = (double)v17;
      double v20 = 65535.0;
      goto LABEL_10;
    case 2u:
      double result = (double)(unsigned __int16)(v9 >> 39) / 65535.0;
      *(double *)a2 = result;
      *(double *)(a2 + ++*(_DWORD *)(result + 8) = result;
      *(double *)(a2 + 16) = result;
      *(double *)(a2 + 24) = (double)(unsigned __int16)(v12 >> 20) / 65535.0;
      return result;
    case 3u:
      unsigned int v21 = (unsigned __int16)(v9 >> 39);
      unsigned int v18 = (unsigned __int16)(v12 >> 20);
      double v19 = (double)v21;
      double v20 = 100.0;
LABEL_10:
      double result = v19 / v20;
      *(double *)a2 = result;
      *(double *)(a2 + ++*(_DWORD *)(result + 8) = (double)v18 / v20;
      return result;
    case 8u:
      double result = *(float *)&v13 / 100.0;
      *(double *)(a2 + ++*(_DWORD *)(result + 8) = result;
      *(double *)(a2 + 16) = result;
      *(double *)a2 = result;
      *(void *)(a2 + 24) = 0;
      return result;
    case 9u:
      double result = *(float *)&v13 / 100.0;
      *(double *)(a2 + ++*(_DWORD *)(result + 8) = result;
      *(double *)(a2 + 16) = result;
      *(double *)a2 = result;
      *(void *)(a2 + 24) = 0x3FF0000000000000;
      return result;
    case 0xAu:
      *(void *)a2 = 0;
      *(void *)(a2 + ++*(_DWORD *)(result + 8) = 0;
      double result = *(float *)&v13 / 100.0;
      *(void *)(a2 + 16) = 0;
      goto LABEL_15;
    case 0xBu:
      *(void *)(a2 + 16) = 0x3FF0000000000000;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)a2 = _Q0;
      double result = *(float *)&v13 / 100.0;
LABEL_15:
      *(double *)(a2 + 24) = result;
      return result;
    case 0xCu:
      double result = *(float *)&v13 / 100.0;
      *(double *)a2 = result;
      *(void *)(a2 + ++*(_DWORD *)(result + 8) = 0;
      return result;
    case 0xDu:
      double result = *(float *)&v13 / 100.0;
      *(double *)a2 = result;
      *(void *)(a2 + ++*(_DWORD *)(result + 8) = 0x3FF0000000000000;
      return result;
    case 0xEu:
      *(void *)a2 = 0;
      goto LABEL_20;
    case 0xFu:
      *(void *)a2 = 0x3FF0000000000000;
LABEL_20:
      double result = *(float *)&v13 / 100.0;
      *(double *)(a2 + ++*(_DWORD *)(result + 8) = result;
      return result;
    default:
      _CGHandleAssert("CGTaggedColorGetComponents", 459, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointer.h", "0", "invalid tagged payload storage flavor (%u)", a6, a7, a8, v11);
  }
}

os_log_t __CGTaggedColorCreate_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coregraphics", "color");
  CGTaggedColorCreate_log = (uint64_t)result;
  return result;
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  components[2] = *(CGFloat *)MEMORY[0x1E4F143B8];
  components[0] = gray;
  components[1] = alpha;
  CFAllocatorRef v2 = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericGray");
  uint64_t v3 = CGColorCreate(v2, components);
  CGColorSpaceRelease(v2);
  if (!v3) {
    CGPostError((uint64_t)"Color creation failed for generic gray colorspace %p, {%f, %f}", v4, v5, v6, v7, v8, v9, v10, (char)v2);
  }
  return v3;
}

CGColorRef CGColorCreateGenericCMYK(CGFloat cyan, CGFloat magenta, CGFloat yellow, CGFloat black, CGFloat alpha)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  components[0] = cyan;
  components[1] = magenta;
  CGFloat v16 = yellow;
  CGFloat v17 = black;
  CGFloat v18 = alpha;
  uint64_t v5 = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericCMYK");
  uint64_t v6 = CGColorCreate(v5, components);
  CGColorSpaceRelease(v5);
  if (!v6) {
    CGPostError((uint64_t)"Color creation failed for CMYK colorspace %p, {%f, %f, %f %f, %f}", v7, v8, v9, v10, v11, v12, v13, (char)v5);
  }
  return v6;
}

double CGTaggedColorGetAlpha(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t NumberOfComponents = CGTaggedColorGetNumberOfComponents(a1, a2, a3, a4, a5, a6, a7, a8);
  MEMORY[0x1F4188790]();
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  CGTaggedColorGetComponents(a1, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
  return *(double *)&v11[8 * NumberOfComponents - 8];
}

CGColorSpaceRef __create_resolved_device_space_block_invoke()
{
  create_resolved_device_space_graCGFloat y = (uint64_t)CGColorSpaceCreateWithName(@"kCGColorSpaceGenericGrayGamma2_2");
  create_resolved_device_space_sRGB = (uint64_t)CGColorSpaceCreateWithName(@"kCGColorSpaceSRGB");
  CGColorSpaceRef result = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericCMYK");
  create_resolved_device_space_cmyint k = (uint64_t)result;
  return result;
}

CGColorSpace *CGColorGetPatternBaseColor(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || *(unsigned char *)(v2 + 185)) {
    return 0;
  }
  if (*(void *)(a1 + 40)) {
    return *(CGColorSpace **)(a1 + 40);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if ((*(_DWORD *)(v5 + 28) - 5) > 1) {
    return 0;
  }
  CGColorSpaceRef result = **(CGColorSpace ***)(v5 + 96);
  if (result)
  {
    CGColorRef v6 = CGColorCreate(result, (const CGFloat *)(a1 + 64));
    uint64_t v7 = 0;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 40), (unint64_t *)&v7, (unint64_t)v6, memory_order_relaxed, memory_order_relaxed);
    if (v7)
    {
      if (v6) {
        CFRelease(v6);
      }
    }
    return *(CGColorSpace **)(a1 + 40);
  }
  return result;
}

__CFDictionary *CGColorCopyPropertyList(CGColorSpaceRef *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (kCGColorComponents_block_invoke_once != -1) {
    dispatch_once(&kCGColorComponents_block_invoke_once, &__block_literal_global_31);
  }
  if (v2 != CGColorGetTypeID_color_type_id) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFPropertyListRef v4 = CGColorSpaceCopyPropertyList(a1[3]);
    if (!v4) {
      goto LABEL_16;
    }
    uint64_t v5 = v4;
    CFDictionarySetValue(Mutable, @"kCGColorSpace", v4);
    CFRelease(v5);
    CFMutableArrayRef v6 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!v6
      || (CFMutableArrayRef v7 = v6, CFDictionarySetValue(Mutable, @"kCGColorComponents", v6), CFRelease(v7), (v8 = a1[3]) == 0)
      || (uint64_t v9 = *(void *)(*((void *)v8 + 3) + 48)) == 0
      || (Components = CGColorGetComponents((CGColorRef)a1)) == 0)
    {
LABEL_16:
      CFRelease(Mutable);
      return 0;
    }
    if (v9 != -1)
    {
      uint64_t v11 = Components;
      uint64_t v12 = v9 + 1;
      while (1)
      {
        uint64_t valuePtr = *(void *)v11;
        CFNumberRef v13 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
        if (!v13) {
          break;
        }
        CFNumberRef v14 = v13;
        CFArrayAppendValue(v7, v13);
        CFRelease(v14);
        ++v11;
        if (!--v12) {
          return Mutable;
        }
      }
      goto LABEL_16;
    }
  }
  return Mutable;
}

CFDictionaryRef CGColorCreateWithPropertyList(const __CFDictionary *cf)
{
  CFDictionaryRef v1 = cf;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFDictionaryGetTypeID()
      && (v3 = CFDictionaryGetValue(v1, @"kCGColorSpace"), (CGColorSpaceRef v4 = CGColorSpaceCreateWithPropertyList(v3)) != 0))
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(*((void *)v4 + 3) + 48);
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v1, @"kCGColorComponents");
      CFDictionaryRef v1 = Value;
      if (Value)
      {
        CFTypeID v8 = CFGetTypeID(Value);
        if (v8 == CFArrayGetTypeID() && (uint64_t v9 = v6 + 1, CFArrayGetCount(v1) == v6 + 1))
        {
          memset(v14, 0, sizeof(v14));
          if (v6 != -1)
          {
            CFIndex v10 = 0;
            uint64_t v11 = v14;
            do
            {
              ValueAtIndedouble x = (const __CFNumber *)CFArrayGetValueAtIndex(v1, v10);
              CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, v11);
              ++v10;
              uint64_t v11 = (_OWORD *)((char *)v11 + 8);
            }
            while (v9 != v10);
          }
          CFDictionaryRef v1 = CGColorCreate(v5, (const CGFloat *)v14);
        }
        else
        {
          CFDictionaryRef v1 = 0;
        }
      }
      CGColorSpaceRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t CGDisplayListEntryStateGetClipStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetClipStack", 20, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 && !*(void *)(v8 + 8)) {
    return MEMORY[0x10];
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetSoftMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetSoftMask", 34, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 16)) != 0) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetStyle", 48, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 24)) != 0) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetBlackGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetBlackGeneration", 62, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 32)) != 0) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetUndercolorRemoval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetUndercolorRemoval", 76, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 40)) != 0) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

double CGDisplayListEntryStateGetFlatness(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetFlatness", 90, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return *(double *)(v8 + 48);
  }
  else {
    return 0.0;
  }
}

double CGDisplayListEntryStateGetAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetAlpha", 100, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return *(double *)(v8 + 56);
  }
  else {
    return 1.0;
  }
}

uint64_t CGDisplayListEntryStateGetCompositeOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetCompositeOperation", 110, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return ((int)(*(_DWORD *)(v8 + 96) << 26) >> 26);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t CGDisplayListEntryStateGetAntialias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetAntialias", 120, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return (*(unsigned __int8 *)(v8 + 96) >> 6) & 1;
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetAlphaIsShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetAlphaIsShape", 130, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return *(unsigned __int8 *)(v8 + 96) >> 7;
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetColorRenderingIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetColorRenderingIntent", 140, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return ((int)(*(_DWORD *)(v8 + 96) << 18) >> 26);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetFillOverprint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetFillOverprint", 150, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return (*(unsigned __int8 *)(v8 + 97) >> 6) & 1;
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetStrokeOverprint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeOverprint", 160, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return *(unsigned __int8 *)(v8 + 97) >> 7;
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetOverprintMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetOverprintMode", 170, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    return *(unsigned int *)(v8 + 100);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetFillColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetFillColor", 181, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetStrokeColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeColor", 196, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

double CGDisplayListEntryStateGetStrokeWidth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeWidth", 210, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    return *(double *)(v8 + 16);
  }
  else {
    return 0.0;
  }
}

double CGDisplayListEntryStateGetStrokeWidthThreshold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeWidthThreshold", 220, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    return *(double *)(v8 + 24);
  }
  else {
    return 0.0;
  }
}

double CGDisplayListEntryStateGetStrokeLimit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeLimit", 230, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    return *(double *)(v8 + 32);
  }
  else {
    return 0.0;
  }
}

uint64_t CGDisplayListEntryStateGetStrokeDash(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeDash", 240, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 40)) != 0) {
    return *(void *)(v9 + 16);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetLineCap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetLineCap", 254, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    return *(char *)(v8 + 48);
  }
  else {
    return 0;
  }
}

uint64_t CGDisplayListEntryStateGetLineJoin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetLineJoin", 264, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    return *(char *)(v8 + 49);
  }
  else {
    return 0;
  }
}

BOOL CGDisplayListEntryStateGetStrokeAdjust(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeAdjust", 274, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  return v8 && *(unsigned char *)(v8 + 50) != 0;
}

__n128 CGDisplayListEntryStateGetBaseCTM@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetBaseCTM", 285, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a2, a3, a4, vars0);
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    uint64_t v6 = (const CGAffineTransform *)(v5 + 8);
  }
  else {
    uint64_t v6 = &CGAffineTransformIdentity;
  }
  long long v7 = *(_OWORD *)&v6->c;
  *(_OWORD *)a5 = *(_OWORD *)&v6->a;
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *(__n128 *)&v6->tx;
  *(__n128 *)(a5 + 32) = result;
  return result;
}

CGFloat CGDisplayListEntryStateGetPatternPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetPatternPhase", 295, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 72);
  if (v8) {
    uint64_t v9 = (const CGSize *)(v8 + 56);
  }
  else {
    uint64_t v9 = &CGSizeZero;
  }
  return v9->width;
}

double CGDisplayListEntryStateGetSmoothness(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    _CGHandleAssert("CGDisplayListEntryStateGetSmoothness", 305, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  }
  uint64_t v8 = *(void *)(a1 + 72);
  if (v8) {
    return *(double *)(v8 + 72);
  }
  else {
    return 0.0;
  }
}

BOOL CGPDFBase14InfoGetAdvances(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0xD)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t)*(&off_1E52B2290 + v3);
    while (1)
    {
      uint64_t v8 = *(const char **)(a2 + v6);
      if (!v8) {
        goto LABEL_7;
      }
      uint64_t v9 = bsearch(*(const void **)(a2 + v6), *(const void **)(v7 + 8), *(void *)v7, 0x10uLL, (int (__cdecl *)(const void *, const void *))name_compare);
      if (!v9) {
        break;
      }
      int v10 = v9[2];
LABEL_8:
      *(double *)(a3 + v6) = (double)v10;
      v6 += 8;
      if (v6 == 2048) {
        return v3 < 0xE;
      }
    }
LABEL_7:
    int v10 = 0;
    goto LABEL_8;
  }
  return v3 < 0xE;
}

uint64_t name_compare(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

void *gmalloc(size_t size)
{
  if ((size & 0x80000000) != 0)
  {
LABEL_4:
    exceptiouint64_t n = __cxa_allocate_exception(1uLL);
  }
  if (!size) {
    return 0;
  }
  __n128 result = malloc_type_malloc(size, 0x3E121FE2uLL);
  if (!result) {
    goto LABEL_4;
  }
  return result;
}

void *grealloc(void *a1, size_t size)
{
  if ((size & 0x80000000) != 0)
  {
LABEL_9:
    exceptiouint64_t n = __cxa_allocate_exception(1uLL);
  }
  if (size)
  {
    if (a1)
    {
      __n128 result = malloc_type_realloc(a1, size, 0x2F69A696uLL);
      if (!result) {
        goto LABEL_9;
      }
    }
    else
    {
      __n128 result = malloc_type_malloc(size, 0xCE875C48uLL);
      if (!result) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    free(a1);
    return 0;
  }
  return result;
}

void *gmallocn(unsigned int a1, unsigned int a2)
{
  if (!a1) {
    return 0;
  }
  if ((a1 & 0x80000000) != 0 || 0x7FFFFFFF / a2 <= a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(1uLL);
  }
  size_t v3 = a2 * a1;
  return gmalloc(v3);
}

void *greallocn(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2)
  {
    if ((a2 & 0x80000000) != 0 || 0x7FFFFFFF / a3 <= a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(1uLL);
    }
    size_t v3 = a3 * a2;
    return grealloc(a1, v3);
  }
  else
  {
    free(a1);
    return 0;
  }
}

uint64_t CPRangeUnion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 <= 0) {
    uint64_t v4 = a1 + a2;
  }
  else {
    uint64_t v4 = a1;
  }
  if (a4 <= 0) {
    uint64_t v5 = a3 + a4;
  }
  else {
    uint64_t v5 = a3;
  }
  if (v5 < v4) {
    uint64_t v4 = v5;
  }
  if (a4)
  {
    uint64_t v6 = a3;
  }
  else
  {
    uint64_t v4 = a1;
    uint64_t v6 = 0;
  }
  if (a2) {
    return v4;
  }
  else {
    return v6;
  }
}

uint64_t CPRangeIntersection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 + a2;
  if (a2 <= 0) {
    uint64_t v5 = a1 + a2;
  }
  else {
    uint64_t v5 = a1;
  }
  if (a2 <= 0) {
    uint64_t v4 = a1;
  }
  uint64_t v6 = a3 + a4;
  if (a4 <= 0) {
    uint64_t v7 = a3 + a4;
  }
  else {
    uint64_t v7 = a3;
  }
  if (a4 <= 0) {
    uint64_t v6 = a3;
  }
  if (v5 <= v7) {
    uint64_t v5 = v7;
  }
  if (v4 >= v6) {
    uint64_t v4 = v6;
  }
  if (v4 <= v5) {
    uint64_t v5 = 0;
  }
  if (!a4) {
    uint64_t v5 = 0;
  }
  if (a2) {
    return v5;
  }
  else {
    return 0;
  }
}

void ***CGPDFAdvancesCreate(uint64_t a1)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 200);
  if (v2 == 1) {
    return 0;
  }
  size_t v3 = (void ***)malloc_type_calloc(1uLL, 0x828uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v3) {
    return v3;
  }
  if ((v2 - 2) >= 4)
  {
    if ((v2 - 6) >= 2)
    {
      CGPDFAdvancesRelease(v3);
      return 0;
    }
    uint64_t v8 = *(CGPDFDictionary **)(a1 + 16);
    value[0] = 0.0;
    arraCGFloat y = 0;
    *(void *)advances = 0;
    CGPDFInteger v90 = 0;
    CGPDFInteger v91 = 0;
    if (CGPDFDictionaryGetNumber(v8, "DW", value))
    {
      uint64_t v9 = *(void *)&value[0];
    }
    else
    {
      value[0] = 1000.0;
      uint64_t v9 = 0x408F400000000000;
    }
    uint64_t v31 = 0;
    v3[256] = (void **)v9;
    int64x2_t v32 = vdupq_lane_s64(v9, 0);
    do
    {
      *(int64x2_t *)&v3[v31] = v32;
      v31 += 2;
    }
    while (v31 != 256);
    if (CGPDFDictionaryGetArray(v8, "W", (CGPDFArrayRef *)advances))
    {
      if (*(void *)advances)
      {
        size_t v33 = *(void *)(*(void *)advances + 16);
        if (v33)
        {
          size_t v34 = 0;
          while (CGPDFArrayGetInteger(*(CGPDFArrayRef *)advances, v34, &v91))
          {
            if (CGPDFArrayGetInteger(*(CGPDFArrayRef *)advances, v34 + 1, &v90))
            {
              if (!CGPDFArrayGetNumber(*(CGPDFArrayRef *)advances, v34 + 2, value)) {
                break;
              }
              int64_t v41 = v91;
              if (v91 <= v90)
              {
                do
                {
                  add_horizontal_advance((uint64_t)v3, v41, value[0], v35, v36, v37, v38, v39, v40);
                  BOOL v42 = v41++ < v90;
                }
                while (v42);
              }
              uint64_t v43 = 3;
            }
            else
            {
              if (!CGPDFArrayGetArray(*(CGPDFArrayRef *)advances, v34 + 1, &array)) {
                break;
              }
              if (array)
              {
                uint64_t v44 = *((void *)array + 2);
                if (v44)
                {
                  size_t v45 = 0;
                  while (CGPDFArrayGetNumber(array, v45, value))
                  {
                    add_horizontal_advance((uint64_t)v3, v45 + v91, value[0], v46, v47, v48, v49, v50, v51);
                    if (v44 == ++v45) {
                      goto LABEL_60;
                    }
                  }
                  break;
                }
              }
LABEL_60:
              uint64_t v43 = 2;
            }
            v34 += v43;
            if (v34 >= v33) {
              goto LABEL_75;
            }
          }
        }
      }
    }
LABEL_75:
    value[0] = 0.0;
    CGPDFInteger v90 = 0;
    CGPDFInteger v91 = 0;
    CGPDFArrayRef v88 = 0;
    CGPDFArrayRef v89 = 0;
    CGPDFArrayRef v87 = 0;
    *(void *)advances = 0x408B800000000000;
    arraCGFloat y = (CGPDFArrayRef)0xC08F400000000000;
    if (CGPDFDictionaryGetArray(v8, "DW2", &v87))
    {
      if (!v87
        || *((void *)v87 + 2) != 2
        || !CGPDFArrayGetNumber(v87, 0, (CGPDFReal *)advances)
        || !CGPDFArrayGetNumber(v87, 1uLL, (CGPDFReal *)&array))
      {
        goto LABEL_107;
      }
      CGPDFArrayRef v53 = array;
      CGPDFArrayRef v54 = *(CGPDFArrayRef *)advances;
    }
    else
    {
      CGPDFArrayRef v53 = (CGPDFArrayRef)0xC08F400000000000;
      CGPDFArrayRef v54 = (CGPDFArrayRef)0x408B800000000000;
    }
    v3[258] = (void **)v53;
    v3[259] = (void **)v54;
    if (!CGPDFDictionaryGetArray(v8, "W2", &v88)) {
      return v3;
    }
    if (!v88) {
      return v3;
    }
    size_t v55 = *((void *)v88 + 2);
    if (!v55) {
      return v3;
    }
    size_t v56 = 0;
    while (CGPDFArrayGetInteger(v88, v56, &v91))
    {
      if (CGPDFArrayGetInteger(v88, v56 + 1, &v90))
      {
        if (!CGPDFArrayGetNumber(v88, v56 + 2, (CGPDFReal *)&array)
          || !CGPDFArrayGetNumber(v88, v56 + 3, value)
          || !CGPDFArrayGetNumber(v88, v56 + 4, (CGPDFReal *)advances))
        {
          break;
        }
        int64_t v64 = v91;
        if (v91 <= v90)
        {
          do
          {
            add_vertical_advance((uint64_t)v3, v64, *(double *)&array, value[0], *(double *)advances, v58, v59, v60, v61, v62, v63);
            BOOL v42 = v64++ < v90;
          }
          while (v42);
        }
        uint64_t v65 = 5;
      }
      else
      {
        if (!CGPDFArrayGetArray(v88, v56 + 1, &v89)) {
          break;
        }
        if (v89)
        {
          size_t v66 = *((void *)v89 + 2);
          if (0xAAAAAAAAAAAAAAABLL * v66 > 0x5555555555555555) {
            break;
          }
          if (v66)
          {
            size_t v67 = 0;
            while (CGPDFArrayGetNumber(v89, v67, (CGPDFReal *)&array))
            {
              size_t v68 = v67 + 1;
              if (!CGPDFArrayGetNumber(v89, v68, value)) {
                break;
              }
              size_t v69 = v68 + 1;
              if (!CGPDFArrayGetNumber(v89, v69, (CGPDFReal *)advances)) {
                break;
              }
              unint64_t v76 = v91++;
              add_vertical_advance((uint64_t)v3, v76, *(double *)&array, value[0], *(double *)advances, v70, v71, v72, v73, v74, v75);
              size_t v67 = v69 + 1;
              if (v67 >= v66) {
                goto LABEL_103;
              }
            }
            break;
          }
        }
LABEL_103:
        uint64_t v65 = 2;
      }
      v56 += v65;
      if (v56 >= v55) {
        return v3;
      }
    }
LABEL_107:
    pdf_error(v57);
    return v3;
  }
  *(void *)advances = 0;
  unint64_t FontDescriptor = CGPDFFontGetFontDescriptor(a1);
  if (FontDescriptor)
  {
    value[0] = 0.0;
    BOOL Number = CGPDFDictionaryGetNumber(*(CGPDFDictionaryRef *)(FontDescriptor + 32), "MissingWidth", value);
    double v7 = value[0];
    if (!Number) {
      double v7 = 0.0;
    }
    *(double *)advances = v7;
  }
  else
  {
    double v7 = 0.0;
  }
  uint64_t v10 = 0;
  int64x2_t v11 = vdupq_lane_s64(*(uint64_t *)&v7, 0);
  do
  {
    *(int64x2_t *)&v3[v10] = v11;
    v10 += 2;
  }
  while (v10 != 256);
  CGPDFInteger v91 = 0;
  arraCGFloat y = 0;
  CGPDFInteger v90 = 0;
  uint64_t v12 = *(CGPDFDictionary **)(a1 + 16);
  if (!CGPDFDictionaryGetInteger(v12, "FirstChar", &v91))
  {
    int v13 = *(_DWORD *)(a1 + 40);
    if (v13) {
      goto LABEL_24;
    }
LABEL_22:
    pdf_error(v14);
    goto LABEL_23;
  }
  if ((unint64_t)v91 > 0xFF)
  {
LABEL_23:
    int v13 = *(_DWORD *)(a1 + 40);
    goto LABEL_24;
  }
  if (!CGPDFDictionaryGetInteger(v12, "LastChar", &v90))
  {
    int v13 = *(_DWORD *)(a1 + 40);
    if (v13) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if ((unint64_t)v90 > 0xFF || v91 > v90) {
    goto LABEL_22;
  }
  if (CGPDFDictionaryGetArray(v12, "Widths", &array))
  {
    if (array) {
      uint64_t v52 = *((void *)array + 2);
    }
    else {
      uint64_t v52 = 0;
    }
    CGPDFInteger v84 = v90;
    CGPDFInteger v85 = v91;
    if (v52 != v90 - v91 + 1)
    {
      CGPDFInteger v85 = v91;
      uint64_t v86 = v91 + v52;
      if (v91 + v52 >= 256) {
        uint64_t v86 = 256;
      }
      CGPDFInteger v84 = v86 - 1;
      CGPDFInteger v90 = v84;
    }
    if (v85 <= v84)
    {
      do
      {
        if (CGPDFArrayGetNumber(array, v85 - v91, (CGPDFReal *)advances)) {
          v3[v85] = *(void ***)advances;
        }
        BOOL v42 = v85++ < v90;
      }
      while (v42);
    }
    return v3;
  }
  int v13 = *(_DWORD *)(a1 + 40);
  if (!v13)
  {
    goto LABEL_23;
  }
LABEL_24:
  long long v125 = 0u;
  long long v124 = 0u;
  long long v123 = 0u;
  long long v122 = 0u;
  long long v121 = 0u;
  long long v120 = 0u;
  long long v119 = 0u;
  long long v118 = 0u;
  long long v117 = 0u;
  long long v116 = 0u;
  long long v115 = 0u;
  long long v114 = 0u;
  long long v113 = 0u;
  long long v112 = 0u;
  long long v111 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  long long v106 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  long long v103 = 0u;
  long long v102 = 0u;
  long long v101 = 0u;
  long long v100 = 0u;
  long long v99 = 0u;
  long long v98 = 0u;
  long long v97 = 0u;
  long long v96 = 0u;
  long long v95 = 0u;
  *(_OWORD *)CGPDFReal value = 0u;
  Encoding = CGPDFFontGetEncoding((atomic_ullong *)a1);
  uint64_t v16 = (uint64_t)Encoding;
  if (v13)
  {
    if (Encoding)
    {
      for (unint64_t i = 0; i != 256; ++i)
        *(void *)&value[i] = CGPDFEncodingGetNameForIndex(v16, i);
      if (CGPDFBase14InfoGetAdvances(v13, (uint64_t)value, (uint64_t)v3)) {
        return v3;
      }
    }
  }
  else
  {
    GlyphVector = (const CGGlyph *)CGPDFEncodingGetGlyphVector(Encoding);
    if (GlyphVector)
    {
      uint64_t v19 = GlyphVector;
      uint64_t Font = (CGFont *)CGPDFFontGetFont(a1);
      if (Font)
      {
        unsigned int v21 = Font;
        CGFontGetGlyphAdvances(Font, v19, 0x100uLL, advances);
        font_info = get_font_info(v21);
        if (font_info)
        {
          LODWORD(v23) = font_info[2];
          double v24 = (double)v23;
        }
        else
        {
          double v24 = 0.0;
        }
        uint64_t v77 = 0;
        float64x2_t v78 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24, 0);
        float64x2_t v79 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
        int v80 = (float64x2_t *)v3;
        do
        {
          long long v81 = *(_OWORD *)&advances[v77];
          v82.i64[0] = (int)v81;
          v82.i64[1] = SDWORD1(v81);
          float64x2_t v83 = vcvtq_f64_s64(v82);
          v82.i64[0] = SDWORD2(v81);
          v82.i64[1] = SHIDWORD(v81);
          *int v80 = vdivq_f64(vmulq_f64(v83, v79), v78);
          v80[1] = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v82), v79), v78);
          v80 += 2;
          v77 += 4;
        }
        while (v77 != 256);
        return v3;
      }
    }
  }
  CFDataRef v25 = CGPDFFontGetEncoding((atomic_ullong *)a1);
  if (v25)
  {
    uint64_t v26 = (uint64_t)v25;
    unint64_t v27 = 0;
    long long v125 = 0u;
    long long v124 = 0u;
    long long v123 = 0u;
    long long v122 = 0u;
    long long v121 = 0u;
    long long v120 = 0u;
    long long v119 = 0u;
    long long v118 = 0u;
    long long v117 = 0u;
    long long v116 = 0u;
    long long v115 = 0u;
    long long v114 = 0u;
    long long v113 = 0u;
    long long v112 = 0u;
    long long v111 = 0u;
    long long v110 = 0u;
    long long v109 = 0u;
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v100 = 0u;
    long long v99 = 0u;
    long long v98 = 0u;
    long long v97 = 0u;
    long long v96 = 0u;
    long long v95 = 0u;
    *(_OWORD *)CGPDFReal value = 0u;
    do
    {
      *(void *)&value[v27] = CGPDFEncodingGetNameForIndex(v26, v27);
      ++v27;
    }
    while (v27 != 256);
    CFIndex v28 = (void *)CGPDFFontGetFont(a1);
    uint64_t v29 = get_font_info(v28);
    if (v29 && v29[48]) {
      int v30 = 1;
    }
    else {
      int v30 = 5;
    }
    CGPDFBase14InfoGetAdvances(v30, (uint64_t)value, (uint64_t)v3);
  }
  else
  {
    memset_pattern16(v3, &unk_1850CE0A0, 0x800uLL);
  }
  return v3;
}

uint64_t add_horizontal_advance(uint64_t result, unint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = result;
  if (a2 > 0xFF)
  {
    __n128 result = add_advance(*(void *)(result + 2056), a2, 0, a3, a5, a6, a7, a8, a9);
    if ((result & 1) == 0)
    {
      uint64_t v12 = (double *)malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL);
      __n128 result = __CFSetLastAllocationEventName();
      if (v12)
      {
        *((void *)v12 + 2) = a2;
        _OWORD v12[3] = a3;
        v12[4] = 0.0;
        v12[7] = 0.0;
        double *v12 = *(double *)(v11 + 2056);
        *((void *)v12 + 1) = a2;
        *(void *)(v11 + 2056) = v12;
      }
    }
  }
  else
  {
    *(double *)(result + 8 * a2) = a3;
  }
  return result;
}

uint64_t add_vertical_advance(uint64_t a1, unint64_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(double *)&long long v16 = a4;
  *((double *)&v16 + 1) = a5;
  uint64_t result = add_advance(*(void *)(a1 + 2080), a2, (double *)&v16, a3, a7, a8, a9, a10, a11);
  if ((result & 1) == 0)
  {
    uint64_t v15 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL);
    uint64_t result = __CFSetLastAllocationEventName();
    if (v15)
    {
      *((void *)v15 + 2) = a2;
      *((double *)v15 + 3) = a3;
      *(_OWORD *)(v15 + 40) = v16;
      *((void *)v15 + 4) = 0;
      *((void *)v15 + 7) = 0;
      *(void *)uint64_t v15 = *(void *)(a1 + 2080);
      *((void *)v15 + 1) = a2;
      *(void *)(a1 + 2080) = v15;
    }
  }
  return result;
}

void CGPDFAdvancesRelease(void ***a1)
{
  if (a1)
  {
    advance_subset_release(a1[257]);
    advance_subset_release(a1[260]);
    free(a1);
  }
}

void advance_subset_release(void **a1)
{
  if (a1)
  {
    CFDictionaryRef v1 = a1;
    do
    {
      int v2 = (void **)*v1;
      free(v1[4]);
      free(v1[7]);
      free(v1);
      CFDictionaryRef v1 = v2;
    }
    while (v2);
  }
}

uint64_t add_advance(uint64_t result, unint64_t a2, double *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (result)
  {
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = *(void *)(result + 8);
      BOOL v14 = a2 >= v13;
      unint64_t v15 = a2 - v13;
      if (!v14) {
        break;
      }
      unint64_t v16 = *(void *)(result + 16);
      if (v16 >= a2)
      {
        uint64_t v21 = *(void *)(result + 32);
        unint64_t v22 = (double *)(v21 + 8 * v15);
        if (!v21) {
          unint64_t v22 = (double *)(result + 24);
        }
        if (*v22 != a4)
        {
          pdf_error("advance for index %zu already specified.", a2);
          return 0;
        }
        return 1;
      }
      if (v16 + 1 == a2) {
        uint64_t v12 = result;
      }
      uint64_t result = *(void *)result;
    }
    while (result);
    if (!v12) {
      return 0;
    }
    uint64_t v17 = *(void *)(v12 + 16);
    if (v17 + 1 != a2) {
      _CGHandleAssert("add_advance_to_subset", 418, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Text/Advances/CGPDFAdvances.c", "index == subset->last + 1", "index: %zu  last: %zu", a7, a8, a9, a2);
    }
    CGFloat v18 = *(double **)(v12 + 32);
    if (v18)
    {
      double v20 = (uint64_t *)(v12 + 8);
      uint64_t v19 = *(void *)(v12 + 8);
      if ((unint64_t)(v17 - v19 - 255) < 0xFFFFFFFFFFFFFEFFLL) {
        return 0;
      }
    }
    else
    {
      if (*(double *)(v12 + 24) == a4
        && (!a3 || !*(void *)(v12 + 56) && *(double *)(v12 + 40) == *a3 && *(double *)(v12 + 48) == a3[1]))
      {
        *(void *)(v12 + 16) = a2;
        return 1;
      }
      double v20 = (uint64_t *)(v12 + 8);
      if ((unint64_t)(v17 - *(void *)(v12 + 8) - 255) < 0xFFFFFFFFFFFFFEFFLL) {
        return 0;
      }
      uint64_t result = (uint64_t)malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
      if (!result) {
        return result;
      }
      CGFloat v18 = (double *)result;
      for (uint64_t i = 0; i != 2048; i += 8)
        *(void *)(result + i) = *(void *)(v12 + 24);
      uint64_t v19 = *v20;
    }
    unint64_t v24 = a2 - v19;
    v18[a2 - v19] = a4;
    CFDataRef v25 = *(_OWORD **)(v12 + 56);
    if (a3)
    {
      if (!v25)
      {
        CFDataRef v25 = malloc_type_malloc(0x1000uLL, 0x1000040451B5BE8uLL);
        if (!v25)
        {
          free(v18);
          return 0;
        }
        for (uint64_t j = 0; j != 256; ++j)
          v25[j] = *(_OWORD *)(v12 + 40);
        unint64_t v24 = a2 - *v20;
      }
      v25[v24] = *(_OWORD *)a3;
    }
    *(void *)(v12 + 32) = v18;
    *(void *)(v12 + 56) = v25;
    ++*(void *)(v12 + 16);
    return 1;
  }
  return result;
}

double CGPDFAdvancesGetHorizontalAdvance(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xFF)
  {
    size_t v3 = *(void **)(a1 + 2056);
    if (v3)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        BOOL v5 = a2 >= v4;
        unint64_t v6 = a2 - v4;
        if (v5 && v3[2] >= a2) {
          break;
        }
        size_t v3 = (void *)*v3;
        if (!v3) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = v3[4];
      uint64_t v8 = (void *)(v7 + 8 * v6);
      int v2 = v3 + 3;
      if (v7) {
        int v2 = v8;
      }
    }
    else
    {
LABEL_8:
      int v2 = (void *)(a1 + 2048);
    }
  }
  else
  {
    int v2 = (void *)(a1 + 8 * a2);
  }
  return *(double *)v2;
}

double CGPDFAdvancesGetVerticalAdvance(uint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL v5 = *(void **)(a1 + 2080);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = v5[1];
      BOOL v7 = a2 >= v6;
      unint64_t v8 = a2 - v6;
      if (v7 && v5[2] >= a2) {
        break;
      }
      BOOL v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    uint64_t v13 = v5[7];
    BOOL v14 = (_OWORD *)(v13 + 16 * v8);
    if (!v13) {
      BOOL v14 = v5 + 5;
    }
    *(_OWORD *)a3 = *v14;
    uint64_t v15 = v5[4];
    if (v15) {
      uint64_t v11 = (void *)(v15 + 8 * (a2 - v5[1]));
    }
    else {
      uint64_t v11 = v5 + 3;
    }
  }
  else
  {
LABEL_6:
    double HorizontalAdvance = CGPDFAdvancesGetHorizontalAdvance(a1, a2);
    uint64_t v10 = *(void *)(a1 + 2072);
    *(double *)a3 = HorizontalAdvance * 0.5;
    *(void *)(a3 + ++*(_DWORD *)(result + 8) = v10;
    uint64_t v11 = (void *)(a1 + 2064);
  }
  return *(double *)v11;
}

uint64_t CGPDFAdvancesValidate(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 2056);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    do
    {
      BOOL v5 = (uint64_t *)v2;
      uint64_t result = validate_subset(72, v4++, v2, v3);
      uint64_t v2 = *v5;
      uint64_t v3 = (uint64_t)v5;
    }
    while (*v5);
  }
  uint64_t v6 = *(void *)(v1 + 2080);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = (uint64_t *)v6;
      uint64_t result = validate_subset(86, v8++, v6, v7);
      uint64_t v6 = *v9;
      uint64_t v7 = (uint64_t)v9;
    }
    while (*v9);
  }
  return result;
}

uint64_t validate_subset(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *(void *)(a3 + 8);
  if (v8 <= 0xFF)
  {
    uint64_t result = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s: subset %zu (%c): first = %zu; last = %zu\n",
               "CGPDFAdvancesValidate",
               a2,
               result,
               *(void *)(a3 + 8),
               *(void *)(a3 + 16));
    unint64_t v8 = *(void *)(a3 + 8);
  }
  unint64_t v9 = *(void *)(a3 + 16);
  if (v8 > v9) {
    uint64_t result = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s: subset %zu (%c): first = %zu; last = %zu\n",
  }
               "CGPDFAdvancesValidate",
               a2,
               v7,
               v8,
               v9);
  if (a4)
  {
    unint64_t v10 = *(void *)(a4 + 16);
    if (v10 >= *(void *)(a3 + 8)) {
      return fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s: subset %zu (%c): first = %zu, last = %zu; subset %zu (%c): first = %zu, last = %zu\n",
    }
               "CGPDFAdvancesValidate",
               a2 - 1,
               v7,
               *(void *)(a4 + 8),
               v10,
               a2,
               v7,
               *(void *)(a3 + 8),
               *(void *)(a3 + 16));
  }
  return result;
}

uint64_t CGPDFAdvancesPrint(uint64_t a1, FILE *__stream)
{
  fwrite("Subset 0:\n", 0xAuLL, 1uLL, __stream);
  for (uint64_t i = 0; i != 256; ++i)
    uint64_t result = fprintf(__stream, "%lu: %g\n", i, *(double *)(a1 + 8 * i));
  uint64_t v6 = *(void **)(a1 + 2056);
  if (v6)
  {
    uint64_t v7 = 1;
    do
    {
      uint64_t v8 = v7 + 1;
      uint64_t result = print_subset(__stream, 72, v6, v7);
      uint64_t v6 = (void *)*v6;
      uint64_t v7 = v8;
    }
    while (v6);
  }
  unint64_t v9 = *(void **)(a1 + 2080);
  if (v9)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      uint64_t result = print_subset(__stream, 86, v9, v10);
      unint64_t v9 = (void *)*v9;
      uint64_t v10 = v11;
    }
    while (v9);
  }
  return result;
}

uint64_t print_subset(FILE *a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v5 = a2;
  uint64_t result = fprintf(a1, "Subset %zu (%c):\n", a4, a2);
  uint64_t v11 = a3[4];
  if (v5 == 72)
  {
    unint64_t v12 = a3[1];
    if (v11)
    {
      for (; v12 <= a3[2]; ++v12)
        uint64_t result = fprintf(a1, "%zu: %g\n", v12, *(double *)(a3[4] - 8 * a3[1] + 8 * v12));
    }
    else
    {
      return fprintf(a1, "%zu - %zu: %g\n");
    }
  }
  else if (v11)
  {
    unint64_t v13 = a3[1];
    if (v13 <= a3[2])
    {
      uint64_t v14 = 16 * v13;
      do
      {
        uint64_t v15 = a3[1];
        double v16 = *(double *)(a3[4] - 8 * v15 + 8 * v13);
        uint64_t v17 = (double *)(a3[7] - 16 * v15 + v14);
        uint64_t result = fprintf(a1, "%zu: %g (%g %g)\n", v13++, v16, *v17, v17[1]);
        v14 += 16;
      }
      while (v13 <= a3[2]);
    }
  }
  else
  {
    if (a3[7]) {
      _CGHandleAssert("print_subset", 233, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Text/Advances/CGPDFAdvances.c", "s->offsets == NULL", "NULL offsets", v8, v9, v10, v18);
    }
    return fprintf(a1, "%zu - %zu: %g (%g %g)\n");
  }
  return result;
}

void CGColorConversionInfoShowSteps(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void show_steps(void *cf, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!cf) {
    goto LABEL_9;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (CGColorConversionInfoGetTypeID_predicate != -1) {
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
  }
  if (v10 == kCGColorConverterRuntimeID
    && (uint64_t color_conversion_step_info = create_color_conversion_step_info(cf, a2)) != 0)
  {
    unint64_t v12 = (const void *)color_conversion_step_info;
    CGLog(4, (uint64_t)"%@", a3, a4, a5, a6, a7, a8, color_conversion_step_info);
    CFRelease(v12);
  }
  else
  {
LABEL_9:
    CGLog(4, (uint64_t)"Nothing to show for <%p> CGColorConversionInfo", a3, a4, a5, a6, a7, a8, (char)cf);
  }
}

uint64_t create_color_conversion_step_info(void *a1, unsigned int a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  _OWORD v11[2] = __create_color_conversion_step_info_block_invoke;
  void v11[3] = &unk_1E52B2338;
  v11[4] = &v13;
  v11[5] = a1;
  unsigned int v12 = a2;
  v9[4] = &v13;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  void v10[2] = __create_color_conversion_step_info_block_invoke_2;
  _OWORD v10[3] = &unk_1E52B2360;
  void v10[4] = &v13;
  void v8[4] = &v13;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __create_color_conversion_step_info_block_invoke_3;
  _OWORD v9[3] = &unk_1E52B2388;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = __create_color_conversion_step_info_block_invoke_4;
  void v8[3] = &unk_1E52B23B0;
  if (CGColorConversionInfoIterateFunctionsWithCallbacks(a1, a2, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, 2u, 0))
  {
    uint64_t v2 = v14;
    CFStringRef v3 = (const __CFString *)v14[3];
    if (v3)
    {
      CFIndex Length = CFStringGetLength(v3);
      uint64_t v2 = v14;
      if (Length >= 1)
      {
        CFStringAppend((CFMutableStringRef)v14[3], @"*********************************************************************************\n");
        uint64_t v2 = v14;
      }
    }
  }
  else
  {
    fwrite("CGColorConversionInfoIterateFunctionsWithCallbacks failed!\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    uint64_t v2 = v14;
    int v5 = (const void *)v14[3];
    if (v5)
    {
      CFRelease(v5);
      uint64_t v2 = v14;
    }
    v2[3] = 0;
  }
  uint64_t v6 = v2[3];
  _Block_object_dispose(&v13, 8);
  return v6;
}

__CFString *__create_color_conversion_step_info_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFAllocatorRef v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFStringCreateMutable(v6, 0);
  uint64_t result = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    CFStringAppend(result, @"\n*************************************************************************\n");
    uint64_t v8 = *(unsigned int *)(a1 + 48);
    if (v8 > 2) {
      uint64_t v9 = "(?)";
    }
    else {
      uint64_t v9 = off_1E52B23F0[v8];
    }
    CFStringAppendFormat(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0, @"CGColorConversionInfo show steps for %s\n", v9);
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @"*************************************************************************\n");
    CFStringRef v10 = CFCopyDescription(*(CFTypeRef *)(a1 + 40));
    CFStringAppendFormat(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0, @"CGColorConversionInfo info:\n %@", v10);
    CFRelease(v10);
    uint64_t v11 = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v12 = *(void *)(a2 + 4);
    uint64_t v13 = *(void *)(a2 + 12);
    uint64_t v14 = *(void *)(a2 + 20);
    uint64_t v15 = *(void *)(a2 + 28);
    uint64_t v16 = *(void *)(a2 + 36);
    uint64_t v17 = *(void *)(a2 + 44);
    CFStringAppendFormat(v11, 0, @"    %d stages\n", v12);
    CFStringAppendFormat(v11, 0, @"    %d input components\n", v13);
    CFStringAppendFormat(v11, 0, @"    %d output components\n", v14);
    CFStringAppendFormat(v11, 0, @"    %d TRCs\n", v15);
    CFStringAppendFormat(v11, 0, @"    %d Matrices\n", v16);
    CFStringAppendFormat(v11, 0, @"    %d NxM Transforms\n", v17);
    MutableCopCGFloat y = CFDictionaryCreateMutableCopy(0, 0, a3);
    if (MutableCopy)
    {
      uint64_t v19 = MutableCopy;
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"com.apple.cmm.ProfileSequence");
      if (Value)
      {
        CFArrayRef v21 = Value;
        CFTypeID v22 = CFGetTypeID(Value);
        if (v22 == CFArrayGetTypeID())
        {
          CFArrayRef v23 = CFArrayCreateMutableCopy(0, 0, v21);
          if (v23)
          {
            CFArrayRef v24 = v23;
            CFIndex Count = CFArrayGetCount(v23);
            if (Count)
            {
              CFIndex v26 = Count;
              CFIndex v27 = 0;
              CFIndex v28 = &unk_1E8F9C000;
              uint64_t v29 = (uint64_t (**)(void))&unk_1E8F9C000;
              do
              {
                ValueAtIndedouble x = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, v27);
                if (ValueAtIndex)
                {
                  CFDictionaryRef v31 = ValueAtIndex;
                  CFTypeID v32 = CFGetTypeID(ValueAtIndex);
                  if (v32 == CFDictionaryGetTypeID())
                  {
                    CFDictionaryRef v33 = CFDictionaryCreateMutableCopy(0, 0, v31);
                    if (v33)
                    {
                      size_t v34 = v33;
                      uint64_t v35 = CFDictionaryGetValue(v33, @"ColorSyncProfile");
                      if (v35)
                      {
                        uint64_t v36 = v35;
                        if (v28[438] != -1) {
                          dispatch_once(&copy_hints_description_cglibrarypredicate, &__block_literal_global_2896);
                        }
                        uint64_t v37 = ((uint64_t (**)(const void *))v29)[437](v36);
                        if (v37)
                        {
                          uint64_t v38 = (const void *)v37;
                          uint64_t v39 = v28;
                          CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
                          CFStringAppendFormat(Mutable, 0, @"<%p> %@", v36, v38);
                          int64_t v41 = Mutable;
                          CFIndex v28 = v39;
                          uint64_t v29 = (uint64_t (**)(void))&unk_1E8F9C000;
                          CFDictionarySetValue(v34, @"ColorSyncProfile", v41);
                          CFRelease(v38);
                        }
                      }
                      CFArraySetValueAtIndex(v24, v27, v34);
                      CFRelease(v34);
                    }
                  }
                }
                ++v27;
              }
              while (v26 != v27);
            }
            CFDictionarySetValue(v19, @"com.apple.cmm.ProfileSequence", v24);
            CFRelease(v24);
          }
        }
      }
      CFStringRef v42 = CFCopyDescription(v19);
      CFRelease(v19);
    }
    else
    {
      CFStringRef v42 = 0;
    }
    CFStringAppendFormat(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0, @"ColorSync Profile Sequence info:\n%@\n", v42);
    CFRelease(v42);
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @"----------------------------------------\n");
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @"               STAGES \n");
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @"----------------------------------------\n");
    return (__CFString *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 0);
  }
  return result;
}

uint64_t __create_color_conversion_step_info_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v8 = *(void *)(a2 + 52);
  CFStringAppendFormat(v7, 0, @"Stage = %ld, %ld TRCs\n", a3, a4);
  if (a4 >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      float v27 = 0.0;
      long long v25 = 0u;
      long long v26 = 0u;
      CGColorTRCGetFunction(*(void *)(v8 + 8 * *(void *)(a5 + 8 * v9)), (uint64_t)&v25);
      uint64_t v10 = *(void *)(v8 + 8 * *(void *)(a5 + 8 * v9));
      if (CGColorTRCGetGammaID_cglibrarypredicate != -1) {
        dispatch_once(&CGColorTRCGetGammaID_cglibrarypredicate, &__block_literal_global_8);
      }
      unsigned int v11 = CGColorTRCGetGammaID_f(v10);
      int v12 = v25;
      BOOL v14 = v25 < 5 || (v25 - 6) < 5;
      if (v25 == -1) {
        CFStringAppend(v7, @"kCGColorTRCParametricInv709_1886_EOTF_Type: handled\n");
      }
      if (v11 >= 0x12) {
        __assert_rtn("gamma_id_by_name", "CGColorConversionInfoShow.c", 228, "0");
      }
      uint64_t v15 = "NO";
      if (v14) {
        uint64_t v15 = "YES";
      }
      CFStringAppendFormat(v7, 0, @"    TRC channel %d --> TRCs[%ld], parametridouble c = %s gammaID = %s\n", v9, *(void *)(a5 + 8 * v9), v15, off_1E52B2408[v11]);
      char Properties = CGColorFunctionGetProperties(*(const void **)(v8 + 8 * *(void *)(a5 + 8 * v9)));
      switch(v12)
      {
        case 0:
          CFStringAppendFormat(v7, 0, @"\t\tType0: Y = X^% 3.10f \n", *((float *)&v25 + 1), v18, v19, v20, v21, v22, v23, v24);
          break;
        case 1:
          CFStringAppendFormat(v7, 0, @"\t\tType1: Y = (%g*X+%g)^%g [X >= %g],  Y = 0 [X < %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *((float *)&v25 + 1), (float)((float)-*((float *)&v25 + 3) / *((float *)&v25 + 2)), (float)((float)-*((float *)&v25 + 3) / *((float *)&v25 + 2)), v22, v23, v24);
          break;
        case 2:
          CFStringAppendFormat(v7, 0, @"\t\tType2: Y = (%g*X+%g)^%g + % 3.10f [X >= %g],  Y = %g [X < %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *((float *)&v25 + 1), *(float *)&v26, (float)((float)-*((float *)&v25 + 3) / *((float *)&v25 + 2)), *(float *)&v26, (float)((float)-*((float *)&v25 + 3) / *((float *)&v25 + 2)), v24);
          break;
        case 3:
          CFStringAppendFormat(v7, 0, @"\t\tType3: Y = (%g*X+%g)^%g [X >= %g],  Y = %g*X [X < %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *((float *)&v25 + 1), *((float *)&v26 + 1), *(float *)&v26, *((float *)&v26 + 1), v23, v24);
          break;
        case 4:
          CFStringAppendFormat(v7, 0, @"\t\tType4: Y = (%g*X+%g)^%g + %g [X >= %g], Y = %g*X + %g [X < %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *((float *)&v25 + 1), *((float *)&v26 + 2), *((float *)&v26 + 1), *(float *)&v26, *((float *)&v26 + 3), *((float *)&v26 + 1));
          break;
        case 5:
          CFStringAppendFormat(v7, 0, @"\t\tTable: entries = %zu\n", *(void *)((char *)&v25 + 4));
          CFStringAppendFormat(v7, 0, @"\t\t\tColorSyncBoundaryExtension neg: slope = %g intercept = %g\n", *((float *)&v26 + 3), v27);
          CFStringAppendFormat(v7, 0, @"\t\t\tColorSyncBoundaryExtension pos: slope = %g intercept = %g\n", *((float *)&v26 + 1), *((float *)&v26 + 2), v19, v20, v21, v22, v23, v24);
          break;
        case 6:
          CFStringAppendFormat(v7, 0, @"\t\tPQ_EOTF_Type: Y = Reference_PQ_EOTF(X)  [a = %g, CGFloat b = %g, c = %g, d = %g, e = %g, f = %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), *((float *)&v26 + 3), v23, v24);
          break;
        case 7:
          CFStringAppendFormat(v7, 0, @"\t\tPQ_InvEOTF_Type: Y = Reference_PQ_InvEOTF(X)  [a = %g, CGFloat b = %g, c = %g, d = %g, e = %g, f = %g, g = %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), *((float *)&v26 + 3), v27, v24);
          break;
        case 8:
          CFStringAppendFormat(v7, 0, @"\t\tHLG_InvOETF_Type: Y = Reference_HLG_InvOETF(X)  [a = %g, CGFloat b = %g, c = %g, d = %g, e = %g, f = %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), *((float *)&v26 + 3), v23, v24);
          break;
        case 9:
          CFStringAppendFormat(v7, 0, @"\t\tHLG_OETF_Type: Y = Reference_HLG_OETF(X)  [a = %g, CGFloat b = %g, c = %g, d = %g e = %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), v22, v23, v24);
          break;
        case 10:
          CFStringAppendFormat(v7, 0, @"\t\tEXRToneMap_Type: Y = EXR Tone Mapping Gamma(X)  [defog = %g, exposure_scale = %g, kneeLow = %g, kneeHigh = %g, intermediate_gammdouble a = %g, intensity_scale = %g]\n", *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), *((float *)&v26 + 3), v23, v24);
          break;
        default:
          break;
      }
      append_properties_info(v7, Properties);
      append_range_info(v7, *(const void **)(v8 + 8 * *(void *)(a5 + 8 * v9++)));
    }
    while (a4 != v9);
  }
  return 1;
}

uint64_t __create_color_conversion_step_info_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFAllocatorRef v6 = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v7 = *(void *)(a2 + 60);
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = v13;
  CGColorMatrixGetMatrix(*(void *)(v7 + 8 * a4), v13);
  char Properties = CGColorFunctionGetProperties(*(const void **)(v7 + 8 * a4));
  CFStringAppendFormat(v6, 0, @"Stage = %ld, matrix indedouble x = %ld\n", a3, a4);
  for (uint64_t i = 0; i != 3; ++i)
  {
    CFStringAppend(v6, @"\t");
    for (uint64_t j = 0; j != 16; j += 4)
      CFStringAppendFormat(v6, 0, @"% 3.10f ", *(float *)((char *)v8 + j));
    CFStringAppend(v6, @"\n");
    ++v8;
  }
  append_properties_info(v6, Properties);
  append_range_info(v6, *(const void **)(v7 + 8 * a4));
  return 1;
}

uint64_t __create_color_conversion_step_info_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFAllocatorRef v6 = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v7 = *(void *)(a2 + 68);
  memset(v37, 0, 36);
  CGColorNxMTransformGetTransform(*(void *)(v7 + 8 * a4), (uint64_t)v37);
  char Properties = CGColorFunctionGetProperties(*(const void **)(v7 + 8 * a4));
  unsigned int v9 = v37[0];
  uint64_t v10 = "?";
  if (LODWORD(v37[0]) <= 0xB) {
    uint64_t v10 = off_1E52B2498[LODWORD(v37[0])];
  }
  CFStringAppendFormat(v6, 0, @"Stage = %ld, %zu inputs x %zu outputs %s indedouble x = %ld\n", a3, *(_OWORD *)((char *)v37 + 4), v10, a4);
  switch(v9)
  {
    case 7u:
      int v11 = *(_DWORD *)(*(void *)((char *)&v37[1] + 12) + 24);
      int v12 = "HLG Inverted OOTF";
      if (v11 != 1) {
        int v12 = "?";
      }
      if (v11) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = "HLG OOTF";
      }
      CFStringAppendFormat(v6, 0, @"\tHLG Luminance scaling (%s) params: \n\t\tgammdouble a = % 3.10f gain = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n", v13, **(float **)((char *)&v37[1] + 12), *(float *)(*(void *)((char *)&v37[1] + 12) + 4), *(float *)(*(void *)((char *)&v37[1] + 12) + 8), *(float *)(*(void *)((char *)&v37[1] + 12) + 12), *(float *)(*(void *)((char *)&v37[1] + 12) + 16), *(float *)(*(void *)((char *)&v37[1] + 12) + 20));
      break;
    case 8u:
      CFStringAppendFormat(v6, 0, @"\tHLG Scene Referred Mapping params: \n\t\tgammdouble a = % 3.10f gain = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n", **(float **)((char *)&v37[1] + 12), *(float *)(*(void *)((char *)&v37[1] + 12) + 4), *(float *)(*(void *)((char *)&v37[1] + 12) + 8), *(float *)(*(void *)((char *)&v37[1] + 12) + 12), *(float *)(*(void *)((char *)&v37[1] + 12) + 16), *(float *)(*(void *)((char *)&v37[1] + 12) + 20));
      break;
    case 9u:
      double v14 = **(float **)((char *)&v37[1] + 12);
      double v15 = *(float *)(*(void *)((char *)&v37[1] + 12) + 4);
      double v16 = *(float *)(*(void *)((char *)&v37[1] + 12) + 8);
      double v17 = *(float *)(*(void *)((char *)&v37[1] + 12) + 12);
      double v35 = *(float *)(*(void *)((char *)&v37[1] + 12) + 64);
      double v36 = *(float *)(*(void *)((char *)&v37[1] + 12) + 68);
      double v33 = *(float *)(*(void *)((char *)&v37[1] + 12) + 56);
      double v34 = *(float *)(*(void *)((char *)&v37[1] + 12) + 60);
      double v31 = *(float *)(*(void *)((char *)&v37[1] + 12) + 40);
      double v32 = *(float *)(*(void *)((char *)&v37[1] + 12) + 44);
      double v29 = *(float *)(*(void *)((char *)&v37[1] + 12) + 32);
      double v30 = *(float *)(*(void *)((char *)&v37[1] + 12) + 36);
      double v27 = *(float *)(*(void *)((char *)&v37[1] + 12) + 24);
      double v28 = *(float *)(*(void *)((char *)&v37[1] + 12) + 28);
      double v25 = *(float *)(*(void *)((char *)&v37[1] + 12) + 16);
      double v26 = *(float *)(*(void *)((char *)&v37[1] + 12) + 20);
      CFStringRef v18 = @"\tPQ tone mapping params:\n\t\tparams->pq_eotf.m1 = % 3.10f\n\t\tparams->pq_eotf.m2 = % 3.10f\n\n\t\tparams->pq_eotf.c1 = % 3.10f\n\t\tparams->pq_eotf.c2 = % 3.10f\n\t\tparams->pq_eotf.c3 = % 3.10f\n\n\t\tparams->pq_eetf.masterPeakInv = % 3.10f\n\t\tparams->pq_eetf.masterBlackInv = % 3.10f\n\t\tparams->pq_eetf.maxLum = % 3.10f\n\t\tparams->pq_eetf.minLum = % 3.10f\n\t\tparams->pq_eetf.KneeStart = % 3.10f\n\t\tparams->pq_eetf.KneeStartScale = % 3.10f\n\t\tparams->pq_eetf.optical_scale = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n";
      goto LABEL_14;
    case 0xAu:
      double v14 = **(float **)((char *)&v37[1] + 12);
      double v15 = *(float *)(*(void *)((char *)&v37[1] + 12) + 4);
      double v16 = *(float *)(*(void *)((char *)&v37[1] + 12) + 8);
      double v17 = *(float *)(*(void *)((char *)&v37[1] + 12) + 12);
      double v28 = *(float *)(*(void *)((char *)&v37[1] + 12) + 32);
      double v29 = *(float *)(*(void *)((char *)&v37[1] + 12) + 36);
      double v26 = *(float *)(*(void *)((char *)&v37[1] + 12) + 24);
      double v27 = *(float *)(*(void *)((char *)&v37[1] + 12) + 28);
      double v25 = *(float *)(*(void *)((char *)&v37[1] + 12) + 20);
      CFStringRef v18 = @"\tReference White Tone Mapping params:\n\t\tluminance scale = % 3.10f\n\t\tadjusted source headroom = % 3.10f\n\t\ttarget headroom = % 3.10f\n\t\ttarget reference white = % 3.10f\n\t\tcofficient a = % 3.10f\n\t\tcofficient b = % 3.10f\n\t\tcofficient c = % 3.10f\n\t\tcofficient d = % 3.10f\n\t\tcofficient e = % 3.10f\n";
      goto LABEL_14;
    case 0xBu:
      double v14 = **(float **)((char *)&v37[1] + 12);
      double v15 = *(float *)(*(void *)((char *)&v37[1] + 12) + 4);
      double v16 = *(float *)(*(void *)((char *)&v37[1] + 12) + 8);
      double v17 = *(float *)(*(void *)((char *)&v37[1] + 12) + 12);
      double v28 = *(double *)(*(void *)((char *)&v37[1] + 12) + 28);
      *(void *)&double v29 = *(void *)((char *)&v37[1] + 12) + 36;
      double v26 = *(float *)(*(void *)((char *)&v37[1] + 12) + 20);
      double v27 = *(float *)(*(void *)((char *)&v37[1] + 12) + 24);
      double v25 = *(float *)(*(void *)((char *)&v37[1] + 12) + 16);
      CFStringRef v18 = @"\tFlex Luminance Scaling params:\n\t\tsource headroom = % 3.10f\n\t\ttarget headroom = % 3.10f\n\t\tcoefficients[0] = % 3.10f\n\t\tcoefficients[1] = % 3.10f\n\t\tcoefficients[2] = % 3.10f\n\t\tcoefficients[3] = % 3.10f\n\t\tcoefficients[4] = % 3.10f\n\t\tFlexGTCTableCount = %zu\n\t\tFlexGTCTable = %p\n";
LABEL_14:
      CFStringAppendFormat(v6, 0, v18, *(void *)&v14, *(void *)&v15, *(void *)&v16, *(void *)&v17, *(void *)&v25, *(void *)&v26, *(void *)&v27, *(void *)&v28, *(void *)&v29, *(void *)&v30, *(void *)&v31, *(void *)&v32, *(void *)&v33, *(void *)&v34, *(void *)&v35, *(void *)&v36);
      break;
    case 0xCu:
      CFStringAppendFormat(v6, 0, @"\tLuminance scaling params: \n\t\tgammdouble a = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n", **(float **)((char *)&v37[1] + 12), *(float *)(*(void *)((char *)&v37[1] + 12) + 4), *(float *)(*(void *)((char *)&v37[1] + 12) + 8), *(float *)(*(void *)((char *)&v37[1] + 12) + 12), *(float *)(*(void *)((char *)&v37[1] + 12) + 16));
      break;
    default:
      if (v9 > 6) {
        CFStringAppendFormat(v6, 0, @"\t\tUnknown format\n\n", v20, v21, v22, v23, v24);
      }
      else {
        CFStringAppendFormat(v6, 0, @"\t\tGrid point count = %zu\n\n", *(void *)((char *)&v37[1] + 4), v21, v22, v23, v24);
      }
      break;
  }
  append_properties_info(v6, Properties);
  append_range_info(v6, *(const void **)(v7 + 8 * a4));
  return 1;
}

void append_properties_info(__CFString *a1, char a2)
{
  uint64_t v2 = "Yes";
  if (a2) {
    CFStringRef v3 = "Yes";
  }
  else {
    CFStringRef v3 = "No";
  }
  if ((a2 & 2) != 0) {
    uint64_t v4 = "Yes";
  }
  else {
    uint64_t v4 = "No";
  }
  if ((a2 & 4) != 0) {
    int v5 = "Yes";
  }
  else {
    int v5 = "No";
  }
  if ((a2 & 0x10) != 0) {
    CFAllocatorRef v6 = "Yes";
  }
  else {
    CFAllocatorRef v6 = "No";
  }
  if ((a2 & 8) == 0) {
    uint64_t v2 = "No";
  }
  CFStringAppendFormat(a1, 0, @"\t\tProperties:\n\t\t\t\tkCGColorFunctionSignedReflectionTRC   = %s\n\t\t\t\tkCGColorFunctionOutputClamp           = %s\n\t\t\t\tkCGColorFunctionInputClamp            = %s\n\t\t\t\tkCGColorMatrixOnlyFirstChannelOutput  = %s\n\t\t\t\tkCGColorMatrixOnlyFirstChannelInput   = %s\n\n", v3, v4, v5, v6, v2);
}

void append_range_info(__CFString *a1, const void *a2)
{
  float InputRange = CGColorFunctionGetInputRange(a2);
  float v6 = v5;
  float OutputRange = CGColorFunctionGetOutputRange(a2);
  float v9 = v8;
  CFStringAppendFormat(a1, 0, @"\t\tInput range: [");
  if (InputRange == -3.4028e38) {
    CFStringAppendFormat(a1, 0, @"-FLT_MAX,");
  }
  else {
    CFStringAppendFormat(a1, 0, @"%+g,", InputRange);
  }
  if (v6 == 3.4028e38) {
    CFStringAppendFormat(a1, 0, @" +FLT_MAX]", v10);
  }
  else {
    CFStringAppendFormat(a1, 0, @" %+g]", v6);
  }
  CFStringAppendFormat(a1, 0, @" Output range: [");
  if (OutputRange == -3.4028e38) {
    CFStringAppendFormat(a1, 0, @"-FLT_MAX,", v11);
  }
  else {
    CFStringAppendFormat(a1, 0, @"%+g,", OutputRange);
  }
  if (v9 == 3.4028e38)
  {
    CFStringAppendFormat(a1, 0, @" +FLT_MAX]\n");
  }
  else
  {
    CFStringAppendFormat(a1, 0, @" %+g]\n", v9);
  }
}

uint64_t (*__copy_hints_description_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  uint64_t result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    uint64_t result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCopyDescriptionString");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_2908;
  }
  copy_hints_description_f = v1;
  return result;
}

uint64_t colorsync_smart_null_2908()
{
  return 0;
}

void CGColorConversionInfoShowCompactedSteps(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void CGColorConversionInfoShowSimplifiedSteps(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void CGColorConversionInfoDumpStepsToFile(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void dump_steps_to_file(void *cf, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a4;
  float v9 = (char *)a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    goto LABEL_14;
  }
  CFTypeID v12 = CFGetTypeID(cf);
  if (CGColorConversionInfoGetTypeID_predicate != -1) {
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1194);
  }
  if (v12 == kCGColorConverterRuntimeID
    && (uint64_t color_conversion_step_info = create_color_conversion_step_info(cf, a2)) != 0)
  {
    CFStringRef v14 = (const __CFString *)color_conversion_step_info;
    if (v9 && strlen(v9) > 2)
    {
      bzero(__str, 0x401uLL);
      if (!strncmp(v9, "*/", 2uLL))
      {
        if (CGGetTempDirPath_predicate != -1) {
          dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_119);
        }
        double v29 = v9 + 2;
        float v9 = __str;
        snprintf(__str, 0x400uLL, "%s%s", &CGGetTempDirPath_tempDirPath, v29);
      }
      CStringPtr = CFStringGetCStringPtr(v14, 0x8000100u);
      if (CStringPtr)
      {
        double v16 = CStringPtr;
        double v17 = 0;
      }
      else
      {
        CFIndex Length = CFStringGetLength(v14);
        CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        double v17 = (char *)malloc_type_calloc(MaximumSizeForEncoding, 1uLL, 0x3DB7C784uLL);
        if (v17 && CFStringGetCString(v14, v17, MaximumSizeForEncoding, 0x8000100u)) {
          double v16 = v17;
        }
        else {
          double v16 = "";
        }
      }
      double v26 = fopen(v9, "w");
      if (v26)
      {
        double v27 = v26;
        size_t v28 = strlen(v16);
        fwrite(v16, 1uLL, v28, v27);
        fclose(v27);
      }
      if (v17) {
        free(v17);
      }
    }
    CGLog(1, (uint64_t)"%s %s %s", a3, a4, a5, a6, a7, a8, v8);
    CFRelease(v14);
  }
  else
  {
LABEL_14:
    CGLog(1, (uint64_t)"Nothing to show for <%p> CGColorConversionInfo", a3, a4, a5, a6, a7, a8, (char)cf);
    CGLog(1, (uint64_t)"%s %s %s", v18, v19, v20, v21, v22, v23, v8);
  }
}

void CGColorConversionInfoDumpCompactedStepsToFile(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void CGColorConversionInfoDumpSimplifiedStepsToFile(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

BOOL has_crypt_filter(CGPDFDictionary *a1, char a2)
{
  if (a2) {
    return 0;
  }
  value[5] = v2;
  value[6] = v3;
  __s1 = 0;
  value[0] = 0;
  if (!CGPDFDictionaryGetObject(a1, "Filter", value) || !value[0]) {
    return 0;
  }
  int v5 = *((_DWORD *)value[0] + 2);
  if (v5 != 7)
  {
    if (v5 == 5) {
      return strcmp(*((const char **)value[0] + 4), "Crypt") == 0;
    }
    return 0;
  }
  float v6 = (CGPDFArray *)*((void *)value[0] + 4);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *((void *)v6 + 2);
  if (!v7) {
    return 0;
  }
  size_t v8 = 0;
  while (!CGPDFArrayGetName(v6, v8, (const char **)&__s1) || strcmp(__s1, "Crypt"))
  {
    BOOL result = 0;
    if (v7 == ++v8) {
      return result;
    }
  }
  return 1;
}

__CFArray *pdf_filter_chain_create_description(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6 && !*(unsigned char *)(a1 + 41) && *(void *)(v6 + 40) && !has_crypt_filter(*(CGPDFDictionary **)(a1 + 48), a2)) {
      CGCFArrayAppendInteger(Mutable, 10);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t filter_object = get_filter_object(v5, a2);
  if (filter_object)
  {
    CGPDFReal value = 0;
    int v8 = *(_DWORD *)(filter_object + 8);
    if (v8 == 5)
    {
      int v13 = filter_kind_from_name(*(const char **)(filter_object + 32));
      if (v13) {
        CGCFArrayAppendInteger(Mutable, v13);
      }
    }
    else if (v8 == 7)
    {
      float v9 = *(CGPDFArray **)(filter_object + 32);
      if (v9)
      {
        uint64_t v10 = *((void *)v9 + 2);
        if (v10)
        {
          for (size_t i = 0; i != v10; ++i)
          {
            if (!CGPDFArrayGetName(v9, i, (const char **)&value)) {
              break;
            }
            int v12 = filter_kind_from_name(value);
            if (v12) {
              CGCFArrayAppendInteger(Mutable, v12);
            }
          }
        }
      }
    }
  }
  return Mutable;
}

__n128 CGUpdateConvolveKernelRed(uint64_t a1)
{
  if (redConvolveKernel) {
    free((void *)redConvolveKernel);
  }
  uint64_t v2 = (char *)malloc_type_malloc(0x26uLL, 0x72F94193uLL);
  redConvolveKernel = (uint64_t)v2;
  uint64_t v3 = *(void *)(a1 + 30);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
  *((__n128 *)v2 + 1) = result;
  *(void *)(v2 + 30) = v3;
  return result;
}

__n128 CGUpdateConvolveKernelGreen(uint64_t a1)
{
  if (greenConvolveKernel) {
    free((void *)greenConvolveKernel);
  }
  uint64_t v2 = (char *)malloc_type_malloc(0x26uLL, 0x51BB910DuLL);
  greenConvolveKernel = (uint64_t)v2;
  uint64_t v3 = *(void *)(a1 + 30);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
  *((__n128 *)v2 + 1) = result;
  *(void *)(v2 + 30) = v3;
  return result;
}

__n128 CGUpdateConvolveKernelBlue(uint64_t a1)
{
  if (blueConvolveKernel) {
    free((void *)blueConvolveKernel);
  }
  uint64_t v2 = (char *)malloc_type_malloc(0x26uLL, 0x307CD5C0uLL);
  blueConvolveKernel = (uint64_t)v2;
  uint64_t v3 = *(void *)(a1 + 30);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
  *((__n128 *)v2 + 1) = result;
  *(void *)(v2 + 30) = v3;
  return result;
}

__n128 CGUpdateConvolveKernelMonochrome(uint64_t a1)
{
  if (monochromeConvolveKernel) {
    free((void *)monochromeConvolveKernel);
  }
  uint64_t v2 = (char *)malloc_type_malloc(0x26uLL, 0xD6C5F0CFuLL);
  monochromeConvolveKernel = (uint64_t)v2;
  uint64_t v3 = *(void *)(a1 + 30);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
  *((__n128 *)v2 + 1) = result;
  *(void *)(v2 + 30) = v3;
  return result;
}

const void *__CGSScanConvolveAndIntegrateRGB_block_invoke()
{
  BOOL v9 = 0;
  if (get_BOOLean_property("CGFontUseCustomConvolveKernels", copy_application_property_value, &v9)) {
    BOOL v0 = !v9;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0)
  {
    if (redConvolveKernel) {
      CGSScanConvolveAndIntegrateRGB_redKernel = redConvolveKernel;
    }
    if (greenConvolveKernel) {
      CGSScanConvolveAndIntegrateRGB_greenKernel = greenConvolveKernel;
    }
    if (blueConvolveKernel) {
      CGSScanConvolveAndIntegrateRGB_blueKernel = blueConvolveKernel;
    }
  }
  BOOL v8 = 0;
  __n128 result = get_BOOLean_property("CGFontUseMonochromeKernel", (const void *(*)(const char *))copy_local_domain_value, &v8);
  if (result && v8)
  {
    BOOL v2 = v9;
    BOOL v3 = monochromeConvolveKernel != 0;
    BOOL v4 = !v2 || !v3;
    if (v2 && v3) {
      uint64_t v5 = (__int16 *)monochromeConvolveKernel;
    }
    else {
      uint64_t v5 = mKernel;
    }
    if (v4) {
      uint64_t v6 = mKernel;
    }
    else {
      uint64_t v6 = (__int16 *)greenConvolveKernel;
    }
    if (v4) {
      uint64_t v7 = mKernel;
    }
    else {
      uint64_t v7 = (__int16 *)blueConvolveKernel;
    }
    CGSScanConvolveAndIntegrateRGB_redKernel = (uint64_t)v5;
    CGSScanConvolveAndIntegrateRGB_greenKernel = (uint64_t)v6;
    CGSScanConvolveAndIntegrateRGB_blueKernel = (uint64_t)v7;
  }
  return result;
}

uint64_t get_password(const __CFString *a1, UInt8 *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  if (Length)
  {
    CFIndex v5 = Length;
    if (Length >= 33)
    {
      pdf_error("password truncated to 32 bytes.");
      CFIndex v5 = 32;
    }
    v8.locatiouint64_t n = 0;
    v8.CFIndex length = v5;
    CFIndex Bytes = CFStringGetBytes(a1, v8, 0x600u, 0, 0, a2, 32, 0);
    if (Bytes < v5)
    {
      pdf_error("password cannot be converted to ASCII.");
      return 0;
    }
    a2[Bytes] = 0;
  }
  else
  {
    *a2 = 0;
  }
  return 1;
}

CGDataConsumerRef PDFSecurityHandlerCreateEncryptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  int v3 = a3;
  uint64_t v6 = malloc_type_calloc(1uLL, 0x30uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v6) {
    return 0;
  }
  void *v6 = a2;
  pdf_cryptor = get_pdf_cryptor(a1, v3);
  v6[5] = pdf_cryptor;
  if (!pdf_cryptor)
  {
    encryptor_close((uint64_t)v6);
    return 0;
  }
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"kCGPDFContextEncryptionCipher");
  if (Value
    && ((BOOL v9 = Value, CFEqual(Value, @"kCGPDFContextEncryptionCipherAESv2"))
     || CFEqual(v9, @"kCGPDFContextEncryptionCipherAESv3")))
  {
    _OWORD v6[3] = 16;
    *((unsigned char *)v6 + 32) = 1;
  }
  else
  {
    _OWORD v6[3] = 0;
  }

  return CGDataConsumerCreate(v6, (const CGDataConsumerCallbacks *)&PDFSecurityHandlerCreateEncryptor_callbacks);
}

char *get_pdf_cryptor(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"kCGPDFContextEncryptionCipher");
  if (Value)
  {
    int v5 = CFEqual(Value, @"kCGPDFContextEncryptionCipherAESv2");
    BOOL v6 = v5 != 0;
    uint64_t v7 = 5;
    if (v5) {
      uint64_t v7 = 9;
    }
  }
  else
  {
    BOOL v6 = 0;
    uint64_t v7 = 5;
  }
  unint64_t v8 = *(void *)(a1 + 128);
  __n128 result = (char *)malloc_type_malloc(v7 + (v8 >> 3), 0x100004077774924uLL);
  if (result)
  {
    uint64_t v10 = result;
    size_t v11 = v8 >> 3;
    memcpy(result, (const void *)(a1 + 92), v11);
    int v12 = &v10[v11];
    *(_WORD *)int v12 = a2;
    void v12[2] = BYTE2(a2);
    *(_WORD *)(v12 + 3) = 0;
    unint64_t v13 = v11 + 5;
    if (v6)
    {
      *(_DWORD *)&v10[v13] = 1416380787;
      unint64_t v13 = v11 + 9;
    }
    CGGetMD5DigestOfBytes(v15, v10, v13);
    free(v10);
    if (v6)
    {
      return (char *)CGCryptorCreateAES(v15, 0x10uLL, (_OWORD *)(a1 + 108), 1);
    }
    else
    {
      if (v13 >= 0x10) {
        size_t v14 = 16;
      }
      else {
        size_t v14 = v13;
      }
      return (char *)CGCryptorCreateRC4(v15, v14);
    }
  }
  return result;
}

void encryptor_close(uint64_t a1)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (!*(_DWORD *)(v2 + 32))
    {
      v6[0] = 0;
      v6[1] = 0;
      uint64_t v5 = 0;
      CGCryptorDrain(v2, v6, 0x10uLL, (size_t *)&v5);
      CGDataConsumerPutBytes(*(void *)a1, (uint64_t)v6, v5);
    }
    uint64_t v3 = *(void *)a1;
    if (*(void *)a1 && !*(unsigned char *)(v3 + 56))
    {
      BOOL v4 = *(void (**)(void))(v3 + 80);
      if (v4) {
        v4(*(void *)(v3 + 16));
      }
    }
    CGCryptorRelease(*(void *)(a1 + 40));
    free(*(void **)(a1 + 8));
    free((void *)a1);
  }
}

uint64_t *encryptor_flush(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if (*result)
    {
      if (!*(unsigned char *)(v1 + 56))
      {
        uint64_t v2 = *(uint64_t (**)(void))(v1 + 80);
        if (v2) {
          return (uint64_t *)v2(*(void *)(v1 + 16));
        }
      }
    }
  }
  return result;
}

size_t encryptor_write(uint64_t a1, const void *a2, size_t a3)
{
  if (!a1) {
    return 0;
  }
  size_t v3 = a3;
  size_t v6 = *(void *)(a1 + 24) + a3;
  uint64_t v7 = *(void **)(a1 + 8);
  if (*(void *)(a1 + 16) < v6)
  {
    unint64_t v8 = malloc_type_realloc(*(void **)(a1 + 8), v6, 0xD52F2160uLL);
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v8;
    if (!v8)
    {
      size_t v3 = 0;
      *(void *)(a1 + 16) = 0;
      return v3;
    }
    uint64_t v7 = v8;
    *(void *)(a1 + 16) = v6;
  }
  uint64_t v10 = 0;
  CGCryptorProcessBytes(*(void *)(a1 + 40), a2, v3, v7, v6, (size_t *)&v10);
  if (*(unsigned char *)(a1 + 32))
  {
    CGDataConsumerPutBytes(*(void *)a1, *(void *)(*(void *)(a1 + 40) + 40), 16);
    *(unsigned char *)(a1 + 32) = 0;
  }
  CGDataConsumerPutBytes(*(void *)a1, *(void *)(a1 + 8), v10);
  return v3;
}

void add_bf_range(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unint64_t *a6)
{
  if (a2 == a4)
  {
    unint64_t v8 = *a6;
    BOOL v9 = !*a6 || a3 > a5;
    if (!v9 && (*a6 & 1) == 0)
    {
      size_t v11 = (unsigned __int16 *)a6[1];
      unint64_t v12 = v8 >> 1;
      if (v8 >= 2)
      {
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v8 >> 1;
        }
        size_t v14 = (_WORD *)a6[1];
        do
        {
          _WORD *v14 = bswap32((unsigned __int16)*v14) >> 16;
          ++v14;
          --v13;
        }
        while (v13);
      }
      uint64_t v15 = *(void *)(a1 + 48);
      if (v15 && (a2 - 3) >= 0xFEu && check_dimension(a2, a3, a5))
      {
        uint64_t v16 = *(void *)(v15 + 16);
        if (!v16) {
          operator new();
        }
        cmap_bf_set_add_range(v16, a3, a5, v12, v11);
      }
    }
  }
}

uint64_t yy_stack_print(__int16 *a1, unint64_t a2)
{
  BOOL v4 = (FILE **)MEMORY[0x1E4F143C8];
  fwrite("Stack now", 9uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  while ((unint64_t)a1 <= a2)
  {
    int v5 = *a1++;
    fprintf(*v4, " %d", v5);
  }
  size_t v6 = *v4;

  return fputc(10, v6);
}

uint64_t yysyntax_error(unsigned char *a1, int a2, unsigned int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v3 = yypact[a2];
  if (v3 >= -30)
  {
    if (a3 > 0x126) {
      uint64_t v5 = 2;
    }
    else {
      uint64_t v5 = yytranslate[a3];
    }
    uint64_t v7 = yytname[v5];
    uint64_t v8 = yytnamerr(0, v7);
    long long v38 = 0u;
    long long v37 = 0u;
    int v9 = 115 - v3;
    double v36 = v7;
    strcpy(v35, "syntax error, unexpected %s");
    int v10 = -v3 & (v3 >> 31);
    if (115 - v3 >= 42) {
      int v9 = 42;
    }
    if (v10 < v9)
    {
      int v11 = 0;
      uint64_t v12 = v3;
      uint64_t v13 = &v35[27];
      uint64_t v14 = v10;
      uint64_t v15 = v9;
      unint64_t v16 = v8;
      double v17 = ", expecting %s";
      int v18 = 1;
      uint64_t v34 = v8;
      while (1)
      {
        if (v14 == 1 || v14 != yycheck[v14 + v12])
        {
          unint64_t v20 = v16;
        }
        else
        {
          if (v18 == 5)
          {
            v35[27] = 0;
            int v18 = 1;
            unint64_t v20 = v34;
            goto LABEL_21;
          }
          uint64_t v19 = yytname[v14];
          (&v36)[v18] = v19;
          unint64_t v20 = yytnamerr(0, v19) + v16;
          --v13;
          do
          {
            int v21 = *(unsigned __int8 *)v17++;
            *++uint64_t v13 = v21;
          }
          while (v21);
          ++v18;
          v11 |= v20 < v16;
          double v17 = " or %s";
        }
        ++v14;
        unint64_t v16 = v20;
        if (v14 == v15) {
          goto LABEL_21;
        }
      }
    }
    int v11 = 0;
    int v18 = 1;
    unint64_t v20 = v8;
LABEL_21:
    uint64_t v22 = 0;
    do
      uint64_t v23 = v22;
    while (v35[v22++]);
    uint64_t v6 = v23 + v20;
    BOOL v25 = __CFADD__(v23, v20);
    if (v11 | v25) {
      return -1;
    }
    if (!a1) {
      return v6;
    }
    int v27 = 0;
    for (size_t i = v35; ; i += v32)
    {
      int v29 = *i;
      *a1 = v29;
      if (v29 != 37) {
        break;
      }
      if (i[1] != 115 || v27 >= v18) {
        goto LABEL_38;
      }
      int v33 = v27 + 1;
      uint64_t v31 = yytnamerr((uint64_t)a1, (&v36)[v27]);
      uint64_t v32 = 2;
      int v27 = v33;
LABEL_40:
      a1 += v31;
    }
    if (!v29) {
      return v6;
    }
LABEL_38:
    uint64_t v31 = 1;
    uint64_t v32 = 1;
    goto LABEL_40;
  }
  return 0;
}

void yydestruct(const char *a1, int a2, void **a3)
{
  if (cmap_yydebug)
  {
    uint64_t v5 = "Deleting";
    if (a1) {
      uint64_t v5 = a1;
    }
    uint64_t v6 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s ", v5);
    uint64_t v7 = *v6;
    if (a2 >= 42) {
      fprintf(v7, "nterm %s (");
    }
    else {
      fprintf(v7, "token %s (");
    }
    fputc(41, v7);
    fputc(10, *v6);
  }
  if (a2 <= 0x27 && ((1 << a2) & 0xB000000000) != 0)
  {
    uint64_t v8 = *a3;
    free(v8);
  }
}

uint64_t yytnamerr(uint64_t a1, unsigned char *a2)
{
  if (*a2 != 34)
  {
LABEL_13:
    if (a1)
    {
      uint64_t v10 = a1 - 1;
      do
      {
        int v11 = *a2++;
        *(unsigned char *)++uint64_t v10 = v11;
      }
      while (v11);
      return v10 - a1;
    }
    else
    {
      uint64_t v12 = 0;
      while (a2[v12++])
        ;
      return v12 - 1;
    }
  }
  uint64_t v2 = 0;
  int v3 = a2;
  for (i = a2; ; int v3 = i)
  {
    int v6 = (char)*++i;
    int v5 = v6;
    char v7 = v6;
    if (v6 > 91)
    {
      if (v5 == 92)
      {
        int v9 = v3[2];
        uint64_t v8 = v3 + 2;
        if (v9 != 92) {
          goto LABEL_13;
        }
        char v7 = 92;
        size_t i = v8;
      }
      goto LABEL_10;
    }
    if (v5 == 34) {
      break;
    }
    if (v5 == 39 || v5 == 44) {
      goto LABEL_13;
    }
LABEL_10:
    if (a1) {
      *(unsigned char *)(a1 + v2) = v7;
    }
    ++v2;
  }
  if (a1) {
    *(unsigned char *)(a1 + v2) = 0;
  }
  return v2;
}

uint64_t decomposes(unsigned int a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = 0;
  __keCGFloat y = a1;
  if (a1 >= 0xA0 && a1 != 65292)
  {
    uint64_t result = (uint64_t)bsearch(&__key, &rows, 0xF0EuLL, 0xCuLL, (int (__cdecl *)(const void *, const void *))compare);
    if (result)
    {
      *a2 = *(_DWORD *)(result + 8);
      *a3 = *(_DWORD *)(result + 4);
      return 1;
    }
  }
  return result;
}

uint64_t compare(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void *PDFStreamCreateWithObjectNumber(uint64_t a1, uint64_t a2)
{
  BOOL v4 = malloc_type_calloc(1uLL, 0x50uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    *BOOL v4 = a1;
    v4[1] = a2;
    v4[3] = 0;
    v4[9] = 0;
    v4[6] = 0;
    v4[7] = 0;
    *((_WORD *)v4 + 32) = 0;
    if (*(unsigned char *)(a1 + 73)) {
      PDFStreamSetFilter((uint64_t)v4, "FlateDecode");
    }
  }
  return v4;
}

void PDFStreamSetFilter(uint64_t a1, char *__s)
{
  BOOL v4 = *(void **)(a1 + 72);
  if (v4) {
    free(v4);
  }
  if (__s)
  {
    size_t v5 = strlen(__s);
    int v6 = (char *)malloc_type_malloc(v5 + 1, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    *(void *)(a1 + 72) = v6;
    if (v6)
    {
      strcpy(v6, __s);
      *(unsigned char *)(a1 + 64) = strcmp(__s, "FlateDecode") == 0;
      return;
    }
  }
  else
  {
    *(void *)(a1 + 72) = 0;
  }
  *(unsigned char *)(a1 + 64) = 0;
}

void PDFStreamRelease(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = *(const void **)(a1 + 40);
    if (v2) {
      CFRelease(v2);
    }
    unsigned int v3 = *(const void **)(a1 + 32);
    if (v3) {
      CFRelease(v3);
    }
    BOOL v4 = *(const void **)(a1 + 48);
    if (v4) {
      CFRelease(v4);
    }
    size_t v5 = *(const void **)(a1 + 56);
    if (v5) {
      CFRelease(v5);
    }
    free(*(void **)(a1 + 72));
    free((void *)a1);
  }
}

CGDataConsumerRef PDFStreamBeginData(CGDataConsumerRef result)
{
  if (result)
  {
    CGDataConsumerRef v1 = result;
    CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    *((void *)v1 + 4) = Mutable;
    CGDataConsumerRef v3 = CGDataConsumerCreateWithCFData(Mutable);
    *((void *)v1 + 5) = v3;
    *((void *)v1 + 3) = v3;
    *((void *)v1 + 7) = 0;
    uint64_t result = *(CGDataConsumerRef *)(*(void *)v1 + 56);
    if (result && (!*((unsigned char *)v1 + 65) || *((unsigned char *)result + 136)))
    {
      uint64_t result = PDFSecurityHandlerCreateEncryptor((uint64_t)result, (uint64_t)v3, *((void *)v1 + 1));
      CGDataConsumerRef v3 = result;
      *((void *)v1 + 7) = result;
      *((void *)v1 + 3) = result;
    }
    *((void *)v1 + 6) = 0;
    if (*((unsigned char *)v1 + 64))
    {
      uint64_t result = CGDataConsumerCreateFlateEncoder(v3);
      *((void *)v1 + 6) = result;
      *((void *)v1 + 3) = result;
    }
  }
  return result;
}

uint64_t PDFStreamEndData(void *a1)
{
  CGDataConsumerClose(a1[6]);
  uint64_t result = CGDataConsumerClose(a1[7]);
  uint64_t v3 = a1[3];
  if (v3) {
    uint64_t v3 = *(void *)(v3 + 40);
  }
  a1[2] = v3;
  return result;
}

unsigned char *PDFStreamEnd(CFDataRef *a1)
{
  uint64_t v2 = (uint64_t)*a1;
  uint64_t v3 = *((void *)*a1 + 3);
  CFIndex Length = CFDataGetLength(a1[4]);
  PDFDocumentPrintf(v2, (uint64_t)"/Length %O", v5, v6, v7, v8, v9, v10, Length);
  if (a1[9]) {
    PDFDocumentPrintf((uint64_t)*a1, (uint64_t)"/Filter /%N", v11, v12, v13, v14, v15, v16, (uint64_t)a1[9]);
  }
  PDFDocumentPrintf((uint64_t)*a1, (uint64_t)">>\n", v11, v12, v13, v14, v15, v16, v46);
  PDFDocumentPrintf((uint64_t)*a1, (uint64_t)"stream\n", v17, v18, v19, v20, v21, v22, v47);
  uint64_t BytePtr = CFDataGetBytePtr(a1[4]);
  CFIndex v24 = CFDataGetLength(a1[4]);
  CGDataConsumerPutBytes(v3, (uint64_t)BytePtr, v24);
  PDFDocumentPrintf((uint64_t)*a1, (uint64_t)"\n", v25, v26, v27, v28, v29, v30, v48);
  PDFDocumentPrintf((uint64_t)*a1, (uint64_t)"endstream\n", v31, v32, v33, v34, v35, v36, v49);
  uint64_t v44 = (uint64_t)*a1;

  return PDFDocumentEndObject(v44, v37, v38, v39, v40, v41, v42, v43);
}

uint64_t CGPrivateAPIVersion()
{
  return 251723777;
}

void color_space_release(uint64_t a1, CGColorSpaceRef *a2)
{
}

atomic_uint *color_space_retain(uint64_t a1, atomic_uint *a2)
{
  uint64_t result = a2;
  if (a2) {
    atomic_fetch_add_explicit(a2, 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t PDFColorSpaceSetEmitDefinitions(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      do
      {
        *(void *)(v1 + 16) = 0;
        CFArrayRef v3 = *(const __CFArray **)(v2 + 8);
        v4.CFIndex length = CFArrayGetCount(v3);
        v4.locatiouint64_t n = 0;
        CFArrayApplyFunction(v3, v4, (CFArrayApplierFunction)emit_color_space_definition, 0);
        CGOrderedSetRelease((const void **)v2);
        uint64_t v2 = *(void *)(v1 + 16);
      }
      while (v2);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void emit_color_space_definition(uint64_t a1)
{
  uint64_t v307 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    switch(CGColorSpaceGetType(*(void **)(a1 + 24)))
    {
      case 3u:
        unint64_t v42 = *(void *)(a1 + 16);
        if (!v42) {
          _CGHandleAssert("emit_CalGray", 137, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v292);
        }
        PDFDocumentBeginObject(*(void *)(a1 + 8), v42, v2, v3, v4, v5, v6, v7);
        *(void *)&long long v304 = 0;
        long long v302 = 0u;
        long long v303 = 0u;
        long long v301 = 0u;
        CGColorSpaceGetCalibratedGrayData(*(void *)(a1 + 24), v43, v44, v45, (uint64_t)&v301);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"[/CalGray <<", v46, v47, v48, v49, v50, v51, v292);
        emit_array(*(void *)(a1 + 8), (uint64_t)"/WhitePoint", (uint64_t)&v301, 3, v52, v53, v54, v55, v294);
        if (*((double *)&v302 + 1) != 0.0 || *(double *)&v303 != 0.0 || *((double *)&v303 + 1) != 0.0) {
          emit_array(*(void *)(a1 + 8), (uint64_t)"/BlackPoint", (uint64_t)&v302 + 8, 3, v58, v59, v60, v61, v295);
        }
        if (*(double *)&v304 != 1.0) {
          PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Gamma %f", v56, v57, v58, v59, v60, v61, v304);
        }
        uint64_t v62 = *(void *)(a1 + 8);
        uint64_t v63 = ">>]";
        goto LABEL_40;
      case 4u:
        unint64_t v64 = *(void *)(a1 + 16);
        if (!v64) {
          _CGHandleAssert("emit_CalRGB", 165, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v292);
        }
        PDFDocumentBeginObject(*(void *)(a1 + 8), v64, v2, v3, v4, v5, v6, v7);
        memset(v306, 0, sizeof(v306));
        long long v304 = 0u;
        long long v305 = 0u;
        long long v302 = 0u;
        long long v303 = 0u;
        long long v301 = 0u;
        CGColorSpaceGetCalibratedRGBData(*(void *)(a1 + 24), v65, v66, v67, (uint64_t)&v301);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"[ /CalRGB <<", v68, v69, v70, v71, v72, v73, v292);
        emit_array(*(void *)(a1 + 8), (uint64_t)"/WhitePoint", (uint64_t)&v301, 3, v74, v75, v76, v77, v296);
        if (*((double *)&v302 + 1) != 0.0 || *(double *)&v303 != 0.0 || *((double *)&v303 + 1) != 0.0) {
          emit_array(*(void *)(a1 + 8), (uint64_t)"/BlackPoint", (uint64_t)&v302 + 8, 3, v58, v59, v60, v61, v295);
        }
        if (*(double *)&v304 != 1.0 || *((double *)&v304 + 1) != 1.0 || *(double *)&v305 != 1.0) {
          emit_array(*(void *)(a1 + 8), (uint64_t)"/Gamma", (uint64_t)&v304, 3, v58, v59, v60, v61, v295);
        }
        if (*((double *)&v305 + 1) != 1.0) {
          goto LABEL_30;
        }
        uint64_t v232 = 0;
        while (v232 != 8)
        {
          uint64_t v233 = v232 + 1;
          double v234 = *((double *)v306 + v232);
          double v235 = *(double *)&color_space_state_create_calibrated_rgb_default_matrix[++v232];
          if (v234 != v235)
          {
            if ((unint64_t)(v233 - 1) <= 7)
            {
LABEL_30:
              float64x2_t v78 = (char *)&v305 + 8;
              uint64_t v79 = *(void *)(a1 + 8);
              int v80 = "/Matrix";
              uint64_t v81 = 9;
              goto LABEL_38;
            }
            goto LABEL_39;
          }
        }
        goto LABEL_39;
      case 5u:
        unint64_t v82 = *(void *)(a1 + 16);
        if (!v82) {
          _CGHandleAssert("emit_Lab", 194, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v292);
        }
        PDFDocumentBeginObject(*(void *)(a1 + 8), v82, v2, v3, v4, v5, v6, v7);
        long long v305 = 0u;
        v306[0] = 0u;
        long long v303 = 0u;
        long long v304 = 0u;
        long long v301 = 0u;
        long long v302 = 0u;
        CGColorSpaceGetLabData(*(void *)(a1 + 24), v83, v84, v85, &v301);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"[ /Lab <<", v86, v87, v88, v89, v90, v91, v292);
        emit_array(*(void *)(a1 + 8), (uint64_t)"/WhitePoint", (uint64_t)&v301, 3, v92, v93, v94, v95, v297);
        if (*((double *)&v302 + 1) != 0.0 || *(double *)&v303 != 0.0 || *((double *)&v303 + 1) != 0.0) {
          emit_array(*(void *)(a1 + 8), (uint64_t)"/BlackPoint", (uint64_t)&v302 + 8, 3, v58, v59, v60, v61, v295);
        }
        if (*(double *)&v304 != -100.0) {
          goto LABEL_37;
        }
        uint64_t v236 = 0;
        while (v236 != 3)
        {
          uint64_t v237 = v236 + 1;
          double v238 = *((double *)&v304 + v236 + 1);
          double v239 = *((double *)&xmmword_185296188 + ++v236);
          if (v238 != v239)
          {
            if ((unint64_t)(v237 - 1) <= 2)
            {
LABEL_37:
              float64x2_t v78 = (char *)&v304;
              uint64_t v79 = *(void *)(a1 + 8);
              int v80 = "/Range";
              uint64_t v81 = 4;
LABEL_38:
              emit_array(v79, (uint64_t)v80, (uint64_t)v78, v81, v58, v59, v60, v61, v295);
            }
            break;
          }
        }
LABEL_39:
        uint64_t v62 = *(void *)(a1 + 8);
        uint64_t v63 = ">> ]";
LABEL_40:
        PDFDocumentPrintf(v62, (uint64_t)v63, v56, v57, v58, v59, v60, v61, v295);
        PDFDocumentEndObject(*(void *)(a1 + 8), v96, v97, v98, v99, v100, v101, v102);
        return;
      case 6u:
      case 0xAu:
      case 0xBu:
        *(void *)&long long v301 = 0;
        *(void *)&long long v302 = 0;
        *((void *)&v301 + 1) = 0x3FF0000000000000;
        *((void *)&v302 + 1) = 0x3FF0000000000000;
        *(void *)&long long v303 = 0;
        *((void *)&v303 + 1) = 0x3FF0000000000000;
        if (!*(void *)(a1 + 16)) {
          _CGHandleAssert("emit_ICCBased", 225, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v292);
        }
        uint64_t v8 = *(void *)(a1 + 8);
        uint64_t v9 = PDFXRefTableAddObject(*(void **)(v8 + 464));
        uint64_t v10 = PDFStreamCreateWithObjectNumber(v8, v9);
        PDFDocumentBeginObject(*v10, v10[1], v11, v12, v13, v14, v15, v16);
        PDFDocumentPrintf(*v10, (uint64_t)"<<", v17, v18, v19, v20, v21, v22, v292);
        uint64_t v29 = *(void *)(a1 + 24);
        if (v29) {
          uint64_t v30 = *(void *)(*(void *)(v29 + 24) + 48);
        }
        else {
          uint64_t v30 = 0;
        }
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/N %z", v23, v24, v25, v26, v27, v28, v30);
        uint64_t v38 = *(void *)(a1 + 24);
        if (!v38) {
          goto LABEL_65;
        }
        uint64_t v39 = *(void *)(v38 + 24);
        int v40 = *(_DWORD *)(v39 + 24);
        switch(v40)
        {
          case 6:
            uint64_t v41 = (void **)(*(void *)(v39 + 96) + 56);
            break;
          case 10:
            uint64_t v41 = (void **)(*(void *)(v39 + 96) + 48);
            break;
          case 8:
            uint64_t v41 = (void **)(*(void *)(v39 + 96) + 8);
            break;
          default:
            goto LABEL_65;
        }
        uint64_t v31 = *v41;
        if (*v41)
        {
          uint64_t v194 = PDFDocumentAddColorSpace(*(void *)(a1 + 8), v31);
          if (v194)
          {
            uint64_t v195 = v194;
            PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/Alternate", v32, v33, v34, v35, v36, v37, v293);
            PDFColorSpaceEmitReference(v195, v196, v197, v198, v199, v200, v201, v202);
          }
        }
LABEL_65:
        int v203 = (double *)CGColorSpaceICCGetRange(*(void *)(a1 + 24), (uint64_t)v31, v32, v33, v34, v35, v36, v37);
        if (!v30) {
          goto LABEL_76;
        }
        int v208 = (long long *)v203;
        if (v30 == 3 && *v203 == -INFINITY && v203[1] == INFINITY) {
          int v208 = &v301;
        }
        uint64_t v209 = (double *)v208 + 1;
        uint64_t v210 = v30;
        break;
      case 7u:
        if (!*(void *)(a1 + 16)) {
          _CGHandleAssert("emit_Indexed", 278, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v292);
        }
        uint64_t v103 = *(void *)(a1 + 24);
        if (v103 && (uint64_t v104 = *(void *)(v103 + 24), (*(_DWORD *)(v104 + 28) - 5) <= 1)) {
          long long v105 = **(CGColorSpace ***)(v104 + 96);
        }
        else {
          long long v105 = 0;
        }
        BOOL v155 = PDFDocumentResolveColorSpace(*(void *)(a1 + 8), v105);
        unint64_t v156 = PDFDocumentAddColorSpace(*(void *)(a1 + 8), v155);
        PDFDocumentBeginObject(*(void *)(a1 + 8), *(void *)(a1 + 16), v157, v158, v159, v160, v161, v162);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"[ /Indexed", v163, v164, v165, v166, v167, v168, v292);
        PDFColorSpaceEmitReference(v156, v169, v170, v171, v172, v173, v174, v175);
        uint64_t v182 = *(void *)(a1 + 24);
        if (v182 && (uint64_t v183 = *(void *)(v182 + 24), *(_DWORD *)(v183 + 28) == 5)) {
          uint64_t v184 = *(void *)(*(void *)(v183 + 96) + 8);
        }
        else {
          uint64_t v184 = -1;
        }
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"%z", v176, v177, v178, v179, v180, v181, v184);
        CFDataRef v185 = CGColorSpaceCopyColorTable(*(void *)(a1 + 24));
        uint64_t v186 = *(void *)(a1 + 8);
        CFIndex Length = CFDataGetLength(v185);
        CFDataGetBytePtr(v185);
        PDFDocumentPrintf(v186, (uint64_t)"%X", v188, v189, v190, v191, v192, v193, Length);
        CFRelease(v185);
        goto LABEL_105;
      case 8u:
        unint64_t v106 = *(void *)(a1 + 16);
        if (!v106) {
          _CGHandleAssert("emit_DeviceN", 301, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v292);
        }
        PDFDocumentBeginObject(*(void *)(a1 + 8), v106, v2, v3, v4, v5, v6, v7);
        Names = (uint64_t *)CGColorSpaceGetNames(*(void *)(a1 + 24), v107, v108, v109, v110, v111, v112, v113);
        uint64_t v121 = *(void *)(a1 + 24);
        if (v121)
        {
          unint64_t v122 = *(void *)(*(void *)(v121 + 24) + 48);
          uint64_t v123 = *(void *)(a1 + 8);
          if (v122 == 1)
          {
            PDFDocumentPrintf(v123, (uint64_t)"[ /Separation", v114, v115, v116, v117, v118, v119, v292);
            PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/%N", v124, v125, v126, v127, v128, v129, *Names);
            goto LABEL_93;
          }
        }
        else
        {
          unint64_t v122 = 0;
          uint64_t v123 = *(void *)(a1 + 8);
        }
        PDFDocumentPrintf(v123, (uint64_t)"[ /DeviceN", v114, v115, v116, v117, v118, v119, v292);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"[ ", v240, v241, v242, v243, v244, v245, v299);
        if (v122)
        {
          unint64_t v252 = v122;
          do
          {
            uint64_t v253 = *Names++;
            PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"/%N", v246, v247, v248, v249, v250, v251, v253);
            --v252;
          }
          while (v252);
        }
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"]", v246, v247, v248, v249, v250, v251, v300);
LABEL_93:
        uint64_t v254 = *(void *)(a1 + 24);
        if (!v254) {
          goto LABEL_98;
        }
        uint64_t v255 = *(void *)(v254 + 24);
        int v256 = *(_DWORD *)(v255 + 24);
        switch(v256)
        {
          case 6:
            int v257 = (CGColorSpace **)(*(void *)(v255 + 96) + 56);
            break;
          case 10:
            int v257 = (CGColorSpace **)(*(void *)(v255 + 96) + 48);
            break;
          case 8:
            int v257 = (CGColorSpace **)(*(void *)(v255 + 96) + 8);
            break;
          default:
LABEL_98:
            double v258 = 0;
            goto LABEL_102;
        }
        double v258 = *v257;
LABEL_102:
        double v259 = PDFDocumentResolveColorSpace(*(void *)(a1 + 8), v258);
        double v260 = PDFDocumentAddColorSpace(*(void *)(a1 + 8), v259);
        PDFColorSpaceEmitReference(v260, v261, v262, v263, v264, v265, v266, v267);
        uint64_t v268 = *(void *)(a1 + 8);
        TintTransforint m = CGColorSpaceGetTintTransform(*(void *)(a1 + 24), v269, v270, v271, v272, v273, v274, v275);
        double v277 = PDFDocumentAddFunction(v268, TintTransform);
        PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"%R", v277[6], v278, v279, v280, v281, v282);
        uint64_t v283 = *(void *)(a1 + 8);
        if (v122 >= 2 && *(unsigned char *)(v283 + 91))
        {
          PDFDocumentPrintf(v283, (uint64_t)"<< >>", v149, v150, v151, v152, v153, v154, v298);
LABEL_105:
          uint64_t v283 = *(void *)(a1 + 8);
        }
        PDFDocumentPrintf(v283, (uint64_t)"]", v149, v150, v151, v152, v153, v154, v298);
        uint64_t v291 = *(void *)(a1 + 8);
        PDFDocumentEndObject(v291, v284, v285, v286, v287, v288, v289, v290);
        return;
      case 9u:
        unint64_t v130 = *(void *)(a1 + 16);
        if (!v130) {
          _CGHandleAssert("emit_Pattern", 341, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v292);
        }
        uint64_t v131 = *(void *)(a1 + 24);
        if (!v131) {
          return;
        }
        uint64_t v132 = *(void *)(v131 + 24);
        if ((*(_DWORD *)(v132 + 28) - 5) > 1) {
          return;
        }
        uint64_t v133 = **(CGColorSpace ***)(v132 + 96);
        if (!v133) {
          return;
        }
        PDFDocumentBeginObject(*(void *)(a1 + 8), v130, v2, v3, v4, v5, v6, v7);
        PDFDocumentPrintf(*(void *)(a1 + 8), (uint64_t)"[ /Pattern", v134, v135, v136, v137, v138, v139, v292);
        uint64_t v140 = PDFDocumentResolveColorSpace(*(void *)(a1 + 8), v133);
        int v141 = PDFDocumentAddColorSpace(*(void *)(a1 + 8), v140);
        PDFColorSpaceEmitReference(v141, v142, v143, v144, v145, v146, v147, v148);
        goto LABEL_105;
      default:
        return;
    }
    while (*(v209 - 1) == 0.0 && *v209 == 1.0)
    {
      v209 += 2;
      if (!--v210) {
        goto LABEL_76;
      }
    }
    emit_array(*(void *)(a1 + 8), (uint64_t)"/Range", (uint64_t)v208, 2 * v30, v204, v205, v206, v207, v293);
LABEL_76:
    PDFStreamBeginData((CGDataConsumerRef)v10);
    CFDataRef v211 = CGColorSpaceCopyICCData(*(CGColorSpaceRef *)(a1 + 24));
    uint64_t BytePtr = CFDataGetBytePtr(v211);
    CFIndex v213 = CFDataGetLength(v211);
    CGDataConsumerPutBytes(v10[3], (uint64_t)BytePtr, v213);
    CFRelease(v211);
    PDFStreamEndData(v10);
    PDFStreamEnd((CFDataRef *)v10);
    PDFDocumentBeginObject(*(void *)(a1 + 8), *(void *)(a1 + 16), v214, v215, v216, v217, v218, v219);
    PDFDocumentPrintReference(*(void *)(a1 + 8), (uint64_t)"[ /ICCBased %R ]", v10[1], v220, v221, v222, v223, v224);
    PDFDocumentEndObject(*(void *)(a1 + 8), v225, v226, v227, v228, v229, v230, v231);
    PDFStreamRelease((uint64_t)v10);
  }
}

__CFString *font_copy_format_description(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<CGFont (%p): ", a1);
  if (a1)
  {
    CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(void))(a1[2] + 152))(a1[14]);
    if (v4)
    {
      CFStringRef v5 = v4;
      CFStringAppend(Mutable, v4);
      CFRelease(v5);
    }
  }
  CFStringAppend(Mutable, @">");
  return Mutable;
}

CFTypeID CGFontGetTypeID(void)
{
  if (_block_invoke_once_3318 != -1) {
    dispatch_once(&_block_invoke_once_3318, &__block_literal_global_8_3319);
  }
  return CGFontGetTypeID_font_type_id;
}

CGFontRef CGFontCreateWithPlatformFont(void *platformFontReference)
{
  return (CGFontRef)CGFontCreateWithPlatformFontAndVariation((uint64_t)platformFontReference, 0);
}

void *CGFontCreateWithPlatformFontAndVariation(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t Default = CGFontFinderGetDefault();
  if (!Default
    || (Default = (uint64_t)CGFontFinderCreateFontWithPlatformFont(Default, a1), (uint64_t v12 = (void *)Default) == 0))
  {
    uint64_t v13 = CGFontCreate(Default, v5, v6, v7, v8, v9, v10, v11);
    uint64_t v12 = (void *)v13;
    if (v13)
    {
      uint64_t VTable = CGFontGetVTable(v13, v14, v15, v16, v17, v18, v19, v20);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(VTable + 16))(a1, a2);
      v12[14] = v22;
      if (!v22)
      {
        CFRelease(v12);
        return 0;
      }
    }
  }
  return v12;
}

void *CGFontCreateWithParserFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  uint64_t v9 = CGFontCreate(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v17 = (void *)v9;
  if (v9)
  {
    uint64_t VTable = CGFontGetVTable(v9, v10, v11, v12, v13, v14, v15, v16);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(VTable + 8))(a1);
    v17[14] = v19;
    if (!v19)
    {
      CFRelease(v17);
      return 0;
    }
  }
  return v17;
}

CGFontRef CGFontCreateWithFontName(CFStringRef name)
{
  initialize_font_database_once();
  if (!name) {
    return 0;
  }
  uint64_t Default = CGFontFinderGetDefault();
  if (Default)
  {
    FontWithName = (CGFont *)CGFontFinderCreateFontWithName(Default, (uint64_t)name);
    if (FontWithName) {
      return FontWithName;
    }
  }
  FontWithName = (CGFont *)CGFontDBCopyFontWithName(0, name);
  if (FontWithName) {
    return FontWithName;
  }
  uint64_t v11 = CGFontCreate(0, v4, v5, v6, v7, v8, v9, v10);
  FontWithName = (CGFont *)v11;
  if (!v11) {
    return FontWithName;
  }
  uint64_t VTable = CGFontGetVTable(v11, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v20 = (*(uint64_t (**)(CFStringRef))(VTable + 24))(name);
  *((void *)FontWithName + 14) = v20;
  if (v20) {
    return FontWithName;
  }
  CFRelease(FontWithName);
  CFIndex Length = CFStringGetLength(name);
  CFIndex v22 = CFStringGetMaximumSizeForEncoding(Length, 0x600u) + 1;
  uint64_t v23 = malloc_type_malloc(v22, 0x7EC2A73uLL);
  if (!CFStringGetCString(name, (char *)v23, v22, 0x600u))
  {
LABEL_11:
    free(v23);
    return 0;
  }
  uint64_t v24 = 0;
  uint64_t v25 = (const char **)substitution_fonts;
  while (strcmp((const char *)v23, *v25))
  {
    ++v24;
    v25 += 3;
    if (v24 == 5) {
      goto LABEL_11;
    }
  }
  free(v23);
  uint64_t v27 = substitution_fonts[3 * v24 + 1];

  return (CGFontRef)CGFontCreateWithName(v27);
}

CGFontRef CGFontCreateWithName(char *cStr)
{
  if (!cStr) {
    return 0;
  }
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x600u);
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  CGFontRef v3 = CGFontCreateWithFontName(v1);
  CFRelease(v2);
  return v3;
}

CFTypeRef CGFontCreateMatchingFont(const char *a1, const char *a2, int a3, int a4, double a5)
{
  CFTypeRef v5 = 0;
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    if (strcmp(a1, "Adobe")) {
      return 0;
    }
    CGFontRef v11 = (CGFontRef)strcmp(a2, "Japan1");
    if (v11) {
      goto LABEL_8;
    }
    uint64_t v24 = &(&Japanese_serifed)[2 * (a5 >= 102.5)];
    if (!a4) {
      uint64_t v24 = &(&Japanese_sans_serifed)[2 * (a5 >= 103.0)];
    }
    CGFontRef v11 = CGFontCreateWithName(*v24);
    CFTypeRef v5 = v11;
    if (!v11)
    {
LABEL_8:
      uint64_t VTable = CGFontGetVTable((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
      CFURLRef v20 = (const __CFURL *)(*(uint64_t (**)(const char *, const char *))(VTable + 192))(a1, a2);
      if (!v20) {
        return 0;
      }
      FontsWithURL = CGFontCreateFontsWithURL(v20);
      if (!FontsWithURL) {
        return 0;
      }
      CFArrayRef v22 = FontsWithURL;
      if (CFArrayGetCount(FontsWithURL))
      {
        ValueAtIndedouble x = CFArrayGetValueAtIndex(v22, 0);
        CFTypeRef v5 = CFRetain(ValueAtIndex);
      }
      else
      {
        CFTypeRef v5 = 0;
      }
      CFRelease(v22);
    }
  }
  return v5;
}

void *CGFontCreateCopy(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  uint64_t v9 = (void *)CGFontCreate((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(a1[2] + 80))(a1[14]);
    v9[14] = v10;
    if (v10)
    {
      CGFontSetEncodingVector((uint64_t)v9, atomic_load_explicit(a1 + 4, memory_order_acquire));
      return v9;
    }
    CFRelease(v9);
    return 0;
  }
  return v9;
}

__CFArray *create_fonts_with_private_data_array(const __CFArray *a1, int a2)
{
  uint64_t Count = CFArrayGetCount(a1);
  if (!Count && !a2) {
    return 0;
  }
  uint64_t Mutable = (uint64_t)CFArrayCreateMutable(0, Count, MEMORY[0x1E4F1D510]);
  CFTypeRef v5 = (__CFArray *)Mutable;
  if (Mutable && Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      uint64_t Mutable = CGFontCreate(Mutable, v7, v8, v9, v10, v11, v12, v13);
      if (Mutable)
      {
        uint64_t v15 = (void *)Mutable;
        *(void *)(Mutable + 112) = CFArrayGetValueAtIndex(a1, i);
        (*(void (**)(void))(v15[2] + 80))();
        CFArrayAppendValue(v5, v15);
        CFRelease(v15);
      }
    }
  }
  return v5;
}

__CFArray *CGFontCreateFontsFromData(uint64_t a1)
{
  BOOL v2 = CGIsInLockdownModeForFonts();
  if (v2)
  {
    CGPostError((uint64_t)"Attempt to create CGFont from data in Lockdown Mode for Fonts", v3, v4, v5, v6, v7, v8, v9, v15);
  }
  else
  {
    uint64_t VTable = CGFontGetVTable(v2, v3, v4, v5, v6, v7, v8, v9);
    CFArrayRef v11 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(VTable + 56))(a1);
    if (v11)
    {
      CFArrayRef v12 = v11;
      fonts_with_private_data_arraCGFloat y = create_fonts_with_private_data_array(v11, 1);
      CFRelease(v12);
      return fonts_with_private_data_array;
    }
  }
  return 0;
}

void CGFontApplyFunction(uint64_t (*a1)(const void *, uint64_t), uint64_t a2)
{
  if (a1)
  {
    initialize_font_database_once();
    uint64_t Default = CGFontFinderGetDefault();
    if (Default)
    {
      CGFontFinderApplyFunction(Default, a1, a2);
    }
    else
    {
      CGFontDBApplyFunction(0, (unsigned int (*)(const void *, uint64_t))a1, a2);
      uint64_t v13 = *(void (**)(uint64_t (*)(const void *, uint64_t), uint64_t))(CGFontGetVTable(v5, v6, v7, v8, v9, v10, v11, v12)+ 72);
      v13(a1, a2);
    }
  }
}

uint64_t rgb555_sample_cmyk32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(result + 40);
  uint64_t v7 = *(void *)(result + 176);
  uint64_t v87 = *(void *)(result + 80);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v101 = *(void *)(result + 120);
  uint64_t v102 = *(void *)(result + 112);
  uint64_t v8 = (unsigned int *)(*(void *)(result + 152) - 4);
  uint64_t v91 = *(void *)(result + 144) - 1;
  uint64_t v9 = 0xFF00000000;
  if (v6) {
    uint64_t v9 = 0;
  }
  uint64_t v96 = v9;
  int v10 = *(_DWORD *)(result + 260) - 1;
  int v99 = *(_DWORD *)(result + 24);
  uint64_t v95 = *(void *)(result + 32);
  uint64_t v11 = *(unsigned int *)(result + 256);
  int v86 = *(_DWORD *)(result + 188);
  int v93 = *(_DWORD *)(result + 28);
  uint64_t v94 = (unsigned __int8 *)(v6 + (v11 - 1) + (v10 * v93));
  unint64_t v100 = v95 + (v10 * v99) + 4 * v11 - 8;
  uint64_t v89 = *(void *)(result + 64);
  uint64_t v90 = *(void *)(result + 72);
  uint64_t v97 = *(void *)(result + 40);
  uint64_t v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        uint64_t v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        uint64_t v24 = a3;
        int v15 = a4;
        uint64_t v16 = v89;
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v88;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        int v15 = a4;
        uint64_t v16 = v89;
        if (v20 < 1) {
          goto LABEL_40;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v23 = v86 | v21;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(result + 216);
      uint64_t v13 = v90 - *(void *)(result + 224);
      uint64_t v14 = a3 - v13 + (v12 >> 1);
      int v15 = a4;
      uint64_t v16 = v89;
      if (v14 < 1) {
        goto LABEL_40;
      }
      if (v14 >= v12) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v14) >> 32;
      }
      unsigned int v23 = v86 | v17;
      uint64_t v24 = v13 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v28 = a2;
      }
      else
      {
        uint64_t v30 = *(void *)(result + 192);
        uint64_t v31 = *(void *)(result + 200) + v87;
        uint64_t v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1) {
          goto LABEL_40;
        }
        if (v32 < v30) {
          unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v86;
        }
        uint64_t v28 = v31 - 0x1000000;
        uint64_t v29 = 28;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(result + 192);
      uint64_t v26 = v16 - *(void *)(result + 200);
      uint64_t v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1) {
        goto LABEL_40;
      }
      if (v27 < v25) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v86;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
    }
    if (v23 >= 0x400000) {
      break;
    }
LABEL_40:
    int v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    ++v8;
    *(unsigned char *)++uint64_t v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42) {
      return result;
    }
  }
  uint64_t v33 = v24 >> 32;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  uint64_t v36 = *(unsigned int **)(result + 32);
  uint64_t v37 = (unsigned int *)v100;
  if (v100 >= v35) {
    uint64_t v37 = (unsigned int *)v35;
  }
  if (v37 < v36) {
    uint64_t v37 = *(unsigned int **)(result + 32);
  }
  unint64_t v38 = *v37;
  if (v6)
  {
    unint64_t v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    int v40 = *(unsigned __int8 **)(result + 40);
    uint64_t v41 = v94;
    unint64_t v92 = v39;
    if ((unint64_t)v94 >= v39) {
      uint64_t v41 = (unsigned __int8 *)v39;
    }
    if (v41 >= v40) {
      int v40 = v41;
    }
    v38 |= (unint64_t)*v40 << 32;
    if (!v7) {
      goto LABEL_102;
    }
  }
  else
  {
    unint64_t v92 = 0;
    if (!v7) {
      goto LABEL_102;
    }
  }
  unsigned int v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  int v44 = v43 & 0xF;
  int v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    uint64_t v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67) {
      uint64_t v67 = (unsigned int *)v100;
    }
    if (v67 >= v36) {
      uint64_t v36 = v67;
    }
    unint64_t v68 = *v36;
    if (v6)
    {
      uint64_t v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69) {
        uint64_t v69 = v94;
      }
      if ((unint64_t)v69 < *(void *)(result + 40)) {
        uint64_t v69 = *(unsigned __int8 **)(result + 40);
      }
      v68 |= (unint64_t)*v69 << 32;
    }
    uint64_t v70 = interpolate_cif10a[v45];
    char v71 = v45 + 1;
    unint64_t v65 = v38 - ((v70 & v38) >> v71);
    unint64_t v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      uint64_t v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73) {
        uint64_t v73 = (unsigned int *)v100;
      }
      if (v73 >= v36) {
        uint64_t v36 = v73;
      }
      uint64_t v74 = *v36;
      if (v6)
      {
        uint64_t v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75) {
          uint64_t v75 = v94;
        }
        if ((unint64_t)v75 < *(void *)(result + 40)) {
          uint64_t v75 = *(unsigned __int8 **)(result + 40);
        }
        v74 |= (unint64_t)*v75 << 32;
      }
      int v76 = (v43 >> 28) & 3;
      uint64_t v77 = interpolate_cif10a[v76];
      char v64 = v76 + 1;
      unint64_t v65 = v38 - ((v77 & v38) >> v64);
      unint64_t v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3) {
        goto LABEL_102;
      }
      int64_t v46 = (unint64_t)HIWORD(v43) << 56;
      uint64_t v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47) {
        uint64_t v47 = (unsigned int *)v100;
      }
      if (v47 < v36) {
        uint64_t v47 = v36;
      }
      unint64_t v48 = *v47;
      unint64_t v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49) {
        uint64_t v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      }
      else {
        uint64_t v50 = (unsigned int *)v100;
      }
      if (v50 < v36) {
        uint64_t v50 = v36;
      }
      unint64_t v51 = *v50;
      uint64_t v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52) {
        uint64_t v52 = (unsigned int *)v100;
      }
      if (v52 >= v36) {
        uint64_t v36 = v52;
      }
      unint64_t v53 = *v36;
      if (v6)
      {
        uint64_t v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        unint64_t v55 = *(void *)(result + 40);
        if (v94 < v54) {
          uint64_t v54 = v94;
        }
        if ((unint64_t)v54 < v55) {
          uint64_t v54 = *(unsigned __int8 **)(result + 40);
        }
        v48 |= (unint64_t)*v54 << 32;
        unint64_t v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56) {
          uint64_t v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        }
        else {
          uint64_t v57 = v94;
        }
        if ((unint64_t)v57 < v55) {
          uint64_t v57 = *(unsigned __int8 **)(result + 40);
        }
        v51 |= (unint64_t)*v57 << 32;
        uint64_t v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58) {
          uint64_t v58 = v94;
        }
        if ((unint64_t)v58 < v55) {
          uint64_t v58 = *(unsigned __int8 **)(result + 40);
        }
        v53 |= (unint64_t)*v58 << 32;
      }
      uint64_t v59 = interpolate_cif10a[v45];
      char v60 = v45 + 1;
      unint64_t v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      int v62 = (v43 >> 28) & 3;
      unint64_t v63 = interpolate_cif10a[v62];
      char v64 = v62 + 1;
      unint64_t v65 = v61 - ((v61 & v63) >> v64);
      unint64_t v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    unint64_t v72 = v66 >> v64;
  }
  unint64_t v38 = v65 + v72;
LABEL_102:
  uint64_t v78 = 0;
  ++v8;
  int v85 = v15;
  int v79 = v15 - 1;
  a3 += v101;
  uint64_t v80 = v88 - a3;
  a2 += v102;
  uint64_t v81 = v87 - a2;
  while (1)
  {
    CMYK32(v8, v38 | v96);
    *(unsigned char *)(v91 + 1 + v7++*(_DWORD *)(result + 8) = v23 >> 22;
    uint64_t v6 = v97;
    uint64_t result = v98;
    if (v79 == v78) {
      return result;
    }
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      int v42 = ~v78 + v85;
      goto LABEL_41;
    }
    unint64_t v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    uint64_t v36 = *(unsigned int **)(v98 + 32);
    unint64_t v82 = (unsigned int *)v100;
    if (v100 >= v35) {
      unint64_t v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    }
    if (v82 < v36) {
      unint64_t v82 = *(unsigned int **)(v98 + 32);
    }
    unint64_t v38 = *v82;
    if (v97)
    {
      uint64_t v83 = *(unsigned __int8 **)(v98 + 40);
      unint64_t v84 = (unint64_t)v94;
      unint64_t v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92) {
        unint64_t v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      }
      if (v84 >= (unint64_t)v83) {
        uint64_t v83 = (unsigned __int8 *)v84;
      }
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      unsigned int v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        int v15 = ~v78 + v85;
        unsigned int v23 = -1;
        goto LABEL_46;
      }
    }
    ++v8;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    unsigned int v23 = -1;
  }
}

unsigned int *CMYK32(unsigned int *result, uint64_t a2)
{
  int v2 = BYTE4(a2) - (BYTE3(a2) + a2);
  int v3 = BYTE4(a2) - (BYTE2(a2) + a2);
  *uint64_t result = ((v2 & ~(v2 >> 31)) << 7) & 0x7C00 | (HIDWORD(a2) << 24) | (32
                                                                      * (((v3 & ~(v3 >> 31)) >> 3) & 0x1F)) | (((BYTE4(a2) - (BYTE1(a2) + a2)) & ~((BYTE4(a2) - (BYTE1(a2) + a2)) >> 31)) >> 3);
  return result;
}

uint64_t rgb555_sample_CMYK32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(result + 40);
  uint64_t v7 = *(void *)(result + 176);
  uint64_t v87 = *(void *)(result + 80);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v101 = *(void *)(result + 120);
  uint64_t v102 = *(void *)(result + 112);
  uint64_t v8 = (unsigned int *)(*(void *)(result + 152) - 4);
  uint64_t v91 = *(void *)(result + 144) - 1;
  uint64_t v9 = 0xFF00000000;
  if (v6) {
    uint64_t v9 = 0;
  }
  uint64_t v96 = v9;
  int v10 = *(_DWORD *)(result + 260) - 1;
  int v99 = *(_DWORD *)(result + 24);
  uint64_t v95 = *(void *)(result + 32);
  uint64_t v11 = *(unsigned int *)(result + 256);
  int v86 = *(_DWORD *)(result + 188);
  int v93 = *(_DWORD *)(result + 28);
  uint64_t v94 = (unsigned __int8 *)(v6 + (v11 - 1) + (v10 * v93));
  unint64_t v100 = v95 + (v10 * v99) + 4 * v11 - 8;
  uint64_t v89 = *(void *)(result + 64);
  uint64_t v90 = *(void *)(result + 72);
  uint64_t v97 = *(void *)(result + 40);
  uint64_t v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        uint64_t v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v23 = 0x3FFFFFFF;
        uint64_t v24 = a3;
        int v15 = a4;
        uint64_t v16 = v89;
      }
      else
      {
        uint64_t v18 = *(void *)(result + 216);
        uint64_t v19 = *(void *)(result + 224) + v88;
        uint64_t v20 = v19 - a3 + (v18 >> 1);
        int v15 = a4;
        uint64_t v16 = v89;
        if (v20 < 1) {
          goto LABEL_40;
        }
        if (v20 >= v18) {
          LODWORD(v21) = 0x3FFFFFFF;
        }
        else {
          unint64_t v21 = (unint64_t)(*(void *)(result + 232) * v20) >> 32;
        }
        unsigned int v23 = v86 | v21;
        uint64_t v24 = v19 - 0x1000000;
        uint64_t v22 = 448;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(result + 216);
      uint64_t v13 = v90 - *(void *)(result + 224);
      uint64_t v14 = a3 - v13 + (v12 >> 1);
      int v15 = a4;
      uint64_t v16 = v89;
      if (v14 < 1) {
        goto LABEL_40;
      }
      if (v14 >= v12) {
        LODWORD(v17) = 0x3FFFFFFF;
      }
      else {
        unint64_t v17 = (unint64_t)(*(void *)(result + 232) * v14) >> 32;
      }
      unsigned int v23 = v86 | v17;
      uint64_t v24 = v13 + 0x1000000;
      uint64_t v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        uint64_t v29 = ((unint64_t)a2 >> 26) & 0x3C;
        uint64_t v28 = a2;
      }
      else
      {
        uint64_t v30 = *(void *)(result + 192);
        uint64_t v31 = *(void *)(result + 200) + v87;
        uint64_t v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1) {
          goto LABEL_40;
        }
        if (v32 < v30) {
          unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v32) >> 32) >> 15)) | v86;
        }
        uint64_t v28 = v31 - 0x1000000;
        uint64_t v29 = 28;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(result + 192);
      uint64_t v26 = v16 - *(void *)(result + 200);
      uint64_t v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1) {
        goto LABEL_40;
      }
      if (v27 < v25) {
        unsigned int v23 = ((v23 >> 15) * (((unint64_t)(*(void *)(result + 208) * v27) >> 32) >> 15)) | v86;
      }
      uint64_t v28 = v26 + 0x1000000;
      uint64_t v29 = 32;
    }
    if (v23 >= 0x400000) {
      break;
    }
LABEL_40:
    int v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    ++v8;
    *(unsigned char *)++uint64_t v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42) {
      return result;
    }
  }
  uint64_t v33 = v24 >> 32;
  uint64_t v34 = v28 >> 32;
  unint64_t v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  uint64_t v36 = *(unsigned int **)(result + 32);
  uint64_t v37 = (unsigned int *)v100;
  if (v100 >= v35) {
    uint64_t v37 = (unsigned int *)v35;
  }
  if (v37 < v36) {
    uint64_t v37 = *(unsigned int **)(result + 32);
  }
  unint64_t v38 = bswap32(*v37);
  if (v6)
  {
    unint64_t v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    int v40 = *(unsigned __int8 **)(result + 40);
    uint64_t v41 = v94;
    unint64_t v92 = v39;
    if ((unint64_t)v94 >= v39) {
      uint64_t v41 = (unsigned __int8 *)v39;
    }
    if (v41 >= v40) {
      int v40 = v41;
    }
    v38 |= (unint64_t)*v40 << 32;
    if (!v7) {
      goto LABEL_102;
    }
  }
  else
  {
    unint64_t v92 = 0;
    if (!v7) {
      goto LABEL_102;
    }
  }
  unsigned int v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  int v44 = v43 & 0xF;
  int v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    uint64_t v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67) {
      uint64_t v67 = (unsigned int *)v100;
    }
    if (v67 >= v36) {
      uint64_t v36 = v67;
    }
    unint64_t v68 = bswap32(*v36);
    if (v6)
    {
      uint64_t v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69) {
        uint64_t v69 = v94;
      }
      if ((unint64_t)v69 < *(void *)(result + 40)) {
        uint64_t v69 = *(unsigned __int8 **)(result + 40);
      }
      v68 |= (unint64_t)*v69 << 32;
    }
    uint64_t v70 = interpolate_cif10a[v45];
    char v71 = v45 + 1;
    unint64_t v65 = v38 - ((v70 & v38) >> v71);
    unint64_t v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      uint64_t v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73) {
        uint64_t v73 = (unsigned int *)v100;
      }
      if (v73 >= v36) {
        uint64_t v36 = v73;
      }
      uint64_t v74 = bswap32(*v36);
      if (v6)
      {
        uint64_t v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75) {
          uint64_t v75 = v94;
        }
        if ((unint64_t)v75 < *(void *)(result + 40)) {
          uint64_t v75 = *(unsigned __int8 **)(result + 40);
        }
        v74 |= (unint64_t)*v75 << 32;
      }
      int v76 = (v43 >> 28) & 3;
      uint64_t v77 = interpolate_cif10a[v76];
      char v64 = v76 + 1;
      unint64_t v65 = v38 - ((v77 & v38) >> v64);
      unint64_t v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3) {
        goto LABEL_102;
      }
      int64_t v46 = (unint64_t)HIWORD(v43) << 56;
      uint64_t v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47) {
        uint64_t v47 = (unsigned int *)v100;
      }
      if (v47 < v36) {
        uint64_t v47 = v36;
      }
      unint64_t v48 = bswap32(*v47);
      unint64_t v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49) {
        uint64_t v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      }
      else {
        uint64_t v50 = (unsigned int *)v100;
      }
      if (v50 < v36) {
        uint64_t v50 = v36;
      }
      unint64_t v51 = bswap32(*v50);
      uint64_t v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52) {
        uint64_t v52 = (unsigned int *)v100;
      }
      if (v52 >= v36) {
        uint64_t v36 = v52;
      }
      unint64_t v53 = bswap32(*v36);
      if (v6)
      {
        uint64_t v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        unint64_t v55 = *(void *)(result + 40);
        if (v94 < v54) {
          uint64_t v54 = v94;
        }
        if ((unint64_t)v54 < v55) {
          uint64_t v54 = *(unsigned __int8 **)(result + 40);
        }
        v48 |= (unint64_t)*v54 << 32;
        unint64_t v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56) {
          uint64_t v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        }
        else {
          uint64_t v57 = v94;
        }
        if ((unint64_t)v57 < v55) {
          uint64_t v57 = *(unsigned __int8 **)(result + 40);
        }
        v51 |= (unint64_t)*v57 << 32;
        uint64_t v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58) {
          uint64_t v58 = v94;
        }
        if ((unint64_t)v58 < v55) {
          uint64_t v58 = *(unsigned __int8 **)(result + 40);
        }
        v53 |= (unint64_t)*v58 << 32;
      }
      uint64_t v59 = interpolate_cif10a[v45];
      char v60 = v45 + 1;
      unint64_t v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      int v62 = (v43 >> 28) & 3;
      unint64_t v63 = interpolate_cif10a[v62];
      char v64 = v62 + 1;
      unint64_t v65 = v61 - ((v61 & v63) >> v64);
      unint64_t v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    unint64_t v72 = v66 >> v64;
  }
  unint64_t v38 = v65 + v72;
LABEL_102:
  uint64_t v78 = 0;
  ++v8;
  int v85 = v15;
  int v79 = v15 - 1;
  a3 += v101;
  uint64_t v80 = v88 - a3;
  a2 += v102;
  uint64_t v81 = v87 - a2;
  while (1)
  {
    CMYK32(v8, v38 | v96);
    *(unsigned char *)(v91 + 1 + v7++*(_DWORD *)(result + 8) = v23 >> 22;
    uint64_t v6 = v97;
    uint64_t result = v98;
    if (v79 == v78) {
      return result;
    }
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      int v42 = ~v78 + v85;
      goto LABEL_41;
    }
    unint64_t v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    uint64_t v36 = *(unsigned int **)(v98 + 32);
    unint64_t v82 = (unsigned int *)v100;
    if (v100 >= v35) {
      unint64_t v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    }
    if (v82 < v36) {
      unint64_t v82 = *(unsigned int **)(v98 + 32);
    }
    unint64_t v38 = bswap32(*v82);
    if (v97)
    {
      uint64_t v83 = *(unsigned __int8 **)(v98 + 40);
      unint64_t v84 = (unint64_t)v94;
      unint64_t v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92) {
        unint64_t v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      }
      if (v84 >= (unint64_t)v83) {
        uint64_t v83 = (unsigned __int8 *)v84;
      }
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      unsigned int v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        int v15 = ~v78 + v85;
        unsigned int v23 = -1;
        goto LABEL_46;
      }
    }
    ++v8;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    unsigned int v23 = -1;
  }
}

uint64_t rgb555_sample_argb32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 72);
  uint64_t v7 = *(void *)(result + 88);
  uint64_t v74 = *(void *)(result + 80);
  uint64_t v8 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  int v72 = *(_DWORD *)(result + 188);
  uint64_t v10 = *(void *)(result + 152) - 4;
  uint64_t v11 = *(void *)(result + 144) - 1;
  uint64_t v12 = *(void *)(result + 32);
  if (*(void *)(result + 40)) {
    int v13 = 0;
  }
  else {
    int v13 = -16777216;
  }
  unint64_t v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v73 = *(void *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        uint64_t v23 = (a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v7;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1) {
          goto LABEL_37;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        unsigned int v24 = v72 | v22;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v6 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1) {
        goto LABEL_37;
      }
      if (v17 >= v15) {
        LODWORD(v1++*(_DWORD *)(result + 8) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      unsigned int v24 = v72 | v18;
      uint64_t v25 = v16 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v73) {
      break;
    }
    uint64_t v26 = *(void *)(result + 192);
    uint64_t v27 = v73 - *(void *)(result + 200);
    uint64_t v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v72;
      }
      uint64_t v29 = v27 + 0x1000000;
      uint64_t v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(unsigned char *)++uint64_t v11 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v74)
  {
    uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v29 = a2;
    goto LABEL_29;
  }
  uint64_t v31 = *(void *)(result + 192);
  uint64_t v32 = *(void *)(result + 200) + v74;
  uint64_t v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1) {
    goto LABEL_37;
  }
  if (v33 < v31) {
    unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v72;
  }
  uint64_t v29 = v32 - 0x1000000;
  uint64_t v30 = 28;
LABEL_29:
  if (v24 < 0x400000) {
    goto LABEL_37;
  }
  uint64_t v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  uint64_t v35 = v29 >> 32;
  unint64_t v36 = v34 + 4 * v35;
  uint64_t v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36) {
    unint64_t v38 = (unsigned int *)(v34 + 4 * v35);
  }
  else {
    unint64_t v38 = (unsigned int *)v14;
  }
  if (v38 < v37) {
    unint64_t v38 = *(unsigned int **)(result + 32);
  }
  unsigned int v39 = *v38;
  if (!v5) {
    goto LABEL_69;
  }
  unsigned int v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  int v41 = v40 & 0xF;
  int v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      uint64_t v59 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v59) {
        uint64_t v59 = (unsigned int *)v14;
      }
      if (v59 < v37) {
        uint64_t v59 = v37;
      }
      unsigned int v60 = interpolate_8888_21358[v42];
      char v61 = v42 + 1;
      unsigned int v57 = v39 - ((v60 & v39) >> v61);
      unsigned int v62 = (v60 & *v59) >> v61;
LABEL_68:
      unsigned int v39 = v57 + v62;
      break;
    case 2:
      unint64_t v63 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v63) {
        unint64_t v63 = (unsigned int *)v14;
      }
      if (v63 < v37) {
        unint64_t v63 = v37;
      }
      int v64 = (v40 >> 28) & 3;
      int v65 = interpolate_8888_21358[v64];
      char v56 = v64 + 1;
      unsigned int v57 = v39 - ((v65 & v39) >> v56);
      unsigned int v58 = v65 & *v63;
LABEL_67:
      unsigned int v62 = v58 >> v56;
      goto LABEL_68;
    case 3:
      int64_t v43 = (unint64_t)HIWORD(v40) << 56;
      int v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44) {
        int v44 = (unsigned int *)v14;
      }
      if (v44 < v37) {
        int v44 = v37;
      }
      unsigned int v45 = *v44;
      unint64_t v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46) {
        uint64_t v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      }
      else {
        uint64_t v47 = (unsigned int *)v14;
      }
      if (v47 < v37) {
        uint64_t v47 = v37;
      }
      unsigned int v48 = *v47;
      unint64_t v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49) {
        unint64_t v49 = (unsigned int *)v14;
      }
      if (v49 < v37) {
        unint64_t v49 = v37;
      }
      unsigned int v50 = interpolate_8888_21358[v42];
      char v51 = v42 + 1;
      unsigned int v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      unsigned int v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      int v54 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      char v56 = v54 + 1;
      unsigned int v57 = v52 - ((v52 & v55) >> v56);
      unsigned int v58 = v53 & v55;
      goto LABEL_67;
  }
LABEL_69:
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  a3 += v9;
  uint64_t v68 = v7 - a3;
  a2 += v8;
  uint64_t v69 = v74 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v66) = (v39 | v13) & 0xF8000000 | (v39 >> 9) & 0x7C00 | ((unsigned __int16)v39 >> 6) & 0xFFE0 | (v39 >> 3) | ((v39 | v13) >> 29 << 24);
    *(unsigned char *)(v11 + 1 + v66) = v24 >> 22;
    if (a4 - 1 == v66) {
      return result;
    }
    if (((v68 | v69 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      uint64_t v10 = v10 - v67 + 4;
      v11 += v66 + 1;
      a4 += ~v66;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v36 = v70 + 4 * (a2 >> 32);
    uint64_t v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36) {
      char v71 = (unsigned int *)(v70 + 4 * (a2 >> 32));
    }
    else {
      char v71 = (unsigned int *)v14;
    }
    if (v71 < v37) {
      char v71 = *(unsigned int **)(result + 32);
    }
    unsigned int v39 = *v71;
    if (v5)
    {
      unsigned int v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        uint64_t v10 = v10 - v67 + 4;
        v11 += v66 + 1;
        a4 += ~v66;
        unsigned int v24 = -1;
        goto LABEL_40;
      }
    }
    v67 -= 4;
    ++v66;
    a3 += v9;
    v68 -= v9;
    a2 += v8;
    v69 -= v8;
    unsigned int v24 = -1;
  }
}

uint64_t rgb555_sample_ARGB32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 72);
  uint64_t v7 = *(void *)(result + 88);
  uint64_t v72 = *(void *)(result + 80);
  uint64_t v8 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  int v70 = *(_DWORD *)(result + 188);
  uint64_t v10 = *(void *)(result + 152) - 4;
  uint64_t v11 = *(void *)(result + 144) - 1;
  uint64_t v12 = *(void *)(result + 32);
  if (*(void *)(result + 40)) {
    int v13 = 0;
  }
  else {
    int v13 = -16777216;
  }
  unint64_t v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v71 = *(void *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        uint64_t v23 = (a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v7;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1) {
          goto LABEL_37;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        unsigned int v24 = v70 | v22;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v6 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1) {
        goto LABEL_37;
      }
      if (v17 >= v15) {
        LODWORD(v1++*(_DWORD *)(result + 8) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      unsigned int v24 = v70 | v18;
      uint64_t v25 = v16 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v71) {
      break;
    }
    uint64_t v26 = *(void *)(result + 192);
    uint64_t v27 = v71 - *(void *)(result + 200);
    uint64_t v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v70;
      }
      uint64_t v29 = v27 + 0x1000000;
      uint64_t v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(unsigned char *)++uint64_t v11 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v72)
  {
    uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v29 = a2;
    goto LABEL_29;
  }
  uint64_t v31 = *(void *)(result + 192);
  uint64_t v32 = *(void *)(result + 200) + v72;
  uint64_t v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1) {
    goto LABEL_37;
  }
  if (v33 < v31) {
    unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v70;
  }
  uint64_t v29 = v32 - 0x1000000;
  uint64_t v30 = 28;
LABEL_29:
  if (v24 < 0x400000) {
    goto LABEL_37;
  }
  uint64_t v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  uint64_t v35 = v29 >> 32;
  unint64_t v36 = v34 + 4 * v35;
  uint64_t v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36) {
    unint64_t v38 = (unsigned int *)(v34 + 4 * v35);
  }
  else {
    unint64_t v38 = (unsigned int *)v14;
  }
  if (v38 < v37) {
    unint64_t v38 = *(unsigned int **)(result + 32);
  }
  unsigned int v39 = bswap32(*v38);
  if (!v5) {
    goto LABEL_69;
  }
  unsigned int v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  int v41 = v40 & 0xF;
  int v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      unsigned int v58 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v58) {
        unsigned int v58 = (unsigned int *)v14;
      }
      if (v58 < v37) {
        unsigned int v58 = v37;
      }
      int v59 = interpolate_8888_21358[v42];
      char v60 = v42 + 1;
      unsigned int v57 = v39 - ((v59 & v39) >> v60);
      unsigned int v61 = (bswap32(*v58) & v59) >> v60;
LABEL_68:
      unsigned int v39 = v57 + v61;
      break;
    case 2:
      unsigned int v62 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v62) {
        unsigned int v62 = (unsigned int *)v14;
      }
      if (v62 < v37) {
        unsigned int v62 = v37;
      }
      unsigned int v53 = bswap32(*v62);
      int v63 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v63];
      char v56 = v63 + 1;
      unsigned int v57 = v39 - ((v55 & v39) >> v56);
LABEL_67:
      unsigned int v61 = (v53 & v55) >> v56;
      goto LABEL_68;
    case 3:
      int64_t v43 = (unint64_t)HIWORD(v40) << 56;
      int v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44) {
        int v44 = (unsigned int *)v14;
      }
      if (v44 < v37) {
        int v44 = v37;
      }
      unsigned int v45 = bswap32(*v44);
      unint64_t v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46) {
        uint64_t v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      }
      else {
        uint64_t v47 = (unsigned int *)v14;
      }
      if (v47 < v37) {
        uint64_t v47 = v37;
      }
      unsigned int v48 = bswap32(*v47);
      unint64_t v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49) {
        unint64_t v49 = (unsigned int *)v14;
      }
      if (v49 < v37) {
        unint64_t v49 = v37;
      }
      int v50 = interpolate_8888_21358[v42];
      char v51 = v42 + 1;
      unsigned int v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      unsigned int v53 = v45 - ((v50 & v45) >> v51) + ((bswap32(*v49) & v50) >> v51);
      int v54 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      char v56 = v54 + 1;
      unsigned int v57 = v52 - ((v52 & v55) >> v56);
      goto LABEL_67;
  }
LABEL_69:
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  a3 += v9;
  uint64_t v66 = v7 - a3;
  a2 += v8;
  uint64_t v67 = v72 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v64) = (v39 | v13) & 0xF8000000 | (v39 >> 9) & 0x7C00 | ((unsigned __int16)v39 >> 6) & 0xFFE0 | (v39 >> 3) | ((v39 | v13) >> 29 << 24);
    *(unsigned char *)(v11 + 1 + v64) = v24 >> 22;
    if (a4 - 1 == v64) {
      return result;
    }
    if (((v66 | v67 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      uint64_t v10 = v10 - v65 + 4;
      v11 += v64 + 1;
      a4 += ~v64;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v68 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v36 = v68 + 4 * (a2 >> 32);
    uint64_t v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36) {
      uint64_t v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    }
    else {
      uint64_t v69 = (unsigned int *)v14;
    }
    if (v69 < v37) {
      uint64_t v69 = *(unsigned int **)(result + 32);
    }
    unsigned int v39 = bswap32(*v69);
    if (v5)
    {
      unsigned int v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        uint64_t v10 = v10 - v65 + 4;
        v11 += v64 + 1;
        a4 += ~v64;
        unsigned int v24 = -1;
        goto LABEL_40;
      }
    }
    v65 -= 4;
    ++v64;
    a3 += v9;
    v66 -= v9;
    a2 += v8;
    v67 -= v8;
    unsigned int v24 = -1;
  }
}

uint64_t rgb555_sample_rgba32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 72);
  uint64_t v7 = *(void *)(result + 88);
  uint64_t v74 = *(void *)(result + 80);
  uint64_t v8 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  int v72 = *(_DWORD *)(result + 188);
  uint64_t v10 = *(void *)(result + 152) - 4;
  uint64_t v11 = *(void *)(result + 144) - 1;
  uint64_t v12 = *(void *)(result + 32);
  if (*(void *)(result + 40)) {
    int v13 = 0;
  }
  else {
    int v13 = 255;
  }
  unint64_t v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v73 = *(void *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        uint64_t v23 = (a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v7;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1) {
          goto LABEL_37;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        unsigned int v24 = v72 | v22;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v6 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1) {
        goto LABEL_37;
      }
      if (v17 >= v15) {
        LODWORD(v1++*(_DWORD *)(result + 8) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      unsigned int v24 = v72 | v18;
      uint64_t v25 = v16 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v73) {
      break;
    }
    uint64_t v26 = *(void *)(result + 192);
    uint64_t v27 = v73 - *(void *)(result + 200);
    uint64_t v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v72;
      }
      uint64_t v29 = v27 + 0x1000000;
      uint64_t v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(unsigned char *)++uint64_t v11 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v74)
  {
    uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v29 = a2;
    goto LABEL_29;
  }
  uint64_t v31 = *(void *)(result + 192);
  uint64_t v32 = *(void *)(result + 200) + v74;
  uint64_t v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1) {
    goto LABEL_37;
  }
  if (v33 < v31) {
    unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v72;
  }
  uint64_t v29 = v32 - 0x1000000;
  uint64_t v30 = 28;
LABEL_29:
  if (v24 < 0x400000) {
    goto LABEL_37;
  }
  uint64_t v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  uint64_t v35 = v29 >> 32;
  unint64_t v36 = v34 + 4 * v35;
  uint64_t v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36) {
    unint64_t v38 = (unsigned int *)(v34 + 4 * v35);
  }
  else {
    unint64_t v38 = (unsigned int *)v14;
  }
  if (v38 < v37) {
    unint64_t v38 = *(unsigned int **)(result + 32);
  }
  unsigned int v39 = *v38;
  if (!v5) {
    goto LABEL_69;
  }
  unsigned int v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  int v41 = v40 & 0xF;
  int v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      int v59 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v59) {
        int v59 = (unsigned int *)v14;
      }
      if (v59 < v37) {
        int v59 = v37;
      }
      unsigned int v60 = interpolate_8888_21358[v42];
      char v61 = v42 + 1;
      unsigned int v57 = v39 - ((v60 & v39) >> v61);
      unsigned int v62 = (v60 & *v59) >> v61;
LABEL_68:
      unsigned int v39 = v57 + v62;
      break;
    case 2:
      int v63 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v63) {
        int v63 = (unsigned int *)v14;
      }
      if (v63 < v37) {
        int v63 = v37;
      }
      int v64 = (v40 >> 28) & 3;
      int v65 = interpolate_8888_21358[v64];
      char v56 = v64 + 1;
      unsigned int v57 = v39 - ((v65 & v39) >> v56);
      unsigned int v58 = v65 & *v63;
LABEL_67:
      unsigned int v62 = v58 >> v56;
      goto LABEL_68;
    case 3:
      int64_t v43 = (unint64_t)HIWORD(v40) << 56;
      int v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44) {
        int v44 = (unsigned int *)v14;
      }
      if (v44 < v37) {
        int v44 = v37;
      }
      unsigned int v45 = *v44;
      unint64_t v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46) {
        uint64_t v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      }
      else {
        uint64_t v47 = (unsigned int *)v14;
      }
      if (v47 < v37) {
        uint64_t v47 = v37;
      }
      unsigned int v48 = *v47;
      unint64_t v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49) {
        unint64_t v49 = (unsigned int *)v14;
      }
      if (v49 < v37) {
        unint64_t v49 = v37;
      }
      unsigned int v50 = interpolate_8888_21358[v42];
      char v51 = v42 + 1;
      unsigned int v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      unsigned int v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      int v54 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      char v56 = v54 + 1;
      unsigned int v57 = v52 - ((v52 & v55) >> v56);
      unsigned int v58 = v53 & v55;
      goto LABEL_67;
  }
LABEL_69:
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  a3 += v9;
  uint64_t v68 = v7 - a3;
  a2 += v8;
  uint64_t v69 = v74 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v66) = (v39 >> 17) & 0x7C00 | (v39 >> 14) & 0x3E0 | ((unsigned __int16)v39 >> 11) & 0xFFFFFF | (((v39 | v13) >> 3) << 27) | ((((v39 | v13) >> 5) & 7) << 24);
    *(unsigned char *)(v11 + 1 + v66) = v24 >> 22;
    if (a4 - 1 == v66) {
      return result;
    }
    if (((v68 | v69 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      uint64_t v10 = v10 - v67 + 4;
      v11 += v66 + 1;
      a4 += ~v66;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v36 = v70 + 4 * (a2 >> 32);
    uint64_t v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36) {
      uint64_t v71 = (unsigned int *)(v70 + 4 * (a2 >> 32));
    }
    else {
      uint64_t v71 = (unsigned int *)v14;
    }
    if (v71 < v37) {
      uint64_t v71 = *(unsigned int **)(result + 32);
    }
    unsigned int v39 = *v71;
    if (v5)
    {
      unsigned int v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        uint64_t v10 = v10 - v67 + 4;
        v11 += v66 + 1;
        a4 += ~v66;
        unsigned int v24 = -1;
        goto LABEL_40;
      }
    }
    v67 -= 4;
    ++v66;
    a3 += v9;
    v68 -= v9;
    a2 += v8;
    v69 -= v8;
    unsigned int v24 = -1;
  }
}

uint64_t rgb555_sample_RGBA32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  uint64_t v5 = *(void *)(result + 176);
  uint64_t v6 = *(void *)(result + 72);
  uint64_t v7 = *(void *)(result + 88);
  uint64_t v72 = *(void *)(result + 80);
  uint64_t v8 = *(void *)(result + 112);
  uint64_t v9 = *(void *)(result + 120);
  int v70 = *(_DWORD *)(result + 188);
  uint64_t v10 = *(void *)(result + 152) - 4;
  uint64_t v11 = *(void *)(result + 144) - 1;
  uint64_t v12 = *(void *)(result + 32);
  if (*(void *)(result + 40)) {
    int v13 = 0;
  }
  else {
    int v13 = 255;
  }
  unint64_t v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  uint64_t v71 = *(void *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        uint64_t v23 = (a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v7;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1) {
          goto LABEL_37;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        unsigned int v24 = v70 | v22;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v6 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1) {
        goto LABEL_37;
      }
      if (v17 >= v15) {
        LODWORD(v1++*(_DWORD *)(result + 8) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      unsigned int v24 = v70 | v18;
      uint64_t v25 = v16 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v71) {
      break;
    }
    uint64_t v26 = *(void *)(result + 192);
    uint64_t v27 = v71 - *(void *)(result + 200);
    uint64_t v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v28) >> 32) >> 15)) | v70;
      }
      uint64_t v29 = v27 + 0x1000000;
      uint64_t v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(unsigned char *)++uint64_t v11 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v72)
  {
    uint64_t v30 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v29 = a2;
    goto LABEL_29;
  }
  uint64_t v31 = *(void *)(result + 192);
  uint64_t v32 = *(void *)(result + 200) + v72;
  uint64_t v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1) {
    goto LABEL_37;
  }
  if (v33 < v31) {
    unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v33) >> 32) >> 15)) | v70;
  }
  uint64_t v29 = v32 - 0x1000000;
  uint64_t v30 = 28;
LABEL_29:
  if (v24 < 0x400000) {
    goto LABEL_37;
  }
  uint64_t v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  uint64_t v35 = v29 >> 32;
  unint64_t v36 = v34 + 4 * v35;
  uint64_t v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36) {
    unint64_t v38 = (unsigned int *)(v34 + 4 * v35);
  }
  else {
    unint64_t v38 = (unsigned int *)v14;
  }
  if (v38 < v37) {
    unint64_t v38 = *(unsigned int **)(result + 32);
  }
  unsigned int v39 = bswap32(*v38);
  if (!v5) {
    goto LABEL_69;
  }
  unsigned int v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  int v41 = v40 & 0xF;
  int v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      unsigned int v58 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v58) {
        unsigned int v58 = (unsigned int *)v14;
      }
      if (v58 < v37) {
        unsigned int v58 = v37;
      }
      int v59 = interpolate_8888_21358[v42];
      char v60 = v42 + 1;
      unsigned int v57 = v39 - ((v59 & v39) >> v60);
      unsigned int v61 = (bswap32(*v58) & v59) >> v60;
LABEL_68:
      unsigned int v39 = v57 + v61;
      break;
    case 2:
      unsigned int v62 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v62) {
        unsigned int v62 = (unsigned int *)v14;
      }
      if (v62 < v37) {
        unsigned int v62 = v37;
      }
      unsigned int v53 = bswap32(*v62);
      int v63 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v63];
      char v56 = v63 + 1;
      unsigned int v57 = v39 - ((v55 & v39) >> v56);
LABEL_67:
      unsigned int v61 = (v53 & v55) >> v56;
      goto LABEL_68;
    case 3:
      int64_t v43 = (unint64_t)HIWORD(v40) << 56;
      int v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44) {
        int v44 = (unsigned int *)v14;
      }
      if (v44 < v37) {
        int v44 = v37;
      }
      unsigned int v45 = bswap32(*v44);
      unint64_t v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46) {
        uint64_t v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      }
      else {
        uint64_t v47 = (unsigned int *)v14;
      }
      if (v47 < v37) {
        uint64_t v47 = v37;
      }
      unsigned int v48 = bswap32(*v47);
      unint64_t v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49) {
        unint64_t v49 = (unsigned int *)v14;
      }
      if (v49 < v37) {
        unint64_t v49 = v37;
      }
      int v50 = interpolate_8888_21358[v42];
      char v51 = v42 + 1;
      unsigned int v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      unsigned int v53 = v45 - ((v50 & v45) >> v51) + ((bswap32(*v49) & v50) >> v51);
      int v54 = (v40 >> 28) & 3;
      int v55 = interpolate_8888_21358[v54];
      char v56 = v54 + 1;
      unsigned int v57 = v52 - ((v52 & v55) >> v56);
      goto LABEL_67;
  }
LABEL_69:
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  a3 += v9;
  uint64_t v66 = v7 - a3;
  a2 += v8;
  uint64_t v67 = v72 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v64) = (v39 >> 17) & 0x7C00 | (v39 >> 14) & 0x3E0 | ((unsigned __int16)v39 >> 11) & 0xFFFFFF | (((v39 | v13) >> 3) << 27) | ((((v39 | v13) >> 5) & 7) << 24);
    *(unsigned char *)(v11 + 1 + v64) = v24 >> 22;
    if (a4 - 1 == v64) {
      return result;
    }
    if (((v66 | v67 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      uint64_t v10 = v10 - v65 + 4;
      v11 += v64 + 1;
      a4 += ~v64;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v68 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    unint64_t v36 = v68 + 4 * (a2 >> 32);
    uint64_t v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36) {
      uint64_t v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    }
    else {
      uint64_t v69 = (unsigned int *)v14;
    }
    if (v69 < v37) {
      uint64_t v69 = *(unsigned int **)(result + 32);
    }
    unsigned int v39 = bswap32(*v69);
    if (v5)
    {
      unsigned int v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        uint64_t v10 = v10 - v65 + 4;
        v11 += v64 + 1;
        a4 += ~v64;
        unsigned int v24 = -1;
        goto LABEL_40;
      }
    }
    v65 -= 4;
    ++v64;
    a3 += v9;
    v66 -= v9;
    a2 += v8;
    v67 -= v8;
    unsigned int v24 = -1;
  }
}

uint64_t rgb555_sample_RGB24(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  int v5 = *(_DWORD *)(result + 24);
  uint64_t v6 = *(void *)(result + 176);
  uint64_t v7 = *(void *)(result + 72);
  uint64_t v8 = *(void *)(result + 80);
  uint64_t v9 = *(void *)(result + 88);
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v11 = *(void *)(result + 120);
  uint64_t v12 = *(void *)(result + 152) - 4;
  uint64_t v13 = *(void *)(result + 144) - 1;
  int v73 = *(_DWORD *)(result + 188);
  unint64_t v14 = v4 + (3 * *(_DWORD *)(result + 256)) + ((*(_DWORD *)(result + 260) - 1) * v5) - 3;
  uint64_t v74 = *(void *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v9)
      {
        uint64_t v24 = (a3 >> 22) & 0x3C0;
        unsigned int v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        uint64_t v27 = v8;
        uint64_t v18 = v74;
      }
      else
      {
        uint64_t v20 = *(void *)(result + 216);
        uint64_t v21 = *(void *)(result + 224) + v9;
        uint64_t v22 = v21 - a3 + (v20 >> 1);
        uint64_t v18 = v74;
        if (v22 < 1) {
          goto LABEL_34;
        }
        if (v22 >= v20) {
          LODWORD(v23) = 0x3FFFFFFF;
        }
        else {
          unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v22) >> 32;
        }
        uint64_t v27 = v8;
        unsigned int v25 = v73 | v23;
        uint64_t v26 = v21 - 0x1000000;
        uint64_t v24 = 448;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v7 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      uint64_t v18 = v74;
      if (v17 < 1) {
        goto LABEL_34;
      }
      if (v17 >= v15) {
        LODWORD(v19) = 0x3FFFFFFF;
      }
      else {
        unint64_t v19 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      uint64_t v27 = v8;
      unsigned int v25 = v73 | v19;
      uint64_t v26 = v16 + 0x1000000;
      uint64_t v24 = 512;
    }
    if (a2 >= v18) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v18 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v73;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v10;
    a3 += v11;
    v12 += 4;
    *(unsigned char *)++uint64_t v13 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v27)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_26;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v27;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_34;
  }
  if (v35 < v33) {
    unsigned int v25 = ((v25 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v73;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_26:
  if (v25 < 0x400000) {
    goto LABEL_34;
  }
  uint64_t v36 = v4 + SHIDWORD(v26) * (uint64_t)v5;
  uint64_t v37 = 3 * (v31 >> 32);
  uint64_t v38 = v36 + v37;
  unsigned int v39 = *(unsigned __int8 **)(result + 32);
  if (v14 >= v36 + v37) {
    unsigned int v40 = (unsigned __int8 *)(v36 + v37);
  }
  else {
    unsigned int v40 = (unsigned __int8 *)v14;
  }
  if (v40 < v39) {
    unsigned int v40 = *(unsigned __int8 **)(result + 32);
  }
  unsigned int v41 = (v40[1] << 16) | (*v40 << 24) | (v40[2] << 8) | 0xFF;
  if (!v6) {
    goto LABEL_66;
  }
  unsigned int v42 = *(_DWORD *)(v6 + (v32 | v24));
LABEL_37:
  int v43 = v42 & 0xF;
  int v44 = HIBYTE(v42) & 3;
  switch(v43)
  {
    case 1:
      char v60 = (unsigned __int8 *)(v38 + SBYTE1(v42) * (uint64_t)v5);
      if (v14 < (unint64_t)v60) {
        char v60 = (unsigned __int8 *)v14;
      }
      if (v60 < v39) {
        char v60 = v39;
      }
      unsigned int v61 = interpolate_8888_21358[v44];
      char v62 = v44 + 1;
      unsigned int v59 = v41 - ((v61 & v41) >> v62);
      unsigned int v63 = (((v60[1] << 16) | (*v60 << 24) | (v60[2] << 8) | 0xFF) & v61) >> v62;
LABEL_65:
      unsigned int v41 = v59 + v63;
      break;
    case 2:
      uint64_t v64 = (unsigned __int8 *)(v38 + 3 * SBYTE2(v42));
      if (v14 < (unint64_t)v64) {
        uint64_t v64 = (unsigned __int8 *)v14;
      }
      if (v64 < v39) {
        uint64_t v64 = v39;
      }
      int v55 = (v64[1] << 16) | (*v64 << 24) | (v64[2] << 8) | 0xFF;
      int v65 = (v42 >> 28) & 3;
      unsigned int v57 = interpolate_8888_21358[v65];
      char v58 = v65 + 1;
      unsigned int v59 = v41 - ((v57 & v41) >> v58);
LABEL_64:
      unsigned int v63 = (v55 & v57) >> v58;
      goto LABEL_65;
    case 3:
      uint64_t v45 = 3 * SBYTE2(v42);
      unint64_t v46 = (unsigned __int8 *)(v38 + v45);
      if (v14 < v38 + v45) {
        unint64_t v46 = (unsigned __int8 *)v14;
      }
      if (v46 < v39) {
        unint64_t v46 = v39;
      }
      int v47 = (v46[1] << 16) | (*v46 << 24) | (v46[2] << 8) | 0xFF;
      unint64_t v48 = v38 + SBYTE1(v42) * (uint64_t)v5;
      if (v14 >= v48) {
        unint64_t v49 = (unsigned __int8 *)(v38 + SBYTE1(v42) * (uint64_t)v5);
      }
      else {
        unint64_t v49 = (unsigned __int8 *)v14;
      }
      if (v49 < v39) {
        unint64_t v49 = v39;
      }
      int v50 = (v49[1] << 16) | (*v49 << 24) | (v49[2] << 8) | 0xFF;
      char v51 = (unsigned __int8 *)(v48 + v45);
      if (v14 < (unint64_t)v51) {
        char v51 = (unsigned __int8 *)v14;
      }
      if (v51 < v39) {
        char v51 = v39;
      }
      unsigned int v52 = interpolate_8888_21358[v44];
      char v53 = v44 + 1;
      unsigned int v54 = v41 - ((v52 & v41) >> v53) + ((v50 & v52) >> v53);
      int v55 = v47 - ((v52 & v47) >> v53) + ((((v51[1] << 16) | (*v51 << 24) | (v51[2] << 8) | 0xFF) & v52) >> v53);
      int v56 = (v42 >> 28) & 3;
      unsigned int v57 = interpolate_8888_21358[v56];
      char v58 = v56 + 1;
      unsigned int v59 = v54 - ((v54 & v57) >> v58);
      goto LABEL_64;
  }
LABEL_66:
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  a3 += v11;
  uint64_t v68 = v9 - a3;
  a2 += v10;
  uint64_t v69 = v8 - a2;
  while (1)
  {
    *(_DWORD *)(v12 + 4 + 4 * v67) = (v41 >> 17) & 0x7C00 | (v41 >> 14) & 0x3E0 | ((unsigned __int16)v41 >> 11) & 0xFFFFFF | ((v41 >> 3) << 27) | (v41 >> 5 << 24);
    *(unsigned char *)(v13 + 1 + v67) = v25 >> 22;
    if (a4 - 1 == v67) {
      return result;
    }
    if (((v68 | v69 | (a3 - v7) | (a2 - v74)) & 0x8000000000000000) != 0)
    {
      v13 += v67 + 1;
      uint64_t v12 = v12 - v66 + 4;
      a4 += ~v67;
      if (a4) {
        goto LABEL_2;
      }
      return result;
    }
    uint64_t v70 = v4 + SHIDWORD(a3) * (uint64_t)v5;
    uint64_t v71 = 3 * (a2 >> 32);
    uint64_t v38 = v70 + v71;
    unsigned int v39 = *(unsigned __int8 **)(result + 32);
    if (v14 >= v70 + v71) {
      uint64_t v72 = (unsigned __int8 *)(v70 + v71);
    }
    else {
      uint64_t v72 = (unsigned __int8 *)v14;
    }
    if (v72 < v39) {
      uint64_t v72 = *(unsigned __int8 **)(result + 32);
    }
    unsigned int v41 = (v72[1] << 16) | (*v72 << 24) | (v72[2] << 8) | 0xFF;
    if (v6)
    {
      unsigned int v42 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v42 & 0xF) != 0)
      {
        v13 += v67 + 1;
        uint64_t v12 = v12 - v66 + 4;
        a4 += ~v67;
        unsigned int v25 = -1;
        goto LABEL_37;
      }
    }
    ++v67;
    v66 -= 4;
    a3 += v11;
    v68 -= v11;
    a2 += v10;
    v69 -= v10;
    unsigned int v25 = -1;
  }
}

uint64_t rgb555_sample_rgb555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  int v133 = *(_DWORD *)(result + 28);
  uint64_t v5 = *(void *)(result + 112);
  uint64_t v6 = *(void *)(result + 48);
  uint64_t v7 = *(void *)(result + 56);
  if (v6)
  {
    uint64_t v132 = *(void *)(result + 112);
    if (v5 > v6) {
      uint64_t v132 = v5 % v6;
    }
  }
  else
  {
    uint64_t v132 = 0;
  }
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v9 = *(void *)(result + 40);
  uint64_t v134 = *(void *)(result + 32);
  uint64_t v10 = *(void *)(result + 120);
  if (v7)
  {
    uint64_t v11 = v10 % v7;
    if (v10 <= v7) {
      uint64_t v11 = *(void *)(result + 120);
    }
    uint64_t v131 = v11;
  }
  else
  {
    uint64_t v131 = 0;
  }
  uint64_t v127 = *(void *)(result + 80);
  uint64_t v129 = *(void *)(result + 88);
  uint64_t v12 = *(void *)(result + 152) - 4;
  uint64_t v13 = *(void *)(result + 144) - 1;
  if (v9) {
    int v14 = 0;
  }
  else {
    int v14 = -16777216;
  }
  int v15 = *(_DWORD *)(result + 260) - 1;
  uint64_t v16 = *(unsigned int *)(result + 256);
  int v126 = *(_DWORD *)(result + 188);
  uint64_t v17 = (unsigned __int8 *)(v9 + (v16 - 1) + (v15 * v133));
  unint64_t v18 = v134 + (v15 * v4) + 2 * v16 - 4;
  uint64_t v128 = *(void *)(result + 64);
  uint64_t v130 = *(void *)(result + 72);
  while (1)
  {
    if (a3 < v130)
    {
      uint64_t v19 = *(void *)(result + 216);
      uint64_t v20 = v130 - *(void *)(result + 224);
      uint64_t v21 = a3 - v20 + (v19 >> 1);
      int v22 = a4;
      if (v21 < 1) {
        goto LABEL_61;
      }
      if (v21 >= v19) {
        LODWORD(v23) = 0x3FFFFFFF;
      }
      else {
        unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
      }
      unsigned int v30 = v126 | v23;
      uint64_t v31 = v20 + 0x1000000;
      uint64_t v28 = a3 - v31;
      uint64_t v29 = 512;
      goto LABEL_25;
    }
    if (a3 <= v129)
    {
      uint64_t v28 = 0;
      uint64_t v29 = ((unint64_t)a3 >> 22) & 0x3C0;
      unsigned int v30 = 0x3FFFFFFF;
      uint64_t v31 = a3;
      int v22 = a4;
LABEL_25:
      uint64_t v32 = v128;
      goto LABEL_28;
    }
    uint64_t v24 = *(void *)(result + 216);
    uint64_t v25 = *(void *)(result + 224) + v129;
    uint64_t v26 = v25 - a3 + (v24 >> 1);
    int v22 = a4;
    if (v26 < 1) {
      goto LABEL_61;
    }
    if (v26 >= v24) {
      LODWORD(v27) = 0x3FFFFFFF;
    }
    else {
      unint64_t v27 = (unint64_t)(*(void *)(result + 232) * v26) >> 32;
    }
    uint64_t v32 = v128;
    unsigned int v30 = v126 | v27;
    uint64_t v31 = v25 - 0x1000000;
    uint64_t v28 = a3 - v31;
    uint64_t v29 = 448;
LABEL_28:
    if (a2 >= v32) {
      break;
    }
    uint64_t v33 = *(void *)(result + 192);
    uint64_t v34 = v32 - *(void *)(result + 200);
    uint64_t v35 = a2 - v34 + (v33 >> 1);
    if (v35 >= 1)
    {
      if (v35 < v33) {
        unsigned int v30 = ((v30 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v126;
      }
      uint64_t v36 = v34 + 0x1000000;
      uint64_t v37 = a2 - (v34 + 0x1000000);
      uint64_t v38 = 32;
      goto LABEL_39;
    }
LABEL_61:
    int v56 = v22 - 1;
    a2 += v5;
    a3 += v10;
    v12 += 4;
    *(unsigned char *)++uint64_t v13 = 0;
LABEL_62:
    a4 = v56;
    if (!v56) {
      return result;
    }
  }
  if (a2 <= v127)
  {
    uint64_t v37 = 0;
    uint64_t v38 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v36 = a2;
    goto LABEL_39;
  }
  uint64_t v39 = *(void *)(result + 192);
  uint64_t v40 = *(void *)(result + 200) + v127;
  uint64_t v41 = v40 - a2 + (v39 >> 1);
  if (v41 < 1) {
    goto LABEL_61;
  }
  if (v41 < v39) {
    unsigned int v30 = ((v30 >> 15) * (((unint64_t)(*(void *)(result + 208) * v41) >> 32) >> 15)) | v126;
  }
  uint64_t v36 = v40 - 0x1000000;
  uint64_t v37 = a2 - (v40 - 0x1000000);
  uint64_t v38 = 28;
LABEL_39:
  if (v30 < 0x400000) {
    goto LABEL_61;
  }
  if (v6)
  {
    uint64_t v42 = (v7 & ((v31 % v7) >> 63)) + v31 % v7;
    uint64_t v43 = (v6 & ((v36 % v6) >> 63)) + v36 % v6;
    if (v42 >= v7) {
      uint64_t v44 = v7;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v31 = v42 - v44;
    if (v43 >= v6) {
      uint64_t v45 = v6;
    }
    else {
      uint64_t v45 = 0;
    }
    uint64_t v36 = v43 - v45;
    v28 += v31;
    v37 += v36;
  }
  uint64_t v46 = v31 >> 32;
  uint64_t v47 = v36 >> 32;
  uint64_t v48 = v134 + (int)v46 * (uint64_t)v4;
  unint64_t v49 = v48 + 2 * v47;
  int v50 = *(unsigned __int16 **)(result + 32);
  if (v18 >= v49) {
    char v51 = (unsigned __int16 *)(v48 + 2 * v47);
  }
  else {
    char v51 = (unsigned __int16 *)v18;
  }
  if (v51 < v50) {
    char v51 = *(unsigned __int16 **)(result + 32);
  }
  unsigned int v52 = *v51;
  if (!v9)
  {
    unint64_t v53 = 0;
    if (!v8) {
      goto LABEL_140;
    }
LABEL_65:
    unsigned int v57 = *(_DWORD *)(v8 + (v38 | v29));
LABEL_67:
    int v58 = v57 & 0xF;
    uint64_t v59 = v57 >> 8;
    unsigned int v60 = HIBYTE(v57) & 3;
    if (v58 == 1)
    {
      LODWORD(v86) = SBYTE1(v57);
      if (v6)
      {
        uint64_t v87 = v59 << 56;
        uint64_t v88 = v28 + (v87 >> 24);
        uint64_t v89 = v7 & (v88 >> 63);
        if (v89 + v88 >= v7) {
          uint64_t v90 = v7;
        }
        else {
          uint64_t v90 = 0;
        }
        uint64_t v86 = (v89 + (v87 >> 24) - v90) >> 32;
      }
      uint64_t v91 = (unsigned __int16 *)(v49 + (int)v86 * (uint64_t)v4);
      if (v18 < (unint64_t)v91) {
        uint64_t v91 = (unsigned __int16 *)v18;
      }
      if (v91 < v50) {
        uint64_t v91 = v50;
      }
      unsigned int v92 = *v91;
      if (v9)
      {
        int v93 = (unsigned __int8 *)(v53 + (int)v86 * (uint64_t)v133);
        if (v17 < v93) {
          int v93 = v17;
        }
        if ((unint64_t)v93 < *(void *)(result + 40)) {
          int v93 = *(unsigned __int8 **)(result + 40);
        }
        v92 |= *v93 << 24;
      }
      int v94 = interpolate_8555_21359[v60];
      unsigned int v95 = v52 - ((v94 & v52) >> (v60 + 1));
      unsigned int v96 = (v94 & v92) >> (v60 + 1);
    }
    else
    {
      if (v58 != 2)
      {
        if (v58 == 3)
        {
          unsigned int v61 = HIBYTE(v57) & 3;
          unsigned int v125 = v30;
          int v124 = v22;
          LODWORD(v62) = SBYTE1(v57);
          uint64_t v63 = SBYTE2(v57);
          if (v6)
          {
            uint64_t v64 = v59 << 56;
            uint64_t v65 = v28 + (v64 >> 24);
            uint64_t v66 = v37 + ((uint64_t)SBYTE2(v57) << 32);
            uint64_t v67 = v7 & (v65 >> 63);
            uint64_t v68 = v6 & (v66 >> 63);
            uint64_t v69 = v68 + v66;
            if (v67 + v65 >= v7) {
              uint64_t v70 = v7;
            }
            else {
              uint64_t v70 = 0;
            }
            if (v69 >= v6) {
              uint64_t v71 = v6;
            }
            else {
              uint64_t v71 = 0;
            }
            uint64_t v62 = (v67 + (v64 >> 24) - v70) >> 32;
            uint64_t v63 = (v68 + ((uint64_t)((unint64_t)HIWORD(v57) << 56) >> 24) - v71) >> 32;
          }
          uint64_t v72 = (unsigned __int16 *)(v49 + 2 * v63);
          if (v18 < (unint64_t)v72) {
            uint64_t v72 = (unsigned __int16 *)v18;
          }
          if (v72 < v50) {
            uint64_t v72 = v50;
          }
          unsigned int v73 = *v72;
          unint64_t v74 = v49 + (int)v62 * (uint64_t)v4;
          if (v18 >= v74) {
            uint64_t v75 = (unsigned __int16 *)(v49 + (int)v62 * (uint64_t)v4);
          }
          else {
            uint64_t v75 = (unsigned __int16 *)v18;
          }
          if (v75 < v50) {
            uint64_t v75 = v50;
          }
          unsigned int v76 = *v75;
          uint64_t v77 = (unsigned __int16 *)(v74 + 2 * v63);
          if (v18 < (unint64_t)v77) {
            uint64_t v77 = (unsigned __int16 *)v18;
          }
          if (v77 >= v50) {
            int v50 = v77;
          }
          unsigned int v78 = *v50;
          if (v9)
          {
            int v79 = (unsigned __int8 *)(v53 + v63);
            unint64_t v80 = *(void *)(result + 40);
            if ((unint64_t)v17 < v53 + v63) {
              int v79 = v17;
            }
            if ((unint64_t)v79 < v80) {
              int v79 = *(unsigned __int8 **)(result + 40);
            }
            v73 |= *v79 << 24;
            uint64_t v81 = (unsigned __int8 *)(v53 + (int)v62 * (uint64_t)v133);
            if (v17 >= v81) {
              unint64_t v82 = v81;
            }
            else {
              unint64_t v82 = v17;
            }
            if ((unint64_t)v82 < v80) {
              unint64_t v82 = *(unsigned __int8 **)(result + 40);
            }
            v76 |= *v82 << 24;
            uint64_t v83 = &v81[v63];
            if (v17 < v83) {
              uint64_t v83 = v17;
            }
            if ((unint64_t)v83 < v80) {
              uint64_t v83 = *(unsigned __int8 **)(result + 40);
            }
            v78 |= *v83 << 24;
          }
          int v84 = interpolate_8555_21359[v61];
          unsigned int v85 = v52 - ((v84 & v52) >> (v61 + 1)) + ((v84 & v76) >> (v61 + 1));
          unsigned int v52 = v85
              - ((v85 & interpolate_8555_21359[(v57 >> 28) & 3]) >> (((v57 >> 28) & 3) + 1))
              + (((v73 - ((v84 & v73) >> (v61 + 1)) + ((v84 & v78) >> (v61 + 1))) & interpolate_8555_21359[(v57 >> 28) & 3]) >> (((v57 >> 28) & 3) + 1));
          int v22 = v124;
          unsigned int v30 = v125;
        }
        goto LABEL_140;
      }
      uint64_t v97 = SBYTE2(v57);
      if (v6)
      {
        int64_t v98 = (unint64_t)HIWORD(v57) << 56;
        uint64_t v99 = v37 + (v98 >> 24);
        uint64_t v100 = v6 & (v99 >> 63);
        if (v100 + v99 >= v6) {
          uint64_t v101 = v6;
        }
        else {
          uint64_t v101 = 0;
        }
        uint64_t v97 = (v100 + (v98 >> 24) - v101) >> 32;
      }
      uint64_t v102 = (unsigned __int16 *)(v49 + 2 * v97);
      if (v18 < (unint64_t)v102) {
        uint64_t v102 = (unsigned __int16 *)v18;
      }
      if (v102 < v50) {
        uint64_t v102 = v50;
      }
      unsigned int v103 = *v102;
      if (v9)
      {
        uint64_t v104 = (unsigned __int8 *)(v53 + v97);
        if (v17 < v104) {
          uint64_t v104 = v17;
        }
        if ((unint64_t)v104 < *(void *)(result + 40)) {
          uint64_t v104 = *(unsigned __int8 **)(result + 40);
        }
        v103 |= *v104 << 24;
      }
      unsigned int v105 = (v57 >> 28) & 3;
      int v106 = interpolate_8555_21359[v105];
      LOBYTE(v105) = v105 + 1;
      unsigned int v95 = v52 - ((v106 & v52) >> v105);
      unsigned int v96 = (v106 & v103) >> v105;
    }
    unsigned int v52 = v95 + v96;
    goto LABEL_140;
  }
  unint64_t v53 = v9 + (int)v46 * (uint64_t)v133 + v47;
  unsigned int v54 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v17 >= v53) {
    int v55 = (unsigned __int8 *)v53;
  }
  else {
    int v55 = v17;
  }
  if (v55 >= v54) {
    unsigned int v54 = v55;
  }
  v52 |= *v54 << 24;
  if (v8) {
    goto LABEL_65;
  }
LABEL_140:
  *(_DWORD *)(v12 + 4) = v14 | (v52 >> 29 << 24) | v52;
  *(unsigned char *)(v13 + 1) = v30 >> 22;
  if (v22 != 1)
  {
    int v107 = v22;
    uint64_t v108 = 0;
    a2 += v5;
    uint64_t v109 = v127 - a2;
    a3 += v10;
    uint64_t v110 = v129 - a3;
    uint64_t v111 = -4;
    while (((v110 | v109 | (a3 - v130) | (a2 - v128)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v112 = (v7 & ((v28 + v131) >> 63)) + v28 + v131;
        uint64_t v113 = (v6 & ((v37 + v132) >> 63)) + v37 + v132;
        if (v112 >= v7) {
          uint64_t v114 = v7;
        }
        else {
          uint64_t v114 = 0;
        }
        uint64_t v115 = v112 - v114;
        if (v113 >= v6) {
          uint64_t v116 = v6;
        }
        else {
          uint64_t v116 = 0;
        }
        uint64_t v117 = v113 - v116;
        uint64_t v37 = v117;
        uint64_t v28 = v115;
      }
      else
      {
        uint64_t v117 = a2;
        uint64_t v115 = a3;
      }
      uint64_t v118 = v115 >> 32;
      uint64_t v119 = v117 >> 32;
      unint64_t v49 = v134 + SHIDWORD(v115) * (uint64_t)v4 + 2 * (v117 >> 32);
      int v50 = *(unsigned __int16 **)(result + 32);
      if (v18 >= v49) {
        long long v120 = (unsigned __int16 *)v49;
      }
      else {
        long long v120 = (unsigned __int16 *)v18;
      }
      if (v120 < v50) {
        long long v120 = *(unsigned __int16 **)(result + 32);
      }
      unsigned int v52 = *v120;
      if (v9)
      {
        unint64_t v53 = v9 + (int)v118 * (uint64_t)v133 + v119;
        uint64_t v121 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v17 >= v53) {
          unint64_t v122 = (unsigned __int8 *)v53;
        }
        else {
          unint64_t v122 = v17;
        }
        if (v122 >= v121) {
          uint64_t v121 = v122;
        }
        v52 |= *v121 << 24;
      }
      if (v8)
      {
        unsigned int v57 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v57 & 0xF) != 0)
        {
          v13 += v108 + 1;
          v12 -= v111;
          int v22 = ~v108 + v107;
          unsigned int v30 = -1;
          goto LABEL_67;
        }
      }
      *(_DWORD *)(v12 + 4 * v108 + ++*(_DWORD *)(result + 8) = v14 | (v52 >> 29 << 24) | v52;
      uint64_t v123 = v13 + v108++;
      v111 -= 4;
      *(unsigned char *)(v123 + 2) = -1;
      a2 += v5;
      v109 -= v5;
      a3 += v10;
      v110 -= v10;
      if (v107 - 1 == v108) {
        return result;
      }
    }
    v13 += v108 + 1;
    v12 -= v111;
    int v56 = ~v108 + v107;
    goto LABEL_62;
  }
  return result;
}

uint64_t rgb555_sample_RGB555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(result + 24);
  int v133 = *(_DWORD *)(result + 28);
  uint64_t v5 = *(void *)(result + 112);
  uint64_t v6 = *(void *)(result + 48);
  uint64_t v7 = *(void *)(result + 56);
  if (v6)
  {
    uint64_t v132 = *(void *)(result + 112);
    if (v5 > v6) {
      uint64_t v132 = v5 % v6;
    }
  }
  else
  {
    uint64_t v132 = 0;
  }
  uint64_t v8 = *(void *)(result + 176);
  uint64_t v9 = *(void *)(result + 40);
  uint64_t v134 = *(void *)(result + 32);
  uint64_t v10 = *(void *)(result + 120);
  if (v7)
  {
    uint64_t v11 = v10 % v7;
    if (v10 <= v7) {
      uint64_t v11 = *(void *)(result + 120);
    }
    uint64_t v131 = v11;
  }
  else
  {
    uint64_t v131 = 0;
  }
  uint64_t v127 = *(void *)(result + 80);
  uint64_t v129 = *(void *)(result + 88);
  uint64_t v12 = *(void *)(result + 152) - 4;
  uint64_t v13 = *(void *)(result + 144) - 1;
  if (v9) {
    int v14 = 0;
  }
  else {
    int v14 = -16777216;
  }
  int v15 = *(_DWORD *)(result + 260) - 1;
  uint64_t v16 = *(unsigned int *)(result + 256);
  int v126 = *(_DWORD *)(result + 188);
  uint64_t v17 = (unsigned __int8 *)(v9 + (v16 - 1) + (v15 * v133));
  unint64_t v18 = v134 + (v15 * v4) + 2 * v16 - 4;
  uint64_t v128 = *(void *)(result + 64);
  uint64_t v130 = *(void *)(result + 72);
  while (1)
  {
    if (a3 < v130)
    {
      uint64_t v19 = *(void *)(result + 216);
      uint64_t v20 = v130 - *(void *)(result + 224);
      uint64_t v21 = a3 - v20 + (v19 >> 1);
      int v22 = a4;
      if (v21 < 1) {
        goto LABEL_61;
      }
      if (v21 >= v19) {
        LODWORD(v23) = 0x3FFFFFFF;
      }
      else {
        unint64_t v23 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
      }
      unsigned int v30 = v126 | v23;
      uint64_t v31 = v20 + 0x1000000;
      uint64_t v28 = a3 - v31;
      uint64_t v29 = 512;
      goto LABEL_25;
    }
    if (a3 <= v129)
    {
      uint64_t v28 = 0;
      uint64_t v29 = ((unint64_t)a3 >> 22) & 0x3C0;
      unsigned int v30 = 0x3FFFFFFF;
      uint64_t v31 = a3;
      int v22 = a4;
LABEL_25:
      uint64_t v32 = v128;
      goto LABEL_28;
    }
    uint64_t v24 = *(void *)(result + 216);
    uint64_t v25 = *(void *)(result + 224) + v129;
    uint64_t v26 = v25 - a3 + (v24 >> 1);
    int v22 = a4;
    if (v26 < 1) {
      goto LABEL_61;
    }
    if (v26 >= v24) {
      LODWORD(v27) = 0x3FFFFFFF;
    }
    else {
      unint64_t v27 = (unint64_t)(*(void *)(result + 232) * v26) >> 32;
    }
    uint64_t v32 = v128;
    unsigned int v30 = v126 | v27;
    uint64_t v31 = v25 - 0x1000000;
    uint64_t v28 = a3 - v31;
    uint64_t v29 = 448;
LABEL_28:
    if (a2 >= v32) {
      break;
    }
    uint64_t v33 = *(void *)(result + 192);
    uint64_t v34 = v32 - *(void *)(result + 200);
    uint64_t v35 = a2 - v34 + (v33 >> 1);
    if (v35 >= 1)
    {
      if (v35 < v33) {
        unsigned int v30 = ((v30 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v126;
      }
      uint64_t v36 = v34 + 0x1000000;
      uint64_t v37 = a2 - (v34 + 0x1000000);
      uint64_t v38 = 32;
      goto LABEL_39;
    }
LABEL_61:
    int v56 = v22 - 1;
    a2 += v5;
    a3 += v10;
    v12 += 4;
    *(unsigned char *)++uint64_t v13 = 0;
LABEL_62:
    a4 = v56;
    if (!v56) {
      return result;
    }
  }
  if (a2 <= v127)
  {
    uint64_t v37 = 0;
    uint64_t v38 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v36 = a2;
    goto LABEL_39;
  }
  uint64_t v39 = *(void *)(result + 192);
  uint64_t v40 = *(void *)(result + 200) + v127;
  uint64_t v41 = v40 - a2 + (v39 >> 1);
  if (v41 < 1) {
    goto LABEL_61;
  }
  if (v41 < v39) {
    unsigned int v30 = ((v30 >> 15) * (((unint64_t)(*(void *)(result + 208) * v41) >> 32) >> 15)) | v126;
  }
  uint64_t v36 = v40 - 0x1000000;
  uint64_t v37 = a2 - (v40 - 0x1000000);
  uint64_t v38 = 28;
LABEL_39:
  if (v30 < 0x400000) {
    goto LABEL_61;
  }
  if (v6)
  {
    uint64_t v42 = (v7 & ((v31 % v7) >> 63)) + v31 % v7;
    uint64_t v43 = (v6 & ((v36 % v6) >> 63)) + v36 % v6;
    if (v42 >= v7) {
      uint64_t v44 = v7;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v31 = v42 - v44;
    if (v43 >= v6) {
      uint64_t v45 = v6;
    }
    else {
      uint64_t v45 = 0;
    }
    uint64_t v36 = v43 - v45;
    v28 += v31;
    v37 += v36;
  }
  uint64_t v46 = v31 >> 32;
  uint64_t v47 = v36 >> 32;
  uint64_t v48 = v134 + (int)v46 * (uint64_t)v4;
  unint64_t v49 = v48 + 2 * v47;
  int v50 = *(unsigned __int16 **)(result + 32);
  if (v18 >= v49) {
    char v51 = (unsigned __int16 *)(v48 + 2 * v47);
  }
  else {
    char v51 = (unsigned __int16 *)v18;
  }
  if (v51 < v50) {
    char v51 = *(unsigned __int16 **)(result + 32);
  }
  unsigned int v52 = bswap32(*v51) >> 16;
  if (!v9)
  {
    unint64_t v53 = 0;
    if (!v8) {
      goto LABEL_140;
    }
LABEL_65:
    unsigned int v57 = *(_DWORD *)(v8 + (v38 | v29));
LABEL_67:
    int v58 = v57 & 0xF;
    uint64_t v59 = v57 >> 8;
    int v60 = HIBYTE(v57) & 3;
    if (v58 == 1)
    {
      LODWORD(v86) = SBYTE1(v57);
      if (v6)
      {
        uint64_t v87 = v59 << 56;
        uint64_t v88 = v28 + (v87 >> 24);
        uint64_t v89 = v7 & (v88 >> 63);
        if (v89 + v88 >= v7) {
          uint64_t v90 = v7;
        }
        else {
          uint64_t v90 = 0;
        }
        uint64_t v86 = (v89 + (v87 >> 24) - v90) >> 32;
      }
      uint64_t v91 = (unsigned __int16 *)(v49 + (int)v86 * (uint64_t)v4);
      if (v18 < (unint64_t)v91) {
        uint64_t v91 = (unsigned __int16 *)v18;
      }
      if (v91 < v50) {
        uint64_t v91 = v50;
      }
      unsigned int v92 = bswap32(*v91) >> 16;
      if (v9)
      {
        int v93 = (unsigned __int8 *)(v53 + (int)v86 * (uint64_t)v133);
        if (v17 < v93) {
          int v93 = v17;
        }
        if ((unint64_t)v93 < *(void *)(result + 40)) {
          int v93 = *(unsigned __int8 **)(result + 40);
        }
        v92 |= *v93 << 24;
      }
      int v94 = interpolate_8555_21359[v60];
      unsigned int v95 = v52 - ((v94 & v52) >> (v60 + 1));
      unsigned int v96 = (v94 & v92) >> (v60 + 1);
    }
    else
    {
      if (v58 != 2)
      {
        if (v58 == 3)
        {
          int v61 = HIBYTE(v57) & 3;
          unsigned int v125 = v30;
          int v124 = v22;
          LODWORD(v62) = SBYTE1(v57);
          uint64_t v63 = SBYTE2(v57);
          if (v6)
          {
            uint64_t v64 = v59 << 56;
            uint64_t v65 = v28 + (v64 >> 24);
            uint64_t v66 = v37 + ((uint64_t)SBYTE2(v57) << 32);
            uint64_t v67 = v7 & (v65 >> 63);
            uint64_t v68 = v6 & (v66 >> 63);
            uint64_t v69 = v68 + v66;
            if (v67 + v65 >= v7) {
              uint64_t v70 = v7;
            }
            else {
              uint64_t v70 = 0;
            }
            if (v69 >= v6) {
              uint64_t v71 = v6;
            }
            else {
              uint64_t v71 = 0;
            }
            uint64_t v62 = (v67 + (v64 >> 24) - v70) >> 32;
            uint64_t v63 = (v68 + ((uint64_t)((unint64_t)HIWORD(v57) << 56) >> 24) - v71) >> 32;
          }
          uint64_t v72 = (unsigned __int16 *)(v49 + 2 * v63);
          if (v18 < (unint64_t)v72) {
            uint64_t v72 = (unsigned __int16 *)v18;
          }
          if (v72 < v50) {
            uint64_t v72 = v50;
          }
          unsigned int v73 = bswap32(*v72) >> 16;
          unint64_t v74 = v49 + (int)v62 * (uint64_t)v4;
          if (v18 >= v74) {
            uint64_t v75 = (unsigned __int16 *)(v49 + (int)v62 * (uint64_t)v4);
          }
          else {
            uint64_t v75 = (unsigned __int16 *)v18;
          }
          if (v75 < v50) {
            uint64_t v75 = v50;
          }
          unsigned int v76 = bswap32(*v75) >> 16;
          uint64_t v77 = (unsigned __int16 *)(v74 + 2 * v63);
          if (v18 < (unint64_t)v77) {
            uint64_t v77 = (unsigned __int16 *)v18;
          }
          if (v77 >= v50) {
            int v50 = v77;
          }
          unsigned int v78 = bswap32(*v50) >> 16;
          if (v9)
          {
            int v79 = (unsigned __int8 *)(v53 + v63);
            unint64_t v80 = *(void *)(result + 40);
            if ((unint64_t)v17 < v53 + v63) {
              int v79 = v17;
            }
            if ((unint64_t)v79 < v80) {
              int v79 = *(unsigned __int8 **)(result + 40);
            }
            v73 |= *v79 << 24;
            uint64_t v81 = (unsigned __int8 *)(v53 + (int)v62 * (uint64_t)v133);
            if (v17 >= v81) {
              unint64_t v82 = v81;
            }
            else {
              unint64_t v82 = v17;
            }
            if ((unint64_t)v82 < v80) {
              unint64_t v82 = *(unsigned __int8 **)(result + 40);
            }
            v76 |= *v82 << 24;
            uint64_t v83 = &v81[v63];
            if (v17 < v83) {
              uint64_t v83 = v17;
            }
            if ((unint64_t)v83 < v80) {
              uint64_t v83 = *(unsigned __int8 **)(result + 40);
            }
            v78 |= *v83 << 24;
          }
          int v84 = interpolate_8555_21359[v61];
          unsigned int v85 = v52 - ((v84 & v52) >> (v61 + 1)) + ((v84 & v76) >> (v61 + 1));
          unsigned int v52 = v85
              - ((v85 & interpolate_8555_21359[(v57 >> 28) & 3]) >> (((v57 >> 28) & 3) + 1))
              + (((v73 - ((v84 & v73) >> (v61 + 1)) + ((v84 & v78) >> (v61 + 1))) & interpolate_8555_21359[(v57 >> 28) & 3]) >> (((v57 >> 28) & 3) + 1));
          int v22 = v124;
          unsigned int v30 = v125;
        }
        goto LABEL_140;
      }
      uint64_t v97 = SBYTE2(v57);
      if (v6)
      {
        int64_t v98 = (unint64_t)HIWORD(v57) << 56;
        uint64_t v99 = v37 + (v98 >> 24);
        uint64_t v100 = v6 & (v99 >> 63);
        if (v100 + v99 >= v6) {
          uint64_t v101 = v6;
        }
        else {
          uint64_t v101 = 0;
        }
        uint64_t v97 = (v100 + (v98 >> 24) - v101) >> 32;
      }
      uint64_t v102 = (unsigned __int16 *)(v49 + 2 * v97);
      if (v18 < (unint64_t)v102) {
        uint64_t v102 = (unsigned __int16 *)v18;
      }
      if (v102 < v50) {
        uint64_t v102 = v50;
      }
      unsigned int v103 = bswap32(*v102) >> 16;
      if (v9)
      {
        uint64_t v104 = (unsigned __int8 *)(v53 + v97);
        if (v17 < v104) {
          uint64_t v104 = v17;
        }
        if ((unint64_t)v104 < *(void *)(result + 40)) {
          uint64_t v104 = *(unsigned __int8 **)(result + 40);
        }
        v103 |= *v104 << 24;
      }
      int v105 = (v57 >> 28) & 3;
      int v106 = interpolate_8555_21359[v105];
      LOBYTE(v105) = v105 + 1;
      unsigned int v95 = v52 - ((v106 & v52) >> v105);
      unsigned int v96 = (v106 & v103) >> v105;
    }
    unsigned int v52 = v95 + v96;
    goto LABEL_140;
  }
  unint64_t v53 = v9 + (int)v46 * (uint64_t)v133 + v47;
  unsigned int v54 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v17 >= v53) {
    int v55 = (unsigned __int8 *)v53;
  }
  else {
    int v55 = v17;
  }
  if (v55 >= v54) {
    unsigned int v54 = v55;
  }
  v52 |= *v54 << 24;
  if (v8) {
    goto LABEL_65;
  }
LABEL_140:
  *(_DWORD *)(v12 + 4) = v14 | (v52 >> 29 << 24) | v52;
  *(unsigned char *)(v13 + 1) = v30 >> 22;
  if (v22 != 1)
  {
    int v107 = v22;
    uint64_t v108 = 0;
    a2 += v5;
    uint64_t v109 = v127 - a2;
    a3 += v10;
    uint64_t v110 = v129 - a3;
    uint64_t v111 = -4;
    while (((v110 | v109 | (a3 - v130) | (a2 - v128)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v112 = (v7 & ((v28 + v131) >> 63)) + v28 + v131;
        uint64_t v113 = (v6 & ((v37 + v132) >> 63)) + v37 + v132;
        if (v112 >= v7) {
          uint64_t v114 = v7;
        }
        else {
          uint64_t v114 = 0;
        }
        uint64_t v115 = v112 - v114;
        if (v113 >= v6) {
          uint64_t v116 = v6;
        }
        else {
          uint64_t v116 = 0;
        }
        uint64_t v117 = v113 - v116;
        uint64_t v37 = v117;
        uint64_t v28 = v115;
      }
      else
      {
        uint64_t v117 = a2;
        uint64_t v115 = a3;
      }
      uint64_t v118 = v115 >> 32;
      uint64_t v119 = v117 >> 32;
      unint64_t v49 = v134 + SHIDWORD(v115) * (uint64_t)v4 + 2 * (v117 >> 32);
      int v50 = *(unsigned __int16 **)(result + 32);
      if (v18 >= v49) {
        long long v120 = (unsigned __int16 *)v49;
      }
      else {
        long long v120 = (unsigned __int16 *)v18;
      }
      if (v120 < v50) {
        long long v120 = *(unsigned __int16 **)(result + 32);
      }
      unsigned int v52 = bswap32(*v120) >> 16;
      if (v9)
      {
        unint64_t v53 = v9 + (int)v118 * (uint64_t)v133 + v119;
        uint64_t v121 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v17 >= v53) {
          unint64_t v122 = (unsigned __int8 *)v53;
        }
        else {
          unint64_t v122 = v17;
        }
        if (v122 >= v121) {
          uint64_t v121 = v122;
        }
        v52 |= *v121 << 24;
      }
      if (v8)
      {
        unsigned int v57 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v57 & 0xF) != 0)
        {
          v13 += v108 + 1;
          v12 -= v111;
          int v22 = ~v108 + v107;
          unsigned int v30 = -1;
          goto LABEL_67;
        }
      }
      *(_DWORD *)(v12 + 4 * v108 + ++*(_DWORD *)(result + 8) = v14 | (v52 >> 29 << 24) | v52;
      uint64_t v123 = v13 + v108++;
      v111 -= 4;
      *(unsigned char *)(v123 + 2) = -1;
      a2 += v5;
      v109 -= v5;
      a3 += v10;
      v110 -= v10;
      if (v107 - 1 == v108) {
        return result;
      }
    }
    v13 += v108 + 1;
    v12 -= v111;
    int v56 = ~v108 + v107;
    goto LABEL_62;
  }
  return result;
}

uint64_t rgb555_sample_W8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 40);
  int v6 = *(_DWORD *)(result + 24);
  uint64_t v7 = *(void *)(result + 176);
  uint64_t v88 = *(void *)(result + 88);
  uint64_t v89 = *(void *)(result + 80);
  uint64_t v9 = *(void *)(result + 112);
  uint64_t v8 = *(void *)(result + 120);
  uint64_t v90 = *(void *)(result + 144) - 1;
  uint64_t v91 = *(void *)(result + 152) - 4;
  if (v5) {
    int v10 = 0;
  }
  else {
    int v10 = -16777216;
  }
  int v11 = *(_DWORD *)(result + 260) - 1;
  uint64_t v12 = *(unsigned int *)(result + 256);
  int v92 = *(_DWORD *)(result + 28);
  int v85 = *(_DWORD *)(result + 188);
  uint64_t v13 = (unsigned __int8 *)(v5 + (v12 - 1) + (v11 * v92));
  unint64_t v14 = v4 + v12 + (v11 * v6) - 1;
  uint64_t v86 = *(void *)(result + 64);
  uint64_t v87 = *(void *)(result + 72);
  while (1)
  {
LABEL_5:
    if (a3 >= v87)
    {
      if (a3 <= v88)
      {
        uint64_t v23 = ((unint64_t)a3 >> 22) & 0x3C0;
        unsigned int v24 = 0x3FFFFFFF;
        uint64_t v25 = a3;
        uint64_t v26 = v86;
        uint64_t v27 = v89;
      }
      else
      {
        uint64_t v19 = *(void *)(result + 216);
        uint64_t v20 = *(void *)(result + 224) + v88;
        uint64_t v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1) {
          goto LABEL_43;
        }
        if (v21 >= v19) {
          LODWORD(v22) = 0x3FFFFFFF;
        }
        else {
          unint64_t v22 = (unint64_t)(*(void *)(result + 232) * v21) >> 32;
        }
        uint64_t v26 = v86;
        uint64_t v27 = v89;
        unsigned int v24 = v85 | v22;
        uint64_t v25 = v20 - 0x1000000;
        uint64_t v23 = 448;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(result + 216);
      uint64_t v16 = v87 - *(void *)(result + 224);
      uint64_t v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1) {
        goto LABEL_43;
      }
      if (v17 >= v15) {
        LODWORD(v1++*(_DWORD *)(result + 8) = 0x3FFFFFFF;
      }
      else {
        unint64_t v18 = (unint64_t)(*(void *)(result + 232) * v17) >> 32;
      }
      uint64_t v26 = v86;
      uint64_t v27 = v89;
      unsigned int v24 = v85 | v18;
      uint64_t v25 = v16 + 0x1000000;
      uint64_t v23 = 512;
    }
    if (a2 >= v26) {
      break;
    }
    uint64_t v28 = *(void *)(result + 192);
    uint64_t v29 = v26 - *(void *)(result + 200);
    uint64_t v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28) {
        unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v30) >> 32) >> 15)) | v85;
      }
      uint64_t v31 = v29 + 0x1000000;
      uint64_t v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v9;
    a3 += v8;
    v91 += 4;
    *(unsigned char *)++uint64_t v90 = 0;
    if (!a4) {
      return result;
    }
  }
  if (a2 <= v27)
  {
    uint64_t v32 = ((unint64_t)a2 >> 26) & 0x3C;
    uint64_t v31 = a2;
    goto LABEL_29;
  }
  uint64_t v33 = *(void *)(result + 192);
  uint64_t v34 = *(void *)(result + 200) + v27;
  uint64_t v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1) {
    goto LABEL_43;
  }
  if (v35 < v33) {
    unsigned int v24 = ((v24 >> 15) * (((unint64_t)(*(void *)(result + 208) * v35) >> 32) >> 15)) | v85;
  }
  uint64_t v31 = v34 - 0x1000000;
  uint64_t v32 = 28;
LABEL_29:
  if (v24 < 0x400000) {
    goto LABEL_43;
  }
  uint64_t v36 = v25 >> 32;
  uint64_t v37 = v4 + (int)v36 * (uint64_t)v6;
  unint64_t v38 = v37 + (v31 >> 32);
  uint64_t v39 = *(unsigned __int8 **)(result + 32);
  if (v14 >= v38) {
    uint64_t v40 = (unsigned __int8 *)(v37 + (v31 >> 32));
  }
  else {
    uint64_t v40 = (unsigned __int8 *)v14;
  }
  if (v40 < v39) {
    uint64_t v40 = *(unsigned __int8 **)(result + 32);
  }
  unsigned int v41 = *v40;
  if (!v5)
  {
    unint64_t v42 = 0;
    if (!v7) {
      goto LABEL_103;
    }
LABEL_46:
    unsigned int v45 = *(_DWORD *)(v7 + (v32 | v23));
LABEL_48:
    int v46 = v45 & 0xF;
    int v47 = HIBYTE(v45) & 3;
    if (v46 == 1)
    {
      uint64_t v63 = (unsigned __int8 *)(v38 + SBYTE1(v45) * (uint64_t)v6);
      if (v14 < (unint64_t)v63) {
        uint64_t v63 = (unsigned __int8 *)v14;
      }
      if (v63 < v39) {
        uint64_t v63 = v39;
      }
      unsigned int v64 = *v63;
      if (v5)
      {
        uint64_t v65 = (unsigned __int8 *)(v42 + SBYTE1(v45) * (uint64_t)v92);
        if (v13 < v65) {
          uint64_t v65 = v13;
        }
        if ((unint64_t)v65 < *(void *)(result + 40)) {
          uint64_t v65 = *(unsigned __int8 **)(result + 40);
        }
        v64 |= *v65 << 24;
      }
      int v66 = interpolate_8888_21358[v47];
      char v67 = v47 + 1;
      unsigned int v68 = v41 - ((v66 & v41) >> v67);
      unsigned int v69 = (v66 & v64) >> v67;
    }
    else
    {
      if (v46 != 2)
      {
        if (v46 == 3)
        {
          uint64_t v48 = (unsigned __int8 *)(v38 + SBYTE2(v45));
          if (v14 < (unint64_t)v48) {
            uint64_t v48 = (unsigned __int8 *)v14;
          }
          if (v48 < v39) {
            uint64_t v48 = v39;
          }
          unsigned int v49 = *v48;
          unint64_t v50 = v38 + SBYTE1(v45) * (uint64_t)v6;
          if (v14 >= v50) {
            char v51 = (unsigned __int8 *)(v38 + SBYTE1(v45) * (uint64_t)v6);
          }
          else {
            char v51 = (unsigned __int8 *)v14;
          }
          if (v51 < v39) {
            char v51 = v39;
          }
          unsigned int v52 = *v51;
          unint64_t v53 = (unsigned __int8 *)(v50 + SBYTE2(v45));
          if (v14 < (unint64_t)v53) {
            unint64_t v53 = (unsigned __int8 *)v14;
          }
          if (v53 < v39) {
            unint64_t v53 = v39;
          }
          unsigned int v54 = *v53;
          if (v5)
          {
            int v55 = (unsigned __int8 *)(v42 + SBYTE2(v45));
            unint64_t v56 = *(void *)(result + 40);
            if (v13 < v55) {
              int v55 = v13;
            }
            if ((unint64_t)v55 < v56) {
              int v55 = *(unsigned __int8 **)(result + 40);
            }
            v49 |= *v55 << 24;
            unint64_t v57 = v42 + SBYTE1(v45) * (uint64_t)v92;
            if ((unint64_t)v13 >= v57) {
              int v58 = (unsigned __int8 *)(v42 + SBYTE1(v45) * (uint64_t)v92);
            }
            else {
              int v58 = v13;
            }
            if ((unint64_t)v58 < v56) {
              int v58 = *(unsigned __int8 **)(result + 40);
            }
            v52 |= *v58 << 24;
            uint64_t v59 = (unsigned __int8 *)(v57 + SBYTE2(v45));
            if (v13 < v59) {
              uint64_t v59 = v13;
            }
            if ((unint64_t)v59 < v56) {
              uint64_t v59 = *(unsigned __int8 **)(result + 40);
            }
            v54 |= *v59 << 24;
          }
          int v60 = interpolate_8888_21358[v47];
          char v61 = v47 + 1;
          unsigned int v62 = v41 - ((v60 & v41) >> v61) + ((v60 & v52) >> v61);
          unsigned int v41 = v62
              - ((v62 & interpolate_8888_21358[(v45 >> 28) & 3]) >> (((v45 >> 28) & 3) + 1))
              + (((v49 - ((v60 & v49) >> v61) + ((v60 & v54) >> v61)) & interpolate_8888_21358[(v45 >> 28) & 3]) >> (((v45 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      uint64_t v70 = (unsigned __int8 *)(v38 + SBYTE2(v45));
      if (v14 < (unint64_t)v70) {
        uint64_t v70 = (unsigned __int8 *)v14;
      }
      if (v70 < v39) {
        uint64_t v70 = v39;
      }
      unsigned int v71 = *v70;
      if (v5)
      {
        uint64_t v72 = (unsigned __int8 *)(v42 + SBYTE2(v45));
        if (v13 < v72) {
          uint64_t v72 = v13;
        }
        if ((unint64_t)v72 < *(void *)(result + 40)) {
          uint64_t v72 = *(unsigned __int8 **)(result + 40);
        }
        v71 |= *v72 << 24;
      }
      int v73 = (v45 >> 28) & 3;
      int v74 = interpolate_8888_21358[v73];
      LOBYTE(v73) = v73 + 1;
      unsigned int v68 = v41 - ((v74 & v41) >> v73);
      unsigned int v69 = (v74 & v71) >> v73;
    }
    unsigned int v41 = v68 + v69;
    goto LABEL_103;
  }
  unint64_t v42 = v5 + (int)v36 * (uint64_t)v92 + (v31 >> 32);
  uint64_t v43 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v13 >= v42) {
    uint64_t v44 = (unsigned __int8 *)v42;
  }
  else {
    uint64_t v44 = v13;
  }
  if (v44 >= v43) {
    uint64_t v43 = v44;
  }
  v41 |= *v43 << 24;
  if (v7) {
    goto LABEL_46;
  }
LABEL_103:
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  a3 += v8;
  uint64_t v77 = v88 - a3;
  a2 += v9;
  uint64_t v78 = v89 - a2;
  while (1)
  {
    HIDWORD(v79) = v41;
    LODWORD(v79) = v41 | v10;
    *(_DWORD *)(v91 + 4 + 4 * v75) = (4 * v41) & 0x3E0 | (v41 >> 3 << 10) | ((v79 >> 24) >> 11) & 0xFFFFFF | (((v79 >> 24) >> 3) << 27) | (((v41 | v10) >> 24) >> 5 << 24);
    *(unsigned char *)(v90 + 1 + v75) = v24 >> 22;
    if (a4 - 1 == v75) {
      return result;
    }
    if ((v77 | v78 | (a3 - v87) | (a2 - v86)) < 0)
    {
      uint64_t v91 = v91 - v76 + 4;
      v90 += v75 + 1;
      a4 += ~v75;
      if (a4) {
        goto LABEL_5;
      }
      return result;
    }
    uint64_t v80 = v4 + SHIDWORD(a3) * (uint64_t)v6;
    unint64_t v38 = v80 + (a2 >> 32);
    uint64_t v39 = *(unsigned __int8 **)(result + 32);
    if (v14 >= v38) {
      uint64_t v81 = (unsigned __int8 *)(v80 + (a2 >> 32));
    }
    else {
      uint64_t v81 = (unsigned __int8 *)v14;
    }
    if (v81 < v39) {
      uint64_t v81 = *(unsigned __int8 **)(result + 32);
    }
    unsigned int v41 = *v81;
    if (v5)
    {
      uint64_t v82 = v5 + SHIDWORD(a3) * (uint64_t)v92;
      unint64_t v42 = v82 + (a2 >> 32);
      uint64_t v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v13 >= v42) {
        int v84 = (unsigned __int8 *)(v82 + (a2 >> 32));
      }
      else {
        int v84 = v13;
      }
      if (v84 >= v83) {
        uint64_t v83 = v84;
      }
      v41 |= *v83 << 24;
    }
    if (v7)
    {
      unsigned int v45 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v45 & 0xF) != 0)
      {
        uint64_t v91 = v91 - v76 + 4;
        v90 += v75 + 1;
        a4 += ~v75;
        unsigned int v24 = -1;
        goto LABEL_48;
      }
    }
    v76 -= 4;
    ++v75;
    a3 += v8;
    v77 -= v8;
    a2 += v9;
    v78 -= v9;
    unsigned int v24 = -1;
  }
}

uint64_t rgb555_shade(uint64_t a1, __n128 a2)
{
  int v2 = (uint64_t *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t)v3;
  BOOL v7 = 0;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *v2;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  *(_OWORD *)unint64_t v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *v3;
  if (!*((void *)v3 + 12))
  {
    if (*(void *)(v4 + 72)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = *(float *)(v4 + 4) >= 1.0;
    }
  }
  int v43 = 0;
  memset(v42, 0, sizeof(v42));
  int v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((void *)v3 + 6) == 0));
  if (v11 > 27) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1) {
    return 0;
  }
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(void *)(v5 + 16))
    {
      unint64_t v14 = rgb555_shade_radial_RGB;
    }
    else if (*(void *)(v5 + 24))
    {
      unint64_t v14 = rgb555_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      unint64_t v14 = rgb555_shade_axial_RGB;
    }
    else
    {
      unint64_t v14 = rgb555_shade_custom_RGB;
    }
    *(void *)&v17[0] = v14;
    if ((void)v40)
    {
      *((void *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 1, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    unint64_t v15 = *((void *)&v19 + 1) * v19;
    if ((uint64_t)(*((void *)&v19 + 1) * v19) <= 480)
    {
      uint64_t v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 1, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(unsigned char *)(v5 + 1)) {
        *(void *)&long long v39 = &_blt_shade_samples_noise;
      }
      goto LABEL_29;
    }
    uint64_t v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      unint64_t v15 = *((void *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)&v17[0]) {
    return 0xFFFFFFFFLL;
  }
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  rgb555_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1])) {
    free(v38[1]);
  }
  return 1;
}

void rgb555_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v357 = a3;
  uint64_t v375 = *MEMORY[0x1E4F143B8];
  uint64_t v363 = a1;
  uint64_t v373 = *(unsigned int *)(a1 + 4);
  uint64_t v356 = (int)v373;
  unint64_t v4 = ((int)v373 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v4 <= 0x1FFFFFF)
  {
    uint64_t v5 = *(void *)(v363 + 40);
    float v6 = *(float *)(a2 + 184);
    BOOL v7 = *(int **)(v363 + 136);
    uint64_t v370 = *(void *)(v363 + 48);
    v371 = v7;
    uint64_t v8 = *(void *)(a2 + 96);
    uint64_t v369 = *(void *)(a2 + 104);
    uint64_t v10 = *(int *)(v363 + 24);
    unint64_t v9 = *(int *)(v363 + 28);
    uint64_t v11 = *(int *)(v363 + 16);
    uint64_t v12 = *(int *)(v363 + 20);
    uint64_t v13 = *(int *)(v363 + 12);
    int v368 = *(_DWORD *)(v363 + 8);
    CFAllocatorRef v365 = (void *)a2;
    uint64_t v14 = *(int *)(a2 + 16);
    uint64_t v15 = (v14 + 6) * v4;
    if (v15 > 65439)
    {
      long long v18 = (char *)malloc_type_calloc(1uLL, v15 + 96, 0x3023562EuLL);
      uint64_t v17 = v18;
      long long v20 = v18;
      long long v21 = v365;
      if (!v18) {
        return;
      }
    }
    else
    {
      MEMORY[0x1F4188790](a1, a4);
      uint64_t v17 = (char *)&v350 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v17, v16);
      long long v20 = 0;
      long long v21 = v365;
    }
    uint64_t v22 = v12;
    char v352 = v20;
    uint64_t v367 = v8;
    unsigned int v372 = (int)(float)((float)(v6 * 255.0) + 0.5);
    unint64_t v23 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v24 = v23 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v21[20] = v24;
    if (v14) {
      uint64_t v25 = 4 * v4;
    }
    else {
      uint64_t v25 = 0;
    }
    unint64_t v26 = v24 + v25;
    uint64_t v27 = v5 + (v10 - 1) * v9;
    unint64_t v28 = v9 >> 1;
    v21[18] = v23;
    v21[19] = v26;
    if (v370)
    {
      uint64_t v29 = v363;
      uint64_t v30 = *(int *)(v363 + 32);
      long long v31 = (char *)(v370 + v13 + (int)v30 * (uint64_t)(int)v11);
      uint64_t v364 = v30 - v356;
      uint64_t v32 = v356;
      uint64_t v374 = 1;
    }
    else
    {
      long long v31 = 0;
      uint64_t v364 = 0;
      uint64_t v374 = 0;
      uint64_t v29 = v363;
      uint64_t v32 = v356;
    }
    long long v33 = v371;
    uint64_t v34 = v27 + 2 * v22;
    long long v35 = (__int16 *)(v5 + 2 * (v13 + v28 * v11));
    uint64_t v362 = v28 - v32;
    uint64_t v36 = *(int *)(v29 + 104);
    int v37 = *(_DWORD *)(v29 + 108);
    int v38 = *(unsigned __int8 *)(v29 + 2);
    int v39 = v357;
    if (v38 == 6 || v38 == 1)
    {
      long long v40 = v365;
      uint64_t v41 = v373;
      uint64_t v42 = v367;
      uint64_t v43 = v369;
      if (v371)
      {
        unint64_t v350 = v28;
        uint64_t v44 = 0;
        LODWORD(v371) = 0;
        uint64_t v45 = *(int *)(v29 + 124);
        int v46 = (unsigned __int8 *)v33 + v36 + (int)v45 * (uint64_t)v37;
        uint64_t v32 = v356;
        uint64_t v361 = v45 - v356;
        goto LABEL_31;
      }
      goto LABEL_668;
    }
    uint64_t v41 = v373;
    if (v371)
    {
      uint64_t v351 = v34;
      shape_enum_clip_alloc((uint64_t)v18, v19, v371, 1, 1, 1, v36, v37, v373, v368);
      if (v47)
      {
        uint64_t v44 = v47;
        unint64_t v350 = v28;
        LODWORD(v371) = 0;
        uint64_t v48 = (int)((v14 * v4 + 15) & 0xFFFFFFF0);
        if (!v14) {
          uint64_t v48 = 4 * v4;
        }
        uint64_t v49 = v356;
        uint64_t v361 = -v356;
        int v46 = (unsigned __int8 *)(v26 + v48 + 16);
        uint64_t v42 = v367;
        uint64_t v43 = v369;
        goto LABEL_21;
      }
LABEL_668:
      if (v352) {
        free(v352);
      }
      return;
    }
    unint64_t v350 = v28;
    int v46 = 0;
    uint64_t v44 = 0;
    uint64_t v361 = 0;
    LODWORD(v371) = 0;
    long long v40 = v365;
    uint64_t v42 = v367;
    uint64_t v43 = v369;
LABEL_31:
    int32x2_t v54 = vdup_n_s32(v372);
    uint64_t v354 = (v41 - 1) + 1;
    uint64_t v353 = -v32;
    uint64_t v351 = v34;
    unint64_t v355 = v34 - 2;
    uint32x4_t v360 = (uint32x4_t)xmmword_1850CD930;
    uint32x4_t v359 = (uint32x4_t)xmmword_1850CD940;
    int8x16_t v358 = (int8x16_t)xmmword_1850CD950;
    int v55 = v44;
LABEL_32:
    CFAllocatorRef v366 = v55;
    uint64_t v367 = v42;
    unint64_t v56 = (void (*)(void *, uint64_t, uint64_t, uint64_t))*v40;
    uint64_t v369 = v43;
    v56(v40, v42, v43, v41);
    int v58 = (unsigned __int16 *)v40[20];
    uint64_t v59 = (unsigned __int8 *)v40[18];
    unsigned int v60 = *((_DWORD *)v40 + 2);
    if (v60 == *((_DWORD *)v40 + 3))
    {
      if (v372 > 0xF7) {
        goto LABEL_162;
      }
      int v61 = v41;
      unsigned int v62 = v59;
      do
      {
        if (*v62 >= 8u) {
          *(_DWORD *)int v58 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v372);
        }
        ++v62;
        v58 += 2;
        --v61;
      }
      while (v61);
      v58 += 2 * v353;
      v59 += v354 + v353;
      goto LABEL_161;
    }
    uint64_t v63 = v40[19];
    int v64 = *(_DWORD *)(v363 + 12);
    int v65 = *(_DWORD *)(v363 + 16) + v371;
    int v66 = HIWORD(v60) & 0x3F;
    if (v66 == 16)
    {
      uint64_t v84 = v40[21];
      if (v84)
      {
        if (v64 <= 0) {
          unsigned int v85 = -(-v64 & 0xF);
        }
        else {
          unsigned int v85 = *(_DWORD *)(v363 + 12) & 0xF;
        }
        BOOL v69 = -v65 < 0;
        int v86 = -v65 & 0xF;
        int v87 = v65 & 0xF;
        if (!v69) {
          int v87 = -v86;
        }
        uint64_t v88 = v84 + 16 * v87;
        if (v372 >= 0xF8)
        {
          uint64_t v123 = 0;
          do
          {
            if (v59[v123] >= 8u) {
              *(_DWORD *)&v58[2 * v123] = DITHERRGBA32((HIBYTE(*(void *)(v63 + 8 * v123)) | (BYTE3(*(void *)(v63 + 8 * v123)) << 16)) & 0xFFFFFF | (BYTE1(*(void *)(v63 + 8 * v123)) << 24) | HIDWORD(*(void *)(v63 + 8 * v123)) & 0xFF00, *(unsigned __int8 *)(v88 + v85));
            }
            unsigned int v85 = ((_BYTE)v85 + 1) & 0xF;
            ++v123;
          }
          while (v373 != v123);
        }
        else
        {
          uint64_t v89 = 0;
          do
          {
            if (v59[v89] >= 8u) {
              *(_DWORD *)&v58[2 * v89] = DITHERRGBA32M((HIBYTE(*(void *)(v63 + 8 * v89)) | (BYTE3(*(void *)(v63 + 8 * v89)) << 16)) & 0xFFFFFF | (BYTE1(*(void *)(v63 + 8 * v89)) << 24) | HIDWORD(*(void *)(v63 + 8 * v89)) & 0xFF00, *(unsigned __int8 *)(v88 + v85), v372);
            }
            unsigned int v85 = ((_BYTE)v85 + 1) & 0xF;
            ++v89;
          }
          while (v373 != v89);
        }
        goto LABEL_155;
      }
      if (v372 < 0xF8)
      {
        uint64_t v107 = 0;
        do
        {
          if (v59[v107] >= 8u) {
            *(_DWORD *)&v58[2 * v107] = PDAM((*(void *)(v63 + 8 * v107) >> 1) & 0x7C00 | (32 * (*(void *)(v63 + 8 * v107) >> 27)) | (*(void *)(v63 + 8 * v107) >> 43) & 0x1F, HIBYTE(*(void *)(v63 + 8 * v107)), v372);
          }
          ++v107;
        }
        while (v41 != v107);
        goto LABEL_161;
      }
      uint64_t v295 = 0;
      do
      {
        if (v59[v295] >= 8u)
        {
          unint64_t v296 = *(void *)(v63 + 8 * v295);
          *(_DWORD *)&v58[2 * v295] = (v296 >> 1) & 0x7C00 | (32 * (v296 >> 27)) & 0xFFFFFF | (v296 >> 43) & 0x1F | (HIBYTE(v296) >> 3 << 27) | (((HIBYTE(v296) >> 5) & 7) << 24);
        }
        ++v295;
      }
      while (v41 != v295);
    }
    else if (v66 == 32)
    {
      uint64_t v67 = v40[21];
      if (v67)
      {
        if (v64 <= 0) {
          unsigned int v68 = -(-v64 & 0xF);
        }
        else {
          unsigned int v68 = *(_DWORD *)(v363 + 12) & 0xF;
        }
        BOOL v69 = -v65 < 0;
        int v70 = -v65 & 0xF;
        int v71 = v65 & 0xF;
        if (!v69) {
          int v71 = -v70;
        }
        uint64_t v72 = v67 + 16 * v71;
        if (v372 >= 0xF8)
        {
          uint64_t v112 = 0;
          uint64_t v113 = (float *)(v63 + 8);
          do
          {
            if (v59[v112] >= 8u)
            {
              float v114 = v113[1];
              if (v114 <= 0.0)
              {
                int v122 = 0;
              }
              else
              {
                float v115 = *(v113 - 2);
                float v116 = *(v113 - 1);
                float v117 = *v113;
                int v118 = (int)(float)((float)(v114 * 255.0) + 0.5);
                if (v114 > 1.0)
                {
                  int v118 = 255;
                  float v114 = 1.0;
                }
                int v119 = (int)(float)((float)(v115 * 255.0) + 0.5);
                if (v115 < 0.0) {
                  int v119 = 0;
                }
                if (v115 > v114) {
                  int v119 = v118;
                }
                int v120 = (int)(float)((float)(v116 * 255.0) + 0.5);
                if (v116 < 0.0) {
                  int v120 = 0;
                }
                if (v116 > v114) {
                  int v120 = v118;
                }
                int v121 = (int)(float)((float)(v117 * 255.0) + 0.5);
                if (v117 < 0.0) {
                  int v121 = 0;
                }
                if (v117 > v114) {
                  int v121 = v118;
                }
                int v122 = DITHERRGBA32((v119 << 24) | (v120 << 16) | (v121 << 8) | v118, *(unsigned __int8 *)(v72 + v68));
              }
              *(_DWORD *)&v58[2 * v112] = v122;
            }
            unsigned int v68 = ((_BYTE)v68 + 1) & 0xF;
            ++v112;
            v113 += 4;
          }
          while (v373 != v112);
        }
        else
        {
          uint64_t v73 = 0;
          int v74 = (float *)(v63 + 8);
          do
          {
            if (v59[v73] >= 8u)
            {
              float v75 = v74[1];
              if (v75 <= 0.0)
              {
                int v83 = 0;
              }
              else
              {
                float v76 = *(v74 - 2);
                float v77 = *(v74 - 1);
                float v78 = *v74;
                int v79 = (int)(float)((float)(v75 * 255.0) + 0.5);
                if (v75 > 1.0)
                {
                  int v79 = 255;
                  float v75 = 1.0;
                }
                int v80 = (int)(float)((float)(v76 * 255.0) + 0.5);
                if (v76 < 0.0) {
                  int v80 = 0;
                }
                if (v76 > v75) {
                  int v80 = v79;
                }
                int v81 = (int)(float)((float)(v77 * 255.0) + 0.5);
                if (v77 < 0.0) {
                  int v81 = 0;
                }
                if (v77 > v75) {
                  int v81 = v79;
                }
                int v82 = (int)(float)((float)(v78 * 255.0) + 0.5);
                if (v78 < 0.0) {
                  int v82 = 0;
                }
                if (v78 > v75) {
                  int v82 = v79;
                }
                int v83 = DITHERRGBA32M((v80 << 24) | (v81 << 16) | (v82 << 8) | v79, *(unsigned __int8 *)(v72 + v68), v372);
              }
              *(_DWORD *)&v58[2 * v73] = v83;
            }
            unsigned int v68 = ((_BYTE)v68 + 1) & 0xF;
            ++v73;
            v74 += 4;
          }
          while (v373 != v73);
        }
LABEL_155:
        long long v40 = v365;
        uint64_t v41 = v373;
        goto LABEL_162;
      }
      if (v372 < 0xF8)
      {
        uint64_t v96 = 0;
        uint64_t v97 = (float *)(v63 + 8);
        do
        {
          if (v59[v96] >= 8u)
          {
            float v98 = v97[1];
            if (v98 <= 0.0)
            {
              int v106 = 0;
            }
            else
            {
              float v99 = *(v97 - 2);
              float v100 = *(v97 - 1);
              int v101 = (int)(float)((float)(v98 * 255.0) + 0.5);
              float v102 = *v97;
              if (v98 > 1.0)
              {
                int v101 = 255;
                float v98 = 1.0;
              }
              int v103 = (int)(float)((float)(v99 * 255.0) + 0.5);
              if (v99 < 0.0) {
                int v103 = 0;
              }
              if (v99 > v98) {
                int v103 = v101;
              }
              int v104 = (int)(float)((float)(v100 * 255.0) + 0.5);
              if (v100 < 0.0) {
                LOWORD(v104) = 0;
              }
              if (v100 > v98) {
                LOWORD(v104) = v101;
              }
              int v105 = (int)(float)((float)(v102 * 255.0) + 0.5);
              if (v102 < 0.0) {
                LOBYTE(v105) = 0;
              }
              if (v102 > v98) {
                LOBYTE(v105) = v101;
              }
              int v106 = PDAM((v103 << 7) & 0x7C00 | (4 * (_WORD)v104) & 0x3E0 | (v105 >> 3), v101, v372);
            }
            *(_DWORD *)&v58[2 * v96] = v106;
          }
          ++v96;
          v97 += 4;
        }
        while (v41 != v96);
LABEL_161:
        long long v40 = v365;
        goto LABEL_162;
      }
      uint64_t v284 = 0;
      uint64_t v285 = (float *)(v63 + 8);
      do
      {
        if (v59[v284] >= 8u)
        {
          float v286 = v285[1];
          if (v286 <= 0.0)
          {
            unsigned int v294 = 0;
          }
          else
          {
            float v287 = *(v285 - 2);
            float v288 = *(v285 - 1);
            float v289 = *v285;
            int v290 = (int)(float)((float)(v286 * 255.0) + 0.5);
            if (v286 > 1.0)
            {
              float v286 = 1.0;
              int v290 = 255;
            }
            int v291 = (int)(float)((float)(v287 * 255.0) + 0.5);
            if (v287 < 0.0) {
              int v291 = 0;
            }
            if (v287 > v286) {
              int v291 = v290;
            }
            int v292 = (int)(float)((float)(v288 * 255.0) + 0.5);
            if (v288 < 0.0) {
              int v292 = 0;
            }
            if (v288 > v286) {
              int v292 = v290;
            }
            int v293 = (int)(float)((float)(v289 * 255.0) + 0.5);
            if (v289 < 0.0) {
              LOBYTE(v293) = 0;
            }
            if (v289 > v286) {
              LOBYTE(v293) = v290;
            }
            unsigned int v294 = (v290 << 24) & 0xF8000000 | (v290 >> 5 << 24) | (v291 << 7) & 0x7C00 | (4 * v292) & 0x3E0 | (v293 >> 3);
          }
          *(_DWORD *)&v58[2 * v284] = v294;
        }
        ++v284;
        v285 += 4;
      }
      while (v41 != v284);
    }
    else
    {
      uint64_t v90 = v40[21];
      if (v90)
      {
        if (v64 <= 0) {
          unsigned int v91 = -(-v64 & 0xF);
        }
        else {
          unsigned int v91 = *(_DWORD *)(v363 + 12) & 0xF;
        }
        BOOL v69 = -v65 < 0;
        int v92 = -v65 & 0xF;
        int v93 = v65 & 0xF;
        if (!v69) {
          int v93 = -v92;
        }
        uint64_t v94 = v90 + 16 * v93;
        if (v372 >= 0xF8)
        {
          uint64_t v124 = 0;
          do
          {
            if (v59[v124] >= 8u) {
              *(_DWORD *)&v58[2 * v124] = DITHERRGBA32(*(_DWORD *)(v63 + 4 * v124), *(unsigned __int8 *)(v94 + v91));
            }
            unsigned int v91 = (v91 + 1) & 0xF;
            ++v124;
          }
          while (v41 != v124);
        }
        else
        {
          uint64_t v95 = 0;
          do
          {
            if (v59[v95] >= 8u) {
              *(_DWORD *)&v58[2 * v95] = DITHERRGBA32M(*(_DWORD *)(v63 + 4 * v95), *(unsigned __int8 *)(v94 + v91), v372);
            }
            unsigned int v91 = (v91 + 1) & 0xF;
            ++v95;
          }
          while (v41 != v95);
        }
        int v39 = v357;
        goto LABEL_161;
      }
      if (v372 >= 0xF8)
      {
        uint64_t v297 = 0;
        do
        {
          if (v59[v297] >= 8u)
          {
            unsigned int v298 = *(_DWORD *)(v63 + 4 * v297);
            *(_DWORD *)&v58[2 * v297] = (v298 >> 17) & 0x7C00 | (v298 >> 14) & 0x3E0 | ((unsigned __int16)v298 >> 11) & 0xFFFFFF | ((v298 >> 3) << 27) | (v298 >> 5 << 24);
          }
          ++v297;
        }
        while (v41 != v297);
      }
      else
      {
        uint64_t v108 = 0;
        do
        {
          if (v59[v108] >= 8u)
          {
            v57.i16[0] = *(_DWORD *)(v63 + 4 * v108);
            v57.i16[1] = BYTE2(*(_DWORD *)(v63 + 4 * v108));
            v57.i16[2] = BYTE1(*(_DWORD *)(v63 + 4 * v108));
            v57.i16[3] = (*(_DWORD *)(v63 + 4 * v108) >> 8 >> 16);
            *(int32x2_t *)v57.i8 = vmul_s32(*(int32x2_t *)v57.i8, v54);
            *(int32x2_t *)v57.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v57.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v57.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            unsigned __int32 v109 = vshlq_u32((uint32x4_t)v57, v360).u32[0];
            unsigned int v110 = (unsigned __int32)v57.i32[0] >> 11;
            int8x16_t v111 = (int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v57, v57), v359);
            v111.i32[0] = v109;
            int32x4_t v57 = (int32x4_t)vandq_s8(v111, v358);
            *(int8x8_t *)v57.i8 = vorr_s8(*(int8x8_t *)v57.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL));
            *(_DWORD *)&v58[2 * v108] = v57.i32[0] | v57.i32[1] | (v110 << 27);
          }
          ++v108;
        }
        while (v41 != v108);
      }
    }
LABEL_162:
    switch(v39)
    {
      case 0:
        uint64_t v125 = v46 != 0;
        if (v370)
        {
          int v126 = v41;
          uint64_t v127 = v46;
          while (1)
          {
            unsigned int v128 = *v59;
            if (*v59)
            {
              if (v46) {
                unsigned int v128 = (*v127 * v128 + ((*v127 * v128) >> 8) + 1) >> 8;
              }
              if (v128 >= 0xF8u)
              {
                LOBYTE(v129) = 0;
                *long long v35 = 0;
LABEL_172:
                *long long v31 = v129;
                goto LABEL_173;
              }
              if (v128 >= 8u)
              {
                unsigned int v130 = PDAM((unsigned __int16)*v35, *v31, ~(_BYTE)v128);
                *long long v35 = v130;
                unsigned int v129 = HIBYTE(v130);
                goto LABEL_172;
              }
            }
LABEL_173:
            ++v59;
            v127 += v125;
            ++v35;
            ++v31;
            if (!--v126) {
              goto LABEL_539;
            }
          }
        }
        int v299 = v41;
        uint64_t v127 = v46;
        while (1)
        {
          unsigned int v300 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v300 = (*v127 * v300 + ((*v127 * v300) >> 8) + 1) >> 8;
            }
            if (v300 > 0xF7u)
            {
              __int16 v301 = 0;
LABEL_537:
              *long long v35 = v301;
              goto LABEL_538;
            }
            if (v300 >= 8u)
            {
              __int16 v301 = PDM((unsigned __int16)*v35, ~(_BYTE)v300);
              goto LABEL_537;
            }
          }
LABEL_538:
          ++v59;
          v127 += v125;
          ++v35;
          if (!--v299)
          {
LABEL_539:
            int v46 = &v127[v361];
            v35 += v362;
            long long v40 = v365;
            v31 += v364;
            goto LABEL_611;
          }
        }
      case 1:
        unsigned int v131 = *v59;
        if (v370)
        {
          if (v46)
          {
            uint64_t v132 = 0;
            int v133 = v59 + 1;
            uint64_t v134 = v35 - 1;
            uint64_t v44 = v366;
            while (1)
            {
              if (v131)
              {
                unsigned int v135 = v131 * v46[v132] + ((v131 * v46[v132]) >> 8) + 1;
                if (BYTE1(v135) >= 0xF8u)
                {
                  int v136 = *(_DWORD *)&v58[2 * v132];
LABEL_183:
                  v35[v132] = v136;
                  v31[v132] = HIBYTE(v136);
                  goto LABEL_184;
                }
                if (BYTE1(v135) >= 8u)
                {
                  int v136 = PDAMplusDAM((unsigned __int16)*(_DWORD *)&v58[2 * v132], HIBYTE(*(_DWORD *)&v58[2 * v132]), BYTE1(v135), (unsigned __int16)v35[v132], v31[v132], ~(v135 >> 8));
                  goto LABEL_183;
                }
              }
LABEL_184:
              unsigned int v131 = v133[v132++];
              ++v134;
              if (v373 == v132)
              {
                uint64_t v137 = (uint64_t)&v31[v132 - 1];
                v46 += v132 + v361;
LABEL_623:
                long long v35 = &v134[v362 + 1];
                long long v31 = (char *)(v137 + v364 + 1);
                goto LABEL_652;
              }
            }
          }
          unint64_t v328 = v59 + 1;
          uint64_t v137 = (uint64_t)(v31 - 1);
          uint64_t v134 = v35 - 1;
          int v329 = v373;
          uint64_t v44 = v366;
          while (v131 < 0xF8)
          {
            if (v131 >= 8)
            {
              int v330 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v131, (unsigned __int16)v134[1], *(unsigned char *)(v137 + 1), ~(_BYTE)v131);
              goto LABEL_620;
            }
LABEL_621:
            unsigned int v331 = *v328++;
            unsigned int v131 = v331;
            v58 += 2;
            ++v137;
            ++v134;
            if (!--v329)
            {
              int v46 = 0;
              goto LABEL_623;
            }
          }
          int v330 = *(_DWORD *)v58;
LABEL_620:
          v134[1] = v330;
          *(unsigned char *)(v137 + 1) = HIBYTE(v330);
          goto LABEL_621;
        }
        if (v46)
        {
          long long v302 = v59 + 1;
          uint64_t v44 = v366;
          while (1)
          {
            if (v131)
            {
              unsigned int v303 = v131 * *v46 + ((v131 * *v46) >> 8) + 1;
              long long v304 = (__int16 *)v355;
              if (v355 >= (unint64_t)v35) {
                long long v304 = v35;
              }
              if ((unint64_t)v304 >= *(void *)(v363 + 40)) {
                long long v305 = v304;
              }
              else {
                long long v305 = *(__int16 **)(v363 + 40);
              }
              if (BYTE1(v303) >= 0xF8u)
              {
                int v306 = *(_DWORD *)v58;
LABEL_553:
                *long long v305 = v306;
                goto LABEL_554;
              }
              if (BYTE1(v303) >= 8u)
              {
                LOWORD(v306) = PDMplusDM(*v58, BYTE1(v303), (unsigned __int16)*v305, ~(v303 >> 8));
                goto LABEL_553;
              }
            }
            else
            {
              long long v305 = v35;
            }
LABEL_554:
            unsigned int v307 = *v302++;
            unsigned int v131 = v307;
            v58 += 2;
            ++v46;
            long long v35 = v305 + 1;
            LODWORD(v41) = v41 - 1;
            if (!v41)
            {
              v46 += v361;
LABEL_651:
              long long v35 = &v305[v362 + 1];
              v31 += v364;
LABEL_652:
              long long v40 = v365;
              uint64_t v41 = v373;
LABEL_665:
              uint64_t v327 = v367;
LABEL_612:
              if (!--v368)
              {
LABEL_666:
                if (v44) {
                  free(v44);
                }
                goto LABEL_668;
              }
              int v55 = 0;
              LODWORD(v371) = v371 + 1;
              uint64_t v42 = v40[16] + v327;
              uint64_t v43 = v40[17] + v369;
              if (v44)
              {
                uint64_t v49 = v356;
LABEL_21:
                uint64_t v50 = v364 + v49;
                while (1)
                {
                  while (1)
                  {
                    int v51 = *((_DWORD *)v46 - 4);
                    int v52 = v51 - v371;
                    if (v51 <= (int)v371) {
                      break;
                    }
                    v368 -= v52;
                    if (v368 < 1) {
                      goto LABEL_666;
                    }
                    v42 += v365[16] * v52;
                    v43 += v365[17] * v52;
                    v35 += v350 * v52;
                    uint64_t v53 = v50 * v52;
                    if (!v370) {
                      uint64_t v53 = 0;
                    }
                    v31 += v53;
                    LODWORD(v371) = v51;
                  }
                  if ((int)v371 < *((_DWORD *)v46 - 3) + v51) {
                    break;
                  }
                  if (!shape_enum_clip_scan((uint64_t)v44, (_DWORD *)v46 - 4)) {
                    goto LABEL_666;
                  }
                }
                long long v40 = v365;
                uint64_t v32 = v356;
                uint64_t v34 = v351;
                goto LABEL_31;
              }
              goto LABEL_32;
            }
          }
        }
        char v340 = *(__int16 **)(v363 + 40);
        char v341 = v59 + 1;
        uint64_t v44 = v366;
        while (1)
        {
          char v342 = (__int16 *)v355;
          if (v355 >= (unint64_t)v35) {
            char v342 = v35;
          }
          long long v305 = v342 >= v340 ? v342 : v340;
          if (v131 >= 0xF8) {
            break;
          }
          if (v131 >= 8)
          {
            LOWORD(v343) = PDMplusDM(*v58, v131, (unsigned __int16)*v305, ~(_BYTE)v131);
            goto LABEL_648;
          }
LABEL_649:
          unsigned int v344 = *v341++;
          unsigned int v131 = v344;
          v58 += 2;
          long long v35 = v305 + 1;
          LODWORD(v41) = v41 - 1;
          if (!v41)
          {
            int v46 = 0;
            goto LABEL_651;
          }
        }
        int v343 = *(_DWORD *)v58;
LABEL_648:
        *long long v305 = v343;
        goto LABEL_649;
      case 2:
        unsigned int v138 = *v59;
        if (v370)
        {
          if (v46)
          {
            uint64_t v139 = 0;
            uint64_t v140 = v59 + 1;
            int v141 = v35 - 1;
            while (1)
            {
              if (v138)
              {
                unsigned int v142 = ((unsigned __int16)(v138 * v46[v139] + ((v138 * v46[v139]) >> 8) + 1) >> 8);
                if (v142 < 0xF8)
                {
                  if (v142 < 8) {
                    goto LABEL_200;
                  }
                  unsigned int v145 = PDAM((unsigned __int16)*(_DWORD *)&v58[2 * v139], HIBYTE(*(_DWORD *)&v58[2 * v139]), v142);
                  unsigned int v144 = HIBYTE(v145);
                  if (HIBYTE(v145) < 8u) {
                    goto LABEL_200;
                  }
                  unsigned int v146 = (unsigned __int16)v35[v139];
                  char v147 = v31[v139];
                  unsigned int v145 = (unsigned __int16)v145;
LABEL_198:
                  unsigned int v148 = PDAplusDAM(v145, v144, v146, v147, v144 ^ 0xFF);
                  v35[v139] = v148;
                  unsigned int v144 = HIBYTE(v148);
LABEL_199:
                  v31[v139] = v144;
                  goto LABEL_200;
                }
                unsigned int v143 = *(_DWORD *)&v58[2 * v139];
                unsigned int v144 = HIBYTE(v143);
                if (HIBYTE(v143) >= 0xF8u)
                {
                  v35[v139] = v143;
                  goto LABEL_199;
                }
                if (v144 >= 8)
                {
                  unsigned int v146 = (unsigned __int16)v35[v139];
                  char v147 = v31[v139];
                  unsigned int v145 = (unsigned __int16)*(_DWORD *)&v58[2 * v139];
                  goto LABEL_198;
                }
              }
LABEL_200:
              unsigned int v138 = v140[v139++];
              ++v141;
              if (v373 == v139)
              {
                uint64_t v149 = (uint64_t)&v31[v139 - 1];
                v46 += v139 + v361;
                uint64_t v41 = v373;
LABEL_637:
                long long v35 = &v141[v362 + 1];
                long long v31 = (char *)(v149 + v364 + 1);
                goto LABEL_611;
              }
            }
          }
          vImage_Buffer v332 = v59 + 1;
          uint64_t v149 = (uint64_t)(v31 - 1);
          int v141 = v35 - 1;
          int v333 = v41;
          while (v138 >= 0xF8)
          {
            unsigned int v334 = HIBYTE(*(_DWORD *)v58);
            if (v334 >= 0xF8)
            {
              v141[1] = *(_DWORD *)v58;
              goto LABEL_634;
            }
            if (v334 >= 8)
            {
              unsigned int v336 = (unsigned __int16)v141[1];
              char v337 = *(unsigned char *)(v149 + 1);
              unsigned int v335 = (unsigned __int16)*(_DWORD *)v58;
              goto LABEL_633;
            }
LABEL_635:
            unsigned int v339 = *v332++;
            unsigned int v138 = v339;
            v58 += 2;
            ++v149;
            ++v141;
            if (!--v333)
            {
              int v46 = 0;
              long long v40 = v365;
              goto LABEL_637;
            }
          }
          if (v138 < 8) {
            goto LABEL_635;
          }
          unsigned int v335 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v138);
          unsigned int v334 = HIBYTE(v335);
          if (HIBYTE(v335) < 8u) {
            goto LABEL_635;
          }
          unsigned int v336 = (unsigned __int16)v141[1];
          char v337 = *(unsigned char *)(v149 + 1);
          unsigned int v335 = (unsigned __int16)v335;
LABEL_633:
          unsigned int v338 = PDAplusDAM(v335, v334, v336, v337, v334 ^ 0xFF);
          v141[1] = v338;
          unsigned int v334 = HIBYTE(v338);
LABEL_634:
          *(unsigned char *)(v149 + 1) = v334;
          goto LABEL_635;
        }
        if (v46)
        {
          uint64_t v308 = v59 + 1;
          uint64_t v309 = v35 - 1;
          uint64_t v44 = v366;
          while (1)
          {
            if (v138)
            {
              unsigned int v310 = ((unsigned __int16)(v138 * *v46 + ((v138 * *v46) >> 8) + 1) >> 8);
              if (v310 < 0xF8)
              {
                if (v310 < 8) {
                  goto LABEL_567;
                }
                unsigned int v311 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v310);
                unsigned int v312 = HIBYTE(v311);
              }
              else
              {
                unsigned int v311 = *(_DWORD *)v58;
                unsigned int v312 = HIBYTE(*(_DWORD *)v58);
                if (v312 >= 0xF8) {
                  goto LABEL_566;
                }
              }
              if (v312 >= 8)
              {
                LOWORD(v311) = PDplusDM(v311, (unsigned __int16)v309[1], ~v311 >> 24);
LABEL_566:
                v309[1] = v311;
              }
            }
LABEL_567:
            unsigned int v313 = *v308++;
            unsigned int v138 = v313;
            v58 += 2;
            ++v46;
            ++v309;
            LODWORD(v41) = v41 - 1;
            if (!v41)
            {
              v46 += v361;
              uint64_t v41 = v373;
LABEL_664:
              long long v35 = &v309[v362 + 1];
              v31 += v364;
              goto LABEL_665;
            }
          }
        }
        char v345 = v59 + 1;
        uint64_t v309 = v35 - 1;
        int v346 = v41;
        uint64_t v44 = v366;
        while (1)
        {
          if (v138 < 0xF8)
          {
            if (v138 < 8) {
              goto LABEL_662;
            }
            unsigned int v347 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v138);
            unsigned int v348 = HIBYTE(v347);
          }
          else
          {
            unsigned int v347 = *(_DWORD *)v58;
            unsigned int v348 = HIBYTE(*(_DWORD *)v58);
            if (v348 >= 0xF8) {
              goto LABEL_661;
            }
          }
          if (v348 >= 8)
          {
            LOWORD(v347) = PDplusDM(v347, (unsigned __int16)v309[1], ~v347 >> 24);
LABEL_661:
            v309[1] = v347;
          }
LABEL_662:
          unsigned int v349 = *v345++;
          unsigned int v138 = v349;
          v58 += 2;
          ++v309;
          if (!--v346)
          {
            int v46 = 0;
            long long v40 = v365;
            goto LABEL_664;
          }
        }
      case 3:
        uint64_t v150 = v46;
        while (1)
        {
          unsigned int v151 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v151 = (*v150 * v151 + ((*v150 * v151) >> 8) + 1) >> 8;
            }
            if (v151 >= 0xF8u)
            {
              int v152 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), *v31);
LABEL_210:
              *long long v35 = v152;
              *long long v31 = HIBYTE(v152);
              goto LABEL_211;
            }
            if (v151 >= 8u)
            {
              int v152 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), ((unsigned __int16)(*v31 * v151+ ((*v31 * v151) >> 8)+ 1) >> 8), (unsigned __int16)*v35, *v31, ~(_BYTE)v151);
              goto LABEL_210;
            }
          }
LABEL_211:
          ++v59;
          v58 += 2;
          v150 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
          if (!v41) {
            goto LABEL_243;
          }
        }
      case 4:
        uint64_t v150 = v46;
        while (1)
        {
          unsigned int v153 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v153 = (*v150 * v153 + ((*v150 * v153) >> 8) + 1) >> 8;
            }
            if (v153 >= 0xF8u)
            {
              int v154 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), ~*v31);
LABEL_221:
              *long long v35 = v154;
              *long long v31 = HIBYTE(v154);
              goto LABEL_222;
            }
            if (v153 >= 8u)
            {
              int v154 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), ((unsigned __int16)((*v31 ^ 0xFF) * v153+ (((*v31 ^ 0xFF)* v153) >> 8)+ 1) >> 8), (unsigned __int16)*v35, *v31, ~(_BYTE)v153);
              goto LABEL_221;
            }
          }
LABEL_222:
          ++v59;
          v58 += 2;
          v150 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
          if (!v41) {
            goto LABEL_243;
          }
        }
      case 5:
        int v155 = v41;
        unint64_t v156 = v46;
        do
        {
          unsigned int v157 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v157 = (*v156 * v157 + ((*v156 * v157) >> 8) + 1) >> 8;
            }
            if (v157 >= 8u)
            {
              unsigned int v158 = *v31;
              unsigned int v159 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v157);
              int v160 = PDAMplusDAM((unsigned __int16)v159, SHIBYTE(v159), v158, (unsigned __int16)*v35, v158, HIBYTE(v159) ^ 0xFF);
              *long long v35 = v160;
              *long long v31 = HIBYTE(v160);
            }
          }
          ++v59;
          v58 += 2;
          v156 += v46 != 0;
          ++v35;
          v31 += v374;
          --v155;
        }
        while (v155);
        int v46 = &v156[v361];
        goto LABEL_608;
      case 6:
        uint64_t v150 = v46;
        while (1)
        {
          unsigned int v161 = *v59;
          if (!*v59) {
            goto LABEL_242;
          }
          if (v46) {
            unsigned int v161 = (*v150 * v161 + ((*v150 * v161) >> 8) + 1) >> 8;
          }
          if (v161 < 8u) {
            goto LABEL_242;
          }
          unsigned int v162 = *v31;
          if (v162 <= 7) {
            break;
          }
          if (v162 <= 0xF7)
          {
            int v163 = PDAplusDAM((unsigned __int16)*v35, v162, (unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), ((unsigned __int16)(~(_BYTE)v162 * v161+ ((~(_BYTE)v162* v161) >> 8)+ 1) >> 8));
            goto LABEL_241;
          }
LABEL_242:
          ++v59;
          v58 += 2;
          v150 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
          if (!v41)
          {
LABEL_243:
            int v46 = &v150[v361];
LABEL_591:
            v35 += v362;
            v31 += v364;
LABEL_610:
            uint64_t v41 = v373;
LABEL_611:
            uint64_t v44 = v366;
            uint64_t v327 = v367;
            goto LABEL_612;
          }
        }
        int v163 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v161);
LABEL_241:
        *long long v35 = v163;
        *long long v31 = HIBYTE(v163);
        goto LABEL_242;
      case 7:
        uint64_t v164 = v46 != 0;
        if (v370)
        {
          int v165 = v41;
          uint64_t v166 = v46;
          while (1)
          {
            unsigned int v167 = *v59;
            if (*v59)
            {
              if (v46) {
                unsigned int v167 = (*v166 * v167 + ((*v166 * v167) >> 8) + 1) >> 8;
              }
              if (v167 >= 0xF8u)
              {
                int v168 = PDAM((unsigned __int16)*v35, *v31, *((unsigned char *)v58 + 3));
LABEL_253:
                *long long v35 = v168;
                *long long v31 = HIBYTE(v168);
                goto LABEL_254;
              }
              if (v167 >= 8u)
              {
                unsigned int v169 = *((unsigned __int8 *)v58 + 3) * v167;
                int v168 = PDAMplusDAM((unsigned __int16)*v35, *v31, ((unsigned __int16)(v169 + (v169 >> 8) + 1) >> 8), (unsigned __int16)*v35, *v31, ~(_BYTE)v167);
                goto LABEL_253;
              }
            }
LABEL_254:
            ++v59;
            v58 += 2;
            v166 += v164;
            ++v35;
            ++v31;
            if (!--v165) {
              goto LABEL_590;
            }
          }
        }
        int v314 = v41;
        uint64_t v166 = v46;
        while (1)
        {
          unsigned int v315 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v315 = (*v166 * v315 + ((*v166 * v315) >> 8) + 1) >> 8;
            }
            if (v315 >= 0xF8u)
            {
              __int16 v316 = PDM((unsigned __int16)*v35, *((unsigned char *)v58 + 3));
LABEL_577:
              *long long v35 = v316;
              goto LABEL_578;
            }
            if (v315 >= 8u)
            {
              unsigned int v317 = *((unsigned __int8 *)v58 + 3) * v315;
              __int16 v316 = PDMplusDM((unsigned __int16)*v35, ((unsigned __int16)(v317 + (v317 >> 8) + 1) >> 8), (unsigned __int16)*v35, ~(_BYTE)v315);
              goto LABEL_577;
            }
          }
LABEL_578:
          ++v59;
          v58 += 2;
          v166 += v164;
          ++v35;
          if (!--v314) {
            goto LABEL_590;
          }
        }
      case 8:
        uint64_t v170 = v46 != 0;
        if (v370)
        {
          int v171 = v41;
          uint64_t v166 = v46;
          while (1)
          {
            unsigned int v172 = *v59;
            if (*v59)
            {
              if (v46) {
                unsigned int v172 = (*v166 * v172 + ((*v166 * v172) >> 8) + 1) >> 8;
              }
              if (v172 >= 0xF8u)
              {
                int v173 = PDAM((unsigned __int16)*v35, *v31, ~*((unsigned char *)v58 + 3));
LABEL_265:
                *long long v35 = v173;
                *long long v31 = HIBYTE(v173);
                goto LABEL_266;
              }
              if (v172 >= 8u)
              {
                unsigned int v174 = (~*(_DWORD *)v58 >> 24) * v172;
                int v173 = PDAMplusDAM((unsigned __int16)*v35, *v31, ((unsigned __int16)(v174 + (v174 >> 8) + 1) >> 8), (unsigned __int16)*v35, *v31, ~(_BYTE)v172);
                goto LABEL_265;
              }
            }
LABEL_266:
            ++v59;
            v58 += 2;
            v166 += v170;
            ++v35;
            ++v31;
            if (!--v171) {
              goto LABEL_590;
            }
          }
        }
        int v318 = v41;
        uint64_t v166 = v46;
        break;
      case 9:
        uint64_t v175 = v46;
        do
        {
          unsigned int v176 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v176 = (*v175 * v176 + ((*v175 * v176) >> 8) + 1) >> 8;
            }
            if (v176 >= 8u)
            {
              int v177 = *v31;
              uint64_t v178 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v176);
              int v179 = PDAMplusDAM((unsigned __int16)v178, SBYTE3(v178), v177 ^ 0xFFu, (unsigned __int16)*v35, v177, (~(_BYTE)v176 + BYTE3(v178)));
              *long long v35 = v179;
              *long long v31 = HIBYTE(v179);
            }
          }
          ++v59;
          v58 += 2;
          v175 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
        }
        while (v41);
        int v46 = &v175[v361];
        v35 += v362;
        v31 += v364;
        int v39 = v357;
        goto LABEL_609;
      case 10:
        uint64_t v180 = v46;
        do
        {
          unsigned int v181 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v181 = (*v180 * v181 + ((*v180 * v181) >> 8) + 1) >> 8;
            }
            if (v181 >= 8u)
            {
              int v182 = *v31;
              unsigned int v183 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v181);
              int v184 = PDAMplusDAM((unsigned __int16)v183, SHIBYTE(v183), v182 ^ 0xFFu, (unsigned __int16)*v35, v182, HIBYTE(v183) ^ 0xFF);
              *long long v35 = v184;
              *long long v31 = HIBYTE(v184);
            }
          }
          ++v59;
          v58 += 2;
          v180 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
        }
        while (v41);
        goto LABEL_607;
      case 11:
        uint64_t v185 = v46 != 0;
        if (v370)
        {
          uint64_t v180 = v46;
          do
          {
            unsigned int v186 = *v59;
            if (*v59)
            {
              if (v46) {
                unsigned int v186 = (*v180 * v186 + ((*v180 * v186) >> 8) + 1) >> 8;
              }
              if (v186 >= 8u)
              {
                unsigned int v187 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v186);
                int v188 = PDAplusdDA(*v35, *v31, v187, HIBYTE(v187));
                *long long v35 = v188;
                *long long v31 = HIBYTE(v188);
              }
            }
            ++v59;
            v58 += 2;
            v180 += v185;
            ++v35;
            ++v31;
            LODWORD(v41) = v41 - 1;
          }
          while (v41);
        }
        else
        {
          uint64_t v180 = v46;
          do
          {
            unsigned int v322 = *v59;
            if (*v59)
            {
              if (v46) {
                unsigned int v322 = (*v180 * v322 + ((*v180 * v322) >> 8) + 1) >> 8;
              }
              if (v322 >= 8u)
              {
                unsigned int v323 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v322);
                *long long v35 = PDplusdDA((unsigned __int16)*v35, v323, HIBYTE(v323));
              }
            }
            ++v59;
            v58 += 2;
            v180 += v185;
            ++v35;
            LODWORD(v41) = v41 - 1;
          }
          while (v41);
        }
        goto LABEL_607;
      case 12:
        uint64_t v189 = v46 != 0;
        if (v370)
        {
          uint64_t v180 = v46;
          do
          {
            unsigned int v190 = *v59;
            if (*v59)
            {
              if (v46) {
                unsigned int v190 = (*v180 * v190 + ((*v180 * v190) >> 8) + 1) >> 8;
              }
              if (v190 >= 8u)
              {
                unsigned int v191 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v190);
                int v192 = PDApluslDA((unsigned __int16)*v35, *v31, (unsigned __int16)v191, HIBYTE(v191));
                *long long v35 = v192;
                *long long v31 = HIBYTE(v192);
              }
            }
            ++v59;
            v58 += 2;
            v180 += v189;
            ++v35;
            ++v31;
            LODWORD(v41) = v41 - 1;
          }
          while (v41);
        }
        else
        {
          uint64_t v180 = v46;
          do
          {
            unsigned int v324 = *v59;
            if (*v59)
            {
              if (v46) {
                unsigned int v324 = (*v180 * v324 + ((*v180 * v324) >> 8) + 1) >> 8;
              }
              if (v324 >= 8u)
              {
                int v325 = PDM(*v58, v324);
                unsigned int v326 = (((unsigned __int16)*v35 | ((unsigned __int16)*v35 << 15)) & 0x1F07C1F)
                     + ((v325 | (v325 << 15)) & 0x1F07C1F);
                *long long v35 = (((30 * ((v326 >> 5) & 0x100401)) | (15 * ((v326 >> 5) & 0x100401)) | v326) >> 15) & 0x3E0 | ((30 * ((v326 >> 5) & 0x401)) | (15 * ((v326 >> 5) & 0x401)) | v326) & 0x7C1F;
              }
            }
            ++v59;
            v58 += 2;
            v180 += v189;
            ++v35;
            LODWORD(v41) = v41 - 1;
          }
          while (v41);
        }
LABEL_607:
        int v46 = &v180[v361];
LABEL_608:
        v35 += v362;
        v31 += v364;
LABEL_609:
        long long v40 = v365;
        goto LABEL_610;
      case 13:
        int v193 = v41;
        uint64_t v166 = v46;
        int v194 = v193;
        do
        {
          unsigned int v195 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v195 = (*v166 * v195 + ((*v166 * v195) >> 8) + 1) >> 8;
            }
            if (v195 >= 8u)
            {
              unsigned int v196 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v195);
              unsigned int v198 = HIBYTE(v196);
              if (HIBYTE(v196) >= 8u)
              {
                if (v370)
                {
                  unsigned int v199 = *v31;
                  if (v199 >= 8)
                  {
                    unsigned int v196 = PDAmultiplyPDA((unsigned __int16)*v35, v199, (unsigned __int16)v196, v198, v197);
                    unsigned int v198 = HIBYTE(v196);
                  }
                  *long long v35 = v196;
                  *long long v31 = v198;
                }
                else
                {
                  *long long v35 = PDAmultiplyPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v196, v198, v197);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v194;
        }
        while (v194);
        goto LABEL_590;
      case 14:
        int v200 = v41;
        uint64_t v166 = v46;
        int v201 = v200;
        do
        {
          unsigned int v202 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v202 = (*v166 * v202 + ((*v166 * v202) >> 8) + 1) >> 8;
            }
            if (v202 >= 8u)
            {
              unsigned int v203 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v202);
              unsigned int v204 = HIBYTE(v203);
              if (HIBYTE(v203) >= 8u)
              {
                if (v370)
                {
                  unsigned int v205 = *v31;
                  if (v205 >= 8)
                  {
                    unsigned int v203 = PDAscreenPDA((unsigned __int16)*v35, v205, (unsigned __int16)v203, v204);
                    unsigned int v204 = HIBYTE(v203);
                  }
                  *long long v35 = v203;
                  *long long v31 = v204;
                }
                else
                {
                  *long long v35 = PDAscreenPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v203, v204);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v201;
        }
        while (v201);
        goto LABEL_590;
      case 15:
        int v206 = v41;
        uint64_t v166 = v46;
        int v207 = v206;
        do
        {
          unsigned int v208 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v208 = (*v166 * v208 + ((*v166 * v208) >> 8) + 1) >> 8;
            }
            if (v208 >= 8u)
            {
              unsigned int v209 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v208);
              unsigned int v210 = HIBYTE(v209);
              if (HIBYTE(v209) >= 8u)
              {
                if (v370)
                {
                  unsigned int v211 = *v31;
                  if (v211 >= 8)
                  {
                    unsigned int v209 = PDAoverlayPDA((unsigned __int16)*v35, v211, (unsigned __int16)v209, v210);
                    unsigned int v210 = HIBYTE(v209);
                  }
                  *long long v35 = v209;
                  *long long v31 = v210;
                }
                else
                {
                  *long long v35 = PDAoverlayPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v209, v210);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v207;
        }
        while (v207);
        goto LABEL_590;
      case 16:
        int v212 = v41;
        uint64_t v166 = v46;
        int v213 = v212;
        do
        {
          unsigned int v214 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v214 = (*v166 * v214 + ((*v166 * v214) >> 8) + 1) >> 8;
            }
            if (v214 >= 8u)
            {
              unsigned int v215 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v214);
              unsigned int v216 = HIBYTE(v215);
              if (HIBYTE(v215) >= 8u)
              {
                if (v370)
                {
                  unsigned int v217 = *v31;
                  if (v217 >= 8)
                  {
                    unsigned int v215 = PDAdarkenPDA((unsigned __int16)*v35, v217, (unsigned __int16)v215, v216);
                    unsigned int v216 = HIBYTE(v215);
                  }
                  *long long v35 = v215;
                  *long long v31 = v216;
                }
                else
                {
                  *long long v35 = PDAdarkenPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v215, v216);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v213;
        }
        while (v213);
        goto LABEL_590;
      case 17:
        int v218 = v41;
        uint64_t v166 = v46;
        int v219 = v218;
        do
        {
          unsigned int v220 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v220 = (*v166 * v220 + ((*v166 * v220) >> 8) + 1) >> 8;
            }
            if (v220 >= 8u)
            {
              unsigned int v221 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v220);
              unsigned int v222 = HIBYTE(v221);
              if (HIBYTE(v221) >= 8u)
              {
                if (v370)
                {
                  unsigned int v223 = *v31;
                  if (v223 >= 8)
                  {
                    unsigned int v221 = PDAlightenPDA((unsigned __int16)*v35, v223, (unsigned __int16)v221, v222);
                    unsigned int v222 = HIBYTE(v221);
                  }
                  *long long v35 = v221;
                  *long long v31 = v222;
                }
                else
                {
                  *long long v35 = PDAlightenPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v221, v222);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v219;
        }
        while (v219);
        goto LABEL_590;
      case 18:
        int v224 = v41;
        uint64_t v166 = v46;
        int v225 = v224;
        do
        {
          unsigned int v226 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v226 = (*v166 * v226 + ((*v166 * v226) >> 8) + 1) >> 8;
            }
            if (v226 >= 8u)
            {
              unsigned int v227 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v226);
              unsigned int v228 = HIBYTE(v227);
              if (HIBYTE(v227) >= 8u)
              {
                if (v370)
                {
                  unsigned int v229 = *v31;
                  if (v229 >= 8)
                  {
                    unsigned int v227 = PDAcolordodgePDA((unsigned __int16)*v35, v229, (unsigned __int16)v227, v228);
                    unsigned int v228 = HIBYTE(v227);
                  }
                  *long long v35 = v227;
                  *long long v31 = v228;
                }
                else
                {
                  *long long v35 = PDAcolordodgePDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v227, v228);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v225;
        }
        while (v225);
        goto LABEL_590;
      case 19:
        int v230 = v41;
        uint64_t v166 = v46;
        int v231 = v230;
        do
        {
          unsigned int v232 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v232 = (*v166 * v232 + ((*v166 * v232) >> 8) + 1) >> 8;
            }
            if (v232 >= 8u)
            {
              unsigned int v233 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v232);
              unsigned int v234 = HIBYTE(v233);
              if (HIBYTE(v233) >= 8u)
              {
                if (v370)
                {
                  unsigned int v235 = *v31;
                  if (v235 >= 8)
                  {
                    unsigned int v233 = PDAcolorburnPDA((unsigned __int16)*v35, v235, (unsigned __int16)v233, v234);
                    unsigned int v234 = HIBYTE(v233);
                  }
                  *long long v35 = v233;
                  *long long v31 = v234;
                }
                else
                {
                  *long long v35 = PDAcolorburnPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v233, v234);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v231;
        }
        while (v231);
        goto LABEL_590;
      case 20:
        int v236 = v41;
        uint64_t v166 = v46;
        int v237 = v236;
        do
        {
          unsigned int v238 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v238 = (*v166 * v238 + ((*v166 * v238) >> 8) + 1) >> 8;
            }
            if (v238 >= 8u)
            {
              unsigned int v239 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v238);
              unsigned int v240 = HIBYTE(v239);
              if (HIBYTE(v239) >= 8u)
              {
                if (v370)
                {
                  unsigned int v241 = *v31;
                  if (v241 >= 8)
                  {
                    unsigned int v239 = PDAsoftlightPDA((unsigned __int16)*v35, v241, (unsigned __int16)v239, v240);
                    unsigned int v240 = HIBYTE(v239);
                  }
                  *long long v35 = v239;
                  *long long v31 = v240;
                }
                else
                {
                  *long long v35 = PDAsoftlightPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v239, v240);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v237;
        }
        while (v237);
        goto LABEL_590;
      case 21:
        int v242 = v41;
        uint64_t v166 = v46;
        int v243 = v242;
        do
        {
          unsigned int v244 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v244 = (*v166 * v244 + ((*v166 * v244) >> 8) + 1) >> 8;
            }
            if (v244 >= 8u)
            {
              unsigned int v245 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v244);
              unsigned int v246 = HIBYTE(v245);
              if (HIBYTE(v245) >= 8u)
              {
                if (v370)
                {
                  unsigned int v247 = *v31;
                  if (v247 >= 8)
                  {
                    unsigned int v245 = PDAhardlightPDA((unsigned __int16)*v35, v247, (unsigned __int16)v245, v246);
                    unsigned int v246 = HIBYTE(v245);
                  }
                  *long long v35 = v245;
                  *long long v31 = v246;
                }
                else
                {
                  *long long v35 = PDAhardlightPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v245, v246);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v243;
        }
        while (v243);
        goto LABEL_590;
      case 22:
        int v248 = v41;
        uint64_t v166 = v46;
        int v249 = v248;
        do
        {
          unsigned int v250 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v250 = (*v166 * v250 + ((*v166 * v250) >> 8) + 1) >> 8;
            }
            if (v250 >= 8u)
            {
              unsigned int v251 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v250);
              unsigned int v252 = HIBYTE(v251);
              if (HIBYTE(v251) >= 8u)
              {
                if (v370)
                {
                  unsigned int v253 = *v31;
                  if (v253 >= 8)
                  {
                    unsigned int v251 = PDAdifferencePDA((unsigned __int16)*v35, v253, (unsigned __int16)v251, v252);
                    unsigned int v252 = HIBYTE(v251);
                  }
                  *long long v35 = v251;
                  *long long v31 = v252;
                }
                else
                {
                  *long long v35 = PDAdifferencePDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v251, v252);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v249;
        }
        while (v249);
        goto LABEL_590;
      case 23:
        int v254 = v41;
        uint64_t v166 = v46;
        int v255 = v254;
        do
        {
          unsigned int v256 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v256 = (*v166 * v256 + ((*v166 * v256) >> 8) + 1) >> 8;
            }
            if (v256 >= 8u)
            {
              unsigned int v257 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v256);
              unsigned int v258 = HIBYTE(v257);
              if (HIBYTE(v257) >= 8u)
              {
                if (v370)
                {
                  unsigned int v259 = *v31;
                  if (v259 >= 8)
                  {
                    unsigned int v257 = PDAexclusionPDA((unsigned __int16)*v35, v259, (unsigned __int16)v257, v258);
                    unsigned int v258 = HIBYTE(v257);
                  }
                  *long long v35 = v257;
                  *long long v31 = v258;
                }
                else
                {
                  *long long v35 = PDAexclusionPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v257, v258);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v255;
        }
        while (v255);
        goto LABEL_590;
      case 24:
        int v260 = v41;
        uint64_t v166 = v46;
        int v261 = v260;
        do
        {
          unsigned int v262 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v262 = (*v166 * v262 + ((*v166 * v262) >> 8) + 1) >> 8;
            }
            if (v262 >= 8u)
            {
              unsigned int v263 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v262);
              unsigned int v264 = HIBYTE(v263);
              if (HIBYTE(v263) >= 8u)
              {
                if (v370)
                {
                  unsigned int v265 = *v31;
                  if (v265 >= 8)
                  {
                    unsigned int v263 = PDAhuePDA((unsigned __int16)*v35, v265, (unsigned __int16)v263, v264);
                    unsigned int v264 = HIBYTE(v263);
                  }
                  *long long v35 = v263;
                  *long long v31 = v264;
                }
                else
                {
                  *long long v35 = PDAhuePDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v263, v264);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v261;
        }
        while (v261);
        goto LABEL_590;
      case 25:
        int v266 = v41;
        uint64_t v166 = v46;
        int v267 = v266;
        do
        {
          unsigned int v268 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v268 = (*v166 * v268 + ((*v166 * v268) >> 8) + 1) >> 8;
            }
            if (v268 >= 8u)
            {
              unsigned int v269 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v268);
              unsigned int v270 = HIBYTE(v269);
              if (HIBYTE(v269) >= 8u)
              {
                if (v370)
                {
                  unsigned int v271 = *v31;
                  if (v271 >= 8)
                  {
                    unsigned int v269 = PDAsaturationPDA((unsigned __int16)*v35, v271, (unsigned __int16)v269, v270);
                    unsigned int v270 = HIBYTE(v269);
                  }
                  *long long v35 = v269;
                  *long long v31 = v270;
                }
                else
                {
                  *long long v35 = PDAsaturationPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v269, v270);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v267;
        }
        while (v267);
        goto LABEL_590;
      case 26:
        int v272 = v41;
        uint64_t v166 = v46;
        int v273 = v272;
        do
        {
          unsigned int v274 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v274 = (*v166 * v274 + ((*v166 * v274) >> 8) + 1) >> 8;
            }
            if (v274 >= 8u)
            {
              unsigned int v275 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v274);
              unsigned int v276 = HIBYTE(v275);
              if (HIBYTE(v275) >= 8u)
              {
                if (v370)
                {
                  unsigned int v277 = *v31;
                  if (v277 >= 8)
                  {
                    unsigned int v275 = PDAluminosityPDA((unsigned __int16)v275, v276, (unsigned __int16)*v35, v277);
                    unsigned int v276 = HIBYTE(v275);
                  }
                  *long long v35 = v275;
                  *long long v31 = v276;
                }
                else
                {
                  *long long v35 = PDAluminosityPDA((unsigned __int16)v275, v276, (unsigned __int16)*v35, 0xFFu);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v273;
        }
        while (v273);
        goto LABEL_590;
      case 27:
        int v278 = v41;
        uint64_t v166 = v46;
        int v279 = v278;
        do
        {
          unsigned int v280 = *v59;
          if (*v59)
          {
            if (v46) {
              unsigned int v280 = (*v166 * v280 + ((*v166 * v280) >> 8) + 1) >> 8;
            }
            if (v280 >= 8u)
            {
              unsigned int v281 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v280);
              unsigned int v282 = HIBYTE(v281);
              if (HIBYTE(v281) >= 8u)
              {
                if (v370)
                {
                  unsigned int v283 = *v31;
                  if (v283 >= 8)
                  {
                    unsigned int v281 = PDAluminosityPDA((unsigned __int16)*v35, v283, (unsigned __int16)v281, v282);
                    unsigned int v282 = HIBYTE(v281);
                  }
                  *long long v35 = v281;
                  *long long v31 = v282;
                }
                else
                {
                  *long long v35 = PDAluminosityPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v281, v282);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v279;
        }
        while (v279);
        goto LABEL_590;
      default:
        goto LABEL_611;
    }
    while (1)
    {
      unsigned int v319 = *v59;
      if (*v59)
      {
        if (v46) {
          unsigned int v319 = (*v166 * v319 + ((*v166 * v319) >> 8) + 1) >> 8;
        }
        if (v319 >= 0xF8u)
        {
          __int16 v320 = PDM((unsigned __int16)*v35, ~*((unsigned char *)v58 + 3));
LABEL_588:
          *long long v35 = v320;
          goto LABEL_589;
        }
        if (v319 >= 8u)
        {
          unsigned int v321 = (~*(_DWORD *)v58 >> 24) * v319;
          __int16 v320 = PDMplusDM((unsigned __int16)*v35, ((unsigned __int16)(v321 + (v321 >> 8) + 1) >> 8), (unsigned __int16)*v35, ~(_BYTE)v319);
          goto LABEL_588;
        }
      }
LABEL_589:
      ++v59;
      v58 += 2;
      v166 += v170;
      ++v35;
      if (!--v318)
      {
LABEL_590:
        int v46 = &v166[v361];
        goto LABEL_591;
      }
    }
  }
}

uint64_t DITHERRGBA32M(unsigned int a1, int a2, int a3)
{
  unsigned int v3 = ((a1 >> 8) & 0xFF00FF) * a3 + 65537 + (((((a1 >> 8) & 0xFF00FF) * a3) >> 8) & 0xFF00FF);
  unsigned int v4 = (a1 & 0xFF00FF) * a3 + 65537 + ((((a1 & 0xFF00FF) * a3) >> 8) & 0xFF00FF);
  unsigned int v5 = *(unsigned __int16 *)((char *)&pixel_dither_lookup + ((v4 >> 7) & 0x1FELL)) + a2;
  return (4 * (*(unsigned __int16 *)((char *)&pixel_dither_lookup + ((v3 >> 23) & 0x1FELL)) + a2)) & 0x7C00 | ((*(unsigned __int16 *)((char *)&pixel_dither_lookup + ((v3 >> 7) & 0x1FELL)) + a2) >> 8) & 0x1F | (((v5 >> 10) & 7) << 24) & 0x7FFFFFF | (BYTE1(v5) << 27) | ((*(unsigned __int16 *)((char *)&pixel_dither_lookup + ((v4 >> 23) & 0x1FELL)) + a2) >> 3) & 0x3E0;
}

uint64_t DITHERRGBA32(unsigned int a1, int a2)
{
  unsigned int v2 = pixel_dither_lookup[a1] + a2;
  return (4 * (*(unsigned __int16 *)((char *)pixel_dither_lookup + ((a1 >> 23) & 0x1FELL)) + a2)) & 0x7C00 | ((*(unsigned __int16 *)((char *)pixel_dither_lookup + ((a1 >> 15) & 0x1FELL)) + a2) >> 3) & 0x3E0 | ((*(unsigned __int16 *)((char *)pixel_dither_lookup + ((a1 >> 7) & 0x1FELL)) + a2) >> 8) & 0x1F | (BYTE1(v2) << 27) | (((v2 >> 10) & 7) << 24);
}

uint64_t PDAM(unsigned int a1, char a2, char a3)
{
  int v3 = ~a3 >> 3;
  unsigned int v4 = ((a1 | (a1 << 11)) & 0x1F001F) * v3;
  unsigned int v5 = (((a2 & 0xF8) << 13) | (a1 >> 10) & 0x1F) * v3;
  unsigned int v6 = (a1 & 0x7FFFFFF | ((a2 & 0xF8) >> 3 << 27))
     - (((v4 + 65537 + ((v4 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v4 + 65537 + ((v4 >> 5) & 0x1F001F)) >> 5) & 0x1F | ((((v5 + 65537 + ((v5 >> 5) & 0x1F001F)) >> 5) & 0x1F) << 10) & 0x7FFFFFF | (((v5 + 65537 + ((v5 >> 5) & 0x1F001F)) >> 21) << 27));
  return v6 | (v6 >> 29 << 24);
}

uint64_t PDM(unsigned int a1, char a2)
{
  int v2 = ~a2 >> 3;
  unsigned int v3 = ((a1 | (a1 << 11)) & 0x1F001F) * v2;
  return (unsigned __int16)(a1
                          - ((33 * ((a1 >> 10) & 0x1F) * v2 + 32) & 0x7C00 | ((v3 + 65537 + ((v3 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v3 + 65537 + ((v3 >> 5) & 0x1F001F)) >> 5) & 0x1F));
}

uint64_t PDAMplusDAM(unsigned int a1, char a2, unsigned int a3, unsigned int a4, char a5, unsigned int a6)
{
  unsigned int v6 = ((a1 | (a1 << 11)) & 0x1F001F) * (a3 >> 3) + ((a4 | (a4 << 11)) & 0x1F001F) * (a6 >> 3);
  unsigned int v7 = (((a2 & 0xF8) << 13) | (a1 >> 10) & 0x1F) * (a3 >> 3) + (((a5 & 0xF8) << 13) | (a4 >> 10) & 0x1F) * (a6 >> 3);
  return ((v6 + 65537 + ((v6 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v6 + 65537 + ((v6 >> 5) & 0x1F001F)) >> 5) & 0x1F | ((((v7 + 65537 + ((v7 >> 5) & 0x1F001F)) >> 5) & 0x1F) << 10) & 0xFFFFFF | (((v7 + 65537 + ((v7 >> 5) & 0x1F001F)) >> 21) << 27) | ((((v7 + 65537 + ((v7 >> 5) & 0x1F001F)) >> 23) & 7) << 24);
}

uint64_t PDMplusDM(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = ((a1 | (a1 << 11)) & 0x1F001F) * (a2 >> 3) + ((a3 | (a3 << 11)) & 0x1F001F) * (a4 >> 3);
  int v5 = ((a1 >> 10) & 0x1F) * (a2 >> 3) + ((a3 >> 10) & 0x1F) * (a4 >> 3);
  return ((v5 & 0x3E0) + 32 * v5 + 32) & 0x7C00 | ((v4 + 65537 + ((v4 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v4 + 65537 + ((v4 >> 5) & 0x1F001F)) >> 5) & 0x1F;
}

uint64_t PDAplusDAM(int a1, char a2, unsigned int a3, char a4, unsigned int a5)
{
  unsigned int v5 = ((a3 | (a3 << 11)) & 0x1F001F) * (a5 >> 3);
  unsigned int v6 = (((a4 & 0xF8) << 13) | (a3 >> 10) & 0x1F) * (a5 >> 3);
  unsigned int v7 = (a1 & 0x7FFFFFF | ((a2 & 0xF8) >> 3 << 27))
     + (((v5 + 65537 + ((v5 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v5 + 65537 + ((v5 >> 5) & 0x1F001F)) >> 5) & 0x1F | ((((v6 + 65537 + ((v6 >> 5) & 0x1F001F)) >> 5) & 0x1F) << 10) & 0x7FFFFFF | (((v6 + 65537 + ((v6 >> 5) & 0x1F001F)) >> 21) << 27));
  return v7 | (v7 >> 29 << 24);
}

uint64_t PDplusDM(__int16 a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = ((a2 | (a2 << 11)) & 0x1F001F) * (a3 >> 3);
  return (unsigned __int16)(((33 * ((a2 >> 10) & 0x1F) * (a3 >> 3) + 32) & 0x7C00 | ((v3 + 65537 + ((v3 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v3 + 65537 + ((v3 >> 5) & 0x1F001F)) >> 5) & 0x1F)
                          + a1);
}

uint64_t PDAplusdDA(__int16 a1, unsigned int a2, __int16 a3, unsigned int a4)
{
  unsigned int v4 = 1057 * (a2 >> 3) - (a1 & 0x7FFF);
  unsigned int v5 = v4 >> 5;
  unsigned int v6 = 1057 * (a4 >> 3) - (a3 & 0x7FFF);
  int v7 = (v6 & 0x7C1F) + (v4 & 0x7C1F);
  unsigned int v8 = ((a4 >> 3) & 0xFFFF83FF | (((v6 >> 5) & 0x1F) << 10)) + ((a2 >> 3) & 0xFFFF83FF | ((v5 & 0x1F) << 10));
  unsigned int v9 = (30 * ((v8 >> 5) & 0xFFFFFC1F | v7 & 0x8020)) | (15 * ((v8 >> 5) & 0xFFFFFC1F | v7 & 0x8020));
  return (1057 * ((v9 | v8) & 0x1F) - (((v9 | v8) >> 5) & 0x3E0 | (v7 | (v9 >> 5)) & 0x7C1F)) | ((((v9 | v8) >> 2) & 7) << 24) | ((v9 | v8) << 27);
}

uint64_t PDplusdDA(int a1, __int16 a2, unsigned int a3)
{
  unsigned int v3 = ((1057 * (a3 >> 3) - (a2 & 0x7FFF)) & 0x7C1F | ((1057 * (a3 >> 3) - (a2 & 0x7FFF)) << 15) & 0x1F07C1F)
     + ((a1 ^ 0x7FFF | ((a1 ^ 0x7FFF) << 15)) & 0x1F07C1F);
  return ((((15 * ((v3 >> 5) & 0x100401)) | v3 | (30 * ((v3 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15
                                                                                                 * ((v3 >> 5) & 0x100401)) | v3 | (30 * ((v3 >> 5) & 0x100401))) & 0x7C1F) ^ 0x7FFF;
}

uint64_t PDApluslDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v4 = (a3 & 0x7C1F) + (a1 & 0x7C1F);
  unsigned int v5 = ((a4 >> 3) & 0xFFFF83FF | (((a3 >> 5) & 0x1F) << 10)) + ((a2 >> 3) & 0xFFFF83FF | (((a1 >> 5) & 0x1F) << 10));
  unsigned int v6 = (v5 >> 5) & 0xFFFFFC1F | v4 & 0x8020;
  return (v4 | (((30 * v6) | (15 * v6)) >> 5)) & 0x7C1F | (((30 * v6) | (15 * v6) | v5) >> 5) & 0x3E0 | (((30 * v6) | (15 * v6) | v5) << 27) | (((((30 * v6) | (15 * v6) | v5) >> 2) & 7) << 24);
}

uint64_t PDAmultiplyPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, int8x16_t a5)
{
  int v5 = a2 & 0xF8 | (a2 >> 5);
  int v6 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  int v7 = a4 & 0xF8 | (a4 >> 5);
  uint32x2_t v8 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x3E000007C00);
  uint32x2_t v9 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x3E000007C00);
  int32x2_t v10 = (int32x2_t)vorr_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF9FFFFFFF4));
  int v11 = ((v7 ^ 0xFF) + v6) * ((a1 >> 2) & 7 | (8 * (a1 & 0x1F)));
  *(int32x2_t *)a5.i8 = vmul_s32(vadd_s32(vdup_n_s32(v7 ^ 0xFFu), v10), (int32x2_t)vorr_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF9FFFFFFF4)));
  double v12 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)a5.i8, v10, vdup_n_s32(v5 ^ 0xFFu)));
  int v13 = v11 + v6 * (v5 ^ 0xFF);
  if (v5 != 255)
  {
    int v11 = v13;
    *(double *)a5.i64 = v12;
  }
  int32x4_t v14 = (int32x4_t)vextq_s8(a5, a5, 0xCuLL);
  v14.i32[0] = 255 * (v7 + v5) - v7 * v5;
  v14.i32[3] = v11;
  v15.i64[0] = 0x8000000080;
  v15.i64[1] = 0x8000000080;
  int32x4_t v16 = vaddq_s32(v14, v15);
  int32x4_t v17 = vdupq_n_s32(0xFE80u);
  unsigned __int16 v18 = vmovn_s32(vcgtq_s32(v17, v14)).u16[0];
  *(int16x4_t *)v14.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v17, (uint32x4_t)v14));
  v14.i16[0] = v18;
  int32x4_t v19 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v14.i8), (int8x16_t)v16, (int8x16_t)v17);
  v16.i32[1] = 8;
  v16.i64[1] = 0x800000008;
  v16.i32[0] = v19.i32[0] >> 8;
  v17.i32[0] = vaddq_s32(v19, v16).u32[0];
  int32x4_t v20 = (int32x4_t)vshlq_u32((uint32x4_t)v19, (uint32x4_t)vnegq_s32(v16));
  uint32x4_t v21 = (uint32x4_t)vaddq_s32(v20, v19);
  v20.i32[0] = v17.i32[0];
  v19.i32[0] = 8;
  uint32x4_t v22 = (uint32x4_t)vshlq_s32(v20, vnegq_s32(v19));
  v20.i32[0] = vshlq_u32(v22, (uint32x4_t)xmmword_1850CD960).u32[0];
  unsigned int v23 = (unsigned __int32)v22.i32[0] >> 3;
  int8x16_t v24 = (int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1850CD970);
  v24.i32[0] = v20.i32[0];
  int8x16_t v25 = vandq_s8(v24, (int8x16_t)xmmword_1850CD980);
  *(int8x8_t *)v25.i8 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
  return v25.i32[0] | v25.i32[1] | (v23 << 27);
}

uint64_t PDAscreenPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v4 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  unsigned int v5 = ((a3 >> 2) & 7 | (8 * (a3 & 0x1F))) * (v4 ^ 0xFF) - v4 + (v4 << 8);
  int v6 = 255 * ((a4 & 0xF8 | (a4 >> 5)) + (a2 & 0xF8 | (a2 >> 5))) - (a4 & 0xF8 | (a4 >> 5)) * (a2 & 0xF8 | (a2 >> 5));
  unsigned int v7 = v5 + 128;
  if (v5 >> 7 >= 0x1FD) {
    unsigned int v7 = 65152;
  }
  unsigned int v8 = v7 + (v7 >> 8);
  if (v6 >= 65152) {
    int v9 = 65152;
  }
  else {
    int v9 = v6 + 128;
  }
  uint32x2_t v10 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x3E000007C00);
  int32x2_t v11 = (int32x2_t)vorr_s8((int8x8_t)vshl_u32(v10, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v10, (uint32x2_t)0xFFFFFFF9FFFFFFF4));
  uint32x2_t v12 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x3E000007C00);
  int32x2_t v13 = vmla_s32(vmul_s32(v11, (int32x2_t)0xFF000000FFLL), (int32x2_t)vorr_s8((int8x8_t)vshl_u32(v12, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v12, (uint32x2_t)0xFFFFFFF9FFFFFFF4)), (int32x2_t)veor_s8((int8x8_t)v11, (int8x8_t)0xFF000000FFLL));
  int8x8_t v14 = (int8x8_t)vdup_n_s32(0xFE80u);
  uint32x2_t v15 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v14, (uint32x2_t)v13), (int8x8_t)vadd_s32(v13, (int32x2_t)0x8000000080), v14);
  int32x2_t v16 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v15, v15, 8uLL), (uint32x2_t)0xFFFFFFFAFFFFFFFFLL), (int8x8_t)0x3E000007C00);
  return vorr_s8((int8x8_t)v16, (int8x8_t)vdup_lane_s32(v16, 1)).u32[0] | ((unsigned __int16)v8 >> 11) | (((v9 + (v9 >> 8)) >> 8) >> 3 << 27) | ((v9 + (v9 >> 8)) >> 8 << 19) & 0x7000000;
}

uint64_t PDAoverlayPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  unsigned int v5 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  unsigned int v6 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  unsigned int v7 = a2 & 0xF8 | (a2 >> 5);
  unsigned int v8 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  unsigned int v9 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  unsigned int v10 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  unsigned int v11 = a4 & 0xF8 | (a4 >> 5);
  if (v8 >= v11) {
    unsigned int v8 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v4 >= v7) {
    unsigned int v4 = a2 & 0xF8 | (a2 >> 5);
  }
  int v12 = 2 * v4 * v8;
  if (v9 >= v11) {
    unsigned int v9 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v5 >= v7) {
    unsigned int v5 = a2 & 0xF8 | (a2 >> 5);
  }
  int v13 = 2 * v5 * v9;
  if (v10 >= v11) {
    unsigned int v10 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v6 >= v7) {
    unsigned int v6 = a2 & 0xF8 | (a2 >> 5);
  }
  int v14 = 2 * v6 * v10;
  int v15 = v11 * v7;
  unsigned int v16 = (v7 + 1) >> 1;
  unsigned int v17 = v11 + 255;
  unsigned int v18 = v7 + 255;
  int v19 = (v11 + 255) * v4 + v8 * (v7 + 255) - (v11 * v7 + v12);
  int v20 = v11 ^ 0xFF;
  int v21 = v7 ^ 0xFF;
  int v22 = v8 * (v7 ^ 0xFF) + (v11 ^ 0xFF) * v4 + v12;
  if (v4 < v16) {
    int v23 = v22;
  }
  else {
    int v23 = v19;
  }
  int v24 = v17 * v5 + v9 * v18 - (v15 + v13);
  unsigned int v25 = v9 * v21 + v20 * v5 + v13;
  if (v5 < v16) {
    int v26 = v25;
  }
  else {
    int v26 = v24;
  }
  if (v6 < v16) {
    int v27 = v10 * v21 + v20 * v6 + v14;
  }
  else {
    int v27 = v17 * v6 + v10 * v18 - (v15 + v14);
  }
  int v28 = 255 * (v11 + v7) - v15;
  if (v23 >= 65152) {
    unsigned int v29 = 65152;
  }
  else {
    unsigned int v29 = v23 + 128;
  }
  unsigned int v30 = v29 + (v29 >> 8);
  int8x8_t v31 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v27, v26), (int32x2_t)0x8000000080);
  int32x2_t v32 = vdup_n_s32(0xFE80u);
  int8x8_t v33 = (int8x8_t)vcgt_s32(v32, (int32x2_t)__PAIR64__(v27, v26));
  if (v28 >= 65152) {
    int v34 = 65152;
  }
  else {
    int v34 = v28 + 128;
  }
  uint32x2_t v35 = (uint32x2_t)vbsl_s8(v33, v31, (int8x8_t)v32);
  int8x8_t v36 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v35, v35, 8uLL), (uint32x2_t)0xFFFFFFF5FFFFFFFALL), (int8x8_t)0x1F000003E0);
  return ((v34 + (v34 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v34 + (v34 >> 8)) >> 8) >> 5 << 24) | (v30 >> 1) & 0x7C00 | v36.i32[0] | v36.i32[1];
}

uint64_t PDAlightenPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  unsigned int v5 = a2 & 0xF8 | (a2 >> 5);
  unsigned int v6 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  unsigned int v7 = a4 & 0xF8 | (a4 >> 5);
  uint32x2_t v8 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x7C00000003E0);
  uint32x2_t v9 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x7C00000003E0);
  int32x2_t v10 = vdup_n_s32(v7);
  int32x2_t v11 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v10);
  int32x2_t v12 = vdup_n_s32(v5);
  int32x2_t v13 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v12);
  double v14 = COERCE_DOUBLE(vmax_u32((uint32x2_t)vmul_s32(v11, v12), (uint32x2_t)vmul_s32(v10, v13)));
  if (v6 >= v7) {
    unsigned int v6 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v4 >= v5) {
    unsigned int v4 = a2 & 0xF8 | (a2 >> 5);
  }
  int v15 = v7 * v4;
  if (v6 * v5 > v7 * v4) {
    int v15 = v6 * v5;
  }
  double v16 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v14, vdup_n_s32(v7 ^ 0xFF), v13));
  __int32 v17 = v15 + (v7 ^ 0xFF) * v4;
  if (v7 == 255)
  {
    __int32 v17 = v15;
    *(double *)&int32x2_t v18 = v14;
  }
  else
  {
    *(double *)&int32x2_t v18 = v16;
  }
  double v19 = COERCE_DOUBLE(vmla_s32(v18, v11, vdup_n_s32(v5 ^ 0xFF)));
  __int32 v20 = v17 + v6 * (v5 ^ 0xFF);
  if (v5 != 255)
  {
    __int32 v17 = v20;
    *(double *)&int32x2_t v18 = v19;
  }
  v21.u64[1] = (unint64_t)v18;
  v21.i32[0] = 255 * (v7 + v5) - v7 * v5;
  v21.i32[1] = v17;
  v22.i64[0] = 0x8000000080;
  v22.i64[1] = 0x8000000080;
  int32x4_t v23 = vaddq_s32(v21, v22);
  int32x4_t v24 = vdupq_n_s32(0xFE80u);
  __int16 v25 = vmovn_s32(vcgtq_s32(v24, v21)).u16[0];
  *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v24, (uint32x4_t)v21));
  v21.i16[0] = v25;
  int32x4_t v26 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v21.i8), (int8x16_t)v23, (int8x16_t)v24);
  v23.i32[1] = 8;
  v23.i64[1] = 0x800000008;
  v23.i32[0] = v26.i32[0] >> 8;
  v24.i32[0] = vaddq_s32(v26, v23).u32[0];
  int32x4_t v27 = (int32x4_t)vshlq_u32((uint32x4_t)v26, (uint32x4_t)vnegq_s32(v23));
  uint32x4_t v28 = (uint32x4_t)vaddq_s32(v27, v26);
  v27.i32[0] = v24.i32[0];
  v26.i32[0] = 8;
  uint32x4_t v29 = (uint32x4_t)vshlq_s32(v27, vnegq_s32(v26));
  v27.i32[0] = vshlq_u32(v29, (uint32x4_t)xmmword_1850CD990).u32[0];
  unsigned int v30 = (unsigned __int32)v29.i32[0] >> 3;
  int8x16_t v31 = (int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1850CD9A0);
  v31.i32[0] = v27.i32[0];
  int8x16_t v32 = vandq_s8(v31, (int8x16_t)xmmword_1850CD9B0);
  *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  return v32.i32[0] | v32.i32[1] | (v30 << 27);
}

uint64_t PDAdarkenPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  unsigned int v5 = a2 & 0xF8 | (a2 >> 5);
  unsigned int v6 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  unsigned int v7 = a4 & 0xF8 | (a4 >> 5);
  uint32x2_t v8 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x7C00000003E0);
  uint32x2_t v9 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x7C00000003E0);
  int32x2_t v10 = vdup_n_s32(v7);
  int32x2_t v11 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v10);
  int32x2_t v12 = vdup_n_s32(v5);
  int32x2_t v13 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v12);
  double v14 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vmul_s32(v11, v12), (uint32x2_t)vmul_s32(v10, v13)));
  if (v6 >= v7) {
    unsigned int v6 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v4 >= v5) {
    unsigned int v4 = a2 & 0xF8 | (a2 >> 5);
  }
  int v15 = v7 * v4;
  if (v6 * v5 < v7 * v4) {
    int v15 = v6 * v5;
  }
  double v16 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v14, vdup_n_s32(v7 ^ 0xFF), v13));
  __int32 v17 = v15 + (v7 ^ 0xFF) * v4;
  if (v7 == 255)
  {
    __int32 v17 = v15;
    *(double *)&int32x2_t v18 = v14;
  }
  else
  {
    *(double *)&int32x2_t v18 = v16;
  }
  double v19 = COERCE_DOUBLE(vmla_s32(v18, v11, vdup_n_s32(v5 ^ 0xFF)));
  __int32 v20 = v17 + v6 * (v5 ^ 0xFF);
  if (v5 != 255)
  {
    __int32 v17 = v20;
    *(double *)&int32x2_t v18 = v19;
  }
  v21.u64[1] = (unint64_t)v18;
  v21.i32[0] = 255 * (v7 + v5) - v7 * v5;
  v21.i32[1] = v17;
  v22.i64[0] = 0x8000000080;
  v22.i64[1] = 0x8000000080;
  int32x4_t v23 = vaddq_s32(v21, v22);
  int32x4_t v24 = vdupq_n_s32(0xFE80u);
  __int16 v25 = vmovn_s32(vcgtq_s32(v24, v21)).u16[0];
  *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v24, (uint32x4_t)v21));
  v21.i16[0] = v25;
  int32x4_t v26 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v21.i8), (int8x16_t)v23, (int8x16_t)v24);
  v23.i32[1] = 8;
  v23.i64[1] = 0x800000008;
  v23.i32[0] = v26.i32[0] >> 8;
  v24.i32[0] = vaddq_s32(v26, v23).u32[0];
  int32x4_t v27 = (int32x4_t)vshlq_u32((uint32x4_t)v26, (uint32x4_t)vnegq_s32(v23));
  uint32x4_t v28 = (uint32x4_t)vaddq_s32(v27, v26);
  v27.i32[0] = v24.i32[0];
  v26.i32[0] = 8;
  uint32x4_t v29 = (uint32x4_t)vshlq_s32(v27, vnegq_s32(v26));
  v27.i32[0] = vshlq_u32(v29, (uint32x4_t)xmmword_1850CD990).u32[0];
  unsigned int v30 = (unsigned __int32)v29.i32[0] >> 3;
  int8x16_t v31 = (int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1850CD9A0);
  v31.i32[0] = v27.i32[0];
  int8x16_t v32 = vandq_s8(v31, (int8x16_t)xmmword_1850CD9B0);
  *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  return v32.i32[0] | v32.i32[1] | (v30 << 27);
}

uint64_t PDAcolordodgePDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = a2 & 0xF8 | (a2 >> 5);
  unsigned int v5 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  unsigned int v6 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  unsigned int v7 = a4 & 0xF8 | (a4 >> 5);
  int v8 = v7 * v7;
  if ((((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7) >= v4) {
    unsigned int v9 = v4;
  }
  else {
    unsigned int v9 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  }
  if (v5 >= v7) {
    unsigned int v10 = a4 & 0xF8 | (a4 >> 5);
  }
  else {
    unsigned int v10 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  }
  if (v9)
  {
    if (v5 >= v7) {
      int v11 = 65025;
    }
    else {
      int v11 = (int)(v8 * v9) / (int)(v7 - v10);
    }
  }
  else
  {
    int v11 = 0;
  }
  unsigned int v12 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  unsigned int v13 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  if ((((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7) >= v4) {
    unsigned int v14 = v4;
  }
  else {
    unsigned int v14 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  }
  if (v6 >= v7) {
    unsigned int v15 = a4 & 0xF8 | (a4 >> 5);
  }
  else {
    unsigned int v15 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  }
  if (v14)
  {
    if (v6 >= v7) {
      int v16 = 65025;
    }
    else {
      int v16 = (int)(v8 * v14) / (int)(v7 - v15);
    }
  }
  else
  {
    int v16 = 0;
  }
  if (v12 >= v4) {
    unsigned int v17 = v4;
  }
  else {
    unsigned int v17 = v12;
  }
  if (v13 >= v7) {
    int v18 = a4 & 0xF8 | (a4 >> 5);
  }
  else {
    int v18 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  }
  if (v17)
  {
    if (v13 >= v7) {
      int v19 = 65025;
    }
    else {
      int v19 = (int)(v8 * v17) / (int)(v7 - v18);
    }
  }
  else
  {
    int v19 = 0;
  }
  int v20 = v11 + (v7 ^ 0xFF) * v9;
  unsigned int v21 = v16 + (v7 ^ 0xFF) * v14;
  if (v7 == 255)
  {
    int v22 = v16;
  }
  else
  {
    v19 += (v7 ^ 0xFF) * v17;
    int v22 = v21;
  }
  if (v7 == 255) {
    int v20 = v11;
  }
  int v23 = v20 + v10 * (v4 ^ 0xFF);
  int v24 = v22 + v15 * (v4 ^ 0xFF);
  signed int v25 = v19 + v18 * (v4 ^ 0xFF);
  if (v4 == 255)
  {
    signed int v25 = v19;
    int v26 = v22;
  }
  else
  {
    int v26 = v24;
  }
  if (v4 == 255) {
    int v23 = v20;
  }
  int v27 = 255 * (v7 + v4) - v7 * v4;
  if (v23 >= v27) {
    int v28 = v27;
  }
  else {
    int v28 = v23;
  }
  if (v26 >= v27) {
    int v29 = v27;
  }
  else {
    int v29 = v26;
  }
  if (v25 >= v27) {
    int v30 = v27;
  }
  else {
    int v30 = v25;
  }
  if (v29 >= 65152) {
    unsigned int v31 = 65152;
  }
  else {
    unsigned int v31 = v29 + 128;
  }
  unsigned int v32 = v31 + (v31 >> 8);
  if (v28 >= 65152) {
    unsigned int v33 = 65152;
  }
  else {
    unsigned int v33 = v28 + 128;
  }
  unsigned int v34 = v33 + (v33 >> 8);
  if (v30 >= 65152) {
    unsigned int v35 = 65152;
  }
  else {
    unsigned int v35 = v30 + 128;
  }
  unsigned int v36 = v35 + (v35 >> 8);
  if (v27 >= 65152) {
    int v37 = 65152;
  }
  else {
    int v37 = v27 + 128;
  }
  return ((v37 + (v37 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v37 + (v37 >> 8)) >> 8) >> 5 << 24) | ((unsigned __int16)v36 >> 11) | (v32 >> 6) & 0x3E0 | (v34 >> 1) & 0x7C00;
}

uint64_t PDAcolorburnPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  unsigned int v5 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  unsigned int v6 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  unsigned int v7 = a2 & 0xF8 | (a2 >> 5);
  unsigned int v8 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  int v9 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  unsigned int v10 = a4 & 0xF8 | (a4 >> 5);
  int v11 = v10 * v7;
  if ((((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7) >= v10) {
    signed int v12 = a4 & 0xF8 | (a4 >> 5);
  }
  else {
    signed int v12 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  }
  if (v4 >= v7) {
    unsigned int v13 = a2 & 0xF8 | (a2 >> 5);
  }
  else {
    unsigned int v13 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  }
  if (v8 >= v10) {
    signed int v14 = v10;
  }
  else {
    signed int v14 = v8;
  }
  if (v5 >= v7) {
    int v15 = a2 & 0xF8 | (a2 >> 5);
  }
  else {
    int v15 = v5;
  }
  if (v9 >= v10) {
    int v9 = v10;
  }
  if (v6 >= v7) {
    unsigned int v16 = v7;
  }
  else {
    unsigned int v16 = v6;
  }
  int v17 = v11 + (v10 ^ 0xFF) * v15;
  unsigned int v18 = v11 + (v10 ^ 0xFF) * v16;
  if (v10 == 255)
  {
    unsigned int v18 = v10 * v7;
    int v17 = 255 * v7;
    int v19 = 255 * v7;
  }
  else
  {
    int v19 = v11 + (v10 ^ 0xFF) * v13;
  }
  if (v7 == 255)
  {
    int v20 = v17;
  }
  else
  {
    v18 += v9 * (v7 ^ 0xFF);
    int v20 = v17 + v14 * (v7 ^ 0xFF);
  }
  if (v7 == 255) {
    int v21 = v19;
  }
  else {
    int v21 = v19 + v12 * (v7 ^ 0xFF);
  }
  if (v7 > v4)
  {
    if (v12) {
      int v21 = (v21 - (int)(v10 * v10 * (v7 - v13)) / v12) & ~((v21 - (int)(v10 * v10 * (v7 - v13)) / v12) >> 31);
    }
    else {
      int v21 = 0;
    }
  }
  if (v7 > v5)
  {
    if (v14) {
      int v20 = (v20 - (int)(v10 * v10 * (v7 - v15)) / v14) & ~((v20 - (int)(v10 * v10 * (v7 - v15)) / v14) >> 31);
    }
    else {
      int v20 = 0;
    }
  }
  if (v7 > v6)
  {
    if (v9)
    {
      int v22 = v18 - (int)(v10 * v10 * (v7 - v16)) / v9;
      unsigned int v18 = v22 & ~(v22 >> 31);
    }
    else
    {
      unsigned int v18 = 0;
    }
  }
  int v23 = 255 * (v10 + v7) - v11;
  int8x8_t v24 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v20, v21), (int32x2_t)0x8000000080);
  int8x8_t v25 = (int8x8_t)vdup_n_s32(0xFE80u);
  int8x8_t v26 = (int8x8_t)vcgt_u32((uint32x2_t)v25, (uint32x2_t)__PAIR64__(v20, v21));
  unsigned int v27 = v18 + 128;
  if (v18 >> 7 >= 0x1FD) {
    unsigned int v27 = 65152;
  }
  unsigned int v28 = v27 + (v27 >> 8);
  if (v23 >= 65152) {
    int v29 = 65152;
  }
  else {
    int v29 = v23 + 128;
  }
  uint32x2_t v30 = (uint32x2_t)vbsl_s8(v26, v24, v25);
  int8x8_t v31 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v30, v30, 8uLL), (uint32x2_t)0xFFFFFFFAFFFFFFFFLL), (int8x8_t)0x3E000007C00);
  return ((v29 + (v29 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v29 + (v29 >> 8)) >> 8) >> 5 << 24) | v31.i32[0] | v31.i32[1] | (v28 >> 11);
}

uint64_t PDAhardlightPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  unsigned int v5 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  unsigned int v6 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  unsigned int v7 = a2 & 0xF8 | (a2 >> 5);
  unsigned int v8 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  unsigned int v9 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  unsigned int v10 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  unsigned int v11 = a4 & 0xF8 | (a4 >> 5);
  if (v8 >= v11) {
    unsigned int v8 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v4 >= v7) {
    unsigned int v4 = a2 & 0xF8 | (a2 >> 5);
  }
  int v12 = 2 * v4 * v8;
  if (v9 >= v11) {
    unsigned int v9 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v5 >= v7) {
    unsigned int v5 = a2 & 0xF8 | (a2 >> 5);
  }
  int v13 = 2 * v5 * v9;
  if (v10 >= v11) {
    unsigned int v10 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v6 >= v7) {
    unsigned int v6 = a2 & 0xF8 | (a2 >> 5);
  }
  int v14 = 2 * v6 * v10;
  int v15 = v11 * v7;
  unsigned int v16 = (v11 + 1) >> 1;
  int v17 = v11 ^ 0xFF;
  int v18 = v7 ^ 0xFF;
  int v19 = v8 * (v7 ^ 0xFF) + (v11 ^ 0xFF) * v4 + v12;
  unsigned int v20 = v11 + 255;
  unsigned int v21 = v7 + 255;
  int v22 = (v11 + 255) * v4 + v8 * (v7 + 255) - (v11 * v7 + v12);
  if (v8 <= v16) {
    int v22 = v19;
  }
  int v23 = v9 * v18 + v17 * v5 + v13;
  int v24 = v20 * v5 + v9 * v21 - (v15 + v13);
  if (v9 <= v16) {
    int v24 = v23;
  }
  int v25 = v10 * v18 + v17 * v6 + v14;
  int v26 = v20 * v6 + v10 * v21 - (v15 + v14);
  if (v10 <= v16) {
    int v26 = v25;
  }
  int v27 = 255 * (v11 + v7) - v15;
  if (v22 >= 65152) {
    unsigned int v28 = 65152;
  }
  else {
    unsigned int v28 = v22 + 128;
  }
  unsigned int v29 = v28 + (v28 >> 8);
  int8x8_t v30 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v26, v24), (int32x2_t)0x8000000080);
  int32x2_t v31 = vdup_n_s32(0xFE80u);
  int8x8_t v32 = (int8x8_t)vcgt_s32(v31, (int32x2_t)__PAIR64__(v26, v24));
  if (v27 >= 65152) {
    int v33 = 65152;
  }
  else {
    int v33 = v27 + 128;
  }
  uint32x2_t v34 = (uint32x2_t)vbsl_s8(v32, v30, (int8x8_t)v31);
  int8x8_t v35 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v34, v34, 8uLL), (uint32x2_t)0xFFFFFFF5FFFFFFFALL), (int8x8_t)0x1F000003E0);
  return ((v33 + (v33 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v33 + (v33 >> 8)) >> 8) >> 5 << 24) | (v29 >> 1) & 0x7C00 | v35.i32[0] | v35.i32[1];
}

uint64_t PDAsoftlightPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  int v5 = a2 & 0xF8 | (a2 >> 5);
  unsigned int v6 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  unsigned int v7 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  unsigned int v8 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  unsigned int v9 = a4 & 0xF8 | (a4 >> 5);
  if (v6 >= v9) {
    unsigned int v6 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v4 >= v5) {
    unsigned int v4 = a2 & 0xF8 | (a2 >> 5);
  }
  if (v5)
  {
    unsigned int v10 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
    unsigned int v11 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
    int v12 = (int)(v4 * v4 * (2 * v6 - v9)) / v5;
    int v13 = (2 * v4 * v6 - v12) & ~((int)(2 * v4 * v6 - v12) >> 31);
    if (v7 >= v9) {
      unsigned int v7 = a4 & 0xF8 | (a4 >> 5);
    }
    if (v11 >= v5) {
      unsigned int v11 = a2 & 0xF8 | (a2 >> 5);
    }
    int v14 = (int)(v11 * v11 * (2 * v7 - v9)) / v5;
    int v15 = (2 * v11 * v7 - v14) & ~((int)(2 * v11 * v7 - v14) >> 31);
    if (v8 >= v9) {
      unsigned int v8 = a4 & 0xF8 | (a4 >> 5);
    }
    if (v10 >= v5) {
      unsigned int v10 = a2 & 0xF8 | (a2 >> 5);
    }
    int v16 = (int)(v10 * v10 * (2 * v8 - v9)) / v5;
    int v17 = (2 * v10 * v8 - v16) & ~((int)(2 * v10 * v8 - v16) >> 31);
  }
  else
  {
    unsigned int v10 = 0;
    int v15 = 0;
    int v13 = 0;
    unsigned int v11 = 0;
    int v17 = 0;
    if (v7 >= v9) {
      unsigned int v7 = a4 & 0xF8 | (a4 >> 5);
    }
    if (v8 >= v9) {
      unsigned int v8 = a4 & 0xF8 | (a4 >> 5);
    }
  }
  int v18 = v13 + (v9 ^ 0xFF) * v4;
  int v19 = v15 + v11 * (v9 ^ 0xFF);
  int v20 = v17 + v10 * (v9 ^ 0xFF);
  if (v9 == 255)
  {
    int v20 = v17;
    int v19 = v15;
    int v18 = v13;
  }
  unsigned int v21 = v18 + v6 * (v5 ^ 0xFF);
  unsigned int v22 = v19 + v7 * (v5 ^ 0xFF);
  unsigned int v23 = v20 + v8 * (v5 ^ 0xFF);
  if (v5 == 255)
  {
    unsigned int v23 = v20;
    unsigned int v22 = v19;
    unsigned int v21 = v18;
  }
  int v24 = 255 * (v9 + v5) - v9 * v5;
  unsigned int v25 = v21 + 128;
  if (v21 >> 7 >= 0x1FD) {
    unsigned int v25 = 65152;
  }
  unsigned int v26 = v25 + (v25 >> 8);
  unsigned int v27 = v22 + 128;
  if (v22 >> 7 >= 0x1FD) {
    unsigned int v27 = 65152;
  }
  unsigned int v28 = v27 + (v27 >> 8);
  if (v23 >> 7 >= 0x1FD) {
    unsigned int v29 = 65152;
  }
  else {
    unsigned int v29 = v23 + 128;
  }
  unsigned int v30 = v29 + (v29 >> 8);
  if (v24 >= 65152) {
    int v31 = 65152;
  }
  else {
    int v31 = v24 + 128;
  }
  return ((v31 + (v31 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v31 + (v31 >> 8)) >> 8) >> 5 << 24) | ((unsigned __int16)v30 >> 11) | (v28 >> 6) & 0x3E0 | (v26 >> 1) & 0x7C00;
}

uint64_t PDAdifferencePDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x1F00007C00);
  v5.i32[0] = vshl_u32(v4, (uint32x2_t)0xFFFFFFFDFFFFFFF4).u32[0];
  v5.i32[1] = vshl_u32(v4, (uint32x2_t)0x30000000CLL).i32[1];
  uint32x2_t v6 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x1F00007C00);
  v7.i32[0] = vshl_u32(v6, (uint32x2_t)0xFFFFFFFDFFFFFFF4).u32[0];
  v7.i32[1] = vshl_u32(v6, (uint32x2_t)0x30000000CLL).i32[1];
  uint32x2_t v8 = (uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFFEFFFFFFF9), v7);
  v7.i32[0] = a4 & 0xFFFFFFF8;
  v7.i32[1] = a2 & 0xFFFFFFF8;
  int32x2_t v9 = (int32x2_t)vsra_n_u32((uint32x2_t)v7, (uint32x2_t)__PAIR64__(a2, a4), 5uLL);
  uint32x2_t v10 = (uint32x2_t)vand_s8((int8x8_t)__PAIR64__(a1, a3), (int8x8_t)vdup_n_s32(0x3E0u));
  uint32x2_t v11 = vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v10, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v10, (uint32x2_t)0xFFFFFFF9FFFFFFFELL)), (uint32x2_t)v9);
  __int32 v12 = v11.i32[1];
  __int32 v13 = v11.i32[0];
  __int32 v14 = v11.i32[0] + v11.i32[1];
  __int32 v15 = v9.i32[1];
  int32x2_t v16 = (int32x2_t)vmin_u32(v8, (uint32x2_t)vdup_lane_s32(v9, 0));
  int32x2_t v17 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFEFFFFFFF9), v5), (uint32x2_t)vdup_lane_s32(v9, 1));
  int32x2_t v18 = vadd_s32(v16, v17);
  int32x2_t v19 = (int32x2_t)__PAIR64__(v17.u32[1], v16.u32[0]);
  int32x2_t v20 = vrev64_s32(v9);
  v17.i32[1] = v16.i32[1];
  int32x2_t v21 = vmul_s32(v9, v17);
  __int32 v22 = v9.i32[0];
  __int32 v23 = v9.i32[0] * v12;
  int v24 = v13 * v9.i32[1];
  int v26 = v23 - v24;
  BOOL v25 = v23 - v24 < 0;
  __int32 v27 = 255 * v14 - v24 - v23;
  if (v25) {
    int v28 = -v26;
  }
  else {
    int v28 = v26;
  }
  int v29 = v27 + v28;
  int32x2_t v30 = vmul_s32(v19, v20);
  int32x2_t v31 = (int32x2_t)__PAIR64__(v21.u32[1], v30.u32[0]);
  int32x2_t v32 = vneg_s32(v21);
  v21.i32[1] = v30.i32[1];
  int32x2_t v33 = vaba_s32(vsub_s32(vmla_s32(v32, v18, (int32x2_t)0xFF000000FFLL), v30), v21, v31);
  int v34 = 255 * (v22 + v15) - v22 * v15;
  if (v29 >= 65152) {
    unsigned int v35 = 65152;
  }
  else {
    unsigned int v35 = v29 + 128;
  }
  unsigned int v36 = v35 + (v35 >> 8);
  int32x2_t v37 = vdup_n_s32(0xFE80u);
  uint32x2_t v38 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v37, v33), (int8x8_t)vadd_s32(v33, (int32x2_t)0x8000000080), (int8x8_t)v37);
  uint32x2_t v39 = vsra_n_u32(v38, v38, 8uLL);
  if (v34 >= 65152) {
    int v40 = 65152;
  }
  else {
    int v40 = v34 + 128;
  }
  int8x8_t v41 = vand_s8((int8x8_t)vshl_u32(v39, (uint32x2_t)0xFFFFFFF5FFFFFFFFLL), (int8x8_t)0x1F00007C00);
  return ((v40 + (v40 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v40 + (v40 >> 8)) >> 8) >> 5 << 24) | (v36 >> 6) & 0x3E0 | v41.i32[0] | v41.i32[1];
}

uint64_t PDAexclusionPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  uint32x2_t v5 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x1F00007C00);
  v6.i32[0] = vshl_u32(v5, (uint32x2_t)0xFFFFFFFDFFFFFFF4).u32[0];
  v6.i32[1] = vshl_u32(v5, (uint32x2_t)0x30000000CLL).i32[1];
  unsigned int v7 = a2 & 0xF8 | (a2 >> 5);
  unsigned int v8 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  uint32x2_t v9 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x1F00007C00);
  v10.i32[0] = vshl_u32(v9, (uint32x2_t)0xFFFFFFFDFFFFFFF4).u32[0];
  v10.i32[1] = vshl_u32(v9, (uint32x2_t)0x30000000CLL).i32[1];
  unsigned int v11 = a4 & 0xF8 | (a4 >> 5);
  if (v8 >= v11) {
    unsigned int v8 = a4 & 0xF8 | (a4 >> 5);
  }
  if (v4 >= v7) {
    unsigned int v4 = a2 & 0xF8 | (a2 >> 5);
  }
  int v12 = 255 * (v8 + v4) - 2 * v4 * v8;
  int v13 = 255 * (v11 + v7) - v11 * v7;
  if (v12 >= 65152) {
    unsigned int v14 = 65152;
  }
  else {
    unsigned int v14 = v12 + 128;
  }
  unsigned int v15 = v14 + (v14 >> 8);
  if (v13 >= 65152) {
    int v16 = 65152;
  }
  else {
    int v16 = v13 + 128;
  }
  int32x2_t v17 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFFEFFFFFFF9), v10), (uint32x2_t)vdup_n_s32(v11));
  int32x2_t v18 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v5, (uint32x2_t)0xFFFFFFFEFFFFFFF9), v6), (uint32x2_t)vdup_n_s32(v7));
  int32x2_t v19 = vmul_s32(vadd_s32(v17, v18), (int32x2_t)0xFF000000FFLL);
  int32x2_t v20 = vmul_s32(v18, v17);
  int32x2_t v21 = vsub_s32(v19, vadd_s32(v20, v20));
  int32x2_t v22 = vdup_n_s32(0xFE80u);
  uint32x2_t v23 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v22, v21), (int8x8_t)vadd_s32(v21, (int32x2_t)0x8000000080), (int8x8_t)v22);
  int8x8_t v24 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v23, v23, 8uLL), (uint32x2_t)0xFFFFFFF5FFFFFFFFLL), (int8x8_t)0x1F00007C00);
  return v24.i32[0] | (v15 >> 6) & 0x3E0 | v24.i32[1] | (((v16 + (v16 >> 8)) >> 8) >> 3 << 27) | ((v16 + (v16 >> 8)) >> 8 << 19) & 0x7000000;
}

uint64_t PDAhuePDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint32x2_t v4 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x3E000007C00);
  uint32x2_t v5 = (uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFF9FFFFFFF4));
  unsigned int v6 = a2 & 0xF8 | (a2 >> 5);
  uint32x2_t v7 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x3E000007C00);
  unsigned int v8 = a4 & 0xF8 | (a4 >> 5);
  int32x2_t v9 = vdup_n_s32(v8);
  double v10 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v7, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v7, (uint32x2_t)0xFFFFFFF9FFFFFFF4)), (uint32x2_t)v9));
  int32x2_t v11 = vdup_n_s32(v6);
  int32x2_t v12 = (int32x2_t)vmin_u32(v5, (uint32x2_t)v11);
  if (((a3 >> 2) & 7 | (8 * (a3 & 0x1F))) >= v8) {
    int v13 = a4 & 0xF8 | (a4 >> 5);
  }
  else {
    int v13 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  }
  if (((a1 >> 2) & 7 | (8 * (a1 & 0x1F))) >= v6) {
    unsigned int v14 = a2 & 0xF8 | (a2 >> 5);
  }
  else {
    unsigned int v14 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  }
  if (v8 == 255)
  {
    unsigned int v15 = 0;
    double v16 = 0.0;
  }
  else
  {
    double v16 = COERCE_DOUBLE(vmul_s32(vdup_n_s32(v8 ^ 0xFF), v12));
    uint32x2_t v17 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v9, v12);
    int32x2_t v12 = (int32x2_t)vshr_n_u32(vsra_n_u32(v17, v17, 8uLL), 8uLL);
    unsigned int v15 = (v8 ^ 0xFF) * v14;
    unsigned int v14 = (v8 * v14 + 128 + ((v8 * v14 + 128) >> 8)) >> 8;
  }
  double v18 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v16, *(int32x2_t *)&v10, vdup_n_s32(v6 ^ 0xFF)));
  uint32x2_t v19 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v10, v11);
  int32x2_t v20 = (int32x2_t)vshr_n_u32(vsra_n_u32(v19, v19, 8uLL), 8uLL);
  if (v6 == 255)
  {
    signed int v21 = v13;
  }
  else
  {
    v15 += v13 * (v6 ^ 0xFF);
    signed int v21 = (v13 * v6 + 128 + ((v13 * v6 + 128) >> 8)) >> 8;
  }
  if (v6 == 255)
  {
    *(double *)&int32x2_t v20 = v10;
    *(double *)&int32x2_t v22 = v16;
  }
  else
  {
    *(double *)&int32x2_t v22 = v18;
  }
  int32x2_t v55 = v20;
  signed int v56 = v21;
  unsigned __int8 v23 = vcge_u32((uint32x2_t)v20, (uint32x2_t)vdup_lane_s32(v20, 1)).u8[0];
  uint64_t v24 = v23 & 1;
  uint64_t v25 = (v23 & 1) == 0;
  if (v21 >= *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFFBLL | (4 * v24)))
  {
    BOOL v27 = v21 <= *(_DWORD *)((unint64_t)&v55 | (4 * v25));
    uint64_t v26 = v23 & 1;
    if (v27) {
      uint64_t v24 = 2;
    }
    else {
      uint64_t v24 = (v23 & 1) == 0;
    }
    if (!v27) {
      uint64_t v25 = 2;
    }
  }
  else
  {
    uint64_t v26 = 2;
  }
  __int32 v28 = v55.i32[v25];
  __int32 v29 = v55.i32[v26];
  BOOL v30 = __OFSUB__(v28, v29);
  int v31 = v28 - v29;
  if ((v31 < 0) ^ v30 | (v31 == 0))
  {
    v55.i32[v25] = 0;
    v55.i32[v24] = 0;
  }
  else
  {
    unsigned int v32 = v12.i32[0];
    if (v12.i32[0] >= (unsigned __int32)v12.i32[1]) {
      unsigned __int32 v33 = v12.u32[1];
    }
    else {
      unsigned __int32 v33 = v12.i32[0];
    }
    if (v12.i32[0] <= (unsigned __int32)v12.i32[1]) {
      unsigned int v32 = v12.u32[1];
    }
    if (v14 <= v32) {
      unsigned int v34 = v32;
    }
    else {
      unsigned int v34 = v14;
    }
    if (v14 >= v33) {
      unsigned int v32 = v34;
    }
    else {
      unsigned __int32 v33 = v14;
    }
    __int32 v35 = v32 - v33;
    v55.i32[v25] = v35;
    v55.i32[v24] = ((v55.i32[v24] - v55.i32[v26]) * ((v35 << 16) / v31) + 0x8000) >> 16;
  }
  signed int v36 = (v8 * v6 + 128 + ((v8 * v6 + 128) >> 8)) >> 8;
  v55.i32[v26] = 0;
  int32x2_t v37 = vmul_s32(vsub_s32(v12, v55), (int32x2_t)0x970000004DLL);
  signed __int32 v38 = vadd_s32(vdup_lane_s32(v37, 1), v37).u32[0] + 28 * (v14 - v56);
  int32x2_t v39 = vadd_s32(vdup_n_s32((v38 + 128) >> 8), v55);
  signed int v40 = v56 + ((v38 + 128) >> 8);
  if (v38 != (char)v38)
  {
    unsigned __int8 v41 = vcgt_s32(vdup_lane_s32(v55, 1), v55).u8[0];
    __int32 v42 = (v41 & 1) != 0 ? v39.i32[0] : v39.i32[1];
    signed int v43 = (v41 & 1) != 0 ? v39.i32[1] : v39.i32[0];
    signed int v44 = v40 <= v43 ? v43 : v56 + ((v38 + 128) >> 8);
    if (v40 >= v42) {
      signed int v43 = v44;
    }
    else {
      __int32 v42 = v56 + ((v38 + 128) >> 8);
    }
    if (v43 > v36 || v42 < 0)
    {
      unsigned int v45 = (77 * v39.i32[0] + 151 * v39.i32[1] + 28 * v40 + 128) >> 8;
      if (v38 > -129)
      {
        signed __int32 v46 = v43 - v45;
        if (v43 == v45) {
          goto LABEL_58;
        }
        int v47 = v36 - v45;
      }
      else
      {
        signed __int32 v46 = v45 - v42;
        if (v45 == v42) {
          goto LABEL_58;
        }
        int v47 = (77 * v39.i32[0] + 151 * v39.i32[1] + 28 * v40 + 128) >> 8;
      }
      int32x2_t v48 = vdup_n_s32(v45);
      unsigned int v49 = (v47 << 16) / v46;
      signed int v40 = v45 + ((int)(v49 * (v40 - v45) + 0x8000) >> 16);
      int32x2_t v39 = vsra_n_s32(v48, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v49), vsub_s32(v39, v48)), 0x10uLL);
    }
  }
LABEL_58:
  unsigned int v50 = v15 + 128;
  if (v15 >> 7 >= 0x1FD) {
    unsigned int v50 = 65152;
  }
  int8x8_t v51 = (int8x8_t)vdup_n_s32(0xFE80u);
  uint32x2_t v52 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v51, (uint32x2_t)v22), (int8x8_t)vadd_s32(v22, (int32x2_t)0x8000000080), v51);
  int8x8_t v53 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32((uint32x2_t)v39, vsra_n_u32(v52, v52, 8uLL), 8uLL), (uint32x2_t)0x200000007), (int8x8_t)0x3E000007C00);
  return ((v8 + v6 - v36) << 24) & 0xF8000000 | ((v8 + v6 - v36) >> 5 << 24) | ((v40 + ((unsigned __int16)(v50 + (v50 >> 8)) >> 8)) >> 3) | v53.i32[0] | v53.i32[1];
}

uint64_t PDAsaturationPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint32x2_t v4 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x3E000007C00);
  unsigned int v5 = a2 & 0xF8 | (a2 >> 5);
  uint32x2_t v6 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x7C00000003E0);
  unsigned int v7 = a4 & 0xF8 | (a4 >> 5);
  int32x2_t v8 = vdup_n_s32(v7);
  double v9 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v8));
  int32x2_t v10 = vdup_n_s32(v5);
  int32x2_t v11 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFF9FFFFFFF4)), (uint32x2_t)v10);
  if (((a3 >> 2) & 7 | (8 * (a3 & 0x1F))) >= v7) {
    int v12 = a4 & 0xF8 | (a4 >> 5);
  }
  else {
    int v12 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  }
  if (((a1 >> 2) & 7 | (8 * (a1 & 0x1F))) >= v5) {
    signed int v13 = a2 & 0xF8 | (a2 >> 5);
  }
  else {
    signed int v13 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  }
  if (v7 == 255)
  {
    unsigned int v14 = 0;
    int32x2_t v15 = 0;
  }
  else
  {
    int32x2_t v15 = vmul_s32(vdup_n_s32(v7 ^ 0xFF), v11);
    uint32x2_t v16 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v8, v11);
    int32x2_t v11 = (int32x2_t)vshr_n_u32(vsra_n_u32(v16, v16, 8uLL), 8uLL);
    unsigned int v14 = (v7 ^ 0xFF) * v13;
    signed int v13 = (v7 * v13 + 128 + ((v7 * v13 + 128) >> 8)) >> 8;
  }
  double v17 = COERCE_DOUBLE(vrev64_s32(v15));
  double v18 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v17, *(int32x2_t *)&v9, vdup_n_s32(v5 ^ 0xFF)));
  uint32x2_t v19 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v9, v10);
  double v20 = COERCE_DOUBLE(vshr_n_u32(vsra_n_u32(v19, v19, 8uLL), 8uLL));
  if (v5 == 255)
  {
    unsigned int v21 = v12;
  }
  else
  {
    v14 += v12 * (v5 ^ 0xFF);
    unsigned int v21 = (v12 * v5 + 128 + ((v12 * v5 + 128) >> 8)) >> 8;
  }
  if (v5 == 255)
  {
    double v20 = v9;
    *(double *)&int32x2_t v22 = v17;
  }
  else
  {
    *(double *)&int32x2_t v22 = v18;
  }
  int32x2_t v55 = v11;
  signed int v56 = v13;
  unsigned __int8 v23 = vcge_u32((uint32x2_t)v11, (uint32x2_t)vdup_lane_s32(v11, 1)).u8[0];
  uint64_t v24 = v23 & 1;
  uint64_t v25 = (v23 & 1) == 0;
  if (v13 >= *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFFBLL | (4 * v24)))
  {
    uint64_t v26 = v23 & 1;
    if (v13 <= *(_DWORD *)((unint64_t)&v55 | (4 * v25))) {
      uint64_t v24 = 2;
    }
    else {
      uint64_t v24 = (v23 & 1) == 0;
    }
    if (v13 > *(_DWORD *)((unint64_t)&v55 | (4 * v25))) {
      uint64_t v25 = 2;
    }
  }
  else
  {
    uint64_t v26 = 2;
  }
  __int32 v27 = v55.i32[v25];
  __int32 v28 = v55.i32[v26];
  BOOL v29 = __OFSUB__(v27, v28);
  int v30 = v27 - v28;
  if ((v30 < 0) ^ v29 | (v30 == 0))
  {
    v55.i32[v25] = 0;
    v55.i32[v24] = 0;
  }
  else
  {
    unsigned int v31 = LODWORD(v20);
    if (HIDWORD(v20) >= LODWORD(v20)) {
      unsigned int v32 = LODWORD(v20);
    }
    else {
      unsigned int v32 = HIDWORD(v20);
    }
    if (HIDWORD(v20) > LODWORD(v20)) {
      unsigned int v31 = HIDWORD(v20);
    }
    if (v21 <= v31) {
      unsigned int v33 = v31;
    }
    else {
      unsigned int v33 = v21;
    }
    if (v21 >= v32)
    {
      unsigned int v21 = v32;
      unsigned int v31 = v33;
    }
    __int32 v34 = v31 - v21;
    v55.i32[v25] = v34;
    v55.i32[v24] = ((v55.i32[v24] - v55.i32[v26]) * ((v34 << 16) / v30) + 0x8000) >> 16;
  }
  signed int v35 = (v7 * v5 + 128 + ((v7 * v5 + 128) >> 8)) >> 8;
  v55.i32[v26] = 0;
  int32x2_t v36 = vmul_s32(vsub_s32(v11, v55), (int32x2_t)0x970000004DLL);
  signed __int32 v37 = vadd_s32(vdup_lane_s32(v36, 1), v36).u32[0] + 28 * (v13 - v56);
  int32x2_t v38 = vadd_s32(vdup_n_s32((v37 + 128) >> 8), v55);
  int32x2_t v39 = vrev64_s32(v38);
  signed int v40 = v56 + ((v37 + 128) >> 8);
  if (v37 != (char)v37)
  {
    unsigned __int8 v41 = vcgt_s32(vdup_lane_s32(v55, 1), v55).u8[0];
    __int32 v42 = (v41 & 1) != 0 ? v38.i32[0] : v38.i32[1];
    signed int v43 = (v41 & 1) != 0 ? v38.i32[1] : v38.i32[0];
    signed int v44 = v40 <= v43 ? v43 : v56 + ((v37 + 128) >> 8);
    if (v40 >= v42) {
      signed int v43 = v44;
    }
    else {
      __int32 v42 = v56 + ((v37 + 128) >> 8);
    }
    if (v43 > v35 || v42 < 0)
    {
      unsigned int v45 = (77 * v38.i32[0] + 151 * v38.i32[1] + 28 * v40 + 128) >> 8;
      if (v37 > -129)
      {
        signed __int32 v46 = v43 - v45;
        if (v43 == v45) {
          goto LABEL_57;
        }
        int v47 = v35 - v45;
      }
      else
      {
        signed __int32 v46 = v45 - v42;
        if (v45 == v42) {
          goto LABEL_57;
        }
        int v47 = (77 * v38.i32[0] + 151 * v38.i32[1] + 28 * v40 + 128) >> 8;
      }
      int32x2_t v48 = vdup_n_s32(v45);
      unsigned int v49 = (v47 << 16) / v46;
      signed int v40 = v45 + ((int)(v49 * (v40 - v45) + 0x8000) >> 16);
      int32x2_t v39 = vsra_n_s32(v48, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v49), vsub_s32(v39, v48)), 0x10uLL);
    }
  }
LABEL_57:
  unsigned int v50 = v14 + 128;
  if (v14 >> 7 >= 0x1FD) {
    unsigned int v50 = 65152;
  }
  int8x8_t v51 = (int8x8_t)vdup_n_s32(0xFE80u);
  uint32x2_t v52 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v51, (uint32x2_t)v22), (int8x8_t)vadd_s32(v22, (int32x2_t)0x8000000080), v51);
  int8x8_t v53 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32((uint32x2_t)v39, vsra_n_u32(v52, v52, 8uLL), 8uLL), (uint32x2_t)0x700000002), (int8x8_t)0x7C00000003E0);
  return ((v7 + v5 - v35) << 24) & 0xF8000000 | ((v7 + v5 - v35) >> 5 << 24) | ((v40 + ((unsigned __int16)(v50 + (v50 >> 8)) >> 8)) >> 3) | v53.i32[0] | v53.i32[1];
}

uint64_t PDAluminosityPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = a2 & 0xF8 | (a2 >> 5);
  uint32x2_t v5 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x7C00000003E0);
  uint32x2_t v6 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x7C00000003E0);
  uint32x2_t v7 = (uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFF4FFFFFFF9));
  unsigned int v8 = a4 & 0xF8 | (a4 >> 5);
  int32x2_t v9 = vdup_n_s32(v8);
  int32x2_t v10 = vdup_n_s32(v4);
  int32x2_t v11 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v5, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v5, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v10);
  if (((a3 >> 2) & 7 | (8 * (a3 & 0x1F))) >= v8) {
    unsigned int v12 = a4 & 0xF8 | (a4 >> 5);
  }
  else {
    unsigned int v12 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  }
  if (((a1 >> 2) & 7 | (8 * (a1 & 0x1F))) >= v4) {
    unsigned int v13 = a2 & 0xF8 | (a2 >> 5);
  }
  else {
    unsigned int v13 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  }
  if (v8 == 255)
  {
    unsigned int v14 = 0;
    int32x2_t v15 = 0;
  }
  else
  {
    int32x2_t v15 = vmul_s32(vdup_n_s32(v8 ^ 0xFF), v11);
    uint32x2_t v16 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v9, v11);
    int32x2_t v11 = (int32x2_t)vshr_n_u32(vsra_n_u32(v16, v16, 8uLL), 8uLL);
    unsigned int v14 = (v8 ^ 0xFF) * v13;
    unsigned int v13 = (v8 * v13 + 128 + ((v8 * v13 + 128) >> 8)) >> 8;
  }
  int32x2_t v17 = (int32x2_t)vmin_u32(v7, (uint32x2_t)v9);
  if (v4 != 255)
  {
    int32x2_t v15 = vmla_s32(v15, v17, vdup_n_s32(v4 ^ 0xFF));
    uint32x2_t v18 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v17, v10);
    int32x2_t v17 = (int32x2_t)vshr_n_u32(vsra_n_u32(v18, v18, 8uLL), 8uLL);
    v14 += v12 * (v4 ^ 0xFF);
    unsigned int v12 = (v12 * v4 + 128 + ((v12 * v4 + 128) >> 8)) >> 8;
  }
  int32x2_t v19 = vmul_s32(vsub_s32(v17, v11), (int32x2_t)0x4D00000097);
  signed int v20 = (v8 * v4 + 128 + ((v8 * v4 + 128) >> 8)) >> 8;
  int v21 = v19.i32[0] + 28 * (v12 - v13) + v19.i32[1];
  int32x2_t v22 = vadd_s32(vdup_n_s32((v21 + 128) >> 8), v11);
  signed int v23 = v13 + ((v21 + 128) >> 8);
  if (v21 != (char)v21)
  {
    unsigned __int8 v24 = vcgt_u32((uint32x2_t)v11, (uint32x2_t)vdup_lane_s32(v11, 1)).u8[0];
    __int32 v25 = (v24 & 1) != 0 ? v22.i32[1] : v22.i32[0];
    signed int v26 = (v24 & 1) != 0 ? v22.i32[0] : v22.i32[1];
    signed int v27 = v23 <= v26 ? v26 : v23;
    if (v23 >= v25) {
      signed int v26 = v27;
    }
    else {
      __int32 v25 = v23;
    }
    if (v26 > v20 || v25 < 0)
    {
      unsigned int v28 = (77 * v22.i32[1] + 151 * v22.i32[0] + 28 * v23 + 128) >> 8;
      if (v21 > -129)
      {
        signed __int32 v29 = v26 - v28;
        if (v26 == v28) {
          goto LABEL_33;
        }
        int v30 = v20 - v28;
      }
      else
      {
        signed __int32 v29 = v28 - v25;
        if (v28 == v25) {
          goto LABEL_33;
        }
        int v30 = (77 * v22.i32[1] + 151 * v22.i32[0] + 28 * v23 + 128) >> 8;
      }
      int32x2_t v31 = vdup_n_s32(v28);
      unsigned int v32 = (v30 << 16) / v29;
      signed int v23 = v28 + ((int)(v32 * (v23 - v28) + 0x8000) >> 16);
      int32x2_t v22 = vsra_n_s32(v31, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v32), vsub_s32(v22, v31)), 0x10uLL);
    }
  }
LABEL_33:
  unsigned int v33 = v8 + v4 - v20;
  unsigned int v34 = v14 + 128;
  if (v14 >> 7 >= 0x1FD) {
    unsigned int v34 = 65152;
  }
  int8x8_t v35 = (int8x8_t)vdup_n_s32(0xFE80u);
  uint32x2_t v36 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v35, (uint32x2_t)v15), (int8x8_t)vadd_s32(v15, (int32x2_t)0x8000000080), v35);
  int8x8_t v37 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32((uint32x2_t)v22, vsra_n_u32(v36, v36, 8uLL), 8uLL), (uint32x2_t)0x700000002), (int8x8_t)0x7C00000003E0);
  return (v33 << 24) & 0xF8000000 | (v33 >> 5 << 24) | ((v23
                                                                                         + ((unsigned __int16)(v34 + (v34 >> 8)) >> 8)) >> 3) | v37.i32[0] | v37.i32[1];
}

void rgb555_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v5 = *(float *)(a1 + 280);
  float v6 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(void *)(a1 + 272) + 4) * (float)a3))
             + (float)(v5 * (float)(*(float *)(*(void *)(a1 + 272) + 4) * (float)a2)));
  uint64_t v7 = a1 + 368;
  uint64_t v8 = *(void *)(a1 + 368);
  uint64_t v9 = ((unint64_t)a3 >> 4) & 0xF0;
  uint64_t v10 = v8 + v9;
  if (v8) {
    uint64_t v11 = v8 + v9;
  }
  else {
    uint64_t v11 = a1 + 368;
  }
  if (v8) {
    char v12 = 15;
  }
  else {
    char v12 = 0;
  }
  float v14 = *(float *)(a1 + 336);
  float v15 = *(float *)(a1 + 344);
  float v16 = *(float *)(a1 + 304);
  float v17 = *(float *)(a1 + 308);
  int v18 = *(_DWORD *)(a1 + 320);
  int v19 = *(_DWORD *)(a1 + 324);
  uint64_t v22 = a1 + 144;
  signed int v20 = *(_DWORD **)(a1 + 144);
  int v21 = *(int8x8_t **)(v22 + 8);
  signed int v23 = *(uint16x4_t **)(a1 + 376);
  uint64_t v24 = *(void *)(a1 + 360);
  if (v5 != 0.0)
  {
    if (v8) {
      unsigned int v30 = (a2 >> 8) & 0xF;
    }
    else {
      LOBYTE(v30) = 0;
    }
    while (1)
    {
      int v31 = v18;
      if (v6 >= v16)
      {
        int v31 = v19;
        if (v6 <= v17) {
          int v31 = (int)(float)(v15 * (float)(v6 - v14));
        }
      }
      if ((v31 & 0x80000000) == 0) {
        break;
      }
      unsigned int v32 = v23;
      if (v23) {
        goto LABEL_38;
      }
LABEL_39:
      LOBYTE(v30) = (v30 + 1) & v12;
      float v6 = v5 + v6;
      int v21 = (int8x8_t *)((char *)v21 + 4);
      *(unsigned char *)signed int v20 = (_BYTE)v32;
      signed int v20 = (_DWORD *)((char *)v20 + 1);
      if (!--a4) {
        return;
      }
    }
    unsigned int v32 = (uint16x4_t *)(v24 + 8 * v31);
LABEL_38:
    uint32x4_t v33 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v11 + v30)), *v32);
    int8x16_t v34 = (int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1850CD9C0);
    int8x16_t v35 = vextq_s8(v34, (int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1850CD9D0), 0xCuLL);
    v35.i32[1] = v34.i32[0];
    LODWORD(v32) = (v33.i32[3] << 14) & 0x7000000;
    int8x16_t v36 = vandq_s8(v35, (int8x16_t)xmmword_1850CD9E0);
    int8x8_t v37 = vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
    v21->i32[0] = v37.i32[0] | v32 | v37.i32[1];
    LOBYTE(v32) = -1;
    goto LABEL_39;
  }
  if (v8) {
    uint64_t v25 = v10;
  }
  else {
    uint64_t v25 = v7;
  }
  if (v8) {
    LODWORD(v26) = ((a2 >> 8) + 1) & 0xF;
  }
  else {
    LODWORD(v26) = 0;
  }
  if (v8) {
    LODWORD(v27) = (a2 >> 8) & 0xF;
  }
  else {
    LODWORD(v27) = 0;
  }
  if (v8) {
    int v28 = 15;
  }
  else {
    int v28 = 0;
  }
  if (v6 >= v16)
  {
    int v18 = v19;
    if (v6 <= v17) {
      int v18 = (int)(float)(v15 * (float)(v6 - v14));
    }
  }
  if ((v18 & 0x80000000) == 0 || v23)
  {
    int32x2_t v38 = (unsigned __int16 *)(v24 + 8 * v18);
    if (v18 < 0) {
      int32x2_t v39 = (unsigned __int16 *)v23;
    }
    else {
      int32x2_t v39 = v38;
    }
    unsigned int v40 = *v39;
    unsigned int v41 = v39[3];
    unsigned int v42 = v39[2];
    unsigned int v43 = v39[1];
    if (v8)
    {
      int32x2_t v44 = vdup_n_s32(v40);
      int32x2_t v45 = vdup_n_s32(v43);
      int32x2_t v46 = vdup_n_s32(v42);
      int32x2_t v47 = vdup_n_s32(v41);
      int v48 = a4 + 4;
      int8x8_t v49 = (int8x8_t)vdup_n_s32(0x3E0u);
      do
      {
        unsigned int v50 = (__int8 *)(v25 + v27);
        uint64_t v27 = (v27 + 1) & v28;
        v4.i8[0] = *v50;
        v4.i8[4] = *(unsigned char *)(v25 + v26);
        int32x2_t v51 = (int32x2_t)vand_s8(v4, (int8x8_t)0xFF000000FFLL);
        int32x2_t v52 = vadd_s32(v44, v51);
        uint32x2_t v53 = (uint32x2_t)vadd_s32(v45, v51);
        uint32x2_t v54 = (uint32x2_t)vadd_s32(v46, v51);
        uint32x2_t v55 = (uint32x2_t)vadd_s32(v47, v51);
        int8x8_t v56 = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v55, (uint32x2_t)0x130000000ELL), (int8x8_t)0xF800000007000000), vand_s8((int8x8_t)vshl_u32(v55, (uint32x2_t)0xE00000013), (int8x8_t)0x7000000F8000000)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v52, 2uLL), (int8x8_t)0x7C0000007C00), vand_s8((int8x8_t)vshr_n_u32(v53, 3uLL), v49))), vand_s8((int8x8_t)vshr_n_u32(v54, 8uLL), (int8x8_t)0x1F0000001FLL));
        *int v21 = v56;
        uint64_t v26 = (v26 + 1) & v28;
        v56.i8[0] = *(unsigned char *)(v25 + v27);
        v56.i8[4] = *(unsigned char *)(v25 + v26);
        int32x2_t v57 = (int32x2_t)vand_s8(v56, (int8x8_t)0xFF000000FFLL);
        int32x2_t v58 = vadd_s32(v44, v57);
        uint32x2_t v59 = (uint32x2_t)vadd_s32(v45, v57);
        uint32x2_t v60 = (uint32x2_t)vadd_s32(v46, v57);
        uint32x2_t v61 = (uint32x2_t)vadd_s32(v47, v57);
        int8x8_t v4 = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v61, (uint32x2_t)0x130000000ELL), (int8x8_t)0xF800000007000000), vand_s8((int8x8_t)vshl_u32(v61, (uint32x2_t)0xE00000013), (int8x8_t)0x7000000F8000000)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v58, 2uLL), (int8x8_t)0x7C0000007C00), vand_s8((int8x8_t)vshr_n_u32(v59, 3uLL), v49))), vand_s8((int8x8_t)vshr_n_u32(v60, 8uLL), (int8x8_t)0x1F0000001FLL));
        v21[1] = v4;
        *v20++ = -1;
        v48 -= 4;
        v21 += 2;
      }
      while (v48 > 4);
    }
    else
    {
      int32x4_t v62 = vdupq_n_s32((4 * v40) & 0x7C00 | (((v41 >> 10) & 7) << 24) & 0x7FFFFE0 | (BYTE1(v41) << 27) | (v42 >> 8) & 0x1F | (v43 >> 3) & 0x3E0);
      int v63 = a4 + 4;
      do
      {
        *(int32x4_t *)v21->i8 = v62;
        v21 += 2;
        *v20++ = -1;
        v63 -= 4;
      }
      while (v63 > 4);
    }
  }
  else
  {
    if (a4 >= 4) {
      int v29 = 4;
    }
    else {
      int v29 = a4;
    }
    bzero(v20, ((a4 - v29 + 3) & 0xFFFFFFFC) + 4);
  }
}

uint64_t rgb555_shade_custom_RGB(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(result + 280);
  float v5 = *(float *)(*(void *)(result + 272) + 4);
  float v6 = v5 * (float)a2;
  float v7 = v5 * (float)a3;
  float v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  uint64_t v9 = result + 368;
  uint64_t v10 = *(void *)(result + 368);
  int v11 = 15;
  if (v10) {
    uint64_t v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  }
  else {
    int v11 = 0;
  }
  float v12 = *(float *)(result + 284);
  float v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  float v14 = *(float *)(result + 304);
  float v15 = *(float *)(result + 308);
  float v16 = *(float *)(result + 312);
  float v17 = *(float *)(result + 316);
  float v18 = *(float *)(result + 336);
  float v19 = *(float *)(result + 348);
  float v20 = *(float *)(result + 344);
  float v21 = *(float *)(result + 356);
  uint64_t v22 = *(uint16x4_t **)(result + 376);
  uint64_t v23 = *(void *)(result + 360);
  int v24 = 4 * *(_DWORD *)(result + 48);
  uint64_t v26 = *(unsigned char **)(result + 144);
  uint64_t v25 = *(unsigned __int32 **)(result + 152);
  if (v10) {
    uint64_t v27 = ((unint64_t)a2 >> 8) & 0xF;
  }
  else {
    uint64_t v27 = 0;
  }
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      int v31 = (uint16x4_t *)(v23
                         + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                         + 8 * (int)(float)(v20 * (float)(v8 - v18)));
LABEL_20:
      uint32x4_t v32 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v9 + v27)), *v31);
      int8x16_t v33 = (int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_1850CD9C0);
      int8x16_t v34 = vextq_s8(v33, (int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_1850CD9D0), 0xCuLL);
      v34.i32[1] = v33.i32[0];
      LODWORD(v31) = (v32.i32[3] << 14) & 0x7000000;
      int8x16_t v35 = vandq_s8(v34, (int8x16_t)xmmword_1850CD9E0);
      int8x8_t v36 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      uint64_t result = HIDWORD(*(void *)&v36);
      *uint64_t v25 = v36.i32[0] | v31 | v36.i32[1];
      LOBYTE(v31) = -1;
      goto LABEL_21;
    }
    int v31 = v22;
    if (v22) {
      goto LABEL_20;
    }
LABEL_21:
    uint64_t v27 = (v27 + 1) & v11;
    float v8 = v4 + v8;
    float v13 = v12 + v13;
    ++v25;
    *v26++ = (_BYTE)v31;
    --a4;
  }
  while (a4);
  return result;
}

void rgb555_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(a1 + 280);
  float v5 = *(float *)(*(void *)(a1 + 272) + 4);
  float v6 = v5 * (float)a2;
  float v7 = v5 * (float)a3;
  float v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  uint64_t v9 = *(void *)(a1 + 368);
  if (v9) {
    uint64_t v10 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  }
  else {
    uint64_t v10 = a1 + 368;
  }
  if (v9) {
    int v11 = 15;
  }
  else {
    int v11 = 0;
  }
  float v12 = *(float *)(a1 + 284);
  float v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  float v33 = *(float *)(a1 + 336);
  float v34 = *(float *)(a1 + 304);
  float v15 = *(float *)(a1 + 344);
  uint64_t v16 = *(void *)(a1 + 360);
  float v18 = *(unsigned char **)(a1 + 144);
  float v17 = *(__int32 **)(a1 + 152);
  if (v9) {
    uint64_t v19 = ((unint64_t)a2 >> 8) & 0xF;
  }
  else {
    uint64_t v19 = 0;
  }
  float v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    float v21 = v15 * (float)((float)(v34 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v33);
    unsigned int v22 = vcvtms_s32_f32(v21);
    float v23 = ceilf(v21);
    float v24 = (float)((float)(v21 - (float)(int)floorf(v21)) * 255.0) + 0.5;
    unsigned int v25 = vcvtms_s32_f32(v15 + v21);
    float v26 = ceilf(v21 - v15);
    if (v21 < 0.0) {
      unsigned int v22 = v25;
    }
    if (v21 <= v15) {
      float v27 = v23;
    }
    else {
      float v27 = v26;
    }
    uint32x4_t v28 = vsraq_n_u32((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v10 + v19)), (uint32x4_t)vmlaq_s32(vmulq_s32(vdupq_n_s32((int)v24), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v16 + 8 * (int)v27))), vdupq_n_s32(255 - (int)v24), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v16 + 2 * (int)(4 * v22)))), 8uLL);
    __int32 v29 = v28.i32[3] << 14;
    int8x16_t v30 = (int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1850CD9C0);
    int8x16_t v31 = vextq_s8(v30, (int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1850CD9D0), 0xCuLL);
    v31.i32[1] = v30.i32[0];
    int8x16_t v32 = vandq_s8(v31, (int8x16_t)xmmword_1850CD9E0);
    *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    *v17++ = v32.i32[0] | v29 & 0x7000000 | v32.i32[1];
    uint64_t v19 = (v19 + 1) & v11;
    float v8 = v4 + v8;
    float v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

void rgb555_shade_radial_RGB(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  float v6 = *(float *)(a1 + 280);
  float v7 = *(float *)(a1 + 284);
  float v8 = *(float *)(*(void *)(a1 + 272) + 4);
  float v9 = v8 * (float)a2;
  float v10 = v8 * (float)(uint64_t)a3;
  float v11 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v10) + (float)(v6 * v9));
  float v12 = *(float *)(a1 + 300) + (float)((float)(v10 * *(float *)(a1 + 292)) + (float)(v7 * v9));
  float v14 = *(float **)(a1 + 400);
  float v15 = *(float *)(a1 + 336);
  float v16 = *(float *)(a1 + 344);
  float v17 = *(float *)(a1 + 304);
  float v18 = *(float *)(a1 + 308);
  int v19 = *(_DWORD *)(a1 + 324);
  float v20 = v14[2];
  float v21 = v14[4];
  float v22 = v14[5];
  float v23 = v14[7];
  uint64_t v26 = a1 + 144;
  float v24 = *(unsigned char **)(a1 + 144);
  unsigned int v25 = *(int8x8_t **)(v26 + 8);
  float v27 = *(unsigned __int16 **)(a1 + 376);
  uint64_t v28 = *(void *)(a1 + 360);
  uint64_t v29 = ((unint64_t)a2 >> 8) & 0xF;
  if (v20 != 0.0 || v23 != 0.0 || v7 != 0.0)
  {
    int v41 = *(_DWORD *)(a1 + 320);
    float v42 = v14[3];
    float v43 = v14[6];
    float v44 = v14[8];
    uint64_t v45 = a1 + 368;
    uint64_t v46 = *(void *)(a1 + 368);
    uint64_t v47 = v46 + ((a3 >> 4) & 0xF0);
    BOOL v33 = v46 == 0;
    int v48 = 15;
    if (v33)
    {
      int v48 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v45 = v47;
    }
    float v49 = -v43;
    float v50 = v18 - v17;
    while (1)
    {
      float v51 = v49 + (float)((float)(v11 + v11) * v20);
      float v52 = (float)((float)(v12 * v12) + (float)(v11 * v11)) - v23;
      if (v22 == 0.0)
      {
        float v59 = v52 / v51;
      }
      else
      {
        float v53 = (float)((float)(v22 * -4.0) * v52) + (float)(v51 * v51);
        if (v53 < 0.0) {
          goto LABEL_56;
        }
        float v54 = sqrtf(v53);
        float v55 = v44 * (float)(v51 - v54);
        float v56 = v51 + v54;
        float v57 = v44 * v56;
        BOOL v58 = (float)(v44 * v56) <= v55;
        if ((float)(v44 * v56) <= v55) {
          float v59 = v44 * v56;
        }
        else {
          float v59 = v55;
        }
        if (v58) {
          float v57 = v55;
        }
        if (v57 < 0.0)
        {
          BOOL v60 = v57 < v42;
LABEL_42:
          int v61 = v41;
          if (v60) {
            goto LABEL_56;
          }
LABEL_43:
          if ((v61 & 0x80000000) == 0) {
            goto LABEL_55;
          }
          goto LABEL_56;
        }
        if (v57 <= 1.0)
        {
          float v62 = v17 + (float)(v57 * v50);
          goto LABEL_54;
        }
        if ((v19 & 0x80000000) == 0)
        {
          int v61 = v19;
          if (v57 <= v21)
          {
LABEL_55:
            int v63 = (uint16x4_t *)(v28 + 8 * v61);
LABEL_57:
            uint32x4_t v64 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v45 + v29)), *v63);
            int8x16_t v65 = (int8x16_t)vshlq_u32(v64, (uint32x4_t)xmmword_1850CD9C0);
            int8x16_t v66 = vextq_s8(v65, (int8x16_t)vshlq_u32(v64, (uint32x4_t)xmmword_1850CD9D0), 0xCuLL);
            v66.i32[1] = v65.i32[0];
            LODWORD(v63) = (v64.i32[3] << 14) & 0x7000000;
            int8x16_t v67 = vandq_s8(v66, (int8x16_t)xmmword_1850CD9E0);
            int8x8_t v68 = vorr_s8(*(int8x8_t *)v67.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL));
            v25->i32[0] = v68.i32[0] | v63 | v68.i32[1];
            LOBYTE(v63) = -1;
            goto LABEL_58;
          }
        }
      }
      if (v59 < 0.0)
      {
        BOOL v60 = v59 < v42;
        goto LABEL_42;
      }
      if (v59 > 1.0)
      {
        int v61 = v19;
        if (v59 > v21) {
          goto LABEL_56;
        }
        goto LABEL_43;
      }
      float v62 = v17 + (float)(v59 * v50);
LABEL_54:
      int v61 = (int)(float)(v16 * (float)(v62 - v15));
      if ((v61 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      int v63 = (uint16x4_t *)v27;
      if (v27) {
        goto LABEL_57;
      }
LABEL_58:
      uint64_t v29 = (v29 + 1) & v48;
      float v11 = v6 + v11;
      float v12 = v7 + v12;
      unsigned int v25 = (int8x8_t *)((char *)v25 + 4);
      *v24++ = (_BYTE)v63;
      if (!--a4) {
        return;
      }
    }
  }
  uint64_t v30 = a1 + 368;
  uint64_t v31 = *(void *)(a1 + 368);
  int v32 = (BYTE1(a2) + 1) & 0xF;
  BOOL v33 = v31 == 0;
  if (v31) {
    uint64_t v34 = v31 + ((a3 >> 4) & 0xF0);
  }
  else {
    uint64_t v34 = v30;
  }
  if (v33) {
    LODWORD(v35) = 0;
  }
  else {
    LODWORD(v35) = v32;
  }
  if (v33) {
    LODWORD(v36) = 0;
  }
  else {
    LODWORD(v36) = v29;
  }
  if (v33) {
    int v37 = 0;
  }
  else {
    int v37 = 15;
  }
  float v38 = v12 * v12;
  float v39 = -v22;
  if (v38 <= (float)-v22)
  {
    float v69 = fabsf(v14[8]);
    float v70 = v22 * -4.0;
    float v71 = v18 - v17;
    uint64_t v72 = (unsigned __int16 *)(v28 + 8 * v19);
    int v73 = a4 + 2;
    while (1)
    {
      float v74 = v38 + (float)(v11 * v11);
      float v75 = v6 + v11;
      float v76 = v38 + (float)(v75 * v75);
      if (v74 > v39 && v76 > v39)
      {
        if (v19 < 0)
        {
          if (!v27)
          {
            char v111 = 0;
            LOBYTE(v104) = 0;
            goto LABEL_82;
          }
          int v85 = *v27;
          int v86 = v27[1];
          int v87 = v27[2];
          int v88 = v27[3];
        }
        else
        {
          int v85 = *v72;
          int v86 = v72[1];
          int v87 = v72[2];
          int v88 = v72[3];
        }
        int v105 = *(unsigned __int8 *)(v34 + v36);
        int v106 = v105 + v85;
        unsigned int v107 = v105 + v86;
        unsigned int v108 = v105 + v87;
        int v109 = v105 + v88;
        int v110 = *(unsigned __int8 *)(v34 + v35);
        int v94 = v110 + v85;
        unsigned int v95 = v110 + v86;
        unsigned int v96 = v110 + v87;
        int v97 = v110 + v88;
        LODWORD(v104) = (v109 << 14) & 0x7000000 | (BYTE1(v109) << 27) | (4 * v106) & 0x7C00 | (v107 >> 3) & 0x3E0 | (v108 >> 8) & 0x1F;
        goto LABEL_80;
      }
      float v78 = sqrtf(v70 * v76);
      float v79 = v69 * sqrtf(v70 * v74);
      float v80 = v69 * v78;
      int v81 = (int)(float)(v16 * (float)((float)(v17 + (float)(v79 * v71)) - v15));
      int v82 = (int)(float)(v16 * (float)((float)(v17 + (float)((float)(v69 * v78) * v71)) - v15));
      if (v79 <= 1.0 && v80 <= 1.0)
      {
        uint64_t v89 = (unsigned __int16 *)(v28 + 8 * v82);
        int v90 = v89[1];
        int v91 = v89[2];
        int v92 = v89[3];
        int v93 = *(unsigned __int8 *)(v34 + v35);
        int v94 = v93 + *v89;
        unsigned int v95 = v93 + v90;
        unsigned int v96 = v93 + v91;
        int v97 = v93 + v92;
        uint32x4_t v98 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v34 + v36)), *(uint16x4_t *)(v28 + 8 * v81));
        int v99 = (v98.i32[3] << 14) & 0x7000000;
        int8x16_t v100 = (int8x16_t)vshlq_u32(v98, (uint32x4_t)xmmword_1850CD9C0);
        int8x16_t v101 = vextq_s8(v100, (int8x16_t)vshlq_u32(v98, (uint32x4_t)xmmword_1850CD9D0), 0xCuLL);
        v101.i32[1] = v100.i32[0];
        int8x16_t v102 = vandq_s8(v101, (int8x16_t)xmmword_1850CD9E0);
        int8x8_t v103 = vorr_s8(*(int8x8_t *)v102.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL));
        LODWORD(v104) = v103.i32[0] | v99 | v103.i32[1];
LABEL_80:
        v25->i32[0] = (int)v104;
        LOBYTE(v104) = -1;
        goto LABEL_81;
      }
      if (v79 <= 1.0)
      {
        if ((v81 & 0x80000000) == 0)
        {
          uint64_t v84 = 4 * v81;
LABEL_86:
          int v104 = (uint16x4_t *)(v28 + 2 * v84);
LABEL_88:
          uint32x4_t v112 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v34 + v36)), *v104);
          int8x16_t v113 = (int8x16_t)vshlq_u32(v112, (uint32x4_t)xmmword_1850CD9C0);
          int8x16_t v114 = vextq_s8(v113, (int8x16_t)vshlq_u32(v112, (uint32x4_t)xmmword_1850CD9D0), 0xCuLL);
          v114.i32[1] = v113.i32[0];
          LODWORD(v104) = (v112.i32[3] << 14) & 0x7000000;
          int8x16_t v115 = vandq_s8(v114, (int8x16_t)xmmword_1850CD9E0);
          int8x8_t v116 = vorr_s8(*(int8x8_t *)v115.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL));
          v25->i32[0] = v116.i32[0] | v104 | v116.i32[1];
          LOBYTE(v104) = -1;
          goto LABEL_89;
        }
      }
      else if (v79 <= v21)
      {
        uint64_t v84 = 4 * v19;
        if ((v19 & 0x80000000) == 0) {
          goto LABEL_86;
        }
      }
      int v104 = (uint16x4_t *)v27;
      if (v27) {
        goto LABEL_88;
      }
LABEL_89:
      if (v80 <= 1.0)
      {
        if (v82 < 0) {
          goto LABEL_96;
        }
        uint64_t v117 = 4 * v82;
      }
      else if (v80 > v21 || (uint64_t v117 = 4 * v19, v19 < 0))
      {
LABEL_96:
        if (!v27)
        {
          char v111 = 0;
          goto LABEL_82;
        }
        int v123 = *(unsigned __int8 *)(v34 + v35);
        int v94 = v123 + *v27;
        unsigned int v95 = v123 + v27[1];
        unsigned int v96 = v123 + v27[2];
        int v97 = v123 + v27[3];
        goto LABEL_81;
      }
      int v118 = (unsigned __int16 *)(v28 + 2 * v117);
      int v119 = v118[1];
      int v120 = *(unsigned __int8 *)(v34 + v35);
      int v121 = v118[2];
      int v122 = v118[3];
      int v94 = v120 + *v118;
      unsigned int v95 = v120 + v119;
      unsigned int v96 = v120 + v121;
      int v97 = v120 + v122;
LABEL_81:
      v25->i32[1] = (v97 << 14) & 0x7000000 | (BYTE1(v97) << 27) | (4 * v94) & 0x7C00 | (v95 >> 3) & 0x3E0 | (v96 >> 8) & 0x1F;
      char v111 = -1;
LABEL_82:
      float v11 = v6 + v75;
      LOBYTE(v36) = (v36 + 1) & v37;
      LOBYTE(v35) = (v35 + 1) & v37;
      ++v25;
      *float v24 = (_BYTE)v104;
      v24[1] = v111;
      v24 += 2;
      v73 -= 2;
      if (v73 <= 2) {
        return;
      }
    }
  }
  if (v27 || (v19 & 0x80000000) == 0)
  {
    uint64_t v124 = (unsigned __int16 *)(v28 + 8 * v19);
    if (v19 >= 0) {
      uint64_t v125 = v124;
    }
    else {
      uint64_t v125 = v27;
    }
    int32x2_t v126 = vdup_n_s32(v125[3]);
    int32x2_t v127 = vdup_n_s32(*v125);
    int32x2_t v128 = vdup_n_s32(v125[1]);
    int32x2_t v129 = vdup_n_s32(v125[2]);
    int v130 = a4 + 4;
    int8x8_t v131 = (int8x8_t)vdup_n_s32(0x3E0u);
    do
    {
      uint64_t v132 = (__int8 *)(v34 + v36);
      uint64_t v36 = (v36 + 1) & v37;
      v5.i8[0] = *v132;
      v5.i8[4] = *(unsigned char *)(v34 + v35);
      int32x2_t v133 = (int32x2_t)vand_s8(v5, (int8x8_t)0xFF000000FFLL);
      int32x2_t v134 = vadd_s32(v127, v133);
      uint32x2_t v135 = (uint32x2_t)vadd_s32(v128, v133);
      uint32x2_t v136 = (uint32x2_t)vadd_s32(v129, v133);
      uint32x2_t v137 = (uint32x2_t)vadd_s32(v126, v133);
      int8x8_t v138 = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v137, (uint32x2_t)0x130000000ELL), (int8x8_t)0xF800000007000000), vand_s8((int8x8_t)vshl_u32(v137, (uint32x2_t)0xE00000013), (int8x8_t)0x7000000F8000000)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v134, 2uLL), (int8x8_t)0x7C0000007C00), vand_s8((int8x8_t)vshr_n_u32(v135, 3uLL), v131))), vand_s8((int8x8_t)vshr_n_u32(v136, 8uLL), (int8x8_t)0x1F0000001FLL));
      *unsigned int v25 = v138;
      uint64_t v35 = (v35 + 1) & v37;
      v138.i8[0] = *(unsigned char *)(v34 + v36);
      v138.i8[4] = *(unsigned char *)(v34 + v35);
      int32x2_t v139 = (int32x2_t)vand_s8(v138, (int8x8_t)0xFF000000FFLL);
      int32x2_t v140 = vadd_s32(v127, v139);
      uint32x2_t v141 = (uint32x2_t)vadd_s32(v128, v139);
      uint32x2_t v142 = (uint32x2_t)vadd_s32(v129, v139);
      uint32x2_t v143 = (uint32x2_t)vadd_s32(v126, v139);
      int8x8_t v5 = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v143, (uint32x2_t)0x130000000ELL), (int8x8_t)0xF800000007000000), vand_s8((int8x8_t)vshl_u32(v143, (uint32x2_t)0xE00000013), (int8x8_t)0x7000000F8000000)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v140, 2uLL), (int8x8_t)0x7C0000007C00), vand_s8((int8x8_t)vshr_n_u32(v141, 3uLL), v131))), vand_s8((int8x8_t)vshr_n_u32(v142, 8uLL), (int8x8_t)0x1F0000001FLL));
      v25[1] = v5;
      *(_DWORD *)float v24 = -1;
      v24 += 4;
      v130 -= 4;
      v25 += 2;
    }
    while (v130 > 4);
  }
  else
  {
    if (a4 >= 4) {
      int v40 = 4;
    }
    else {
      int v40 = a4;
    }
    bzero(v24, ((a4 - v40 + 3) & 0xFFFFFFFC) + 4);
  }
}