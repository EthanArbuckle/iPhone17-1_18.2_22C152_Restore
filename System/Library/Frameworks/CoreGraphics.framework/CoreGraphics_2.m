void RGBAf16_mark_constmask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 _Q1, __n128 _Q2, double _D3, double a9, double _D5, double _D6, float16x4_t _D7, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  __int16 *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  float32x4_t v38;
  int v39;
  unsigned int v40;
  float16x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  int v45;
  unsigned int v46;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v52;
  int v53;
  float32x4_t v54;
  float32x4_t v55;
  int v60;
  unsigned int v61;
  float v64;
  float v65;
  float v82;
  int v87;
  unsigned int v88;
  float16x4_t v89;
  int v90;
  unsigned int v91;
  float v95;
  float32x4_t v106;
  int v107;
  float v108;
  float v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v113;
  int v114;
  float32x4_t v115;
  float32x4_t v116;
  int v121;
  float v122;
  float v136;
  float v143;
  float v145;
  float v148;
  int v155;
  float v156;
  short float v162;
  int v169;
  float v170;
  __n128 v173;
  double v174;
  __int16 v177;
  int v182;
  float v183;
  int v210;
  float v211;
  __n128 v214;
  double v215;
  __int16 v218;
  int v221;
  float v222;
  __n128 v225;
  double v226;
  __int16 v229;
  int v232;
  float v233;
  __n128 v236;
  double v237;
  __int16 v240;
  int v243;
  float v244;
  __n128 v247;
  double v248;
  __int16 v251;
  int v254;
  float v255;
  __n128 v258;
  double v259;
  __int16 v262;
  int v265;
  float v266;
  __n128 v269;
  double v270;
  __int16 v273;
  int v276;
  float v277;
  __n128 v280;
  double v281;
  __int16 v284;
  int v287;
  float v288;
  float32x4_t v291;
  double v292;
  __int16 v295;
  int v298;
  float v299;
  __n128 v302;
  double v303;
  __int16 v306;
  int v309;
  float v310;
  __n128 v313;
  double v314;
  __int16 v317;
  int v320;
  float v321;
  __n128 v324;
  double v325;
  __int16 v328;
  int v330;
  float v331;
  __n128 v334;
  int v338;
  float v339;
  __n128 v342;
  double v343;
  __int16 v346;
  int v347;
  unsigned int v348;
  unint64_t v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  uint64_t v353;
  unint64_t v354;
  float32x4_t v356;
  unsigned int v357;
  int v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  int v362;
  unsigned int v363;
  unint64_t v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  float32x4_t v372;
  float32x4_t v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  unsigned int v389;
  float v390;
  int v408;
  int v409;
  __int16 v410;
  __int16 v411;
  float16x4_t v412;
  float16x4_t v413;
  __n128 v414;
  __n128 v415;
  __n128 v416;
  __n128 v417;
  __n128 v418;
  __n128 v419;
  __n128 v420;
  __n128 v421;
  __n128 v422;
  __n128 v423;
  __n128 v424;
  __n128 v425;
  float32x4_t v426;
  __n128 v427;
  float v428;

  v16 = *(void *)(a1 + 48);
  v17 = *(void *)(a1 + 136);
  v18 = v16 != 0;
  if (v17)
  {
    v20 = *(_DWORD *)(a1 + 4);
    v19 = *(_DWORD *)(a1 + 8);
    v21 = *(int *)(a1 + 28);
    v22 = *(void *)(a1 + 88);
    _D7.i32[0] = *(_DWORD *)v22;
    _H16 = *(_WORD *)(v22 + 4);
    _H8 = *(short float *)(v22 + 6);
    __asm { FCVT            S22, H8 }
    v30 = (__int16 *)(*(void *)(a1 + 40) + 8 * (*(int *)(a1 + 12) + (v21 >> 3) * *(int *)(a1 + 16)));
    v31 = *(int *)(a1 + 124);
    v32 = v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v31;
    v33 = v31 - v20;
    v34 = (v21 >> 3) - v20;
    v428 = _S22;
    switch((int)a2)
    {
      case 0:
        do
        {
          v35 = v20;
          do
          {
            v36 = *(unsigned __int8 *)v32;
            if (*(unsigned char *)v32)
            {
              if (v36 == 255) {
                *(void *)v30 = 0;
              }
              else {
                *(float16x4_t *)v30 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)v30), (float)(v36 ^ 0xFFu) * 0.0039216));
              }
            }
            ++v32;
            v30 += 4;
            --v35;
          }
          while (v35);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 1:
        if (use_vImage_fp16_compositing(void)::predicate != -1)
        {
          v410 = *(_WORD *)(v22 + 4);
          v412 = _D7;
          dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_21437);
          _H16 = v410;
          _D7 = v412;
          _S22 = v428;
        }
        if (use_vImage_fp16_compositing(void)::status) {
          goto LABEL_18;
        }
        v347 = -1;
        v348 = v32 & 3;
        if ((v32 & 3) != 0)
        {
          v20 += v348;
          v347 = -1 << (8 * v348);
          v349 = v32 & 3;
          v32 &= 0xFFFFFFFFFFFFFFFCLL;
          v30 -= 4 * v349;
        }
        v350 = ((_BYTE)v20 + (_BYTE)v32) & 3;
        if ((((_BYTE)v20 + (_BYTE)v32) & 3) != 0)
        {
          v351 = 4 - v350;
          v348 += v351;
          v352 = 0xFFFFFFFF >> (8 * v351);
          if (v20 >= 4) {
            v350 = 0xFFFFFFFF >> (8 * v351);
          }
          else {
            v350 = 0;
          }
          if (v20 >= 4) {
            v352 = -1;
          }
          v347 &= v352;
        }
        v353 = v33 - v348;
        v354 = v34 - v348;
        v356.i64[0] = vcvtq_f32_f16(_D7).u64[0];
        __asm { FCVT            S2, H16 }
        v356.i64[1] = __PAIR64__(LODWORD(_S22), _S2);
        do
        {
          v357 = *(_DWORD *)v32 & v347;
          v358 = v20 >> 2;
          v359 = v350;
          if (!v357) {
            goto LABEL_339;
          }
LABEL_321:
          if (v357 == -1)
          {
            *(_DWORD *)v30 = _D7.i32[0];
            v30[2] = _H16;
            *((short float *)v30 + 3) = _H8;
            *((_DWORD *)v30 + 2) = _D7.i32[0];
            v30[6] = _H16;
            *((short float *)v30 + 7) = _H8;
            *((_DWORD *)v30 + 4) = _D7.i32[0];
            v30[10] = _H16;
            *((short float *)v30 + 11) = _H8;
LABEL_336:
            *((_DWORD *)v30 + 6) = _D7.i32[0];
            v30[14] = _H16;
            *((short float *)v30 + 15) = _H8;
            goto LABEL_339;
          }
          while (1)
          {
            if ((_BYTE)v357)
            {
              if (v357 == 255)
              {
                *(_DWORD *)v30 = _D7.i32[0];
                v30[2] = _H16;
                *((short float *)v30 + 3) = _H8;
              }
              else
              {
                *(float16x4_t *)v30 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v356, (float)v357 * 0.0039216))), vcvtq_f32_f16(*(float16x4_t *)v30), 1.0 - (float)((float)v357 * 0.0039216)));
              }
            }
            if (BYTE1(v357))
            {
              if (BYTE1(v357) == 255)
              {
                *((_DWORD *)v30 + 2) = _D7.i32[0];
                v30[6] = _H16;
                *((short float *)v30 + 7) = _H8;
              }
              else
              {
                *((float16x4_t *)v30 + 1) = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v356, (float)BYTE1(v357) * 0.0039216))), vcvtq_f32_f16(*(float16x4_t *)(v30 + 4)), 1.0 - (float)((float)BYTE1(v357) * 0.0039216)));
              }
            }
            if (BYTE2(v357))
            {
              if (BYTE2(v357) == 255)
              {
                *((_DWORD *)v30 + 4) = _D7.i32[0];
                v30[10] = _H16;
                *((short float *)v30 + 11) = _H8;
              }
              else
              {
                *((float16x4_t *)v30 + 2) = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v356, (float)BYTE2(v357) * 0.0039216))), vcvtq_f32_f16(*(float16x4_t *)(v30 + 8)), 1.0 - (float)((float)BYTE2(v357) * 0.0039216)));
              }
            }
            v360 = HIBYTE(v357);
            if (v360 == 255) {
              goto LABEL_336;
            }
            if (v360) {
              *((float16x4_t *)v30 + 3) = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v356, (float)v360 * 0.0039216))), vcvtq_f32_f16(*(float16x4_t *)(v30 + 12)), 1.0 - (float)((float)v360 * 0.0039216)));
            }
LABEL_339:
            while (1)
            {
              v361 = v358;
              v30 += 16;
              --v358;
              v32 += 4;
              if (v361 < 2) {
                break;
              }
              v357 = *(_DWORD *)v32;
              if (*(_DWORD *)v32) {
                goto LABEL_321;
              }
            }
            if (!v359) {
              break;
            }
            v359 = 0;
            v357 = *(_DWORD *)v32 & v350;
          }
          v32 += v353;
          v30 += 4 * v354;
          --v19;
        }
        while (v19);
        return;
      case 2:
        if (use_vImage_fp16_compositing(void)::predicate != -1)
        {
          v411 = *(_WORD *)(v22 + 4);
          v413 = _D7;
          dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_21437);
          _H16 = v411;
          _D7 = v413;
          _S22 = v428;
        }
        if (use_vImage_fp16_compositing(void)::status)
        {
LABEL_18:
          vImageCGCompositeConstMask_ARGB16F();
          return;
        }
        v362 = -1;
        v363 = v32 & 3;
        if ((v32 & 3) != 0)
        {
          v20 += v363;
          v362 = -1 << (8 * v363);
          v364 = v32 & 3;
          v32 &= 0xFFFFFFFFFFFFFFFCLL;
          v30 -= 4 * v364;
        }
        *(float *)&a5 = 1.0 - _S22;
        v365 = ((_BYTE)v20 + (_BYTE)v32) & 3;
        if ((((_BYTE)v20 + (_BYTE)v32) & 3) != 0)
        {
          v366 = 4 - v365;
          v363 += v366;
          v367 = 0xFFFFFFFF >> (8 * v366);
          if (v20 >= 4) {
            v365 = 0xFFFFFFFF >> (8 * v366);
          }
          else {
            v365 = 0;
          }
          if (v20 >= 4) {
            v367 = -1;
          }
          v362 &= v367;
        }
        v368 = v33 - v363;
        v369 = v34 - v363;
        v370 = vcvtq_f32_f16(_D7).u64[0];
        __asm { FCVT            S2, H16 }
        v372.i64[0] = v370;
        v372.i64[1] = __PAIR64__(LODWORD(_S22), LODWORD(_S2));
        v373 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
        while (1)
        {
          v374 = *(_DWORD *)v32 & v362;
          v375 = v20 >> 2;
          v376 = v365;
          if (!v374) {
            goto LABEL_368;
          }
LABEL_357:
          if (v374 == -1) {
            break;
          }
          while (1)
          {
            if ((_BYTE)v374)
            {
              v386 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v372, (float)v374 * 0.0039216)));
              *(float16x4_t *)v30 = vcvt_f16_f32(vmlaq_n_f32(v386, vcvtq_f32_f16(*(float16x4_t *)v30), 1.0 - v386.f32[3]));
            }
            if ((v374 & 0xFF00) != 0)
            {
              v387 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v372, (float)BYTE1(v374) * 0.0039216)));
              *((float16x4_t *)v30 + 1) = vcvt_f16_f32(vmlaq_n_f32(v387, vcvtq_f32_f16(*(float16x4_t *)(v30 + 4)), 1.0 - v387.f32[3]));
            }
            if ((v374 & 0xFF0000) != 0)
            {
              v388 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v372, (float)BYTE2(v374) * 0.0039216)));
              *((float16x4_t *)v30 + 2) = vcvt_f16_f32(vmlaq_n_f32(v388, vcvtq_f32_f16(*(float16x4_t *)(v30 + 8)), 1.0 - v388.f32[3]));
            }
            v389 = HIBYTE(v374);
            if (v389)
            {
              v390 = (float)v389 * 0.0039216;
              _S17 = v390 * *(float *)&v370;
              __asm { FCVT            H17, S17 }
              _S18 = v390 * *((float *)&v370 + 1);
              __asm { FCVT            H18, S18 }
              _S19 = v390 * _S2;
              __asm { FCVT            H19, S19 }
              _S16 = v390 * _S22;
              __asm
              {
                FCVT            H16, S16
                FCVT            S16, H16
                FCVT            S17, H17
              }
              _H21 = v30[12];
              __asm { FCVT            S21, H21 }
              _S17 = _S17 + (float)(_S21 * (float)(1.0 - _S16));
              __asm { FCVT            H17, S17 }
              v30[12] = LOWORD(_S17);
              __asm { FCVT            S17, H18 }
              LOWORD(_S18) = v30[13];
              __asm { FCVT            S18, H18 }
              _S17 = _S17 + (float)(_S18 * (float)(1.0 - _S16));
              __asm { FCVT            H17, S17 }
              v30[13] = LOWORD(_S17);
              __asm { FCVT            S17, H19 }
              LOWORD(_S18) = v30[14];
              __asm { FCVT            S18, H18 }
              _S17 = _S17 + (float)(_S18 * (float)(1.0 - _S16));
              __asm { FCVT            H17, S17 }
              v30[14] = LOWORD(_S17);
              LOWORD(_S17) = v30[15];
              __asm { FCVT            S17, H17 }
              _S16 = _S16 + (float)(_S17 * (float)(1.0 - _S16));
              goto LABEL_367;
            }
LABEL_368:
            while (1)
            {
              v408 = v375;
              v30 += 16;
              --v375;
              v32 += 4;
              if (v408 < 2) {
                break;
              }
              v374 = *(_DWORD *)v32;
              if (*(_DWORD *)v32) {
                goto LABEL_357;
              }
            }
            if (!v376) {
              break;
            }
            v376 = 0;
            v374 = *(_DWORD *)v32 & v365;
          }
          v32 += v368;
          v30 += 4 * v369;
          if (!--v19) {
            return;
          }
        }
        *(float16x8_t *)v30 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(v372, v373, vcvtq_f32_f16(*(float16x4_t *)v30))), vmlaq_f32(v372, v373, vcvt_hight_f32_f16(*(float16x8_t *)v30)));
        *((float16x4_t *)v30 + 2) = vcvt_f16_f32(vmlaq_f32(v372, v373, vcvtq_f32_f16(*(float16x4_t *)(v30 + 8))));
        _H16 = v30[12];
        __asm { FCVT            S16, H16 }
        _S16 = *(float *)&v370 + (float)(_S16 * *(float *)&a5);
        __asm { FCVT            H16, S16 }
        v30[12] = LOWORD(_S16);
        LOWORD(_S16) = v30[13];
        __asm { FCVT            S16, H16 }
        _S16 = *((float *)&v370 + 1) + (float)(_S16 * *(float *)&a5);
        __asm { FCVT            H16, S16 }
        v30[13] = LOWORD(_S16);
        LOWORD(_S16) = v30[14];
        __asm { FCVT            S16, H16 }
        _S16 = _S2 + (float)(_S16 * *(float *)&a5);
        __asm { FCVT            H16, S16 }
        v30[14] = LOWORD(_S16);
        LOWORD(_S16) = v30[15];
        __asm { FCVT            S16, H16 }
        _S16 = _S22 + (float)(_S16 * *(float *)&a5);
LABEL_367:
        __asm { FCVT            H16, S16 }
        v30[15] = _H16;
        goto LABEL_368;
      case 3:
        v38.i64[0] = vcvtq_f32_f16(_D7).u64[0];
        __asm { FCVT            S1, H16 }
        _D7.i16[2] = *(_WORD *)(v22 + 4);
        _D7.i16[3] = *(_WORD *)(v22 + 6);
        v38.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v39 = v20;
          do
          {
            v40 = *(unsigned __int8 *)v32;
            if (*(unsigned char *)v32)
            {
              if (v40 == 255)
              {
                v41 = vmul_n_f16(_D7, *((short float *)v30 + 3));
              }
              else
              {
                v42 = vcvtq_f32_f16(*(float16x4_t *)v30);
                v41 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v38, vmuls_lane_f32((float)v40 * 0.0039216, v42, 3)))), v42, 1.0 - (float)((float)v40 * 0.0039216)));
              }
              *(float16x4_t *)v30 = v41;
            }
            ++v32;
            v30 += 4;
            --v39;
          }
          while (v39);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 4:
        v44.i64[0] = vcvtq_f32_f16(_D7).u64[0];
        __asm { FCVT            S1, H16 }
        v44.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v45 = v20;
          do
          {
            v46 = *(unsigned __int8 *)v32;
            if (*(unsigned char *)v32)
            {
              if (v46 == 255)
              {
                _H3 = v30[3];
                __asm { FCVT            S3, H3 }
                v49 = vmulq_n_f32(v44, 1.0 - _S3);
              }
              else
              {
                v50 = vcvtq_f32_f16(*(float16x4_t *)v30);
                v49 = vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v44, (float)((float)v46 * 0.0039216) * (float)(1.0 - v50.f32[3])))), v50, 1.0 - (float)((float)v46 * 0.0039216));
              }
              *(float16x4_t *)v30 = vcvt_f16_f32(v49);
            }
            ++v32;
            v30 += 4;
            --v45;
          }
          while (v45);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 5:
        v52.i64[0] = vcvtq_f32_f16(_D7).u64[0];
        __asm { FCVT            S1, H16 }
        v52.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v53 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v54 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v52, (float)*(unsigned __int8 *)v32 * 0.0039216)));
              v55 = vcvtq_f32_f16(*(float16x4_t *)v30);
              *(float16x4_t *)v30 = vcvt_f16_f32(vmlaq_laneq_f32(vmulq_n_f32(v55, 1.0 - v54.f32[3]), v54, v55, 3));
            }
            ++v32;
            v30 += 4;
            --v53;
          }
          while (v53);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 6:
        __asm { FCVT            S0, H7; jumptable 0000000184CBE1C4 case 6 }
        _H1 = HIWORD(*(_DWORD *)v22);
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H16
        }
        while (1)
        {
          v60 = v20;
          do
          {
            v61 = *(unsigned __int8 *)v32;
            if (!*(unsigned char *)v32) {
              goto LABEL_54;
            }
            _H5 = v30[3];
            __asm { FCVT            S5, H5 }
            v64 = 1.0 - _S5;
            if ((float)(1.0 - _S5) >= 1.0)
            {
              v82 = (float)v61 * 0.0039216;
              _S6 = v82 * _S0;
              __asm { FCVT            H6, S6 }
              _S7 = v82 * _S1;
              __asm { FCVT            H7, S7 }
              _S16 = v82 * _S2;
              __asm { FCVT            H16, S16 }
              *v30 = LOWORD(_S6);
              _S5 = v82 * _S22;
              v30[1] = LOWORD(_S7);
              v30[2] = LOWORD(_S16);
            }
            else
            {
              if (v64 <= 0.0) {
                goto LABEL_54;
              }
              v65 = (float)v61 * 0.0039216;
              _S16 = v65 * _S0;
              __asm { FCVT            H16, S16 }
              _S17 = v65 * _S1;
              __asm { FCVT            H17, S17 }
              _S18 = v65 * _S2;
              __asm { FCVT            H18, S18 }
              _S7 = v65 * _S22;
              __asm { FCVT            H7, S7 }
              _H19 = *(short float *)v30;
              __asm
              {
                FCVT            S19, H19
                FCVT            S16, H16
              }
              _S16 = _S19 + (float)(_S16 * v64);
              __asm { FCVT            H16, S16 }
              *v30 = LOWORD(_S16);
              LOWORD(_S16) = v30[1];
              __asm
              {
                FCVT            S16, H16
                FCVT            S17, H17
              }
              _S16 = _S16 + (float)(_S17 * v64);
              __asm { FCVT            H16, S16 }
              v30[1] = LOWORD(_S16);
              LOWORD(_S16) = v30[2];
              __asm
              {
                FCVT            S16, H16
                FCVT            S17, H18
              }
              _S16 = _S16 + (float)(_S17 * v64);
              __asm { FCVT            H16, S16 }
              v30[2] = LOWORD(_S16);
              __asm { FCVT            S7, H7 }
              _S5 = _S5 + (float)(_S7 * v64);
            }
            __asm { FCVT            H5, S5 }
            v30[3] = _H5;
LABEL_54:
            ++v32;
            v30 += 4;
            --v60;
          }
          while (v60);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 7:
        do
        {
          v87 = v20;
          do
          {
            v88 = *(unsigned __int8 *)v32;
            if (*(unsigned char *)v32)
            {
              if (v88 == 255) {
                v89 = vmul_n_f16(*(float16x4_t *)v30, _H8);
              }
              else {
                v89 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)v30), (float)((float)((float)v88 * 0.0039216) * _S22)+ (float)(1.0 - (float)((float)v88 * 0.0039216))));
              }
              *(float16x4_t *)v30 = v89;
            }
            ++v32;
            v30 += 4;
            --v87;
          }
          while (v87);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 8:
        do
        {
          v90 = v20;
          do
          {
            v91 = *(unsigned __int8 *)v32;
            if (*(unsigned char *)v32)
            {
              _H3 = *(short float *)v30;
              if (v91 == 255)
              {
                __asm { FCVT            S3, H3 }
                _S4 = (float)(1.0 - _S22) * _S3;
                v95 = 1.0 - _S22;
              }
              else
              {
                __asm { FCVT            S4, H3 }
                v95 = (float)((float)((float)v91 * -0.0039216) * _S22) + 1.0;
                _S4 = v95 * _S4;
              }
              __asm { FCVT            H4, S4 }
              *v30 = _H4;
              _H4 = v30[1];
              __asm { FCVT            S4, H4 }
              _S4 = v95 * _S4;
              __asm { FCVT            H4, S4 }
              v30[1] = LOWORD(_S4);
              LOWORD(_S4) = v30[2];
              __asm { FCVT            S4, H4 }
              _S4 = v95 * _S4;
              __asm { FCVT            H4, S4 }
              v30[2] = LOWORD(_S4);
              LOWORD(_S4) = v30[3];
              __asm { FCVT            S4, H4 }
              _S3 = v95 * _S4;
              __asm { FCVT            H3, S3 }
              v30[3] = LOWORD(_S3);
            }
            ++v32;
            v30 += 4;
            --v90;
          }
          while (v90);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 9:
        v106.i64[0] = vcvtq_f32_f16(_D7).u64[0];
        __asm { FCVT            S1, H16 }
        v106.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v107 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v108 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              v109 = 1.0 - v108;
              v110 = vcvtq_f32_f16(*(float16x4_t *)v30);
              v111 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v106, v108)));
              *(float16x4_t *)v30 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v110, v109 + v111.f32[3]), v111, 1.0 - v110.f32[3]));
            }
            ++v32;
            v30 += 4;
            --v107;
          }
          while (v107);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 10:
        v113.i64[0] = vcvtq_f32_f16(_D7).u64[0];
        __asm { FCVT            S1, H16 }
        v113.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v114 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v115 = vcvtq_f32_f16(*(float16x4_t *)v30);
              v116 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v113, (float)*(unsigned __int8 *)v32 * 0.0039216)));
              *(float16x4_t *)v30 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v115, 1.0 - v116.f32[3]), v116, 1.0 - v115.f32[3]));
            }
            ++v32;
            v30 += 4;
            --v114;
          }
          while (v114);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 11:
        __asm { FCVT            S0, H7; jumptable 0000000184CBE1C4 case 11 }
        _H1 = HIWORD(*(_DWORD *)v22);
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H16
        }
        do
        {
          v121 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v122 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S4 = v122 * _S22;
              __asm { FCVT            H4, S4 }
              if (v16)
              {
                _H6 = v30[3];
                __asm
                {
                  FCVT            S17, H6
                  FCVT            S4, H4
                }
              }
              else
              {
                __asm { FCVT            S4, H4 }
                _S17 = 1.0;
              }
              _S6 = _S4 + _S17;
              _S7 = 1.0;
              if ((float)(_S4 + _S17) > 1.0) {
                _S6 = 1.0;
              }
              _S16 = 1.0;
              if (v16)
              {
                _H16 = v30[3];
                __asm { FCVT            S16, H16 }
              }
              _S18 = v122 * _S0;
              __asm { FCVT            H18, S18 }
              _H19 = *(short float *)v30;
              __asm
              {
                FCVT            S19, H19
                FCVT            S18, H18
              }
              v136 = (float)(_S4 - _S18) + (float)(_S17 - _S19);
              _H17 = v30[1];
              _S18 = _S6 - v136;
              __asm { FCVT            H18, S18 }
              *v30 = LOWORD(_S18);
              if (v16)
              {
                _H7 = v30[3];
                __asm { FCVT            S7, H7 }
              }
              _S18 = v122 * _S1;
              __asm { FCVT            H18, S18 }
              _S5 = v122 * _S2;
              __asm
              {
                FCVT            H5, S5
                FCVT            S17, H17
              }
              v143 = _S16 - _S17;
              __asm { FCVT            S17, H18 }
              v145 = (float)(_S4 - _S17) + v143;
              LOWORD(_S17) = v30[2];
              __asm
              {
                FCVT            S17, H17
                FCVT            S5, H5
              }
              v148 = (float)(_S4 - _S5) + (float)(_S7 - _S17);
              _S5 = _S6 - v145;
              __asm { FCVT            H5, S5 }
              v30[1] = LOWORD(_S5);
              __asm { FCVT            H5, S6 }
              v30[3] = LOWORD(_S5);
              _S4 = _S6 - v148;
              __asm { FCVT            H4, S4 }
              v30[2] = LOWORD(_S4);
            }
            ++v32;
            v30 += 4;
            --v121;
          }
          while (v121);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 12:
        __asm { FCVT            S0, H7; jumptable 0000000184CBE1C4 case 12 }
        _H1 = HIWORD(*(_DWORD *)v22);
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H16
        }
        do
        {
          v155 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v156 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S6 = v156 * _S0;
              __asm { FCVT            H6, S6 }
              _S7 = v156 * _S1;
              __asm { FCVT            H7, S7 }
              _S16 = v156 * _S2;
              __asm { FCVT            H16, S16 }
              _S5 = v156 * _S22;
              __asm { FCVT            H5, S5 }
              v162 = *((short float *)v30 + 1);
              *(short float *)v30 = *(short float *)v30 + *(short float *)&_S6;
              *((short float *)v30 + 1) = v162 + *(short float *)&_S7;
              LOWORD(_S6) = v30[3];
              __asm
              {
                FCVT            S6, H6
                FCVT            S5, H5
              }
              _S5 = _S5 + _S6;
              if (_S5 > 1.0) {
                _S5 = 1.0;
              }
              *((short float *)v30 + 2) = *((short float *)v30 + 2) + _H16;
              __asm { FCVT            H5, S5 }
              v30[3] = _H5;
            }
            ++v32;
            v30 += 4;
            --v155;
          }
          while (v155);
          v32 += v33;
          v30 += 4 * v34;
          --v19;
        }
        while (v19);
        return;
      case 13:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v414 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v169 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v170 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v170 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v173.n128_u64[1] = v414.n128_u64[1];
                v173.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v414.n128_u64[0], v170);
                v174 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v173));
                _Q0.n128_f32[0] = v170 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v174);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_124;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v173.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAmultiplyPDA(_Q0, v173, _Q2, _D3, _S4, _D5, v174, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v174), SWORD1(v174), _D7.i16[0],
                         _S16);
                v30[1] = v177;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_124:
            ++v32;
            v30 += 4;
            --v169;
          }
          while (v169);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 14:
        __asm { FCVT            S0, H7; jumptable 0000000184CBE1C4 case 14 }
        _H1 = HIWORD(*(_DWORD *)v22);
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H16
        }
        while (1)
        {
          v182 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v183 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S5 = v183 * _S22;
              __asm
              {
                FCVT            H5, S5
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                _S6 = v183 * _S0;
                __asm { FCVT            H6, S6 }
                _S7 = v183 * _S1;
                __asm { FCVT            H7, S7 }
                _S16 = v183 * _S2;
                __asm { FCVT            H16, S16 }
                if (v16)
                {
                  __asm { FCMP            H17, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *v30 = _H6;
                    v30[1] = _H7;
LABEL_137:
                    v30[2] = _H16;
                    v30[3] = _H5;
                    goto LABEL_138;
                  }
                  __asm { FCVT            S17, H17 }
                }
                else
                {
                  _S17 = 1.0;
                }
                __asm { FCVT            S5, H5 }
                _H18 = *(short float *)v30;
                _H19 = v30[1];
                _H20 = v30[2];
                __asm
                {
                  FCVT            S18, H18
                  FCVT            S19, H19
                  FCVT            S20, H20
                  FCVT            S6, H6
                  FCVT            S7, H7
                  FCVT            S16, H16
                }
                _S6 = _S18 + (float)(_S6 * (float)(1.0 - _S18));
                _S7 = _S19 + (float)(_S7 * (float)(1.0 - _S19));
                _S16 = _S20 + (float)(_S16 * (float)(1.0 - _S20));
                _S5 = (float)(_S17 + _S5) - (float)(_S17 * _S5);
                __asm
                {
                  FCVT            H6, S6
                  FCVT            H7, S7
                  FCVT            H16, S16
                }
                *v30 = LOWORD(_S6);
                v30[1] = LOWORD(_S7);
                __asm { FCVT            H5, S5 }
                goto LABEL_137;
              }
            }
LABEL_138:
            ++v32;
            v30 += 4;
            --v182;
          }
          while (v182);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 15:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v415 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v210 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v211 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v211 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v214.n128_u64[1] = v415.n128_u64[1];
                v214.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v415.n128_u64[0], v211);
                v215 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v214));
                _Q0.n128_f32[0] = v211 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v215);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_151;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v214.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAoverlayPDA(_Q0, v214, _Q2, _D3, _S4, _D5, v215, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v215), SWORD1(v215), _D7.i16[0],
                         _S16);
                v30[1] = v218;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_151:
            ++v32;
            v30 += 4;
            --v210;
          }
          while (v210);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 16:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v416 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v221 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v222 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v222 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v225.n128_u64[1] = v416.n128_u64[1];
                v225.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v416.n128_u64[0], v222);
                v226 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v225));
                _Q0.n128_f32[0] = v222 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v226);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_164;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v225.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAdarkenPDA(_Q0, v225, _Q2, _D3, _S4, _D5, v226, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v226), SWORD1(v226), _D7.i16[0],
                         _S16);
                v30[1] = v229;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_164:
            ++v32;
            v30 += 4;
            --v221;
          }
          while (v221);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 17:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v417 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v232 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v233 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v233 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v236.n128_u64[1] = v417.n128_u64[1];
                v236.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v417.n128_u64[0], v233);
                v237 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v236));
                _Q0.n128_f32[0] = v233 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v237);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_177;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v236.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAlightenPDA(_Q0, v236, _Q2, _D3, _S4, _D5, v237, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v237), SWORD1(v237), _D7.i16[0],
                         _S16);
                v30[1] = v240;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_177:
            ++v32;
            v30 += 4;
            --v232;
          }
          while (v232);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 18:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v418 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v243 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v244 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v244 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v247.n128_u64[1] = v418.n128_u64[1];
                v247.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v418.n128_u64[0], v244);
                v248 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v247));
                _Q0.n128_f32[0] = v244 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v248);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_190;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v247.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAcolordodgePDA(_Q0, v247, _Q2, _D3, _S4, _D5, v248, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v248), SWORD1(v248), _D7.i16[0],
                         _S16);
                v30[1] = v251;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_190:
            ++v32;
            v30 += 4;
            --v243;
          }
          while (v243);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 19:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v419 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v254 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v255 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v255 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v258.n128_u64[1] = v419.n128_u64[1];
                v258.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v419.n128_u64[0], v255);
                v259 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v258));
                _Q0.n128_f32[0] = v255 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v259);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_203;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v258.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAcolorburnPDA(_Q0, v258, _Q2, _D3, _S4, _D5, v259, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v259), SWORD1(v259), _D7.i16[0],
                         _S16);
                v30[1] = v262;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_203:
            ++v32;
            v30 += 4;
            --v254;
          }
          while (v254);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 20:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v420 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v265 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v266 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v266 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v269.n128_u64[1] = v420.n128_u64[1];
                v269.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v420.n128_u64[0], v266);
                v270 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v269));
                _Q0.n128_f32[0] = v266 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v270);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_216;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v269.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAsoftlightPDA(_Q0, v269, _Q2, _D3, _S4, _D5, v270, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v270), SWORD1(v270), _D7.i16[0],
                         _S16);
                v30[1] = v273;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_216:
            ++v32;
            v30 += 4;
            --v265;
          }
          while (v265);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 21:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v421 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v276 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v277 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v277 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v280.n128_u64[1] = v421.n128_u64[1];
                v280.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v421.n128_u64[0], v277);
                v281 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v280));
                _Q0.n128_f32[0] = v277 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v281);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_229;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v280.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAhardlightPDA(_Q0, v280, _Q2, _D3, _S4, _D5, v281, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v281), SWORD1(v281), _D7.i16[0],
                         _S16);
                v30[1] = v284;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_229:
            ++v32;
            v30 += 4;
            --v276;
          }
          while (v276);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 22:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v422 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v287 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v288 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v288 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v291.i64[1] = v422.n128_i64[1];
                *(float32x2_t *)v291.f32 = vmul_n_f32((float32x2_t)v422.n128_u64[0], v288);
                v292 = COERCE_DOUBLE(vcvt_f16_f32(v291));
                _Q0.n128_f32[0] = v288 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v292);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_242;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v291.i16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                HIWORD(v409) = LOWORD(_D5);
                LOWORD(v409) = _D7.i16[0];
                *v30 = PDAdifferencePDA(_Q0, *(double *)v291.i64, _Q2.n128_f64[0], _D3, _S4, _D5, v292, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v292), v409, _S16);
                v30[1] = v295;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_242:
            ++v32;
            v30 += 4;
            --v287;
          }
          while (v287);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 23:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v423 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v298 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v299 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v299 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v302.n128_u64[1] = v423.n128_u64[1];
                v302.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v423.n128_u64[0], v299);
                v303 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v302));
                _Q0.n128_f32[0] = v299 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v303);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_255;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v302.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAexclusionPDA(_Q0, v302, _Q2, _D3, _S4, _D5, v303, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v303), SWORD1(v303), _D7.i16[0],
                         _S16);
                v30[1] = v306;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_255:
            ++v32;
            v30 += 4;
            --v298;
          }
          while (v298);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 24:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v424 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v309 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v310 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v310 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v313.n128_u64[1] = v424.n128_u64[1];
                v313.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v424.n128_u64[0], v310);
                v314 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v313));
                _Q0.n128_f32[0] = v310 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v314);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_268;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v313.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAhuePDA(_Q0, v313, _Q2, _D3, _S4, _D5, v314, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v314), SWORD1(v314), _D7.i16[0],
                         _S16);
                v30[1] = v317;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_268:
            ++v32;
            v30 += 4;
            --v309;
          }
          while (v309);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 25:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v425 = _Q0;
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v320 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v321 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S1 = v321 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCMP            H5, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v324.n128_u64[1] = v425.n128_u64[1];
                v324.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v425.n128_u64[0], v321);
                v325 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v324));
                _Q0.n128_f32[0] = v321 * _S8;
                __asm { FCVT            H7, S0 }
                if (v16)
                {
                  __asm { FCMP            H3, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = LODWORD(v325);
                    v30[2] = _D7.i16[0];
                    v30[3] = LOWORD(_D5);
                    goto LABEL_281;
                  }
                  __asm { FCVT            S4, H3 }
                }
                else
                {
                  LOWORD(_D3) = v30[3];
                  _S4 = 1.0;
                }
                __asm { FCVT            S16, H5 }
                _Q0.n128_u16[0] = *v30;
                v324.n128_u16[0] = v30[1];
                _Q2.n128_u16[0] = v30[2];
                *v30 = PDAsaturationPDA(_Q0, v324, _Q2, _D3, _S4, _D5, v325, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v325), SWORD1(v325), _D7.i16[0],
                         _S16);
                v30[1] = v328;
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_281:
            ++v32;
            v30 += 4;
            --v320;
          }
          while (v320);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 26:
        v426 = vcvtq_f32_f16(_D7);
        __asm { FCVT            S8, H16 }
        while (1)
        {
          v330 = v20;
          do
          {
            if (*(unsigned char *)v32)
            {
              v331 = (float)*(unsigned __int8 *)v32 * 0.0039216;
              _S0 = v331 * _S22;
              __asm
              {
                FCVT            H3, S0
                FCMP            H3, #0
              }
              if (!(_NF ^ _VF | _ZF))
              {
                v334.n128_u64[1] = v426.u64[1];
                v334.n128_u64[0] = (unint64_t)vmul_n_f32(*(float32x2_t *)v426.f32, v331);
                v334.n128_u64[0] = (unint64_t)vcvt_f16_f32((float32x4_t)v334);
                _Q1.n128_f32[0] = v331 * _S8;
                __asm { FCVT            H2, S1 }
                if (v16)
                {
                  __asm { FCMP            H5, #0 }
                  if (!(!_ZF & _CF))
                  {
                    *(_DWORD *)v30 = v334.n128_u32[0];
                    v30[2] = _Q2.n128_u16[0];
                    v30[3] = LOWORD(_D3);
                    goto LABEL_294;
                  }
                  __asm { FCVT            S6, H5 }
                }
                else
                {
                  LOWORD(_D5) = v30[3];
                  LODWORD(_D6) = 1.0;
                }
                __asm { FCVT            S4, H3 }
                _D7.i16[0] = *v30;
                _Q1.n128_u16[0] = v334.n128_u16[1];
                *v30 = PDAluminosityPDA(v334, _Q1, _Q2, _D3, _S4, _D5, _D6, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, *v30, *(_DWORD *)(v30 + 1), HIWORD(*(_DWORD *)(v30 + 1)),
                         *(float *)&_D6);
                v30[1] = _Q1.n128_u16[0];
                v30[2] = _Q2.n128_u16[0];
                v30[3] = LOWORD(_D3);
                _S22 = v428;
              }
            }
LABEL_294:
            ++v32;
            v30 += 4;
            --v330;
          }
          while (v330);
          v32 += v33;
          v30 += 4 * v34;
          if (!--v19) {
            return;
          }
        }
      case 27:
        _Q0 = (__n128)vcvtq_f32_f16(_D7);
        v427 = _Q0;
        __asm { FCVT            S8, H16 }
        break;
      default:
        return;
    }
LABEL_298:
    v338 = v20;
    while (1)
    {
      if (!*(unsigned char *)v32) {
        goto LABEL_307;
      }
      v339 = (float)*(unsigned __int8 *)v32 * 0.0039216;
      _S1 = v339 * _S22;
      __asm
      {
        FCVT            H5, S1
        FCMP            H5, #0
      }
      if (_NF ^ _VF | _ZF) {
        goto LABEL_307;
      }
      v342.n128_u64[1] = v427.n128_u64[1];
      v342.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v427.n128_u64[0], v339);
      v343 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v342));
      _Q0.n128_f32[0] = v339 * _S8;
      __asm { FCVT            H7, S0 }
      if (!v16) {
        break;
      }
      __asm { FCMP            H3, #0 }
      if (!_ZF & _CF)
      {
        __asm { FCVT            S4, H3 }
LABEL_306:
        __asm { FCVT            S16, H5 }
        _Q0.n128_u16[0] = *v30;
        v342.n128_u16[0] = v30[1];
        _Q2.n128_u16[0] = v30[2];
        *v30 = PDAluminosityPDA(_Q0, v342, _Q2, _D3, _S4, _D5, v343, *(double *)&_D7, a1, a2, a3, a4, v18, a14, a15, a16, SLOWORD(v343), SWORD1(v343), _D7.i16[0],
                 _S16);
        v30[1] = v346;
        v30[2] = _Q2.n128_u16[0];
        v30[3] = LOWORD(_D3);
        _S22 = v428;
        goto LABEL_307;
      }
      *(_DWORD *)v30 = LODWORD(v343);
      v30[2] = _D7.i16[0];
      v30[3] = LOWORD(_D5);
LABEL_307:
      ++v32;
      v30 += 4;
      if (!--v338)
      {
        v32 += v33;
        v30 += 4 * v34;
        if (!--v19) {
          return;
        }
        goto LABEL_298;
      }
    }
    LOWORD(_D3) = v30[3];
    _S4 = 1.0;
    goto LABEL_306;
  }
}

void __CGLibraryLoadImageIODYLD_block_invoke()
{
  CGLibraryLoadImageIODYLD_handle = (uint64_t)dlopen("/System/Library/Frameworks/ImageIO.framework/ImageIO", 5);
  if (!CGLibraryLoadImageIODYLD_handle) {
    CGPostError((uint64_t)"Failed to load %s", v0, v1, v2, v3, v4, v5, v6, (char)"/System/Library/Frameworks/ImageIO.framework/ImageIO");
  }
}

CFDictionaryRef __get_masking_options_block_invoke()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"kCGColorTransformCreateMask";
  values = (void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryRef result = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  get_masking_options_options = (uint64_t)result;
  return result;
}

void __read_entitlements_block_invoke()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v0)
  {
    uint64_t v1 = v0;
    CFBooleanRef v2 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v0, @"com.apple.coregraphics.disablepdf", 0);
    if (v2)
    {
      CFBooleanRef v3 = v2;
      CFTypeID v4 = CFGetTypeID(v2);
      if (v4 == CFBooleanGetTypeID()) {
        sHasLockdownModeForPDFEntitlement = CFBooleanGetValue(v3) != 0;
      }
      else {
        pdf_error("Invalid value for entitlement: %s. Must be CFBooleanRef", "com.apple.coregraphics.disablepdf");
      }
    }
    CFBooleanRef v5 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v1, @"com.apple.coregraphics.disableinmemoryfonts", 0);
    if (v5)
    {
      CFBooleanRef v6 = v5;
      CFTypeID v7 = CFGetTypeID(v5);
      if (v7 == CFBooleanGetTypeID()) {
        sHasLockdownModeForFontsEntitlement = CFBooleanGetValue(v6) != 0;
      }
      else {
        pdf_error("Invalid value for entitlement: %s. Must be CFBooleanRef", "com.apple.coregraphics.disableinmemoryfonts");
      }
    }
    CFRelease(v1);
  }
}

void *CGIOSurfaceContextCreateWithOptions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  if (iosurface_context_vtable_once != -1) {
    dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
  }
  uint64_t v16 = vtable;
  if (!vtable) {
    return 0;
  }
  v17 = malloc_type_malloc(0x38uLL, 0x2062DE7BuLL);
  void *v17 = a2;
  v17[1] = a3;
  v17[2] = CFRetain(a1);
  v17[3] = a4;
  v17[4] = a5;
  if (a6) {
    CFRetain(a6);
  }
  v17[5] = a6;
  *((_DWORD *)v17 + 12) = a7;
  v20 = (void *)CGContextCreateWithDelegateAndInfo(0, 8, 0, 0, (uint64_t)v17, (uint64_t)iosurface_context_finalize, v18, v19);
  uint64_t v21 = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v17, a8);
  v20[5] = v21;
  if (!v21)
  {
    CFRelease(v20);
    return 0;
  }
  return v20;
}

void __get_locale_mapping_block_invoke()
{
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  get_locale_mapping_locale_mapping = (uint64_t)Mutable;
  CFLocaleRef System = CFLocaleGetSystem();
  CFBooleanRef v2 = (const void *)*MEMORY[0x1E4F1D260];

  CFDictionarySetValue(Mutable, System, v2);
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_27()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020_sRGBGammaProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_218 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_25()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709_HLGProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_207 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_23()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709_PQProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_196 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_21()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2100_PQProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_185 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_19()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020_PQProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_174 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_17()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3_PQProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_163 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_15()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3_HLGProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_152 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_13()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2100_HLGProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_141 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_11()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020_HLGProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  colorspace_with_name_from_icc_data_s = v1;
  return result;
}

uint64_t *__color_space_state_create_romm_rgb_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncROMMRGBProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_romm_rgb_s = v1;
  return result;
}

uint64_t *__color_space_state_create_itur_2020_sRGB_gamma_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020_sRGBGammaProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_itur_2020_sRGB_gamma_s = v1;
  return result;
}

uint64_t *__color_space_state_create_adobe_rgb_1998_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncAdobeRGB1998Profile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_adobe_rgb_1998_s = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_9())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyDisplayP3ITU709");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_119 = (uint64_t (*)(void))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_8())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyCoreVideo709");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_113 = (uint64_t (*)(void))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_7())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyGenericLab");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_107 = (uint64_t (*)(void))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_6())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyAdobeRGB");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_101 = (uint64_t (*)(void))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_26())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_213 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_24())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_202 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_22())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_191 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_20())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_180 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_18())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_169 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_16())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_158 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_14())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_147 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_12())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_136 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_10())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  colorspace_with_name_from_icc_data_f_125 = v1;
  return result;
}

uint64_t (*__color_space_state_create_romm_rgb_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_romm_rgb_f = v1;
  return result;
}

uint64_t (*__color_space_state_create_itur_2020_sRGB_gamma_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_itur_2020_sRGB_gamma_f = v1;
  return result;
}

uint64_t (*__color_space_state_create_icc_with_data_block_invoke_3())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncCreateOutputPoppyProfile");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  color_space_state_create_icc_with_data_f_28 = (uint64_t (*)(void))v1;
  return result;
}

uint64_t (*__color_space_state_create_icc_with_data_block_invoke_2())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileVerify");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  color_space_state_create_icc_with_data_f_22 = (uint64_t (*)(void, void, void))v1;
  return result;
}

uint64_t (*__color_space_state_create_icc_with_data_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreate");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_7440;
  }
  color_space_state_create_icc_with_data_f = (uint64_t (*)(void, void))v1;
  return result;
}

uint64_t (*__color_space_state_create_adobe_rgb_1998_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_adobe_rgb_1998_f = v1;
  return result;
}

void *load_iosurface_context_vtable()
{
  CFDictionaryRef result = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 1);
  if (result)
  {
    CFDictionaryRef result = dlsym(result, "CAIOSurfaceContextVTable");
    vtable = (uint64_t)result;
  }
  return result;
}

uint64_t CGPDFScannerScanInit()
{
  pthread_key_create((pthread_key_t *)&scanner_frame_key, 0);

  return pthread_key_create((pthread_key_t *)&scanner_bailout_key, 0);
}

uint64_t CGPatternNotificationCenter()
{
  if (CGPatternNotificationCenter_once != -1) {
    dispatch_once_f(&CGPatternNotificationCenter_once, 0, (dispatch_function_t)pattern_notification_center_create);
  }
  return pattern_notification_center;
}

void *__CGImageCreateWithPNGDataProvider_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  }
  CFDictionaryRef result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  }
  CGImageCreateWithPNGDataProvider_f_9 = (uint64_t (*)(void, void, void))result;
  return result;
}

void *__CGImageCreateWithPNGDataProvider_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithDataProvider");
  }
  CFDictionaryRef result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithDataProvider");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithDataProvider");
  }
  CGImageCreateWithPNGDataProvider_f = (uint64_t (*)(void, void))result;
  return result;
}

void __CGCMSUtilsCreateLinearSRGBProfile_block_invoke()
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (_block_invoke_2_cglibrarypredicate != -1) {
    dispatch_once(&_block_invoke_2_cglibrarypredicate, &__block_literal_global_170_1616);
  }
  uint64_t v0 = (uint64_t (*)(uint64_t))_block_invoke_2_f;
  if (_block_invoke_2_cglibrarypredicate_172 != -1) {
    dispatch_once(&_block_invoke_2_cglibrarypredicate_172, &__block_literal_global_175);
  }
  uint64_t v1 = v0(_block_invoke_2_s);
  if (v1)
  {
    CFBooleanRef v2 = (const void *)v1;
    uint64_t v33 = 0x3FE47AE147AE147BLL;
    uint64_t v32 = 0x3FD51EB851EB851FLL;
    uint64_t v31 = 0x3FD3333333333333;
    uint64_t v30 = 0x3FE3333333333333;
    uint64_t v29 = 0x3FC3333333333333;
    uint64_t v28 = 0x3FAEB851EB851EB8;
    uint64_t v27 = 0x3FD40346DC5D6388;
    uint64_t v26 = 0x3FD50E5604189375;
    keys[10] = xmmword_1E52A0BE0;
    keys[11] = *(_OWORD *)off_1E52A0BF0;
    v67 = @"createImmutableCopy";
    keys[6] = xmmword_1E52A0BA0;
    keys[7] = *(_OWORD *)&off_1E52A0BB0;
    keys[8] = xmmword_1E52A0BC0;
    keys[9] = *(_OWORD *)&off_1E52A0BD0;
    keys[2] = xmmword_1E52A0B60;
    keys[3] = *(_OWORD *)&off_1E52A0B70;
    keys[4] = xmmword_1E52A0B80;
    keys[5] = *(_OWORD *)&off_1E52A0B90;
    keys[0] = xmmword_1E52A0B40;
    keys[1] = *(_OWORD *)&off_1E52A0B50;
    __int16 valuePtr = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0x3FF0000000000000;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    long long v64 = 0u;
    long long v65 = 0u;
    *(_OWORD *)values = 0u;
    long long v63 = 0u;
    values[0] = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
    values[1] = CFNumberCreate(0, kCFNumberDoubleType, &v24);
    *(void *)&long long v63 = CFNumberCreate(0, kCFNumberDoubleType, &v23);
    *((void *)&v63 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v22);
    *(void *)&long long v64 = CFNumberCreate(0, kCFNumberDoubleType, &v21);
    *((void *)&v64 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v20);
    *(void *)&long long v65 = CFNumberCreate(0, kCFNumberDoubleType, &v19);
    *((void *)&v65 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v18);
    CFArrayRef v3 = CFArrayCreate(0, (const void **)values, 8, MEMORY[0x1E4F1D510]);
    for (uint64_t i = 0; i != 8; ++i)
    {
      CFBooleanRef v5 = values[i];
      if (v5) {
        CFRelease(v5);
      }
    }
    if (_block_invoke_2_cglibrarypredicate_218 != -1) {
      dispatch_once(&_block_invoke_2_cglibrarypredicate_218, &__block_literal_global_221);
    }
    CFBooleanRef v6 = (const void *)_block_invoke_2_f_217(v2, @"rXYZ");
    if (_block_invoke_2_cglibrarypredicate_224 != -1) {
      dispatch_once(&_block_invoke_2_cglibrarypredicate_224, &__block_literal_global_227);
    }
    CFTypeID v7 = (const void *)_block_invoke_2_f_223(v2, @"gXYZ");
    if (_block_invoke_2_cglibrarypredicate_229 != -1) {
      dispatch_once(&_block_invoke_2_cglibrarypredicate_229, &__block_literal_global_232);
    }
    v8 = (const void *)_block_invoke_2_f_228(v2, @"bXYZ");
    long long v60 = 0u;
    long long v61 = 0u;
    v59[0] = CFNumberCreate(0, kCFNumberSInt16Type, &_block_invoke_2_iccDate);
    v59[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F562);
    v59[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F564);
    v59[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F566);
    v59[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F568);
    v59[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F56A);
    CFArrayRef v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v59, 6, MEMORY[0x1E4F1D510]);
    for (uint64_t j = 0; j != 6; ++j)
    {
      uint64_t v11 = v59[j];
      if (v11) {
        CFRelease(v11);
      }
    }
    *(void *)bytes = 1885563235;
    LODWORD(v35) = 16779265;
    CFDataRef v12 = CFDataCreate(0, bytes, 12);
    *(void *)bytes = @"displayRGB";
    v35 = @"4.0";
    v36 = @"sRGB IEC61966-2.1 Linear";
    CFArrayRef v37 = v3;
    CFArrayRef v38 = v3;
    CFArrayRef v39 = v3;
    CFArrayRef v40 = v9;
    CFNumberRef v41 = CFNumberCreate(0, kCFNumberDoubleType, &v33);
    CFNumberRef v42 = CFNumberCreate(0, kCFNumberDoubleType, &v32);
    CFNumberRef v43 = CFNumberCreate(0, kCFNumberDoubleType, &v31);
    CFNumberRef v44 = CFNumberCreate(0, kCFNumberDoubleType, &v30);
    CFNumberRef v45 = CFNumberCreate(0, kCFNumberDoubleType, &v29);
    CFNumberRef v46 = CFNumberCreate(0, kCFNumberDoubleType, &v28);
    CFNumberRef v47 = CFNumberCreate(0, kCFNumberDoubleType, &v27);
    CFNumberRef v13 = CFNumberCreate(0, kCFNumberDoubleType, &v26);
    uint64_t v14 = *MEMORY[0x1E4F1CFD0];
    CFNumberRef v48 = v13;
    uint64_t v49 = v14;
    uint64_t v50 = v14;
    uint64_t v51 = v14;
    uint64_t v52 = v14;
    uint64_t v53 = v14;
    v54 = v6;
    v55 = v7;
    v56 = v8;
    CFDataRef v57 = v12;
    uint64_t v58 = v14;
    CFDictionaryRef v15 = CFDictionaryCreate(0, (const void **)keys, (const void **)bytes, 25, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (_block_invoke_2_cglibrarypredicate_240 != -1) {
      dispatch_once(&_block_invoke_2_cglibrarypredicate_240, &__block_literal_global_243);
    }
    CGCMSUtilsCreateLinearSRGBProfile_linear_profile = _block_invoke_2_f_239(v15);
    if (v3) {
      CFRelease(v3);
    }
    if (v9) {
      CFRelease(v9);
    }
    for (uint64_t k = 56; k != 120; k += 8)
    {
      v17 = *(const void **)&bytes[k];
      if (v17) {
        CFRelease(v17);
      }
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v15) {
      CFRelease(v15);
    }
    CFRelease(v2);
  }
}

uint64_t *__color_space_state_create_generic_xyz_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericXYZProfile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_generic_xyz_s = v1;
  return result;
}

uint64_t *__color_space_state_create_core_media_709_block_invoke_2()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncCoreVideo709Profile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  color_space_state_create_core_media_709_s = v1;
  return result;
}

uint64_t *__CGCMSUtilsCreateLinearDisplayP3Profile_block_invoke_3()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (CFDictionaryRef result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3Profile")) != 0)
  {
    uint64_t v1 = *result;
  }
  else
  {
    uint64_t v1 = 0;
  }
  _block_invoke_4_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_generic_xyz_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_generic_xyz_f = v1;
  return result;
}

uint64_t (*__color_space_state_create_core_media_709_block_invoke())()
{
  if (CGLibraryLoadColorSyncDYLD_once != -1) {
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_21589);
  }
  CFDictionaryRef result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle) {
    CFDictionaryRef result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  }
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = colorsync_smart_null_1748;
  }
  color_space_state_create_core_media_709_f = v1;
  return result;
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  CGFloat height = rect.size.height;
  CGFloat width = rect.size.width;
  CGFloat y = rect.origin.y;
  CGFloat x = rect.origin.x;
  if (cornerWidth >= 0.0) {
    double v16 = cornerWidth;
  }
  else {
    double v16 = 0.0;
  }
  if (cornerHeight >= 0.0) {
    double v17 = cornerHeight;
  }
  else {
    double v17 = 0.0;
  }
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
  {
    CGRect v34 = CGRectStandardize(rect);
    if (v16 > v34.size.width * 0.5) {
      double v16 = v34.size.width * 0.5;
    }
    v35.origin.CGFloat x = x;
    v35.origin.CGFloat y = y;
    v35.size.CGFloat width = width;
    v35.size.CGFloat height = height;
    rect = CGRectStandardize(v35);
  }
  else if (v16 > rect.size.width * 0.5)
  {
    double v16 = rect.size.width * 0.5;
  }
  if (v17 > rect.size.height * 0.5) {
    double v17 = rect.size.height * 0.5;
  }
    return 0;
  if (v16 != 0.0 && v17 != 0.0)
  {
    CFTypeID TypeID = CGPathGetTypeID();
    Instance = (const CGPath *)CGTypeCreateInstance(TypeID, 88, v19, v20, v21, v22, v23, v24);
    if (Instance)
    {
      v36.origin.CGFloat x = x;
      v36.origin.CGFloat y = y;
      v36.size.CGFloat width = width;
      v36.size.CGFloat height = height;
      CGRect v31 = CGRectStandardize(v36);
      v33.CGFloat width = v16;
      v33.CGFloat height = v17;
      CG::Path::append_rounded_rect((uint64_t)Instance + 16, &v31, v33, transform);
    }
    return Instance;
  }
  CGFloat v27 = x;
  CGFloat v28 = y;
  CGFloat v29 = width;
  CGFloat v30 = height;

  return CGPathCreateWithRect(*(CGRect *)&v27, transform);
}

uint64_t CG::Path::append_rounded_rect(uint64_t this, const CGRect *a2, CGSize a3, const CGAffineTransform *a4)
{
  uint64_t v6 = (int *)this;
  if (*(_DWORD *)this)
  {
    double height = a3.height;
    double width = a3.width;
    CG::Path::reserve_space((CG::Path *)this, 0x12uLL, 0xAuLL);
    double v8 = height;
    CGFloat x = a2->origin.x;
    CGFloat y = a2->origin.y;
    v61.c = 0.0;
    v61.d = 1.0;
    v61.tCGFloat x = x;
    v61.tCGFloat y = y;
    float64x2_t v11 = vmulq_n_f64((float64x2_t)0x3FF0000000000000uLL, width);
    float64x2_t v12 = vmulq_n_f64(*(float64x2_t *)&v61.c, height);
    *(float64x2_t *)&v61.a = v11;
    *(float64x2_t *)&v61.c = v12;
    if (a4)
    {
      _D2 = v61.tx;
      _Q6 = *(_OWORD *)&a4->a;
      float64x2_t v15 = *(float64x2_t *)&a4->c;
      float64x2_t v16 = vmlaq_n_f64(vmulq_laneq_f64(v15, v11, 1), *(float64x2_t *)&a4->a, v11.f64[0]);
      CGFloat v17 = a4->tx + vmlad_n_f64(v61.ty * v15.f64[0], v61.tx, a4->a);
      __asm { FMLA            D3, D2, V6.D[1] }
      CGFloat v23 = _D3 + a4->ty;
      float64x2_t v24 = vmlaq_n_f64(vmulq_laneq_f64(v15, v12, 1), *(float64x2_t *)&a4->a, v12.f64[0]);
      *(float64x2_t *)&v61.a = v16;
      *(float64x2_t *)&v61.c = v24;
      v61.tCGFloat x = v17;
      v61.tCGFloat y = v23;
    }
    double v26 = a2->size.width;
    double v25 = a2->size.height;
    if (v26 < 0.0 || v25 < 0.0)
    {
      v62.origin.CGFloat x = x;
      v62.origin.CGFloat y = y;
      v62.size.double width = a2->size.width;
      v62.size.double height = a2->size.height;
      CGRect v63 = CGRectStandardize(v62);
      double v58 = v63.size.width / width;
      v63.origin.CGFloat x = x;
      v63.origin.CGFloat y = y;
      v63.size.double width = v26;
      v63.size.double height = v25;
      CGRect v64 = CGRectStandardize(v63);
      double v8 = height;
      double v25 = v64.size.height;
    }
    else
    {
      double v58 = v26 / width;
    }
    CGFloat v37 = v25 / v8;
    CGFloat v56 = v25 / v8 * 0.5;
    v38.n128_f64[0] = v58;
    v38.n128_f64[1] = v56;
    CG::Path::move_to_point(v6, (float64x2_t *)&v61, v7, v38);
    v60.CGFloat x = v58;
    v60.CGFloat y = v37;
    v59.CGFloat x = v58 * 0.5;
    v59.CGFloat y = v37;
    CG::Path::add_arc_to_point((CG::Path *)v6, &v60, &v59, 1.0, &v61, v39, v40, v41, v42);
    v60.CGFloat x = 0.0;
    v60.CGFloat y = v37;
    v59.CGFloat x = 0.0;
    v59.CGFloat y = v56;
    CG::Path::add_arc_to_point((CG::Path *)v6, &v60, &v59, 1.0, &v61, v43, v44, v45, v46);
    v60.CGFloat x = 0.0;
    v60.CGFloat y = 0.0;
    v59.CGFloat x = v58 * 0.5;
    v59.CGFloat y = 0.0;
    CG::Path::add_arc_to_point((CG::Path *)v6, &v60, &v59, 1.0, &v61, v47, v48, v49, v50);
    v60.CGFloat x = v58;
    v60.CGFloat y = 0.0;
    v59.CGFloat x = v58;
    v59.CGFloat y = v56;
    CG::Path::add_arc_to_point((CG::Path *)v6, &v60, &v59, 1.0, &v61, v51, v52, v53, v54);
    return CG::Path::close_subpath((uint64_t)v6);
  }
  else
  {
    CGPoint origin = a2->origin;
    _D4 = a2->size.width;
    _D2 = a2->size.height;
    double v30 = a3.width / _D4;
    *(_DWORD *)this = 2;
    double v31 = a3.height / _D2;
    if (a4)
    {
      _Q7 = *(_OWORD *)&a4->a;
      float64x2_t v33 = *(float64x2_t *)&a4->c;
      _D18 = 0;
      __asm { FMLA            D6, D4, V7.D[1] }
      double v36 = vmlad_n_f64(_D2 * v33.f64[0], 0.0, a4->a);
      __asm { FMLA            D2, D18, V7.D[1] }
      CGPoint origin = (CGPoint)vaddq_f64(*(float64x2_t *)&a4->tx, vmlaq_n_f64(vmulq_laneq_f64(v33, (float64x2_t)origin, 1), *(float64x2_t *)&a4->a, origin.x));
      _D4 = vmlad_n_f64(0.0 * v33.f64[0], _D4, a4->a);
    }
    else
    {
      double v36 = 0.0;
      _D6 = 0;
    }
    *(double *)(this + 8) = _D4;
    *(void *)(this + 16) = _D6;
    *(double *)(this + 24) = v36;
    *(double *)(this + 32) = _D2;
    *(CGPoint *)(this + 40) = origin;
    *(double *)(this + 56) = v30;
    *(double *)(this + 64) = v31;
  }
  return this;
}

void ClipperLib::ClipperBase::Reset(ClipperLib::ClipperBase *this)
{
  unint64_t v2 = *((void *)this + 2);
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 1) = v2;
  if (v2 != v3)
  {
    std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(v2, v3, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v2) >> 3)), 1);
    CFTypeID v4 = (void *)*((void *)this + 14);
    if (v4)
    {
      *((void *)this + 15) = v4;
      operator delete(v4);
    }
    *((void *)this + 14) = 0;
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    uint64_t v5 = (uint64_t *)*((void *)this + 2);
    if (v5 != *((uint64_t **)this + 3))
    {
      do
      {
        std::priority_queue<long long>::push((uint64_t)this + 112, *v5);
        uint64_t v6 = v5[1];
        if (v6)
        {
          long long v7 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)(v6 + 48) = *(_OWORD *)v6;
          *(_OWORD *)(v6 + 64) = v7;
          *(_OWORD *)(v6 + 80) = *(_OWORD *)(v6 + 32);
          *(_DWORD *)(v6 + 156) = 1;
          *(_DWORD *)(v6 + 172) = -1;
        }
        uint64_t v8 = v5[2];
        if (v8)
        {
          long long v9 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)(v8 + 48) = *(_OWORD *)v8;
          *(_OWORD *)(v8 + 64) = v9;
          *(_OWORD *)(v8 + 80) = *(_OWORD *)(v8 + 32);
          *(_DWORD *)(v8 + 156) = 2;
          *(_DWORD *)(v8 + 172) = -1;
        }
        v5 += 3;
      }
      while (v5 != *((uint64_t **)this + 3));
      uint64_t v5 = (uint64_t *)*((void *)this + 2);
    }
    *((void *)this + 13) = 0;
    *((void *)this + 1) = v5;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (long long *)(a2 - 24);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(void *)v11 < *(void *)v10)
                {
                  uint64_t v105 = *(void *)(v11 + 16);
                  long long v97 = *(_OWORD *)v11;
                  long long v45 = *v10;
                  *(void *)(v11 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v11 = v45;
                  *(void *)(a2 - 8) = v105;
                  *uint64_t v10 = v97;
                }
                return;
              case 3uLL:
                std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)v11, (uint64_t *)(v11 + 24), (uint64_t *)(a2 - 24));
                return;
              case 4uLL:
                std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(v11, (uint64_t *)(v11 + 24), (uint64_t *)(v11 + 48), a2 - 24);
                return;
              case 5uLL:
                std::__sort5[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__n128 *)v11, (uint64_t *)(v11 + 24), (uint64_t *)(v11 + 48), (__n128 *)(v11 + 72), (__n128 *)(a2 - 24));
                return;
              default:
                goto LABEL_135;
            }
          }
          if (v12 <= 575)
          {
            uint64_t v46 = (void *)(v11 + 24);
            BOOL v48 = v11 == a2 || v46 == (void *)a2;
            if (a4)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                unint64_t v50 = v11;
                do
                {
                  uint64_t v51 = v46;
                  uint64_t v52 = *v46;
                  if (*(void *)v50 < v52)
                  {
                    long long v98 = *(_OWORD *)(v50 + 32);
                    uint64_t v53 = v49;
                    while (1)
                    {
                      uint64_t v54 = v11 + v53;
                      *(_OWORD *)(v54 + 24) = *(_OWORD *)(v11 + v53);
                      *(void *)(v54 + 40) = *(void *)(v11 + v53 + 16);
                      if (!v53) {
                        break;
                      }
                      v53 -= 24;
                      if (*(void *)(v54 - 24) >= v52)
                      {
                        uint64_t v55 = v11 + v53 + 24;
                        goto LABEL_86;
                      }
                    }
                    uint64_t v55 = v11;
LABEL_86:
                    *(void *)uint64_t v55 = v52;
                    *(_OWORD *)(v55 + 8) = v98;
                  }
                  uint64_t v46 = v51 + 3;
                  v49 += 24;
                  unint64_t v50 = (unint64_t)v51;
                }
                while (v51 + 3 != (void *)a2);
              }
            }
            else if (!v48)
            {
              uint64_t v83 = -2;
              uint64_t v84 = 1;
              unint64_t v85 = v11;
              do
              {
                uint64_t v86 = *v46;
                if (*(void *)v85 < *v46)
                {
                  long long v101 = *(_OWORD *)(v85 + 32);
                  uint64_t v87 = v83;
                  v88 = v46;
                  do
                  {
                    *(_OWORD *)v88 = *(_OWORD *)(v88 - 3);
                    v88[2] = *(v88 - 1);
                    BOOL v4 = __CFADD__(v87++, 1);
                    if (v4) {
                      goto LABEL_134;
                    }
                    v89 = v88 - 3;
                    uint64_t v90 = *(v88 - 6);
                    v88 -= 3;
                  }
                  while (v90 < v86);
                  void *v89 = v86;
                  *(_OWORD *)(v89 + 1) = v101;
                }
                unint64_t v85 = v11 + 24 * v84++;
                v46 += 3;
                --v83;
              }
              while (v46 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v56 = (v13 - 2) >> 1;
              int64_t v57 = v56;
              do
              {
                int64_t v58 = v57;
                if (v56 >= v57)
                {
                  uint64_t v59 = (2 * v57) | 1;
                  CGPoint v60 = (void *)(v11 + 24 * v59);
                  if (2 * v58 + 2 < (uint64_t)v13)
                  {
                    uint64_t v61 = v60[3];
                    if (v61 < *v60)
                    {
                      v60 += 3;
                      uint64_t v59 = 2 * v58 + 2;
                    }
                    else
                    {
                      uint64_t v61 = *v60;
                    }
                  }
                  else
                  {
                    uint64_t v61 = *v60;
                  }
                  CGRect v62 = (void *)(v11 + 24 * v58);
                  uint64_t v63 = *v62;
                  if (*v62 >= v61)
                  {
                    long long v99 = *(_OWORD *)(v62 + 1);
                    do
                    {
                      CGRect v64 = v62;
                      CGRect v62 = v60;
                      long long v65 = *(_OWORD *)v60;
                      v64[2] = v60[2];
                      *(_OWORD *)CGRect v64 = v65;
                      if (v56 < v59) {
                        break;
                      }
                      uint64_t v66 = (2 * v59) | 1;
                      CGPoint v60 = (void *)(v11 + 24 * v66);
                      uint64_t v59 = 2 * v59 + 2;
                      if (v59 < (uint64_t)v13)
                      {
                        uint64_t v67 = v60[3];
                        if (v67 < *v60)
                        {
                          v60 += 3;
                        }
                        else
                        {
                          uint64_t v67 = *v60;
                          uint64_t v59 = v66;
                        }
                      }
                      else
                      {
                        uint64_t v67 = *v60;
                        uint64_t v59 = v66;
                      }
                    }
                    while (v63 >= v67);
                    *CGRect v62 = v63;
                    *(_OWORD *)(v62 + 1) = v99;
                  }
                }
                int64_t v57 = v58 - 1;
              }
              while (v58);
              int64_t v68 = v12 / 0x18uLL;
              do
              {
                uint64_t v69 = 0;
                uint64_t v106 = *(void *)(v11 + 16);
                long long v100 = *(_OWORD *)v11;
                unint64_t v70 = v11;
                do
                {
                  uint64_t v71 = v70 + 24 * v69 + 24;
                  uint64_t v72 = (2 * v69) | 1;
                  uint64_t v73 = 2 * v69 + 2;
                  if (v73 < v68 && *(void *)(v71 + 24) < *(void *)v71)
                  {
                    v71 += 24;
                    uint64_t v72 = v73;
                  }
                  long long v74 = *(_OWORD *)v71;
                  *(void *)(v70 + 16) = *(void *)(v71 + 16);
                  *(_OWORD *)unint64_t v70 = v74;
                  unint64_t v70 = v71;
                  uint64_t v69 = v72;
                }
                while (v72 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                a2 -= 24;
                if (v71 == a2)
                {
                  *(void *)(v71 + 16) = v106;
                  *(_OWORD *)uint64_t v71 = v100;
                }
                else
                {
                  long long v75 = *(_OWORD *)a2;
                  *(void *)(v71 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)uint64_t v71 = v75;
                  *(void *)(a2 + 16) = v106;
                  *(_OWORD *)a2 = v100;
                  uint64_t v76 = v71 - v11 + 24;
                  if (v76 >= 25)
                  {
                    unint64_t v77 = (unint64_t)(-2 - 0x5555555555555555 * (v76 >> 3)) >> 1;
                    uint64_t v78 = v11 + 24 * v77;
                    uint64_t v79 = *(void *)v71;
                    if (*(void *)v71 < *(void *)v78)
                    {
                      long long v93 = *(_OWORD *)(v71 + 8);
                      do
                      {
                        uint64_t v80 = v71;
                        uint64_t v71 = v78;
                        long long v81 = *(_OWORD *)v78;
                        *(void *)(v80 + 16) = *(void *)(v78 + 16);
                        *(_OWORD *)uint64_t v80 = v81;
                        if (!v77) {
                          break;
                        }
                        unint64_t v77 = (v77 - 1) >> 1;
                        uint64_t v78 = v11 + 24 * v77;
                      }
                      while (v79 < *(void *)v78);
                      *(void *)uint64_t v71 = v79;
                      *(_OWORD *)(v71 + 8) = v93;
                    }
                  }
                }
              }
              while (v68-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          float64x2_t v15 = (uint64_t *)(v11 + 24 * (v13 >> 1));
          if ((unint64_t)v12 >= 0xC01)
          {
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)a1, (uint64_t *)(a1 + 24 * (v13 >> 1)), (uint64_t *)(a2 - 24));
            uint64_t v16 = 3 * v14;
            CGFloat v17 = (uint64_t *)(a1 + 24 * v14 - 24);
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)(a1 + 24), v17, (uint64_t *)(a2 - 48));
            uint64_t v18 = (uint64_t *)(a1 + 24 + 8 * v16);
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)(a1 + 48), v18, (uint64_t *)(a2 - 72));
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)v17, v15, v18);
            uint64_t v102 = *(void *)(a1 + 16);
            long long v94 = *(_OWORD *)a1;
            uint64_t v19 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v19;
            v15[2] = v102;
            *(_OWORD *)float64x2_t v15 = v94;
          }
          else
          {
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)(a1 + 24 * (v13 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
          }
          --a3;
          uint64_t v20 = *(void *)a1;
          if ((a4 & 1) != 0 || v20 < *(void *)(a1 - 24)) {
            break;
          }
          long long v92 = *(_OWORD *)(a1 + 8);
          if (*(void *)v10 >= v20)
          {
            unint64_t v37 = a1 + 24;
            do
            {
              unint64_t v11 = v37;
              if (v37 >= a2) {
                break;
              }
              v37 += 24;
            }
            while (*(void *)v11 >= v20);
          }
          else
          {
            CGRect v35 = (uint64_t *)(a1 + 24);
            do
            {
              if (v35 == (uint64_t *)a2) {
                goto LABEL_134;
              }
              uint64_t v36 = *v35;
              v35 += 3;
            }
            while (v36 >= v20);
            unint64_t v11 = (unint64_t)(v35 - 3);
          }
          unint64_t v38 = a2;
          if (v11 < a2)
          {
            unint64_t v38 = a2;
            while (v38 != a1)
            {
              uint64_t v39 = *(void *)(v38 - 24);
              v38 -= 24;
              if (v39 >= v20) {
                goto LABEL_53;
              }
            }
LABEL_134:
            __break(1u);
LABEL_135:
            JUMPOUT(0);
          }
LABEL_53:
          if (v11 < v38)
          {
            uint64_t v104 = *(void *)(v11 + 16);
            long long v96 = *(_OWORD *)v11;
            long long v40 = *(_OWORD *)v38;
            *(void *)(v11 + 16) = *(void *)(v38 + 16);
            *(_OWORD *)unint64_t v11 = v40;
            *(void *)(v38 + 16) = v104;
            *(_OWORD *)unint64_t v38 = v96;
            uint64_t v41 = (uint64_t *)(v11 + 24);
            do
            {
              if (v41 == (uint64_t *)a2) {
                goto LABEL_134;
              }
              unint64_t v11 = (unint64_t)v41;
              uint64_t v42 = *v41;
              v41 += 3;
            }
            while (v42 >= v20);
            while (v38 != a1)
            {
              uint64_t v43 = *(void *)(v38 - 24);
              v38 -= 24;
              if (v43 >= v20) {
                goto LABEL_53;
              }
            }
            goto LABEL_134;
          }
          BOOL v4 = v11 - 24 >= a1;
          BOOL v5 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            long long v44 = *(_OWORD *)(v11 - 24);
            *(void *)(a1 + 16) = *(void *)(v11 - 8);
            *(_OWORD *)a1 = v44;
          }
          a4 = 0;
          *(void *)(v11 - 24) = v20;
          *(_OWORD *)(v11 - 16) = v92;
        }
        long long v91 = *(_OWORD *)(a1 + 8);
        uint64_t v21 = (void *)(a1 + 24);
        do
        {
          if (v21 == (void *)a2) {
            goto LABEL_134;
          }
          uint64_t v22 = v21;
          CGFloat v23 = v21 - 3;
          uint64_t v24 = *v21;
          v21 += 3;
        }
        while (v20 < v24);
        unint64_t v25 = a2;
        if (v23 != (void *)a1)
        {
          while (v25 != a1)
          {
            uint64_t v26 = *(void *)(v25 - 24);
            v25 -= 24;
            if (v20 < v26) {
              goto LABEL_21;
            }
          }
          goto LABEL_134;
        }
        unint64_t v25 = a2;
        do
        {
          if ((unint64_t)v22 >= v25) {
            break;
          }
          uint64_t v27 = *(void *)(v25 - 24);
          v25 -= 24;
        }
        while (v20 >= v27);
LABEL_21:
        unint64_t v11 = (unint64_t)v22;
        if ((unint64_t)v22 < v25)
        {
          unint64_t v28 = v25;
          do
          {
            uint64_t v103 = *(void *)(v11 + 16);
            long long v95 = *(_OWORD *)v11;
            long long v29 = *(_OWORD *)v28;
            *(void *)(v11 + 16) = *(void *)(v28 + 16);
            *(_OWORD *)unint64_t v11 = v29;
            *(void *)(v28 + 16) = v103;
            *(_OWORD *)unint64_t v28 = v95;
            double v30 = (uint64_t *)(v11 + 24);
            do
            {
              if (v30 == (uint64_t *)a2) {
                goto LABEL_134;
              }
              unint64_t v11 = (unint64_t)v30;
              uint64_t v31 = *v30;
              v30 += 3;
            }
            while (v20 < v31);
            do
            {
              if (v28 == a1) {
                goto LABEL_134;
              }
              uint64_t v32 = *(void *)(v28 - 24);
              v28 -= 24;
            }
            while (v20 >= v32);
          }
          while (v11 < v28);
        }
        if (v11 - 24 != a1)
        {
          long long v33 = *(_OWORD *)(v11 - 24);
          *(void *)(a1 + 16) = *(void *)(v11 - 8);
          *(_OWORD *)a1 = v33;
        }
        *(void *)(v11 - 24) = v20;
        *(_OWORD *)(v11 - 16) = v91;
        if ((unint64_t)v22 >= v25) {
          break;
        }
LABEL_34:
        std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(a1, v11 - 24);
      if (std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(v11, a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v11 - 24;
    if (!v34) {
      continue;
    }
    break;
  }
}

const UInt8 *CGGradientApplyWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    uint64_t v5 = *(void *)(*(void *)(v4 + 24) + 48) + 2;
  }
  else {
    uint64_t v5 = 2;
  }
  CFDictionaryRef result = CFDataGetBytePtr(*(CFDataRef *)(a1 + 40));
  if (*(void *)(a1 + 48))
  {
    unint64_t v7 = 0;
    uint64_t v8 = result + 8;
    uint64_t v9 = 8 * v5;
    do
    {
      CFDictionaryRef result = (const UInt8 *)(*(uint64_t (**)(uint64_t, const UInt8 *, double))(a2 + 16))(a2, v8, *((double *)v8 - 1));
      ++v7;
      v8 += v9;
    }
    while (v7 < *(void *)(a1 + 48));
  }
  return result;
}

CFDictionaryRef __img_blocks_options_block_invoke()
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"kCGImageBlockFormatRequest";
  keys[1] = @"kCGImageBlockSingletonRequest";
  uint64_t v0 = (void *)*MEMORY[0x1E4F1CFD0];
  values[0] = @"kCGImageBlockFormatBGRx8";
  values[1] = v0;
  CFDictionaryRef result = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  img_blocks_options_options_singleton = (uint64_t)result;
  return result;
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  components[0] = red;
  components[1] = green;
  CGFloat v15 = blue;
  CGFloat v16 = alpha;
  uint64_t v4 = CGColorSpaceCreateWithName(@"kCGColorSpaceGenericRGB");
  uint64_t v5 = CGColorCreate(v4, components);
  CGColorSpaceRelease(v4);
  if (!v5) {
    CGPostError((uint64_t)"Color creation failed for RGB colorspace %p, {%f, %f, %f %f}", v6, v7, v8, v9, v10, v11, v12, (char)v4);
  }
  return v5;
}

void __CGCMSUtilsCreateLinearGrayProfile_block_invoke()
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  uint64_t v13 = 0x1000107E0;
  uint64_t valuePtr = 0x3F8000003F76D5D0;
  int v25 = 1062415525;
  int v12 = 1065353216;
  *(_OWORD *)keys = xmmword_1E52A09B0;
  long long v22 = *(_OWORD *)&off_1E52A09C0;
  long long v23 = xmmword_1E52A09D0;
  CFNumberRef v18 = 0;
  CFNumberRef v19 = 0;
  CFNumberRef v20 = 0;
  values = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloatType, (char *)&valuePtr + 4);
  CFNumberRef v17 = CFNumberCreate(0, kCFNumberFloatType, &v25);
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 3, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != 24; i += 8)
  {
    unint64_t v3 = *(void **)((char *)&values + i);
    if (v3) {
      CFRelease(v3);
    }
  }
  values = CFNumberCreate(0, kCFNumberSInt16Type, &v13);
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberSInt16Type, (char *)&v13 + 2);
  CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt16Type, (char *)&v13 + 4);
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt16Type, (char *)&v13 + 6);
  CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt16Type, &v14);
  CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt16Type, (char *)&v14 + 2);
  CFArrayRef v4 = CFArrayCreate(v0, (const void **)&values, 6, MEMORY[0x1E4F1D510]);
  for (uint64_t j = 0; j != 48; j += 8)
  {
    uint64_t v6 = *(void **)((char *)&values + j);
    if (v6) {
      CFRelease(v6);
    }
  }
  values = v1;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloatType, &v12);
  CFNumberRef v17 = (CFNumberRef)@"Linear Gray";
  CFNumberRef v18 = (CFNumberRef)@"calGray";
  CFNumberRef v19 = v4;
  CFNumberRef v20 = (CFNumberRef)*MEMORY[0x1E4F1CFD0];
  CFDictionaryRef v7 = CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v8 = 0;
  char v9 = 1;
  do
  {
    char v10 = v9;
    uint64_t v11 = *(&values + v8);
    if (v11) {
      CFRelease(v11);
    }
    char v9 = 0;
    uint64_t v8 = 1;
  }
  while ((v10 & 1) != 0);
  if (v4) {
    CFRelease(v4);
  }
  if (_block_invoke_3_cglibrarypredicate != -1) {
    dispatch_once(&_block_invoke_3_cglibrarypredicate, &__block_literal_global_256);
  }
  CGCMSUtilsCreateLinearGrayProfile_linear_profile = _block_invoke_3_f(v7);
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t dlRecorder_DrawLinearGradient(uint64_t a1, uint64_t a2, uint64_t a3, CGGradient *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  if (a1 && (int v12 = *(CFArrayRef **)(a1 + 288)) != 0)
  {
    int v14 = 0;
    double v15 = a9;
    double v16 = a10;
    double v17 = a11;
    double v18 = a12;
    return CG::DisplayListRecorder::DrawGradient(v12, a2, a3, a4, a5, &v14);
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_DrawLinearGradient");
    return 1000;
  }
}

uint64_t CG::DisplayListRecorder::DrawGradient(CFArrayRef *a1, uint64_t a2, uint64_t a3, CGGradient *a4, uint64_t a5, int *a6)
{
  char v10 = (double *)CG::DisplayListRecorder::currentDisplayList(a1);
  if (!v10) {
    return 1000;
  }
  uint64_t v11 = v10;
  if (v10[5] == INFINITY || v10[6] == INFINITY) {
    return 0;
  }
  uint64_t result = 0;
  if (v11[7] != 0.0 && v11[8] != 0.0)
  {
    long long v14 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)&v39.a = *(_OWORD *)(a3 + 24);
    *(_OWORD *)&v39.c = v14;
    *(_OWORD *)&v39.tCGFloat x = *(_OWORD *)(a3 + 56);
    if (!*((unsigned char *)v11 + 73)) {
      goto LABEL_17;
    }
    CGRect v38 = CGRectInfinite;
    CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&v38.origin.x, a2, *(double **)(a3 + 112), *(void *)(*(void *)(a3 + 120) + 16));
    v38.origin.CGFloat x = v18;
    v38.origin.CGFloat y = v15;
    v38.size.double width = v16;
    v38.size.double height = v17;
    if (v18 == INFINITY || v15 == INFINITY) {
      return 0;
    }
    uint64_t result = 0;
    if (v16 != 0.0 && v17 != 0.0)
    {
LABEL_17:
      uint64_t v20 = CG::DisplayList::gradientResourceForGradient((CG::DisplayList *)(v11 + 2), a4);
      if (v20)
      {
        uint64_t v21 = v20;
        EntryDrawingState = (void *)CG::DisplayList::getEntryDrawingState((uint64_t)(v11 + 2), (void *)a3, a2);
        uint64_t v30 = EntryDrawingState[1];
        if (v30)
        {
          int v31 = *(_DWORD *)(v30 + 8);
          uint64_t v32 = EntryDrawingState[2];
          if (v32) {
            v31 |= *(_DWORD *)(v32 + 8);
          }
          int v33 = v31 & 0x1000;
          uint64_t v34 = EntryDrawingState[3];
          if (v34) {
            v33 |= *(_DWORD *)(v34 + 8) & 0x3400;
          }
          uint64_t v35 = *(void *)(a3 + 120);
          if (*(double *)(v35 + 8) >= 1.0) {
            int v36 = *(_DWORD *)(v21 + 8) & 0x1000 | v33;
          }
          else {
            LOWORD(v36) = v33 | 0x1000;
          }
          if ((v36 & 0x1000) == 0 && (((int)(*(_DWORD *)(v35 + 4) << 16) >> 24) - 3) < 0xFFFFFFFE) {
            LOWORD(v36) = v36 | 0x1000;
          }
          if ((v36 & 0x3000) != 0) {
            *((_DWORD *)v11 + 20) |= v36 & 0x3000;
          }
          if (*((unsigned char *)v11 + 74))
          {
            if ((v36 & 0x400) != 0) {
              CG::DisplayList::getEntryPatternState((uint64_t)(v11 + 2), a3, a2);
            }
            int v37 = *a6;
            if (*a6 == 2) {
              operator new();
            }
            if (v37 == 1) {
              operator new();
            }
            if (!v37) {
              operator new();
            }
            CGPostError((uint64_t)"Invalid GradientType argument", v23, v24, v25, v26, v27, v28, v29, SLOBYTE(v38.origin.x));
            return 1000;
          }
          return 0;
        }
      }
      return 1000;
    }
  }
  return result;
}

__n128 CG::DisplayListEntryGradient::DisplayListEntryGradient(CG::DisplayListEntryGradient *this, int a2, const CGRect *a3, const CG::DisplayListEntryStateDrawing *a4, const CG::DisplayListEntryStatePattern *a5, const CG::DisplayListResourceGradient *a6, const CGAffineTransform *a7, CGPoint a8, CGPoint a9, int a10)
{
  *(void *)this = &unk_1ED08DB58;
  *((_DWORD *)this + 2) = (a2 << 8) | 6;
  CGSize size = a3->size;
  *((_OWORD *)this + 1) = a3->origin;
  *((CGSize *)this + 2) = size;
  *((void *)this + 6) = a4;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = a5;
  *(void *)this = &unk_1ED094B48;
  *((void *)this + 10) = a6;
  long long v11 = *(_OWORD *)&a7->a;
  long long v12 = *(_OWORD *)&a7->c;
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)&a7->tx;
  *(_OWORD *)((char *)this + 104) = v12;
  *(_OWORD *)((char *)this + 88) = v11;
  *((_DWORD *)this + 34) = 1;
  *((_DWORD *)this + 35) = a10;
  *((CGPoint *)this + 9) = a8;
  *((CGPoint *)this + 10) = a9;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *((__n128 *)this + 13) = result;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  return result;
}

uint64_t CG::DisplayList::gradientResourceForGradient(CG::DisplayList *this, CGGradient *a2)
{
  if (!a2) {
    return 0;
  }
  ++*((void *)this + 89);
  unint64_t v3 = (char *)this + 304;
  CFArrayRef v4 = (char *)*((void *)this + 38);
  if (!v4) {
    goto LABEL_15;
  }
  uint64_t v5 = (char *)this + 304;
  do
  {
    uint64_t v7 = *((void *)v4 + 4);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v8 = *(void *)(v7 + 16);
      std::__shared_weak_count::__release_shared[abi:fe180100](v6);
    }
    else
    {
      unint64_t v8 = *(void *)(v7 + 16);
    }
    char v9 = (char **)(v4 + 8);
    if (v8 >= (unint64_t)a2)
    {
      char v9 = (char **)v4;
      uint64_t v5 = v4;
    }
    CFArrayRef v4 = *v9;
  }
  while (*v9);
  if (v3 == v5) {
    goto LABEL_15;
  }
  uint64_t v10 = *((void *)v5 + 4);
  long long v11 = (std::__shared_weak_count *)*((void *)v5 + 5);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (*(void *)(v10 + 16) < (unint64_t)a2)
    {
      std::__shared_weak_count::__release_shared[abi:fe180100](v11);
      goto LABEL_15;
    }
    uint64_t v14 = *((void *)v5 + 4);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v5 + 5);
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v15 = *(void *)(v14 + 16);
      std::__shared_weak_count::__release_shared[abi:fe180100](v13);
    }
    else
    {
      unint64_t v15 = *(void *)(v14 + 16);
    }
    std::__shared_weak_count::__release_shared[abi:fe180100](v11);
    if (v15 <= (unint64_t)a2) {
      return *((void *)v5 + 4);
    }
LABEL_15:
    operator new();
  }
  if (*(CGGradient **)(v10 + 16) != a2) {
    goto LABEL_15;
  }
  return *((void *)v5 + 4);
}

void sub_184CC3E4C(_Unwind_Exception *a1)
{
  MEMORY[0x18532A2A0](v1, 0x10E1C40E3985EEBLL);
  _Unwind_Resume(a1);
}

void __CGCMSUtilsCreateDataForGenericHDR_block_invoke()
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v28 = xmmword_1E52A06A8;
  long long v29 = *(_OWORD *)&off_1E52A06B8;
  long long v30 = xmmword_1E52A06C8;
  *(_OWORD *)keys = xmmword_1E52A0688;
  long long v27 = *(_OWORD *)&off_1E52A0698;
  uint64_t v25 = 0;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  CFNumberRef v19 = CFNumberCreate(0, kCFNumberFloatType, &qword_18519F578);
  CFNumberRef v20 = CFNumberCreate(0, kCFNumberFloatType, (char *)&qword_18519F578 + 4);
  CFNumberRef v21 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F580);
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&v19, 3, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != 24; i += 8)
  {
    unint64_t v3 = *(CFNumberRef *)((char *)&v19 + i);
    if (v3) {
      CFRelease(v3);
    }
  }
  CFNumberRef v19 = CFNumberCreate(0, kCFNumberFloatType, &_block_invoke_hdr);
  CFNumberRef v20 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F504);
  CFNumberRef v21 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F508);
  CFArrayRef v4 = CFArrayCreate(v0, (const void **)&v19, 3, MEMORY[0x1E4F1D510]);
  for (uint64_t j = 0; j != 24; j += 8)
  {
    uint64_t v6 = *(CFNumberRef *)((char *)&v19 + j);
    if (v6) {
      CFRelease(v6);
    }
  }
  CFNumberRef v19 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F50C);
  CFNumberRef v20 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F510);
  CFNumberRef v21 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F514);
  CFArrayRef v7 = CFArrayCreate(v0, (const void **)&v19, 3, MEMORY[0x1E4F1D510]);
  for (uint64_t k = 0; k != 24; k += 8)
  {
    char v9 = *(CFNumberRef *)((char *)&v19 + k);
    if (v9) {
      CFRelease(v9);
    }
  }
  CFNumberRef v19 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F518);
  CFNumberRef v20 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F51C);
  CFNumberRef v21 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F520);
  CFArrayRef v10 = CFArrayCreate(v0, (const void **)&v19, 3, MEMORY[0x1E4F1D510]);
  for (uint64_t m = 0; m != 24; m += 8)
  {
    long long v12 = *(CFNumberRef *)((char *)&v19 + m);
    if (v12) {
      CFRelease(v12);
    }
  }
  CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt16Type, &_block_invoke_iccDate);
  CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F4F6);
  CFNumberRef v21 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F4F8);
  *(void *)&long long v22 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F4FA);
  *((void *)&v22 + 1) = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F4FC);
  *(void *)&long long v23 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F4FE);
  CFArrayRef v13 = CFArrayCreate(v0, (const void **)&v19, 6, MEMORY[0x1E4F1D510]);
  for (uint64_t n = 0; n != 48; n += 8)
  {
    unint64_t v15 = *(CFNumberRef *)((char *)&v19 + n);
    if (v15) {
      CFRelease(v15);
    }
  }
  CFNumberRef v19 = v1;
  CFNumberRef v20 = v4;
  CFNumberRef v21 = v7;
  *(void *)&long long v22 = v10;
  *((void *)&v22 + 1) = CFNumberCreate(0, kCFNumberFloatType, &_block_invoke_gamma);
  *(void *)&long long v23 = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F4EC);
  *((void *)&v23 + 1) = CFNumberCreate(0, kCFNumberFloatType, &unk_18519F4F0);
  *(void *)&long long v24 = v13;
  *((void *)&v24 + 1) = @"Generic HDR Profile";
  uint64_t v25 = @"calRGB";
  CFDictionaryRef v16 = CFDictionaryCreate(v0, (const void **)keys, (const void **)&v19, 10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v17 = 0;
  CGCMSUtilsCreateDataForGenericHDR_profileSpec = (uint64_t)v16;
  do
  {
    double v18 = *(CFNumberRef *)((char *)&v19 + v17);
    if (v18) {
      CFRelease(v18);
    }
    v17 += 8;
  }
  while (v17 != 64);
}

void __CGCMSUtilsCreateLinearDisplayP3Profile_block_invoke()
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (_block_invoke_4_cglibrarypredicate != -1) {
    dispatch_once(&_block_invoke_4_cglibrarypredicate, &__block_literal_global_262);
  }
  CFAllocatorRef v0 = (uint64_t (*)(uint64_t))_block_invoke_4_f;
  if (_block_invoke_4_cglibrarypredicate_263 != -1) {
    dispatch_once(&_block_invoke_4_cglibrarypredicate_263, &__block_literal_global_266);
  }
  uint64_t v1 = v0(_block_invoke_4_s);
  if (v1)
  {
    unint64_t v2 = (const void *)v1;
    uint64_t v31 = 0x3FE5C28F5C28F5C3;
    uint64_t v30 = 0x3FD47AE147AE147BLL;
    uint64_t v29 = 0x3FD0F5C28F5C28F6;
    uint64_t v28 = 0x3FE6147AE147AE14;
    uint64_t v27 = 0x3FC3333333333333;
    uint64_t v26 = 0x3FAEB851EB851EB8;
    uint64_t v25 = 0x3FD40346DC5D6388;
    uint64_t v24 = 0x3FD50E5604189375;
    keys[10] = xmmword_1E52A0BE0;
    keys[11] = *(_OWORD *)off_1E52A0BF0;
    CGRect v62 = @"createImmutableCopy";
    keys[6] = xmmword_1E52A0BA0;
    keys[7] = *(_OWORD *)&off_1E52A0BB0;
    keys[8] = xmmword_1E52A0BC0;
    keys[9] = *(_OWORD *)&off_1E52A0BD0;
    keys[2] = xmmword_1E52A0B60;
    keys[3] = *(_OWORD *)&off_1E52A0B70;
    keys[4] = xmmword_1E52A0B80;
    keys[5] = *(_OWORD *)&off_1E52A0B90;
    keys[0] = xmmword_1E52A0B40;
    keys[1] = *(_OWORD *)&off_1E52A0B50;
    __int16 valuePtr = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0x3FF0000000000000;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    values[0] = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
    values[1] = CFNumberCreate(0, kCFNumberDoubleType, &v22);
    values[2] = CFNumberCreate(0, kCFNumberDoubleType, &v21);
    values[3] = CFNumberCreate(0, kCFNumberDoubleType, &v20);
    values[4] = CFNumberCreate(0, kCFNumberDoubleType, &v19);
    values[5] = CFNumberCreate(0, kCFNumberDoubleType, &v18);
    values[6] = CFNumberCreate(0, kCFNumberDoubleType, &v17);
    values[7] = CFNumberCreate(0, kCFNumberDoubleType, &v16);
    CFArrayRef v3 = CFArrayCreate(0, (const void **)values, 8, MEMORY[0x1E4F1D510]);
    if (_block_invoke_4_cglibrarypredicate_270 != -1) {
      dispatch_once(&_block_invoke_4_cglibrarypredicate_270, &__block_literal_global_273);
    }
    CFArrayRef v4 = (const void *)_block_invoke_4_f_269(v2, @"rXYZ");
    if (_block_invoke_4_cglibrarypredicate_275 != -1) {
      dispatch_once(&_block_invoke_4_cglibrarypredicate_275, &__block_literal_global_278);
    }
    uint64_t v5 = (const void *)_block_invoke_4_f_274(v2, @"gXYZ");
    if (_block_invoke_4_cglibrarypredicate_280 != -1) {
      dispatch_once(&_block_invoke_4_cglibrarypredicate_280, &__block_literal_global_283);
    }
    uint64_t v6 = (const void *)_block_invoke_4_f_279(v2, @"bXYZ");
    long long v58 = 0u;
    long long v59 = 0u;
    v57[0] = CFNumberCreate(0, kCFNumberSInt16Type, &_block_invoke_4_iccDate);
    v57[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F586);
    v57[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F588);
    v57[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F58A);
    v57[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F58C);
    v57[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18519F58E);
    CFArrayRef v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v57, 6, MEMORY[0x1E4F1D510]);
    for (uint64_t i = 0; i != 6; ++i)
    {
      char v9 = v57[i];
      if (v9) {
        CFRelease(v9);
      }
    }
    *(void *)bytes = 1885563235;
    LODWORD(v33) = 16779276;
    CFDataRef v10 = CFDataCreate(0, bytes, 12);
    *(void *)bytes = @"displayRGB";
    int v33 = @"4.0";
    uint64_t v34 = @"Display P3 Linear";
    CFArrayRef v35 = v3;
    CFArrayRef v36 = v3;
    CFArrayRef v37 = v3;
    CFArrayRef v38 = v7;
    CFNumberRef v39 = CFNumberCreate(0, kCFNumberDoubleType, &v31);
    CFNumberRef v40 = CFNumberCreate(0, kCFNumberDoubleType, &v30);
    CFNumberRef v41 = CFNumberCreate(0, kCFNumberDoubleType, &v29);
    CFNumberRef v42 = CFNumberCreate(0, kCFNumberDoubleType, &v28);
    CFNumberRef v43 = CFNumberCreate(0, kCFNumberDoubleType, &v27);
    CFNumberRef v44 = CFNumberCreate(0, kCFNumberDoubleType, &v26);
    CFNumberRef v45 = CFNumberCreate(0, kCFNumberDoubleType, &v25);
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberDoubleType, &v24);
    uint64_t v12 = *MEMORY[0x1E4F1CFD0];
    CFNumberRef v46 = v11;
    uint64_t v47 = v12;
    uint64_t v48 = v12;
    uint64_t v49 = v12;
    uint64_t v50 = v12;
    uint64_t v51 = v12;
    uint64_t v52 = v4;
    uint64_t v53 = v5;
    uint64_t v54 = v6;
    CFDataRef v55 = v10;
    uint64_t v56 = v12;
    CFDictionaryRef v13 = CFDictionaryCreate(0, (const void **)keys, (const void **)bytes, 25, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (_block_invoke_4_cglibrarypredicate_288 != -1) {
      dispatch_once(&_block_invoke_4_cglibrarypredicate_288, &__block_literal_global_291);
    }
    CGCMSUtilsCreateLinearDisplayP3Profile_linear_profile = _block_invoke_4_f_287(v13);
    if (v3) {
      CFRelease(v3);
    }
    if (v7) {
      CFRelease(v7);
    }
    for (uint64_t j = 56; j != 120; j += 8)
    {
      unint64_t v15 = *(const void **)&bytes[j];
      if (v15) {
        CFRelease(v15);
      }
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v13) {
      CFRelease(v13);
    }
    CFRelease(v2);
  }
}

uint64_t A8_image_mark_rgb32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *((unsigned __int8 *)a2 + 8);
  int v7 = a2[1];
  int v70 = *a2;
  unint64_t v8 = *(unsigned int **)(result + 32);
  if (*(void *)(result + 40)) {
    int v9 = 0;
  }
  else {
    int v9 = 255;
  }
  CFDataRef v10 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v69 = *((void *)a2 + 3) - a5;
  uint64_t v11 = *((void *)a2 + 15);
  uint64_t v12 = *((void *)a2 + 16);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v68 = *((void *)a2 + 9);
  uint64_t v14 = *((void *)a2 + 5) + v68 * a4;
  unint64_t v15 = (unsigned int *)((char *)v8
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  if (*(void *)(result + 176))
  {
    uint64_t v66 = *((void *)a2 + 11);
    uint64_t v65 = *((void *)a2 + 13);
    uint64_t v63 = v12 + 16 * a3 + 8;
    uint64_t v64 = a5;
    int v67 = a5;
    do
    {
      if (((v65 - v14) | (v14 - v66)) < 0)
      {
        uint64_t v17 = 0;
        unsigned int v18 = 0;
      }
      else
      {
        unint64_t v16 = ((v14 & (unint64_t)~(-1 << v13)) >> (v13 - 4)) & 0xF;
        if (v16 - 7 >= 9) {
          uint64_t v17 = -v11;
        }
        else {
          uint64_t v17 = v11;
        }
        unsigned int v18 = weights_21383[v16] & 0xF;
      }
      uint64_t v19 = *(void *)(result + 32) + (v14 >> v13) * v11;
      if (v70 == 1)
      {
        if (a5 >= 1)
        {
          uint64_t v20 = (uint64_t *)v63;
          uint64_t v21 = v64;
          do
          {
            uint64_t v22 = *(v20 - 1);
            uint64_t v23 = *v20;
            uint64_t v24 = v19 + v22;
            if ((unint64_t)v15 >= v19 + v22) {
              uint64_t v25 = (unsigned int *)(v19 + v22);
            }
            else {
              uint64_t v25 = v15;
            }
            if (v8 > v25) {
              uint64_t v25 = v8;
            }
            unsigned int v26 = *v25;
            if ((v23 & 0xF) != 0)
            {
              uint64_t v27 = (unsigned int *)(v24 + (v23 >> 4));
              if (v15 < v27) {
                uint64_t v27 = v15;
              }
              if (v8 > v27) {
                uint64_t v27 = v8;
              }
              unsigned int v28 = *v27;
              if (v18)
              {
                uint64_t v29 = (unsigned int *)(v24 + v17);
                if (v15 >= v29) {
                  uint64_t v30 = v29;
                }
                else {
                  uint64_t v30 = v15;
                }
                if (v8 > v30) {
                  uint64_t v30 = v8;
                }
                unsigned int v31 = *v30;
                uint64_t v32 = (unsigned int *)((char *)v29 + (v23 >> 4));
                if (v15 < v32) {
                  uint64_t v32 = v15;
                }
                if (v8 > v32) {
                  uint64_t v32 = v8;
                }
                unsigned int v33 = BLEND8_21385[v18];
                unsigned int v26 = v26 - ((v33 & v26) >> v18) + ((v33 & v31) >> v18);
                unsigned int v28 = v28 - ((v33 & v28) >> v18) + ((v33 & *v32) >> v18);
              }
              unsigned int v26 = v26
                  - ((BLEND8_21385[*v20 & 0xF] & v26) >> (*v20 & 0xF))
                  + ((BLEND8_21385[*v20 & 0xF] & v28) >> (*v20 & 0xF));
            }
            else if (v18)
            {
              uint64_t v34 = (unsigned int *)(v24 + v17);
              if ((unint64_t)v15 < v24 + v17) {
                uint64_t v34 = v15;
              }
              if (v8 > v34) {
                uint64_t v34 = v8;
              }
              unsigned int v26 = v26 - ((BLEND8_21385[v18] & v26) >> v18) + ((BLEND8_21385[v18] & *v34) >> v18);
            }
            unsigned int v35 = __ROL4__(v26, v7) | v9;
            if (v6 != 255) {
              unsigned int v35 = (v35 * v6 + ((v35 * v6) >> 8) + 1) >> 8;
            }
            v20 += 2;
            *v10++ = v35;
            --v21;
          }
          while (v21);
        }
      }
      else if (a5 >= 1)
      {
        CFArrayRef v37 = (uint64_t *)v63;
        uint64_t v36 = v64;
        do
        {
          uint64_t v38 = *(v37 - 1);
          uint64_t v39 = *v37;
          uint64_t v40 = v19 + v38;
          if ((unint64_t)v15 >= v19 + v38) {
            CFNumberRef v41 = (unsigned int *)(v19 + v38);
          }
          else {
            CFNumberRef v41 = v15;
          }
          if (v8 > v41) {
            CFNumberRef v41 = v8;
          }
          unsigned int v42 = *v41;
          if ((v39 & 0xF) != 0)
          {
            CFNumberRef v43 = (unsigned int *)(v40 + (v39 >> 4));
            if (v15 < v43) {
              CFNumberRef v43 = v15;
            }
            if (v8 > v43) {
              CFNumberRef v43 = v8;
            }
            unsigned int v44 = *v43;
            if (v18)
            {
              if ((unint64_t)v15 >= v40 + v17) {
                CFNumberRef v45 = (unsigned int *)(v40 + v17);
              }
              else {
                CFNumberRef v45 = v15;
              }
              if (v8 > v45) {
                CFNumberRef v45 = v8;
              }
              unsigned int v46 = *v45;
              uint64_t v47 = (unsigned int *)(v40 + v17 + (v39 >> 4));
              if (v15 < v47) {
                uint64_t v47 = v15;
              }
              if (v8 > v47) {
                uint64_t v47 = v8;
              }
              unsigned int v48 = BLEND8_21385[v18];
              unsigned int v42 = v42 - ((v48 & v42) >> v18) + ((v48 & v46) >> v18);
              unsigned int v44 = v44 - ((v48 & v44) >> v18) + ((v48 & *v47) >> v18);
            }
            unsigned int v42 = v42
                - ((BLEND8_21385[*v37 & 0xF] & v42) >> (*v37 & 0xF))
                + ((BLEND8_21385[*v37 & 0xF] & v44) >> (*v37 & 0xF));
          }
          else if (v18)
          {
            uint64_t v49 = (unsigned int *)(v40 + v17);
            if ((unint64_t)v15 < v40 + v17) {
              uint64_t v49 = v15;
            }
            if (v8 > v49) {
              uint64_t v49 = v8;
            }
            unsigned int v42 = v42 - ((BLEND8_21385[v18] & v42) >> v18) + ((BLEND8_21385[v18] & *v49) >> v18);
          }
          unsigned int v50 = __ROL4__(v42, v7) | v9;
          if (v6 != 255) {
            unsigned int v50 = (v50 * v6 + ((v50 * v6) >> 8) + 1) >> 8;
          }
          if ((_BYTE)v50)
          {
            if (v50 != 255) {
              v50 += (~(_BYTE)v50 * *v10
            }
                    + ((~(_BYTE)v50 * *v10) >> 8)
                    + 1) >> 8;
            *CFDataRef v10 = v50;
          }
          v37 += 2;
          ++v10;
          --v36;
        }
        while (v36);
      }
      v10 += v69;
      v14 += v68;
      --a6;
      a5 = v67;
    }
    while (a6);
  }
  else
  {
    uint64_t v51 = (uint64_t *)(v12 + 16 * a3);
    do
    {
      uint64_t v52 = *(void *)(result + 32) + (v14 >> v13) * v11;
      if (v70 == 1)
      {
        if (a5 >= 1)
        {
          uint64_t v53 = v51;
          uint64_t v54 = a5;
          do
          {
            uint64_t v55 = *v53;
            v53 += 2;
            uint64_t v56 = (unsigned int *)(v52 + v55);
            if ((unint64_t)v15 < v52 + v55) {
              uint64_t v56 = v15;
            }
            if (*(void *)(result + 32) > (unint64_t)v56) {
              uint64_t v56 = *(unsigned int **)(result + 32);
            }
            unsigned int v57 = __ROL4__(*v56, v7) | v9;
            if (v6 != 255) {
              unsigned int v57 = (v57 * v6 + ((v57 * v6) >> 8) + 1) >> 8;
            }
            *v10++ = v57;
            --v54;
          }
          while (v54);
        }
      }
      else
      {
        long long v58 = v51;
        uint64_t v59 = a5;
        if (a5 >= 1)
        {
          do
          {
            uint64_t v60 = *v58;
            v58 += 2;
            uint64_t v61 = (unsigned int *)(v52 + v60);
            if ((unint64_t)v15 < v52 + v60) {
              uint64_t v61 = v15;
            }
            if (*(void *)(result + 32) > (unint64_t)v61) {
              uint64_t v61 = *(unsigned int **)(result + 32);
            }
            unsigned int v62 = __ROL4__(*v61, v7) | v9;
            if (v6 != 255) {
              unsigned int v62 = (v62 * v6 + ((v62 * v6) >> 8) + 1) >> 8;
            }
            if ((_BYTE)v62)
            {
              if (v62 != 255) {
                v62 += (~(_BYTE)v62 * *v10
              }
                      + ((~(_BYTE)v62 * *v10) >> 8)
                      + 1) >> 8;
              *CFDataRef v10 = v62;
            }
            ++v10;
            --v59;
          }
          while (v59);
        }
      }
      v10 += v69;
      v14 += v68;
      --a6;
    }
    while (a6);
  }
  return result;
}

void A8_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(uint64_t, _DWORD *))
{
  float v8 = (float)(int)(float)(*(float *)(a2 + 184) * 255.0) + 0.5;
  v50[0] = a3;
  v50[1] = a4;
  char v51 = (int)v8;
  uint64_t v9 = *(int *)(a1 + 28);
  uint64_t v53 = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  if (v10)
  {
    unsigned int v12 = HIBYTE(v11);
    unint64_t v13 = *(int *)(a2 + 24);
    uint64_t v14 = (uint64_t *)(a2 + 104);
    unint64_t v15 = (uint64_t *)(a2 + 72);
    unint64_t v16 = (uint64_t *)(a2 + 88);
  }
  else
  {
    unsigned int v12 = BYTE2(v11);
    unint64_t v13 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    uint64_t v14 = (uint64_t *)(a2 + 96);
    unint64_t v15 = (uint64_t *)(a2 + 64);
    unint64_t v16 = (uint64_t *)(a2 + 80);
    uint64_t v10 = *(void *)(a2 + 112);
  }
  uint64_t v17 = *v16;
  uint64_t v18 = *v15;
  uint64_t v19 = *v14;
  char v20 = v12;
  uint64_t v56 = v12;
  uint64_t v54 = v19;
  unint64_t v64 = v13;
  uint64_t v62 = v17;
  uint64_t v60 = v18;
  uint64_t v58 = v10;
  uint64_t v21 = *(void *)(a2 + 128);
  uint64_t v49 = v17;
  if (v21)
  {
    unsigned int v22 = BYTE2(v11);
    unint64_t v23 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    uint64_t v24 = (uint64_t *)(a2 + 96);
    uint64_t v25 = (uint64_t *)(a2 + 64);
    unsigned int v26 = (uint64_t *)(a2 + 80);
  }
  else
  {
    unsigned int v22 = HIBYTE(v11);
    unint64_t v23 = *(int *)(a2 + 24);
    uint64_t v24 = (uint64_t *)(a2 + 104);
    uint64_t v25 = (uint64_t *)(a2 + 72);
    unsigned int v26 = (uint64_t *)(a2 + 88);
    uint64_t v21 = *(void *)(a2 + 136);
  }
  uint64_t v27 = *v26;
  uint64_t v28 = *v25;
  uint64_t v29 = *v24;
  uint64_t v57 = v22;
  uint64_t v55 = v29;
  unint64_t v65 = v23;
  uint64_t v63 = v27;
  uint64_t v61 = v28;
  uint64_t v59 = v21;
  uint64_t v30 = *(unsigned int *)(a1 + 4);
  if ((v30 & 0x80000000) == 0)
  {
    unsigned int v31 = malloc_type_malloc(16 * v30, 0x9A5AA69uLL);
    uint64_t v66 = v31;
    if (v31)
    {
      if (*(void *)(a2 + 176))
      {
        if (v30)
        {
          unsigned int v33 = v31 + 1;
          uint64_t v34 = v49 - v19;
          do
          {
            if (((v19 - v18) | v34) < 0)
            {
              unint64_t v37 = 0;
              uint64_t v38 = 0;
            }
            else
            {
              unint64_t v35 = ((v19 & (unint64_t)~(-1 << v20)) >> (v20 - 4)) & 0xF;
              char v36 = weights_21383[v35];
              if (v35 - 7 >= 9) {
                unint64_t v37 = -(uint64_t)v13;
              }
              else {
                unint64_t v37 = v13;
              }
              uint64_t v38 = v36 & 0xF;
            }
            *(v33 - 1) = v13 * (v19 >> v20);
            *unsigned int v33 = v38 | (16 * v37);
            v33 += 2;
            v19 += v10;
            v34 -= v10;
            --v30;
          }
          while (v30);
        }
      }
      else if (v30)
      {
        uint64_t v39 = v31 + 1;
        do
        {
          *(v39 - 1) = v13 * (v19 >> v20);
          *uint64_t v39 = 0;
          v39 += 2;
          v19 += v10;
          --v30;
        }
        while (v30);
      }
      uint64_t v40 = v31;
      int v41 = *(_DWORD *)(a1 + 4);
      int v42 = *(_DWORD *)(a1 + 8);
      int v67 = v42;
      int v68 = v41;
      CFNumberRef v43 = *(int **)(a1 + 136);
      if (v43)
      {
        int v44 = *(_DWORD *)(a1 + 104);
        v69[0] = *(_DWORD *)(a1 + 108);
        v69[1] = v44;
        shape_enum_clip_alloc((uint64_t)v31, v32, v43, 1, 1, 1, v44, v69[0], v41, v42);
        unsigned int v46 = v45;
        if (v45) {
          goto LABEL_27;
        }
      }
      int v47 = 0;
      int v48 = 0;
      unsigned int v46 = 0;
      *(void *)uint64_t v69 = 0;
      while (1)
      {
        uint64_t v52 = *(void *)(a1 + 40) + v9 * (*(int *)(a1 + 16) + (uint64_t)v48) + *(int *)(a1 + 12) + (uint64_t)v47;
        a5(a2, v50);
        if (!v46) {
          break;
        }
LABEL_27:
        if (!shape_enum_clip_next((uint64_t)v46, &v69[1], v69, &v68, &v67))
        {
          free(v46);
          break;
        }
        int v48 = v69[0];
        int v47 = v69[1];
        uint64_t v9 = v53;
      }
      free(v40);
    }
  }
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void sub_184CC5170(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = sub_184C0085C(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
}

Swift::Void __swiftcall CGContextRef.addLine(to:)(CGPoint to)
{
  CGContextAddLineToPoint(v1, to.x, to.y);
}

Swift::Void __swiftcall CGContextRef.move(to:)(CGPoint to)
{
  CGContextMoveToPoint(v1, to.x, to.y);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGVector(uint64_t a1)
{
}

void type metadata accessor for CGImagePixelFormatInfo(uint64_t a1)
{
}

void type metadata accessor for CGImageByteOrderInfo(uint64_t a1)
{
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for CGImageAlphaInfo(uint64_t a1)
{
}

void type metadata accessor for CGImageComponentInfo(uint64_t a1)
{
}

void type metadata accessor for CGBitmapInfo(uint64_t a1)
{
}

void type metadata accessor for CGPath(uint64_t a1)
{
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_184CC5270(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_184CC5290(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for shape_bounds_t(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for Bounds(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_184CC5318(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_184CC5338(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Bounds(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Bounds(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for Region.UnsafeSegmentRanges(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Region.UnsafeSegmentRanges(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

uint64_t sub_184CC5438(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_184CC547C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

void type metadata accessor for CGPathElement(uint64_t a1)
{
}

void type metadata accessor for CGPathElementType(uint64_t a1)
{
}

uint64_t static Region.Builder.buildArray(_:)@<X0>(uint64_t result@<X0>, int64x2_t *a2@<X8>)
{
  int64x2_t v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v13 = v3;
  int64x2_t v14 = v3;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  v15.i64[0] = MEMORY[0x1E4FBC860];
  v15.i64[1] = MEMORY[0x1E4FBC860];
  uint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(swift_bridgeObjectRetain() + 80);
    do
    {
      uint64_t v7 = *v6;
      long long v8 = *((_OWORD *)v6 - 2);
      v11[0] = *((_OWORD *)v6 - 3);
      v11[1] = v8;
      v11[2] = *((_OWORD *)v6 - 1);
      uint64_t v12 = v7;
      Region.formUnion(_:)(v11);
      v6 += 7;
      --v5;
    }
    while (v5);
    __n128 result = swift_bridgeObjectRelease();
    int64x2_t v3 = v13;
    int64x2_t v9 = v14;
    int64x2_t v10 = v15;
    uint64_t v4 = v16;
  }
  else
  {
    int64x2_t v10 = vdupq_n_s64(MEMORY[0x1E4FBC860]);
    int64x2_t v9 = v3;
  }
  *a2 = v3;
  a2[1] = v9;
  a2[2] = v10;
  a2[3].i64[0] = v4;
  return result;
}

int64x2_t static Region.Builder.buildBlock()@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *a1 = result;
  a1[1] = result;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  a1[2].i64[0] = MEMORY[0x1E4FBC860];
  a1[2].i64[1] = v2;
  a1[3].i64[0] = v2;
  return result;
}

void static Region.Builder.buildExpression(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v5 = a2 + a4;
  if (v5 <= a2)
  {
    double v6 = a2;
    if (v5 >= a2) {
      goto LABEL_12;
    }
  }
  else
  {
    double v6 = v5;
    double v5 = a2;
  }
  double v7 = a3 + a5;
  if (a3 + a5 > a3)
  {
    double v8 = a3 + a5;
    double v7 = a3;
    goto LABEL_7;
  }
  double v8 = a3;
  if (v7 >= a3)
  {
LABEL_12:
    double v5 = NAN;
    double v6 = NAN;
    double v7 = NAN;
    double v8 = NAN;
    goto LABEL_13;
  }
LABEL_7:
  if (v5 >= v6 || v7 >= v8)
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  *(double *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v8;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v10;
}

uint64_t static Region.Builder.buildOptional(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v8 = 0x7FF8000000000000;
  if (v6) {
    uint64_t v9 = *a1;
  }
  else {
    uint64_t v9 = 0x7FF8000000000000;
  }
  if (v6) {
    uint64_t v10 = a1[1];
  }
  else {
    uint64_t v10 = 0x7FF8000000000000;
  }
  if (v6) {
    uint64_t v11 = a1[2];
  }
  else {
    uint64_t v11 = 0x7FF8000000000000;
  }
  if (v6)
  {
    uint64_t v8 = a1[3];
    uint64_t v12 = a1[4];
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  if (v6) {
    uint64_t v13 = a1[5];
  }
  else {
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  if (v6) {
    uint64_t v7 = a1[6];
  }
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v8;
  a2[4] = v12;
  a2[5] = v13;
  a2[6] = v7;
  return sub_184CC578C(v3, v2, v4, v5, v6);
}

__n128 _s12CoreGraphics6RegionV7BuilderV11buildEither5firstA2Cn_tFZ_0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = v2;
  return result;
}

uint64_t static Region.Builder.buildPartialBlock(accumulated:next:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a3 + 48) = v3;
  uint64_t v5 = *(void *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v8[2] = *(_OWORD *)(a2 + 32);
  uint64_t v9 = v5;
  return Region.formUnion(_:)(v8);
}

__n128 Region.init(builder:)@<Q0>(void (*a1)(_OWORD *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  a1(v6);
  uint64_t v3 = v7;
  long long v5 = v6[1];
  __n128 result = (__n128)v6[2];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = v3;
  return result;
}

uint64_t sub_184CC578C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

ValueMetadata *type metadata accessor for Region.Builder()
{
  return &type metadata for Region.Builder;
}

uint64_t sub_184CC57EC(char a1)
{
  return a1 & 0x1F;
}

uint64_t sub_184CC57F4(__int16 a1)
{
  return a1 & 0x100;
}

uint64_t sub_184CC57FC(__int16 a1)
{
  return a1 & 0x7000;
}

uint64_t sub_184CC5804(int a1)
{
  return a1 & 0xF0000;
}

uint64_t sub_184CC580C()
{
  return 0;
}

uint64_t sub_184CC59B4(int a1)
{
  uint64_t v2 = sub_1850C3EC8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  long long v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F0);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F8);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1850CB2D0;
  *(void *)(v11 + 32) = 0x6168706C61;
  *(void *)(v11 + 40) = 0xE500000000000000;
  type metadata accessor for CGImageAlphaInfo(0);
  *(_DWORD *)(v11 + 48) = a1 & 0x1F;
  *(void *)(v11 + 72) = v12;
  *(void *)(v11 + 80) = 0x6E656E6F706D6F63;
  *(void *)(v11 + 88) = 0xE900000000000074;
  type metadata accessor for CGImageComponentInfo(0);
  *(_DWORD *)(v11 + 96) = a1 & 0x100;
  *(void *)(v11 + 120) = v13;
  *(void *)(v11 + 128) = 0x6564724F65747962;
  *(void *)(v11 + 136) = 0xE900000000000072;
  type metadata accessor for CGImageByteOrderInfo(0);
  *(_DWORD *)(v11 + 144) = a1 & 0x7000;
  *(void *)(v11 + 168) = v14;
  *(void *)(v11 + 176) = 0x726F466C65786970;
  *(void *)(v11 + 184) = 0xEB0000000074616DLL;
  type metadata accessor for CGImagePixelFormatInfo(0);
  *(void *)(v11 + 216) = v15;
  *(_DWORD *)(v11 + 192) = a1 & 0xF0000;
  uint64_t v16 = *MEMORY[0x1E4FBC410];
  uint64_t v17 = sub_1850C3EB8();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v10, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v10, 0, 1, v17);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E4FBC430], v2);
  type metadata accessor for CGBitmapInfo(0);
  return sub_1850C3EE8();
}

uint64_t sub_184CC5C70()
{
  return sub_184CC580C();
}

uint64_t sub_184CC5C78()
{
  return sub_184CC59B4(*v0);
}

_DWORD *sub_184CC5C80@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *result & 0x1F;
  return result;
}

_DWORD *sub_184CC5C90(_DWORD *result, unsigned int *a2)
{
  *a2 = *a2 & 0xFFFFFFE0 | *result;
  return result;
}

_DWORD *sub_184CC5CA8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *result & 0x100;
  return result;
}

_DWORD *sub_184CC5CB8(_DWORD *result, unsigned int *a2)
{
  *a2 = *a2 & 0xFFFFFEFF | *result;
  return result;
}

_DWORD *sub_184CC5CD0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *result & 0x7000;
  return result;
}

_DWORD *sub_184CC5CE0(_DWORD *result, unsigned int *a2)
{
  *a2 = *a2 & 0xFFFF8FFF | *result;
  return result;
}

_DWORD *sub_184CC5CF8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *result & 0xF0000;
  return result;
}

_DWORD *sub_184CC5D08(_DWORD *result, unsigned int *a2)
{
  *a2 = *a2 & 0xFFF0FFFF | *result;
  return result;
}

int64_t CGColorSpaceRef.colorTable.getter()
{
  if (CGColorSpaceGetModel(v0) != kCGColorSpaceModelIndexed) {
    return 0;
  }
  uint64_t v1 = CGColorSpaceGetBaseColorSpace(v0);
  if (v1)
  {
    uint64_t v2 = v1;
    int64_t NumberOfComponents = CGColorSpaceGetNumberOfComponents(v1);
  }
  else
  {
    int64_t NumberOfComponents = 1;
  }
  int64_t result = CGColorSpaceGetColorTableCount(v0);
  size_t v6 = result * NumberOfComponents;
  if ((unsigned __int128)(result * (__int128)NumberOfComponents) >> 64 == (result * NumberOfComponents) >> 63)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v4 = sub_1850C3A78();
        *(void *)(v4 + 16) = v6;
        bzero((void *)(v4 + 32), v6);
      }
      else
      {
        uint64_t v4 = MEMORY[0x1E4FBC860];
      }
      CGColorSpaceGetColorTable(v0, (uint8_t *)(v4 + 32));
      return v4;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

char *sub_184CC5DF0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1E8F8B600);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 32 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_184CC5EE8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB288AF0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_184CC5FE4()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CC6030()
{
  return sub_184CC6060();
}

uint64_t sub_184CC6048()
{
  return sub_184CC6060();
}

uint64_t sub_184CC6060()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CC60C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v52 = a1;
  uint64_t v53 = a3;
  uint64_t v46 = *(void *)(*(void *)(a4 + 24) - 8);
  MEMORY[0x1F4188790](a1, a5);
  int v48 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v9 + 40);
  uint64_t v54 = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v12);
  uint64_t v49 = (char *)&v41 - v13;
  uint64_t v14 = *(void *)(a4 + 32);
  uint64_t v15 = *(void *)(a4 + 16);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1850C3B88();
  uint64_t v19 = MEMORY[0x1F4188790](v17 - 8, v18);
  int v47 = (char *)&v41 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v22, v26);
  uint64_t v28 = (char *)&v41 - v27;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v43 = v5;
  v30(v24, v5, v15);
  CFNumberRef v45 = v28;
  uint64_t v31 = sub_1850C3A08();
  uint64_t v50 = v14;
  uint64_t v44 = v15;
  swift_getAssociatedTypeWitness();
  uint64_t v41 = a2;
  uint64_t result = sub_1850C3B98();
  if (__OFSUB__(result, v31))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v42 = v31;
  uint64_t v33 = v43 + *(int *)(a4 + 52);
  if (result - v31 < sub_1850C3A18())
  {
    uint64_t v34 = (uint64_t)v47;
    unint64_t v35 = v45;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v47, v45, v16);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v48, v33, v54);
    uint64_t v36 = (uint64_t)v49;
    sub_1850C39F8();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v35, v16);
    sub_184CC65AC(v34, v36, v52);
    return v42;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v48, v33, v54);
  uint64_t v37 = v42;
  sub_1850C3BB8();
  sub_1850C3BA8();
  uint64_t v38 = (uint64_t)v49;
  uint64_t v39 = sub_1850C3A08();
  uint64_t v40 = (uint64_t)v47;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v47, v45, v16);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v40, 0, 1, v16);
  sub_184CC65AC(v40, v38, v52);
  uint64_t result = v37 + v39;
  if (__OFADD__(v37, v39)) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_184CC65AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1850C3B88();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for BothSequence.Iterator() + 52);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v7, a2, AssociatedTypeWitness);
}

uint64_t sub_184CC66D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4 = v3;
  uint64_t v27 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(MEMORY[0x1F4188790](a1, a3) + 40);
  v25[0] = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v10);
  uint64_t v13 = (char *)v25 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v11, v16);
  __n128 v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = sub_1850C3B88();
  MEMORY[0x1F4188790](v20 - 8, v21);
  uint64_t v23 = (char *)v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v4, v14);
  sub_1850C39F8();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v23, 0, 1, v19);
  (*(void (**)(void, uint64_t, uint64_t))(v26 + 16))(v25[0], v4 + *(int *)(a1 + 52), v6);
  sub_1850C39F8();
  return sub_184CC65AC((uint64_t)v23, (uint64_t)v13, v27);
}

uint64_t sub_184CC6990()
{
  uint64_t v0 = sub_1850C3A18();
  uint64_t v1 = sub_1850C3A18();
  BOOL v2 = __OFADD__(v0, v1);
  uint64_t result = v0 + v1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_184CC69E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1850C3B88();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v25 = (char *)&v20 - v6;
  uint64_t v24 = v3;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1850C3B88();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v20 - v11;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)&v20 - v11, v2, v8);
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v14 = v13(v12, 1, v7);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  if (v14 == 1) {
    goto LABEL_5;
  }
  uint64_t v15 = v27;
  uint64_t result = v13(v2, 1, v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    uint64_t v17 = v25;
    sub_1850C3BC8();
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v23);
      v20(v2, v8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v2, 1, 1, v7);
LABEL_5:
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      return sub_1850C3BC8();
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v15, v17, v18);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  }
  return result;
}

uint64_t sub_184CC6DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  sub_184CC66D8(a1, a2, a3);
  __n128 v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v5(v3, a1);
}

uint64_t sub_184CC6E30()
{
  return 2;
}

uint64_t sub_184CC6E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_184CD0F7C(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t sub_184CC6EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v7 = sub_184CC60C8(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v5, a4);
  return v7;
}

uint64_t sub_184CC6F0C()
{
  return sub_1850C3A38();
}

uint64_t sub_184CC6F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t v7 = a3 + *(int *)(_s5IndexVMa() + 52);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t sub_184CC7050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v11);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v18 = (char *)&v20 - v17;
  a4(v14, a2);
  a4(v9, a3);
  return sub_184CC6F30((uint64_t)v18, (uint64_t)v13, v21);
}

uint64_t sub_184CC71B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v31 = *(void *)(a2 + 24);
  uint64_t v32 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v9);
  v28[2] = a2;
  uint64_t v29 = (char *)v28 - v10;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  uint64_t v33 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  uint64_t v20 = (char *)v28 - v19;
  MEMORY[0x1F4188790](v18, v21);
  uint64_t v23 = (char *)v28 - v22;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v28[1] = a1;
  v24((char *)v28 - v22, a1, v12);
  sub_1850C3AF8();
  swift_getAssociatedConformanceWitness();
  if (sub_1850C39C8())
  {
    v24(v33, (uint64_t)v20, v12);
    uint64_t v34 = v11;
    uint64_t v35 = v31;
    uint64_t v36 = a3;
    uint64_t v37 = v32;
    _s5IndexVMa();
    uint64_t v25 = (uint64_t)v29;
    sub_1850C3AC8();
  }
  else
  {
    sub_1850C3AC8();
    uint64_t v25 = (uint64_t)v29;
    sub_1850C3AB8();
  }
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v20, v12);
  v26(v23, v12);
  return sub_184CC6F30((uint64_t)v33, v25, v30);
}

uint64_t sub_184CC7498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a1;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v35 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13, v14);
  __n128 v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v36 = (char *)&v29 - v19;
  sub_1850C3AB8();
  uint64_t v33 = v11;
  uint64_t v30 = a4;
  sub_1850C3AB8();
  sub_1850C3AF8();
  swift_getAssociatedConformanceWitness();
  if (sub_1850C39C8())
  {
    uint64_t v20 = sub_1850C3AE8();
    uint64_t v37 = v12;
    uint64_t v38 = v7;
    uint64_t v39 = a3;
    uint64_t v40 = v30;
    _s5IndexVMa();
    __n128 v21 = v33;
    uint64_t v22 = sub_1850C3AE8();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v32 + 8);
    v23(v17, v13);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v35);
    v23(v36, v13);
    BOOL v24 = __OFADD__(v20, v22);
    uint64_t v25 = v20 + v22;
    if (!v24) {
      return v25;
    }
    __break(1u);
  }
  uint64_t v26 = v36;
  uint64_t v25 = sub_1850C3AE8();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v32 + 8);
  v27(v17, v13);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
  v27(v26, v13);
  return v25;
}

uint64_t sub_184CC77DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v41 = a1;
  uint64_t v44 = *(void *)(a2 + 24);
  uint64_t v45 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v39 = AssociatedTypeWitness;
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness, v5);
  uint64_t v42 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v43 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v43 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v43, v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v13, v16);
  uint64_t v19 = (char *)&v36 - v18;
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v22 = (char *)&v36 - v21;
  sub_1850C3AB8();
  uint64_t v37 = v10;
  sub_1850C3AB8();
  sub_1850C3AF8();
  uint64_t v23 = sub_1850C3AE8();
  uint64_t v24 = v41;
  if (v23 > v41)
  {
    sub_1850C3AD8();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v26 = v43;
    v25(v19, v43);
    v25(v22, v26);
    uint64_t v27 = v42;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v42, v37, v39);
    uint64_t v28 = (uint64_t)v27;
    uint64_t v29 = (uint64_t)v15;
    return sub_184CC6F30(v29, v28, v40);
  }
  uint64_t v30 = v23;
  uint64_t v31 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v36 = v15;
  uint64_t result = v31(v15, v19, v43);
  if (!__OFSUB__(v24, v30))
  {
    uint64_t v33 = v37;
    sub_1850C3AD8();
    uint64_t v34 = *(void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v35 = v43;
    v34(v19, v43);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v39);
    v34(v22, v35);
    uint64_t v28 = (uint64_t)v42;
    uint64_t v29 = (uint64_t)v36;
    return sub_184CC6F30(v29, v28, v40);
  }
  __break(1u);
  return result;
}

uint64_t sub_184CC7B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = sub_184CC7498(a1, a3, a4, a5);
  BOOL v11 = __OFADD__(v10, a2);
  uint64_t result = v10 + a2;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    return sub_184CC77DC(result, a3, a5, a6);
  }
  return result;
}

uint64_t sub_184CC7BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_184CC7498(a2, a3, a4, a5);
  uint64_t v10 = sub_184CC7498(a1, a3, a4, a5);
  BOOL v11 = __OFSUB__(v9, v10);
  uint64_t result = v9 - v10;
  if (v11) {
    __break(1u);
  }
  return result;
}

uint64_t sub_184CC7C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness, v11);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)v27 - v16;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v27[1] = a1;
  v18((char *)v27 - v16, a1, AssociatedTypeWitness);
  sub_1850C3AF8();
  swift_getAssociatedConformanceWitness();
  LOBYTE(a1) = sub_1850C39C8();
  uint64_t v19 = v14;
  __n128 v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v19, AssociatedTypeWitness);
  if (a1)
  {
    uint64_t v21 = *(void *)(a2 + 24);
    v30[0] = v8;
    v30[1] = v21;
    v30[2] = a3;
    v30[3] = v28;
    _s5IndexVMa();
  }
  uint64_t v22 = (void (*)(void *, void))sub_1850C3B68();
  uint64_t v24 = v23;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v29, v24, v25);
  v22(v30, 0);
  return ((uint64_t (*)(char *, uint64_t))v20)(v17, AssociatedTypeWitness);
}

uint64_t sub_184CC7F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[2] = a3;
  v22[3] = a4;
  v22[0] = a4;
  v22[1] = a6;
  v22[4] = a5;
  v22[5] = a6;
  uint64_t v8 = _s5IndexVMa();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14);
  uint64_t v16 = (char *)v22 - v15;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v17 = sub_1850C39C8();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18(v16, a1, v8);
  v18(v13, a2, v8);
  if (v17)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    char v19 = sub_1850C39C8();
  }
  else
  {
    char v19 = 0;
  }
  __n128 v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v13, v8);
  v20(v16, v8);
  return v19 & 1;
}

uint64_t sub_184CC8180()
{
  if (sub_1850C39C8())
  {
    swift_getAssociatedTypeWitness();
    _s5IndexVMa();
    swift_getAssociatedConformanceWitness();
  }
  return sub_1850C3968() & 1;
}

uint64_t sub_184CC82C4()
{
  return sub_184CC8180();
}

uint64_t sub_184CC82E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_184CC7F44(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_184CC82F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_184CC7050(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), MEMORY[0x1E4FBB620], a3);
}

uint64_t sub_184CC8324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_184CC7050(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), MEMORY[0x1E4FBB648], a3);
}

void (*sub_184CC8358(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (uint64_t)sub_184CC8418(v8, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16));
  return sub_184CC83D0;
}

void sub_184CC83D0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_184CC8418(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v11;
  uint64_t v12 = malloc(*(void *)(v11 + 64));
  a1[2] = (uint64_t)v12;
  sub_184CC7C4C(a2, a3, a4, a5, (uint64_t)v12);
  return sub_184CC8504;
}

void sub_184CC8504(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

uint64_t sub_184CC8564@<X0>(uint64_t a1@<X8>)
{
  _s5IndexVMa();
  uint64_t v2 = sub_1850C3B88();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_184CC85EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_184CC7B5C(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t sub_184CC85FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CC7BD8(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t sub_184CC8614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_184CC71B0(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t sub_184CC8620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 16);
  uint64_t v5 = *(void *)(a3 - 8);
  long long v13 = *(_OWORD *)(a2 + 16);
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v7 = _s5IndexVMa();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v13 - v10;
  sub_184CC71B0(a1, a2, v5, v6, (uint64_t)&v13 - v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v11, v7);
}

uint64_t sub_184CC873C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v32 = a5;
  v30[1] = a3;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v10);
  uint64_t v31 = (char *)v30 - v11;
  v30[2] = a4;
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v36 = (uint64_t)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  uint64_t v22 = (char *)v30 - v21;
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v25 = (char *)v30 - v24;
  uint64_t v33 = v8;
  uint64_t v37 = v8;
  uint64_t v38 = v13;
  uint64_t v35 = v7;
  uint64_t v39 = v7;
  uint64_t v40 = v12;
  uint64_t v26 = _s5IndexVMa();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v25, v34 + *(int *)(v26 + 52), v14);
  sub_1850C3AB8();
  swift_getAssociatedConformanceWitness();
  if (sub_1850C39C8())
  {
    uint64_t v27 = (uint64_t)v31;
    sub_1850C3938();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v25, v14);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v36, v22, v14);
  }
  else
  {
    uint64_t v27 = (uint64_t)v31;
    sub_1850C3AF8();
    sub_1850C3938();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v15 + 8);
    v28(v22, v14);
    v28(v25, v14);
  }
  return sub_184CC6F30(v27, v36, v32);
}

uint64_t sub_184CC8A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_184CC873C(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t sub_184CC8A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 16);
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v6 + 8);
  long long v15 = *(_OWORD *)(a2 + 16);
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v9 = _s5IndexVMa();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v15 - v12;
  sub_184CC873C(a1, a2, v5, v6, (uint64_t)&v15 - v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v13, v9);
}

uint64_t sub_184CC8B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_184CC7B5C(a1, a2, a3, *(void *)(*(void *)(a4 - 8) + 8), *(void *)(*(void *)(a4 - 16) + 8), a5);
}

uint64_t sub_184CC8B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CC7BD8(a1, a2, a3, *(void *)(*(void *)(a4 - 8) + 8), *(void *)(*(void *)(a4 - 16) + 8));
}

uint64_t sub_184CC8BA4()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CC8BC0()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CC8BDC()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CC8BF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CC8C14()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CC8C30()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for BothSequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t _s5IndexVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_184CC8C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_184CC8C84()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = sub_1850C3B88();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184CC8D88(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v6 = *(void *)(v5 + 64);
  }
  else {
    size_t v6 = *(void *)(v5 + 64) + 1;
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  size_t v10 = v6 + v9;
  uint64_t v11 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v6 + v9) & ~v9) + *(void *)(*(void *)(v7 - 8) + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    uint64_t v15 = v7;
    uint64_t v16 = ~v9;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, ((unint64_t)a2 + v10) & v16, v15);
  }
  return a1;
}

uint64_t sub_184CC8FA0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, AssociatedTypeWitness)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }
  int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v5 + a1;
  if (!v4) {
    ++v10;
  }

  return v8((v10 + v9) & ~v9, v6);
}

void *sub_184CC90D8(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    int v6 = *(_DWORD *)(v5 + 84);
    size_t v7 = *(void *)(v5 + 64);
    if (v6) {
      size_t v8 = v7;
    }
    else {
      size_t v8 = v7 + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v10 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v9 = v5 + 56;
    v10(a1, 0, 1, AssociatedTypeWitness);
    int v6 = *(_DWORD *)(v9 + 28);
    size_t v7 = *(void *)(v9 + 8);
  }
  if (v6) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v7 + 1;
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((unint64_t)a1 + v11 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)a2 + v11 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), v12);
  return a1;
}

void *sub_184CC925C(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, AssociatedTypeWitness);
  int v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  if (v9) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  memcpy(a1, a2, v11);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v5 + 64) + 1;
  }
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 24))(((unint64_t)a1 + v12 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)a2 + v12 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), v13);
  return a1;
}

void *sub_184CC945C(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    int v6 = *(_DWORD *)(v5 + 84);
    size_t v7 = *(void *)(v5 + 64);
    if (v6) {
      size_t v8 = v7;
    }
    else {
      size_t v8 = v7 + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    size_t v10 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v9 = v5 + 56;
    v10(a1, 0, 1, AssociatedTypeWitness);
    int v6 = *(_DWORD *)(v9 + 28);
    size_t v7 = *(void *)(v9 + 8);
  }
  if (v6) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v7 + 1;
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)a1 + v11 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)a2 + v11 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), v12);
  return a1;
}

void *sub_184CC95E0(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, AssociatedTypeWitness);
  int v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  if (v9) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  memcpy(a1, a2, v11);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v5 + 64) + 1;
  }
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 40))(((unint64_t)a1 + v12 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)a2 + v12 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), v13);
  return a1;
}

uint64_t sub_184CC97E0(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v5) {
    uint64_t v12 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v4 + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = v12 + v11;
  if (a2 <= v10) {
    goto LABEL_30;
  }
  uint64_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v7 - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v10 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v17 < 2)
    {
LABEL_30:
      if (v10)
      {
        if (v6 >= v9)
        {
          unsigned int v23 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(a1, v5, AssociatedTypeWitness);
          if (v23 >= 2) {
            return v23 - 1;
          }
          else {
            return 0;
          }
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v21(((unint64_t)a1 + v13) & ~v11);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_30;
  }
LABEL_20:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v10 + (v20 | v18) + 1;
}

void sub_184CC9AAC(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  if (v13 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  if (v8) {
    size_t v15 = *(void *)(v7 + 64);
  }
  else {
    size_t v15 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  size_t v17 = ((v15 + v16) & ~v16) + *(void *)(v11 + 64);
  if (a3 <= v14) {
    goto LABEL_18;
  }
  if (v17 <= 3)
  {
    unsigned int v18 = ((a3 - v14 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v18))
    {
      int v10 = 4;
      if (v14 >= a2) {
        goto LABEL_26;
      }
      goto LABEL_19;
    }
    if (v18 >= 0x100) {
      int v10 = 2;
    }
    else {
      int v10 = v18 > 1;
    }
LABEL_18:
    if (v14 >= a2) {
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  int v10 = 1;
  if (v14 >= a2)
  {
LABEL_26:
    uint64_t v22 = a1;
    switch(v10)
    {
      case 1:
        a1[v17] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_31;
      case 2:
        *(_WORD *)&a1[v17] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_31;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)&a1[v17] = 0;
        goto LABEL_30;
      default:
LABEL_30:
        if (a2)
        {
LABEL_31:
          if (v9 >= v13)
          {
            if (v9 >= a2)
            {
              uint64_t v27 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56);
              v27(a1, (a2 + 1), v8, v28);
            }
            else
            {
              if (v15 <= 3) {
                int v24 = ~(-1 << (8 * v15));
              }
              else {
                int v24 = -1;
              }
              if (v15)
              {
                int v25 = v24 & (~v9 + a2);
                if (v15 <= 3) {
                  int v26 = v15;
                }
                else {
                  int v26 = 4;
                }
                bzero(v22, v15);
                switch(v26)
                {
                  case 2:
                    *(_WORD *)uint64_t v22 = v25;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v22 = v25;
                    v22[2] = BYTE2(v25);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v22 = v25;
                    break;
                  default:
                    *uint64_t v22 = v25;
                    break;
                }
              }
            }
          }
          else
          {
            unsigned int v23 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
            v23((unint64_t)&a1[v15 + v16] & ~v16, a2);
          }
        }
        break;
    }
    return;
  }
LABEL_19:
  unsigned int v19 = ~v14 + a2;
  if (v17 < 4)
  {
    int v20 = (v19 >> (8 * v17)) + 1;
    if (v17)
    {
      int v21 = v19 & ~(-1 << (8 * v17));
      bzero(a1, v17);
      if (v17 == 3)
      {
        *(_WORD *)a1 = v21;
        a1[2] = BYTE2(v21);
      }
      else if (v17 == 2)
      {
        *(_WORD *)a1 = v21;
      }
      else
      {
        *a1 = v21;
      }
    }
  }
  else
  {
    bzero(a1, v17);
    *(_DWORD *)a1 = v19;
    int v20 = 1;
  }
  switch(v10)
  {
    case 1:
      a1[v17] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v20;
      break;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x184CC9E98);
    case 4:
      *(_DWORD *)&a1[v17] = v20;
      break;
    default:
      return;
  }
}

uint64_t sub_184CC9ED0()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184CC9FC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v6 + v9) & (unint64_t)~v9) + *(void *)(*(void *)(v7 - 8) + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    uint64_t v15 = v7;
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, ((unint64_t)a2 + v10) & v16, v15);
  }
  return a1;
}

uint64_t sub_184CCA170(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v5;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t sub_184CCA264(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_184CCA35C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_184CCA454(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_184CCA54C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_184CCA644(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(v5 + 64) + v11;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v12 & ~v11) + *(void *)(*(void *)(v7 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v9)
        {
          uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
          return v22(a1, v6, AssociatedTypeWitness);
        }
        else
        {
          int v20 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v20(((unint64_t)a1 + v12) & ~v11);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_184CCA920(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v7 + 64) + v13;
  size_t v15 = (v14 & ~v13) + *(void *)(v9 + 64);
  if (a3 <= v12)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v12 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v12 < a2)
  {
    unsigned int v17 = ~v12 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v15] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v18;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v15] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x184CCAC6CLL);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 >= v11)
        {
          uint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v22(a1, a2, v8, AssociatedTypeWitness);
        }
        else
        {
          int v21 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
          v21((unint64_t)&a1[v14] & ~v13, a2);
        }
      }
      return;
  }
}

uint64_t sub_184CCAC94()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184CCAD64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t sub_184CCAEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t sub_184CCAF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_184CCB00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_184CCB0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_184CCB15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_184CCB204(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_184CCB3FC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x184CCB6C8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          int v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          unsigned int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for BothSequence()
{
  return swift_getGenericMetadata();
}

uint64_t sub_184CCB708()
{
  return MEMORY[0x1E4FBC168];
}

uint64_t sub_184CCB714()
{
  return MEMORY[0x1E4FBC4D8];
}

unint64_t sub_184CCB720(uint64_t a1)
{
  unint64_t result = sub_184CCB748();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_184CCB748()
{
  unint64_t result = qword_1E8F8B788;
  if (!qword_1E8F8B788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B788);
  }
  return result;
}

uint64_t sub_184CCB79C()
{
  return MEMORY[0x1E4FBC1E0];
}

uint64_t sub_184CCB7A8()
{
  return MEMORY[0x1E4FBC550];
}

unint64_t sub_184CCB7B4(uint64_t a1)
{
  unint64_t result = sub_184CCB7DC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_184CCB7DC()
{
  unint64_t result = qword_1E8F8B790;
  if (!qword_1E8F8B790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B790);
  }
  return result;
}

uint64_t sub_184CCB830()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t sub_184CCB83C()
{
  return MEMORY[0x1E4FBB820];
}

unint64_t sub_184CCB848(uint64_t a1)
{
  unint64_t result = sub_184CCB870();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_184CCB870()
{
  unint64_t result = qword_1E8F8B798;
  if (!qword_1E8F8B798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B798);
  }
  return result;
}

ValueMetadata *type metadata accessor for Bounds()
{
  return &type metadata for Bounds;
}

unint64_t sub_184CCB8D8()
{
  unint64_t result = qword_1E8F8B7A0[0];
  if (!qword_1E8F8B7A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E8F8B7A0);
  }
  return result;
}

double *sub_184CCB92C@<X0>(double *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double v6 = result[1];
  if (v6 == 0.0 && result[2] == 0.0) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 4;
  }
  uint64_t v8 = 0;
  double v9 = NAN;
  double v10 = NAN;
  double v11 = NAN;
  double v12 = NAN;
  do
  {
    double v13 = a5;
    double v14 = a3;
    switch(v8)
    {
      case 0:
        break;
      case 1:
        double v13 = a6;
        goto LABEL_11;
      case 2:
        double v13 = a5;
LABEL_11:
        double v14 = a4;
        break;
      case 3:
        double v13 = a6;
        double v14 = a3;
        break;
      default:
        sub_1850C3D28();
        __break(1u);
        JUMPOUT(0x184CCBAE8);
    }
    double v15 = result[4] + *result * v14 + result[2] * v13;
    double v16 = result[5] + v6 * v14 + result[3] * v13;
    if ((*(void *)&v15 & 0xFFFFFFFFFFFFFLL) != 0) {
      double v17 = v12;
    }
    else {
      double v17 = v15;
    }
    if ((~*(void *)&v15 & 0x7FF0000000000000) != 0) {
      double v17 = v15;
    }
    if (v12 > v15) {
      double v12 = v17;
    }
    if ((*(void *)&v16 & 0xFFFFFFFFFFFFFLL) != 0) {
      double v18 = v11;
    }
    else {
      double v18 = v16;
    }
    if ((~*(void *)&v16 & 0x7FF0000000000000) != 0) {
      double v18 = v16;
    }
    if (v11 > v16) {
      double v11 = v18;
    }
    if ((*(void *)&v15 & 0xFFFFFFFFFFFFFLL) != 0) {
      double v19 = v10;
    }
    else {
      double v19 = v15;
    }
    if ((~*(void *)&v15 & 0x7FF0000000000000) != 0) {
      double v19 = v15;
    }
    if (v15 >= v10) {
      double v10 = v19;
    }
    if (v16 >= v9)
    {
      if ((~*(void *)&v16 & 0x7FF0000000000000) != 0)
      {
        double v9 = v16;
      }
      else if ((*(void *)&v16 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        double v9 = v16;
      }
    }
    ++v8;
  }
  while (v7 != v8);
  BOOL v20 = v12 >= v10;
  if (v11 >= v9) {
    BOOL v20 = 1;
  }
  double v21 = 0.0;
  if (v20) {
    double v22 = 0.0;
  }
  else {
    double v22 = v12;
  }
  if (v20) {
    double v23 = 0.0;
  }
  else {
    double v23 = v10;
  }
  if (v20) {
    double v24 = 0.0;
  }
  else {
    double v24 = v11;
  }
  if (!v20) {
    double v21 = v9;
  }
  *(double *)a2 = v22;
  *(double *)(a2 + 8) = v23;
  *(double *)(a2 + 16) = v24;
  *(double *)(a2 + 24) = v21;
  *(unsigned char *)(a2 + 32) = v20;
  return result;
}

uint64_t sub_184CCBAF8()
{
  return sub_1850C3E78();
}

double sub_184CCBB74(double result, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = result;
  double v9 = result;
  if ((*(void *)&result & 0xFFFFFFFFFFFFFLL) != 0) {
    unint64_t result = a5;
  }
  if ((~*(void *)&v9 & 0x7FF0000000000000) != 0) {
    unint64_t result = v8;
  }
  if (v8 < a5) {
    unint64_t result = a5;
  }
  if ((*(void *)&a3 & 0xFFFFFFFFFFFFFLL) != 0) {
    double v10 = a7;
  }
  else {
    double v10 = a3;
  }
  if ((~*(void *)&a3 & 0x7FF0000000000000) != 0) {
    double v10 = a3;
  }
  if (a3 >= a7) {
    double v11 = v10;
  }
  else {
    double v11 = a7;
  }
  if ((*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0) {
    double v12 = a6;
  }
  else {
    double v12 = a2;
  }
  if ((~*(void *)&a2 & 0x7FF0000000000000) != 0) {
    double v12 = a2;
  }
  if (a6 <= a2) {
    double v13 = a6;
  }
  else {
    double v13 = v12;
  }
  if ((*(void *)&a4 & 0xFFFFFFFFFFFFFLL) != 0) {
    double v14 = a8;
  }
  else {
    double v14 = a4;
  }
  if ((~*(void *)&a4 & 0x7FF0000000000000) != 0) {
    double v14 = a4;
  }
  if (a8 <= a4) {
    double v15 = a8;
  }
  else {
    double v15 = v14;
  }
  if (result >= v13
    || v11 >= v15
    || (~*(void *)&a5 & 0x7FF0000000000000) == 0 && (*(void *)&a5 & 0xFFFFFFFFFFFFFLL) != 0
    || (~*(void *)&v8 & 0x7FF0000000000000) == 0 && (*(void *)&v8 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    return NAN;
  }
  return result;
}

uint64_t sub_184CCBC44(double *a1, double *a2)
{
  return sub_184CCBD30(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_184CCBC58()
{
  return sub_1850C3E98();
}

uint64_t sub_184CCBCC0()
{
  return sub_184CCBAF8();
}

uint64_t sub_184CCBCCC()
{
  return sub_1850C3E98();
}

uint64_t sub_184CCBD30(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8) {
    return 1;
  }
  if ((~*(void *)&a1 & 0x7FF0000000000000) != 0) {
    return 0;
  }
  BOOL v11 = (~*(void *)&a5 & 0x7FF0000000000000) == 0 && (*(void *)&a5 & 0xFFFFFFFFFFFFFLL) != 0;
  return (*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && v11;
}

uint64_t sub_184CCBD88()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_184CCBE54(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_184CCC028(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_184CCC164(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_184CCC2D8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_184CCC518(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_184CCC68C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_184CCC8CC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_184CCCA10(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x184CCCBE8);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_184CCCC10(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_184CCCCDC(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for EitherSequence()
{
  return swift_getGenericMetadata();
}

uint64_t sub_184CCCE1C()
{
  return sub_184CD09A0();
}

uint64_t sub_184CCCE34()
{
  return sub_184CD0A34();
}

uint64_t sub_184CCCE60()
{
  return sub_184CD0A34();
}

uint64_t sub_184CCCE8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  v32[1] = a2;
  uint64_t v4 = a1[3];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1, a3);
  unsigned int v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v6, v9);
  uint64_t v12 = (char *)v32 - v11;
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v10, v15);
  unsigned int v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v16, v19);
  BOOL v22 = (char *)v32 - v21;
  MEMORY[0x1F4188790](v20, v23);
  int v25 = (char *)v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v26 + 16))(v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v25, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v12, v4);
    uint64_t v27 = a1[5];
    sub_1850C39F8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    uint64_t v28 = a1[4];
    uint64_t v33 = v13;
    uint64_t v34 = v4;
    uint64_t v35 = v28;
    uint64_t v36 = v27;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v25, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v22, v13);
    uint64_t v29 = a1[4];
    sub_1850C39F8();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
    uint64_t v30 = a1[5];
    uint64_t v33 = v13;
    uint64_t v34 = v4;
    uint64_t v35 = v29;
    uint64_t v36 = v30;
  }
  type metadata accessor for EitherSequence.Iterator();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_184CCD1C4(uint64_t a1, __n128 a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v5, v2, a1);
  swift_getEnumCaseMultiPayload();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v2, v5, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_1850C3BC8();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_184CCD3DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  sub_184CCCE8C(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void *))(*(a1 - 1) + 8);

  return v5(v3, a1);
}

uint64_t sub_184CCD43C()
{
  return 0;
}

uint64_t sub_184CCD448(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), __n128 a5)
{
  int v25 = a4;
  uint64_t v26 = a3;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1, a5);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v9, v14);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v22, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v20, v7);
    uint64_t v23 = v26;
    v25(v7, v26);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t v27 = v12;
    uint64_t v28 = v7;
    uint64_t v29 = a2;
    uint64_t v30 = v23;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v20, v12);
    v25(v12, a2);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    uint64_t v27 = v12;
    uint64_t v28 = v7;
    uint64_t v29 = a2;
    uint64_t v30 = v26;
  }
  _s5IndexOMa();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_184CCD708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v68 = a5;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  uint64_t v59 = (char *)&v52 - v12;
  uint64_t v60 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v58 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(v16 - 8);
  uint64_t v56 = v16;
  uint64_t v18 = MEMORY[0x1F4188790](v16, v17);
  uint64_t v54 = (char *)&v52 - v19;
  uint64_t v57 = *(void *)(v15 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v18, v20);
  uint64_t v53 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a2 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v21, v24);
  uint64_t v27 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v28);
  uint64_t v30 = (char *)&v52 - v29;
  uint64_t v69 = v15;
  uint64_t v70 = v8;
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  uint64_t v31 = _s5IndexOMa();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8, v33);
  uint64_t v36 = (char *)&v52 - v35;
  uint64_t v37 = (char *)&v52 + *(int *)(v34 + 56) - v35;
  uint64_t v67 = v23;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v38((char *)&v52 - v35, v65, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v37, v66, v31);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v38(v27, (uint64_t)v36, a2);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v39 = v60;
      uint64_t v40 = v58;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v27, v8);
      uint64_t v41 = v61;
      uint64_t v42 = v59;
      uint64_t v43 = v37;
      uint64_t v44 = v62;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v59, v43, v62);
      sub_1850C3AC8();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v44);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v8);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v36, a2);
    }
    uint64_t v57 = v60;
    uint64_t v15 = v8;
    uint64_t v30 = v27;
  }
  else
  {
    v38(v30, (uint64_t)v36, a2);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v45 = v57;
      uint64_t v46 = v53;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v53, v30, v15);
      int v48 = v54;
      uint64_t v47 = v55;
      uint64_t v49 = v37;
      uint64_t v50 = v56;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v49, v56);
      sub_1850C3AC8();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v50);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v15);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v57 + 8))(v30, v15);
  uint64_t result = sub_1850C3D28();
  __break(1u);
  return result;
}

uint64_t sub_184CCDD08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v69 = a1;
  uint64_t v71 = a2;
  uint64_t v72 = a6;
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v65 = AssociatedTypeWitness;
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness, v11);
  uint64_t v62 = (char *)&v54 - v13;
  uint64_t v63 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v60 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v17 - 8);
  uint64_t v58 = v17;
  uint64_t v19 = MEMORY[0x1F4188790](v17, v18);
  uint64_t v56 = (char *)&v54 - v20;
  uint64_t v59 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v54 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v22, v25);
  __n128 v28 = (char *)&v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v29);
  uint64_t v31 = (char *)&v54 - v30;
  uint64_t v55 = v16;
  uint64_t v73 = v16;
  uint64_t v74 = v9;
  uint64_t v61 = v9;
  uint64_t v32 = a3;
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  uint64_t v75 = a4;
  uint64_t v76 = a5;
  uint64_t v33 = _s5IndexOMa();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v36 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8, v35);
  uint64_t v38 = (char *)&v54 - v37;
  uint64_t v39 = (char *)&v54 + *(int *)(v36 + 56) - v37;
  uint64_t v70 = v24;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v40((char *)&v54 - v37, v68, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v39, v69, v33);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v69 = a3;
    v40(v28, (uint64_t)v38, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v41 = v63;
      uint64_t v43 = v60;
      uint64_t v42 = v61;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v28, v61);
      uint64_t v45 = v64;
      uint64_t v44 = v65;
      uint64_t v46 = v62;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v62, v39, v65);
      sub_1850C3AD8();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v42);
      uint64_t v32 = v69;
LABEL_6:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v38, v32);
    }
    uint64_t v59 = v63;
    uint64_t v55 = v61;
    uint64_t v31 = v28;
  }
  else
  {
    v40(v31, (uint64_t)v38, a3);
    uint64_t v69 = v33;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v47 = v59;
      int v48 = v54;
      uint64_t v49 = v55;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v54, v31, v55);
      uint64_t v50 = v56;
      uint64_t v51 = v57;
      uint64_t v52 = v58;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v39, v58);
      sub_1850C3AD8();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v59 + 8))(v31, v55);
  uint64_t result = sub_1850C3D28();
  __break(1u);
  return result;
}

uint64_t sub_184CCE340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v92 = a2;
  uint64_t v99 = a1;
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  uint64_t v86 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  unint64_t v85 = (char *)&v75 - v14;
  uint64_t v87 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v13, v15);
  v82 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v83 = *(void *)(v18 - 8);
  uint64_t v84 = v18;
  uint64_t v20 = MEMORY[0x1F4188790](v18, v19);
  long long v81 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v79 = (char *)&v75 - v24;
  uint64_t v80 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v78 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = v17;
  uint64_t v98 = v8;
  uint64_t v100 = v17;
  uint64_t v101 = v8;
  uint64_t v89 = a4;
  uint64_t v90 = a5;
  uint64_t v102 = a4;
  uint64_t v103 = a5;
  uint64_t v27 = _s5IndexOMa();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v27, v29);
  uint64_t v76 = (char *)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v30, v32);
  unint64_t v77 = (char *)&v75 - v34;
  uint64_t v35 = *(void *)(a3 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v33, v36);
  uint64_t v75 = (char *)&v75 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37, v39);
  uint64_t v41 = (char *)&v75 - v40;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v44 = MEMORY[0x1F4188790](TupleTypeMetadata3 - 8, v43);
  uint64_t v46 = (char *)&v75 - v45;
  uint64_t v47 = (char *)&v75 + *(int *)(v44 + 56) - v45;
  int v48 = (char *)&v75 + *(int *)(v44 + 72) - v45;
  uint64_t v95 = v35;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v49((char *)&v75 - v45, v96, a3);
  uint64_t v96 = v28;
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v50(v47, v99, v27);
  uint64_t v99 = (uint64_t)v48;
  v50(v48, v92, v27);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  long long v93 = v47;
  uint64_t v94 = a3;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v52 = v75;
    v49(v75, (uint64_t)v46, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v53 = v76;
      v50(v76, (uint64_t)v47, v27);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v54 = v87;
        uint64_t v55 = v82;
        (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v82, v52, v98);
        uint64_t v56 = v88;
        uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
        uint64_t v58 = v85;
        uint64_t v59 = AssociatedTypeWitness;
        v57(v85, v53, AssociatedTypeWitness);
        uint64_t v60 = v86;
        v57(v86, (char *)v99, v59);
        uint64_t v61 = v98;
        uint64_t v99 = sub_1850C3AE8();
        uint64_t v62 = *(void (**)(char *, uint64_t))(v56 + 8);
        v62(v60, v59);
        v62(v58, v59);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v61);
LABEL_8:
        uint64_t v73 = v94;
        (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v27);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v46, v73);
        return v99;
      }
      uint64_t v83 = v88;
      uint64_t v84 = AssociatedTypeWitness;
      unint64_t v77 = v53;
      uint64_t v80 = v87;
      uint64_t v97 = v98;
LABEL_13:
      (*(void (**)(char *, uint64_t))(v83 + 8))(v77, v84);
      goto LABEL_14;
    }
    uint64_t v80 = v87;
    uint64_t v97 = v98;
  }
  else
  {
    v49(v41, (uint64_t)v46, a3);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v63 = v77;
      v50(v77, (uint64_t)v47, v27);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v64 = v80;
        uint64_t v65 = v78;
        (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v78, v41, v97);
        uint64_t v67 = v83;
        uint64_t v66 = v84;
        uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
        uint64_t v69 = v79;
        v68(v79, v63, v84);
        uint64_t v70 = v81;
        v68(v81, (char *)v99, v66);
        uint64_t v71 = v97;
        uint64_t v99 = sub_1850C3AE8();
        uint64_t v72 = *(void (**)(char *, uint64_t))(v67 + 8);
        v72(v70, v66);
        v72(v69, v66);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v71);
        goto LABEL_8;
      }
      uint64_t v52 = v41;
      goto LABEL_13;
    }
    uint64_t v52 = v41;
  }
LABEL_14:
  (*(void (**)(char *, uint64_t))(v80 + 8))(v52, v97);
  uint64_t result = sub_1850C3D28();
  __break(1u);
  return result;
}

uint64_t sub_184CCEBC4@<X0>(void (*a1)(void *, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v71 = a1;
  uint64_t v75 = a5;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  uint64_t v66 = (char *)&v59 - v12;
  uint64_t v67 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v64 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(v16 - 8);
  uint64_t v62 = v16;
  uint64_t v18 = MEMORY[0x1F4188790](v16, v17);
  uint64_t v60 = (char *)&v59 - v19;
  uint64_t v63 = *(void *)(v15 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v18, v20);
  uint64_t v59 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a2 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v21, v24);
  uint64_t v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v28);
  uint64_t v30 = (char *)&v59 - v29;
  uint64_t v72 = v15;
  uint64_t v73 = a3;
  v76[0] = v15;
  v76[1] = v8;
  v76[2] = a3;
  v76[3] = a4;
  uint64_t v65 = a4;
  uint64_t v31 = _s5IndexOMa();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8, v33);
  __n128 v36 = (char *)&v59 - v35;
  uint64_t v37 = (char *)&v59 + *(int *)(v34 + 56) - v35;
  uint64_t v74 = v23;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v38((char *)&v59 - v35, v70, a2);
  (*(void (**)(char *, void (*)(void *, void), uint64_t))(*(void *)(v31 - 8) + 16))(v37, v71, v31);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v38(v27, (uint64_t)v36, a2);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v39 = v67;
      uint64_t v40 = v64;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v64, v27, v8);
      uint64_t v42 = v68;
      uint64_t v41 = v69;
      __n128 v43 = v66;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v66, v37, v69);
      uint64_t v71 = (void (*)(void *, void))sub_1850C3B68();
      uint64_t v45 = v44;
      uint64_t v46 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16))(v75, v45, v46);
      v71(v76, 0);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v8);
      return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v36, a2);
    }
    uint64_t v63 = v67;
    uint64_t v72 = v8;
    uint64_t v30 = v27;
  }
  else
  {
    v38(v30, (uint64_t)v36, a2);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v47 = v63;
      int v48 = v59;
      uint64_t v49 = v30;
      uint64_t v50 = v72;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v59, v49, v72);
      uint64_t v51 = v60;
      uint64_t v52 = v61;
      uint64_t v53 = v37;
      uint64_t v54 = v62;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v53, v62);
      uint64_t v71 = (void (*)(void *, void))sub_1850C3B68();
      uint64_t v56 = v55;
      uint64_t v57 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(v75, v56, v57);
      v71(v76, 0);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v54);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v50);
      return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v36, a2);
    }
  }
  (*(void (**)(char *, uint64_t))(v63 + 8))(v30, v72);
  uint64_t result = sub_1850C3D28();
  __break(1u);
  return result;
}

uint64_t sub_184CCF2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness, v11);
  uint64_t v53 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v52 = (char *)&v50 - v15;
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(v50 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v50, v16);
  uint64_t v51 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)&v50 - v20;
  uint64_t v55 = a3;
  uint64_t v56 = a5;
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v57 = a4;
  uint64_t v58 = a6;
  uint64_t v64 = a5;
  uint64_t v65 = a6;
  uint64_t v22 = _s5IndexOMa();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22, v24);
  uint64_t v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v28);
  uint64_t v30 = (char *)&v50 - v29;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v33 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8, v32);
  uint64_t v35 = (char *)&v50 - v34;
  __n128 v36 = (char *)&v50 + *(int *)(v33 + 56) - v34;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v37((char *)&v50 - v34, v60, v22);
  v37(v36, v61, v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v61 = v23;
    v37(v27, (uint64_t)v35, v22);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v38 = v59;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
      uint64_t v40 = v52;
      v39(v52, v27, AssociatedTypeWitness);
      uint64_t v41 = v53;
      v39(v53, v36, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      char v42 = sub_1850C39C8();
      __n128 v43 = *(void (**)(char *, uint64_t))(v38 + 8);
      v43(v41, AssociatedTypeWitness);
      v43(v40, AssociatedTypeWitness);
      uint64_t v23 = v61;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v23 + 8))(v35, v22);
      return v42 & 1;
    }
    uint64_t v54 = v59;
    uint64_t v50 = AssociatedTypeWitness;
    uint64_t v30 = v27;
  }
  else
  {
    v37(v30, (uint64_t)v35, v22);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v44 = v54;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      uint64_t v46 = v50;
      v45(v21, v30, v50);
      uint64_t v47 = v51;
      v45(v51, v36, v46);
      swift_getAssociatedConformanceWitness();
      char v42 = sub_1850C39C8();
      int v48 = *(void (**)(char *, uint64_t))(v44 + 8);
      v48(v47, v46);
      v48(v21, v46);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v50);
  uint64_t result = sub_1850C3D28();
  __break(1u);
  return result;
}

uint64_t sub_184CCF804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness, v11);
  uint64_t v53 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v52 = (char *)&v50 - v15;
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(v50 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v50, v16);
  uint64_t v51 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)&v50 - v20;
  uint64_t v55 = a3;
  uint64_t v56 = a5;
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v57 = a4;
  uint64_t v58 = a6;
  uint64_t v64 = a5;
  uint64_t v65 = a6;
  uint64_t v22 = _s5IndexOMa();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22, v24);
  uint64_t v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v28);
  uint64_t v30 = (char *)&v50 - v29;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v33 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8, v32);
  uint64_t v35 = (char *)&v50 - v34;
  __n128 v36 = (char *)&v50 + *(int *)(v33 + 56) - v34;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v37((char *)&v50 - v34, v60, v22);
  v37(v36, v61, v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v61 = v23;
    v37(v27, (uint64_t)v35, v22);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v38 = v59;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
      uint64_t v40 = v52;
      v39(v52, v27, AssociatedTypeWitness);
      uint64_t v41 = v53;
      v39(v53, v36, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      char v42 = sub_1850C3968();
      __n128 v43 = *(void (**)(char *, uint64_t))(v38 + 8);
      v43(v41, AssociatedTypeWitness);
      v43(v40, AssociatedTypeWitness);
      uint64_t v23 = v61;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v23 + 8))(v35, v22);
      return v42 & 1;
    }
    uint64_t v54 = v59;
    uint64_t v50 = AssociatedTypeWitness;
    uint64_t v30 = v27;
  }
  else
  {
    v37(v30, (uint64_t)v35, v22);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v44 = v54;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      uint64_t v46 = v50;
      v45(v21, v30, v50);
      uint64_t v47 = v51;
      v45(v51, v36, v46);
      swift_getAssociatedConformanceWitness();
      char v42 = sub_1850C3968();
      int v48 = *(void (**)(char *, uint64_t))(v44 + 8);
      v48(v47, v46);
      v48(v21, v46);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v50);
  uint64_t result = sub_1850C3D28();
  __break(1u);
  return result;
}

uint64_t sub_184CCFD68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_184CCF804(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_184CCFD78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_184CCF2A0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_184CCFD88(uint64_t a1, uint64_t a2, __n128 a3)
{
  return sub_184CCD448(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), MEMORY[0x1E4FBB620], a3);
}

uint64_t sub_184CCFDBC(uint64_t a1, uint64_t a2, __n128 a3)
{
  return sub_184CCD448(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), MEMORY[0x1E4FBB648], a3);
}

void (*sub_184CCFDF0(uint64_t **a1, void (*a2)(void *, void), uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (uint64_t)sub_184CCFE68(v8, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16));
  return sub_184CC83D0;
}

void (*sub_184CCFE68(uint64_t *a1, void (*a2)(void *, void), uint64_t a3, uint64_t a4, uint64_t a5))(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v11;
  uint64_t v12 = malloc(*(void *)(v11 + 64));
  a1[2] = (uint64_t)v12;
  sub_184CCEBC4(a2, a3, a4, a5, (uint64_t)v12);
  return sub_184CC8504;
}

uint64_t sub_184CCFF58@<X0>(uint64_t a1@<X8>)
{
  _s5IndexOMa();
  uint64_t v2 = sub_1850C3B88();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_184CCFFE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_184CCDD08(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t sub_184CCFFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CCE340(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t sub_184CCFFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CD0D0C(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

uint64_t sub_184CD0038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CD0D0C(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

uint64_t sub_184CD0078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_184CCD708(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t sub_184CD0084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 16);
  uint64_t v5 = *(void *)(a3 - 8);
  long long v13 = *(_OWORD *)(a2 + 16);
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v7 = _s5IndexOMa();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v13 - v10;
  sub_184CCD708(a1, a2, v5, v6, (uint64_t)&v13 - v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v11, v7);
}

uint64_t sub_184CD01A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v67 = a1;
  uint64_t v70 = a5;
  uint64_t v65 = a4;
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v63 = AssociatedTypeWitness;
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  uint64_t v60 = (char *)&v54 - v12;
  uint64_t v61 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v59 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = a3;
  uint64_t v15 = *(void *)(a3 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(v17 - 8);
  uint64_t v57 = v17;
  uint64_t v19 = MEMORY[0x1F4188790](v17, v18);
  uint64_t v55 = (char *)&v54 - v20;
  uint64_t v58 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v54 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a2 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v22, v25);
  __n128 v28 = (char *)&v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v29);
  uint64_t v31 = (char *)&v54 - v30;
  uint64_t v71 = v16;
  uint64_t v72 = v8;
  uint64_t v32 = v8;
  uint64_t v73 = v15;
  uint64_t v74 = v7;
  uint64_t v33 = _s5IndexOMa();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v36 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8, v35);
  uint64_t v38 = (char *)&v54 - v37;
  uint64_t v39 = (char *)&v54 + *(int *)(v36 + 56) - v37;
  uint64_t v69 = v24;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v40((char *)&v54 - v37, v66, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v39, v67, v33);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v68 = a2;
  if (EnumCaseMultiPayload == 1)
  {
    v40(v28, (uint64_t)v38, a2);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v42 = v61;
      __n128 v43 = v59;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v59, v28, v32);
      uint64_t v45 = v62;
      uint64_t v44 = v63;
      uint64_t v46 = v60;
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v60, v39, v63);
      sub_1850C3938();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v32);
LABEL_6:
      uint64_t v52 = v68;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v38, v52);
    }
    uint64_t v58 = v61;
    uint64_t v16 = v32;
    uint64_t v31 = v28;
  }
  else
  {
    v40(v31, (uint64_t)v38, a2);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v47 = v58;
      int v48 = v54;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v54, v31, v16);
      uint64_t v49 = v55;
      uint64_t v50 = v56;
      uint64_t v51 = v57;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v39, v57);
      sub_1850C3938();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v16);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v58 + 8))(v31, v16);
  uint64_t result = sub_1850C3D28();
  __break(1u);
  return result;
}

uint64_t sub_184CD07B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_184CD01A0(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t sub_184CD07BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 16);
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v6 + 8);
  long long v15 = *(_OWORD *)(a2 + 16);
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v9 = _s5IndexOMa();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  __n128 v13 = (char *)&v15 - v12;
  sub_184CD01A0(a1, a2, v5, v6, (uint64_t)&v15 - v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v13, v9);
}

uint64_t sub_184CD08E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_184CCDD08(a1, a2, a3, *(void *)(*(void *)(a4 - 8) + 8), *(void *)(*(void *)(a4 - 16) + 8), a5);
}

uint64_t sub_184CD08F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CCE340(a1, a2, a3, *(void *)(*(void *)(a4 - 8) + 8), *(void *)(*(void *)(a4 - 16) + 8));
}

uint64_t sub_184CD0900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_184CCDD08(a1, a2, a3, *(void *)(*(void *)(*(void *)(a4 - 8) + 8) + 8), *(void *)(*(void *)(*(void *)(a4 - 16) + 8) + 8), a5);
}

uint64_t sub_184CD091C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CCE340(a1, a2, a3, *(void *)(*(void *)(*(void *)(a4 - 8) + 8) + 8), *(void *)(*(void *)(*(void *)(a4 - 16) + 8) + 8));
}

uint64_t sub_184CD0934()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CD0950()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CD096C()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CD0988()
{
  return sub_184CD09A0();
}

uint64_t sub_184CD09A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CD09DC()
{
  return sub_184CD0A34();
}

uint64_t sub_184CD0A08()
{
  return sub_184CD0A34();
}

uint64_t sub_184CD0A34()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CD0A8C()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CD0AA8(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_1850C3B78();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  __n128 v13 = (char *)v19 - v12;
  v19[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = sub_1850C3988();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v13, a1, v5);
  v14(v10, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    __n128 v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v10, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v13, v5);
    goto LABEL_5;
  }
  char v15 = sub_1850C3988();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v10, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v13, v5);
  if ((v15 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_184CD0CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CD0D0C(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

uint64_t sub_184CD0CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184CD0D0C(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

uint64_t sub_184CD0D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  __n128 v25 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v14, v18);
  uint64_t v20 = (char *)&v24 - v19;
  char v21 = sub_1850C3988();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, a2, v11);
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v22 = v25(v20, &v16[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, AssociatedTypeWitness);
  if ((v22 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t type metadata accessor for EitherSequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t _s5IndexOMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_184CD0FB0()
{
  return sub_184CD10A0();
}

void *sub_184CD0FC4(void *a1, unsigned __int8 *a2)
{
  return sub_184CD11A0(a1, a2);
}

uint64_t sub_184CD0FD8(unsigned __int8 *a1)
{
  return sub_184CD13DC(a1);
}

uint64_t sub_184CD0FEC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_184CD15B0(a1, a2);
}

unsigned __int8 *sub_184CD1000(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_184CD1784(a1, a2);
}

uint64_t sub_184CD1014(uint64_t a1, unsigned __int8 *a2)
{
  return sub_184CD1A10(a1, a2);
}

unsigned __int8 *sub_184CD1028(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_184CD1BE4(a1, a2);
}

uint64_t sub_184CD103C(unsigned __int16 *a1, unsigned int a2)
{
  return sub_184CD1E70(a1, a2);
}

void sub_184CD1050(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_184CD1064(unsigned __int8 *a1)
{
  return sub_184CD2284(a1);
}

void sub_184CD1078(unsigned char *a1, unsigned int a2)
{
}

uint64_t sub_184CD108C()
{
  return sub_184CD10A0();
}

uint64_t sub_184CD10A0()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_184CD118C(void *a1, unsigned __int8 *a2)
{
  return sub_184CD11A0(a1, a2);
}

void *sub_184CD11A0(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v10 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_21;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_21:
          int v18 = (v17 | (v15 << (8 * v9))) + 2;
          unsigned int v14 = v17 + 2;
          if (v9 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((unsigned char *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_184CD13C8(unsigned __int8 *a1)
{
  return sub_184CD13DC(a1);
}

uint64_t sub_184CD13DC(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (v6 <= v4) {
    unint64_t v6 = v4;
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_12;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_12:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1) {
    uint64_t v12 = *(void *)(v5 - 8);
  }
  else {
    uint64_t v12 = v3;
  }
  if (v7 == 1) {
    uint64_t v13 = v5;
  }
  else {
    uint64_t v13 = AssociatedTypeWitness;
  }
  unsigned int v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v12 + 8);

  return v14(a1, v13);
}

uint64_t sub_184CD159C(uint64_t a1, unsigned __int8 *a2)
{
  return sub_184CD15B0(a1, a2);
}

uint64_t sub_184CD15B0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *sub_184CD1770(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_184CD1784(a1, a2);
}

unsigned __int8 *sub_184CD1784(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t sub_184CD19FC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_184CD1A10(a1, a2);
}

uint64_t sub_184CD1A10(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *sub_184CD1BD0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_184CD1BE4(a1, a2);
}

unsigned __int8 *sub_184CD1BE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t sub_184CD1E5C(unsigned __int16 *a1, unsigned int a2)
{
  return sub_184CD1E70(a1, a2);
}

uint64_t sub_184CD1E70(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_23;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_23:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 2) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_23;
  }
LABEL_15:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 255;
}

void sub_184CD2014(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

void sub_184CD2028(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x184CD2248);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_184CD2270(unsigned __int8 *a1)
{
  return sub_184CD2284(a1);
}

uint64_t sub_184CD2284(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2) {
    unint64_t v3 = v2;
  }
  uint64_t result = a1[v3];
  if (result >= 2)
  {
    if (v3 <= 3) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | ((result - 2) << (8 * v3))) + 2;
        unsigned int v8 = v6 + 2;
        if (v3 >= 4) {
          uint64_t result = v8;
        }
        else {
          uint64_t result = v7;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_184CD23AC(unsigned char *a1, unsigned int a2)
{
}

void sub_184CD23C0(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  if (a2 > 1)
  {
    size_t v7 = *(void *)(v4 + 64);
    size_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v8 <= v7) {
      size_t v9 = v7;
    }
    else {
      size_t v9 = v8;
    }
    unsigned int v10 = a2 - 2;
    if (v9 < 4)
    {
      unsigned int v11 = v10 >> (8 * v9);
      int v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 2;
      bzero(a1, v9);
      if (v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if (v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 2;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v6 <= *(void *)(v5 + 64)) {
      unint64_t v6 = *(void *)(v5 + 64);
    }
    a1[v6] = a2;
  }
}

uint64_t sub_184CD2534(int a1)
{
  if (!a1) {
    return 0x72656765746E69;
  }
  if (a1 == 256) {
    return 0x74616F6C66;
  }
  sub_1850C3CE8();
  swift_bridgeObjectRelease();
  sub_1850C3D68();
  sub_1850C39E8();
  swift_bridgeObjectRelease();
  sub_1850C39E8();
  return 0x7761722874696E69;
}

uint64_t sub_184CD261C()
{
  return sub_184CD2534(*v0);
}

double static CGPoint.zero.getter()
{
  return 0.0;
}

CGPoint __swiftcall CGPoint.init(x:y:)(Swift::Int x, Swift::Int y)
{
  double v2 = (double)x;
  double v3 = (double)y;
  result.CGFloat y = v3;
  result.CGFloat x = v2;
  return result;
}

CGPoint_optional __swiftcall CGPoint.init(dictionaryRepresentation:)(CFDictionaryRef dictionaryRepresentation)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  point.CGFloat x = 0.0;
  point.CGFloat y = 0.0;
  BOOL v2 = CGPointMakeWithDictionaryRepresentation(dictionaryRepresentation, &point);

  if (v2) {
    char x_low = LOBYTE(point.x);
  }
  else {
    char x_low = 0;
  }
  result.value.CGFloat y = v4;
  result.value.CGFloat x = v3;
  result.is_nil = x_low;
  return result;
}

uint64_t CGPoint.customMirror.getter(double a1, double a2)
{
  uint64_t v4 = sub_1850C3EC8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  size_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F0);
  MEMORY[0x1F4188790](v9 - 8, v10);
  int v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)unsigned int v19 = a1;
  *(double *)&v19[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1850CBAB0;
  *(void *)(v13 + 32) = 120;
  *(void *)(v13 + 40) = 0xE100000000000000;
  uint64_t v14 = MEMORY[0x1E4FBC958];
  *(double *)(v13 + 48) = a1;
  *(void *)(v13 + 72) = v14;
  *(void *)(v13 + 80) = 121;
  *(void *)(v13 + 88) = 0xE100000000000000;
  *(void *)(v13 + 120) = v14;
  *(double *)(v13 + 96) = a2;
  uint64_t v15 = *MEMORY[0x1E4FBC410];
  uint64_t v16 = sub_1850C3EB8();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v12, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FBC430], v4);
  type metadata accessor for CGPoint(0);
  return sub_1850C3EE8();
}

uint64_t sub_184CD28F8()
{
  return CGPoint.customMirror.getter(*v0, v0[1]);
}

void CGPoint.customPlaygroundQuickLook.getter(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 32) = 11;
}

__n128 sub_184CD2910@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[2].n128_u8[0] = 11;
  return result;
}

uint64_t CGPoint.debugDescription.getter()
{
  return 40;
}

uint64_t sub_184CD29B8()
{
  return 40;
}

BOOL static CGPoint.== infix(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

uint64_t sub_184CD2A60()
{
  return sub_1850C3E78();
}

uint64_t sub_184CD2AAC()
{
  return sub_1850C3E88();
}

uint64_t sub_184CD2B1C()
{
  return sub_184CD2A60();
}

uint64_t sub_184CD2B24()
{
  return sub_1850C3E98();
}

double CGPoint.init(from:)(void *a1)
{
  return sub_184CD2CA0(a1);
}

uint64_t CGPoint.encode(to:)(void *a1, double a2, double a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3F18();
  double v9 = a2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  sub_184CD2DD0();
  sub_1850C3DA8();
  if (!v3)
  {
    double v9 = a3;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    sub_1850C3DA8();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t sub_184CD2C84(void *a1)
{
  return CGPoint.encode(to:)(a1, *v1, v1[1]);
}

double sub_184CD2CA0(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3EF8();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_184C9D3E4();
    sub_1850C3D78();
    double v2 = v5;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_1850C3D78();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

unint64_t sub_184CD2DD0()
{
  unint64_t result = qword_1EB288A90;
  if (!qword_1EB288A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB288A90);
  }
  return result;
}

unint64_t sub_184CD2E28()
{
  unint64_t result = qword_1E8F8B928;
  if (!qword_1E8F8B928)
  {
    type metadata accessor for CGPoint(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B928);
  }
  return result;
}

uint64_t Region.hash(into:)()
{
  return sub_1850C3E68();
}

uint64_t Region.hashValue.getter()
{
  return sub_1850C3E98();
}

uint64_t sub_184CD2FA8()
{
  return sub_1850C3E98();
}

uint64_t sub_184CD3008()
{
  return sub_1850C3E98();
}

uint64_t _s12CoreGraphics6RegionV2eeoiySbAC_ACtFZ_0(float64x2_t *a1, uint64_t a2)
{
  float64_t v3 = a1[2].f64[0];
  float64_t v2 = a1[2].f64[1];
  float64_t v4 = a1[3].f64[0];
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  float64x2_t v8 = *(float64x2_t *)a2;
  float64_t v9 = a1->f64[0];
  uint64_t v10 = *(void *)&a1->f64[0] & 0x7FF0000000000000;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(a1[1], *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) == 0)
  {
    if (v10 != 0x7FF0000000000000 || (*(void *)&v9 & 0xFFFFFFFFFFFFFLL) == 0) {
      return 0;
    }
    if ((~*(void *)&v8.f64[0] & 0x7FF0000000000000) != 0 || (*(void *)&v8.f64[0] & 0xFFFFFFFFFFFFFLL) == 0) {
      return 0;
    }
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)&v9 & 0xFFFFFFFFFFFFFLL;
  if (v10 == 0x7FF0000000000000 && v13 != 0)
  {
LABEL_20:
    if ((~*(void *)&v8.f64[0] & 0x7FF0000000000000) == 0 && (*(void *)&v8.f64[0] & 0xFFFFFFFFFFFFFLL) != 0) {
      goto LABEL_28;
    }
    BOOL v16 = 0;
    goto LABEL_26;
  }
  uint64_t v15 = *(void *)(*(void *)&v3 + 16);
  BOOL v16 = v15 == 0;
  if ((~*(void *)&v8.f64[0] & 0x7FF0000000000000) != 0 || (*(void *)&v8.f64[0] & 0xFFFFFFFFFFFFFLL) == 0)
  {
LABEL_26:
    uint64_t v18 = *(void *)(v6 + 16);
    uint64_t result = v16 ^ (v18 == 0) ^ 1u;
    if (v16 || !v18) {
      return result;
    }
    goto LABEL_28;
  }
  if (!v15) {
    return 0;
  }
LABEL_28:
  uint64_t v20 = *(void *)(*(void *)&v3 + 16);
  if (v20 != *(void *)(v6 + 16)) {
    return 0;
  }
  if (v20) {
    BOOL v21 = *(void *)&v3 == v6;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    int v22 = (double *)(*(void *)&v3 + 32);
    BOOL v23 = (double *)(v6 + 32);
    while (*v22 == *v23)
    {
      ++v23;
      ++v22;
      if (!--v20) {
        goto LABEL_36;
      }
    }
    return 0;
  }
LABEL_36:
  uint64_t v24 = *(void *)(*(void *)&v2 + 16);
  if (v24 != *(void *)(v5 + 16)) {
    return 0;
  }
  if (v24 && *(void *)&v2 != v5)
  {
    uint64_t v25 = (int *)(*(void *)&v2 + 32);
    uint64_t v26 = (int *)(v5 + 32);
    do
    {
      int v28 = *v25++;
      int v27 = v28;
      int v29 = *v26++;
      if (v27 != v29) {
        return 0;
      }
    }
    while (--v24);
  }
  uint64_t v30 = *(void *)(*(void *)&v4 + 16);
  if (v30 != *(void *)(v7 + 16)) {
    return 0;
  }
  if (!v30 || *(void *)&v4 == v7) {
    return 1;
  }
  uint64_t v31 = (double *)(*(void *)&v4 + 32);
  uint64_t v32 = (double *)(v7 + 32);
  uint64_t v33 = v30 - 1;
  do
  {
    double v34 = *v31++;
    double v35 = v34;
    double v36 = *v32++;
    double v37 = v36;
    BOOL v39 = v33-- != 0;
    uint64_t result = v35 == v37;
  }
  while (v35 == v37 && v39);
  return result;
}

unint64_t sub_184CD322C()
{
  unint64_t result = qword_1E8F8B930;
  if (!qword_1E8F8B930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B930);
  }
  return result;
}

CGImageRef_optional __swiftcall CGImageRef.copy(maskingColorComponents:)(Swift::OpaquePointer maskingColorComponents)
{
  return (CGImageRef_optional)CGImageCreateWithMaskingColors(v1, (const CGFloat *)maskingColorComponents._rawValue + 4);
}

double Region.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v30 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a4);
  float64x2_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  int v12 = (char *)&v25 - v11;
  int64x2_t v38 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v39 = v38;
  v40.i64[0] = MEMORY[0x1E4FBC860];
  v40.i64[1] = MEMORY[0x1E4FBC860];
  uint64_t v41 = MEMORY[0x1E4FBC860];
  uint64_t v27 = v6;
  uint64_t v28 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_1850C39F8();
  uint64_t v29 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t v31 = v12;
  uint64_t v13 = AssociatedTypeWitness;
  sub_1850C3BC8();
  uint64_t v14 = v35;
  if (v35)
  {
    uint64_t v16 = *((void *)&v32 + 1);
    uint64_t v15 = v32;
    uint64_t v18 = v33;
    uint64_t v17 = v34;
    uint64_t v19 = v36;
    uint64_t v20 = v37;
    do
    {
      *(void *)&long long v32 = v15;
      *((void *)&v32 + 1) = v16;
      uint64_t v33 = v18;
      uint64_t v34 = v17;
      uint64_t v35 = v14;
      uint64_t v36 = v19;
      uint64_t v37 = v20;
      Region.formUnion(_:)(&v32);
      sub_184CD3B4C(v15, v16, v18, v17, v14);
      sub_1850C3BC8();
      uint64_t v16 = *((void *)&v32 + 1);
      uint64_t v15 = v32;
      uint64_t v18 = v33;
      uint64_t v17 = v34;
      uint64_t v14 = v35;
      uint64_t v19 = v36;
      uint64_t v20 = v37;
    }
    while (v35);
  }
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v13);
  uint64_t v21 = v41;
  int64x2_t v22 = v39;
  BOOL v23 = v30;
  *uint64_t v30 = v38;
  v23[1] = v22;
  double result = *(double *)v40.i64;
  v23[2] = v40;
  v23[3].i64[0] = v21;
  return result;
}

int64x2_t Region.init()@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *a1 = result;
  a1[1] = result;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  a1[2].i64[0] = MEMORY[0x1E4FBC860];
  a1[2].i64[1] = v2;
  a1[3].i64[0] = v2;
  return result;
}

uint64_t Region.formUnion(_:)(long long *a1)
{
  uint64_t v2 = v1;
  long long v4 = a1[1];
  long long v56 = *a1;
  long long v57 = v4;
  __n128 v5 = (__n128)a1[2];
  __n128 v58 = v5;
  uint64_t v59 = *((void *)a1 + 6);
  double v6 = *(double *)v2;
  uint64_t v7 = v56;
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)v2 & 0x7FF0000000000000;
  uint64_t v10 = *(void *)v2 & 0xFFFFFFFFFFFFFLL;
  if (v10) {
    BOOL v11 = v9 == 0x7FF0000000000000;
  }
  else {
    BOOL v11 = 0;
  }
  uint64_t result = !v11 && *(void *)(v8 + 16) == 0;
  uint64_t v13 = *(uint64_t *)(v2 + 8);
  double v14 = *(double *)(v2 + 16);
  double v15 = *(double *)(v2 + 24);
  uint64_t v16 = *((void *)&v56 + 1);
  v5.n128_u64[0] = v57;
  uint64_t v17 = v56 & 0xFFFFFFFFFFFFFLL;
  if ((v56 & 0x7FF0000000000000) == 0x7FF0000000000000 && v17) {
    return result;
  }
  uint64_t v18 = *(void *)(v58.n128_u64[0] + 16);
  if ((v56 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    if (v9 == 0x7FF0000000000000 && v10)
    {
      if (!v17) {
        goto LABEL_11;
      }
      return result;
    }
    if (v17) {
      return result;
    }
  }
  else if (v11)
  {
LABEL_11:
    swift_release();
    swift_release();
    swift_release();
    long long v19 = a1[1];
    *(_OWORD *)uint64_t v2 = *a1;
    *(_OWORD *)(v2 + 16) = v19;
    *(_OWORD *)(v2 + 32) = a1[2];
    *(void *)(v2 + 48) = *((void *)a1 + 6);
    return sub_184CD3B9C((uint64_t)&v56);
  }
  if (*((double *)&v57 + 1) < v14)
  {
    if (v18) {
      uint64_t v20 = *(void *)(v58.n128_u64[0] + 16);
    }
    else {
      uint64_t v20 = 2;
    }
    uint64_t v21 = sub_184CE293C(0, v20);
    if (v6 > *(double *)&v56) {
      double v22 = *(double *)&v56;
    }
    else {
      double v22 = v6;
    }
    if (*((double *)&v56 + 1) >= *(double *)&v13)
    {
      if ((~*((void *)&v56 + 1) & 0x7FF0000000000000) != 0)
      {
        uint64_t v13 = *((uint64_t *)&v56 + 1);
      }
      else if ((*((void *)&v56 + 1) & 0xFFFFFFFFFFFFFLL) == 0)
      {
        uint64_t v13 = *((uint64_t *)&v56 + 1);
      }
    }
    uint64_t v35 = *(void *)&v22;
    sub_184CD3B9C((uint64_t)&v56);
    return sub_184CE4D58(0, 0, 0, v20, v21, v35, 0, v13, 0, (void *)v2, (uint64_t)&v56);
  }
  if (v15 < *(double *)&v57)
  {
    if (*(void *)(v8 + 16)) {
      int64_t v23 = *(void *)(v8 + 16);
    }
    else {
      int64_t v23 = 2;
    }
    if (v18) {
      uint64_t v24 = *(void *)(v58.n128_u64[0] + 16);
    }
    else {
      uint64_t v24 = 2;
    }
    uint64_t v25 = sub_184CE293C(0, v24);
    if (v6 > *(double *)&v56) {
      double v26 = *(double *)&v56;
    }
    else {
      double v26 = v6;
    }
    if (*((double *)&v56 + 1) >= *(double *)&v13)
    {
      if ((~*((void *)&v56 + 1) & 0x7FF0000000000000) != 0)
      {
        uint64_t v13 = *((uint64_t *)&v56 + 1);
      }
      else if ((*((void *)&v56 + 1) & 0xFFFFFFFFFFFFFLL) == 0)
      {
        uint64_t v13 = *((uint64_t *)&v56 + 1);
      }
    }
    uint64_t v44 = *(void *)&v26;
    sub_184CD3B9C((uint64_t)&v56);
    return sub_184CE4D58(v23, v23, 0, v24, v25, v44, 0, v13, 0, (void *)v2, (uint64_t)&v56);
  }
  if (*(double *)&v13 < *(double *)&v56)
  {
    uint64_t result = sub_184CEA964(result, v5, *((double *)&v57 + 1));
    if (*(void *)(v58.n128_u64[0] + 16)) {
      uint64_t v28 = *(void *)(v58.n128_u64[0] + 16);
    }
    else {
      uint64_t v28 = 2;
    }
    uint64_t v29 = v27 - result;
    if (__OFSUB__(v27, result))
    {
      __break(1u);
    }
    else
    {
      uint64_t v30 = v29 + v28;
      if (!__OFADD__(v29, v28))
      {
        uint64_t v31 = result;
        int64_t v32 = v27;
        uint64_t v33 = sub_184CE293C(result, v27);
        uint64_t result = sub_184CE293C(0, v28);
        uint64_t v34 = v33 + result;
        if (!__OFADD__(v33, result))
        {
          sub_184CD3B9C((uint64_t)&v56);
          return sub_184CE88E4(v31, v32, 0, v30, v34, 0, 1, v16, 0, v2, (uint64_t)&v56, v31, v32);
        }
        goto LABEL_96;
      }
    }
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if (*((double *)&v56 + 1) < v6)
  {
    uint64_t result = sub_184CEA964(result, v5, *((double *)&v57 + 1));
    if (*(void *)(v58.n128_u64[0] + 16)) {
      uint64_t v37 = *(void *)(v58.n128_u64[0] + 16);
    }
    else {
      uint64_t v37 = 2;
    }
    uint64_t v38 = v36 - result;
    if (!__OFSUB__(v36, result))
    {
      uint64_t v39 = v38 + v37;
      if (!__OFADD__(v38, v37))
      {
        uint64_t v40 = result;
        int64_t v41 = v36;
        uint64_t v42 = sub_184CE293C(result, v36);
        uint64_t result = sub_184CE293C(0, v37);
        uint64_t v43 = v42 + result;
        if (!__OFADD__(v42, result))
        {
          sub_184CD3B9C((uint64_t)&v56);
          return sub_184CE87CC(v40, v41, 0, v39, v43, v7, 0, 0, 1, v2, (uint64_t)&v56, v40, v41);
        }
        goto LABEL_99;
      }
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  if (result
    && v6 <= *(double *)&v56
    && *((double *)&v56 + 1) <= *(double *)&v13
    && v14 <= *(double *)&v57
    && *((double *)&v57 + 1) <= v15)
  {
    return result;
  }
  if (!v18)
  {
    BOOL v45 = *(double *)&v56 <= v6;
    if (*(double *)&v13 > *((double *)&v56 + 1)) {
      BOOL v45 = 0;
    }
    if (*(double *)&v57 > v14) {
      BOOL v45 = 0;
    }
    if (v15 > *((double *)&v57 + 1)) {
      BOOL v45 = 0;
    }
    if (v11 || v45) {
      goto LABEL_11;
    }
  }
  uint64_t result = sub_184CEA964(result, v5, *((double *)&v57 + 1));
  if (*(void *)(v58.n128_u64[0] + 16)) {
    uint64_t v47 = *(void *)(v58.n128_u64[0] + 16);
  }
  else {
    uint64_t v47 = 2;
  }
  uint64_t v48 = v46 - result;
  if (__OFSUB__(v46, result)) {
    goto LABEL_100;
  }
  uint64_t v49 = v48 + v47;
  if (__OFADD__(v48, v47))
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  uint64_t v50 = result;
  int64_t v51 = v46;
  uint64_t v52 = sub_184CE293C(result, v46);
  uint64_t result = sub_184CE293C(0, v47);
  uint64_t v53 = v52 + result;
  if (__OFADD__(v52, result))
  {
LABEL_102:
    __break(1u);
    return result;
  }
  if (v6 > *(double *)&v56) {
    double v54 = *(double *)&v56;
  }
  else {
    double v54 = v6;
  }
  if (*((double *)&v56 + 1) >= *(double *)&v13)
  {
    if ((~*((void *)&v56 + 1) & 0x7FF0000000000000) != 0)
    {
      uint64_t v13 = *((uint64_t *)&v56 + 1);
    }
    else if ((*((void *)&v56 + 1) & 0xFFFFFFFFFFFFFLL) == 0)
    {
      uint64_t v13 = *((uint64_t *)&v56 + 1);
    }
  }
  uint64_t v55 = *(void *)&v54;
  sub_184CD3B9C((uint64_t)&v56);
  return sub_184CE4A10(v50, v51, 1, v49, v53, v55, 0, v13, 0, v2, (uint64_t)&v56, v50, v51);
}

uint64_t sub_184CD3B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_184CD3B9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_184CD3BE4(uint64_t a1, uint64_t a2, __n128 a3)
{
  if (a3.n128_f64[0] > 0.0)
  {
    unint64_t v11 = a3.n128_u64[0];
    MEMORY[0x1F4188790](a1, a3);
    uint64_t v10 = &v11;
    double v6 = sub_184CE227C;
    return (uint64_t)sub_184CD3D90((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v6, (uint64_t)&v9, v4, v5);
  }
  if (a3.n128_f64[0] < 0.0)
  {
    unint64_t v11 = a3.n128_u64[0];
    MEMORY[0x1F4188790](a1, a3);
    uint64_t v10 = &v11;
    double v6 = sub_184CE2250;
    return (uint64_t)sub_184CD3D90((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v6, (uint64_t)&v9, v4, v5);
  }
  if (a2 < 2)
  {
    if (a2 != 1) {
      return 0;
    }
    uint64_t result = 0;
    goto LABEL_16;
  }
  uint64_t result = 0;
  for (unint64_t i = a2; (uint64_t)i > 1; i -= i >> 1)
  {
    if (*(double *)(a1 + 8 * (result + (i >> 1))) < 0.0) {
      result += i >> 1;
    }
  }
  if (result < a2)
  {
LABEL_16:
    if (*(double *)(a1 + 8 * result) < 0.0) {
      ++result;
    }
  }
  return result;
}

uint64_t sub_184CD3D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 2)
  {
    if (a2 != 1) {
      return 0;
    }
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    for (unint64_t i = a2; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(void *)(a1 + 8 * (v3 + (i >> 1))) < a3) {
        v3 += i >> 1;
      }
    }
    if (v3 >= a2) {
      return v3;
    }
  }
  if (*(void *)(a1 + 8 * v3) < a3) {
    ++v3;
  }
  return v3;
}

void *sub_184CD3D90(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_184CD3DF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 2)
  {
    if (a2 != 1) {
      return 0;
    }
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    for (unint64_t i = a2; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(void *)(a1 + 8 * (v3 + (i >> 1))) > a3) {
        v3 += i >> 1;
      }
    }
    if (v3 >= a2) {
      return v3;
    }
  }
  if (*(void *)(a1 + 8 * v3) > a3) {
    ++v3;
  }
  return v3;
}

uint64_t sub_184CD3E58(uint64_t a1, uint64_t a2, __n128 a3)
{
  if (a3.n128_f64[0] > 0.0)
  {
    unint64_t v11 = a3.n128_u64[0];
    MEMORY[0x1F4188790](a1, a3);
    uint64_t v10 = &v11;
    uint64_t v6 = sub_184CE2224;
    return (uint64_t)sub_184CD3D90((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v6, (uint64_t)&v9, v4, v5);
  }
  if (a3.n128_f64[0] < 0.0)
  {
    unint64_t v11 = a3.n128_u64[0];
    MEMORY[0x1F4188790](a1, a3);
    uint64_t v10 = &v11;
    uint64_t v6 = sub_184CE21F8;
    return (uint64_t)sub_184CD3D90((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v6, (uint64_t)&v9, v4, v5);
  }
  if (a2 < 2)
  {
    if (a2 != 1) {
      return 0;
    }
    uint64_t result = 0;
    goto LABEL_16;
  }
  uint64_t result = 0;
  for (unint64_t i = a2; (uint64_t)i > 1; i -= i >> 1)
  {
    if (*(double *)(a1 + 8 * (result + (i >> 1))) <= 0.0) {
      result += i >> 1;
    }
  }
  if (result < a2)
  {
LABEL_16:
    if (*(double *)(a1 + 8 * result) <= 0.0) {
      ++result;
    }
  }
  return result;
}

uint64_t sub_184CD3F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 2)
  {
    if (a2 != 1) {
      return 0;
    }
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    for (unint64_t i = a2; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(void *)(a1 + 8 * (v3 + (i >> 1))) <= a3) {
        v3 += i >> 1;
      }
    }
    if (v3 >= a2) {
      return v3;
    }
  }
  if (*(void *)(a1 + 8 * v3) <= a3) {
    ++v3;
  }
  return v3;
}

uint64_t sub_184CD4004(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 2)
  {
    if (a2 != 1) {
      return 0;
    }
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    for (unint64_t i = a2; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(void *)(a1 + 8 * (v3 + (i >> 1))) >= a3) {
        v3 += i >> 1;
      }
    }
    if (v3 >= a2) {
      return v3;
    }
  }
  if (*(void *)(a1 + 8 * v3) >= a3) {
    ++v3;
  }
  return v3;
}

uint64_t sub_184CD406C(uint64_t result)
{
  uint64_t v2 = v1[6];
  if (v2 < 0 || v2 >= v1[1])
  {
    __break(1u);
  }
  else
  {
    v1[6] = v2 + 1;
    uint64_t v3 = v1[7];
    if ((v3 & 0x8000000000000000) == 0 && v3 < v1[4])
    {
      v1[7] = v3 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_184CD40D8()
{
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[4];
  if (v3 != v1)
  {
    uint64_t v5 = v0[2];
    unint64_t v6 = v3 + v5;
    BOOL v7 = __OFADD__(v3, v5);
    if (v2 != v4)
    {
      if (!v7)
      {
        if ((v6 & 0x8000000000000000) == 0)
        {
          if (!HIDWORD(v6))
          {
            uint64_t v10 = v0[5];
            unint64_t v11 = v2 + v10;
            if (!__OFADD__(v2, v10))
            {
              if ((v11 & 0x8000000000000000) == 0)
              {
                if (!HIDWORD(v11))
                {
                  double v12 = *(double *)(*v0 + 8 * v3);
                  double v13 = *(double *)(v0[3] + 8 * v2);
                  if (v12 >= v13)
                  {
                    if (v13 >= v12)
                    {
                      sub_184CD406C(v6);
                      return;
                    }
                    if ((v2 & 0x8000000000000000) == 0 && v2 < v4)
                    {
                      v0[7] = v2 + 1;
                      return;
                    }
                    goto LABEL_52;
                  }
                  if ((v3 & 0x8000000000000000) == 0 && v3 < v1)
                  {
                    v0[6] = v3 + 1;
                    return;
                  }
LABEL_51:
                  __break(1u);
LABEL_52:
                  __break(1u);
                  return;
                }
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
LABEL_49:
              __break(1u);
              goto LABEL_50;
            }
LABEL_48:
            __break(1u);
            goto LABEL_49;
          }
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v7)
    {
      __break(1u);
    }
    else if ((v6 & 0x8000000000000000) == 0)
    {
      if (!HIDWORD(v6))
      {
        if ((v3 & 0x8000000000000000) == 0)
        {
          if (v3 < v1)
          {
            v0[6] = v3 + 1;
            return;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    __break(1u);
    goto LABEL_37;
  }
  if (v2 != v4)
  {
    uint64_t v8 = v0[5];
    unint64_t v9 = v2 + v8;
    if (!__OFADD__(v2, v8))
    {
      if ((v9 & 0x8000000000000000) == 0)
      {
        if (!HIDWORD(v9))
        {
          if ((v2 & 0x8000000000000000) == 0)
          {
            if (v2 < v4)
            {
              v0[7] = v2 + 1;
              return;
            }
            goto LABEL_44;
          }
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
}

uint64_t Region.contains(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *((void *)v1 + 6);
  long long v4 = v1[1];
  long long v10 = *v1;
  long long v11 = v4;
  long long v12 = v1[2];
  uint64_t v13 = v3;
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  __n128 v8 = *(__n128 *)(a1 + 32);
  uint64_t v9 = v2;
  return Region.isSuperset(of:)((uint64_t)v7, v8) & 1;
}

uint64_t Region.isSuperset(of:)(uint64_t a1, __n128 a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a1;
  double v4 = *(double *)v2;
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)v2 & 0x7FF0000000000000;
  uint64_t v7 = *(void *)v2 & 0xFFFFFFFFFFFFFLL;
  if (v7) {
    BOOL v8 = v6 == 0x7FF0000000000000;
  }
  else {
    BOOL v8 = 0;
  }
  BOOL v9 = !v8 && *(void *)(v5 + 16) == 0;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(v2 + 40);
  uint64_t v13 = *(void *)(v2 + 48);
  double v16 = *(double *)(a1 + 8);
  double v15 = *(double *)(a1 + 16);
  double v17 = *(double *)(a1 + 24);
  double v19 = *(double *)(v2 + 8);
  double v18 = *(double *)(v2 + 16);
  double v20 = *(double *)a1;
  uint64_t v21 = *(void *)&v3 & 0x7FF0000000000000;
  double v22 = *(double *)(v2 + 24);
  if ((*(void *)&v3 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    uint64_t v25 = *(void *)&v20 & 0xFFFFFFFFFFFFFLL;
    if (v6 == 0x7FF0000000000000 && v7)
    {
      if (!v25) {
        return 0;
      }
    }
    else if (!v25)
    {
      BOOL v24 = v17 < v18 || v22 < v15;
      goto LABEL_22;
    }
    return 1;
  }
  char v23 = v17 < v18 || v8;
  if (v23) {
    return 0;
  }
  BOOL v24 = v22 < v15;
LABEL_22:
  if (v24 || v19 < v3 || v16 < v4) {
    return 0;
  }
  if (v9)
  {
    BOOL v29 = v4 <= v3;
    if (v16 > v19) {
      BOOL v29 = 0;
    }
    if (v18 > v15) {
      BOOL v29 = 0;
    }
    uint64_t result = v17 <= v22 && v29;
    if (v21 == 0x7FF0000000000000 && (result & 1) == 0) {
      return (*(void *)&v20 & 0xFFFFFFFFFFFFFLL) != 0;
    }
  }
  else
  {
    double v41 = *(double *)v2;
    double v42 = v19;
    double v43 = v18;
    double v44 = v22;
    uint64_t v45 = v5;
    uint64_t v46 = v14;
    uint64_t v47 = v13;
    a2.n128_f64[0] = v15;
    sub_184CEA964(0, a2, v17);
    if (*(void *)(v5 + 16)) {
      char v30 = 1;
    }
    else {
      char v30 = v8;
    }
    if (v30)
    {
      BOOL v31 = (*(void *)&v20 & 0xFFFFFFFFFFFFFLL) != 0 && v21 == 0x7FF0000000000000;
      uint64_t v32 = v14 + 32;
      uint64_t v33 = v13 + 32;
      uint64_t v34 = *(void *)(v11 + 16);
      if (v31 || v34)
      {
        sub_184CE0A40(v32, v33, &v41, v34, 0, v10 + 32, *(void *)(v10 + 16), v12 + 32);
        return LOBYTE(v41);
      }
      else
      {
        double v41 = v3;
        double v42 = v16;
        double v43 = v15;
        double v44 = v17;
        v39[0] = 0x200000002;
        sub_184CE0A40(v32, v33, v40, 2, 0, (uint64_t)v39, 2, (uint64_t)&v41);
        return v40[0];
      }
    }
    else
    {
      BOOL v35 = (*(void *)&v20 & 0xFFFFFFFFFFFFFLL) != 0 && v21 == 0x7FF0000000000000;
      double v41 = v4;
      double v42 = v19;
      double v43 = v18;
      double v44 = v22;
      *(void *)uint64_t v40 = 0x200000002;
      uint64_t v36 = *(void *)(v11 + 16);
      if (v35 || v36)
      {
        sub_184CE0A40((uint64_t)v40, (uint64_t)&v41, v39, v36, 0, v10 + 32, *(void *)(v10 + 16), v12 + 32);
        return LOBYTE(v39[0]);
      }
      else
      {
        *(double *)uint64_t v39 = v3;
        *(double *)&v39[1] = v16;
        *(double *)&v39[2] = v15;
        *(double *)&v39[3] = v17;
        uint64_t v38 = 0x200000002;
        sub_184CE0A40((uint64_t)v40, (uint64_t)&v41, &v37, 2, 0, (uint64_t)&v38, 2, (uint64_t)v39);
        return v37;
      }
    }
  }
  return result;
}

uint64_t Region.union(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CDFAC8(a1, Region.formUnion(_:), a2);
}

uint64_t Region.intersection(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CDFAC8(a1, Region.formIntersection(_:), a2);
}

uint64_t Region.formIntersection(_:)(long long *a1)
{
  uint64_t v2 = v1;
  uint64_t v490 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[1];
  __n128 v484 = (__n128)*a1;
  long long v485 = v3;
  __n128 v5 = (__n128)*a1;
  long long v4 = a1[1];
  long long v486 = a1[2];
  v487 = (__n128 *)*((void *)a1 + 6);
  double v7 = *(double *)v1;
  double v6 = *(double *)(v1 + 8);
  double v9 = *(double *)(v1 + 16);
  double v8 = *(double *)(v1 + 24);
  __n128 v10 = v484;
  long long v11 = v485;
  uint64_t v12 = (uint64_t *)(v1 + 32);
  uint64_t v13 = *(void *)(v1 + 32);
  uint64_t v14 = *(void *)(v1 + 40);
  v472 = (void *)(v1 + 40);
  double v16 = (void *)(v1 + 48);
  double v15 = *(__n128 **)(v1 + 48);
  v480.n128_f64[0] = v7;
  v480.n128_f64[1] = v6;
  *(double *)&long long v481 = v9;
  *((double *)&v481 + 1) = v8;
  *(void *)&long long v482 = v13;
  *((void *)&v482 + 1) = v14;
  v483 = v15;
  __n128 v477 = v5;
  v478[0] = v4;
  v478[1] = a1[2];
  uint64_t v479 = *((void *)a1 + 6);
  uint64_t result = sub_184CEAA4C((uint64_t)&v477);
  switch((char)result)
  {
    case 1:
      *(double *)uint64_t v1 = sub_184CCBB74(v10.n128_f64[0], v10.n128_f64[1], *(double *)&v11, *((double *)&v11 + 1), v7, v6, v9, v8);
      *(void *)(v1 + 8) = v19;
      *(void *)(v1 + 16) = v20;
      *(void *)(v1 + 24) = v21;
      goto LABEL_4;
    case 2:
      return result;
    case 3:
      swift_release();
      swift_release();
      swift_release();
      long long v23 = v485;
      *(__n128 *)uint64_t v1 = v484;
      *(_OWORD *)(v1 + 16) = v23;
      *(_OWORD *)(v1 + 32) = v486;
      *(void *)(v1 + 48) = v487;
      return sub_184CD3B9C((uint64_t)&v484);
    case 4:
      uint64_t v24 = *(void *)(v13 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      v25.n128_u64[0] = v11;
      sub_184CEBB3C(v13 + 32, v24, v24, (uint64_t *)&v480, v25, *((double *)&v11 + 1));
      uint64_t v469 = 0;
      swift_release();
      swift_release();
      swift_release();
      __n128 v26 = v480;
      if (((*(void *)&v7 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)&v7 & 0x7FF0000000000000) != 0) && v24 == 0) {
        unint64_t v29 = 2;
      }
      else {
        unint64_t v29 = v24;
      }
      unint64_t v30 = v480.n128_u64[1] - v480.n128_u64[0];
      if (__OFSUB__(v480.n128_u64[1], v480.n128_u64[0])) {
        goto LABEL_433;
      }
      uint64_t v31 = v30 + 2;
      if (__OFADD__(v30, 2)) {
        goto LABEL_436;
      }
      uint64_t v32 = *v472;
      v480.n128_f64[0] = v7;
      v480.n128_f64[1] = v6;
      *(double *)&long long v481 = v9;
      *((double *)&v481 + 1) = v8;
      *(void *)&long long v482 = v13;
      *((void *)&v482 + 1) = v32;
      v483 = v15;
      uint64_t v33 = sub_184CE293C(v26.n128_i64[0], v26.n128_i64[1]);
      uint64_t v34 = v33 + 2;
      if (__OFADD__(v33, 2)) {
        goto LABEL_439;
      }
      uint64_t v35 = sub_184CEB8F0();
      uint64_t v37 = *(void *)(v2 + 40);
      unint64_t v38 = *(void *)(v37 + 16);
      if (v29)
      {
        if (v29 > v38)
        {
LABEL_442:
          __break(1u);
          goto LABEL_443;
        }
        int64_t v470 = *(unsigned int *)(v37 + 4 * v29 + 28);
      }
      else
      {
        int64_t v470 = 0;
      }
      uint64_t v56 = v31 * v34;
      if ((unsigned __int128)(v31 * (__int128)v34) >> 64 != (v31 * v34) >> 63) {
        goto LABEL_441;
      }
      if (v31 < 0)
      {
LABEL_444:
        __break(1u);
        goto LABEL_445;
      }
      unint64_t v471 = v38;
      if ((unint64_t)(v31 + 0x1000000000000000) >> 61)
      {
LABEL_445:
        __break(1u);
LABEL_446:
        __break(1u);
        goto LABEL_447;
      }
      if (8 * v31 < 1025 || (uint64_t v35 = swift_stdlib_isStackAllocationSafe(), (v35 & 1) != 0))
      {
        unint64_t v468 = v29;
        uint64_t v57 = MEMORY[0x1F4188790](v35, v36);
        uint64_t v60 = (char *)&v464 - v59;
        if ((unint64_t)(v31 + 0x2000000000000000) >> 62)
        {
LABEL_448:
          __break(1u);
LABEL_449:
          __break(1u);
LABEL_450:
          __break(1u);
          goto LABEL_451;
        }
        v467 = &v464;
        if (4 * v31 < 1025 || (uint64_t v57 = swift_stdlib_isStackAllocationSafe(), (v57 & 1) != 0))
        {
          v466 = &v464;
          uint64_t isStackAllocationSafe = MEMORY[0x1F4188790](v57, v58);
          uint64_t v64 = (char *)&v464 - v63;
          if (v56 < 0)
          {
LABEL_464:
            __break(1u);
            goto LABEL_465;
          }
          if ((unint64_t)(v56 + 0x1000000000000000) >> 61)
          {
LABEL_465:
            __break(1u);
            goto LABEL_466;
          }
          if (8 * v56 < 1025
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
          {
            v465 = &v464;
            MEMORY[0x1F4188790](isStackAllocationSafe, v62);
            uint64_t v66 = (char *)&v464 - v65;
            v476[0] = 0;
            uint64_t v475 = 0;
            uint64_t v68 = *(void *)(v2 + 40);
            uint64_t v67 = *(__n128 **)(v2 + 48);
            __n128 v70 = *(__n128 *)v2;
            long long v69 = *(_OWORD *)(v2 + 16);
            uint64_t v71 = *(void *)(v2 + 32);
            uint64_t v72 = v67 + 2;
            v488 = v67 + 2;
            uint64_t v489 = 0;
            BOOL v73 = (v70.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v70.n128_u64[0] & 0x7FF0000000000000) == 0;
            uint64_t v74 = *(void *)(v71 + 16);
            if (v73 || v74)
            {
              uint64_t v75 = (long long *)(v71 + 32);
              uint64_t v79 = (uint64_t *)(v68 + 32);
              uint64_t v100 = *(void *)(v68 + 16);
              uint64_t v101 = v67[1].n128_i64[0];
              BOOL v102 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
              if (v102 || *(void *)(v486 + 16))
              {
                unint64_t v77 = (long long *)(v486 + 32);
                uint64_t v456 = v31;
                uint64_t v448 = (uint64_t)v64;
                uint64_t v432 = (uint64_t)v60;
                uint64_t v440 = v31;
                uint64_t v78 = v60;
                uint64_t v424 = v56;
                uint64_t v408 = (uint64_t)v66;
                uint64_t v416 = v56;
                __n128 v400 = v26;
                v384 = v487 + 2;
                uint64_t v392 = v487[1].n128_i64[0];
                v368 = (uint64_t *)(*((void *)&v486 + 1) + 32);
                uint64_t v376 = *(void *)(*((void *)&v486 + 1) + 16);
                uint64_t v360 = *(void *)(v486 + 16);
              }
              else
              {
                __n128 v480 = v10;
                unint64_t v77 = &v481;
                long long v481 = v11;
                v477.n128_u64[0] = 0x200000002;
                uint64_t v456 = v31;
                uint64_t v448 = (uint64_t)v64;
                uint64_t v432 = (uint64_t)v60;
                uint64_t v440 = v31;
                uint64_t v78 = v60;
                uint64_t v424 = v56;
                uint64_t v408 = (uint64_t)v66;
                uint64_t v416 = v56;
                __n128 v400 = v26;
                v384 = &v480;
                uint64_t v392 = 2;
                v368 = (uint64_t *)&v477;
                uint64_t v376 = 2;
                uint64_t v360 = 2;
              }
              double v141 = v10.n128_f64[1];
              double v140 = v10.n128_f64[0];
              double v143 = *((double *)&v11 + 1);
              double v142 = *(double *)&v11;
            }
            else
            {
              uint64_t v75 = &v481;
              __n128 v480 = v70;
              long long v481 = v69;
              uint64_t v474 = 0x200000002;
              BOOL v76 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
              if (v76 || *(void *)(v486 + 16))
              {
                unint64_t v77 = (long long *)(v486 + 32);
                uint64_t v456 = v31;
                uint64_t v448 = (uint64_t)v64;
                uint64_t v432 = (uint64_t)v60;
                uint64_t v440 = v31;
                uint64_t v78 = v60;
                uint64_t v424 = v56;
                uint64_t v408 = (uint64_t)v66;
                uint64_t v416 = v56;
                __n128 v400 = v26;
                uint64_t v79 = &v474;
                uint64_t v72 = &v480;
                v384 = v487 + 2;
                uint64_t v392 = v487[1].n128_i64[0];
                v368 = (uint64_t *)(*((void *)&v486 + 1) + 32);
                uint64_t v376 = *(void *)(*((void *)&v486 + 1) + 16);
                uint64_t v360 = *(void *)(v486 + 16);
              }
              else
              {
                __n128 v477 = v10;
                unint64_t v77 = v478;
                v478[0] = v11;
                uint64_t v473 = 0x200000002;
                uint64_t v456 = v31;
                uint64_t v448 = (uint64_t)v64;
                uint64_t v432 = (uint64_t)v60;
                uint64_t v440 = v31;
                uint64_t v78 = v60;
                uint64_t v424 = v56;
                uint64_t v408 = (uint64_t)v66;
                uint64_t v416 = v56;
                __n128 v400 = v26;
                uint64_t v79 = &v474;
                uint64_t v72 = &v480;
                v384 = &v477;
                uint64_t v392 = 2;
                v368 = &v473;
                uint64_t v376 = 2;
                uint64_t v360 = 2;
              }
              double v141 = v10.n128_f64[1];
              double v140 = v10.n128_f64[0];
              double v143 = *((double *)&v11 + 1);
              double v142 = *(double *)&v11;
              uint64_t v74 = 2;
              uint64_t v100 = 2;
              uint64_t v101 = 2;
            }
            sub_184CDE774(v140, v141, v142, v143, (uint64_t)v75, v74, 0, (uint64_t)v79, v100, (uint64_t)v72, v101, (uint64_t)v77, v360, 0, (uint64_t)v368, v376, (uint64_t)v384, v392, v400.n128_i64[0],
              v400.n128_i64[1],
              v408,
              v416,
              &v475,
              v424,
              1,
              (double **)&v488,
              v432,
              v440,
              v476,
              v448,
              v456,
              0);
            int64_t v144 = v470;
            int64_t v145 = v468;
            uint64_t v146 = v475;
            if (v475 < 0) {
              goto LABEL_446;
            }
            if (v468 == v471)
            {
              v147 = sub_184C9D670(v66, v475);
              swift_release();
              *double v16 = v147;
              unint64_t v148 = v476[0];
              if ((v476[0] & 0x8000000000000000) == 0)
              {
                v149 = sub_184C9D670(v78, v476[0]);
                swift_release();
                *uint64_t v12 = (uint64_t)v149;
                v150 = sub_184CE1788(v64, v148);
                v151 = v472;
                swift_release();
                void *v151 = v150;
LABEL_147:
                unint64_t v152 = v145;
                uint64_t v153 = v146 - v144;
                if (v146 != v144)
                {
                  v154 = v472;
                  unint64_t v155 = *(void *)(*v472 + 16);
                  if (v155 < v148)
                  {
LABEL_466:
                    __break(1u);
LABEL_467:
                    __break(1u);
LABEL_468:
                    __break(1u);
LABEL_469:
                    __break(1u);
                    goto LABEL_470;
                  }
                  if (v148 != v155)
                  {
                    if (v148 >= v155)
                    {
LABEL_479:
                      __break(1u);
                      goto LABEL_480;
                    }
                    sub_184CE19DC();
                    sub_184CE19DC();
                    sub_184CE19DC();
                    sub_184CE19DC();
                    sub_184CE19DC();
                    while (v148 < *(void *)(*v154 + 16))
                    {
                      uint64_t v156 = *(unsigned int *)(*v154 + 4 * v148 + 32);
                      unint64_t v157 = v156 + v153;
                      if (__OFADD__(v156, v153)) {
                        goto LABEL_414;
                      }
                      if ((v157 & 0x8000000000000000) != 0) {
                        goto LABEL_415;
                      }
                      if (HIDWORD(v157)) {
                        goto LABEL_416;
                      }
                      sub_184CE19DC();
                      if (*(void *)(*v154 + 16) <= v148) {
                        goto LABEL_417;
                      }
                      *(_DWORD *)(*v154 + 4 * v148++ + 32) = v157;
                      if (v155 == v148) {
                        goto LABEL_406;
                      }
                    }
                    __break(1u);
LABEL_414:
                    __break(1u);
LABEL_415:
                    __break(1u);
LABEL_416:
                    __break(1u);
LABEL_417:
                    __break(1u);
                    goto LABEL_418;
                  }
                }
                goto LABEL_406;
              }
            }
            else
            {
              sub_184CE1520(0, v470, v66, v475);
              unint64_t v148 = v476[0];
              if ((v476[0] & 0x8000000000000000) == 0)
              {
                sub_184CE1520(0, v145, v78, v476[0]);
                sub_184CE1654(0, v145, v64, v148);
                goto LABEL_147;
              }
            }
LABEL_447:
            __break(1u);
            goto LABEL_448;
          }
          v465 = (uint64_t *)swift_slowAlloc();
          v476[0] = 0;
          uint64_t v475 = 0;
          uint64_t v121 = *(void *)(v2 + 40);
          v120 = *(__n128 **)(v2 + 48);
          __n128 v123 = *(__n128 *)v2;
          long long v122 = *(_OWORD *)(v2 + 16);
          uint64_t v124 = *(void *)(v2 + 32);
          v125 = v120 + 2;
          v488 = v120 + 2;
          uint64_t v489 = 0;
          BOOL v126 = (v123.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v123.n128_u64[0] & 0x7FF0000000000000) == 0;
          uint64_t v127 = *(void *)(v124 + 16);
          if (v126 || v127)
          {
            v128 = (long long *)(v124 + 32);
            v133 = (uint64_t *)(v121 + 32);
            uint64_t v164 = *(void *)(v121 + 16);
            uint64_t v165 = v120[1].n128_i64[0];
            BOOL v166 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
            unint64_t v130 = v471;
            if (v166 || *(void *)(v486 + 16))
            {
              v131 = (long long *)(v486 + 32);
              uint64_t v459 = v31;
              uint64_t v451 = (uint64_t)v64;
              uint64_t v435 = (uint64_t)v60;
              uint64_t v443 = v31;
              v132 = v60;
              uint64_t v427 = v56;
              uint64_t v419 = v56;
              uint64_t v411 = (uint64_t)v465;
              uint64_t v395 = v487[1].n128_i64[0];
              __n128 v403 = v26;
              uint64_t v379 = *(void *)(*((void *)&v486 + 1) + 16);
              v387 = v487 + 2;
              v371 = (uint64_t *)(*((void *)&v486 + 1) + 32);
              uint64_t v363 = *(void *)(v486 + 16);
            }
            else
            {
              __n128 v480 = v10;
              v131 = &v481;
              long long v481 = v11;
              v477.n128_u64[0] = 0x200000002;
              uint64_t v459 = v31;
              uint64_t v451 = (uint64_t)v64;
              uint64_t v435 = (uint64_t)v60;
              uint64_t v443 = v31;
              v132 = v60;
              uint64_t v427 = v56;
              uint64_t v419 = v56;
              uint64_t v411 = (uint64_t)v465;
              uint64_t v395 = 2;
              __n128 v403 = v26;
              uint64_t v379 = 2;
              v387 = &v480;
              v371 = (uint64_t *)&v477;
              uint64_t v363 = 2;
            }
            double v221 = v10.n128_f64[1];
            double v220 = v10.n128_f64[0];
            double v223 = *((double *)&v11 + 1);
            double v222 = *(double *)&v11;
          }
          else
          {
            v128 = &v481;
            __n128 v480 = v123;
            long long v481 = v122;
            uint64_t v474 = 0x200000002;
            BOOL v129 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
            unint64_t v130 = v471;
            if (v129 || *(void *)(v486 + 16))
            {
              v131 = (long long *)(v486 + 32);
              uint64_t v459 = v31;
              uint64_t v451 = (uint64_t)v64;
              uint64_t v435 = (uint64_t)v60;
              uint64_t v443 = v31;
              v132 = v60;
              uint64_t v427 = v56;
              uint64_t v419 = v56;
              uint64_t v411 = (uint64_t)v465;
              uint64_t v395 = v487[1].n128_i64[0];
              __n128 v403 = v26;
              v133 = &v474;
              v125 = &v480;
              uint64_t v379 = *(void *)(*((void *)&v486 + 1) + 16);
              v387 = v487 + 2;
              v371 = (uint64_t *)(*((void *)&v486 + 1) + 32);
              uint64_t v363 = *(void *)(v486 + 16);
            }
            else
            {
              __n128 v477 = v10;
              v131 = v478;
              v478[0] = v11;
              uint64_t v473 = 0x200000002;
              uint64_t v459 = v31;
              uint64_t v451 = (uint64_t)v64;
              uint64_t v435 = (uint64_t)v60;
              uint64_t v443 = v31;
              v132 = v60;
              uint64_t v427 = v56;
              uint64_t v419 = v56;
              uint64_t v411 = (uint64_t)v465;
              v133 = &v474;
              v125 = &v480;
              uint64_t v395 = 2;
              __n128 v403 = v26;
              uint64_t v379 = 2;
              v387 = &v477;
              v371 = &v473;
              uint64_t v363 = 2;
            }
            double v221 = v10.n128_f64[1];
            double v220 = v10.n128_f64[0];
            double v223 = *((double *)&v11 + 1);
            double v222 = *(double *)&v11;
            uint64_t v127 = 2;
            uint64_t v164 = 2;
            uint64_t v165 = 2;
          }
          sub_184CDE774(v220, v221, v222, v223, (uint64_t)v128, v127, 0, (uint64_t)v133, v164, (uint64_t)v125, v165, (uint64_t)v131, v363, 0, (uint64_t)v371, v379, (uint64_t)v387, v395, v403.n128_i64[0],
            v403.n128_i64[1],
            v411,
            v419,
            &v475,
            v427,
            1,
            (double **)&v488,
            v435,
            v443,
            v476,
            v451,
            v459,
            0);
          int64_t v249 = v470;
          int64_t v250 = v468;
          uint64_t v251 = v475;
          if (v475 < 0) {
            goto LABEL_469;
          }
          if (v468 == v130)
          {
            v252 = sub_184C9D670(v465, v475);
            swift_release();
            *double v16 = v252;
            unint64_t v253 = v476[0];
            if ((v476[0] & 0x8000000000000000) == 0)
            {
              v254 = sub_184C9D670(v132, v476[0]);
              swift_release();
              *uint64_t v12 = (uint64_t)v254;
              v255 = sub_184CE1788(v64, v253);
              v256 = v472;
              swift_release();
              void *v256 = v255;
              goto LABEL_268;
            }
          }
          else
          {
            sub_184CE1520(0, v470, v465, v475);
            unint64_t v253 = v476[0];
            if ((v476[0] & 0x8000000000000000) == 0)
            {
              sub_184CE1520(0, v250, v132, v476[0]);
              sub_184CE1654(0, v250, v64, v253);
LABEL_268:
              unint64_t v152 = v250;
              uint64_t v257 = v251 - v249;
              if (v251 != v249)
              {
                v258 = v472;
                unint64_t v259 = *(void *)(*v472 + 16);
                if (v259 < v253)
                {
LABEL_486:
                  __break(1u);
LABEL_487:
                  __break(1u);
LABEL_488:
                  __break(1u);
LABEL_489:
                  __break(1u);
                  goto LABEL_490;
                }
                if (v253 != v259)
                {
                  if (v253 >= v259)
                  {
LABEL_495:
                    __break(1u);
                    goto LABEL_496;
                  }
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  while (v253 < *(void *)(*v258 + 16))
                  {
                    uint64_t v260 = *(unsigned int *)(*v258 + 4 * v253 + 32);
                    unint64_t v261 = v260 + v257;
                    if (__OFADD__(v260, v257)) {
                      goto LABEL_423;
                    }
                    if ((v261 & 0x8000000000000000) != 0) {
                      goto LABEL_426;
                    }
                    if (HIDWORD(v261)) {
                      goto LABEL_429;
                    }
                    sub_184CE19DC();
                    if (*(void *)(*v258 + 16) <= v253) {
                      goto LABEL_432;
                    }
                    *(_DWORD *)(*v258 + 4 * v253++ + 32) = v261;
                    if (v259 == v253) {
                      goto LABEL_279;
                    }
                  }
                  goto LABEL_420;
                }
              }
LABEL_279:
              MEMORY[0x18532B810](v465, -1, -1);
              goto LABEL_406;
            }
          }
LABEL_472:
          __break(1u);
          goto LABEL_473;
        }
        uint64_t v103 = swift_slowAlloc();
        v466 = (uint64_t *)v103;
        if (v56 < 0)
        {
LABEL_481:
          __break(1u);
          goto LABEL_482;
        }
        if ((unint64_t)(v56 + 0x1000000000000000) >> 61)
        {
LABEL_483:
          __break(1u);
          goto LABEL_484;
        }
        if (8 * v56 < 1025 || (uint64_t v103 = swift_stdlib_isStackAllocationSafe(), (v103 & 1) != 0))
        {
          v465 = &v464;
          MEMORY[0x1F4188790](v103, v104);
          uint64_t v106 = (char *)&v464 - v105;
          v476[0] = 0;
          uint64_t v475 = 0;
          uint64_t v108 = *(void *)(v2 + 40);
          v107 = *(__n128 **)(v2 + 48);
          __n128 v110 = *(__n128 *)v2;
          long long v109 = *(_OWORD *)(v2 + 16);
          uint64_t v111 = *(void *)(v2 + 32);
          v112 = v107 + 2;
          v488 = v107 + 2;
          uint64_t v489 = 0;
          BOOL v113 = (v110.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v110.n128_u64[0] & 0x7FF0000000000000) == 0;
          uint64_t v114 = *(void *)(v111 + 16);
          if (v113 || v114)
          {
            v115 = (long long *)(v111 + 32);
            v119 = (uint64_t *)(v108 + 32);
            uint64_t v161 = *(void *)(v108 + 16);
            uint64_t v162 = v107[1].n128_i64[0];
            BOOL v163 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
            if (v163 || *(void *)(v486 + 16))
            {
              v117 = (long long *)(v486 + 32);
              uint64_t v458 = v31;
              uint64_t v450 = (uint64_t)v466;
              uint64_t v434 = (uint64_t)v60;
              uint64_t v442 = v31;
              v118 = v60;
              uint64_t v426 = v56;
              uint64_t v410 = (uint64_t)v106;
              uint64_t v418 = v56;
              __n128 v402 = v26;
              v386 = v487 + 2;
              uint64_t v394 = v487[1].n128_i64[0];
              v370 = (uint64_t *)(*((void *)&v486 + 1) + 32);
              uint64_t v378 = *(void *)(*((void *)&v486 + 1) + 16);
              uint64_t v362 = *(void *)(v486 + 16);
            }
            else
            {
              __n128 v480 = v10;
              v117 = &v481;
              long long v481 = v11;
              v477.n128_u64[0] = 0x200000002;
              uint64_t v458 = v31;
              uint64_t v450 = (uint64_t)v466;
              uint64_t v434 = (uint64_t)v60;
              uint64_t v442 = v31;
              v118 = v60;
              uint64_t v426 = v56;
              uint64_t v410 = (uint64_t)v106;
              uint64_t v418 = v56;
              __n128 v402 = v26;
              v386 = &v480;
              uint64_t v394 = 2;
              v370 = (uint64_t *)&v477;
              uint64_t v378 = 2;
              uint64_t v362 = 2;
            }
            double v217 = v10.n128_f64[1];
            double v216 = v10.n128_f64[0];
            double v219 = *((double *)&v11 + 1);
            double v218 = *(double *)&v11;
          }
          else
          {
            v115 = &v481;
            __n128 v480 = v110;
            long long v481 = v109;
            uint64_t v474 = 0x200000002;
            BOOL v116 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
            if (v116 || *(void *)(v486 + 16))
            {
              v117 = (long long *)(v486 + 32);
              uint64_t v458 = v31;
              uint64_t v450 = (uint64_t)v466;
              uint64_t v434 = (uint64_t)v60;
              uint64_t v442 = v31;
              v118 = v60;
              uint64_t v426 = v56;
              uint64_t v410 = (uint64_t)v106;
              uint64_t v418 = v56;
              __n128 v402 = v26;
              v119 = &v474;
              v112 = &v480;
              v386 = v487 + 2;
              uint64_t v394 = v487[1].n128_i64[0];
              v370 = (uint64_t *)(*((void *)&v486 + 1) + 32);
              uint64_t v378 = *(void *)(*((void *)&v486 + 1) + 16);
              uint64_t v362 = *(void *)(v486 + 16);
            }
            else
            {
              __n128 v477 = v10;
              v117 = v478;
              v478[0] = v11;
              uint64_t v473 = 0x200000002;
              uint64_t v458 = v31;
              uint64_t v450 = (uint64_t)v466;
              uint64_t v434 = (uint64_t)v60;
              uint64_t v442 = v31;
              v118 = v60;
              uint64_t v426 = v56;
              uint64_t v410 = (uint64_t)v106;
              uint64_t v418 = v56;
              __n128 v402 = v26;
              v119 = &v474;
              v112 = &v480;
              v386 = &v477;
              uint64_t v394 = 2;
              v370 = &v473;
              uint64_t v378 = 2;
              uint64_t v362 = 2;
            }
            double v217 = v10.n128_f64[1];
            double v216 = v10.n128_f64[0];
            double v219 = *((double *)&v11 + 1);
            double v218 = *(double *)&v11;
            uint64_t v114 = 2;
            uint64_t v161 = 2;
            uint64_t v162 = 2;
          }
          sub_184CDE774(v216, v217, v218, v219, (uint64_t)v115, v114, 0, (uint64_t)v119, v161, (uint64_t)v112, v162, (uint64_t)v117, v362, 0, (uint64_t)v370, v378, (uint64_t)v386, v394, v402.n128_i64[0],
            v402.n128_i64[1],
            v410,
            v418,
            &v475,
            v426,
            1,
            (double **)&v488,
            v434,
            v442,
            v476,
            v450,
            v458,
            0);
          int64_t v235 = v470;
          int64_t v236 = v468;
          uint64_t v237 = v475;
          if (v475 < 0) {
            goto LABEL_468;
          }
          if (v468 == v471)
          {
            v238 = sub_184C9D670(v106, v475);
            swift_release();
            *double v16 = v238;
            unint64_t v239 = v476[0];
            if ((v476[0] & 0x8000000000000000) == 0)
            {
              v240 = v118;
              unint64_t v152 = v236;
              v241 = sub_184C9D670(v240, v476[0]);
              swift_release();
              *uint64_t v12 = (uint64_t)v241;
              v242 = sub_184CE1788(v466, v239);
              v243 = v472;
              swift_release();
              void *v243 = v242;
LABEL_248:
              uint64_t v244 = v237 - v235;
              if (v237 != v235)
              {
                v245 = v472;
                unint64_t v246 = *(void *)(*v472 + 16);
                if (v246 < v239)
                {
LABEL_485:
                  __break(1u);
                  goto LABEL_486;
                }
                if (v239 != v246)
                {
                  if (v239 >= v246)
                  {
LABEL_494:
                    __break(1u);
                    goto LABEL_495;
                  }
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  while (v239 < *(void *)(*v245 + 16))
                  {
                    uint64_t v247 = *(unsigned int *)(*v245 + 4 * v239 + 32);
                    unint64_t v248 = v247 + v244;
                    if (__OFADD__(v247, v244)) {
                      goto LABEL_422;
                    }
                    if ((v248 & 0x8000000000000000) != 0) {
                      goto LABEL_425;
                    }
                    if (HIDWORD(v248)) {
                      goto LABEL_428;
                    }
                    sub_184CE19DC();
                    if (*(void *)(*v245 + 16) <= v239) {
                      goto LABEL_431;
                    }
                    *(_DWORD *)(*v245 + 4 * v239++ + 32) = v248;
                    if (v246 == v239) {
                      goto LABEL_375;
                    }
                  }
                  goto LABEL_419;
                }
              }
              goto LABEL_375;
            }
          }
          else
          {
            sub_184CE1520(0, v470, v106, v475);
            unint64_t v239 = v476[0];
            if ((v476[0] & 0x8000000000000000) == 0)
            {
              sub_184CE1520(0, v236, v118, v476[0]);
              unint64_t v152 = v236;
              sub_184CE1654(0, v236, v466, v239);
              goto LABEL_248;
            }
          }
LABEL_471:
          __break(1u);
          goto LABEL_472;
        }
        v197 = (const void *)swift_slowAlloc();
        v476[0] = 0;
        uint64_t v475 = 0;
        uint64_t v199 = *(void *)(v2 + 40);
        v198 = *(__n128 **)(v2 + 48);
        __n128 v201 = *(__n128 *)v2;
        long long v200 = *(_OWORD *)(v2 + 16);
        uint64_t v202 = *(void *)(v2 + 32);
        v203 = v198 + 2;
        v488 = v198 + 2;
        uint64_t v489 = 0;
        BOOL v204 = (v201.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v201.n128_u64[0] & 0x7FF0000000000000) == 0;
        uint64_t v205 = *(void *)(v202 + 16);
        if (v204 || v205)
        {
          v206 = (long long *)(v202 + 32);
          v211 = (uint64_t *)(v199 + 32);
          uint64_t v268 = *(void *)(v199 + 16);
          uint64_t v269 = v198[1].n128_i64[0];
          BOOL v270 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
          unint64_t v208 = v471;
          if (v270 || *(void *)(v486 + 16))
          {
            v209 = (long long *)(v486 + 32);
            uint64_t v462 = v31;
            uint64_t v454 = (uint64_t)v466;
            uint64_t v438 = (uint64_t)v60;
            uint64_t v446 = v31;
            v210 = v60;
            uint64_t v430 = v56;
            uint64_t v414 = (uint64_t)v197;
            uint64_t v422 = v56;
            __n128 v406 = v26;
            v390 = v487 + 2;
            uint64_t v398 = v487[1].n128_i64[0];
            v374 = (uint64_t *)(*((void *)&v486 + 1) + 32);
            uint64_t v382 = *(void *)(*((void *)&v486 + 1) + 16);
            uint64_t v366 = *(void *)(v486 + 16);
          }
          else
          {
            __n128 v480 = v10;
            v209 = &v481;
            long long v481 = v11;
            v477.n128_u64[0] = 0x200000002;
            uint64_t v462 = v31;
            uint64_t v454 = (uint64_t)v466;
            uint64_t v438 = (uint64_t)v60;
            uint64_t v446 = v31;
            v210 = v60;
            uint64_t v430 = v56;
            uint64_t v414 = (uint64_t)v197;
            uint64_t v422 = v56;
            __n128 v406 = v26;
            v390 = &v480;
            uint64_t v398 = 2;
            v374 = (uint64_t *)&v477;
            uint64_t v382 = 2;
            uint64_t v366 = 2;
          }
          double v294 = v10.n128_f64[1];
          double v293 = v10.n128_f64[0];
          double v296 = *((double *)&v11 + 1);
          double v295 = *(double *)&v11;
        }
        else
        {
          v206 = &v481;
          __n128 v480 = v201;
          long long v481 = v200;
          uint64_t v474 = 0x200000002;
          BOOL v207 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
          unint64_t v208 = v471;
          if (v207 || *(void *)(v486 + 16))
          {
            v209 = (long long *)(v486 + 32);
            uint64_t v462 = v31;
            uint64_t v454 = (uint64_t)v466;
            uint64_t v438 = (uint64_t)v60;
            uint64_t v446 = v31;
            v210 = v60;
            uint64_t v430 = v56;
            uint64_t v414 = (uint64_t)v197;
            uint64_t v422 = v56;
            __n128 v406 = v26;
            v211 = &v474;
            v203 = &v480;
            v390 = v487 + 2;
            uint64_t v398 = v487[1].n128_i64[0];
            v374 = (uint64_t *)(*((void *)&v486 + 1) + 32);
            uint64_t v382 = *(void *)(*((void *)&v486 + 1) + 16);
            uint64_t v366 = *(void *)(v486 + 16);
          }
          else
          {
            __n128 v477 = v10;
            v209 = v478;
            v478[0] = v11;
            uint64_t v473 = 0x200000002;
            uint64_t v462 = v31;
            uint64_t v454 = (uint64_t)v466;
            uint64_t v438 = (uint64_t)v60;
            uint64_t v446 = v31;
            v210 = v60;
            uint64_t v430 = v56;
            uint64_t v414 = (uint64_t)v197;
            uint64_t v422 = v56;
            __n128 v406 = v26;
            v211 = &v474;
            v203 = &v480;
            v390 = &v477;
            uint64_t v398 = 2;
            v374 = &v473;
            uint64_t v382 = 2;
            uint64_t v366 = 2;
          }
          double v294 = v10.n128_f64[1];
          double v293 = v10.n128_f64[0];
          double v296 = *((double *)&v11 + 1);
          double v295 = *(double *)&v11;
          uint64_t v205 = 2;
          uint64_t v268 = 2;
          uint64_t v269 = 2;
        }
        sub_184CDE774(v293, v294, v295, v296, (uint64_t)v206, v205, 0, (uint64_t)v211, v268, (uint64_t)v203, v269, (uint64_t)v209, v366, 0, (uint64_t)v374, v382, (uint64_t)v390, v398, v406.n128_i64[0],
          v406.n128_i64[1],
          v414,
          v422,
          &v475,
          v430,
          1,
          (double **)&v488,
          v438,
          v446,
          v476,
          v454,
          v462,
          0);
        int64_t v321 = v470;
        int64_t v322 = v468;
        uint64_t v323 = v475;
        if (v475 < 0) {
          goto LABEL_489;
        }
        if (v468 == v208)
        {
          v324 = sub_184C9D670(v197, v475);
          swift_release();
          *double v16 = v324;
          unint64_t v325 = v476[0];
          if ((v476[0] & 0x8000000000000000) == 0)
          {
            v326 = v210;
            unint64_t v152 = v322;
            v327 = sub_184C9D670(v326, v476[0]);
            swift_release();
            *uint64_t v12 = (uint64_t)v327;
            v328 = sub_184CE1788(v466, v325);
            v329 = v472;
            swift_release();
            void *v329 = v328;
            goto LABEL_363;
          }
        }
        else
        {
          sub_184CE1520(0, v470, v197, v475);
          unint64_t v325 = v476[0];
          if ((v476[0] & 0x8000000000000000) == 0)
          {
            sub_184CE1520(0, v322, v210, v476[0]);
            unint64_t v152 = v322;
            sub_184CE1654(0, v322, v466, v325);
LABEL_363:
            uint64_t v330 = v323 - v321;
            if (v323 == v321) {
              goto LABEL_374;
            }
            v331 = v472;
            unint64_t v332 = *(void *)(*v472 + 16);
            if (v332 < v325)
            {
LABEL_500:
              __break(1u);
LABEL_501:
              __break(1u);
LABEL_502:
              __break(1u);
            }
            if (v325 == v332)
            {
LABEL_374:
              MEMORY[0x18532B810](v197, -1, -1);
LABEL_375:
              MEMORY[0x18532B810](v466, -1, -1);
LABEL_406:
              uint64_t v354 = *v12;
              if (*(void *)(v354 + 16))
              {
                uint64_t v355 = *(void *)(v2 + 24);
                v356 = (uint64_t *)(v354 + 32);
                sub_184CEB7D8((unsigned int *)(*(void *)(v2 + 40) + 32), *(void *)(*(void *)(v2 + 40) + 16), (double *)(*(void *)(v2 + 48) + 32), v480.n128_f64);
                uint64_t v357 = *(void *)(v354 + 16);
                if (!v357)
                {
LABEL_443:
                  __break(1u);
                  goto LABEL_444;
                }
                int64x2_t v358 = (int64x2_t)v480;
                uint64_t v359 = *v356;
                if (v152 == v471) {
                  uint64_t v355 = v356[v357 - 1];
                }
              }
              else
              {
                int64x2_t v358 = vdupq_n_s64(0x7FF8000000000000uLL);
                uint64_t v359 = 0x7FF8000000000000;
                uint64_t v355 = 0x7FF8000000000000;
              }
              *(int64x2_t *)uint64_t v2 = v358;
              *(void *)(v2 + 16) = v359;
              *(void *)(v2 + 24) = v355;
              return sub_184CEB9B4();
            }
            if (v325 < v332)
            {
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              while (v325 < *(void *)(*v331 + 16))
              {
                uint64_t v333 = *(unsigned int *)(*v331 + 4 * v325 + 32);
                unint64_t v334 = v333 + v330;
                if (__OFADD__(v333, v330)) {
                  goto LABEL_454;
                }
                if ((v334 & 0x8000000000000000) != 0) {
                  goto LABEL_457;
                }
                if (HIDWORD(v334)) {
                  goto LABEL_460;
                }
                v335 = v472;
                sub_184CE19DC();
                if (*(void *)(*v335 + 16) <= v325) {
                  goto LABEL_463;
                }
                *(_DWORD *)(*v335 + 4 * v325++ + 32) = v334;
                v331 = v472;
                if (v332 == v325) {
                  goto LABEL_374;
                }
              }
LABEL_451:
              __break(1u);
LABEL_452:
              __break(1u);
LABEL_453:
              __break(1u);
LABEL_454:
              __break(1u);
LABEL_455:
              __break(1u);
LABEL_456:
              __break(1u);
LABEL_457:
              __break(1u);
LABEL_458:
              __break(1u);
LABEL_459:
              __break(1u);
LABEL_460:
              __break(1u);
LABEL_461:
              __break(1u);
LABEL_462:
              __break(1u);
LABEL_463:
              __break(1u);
              goto LABEL_464;
            }
            goto LABEL_505;
          }
        }
LABEL_492:
        __break(1u);
        goto LABEL_493;
      }
      uint64_t v80 = swift_slowAlloc();
      v467 = (uint64_t *)v80;
      if ((unint64_t)(v31 + 0x2000000000000000) >> 62)
      {
LABEL_473:
        __break(1u);
LABEL_474:
        __break(1u);
LABEL_475:
        __break(1u);
LABEL_476:
        __break(1u);
LABEL_477:
        __break(1u);
LABEL_478:
        __break(1u);
        goto LABEL_479;
      }
      if (4 * v31 < 1025 || (uint64_t v80 = swift_stdlib_isStackAllocationSafe(), (v80 & 1) != 0))
      {
        v466 = &v464;
        uint64_t v82 = MEMORY[0x1F4188790](v80, v81);
        unint64_t v85 = (char *)&v464 - v84;
        if (v56 < 0)
        {
LABEL_480:
          __break(1u);
          goto LABEL_481;
        }
        if ((unint64_t)(v56 + 0x1000000000000000) >> 61)
        {
LABEL_482:
          __break(1u);
          goto LABEL_483;
        }
        if (8 * v56 < 1025 || (uint64_t v82 = swift_stdlib_isStackAllocationSafe(), (v82 & 1) != 0))
        {
          v465 = &v464;
          MEMORY[0x1F4188790](v82, v83);
          uint64_t v87 = (char *)&v464 - v86;
          v476[0] = 0;
          uint64_t v475 = 0;
          uint64_t v89 = *(void *)(v2 + 40);
          uint64_t v88 = *(__n128 **)(v2 + 48);
          __n128 v91 = *(__n128 *)v2;
          long long v90 = *(_OWORD *)(v2 + 16);
          uint64_t v92 = *(void *)(v2 + 32);
          long long v93 = v88 + 2;
          v488 = v88 + 2;
          uint64_t v489 = 0;
          BOOL v94 = (v91.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v91.n128_u64[0] & 0x7FF0000000000000) == 0;
          uint64_t v95 = *(void *)(v92 + 16);
          if (v94 || v95)
          {
            uint64_t v96 = (long long *)(v92 + 32);
            uint64_t v99 = (uint64_t *)(v89 + 32);
            uint64_t v158 = *(void *)(v89 + 16);
            uint64_t v159 = v88[1].n128_i64[0];
            BOOL v160 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
            if (v160 || *(void *)(v486 + 16))
            {
              uint64_t v98 = (long long *)(v486 + 32);
              uint64_t v457 = v31;
              uint64_t v449 = (uint64_t)v85;
              uint64_t v441 = v31;
              uint64_t v433 = (uint64_t)v467;
              uint64_t v425 = v56;
              uint64_t v409 = (uint64_t)v87;
              uint64_t v417 = v56;
              __n128 v401 = v26;
              v385 = v487 + 2;
              uint64_t v393 = v487[1].n128_i64[0];
              v369 = (uint64_t *)(*((void *)&v486 + 1) + 32);
              uint64_t v377 = *(void *)(*((void *)&v486 + 1) + 16);
              uint64_t v361 = *(void *)(v486 + 16);
            }
            else
            {
              __n128 v480 = v10;
              uint64_t v98 = &v481;
              long long v481 = v11;
              v477.n128_u64[0] = 0x200000002;
              uint64_t v457 = v31;
              uint64_t v449 = (uint64_t)v85;
              uint64_t v441 = v31;
              uint64_t v433 = (uint64_t)v467;
              uint64_t v425 = v56;
              uint64_t v409 = (uint64_t)v87;
              uint64_t v417 = v56;
              __n128 v401 = v26;
              v385 = &v480;
              uint64_t v393 = 2;
              v369 = (uint64_t *)&v477;
              uint64_t v377 = 2;
              uint64_t v361 = 2;
            }
            double v213 = v10.n128_f64[1];
            double v212 = v10.n128_f64[0];
            double v215 = *((double *)&v11 + 1);
            double v214 = *(double *)&v11;
          }
          else
          {
            uint64_t v96 = &v481;
            __n128 v480 = v91;
            long long v481 = v90;
            uint64_t v474 = 0x200000002;
            BOOL v97 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
            if (v97 || *(void *)(v486 + 16))
            {
              uint64_t v98 = (long long *)(v486 + 32);
              uint64_t v457 = v31;
              uint64_t v449 = (uint64_t)v85;
              uint64_t v441 = v31;
              uint64_t v433 = (uint64_t)v467;
              uint64_t v425 = v56;
              uint64_t v409 = (uint64_t)v87;
              uint64_t v417 = v56;
              __n128 v401 = v26;
              uint64_t v99 = &v474;
              long long v93 = &v480;
              v385 = v487 + 2;
              uint64_t v393 = v487[1].n128_i64[0];
              v369 = (uint64_t *)(*((void *)&v486 + 1) + 32);
              uint64_t v377 = *(void *)(*((void *)&v486 + 1) + 16);
              uint64_t v361 = *(void *)(v486 + 16);
            }
            else
            {
              __n128 v477 = v10;
              uint64_t v98 = v478;
              v478[0] = v11;
              uint64_t v473 = 0x200000002;
              uint64_t v457 = v31;
              uint64_t v449 = (uint64_t)v85;
              uint64_t v441 = v31;
              uint64_t v433 = (uint64_t)v467;
              uint64_t v425 = v56;
              uint64_t v409 = (uint64_t)v87;
              uint64_t v417 = v56;
              __n128 v401 = v26;
              uint64_t v99 = &v474;
              long long v93 = &v480;
              v385 = &v477;
              uint64_t v393 = 2;
              v369 = &v473;
              uint64_t v377 = 2;
              uint64_t v361 = 2;
            }
            double v213 = v10.n128_f64[1];
            double v212 = v10.n128_f64[0];
            double v215 = *((double *)&v11 + 1);
            double v214 = *(double *)&v11;
            uint64_t v95 = 2;
            uint64_t v158 = 2;
            uint64_t v159 = 2;
          }
          sub_184CDE774(v212, v213, v214, v215, (uint64_t)v96, v95, 0, (uint64_t)v99, v158, (uint64_t)v93, v159, (uint64_t)v98, v361, 0, (uint64_t)v369, v377, (uint64_t)v385, v393, v401.n128_i64[0],
            v401.n128_i64[1],
            v409,
            v417,
            &v475,
            v425,
            1,
            (double **)&v488,
            v433,
            v441,
            v476,
            v449,
            v457,
            0);
          uint64_t v224 = v475;
          if (v475 < 0) {
            goto LABEL_467;
          }
          if (v29 == v471)
          {
            v225 = sub_184C9D670(v87, v475);
            swift_release();
            *double v16 = v225;
            unint64_t v226 = v476[0];
            if ((v476[0] & 0x8000000000000000) == 0)
            {
              v227 = sub_184C9D670(v467, v476[0]);
              swift_release();
              *uint64_t v12 = (uint64_t)v227;
              v228 = sub_184CE1788(v85, v226);
              v229 = v472;
              swift_release();
              void *v229 = v228;
LABEL_228:
              unint64_t v152 = v29;
              uint64_t v230 = v224 - v470;
              if (v224 != v470)
              {
                v231 = v472;
                unint64_t v232 = *(void *)(*v472 + 16);
                if (v232 < v226)
                {
LABEL_484:
                  __break(1u);
                  goto LABEL_485;
                }
                if (v226 != v232)
                {
                  if (v226 >= v232)
                  {
LABEL_493:
                    __break(1u);
                    goto LABEL_494;
                  }
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  while (v226 < *(void *)(*v231 + 16))
                  {
                    uint64_t v233 = *(unsigned int *)(*v231 + 4 * v226 + 32);
                    unint64_t v234 = v233 + v230;
                    if (__OFADD__(v233, v230)) {
                      goto LABEL_421;
                    }
                    if ((v234 & 0x8000000000000000) != 0) {
                      goto LABEL_424;
                    }
                    if (HIDWORD(v234)) {
                      goto LABEL_427;
                    }
                    sub_184CE19DC();
                    if (*(void *)(*v231 + 16) <= v226) {
                      goto LABEL_430;
                    }
                    *(_DWORD *)(*v231 + 4 * v226++ + 32) = v234;
                    if (v232 == v226) {
                      goto LABEL_405;
                    }
                  }
LABEL_418:
                  __break(1u);
LABEL_419:
                  __break(1u);
LABEL_420:
                  __break(1u);
LABEL_421:
                  __break(1u);
LABEL_422:
                  __break(1u);
LABEL_423:
                  __break(1u);
LABEL_424:
                  __break(1u);
LABEL_425:
                  __break(1u);
LABEL_426:
                  __break(1u);
LABEL_427:
                  __break(1u);
LABEL_428:
                  __break(1u);
LABEL_429:
                  __break(1u);
LABEL_430:
                  __break(1u);
LABEL_431:
                  __break(1u);
LABEL_432:
                  __break(1u);
LABEL_433:
                  __break(1u);
LABEL_434:
                  __break(1u);
                  goto LABEL_435;
                }
              }
              goto LABEL_405;
            }
          }
          else
          {
            sub_184CE1520(0, v470, v87, v475);
            unint64_t v226 = v476[0];
            if ((v476[0] & 0x8000000000000000) == 0)
            {
              sub_184CE1520(0, v29, v467, v476[0]);
              sub_184CE1654(0, v29, v85, v226);
              goto LABEL_228;
            }
          }
LABEL_470:
          __break(1u);
          goto LABEL_471;
        }
        v465 = (uint64_t *)swift_slowAlloc();
        v476[0] = 0;
        uint64_t v475 = 0;
        uint64_t v184 = *(void *)(v2 + 40);
        v183 = *(__n128 **)(v2 + 48);
        __n128 v186 = *(__n128 *)v2;
        long long v185 = *(_OWORD *)(v2 + 16);
        uint64_t v187 = *(void *)(v2 + 32);
        v188 = v183 + 2;
        v488 = v183 + 2;
        uint64_t v489 = 0;
        BOOL v189 = (v186.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v186.n128_u64[0] & 0x7FF0000000000000) == 0;
        uint64_t v190 = *(void *)(v187 + 16);
        if (v189 || v190)
        {
          v191 = (long long *)(v187 + 32);
          v196 = (uint64_t *)(v184 + 32);
          uint64_t v265 = *(void *)(v184 + 16);
          uint64_t v266 = v183[1].n128_i64[0];
          BOOL v267 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
          unint64_t v193 = v471;
          if (v267 || *(void *)(v486 + 16))
          {
            v194 = (long long *)(v486 + 32);
            uint64_t v461 = v31;
            uint64_t v453 = (uint64_t)v85;
            uint64_t v445 = v31;
            uint64_t v437 = (uint64_t)v467;
            uint64_t v429 = v56;
            uint64_t v421 = v56;
            v195 = v465;
            uint64_t v413 = (uint64_t)v465;
            uint64_t v397 = v487[1].n128_i64[0];
            __n128 v405 = v26;
            uint64_t v381 = *(void *)(*((void *)&v486 + 1) + 16);
            v389 = v487 + 2;
            v373 = (uint64_t *)(*((void *)&v486 + 1) + 32);
            uint64_t v365 = *(void *)(v486 + 16);
          }
          else
          {
            __n128 v480 = v10;
            v194 = &v481;
            long long v481 = v11;
            v477.n128_u64[0] = 0x200000002;
            uint64_t v461 = v31;
            uint64_t v453 = (uint64_t)v85;
            uint64_t v445 = v31;
            uint64_t v437 = (uint64_t)v467;
            uint64_t v429 = v56;
            uint64_t v421 = v56;
            v195 = v465;
            uint64_t v413 = (uint64_t)v465;
            uint64_t v397 = 2;
            __n128 v405 = v26;
            uint64_t v381 = 2;
            v389 = &v480;
            v373 = (uint64_t *)&v477;
            uint64_t v365 = 2;
          }
          double v290 = v10.n128_f64[1];
          double v289 = v10.n128_f64[0];
          double v292 = *((double *)&v11 + 1);
          double v291 = *(double *)&v11;
        }
        else
        {
          v191 = &v481;
          __n128 v480 = v186;
          long long v481 = v185;
          uint64_t v474 = 0x200000002;
          BOOL v192 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
          unint64_t v193 = v471;
          if (v192 || *(void *)(v486 + 16))
          {
            v194 = (long long *)(v486 + 32);
            uint64_t v461 = v31;
            uint64_t v453 = (uint64_t)v85;
            uint64_t v445 = v31;
            uint64_t v437 = (uint64_t)v467;
            uint64_t v429 = v56;
            uint64_t v421 = v56;
            v195 = v465;
            uint64_t v413 = (uint64_t)v465;
            uint64_t v397 = v487[1].n128_i64[0];
            __n128 v405 = v26;
            v196 = &v474;
            v188 = &v480;
            uint64_t v381 = *(void *)(*((void *)&v486 + 1) + 16);
            v389 = v487 + 2;
            v373 = (uint64_t *)(*((void *)&v486 + 1) + 32);
            uint64_t v365 = *(void *)(v486 + 16);
          }
          else
          {
            __n128 v477 = v10;
            v194 = v478;
            v478[0] = v11;
            uint64_t v473 = 0x200000002;
            uint64_t v461 = v31;
            uint64_t v453 = (uint64_t)v85;
            uint64_t v445 = v31;
            uint64_t v437 = (uint64_t)v467;
            uint64_t v429 = v56;
            uint64_t v421 = v56;
            v195 = v465;
            uint64_t v413 = (uint64_t)v465;
            v196 = &v474;
            v188 = &v480;
            uint64_t v397 = 2;
            __n128 v405 = v26;
            uint64_t v381 = 2;
            v389 = &v477;
            v373 = &v473;
            uint64_t v365 = 2;
          }
          double v290 = v10.n128_f64[1];
          double v289 = v10.n128_f64[0];
          double v292 = *((double *)&v11 + 1);
          double v291 = *(double *)&v11;
          uint64_t v190 = 2;
          uint64_t v265 = 2;
          uint64_t v266 = 2;
        }
        sub_184CDE774(v289, v290, v291, v292, (uint64_t)v191, v190, 0, (uint64_t)v196, v265, (uint64_t)v188, v266, (uint64_t)v194, v365, 0, (uint64_t)v373, v381, (uint64_t)v389, v397, v405.n128_i64[0],
          v405.n128_i64[1],
          v413,
          v421,
          &v475,
          v429,
          1,
          (double **)&v488,
          v437,
          v445,
          v476,
          v453,
          v461,
          0);
        int64_t v309 = v470;
        uint64_t v310 = v475;
        if (v475 < 0) {
          goto LABEL_488;
        }
        if (v29 == v193)
        {
          v311 = sub_184C9D670(v195, v475);
          swift_release();
          *double v16 = v311;
          unint64_t v312 = v476[0];
          if ((v476[0] & 0x8000000000000000) == 0)
          {
            v313 = sub_184C9D670(v467, v476[0]);
            swift_release();
            *uint64_t v12 = (uint64_t)v313;
            v314 = sub_184CE1788(v85, v312);
            v315 = v472;
            swift_release();
            void *v315 = v314;
            goto LABEL_343;
          }
        }
        else
        {
          sub_184CE1520(0, v470, v195, v475);
          unint64_t v312 = v476[0];
          if ((v476[0] & 0x8000000000000000) == 0)
          {
            sub_184CE1520(0, v29, v467, v476[0]);
            sub_184CE1654(0, v29, v85, v312);
LABEL_343:
            unint64_t v152 = v29;
            uint64_t v316 = v310 - v309;
            if (v310 != v309)
            {
              v317 = v472;
              unint64_t v318 = *(void *)(*v472 + 16);
              if (v318 < v312)
              {
LABEL_499:
                __break(1u);
                goto LABEL_500;
              }
              if (v312 != v318)
              {
                if (v312 < v318)
                {
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  sub_184CE19DC();
                  while (v312 < *(void *)(*v317 + 16))
                  {
                    uint64_t v319 = *(unsigned int *)(*v317 + 4 * v312 + 32);
                    unint64_t v320 = v319 + v316;
                    if (__OFADD__(v319, v316)) {
                      goto LABEL_453;
                    }
                    if ((v320 & 0x8000000000000000) != 0) {
                      goto LABEL_456;
                    }
                    if (HIDWORD(v320)) {
                      goto LABEL_459;
                    }
                    sub_184CE19DC();
                    if (*(void *)(*v317 + 16) <= v312) {
                      goto LABEL_462;
                    }
                    *(_DWORD *)(*v317 + 4 * v312++ + 32) = v320;
                    if (v318 == v312) {
                      goto LABEL_354;
                    }
                  }
                  goto LABEL_450;
                }
LABEL_504:
                __break(1u);
LABEL_505:
                __break(1u);
                goto LABEL_506;
              }
            }
LABEL_354:
            MEMORY[0x18532B810](v465, -1, -1);
LABEL_405:
            MEMORY[0x18532B810](v467, -1, -1);
            goto LABEL_406;
          }
        }
LABEL_491:
        __break(1u);
        goto LABEL_492;
      }
      uint64_t v167 = swift_slowAlloc();
      v466 = (uint64_t *)v167;
      if (v56 < 0)
      {
LABEL_496:
        __break(1u);
        goto LABEL_497;
      }
      if ((unint64_t)(v56 + 0x1000000000000000) >> 61)
      {
LABEL_497:
        __break(1u);
        goto LABEL_498;
      }
      unint64_t v468 = v29;
      if (8 * v56 >= 1025)
      {
        uint64_t v167 = swift_stdlib_isStackAllocationSafe();
        if ((v167 & 1) == 0)
        {
          v271 = (const void *)swift_slowAlloc();
          v476[0] = 0;
          uint64_t v475 = 0;
          uint64_t v273 = *(void *)(v2 + 40);
          v272 = *(__n128 **)(v2 + 48);
          __n128 v275 = *(__n128 *)v2;
          long long v274 = *(_OWORD *)(v2 + 16);
          uint64_t v276 = *(void *)(v2 + 32);
          v277 = v272 + 2;
          v488 = v272 + 2;
          uint64_t v489 = 0;
          BOOL v278 = (v275.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v275.n128_u64[0] & 0x7FF0000000000000) == 0;
          uint64_t v279 = *(void *)(v276 + 16);
          if (v278 || v279)
          {
            v280 = (long long *)(v276 + 32);
            v284 = (uint64_t *)(v273 + 32);
            uint64_t v336 = *(void *)(v273 + 16);
            uint64_t v337 = v272[1].n128_i64[0];
            BOOL v338 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
            unint64_t v282 = v471;
            if (v338 || *(void *)(v486 + 16))
            {
              v283 = (long long *)(v486 + 32);
              uint64_t v463 = v31;
              uint64_t v455 = (uint64_t)v466;
              uint64_t v447 = v31;
              uint64_t v439 = (uint64_t)v467;
              uint64_t v431 = v56;
              uint64_t v415 = (uint64_t)v271;
              uint64_t v423 = v56;
              __n128 v407 = v26;
              v391 = v487 + 2;
              uint64_t v399 = v487[1].n128_i64[0];
              v375 = (uint64_t *)(*((void *)&v486 + 1) + 32);
              uint64_t v383 = *(void *)(*((void *)&v486 + 1) + 16);
              uint64_t v367 = *(void *)(v486 + 16);
            }
            else
            {
              __n128 v480 = v10;
              v283 = &v481;
              long long v481 = v11;
              v477.n128_u64[0] = 0x200000002;
              uint64_t v463 = v31;
              uint64_t v455 = (uint64_t)v466;
              uint64_t v447 = v31;
              uint64_t v439 = (uint64_t)v467;
              uint64_t v431 = v56;
              uint64_t v415 = (uint64_t)v271;
              uint64_t v423 = v56;
              __n128 v407 = v26;
              v391 = &v480;
              uint64_t v399 = 2;
              v375 = (uint64_t *)&v477;
              uint64_t v383 = 2;
              uint64_t v367 = 2;
            }
            double v340 = v10.n128_f64[1];
            double v339 = v10.n128_f64[0];
            double v342 = *((double *)&v11 + 1);
            double v341 = *(double *)&v11;
          }
          else
          {
            v280 = &v481;
            __n128 v480 = v275;
            long long v481 = v274;
            uint64_t v474 = 0x200000002;
            BOOL v281 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
            unint64_t v282 = v471;
            if (v281 || *(void *)(v486 + 16))
            {
              v283 = (long long *)(v486 + 32);
              uint64_t v463 = v31;
              uint64_t v455 = (uint64_t)v466;
              uint64_t v447 = v31;
              uint64_t v439 = (uint64_t)v467;
              uint64_t v431 = v56;
              uint64_t v415 = (uint64_t)v271;
              uint64_t v423 = v56;
              __n128 v407 = v26;
              v284 = &v474;
              v277 = &v480;
              v391 = v487 + 2;
              uint64_t v399 = v487[1].n128_i64[0];
              v375 = (uint64_t *)(*((void *)&v486 + 1) + 32);
              uint64_t v383 = *(void *)(*((void *)&v486 + 1) + 16);
              uint64_t v367 = *(void *)(v486 + 16);
            }
            else
            {
              __n128 v477 = v10;
              v283 = v478;
              v478[0] = v11;
              uint64_t v473 = 0x200000002;
              uint64_t v463 = v31;
              uint64_t v455 = (uint64_t)v466;
              uint64_t v447 = v31;
              uint64_t v439 = (uint64_t)v467;
              uint64_t v431 = v56;
              uint64_t v415 = (uint64_t)v271;
              uint64_t v423 = v56;
              __n128 v407 = v26;
              v284 = &v474;
              v277 = &v480;
              v391 = &v477;
              uint64_t v399 = 2;
              v375 = &v473;
              uint64_t v383 = 2;
              uint64_t v367 = 2;
            }
            double v340 = v10.n128_f64[1];
            double v339 = v10.n128_f64[0];
            double v342 = *((double *)&v11 + 1);
            double v341 = *(double *)&v11;
            uint64_t v279 = 2;
            uint64_t v336 = 2;
            uint64_t v337 = 2;
          }
          sub_184CDE774(v339, v340, v341, v342, (uint64_t)v280, v279, 0, (uint64_t)v284, v336, (uint64_t)v277, v337, (uint64_t)v283, v367, 0, (uint64_t)v375, v383, (uint64_t)v391, v399, v407.n128_i64[0],
            v407.n128_i64[1],
            v415,
            v423,
            &v475,
            v431,
            1,
            (double **)&v488,
            v439,
            v447,
            v476,
            v455,
            v463,
            0);
          int64_t v343 = v470;
          uint64_t v344 = v475;
          if (v475 < 0) {
            goto LABEL_501;
          }
          if (v29 == v282)
          {
            v345 = sub_184C9D670(v271, v475);
            swift_release();
            *double v16 = v345;
            unint64_t v346 = v476[0];
            if (v476[0] < 0) {
              goto LABEL_502;
            }
            v347 = sub_184C9D670(v467, v476[0]);
            swift_release();
            *uint64_t v12 = (uint64_t)v347;
            v348 = sub_184CE1788(v466, v346);
            swift_release();
            void *v472 = v348;
          }
          else
          {
            sub_184CE1520(0, v470, v271, v475);
            unint64_t v346 = v476[0];
            if (v476[0] < 0) {
              goto LABEL_502;
            }
            sub_184CE1520(0, v29, v467, v476[0]);
            sub_184CE1654(0, v29, v466, v346);
          }
          uint64_t v349 = v344 - v343;
          if (v344 != v343)
          {
            v350 = v472;
            unint64_t v351 = *(void *)(*v472 + 16);
            if (v351 < v346)
            {
LABEL_506:
              __break(1u);
LABEL_507:
              __break(1u);
              goto LABEL_508;
            }
            if (v346 != v351)
            {
              if (v346 < v351)
              {
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                while (v346 < *(void *)(*v350 + 16))
                {
                  uint64_t v352 = *(unsigned int *)(*v350 + 4 * v346 + 32);
                  unint64_t v353 = v352 + v349;
                  if (__OFADD__(v352, v349)) {
                    goto LABEL_475;
                  }
                  if ((v353 & 0x8000000000000000) != 0) {
                    goto LABEL_476;
                  }
                  if (HIDWORD(v353)) {
                    goto LABEL_477;
                  }
                  sub_184CE19DC();
                  if (*(void *)(*v472 + 16) <= v346) {
                    goto LABEL_478;
                  }
                  *(_DWORD *)(*v472 + 4 * v346++ + 32) = v353;
                  v350 = v472;
                  if (v351 == v346) {
                    goto LABEL_403;
                  }
                }
                goto LABEL_474;
              }
              goto LABEL_507;
            }
          }
LABEL_403:
          MEMORY[0x18532B810](v271, -1, -1);
LABEL_404:
          MEMORY[0x18532B810](v466, -1, -1);
          unint64_t v152 = v468;
          goto LABEL_405;
        }
      }
      MEMORY[0x1F4188790](v167, v168);
      v170 = (char *)&v464 - v169;
      v476[0] = 0;
      uint64_t v475 = 0;
      uint64_t v172 = *(void *)(v2 + 40);
      v171 = *(__n128 **)(v2 + 48);
      __n128 v174 = *(__n128 *)v2;
      long long v173 = *(_OWORD *)(v2 + 16);
      uint64_t v175 = *(void *)(v2 + 32);
      v176 = v171 + 2;
      v488 = v171 + 2;
      uint64_t v489 = 0;
      BOOL v177 = (v174.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v174.n128_u64[0] & 0x7FF0000000000000) == 0;
      uint64_t v178 = *(void *)(v175 + 16);
      if (v177 || v178)
      {
        v179 = (long long *)(v175 + 32);
        v182 = (uint64_t *)(v172 + 32);
        uint64_t v262 = *(void *)(v172 + 16);
        uint64_t v263 = v171[1].n128_i64[0];
        BOOL v264 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
        if (v264 || *(void *)(v486 + 16))
        {
          v181 = (long long *)(v486 + 32);
          uint64_t v460 = v31;
          uint64_t v452 = (uint64_t)v466;
          uint64_t v444 = v31;
          uint64_t v436 = (uint64_t)v467;
          uint64_t v428 = v31 * v34;
          uint64_t v412 = (uint64_t)v170;
          uint64_t v420 = v31 * v34;
          __n128 v404 = v26;
          v388 = v487 + 2;
          uint64_t v396 = v487[1].n128_i64[0];
          v372 = (uint64_t *)(*((void *)&v486 + 1) + 32);
          uint64_t v380 = *(void *)(*((void *)&v486 + 1) + 16);
          uint64_t v364 = *(void *)(v486 + 16);
        }
        else
        {
          __n128 v480 = v10;
          v181 = &v481;
          long long v481 = v11;
          v477.n128_u64[0] = 0x200000002;
          uint64_t v460 = v31;
          uint64_t v452 = (uint64_t)v466;
          uint64_t v444 = v31;
          uint64_t v436 = (uint64_t)v467;
          uint64_t v428 = v31 * v34;
          uint64_t v412 = (uint64_t)v170;
          uint64_t v420 = v31 * v34;
          __n128 v404 = v26;
          v388 = &v480;
          uint64_t v396 = 2;
          v372 = (uint64_t *)&v477;
          uint64_t v380 = 2;
          uint64_t v364 = 2;
        }
        double v286 = v10.n128_f64[1];
        double v285 = v10.n128_f64[0];
        double v288 = *((double *)&v11 + 1);
        double v287 = *(double *)&v11;
      }
      else
      {
        v179 = &v481;
        __n128 v480 = v174;
        long long v481 = v173;
        uint64_t v474 = 0x200000002;
        BOOL v180 = (v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v10.n128_u64[0] & 0x7FF0000000000000) == 0;
        if (v180 || *(void *)(v486 + 16))
        {
          v181 = (long long *)(v486 + 32);
          uint64_t v460 = v31;
          uint64_t v452 = (uint64_t)v466;
          uint64_t v444 = v31;
          uint64_t v436 = (uint64_t)v467;
          uint64_t v428 = v31 * v34;
          uint64_t v412 = (uint64_t)v170;
          uint64_t v420 = v31 * v34;
          __n128 v404 = v26;
          v182 = &v474;
          v176 = &v480;
          v388 = v487 + 2;
          uint64_t v396 = v487[1].n128_i64[0];
          v372 = (uint64_t *)(*((void *)&v486 + 1) + 32);
          uint64_t v380 = *(void *)(*((void *)&v486 + 1) + 16);
          uint64_t v364 = *(void *)(v486 + 16);
        }
        else
        {
          __n128 v477 = v10;
          v181 = v478;
          v478[0] = v11;
          uint64_t v473 = 0x200000002;
          uint64_t v460 = v31;
          uint64_t v452 = (uint64_t)v466;
          uint64_t v444 = v31;
          uint64_t v436 = (uint64_t)v467;
          uint64_t v428 = v31 * v34;
          uint64_t v412 = (uint64_t)v170;
          uint64_t v420 = v31 * v34;
          __n128 v404 = v26;
          v182 = &v474;
          v176 = &v480;
          v388 = &v477;
          uint64_t v396 = 2;
          v372 = &v473;
          uint64_t v380 = 2;
          uint64_t v364 = 2;
        }
        double v286 = v10.n128_f64[1];
        double v285 = v10.n128_f64[0];
        double v288 = *((double *)&v11 + 1);
        double v287 = *(double *)&v11;
        uint64_t v178 = 2;
        uint64_t v262 = 2;
        uint64_t v263 = 2;
      }
      sub_184CDE774(v285, v286, v287, v288, (uint64_t)v179, v178, 0, (uint64_t)v182, v262, (uint64_t)v176, v263, (uint64_t)v181, v364, 0, (uint64_t)v372, v380, (uint64_t)v388, v396, v404.n128_i64[0],
        v404.n128_i64[1],
        v412,
        v420,
        &v475,
        v428,
        1,
        (double **)&v488,
        v436,
        v444,
        v476,
        v452,
        v460,
        0);
      int64_t v297 = v470;
      uint64_t v298 = v475;
      if (v475 < 0) {
        goto LABEL_487;
      }
      if (v29 == v471)
      {
        v299 = sub_184C9D670(v170, v475);
        swift_release();
        *double v16 = v299;
        unint64_t v300 = v476[0];
        if ((v476[0] & 0x8000000000000000) == 0)
        {
          v301 = sub_184C9D670(v467, v476[0]);
          swift_release();
          *uint64_t v12 = (uint64_t)v301;
          v302 = sub_184CE1788(v466, v300);
          v303 = v472;
          swift_release();
          void *v303 = v302;
LABEL_323:
          uint64_t v304 = v298 - v297;
          if (v298 != v297)
          {
            v305 = v472;
            unint64_t v306 = *(void *)(*v472 + 16);
            if (v306 < v300)
            {
LABEL_498:
              __break(1u);
              goto LABEL_499;
            }
            if (v300 != v306)
            {
              if (v300 < v306)
              {
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                while (v300 < *(void *)(*v305 + 16))
                {
                  uint64_t v307 = *(unsigned int *)(*v305 + 4 * v300 + 32);
                  unint64_t v308 = v307 + v304;
                  if (__OFADD__(v307, v304)) {
                    goto LABEL_452;
                  }
                  if ((v308 & 0x8000000000000000) != 0) {
                    goto LABEL_455;
                  }
                  if (HIDWORD(v308)) {
                    goto LABEL_458;
                  }
                  sub_184CE19DC();
                  if (*(void *)(*v305 + 16) <= v300) {
                    goto LABEL_461;
                  }
                  *(_DWORD *)(*v305 + 4 * v300++ + 32) = v308;
                  if (v306 == v300) {
                    goto LABEL_404;
                  }
                }
                goto LABEL_449;
              }
              __break(1u);
              goto LABEL_504;
            }
          }
          goto LABEL_404;
        }
      }
      else
      {
        sub_184CE1520(0, v470, v170, v475);
        unint64_t v300 = v476[0];
        if ((v476[0] & 0x8000000000000000) == 0)
        {
          sub_184CE1520(0, v29, v467, v476[0]);
          sub_184CE1654(0, v29, v466, v300);
          goto LABEL_323;
        }
      }
LABEL_490:
      __break(1u);
      goto LABEL_491;
    case 5:
      if (v8 >= *(double *)&v11)
      {
        uint64_t v40 = 0;
        if (v8 > *((double *)&v11 + 1))
        {
          uint64_t v39 = v9 <= *((double *)&v11 + 1);
          goto LABEL_125;
        }
        goto LABEL_74;
      }
      if (v8 <= *((double *)&v11 + 1))
      {
        uint64_t v40 = 1;
LABEL_74:
        uint64_t v39 = 2;
        goto LABEL_125;
      }
      if (v9 > *((double *)&v11 + 1))
      {
LABEL_508:
        __break(1u);
        JUMPOUT(0x184CD77ACLL);
      }
      uint64_t v39 = 1;
      uint64_t v40 = 1;
LABEL_125:
      if (((v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) == 0 || (~v10.n128_u64[0] & 0x7FF0000000000000) != 0)
        && *(void *)(v486 + 16) == 0)
      {
        uint64_t v136 = 2;
      }
      else
      {
        uint64_t v136 = *(void *)(v486 + 16);
      }
      uint64_t v137 = v136 + 2;
      if (__OFADD__(v136, 2))
      {
LABEL_435:
        __break(1u);
LABEL_436:
        __break(1u);
LABEL_437:
        __break(1u);
LABEL_438:
        __break(1u);
LABEL_439:
        __break(1u);
LABEL_440:
        __break(1u);
LABEL_441:
        __break(1u);
        goto LABEL_442;
      }
      __n128 v480 = v484;
      long long v481 = v485;
      long long v482 = v486;
      v483 = v487;
      uint64_t v138 = sub_184CE293C(0, v136);
      uint64_t v139 = v138 + 2;
      if (__OFADD__(v138, 2)) {
        goto LABEL_438;
      }
      sub_184CD3B9C((uint64_t)&v484);
      return sub_184CE29D4(0, 2, 1, v137, v139, 0, 1, 0, v7, v6, v9, v8, 1, (__n128 *)v2, (uint64_t)&v484, v40, v39);
    case 6:
      uint64_t v41 = *(void *)(v13 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      v42.n128_u64[0] = v11;
      sub_184CEBB3C(v13 + 32, v41, v41, (uint64_t *)&v480, v42, *((double *)&v11 + 1));
      swift_release();
      swift_release();
      swift_release();
      __n128 v43 = v480;
      if (((v10.n128_u64[0] & 0xFFFFFFFFFFFFFLL) == 0 || (~v10.n128_u64[0] & 0x7FF0000000000000) != 0)
        && *(void *)(v486 + 16) == 0)
      {
        uint64_t v46 = 2;
      }
      else
      {
        uint64_t v46 = *(void *)(v486 + 16);
      }
      if (((*(void *)&v7 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)&v7 & 0x7FF0000000000000) != 0) && v41 == 0) {
        int64_t v49 = 2;
      }
      else {
        int64_t v49 = v41;
      }
      unint64_t v50 = v480.n128_u64[1] - v480.n128_u64[0];
      if (__OFSUB__(v480.n128_u64[1], v480.n128_u64[0])) {
        goto LABEL_434;
      }
      uint64_t v51 = v50 + v46;
      if (__OFADD__(v50, v46)) {
        goto LABEL_437;
      }
      uint64_t v52 = *v472;
      v480.n128_f64[0] = v7;
      v480.n128_f64[1] = v6;
      *(double *)&long long v481 = v9;
      *((double *)&v481 + 1) = v8;
      *(void *)&long long v482 = v13;
      *((void *)&v482 + 1) = v52;
      v483 = v15;
      uint64_t v53 = sub_184CE293C(v43.n128_i64[0], v43.n128_i64[1]);
      __n128 v480 = v484;
      long long v481 = v485;
      long long v482 = v486;
      v483 = v487;
      uint64_t v54 = sub_184CE293C(0, v46);
      uint64_t v55 = v53 + v54;
      if (__OFADD__(v53, v54)) {
        goto LABEL_440;
      }
      sub_184CD3B9C((uint64_t)&v484);
      return sub_184CE4B28(0, v49, 1, v51, v55, 0, 1, 0, 1, v2, (uint64_t)&v484, v43.n128_i64[0], v43.n128_i64[1]);
    default:
      int64x2_t v18 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)uint64_t v1 = v18;
      *(int64x2_t *)(v1 + 16) = v18;
LABEL_4:
      swift_release();
      uint64_t v22 = MEMORY[0x1E4FBC860];
      *(void *)(v2 + 32) = MEMORY[0x1E4FBC860];
      swift_release();
      *(void *)(v2 + 40) = v22;
      uint64_t result = swift_release();
      *(void *)(v2 + 48) = v22;
      return result;
  }
}

uint64_t Region.symmetricDifference(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CDFAC8(a1, (uint64_t (*)(_OWORD *))Region.formSymmetricDifference(_:), a2);
}

unint64_t Region.formSymmetricDifference(_:)(unint64_t result)
{
  uint64_t v2 = v1;
  unint64_t v3 = result;
  uint64_t v269 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)(result + 16);
  long long v263 = *(_OWORD *)result;
  long long v264 = v4;
  __n128 v5 = *(__n128 *)(result + 32);
  __n128 v265 = v5;
  uint64_t v266 = *(void *)(result + 48);
  double v6 = *(double *)(v2 + 8);
  double v8 = *(double *)(v2 + 16);
  double v7 = *(double *)(v2 + 24);
  long long v9 = v263;
  uint64_t v11 = v2 + 32;
  unint64_t v10 = *(void *)(v2 + 32);
  long long v12 = v4;
  uint64_t v13 = *(void *)v2 & 0x7FF0000000000000;
  uint64_t v14 = *(void *)v2 & 0xFFFFFFFFFFFFFLL;
  if (v13 == 0x7FF0000000000000 && v14)
  {
    if ((~(void)v263 & 0x7FF0000000000000) != 0 || (v263 & 0xFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_5;
    }
    return result;
  }
  uint64_t v16 = *(void *)(v10 + 16);
  uint64_t v17 = v263 & 0x7FF0000000000000;
  if ((v263 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
LABEL_12:
    if (*((double *)&v4 + 1) >= v8)
    {
      if (v7 < *(double *)&v4)
      {
        if (v16) {
          int64_t v41 = *(void *)(v10 + 16);
        }
        else {
          int64_t v41 = 2;
        }
        if (((v263 & 0xFFFFFFFFFFFFFLL) == 0 || v17 != 0x7FF0000000000000)
          && *(void *)(v265.n128_u64[0] + 16) == 0)
        {
          uint64_t v44 = 2;
        }
        else
        {
          uint64_t v44 = *(void *)(v265.n128_u64[0] + 16);
        }
        long long v45 = *(_OWORD *)(result + 16);
        long long v259 = *(_OWORD *)result;
        long long v260 = v45;
        __n128 v261 = *(__n128 *)(result + 32);
        uint64_t v262 = *(void *)(result + 48);
        uint64_t v46 = sub_184CE293C(0, v44);
        sub_184CD3B9C((uint64_t)&v263);
        return sub_184CE4D58(v41, v41, 0, v44, v46, 0, 1, 0, 1, (void *)v2, (uint64_t)&v263);
      }
      if (v6 >= *(double *)&v263)
      {
        unint64_t v62 = *(void *)(v2 + 40);
        uint64_t v61 = *(void *)(v2 + 48);
        BOOL v64 = (v263 & 0xFFFFFFFFFFFFFLL) == 0 || v17 != 0x7FF0000000000000;
        if (*((double *)&v263 + 1) >= *(double *)v2)
        {
          *(void *)&long long v259 = *(void *)v2;
          *((double *)&v259 + 1) = v6;
          *(double *)&long long v260 = v8;
          *((double *)&v260 + 1) = v7;
          v261.n128_u64[0] = v10;
          v261.n128_u64[1] = v62;
          uint64_t v262 = v61;
          v5.n128_u64[0] = v4;
          uint64_t v105 = sub_184CEA964(v16 == 0, v5, *((double *)&v4 + 1));
          if (v64 && *(void *)(v265.n128_u64[0] + 16) == 0) {
            uint64_t v107 = 2;
          }
          else {
            uint64_t v107 = *(void *)(v265.n128_u64[0] + 16);
          }
          uint64_t v108 = v106 - v105;
          if (!__OFSUB__(v106, v105))
          {
            uint64_t v109 = v108 + v107;
            if (!__OFADD__(v108, v107))
            {
              uint64_t v110 = v105;
              int64_t v111 = v106;
              uint64_t v112 = sub_184CE293C(v105, v106);
              long long v259 = v263;
              long long v260 = v264;
              __n128 v261 = v265;
              uint64_t v262 = v266;
              uint64_t v113 = sub_184CE293C(0, v107);
              uint64_t v114 = v112 + v113;
              if (!__OFADD__(v112, v113))
              {
                sub_184CD3B9C((uint64_t)&v263);
                return sub_184CE4C40(v110, v111, 1, v109, v114, 0, 1, 0, 1, v2, (uint64_t)&v263, v110, v111);
              }
              goto LABEL_387;
            }
LABEL_386:
            __break(1u);
LABEL_387:
            __break(1u);
            goto LABEL_388;
          }
LABEL_385:
          __break(1u);
          goto LABEL_386;
        }
        *(void *)&long long v259 = *(void *)v2;
        *((double *)&v259 + 1) = v6;
        *(double *)&long long v260 = v8;
        *((double *)&v260 + 1) = v7;
        v261.n128_u64[0] = v10;
        v261.n128_u64[1] = v62;
        uint64_t v262 = v61;
        v5.n128_u64[0] = v4;
        uint64_t v65 = sub_184CEA964(v16 == 0, v5, *((double *)&v4 + 1));
        if (v64 && *(void *)(v265.n128_u64[0] + 16) == 0) {
          uint64_t v67 = 2;
        }
        else {
          uint64_t v67 = *(void *)(v265.n128_u64[0] + 16);
        }
        uint64_t v68 = v66 - v65;
        if (!__OFSUB__(v66, v65))
        {
          uint64_t v69 = v68 + v67;
          if (!__OFADD__(v68, v67))
          {
            uint64_t v70 = v65;
            int64_t v71 = v66;
            uint64_t v72 = sub_184CE293C(v65, v66);
            long long v259 = v263;
            long long v260 = v264;
            __n128 v261 = v265;
            uint64_t v262 = v266;
            uint64_t v73 = sub_184CE293C(0, v67);
            uint64_t v74 = v72 + v73;
            if (!__OFADD__(v72, v73))
            {
              sub_184CD3B9C((uint64_t)&v263);
              return sub_184CE87CC(v70, v71, 0, v69, v74, v9, 0, 0, 1, v2, (uint64_t)&v263, v70, v71);
            }
            goto LABEL_383;
          }
LABEL_382:
          __break(1u);
LABEL_383:
          __break(1u);
          goto LABEL_384;
        }
LABEL_381:
        __break(1u);
        goto LABEL_382;
      }
      unint64_t v47 = *(void *)(v2 + 40);
      uint64_t v48 = *(void *)(v2 + 48);
      *(void *)&long long v259 = *(void *)v2;
      *((double *)&v259 + 1) = v6;
      *(double *)&long long v260 = v8;
      *((double *)&v260 + 1) = v7;
      v261.n128_u64[0] = v10;
      v261.n128_u64[1] = v47;
      uint64_t v262 = v48;
      v5.n128_u64[0] = v4;
      uint64_t v49 = sub_184CEA964(v16 == 0, v5, *((double *)&v4 + 1));
      if (((v263 & 0xFFFFFFFFFFFFFLL) == 0 || v17 != 0x7FF0000000000000) && *(void *)(v265.n128_u64[0] + 16) == 0) {
        uint64_t v53 = 2;
      }
      else {
        uint64_t v53 = *(void *)(v265.n128_u64[0] + 16);
      }
      uint64_t v54 = v50 - v49;
      if (!__OFSUB__(v50, v49))
      {
        uint64_t v55 = v54 + v53;
        if (!__OFADD__(v54, v53))
        {
          uint64_t v56 = v49;
          int64_t v57 = v50;
          uint64_t v58 = sub_184CE293C(v49, v50);
          long long v259 = v263;
          long long v260 = v264;
          __n128 v261 = v265;
          uint64_t v262 = v266;
          uint64_t v59 = sub_184CE293C(0, v53);
          uint64_t v60 = v58 + v59;
          if (!__OFADD__(v58, v59))
          {
            sub_184CD3B9C((uint64_t)&v263);
            return sub_184CE88E4(v56, v57, 0, v55, v60, 0, 1, *((uint64_t *)&v9 + 1), 0, v2, (uint64_t)&v263, v56, v57);
          }
          goto LABEL_368;
        }
LABEL_367:
        __break(1u);
LABEL_368:
        __break(1u);
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
LABEL_373:
        __break(1u);
        goto LABEL_374;
      }
LABEL_366:
      __break(1u);
      goto LABEL_367;
    }
    BOOL v20 = (v263 & 0xFFFFFFFFFFFFFLL) == 0 || v17 != 0x7FF0000000000000;
    v254 = (uint64_t *)v265.n128_u64[0];
    if (v20 && *(void *)(v265.n128_u64[0] + 16) == 0) {
      unint64_t v21 = 2;
    }
    else {
      unint64_t v21 = *(void *)(v265.n128_u64[0] + 16);
    }
    long long v22 = *(_OWORD *)(result + 16);
    long long v259 = *(_OWORD *)result;
    long long v260 = v22;
    __n128 v261 = *(__n128 *)(result + 32);
    uint64_t v262 = *(void *)(result + 48);
    uint64_t v23 = sub_184CE293C(0, v21);
    uint64_t v24 = sub_184CEB8F0();
    uint64_t v26 = v21 * v23;
    if ((unsigned __int128)((uint64_t)v21 * (__int128)v23) >> 64 != (uint64_t)(v21 * v23) >> 63) {
      goto LABEL_343;
    }
    if (v21 >> 60)
    {
LABEL_344:
      __break(1u);
LABEL_345:
      __break(1u);
LABEL_346:
      __break(1u);
LABEL_347:
      __break(1u);
LABEL_348:
      __break(1u);
LABEL_349:
      __break(1u);
LABEL_350:
      __break(1u);
LABEL_351:
      __break(1u);
LABEL_352:
      __break(1u);
LABEL_353:
      __break(1u);
LABEL_354:
      __break(1u);
LABEL_355:
      __break(1u);
LABEL_356:
      __break(1u);
LABEL_357:
      __break(1u);
LABEL_358:
      __break(1u);
LABEL_359:
      __break(1u);
      goto LABEL_360;
    }
    uint64_t v27 = v2 + 40;
    uint64_t v28 = 4 * v21;
    unint64_t v29 = v21 >> 61;
    uint64_t v252 = *(void *)(*(void *)(v2 + 40) + 16);
    uint64_t v253 = v26;
    if (uint64_t)(8 * v21) < 1025 || (uint64_t v24 = swift_stdlib_isStackAllocationSafe(), (v24))
    {
      LODWORD(v250) = v20;
      uint64_t v30 = MEMORY[0x1F4188790](v24, v25);
      v255 = (char *)&v242 - v32;
      if (v29)
      {
LABEL_362:
        __break(1u);
        goto LABEL_363;
      }
      int64_t v249 = &v242;
      if (v28 < 1025 || (uint64_t v30 = swift_stdlib_isStackAllocationSafe(), (v30 & 1) != 0))
      {
        uint64_t isStackAllocationSafe = MEMORY[0x1F4188790](v30, v31);
        uint64_t v251 = (char *)&v242 - v36;
        if (v26 < 0)
        {
LABEL_363:
          __break(1u);
          goto LABEL_364;
        }
        if ((unint64_t)(v26 + 0x1000000000000000) >> 61)
        {
LABEL_364:
          __break(1u);
          goto LABEL_365;
        }
        unint64_t v248 = (uint64_t *)v34;
        if (8 * v26 < 1025
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          unint64_t v246 = &v242;
          MEMORY[0x1F4188790](isStackAllocationSafe, v35);
          unint64_t v38 = (char *)&v242 - v37;
          uint64_t v247 = &v242;
          unint64_t v258 = 0;
          uint64_t v257 = 0;
          BOOL v267 = (double *)(*(void *)(v2 + 48) + 32);
          uint64_t v268 = 0;
          uint64_t v39 = v254[2];
          int v40 = (int)v250;
          if (v39) {
            int v40 = 0;
          }
          if (v40 == 1)
          {
            long long v259 = v9;
            long long v260 = v12;
            v256[0] = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            sub_184CDEE74((uint64_t)&v260, 2, 0, (uint64_t)v256, 2, (uint64_t)&v259, 2, (uint64_t)v38, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
          }
          else
          {
            v254 += 4;
            uint64_t v243 = v265.n128_u64[1] + 32;
            uint64_t v244 = *(void **)(v265.n128_u64[1] + 16);
            int64_t v250 = (uint64_t *)(v266 + 32);
            uint64_t v245 = *(void *)(v266 + 16);
            swift_retain_n();
            swift_retain();
            swift_retain();
            sub_184CDEE74((uint64_t)v254, v39, 0, v243, (uint64_t)v244, (uint64_t)v250, v245, (uint64_t)v38, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
          }
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v86 = v257;
          if (v257 < 0)
          {
LABEL_360:
            __break(1u);
            goto LABEL_361;
          }
          uint64_t v87 = v252;
          if (v252)
          {
            sub_184CE1520(0, 0, v38, v257);
            unint64_t v88 = v258;
            if ((v258 & 0x8000000000000000) == 0)
            {
              sub_184CE1520(0, 0, v255, v258);
              sub_184CE1654(0, 0, v251, v88);
              if (!v86) {
                goto LABEL_288;
              }
              goto LABEL_107;
            }
          }
          else
          {
            uint64_t v95 = sub_184C9D670(v38, v257);
            swift_release();
            *(void *)(v2 + 48) = v95;
            unint64_t v88 = v258;
            if ((v258 & 0x8000000000000000) == 0)
            {
              uint64_t v96 = sub_184C9D670(v255, v258);
              swift_release();
              *(void *)uint64_t v11 = v96;
              BOOL v97 = sub_184CE1788(v251, v88);
              swift_release();
              *(void *)uint64_t v27 = v97;
              if (!v86) {
                goto LABEL_288;
              }
LABEL_107:
              unint64_t v98 = *(void *)(*(void *)v27 + 16);
              if (v98 < v88)
              {
LABEL_365:
                __break(1u);
                goto LABEL_366;
              }
              if (v88 == v98) {
                goto LABEL_288;
              }
              if (v88 >= v98) {
                goto LABEL_380;
              }
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              while (v88 < *(void *)(*(void *)v27 + 16))
              {
                uint64_t v99 = *(unsigned int *)(*(void *)v27 + 4 * v88 + 32);
                unint64_t v100 = v99 + v86;
                if (__OFADD__(v99, v86)) {
                  goto LABEL_324;
                }
                if ((v100 & 0x8000000000000000) != 0) {
                  goto LABEL_325;
                }
                if (HIDWORD(v100)) {
                  goto LABEL_326;
                }
                sub_184CE19DC();
                if (*(void *)(*(void *)v27 + 16) <= v88) {
                  goto LABEL_327;
                }
                *(_DWORD *)(*(void *)v27 + 4 * v88++ + 32) = v100;
                if (v98 == v88) {
                  goto LABEL_288;
                }
              }
              __break(1u);
LABEL_324:
              __break(1u);
LABEL_325:
              __break(1u);
LABEL_326:
              __break(1u);
LABEL_327:
              __break(1u);
              goto LABEL_328;
            }
          }
LABEL_361:
          __break(1u);
          goto LABEL_362;
        }
        uint64_t v101 = swift_slowAlloc();
        BOOL v102 = (const void *)v101;
        uint64_t v247 = &v242;
        unint64_t v258 = 0;
        uint64_t v257 = 0;
        BOOL v267 = (double *)(*(void *)(v2 + 48) + 32);
        uint64_t v268 = 0;
        uint64_t v103 = v254[2];
        int v104 = (int)v250;
        if (v103) {
          int v104 = 0;
        }
        if (v104 == 1)
        {
          long long v259 = v9;
          long long v260 = v12;
          v256[0] = 0x200000002;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184CDEE74((uint64_t)&v260, 2, 0, (uint64_t)v256, 2, (uint64_t)&v259, 2, (uint64_t)v102, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
        }
        else
        {
          int64_t v250 = v254 + 4;
          v254 = (uint64_t *)v101;
          uint64_t v119 = v265.n128_u64[1] + 32;
          uint64_t v244 = *(void **)(v265.n128_u64[1] + 16);
          unint64_t v246 = (uint64_t *)(v266 + 32);
          uint64_t v245 = *(void *)(v266 + 16);
          swift_retain_n();
          swift_retain();
          swift_retain();
          uint64_t v120 = v119;
          BOOL v102 = v254;
          sub_184CDEE74((uint64_t)v250, v103, 0, v120, (uint64_t)v244, (uint64_t)v246, v245, (uint64_t)v254, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
        }
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v121 = v257;
        if (v257 < 0) {
          goto LABEL_376;
        }
        uint64_t v87 = v252;
        if (v252)
        {
          sub_184CE1520(0, 0, v102, v257);
          unint64_t v122 = v258;
          if ((v258 & 0x8000000000000000) == 0)
          {
            __n128 v123 = v102;
            sub_184CE1520(0, 0, v255, v258);
            sub_184CE1654(0, 0, v251, v122);
            goto LABEL_183;
          }
        }
        else
        {
          unint64_t v148 = sub_184C9D670(v102, v257);
          swift_release();
          *(void *)(v2 + 48) = v148;
          unint64_t v122 = v258;
          if ((v258 & 0x8000000000000000) == 0)
          {
            __n128 v123 = v102;
            v149 = sub_184C9D670(v255, v258);
            swift_release();
            *(void *)uint64_t v11 = v149;
            v150 = sub_184CE1788(v251, v122);
            swift_release();
            *(void *)uint64_t v27 = v150;
LABEL_183:
            if (v121)
            {
              unint64_t v151 = *(void *)(*(void *)v27 + 16);
              if (v151 < v122)
              {
LABEL_394:
                __break(1u);
LABEL_395:
                __break(1u);
LABEL_396:
                __break(1u);
LABEL_397:
                __break(1u);
                goto LABEL_398;
              }
              if (v122 != v151)
              {
                if (v122 >= v151)
                {
LABEL_403:
                  __break(1u);
                  goto LABEL_404;
                }
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                while (v122 < *(void *)(*(void *)v27 + 16))
                {
                  uint64_t v152 = *(unsigned int *)(*(void *)v27 + 4 * v122 + 32);
                  unint64_t v153 = v152 + v121;
                  if (__OFADD__(v152, v121)) {
                    goto LABEL_333;
                  }
                  if ((v153 & 0x8000000000000000) != 0) {
                    goto LABEL_336;
                  }
                  if (HIDWORD(v153)) {
                    goto LABEL_339;
                  }
                  sub_184CE19DC();
                  if (*(void *)(*(void *)v27 + 16) <= v122) {
                    goto LABEL_342;
                  }
                  *(_DWORD *)(*(void *)v27 + 4 * v122++ + 32) = v153;
                  if (v151 == v122) {
                    goto LABEL_194;
                  }
                }
                goto LABEL_330;
              }
            }
LABEL_194:
            MEMORY[0x18532B810](v123, -1, -1);
LABEL_288:
            uint64_t v209 = *(void *)v11;
            uint64_t v210 = *(void *)(*(void *)v11 + 16);
            if (v210)
            {
              uint64_t v211 = *(void *)(v2 + 40);
              uint64_t v212 = *(void *)(v211 + 16);
              if (v212)
              {
                double v213 = (double *)(*(void *)(v2 + 48) + 32);
                uint64_t v214 = *(unsigned int *)(v211 + 32);
                if (v214)
                {
                  double v215 = *v213;
                  double v216 = v213[v214 - 1];
                  double v217 = NAN;
                  if ((*(void *)v213 & 0xFFFFFFFFFFFFFLL) == 0) {
                    double v217 = *v213;
                  }
                  if ((~*(void *)v213 & 0x7FF0000000000000) == 0) {
                    double v215 = v217;
                  }
                  if ((~*(void *)&v216 & 0x7FF0000000000000) == 0
                    && (*(void *)&v213[v214 - 1] & 0xFFFFFFFFFFFFFLL) != 0)
                  {
                    double v216 = NAN;
                  }
                }
                else
                {
                  double v216 = NAN;
                  double v215 = NAN;
                }
                uint64_t v220 = v212 - 1;
                if (v220)
                {
                  double v223 = (unsigned int *)(v211 + 36);
                  do
                  {
                    unsigned int v225 = *v223++;
                    uint64_t v224 = v225;
                    if (v214 != v225)
                    {
                      unint64_t v226 = &v213[v214];
                      double v227 = v226[v224 + ~v214];
                      if ((*(void *)v226 & 0xFFFFFFFFFFFFFLL) != 0) {
                        double v228 = v215;
                      }
                      else {
                        double v228 = *v226;
                      }
                      if ((~*(void *)v226 & 0x7FF0000000000000) != 0) {
                        double v228 = *v226;
                      }
                      if (v215 > *v226) {
                        double v215 = v228;
                      }
                      if (v227 >= v216)
                      {
                        double v229 = v226[v224 + ~v214];
                        if ((~*(void *)&v227 & 0x7FF0000000000000) != 0)
                        {
                          double v216 = v227;
                        }
                        else if ((*(void *)&v229 & 0xFFFFFFFFFFFFFLL) == 0)
                        {
                          double v216 = v227;
                        }
                      }
                    }
                    uint64_t v214 = v224;
                    --v220;
                  }
                  while (v220);
                }
              }
              else
              {
                double v216 = NAN;
                double v215 = NAN;
              }
              uint64_t v222 = *(void *)(v209 + 32);
              uint64_t v221 = v209 + 32;
              uint64_t v218 = v222;
              if (v87) {
                uint64_t v219 = *(void *)(v2 + 24);
              }
              else {
                uint64_t v219 = *(void *)(v221 + 8 * v210 - 8);
              }
            }
            else
            {
              double v215 = NAN;
              double v216 = NAN;
              uint64_t v218 = 0x7FF8000000000000;
              uint64_t v219 = 0x7FF8000000000000;
            }
            *(double *)uint64_t v2 = v215;
            *(double *)(v2 + 8) = v216;
            *(void *)(v2 + 16) = v218;
            *(void *)(v2 + 24) = v219;
            return sub_184CEB9B4();
          }
        }
LABEL_379:
        __break(1u);
LABEL_380:
        __break(1u);
        goto LABEL_381;
      }
      uint64_t v89 = swift_slowAlloc();
      uint64_t v251 = (char *)v89;
      if (v26 < 0)
      {
LABEL_390:
        __break(1u);
        goto LABEL_391;
      }
      if ((unint64_t)(v26 + 0x1000000000000000) >> 61)
      {
LABEL_391:
        __break(1u);
        goto LABEL_392;
      }
      if (8 * v26 < 1025 || (uint64_t v89 = swift_stdlib_isStackAllocationSafe(), (v89 & 1) != 0))
      {
        uint64_t v247 = &v242;
        MEMORY[0x1F4188790](v89, v90);
        uint64_t v92 = (char *)&v242 - v91;
        unint64_t v248 = &v242;
        unint64_t v258 = 0;
        uint64_t v257 = 0;
        BOOL v267 = (double *)(*(void *)(v2 + 48) + 32);
        uint64_t v268 = 0;
        uint64_t v93 = v254[2];
        int v94 = (int)v250;
        if (v93) {
          int v94 = 0;
        }
        if (v94 == 1)
        {
          long long v259 = v9;
          long long v260 = v12;
          v256[0] = 0x200000002;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184CDEE74((uint64_t)&v260, 2, 0, (uint64_t)v256, 2, (uint64_t)&v259, 2, (uint64_t)v92, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
        }
        else
        {
          v254 += 4;
          uint64_t v244 = (void *)(v265.n128_u64[1] + 32);
          uint64_t v245 = *(void *)(v265.n128_u64[1] + 16);
          int64_t v250 = (uint64_t *)(v266 + 32);
          unint64_t v246 = *(uint64_t **)(v266 + 16);
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184CDEE74((uint64_t)v254, v93, 0, (uint64_t)v244, v245, (uint64_t)v250, (uint64_t)v246, (uint64_t)v92, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
        }
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v117 = v257;
        if (v257 < 0) {
          goto LABEL_375;
        }
        uint64_t v87 = v252;
        if (v252)
        {
          sub_184CE1520(0, 0, v92, v257);
          unint64_t v118 = v258;
          if ((v258 & 0x8000000000000000) == 0)
          {
            sub_184CE1520(0, 0, v255, v258);
            sub_184CE1654(0, 0, v251, v118);
LABEL_169:
            if (v117)
            {
              unint64_t v145 = *(void *)(*(void *)v27 + 16);
              if (v145 < v118)
              {
LABEL_393:
                __break(1u);
                goto LABEL_394;
              }
              if (v118 != v145)
              {
                if (v118 >= v145)
                {
LABEL_402:
                  __break(1u);
                  goto LABEL_403;
                }
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                while (v118 < *(void *)(*(void *)v27 + 16))
                {
                  uint64_t v146 = *(unsigned int *)(*(void *)v27 + 4 * v118 + 32);
                  unint64_t v147 = v146 + v117;
                  if (__OFADD__(v146, v117)) {
                    goto LABEL_332;
                  }
                  if ((v147 & 0x8000000000000000) != 0) {
                    goto LABEL_335;
                  }
                  if (HIDWORD(v147)) {
                    goto LABEL_338;
                  }
                  sub_184CE19DC();
                  if (*(void *)(*(void *)v27 + 16) <= v118) {
                    goto LABEL_341;
                  }
                  *(_DWORD *)(*(void *)v27 + 4 * v118++ + 32) = v147;
                  if (v145 == v118) {
                    goto LABEL_261;
                  }
                }
                goto LABEL_329;
              }
            }
            goto LABEL_261;
          }
        }
        else
        {
          double v142 = sub_184C9D670(v92, v257);
          swift_release();
          *(void *)(v2 + 48) = v142;
          unint64_t v118 = v258;
          if ((v258 & 0x8000000000000000) == 0)
          {
            double v143 = sub_184C9D670(v255, v258);
            swift_release();
            *(void *)uint64_t v11 = v143;
            int64_t v144 = sub_184CE1788(v251, v118);
            swift_release();
            *(void *)uint64_t v27 = v144;
            goto LABEL_169;
          }
        }
LABEL_378:
        __break(1u);
        goto LABEL_379;
      }
      BOOL v163 = (const void *)swift_slowAlloc();
      unint64_t v248 = &v242;
      unint64_t v258 = 0;
      uint64_t v257 = 0;
      BOOL v267 = (double *)(*(void *)(v2 + 48) + 32);
      uint64_t v268 = 0;
      uint64_t v164 = v254[2];
      int v165 = (int)v250;
      if (v164) {
        int v165 = 0;
      }
      if (v165 == 1)
      {
        long long v259 = v9;
        long long v260 = v12;
        v256[0] = 0x200000002;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CDEE74((uint64_t)&v260, 2, 0, (uint64_t)v256, 2, (uint64_t)&v259, 2, (uint64_t)v163, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
      }
      else
      {
        v254 += 4;
        uint64_t v245 = v265.n128_u64[1] + 32;
        unint64_t v246 = *(uint64_t **)(v265.n128_u64[1] + 16);
        int64_t v250 = (uint64_t *)(v266 + 32);
        uint64_t v247 = *(uint64_t **)(v266 + 16);
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CDEE74((uint64_t)v254, v164, 0, v245, (uint64_t)v246, (uint64_t)v250, (uint64_t)v247, (uint64_t)v163, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
      }
      __n128 v174 = v163;
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v175 = v257;
      if (v257 < 0) {
        goto LABEL_397;
      }
      uint64_t v87 = v252;
      if (v252)
      {
        sub_184CE1520(0, 0, v163, v257);
        unint64_t v176 = v258;
        if ((v258 & 0x8000000000000000) == 0)
        {
          sub_184CE1520(0, 0, v255, v258);
          sub_184CE1654(0, 0, v251, v176);
          goto LABEL_249;
        }
      }
      else
      {
        BOOL v189 = sub_184C9D670(v163, v257);
        swift_release();
        *(void *)(v2 + 48) = v189;
        unint64_t v176 = v258;
        if ((v258 & 0x8000000000000000) == 0)
        {
          uint64_t v190 = sub_184C9D670(v255, v258);
          swift_release();
          *(void *)uint64_t v11 = v190;
          v191 = sub_184CE1788(v251, v176);
          swift_release();
          *(void *)uint64_t v27 = v191;
LABEL_249:
          if (v175)
          {
            unint64_t v192 = *(void *)(*(void *)v27 + 16);
            if (v192 < v176)
            {
LABEL_408:
              __break(1u);
LABEL_409:
              __break(1u);
              goto LABEL_410;
            }
            if (v176 != v192)
            {
              if (v176 >= v192) {
                goto LABEL_413;
              }
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              while (v176 < *(void *)(*(void *)v27 + 16))
              {
                uint64_t v193 = *(unsigned int *)(*(void *)v27 + 4 * v176 + 32);
                unint64_t v194 = v193 + v175;
                if (__OFADD__(v193, v175)) {
                  goto LABEL_350;
                }
                if ((v194 & 0x8000000000000000) != 0) {
                  goto LABEL_357;
                }
                if (HIDWORD(v194)) {
                  goto LABEL_358;
                }
                sub_184CE19DC();
                if (*(void *)(*(void *)v27 + 16) <= v176) {
                  goto LABEL_359;
                }
                *(_DWORD *)(*(void *)v27 + 4 * v176++ + 32) = v194;
                if (v192 == v176) {
                  goto LABEL_260;
                }
              }
              goto LABEL_349;
            }
          }
LABEL_260:
          MEMORY[0x18532B810](v174, -1, -1);
LABEL_261:
          MEMORY[0x18532B810](v251, -1, -1);
          goto LABEL_288;
        }
      }
LABEL_400:
      __break(1u);
      goto LABEL_401;
    }
    uint64_t v75 = swift_slowAlloc();
    v255 = (char *)v75;
    if (v29)
    {
LABEL_384:
      __break(1u);
      goto LABEL_385;
    }
    if (v28 < 1025 || (uint64_t v75 = swift_stdlib_isStackAllocationSafe(), (v75 & 1) != 0))
    {
      uint64_t v77 = MEMORY[0x1F4188790](v75, v76);
      uint64_t v251 = (char *)&v242 - v79;
      if (v26 < 0)
      {
LABEL_388:
        __break(1u);
        goto LABEL_389;
      }
      if ((unint64_t)(v26 + 0x1000000000000000) >> 61)
      {
LABEL_389:
        __break(1u);
        goto LABEL_390;
      }
      int64_t v249 = &v242;
      if (8 * v26 < 1025 || (uint64_t v77 = swift_stdlib_isStackAllocationSafe(), (v77 & 1) != 0))
      {
        uint64_t v247 = &v242;
        MEMORY[0x1F4188790](v77, v78);
        __n128 v81 = (char *)&v242 - v80;
        unint64_t v248 = &v242;
        unint64_t v258 = 0;
        uint64_t v257 = 0;
        uint64_t v82 = *(void *)(v2 + 48);
        int64_t v250 = *(uint64_t **)(v2 + 32);
        BOOL v267 = (double *)(v82 + 32);
        uint64_t v268 = 0;
        uint64_t v83 = v254[2];
        if (v83) {
          BOOL v84 = 0;
        }
        else {
          BOOL v84 = v20;
        }
        if (v84)
        {
          long long v259 = v9;
          long long v260 = v12;
          v256[0] = 0x200000002;
          swift_retain_n();
          swift_retain();
          swift_retain();
          unint64_t v85 = v251;
          sub_184CDEE74((uint64_t)&v260, 2, 0, (uint64_t)v256, 2, (uint64_t)&v259, 2, (uint64_t)v81, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
        }
        else
        {
          v254 += 4;
          uint64_t v243 = v265.n128_u64[1] + 32;
          uint64_t v244 = *(void **)(v265.n128_u64[1] + 16);
          unint64_t v246 = (uint64_t *)(v266 + 32);
          uint64_t v245 = *(void *)(v266 + 16);
          swift_retain_n();
          swift_retain();
          swift_retain();
          unint64_t v85 = v251;
          sub_184CDEE74((uint64_t)v254, v83, 0, v243, (uint64_t)v244, (uint64_t)v246, v245, (uint64_t)v81, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
        }
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v115 = v257;
        if (v257 < 0)
        {
LABEL_374:
          __break(1u);
LABEL_375:
          __break(1u);
LABEL_376:
          __break(1u);
          goto LABEL_377;
        }
        uint64_t v87 = v252;
        if (v252)
        {
          sub_184CE1520(0, 0, v81, v257);
          unint64_t v116 = v258;
          if ((v258 & 0x8000000000000000) == 0)
          {
            sub_184CE1520(0, 0, v255, v258);
            sub_184CE1654(0, 0, v85, v116);
LABEL_155:
            if (v115)
            {
              unint64_t v139 = *(void *)(*(void *)v27 + 16);
              if (v139 < v116)
              {
LABEL_392:
                __break(1u);
                goto LABEL_393;
              }
              if (v116 != v139)
              {
                if (v116 >= v139)
                {
LABEL_401:
                  __break(1u);
                  goto LABEL_402;
                }
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                sub_184CE19DC();
                while (v116 < *(void *)(*(void *)v27 + 16))
                {
                  uint64_t v140 = *(unsigned int *)(*(void *)v27 + 4 * v116 + 32);
                  unint64_t v141 = v140 + v115;
                  if (__OFADD__(v140, v115)) {
                    goto LABEL_331;
                  }
                  if ((v141 & 0x8000000000000000) != 0) {
                    goto LABEL_334;
                  }
                  if (HIDWORD(v141)) {
                    goto LABEL_337;
                  }
                  sub_184CE19DC();
                  if (*(void *)(*(void *)v27 + 16) <= v116) {
                    goto LABEL_340;
                  }
                  *(_DWORD *)(*(void *)v27 + 4 * v116++ + 32) = v141;
                  if (v139 == v116) {
                    goto LABEL_287;
                  }
                }
LABEL_328:
                __break(1u);
LABEL_329:
                __break(1u);
LABEL_330:
                __break(1u);
LABEL_331:
                __break(1u);
LABEL_332:
                __break(1u);
LABEL_333:
                __break(1u);
LABEL_334:
                __break(1u);
LABEL_335:
                __break(1u);
LABEL_336:
                __break(1u);
LABEL_337:
                __break(1u);
LABEL_338:
                __break(1u);
LABEL_339:
                __break(1u);
LABEL_340:
                __break(1u);
LABEL_341:
                __break(1u);
LABEL_342:
                __break(1u);
LABEL_343:
                __break(1u);
                goto LABEL_344;
              }
            }
            goto LABEL_287;
          }
        }
        else
        {
          uint64_t v136 = sub_184C9D670(v81, v257);
          swift_release();
          *(void *)(v2 + 48) = v136;
          unint64_t v116 = v258;
          if ((v258 & 0x8000000000000000) == 0)
          {
            uint64_t v137 = sub_184C9D670(v255, v258);
            swift_release();
            *(void *)uint64_t v11 = v137;
            uint64_t v138 = sub_184CE1788(v85, v116);
            swift_release();
            *(void *)uint64_t v27 = v138;
            goto LABEL_155;
          }
        }
LABEL_377:
        __break(1u);
        goto LABEL_378;
      }
      unint64_t v248 = (uint64_t *)swift_slowAlloc();
      int64_t v250 = &v242;
      unint64_t v258 = 0;
      uint64_t v257 = 0;
      uint64_t v154 = *(void *)(v2 + 48);
      uint64_t v247 = *(uint64_t **)(v2 + 40);
      BOOL v267 = (double *)(v154 + 32);
      uint64_t v268 = 0;
      uint64_t v155 = v254[2];
      if (v155) {
        BOOL v156 = 0;
      }
      else {
        BOOL v156 = v20;
      }
      if (v156)
      {
        long long v259 = v9;
        long long v260 = v12;
        v256[0] = 0x200000002;
        swift_retain_n();
        swift_retain();
        swift_retain();
        uint64_t v241 = v21;
        uint64_t v239 = (uint64_t)v251;
        uint64_t v237 = v21;
        uint64_t v235 = (uint64_t)v255;
        unint64_t v157 = v256;
        uint64_t v158 = &v259;
        uint64_t v233 = v253;
        uint64_t v231 = v253;
        uint64_t v159 = (uint64_t *)&v260;
        uint64_t v160 = 2;
        uint64_t v161 = 2;
        uint64_t v162 = 2;
      }
      else
      {
        v254 += 4;
        uint64_t v169 = v265.n128_u64[1] + 32;
        uint64_t v244 = *(void **)(v265.n128_u64[1] + 16);
        unint64_t v246 = (uint64_t *)(v266 + 32);
        uint64_t v245 = *(void *)(v266 + 16);
        swift_retain_n();
        swift_retain();
        swift_retain();
        uint64_t v241 = v21;
        uint64_t v239 = (uint64_t)v251;
        uint64_t v237 = v21;
        uint64_t v235 = (uint64_t)v255;
        uint64_t v233 = v253;
        uint64_t v231 = v253;
        uint64_t v159 = v254;
        uint64_t v160 = v155;
        unint64_t v157 = (void *)v169;
        uint64_t v161 = (uint64_t)v244;
        uint64_t v158 = (long long *)v246;
        uint64_t v162 = v245;
      }
      v170 = v248;
      sub_184CDEE74((uint64_t)v159, v160, 0, (uint64_t)v157, v161, (uint64_t)v158, v162, (uint64_t)v248, v231, &v257, v233, 0, &v267, v235, v237, (uint64_t *)&v258, v239, v241, 0);
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v171 = v257;
      if (v257 < 0) {
        goto LABEL_396;
      }
      uint64_t v87 = v252;
      if (v252)
      {
        sub_184CE1520(0, 0, v170, v257);
        unint64_t v172 = v258;
        if ((v258 & 0x8000000000000000) == 0)
        {
          long long v173 = v170;
          sub_184CE1520(0, 0, v255, v258);
          sub_184CE1654(0, 0, v251, v172);
          goto LABEL_235;
        }
      }
      else
      {
        v183 = sub_184C9D670(v170, v257);
        swift_release();
        *(void *)(v2 + 48) = v183;
        unint64_t v172 = v258;
        if ((v258 & 0x8000000000000000) == 0)
        {
          long long v173 = v170;
          uint64_t v184 = sub_184C9D670(v255, v258);
          swift_release();
          *(void *)uint64_t v11 = v184;
          long long v185 = sub_184CE1788(v251, v172);
          swift_release();
          *(void *)uint64_t v27 = v185;
LABEL_235:
          if (v171)
          {
            unint64_t v186 = *(void *)(*(void *)v27 + 16);
            if (v186 < v172)
            {
LABEL_407:
              __break(1u);
              goto LABEL_408;
            }
            if (v172 != v186)
            {
              if (v172 >= v186)
              {
LABEL_412:
                __break(1u);
LABEL_413:
                __break(1u);
              }
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              while (v172 < *(void *)(*(void *)v27 + 16))
              {
                uint64_t v187 = *(unsigned int *)(*(void *)v27 + 4 * v172 + 32);
                unint64_t v188 = v187 + v171;
                if (__OFADD__(v187, v171)) {
                  goto LABEL_348;
                }
                if ((v188 & 0x8000000000000000) != 0) {
                  goto LABEL_354;
                }
                if (HIDWORD(v188)) {
                  goto LABEL_355;
                }
                sub_184CE19DC();
                if (*(void *)(*(void *)v27 + 16) <= v172) {
                  goto LABEL_356;
                }
                *(_DWORD *)(*(void *)v27 + 4 * v172++ + 32) = v188;
                if (v186 == v172) {
                  goto LABEL_246;
                }
              }
              goto LABEL_347;
            }
          }
LABEL_246:
          MEMORY[0x18532B810](v173, -1, -1);
          goto LABEL_287;
        }
      }
LABEL_399:
      __break(1u);
      goto LABEL_400;
    }
    uint64_t v124 = swift_slowAlloc();
    uint64_t v251 = (char *)v124;
    if (v26 < 0)
    {
LABEL_404:
      __break(1u);
      goto LABEL_405;
    }
    if ((unint64_t)(v26 + 0x1000000000000000) >> 61)
    {
LABEL_405:
      __break(1u);
      goto LABEL_406;
    }
    BOOL v126 = v20;
    if (8 * v26 < 1025 || (uint64_t v124 = swift_stdlib_isStackAllocationSafe(), (v124 & 1) != 0))
    {
      unint64_t v248 = &v242;
      MEMORY[0x1F4188790](v124, v125);
      int64_t v249 = (uint64_t *)((char *)&v242 - v127);
      int64_t v250 = &v242;
      unint64_t v258 = 0;
      uint64_t v257 = 0;
      BOOL v267 = (double *)(*(void *)(v2 + 48) + 32);
      uint64_t v268 = 0;
      uint64_t v128 = v254[2];
      if (v128) {
        BOOL v129 = 0;
      }
      else {
        BOOL v129 = v20;
      }
      if (v129)
      {
        long long v259 = v9;
        long long v260 = v12;
        v256[0] = 0x200000002;
        swift_retain_n();
        swift_retain();
        swift_retain();
        uint64_t v240 = v21;
        uint64_t v238 = (uint64_t)v251;
        uint64_t v236 = v21;
        uint64_t v234 = (uint64_t)v255;
        unint64_t v130 = v256;
        v131 = &v259;
        uint64_t v232 = v253;
        uint64_t v230 = v253;
        v132 = (uint64_t *)&v260;
        uint64_t v133 = 2;
        uint64_t v134 = 2;
        uint64_t v135 = 2;
      }
      else
      {
        v254 += 4;
        uint64_t v244 = (void *)(v265.n128_u64[1] + 32);
        uint64_t v245 = *(void *)(v265.n128_u64[1] + 16);
        uint64_t v247 = (uint64_t *)(v266 + 32);
        unint64_t v246 = *(uint64_t **)(v266 + 16);
        swift_retain_n();
        swift_retain();
        swift_retain();
        uint64_t v240 = v21;
        uint64_t v238 = (uint64_t)v251;
        uint64_t v236 = v21;
        uint64_t v234 = (uint64_t)v255;
        uint64_t v232 = v253;
        uint64_t v230 = v253;
        v132 = v254;
        uint64_t v133 = v128;
        unint64_t v130 = v244;
        uint64_t v134 = v245;
        v131 = (long long *)v247;
        uint64_t v135 = (uint64_t)v246;
      }
      BOOL v166 = v249;
      sub_184CDEE74((uint64_t)v132, v133, 0, (uint64_t)v130, v134, (uint64_t)v131, v135, (uint64_t)v249, v230, &v257, v232, 0, &v267, v234, v236, (uint64_t *)&v258, v238, v240, 0);
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v167 = v257;
      if (v257 < 0) {
        goto LABEL_395;
      }
      uint64_t v87 = v252;
      if (v252)
      {
        sub_184CE1520(0, 0, v166, v257);
        unint64_t v168 = v258;
        if ((v258 & 0x8000000000000000) == 0)
        {
          sub_184CE1520(0, 0, v255, v258);
          sub_184CE1654(0, 0, v251, v168);
LABEL_221:
          if (v167)
          {
            unint64_t v180 = *(void *)(*(void *)v27 + 16);
            if (v180 < v168)
            {
LABEL_406:
              __break(1u);
              goto LABEL_407;
            }
            if (v168 != v180)
            {
              if (v168 >= v180)
              {
LABEL_411:
                __break(1u);
                goto LABEL_412;
              }
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              while (v168 < *(void *)(*(void *)v27 + 16))
              {
                uint64_t v181 = *(unsigned int *)(*(void *)v27 + 4 * v168 + 32);
                unint64_t v182 = v181 + v167;
                if (__OFADD__(v181, v167)) {
                  goto LABEL_346;
                }
                if ((v182 & 0x8000000000000000) != 0) {
                  goto LABEL_351;
                }
                if (HIDWORD(v182)) {
                  goto LABEL_352;
                }
                sub_184CE19DC();
                if (*(void *)(*(void *)v27 + 16) <= v168) {
                  goto LABEL_353;
                }
                *(_DWORD *)(*(void *)v27 + 4 * v168++ + 32) = v182;
                if (v180 == v168) {
                  goto LABEL_286;
                }
              }
              goto LABEL_345;
            }
          }
          goto LABEL_286;
        }
      }
      else
      {
        BOOL v177 = sub_184C9D670(v166, v257);
        swift_release();
        *(void *)(v2 + 48) = v177;
        unint64_t v168 = v258;
        if ((v258 & 0x8000000000000000) == 0)
        {
          uint64_t v178 = sub_184C9D670(v255, v258);
          swift_release();
          *(void *)uint64_t v11 = v178;
          v179 = sub_184CE1788(v251, v168);
          swift_release();
          *(void *)uint64_t v27 = v179;
          goto LABEL_221;
        }
      }
LABEL_398:
      __break(1u);
      goto LABEL_399;
    }
    v195 = (const void *)swift_slowAlloc();
    int64_t v249 = &v242;
    unint64_t v258 = 0;
    uint64_t v257 = 0;
    uint64_t v196 = *(void *)(v2 + 48);
    int64_t v250 = *(uint64_t **)(v2 + 32);
    BOOL v267 = (double *)(v196 + 32);
    uint64_t v268 = 0;
    uint64_t v197 = v254[2];
    if (v197) {
      BOOL v198 = 0;
    }
    else {
      BOOL v198 = v126;
    }
    if (v198)
    {
      long long v259 = v263;
      long long v260 = v12;
      v256[0] = 0x200000002;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184CDEE74((uint64_t)&v260, 2, 0, (uint64_t)v256, 2, (uint64_t)&v259, 2, (uint64_t)v195, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
    }
    else
    {
      v254 += 4;
      uint64_t v199 = v265.n128_u64[1] + 32;
      unint64_t v246 = *(uint64_t **)(v265.n128_u64[1] + 16);
      unint64_t v248 = (uint64_t *)(v266 + 32);
      uint64_t v247 = *(uint64_t **)(v266 + 16);
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184CDEE74((uint64_t)v254, v197, 0, v199, (uint64_t)v246, (uint64_t)v248, (uint64_t)v247, (uint64_t)v195, v253, &v257, v253, 0, &v267, (uint64_t)v255, v21, (uint64_t *)&v258, (uint64_t)v251, v21, 0);
    }
    long long v200 = v195;
    swift_release_n();
    swift_release();
    swift_release();
    uint64_t v201 = v257;
    if (v257 < 0) {
      goto LABEL_409;
    }
    uint64_t v87 = v252;
    if (v252)
    {
      sub_184CE1520(0, 0, v195, v257);
      unint64_t v202 = v258;
      if ((v258 & 0x8000000000000000) == 0)
      {
        sub_184CE1520(0, 0, v255, v258);
        uint64_t result = sub_184CE1654(0, 0, v251, v202);
        goto LABEL_274;
      }
    }
    else
    {
      v203 = sub_184C9D670(v195, v257);
      swift_release();
      *(void *)(v2 + 48) = v203;
      unint64_t v202 = v258;
      if ((v258 & 0x8000000000000000) == 0)
      {
        BOOL v204 = sub_184C9D670(v255, v258);
        swift_release();
        *(void *)uint64_t v11 = v204;
        uint64_t v205 = sub_184CE1788(v251, v202);
        uint64_t result = swift_release();
        *(void *)uint64_t v27 = v205;
LABEL_274:
        if (v201)
        {
          unint64_t v206 = *(void *)(*(void *)v27 + 16);
          if (v206 < v202)
          {
            __break(1u);
            goto LABEL_415;
          }
          if (v202 != v206)
          {
            if (v202 < v206)
            {
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              sub_184CE19DC();
              while (v202 < *(void *)(*(void *)v27 + 16))
              {
                uint64_t v207 = *(unsigned int *)(*(void *)v27 + 4 * v202 + 32);
                unint64_t v208 = v207 + v201;
                if (__OFADD__(v207, v201)) {
                  goto LABEL_370;
                }
                if ((v208 & 0x8000000000000000) != 0) {
                  goto LABEL_371;
                }
                if (HIDWORD(v208)) {
                  goto LABEL_372;
                }
                sub_184CE19DC();
                if (*(void *)(*(void *)v27 + 16) <= v202) {
                  goto LABEL_373;
                }
                *(_DWORD *)(*(void *)v27 + 4 * v202++ + 32) = v208;
                if (v206 == v202) {
                  goto LABEL_285;
                }
              }
              goto LABEL_369;
            }
LABEL_415:
            __break(1u);
            return result;
          }
        }
LABEL_285:
        MEMORY[0x18532B810](v200, -1, -1);
LABEL_286:
        MEMORY[0x18532B810](v251, -1, -1);
LABEL_287:
        MEMORY[0x18532B810](v255, -1, -1);
        goto LABEL_288;
      }
    }
LABEL_410:
    __break(1u);
    goto LABEL_411;
  }
  uint64_t v18 = v263 & 0xFFFFFFFFFFFFFLL;
  if (v13 != 0x7FF0000000000000 || !v14)
  {
    if (v18) {
      return result;
    }
    goto LABEL_12;
  }
  if (!v18)
  {
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    long long v15 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 16) = v15;
    *(_OWORD *)(v2 + 32) = *(_OWORD *)(v3 + 32);
    *(void *)(v2 + 48) = *(void *)(v3 + 48);
    return sub_184CD3B9C((uint64_t)&v263);
  }
  return result;
}

BOOL Region.insert(_:)(float64_t *a1, double *a2)
{
  uint64_t v3 = v2;
  float64_t v6 = *a2;
  float64_t v5 = a2[1];
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  uint64_t v9 = *((void *)a2 + 4);
  uint64_t v10 = *((void *)a2 + 5);
  uint64_t v11 = *((void *)a2 + 6);
  uint64_t v12 = *(void *)(v2 + 32);
  uint64_t v13 = *(void *)(v2 + 40);
  uint64_t v14 = *(void *)(v3 + 48);
  long long v15 = *(_OWORD *)(v3 + 16);
  float64x2_t v31 = *(float64x2_t *)v3;
  long long v32 = v15;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  uint64_t v35 = v14;
  *(float64_t *)&long long v25 = v6;
  *((float64_t *)&v25 + 1) = v5;
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  Region.formIntersection(_:)(&v25);
  float64_t v16 = v31.f64[1];
  float64_t v17 = v31.f64[0];
  uint64_t v19 = *((void *)&v32 + 1);
  uint64_t v18 = v32;
  uint64_t v20 = v33;
  uint64_t v21 = v34;
  uint64_t v22 = v35;
  *(float64_t *)&long long v25 = v6;
  *((float64_t *)&v25 + 1) = v5;
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  char v23 = _s12CoreGraphics6RegionV2eeoiySbAC_ACtFZ_0(&v31, (uint64_t)&v25);
  if (v23)
  {
    *a1 = v17;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v31.f64[0] = v6;
    v31.f64[1] = v5;
    *(void *)&long long v32 = v7;
    *((void *)&v32 + 1) = v8;
    uint64_t v33 = v9;
    uint64_t v34 = v10;
    uint64_t v35 = v11;
    Region.formUnion(_:)((long long *)&v31);
    *a1 = v6;
    swift_retain();
    swift_retain();
    swift_retain();
    float64_t v16 = v5;
    uint64_t v18 = v7;
    uint64_t v19 = v8;
    uint64_t v20 = v9;
    uint64_t v21 = v10;
    uint64_t v22 = v11;
  }
  a1[1] = v16;
  *((void *)a1 + 2) = v18;
  *((void *)a1 + 3) = v19;
  *((void *)a1 + 4) = v20;
  *((void *)a1 + 5) = v21;
  *((void *)a1 + 6) = v22;
  return (v23 & 1) == 0;
}

void Region.remove(_:)(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  unint64_t v9 = a1[4];
  unint64_t v10 = a1[5];
  unint64_t v11 = a1[6];
  unint64_t v12 = *(void *)(v2 + 32);
  unint64_t v13 = *(void *)(v2 + 40);
  unint64_t v14 = *(void *)(v3 + 48);
  long long v15 = *(_OWORD *)(v3 + 16);
  __n128 v31 = *(__n128 *)v3;
  long long v32 = v15;
  unint64_t v33 = v12;
  unint64_t v34 = v13;
  unint64_t v35 = v14;
  *(void *)&long long v25 = v5;
  *((void *)&v25 + 1) = v6;
  unint64_t v26 = v7;
  unint64_t v27 = v8;
  unint64_t v28 = v9;
  unint64_t v29 = v10;
  unint64_t v30 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  Region.formIntersection(_:)(&v25);
  __n128 v16 = v31;
  long long v17 = v32;
  unint64_t v18 = v33;
  unint64_t v19 = v34;
  unint64_t v20 = v35;
  if ((~v31.n128_u64[0] & 0x7FF0000000000000) != 0 || (v31.n128_u64[0] & 0xFFFFFFFFFFFFFLL) == 0)
  {
    v31.n128_u64[0] = v5;
    v31.n128_u64[1] = v6;
    *(void *)&long long v32 = v7;
    *((void *)&v32 + 1) = v8;
    unint64_t v33 = v9;
    unint64_t v34 = v10;
    unint64_t v35 = v11;
    long long v23 = v17;
    __n128 v24 = v16;
    Region.subtract(_:)((uint64_t)&v31, v16);
    long long v22 = v23;
    __n128 v21 = v24;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    __n128 v21 = 0uLL;
    long long v22 = 0uLL;
  }
  *(__n128 *)a2 = v21;
  *(_OWORD *)(a2 + 16) = v22;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v19;
  *(void *)(a2 + 48) = v20;
}

BOOL Region.isEmpty.getter()
{
  return (*v0 & 0xFFFFFFFFFFFFFLL) != 0 && (~*v0 & 0x7FF0000000000000) == 0;
}

void Region.subtract(_:)(uint64_t a1, __n128 a2)
{
  uint64_t v3 = (int64x2_t *)v2;
  uint64_t v401 = *MEMORY[0x1E4F143B8];
  double v5 = *(double *)a1;
  double v6 = *(double *)v2;
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)v2 & 0x7FF0000000000000;
  BOOL v9 = v8 == 0x7FF0000000000000;
  uint64_t v10 = *(void *)v2 & 0xFFFFFFFFFFFFFLL;
  if (!v10) {
    BOOL v9 = 0;
  }
  uint64_t v11 = !v9 && *(void *)(v7 + 16) == 0;
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  unint64_t v14 = *(double **)(a1 + 48);
  double v16 = *(double *)(a1 + 8);
  double v15 = *(double *)(a1 + 16);
  double v17 = *(double *)(a1 + 24);
  double v18 = *(double *)(v2 + 8);
  double v19 = *(double *)(v2 + 16);
  double v20 = *(double *)(v2 + 24);
  if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
  {
    char v22 = v17 < v19 || v9;
    if (v22) {
      return;
    }
    BOOL v21 = v20 < v15;
  }
  else
  {
    if (v8 == 0x7FF0000000000000 && v10 || (*(void *)&v5 & 0xFFFFFFFFFFFFFLL) != 0) {
      return;
    }
    BOOL v21 = v17 < v19 || v20 < v15;
  }
  if (v21 || v18 < v5 || v16 < v6) {
    return;
  }
  unint64_t v380 = v12;
  uint64_t v381 = v14;
  uint64_t v26 = v2 + 40;
  unint64_t v25 = *(void *)(v2 + 40);
  unint64_t v27 = *(double **)(v2 + 48);
  *(double *)v394.i64 = v6;
  *(double *)&v394.i64[1] = v18;
  *(double *)v395.i64 = v19;
  *(double *)&v395.i64[1] = v20;
  uint64_t v396 = v7;
  unint64_t v397 = v25;
  uint64_t v398 = v27;
  a2.n128_f64[0] = v15;
  uint64_t v28 = sub_184CEA964(v11, a2, v17);
  if (*(void *)(v13 + 16)) {
    uint64_t v30 = *(void *)(v13 + 16);
  }
  else {
    uint64_t v30 = 2;
  }
  uint64_t v385 = v29;
  uint64_t v31 = v29 - v28;
  if (__OFSUB__(v29, v28))
  {
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  uint64_t v376 = (void *)(v2 + 48);
  uint64_t v384 = v28;
  uint64_t v377 = (uint64_t *)(v2 + 32);
  uint64_t v32 = v31 + v30;
  if (__OFADD__(v31, v30))
  {
LABEL_390:
    __break(1u);
    goto LABEL_391;
  }
  unint64_t v33 = v384;
  uint64_t v34 = sub_184CE293C(v384, v385);
  *(double *)v394.i64 = v5;
  *(double *)&v394.i64[1] = v16;
  *(double *)v395.i64 = v15;
  *(double *)&v395.i64[1] = v17;
  uint64_t v396 = v13;
  unint64_t v397 = v380;
  uint64_t v398 = v381;
  uint64_t v35 = sub_184CE293C(0, v30);
  uint64_t v36 = v34 + v35;
  if (__OFADD__(v34, v35))
  {
LABEL_391:
    __break(1u);
    goto LABEL_392;
  }
  uint64_t v37 = sub_184CEB8F0();
  uint64_t v39 = *(void *)(v2 + 40);
  unint64_t v40 = *(void *)(v39 + 16);
  BOOL v41 = v385 == v40;
  if (!v384)
  {
    unint64_t v44 = 0;
    unint64_t v43 = 0;
    if (!v385) {
      goto LABEL_44;
    }
    goto LABEL_41;
  }
  unint64_t v42 = v384 - 1;
  if (__OFSUB__(v384, 1))
  {
LABEL_393:
    __break(1u);
    goto LABEL_394;
  }
  if (v42 >= v40)
  {
LABEL_394:
    __break(1u);
    goto LABEL_395;
  }
  unint64_t v43 = *(unsigned int *)(v39 + 32 + 4 * v42);
  if (v384 <= 1)
  {
    unint64_t v44 = 0;
    unint64_t v33 = 0;
    BOOL v41 = 0;
    if (!v385) {
      goto LABEL_44;
    }
LABEL_41:
    unint64_t v45 = v385 - 1;
    if (__OFSUB__(v385, 1))
    {
LABEL_395:
      __break(1u);
      goto LABEL_396;
    }
    if (v45 >= v40)
    {
LABEL_396:
      __break(1u);
      goto LABEL_397;
    }
    unint64_t v44 = *(unsigned int *)(v39 + 4 * v45 + 32);
    goto LABEL_44;
  }
  if (v384 - 2 >= v40)
  {
LABEL_423:
    __break(1u);
    goto LABEL_424;
  }
  BOOL v41 = 0;
  unint64_t v33 = *(unsigned int *)(v39 + 32 + 4 * (v384 - 2));
  if (v385) {
    goto LABEL_41;
  }
  unint64_t v44 = 0;
LABEL_44:
  if ((unsigned __int128)(v32 * (__int128)v36) >> 64 != (v32 * v36) >> 63)
  {
LABEL_392:
    __break(1u);
    goto LABEL_393;
  }
  if (v32 < 0)
  {
LABEL_397:
    __break(1u);
    goto LABEL_398;
  }
  BOOL v375 = v41;
  unint64_t v379 = v44;
  if ((unint64_t)(v32 + 0x1000000000000000) >> 61)
  {
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
LABEL_410:
    __break(1u);
LABEL_411:
    __break(1u);
LABEL_412:
    __break(1u);
LABEL_413:
    __break(1u);
LABEL_414:
    __break(1u);
LABEL_415:
    __break(1u);
LABEL_416:
    __break(1u);
    goto LABEL_417;
  }
  uint64_t v383 = v32 * v36;
  uint64_t v46 = 4 * v32;
  unint64_t v373 = v40;
  unint64_t v382 = v43;
  if (8 * v32 < 1025 || (uint64_t v37 = swift_stdlib_isStackAllocationSafe(), (v37 & 1) != 0))
  {
    uint64_t v47 = MEMORY[0x1F4188790](v37, v38);
    uint64_t v378 = (char *)&v361 - v49;
    if ((unint64_t)(v32 + 0x2000000000000000) >> 62)
    {
LABEL_422:
      __break(1u);
      goto LABEL_423;
    }
    v372 = (char *)&v361;
    if (v46 < 1025 || (uint64_t v47 = swift_stdlib_isStackAllocationSafe(), (v47 & 1) != 0))
    {
      uint64_t isStackAllocationSafe = MEMORY[0x1F4188790](v47, v48);
      v374 = (char *)&v361 - v52;
      if (v383 < 0)
      {
LABEL_424:
        __break(1u);
        goto LABEL_425;
      }
      if ((unint64_t)(v383 + 0x1000000000000000) >> 61)
      {
LABEL_425:
        __break(1u);
        goto LABEL_426;
      }
      v370 = (int64x2_t *)&v361;
      if (8 * v383 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v369 = (int64x2_t *)&v361;
        MEMORY[0x1F4188790](isStackAllocationSafe, v51);
        v371 = (double *)((char *)&v361 - v53);
        uint64_t v392 = 0;
        uint64_t v393 = 0;
        unint64_t v54 = v43 - v33;
        if (v43 < v33)
        {
LABEL_417:
          __break(1u);
LABEL_418:
          __break(1u);
          goto LABEL_419;
        }
        uint64_t v55 = v3[2].i64[1];
        uint64_t v56 = v3[3].i64[0];
        int64x2_t v58 = *v3;
        int64x2_t v57 = v3[1];
        uint64_t v59 = v3[2].i64[0];
        uint64_t v399 = (double *)(v56 + 32 + 8 * v33);
        unint64_t v400 = v54;
        BOOL v60 = (v58.i64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v58.i64[0] & 0x7FF0000000000000) == 0;
        uint64_t v61 = *(void *)(v59 + 16);
        if (v60 || v61)
        {
          uint64_t v365 = (double *)(v59 + 32);
          uint64_t v367 = (double *)(v55 + 32);
          uint64_t v366 = *(double **)(v55 + 16);
          v368 = *(double **)(v56 + 16);
          unint64_t v85 = *(void *)(v13 + 16);
          if (v85)
          {
            uint64_t v364 = (double *)(v13 + 32);
            uint64_t v363 = (double *)(v380 + 32);
            unint64_t v380 = *(void *)(v380 + 16);
            uint64_t v362 = v381 + 4;
            uint64_t v86 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v331 = v32;
            uint64_t v299 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v365, v61, 0, (uint64_t)v367, (uint64_t)v366, v56 + 32, v368, v364, v85, 0, (uint64_t)v363, v380, (uint64_t)v362, v86, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v299,
              &v393,
              (uint64_t)v374,
              v331,
              v382);
          }
          else
          {
            *(double *)v394.i64 = v5;
            *(double *)&v394.i64[1] = v16;
            uint64_t v381 = (double *)&v395;
            *(double *)v395.i64 = v15;
            *(double *)&v395.i64[1] = v17;
            uint64_t v387 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v335 = v32;
            uint64_t v303 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v365, v61, 0, (uint64_t)v367, (uint64_t)v366, v56 + 32, v368, v381, 2uLL, 0, (uint64_t)&v387, 2uLL, (uint64_t)&v394, 2, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v303,
              &v393,
              (uint64_t)v374,
              v335,
              v382);
          }
        }
        else
        {
          v368 = (double *)&v395;
          int64x2_t v394 = v58;
          int64x2_t v395 = v57;
          v391[0] = 0x200000002;
          unint64_t v62 = *(void *)(v13 + 16);
          if (v62)
          {
            uint64_t v367 = (double *)(v13 + 32);
            uint64_t v366 = (double *)(v380 + 32);
            unint64_t v63 = *(void *)(v380 + 16);
            BOOL v64 = v381 + 4;
            uint64_t v65 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v329 = v32;
            uint64_t v297 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v368, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, v367, v62, 0, (uint64_t)v366, v63, (uint64_t)v64, v65, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v297,
              &v393,
              (uint64_t)v374,
              v329,
              v382);
          }
          else
          {
            uint64_t v387 = *(void *)&v5;
            double v388 = v16;
            double v389 = v15;
            double v390 = v17;
            uint64_t v386 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v334 = v32;
            uint64_t v302 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v368, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, &v389, 2uLL, 0, (uint64_t)&v386, 2uLL, (uint64_t)&v387, 2, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v302,
              &v393,
              (uint64_t)v374,
              v334,
              v382);
          }
        }
        uint64_t v114 = v377;
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v115 = v392;
        if (v392 < 0) {
          goto LABEL_418;
        }
        unint64_t v116 = v382;
        if (v375)
        {
          uint64_t v117 = sub_184C9D670(v371, v392);
          unint64_t v118 = v376;
          swift_release();
          void *v118 = v117;
          uint64_t v119 = v393;
          if (v393 < 0)
          {
LABEL_419:
            __break(1u);
            goto LABEL_420;
          }
          uint64_t v120 = sub_184C9D670(v378, v393);
          swift_release();
          *uint64_t v114 = (uint64_t)v120;
          uint64_t v121 = sub_184CE1788(v374, v119);
          swift_release();
          *(void *)uint64_t v26 = v121;
        }
        else
        {
          if (v379 < v382)
          {
LABEL_429:
            __break(1u);
LABEL_430:
            __break(1u);
LABEL_431:
            __break(1u);
LABEL_432:
            __break(1u);
LABEL_433:
            __break(1u);
LABEL_434:
            __break(1u);
LABEL_435:
            __break(1u);
            goto LABEL_436;
          }
          sub_184CE1520(v382, v379, v371, v392);
          uint64_t v119 = v393;
          if (v393 < 0) {
            goto LABEL_419;
          }
          int64_t v122 = v385;
          sub_184CE1520(v66, v385, v378, v393);
          sub_184CE1654(v66, v122, v374, v119);
        }
        unint64_t v123 = v116 + v115;
        if (__OFADD__(v116, v115))
        {
LABEL_420:
          __break(1u);
          goto LABEL_421;
        }
        unint64_t v124 = v123 - v379;
        if (__OFSUB__(v123, v379))
        {
LABEL_421:
          __break(1u);
          goto LABEL_422;
        }
        if (v124)
        {
          BOOL v125 = __OFADD__(v66, v119);
          unint64_t v126 = v66 + v119;
          if (v125)
          {
LABEL_426:
            __break(1u);
            goto LABEL_427;
          }
          int64_t v127 = *(void *)(*(void *)v26 + 16);
          if (v127 < (uint64_t)v126)
          {
LABEL_427:
            __break(1u);
            goto LABEL_428;
          }
          if (v126 != v127)
          {
            if ((uint64_t)v126 >= v127)
            {
LABEL_451:
              __break(1u);
              goto LABEL_452;
            }
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            while ((v126 & 0x8000000000000000) == 0)
            {
              if (v126 >= *(void *)(*(void *)v26 + 16)) {
                goto LABEL_366;
              }
              uint64_t v128 = *(unsigned int *)(*(void *)v26 + 4 * v126 + 32);
              unint64_t v129 = v128 + v124;
              if (__OFADD__(v128, v124)) {
                goto LABEL_367;
              }
              if ((v129 & 0x8000000000000000) != 0) {
                goto LABEL_368;
              }
              if (HIDWORD(v129)) {
                goto LABEL_369;
              }
              sub_184CE19DC();
              if (*(void *)(*(void *)v26 + 16) <= v126) {
                goto LABEL_370;
              }
              *(_DWORD *)(*(void *)v26 + 4 * v126++ + 32) = v129;
              if (v127 == v126) {
                goto LABEL_325;
              }
            }
            __break(1u);
LABEL_366:
            __break(1u);
LABEL_367:
            __break(1u);
LABEL_368:
            __break(1u);
LABEL_369:
            __break(1u);
LABEL_370:
            __break(1u);
            goto LABEL_371;
          }
        }
      }
      else
      {
        v371 = (double *)swift_slowAlloc();
        uint64_t v392 = 0;
        uint64_t v393 = 0;
        unint64_t v102 = v43 - v33;
        if (v43 < v33)
        {
LABEL_438:
          __break(1u);
LABEL_439:
          __break(1u);
LABEL_440:
          __break(1u);
LABEL_441:
          __break(1u);
          goto LABEL_442;
        }
        uint64_t v103 = v3[2].i64[1];
        uint64_t v104 = v3[3].i64[0];
        int64x2_t v106 = *v3;
        int64x2_t v105 = v3[1];
        uint64_t v107 = v3[2].i64[0];
        uint64_t v399 = (double *)(v104 + 32 + 8 * v33);
        unint64_t v400 = v102;
        BOOL v108 = (v106.i64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v106.i64[0] & 0x7FF0000000000000) == 0;
        uint64_t v109 = *(void *)(v107 + 16);
        if (v108 || v109)
        {
          uint64_t v366 = (double *)(v107 + 32);
          v368 = (double *)(v103 + 32);
          uint64_t v367 = *(double **)(v103 + 16);
          v369 = *(int64x2_t **)(v104 + 16);
          unint64_t v134 = *(void *)(v13 + 16);
          if (v134)
          {
            uint64_t v365 = (double *)(v13 + 32);
            uint64_t v364 = (double *)(v380 + 32);
            unint64_t v380 = *(void *)(v380 + 16);
            uint64_t v363 = v381 + 4;
            uint64_t v135 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v338 = v32;
            uint64_t v306 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v366, v109, 0, (uint64_t)v368, (uint64_t)v367, v104 + 32, v369, v365, v134, 0, (uint64_t)v364, v380, (uint64_t)v363, v135, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v306,
              &v393,
              (uint64_t)v374,
              v338,
              v382);
          }
          else
          {
            *(double *)v394.i64 = v5;
            *(double *)&v394.i64[1] = v16;
            uint64_t v381 = (double *)&v395;
            *(double *)v395.i64 = v15;
            *(double *)&v395.i64[1] = v17;
            uint64_t v387 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v347 = v32;
            uint64_t v315 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v366, v109, 0, (uint64_t)v368, (uint64_t)v367, v104 + 32, v369, v381, 2uLL, 0, (uint64_t)&v387, 2uLL, (uint64_t)&v394, 2, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v315,
              &v393,
              (uint64_t)v374,
              v347,
              v382);
          }
        }
        else
        {
          int64x2_t v394 = v106;
          int64x2_t v395 = v105;
          v391[0] = 0x200000002;
          unint64_t v110 = *(void *)(v13 + 16);
          if (v110)
          {
            v369 = (int64x2_t *)(v13 + 32);
            uint64_t v367 = (double *)(v380 + 32);
            v368 = (double *)&v395;
            unint64_t v111 = *(void *)(v380 + 16);
            uint64_t v112 = v381 + 4;
            uint64_t v113 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v333 = v32;
            uint64_t v301 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v368, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, (double *)v369->i64, v110, 0, (uint64_t)v367, v111, (uint64_t)v112, v113, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v301,
              &v393,
              (uint64_t)v374,
              v333,
              v382);
          }
          else
          {
            uint64_t v387 = *(void *)&v5;
            double v388 = v16;
            double v389 = v15;
            double v390 = v17;
            uint64_t v386 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v344 = v32;
            uint64_t v312 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)&v395, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, &v389, 2uLL, 0, (uint64_t)&v386, 2uLL, (uint64_t)&v387, 2, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v312,
              &v393,
              (uint64_t)v374,
              v344,
              v382);
          }
        }
        uint64_t v114 = v377;
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v203 = v392;
        if (v392 < 0) {
          goto LABEL_441;
        }
        unint64_t v204 = v382;
        if (v375)
        {
          uint64_t v205 = sub_184C9D670(v371, v392);
          unint64_t v206 = v376;
          swift_release();
          void *v206 = v205;
          uint64_t v207 = v393;
          if (v393 < 0)
          {
LABEL_444:
            __break(1u);
            goto LABEL_445;
          }
          unint64_t v208 = sub_184C9D670(v378, v393);
          swift_release();
          *uint64_t v114 = (uint64_t)v208;
          uint64_t v209 = sub_184CE1788(v374, v207);
          swift_release();
          *(void *)uint64_t v26 = v209;
        }
        else
        {
          if (v379 < v382)
          {
LABEL_465:
            __break(1u);
            goto LABEL_466;
          }
          sub_184CE1520(v382, v379, v371, v392);
          uint64_t v207 = v393;
          if (v393 < 0) {
            goto LABEL_444;
          }
          int64_t v210 = v385;
          sub_184CE1520(v66, v385, v378, v393);
          sub_184CE1654(v66, v210, v374, v207);
        }
        unint64_t v211 = v204 + v203;
        if (__OFADD__(v204, v203))
        {
LABEL_447:
          __break(1u);
          goto LABEL_448;
        }
        unint64_t v212 = v211 - v379;
        if (__OFSUB__(v211, v379))
        {
LABEL_450:
          __break(1u);
          goto LABEL_451;
        }
        if (v212)
        {
          BOOL v125 = __OFADD__(v66, v207);
          unint64_t v213 = v66 + v207;
          if (v125)
          {
LABEL_459:
            __break(1u);
            goto LABEL_460;
          }
          int64_t v214 = *(void *)(*(void *)v26 + 16);
          if (v214 < (uint64_t)v213)
          {
LABEL_462:
            __break(1u);
            goto LABEL_463;
          }
          if (v213 != v214)
          {
            if ((uint64_t)v213 >= v214)
            {
LABEL_483:
              __break(1u);
              goto LABEL_484;
            }
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            while ((v213 & 0x8000000000000000) == 0)
            {
              if (v213 >= *(void *)(*(void *)v26 + 16)) {
                goto LABEL_376;
              }
              uint64_t v215 = *(unsigned int *)(*(void *)v26 + 4 * v213 + 32);
              unint64_t v216 = v215 + v212;
              if (__OFADD__(v215, v212)) {
                goto LABEL_379;
              }
              if ((v216 & 0x8000000000000000) != 0) {
                goto LABEL_382;
              }
              if (HIDWORD(v216)) {
                goto LABEL_385;
              }
              sub_184CE19DC();
              if (*(void *)(*(void *)v26 + 16) <= v213) {
                goto LABEL_388;
              }
              *(_DWORD *)(*(void *)v26 + 4 * v213++ + 32) = v216;
              if (v214 == v213) {
                goto LABEL_234;
              }
            }
            goto LABEL_373;
          }
        }
LABEL_234:
        MEMORY[0x18532B810](v371, -1, -1);
      }
    }
    else
    {
      uint64_t v87 = swift_slowAlloc();
      v374 = (char *)v87;
      if (v383 < 0)
      {
LABEL_455:
        __break(1u);
        goto LABEL_456;
      }
      if ((unint64_t)(v383 + 0x1000000000000000) >> 61)
      {
LABEL_456:
        __break(1u);
        goto LABEL_457;
      }
      if (8 * v383 < 1025 || (uint64_t v87 = swift_stdlib_isStackAllocationSafe(), (v87 & 1) != 0))
      {
        v370 = (int64x2_t *)&v361;
        MEMORY[0x1F4188790](v87, v88);
        v371 = (double *)((char *)&v361 - v89);
        uint64_t v392 = 0;
        uint64_t v393 = 0;
        unint64_t v90 = v43 - v33;
        if (v43 < v33)
        {
LABEL_437:
          __break(1u);
          goto LABEL_438;
        }
        uint64_t v91 = v3[2].i64[1];
        uint64_t v92 = v3[3].i64[0];
        int64x2_t v94 = *v3;
        int64x2_t v93 = v3[1];
        uint64_t v95 = v3[2].i64[0];
        uint64_t v399 = (double *)(v92 + 32 + 8 * v33);
        unint64_t v400 = v90;
        BOOL v96 = (v94.i64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v94.i64[0] & 0x7FF0000000000000) == 0;
        uint64_t v97 = *(void *)(v95 + 16);
        if (v96 || v97)
        {
          uint64_t v366 = (double *)(v95 + 32);
          v368 = (double *)(v91 + 32);
          uint64_t v367 = *(double **)(v91 + 16);
          v369 = *(int64x2_t **)(v92 + 16);
          unint64_t v132 = *(void *)(v13 + 16);
          if (v132)
          {
            uint64_t v365 = (double *)(v13 + 32);
            uint64_t v364 = (double *)(v380 + 32);
            unint64_t v380 = *(void *)(v380 + 16);
            uint64_t v363 = v381 + 4;
            uint64_t v133 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v337 = v32;
            uint64_t v305 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v366, v97, 0, (uint64_t)v368, (uint64_t)v367, v92 + 32, v369, v365, v132, 0, (uint64_t)v364, v380, (uint64_t)v363, v133, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v305,
              &v393,
              (uint64_t)v374,
              v337,
              v382);
          }
          else
          {
            *(double *)v394.i64 = v5;
            *(double *)&v394.i64[1] = v16;
            uint64_t v381 = (double *)&v395;
            *(double *)v395.i64 = v15;
            *(double *)&v395.i64[1] = v17;
            uint64_t v387 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v346 = v32;
            uint64_t v314 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v366, v97, 0, (uint64_t)v368, (uint64_t)v367, v92 + 32, v369, v381, 2uLL, 0, (uint64_t)&v387, 2uLL, (uint64_t)&v394, 2, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v314,
              &v393,
              (uint64_t)v374,
              v346,
              v382);
          }
        }
        else
        {
          int64x2_t v394 = v94;
          int64x2_t v395 = v93;
          v391[0] = 0x200000002;
          unint64_t v98 = *(void *)(v13 + 16);
          if (v98)
          {
            v369 = (int64x2_t *)(v13 + 32);
            uint64_t v367 = (double *)(v380 + 32);
            v368 = (double *)&v395;
            unint64_t v99 = *(void *)(v380 + 16);
            unint64_t v100 = v381 + 4;
            uint64_t v101 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v332 = v32;
            uint64_t v300 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v368, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, (double *)v369->i64, v98, 0, (uint64_t)v367, v99, (uint64_t)v100, v101, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v300,
              &v393,
              (uint64_t)v374,
              v332,
              v382);
          }
          else
          {
            uint64_t v387 = *(void *)&v5;
            double v388 = v16;
            double v389 = v15;
            double v390 = v17;
            uint64_t v386 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v343 = v32;
            uint64_t v311 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)&v395, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, &v389, 2uLL, 0, (uint64_t)&v386, 2uLL, (uint64_t)&v387, 2, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v311,
              &v393,
              (uint64_t)v374,
              v343,
              v382);
          }
        }
        uint64_t v114 = v377;
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v189 = v392;
        if (v392 < 0) {
          goto LABEL_440;
        }
        unint64_t v190 = v382;
        if (v375)
        {
          v191 = sub_184C9D670(v371, v392);
          unint64_t v192 = v376;
          swift_release();
          *unint64_t v192 = v191;
          uint64_t v193 = v393;
          if (v393 < 0)
          {
LABEL_443:
            __break(1u);
            goto LABEL_444;
          }
          unint64_t v194 = sub_184C9D670(v378, v393);
          swift_release();
          *uint64_t v114 = (uint64_t)v194;
          v195 = sub_184CE1788(v374, v193);
          swift_release();
          *(void *)uint64_t v26 = v195;
        }
        else
        {
          if (v379 < v382)
          {
LABEL_464:
            __break(1u);
            goto LABEL_465;
          }
          sub_184CE1520(v382, v379, v371, v392);
          uint64_t v193 = v393;
          if (v393 < 0) {
            goto LABEL_443;
          }
          int64_t v196 = v385;
          sub_184CE1520(v66, v385, v378, v393);
          sub_184CE1654(v66, v196, v374, v193);
        }
        unint64_t v197 = v190 + v189;
        if (__OFADD__(v190, v189))
        {
LABEL_446:
          __break(1u);
          goto LABEL_447;
        }
        unint64_t v198 = v197 - v379;
        if (__OFSUB__(v197, v379))
        {
LABEL_449:
          __break(1u);
          goto LABEL_450;
        }
        if (v198)
        {
          BOOL v125 = __OFADD__(v66, v193);
          unint64_t v199 = v66 + v193;
          if (v125)
          {
LABEL_458:
            __break(1u);
            goto LABEL_459;
          }
          int64_t v200 = *(void *)(*(void *)v26 + 16);
          if (v200 < (uint64_t)v199)
          {
LABEL_461:
            __break(1u);
            goto LABEL_462;
          }
          if (v199 != v200)
          {
            if ((uint64_t)v199 >= v200)
            {
LABEL_482:
              __break(1u);
              goto LABEL_483;
            }
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            while ((v199 & 0x8000000000000000) == 0)
            {
              if (v199 >= *(void *)(*(void *)v26 + 16)) {
                goto LABEL_375;
              }
              uint64_t v201 = *(unsigned int *)(*(void *)v26 + 4 * v199 + 32);
              unint64_t v202 = v201 + v198;
              if (__OFADD__(v201, v198)) {
                goto LABEL_378;
              }
              if ((v202 & 0x8000000000000000) != 0) {
                goto LABEL_381;
              }
              if (HIDWORD(v202)) {
                goto LABEL_384;
              }
              sub_184CE19DC();
              if (*(void *)(*(void *)v26 + 16) <= v199) {
                goto LABEL_387;
              }
              *(_DWORD *)(*(void *)v26 + 4 * v199++ + 32) = v202;
              if (v200 == v199) {
                goto LABEL_324;
              }
            }
            goto LABEL_372;
          }
        }
      }
      else
      {
        v371 = (double *)swift_slowAlloc();
        uint64_t v392 = 0;
        uint64_t v393 = 0;
        unint64_t v163 = v43 - v33;
        if (v43 < v33)
        {
LABEL_468:
          __break(1u);
LABEL_469:
          __break(1u);
          goto LABEL_470;
        }
        uint64_t v165 = v3[2].i64[1];
        uint64_t v164 = v3[3].i64[0];
        int64x2_t v167 = *v3;
        int64x2_t v166 = v3[1];
        uint64_t v168 = v3[2].i64[0];
        uint64_t v399 = (double *)(v164 + 32 + 8 * v33);
        unint64_t v400 = v163;
        BOOL v169 = (v167.i64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v167.i64[0] & 0x7FF0000000000000) == 0;
        uint64_t v170 = *(void *)(v168 + 16);
        if (v169 || v170)
        {
          uint64_t v367 = (double *)(v168 + 32);
          v369 = (int64x2_t *)(v165 + 32);
          v368 = *(double **)(v165 + 16);
          v370 = *(int64x2_t **)(v164 + 16);
          unint64_t v221 = *(void *)(v13 + 16);
          if (v221)
          {
            uint64_t v366 = (double *)(v13 + 32);
            uint64_t v365 = (double *)(v380 + 32);
            unint64_t v380 = *(void *)(v380 + 16);
            uint64_t v364 = v381 + 4;
            uint64_t v222 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v350 = v32;
            uint64_t v318 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v367, v170, 0, (uint64_t)v369, (uint64_t)v368, v164 + 32, v370, v366, v221, 0, (uint64_t)v365, v380, (uint64_t)v364, v222, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v318,
              &v393,
              (uint64_t)v374,
              v350,
              v382);
          }
          else
          {
            *(double *)v394.i64 = v5;
            *(double *)&v394.i64[1] = v16;
            uint64_t v381 = (double *)&v395;
            *(double *)v395.i64 = v15;
            *(double *)&v395.i64[1] = v17;
            uint64_t v387 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v357 = v32;
            uint64_t v325 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v367, v170, 0, (uint64_t)v369, (uint64_t)v368, v164 + 32, v370, v381, 2uLL, 0, (uint64_t)&v387, 2uLL, (uint64_t)&v394, 2, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v325,
              &v393,
              (uint64_t)v374,
              v357,
              v382);
          }
        }
        else
        {
          int64x2_t v394 = v167;
          int64x2_t v395 = v166;
          v391[0] = 0x200000002;
          unint64_t v171 = *(void *)(v13 + 16);
          if (v171)
          {
            v370 = (int64x2_t *)(v13 + 32);
            v368 = (double *)(v380 + 32);
            v369 = &v395;
            unint64_t v172 = *(void *)(v380 + 16);
            long long v173 = v381 + 4;
            uint64_t v174 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v341 = v32;
            uint64_t v309 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v369, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, (double *)v370->i64, v171, 0, (uint64_t)v368, v172, (uint64_t)v173, v174, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v309,
              &v393,
              (uint64_t)v374,
              v341,
              v382);
          }
          else
          {
            uint64_t v387 = *(void *)&v5;
            double v388 = v16;
            double v389 = v15;
            double v390 = v17;
            uint64_t v386 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v354 = v32;
            uint64_t v322 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)&v395, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, &v389, 2uLL, 0, (uint64_t)&v386, 2uLL, (uint64_t)&v387, 2, v384, v385, (uint64_t)v371, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v322,
              &v393,
              (uint64_t)v374,
              v354,
              v382);
          }
        }
        uint64_t v114 = v377;
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v262 = v392;
        if (v392 < 0) {
          goto LABEL_473;
        }
        unint64_t v263 = v382;
        if (v375)
        {
          long long v264 = sub_184C9D670(v371, v392);
          __n128 v265 = v376;
          swift_release();
          *__n128 v265 = v264;
          uint64_t v266 = v393;
          if (v393 < 0)
          {
LABEL_474:
            __break(1u);
            goto LABEL_475;
          }
          BOOL v267 = sub_184C9D670(v378, v393);
          swift_release();
          *uint64_t v114 = (uint64_t)v267;
          uint64_t v268 = sub_184CE1788(v374, v266);
          swift_release();
          *(void *)uint64_t v26 = v268;
        }
        else
        {
          if (v379 < v382)
          {
LABEL_494:
            __break(1u);
            goto LABEL_495;
          }
          sub_184CE1520(v382, v379, v371, v392);
          uint64_t v266 = v393;
          if (v393 < 0) {
            goto LABEL_474;
          }
          int64_t v269 = v385;
          sub_184CE1520(v66, v385, v378, v393);
          sub_184CE1654(v66, v269, v374, v266);
        }
        unint64_t v270 = v263 + v262;
        if (__OFADD__(v263, v262))
        {
LABEL_479:
          __break(1u);
          goto LABEL_480;
        }
        unint64_t v271 = v270 - v379;
        if (__OFSUB__(v270, v379))
        {
LABEL_480:
          __break(1u);
          goto LABEL_481;
        }
        if (v271)
        {
          BOOL v125 = __OFADD__(v66, v266);
          unint64_t v272 = v66 + v266;
          if (v125)
          {
LABEL_490:
            __break(1u);
            goto LABEL_491;
          }
          int64_t v273 = *(void *)(*(void *)v26 + 16);
          if (v273 < (uint64_t)v272)
          {
LABEL_491:
            __break(1u);
            goto LABEL_492;
          }
          if (v272 != v273)
          {
            if ((uint64_t)v272 >= v273)
            {
LABEL_502:
              __break(1u);
              goto LABEL_503;
            }
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            while ((v272 & 0x8000000000000000) == 0)
            {
              if (v272 >= *(void *)(*(void *)v26 + 16)) {
                goto LABEL_404;
              }
              uint64_t v274 = *(unsigned int *)(*(void *)v26 + 4 * v272 + 32);
              unint64_t v275 = v274 + v271;
              if (__OFADD__(v274, v271)) {
                goto LABEL_407;
              }
              if ((v275 & 0x8000000000000000) != 0) {
                goto LABEL_410;
              }
              if (HIDWORD(v275)) {
                goto LABEL_413;
              }
              sub_184CE19DC();
              if (*(void *)(*(void *)v26 + 16) <= v272) {
                goto LABEL_416;
              }
              *(_DWORD *)(*(void *)v26 + 4 * v272++ + 32) = v275;
              if (v273 == v272) {
                goto LABEL_323;
              }
            }
            goto LABEL_401;
          }
        }
LABEL_323:
        MEMORY[0x18532B810](v371, -1, -1);
      }
LABEL_324:
      MEMORY[0x18532B810](v374, -1, -1);
    }
LABEL_325:
    uint64_t v276 = v385;
  }
  else
  {
    uint64_t v67 = swift_slowAlloc();
    uint64_t v378 = (char *)v67;
    if ((unint64_t)(v32 + 0x2000000000000000) >> 62)
    {
LABEL_452:
      __break(1u);
      goto LABEL_453;
    }
    if (v46 < 1025 || (uint64_t v67 = swift_stdlib_isStackAllocationSafe(), (v67 & 1) != 0))
    {
      uint64_t v69 = MEMORY[0x1F4188790](v67, v68);
      v374 = (char *)&v361 - v71;
      if (v383 < 0)
      {
LABEL_453:
        __break(1u);
        goto LABEL_454;
      }
      if ((unint64_t)(v383 + 0x1000000000000000) >> 61)
      {
LABEL_454:
        __break(1u);
        goto LABEL_455;
      }
      v371 = (double *)&v361;
      if (8 * v383 < 1025 || (uint64_t v69 = swift_stdlib_isStackAllocationSafe(), (v69 & 1) != 0))
      {
        v370 = (int64x2_t *)&v361;
        MEMORY[0x1F4188790](v69, v70);
        v372 = (char *)&v361 - v72;
        uint64_t v392 = 0;
        uint64_t v393 = 0;
        unint64_t v73 = v43 - v33;
        if (v43 < v33)
        {
LABEL_436:
          __break(1u);
          goto LABEL_437;
        }
        uint64_t v74 = v3[2].i64[1];
        uint64_t v75 = v3[3].i64[0];
        int64x2_t v77 = *v3;
        int64x2_t v76 = v3[1];
        uint64_t v78 = v3[2].i64[0];
        uint64_t v399 = (double *)(v75 + 32 + 8 * v33);
        unint64_t v400 = v73;
        BOOL v79 = (v77.i64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v77.i64[0] & 0x7FF0000000000000) == 0;
        uint64_t v80 = *(void *)(v78 + 16);
        if (v79 || v80)
        {
          uint64_t v366 = (double *)(v78 + 32);
          v368 = (double *)(v74 + 32);
          uint64_t v367 = *(double **)(v74 + 16);
          v369 = *(int64x2_t **)(v75 + 16);
          unint64_t v130 = *(void *)(v13 + 16);
          if (v130)
          {
            uint64_t v365 = (double *)(v13 + 32);
            uint64_t v364 = (double *)(v380 + 32);
            unint64_t v380 = *(void *)(v380 + 16);
            uint64_t v363 = v381 + 4;
            uint64_t v131 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v336 = v32;
            uint64_t v304 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v366, v80, 0, (uint64_t)v368, (uint64_t)v367, v75 + 32, v369, v365, v130, 0, (uint64_t)v364, v380, (uint64_t)v363, v131, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v304,
              &v393,
              (uint64_t)v374,
              v336,
              v382);
          }
          else
          {
            *(double *)v394.i64 = v5;
            *(double *)&v394.i64[1] = v16;
            uint64_t v381 = (double *)&v395;
            *(double *)v395.i64 = v15;
            *(double *)&v395.i64[1] = v17;
            uint64_t v387 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v345 = v32;
            uint64_t v313 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v366, v80, 0, (uint64_t)v368, (uint64_t)v367, v75 + 32, v369, v381, 2uLL, 0, (uint64_t)&v387, 2uLL, (uint64_t)&v394, 2, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v313,
              &v393,
              (uint64_t)v374,
              v345,
              v382);
          }
        }
        else
        {
          v369 = &v395;
          int64x2_t v394 = v77;
          int64x2_t v395 = v76;
          v391[0] = 0x200000002;
          unint64_t v81 = *(void *)(v13 + 16);
          if (v81)
          {
            v368 = (double *)(v13 + 32);
            uint64_t v367 = (double *)(v380 + 32);
            unint64_t v82 = *(void *)(v380 + 16);
            uint64_t v83 = v381 + 4;
            uint64_t v84 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v330 = v32;
            uint64_t v298 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v369, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, v368, v81, 0, (uint64_t)v367, v82, (uint64_t)v83, v84, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v298,
              &v393,
              (uint64_t)v374,
              v330,
              v382);
          }
          else
          {
            uint64_t v387 = *(void *)&v5;
            double v388 = v16;
            double v389 = v15;
            double v390 = v17;
            uint64_t v386 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v342 = v32;
            uint64_t v310 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v369, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, &v389, 2uLL, 0, (uint64_t)&v386, 2uLL, (uint64_t)&v387, 2, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v310,
              &v393,
              (uint64_t)v374,
              v342,
              v382);
          }
        }
        uint64_t v114 = v377;
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v175 = v392;
        if (v392 < 0) {
          goto LABEL_439;
        }
        unint64_t v176 = v382;
        if (v375)
        {
          BOOL v177 = sub_184C9D670(v372, v392);
          uint64_t v178 = v376;
          swift_release();
          *uint64_t v178 = v177;
          uint64_t v179 = v393;
          if (v393 < 0)
          {
LABEL_442:
            __break(1u);
            goto LABEL_443;
          }
          unint64_t v180 = sub_184C9D670(v378, v393);
          swift_release();
          *uint64_t v114 = (uint64_t)v180;
          uint64_t v181 = sub_184CE1788(v374, v179);
          swift_release();
          *(void *)uint64_t v26 = v181;
        }
        else
        {
          if (v379 < v382)
          {
LABEL_463:
            __break(1u);
            goto LABEL_464;
          }
          sub_184CE1520(v382, v379, v372, v392);
          uint64_t v179 = v393;
          if (v393 < 0) {
            goto LABEL_442;
          }
          int64_t v182 = v385;
          sub_184CE1520(v66, v385, v378, v393);
          sub_184CE1654(v66, v182, v374, v179);
        }
        unint64_t v183 = v176 + v175;
        if (__OFADD__(v176, v175))
        {
LABEL_445:
          __break(1u);
          goto LABEL_446;
        }
        unint64_t v184 = v183 - v379;
        if (__OFSUB__(v183, v379))
        {
LABEL_448:
          __break(1u);
          goto LABEL_449;
        }
        if (v184)
        {
          BOOL v125 = __OFADD__(v66, v179);
          unint64_t v185 = v66 + v179;
          if (v125)
          {
LABEL_457:
            __break(1u);
            goto LABEL_458;
          }
          int64_t v186 = *(void *)(*(void *)v26 + 16);
          if (v186 < (uint64_t)v185)
          {
LABEL_460:
            __break(1u);
            goto LABEL_461;
          }
          if (v185 != v186)
          {
            if ((uint64_t)v185 >= v186)
            {
LABEL_481:
              __break(1u);
              goto LABEL_482;
            }
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            while ((v185 & 0x8000000000000000) == 0)
            {
              if (v185 >= *(void *)(*(void *)v26 + 16)) {
                goto LABEL_374;
              }
              uint64_t v187 = *(unsigned int *)(*(void *)v26 + 4 * v185 + 32);
              unint64_t v188 = v187 + v184;
              if (__OFADD__(v187, v184)) {
                goto LABEL_377;
              }
              if ((v188 & 0x8000000000000000) != 0) {
                goto LABEL_380;
              }
              if (HIDWORD(v188)) {
                goto LABEL_383;
              }
              sub_184CE19DC();
              if (*(void *)(*(void *)v26 + 16) <= v185) {
                goto LABEL_386;
              }
              *(_DWORD *)(*(void *)v26 + 4 * v185++ + 32) = v188;
              if (v186 == v185) {
                goto LABEL_354;
              }
            }
LABEL_371:
            __break(1u);
LABEL_372:
            __break(1u);
LABEL_373:
            __break(1u);
LABEL_374:
            __break(1u);
LABEL_375:
            __break(1u);
LABEL_376:
            __break(1u);
LABEL_377:
            __break(1u);
LABEL_378:
            __break(1u);
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
LABEL_381:
            __break(1u);
LABEL_382:
            __break(1u);
LABEL_383:
            __break(1u);
LABEL_384:
            __break(1u);
LABEL_385:
            __break(1u);
LABEL_386:
            __break(1u);
LABEL_387:
            __break(1u);
LABEL_388:
            __break(1u);
            goto LABEL_389;
          }
        }
      }
      else
      {
        v372 = (char *)swift_slowAlloc();
        uint64_t v392 = 0;
        uint64_t v393 = 0;
        unint64_t v151 = v43 - v33;
        if (v43 < v33)
        {
LABEL_467:
          __break(1u);
          goto LABEL_468;
        }
        uint64_t v153 = v3[2].i64[1];
        uint64_t v152 = v3[3].i64[0];
        int64x2_t v155 = *v3;
        int64x2_t v154 = v3[1];
        uint64_t v156 = v3[2].i64[0];
        uint64_t v399 = (double *)(v152 + 32 + 8 * v33);
        unint64_t v400 = v151;
        BOOL v157 = (v155.i64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v155.i64[0] & 0x7FF0000000000000) == 0;
        uint64_t v158 = *(void *)(v156 + 16);
        if (v157 || v158)
        {
          uint64_t v367 = (double *)(v156 + 32);
          v369 = (int64x2_t *)(v153 + 32);
          v368 = *(double **)(v153 + 16);
          v370 = *(int64x2_t **)(v152 + 16);
          unint64_t v219 = *(void *)(v13 + 16);
          if (v219)
          {
            uint64_t v366 = (double *)(v13 + 32);
            uint64_t v365 = (double *)(v380 + 32);
            unint64_t v380 = *(void *)(v380 + 16);
            uint64_t v364 = v381 + 4;
            uint64_t v220 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v349 = v32;
            uint64_t v317 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v367, v158, 0, (uint64_t)v369, (uint64_t)v368, v152 + 32, v370, v366, v219, 0, (uint64_t)v365, v380, (uint64_t)v364, v220, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v317,
              &v393,
              (uint64_t)v374,
              v349,
              v382);
          }
          else
          {
            *(double *)v394.i64 = v5;
            *(double *)&v394.i64[1] = v16;
            uint64_t v381 = (double *)&v395;
            *(double *)v395.i64 = v15;
            *(double *)&v395.i64[1] = v17;
            uint64_t v387 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v356 = v32;
            uint64_t v324 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v367, v158, 0, (uint64_t)v369, (uint64_t)v368, v152 + 32, v370, v381, 2uLL, 0, (uint64_t)&v387, 2uLL, (uint64_t)&v394, 2, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v324,
              &v393,
              (uint64_t)v374,
              v356,
              v382);
          }
        }
        else
        {
          int64x2_t v394 = v155;
          int64x2_t v395 = v154;
          v391[0] = 0x200000002;
          unint64_t v159 = *(void *)(v13 + 16);
          if (v159)
          {
            v370 = (int64x2_t *)(v13 + 32);
            v368 = (double *)(v380 + 32);
            v369 = &v395;
            unint64_t v160 = *(void *)(v380 + 16);
            uint64_t v161 = v381 + 4;
            uint64_t v162 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v340 = v32;
            uint64_t v308 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v369, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, (double *)v370->i64, v159, 0, (uint64_t)v368, v160, (uint64_t)v161, v162, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v308,
              &v393,
              (uint64_t)v374,
              v340,
              v382);
          }
          else
          {
            uint64_t v387 = *(void *)&v5;
            double v388 = v16;
            double v389 = v15;
            double v390 = v17;
            uint64_t v386 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v353 = v32;
            uint64_t v321 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)&v395, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, &v389, 2uLL, 0, (uint64_t)&v386, 2uLL, (uint64_t)&v387, 2, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v321,
              &v393,
              (uint64_t)v374,
              v353,
              v382);
          }
        }
        uint64_t v114 = v377;
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v248 = v392;
        if (v392 < 0) {
          goto LABEL_471;
        }
        unint64_t v249 = v382;
        if (v375)
        {
          int64_t v250 = sub_184C9D670(v372, v392);
          uint64_t v251 = v376;
          swift_release();
          *uint64_t v251 = v250;
          uint64_t v252 = v393;
          if (v393 < 0)
          {
LABEL_472:
            __break(1u);
LABEL_473:
            __break(1u);
            goto LABEL_474;
          }
          uint64_t v253 = sub_184C9D670(v378, v393);
          swift_release();
          *uint64_t v114 = (uint64_t)v253;
          v254 = sub_184CE1788(v374, v252);
          swift_release();
          *(void *)uint64_t v26 = v254;
        }
        else
        {
          if (v379 < v382)
          {
LABEL_493:
            __break(1u);
            goto LABEL_494;
          }
          sub_184CE1520(v382, v379, v372, v392);
          uint64_t v252 = v393;
          if (v393 < 0) {
            goto LABEL_472;
          }
          int64_t v255 = v385;
          sub_184CE1520(v66, v385, v378, v393);
          sub_184CE1654(v66, v255, v374, v252);
        }
        unint64_t v256 = v249 + v248;
        if (__OFADD__(v249, v248))
        {
LABEL_477:
          __break(1u);
          goto LABEL_478;
        }
        unint64_t v257 = v256 - v379;
        if (__OFSUB__(v256, v379))
        {
LABEL_478:
          __break(1u);
          goto LABEL_479;
        }
        if (v257)
        {
          BOOL v125 = __OFADD__(v66, v252);
          unint64_t v258 = v66 + v252;
          if (v125)
          {
LABEL_488:
            __break(1u);
            goto LABEL_489;
          }
          int64_t v259 = *(void *)(*(void *)v26 + 16);
          if (v259 < (uint64_t)v258)
          {
LABEL_489:
            __break(1u);
            goto LABEL_490;
          }
          if (v258 != v259)
          {
            if ((uint64_t)v258 >= v259)
            {
LABEL_501:
              __break(1u);
              goto LABEL_502;
            }
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            while ((v258 & 0x8000000000000000) == 0)
            {
              if (v258 >= *(void *)(*(void *)v26 + 16)) {
                goto LABEL_403;
              }
              uint64_t v260 = *(unsigned int *)(*(void *)v26 + 4 * v258 + 32);
              unint64_t v261 = v260 + v257;
              if (__OFADD__(v260, v257)) {
                goto LABEL_406;
              }
              if ((v261 & 0x8000000000000000) != 0) {
                goto LABEL_409;
              }
              if (HIDWORD(v261)) {
                goto LABEL_412;
              }
              sub_184CE19DC();
              if (*(void *)(*(void *)v26 + 16) <= v258) {
                goto LABEL_415;
              }
              *(_DWORD *)(*(void *)v26 + 4 * v258++ + 32) = v261;
              if (v259 == v258) {
                goto LABEL_299;
              }
            }
            goto LABEL_400;
          }
        }
LABEL_299:
        MEMORY[0x18532B810](v372, -1, -1);
      }
    }
    else
    {
      uint64_t v136 = swift_slowAlloc();
      v374 = (char *)v136;
      if (v383 < 0)
      {
LABEL_484:
        __break(1u);
        goto LABEL_485;
      }
      if ((unint64_t)(v383 + 0x1000000000000000) >> 61)
      {
LABEL_485:
        __break(1u);
        goto LABEL_486;
      }
      if (8 * v383 < 1025 || (uint64_t v136 = swift_stdlib_isStackAllocationSafe(), (v136 & 1) != 0))
      {
        v371 = (double *)&v361;
        MEMORY[0x1F4188790](v136, v137);
        v372 = (char *)&v361 - v138;
        uint64_t v392 = 0;
        uint64_t v393 = 0;
        unint64_t v139 = v43 - v33;
        if (v43 < v33)
        {
LABEL_466:
          __break(1u);
          goto LABEL_467;
        }
        uint64_t v140 = v3[2].i64[1];
        uint64_t v141 = v3[3].i64[0];
        int64x2_t v143 = *v3;
        int64x2_t v142 = v3[1];
        uint64_t v144 = v3[2].i64[0];
        uint64_t v399 = (double *)(v141 + 32 + 8 * v33);
        unint64_t v400 = v139;
        BOOL v145 = (v143.i64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v143.i64[0] & 0x7FF0000000000000) == 0;
        uint64_t v146 = *(void *)(v144 + 16);
        if (v145 || v146)
        {
          uint64_t v367 = (double *)(v144 + 32);
          v369 = (int64x2_t *)(v140 + 32);
          v368 = *(double **)(v140 + 16);
          v370 = *(int64x2_t **)(v141 + 16);
          unint64_t v217 = *(void *)(v13 + 16);
          if (v217)
          {
            uint64_t v366 = (double *)(v13 + 32);
            uint64_t v365 = (double *)(v380 + 32);
            unint64_t v380 = *(void *)(v380 + 16);
            uint64_t v364 = v381 + 4;
            uint64_t v218 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v348 = v32;
            uint64_t v316 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v367, v146, 0, (uint64_t)v369, (uint64_t)v368, v141 + 32, v370, v366, v217, 0, (uint64_t)v365, v380, (uint64_t)v364, v218, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v316,
              &v393,
              (uint64_t)v374,
              v348,
              v382);
          }
          else
          {
            *(double *)v394.i64 = v5;
            *(double *)&v394.i64[1] = v16;
            uint64_t v381 = (double *)&v395;
            *(double *)v395.i64 = v15;
            *(double *)&v395.i64[1] = v17;
            uint64_t v387 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v355 = v32;
            uint64_t v323 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v367, v146, 0, (uint64_t)v369, (uint64_t)v368, v141 + 32, v370, v381, 2uLL, 0, (uint64_t)&v387, 2uLL, (uint64_t)&v394, 2, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v323,
              &v393,
              (uint64_t)v374,
              v355,
              v382);
          }
        }
        else
        {
          v370 = &v395;
          int64x2_t v394 = v143;
          int64x2_t v395 = v142;
          v391[0] = 0x200000002;
          unint64_t v147 = *(void *)(v13 + 16);
          if (v147)
          {
            v369 = (int64x2_t *)(v13 + 32);
            v368 = (double *)(v380 + 32);
            unint64_t v148 = *(void *)(v380 + 16);
            v149 = v381 + 4;
            uint64_t v150 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v339 = v32;
            uint64_t v307 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v370, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, (double *)v369->i64, v147, 0, (uint64_t)v368, v148, (uint64_t)v149, v150, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v307,
              &v393,
              (uint64_t)v374,
              v339,
              v382);
          }
          else
          {
            uint64_t v387 = *(void *)&v5;
            double v388 = v16;
            double v389 = v15;
            double v390 = v17;
            uint64_t v386 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v352 = v32;
            uint64_t v320 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v370, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, &v389, 2uLL, 0, (uint64_t)&v386, 2uLL, (uint64_t)&v387, 2, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v320,
              &v393,
              (uint64_t)v374,
              v352,
              v382);
          }
        }
        uint64_t v114 = v377;
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v234 = v392;
        if (v392 < 0) {
          goto LABEL_469;
        }
        unint64_t v235 = v382;
        if (v375)
        {
          uint64_t v236 = sub_184C9D670(v372, v392);
          uint64_t v237 = v376;
          swift_release();
          *uint64_t v237 = v236;
          uint64_t v238 = v393;
          if (v393 < 0)
          {
LABEL_470:
            __break(1u);
LABEL_471:
            __break(1u);
            goto LABEL_472;
          }
          uint64_t v239 = sub_184C9D670(v378, v393);
          swift_release();
          *uint64_t v114 = (uint64_t)v239;
          uint64_t v240 = sub_184CE1788(v374, v238);
          swift_release();
          *(void *)uint64_t v26 = v240;
        }
        else
        {
          if (v379 < v382)
          {
LABEL_492:
            __break(1u);
            goto LABEL_493;
          }
          sub_184CE1520(v382, v379, v372, v392);
          uint64_t v238 = v393;
          if (v393 < 0) {
            goto LABEL_470;
          }
          int64_t v241 = v385;
          sub_184CE1520(v66, v385, v378, v393);
          sub_184CE1654(v66, v241, v374, v238);
        }
        unint64_t v242 = v235 + v234;
        if (__OFADD__(v235, v234))
        {
LABEL_475:
          __break(1u);
          goto LABEL_476;
        }
        unint64_t v243 = v242 - v379;
        if (__OFSUB__(v242, v379))
        {
LABEL_476:
          __break(1u);
          goto LABEL_477;
        }
        if (v243)
        {
          BOOL v125 = __OFADD__(v66, v238);
          unint64_t v244 = v66 + v238;
          if (v125)
          {
LABEL_486:
            __break(1u);
            goto LABEL_487;
          }
          int64_t v245 = *(void *)(*(void *)v26 + 16);
          if (v245 < (uint64_t)v244)
          {
LABEL_487:
            __break(1u);
            goto LABEL_488;
          }
          if (v244 != v245)
          {
            if ((uint64_t)v244 >= v245)
            {
LABEL_500:
              __break(1u);
              goto LABEL_501;
            }
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            while ((v244 & 0x8000000000000000) == 0)
            {
              if (v244 >= *(void *)(*(void *)v26 + 16)) {
                goto LABEL_402;
              }
              uint64_t v246 = *(unsigned int *)(*(void *)v26 + 4 * v244 + 32);
              unint64_t v247 = v246 + v243;
              if (__OFADD__(v246, v243)) {
                goto LABEL_405;
              }
              if ((v247 & 0x8000000000000000) != 0) {
                goto LABEL_408;
              }
              if (HIDWORD(v247)) {
                goto LABEL_411;
              }
              sub_184CE19DC();
              if (*(void *)(*(void *)v26 + 16) <= v244) {
                goto LABEL_414;
              }
              *(_DWORD *)(*(void *)v26 + 4 * v244++ + 32) = v247;
              if (v245 == v244) {
                goto LABEL_353;
              }
            }
            goto LABEL_399;
          }
        }
      }
      else
      {
        v372 = (char *)swift_slowAlloc();
        uint64_t v392 = 0;
        uint64_t v393 = 0;
        unint64_t v223 = v43 - v33;
        if (v43 < v33)
        {
LABEL_495:
          __break(1u);
LABEL_496:
          __break(1u);
          goto LABEL_497;
        }
        uint64_t v225 = v3[2].i64[1];
        uint64_t v224 = v3[3].i64[0];
        int64x2_t v227 = *v3;
        int64x2_t v226 = v3[1];
        uint64_t v228 = v3[2].i64[0];
        uint64_t v399 = (double *)(v224 + 32 + 8 * v33);
        unint64_t v400 = v223;
        BOOL v229 = (v227.i64[0] & 0xFFFFFFFFFFFFFLL) != 0 && (~v227.i64[0] & 0x7FF0000000000000) == 0;
        uint64_t v230 = *(void *)(v228 + 16);
        if (v229 || v230)
        {
          v368 = (double *)(v228 + 32);
          v370 = (int64x2_t *)(v225 + 32);
          v369 = *(int64x2_t **)(v225 + 16);
          v371 = *(double **)(v224 + 16);
          unint64_t v277 = *(void *)(v13 + 16);
          if (v277)
          {
            uint64_t v367 = (double *)(v13 + 32);
            uint64_t v366 = (double *)(v380 + 32);
            unint64_t v380 = *(void *)(v380 + 16);
            uint64_t v365 = v381 + 4;
            uint64_t v278 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v358 = v32;
            uint64_t v326 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v368, v230, 0, (uint64_t)v370, (uint64_t)v369, v224 + 32, v371, v367, v277, 0, (uint64_t)v366, v380, (uint64_t)(v381 + 4), v278, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v326,
              &v393,
              (uint64_t)v374,
              v358,
              v382);
          }
          else
          {
            *(double *)v394.i64 = v5;
            *(double *)&v394.i64[1] = v16;
            uint64_t v381 = (double *)&v395;
            *(double *)v395.i64 = v15;
            *(double *)&v395.i64[1] = v17;
            uint64_t v387 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v360 = v32;
            uint64_t v328 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)v368, v230, 0, (uint64_t)v370, (uint64_t)v369, v224 + 32, v371, (double *)v395.i64, 2uLL, 0, (uint64_t)&v387, 2uLL, (uint64_t)&v394, 2, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v328,
              &v393,
              (uint64_t)v374,
              v360,
              v382);
          }
        }
        else
        {
          int64x2_t v394 = v227;
          int64x2_t v395 = v226;
          v391[0] = 0x200000002;
          unint64_t v231 = *(void *)(v13 + 16);
          if (v231)
          {
            v371 = (double *)(v13 + 32);
            v369 = (int64x2_t *)(v380 + 32);
            v370 = &v395;
            unint64_t v232 = *(void *)(v380 + 16);
            uint64_t v233 = *((void *)v381 + 2);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v351 = v32;
            uint64_t v319 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)&v395, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, v371, v231, 0, v380 + 32, v232, (uint64_t)(v381 + 4), v233, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v319,
              &v393,
              (uint64_t)v374,
              v351,
              v382);
          }
          else
          {
            uint64_t v387 = *(void *)&v5;
            double v388 = v16;
            double v389 = v15;
            double v390 = v17;
            uint64_t v386 = 0x200000002;
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v359 = v32;
            uint64_t v327 = v32;
            unint64_t v66 = v384;
            sub_184CE0C6C((uint64_t)&v395, 2, 0, (uint64_t)v391, 2, (uint64_t)&v394, (void *)2, &v389, 2uLL, 0, (uint64_t)&v386, 2uLL, (uint64_t)&v387, 2, v384, v385, (uint64_t)v372, v383, &v392,
              v383,
              1,
              &v399,
              (uint64_t)v378,
              v327,
              &v393,
              (uint64_t)v374,
              v359,
              v382);
          }
        }
        uint64_t v114 = v377;
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v279 = v392;
        if (v392 < 0) {
          goto LABEL_496;
        }
        unint64_t v280 = v382;
        if (v375)
        {
          BOOL v281 = sub_184C9D670(v372, v392);
          swift_release();
          *uint64_t v376 = v281;
          uint64_t v282 = v393;
          if (v393 < 0)
          {
LABEL_497:
            __break(1u);
            goto LABEL_498;
          }
          v283 = sub_184C9D670(v378, v393);
          swift_release();
          *uint64_t v114 = (uint64_t)v283;
          v284 = sub_184CE1788(v374, v282);
          swift_release();
          *(void *)uint64_t v26 = v284;
        }
        else
        {
          if (v379 < v382)
          {
LABEL_505:
            __break(1u);
LABEL_506:
            __break(1u);
          }
          sub_184CE1520(v382, v379, v372, v392);
          uint64_t v282 = v393;
          if (v393 < 0) {
            goto LABEL_497;
          }
          sub_184CE1520(v66, v385, v378, v393);
          sub_184CE1654(v66, v385, v374, v282);
        }
        unint64_t v285 = v280 + v279;
        if (__OFADD__(v280, v279))
        {
LABEL_498:
          __break(1u);
          goto LABEL_499;
        }
        unint64_t v286 = v285 - v379;
        if (__OFSUB__(v285, v379))
        {
LABEL_499:
          __break(1u);
          goto LABEL_500;
        }
        if (v286)
        {
          BOOL v125 = __OFADD__(v66, v282);
          unint64_t v287 = v66 + v282;
          if (v125)
          {
LABEL_503:
            __break(1u);
            goto LABEL_504;
          }
          int64_t v288 = *(void *)(*(void *)v26 + 16);
          if (v288 < (uint64_t)v287)
          {
LABEL_504:
            __break(1u);
            goto LABEL_505;
          }
          if (v287 != v288)
          {
            if ((uint64_t)v287 >= v288) {
              goto LABEL_506;
            }
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            sub_184CE19DC();
            while ((v287 & 0x8000000000000000) == 0)
            {
              if (v287 >= *(void *)(*(void *)v26 + 16)) {
                goto LABEL_431;
              }
              uint64_t v289 = *(unsigned int *)(*(void *)v26 + 4 * v287 + 32);
              unint64_t v290 = v289 + v286;
              if (__OFADD__(v289, v286)) {
                goto LABEL_432;
              }
              if ((v290 & 0x8000000000000000) != 0) {
                goto LABEL_433;
              }
              if (HIDWORD(v290)) {
                goto LABEL_434;
              }
              sub_184CE19DC();
              if (*(void *)(*(void *)v26 + 16) <= v287) {
                goto LABEL_435;
              }
              *(_DWORD *)(*(void *)v26 + 4 * v287++ + 32) = v290;
              if (v288 == v287) {
                goto LABEL_352;
              }
            }
            goto LABEL_430;
          }
        }
LABEL_352:
        MEMORY[0x18532B810](v372, -1, -1);
      }
LABEL_353:
      MEMORY[0x18532B810](v374, -1, -1);
    }
LABEL_354:
    uint64_t v276 = v385;
    MEMORY[0x18532B810](v378, -1, -1);
  }
  uint64_t v291 = *v114;
  if (*(void *)(*v114 + 16))
  {
    uint64_t v292 = v3[1].i64[0];
    uint64_t v293 = v3[1].i64[1];
    double v294 = (uint64_t *)(v291 + 32);
    sub_184CEB7D8((unsigned int *)(v3[2].i64[1] + 32), *(void *)(v3[2].i64[1] + 16), (double *)(v3[3].i64[0] + 32), (double *)v394.i64);
    int64x2_t v295 = v394;
    if (!v66)
    {
      if (!*(void *)(v291 + 16))
      {
LABEL_428:
        __break(1u);
        goto LABEL_429;
      }
      uint64_t v292 = *v294;
    }
    if (v276 == v373)
    {
      uint64_t v296 = *(void *)(v291 + 16);
      if (!v296)
      {
        __break(1u);
        return;
      }
      uint64_t v293 = v294[v296 - 1];
    }
  }
  else
  {
    int64x2_t v295 = vdupq_n_s64(0x7FF8000000000000uLL);
    uint64_t v292 = 0x7FF8000000000000;
    uint64_t v293 = 0x7FF8000000000000;
  }
  *uint64_t v3 = v295;
  v3[1].i64[0] = v292;
  v3[1].i64[1] = v293;
  sub_184CEB9B4();
}

uint64_t Region.update(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[6];
  uint64_t v12 = *(void *)(v2 + 32);
  uint64_t v13 = *(void *)(v2 + 40);
  uint64_t v14 = *(void *)(v3 + 48);
  long long v15 = *(_OWORD *)(v3 + 16);
  long long v33 = *(_OWORD *)v3;
  long long v34 = v15;
  uint64_t v35 = v12;
  uint64_t v36 = v13;
  uint64_t v37 = v14;
  *(void *)&long long v27 = v5;
  *((void *)&v27 + 1) = v6;
  uint64_t v28 = v7;
  uint64_t v29 = v8;
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  uint64_t v32 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  Region.formIntersection(_:)(&v27);
  uint64_t v16 = v33;
  uint64_t v25 = v34;
  uint64_t v26 = *((void *)&v33 + 1);
  uint64_t v17 = v35;
  uint64_t v24 = *((void *)&v34 + 1);
  uint64_t v18 = v36;
  uint64_t v19 = v37;
  *(void *)&long long v33 = v5;
  *((void *)&v33 + 1) = v6;
  *(void *)&long long v34 = v7;
  *((void *)&v34 + 1) = v8;
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  uint64_t result = Region.formUnion(_:)(&v33);
  if ((~v16 & 0x7FF0000000000000) != 0 || (v16 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v22 = v25;
    uint64_t v21 = v26;
    uint64_t v23 = v24;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v16 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  *a2 = v16;
  a2[1] = v21;
  a2[2] = v22;
  a2[3] = v23;
  a2[4] = v17;
  a2[5] = v18;
  a2[6] = v19;
  return result;
}

uint64_t sub_184CDE658(uint64_t a1, uint64_t (*a2)(char **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_184CDF0C4(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_184CDE6B0(uint64_t a1, uint64_t (*a2)(unsigned char **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_184CDF394(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_184CDE708(uint64_t a1, uint64_t (*a2)(unsigned char **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_184CDF6DC(a1, a2, a3, a4, a5, a6, &qword_1E8F8B570, &byte_1E8F9E540);
}

void sub_184CDE774(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,char a25,double **a26,uint64_t a27,uint64_t a28,uint64_t *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_184CD40D8();
  if ((v38 & 0x10000000000) != 0) {
    return;
  }
  uint64_t v39 = 0;
  LOBYTE(v40) = 1;
  while (1)
  {
    v40 &= (v37 & 0x100000000uLL) >> 32;
    if ((v37 & 0x100000000) != 0) {
      uint64_t v42 = v39;
    }
    else {
      uint64_t v42 = v37;
    }
    if (v40)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v36 >= a3 && v36 < a4;
      uint64_t v42 = v39;
      if (!v47) {
        goto LABEL_43;
      }
      goto LABEL_34;
    }
    if (v42) {
      uint64_t v48 = *(unsigned int *)(a8 + 4 * v42 - 4);
    }
    else {
      uint64_t v48 = 0;
    }
    uint64_t v46 = 0;
    uint64_t v45 = a10 + 8 * v48;
    if (!a10) {
      uint64_t v45 = 0;
    }
    if (v36 < a3 || v36 >= a4)
    {
      uint64_t v39 = v42;
      uint64_t v43 = 0;
      goto LABEL_43;
    }
    uint64_t v44 = *(unsigned int *)(a8 + 4 * v42) - v48;
    if (v44 < 2)
    {
      if (v44 != 1)
      {
        uint64_t v43 = 0;
        goto LABEL_33;
      }
      uint64_t v43 = 0;
LABEL_30:
      if (*(double *)(v45 + 8 * v43) <= a1) {
        ++v43;
      }
      goto LABEL_33;
    }
    uint64_t v43 = 0;
    for (unint64_t i = v44; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(double *)(v45 + 8 * (v43 + (i >> 1))) <= a1) {
        v43 += i >> 1;
      }
    }
    if (v43 < v44) {
      goto LABEL_30;
    }
LABEL_33:
    if (v44 < v43) {
      goto LABEL_100;
    }
LABEL_34:
    uint64_t v50 = v44 - v43;
    uint64_t v46 = v43;
    if (v44 - v43 >= 2)
    {
      uint64_t v46 = v43;
      do
      {
        unint64_t v51 = (unint64_t)v50 >> 1;
        v50 -= (unint64_t)v50 >> 1;
        uint64_t v52 = v46 + v51;
        if (*(double *)(v45 + 8 * v52) < a2) {
          uint64_t v46 = v52;
        }
      }
      while (v50 > 1);
    }
    if (v46 < v44 && *(double *)(v45 + 8 * v46) < a2) {
      ++v46;
    }
    uint64_t v39 = v42;
LABEL_43:
    uint64_t v53 = *a23;
    uint64_t v54 = a24 - *a23;
    if (a24 < *a23) {
      break;
    }
    if (a21)
    {
      if (v43 >= 0) {
        uint64_t v55 = v43 & 1;
      }
      else {
        uint64_t v55 = -(v43 & 1);
      }
      uint64_t v56 = v43 - v55;
      if (__OFSUB__(v43, v55)) {
        goto LABEL_99;
      }
      int64x2_t v57 = (double *)(a21 + 8 * v53);
      if (v54)
      {
        uint64_t v58 = v46 & 1;
        if (v46 < 0) {
          uint64_t v58 = -v58;
        }
        BOOL v59 = __OFADD__(v46, v58);
        uint64_t v60 = v46 + v58;
        char v61 = v59;
        if (v54 < 1) {
          goto LABEL_101;
        }
        if (v61) {
          goto LABEL_102;
        }
        if (v56 == v60)
        {
          uint64_t v54 = 0;
          if ((a25 & 1) == 0) {
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v62 = v60 + v55 - v43;
          uint64_t v63 = a24 - 1 - v53;
          BOOL v64 = v57;
          while (1)
          {
            double v65 = a1;
            if (v56 >= v43)
            {
              double v65 = a2;
              if (v56 < v46) {
                double v65 = *(double *)(v45 + 8 * v56);
              }
            }
            if (v56 >= v60)
            {
              __break(1u);
              goto LABEL_93;
            }
            *BOOL v64 = v65;
            if (!v63) {
              break;
            }
            ++v56;
            ++v64;
            --v63;
            if (v60 == v56)
            {
              uint64_t v54 = v62;
              break;
            }
          }
          if ((a25 & 1) == 0) {
            goto LABEL_85;
          }
          if (v54 < 0) {
            goto LABEL_103;
          }
        }
      }
      else if ((a25 & 1) == 0)
      {
        goto LABEL_85;
      }
      if (a26[1] == (double *)v54)
      {
        if (!v54) {
          goto LABEL_3;
        }
        unint64_t v66 = *a26;
        if (**a26 == *v57)
        {
          if (v54 == 1) {
            goto LABEL_3;
          }
          if (v66[1] == v57[1])
          {
            uint64_t v67 = 2;
            while (v54 != v67)
            {
              double v68 = v66[v67];
              double v69 = v57[v67++];
              if (v68 != v69) {
                goto LABEL_83;
              }
            }
            goto LABEL_3;
          }
        }
      }
    }
    else
    {
      if ((a25 & 1) == 0)
      {
        uint64_t v54 = 0;
        goto LABEL_85;
      }
      if (!a26[1]) {
        goto LABEL_3;
      }
      uint64_t v54 = 0;
      int64x2_t v57 = 0;
    }
LABEL_83:
    *a26 = v57;
    a26[1] = (double *)v54;
LABEL_85:
    uint64_t v70 = *a23 + v54;
    if (__OFADD__(*a23, v54)) {
      goto LABEL_94;
    }
    *a23 = v70;
    uint64_t v71 = *a29;
    *(double *)(a27 + 8 * *a29) = v36;
    BOOL v59 = __OFADD__(a32, v70);
    unint64_t v72 = a32 + v70;
    if (v59) {
      goto LABEL_95;
    }
    if ((v72 & 0x8000000000000000) != 0) {
      goto LABEL_96;
    }
    if (HIDWORD(v72)) {
      goto LABEL_97;
    }
    *(_DWORD *)(a30 + 4 * v71) = v72;
    BOOL v59 = __OFADD__(v71, 1);
    uint64_t v73 = v71 + 1;
    if (v59) {
      goto LABEL_98;
    }
    *a29 = v73;
LABEL_3:
    sub_184CD40D8();
    if ((v41 & 0x10000000000) != 0) {
      return;
    }
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
}

uint64_t sub_184CDEBA4(uint64_t a1, uint64_t (*a2)(unsigned char **), double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 32);
  BOOL v11 = (~*(void *)a1 & 0x7FF0000000000000) != 0 || (*(void *)a1 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v11 && !*(void *)(v10 + 16))
  {
    long long v30 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)a1;
    *(_OWORD *)&v41[16] = v30;
    BOOL v31 = (*(void *)a8 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)a8 & 0x7FF0000000000000) == 0;
    uint64_t v32 = *(void *)(a8 + 32);
    unint64_t v15 = *(void *)(v32 + 16);
    if (v31 || v15 != 0)
    {
      uint64_t v17 = (char *)(v32 + 32);
      uint64_t v34 = *(void *)(a8 + 40);
      uint64_t v35 = *(void *)(a8 + 48);
      double v20 = (uint64_t *)(v34 + 32);
      uint64_t v21 = *(void *)(v34 + 16);
      uint64_t v22 = (uint64_t *)(v35 + 32);
      uint64_t v23 = *(void *)(v35 + 16);
      uint64_t v24 = &v41[8 * a9 + 16];
      uint64_t v25 = a10 - a9;
      LOBYTE(v38) = 1;
      LOBYTE(v37) = 1;
      goto LABEL_15;
    }
    uint64_t v36 = *(void *)(a8 + 24);
    uint64_t v38 = *(void *)a8;
    long long v27 = &v38;
    long long v39 = *(_OWORD *)(a8 + 8);
    uint64_t v40 = v36;
    uint64_t v37 = 0x200000002;
    uint64_t v42 = &v41[8 * a9 + 16];
    uint64_t v43 = a10 - a9;
    uint64_t v44 = a9;
    uint64_t v45 = (char *)&v39 + 8;
    long long v46 = xmmword_1850CBC80;
    uint64_t v47 = 0x7FF8000000000000;
    int v48 = 0;
    char v49 = 1;
    int v50 = 0;
    char v51 = 1;
    uint64_t v28 = &v37;
LABEL_17:
    uint64_t v52 = v28;
    uint64_t v53 = 2;
    uint64_t v54 = v27;
    uint64_t v55 = 2;
    goto LABEL_18;
  }
  uint64_t v12 = v10 + 32;
  BOOL v13 = (*(void *)a8 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)a8 & 0x7FF0000000000000) == 0;
  uint64_t v14 = *(void *)(a8 + 32);
  unint64_t v15 = *(void *)(v14 + 16);
  if (!v13 && v15 == 0)
  {
    uint64_t v26 = *(void *)(a8 + 24);
    *(void *)uint64_t v41 = *(void *)a8;
    long long v27 = (uint64_t *)v41;
    *(_OWORD *)&v41[8] = *(_OWORD *)(a8 + 8);
    *(void *)&v41[24] = v26;
    uint64_t v38 = 0x200000002;
    LOBYTE(v37) = 1;
    uint64_t v42 = (unsigned char *)(v12 + 8 * a9);
    uint64_t v43 = a10 - a9;
    uint64_t v44 = a9;
    uint64_t v45 = &v41[16];
    long long v46 = xmmword_1850CBC80;
    uint64_t v47 = 0x7FF8000000000000;
    int v48 = 0;
    char v49 = 1;
    int v50 = 0;
    char v51 = 1;
    uint64_t v28 = &v38;
    goto LABEL_17;
  }
  uint64_t v17 = (char *)(v14 + 32);
  uint64_t v18 = *(void *)(a8 + 40);
  uint64_t v19 = *(void *)(a8 + 48);
  double v20 = (uint64_t *)(v18 + 32);
  uint64_t v21 = *(void *)(v18 + 16);
  uint64_t v22 = (uint64_t *)(v19 + 32);
  uint64_t v23 = *(void *)(v19 + 16);
  uint64_t v24 = (unsigned char *)(v12 + 8 * a9);
  uint64_t v25 = a10 - a9;
  v41[0] = 1;
  LOBYTE(v38) = 1;
LABEL_15:
  uint64_t v42 = v24;
  uint64_t v43 = v25;
  uint64_t v44 = a9;
  uint64_t v45 = v17;
  long long v46 = v15;
  uint64_t v47 = 0x7FF8000000000000;
  int v48 = 0;
  char v49 = 1;
  int v50 = 0;
  char v51 = 1;
  uint64_t v52 = v20;
  uint64_t v53 = v21;
  uint64_t v54 = v22;
  uint64_t v55 = v23;
LABEL_18:
  double v56 = a3;
  double v57 = a4;
  double v58 = a5;
  double v59 = a6;
  char v60 = 0;
  return a2(&v42);
}

uint64_t sub_184CDEE08(uint64_t a1, uint64_t (*a2)(unsigned char **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_184CDF6DC(a1, a2, a3, a4, a5, a6, &qword_1E8F8B578, &byte_1E8F9E541);
}

uint64_t sub_184CDEE74(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, double **a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a2) {
    return result;
  }
  uint64_t v21 = a2;
  uint64_t v22 = 0;
  uint64_t v23 = a19;
  uint64_t v25 = a16;
  uint64_t v24 = a17;
  long long v27 = a13;
  uint64_t v26 = a14;
  if (a3 <= 0x100000000) {
    unint64_t v28 = 0x100000000 - a3;
  }
  else {
    unint64_t v28 = 0;
  }
  uint64_t v29 = a2 & ~(a2 >> 63);
  uint64_t v30 = a11;
  unint64_t v58 = a3;
  unint64_t v56 = v28;
  uint64_t v57 = a6;
  uint64_t v55 = v29;
  while ((a3 & 0x8000000000000000) == 0)
  {
    if (v22 == v28) {
      goto LABEL_48;
    }
    if (v22 == v29) {
      goto LABEL_49;
    }
    uint64_t v31 = v22 + a3;
    if (v22 + a3) {
      uint64_t v32 = *(unsigned int *)(a4 + 4 * v31 - 4);
    }
    else {
      uint64_t v32 = 0;
    }
    if (a6) {
      long long v33 = (const void *)(a6 + 8 * v32);
    }
    else {
      long long v33 = 0;
    }
    uint64_t v34 = *a10;
    uint64_t v35 = (double *)(v30 - *a10);
    if (v30 < *a10) {
      goto LABEL_50;
    }
    uint64_t v36 = *(void *)(result + 8 * v22);
    uint64_t v37 = *(unsigned int *)(a4 + 4 * v31);
    if (a8) {
      uint64_t v38 = (double *)(a8 + 8 * v34);
    }
    else {
      uint64_t v38 = 0;
    }
    if (v37 == v32 || v30 == v34)
    {
      long long v39 = 0;
      if ((a12 & 1) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v40 = result;
      uint64_t v41 = v21;
      uint64_t v42 = (double *)(v37 - v32);
      if ((uint64_t)v42 >= (uint64_t)v35) {
        long long v39 = v35;
      }
      else {
        long long v39 = v42;
      }
      memcpy(v38, v33, 8 * (void)v39);
      uint64_t v21 = v41;
      uint64_t result = v40;
      if ((a12 & 1) == 0)
      {
        a6 = v57;
        long long v27 = a13;
        uint64_t v23 = a19;
        a3 = v58;
        uint64_t v25 = a16;
        uint64_t v24 = a17;
        uint64_t v26 = a14;
        uint64_t v29 = v55;
        unint64_t v28 = v56;
        uint64_t v30 = a11;
        goto LABEL_39;
      }
      a6 = v57;
      long long v27 = a13;
      uint64_t v23 = a19;
      a3 = v58;
      uint64_t v25 = a16;
      uint64_t v24 = a17;
      uint64_t v26 = a14;
      uint64_t v29 = v55;
      unint64_t v28 = v56;
      uint64_t v30 = a11;
      if (((unint64_t)v39 & 0x8000000000000000) != 0) {
        goto LABEL_55;
      }
    }
    if (v27[1] == v39)
    {
      if (!v39) {
        goto LABEL_6;
      }
      uint64_t v43 = *v27;
      if (**v27 == *v38)
      {
        if (v39 == (double *)1) {
          goto LABEL_6;
        }
        if (v43[1] == v38[1])
        {
          uint64_t v44 = (uint64_t)v39 - 2;
          uint64_t v45 = v38 + 2;
          long long v46 = v43 + 2;
          while (v44)
          {
            double v47 = *v46++;
            double v48 = v47;
            double v49 = *v45++;
            --v44;
            if (v48 != v49) {
              goto LABEL_37;
            }
          }
          goto LABEL_6;
        }
      }
    }
LABEL_37:
    *long long v27 = v38;
    v27[1] = v39;
LABEL_39:
    uint64_t v50 = (uint64_t)v39 + *a10;
    if (__OFADD__(*a10, v39)) {
      goto LABEL_51;
    }
    *a10 = v50;
    uint64_t v51 = *v25;
    *(void *)(v26 + 8 * *v25) = v36;
    BOOL v52 = __OFADD__(v23, v50);
    unint64_t v53 = v23 + v50;
    if (v52) {
      goto LABEL_52;
    }
    if ((v53 & 0x8000000000000000) != 0) {
      goto LABEL_53;
    }
    if (HIDWORD(v53)) {
      goto LABEL_54;
    }
    *(_DWORD *)(v24 + 4 * v51) = v53;
    BOOL v52 = __OFADD__(v51, 1);
    uint64_t v54 = v51 + 1;
    if (v52)
    {
      __break(1u);
      return result;
    }
    *uint64_t v25 = v54;
LABEL_6:
    if (++v22 == v21) {
      return result;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_184CDF0C4(uint64_t a1, uint64_t (*a2)(char **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  BOOL v9 = (~*(void *)a1 & 0x7FF0000000000000) != 0 || (*(void *)a1 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v9 && !*(void *)(v7 + 16))
  {
    long long v27 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v43 = *(_OWORD *)a1;
    *(_OWORD *)&v43[16] = v27;
    uint64_t v42 = 0x200000002;
    BOOL v28 = (*(void *)a4 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)a4 & 0x7FF0000000000000) == 0;
    uint64_t v29 = *(void *)(a4 + 32);
    unint64_t v30 = *(void *)(v29 + 16);
    if (v28 || v30)
    {
      uint64_t v32 = *(void *)(a4 + 40);
      uint64_t v33 = *(void *)(a4 + 48);
      uint64_t v34 = (uint64_t *)(v32 + 32);
      uint64_t v35 = *(void *)(v32 + 16);
      uint64_t v36 = (uint64_t *)(v33 + 32);
      uint64_t v37 = *(void *)(v33 + 16);
      LOBYTE(v39) = 1;
      LOBYTE(v38) = 1;
      uint64_t v44 = (char *)(v29 + 32);
      long long v45 = v30;
      long long v46 = &v43[8 * a5 + 16];
      uint64_t v47 = a6 - a5;
      uint64_t v48 = a5;
      uint64_t v49 = 0x7FF8000000000000;
      int v50 = 0;
      char v51 = 1;
      int v52 = 0;
      char v53 = 1;
      uint64_t v54 = v34;
      uint64_t v55 = v35;
      unint64_t v56 = v36;
      uint64_t v57 = v37;
      unint64_t v58 = &v42;
      uint64_t v59 = 2;
    }
    else
    {
      uint64_t v31 = *(void *)(a4 + 24);
      uint64_t v39 = *(void *)a4;
      long long v40 = *(_OWORD *)(a4 + 8);
      uint64_t v41 = v31;
      uint64_t v38 = 0x200000002;
      uint64_t v44 = (char *)&v40 + 8;
      long long v45 = xmmword_1850CBC80;
      long long v46 = &v43[8 * a5 + 16];
      uint64_t v47 = a6 - a5;
      uint64_t v48 = a5;
      uint64_t v49 = 0x7FF8000000000000;
      int v50 = 0;
      char v51 = 1;
      int v52 = 0;
      char v53 = 1;
      uint64_t v54 = &v38;
      uint64_t v55 = 2;
      unint64_t v56 = &v39;
      uint64_t v57 = 2;
      unint64_t v58 = &v42;
      uint64_t v59 = 2;
    }
    char v60 = v43;
    uint64_t v61 = 2;
  }
  else
  {
    uint64_t v10 = v7 + 32;
    BOOL v11 = (uint64_t *)(v6 + 32);
    uint64_t v12 = *(void *)(v6 + 16);
    BOOL v13 = (unsigned char *)(v8 + 32);
    uint64_t v14 = *(void *)(v8 + 16);
    BOOL v15 = (*(void *)a4 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)a4 & 0x7FF0000000000000) == 0;
    uint64_t v16 = *(void *)(a4 + 32);
    unint64_t v17 = *(void *)(v16 + 16);
    if (!v15 && v17 == 0)
    {
      uint64_t v25 = *(void *)(a4 + 24);
      *(void *)uint64_t v43 = *(void *)a4;
      *(_OWORD *)&v43[8] = *(_OWORD *)(a4 + 8);
      *(void *)&v43[24] = v25;
      uint64_t v39 = 0x200000002;
      LOBYTE(v42) = 1;
      LOBYTE(v38) = 1;
      uint64_t v44 = &v43[16];
      long long v45 = xmmword_1850CBC80;
      long long v46 = (unsigned char *)(v10 + 8 * a5);
      uint64_t v47 = a6 - a5;
      uint64_t v48 = a5;
      uint64_t v49 = 0x7FF8000000000000;
      int v50 = 0;
      char v51 = 1;
      int v52 = 0;
      char v53 = 1;
      uint64_t v54 = &v39;
      uint64_t v55 = 2;
      unint64_t v56 = (uint64_t *)v43;
      uint64_t v57 = 2;
    }
    else
    {
      uint64_t v19 = *(void *)(a4 + 40);
      uint64_t v20 = *(void *)(a4 + 48);
      uint64_t v21 = (uint64_t *)(v19 + 32);
      uint64_t v22 = *(void *)(v19 + 16);
      uint64_t v23 = (uint64_t *)(v20 + 32);
      uint64_t v24 = *(void *)(v20 + 16);
      v43[0] = 1;
      LOBYTE(v39) = 1;
      uint64_t v44 = (char *)(v16 + 32);
      long long v45 = v17;
      long long v46 = (unsigned char *)(v10 + 8 * a5);
      uint64_t v47 = a6 - a5;
      uint64_t v48 = a5;
      uint64_t v49 = 0x7FF8000000000000;
      int v50 = 0;
      char v51 = 1;
      int v52 = 0;
      char v53 = 1;
      uint64_t v54 = v21;
      uint64_t v55 = v22;
      unint64_t v56 = v23;
      uint64_t v57 = v24;
    }
    unint64_t v58 = v11;
    uint64_t v59 = v12;
    char v60 = v13;
    uint64_t v61 = v14;
  }
  return a2(&v44);
}

uint64_t sub_184CDF394(uint64_t a1, uint64_t (*a2)(unsigned char **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  BOOL v9 = (~*(void *)a1 & 0x7FF0000000000000) != 0 || (*(void *)a1 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v9 && !*(void *)(v7 + 16))
  {
    long long v27 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v43 = *(_OWORD *)a1;
    *(_OWORD *)&v43[16] = v27;
    uint64_t v42 = 0x200000002;
    BOOL v28 = (*(void *)a4 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)a4 & 0x7FF0000000000000) == 0;
    uint64_t v29 = *(void *)(a4 + 32);
    unint64_t v30 = *(void *)(v29 + 16);
    if (v28 || v30)
    {
      uint64_t v32 = *(void *)(a4 + 40);
      uint64_t v33 = *(void *)(a4 + 48);
      uint64_t v34 = (uint64_t *)(v32 + 32);
      uint64_t v35 = *(void *)(v32 + 16);
      uint64_t v36 = (uint64_t *)(v33 + 32);
      uint64_t v37 = *(void *)(v33 + 16);
      LOBYTE(v39) = 1;
      LOBYTE(v38) = 1;
      uint64_t v44 = &v43[8 * a5 + 16];
      uint64_t v45 = a6 - a5;
      uint64_t v46 = a5;
      uint64_t v47 = (char *)(v29 + 32);
      long long v48 = v30;
      uint64_t v49 = 0x7FF8000000000000;
      int v50 = 0;
      char v51 = 1;
      int v52 = 0;
      char v53 = 1;
      uint64_t v54 = &v42;
      uint64_t v55 = 2;
      unint64_t v56 = v43;
      uint64_t v57 = 2;
      unint64_t v58 = v34;
      uint64_t v59 = v35;
      char v60 = v36;
      uint64_t v61 = v37;
    }
    else
    {
      uint64_t v31 = *(void *)(a4 + 24);
      uint64_t v39 = *(void *)a4;
      long long v40 = *(_OWORD *)(a4 + 8);
      uint64_t v41 = v31;
      uint64_t v38 = 0x200000002;
      uint64_t v44 = &v43[8 * a5 + 16];
      uint64_t v45 = a6 - a5;
      uint64_t v46 = a5;
      uint64_t v47 = (char *)&v40 + 8;
      long long v48 = xmmword_1850CBC80;
      uint64_t v49 = 0x7FF8000000000000;
      int v50 = 0;
      char v51 = 1;
      int v52 = 0;
      char v53 = 1;
      uint64_t v54 = &v42;
      uint64_t v55 = 2;
      unint64_t v56 = v43;
      uint64_t v57 = 2;
      unint64_t v58 = &v38;
      uint64_t v59 = 2;
      char v60 = &v39;
      uint64_t v61 = 2;
    }
  }
  else
  {
    uint64_t v10 = v7 + 32;
    BOOL v11 = (uint64_t *)(v6 + 32);
    uint64_t v12 = *(void *)(v6 + 16);
    BOOL v13 = (unsigned char *)(v8 + 32);
    uint64_t v14 = *(void *)(v8 + 16);
    BOOL v15 = (*(void *)a4 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)a4 & 0x7FF0000000000000) == 0;
    uint64_t v16 = *(void *)(a4 + 32);
    unint64_t v17 = *(void *)(v16 + 16);
    if (!v15 && v17 == 0)
    {
      uint64_t v25 = *(void *)(a4 + 24);
      *(void *)uint64_t v43 = *(void *)a4;
      *(_OWORD *)&v43[8] = *(_OWORD *)(a4 + 8);
      *(void *)&v43[24] = v25;
      uint64_t v39 = 0x200000002;
      LOBYTE(v42) = 1;
      LOBYTE(v38) = 1;
      uint64_t v44 = (unsigned char *)(v10 + 8 * a5);
      uint64_t v45 = a6 - a5;
      uint64_t v46 = a5;
      uint64_t v47 = &v43[16];
      long long v48 = xmmword_1850CBC80;
      uint64_t v49 = 0x7FF8000000000000;
      int v50 = 0;
      char v51 = 1;
      int v52 = 0;
      char v53 = 1;
      uint64_t v54 = v11;
      uint64_t v55 = v12;
      unint64_t v56 = v13;
      uint64_t v57 = v14;
      unint64_t v58 = &v39;
      uint64_t v59 = 2;
      char v60 = (uint64_t *)v43;
      uint64_t v61 = 2;
    }
    else
    {
      uint64_t v19 = *(void *)(a4 + 40);
      uint64_t v20 = *(void *)(a4 + 48);
      uint64_t v21 = (uint64_t *)(v19 + 32);
      uint64_t v22 = *(void *)(v19 + 16);
      uint64_t v23 = (uint64_t *)(v20 + 32);
      uint64_t v24 = *(void *)(v20 + 16);
      v43[0] = 1;
      LOBYTE(v39) = 1;
      uint64_t v44 = (unsigned char *)(v10 + 8 * a5);
      uint64_t v45 = a6 - a5;
      uint64_t v46 = a5;
      uint64_t v47 = (char *)(v16 + 32);
      long long v48 = v17;
      uint64_t v49 = 0x7FF8000000000000;
      int v50 = 0;
      char v51 = 1;
      int v52 = 0;
      char v53 = 1;
      uint64_t v54 = v11;
      uint64_t v55 = v12;
      unint64_t v56 = v13;
      uint64_t v57 = v14;
      unint64_t v58 = v21;
      uint64_t v59 = v22;
      char v60 = v23;
      uint64_t v61 = v24;
    }
  }
  return a2(&v44);
}

uint64_t sub_184CDF670(uint64_t a1, uint64_t (*a2)(unsigned char **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_184CDF6DC(a1, a2, a3, a4, a5, a6, &qword_1E8F8B580, &byte_1E8F9E542);
}

uint64_t sub_184CDF6DC(uint64_t a1, uint64_t (*a2)(unsigned char **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unsigned char *a8)
{
  BOOL v9 = a2;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  BOOL v13 = (~*(void *)a1 & 0x7FF0000000000000) != 0 || (*(void *)a1 & 0xFFFFFFFFFFFFFLL) == 0;
  if (!v13 || *(void *)(v10 + 16))
  {
    uint64_t v14 = v10 + 32;
    BOOL v15 = (uint64_t *)(v11 + 32);
    uint64_t v16 = *(void *)(v11 + 16);
    unint64_t v17 = (unsigned char *)(v12 + 32);
    uint64_t v18 = *(void *)(v12 + 16);
    BOOL v19 = (*(void *)a4 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)a4 & 0x7FF0000000000000) == 0;
    uint64_t v20 = *(void *)(a4 + 32);
    unint64_t v21 = *(void *)(v20 + 16);
    if (v19 || v21 != 0)
    {
      uint64_t v23 = (char *)(v20 + 32);
      uint64_t v24 = *(void *)(a4 + 40);
      uint64_t v25 = *(void *)(a4 + 48);
      uint64_t v26 = (uint64_t *)(v24 + 32);
      uint64_t v27 = *(void *)(v24 + 16);
      BOOL v28 = (uint64_t *)(v25 + 32);
      uint64_t v29 = *(void *)(v25 + 16);
      unint64_t v30 = (unsigned char *)(v14 + 8 * a5);
      uint64_t v31 = a6 - a5;
      if (*a7 != -1)
      {
        unint64_t v58 = a8;
        uint64_t v57 = (uint64_t *)(v25 + 32);
        uint64_t v55 = *(void *)(v25 + 16);
        uint64_t v56 = *(void *)(v24 + 16);
        swift_once();
        uint64_t v29 = v55;
        uint64_t v27 = v56;
        BOOL v28 = v57;
        a8 = v58;
        BOOL v9 = a2;
      }
      char v32 = *a8;
      v69[0] = 1;
      LOBYTE(v65) = 1;
      uint64_t v70 = v30;
      uint64_t v71 = v31;
      uint64_t v72 = a5;
      uint64_t v73 = v23;
      long long v74 = v21;
      uint64_t v75 = 0x7FF8000000000000;
      int v76 = 0;
      char v77 = 1;
      int v78 = 0;
      char v79 = 1;
      uint64_t v80 = v15;
      uint64_t v81 = v16;
      unint64_t v82 = v17;
      uint64_t v83 = v18;
      uint64_t v84 = v26;
      uint64_t v85 = v27;
      uint64_t v86 = v28;
      uint64_t v87 = v29;
      goto LABEL_21;
    }
    uint64_t v33 = *(void *)(a4 + 24);
    *(void *)double v69 = *(void *)a4;
    *(_OWORD *)&v69[8] = *(_OWORD *)(a4 + 8);
    *(void *)&v69[24] = v33;
    uint64_t v65 = 0x200000002;
    uint64_t v34 = (unsigned char *)(v14 + 8 * a5);
    uint64_t v35 = a6 - a5;
    if (*a7 != -1)
    {
      uint64_t v59 = a8;
      swift_once();
      a8 = v59;
      BOOL v9 = a2;
    }
    char v32 = *a8;
    LOBYTE(v68) = 1;
    LOBYTE(v64) = 1;
    uint64_t v70 = v34;
    uint64_t v71 = v35;
    uint64_t v72 = a5;
    uint64_t v73 = &v69[16];
    long long v74 = xmmword_1850CBC80;
    uint64_t v75 = 0x7FF8000000000000;
    int v76 = 0;
    char v77 = 1;
    int v78 = 0;
    char v79 = 1;
    uint64_t v80 = v15;
    uint64_t v81 = v16;
    unint64_t v82 = v17;
    uint64_t v83 = v18;
    uint64_t v84 = &v65;
    uint64_t v85 = 2;
    uint64_t v86 = (uint64_t *)v69;
LABEL_20:
    uint64_t v87 = 2;
    goto LABEL_21;
  }
  long long v37 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)double v69 = *(_OWORD *)a1;
  *(_OWORD *)&v69[16] = v37;
  uint64_t v68 = 0x200000002;
  BOOL v38 = (*(void *)a4 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)a4 & 0x7FF0000000000000) == 0;
  uint64_t v39 = *(void *)(a4 + 32);
  unint64_t v40 = *(void *)(v39 + 16);
  if (!v38 && !v40)
  {
    uint64_t v41 = *(void *)(a4 + 24);
    uint64_t v65 = *(void *)a4;
    long long v66 = *(_OWORD *)(a4 + 8);
    uint64_t v67 = v41;
    uint64_t v64 = 0x200000002;
    uint64_t v42 = &v69[8 * a5 + 16];
    uint64_t v43 = a6 - a5;
    if (*a7 != -1)
    {
      uint64_t v54 = a8;
      swift_once();
      a8 = v54;
      BOOL v9 = a2;
    }
    char v32 = *a8;
    uint64_t v70 = v42;
    uint64_t v71 = v43;
    uint64_t v72 = a5;
    uint64_t v73 = (char *)&v66 + 8;
    long long v74 = xmmword_1850CBC80;
    uint64_t v75 = 0x7FF8000000000000;
    int v76 = 0;
    char v77 = 1;
    int v78 = 0;
    char v79 = 1;
    uint64_t v80 = &v68;
    uint64_t v81 = 2;
    unint64_t v82 = v69;
    uint64_t v83 = 2;
    uint64_t v84 = &v64;
    uint64_t v85 = 2;
    uint64_t v86 = &v65;
    goto LABEL_20;
  }
  uint64_t v44 = (char *)(v39 + 32);
  uint64_t v45 = *(void *)(a4 + 40);
  uint64_t v46 = *(void *)(a4 + 48);
  uint64_t v47 = (uint64_t *)(v45 + 32);
  uint64_t v48 = *(void *)(v45 + 16);
  uint64_t v49 = (uint64_t *)(v46 + 32);
  uint64_t v50 = *(void *)(v46 + 16);
  char v51 = &v69[8 * a5 + 16];
  uint64_t v52 = a6 - a5;
  if (*a7 != -1)
  {
    char v60 = a8;
    swift_once();
    a8 = v60;
    BOOL v9 = a2;
  }
  char v32 = *a8;
  LOBYTE(v65) = 1;
  LOBYTE(v64) = 1;
  uint64_t v70 = v51;
  uint64_t v71 = v52;
  uint64_t v72 = a5;
  uint64_t v73 = v44;
  long long v74 = v40;
  uint64_t v75 = 0x7FF8000000000000;
  int v76 = 0;
  char v77 = 1;
  int v78 = 0;
  char v79 = 1;
  uint64_t v80 = &v68;
  uint64_t v81 = 2;
  unint64_t v82 = v69;
  uint64_t v83 = 2;
  uint64_t v84 = v47;
  uint64_t v85 = v48;
  uint64_t v86 = v49;
  uint64_t v87 = v50;
LABEL_21:
  char v88 = v32;
  return v9(&v70);
}

uint64_t Region.subtracting(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CDFAC8(a1, (uint64_t (*)(_OWORD *))Region.subtract(_:), a2);
}

uint64_t sub_184CDFAC8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_OWORD *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(v3 + 48);
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(void *)(a3 + 48) = v5;
  long long v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a1 + 32);
  uint64_t v10 = v4;
  return a2(v9);
}

uint64_t Region.isSubset(of:)(long long *a1)
{
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *(void *)(v1 + 48);
  long long v4 = a1[1];
  long long v10 = *a1;
  long long v11 = v4;
  long long v12 = a1[2];
  uint64_t v13 = v2;
  long long v5 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v5;
  __n128 v8 = *(__n128 *)(v1 + 32);
  uint64_t v9 = v3;
  return Region.isSuperset(of:)((uint64_t)v7, v8) & 1;
}

uint64_t Region.isDisjoint(with:)(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  double v10 = *(double *)v1;
  double v9 = *(double *)(v1 + 8);
  double v12 = *(double *)(v1 + 16);
  double v11 = *(double *)(v1 + 24);
  uint64_t v14 = *(void *)(v1 + 32);
  uint64_t v13 = *(void *)(v1 + 40);
  uint64_t v15 = *(void *)(v1 + 48);
  double v58 = *(double *)v1;
  double v59 = v9;
  double v60 = v12;
  double v61 = v11;
  uint64_t v62 = v14;
  uint64_t v63 = v13;
  uint64_t v64 = v15;
  uint64_t v51 = *(void *)&v3;
  double v52 = v2;
  double v53 = v5;
  double v54 = v4;
  uint64_t v55 = v7;
  uint64_t v56 = v6;
  uint64_t v57 = v8;
  char v16 = sub_184CEAA4C((uint64_t)&v51);
  uint64_t result = 1;
  switch(v16)
  {
    case 1:
    case 2:
    case 3:
      return 0;
    case 4:
      uint64_t v19 = *(void *)(v14 + 16);
      v17.n128_f64[0] = v5;
      uint64_t v20 = sub_184CD3BE4(v14 + 32, v19, v17);
      uint64_t v22 = v20 - 1;
      if (__OFSUB__(v20, 1))
      {
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      uint64_t v23 = v20;
      if (v19 < v20) {
        goto LABEL_77;
      }
      v21.n128_f64[0] = v4;
      uint64_t v24 = sub_184CD3E58(v14 + 32 + 8 * v20, v19 - v20, v21);
      if (__OFADD__(v24, v23)) {
        goto LABEL_79;
      }
      if (v24 + v23 < (v22 & ~(v22 >> 63)))
      {
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
      }
      BOOL v25 = (*(void *)&v10 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v10 & 0x7FF0000000000000) == 0;
      if (v25 || v19)
      {
        uint64_t v36 = v13 + 32;
        uint64_t v37 = v15 + 32;
        BOOL v38 = (*(void *)&v3 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v3 & 0x7FF0000000000000) == 0;
        if (v38 || *(void *)(v7 + 16))
        {
          sub_184CE03A4(v36, v37, &v58, v3, v2, v5, v4);
          return LOBYTE(v58);
        }
        else
        {
          double v58 = v3;
          double v59 = v2;
          double v60 = v5;
          double v61 = v4;
          uint64_t v51 = 0x200000002;
          sub_184CE03A4(v36, v37, v50, v3, v2, v5, v4);
          return v50[0];
        }
      }
      else
      {
        double v58 = v10;
        double v59 = v9;
        double v60 = v12;
        double v61 = v11;
        *(void *)uint64_t v50 = 0x200000002;
        BOOL v26 = (*(void *)&v3 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v3 & 0x7FF0000000000000) == 0;
        if (v26 || *(void *)(v7 + 16))
        {
          sub_184CE03A4((uint64_t)v50, (uint64_t)&v58, &v51, v3, v2, v5, v4);
          return v51;
        }
        else
        {
          uint64_t v51 = *(void *)&v3;
          double v52 = v2;
          double v53 = v5;
          double v54 = v4;
          uint64_t v49 = 0x200000002;
          sub_184CE03A4((uint64_t)v50, (uint64_t)&v58, &v48, v3, v2, v5, v4);
          return v48;
        }
      }
    case 5:
      if (v11 < v5 && v11 > v4 && v12 > v4)
      {
        __break(1u);
        JUMPOUT(0x184CE0388);
      }
      BOOL v43 = (*(void *)&v10 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v10 & 0x7FF0000000000000) == 0;
      if (!v43 && !*(void *)(v14 + 16))
      {
        double v58 = v10;
        double v59 = v9;
        double v60 = v12;
        double v61 = v11;
        *(void *)uint64_t v50 = 0x200000002;
        BOOL v44 = (*(void *)&v3 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v3 & 0x7FF0000000000000) == 0;
        uint64_t v45 = *(void *)(v7 + 16);
        if (v44 || v45)
        {
          sub_184CE05EC(&v51, v10, v9, v5, v4, v45, 0, v6 + 32, *(void *)(v6 + 16), v8 + 32);
          return v51;
        }
        else
        {
          uint64_t v51 = *(void *)&v3;
          double v52 = v2;
          double v53 = v5;
          double v54 = v4;
          uint64_t v49 = 0x200000002;
          sub_184CE05EC(&v48, v10, v9, v5, v4, 2, 0, (uint64_t)&v49, 2, (uint64_t)&v51);
          return v48;
        }
      }
      BOOL v46 = (*(void *)&v3 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v3 & 0x7FF0000000000000) == 0;
      uint64_t v47 = *(void *)(v7 + 16);
      if (!v46 && !v47)
      {
        double v58 = v3;
        double v59 = v2;
        double v60 = v5;
        double v61 = v4;
        uint64_t v51 = 0x200000002;
        sub_184CE05EC(v50, v10, v9, v5, v4, 2, 0, (uint64_t)&v51, 2, (uint64_t)&v58);
        return v50[0];
      }
      sub_184CE05EC(&v58, v10, v9, v5, v4, v47, 0, v6 + 32, *(void *)(v6 + 16), v8 + 32);
      return LOBYTE(v58);
    case 6:
      uint64_t v27 = *(void *)(v14 + 16);
      v17.n128_f64[0] = v5;
      uint64_t v28 = sub_184CD3BE4(v14 + 32, v27, v17);
      uint64_t v30 = v28 - 1;
      if (__OFSUB__(v28, 1)) {
        goto LABEL_76;
      }
      uint64_t v31 = v28;
      if (v27 < v28) {
        goto LABEL_78;
      }
      v29.n128_f64[0] = v4;
      uint64_t v32 = sub_184CD3E58(v14 + 32 + 8 * v28, v27 - v28, v29);
      if (__OFADD__(v32, v31)) {
        goto LABEL_80;
      }
      if (v32 + v31 < (v30 & ~(v30 >> 63))) {
        goto LABEL_82;
      }
      BOOL v33 = (*(void *)&v10 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v10 & 0x7FF0000000000000) == 0;
      if (!v33 && !v27)
      {
        double v58 = v10;
        double v59 = v9;
        double v60 = v12;
        double v61 = v11;
        *(void *)uint64_t v50 = 0x200000002;
        BOOL v34 = (*(void *)&v3 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v3 & 0x7FF0000000000000) == 0;
        uint64_t v35 = *(void *)(v7 + 16);
        if (v34 || v35)
        {
          sub_184CE0834((uint64_t)v50, (uint64_t)&v58, &v51, v35, 0, v6 + 32, *(void *)(v6 + 16), v8 + 32);
          return v51;
        }
        else
        {
          uint64_t v51 = *(void *)&v3;
          double v52 = v2;
          double v53 = v5;
          double v54 = v4;
          uint64_t v49 = 0x200000002;
          sub_184CE0834((uint64_t)v50, (uint64_t)&v58, &v48, 2, 0, (uint64_t)&v49, 2, (uint64_t)&v51);
          return v48;
        }
      }
      uint64_t v39 = v13 + 32;
      uint64_t v40 = v15 + 32;
      BOOL v41 = (*(void *)&v3 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v3 & 0x7FF0000000000000) == 0;
      uint64_t v42 = *(void *)(v7 + 16);
      if (!v41 && !v42)
      {
        double v58 = v3;
        double v59 = v2;
        double v60 = v5;
        double v61 = v4;
        uint64_t v51 = 0x200000002;
        sub_184CE0834(v39, v40, v50, 2, 0, (uint64_t)&v51, 2, (uint64_t)&v58);
        return v50[0];
      }
      sub_184CE0834(v39, v40, &v58, v42, 0, v6 + 32, *(void *)(v6 + 16), v8 + 32);
      return LOBYTE(v58);
    default:
      return result;
  }
}

void sub_184CE03A4(uint64_t a1@<X3>, uint64_t a2@<X5>, unsigned char *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v14 = 0;
  LOBYTE(v15) = 1;
  while (1)
  {
    sub_184CD40D8();
    if ((v18 & 0x10000000000) != 0)
    {
      *a3 = 1;
      return;
    }
    v15 &= (v17 & 0x100000000uLL) >> 32;
    if ((v17 & 0x100000000) != 0) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = v17;
    }
    if (v15)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      BOOL v24 = v16 >= a6 && v16 < a7;
      uint64_t v19 = v14;
      if (!v24) {
        goto LABEL_44;
      }
      goto LABEL_35;
    }
    if (v19) {
      uint64_t v25 = *(unsigned int *)(a1 + 4 * v19 - 4);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v22 = a2 + 8 * v25;
    if (!a2) {
      uint64_t v22 = 0;
    }
    if (v16 < a6 || v16 >= a7)
    {
      uint64_t v23 = 0;
      uint64_t v14 = v19;
      uint64_t v20 = 0;
      goto LABEL_44;
    }
    uint64_t v21 = *(unsigned int *)(a1 + 4 * v19) - v25;
    if (v21 < 2)
    {
      if (v21 != 1)
      {
        uint64_t v20 = 0;
        goto LABEL_34;
      }
      uint64_t v20 = 0;
LABEL_31:
      if (*(double *)(v22 + 8 * v20) <= a4) {
        ++v20;
      }
      goto LABEL_34;
    }
    uint64_t v20 = 0;
    for (unint64_t i = v21; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(double *)(v22 + 8 * (v20 + (i >> 1))) <= a4) {
        v20 += i >> 1;
      }
    }
    if (v20 < v21) {
      goto LABEL_31;
    }
LABEL_34:
    if (v21 < v20) {
      goto LABEL_55;
    }
LABEL_35:
    uint64_t v28 = v21 - v20;
    uint64_t v23 = v20;
    if (v21 - v20 >= 2)
    {
      uint64_t v23 = v20;
      do
      {
        unint64_t v29 = (unint64_t)v28 >> 1;
        v28 -= (unint64_t)v28 >> 1;
        uint64_t v30 = v23 + v29;
        if (*(double *)(v22 + 8 * v30) < a5) {
          uint64_t v23 = v30;
        }
      }
      while (v28 > 1);
    }
    if (v23 < v21 && *(double *)(v22 + 8 * v23) < a5) {
      ++v23;
    }
    uint64_t v14 = v19;
LABEL_44:
    uint64_t v31 = v20 & 1;
    if (v20 < 0) {
      uint64_t v31 = -v31;
    }
    BOOL v32 = __OFSUB__(v20, v31);
    uint64_t v33 = v20 - v31;
    if (v32) {
      break;
    }
    uint64_t v34 = v23 & 1;
    if (v23 < 0) {
      uint64_t v34 = -v34;
    }
    BOOL v32 = __OFADD__(v23, v34);
    uint64_t v35 = v23 + v34;
    if (v32) {
      goto LABEL_54;
    }
    if (v33 != v35)
    {
      *a3 = 0;
      return;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

void sub_184CE05EC(unsigned char *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D6>, double a5@<D7>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15 = 0;
  LOBYTE(v16) = 1;
  while (1)
  {
    sub_184CD40D8();
    if ((v18 & 0x10000000000) != 0)
    {
      *a1 = 1;
      return;
    }
    v16 &= (v18 & 0x100000000uLL) >> 32;
    if ((v18 & 0x100000000) != 0) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = v18;
    }
    if (v16)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      BOOL v24 = v17 >= a4 && v17 < a5;
      uint64_t v19 = v15;
      if (!v24) {
        goto LABEL_44;
      }
      goto LABEL_35;
    }
    if (v19) {
      uint64_t v25 = *(unsigned int *)(a8 + 4 * v19 - 4);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v22 = a10 + 8 * v25;
    if (!a10) {
      uint64_t v22 = 0;
    }
    if (v17 < a4 || v17 >= a5)
    {
      uint64_t v23 = 0;
      uint64_t v15 = v19;
      uint64_t v20 = 0;
      goto LABEL_44;
    }
    uint64_t v21 = *(unsigned int *)(a8 + 4 * v19) - v25;
    if (v21 < 2)
    {
      if (v21 != 1)
      {
        uint64_t v20 = 0;
        goto LABEL_34;
      }
      uint64_t v20 = 0;
LABEL_31:
      if (*(double *)(v22 + 8 * v20) <= a2) {
        ++v20;
      }
      goto LABEL_34;
    }
    uint64_t v20 = 0;
    for (unint64_t i = v21; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(double *)(v22 + 8 * (v20 + (i >> 1))) <= a2) {
        v20 += i >> 1;
      }
    }
    if (v20 < v21) {
      goto LABEL_31;
    }
LABEL_34:
    if (v21 < v20) {
      goto LABEL_55;
    }
LABEL_35:
    uint64_t v28 = v21 - v20;
    uint64_t v23 = v20;
    if (v21 - v20 >= 2)
    {
      uint64_t v23 = v20;
      do
      {
        unint64_t v29 = (unint64_t)v28 >> 1;
        v28 -= (unint64_t)v28 >> 1;
        uint64_t v30 = v23 + v29;
        if (*(double *)(v22 + 8 * v30) < a3) {
          uint64_t v23 = v30;
        }
      }
      while (v28 > 1);
    }
    if (v23 < v21 && *(double *)(v22 + 8 * v23) < a3) {
      ++v23;
    }
    uint64_t v15 = v19;
LABEL_44:
    uint64_t v31 = v20 & 1;
    if (v20 < 0) {
      uint64_t v31 = -v31;
    }
    BOOL v32 = __OFSUB__(v20, v31);
    uint64_t v33 = v20 - v31;
    if (v32) {
      break;
    }
    uint64_t v34 = v23 & 1;
    if (v23 < 0) {
      uint64_t v34 = -v34;
    }
    BOOL v32 = __OFADD__(v23, v34);
    uint64_t v35 = v23 + v34;
    if (v32) {
      goto LABEL_54;
    }
    if (v33 != v35)
    {
      *a1 = 0;
      return;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

void sub_184CE0834(uint64_t a1@<X3>, uint64_t a2@<X5>, unsigned char *a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_184CD40D8();
  if ((v11 & 0x10000000000) != 0)
  {
LABEL_40:
    *a3 = 1;
    return;
  }
  LODWORD(v12) = 0;
  LODWORD(v13) = 0;
  char v16 = 1;
  LOBYTE(v17) = 1;
  while (1)
  {
    uint64_t v12 = (v10 & 0x100000000) != 0 ? v12 : v10;
    v16 &= (v10 & 0x100000000uLL) >> 32;
    uint64_t v13 = (v11 & 0x100000000) != 0 ? v13 : v11;
    if (v16)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      if (v12)
      {
        uint64_t v20 = a1;
        uint64_t v21 = *(unsigned int *)(a1 + 4 * v12 - 4);
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v20 = a1;
      }
      uint64_t v22 = *(unsigned int *)(v20 + 4 * v12);
      uint64_t v18 = a2 + 8 * v21;
      if (!a2) {
        uint64_t v18 = 0;
      }
      uint64_t v19 = v22 - v21;
    }
    v17 &= (v11 & 0x100000000uLL) >> 32;
    if (v17)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v25 = v13 ? *(unsigned int *)(a6 + 4 * v13 - 4) : 0;
      uint64_t v23 = a8 + 8 * v25;
      if (!a8) {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(unsigned int *)(a6 + 4 * v13) - v25;
    }
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    if (v19) {
      break;
    }
LABEL_30:
    if (v27 != v24)
    {
      v26 ^= 2u;
      uint64_t v28 = v19;
      if (v26 == 3) {
        goto LABEL_41;
      }
      goto LABEL_32;
    }
    uint64_t v31 = a6;
    uint64_t v32 = a8;
    sub_184CD40D8();
    a6 = v31;
    a8 = v32;
    if ((v11 & 0x10000000000) != 0) {
      goto LABEL_40;
    }
  }
  while (1)
  {
    while (1)
    {
      if (v27 != v24)
      {
        double v29 = *(double *)(v18 + 8 * v28);
        double v30 = *(double *)(v23 + 8 * v27);
        if (v29 >= v30) {
          break;
        }
      }
      v26 ^= 1u;
      if (v26 == 3) {
        goto LABEL_41;
      }
      if (v19 == ++v28) {
        goto LABEL_30;
      }
    }
    if (v30 >= v29) {
      break;
    }
    v26 ^= 2u;
    if (v26 == 3) {
      goto LABEL_41;
    }
LABEL_32:
    ++v27;
    if (v28 == v19) {
      goto LABEL_30;
    }
  }
  if (v26)
  {
    v26 ^= 3u;
    ++v28;
    goto LABEL_32;
  }
LABEL_41:
  *a3 = 0;
}

void sub_184CE0A40(uint64_t a1@<X3>, uint64_t a2@<X5>, unsigned char *a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_184CD40D8();
  if ((v11 & 0x10000000000) != 0)
  {
LABEL_42:
    *a3 = 1;
  }
  else
  {
    LODWORD(v12) = 0;
    LODWORD(v13) = 0;
    char v14 = 1;
    LOBYTE(v15) = 1;
    while (1)
    {
      uint64_t v12 = (v10 & 0x100000000) != 0 ? v12 : v10;
      v14 &= (v10 & 0x100000000uLL) >> 32;
      uint64_t v13 = (v11 & 0x100000000) != 0 ? v13 : v11;
      if (v14)
      {
        char v16 = 0;
        uint64_t v17 = 0;
      }
      else
      {
        if (v12) {
          uint64_t v18 = *(unsigned int *)(a1 + 4 * v12 - 4);
        }
        else {
          uint64_t v18 = 0;
        }
        char v16 = (double *)(a2 + 8 * v18);
        if (!a2) {
          char v16 = 0;
        }
        uint64_t v17 = *(unsigned int *)(a1 + 4 * v12) - v18;
      }
      v15 &= (v11 & 0x100000000uLL) >> 32;
      if ((v15 & 1) == 0)
      {
        uint64_t v19 = v13 ? *(unsigned int *)(a6 + 4 * v13 - 4) : 0;
        uint64_t v20 = (double *)(a8 + 8 * v19);
        if (!a8) {
          uint64_t v20 = 0;
        }
        uint64_t v21 = *(unsigned int *)(a6 + 4 * v13) - v19;
        if (v21) {
          break;
        }
      }
LABEL_3:
      sub_184CD40D8();
      if ((v11 & 0x10000000000) != 0) {
        goto LABEL_42;
      }
    }
    if (v17 && v16[v17 - 1] > *v20 && v20[v21 - 1] > *v16)
    {
      int v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      while (1)
      {
        while (v24 != v17)
        {
          while (1)
          {
            if (v23 != v21)
            {
              double v25 = v16[v24];
              double v26 = v20[v23];
              if (v25 >= v26) {
                break;
              }
            }
            v22 ^= 1u;
            if (v22 == 2) {
              goto LABEL_43;
            }
            if (v17 == ++v24) {
              goto LABEL_34;
            }
          }
          if (v26 >= v25)
          {
            v22 ^= 3u;
            if (v22 == 2) {
              goto LABEL_43;
            }
            ++v24;
            ++v23;
          }
          else
          {
            if (!v22) {
              goto LABEL_43;
            }
            v22 ^= 2u;
            ++v23;
          }
        }
LABEL_34:
        if (v23 == v21) {
          goto LABEL_3;
        }
        if (!v22) {
          break;
        }
        v22 ^= 2u;
        uint64_t v24 = v17;
        ++v23;
      }
    }
LABEL_43:
    *a3 = 0;
  }
}

void sub_184CE0C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, double *a8, unint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,char a21,double **a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v90 = a7;
  uint64_t v30 = a13;
  uint64_t v31 = a14;
  uint64_t v36 = a15;
  if (a1) {
    uint64_t v37 = (void *)(a1 + 8 * a15);
  }
  else {
    uint64_t v37 = 0;
  }
  BOOL v38 = (void *)(a16 - a15);
  uint64_t v67 = a6;
  uint64_t v66 = a4;
  if (qword_1E8F8B588 != -1) {
    goto LABEL_59;
  }
  while (1)
  {
    v71[0] = v37;
    v71[1] = v38;
    v71[2] = v36;
    v71[3] = a8;
    v71[4] = a9;
    v71[5] = a10;
    v71[6] = 0;
    v71[7] = 0;
    v71[8] = 0x7FF8000000000000;
    int v72 = 0;
    char v73 = 1;
    int v74 = 0;
    char v75 = 1;
    uint64_t v76 = a4;
    uint64_t v77 = a5;
    uint64_t v78 = a6;
    char v79 = v90;
    uint64_t v65 = a11;
    uint64_t v80 = a11;
    unint64_t v81 = a12;
    uint64_t v82 = v30;
    uint64_t v83 = v31;
    char v68 = byte_1E8F9E543;
    char v84 = byte_1E8F9E543;
    BOOL v38 = v71;
    sub_184CD40D8();
    if ((v41 & 0x10000000000) != 0) {
      break;
    }
    a5 = v39;
    LODWORD(a11) = 0;
    LODWORD(a10) = 0;
    unint64_t v90 = a25;
    uint64_t v37 = a19;
    LOBYTE(a9) = 1;
    LOBYTE(a12) = 1;
    uint64_t v36 = a17;
    while (1)
    {
      a11 = (v40 & 0x100000000) != 0 ? a11 : v40;
      a9 = a9 & ((v40 & 0x100000000uLL) >> 32);
      a10 = (v41 & 0x100000000) != 0 ? a10 : v41;
      if (a9)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
      }
      else
      {
        if (a11)
        {
          uint64_t v45 = v66;
          uint64_t v46 = *(unsigned int *)(v66 + 4 * a11 - 4);
        }
        else
        {
          uint64_t v46 = 0;
          uint64_t v45 = v66;
        }
        uint64_t v47 = *(unsigned int *)(v45 + 4 * a11);
        uint64_t v43 = v67 + 8 * v46;
        if (!v67) {
          uint64_t v43 = 0;
        }
        uint64_t v44 = v47 - v46;
      }
      a12 = ((v41 & 0x100000000uLL) >> 32) & a12;
      if (a12)
      {
        uint64_t v48 = 0;
        uint64_t v31 = 0;
      }
      else
      {
        if (a10) {
          uint64_t v49 = *(unsigned int *)(v65 + 4 * a10 - 4);
        }
        else {
          uint64_t v49 = 0;
        }
        uint64_t v48 = a13 + 8 * v49;
        if (!a13) {
          uint64_t v48 = 0;
        }
        uint64_t v31 = *(unsigned int *)(v65 + 4 * a10) - v49;
      }
      uint64_t v50 = *a19;
      uint64_t v51 = a20 - *a19;
      if (a20 < *a19) {
        break;
      }
      v85[0] = v43;
      v85[1] = v44;
      if (a17) {
        a8 = (double *)(a17 + 8 * v50);
      }
      else {
        a8 = 0;
      }
      v85[2] = v48;
      v85[3] = v31;
      char v86 = v68;
      uint64_t v87 = 0x7FF8000000000000;
      __int16 v88 = 0;
      char v89 = 0;
      BOOL v38 = v85;
      uint64_t v52 = sub_184D00CE0((uint64_t)v70, a8, v51);
      if (a21)
      {
        if (v52 < 0) {
          goto LABEL_58;
        }
        if (a22[1] == (double *)v52)
        {
          if (!v52) {
            goto LABEL_7;
          }
          double v53 = *a22;
          if (**a22 == *a8)
          {
            if (v52 == 1) {
              goto LABEL_7;
            }
            if (v53[1] == a8[1])
            {
              uint64_t v54 = v52 - 2;
              uint64_t v55 = a8 + 2;
              uint64_t v56 = v53 + 2;
              while (v54)
              {
                double v57 = *v56++;
                double v58 = v57;
                double v59 = *v55++;
                --v54;
                if (v58 != v59) {
                  goto LABEL_44;
                }
              }
              goto LABEL_7;
            }
          }
        }
LABEL_44:
        *a22 = a8;
        a22[1] = (double *)v52;
      }
      uint64_t v60 = *a19 + v52;
      if (__OFADD__(*a19, v52)) {
        goto LABEL_53;
      }
      *a19 = v60;
      uint64_t v61 = *v90;
      *(void *)(a23 + 8 * *v90) = a5;
      BOOL v62 = __OFADD__(a28, v60);
      unint64_t v63 = a28 + v60;
      if (v62) {
        goto LABEL_54;
      }
      if ((v63 & 0x8000000000000000) != 0) {
        goto LABEL_55;
      }
      if (HIDWORD(v63)) {
        goto LABEL_56;
      }
      *(_DWORD *)(a26 + 4 * v61) = v63;
      BOOL v62 = __OFADD__(v61, 1);
      uint64_t v64 = v61 + 1;
      if (v62) {
        goto LABEL_57;
      }
      *unint64_t v90 = v64;
LABEL_7:
      BOOL v38 = v71;
      sub_184CD40D8();
      a5 = v42;
      if ((v41 & 0x10000000000) != 0) {
        return;
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    uint64_t v69 = v31;
    swift_once();
    uint64_t v31 = v69;
    a4 = v66;
    uint64_t v30 = a13;
    a6 = v67;
  }
}

int64x2_t sub_184CE0FD4@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *a1 = result;
  a1[1] = result;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  a1[2].i64[0] = MEMORY[0x1E4FBC860];
  a1[2].i64[1] = v2;
  a1[3].i64[0] = v2;
  return result;
}

uint64_t sub_184CE0FF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *((void *)v1 + 6);
  long long v4 = v1[1];
  long long v10 = *v1;
  long long v11 = v4;
  long long v12 = v1[2];
  uint64_t v13 = v3;
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  __n128 v8 = *(__n128 *)(a1 + 32);
  uint64_t v9 = v2;
  return Region.isSuperset(of:)((uint64_t)v7, v8) & 1;
}

uint64_t sub_184CE1058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CE10A0(a1, (void (*)(_OWORD *))Region.formUnion(_:), a2);
}

uint64_t sub_184CE1070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CE127C(a1, Region.formIntersection(_:), a2);
}

uint64_t sub_184CE1088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CE10A0(a1, (void (*)(_OWORD *))Region.formSymmetricDifference(_:), a2);
}

uint64_t sub_184CE10A0@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v3 + 48);
  long long v8 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(void *)(a3 + 48) = v7;
  long long v9 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v9;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  a2(v11);
  swift_release();
  swift_release();

  return swift_release();
}

BOOL sub_184CE1130(float64_t *a1, double *a2)
{
  BOOL v2 = Region.insert(_:)(a1, a2);
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_184CE1184@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  Region.update(with:)(a1, a2);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_184CE11D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184CE120C(a1, a2, a3, (void (*)(void))Region.formUnion(_:));
}

uint64_t sub_184CE11F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184CE120C(a1, a2, a3, (void (*)(void))Region.formSymmetricDifference(_:));
}

uint64_t sub_184CE120C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_184CE1264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CE127C(a1, (uint64_t (*)(_OWORD *))Region.subtract(_:), a2);
}

uint64_t sub_184CE127C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_OWORD *)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(v3 + 48);
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(void *)(a3 + 48) = v5;
  long long v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a1 + 32);
  uint64_t v10 = v4;
  return a2(v9);
}

uint64_t sub_184CE12E0(long long *a1)
{
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *(void *)(v1 + 48);
  long long v4 = a1[1];
  long long v10 = *a1;
  long long v11 = v4;
  long long v12 = a1[2];
  uint64_t v13 = v2;
  long long v5 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v5;
  __n128 v8 = *(__n128 *)(v1 + 32);
  uint64_t v9 = v3;
  return Region.isSuperset(of:)((uint64_t)v7, v8) & 1;
}

BOOL sub_184CE134C()
{
  return (*v0 & 0xFFFFFFFFFFFFFLL) != 0 && (~*v0 & 0x7FF0000000000000) == 0;
}

uint64_t sub_184CE1374@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  int64x2_t v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v16 = v3;
  int64x2_t v17 = v3;
  unint64_t v4 = MEMORY[0x1E4FBC860];
  v18.i64[0] = MEMORY[0x1E4FBC860];
  v18.i64[1] = MEMORY[0x1E4FBC860];
  unint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    long long v6 = (void *)(a1 + 80);
    do
    {
      uint64_t v7 = *v6;
      long long v8 = *((_OWORD *)v6 - 2);
      v14[0] = *((_OWORD *)v6 - 3);
      v14[1] = v8;
      v14[2] = *((_OWORD *)v6 - 1);
      uint64_t v15 = v7;
      Region.formUnion(_:)(v14);
      v6 += 7;
      --v5;
    }
    while (v5);
    uint64_t result = swift_bridgeObjectRelease();
    int64x2_t v11 = v16;
    int64x2_t v10 = v17;
    int64x2_t v12 = v18;
    unint64_t v4 = v19;
  }
  else
  {
    int64x2_t v13 = v3;
    uint64_t result = swift_bridgeObjectRelease();
    int64x2_t v11 = v13;
    int64x2_t v12 = vdupq_n_s64(v4);
    int64x2_t v10 = v13;
  }
  *a2 = v11;
  a2[1] = v10;
  a2[2] = v12;
  a2[3].i64[0] = v4;
  return result;
}

uint64_t sub_184CE1444(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return *(void *)(a1 + 8 * v1 + 24);
  }
  else {
    return 0;
  }
}

uint64_t sub_184CE1468()
{
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;

  uint64_t v1 = v0[1];
  if (!v1)
  {
    uint64_t result = 0;
    goto LABEL_10;
  }
  uint64_t v2 = v1 - 1;
  if (__OFSUB__(v1, 1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 < 0 || v2 >= v1) {
    goto LABEL_12;
  }
  uint64_t v3 = v0[2];
  BOOL v4 = __OFADD__(v2, v3);
  unint64_t v5 = v2 + v3;
  if (v4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!HIDWORD(v5))
  {
    long long v6 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[3];
    long long v8 = *(void *)(*v0 + 8 * v2);
    uint64_t v9 = v5;
    v6(&v10, &v8);
    uint64_t result = v10;
LABEL_10:
    LOBYTE(v10) = v1 == 0;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

unint64_t sub_184CE1520(unint64_t result, int64_t a2, const void *a3, uint64_t a4)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  int64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v8 = result;
  unint64_t v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v11 = a4 - v9;
  if (__OFSUB__(a4, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *BOOL v4 = v6;
  if (!result || v12 > *(void *)(v6 + 24) >> 1)
  {
    if (v7 <= v12) {
      int64_t v14 = v7 + v11;
    }
    else {
      int64_t v14 = v7;
    }
    uint64_t result = (unint64_t)sub_184D01B74((char *)result, v14, 1);
    uint64_t v6 = *v4;
  }
  uint64_t v15 = (void *)(v6 + 32 + 8 * v8);
  if (!v11) {
    goto LABEL_19;
  }
  uint64_t v16 = *(void *)(v6 + 16);
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_28;
  }
  uint64_t result = (unint64_t)v15 + 8 * a4;
  unint64_t v19 = (const void *)(v6 + 32 + 8 * a2);
  if ((const void *)result != v19 || result >= (unint64_t)v19 + 8 * v18) {
    uint64_t result = (unint64_t)memmove((void *)result, v19, 8 * v18);
  }
  uint64_t v20 = *(void *)(v6 + 16);
  BOOL v17 = __OFADD__(v20, v11);
  uint64_t v21 = v20 + v11;
  if (v17) {
    goto LABEL_29;
  }
  *(void *)(v6 + 16) = v21;
LABEL_19:
  if (a4 < 1)
  {
LABEL_22:
    *BOOL v4 = v6;
    return result;
  }
  if (a3)
  {
    uint64_t result = (unint64_t)memcpy(v15, a3, 8 * a4);
    goto LABEL_22;
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t sub_184CE1654(unint64_t result, int64_t a2, const void *a3, uint64_t a4)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  int64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v8 = result;
  unint64_t v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v11 = a4 - v9;
  if (__OFSUB__(a4, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *BOOL v4 = v6;
  if (!result || v12 > *(void *)(v6 + 24) >> 1)
  {
    if (v7 <= v12) {
      int64_t v14 = v7 + v11;
    }
    else {
      int64_t v14 = v7;
    }
    uint64_t result = (unint64_t)sub_184D01B54((char *)result, v14, 1);
    uint64_t v6 = *v4;
  }
  uint64_t v15 = (void *)(v6 + 32 + 4 * v8);
  if (!v11) {
    goto LABEL_19;
  }
  uint64_t v16 = *(void *)(v6 + 16);
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_28;
  }
  uint64_t result = (unint64_t)v15 + 4 * a4;
  unint64_t v19 = (const void *)(v6 + 32 + 4 * a2);
  if ((const void *)result != v19 || result >= (unint64_t)v19 + 4 * v18) {
    uint64_t result = (unint64_t)memmove((void *)result, v19, 4 * v18);
  }
  uint64_t v20 = *(void *)(v6 + 16);
  BOOL v17 = __OFADD__(v20, v11);
  uint64_t v21 = v20 + v11;
  if (v17) {
    goto LABEL_29;
  }
  *(void *)(v6 + 16) = v21;
LABEL_19:
  if (a4 < 1)
  {
LABEL_22:
    *BOOL v4 = v6;
    return result;
  }
  if (a3)
  {
    uint64_t result = (unint64_t)memcpy(v15, a3, 4 * a4);
    goto LABEL_22;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_184CE1788(const void *a1, uint64_t a2)
{
  if (!a2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  if (a2 <= 0)
  {
    size_t v4 = 4 * a2;
    unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B948);
    size_t v4 = 4 * a2;
    unint64_t v5 = (void *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 29;
    }
    v5[2] = a2;
    v5[3] = 2 * (v7 >> 2);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

unsigned int *sub_184CE182C(unsigned int *result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      uint64_t v3 = result;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B950);
      size_t v4 = (void *)swift_allocObject();
      int64_t v5 = _swift_stdlib_malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 17;
      }
      v4[2] = a2;
      v4[3] = 2 * (v6 >> 4);
      if (sub_184D01118(v7, v4 + 4, a2, v3, a2) == (void *)a2) {
        return (unsigned int *)v4;
      }
      __break(1u);
    }
    return (unsigned int *)MEMORY[0x1E4FBC860];
  }
  __break(1u);
  return result;
}

uint64_t sub_184CE18D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 16);
  if (v3 <= 1) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = v3 >> 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B940);
  size_t v4 = (void *)swift_allocObject();
  int64_t v9 = _swift_stdlib_malloc_size(v4);
  uint64_t v10 = v9 - 32;
  if (v9 < 32) {
    uint64_t v10 = v9 - 1;
  }
  v4[2] = v8;
  v4[3] = 2 * (v10 >> 5);
  unint64_t v11 = sub_184D00F5C(&v13, v4 + 4, v8, a1, a2, a3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (v11 == (void *)v8) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_184CE19DC()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_184D01D8C(v1);
    *uint64_t v0 = result;
  }
  return result;
}

unint64_t sub_184CE1A18(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(a2 + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void sub_184CE1A34(long long *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, double **a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = *((void *)a1 + 6);
  LODWORD(v16) = *((_DWORD *)a1 + 14);
  char v17 = *((unsigned char *)a1 + 60);
  LODWORD(v18) = *((_DWORD *)a1 + 16);
  LOBYTE(v19) = *((unsigned char *)a1 + 68);
  char v20 = *((unsigned char *)a1 + 136);
  long long v21 = a1[1];
  long long v59 = *a1;
  long long v60 = v21;
  long long v61 = a1[2];
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = v15;
  int v65 = v16;
  char v66 = v17;
  int v67 = v18;
  char v68 = v19;
  long long v52 = *(long long *)((char *)a1 + 72);
  long long v69 = v52;
  long long v51 = *(long long *)((char *)a1 + 88);
  long long v70 = v51;
  long long v50 = *(long long *)((char *)a1 + 104);
  long long v71 = v50;
  long long v49 = *(long long *)((char *)a1 + 120);
  long long v72 = v49;
  char v55 = v20;
  char v73 = v20;
  sub_184CD40D8();
  if ((v24 & 0x10000000000) != 0) {
    return;
  }
  uint64_t v25 = v22;
  while (1)
  {
    uint64_t v16 = (v23 & 0x100000000) != 0 ? v16 : v23;
    v17 &= (v23 & 0x100000000uLL) >> 32;
    uint64_t v18 = (v24 & 0x100000000) != 0 ? v18 : v24;
    if (v17)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
    }
    else
    {
      if (v16) {
        uint64_t v29 = *(unsigned int *)(v52 + 4 * v16 - 4);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v27 = v51 + 8 * v29;
      if (!(void)v51) {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(unsigned int *)(v52 + 4 * v16) - v29;
    }
    v19 &= (v24 & 0x100000000uLL) >> 32;
    if (v19)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      if (v18) {
        uint64_t v32 = *(unsigned int *)(v50 + 4 * v18 - 4);
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t v30 = v49 + 8 * v32;
      if (!(void)v49) {
        uint64_t v30 = 0;
      }
      uint64_t v31 = *(unsigned int *)(v50 + 4 * v18) - v32;
    }
    uint64_t v33 = *a4;
    uint64_t v34 = a5 - *a4;
    if (a5 < *a4) {
      break;
    }
    uint64_t v74 = v27;
    uint64_t v75 = v28;
    if (a2) {
      uint64_t v35 = (double *)(a2 + 8 * v33);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v76 = v30;
    uint64_t v77 = v31;
    char v78 = v55;
    uint64_t v79 = 0x7FF8000000000000;
    __int16 v80 = 0;
    char v81 = 0;
    uint64_t v36 = sub_184D00CE0((uint64_t)v58, v35, v34);
    if (a6)
    {
      if (v36 < 0) {
        goto LABEL_54;
      }
      if (a7[1] == (double *)v36)
      {
        if (!v36) {
          goto LABEL_3;
        }
        uint64_t v37 = *a7;
        if (**a7 == *v35)
        {
          if (v36 == 1) {
            goto LABEL_3;
          }
          if (v37[1] == v35[1])
          {
            uint64_t v38 = v36 - 2;
            uint64_t v39 = v35 + 2;
            uint64_t v40 = v37 + 2;
            while (v38)
            {
              double v41 = *v40++;
              double v42 = v41;
              double v43 = *v39++;
              --v38;
              if (v42 != v43) {
                goto LABEL_40;
              }
            }
            goto LABEL_3;
          }
        }
      }
LABEL_40:
      *a7 = v35;
      a7[1] = (double *)v36;
    }
    uint64_t v44 = *a4 + v36;
    if (__OFADD__(*a4, v36)) {
      goto LABEL_50;
    }
    *a4 = v44;
    uint64_t v45 = *a10;
    *(void *)(a8 + 8 * *a10) = v25;
    BOOL v46 = __OFADD__(a13, v44);
    unint64_t v47 = a13 + v44;
    if (v46) {
      goto LABEL_51;
    }
    if ((v47 & 0x8000000000000000) != 0) {
      goto LABEL_52;
    }
    if (HIDWORD(v47)) {
      goto LABEL_53;
    }
    *(_DWORD *)(a11 + 4 * v45) = v47;
    BOOL v46 = __OFADD__(v45, 1);
    uint64_t v48 = v45 + 1;
    if (v46)
    {
      __break(1u);
      return;
    }
    *a10 = v48;
LABEL_3:
    sub_184CD40D8();
    uint64_t v25 = v26;
    if ((v24 & 0x10000000000) != 0) {
      return;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
}

void sub_184CE1D4C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, double **a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int v16 = *(_DWORD *)(a1 + 56);
  char v17 = *(unsigned char *)(a1 + 60);
  unsigned int v18 = *(_DWORD *)(a1 + 64);
  char v19 = *(unsigned char *)(a1 + 68);
  double v20 = *(double *)(a1 + 104);
  double v21 = *(double *)(a1 + 112);
  double v22 = *(double *)(a1 + 120);
  double v23 = *(double *)(a1 + 128);
  int v24 = *(unsigned __int8 *)(a1 + 136);
  long long v62 = *(_OWORD *)(a1 + 72);
  long long v61 = *(_OWORD *)(a1 + 88);
  sub_184CD40D8();
  if ((v27 & 0x10000000000) != 0) {
    return;
  }
  while (1)
  {
    if ((v26 & 0x100000000) == 0) {
      unsigned int v16 = v26;
    }
    v17 &= (v26 & 0x100000000uLL) >> 32;
    if ((v27 & 0x100000000) == 0) {
      unsigned int v18 = v27;
    }
    v19 &= (v27 & 0x100000000uLL) >> 32;
    if (v24) {
      char v28 = v17;
    }
    else {
      char v28 = v19;
    }
    if (v28)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      if (v22 > v25 || v23 <= v25) {
        goto LABEL_50;
      }
      goto LABEL_42;
    }
    if (v24) {
      uint64_t v34 = v16;
    }
    else {
      uint64_t v34 = v18;
    }
    if (v34) {
      uint64_t v35 = *(unsigned int *)(v62 + 4 * v34 - 4);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v32 = 0;
    uint64_t v31 = v61 + 8 * v35;
    if (!(void)v61) {
      uint64_t v31 = 0;
    }
    if (v22 > v25 || v23 <= v25)
    {
      uint64_t v29 = 0;
      goto LABEL_50;
    }
    uint64_t v30 = *(unsigned int *)(v62 + 4 * v34) - v35;
    if (v30 < 2)
    {
      if (v30 != 1)
      {
        uint64_t v29 = 0;
        goto LABEL_41;
      }
      uint64_t v29 = 0;
LABEL_38:
      if (*(double *)(v31 + 8 * v29) <= v20) {
        ++v29;
      }
      goto LABEL_41;
    }
    uint64_t v29 = 0;
    for (unint64_t i = v30; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(double *)(v31 + 8 * (v29 + (i >> 1))) <= v20) {
        v29 += i >> 1;
      }
    }
    if (v29 < v30) {
      goto LABEL_38;
    }
LABEL_41:
    if (v30 < v29) {
      goto LABEL_106;
    }
LABEL_42:
    uint64_t v37 = v30 - v29;
    uint64_t v32 = v29;
    if (v30 - v29 >= 2)
    {
      uint64_t v32 = v29;
      do
      {
        unint64_t v38 = (unint64_t)v37 >> 1;
        v37 -= (unint64_t)v37 >> 1;
        uint64_t v39 = v32 + v38;
        if (*(double *)(v31 + 8 * v39) < v21) {
          uint64_t v32 = v39;
        }
      }
      while (v37 > 1);
    }
    if (v32 < v30 && *(double *)(v31 + 8 * v32) < v21) {
      ++v32;
    }
LABEL_50:
    uint64_t v40 = *a4;
    uint64_t v41 = a5 - *a4;
    if (a5 < *a4) {
      break;
    }
    if (a2)
    {
      if (v29 >= 0) {
        uint64_t v42 = v29 & 1;
      }
      else {
        uint64_t v42 = -(v29 & 1);
      }
      uint64_t v43 = v29 - v42;
      if (__OFSUB__(v29, v42)) {
        goto LABEL_105;
      }
      uint64_t v44 = (double *)(a2 + 8 * v40);
      if (!v41) {
        goto LABEL_66;
      }
      uint64_t v45 = v32 & 1;
      if (v32 < 0) {
        uint64_t v45 = -v45;
      }
      BOOL v46 = __OFADD__(v32, v45);
      uint64_t v47 = v32 + v45;
      char v48 = v46;
      if (v41 < 1) {
        goto LABEL_107;
      }
      if (v48) {
        goto LABEL_108;
      }
      if (v43 == v47)
      {
        uint64_t v41 = 0;
LABEL_66:
        if ((a6 & 1) == 0) {
          goto LABEL_91;
        }
      }
      else
      {
        uint64_t v49 = v47 + v42 - v29;
        uint64_t v50 = a5 - 1 - v40;
        long long v51 = v44;
        while (1)
        {
          double v52 = v20;
          if (v43 >= v29)
          {
            double v52 = v21;
            if (v43 < v32) {
              double v52 = *(double *)(v31 + 8 * v43);
            }
          }
          if (v43 >= v47)
          {
            __break(1u);
            goto LABEL_99;
          }
          *long long v51 = v52;
          if (!v50) {
            break;
          }
          ++v43;
          ++v51;
          --v50;
          if (v47 == v43)
          {
            uint64_t v41 = v49;
            break;
          }
        }
        if ((a6 & 1) == 0) {
          goto LABEL_91;
        }
        if (v41 < 0) {
          goto LABEL_109;
        }
      }
      if (a7[1] == (double *)v41)
      {
        if (!v41) {
          goto LABEL_3;
        }
        double v53 = *a7;
        if (**a7 == *v44)
        {
          if (v41 == 1) {
            goto LABEL_3;
          }
          if (v53[1] == v44[1])
          {
            uint64_t v54 = 2;
            while (v41 != v54)
            {
              double v55 = v53[v54];
              double v56 = v44[v54++];
              if (v55 != v56) {
                goto LABEL_89;
              }
            }
            goto LABEL_3;
          }
        }
      }
      goto LABEL_89;
    }
    if ((a6 & 1) == 0)
    {
      uint64_t v41 = 0;
      goto LABEL_91;
    }
    if (!a7[1]) {
      goto LABEL_3;
    }
    uint64_t v41 = 0;
    uint64_t v44 = 0;
LABEL_89:
    *a7 = v44;
    a7[1] = (double *)v41;
LABEL_91:
    uint64_t v57 = *a4 + v41;
    if (__OFADD__(*a4, v41)) {
      goto LABEL_100;
    }
    *a4 = v57;
    uint64_t v58 = *a10;
    *(double *)(a8 + 8 * *a10) = v25;
    BOOL v46 = __OFADD__(a13, v57);
    unint64_t v59 = a13 + v57;
    if (v46) {
      goto LABEL_101;
    }
    if ((v59 & 0x8000000000000000) != 0) {
      goto LABEL_102;
    }
    if (HIDWORD(v59)) {
      goto LABEL_103;
    }
    *(_DWORD *)(a11 + 4 * v58) = v59;
    BOOL v46 = __OFADD__(v58, 1);
    uint64_t v60 = v58 + 1;
    if (v46) {
      goto LABEL_104;
    }
    *a10 = v60;
LABEL_3:
    sub_184CD40D8();
    if ((v27 & 0x10000000000) != 0) {
      return;
    }
  }
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
}

unint64_t sub_184CE21A4()
{
  unint64_t result = qword_1E8F8B938;
  if (!qword_1E8F8B938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B938);
  }
  return result;
}

uint64_t sub_184CE21F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_184CE22A8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, unsigned char *))sub_184CD4004, a3);
}

uint64_t sub_184CE2224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_184CE22A8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, unsigned char *))sub_184CD3F9C, a3);
}

uint64_t sub_184CE2250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_184CE22A8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, unsigned char *))sub_184CD3DF0, a3);
}

uint64_t sub_184CE227C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_184CE22A8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, unsigned char *))sub_184CD3D28, a3);
}

uint64_t sub_184CE22A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void, unsigned char *)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(a1, a2, **(void **)(v4 + 16), v8);
  if (!v5) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_184CE22F0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  unint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t destroy for Region()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Region(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Region(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Region(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Region(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Region(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Region()
{
  return &type metadata for Region;
}

uint64_t destroy for Region.SubBounds()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *_s12CoreGraphics6RegionV9SubBoundsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Region.SubBounds(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Region.SubBounds(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Region.SubBounds(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Region.SubBounds(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Region.SubBounds()
{
  return &type metadata for Region.SubBounds;
}

uint64_t sub_184CE2780()
{
  return sub_184CEC660(&qword_1E8F8B958, &qword_1E8F8B960);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_184CE2804(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < a3 || (a3 | result) < 0 || a5 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v5 <= 0 && v5 > a2) {
    return 0;
  }
LABEL_11:
  BOOL v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || result > a5) {
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_184CE287C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  if (result) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = a2;
  }
  if (v8 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v9 = *(void *)(a6 + 16);
  BOOL v10 = *(void *)(a7 + 16) < a4;
  BOOL v11 = v9 == a3;
  BOOL v12 = v9 < a3;
  if (!v11) {
    BOOL v10 = v12;
  }
  if (v10) {
    goto LABEL_12;
  }
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t sub_184CE2908(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = *(unsigned int *)(a2 + 4 * (result - 1));
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (a4) {
    return a4 + 8 * v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_184CE293C(uint64_t result, uint64_t a2)
{
  uint64_t v5 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else if (v5 < 1)
  {
    return 0;
  }
  else
  {
    void v7[3] = v3;
    v7[4] = v4;
    BOOL v6 = (~*v2 & 0x7FF0000000000000) != 0 || (*v2 & 0xFFFFFFFFFFFFFLL) == 0;
    if (v6 && !*(void *)(v2[4] + 16))
    {
      return 2;
    }
    else
    {
      sub_184CEBA38(v2[5] + 32, *(void *)(v2[5] + 16), v5, result, a2, v7);
      return v7[0];
    }
  }
  return result;
}

uint64_t sub_184CE29D4(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, char a13, __n128 *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  double v316 = *(double *)&a8;
  int v314 = a7;
  double v311 = *(double *)&a6;
  uint64_t v26 = a14;
  uint64_t v338 = *MEMORY[0x1E4F143B8];
  uint64_t isStackAllocationSafe = sub_184CEB8F0();
  unint64_t v29 = a14[2].n128_u64[1];
  unint64_t v30 = *(void *)(v29 + 16);
  BOOL v31 = v30 == a2;
  if (a1)
  {
    unint64_t v32 = a1 - 1;
    if (__OFSUB__(a1, 1))
    {
LABEL_314:
      __break(1u);
      goto LABEL_315;
    }
    if (v32 >= v30)
    {
LABEL_315:
      __break(1u);
      goto LABEL_316;
    }
    unint64_t v33 = *(unsigned int *)(v29 + 32 + 4 * v32);
    if (a1 <= 1)
    {
      unint64_t v35 = 0;
      unint64_t v34 = 0;
      BOOL v31 = 0;
      if (!a2) {
        goto LABEL_14;
      }
    }
    else
    {
      if (a1 - 2 >= v30)
      {
LABEL_341:
        __break(1u);
LABEL_342:
        __break(1u);
        goto LABEL_343;
      }
      BOOL v31 = 0;
      unint64_t v34 = *(unsigned int *)(v29 + 32 + 4 * (a1 - 2));
      if (!a2)
      {
        unint64_t v35 = 0;
        goto LABEL_14;
      }
    }
  }
  else
  {
    unint64_t v35 = 0;
    unint64_t v34 = 0;
    unint64_t v33 = 0;
    if (!a2) {
      goto LABEL_14;
    }
  }
  unint64_t v36 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
LABEL_316:
    __break(1u);
    goto LABEL_317;
  }
  if (v36 >= v30)
  {
LABEL_317:
    __break(1u);
    goto LABEL_318;
  }
  unint64_t v35 = *(unsigned int *)(v29 + 4 * v36 + 32);
LABEL_14:
  unint64_t v324 = v33;
  int v323 = a3;
  int64_t v325 = a2;
  unint64_t v322 = v35;
  uint64_t v37 = a4 * a5;
  if ((unsigned __int128)(a4 * (__int128)a5) >> 64 != (a4 * a5) >> 63)
  {
LABEL_313:
    __break(1u);
    goto LABEL_314;
  }
  if (a4 < 0)
  {
LABEL_318:
    __break(1u);
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
LABEL_321:
    __break(1u);
LABEL_322:
    __break(1u);
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
LABEL_327:
    __break(1u);
LABEL_328:
    __break(1u);
LABEL_329:
    __break(1u);
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
    goto LABEL_336;
  }
  if ((unint64_t)(a4 + 0x1000000000000000) >> 61) {
    goto LABEL_319;
  }
  unint64_t v313 = v30;
  uint64_t v320 = a16;
  uint64_t v328 = a15;
  uint64_t v38 = 4 * a4;
  uint64_t v326 = a14;
  unint64_t v318 = a1;
  uint64_t v317 = (char **)&a14[2].n128_u64[1];
  BOOL v319 = v31;
  uint64_t v321 = a17;
  if (8 * a4 >= 1025)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v327 = (char *)v66;
      if ((unint64_t)(a4 + 0x2000000000000000) >> 62)
      {
LABEL_368:
        __break(1u);
        goto LABEL_369;
      }
      if (v38 < 1025 || (uint64_t v66 = swift_stdlib_isStackAllocationSafe(), (v66 & 1) != 0))
      {
        uint64_t v68 = MEMORY[0x1F4188790](v66, v67);
        uint64_t v315 = (char *)v308 - v70;
        if (v37 < 0)
        {
LABEL_369:
          __break(1u);
          goto LABEL_370;
        }
        if ((unint64_t)(v37 + 0x1000000000000000) >> 61)
        {
LABEL_370:
          __break(1u);
          goto LABEL_371;
        }
        uint64_t v312 = (__n128 *)v308;
        if (8 * v37 < 1025 || (uint64_t v68 = swift_stdlib_isStackAllocationSafe(), (v68 & 1) != 0))
        {
          uint64_t v309 = (__n128 *)v308;
          uint64_t v71 = MEMORY[0x1F4188790](v68, v69);
          char v73 = (__n128 *)((char *)v308 - v72);
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          unint64_t v74 = v324;
          uint64_t v75 = v324 - v34;
          if (v324 < v34)
          {
LABEL_352:
            __break(1u);
            goto LABEL_353;
          }
          unint64_t v76 = v34;
          uint64_t v310 = (__n128 *)v308;
          unint64_t v77 = a14[3].n128_u64[0];
          __n128 v78 = *a14;
          __n128 v79 = a14[1];
          unint64_t v80 = a14[2].n128_u64[0];
          unint64_t v81 = a14[2].n128_u64[1];
          uint64_t v336 = v77 + 8 * v76 + 32;
          uint64_t v337 = v75;
          __n128 v329 = v78;
          __n128 v330 = v79;
          unint64_t v331 = v80;
          unint64_t v332 = v81;
          unint64_t v333 = v77;
          MEMORY[0x1F4188790](v71, v78);
          uint64_t v296 = v73;
          uint64_t v297 = a4 * a5;
          uint64_t v298 = &v334;
          uint64_t v299 = a4 * a5;
          char v300 = v323 & 1;
          uint64_t v301 = &v336;
          uint64_t v302 = v327;
          uint64_t v303 = a4;
          uint64_t v304 = &v335;
          uint64_t v82 = v315;
          uint64_t v305 = v315;
          uint64_t v306 = a4;
          unint64_t v307 = v74;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184CDEBA4((uint64_t)&v329, (uint64_t (*)(unsigned char **))sub_184CEC440, a9, a10, a11, a12, (uint64_t)v295, v328, v320, v321);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v83 = v334;
          if (v334 < 0)
          {
LABEL_355:
            __break(1u);
            goto LABEL_356;
          }
          uint64_t v26 = v326;
          unint64_t v65 = v318;
          uint64_t v64 = v317;
          unint64_t v84 = v322;
          if (v319)
          {
            uint64_t v85 = sub_184C9D670(v73, v334);
            swift_release();
            a14[3].n128_u64[0] = (unint64_t)v85;
            uint64_t v86 = v335;
            if (v335 < 0)
            {
LABEL_358:
              __break(1u);
              goto LABEL_359;
            }
            uint64_t v87 = sub_184C9D670(v327, v335);
            swift_release();
            a14[2].n128_u64[0] = (unint64_t)v87;
            __int16 v88 = (char *)sub_184CE1788(v82, v86);
            swift_release();
            *uint64_t v64 = v88;
            int64_t v60 = v325;
          }
          else
          {
            if (v322 < v74)
            {
LABEL_379:
              __break(1u);
              goto LABEL_380;
            }
            sub_184CE1520(v74, v322, v73, v334);
            uint64_t v86 = v335;
            if (v335 < 0) {
              goto LABEL_358;
            }
            __n128 v137 = v82;
            int64_t v60 = v325;
            sub_184CE1520(v65, v325, v327, v335);
            sub_184CE1654(v65, v60, v137, v86);
          }
          unint64_t v138 = v74 + v83;
          if (__OFADD__(v74, v83))
          {
LABEL_361:
            __break(1u);
            goto LABEL_362;
          }
          unint64_t v139 = v138 - v84;
          if (__OFSUB__(v138, v84))
          {
LABEL_364:
            __break(1u);
            goto LABEL_365;
          }
          if (v139)
          {
            int64_t v140 = v65 + v86;
            if (__OFADD__(v65, v86))
            {
LABEL_373:
              __break(1u);
              goto LABEL_374;
            }
            uint64_t v141 = *v64;
            int64_t v142 = *((void *)*v64 + 2);
            if (v142 < v140)
            {
LABEL_374:
              __break(1u);
              goto LABEL_375;
            }
            if (v140 != v142)
            {
              if (v140 >= v142)
              {
LABEL_397:
                __break(1u);
                goto LABEL_398;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v141 = sub_184D01D8C((uint64_t)v141);
              }
              do
              {
                if (v140 < 0) {
                  goto LABEL_298;
                }
                if ((unint64_t)v140 >= *((void *)v141 + 2)) {
                  goto LABEL_301;
                }
                int64x2_t v143 = &v141[4 * v140];
                uint64_t v144 = *((unsigned int *)v143 + 8);
                BOOL v96 = __OFADD__(v144, v139);
                unint64_t v145 = v144 + v139;
                if (v96) {
                  goto LABEL_304;
                }
                if ((v145 & 0x8000000000000000) != 0) {
                  goto LABEL_307;
                }
                if (HIDWORD(v145)) {
                  goto LABEL_310;
                }
                ++v140;
                *((_DWORD *)v143 + 8) = v145;
              }
              while (v142 != v140);
              *uint64_t v64 = v141;
            }
          }
        }
        else
        {
          uint64_t v184 = swift_slowAlloc();
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          unint64_t v185 = v324;
          uint64_t v186 = v324 - v34;
          if (v324 < v34)
          {
LABEL_383:
            __break(1u);
            goto LABEL_384;
          }
          unint64_t v187 = v34;
          unint64_t v188 = v326 + 3;
          uint64_t v189 = v326[3].n128_i64[0];
          __n128 v190 = *v326;
          __n128 v191 = v326[1];
          unint64_t v192 = v326 + 2;
          uint64_t v193 = v326[2].n128_i64[0];
          uint64_t v194 = v326[2].n128_i64[1];
          uint64_t v336 = v189 + 8 * v187 + 32;
          uint64_t v337 = v186;
          __n128 v329 = v190;
          __n128 v330 = v191;
          unint64_t v331 = v193;
          unint64_t v332 = v194;
          unint64_t v333 = v189;
          uint64_t v310 = (__n128 *)MEMORY[0x1F4188790](v184, v190);
          uint64_t v296 = v310;
          uint64_t v297 = v37;
          uint64_t v298 = &v334;
          uint64_t v299 = v37;
          char v300 = v323 & 1;
          uint64_t v301 = &v336;
          uint64_t v302 = v327;
          uint64_t v303 = a4;
          uint64_t v304 = &v335;
          v195 = v315;
          uint64_t v305 = v315;
          uint64_t v306 = a4;
          unint64_t v307 = v185;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184CDEBA4((uint64_t)&v329, (uint64_t (*)(unsigned char **))sub_184CEC440, a9, a10, a11, a12, (uint64_t)v295, v328, v320, v321);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v196 = v334;
          if (v334 < 0)
          {
LABEL_386:
            __break(1u);
            goto LABEL_387;
          }
          uint64_t v26 = v326;
          unint64_t v65 = v318;
          uint64_t v64 = v317;
          unint64_t v197 = v322;
          if (v319)
          {
            unint64_t v198 = sub_184C9D670(v310, v334);
            swift_release();
            v188->n128_u64[0] = (unint64_t)v198;
            uint64_t v199 = v335;
            if (v335 < 0)
            {
LABEL_389:
              __break(1u);
              goto LABEL_390;
            }
            int64_t v200 = sub_184C9D670(v327, v335);
            swift_release();
            v192->n128_u64[0] = (unint64_t)v200;
            uint64_t v201 = (char *)sub_184CE1788(v195, v199);
            swift_release();
            *uint64_t v64 = v201;
            int64_t v60 = v325;
          }
          else
          {
            if (v322 < v185)
            {
LABEL_409:
              __break(1u);
              goto LABEL_410;
            }
            sub_184CE1520(v185, v322, v310, v334);
            uint64_t v199 = v335;
            if (v335 < 0) {
              goto LABEL_389;
            }
            int64x2_t v227 = v195;
            int64_t v60 = v325;
            sub_184CE1520(v65, v325, v327, v335);
            sub_184CE1654(v65, v60, v227, v199);
          }
          unint64_t v228 = v185 + v196;
          BOOL v229 = v310;
          if (__OFADD__(v185, v196))
          {
LABEL_393:
            __break(1u);
            goto LABEL_394;
          }
          unint64_t v230 = v228 - v197;
          if (__OFSUB__(v228, v197))
          {
LABEL_394:
            __break(1u);
            goto LABEL_395;
          }
          if (v230)
          {
            int64_t v231 = v65 + v199;
            if (__OFADD__(v65, v199))
            {
LABEL_404:
              __break(1u);
              goto LABEL_405;
            }
            unint64_t v232 = *v64;
            int64_t v233 = *((void *)*v64 + 2);
            if (v233 < v231)
            {
LABEL_405:
              __break(1u);
              goto LABEL_406;
            }
            if (v231 != v233)
            {
              if (v231 >= v233)
              {
LABEL_417:
                __break(1u);
                goto LABEL_418;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v232 = sub_184D01D8C((uint64_t)v232);
              }
              BOOL v229 = v310;
              do
              {
                if (v231 < 0) {
                  goto LABEL_321;
                }
                if ((unint64_t)v231 >= *((void *)v232 + 2)) {
                  goto LABEL_324;
                }
                uint64_t v234 = &v232[4 * v231];
                uint64_t v235 = *((unsigned int *)v234 + 8);
                BOOL v96 = __OFADD__(v235, v230);
                unint64_t v236 = v235 + v230;
                if (v96) {
                  goto LABEL_327;
                }
                if ((v236 & 0x8000000000000000) != 0) {
                  goto LABEL_330;
                }
                if (HIDWORD(v236)) {
                  goto LABEL_333;
                }
                ++v231;
                *((_DWORD *)v234 + 8) = v236;
              }
              while (v233 != v231);
              *uint64_t v64 = v232;
            }
          }
          MEMORY[0x18532B810](v229, -1, -1);
        }
      }
      else
      {
        uint64_t v165 = swift_slowAlloc();
        uint64_t v315 = (char *)v165;
        if (v37 < 0)
        {
LABEL_400:
          __break(1u);
          goto LABEL_401;
        }
        if ((unint64_t)(v37 + 0x1000000000000000) >> 61)
        {
LABEL_401:
          __break(1u);
          goto LABEL_402;
        }
        if (8 * v37 < 1025 || (uint64_t v165 = swift_stdlib_isStackAllocationSafe(), (v165 & 1) != 0))
        {
          uint64_t v310 = (__n128 *)v308;
          uint64_t v167 = MEMORY[0x1F4188790](v165, v166);
          BOOL v169 = (__n128 *)((char *)v308 - v168);
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          unint64_t v170 = v324;
          uint64_t v171 = v324 - v34;
          if (v324 < v34)
          {
LABEL_382:
            __break(1u);
            goto LABEL_383;
          }
          unint64_t v172 = v34;
          uint64_t v312 = (__n128 *)v308;
          unint64_t v173 = a14[3].n128_u64[0];
          __n128 v174 = *a14;
          __n128 v175 = a14[1];
          unint64_t v176 = a14[2].n128_u64[0];
          unint64_t v177 = a14[2].n128_u64[1];
          uint64_t v336 = v173 + 8 * v172 + 32;
          uint64_t v337 = v171;
          __n128 v329 = v174;
          __n128 v330 = v175;
          unint64_t v331 = v176;
          unint64_t v332 = v177;
          unint64_t v333 = v173;
          MEMORY[0x1F4188790](v167, v174);
          uint64_t v296 = v169;
          uint64_t v297 = a4 * a5;
          uint64_t v298 = &v334;
          uint64_t v299 = a4 * a5;
          char v300 = v323 & 1;
          uint64_t v301 = &v336;
          uint64_t v302 = v327;
          uint64_t v303 = a4;
          uint64_t v304 = &v335;
          uint64_t v305 = v315;
          uint64_t v306 = a4;
          unint64_t v307 = v170;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184CDEBA4((uint64_t)&v329, (uint64_t (*)(unsigned char **))sub_184CEC440, a9, a10, a11, a12, (uint64_t)v295, v328, v320, v321);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v178 = v334;
          if (v334 < 0)
          {
LABEL_385:
            __break(1u);
            goto LABEL_386;
          }
          uint64_t v26 = v326;
          unint64_t v65 = v318;
          uint64_t v64 = v317;
          unint64_t v179 = v322;
          if (v319)
          {
            unint64_t v180 = sub_184C9D670(v169, v334);
            swift_release();
            a14[3].n128_u64[0] = (unint64_t)v180;
            uint64_t v181 = v335;
            if (v335 < 0)
            {
LABEL_388:
              __break(1u);
              goto LABEL_389;
            }
            int64_t v182 = sub_184C9D670(v327, v335);
            swift_release();
            a14[2].n128_u64[0] = (unint64_t)v182;
            unint64_t v183 = (char *)sub_184CE1788(v315, v181);
            swift_release();
            *uint64_t v64 = v183;
            int64_t v60 = v325;
          }
          else
          {
            if (v322 < v170)
            {
LABEL_408:
              __break(1u);
              goto LABEL_409;
            }
            sub_184CE1520(v170, v322, v169, v334);
            uint64_t v181 = v335;
            if (v335 < 0) {
              goto LABEL_388;
            }
            int64_t v60 = v325;
            sub_184CE1520(v65, v325, v327, v335);
            sub_184CE1654(v65, v60, v315, v181);
          }
          unint64_t v219 = v170 + v178;
          if (__OFADD__(v170, v178))
          {
LABEL_391:
            __break(1u);
            goto LABEL_392;
          }
          unint64_t v220 = v219 - v179;
          if (__OFSUB__(v219, v179))
          {
LABEL_392:
            __break(1u);
            goto LABEL_393;
          }
          if (v220)
          {
            int64_t v221 = v65 + v181;
            if (__OFADD__(v65, v181))
            {
LABEL_402:
              __break(1u);
              goto LABEL_403;
            }
            uint64_t v222 = *v64;
            int64_t v223 = *((void *)*v64 + 2);
            if (v223 < v221)
            {
LABEL_403:
              __break(1u);
              goto LABEL_404;
            }
            if (v221 != v223)
            {
              if (v221 >= v223)
              {
LABEL_416:
                __break(1u);
                goto LABEL_417;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v222 = sub_184D01D8C((uint64_t)v222);
              }
              do
              {
                if (v221 < 0) {
                  goto LABEL_320;
                }
                if ((unint64_t)v221 >= *((void *)v222 + 2)) {
                  goto LABEL_323;
                }
                uint64_t v224 = &v222[4 * v221];
                uint64_t v225 = *((unsigned int *)v224 + 8);
                BOOL v96 = __OFADD__(v225, v220);
                unint64_t v226 = v225 + v220;
                if (v96) {
                  goto LABEL_326;
                }
                if ((v226 & 0x8000000000000000) != 0) {
                  goto LABEL_329;
                }
                if (HIDWORD(v226)) {
                  goto LABEL_332;
                }
                ++v221;
                *((_DWORD *)v224 + 8) = v226;
              }
              while (v223 != v221);
              *uint64_t v64 = v222;
            }
          }
        }
        else
        {
          uint64_t v247 = swift_slowAlloc();
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          unint64_t v248 = v324;
          uint64_t v249 = v324 - v34;
          if (v324 < v34)
          {
LABEL_411:
            __break(1u);
            goto LABEL_412;
          }
          unint64_t v250 = v34;
          uint64_t v251 = v326 + 3;
          uint64_t v252 = v326[3].n128_i64[0];
          __n128 v253 = *v326;
          __n128 v254 = v326[1];
          int64_t v255 = v326 + 2;
          uint64_t v256 = v326[2].n128_i64[0];
          uint64_t v257 = v326[2].n128_i64[1];
          uint64_t v336 = v252 + 8 * v250 + 32;
          uint64_t v337 = v249;
          __n128 v329 = v253;
          __n128 v330 = v254;
          unint64_t v331 = v256;
          unint64_t v332 = v257;
          unint64_t v333 = v252;
          uint64_t v312 = (__n128 *)MEMORY[0x1F4188790](v247, v253);
          uint64_t v296 = v312;
          uint64_t v297 = v37;
          uint64_t v298 = &v334;
          uint64_t v299 = v37;
          char v300 = v323 & 1;
          uint64_t v301 = &v336;
          uint64_t v302 = v327;
          uint64_t v303 = a4;
          uint64_t v304 = &v335;
          uint64_t v305 = v315;
          uint64_t v306 = a4;
          unint64_t v307 = v324;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184CDEBA4((uint64_t)&v329, (uint64_t (*)(unsigned char **))sub_184CEC440, a9, a10, a11, a12, (uint64_t)v295, v328, v320, v321);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v258 = v334;
          if (v334 < 0)
          {
LABEL_412:
            __break(1u);
            goto LABEL_413;
          }
          uint64_t v26 = v326;
          unint64_t v65 = v318;
          uint64_t v64 = v317;
          unint64_t v259 = v322;
          if (v319)
          {
            uint64_t v260 = sub_184C9D670(v312, v334);
            swift_release();
            v251->n128_u64[0] = (unint64_t)v260;
            uint64_t v261 = v335;
            if (v335 < 0)
            {
LABEL_413:
              __break(1u);
              goto LABEL_414;
            }
            uint64_t v262 = sub_184C9D670(v327, v335);
            swift_release();
            v255->n128_u64[0] = (unint64_t)v262;
            unint64_t v263 = (char *)sub_184CE1788(v315, v261);
            swift_release();
            *uint64_t v64 = v263;
            int64_t v60 = v325;
          }
          else
          {
            if (v322 < v248)
            {
LABEL_421:
              __break(1u);
LABEL_422:
              __break(1u);
            }
            sub_184CE1520(v248, v322, v312, v334);
            uint64_t v261 = v335;
            if (v335 < 0) {
              goto LABEL_413;
            }
            int64_t v60 = v325;
            sub_184CE1520(v65, v325, v327, v335);
            sub_184CE1654(v65, v60, v315, v261);
          }
          unint64_t v264 = v248 + v258;
          __n128 v265 = v312;
          if (__OFADD__(v248, v258))
          {
LABEL_414:
            __break(1u);
            goto LABEL_415;
          }
          unint64_t v266 = v264 - v259;
          if (__OFSUB__(v264, v259))
          {
LABEL_415:
            __break(1u);
            goto LABEL_416;
          }
          if (v266)
          {
            int64_t v267 = v65 + v261;
            if (__OFADD__(v65, v261))
            {
LABEL_419:
              __break(1u);
              goto LABEL_420;
            }
            uint64_t v268 = *v64;
            int64_t v269 = *((void *)*v64 + 2);
            if (v269 < v267)
            {
LABEL_420:
              __break(1u);
              goto LABEL_421;
            }
            if (v267 != v269)
            {
              if (v267 >= v269) {
                goto LABEL_422;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v268 = sub_184D01D8C((uint64_t)v268);
              }
              __n128 v265 = v312;
              do
              {
                if (v267 < 0) {
                  goto LABEL_347;
                }
                if ((unint64_t)v267 >= *((void *)v268 + 2)) {
                  goto LABEL_348;
                }
                unint64_t v270 = &v268[4 * v267];
                uint64_t v271 = *((unsigned int *)v270 + 8);
                BOOL v96 = __OFADD__(v271, v266);
                unint64_t v272 = v271 + v266;
                if (v96) {
                  goto LABEL_349;
                }
                if ((v272 & 0x8000000000000000) != 0) {
                  goto LABEL_350;
                }
                if (HIDWORD(v272)) {
                  goto LABEL_351;
                }
                ++v267;
                *((_DWORD *)v270 + 8) = v272;
              }
              while (v269 != v267);
              *uint64_t v64 = v268;
            }
          }
          MEMORY[0x18532B810](v265, -1, -1);
        }
        MEMORY[0x18532B810](v315, -1, -1);
      }
      MEMORY[0x18532B810](v327, -1, -1);
      goto LABEL_248;
    }
  }
  uint64_t v39 = MEMORY[0x1F4188790](isStackAllocationSafe, v28);
  uint64_t v327 = (char *)v308 - v41;
  if ((unint64_t)(a4 + 0x2000000000000000) >> 62) {
    goto LABEL_340;
  }
  uint64_t v312 = (__n128 *)v308;
  if (v38 >= 1025)
  {
    uint64_t v39 = swift_stdlib_isStackAllocationSafe();
    if ((v39 & 1) == 0)
    {
      uint64_t v98 = swift_slowAlloc();
      uint64_t v315 = (char *)v98;
      if (v37 < 0)
      {
LABEL_371:
        __break(1u);
        goto LABEL_372;
      }
      if ((unint64_t)(v37 + 0x1000000000000000) >> 61)
      {
LABEL_372:
        __break(1u);
        goto LABEL_373;
      }
      if (8 * v37 < 1025 || (uint64_t v98 = swift_stdlib_isStackAllocationSafe(), (v98 & 1) != 0))
      {
        uint64_t v309 = (__n128 *)v308;
        uint64_t v100 = MEMORY[0x1F4188790](v98, v99);
        unint64_t v102 = (__n128 *)((char *)v308 - v101);
        uint64_t v334 = 0;
        uint64_t v335 = 0;
        unint64_t v103 = v324;
        uint64_t v104 = v324 - v34;
        if (v324 < v34)
        {
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
          goto LABEL_355;
        }
        unint64_t v105 = v34;
        uint64_t v310 = (__n128 *)v308;
        int64x2_t v106 = v326 + 3;
        uint64_t v107 = v326[3].n128_i64[0];
        __n128 v108 = *v326;
        __n128 v109 = v326[1];
        unint64_t v110 = v326 + 2;
        uint64_t v111 = v326[2].n128_i64[0];
        uint64_t v112 = v326[2].n128_i64[1];
        uint64_t v336 = v107 + 8 * v105 + 32;
        uint64_t v337 = v104;
        __n128 v329 = v108;
        __n128 v330 = v109;
        unint64_t v331 = v111;
        unint64_t v332 = v112;
        unint64_t v333 = v107;
        MEMORY[0x1F4188790](v100, v108);
        uint64_t v296 = v102;
        uint64_t v297 = a4 * a5;
        uint64_t v298 = &v334;
        uint64_t v299 = a4 * a5;
        char v300 = v323 & 1;
        uint64_t v301 = &v336;
        uint64_t v302 = v327;
        uint64_t v303 = a4;
        uint64_t v304 = &v335;
        uint64_t v305 = v315;
        uint64_t v306 = a4;
        unint64_t v307 = v103;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CDEBA4((uint64_t)&v329, (uint64_t (*)(unsigned char **))sub_184CEC440, a9, a10, a11, a12, (uint64_t)v295, v328, v320, v321);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v113 = v334;
        if (v334 < 0)
        {
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
          goto LABEL_358;
        }
        unint64_t v114 = v103;
        uint64_t v26 = v326;
        unint64_t v65 = v318;
        uint64_t v64 = v317;
        unint64_t v115 = v322;
        if (v319)
        {
          unint64_t v116 = sub_184C9D670(v102, v334);
          swift_release();
          v106->n128_u64[0] = (unint64_t)v116;
          uint64_t v117 = v335;
          if (v335 < 0)
          {
LABEL_359:
            __break(1u);
            goto LABEL_360;
          }
          unint64_t v118 = sub_184C9D670(v327, v335);
          swift_release();
          v110->n128_u64[0] = (unint64_t)v118;
          uint64_t v119 = (char *)sub_184CE1788(v315, v117);
          swift_release();
          *uint64_t v64 = v119;
          int64_t v120 = v325;
        }
        else
        {
          if (v322 < v114)
          {
LABEL_380:
            __break(1u);
            goto LABEL_381;
          }
          sub_184CE1520(v114, v322, v102, v334);
          uint64_t v117 = v335;
          if (v335 < 0) {
            goto LABEL_359;
          }
          int64_t v146 = v325;
          sub_184CE1520(v65, v325, v327, v335);
          int64_t v120 = v146;
          sub_184CE1654(v65, v146, v315, v117);
        }
        unint64_t v147 = v114 + v113;
        if (__OFADD__(v114, v113))
        {
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
          goto LABEL_364;
        }
        unint64_t v148 = v147 - v115;
        if (__OFSUB__(v147, v115))
        {
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
          goto LABEL_368;
        }
        int64_t v60 = v120;
        if (v148)
        {
          int64_t v149 = v65 + v117;
          if (__OFADD__(v65, v117))
          {
LABEL_375:
            __break(1u);
            goto LABEL_376;
          }
          uint64_t v150 = *v64;
          int64_t v151 = *((void *)*v64 + 2);
          if (v151 < v149)
          {
LABEL_376:
            __break(1u);
            goto LABEL_377;
          }
          if (v149 != v151)
          {
            if (v149 >= v151)
            {
LABEL_398:
              __break(1u);
              goto LABEL_399;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v150 = sub_184D01D8C((uint64_t)v150);
            }
            do
            {
              if (v149 < 0) {
                goto LABEL_299;
              }
              if ((unint64_t)v149 >= *((void *)v150 + 2)) {
                goto LABEL_302;
              }
              uint64_t v152 = &v150[4 * v149];
              uint64_t v153 = *((unsigned int *)v152 + 8);
              BOOL v96 = __OFADD__(v153, v148);
              unint64_t v154 = v153 + v148;
              if (v96) {
                goto LABEL_305;
              }
              if ((v154 & 0x8000000000000000) != 0) {
                goto LABEL_308;
              }
              if (HIDWORD(v154)) {
                goto LABEL_311;
              }
              ++v149;
              *((_DWORD *)v152 + 8) = v154;
            }
            while (v151 != v149);
            *uint64_t v64 = v150;
          }
        }
      }
      else
      {
        uint64_t v202 = swift_slowAlloc();
        uint64_t v334 = 0;
        uint64_t v335 = 0;
        unint64_t v203 = v324;
        uint64_t v204 = v324 - v34;
        if (v324 < v34)
        {
LABEL_384:
          __break(1u);
          goto LABEL_385;
        }
        unint64_t v205 = v34;
        uint64_t v310 = (__n128 *)v308;
        unint64_t v206 = a14[3].n128_u64[0];
        __n128 v207 = *a14;
        __n128 v208 = a14[1];
        unint64_t v209 = a14[2].n128_u64[0];
        unint64_t v210 = a14[2].n128_u64[1];
        uint64_t v336 = v206 + 8 * v205 + 32;
        uint64_t v337 = v204;
        __n128 v329 = v207;
        __n128 v330 = v208;
        unint64_t v331 = v209;
        unint64_t v332 = v210;
        unint64_t v333 = v206;
        uint64_t v326 = (__n128 *)MEMORY[0x1F4188790](v202, v207);
        uint64_t v296 = v326;
        uint64_t v297 = a4 * a5;
        uint64_t v298 = &v334;
        uint64_t v299 = a4 * a5;
        char v300 = v323 & 1;
        uint64_t v301 = &v336;
        uint64_t v302 = v327;
        uint64_t v303 = a4;
        uint64_t v304 = &v335;
        uint64_t v305 = v315;
        uint64_t v306 = a4;
        unint64_t v307 = v203;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CDEBA4((uint64_t)&v329, (uint64_t (*)(unsigned char **))sub_184CEC440, a9, a10, a11, a12, (uint64_t)v295, v328, v320, v321);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v211 = v334;
        if (v334 < 0)
        {
LABEL_387:
          __break(1u);
          goto LABEL_388;
        }
        unint64_t v212 = v203;
        unint64_t v65 = v318;
        uint64_t v64 = v317;
        unint64_t v213 = v322;
        if (v319)
        {
          int64_t v214 = sub_184C9D670(v326, v334);
          swift_release();
          a14[3].n128_u64[0] = (unint64_t)v214;
          uint64_t v215 = v335;
          if (v335 < 0)
          {
LABEL_390:
            __break(1u);
            goto LABEL_391;
          }
          unint64_t v216 = sub_184C9D670(v327, v335);
          swift_release();
          a14[2].n128_u64[0] = (unint64_t)v216;
          unint64_t v217 = (char *)sub_184CE1788(v315, v215);
          swift_release();
          *uint64_t v64 = v217;
          int64_t v218 = v325;
        }
        else
        {
          if (v322 < v212)
          {
LABEL_410:
            __break(1u);
            goto LABEL_411;
          }
          sub_184CE1520(v212, v322, v326, v334);
          uint64_t v215 = v335;
          if (v335 < 0) {
            goto LABEL_390;
          }
          int64_t v237 = v325;
          sub_184CE1520(v65, v325, v327, v335);
          int64_t v218 = v237;
          sub_184CE1654(v65, v237, v315, v215);
        }
        unint64_t v238 = v212 + v211;
        uint64_t v239 = v326;
        if (__OFADD__(v212, v211))
        {
LABEL_395:
          __break(1u);
          goto LABEL_396;
        }
        unint64_t v240 = v238 - v213;
        if (__OFSUB__(v238, v213))
        {
LABEL_396:
          __break(1u);
          goto LABEL_397;
        }
        int64_t v60 = v218;
        if (v240)
        {
          int64_t v241 = v65 + v215;
          if (__OFADD__(v65, v215))
          {
LABEL_406:
            __break(1u);
            goto LABEL_407;
          }
          unint64_t v242 = *v64;
          int64_t v243 = *((void *)*v64 + 2);
          if (v243 < v241)
          {
LABEL_407:
            __break(1u);
            goto LABEL_408;
          }
          if (v241 != v243)
          {
            if (v241 >= v243)
            {
LABEL_418:
              __break(1u);
              goto LABEL_419;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v242 = sub_184D01D8C((uint64_t)v242);
            }
            uint64_t v239 = v326;
            do
            {
              if (v241 < 0) {
                goto LABEL_322;
              }
              if ((unint64_t)v241 >= *((void *)v242 + 2)) {
                goto LABEL_325;
              }
              unint64_t v244 = &v242[4 * v241];
              uint64_t v245 = *((unsigned int *)v244 + 8);
              BOOL v96 = __OFADD__(v245, v240);
              unint64_t v246 = v245 + v240;
              if (v96) {
                goto LABEL_328;
              }
              if ((v246 & 0x8000000000000000) != 0) {
                goto LABEL_331;
              }
              if (HIDWORD(v246)) {
                goto LABEL_334;
              }
              ++v241;
              *((_DWORD *)v244 + 8) = v246;
            }
            while (v243 != v241);
            *uint64_t v64 = v242;
          }
        }
        MEMORY[0x18532B810](v239, -1, -1);
      }
      MEMORY[0x18532B810](v315, -1, -1);
      goto LABEL_248;
    }
  }
  uint64_t v42 = MEMORY[0x1F4188790](v39, v40);
  uint64_t v315 = (char *)v308 - v44;
  if (v37 < 0) {
    goto LABEL_342;
  }
  if ((unint64_t)(v37 + 0x1000000000000000) >> 61)
  {
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
    goto LABEL_345;
  }
  uint64_t v310 = (__n128 *)v308;
  if (8 * v37 >= 1025)
  {
    uint64_t v42 = swift_stdlib_isStackAllocationSafe();
    if ((v42 & 1) == 0)
    {
      uint64_t v121 = swift_slowAlloc();
      uint64_t v334 = 0;
      uint64_t v335 = 0;
      unint64_t v122 = v324;
      uint64_t v123 = v324 - v34;
      if (v324 >= v34)
      {
        unint64_t v124 = v34;
        unint64_t v125 = a14[3].n128_u64[0];
        __n128 v126 = *a14;
        __n128 v127 = a14[1];
        unint64_t v128 = a14[2].n128_u64[0];
        unint64_t v129 = a14[2].n128_u64[1];
        uint64_t v336 = v125 + 8 * v124 + 32;
        uint64_t v337 = v123;
        __n128 v329 = v126;
        __n128 v330 = v127;
        unint64_t v331 = v128;
        unint64_t v332 = v129;
        unint64_t v333 = v125;
        uint64_t v309 = (__n128 *)MEMORY[0x1F4188790](v121, v126);
        uint64_t v296 = v309;
        uint64_t v297 = v37;
        uint64_t v298 = &v334;
        uint64_t v299 = v37;
        char v300 = v323 & 1;
        uint64_t v301 = &v336;
        uint64_t v302 = v327;
        uint64_t v303 = a4;
        uint64_t v304 = &v335;
        uint64_t v305 = v315;
        uint64_t v306 = a4;
        unint64_t v307 = v122;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CDEBA4((uint64_t)&v329, (uint64_t (*)(unsigned char **))sub_184CEC440, a9, a10, a11, a12, (uint64_t)v295, v328, v320, v321);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v130 = v334;
        if ((v334 & 0x8000000000000000) == 0)
        {
          unint64_t v131 = v122;
          uint64_t v26 = v326;
          unint64_t v65 = v318;
          uint64_t v64 = v317;
          unint64_t v132 = v322;
          if (v319)
          {
            uint64_t v133 = sub_184C9D670(v309, v334);
            swift_release();
            a14[3].n128_u64[0] = (unint64_t)v133;
            uint64_t v134 = v335;
            if (v335 < 0)
            {
LABEL_360:
              __break(1u);
              goto LABEL_361;
            }
            uint64_t v135 = sub_184C9D670(v327, v335);
            swift_release();
            a14[2].n128_u64[0] = (unint64_t)v135;
            uint64_t v136 = (char *)sub_184CE1788(v315, v134);
            swift_release();
            *uint64_t v64 = v136;
          }
          else
          {
            if (v322 < v122)
            {
LABEL_381:
              __break(1u);
              goto LABEL_382;
            }
            sub_184CE1520(v122, v322, v309, v334);
            uint64_t v134 = v335;
            if (v335 < 0) {
              goto LABEL_360;
            }
            int64_t v155 = v325;
            sub_184CE1520(v65, v325, v327, v335);
            sub_184CE1654(v65, v155, v315, v134);
          }
          unint64_t v156 = v131 + v130;
          BOOL v157 = v309;
          if (!__OFADD__(v131, v130))
          {
            unint64_t v158 = v156 - v132;
            if (!__OFSUB__(v156, v132))
            {
              int64_t v60 = v325;
              if (v158)
              {
                int64_t v159 = v65 + v134;
                if (__OFADD__(v65, v134))
                {
LABEL_377:
                  __break(1u);
                  goto LABEL_378;
                }
                unint64_t v160 = *v64;
                int64_t v161 = *((void *)*v64 + 2);
                if (v161 < v159)
                {
LABEL_378:
                  __break(1u);
                  goto LABEL_379;
                }
                if (v159 != v161)
                {
                  if (v159 >= v161)
                  {
LABEL_399:
                    __break(1u);
                    goto LABEL_400;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    unint64_t v160 = sub_184D01D8C((uint64_t)v160);
                  }
                  BOOL v157 = v309;
                  do
                  {
                    if (v159 < 0) {
                      goto LABEL_300;
                    }
                    if ((unint64_t)v159 >= *((void *)v160 + 2)) {
                      goto LABEL_303;
                    }
                    uint64_t v162 = &v160[4 * v159];
                    uint64_t v163 = *((unsigned int *)v162 + 8);
                    BOOL v96 = __OFADD__(v163, v158);
                    unint64_t v164 = v163 + v158;
                    if (v96) {
                      goto LABEL_306;
                    }
                    if ((v164 & 0x8000000000000000) != 0) {
                      goto LABEL_309;
                    }
                    if (HIDWORD(v164)) {
                      goto LABEL_312;
                    }
                    ++v159;
                    *((_DWORD *)v162 + 8) = v164;
                  }
                  while (v161 != v159);
                  *uint64_t v64 = v160;
                }
              }
              MEMORY[0x18532B810](v157, -1, -1);
              goto LABEL_248;
            }
            goto LABEL_366;
          }
          goto LABEL_363;
        }
        goto LABEL_357;
      }
      goto LABEL_354;
    }
  }
  uint64_t v45 = MEMORY[0x1F4188790](v42, v43);
  char v48 = (__n128 *)((char *)v308 - v47);
  uint64_t v334 = 0;
  uint64_t v335 = 0;
  unint64_t v49 = v324;
  uint64_t v50 = v324 - v34;
  if (v324 < v34) {
    goto LABEL_335;
  }
  unint64_t v51 = v34;
  v308[1] = v46;
  uint64_t v309 = (__n128 *)v308;
  unint64_t v52 = a14[3].n128_u64[0];
  __n128 v53 = *a14;
  __n128 v54 = a14[1];
  unint64_t v55 = a14[2].n128_u64[0];
  unint64_t v56 = a14[2].n128_u64[1];
  uint64_t v336 = v52 + 8 * v51 + 32;
  uint64_t v337 = v50;
  __n128 v329 = v53;
  __n128 v330 = v54;
  unint64_t v331 = v55;
  unint64_t v332 = v56;
  unint64_t v333 = v52;
  MEMORY[0x1F4188790](v45, v53);
  uint64_t v296 = v48;
  uint64_t v297 = a4 * a5;
  uint64_t v298 = &v334;
  uint64_t v299 = a4 * a5;
  char v300 = v323 & 1;
  uint64_t v301 = &v336;
  uint64_t v302 = v327;
  uint64_t v303 = a4;
  uint64_t v304 = &v335;
  uint64_t v305 = v315;
  uint64_t v306 = a4;
  unint64_t v307 = v49;
  swift_retain_n();
  swift_retain();
  swift_retain();
  sub_184CDEBA4((uint64_t)&v329, (uint64_t (*)(unsigned char **))sub_184CEC440, a9, a10, a11, a12, (uint64_t)v295, v328, v320, v321);
  swift_release_n();
  swift_release();
  swift_release();
  uint64_t v57 = v334;
  if (v334 < 0)
  {
LABEL_336:
    __break(1u);
    goto LABEL_337;
  }
  if (v319)
  {
    uint64_t v58 = sub_184C9D670(v48, v334);
    swift_release();
    a14[3].n128_u64[0] = (unint64_t)v58;
    uint64_t v59 = v335;
    int64_t v60 = v325;
    uint64_t v26 = v326;
    unint64_t v61 = v322;
    if (v335 < 0)
    {
LABEL_337:
      __break(1u);
      goto LABEL_338;
    }
    long long v62 = sub_184C9D670(v327, v335);
    swift_release();
    a14[2].n128_u64[0] = (unint64_t)v62;
    uint64_t v63 = (char *)sub_184CE1788(v315, v59);
    uint64_t v64 = v317;
    swift_release();
    *uint64_t v64 = v63;
    unint64_t v65 = v318;
  }
  else
  {
    unint64_t v61 = v322;
    int64_t v60 = v325;
    uint64_t v26 = v326;
    if (v322 < v49) {
      goto LABEL_346;
    }
    sub_184CE1520(v49, v322, v48, v334);
    uint64_t v59 = v335;
    if (v335 < 0) {
      goto LABEL_337;
    }
    unint64_t v65 = v318;
    sub_184CE1520(v318, v60, v327, v335);
    uint64_t v64 = v317;
    sub_184CE1654(v65, v60, v315, v59);
  }
  unint64_t v89 = v49 + v57;
  if (__OFADD__(v49, v57))
  {
LABEL_338:
    __break(1u);
    goto LABEL_339;
  }
  unint64_t v90 = v89 - v61;
  if (__OFSUB__(v89, v61))
  {
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
    goto LABEL_341;
  }
  if (!v90) {
    goto LABEL_248;
  }
  int64_t v91 = v65 + v59;
  if (__OFADD__(v65, v59)) {
    goto LABEL_344;
  }
  uint64_t v92 = *v64;
  int64_t v93 = *((void *)*v64 + 2);
  if (v93 < v91)
  {
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
    goto LABEL_352;
  }
  if (v91 == v93) {
    goto LABEL_248;
  }
  if (v91 >= v93) {
    goto LABEL_367;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v92 = sub_184D01D8C((uint64_t)v92);
  }
  do
  {
    if (v91 < 0)
    {
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
LABEL_301:
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
      goto LABEL_313;
    }
    if ((unint64_t)v91 >= *((void *)v92 + 2)) {
      goto LABEL_294;
    }
    int64x2_t v94 = &v92[4 * v91];
    uint64_t v95 = *((unsigned int *)v94 + 8);
    BOOL v96 = __OFADD__(v95, v90);
    unint64_t v97 = v95 + v90;
    if (v96) {
      goto LABEL_295;
    }
    if ((v97 & 0x8000000000000000) != 0) {
      goto LABEL_296;
    }
    if (HIDWORD(v97)) {
      goto LABEL_297;
    }
    ++v91;
    *((_DWORD *)v94 + 8) = v97;
  }
  while (v93 != v91);
  *uint64_t v64 = v92;
LABEL_248:
  uint64_t v273 = v26[2].n128_i64[0];
  if (*(void *)(v273 + 16))
  {
    if (v314)
    {
      if (a13)
      {
        uint64_t v276 = *v64;
        uint64_t v277 = *((void *)*v64 + 2);
        if (v277)
        {
          uint64_t v278 = (double *)(v26[3].n128_u64[0] + 32);
          uint64_t v279 = *((unsigned int *)v276 + 8);
          if (v279)
          {
            double v280 = v278[v279 - 1];
            double v281 = NAN;
            if ((*(void *)v278 & 0xFFFFFFFFFFFFFLL) == 0) {
              double v281 = *v278;
            }
            if ((~*(void *)v278 & 0x7FF0000000000000) != 0) {
              double v274 = *v278;
            }
            else {
              double v274 = v281;
            }
            if ((~*(void *)&v280 & 0x7FF0000000000000) == 0
              && (*(void *)&v278[v279 - 1] & 0xFFFFFFFFFFFFFLL) != 0)
            {
              double v280 = NAN;
            }
          }
          else
          {
            double v280 = NAN;
            double v274 = NAN;
          }
          uint64_t v282 = v277 - 1;
          if (v282)
          {
            int64_t v288 = (unsigned int *)(v276 + 36);
            do
            {
              unsigned int v290 = *v288++;
              uint64_t v289 = v290;
              if (v279 != v290)
              {
                uint64_t v291 = &v278[v279];
                double v292 = v291[v289 + ~v279];
                if ((*(void *)v291 & 0xFFFFFFFFFFFFFLL) != 0) {
                  double v293 = v274;
                }
                else {
                  double v293 = *v291;
                }
                if ((~*(void *)v291 & 0x7FF0000000000000) != 0) {
                  double v293 = *v291;
                }
                if (v274 > *v291) {
                  double v274 = v293;
                }
                if (v292 >= v280)
                {
                  double v294 = v291[v289 + ~v279];
                  if ((~*(void *)&v292 & 0x7FF0000000000000) != 0)
                  {
                    double v280 = v292;
                  }
                  else if ((*(void *)&v294 & 0xFFFFFFFFFFFFFLL) == 0)
                  {
                    double v280 = v292;
                  }
                }
              }
              uint64_t v279 = v289;
              --v282;
            }
            while (v282);
          }
        }
        else
        {
          double v280 = NAN;
          double v274 = NAN;
        }
        double v316 = v280;
      }
      else
      {
        double v274 = v26->n128_f64[0];
      }
    }
    else
    {
      double v274 = v311;
      if (a13) {
        double v316 = v26->n128_f64[1];
      }
    }
    v283 = v26 + 1;
    if (!v65) {
      v283 = (__n128 *)(v273 + 32);
    }
    unint64_t v284 = v283->n128_u64[0];
    if (v313 == v60)
    {
      uint64_t v275 = sub_184CE1444(v273);
      if (v285)
      {
        __break(1u);
        goto LABEL_275;
      }
    }
    else
    {
LABEL_275:
      uint64_t v275 = v26[1].n128_i64[1];
    }
    double v286 = v316;
    v26->n128_f64[0] = v274;
    v26->n128_f64[1] = v286;
    v26[1].n128_u64[0] = v284;
  }
  else
  {
    uint64_t v275 = 0x7FF8000000000000;
    *(int64x2_t *)uint64_t v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    v26[1].n128_u64[0] = 0x7FF8000000000000;
  }
  v26[1].n128_u64[1] = v275;
  sub_184CEB9B4();
  return sub_184CEC3DC(v328);
}

uint64_t sub_184CE4A10(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_184CE89FC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)sub_184CEC428, (void (*)(__n128 *, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))sub_184CDE708, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428);
}

uint64_t sub_184CE4B28(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_184CE89FC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)sub_184CEC428, (void (*)(__n128 *, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))sub_184CDEE08, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428);
}

uint64_t sub_184CE4C40(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_184CE89FC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)sub_184CEC428, (void (*)(__n128 *, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))sub_184CDF670, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428, (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428,
           (uint64_t)sub_184CEC428);
}

uint64_t sub_184CE4D58(int64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, void *a10, uint64_t a11)
{
  return sub_184CE4DC0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_184CE4DC0(int64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, void *a10, uint64_t a11)
{
  int v362 = a7;
  double v358 = *(double *)&a6;
  int v374 = a3;
  uint64_t v19 = (uint64_t)a10;
  uint64_t v380 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = (uint64_t)a10;
  uint64_t isStackAllocationSafe = sub_184CEB8F0();
  uint64_t v28 = (uint64_t)(a10 + 5);
  unint64_t v27 = a10[5];
  unint64_t v29 = *(void *)(v27 + 16);
  LODWORD(v30) = v29 == a2;
  if (a1)
  {
    unint64_t v31 = a1 - 1;
    if (__OFSUB__(a1, 1))
    {
LABEL_953:
      __break(1u);
      goto LABEL_954;
    }
    if (v31 >= v29)
    {
LABEL_954:
      __break(1u);
      goto LABEL_955;
    }
    int64_t v32 = *(unsigned int *)(v27 + 32 + 4 * v31);
    if (a1 <= 1)
    {
      int64_t v33 = 0;
      unint64_t v11 = 0;
      LODWORD(v30) = 0;
      if (!a2) {
        goto LABEL_14;
      }
    }
    else
    {
      if (a1 - 2 >= v29)
      {
LABEL_984:
        __break(1u);
        goto LABEL_985;
      }
      LODWORD(v30) = 0;
      unint64_t v11 = *(unsigned int *)(v27 + 32 + 4 * (a1 - 2));
      if (!a2)
      {
        int64_t v33 = 0;
        goto LABEL_14;
      }
    }
  }
  else
  {
    int64_t v33 = 0;
    unint64_t v11 = 0;
    int64_t v32 = 0;
    if (!a2) {
      goto LABEL_14;
    }
  }
  unint64_t v34 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
LABEL_955:
    __break(1u);
    goto LABEL_956;
  }
  if (v34 >= v29)
  {
LABEL_956:
    __break(1u);
    goto LABEL_957;
  }
  int64_t v33 = *(unsigned int *)(v27 + 4 * v34 + 32);
LABEL_14:
  unint64_t v27 = (unsigned __int128)(a4 * (__int128)a5) >> 64;
  if (v27 != (a4 * a5) >> 63) {
    goto LABEL_910;
  }
  if (a4 < 0)
  {
    __break(1u);
LABEL_959:
    __break(1u);
LABEL_960:
    __break(1u);
LABEL_961:
    __break(1u);
LABEL_962:
    __break(1u);
    goto LABEL_963;
  }
  unint64_t v27 = (unint64_t)(a4 + 0x1000000000000000) >> 61;
  if (v27) {
    goto LABEL_959;
  }
  uint64_t v375 = a4 * a5;
  int64_t v376 = v32;
  unsigned int v367 = v30;
  int64_t v369 = v33;
  unint64_t v361 = v29;
  uint64_t v20 = 4 * a4;
  uint64_t v370 = a11;
  int64_t v365 = a1;
  uint64_t v366 = a10 + 5;
  double v364 = *(double *)&a8;
  if (8 * a4 >= 1025)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v51 = swift_slowAlloc();
      unint64_t v373 = (void *)v51;
      unint64_t v27 = (unint64_t)(a4 + 0x2000000000000000) >> 62;
      if (v27) {
        goto LABEL_1029;
      }
      if (v20 < 1025 || (uint64_t v51 = swift_stdlib_isStackAllocationSafe(), (v51 & 1) != 0))
      {
        uint64_t v53 = MEMORY[0x1F4188790](v51, v52);
        unint64_t v55 = (char *)v350 - v27;
        if (v375 < 0) {
          goto LABEL_1033;
        }
        unint64_t v27 = (unint64_t)(v375 + 0x1000000000000000) >> 61;
        if (v27)
        {
LABEL_1034:
          __break(1u);
          goto LABEL_1035;
        }
        v372 = v55;
        uint64_t v359 = v350;
        if (8 * v375 < 1025 || (uint64_t v53 = swift_stdlib_isStackAllocationSafe(), (v53 & 1) != 0))
        {
          uint64_t v351 = v350;
          MEMORY[0x1F4188790](v53, v54);
          unint64_t v56 = (double *)((char *)v350 - v27);
          int64_t v32 = v376;
          uint64_t v20 = v376 - v11;
          if (v376 < v11)
          {
LABEL_1009:
            __break(1u);
            goto LABEL_1010;
          }
          uint64_t v354 = v350;
          int64_t v57 = a10[6];
          uint64_t v356 = a10[4];
          uint64_t v352 = a10 + 4;
          uint64_t v353 = a10 + 6;
          uint64_t v355 = (void *)a10[5];
          int64_t v357 = v57;
          a1 = v57 + 8 * v11 + 32;
          long long v58 = *(_OWORD *)a11;
          uint64_t v13 = *(void *)(a11 + 16);
          uint64_t v12 = *(void *)(a11 + 24);
          uint64_t v59 = *(void *)a11;
          uint64_t v60 = *(void *)(a11 + 32);
          uint64_t v28 = *(void *)(v60 + 16);
          LOBYTE(v30) = v374;
          int v24 = v373;
          v371 = v56;
          if ((~v59 & 0x7FF0000000000000) == 0 && (v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            uint64_t v23 = v375;
            if (!v28)
            {
              int64_t v363 = a2;
              uint64_t v360 = a10;
              uint64_t v61 = 0;
              uint64_t v62 = 0;
LABEL_48:
              swift_retain_n();
              swift_retain();
              swift_retain();
              uint64_t v19 = (uint64_t)v360;
              a2 = v363;
              a1 = v365;
              uint64_t v28 = (uint64_t)v366;
              goto LABEL_49;
            }
            goto LABEL_147;
          }
          uint64_t v23 = v375;
          if (v28)
          {
LABEL_147:
            int64_t v363 = a2;
            uint64_t v360 = a10;
            uint64_t v61 = 0;
            uint64_t v62 = 0;
            a2 = 0;
            uint64_t v19 = v60 + 32;
            unint64_t v11 = *(void *)(v370 + 40) + 32;
            unint64_t v27 = *(void *)(v370 + 48) + 32;
            uint64_t v368 = v27;
            while (1)
            {
              if (a2 == 0x100000000)
              {
                __break(1u);
LABEL_854:
                __break(1u);
LABEL_855:
                __break(1u);
LABEL_856:
                __break(1u);
LABEL_857:
                __break(1u);
LABEL_858:
                __break(1u);
LABEL_859:
                uint64_t v46 = 0;
                uint64_t v47 = 0;
                if (v23 < 0)
                {
LABEL_860:
                  __break(1u);
                  goto LABEL_861;
                }
LABEL_362:
                if (v30)
                {
                  uint64_t v28 = (uint64_t)v366;
                  uint64_t v20 = (uint64_t)v354;
                  if (!v27) {
                    goto LABEL_579;
                  }
LABEL_576:
                  v24[v46] = v12;
                  unint64_t v27 = v32 + v47;
                  if (v32 + v47 >= 0)
                  {
                    if (!HIDWORD(v27))
                    {
                      v22[v46++] = v27;
                      goto LABEL_579;
                    }
LABEL_1032:
                    __break(1u);
LABEL_1033:
                    __break(1u);
                    goto LABEL_1034;
                  }
LABEL_1031:
                  __break(1u);
                  goto LABEL_1032;
                }
LABEL_575:
                uint64_t v28 = (uint64_t)v366;
                uint64_t v20 = (uint64_t)v354;
                goto LABEL_576;
              }
              if (a2)
              {
                unint64_t v27 = *(unsigned int *)(v11 + 4 * a2 - 4);
                uint64_t v112 = v23 - v62;
                if (v23 < v62) {
                  goto LABEL_856;
                }
              }
              else
              {
                unint64_t v27 = 0;
                uint64_t v112 = v23 - v62;
                if (v23 < v62) {
                  goto LABEL_856;
                }
              }
              uint64_t v12 = *(void *)(v19 + 8 * a2);
              uint64_t v113 = *(unsigned int *)(v11 + 4 * a2);
              unint64_t v114 = &v56[v62];
              if (v113 == v27 || v23 == v62)
              {
                unint64_t v115 = 0;
                if ((v30 & 1) == 0)
                {
                  unint64_t v27 = v20;
                  unint64_t v114 = (double *)a1;
                  goto LABEL_171;
                }
              }
              else
              {
                int64_t v116 = v113 - v27;
                if (v116 >= v112) {
                  unint64_t v115 = v112;
                }
                else {
                  unint64_t v115 = v116;
                }
                memcpy(&v56[v62], (const void *)(v368 + 8 * v27), 8 * v115);
                LOBYTE(v30) = v374;
                if ((v374 & 1) == 0)
                {
                  unint64_t v27 = v20;
                  unint64_t v114 = (double *)a1;
                  uint64_t v23 = v375;
                  int64_t v32 = v376;
                  double v22 = v372;
                  int v24 = v373;
                  unint64_t v56 = v371;
LABEL_170:
                  BOOL v76 = __OFADD__(v62, v115);
                  v62 += v115;
                  if (v76) {
                    goto LABEL_869;
                  }
                  goto LABEL_171;
                }
                uint64_t v23 = v375;
                int64_t v32 = v376;
                double v22 = v372;
                int v24 = v373;
                unint64_t v56 = v371;
                if ((v115 & 0x8000000000000000) != 0)
                {
                  __break(1u);
LABEL_893:
                  __break(1u);
LABEL_894:
                  __break(1u);
LABEL_895:
                  __break(1u);
LABEL_896:
                  __break(1u);
LABEL_897:
                  __break(1u);
LABEL_898:
                  __break(1u);
LABEL_899:
                  __break(1u);
LABEL_900:
                  __break(1u);
LABEL_901:
                  __break(1u);
LABEL_902:
                  __break(1u);
LABEL_903:
                  __break(1u);
LABEL_904:
                  __break(1u);
LABEL_905:
                  __break(1u);
LABEL_906:
                  __break(1u);
LABEL_907:
                  __break(1u);
LABEL_908:
                  __break(1u);
LABEL_909:
                  __break(1u);
LABEL_910:
                  __break(1u);
LABEL_911:
                  if (*(double *)(v28 + 8) == *(double *)(v27 + 8))
                  {
                    uint64_t v326 = v20 - 2;
                    uint64_t v327 = (double *)(v27 + 16);
                    uint64_t v328 = (double *)&v359[v11 + 6];
                    unint64_t v27 = 1;
                    while (v326)
                    {
                      double v329 = *v328++;
                      double v330 = v329;
                      double v331 = *v327++;
                      --v326;
                      if (v330 != v331) {
                        goto LABEL_915;
                      }
                    }
LABEL_994:
                    uint64_t v161 = 0;
                    uint64_t v162 = 0;
                    if (v23 < 0)
                    {
LABEL_995:
                      __break(1u);
LABEL_996:
                      uint64_t v174 = 0;
                      uint64_t v175 = 0;
                      if (v23 < 0)
                      {
LABEL_997:
                        __break(1u);
                        goto LABEL_998;
                      }
LABEL_787:
                      if (v30)
                      {
                        uint64_t v28 = (uint64_t)v366;
                        if (v27)
                        {
LABEL_823:
                          v24[v174] = v12;
                          unint64_t v304 = v32 + v175;
                          if (v32 + v175 < 0) {
                            goto LABEL_1093;
                          }
                          if (HIDWORD(v304)) {
                            goto LABEL_1094;
                          }
                          v25[v174++] = v304;
                        }
LABEL_826:
                        swift_retain_n();
                        swift_retain();
                        swift_retain();
LABEL_343:
                        swift_release_n();
                        swift_release();
                        swift_release();
                        if ((v175 & 0x8000000000000000) == 0)
                        {
                          if (v367)
                          {
                            unint64_t v176 = sub_184C9D670(v371, v175);
                            unint64_t v177 = v353;
                            swift_release();
                            *unint64_t v177 = v176;
                            if (v174 < 0) {
                              goto LABEL_1055;
                            }
                            uint64_t v178 = sub_184C9D670(v373, v174);
                            unint64_t v179 = v352;
                            swift_release();
                            void *v179 = v178;
                            unint64_t v180 = sub_184CE1788(v372, v174);
                            swift_release();
                            *(void *)uint64_t v28 = v180;
                          }
                          else
                          {
                            if (v369 < v376) {
                              goto LABEL_1081;
                            }
                            sub_184CE1520(v376, v369, v371, v175);
                            if (v174 < 0) {
                              goto LABEL_1055;
                            }
                            sub_184CE1520(a1, a2, v373, v174);
                            sub_184CE1654(a1, a2, v372, v174);
                          }
                          int64_t v227 = v376 + v175;
                          int64_t v221 = v371;
                          if (__OFADD__(v376, v175)) {
                            goto LABEL_1059;
                          }
                          uint64_t v20 = v227 - v369;
                          uint64_t v85 = v370;
                          if (!__OFSUB__(v227, v369))
                          {
                            if (!v20) {
                              goto LABEL_705;
                            }
                            int64_t v228 = a1 + v174;
                            if (__OFADD__(a1, v174)) {
                              goto LABEL_1076;
                            }
                            BOOL v229 = *(char **)v28;
                            int64_t v230 = *(void *)(*(void *)v28 + 16);
                            if (v230 >= v228)
                            {
                              if (v228 == v230) {
                                goto LABEL_705;
                              }
                              if (v228 < v230)
                              {
                                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                                  BOOL v229 = sub_184D01D8C((uint64_t)v229);
                                }
                                int64_t v221 = v371;
                                do
                                {
                                  if (v228 < 0) {
                                    goto LABEL_965;
                                  }
                                  unint64_t v27 = *((void *)v229 + 2);
                                  if (v228 >= v27) {
                                    goto LABEL_968;
                                  }
                                  unint64_t v27 = (unint64_t)&v229[4 * v228];
                                  uint64_t v231 = *(unsigned int *)(v27 + 32);
                                  BOOL v76 = __OFADD__(v231, v20);
                                  unint64_t v232 = v231 + v20;
                                  if (v76) {
                                    goto LABEL_971;
                                  }
                                  if ((v232 & 0x8000000000000000) != 0) {
                                    goto LABEL_974;
                                  }
                                  if (HIDWORD(v232)) {
                                    goto LABEL_977;
                                  }
                                  ++v228;
                                  *(_DWORD *)(v27 + 32) = v232;
                                }
                                while (v230 != v228);
                                *(void *)uint64_t v28 = v229;
                                goto LABEL_705;
                              }
                              goto LABEL_1089;
                            }
                            goto LABEL_1077;
                          }
                          goto LABEL_1060;
                        }
                        goto LABEL_1052;
                      }
LABEL_822:
                      uint64_t v28 = (uint64_t)v366;
                      goto LABEL_823;
                    }
LABEL_779:
                    if (v30)
                    {
                      uint64_t v28 = (uint64_t)v366;
                      if (!v27) {
                        goto LABEL_821;
                      }
                      goto LABEL_818;
                    }
LABEL_817:
                    uint64_t v28 = (uint64_t)v366;
LABEL_818:
                    v24[v161] = v12;
                    unint64_t v303 = v32 + v162;
                    if (v32 + v162 < 0) {
                      goto LABEL_1091;
                    }
                    if (!HIDWORD(v303))
                    {
                      v22[v161++] = v303;
                      goto LABEL_821;
                    }
                    goto LABEL_1092;
                  }
LABEL_915:
                  unint64_t v27 = v20;
                  uint64_t v162 = v20;
LABEL_776:
                  *int v24 = v13;
                  unint64_t v300 = v32 + v162;
                  if (v32 + v162 < 0) {
                    goto LABEL_1091;
                  }
                  if (HIDWORD(v300)) {
                    goto LABEL_1092;
                  }
                  *double v22 = v300;
                  uint64_t v161 = 1;
                  if (v23 < v162) {
                    goto LABEL_995;
                  }
                  goto LABEL_779;
                }
              }
              unint64_t v27 = v115;
              if (v20 != v115) {
                goto LABEL_170;
              }
              if (!v20)
              {
                unint64_t v27 = 0;
                goto LABEL_149;
              }
              if (*(double *)a1 == *v114)
              {
                if (v20 == 1)
                {
                  unint64_t v27 = 1;
                  goto LABEL_149;
                }
                if (*(double *)(a1 + 8) == v114[1])
                {
                  uint64_t v118 = 2;
                  while (v20 != v118)
                  {
                    double v119 = *(double *)(a1 + 8 * v118);
                    double v120 = v114[v118++];
                    if (v119 != v120) {
                      goto LABEL_180;
                    }
                  }
                  unint64_t v27 = v20;
                  goto LABEL_149;
                }
              }
LABEL_180:
              unint64_t v27 = v20;
              BOOL v76 = __OFADD__(v62, v20);
              v62 += v20;
              if (v76)
              {
LABEL_869:
                __break(1u);
LABEL_870:
                __break(1u);
LABEL_871:
                __break(1u);
LABEL_872:
                __break(1u);
LABEL_873:
                __break(1u);
LABEL_874:
                __break(1u);
LABEL_875:
                __break(1u);
LABEL_876:
                __break(1u);
LABEL_877:
                __break(1u);
LABEL_878:
                __break(1u);
LABEL_879:
                __break(1u);
LABEL_880:
                __break(1u);
LABEL_881:
                __break(1u);
LABEL_882:
                __break(1u);
LABEL_883:
                __break(1u);
LABEL_884:
                uint64_t v162 = 0;
                uint64_t v161 = 0;
                uint64_t v28 = (uint64_t)v366;
LABEL_821:
                swift_retain_n();
                swift_retain();
                swift_retain();
LABEL_333:
                swift_release_n();
                swift_release();
                swift_release();
                if ((v162 & 0x8000000000000000) == 0)
                {
                  if (v367)
                  {
                    uint64_t v163 = sub_184C9D670(v371, v162);
                    unint64_t v164 = v354;
                    swift_release();
                    *unint64_t v164 = v163;
                    if ((v161 & 0x8000000000000000) == 0)
                    {
                      uint64_t v165 = sub_184C9D670(v373, v161);
                      __n128 v166 = v353;
                      swift_release();
                      *__n128 v166 = v165;
                      uint64_t v167 = sub_184CE1788(v372, v161);
                      swift_release();
                      *(void *)uint64_t v28 = v167;
                      goto LABEL_515;
                    }
LABEL_1054:
                    __break(1u);
LABEL_1055:
                    __break(1u);
LABEL_1056:
                    __break(1u);
LABEL_1057:
                    __break(1u);
                    goto LABEL_1058;
                  }
                  if (v369 < v376) {
                    goto LABEL_1080;
                  }
                  sub_184CE1520(v376, v369, v371, v162);
                  if (v161 < 0) {
                    goto LABEL_1054;
                  }
                  sub_184CE1520(a1, a2, v373, v161);
                  sub_184CE1654(a1, a2, v372, v161);
LABEL_515:
                  int64_t v220 = v376 + v162;
                  if (__OFADD__(v376, v162)) {
                    goto LABEL_1057;
                  }
                  uint64_t v20 = v220 - v369;
                  int64_t v221 = (double *)v372;
                  if (!__OFSUB__(v220, v369))
                  {
                    if (!v20) {
                      goto LABEL_532;
                    }
                    int64_t v222 = a1 + v161;
                    if (!__OFADD__(a1, v161))
                    {
                      int64_t v223 = *(char **)v28;
                      int64_t v224 = *(void *)(*(void *)v28 + 16);
                      if (v224 >= v222)
                      {
                        if (v222 != v224)
                        {
                          if (v222 < v224)
                          {
                            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                              int64_t v223 = sub_184D01D8C((uint64_t)v223);
                            }
                            int64_t v221 = (double *)v372;
                            do
                            {
                              if (v222 < 0) {
                                goto LABEL_964;
                              }
                              unint64_t v27 = *((void *)v223 + 2);
                              if (v222 >= v27) {
                                goto LABEL_967;
                              }
                              unint64_t v27 = (unint64_t)&v223[4 * v222];
                              uint64_t v225 = *(unsigned int *)(v27 + 32);
                              BOOL v76 = __OFADD__(v225, v20);
                              unint64_t v226 = v225 + v20;
                              if (v76) {
                                goto LABEL_970;
                              }
                              if ((v226 & 0x8000000000000000) != 0) {
                                goto LABEL_973;
                              }
                              if (HIDWORD(v226)) {
                                goto LABEL_976;
                              }
                              ++v222;
                              *(_DWORD *)(v27 + 32) = v226;
                            }
                            while (v224 != v222);
                            *(void *)uint64_t v28 = v223;
                            goto LABEL_532;
                          }
LABEL_1088:
                          __break(1u);
LABEL_1089:
                          __break(1u);
LABEL_1090:
                          __break(1u);
LABEL_1091:
                          __break(1u);
LABEL_1092:
                          __break(1u);
LABEL_1093:
                          __break(1u);
LABEL_1094:
                          __break(1u);
LABEL_1095:
                          __break(1u);
LABEL_1096:
                          __break(1u);
LABEL_1097:
                          __break(1u);
LABEL_1098:
                          __break(1u);
LABEL_1099:
                          __break(1u);
LABEL_1100:
                          __break(1u);
                          goto LABEL_1101;
                        }
LABEL_532:
                        uint64_t v85 = v370;
                        goto LABEL_705;
                      }
LABEL_1075:
                      __break(1u);
LABEL_1076:
                      __break(1u);
LABEL_1077:
                      __break(1u);
LABEL_1078:
                      __break(1u);
LABEL_1079:
                      __break(1u);
LABEL_1080:
                      __break(1u);
LABEL_1081:
                      __break(1u);
LABEL_1082:
                      __break(1u);
LABEL_1083:
                      __break(1u);
LABEL_1084:
                      __break(1u);
                      goto LABEL_1085;
                    }
LABEL_1074:
                    __break(1u);
                    goto LABEL_1075;
                  }
LABEL_1058:
                  __break(1u);
LABEL_1059:
                  __break(1u);
LABEL_1060:
                  __break(1u);
LABEL_1061:
                  __break(1u);
LABEL_1062:
                  __break(1u);
LABEL_1063:
                  __break(1u);
LABEL_1064:
                  __break(1u);
LABEL_1065:
                  __break(1u);
LABEL_1066:
                  __break(1u);
LABEL_1067:
                  __break(1u);
LABEL_1068:
                  __break(1u);
LABEL_1069:
                  __break(1u);
LABEL_1070:
                  __break(1u);
LABEL_1071:
                  __break(1u);
LABEL_1072:
                  __break(1u);
                  goto LABEL_1073;
                }
LABEL_1051:
                __break(1u);
LABEL_1052:
                __break(1u);
LABEL_1053:
                __break(1u);
                goto LABEL_1054;
              }
LABEL_171:
              v24[v61] = v12;
              unint64_t v117 = v32 + v62;
              if (__OFADD__(v32, v62)) {
                goto LABEL_872;
              }
              if ((v117 & 0x8000000000000000) != 0) {
                goto LABEL_875;
              }
              if (HIDWORD(v117)) {
                goto LABEL_878;
              }
              v22[v61] = v117;
              BOOL v76 = __OFADD__(v61++, 1);
              if (v76) {
                goto LABEL_881;
              }
              a1 = (int64_t)v114;
LABEL_149:
              ++a2;
              uint64_t v20 = v27;
              if (a2 == v28) {
                goto LABEL_48;
              }
            }
          }
          long long __src = v58;
          uint64_t v378 = v13;
          uint64_t v379 = v12;
          uint64_t v28 = (uint64_t)v366;
          if (v375 < 0) {
            goto LABEL_933;
          }
          if (v375)
          {
            if (v375 >= 2) {
              uint64_t v62 = 2;
            }
            else {
              uint64_t v62 = v375;
            }
            memcpy(v56, &__src, 8 * v62);
            double v22 = v372;
            int v24 = v373;
            uint64_t v23 = v375;
            int64_t v32 = v376;
            LOBYTE(v30) = v374;
            if (v374)
            {
LABEL_371:
              uint64_t v60 = v62;
              if (v20 == v62)
              {
                if (!v20)
                {
                  uint64_t v62 = 0;
                  uint64_t v61 = 0;
                  a1 = v365;
                  goto LABEL_756;
                }
                uint64_t v75 = v371;
                if (*(double *)a1 == *v371)
                {
                  if (v20 == 1)
                  {
                    uint64_t v61 = 0;
                    uint64_t v62 = 0;
                    goto LABEL_752;
                  }
LABEL_838:
                  if (*(double *)(a1 + 8) == v75[1])
                  {
                    uint64_t v306 = v20 - 2;
                    unint64_t v307 = v75 + 2;
                    uint64_t v308 = (double *)(v357 + 8 * v11 + 48);
                    uint64_t v60 = 1;
                    while (v306)
                    {
                      double v309 = *v308++;
                      double v310 = v309;
                      double v311 = *v307++;
                      --v306;
                      if (v310 != v311) {
                        goto LABEL_842;
                      }
                    }
                    goto LABEL_932;
                  }
                }
LABEL_842:
                uint64_t v60 = v20;
                uint64_t v62 = v20;
              }
LABEL_592:
              *int v24 = v13;
              unint64_t v250 = v32 + v62;
              if (v32 + v62 < 0) {
                goto LABEL_1066;
              }
              if (HIDWORD(v250)) {
                goto LABEL_1067;
              }
              *double v22 = v250;
              uint64_t v61 = 1;
              if (v23 < v62) {
                goto LABEL_933;
              }
              goto LABEL_595;
            }
          }
          else
          {
            uint64_t v62 = 0;
            if (v374) {
              goto LABEL_371;
            }
          }
          uint64_t v60 = v20;
          goto LABEL_592;
        }
        uint64_t v168 = (double *)swift_slowAlloc();
        int64_t v32 = v376;
        uint64_t v20 = v376 - v11;
        if (v376 < v11) {
          goto LABEL_1049;
        }
        uint64_t v354 = v350;
        uint64_t v356 = a10[4];
        int64_t v169 = a10[6];
        uint64_t v353 = a10 + 6;
        uint64_t v352 = a10 + 4;
        uint64_t v355 = (void *)a10[5];
        int64_t v357 = v169;
        uint64_t v28 = v169 + 8 * v11 + 32;
        long long v170 = *(_OWORD *)a11;
        uint64_t v13 = *(void *)(a11 + 16);
        uint64_t v12 = *(void *)(a11 + 24);
        uint64_t v171 = *(void *)a11;
        uint64_t v172 = *(void *)(a11 + 32);
        uint64_t v173 = *(void *)(v172 + 16);
        LOBYTE(v30) = v374;
        int v24 = v373;
        v371 = v168;
        if ((~v171 & 0x7FF0000000000000) == 0 && (v171 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          uint64_t v23 = v375;
          double v25 = v372;
          if (!v173)
          {
            int64_t v363 = a2;
            uint64_t v360 = a10;
            uint64_t v174 = 0;
            uint64_t v175 = 0;
LABEL_342:
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v19 = (uint64_t)v360;
            a2 = v363;
            a1 = v365;
            uint64_t v28 = (uint64_t)v366;
            goto LABEL_343;
          }
          goto LABEL_437;
        }
        uint64_t v23 = v375;
        double v25 = v372;
        if (v173)
        {
LABEL_437:
          int64_t v363 = a2;
          uint64_t v360 = a10;
          uint64_t v174 = 0;
          uint64_t v175 = 0;
          a1 = 0;
          a2 = v172 + 32;
          uint64_t v19 = *(void *)(v370 + 40) + 32;
          uint64_t v60 = *(void *)(v370 + 48) + 32;
          uint64_t v368 = v60;
          while (1)
          {
            if (a1 == 0x100000000) {
              goto LABEL_927;
            }
            if (a1)
            {
              uint64_t v60 = *(unsigned int *)(v19 + 4 * a1 - 4);
              int64_t v204 = v23 - v175;
              if (v23 < v175) {
                goto LABEL_930;
              }
            }
            else
            {
              uint64_t v60 = 0;
              int64_t v204 = v23 - v175;
              if (v23 < v175) {
                goto LABEL_930;
              }
            }
            uint64_t v12 = *(void *)(a2 + 8 * a1);
            uint64_t v205 = *(unsigned int *)(v19 + 4 * a1);
            unint64_t v206 = &v168[v175];
            if (v205 == v60 || v23 == v175)
            {
              unint64_t v11 = 0;
              if ((v30 & 1) == 0)
              {
                uint64_t v60 = v20;
                unint64_t v206 = (double *)v28;
                goto LABEL_461;
              }
            }
            else
            {
              int64_t v207 = v205 - v60;
              if (v207 >= v204) {
                unint64_t v11 = v204;
              }
              else {
                unint64_t v11 = v207;
              }
              memcpy(&v168[v175], (const void *)(v368 + 8 * v60), 8 * v11);
              LOBYTE(v30) = v374;
              if ((v374 & 1) == 0)
              {
                uint64_t v60 = v20;
                unint64_t v206 = (double *)v28;
                uint64_t v23 = v375;
                int64_t v32 = v376;
                double v25 = v372;
                int v24 = v373;
                uint64_t v168 = v371;
LABEL_460:
                BOOL v76 = __OFADD__(v175, v11);
                v175 += v11;
                if (v76) {
                  goto LABEL_939;
                }
                goto LABEL_461;
              }
              uint64_t v23 = v375;
              int64_t v32 = v376;
              double v25 = v372;
              int v24 = v373;
              uint64_t v168 = v371;
              if ((v11 & 0x8000000000000000) != 0) {
                goto LABEL_961;
              }
            }
            uint64_t v60 = v11;
            if (v20 != v11) {
              goto LABEL_460;
            }
            if (!v20)
            {
              uint64_t v60 = 0;
              goto LABEL_439;
            }
            if (*(double *)v28 == *v206)
            {
              if (v20 == 1)
              {
                uint64_t v60 = 1;
                goto LABEL_439;
              }
              if (*(double *)(v28 + 8) == v206[1])
              {
                uint64_t v209 = 2;
                while (v20 != v209)
                {
                  double v210 = *(double *)(v28 + 8 * v209);
                  double v211 = v206[v209++];
                  if (v210 != v211) {
                    goto LABEL_470;
                  }
                }
                uint64_t v60 = v20;
                goto LABEL_439;
              }
            }
LABEL_470:
            uint64_t v60 = v20;
            unint64_t v11 = v20;
            BOOL v76 = __OFADD__(v175, v20);
            v175 += v20;
            if (v76) {
              goto LABEL_939;
            }
LABEL_461:
            v24[v174] = v12;
            unint64_t v208 = v32 + v175;
            if (__OFADD__(v32, v175)) {
              goto LABEL_942;
            }
            if ((v208 & 0x8000000000000000) != 0) {
              goto LABEL_945;
            }
            if (HIDWORD(v208)) {
              goto LABEL_948;
            }
            v25[v174] = v208;
            BOOL v76 = __OFADD__(v174++, 1);
            if (v76) {
              goto LABEL_951;
            }
            uint64_t v28 = (uint64_t)v206;
LABEL_439:
            ++a1;
            uint64_t v20 = v60;
            if (a1 == v173) {
              goto LABEL_342;
            }
          }
        }
        long long __src = v170;
        uint64_t v378 = v13;
        uint64_t v379 = v12;
        unint64_t v27 = (unint64_t)&v381;
        if (v375 < 0) {
          goto LABEL_997;
        }
        if (v375)
        {
          if (v375 >= 2) {
            uint64_t v175 = 2;
          }
          else {
            uint64_t v175 = v375;
          }
          memcpy(v168, &__src, 8 * v175);
          double v25 = v372;
          int v24 = v373;
          uint64_t v23 = v375;
          int64_t v32 = v376;
          LOBYTE(v30) = v374;
          if (v374)
          {
LABEL_631:
            unint64_t v27 = v175;
            if (v20 == v175)
            {
              if (!v20)
              {
                uint64_t v175 = 0;
                uint64_t v174 = 0;
                uint64_t v28 = (uint64_t)v366;
                goto LABEL_826;
              }
              if (*(double *)v28 == *v371)
              {
                if (v20 == 1)
                {
                  uint64_t v174 = 0;
                  uint64_t v175 = 0;
                  goto LABEL_822;
                }
                if (*(double *)(v28 + 8) == v371[1])
                {
                  uint64_t v332 = v20 - 2;
                  unint64_t v333 = v371 + 2;
                  uint64_t v334 = (double *)(v357 + 8 * v11 + 48);
                  unint64_t v27 = 1;
                  do
                  {
                    if (!v332) {
                      goto LABEL_996;
                    }
                    double v335 = *v334++;
                    double v336 = v335;
                    double v337 = *v333++;
                    --v332;
                  }
                  while (v336 == v337);
                }
              }
              unint64_t v27 = v20;
              uint64_t v175 = v20;
            }
LABEL_784:
            *int v24 = v13;
            unint64_t v301 = v32 + v175;
            if (v32 + v175 < 0) {
              goto LABEL_1093;
            }
            if (HIDWORD(v301)) {
              goto LABEL_1094;
            }
            *double v25 = v301;
            uint64_t v174 = 1;
            if (v23 < v175) {
              goto LABEL_997;
            }
            goto LABEL_787;
          }
        }
        else
        {
          uint64_t v175 = 0;
          if (v374) {
            goto LABEL_631;
          }
        }
        unint64_t v27 = v20;
        goto LABEL_784;
      }
      uint64_t v154 = swift_slowAlloc();
      if (v375 < 0) {
        goto LABEL_1072;
      }
      if ((unint64_t)(v375 + 0x1000000000000000) >> 61)
      {
LABEL_1073:
        __break(1u);
        goto LABEL_1074;
      }
      v372 = (_DWORD *)v154;
      int64_t v363 = a2;
      if (8 * v375 < 1025 || (uint64_t v154 = swift_stdlib_isStackAllocationSafe(), (v154 & 1) != 0))
      {
        uint64_t v352 = v350;
        MEMORY[0x1F4188790](v154, v155);
        BOOL v157 = (double *)((char *)v350 - v156);
        int64_t v32 = v376;
        uint64_t v20 = v376 - v11;
        if (v376 < v11) {
          goto LABEL_1048;
        }
        uint64_t v355 = v350;
        unint64_t v158 = (void *)a10[6];
        int64_t v357 = a10[4];
        uint64_t v353 = a10 + 4;
        uint64_t v354 = a10 + 6;
        uint64_t v356 = a10[5];
        uint64_t v359 = v158;
        uint64_t v28 = (uint64_t)&v158[v11 + 4];
        long long v159 = *(_OWORD *)a11;
        uint64_t v13 = *(void *)(a11 + 16);
        uint64_t v12 = *(void *)(a11 + 24);
        uint64_t v160 = *(void *)a11;
        unint64_t v27 = *(void *)(a11 + 32);
        a2 = *(void *)(v27 + 16);
        LOBYTE(v30) = v374;
        int v24 = v373;
        v371 = v157;
        if ((~v160 & 0x7FF0000000000000) != 0 || (v160 & 0xFFFFFFFFFFFFFLL) == 0)
        {
          uint64_t v23 = v375;
          if (!a2)
          {
            long long __src = v159;
            uint64_t v378 = v13;
            uint64_t v379 = v12;
            a2 = v363;
            if (v375 < 0) {
              goto LABEL_995;
            }
            if (v375)
            {
              if (v375 >= 2) {
                uint64_t v162 = 2;
              }
              else {
                uint64_t v162 = v375;
              }
              memcpy(v157, &__src, 8 * v162);
              double v22 = v372;
              int v24 = v373;
              uint64_t v23 = v375;
              int64_t v32 = v376;
              LOBYTE(v30) = v374;
              if ((v374 & 1) == 0) {
                goto LABEL_775;
              }
              goto LABEL_620;
            }
LABEL_774:
            uint64_t v162 = 0;
            if ((v30 & 1) == 0)
            {
LABEL_775:
              unint64_t v27 = v20;
              goto LABEL_776;
            }
LABEL_620:
            unint64_t v27 = v162;
            if (v20 == v162)
            {
              if (!v20) {
                goto LABEL_884;
              }
              unint64_t v27 = (unint64_t)v371;
              if (*(double *)v28 == *v371)
              {
                if (v20 != 1) {
                  goto LABEL_911;
                }
                uint64_t v161 = 0;
                uint64_t v162 = 0;
                goto LABEL_817;
              }
              goto LABEL_915;
            }
            goto LABEL_776;
          }
        }
        else
        {
          uint64_t v23 = v375;
          if (!a2)
          {
            uint64_t v360 = a10;
            uint64_t v161 = 0;
            uint64_t v162 = 0;
LABEL_332:
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v19 = (uint64_t)v360;
            a2 = v363;
            a1 = v365;
            uint64_t v28 = (uint64_t)v366;
            goto LABEL_333;
          }
        }
        uint64_t v360 = a10;
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        a1 = 0;
        uint64_t v19 = v27 + 32;
        unint64_t v11 = *(void *)(v370 + 40) + 32;
        uint64_t v60 = *(void *)(v370 + 48) + 32;
        uint64_t v368 = v60;
        while (1)
        {
          if (a1 == 0x100000000)
          {
            __break(1u);
LABEL_927:
            __break(1u);
LABEL_928:
            __break(1u);
LABEL_929:
            __break(1u);
LABEL_930:
            __break(1u);
LABEL_931:
            __break(1u);
LABEL_932:
            uint64_t v61 = 0;
            uint64_t v62 = 0;
            if (v23 < 0)
            {
LABEL_933:
              __break(1u);
              goto LABEL_934;
            }
LABEL_595:
            if (v30)
            {
              a1 = v365;
              if (v60)
              {
LABEL_753:
                v24[v61] = v12;
                unint64_t v291 = v32 + v62;
                if (v32 + v62 < 0) {
                  goto LABEL_1066;
                }
                if (HIDWORD(v291)) {
                  goto LABEL_1067;
                }
                v22[v61++] = v291;
              }
LABEL_756:
              swift_retain_n();
              swift_retain();
              swift_retain();
LABEL_49:
              swift_release_n();
              swift_release();
              swift_release();
              if ((v62 & 0x8000000000000000) == 0)
              {
                if (v367)
                {
                  uint64_t v63 = sub_184C9D670(v371, v62);
                  uint64_t v64 = v353;
                  swift_release();
                  *uint64_t v64 = v63;
                  if ((v61 & 0x8000000000000000) == 0)
                  {
                    unint64_t v65 = sub_184C9D670(v373, v61);
                    uint64_t v66 = v352;
                    swift_release();
                    *uint64_t v66 = v65;
                    __n128 v67 = sub_184CE1788(v372, v61);
                    swift_release();
                    *(void *)uint64_t v28 = v67;
                    goto LABEL_263;
                  }
LABEL_1020:
                  __break(1u);
LABEL_1021:
                  __break(1u);
LABEL_1022:
                  __break(1u);
LABEL_1023:
                  __break(1u);
LABEL_1024:
                  __break(1u);
LABEL_1025:
                  __break(1u);
LABEL_1026:
                  __break(1u);
LABEL_1027:
                  __break(1u);
LABEL_1028:
                  __break(1u);
LABEL_1029:
                  __break(1u);
LABEL_1030:
                  __break(1u);
                  goto LABEL_1031;
                }
                if (v369 >= v376)
                {
                  sub_184CE1520(v376, v369, v371, v62);
                  if (v61 < 0) {
                    goto LABEL_1020;
                  }
                  sub_184CE1520(a1, a2, v373, v61);
                  sub_184CE1654(a1, a2, v372, v61);
LABEL_263:
                  unint64_t v27 = v376 + v62;
                  if (__OFADD__(v376, v62)) {
                    goto LABEL_1023;
                  }
                  uint64_t v20 = v27 - v369;
                  unint64_t v138 = (double *)v373;
                  if (__OFSUB__(v27, v369)) {
                    goto LABEL_1026;
                  }
                  if (!v20)
                  {
LABEL_280:
                    uint64_t v85 = v370;
                    goto LABEL_706;
                  }
                  int64_t v139 = a1 + v61;
                  if (__OFADD__(a1, v61)) {
                    goto LABEL_1039;
                  }
                  int64_t v140 = *(char **)v28;
                  int64_t v141 = *(void *)(*(void *)v28 + 16);
                  if (v141 >= v139)
                  {
                    if (v139 != v141)
                    {
                      if (v139 >= v141) {
                        goto LABEL_1063;
                      }
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        int64_t v140 = sub_184D01D8C((uint64_t)v140);
                      }
                      unint64_t v138 = (double *)v373;
                      do
                      {
                        if (v139 < 0) {
                          goto LABEL_895;
                        }
                        unint64_t v27 = *((void *)v140 + 2);
                        if (v139 >= v27) {
                          goto LABEL_898;
                        }
                        unint64_t v27 = (unint64_t)&v140[4 * v139];
                        uint64_t v142 = *(unsigned int *)(v27 + 32);
                        BOOL v76 = __OFADD__(v142, v20);
                        unint64_t v143 = v142 + v20;
                        if (v76) {
                          goto LABEL_901;
                        }
                        if ((v143 & 0x8000000000000000) != 0) {
                          goto LABEL_904;
                        }
                        if (HIDWORD(v143)) {
                          goto LABEL_907;
                        }
                        ++v139;
                        *(_DWORD *)(v27 + 32) = v143;
                      }
                      while (v141 != v139);
                      *(void *)uint64_t v28 = v140;
                    }
                    goto LABEL_280;
                  }
LABEL_1040:
                  __break(1u);
LABEL_1041:
                  __break(1u);
LABEL_1042:
                  __break(1u);
LABEL_1043:
                  __break(1u);
LABEL_1044:
                  __break(1u);
                }
                __break(1u);
LABEL_1046:
                __break(1u);
LABEL_1047:
                __break(1u);
LABEL_1048:
                __break(1u);
LABEL_1049:
                __break(1u);
LABEL_1050:
                __break(1u);
                goto LABEL_1051;
              }
LABEL_1017:
              __break(1u);
LABEL_1018:
              __break(1u);
LABEL_1019:
              __break(1u);
              goto LABEL_1020;
            }
LABEL_752:
            a1 = v365;
            goto LABEL_753;
          }
          if (a1)
          {
            uint64_t v60 = *(unsigned int *)(v11 + 4 * a1 - 4);
            uint64_t v195 = v23 - v162;
            if (v23 < v162) {
              goto LABEL_929;
            }
          }
          else
          {
            uint64_t v60 = 0;
            uint64_t v195 = v23 - v162;
            if (v23 < v162) {
              goto LABEL_929;
            }
          }
          uint64_t v12 = *(void *)(v19 + 8 * a1);
          uint64_t v196 = *(unsigned int *)(v11 + 4 * a1);
          unint64_t v197 = &v157[v162];
          if (v196 == v60 || v23 == v162)
          {
            uint64_t v198 = 0;
            if ((v30 & 1) == 0)
            {
              uint64_t v60 = v20;
              unint64_t v197 = (double *)v28;
              goto LABEL_423;
            }
          }
          else
          {
            uint64_t v199 = v196 - v60;
            if (v199 >= v195) {
              uint64_t v198 = v195;
            }
            else {
              uint64_t v198 = v199;
            }
            memcpy(&v157[v162], (const void *)(v368 + 8 * v60), 8 * v198);
            LOBYTE(v30) = v374;
            if ((v374 & 1) == 0)
            {
              uint64_t v60 = v20;
              unint64_t v197 = (double *)v28;
              uint64_t v23 = v375;
              int64_t v32 = v376;
              double v22 = v372;
              int v24 = v373;
              BOOL v157 = v371;
LABEL_422:
              BOOL v76 = __OFADD__(v162, v198);
              v162 += v198;
              if (v76) {
                goto LABEL_938;
              }
              goto LABEL_423;
            }
            uint64_t v23 = v375;
            int64_t v32 = v376;
            double v22 = v372;
            int v24 = v373;
            BOOL v157 = v371;
            if (v198 < 0) {
              goto LABEL_960;
            }
          }
          uint64_t v60 = v198;
          if (v20 != v198) {
            goto LABEL_422;
          }
          if (!v20)
          {
            uint64_t v60 = 0;
            goto LABEL_401;
          }
          if (*(double *)v28 == *v197)
          {
            if (v20 == 1)
            {
              uint64_t v60 = 1;
              goto LABEL_401;
            }
            if (*(double *)(v28 + 8) == v197[1])
            {
              uint64_t v201 = 2;
              while (v20 != v201)
              {
                double v202 = *(double *)(v28 + 8 * v201);
                double v203 = v197[v201++];
                if (v202 != v203) {
                  goto LABEL_432;
                }
              }
              uint64_t v60 = v20;
              goto LABEL_401;
            }
          }
LABEL_432:
          uint64_t v60 = v20;
          BOOL v76 = __OFADD__(v162, v20);
          v162 += v20;
          if (v76) {
            goto LABEL_938;
          }
LABEL_423:
          v24[v161] = v12;
          unint64_t v200 = v32 + v162;
          if (__OFADD__(v32, v162)) {
            goto LABEL_941;
          }
          if ((v200 & 0x8000000000000000) != 0) {
            goto LABEL_944;
          }
          if (HIDWORD(v200)) {
            goto LABEL_947;
          }
          v22[v161] = v200;
          BOOL v76 = __OFADD__(v161++, 1);
          if (v76) {
            goto LABEL_950;
          }
          uint64_t v28 = (uint64_t)v197;
LABEL_401:
          ++a1;
          uint64_t v20 = v60;
          if (a1 == a2) {
            goto LABEL_332;
          }
        }
      }
      uint64_t v41 = (double *)swift_slowAlloc();
      int64_t v32 = v376;
      uint64_t v20 = v376 - v11;
      if (v376 < v11) {
        goto LABEL_1083;
      }
      uint64_t v355 = v350;
      int64_t v357 = a10[4];
      unint64_t v240 = (void *)a10[6];
      uint64_t v354 = a10 + 6;
      uint64_t v353 = a10 + 4;
      uint64_t v356 = a10[5];
      uint64_t v359 = v240;
      uint64_t v28 = (uint64_t)&v240[v11 + 4];
      long long v43 = *(_OWORD *)a11;
      uint64_t v13 = *(void *)(a11 + 16);
      uint64_t v12 = *(void *)(a11 + 24);
      uint64_t v241 = *(void *)a11;
      uint64_t v242 = *(void *)(a11 + 32);
      uint64_t v243 = *(void *)(v242 + 16);
      LOBYTE(v30) = v374;
      int v24 = v373;
      v371 = v41;
      if ((~v241 & 0x7FF0000000000000) != 0 || (v241 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        uint64_t v23 = v375;
        double v25 = v372;
        if (!v243) {
          goto LABEL_803;
        }
      }
      else
      {
        uint64_t v23 = v375;
        double v25 = v372;
        if (!v243)
        {
          uint64_t v360 = a10;
          unint64_t v11 = 0;
          uint64_t v244 = 0;
LABEL_585:
          swift_retain_n();
          swift_retain();
          swift_retain();
          uint64_t v19 = (uint64_t)v360;
          a2 = v363;
          a1 = v365;
          uint64_t v28 = (uint64_t)v366;
          goto LABEL_586;
        }
      }
      uint64_t v360 = a10;
      unint64_t v11 = 0;
      uint64_t v244 = 0;
      a2 = 0;
      a1 = v242 + 32;
      uint64_t v19 = *(void *)(v370 + 40) + 32;
      unint64_t v27 = *(void *)(v370 + 48) + 32;
      uint64_t v368 = v27;
      while (1)
      {
        if (a2 == 0x100000000)
        {
          __break(1u);
LABEL_991:
          __break(1u);
LABEL_992:
          __break(1u);
LABEL_993:
          __break(1u);
          goto LABEL_994;
        }
        if (a2)
        {
          unint64_t v27 = *(unsigned int *)(v19 + 4 * a2 - 4);
          uint64_t v253 = v23 - v244;
          if (v23 < v244) {
            goto LABEL_991;
          }
        }
        else
        {
          unint64_t v27 = 0;
          uint64_t v253 = v23 - v244;
          if (v23 < v244) {
            goto LABEL_991;
          }
        }
        uint64_t v12 = *(void *)(a1 + 8 * a2);
        uint64_t v254 = *(unsigned int *)(v19 + 4 * a2);
        int64_t v255 = &v41[v244];
        if (v254 == v27 || v23 == v244)
        {
          unint64_t v256 = 0;
          if ((v30 & 1) == 0)
          {
            unint64_t v27 = v20;
            int64_t v255 = (double *)v28;
            goto LABEL_676;
          }
        }
        else
        {
          int64_t v257 = v254 - v27;
          if (v257 >= v253) {
            unint64_t v256 = v253;
          }
          else {
            unint64_t v256 = v257;
          }
          memcpy(&v41[v244], (const void *)(v368 + 8 * v27), 8 * v256);
          LOBYTE(v30) = v374;
          if ((v374 & 1) == 0)
          {
            unint64_t v27 = v20;
            int64_t v255 = (double *)v28;
            uint64_t v23 = v375;
            int64_t v32 = v376;
            double v25 = v372;
            int v24 = v373;
            uint64_t v41 = v371;
            goto LABEL_676;
          }
          uint64_t v23 = v375;
          int64_t v32 = v376;
          double v25 = v372;
          int v24 = v373;
          uint64_t v41 = v371;
          if ((v256 & 0x8000000000000000) != 0) {
            goto LABEL_1008;
          }
        }
        unint64_t v27 = v256;
        if (v20 == v256)
        {
          if (!v20)
          {
            unint64_t v27 = 0;
            goto LABEL_650;
          }
          if (*(double *)v28 == *v255)
          {
            if (v20 == 1)
            {
              unint64_t v27 = 1;
              goto LABEL_650;
            }
            if (*(double *)(v28 + 8) == v255[1])
            {
              uint64_t v258 = 2;
              while (v20 != v258)
              {
                double v259 = *(double *)(v28 + 8 * v258);
                double v260 = v255[v258++];
                if (v259 != v260) {
                  goto LABEL_675;
                }
              }
              unint64_t v27 = v20;
              goto LABEL_650;
            }
          }
LABEL_675:
          unint64_t v27 = v20;
          unint64_t v256 = v20;
        }
LABEL_676:
        BOOL v76 = __OFADD__(v244, v256);
        v244 += v256;
        if (v76) {
          goto LABEL_1002;
        }
        v24[v11] = v12;
        unint64_t v261 = v32 + v244;
        if (__OFADD__(v32, v244)) {
          goto LABEL_1003;
        }
        if ((v261 & 0x8000000000000000) != 0) {
          goto LABEL_1004;
        }
        if (HIDWORD(v261)) {
          goto LABEL_1005;
        }
        v25[v11] = v261;
        BOOL v76 = __OFADD__(v11++, 1);
        if (v76) {
          goto LABEL_1006;
        }
        uint64_t v28 = (uint64_t)v255;
LABEL_650:
        ++a2;
        uint64_t v20 = v27;
        if (a2 == v243) {
          goto LABEL_585;
        }
      }
    }
  }
  uint64_t v359 = v350;
  uint64_t v35 = MEMORY[0x1F4188790](isStackAllocationSafe, v26);
  uint64_t v38 = (char *)v350 - v37;
  unint64_t v27 = (unint64_t)(a4 + 0x2000000000000000) >> 62;
  if (v27)
  {
LABEL_983:
    __break(1u);
    goto LABEL_984;
  }
  unint64_t v373 = v38;
  if (v20 >= 1025)
  {
    uint64_t v35 = swift_stdlib_isStackAllocationSafe();
    if ((v35 & 1) == 0)
    {
      uint64_t v86 = swift_slowAlloc();
      if ((v375 & 0x8000000000000000) == 0)
      {
        unint64_t v27 = (unint64_t)(v375 + 0x1000000000000000) >> 61;
        if (!v27)
        {
          v372 = (_DWORD *)v86;
          int64_t v363 = a2;
          if (8 * v375 < 1025 || (uint64_t v86 = swift_stdlib_isStackAllocationSafe(), (v86 & 1) != 0))
          {
            uint64_t v351 = v350;
            MEMORY[0x1F4188790](v86, v87);
            __int16 v88 = (double *)((char *)v350 - v27);
            int64_t v32 = v376;
            uint64_t v20 = v376 - v11;
            if (v376 < v11)
            {
LABEL_1010:
              __break(1u);
LABEL_1011:
              __break(1u);
LABEL_1012:
              __break(1u);
LABEL_1013:
              __break(1u);
LABEL_1014:
              __break(1u);
LABEL_1015:
              __break(1u);
LABEL_1016:
              __break(1u);
              goto LABEL_1017;
            }
            uint64_t v354 = v350;
            int64_t v89 = a10[6];
            uint64_t v356 = a10[4];
            uint64_t v352 = a10 + 4;
            uint64_t v353 = a10 + 6;
            uint64_t v355 = (void *)a10[5];
            int64_t v357 = v89;
            uint64_t v28 = v89 + 8 * v11 + 32;
            long long v90 = *(_OWORD *)a11;
            uint64_t v13 = *(void *)(a11 + 16);
            uint64_t v12 = *(void *)(a11 + 24);
            uint64_t v91 = *(void *)a11;
            uint64_t v60 = *(void *)(a11 + 32);
            a2 = *(void *)(v60 + 16);
            LOBYTE(v30) = v374;
            int v24 = v373;
            v371 = v88;
            if ((~v91 & 0x7FF0000000000000) == 0 && (v91 & 0xFFFFFFFFFFFFFLL) != 0)
            {
              uint64_t v23 = v375;
              if (!a2)
              {
                uint64_t v360 = a10;
                uint64_t v92 = 0;
                uint64_t v93 = 0;
LABEL_120:
                swift_retain_n();
                swift_retain();
                swift_retain();
                uint64_t v19 = (uint64_t)v360;
                a2 = v363;
                a1 = v365;
                uint64_t v28 = (uint64_t)v366;
LABEL_121:
                swift_release_n();
                swift_release();
                swift_release();
                if ((v93 & 0x8000000000000000) == 0)
                {
                  if (v367)
                  {
                    int64x2_t v94 = sub_184C9D670(v371, v93);
                    uint64_t v95 = v353;
                    swift_release();
                    *uint64_t v95 = v94;
                    if (v92 < 0) {
                      goto LABEL_1021;
                    }
                    BOOL v96 = sub_184C9D670(v373, v92);
                    unint64_t v97 = v352;
                    swift_release();
                    *unint64_t v97 = v96;
                    uint64_t v98 = sub_184CE1788(v372, v92);
                    swift_release();
                    *(void *)uint64_t v28 = v98;
                  }
                  else
                  {
                    if (v369 < v376) {
                      goto LABEL_1046;
                    }
                    sub_184CE1520(v376, v369, v371, v93);
                    if (v92 < 0) {
                      goto LABEL_1021;
                    }
                    sub_184CE1520(a1, a2, v373, v92);
                    sub_184CE1654(a1, a2, v372, v92);
                  }
                  unint64_t v27 = v376 + v93;
                  if (__OFADD__(v376, v93)) {
                    goto LABEL_1024;
                  }
                  uint64_t v20 = v27 - v369;
                  unint64_t v138 = (double *)v372;
                  if (__OFSUB__(v27, v369)) {
                    goto LABEL_1027;
                  }
                  if (v20)
                  {
                    int64_t v144 = a1 + v92;
                    if (__OFADD__(a1, v92)) {
                      goto LABEL_1041;
                    }
                    unint64_t v145 = *(char **)v28;
                    int64_t v146 = *(void *)(*(void *)v28 + 16);
                    if (v146 < v144) {
                      goto LABEL_1042;
                    }
                    if (v144 != v146)
                    {
                      if (v144 >= v146) {
                        goto LABEL_1064;
                      }
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        unint64_t v145 = sub_184D01D8C((uint64_t)v145);
                      }
                      unint64_t v138 = (double *)v372;
                      do
                      {
                        if (v144 < 0) {
                          goto LABEL_896;
                        }
                        unint64_t v27 = *((void *)v145 + 2);
                        if (v144 >= v27) {
                          goto LABEL_899;
                        }
                        unint64_t v27 = (unint64_t)&v145[4 * v144];
                        uint64_t v147 = *(unsigned int *)(v27 + 32);
                        BOOL v76 = __OFADD__(v147, v20);
                        unint64_t v148 = v147 + v20;
                        if (v76) {
                          goto LABEL_902;
                        }
                        if ((v148 & 0x8000000000000000) != 0) {
                          goto LABEL_905;
                        }
                        if (HIDWORD(v148)) {
                          goto LABEL_908;
                        }
                        ++v144;
                        *(_DWORD *)(v27 + 32) = v148;
                      }
                      while (v146 != v144);
                      *(void *)uint64_t v28 = v145;
                    }
                  }
                  uint64_t v85 = v370;
                  goto LABEL_706;
                }
                goto LABEL_1018;
              }
              goto LABEL_185;
            }
            uint64_t v23 = v375;
            if (a2)
            {
LABEL_185:
              uint64_t v360 = a10;
              uint64_t v92 = 0;
              uint64_t v93 = 0;
              a1 = 0;
              uint64_t v19 = v60 + 32;
              unint64_t v11 = *(void *)(v370 + 40) + 32;
              unint64_t v27 = *(void *)(v370 + 48) + 32;
              uint64_t v368 = v27;
              while (1)
              {
                if (a1 == 0x100000000) {
                  goto LABEL_854;
                }
                if (a1)
                {
                  unint64_t v27 = *(unsigned int *)(v11 + 4 * a1 - 4);
                  uint64_t v121 = v23 - v93;
                  if (v23 < v93) {
                    goto LABEL_857;
                  }
                }
                else
                {
                  unint64_t v27 = 0;
                  uint64_t v121 = v23 - v93;
                  if (v23 < v93) {
                    goto LABEL_857;
                  }
                }
                uint64_t v12 = *(void *)(v19 + 8 * a1);
                uint64_t v122 = *(unsigned int *)(v11 + 4 * a1);
                uint64_t v123 = &v88[v93];
                if (v122 == v27 || v23 == v93)
                {
                  unint64_t v124 = 0;
                  if ((v30 & 1) == 0)
                  {
                    unint64_t v27 = v20;
                    uint64_t v123 = (double *)v28;
                    goto LABEL_209;
                  }
                }
                else
                {
                  int64_t v125 = v122 - v27;
                  if (v125 >= v121) {
                    unint64_t v124 = v121;
                  }
                  else {
                    unint64_t v124 = v125;
                  }
                  memcpy(&v88[v93], (const void *)(v368 + 8 * v27), 8 * v124);
                  LOBYTE(v30) = v374;
                  if ((v374 & 1) == 0)
                  {
                    unint64_t v27 = v20;
                    uint64_t v123 = (double *)v28;
                    uint64_t v23 = v375;
                    int64_t v32 = v376;
                    double v22 = v372;
                    int v24 = v373;
                    __int16 v88 = v371;
LABEL_208:
                    BOOL v76 = __OFADD__(v93, v124);
                    v93 += v124;
                    if (v76) {
                      goto LABEL_870;
                    }
                    goto LABEL_209;
                  }
                  uint64_t v23 = v375;
                  int64_t v32 = v376;
                  double v22 = v372;
                  int v24 = v373;
                  __int16 v88 = v371;
                  if ((v124 & 0x8000000000000000) != 0) {
                    goto LABEL_893;
                  }
                }
                unint64_t v27 = v124;
                if (v20 != v124) {
                  goto LABEL_208;
                }
                if (!v20)
                {
                  unint64_t v27 = 0;
                  goto LABEL_187;
                }
                if (*(double *)v28 == *v123)
                {
                  if (v20 == 1)
                  {
                    unint64_t v27 = 1;
                    goto LABEL_187;
                  }
                  if (*(double *)(v28 + 8) == v123[1])
                  {
                    uint64_t v127 = 2;
                    while (v20 != v127)
                    {
                      double v128 = *(double *)(v28 + 8 * v127);
                      double v129 = v123[v127++];
                      if (v128 != v129) {
                        goto LABEL_218;
                      }
                    }
                    unint64_t v27 = v20;
                    goto LABEL_187;
                  }
                }
LABEL_218:
                unint64_t v27 = v20;
                BOOL v76 = __OFADD__(v93, v20);
                v93 += v20;
                if (v76) {
                  goto LABEL_870;
                }
LABEL_209:
                v24[v92] = v12;
                unint64_t v126 = v32 + v93;
                if (__OFADD__(v32, v93)) {
                  goto LABEL_873;
                }
                if ((v126 & 0x8000000000000000) != 0) {
                  goto LABEL_876;
                }
                if (HIDWORD(v126)) {
                  goto LABEL_879;
                }
                v22[v92] = v126;
                BOOL v76 = __OFADD__(v92++, 1);
                if (v76) {
                  goto LABEL_882;
                }
                uint64_t v28 = (uint64_t)v123;
LABEL_187:
                ++a1;
                uint64_t v20 = v27;
                if (a1 == a2) {
                  goto LABEL_120;
                }
              }
            }
            long long __src = v90;
            uint64_t v378 = v13;
            uint64_t v379 = v12;
            a2 = v363;
            if (v375 < 0) {
              goto LABEL_935;
            }
            if (v375)
            {
              if (v375 >= 2) {
                uint64_t v93 = 2;
              }
              else {
                uint64_t v93 = v375;
              }
              memcpy(v88, &__src, 8 * v93);
              double v22 = v372;
              int v24 = v373;
              uint64_t v23 = v375;
              int64_t v32 = v376;
              LOBYTE(v30) = v374;
              if (v374)
              {
LABEL_382:
                uint64_t v60 = v93;
                if (v20 == v93)
                {
                  if (!v20)
                  {
                    uint64_t v93 = 0;
                    uint64_t v92 = 0;
                    uint64_t v28 = (uint64_t)v366;
                    goto LABEL_761;
                  }
                  if (*(double *)v28 == *v371)
                  {
                    if (v20 == 1)
                    {
                      uint64_t v92 = 0;
                      uint64_t v93 = 0;
LABEL_757:
                      uint64_t v28 = (uint64_t)v366;
LABEL_758:
                      v24[v92] = v12;
                      unint64_t v292 = v32 + v93;
                      if (v32 + v93 < 0) {
                        goto LABEL_1068;
                      }
                      if (HIDWORD(v292)) {
                        goto LABEL_1069;
                      }
                      v22[v92++] = v292;
                      goto LABEL_761;
                    }
                    if (*(double *)(v28 + 8) == v371[1])
                    {
                      uint64_t v312 = v20 - 2;
                      unint64_t v313 = v371 + 2;
                      int v314 = (double *)(v357 + 8 * v11 + 48);
                      uint64_t v60 = 1;
                      while (v312)
                      {
                        double v315 = *v314++;
                        double v316 = v315;
                        double v317 = *v313++;
                        --v312;
                        if (v316 != v317) {
                          goto LABEL_847;
                        }
                      }
LABEL_934:
                      uint64_t v92 = 0;
                      uint64_t v93 = 0;
                      if (v23 < 0) {
                        goto LABEL_935;
                      }
                      goto LABEL_603;
                    }
                  }
LABEL_847:
                  uint64_t v60 = v20;
                  uint64_t v93 = v20;
                }
                goto LABEL_600;
              }
            }
            else
            {
              uint64_t v93 = 0;
              if (v374) {
                goto LABEL_382;
              }
            }
            uint64_t v60 = v20;
LABEL_600:
            *int v24 = v13;
            unint64_t v251 = v32 + v93;
            if (v32 + v93 < 0) {
              goto LABEL_1068;
            }
            if (HIDWORD(v251)) {
              goto LABEL_1069;
            }
            *double v22 = v251;
            uint64_t v92 = 1;
            if (v23 >= v93)
            {
LABEL_603:
              if ((v30 & 1) == 0) {
                goto LABEL_757;
              }
              uint64_t v28 = (uint64_t)v366;
              if (v60) {
                goto LABEL_758;
              }
LABEL_761:
              swift_retain_n();
              swift_retain();
              swift_retain();
              goto LABEL_121;
            }
LABEL_935:
            __break(1u);
            goto LABEL_936;
          }
          uint64_t v181 = (double *)swift_slowAlloc();
          int64_t v32 = v376;
          uint64_t v20 = v376 - v11;
          if (v376 < v11) {
            goto LABEL_1050;
          }
          uint64_t v354 = v350;
          uint64_t v356 = a10[4];
          int64_t v182 = a10[6];
          uint64_t v353 = a10 + 6;
          uint64_t v352 = a10 + 4;
          uint64_t v355 = (void *)a10[5];
          int64_t v357 = v182;
          uint64_t v28 = v182 + 8 * v11 + 32;
          long long v183 = *(_OWORD *)a11;
          uint64_t v13 = *(void *)(a11 + 16);
          uint64_t v12 = *(void *)(a11 + 24);
          uint64_t v184 = *(void *)a11;
          uint64_t v185 = *(void *)(a11 + 32);
          uint64_t v186 = *(void *)(v185 + 16);
          LOBYTE(v30) = v374;
          int v24 = v373;
          v371 = v181;
          if ((~v184 & 0x7FF0000000000000) == 0 && (v184 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            uint64_t v23 = v375;
            double v25 = v372;
            if (!v186)
            {
              uint64_t v360 = a10;
              uint64_t v187 = 0;
              uint64_t v188 = 0;
LABEL_352:
              swift_retain_n();
              swift_retain();
              swift_retain();
              uint64_t v19 = (uint64_t)v360;
              a2 = v363;
              a1 = v365;
              uint64_t v28 = (uint64_t)v366;
LABEL_353:
              swift_release_n();
              swift_release();
              swift_release();
              if ((v188 & 0x8000000000000000) == 0)
              {
                if (v367)
                {
                  uint64_t v189 = sub_184C9D670(v371, v188);
                  __n128 v190 = v353;
                  swift_release();
                  *__n128 v190 = v189;
                  if (v187 < 0) {
                    goto LABEL_1056;
                  }
                  __n128 v191 = sub_184C9D670(v373, v187);
                  unint64_t v192 = v352;
                  swift_release();
                  *unint64_t v192 = v191;
                  uint64_t v193 = sub_184CE1788(v372, v187);
                  swift_release();
                  *(void *)uint64_t v28 = v193;
                }
                else
                {
                  if (v369 < v376) {
                    goto LABEL_1082;
                  }
                  sub_184CE1520(v376, v369, v371, v188);
                  if (v187 < 0) {
                    goto LABEL_1056;
                  }
                  sub_184CE1520(a1, a2, v373, v187);
                  sub_184CE1654(a1, a2, v372, v187);
                }
                int64_t v233 = v376 + v188;
                uint64_t v234 = v371;
                if (__OFADD__(v376, v188)) {
                  goto LABEL_1061;
                }
                uint64_t v20 = v233 - v369;
                uint64_t v85 = v370;
                if (!__OFSUB__(v233, v369))
                {
                  if (v20)
                  {
                    int64_t v235 = a1 + v187;
                    if (__OFADD__(a1, v187)) {
                      goto LABEL_1078;
                    }
                    unint64_t v236 = *(char **)v28;
                    int64_t v237 = *(void *)(*(void *)v28 + 16);
                    if (v237 < v235) {
                      goto LABEL_1079;
                    }
                    if (v235 != v237)
                    {
                      if (v235 >= v237) {
                        goto LABEL_1090;
                      }
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        unint64_t v236 = sub_184D01D8C((uint64_t)v236);
                      }
                      uint64_t v234 = v371;
                      do
                      {
                        if (v235 < 0) {
                          goto LABEL_966;
                        }
                        unint64_t v27 = *((void *)v236 + 2);
                        if (v235 >= v27) {
                          goto LABEL_969;
                        }
                        unint64_t v27 = (unint64_t)&v236[4 * v235];
                        uint64_t v238 = *(unsigned int *)(v27 + 32);
                        BOOL v76 = __OFADD__(v238, v20);
                        unint64_t v239 = v238 + v20;
                        if (v76) {
                          goto LABEL_972;
                        }
                        if ((v239 & 0x8000000000000000) != 0) {
                          goto LABEL_975;
                        }
                        if (HIDWORD(v239)) {
                          goto LABEL_978;
                        }
                        ++v235;
                        *(_DWORD *)(v27 + 32) = v239;
                      }
                      while (v237 != v235);
                      *(void *)uint64_t v28 = v236;
                    }
                  }
                  MEMORY[0x18532B810](v234, -1, -1);
                  unint64_t v138 = (double *)v372;
                  goto LABEL_706;
                }
                goto LABEL_1062;
              }
              goto LABEL_1053;
            }
            goto LABEL_475;
          }
          uint64_t v23 = v375;
          double v25 = v372;
          if (v186)
          {
LABEL_475:
            uint64_t v360 = a10;
            uint64_t v187 = 0;
            uint64_t v188 = 0;
            a2 = 0;
            a1 = v185 + 32;
            uint64_t v19 = *(void *)(v370 + 40) + 32;
            uint64_t v60 = *(void *)(v370 + 48) + 32;
            uint64_t v368 = v60;
            while (1)
            {
              if (a2 == 0x100000000) {
                goto LABEL_928;
              }
              if (a2)
              {
                uint64_t v60 = *(unsigned int *)(v19 + 4 * a2 - 4);
                int64_t v212 = v23 - v188;
                if (v23 < v188) {
                  goto LABEL_931;
                }
              }
              else
              {
                uint64_t v60 = 0;
                int64_t v212 = v23 - v188;
                if (v23 < v188) {
                  goto LABEL_931;
                }
              }
              uint64_t v12 = *(void *)(a1 + 8 * a2);
              uint64_t v213 = *(unsigned int *)(v19 + 4 * a2);
              int64_t v214 = &v181[v188];
              if (v213 == v60 || v23 == v188)
              {
                unint64_t v11 = 0;
                if ((v30 & 1) == 0)
                {
                  uint64_t v60 = v20;
                  int64_t v214 = (double *)v28;
                  goto LABEL_499;
                }
              }
              else
              {
                int64_t v215 = v213 - v60;
                if (v215 >= v212) {
                  unint64_t v11 = v212;
                }
                else {
                  unint64_t v11 = v215;
                }
                memcpy(&v181[v188], (const void *)(v368 + 8 * v60), 8 * v11);
                LOBYTE(v30) = v374;
                if ((v374 & 1) == 0)
                {
                  uint64_t v60 = v20;
                  int64_t v214 = (double *)v28;
                  uint64_t v23 = v375;
                  int64_t v32 = v376;
                  double v25 = v372;
                  int v24 = v373;
                  uint64_t v181 = v371;
LABEL_498:
                  BOOL v76 = __OFADD__(v188, v11);
                  v188 += v11;
                  if (v76) {
                    goto LABEL_940;
                  }
                  goto LABEL_499;
                }
                uint64_t v23 = v375;
                int64_t v32 = v376;
                double v25 = v372;
                int v24 = v373;
                uint64_t v181 = v371;
                if ((v11 & 0x8000000000000000) != 0) {
                  goto LABEL_962;
                }
              }
              uint64_t v60 = v11;
              if (v20 != v11) {
                goto LABEL_498;
              }
              if (!v20)
              {
                uint64_t v60 = 0;
                goto LABEL_477;
              }
              if (*(double *)v28 == *v214)
              {
                if (v20 == 1)
                {
                  uint64_t v60 = 1;
                  goto LABEL_477;
                }
                if (*(double *)(v28 + 8) == v214[1])
                {
                  uint64_t v217 = 2;
                  while (v20 != v217)
                  {
                    double v218 = *(double *)(v28 + 8 * v217);
                    double v219 = v214[v217++];
                    if (v218 != v219) {
                      goto LABEL_508;
                    }
                  }
                  uint64_t v60 = v20;
                  goto LABEL_477;
                }
              }
LABEL_508:
              uint64_t v60 = v20;
              unint64_t v11 = v20;
              BOOL v76 = __OFADD__(v188, v20);
              v188 += v20;
              if (v76) {
                goto LABEL_940;
              }
LABEL_499:
              v24[v187] = v12;
              unint64_t v216 = v32 + v188;
              if (__OFADD__(v32, v188)) {
                goto LABEL_943;
              }
              if ((v216 & 0x8000000000000000) != 0) {
                goto LABEL_946;
              }
              if (HIDWORD(v216)) {
                goto LABEL_949;
              }
              v25[v187] = v216;
              BOOL v76 = __OFADD__(v187++, 1);
              if (v76) {
                goto LABEL_952;
              }
              uint64_t v28 = (uint64_t)v214;
LABEL_477:
              ++a2;
              uint64_t v20 = v60;
              if (a2 == v186) {
                goto LABEL_352;
              }
            }
          }
          long long __src = v183;
          uint64_t v378 = v13;
          uint64_t v379 = v12;
          unint64_t v27 = (unint64_t)&v381;
          if (v375 < 0) {
            goto LABEL_999;
          }
          if (v375)
          {
            if (v375 >= 2) {
              uint64_t v188 = 2;
            }
            else {
              uint64_t v188 = v375;
            }
            memcpy(v181, &__src, 8 * v188);
            double v25 = v372;
            int v24 = v373;
            uint64_t v23 = v375;
            int64_t v32 = v376;
            LOBYTE(v30) = v374;
            if (v374)
            {
LABEL_642:
              unint64_t v27 = v188;
              if (v20 == v188)
              {
                if (!v20)
                {
                  uint64_t v188 = 0;
                  uint64_t v187 = 0;
                  uint64_t v28 = (uint64_t)v366;
                  goto LABEL_831;
                }
                if (*(double *)v28 == *v371)
                {
                  if (v20 == 1)
                  {
                    uint64_t v187 = 0;
                    uint64_t v188 = 0;
LABEL_827:
                    uint64_t v28 = (uint64_t)v366;
LABEL_828:
                    v24[v187] = v12;
                    unint64_t v305 = v32 + v188;
                    if (v32 + v188 < 0) {
                      goto LABEL_1095;
                    }
                    if (HIDWORD(v305)) {
                      goto LABEL_1096;
                    }
                    v25[v187++] = v305;
                    goto LABEL_831;
                  }
                  if (*(double *)(v28 + 8) == v371[1])
                  {
                    uint64_t v338 = v20 - 2;
                    uint64_t v339 = v371 + 2;
                    uint64_t v340 = (double *)(v357 + 8 * v11 + 48);
                    unint64_t v27 = 1;
                    while (v338)
                    {
                      double v341 = *v340++;
                      double v342 = v341;
                      double v343 = *v339++;
                      --v338;
                      if (v342 != v343) {
                        goto LABEL_925;
                      }
                    }
LABEL_998:
                    uint64_t v187 = 0;
                    uint64_t v188 = 0;
                    if (v23 < 0) {
                      goto LABEL_999;
                    }
                    goto LABEL_795;
                  }
                }
LABEL_925:
                unint64_t v27 = v20;
                uint64_t v188 = v20;
              }
              goto LABEL_792;
            }
          }
          else
          {
            uint64_t v188 = 0;
            if (v374) {
              goto LABEL_642;
            }
          }
          unint64_t v27 = v20;
LABEL_792:
          *int v24 = v13;
          unint64_t v302 = v32 + v188;
          if (v32 + v188 < 0) {
            goto LABEL_1095;
          }
          if (HIDWORD(v302)) {
            goto LABEL_1096;
          }
          *double v25 = v302;
          uint64_t v187 = 1;
          if (v23 >= v188)
          {
LABEL_795:
            if ((v30 & 1) == 0) {
              goto LABEL_827;
            }
            uint64_t v28 = (uint64_t)v366;
            if (v27) {
              goto LABEL_828;
            }
LABEL_831:
            swift_retain_n();
            swift_retain();
            swift_retain();
            goto LABEL_353;
          }
LABEL_999:
          __break(1u);
          goto LABEL_1000;
        }
LABEL_1036:
        __break(1u);
        goto LABEL_1037;
      }
LABEL_1035:
      __break(1u);
      goto LABEL_1036;
    }
  }
  uint64_t v39 = MEMORY[0x1F4188790](v35, v36);
  double v22 = (_DWORD *)((char *)v350 - v27);
  if (v375 < 0) {
    goto LABEL_992;
  }
  unint64_t v27 = (unint64_t)(v375 + 0x1000000000000000) >> 61;
  if (v27) {
    goto LABEL_993;
  }
  int64_t v357 = v32;
  v372 = v22;
  if (8 * v375 >= 1025)
  {
    uint64_t v39 = swift_stdlib_isStackAllocationSafe();
    if ((v39 & 1) == 0)
    {
      __n128 v99 = (double *)swift_slowAlloc();
      int64_t v32 = v376;
      uint64_t v20 = v376 - v11;
      if (v376 < v11) {
        goto LABEL_1011;
      }
      uint64_t v353 = v350;
      uint64_t v355 = (void *)a10[4];
      uint64_t v100 = a10[6];
      uint64_t v352 = a10 + 6;
      uint64_t v351 = a10 + 4;
      uint64_t v354 = (void *)a10[5];
      uint64_t v356 = v100;
      a1 = v100 + 8 * v11 + 32;
      long long v101 = *(_OWORD *)a11;
      uint64_t v13 = *(void *)(a11 + 16);
      uint64_t v12 = *(void *)(a11 + 24);
      uint64_t v102 = *(void *)a11;
      uint64_t v103 = *(void *)(a11 + 32);
      uint64_t v104 = *(void *)(v103 + 16);
      LOBYTE(v30) = v374;
      int v24 = v373;
      v371 = v99;
      if ((~v102 & 0x7FF0000000000000) == 0 && (v102 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        uint64_t v23 = v375;
        double v25 = v372;
        if (!v104)
        {
          int64_t v363 = a2;
          uint64_t v360 = a10;
          uint64_t v105 = 0;
          uint64_t v106 = 0;
LABEL_130:
          swift_retain_n();
          swift_retain();
          swift_retain();
          uint64_t v19 = (uint64_t)v360;
          a2 = v363;
          a1 = v365;
          uint64_t v28 = (uint64_t)v366;
LABEL_131:
          swift_release_n();
          swift_release();
          swift_release();
          if ((v106 & 0x8000000000000000) == 0)
          {
            if (v367)
            {
              uint64_t v107 = sub_184C9D670(v371, v106);
              __n128 v108 = v352;
              swift_release();
              *__n128 v108 = v107;
              if (v105 < 0) {
                goto LABEL_1022;
              }
              __n128 v109 = sub_184C9D670(v373, v105);
              unint64_t v110 = v351;
              swift_release();
              *unint64_t v110 = v109;
              uint64_t v111 = sub_184CE1788(v372, v105);
              swift_release();
              *(void *)uint64_t v28 = v111;
            }
            else
            {
              if (v369 < v376) {
                goto LABEL_1047;
              }
              sub_184CE1520(v376, v369, v371, v106);
              if (v105 < 0) {
                goto LABEL_1022;
              }
              sub_184CE1520(a1, a2, v373, v105);
              sub_184CE1654(a1, a2, v372, v105);
            }
            unint64_t v27 = v376 + v106;
            unint64_t v138 = v371;
            if (__OFADD__(v376, v106)) {
              goto LABEL_1025;
            }
            uint64_t v20 = v27 - v369;
            uint64_t v85 = v370;
            if (__OFSUB__(v27, v369)) {
              goto LABEL_1028;
            }
            if (!v20) {
              goto LABEL_706;
            }
            int64_t v149 = a1 + v105;
            if (__OFADD__(a1, v105)) {
              goto LABEL_1043;
            }
            uint64_t v150 = *(char **)v28;
            int64_t v151 = *(void *)(*(void *)v28 + 16);
            if (v151 >= v149)
            {
              if (v149 == v151) {
                goto LABEL_706;
              }
              if (v149 < v151)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v150 = sub_184D01D8C((uint64_t)v150);
                }
                unint64_t v138 = v371;
                do
                {
                  if (v149 < 0) {
                    goto LABEL_897;
                  }
                  unint64_t v27 = *((void *)v150 + 2);
                  if (v149 >= v27) {
                    goto LABEL_900;
                  }
                  unint64_t v27 = (unint64_t)&v150[4 * v149];
                  uint64_t v152 = *(unsigned int *)(v27 + 32);
                  BOOL v76 = __OFADD__(v152, v20);
                  unint64_t v153 = v152 + v20;
                  if (v76) {
                    goto LABEL_903;
                  }
                  if ((v153 & 0x8000000000000000) != 0) {
                    goto LABEL_906;
                  }
                  if (HIDWORD(v153)) {
                    goto LABEL_909;
                  }
                  ++v149;
                  *(_DWORD *)(v27 + 32) = v153;
                }
                while (v151 != v149);
                *(void *)uint64_t v28 = v150;
                goto LABEL_706;
              }
              goto LABEL_1065;
            }
            goto LABEL_1044;
          }
          goto LABEL_1019;
        }
        goto LABEL_223;
      }
      uint64_t v23 = v375;
      double v25 = v372;
      if (v104)
      {
LABEL_223:
        int64_t v363 = a2;
        uint64_t v360 = a10;
        uint64_t v105 = 0;
        uint64_t v106 = 0;
        uint64_t v28 = 0;
        a2 = v103 + 32;
        uint64_t v19 = *(void *)(v370 + 40) + 32;
        unint64_t v27 = *(void *)(v370 + 48) + 32;
        uint64_t v368 = v27;
        while (1)
        {
          if (v28 == 0x100000000) {
            goto LABEL_855;
          }
          if (v28)
          {
            unint64_t v27 = *(unsigned int *)(v19 + 4 * v28 - 4);
            int64_t v130 = v23 - v106;
            if (v23 < v106) {
              goto LABEL_858;
            }
          }
          else
          {
            unint64_t v27 = 0;
            int64_t v130 = v23 - v106;
            if (v23 < v106) {
              goto LABEL_858;
            }
          }
          uint64_t v12 = *(void *)(a2 + 8 * v28);
          uint64_t v131 = *(unsigned int *)(v19 + 4 * v28);
          unint64_t v132 = &v99[v106];
          if (v131 == v27 || v23 == v106)
          {
            unint64_t v11 = 0;
            if ((v30 & 1) == 0)
            {
              unint64_t v27 = v20;
              unint64_t v132 = (double *)a1;
              goto LABEL_247;
            }
          }
          else
          {
            int64_t v133 = v131 - v27;
            if (v133 >= v130) {
              unint64_t v11 = v130;
            }
            else {
              unint64_t v11 = v133;
            }
            memcpy(&v99[v106], (const void *)(v368 + 8 * v27), 8 * v11);
            LOBYTE(v30) = v374;
            if ((v374 & 1) == 0)
            {
              unint64_t v27 = v20;
              unint64_t v132 = (double *)a1;
              uint64_t v23 = v375;
              int64_t v32 = v376;
              double v25 = v372;
              int v24 = v373;
              __n128 v99 = v371;
LABEL_246:
              BOOL v76 = __OFADD__(v106, v11);
              v106 += v11;
              if (v76) {
                goto LABEL_871;
              }
              goto LABEL_247;
            }
            uint64_t v23 = v375;
            int64_t v32 = v376;
            double v25 = v372;
            int v24 = v373;
            __n128 v99 = v371;
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_894;
            }
          }
          unint64_t v27 = v11;
          if (v20 != v11) {
            goto LABEL_246;
          }
          if (!v20)
          {
            unint64_t v27 = 0;
            goto LABEL_225;
          }
          if (*(double *)a1 == *v132)
          {
            if (v20 == 1)
            {
              unint64_t v27 = 1;
              goto LABEL_225;
            }
            if (*(double *)(a1 + 8) == v132[1])
            {
              uint64_t v135 = 2;
              while (v20 != v135)
              {
                double v136 = *(double *)(a1 + 8 * v135);
                double v137 = v132[v135++];
                if (v136 != v137) {
                  goto LABEL_256;
                }
              }
              unint64_t v27 = v20;
              goto LABEL_225;
            }
          }
LABEL_256:
          unint64_t v27 = v20;
          unint64_t v11 = v20;
          BOOL v76 = __OFADD__(v106, v20);
          v106 += v20;
          if (v76) {
            goto LABEL_871;
          }
LABEL_247:
          v24[v105] = v12;
          unint64_t v134 = v32 + v106;
          if (__OFADD__(v32, v106)) {
            goto LABEL_874;
          }
          if ((v134 & 0x8000000000000000) != 0) {
            goto LABEL_877;
          }
          if (HIDWORD(v134)) {
            goto LABEL_880;
          }
          v25[v105] = v134;
          BOOL v76 = __OFADD__(v105++, 1);
          if (v76) {
            goto LABEL_883;
          }
          a1 = (int64_t)v132;
LABEL_225:
          ++v28;
          uint64_t v20 = v27;
          if (v28 == v104) {
            goto LABEL_130;
          }
        }
      }
      long long __src = v101;
      uint64_t v378 = v13;
      uint64_t v379 = v12;
      if (v375 < 0) {
        goto LABEL_937;
      }
      if (v375)
      {
        if (v375 >= 2) {
          uint64_t v106 = 2;
        }
        else {
          uint64_t v106 = v375;
        }
        memcpy(v99, &__src, 8 * v106);
        double v25 = v372;
        int v24 = v373;
        uint64_t v23 = v375;
        int64_t v32 = v376;
        LOBYTE(v30) = v374;
        if (v374)
        {
LABEL_393:
          uint64_t v60 = v106;
          if (v20 == v106)
          {
            if (!v20)
            {
              uint64_t v106 = 0;
              uint64_t v105 = 0;
              a1 = v365;
              goto LABEL_766;
            }
            if (*(double *)a1 == *v371)
            {
              if (v20 == 1)
              {
                uint64_t v105 = 0;
                uint64_t v106 = 0;
LABEL_762:
                a1 = v365;
LABEL_763:
                v24[v105] = v12;
                unint64_t v293 = v32 + v106;
                if (v32 + v106 < 0) {
                  goto LABEL_1070;
                }
                if (HIDWORD(v293)) {
                  goto LABEL_1071;
                }
                v25[v105++] = v293;
                goto LABEL_766;
              }
              if (*(double *)(a1 + 8) == v371[1])
              {
                uint64_t v318 = v20 - 2;
                BOOL v319 = v371 + 2;
                uint64_t v320 = (double *)(v356 + 8 * v11 + 48);
                uint64_t v60 = 1;
                while (v318)
                {
                  double v321 = *v320++;
                  double v322 = v321;
                  double v323 = *v319++;
                  --v318;
                  if (v322 != v323) {
                    goto LABEL_852;
                  }
                }
LABEL_936:
                uint64_t v105 = 0;
                uint64_t v106 = 0;
                if (v23 < 0) {
                  goto LABEL_937;
                }
LABEL_611:
                if ((v30 & 1) == 0) {
                  goto LABEL_762;
                }
                a1 = v365;
                if (v60) {
                  goto LABEL_763;
                }
LABEL_766:
                swift_retain_n();
                swift_retain();
                swift_retain();
                goto LABEL_131;
              }
            }
LABEL_852:
            uint64_t v60 = v20;
            uint64_t v106 = v20;
          }
LABEL_608:
          *int v24 = v13;
          unint64_t v252 = v32 + v106;
          if (v32 + v106 < 0) {
            goto LABEL_1070;
          }
          if (HIDWORD(v252)) {
            goto LABEL_1071;
          }
          *double v25 = v252;
          uint64_t v105 = 1;
          if (v23 < v106)
          {
LABEL_937:
            __break(1u);
LABEL_938:
            __break(1u);
LABEL_939:
            __break(1u);
LABEL_940:
            __break(1u);
LABEL_941:
            __break(1u);
LABEL_942:
            __break(1u);
LABEL_943:
            __break(1u);
LABEL_944:
            __break(1u);
LABEL_945:
            __break(1u);
LABEL_946:
            __break(1u);
LABEL_947:
            __break(1u);
LABEL_948:
            __break(1u);
LABEL_949:
            __break(1u);
LABEL_950:
            __break(1u);
LABEL_951:
            __break(1u);
LABEL_952:
            __break(1u);
            goto LABEL_953;
          }
          goto LABEL_611;
        }
      }
      else
      {
        uint64_t v106 = 0;
        if (v374) {
          goto LABEL_393;
        }
      }
      uint64_t v60 = v20;
      goto LABEL_608;
    }
  }
  MEMORY[0x1F4188790](v39, v40);
  uint64_t v41 = (double *)((char *)v350 - v27);
  int64_t v32 = v376;
  uint64_t v20 = v376 - v11;
  if (v376 < v11)
  {
LABEL_963:
    __break(1u);
LABEL_964:
    __break(1u);
LABEL_965:
    __break(1u);
LABEL_966:
    __break(1u);
LABEL_967:
    __break(1u);
LABEL_968:
    __break(1u);
LABEL_969:
    __break(1u);
LABEL_970:
    __break(1u);
LABEL_971:
    __break(1u);
LABEL_972:
    __break(1u);
LABEL_973:
    __break(1u);
LABEL_974:
    __break(1u);
LABEL_975:
    __break(1u);
LABEL_976:
    __break(1u);
LABEL_977:
    __break(1u);
LABEL_978:
    __break(1u);
    goto LABEL_979;
  }
  v350[1] = v30;
  uint64_t v353 = v350;
  uint64_t v42 = a10[6];
  uint64_t v355 = (void *)a10[4];
  uint64_t v351 = a10 + 4;
  uint64_t v352 = a10 + 6;
  uint64_t v354 = (void *)a10[5];
  uint64_t v356 = v42;
  uint64_t v28 = v42 + 8 * v11 + 32;
  long long v43 = *(_OWORD *)a11;
  uint64_t v13 = *(void *)(a11 + 16);
  uint64_t v12 = *(void *)(a11 + 24);
  uint64_t v44 = *(void *)a11;
  uint64_t v45 = *(void *)(a11 + 32);
  a1 = *(void *)(v45 + 16);
  v371 = v41;
  if ((~v44 & 0x7FF0000000000000) == 0 && (v44 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    LOBYTE(v30) = v374;
    uint64_t v23 = v375;
    int v24 = v373;
    if (!a1)
    {
      int64_t v363 = a2;
      uint64_t v360 = a10;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
LABEL_31:
      swift_retain_n();
      swift_retain();
      uint64_t v20 = (uint64_t)v354;
      swift_retain();
      uint64_t v19 = (uint64_t)v360;
      a2 = v363;
      a1 = v365;
      uint64_t v28 = (uint64_t)v366;
      goto LABEL_32;
    }
    goto LABEL_54;
  }
  LOBYTE(v30) = v374;
  uint64_t v23 = v375;
  int v24 = v373;
  if (!a1)
  {
    long long __src = v43;
    uint64_t v378 = v13;
    uint64_t v379 = v12;
    a1 = v365;
    if (v375 < 0) {
      goto LABEL_860;
    }
    if (v375)
    {
      if (v375 >= 2) {
        uint64_t v47 = 2;
      }
      else {
        uint64_t v47 = v375;
      }
      memcpy(v41, &__src, 8 * v47);
      double v22 = v372;
      int v24 = v373;
      uint64_t v23 = v375;
      int64_t v32 = v376;
      LOBYTE(v30) = v374;
      if (v374)
      {
LABEL_141:
        unint64_t v27 = v47;
        if (v20 == v47)
        {
          if (!v20)
          {
            uint64_t v47 = 0;
            uint64_t v46 = 0;
            uint64_t v28 = (uint64_t)v366;
            uint64_t v20 = (uint64_t)v354;
LABEL_579:
            swift_retain_n();
            swift_retain();
            swift_retain();
LABEL_32:
            swift_release_n();
            swift_release();
            swift_release();
            if ((v47 & 0x8000000000000000) == 0)
            {
              unint64_t v27 = v367;
              if (v367)
              {
                char v48 = sub_184C9D670(v371, v47);
                uint64_t v20 = (uint64_t)v352;
                swift_release();
                *(void *)uint64_t v20 = v48;
                if ((v46 & 0x8000000000000000) == 0)
                {
                  unint64_t v49 = sub_184C9D670(v373, v46);
                  uint64_t v20 = (uint64_t)v351;
                  swift_release();
                  *(void *)uint64_t v20 = v49;
                  uint64_t v50 = sub_184CE1788(v372, v46);
                  swift_release();
                  *(void *)uint64_t v28 = v50;
                  goto LABEL_94;
                }
              }
              else
              {
                if (v369 < v376)
                {
LABEL_1007:
                  __break(1u);
LABEL_1008:
                  __break(1u);
                  goto LABEL_1009;
                }
                uint64_t v20 = (uint64_t)v352;
                sub_184CE1520(v376, v369, v371, v47);
                if ((v46 & 0x8000000000000000) == 0)
                {
                  sub_184CE1520(a1, a2, v373, v46);
                  uint64_t v20 = v28;
                  sub_184CE1654(a1, a2, v372, v46);
LABEL_94:
                  unint64_t v27 = v376 + v47;
                  if (!__OFADD__(v376, v47))
                  {
                    uint64_t v20 = v27 - v369;
                    if (!__OFSUB__(v27, v369))
                    {
                      if (!v20) {
                        goto LABEL_110;
                      }
                      int64_t v80 = a1 + v46;
                      if (!__OFADD__(a1, v46))
                      {
                        unint64_t v81 = *(char **)v28;
                        int64_t v82 = *(void *)(*(void *)v28 + 16);
                        if (v82 >= v80)
                        {
                          if (v80 != v82)
                          {
                            if (v80 >= v82) {
                              goto LABEL_1030;
                            }
                            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                              unint64_t v81 = sub_184D01D8C((uint64_t)v81);
                            }
                            do
                            {
                              if (v80 < 0) {
                                goto LABEL_833;
                              }
                              uint64_t v75 = (double *)*((void *)v81 + 2);
                              if (v80 >= (unint64_t)v75) {
                                goto LABEL_834;
                              }
                              uint64_t v75 = (double *)&v81[4 * v80];
                              uint64_t v83 = *((unsigned int *)v75 + 8);
                              BOOL v76 = __OFADD__(v83, v20);
                              unint64_t v84 = v83 + v20;
                              if (v76) {
                                goto LABEL_835;
                              }
                              if ((v84 & 0x8000000000000000) != 0) {
                                goto LABEL_836;
                              }
                              if (HIDWORD(v84)) {
                                goto LABEL_837;
                              }
                              ++v80;
                              *((_DWORD *)v75 + 8) = v84;
                            }
                            while (v82 != v80);
                            *(void *)uint64_t v28 = v81;
                          }
LABEL_110:
                          uint64_t v85 = v370;
                          goto LABEL_707;
                        }
                        goto LABEL_1001;
                      }
LABEL_1000:
                      __break(1u);
LABEL_1001:
                      __break(1u);
LABEL_1002:
                      __break(1u);
LABEL_1003:
                      __break(1u);
LABEL_1004:
                      __break(1u);
LABEL_1005:
                      __break(1u);
LABEL_1006:
                      __break(1u);
                      goto LABEL_1007;
                    }
                    goto LABEL_982;
                  }
LABEL_981:
                  __break(1u);
LABEL_982:
                  __break(1u);
                  goto LABEL_983;
                }
              }
LABEL_980:
              __break(1u);
              goto LABEL_981;
            }
LABEL_979:
            __break(1u);
            goto LABEL_980;
          }
          if (*(double *)v28 == *v371)
          {
            if (v20 == 1)
            {
              uint64_t v46 = 0;
              uint64_t v47 = 0;
              goto LABEL_575;
            }
            if (*(double *)(v28 + 8) == v371[1])
            {
              uint64_t v294 = v20 - 2;
              int64x2_t v295 = v371 + 2;
              uint64_t v296 = (double *)(v356 + 8 * v11 + 48);
              unint64_t v27 = 1;
              while (v294)
              {
                double v297 = *v296++;
                double v298 = v297;
                double v299 = *v295++;
                --v294;
                if (v298 != v299) {
                  goto LABEL_771;
                }
              }
              goto LABEL_859;
            }
          }
LABEL_771:
          unint64_t v27 = v20;
          uint64_t v47 = v20;
        }
LABEL_359:
        *int v24 = v13;
        unint64_t v194 = v32 + v47;
        if (v32 + v47 >= 0)
        {
          if (!HIDWORD(v194))
          {
            *double v22 = v194;
            uint64_t v46 = 1;
            if (v23 < v47) {
              goto LABEL_860;
            }
            goto LABEL_362;
          }
          goto LABEL_1032;
        }
        goto LABEL_1031;
      }
    }
    else
    {
      uint64_t v47 = 0;
      if (v374) {
        goto LABEL_141;
      }
    }
    unint64_t v27 = v20;
    goto LABEL_359;
  }
LABEL_54:
  int64_t v363 = a2;
  uint64_t v360 = a10;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  a2 = 0;
  uint64_t v19 = v45 + 32;
  unint64_t v11 = *(void *)(v370 + 40) + 32;
  uint64_t v368 = *(void *)(v370 + 48) + 32;
  while (1)
  {
    if (a2 == 0x100000000)
    {
      __break(1u);
LABEL_773:
      __break(1u);
      goto LABEL_774;
    }
    if (a2)
    {
      uint64_t v69 = *(unsigned int *)(v11 + 4 * a2 - 4);
      uint64_t v70 = v23 - v47;
      if (v23 < v47) {
        goto LABEL_773;
      }
    }
    else
    {
      uint64_t v69 = 0;
      uint64_t v70 = v23 - v47;
      if (v23 < v47) {
        goto LABEL_773;
      }
    }
    uint64_t v12 = *(void *)(v19 + 8 * a2);
    uint64_t v71 = *(unsigned int *)(v11 + 4 * a2);
    uint64_t v72 = &v41[v47];
    if (v71 == v69 || v23 == v47)
    {
      uint64_t v73 = 0;
      if ((v30 & 1) == 0)
      {
        uint64_t v68 = v20;
        uint64_t v72 = (double *)v28;
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v74 = v71 - v69;
      if (v74 >= v70) {
        uint64_t v73 = v70;
      }
      else {
        uint64_t v73 = v74;
      }
      memcpy(&v41[v47], (const void *)(v368 + 8 * v69), 8 * v73);
      LOBYTE(v30) = v374;
      if ((v374 & 1) == 0)
      {
        uint64_t v68 = v20;
        uint64_t v72 = (double *)v28;
        uint64_t v23 = v375;
        int64_t v32 = v376;
        double v22 = v372;
        int v24 = v373;
        uint64_t v41 = v371;
LABEL_77:
        BOOL v76 = __OFADD__(v47, v73);
        v47 += v73;
        if (v76) {
          break;
        }
        goto LABEL_78;
      }
      uint64_t v23 = v375;
      int64_t v32 = v376;
      double v22 = v372;
      int v24 = v373;
      uint64_t v41 = v371;
      if (v73 < 0)
      {
        __break(1u);
LABEL_833:
        __break(1u);
LABEL_834:
        __break(1u);
LABEL_835:
        __break(1u);
LABEL_836:
        __break(1u);
LABEL_837:
        __break(1u);
        goto LABEL_838;
      }
    }
    uint64_t v68 = v73;
    if (v20 != v73) {
      goto LABEL_77;
    }
    if (!v20)
    {
      uint64_t v68 = 0;
      goto LABEL_56;
    }
    *(void *)&long long v43 = *(void *)v28;
    if (*(double *)v28 == *v72)
    {
      if (v20 == 1)
      {
        uint64_t v68 = 1;
        goto LABEL_56;
      }
      *(void *)&long long v43 = *(void *)(v28 + 8);
      if (*(double *)&v43 == v72[1])
      {
        uint64_t v78 = 2;
        while (v20 != v78)
        {
          *(void *)&long long v43 = *(void *)(v28 + 8 * v78);
          double v79 = v72[v78++];
          if (*(double *)&v43 != v79) {
            goto LABEL_87;
          }
        }
        uint64_t v68 = v20;
        goto LABEL_56;
      }
    }
LABEL_87:
    uint64_t v68 = v20;
    BOOL v76 = __OFADD__(v47, v20);
    v47 += v20;
    if (v76) {
      break;
    }
LABEL_78:
    v24[v46] = v12;
    unint64_t v77 = v32 + v47;
    if (__OFADD__(v32, v47)) {
      goto LABEL_799;
    }
    if ((v77 & 0x8000000000000000) != 0) {
      goto LABEL_800;
    }
    if (HIDWORD(v77)) {
      goto LABEL_801;
    }
    v22[v46] = v77;
    BOOL v76 = __OFADD__(v46++, 1);
    if (v76) {
      goto LABEL_802;
    }
    uint64_t v28 = (uint64_t)v72;
LABEL_56:
    ++a2;
    uint64_t v20 = v68;
    if (a2 == a1) {
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_799:
  __break(1u);
LABEL_800:
  __break(1u);
LABEL_801:
  __break(1u);
LABEL_802:
  __break(1u);
LABEL_803:
  long long __src = v43;
  uint64_t v378 = v13;
  uint64_t v379 = v12;
  if (v23 < 0) {
    goto LABEL_1038;
  }
  if (!v23)
  {
LABEL_861:
    uint64_t v244 = 0;
    if (v30) {
      goto LABEL_809;
    }
    goto LABEL_862;
  }
  if (v23 >= 2) {
    uint64_t v244 = 2;
  }
  else {
    uint64_t v244 = v23;
  }
  memcpy(v41, &__src, 8 * v244);
  double v25 = v372;
  int v24 = v373;
  uint64_t v23 = v375;
  int64_t v32 = v376;
  LOBYTE(v30) = v374;
  if ((v374 & 1) == 0)
  {
LABEL_862:
    unint64_t v27 = v20;
    goto LABEL_863;
  }
LABEL_809:
  unint64_t v27 = v244;
  if (v20 != v244) {
    goto LABEL_863;
  }
  if (!v20)
  {
LABEL_957:
    uint64_t v244 = 0;
    unint64_t v11 = 0;
    uint64_t v28 = (uint64_t)v366;
    goto LABEL_891;
  }
  unint64_t v27 = (unint64_t)v371;
  if (*(double *)v28 != *v371) {
    goto LABEL_989;
  }
  if (v20 == 1)
  {
    unint64_t v11 = 0;
    uint64_t v244 = 0;
    goto LABEL_887;
  }
LABEL_985:
  if (*(double *)(v28 + 8) != *(double *)(v27 + 8))
  {
LABEL_989:
    unint64_t v27 = v20;
    uint64_t v244 = v20;
LABEL_863:
    *int v24 = v13;
    unint64_t v324 = v32 + v244;
    if (v32 + v244 >= 0)
    {
      if (!HIDWORD(v324))
      {
        *double v25 = v324;
        unint64_t v11 = 1;
        if (v23 < v244) {
          goto LABEL_1038;
        }
        goto LABEL_866;
      }
      goto LABEL_1102;
    }
LABEL_1101:
    __break(1u);
    goto LABEL_1102;
  }
  uint64_t v344 = v20 - 2;
  uint64_t v345 = (double *)(v27 + 16);
  uint64_t v346 = (double *)&v359[v11 + 6];
  unint64_t v27 = 1;
  while (v344)
  {
    double v347 = *v346++;
    double v348 = v347;
    double v349 = *v345++;
    --v344;
    if (v348 != v349) {
      goto LABEL_989;
    }
  }
LABEL_1037:
  unint64_t v11 = 0;
  uint64_t v244 = 0;
  if (v23 < 0)
  {
LABEL_1038:
    __break(1u);
LABEL_1039:
    __break(1u);
    goto LABEL_1040;
  }
LABEL_866:
  if ((v30 & 1) == 0)
  {
LABEL_887:
    uint64_t v28 = (uint64_t)v366;
    goto LABEL_888;
  }
  uint64_t v28 = (uint64_t)v366;
  if (v27)
  {
LABEL_888:
    v24[v11] = v12;
    unint64_t v325 = v32 + v244;
    if (v32 + v244 >= 0)
    {
      if (!HIDWORD(v325))
      {
        v25[v11++] = v325;
        goto LABEL_891;
      }
LABEL_1102:
      __break(1u);
    }
    goto LABEL_1101;
  }
LABEL_891:
  swift_retain_n();
  swift_retain();
  swift_retain();
LABEL_586:
  swift_release_n();
  swift_release();
  swift_release();
  if (v244 < 0) {
    goto LABEL_1084;
  }
  if (v367)
  {
    uint64_t v245 = sub_184C9D670(v371, v244);
    unint64_t v246 = v354;
    swift_release();
    *unint64_t v246 = v245;
    if ((v11 & 0x8000000000000000) == 0)
    {
      uint64_t v247 = sub_184C9D670(v373, v11);
      unint64_t v248 = v353;
      swift_release();
      *unint64_t v248 = v247;
      uint64_t v249 = sub_184CE1788(v372, v11);
      swift_release();
      *(void *)uint64_t v28 = v249;
      goto LABEL_687;
    }
LABEL_1085:
    __break(1u);
LABEL_1086:
    __break(1u);
    goto LABEL_1087;
  }
  if (v369 < v376) {
    goto LABEL_1099;
  }
  sub_184CE1520(v376, v369, v371, v244);
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_1085;
  }
  sub_184CE1520(a1, a2, v373, v11);
  sub_184CE1654(a1, a2, v372, v11);
LABEL_687:
  int64_t v262 = v376 + v244;
  unint64_t v263 = v371;
  if (__OFADD__(v376, v244)) {
    goto LABEL_1086;
  }
  uint64_t v264 = v262 - v369;
  uint64_t v85 = v370;
  if (__OFSUB__(v262, v369))
  {
LABEL_1087:
    __break(1u);
    goto LABEL_1088;
  }
  if (!v264) {
    goto LABEL_704;
  }
  int64_t v265 = a1 + v11;
  if (__OFADD__(a1, v11)) {
    goto LABEL_1097;
  }
  unint64_t v266 = *(char **)v28;
  int64_t v267 = *(void *)(*(void *)v28 + 16);
  if (v267 < v265) {
    goto LABEL_1098;
  }
  if (v265 == v267) {
    goto LABEL_704;
  }
  if (v265 >= v267) {
    goto LABEL_1100;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v266 = sub_184D01D8C((uint64_t)v266);
  }
  unint64_t v263 = v371;
  do
  {
    if (v265 < 0) {
      goto LABEL_1012;
    }
    unint64_t v27 = *((void *)v266 + 2);
    if (v265 >= v27) {
      goto LABEL_1013;
    }
    unint64_t v27 = (unint64_t)&v266[4 * v265];
    uint64_t v268 = *(unsigned int *)(v27 + 32);
    BOOL v76 = __OFADD__(v268, v264);
    unint64_t v269 = v268 + v264;
    if (v76) {
      goto LABEL_1014;
    }
    if ((v269 & 0x8000000000000000) != 0) {
      goto LABEL_1015;
    }
    if (HIDWORD(v269)) {
      goto LABEL_1016;
    }
    ++v265;
    *(_DWORD *)(v27 + 32) = v269;
  }
  while (v267 != v265);
  *(void *)uint64_t v28 = v266;
LABEL_704:
  MEMORY[0x18532B810](v263, -1, -1);
  int64_t v221 = (double *)v372;
LABEL_705:
  MEMORY[0x18532B810](v221, -1, -1);
  unint64_t v138 = (double *)v373;
LABEL_706:
  MEMORY[0x18532B810](v138, -1, -1);
LABEL_707:
  uint64_t v270 = *(void *)(v19 + 32);
  if (*(void *)(v270 + 16))
  {
    if (v362)
    {
      if (a9)
      {
        uint64_t v273 = *(char **)v28;
        uint64_t v274 = *(void *)(*(void *)v28 + 16);
        if (v274)
        {
          uint64_t v275 = (double *)(*(void *)(v19 + 48) + 32);
          uint64_t v276 = *((unsigned int *)v273 + 8);
          if (v276)
          {
            double v277 = v275[v276 - 1];
            double v278 = NAN;
            if ((*(void *)v275 & 0xFFFFFFFFFFFFFLL) == 0) {
              double v278 = *v275;
            }
            if ((~*(void *)v275 & 0x7FF0000000000000) != 0) {
              double v271 = *v275;
            }
            else {
              double v271 = v278;
            }
            if ((~*(void *)&v277 & 0x7FF0000000000000) == 0
              && (*(void *)&v275[v276 - 1] & 0xFFFFFFFFFFFFFLL) != 0)
            {
              double v277 = NAN;
            }
          }
          else
          {
            double v277 = NAN;
            double v271 = NAN;
          }
          uint64_t v279 = v274 - 1;
          if (v279)
          {
            unint64_t v284 = (unsigned int *)(v273 + 36);
            do
            {
              unsigned int v286 = *v284++;
              uint64_t v285 = v286;
              if (v276 != v286)
              {
                unint64_t v287 = &v275[v276];
                double v288 = v287[v285 + ~v276];
                if ((*(void *)v287 & 0xFFFFFFFFFFFFFLL) != 0) {
                  double v289 = v271;
                }
                else {
                  double v289 = *v287;
                }
                if ((~*(void *)v287 & 0x7FF0000000000000) != 0) {
                  double v289 = *v287;
                }
                if (v271 > *v287) {
                  double v271 = v289;
                }
                if (v288 >= v277)
                {
                  double v290 = v287[v285 + ~v276];
                  if ((~*(void *)&v288 & 0x7FF0000000000000) != 0)
                  {
                    double v277 = v288;
                  }
                  else if ((*(void *)&v290 & 0xFFFFFFFFFFFFFLL) == 0)
                  {
                    double v277 = v288;
                  }
                }
              }
              uint64_t v276 = v285;
              --v279;
            }
            while (v279);
          }
        }
        else
        {
          double v277 = NAN;
          double v271 = NAN;
        }
        double v364 = v277;
      }
      else
      {
        double v271 = *(double *)v19;
      }
    }
    else
    {
      double v271 = v358;
      if (a9) {
        double v364 = *(double *)(v19 + 8);
      }
    }
    double v280 = (uint64_t *)(v19 + 16);
    if (!a1) {
      double v280 = (uint64_t *)(v270 + 32);
    }
    uint64_t v281 = *v280;
    if (v361 == a2)
    {
      uint64_t v272 = sub_184CE1444(v270);
      if (v282)
      {
        __break(1u);
        goto LABEL_734;
      }
    }
    else
    {
LABEL_734:
      uint64_t v272 = *(void *)(v19 + 24);
    }
    *(double *)uint64_t v19 = v271;
    *(double *)(v19 + 8) = v364;
    *(void *)(v19 + 16) = v281;
  }
  else
  {
    uint64_t v272 = 0x7FF8000000000000;
    *(int64x2_t *)uint64_t v19 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(void *)(v19 + 16) = 0x7FF8000000000000;
  }
  *(void *)(v19 + 24) = v272;
  sub_184CEB9B4();
  return sub_184CEC3DC(v85);
}

uint64_t sub_184CE87CC(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_184CE89FC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)sub_184CEC424, (void (*)(__n128 *, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))sub_184CDE658, (uint64_t)sub_184CEC424, (uint64_t)sub_184CEC424, (uint64_t)sub_184CEC424, (uint64_t)sub_184CEC424,
           (uint64_t)sub_184CEC424,
           (uint64_t)sub_184CEC424,
           (uint64_t)sub_184CEC424);
}

uint64_t sub_184CE88E4(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_184CE89FC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)sub_184CEC424, (void (*)(__n128 *, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))sub_184CDE6B0, (uint64_t)sub_184CEC424, (uint64_t)sub_184CEC424, (uint64_t)sub_184CEC424, (uint64_t)sub_184CEC424,
           (uint64_t)sub_184CEC424,
           (uint64_t)sub_184CEC424,
           (uint64_t)sub_184CEC424);
}

uint64_t sub_184CE89FC(uint64_t a1, int64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(__n128 *, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v280 = a7;
  double v277 = *(double *)&a6;
  uint64_t v305 = *MEMORY[0x1E4F143B8];
  uint64_t isStackAllocationSafe = sub_184CEB8F0();
  uint64_t v30 = *(void *)(a10 + 40);
  unint64_t v31 = *(void *)(v30 + 16);
  BOOL v32 = v31 == a2;
  int v291 = a3;
  if (a1)
  {
    unint64_t v33 = a1 - 1;
    if (__OFSUB__(a1, 1))
    {
LABEL_312:
      __break(1u);
      goto LABEL_313;
    }
    if (v33 >= v31)
    {
LABEL_313:
      __break(1u);
      goto LABEL_314;
    }
    unint64_t v34 = *(unsigned int *)(v30 + 32 + 4 * v33);
    if (a1 <= 1)
    {
      unint64_t v293 = 0;
      unint64_t v35 = 0;
      BOOL v32 = 0;
      if (!a2) {
        goto LABEL_14;
      }
    }
    else
    {
      if (a1 - 2 >= v31)
      {
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
        goto LABEL_341;
      }
      BOOL v32 = 0;
      unint64_t v35 = *(unsigned int *)(v30 + 32 + 4 * (a1 - 2));
      if (!a2)
      {
        unint64_t v293 = 0;
        goto LABEL_14;
      }
    }
  }
  else
  {
    unint64_t v293 = 0;
    unint64_t v35 = 0;
    unint64_t v34 = 0;
    if (!a2) {
      goto LABEL_14;
    }
  }
  unint64_t v36 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
LABEL_314:
    __break(1u);
    goto LABEL_315;
  }
  if (v36 >= v31)
  {
LABEL_315:
    __break(1u);
    goto LABEL_316;
  }
  unint64_t v293 = *(unsigned int *)(v30 + 4 * v36 + 32);
LABEL_14:
  double v282 = *(double *)&a8;
  int64_t v290 = a2;
  uint64_t v37 = a4 * a5;
  if ((unsigned __int128)(a4 * (__int128)a5) >> 64 != (a4 * a5) >> 63)
  {
LABEL_311:
    __break(1u);
    goto LABEL_312;
  }
  if (a4 < 0)
  {
LABEL_316:
    __break(1u);
LABEL_317:
    __break(1u);
LABEL_318:
    __break(1u);
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
LABEL_321:
    __break(1u);
LABEL_322:
    __break(1u);
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
LABEL_327:
    __break(1u);
LABEL_328:
    __break(1u);
LABEL_329:
    __break(1u);
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
    goto LABEL_334;
  }
  if ((unint64_t)(a4 + 0x1000000000000000) >> 61) {
    goto LABEL_317;
  }
  unint64_t v295 = v34;
  unint64_t v279 = v31;
  uint64_t v288 = a13;
  uint64_t v287 = a12;
  uint64_t v294 = a11;
  uint64_t v38 = 4 * a4;
  uint64_t v283 = a10;
  unint64_t v284 = a1;
  uint64_t v285 = (char **)(a10 + 40);
  BOOL v286 = v32;
  double v289 = a15;
  if (8 * a4 >= 1025)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v63 = swift_slowAlloc();
      unint64_t v292 = (char *)v63;
      if ((unint64_t)(a4 + 0x2000000000000000) >> 62)
      {
LABEL_366:
        __break(1u);
        goto LABEL_367;
      }
      if (v38 < 1025 || (uint64_t v63 = swift_stdlib_isStackAllocationSafe(), (v63 & 1) != 0))
      {
        uint64_t v65 = MEMORY[0x1F4188790](v63, v64);
        uint64_t v281 = (char *)&v274 - v67;
        if (v37 < 0)
        {
LABEL_367:
          __break(1u);
          goto LABEL_368;
        }
        if ((unint64_t)(v37 + 0x1000000000000000) >> 61)
        {
LABEL_368:
          __break(1u);
          goto LABEL_369;
        }
        double v278 = &v274;
        if (8 * v37 < 1025 || (uint64_t v65 = swift_stdlib_isStackAllocationSafe(), (v65 & 1) != 0))
        {
          uint64_t v275 = &v274;
          uint64_t v68 = MEMORY[0x1F4188790](v65, v66);
          uint64_t v70 = (char *)&v274 - v69;
          uint64_t v301 = 0;
          uint64_t v302 = 0;
          if (v295 < v35)
          {
LABEL_350:
            __break(1u);
            goto LABEL_351;
          }
          uint64_t v276 = &v274;
          uint64_t v71 = *(void *)(a10 + 48);
          __n128 v72 = *(__n128 *)a10;
          long long v73 = *(_OWORD *)(a10 + 16);
          uint64_t v74 = *(void *)(a10 + 32);
          uint64_t v75 = *(void *)(a10 + 40);
          uint64_t v303 = v71 + 8 * v35 + 32;
          uint64_t v304 = v295 - v35;
          __n128 v296 = v72;
          long long v297 = v73;
          uint64_t v298 = v74;
          uint64_t v299 = v75;
          uint64_t v300 = v71;
          MEMORY[0x1F4188790](v68, v72);
          uint64_t v262 = (uint64_t)v70;
          uint64_t v263 = a4 * a5;
          uint64_t v264 = &v301;
          uint64_t v265 = a4 * a5;
          char v266 = v291 & 1;
          int64_t v267 = &v303;
          uint64_t v268 = v292;
          uint64_t v269 = a4;
          uint64_t v270 = &v302;
          double v271 = v281;
          uint64_t v272 = a4;
          uint64_t v273 = v76;
          swift_retain_n();
          swift_retain();
          swift_retain();
          v289(&v296, a20, v261, v294, v287, v288);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v77 = v301;
          if (v301 < 0)
          {
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }
          uint64_t v78 = v283;
          int64_t v57 = v290;
          unint64_t v62 = v284;
          long long v58 = v285;
          if (v286)
          {
            double v79 = sub_184C9D670(v70, v301);
            swift_release();
            *(void *)(a10 + 48) = v79;
            uint64_t v80 = v302;
            if (v302 < 0)
            {
LABEL_356:
              __break(1u);
              goto LABEL_357;
            }
            unint64_t v81 = sub_184C9D670(v292, v302);
            swift_release();
            *(void *)(a10 + 32) = v81;
            int64_t v82 = (char *)sub_184CE1788(v281, v80);
            swift_release();
            *long long v58 = v82;
          }
          else
          {
            if (v293 < v295)
            {
LABEL_377:
              __break(1u);
              goto LABEL_378;
            }
            sub_184CE1520(v295, v293, v70, v301);
            uint64_t v80 = v302;
            if (v302 < 0) {
              goto LABEL_356;
            }
            sub_184CE1520(v62, v57, v292, v302);
            sub_184CE1654(v62, v57, v281, v80);
          }
          uint64_t v125 = v295 + v77;
          if (__OFADD__(v295, v77))
          {
LABEL_359:
            __break(1u);
            goto LABEL_360;
          }
          uint64_t v126 = v125 - v293;
          if (__OFSUB__(v125, v293))
          {
LABEL_362:
            __break(1u);
            goto LABEL_363;
          }
          if (v126)
          {
            int64_t v127 = v62 + v80;
            if (__OFADD__(v62, v80))
            {
LABEL_371:
              __break(1u);
              goto LABEL_372;
            }
            double v128 = *v58;
            int64_t v129 = *((void *)*v58 + 2);
            if (v129 < v127)
            {
LABEL_372:
              __break(1u);
              goto LABEL_373;
            }
            if (v127 != v129)
            {
              if (v127 >= v129)
              {
LABEL_395:
                __break(1u);
                goto LABEL_396;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                double v128 = sub_184D01D8C((uint64_t)v128);
              }
              do
              {
                if (v127 < 0) {
                  goto LABEL_296;
                }
                if ((unint64_t)v127 >= *((void *)v128 + 2)) {
                  goto LABEL_299;
                }
                int64_t v130 = &v128[4 * v127];
                uint64_t v131 = *((unsigned int *)v130 + 8);
                BOOL v90 = __OFADD__(v131, v126);
                unint64_t v132 = v131 + v126;
                if (v90) {
                  goto LABEL_302;
                }
                if ((v132 & 0x8000000000000000) != 0) {
                  goto LABEL_305;
                }
                if (HIDWORD(v132)) {
                  goto LABEL_308;
                }
                ++v127;
                *((_DWORD *)v130 + 8) = v132;
              }
              while (v129 != v127);
              *long long v58 = v128;
            }
          }
        }
        else
        {
          uint64_t v165 = swift_slowAlloc();
          uint64_t v301 = 0;
          uint64_t v302 = 0;
          if (v295 < v35)
          {
LABEL_381:
            __break(1u);
            goto LABEL_382;
          }
          uint64_t v166 = *(void *)(a10 + 48);
          __n128 v167 = *(__n128 *)a10;
          long long v168 = *(_OWORD *)(a10 + 16);
          uint64_t v169 = *(void *)(a10 + 32);
          uint64_t v170 = *(void *)(a10 + 40);
          uint64_t v303 = v166 + 8 * v35 + 32;
          uint64_t v304 = v295 - v35;
          __n128 v296 = v167;
          long long v297 = v168;
          uint64_t v298 = v169;
          uint64_t v299 = v170;
          uint64_t v300 = v166;
          uint64_t v276 = (uint64_t *)MEMORY[0x1F4188790](v165, v167);
          uint64_t v262 = (uint64_t)v276;
          uint64_t v263 = a4 * a5;
          uint64_t v264 = &v301;
          uint64_t v265 = a4 * a5;
          char v266 = v291 & 1;
          int64_t v267 = &v303;
          uint64_t v268 = v292;
          uint64_t v269 = a4;
          uint64_t v270 = &v302;
          double v271 = v281;
          uint64_t v272 = a4;
          uint64_t v273 = v171;
          swift_retain_n();
          swift_retain();
          swift_retain();
          v289(&v296, a19, v261, v294, v287, v288);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v172 = v301;
          if (v301 < 0)
          {
LABEL_384:
            __break(1u);
            goto LABEL_385;
          }
          uint64_t v78 = v283;
          int64_t v57 = v290;
          unint64_t v62 = v284;
          unint64_t v173 = v293;
          if (v286)
          {
            uint64_t v174 = v276;
            uint64_t v175 = sub_184C9D670(v276, v301);
            swift_release();
            *(void *)(a10 + 48) = v175;
            uint64_t v176 = v302;
            if (v302 < 0)
            {
LABEL_387:
              __break(1u);
              goto LABEL_388;
            }
            unint64_t v177 = sub_184C9D670(v292, v302);
            swift_release();
            *(void *)(a10 + 32) = v177;
            uint64_t v178 = (char *)sub_184CE1788(v281, v176);
            long long v58 = v285;
            swift_release();
            *long long v58 = v178;
          }
          else
          {
            uint64_t v174 = v276;
            if (v293 < v295)
            {
LABEL_407:
              __break(1u);
              goto LABEL_408;
            }
            sub_184CE1520(v295, v293, v276, v301);
            uint64_t v176 = v302;
            if (v302 < 0) {
              goto LABEL_387;
            }
            sub_184CE1520(v62, v57, v292, v302);
            long long v58 = v285;
            sub_184CE1654(v62, v57, v281, v176);
          }
          uint64_t v200 = v295 + v172;
          if (__OFADD__(v295, v172))
          {
LABEL_391:
            __break(1u);
            goto LABEL_392;
          }
          uint64_t v201 = v200 - v173;
          if (__OFSUB__(v200, v173))
          {
LABEL_392:
            __break(1u);
            goto LABEL_393;
          }
          if (v201)
          {
            int64_t v202 = v62 + v176;
            if (__OFADD__(v62, v176))
            {
LABEL_402:
              __break(1u);
              goto LABEL_403;
            }
            double v203 = *v58;
            int64_t v204 = *((void *)*v58 + 2);
            if (v204 < v202)
            {
LABEL_403:
              __break(1u);
              goto LABEL_404;
            }
            if (v202 != v204)
            {
              if (v202 >= v204)
              {
LABEL_415:
                __break(1u);
                goto LABEL_416;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                double v203 = sub_184D01D8C((uint64_t)v203);
              }
              do
              {
                if (v202 < 0) {
                  goto LABEL_319;
                }
                if ((unint64_t)v202 >= *((void *)v203 + 2)) {
                  goto LABEL_322;
                }
                uint64_t v205 = &v203[4 * v202];
                uint64_t v206 = *((unsigned int *)v205 + 8);
                BOOL v90 = __OFADD__(v206, v201);
                unint64_t v207 = v206 + v201;
                if (v90) {
                  goto LABEL_325;
                }
                if ((v207 & 0x8000000000000000) != 0) {
                  goto LABEL_328;
                }
                if (HIDWORD(v207)) {
                  goto LABEL_331;
                }
                ++v202;
                *((_DWORD *)v205 + 8) = v207;
              }
              while (v204 != v202);
              *long long v58 = v203;
            }
          }
          MEMORY[0x18532B810](v174, -1, -1);
        }
      }
      else
      {
        uint64_t v149 = swift_slowAlloc();
        uint64_t v281 = (char *)v149;
        if (v37 < 0)
        {
LABEL_398:
          __break(1u);
          goto LABEL_399;
        }
        if ((unint64_t)(v37 + 0x1000000000000000) >> 61)
        {
LABEL_399:
          __break(1u);
          goto LABEL_400;
        }
        if (8 * v37 < 1025 || (uint64_t v149 = swift_stdlib_isStackAllocationSafe(), (v149 & 1) != 0))
        {
          uint64_t v276 = &v274;
          uint64_t v151 = MEMORY[0x1F4188790](v149, v150);
          unint64_t v153 = (char *)&v274 - v152;
          uint64_t v301 = 0;
          uint64_t v302 = 0;
          if (v295 < v35)
          {
LABEL_380:
            __break(1u);
            goto LABEL_381;
          }
          double v278 = &v274;
          uint64_t v154 = *(void *)(a10 + 48);
          __n128 v155 = *(__n128 *)a10;
          long long v156 = *(_OWORD *)(a10 + 16);
          uint64_t v157 = *(void *)(a10 + 32);
          uint64_t v158 = *(void *)(a10 + 40);
          uint64_t v303 = v154 + 8 * v35 + 32;
          uint64_t v304 = v295 - v35;
          __n128 v296 = v155;
          long long v297 = v156;
          uint64_t v298 = v157;
          uint64_t v299 = v158;
          uint64_t v300 = v154;
          MEMORY[0x1F4188790](v151, v155);
          uint64_t v262 = (uint64_t)v153;
          uint64_t v263 = a4 * a5;
          uint64_t v264 = &v301;
          uint64_t v265 = a4 * a5;
          char v266 = v291 & 1;
          int64_t v267 = &v303;
          uint64_t v268 = v292;
          uint64_t v269 = a4;
          uint64_t v270 = &v302;
          double v271 = v281;
          uint64_t v272 = a4;
          uint64_t v273 = v159;
          swift_retain_n();
          swift_retain();
          swift_retain();
          v289(&v296, a22, v261, v294, v287, v288);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v160 = v301;
          if (v301 < 0)
          {
LABEL_383:
            __break(1u);
            goto LABEL_384;
          }
          uint64_t v78 = v283;
          int64_t v57 = v290;
          unint64_t v62 = v284;
          long long v58 = v285;
          if (v286)
          {
            uint64_t v161 = sub_184C9D670(v153, v301);
            swift_release();
            *(void *)(a10 + 48) = v161;
            uint64_t v162 = v302;
            if (v302 < 0)
            {
LABEL_386:
              __break(1u);
              goto LABEL_387;
            }
            uint64_t v163 = sub_184C9D670(v292, v302);
            swift_release();
            *(void *)(a10 + 32) = v163;
            unint64_t v164 = (char *)sub_184CE1788(v281, v162);
            swift_release();
            *long long v58 = v164;
          }
          else
          {
            if (v293 < v295)
            {
LABEL_406:
              __break(1u);
              goto LABEL_407;
            }
            sub_184CE1520(v295, v293, v153, v301);
            uint64_t v162 = v302;
            if (v302 < 0) {
              goto LABEL_386;
            }
            sub_184CE1520(v62, v57, v292, v302);
            sub_184CE1654(v62, v57, v281, v162);
          }
          uint64_t v192 = v295 + v160;
          if (__OFADD__(v295, v160))
          {
LABEL_389:
            __break(1u);
            goto LABEL_390;
          }
          uint64_t v193 = v192 - v293;
          if (__OFSUB__(v192, v293))
          {
LABEL_390:
            __break(1u);
            goto LABEL_391;
          }
          if (v193)
          {
            int64_t v194 = v62 + v162;
            if (__OFADD__(v62, v162))
            {
LABEL_400:
              __break(1u);
              goto LABEL_401;
            }
            uint64_t v195 = *v58;
            int64_t v196 = *((void *)*v58 + 2);
            if (v196 < v194)
            {
LABEL_401:
              __break(1u);
              goto LABEL_402;
            }
            if (v194 != v196)
            {
              if (v194 >= v196)
              {
LABEL_414:
                __break(1u);
                goto LABEL_415;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v195 = sub_184D01D8C((uint64_t)v195);
              }
              do
              {
                if (v194 < 0) {
                  goto LABEL_318;
                }
                if ((unint64_t)v194 >= *((void *)v195 + 2)) {
                  goto LABEL_321;
                }
                unint64_t v197 = &v195[4 * v194];
                uint64_t v198 = *((unsigned int *)v197 + 8);
                BOOL v90 = __OFADD__(v198, v193);
                unint64_t v199 = v198 + v193;
                if (v90) {
                  goto LABEL_324;
                }
                if ((v199 & 0x8000000000000000) != 0) {
                  goto LABEL_327;
                }
                if (HIDWORD(v199)) {
                  goto LABEL_330;
                }
                ++v194;
                *((_DWORD *)v197 + 8) = v199;
              }
              while (v196 != v194);
              *long long v58 = v195;
            }
          }
        }
        else
        {
          uint64_t v217 = swift_slowAlloc();
          uint64_t v301 = 0;
          uint64_t v302 = 0;
          if (v295 < v35)
          {
LABEL_409:
            __break(1u);
            goto LABEL_410;
          }
          uint64_t v218 = *(void *)(a10 + 48);
          __n128 v219 = *(__n128 *)a10;
          long long v220 = *(_OWORD *)(a10 + 16);
          uint64_t v221 = *(void *)(a10 + 32);
          uint64_t v222 = *(void *)(a10 + 40);
          uint64_t v303 = v218 + 8 * v35 + 32;
          uint64_t v304 = v295 - v35;
          __n128 v296 = v219;
          long long v297 = v220;
          uint64_t v298 = v221;
          uint64_t v299 = v222;
          uint64_t v300 = v218;
          double v278 = (uint64_t *)MEMORY[0x1F4188790](v217, v219);
          uint64_t v262 = (uint64_t)v278;
          uint64_t v263 = a4 * a5;
          uint64_t v264 = &v301;
          uint64_t v265 = a4 * a5;
          char v266 = v291 & 1;
          int64_t v267 = &v303;
          uint64_t v268 = v292;
          uint64_t v269 = a4;
          uint64_t v270 = &v302;
          double v271 = v281;
          uint64_t v272 = a4;
          uint64_t v273 = v223;
          swift_retain_n();
          swift_retain();
          swift_retain();
          v289(&v296, a21, v261, v294, v287, v288);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v224 = v301;
          if (v301 < 0)
          {
LABEL_410:
            __break(1u);
            goto LABEL_411;
          }
          uint64_t v78 = v283;
          int64_t v57 = v290;
          unint64_t v62 = v284;
          unint64_t v225 = v293;
          if (v286)
          {
            unint64_t v226 = v278;
            int64_t v227 = sub_184C9D670(v278, v301);
            swift_release();
            *(void *)(a10 + 48) = v227;
            uint64_t v228 = v302;
            if (v302 < 0)
            {
LABEL_411:
              __break(1u);
              goto LABEL_412;
            }
            BOOL v229 = sub_184C9D670(v292, v302);
            swift_release();
            *(void *)(a10 + 32) = v229;
            int64_t v230 = (char *)sub_184CE1788(v281, v228);
            long long v58 = v285;
            swift_release();
            *long long v58 = v230;
          }
          else
          {
            unint64_t v226 = v278;
            if (v293 < v295)
            {
LABEL_419:
              __break(1u);
LABEL_420:
              __break(1u);
            }
            sub_184CE1520(v295, v293, v278, v301);
            uint64_t v228 = v302;
            if (v302 < 0) {
              goto LABEL_411;
            }
            sub_184CE1520(v62, v57, v292, v302);
            long long v58 = v285;
            sub_184CE1654(v62, v57, v281, v228);
          }
          uint64_t v231 = v295 + v224;
          if (__OFADD__(v295, v224))
          {
LABEL_412:
            __break(1u);
            goto LABEL_413;
          }
          uint64_t v232 = v231 - v225;
          if (__OFSUB__(v231, v225))
          {
LABEL_413:
            __break(1u);
            goto LABEL_414;
          }
          if (v232)
          {
            int64_t v233 = v62 + v228;
            if (__OFADD__(v62, v228))
            {
LABEL_417:
              __break(1u);
              goto LABEL_418;
            }
            uint64_t v234 = *v58;
            int64_t v235 = *((void *)*v58 + 2);
            if (v235 < v233)
            {
LABEL_418:
              __break(1u);
              goto LABEL_419;
            }
            if (v233 != v235)
            {
              if (v233 >= v235) {
                goto LABEL_420;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v234 = sub_184D01D8C((uint64_t)v234);
              }
              do
              {
                if (v233 < 0) {
                  goto LABEL_345;
                }
                if ((unint64_t)v233 >= *((void *)v234 + 2)) {
                  goto LABEL_346;
                }
                unint64_t v236 = &v234[4 * v233];
                uint64_t v237 = *((unsigned int *)v236 + 8);
                BOOL v90 = __OFADD__(v237, v232);
                unint64_t v238 = v237 + v232;
                if (v90) {
                  goto LABEL_347;
                }
                if ((v238 & 0x8000000000000000) != 0) {
                  goto LABEL_348;
                }
                if (HIDWORD(v238)) {
                  goto LABEL_349;
                }
                ++v233;
                *((_DWORD *)v236 + 8) = v238;
              }
              while (v235 != v233);
              *long long v58 = v234;
            }
          }
          MEMORY[0x18532B810](v226, -1, -1);
        }
        MEMORY[0x18532B810](v281, -1, -1);
      }
      MEMORY[0x18532B810](v292, -1, -1);
      goto LABEL_246;
    }
  }
  uint64_t v39 = MEMORY[0x1F4188790](isStackAllocationSafe, v29);
  unint64_t v292 = (char *)&v274 - v41;
  if ((unint64_t)(a4 + 0x2000000000000000) >> 62) {
    goto LABEL_338;
  }
  double v278 = &v274;
  if (v38 >= 1025)
  {
    uint64_t v39 = swift_stdlib_isStackAllocationSafe();
    if ((v39 & 1) == 0)
    {
      uint64_t v92 = swift_slowAlloc();
      uint64_t v281 = (char *)v92;
      if (v37 < 0)
      {
LABEL_369:
        __break(1u);
        goto LABEL_370;
      }
      if ((unint64_t)(v37 + 0x1000000000000000) >> 61)
      {
LABEL_370:
        __break(1u);
        goto LABEL_371;
      }
      if (8 * v37 < 1025 || (uint64_t v92 = swift_stdlib_isStackAllocationSafe(), (v92 & 1) != 0))
      {
        uint64_t v275 = &v274;
        uint64_t v94 = MEMORY[0x1F4188790](v92, v93);
        BOOL v96 = (char *)&v274 - v95;
        uint64_t v301 = 0;
        uint64_t v302 = 0;
        if (v295 < v35)
        {
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
          goto LABEL_353;
        }
        uint64_t v276 = &v274;
        uint64_t v97 = *(void *)(a10 + 48);
        __n128 v98 = *(__n128 *)a10;
        long long v99 = *(_OWORD *)(a10 + 16);
        uint64_t v100 = *(void *)(a10 + 32);
        uint64_t v101 = *(void *)(a10 + 40);
        uint64_t v303 = v97 + 8 * v35 + 32;
        uint64_t v304 = v295 - v35;
        __n128 v296 = v98;
        long long v297 = v99;
        uint64_t v298 = v100;
        uint64_t v299 = v101;
        uint64_t v300 = v97;
        MEMORY[0x1F4188790](v94, v98);
        uint64_t v262 = (uint64_t)v96;
        uint64_t v263 = a4 * a5;
        uint64_t v264 = &v301;
        uint64_t v265 = a4 * a5;
        char v266 = v291 & 1;
        int64_t v267 = &v303;
        uint64_t v268 = v292;
        uint64_t v269 = a4;
        uint64_t v270 = &v302;
        double v271 = v281;
        uint64_t v272 = a4;
        uint64_t v273 = v102;
        swift_retain_n();
        swift_retain();
        swift_retain();
        v289(&v296, a18, v261, v294, v287, v288);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v103 = v301;
        if (v301 < 0)
        {
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
          goto LABEL_356;
        }
        uint64_t v78 = v283;
        int64_t v57 = v290;
        unint64_t v62 = v284;
        unint64_t v104 = v293;
        if (v286)
        {
          uint64_t v105 = sub_184C9D670(v96, v301);
          swift_release();
          *(void *)(a10 + 48) = v105;
          uint64_t v106 = v302;
          if (v302 < 0)
          {
LABEL_357:
            __break(1u);
            goto LABEL_358;
          }
          uint64_t v107 = sub_184C9D670(v292, v302);
          swift_release();
          *(void *)(a10 + 32) = v107;
          __n128 v108 = (char *)sub_184CE1788(v281, v106);
          long long v58 = v285;
          swift_release();
          *long long v58 = v108;
        }
        else
        {
          if (v293 < v295)
          {
LABEL_378:
            __break(1u);
            goto LABEL_379;
          }
          sub_184CE1520(v295, v293, v96, v301);
          uint64_t v106 = v302;
          if (v302 < 0) {
            goto LABEL_357;
          }
          sub_184CE1520(v62, v57, v292, v302);
          long long v58 = v285;
          sub_184CE1654(v62, v57, v281, v106);
        }
        uint64_t v133 = v295 + v103;
        if (__OFADD__(v295, v103))
        {
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
          goto LABEL_362;
        }
        uint64_t v134 = v133 - v104;
        if (__OFSUB__(v133, v104))
        {
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
          goto LABEL_366;
        }
        if (v134)
        {
          int64_t v135 = v62 + v106;
          if (__OFADD__(v62, v106))
          {
LABEL_373:
            __break(1u);
            goto LABEL_374;
          }
          double v136 = *v58;
          int64_t v137 = *((void *)*v58 + 2);
          if (v137 < v135)
          {
LABEL_374:
            __break(1u);
            goto LABEL_375;
          }
          if (v135 != v137)
          {
            if (v135 >= v137)
            {
LABEL_396:
              __break(1u);
              goto LABEL_397;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              double v136 = sub_184D01D8C((uint64_t)v136);
            }
            do
            {
              if (v135 < 0) {
                goto LABEL_297;
              }
              if ((unint64_t)v135 >= *((void *)v136 + 2)) {
                goto LABEL_300;
              }
              unint64_t v138 = &v136[4 * v135];
              uint64_t v139 = *((unsigned int *)v138 + 8);
              BOOL v90 = __OFADD__(v139, v134);
              unint64_t v140 = v139 + v134;
              if (v90) {
                goto LABEL_303;
              }
              if ((v140 & 0x8000000000000000) != 0) {
                goto LABEL_306;
              }
              if (HIDWORD(v140)) {
                goto LABEL_309;
              }
              ++v135;
              *((_DWORD *)v138 + 8) = v140;
            }
            while (v137 != v135);
            *long long v58 = v136;
          }
        }
      }
      else
      {
        uint64_t v179 = swift_slowAlloc();
        uint64_t v301 = 0;
        uint64_t v302 = 0;
        if (v295 < v35)
        {
LABEL_382:
          __break(1u);
          goto LABEL_383;
        }
        uint64_t v180 = *(void *)(a10 + 48);
        __n128 v181 = *(__n128 *)a10;
        long long v182 = *(_OWORD *)(a10 + 16);
        uint64_t v183 = *(void *)(a10 + 32);
        uint64_t v184 = *(void *)(a10 + 40);
        uint64_t v303 = v180 + 8 * v35 + 32;
        uint64_t v304 = v295 - v35;
        __n128 v296 = v181;
        long long v297 = v182;
        uint64_t v298 = v183;
        uint64_t v299 = v184;
        uint64_t v300 = v180;
        uint64_t v276 = (uint64_t *)MEMORY[0x1F4188790](v179, v181);
        uint64_t v262 = (uint64_t)v276;
        uint64_t v263 = a4 * a5;
        uint64_t v264 = &v301;
        uint64_t v265 = a4 * a5;
        char v266 = v291 & 1;
        int64_t v267 = &v303;
        uint64_t v268 = v292;
        uint64_t v269 = a4;
        uint64_t v270 = &v302;
        double v271 = v281;
        uint64_t v272 = a4;
        uint64_t v273 = v185;
        swift_retain_n();
        swift_retain();
        swift_retain();
        v289(&v296, a17, v261, v294, v287, v288);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v186 = v301;
        if (v301 < 0)
        {
LABEL_385:
          __break(1u);
          goto LABEL_386;
        }
        uint64_t v78 = v283;
        int64_t v57 = v290;
        long long v58 = v285;
        unint64_t v187 = v293;
        if (v286)
        {
          uint64_t v188 = sub_184C9D670(v276, v301);
          swift_release();
          *(void *)(a10 + 48) = v188;
          uint64_t v189 = v302;
          if (v302 < 0)
          {
LABEL_388:
            __break(1u);
            goto LABEL_389;
          }
          __n128 v190 = sub_184C9D670(v292, v302);
          swift_release();
          *(void *)(a10 + 32) = v190;
          __n128 v191 = (char *)sub_184CE1788(v281, v189);
          swift_release();
          *long long v58 = v191;
          unint64_t v62 = v284;
        }
        else
        {
          if (v293 < v295)
          {
LABEL_408:
            __break(1u);
            goto LABEL_409;
          }
          sub_184CE1520(v295, v293, v276, v301);
          uint64_t v189 = v302;
          if (v302 < 0) {
            goto LABEL_388;
          }
          unint64_t v62 = v284;
          sub_184CE1520(v284, v57, v292, v302);
          sub_184CE1654(v62, v57, v281, v189);
        }
        uint64_t v208 = v295 + v186;
        uint64_t v209 = v276;
        if (__OFADD__(v295, v186))
        {
LABEL_393:
          __break(1u);
          goto LABEL_394;
        }
        uint64_t v210 = v208 - v187;
        if (__OFSUB__(v208, v187))
        {
LABEL_394:
          __break(1u);
          goto LABEL_395;
        }
        if (v210)
        {
          int64_t v211 = v62 + v189;
          if (__OFADD__(v62, v189))
          {
LABEL_404:
            __break(1u);
            goto LABEL_405;
          }
          int64_t v212 = *v58;
          int64_t v213 = *((void *)*v58 + 2);
          if (v213 < v211)
          {
LABEL_405:
            __break(1u);
            goto LABEL_406;
          }
          if (v211 != v213)
          {
            if (v211 >= v213)
            {
LABEL_416:
              __break(1u);
              goto LABEL_417;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int64_t v212 = sub_184D01D8C((uint64_t)v212);
            }
            uint64_t v209 = v276;
            do
            {
              if (v211 < 0) {
                goto LABEL_320;
              }
              if ((unint64_t)v211 >= *((void *)v212 + 2)) {
                goto LABEL_323;
              }
              int64_t v214 = &v212[4 * v211];
              uint64_t v215 = *((unsigned int *)v214 + 8);
              BOOL v90 = __OFADD__(v215, v210);
              unint64_t v216 = v215 + v210;
              if (v90) {
                goto LABEL_326;
              }
              if ((v216 & 0x8000000000000000) != 0) {
                goto LABEL_329;
              }
              if (HIDWORD(v216)) {
                goto LABEL_332;
              }
              ++v211;
              *((_DWORD *)v214 + 8) = v216;
            }
            while (v213 != v211);
            *long long v58 = v212;
          }
        }
        MEMORY[0x18532B810](v209, -1, -1);
      }
      MEMORY[0x18532B810](v281, -1, -1);
      goto LABEL_246;
    }
  }
  uint64_t v42 = MEMORY[0x1F4188790](v39, v40);
  uint64_t v281 = (char *)&v274 - v44;
  if (v37 < 0) {
    goto LABEL_340;
  }
  if ((unint64_t)(v37 + 0x1000000000000000) >> 61)
  {
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
    goto LABEL_343;
  }
  uint64_t v276 = &v274;
  if (8 * v37 >= 1025)
  {
    uint64_t v42 = swift_stdlib_isStackAllocationSafe();
    if ((v42 & 1) == 0)
    {
      uint64_t v109 = swift_slowAlloc();
      uint64_t v301 = 0;
      uint64_t v302 = 0;
      if (v295 >= v35)
      {
        unint64_t v110 = (const void *)v109;
        uint64_t v275 = &v274;
        uint64_t v274 = a14;
        uint64_t v111 = *(void *)(a10 + 48);
        __n128 v112 = *(__n128 *)a10;
        long long v113 = *(_OWORD *)(a10 + 16);
        uint64_t v114 = *(void *)(a10 + 32);
        uint64_t v115 = *(void *)(a10 + 40);
        uint64_t v303 = v111 + 8 * v35 + 32;
        uint64_t v304 = v295 - v35;
        __n128 v296 = v112;
        long long v297 = v113;
        uint64_t v298 = v114;
        uint64_t v299 = v115;
        uint64_t v300 = v111;
        uint64_t v262 = MEMORY[0x1F4188790](v109, v112);
        uint64_t v263 = a4 * a5;
        uint64_t v264 = &v301;
        uint64_t v265 = a4 * a5;
        char v266 = v291 & 1;
        int64_t v267 = &v303;
        uint64_t v268 = v292;
        uint64_t v269 = a4;
        uint64_t v270 = &v302;
        double v271 = v281;
        uint64_t v272 = a4;
        uint64_t v273 = v116;
        swift_retain_n();
        swift_retain();
        swift_retain();
        v289(&v296, v274, v261, v294, v287, v288);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v117 = v301;
        if ((v301 & 0x8000000000000000) == 0)
        {
          uint64_t v118 = v110;
          int64_t v57 = v290;
          unint64_t v62 = v284;
          long long v58 = v285;
          unint64_t v119 = v293;
          if (v286)
          {
            double v120 = v118;
            uint64_t v121 = sub_184C9D670(v118, v301);
            swift_release();
            *(void *)(a10 + 48) = v121;
            uint64_t v122 = v302;
            if (v302 < 0)
            {
LABEL_358:
              __break(1u);
              goto LABEL_359;
            }
            uint64_t v123 = sub_184C9D670(v292, v302);
            swift_release();
            *(void *)(a10 + 32) = v123;
            unint64_t v124 = (char *)sub_184CE1788(v281, v122);
            swift_release();
            *long long v58 = v124;
          }
          else
          {
            if (v293 < v295)
            {
LABEL_379:
              __break(1u);
              goto LABEL_380;
            }
            double v120 = v118;
            sub_184CE1520(v295, v293, v118, v301);
            uint64_t v122 = v302;
            if (v302 < 0) {
              goto LABEL_358;
            }
            sub_184CE1520(v62, v57, v292, v302);
            sub_184CE1654(v62, v57, v281, v122);
          }
          uint64_t v141 = v295 + v117;
          if (!__OFADD__(v295, v117))
          {
            uint64_t v142 = v141 - v119;
            if (!__OFSUB__(v141, v119))
            {
              if (v142)
              {
                int64_t v143 = v62 + v122;
                if (__OFADD__(v62, v122))
                {
LABEL_375:
                  __break(1u);
                  goto LABEL_376;
                }
                int64_t v144 = *v58;
                int64_t v145 = *((void *)*v58 + 2);
                if (v145 < v143)
                {
LABEL_376:
                  __break(1u);
                  goto LABEL_377;
                }
                if (v143 != v145)
                {
                  if (v143 >= v145)
                  {
LABEL_397:
                    __break(1u);
                    goto LABEL_398;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    int64_t v144 = sub_184D01D8C((uint64_t)v144);
                  }
                  do
                  {
                    if (v143 < 0) {
                      goto LABEL_298;
                    }
                    if ((unint64_t)v143 >= *((void *)v144 + 2)) {
                      goto LABEL_301;
                    }
                    int64_t v146 = &v144[4 * v143];
                    uint64_t v147 = *((unsigned int *)v146 + 8);
                    BOOL v90 = __OFADD__(v147, v142);
                    unint64_t v148 = v147 + v142;
                    if (v90) {
                      goto LABEL_304;
                    }
                    if ((v148 & 0x8000000000000000) != 0) {
                      goto LABEL_307;
                    }
                    if (HIDWORD(v148)) {
                      goto LABEL_310;
                    }
                    ++v143;
                    *((_DWORD *)v146 + 8) = v148;
                  }
                  while (v145 != v143);
                  *long long v58 = v144;
                }
              }
              MEMORY[0x18532B810](v120, -1, -1);
              goto LABEL_137;
            }
            goto LABEL_364;
          }
          goto LABEL_361;
        }
        goto LABEL_355;
      }
      goto LABEL_352;
    }
  }
  uint64_t v274 = (uint64_t)&v274;
  uint64_t v45 = MEMORY[0x1F4188790](v42, v43);
  uint64_t v47 = (char *)&v274 - v46;
  uint64_t v301 = 0;
  uint64_t v302 = 0;
  if (v295 < v35) {
    goto LABEL_333;
  }
  uint64_t v275 = &v274;
  uint64_t v48 = *(void *)(a10 + 48);
  __n128 v49 = *(__n128 *)a10;
  long long v50 = *(_OWORD *)(a10 + 16);
  uint64_t v51 = *(void *)(a10 + 32);
  uint64_t v52 = *(void *)(a10 + 40);
  uint64_t v303 = v48 + 8 * v35 + 32;
  uint64_t v304 = v295 - v35;
  __n128 v296 = v49;
  long long v297 = v50;
  uint64_t v298 = v51;
  uint64_t v299 = v52;
  uint64_t v300 = v48;
  MEMORY[0x1F4188790](v45, v49);
  uint64_t v262 = (uint64_t)v47;
  uint64_t v263 = a4 * a5;
  uint64_t v264 = &v301;
  uint64_t v265 = a4 * a5;
  char v266 = v291 & 1;
  int64_t v267 = &v303;
  uint64_t v268 = v292;
  uint64_t v269 = a4;
  uint64_t v270 = &v302;
  double v271 = v281;
  uint64_t v272 = a4;
  uint64_t v273 = v53;
  swift_retain_n();
  swift_retain();
  swift_retain();
  v289(&v296, a16, v261, v294, v287, v288);
  swift_release_n();
  swift_release();
  swift_release();
  uint64_t v54 = v301;
  if (v301 < 0)
  {
LABEL_334:
    __break(1u);
    goto LABEL_335;
  }
  if (v286)
  {
    unint64_t v55 = sub_184C9D670(v47, v301);
    swift_release();
    *(void *)(a10 + 48) = v55;
    uint64_t v56 = v302;
    int64_t v57 = v290;
    long long v58 = v285;
    unint64_t v59 = v293;
    if (v302 < 0)
    {
LABEL_335:
      __break(1u);
      goto LABEL_336;
    }
    uint64_t v60 = sub_184C9D670(v292, v302);
    swift_release();
    *(void *)(a10 + 32) = v60;
    uint64_t v61 = (char *)sub_184CE1788(v281, v56);
    swift_release();
    *long long v58 = v61;
    unint64_t v62 = v284;
  }
  else
  {
    unint64_t v59 = v293;
    int64_t v57 = v290;
    long long v58 = v285;
    if (v293 < v295) {
      goto LABEL_344;
    }
    sub_184CE1520(v295, v293, v47, v301);
    uint64_t v56 = v302;
    if (v302 < 0) {
      goto LABEL_335;
    }
    unint64_t v62 = v284;
    sub_184CE1520(v284, v57, v292, v302);
    sub_184CE1654(v62, v57, v281, v56);
  }
  uint64_t v83 = v295 + v54;
  if (__OFADD__(v295, v54))
  {
LABEL_336:
    __break(1u);
    goto LABEL_337;
  }
  uint64_t v84 = v83 - v59;
  if (__OFSUB__(v83, v59))
  {
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
    goto LABEL_339;
  }
  if (!v84) {
    goto LABEL_137;
  }
  int64_t v85 = v62 + v56;
  if (__OFADD__(v62, v56)) {
    goto LABEL_342;
  }
  uint64_t v86 = *v58;
  int64_t v87 = *((void *)*v58 + 2);
  if (v87 < v85)
  {
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
    goto LABEL_350;
  }
  if (v85 == v87) {
    goto LABEL_137;
  }
  if (v85 >= v87) {
    goto LABEL_365;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v86 = sub_184D01D8C((uint64_t)v86);
  }
  do
  {
    if (v85 < 0)
    {
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
LABEL_301:
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
      goto LABEL_311;
    }
    if ((unint64_t)v85 >= *((void *)v86 + 2)) {
      goto LABEL_292;
    }
    __int16 v88 = &v86[4 * v85];
    uint64_t v89 = *((unsigned int *)v88 + 8);
    BOOL v90 = __OFADD__(v89, v84);
    unint64_t v91 = v89 + v84;
    if (v90) {
      goto LABEL_293;
    }
    if ((v91 & 0x8000000000000000) != 0) {
      goto LABEL_294;
    }
    if (HIDWORD(v91)) {
      goto LABEL_295;
    }
    ++v85;
    *((_DWORD *)v88 + 8) = v91;
  }
  while (v87 != v85);
  *long long v58 = v86;
LABEL_137:
  uint64_t v78 = v283;
LABEL_246:
  uint64_t v239 = *(void *)(v78 + 32);
  if (*(void *)(v239 + 16))
  {
    if (v280)
    {
      if (a9)
      {
        uint64_t v242 = *v58;
        uint64_t v243 = *((void *)*v58 + 2);
        if (v243)
        {
          uint64_t v244 = (double *)(*(void *)(v78 + 48) + 32);
          uint64_t v245 = *((unsigned int *)v242 + 8);
          if (v245)
          {
            double v246 = v244[v245 - 1];
            double v247 = NAN;
            if ((*(void *)v244 & 0xFFFFFFFFFFFFFLL) == 0) {
              double v247 = *v244;
            }
            if ((~*(void *)v244 & 0x7FF0000000000000) != 0) {
              double v240 = *v244;
            }
            else {
              double v240 = v247;
            }
            if ((~*(void *)&v246 & 0x7FF0000000000000) == 0
              && (*(void *)&v244[v245 - 1] & 0xFFFFFFFFFFFFFLL) != 0)
            {
              double v246 = NAN;
            }
          }
          else
          {
            double v246 = NAN;
            double v240 = NAN;
          }
          uint64_t v248 = v243 - 1;
          if (v248)
          {
            uint64_t v254 = (unsigned int *)(v242 + 36);
            do
            {
              unsigned int v256 = *v254++;
              uint64_t v255 = v256;
              if (v245 != v256)
              {
                int64_t v257 = &v244[v245];
                double v258 = v257[v255 + ~v245];
                if ((*(void *)v257 & 0xFFFFFFFFFFFFFLL) != 0) {
                  double v259 = v240;
                }
                else {
                  double v259 = *v257;
                }
                if ((~*(void *)v257 & 0x7FF0000000000000) != 0) {
                  double v259 = *v257;
                }
                if (v240 > *v257) {
                  double v240 = v259;
                }
                if (v258 >= v246)
                {
                  double v260 = v257[v255 + ~v245];
                  if ((~*(void *)&v258 & 0x7FF0000000000000) != 0)
                  {
                    double v246 = v258;
                  }
                  else if ((*(void *)&v260 & 0xFFFFFFFFFFFFFLL) == 0)
                  {
                    double v246 = v258;
                  }
                }
              }
              uint64_t v245 = v255;
              --v248;
            }
            while (v248);
          }
        }
        else
        {
          double v246 = NAN;
          double v240 = NAN;
        }
        double v282 = v246;
      }
      else
      {
        double v240 = *(double *)v78;
      }
    }
    else
    {
      double v240 = v277;
      if (a9) {
        double v282 = *(double *)(v78 + 8);
      }
    }
    uint64_t v249 = (uint64_t *)(v78 + 16);
    if (!v62) {
      uint64_t v249 = (uint64_t *)(v239 + 32);
    }
    uint64_t v250 = *v249;
    if (v279 == v57)
    {
      uint64_t v241 = sub_184CE1444(v239);
      double v251 = v282;
      if (v252)
      {
        __break(1u);
        goto LABEL_273;
      }
    }
    else
    {
LABEL_273:
      uint64_t v241 = *(void *)(v78 + 24);
      double v251 = v282;
    }
    *(double *)uint64_t v78 = v240;
    *(double *)(v78 + 8) = v251;
    *(void *)(v78 + 16) = v250;
  }
  else
  {
    uint64_t v241 = 0x7FF8000000000000;
    *(int64x2_t *)uint64_t v78 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(void *)(v78 + 16) = 0x7FF8000000000000;
  }
  *(void *)(v78 + 24) = v241;
  sub_184CEB9B4();
  return sub_184CEC3DC(v294);
}

uint64_t sub_184CEA964(uint64_t result, __n128 a2, double a3)
{
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(void *)(v3 + 32);
    uint64_t v7 = *(void *)(v6 + 16);
    uint64_t v8 = v6 + 32;
    uint64_t result = sub_184CD3BE4(v6 + 32, v7, a2);
    uint64_t v10 = result - 1;
    if (__OFSUB__(result, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v11 = result;
      if (v7 >= result)
      {
        v9.n128_f64[0] = a3;
        uint64_t result = sub_184CD3E58(v8 + 8 * result, v7 - result, v9);
        uint64_t v12 = result + v11;
        if (!__OFADD__(result, v11))
        {
          uint64_t result = v10 & ~(v10 >> 63);
          if (v12 >= result) {
            return result;
          }
          __break(1u);
          return 0;
        }
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  double v5 = *(double *)(v3 + 24);
  if (v5 >= a2.n128_f64[0]) {
    return 0;
  }
  if (v5 > a3)
  {
    if (*(double *)(v3 + 16) <= a3) {
      return 1;
    }
    goto LABEL_17;
  }
  return 1;
}

uint64_t sub_184CEAA4C(uint64_t a1)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  double v5 = *(double *)(a1 + 24);
  double v6 = *(double *)v1;
  double v7 = *(double *)(v1 + 8);
  double v8 = *(double *)(v1 + 16);
  double v9 = *(double *)(v1 + 24);
  if (v8 >= v5 || v4 >= v9 || v6 >= v3 || v2 >= v7) {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0 && (*(void *)&v6 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    if ((~*(void *)&v2 & 0x7FF0000000000000) == 0 && (*(void *)&v2 & 0xFFFFFFFFFFFFFLL) != 0) {
      return 6;
    }
    if (*(void *)(v14 + 16)) {
      return 6;
    }
    unsigned int v20 = 2;
    goto LABEL_47;
  }
  uint64_t v16 = *(void *)(*(void *)(v1 + 32) + 16);
  if ((~*(void *)&v2 & 0x7FF0000000000000) != 0 || (*(void *)a1 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v19 = *(void *)(v14 + 16);
    if (!v16)
    {
      if (!v19) {
        return 1;
      }
      unsigned int v17 = 5;
      goto LABEL_34;
    }
    if (!v19)
    {
      unsigned int v20 = 4;
LABEL_47:
      if (v9 > v5 || v4 > v8 || v7 > v3 || v2 > v6) {
        return v20;
      }
      else {
        return 2;
      }
    }
    return 6;
  }
  if (v16) {
    return 6;
  }
  unsigned int v17 = 3;
LABEL_34:
  if (v5 > v9 || v8 > v4 || v3 > v7 || v6 > v2) {
    return v17;
  }
  else {
    return 3;
  }
}

void *sub_184CEAB5C@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < *(void *)(v2 + 8))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *sub_184CEAB88(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0 && v2 < *(void *)(v1 + 8))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void sub_184CEABB4(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_184CEABBC(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

uint64_t (*sub_184CEABC8(uint64_t (*result)(), uint64_t *a2))()
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  if (!*a2)
  {
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  if (!__OFSUB__(v3, 1))
  {
    uint64_t v5 = *(unsigned int *)(v4 + 4 * (v3 - 1));
LABEL_5:
    uint64_t v6 = *(unsigned int *)(v4 + 4 * v3);
    *(void *)uint64_t result = v5;
    *((void *)result + 1) = v6;
    return CGBitmapPixelInfoGetCGPixelComponentType;
  }
  __break(1u);
  return result;
}

void *sub_184CEAC18@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[1];
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((*result & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = result[1];
  if (v3 >= v4)
  {
    uint64_t v5 = *v2;
    *a2 = *result;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_184CEAC50(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

BOOL sub_184CEAC64()
{
  return *(void *)(v0 + 8) == 0;
}

void sub_184CEAC74(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_184CEAC84@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0 && *(void *)(v3 + 8) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_184CEACB0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_184CE2804(*a1, a2, *a3, *v4, v4[1]);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *sub_184CEACEC(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4 >= *a2)
  {
    uint64_t v5 = *result;
    if (((v3 | *result) & 0x8000000000000000) == 0 && v4 >= v5) {
      return (uint64_t *)(v3 - v5);
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_184CEAD1C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_184CEAD38(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_184CEAD54(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t *sub_184CEAD70@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || v3 >= *(void *)(v2 + 8)) {
    __break(1u);
  }
  else {
    *a2 = v3 + 1;
  }
  return result;
}

uint64_t *sub_184CEAD94(uint64_t *result)
{
  uint64_t v2 = *result;
  if (*result < 0 || v2 >= *(void *)(v1 + 8)) {
    __break(1u);
  }
  else {
    *uint64_t result = v2 + 1;
  }
  return result;
}

__n128 sub_184CEADB8@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_184CEADC8()
{
  uint64_t result = *(void *)(v0 + 8);
  if (result < 0) {
    __break(1u);
  }
  return result;
}

unsigned int *sub_184CEADD8()
{
  return sub_184CE182C(*(unsigned int **)v0, *(void *)(v0 + 8));
}

void *sub_184CEADE0(void *a1, void *a2, uint64_t a3)
{
  return sub_184D01118(a1, a2, a3, *(unsigned int **)v3, *(void *)(v3 + 8));
}

BOOL sub_184CEADE8(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return a1[1] < a2[1];
  }
  else {
    return *a1 < *a2;
  }
}

BOOL sub_184CEAE08(void *a1, void *a2)
{
  if (*a2 == *a1) {
    return a2[1] >= a1[1];
  }
  else {
    return *a2 >= *a1;
  }
}

BOOL sub_184CEAE28(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return a1[1] >= a2[1];
  }
  else {
    return *a1 >= *a2;
  }
}

BOOL sub_184CEAE48(void *a1, void *a2)
{
  if (*a2 == *a1) {
    return a2[1] < a1[1];
  }
  else {
    return *a2 < *a1;
  }
}

BOOL sub_184CEAE68(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_184CEAE80@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_184CEB1F0(a1, sub_184CEC378, a2);
}

uint64_t *sub_184CEAE98(uint64_t *result)
{
  uint64_t v2 = result[1];
  BOOL v3 = __OFSUB__(v2, 2);
  uint64_t v4 = v2 - 2;
  if (v3)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = *result;
  unint64_t v6 = *result - 1;
  if (*result < 1)
  {
LABEL_13:
    *uint64_t result = v5;
    result[1] = v4;
    return result;
  }
  uint64_t v7 = *(void *)(v1 + 8);
  unint64_t v8 = *(void *)(v7 + 16);
  if (v6 >= v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v4 >= *(unsigned int *)(v7 + 32 + 4 * v6)) {
    goto LABEL_13;
  }
  if (*result == 1)
  {
LABEL_12:
    *uint64_t result = v6;
    result[1] = v4;
    return result;
  }
  if (v5 - 2 >= v8)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v4 >= *(unsigned int *)(v7 + 32 + 4 * (v5 - 2))) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 20;
  while (v5 - 2 >= 1)
  {
    uint64_t v10 = *(unsigned int *)(v9 + 4 * v5--);
    if (v4 >= v10)
    {
      unint64_t v6 = v5 - 1;
      goto LABEL_12;
    }
  }
  *uint64_t result = 0;
  result[1] = v4;
  return result;
}

void sub_184CEAF48(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_184CEAF50(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16);
  *a1 = *(void *)(*(void *)(v1 + 8) + 16);
  a1[1] = v2;
}

uint64_t (*sub_184CEAF64(void *a1, unint64_t *a2))(void)
{
  sub_184CEBF4C(*a2, a2[1], *v2, v2[2]);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return CGBitmapPixelInfoGetCGPixelComponentType;
}

uint64_t sub_184CEAFB8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_184CE287C(*a1, a1[1], a1[2], a1[3], *v2, v2[1], v2[2], a2);
}

uint64_t sub_184CEAFD0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = 0;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v4 + 16);
  a1[4] = 0;
  a1[5] = v5;
  a1[6] = v6;
  swift_retain();
  swift_retain();

  return swift_retain();
}

BOOL sub_184CEB02C()
{
  return (*(void *)(*(void *)(v0 + 8) + 16) | *(void *)(*(void *)(v0 + 16) + 16)) == 0;
}

void sub_184CEB048(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

uint64_t sub_184CEB058@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_184CEC020(*a1, a1[1], a2, *(void *)(v3 + 8));
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_184CEB090@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_184CEC1B4(*a1, a1[1], a2, *a3, a3[1], *(void *)(v4 + 8));
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = v8 & 1;
  return result;
}

uint64_t sub_184CEB0D8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (!v4) {
    return v5 / 2;
  }
  __break(1u);
  return result;
}

uint64_t *sub_184CEB0FC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  BOOL v4 = *result < *a2;
  if (*result == *a2) {
    BOOL v4 = v3 < a2[1];
  }
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2[2];
  BOOL v6 = v3 >= a2[3];
  BOOL v7 = v2 == v5;
  BOOL v8 = v2 >= v5;
  if (v7) {
    BOOL v8 = v6;
  }
  if (v8) {
    goto LABEL_9;
  }
  return result;
}

uint64_t *sub_184CEB144(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  BOOL v4 = *result < *a2;
  if (*result == *a2) {
    BOOL v4 = v3 < a2[1];
  }
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2[2];
  BOOL v6 = a2[3] < v3;
  BOOL v7 = v5 == v2;
  BOOL v8 = v5 < v2;
  if (v7) {
    BOOL v8 = v6;
  }
  if (v8) {
    goto LABEL_9;
  }
  return result;
}

void *sub_184CEB18C(void *result, void *a2)
{
  BOOL v2 = *result < *a2;
  if (*result == *a2) {
    BOOL v2 = result[1] < a2[1];
  }
  if (v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v3 = a2[2];
  uint64_t v4 = result[2];
  BOOL v5 = a2[3] < result[3];
  BOOL v6 = v3 == v4;
  BOOL v7 = v3 < v4;
  if (!v6) {
    BOOL v5 = v7;
  }
  if (v5) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_184CEB1D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_184CEB1F0(a1, sub_184CEBFB8, a2);
}

uint64_t sub_184CEB1F0@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], *(void *)(v3 + 8));
  *a3 = result;
  a3[1] = v6;
  return result;
}

unint64_t *sub_184CEB228(unint64_t *result)
{
  unint64_t v2 = result[1];
  BOOL v3 = __OFADD__(v2, 2);
  uint64_t v4 = v2 + 2;
  if (v3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v5 = *(void *)(v1 + 8);
  unint64_t v6 = *result;
  unint64_t v7 = *(void *)(v5 + 16);
  if ((uint64_t)*result >= (uint64_t)v7)
  {
    *uint64_t result = v6;
    result[1] = v4;
    return result;
  }
  if ((v6 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  if (v4 < *(unsigned int *)(v5 + 32 + 4 * v6))
  {
    unint64_t v8 = *result;
LABEL_6:
    *uint64_t result = v8;
    result[1] = v4;
    return result;
  }
  unint64_t v8 = v6 + 1;
  if (v6 + 1 >= v7 || v4 < *(unsigned int *)(v5 + 32 + 4 * v8)) {
    goto LABEL_6;
  }
  uint64_t v9 = v5 + 40;
  while (v7 - 2 != v6)
  {
    uint64_t v10 = *(unsigned int *)(v9 + 4 * v6++);
    if (v4 < v10)
    {
      *uint64_t result = v6 + 1;
      result[1] = v4;
      return result;
    }
  }
  *uint64_t result = v7;
  result[1] = v4;
  return result;
}

__n128 sub_184CEB2CC@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t sub_184CEB2E4()
{
  return *(void *)(*(void *)(v0 + 16) + 16) >> 1;
}

uint64_t sub_184CEB2F4()
{
  uint64_t v1 = sub_184CE18D8(*v0, v0[1], v0[2]);
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

void *sub_184CEB350(void *a1, void *a2, uint64_t a3)
{
  return sub_184D00F5C(a1, a2, a3, *v3, v3[1], v3[2]);
}

unint64_t sub_184CEB360()
{
  unint64_t result = qword_1E8F8B968;
  if (!qword_1E8F8B968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B968);
  }
  return result;
}

unint64_t sub_184CEB3B8()
{
  unint64_t result = qword_1E8F8B970;
  if (!qword_1E8F8B970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B970);
  }
  return result;
}

uint64_t sub_184CEB40C()
{
  return sub_184CEC660(&qword_1E8F8B978, &qword_1E8F8B980);
}

uint64_t sub_184CEB448()
{
  return sub_184CEC660(&qword_1E8F8B988, &qword_1E8F8B990);
}

unint64_t sub_184CEB488()
{
  unint64_t result = qword_1E8F8B998;
  if (!qword_1E8F8B998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B998);
  }
  return result;
}

unint64_t sub_184CEB4E0()
{
  unint64_t result = qword_1E8F8B9A0;
  if (!qword_1E8F8B9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B9A0);
  }
  return result;
}

uint64_t sub_184CEB534()
{
  return sub_184CEC8CC(&qword_1E8F8B9A8, &qword_1E8F8B980, (void (*)(void))sub_184CEB584);
}

unint64_t sub_184CEB584()
{
  unint64_t result = qword_1E8F8B9B0;
  if (!qword_1E8F8B9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B9B0);
  }
  return result;
}

uint64_t sub_184CEB5D8()
{
  return sub_184CEC8CC(&qword_1E8F8B9B8, &qword_1E8F8B990, (void (*)(void))sub_184CEB584);
}

void sub_184CEB628()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *v0 & 0x7FF0000000000000;
  BOOL v3 = v2 != 0x7FF0000000000000 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v3 && !*(void *)(v0[4] + 16)) {
    return;
  }
  uint64_t v4 = *(void *)(v1 + 16);
  if (!v4) {
    return;
  }
  uint64_t v5 = (double *)(v0[6] + 32);
  uint64_t v6 = *(unsigned int *)(v1 + 32);
  if (!v6)
  {
    double v8 = NAN;
    double v7 = NAN;
    uint64_t v10 = v4 - 1;
    if (!v10) {
      return;
    }
    goto LABEL_20;
  }
  double v7 = *v5;
  double v8 = v5[v6 - 1];
  double v9 = NAN;
  if ((*(void *)v5 & 0xFFFFFFFFFFFFFLL) == 0) {
    double v9 = *v5;
  }
  if ((~*(void *)v5 & 0x7FF0000000000000) == 0) {
    double v7 = v9;
  }
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0 && (*(void *)&v5[v6 - 1] & 0xFFFFFFFFFFFFFLL) != 0) {
    double v8 = NAN;
  }
  uint64_t v10 = v4 - 1;
  if (v10)
  {
LABEL_20:
    uint64_t v11 = (unsigned int *)(v1 + 36);
    do
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v6 != v13)
      {
        uint64_t v14 = &v5[v6];
        double v15 = v14[v12 + ~v6];
        if ((*(void *)v14 & 0xFFFFFFFFFFFFFLL) != 0) {
          double v16 = v7;
        }
        else {
          double v16 = *v14;
        }
        if ((~*(void *)v14 & 0x7FF0000000000000) != 0) {
          double v16 = *v14;
        }
        if (v7 > *v14) {
          double v7 = v16;
        }
        if (v15 >= v8)
        {
          double v17 = v14[v12 + ~v6];
          if ((~*(void *)&v15 & 0x7FF0000000000000) != 0)
          {
            double v8 = v15;
          }
          else if ((*(void *)&v17 & 0xFFFFFFFFFFFFFLL) == 0)
          {
            double v8 = v15;
          }
        }
      }
      uint64_t v6 = v12;
      --v10;
    }
    while (v10);
  }
}

void sub_184CEB7D8(unsigned int *a1@<X3>, uint64_t a2@<X4>, double *a3@<X5>, double *a4@<X8>)
{
  if (a2)
  {
    if (a2 >= 1)
    {
      uint64_t v4 = *a1;
      if (v4)
      {
        double v5 = *a3;
        double v6 = a3[v4 - 1];
        double v7 = NAN;
        if ((*(void *)a3 & 0xFFFFFFFFFFFFFLL) == 0) {
          double v7 = *a3;
        }
        if ((~*(void *)a3 & 0x7FF0000000000000) == 0) {
          double v5 = v7;
        }
        if ((~*(void *)&v6 & 0x7FF0000000000000) == 0 && (*(void *)&a3[v4 - 1] & 0xFFFFFFFFFFFFFLL) != 0) {
          double v6 = NAN;
        }
        uint64_t v8 = a2 - 1;
        if (a2 == 1) {
          goto LABEL_12;
        }
      }
      else
      {
        double v6 = NAN;
        double v5 = NAN;
        uint64_t v8 = a2 - 1;
        if (a2 == 1)
        {
LABEL_12:
          *a4 = v5;
          a4[1] = v6;
          return;
        }
      }
      double v9 = a1 + 1;
      do
      {
        unsigned int v11 = *v9++;
        uint64_t v10 = v11;
        if (v4 != v11)
        {
          uint64_t v12 = &a3[v4];
          if (!a3) {
            uint64_t v12 = 0;
          }
          double v13 = v12[v10 + ~v4];
          if ((*(void *)v12 & 0xFFFFFFFFFFFFFLL) != 0) {
            double v14 = v5;
          }
          else {
            double v14 = *v12;
          }
          if ((~*(void *)v12 & 0x7FF0000000000000) != 0) {
            double v14 = *v12;
          }
          if (v5 > *v12) {
            double v5 = v14;
          }
          if (v13 >= v6)
          {
            double v15 = v12[v10 + ~v4];
            if ((~*(void *)&v13 & 0x7FF0000000000000) != 0)
            {
              double v6 = v13;
            }
            else if ((*(void *)&v15 & 0xFFFFFFFFFFFFFLL) == 0)
            {
              double v6 = v13;
            }
          }
        }
        uint64_t v4 = v10;
        --v8;
      }
      while (v8);
      goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
    *a4 = NAN;
    a4[1] = NAN;
  }
}

uint64_t sub_184CEB8F0()
{
  uint64_t v1 = v0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v0;
  uint64_t v2 = v0 + 4;
  uint64_t v4 = v3;
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFLL;
  if (((~v3 & 0x7FF0000000000000) != 0 || v5 == 0) && !*(void *)(*v2 + 16))
  {
    uint64_t v7 = v1[3];
    uint64_t v9 = v4;
    long long v10 = *(_OWORD *)(v1 + 1);
    uint64_t v11 = v7;
    sub_184CF6B48((char *)&v10 + 8, 2);
    sub_184CF6B48((char *)&v9, 2);
    return sub_184CF6988(2, 2u);
  }
  return result;
}

uint64_t sub_184CEB9B4()
{
  uint64_t v1 = v0[5];
  if (*(void *)(v1 + 16) == 2 && *(_DWORD *)(v1 + 32) == 2 && *(_DWORD *)(v1 + 36) == 2)
  {
    uint64_t result = v0[6];
    if (*(void *)(result + 16) == 2)
    {
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      uint64_t v3 = MEMORY[0x1E4FBC860];
      v0[4] = MEMORY[0x1E4FBC860];
      v0[5] = v3;
      v0[6] = v3;
    }
  }
  return result;
}

uint64_t sub_184CEBA38@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (a3 <= 32) {
    goto LABEL_13;
  }
  if (__OFSUB__(a5, 1)) {
    goto LABEL_34;
  }
  if (!a4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a5;
    goto LABEL_6;
  }
  if (__OFSUB__(a4, 1))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v6 = *(unsigned int *)(result + 4 * (a4 - 1));
  uint64_t v7 = a5 - a4;
  if (__OFSUB__(a5, a4))
  {
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_6:
  BOOL v8 = __OFSUB__(v7, 1);
  uint64_t v9 = v7 - 1;
  if (v8)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v10 = *(unsigned int *)(result + 4 * (a5 - 1)) - v6;
  if (v9 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v9 + 1;
  }
  unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  BOOL v8 = __OFSUB__(v10, v12);
  uint64_t v13 = v10 - v12;
  if (!v8)
  {
LABEL_30:
    *a6 = v13;
    return result;
  }
  __break(1u);
LABEL_13:
  if (a2 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (a4 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (a2 < a5)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (a4 == a5)
  {
    *a6 = 0;
    return result;
  }
  if (a4 < a5)
  {
    uint64_t v13 = 0;
    if (a4 <= a2) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v14 - a4;
    unint64_t v16 = ~a4 + a5;
    do
    {
      if (a4)
      {
        uint64_t v17 = *(unsigned int *)(result + 4 * a4 - 4);
        if (v15 <= v16) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v17 = 0;
        if (v15 <= v16) {
          goto LABEL_33;
        }
      }
      uint64_t v18 = *(unsigned int *)(result + 4 * a4) - v17;
      if (v18 > v13) {
        uint64_t v13 = v18;
      }
      ++a4;
    }
    while (a5 != a4);
    goto LABEL_30;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_184CEBB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, __n128 a5@<Q0>, double a6@<D1>)
{
  uint64_t result = sub_184CD3BE4(a1, a2, a5);
  uint64_t v12 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = result;
  uint64_t v14 = a3 - result;
  if (a3 < result)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a1) {
    uint64_t v15 = a1 + 8 * result;
  }
  else {
    uint64_t v15 = 0;
  }
  v11.n128_f64[0] = a6;
  uint64_t result = sub_184CD3E58(v15, v14, v11);
  uint64_t v16 = result + v13;
  if (__OFADD__(result, v13)) {
    goto LABEL_11;
  }
  uint64_t v17 = v12 & ~(v12 >> 63);
  if (v16 >= v17)
  {
    *a4 = v17;
    a4[1] = v16;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

void sub_184CEBBDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, double **a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  LODWORD(v14) = *(_DWORD *)(a1 + 56);
  char v15 = *(unsigned char *)(a1 + 60);
  LODWORD(v16) = *(_DWORD *)(a1 + 64);
  LOBYTE(v17) = *(unsigned char *)(a1 + 68);
  long long v61 = *(_OWORD *)(a1 + 72);
  long long v59 = *(_OWORD *)(a1 + 88);
  long long v55 = *(_OWORD *)(a1 + 104);
  long long v53 = *(_OWORD *)(a1 + 120);
  sub_184CD40D8();
  if ((v20 & 0x10000000000) != 0) {
    return;
  }
  uint64_t v21 = v18;
  uint64_t v52 = v61;
  uint64_t v22 = v55;
  while (1)
  {
    uint64_t v14 = (v19 & 0x100000000) != 0 ? v14 : v19;
    v15 &= (v19 & 0x100000000uLL) >> 32;
    uint64_t v16 = (v20 & 0x100000000) != 0 ? v16 : v20;
    if (v15)
    {
      int v24 = 0;
      uint64_t v25 = 0;
    }
    else
    {
      if (v14)
      {
        uint64_t v26 = v52;
        uint64_t v27 = *(unsigned int *)(v52 + 4 * v14 - 4);
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v26 = v52;
      }
      uint64_t v28 = *(unsigned int *)(v26 + 4 * v14);
      int v24 = (void)v59 ? (const void *)(v59 + 8 * v27) : 0;
      uint64_t v25 = v28 - v27;
    }
    v17 &= (v20 & 0x100000000uLL) >> 32;
    if (v17)
    {
      __n128 v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v31 = v16 ? *(unsigned int *)(v22 + 4 * v16 - 4) : 0;
      __n128 v29 = (void)v53 ? (const void *)(v53 + 8 * v31) : 0;
      uint64_t v30 = *(unsigned int *)(v22 + 4 * v16) - v31;
    }
    BOOL v32 = a4;
    uint64_t v33 = *a4;
    BOOL v34 = __OFSUB__(a5, *a4);
    uint64_t v35 = a5 - *a4;
    if (v35 < 0 != v34) {
      break;
    }
    int v62 = v16;
    uint64_t v36 = 0;
    if (a2) {
      uint64_t v37 = (double *)(a2 + 8 * v33);
    }
    else {
      uint64_t v37 = 0;
    }
    if (v25 && a5 != v33)
    {
      if (v25 >= v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = v25;
      }
      memcpy(v37, v24, 8 * v36);
    }
    uint64_t v38 = v35 - v36;
    if (__OFSUB__(v35, v36)) {
      goto LABEL_70;
    }
    if (v38 >= v30)
    {
      uint64_t v39 = 0;
      if (v30 && v38)
      {
        if (v37) {
          __n128 v40 = &v37[v36];
        }
        else {
          __n128 v40 = 0;
        }
        if (v30 >= v38) {
          uint64_t v39 = v38;
        }
        else {
          uint64_t v39 = v30;
        }
        memcpy(v40, v29, 8 * v39);
      }
      BOOL v34 = __OFADD__(v36, v39);
      v36 += v39;
      if (v34) {
        goto LABEL_75;
      }
    }
    a4 = v32;
    if (a6)
    {
      if (v36 < 0) {
        goto LABEL_76;
      }
      if (a7[1] == (double *)v36)
      {
        if (!v36) {
          goto LABEL_3;
        }
        uint64_t v41 = *a7;
        if (**a7 == *v37)
        {
          if (v36 == 1) {
            goto LABEL_3;
          }
          if (v41[1] == v37[1])
          {
            uint64_t v42 = v36 - 2;
            __n128 v43 = v37 + 2;
            uint64_t v44 = v41 + 2;
            while (v42)
            {
              double v45 = *v44++;
              double v46 = v45;
              double v47 = *v43++;
              --v42;
              if (v46 != v47) {
                goto LABEL_60;
              }
            }
            goto LABEL_3;
          }
        }
      }
LABEL_60:
      *a7 = v37;
      a7[1] = (double *)v36;
    }
    uint64_t v48 = *v32 + v36;
    if (__OFADD__(*v32, v36)) {
      goto LABEL_71;
    }
    *BOOL v32 = v48;
    uint64_t v49 = *a10;
    *(void *)(a8 + 8 * *a10) = v21;
    BOOL v34 = __OFADD__(a13, v48);
    unint64_t v50 = a13 + v48;
    if (v34) {
      goto LABEL_72;
    }
    if ((v50 & 0x8000000000000000) != 0) {
      goto LABEL_73;
    }
    if (HIDWORD(v50)) {
      goto LABEL_74;
    }
    *(_DWORD *)(a11 + 4 * v49) = v50;
    BOOL v34 = __OFADD__(v49, 1);
    uint64_t v51 = v49 + 1;
    if (v34)
    {
      __break(1u);
      return;
    }
    *a10 = v51;
LABEL_3:
    sub_184CD40D8();
    uint64_t v21 = v23;
    LODWORD(v16) = v62;
    uint64_t v22 = v55;
    if ((v20 & 0x10000000000) != 0) {
      return;
    }
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
}

unint64_t sub_184CEBF4C(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a4 + 16);
  if (v4 <= a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (a2 + 1 >= v4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v5 = *(void *)(a3 + 16);
  if (v5 <= result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result + 1 >= v5) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t sub_184CEBFB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3 = __OFADD__(a2, 2);
  uint64_t v4 = a2 + 2;
  if (v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5 <= result) {
    return result;
  }
  if (result < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (v4 >= *(unsigned int *)(a3 + 32 + 4 * result))
  {
    while (v5 - 1 != result)
    {
      uint64_t v6 = result + 1;
      uint64_t v7 = *(unsigned int *)(a3 + 36 + 4 * result++);
      if (v4 < v7) {
        return v6;
      }
    }
    return *(void *)(a3 + 16);
  }
  return result;
}

uint64_t sub_184CEC020(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 < 0)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a4 + 32;
    while (1)
    {
      BOOL v9 = __OFSUB__(a2, 2);
      a2 -= 2;
      if (v9) {
        goto LABEL_39;
      }
      uint64_t v13 = result;
      if (result-- < 1) {
        goto LABEL_19;
      }
      unint64_t v15 = *(void *)(a4 + 16);
      if (result >= v15) {
        goto LABEL_40;
      }
      if (a2 >= *(unsigned int *)(v12 + 4 * result))
      {
LABEL_19:
        uint64_t result = v13;
      }
      else if (result)
      {
        if (v13 - 2 >= v15) {
          goto LABEL_42;
        }
        if (a2 < *(unsigned int *)(v12 + 4 * (v13 - 2)))
        {
          if (v13 != 2)
          {
            if (v13 - 3 >= v15) {
              goto LABEL_43;
            }
            uint64_t result = v13 - 2;
            if (a2 >= *(unsigned int *)(v12 + 4 * (v13 - 3))) {
              goto LABEL_20;
            }
            while (v13 - 3 >= 1)
            {
              uint64_t v16 = *(unsigned int *)(a4 + 16 + 4 * v13--);
              if (a2 >= v16)
              {
                uint64_t result = v13 - 2;
                goto LABEL_20;
              }
            }
          }
          uint64_t result = 0;
        }
      }
LABEL_20:
      if (--v11 <= a3) {
        return result;
      }
    }
  }
  if (a3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a4 + 16);
    uint64_t v6 = a4 + 32;
    while (1)
    {
      BOOL v9 = __OFADD__(a2, 2);
      a2 += 2;
      if (v9) {
        break;
      }
      if (result >= v5) {
        goto LABEL_4;
      }
      if (result < 0) {
        goto LABEL_41;
      }
      if (a2 < *(unsigned int *)(v6 + 4 * result))
      {
LABEL_4:
        uint64_t v7 = result;
      }
      else
      {
        uint64_t v7 = result + 1;
        if (result + 1 < v5 && a2 >= *(unsigned int *)(v6 + 4 * v7))
        {
          uint64_t v7 = result + 2;
          if (result + 2 < v5 && a2 >= *(unsigned int *)(v6 + 4 * v7))
          {
            while (v5 - 3 != result)
            {
              uint64_t v10 = *(unsigned int *)(a4 + 44 + 4 * result++);
              if (a2 < v10)
              {
                uint64_t v7 = result + 2;
                goto LABEL_5;
              }
            }
            uint64_t v7 = *(void *)(a4 + 16);
          }
        }
      }
LABEL_5:
      uint64_t result = v7;
      if (v4++ == a3 - 1) {
        return v7;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  return result;
}

uint64_t sub_184CEC1B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a6 + 32;
    while (1)
    {
      if (result == a4 && a2 == a5) {
        return 0;
      }
      BOOL v9 = __OFSUB__(a2, 2);
      a2 -= 2;
      if (v9)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      uint64_t v16 = result;
      if (result-- < 1) {
        goto LABEL_22;
      }
      unint64_t v18 = *(void *)(a6 + 16);
      if (result >= v18) {
        goto LABEL_47;
      }
      if (a2 >= *(unsigned int *)(v14 + 4 * result))
      {
LABEL_22:
        uint64_t result = v16;
      }
      else if (result)
      {
        if (v16 - 2 >= v18) {
          goto LABEL_49;
        }
        if (a2 < *(unsigned int *)(v14 + 4 * (v16 - 2)))
        {
          if (v16 == 2) {
            goto LABEL_41;
          }
          if (v16 - 3 >= v18) {
            goto LABEL_50;
          }
          uint64_t result = v16 - 2;
          if (a2 < *(unsigned int *)(v14 + 4 * (v16 - 3)))
          {
            while (v16 - 3 >= 1)
            {
              uint64_t v19 = *(unsigned int *)(a6 + 16 + 4 * v16--);
              if (a2 >= v19)
              {
                uint64_t result = v16 - 2;
                goto LABEL_23;
              }
            }
LABEL_41:
            uint64_t result = 0;
          }
        }
      }
LABEL_23:
      if (--v13 <= a3) {
        return result;
      }
    }
  }
  if (a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a6 + 32;
    while (result != a4 || a2 != a5)
    {
      BOOL v9 = __OFADD__(a2, 2);
      a2 += 2;
      if (v9)
      {
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v10 = result;
      unint64_t v11 = *(void *)(a6 + 16);
      if (result < (uint64_t)v11)
      {
        if (result < 0) {
          goto LABEL_48;
        }
        if (a2 >= *(unsigned int *)(v7 + 4 * result))
        {
          ++result;
          if (v10 + 1 < v11 && a2 >= *(unsigned int *)(v7 + 4 * result))
          {
            uint64_t result = v10 + 2;
            if (v10 + 2 < v11 && a2 >= *(unsigned int *)(v7 + 4 * result))
            {
              while (v11 - 3 != v10)
              {
                uint64_t v12 = *(unsigned int *)(a6 + 44 + 4 * v10++);
                if (a2 < v12)
                {
                  uint64_t result = v10 + 2;
                  goto LABEL_4;
                }
              }
              uint64_t result = *(void *)(a6 + 16);
            }
          }
        }
      }
LABEL_4:
      if (++v6 == a3) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_184CEC378(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3 = __OFSUB__(a2, 2);
  uint64_t v4 = a2 - 2;
  if (v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v5 = result - 1;
  if (result < 1) {
    return result;
  }
  if (v5 >= *(void *)(a3 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (v4 < *(unsigned int *)(a3 + 32 + 4 * v5))
  {
    while (1)
    {
      uint64_t v6 = result - 1;
      if (result - 1 < 1) {
        break;
      }
      uint64_t v7 = *(unsigned int *)(a3 + 24 + 4 * result--);
      if (v4 >= v7) {
        return v6;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_184CEC3DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_184CEC428(uint64_t a1)
{
  return sub_184CEC49C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void, void, void))sub_184CE1A34);
}

uint64_t sub_184CEC440(uint64_t a1)
{
  return sub_184CEC49C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void, void, void))sub_184CE1D4C);
}

void sub_184CEC458(uint64_t a1)
{
  sub_184CEBBDC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), *(double ***)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(uint64_t **)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104));
}

uint64_t sub_184CEC49C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 104));
}

ValueMetadata *type metadata accessor for Region.SubBounds.Index()
{
  return &type metadata for Region.SubBounds.Index;
}

ValueMetadata *type metadata accessor for Region.UnsafeSegmentRanges()
{
  return &type metadata for Region.UnsafeSegmentRanges;
}

uint64_t sub_184CEC508()
{
  return sub_184CEC660(&qword_1E8F8B9C0, &qword_1E8F8B9C8);
}

unint64_t sub_184CEC548()
{
  unint64_t result = qword_1E8F8B9D0;
  if (!qword_1E8F8B9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B9D0);
  }
  return result;
}

uint64_t sub_184CEC59C()
{
  return sub_184CEC80C(&qword_1E8F8B9D8);
}

unint64_t sub_184CEC5D0()
{
  unint64_t result = qword_1E8F8B9E8;
  if (!qword_1E8F8B9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B9E8);
  }
  return result;
}

uint64_t sub_184CEC624()
{
  return sub_184CEC660(&qword_1E8F8B9F0, &qword_1E8F8B9F8);
}

uint64_t sub_184CEC660(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_184CEC6A8()
{
  unint64_t result = qword_1E8F8BA00;
  if (!qword_1E8F8BA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BA00);
  }
  return result;
}

uint64_t sub_184CEC6FC()
{
  return sub_184CEC80C(&qword_1E8F8BA08);
}

uint64_t sub_184CEC730()
{
  return sub_184CEC8CC(&qword_1E8F8BA10, &qword_1E8F8B9F8, (void (*)(void))sub_184CEC780);
}

unint64_t sub_184CEC780()
{
  unint64_t result = qword_1E8F8BA18;
  if (!qword_1E8F8BA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BA18);
  }
  return result;
}

uint64_t sub_184CEC7D8()
{
  return sub_184CEC80C(&qword_1E8F8BA20);
}

uint64_t sub_184CEC80C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F8B9E0);
    sub_184CEC5D0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_184CEC87C()
{
  return sub_184CEC8CC(&qword_1E8F8BA28, &qword_1E8F8B9F8, (void (*)(void))sub_184CEC938);
}

uint64_t sub_184CEC8CC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_184CEC938()
{
  unint64_t result = qword_1E8F8BA30[0];
  if (!qword_1E8F8BA30[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E8F8BA30);
  }
  return result;
}

uint64_t sub_184CEC99C()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CEC9B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CEC9D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4 = v3;
  uint64_t v30 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(MEMORY[0x1F4188790](a1, a3) + 40);
  uint64_t v27 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v11, v16);
  unint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v19 - 8, v20);
  uint64_t v22 = (char *)&v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v4, v14);
  sub_1850C39F8();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, v4 + *(int *)(a1 + 52), AssociatedTypeWitness);
  uint64_t v23 = (uint64_t)v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v27, v4 + *(int *)(a1 + 56), v6);
  return sub_184CECC88((uint64_t)v22, (uint64_t)v13, v23, v6, v30);
}

uint64_t sub_184CECC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  uint64_t v11 = type metadata accessor for AccumulateSequence.Iterator();
  uint64_t v12 = a5 + *(int *)(v11 + 52);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a2, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v11 + 56), a3, a4);
}

uint64_t sub_184CECDE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v33 = a2;
  uint64_t v31 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](a1, a3);
  uint64_t v30 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1850C3B88();
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  uint64_t v9 = MEMORY[0x1F4188790](v7, v8);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9, v13);
  uint64_t v15 = (char *)&v28 - v14;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_1850C3BC8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
    uint64_t v16 = 1;
    uint64_t v18 = v32;
    uint64_t v17 = v33;
    uint64_t v19 = v31;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
    uint64_t v20 = v3 + *(int *)(a1 + 56);
    uint64_t v21 = v3 + *(int *)(a1 + 52);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a1 + 40) + 32);
    uint64_t v23 = v30;
    uint64_t v24 = v32;
    v22(v15, v21, v32);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
    uint64_t v25 = v31;
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 40))(v20, v23, v24);
    uint64_t v26 = v33;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v33, v20, v24);
    uint64_t v16 = 0;
    uint64_t v18 = v24;
    uint64_t v17 = v26;
    uint64_t v19 = v25;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, v16, 1, v18);
}

uint64_t sub_184CED12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  sub_184CEC9D4(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v5(v3, a1);
}

uint64_t sub_184CED18C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v42 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness, v7);
  uint64_t v37 = (char *)&v35 - v9;
  uint64_t v41 = *(void *)(a1 + 24);
  uint64_t v36 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v44 = (uint64_t)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v15, v18);
  uint64_t v21 = (char *)&v35 - v20;
  MEMORY[0x1F4188790](v19, v22);
  uint64_t v24 = (char *)&v35 - v23;
  sub_1850C3AB8();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v39 = v21;
  v25(v21, v24, v12);
  sub_1850C3AF8();
  uint64_t v43 = a2;
  swift_getAssociatedConformanceWitness();
  char v26 = sub_1850C39C8();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v17, v12);
  if (v26)
  {
    v27(v24, v12);
    uint64_t v28 = v4 + *(int *)(a1 + 56);
    uint64_t v29 = v41;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v44, v28, v41);
  }
  else
  {
    uint64_t v36 = v4 + *(int *)(a1 + 56);
    uint64_t v30 = (void (*)(char *, void))sub_1850C3B68();
    uint64_t v31 = v37;
    uint64_t v32 = v38;
    (*(void (**)(char *))(v38 + 16))(v37);
    v30(v45, 0);
    uint64_t v33 = v4 + *(int *)(a1 + 52);
    uint64_t v29 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, void))(*(void *)(a1 + 40) + 32))(v31, v33, v41, *(void *)(a1 + 40));
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, AssociatedTypeWitness);
    v27(v24, v12);
  }
  return sub_184CED57C((uint64_t)v39, v44, v29, v42);
}

uint64_t sub_184CED57C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  uint64_t v9 = _s5IndexVMa_0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v9 + 52), a2, a3);
}

uint64_t sub_184CED670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1, a3);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v11);
  uint64_t v13 = (char *)&v15 - v12;
  sub_1850C3AF8();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + *(int *)(a1 + 56), v6);
  return sub_184CED57C((uint64_t)v13, (uint64_t)v9, v6, a2);
}

uint64_t sub_184CED7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v46 = a4;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  uint64_t v42 = (char *)&v38 - v11;
  uint64_t v47 = a2;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = a1;
  uint64_t v49 = v12;
  uint64_t v40 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v10, v14);
  uint64_t v48 = (uint64_t)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v19, v22);
  uint64_t v25 = (char *)&v38 - v24;
  MEMORY[0x1F4188790](v23, v26);
  uint64_t v28 = (char *)&v38 - v27;
  sub_1850C3AC8();
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  double v45 = v25;
  v29(v25, v28, v16);
  uint64_t v30 = v4;
  sub_1850C3AF8();
  swift_getAssociatedConformanceWitness();
  char v31 = sub_1850C39C8();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v17 + 8);
  v44(v21, v16);
  if (v31)
  {
    v44(v28, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v48, v30 + *(int *)(v47 + 56), v49);
  }
  else
  {
    uint64_t v32 = *(void *)(v47 + 40);
    v50[0] = v8;
    v50[1] = v49;
    _DWORD v50[2] = a3;
    v50[3] = v32;
    uint64_t v40 = v13 + *(int *)(_s5IndexVMa_0() + 52);
    uint64_t v33 = v30;
    uint64_t v39 = (void (*)(void *, void))sub_1850C3B68();
    uint64_t v35 = v41;
    BOOL v34 = v42;
    uint64_t v36 = AssociatedTypeWitness;
    (*(void (**)(char *))(v41 + 16))(v42);
    v39(v50, 0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 32))(v34, v33 + *(int *)(v47 + 52), v49, v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
    v44(v28, v16);
  }
  return sub_184CED57C((uint64_t)v45, v48, v49, v46);
}

uint64_t sub_184CEDBF4()
{
  return sub_1850C3AE8();
}

uint64_t sub_184CEDBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = _s5IndexVMa_0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a3, a1 + *(int *)(v6 + 52), v5);
}

uint64_t sub_184CEDC84()
{
  return sub_1850C39C8() & 1;
}

uint64_t sub_184CEDD1C()
{
  return sub_1850C3968() & 1;
}

uint64_t sub_184CEDDB4()
{
  return sub_184CEDD1C();
}

uint64_t sub_184CEDDC4()
{
  return sub_184CEDC84();
}

uint64_t sub_184CEDDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_184CED18C(a1, *(void *)(a2 - 8), a3);
}

uint64_t sub_184CEDDDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_184CED670(a1, a2, a3);
}

void (*sub_184CEDDE4(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_184CEDE5C(v6, a2, a3);
  return sub_184CC83D0;
}

void (*sub_184CEDE5C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = *(void *)(a3 + 24);
  *a1 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = v8;
  sub_184CEDBFC(a2, a3, (uint64_t)v8);
  return sub_184CC8504;
}

uint64_t sub_184CEDF20@<X0>(uint64_t a1@<X8>)
{
  _s5IndexVMa_0();
  uint64_t v2 = sub_1850C3B88();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_184CEDFB0()
{
  return sub_184CEDBF4();
}

uint64_t sub_184CEDFB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_184CED7D4(a1, a2, *(void *)(a3 - 8), a4);
}

uint64_t sub_184CEDFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = *(void *)(a2 + 40);
  long long v13 = *(_OWORD *)(a2 + 16);
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v7 = _s5IndexVMa_0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v13 - v10;
  sub_184CED7D4(a1, a2, v5, (uint64_t)&v13 - v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v11, v7);
}

uint64_t sub_184CEE0DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_184CEE0F8()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for AccumulateSequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t _s5IndexVMa_0()
{
  return swift_getGenericMetadata();
}

uint64_t sub_184CEE144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t sub_184CEE14C()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_184CEE288(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v8 + v12;
  uint64_t v14 = (v8 + v12) & ~v12;
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v16 = *(void *)(v9 - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = v15 + v17;
  unint64_t v19 = ((v15 + v17 + v14) & ~v17) + *(void *)(v16 + 64);
  uint64_t v20 = (*(unsigned char *)(v11 + 80) | *(unsigned char *)(v16 + 80) | *(unsigned char *)(v7 + 80));
  if (v20 <= 7
    && v19 <= 0x18
    && ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v16 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0)
  {
    uint64_t v24 = ~v12;
    uint64_t v27 = v10;
    uint64_t v28 = ~v17;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v25 = ((unint64_t)a2 + v13) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)a1 + v13) & v24, v25, v27);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))(((((unint64_t)a1 + v13) & v24) + v18) & v28, (v25 + v18) & v28, v9);
  }
  else
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v20 + 16) & ~v20));
    swift_retain();
  }
  return a1;
}

uint64_t sub_184CEE4D4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = (v6 + a1 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
  unint64_t v14 = (v11 + *(void *)(v10 + 56) + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);

  return v13(v14, v7);
}

uint64_t sub_184CEE604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = (v8 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v15, v16, v10);
  uint64_t v17 = *(void *)(v9 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 16))((*(void *)(v12 + 48) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 48) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), v9);
  return a1;
}

uint64_t sub_184CEE750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = (v8 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v15, v16, v10);
  uint64_t v17 = *(void *)(v9 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 24))((*(void *)(v12 + 40) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 40) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), v9);
  return a1;
}

uint64_t sub_184CEE89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = (v8 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15, v16, v10);
  uint64_t v17 = *(void *)(v9 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 32))((*(void *)(v12 + 32) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 32) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), v9);
  return a1;
}

uint64_t sub_184CEE9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = (v8 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))(v15, v16, v10);
  uint64_t v17 = *(void *)(v9 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 40))((*(void *)(v12 + 24) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 24) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), v9);
  return a1;
}

uint64_t sub_184CEEB34(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(void *)(v9 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = *(void *)(v10 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  if (*(_DWORD *)(v14 + 84) <= v13) {
    unsigned int v18 = v13;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v14 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = *(void *)(v7 + 64) + v15;
  if (a2 <= v18) {
    goto LABEL_27;
  }
  uint64_t v20 = ((v16 + v17 + (v19 & ~v15)) & ~v17) + *(void *)(*(void *)(v9 - 8) + 64);
  char v21 = 8 * v20;
  if (v20 > 3) {
    goto LABEL_10;
  }
  unsigned int v23 = ((a2 - v18 + ~(-1 << v21)) >> v21) + 1;
  if (HIWORD(v23))
  {
    int v22 = *(_DWORD *)((char *)a1 + v20);
    if (!v22) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v23 > 0xFF)
  {
    int v22 = *(unsigned __int16 *)((char *)a1 + v20);
    if (!*(unsigned __int16 *)((char *)a1 + v20)) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v23 >= 2)
  {
LABEL_10:
    int v22 = *((unsigned __int8 *)a1 + v20);
    if (!*((unsigned char *)a1 + v20)) {
      goto LABEL_27;
    }
LABEL_17:
    int v24 = (v22 - 1) << v21;
    if (v20 > 3) {
      int v24 = 0;
    }
    if (v20)
    {
      if (v20 <= 3) {
        int v25 = ((v16 + v17 + (v19 & ~v15)) & ~v17) + *(_DWORD *)(*(void *)(v9 - 8) + 64);
      }
      else {
        int v25 = 4;
      }
      switch(v25)
      {
        case 2:
          int v26 = *a1;
          break;
        case 3:
          int v26 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v26 = *(_DWORD *)a1;
          break;
        default:
          int v26 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v26 = 0;
    }
    return v18 + (v26 | v24) + 1;
  }
LABEL_27:
  if (!v18) {
    return 0;
  }
  if (v8 == v18)
  {
    uint64_t v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v28 = a1;
    uint64_t v29 = v8;
    uint64_t v30 = AssociatedTypeWitness;
LABEL_36:
    return v27(v28, v29, v30);
  }
  unint64_t v32 = ((unint64_t)a1 + v19) & ~v15;
  if (v12 != v18)
  {
    uint64_t v28 = (unsigned __int16 *)((v32 + v16 + v17) & ~v17);
    uint64_t v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v29 = *(unsigned int *)(v14 + 84);
    uint64_t v30 = v9;
    goto LABEL_36;
  }
  uint64_t v33 = *(uint64_t (**)(unint64_t))(v11 + 48);

  return v33(v32);
}

void sub_184CEEE8C(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v36 = v9;
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = v12;
  unsigned int v14 = *(_DWORD *)(v12 + 84);
  if (v14 <= v10) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v16 = *(void *)(v11 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = *(void *)(v12 + 64);
  uint64_t v21 = *(unsigned __int8 *)(v16 + 80);
  if (v17 <= v15) {
    unsigned int v22 = v15;
  }
  else {
    unsigned int v22 = *(_DWORD *)(v16 + 84);
  }
  size_t v23 = ((v20 + v21 + ((v18 + v19) & ~v19)) & ~v21) + *(void *)(*(void *)(v11 - 8) + 64);
  if (a3 <= v22)
  {
    int v24 = 0;
  }
  else if (v23 <= 3)
  {
    unsigned int v27 = ((a3 - v22 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v27))
    {
      int v24 = 4;
    }
    else if (v27 >= 0x100)
    {
      int v24 = 2;
    }
    else
    {
      int v24 = v27 > 1;
    }
  }
  else
  {
    int v24 = 1;
  }
  if (v22 < a2)
  {
    unsigned int v25 = ~v22 + a2;
    if (v23 < 4)
    {
      int v26 = (v25 >> (8 * v23)) + 1;
      if (v23)
      {
        int v28 = v25 & ~(-1 << (8 * v23));
        bzero(a1, v23);
        if (v23 == 3)
        {
          *(_WORD *)a1 = v28;
          a1[2] = BYTE2(v28);
        }
        else if (v23 == 2)
        {
          *(_WORD *)a1 = v28;
        }
        else
        {
          *a1 = v28;
        }
      }
    }
    else
    {
      bzero(a1, v23);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v24)
    {
      case 1:
        a1[v23] = v26;
        return;
      case 2:
        *(_WORD *)&a1[v23] = v26;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&a1[v23] = v26;
        return;
      default:
        return;
    }
  }
  switch(v24)
  {
    case 1:
      a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x184CEF258);
    case 4:
      *(_DWORD *)&a1[v23] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v10 == v22)
      {
        uint64_t v29 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
        uint64_t v30 = a1;
        uint64_t v31 = a2;
        uint64_t v32 = v10;
        uint64_t v33 = AssociatedTypeWitness;
LABEL_37:
        v29(v30, v31, v32, v33);
        return;
      }
      unint64_t v34 = (unint64_t)&a1[v18 + v19] & ~v19;
      if (v14 != v22)
      {
        uint64_t v30 = (unsigned char *)((v34 + v20 + v21) & ~v21);
        uint64_t v29 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        uint64_t v31 = a2;
        uint64_t v32 = v17;
        uint64_t v33 = v11;
        goto LABEL_37;
      }
      uint64_t v35 = *(void (**)(unint64_t, uint64_t))(v13 + 56);
      v35(v34, a2);
      return;
  }
}

uint64_t sub_184CEF280()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_184CEF3A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v8 + v11) & ~v11;
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = v14 + v16;
  unint64_t v18 = ((v14 + v16 + v13) & ~v16) + *(void *)(v15 + 64);
  uint64_t v19 = (*(unsigned char *)(v10 + 80) | *(unsigned char *)(v7 + 80) | *(unsigned char *)(v15 + 80));
  if (v19 <= 7
    && v18 <= 0x18
    && ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v15 + 80)) & 0x100000) == 0)
  {
    uint64_t v23 = ~v11;
    uint64_t v26 = AssociatedTypeWitness;
    uint64_t v27 = ~v16;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    unint64_t v24 = ((unint64_t)a2 + v12) & v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v23, v24, v26);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(((((unint64_t)a1 + v12) & v23) + v17) & v27, (v24 + v17) & v27, v5);
  }
  else
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v19 + 16) & ~v19));
    swift_retain();
  }
  return a1;
}

uint64_t sub_184CEF5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v5 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);
  unint64_t v13 = (v10 + *(void *)(v9 + 56) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13, v6);
}

uint64_t sub_184CEF6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v7 + v12;
  uint64_t v14 = (v7 + v12 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))((*(void *)(v11 + 48) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v11 + 48) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v8);
  return a1;
}

uint64_t sub_184CEF7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v7 + v12;
  uint64_t v14 = (v7 + v12 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))((*(void *)(v11 + 40) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v11 + 40) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v8);
  return a1;
}

uint64_t sub_184CEF920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v7 + v12;
  uint64_t v14 = (v7 + v12 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))((*(void *)(v11 + 32) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v11 + 32) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v8);
  return a1;
}

uint64_t sub_184CEFA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v7 + v12;
  uint64_t v14 = (v7 + v12 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))((*(void *)(v11 + 24) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v11 + 24) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v8);
  return a1;
}

uint64_t sub_184CEFB68(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(v5 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = *(void *)(v7 + 64) + v14;
  if (a2 <= v17) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v5 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 > 3) {
    goto LABEL_10;
  }
  unsigned int v22 = ((a2 - v17 + ~(-1 << v20)) >> v20) + 1;
  if (HIWORD(v22))
  {
    int v21 = *(_DWORD *)((char *)a1 + v19);
    if (!v21) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v22 > 0xFF)
  {
    int v21 = *(unsigned __int16 *)((char *)a1 + v19);
    if (!*(unsigned __int16 *)((char *)a1 + v19)) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v22 >= 2)
  {
LABEL_10:
    int v21 = *((unsigned __int8 *)a1 + v19);
    if (!*((unsigned char *)a1 + v19)) {
      goto LABEL_27;
    }
LABEL_17:
    int v23 = (v21 - 1) << v20;
    if (v19 > 3) {
      int v23 = 0;
    }
    if (v19)
    {
      if (v19 <= 3) {
        int v24 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(_DWORD *)(*(void *)(v5 - 8) + 64);
      }
      else {
        int v24 = 4;
      }
      switch(v24)
      {
        case 2:
          int v25 = *a1;
          break;
        case 3:
          int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v25 = *(_DWORD *)a1;
          break;
        default:
          int v25 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v25 = 0;
    }
    return v17 + (v25 | v23) + 1;
  }
LABEL_27:
  if (!v17) {
    return 0;
  }
  if (v8 == v17)
  {
    uint64_t v26 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v27 = a1;
    uint64_t v28 = v8;
    uint64_t v29 = v6;
LABEL_36:
    return v26(v27, v28, v29);
  }
  unint64_t v31 = ((unint64_t)a1 + v18) & ~v14;
  if (v11 != v17)
  {
    uint64_t v27 = (unsigned __int16 *)((v31 + v15 + v16) & ~v16);
    uint64_t v26 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v13 + 48);
    uint64_t v28 = *(unsigned int *)(v13 + 84);
    uint64_t v29 = v5;
    goto LABEL_36;
  }
  uint64_t v32 = *(uint64_t (**)(unint64_t))(v10 + 48);

  return v32(v31);
}

void sub_184CEFE98(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v35 = v9;
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  if (v13 <= v10) {
    unsigned int v14 = v10;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(void *)(v7 - 8);
  uint64_t v16 = *(unsigned int *)(v15 + 84);
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = *(void *)(v11 + 64);
  uint64_t v20 = *(unsigned __int8 *)(v15 + 80);
  if (v16 <= v14) {
    unsigned int v21 = v14;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v15 + 84);
  }
  size_t v22 = ((v19 + v20 + ((v17 + v18) & ~v18)) & ~v20) + *(void *)(*(void *)(v7 - 8) + 64);
  if (a3 <= v21)
  {
    int v23 = 0;
  }
  else if (v22 <= 3)
  {
    unsigned int v26 = ((a3 - v21 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
    if (HIWORD(v26))
    {
      int v23 = 4;
    }
    else if (v26 >= 0x100)
    {
      int v23 = 2;
    }
    else
    {
      int v23 = v26 > 1;
    }
  }
  else
  {
    int v23 = 1;
  }
  if (v21 < a2)
  {
    unsigned int v24 = ~v21 + a2;
    if (v22 < 4)
    {
      int v25 = (v24 >> (8 * v22)) + 1;
      if (v22)
      {
        int v27 = v24 & ~(-1 << (8 * v22));
        bzero(a1, v22);
        if (v22 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v22 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v22);
      *(_DWORD *)a1 = v24;
      int v25 = 1;
    }
    switch(v23)
    {
      case 1:
        a1[v22] = v25;
        return;
      case 2:
        *(_WORD *)&a1[v22] = v25;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&a1[v22] = v25;
        return;
      default:
        return;
    }
  }
  switch(v23)
  {
    case 1:
      a1[v22] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v22] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x184CF023CLL);
    case 4:
      *(_DWORD *)&a1[v22] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v10 == v21)
      {
        uint64_t v28 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
        uint64_t v29 = a1;
        uint64_t v30 = a2;
        uint64_t v31 = v10;
        uint64_t v32 = v8;
LABEL_37:
        v28(v29, v30, v31, v32);
        return;
      }
      unint64_t v33 = (unint64_t)&a1[v17 + v18] & ~v18;
      if (v13 != v21)
      {
        uint64_t v29 = (unsigned char *)((v33 + v19 + v20) & ~v20);
        uint64_t v28 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        uint64_t v30 = a2;
        uint64_t v31 = v16;
        uint64_t v32 = v7;
        goto LABEL_37;
      }
      unint64_t v34 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
      v34(v33, a2);
      return;
  }
}

uint64_t type metadata accessor for AccumulateSequence()
{
  return swift_getGenericMetadata();
}

uint64_t sub_184CF027C()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184CF0360(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  unint64_t v13 = ((v8 + v11) & ~v11) + *(void *)(v10 + 64);
  uint64_t v14 = (*(unsigned char *)(v7 + 80) | *(unsigned char *)(v10 + 80));
  if (v14 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v18, ((unint64_t)a2 + v12) & v18, v9);
  }
  return a1;
}

uint64_t sub_184CF04DC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t sub_184CF05A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184CF0674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184CF0744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184CF0814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184CF08E4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v11;
  if (a2 <= v12) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v12 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v12)
      {
        if (v8 >= v10)
        {
          int v23 = *(uint64_t (**)(unsigned __int16 *))(v7 + 48);
          return v23(a1);
        }
        else
        {
          unsigned int v21 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v11, v10);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = (v13 & ~v11) + *(_DWORD *)(v9 + 64);
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v12 + (v20 | v18) + 1;
}

void sub_184CF0B5C(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v13;
  size_t v16 = (v15 & ~v13) + *(void *)(v11 + 64);
  if (a3 <= v14)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v14 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < a2)
  {
    unsigned int v18 = ~v14 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x184CF0E54);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v10 >= v12)
        {
          int v23 = *(void (**)(unsigned char *, uint64_t))(v9 + 56);
          v23(a1, a2);
        }
        else
        {
          size_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v13, a2, v12);
        }
      }
      return;
  }
}

unint64_t sub_184CF0E7C(int a1)
{
  unint64_t result = 1701736302;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 1953718636;
      break;
    case 4:
      unint64_t result = 0x7473726966;
      break;
    case 5:
    case 6:
      unint64_t result = 0x70696B53656E6F6ELL;
      break;
    case 7:
      unint64_t result = 0x6C6E4F6168706C61;
      break;
    default:
      sub_1850C3CE8();
      swift_bridgeObjectRelease();
      sub_1850C3D68();
      sub_1850C39E8();
      swift_bridgeObjectRelease();
      sub_1850C39E8();
      unint64_t result = 0x7761722874696E69;
      break;
  }
  return result;
}

unint64_t sub_184CF100C()
{
  return sub_184CF0E7C(*v0);
}

Swift::Bool __swiftcall CGAffineTransformEqualToTransform(_:_:)(CGAffineTransform *a1, CGAffineTransform *a2)
{
  Swift::Bool result = sub_1850C3D28();
  __break(1u);
  return result;
}

CGColorRef_optional __swiftcall CGColorGetConstantColor(_:)(CFStringRef_optional a1)
{
  result.value = (CGColorRef)sub_1850C3D28();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CGColorEqualToColor(_:_:)(CGColorRef_optional a1, CGColorRef_optional a2)
{
  Swift::Bool result = sub_1850C3D28();
  __break(1u);
  return result;
}

void CGColorGetComponents(_:)()
{
}

Swift::Int __swiftcall CGColorSpaceGetColorTableCount(_:)(CGColorSpaceRef_optional a1)
{
  Swift::Int result = sub_1850C3D28();
  __break(1u);
  return result;
}

void CGColorSpaceGetColorTable(_:_:)()
{
}

void CGContextSetLineDash(_:_:_:_:)()
{
}

void CGContextMoveToPoint(_:_:_:)()
{
}

void CGContextAddLineToPoint(_:_:_:)()
{
}

void CGContextAddCurveToPoint(_:_:_:_:_:_:_:)()
{
}

void CGContextAddQuadCurveToPoint(_:_:_:_:_:)()
{
}

void CGContextAddRects(_:_:_:)()
{
}

void CGContextAddLines(_:_:_:)()
{
}

void CGContextAddArc(_:_:_:_:_:_:_:)()
{
}

void CGContextAddArcToPoint(_:_:_:_:_:_:)()
{
}

void CGContextFillRects(_:_:_:)()
{
}

void CGContextStrokeLineSegments(_:_:_:)()
{
}

void CGContextClipToRects(_:_:_:)()
{
}

Swift::Void __swiftcall CGContextDrawImage(_:_:_:)(CGContextRef_optional a1, __C::CGRect a2, CGImageRef_optional a3)
{
}

Swift::Void __swiftcall CGContextDrawTiledImage(_:_:_:)(CGContextRef_optional a1, __C::CGRect a2, CGImageRef_optional a3)
{
}

void CGContextDrawImageApplyingToneMapping(_:_:_:applying:options:)()
{
}

CGPoint __swiftcall CGContextGetTextPosition(_:)(CGContextRef_optional a1)
{
  sub_1850C3D28();
  __break(1u);
  result.CGFloat y = v2;
  result.CGFloat x = v1;
  return result;
}

void CGContextSetTextPosition(_:_:_:)()
{
}

void CGContextShowGlyphsAtPositions(_:_:_:_:)()
{
}

Swift::Void __swiftcall CGContextFillPath(_:)(CGContextRef_optional a1)
{
}

Swift::Void __swiftcall CGContextEOFillPath(_:)(CGContextRef_optional a1)
{
}

Swift::Void __swiftcall CGContextClip(_:)(CGContextRef_optional a1)
{
}

Swift::Void __swiftcall CGContextEOClip(_:)(CGContextRef_optional a1)
{
}

void CGGetLastMouseDelta(_:_:)()
{
}

void CGRectDivide(_:_:_:_:_:)()
{
}

void CGPointMakeWithDictionaryRepresentation(_:_:)()
{
}

void CGSizeMakeWithDictionaryRepresentation(_:_:)()
{
}

void CGRectMakeWithDictionaryRepresentation(_:_:)()
{
}

void CGImageCreateWithMaskingColors(_:_:)()
{
}

Swift::Void __swiftcall CGContextDrawLayerInRect(_:_:_:)(CGContextRef_optional a1, __C::CGRect a2, CGLayerRef_optional a3)
{
}

Swift::Void __swiftcall CGContextDrawLayerAtPoint(_:_:_:)(CGContextRef_optional a1, CGPoint a2, CGLayerRef_optional a3)
{
}

void CGPathCreateCopyByDashingPath(_:_:_:_:_:)()
{
}

void CGPathCreateCopyByStrokingPath(_:_:_:_:_:_:)()
{
}

Swift::Bool __swiftcall CGPathEqualToPath(_:_:)(CGPathRef_optional a1, CGPathRef_optional a2)
{
  Swift::Bool result = sub_1850C3D28();
  __break(1u);
  return result;
}

void CGPathMoveToPoint(_:_:_:_:)()
{
}

void CGPathAddLineToPoint(_:_:_:_:)()
{
}

void CGPathAddCurveToPoint(_:_:_:_:_:_:_:_:)()
{
}

void CGPathAddQuadCurveToPoint(_:_:_:_:_:_:)()
{
}

void CGPathAddRect(_:_:_:)()
{
}

void CGPathAddRects(_:_:_:_:)()
{
}

void CGPathAddLines(_:_:_:_:)()
{
}

void CGPathAddEllipseInRect(_:_:_:)()
{
}

void CGPathAddRelativeArc(_:_:_:_:_:_:_:)()
{
}

void CGPathAddArc(_:_:_:_:_:_:_:_:)()
{
}

void CGPathAddArcToPoint(_:_:_:_:_:_:_:)()
{
}

void CGPathAddPath(_:_:_:)()
{
}

void kCGColorWhite.getter()
{
}

void kCGColorBlack.getter()
{
}

void kCGColorClear.getter()
{
}

uint64_t *_s14descr1ED08D321O9OperationOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1850C3DB8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8);
      *(uint64_t *)((char *)a1 + *(int *)(v8 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t _s14descr1ED08D321O9OperationOwxx(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = sub_1850C3DB8();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

char *_s14descr1ED08D321O9OperationOwcp(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1850C3DB8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8);
    *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *_s14descr1ED08D321O9OperationOwca(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_184CF235C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1850C3DB8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8);
      *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_184CF235C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Region.Operation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for Region.Operation()
{
  uint64_t result = qword_1E8F8BBC0;
  if (!qword_1E8F8BBC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *_s14descr1ED08D321O9OperationOwtk(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1850C3DB8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8);
    *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *_s14descr1ED08D321O9OperationOwta(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_184CF235C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1850C3DB8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8);
      *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s14descr1ED08D321O9OperationOwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t _s14descr1ED08D321O9OperationOwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_184CF2608()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_184CF2618()
{
  v2[4] = " ";
  uint64_t result = sub_1850C3DB8();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_184CF26C4@<X0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6 = sub_1850C3DB8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  unsigned int v14 = (char *)&v28 - v13;
  uint64_t v15 = type metadata accessor for Region.Operation();
  MEMORY[0x1F4188790](v15, v16);
  unsigned int v18 = (double *)((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v19 = *a1;
  sub_184CF29FC(a2, (uint64_t)v18);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    double v21 = *(double *)((char *)v18 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8) + 48));
    uint64_t result = (*(uint64_t (**)(char *, double *, uint64_t))(v7 + 32))(v14, v18, v6);
    if (v21 > 0.0)
    {
      double v22 = v19 * v21;
      double v29 = v22;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
      int v23 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v11, v6);
      if (v23 == *MEMORY[0x1E4FBBEA0])
      {
        double v24 = round(v22);
      }
      else if (v23 == *MEMORY[0x1E4FBBE98])
      {
        double v24 = rint(v22);
      }
      else if (v23 == *MEMORY[0x1E4FBBEA8])
      {
        double v24 = ceil(v22);
      }
      else if (v23 == *MEMORY[0x1E4FBBEB0])
      {
        double v24 = floor(v22);
      }
      else
      {
        if (v23 != *MEMORY[0x1E4FBBE88])
        {
          if (v23 == *MEMORY[0x1E4FBBE90])
          {
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
            if ((*(void *)&v22 & 0x8000000000000000) != 0) {
              double v26 = floor(v22);
            }
            else {
              double v26 = ceil(v22);
            }
          }
          else
          {
            sub_1850C3A98();
            int v27 = *(void (**)(char *, uint64_t))(v7 + 8);
            v27(v14, v6);
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v11, v6);
            double v26 = v29;
          }
          double v25 = v26 / v21;
          goto LABEL_16;
        }
        double v24 = trunc(v22);
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      double v25 = v24 / v21;
LABEL_16:
      *a3 = v25;
      return result;
    }
    __break(1u);
  }
  else if (*v18 >= 0.0)
  {
    double v25 = v18[2] + v19 * *v18;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_184CF29FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Region.Operation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_184CF2A60@<X0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6 = sub_1850C3DB8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  unsigned int v14 = (char *)&v29 - v13;
  uint64_t v15 = type metadata accessor for Region.Operation();
  MEMORY[0x1F4188790](v15, v16);
  unsigned int v18 = (double *)((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v19 = *a1;
  sub_184CF29FC(a2, (uint64_t)v18);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    double v21 = *(double *)((char *)v18 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8) + 48));
    uint64_t result = (*(uint64_t (**)(char *, double *, uint64_t))(v7 + 32))(v14, v18, v6);
    if (v21 > 0.0)
    {
      double v22 = v19 * v21;
      double v30 = v22;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
      int v23 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v11, v6);
      if (v23 == *MEMORY[0x1E4FBBEA0])
      {
        double v24 = round(v22);
      }
      else if (v23 == *MEMORY[0x1E4FBBE98])
      {
        double v24 = rint(v22);
      }
      else if (v23 == *MEMORY[0x1E4FBBEA8])
      {
        double v24 = ceil(v22);
      }
      else if (v23 == *MEMORY[0x1E4FBBEB0])
      {
        double v24 = floor(v22);
      }
      else
      {
        if (v23 != *MEMORY[0x1E4FBBE88])
        {
          if (v23 == *MEMORY[0x1E4FBBE90])
          {
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
            if ((*(void *)&v22 & 0x8000000000000000) != 0) {
              double v27 = floor(v22);
            }
            else {
              double v27 = ceil(v22);
            }
          }
          else
          {
            sub_1850C3A98();
            uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
            v28(v14, v6);
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v11, v6);
            double v27 = v30;
          }
          double v26 = v27 / v21;
          goto LABEL_16;
        }
        double v24 = trunc(v22);
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      double v26 = v24 / v21;
LABEL_16:
      *a3 = v26;
      return result;
    }
    __break(1u);
  }
  else
  {
    double v25 = v18[1];
    if (v25 >= 0.0)
    {
      double v26 = v18[3] + v19 * v25;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_184CF2DA0()
{
  return 0;
}

void sub_184CF2DAC(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_184CF2DB8(uint64_t a1)
{
  unint64_t v2 = sub_184CF3684();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_184CF2DF4(uint64_t a1)
{
  unint64_t v2 = sub_184CF3684();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_184CF2E30(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBF0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184CF3684();
  sub_1850C3F28();
  double v17 = a2;
  double v18 = a3;
  char v19 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BC00);
  sub_184CF3B08(&qword_1E8F8BC08, (void (*)(void))sub_184CD2DD0);
  sub_1850C3D48();
  if (!v5)
  {
    double v17 = a4;
    double v18 = a5;
    char v19 = 1;
    sub_1850C3D48();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_184CF300C(void *a1)
{
  return sub_184CF2E30(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t Region.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3F18();
  BOOL v8 = (~v2 & 0x7FF0000000000000) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v8 && !*(void *)(v5 + 16))
  {
    char v11 = 0;
    uint64_t v5 = v2;
    uint64_t v9 = v3;
    uint64_t v7 = v4;
    uint64_t v10 = v13;
  }
  else
  {
    swift_retain();
    uint64_t v9 = v6;
    swift_retain();
    swift_retain();
    uint64_t v10 = 0;
    char v11 = 1;
  }
  char v14 = v11;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBD0);
  sub_184CEC660(&qword_1E8F8BBD8, &qword_1E8F8BBD0);
  sub_184CF31B0();
  sub_1850C3D98();
  sub_184CF3204(v5, v9, v7, v10, v14);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

unint64_t sub_184CF31B0()
{
  unint64_t result = qword_1E8F8BBE0;
  if (!qword_1E8F8BBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BBE0);
  }
  return result;
}

uint64_t sub_184CF3204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_184CF3250(void *a1)
{
  return Region.encode(to:)(a1);
}

BOOL sub_184CF3268(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_184CF3280()
{
  return sub_1850C3E98();
}

uint64_t sub_184CF32C8()
{
  return sub_1850C3E68();
}

uint64_t sub_184CF32F4()
{
  return sub_1850C3E98();
}

uint64_t sub_184CF3338()
{
  if (*v0) {
    return 121;
  }
  else {
    return 120;
  }
}

uint64_t sub_184CF3350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_184CF36D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_184CF3378(uint64_t a1)
{
  unint64_t v2 = sub_184CF3AB4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_184CF33B4(uint64_t a1)
{
  unint64_t v2 = sub_184CF3AB4();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_184CF33F0(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = sub_184CF3798(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
}

uint64_t Region.init(from:)@<X0>(void *a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v5 = MEMORY[0x1E4FBC860];
  int64x2_t v18 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v19 = v18;
  v20.i64[0] = MEMORY[0x1E4FBC860];
  v20.i64[1] = MEMORY[0x1E4FBC860];
  unint64_t v21 = MEMORY[0x1E4FBC860];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3EF8();
  if (v2)
  {
    swift_release_n();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v16, v17);
    if (sub_1850C3D88())
    {
      int64x2_t v11 = vdupq_n_s64(v5);
      uint64_t v6 = 0x7FF8000000000000;
      uint64_t v7 = 0x7FF8000000000000;
      uint64_t v8 = 0x7FF8000000000000;
      uint64_t v9 = 0x7FF8000000000000;
    }
    else
    {
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
        sub_184CF3618();
        sub_1850C3D78();
        unint64_t v13 = v5;
        unint64_t v14 = v5;
        unint64_t v15 = v5;
        Region.formUnion(_:)(&v12);
        swift_release_n();
        __swift_project_boxed_opaque_existential_1(v16, v17);
      }
      while ((sub_1850C3D88() & 1) == 0);
      uint64_t v8 = v18.i64[1];
      uint64_t v9 = v18.i64[0];
      uint64_t v6 = v19.i64[1];
      uint64_t v7 = v19.i64[0];
      int64x2_t v11 = v20;
      unint64_t v5 = v21;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    a2->i64[0] = v9;
    a2->i64[1] = v8;
    a2[1].i64[0] = v7;
    a2[1].i64[1] = v6;
    a2[2] = v11;
    a2[3].i64[0] = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_184CF3618()
{
  unint64_t result = qword_1E8F8BBE8;
  if (!qword_1E8F8BBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BBE8);
  }
  return result;
}

uint64_t sub_184CF366C@<X0>(void *a1@<X0>, int64x2_t *a2@<X8>)
{
  return Region.init(from:)(a1, a2);
}

unint64_t sub_184CF3684()
{
  unint64_t result = qword_1E8F8BBF8;
  if (!qword_1E8F8BBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BBF8);
  }
  return result;
}

uint64_t sub_184CF36D8(uint64_t a1, uint64_t a2)
{
  if (a1 == 120 && a2 == 0xE100000000000000 || (sub_1850C3DD8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 121 && a2 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_1850C3DD8();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

double sub_184CF3798(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BC10);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184CF3AB4();
  sub_1850C3F08();
  if (v1) {
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BC00);
  char v11 = 0;
  sub_184CF3B08(&qword_1E8F8BC20, (void (*)(void))sub_184C9D3E4);
  sub_1850C3D38();
  double v2 = v12;
  if (v12 >= v13)
  {
    LOBYTE(v12) = 0;
    sub_1850C3D08();
    swift_allocError();
    sub_184CEC660(&qword_1E8F8BC28, &qword_1E8F8BC10);
    goto LABEL_8;
  }
  char v11 = 1;
  sub_1850C3D38();
  if (v12 >= v13)
  {
    LOBYTE(v12) = 1;
    sub_1850C3D08();
    swift_allocError();
    sub_184CEC660(&qword_1E8F8BC28, &qword_1E8F8BC10);
LABEL_8:
    sub_1850C3CF8();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_10:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v2;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

unint64_t sub_184CF3AB4()
{
  unint64_t result = qword_1E8F8BC18;
  if (!qword_1E8F8BC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC18);
  }
  return result;
}

uint64_t sub_184CF3B08(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F8BC00);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_184CF3B8C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_184CF3B94(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *_s14descr1ED08D6D9C12DecodingKeysOMa()
{
  return &_s14descr1ED08D6D9C12DecodingKeysON;
}

uint64_t getEnumTagSinglePayload for CGPathFillRule(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14descr1ED08D6D9C12DecodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x184CF3D0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14descr1ED08D6D9C12EncodingKeysOMa()
{
  return &_s14descr1ED08D6D9C12EncodingKeysON;
}

unint64_t sub_184CF3D48()
{
  unint64_t result = qword_1E8F8BC30;
  if (!qword_1E8F8BC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC30);
  }
  return result;
}

unint64_t sub_184CF3DA0()
{
  unint64_t result = qword_1E8F8BC38;
  if (!qword_1E8F8BC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC38);
  }
  return result;
}

unint64_t sub_184CF3DF8()
{
  unint64_t result = qword_1E8F8BC40;
  if (!qword_1E8F8BC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC40);
  }
  return result;
}

unint64_t sub_184CF3E50()
{
  unint64_t result = qword_1E8F8BC48;
  if (!qword_1E8F8BC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC48);
  }
  return result;
}

unint64_t sub_184CF3EA8()
{
  unint64_t result = qword_1E8F8BC50;
  if (!qword_1E8F8BC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC50);
  }
  return result;
}

unint64_t sub_184CF3F00()
{
  unint64_t result = qword_1E8F8BC58;
  if (!qword_1E8F8BC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC58);
  }
  return result;
}

uint64_t sub_184CF3F6C()
{
  return 540702760;
}

uint64_t sub_184CF40A8()
{
  return sub_184CF3F6C();
}

uint64_t sub_184CF40B4()
{
  uint64_t v1 = sub_1850C3EC8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F0);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = v0[1];
  long long v14 = *v0;
  long long v15 = v10;
  v13[1] = MEMORY[0x1E4FBC860];
  uint64_t v11 = sub_1850C3EB8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E4FBC430], v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BC98);
  sub_184CEC660(&qword_1E8F8BCA0, &qword_1E8F8BC98);
  return sub_1850C3ED8();
}

uint64_t Region.debugDescription.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  BOOL v5 = (~*v0 & 0x7FF0000000000000) != 0 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v5 && !*(void *)(v2 + 16))
  {
    char v6 = 0;
    uint64_t v2 = *v0;
    uint64_t v3 = v0[1];
    uint64_t v4 = v0[2];
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v1 = 0;
    char v6 = 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BC60);
  sub_184CF4440();
  sub_1850C3958();
  sub_184CF3204(v2, v3, v4, v1, v6);
  sub_1850C39E8();
  swift_bridgeObjectRelease();
  sub_1850C39E8();
  return 0x5B286E6F69676552;
}

uint64_t sub_184CF43DC@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1850C3D18();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

unint64_t sub_184CF4440()
{
  unint64_t result = qword_1E8F8BC68;
  if (!qword_1E8F8BC68)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F8BC60);
    sub_184CF44B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC68);
  }
  return result;
}

unint64_t sub_184CF44B4()
{
  unint64_t result = qword_1E8F8BC70;
  if (!qword_1E8F8BC70)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F8BBD0);
    sub_184CEC660(&qword_1E8F8BC78, &qword_1E8F8BC80);
    sub_184CEB584();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC70);
  }
  return result;
}

uint64_t Region.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v23[1] = a1;
  uint64_t v2 = sub_1850C3EC8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  char v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F0);
  MEMORY[0x1F4188790](v7 - 8, v8);
  long long v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1[1];
  long long v12 = *((_OWORD *)v1 + 1);
  uint64_t v14 = v1[4];
  uint64_t v13 = v1[5];
  unint64_t v15 = v1[6];
  uint64_t v26 = *v1;
  uint64_t v27 = v11;
  long long v28 = v12;
  uint64_t v29 = v14;
  uint64_t v30 = v13;
  unint64_t v31 = v15;
  uint64_t v16 = v26;
  if ((~v26 & 0x7FF0000000000000) == 0 && (v26 & 0xFFFFFFFFFFFFFLL) != 0 || (uint64_t v17 = *(void *)(v14 + 16)) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    long long v12 = v15;
    LOBYTE(v17) = 1;
    uint64_t v16 = v14;
    uint64_t v18 = v13;
  }
  else
  {
    uint64_t v18 = v11;
  }
  v23[2] = v16;
  v23[3] = v18;
  long long v24 = v12;
  char v25 = v17;
  uint64_t v19 = *MEMORY[0x1E4FBC3F8];
  uint64_t v20 = sub_1850C3EB8();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v10, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v10, 0, 1, v20);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E4FBC430], v2);
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBD0);
  sub_184CF47D8();
  return sub_1850C3ED8();
}

unint64_t sub_184CF47D8()
{
  unint64_t result = qword_1E8F8BC88;
  if (!qword_1E8F8BC88)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F8BBD0);
    sub_184CEC660(&qword_1E8F8BC90, &qword_1E8F8BC80);
    sub_184CEB4E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BC88);
  }
  return result;
}

BOOL _s12CoreGraphics6RegionV5ErrorO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a1 + 8) && *(void *)a1 == *(void *)a2;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t _s14descr1ED08D321O5ErrorOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s14descr1ED08D321O5ErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_184CF4958(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_184CF4960(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Region.Error()
{
  return &type metadata for Region.Error;
}

uint64_t _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>, float a6@<S2>, float a7@<S3>)
{
  uint64_t v14 = sub_1850C3B88();
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = &v23[-v16];
  CGColorSpaceRef v18 = CGColorSpaceCreateWithName(@"kCGColorSpaceSRGB");
  if (v18)
  {
    double v24 = a4;
    double v25 = a5;
    double v26 = a6;
    double v27 = a7;
    uint64_t v19 = *(void (**)(void))(a2 + 8);
    uint64_t v20 = v18;
    v19();
    uint64_t v21 = *(void *)(a1 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, a1) != 1)
    {

      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v21 + 32))(a3, v17, a1);
    }
    __break(1u);
  }
  uint64_t result = sub_1850C3D28();
  __break(1u);
  return result;
}

void sub_184CF4B58(CGColorSpace *a1@<X0>, const CGFloat *a2@<X1>, CGColorRef *a3@<X8>)
{
  CGColorRef v5 = CGColorCreate(a1, a2);

  *a3 = v5;
}

uint64_t sub_184CF4B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  return _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)(a1, (uint64_t)&protocol witness table for CGColorRef, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of _CGColorInitTrampoline.init(colorSpace:components:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

unint64_t sub_184CF4BB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  int64_t v6 = *(void *)(v1 + 24);
  unint64_t v7 = *(void *)(v1 + 32);
  char v8 = *(unsigned char *)(v1 + 40);
  if ((v8 & 1) == 0)
  {
    char v19 = v7 & 1;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(unsigned char *)(v1 + 32) = 1;
    goto LABEL_14;
  }
  *(void *)uint64_t v1 = v3;
  *(void *)(v1 + 8) = v4;
  *(void *)(v1 + 16) = v5;
  unint64_t v9 = *(void *)(v4 + 16);
  if (v6 == v9 && v7 == *(void *)(v5 + 16))
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int64_t v6 = 0;
    char v19 = 1;
    goto LABEL_14;
  }
  unint64_t result = sub_184CEBF4C(v6, v7, v3, v5);
  uint64_t v16 = v7 + 2;
  if (__OFADD__(v7, 2))
  {
    __break(1u);
  }
  else
  {
    if (v6 >= (uint64_t)v9) {
      goto LABEL_10;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v17 = v4 + 32;
      if (v16 >= *(unsigned int *)(v4 + 32 + 4 * v6))
      {
        int64_t v18 = v6 + 1;
        if (v6 + 1 < v9 && v16 >= *(unsigned int *)(v17 + 4 * v18))
        {
          int64_t v18 = v6 + 2;
          if (v6 + 2 < v9 && v16 >= *(unsigned int *)(v17 + 4 * v18))
          {
            while (v9 - 3 != v6)
            {
              uint64_t v20 = *(unsigned int *)(v4 + 44 + 4 * v6++);
              if (v16 < v20)
              {
                int64_t v18 = v6 + 2;
                goto LABEL_11;
              }
            }
            int64_t v18 = v9;
          }
        }
        goto LABEL_11;
      }
LABEL_10:
      int64_t v18 = v6;
LABEL_11:
      char v19 = 0;
      *(void *)(v1 + 24) = v18;
      *(void *)(v1 + 32) = v16;
      uint64_t v3 = v12;
      uint64_t v4 = v13;
      uint64_t v5 = v14;
      int64_t v6 = v15;
LABEL_14:
      *(unsigned char *)(v1 + 40) = v8;
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v6;
      *(unsigned char *)(a1 + 32) = v19;
      return result;
    }
  }
  __break(1u);
  return result;
}

double Region.init(dataRepresentation:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      char v7 = BYTE4(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_7;
      }
      __break(1u);
LABEL_6:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      char v7 = v8 - v9;
      if (v10)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
      }
LABEL_7:
      if ((v7 & 0x1F) != 0)
      {
        sub_184CF4FE0(a1, a2);
LABEL_38:
        *(void *)(a3 + 48) = 0;
        *(void *)&long long v28 = 0;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        return *(double *)&v28;
      }
      if (v4)
      {
        if (v4 == 1)
        {
          uint64_t v11 = (a1 >> 32) - (int)a1;
          if (a1 >> 32 >= (int)a1)
          {
            sub_184CF515C(a1, a2);
            uint64_t v12 = sub_1850C38F8();
            if (!v12)
            {
LABEL_15:
              uint64_t v14 = sub_1850C3908();
              if (v14 >= v11) {
                uint64_t v15 = (a1 >> 32) - (int)a1;
              }
              else {
                uint64_t v15 = v14;
              }
              uint64_t v16 = v12 + v15;
              if (v12) {
                uint64_t v17 = v16;
              }
              else {
                uint64_t v17 = 0;
              }
              sub_184CF5038(v12, v17, (uint64_t)v33);
              sub_184CF4FE0(a1, a2);
              goto LABEL_36;
            }
            uint64_t v13 = sub_1850C3918();
            if (!__OFSUB__((int)a1, v13))
            {
              v12 += (int)a1 - v13;
              goto LABEL_15;
            }
            goto LABEL_43;
          }
          goto LABEL_41;
        }
        uint64_t v19 = *(void *)(a1 + 16);
        uint64_t v20 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        uint64_t v21 = sub_1850C38F8();
        if (v21)
        {
          uint64_t v22 = sub_1850C3918();
          if (__OFSUB__(v19, v22)) {
            goto LABEL_44;
          }
          v21 += v19 - v22;
        }
        BOOL v10 = __OFSUB__(v20, v19);
        uint64_t v23 = v20 - v19;
        if (v10) {
          goto LABEL_42;
        }
        uint64_t v24 = sub_1850C3908();
        if (v24 >= v23) {
          uint64_t v25 = v23;
        }
        else {
          uint64_t v25 = v24;
        }
        uint64_t v26 = v21 + v25;
        if (v21) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        sub_184CF5038(v21, v27, (uint64_t)v33);
        swift_release();
        swift_release();
      }
      else
      {
        v32[0] = a1;
        LOWORD(v32[1]) = a2;
        BYTE2(v32[1]) = BYTE2(a2);
        BYTE3(v32[1]) = BYTE3(a2);
        BYTE4(v32[1]) = BYTE4(a2);
        BYTE5(v32[1]) = BYTE5(a2);
        int64_t v18 = (char *)v32 + BYTE6(a2);
LABEL_24:
        sub_184CF5038((uint64_t)v32, (uint64_t)v18, (uint64_t)v33);
      }
LABEL_36:
      sub_184CF4FE0(a1, a2);
      long long v28 = v34;
      if (!(void)v34) {
        goto LABEL_38;
      }
      long long v29 = v33[1];
      uint64_t v30 = v35;
      *(_OWORD *)a3 = v33[0];
      *(_OWORD *)(a3 + 16) = v29;
      *(_OWORD *)(a3 + 32) = v28;
      *(void *)(a3 + 48) = v30;
      return *(double *)&v28;
    case 2uLL:
      goto LABEL_6;
    case 3uLL:
      memset(v32, 0, 14);
      int64_t v18 = (char *)v32;
      goto LABEL_24;
    default:
      char v7 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_184CF4FE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

double sub_184CF5038@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int64x2_t v4 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  int64x2_t v23 = v4;
  int64x2_t v24 = v4;
  v25.i64[0] = MEMORY[0x1E4FBC860];
  v25.i64[1] = MEMORY[0x1E4FBC860];
  uint64_t v26 = MEMORY[0x1E4FBC860];
  int64x2_t v6 = vdupq_n_s64(MEMORY[0x1E4FBC860]);
  if (a1 && (uint64_t v8 = a2 - a1, a2 - a1 >= 1))
  {
    uint64_t v9 = 0;
    do
    {
      double v10 = *(double *)(a1 + v9);
      double v11 = *(double *)(a1 + v9 + 8);
      double v12 = *(double *)(a1 + v9 + 16);
      double v13 = *(double *)(a1 + v9 + 24);
      if (v10 >= v11 || v12 >= v13)
      {
        swift_release();
        swift_release();
        swift_release();
        *(void *)(a3 + 48) = 0;
        v4.i64[0] = 0;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        return *(double *)v4.i64;
      }
      if (__OFADD__(v9, 32)) {
        uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        v9 += 32;
      }
      *(double *)&long long v17 = v10;
      *((double *)&v17 + 1) = v11;
      double v18 = v12;
      double v19 = v13;
      uint64_t v20 = v5;
      uint64_t v21 = v5;
      uint64_t v22 = v5;
      Region.formUnion(_:)(&v17);
      swift_release_n();
    }
    while (v9 < v8);
    int64x2_t v4 = v23;
    int64x2_t v15 = v24;
    int64x2_t v6 = v25;
    uint64_t v5 = v26;
  }
  else
  {
    int64x2_t v15 = v4;
  }
  *(int64x2_t *)a3 = v4;
  *(int64x2_t *)(a3 + 16) = v15;
  *(int64x2_t *)(a3 + 32) = v6;
  *(void *)(a3 + 48) = v5;
  return *(double *)v4.i64;
}

uint64_t sub_184CF515C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t Region.dataRepresentation.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  BOOL v8 = (~v1 & 0x7FF0000000000000) != 0 || (v1 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v8 && !*(void *)(v5 + 16))
  {
    char v27 = 0;
    uint64_t v5 = v1;
    uint64_t v6 = v2;
    uint64_t v7 = v4;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v3 = 0;
    char v27 = 1;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  while (1)
  {
    unint64_t v15 = v10 << 8;
    if ((v27 & 1) == 0) {
      break;
    }
    unint64_t v16 = v15 | v9;
    unint64_t v17 = *(void *)(v6 + 16);
    unint64_t v18 = *(void *)(v7 + 16);
    if (v3 == v17 && v16 == v18) {
      goto LABEL_38;
    }
    if (v16 >= v18)
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    if (v16 + 1 >= v18) {
      goto LABEL_40;
    }
    if ((v3 & 0x8000000000000000) != 0) {
      goto LABEL_41;
    }
    unint64_t v20 = *(void *)(v5 + 16);
    if (v3 >= v20) {
      goto LABEL_42;
    }
    unint64_t v21 = v3 + 1;
    if (v3 + 1 >= v20) {
      goto LABEL_43;
    }
    unint64_t v22 = v16 + 2;
    unint64_t v11 = v3;
    if (v3 < v17)
    {
      uint64_t v23 = v6 + 32;
      unint64_t v11 = v3;
      if (v22 >= *(unsigned int *)(v6 + 32 + 4 * v3))
      {
        unint64_t v11 = v3 + 1;
        if (v21 < v17)
        {
          unint64_t v11 = v3 + 1;
          if (v22 >= *(unsigned int *)(v23 + 4 * v21))
          {
            unint64_t v11 = v3 + 2;
            if (v3 + 2 < v17 && v22 >= *(unsigned int *)(v23 + 4 * v11))
            {
              unint64_t v11 = v3 + 3;
              if (v3 + 3 < v17 && v22 >= *(unsigned int *)(v23 + 4 * v11))
              {
                unint64_t v24 = v3;
                do
                {
                  if (v17 - 4 == v24)
                  {
                    unint64_t v11 = *(void *)(v6 + 16);
                    goto LABEL_11;
                  }
                  int64_t v25 = *(unsigned int *)(v6 + 48 + 4 * v24++);
                }
                while ((uint64_t)v22 >= v25);
                unint64_t v11 = v24 + 3;
              }
            }
          }
        }
      }
    }
LABEL_11:
    uint64_t v12 = v6;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    uint64_t v9 = (v16 + 2);
    unint64_t v10 = v22 >> 8;
LABEL_12:
    sub_1850C3928();
    unint64_t v3 = v11;
    uint64_t v7 = v14;
    uint64_t v6 = v12;
    uint64_t v5 = v13;
  }
  if ((v9 & 1) == 0)
  {
    unint64_t v11 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v9 = 1;
    goto LABEL_12;
  }
  unint64_t v3 = 0;
  uint64_t v7 = 0;
  uint64_t v6 = 0;
  uint64_t v5 = 0;
  unint64_t v16 = v15 | 1;
LABEL_38:
  sub_184CF5464(v5, v6, v7, v3, v16, v27);
  return 0;
}

uint64_t sub_184CF5464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void CGRect.__divided(slice:remainder:atDistance:from:)(CGRect *a1, CGRect *a2, CGRectEdge a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v9.origin.CGFloat x = a5;
  v9.origin.CGFloat y = a6;
  v9.size.double width = a7;
  v9.size.double height = a8;
  CGRectDivide(v9, a1, a2, a4, a3);
}

uint64_t sub_184CF54CC(int a1)
{
  HIDWORD(v1) = a1;
  LODWORD(v1) = a1;
  uint64_t result = 0x666544726564726FLL;
  switch((v1 >> 12))
  {
    case 0u:
      return result;
    case 1u:
      uint64_t result = 0x4C3631726564726FLL;
      break;
    case 2u:
      uint64_t result = 0x4C3233726564726FLL;
      break;
    case 3u:
      uint64_t result = 0x423631726564726FLL;
      break;
    case 4u:
      uint64_t result = 0x423233726564726FLL;
      break;
    default:
      sub_1850C3CE8();
      swift_bridgeObjectRelease();
      sub_1850C3D68();
      sub_1850C39E8();
      swift_bridgeObjectRelease();
      sub_1850C39E8();
      uint64_t result = 0x7761722874696E69;
      break;
  }
  return result;
}

uint64_t sub_184CF5640()
{
  return sub_184CF54CC(*v0);
}

void static CGFloat.min.getter()
{
}

void static CGFloat.max.getter()
{
}

void CGFLOAT_MIN.getter()
{
}

void CGFLOAT_MAX.getter()
{
}

void % infix(_:_:)()
{
}

void %= infix(_:_:)()
{
}

double nearbyint(_:)(double a1)
{
  return nearbyint(a1);
}

double rint(_:)(double a1)
{
  return rint(a1);
}

double copysign(_:_:)(int8x16_t a1, int8x16_t a2)
{
  v2.f64[0] = NAN;
  v2.f64[1] = NAN;
  *(void *)&double result = vbslq_s8((int8x16_t)vnegq_f64(v2), a1, a2).u64[0];
  return result;
}

double fmax(_:_:)(double a1, double a2)
{
  return fmax(a1, a2);
}

double fmin(_:_:)(double a1, double a2)
{
  return fmin(a1, a2);
}

void fpclassify(_:)()
{
}

BOOL isnormal(_:)(double a1)
{
  return ((*(void *)&a1 >> 52) & 0x7FFLL) != 0x7FF && ((*(void *)&a1 >> 52) & 0x7FFLL) != 0;
}

BOOL isfinite(_:)(double a1)
{
  return (~*(void *)&a1 & 0x7FF0000000000000) != 0;
}

BOOL isinf(_:)(double a1)
{
  return (*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000;
}

BOOL isnan(_:)(double a1)
{
  return (*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&a1 & 0x7FF0000000000000) == 0;
}

uint64_t signbit(_:)(double a1)
{
  return *(void *)&a1 >> 63;
}

double ldexp(_:_:)(uint64_t a1, double result)
{
  uint64_t v2 = (*(void *)&result >> 52) & 0x7FFLL;
  if (v2 != 2047 && (v2 | *(void *)&result & 0xFFFFFFFFFFFFFLL) != 0)
  {
    if (a1 > -1023)
    {
      if (a1 > 1023)
      {
        if (a1 >= 3069) {
          a1 = 3069;
        }
        do
        {
          a1 -= 1023;
          double result = result * 8.98846567e307;
        }
        while ((unint64_t)a1 > 0x3FF);
      }
    }
    else
    {
      if (a1 <= -3066) {
        uint64_t v4 = -3066;
      }
      else {
        uint64_t v4 = a1;
      }
      do
      {
        a1 = v4 + 1022;
        double result = result * 2.22507386e-308;
        BOOL v5 = __CFADD__(v4, 2044);
        v4 += 1022;
      }
      while (!v5);
    }
    return result * COERCE_DOUBLE(((a1 << 52) + 0x3FF0000000000000) & 0x7FF0000000000000);
  }
  return result;
}

unint64_t ilogb(_:)(double a1)
{
  uint64_t v1 = (*(void *)&a1 >> 52) & 0x7FFLL;
  if (v1 == 2047) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v3 = *(void *)&a1 & 0xFFFFFFFFFFFFFLL;
  if (!(v1 | *(void *)&a1 & 0xFFFFFFFFFFFFFLL)) {
    return 0x8000000000000000;
  }
  if (v1) {
    return v1 - 1023;
  }
  if (v3) {
    return -1011 - __clz(v3);
  }
  __break(1u);
  return result;
}

uint64_t lgamma(_:)(double a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v2 = 0;
  lgamma_r(a1, &v2);
  return v2;
}

uint64_t remquo(_:_:)(long double a1, long double a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int __z = 0;
  remquo(a1, a2, &__z);
  return __z;
}

double nan(_:)()
{
  uint64_t v0 = sub_1850C39D8();
  double v1 = nan((const char *)(v0 + 32));
  swift_release();
  return v1;
}

uint64_t jn(_:_:)(uint64_t a1)
{
  return sub_184CF5C10(a1, MEMORY[0x1E4F148F8]);
}

uint64_t yn(_:_:)(uint64_t a1)
{
  return sub_184CF5C10(a1, MEMORY[0x1E4F14BB8]);
}

uint64_t sub_184CF5C10(uint64_t result, uint64_t (*a2)(void))
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return a2();
  }
  __break(1u);
  return result;
}

double static CGRect.zero.getter()
{
  return 0.0;
}

__C::CGRect __swiftcall CGRect.init(x:y:width:height:)(Swift::Int x, Swift::Int y, Swift::Int width, Swift::Int height)
{
  double v4 = (double)x;
  double v5 = (double)y;
  double v6 = (double)width;
  double v7 = (double)height;
  result.size.double height = v7;
  result.size.double width = v6;
  result.origin.CGFloat y = v5;
  result.origin.CGFloat x = v4;
  return result;
}

void __swiftcall CGRect.init(dictionaryRepresentation:)(__C::CGRect_optional *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(&v8, 0, sizeof(v8));
  BOOL v4 = CGRectMakeWithDictionaryRepresentation(dictionaryRepresentation, &v8);

  if (v4) {
    unint64_t v5 = -1;
  }
  else {
    unint64_t v5 = 0;
  }
  int8x16_t v6 = (int8x16_t)vdupq_n_s64(v5);
  CGSize v7 = (CGSize)vandq_s8((int8x16_t)v8.size, v6);
  retstr->value.CGPoint origin = (CGPoint)vandq_s8((int8x16_t)v8.origin, v6);
  retstr->value.CGSize size = v7;
  retstr->is_nil = !v4;
}

__n128 CGRect.divided(atDistance:from:)@<Q0>(CGRectEdge edge@<W0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(&slice, 0, sizeof(slice));
  memset(&v12, 0, sizeof(v12));
  v15.origin.CGFloat x = a4;
  v15.origin.CGFloat y = a5;
  v15.size.double width = a6;
  v15.size.double height = a7;
  CGRectDivide(v15, &slice, &v12, a3, edge);
  __n128 result = (__n128)v12.origin;
  CGSize size = v12.size;
  CGSize v11 = slice.size;
  *(CGPoint *)a2 = slice.origin;
  *(CGSize *)(a2 + 16) = v11;
  *(__n128 *)(a2 + 32) = result;
  *(CGSize *)(a2 + 48) = size;
  return result;
}

uint64_t CGRect.x.getter()
{
  return sub_184CF5DC8((uint64_t (*)(void))CGRectGetMinX);
}

uint64_t CGRect.y.getter()
{
  return sub_184CF5DC8((uint64_t (*)(void))CGRectGetMinY);
}

uint64_t sub_184CF5DC8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t CGRect.customMirror.getter(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = sub_1850C3EC8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  CGRect v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F0);
  MEMORY[0x1F4188790](v13 - 8, v14);
  unint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)unint64_t v24 = a1;
  *(double *)&v24[1] = a2;
  *(double *)&v24[2] = a3;
  *(double *)&v24[3] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F8);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1850CBAB0;
  *(void *)(v17 + 32) = 0x6E696769726FLL;
  *(void *)(v17 + 40) = 0xE600000000000000;
  type metadata accessor for CGPoint(0);
  *(double *)(v17 + 48) = a1;
  *(double *)(v17 + 56) = a2;
  *(void *)(v17 + 72) = v18;
  *(void *)(v17 + 80) = 1702521203;
  *(void *)(v17 + 88) = 0xE400000000000000;
  type metadata accessor for CGSize(0);
  *(void *)(v17 + 120) = v19;
  *(double *)(v17 + 96) = a3;
  *(double *)(v17 + 104) = a4;
  uint64_t v20 = *MEMORY[0x1E4FBC410];
  uint64_t v21 = sub_1850C3EB8();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v16, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E4FBC430], v8);
  type metadata accessor for CGRect(0);
  return sub_1850C3EE8();
}

uint64_t sub_184CF6038()
{
  return CGRect.customMirror.getter(*v0, v0[1], v0[2], v0[3]);
}

void CGRect.customPlaygroundQuickLook.getter(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = 10;
}

__n128 sub_184CF6058@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = 10;
  return result;
}

uint64_t CGRect.debugDescription.getter()
{
  return 40;
}

uint64_t sub_184CF618C()
{
  return CGRect.debugDescription.getter();
}

BOOL static CGRect.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return CGRectEqualToRect(*(CGRect *)&a1, *(CGRect *)&a5);
}

BOOL sub_184CF61B0(CGRect *a1, CGRect *a2)
{
  return CGRectEqualToRect(*a1, *a2);
}

uint64_t sub_184CF61D8(double a1, double a2, double a3, double a4)
{
  return sub_1850C3E78();
}

uint64_t sub_184CF6258()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  double v4 = v0[3];
  sub_1850C3EA8();
  sub_184CF61D8(v1, v2, v3, v4);
  return sub_1850C3E88();
}

uint64_t sub_184CF62DC()
{
  return sub_184CF61D8(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_184CF62E8()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  double v4 = v0[3];
  sub_1850C3E58();
  sub_184CF61D8(v1, v2, v3, v4);
  return sub_1850C3E98();
}

double CGRect.init(from:)(void *a1)
{
  return sub_184C0085C(a1);
}

uint64_t CGRect.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3F18();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  type metadata accessor for CGPoint(0);
  sub_184C00A5C(&qword_1E8F8B4E8, type metadata accessor for CGPoint);
  sub_1850C3DA8();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    type metadata accessor for CGSize(0);
    sub_184C00A5C(&qword_1E8F8B4F0, type metadata accessor for CGSize);
    sub_1850C3DA8();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t sub_184CF64F0(void *a1)
{
  return CGRect.encode(to:)(a1);
}

uint64_t sub_184CF6510()
{
  return sub_184C00A5C(&qword_1E8F8B4B8, type metadata accessor for CGRect);
}

uint64_t sub_184CF655C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v33)(long long *__return_ptr, long long *);
  uint64_t (*v34)(long long *);
  void (*v35)(long long *__return_ptr, void *);
  char v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  long long v40;
  long long v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void v45[4];
  long long v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  int64x2_t v52;
  int64x2_t v53;
  long long v54;
  uint64_t v55;

  uint64_t v52 = vdupq_n_s64(0x7FF8000000000000uLL);
  long long v53 = v52;
  *(void *)&uint64_t v54 = MEMORY[0x1E4FBC860];
  *((void *)&v54 + 1) = MEMORY[0x1E4FBC860];
  long long v55 = MEMORY[0x1E4FBC860];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  long long v34 = *(uint64_t (**)(long long *))(a1 + 56);
  uint64_t v35 = *(void (**)(long long *__return_ptr, void *))(a1 + 40);
  uint64_t v36 = *(unsigned char *)(a1 + 32);
  if (v36) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *(void *)(a1 + 24);
  }
  unint64_t v33 = *(void (**)(long long *__return_ptr, long long *))(a1 + 72);
  uint64_t result = sub_184D02A90(a1);
  uint64_t v7 = 0;
  uint64_t v37 = 0;
  while (1)
  {
    unint64_t v8 = v37 << 8;
    if (v36) {
      break;
    }
    uint64_t v51 = 1;
    if (v7)
    {
      sub_184D02B40(a1);
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      uint64_t v3 = 0;
      uint64_t v2 = 0;
      unint64_t v9 = v8 | v51;
      goto LABEL_37;
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
LABEL_33:
    v45[0] = v2;
    v45[1] = v3;
    v45[2] = v4;
    v45[3] = v5;
    v35(&v40, v45);
    long long v24 = v40;
    long long v25 = v41;
    uint64_t v26 = v42;
    uint64_t v27 = v43;
    uint64_t v28 = v44;
    uint64_t v46 = v40;
    uint64_t v47 = v41;
    uint64_t v48 = v42;
    uint64_t v49 = v43;
    unint64_t v50 = v44;
    if (v34(&v46))
    {
      uint64_t v46 = v24;
      uint64_t v47 = v25;
      uint64_t v48 = v26;
      uint64_t v49 = v27;
      unint64_t v50 = v28;
      v33(&v40, &v46);
      sub_184CD3B4C(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
      uint64_t v46 = v40;
      uint64_t v47 = v41;
      uint64_t v48 = v42;
      uint64_t v49 = v43;
      unint64_t v50 = v44;
      Region.formUnion(_:)(&v46);
      swift_release();
      swift_release();
      uint64_t result = swift_release();
    }
    else
    {
      uint64_t result = sub_184CD3B4C(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
    }
    uint64_t v7 = v51;
    uint64_t v3 = v38;
    unint64_t v5 = v39;
    uint64_t v4 = v20;
    uint64_t v2 = v21;
  }
  unint64_t v9 = v8 | v7;
  unint64_t v10 = *(void *)(v3 + 16);
  unint64_t v11 = *(void *)(v4 + 16);
  if (v5 == v10 && v9 == v11)
  {
    sub_184D02B40(a1);
LABEL_37:
    sub_184CF5464(v2, v3, v4, v5, v9, v36 & 1);
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v29 = v55;
    int64x2_t v30 = v53;
    *(int64x2_t *)a2 = v52;
    *(int64x2_t *)(a2 + 16) = v30;
    *(_OWORD *)(a2 + 32) = v54;
    *(void *)(a2 + 48) = v29;
    return result;
  }
  if (v9 < v11)
  {
    if (v9 + 1 >= v11) {
      goto LABEL_39;
    }
    if ((v5 & 0x8000000000000000) != 0) {
      goto LABEL_40;
    }
    unint64_t v13 = *(void *)(v2 + 16);
    if (v5 >= v13) {
      goto LABEL_41;
    }
    unint64_t v14 = v5 + 1;
    if (v5 + 1 >= v13) {
      goto LABEL_42;
    }
    unint64_t v15 = v9 + 2;
    unint64_t v16 = v5;
    if (v5 < v10)
    {
      uint64_t v17 = v3 + 32;
      unint64_t v16 = v5;
      if (v15 >= *(unsigned int *)(v3 + 32 + 4 * v5))
      {
        unint64_t v16 = v5 + 1;
        if (v14 < v10)
        {
          unint64_t v16 = v5 + 1;
          if (v15 >= *(unsigned int *)(v17 + 4 * v14))
          {
            unint64_t v16 = v5 + 2;
            if (v5 + 2 < v10 && v15 >= *(unsigned int *)(v17 + 4 * v16))
            {
              unint64_t v16 = v5 + 3;
              if (v5 + 3 < v10 && v15 >= *(unsigned int *)(v17 + 4 * v16))
              {
                unint64_t v18 = v5;
                while (v10 - 4 != v18)
                {
                  int64_t v19 = *(unsigned int *)(v3 + 48 + 4 * v18++);
                  if ((uint64_t)v15 < v19)
                  {
                    unint64_t v16 = v18 + 3;
                    goto LABEL_32;
                  }
                }
                unint64_t v16 = *(void *)(v3 + 16);
              }
            }
          }
        }
      }
    }
LABEL_32:
    uint64_t v38 = v3;
    uint64_t v39 = v16;
    uint64_t v22 = *(void *)(v4 + 32 + 8 * v9);
    uint64_t v23 = *(void *)(v4 + 32 + 8 * (v9 + 1));
    uint64_t v20 = v4;
    uint64_t v4 = *(void *)(v2 + 32 + 8 * v5);
    unint64_t v5 = *(void *)(v2 + 32 + 8 * v14);
    uint64_t v21 = v2;
    uint64_t v51 = v9 + 2;
    uint64_t v37 = v15 >> 8;
    uint64_t v2 = v22;
    uint64_t v3 = v23;
    goto LABEL_33;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void Region.init(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v5 = a2 + a4;
  if (v5 <= a2)
  {
    double v6 = a2;
    if (v5 >= a2) {
      goto LABEL_12;
    }
  }
  else
  {
    double v6 = v5;
    double v5 = a2;
  }
  double v7 = a3 + a5;
  if (a3 + a5 > a3)
  {
    double v8 = a3 + a5;
    double v7 = a3;
    goto LABEL_7;
  }
  double v8 = a3;
  if (v7 >= a3)
  {
LABEL_12:
    double v5 = NAN;
    double v6 = NAN;
    double v7 = NAN;
    double v8 = NAN;
    goto LABEL_13;
  }
LABEL_7:
  if (v5 >= v6 || v7 >= v8)
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  *(double *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v8;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v10;
}

uint64_t sub_184CF6988(uint64_t result, unsigned int a2)
{
  uint64_t v3 = *v2;
  int64_t v4 = *(void *)(*v2 + 16);
  int64_t v5 = v4 + result;
  if (__OFADD__(v4, result))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v7 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v3;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = *(void *)(v3 + 24) >> 1, v9 < v5))
  {
    if (v4 <= v5) {
      int64_t v10 = v5;
    }
    else {
      int64_t v10 = v4;
    }
    sub_184D01B54(isUniquelyReferenced_nonNull_native, v10, 1);
    uint64_t v3 = *v2;
    int64_t v9 = *(void *)(*v2 + 24) >> 1;
  }
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_184D0128C((uint64_t)&v25, (unsigned int *)(v3 + 4 * v11 + 32), v9 - v11, v7, a2);
  if (result < v7) {
    goto LABEL_33;
  }
  if (result < 1)
  {
LABEL_12:
    if (result == v12)
    {
      uint64_t v16 = v25;
      if (v27 != v25)
      {
        if (v27 < 0 || v27 >= v25) {
          goto LABEL_35;
        }
        uint64_t v17 = *(void *)(v3 + 16);
        int v18 = v26;
        uint64_t v19 = v27 + 1;
        while (1)
        {
          unint64_t v20 = *(void *)(v3 + 24);
          uint64_t v21 = v17 + 1;
          if (v17 + 1 > (uint64_t)(v20 >> 1)) {
            uint64_t result = (uint64_t)sub_184D01B54((char *)(v20 > 1), v17 + 1, 1);
          }
          uint64_t v3 = *v2;
          uint64_t v22 = *(void *)(*v2 + 24) >> 1;
          if (v17 < v22) {
            break;
          }
LABEL_18:
          *(void *)(v3 + 16) = v17;
        }
        *(_DWORD *)(v3 + 4 * v17 + 32) = v18;
        if (v19 != v16)
        {
          uint64_t v23 = v19 + v22 - v17;
          uint64_t v24 = v19;
          while ((v19 & 0x8000000000000000) == 0 && v24 < v16)
          {
            if (v22 - 1 == v17)
            {
              uint64_t v17 = v22;
              uint64_t v19 = v23;
              goto LABEL_18;
            }
            ++v24;
            *(_DWORD *)(v3 + 36 + 4 * v17++) = v18;
            if (v16 == v24)
            {
              uint64_t v21 = v17 + 1;
              goto LABEL_29;
            }
          }
          __break(1u);
          goto LABEL_32;
        }
LABEL_29:
        *(void *)(v3 + 16) = v21;
      }
    }
    *uint64_t v2 = v3;
    return result;
  }
  uint64_t v13 = *(void *)(v3 + 16);
  BOOL v14 = __OFADD__(v13, result);
  uint64_t v15 = v13 + result;
  if (!v14)
  {
    *(void *)(v3 + 16) = v15;
    goto LABEL_12;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

char *sub_184CF6B48(char *result, uint64_t a2)
{
  uint64_t v3 = *v2;
  int64_t v4 = *(void *)(*v2 + 16);
  int64_t v5 = v4 + a2;
  if (__OFADD__(v4, a2))
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v7 = result;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v3;
  if (!result || (int64_t v8 = *(void *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v5;
    }
    else {
      int64_t v9 = v4;
    }
    uint64_t result = sub_184D01B74(result, v9, 1);
    uint64_t v3 = *v2;
    int64_t v8 = *(void *)(*v2 + 24) >> 1;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = v8 - v10;
  if (!a2 || v8 == v10)
  {
    if (v7) {
      uint64_t v13 = &v7[8 * a2];
    }
    else {
      uint64_t v13 = 0;
    }
    if (a2 <= 0)
    {
      if (v11)
      {
LABEL_38:
        *uint64_t v2 = v3;
        return result;
      }
LABEL_24:
      if (v7 && v7 != v13)
      {
        uint64_t v17 = *(void *)(v3 + 16);
        uint64_t v20 = *(void *)v7;
        int v18 = v7 + 8;
        uint64_t v19 = v20;
        while (1)
        {
          while (1)
          {
            unint64_t v21 = *(void *)(v3 + 24);
            uint64_t v22 = v17 + 1;
            if (v17 + 1 > (uint64_t)(v21 >> 1)) {
              uint64_t result = sub_184D01B74((char *)(v21 > 1), v17 + 1, 1);
            }
            uint64_t v3 = *v2;
            uint64_t v23 = *(void *)(*v2 + 24) >> 1;
            if (v17 < v23) {
              break;
            }
            *(void *)(v3 + 16) = v17;
          }
          *(void *)(v3 + 8 * v17 + 32) = v19;
          if (v18 == v13) {
            break;
          }
          uint64_t v24 = v18;
          v18 += 8;
          while (1)
          {
            uint64_t v25 = *(void *)v24;
            v24 += 8;
            uint64_t v26 = v25;
            if (v23 - 1 == v17) {
              break;
            }
            *(void *)(v3 + 40 + 8 * v17++) = v26;
            v18 += 8;
            if (v24 == v13)
            {
              uint64_t v22 = v17 + 1;
              goto LABEL_37;
            }
          }
          uint64_t v19 = v26;
          uint64_t v17 = v23;
          *(void *)(v3 + 16) = v23;
        }
LABEL_37:
        *(void *)(v3 + 16) = v22;
      }
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (a2 >= v11) {
    uint64_t v12 = v8 - v10;
  }
  else {
    uint64_t v12 = a2;
  }
  uint64_t result = (char *)memcpy((void *)(v3 + 8 * v10 + 32), v7, 8 * v12);
  if (v11 < a2)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v13 = &v7[8 * a2];
  if (v12 < 1) {
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(v3 + 16);
  BOOL v15 = __OFADD__(v14, v12);
  uint64_t v16 = v14 + v12;
  if (!v15)
  {
    *(void *)(v3 + 16) = v16;
LABEL_17:
    v7 += 8 * v12;
    if (v12 != v11) {
      goto LABEL_38;
    }
    goto LABEL_24;
  }
LABEL_41:
  __break(1u);
  return result;
}

__n128 sub_184CF6D20@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  long long v4 = v1[1];
  long long v28 = *v1;
  long long v29 = v4;
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t v30 = v5;
  long long v7 = *v1;
  __n128 v6 = (__n128)v1[1];
  int64_t v8 = (uint64_t (*)(long long *))*((void *)&v28 + 1);
  uint64_t v31 = v28;
  int64_t v9 = *(void *)(v28 + 16);
  __n128 v23 = v6;
  long long v24 = v7;
  if (v9)
  {
    sub_184D02F2C((uint64_t)&v31);
    swift_retain();
    swift_retain();
    sub_184D02F2C((uint64_t)&v31);
    swift_retain();
    swift_retain();
    int64_t v10 = 0;
    uint64_t v11 = (unsigned char *)(v28 + 56);
    while (1)
    {
      uint64_t v12 = *((void *)v11 - 1);
      char v13 = *v11;
      long long v25 = *(_OWORD *)(v11 - 24);
      uint64_t v26 = v12;
      char v27 = v13;
      swift_retain();
      char v14 = v8(&v25);
      swift_release();
      if (v14) {
        break;
      }
      ++v10;
      v11 += 32;
      if (v9 == v10)
      {
        int64_t v10 = v9;
        break;
      }
    }
  }
  else
  {
    sub_184D02F2C((uint64_t)&v31);
    swift_retain();
    swift_retain();
    sub_184D02F2C((uint64_t)&v31);
    swift_retain();
    swift_retain();
    int64_t v10 = 0;
  }
  BOOL v15 = sub_184D00978(v10);
  char v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  sub_184D02F58((uint64_t)&v31);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)v2 + 40);
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)v2 + 56);
  *(void *)(a1 + 104) = *((void *)v2 + 9);
  __n128 result = v23;
  *(_OWORD *)a1 = v24;
  *(__n128 *)(a1 + 16) = v23;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v15;
  *(unsigned char *)(a1 + 48) = v17 & 1;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v21;
  return result;
}

double sub_184CF6EC0()
{
  double result = -8.98846567e307;
  xmmword_1E8F9E530 = xmmword_1850CCAB0;
  return result;
}

double sub_184CF6ED8()
{
  return *(double *)v0;
}

double PartialRangeFrom<>.bounded.getter(double a1)
{
  if (qword_1E8F8B560 != -1) {
    swift_once();
  }
  return a1;
}

double sub_184CF6F3C()
{
  double v1 = *v0;
  if (qword_1E8F8B560 != -1) {
    swift_once();
  }
  return v1;
}

double PartialRangeUpTo<>.bounded.getter()
{
  if (qword_1E8F8B560 != -1) {
    swift_once();
  }
  return *(double *)&xmmword_1E8F9E530;
}

double sub_184CF6FF4()
{
  if (qword_1E8F8B560 != -1) {
    swift_once();
  }
  return *(double *)&xmmword_1E8F9E530;
}

uint64_t Region.init<A, B>(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  double v13 = (*(double (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  double v15 = v14;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  if (v13 < v15 && v17 < v18)
  {
    double v20 = v17;
    double v21 = v18;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    *(double *)a7 = v13;
    *(double *)(a7 + 8) = v15;
    *(double *)(a7 + 16) = v20;
    *(double *)(a7 + 24) = v21;
    uint64_t v22 = MEMORY[0x1E4FBC860];
    *(void *)(a7 + 32) = MEMORY[0x1E4FBC860];
    *(void *)(a7 + 40) = v22;
    *(void *)(a7 + 48) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Region.init<A>(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v9 = (*(double (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (v9 >= v10)
  {
    __break(1u);
    goto LABEL_5;
  }
  double v4 = v9;
  double v5 = v10;
  if (qword_1E8F8B560 != -1) {
LABEL_5:
  }
    swift_once();
  long long v11 = xmmword_1E8F9E530;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(double *)a4 = v4;
  *(double *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = v11;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 40) = v13;
  *(void *)(a4 + 48) = v13;
  return result;
}

uint64_t Region.init<A>(x:y:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v9 = (*(double (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (v9 >= v10)
  {
    __break(1u);
    goto LABEL_5;
  }
  double v4 = v9;
  double v5 = v10;
  if (qword_1E8F8B560 != -1) {
LABEL_5:
  }
    swift_once();
  long long v11 = xmmword_1E8F9E530;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(_OWORD *)a4 = v11;
  *(double *)(a4 + 16) = v4;
  *(double *)(a4 + 24) = v5;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 40) = v13;
  *(void *)(a4 + 48) = v13;
  return result;
}

double Region.init(x:y:)@<D0>(uint64_t a1@<X8>)
{
  if (qword_1E8F8B560 != -1) {
    swift_once();
  }
  long long v3 = xmmword_1E8F9E530;
  double result = *(double *)&xmmword_1E8F9E530;
  *(_OWORD *)a1 = xmmword_1E8F9E530;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v4;
  return result;
}

void Region.init(rect:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v5 = a2 + a4;
  if (v5 <= a2)
  {
    double v6 = a2;
    if (v5 >= a2) {
      goto LABEL_12;
    }
  }
  else
  {
    double v6 = v5;
    double v5 = a2;
  }
  double v7 = a3 + a5;
  if (a3 + a5 > a3)
  {
    double v8 = a3 + a5;
    double v7 = a3;
    goto LABEL_7;
  }
  double v8 = a3;
  if (v7 >= a3)
  {
LABEL_12:
    double v5 = NAN;
    double v6 = NAN;
    double v7 = NAN;
    double v8 = NAN;
    goto LABEL_13;
  }
LABEL_7:
  if (v5 >= v6 || v7 >= v8)
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  *(double *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v8;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v10;
}

uint64_t Region.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a4);
  double v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v12);
  double v14 = (char *)&v29 - v13;
  int64x2_t v36 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v37 = v36;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  *(void *)&long long v38 = MEMORY[0x1E4FBC860];
  *((void *)&v38 + 1) = MEMORY[0x1E4FBC860];
  uint64_t v39 = MEMORY[0x1E4FBC860];
  char v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v29 = a1;
  v16(v9, a1, a2);
  sub_1850C39F8();
  swift_getAssociatedConformanceWitness();
  uint64_t result = sub_1850C3BC8();
  if (v33)
  {
LABEL_2:
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v29, a2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
    uint64_t v18 = v39;
    int64x2_t v19 = v37;
    *(int64x2_t *)a3 = v36;
    *(int64x2_t *)(a3 + 16) = v19;
    *(_OWORD *)(a3 + 32) = v38;
    *(void *)(a3 + 48) = v18;
    return result;
  }
  double v20 = *((double *)&v30 + 1);
  double v21 = *(double *)&v30;
  double v22 = v31;
  double v23 = v32;
  while (1)
  {
    double v24 = v21 + v22;
    if (v21 >= v24)
    {
      double v25 = v21;
      if (v24 >= v21) {
        goto LABEL_4;
      }
    }
    else
    {
      double v25 = v24;
      double v24 = v21;
    }
    double v26 = v20 + v23;
    if (v20 < v26) {
      break;
    }
    double v27 = v20;
    if (v26 < v20) {
      goto LABEL_12;
    }
LABEL_4:
    double v24 = NAN;
    double v25 = NAN;
    double v26 = NAN;
    double v27 = NAN;
LABEL_5:
    *(double *)&long long v30 = v24;
    *((double *)&v30 + 1) = v25;
    double v31 = v26;
    double v32 = v27;
    uint64_t v33 = v15;
    uint64_t v34 = v15;
    uint64_t v35 = v15;
    Region.formUnion(_:)(&v30);
    swift_release_n();
    uint64_t result = sub_1850C3BC8();
    double v20 = *((double *)&v30 + 1);
    double v21 = *(double *)&v30;
    double v22 = v31;
    double v23 = v32;
    if (v33) {
      goto LABEL_2;
    }
  }
  double v27 = v26;
  double v26 = v20;
LABEL_12:
  if (v24 < v25 && v26 < v27) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

__n128 Region.init<A>(rects:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a4);
  double v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
  Region.init<A>(_:)((uint64_t)v9, a2, (uint64_t)v14, v10);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  uint64_t v11 = v15;
  long long v13 = v14[1];
  __n128 result = (__n128)v14[2];
  *(_OWORD *)a3 = v14[0];
  *(_OWORD *)(a3 + 16) = v13;
  *(__n128 *)(a3 + 32) = result;
  *(void *)(a3 + 48) = v11;
  return result;
}

void Region.init(filling:rule:)(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v382 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  int64x2_t v294 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v295 = v294;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  *(void *)__n128 v296 = MEMORY[0x1E4FBC860];
  *(void *)&v296[8] = MEMORY[0x1E4FBC860];
  *(void *)&v296[16] = MEMORY[0x1E4FBC860];
  uint64_t v7 = a1;
  uint64_t v8 = sub_184D043F0(v7);
  if (v3)
  {
    swift_release_n();

    return;
  }
  uint64_t v11 = v8;
  uint64_t v274 = v7;
  unint64_t v12 = *(void *)(v8 + 16);
  uint64_t v13 = *(void *)(v9 + 16);
  uint64_t v14 = v12 * v13;
  if ((unsigned __int128)((uint64_t)v12 * (__int128)v13) >> 64 != (uint64_t)(v12 * v13) >> 63) {
    goto LABEL_430;
  }
  uint64_t v272 = 0;
  uint64_t v273 = a3;
  if (v12 >> 60) {
    goto LABEL_450;
  }
  double v282 = &v296[8];
  uint64_t v270 = v296;
  double v271 = &v296[16];
  uint64_t v275 = *(void *)(v6 + 16);
  uint64_t v15 = 4 * v12;
  unint64_t v16 = v12 >> 61;
  uint64_t v289 = v8;
  uint64_t v290 = v12 * v13;
  uint64_t v291 = v9;
  int v288 = v5;
  if (uint64_t)(8 * v12) < 1025 || (uint64_t v8 = swift_stdlib_isStackAllocationSafe(), (v8))
  {
    uint64_t v269 = v267;
    uint64_t v17 = MEMORY[0x1F4188790](v8, v10);
    uint64_t v281 = (void *)((char *)v267 - v19);
    if (v16) {
      goto LABEL_458;
    }
    if (v15 < 1025 || (uint64_t v17 = swift_stdlib_isStackAllocationSafe(), (v17 & 1) != 0))
    {
      uint64_t v268 = v267;
      uint64_t isStackAllocationSafe = MEMORY[0x1F4188790](v17, v18);
      double v277 = (char *)v267 - v22;
      if (v14 < 0) {
        goto LABEL_461;
      }
      if (!((unint64_t)(v14 + 0x1000000000000000) >> 61))
      {
        if (8 * v14 < 1025
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          v267[1] = v267;
          MEMORY[0x1F4188790](isStackAllocationSafe, v21);
          unint64_t v279 = (char *)v267 - v23;
          double v278 = *(void **)(v11 + 16);
          if (!v278)
          {
LABEL_113:
            swift_retain_n();
            uint64_t v292 = 0;
            unint64_t v52 = 0;
            goto LABEL_114;
          }
          uint64_t v276 = (void *)(v11 + 32);
          swift_bridgeObjectRetain_n();
          uint64_t v24 = v291;
          swift_bridgeObjectRetain();
          swift_retain_n();
          uint64_t v25 = v24;
          *(void *)&long long v287 = 0;
          uint64_t v292 = 0;
          *(void *)&long long v286 = 0;
          uint64_t v14 = 0;
          int v280 = (double *)(v6 + 32);
          while (1)
          {
            uint64_t v293 = v276[v14];
            sub_184CFA568(&v293, v25, v5, (uint64_t)v369);
            uint64_t v26 = v290 - v292;
            if (v290 < v292)
            {
              __break(1u);
LABEL_399:
              __break(1u);
LABEL_400:
              __break(1u);
LABEL_401:
              __break(1u);
LABEL_402:
              __break(1u);
LABEL_403:
              __break(1u);
LABEL_404:
              __break(1u);
LABEL_405:
              __break(1u);
LABEL_406:
              __break(1u);
LABEL_407:
              __break(1u);
LABEL_408:
              __break(1u);
LABEL_409:
              __break(1u);
LABEL_410:
              __break(1u);
LABEL_411:
              __break(1u);
LABEL_412:
              __break(1u);
LABEL_413:
              __break(1u);
LABEL_414:
              __break(1u);
LABEL_415:
              __break(1u);
LABEL_416:
              __break(1u);
LABEL_417:
              __break(1u);
LABEL_418:
              __break(1u);
LABEL_419:
              __break(1u);
LABEL_420:
              __break(1u);
LABEL_421:
              __break(1u);
LABEL_422:
              __break(1u);
LABEL_423:
              __break(1u);
              goto LABEL_424;
            }
            uint64_t v27 = *(void *)v369;
            uint64_t v15 = *(void *)&v369[40];
            long long v284 = *(_OWORD *)&v369[24];
            long long v285 = v371;
            long long v28 = (double *)&v279[8 * v292];
            long long v297 = *(_OWORD *)&v369[8];
            long long v298 = *(_OWORD *)&v369[24];
            uint64_t v299 = *(void *)&v369[40];
            uint64_t v300 = *(void *)&v370[0];
            long long v301 = *(_OWORD *)((char *)v370 + 8);
            long long v302 = *(_OWORD *)((char *)&v370[1] + 8);
            long long v304 = v371;
            uint64_t v303 = *((void *)&v370[2] + 1);
            uint64_t v305 = v372;
            uint64_t v283 = *(double **)&v369[8];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            unint64_t v16 = v285;
            swift_retain();
            swift_retain();
            uint64_t v6 = sub_184D01368((uint64_t)v369, v28, v26);
            long long v379 = v371;
            long long v380 = v372;
            long long v381 = v373;
            v376[0] = *(_OWORD *)&v369[32];
            v376[1] = v370[0];
            long long v377 = v370[1];
            long long v378 = v370[2];
            int64x2_t v374 = *(int64x2_t *)v369;
            int64x2_t v375 = *(int64x2_t *)&v369[16];
            sub_184D024F8((uint64_t)&v374);
            if (v6 < 0) {
              goto LABEL_399;
            }
            if ((void)v286 != v6) {
              break;
            }
            if ((void)v286)
            {
              if (*v280 != *v28) {
                break;
              }
              if ((void)v286 == 1)
              {
                *(void *)&long long v286 = 1;
              }
              else
              {
                if (v280[1] != v28[1]) {
                  break;
                }
                if ((void)v286 == 2)
                {
                  *(void *)&long long v286 = 2;
                }
                else
                {
                  if (v280[2] != v28[2]) {
                    break;
                  }
                  if ((void)v286 == 3)
                  {
                    *(void *)&long long v286 = 3;
                  }
                  else
                  {
                    if (v280[3] != v28[3]) {
                      break;
                    }
                    uint64_t v29 = 4;
                    while ((void)v286 != v29)
                    {
                      double v30 = v280[v29];
                      double v31 = v28[v29++];
                      if (v30 != v31) {
                        goto LABEL_35;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              *(void *)&long long v286 = 0;
            }
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
LABEL_40:
            ++v14;
            uint64_t v11 = v289;
            uint64_t v25 = v291;
            LOBYTE(v5) = v288;
            if ((void *)v14 == v278) {
              goto LABEL_79;
            }
            if (*(void *)(v289 + 16) <= (unint64_t)v14)
            {
              __break(1u);
              goto LABEL_43;
            }
          }
LABEL_35:
          unint64_t v32 = v292 + v6;
          if (__OFADD__(v292, v6)) {
            goto LABEL_400;
          }
          v281[(void)v287] = v27;
          if ((v32 & 0x8000000000000000) != 0) {
            goto LABEL_401;
          }
          if (HIDWORD(v32)) {
            goto LABEL_402;
          }
          uint64_t v292 = v32;
          uint64_t v33 = v287;
          *(_DWORD *)&v277[4 * v287] = v32;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          *(void *)&long long v287 = v33 + 1;
          if (__OFADD__(v33, 1)) {
            goto LABEL_403;
          }
          *(void *)&long long v286 = v6;
          int v280 = v28;
          goto LABEL_40;
        }
        unint64_t v81 = (double *)swift_slowAlloc();
        unint64_t v279 = *(char **)(v11 + 16);
        int v280 = v81;
        if (v279)
        {
          double v278 = (void *)(v11 + 32);
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          uint64_t v82 = swift_bridgeObjectRetain();
          uint64_t v292 = 0;
          uint64_t v83 = 0;
          *(void *)&long long v287 = 0;
          unint64_t v84 = 0;
          uint64_t v283 = (double *)(v6 + 32);
          while (1)
          {
            uint64_t v293 = v278[v84];
            sub_184CFA568(&v293, v82, v5, (uint64_t)v369);
            uint64_t v85 = v290 - v83;
            if (v290 < v83) {
              goto LABEL_408;
            }
            uint64_t v86 = *(void *)v369;
            long long v285 = *(_OWORD *)&v369[24];
            long long v286 = v371;
            uint64_t v87 = v83;
            __int16 v88 = &v280[v83];
            long long v306 = *(_OWORD *)&v369[8];
            long long v307 = *(_OWORD *)&v369[24];
            uint64_t v308 = *(void *)&v369[40];
            uint64_t v309 = *(void *)&v370[0];
            long long v310 = *(_OWORD *)((char *)v370 + 8);
            long long v311 = *(_OWORD *)((char *)&v370[1] + 8);
            long long v313 = v371;
            uint64_t v312 = *((void *)&v370[2] + 1);
            uint64_t v314 = v372;
            *(void *)&long long v284 = *(void *)&v369[8];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v89 = sub_184D01368((uint64_t)v369, v88, v85);
            long long v379 = v371;
            long long v380 = v372;
            long long v381 = v373;
            v376[0] = *(_OWORD *)&v369[32];
            v376[1] = v370[0];
            long long v377 = v370[1];
            long long v378 = v370[2];
            int64x2_t v374 = *(int64x2_t *)v369;
            int64x2_t v375 = *(int64x2_t *)&v369[16];
            sub_184D024F8((uint64_t)&v374);
            if (v89 < 0) {
              goto LABEL_411;
            }
            if ((void)v287 == v89)
            {
              if (!(void)v287)
              {
                *(void *)&long long v287 = 0;
                goto LABEL_140;
              }
              if (*v283 == *v88)
              {
                if ((void)v287 == 1)
                {
                  *(void *)&long long v287 = 1;
LABEL_140:
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_156;
                }
                if (v283[1] == v88[1])
                {
                  if ((void)v287 == 2)
                  {
                    *(void *)&long long v287 = 2;
                    goto LABEL_140;
                  }
                  if (v283[2] == v88[2])
                  {
                    if ((void)v287 == 3)
                    {
                      *(void *)&long long v287 = 3;
                      goto LABEL_140;
                    }
                    if (v283[3] == v88[3])
                    {
                      uint64_t v90 = 4;
                      while ((void)v287 != v90)
                      {
                        double v91 = v283[v90];
                        double v92 = v88[v90++];
                        if (v91 != v92) {
                          goto LABEL_151;
                        }
                      }
                      goto LABEL_140;
                    }
                  }
                }
              }
            }
LABEL_151:
            v83 += v89;
            if (__OFADD__(v87, v89)) {
              goto LABEL_414;
            }
            v281[v292] = v86;
            if (v83 < 0) {
              goto LABEL_417;
            }
            if (HIDWORD(v83)) {
              goto LABEL_420;
            }
            uint64_t v93 = v292;
            *(_DWORD *)&v277[4 * v292] = v83;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v292 = v93 + 1;
            if (__OFADD__(v93, 1)) {
              goto LABEL_423;
            }
            *(void *)&long long v287 = v89;
            uint64_t v283 = v88;
LABEL_156:
            LOBYTE(v5) = v288;
            ++v84;
            uint64_t v82 = v291;
            if ((char *)v84 == v279)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              unint64_t v96 = v292;
              goto LABEL_202;
            }
            if (*(void *)(v289 + 16) <= v84)
            {
              __break(1u);
LABEL_159:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              unint64_t v94 = v287;
              goto LABEL_192;
            }
          }
        }
        swift_retain_n();
        uint64_t v83 = 0;
        unint64_t v96 = 0;
LABEL_202:
        swift_release_n();
        if (v275)
        {
          sub_184CE1520(0, 0, v280, v83);
          if ((v96 & 0x8000000000000000) != 0) {
            goto LABEL_472;
          }
          sub_184CE1520(0, 0, v281, v96);
          sub_184CE1654(0, 0, v277, v96);
          uint64_t v292 = v83;
          if (!v83) {
            goto LABEL_239;
          }
        }
        else
        {
          unint64_t v138 = sub_184C9D670(v280, v83);
          swift_release();
          *(void *)&v296[16] = v138;
          if ((v96 & 0x8000000000000000) != 0) {
            goto LABEL_472;
          }
          uint64_t v139 = sub_184C9D670(v281, v96);
          swift_release();
          *(void *)__n128 v296 = v139;
          unint64_t v140 = sub_184CE1788(v277, v96);
          swift_release();
          *(void *)&v296[8] = v140;
          uint64_t v292 = v83;
          if (!v83)
          {
LABEL_239:
            MEMORY[0x18532B810](v280, -1, -1);
            goto LABEL_347;
          }
        }
        unint64_t v141 = *(void *)(*(void *)&v296[8] + 16);
        if (v141 < v96) {
          goto LABEL_481;
        }
        if (v96 != v141)
        {
          if (v96 >= v141) {
            goto LABEL_487;
          }
          uint64_t v142 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v142);
          uint64_t v143 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v143);
          uint64_t v144 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v144);
          uint64_t v145 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v145);
          uint64_t v146 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v146);
          uint64_t v147 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v147);
          uint64_t v148 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v148);
          do
          {
            if (v96 >= *(void *)(*(void *)&v296[8] + 16)) {
              goto LABEL_426;
            }
            uint64_t v149 = v292 + *(unsigned int *)(*(void *)&v296[8] + 4 * v96 + 32);
            if (v149 > 0xFFFFFFFFLL) {
              goto LABEL_429;
            }
            unint64_t v150 = v96 + 1;
            sub_184CE19DC();
            unint64_t v151 = v96;
            uint64_t v152 = *(void *)&v296[8];
            unint64_t v153 = sub_184CE1A18(v151, *(uint64_t *)&v296[8]);
            *(_DWORD *)(v152 + 4 * v151 + 32) = v149;
            CGBitmapPixelInfoGetCGPixelComponentType(v153);
            unint64_t v96 = v150;
          }
          while (v141 != v150);
        }
        goto LABEL_239;
      }
LABEL_462:
      __break(1u);
LABEL_463:
      __break(1u);
LABEL_464:
      __break(1u);
LABEL_465:
      __break(1u);
LABEL_466:
      __break(1u);
LABEL_467:
      __break(1u);
      goto LABEL_468;
    }
    uint64_t v53 = swift_slowAlloc();
    unint64_t v279 = (char *)v53;
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (!((unint64_t)(v14 + 0x1000000000000000) >> 61))
      {
        if (8 * v14 < 1025 || (uint64_t v53 = swift_stdlib_isStackAllocationSafe(), (v53 & 1) != 0))
        {
          uint64_t v276 = v267;
          MEMORY[0x1F4188790](v53, v54);
          int v280 = (double *)((char *)v267 - v55);
          double v278 = *(void **)(v11 + 16);
          if (v278)
          {
            double v277 = (char *)(v11 + 32);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_retain_n();
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            unint64_t v58 = 0;
            uint64_t v283 = (double *)(v6 + 32);
            *(void *)&long long v284 = 0;
            while (1)
            {
              uint64_t v292 = v57;
              uint64_t v293 = *(void *)&v277[8 * v58];
              sub_184CFA568(&v293, v291, v5, (uint64_t)v369);
              if (v14 < v56) {
                goto LABEL_407;
              }
              uint64_t v59 = *(void *)v369;
              long long v286 = *(_OWORD *)&v369[24];
              long long v287 = v371;
              uint64_t v60 = &v280[v56];
              long long v315 = *(_OWORD *)&v369[8];
              long long v316 = *(_OWORD *)&v369[24];
              uint64_t v317 = *(void *)&v369[40];
              uint64_t v318 = *(void *)&v370[0];
              long long v319 = *(_OWORD *)((char *)v370 + 8);
              long long v320 = *(_OWORD *)((char *)&v370[1] + 8);
              long long v322 = v371;
              uint64_t v321 = *((void *)&v370[2] + 1);
              uint64_t v323 = v372;
              *(void *)&long long v285 = *(void *)&v369[8];
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              uint64_t v61 = sub_184D01368((uint64_t)v369, v60, v14 - v56);
              long long v379 = v371;
              long long v380 = v372;
              long long v381 = v373;
              v376[0] = *(_OWORD *)&v369[32];
              v376[1] = v370[0];
              long long v377 = v370[1];
              long long v378 = v370[2];
              int64x2_t v374 = *(int64x2_t *)v369;
              int64x2_t v375 = *(int64x2_t *)&v369[16];
              sub_184D024F8((uint64_t)&v374);
              if (v61 < 0) {
                goto LABEL_410;
              }
              uint64_t v62 = v284;
              if (v292 == v61)
              {
                if (!v292)
                {
                  uint64_t v292 = 0;
                  goto LABEL_94;
                }
                if (*v283 == *v60)
                {
                  if (v292 == 1)
                  {
                    uint64_t v292 = 1;
LABEL_94:
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_bridgeObjectRelease();
                    uint64_t v63 = v289;
                    uint64_t v57 = v292;
                    goto LABEL_110;
                  }
                  if (v283[1] == v60[1])
                  {
                    if (v292 == 2)
                    {
                      uint64_t v292 = 2;
                      goto LABEL_94;
                    }
                    if (v283[2] == v60[2])
                    {
                      if (v292 == 3)
                      {
                        uint64_t v292 = 3;
                        goto LABEL_94;
                      }
                      if (v283[3] == v60[3])
                      {
                        uint64_t v64 = 4;
                        while (v292 != v64)
                        {
                          double v65 = v283[v64];
                          double v66 = v60[v64++];
                          if (v65 != v66) {
                            goto LABEL_105;
                          }
                        }
                        goto LABEL_94;
                      }
                    }
                  }
                }
              }
LABEL_105:
              BOOL v67 = __OFADD__(v56, v61);
              v56 += v61;
              if (v67) {
                goto LABEL_413;
              }
              v281[(void)v284] = v59;
              if (v56 < 0) {
                goto LABEL_416;
              }
              if (HIDWORD(v56)) {
                goto LABEL_419;
              }
              *(_DWORD *)&v279[4 * v62] = v56;
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              BOOL v67 = __OFADD__(v62, 1);
              uint64_t v68 = v62 + 1;
              if (v67) {
                goto LABEL_422;
              }
              uint64_t v283 = v60;
              *(void *)&long long v284 = v68;
              uint64_t v57 = v61;
              uint64_t v63 = v289;
LABEL_110:
              ++v58;
              LOBYTE(v5) = v288;
              uint64_t v14 = v290;
              if ((void *)v58 == v278)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                unint64_t v95 = v284;
                goto LABEL_197;
              }
              if (*(void *)(v63 + 16) <= v58)
              {
                __break(1u);
                goto LABEL_113;
              }
            }
          }
          swift_retain_n();
          uint64_t v56 = 0;
          unint64_t v95 = 0;
LABEL_197:
          swift_release_n();
          if (v275)
          {
            sub_184CE1520(0, 0, v280, v56);
            if ((v95 & 0x8000000000000000) != 0) {
              goto LABEL_471;
            }
            sub_184CE1520(0, 0, v281, v95);
            sub_184CE1654(0, 0, v279, v95);
            uint64_t v292 = v56;
            if (!v56) {
              goto LABEL_346;
            }
          }
          else
          {
            uint64_t v125 = sub_184C9D670(v280, v56);
            swift_release();
            *(void *)&v296[16] = v125;
            if ((v95 & 0x8000000000000000) != 0) {
              goto LABEL_471;
            }
            uint64_t v126 = sub_184C9D670(v281, v95);
            swift_release();
            *(void *)__n128 v296 = v126;
            int64_t v127 = sub_184CE1788(v279, v95);
            swift_release();
            *(void *)&v296[8] = v127;
            uint64_t v292 = v56;
            if (!v56)
            {
LABEL_346:
              MEMORY[0x18532B810](v279, -1, -1);
              goto LABEL_347;
            }
          }
          uint64_t v128 = *(void *)&v296[8];
          unint64_t v129 = *(void *)(*(void *)&v296[8] + 16);
          if (v129 < v95) {
            goto LABEL_480;
          }
          if (v95 != v129)
          {
            if (v95 >= v129) {
              goto LABEL_486;
            }
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_184D01D8C(v128);
              uint64_t v128 = isUniquelyReferenced_nonNull_native;
            }
            *(void *)&v296[8] = v128;
            CGBitmapPixelInfoGetCGPixelComponentType(isUniquelyReferenced_nonNull_native);
            uint64_t v131 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v131);
            uint64_t v132 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v132);
            uint64_t v133 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v133);
            uint64_t v134 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v134);
            do
            {
              if (v95 >= *(void *)(*(void *)&v296[8] + 16)) {
                goto LABEL_425;
              }
              uint64_t v135 = v292 + *(unsigned int *)(*(void *)&v296[8] + 4 * v95 + 32);
              if (v135 > 0xFFFFFFFFLL) {
                goto LABEL_428;
              }
              sub_184CE19DC();
              uint64_t v136 = *(void *)&v296[8];
              unint64_t v137 = sub_184CE1A18(v95, *(uint64_t *)&v296[8]);
              *(_DWORD *)(v136 + 4 * v95 + 32) = v135;
              CGBitmapPixelInfoGetCGPixelComponentType(v137);
              ++v95;
            }
            while (v129 != v95);
          }
          goto LABEL_346;
        }
LABEL_269:
        int v280 = (double *)swift_slowAlloc();
        double v278 = *(void **)(v11 + 16);
        if (!v278)
        {
          swift_retain_n();
          uint64_t v166 = 0;
          unint64_t v179 = 0;
LABEL_310:
          swift_release_n();
          if (v275)
          {
            sub_184CE1520(0, 0, v280, v166);
            if ((v179 & 0x8000000000000000) != 0) {
              goto LABEL_484;
            }
            sub_184CE1520(0, 0, v281, v179);
            sub_184CE1654(0, 0, v279, v179);
          }
          else
          {
            uint64_t v210 = sub_184C9D670(v280, v166);
            swift_release();
            *(void *)&v296[16] = v210;
            if ((v179 & 0x8000000000000000) != 0) {
              goto LABEL_484;
            }
            int64_t v211 = sub_184C9D670(v281, v179);
            swift_release();
            *(void *)__n128 v296 = v211;
            int64_t v212 = sub_184CE1788(v279, v179);
            swift_release();
            *(void *)&v296[8] = v212;
          }
          uint64_t v292 = v166;
          if (v166)
          {
            unint64_t v213 = *(void *)(*(void *)&v296[8] + 16);
            if (v213 < v179) {
              goto LABEL_492;
            }
            if (v179 != v213)
            {
              if (v179 < v213)
              {
                uint64_t v214 = sub_184CE19DC();
                CGBitmapPixelInfoGetCGPixelComponentType(v214);
                uint64_t v215 = sub_184CE19DC();
                CGBitmapPixelInfoGetCGPixelComponentType(v215);
                uint64_t v216 = sub_184CE19DC();
                CGBitmapPixelInfoGetCGPixelComponentType(v216);
                uint64_t v217 = sub_184CE19DC();
                CGBitmapPixelInfoGetCGPixelComponentType(v217);
                uint64_t v218 = sub_184CE19DC();
                CGBitmapPixelInfoGetCGPixelComponentType(v218);
                uint64_t v219 = sub_184CE19DC();
                CGBitmapPixelInfoGetCGPixelComponentType(v219);
                uint64_t v220 = sub_184CE19DC();
                CGBitmapPixelInfoGetCGPixelComponentType(v220);
                while (v179 < *(void *)(*(void *)&v296[8] + 16))
                {
                  uint64_t v221 = v292 + *(unsigned int *)(*(void *)&v296[8] + 4 * v179 + 32);
                  if (v221 > 0xFFFFFFFFLL) {
                    goto LABEL_456;
                  }
                  unint64_t v222 = v179 + 1;
                  sub_184CE19DC();
                  unint64_t v223 = v179;
                  uint64_t v224 = *(void *)&v296[8];
                  unint64_t v225 = sub_184CE1A18(v223, *(uint64_t *)&v296[8]);
                  *(_DWORD *)(v224 + 4 * v223 + 32) = v221;
                  CGBitmapPixelInfoGetCGPixelComponentType(v225);
                  unint64_t v179 = v222;
                  if (v213 == v222) {
                    goto LABEL_345;
                  }
                }
                goto LABEL_453;
              }
              goto LABEL_496;
            }
          }
LABEL_345:
          MEMORY[0x18532B810](v280, -1, -1);
          goto LABEL_346;
        }
        double v277 = (char *)(v11 + 32);
        swift_bridgeObjectRetain_n();
        uint64_t v164 = v291;
        swift_bridgeObjectRetain();
        swift_retain_n();
        uint64_t v165 = v164;
        uint64_t v292 = 0;
        uint64_t v166 = 0;
        *(void *)&long long v287 = 0;
        unint64_t v167 = 0;
        uint64_t v283 = (double *)(v6 + 32);
        while (1)
        {
          uint64_t v293 = *(void *)&v277[8 * v167];
          sub_184CFA568(&v293, v165, v5, (uint64_t)v369);
          uint64_t v168 = v290 - v166;
          if (v290 < v166) {
            goto LABEL_433;
          }
          uint64_t v169 = *(void *)v369;
          long long v285 = *(_OWORD *)&v369[24];
          long long v286 = v371;
          uint64_t v170 = v166;
          uint64_t v171 = &v280[v166];
          long long v324 = *(_OWORD *)&v369[8];
          long long v325 = *(_OWORD *)&v369[24];
          uint64_t v326 = *(void *)&v369[40];
          uint64_t v327 = *(void *)&v370[0];
          long long v328 = *(_OWORD *)((char *)v370 + 8);
          long long v329 = *(_OWORD *)((char *)&v370[1] + 8);
          long long v331 = v371;
          uint64_t v330 = *((void *)&v370[2] + 1);
          uint64_t v332 = v372;
          *(void *)&long long v284 = *(void *)&v369[8];
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v172 = sub_184D01368((uint64_t)v369, v171, v168);
          long long v379 = v371;
          long long v380 = v372;
          long long v381 = v373;
          v376[0] = *(_OWORD *)&v369[32];
          v376[1] = v370[0];
          long long v377 = v370[1];
          long long v378 = v370[2];
          int64x2_t v374 = *(int64x2_t *)v369;
          int64x2_t v375 = *(int64x2_t *)&v369[16];
          sub_184D024F8((uint64_t)&v374);
          if (v172 < 0) {
            goto LABEL_436;
          }
          if ((void)v287 == v172)
          {
            if (!(void)v287)
            {
              *(void *)&long long v287 = 0;
              goto LABEL_279;
            }
            if (*v283 == *v171)
            {
              if ((void)v287 == 1)
              {
                *(void *)&long long v287 = 1;
LABEL_279:
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_295;
              }
              if (v283[1] == v171[1])
              {
                if ((void)v287 == 2)
                {
                  *(void *)&long long v287 = 2;
                  goto LABEL_279;
                }
                if (v283[2] == v171[2])
                {
                  if ((void)v287 == 3)
                  {
                    *(void *)&long long v287 = 3;
                    goto LABEL_279;
                  }
                  if (v283[3] == v171[3])
                  {
                    uint64_t v173 = 4;
                    while ((void)v287 != v173)
                    {
                      double v174 = v283[v173];
                      double v175 = v171[v173++];
                      if (v174 != v175) {
                        goto LABEL_290;
                      }
                    }
                    goto LABEL_279;
                  }
                }
              }
            }
          }
LABEL_290:
          v166 += v172;
          if (__OFADD__(v170, v172)) {
            goto LABEL_440;
          }
          v281[v292] = v169;
          if (v166 < 0) {
            goto LABEL_443;
          }
          if (HIDWORD(v166)) {
            goto LABEL_446;
          }
          uint64_t v176 = v292;
          *(_DWORD *)&v279[4 * v292] = v166;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v292 = v176 + 1;
          if (__OFADD__(v176, 1)) {
            goto LABEL_449;
          }
          *(void *)&long long v287 = v172;
          uint64_t v283 = v171;
LABEL_295:
          uint64_t v165 = v291;
          LOBYTE(v5) = v288;
          if ((void *)++v167 == v278)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            unint64_t v179 = v292;
            goto LABEL_310;
          }
          if (*(void *)(v289 + 16) <= v167)
          {
            __break(1u);
LABEL_298:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            unint64_t v177 = v287;
LABEL_302:
            swift_release_n();
            if (v275)
            {
              sub_184CE1520(0, 0, v280, v292);
              if ((v177 & 0x8000000000000000) == 0)
              {
                sub_184CE1520(0, 0, v281, v177);
                sub_184CE1654(0, 0, v279, v177);
                goto LABEL_315;
              }
LABEL_482:
              __break(1u);
LABEL_483:
              __break(1u);
LABEL_484:
              __break(1u);
LABEL_485:
              __break(1u);
LABEL_486:
              __break(1u);
LABEL_487:
              __break(1u);
LABEL_488:
              __break(1u);
              goto LABEL_489;
            }
            uint64_t v180 = sub_184C9D670(v280, v292);
            swift_release();
            *(void *)&v296[16] = v180;
            if ((v177 & 0x8000000000000000) != 0) {
              goto LABEL_482;
            }
            __n128 v181 = sub_184C9D670(v281, v177);
            swift_release();
            *(void *)__n128 v296 = v181;
            long long v182 = sub_184CE1788(v279, v177);
            swift_release();
            *(void *)&v296[8] = v182;
LABEL_315:
            if (!v292) {
              goto LABEL_389;
            }
            unint64_t v183 = *(void *)(*(void *)&v296[8] + 16);
            if (v183 >= v177)
            {
              if (v177 != v183)
              {
                if (v177 < v183)
                {
                  uint64_t v184 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v184);
                  uint64_t v185 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v185);
                  uint64_t v186 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v186);
                  uint64_t v187 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v187);
                  uint64_t v188 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v188);
                  uint64_t v189 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v189);
                  uint64_t v190 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v190);
                  uint64_t v191 = v292;
                  while (v177 < *(void *)(*(void *)&v296[8] + 16))
                  {
                    uint64_t v192 = v191 + *(unsigned int *)(*(void *)&v296[8] + 4 * v177 + 32);
                    if (v192 > 0xFFFFFFFFLL) {
                      goto LABEL_454;
                    }
                    sub_184CE19DC();
                    uint64_t v193 = *(void *)&v296[8];
                    unint64_t v194 = sub_184CE1A18(v177, *(uint64_t *)&v296[8]);
                    *(_DWORD *)(v193 + 4 * v177 + 32) = v192;
                    CGBitmapPixelInfoGetCGPixelComponentType(v194);
                    ++v177;
                    uint64_t v191 = v292;
                    if (v183 == v177) {
                      goto LABEL_389;
                    }
                  }
LABEL_451:
                  __break(1u);
LABEL_452:
                  __break(1u);
LABEL_453:
                  __break(1u);
LABEL_454:
                  __break(1u);
LABEL_455:
                  __break(1u);
LABEL_456:
                  __break(1u);
LABEL_457:
                  __break(1u);
LABEL_458:
                  __break(1u);
LABEL_459:
                  __break(1u);
                  goto LABEL_460;
                }
LABEL_494:
                __break(1u);
LABEL_495:
                __break(1u);
LABEL_496:
                __break(1u);
LABEL_497:
                __break(1u);
              }
LABEL_389:
              MEMORY[0x18532B810](v279, -1, -1);
LABEL_390:
              uint64_t v226 = v273;
              MEMORY[0x18532B810](v281, -1, -1);
              goto LABEL_391;
            }
LABEL_490:
            __break(1u);
LABEL_491:
            __break(1u);
LABEL_492:
            __break(1u);
LABEL_493:
            __break(1u);
            goto LABEL_494;
          }
        }
      }
LABEL_478:
      __break(1u);
      goto LABEL_479;
    }
LABEL_477:
    __break(1u);
    goto LABEL_478;
  }
LABEL_43:
  uint64_t v34 = swift_slowAlloc();
  uint64_t v281 = (void *)v34;
  if (v16) {
    goto LABEL_473;
  }
  if (v15 >= 1025)
  {
    uint64_t v34 = swift_stdlib_isStackAllocationSafe();
    if ((v34 & 1) == 0)
    {
      uint64_t v97 = swift_slowAlloc();
      unint64_t v279 = (char *)v97;
      if (v14 < 0) {
        goto LABEL_488;
      }
      if ((unint64_t)(v14 + 0x1000000000000000) >> 61)
      {
LABEL_489:
        __break(1u);
        goto LABEL_490;
      }
      if (8 * v14 < 1025 || (uint64_t v97 = swift_stdlib_isStackAllocationSafe(), (v97 & 1) != 0))
      {
        uint64_t v276 = v267;
        MEMORY[0x1F4188790](v97, v98);
        int v280 = (double *)((char *)v267 - v99);
        double v278 = *(void **)(v11 + 16);
        if (!v278)
        {
          swift_retain_n();
          uint64_t v292 = 0;
          unint64_t v177 = 0;
          goto LABEL_302;
        }
        double v277 = (char *)(v11 + 32);
        swift_bridgeObjectRetain_n();
        uint64_t v100 = v291;
        swift_bridgeObjectRetain();
        swift_retain_n();
        uint64_t v101 = v100;
        *(void *)&long long v287 = 0;
        uint64_t v292 = 0;
        uint64_t v102 = 0;
        unint64_t v103 = 0;
        uint64_t v283 = (double *)(v6 + 32);
        while (1)
        {
          uint64_t v293 = *(void *)&v277[8 * v103];
          sub_184CFA568(&v293, v101, v5, (uint64_t)v369);
          uint64_t v104 = v14 - v292;
          if (v14 < v292) {
            goto LABEL_431;
          }
          uint64_t v105 = *(void *)v369;
          long long v285 = *(_OWORD *)&v369[24];
          long long v286 = v371;
          uint64_t v106 = &v280[v292];
          long long v351 = *(_OWORD *)&v369[8];
          long long v352 = *(_OWORD *)&v369[24];
          uint64_t v353 = *(void *)&v369[40];
          uint64_t v354 = *(void *)&v370[0];
          long long v355 = *(_OWORD *)((char *)v370 + 8);
          long long v356 = *(_OWORD *)((char *)&v370[1] + 8);
          long long v358 = v371;
          uint64_t v357 = *((void *)&v370[2] + 1);
          uint64_t v359 = v372;
          *(void *)&long long v284 = *(void *)&v369[8];
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v107 = sub_184D01368((uint64_t)v369, v106, v104);
          long long v379 = v371;
          long long v380 = v372;
          long long v381 = v373;
          v376[0] = *(_OWORD *)&v369[32];
          v376[1] = v370[0];
          long long v377 = v370[1];
          long long v378 = v370[2];
          int64x2_t v374 = *(int64x2_t *)v369;
          int64x2_t v375 = *(int64x2_t *)&v369[16];
          sub_184D024F8((uint64_t)&v374);
          if (v107 < 0) {
            goto LABEL_434;
          }
          if (v102 != v107) {
            break;
          }
          if (v102)
          {
            if (*v283 != *v106) {
              break;
            }
            if (v102 != 1)
            {
              if (v283[1] != v106[1]) {
                break;
              }
              if (v102 != 2)
              {
                if (v283[2] != v106[2]) {
                  break;
                }
                if (v102 != 3)
                {
                  if (v283[3] != v106[3]) {
                    break;
                  }
                  uint64_t v108 = 4;
                  while (v102 != v108)
                  {
                    double v109 = v283[v108];
                    double v110 = v106[v108++];
                    if (v109 != v110) {
                      goto LABEL_183;
                    }
                  }
                }
              }
            }
          }
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
LABEL_188:
          uint64_t v14 = v290;
          uint64_t v101 = v291;
          LOBYTE(v5) = v288;
          if ((void *)++v103 == v278) {
            goto LABEL_298;
          }
          if (*(void *)(v289 + 16) <= v103)
          {
            __break(1u);
LABEL_191:
            swift_retain_n();
            uint64_t v292 = 0;
            unint64_t v94 = 0;
LABEL_192:
            swift_release_n();
            if (v275)
            {
              sub_184CE1520(0, 0, v279, v292);
              if ((v94 & 0x8000000000000000) == 0)
              {
                sub_184CE1520(0, 0, v281, v94);
                sub_184CE1654(0, 0, v277, v94);
                if (!v292) {
                  goto LABEL_390;
                }
LABEL_208:
                uint64_t v116 = *(char **)&v296[8];
                unint64_t v117 = *(void *)(*(void *)&v296[8] + 16);
                if (v117 >= v94)
                {
                  if (v94 == v117) {
                    goto LABEL_390;
                  }
                  if (v94 >= v117) {
                    goto LABEL_485;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v116 = sub_184D01D8C((uint64_t)v116);
                  }
                  *(void *)&v296[8] = v116;
                  uint64_t v118 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v118);
                  uint64_t v119 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v119);
                  uint64_t v120 = sub_184CE19DC();
                  CGBitmapPixelInfoGetCGPixelComponentType(v120);
                  uint64_t v121 = v292;
                  while (v94 < *(void *)(*(void *)&v296[8] + 16))
                  {
                    uint64_t v122 = v121 + *(unsigned int *)(*(void *)&v296[8] + 4 * v94 + 32);
                    if (v122 > 0xFFFFFFFFLL) {
                      goto LABEL_427;
                    }
                    sub_184CE19DC();
                    uint64_t v123 = *(void *)&v296[8];
                    unint64_t v124 = sub_184CE1A18(v94, *(uint64_t *)&v296[8]);
                    *(_DWORD *)(v123 + 4 * v94 + 32) = v122;
                    CGBitmapPixelInfoGetCGPixelComponentType(v124);
                    uint64_t v121 = v292;
                    if (v117 == ++v94) {
                      goto LABEL_390;
                    }
                  }
LABEL_424:
                  __break(1u);
LABEL_425:
                  __break(1u);
LABEL_426:
                  __break(1u);
LABEL_427:
                  __break(1u);
LABEL_428:
                  __break(1u);
LABEL_429:
                  __break(1u);
LABEL_430:
                  __break(1u);
LABEL_431:
                  __break(1u);
LABEL_432:
                  __break(1u);
LABEL_433:
                  __break(1u);
LABEL_434:
                  __break(1u);
LABEL_435:
                  __break(1u);
LABEL_436:
                  __break(1u);
LABEL_437:
                  __break(1u);
LABEL_438:
                  __break(1u);
LABEL_439:
                  __break(1u);
LABEL_440:
                  __break(1u);
LABEL_441:
                  __break(1u);
LABEL_442:
                  __break(1u);
LABEL_443:
                  __break(1u);
LABEL_444:
                  __break(1u);
LABEL_445:
                  __break(1u);
LABEL_446:
                  __break(1u);
LABEL_447:
                  __break(1u);
LABEL_448:
                  __break(1u);
LABEL_449:
                  __break(1u);
LABEL_450:
                  __break(1u);
                  goto LABEL_451;
                }
LABEL_479:
                __break(1u);
LABEL_480:
                __break(1u);
LABEL_481:
                __break(1u);
                goto LABEL_482;
              }
            }
            else
            {
              long long v113 = sub_184C9D670(v279, v292);
              swift_release();
              *(void *)&v296[16] = v113;
              if ((v94 & 0x8000000000000000) == 0)
              {
                uint64_t v114 = sub_184C9D670(v281, v94);
                swift_release();
                *(void *)__n128 v296 = v114;
                uint64_t v115 = sub_184CE1788(v277, v94);
                swift_release();
                *(void *)&v296[8] = v115;
                if (!v292) {
                  goto LABEL_390;
                }
                goto LABEL_208;
              }
            }
LABEL_470:
            __break(1u);
LABEL_471:
            __break(1u);
LABEL_472:
            __break(1u);
LABEL_473:
            __break(1u);
            goto LABEL_474;
          }
        }
LABEL_183:
        unint64_t v111 = v292 + v107;
        if (__OFADD__(v292, v107)) {
          goto LABEL_438;
        }
        v281[(void)v287] = v105;
        if ((v111 & 0x8000000000000000) != 0) {
          goto LABEL_441;
        }
        if (HIDWORD(v111)) {
          goto LABEL_444;
        }
        uint64_t v292 = v111;
        uint64_t v112 = v287;
        *(_DWORD *)&v279[4 * v287] = v111;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        *(void *)&long long v287 = v112 + 1;
        if (__OFADD__(v112, 1)) {
          goto LABEL_447;
        }
        uint64_t v102 = v107;
        uint64_t v283 = v106;
        goto LABEL_188;
      }
      int64_t v227 = (void *)swift_slowAlloc();
      double v277 = *(char **)(v11 + 16);
      double v278 = v227;
      if (!v277)
      {
        swift_retain_n();
        uint64_t v292 = 0;
        unint64_t v241 = 0;
        goto LABEL_375;
      }
      uint64_t v276 = (void *)(v11 + 32);
      swift_bridgeObjectRetain_n();
      uint64_t v228 = v291;
      swift_bridgeObjectRetain();
      swift_retain_n();
      uint64_t v229 = v228;
      *(void *)&long long v287 = 0;
      uint64_t v292 = 0;
      uint64_t v230 = 0;
      unint64_t v231 = 0;
      int v280 = (double *)(v6 + 32);
      while (1)
      {
        *(void *)&long long v284 = v231;
        uint64_t v293 = v276[v231];
        sub_184CFA568(&v293, v229, v5, (uint64_t)v369);
        uint64_t v232 = v14 - v292;
        if (v14 < v292) {
          goto LABEL_459;
        }
        uint64_t v233 = *(void *)v369;
        long long v285 = *(_OWORD *)&v369[24];
        long long v286 = v371;
        uint64_t v234 = (double *)&v278[v292];
        long long v360 = *(_OWORD *)&v369[8];
        long long v361 = *(_OWORD *)&v369[24];
        uint64_t v362 = *(void *)&v369[40];
        uint64_t v363 = *(void *)&v370[0];
        long long v364 = *(_OWORD *)((char *)v370 + 8);
        long long v365 = *(_OWORD *)((char *)&v370[1] + 8);
        long long v367 = v371;
        uint64_t v366 = *((void *)&v370[2] + 1);
        uint64_t v368 = v372;
        uint64_t v283 = *(double **)&v369[8];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v235 = sub_184D01368((uint64_t)v369, v234, v232);
        long long v379 = v371;
        long long v380 = v372;
        long long v381 = v373;
        v376[0] = *(_OWORD *)&v369[32];
        v376[1] = v370[0];
        long long v377 = v370[1];
        long long v378 = v370[2];
        int64x2_t v374 = *(int64x2_t *)v369;
        int64x2_t v375 = *(int64x2_t *)&v369[16];
        sub_184D024F8((uint64_t)&v374);
        if (v235 < 0)
        {
LABEL_460:
          __break(1u);
LABEL_461:
          __break(1u);
          goto LABEL_462;
        }
        if (v230 != v235) {
          break;
        }
        if (v230)
        {
          if (*v280 != *v234) {
            break;
          }
          if (v230 != 1)
          {
            if (v280[1] != v234[1]) {
              break;
            }
            if (v230 != 2)
            {
              if (v280[2] != v234[2]) {
                break;
              }
              if (v230 != 3)
              {
                if (v280[3] != v234[3]) {
                  break;
                }
                uint64_t v236 = 4;
                while (v230 != v236)
                {
                  double v237 = v280[v236];
                  double v238 = v234[v236++];
                  if (v237 != v238) {
                    goto LABEL_365;
                  }
                }
              }
            }
          }
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_370:
        uint64_t v14 = v290;
        uint64_t v229 = v291;
        LOBYTE(v5) = v288;
        unint64_t v231 = v284 + 1;
        if ((char *)(v284 + 1) == v277) {
          goto LABEL_373;
        }
        if (*(void *)(v289 + 16) <= v231)
        {
          __break(1u);
LABEL_373:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          unint64_t v241 = v287;
LABEL_375:
          swift_release_n();
          if (v275)
          {
            sub_184CE1520(0, 0, v278, v292);
            if ((v241 & 0x8000000000000000) != 0) {
              goto LABEL_493;
            }
            sub_184CE1520(0, 0, v281, v241);
            sub_184CE1654(0, 0, v279, v241);
          }
          else
          {
            uint64_t v242 = sub_184C9D670(v278, v292);
            swift_release();
            *(void *)&v296[16] = v242;
            if ((v241 & 0x8000000000000000) != 0) {
              goto LABEL_493;
            }
            uint64_t v243 = sub_184C9D670(v281, v241);
            swift_release();
            *(void *)__n128 v296 = v243;
            uint64_t v244 = sub_184CE1788(v279, v241);
            swift_release();
            *(void *)&v296[8] = v244;
          }
          if (!v292) {
            goto LABEL_388;
          }
          unint64_t v245 = *(void *)(*(void *)&v296[8] + 16);
          if (v245 < v241) {
            goto LABEL_497;
          }
          if (v241 == v245)
          {
LABEL_388:
            MEMORY[0x18532B810](v278, -1, -1);
            goto LABEL_389;
          }
          if (v241 >= v245)
          {
            __break(1u);
            goto LABEL_499;
          }
          uint64_t v246 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v246);
          uint64_t v247 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v247);
          uint64_t v248 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v248);
          uint64_t v249 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v249);
          uint64_t v250 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v250);
          uint64_t v251 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v251);
          uint64_t v252 = sub_184CE19DC();
          CGBitmapPixelInfoGetCGPixelComponentType(v252);
          uint64_t v253 = v292;
          while (v241 < *(void *)(*(void *)&v296[8] + 16))
          {
            uint64_t v254 = v253 + *(unsigned int *)(*(void *)&v296[8] + 4 * v241 + 32);
            if (v254 > 0xFFFFFFFFLL) {
              goto LABEL_469;
            }
            sub_184CE19DC();
            uint64_t v255 = *(void *)&v296[8];
            unint64_t v256 = sub_184CE1A18(v241, *(uint64_t *)&v296[8]);
            *(_DWORD *)(v255 + 4 * v241 + 32) = v254;
            CGBitmapPixelInfoGetCGPixelComponentType(v256);
            ++v241;
            uint64_t v253 = v292;
            if (v245 == v241) {
              goto LABEL_388;
            }
          }
LABEL_468:
          __break(1u);
LABEL_469:
          __break(1u);
          goto LABEL_470;
        }
      }
LABEL_365:
      unint64_t v239 = v292 + v235;
      if (__OFADD__(v292, v235)) {
        goto LABEL_464;
      }
      v281[(void)v287] = v233;
      if ((v239 & 0x8000000000000000) != 0) {
        goto LABEL_465;
      }
      if (HIDWORD(v239)) {
        goto LABEL_466;
      }
      uint64_t v292 = v239;
      uint64_t v240 = v287;
      *(_DWORD *)&v279[4 * v287] = v239;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      *(void *)&long long v287 = v240 + 1;
      if (__OFADD__(v240, 1)) {
        goto LABEL_467;
      }
      uint64_t v230 = v235;
      int v280 = v234;
      goto LABEL_370;
    }
  }
  uint64_t v269 = v267;
  uint64_t v36 = MEMORY[0x1F4188790](v34, v35);
  double v277 = (char *)v267 - v38;
  if (v14 < 0) {
    goto LABEL_475;
  }
  if ((unint64_t)(v14 + 0x1000000000000000) >> 61)
  {
LABEL_476:
    __break(1u);
    goto LABEL_477;
  }
  if (8 * v14 >= 1025)
  {
    uint64_t v36 = swift_stdlib_isStackAllocationSafe();
    if ((v36 & 1) == 0)
    {
      uint64_t v154 = (char *)swift_slowAlloc();
      double v278 = *(void **)(v11 + 16);
      unint64_t v279 = v154;
      if (!v278)
      {
        swift_retain_n();
        uint64_t v292 = 0;
        unint64_t v178 = 0;
LABEL_306:
        swift_release_n();
        if (v275)
        {
          sub_184CE1520(0, 0, v279, v292);
          if ((v178 & 0x8000000000000000) != 0) {
            goto LABEL_483;
          }
          sub_184CE1520(0, 0, v281, v178);
          sub_184CE1654(0, 0, v277, v178);
        }
        else
        {
          uint64_t v195 = sub_184C9D670(v279, v292);
          swift_release();
          *(void *)&v296[16] = v195;
          if ((v178 & 0x8000000000000000) != 0) {
            goto LABEL_483;
          }
          int64_t v196 = sub_184C9D670(v281, v178);
          swift_release();
          *(void *)__n128 v296 = v196;
          unint64_t v197 = sub_184CE1788(v277, v178);
          swift_release();
          *(void *)&v296[8] = v197;
        }
        if (!v292) {
          goto LABEL_389;
        }
        unint64_t v198 = *(void *)(*(void *)&v296[8] + 16);
        if (v198 >= v178)
        {
          if (v178 != v198)
          {
            if (v178 >= v198) {
              goto LABEL_495;
            }
            uint64_t v199 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v199);
            uint64_t v200 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v200);
            uint64_t v201 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v201);
            uint64_t v202 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v202);
            uint64_t v203 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v203);
            uint64_t v204 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v204);
            uint64_t v205 = sub_184CE19DC();
            CGBitmapPixelInfoGetCGPixelComponentType(v205);
            uint64_t v206 = v292;
            do
            {
              if (v178 >= *(void *)(*(void *)&v296[8] + 16)) {
                goto LABEL_452;
              }
              uint64_t v207 = v206 + *(unsigned int *)(*(void *)&v296[8] + 4 * v178 + 32);
              if (v207 > 0xFFFFFFFFLL) {
                goto LABEL_455;
              }
              sub_184CE19DC();
              uint64_t v208 = *(void *)&v296[8];
              unint64_t v209 = sub_184CE1A18(v178, *(uint64_t *)&v296[8]);
              *(_DWORD *)(v208 + 4 * v178 + 32) = v207;
              CGBitmapPixelInfoGetCGPixelComponentType(v209);
              ++v178;
              uint64_t v206 = v292;
            }
            while (v198 != v178);
          }
          goto LABEL_389;
        }
        goto LABEL_491;
      }
      uint64_t v276 = (void *)(v11 + 32);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_retain_n();
      *(void *)&long long v287 = 0;
      uint64_t v292 = 0;
      *(void *)&long long v286 = 0;
      unint64_t v155 = 0;
      int v280 = (double *)(v6 + 32);
      while (1)
      {
        uint64_t v293 = v276[v155];
        sub_184CFA568(&v293, v291, v5, (uint64_t)v369);
        uint64_t v156 = v14 - v292;
        if (v14 < v292) {
          goto LABEL_432;
        }
        uint64_t v157 = *(void *)v369;
        long long v284 = *(_OWORD *)&v369[24];
        long long v285 = v371;
        uint64_t v158 = (double *)&v279[8 * v292];
        long long v342 = *(_OWORD *)&v369[8];
        long long v343 = *(_OWORD *)&v369[24];
        uint64_t v344 = *(void *)&v369[40];
        uint64_t v345 = *(void *)&v370[0];
        long long v346 = *(_OWORD *)((char *)v370 + 8);
        long long v347 = *(_OWORD *)((char *)&v370[1] + 8);
        long long v349 = v371;
        uint64_t v348 = *((void *)&v370[2] + 1);
        uint64_t v350 = v372;
        uint64_t v283 = *(double **)&v369[8];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v6 = sub_184D01368((uint64_t)v369, v158, v156);
        long long v379 = v371;
        long long v380 = v372;
        long long v381 = v373;
        v376[0] = *(_OWORD *)&v369[32];
        v376[1] = v370[0];
        long long v377 = v370[1];
        long long v378 = v370[2];
        int64x2_t v374 = *(int64x2_t *)v369;
        int64x2_t v375 = *(int64x2_t *)&v369[16];
        sub_184D024F8((uint64_t)&v374);
        if (v6 < 0) {
          goto LABEL_435;
        }
        if ((void)v286 == v6)
        {
          if (!(void)v286)
          {
            *(void *)&long long v286 = 0;
            goto LABEL_250;
          }
          if (*v280 == *v158)
          {
            if ((void)v286 == 1)
            {
              *(void *)&long long v286 = 1;
LABEL_250:
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_266;
            }
            if (v280[1] == v158[1])
            {
              if ((void)v286 == 2)
              {
                *(void *)&long long v286 = 2;
                goto LABEL_250;
              }
              if (v280[2] == v158[2])
              {
                if ((void)v286 == 3)
                {
                  *(void *)&long long v286 = 3;
                  goto LABEL_250;
                }
                if (v280[3] == v158[3])
                {
                  uint64_t v159 = 4;
                  while ((void)v286 != v159)
                  {
                    double v160 = v280[v159];
                    double v161 = v158[v159++];
                    if (v160 != v161) {
                      goto LABEL_261;
                    }
                  }
                  goto LABEL_250;
                }
              }
            }
          }
        }
LABEL_261:
        unint64_t v162 = v292 + v6;
        if (__OFADD__(v292, v6)) {
          goto LABEL_439;
        }
        v281[(void)v287] = v157;
        if ((v162 & 0x8000000000000000) != 0) {
          goto LABEL_442;
        }
        if (HIDWORD(v162)) {
          goto LABEL_445;
        }
        uint64_t v292 = v162;
        uint64_t v163 = v287;
        *(_DWORD *)&v277[4 * v287] = v162;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        *(void *)&long long v287 = v163 + 1;
        if (__OFADD__(v163, 1)) {
          goto LABEL_448;
        }
        *(void *)&long long v286 = v6;
        int v280 = v158;
LABEL_266:
        uint64_t v11 = v289;
        uint64_t v14 = v290;
        LOBYTE(v5) = v288;
        if ((void *)++v155 == v278)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          unint64_t v178 = v287;
          goto LABEL_306;
        }
        if (*(void *)(v289 + 16) <= v155)
        {
          __break(1u);
          goto LABEL_269;
        }
      }
    }
  }
  uint64_t v268 = v267;
  MEMORY[0x1F4188790](v36, v37);
  unint64_t v279 = (char *)v267 - v39;
  double v278 = *(void **)(v11 + 16);
  if (!v278) {
    goto LABEL_191;
  }
  uint64_t v276 = (void *)(v11 + 32);
  swift_bridgeObjectRetain_n();
  uint64_t v40 = v291;
  swift_bridgeObjectRetain();
  swift_retain_n();
  uint64_t v41 = v40;
  *(void *)&long long v287 = 0;
  uint64_t v292 = 0;
  *(void *)&long long v286 = 0;
  unint64_t v42 = 0;
  int v280 = (double *)(v6 + 32);
  do
  {
    uint64_t v293 = v276[v42];
    sub_184CFA568(&v293, v41, v5, (uint64_t)v369);
    uint64_t v43 = v14 - v292;
    if (v14 < v292) {
      goto LABEL_406;
    }
    uint64_t v44 = *(void *)v369;
    long long v284 = *(_OWORD *)&v369[24];
    long long v285 = v371;
    double v45 = (double *)&v279[8 * v292];
    long long v333 = *(_OWORD *)&v369[8];
    long long v334 = *(_OWORD *)&v369[24];
    uint64_t v335 = *(void *)&v369[40];
    uint64_t v336 = *(void *)&v370[0];
    long long v337 = *(_OWORD *)((char *)v370 + 8);
    long long v338 = *(_OWORD *)((char *)&v370[1] + 8);
    long long v340 = v371;
    uint64_t v339 = *((void *)&v370[2] + 1);
    uint64_t v341 = v372;
    uint64_t v283 = *(double **)&v369[8];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v46 = sub_184D01368((uint64_t)v369, v45, v43);
    long long v379 = v371;
    long long v380 = v372;
    long long v381 = v373;
    v376[0] = *(_OWORD *)&v369[32];
    v376[1] = v370[0];
    long long v377 = v370[1];
    long long v378 = v370[2];
    int64x2_t v374 = *(int64x2_t *)v369;
    int64x2_t v375 = *(int64x2_t *)&v369[16];
    sub_184D024F8((uint64_t)&v374);
    if (v46 < 0) {
      goto LABEL_409;
    }
    if ((void)v286 == v46)
    {
      if (!(void)v286)
      {
        *(void *)&long long v286 = 0;
        goto LABEL_60;
      }
      if (*v280 == *v45)
      {
        if ((void)v286 == 1)
        {
          *(void *)&long long v286 = 1;
LABEL_60:
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
        if (v280[1] == v45[1])
        {
          if ((void)v286 == 2)
          {
            *(void *)&long long v286 = 2;
            goto LABEL_60;
          }
          if (v280[2] == v45[2])
          {
            if ((void)v286 == 3)
            {
              *(void *)&long long v286 = 3;
              goto LABEL_60;
            }
            if (v280[3] == v45[3])
            {
              uint64_t v47 = 4;
              while ((void)v286 != v47)
              {
                double v48 = v280[v47];
                double v49 = v45[v47++];
                if (v48 != v49) {
                  goto LABEL_71;
                }
              }
              goto LABEL_60;
            }
          }
        }
      }
    }
LABEL_71:
    unint64_t v50 = v292 + v46;
    if (__OFADD__(v292, v46)) {
      goto LABEL_412;
    }
    v281[(void)v287] = v44;
    if ((v50 & 0x8000000000000000) != 0) {
      goto LABEL_415;
    }
    if (HIDWORD(v50)) {
      goto LABEL_418;
    }
    uint64_t v292 = v50;
    uint64_t v51 = v287;
    *(_DWORD *)&v277[4 * v287] = v50;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)&long long v287 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      goto LABEL_421;
    }
    *(void *)&long long v286 = v46;
    int v280 = v45;
LABEL_76:
    ++v42;
    uint64_t v14 = v290;
    uint64_t v41 = v291;
    LOBYTE(v5) = v288;
    if ((void *)v42 == v278) {
      goto LABEL_159;
    }
  }
  while (*(void *)(v289 + 16) > v42);
  __break(1u);
LABEL_79:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  unint64_t v52 = v287;
LABEL_114:
  swift_release_n();
  if (!v275)
  {
    uint64_t v69 = sub_184C9D670(v279, v292);
    swift_release();
    *(void *)&v296[16] = v69;
    if ((v52 & 0x8000000000000000) == 0)
    {
      uint64_t v70 = sub_184C9D670(v281, v52);
      swift_release();
      *(void *)__n128 v296 = v70;
      uint64_t v71 = sub_184CE1788(v277, v52);
      swift_release();
      *(void *)&v296[8] = v71;
      if (v292) {
        goto LABEL_120;
      }
      goto LABEL_347;
    }
    goto LABEL_457;
  }
  sub_184CE1520(0, 0, v279, v292);
  if ((v52 & 0x8000000000000000) != 0) {
    goto LABEL_457;
  }
  sub_184CE1520(0, 0, v281, v52);
  sub_184CE1654(0, 0, v277, v52);
  if (!v292) {
    goto LABEL_347;
  }
LABEL_120:
  __n128 v72 = *(char **)&v296[8];
  unint64_t v73 = *(void *)(*(void *)&v296[8] + 16);
  if (v73 < v52) {
    goto LABEL_463;
  }
  if (v52 != v73)
  {
    if (v52 < v73)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        __n128 v72 = sub_184D01D8C((uint64_t)v72);
      }
      *(void *)&v296[8] = v72;
      uint64_t v74 = sub_184CE19DC();
      CGBitmapPixelInfoGetCGPixelComponentType(v74);
      uint64_t v75 = sub_184CE19DC();
      CGBitmapPixelInfoGetCGPixelComponentType(v75);
      uint64_t v76 = sub_184CE19DC();
      CGBitmapPixelInfoGetCGPixelComponentType(v76);
      uint64_t v77 = v292;
      while (v52 < *(void *)(*(void *)&v296[8] + 16))
      {
        uint64_t v78 = v77 + *(unsigned int *)(*(void *)&v296[8] + 4 * v52 + 32);
        if (v78 > 0xFFFFFFFFLL) {
          goto LABEL_405;
        }
        sub_184CE19DC();
        uint64_t v79 = *(void *)&v296[8];
        unint64_t v80 = sub_184CE1A18(v52, *(uint64_t *)&v296[8]);
        *(_DWORD *)(v79 + 4 * v52 + 32) = v78;
        CGBitmapPixelInfoGetCGPixelComponentType(v80);
        uint64_t v77 = v292;
        if (v73 == ++v52) {
          goto LABEL_347;
        }
      }
      goto LABEL_404;
    }
LABEL_474:
    __break(1u);
LABEL_475:
    __break(1u);
    goto LABEL_476;
  }
LABEL_347:
  uint64_t v226 = v273;
LABEL_391:
  uint64_t v257 = *(void *)v296;
  uint64_t v258 = 0x7FF8000000000000;
  if (!*(void *)(*(void *)v296 + 16))
  {
    uint64_t v261 = 0x7FF8000000000000;
    uint64_t v262 = 0x7FF8000000000000;
    uint64_t v263 = 0x7FF8000000000000;
    goto LABEL_397;
  }
  int64x2_t v374 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v375 = v374;
  *(void *)&v376[0] = *(void *)v296;
  *(_OWORD *)((char *)v376 + 8) = *(_OWORD *)&v296[8];
  sub_184CEB628();
  if (!*(void *)(v257 + 16)) {
    goto LABEL_437;
  }
  uint64_t v261 = v259;
  uint64_t v262 = v260;
  uint64_t v263 = *(void *)(v257 + 32);
  if (v275)
  {
    uint64_t v258 = 0x7FF8000000000000;
    goto LABEL_397;
  }
  uint64_t v258 = sub_184CE1444(v257);
  if ((v264 & 1) == 0)
  {
LABEL_397:
    v294.i64[0] = v261;
    v294.i64[1] = v262;
    v295.i64[0] = v263;
    v295.i64[1] = v258;
    sub_184CEB9B4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v265 = *(void *)&v296[16];
    int64x2_t v266 = v295;
    *(int64x2_t *)uint64_t v226 = v294;
    *(int64x2_t *)(v226 + 16) = v266;
    *(_OWORD *)(v226 + 32) = *(_OWORD *)v296;
    *(void *)(v226 + 48) = v265;
    return;
  }
LABEL_499:
  __break(1u);
}

uint64_t sub_184CFA568@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  char v6 = a3 & 1;
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = v6;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = sub_184D02F94;
  *(void *)(a4 + 24) = v8;
  *(void *)(a4 + 32) = sub_184CFF814;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = 0x7FF8000000000000;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(void *)(a4 + 88) = sub_184D02FAC;
  *(void *)(a4 + 96) = v9;
  *(void *)(a4 + 104) = sub_184CFF814;
  *(void *)(a4 + 112) = 0;
  *(void *)a4 = v7;

  return swift_bridgeObjectRetain();
}

uint64_t Region.area.getter()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[6];
  BOOL v4 = (~*v0 & 0x7FF0000000000000) != 0 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v4 && !*(void *)(v2 + 16))
  {
    char v6 = 0;
    uint64_t v1 = v0[1];
    uint64_t v3 = v0[2];
    uint64_t v2 = *v0;
    uint64_t v5 = v0[3];
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    *(double *)&uint64_t v5 = 0.0;
    char v6 = 1;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  double v9 = 0.0;
  double v10 = *(double *)&v5;
  double v11 = *(double *)&v3;
  double v12 = *(double *)&v1;
  for (uint64_t result = v2; ; uint64_t result = v17)
  {
    unint64_t v20 = v8 << 8;
    if ((v6 & 1) == 0)
    {
      uint64_t v19 = 1;
      if (v7)
      {
        double v10 = 0.0;
        double v11 = 0.0;
        double v12 = 0.0;
        *(double *)&uint64_t result = 0.0;
        unint64_t v21 = v20 | 1;
LABEL_38:
        sub_184CF5464(result, *(uint64_t *)&v12, *(uint64_t *)&v11, *(uint64_t *)&v10, v21, v6);
        *(double *)&uint64_t result = COERCE_DOUBLE(sub_184CF3204(v2, v1, v3, v5, v6));
        return result;
      }
      *(double *)&uint64_t v14 = 0.0;
      double v18 = 0.0;
      double v16 = 0.0;
      *(double *)&uint64_t v17 = 0.0;
      goto LABEL_12;
    }
    unint64_t v21 = v20 | v7;
    unint64_t v22 = *(void *)(*(void *)&v12 + 16);
    unint64_t v23 = *(void *)(*(void *)&v11 + 16);
    if (*(void *)&v10 == v22 && v21 == v23) {
      goto LABEL_38;
    }
    if (v21 >= v23) {
      break;
    }
    unint64_t v25 = v21 + 1;
    if (v21 + 1 >= v23) {
      goto LABEL_40;
    }
    if ((*(void *)&v10 & 0x8000000000000000) != 0) {
      goto LABEL_41;
    }
    unint64_t v26 = *(void *)(result + 16);
    if (*(void *)&v10 >= v26) {
      goto LABEL_42;
    }
    unint64_t v27 = *(void *)&v10 + 1;
    if (*(void *)&v10 + 1 >= v26) {
      goto LABEL_43;
    }
    unint64_t v28 = v21 + 2;
    *(double *)&uint64_t v14 = v10;
    if (*(void *)&v10 < v22)
    {
      uint64_t v29 = *(void *)&v12 + 32;
      *(double *)&uint64_t v14 = v10;
      if (v28 >= *(unsigned int *)(*(void *)&v12 + 32 + 4 * *(void *)&v10))
      {
        uint64_t v14 = *(void *)&v10 + 1;
        if (v27 < v22)
        {
          uint64_t v14 = *(void *)&v10 + 1;
          if (v28 >= *(unsigned int *)(v29 + 4 * v27))
          {
            uint64_t v14 = *(void *)&v10 + 2;
            if (*(void *)&v10 + 2 < v22 && v28 >= *(unsigned int *)(v29 + 4 * v14))
            {
              uint64_t v14 = *(void *)&v10 + 3;
              if (*(void *)&v10 + 3 < v22 && v28 >= *(unsigned int *)(v29 + 4 * v14))
              {
                double v30 = v10;
                do
                {
                  if (v22 - 4 == *(void *)&v30)
                  {
                    uint64_t v14 = *(uint64_t *)(*(void *)&v12 + 16);
                    goto LABEL_11;
                  }
                  int64_t v31 = *(unsigned int *)(*(void *)&v12 + 48 + 4 * (*(void *)&v30)++);
                }
                while ((uint64_t)v28 >= v31);
                uint64_t v14 = *(void *)&v30 + 3;
              }
            }
          }
        }
      }
    }
LABEL_11:
    uint64_t v15 = *(uint64_t *)(*(void *)&v11 + 32 + 8 * v21);
    double v16 = v12;
    double v12 = *(double *)(*(void *)&v11 + 32 + 8 * v25);
    uint64_t v17 = result;
    double v18 = v11;
    double v11 = *(double *)(result + 32 + 8 * *(void *)&v10);
    double v10 = *(double *)(result + 32 + 8 * v27);
    uint64_t v19 = v28;
    unint64_t v8 = v28 >> 8;
    uint64_t result = v15;
LABEL_12:
    uint64_t v7 = v19;
    double v9 = v9 + (v12 - *(double *)&result) * (v10 - v11);
    double v10 = *(double *)&v14;
    double v11 = v18;
    double v12 = v16;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_184CFA8EC(BOOL a1)
{
  uint64_t v2 = v1;
  uint64_t v225 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v1 + 3;
  uint64_t v4 = *((void *)v1 + 6);
  char v6 = (uint64_t *)(v1 + 2);
  long long v7 = v1[2];
  long long v8 = v1[1];
  BOOL v9 = (*(void *)v1 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)v1 & 0x7FF0000000000000) != 0;
  long long v215 = *v1;
  long long v216 = v8;
  BOOL v10 = *(void *)(v7 + 16) == 0;
  BOOL v11 = !v9 || !v10;
  if (v9 && v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v7 + 16);
  }
  if (v11) {
    unint64_t v13 = *(void *)(v7 + 16);
  }
  else {
    unint64_t v13 = 2;
  }
  long long v217 = v7;
  uint64_t v218 = v4;
  if (v9 && v12 == 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = v12;
  }
  uint64_t v15 = sub_184CE293C(0, v14);
  uint64_t isStackAllocationSafe = sub_184CEB8F0();
  uint64_t v19 = (char **)v1 + 5;
  uint64_t v18 = *((void *)v1 + 5);
  unint64_t v20 = *(void *)(v18 + 16);
  if (v13)
  {
    if (v13 - 1 >= v20)
    {
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
      goto LABEL_229;
    }
    int64_t v211 = *(unsigned int *)(v18 + 4 * (v13 - 1) + 32);
  }
  else
  {
    int64_t v211 = 0;
  }
  uint64_t v21 = v13 * v15;
  if ((unsigned __int128)((uint64_t)v13 * (__int128)v15) >> 64 != (uint64_t)(v13 * v15) >> 63)
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  if (v13 >> 60)
  {
LABEL_229:
    __break(1u);
    goto LABEL_230;
  }
  uint64_t v210 = v6;
  unint64_t v212 = v20;
  unint64_t v209 = v5;
  if ((uint64_t)(8 * v13) >= 1025)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v46 = swift_slowAlloc();
      uint64_t v207 = (uint64_t *)v46;
      if (v13 >> 61) {
        goto LABEL_254;
      }
      if (uint64_t)(4 * v13) < 1025 || (uint64_t v46 = swift_stdlib_isStackAllocationSafe(), (v46))
      {
        uint64_t v208 = (char **)v2 + 5;
        uint64_t v48 = MEMORY[0x1F4188790](v46, v47);
        unint64_t v52 = (char *)&v205 - v51;
        if (v21 < 0)
        {
LABEL_260:
          __break(1u);
          goto LABEL_261;
        }
        if ((unint64_t)(v21 + 0x1000000000000000) >> 61)
        {
LABEL_261:
          __break(1u);
          goto LABEL_262;
        }
        uint64_t v206 = v49;
        if (8 * v21 >= 1025)
        {
          uint64_t v48 = swift_stdlib_isStackAllocationSafe();
          if ((v48 & 1) == 0)
          {
            uint64_t v135 = swift_slowAlloc();
            uint64_t v213 = 0;
            unint64_t v214 = 0;
            uint64_t v136 = *((void *)v2 + 5);
            uint64_t v137 = *((void *)v2 + 6);
            __n128 v35 = *(double **)v2;
            uint64_t v36 = *((void *)v2 + 1);
            uint64_t v37 = *((void *)v2 + 2);
            uint64_t v138 = *((void *)v2 + 3);
            uint64_t v139 = *((void *)v2 + 4);
            *(void *)&long long v215 = *(void *)v2;
            *((void *)&v215 + 1) = v36;
            *(void *)&long long v216 = v37;
            *((void *)&v216 + 1) = v138;
            *(void *)&long long v217 = v139;
            *((void *)&v217 + 1) = v136;
            uint64_t v218 = v137;
            uint64_t v219 = (double *)(v137 + 32);
            uint64_t v220 = 0;
            swift_retain_n();
            swift_retain();
            swift_retain();
            BOOL v140 = a1;
            unint64_t v141 = (const void *)v135;
            sub_184CFDBD4((uint64_t *)&v215, v140, v135, v21, &v213, v21, 1, &v219, (uint64_t)v207, v13, &v214, (uint64_t)v52, v13, 0);
            swift_release_n();
            swift_release();
            swift_release();
            uint64_t v142 = v213;
            if (v213 < 0)
            {
LABEL_268:
              __break(1u);
              goto LABEL_269;
            }
            BOOL v11 = v13 == v20;
            uint64_t v44 = v210;
            if (v11)
            {
              uint64_t v143 = sub_184C9D670(v141, v213);
              swift_release();
              void *v209 = v143;
              unint64_t v144 = v214;
              if ((v214 & 0x8000000000000000) != 0)
              {
LABEL_271:
                __break(1u);
                goto LABEL_272;
              }
              uint64_t v145 = sub_184C9D670(v207, v214);
              swift_release();
              *uint64_t v44 = (uint64_t)v145;
              uint64_t v146 = (char *)sub_184CE1788(v52, v144);
              swift_release();
              uint64_t v19 = v208;
              *uint64_t v208 = v146;
            }
            else
            {
              sub_184CE1520(0, v211, v141, v213);
              unint64_t v144 = v214;
              if ((v214 & 0x8000000000000000) != 0) {
                goto LABEL_271;
              }
              sub_184CE1520(0, v13, v207, v214);
              uint64_t v165 = v52;
              uint64_t v19 = v208;
              sub_184CE1654(0, v13, v165, v144);
            }
            uint64_t v166 = v142 - v211;
            if (v142 != v211)
            {
              unint64_t v167 = *v19;
              unint64_t v168 = *((void *)*v19 + 2);
              if (v168 < v144)
              {
LABEL_279:
                __break(1u);
                goto LABEL_280;
              }
              if (v144 != v168)
              {
                if (v144 >= v168)
                {
LABEL_284:
                  __break(1u);
                  goto LABEL_285;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v167 = sub_184D01D8C((uint64_t)v167);
                }
                do
                {
                  if (v144 >= *((void *)v167 + 2)) {
                    goto LABEL_234;
                  }
                  uint64_t v169 = &v167[4 * v144];
                  uint64_t v170 = *((unsigned int *)v169 + 8);
                  BOOL v72 = __OFADD__(v170, v166);
                  unint64_t v171 = v170 + v166;
                  if (v72) {
                    goto LABEL_237;
                  }
                  if ((v171 & 0x8000000000000000) != 0) {
                    goto LABEL_240;
                  }
                  if (HIDWORD(v171)) {
                    goto LABEL_243;
                  }
                  ++v144;
                  *((_DWORD *)v169 + 8) = v171;
                }
                while (v168 != v144);
                *uint64_t v19 = v167;
              }
            }
            uint64_t v74 = v138;
            MEMORY[0x18532B810](v141, -1, -1);
            goto LABEL_202;
          }
        }
        MEMORY[0x1F4188790](v48, v50);
        __n128 v54 = (char *)&v205 - v53;
        uint64_t v213 = 0;
        unint64_t v214 = 0;
        uint64_t v56 = *((void *)v2 + 5);
        uint64_t v55 = *((void *)v2 + 6);
        __n128 v35 = *(double **)v2;
        uint64_t v36 = *((void *)v2 + 1);
        uint64_t v37 = *((void *)v2 + 2);
        uint64_t v57 = *((void *)v2 + 3);
        uint64_t v58 = *((void *)v2 + 4);
        *(void *)&long long v215 = *(void *)v2;
        *((void *)&v215 + 1) = v36;
        *(void *)&long long v216 = v37;
        *((void *)&v216 + 1) = v57;
        *(void *)&long long v217 = v58;
        *((void *)&v217 + 1) = v56;
        uint64_t v218 = v55;
        uint64_t v219 = (double *)(v55 + 32);
        uint64_t v220 = 0;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CFDBD4((uint64_t *)&v215, a1, (uint64_t)v54, v21, &v213, v21, 1, &v219, (uint64_t)v207, v13, &v214, (uint64_t)v52, v13, 0);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v59 = v213;
        if (v213 < 0)
        {
LABEL_248:
          __break(1u);
          goto LABEL_249;
        }
        if (v13 == v212)
        {
          uint64_t v60 = sub_184C9D670(v54, v213);
          swift_release();
          void *v209 = v60;
          unint64_t v61 = v214;
          if ((v214 & 0x8000000000000000) == 0)
          {
            uint64_t v62 = sub_184C9D670(v207, v214);
            swift_release();
            uint64_t v63 = v210;
            uint64_t *v210 = (uint64_t)v62;
            uint64_t v64 = (char *)sub_184CE1788(v52, v61);
            uint64_t v44 = v63;
            swift_release();
            uint64_t v19 = v208;
            *uint64_t v208 = v64;
LABEL_72:
            uint64_t v101 = v59 - v211;
            if (v59 != v211)
            {
              uint64_t v102 = *v19;
              unint64_t v103 = *((void *)*v19 + 2);
              if (v103 < v61)
              {
LABEL_264:
                __break(1u);
                goto LABEL_265;
              }
              if (v61 != v103)
              {
                if (v61 >= v103)
                {
LABEL_273:
                  __break(1u);
                  goto LABEL_274;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v102 = sub_184D01D8C((uint64_t)v102);
                }
                do
                {
                  if (v61 >= *((void *)v102 + 2)) {
                    goto LABEL_214;
                  }
                  uint64_t v104 = &v102[4 * v61];
                  uint64_t v105 = *((unsigned int *)v104 + 8);
                  BOOL v72 = __OFADD__(v105, v101);
                  unint64_t v106 = v105 + v101;
                  if (v72) {
                    goto LABEL_217;
                  }
                  if ((v106 & 0x8000000000000000) != 0) {
                    goto LABEL_220;
                  }
                  if (HIDWORD(v106)) {
                    goto LABEL_223;
                  }
                  ++v61;
                  *((_DWORD *)v104 + 8) = v106;
                }
                while (v103 != v61);
                *uint64_t v19 = v102;
              }
            }
            uint64_t v74 = v57;
LABEL_202:
            MEMORY[0x18532B810](v207, -1, -1);
            goto LABEL_203;
          }
        }
        else
        {
          sub_184CE1520(0, v211, v54, v213);
          unint64_t v61 = v214;
          if ((v214 & 0x8000000000000000) == 0)
          {
            uint64_t v44 = v210;
            sub_184CE1520(0, v13, v207, v214);
            uint64_t v100 = v52;
            uint64_t v19 = v208;
            sub_184CE1654(0, v13, v100, v61);
            goto LABEL_72;
          }
        }
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      uint64_t v122 = swift_slowAlloc();
      uint64_t v208 = (char **)v122;
      if (v21 < 0)
      {
LABEL_276:
        __break(1u);
        goto LABEL_277;
      }
      if ((unint64_t)(v21 + 0x1000000000000000) >> 61)
      {
LABEL_277:
        __break(1u);
        goto LABEL_278;
      }
      if (8 * v21 >= 1025)
      {
        uint64_t v122 = swift_stdlib_isStackAllocationSafe();
        if ((v122 & 1) == 0)
        {
          uint64_t v179 = swift_slowAlloc();
          uint64_t v213 = 0;
          unint64_t v214 = 0;
          uint64_t v180 = *((void *)v2 + 5);
          uint64_t v181 = *((void *)v2 + 6);
          __n128 v35 = *(double **)v2;
          uint64_t v36 = *((void *)v2 + 1);
          uint64_t v37 = *((void *)v2 + 2);
          uint64_t v182 = *((void *)v2 + 3);
          uint64_t v183 = *((void *)v2 + 4);
          *(void *)&long long v215 = *(void *)v2;
          *((void *)&v215 + 1) = v36;
          *(void *)&long long v216 = v37;
          *((void *)&v216 + 1) = v182;
          *(void *)&long long v217 = v183;
          *((void *)&v217 + 1) = v180;
          uint64_t v218 = v181;
          uint64_t v219 = (double *)(v181 + 32);
          uint64_t v220 = 0;
          swift_retain_n();
          swift_retain();
          swift_retain();
          BOOL v184 = a1;
          uint64_t v185 = (const void *)v179;
          sub_184CFDBD4((uint64_t *)&v215, v184, v179, v21, &v213, v21, 1, &v219, (uint64_t)v207, v13, &v214, (uint64_t)v208, v13, 0);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v186 = v213;
          if (v213 < 0)
          {
LABEL_281:
            __break(1u);
            goto LABEL_282;
          }
          BOOL v11 = v13 == v20;
          uint64_t v44 = v210;
          if (v11)
          {
            uint64_t v187 = sub_184C9D670(v185, v213);
            swift_release();
            void *v209 = v187;
            unint64_t v188 = v214;
            if ((v214 & 0x8000000000000000) != 0)
            {
LABEL_282:
              __break(1u);
              goto LABEL_283;
            }
            uint64_t v189 = sub_184C9D670(v207, v214);
            swift_release();
            *uint64_t v44 = (uint64_t)v189;
            uint64_t v190 = (char *)sub_184CE1788(v208, v188);
            swift_release();
            *uint64_t v19 = v190;
          }
          else
          {
            sub_184CE1520(0, v211, v185, v213);
            unint64_t v188 = v214;
            if ((v214 & 0x8000000000000000) != 0) {
              goto LABEL_282;
            }
            sub_184CE1520(0, v13, v207, v214);
            sub_184CE1654(0, v13, v208, v188);
          }
          uint64_t v191 = v186 - v211;
          if (v186 != v211)
          {
            uint64_t v192 = *v19;
            unint64_t v193 = *((void *)*v19 + 2);
            if (v193 < v188)
            {
LABEL_286:
              __break(1u);
LABEL_287:
              __break(1u);
            }
            if (v188 != v193)
            {
              if (v188 >= v193) {
                goto LABEL_287;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v192 = sub_184D01D8C((uint64_t)v192);
              }
              do
              {
                if (v188 >= *((void *)v192 + 2)) {
                  goto LABEL_255;
                }
                unint64_t v194 = &v192[4 * v188];
                uint64_t v195 = *((unsigned int *)v194 + 8);
                BOOL v72 = __OFADD__(v195, v191);
                unint64_t v196 = v195 + v191;
                if (v72) {
                  goto LABEL_256;
                }
                if ((v196 & 0x8000000000000000) != 0) {
                  goto LABEL_257;
                }
                if (HIDWORD(v196)) {
                  goto LABEL_258;
                }
                ++v188;
                *((_DWORD *)v194 + 8) = v196;
              }
              while (v193 != v188);
              *uint64_t v19 = v192;
            }
          }
          uint64_t v74 = v182;
          MEMORY[0x18532B810](v185, -1, -1);
LABEL_201:
          MEMORY[0x18532B810](v208, -1, -1);
          goto LABEL_202;
        }
      }
      uint64_t v206 = &v205;
      MEMORY[0x1F4188790](v122, v123);
      uint64_t v125 = (char *)&v205 - v124;
      uint64_t v213 = 0;
      unint64_t v214 = 0;
      uint64_t v127 = *((void *)v2 + 5);
      uint64_t v126 = *((void *)v2 + 6);
      __n128 v35 = *(double **)v2;
      uint64_t v36 = *((void *)v2 + 1);
      uint64_t v37 = *((void *)v2 + 2);
      uint64_t v128 = *((void *)v2 + 3);
      uint64_t v129 = *((void *)v2 + 4);
      *(void *)&long long v215 = *(void *)v2;
      *((void *)&v215 + 1) = v36;
      *(void *)&long long v216 = v37;
      *((void *)&v216 + 1) = v128;
      *(void *)&long long v217 = v129;
      *((void *)&v217 + 1) = v127;
      uint64_t v218 = v126;
      uint64_t v219 = (double *)(v126 + 32);
      uint64_t v220 = 0;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184CFDBD4((uint64_t *)&v215, a1, (uint64_t)v125, v21, &v213, v21, 1, &v219, (uint64_t)v207, v13, &v214, (uint64_t)v208, v13, 0);
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v130 = v213;
      if (v213 < 0)
      {
LABEL_267:
        __break(1u);
        goto LABEL_268;
      }
      if (v13 == v212)
      {
        uint64_t v131 = sub_184C9D670(v125, v213);
        swift_release();
        void *v209 = v131;
        unint64_t v132 = v214;
        if ((v214 & 0x8000000000000000) == 0)
        {
          uint64_t v133 = sub_184C9D670(v207, v214);
          swift_release();
          uint64_t *v210 = (uint64_t)v133;
          uint64_t v134 = sub_184CE1788(v208, v132);
          swift_release();
          uint64_t v19 = (char **)v2 + 5;
          *((void *)v2 + 5) = v134;
LABEL_135:
          uint64_t v159 = v130 - v211;
          BOOL v11 = v130 == v211;
          uint64_t v44 = v210;
          if (!v11)
          {
            double v160 = *v19;
            unint64_t v161 = *((void *)*v19 + 2);
            if (v161 < v132)
            {
LABEL_278:
              __break(1u);
              goto LABEL_279;
            }
            if (v132 != v161)
            {
              if (v132 >= v161)
              {
LABEL_283:
                __break(1u);
                goto LABEL_284;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                double v160 = sub_184D01D8C((uint64_t)v160);
              }
              do
              {
                if (v132 >= *((void *)v160 + 2)) {
                  goto LABEL_233;
                }
                unint64_t v162 = &v160[4 * v132];
                uint64_t v163 = *((unsigned int *)v162 + 8);
                BOOL v72 = __OFADD__(v163, v159);
                unint64_t v164 = v163 + v159;
                if (v72) {
                  goto LABEL_236;
                }
                if ((v164 & 0x8000000000000000) != 0) {
                  goto LABEL_239;
                }
                if (HIDWORD(v164)) {
                  goto LABEL_242;
                }
                ++v132;
                *((_DWORD *)v162 + 8) = v164;
              }
              while (v161 != v132);
              *uint64_t v19 = v160;
            }
          }
          uint64_t v74 = v128;
          goto LABEL_201;
        }
      }
      else
      {
        sub_184CE1520(0, v211, v125, v213);
        unint64_t v132 = v214;
        if ((v214 & 0x8000000000000000) == 0)
        {
          sub_184CE1520(0, v13, v207, v214);
          uint64_t v19 = (char **)v2 + 5;
          sub_184CE1654(0, v13, v208, v132);
          goto LABEL_135;
        }
      }
LABEL_270:
      __break(1u);
      goto LABEL_271;
    }
  }
  uint64_t v22 = MEMORY[0x1F4188790](isStackAllocationSafe, v17);
  unint64_t v25 = (char *)&v205 - v24;
  if (v13 >> 61) {
    goto LABEL_232;
  }
  uint64_t v207 = &v205;
  if ((uint64_t)(4 * v13) >= 1025)
  {
    uint64_t v22 = swift_stdlib_isStackAllocationSafe();
    if ((v22 & 1) == 0)
    {
      uint64_t v75 = swift_slowAlloc();
      uint64_t v208 = (char **)v75;
      if (v21 < 0)
      {
LABEL_262:
        __break(1u);
        goto LABEL_263;
      }
      if ((unint64_t)(v21 + 0x1000000000000000) >> 61)
      {
LABEL_263:
        __break(1u);
        goto LABEL_264;
      }
      if (8 * v21 < 1025 || (uint64_t v75 = swift_stdlib_isStackAllocationSafe(), (v75 & 1) != 0))
      {
        uint64_t v206 = &v205;
        MEMORY[0x1F4188790](v75, v76);
        uint64_t v78 = (char *)&v205 - v77;
        uint64_t v213 = 0;
        unint64_t v214 = 0;
        uint64_t v80 = *((void *)v2 + 5);
        uint64_t v79 = *((void *)v2 + 6);
        __n128 v35 = *(double **)v2;
        uint64_t v36 = *((void *)v2 + 1);
        uint64_t v37 = *((void *)v2 + 2);
        uint64_t v81 = *((void *)v2 + 3);
        uint64_t v82 = *((void *)v2 + 4);
        *(void *)&long long v215 = *(void *)v2;
        *((void *)&v215 + 1) = v36;
        *(void *)&long long v216 = v37;
        *((void *)&v216 + 1) = v81;
        *(void *)&long long v217 = v82;
        *((void *)&v217 + 1) = v80;
        uint64_t v218 = v79;
        uint64_t v219 = (double *)(v79 + 32);
        uint64_t v220 = 0;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CFDBD4((uint64_t *)&v215, a1, (uint64_t)v78, v21, &v213, v21, 1, &v219, (uint64_t)v25, v13, &v214, (uint64_t)v208, v13, 0);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v83 = v213;
        if (v213 < 0)
        {
LABEL_249:
          __break(1u);
          goto LABEL_250;
        }
        if (v13 == v212)
        {
          unint64_t v84 = sub_184C9D670(v78, v213);
          swift_release();
          void *v209 = v84;
          unint64_t v85 = v214;
          if ((v214 & 0x8000000000000000) == 0)
          {
            uint64_t v86 = sub_184C9D670(v25, v214);
            swift_release();
            uint64_t v44 = v210;
            uint64_t *v210 = (uint64_t)v86;
            uint64_t v87 = sub_184CE1788(v208, v85);
            swift_release();
            uint64_t v19 = (char **)v2 + 5;
            *((void *)v2 + 5) = v87;
LABEL_87:
            uint64_t v108 = v83 - v211;
            if (v83 != v211)
            {
              double v109 = *v19;
              unint64_t v110 = *((void *)*v19 + 2);
              if (v110 < v85)
              {
LABEL_265:
                __break(1u);
                goto LABEL_266;
              }
              if (v85 != v110)
              {
                if (v85 >= v110)
                {
LABEL_274:
                  __break(1u);
                  goto LABEL_275;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  double v109 = sub_184D01D8C((uint64_t)v109);
                }
                do
                {
                  if (v85 >= *((void *)v109 + 2)) {
                    goto LABEL_215;
                  }
                  unint64_t v111 = &v109[4 * v85];
                  uint64_t v112 = *((unsigned int *)v111 + 8);
                  BOOL v72 = __OFADD__(v112, v108);
                  unint64_t v113 = v112 + v108;
                  if (v72) {
                    goto LABEL_218;
                  }
                  if ((v113 & 0x8000000000000000) != 0) {
                    goto LABEL_221;
                  }
                  if (HIDWORD(v113)) {
                    goto LABEL_224;
                  }
                  ++v85;
                  *((_DWORD *)v111 + 8) = v113;
                }
                while (v110 != v85);
                *uint64_t v19 = v109;
              }
            }
            uint64_t v74 = v81;
LABEL_179:
            MEMORY[0x18532B810](v208, -1, -1);
            goto LABEL_203;
          }
        }
        else
        {
          sub_184CE1520(0, v211, v78, v213);
          unint64_t v85 = v214;
          if ((v214 & 0x8000000000000000) == 0)
          {
            uint64_t v107 = v25;
            uint64_t v44 = v210;
            sub_184CE1520(0, v13, v107, v214);
            uint64_t v19 = (char **)v2 + 5;
            sub_184CE1654(0, v13, v208, v85);
            goto LABEL_87;
          }
        }
LABEL_252:
        __break(1u);
        goto LABEL_253;
      }
      uint64_t v147 = swift_slowAlloc();
      uint64_t v213 = 0;
      unint64_t v214 = 0;
      uint64_t v148 = *((void *)v2 + 5);
      uint64_t v149 = *((void *)v2 + 6);
      __n128 v35 = *(double **)v2;
      uint64_t v36 = *((void *)v2 + 1);
      uint64_t v37 = *((void *)v2 + 2);
      uint64_t v150 = *((void *)v2 + 3);
      uint64_t v151 = *((void *)v2 + 4);
      *(void *)&long long v215 = *(void *)v2;
      *((void *)&v215 + 1) = v36;
      *(void *)&long long v216 = v37;
      *((void *)&v216 + 1) = v150;
      *(void *)&long long v217 = v151;
      *((void *)&v217 + 1) = v148;
      uint64_t v218 = v149;
      uint64_t v219 = (double *)(v149 + 32);
      uint64_t v220 = 0;
      swift_retain_n();
      swift_retain();
      swift_retain();
      BOOL v152 = a1;
      unint64_t v153 = (const void *)v147;
      sub_184CFDBD4((uint64_t *)&v215, v152, v147, v21, &v213, v21, 1, &v219, (uint64_t)v25, v13, &v214, (uint64_t)v208, v13, 0);
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v154 = v213;
      if (v213 < 0)
      {
LABEL_269:
        __break(1u);
        goto LABEL_270;
      }
      if (v13 == v212)
      {
        unint64_t v155 = sub_184C9D670(v153, v213);
        swift_release();
        void *v209 = v155;
        unint64_t v156 = v214;
        if ((v214 & 0x8000000000000000) == 0)
        {
          uint64_t v157 = sub_184C9D670(v25, v214);
          swift_release();
          uint64_t v44 = v210;
          uint64_t *v210 = (uint64_t)v157;
          uint64_t v158 = (char *)sub_184CE1788(v208, v156);
          swift_release();
          *uint64_t v19 = v158;
LABEL_166:
          uint64_t v173 = v154 - v211;
          if (v154 != v211)
          {
            double v174 = *v19;
            unint64_t v175 = *((void *)*v19 + 2);
            if (v175 < v156)
            {
LABEL_280:
              __break(1u);
              goto LABEL_281;
            }
            if (v156 != v175)
            {
              if (v156 >= v175)
              {
LABEL_285:
                __break(1u);
                goto LABEL_286;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                double v174 = sub_184D01D8C((uint64_t)v174);
              }
              do
              {
                if (v156 >= *((void *)v174 + 2)) {
                  goto LABEL_235;
                }
                uint64_t v176 = &v174[4 * v156];
                uint64_t v177 = *((unsigned int *)v176 + 8);
                BOOL v72 = __OFADD__(v177, v173);
                unint64_t v178 = v177 + v173;
                if (v72) {
                  goto LABEL_238;
                }
                if ((v178 & 0x8000000000000000) != 0) {
                  goto LABEL_241;
                }
                if (HIDWORD(v178)) {
                  goto LABEL_244;
                }
                ++v156;
                *((_DWORD *)v176 + 8) = v178;
              }
              while (v175 != v156);
              *uint64_t v19 = v174;
            }
          }
          uint64_t v74 = v150;
          MEMORY[0x18532B810](v153, -1, -1);
          goto LABEL_179;
        }
      }
      else
      {
        sub_184CE1520(0, v211, v153, v213);
        unint64_t v156 = v214;
        if ((v214 & 0x8000000000000000) == 0)
        {
          uint64_t v172 = v25;
          uint64_t v44 = v210;
          sub_184CE1520(0, v13, v172, v214);
          sub_184CE1654(0, v13, v208, v156);
          goto LABEL_166;
        }
      }
LABEL_272:
      __break(1u);
      goto LABEL_273;
    }
  }
  uint64_t v208 = (char **)v2 + 5;
  uint64_t v26 = MEMORY[0x1F4188790](v22, v23);
  double v30 = (char *)&v205 - v29;
  if (v21 < 0)
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  if ((unint64_t)(v21 + 0x1000000000000000) >> 61)
  {
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
    goto LABEL_248;
  }
  uint64_t v206 = v27;
  if (8 * v21 >= 1025)
  {
    uint64_t v26 = swift_stdlib_isStackAllocationSafe();
    if ((v26 & 1) == 0)
    {
      uint64_t v88 = swift_slowAlloc();
      uint64_t v213 = 0;
      unint64_t v214 = 0;
      uint64_t v89 = *((void *)v2 + 5);
      uint64_t v90 = *((void *)v2 + 6);
      __n128 v35 = *(double **)v2;
      uint64_t v36 = *((void *)v2 + 1);
      uint64_t v37 = *((void *)v2 + 2);
      uint64_t v91 = *((void *)v2 + 3);
      uint64_t v92 = *((void *)v2 + 4);
      *(void *)&long long v215 = *(void *)v2;
      *((void *)&v215 + 1) = v36;
      *(void *)&long long v216 = v37;
      *((void *)&v216 + 1) = v91;
      *(void *)&long long v217 = v92;
      *((void *)&v217 + 1) = v89;
      uint64_t v218 = v90;
      uint64_t v219 = (double *)(v90 + 32);
      uint64_t v220 = 0;
      swift_retain_n();
      swift_retain();
      swift_retain();
      BOOL v93 = a1;
      unint64_t v94 = (const void *)v88;
      sub_184CFDBD4((uint64_t *)&v215, v93, v88, v21, &v213, v21, 1, &v219, (uint64_t)v25, v13, &v214, (uint64_t)v30, v13, 0);
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v95 = v213;
      if (v213 < 0)
      {
LABEL_250:
        __break(1u);
        goto LABEL_251;
      }
      if (v13 == v212)
      {
        unint64_t v96 = sub_184C9D670(v94, v213);
        swift_release();
        void *v209 = v96;
        unint64_t v97 = v214;
        if ((v214 & 0x8000000000000000) == 0)
        {
          __n128 v98 = sub_184C9D670(v25, v214);
          swift_release();
          uint64_t v44 = v210;
          uint64_t *v210 = (uint64_t)v98;
          uint64_t v99 = (char *)sub_184CE1788(v30, v97);
          swift_release();
          uint64_t v19 = v208;
          *uint64_t v208 = v99;
          goto LABEL_102;
        }
      }
      else
      {
        sub_184CE1520(0, v211, v94, v213);
        unint64_t v97 = v214;
        if ((v214 & 0x8000000000000000) == 0)
        {
          uint64_t v114 = v25;
          uint64_t v44 = v210;
          sub_184CE1520(0, v13, v114, v214);
          uint64_t v115 = v30;
          uint64_t v19 = v208;
          sub_184CE1654(0, v13, v115, v97);
LABEL_102:
          uint64_t v116 = v95 - v211;
          if (v95 != v211)
          {
            unint64_t v117 = *v19;
            unint64_t v118 = *((void *)*v19 + 2);
            if (v118 < v97)
            {
LABEL_266:
              __break(1u);
              goto LABEL_267;
            }
            if (v97 != v118)
            {
              if (v97 >= v118)
              {
LABEL_275:
                __break(1u);
                goto LABEL_276;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v117 = sub_184D01D8C((uint64_t)v117);
              }
              do
              {
                if (v97 >= *((void *)v117 + 2)) {
                  goto LABEL_216;
                }
                uint64_t v119 = &v117[4 * v97];
                uint64_t v120 = *((unsigned int *)v119 + 8);
                BOOL v72 = __OFADD__(v120, v116);
                unint64_t v121 = v120 + v116;
                if (v72) {
                  goto LABEL_219;
                }
                if ((v121 & 0x8000000000000000) != 0) {
                  goto LABEL_222;
                }
                if (HIDWORD(v121)) {
                  goto LABEL_225;
                }
                ++v97;
                *((_DWORD *)v119 + 8) = v121;
              }
              while (v118 != v97);
              *uint64_t v19 = v117;
            }
          }
          uint64_t v74 = v91;
          MEMORY[0x18532B810](v94, -1, -1);
          goto LABEL_203;
        }
      }
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
      goto LABEL_259;
    }
  }
  uint64_t v205 = (uint64_t)&v205;
  MEMORY[0x1F4188790](v26, v28);
  unint64_t v32 = (char *)&v205 - v31;
  uint64_t v213 = 0;
  unint64_t v214 = 0;
  uint64_t v33 = *((void *)v2 + 5);
  uint64_t v34 = *((void *)v2 + 6);
  __n128 v35 = *(double **)v2;
  uint64_t v36 = *((void *)v2 + 1);
  uint64_t v37 = *((void *)v2 + 2);
  uint64_t v38 = *((void *)v2 + 3);
  uint64_t v39 = *((void *)v2 + 4);
  *(void *)&long long v215 = *(void *)v2;
  *((void *)&v215 + 1) = v36;
  *(void *)&long long v216 = v37;
  *((void *)&v216 + 1) = v38;
  *(void *)&long long v217 = v39;
  *((void *)&v217 + 1) = v33;
  uint64_t v218 = v34;
  uint64_t v219 = (double *)(v34 + 32);
  uint64_t v220 = 0;
  swift_retain_n();
  swift_retain();
  swift_retain();
  sub_184CFDBD4((uint64_t *)&v215, a1, (uint64_t)v32, v21, &v213, v21, 1, &v219, (uint64_t)v25, v13, &v214, (uint64_t)v30, v13, 0);
  swift_release_n();
  swift_release();
  swift_release();
  uint64_t v40 = v213;
  if (v213 < 0)
  {
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }
  if (v13 != v212)
  {
    sub_184CE1520(0, v211, v32, v213);
    unint64_t v42 = v214;
    if ((v214 & 0x8000000000000000) == 0)
    {
      double v65 = v25;
      uint64_t v44 = v210;
      sub_184CE1520(0, v13, v65, v214);
      double v66 = v30;
      uint64_t v19 = v208;
      sub_184CE1654(0, v13, v66, v42);
      goto LABEL_45;
    }
LABEL_231:
    __break(1u);
LABEL_232:
    __break(1u);
LABEL_233:
    __break(1u);
LABEL_234:
    __break(1u);
LABEL_235:
    __break(1u);
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
LABEL_239:
    __break(1u);
LABEL_240:
    __break(1u);
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }
  uint64_t v41 = sub_184C9D670(v32, v213);
  swift_release();
  void *v209 = v41;
  unint64_t v42 = v214;
  if ((v214 & 0x8000000000000000) != 0) {
    goto LABEL_231;
  }
  uint64_t v43 = sub_184C9D670(v25, v214);
  swift_release();
  uint64_t v44 = v210;
  uint64_t *v210 = (uint64_t)v43;
  double v45 = (char *)sub_184CE1788(v30, v42);
  swift_release();
  uint64_t v19 = v208;
  *uint64_t v208 = v45;
LABEL_45:
  uint64_t v67 = v40 - v211;
  if (v40 == v211) {
    goto LABEL_57;
  }
  uint64_t v68 = *v19;
  unint64_t v69 = *((void *)*v19 + 2);
  if (v69 < v42) {
    goto LABEL_247;
  }
  if (v42 == v69) {
    goto LABEL_57;
  }
  if (v42 >= v69)
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v68 = sub_184D01D8C((uint64_t)v68);
  }
  do
  {
    if (v42 >= *((void *)v68 + 2))
    {
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
      goto LABEL_226;
    }
    uint64_t v70 = &v68[4 * v42];
    uint64_t v71 = *((unsigned int *)v70 + 8);
    BOOL v72 = __OFADD__(v71, v67);
    unint64_t v73 = v71 + v67;
    if (v72) {
      goto LABEL_211;
    }
    if ((v73 & 0x8000000000000000) != 0) {
      goto LABEL_212;
    }
    if (HIDWORD(v73)) {
      goto LABEL_213;
    }
    ++v42;
    *((_DWORD *)v70 + 8) = v73;
  }
  while (v69 != v42);
  *uint64_t v19 = v68;
LABEL_57:
  uint64_t v74 = v38;
LABEL_203:
  uint64_t v197 = *v44;
  if (!*(void *)(*v44 + 16))
  {
    uint64_t v74 = 0x7FF8000000000000;
    uint64_t v200 = 0x7FF8000000000000;
    uint64_t v201 = 0x7FF8000000000000;
    uint64_t v202 = 0x7FF8000000000000;
LABEL_209:
    *(void *)uint64_t v2 = v200;
    *((void *)v2 + 1) = v201;
    *((void *)v2 + 2) = v202;
    *((void *)v2 + 3) = v74;
    return sub_184CEB9B4();
  }
  uint64_t v219 = v35;
  uint64_t v220 = v36;
  uint64_t v221 = v37;
  uint64_t v222 = v74;
  uint64_t v223 = v197;
  long long v224 = *(_OWORD *)v19;
  sub_184CEB628();
  if (!*(void *)(v197 + 16)) {
    goto LABEL_228;
  }
  uint64_t v200 = v198;
  uint64_t v201 = v199;
  uint64_t v202 = *(void *)(v197 + 32);
  if (v13 != v212) {
    goto LABEL_209;
  }
  uint64_t result = sub_184CE1444(v197);
  if ((v204 & 1) == 0)
  {
    uint64_t v74 = result;
    goto LABEL_209;
  }
  __break(1u);
  return result;
}

uint64_t Region.apply<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v258 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(v3 + 48);
  BOOL v9 = (uint64_t *)(v3 + 32);
  long long v10 = *(_OWORD *)(v3 + 32);
  long long v11 = *(_OWORD *)(v3 + 16);
  BOOL v12 = (*(void *)v3 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)v3 & 0x7FF0000000000000) != 0;
  __n128 v253 = *(__n128 *)v3;
  long long v254 = v11;
  BOOL v13 = *(void *)(v10 + 16) == 0;
  BOOL v14 = !v12 || !v13;
  if (v12 && v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)(v10 + 16);
  }
  if (v14) {
    unint64_t v16 = *(void *)(v10 + 16);
  }
  else {
    unint64_t v16 = 2;
  }
  *(_OWORD *)uint64_t v255 = v10;
  *(void *)&v255[16] = v8;
  if (v12 && v15 == 0) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = v15;
  }
  uint64_t v18 = sub_184CE293C(0, v17);
  uint64_t isStackAllocationSafe = sub_184CEB8F0();
  uint64_t v21 = *(void *)(v3 + 40);
  unint64_t v22 = *(void *)(v21 + 16);
  uint64_t v248 = a1;
  if (v16)
  {
    if (v16 - 1 >= v22)
    {
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
      goto LABEL_225;
    }
    int64_t v247 = *(unsigned int *)(v21 + 4 * (v16 - 1) + 32);
  }
  else
  {
    int64_t v247 = 0;
  }
  unint64_t v23 = v16 * v18;
  if ((unsigned __int128)((uint64_t)v16 * (__int128)v18) >> 64 != (uint64_t)(v16 * v18) >> 63)
  {
LABEL_222:
    __break(1u);
    goto LABEL_223;
  }
  if (v16 >> 60)
  {
LABEL_225:
    __break(1u);
    goto LABEL_226;
  }
  uint64_t v249 = (char **)(v3 + 40);
  unint64_t v244 = v22;
  unint64_t v245 = (void *)(v3 + 48);
  uint64_t v246 = a3;
  uint64_t v243 = a2;
  if ((uint64_t)(8 * v16) >= 1025)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t v250 = (char *)v49;
      if (v16 >> 61) {
        goto LABEL_250;
      }
      uint64_t v242 = (void *)(v3 + 32);
      if (uint64_t)(4 * v16) < 1025 || (uint64_t v49 = swift_stdlib_isStackAllocationSafe(), (v49))
      {
        uint64_t v51 = MEMORY[0x1F4188790](v49, v50);
        uint64_t v55 = (char *)&v239 - v54;
        if ((v23 & 0x8000000000000000) != 0)
        {
LABEL_256:
          __break(1u);
          goto LABEL_257;
        }
        if ((v23 + 0x1000000000000000) >> 61)
        {
LABEL_257:
          __break(1u);
          goto LABEL_258;
        }
        unint64_t v241 = v52;
        if (uint64_t)(8 * v23) < 1025 || (uint64_t v51 = swift_stdlib_isStackAllocationSafe(), (v51))
        {
          uint64_t v240 = &v239;
          uint64_t v56 = MEMORY[0x1F4188790](v51, v53);
          uint64_t v58 = (char *)&v239 - v57;
          uint64_t v251 = 0;
          unint64_t v252 = 0;
          uint64_t v60 = *(void *)(v4 + 40);
          uint64_t v59 = *(void *)(v4 + 48);
          uint64_t v61 = *(void *)(v4 + 32);
          uint64_t v256 = v59 + 32;
          uint64_t v257 = 0;
          long long v62 = *(_OWORD *)(v4 + 16);
          __n128 v253 = *(__n128 *)v4;
          long long v254 = v62;
          *(void *)uint64_t v255 = v61;
          *(void *)&v255[8] = v60;
          *(void *)&v255[16] = v59;
          MEMORY[0x1F4188790](v56, v253);
          uint64_t v227 = (uint64_t)v58;
          unint64_t v228 = v16 * v18;
          uint64_t v229 = &v251;
          unint64_t v230 = v16 * v18;
          char v231 = 1;
          uint64_t v232 = &v256;
          uint64_t v233 = v250;
          unint64_t v234 = v16;
          uint64_t v235 = (uint64_t *)&v252;
          uint64_t v236 = (uint64_t *)v55;
          unint64_t v237 = v16;
          uint64_t v238 = 0;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184CFECF4((uint64_t *)&v253, (uint64_t)sub_184D02564, (uint64_t)v226, v248, v243, v246);
          swift_release_n();
          swift_release();
          swift_release();
          uint64_t v63 = v251;
          if (v251 < 0)
          {
LABEL_244:
            __break(1u);
            goto LABEL_245;
          }
          unint64_t v40 = v244;
          uint64_t v64 = v249;
          int64_t v65 = v247;
          if (v16 == v244)
          {
            double v66 = sub_184C9D670(v58, v251);
            uint64_t v67 = v245;
            swift_release();
            void *v67 = v66;
            unint64_t v68 = v252;
            if ((v252 & 0x8000000000000000) == 0)
            {
              unint64_t v69 = sub_184C9D670(v250, v252);
              unint64_t v70 = v16;
              uint64_t v71 = v242;
              swift_release();
              *uint64_t v71 = v69;
              unint64_t v16 = v70;
              BOOL v72 = (char *)sub_184CE1788(v55, v68);
              swift_release();
              *uint64_t v64 = v72;
              goto LABEL_74;
            }
          }
          else
          {
            sub_184CE1520(0, v247, v58, v251);
            unint64_t v68 = v252;
            if ((v252 & 0x8000000000000000) == 0)
            {
              sub_184CE1520(0, v16, v250, v252);
              sub_184CE1654(0, v16, v55, v68);
LABEL_74:
              uint64_t v112 = v63 - v65;
              BOOL v9 = v242;
              if (v63 != v65)
              {
                unint64_t v113 = *v64;
                unint64_t v114 = *((void *)*v64 + 2);
                if (v114 < v68)
                {
LABEL_260:
                  __break(1u);
                  goto LABEL_261;
                }
                if (v68 != v114)
                {
                  if (v68 >= v114)
                  {
LABEL_269:
                    __break(1u);
                    goto LABEL_270;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    unint64_t v113 = sub_184D01D8C((uint64_t)v113);
                  }
                  do
                  {
                    if (v68 >= *((void *)v113 + 2)) {
                      goto LABEL_210;
                    }
                    uint64_t v115 = &v113[4 * v68];
                    uint64_t v116 = *((unsigned int *)v115 + 8);
                    BOOL v78 = __OFADD__(v116, v112);
                    unint64_t v117 = v116 + v112;
                    if (v78) {
                      goto LABEL_213;
                    }
                    if ((v117 & 0x8000000000000000) != 0) {
                      goto LABEL_216;
                    }
                    if (HIDWORD(v117)) {
                      goto LABEL_219;
                    }
                    ++v68;
                    *((_DWORD *)v115 + 8) = v117;
                  }
                  while (v114 != v68);
                  *uint64_t v64 = v113;
                }
              }
LABEL_197:
              MEMORY[0x18532B810](v250, -1, -1);
              goto LABEL_198;
            }
          }
LABEL_247:
          __break(1u);
          goto LABEL_248;
        }
        uint64_t v149 = (const void *)swift_slowAlloc();
        uint64_t v251 = 0;
        unint64_t v252 = 0;
        uint64_t v151 = *(void *)(v3 + 40);
        uint64_t v150 = *(void *)(v3 + 48);
        uint64_t v152 = *(void *)(v3 + 32);
        uint64_t v256 = v150 + 32;
        uint64_t v257 = 0;
        long long v153 = *(_OWORD *)(v4 + 16);
        __n128 v253 = *(__n128 *)v4;
        long long v254 = v153;
        *(void *)uint64_t v255 = v152;
        *(void *)&v255[8] = v151;
        *(void *)&v255[16] = v150;
        uint64_t v227 = MEMORY[0x1F4188790](v149, v253);
        unint64_t v228 = v16 * v18;
        uint64_t v229 = &v251;
        unint64_t v230 = v16 * v18;
        char v231 = 1;
        uint64_t v232 = &v256;
        uint64_t v233 = v250;
        unint64_t v234 = v16;
        uint64_t v235 = (uint64_t *)&v252;
        uint64_t v236 = (uint64_t *)v55;
        unint64_t v237 = v16;
        uint64_t v238 = 0;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CFECF4((uint64_t *)&v253, (uint64_t)sub_184D02564, (uint64_t)v226, v248, v243, v246);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v154 = v251;
        if (v251 < 0)
        {
LABEL_264:
          __break(1u);
          goto LABEL_265;
        }
        unint64_t v40 = v244;
        int64_t v155 = v247;
        if (v16 == v244)
        {
          unint64_t v156 = sub_184C9D670(v149, v251);
          uint64_t v157 = v245;
          swift_release();
          *uint64_t v157 = v156;
          unint64_t v158 = v252;
          if ((v252 & 0x8000000000000000) == 0)
          {
            uint64_t v159 = sub_184C9D670(v250, v252);
            unint64_t v160 = v16;
            unint64_t v161 = v242;
            swift_release();
            *unint64_t v161 = v159;
            unint64_t v16 = v160;
            unint64_t v162 = (char *)sub_184CE1788(v55, v158);
            uint64_t v163 = v249;
            swift_release();
            *uint64_t v163 = v162;
LABEL_149:
            uint64_t v183 = v154 - v155;
            BOOL v9 = v242;
            if (v154 != v155)
            {
              BOOL v184 = *v249;
              unint64_t v185 = *((void *)*v249 + 2);
              if (v185 < v158)
              {
LABEL_275:
                __break(1u);
                goto LABEL_276;
              }
              if (v158 != v185)
              {
                if (v158 >= v185)
                {
LABEL_280:
                  __break(1u);
                  goto LABEL_281;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  BOOL v184 = sub_184D01D8C((uint64_t)v184);
                }
                do
                {
                  if (v158 >= *((void *)v184 + 2)) {
                    goto LABEL_230;
                  }
                  uint64_t v186 = &v184[4 * v158];
                  uint64_t v187 = *((unsigned int *)v186 + 8);
                  BOOL v78 = __OFADD__(v187, v183);
                  unint64_t v188 = v187 + v183;
                  if (v78) {
                    goto LABEL_233;
                  }
                  if ((v188 & 0x8000000000000000) != 0) {
                    goto LABEL_236;
                  }
                  if (HIDWORD(v188)) {
                    goto LABEL_239;
                  }
                  ++v158;
                  *((_DWORD *)v186 + 8) = v188;
                }
                while (v185 != v158);
                *uint64_t v249 = v184;
              }
            }
            MEMORY[0x18532B810](v149, -1, -1);
            goto LABEL_197;
          }
        }
        else
        {
          sub_184CE1520(0, v247, v149, v251);
          unint64_t v158 = v252;
          if ((v252 & 0x8000000000000000) == 0)
          {
            sub_184CE1520(0, v16, v250, v252);
            sub_184CE1654(0, v16, v55, v158);
            goto LABEL_149;
          }
        }
LABEL_267:
        __break(1u);
        goto LABEL_268;
      }
      uint64_t v128 = swift_slowAlloc();
      unint64_t v241 = (uint64_t *)v128;
      if ((v23 & 0x8000000000000000) != 0)
      {
LABEL_272:
        __break(1u);
        goto LABEL_273;
      }
      if ((v23 + 0x1000000000000000) >> 61)
      {
LABEL_273:
        __break(1u);
        goto LABEL_274;
      }
      uint64_t v130 = a2;
      if (uint64_t)(8 * v23) < 1025 || (uint64_t v128 = swift_stdlib_isStackAllocationSafe(), (v128))
      {
        uint64_t v240 = &v239;
        uint64_t v131 = MEMORY[0x1F4188790](v128, v129);
        uint64_t v133 = (char *)&v239 - v132;
        uint64_t v251 = 0;
        unint64_t v252 = 0;
        uint64_t v135 = *(void *)(v4 + 40);
        uint64_t v134 = *(void *)(v4 + 48);
        uint64_t v136 = *(void *)(v4 + 32);
        uint64_t v256 = v134 + 32;
        uint64_t v257 = 0;
        long long v137 = *(_OWORD *)(v4 + 16);
        __n128 v253 = *(__n128 *)v4;
        long long v254 = v137;
        *(void *)uint64_t v255 = v136;
        *(void *)&v255[8] = v135;
        *(void *)&v255[16] = v134;
        MEMORY[0x1F4188790](v131, v253);
        uint64_t v227 = (uint64_t)v133;
        unint64_t v228 = v16 * v18;
        uint64_t v229 = &v251;
        unint64_t v230 = v16 * v18;
        char v231 = 1;
        uint64_t v232 = &v256;
        uint64_t v233 = v250;
        unint64_t v234 = v16;
        uint64_t v235 = (uint64_t *)&v252;
        uint64_t v236 = v241;
        unint64_t v237 = v16;
        uint64_t v238 = 0;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CFECF4((uint64_t *)&v253, (uint64_t)sub_184D02564, (uint64_t)v226, v248, v130, v246);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v138 = v251;
        if (v251 < 0)
        {
LABEL_263:
          __break(1u);
          goto LABEL_264;
        }
        unint64_t v40 = v244;
        uint64_t v139 = v249;
        int64_t v140 = v247;
        if (v16 == v244)
        {
          unint64_t v141 = sub_184C9D670(v133, v251);
          uint64_t v142 = v245;
          swift_release();
          *uint64_t v142 = v141;
          unint64_t v143 = v252;
          if ((v252 & 0x8000000000000000) == 0)
          {
            unint64_t v144 = sub_184C9D670(v250, v252);
            unint64_t v145 = v16;
            uint64_t v146 = v242;
            swift_release();
            *uint64_t v146 = v144;
            unint64_t v16 = v145;
            uint64_t v147 = (char *)sub_184CE1788(v241, v143);
            swift_release();
            *uint64_t v139 = v147;
            uint64_t v148 = v138 - v140;
            if (v138 == v140)
            {
LABEL_196:
              MEMORY[0x18532B810](v241, -1, -1);
              BOOL v9 = v242;
              goto LABEL_197;
            }
LABEL_135:
            unint64_t v178 = *v139;
            unint64_t v179 = *((void *)*v139 + 2);
            if (v179 < v143)
            {
LABEL_274:
              __break(1u);
              goto LABEL_275;
            }
            if (v143 != v179)
            {
              if (v143 >= v179)
              {
LABEL_279:
                __break(1u);
                goto LABEL_280;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v178 = sub_184D01D8C((uint64_t)v178);
              }
              do
              {
                if (v143 >= *((void *)v178 + 2)) {
                  goto LABEL_229;
                }
                uint64_t v180 = &v178[4 * v143];
                uint64_t v181 = *((unsigned int *)v180 + 8);
                BOOL v78 = __OFADD__(v181, v148);
                unint64_t v182 = v181 + v148;
                if (v78) {
                  goto LABEL_232;
                }
                if ((v182 & 0x8000000000000000) != 0) {
                  goto LABEL_235;
                }
                if (HIDWORD(v182)) {
                  goto LABEL_238;
                }
                ++v143;
                *((_DWORD *)v180 + 8) = v182;
              }
              while (v179 != v143);
              *uint64_t v139 = v178;
            }
            goto LABEL_196;
          }
        }
        else
        {
          sub_184CE1520(0, v247, v133, v251);
          unint64_t v143 = v252;
          if ((v252 & 0x8000000000000000) == 0)
          {
            sub_184CE1520(0, v16, v250, v252);
            sub_184CE1654(0, v16, v241, v143);
            uint64_t v148 = v138 - v140;
            if (v138 == v140) {
              goto LABEL_196;
            }
            goto LABEL_135;
          }
        }
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
      unint64_t v194 = (const void *)swift_slowAlloc();
      uint64_t v251 = 0;
      unint64_t v252 = 0;
      uint64_t v196 = *(void *)(v3 + 40);
      uint64_t v195 = *(void *)(v3 + 48);
      uint64_t v197 = *(void *)(v3 + 32);
      uint64_t v256 = v195 + 32;
      uint64_t v257 = 0;
      long long v198 = *(_OWORD *)(v4 + 16);
      __n128 v253 = *(__n128 *)v4;
      long long v254 = v198;
      *(void *)uint64_t v255 = v197;
      *(void *)&v255[8] = v196;
      *(void *)&v255[16] = v195;
      uint64_t v227 = MEMORY[0x1F4188790](v194, v253);
      unint64_t v228 = v16 * v18;
      uint64_t v229 = &v251;
      unint64_t v230 = v16 * v18;
      char v231 = 1;
      uint64_t v232 = &v256;
      uint64_t v233 = v250;
      unint64_t v234 = v16;
      uint64_t v235 = (uint64_t *)&v252;
      uint64_t v236 = v241;
      unint64_t v237 = v16;
      uint64_t v238 = 0;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184CFECF4((uint64_t *)&v253, (uint64_t)sub_184D02564, (uint64_t)v226, v248, v130, v246);
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v199 = v251;
      if (v251 < 0)
      {
LABEL_277:
        __break(1u);
        goto LABEL_278;
      }
      unint64_t v40 = v244;
      int64_t v200 = v247;
      if (v16 == v244)
      {
        uint64_t v201 = sub_184C9D670(v194, v251);
        uint64_t v202 = v245;
        swift_release();
        *uint64_t v202 = v201;
        unint64_t v203 = v252;
        if ((v252 & 0x8000000000000000) == 0)
        {
          char v204 = sub_184C9D670(v250, v252);
          unint64_t v205 = v16;
          uint64_t v206 = v242;
          swift_release();
          void *v206 = v204;
          unint64_t v16 = v205;
          uint64_t v207 = (char *)sub_184CE1788(v241, v203);
          uint64_t v208 = v249;
          swift_release();
          *uint64_t v208 = v207;
LABEL_183:
          uint64_t v209 = v199 - v200;
          if (v199 != v200)
          {
            uint64_t v210 = *v249;
            unint64_t v211 = *((void *)*v249 + 2);
            if (v211 < v203)
            {
LABEL_282:
              __break(1u);
LABEL_283:
              __break(1u);
            }
            if (v203 != v211)
            {
              if (v203 >= v211) {
                goto LABEL_283;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v210 = sub_184D01D8C((uint64_t)v210);
              }
              do
              {
                if (v203 >= *((void *)v210 + 2)) {
                  goto LABEL_251;
                }
                unint64_t v212 = &v210[4 * v203];
                uint64_t v213 = *((unsigned int *)v212 + 8);
                BOOL v78 = __OFADD__(v213, v209);
                unint64_t v214 = v213 + v209;
                if (v78) {
                  goto LABEL_252;
                }
                if ((v214 & 0x8000000000000000) != 0) {
                  goto LABEL_253;
                }
                if (HIDWORD(v214)) {
                  goto LABEL_254;
                }
                ++v203;
                *((_DWORD *)v212 + 8) = v214;
              }
              while (v211 != v203);
              *uint64_t v249 = v210;
            }
          }
          MEMORY[0x18532B810](v194, -1, -1);
          goto LABEL_196;
        }
      }
      else
      {
        sub_184CE1520(0, v247, v194, v251);
        unint64_t v203 = v252;
        if ((v252 & 0x8000000000000000) == 0)
        {
          sub_184CE1520(0, v16, v250, v252);
          sub_184CE1654(0, v16, v241, v203);
          goto LABEL_183;
        }
      }
LABEL_278:
      __break(1u);
      goto LABEL_279;
    }
  }
  uint64_t v24 = MEMORY[0x1F4188790](isStackAllocationSafe, v20);
  uint64_t v250 = (char *)&v239 - v26;
  if (v16 >> 61) {
    goto LABEL_228;
  }
  unint64_t v241 = &v239;
  if ((uint64_t)(4 * v16) >= 1025)
  {
    uint64_t v24 = swift_stdlib_isStackAllocationSafe();
    if ((v24 & 1) == 0)
    {
      uint64_t v80 = swift_slowAlloc();
      uint64_t v242 = (void *)v80;
      if ((v23 & 0x8000000000000000) != 0)
      {
LABEL_258:
        __break(1u);
        goto LABEL_259;
      }
      if ((v23 + 0x1000000000000000) >> 61)
      {
LABEL_259:
        __break(1u);
        goto LABEL_260;
      }
      if (uint64_t)(8 * v23) < 1025 || (uint64_t v80 = swift_stdlib_isStackAllocationSafe(), (v80))
      {
        uint64_t v240 = &v239;
        uint64_t v82 = MEMORY[0x1F4188790](v80, v81);
        unint64_t v84 = (char *)&v239 - v83;
        uint64_t v251 = 0;
        unint64_t v252 = 0;
        uint64_t v86 = *(void *)(v4 + 40);
        uint64_t v85 = *(void *)(v4 + 48);
        uint64_t v87 = *(void *)(v4 + 32);
        uint64_t v256 = v85 + 32;
        uint64_t v257 = 0;
        long long v88 = *(_OWORD *)(v4 + 16);
        __n128 v253 = *(__n128 *)v4;
        long long v254 = v88;
        *(void *)uint64_t v255 = v87;
        *(void *)&v255[8] = v86;
        *(void *)&v255[16] = v85;
        MEMORY[0x1F4188790](v82, v253);
        uint64_t v227 = (uint64_t)v84;
        unint64_t v228 = v16 * v18;
        uint64_t v229 = &v251;
        unint64_t v230 = v16 * v18;
        char v231 = 1;
        uint64_t v232 = &v256;
        uint64_t v233 = v250;
        unint64_t v234 = v16;
        uint64_t v235 = (uint64_t *)&v252;
        uint64_t v236 = v242;
        unint64_t v237 = v16;
        uint64_t v238 = 0;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184CFECF4((uint64_t *)&v253, (uint64_t)sub_184D02564, (uint64_t)v226, v248, v243, v246);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v89 = v251;
        if (v251 < 0)
        {
LABEL_245:
          __break(1u);
          goto LABEL_246;
        }
        unint64_t v40 = v244;
        uint64_t v90 = v249;
        int64_t v91 = v247;
        if (v16 == v244)
        {
          uint64_t v92 = sub_184C9D670(v84, v251);
          BOOL v93 = v245;
          swift_release();
          *BOOL v93 = v92;
          unint64_t v94 = v252;
          if ((v252 & 0x8000000000000000) == 0)
          {
            uint64_t v95 = sub_184C9D670(v250, v252);
            swift_release();
            *BOOL v9 = (uint64_t)v95;
            unint64_t v96 = (char *)sub_184CE1788(v242, v94);
            swift_release();
            *uint64_t v90 = v96;
            uint64_t v97 = v89 - v91;
            if (!v97) {
              goto LABEL_176;
            }
            goto LABEL_89;
          }
        }
        else
        {
          sub_184CE1520(0, v247, v84, v251);
          unint64_t v94 = v252;
          if ((v252 & 0x8000000000000000) == 0)
          {
            sub_184CE1520(0, v16, v250, v252);
            sub_184CE1654(0, v16, v242, v94);
            uint64_t v97 = v89 - v91;
            if (!v97) {
              goto LABEL_176;
            }
LABEL_89:
            unint64_t v118 = *v90;
            unint64_t v119 = *((void *)*v90 + 2);
            if (v119 < v94)
            {
LABEL_261:
              __break(1u);
              goto LABEL_262;
            }
            if (v94 != v119)
            {
              if (v94 >= v119)
              {
LABEL_270:
                __break(1u);
                goto LABEL_271;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v118 = sub_184D01D8C((uint64_t)v118);
              }
              do
              {
                if (v94 >= *((void *)v118 + 2)) {
                  goto LABEL_211;
                }
                uint64_t v120 = &v118[4 * v94];
                uint64_t v121 = *((unsigned int *)v120 + 8);
                BOOL v78 = __OFADD__(v121, v97);
                unint64_t v122 = v121 + v97;
                if (v78) {
                  goto LABEL_214;
                }
                if ((v122 & 0x8000000000000000) != 0) {
                  goto LABEL_217;
                }
                if (HIDWORD(v122)) {
                  goto LABEL_220;
                }
                ++v94;
                *((_DWORD *)v120 + 8) = v122;
              }
              while (v119 != v94);
              *uint64_t v90 = v118;
            }
LABEL_176:
            MEMORY[0x18532B810](v242, -1, -1);
            goto LABEL_198;
          }
        }
LABEL_248:
        __break(1u);
        goto LABEL_249;
      }
      unint64_t v164 = (const void *)swift_slowAlloc();
      uint64_t v251 = 0;
      unint64_t v252 = 0;
      uint64_t v166 = *(void *)(v3 + 40);
      uint64_t v165 = *(void *)(v3 + 48);
      uint64_t v167 = *(void *)(v3 + 32);
      uint64_t v256 = v165 + 32;
      uint64_t v257 = 0;
      long long v168 = *(_OWORD *)(v4 + 16);
      __n128 v253 = *(__n128 *)v4;
      long long v254 = v168;
      *(void *)uint64_t v255 = v167;
      *(void *)&v255[8] = v166;
      *(void *)&v255[16] = v165;
      uint64_t v227 = MEMORY[0x1F4188790](v164, v253);
      unint64_t v228 = v16 * v18;
      uint64_t v229 = &v251;
      unint64_t v230 = v16 * v18;
      char v231 = 1;
      uint64_t v232 = &v256;
      uint64_t v233 = v250;
      unint64_t v234 = v16;
      uint64_t v235 = (uint64_t *)&v252;
      uint64_t v236 = v242;
      unint64_t v237 = v16;
      uint64_t v238 = 0;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184CFECF4((uint64_t *)&v253, (uint64_t)sub_184D02564, (uint64_t)v226, v248, v243, v246);
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v169 = v251;
      if (v251 < 0)
      {
LABEL_265:
        __break(1u);
        goto LABEL_266;
      }
      unint64_t v40 = v244;
      int64_t v170 = v247;
      if (v16 == v244)
      {
        unint64_t v171 = sub_184C9D670(v164, v251);
        uint64_t v172 = v245;
        swift_release();
        *uint64_t v172 = v171;
        unint64_t v173 = v252;
        if ((v252 & 0x8000000000000000) == 0)
        {
          double v174 = sub_184C9D670(v250, v252);
          swift_release();
          *BOOL v9 = (uint64_t)v174;
          unint64_t v175 = (char *)sub_184CE1788(v242, v173);
          uint64_t v176 = v249;
          swift_release();
          char *v176 = v175;
          uint64_t v177 = v169 - v170;
          if (v169 == v170) {
            goto LABEL_175;
          }
          goto LABEL_164;
        }
      }
      else
      {
        sub_184CE1520(0, v247, v164, v251);
        unint64_t v173 = v252;
        if ((v252 & 0x8000000000000000) == 0)
        {
          sub_184CE1520(0, v16, v250, v252);
          sub_184CE1654(0, v16, v242, v173);
          uint64_t v177 = v169 - v170;
          if (v169 == v170)
          {
LABEL_175:
            MEMORY[0x18532B810](v164, -1, -1);
            goto LABEL_176;
          }
LABEL_164:
          uint64_t v189 = *v249;
          unint64_t v190 = *((void *)*v249 + 2);
          if (v190 < v173)
          {
LABEL_276:
            __break(1u);
            goto LABEL_277;
          }
          if (v173 != v190)
          {
            if (v173 >= v190)
            {
LABEL_281:
              __break(1u);
              goto LABEL_282;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v189 = sub_184D01D8C((uint64_t)v189);
            }
            do
            {
              if (v173 >= *((void *)v189 + 2)) {
                goto LABEL_231;
              }
              uint64_t v191 = &v189[4 * v173];
              uint64_t v192 = *((unsigned int *)v191 + 8);
              BOOL v78 = __OFADD__(v192, v177);
              unint64_t v193 = v192 + v177;
              if (v78) {
                goto LABEL_234;
              }
              if ((v193 & 0x8000000000000000) != 0) {
                goto LABEL_237;
              }
              if (HIDWORD(v193)) {
                goto LABEL_240;
              }
              ++v173;
              *((_DWORD *)v191 + 8) = v193;
            }
            while (v190 != v173);
            *uint64_t v249 = v189;
          }
          goto LABEL_175;
        }
      }
LABEL_268:
      __break(1u);
      goto LABEL_269;
    }
  }
  uint64_t v240 = &v239;
  uint64_t v27 = MEMORY[0x1F4188790](v24, v25);
  double v30 = (char *)&v239 - v29;
  if ((v23 & 0x8000000000000000) != 0)
  {
LABEL_241:
    __break(1u);
    goto LABEL_242;
  }
  if ((v23 + 0x1000000000000000) >> 61)
  {
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }
  if ((uint64_t)(8 * v23) >= 1025)
  {
    uint64_t v27 = swift_stdlib_isStackAllocationSafe();
    if ((v27 & 1) == 0)
    {
      uint64_t v98 = swift_slowAlloc();
      uint64_t v251 = 0;
      unint64_t v252 = 0;
      uint64_t v100 = *(void *)(v3 + 40);
      uint64_t v99 = *(void *)(v3 + 48);
      uint64_t v101 = *(void *)(v3 + 32);
      uint64_t v256 = v99 + 32;
      uint64_t v257 = 0;
      long long v102 = *(_OWORD *)(v4 + 16);
      __n128 v253 = *(__n128 *)v4;
      long long v254 = v102;
      *(void *)uint64_t v255 = v101;
      *(void *)&v255[8] = v100;
      *(void *)&v255[16] = v99;
      uint64_t v242 = (void *)MEMORY[0x1F4188790](v98, v253);
      uint64_t v227 = (uint64_t)v242;
      unint64_t v228 = v16 * v18;
      uint64_t v229 = &v251;
      unint64_t v230 = v16 * v18;
      char v231 = 1;
      uint64_t v232 = &v256;
      uint64_t v233 = v250;
      unint64_t v234 = v16;
      uint64_t v235 = (uint64_t *)&v252;
      uint64_t v236 = (uint64_t *)v30;
      unint64_t v237 = v16;
      uint64_t v238 = 0;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184CFECF4((uint64_t *)&v253, (uint64_t)sub_184D02564, (uint64_t)v226, v248, v243, v246);
      swift_release_n();
      swift_release();
      swift_release();
      uint64_t v103 = v251;
      if (v251 < 0)
      {
LABEL_246:
        __break(1u);
        goto LABEL_247;
      }
      unint64_t v40 = v244;
      int64_t v104 = v247;
      if (v16 == v244)
      {
        uint64_t v105 = sub_184C9D670(v242, v251);
        unint64_t v106 = v245;
        swift_release();
        *unint64_t v106 = v105;
        unint64_t v107 = v252;
        if ((v252 & 0x8000000000000000) == 0)
        {
          uint64_t v108 = sub_184C9D670(v250, v252);
          swift_release();
          *BOOL v9 = (uint64_t)v108;
          double v109 = (char *)sub_184CE1788(v30, v107);
          unint64_t v110 = v249;
          swift_release();
          *unint64_t v110 = v109;
          uint64_t v111 = v103 - v104;
          if (v103 == v104) {
            goto LABEL_176;
          }
          goto LABEL_103;
        }
      }
      else
      {
        sub_184CE1520(0, v247, v242, v251);
        unint64_t v107 = v252;
        if ((v252 & 0x8000000000000000) == 0)
        {
          sub_184CE1520(0, v16, v250, v252);
          unint64_t v110 = v249;
          sub_184CE1654(0, v16, v30, v107);
          uint64_t v111 = v103 - v104;
          if (v103 == v104) {
            goto LABEL_176;
          }
LABEL_103:
          __n128 v123 = *v110;
          unint64_t v124 = *((void *)*v110 + 2);
          if (v124 < v107)
          {
LABEL_262:
            __break(1u);
            goto LABEL_263;
          }
          if (v107 != v124)
          {
            if (v107 >= v124)
            {
LABEL_271:
              __break(1u);
              goto LABEL_272;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              __n128 v123 = sub_184D01D8C((uint64_t)v123);
            }
            do
            {
              if (v107 >= *((void *)v123 + 2)) {
                goto LABEL_212;
              }
              uint64_t v125 = &v123[4 * v107];
              uint64_t v126 = *((unsigned int *)v125 + 8);
              BOOL v78 = __OFADD__(v126, v111);
              unint64_t v127 = v126 + v111;
              if (v78) {
                goto LABEL_215;
              }
              if ((v127 & 0x8000000000000000) != 0) {
                goto LABEL_218;
              }
              if (HIDWORD(v127)) {
                goto LABEL_221;
              }
              ++v107;
              *((_DWORD *)v125 + 8) = v127;
            }
            while (v124 != v107);
            *unint64_t v110 = v123;
          }
          goto LABEL_176;
        }
      }
LABEL_249:
      __break(1u);
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
      goto LABEL_255;
    }
  }
  uint64_t v242 = (void *)(v3 + 32);
  uint64_t v239 = (uint64_t)&v239;
  uint64_t v31 = MEMORY[0x1F4188790](v27, v28);
  uint64_t v33 = (char *)&v239 - v32;
  uint64_t v251 = 0;
  unint64_t v252 = 0;
  uint64_t v35 = *(void *)(v4 + 40);
  uint64_t v34 = *(void *)(v4 + 48);
  uint64_t v36 = *(void *)(v4 + 32);
  uint64_t v256 = v34 + 32;
  uint64_t v257 = 0;
  long long v37 = *(_OWORD *)(v4 + 16);
  __n128 v253 = *(__n128 *)v4;
  long long v254 = v37;
  *(void *)uint64_t v255 = v36;
  *(void *)&v255[8] = v35;
  *(void *)&v255[16] = v34;
  MEMORY[0x1F4188790](v31, v253);
  uint64_t v227 = (uint64_t)v33;
  unint64_t v228 = v23;
  uint64_t v229 = &v251;
  unint64_t v230 = v23;
  char v231 = 1;
  uint64_t v232 = &v256;
  uint64_t v233 = v250;
  unint64_t v234 = v16;
  uint64_t v235 = (uint64_t *)&v252;
  uint64_t v236 = (uint64_t *)v30;
  unint64_t v237 = v16;
  uint64_t v238 = 0;
  swift_retain_n();
  swift_retain();
  swift_retain();
  sub_184CFECF4((uint64_t *)&v253, (uint64_t)sub_184D02564, (uint64_t)v226, v248, v243, v246);
  swift_release_n();
  swift_release();
  swift_release();
  uint64_t v38 = v251;
  if (v251 < 0)
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  unint64_t v39 = v16;
  unint64_t v40 = v244;
  if (v16 != v244)
  {
    int64_t v73 = v247;
    sub_184CE1520(0, v247, v33, v251);
    unint64_t v43 = v252;
    BOOL v9 = v242;
    if ((v252 & 0x8000000000000000) == 0)
    {
      sub_184CE1520(0, v16, v250, v252);
      __n128 v47 = v249;
      sub_184CE1654(0, v16, v30, v43);
      uint64_t v48 = v38 - v73;
      if (v38 == v73) {
        goto LABEL_198;
      }
      goto LABEL_46;
    }
LABEL_227:
    __break(1u);
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    __break(1u);
LABEL_231:
    __break(1u);
LABEL_232:
    __break(1u);
LABEL_233:
    __break(1u);
LABEL_234:
    __break(1u);
LABEL_235:
    __break(1u);
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
LABEL_239:
    __break(1u);
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }
  uint64_t v41 = sub_184C9D670(v33, v251);
  unint64_t v42 = v245;
  swift_release();
  *unint64_t v42 = v41;
  unint64_t v43 = v252;
  BOOL v9 = v242;
  int64_t v44 = v247;
  if ((v252 & 0x8000000000000000) != 0) {
    goto LABEL_227;
  }
  double v45 = sub_184C9D670(v250, v252);
  swift_release();
  *BOOL v9 = (uint64_t)v45;
  uint64_t v46 = (char *)sub_184CE1788(v30, v43);
  __n128 v47 = v249;
  swift_release();
  *__n128 v47 = v46;
  unint64_t v16 = v39;
  uint64_t v48 = v38 - v44;
  if (v38 == v44) {
    goto LABEL_198;
  }
LABEL_46:
  uint64_t v74 = *v47;
  unint64_t v75 = *((void *)*v47 + 2);
  if (v75 < v43)
  {
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }
  if (v43 == v75) {
    goto LABEL_198;
  }
  if (v43 >= v75)
  {
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v74 = sub_184D01D8C((uint64_t)v74);
  }
  do
  {
    if (v43 >= *((void *)v74 + 2))
    {
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
      goto LABEL_222;
    }
    __n128 v76 = &v74[4 * v43];
    uint64_t v77 = *((unsigned int *)v76 + 8);
    BOOL v78 = __OFADD__(v77, v48);
    unint64_t v79 = v77 + v48;
    if (v78) {
      goto LABEL_207;
    }
    if ((v79 & 0x8000000000000000) != 0) {
      goto LABEL_208;
    }
    if (HIDWORD(v79)) {
      goto LABEL_209;
    }
    ++v43;
    *((_DWORD *)v76 + 8) = v79;
  }
  while (v75 != v43);
  *__n128 v47 = v74;
LABEL_198:
  uint64_t v215 = *v9;
  if (!*(void *)(*v9 + 16))
  {
LABEL_203:
    uint64_t v223 = 0x7FF8000000000000;
    uint64_t v220 = 0x7FF8000000000000;
    uint64_t v221 = 0x7FF8000000000000;
    uint64_t v222 = 0x7FF8000000000000;
    goto LABEL_205;
  }
  uint64_t v216 = *(void *)(v4 + 16);
  uint64_t v217 = *(void *)(v4 + 24);
  __n128 v253 = *(__n128 *)v4;
  *(void *)&long long v254 = v216;
  *((void *)&v254 + 1) = v217;
  *(void *)uint64_t v255 = v215;
  *(_OWORD *)&v255[8] = *(_OWORD *)(v4 + 40);
  sub_184CEB628();
  if (!*(void *)(v215 + 16)) {
    goto LABEL_224;
  }
  uint64_t v220 = v218;
  uint64_t v221 = v219;
  uint64_t v222 = *(void *)(v215 + 32);
  if (v16 == v40)
  {
    uint64_t v223 = sub_184CE1444(v215);
    if (v224)
    {
      __break(1u);
      goto LABEL_203;
    }
  }
  else
  {
    uint64_t v223 = v217;
  }
LABEL_205:
  *(void *)uint64_t v4 = v220;
  *(void *)(v4 + 8) = v221;
  *(void *)(v4 + 16) = v222;
  *(void *)(v4 + 24) = v223;
  return sub_184CEB9B4();
}

uint64_t sub_184CFDBD4(uint64_t *a1, BOOL a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, double **a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v182 = a8;
  int v184 = a7;
  uint64_t v186 = a6;
  unint64_t v188 = a5;
  uint64_t v183 = a3;
  uint64_t v181 = a14;
  uint64_t v178 = a12;
  uint64_t v180 = a11;
  uint64_t v179 = a9;
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCE0);
  uint64_t v189 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v189 + 64);
  uint64_t v19 = MEMORY[0x1F4188790](v16 - 8, v18);
  uint64_t v174 = (uint64_t)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19, v20);
  unint64_t v23 = (void **)((char *)&v163 - v22);
  uint64_t v25 = MEMORY[0x1F4188790](v21, v24);
  unint64_t v175 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))((char *)&v163 - v26);
  uint64_t v28 = MEMORY[0x1F4188790](v25, v27);
  double v30 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))((char *)&v163 - v29);
  uint64_t v32 = MEMORY[0x1F4188790](v28, v31);
  int64_t v170 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))((char *)&v163 - v33);
  uint64_t v35 = MEMORY[0x1F4188790](v32, v34);
  long long v37 = (uint64_t *)((char *)&v163 - v36);
  uint64_t v39 = MEMORY[0x1F4188790](v35, v38);
  uint64_t v185 = (uint64_t)&v163 - v40;
  uint64_t v42 = MEMORY[0x1F4188790](v39, v41);
  uint64_t v176 = (uint64_t)&v163 - v43;
  uint64_t v45 = MEMORY[0x1F4188790](v42, v44);
  __n128 v47 = (char *)&v163 - v46;
  uint64_t v49 = MEMORY[0x1F4188790](v45, v48);
  uint64_t v177 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))((char *)&v163 - v50);
  uint64_t v52 = MEMORY[0x1F4188790](v49, v51);
  uint64_t v54 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))((char *)&v163 - v53);
  uint64_t v56 = MEMORY[0x1F4188790](v52, v55);
  uint64_t v172 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))((char *)&v163 - v57);
  MEMORY[0x1F4188790](v56, v58);
  uint64_t v60 = (char *)&v163 - v59;
  uint64_t v61 = a1[4];
  int64_t v62 = *(void *)(v61 + 16);
  BOOL v63 = v62 == 0;
  BOOL v64 = (*a1 & 0xFFFFFFFFFFFFFLL) != 0 && (~*a1 & 0x7FF0000000000000) == 0;
  if (v64 || v62)
  {
LABEL_54:
    LODWORD(v187) = v63;
    uint64_t v105 = a1[5];
    uint64_t v106 = a1[6];
    uint64_t v167 = v61;
    uint64_t v165 = (double *)(v61 + 32);
    uint64_t v177 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))(v105 + 32);
    int64_t v168 = *(void *)(v105 + 16);
    uint64_t v176 = v106 + 32;
    uint64_t v166 = *(void *)(v106 + 16);
    sub_184D02650(a2, (uint64_t)v37);
    sub_184D02650((uint64_t)v37, (uint64_t)v170);
    sub_184D02650((uint64_t)v37, (uint64_t)v30);
    sub_184D02650((uint64_t)v37, (uint64_t)v175);
    uint64_t v107 = *(unsigned __int8 *)(v189 + 80);
    uint64_t v108 = (v107 + 16) & ~v107;
    uint64_t v172 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))(v108 + v17);
    uint64_t v109 = swift_allocObject();
    uint64_t v173 = v108;
    sub_184D02BA4((uint64_t)v37, v109 + v108, &qword_1E8F8BCE0);
    sub_184D02650(a2, (uint64_t)v23);
    sub_184D02650((uint64_t)v23, v174);
    unint64_t v171 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))(v107 | 7);
    unint64_t v110 = (void *)swift_allocObject();
    int64_t v111 = v168;
    v110[2] = v177;
    v110[3] = v111;
    uint64_t v112 = v166;
    v110[4] = v176;
    v110[5] = v112;
    sub_184D02BA4((uint64_t)v23, (uint64_t)v110 + ((v107 + 48) & ~v107), &qword_1E8F8BCE0);
    swift_retain();
    unint64_t v164 = v30;
    uint64_t v163 = v110;
    if (v62)
    {
      swift_retain();
      swift_retain();
      unint64_t v113 = v165;
      sub_184CFF0E4(0, v30, *v165);
      double v115 = v114;
      if (v62 == 1)
      {
LABEL_60:
        swift_release();
        int64_t v119 = v62;
      }
      else
      {
        uint64_t v116 = 0;
        uint64_t v117 = v167 + 40;
        while (1)
        {
          if (v116 == 0xFFFFFFFFLL) {
            goto LABEL_153;
          }
          sub_184CFF0E4(v116 + 1, v30, *(double *)(v117 + 8 * v116));
          if (v118 != v115) {
            break;
          }
          if (v62 - 1 == ++v116) {
            goto LABEL_60;
          }
        }
        swift_release();
        int64_t v119 = v116 + 1;
      }
    }
    else
    {
      swift_retain();
      int64_t v119 = 0;
      double v115 = 0.0;
      unint64_t v113 = v165;
    }
    BOOL v121 = v119 == v62;
    char v122 = (char)v187;
    if (!v62 && !v119)
    {
LABEL_126:
      swift_release();
      swift_release_n();
      sub_184D02A08((uint64_t)v175, &qword_1E8F8BCE0);
      sub_184D02A08((uint64_t)v164, &qword_1E8F8BCE0);
      sub_184D02A08((uint64_t)v170, &qword_1E8F8BCE0);
      swift_release();
      uint64_t v120 = &v195;
      return sub_184D02A08(*(v120 - 32), &qword_1E8F8BCE0);
    }
    int64_t v123 = 0;
    int64_t v168 = v62 - 1;
    uint64_t v189 = v167 + 40;
    uint64_t v169 = v109;
    while (1)
    {
      if (v122) {
        goto LABEL_155;
      }
      double v124 = v115;
      int64_t v125 = v123;
      int64_t v123 = v119;
      LODWORD(v187) = v121;
      if (v121)
      {
        swift_retain();
        double v115 = 0.0;
      }
      else
      {
        if ((unint64_t)v119 <= 0x100000000) {
          uint64_t v126 = 0x100000000;
        }
        else {
          uint64_t v126 = v119;
        }
        if (v119 <= v62) {
          int64_t v127 = v62;
        }
        else {
          int64_t v127 = v119;
        }
        double v128 = v113[v119];
        swift_retain();
        if (v119 < 0) {
          goto LABEL_151;
        }
        if (HIDWORD(v119))
        {
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          sub_184D02A08((uint64_t)v177, &qword_1E8F8BCE0);
          sub_184D02A08((uint64_t)v171, &qword_1E8F8BCE0);
          sub_184D02A08(v176, &qword_1E8F8BCE0);
          sub_184D02A08((uint64_t)v172, &qword_1E8F8BCE0);
          __break(1u);
LABEL_155:
          sub_184D02A08((uint64_t)v175, &qword_1E8F8BCE0);
          sub_184D02A08((uint64_t)v164, &qword_1E8F8BCE0);
          sub_184D02A08(v174, &qword_1E8F8BCE0);
          sub_184D02A08((uint64_t)v170, &qword_1E8F8BCE0);
          __break(1u);
LABEL_156:
          sub_184D02A08((uint64_t)v175, &qword_1E8F8BCE0);
          sub_184D02A08((uint64_t)v164, &qword_1E8F8BCE0);
          __break(1u);
        }
        sub_184CFF0E4(v119, v170, v128);
        if (v119 >= v62) {
          goto LABEL_129;
        }
        double v115 = v129;
        int64_t v119 = v62;
        if (v123 + 1 != v62)
        {
          int64_t v130 = v127 - 1;
          uint64_t v131 = v126 - 1;
          int64_t v132 = v123;
          uint64_t v133 = v170;
          int64_t v134 = v168;
          while (1)
          {
            if (v131 == v132) {
              goto LABEL_128;
            }
            sub_184CFF0E4(v132 + 1, v133, *(double *)(v189 + 8 * v132));
            if (v135 != v115) {
              break;
            }
            if (v130 == v132) {
              goto LABEL_129;
            }
            if (v134 == ++v132)
            {
              int64_t v119 = v62;
              goto LABEL_87;
            }
          }
          int64_t v119 = v132 + 1;
        }
LABEL_87:
        if (v119 < v123) {
          goto LABEL_139;
        }
      }
      if (v123 == v125) {
        goto LABEL_156;
      }
      uint64_t v136 = v123 - v125 - 1;
      long long v137 = v188;
      if (__OFSUB__(v123 - v125, 1)) {
        goto LABEL_140;
      }
      if (v136 < 0 || v136 >= v123 - v125) {
        goto LABEL_141;
      }
      unint64_t v138 = v123 - 1;
      if (__OFADD__(v136, v125)) {
        goto LABEL_142;
      }
      if ((v138 & 0x8000000000000000) != 0) {
        goto LABEL_143;
      }
      if (HIDWORD(v138)) {
        goto LABEL_144;
      }
      unsigned int v139 = sub_184CFF0E4(v138, v175, v113[v125 + v136]);
      if (v139)
      {
        int64_t v140 = v177;
        uint64_t v141 = *((unsigned int *)v177 + v139 - 1);
      }
      else
      {
        uint64_t v141 = 0;
        int64_t v140 = v177;
      }
      uint64_t v142 = (uint64_t *)(v176 + 8 * v141);
      uint64_t v143 = *((unsigned int *)v140 + v139) - v141;
      uint64_t v144 = v185;
      sub_184D02650(v174, v185);
      uint64_t v145 = swift_allocObject();
      sub_184D02BA4(v144, v145 + v173, &qword_1E8F8BCE0);
      swift_release();
      uint64_t v197 = v142;
      uint64_t v198 = v143;
      uint64_t v199 = sub_184D026C4;
      uint64_t v200 = v145;
      uint64_t v201 = sub_184CFF814;
      uint64_t v202 = 0;
      unint64_t v203 = sub_184D00144;
      uint64_t v204 = 0;
      unint64_t v205 = sub_184D0016C;
      uint64_t v206 = 0;
      uint64_t v146 = v186 - *v137;
      if (v186 < *v137) {
        goto LABEL_145;
      }
      if (v183) {
        uint64_t v147 = v183 + 8 * *v137;
      }
      else {
        uint64_t v147 = 0;
      }
      swift_retain();
      uint64_t v148 = sub_184D017EC((uint64_t)v194, (void *)v147, v146);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v149 = v188;
      swift_release();
      if (v184)
      {
        if (v148 < 0) {
          goto LABEL_152;
        }
        if (v182[1] == (double *)v148)
        {
          if (!v148) {
            goto LABEL_112;
          }
          uint64_t v150 = *v182;
          if (**v182 == *(double *)v147)
          {
            if (v148 == 1) {
              goto LABEL_112;
            }
            if (v150[1] == *(double *)(v147 + 8))
            {
              if (v148 == 2) {
                goto LABEL_112;
              }
              if (v150[2] == *(double *)(v147 + 16))
              {
                if (v148 == 3) {
                  goto LABEL_112;
                }
                if (v150[3] == *(double *)(v147 + 24))
                {
                  uint64_t v151 = v148 - 4;
                  uint64_t v152 = (double *)(v147 + 32);
                  long long v153 = v150 + 4;
                  while (v151)
                  {
                    double v154 = *v153++;
                    double v155 = v154;
                    double v156 = *v152++;
                    --v151;
                    if (v155 != v156) {
                      goto LABEL_117;
                    }
                  }
LABEL_112:
                  swift_release();
                  goto LABEL_124;
                }
              }
            }
          }
        }
LABEL_117:
        uint64_t v157 = v182;
        void *v182 = (double *)v147;
        v157[1] = (double *)v148;
      }
      uint64_t v158 = *v149 + v148;
      if (__OFADD__(*v149, v148)) {
        goto LABEL_146;
      }
      void *v149 = v158;
      uint64_t v159 = v180;
      uint64_t v160 = *v180;
      *(double *)(v179 + 8 * *v180) = v124;
      BOOL v102 = __OFADD__(v181, v158);
      unint64_t v161 = v181 + v158;
      if (v102) {
        goto LABEL_147;
      }
      if ((v161 & 0x8000000000000000) != 0) {
        goto LABEL_148;
      }
      if (HIDWORD(v161)) {
        goto LABEL_149;
      }
      *(_DWORD *)(v178 + 4 * v160) = v161;
      swift_release();
      if (__OFADD__(*v159, 1)) {
        goto LABEL_150;
      }
      ++*v159;
LABEL_124:
      BOOL v121 = v119 == v62;
      char v122 = (char)v187;
      if (v123 == v62 && v119 == v62) {
        goto LABEL_126;
      }
    }
  }
  double v65 = *((double *)a1 + 3);
  uint64_t v191 = *a1;
  uint64_t v187 = (char *)&v192 + 8;
  long long v192 = *(_OWORD *)(a1 + 1);
  double v193 = v65;
  uint64_t v190 = 0x200000002;
  sub_184D02650(a2, (uint64_t)v60);
  sub_184D02650((uint64_t)v60, (uint64_t)v172);
  sub_184D02650((uint64_t)v60, (uint64_t)v54);
  sub_184D02650((uint64_t)v60, (uint64_t)v177);
  uint64_t v66 = *(unsigned __int8 *)(v189 + 80);
  uint64_t v67 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))((v66 + 16) & ~v66);
  uint64_t v174 = (uint64_t)v67 + v17;
  double v30 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))swift_allocObject();
  unint64_t v175 = v67;
  sub_184D02BA4((uint64_t)v60, (uint64_t)v67 + (void)v30, &qword_1E8F8BCE0);
  sub_184D02650(a2, (uint64_t)v47);
  sub_184D02650((uint64_t)v47, v176);
  uint64_t v173 = v66 | 7;
  uint64_t v68 = swift_allocObject();
  a1 = &v190;
  *(void *)(v68 + 16) = &v190;
  *(void *)(v68 + 24) = 2;
  *(void *)(v68 + 32) = &v191;
  *(void *)(v68 + 40) = 2;
  sub_184D02BA4((uint64_t)v47, v68 + ((v66 + 48) & ~v66), &qword_1E8F8BCE0);
  swift_retain_n();
  int64_t v170 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v68;
  swift_retain();
  sub_184CFF0E4(0, v54, *((double *)&v192 + 1));
  double v70 = v69;
  unint64_t v171 = v54;
  sub_184CFF0E4(1u, v54, v193);
  a2 = v71 == v70;
  if (v71 == v70) {
    uint64_t v72 = 2;
  }
  else {
    uint64_t v72 = 1;
  }
  swift_release();
  uint64_t v73 = 0;
  LOBYTE(v62) = 0;
  unint64_t v23 = v188;
  do
  {
    if (v62) {
      goto LABEL_154;
    }
    double v75 = v70;
    uint64_t v17 = v73;
    uint64_t v73 = v72;
    int64_t v62 = a2;
    if (a2)
    {
      swift_retain();
      double v70 = 0.0;
LABEL_19:
      a2 = 1;
LABEL_20:
      uint64_t v80 = 2;
      if (v73 == v17) {
        goto LABEL_53;
      }
      goto LABEL_21;
    }
    double v76 = *(double *)&v187[8 * v72];
    swift_retain();
    unsigned int v77 = v72;
    BOOL v78 = v172;
    sub_184CFF0E4(v77, v172, v76);
    double v70 = v79;
    if (v73 == 1) {
      goto LABEL_19;
    }
    a2 = 1;
    sub_184CFF0E4(1u, v78, v193);
    if (v104 == v70) {
      goto LABEL_20;
    }
    if (v73 > 1) {
      goto LABEL_130;
    }
    a2 = 0;
    uint64_t v80 = 1;
    if (v73 == v17)
    {
LABEL_53:
      long long v37 = &qword_1E8F8BCE0;
      sub_184D02A08((uint64_t)v177, &qword_1E8F8BCE0);
      sub_184D02A08((uint64_t)v171, &qword_1E8F8BCE0);
      __break(1u);
      goto LABEL_54;
    }
LABEL_21:
    if (v73 - v17 < 1) {
      goto LABEL_131;
    }
    unsigned int v81 = sub_184CFF0E4((int)v73 - 1, v177, *(double *)&v187[8 * v17 - 8 + 8 * (v73 - v17)]);
    uint64_t v189 = v80;
    if (v81) {
      uint64_t v82 = *((unsigned int *)&v190 + v81 - 1);
    }
    else {
      uint64_t v82 = 0;
    }
    uint64_t v83 = &v191 + v82;
    uint64_t v84 = *((unsigned int *)&v190 + v81) - v82;
    uint64_t v85 = v185;
    sub_184D02650(v176, v185);
    uint64_t v86 = swift_allocObject();
    sub_184D02BA4(v85, (uint64_t)v175 + v86, &qword_1E8F8BCE0);
    uint64_t v87 = v30;
    swift_release();
    uint64_t v197 = v83;
    uint64_t v198 = v84;
    uint64_t v199 = sub_184D026C4;
    uint64_t v200 = v86;
    uint64_t v201 = sub_184CFF814;
    uint64_t v202 = 0;
    unint64_t v203 = sub_184D00144;
    uint64_t v204 = 0;
    unint64_t v205 = sub_184D0016C;
    uint64_t v206 = 0;
    uint64_t v88 = v186 - *v23;
    if (v186 < *v23) {
      goto LABEL_132;
    }
    if (v183) {
      uint64_t v89 = v183 + 8 * *v23;
    }
    else {
      uint64_t v89 = 0;
    }
    swift_retain();
    uint64_t v90 = sub_184D017EC((uint64_t)v194, (void *)v89, v88);
    swift_release();
    swift_release();
    unint64_t v23 = v188;
    swift_release();
    swift_release();
    double v30 = v87;
    if (v184)
    {
      if (v90 < 0) {
        goto LABEL_138;
      }
      if (v182[1] == (double *)v90)
      {
        if (!v90) {
          goto LABEL_10;
        }
        int64_t v91 = *v182;
        if (**v182 == *(double *)v89)
        {
          if (v90 == 1) {
            goto LABEL_10;
          }
          if (v91[1] == *(double *)(v89 + 8))
          {
            if (v90 == 2) {
              goto LABEL_10;
            }
            if (v91[2] == *(double *)(v89 + 16))
            {
              if (v90 == 3) {
                goto LABEL_10;
              }
              if (v91[3] == *(double *)(v89 + 24))
              {
                uint64_t v92 = v90 - 4;
                BOOL v93 = (double *)(v89 + 32);
                unint64_t v94 = v91 + 4;
                while (v92)
                {
                  double v95 = *v94++;
                  double v96 = v95;
                  double v97 = *v93++;
                  --v92;
                  if (v96 != v97) {
                    goto LABEL_43;
                  }
                }
LABEL_10:
                swift_release();
                goto LABEL_11;
              }
            }
          }
        }
      }
LABEL_43:
      uint64_t v98 = v182;
      void *v182 = (double *)v89;
      v98[1] = (double *)v90;
    }
    uint64_t v99 = *v23 + v90;
    if (__OFADD__(*v23, v90)) {
      goto LABEL_133;
    }
    *unint64_t v23 = v99;
    uint64_t v100 = v180;
    uint64_t v101 = *v180;
    *(double *)(v179 + 8 * *v180) = v75;
    BOOL v102 = __OFADD__(v181, v99);
    unint64_t v103 = v181 + v99;
    if (v102) {
      goto LABEL_134;
    }
    if ((v103 & 0x8000000000000000) != 0) {
      goto LABEL_135;
    }
    if (HIDWORD(v103)) {
      goto LABEL_136;
    }
    *(_DWORD *)(v178 + 4 * v101) = v103;
    swift_release();
    if (__OFADD__(*v100, 1)) {
      goto LABEL_137;
    }
    ++*v100;
LABEL_11:
    BOOL v74 = v73 == 2 && a2;
    a1 = &v190;
    uint64_t v72 = v189;
  }
  while (!v74);
  swift_release();
  swift_release_n();
  sub_184D02A08((uint64_t)v177, &qword_1E8F8BCE0);
  sub_184D02A08((uint64_t)v171, &qword_1E8F8BCE0);
  sub_184D02A08((uint64_t)v172, &qword_1E8F8BCE0);
  swift_release();
  uint64_t v120 = &v196;
  return sub_184D02A08(*(v120 - 32), &qword_1E8F8BCE0);
}

uint64_t sub_184CFECF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v26[3] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v15 = a1[5];
  uint64_t v17 = a1[6];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  BOOL v20 = (v11 & 0xFFFFFFFFFFFFFLL) != 0 && (~v11 & 0x7FF0000000000000) == 0;
  uint64_t v21 = *(void *)(v16 + 16);
  if (!v20 && v21 == 0)
  {
    v25[0] = v11;
    v25[1] = v12;
    v26[0] = v13;
    v26[1] = v14;
    v19.n128_u64[0] = 0x200000002;
    uint64_t v24 = 0x200000002;
    sub_184CFEEC0((uint64_t)v26, 2, 0, (uint64_t)&v24, 2, (uint64_t)v25, 2, a4, v19, (void (*)(void *))sub_184D02C44, v18, a5, a6);
    return swift_release();
  }
  else
  {
    sub_184CFEEC0(v16 + 32, v21, 0, v15 + 32, *(void *)(v15 + 16), v17 + 32, *(void *)(v17 + 16), a4, v19, (void (*)(void *))sub_184D02C44, v18, a5, a6);
    return swift_release();
  }
}

uint64_t sub_184CFEEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, void (*a10)(void *), uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v26 = a8;
  uint64_t v27 = a4;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v28 = a5;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v31 = a1;
  uint64_t v13 = *(void *)(a12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v34 = a11;
  uint64_t v35 = a10;
  MEMORY[0x1F4188790](a1, a9);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v25(v15, v16, a12);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v24 = v17 | 7;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a12;
  *(void *)(v18 + 24) = a13;
  __n128 v19 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  v19(v18 + ((v17 + 32) & ~v17), v15, a12);
  v25(v15, v26, a12);
  BOOL v20 = (void *)swift_allocObject();
  v20[2] = a12;
  v20[3] = a13;
  uint64_t v21 = v28;
  _DWORD v20[4] = v27;
  v20[5] = v21;
  uint64_t v22 = v30;
  v20[6] = v29;
  v20[7] = v22;
  v19((uint64_t)v20 + ((v17 + 64) & ~v17), v15, a12);
  v36[0] = v31;
  v36[1] = v32;
  v36[2] = v33;
  v36[3] = sub_184D02C94;
  v36[4] = v18;
  v36[5] = sub_184CFF814;
  v36[6] = 0;
  v36[7] = sub_184D02D5C;
  v36[8] = v20;
  v35(v36);
  swift_release();
  return swift_release();
}

uint64_t sub_184CFF0E4(unsigned int a1, void (*a2)(unsigned char *, uint64_t, uint64_t, uint64_t), double a3)
{
  double v69 = a2;
  unsigned int v59 = a1;
  uint64_t v4 = sub_1850C3DB8();
  int64_t v62 = *(void (***)(unsigned char *, uint64_t))(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4, v5);
  __n128 v58 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v67 = &v54[-v9];
  uint64_t v10 = type metadata accessor for Region.Operation();
  uint64_t v70 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10, v11);
  uint64_t v14 = (double *)&v54[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = &v54[-v16];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCF8);
  uint64_t v20 = MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v22 = &v54[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v25 = &v54[-v24];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCE0);
  MEMORY[0x1F4188790](v26 - 8, v27);
  uint64_t v29 = &v54[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BD00);
  uint64_t v32 = MEMORY[0x1F4188790](v30 - 8, v31);
  uint64_t v34 = &v54[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v32, v35);
  long long v37 = &v54[-v36];
  sub_184D02650((uint64_t)v69, (uint64_t)v29);
  sub_184D0293C((uint64_t)v29, (uint64_t)v25);
  __n128 v38 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
  v38(v25, 0, 1, v10);
  v38(v34, 1, 1, v10);
  sub_184D029A0((uint64_t)v25, (uint64_t)v34);
  sub_184D02BA4((uint64_t)v34, (uint64_t)v37, &qword_1E8F8BD00);
  sub_184D02BA4((uint64_t)v37, (uint64_t)v22, &qword_1E8F8BCF8);
  double v69 = v38;
  v38(v37, 1, 1, v10);
  uint64_t v39 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v70 + 48);
  v70 += 48;
  uint64_t v68 = v39;
  if (v39(v22, 1, v10) == 1)
  {
LABEL_2:
    sub_184D02A08((uint64_t)v37, &qword_1E8F8BD00);
    return v59;
  }
  double v65 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 2);
  uint64_t v66 = (uint64_t (**)(unsigned char *, double *, uint64_t))(v62 + 4);
  BOOL v64 = (uint64_t (**)(unsigned char *, uint64_t))(v62 + 11);
  int v63 = *MEMORY[0x1E4FBBEA0];
  int v61 = *MEMORY[0x1E4FBBE98];
  int v60 = *MEMORY[0x1E4FBBEA8];
  int v57 = *MEMORY[0x1E4FBBEB0];
  int v56 = *MEMORY[0x1E4FBBE88];
  int v55 = *MEMORY[0x1E4FBBE90];
  ++v62;
  __n128 v41 = &qword_1E8F8BCF8;
  uint64_t v42 = v58;
  while (1)
  {
    sub_184D0293C((uint64_t)v22, (uint64_t)v17);
    sub_184CF29FC((uint64_t)v17, (uint64_t)v14);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result != 1)
    {
      double v50 = v14[1];
      if (v50 < 0.0) {
        goto LABEL_29;
      }
      a3 = v14[3] + a3 * v50;
      goto LABEL_6;
    }
    __n128 v44 = v41;
    double v45 = *(double *)((char *)v14 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8) + 48));
    uint64_t v46 = v67;
    uint64_t result = (*v66)(v67, v14, v4);
    if (v45 <= 0.0) {
      break;
    }
    double v47 = a3 * v45;
    double v71 = v47;
    (*v65)(v42, v46, v4);
    int v48 = (*v64)(v42, v4);
    if (v48 == v63)
    {
      double v49 = round(v47);
      (*v62)(v46, v4);
LABEL_15:
      a3 = v49 / v45;
LABEL_16:
      __n128 v41 = v44;
      goto LABEL_6;
    }
    if (v48 == v61)
    {
      double v49 = rint(v47);
      (*v62)(v67, v4);
      goto LABEL_15;
    }
    __n128 v41 = v44;
    if (v48 == v60)
    {
      double v43 = ceil(v47);
    }
    else if (v48 == v57)
    {
      double v43 = floor(v47);
    }
    else
    {
      if (v48 != v56)
      {
        if (v48 == v55)
        {
          (*v62)(v67, v4);
          if ((*(void *)&v47 & 0x8000000000000000) != 0) {
            double v51 = floor(v47);
          }
          else {
            double v51 = ceil(v47);
          }
          a3 = v51 / v45;
          uint64_t v42 = v58;
        }
        else
        {
          sub_1850C3A98();
          uint64_t v52 = *v62;
          (*v62)(v67, v4);
          uint64_t v53 = v52;
          uint64_t v42 = v58;
          v53(v58, v4);
          a3 = v71 / v45;
        }
        goto LABEL_16;
      }
      double v43 = trunc(v47);
    }
    (*v62)(v67, v4);
    a3 = v43 / v45;
LABEL_6:
    sub_184CF235C((uint64_t)v17);
    sub_184D02BA4((uint64_t)v37, (uint64_t)v22, v41);
    v69(v37, 1, 1, v10);
    if (v68(v22, 1, v10) == 1) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

double sub_184CFF78C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 8);
  sub_1850C3A48();
  double result = v5;
  *(double *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

double sub_184CFF814@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t sub_184CFF820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, __n128 a9@<Q0>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a7;
  uint64_t v14 = *(void *)(a6 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x1F4188790](a1, a9);
  uint64_t v17 = *(void *)v16;
  long long v18 = *(_OWORD *)(v16 + 24);
  v30[0] = *(_OWORD *)(v16 + 8);
  v30[1] = v18;
  uint64_t v31 = *(void *)(v16 + 40);
  swift_retain();
  sub_184CE1468();
  uint64_t v20 = v19;
  uint64_t result = sub_184D02A64((uint64_t)v30);
  if ((v20 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = sub_184CE2908(v20, a2, a3, a4);
    uint64_t v24 = v23;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v28, a6);
    unint64_t v25 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v26 = swift_allocObject();
    uint64_t v27 = v29;
    *(void *)(v26 + 16) = a6;
    *(void *)(v26 + 24) = v27;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v14 + 32))(v26 + v25, (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a6);
    a8[1] = v22;
    a8[2] = v24;
    a8[3] = sub_184D02E30;
    a8[4] = v26;
    a8[5] = sub_184CFF814;
    a8[6] = 0;
    a8[7] = sub_184D00144;
    a8[8] = 0;
    a8[9] = sub_184D0016C;
    a8[10] = 0;
    *a8 = v17;
  }
  return result;
}

uint64_t sub_184CFFA0C(uint64_t a1, double a2)
{
  uint64_t v71 = sub_1850C3DB8();
  double v65 = *(void (***)(unsigned char *, uint64_t))(v71 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v71, v4);
  uint64_t v70 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v72 = &v58[-v8];
  uint64_t v9 = type metadata accessor for Region.Operation();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  uint64_t v14 = (double *)&v58[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = &v58[-v16];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCF8);
  uint64_t v20 = MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v22 = &v58[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v20, v23);
  unint64_t v25 = &v58[-v24];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCE0);
  MEMORY[0x1F4188790](v26 - 8, v27);
  uint64_t v29 = &v58[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BD00);
  uint64_t v32 = MEMORY[0x1F4188790](v30 - 8, v31);
  uint64_t v34 = &v58[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v32, v35);
  long long v37 = &v58[-v36];
  sub_184D02650(a1, (uint64_t)v29);
  sub_184D0293C((uint64_t)v29, (uint64_t)v25);
  uint64_t v39 = v10 + 56;
  __n128 v38 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v38(v25, 0, 1, v9);
  v38(v34, 1, 1, v9);
  sub_184D029A0((uint64_t)v25, (uint64_t)v34);
  sub_184D02BA4((uint64_t)v34, (uint64_t)v37, &qword_1E8F8BD00);
  sub_184D02BA4((uint64_t)v37, (uint64_t)v22, &qword_1E8F8BCF8);
  uint64_t v73 = v38;
  v38(v37, 1, 1, v9);
  uint64_t v40 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v74 = v10 + 48;
  if (v40(v22, 1, v9) == 1) {
    return sub_184D02A08((uint64_t)v37, &qword_1E8F8BD00);
  }
  uint64_t v68 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v65 + 2);
  double v69 = (uint64_t (**)(unsigned char *, double *, uint64_t))(v65 + 4);
  uint64_t v67 = (uint64_t (**)(unsigned char *, uint64_t))(v65 + 11);
  int v66 = *MEMORY[0x1E4FBBEA0];
  int v63 = *MEMORY[0x1E4FBBE98];
  int v62 = *MEMORY[0x1E4FBBEA8];
  int v61 = *MEMORY[0x1E4FBBEB0];
  int v60 = *MEMORY[0x1E4FBBE88];
  int v59 = *MEMORY[0x1E4FBBE90];
  BOOL v64 = v14;
  ++v65;
  uint64_t v42 = &qword_1E8F8BCF8;
  while (1)
  {
    sub_184D0293C((uint64_t)v22, (uint64_t)v17);
    sub_184CF29FC((uint64_t)v17, (uint64_t)v14);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 1) {
      break;
    }
    if (*v14 < 0.0) {
      goto LABEL_30;
    }
    a2 = v14[2] + a2 * *v14;
LABEL_9:
    sub_184CF235C((uint64_t)v17);
    sub_184D02BA4((uint64_t)v37, (uint64_t)v22, v42);
    v73(v37, 1, 1, v9);
    if (v40(v22, 1, v9) == 1) {
      return sub_184D02A08((uint64_t)v37, &qword_1E8F8BD00);
    }
  }
  uint64_t v43 = v39;
  __n128 v44 = v42;
  double v45 = v40;
  double v46 = *(double *)((char *)v14 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BBB8) + 48));
  uint64_t v47 = v71;
  int v48 = v72;
  uint64_t result = (*v69)(v72, v14, v71);
  if (v46 > 0.0)
  {
    double v49 = v22;
    uint64_t v50 = v9;
    double v51 = v17;
    uint64_t v52 = v37;
    double v53 = a2 * v46;
    double v75 = v53;
    uint64_t v54 = v70;
    (*v68)(v70, v48, v47);
    int v55 = (*v67)(v54, v47);
    if (v55 == v66)
    {
      (*v65)(v48, v47);
      a2 = round(v53) / v46;
      uint64_t v40 = v45;
      uint64_t v42 = v44;
      uint64_t v39 = v43;
      long long v37 = v52;
    }
    else
    {
      long long v37 = v52;
      if (v55 != v63)
      {
        uint64_t v40 = v45;
        uint64_t v17 = v51;
        if (v55 != v62)
        {
          uint64_t v9 = v50;
          if (v55 != v61)
          {
            uint64_t v22 = v49;
            if (v55 != v60)
            {
              uint64_t v14 = v64;
              if (v55 == v59)
              {
                (*v65)(v72, v71);
                if ((*(void *)&v53 & 0x8000000000000000) != 0) {
                  double v56 = floor(v53);
                }
                else {
                  double v56 = ceil(v53);
                }
              }
              else
              {
                sub_1850C3A98();
                int v57 = *v65;
                (*v65)(v72, v71);
                v57(v70, v71);
                double v56 = v75;
              }
              a2 = v56 / v46;
              uint64_t v40 = v45;
              uint64_t v42 = v44;
              uint64_t v39 = v43;
              goto LABEL_9;
            }
            (*v65)(v72, v71);
            a2 = trunc(v53) / v46;
            uint64_t v42 = v44;
            uint64_t v39 = v43;
            goto LABEL_8;
          }
          (*v65)(v72, v71);
          a2 = floor(v53) / v46;
          uint64_t v42 = v44;
          uint64_t v39 = v43;
LABEL_7:
          uint64_t v22 = v49;
LABEL_8:
          uint64_t v14 = v64;
          goto LABEL_9;
        }
        (*v65)(v72, v71);
        a2 = ceil(v53) / v46;
        uint64_t v42 = v44;
        uint64_t v39 = v43;
LABEL_6:
        uint64_t v9 = v50;
        goto LABEL_7;
      }
      (*v65)(v72, v71);
      a2 = rint(v53) / v46;
      uint64_t v40 = v45;
      uint64_t v42 = v44;
      uint64_t v39 = v43;
    }
    uint64_t v17 = v51;
    goto LABEL_6;
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_184D00144@<X0>(uint64_t result@<X0>, double *a2@<X8>)
{
  double v2 = *(double *)result;
  if (((*(_DWORD *)(result + 16) - *(_DWORD *)(result + 8)) & 1) == 0) {
    double v2 = NAN;
  }
  *a2 = v2;
  return result;
}

BOOL sub_184D0016C(void *a1)
{
  return (*a1 & 0xFFFFFFFFFFFFFLL) == 0 || (~*a1 & 0x7FF0000000000000) != 0;
}

Swift::Void __swiftcall Region.apply(_:)(CGAffineTransform *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCE0);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (double *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1->a >= 0.0 && a1->b == 0.0 && a1->c == 0.0 && (double d = a1->d, d >= 0.0))
  {
    *uint64_t v6 = a1->a;
    v6[1] = d;
    *((_OWORD *)v6 + 1) = *(_OWORD *)&a1->tx;
    type metadata accessor for Region.Operation();
    swift_storeEnumTagMultiPayload();
    sub_184CFA8EC((BOOL)v6);
    sub_184D02A08((uint64_t)v6, &qword_1E8F8BCE0);
  }
  else
  {
    uint64_t v8 = *v1;
    uint64_t v9 = v1[4];
    uint64_t v10 = v1[5];
    uint64_t v11 = v1[6];
    BOOL v12 = (~*v1 & 0x7FF0000000000000) != 0 || (*v1 & 0xFFFFFFFFFFFFFLL) == 0;
    if (v12 && !*(void *)(v9 + 16))
    {
      uint64_t v19 = v1[1];
      uint64_t v20 = v1[2];
      uint64_t v13 = v1[3];
      swift_release();
      swift_release();
      swift_release();
      char v14 = 0;
      uint64_t v9 = v8;
      uint64_t v10 = v19;
      uint64_t v11 = v20;
    }
    else
    {
      uint64_t v13 = 0;
      char v14 = 1;
    }
    __n128 v15 = (_OWORD *)swift_allocObject();
    long long v16 = *(_OWORD *)&a1->c;
    v15[1] = *(_OWORD *)&a1->a;
    v15[2] = v16;
    v15[3] = *(_OWORD *)&a1->tx;
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v11;
    v23[3] = v13;
    char v24 = v14;
    unint64_t v25 = sub_184D025BC;
    uint64_t v26 = v15;
    __n128 v27 = sub_184D02488;
    uint64_t v28 = 0;
    uint64_t v29 = sub_184D02498;
    uint64_t v30 = 0;
    sub_184CF655C((uint64_t)v23, (uint64_t)v21);
    uint64_t v17 = v22;
    long long v18 = v21[1];
    *(_OWORD *)uint64_t v1 = v21[0];
    *((_OWORD *)v1 + 1) = v18;
    *((_OWORD *)v1 + 2) = v21[2];
    v1[6] = v17;
  }
}

uint64_t sub_184D00380@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  sub_184CCB92C(a2, (uint64_t)v10, *a1, a1[1], a1[2], a1[3]);
  uint64_t v4 = v10[0];
  uint64_t v5 = v10[1];
  uint64_t v6 = v10[2];
  uint64_t v7 = v10[3];
  uint64_t result = sub_184D02BA4((uint64_t)v10, (uint64_t)v11, &qword_1E8F8BD08);
  if (v11[32] == 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  a3[4] = v9;
  a3[5] = v9;
  a3[6] = v9;
  return result;
}

uint64_t Region.applying<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(v4 + 48);
  long long v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v4;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v4 + 32);
  *(void *)(a4 + 48) = v5;
  return Region.apply<A>(_:)(a1, a2, a3);
}

void Region.applying(_:)(CGAffineTransform *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 48);
  long long v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(void *)(a2 + 48) = v3;
  Region.apply(_:)(a1);
}

double Region.boundingBox.getter()
{
  double result = *v0;
  if ((~*(void *)v0 & 0x7FF0000000000000) == 0 && (*(void *)v0 & 0xFFFFFFFFFFFFFLL) != 0) {
    return INFINITY;
  }
  return result;
}

double Region.minX.getter()
{
  return *(double *)v0;
}

double Region.minY.getter()
{
  return *(double *)(v0 + 16);
}

double Region.maxX.getter()
{
  return *(double *)(v0 + 8);
}

double Region.maxY.getter()
{
  return *(double *)(v0 + 24);
}

Swift::Bool __swiftcall Region.contains(_:)(CGPoint a1)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  double v2 = *(double *)v1;
  double v3 = *(double *)(v1 + 8);
  double v4 = *(double *)(v1 + 16);
  double v5 = *(double *)(v1 + 24);
  if (*(double *)v1 > a1.x || v3 <= a1.x || v4 > a1.y || v5 <= a1.y) {
    return 0;
  }
  CGFloat x = a1.x;
  uint64_t v12 = *(void *)(v1 + 32);
  uint64_t v11 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 48);
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0 && (*(void *)&v2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    CGFloat y = a1.y;
    uint64_t v21 = sub_184CD3E58(*(void *)(v1 + 32) + 32, *(void *)(*(void *)(v1 + 32) + 16), (__n128)__PAIR128__(v20, *(unint64_t *)&y));
    goto LABEL_24;
  }
  if (*(void *)(v12 + 16))
  {
    CGFloat v15 = a1.y;
    uint64_t v21 = sub_184CD3E58(*(void *)(v1 + 32) + 32, *(void *)(*(void *)(v1 + 32) + 16), (__n128)__PAIR128__(v16, *(unint64_t *)&v15));
    if (!*(void *)(v12 + 16))
    {
      *(double *)uint64_t v29 = v2;
      *(double *)&v29[1] = v3;
      *(double *)&v29[2] = v4;
      *(double *)&v29[3] = v5;
      uint64_t v28 = 0x200000002;
      uint64_t v17 = v21 - 1;
      if (!__OFSUB__(v21, 1))
      {
        if (v21 == 1)
        {
          uint64_t v18 = 0;
        }
        else
        {
          if (__OFSUB__(v17, 1)) {
            goto LABEL_37;
          }
          uint64_t v18 = *((unsigned int *)&v28 + v21 - 2);
        }
        uint64_t v26 = &v29[v18];
        uint64_t v27 = *((unsigned int *)&v29[-1] + v17) - v18;
        goto LABEL_30;
      }
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
    }
LABEL_24:
    uint64_t v23 = v21 - 1;
    if (__OFSUB__(v21, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v24 = v11 + 32;
      if (v21 == 1)
      {
        uint64_t v25 = 0;
        goto LABEL_29;
      }
      if (!__OFSUB__(v23, 1))
      {
        uint64_t v25 = *(unsigned int *)(v24 + 4 * (v21 - 2));
LABEL_29:
        uint64_t v26 = (void *)(v13 + 8 * v25 + 32);
        uint64_t v27 = *(unsigned int *)(v24 + 4 * v23) - v25;
LABEL_30:
        v22.n128_f64[0] = x;
        return (sub_184CD3E58((uint64_t)v26, v27, v22) & 0x8000000000000001) == 1;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
  return 1;
}

uint64_t sub_184D00698()
{
  if (qword_1E8F8B560 != -1) {
    uint64_t result = swift_once();
  }
  if (*(double *)&xmmword_1E8F9E530 >= *((double *)&xmmword_1E8F9E530 + 1))
  {
    __break(1u);
  }
  else
  {
    xmmword_1E8F8BCA8 = xmmword_1E8F9E530;
    xmmword_1E8F8BCB8 = xmmword_1E8F9E530;
    *(void *)&xmmword_1E8F8BCC8 = MEMORY[0x1E4FBC860];
    *((void *)&xmmword_1E8F8BCC8 + 1) = MEMORY[0x1E4FBC860];
    qword_1E8F8BCD8 = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t static Region.infinite.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1E8F8B568 != -1) {
    swift_once();
  }
  long long v2 = xmmword_1E8F8BCC8;
  uint64_t v3 = qword_1E8F8BCD8;
  long long v4 = xmmword_1E8F8BCB8;
  *(_OWORD *)a1 = xmmword_1E8F8BCA8;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v2;
  *(void *)(a1 + 48) = v3;
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t Region.isInfinite.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  float64x2_t v2 = *(float64x2_t *)(v0 + 16);
  v6[0] = *(float64x2_t *)v0;
  v6[1] = v2;
  v6[2] = *(float64x2_t *)(v0 + 32);
  uint64_t v7 = v1;
  if (qword_1E8F8B568 != -1) {
    swift_once();
  }
  v4[0] = xmmword_1E8F8BCA8;
  v4[1] = xmmword_1E8F8BCB8;
  v4[2] = xmmword_1E8F8BCC8;
  uint64_t v5 = qword_1E8F8BCD8;
  return _s12CoreGraphics6RegionV2eeoiySbAC_ACtFZ_0(v6, (uint64_t)v4) & 1;
}

BOOL Region.isRect.getter()
{
  return ((~*v0 & 0x7FF0000000000000) != 0 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0) && *(void *)(v0[4] + 16) == 0;
}

uint64_t Region.rects.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  unint64_t v5 = v1[6];
  BOOL v6 = (~*v1 & 0x7FF0000000000000) != 0 || (*v1 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v6 && (uint64_t v7 = *(void *)(v3 + 16)) == 0)
  {
    long long v9 = *((_OWORD *)v1 + 1);
    uint64_t v4 = v1[1];
    uint64_t v3 = *v1;
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
    long long v9 = v5;
    LOBYTE(v7) = 1;
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = sub_184D00928;
  *(void *)(a1 + 48) = 0;
  return result;
}

double *sub_184D00928@<X0>(double *result@<X0>, double *a2@<X8>)
{
  double v2 = *result;
  if ((~*(void *)result & 0x7FF0000000000000) != 0 || (*(void *)result & 0xFFFFFFFFFFFFFLL) == 0)
  {
    double v4 = result[2];
    double v5 = result[1] - v2;
    double v6 = result[3] - v4;
  }
  else
  {
    double v2 = INFINITY;
    double v4 = INFINITY;
    double v5 = 0.0;
    double v6 = 0.0;
  }
  *a2 = v2;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

void *sub_184D00978(int64_t a1)
{
  void *(*v7)(void *__return_ptr, void);
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  long long *v12;
  uint64_t v13;
  char v14;
  void *result;
  unsigned char *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  void *(*v21)(void *__return_ptr, void);
  uint64_t v22;
  long long v23;
  uint64_t v24;
  char v25;
  double v26;
  uint64_t v27;

  uint64_t v5 = *v1;
  double v6 = (uint64_t (*)(long long *))v1[1];
  uint64_t v7 = (void *(*)(void *__return_ptr, void))v1[3];
  uint64_t v27 = v5;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 == a1)
  {
    double v2 = 0.0;
    return *(void **)&v2;
  }
  if (v8 <= a1)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    sub_184D02F58((uint64_t)&v27);
    uint64_t result = (void *)swift_release();
LABEL_17:
    if (v3 >= a1) {
      return *(void **)&v2;
    }
    goto LABEL_20;
  }
  double v2 = 0.0;
  uint64_t v3 = *(void *)(v5 + 16);
  long long v9 = v5 + 32;
  uint64_t v21 = v7;
  __n128 v22 = v5 + 88;
  uint64_t v10 = 1;
  uint64_t v11 = a1;
  unint64_t v20 = v5 + 32;
LABEL_5:
  uint64_t v12 = (long long *)(v9 + 32 * v11);
  uint64_t v13 = *((void *)v12 + 2);
  char v14 = *((unsigned char *)v12 + 24);
  uint64_t v23 = *v12;
  uint64_t v24 = v13;
  uint64_t v25 = v14;
  uint64_t result = v7(&v26, &v23);
  if (v10)
  {
    double v2 = v26;
    goto LABEL_8;
  }
  if (v26 == v2)
  {
LABEL_8:
    if (v11 + 1 != v8)
    {
      sub_184D02F2C((uint64_t)&v27);
      uint64_t result = (void *)swift_retain();
      unint64_t v16 = (unsigned char *)(v22 + 32 * v11++);
      while (v11 < v8)
      {
        uint64_t v17 = *((void *)v16 - 1);
        uint64_t v18 = *v16;
        uint64_t v23 = *(_OWORD *)(v16 - 24);
        uint64_t v24 = v17;
        uint64_t v25 = v18;
        swift_retain();
        uint64_t v19 = v6(&v23);
        uint64_t result = (void *)swift_release();
        if (v19)
        {
          sub_184D02F58((uint64_t)&v27);
          swift_release();
          uint64_t v10 = 0;
          long long v9 = v20;
          uint64_t v7 = v21;
          if (v11 < v8) {
            goto LABEL_5;
          }
          goto LABEL_15;
        }
        ++v11;
        v16 += 32;
        if (v8 == v11) {
          goto LABEL_16;
        }
      }
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if ((uint64_t)v11 >= a1) {
    return *(void **)&v2;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_184D00B40(uint64_t result)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  void *(*v7)(double *__return_ptr, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  double v17;

  uint64_t v2 = result;
  uint64_t v3 = (void *)v1[1];
  if (v3 == (void *)result) {
    return 0;
  }
  uint64_t v4 = v1[2];
  unint64_t v5 = result + v4;
  if (__OFADD__(result, v4)) {
    goto LABEL_19;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (HIDWORD(v5))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  double v6 = (void (*)(uint64_t *__return_ptr, uint64_t *))v1[3];
  uint64_t v7 = (void *(*)(double *__return_ptr, uint64_t *))v1[5];
  uint64_t v8 = *v1;
  uint64_t v13 = *(void *)(*v1 + 8 * result);
  char v14 = result + v4;
  v6(&v15, &v13);
  uint64_t v13 = v15;
  char v14 = v16;
  uint64_t result = (uint64_t)v7(&v17, &v13);
  if (v2 < 0 || (uint64_t)v3 <= v2) {
    goto LABEL_22;
  }
  long long v9 = v2 + 1;
  uint64_t v12 = v17;
  if ((void *)(v2 + 1) != v3)
  {
    uint64_t v10 = v17;
    while (1)
    {
      uint64_t v11 = v9 + v4;
      if (__OFADD__(v9, v4)) {
        break;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
      if (HIDWORD(v11)) {
        goto LABEL_21;
      }
      uint64_t v13 = *(void *)(v8 + 8 * v9);
      char v14 = v9 + v4;
      v6(&v15, &v13);
      uint64_t v13 = v15;
      char v14 = v16;
      uint64_t result = (uint64_t)v7(&v17, &v13);
      if (v17 != v10) {
        goto LABEL_17;
      }
      if (v9 >= (uint64_t)v3) {
        goto LABEL_22;
      }
      if (v3 == (void *)++v9) {
        goto LABEL_16;
      }
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_16:
  long long v9 = (uint64_t)v3;
LABEL_17:
  uint64_t result = *(void *)&v12;
  if (v9 < v2) {
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_184D00CE0(uint64_t result, double *a2, uint64_t a3)
{
  double v5 = *v3;
  uint64_t v4 = *((void *)v3 + 1);
  uint64_t v7 = *((void *)v3 + 2);
  uint64_t v6 = *((void *)v3 + 3);
  unsigned int v8 = *((unsigned __int8 *)v3 + 32);
  double v9 = v3[5];
  unsigned int v10 = *((unsigned __int8 *)v3 + 48);
  LOBYTE(v11) = *((unsigned char *)v3 + 49) & 1;
  int v12 = *((unsigned char *)v3 + 50) & 1;
  if (!a2)
  {
    *(double *)uint64_t result = v5;
    *(void *)(result + 8) = v4;
    *(void *)(result + 16) = v7;
    *(void *)(result + 24) = v6;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(unsigned char *)(result + 48) = v8;
    *(double *)(result + 56) = v9;
    *(unsigned char *)(result + 64) = v10;
    *(unsigned char *)(result + 65) = v11;
    *(unsigned char *)(result + 66) = v12;
    return 0;
  }
  BOOL v13 = v12 != 0;
  if (!a3)
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
LABEL_47:
    *(double *)uint64_t result = v5;
    *(void *)(result + 8) = v4;
    *(void *)(result + 16) = v7;
    *(void *)(result + 24) = v6;
    *(void *)(result + 32) = v18;
    *(void *)(result + 40) = v17;
    *(unsigned char *)(result + 48) = v8;
    *(double *)(result + 56) = v9;
    *(unsigned char *)(result + 64) = v10;
    *(unsigned char *)(result + 65) = v11;
    *(unsigned char *)(result + 66) = v13;
    return a3;
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  while (v14 != v4)
  {
    double v9 = *(double *)(*(void *)&v5 + 8 * v14);
    if (v15 == v6)
    {
      uint64_t v18 = v14 + 1;
      int v19 = 1;
      uint64_t v15 = v6;
    }
    else
    {
      double v20 = *(double *)(v7 + 8 * v15);
      if (v9 >= v20)
      {
        if (v20 < v9)
        {
          uint64_t v17 = v15 + 1;
          int v19 = 2;
          double v9 = *(double *)(v7 + 8 * v15++);
          goto LABEL_17;
        }
        uint64_t v18 = v14 + 1;
        uint64_t v17 = v15 + 1;
        int v19 = 3;
        ++v15;
      }
      else
      {
        uint64_t v18 = v14 + 1;
        int v19 = 1;
      }
    }
    uint64_t v14 = v18;
LABEL_17:
    unsigned int v21 = v19 ^ v10;
    BOOL v23 = v10 < 8 && v21 < 9;
    int v24 = v23 & (v8 >> (v21 & 7));
    if ((v11 & 1) == v24)
    {
      while (1)
      {
        if (v14 == v4)
        {
          if (v15 == v6)
          {
            BOOL v13 = 0;
            goto LABEL_45;
          }
          double v9 = *(double *)(v7 + 8 * v15);
          uint64_t v17 = v15 + 1;
          int v25 = 2;
          ++v15;
          uint64_t v14 = v4;
        }
        else
        {
          double v9 = *(double *)(*(void *)&v5 + 8 * v14);
          if (v15 == v6)
          {
            uint64_t v18 = v14 + 1;
            int v25 = 1;
            uint64_t v15 = v6;
          }
          else
          {
            double v29 = *(double *)(v7 + 8 * v15);
            if (v9 >= v29)
            {
              if (v29 < v9)
              {
                uint64_t v17 = v15 + 1;
                int v25 = 2;
                double v9 = *(double *)(v7 + 8 * v15++);
                goto LABEL_27;
              }
              uint64_t v18 = v14 + 1;
              uint64_t v17 = v15 + 1;
              int v25 = 3;
              ++v15;
            }
            else
            {
              uint64_t v18 = v14 + 1;
              int v25 = 1;
            }
          }
          uint64_t v14 = v18;
        }
LABEL_27:
        unsigned int v10 = v25 ^ v21;
        BOOL v27 = v21 < 8 && v10 < 9;
        int v11 = v27 & (v8 >> (v10 & 7));
        int v28 = v24 & 1;
        LOBYTE(v24) = v11;
        unsigned int v21 = v10;
        if (v28 != v11) {
          goto LABEL_5;
        }
      }
    }
    unsigned int v10 = v21;
    LOBYTE(v11) = v24;
LABEL_5:
    ++v16;
    *a2++ = v9;
    BOOL v13 = 1;
    if (v16 == a3) {
      goto LABEL_47;
    }
  }
  if (v15 != v6)
  {
    double v9 = *(double *)(v7 + 8 * v15);
    uint64_t v17 = v15 + 1;
    int v19 = 2;
    ++v15;
    uint64_t v14 = v4;
    goto LABEL_17;
  }
  LOBYTE(v24) = v11;
  LOBYTE(v21) = v10;
LABEL_45:
  *(double *)uint64_t result = v5;
  *(void *)(result + 8) = v4;
  *(void *)(result + 16) = v7;
  *(void *)(result + 24) = v6;
  *(void *)(result + 32) = v18;
  *(void *)(result + 40) = v17;
  *(unsigned char *)(result + 48) = v8;
  *(double *)(result + 56) = v9;
  *(unsigned char *)(result + 64) = v21;
  *(unsigned char *)(result + 65) = v24 & 1;
  *(unsigned char *)(result + 66) = v13;
  return v16;
}

void *sub_184D00F5C(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2)
  {
    a3 = 0;
    *uint64_t result = a4;
    result[1] = a5;
    result[3] = 0;
    result[4] = 0;
    result[2] = a6;
    return (void *)a3;
  }
  if (!a3)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
LABEL_8:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v10;
    result[4] = v9;
    return (void *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    int64_t v6 = *(void *)(a5 + 16);
    unint64_t v7 = *(void *)(a6 + 16);
    if (!(v6 | v7))
    {
      uint64_t v8 = 0;
LABEL_28:
      *uint64_t result = a4;
      result[1] = a5;
      result[2] = a6;
      result[3] = v6;
      a3 = v8;
      result[4] = v7;
      return (void *)a3;
    }
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = a6 + 32;
    uint64_t v15 = a4 + 32;
    uint64_t v16 = a5 + 32;
    uint64_t v17 = 1;
    while (v11 != (v7 + 1) >> 1)
    {
      if (v11 == v7 >> 1) {
        goto LABEL_31;
      }
      unint64_t v18 = *(void *)(a4 + 16);
      if (v13 >= v18) {
        goto LABEL_32;
      }
      int64_t v19 = v13 + 1;
      if (v13 + 1 >= v18) {
        goto LABEL_33;
      }
      uint64_t v8 = v17;
      unint64_t v9 = v12 + 2;
      unint64_t v10 = v13;
      if ((uint64_t)v13 < v6)
      {
        unint64_t v10 = v13;
        if (v9 >= *(unsigned int *)(v16 + 4 * v13))
        {
          unint64_t v10 = v13 + 1;
          if (v19 < v6)
          {
            unint64_t v10 = v13 + 1;
            if (v9 >= *(unsigned int *)(v16 + 4 * v19))
            {
              unint64_t v10 = v13 + 2;
              if ((uint64_t)(v13 + 2) < v6 && v9 >= *(unsigned int *)(v16 + 4 * v10))
              {
                unint64_t v20 = v13;
                while (v6 - 3 != v20)
                {
                  unint64_t v21 = *(unsigned int *)(a5 + 44 + 4 * v20++);
                  if (v9 < v21)
                  {
                    unint64_t v10 = v20 + 2;
                    goto LABEL_25;
                  }
                }
                unint64_t v10 = v6;
              }
            }
          }
        }
      }
LABEL_25:
      uint64_t v22 = *(void *)(v14 + ((8 * v12) | 8));
      uint64_t v23 = *(void *)(v15 + 8 * v13);
      uint64_t v24 = *(void *)(v15 + 8 * v19);
      *a2 = *(void *)(v14 + 8 * v12);
      a2[1] = v22;
      a2[2] = v23;
      a2[3] = v24;
      if (v8 == a3) {
        goto LABEL_8;
      }
      a2 += 4;
      uint64_t v17 = v8 + 1;
      uint64_t v11 = v8;
      v12 += 2;
      unint64_t v13 = v10;
      if (v10 == v6)
      {
        uint64_t v11 = v8;
        unint64_t v12 = v9;
        unint64_t v13 = v10;
        if (v9 == v7) {
          goto LABEL_28;
        }
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_184D01118(void *result, void *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  if (!a3) {
    goto LABEL_7;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a5;
    if (!a5)
    {
LABEL_9:
      *uint64_t result = a4;
      result[1] = a5;
      result[2] = v5;
      return (void *)v5;
    }
    if (a5 >= 1)
    {
      uint64_t v6 = *a4;
      *a2 = 0;
      a2[1] = v6;
      if (a3 == 1)
      {
LABEL_7:
        uint64_t v5 = a3;
        goto LABEL_9;
      }
      uint64_t v5 = a5;
      if (a5 == 1) {
        goto LABEL_9;
      }
      uint64_t v7 = a5 & ~(a5 >> 63);
      unint64_t v8 = a5 - 2;
      if (a5 - 2 >= (unint64_t)(a3 - 2)) {
        unint64_t v9 = a3 - 2;
      }
      else {
        unint64_t v9 = a5 - 2;
      }
      if (v9 >= v7 - 1) {
        unint64_t v9 = v7 - 1;
      }
      unint64_t v10 = v9 + 1;
      if (v10 < 0xD) {
        goto LABEL_23;
      }
      if (v8 >= a3 - 2) {
        unint64_t v8 = a3 - 2;
      }
      if (v8 >= v7 - 1) {
        unint64_t v8 = v7 - 1;
      }
      if (a2 + 2 >= (void *)&a4[v8 + 2] || &a2[2 * v8 + 4] <= (void *)a4)
      {
        uint64_t v14 = v10 & 3;
        if ((v10 & 3) == 0) {
          uint64_t v14 = 4;
        }
        unint64_t v15 = v10 - v14;
        unint64_t v13 = &a2[2 * (v10 - v14)];
        uint64_t v12 = v10 - v14 + 1;
        uint64_t v11 = v15 + 2;
        uint64_t v16 = (uint64_t *)(a4 + 2);
        uint64_t v17 = (double *)(a2 + 6);
        do
        {
          uint64_t v18 = *(v16 - 1);
          uint64_t v19 = *v16;
          *(void *)&v20.f64[0] = v18;
          *(void *)&v20.f64[1] = HIDWORD(v18);
          v29.val[0] = v20;
          uint64_t v21 = *(uint64_t *)((char *)v16 - 4);
          *(void *)&v20.f64[0] = v21;
          *(void *)&v20.f64[1] = HIDWORD(v21);
          v29.val[1] = v20;
          uint64_t v22 = *(uint64_t *)((char *)v16 + 4);
          uint64_t v23 = v17 - 4;
          vst2q_f64(v23, v29);
          *(void *)&v20.f64[0] = v19;
          *(void *)&v20.f64[1] = HIDWORD(v19);
          float64x2_t v24 = v20;
          *(void *)&v20.f64[0] = v22;
          *(void *)&v20.f64[1] = HIDWORD(v22);
          v29.val[0] = v20;
          vst2q_f64(v17, v29);
          v16 += 2;
          v17 += 8;
          v15 -= 4;
        }
        while (v15);
      }
      else
      {
LABEL_23:
        uint64_t v11 = 2;
        uint64_t v12 = 1;
        unint64_t v13 = a2;
      }
      uint64_t v25 = v7 + 1;
      uint64_t v26 = v13 + 2;
      while (v25 != v11)
      {
        uint64_t v27 = *(void *)&a4[v12 - 1];
        *(void *)&long long v28 = v27;
        *((void *)&v28 + 1) = HIDWORD(v27);
        *uint64_t v26 = v28;
        if (a3 == v11) {
          goto LABEL_7;
        }
        uint64_t v12 = v11;
        ++v26;
        if (a5 + 1 == ++v11)
        {
          uint64_t v5 = a5;
          goto LABEL_9;
        }
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_184D0128C(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    uint64_t v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v5 = a4;
  if (!a4)
  {
LABEL_23:
    *(void *)uint64_t result = a4;
    *(_DWORD *)(result + 8) = a5;
    *(void *)(result + 16) = v5;
    return v5;
  }
  unint64_t v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6) {
        unint64_t v6 = a3 - 2;
      }
      if (v6 >= a3 - 1) {
        unint64_t v6 = a3 - 1;
      }
      unint64_t v7 = v6 + 1;
      if (v7 > 8)
      {
        uint64_t v10 = v7 & 7;
        if ((v7 & 7) == 0) {
          uint64_t v10 = 8;
        }
        unint64_t v11 = v7 - v10;
        uint64_t v8 = v7 - v10 + 1;
        unint64_t v9 = &a2[v11];
        int32x4_t v12 = vdupq_n_s32(a5);
        unint64_t v13 = (int32x4_t *)(a2 + 5);
        do
        {
          v13[-1] = v12;
          *unint64_t v13 = v12;
          v13 += 2;
          v11 -= 8;
        }
        while (v11);
      }
      else
      {
        uint64_t v8 = 1;
        unint64_t v9 = a2;
      }
      uint64_t v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          uint64_t v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8) {
          goto LABEL_22;
        }
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_184D01368(uint64_t a1, void *a2, uint64_t a3)
{
  void *(*v12)(uint64_t *__return_ptr, long long *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  char v28;
  uint64_t v29;
  long long v30;
  long long v31;
  uint64_t v32;
  int64_t v33;
  double v35;
  uint64_t v36;
  void *v37;
  char v38;
  char v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *(*v58)(uint64_t *__return_ptr, long long *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(long long *);
  uint64_t v66;
  long long v67;
  long long v68;
  uint64_t v69;
  long long v70;
  long long v71;
  long long v72;
  unsigned char v73[64];
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  uint64_t v78;
  _OWORD v79[5];
  void v80[6];
  long long v81;
  long long v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  long long v7 = *(_OWORD *)(v3 + 48);
  v79[2] = *(_OWORD *)(v3 + 32);
  v79[3] = v7;
  v79[4] = *(_OWORD *)(v3 + 64);
  long long v8 = *(_OWORD *)(v3 + 16);
  v79[0] = *(_OWORD *)v3;
  v79[1] = v8;
  int64_t v9 = *(void *)(v3 + 80);
  uint64_t v10 = *(void *)(v3 + 88);
  sub_184CF6D20((uint64_t)&v70);
  uint64_t result = sub_184D02EE0((uint64_t)v79);
  *(void *)&uint64_t v74 = v9;
  *((void *)&v74 + 1) = v10;
  int32x4_t v12 = *(void *(**)(uint64_t *__return_ptr, long long *))(v3 + 96);
  unint64_t v13 = *(void *)(v3 + 104);
  *(void *)&double v75 = v12;
  *((void *)&v75 + 1) = v13;
  if (!a2)
  {
    a3 = 0;
    uint64_t v27 = v72;
    long long v28 = v73[0];
    float64x2x2_t v29 = *(void *)&v73[24];
    LOBYTE(v80[0]) = v73[0];
    uint64_t v30 = v71;
    *(_OWORD *)a1 = v70;
    *(_OWORD *)(a1 + 16) = v30;
    *(_OWORD *)(a1 + 32) = v27;
    *(unsigned char *)(a1 + 48) = v28;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)&v73[8];
    *(void *)(a1 + 72) = v29;
    __n128 v31 = *(_OWORD *)&v73[48];
    *(_OWORD *)(a1 + 80) = *(_OWORD *)&v73[32];
    *(_OWORD *)(a1 + 96) = v31;
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v10;
    *(void *)(a1 + 128) = v12;
    *(void *)(a1 + 136) = v13;
    return a3;
  }
  if (!a3)
  {
LABEL_28:
    __n128 v44 = *(_OWORD *)&v73[32];
    double v45 = v74;
    double v46 = v75;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)&v73[48];
    *(_OWORD *)(a1 + 112) = v45;
    *(_OWORD *)(a1 + 128) = v46;
    uint64_t v47 = *(_OWORD *)v73;
    *(_OWORD *)(a1 + 32) = v72;
    *(_OWORD *)(a1 + 48) = v47;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)&v73[16];
    *(_OWORD *)(a1 + 80) = v44;
    int v48 = v71;
    *(_OWORD *)a1 = v70;
    *(_OWORD *)(a1 + 16) = v48;
    return a3;
  }
  if (a3 < 0)
  {
LABEL_33:
    __break(1u);
  }
  else
  {
    int v57 = v13;
    __n128 v58 = v12;
    BOOL v64 = v10;
    double v65 = (uint64_t (*)(long long *))v9;
    uint64_t v14 = *((void *)&v70 + 1);
    unint64_t v15 = v70;
    uint64_t v16 = *(void *)(v70 + 16);
    uint64_t v17 = v73[0];
    uint64_t v18 = *(void *)&v73[8];
    int64_t v9 = *(void *)&v73[16];
    uint64_t v19 = *((void *)&v71 + 1);
    uint64_t v21 = (void *)*((void *)&v72 + 1);
    float64x2_t v20 = v72;
    if (*(void *)&v73[8] == v16 && *(void *)&v73[16] == v16)
    {
      a3 = 0;
      uint64_t v22 = v73[0];
      uint64_t v23 = (void *)*((void *)&v72 + 1);
      float64x2_t v24 = (void *)*((void *)&v72 + 1);
LABEL_7:
      *(void *)&v73[16] = v9;
      *((void *)&v72 + 1) = v23;
      v73[0] = v17;
      uint64_t v14 = *((void *)&v70 + 1);
      uint64_t v19 = *((void *)&v71 + 1);
      uint64_t v25 = v71;
      float64x2_t v20 = v72;
      uint64_t v26 = v57;
LABEL_26:
      uint64_t v42 = *(void *)&v73[24];
      LOBYTE(v66) = v22;
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v25;
      *(void *)(a1 + 24) = v19;
      *(void *)(a1 + 32) = v20;
      *(void *)(a1 + 40) = v24;
      *(unsigned char *)(a1 + 48) = v22;
      *(void *)(a1 + 56) = v16;
      *(void *)(a1 + 64) = v16;
      *(void *)(a1 + 72) = v42;
      uint64_t v43 = *(_OWORD *)&v73[48];
      *(_OWORD *)(a1 + 80) = *(_OWORD *)&v73[32];
      *(_OWORD *)(a1 + 96) = v43;
      *(void *)(a1 + 112) = v65;
      *(void *)(a1 + 120) = v64;
      *(void *)(a1 + 128) = v58;
      *(void *)(a1 + 136) = v26;
      return a3;
    }
    int v63 = v71;
    uint64_t v54 = a2;
    int v55 = 0;
    double v49 = a1;
    uint64_t v50 = a3;
    int v62 = v70 + 32;
    int v61 = *(void *)(v70 + 16);
    double v56 = *(void *)&v73[8];
    uint64_t v32 = 1;
    int v59 = *((void *)&v71 + 1);
    int v60 = *((void *)&v70 + 1);
LABEL_10:
    double v51 = v32;
    uint64_t v52 = v21;
    float64x2_t v24 = v21;
    double v53 = v17;
    uint64_t v22 = v17;
    while ((v22 & 1) == 0)
    {
      if ((v18 & 0x8000000000000000) != 0)
      {
        *((void *)&v72 + 1) = v52;
        v73[0] = v53 & 1;
        *(void *)&v73[8] = v56;
        *(void *)&v73[16] = v9;
        __break(1u);
LABEL_31:
        *((void *)&v72 + 1) = v52;
        v73[0] = v53 & 1;
        *(void *)&v73[8] = v56;
        *(void *)&v73[16] = v9;
        __break(1u);
LABEL_32:
        *((void *)&v72 + 1) = v52;
        v73[0] = v53 & 1;
        *(void *)&v73[8] = v56;
        *(void *)&v73[16] = v9;
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v33 = *(void *)(v15 + 16);
      if (v33 < v18 || v33 < v9) {
        goto LABEL_31;
      }
      if (v9 < 0) {
        goto LABEL_32;
      }
      __n128 v35 = *(double *)&v24;
      v80[0] = v15;
      v80[1] = v62;
      v80[2] = v18;
      v80[3] = (2 * v9) | 1;
      v80[4] = v14;
      v80[5] = v63;
      uint64_t v84 = v15;
      uint64_t v85 = v14;
      uint64_t v86 = v63;
      uint64_t v87 = v19;
      uint64_t v36 = v20;
      uint64_t v88 = v20;
      swift_bridgeObjectRetain();
      swift_retain();
      long long v37 = sub_184D00978(v9);
      uint64_t v39 = v38;
      uint64_t v18 = v40;
      int64_t v9 = v41;
      uint64_t v22 = v38 & 1;
      unsigned int v81 = *(_OWORD *)&v73[24];
      uint64_t v82 = *(_OWORD *)&v73[40];
      uint64_t v83 = *(void *)&v73[56];
      sub_184D035F4((uint64_t)v80, (uint64_t)&v76, v35);
      swift_release();
      swift_bridgeObjectRelease();
      *(_OWORD *)&v73[24] = v76;
      *(_OWORD *)&v73[40] = v77;
      *(void *)&v73[56] = v78;
      uint64_t v67 = v76;
      uint64_t v68 = v77;
      double v69 = v78;
      uint64_t result = v65(&v67);
      if (result)
      {
        uint64_t v67 = v76;
        uint64_t v68 = v77;
        double v69 = v78;
        uint64_t result = (uint64_t)v58(&v66, &v67);
        unsigned char *v54 = v66;
        if (v51 == v50)
        {
          *(void *)&v73[8] = v18;
          *(void *)&v73[16] = v9;
          *((void *)&v72 + 1) = v37;
          v73[0] = v39 & 1;
          a1 = v49;
          a3 = v50;
          goto LABEL_28;
        }
        ++v54;
        int v55 = v51;
        uint64_t v32 = v51 + 1;
        double v56 = v18;
        uint64_t v21 = v37;
        uint64_t v17 = v22;
        uint64_t v14 = v60;
        uint64_t v16 = v61;
        a3 = v51;
        uint64_t v19 = v59;
        float64x2_t v20 = v36;
        if (v18 == v61)
        {
          float64x2_t v24 = v37;
          int v55 = v51;
          double v56 = v18;
          uint64_t v21 = v37;
          uint64_t v17 = v22;
          if (v9 == v61)
          {
            *(void *)&v73[8] = v18;
            uint64_t v17 = v22;
            uint64_t v23 = v37;
            a1 = v49;
            goto LABEL_7;
          }
        }
        goto LABEL_10;
      }
      uint64_t v14 = v60;
      uint64_t v16 = v61;
      uint64_t v19 = v59;
      float64x2_t v20 = v36;
      float64x2_t v24 = v37;
      if (v18 == v61 && v9 == v61)
      {
        *((void *)&v72 + 1) = v52;
        v73[0] = v53 & 1;
        uint64_t v26 = v57;
        *(void *)&v73[8] = v56;
        *(void *)&v73[16] = v9;
        a1 = v49;
        uint64_t v25 = v63;
        a3 = v55;
        goto LABEL_26;
      }
    }
  }
  *((void *)&v72 + 1) = v52;
  v73[0] = v53 & 1;
  *(void *)&v73[8] = v56;
  *(void *)&v73[16] = v9;
  __break(1u);
  return result;
}

uint64_t sub_184D017EC(uint64_t a1, void *a2, uint64_t a3)
{
  void *(*v24)(double *__return_ptr, uint64_t *);
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  uint64_t v31;
  long long v32;
  long long v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  BOOL v39;
  void (*v40)(uint64_t *__return_ptr, double *);
  long long v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t *);
  void (*v44)(uint64_t *__return_ptr, uint64_t *);
  double v45[5];
  long long v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  long long v52;
  long long v53;
  double v54;
  BOOL v55;
  double v56;
  double v57;
  long long v58;
  uint64_t (*v59)(uint64_t *);
  uint64_t v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;

  long long v7 = v3[1];
  int v61 = *v3;
  int v62 = v7;
  long long v8 = v3[3];
  int v63 = v3[2];
  BOOL v64 = v8;
  int64_t v9 = (uint64_t (*)(uint64_t *))*((void *)v3 + 8);
  uint64_t v10 = *((void *)v3 + 9);
  uint64_t result = sub_184D01DA0((uint64_t)&v50);
  uint64_t v42 = v10;
  uint64_t v43 = v9;
  int v59 = v9;
  int v60 = v10;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_9:
    double v16 = v50;
    double v17 = v51;
    long long v20 = v52;
    long long v21 = v53;
    double v12 = v54;
    BOOL v13 = v55;
    double v15 = v56;
    double v14 = v57;
    long long v22 = v58;
LABEL_29:
    *(double *)a1 = v16;
    *(double *)(a1 + 8) = v17;
    *(_OWORD *)(a1 + 16) = v20;
    *(_OWORD *)(a1 + 32) = v21;
    *(double *)(a1 + 48) = v12;
    *(unsigned char *)(a1 + 56) = v13;
    *(double *)(a1 + 64) = v15;
    *(double *)(a1 + 72) = v14;
    *(_OWORD *)(a1 + 80) = v22;
    *(void *)(a1 + 96) = v43;
    *(void *)(a1 + 104) = v42;
    return a3;
  }
  if (a3 < 0)
  {
LABEL_32:
    __break(1u);
  }
  else
  {
    double v12 = v54;
    BOOL v13 = v55;
    double v15 = v56;
    double v14 = v57;
    double v16 = v50;
    double v17 = v51;
    BOOL v18 = *(void *)&v57 == *(void *)&v51;
    if (*(void *)&v56 == *(void *)&v51 && *(void *)&v57 == *(void *)&v51)
    {
      uint64_t v19 = 0;
LABEL_7:
      double v16 = v50;
      long long v20 = v52;
      long long v21 = v53;
      a3 = v19;
      long long v22 = v58;
LABEL_28:
      double v15 = v17;
      double v14 = v17;
      goto LABEL_29;
    }
    long long v37 = a1;
    __n128 v38 = a2;
    uint64_t v23 = 0;
    __n128 v44 = (void (*)(uint64_t *__return_ptr, uint64_t *))v52;
    __n128 v41 = v52;
    float64x2_t v24 = (void *(*)(double *__return_ptr, uint64_t *))v53;
    uint64_t v32 = v58;
    uint64_t v33 = v53;
    uint64_t v40 = (void (*)(uint64_t *__return_ptr, double *))v58;
    uint64_t v25 = 1;
    uint64_t v26 = v50;
    uint64_t v34 = a3;
LABEL_11:
    __n128 v35 = v23;
    uint64_t v36 = v25;
    uint64_t v27 = v12;
    long long v28 = v15;
    float64x2x2_t v29 = v13;
    while (!v29)
    {
      double v15 = v14;
      float64x2x2_t v29 = v18;
      swift_retain();
      double v12 = 0.0;
      if (!v29)
      {
        uint64_t v39 = v29;
        uint64_t v47 = *(void *)(*(void *)&v16 + 8 * *(void *)&v14);
        v44(&v48, &v47);
        uint64_t v47 = v48;
        uint64_t result = (uint64_t)v24(v45, &v47);
        double v16 = v26;
        double v12 = v45[0];
        *(void *)&uint64_t v30 = *(void *)&v14 + 1;
        double v14 = v17;
        if (*(void *)&v15 + 1 != *(void *)&v17)
        {
          while (1)
          {
            uint64_t v47 = *(void *)(*(void *)&v16 + 8 * *(void *)&v30);
            v44(&v48, &v47);
            uint64_t v47 = v48;
            uint64_t result = (uint64_t)v24(v45, &v47);
            if (v45[0] != v12) {
              break;
            }
            ++*(void *)&v30;
            double v16 = v26;
            if (*(void *)&v17 == *(void *)&v30)
            {
              double v14 = v17;
              goto LABEL_19;
            }
          }
          double v14 = v30;
          double v16 = v26;
        }
LABEL_19:
        float64x2x2_t v29 = v39;
        if (*(uint64_t *)&v14 < *(uint64_t *)&v15)
        {
          __break(1u);
          goto LABEL_32;
        }
      }
      v45[0] = v27;
      v45[1] = v28;
      v45[2] = v15;
      v45[3] = v16;
      v45[4] = v17;
      double v46 = v41;
      v40(&v48, v45);
      swift_release();
      __n128 v31 = v48;
      double v49 = v48;
      uint64_t result = v43(&v49);
      if (result)
      {
        BOOL v13 = v29;
        *__n128 v38 = v31;
        a3 = v34;
        uint64_t v19 = v36;
        if (v36 == v34)
        {
          a1 = v37;
          double v16 = v26;
          long long v20 = v41;
          long long v22 = v32;
          long long v21 = v33;
          goto LABEL_29;
        }
        ++v38;
        uint64_t v25 = v36 + 1;
        BOOL v18 = *(void *)&v14 == *(void *)&v17;
        uint64_t v23 = v36;
        a1 = v37;
        double v16 = v26;
        if (*(void *)&v15 != *(void *)&v17) {
          goto LABEL_11;
        }
        uint64_t v23 = v36;
        if (*(void *)&v14 != *(void *)&v17) {
          goto LABEL_11;
        }
        goto LABEL_7;
      }
      BOOL v18 = *(void *)&v14 == *(void *)&v17;
      uint64_t v27 = v12;
      long long v28 = v15;
      double v16 = v26;
      if (*(void *)&v15 == *(void *)&v17)
      {
        uint64_t v27 = v12;
        long long v28 = v15;
        if (*(void *)&v14 == *(void *)&v17)
        {
          BOOL v13 = v29;
          a1 = v37;
          long long v20 = v41;
          long long v22 = v32;
          long long v21 = v33;
          a3 = v35;
          goto LABEL_28;
        }
      }
    }
  }
  __break(1u);
  return result;
}

char *sub_184D01B54(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_184D01B94(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_184D01B74(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_184D01C90(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_184D01B94(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B948);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = v10 + 32;
  double v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_184D01C90(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB288AF0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = v10 + 32;
  double v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_184D01D8C(uint64_t a1)
{
  return sub_184D01B94(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_184D01DA0@<X0>(uint64_t a1@<X8>)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v7;
  void (*v8)(double *__return_ptr, uint64_t *);
  double v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double v14;

  uint64_t v3 = *(uint64_t **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  unint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v8 = *(void (**)(double *__return_ptr, uint64_t *))(v1 + 32);
  int64_t v7 = *(void *)(v1 + 40);
  if (!v4)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0.0;
    goto LABEL_10;
  }
  swift_retain();
  swift_retain();
  uint64_t v12 = *v3;
  v6(&v13, &v12);
  uint64_t v12 = v13;
  v8(&v14, &v12);
  uint64_t v9 = v14;
  if (v4 == 1)
  {
LABEL_6:
    swift_release();
    uint64_t result = swift_release();
    uint64_t v10 = v4;
    if (v4 < 0) {
      goto LABEL_11;
    }
LABEL_10:
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v7;
    *(double *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = v4 == 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(v1 + 48);
    return result;
  }
  uint64_t v10 = 1;
  while (1)
  {
    uint64_t v12 = v3[v10];
    v6(&v13, &v12);
    uint64_t v12 = v13;
    v8(&v14, &v12);
    if (v14 != v9) {
      break;
    }
    if (v4 == ++v10) {
      goto LABEL_6;
    }
  }
  swift_release();
  uint64_t result = swift_release();
  if ((v10 & 0x8000000000000000) == 0) {
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

void *sub_184D01F14(long long *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, double **a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *(*v16)(double *__return_ptr, double *);
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *result;
  uint64_t v24;
  BOOL v25;
  char v26;
  double v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *(*v33)(double *__return_ptr, double *);
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  double *v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  void (*v56)(double *__return_ptr, double *);
  BOOL v58;
  double v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(double *__return_ptr, double *);
  double v64;
  long long v65;
  uint64_t v66;
  long long v67;
  long long v68;
  long long v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(double *__return_ptr, double *);
  uint64_t v76;
  double v77;
  long long v78;
  uint64_t v79;
  long long v80;
  long long v81;
  long long v82;
  uint64_t v83;
  long long v84;
  long long v85;
  long long v86;
  uint64_t v87;
  long long v88;
  long long v89;
  uint64_t v90;

  long long v13 = a1[2];
  uint64_t v85 = a1[1];
  uint64_t v86 = v13;
  uint64_t v84 = *a1;
  uint64_t v14 = *((void *)a1 + 6);
  double v56 = (void (*)(double *__return_ptr, double *))*((void *)a1 + 7);
  uint64_t v87 = v14;
  uint64_t v15 = *((void *)a1 + 4);
  uint64_t v88 = v84;
  uint64_t v89 = v85;
  uint64_t v90 = v15;
  int v63 = (void (*)(double *__return_ptr, double *))*((void *)&v85 + 1);
  double v16 = (void *(*)(double *__return_ptr, double *))*((void *)&v13 + 1);
  sub_184D02C08((uint64_t)&v88);
  swift_retain();
  sub_184D02C08((uint64_t)&v88);
  swift_retain();
  swift_retain();
  int v60 = COERCE_DOUBLE(sub_184D00B40(0));
  BOOL v18 = v17;
  long long v20 = v19;
  long long v22 = v21;
  sub_184D02A64((uint64_t)&v88);
  uint64_t result = (void *)swift_release();
  float64x2_t v24 = *((void *)&v88 + 1);
  int v61 = v89;
  uint64_t v25 = v22 == *((void *)&v88 + 1);
  if (v20 == *((void *)&v88 + 1) && v22 == *((void *)&v88 + 1))
  {
LABEL_52:
    swift_release();
    swift_release();
    return (void *)swift_release();
  }
  uint64_t v26 = v18 & 1;
  int v62 = v88;
  double v51 = v15;
  uint64_t v52 = *((void *)&v88 + 1);
  while (1)
  {
    uint64_t v27 = v60;
    if (v26) {
      break;
    }
    long long v28 = v20;
    long long v20 = v22;
    float64x2x2_t v29 = v25;
    if (v62) {
      uint64_t v30 = v62 + 8 * v28;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t result = (void *)swift_retain();
    int v60 = 0.0;
    __n128 v58 = v29;
    if (!v29)
    {
      __n128 v31 = v22 + v61;
      if (__OFADD__(v22, v61)) {
        goto LABEL_53;
      }
      if ((v31 & 0x8000000000000000) != 0) {
        goto LABEL_54;
      }
      if (HIDWORD(v31)) {
        goto LABEL_55;
      }
      uint64_t v71 = *(double *)(v62 + 8 * v22);
      LODWORD(v72) = v22 + v61;
      v63(&v64, &v71);
      uint64_t v71 = v64;
      LODWORD(v72) = v65;
      uint64_t result = v16(&v77, &v71);
      if (v22 < 0 || v22 >= v24) {
        goto LABEL_56;
      }
      int v60 = v77;
      long long v22 = v24;
      if (v20 + 1 != v24)
      {
        long long v22 = v20 + 1;
        while (1)
        {
          uint64_t v32 = v22 + v61;
          if (__OFADD__(v22, v61)) {
            break;
          }
          if ((v32 & 0x8000000000000000) != 0) {
            goto LABEL_54;
          }
          if (HIDWORD(v32)) {
            goto LABEL_55;
          }
          uint64_t v71 = *(double *)(v62 + 8 * v22);
          LODWORD(v72) = v22 + v61;
          v63(&v64, &v71);
          uint64_t v71 = v64;
          LODWORD(v72) = v65;
          uint64_t result = v16(&v77, &v71);
          if (v77 != v60) {
            goto LABEL_23;
          }
          if (v22 >= v24) {
            goto LABEL_56;
          }
          if (v24 == ++v22)
          {
            long long v22 = v24;
            goto LABEL_23;
          }
        }
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        break;
      }
LABEL_23:
      if (v22 < v20) {
        goto LABEL_57;
      }
    }
    uint64_t v33 = v16;
    uint64_t v34 = v14;
    uint64_t v71 = v27;
    uint64_t v72 = v30;
    uint64_t v73 = v20 - v28;
    uint64_t v74 = v28;
    double v75 = v63;
    double v76 = v15;
    v56(&v64, &v71);
    uint64_t result = (void *)sub_184D02A64((uint64_t)&v88);
    __n128 v35 = a5 - *a4;
    if (a5 < *a4) {
      goto LABEL_58;
    }
    uint64_t v36 = v64;
    if (a2) {
      long long v37 = a2 + 8 * *a4;
    }
    else {
      long long v37 = 0;
    }
    BOOL v78 = v65;
    uint64_t v80 = v67;
    unsigned int v81 = v68;
    uint64_t v82 = v69;
    double v79 = v66;
    uint64_t v83 = v70;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    __n128 v38 = sub_184D017EC((uint64_t)&v64, (void *)v37, v35);
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = (void *)swift_release();
    uint64_t v14 = v34;
    double v16 = v33;
    float64x2_t v24 = v52;
    if (a6)
    {
      if (v38 < 0) {
        goto LABEL_64;
      }
      if (a7[1] == (double *)v38)
      {
        if (!v38) {
          goto LABEL_38;
        }
        uint64_t v39 = *a7;
        if (**a7 == *(double *)v37)
        {
          if (v38 == 1) {
            goto LABEL_38;
          }
          if (v39[1] == *(double *)(v37 + 8))
          {
            if (v38 == 2) {
              goto LABEL_38;
            }
            if (v39[2] == *(double *)(v37 + 16))
            {
              if (v38 == 3) {
                goto LABEL_38;
              }
              if (v39[3] == *(double *)(v37 + 24))
              {
                uint64_t v40 = v38 - 4;
                __n128 v41 = (double *)(v37 + 32);
                uint64_t v42 = v39 + 4;
                while (v40)
                {
                  uint64_t v43 = *v42++;
                  __n128 v44 = v43;
                  double v45 = *v41++;
                  --v40;
                  if (v44 != v45) {
                    goto LABEL_43;
                  }
                }
LABEL_38:
                swift_release();
                swift_release();
                swift_release();
                uint64_t result = (void *)swift_release();
                goto LABEL_50;
              }
            }
          }
        }
      }
LABEL_43:
      *a7 = (double *)v37;
      a7[1] = (double *)v38;
    }
    double v46 = *a4 + v38;
    if (__OFADD__(*a4, v38)) {
      goto LABEL_59;
    }
    *a4 = v46;
    uint64_t v47 = *a10;
    *(double *)(a8 + 8 * *a10) = v36;
    int v48 = __OFADD__(a13, v46);
    double v49 = a13 + v46;
    if (v48) {
      goto LABEL_60;
    }
    if ((v49 & 0x8000000000000000) != 0) {
      goto LABEL_61;
    }
    if (HIDWORD(v49)) {
      goto LABEL_62;
    }
    *(_DWORD *)(a11 + 4 * v47) = v49;
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = (void *)swift_release();
    if (__OFADD__(*a10, 1)) {
      goto LABEL_63;
    }
    ++*a10;
LABEL_50:
    uint64_t v25 = v22 == v52;
    uint64_t v15 = v51;
    uint64_t v26 = v58;
    if (v20 == v52 && v22 == v52) {
      goto LABEL_52;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_184D02488(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0;
}

uint64_t sub_184D02498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v6;
    *(void *)(a2 + 32) = result;
    *(void *)(a2 + 40) = v5;
    *(void *)(a2 + 48) = v4;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_184D024F8(uint64_t a1)
{
  return a1;
}

void *sub_184D02568(long long *a1)
{
  return sub_184D01F14(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), *(double ***)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void **)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104));
}

uint64_t sub_184D025AC()
{
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_184D025BC@<X0>(double *a1@<X0>, void *a2@<X8>)
{
  return sub_184D00380(a1, (double *)(v2 + 16), a2);
}

uint64_t dispatch thunk of FloatRangeExpression.bounded.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unint64_t sub_184D025DC()
{
  unint64_t result = qword_1E8F8BCE8;
  if (!qword_1E8F8BCE8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E8F8BCF0);
    sub_184CF44B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BCE8);
  }
  return result;
}

uint64_t sub_184D02650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCE0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  type metadata accessor for Region.Operation();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1850C3DB8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCE0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  type metadata accessor for Region.Operation();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1850C3DB8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t sub_184D028C4@<X0>(double *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCE0) - 8);
  uint64_t result = sub_184CFFA0C(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), *a1);
  *a2 = v7;
  return result;
}

uint64_t sub_184D0293C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Region.Operation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_184D029A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BCF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_184D02A08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_184D02A64(uint64_t a1)
{
  return a1;
}

uint64_t sub_184D02A90(uint64_t a1)
{
  return a1;
}

uint64_t sub_184D02AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_184D02B40(uint64_t a1)
{
  return a1;
}

uint64_t sub_184D02BA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_184D02C08(uint64_t a1)
{
  return a1;
}

uint64_t sub_184D02C34()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_184D02C44(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  long long v3 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  float64x2_t v6[3] = v3;
  uint64_t v7 = *(void *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return v2(v6);
}

double sub_184D02C94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184CFF78C(a1, a2);
}

uint64_t sub_184D02CD4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t sub_184D02D5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_184CFF820(a1, v3[4], v3[5], v3[6], (uint64_t)v3+ ((*(unsigned __int8 *)(*(void *)(v3[2] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3[2] - 8) + 80)), v3[2], v3[3], a2, a3);
}

uint64_t objectdestroy_39Tm()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

double sub_184D02E30@<D0>(double *a1@<X8>)
{
  sub_1850C3A48();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t sub_184D02EE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_184D02F2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_184D02F58(uint64_t a1)
{
  return a1;
}

uint64_t sub_184D02F84()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

BOOL sub_184D02F94(uint64_t a1)
{
  return sub_184D037E4(a1, *(double *)(v1 + 16));
}

uint64_t sub_184D02F9C()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

void *sub_184D02FAC(void *a1)
{
  return sub_184D037FC(a1, *(unsigned char *)(v1 + 16));
}

BOOL sub_184D02FB4(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL sub_184D02FC8(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL sub_184D02FDC(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL sub_184D02FF0(double *a1, double *a2)
{
  return *a2 < *a1;
}

BOOL sub_184D03004(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_184D03018(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  double v16 = (double *)(a1 + 16);
  swift_beginAccess();
  if (*(double *)(a1 + 24) == a7) {
    goto LABEL_2;
  }
  swift_beginAccess();
  if (*v16 != a6)
  {
    swift_beginAccess();
    uint64_t v28 = *(void *)(a5 + 16);
    swift_beginAccess();
    *(void *)(a4 + 16) = v28;
    *(unsigned char *)(a4 + 24) = 1;
    goto LABEL_2;
  }
  BOOL v18 = (char **)(a2 + 16);
  swift_beginAccess();
  uint64_t v19 = *(void *)(a2 + 16) + 32;
  uint64_t v20 = *(void *)(*(void *)(a2 + 16) + 16);
  swift_bridgeObjectRetain();
  v21.n128_f64[0] = a7;
  unint64_t v22 = sub_184CD3BE4(v19, v20, v21);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v23 = *(void *)(*(void *)(a2 + 16) + 16);
  if (v22 != v23)
  {
    if (v22 >= v23)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (*(double *)(*(void *)(a2 + 16) + 8 * v22 + 32) == a7) {
      goto LABEL_9;
    }
  }
  swift_beginAccess();
  if (*((void *)*v18 + 2) < v22)
  {
    __break(1u);
    goto LABEL_22;
  }
  sub_184D042C4(v22, v22, a7);
LABEL_9:
  BOOL v18 = (char **)(a3 + 16);
  swift_beginAccess();
  double v7 = *(double *)(a1 + 24);
  if (v7 > a7)
  {
    swift_beginAccess();
    if (v7 >= a7)
    {
      double v8 = *v16;
      swift_beginAccess();
      a3 = *v18;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *BOOL v18 = a3;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_12:
        unint64_t v26 = *((void *)a3 + 2);
        unint64_t v25 = *((void *)a3 + 3);
        if (v26 >= v25 >> 1)
        {
          a3 = sub_184CC5DF0((char *)(v25 > 1), v26 + 1, 1, a3);
          *BOOL v18 = a3;
        }
        *((void *)a3 + 2) = v26 + 1;
        uint64_t v27 = &a3[32 * v26];
        *((double *)v27 + 4) = v8;
        *((double *)v27 + 5) = a7;
        *((double *)v27 + 6) = v7;
        v27[56] = 0;
        goto LABEL_2;
      }
LABEL_24:
      a3 = sub_184CC5DF0(0, *((void *)a3 + 2) + 1, 1, a3);
      *BOOL v18 = a3;
      goto LABEL_12;
    }
LABEL_23:
    __break(1u);
    __break(1u);
    goto LABEL_24;
  }
  swift_beginAccess();
  double v29 = *v16;
  swift_beginAccess();
  uint64_t v30 = *v18;
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  *BOOL v18 = v30;
  if ((v31 & 1) == 0)
  {
    uint64_t v30 = sub_184CC5DF0(0, *((void *)v30 + 2) + 1, 1, v30);
    *BOOL v18 = v30;
  }
  unint64_t v33 = *((void *)v30 + 2);
  unint64_t v32 = *((void *)v30 + 3);
  if (v33 >= v32 >> 1)
  {
    uint64_t v30 = sub_184CC5DF0((char *)(v32 > 1), v33 + 1, 1, v30);
    *BOOL v18 = v30;
  }
  *((void *)v30 + 2) = v33 + 1;
  uint64_t v34 = &v30[32 * v33];
  *((double *)v34 + 4) = v29;
  *((double *)v34 + 5) = v7;
  *((double *)v34 + 6) = a7;
  v34[56] = 1;
LABEL_2:
  uint64_t result = swift_beginAccess();
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  return result;
}

uint64_t sub_184D0336C(uint64_t a1, uint64_t a2, double *a3, double *a4, void *a5, void (*a6)(uint64_t, double, double))
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned __int8 *)(a2 + 8) == 255)
  {
    long long v13 = *(double **)(a1 + 8);
    switch(*(_DWORD *)a1)
    {
      case 0:
        BOOL v15 = (~*(void *)a3 & 0x7FF0000000000000) != 0 || (*(void *)a3 & 0xFFFFFFFFFFFFFLL) == 0;
        if (v15 || (uint64_t v16 = *((void *)a3 + 1), (~v16 & 0x7FF0000000000000) != 0) || (v16 & 0xFFFFFFFFFFFFFLL) == 0)
        {
          swift_beginAccess();
          uint64_t v23 = *a5 - 1;
          if (__OFSUB__(*a5, 1)) {
            goto LABEL_24;
          }
          swift_beginAccess();
          *(void *)a2 = v23;
          *(unsigned char *)(a2 + 8) = 2;
        }
        else
        {
          double v17 = *v13;
          uint64_t v18 = *((void *)v13 + 1);
          swift_beginAccess();
          *a4 = v17;
          *((void *)a4 + 1) = v18;
          *a3 = v17;
          *((void *)a3 + 1) = v18;
        }
LABEL_20:
        uint64_t result = swift_beginAccess();
        if (!__OFADD__(*a5, 1))
        {
          ++*a5;
          return result;
        }
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x184D03574);
      case 1:
        a6(result, *v13, v13[1]);
        goto LABEL_20;
      case 2:
      case 3:
        swift_beginAccess();
        uint64_t v14 = *a5;
        swift_beginAccess();
        *(void *)a2 = v14;
        *(unsigned char *)(a2 + 8) = 0;
        goto LABEL_20;
      case 4:
        double v19 = *a3;
        double v20 = a3[1];
        uint64_t v21 = swift_beginAccess();
        if (v19 != *a4 || v20 != a4[1]) {
          a6(v21, v19, v20);
        }
        *(int64x2_t *)a3 = vdupq_n_s64(0x7FF8000000000000uLL);
        goto LABEL_20;
      default:
        goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_184D03588(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

BOOL sub_184D035B4(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
    return 0;
  }
  return *(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

uint64_t sub_184D035F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  long long v7 = *(_OWORD *)(a1 + 16);
  v28[0] = *(_OWORD *)a1;
  v28[1] = v7;
  uint64_t v8 = *((void *)&v28[0] + 1);
  uint64_t v9 = v7;
  uint64_t v10 = *(uint64_t (**)(long long *))(a1 + 32);
  uint64_t v11 = *((void *)&v7 + 1) >> 1;
  sub_184D0378C((uint64_t)v28);
  uint64_t result = swift_retain();
  uint64_t v23 = v5;
  uint64_t v24 = v8 + 16;
  uint64_t v13 = v9;
  uint64_t v20 = v5;
  uint64_t v21 = v6;
  while (2)
  {
    if (v13 != v11)
    {
      uint64_t v14 = (uint64_t *)(v24 + 32 * v13);
      uint64_t v15 = v13;
      while (1)
      {
        if (v13 < v9 || v15 >= v11)
        {
          __break(1u);
LABEL_18:
          __break(1u);
          return result;
        }
        int v16 = *((unsigned __int8 *)v14 + 8);
        uint64_t v17 = v15 + 1;
        uint64_t v18 = *v14;
        long long v25 = *((_OWORD *)v14 - 1);
        uint64_t v26 = v18;
        char v27 = v16;
        uint64_t result = v10(&v25);
        if (result) {
          break;
        }
        v14 += 4;
        ++v15;
        if (v11 == v17) {
          goto LABEL_16;
        }
      }
      if (v16)
      {
        uint64_t v13 = v15 + 1;
        BOOL v19 = __OFADD__(v6++, 1);
        if (!v19) {
          continue;
        }
        goto LABEL_18;
      }
      uint64_t v13 = v15 + 1;
      BOOL v19 = __OFADD__(v23++, 1);
      if (!v19) {
        continue;
      }
      __break(1u);
    }
    break;
  }
LABEL_16:
  sub_184D037B8((uint64_t)v28);
  uint64_t result = swift_release();
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = v21;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v23;
  return result;
}

double sub_184D03744@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  sub_184D035F4((uint64_t)(a1 + 1), (uint64_t)v5, *a1);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_184D0378C(uint64_t a1)
{
  return a1;
}

uint64_t sub_184D037B8(uint64_t a1)
{
  return a1;
}

BOOL sub_184D037E4(uint64_t a1, double a2)
{
  return *(double *)(a1 + 16) > a2 && *(double *)(a1 + 8) <= a2;
}

void *sub_184D037FC(void *result, char a2)
{
  uint64_t v2 = result[1];
  uint64_t v3 = result[2];
  uint64_t v4 = result[3];
  uint64_t v5 = result[4];
  if ((a2 & 1) == 0)
  {
    if (__OFSUB__(v2, v3))
    {
      __break(1u);
    }
    else if (!__OFSUB__(v4, v5))
    {
      return (void *)((v4 != v5) ^ (v2 != v3));
    }
    __break(1u);
    goto LABEL_10;
  }
  BOOL v6 = __OFADD__(v2, v3);
  uint64_t v7 = v2 + v3;
  if (v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t v8 = v4 + v5;
  if (!v6) {
    return (void *)(((v8 & 0x8000000000000001) == 1) ^ ((v7 & 0x8000000000000001) == 1));
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_184D03870(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_184D043DC((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_184D038E0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_184D038E0(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1850C3D58();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_142;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v87 = *a1;
      uint64_t v88 = -1;
      uint64_t v89 = 1;
      uint64_t v90 = *a1;
      do
      {
        uint64_t v91 = v88;
        uint64_t v92 = v90;
        do
        {
          double v93 = *(double *)(v92 + 32);
          if (v93 >= *(double *)v92) {
            break;
          }
          if (!v87) {
            goto LABEL_146;
          }
          char v94 = *(unsigned char *)(v92 + 56);
          long long v95 = *(_OWORD *)(v92 + 40);
          long long v96 = *(_OWORD *)(v92 + 16);
          *(_OWORD *)(v92 + 32) = *(_OWORD *)v92;
          *(_OWORD *)(v92 + 48) = v96;
          *(double *)uint64_t v92 = v93;
          *(_OWORD *)(v92 + 8) = v95;
          *(unsigned char *)(v92 + 24) = v94;
          v92 -= 32;
        }
        while (!__CFADD__(v91++, 1));
        ++v89;
        v90 += 32;
        --v88;
      }
      while (v89 != v3);
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_141;
    }
    uint64_t v6 = result;
    uint64_t v106 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      uint64_t result = sub_1850C3A78();
      *(void *)(result + 16) = v7;
      uint64_t v108 = result;
      uint64_t v112 = (double *)(result + 32);
LABEL_13:
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v107 = *a1 + 64;
      uint64_t v105 = *a1 + 24;
      uint64_t v11 = MEMORY[0x1E4FBC860];
      uint64_t v109 = v6;
      uint64_t v110 = v3;
      uint64_t v111 = v10;
      while (1)
      {
        uint64_t v13 = v9++;
        if (v9 < v3)
        {
          double v14 = *(double *)(v10 + 32 * v9);
          uint64_t v15 = 32 * v13;
          double v16 = *(double *)(v10 + 32 * v13);
          uint64_t v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            uint64_t v17 = (double *)(v107 + 32 * v13);
            while (v14 < v16 != *v17 >= *(v17 - 4))
            {
              ++v9;
              v17 += 4;
              if (v3 == v9)
              {
                uint64_t v9 = v3;
                break;
              }
            }
          }
          if (v14 < v16)
          {
            if (v9 < v13) {
              goto LABEL_143;
            }
            if (v13 < v9)
            {
              uint64_t v18 = 32 * v9 - 32;
              uint64_t v19 = v9;
              uint64_t v20 = v13;
              do
              {
                if (v20 != --v19)
                {
                  if (!v10) {
                    goto LABEL_149;
                  }
                  uint64_t v23 = (_OWORD *)(v10 + v15);
                  uint64_t v24 = (_OWORD *)(v10 + v18);
                  long long v25 = *(_OWORD *)(v10 + v15);
                  uint64_t v26 = *(void *)(v10 + v15 + 16);
                  char v27 = *(unsigned char *)(v10 + v15 + 24);
                  if (v15 != v18 || v23 >= v24 + 2)
                  {
                    long long v21 = v24[1];
                    *uint64_t v23 = *v24;
                    v23[1] = v21;
                  }
                  uint64_t v22 = v10 + v18;
                  *(_OWORD *)uint64_t v22 = v25;
                  *(void *)(v22 + 16) = v26;
                  *(unsigned char *)(v22 + 24) = v27;
                }
                ++v20;
                v18 -= 32;
                v15 += 32;
              }
              while (v20 < v19);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_140;
          }
          if (v9 - v13 < v6)
          {
            uint64_t v28 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_144;
            }
            if (v28 >= v3) {
              uint64_t v28 = v3;
            }
            if (v28 < v13)
            {
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
              return result;
            }
            if (v9 != v28)
            {
              uint64_t v29 = v105 + 32 * v9;
              do
              {
                uint64_t v30 = v13;
                uint64_t v31 = v29;
                do
                {
                  unint64_t v32 = (_OWORD *)(v31 - 24);
                  double v33 = *(double *)(v31 - 24);
                  if (v33 >= *(double *)(v31 - 56)) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_147;
                  }
                  long long v35 = *(_OWORD *)(v31 - 56);
                  long long v34 = *(_OWORD *)(v31 - 40);
                  *(unsigned char *)(v31 - 32) = *(unsigned char *)v31;
                  v31 -= 32;
                  long long v36 = *(_OWORD *)(v31 + 16);
                  *unint64_t v32 = v35;
                  v32[1] = v34;
                  *(double *)(v31 - 24) = v33;
                  *(_OWORD *)(v31 - 16) = v36;
                  ++v30;
                }
                while (v9 != v30);
                ++v9;
                v29 += 32;
              }
              while (v9 != v28);
              uint64_t v9 = v28;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_135;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_184D041B4(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        unint64_t v38 = *(void *)(v11 + 16);
        unint64_t v37 = *(void *)(v11 + 24);
        unint64_t v12 = v38 + 1;
        uint64_t v10 = v111;
        if (v38 >= v37 >> 1)
        {
          uint64_t result = (uint64_t)sub_184D041B4((char *)(v37 > 1), v38 + 1, 1, (char *)v11);
          uint64_t v10 = v111;
          uint64_t v11 = result;
        }
        *(void *)(v11 + 16) = v12;
        uint64_t v39 = v11 + 32;
        uint64_t v40 = (uint64_t *)(v11 + 32 + 16 * v38);
        *uint64_t v40 = v13;
        v40[1] = v9;
        if (v38)
        {
          while (1)
          {
            unint64_t v41 = v12 - 1;
            if (v12 >= 4)
            {
              unint64_t v46 = v39 + 16 * v12;
              uint64_t v47 = *(void *)(v46 - 64);
              uint64_t v48 = *(void *)(v46 - 56);
              BOOL v52 = __OFSUB__(v48, v47);
              uint64_t v49 = v48 - v47;
              if (v52) {
                goto LABEL_124;
              }
              uint64_t v51 = *(void *)(v46 - 48);
              uint64_t v50 = *(void *)(v46 - 40);
              BOOL v52 = __OFSUB__(v50, v51);
              uint64_t v44 = v50 - v51;
              char v45 = v52;
              if (v52) {
                goto LABEL_125;
              }
              unint64_t v53 = v12 - 2;
              uint64_t v54 = (uint64_t *)(v39 + 16 * (v12 - 2));
              uint64_t v56 = *v54;
              uint64_t v55 = v54[1];
              BOOL v52 = __OFSUB__(v55, v56);
              uint64_t v57 = v55 - v56;
              if (v52) {
                goto LABEL_126;
              }
              BOOL v52 = __OFADD__(v44, v57);
              uint64_t v58 = v44 + v57;
              if (v52) {
                goto LABEL_128;
              }
              if (v58 >= v49)
              {
                double v76 = (uint64_t *)(v39 + 16 * v41);
                uint64_t v78 = *v76;
                uint64_t v77 = v76[1];
                BOOL v52 = __OFSUB__(v77, v78);
                uint64_t v79 = v77 - v78;
                if (v52) {
                  goto LABEL_134;
                }
                BOOL v69 = v44 < v79;
                goto LABEL_87;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v70 = *(void *)(v11 + 32);
                uint64_t v71 = *(void *)(v11 + 40);
                BOOL v52 = __OFSUB__(v71, v70);
                uint64_t v63 = v71 - v70;
                char v64 = v52;
                goto LABEL_81;
              }
              uint64_t v43 = *(void *)(v11 + 32);
              uint64_t v42 = *(void *)(v11 + 40);
              BOOL v52 = __OFSUB__(v42, v43);
              uint64_t v44 = v42 - v43;
              char v45 = v52;
            }
            if (v45) {
              goto LABEL_127;
            }
            unint64_t v53 = v12 - 2;
            int v59 = (uint64_t *)(v39 + 16 * (v12 - 2));
            uint64_t v61 = *v59;
            uint64_t v60 = v59[1];
            BOOL v62 = __OFSUB__(v60, v61);
            uint64_t v63 = v60 - v61;
            char v64 = v62;
            if (v62) {
              goto LABEL_129;
            }
            double v65 = (uint64_t *)(v39 + 16 * v41);
            uint64_t v67 = *v65;
            uint64_t v66 = v65[1];
            BOOL v52 = __OFSUB__(v66, v67);
            uint64_t v68 = v66 - v67;
            if (v52) {
              goto LABEL_131;
            }
            if (__OFADD__(v63, v68)) {
              goto LABEL_133;
            }
            if (v63 + v68 >= v44)
            {
              BOOL v69 = v44 < v68;
LABEL_87:
              if (v69) {
                unint64_t v41 = v53;
              }
              goto LABEL_89;
            }
LABEL_81:
            if (v64) {
              goto LABEL_130;
            }
            uint64_t v72 = (uint64_t *)(v39 + 16 * v41);
            uint64_t v74 = *v72;
            uint64_t v73 = v72[1];
            BOOL v52 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v52) {
              goto LABEL_132;
            }
            if (v75 < v63) {
              goto LABEL_15;
            }
LABEL_89:
            unint64_t v80 = v41 - 1;
            if (v41 - 1 >= v12)
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            if (!v10) {
              goto LABEL_148;
            }
            uint64_t v81 = v11;
            uint64_t v82 = (uint64_t *)(v39 + 16 * v80);
            uint64_t v83 = *v82;
            uint64_t v84 = (void *)(v39 + 16 * v41);
            uint64_t v85 = v84[1];
            uint64_t result = sub_184D03FAC((double *)(v10 + 32 * *v82), (double *)(v10 + 32 * *v84), v10 + 32 * v85, v112);
            if (v1) {
              goto LABEL_97;
            }
            if (v85 < v83) {
              goto LABEL_121;
            }
            if (v41 > *(void *)(v81 + 16)) {
              goto LABEL_122;
            }
            uint64_t *v82 = v83;
            *(void *)(v39 + 16 * v80 + 8) = v85;
            unint64_t v86 = *(void *)(v81 + 16);
            if (v41 >= v86) {
              goto LABEL_123;
            }
            uint64_t v11 = v81;
            unint64_t v12 = v86 - 1;
            uint64_t result = (uint64_t)memmove((void *)(v39 + 16 * v41), v84 + 2, 16 * (v86 - 1 - v41));
            *(void *)(v81 + 16) = v86 - 1;
            uint64_t v10 = v111;
            if (v86 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v109;
        uint64_t v3 = v110;
        if (v9 >= v110)
        {
          uint64_t v8 = v108;
          goto LABEL_107;
        }
      }
    }
    uint64_t v8 = MEMORY[0x1E4FBC860];
    uint64_t v112 = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 == 1)
    {
      uint64_t v108 = MEMORY[0x1E4FBC860];
      goto LABEL_13;
    }
    unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_107:
    uint64_t result = v11;
    uint64_t v108 = v8;
    if (v12 >= 2)
    {
      uint64_t v98 = *v106;
      do
      {
        unint64_t v99 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_136;
        }
        if (!v98) {
          goto LABEL_150;
        }
        uint64_t v100 = result;
        uint64_t v101 = *(void *)(result + 32 + 16 * v99);
        uint64_t v102 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_184D03FAC((double *)(v98 + 32 * v101), (double *)(v98 + 32 * *(void *)(result + 32 + 16 * (v12 - 1))), v98 + 32 * v102, v112);
        if (v1) {
          break;
        }
        if (v102 < v101) {
          goto LABEL_137;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_184D042B0(v100);
          uint64_t v100 = result;
        }
        if (v99 >= *(void *)(v100 + 16)) {
          goto LABEL_138;
        }
        unint64_t v103 = (void *)(v100 + 32 + 16 * v99);
        *unint64_t v103 = v101;
        v103[1] = v102;
        unint64_t v104 = *(void *)(v100 + 16);
        if (v12 > v104) {
          goto LABEL_139;
        }
        memmove((void *)(v100 + 32 + 16 * (v12 - 1)), (const void *)(v100 + 32 + 16 * v12), 16 * (v104 - v12));
        uint64_t result = v100;
        *(void *)(v100 + 16) = v104 - 1;
        unint64_t v12 = v104 - 1;
      }
      while (v104 > 2);
    }
LABEL_97:
    swift_bridgeObjectRelease();
    *(void *)(v108 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_184D03FAC(double *__dst, double *__src, unint64_t a3, double *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = (char *)__src - (char *)__dst + 31;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v9 = (char *)__src - (char *)__dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 5;
  if (v10 >= v13)
  {
    uint64_t v19 = 4 * v13;
    if (a4 != __src || &__src[v19] <= a4) {
      memmove(a4, __src, 32 * v13);
    }
    uint64_t v15 = &v4[v19];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_40;
    }
    uint64_t v20 = (double *)(a3 - 32);
    while (1)
    {
      long long v21 = v20 + 4;
      uint64_t v22 = v6 - 4;
      if (*(v15 - 4) >= *(v6 - 4))
      {
        uint64_t v22 = v15 - 4;
        if (v21 != v15)
        {
          v15 -= 4;
          goto LABEL_37;
        }
        BOOL v23 = v20 >= v15;
        v15 -= 4;
        if (v23) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v21 != v6)
        {
          v6 -= 4;
LABEL_37:
          long long v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
          *((_OWORD *)v20 + 1) = v24;
          goto LABEL_38;
        }
        BOOL v23 = v20 >= v6;
        v6 -= 4;
        if (v23) {
          goto LABEL_37;
        }
      }
LABEL_38:
      if (v6 > v7)
      {
        v20 -= 4;
        if (v15 > v4) {
          continue;
        }
      }
      goto LABEL_40;
    }
  }
  size_t v14 = 4 * v10;
  if (a4 != __dst || &__dst[v14] <= a4) {
    memmove(a4, __dst, v14 * 8);
  }
  uint64_t v15 = &v4[v14];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (*v6 < *v4)
    {
      double v16 = v6;
      BOOL v17 = v7 == v6;
      v6 += 4;
      if (!v17) {
        goto LABEL_16;
      }
LABEL_17:
      v7 += 4;
      if (v4 >= v15 || (unint64_t)v6 >= a3) {
        goto LABEL_19;
      }
    }
    double v16 = v4;
    BOOL v17 = v7 == v4;
    v4 += 4;
    if (v17) {
      goto LABEL_17;
    }
LABEL_16:
    long long v18 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
    *((_OWORD *)v7 + 1) = v18;
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v6 = v7;
LABEL_40:
  size_t v25 = ((char *)v15 - (char *)v4 + ((char *)v15 - (char *)v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0;
  if (v6 != v4 || v6 >= (double *)((char *)v4 + v25)) {
    memmove(v6, v4, v25);
  }
  return 1;
}

char *sub_184D041B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B950);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_184D042B0(uint64_t a1)
{
  return sub_184D041B4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_184D042C4(unint64_t result, int64_t a2, double a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v12 = v6 + v9;
    }
    else {
      int64_t v12 = v6;
    }
    uint64_t result = (unint64_t)sub_184CC5EE8((char *)result, v12, 1, (char *)v5);
    unint64_t v5 = result;
  }
  uint64_t v13 = (double *)(v5 + 32 + 8 * v7);
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(v5 + 16);
  BOOL v15 = __OFSUB__(v14, a2);
  uint64_t v16 = v14 - a2;
  if (v15) {
    goto LABEL_25;
  }
  uint64_t result = (unint64_t)(v13 + 1);
  BOOL v17 = (double *)(v5 + 32 + 8 * a2);
  if (v13 + 1 != v17 || result >= (unint64_t)&v17[v16]) {
    uint64_t result = (unint64_t)memmove((void *)result, v17, 8 * v16);
  }
  uint64_t v18 = *(void *)(v5 + 16);
  BOOL v15 = __OFADD__(v18, v9);
  uint64_t v19 = v18 + v9;
  if (!v15)
  {
    *(void *)(v5 + 16) = v19;
LABEL_19:
    *uint64_t v13 = a3;
    *uint64_t v3 = v5;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

char *sub_184D043DC(uint64_t a1)
{
  return sub_184CC5DF0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_184D043F0(const CGPath *a1)
{
  uint64_t v19 = a1;
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v2;
  int64x2_t v18 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v3 = swift_allocObject();
  *(int64x2_t *)(v3 + 16) = v18;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = -1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  int64_t v6 = (void *)swift_allocObject();
  v6[2] = v3;
  float64x2_t v6[3] = v1;
  _OWORD v6[4] = v16;
  v6[5] = v4;
  v6[6] = v5;
  unint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v4 + 16;
  void v7[3] = &v18;
  v7[4] = v3 + 16;
  void v7[5] = v5 + 16;
  BOOL v15 = (void *)(v5 + 16);
  v7[6] = sub_184D0491C;
  v7[7] = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_184D04964;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_184D04984;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_184D03588;
  aBlock[3] = &block_descriptor;
  unint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v19, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v9)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    uint64_t v11 = *(unsigned __int8 *)(v4 + 24);
    if (v11 != 255)
    {
      uint64_t v12 = *(void *)(v4 + 16);
      sub_184D049C4();
      swift_allocError();
      *(void *)uint64_t v13 = v12;
LABEL_11:
      *(unsigned char *)(v13 + 8) = v11;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      return v11;
    }
    if ((~v18.i64[0] & 0x7FF0000000000000) == 0
      && (v18.i64[0] & 0xFFFFFFFFFFFFFLL) != 0
      && (~v18.i64[1] & 0x7FF0000000000000) == 0
      && (v18.i64[1] & 0xFFFFFFFFFFFFFLL) != 0)
    {
      swift_beginAccess();
      sub_184D03870((char **)(v16 + 16));
      swift_endAccess();
      swift_release();

      swift_beginAccess();
      uint64_t v11 = *(void *)(v1 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return v11;
    }
    uint64_t result = swift_beginAccess();
    uint64_t v14 = *v15 - 1;
    if (!__OFSUB__(*v15, 1))
    {
      sub_184D049C4();
      swift_allocError();
      *(void *)uint64_t v13 = v14;
      uint64_t v11 = 2;
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_184D0486C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_184D048A4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_184D048B4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_184D048C4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_184D0491C(double a1, double a2)
{
  return sub_184D03018(*(void *)(v2 + 16), *(void *)(v2 + 24), *(char **)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a1, a2);
}

uint64_t sub_184D0492C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_184D04964(uint64_t a1)
{
  return sub_184D0336C(a1, *(void *)(v1 + 16), *(double **)(v1 + 24), *(double **)(v1 + 32), *(void **)(v1 + 40), *(void (**)(uint64_t, double, double))(v1 + 48));
}

uint64_t sub_184D04974()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_184D04984()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_184D049C4()
{
  unint64_t result = qword_1E8F8BD10;
  if (!qword_1E8F8BD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BD10);
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for HorizontalCrossing(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HorizontalCrossing(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HorizontalCrossing()
{
  return &type metadata for HorizontalCrossing;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VerticalLine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalLine()
{
  return &type metadata for VerticalLine;
}

unint64_t sub_184D04B54()
{
  unint64_t result = qword_1E8F8BD18;
  if (!qword_1E8F8BD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BD18);
  }
  return result;
}

ValueMetadata *type metadata accessor for Crossing()
{
  return &type metadata for Crossing;
}

double sub_184D04BBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 1;
  return result;
}

double sub_184D04BE0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 1;
  *(_DWORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 20) = 0;
  return result;
}

double sub_184D04C04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = *(double *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 8);
  *(void *)a3 = *(void *)a1;
  *(_DWORD *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 16) = v5;
  *(unsigned char *)(a3 + 20) = 0;
  return result;
}

uint64_t sub_184D04C28@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = (int *)(result + 8);
  int v4 = (int *)(result + 16);
  char v5 = *(unsigned char *)(result + 20);
  char v6 = *(unsigned char *)(v2 + 20);
  if (*(unsigned char *)(result + 12)) {
    int v3 = (int *)(v2 + 8);
  }
  int v7 = *v3;
  char v8 = *(unsigned char *)(result + 12) & *(unsigned char *)(v2 + 12);
  if (*(unsigned char *)(result + 20)) {
    int v4 = (int *)(v2 + 16);
  }
  int v9 = *v4;
  *(void *)a2 = *(void *)result;
  *(_DWORD *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 12) = v8;
  *(_DWORD *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 20) = v5 & v6;
  return result;
}

unsigned char *sub_184D04C84@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_184D04C90(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unsigned char *sub_184D04C98@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

unsigned char *sub_184D04CAC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

unsigned char *sub_184D04CC0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_184D04CD4(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_184D04D04@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_184D04D30@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned char *sub_184D04D54(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *sub_184D04D68(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *sub_184D04D7C(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *sub_184D04D90@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_184D04DA4(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_184D04DB8(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_184D04DCC(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_184D04DE0()
{
  return *v0 == 0;
}

uint64_t sub_184D04DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

unsigned char *sub_184D04E08(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_184D04E1C@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_184D04E2C(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_184D04E38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_184D04E4C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = sub_184CE22F0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_184D04E8C()
{
  uint64_t result = sub_184D05048((uint64_t)&unk_1ED0998F8);
  byte_1E8F9E540 = result;
  return result;
}

uint64_t sub_184D04EB4()
{
  uint64_t result = sub_184D05048((uint64_t)&unk_1ED099920);
  byte_1E8F9E541 = result;
  return result;
}

uint64_t sub_184D04EDC()
{
  uint64_t result = sub_184D05048((uint64_t)&unk_1ED099948);
  byte_1E8F9E542 = result;
  return result;
}

uint64_t sub_184D04F04()
{
  uint64_t result = sub_184D05048((uint64_t)&unk_1ED099970);
  byte_1E8F9E543 = result;
  return result;
}

double sub_184D04F2C@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result = *a1;
  *(double *)a2 = *a1;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

double sub_184D04F40@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result = *a1;
  *(double *)a2 = *a1;
  *(unsigned char *)(a2 + 8) = 2;
  return result;
}

double sub_184D04F54@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result = *a1;
  *(double *)a2 = *a1;
  *(unsigned char *)(a2 + 8) = 3;
  return result;
}

double sub_184D04F68@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)a1;
  char v4 = *(unsigned char *)(v2 + 8) ^ *(unsigned char *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_184D04F84(char a1, unsigned __int8 a2, unsigned int a3)
{
  int v3 = (a3 >> 8) & 1;
  unsigned int v4 = (a3 ^ a1);
  int v5 = ((1 << (a3 ^ a1)) & a2) != 0;
  int v6 = v5 ^ ((unsigned __int16)(a3 & 0x100) >> 8);
  int v7 = v5 << 8;
  if (v4 > 7) {
    int v7 = 0;
  }
  else {
    int v3 = v6;
  }
  int v8 = v7 | v4;
  if (v3) {
    int v9 = 0x10000;
  }
  else {
    int v9 = 0;
  }
  return v8 | v9;
}

uint64_t sub_184D04FD4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  if (v3[9]) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  int v6 = v5 | v3[8];
  if (v3[10]) {
    int v7 = 0x10000;
  }
  else {
    int v7 = 0;
  }
  uint64_t result = sub_184D04F84(*(unsigned char *)(a1 + 8), *a2, v6 | v7);
  *(void *)a3 = v9;
  *(unsigned char *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 9) = BYTE1(result) & 1;
  *(unsigned char *)(a3 + 10) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_184D05048(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v4 = 0;
  uint64_t v5 = a1 + 32;
  unint64_t v6 = v1 - 1;
  while (v4 < v1)
  {
    while (1)
    {
      unsigned int v7 = *(unsigned __int8 *)(v5 + v4);
      if (v7 < 8) {
        break;
      }
      if (v6 == v4) {
        return result;
      }
      if (v1 == ++v4) {
        goto LABEL_12;
      }
    }
    uint64_t result = (1 << v7) | result;
    if (v6 == v4++) {
      return result;
    }
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Spandex(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Spandex(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Spandex()
{
  return &type metadata for Spandex;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Scanline(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Scanline(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 21) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Scanline()
{
  return &type metadata for Scanline;
}

uint64_t __swift_memcpy11_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for OpcodedSegment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OpcodedSegment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OpcodedSegment()
{
  return &type metadata for OpcodedSegment;
}

ValueMetadata *type metadata accessor for Source()
{
  return &type metadata for Source;
}

uint64_t getEnumTagSinglePayload for SourcedSegment(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SourcedSegment(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SourcedSegment()
{
  return &type metadata for SourcedSegment;
}

unint64_t sub_184D052D4()
{
  unint64_t result = qword_1E8F8BD20;
  if (!qword_1E8F8BD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BD20);
  }
  return result;
}

unint64_t sub_184D0532C()
{
  unint64_t result = qword_1E8F8BD28;
  if (!qword_1E8F8BD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BD28);
  }
  return result;
}

unint64_t sub_184D05384()
{
  unint64_t result = qword_1E8F8BD30;
  if (!qword_1E8F8BD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BD30);
  }
  return result;
}

unint64_t sub_184D053DC()
{
  unint64_t result = qword_1E8F8BD38;
  if (!qword_1E8F8BD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BD38);
  }
  return result;
}

unint64_t sub_184D05434()
{
  unint64_t result = qword_1E8F8BD40[0];
  if (!qword_1E8F8BD40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E8F8BD40);
  }
  return result;
}

uint64_t sub_184D0548C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t sub_184D05494()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_184D05538(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_184D05618(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_184D05694(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_184D05710(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_184D0578C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_184D05808(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_184D05884(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        uint64_t v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_184D05A38(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x184D05C78);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t type metadata accessor for SetOfSets()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_184D05CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, __n128 a8@<Q0>)
{
  uint64_t v80 = a5;
  uint64_t v69 = a1;
  uint64_t v70 = a3;
  uint64_t v67 = a7;
  uint64_t v89 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a8);
  double v65 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1850C3B88();
  uint64_t v15 = MEMORY[0x1F4188790](v13 - 8, v14);
  BOOL v17 = (char *)&v63 - v16;
  uint64_t v68 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v79 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v66 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v21);
  BOOL v23 = (char *)&v63 - v22;
  uint64_t v24 = *(void *)(a6 + 8);
  size_t v25 = v17;
  uint64_t v26 = a2;
  uint64_t v87 = v24;
  uint64_t v27 = *(void *)(*(void *)(v24 + 24) + 16);
  uint64_t v28 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v29 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v29, v30);
  unint64_t v32 = (char *)&v63 - v31;
  uint64_t v33 = AssociatedTypeWitness;
  long long v34 = v23;
  uint64_t v35 = swift_checkMetadataState();
  uint64_t v73 = *(void (***)(char *, uint64_t))(v35 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v35, v36);
  uint64_t v83 = (char *)&v63 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x1F4188790](v37, v39);
  char v64 = (char *)&v63 - v41;
  uint64_t v43 = MEMORY[0x1F4188790](v40, v42);
  uint64_t v82 = (char *)&v63 - v44;
  MEMORY[0x1F4188790](v43, v45);
  uint64_t v47 = (char *)&v63 - v46;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v85 = v29;
  uint64_t v81 = AssociatedConformanceWitness;
  sub_1850C3E08();
  uint64_t v88 = v47;
  uint64_t v84 = v32;
  uint64_t v86 = v27;
  sub_1850C3DC8();
  uint64_t v49 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v79, v69, v70);
  sub_1850C39F8();
  uint64_t v50 = v64;
  uint64_t v51 = swift_getAssociatedConformanceWitness();
  sub_1850C3BC8();
  uint64_t v52 = v89;
  uint64_t v79 = *(char **)(v89 + 48);
  uint64_t v80 = v89 + 48;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v79)(v25, 1, v26) != 1)
  {
    unint64_t v53 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    ++v73;
    uint64_t v74 = v53;
    uint64_t v89 = v52 + 32;
    uint64_t v71 = (void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v72 = v26;
    uint64_t v77 = v28;
    uint64_t v78 = v34;
    uint64_t v75 = v51;
    uint64_t v76 = v33;
    do
    {
      v74(v49, v25, v26);
      sub_1850C3E08();
      sub_1850C3DC8();
      uint64_t v54 = v50;
      uint64_t v55 = v83;
      sub_1850C3A58();
      uint64_t v56 = v82;
      sub_1850C3C18();
      uint64_t v57 = v25;
      uint64_t v58 = v49;
      int v59 = *v73;
      uint64_t v60 = v55;
      uint64_t v50 = v54;
      (*v73)(v60, v35);
      v59(v54, v35);
      sub_1850C3C28();
      v59(v56, v35);
      uint64_t v49 = v58;
      size_t v25 = v57;
      uint64_t v26 = v72;
      uint64_t v33 = v76;
      long long v34 = v78;
      (*v71)(v49, v72);
      sub_1850C3BC8();
    }
    while (((unsigned int (*)(char *, uint64_t, uint64_t))v79)(v25, 1, v26) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v33);
  uint64_t v61 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v67, v88, v61);
}

BOOL sub_184D063B0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a2[4] + 8);
  uint64_t v51 = a1;
  uint64_t v52 = v2;
  uint64_t v3 = *(void *)(*(void *)(v2 + 24) + 16);
  uint64_t v4 = a2[3];
  uint64_t v49 = a2[2];
  uint64_t v50 = *(void *)(v4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v6);
  size_t v8 = (char *)v43 - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  uint64_t v44 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  BOOL v17 = (char *)v43 - v16;
  uint64_t v19 = MEMORY[0x1F4188790](v15, v18);
  __n128 v21 = (char *)v43 - v20;
  uint64_t v23 = MEMORY[0x1F4188790](v19, v22);
  size_t v25 = (char *)v43 - v24;
  uint64_t v27 = MEMORY[0x1F4188790](v23, v26);
  uint64_t v29 = (char *)v43 - v28;
  MEMORY[0x1F4188790](v27, v30);
  uint64_t v47 = (char *)v43 - v31;
  v43[0] = *(void *)(v10 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v43[0])(v29, v48, v9);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v48 = AssociatedTypeWitness;
  uint64_t v45 = AssociatedConformanceWitness;
  sub_1850C3E08();
  uint64_t v46 = v8;
  v43[1] = v3;
  sub_1850C3DC8();
  sub_1850C3A58();
  sub_1850C3C18();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v10 + 8);
  v33(v17, v9);
  long long v34 = v21;
  uint64_t v35 = v47;
  v33(v34, v9);
  sub_1850C3BE8();
  v33(v25, v9);
  uint64_t v51 = v10 + 8;
  v33(v29, v9);
  if (sub_1850C3C58())
  {
    if (sub_1850C3C48() >= 64) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v50 = v10 + 16;
  char v36 = sub_1850C3C58();
  uint64_t v37 = sub_1850C3C48();
  if ((v36 & 1) == 0)
  {
    if (v37 < 64)
    {
LABEL_9:
      uint64_t v41 = sub_1850C3C38();
      v33(v35, v9);
      char v40 = v41 == 0;
      return (v40 & 1) == 0;
    }
LABEL_10:
    uint64_t v53 = 0;
    sub_184D083F4();
    sub_1850C3BD8();
    char v40 = sub_1850C39C8();
    v33(v29, v9);
    v33(v35, v9);
    return (v40 & 1) == 0;
  }
  if (v37 > 64) {
    goto LABEL_10;
  }
  sub_1850C3E08();
  sub_1850C3DC8();
  char v38 = sub_1850C3978();
  v33(v29, v9);
  __n128 v39 = v44;
  ((void (*)(char *, char *, uint64_t))v43[0])(v44, v35, v9);
  char v40 = (v38 & 1) != 0 && sub_1850C3C38() == 0;
  v33(v39, v9);
  v33(v35, v9);
  return (v40 & 1) == 0;
}

uint64_t sub_184D068F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v5(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_184D06978(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v59 = a2;
  uint64_t v56 = a1;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3[4] + 8) + 24) + 16);
  uint64_t v4 = a3[2];
  uint64_t v58 = *(void *)(a3[3] + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v6);
  size_t v8 = (char *)&v48 - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v57 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9, v10);
  uint64_t v53 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v18 = MEMORY[0x1F4188790](v14, v17);
  uint64_t v20 = (char *)&v48 - v19;
  uint64_t v22 = MEMORY[0x1F4188790](v18, v21);
  uint64_t v24 = (char *)&v48 - v23;
  MEMORY[0x1F4188790](v22, v25);
  uint64_t v27 = (char *)&v48 - v26;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v50 = AssociatedConformanceWitness;
  sub_1850C3E08();
  uint64_t v51 = v8;
  uint64_t v54 = v3;
  sub_1850C3DC8();
  uint64_t v55 = v4;
  sub_1850C3A58();
  sub_1850C3C18();
  uint64_t v29 = v57;
  uint64_t v30 = v57 + 8;
  uint64_t v31 = v20;
  unint64_t v32 = v27;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v57 + 8);
  v33(v31, v9);
  uint64_t v58 = v30;
  v33(v24, v9);
  sub_1850C3BE8();
  if (sub_1850C3C58())
  {
    if (sub_1850C3C48() < 64)
    {
      uint64_t v34 = sub_1850C3C38();
      uint64_t v35 = v16;
      uint64_t v36 = v9;
      goto LABEL_11;
    }
    uint64_t v60 = 0;
    sub_184D083F4();
    sub_1850C3BD8();
    char v41 = sub_1850C39C8();
    v33(v24, v9);
    __n128 v42 = v16;
  }
  else
  {
    uint64_t v49 = v33;
    char v37 = sub_1850C3C58();
    uint64_t v38 = sub_1850C3C48();
    if (v37)
    {
      if (v38 <= 64)
      {
        sub_1850C3E08();
        sub_1850C3DC8();
        char v39 = sub_1850C3978();
        uint64_t v33 = v49;
        v49(v24, v9);
        char v40 = v53;
        (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v53, v16, v9);
        if ((v39 & 1) == 0)
        {
          v33(v40, v9);
          v33(v16, v9);
          goto LABEL_17;
        }
        uint64_t v34 = sub_1850C3C38();
        v33(v40, v9);
        uint64_t v35 = v16;
        uint64_t v36 = v9;
        goto LABEL_11;
      }
    }
    else if (v38 < 64)
    {
      uint64_t v34 = sub_1850C3C38();
      uint64_t v35 = v16;
      uint64_t v36 = v9;
      uint64_t v33 = v49;
LABEL_11:
      v33(v35, v36);
      if (!v34) {
        goto LABEL_15;
      }
LABEL_17:
      uint64_t v43 = 0;
      goto LABEL_18;
    }
    uint64_t v60 = 0;
    sub_184D083F4();
    sub_1850C3BD8();
    char v41 = sub_1850C39C8();
    uint64_t v33 = v49;
    v49(v24, v9);
    __n128 v42 = v16;
  }
  v33(v42, v9);
  if ((v41 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_15:
  sub_1850C3C28();
  uint64_t v43 = 1;
LABEL_18:
  uint64_t v44 = v59;
  uint64_t v46 = v55;
  uint64_t v45 = v56;
  v33(v32, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16))(v45, v44, v46);
  return v43;
}

uint64_t sub_184D06F64@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v55 = a3;
  uint64_t v57 = *(void *)(a2[4] + 8);
  uint64_t v3 = *(void *)(*(void *)(v57 + 24) + 16);
  uint64_t v4 = a2[2];
  uint64_t v56 = *(char **)(a2[3] + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v6);
  size_t v8 = (char *)&v48 - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9, v10);
  uint64_t v49 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v18 = MEMORY[0x1F4188790](v14, v17);
  uint64_t v20 = (char *)&v48 - v19;
  uint64_t v22 = MEMORY[0x1F4188790](v18, v21);
  uint64_t v24 = (char *)&v48 - v23;
  MEMORY[0x1F4188790](v22, v25);
  uint64_t v27 = (char *)&v48 - v26;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1850C3E08();
  uint64_t v51 = v8;
  uint64_t v52 = v3;
  sub_1850C3DC8();
  uint64_t v54 = v4;
  sub_1850C3A58();
  sub_1850C3C18();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v58 + 8);
  v28(v20, v9);
  uint64_t v53 = v28;
  v28(v24, v9);
  uint64_t v56 = v27;
  sub_1850C3BE8();
  if (sub_1850C3C58())
  {
    if (sub_1850C3C48() < 64)
    {
      uint64_t v29 = sub_1850C3C38();
      uint64_t v30 = v53;
      v53(v16, v9);
      uint64_t v32 = v54;
      uint64_t v31 = v55;
      uint64_t v33 = v56;
LABEL_13:
      if (!v29) {
        goto LABEL_19;
      }
LABEL_21:
      sub_1850C3BF8();
      sub_1850C3C08();
      v30(v24, v9);
      v30(v33, v9);
      uint64_t v45 = *(void *)(v32 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v31, v59, v32);
      uint64_t v46 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v31, v46, 1, v32);
    }
    uint64_t v60 = 0;
    sub_184D083F4();
    sub_1850C3BD8();
    char v37 = sub_1850C39C8();
    uint64_t v30 = v53;
    v53(v24, v9);
    v30(v16, v9);
    uint64_t v31 = v55;
  }
  else
  {
    char v34 = sub_1850C3C58();
    uint64_t v48 = v16;
    uint64_t v35 = sub_1850C3C48();
    if ((v34 & 1) == 0)
    {
      uint64_t v33 = v56;
      if (v35 >= 64)
      {
        uint64_t v60 = 0;
        sub_184D083F4();
        sub_1850C3BD8();
        uint64_t v43 = v48;
        char v44 = sub_1850C39C8();
        uint64_t v30 = v53;
        v53(v24, v9);
        v30(v43, v9);
        uint64_t v32 = v54;
        uint64_t v31 = v55;
        if (v44) {
          goto LABEL_19;
        }
        goto LABEL_21;
      }
      uint64_t v38 = v48;
      uint64_t v29 = sub_1850C3C38();
      uint64_t v30 = v53;
      v53(v38, v9);
      uint64_t v32 = v54;
      uint64_t v31 = v55;
      goto LABEL_13;
    }
    if (v35 <= 64)
    {
      sub_1850C3E08();
      sub_1850C3DC8();
      char v39 = v48;
      char v40 = sub_1850C3978();
      uint64_t v30 = v53;
      v53(v24, v9);
      char v41 = v49;
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v49, v39, v9);
      uint64_t v32 = v54;
      uint64_t v31 = v55;
      uint64_t v33 = v56;
      if (v40)
      {
        uint64_t v42 = sub_1850C3C38();
        v30(v41, v9);
        v30(v48, v9);
        if (!v42) {
          goto LABEL_19;
        }
      }
      else
      {
        v30(v41, v9);
        v30(v48, v9);
      }
      goto LABEL_21;
    }
    uint64_t v60 = 0;
    sub_184D083F4();
    sub_1850C3BD8();
    uint64_t v36 = v48;
    char v37 = sub_1850C39C8();
    uint64_t v30 = v53;
    v53(v24, v9);
    v30(v36, v9);
    uint64_t v31 = v55;
  }
  uint64_t v32 = v54;
  uint64_t v33 = v56;
  if ((v37 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_19:
  v30(v33, v9);
  uint64_t v45 = *(void *)(v32 - 8);
  uint64_t v46 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v31, v46, 1, v32);
}

uint64_t sub_184D076EC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v47 = a3;
  uint64_t v49 = *(void *)(a2[4] + 8);
  uint64_t v3 = *(void *)(*(void *)(v49 + 24) + 16);
  uint64_t v4 = a2[2];
  uint64_t v48 = *(char **)(a2[3] + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v6);
  size_t v8 = (char *)v44 - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9, v10);
  v44[0] = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v16 = (char *)v44 - v15;
  uint64_t v18 = MEMORY[0x1F4188790](v14, v17);
  uint64_t v20 = (char *)v44 - v19;
  uint64_t v22 = MEMORY[0x1F4188790](v18, v21);
  uint64_t v24 = (char *)v44 - v23;
  MEMORY[0x1F4188790](v22, v25);
  uint64_t v27 = (char *)v44 - v26;
  v44[1] = swift_getAssociatedConformanceWitness();
  sub_1850C3E08();
  v44[2] = v8;
  v44[3] = v3;
  sub_1850C3DC8();
  uint64_t v46 = v4;
  sub_1850C3A58();
  sub_1850C3C18();
  uint64_t v29 = v50 + 8;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v50 + 8);
  v28(v20, v9);
  v44[4] = v29;
  uint64_t v45 = (void (*)(uint64_t, uint64_t))v28;
  v28(v24, v9);
  uint64_t v48 = v27;
  sub_1850C3BE8();
  if ((sub_1850C3C58() & 1) == 0)
  {
    char v30 = sub_1850C3C58();
    uint64_t v31 = sub_1850C3C48();
    if (v30)
    {
      if (v31 > 64) {
        goto LABEL_12;
      }
      sub_1850C3E08();
      sub_1850C3DC8();
      char v32 = sub_1850C3978();
      uint64_t v33 = v45;
      v45((uint64_t)v24, v9);
      uint64_t v34 = v44[0];
      (*(void (**)(void, char *, uint64_t))(v50 + 16))(v44[0], v16, v9);
      uint64_t v36 = v46;
      uint64_t v35 = v47;
      char v37 = v48;
      if (v32)
      {
        uint64_t v38 = sub_1850C3C38();
        v33(v34, v9);
        v33((uint64_t)v16, v9);
        if (!v38) {
          goto LABEL_13;
        }
      }
      else
      {
        v33(v34, v9);
        v33((uint64_t)v16, v9);
      }
LABEL_15:
      v33((uint64_t)v37, v9);
      uint64_t v41 = *(void *)(v36 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v35, v51, v36);
      uint64_t v42 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v35, v42, 1, v36);
    }
    if (v31 >= 64) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v39 = sub_1850C3C38();
    uint64_t v33 = v45;
    v45((uint64_t)v16, v9);
    uint64_t v36 = v46;
    uint64_t v35 = v47;
    char v37 = v48;
    if (!v39) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  if (sub_1850C3C48() < 64) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v52 = 0;
  sub_184D083F4();
  sub_1850C3BD8();
  char v40 = sub_1850C39C8();
  uint64_t v33 = v45;
  v45((uint64_t)v24, v9);
  v33((uint64_t)v16, v9);
  uint64_t v36 = v46;
  uint64_t v35 = v47;
  char v37 = v48;
  if ((v40 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_13:
  sub_1850C3C28();
  v33((uint64_t)v37, v9);
  uint64_t v41 = *(void *)(v36 - 8);
  uint64_t v42 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v35, v42, 1, v36);
}

uint64_t sub_184D07D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184D068F0(a1, a2);
}

uint64_t sub_184D07D14(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = *(void *)(a1 + 32);

  return MEMORY[0x1F4186310](a1, WitnessTable, v3);
}

uint64_t sub_184D07D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184D07E48(a1, a2, a3, MEMORY[0x1E4FBC7E0]);
}

uint64_t sub_184D07D98(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable();
  sub_1850C3F58();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v4(v2, a2);
}

uint64_t sub_184D07E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184D07E48(a1, a2, a3, MEMORY[0x1E4FBC7D8]);
}

uint64_t sub_184D07E48(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  a4(a1, a2, WitnessTable);
  __n128 v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  v10(v4, a2);

  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1, a2);
}

uint64_t sub_184D07F18(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = sub_184D06978(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(a3[2] - 8) + 8))(a2);
  return v5 & 1;
}

uint64_t sub_184D07F84@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_184D076EC(a1, a2, a3);
  char v5 = *(uint64_t (**)(uint64_t))(*(void *)(a2[2] - 8) + 8);

  return v5(a1);
}

uint64_t sub_184D07FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184D08084(a1, a2, a3, MEMORY[0x1E4FBC7F8]);
}

uint64_t sub_184D08008(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = *(void *)(a2 + 32);

  return MEMORY[0x1F41862F8](a1, a2, WitnessTable, v5);
}

uint64_t sub_184D0806C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184D08084(a1, a2, a3, MEMORY[0x1E4FBC7F0]);
}

uint64_t sub_184D08084(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  a4(a1, a2, WitnessTable, *(void *)(a2 + 32));
  size_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v8(a1, a2);
}

uint64_t sub_184D08120(uint64_t a1, uint64_t a2)
{
  sub_1850C3C98();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v4(v2, a2);
}

uint64_t sub_184D08190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  return sub_184D05CB8(a1, a4[2], a2, a4[3], a3, a4[4], a5, a6);
}

uint64_t sub_184D081AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_184D068F0(a1, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);

  return v5(a3, 0, 1, a2);
}

uint64_t sub_184D08220@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t sub_184D082A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 32) + 8) + 16) + 8);

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_184D0831C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184AD0](a1, a2, WitnessTable);
}

uint64_t sub_184D08384()
{
  return swift_getWitnessTable();
}

uint64_t sub_184D083A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_184D083BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_184D083D8()
{
  return swift_getWitnessTable();
}

unint64_t sub_184D083F4()
{
  unint64_t result = qword_1E8F8BDC8;
  if (!qword_1E8F8BDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BDC8);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_184D08478(int a1)
{
  HIDWORD(v1) = a1;
  LODWORD(v1) = a1;
  uint64_t result = 0x64656B636170;
  switch((v1 >> 16))
  {
    case 0u:
      return result;
    case 1u:
      uint64_t result = 0x353535424752;
      break;
    case 2u:
      uint64_t result = 0x353635424752;
      break;
    case 3u:
      uint64_t result = 0x3130313031424752;
      break;
    case 4u:
      uint64_t result = 0x3031464943424752;
      break;
    default:
      sub_1850C3CE8();
      swift_bridgeObjectRelease();
      sub_1850C3D68();
      sub_1850C39E8();
      swift_bridgeObjectRelease();
      sub_1850C39E8();
      uint64_t result = 0x7761722874696E69;
      break;
  }
  return result;
}

uint64_t sub_184D085CC()
{
  return sub_184D08478(*v0);
}

double static CGVector.zero.getter()
{
  return 0.0;
}

CGVector __swiftcall CGVector.init(dx:dy:)(Swift::Int dx, Swift::Int dy)
{
  double v2 = (double)dx;
  double v3 = (double)dy;
  result.dCGFloat y = v3;
  result.dCGFloat x = v2;
  return result;
}

BOOL static CGVector.== infix(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

uint64_t CGVector.debugDescription.getter()
{
  return 40;
}

double CGVector.init(from:)(void *a1)
{
  return sub_184CD2CA0(a1);
}

uint64_t CGVector.encode(to:)(void *a1, double a2, double a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3F18();
  double v9 = a2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  sub_184CD2DD0();
  sub_1850C3DA8();
  if (!v3)
  {
    double v9 = a3;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    sub_1850C3DA8();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t sub_184D087A8(void *a1)
{
  return CGVector.encode(to:)(a1, *v1, v1[1]);
}

unint64_t sub_184D087C8()
{
  unint64_t result = qword_1E8F8BDD0[0];
  if (!qword_1E8F8BDD0[0])
  {
    type metadata accessor for CGVector(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E8F8BDD0);
  }
  return result;
}

uint64_t sub_184D08820()
{
  return swift_getWitnessTable();
}

uint64_t sub_184D0883C()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_184D08860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4 = v3;
  uint64_t v22 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1, a3);
  __n128 v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v8, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v17);
  uint64_t v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v4, v11);
  sub_1850C39F8();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4 + *(int *)(a1 + 52), v6);
  return sub_184D08A58((uint64_t)v19, (uint64_t)v10, v6, v22);
}

uint64_t sub_184D08A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  uint64_t v9 = type metadata accessor for ConvertSequence.Iterator();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v9 + 52), a2, a3);
}

uint64_t sub_184D08B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1850C3B88();
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = v4;
  uint64_t v6 = MEMORY[0x1F4188790](v4, v5);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v6, v10);
  uint64_t v12 = (char *)&v17 - v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_1850C3BC8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v19);
    uint64_t v13 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v20, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
    uint64_t v15 = v20;
    (*(void (**)(char *, void, void))(*(void *)(a1 + 40) + 24))(v12, *(void *)(a1 + 24), *(void *)(a1 + 40));
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
    uint64_t v16 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 0, 1, v16);
  }
}

uint64_t sub_184D08E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  sub_184D08860(a1, a2, a3);
  __n128 v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v5(v3, a1);
}

uint64_t sub_184D08EA4()
{
  return sub_1850C3AB8();
}

uint64_t sub_184D08EAC()
{
  return sub_1850C3AF8();
}

uint64_t sub_184D08EB4()
{
  return sub_1850C3AC8();
}

uint64_t sub_184D08EBC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v5);
  uint64_t v7 = &v10[-v6];
  uint64_t v8 = (void (*)(unsigned char *, void))sub_1850C3B68();
  (*(void (**)(unsigned char *))(v4 + 16))(v7);
  v8(v10, 0);
  (*(void (**)(unsigned char *, void))(*(void *)(a2 + 40) + 24))(v7, *(void *)(a2 + 24));
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
}

uint64_t sub_184D09034()
{
  return sub_184D08EA4();
}

uint64_t sub_184D0903C()
{
  return sub_184D08EAC();
}

void (*sub_184D09044(uint64_t **a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  _OWORD v6[4] = (uint64_t)sub_184D090BC(v6, a2, a3);
  return sub_184CC83D0;
}

void (*sub_184D090BC(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  a1[2] = (uint64_t)malloc(*(void *)(v7 + 64));
  sub_184D08EBC(a2, a3);
  return sub_184CC8504;
}

uint64_t sub_184D0919C@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = sub_1850C3B88();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_184D09230()
{
  return sub_184D08EB4();
}

uint64_t sub_184D09238(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v4);
  uint64_t v6 = (char *)&v8 - v5;
  sub_184D08EB4();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v6, AssociatedTypeWitness);
}

uint64_t sub_184D09354()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ConvertSequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t sub_184D09388()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184D0946C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  unint64_t v13 = ((v8 + v11) & ~v11) + *(void *)(v10 + 64);
  uint64_t v14 = (*(unsigned char *)(v7 + 80) | *(unsigned char *)(v10 + 80));
  if (v14 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v18, ((unint64_t)a2 + v12) & v18, v9);
  }
  return a1;
}

uint64_t sub_184D095E8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t sub_184D096B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184D09780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184D09850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184D09920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184D099F0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v11;
  if (a2 <= v12) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v12 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v12)
      {
        if (v8 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *))(v7 + 48);
          return v23(a1);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v11, v10);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = (v13 & ~v11) + *(_DWORD *)(v9 + 64);
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v12 + (v20 | v18) + 1;
}

void sub_184D09C68(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v13;
  size_t v16 = (v15 & ~v13) + *(void *)(v11 + 64);
  if (a3 <= v14)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v14 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < a2)
  {
    unsigned int v18 = ~v14 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x184D09F60);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v10 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v9 + 56);
          v23(a1, a2);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v13, a2, v12);
        }
      }
      return;
  }
}

uint64_t sub_184D09F88(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_184D0A180(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x184D0A44CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ConvertSequence()
{
  return swift_getGenericMetadata();
}

CGSize __swiftcall CGSize.init(width:height:)(Swift::Int width, Swift::Int height)
{
  double v2 = (double)width;
  double v3 = (double)height;
  result.double height = v3;
  result.double width = v2;
  return result;
}

double static CGSize.zero.getter()
{
  return 0.0;
}

CGSize_optional __swiftcall CGSize.init(dictionaryRepresentation:)(CFDictionaryRef dictionaryRepresentation)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  size.double width = 0.0;
  size.double height = 0.0;
  BOOL v2 = CGSizeMakeWithDictionaryRepresentation(dictionaryRepresentation, &size);

  if (v2) {
    char width_low = LOBYTE(size.width);
  }
  else {
    char width_low = 0;
  }
  result.value.double height = v4;
  result.value.double width = v3;
  result.is_nil = width_low;
  return result;
}

uint64_t CGSize.customMirror.getter(double a1, double a2)
{
  uint64_t v4 = sub_1850C3EC8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F0);
  MEMORY[0x1F4188790](v9 - 8, v10);
  unsigned int v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)int v19 = a1;
  *(double *)&v19[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8B5F8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1850CBAB0;
  uint64_t v14 = MEMORY[0x1E4FBC958];
  *(void *)(v13 + 32) = 0x6874646977;
  *(void *)(v13 + 40) = 0xE500000000000000;
  *(double *)(v13 + 48) = a1;
  *(void *)(v13 + 72) = v14;
  *(void *)(v13 + 80) = 0x746867696568;
  *(void *)(v13 + 88) = 0xE600000000000000;
  *(void *)(v13 + 120) = v14;
  *(double *)(v13 + 96) = a2;
  uint64_t v15 = *MEMORY[0x1E4FBC410];
  uint64_t v16 = sub_1850C3EB8();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v12, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FBC430], v4);
  type metadata accessor for CGSize(0);
  return sub_1850C3EE8();
}

uint64_t sub_184D0A774()
{
  return CGSize.customMirror.getter(*v0, v0[1]);
}

void CGSize.customPlaygroundQuickLook.getter(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 32) = 12;
}

__n128 sub_184D0A78C@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[2].n128_u8[0] = 12;
  return result;
}

uint64_t CGSize.debugDescription.getter()
{
  return 40;
}

BOOL static CGSize.== infix(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

double CGSize.init(from:)(void *a1)
{
  return sub_184CD2CA0(a1);
}

uint64_t CGSize.encode(to:)(void *a1, double a2, double a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3F18();
  double v9 = a2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  sub_184CD2DD0();
  sub_1850C3DA8();
  if (!v3)
  {
    double v9 = a3;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    sub_1850C3DA8();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t sub_184D0A958(void *a1)
{
  return CGSize.encode(to:)(a1, *v1, v1[1]);
}

unint64_t sub_184D0A978()
{
  unint64_t result = qword_1E8F8B4C0;
  if (!qword_1E8F8B4C0)
  {
    type metadata accessor for CGSize(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8B4C0);
  }
  return result;
}

void Region.cgRegion.getter()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[6];
  BOOL v4 = (~*v0 & 0x7FF0000000000000) != 0 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v4 && !*(void *)(v2 + 16))
  {
    char v6 = 0;
    uint64_t v1 = v0[1];
    uint64_t v3 = v0[2];
    uint64_t v2 = *v0;
    uint64_t v5 = v0[3];
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = 0;
    char v6 = 1;
  }
  uint64_t v13 = v2;
  uint64_t v14 = v1;
  uint64_t v15 = v3;
  uint64_t v16 = v5;
  uint64_t v17 = 0;
  char v18 = v6;
  sub_184CF3204(v2, v1, v3, v5, v6);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &v13;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_184D0AC78;
  *(void *)(v8 + 24) = v7;
  v12[4] = sub_184D0AC90;
  v12[5] = v8;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1644167168;
  v12[2] = sub_184D0ACB8;
  v12[3] = &block_descriptor_0;
  double v9 = _Block_copy(v12);
  swift_retain();
  swift_release();
  __n128 v10 = CGRegionCreateWithBoundsBlock((uint64_t)v9);
  _Block_release(v9);
  if (!v10) {
    goto LABEL_13;
  }
  sub_184CF5464(v13, v14, v15, v16, v17, v18);
  swift_release();
  isEscapingClosureAtFileLocatiouint64_t n = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
}

uint64_t sub_184D0ABBC()
{
  sub_184CF4BB4((uint64_t)v5);
  sub_184D0AE94((uint64_t)v5, (uint64_t)v6);
  if (v7) {
    return 1;
  }
  double v1 = v6[1];
  double v2 = v6[2];
  double v3 = v6[3];
  uint64_t v4 = sub_184D0AEFC(v6[0]);
  sub_184D0AEFC(v2);
  sub_184D0AEFC(v1);
  sub_184D0AEFC(v3);
  return v4 << 32;
}

uint64_t sub_184D0AC68()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_184D0AC78()
{
  return sub_184D0ABBC();
}

uint64_t sub_184D0AC80()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_184D0AC90()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_184D0ACB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 32))();
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void Region.init(cgRegion:)(char *a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int64x2_t v20 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v21 = v20;
  unint64_t v4 = MEMORY[0x1E4FBC860];
  v22.i64[0] = MEMORY[0x1E4FBC860];
  v22.i64[1] = MEMORY[0x1E4FBC860];
  unint64_t v23 = MEMORY[0x1E4FBC860];
  int v5 = CGRegionEnumeratorCreate(a1);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (CGRegionEnumeratorGetNextBounds((uint64_t)v5, (_DWORD *)&v19 + 1, &v19, (_DWORD *)&v18 + 1, &v18))
  {
    do
    {
      if ((double)SHIDWORD(v19) >= (double)SHIDWORD(v18) || (double)(int)v19 >= (double)(int)v18) {
        __break(1u);
      }
      *(double *)&long long v12 = (double)SHIDWORD(v19);
      *((double *)&v12 + 1) = (double)SHIDWORD(v18);
      double v13 = (double)(int)v19;
      double v14 = (double)(int)v18;
      unint64_t v15 = v4;
      unint64_t v16 = v4;
      unint64_t v17 = v4;
      Region.formUnion(_:)(&v12);
      swift_release_n();
    }
    while (CGRegionEnumeratorGetNextBounds((uint64_t)v5, (_DWORD *)&v19 + 1, &v19, (_DWORD *)&v18 + 1, &v18));
    uint64_t v7 = v20.i64[1];
    uint64_t v8 = v20.i64[0];
    uint64_t v9 = v21.i64[1];
    uint64_t v10 = v21.i64[0];
    int64x2_t v11 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    int64x2_t v11 = vdupq_n_s64(v4);
    uint64_t v9 = 0x7FF8000000000000;
    uint64_t v10 = 0x7FF8000000000000;
    uint64_t v7 = 0x7FF8000000000000;
    uint64_t v8 = 0x7FF8000000000000;
  }
  CGRegionEnumeratorRelease(v5);

  a2->i64[0] = v8;
  a2->i64[1] = v7;
  a2[1].i64[0] = v10;
  a2[1].i64[1] = v9;
  a2[2] = v11;
  a2[3].i64[0] = v4;
}

uint64_t sub_184D0AE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F8BD08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_184D0AEFC(double a1)
{
  double v1 = round(a1);
  if (v1 <= -2147483650.0) {
    return 2147483649;
  }
  if (v1 >= 2147483650.0) {
    return 2147483646;
  }
  if ((~*(void *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -2147483650.0)
    {
      if (v1 < 2147483650.0) {
        return (int)v1;
      }
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void static CGAffineTransform.identity.getter(void *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

double CGAffineTransform.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_184D0B414(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t CGAffineTransform.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3F18();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  sub_184CD2DD0();
  sub_1850C3DA8();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_1850C3DA8();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_1850C3DA8();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_1850C3DA8();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_1850C3DA8();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_1850C3DA8();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

double sub_184D0B1DC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_184D0B414(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_184D0B220(void *a1)
{
  return CGAffineTransform.encode(to:)(a1);
}

BOOL sub_184D0B238(float64x2_t *a1, float64x2_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0])
  {
    return a1[2].f64[1] == a2[2].f64[1];
  }
  return result;
}

uint64_t sub_184D0B290()
{
  return sub_1850C3E78();
}

uint64_t sub_184D0B314()
{
  return sub_1850C3E88();
}

uint64_t sub_184D0B388()
{
  return sub_184D0B290();
}

uint64_t sub_184D0B3C4()
{
  return sub_1850C3E98();
}

uint64_t sub_184D0B414@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1850C3EF8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_184C9D3E4();
  sub_1850C3D78();
  uint64_t v5 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1850C3D78();
  uint64_t v6 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1850C3D78();
  uint64_t v7 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1850C3D78();
  uint64_t v8 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1850C3D78();
  uint64_t v9 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1850C3D78();
  uint64_t v10 = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v8;
  a2[4] = v9;
  a2[5] = v10;
  return result;
}

unint64_t sub_184D0B678()
{
  unint64_t result = qword_1E8F8BED8;
  if (!qword_1E8F8BED8)
  {
    type metadata accessor for CGAffineTransform(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BED8);
  }
  return result;
}

CoreGraphics::CGPathFillRule_optional __swiftcall CGPathFillRule.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (CoreGraphics::CGPathFillRule_optional)rawValue;
}

uint64_t CGPathFillRule.rawValue.getter()
{
  return *v0;
}

void *sub_184D0B6F4@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_184D0B714(void *a1@<X8>)
{
  *a1 = *v1;
}

CGPathRef CGPathRef.copy(dashingWithPhase:lengths:transform:)(uint64_t a1, _OWORD *a2, CGFloat a3)
{
  long long v4 = a2[1];
  *(_OWORD *)&v6.a = *a2;
  *(_OWORD *)&v6.c = v4;
  *(_OWORD *)&v6.tCGFloat x = a2[2];
  CGPathRef result = CGPathCreateCopyByDashingPath(v3, &v6, a3, (const CGFloat *)(a1 + 32), *(void *)(a1 + 16));
  if (!result) {
    __break(1u);
  }
  return result;
}

CGPathRef CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)(CGLineCap lineCap, CGLineJoin lineJoin, _OWORD *a3, CGFloat a4, CGFloat a5)
{
  long long v6 = a3[1];
  *(_OWORD *)&v8.a = *a3;
  *(_OWORD *)&v8.c = v6;
  *(_OWORD *)&v8.tCGFloat x = a3[2];
  CGPathRef result = CGPathCreateCopyByStrokingPath(v5, &v8, a4, lineCap, lineJoin, a5);
  if (!result) {
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall CGPathRef.contains(_:using:transform:)(CGPoint _, CoreGraphics::CGPathFillRule using, CGAffineTransform *transform)
{
  char v4 = *(unsigned char *)using;
  long long v5 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v7.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v7.c = v5;
  *(_OWORD *)&v7.tCGFloat x = *(_OWORD *)&transform->tx;
  return CGPathContainsPoint(v3, &v7, _, v4);
}

void CGMutablePathRef.addRoundedRect(in:cornerWidth:cornerHeight:transform:)(_OWORD *a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7)
{
  long long v8 = a1[1];
  *(_OWORD *)&v9.a = *a1;
  *(_OWORD *)&v9.c = v8;
  *(_OWORD *)&v9.tCGFloat x = a1[2];
  CGPathAddRoundedRect(v7, &v9, *(CGRect *)&a2, a6, a7);
}

Swift::Void __swiftcall CGMutablePathRef.addQuadCurve(to:control:transform:)(CGPoint to, CGPoint control, CGAffineTransform *transform)
{
  CGFloat y = to.y;
  long long v5 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v6.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v6.c = v5;
  *(_OWORD *)&v6.tCGFloat x = *(_OWORD *)&transform->tx;
  CGPathAddQuadCurveToPoint(v3, &v6, control.x, control.y, to.x, y);
}

Swift::Void __swiftcall CGMutablePathRef.addCurve(to:control1:control2:transform:)(CGPoint to, CGPoint control1, CGPoint control2, CGAffineTransform *transform)
{
  CGFloat y = to.y;
  long long v6 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v7.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v7.c = v6;
  *(_OWORD *)&v7.tCGFloat x = *(_OWORD *)&transform->tx;
  CGPathAddCurveToPoint(v4, &v7, control1.x, control1.y, control2.x, control2.y, to.x, y);
}

Swift::Void __swiftcall CGMutablePathRef.addRect(_:transform:)(__C::CGRect _, CGAffineTransform *transform)
{
}

Swift::Void __swiftcall CGMutablePathRef.addRects(_:transform:)(Swift::OpaquePointer _, CGAffineTransform *transform)
{
}

Swift::Void __swiftcall CGMutablePathRef.addLines(between:transform:)(Swift::OpaquePointer between, CGAffineTransform *transform)
{
}

uint64_t sub_184D0B938(uint64_t a1, _OWORD *a2, uint64_t (*a3)(uint64_t, _OWORD *, uint64_t, void))
{
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  _OWORD v6[2] = a2[2];
  return a3(v3, v6, a1 + 32, *(void *)(a1 + 16));
}

Swift::Void __swiftcall CGMutablePathRef.addEllipse(in:transform:)(__C::CGRect in, CGAffineTransform *transform)
{
}

uint64_t sub_184D0B9A0(_OWORD *a1, uint64_t (*a2)(uint64_t, _OWORD *))
{
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  uint64_t v5[2] = a1[2];
  return a2(v2, v5);
}

uint64_t CGMutablePathRef.addRelativeArc(center:radius:startAngle:delta:transform:)(_OWORD *a1)
{
  return sub_184C04A2C(a1, (uint64_t (*)(uint64_t, _OWORD *))CGPathAddRelativeArc);
}

void CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(char a1, _OWORD *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  long long v8 = a2[1];
  *(_OWORD *)&v9.a = *a2;
  *(_OWORD *)&v9.c = v8;
  *(_OWORD *)&v9.tCGFloat x = a2[2];
  CGPathAddArc(v7, &v9, a3, a4, a5, a6, a7, a1 & 1);
}

Swift::Void __swiftcall CGMutablePathRef.addPath(_:transform:)(CGPathRef _, CGAffineTransform *transform)
{
  long long v3 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v4.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v4.c = v3;
  *(_OWORD *)&v4.tCGFloat x = *(_OWORD *)&transform->tx;
  CGPathAddPath(v2, &v4, _);
}

CGPathRef __swiftcall CGPathRef.union(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184D0BB14((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, void))CGPathCreateCopyByUnioningPath);
}

CGPathRef __swiftcall CGPathRef.intersection(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184D0BB14((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, void))CGPathCreateCopyByIntersectingPath);
}

CGPathRef __swiftcall CGPathRef.subtracting(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184D0BB14((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, void))CGPathCreateCopyBySubtractingPath);
}

CGPathRef __swiftcall CGPathRef.symmetricDifference(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184D0BB14((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, void))CGPathCreateCopyBySymmetricDifferenceOfPath);
}

CGPathRef __swiftcall CGPathRef.lineSubtracting(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184D0BB14((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, void))CGPathCreateCopyOfLineBySubtractingPath);
}

CGPathRef __swiftcall CGPathRef.lineIntersection(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184D0BB14((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, void))CGPathCreateCopyOfLineByIntersectingPath);
}

uint64_t sub_184D0BB14(uint64_t a1, unsigned __int8 *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  uint64_t result = a3(v3, a1, *a2);
  if (!result) {
    __break(1u);
  }
  return result;
}

CGPathRef __swiftcall CGPathRef.normalized(using:)(CoreGraphics::CGPathFillRule using)
{
  CGPathRef result = CGPathCreateCopyByNormalizing(v1, *(unsigned char *)using);
  if (!result) {
    __break(1u);
  }
  return result;
}

CGPathRef CGPathRef.flattened(threshold:)(CGFloat a1)
{
  CGPathRef result = CGPathCreateCopyByFlattening(v1, a1);
  if (!result) {
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall CGPathRef.intersects(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return CGPathIntersectsPath(v2, _, *(unsigned char *)using);
}

uint64_t CGPathRef.componentsSeparated(using:)(BOOL *a1)
{
  uint64_t result = (uint64_t)CGPathCreateSeparateComponents(v1, *a1);
  if (result)
  {
    type metadata accessor for CGPath(0);
    uint64_t result = sub_1850C3A68();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_184D0BC30()
{
  unint64_t result = qword_1E8F8BEE0;
  if (!qword_1E8F8BEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F8BEE0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CGPathFillRule(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x184D0BD50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CGPathFillRule()
{
  return &type metadata for CGPathFillRule;
}

void CGContextRef.setLineDash(phase:lengths:)(uint64_t a1, CGFloat a2)
{
  CGContextSetLineDash(v2, a2, (const CGFloat *)(a1 + 32), *(void *)(a1 + 16));
}

Swift::Void __swiftcall CGContextRef.addCurve(to:control1:control2:)(CGPoint to, CGPoint control1, CGPoint control2)
{
  CGContextAddCurveToPoint(v3, control1.x, control1.y, control2.x, control2.y, to.x, to.y);
}

Swift::Void __swiftcall CGContextRef.addQuadCurve(to:control:)(CGPoint to, CGPoint control)
{
  CGContextAddQuadCurveToPoint(v2, control.x, control.y, to.x, to.y);
}

Swift::Void __swiftcall CGContextRef.addRects(_:)(Swift::OpaquePointer a1)
{
  CGContextAddRects(v1, (const CGRect *)a1._rawValue + 1, *((void *)a1._rawValue + 2));
}

Swift::Void __swiftcall CGContextRef.addLines(between:)(Swift::OpaquePointer between)
{
  CGContextAddLines(v1, (const CGPoint *)between._rawValue + 2, *((void *)between._rawValue + 2));
}

void CGContextRef.addArc(center:radius:startAngle:endAngle:clockwise:)(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGContextAddArc(v6, a2, a3, a4, a5, a6, a1 & 1);
}

void CGContextRef.addArc(tangent1End:tangent2End:radius:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGContextAddArcToPoint(v5, a1, a2, a3, a4, a5);
}

Swift::Void __swiftcall CGContextRef.fillPath(using:)(CoreGraphics::CGPathFillRule using)
{
}

Swift::Void __swiftcall CGContextRef.clip(using:)(CoreGraphics::CGPathFillRule using)
{
}

uint64_t sub_184D0BE6C(unsigned char *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  if (*a1) {
    return a3(v3);
  }
  else {
    return a2(v3);
  }
}

Swift::Void __swiftcall CGContextRef.fill(_:)(Swift::OpaquePointer a1)
{
  CGContextFillRects(v1, (const CGRect *)a1._rawValue + 1, *((void *)a1._rawValue + 2));
}

Swift::Void __swiftcall CGContextRef.strokeLineSegments(between:)(Swift::OpaquePointer between)
{
  CGContextStrokeLineSegments(v1, (const CGPoint *)between._rawValue + 2, *((void *)between._rawValue + 2));
}

Swift::Void __swiftcall CGContextRef.clip(to:)(Swift::OpaquePointer to)
{
  CGContextClipToRects(v1, (const CGRect *)to._rawValue + 1, *((void *)to._rawValue + 2));
}

uint64_t CGContextRef.draw(_:in:by:options:)(CGImageRef image, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return CGContextDrawImageApplyingToneMapping(v12, image, a2, a3, a9, a10, a11, a12, a4, a5, a6, a7);
}

double CGContextRef.textPosition.getter()
{
  *(void *)&double result = *(_OWORD *)&CGContextGetTextPosition(v0);
  return result;
}

void (*CGContextRef.textPosition.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(CGPoint *)a1 = CGContextGetTextPosition(v1);
  return sub_184D0BF38;
}

void sub_184D0BF38(uint64_t a1)
{
}

Swift::Void __swiftcall CGContextRef.showGlyphs(_:at:)(Swift::OpaquePointer _, Swift::OpaquePointer at)
{
  size_t v3 = *((void *)_._rawValue + 2);
  if (v3 == *((void *)at._rawValue + 2)) {
    CGContextShowGlyphsAtPositions(v2, (const CGGlyph *)_._rawValue + 16, (const CGPoint *)at._rawValue + 2, v3);
  }
  else {
    __break(1u);
  }
}

Swift::Void __swiftcall CGContextRef.draw(_:in:)(CGLayerRef _, __C::CGRect in)
{
  CGContextDrawLayerInRect(v2, (CGRect)in, _);
}

Swift::Void __swiftcall CGContextRef.draw(_:at:)(CGLayerRef _, CGPoint at)
{
  CGContextDrawLayerAtPoint(v2, at, _);
}

void sub_184D0BF88(CGContextRef *a1@<X0>, CGPoint *a2@<X8>)
{
  *a2 = CGContextGetTextPosition(*a1);
}

void sub_184D0BFB4(CGFloat *a1, CGContextRef *a2)
{
}

void gpc_free_polygon(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = 8;
    do
    {
      unsigned int v6 = *(void **)(v4 + v5);
      if (v6)
      {
        free(v6);
        uint64_t v4 = *(void *)(a1 + 16);
        *(void *)(v4 + v5) = 0;
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
      v5 += 16;
    }
    while (v3 < v2);
  }
  CGAffineTransform v7 = *(void **)(a1 + 8);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 8) = 0;
  }
  long long v8 = *(void **)(a1 + 16);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)a1 = 0;
}

void gpc_add_contour(int *a1, int *a2)
{
  if (*a1 == -1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
LABEL_5:
    int v6 = -1;
    goto LABEL_6;
  }
  uint64_t v5 = malloc_type_malloc(4 * (*a1 + 1), 0x100004052888210uLL);
  if (*a1 == -1)
  {
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  unint64_t v16 = (char *)malloc_type_malloc(16 * (*a1 + 1), 0x1020040D5A9D86FuLL);
  uint64_t v4 = v16;
  int v6 = *a1;
  if (*a1 > 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *((void *)a1 + 2);
      v5[v18] = *(_DWORD *)(*((void *)a1 + 1) + 4 * v18);
      *(_OWORD *)&v16[v17] = *(_OWORD *)(v19 + v17);
      ++v18;
      uint64_t v7 = *a1;
      v17 += 16;
    }
    while (v18 < v7);
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v7 = v6;
LABEL_7:
  v5[v7] = 0;
  *(_DWORD *)&v4[16 * v7] = *a2;
  uint64_t v8 = *a2;
  if (v8) {
    CGAffineTransform v9 = malloc_type_malloc(16 * v8, 0x1000040451B5BE8uLL);
  }
  else {
    CGAffineTransform v9 = 0;
  }
  uint64_t v10 = &v4[16 * v7];
  *((void *)v10 + 1) = v9;
  int64x2_t v11 = v10 + 8;
  if (*a2 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      *(_OWORD *)(*v11 + v12) = *(_OWORD *)(*((void *)a2 + 1) + v12);
      ++v13;
      v12 += 16;
    }
    while (v13 < *a2);
  }
  uint64_t v14 = (void *)*((void *)a1 + 2);
  if (v14)
  {
    free(v14);
    *((void *)a1 + 2) = 0;
  }
  unint64_t v15 = (void *)*((void *)a1 + 1);
  if (v15) {
    free(v15);
  }
  ++*a1;
  *((void *)a1 + 1) = v5;
  *((void *)a1 + 2) = v4;
}

double *build_lmt(double **a1, double **a2, _DWORD *a3, unsigned int *a4, int a5)
{
  uint64_t v5 = *a4;
  if ((int)v5 < 1) {
    return 0;
  }
  uint64_t v7 = (int *)a4;
  uint64_t v10 = 0;
  int v11 = 0;
  do
  {
    uint64_t v12 = (uint64_t *)(*((void *)a4 + 2) + 16 * v10);
    uint64_t v13 = *v12;
    int v14 = *v12 - 1;
    if ((int)*v12 < 1)
    {
      int v16 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v17 = v12[1];
      uint64_t v18 = (double *)(v17 + 8);
      do
      {
        uint64_t v19 = v15 + 1;
        if (*(double *)(v17 + 16 * ((v14 + (int)v15) % (int)v13) + 8) != *v18
          || (v13 - 1 != v15 ? (uint64_t v20 = v15 + 1) : (uint64_t v20 = 0), *(double *)(v17 + 16 * v20 + 8) != *v18))
        {
          ++v16;
        }
        v18 += 2;
        uint64_t v15 = v19;
      }
      while (v13 != v19);
    }
    v11 += v16;
    ++v10;
  }
  while (v10 != v5);
  if (v11)
  {
    int64x2_t v21 = (double *)malloc_type_malloc(168 * v11, 0x102004014AE800DuLL);
    LODWORD(v5) = *v7;
  }
  else
  {
    int64x2_t v21 = 0;
  }
  if ((int)v5 >= 1)
  {
    uint64_t v22 = 0;
    int v23 = 0;
    long long v24 = 0uLL;
    uint64_t v86 = a3;
    uint64_t v87 = v7;
    do
    {
      uint64_t v25 = *((void *)v7 + 2);
      uint64_t v26 = (_DWORD *)(v25 + 16 * v22);
      LODWORD(v27) = *v26;
      int v89 = v23;
      if ((*v26 & 0x80000000) != 0)
      {
        *uint64_t v26 = -(int)v27;
      }
      else if (v27)
      {
        uint64_t v28 = 0;
        int v29 = 0;
        do
        {
          uint64_t v30 = *(void *)(v25 + 16 * v22 + 8);
          double v31 = *(double *)(v30 + 16 * v28 + 8);
          if (*(double *)(v30 + 16 * (((int)v28 + (int)v27 - 1) % (int)v27) + 8) == v31
            && *(double *)(v30 + 16 * (((int)v28 + 1) % (int)v27) + 8) == v31)
          {
            ++v28;
          }
          else
          {
            char v32 = &v21[21 * v29];
            *char v32 = *(double *)(v30 + 16 * v28);
            v32[1] = v31;
            uint64_t v33 = *a2;
            uint64_t v34 = (double *)a2;
            if (*a2)
            {
              do
              {
                if (*v33 <= v31)
                {
                  if (*v33 >= v31) {
                    goto LABEL_33;
                  }
                  uint64_t v34 = v33 + 2;
                }
                else
                {
                  uint64_t v34 = v33 + 1;
                }
                uint64_t v33 = *(double **)v34;
              }
              while (*(void *)v34);
            }
            uint64_t v35 = (double *)malloc_type_malloc(0x18uLL, 0x102004023CB03E4uLL);
            long long v24 = 0uLL;
            *(void *)uint64_t v34 = v35;
            double *v35 = v31;
            v35[1] = 0.0;
            *(void *)(*(void *)v34 + 16) = 0;
            ++*a3;
            uint64_t v25 = *((void *)v7 + 2);
LABEL_33:
            ++v29;
            ++v28;
          }
          uint64_t v27 = *(int *)(v25 + 16 * v22);
        }
        while (v28 < v27);
        int v36 = v29 - 1;
        if (v29 >= 1)
        {
          uint64_t v37 = 0;
          do
          {
            int v38 = v37;
            double v39 = v21[21 * ((v36 + (int)v37) % v29) + 1];
            double v40 = v21[21 * v37++ + 1];
            if (v39 >= v40)
            {
              int v41 = v37 == v29 ? 0 : v37;
              if (v21[21 * v41 + 1] > v40)
              {
                unsigned int v42 = 0;
                double v43 = v21[21 * v41 + 1];
                uint64_t v44 = 1;
                do
                {
                  uint64_t v45 = v44;
                  int v41 = (v41 + 1) % v29;
                  ++v42;
                  ++v44;
                  BOOL v46 = v21[21 * v41 + 1] <= v43;
                  double v43 = v21[21 * v41 + 1];
                }
                while (!v46);
                uint64_t v47 = 0;
                unint64_t v48 = 0;
                uint64_t v49 = &v21[21 * v89];
                *((_DWORD *)v49 + 26) = 0;
                *((_DWORD *)v49 + 21) = 0;
                *((_DWORD *)v49 + 22) = 0;
                uint64_t v50 = &v21[21 * v38];
                double v52 = *v50;
                double v51 = v50[1];
                do
                {
                  BOOL v53 = v42 > 1;
                  uint64_t v54 = &v49[v47];
                  v54[6] = v52;
                  v54[2] = v52;
                  v54[3] = v51;
                  int v38 = (v38 + 1) % v29;
                  uint64_t v55 = &v21[21 * v38];
                  double v56 = *v55;
                  double v57 = v55[1];
                  v54[4] = *v55;
                  v54[5] = v57;
                  v54[8] = (v56 - v52) / (v57 - v51);
                  *((_DWORD *)v54 + 18) = a5;
                  LODWORD(v55) = v48++ < v42 - 1;
                  if ((v53 & v55) != 0) {
                    uint64_t v58 = v54 + 21;
                  }
                  else {
                    uint64_t v58 = 0;
                  }
                  *((_OWORD *)v54 + 7) = v24;
                  *((_OWORD *)v54 + 8) = v24;
                  BOOL v59 = !v53 || v47 == 0;
                  uint64_t v60 = v54 - 21;
                  if (v59) {
                    uint64_t v60 = 0;
                  }
                  *((void *)v54 + 18) = v60;
                  *((void *)v54 + 19) = v58;
                  v54[20] = 0.0;
                  *((_DWORD *)v54 + 23) = 0;
                  *((_DWORD *)v54 + 24) = 0;
                  v47 += 21;
                  double v51 = v57;
                  double v52 = v56;
                  --v45;
                }
                while (v45);
                v89 += v42;
                uint64_t v61 = (uint64_t *)bound_list(a1, v40);
                insert_bound(v61, (uint64_t)v49);
                long long v24 = 0uLL;
              }
            }
          }
          while (v37 != v29);
          uint64_t v62 = 0;
          do
          {
            int v63 = (v36 + (int)v62) % v29;
            double v64 = v21[21 * v63 + 1];
            double v65 = v21[21 * v62 + 1];
            uint64_t v66 = v62 + 1;
            if (v64 > v65)
            {
              uint64_t v67 = v66 == v29 ? 0 : v62 + 1;
              if (v21[21 * v67 + 1] >= v65)
              {
                unsigned int v68 = 0;
                uint64_t v69 = 1;
                do
                {
                  uint64_t v70 = v69;
                  int v63 = (v36 + v63) % v29;
                  ++v68;
                  ++v69;
                  BOOL v46 = v21[21 * v63 + 1] <= v64;
                  double v64 = v21[21 * v63 + 1];
                }
                while (!v46);
                uint64_t v71 = 0;
                unint64_t v72 = 0;
                uint64_t v73 = &v21[21 * v89];
                *((_DWORD *)v73 + 26) = 0;
                *((_DWORD *)v73 + 21) = 0;
                *((_DWORD *)v73 + 22) = 0;
                uint64_t v74 = &v21[21 * (int)v62];
                double v76 = *v74;
                double v75 = v74[1];
                do
                {
                  BOOL v77 = v68 > 1;
                  uint64_t v78 = &v73[v71];
                  v78[6] = v76;
                  v78[2] = v76;
                  v78[3] = v75;
                  LODWORD(v62) = (v36 + (int)v62) % v29;
                  uint64_t v79 = &v21[21 * (int)v62];
                  double v80 = *v79;
                  double v81 = v79[1];
                  v78[4] = *v79;
                  v78[5] = v81;
                  v78[8] = (v80 - v76) / (v81 - v75);
                  *((_DWORD *)v78 + 18) = a5;
                  LODWORD(v79) = v72++ < v68 - 1;
                  if ((v77 & v79) != 0) {
                    uint64_t v82 = v78 + 21;
                  }
                  else {
                    uint64_t v82 = 0;
                  }
                  *((_OWORD *)v78 + 7) = v24;
                  *((_OWORD *)v78 + 8) = v24;
                  BOOL v59 = !v77 || v71 == 0;
                  uint64_t v83 = v78 - 21;
                  if (v59) {
                    uint64_t v83 = 0;
                  }
                  *((void *)v78 + 18) = v83;
                  *((void *)v78 + 19) = v82;
                  v78[20] = 0.0;
                  *((_DWORD *)v78 + 23) = 0;
                  *((_DWORD *)v78 + 24) = 0;
                  v71 += 21;
                  double v75 = v81;
                  double v76 = v80;
                  --v70;
                }
                while (v70);
                v89 += v68;
                uint64_t v84 = (uint64_t *)bound_list(a1, v65);
                insert_bound(v84, (uint64_t)v73);
                long long v24 = 0uLL;
              }
            }
            uint64_t v62 = v66;
          }
          while (v66 != v29);
        }
      }
      ++v22;
      a3 = v86;
      uint64_t v7 = v87;
      int v23 = v89;
    }
    while (v22 < *v87);
  }
  return v21;
}

double build_sbt(int *a1, uint64_t a2, uint64_t a3)
{
  do
  {
    if (*(void *)(a3 + 8)) {
      build_sbt(a1, a2);
    }
    double result = *(double *)a3;
    uint64_t v7 = *a1;
    *(void *)(a2 + 8 * v7) = *(void *)a3;
    *a1 = v7 + 1;
    a3 = *(void *)(a3 + 16);
  }
  while (a3);
  return result;
}

void free_sbtree(void **a1)
{
  if (*a1)
  {
    free_sbtree((char *)*a1 + 8);
    free_sbtree((char *)*a1 + 16);
    if (*a1)
    {
      free(*a1);
      *a1 = 0;
    }
  }
}

double *add_local_min(void **a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = *a1;
  *a1 = malloc_type_malloc(0x28uLL, 0x10200402FC4DB2FuLL);
  double result = (double *)malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
  *double result = a3;
  result[1] = a4;
  result[2] = 0.0;
  *((void *)*a1 + 4) = *a1;
  uint64_t v10 = *a1;
  *(_DWORD *)uint64_t v10 = 1;
  v10[3] = v8;
  *((void *)*a1 + 1) = result;
  *((void *)*a1 + 2) = result;
  *(void *)(a2 + 112) = *a1;
  return result;
}

uint64_t merge_right(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = *(void *)(a2 + 32);
      *(_DWORD *)(v3 + 4) = 0;
      uint64_t v4 = *(void *)(result + 32);
      if (v4 != v3)
      {
        *(void *)(*(void *)(v3 + 16) + 16) = *(void *)(v4 + 8);
        *(void *)(v3 + 16) = *(void *)(v4 + 16);
        if (a3)
        {
          uint64_t v5 = *(void *)(result + 32);
          do
          {
            if (*(void *)(a3 + 32) == v5)
            {
              *(_DWORD *)a3 = 0;
              *(void *)(a3 + 32) = *(void *)(a2 + 32);
            }
            a3 = *(void *)(a3 + 24);
          }
          while (a3);
        }
      }
    }
  }
  return result;
}

uint64_t merge_left(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = *(void *)(a2 + 32);
      *(_DWORD *)(v3 + 4) = 1;
      uint64_t v4 = *(void *)(result + 32);
      if (v4 != v3)
      {
        *(void *)(*(void *)(v4 + 16) + 16) = *(void *)(v3 + 8);
        *(void *)(v3 + 8) = *(void *)(v4 + 8);
        if (a3)
        {
          uint64_t v5 = *(void *)(result + 32);
          do
          {
            if (*(void *)(a3 + 32) == v5)
            {
              *(_DWORD *)a3 = 0;
              *(void *)(a3 + 32) = *(void *)(a2 + 32);
            }
            a3 = *(void *)(a3 + 24);
          }
          while (a3);
        }
      }
    }
  }
  return result;
}

double *bound_list(double **a1, double a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *a1;
  if (!*a1)
  {
LABEL_9:
    uint64_t v7 = (double *)malloc_type_malloc(0x18uLL, 0x102004023CB03E4uLL);
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  double v5 = *v4;
  if (*v4 > a2)
  {
LABEL_7:
    uint64_t v7 = (double *)malloc_type_malloc(0x18uLL, 0x102004023CB03E4uLL);
LABEL_10:
    *uint64_t v3 = v7;
    *uint64_t v7 = a2;
    v7[1] = 0.0;
    *((void *)*v3 + 2) = v4;
    int v6 = *v3;
    return v6 + 1;
  }
  while (1)
  {
    int v6 = v4;
    if (v5 >= a2) {
      return v6 + 1;
    }
    uint64_t v4 = (double *)*((void *)v4 + 2);
    if (!v4)
    {
      uint64_t v3 = (double **)(v6 + 2);
      goto LABEL_9;
    }
    double v5 = *v4;
    if (*v4 > a2)
    {
      uint64_t v3 = (double **)(v6 + 2);
      goto LABEL_7;
    }
  }
}

uint64_t *insert_bound(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    double v3 = *(double *)(a2 + 16);
    while (1)
    {
      double v4 = *(double *)(v2 + 16);
      if (v3 < v4 || v3 == v4 && *(double *)(a2 + 64) < *(double *)(v2 + 64)) {
        break;
      }
      double result = (uint64_t *)(v2 + 160);
      uint64_t v2 = *(void *)(v2 + 160);
      if (!v2) {
        goto LABEL_7;
      }
    }
    *double result = a2;
    *(void *)(a2 + 160) = v2;
  }
  else
  {
LABEL_7:
    *double result = a2;
  }
  return result;
}

char *create_contour_bboxes(int *a1)
{
  uint64_t v1 = *a1;
  if (!v1) {
    return 0;
  }
  double result = (char *)malloc_type_malloc(32 * v1, 0x1000040E0EAB150uLL);
  uint64_t v4 = *a1;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *((void *)a1 + 2);
    int64x2_t v7 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v8 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      CGAffineTransform v9 = (int64x2_t *)&result[32 * v5];
      *CGAffineTransform v9 = v7;
      v9[1] = v8;
      uint64_t v10 = *(unsigned int *)(v6 + 16 * v5);
      if ((int)v10 >= 1)
      {
        int v11 = (double *)(*(void *)(v6 + 16 * v5 + 8) + 8);
        double v12 = 1.79769313e308;
        double v13 = -1.79769313e308;
        double v14 = -1.79769313e308;
        double v15 = 1.79769313e308;
        do
        {
          double v16 = *(v11 - 1);
          if (v16 < v15)
          {
            *(double *)v9->i64 = v16;
            double v15 = v16;
          }
          double v17 = *v11;
          if (*v11 < v12)
          {
            *(double *)&v9->i64[1] = v17;
            double v12 = v17;
          }
          if (v16 > v14)
          {
            *(double *)v9[1].i64 = v16;
            double v14 = v16;
          }
          if (v17 > v13)
          {
            *(double *)&v9[1].i64[1] = v17;
            double v13 = v17;
          }
          v11 += 2;
          --v10;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t PBPageLayoutPkg::PBRect::formatText(PBPageLayoutPkg::PBRect *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "height", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "origin_x", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "origin_y", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "width", *((double *)this + 4));
LABEL_6:

  return MEMORY[0x1F4147498](a2);
}

uint64_t PBPageLayoutPkg::PBRect::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 32));
      if ((*(unsigned char *)(v3 + 40) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5);
}

uint64_t PBPageLayoutPkg::PBRect::readFrom(PBPageLayoutPkg::PBRect *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void PBPageLayoutPkg::PBRect::~PBRect(PBPageLayoutPkg::PBRect *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x18532A2A0);
}

uint64_t resample_vertical<float,float,4,(AlphaStyle)3>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t _Q4, uint64_t a7, uint64_t a8, int a9, float32x4_t **a10, uint64_t a11)
{
  char v15 = *a10;
  unsigned int v16 = a10[1];
  uint64_t v17 = *(int *)(result + 4);
  char v18 = (float *)(result + 8);
  if (a9 >= 4)
  {
    int v20 = 0;
    for (unint64_t i = 4; i <= a9; i += 4)
    {
      if ((int)v17 >= 2)
      {
        uint64_t result = 0;
        v22.i32[0] = 0;
        v11.i64[0] = 0;
        __int32 v23 = 0;
        uint64_t v40 = (5 * v20) & 0xFFFFFFFC;
        __int32 v24 = 0;
        int v38 = v18;
        v25.i32[0] = 0;
        v26.i32[0] = 0;
        __int32 v27 = 0;
        v12.i64[0] = 0;
        v28.i32[0] = 0;
        __int32 v29 = 0;
        v14.i32[0] = 0;
        __int32 v30 = 0;
        v31.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        v34.i32[0] = 0;
        v35.i32[0] = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v39 = 0;
        do
        {
          int v41 = (void *)(a11 + 8 * result);
          unsigned int v42 = (float32x4_t *)(*v41 + 4 * v40);
          double v43 = (float32x4_t *)(v41[1] + 4 * v40);
          float32x2_t v44 = *(float32x2_t *)v38;
          v38 += 2;
          v35.i32[1] = v36;
          v35.i64[1] = __PAIR64__(v39, v37);
          v31.i32[1] = v32;
          v31.i64[1] = __PAIR64__(v34.u32[0], v33);
          v28.i32[1] = v29;
          v28.i64[1] = __PAIR64__(v30, v14.u32[0]);
          v25.i32[1] = v26.i32[0];
          v25.i64[1] = __PAIR64__(v12.u32[0], v27);
          v22.i32[1] = v11.i32[0];
          v22.i64[1] = __PAIR64__(v24, v23);
          float32x4_t v22 = vmlaq_lane_f32(vmlaq_n_f32(v22, *v42, v44.f32[0]), *v43, v44, 1);
          __int32 v24 = v22.i32[3];
          __int32 v23 = v22.i32[2];
          v11.i32[0] = v22.i32[1];
          float32x4_t v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v42[1], v44.f32[0]), v43[1], v44, 1);
          v12.i32[0] = v25.i32[3];
          __int32 v27 = v25.i32[2];
          v26.i32[0] = v25.i32[1];
          float32x4_t v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v42[2], v44.f32[0]), v43[2], v44, 1);
          __int32 v30 = v28.i32[3];
          v14.i32[0] = v28.i32[2];
          __int32 v29 = v28.i32[1];
          float32x4_t v31 = vmlaq_lane_f32(vmlaq_n_f32(v31, v42[3], v44.f32[0]), v43[3], v44, 1);
          v34.i32[0] = v31.i32[3];
          __int32 v33 = v31.i32[2];
          __int32 v32 = v31.i32[1];
          float32x4_t v35 = vmlaq_lane_f32(vmlaq_n_f32(v35, v42[4], v44.f32[0]), v43[4], v44, 1);
          __int32 v39 = v35.i32[3];
          __int32 v37 = v35.i32[2];
          __int32 v36 = v35.i32[1];
          uint64_t v45 = (char *)(result + 4);
          result += 2;
        }
        while ((uint64_t)v45 <= v17);
      }
      else
      {
        v22.i32[0] = 0;
        v11.i64[0] = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        v25.i32[0] = 0;
        v26.i32[0] = 0;
        __int32 v27 = 0;
        v12.i64[0] = 0;
        v28.i32[0] = 0;
        __int32 v29 = 0;
        v14.i32[0] = 0;
        __int32 v30 = 0;
        v31.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        v34.i32[0] = 0;
        v35.i32[0] = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        int v38 = v18;
        __int32 v39 = 0;
      }
      if (v17)
      {
        uint64_t result = (5 * v20) & 0xFFFFFFFC;
        BOOL v46 = (float32x4_t *)(*(void *)(a11 + 8 * ((int)v17 - 1)) + 4 * result);
        v35.i32[1] = v36;
        v35.i64[1] = __PAIR64__(v39, v37);
        v31.i32[1] = v32;
        v31.i64[1] = __PAIR64__(v34.u32[0], v33);
        v28.i32[1] = v29;
        v28.i64[1] = __PAIR64__(v30, v14.u32[0]);
        v25.i32[1] = v26.i32[0];
        v25.i64[1] = __PAIR64__(v12.u32[0], v27);
        v22.i32[1] = v11.i32[0];
        v22.i64[1] = __PAIR64__(v24, v23);
        float32x4_t v22 = vaddq_f32(vmlaq_n_f32(v22, *v46, *v38), (float32x4_t)0);
        __int32 v24 = v22.i32[3];
        __int32 v23 = v22.i32[2];
        v11.i32[0] = v22.i32[1];
        float32x4_t v25 = vaddq_f32(vmlaq_n_f32(v25, v46[1], *v38), (float32x4_t)0);
        v12.i32[0] = v25.i32[3];
        __int32 v27 = v25.i32[2];
        v26.i32[0] = v25.i32[1];
        float32x4_t v28 = vaddq_f32(vmlaq_n_f32(v28, v46[2], *v38), (float32x4_t)0);
        __int32 v30 = v28.i32[3];
        v14.i32[0] = v28.i32[2];
        __int32 v29 = v28.i32[1];
        float32x4_t v31 = vaddq_f32(vmlaq_n_f32(v31, v46[3], *v38), (float32x4_t)0);
        v34.i32[0] = v31.i32[3];
        __int32 v33 = v31.i32[2];
        __int32 v32 = v31.i32[1];
        float32x4_t v35 = vaddq_f32(vmlaq_n_f32(v35, v46[4], *v38), (float32x4_t)0);
        __int32 v39 = v35.i32[3];
        __int32 v37 = v35.i32[2];
        __int32 v36 = v35.i32[1];
      }
      v20 += 4;
      v25.i32[1] = v29;
      v25.i64[1] = __PAIR64__(v39, v33);
      v22.i32[1] = v11.i32[0];
      v22.i64[1] = __PAIR64__(v24, v23);
      v26.i32[1] = v27;
      v26.i64[1] = __PAIR64__(v28.u32[0], v12.u32[0]);
      v14.i32[1] = v30;
      v14.i64[1] = __PAIR64__(v32, v31.u32[0]);
      v34.i32[1] = v35.i32[0];
      v34.i64[1] = __PAIR64__(v37, v36);
      __asm { FMOV            V4.4S, #1.0 }
      *char v15 = v22;
      v15[1] = v26;
      v15[2] = v14;
      v15[3] = v34;
      v15 += 4;
      *v16++ = vmaxnmq_f32(vminnmq_f32(vmaxnmq_f32(v25, (float32x4_t)0), _Q4), vpmaxq_f32(vpmaxq_f32(v22, v26), vpmaxq_f32(v14, v34)));
    }
    int v19 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v19 = 0;
  }
  if (v19 < a9)
  {
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      if ((int)v17 >= 2)
      {
        uint64_t v57 = 0;
        uint64_t v58 = (5 * v19);
        v52.i32[0] = 0;
        double v56 = v18;
        __int32 v53 = 0;
        v54.i32[0] = 0;
        __int32 v55 = 0;
        _Q4.i64[0] = 0;
        do
        {
          BOOL v59 = (void *)(a11 + 8 * v57);
          uint64_t result = *v59 + 4 * v58;
          v11.i32[0] = *(_DWORD *)(result + 16);
          uint64_t v60 = (float32x4_t *)(v59[1] + 4 * v58);
          float32x4_t v12 = *v60;
          float32x2_t v61 = *(float32x2_t *)v56;
          v56 += 2;
          *(float32x2_t *)v13.f32 = v61;
          v14.i32[0] = v60[1].i32[0];
          v52.i32[1] = v53;
          v52.i64[1] = __PAIR64__(v55, v54.u32[0]);
          _Q4 = vmlaq_lane_f32(vmlaq_f32(_Q4, v13, v11), v14, v61, 1);
          float32x4_t v52 = vmlaq_lane_f32(vmlaq_n_f32(v52, *(float32x4_t *)result, v61.f32[0]), *v60, v61, 1);
          __int32 v55 = v52.i32[3];
          v54.i32[0] = v52.i32[2];
          __int32 v53 = v52.i32[1];
          uint64_t v62 = v57 + 4;
          v57 += 2;
        }
        while (v62 <= v17);
      }
      else
      {
        v52.i32[0] = 0;
        __int32 v53 = 0;
        v54.i32[0] = 0;
        __int32 v55 = 0;
        double v56 = v18;
        _Q4.i64[0] = 0;
      }
      if (v17)
      {
        int v63 = (float32x4_t *)(*(void *)(a11 + 8 * ((int)v17 - 1)) + 4 * (5 * v19));
        v11.i32[0] = v63[1].i32[0];
        v12.f32[0] = *v56;
        v52.i32[1] = v53;
        v52.i64[1] = __PAIR64__(v55, v54.u32[0]);
        _Q4 = vaddq_f32(vmlaq_f32(_Q4, v12, v11), (float32x4_t)0);
        float32x4_t v52 = vaddq_f32(vmlaq_n_f32(v52, *v63, *v56), (float32x4_t)0);
        __int32 v55 = v52.i32[3];
        v54.i32[0] = v52.i32[2];
        __int32 v53 = v52.i32[1];
      }
      v64.i64[0] = __PAIR64__(v53, v52.u32[0]);
      v64.i64[1] = __PAIR64__(v55, v54.u32[0]);
      v52.i32[1] = v53;
      v54.i32[1] = v55;
      *v15++ = v64;
      v16->i32[0] = vmaxnm_f32(vminnm_f32(vmaxnm_f32(*(float32x2_t *)_Q4.f32, 0), _D1), vpmax_f32(vpmax_f32(*(float32x2_t *)v52.f32, v54), 0)).u32[0];
      unsigned int v16 = (float32x4_t *)((char *)v16 + 4);
      ++v19;
    }
    while (v19 < a9);
  }
  return result;
}

uint64_t resample_vertical<float,float,3,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  int64x2_t v7 = (float32x2_t *)a5[1];
  uint64_t v8 = *(int *)(result + 4);
  char v9 = (float *)(result + 8);
  __asm { FMOV            V0.2S, #1.0 }
  if (a4 >= 2)
  {
    int v16 = 0;
    for (unint64_t i = 2; i <= a4; i += 2)
    {
      float32x4_t v18 = 0uLL;
      float32x4_t v19 = 0uLL;
      int v20 = v9;
      if ((int)v8 >= 2)
      {
        uint64_t result = 0;
        uint64_t v21 = (4 * v16) & 0xFFFFFFF8;
        int v20 = v9;
        do
        {
          float32x4_t v22 = (void *)(a6 + 8 * result);
          __int32 v23 = (float32x4_t *)(*v22 + 4 * v21);
          __int32 v24 = (float32x4_t *)(v22[1] + 4 * v21);
          float32x2_t v25 = *(float32x2_t *)v20;
          v20 += 2;
          float32x4_t v19 = vmlaq_lane_f32(vmlaq_n_f32(v19, v23[1], v25.f32[0]), v24[1], v25, 1);
          float32x4_t v18 = vmlaq_lane_f32(vmlaq_n_f32(v18, *v23, v25.f32[0]), *v24, v25, 1);
          uint64_t v26 = result + 4;
          result += 2;
        }
        while (v26 <= v8);
      }
      if (v8)
      {
        uint64_t result = (4 * v16) & 0xFFFFFFF8;
        __int32 v27 = (float32x4_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 4 * result);
        float32x4_t v19 = vaddq_f32(vmlaq_n_f32(v19, v27[1], *v20), (float32x4_t)0);
        float32x4_t v18 = vaddq_f32(vmlaq_n_f32(v18, *v27, *v20), (float32x4_t)0);
      }
      v16 += 2;
      int8x16_t v28 = (int8x16_t)vpmaxq_f32(v18, v19);
      float32x2_t v29 = vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)*(_OWORD *)&vuzp2q_s32(vuzp2q_s32((int32x4_t)v18, (int32x4_t)v19), (int32x4_t)v18), 0), _D0), vpmax_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)));
      v18.i32[3] = v19.i32[0];
      *uint64_t v6 = v18;
      v6[1].i64[0] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL).u64[0];
      uint64_t v6 = (float32x4_t *)((char *)v6 + 24);
      *v7++ = v29;
    }
    signed int v15 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v15 = 0;
  }
  for (; v15 < a4; ++v15)
  {
    float32x4_t v30 = 0uLL;
    float32x4_t v31 = v9;
    if ((int)v8 >= 2)
    {
      uint64_t v32 = 0;
      uint64_t v33 = (4 * v15);
      float32x4_t v31 = v9;
      do
      {
        uint64_t result = 4 * v33;
        float32x2_t v34 = *(float32x2_t *)v31;
        v31 += 2;
        float32x4_t v30 = vmlaq_lane_f32(vmlaq_n_f32(v30, *(float32x4_t *)(*(void *)(a6 + 8 * v32) + 4 * v33), v34.f32[0]), *(float32x4_t *)(*(void *)(a6 + 8 * v32 + 8) + 4 * v33), v34, 1);
        uint64_t v35 = v32 + 4;
        v32 += 2;
      }
      while (v35 <= v8);
    }
    if (v8) {
      float32x4_t v30 = vaddq_f32(vmlaq_n_f32(v30, *(float32x4_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 4 * (4 * v15)), *v31), (float32x4_t)0);
    }
    float32x2_t v36 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
    v6->i64[0] = v30.i64[0];
    v6->i32[2] = v36.i32[0];
    uint64_t v6 = (float32x4_t *)((char *)v6 + 12);
    v7->i32[0] = vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v30, 3), 0), _D0), vpmax_f32(vpmax_f32(*(float32x2_t *)v30.f32, v36), _D0)).u32[0];
    int64x2_t v7 = (float32x2_t *)((char *)v7 + 4);
  }
  return result;
}

uint64_t resample_vertical<float,float,1,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  int64x2_t v7 = a5[1];
  uint64_t v8 = *(int *)(result + 4);
  char v9 = (float *)(result + 8);
  if (a4 >= 4)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 4;
    __asm { FMOV            V1.4S, #1.0 }
    do
    {
      float32x4_t v18 = 0uLL;
      float32x4_t v19 = 0uLL;
      int v20 = v9;
      if ((int)v8 >= 2)
      {
        uint64_t result = 0;
        int v20 = v9;
        do
        {
          uint64_t v21 = (void *)(a6 + 8 * result);
          float32x4_t v22 = (float32x4_t *)(*v21 + 8 * v11);
          __int32 v23 = (float32x4_t *)(v21[1] + 8 * v11);
          float32x2_t v24 = *(float32x2_t *)v20;
          v20 += 2;
          float32x4_t v19 = vmlaq_lane_f32(vmlaq_n_f32(v19, v22[1], v24.f32[0]), v23[1], v24, 1);
          float32x4_t v18 = vmlaq_lane_f32(vmlaq_n_f32(v18, *v22, v24.f32[0]), *v23, v24, 1);
          uint64_t v25 = result + 4;
          result += 2;
        }
        while (v25 <= v8);
      }
      if (v8)
      {
        uint64_t v26 = (float32x4_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 8 * v11);
        float32x4_t v19 = vaddq_f32(vmlaq_n_f32(v19, v26[1], *v20), (float32x4_t)0);
        float32x4_t v18 = vaddq_f32(vmlaq_n_f32(v18, *v26, *v20), (float32x4_t)0);
      }
      v11 += 4;
      float32x4_t v27 = (float32x4_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v19);
      *v6++ = v27;
      *v7++ = vmaxnmq_f32(vminnmq_f32(vmaxnmq_f32((float32x4_t)vuzp2q_s32((int32x4_t)v18, (int32x4_t)v19), (float32x4_t)0), _Q1), v27);
      v12 += 4;
    }
    while (v12 <= a4);
    int v10 = a4 & 0x7FFFFFFC;
  }
  else
  {
    int v10 = 0;
  }
  if (v10 < a4)
  {
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      float32x2_t v29 = 0;
      float32x4_t v30 = v9;
      if ((int)v8 >= 2)
      {
        uint64_t v31 = 0;
        uint64_t v32 = (2 * v10);
        float32x2_t v29 = 0;
        float32x4_t v30 = v9;
        do
        {
          uint64_t result = 4 * v32;
          float32x2_t v33 = *(float32x2_t *)v30;
          v30 += 2;
          float32x2_t v29 = vmla_lane_f32(vmla_n_f32(v29, *(float32x2_t *)(*(void *)(a6 + 8 * v31) + 4 * v32), v33.f32[0]), *(float32x2_t *)(*(void *)(a6 + 8 * v31 + 8) + 4 * v32), v33, 1);
          uint64_t v34 = v31 + 4;
          v31 += 2;
        }
        while (v34 <= v8);
      }
      if (v8) {
        float32x2_t v29 = vadd_f32(vmla_n_f32(v29, *(float32x2_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 4 * (2 * v10)), *v30), 0);
      }
      v6->i32[0] = v29.i32[0];
      uint64_t v6 = (float32x4_t *)((char *)v6 + 4);
      v7->i32[0] = vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)vdup_lane_s32((int32x2_t)v29, 1), 0), _D1), v29).u32[0];
      int64x2_t v7 = (float32x4_t *)((char *)v7 + 4);
      ++v10;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t resample_vertical<float,float,5,(AlphaStyle)2>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, float32x4_t **a10, uint64_t a11)
{
  signed int v15 = *a10;
  uint64_t v16 = *(int *)(result + 4);
  uint64_t v17 = (float *)(result + 8);
  if (a9 >= 4)
  {
    int v19 = 0;
    for (unint64_t i = 4; i <= a9; i += 4)
    {
      if ((int)v16 >= 2)
      {
        uint64_t result = 0;
        v21.i32[0] = 0;
        __int32 v22 = 0;
        v14.i64[0] = 0;
        uint64_t v39 = (5 * v19) & 0xFFFFFFFC;
        __int32 v23 = 0;
        __int32 v37 = v17;
        v24.i32[0] = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        v28.i32[0] = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        v11.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        v12.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v38 = 0;
        do
        {
          uint64_t v40 = (void *)(a11 + 8 * result);
          int v41 = (float32x4_t *)(*v40 + 4 * v39);
          unsigned int v42 = (float32x4_t *)(v40[1] + 4 * v39);
          float32x2_t v43 = *(float32x2_t *)v37;
          v37 += 2;
          v12.i32[1] = v35;
          v12.i64[1] = __PAIR64__(v38, v36);
          v11.i32[1] = v32;
          v11.i64[1] = __PAIR64__(v34, v33);
          v28.i32[1] = v29;
          v28.i64[1] = __PAIR64__(v31, v30);
          v24.i32[1] = v25;
          v24.i64[1] = __PAIR64__(v27, v26);
          v21.i32[1] = v22;
          v21.i64[1] = __PAIR64__(v23, v14.u32[0]);
          float32x4_t v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, *v41, v43.f32[0]), *v42, v43, 1);
          __int32 v23 = v21.i32[3];
          v14.i32[0] = v21.i32[2];
          __int32 v22 = v21.i32[1];
          float32x4_t v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, v41[1], v43.f32[0]), v42[1], v43, 1);
          __int32 v27 = v24.i32[3];
          __int32 v26 = v24.i32[2];
          __int32 v25 = v24.i32[1];
          float32x4_t v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v41[2], v43.f32[0]), v42[2], v43, 1);
          __int32 v31 = v28.i32[3];
          __int32 v30 = v28.i32[2];
          __int32 v29 = v28.i32[1];
          float32x4_t v11 = vmlaq_lane_f32(vmlaq_n_f32(v11, v41[3], v43.f32[0]), v42[3], v43, 1);
          __int32 v34 = v11.i32[3];
          __int32 v33 = v11.i32[2];
          __int32 v32 = v11.i32[1];
          float32x4_t v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, v41[4], v43.f32[0]), v42[4], v43, 1);
          __int32 v38 = v12.i32[3];
          __int32 v36 = v12.i32[2];
          __int32 v35 = v12.i32[1];
          uint64_t v44 = result + 4;
          result += 2;
        }
        while (v44 <= v16);
      }
      else
      {
        v21.i32[0] = 0;
        __int32 v22 = 0;
        v14.i64[0] = 0;
        __int32 v23 = 0;
        v24.i32[0] = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        v28.i32[0] = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        v11.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        v12.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = v17;
        __int32 v38 = 0;
      }
      if (v16)
      {
        uint64_t result = (5 * v19) & 0xFFFFFFFC;
        uint64_t v45 = (float32x4_t *)(*(void *)(a11 + 8 * ((int)v16 - 1)) + 4 * result);
        v12.i32[1] = v35;
        v12.i64[1] = __PAIR64__(v38, v36);
        v11.i32[1] = v32;
        v11.i64[1] = __PAIR64__(v34, v33);
        v28.i32[1] = v29;
        v28.i64[1] = __PAIR64__(v31, v30);
        v24.i32[1] = v25;
        v24.i64[1] = __PAIR64__(v27, v26);
        v21.i32[1] = v22;
        v21.i64[1] = __PAIR64__(v23, v14.u32[0]);
        float32x4_t v21 = vaddq_f32(vmlaq_n_f32(v21, *v45, *v37), (float32x4_t)0);
        __int32 v23 = v21.i32[3];
        v14.i32[0] = v21.i32[2];
        __int32 v22 = v21.i32[1];
        float32x4_t v24 = vaddq_f32(vmlaq_n_f32(v24, v45[1], *v37), (float32x4_t)0);
        __int32 v27 = v24.i32[3];
        __int32 v26 = v24.i32[2];
        __int32 v25 = v24.i32[1];
        float32x4_t v28 = vaddq_f32(vmlaq_n_f32(v28, v45[2], *v37), (float32x4_t)0);
        __int32 v31 = v28.i32[3];
        __int32 v30 = v28.i32[2];
        __int32 v29 = v28.i32[1];
        float32x4_t v11 = vaddq_f32(vmlaq_n_f32(v11, v45[3], *v37), (float32x4_t)0);
        __int32 v34 = v11.i32[3];
        __int32 v33 = v11.i32[2];
        __int32 v32 = v11.i32[1];
        float32x4_t v12 = vaddq_f32(vmlaq_n_f32(v12, v45[4], *v37), (float32x4_t)0);
        __int32 v38 = v12.i32[3];
        __int32 v36 = v12.i32[2];
        __int32 v35 = v12.i32[1];
      }
      v46.i64[0] = __PAIR64__(v29, v24.u32[0]);
      v46.i64[1] = __PAIR64__(v38, v33);
      v47.i64[0] = __PAIR64__(v28.u32[0], v23);
      v47.i64[1] = __PAIR64__(v36, v32);
      v19 += 4;
      v48.i64[0] = __PAIR64__(v27, v14.u32[0]);
      v48.i64[1] = __PAIR64__(v35, v11.u32[0]);
      float32x4_t v49 = vmaxnmq_f32(v46, v47);
      v47.i64[0] = __PAIR64__(v26, v22);
      float32x4_t v50 = vmaxnmq_f32(v49, v48);
      v47.i64[1] = __PAIR64__(v12.u32[0], v31);
      v48.i64[0] = __PAIR64__(v25, v21.u32[0]);
      v48.i64[1] = __PAIR64__(v34, v30);
      float32x4_t v51 = vmaxnmq_f32(vmaxnmq_f32(vmaxnmq_f32(v50, v47), v48), (float32x4_t)0);
      v52.i64[0] = 0x80000000800000;
      v52.i64[1] = 0x80000000800000;
      float32x4_t v53 = (float32x4_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
      float32x4_t v54 = v53;
      v54.i32[3] = v51.i32[3];
      float32x4_t v55 = v53;
      v55.i32[2] = v51.i32[2];
      float32x4_t v56 = v53;
      v56.i32[1] = v51.i32[1];
      v53.i32[0] = v51.i32[0];
      v21.i32[1] = v22;
      v21.i64[1] = __PAIR64__(v23, v14.u32[0]);
      v24.i32[1] = v25;
      v24.i64[1] = __PAIR64__(v27, v26);
      v28.i32[1] = v29;
      v28.i64[1] = __PAIR64__(v31, v30);
      v11.i32[1] = v32;
      v11.i64[1] = __PAIR64__(v34, v33);
      v12.i32[1] = v35;
      v12.i64[1] = __PAIR64__(v38, v36);
      a6 = vminnmq_f32(vmaxnmq_f32(v11, v55), (float32x4_t)xmmword_1850CD6B0);
      v15[2] = vminnmq_f32(vmaxnmq_f32(v28, v56), (float32x4_t)xmmword_1850CD6A0);
      v15[3] = a6;
      *signed int v15 = vminnmq_f32(vmaxnmq_f32(v21, v52), (float32x4_t)vdupq_n_s32(0x7F7FFFFFu));
      v15[1] = vminnmq_f32(vmaxnmq_f32(v24, v53), (float32x4_t)xmmword_1850CD690);
      v15[4] = vminnmq_f32(vmaxnmq_f32(v12, v54), (float32x4_t)xmmword_1850CD6C0);
      v15 += 5;
    }
    int v18 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v18 = 0;
  }
  for (; v18 < a9; ++v18)
  {
    if ((int)v16 >= 2)
    {
      uint64_t v62 = 0;
      uint64_t v63 = (5 * v18);
      v57.i32[0] = 0;
      float32x2_t v61 = v17;
      __int32 v58 = 0;
      __int32 v59 = 0;
      __int32 v60 = 0;
      a6.i64[0] = 0;
      do
      {
        float32x4_t v64 = (void *)(a11 + 8 * v62);
        double v65 = (float32x4_t *)(*v64 + 4 * v63);
        v11.i32[0] = v65[1].i32[0];
        uint64_t v66 = (float32x4_t *)(v64[1] + 4 * v63);
        float32x4_t v12 = *v66;
        float32x2_t v67 = *(float32x2_t *)v61;
        v61 += 2;
        *(float32x2_t *)v13.f32 = v67;
        v14.i32[0] = v66[1].i32[0];
        v57.i32[1] = v58;
        v57.i64[1] = __PAIR64__(v60, v59);
        a6 = vmlaq_lane_f32(vmlaq_f32(a6, v13, v11), v14, v67, 1);
        float32x4_t v57 = vmlaq_lane_f32(vmlaq_n_f32(v57, *v65, v67.f32[0]), *v66, v67, 1);
        __int32 v60 = v57.i32[3];
        __int32 v59 = v57.i32[2];
        __int32 v58 = v57.i32[1];
        uint64_t v68 = v62 + 4;
        v62 += 2;
      }
      while (v68 <= v16);
    }
    else
    {
      v57.i32[0] = 0;
      __int32 v58 = 0;
      __int32 v59 = 0;
      __int32 v60 = 0;
      float32x2_t v61 = v17;
      a6.i64[0] = 0;
    }
    if (v16)
    {
      uint64_t v69 = (float32x4_t *)(*(void *)(a11 + 8 * ((int)v16 - 1)) + 4 * (5 * v18));
      v11.i32[0] = v69[1].i32[0];
      v12.f32[0] = *v61;
      v57.i32[1] = v58;
      v57.i64[1] = __PAIR64__(v60, v59);
      a6 = vaddq_f32(vmlaq_f32(a6, v12, v11), (float32x4_t)0);
      float32x4_t v57 = vaddq_f32(vmlaq_n_f32(v57, *v69, *v61), (float32x4_t)0);
      __int32 v60 = v57.i32[3];
      __int32 v59 = v57.i32[2];
      __int32 v58 = v57.i32[1];
    }
    v57.i32[1] = v58;
    v57.i64[1] = __PAIR64__(v60, v59);
    a6 = vmaxnmq_f32(v57, a6);
    a6.f32[0] = vmaxvq_f32(a6);
    float v70 = fmaxf(a6.f32[0], 0.0);
    if (a6.f32[0] <= 1.0) {
      float v71 = v70;
    }
    else {
      float v71 = 1.0;
    }
    *signed int v15 = v57;
    v15[1].f32[0] = v71;
    signed int v15 = (float32x4_t *)((char *)v15 + 20);
  }
  return result;
}

uint64_t resample_vertical<float,float,4,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    unint64_t v11 = 2;
    int8x16_t v12 = (int8x16_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = 0uLL;
      signed int v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = (4 * v10) & 0xFFFFFFF8;
        signed int v15 = v8;
        do
        {
          int v18 = (void *)(a6 + 8 * v16);
          int v19 = (float32x4_t *)(*v18 + 4 * v17);
          int v20 = (float32x4_t *)(v18[1] + 4 * v17);
          float32x2_t v21 = *(float32x2_t *)v15;
          v15 += 2;
          float32x4_t v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, v19[1], v21.f32[0]), v20[1], v21, 1);
          float32x4_t v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, *v19, v21.f32[0]), *v20, v21, 1);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        __int32 v22 = (float32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        float32x4_t v14 = vaddq_f32(vmlaq_n_f32(v14, v22[1], *v15), (float32x4_t)0);
        float32x4_t v13 = vaddq_f32(vmlaq_n_f32(v13, *v22, *v15), (float32x4_t)0);
      }
      v10 += 2;
      int8x16_t v23 = (int8x16_t)vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14));
      int32x2_t v24 = (int32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
      *(float32x2_t *)v23.i8 = vmaxnm_f32(vmaxnm_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, v24), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, v24)), 0);
      float32x4_t v25 = (float32x4_t)v12;
      v25.i32[3] = v23.i32[1];
      *uint64_t v6 = vminnmq_f32(vmaxnmq_f32(v13, (float32x4_t)vextq_s8(v12, v23, 4uLL)), (float32x4_t)xmmword_1850CD6C0);
      v6[1] = vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850CD6C0);
      v6 += 2;
      v11 += 2;
    }
    while (v11 <= a4);
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    float32x4_t v26 = 0uLL;
    __int32 v27 = v8;
    if ((int)v7 >= 2)
    {
      uint64_t v28 = 0;
      __int32 v27 = v8;
      do
      {
        __int32 v29 = (uint64_t *)(a6 + 8 * v28);
        uint64_t result = *v29;
        float32x2_t v30 = *(float32x2_t *)v27;
        v27 += 2;
        float32x4_t v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, *(float32x4_t *)(*v29 + 4 * (4 * v9)), v30.f32[0]), *(float32x4_t *)(v29[1] + 4 * (4 * v9)), v30, 1);
        uint64_t v31 = v28 + 4;
        v28 += 2;
      }
      while (v31 <= v7);
    }
    if (v7) {
      float32x4_t v26 = vaddq_f32(vmlaq_n_f32(v26, *(float32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9)), *v27), (float32x4_t)0);
    }
    float v32 = vmaxvq_f32(v26);
    float v33 = fmaxf(v32, 0.0);
    if (v32 <= 1.0) {
      float v34 = v33;
    }
    else {
      float v34 = 1.0;
    }
    v26.f32[3] = v34;
    *v6++ = v26;
  }
  return result;
}

uint64_t resample_vertical<float,float,2,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (float *)(result + 8);
  if (a4 >= 4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 4;
    v12.i64[0] = 0x80000000800000;
    v12.i64[1] = 0x80000000800000;
    int32x4_t v13 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      float32x4_t v14 = 0uLL;
      float32x4_t v15 = 0uLL;
      uint64_t v16 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t result = 0;
        uint64_t v16 = v8;
        do
        {
          uint64_t v17 = (void *)(a6 + 8 * result);
          int v18 = (float32x4_t *)(*v17 + 8 * v10);
          int v19 = (float32x4_t *)(v17[1] + 8 * v10);
          float32x2_t v20 = *(float32x2_t *)v16;
          v16 += 2;
          float32x4_t v15 = vmlaq_lane_f32(vmlaq_n_f32(v15, v18[1], v20.f32[0]), v19[1], v20, 1);
          float32x4_t v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, *v18, v20.f32[0]), *v19, v20, 1);
          uint64_t v21 = result + 4;
          result += 2;
        }
        while (v21 <= v7);
      }
      if (v7)
      {
        __int32 v22 = (float32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        float32x4_t v15 = vaddq_f32(vmlaq_n_f32(v15, v22[1], *v16), (float32x4_t)0);
        float32x4_t v14 = vaddq_f32(vmlaq_n_f32(v14, *v22, *v16), (float32x4_t)0);
      }
      v10 += 4;
      int32x4_t v23 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v15), (float32x4_t)vuzp2q_s32((int32x4_t)v14, (int32x4_t)v15)), (float32x4_t)0);
      float32x4_t v24 = (float32x4_t)vzip2q_s32(v13, v23);
      float32x4_t v25 = (float32x4_t)vzip1q_s32(v12, v23);
      v25.i32[2] = -8388609;
      *uint64_t v6 = vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850CD6D0);
      v6[1] = vminnmq_f32(vmaxnmq_f32(v15, v24), (float32x4_t)xmmword_1850CD6D0);
      v6 += 2;
      v11 += 4;
    }
    while (v11 <= a4);
    int v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    float32x2_t v26 = 0;
    __int32 v27 = v8;
    if ((int)v7 >= 2)
    {
      uint64_t v28 = 0;
      float32x2_t v26 = 0;
      __int32 v27 = v8;
      do
      {
        __int32 v29 = (uint64_t *)(a6 + 8 * v28);
        uint64_t result = *v29;
        float32x2_t v30 = *(float32x2_t *)v27;
        v27 += 2;
        float32x2_t v26 = vmla_lane_f32(vmla_n_f32(v26, *(float32x2_t *)(*v29 + 4 * (2 * v9)), v30.f32[0]), *(float32x2_t *)(v29[1] + 4 * (2 * v9)), v30, 1);
        uint64_t v31 = v28 + 4;
        v28 += 2;
      }
      while (v31 <= v7);
    }
    if (v7) {
      float32x2_t v26 = vadd_f32(vmla_n_f32(v26, *(float32x2_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), *v27), 0);
    }
    float v32 = vpmax_f32(v26);
    float v33 = fmaxf(v32, 0.0);
    if (v32 <= 1.0) {
      float v34 = v33;
    }
    else {
      float v34 = 1.0;
    }
    v26.f32[1] = v34;
    *(float32x2_t *)v6->f32 = v26;
    uint64_t v6 = (float32x4_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<float,float,5,(AlphaStyle)1>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, float32x4_t **a10, uint64_t a11)
{
  float32x4_t v15 = *a10;
  uint64_t v16 = *(int *)(result + 4);
  uint64_t v17 = (float *)(result + 8);
  if (a9 >= 4)
  {
    int v19 = 0;
    for (unint64_t i = 4; i <= a9; i += 4)
    {
      if ((int)v16 >= 2)
      {
        uint64_t result = 0;
        v21.i32[0] = 0;
        __int32 v22 = 0;
        v14.i64[0] = 0;
        uint64_t v39 = (5 * v19) & 0xFFFFFFFC;
        __int32 v23 = 0;
        __int32 v37 = v17;
        v24.i32[0] = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        v28.i32[0] = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        v11.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        v12.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v38 = 0;
        do
        {
          uint64_t v40 = (void *)(a11 + 8 * result);
          int v41 = (float32x4_t *)(*v40 + 4 * v39);
          unsigned int v42 = (float32x4_t *)(v40[1] + 4 * v39);
          float32x2_t v43 = *(float32x2_t *)v37;
          v37 += 2;
          v12.i32[1] = v35;
          v12.i64[1] = __PAIR64__(v38, v36);
          v11.i32[1] = v32;
          v11.i64[1] = __PAIR64__(v34, v33);
          v28.i32[1] = v29;
          v28.i64[1] = __PAIR64__(v31, v30);
          v24.i32[1] = v25;
          v24.i64[1] = __PAIR64__(v27, v26);
          v21.i32[1] = v22;
          v21.i64[1] = __PAIR64__(v23, v14.u32[0]);
          float32x4_t v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, *v41, v43.f32[0]), *v42, v43, 1);
          __int32 v23 = v21.i32[3];
          v14.i32[0] = v21.i32[2];
          __int32 v22 = v21.i32[1];
          float32x4_t v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, v41[1], v43.f32[0]), v42[1], v43, 1);
          __int32 v27 = v24.i32[3];
          __int32 v26 = v24.i32[2];
          __int32 v25 = v24.i32[1];
          float32x4_t v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v41[2], v43.f32[0]), v42[2], v43, 1);
          __int32 v31 = v28.i32[3];
          __int32 v30 = v28.i32[2];
          __int32 v29 = v28.i32[1];
          float32x4_t v11 = vmlaq_lane_f32(vmlaq_n_f32(v11, v41[3], v43.f32[0]), v42[3], v43, 1);
          __int32 v34 = v11.i32[3];
          __int32 v33 = v11.i32[2];
          __int32 v32 = v11.i32[1];
          float32x4_t v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, v41[4], v43.f32[0]), v42[4], v43, 1);
          __int32 v38 = v12.i32[3];
          __int32 v36 = v12.i32[2];
          __int32 v35 = v12.i32[1];
          uint64_t v44 = result + 4;
          result += 2;
        }
        while (v44 <= v16);
      }
      else
      {
        v21.i32[0] = 0;
        __int32 v22 = 0;
        v14.i64[0] = 0;
        __int32 v23 = 0;
        v24.i32[0] = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        v28.i32[0] = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        v11.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        v12.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = v17;
        __int32 v38 = 0;
      }
      if (v16)
      {
        uint64_t result = (5 * v19) & 0xFFFFFFFC;
        uint64_t v45 = (float32x4_t *)(*(void *)(a11 + 8 * ((int)v16 - 1)) + 4 * result);
        v12.i32[1] = v35;
        v12.i64[1] = __PAIR64__(v38, v36);
        v11.i32[1] = v32;
        v11.i64[1] = __PAIR64__(v34, v33);
        v28.i32[1] = v29;
        v28.i64[1] = __PAIR64__(v31, v30);
        v24.i32[1] = v25;
        v24.i64[1] = __PAIR64__(v27, v26);
        v21.i32[1] = v22;
        v21.i64[1] = __PAIR64__(v23, v14.u32[0]);
        float32x4_t v21 = vaddq_f32(vmlaq_n_f32(v21, *v45, *v37), (float32x4_t)0);
        __int32 v23 = v21.i32[3];
        v14.i32[0] = v21.i32[2];
        __int32 v22 = v21.i32[1];
        float32x4_t v24 = vaddq_f32(vmlaq_n_f32(v24, v45[1], *v37), (float32x4_t)0);
        __int32 v27 = v24.i32[3];
        __int32 v26 = v24.i32[2];
        __int32 v25 = v24.i32[1];
        float32x4_t v28 = vaddq_f32(vmlaq_n_f32(v28, v45[2], *v37), (float32x4_t)0);
        __int32 v31 = v28.i32[3];
        __int32 v30 = v28.i32[2];
        __int32 v29 = v28.i32[1];
        float32x4_t v11 = vaddq_f32(vmlaq_n_f32(v11, v45[3], *v37), (float32x4_t)0);
        __int32 v34 = v11.i32[3];
        __int32 v33 = v11.i32[2];
        __int32 v32 = v11.i32[1];
        float32x4_t v12 = vaddq_f32(vmlaq_n_f32(v12, v45[4], *v37), (float32x4_t)0);
        __int32 v38 = v12.i32[3];
        __int32 v36 = v12.i32[2];
        __int32 v35 = v12.i32[1];
      }
      v46.i64[0] = __PAIR64__(v29, v24.u32[0]);
      v46.i64[1] = __PAIR64__(v38, v33);
      v47.i64[0] = __PAIR64__(v28.u32[0], v23);
      v47.i64[1] = __PAIR64__(v36, v32);
      v19 += 4;
      v48.i64[0] = __PAIR64__(v27, v14.u32[0]);
      v48.i64[1] = __PAIR64__(v35, v11.u32[0]);
      float32x4_t v49 = vmaxnmq_f32(v46, v47);
      v47.i64[0] = __PAIR64__(v26, v22);
      float32x4_t v50 = vmaxnmq_f32(v49, v48);
      v47.i64[1] = __PAIR64__(v12.u32[0], v31);
      v48.i64[0] = __PAIR64__(v25, v21.u32[0]);
      v48.i64[1] = __PAIR64__(v34, v30);
      float32x4_t v51 = vmaxnmq_f32(vmaxnmq_f32(vmaxnmq_f32(v50, v47), v48), (float32x4_t)0);
      v52.i64[0] = 0x80000000800000;
      v52.i64[1] = 0x80000000800000;
      float32x4_t v53 = (float32x4_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
      float32x4_t v54 = v53;
      v54.i32[3] = v51.i32[3];
      float32x4_t v55 = v53;
      v55.i32[2] = v51.i32[2];
      float32x4_t v56 = v53;
      v56.i32[1] = v51.i32[1];
      v53.i32[0] = v51.i32[0];
      v21.i32[1] = v22;
      v21.i64[1] = __PAIR64__(v23, v14.u32[0]);
      v24.i32[1] = v25;
      v24.i64[1] = __PAIR64__(v27, v26);
      v28.i32[1] = v29;
      v28.i64[1] = __PAIR64__(v31, v30);
      v11.i32[1] = v32;
      v11.i64[1] = __PAIR64__(v34, v33);
      v12.i32[1] = v35;
      v12.i64[1] = __PAIR64__(v38, v36);
      a6 = vminnmq_f32(vmaxnmq_f32(v28, v55), (float32x4_t)xmmword_1850CD6B0);
      v15[2] = a6;
      v15[3] = vminnmq_f32(vmaxnmq_f32(v11, v54), (float32x4_t)xmmword_1850CD6C0);
      *float32x4_t v15 = vminnmq_f32(vmaxnmq_f32(v21, v53), (float32x4_t)xmmword_1850CD690);
      v15[1] = vminnmq_f32(vmaxnmq_f32(v24, v56), (float32x4_t)xmmword_1850CD6A0);
      v15[4] = vminnmq_f32(vmaxnmq_f32(v12, v52), (float32x4_t)vdupq_n_s32(0x7F7FFFFFu));
      v15 += 5;
    }
    int v18 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v18 = 0;
  }
  for (; v18 < a9; ++v18)
  {
    if ((int)v16 >= 2)
    {
      uint64_t v62 = 0;
      uint64_t v63 = (5 * v18);
      v57.i32[0] = 0;
      float32x2_t v61 = v17;
      __int32 v58 = 0;
      __int32 v59 = 0;
      __int32 v60 = 0;
      a6.i64[0] = 0;
      do
      {
        float32x4_t v64 = (void *)(a11 + 8 * v62);
        double v65 = (float32x4_t *)(*v64 + 4 * v63);
        v11.i32[0] = v65[1].i32[0];
        uint64_t v66 = (float32x4_t *)(v64[1] + 4 * v63);
        float32x4_t v12 = *v66;
        float32x2_t v67 = *(float32x2_t *)v61;
        v61 += 2;
        *(float32x2_t *)v13.f32 = v67;
        v14.i32[0] = v66[1].i32[0];
        v57.i32[1] = v58;
        v57.i64[1] = __PAIR64__(v60, v59);
        a6 = vmlaq_lane_f32(vmlaq_f32(a6, v13, v11), v14, v67, 1);
        float32x4_t v57 = vmlaq_lane_f32(vmlaq_n_f32(v57, *v65, v67.f32[0]), *v66, v67, 1);
        __int32 v60 = v57.i32[3];
        __int32 v59 = v57.i32[2];
        __int32 v58 = v57.i32[1];
        uint64_t v68 = v62 + 4;
        v62 += 2;
      }
      while (v68 <= v16);
    }
    else
    {
      v57.i32[0] = 0;
      __int32 v58 = 0;
      __int32 v59 = 0;
      __int32 v60 = 0;
      float32x2_t v61 = v17;
      a6.i64[0] = 0;
    }
    if (v16)
    {
      uint64_t v69 = (float32x4_t *)(*(void *)(a11 + 8 * ((int)v16 - 1)) + 4 * (5 * v18));
      v11.i32[0] = v69[1].i32[0];
      v12.f32[0] = *v61;
      v57.i32[1] = v58;
      v57.i64[1] = __PAIR64__(v60, v59);
      a6 = vaddq_f32(vmlaq_f32(a6, v12, v11), (float32x4_t)0);
      float32x4_t v57 = vaddq_f32(vmlaq_n_f32(v57, *v69, *v61), (float32x4_t)0);
      __int32 v60 = v57.i32[3];
      __int32 v59 = v57.i32[2];
      __int32 v58 = v57.i32[1];
    }
    v57.i32[1] = v58;
    v57.i64[1] = __PAIR64__(v60, v59);
    float v70 = vmaxvq_f32(vmaxnmq_f32(v57, a6));
    float v71 = fmaxf(v70, 0.0);
    if (v70 <= 1.0) {
      float v72 = v71;
    }
    else {
      float v72 = 1.0;
    }
    v57.f32[0] = v72;
    *float32x4_t v15 = v57;
    v15[1].i32[0] = a6.i32[0];
    float32x4_t v15 = (float32x4_t *)((char *)v15 + 20);
  }
  return result;
}

uint64_t resample_vertical<float,float,4,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    unint64_t v11 = 2;
    int32x4_t v12 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = 0uLL;
      float32x4_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = (4 * v10) & 0xFFFFFFF8;
        float32x4_t v15 = v8;
        do
        {
          int v18 = (void *)(a6 + 8 * v16);
          int v19 = (float32x4_t *)(*v18 + 4 * v17);
          float32x2_t v20 = (float32x4_t *)(v18[1] + 4 * v17);
          float32x2_t v21 = *(float32x2_t *)v15;
          v15 += 2;
          float32x4_t v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, v19[1], v21.f32[0]), v20[1], v21, 1);
          float32x4_t v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, *v19, v21.f32[0]), *v20, v21, 1);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        __int32 v22 = (float32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        float32x4_t v14 = vaddq_f32(vmlaq_n_f32(v14, v22[1], *v15), (float32x4_t)0);
        float32x4_t v13 = vaddq_f32(vmlaq_n_f32(v13, *v22, *v15), (float32x4_t)0);
      }
      v10 += 2;
      int8x16_t v23 = (int8x16_t)vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14));
      int32x2_t v24 = (int32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
      *(float32x2_t *)v23.i8 = vmaxnm_f32(vmaxnm_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, v24), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, v24)), 0);
      float32x4_t v25 = (float32x4_t)v12;
      v25.i32[0] = v23.i32[1];
      float32x4_t v26 = (float32x4_t)v12;
      v26.i32[0] = v23.i32[0];
      *uint64_t v6 = vminnmq_f32(vmaxnmq_f32(v13, v26), (float32x4_t)xmmword_1850CD690);
      v6[1] = vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850CD690);
      v6 += 2;
      v11 += 2;
    }
    while (v11 <= a4);
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    float32x4_t v27 = 0uLL;
    float32x4_t v28 = v8;
    if ((int)v7 >= 2)
    {
      uint64_t v29 = 0;
      float32x4_t v28 = v8;
      do
      {
        __int32 v30 = (uint64_t *)(a6 + 8 * v29);
        uint64_t result = *v30;
        float32x2_t v31 = *(float32x2_t *)v28;
        v28 += 2;
        float32x4_t v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, *(float32x4_t *)(*v30 + 4 * (4 * v9)), v31.f32[0]), *(float32x4_t *)(v30[1] + 4 * (4 * v9)), v31, 1);
        uint64_t v32 = v29 + 4;
        v29 += 2;
      }
      while (v32 <= v7);
    }
    if (v7) {
      float32x4_t v27 = vaddq_f32(vmlaq_n_f32(v27, *(float32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9)), *v28), (float32x4_t)0);
    }
    float v33 = vmaxvq_f32(v27);
    float v34 = fmaxf(v33, 0.0);
    if (v33 <= 1.0) {
      float v35 = v34;
    }
    else {
      float v35 = 1.0;
    }
    v27.f32[0] = v35;
    *v6++ = v27;
  }
  return result;
}

uint64_t resample_vertical<float,float,2,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (float *)(result + 8);
  if (a4 >= 4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 4;
    int32x4_t v12 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = 0uLL;
      float32x4_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        float32x4_t v15 = v8;
        do
        {
          uint64_t v17 = (void *)(a6 + 8 * v16);
          int v18 = (float32x4_t *)(*v17 + 8 * v10);
          int v19 = (float32x4_t *)(v17[1] + 8 * v10);
          float32x2_t v20 = *(float32x2_t *)v15;
          v15 += 2;
          float32x4_t v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, v18[1], v20.f32[0]), v19[1], v20, 1);
          float32x4_t v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, *v18, v20.f32[0]), *v19, v20, 1);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        float32x2_t v21 = (float32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        float32x4_t v14 = vaddq_f32(vmlaq_n_f32(v14, v21[1], *v15), (float32x4_t)0);
        float32x4_t v13 = vaddq_f32(vmlaq_n_f32(v13, *v21, *v15), (float32x4_t)0);
      }
      v10 += 4;
      int32x4_t v22 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14)), (float32x4_t)0);
      *uint64_t v6 = vminnmq_f32(vmaxnmq_f32(v13, (float32x4_t)vzip1q_s32(v22, v12)), (float32x4_t)xmmword_1850CD6E0);
      v6[1] = vminnmq_f32(vmaxnmq_f32(v14, (float32x4_t)vzip2q_s32(v22, v12)), (float32x4_t)xmmword_1850CD6E0);
      v6 += 2;
      v11 += 4;
    }
    while (v11 <= a4);
    int v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    float32x2_t v23 = 0;
    int32x2_t v24 = v8;
    if ((int)v7 >= 2)
    {
      uint64_t v25 = 0;
      float32x2_t v23 = 0;
      int32x2_t v24 = v8;
      do
      {
        float32x4_t v26 = (uint64_t *)(a6 + 8 * v25);
        uint64_t result = *v26;
        float32x2_t v27 = *(float32x2_t *)v24;
        v24 += 2;
        float32x2_t v23 = vmla_lane_f32(vmla_n_f32(v23, *(float32x2_t *)(*v26 + 4 * (2 * v9)), v27.f32[0]), *(float32x2_t *)(v26[1] + 4 * (2 * v9)), v27, 1);
        uint64_t v28 = v25 + 4;
        v25 += 2;
      }
      while (v28 <= v7);
    }
    if (v7) {
      float32x2_t v23 = vadd_f32(vmla_n_f32(v23, *(float32x2_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), *v24), 0);
    }
    float v29 = vpmax_f32(v23);
    float v30 = fmaxf(v29, 0.0);
    if (v29 <= 1.0) {
      float v31 = v30;
    }
    else {
      float v31 = 1.0;
    }
    v23.f32[0] = v31;
    *(float32x2_t *)v6->f32 = v23;
    uint64_t v6 = (float32x4_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<float,float,4,(AlphaStyle)0>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    for (unint64_t i = 2; i <= a4; i += 2)
    {
      float32x4_t v12 = 0uLL;
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (4 * v10) & 0xFFFFFFF8;
        float32x4_t v14 = v8;
        do
        {
          uint64_t v17 = (void *)(a6 + 8 * v15);
          int v18 = (float32x4_t *)(*v17 + 4 * v16);
          int v19 = (float32x4_t *)(v17[1] + 4 * v16);
          float32x2_t v20 = *(float32x2_t *)v14;
          v14 += 2;
          float32x4_t v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, v18[1], v20.f32[0]), v19[1], v20, 1);
          float32x4_t v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, *v18, v20.f32[0]), *v19, v20, 1);
          uint64_t result = v15 + 4;
          v15 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        float32x2_t v21 = (float32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        float32x4_t v13 = vaddq_f32(vmlaq_n_f32(v13, v21[1], *v14), (float32x4_t)0);
        float32x4_t v12 = vaddq_f32(vmlaq_n_f32(v12, *v21, *v14), (float32x4_t)0);
      }
      v10 += 2;
      *uint64_t v6 = v12;
      v6[1] = v13;
      v6 += 2;
    }
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    float32x4_t v22 = 0uLL;
    float32x2_t v23 = v8;
    if ((int)v7 >= 2)
    {
      uint64_t v24 = 0;
      float32x2_t v23 = v8;
      do
      {
        uint64_t v25 = (uint64_t *)(a6 + 8 * v24);
        uint64_t result = *v25;
        float32x2_t v26 = *(float32x2_t *)v23;
        v23 += 2;
        float32x4_t v22 = vmlaq_lane_f32(vmlaq_n_f32(v22, *(float32x4_t *)(*v25 + 4 * (4 * v9)), v26.f32[0]), *(float32x4_t *)(v25[1] + 4 * (4 * v9)), v26, 1);
        uint64_t v27 = v24 + 4;
        v24 += 2;
      }
      while (v27 <= v7);
    }
    if (v7) {
      float32x4_t v22 = vaddq_f32(vmlaq_n_f32(v22, *(float32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9)), *v23), (float32x4_t)0);
    }
    *v6++ = v22;
  }
  return result;
}

uint64_t resample_vertical<float,float,3,(AlphaStyle)0>(uint64_t result, double a2, double a3, double a4, float32x4_t a5, double a6, uint64_t a7, uint64_t a8, int a9, float32x4_t **a10, uint64_t a11)
{
  unint64_t v11 = *a10;
  uint64_t v12 = *(int *)(result + 4);
  float32x4_t v13 = (float *)(result + 8);
  if (a9 >= 4)
  {
    int v15 = 0;
    for (unint64_t i = 4; i <= a9; i += 4)
    {
      if ((int)v12 >= 2)
      {
        uint64_t v28 = 0;
        v17.i32[0] = 0;
        __int32 v18 = 0;
        __int32 v19 = 0;
        uint64_t v29 = (3 * v15) & 0xFFFFFFFC;
        a6 = 0.0;
        float32x2_t v26 = v13;
        a5.i32[0] = 0;
        unsigned __int32 v20 = 0;
        unsigned __int32 v21 = 0;
        unsigned __int32 v22 = 0;
        v23.i32[0] = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v27 = 0;
        do
        {
          float v30 = (void *)(a11 + 8 * v28);
          float v31 = (float32x4_t *)(*v30 + 4 * v29);
          uint64_t v32 = (float32x4_t *)(v30[1] + 4 * v29);
          float32x2_t v33 = *(float32x2_t *)v26;
          v26 += 2;
          v23.i32[1] = v24;
          v23.i64[1] = __PAIR64__(v27, v25);
          a5.i32[1] = v20;
          a5.i64[1] = __PAIR64__(v22, v21);
          v17.i32[1] = v18;
          v17.i64[1] = __PAIR64__(LODWORD(a6), v19);
          float32x4_t v17 = vmlaq_lane_f32(vmlaq_n_f32(v17, *v31, v33.f32[0]), *v32, v33, 1);
          LODWORD(a6) = v17.i32[3];
          __int32 v19 = v17.i32[2];
          __int32 v18 = v17.i32[1];
          a5 = vmlaq_lane_f32(vmlaq_n_f32(a5, v31[1], v33.f32[0]), v32[1], v33, 1);
          unsigned __int32 v22 = a5.u32[3];
          unsigned __int32 v21 = a5.u32[2];
          unsigned __int32 v20 = a5.u32[1];
          float32x4_t v23 = vmlaq_lane_f32(vmlaq_n_f32(v23, v31[2], v33.f32[0]), v32[2], v33, 1);
          __int32 v27 = v23.i32[3];
          __int32 v25 = v23.i32[2];
          __int32 v24 = v23.i32[1];
          uint64_t result = v28 + 4;
          v28 += 2;
        }
        while (result <= v12);
      }
      else
      {
        v17.i32[0] = 0;
        __int32 v18 = 0;
        __int32 v19 = 0;
        a6 = 0.0;
        a5.i32[0] = 0;
        unsigned __int32 v20 = 0;
        unsigned __int32 v21 = 0;
        unsigned __int32 v22 = 0;
        v23.i32[0] = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        float32x2_t v26 = v13;
        __int32 v27 = 0;
      }
      if (v12)
      {
        float v34 = (float32x4_t *)(*(void *)(a11 + 8 * ((int)v12 - 1)) + 4 * ((3 * v15) & 0xFFFFFFFC));
        v23.i32[1] = v24;
        v23.i64[1] = __PAIR64__(v27, v25);
        a5.i32[1] = v20;
        a5.i64[1] = __PAIR64__(v22, v21);
        v17.i32[1] = v18;
        v17.i64[1] = __PAIR64__(LODWORD(a6), v19);
        float32x4_t v17 = vaddq_f32(vmlaq_n_f32(v17, *v34, *v26), (float32x4_t)0);
        LODWORD(a6) = v17.i32[3];
        __int32 v19 = v17.i32[2];
        __int32 v18 = v17.i32[1];
        a5 = vaddq_f32(vmlaq_n_f32(a5, v34[1], *v26), (float32x4_t)0);
        unsigned __int32 v22 = a5.u32[3];
        unsigned __int32 v21 = a5.u32[2];
        unsigned __int32 v20 = a5.u32[1];
        float32x4_t v23 = vaddq_f32(vmlaq_n_f32(v23, v34[2], *v26), (float32x4_t)0);
        __int32 v27 = v23.i32[3];
        __int32 v25 = v23.i32[2];
        __int32 v24 = v23.i32[1];
      }
      v15 += 4;
      a5.i32[1] = v20;
      a5.i64[1] = __PAIR64__(v22, v21);
      v17.i32[1] = v18;
      v17.i64[1] = __PAIR64__(LODWORD(a6), v19);
      *unint64_t v11 = v17;
      v11[1] = a5;
      v23.i32[1] = v24;
      v23.i64[1] = __PAIR64__(v27, v25);
      _OWORD v11[2] = v23;
      v11 += 3;
    }
    int v14 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v14 = 0;
  }
  for (; v14 < a9; ++v14)
  {
    float32x4_t v35 = 0uLL;
    __int32 v36 = v13;
    if ((int)v12 >= 2)
    {
      uint64_t v37 = 0;
      uint64_t v38 = (3 * v14);
      __int32 v36 = v13;
      do
      {
        uint64_t v39 = (void *)(a11 + 8 * v37);
        uint64_t v40 = *v39 + 4 * v38;
        v41.i64[0] = *(void *)v40;
        a5.i32[0] = *(_DWORD *)(v40 + 8);
        v41.i64[1] = a5.i64[0];
        uint64_t v42 = v39[1] + 4 * v38;
        a5.i64[0] = *(void *)v42;
        LODWORD(a6) = *(_DWORD *)(v42 + 8);
        *(double *)&a5.i64[1] = a6;
        float32x2_t v43 = *(float32x2_t *)v36;
        v36 += 2;
        HIDWORD(a6) = v43.i32[1];
        float32x4_t v35 = vmlaq_lane_f32(vmlaq_n_f32(v35, v41, v43.f32[0]), a5, v43, 1);
        uint64_t v44 = v37 + 4;
        v37 += 2;
      }
      while (v44 <= v12);
    }
    if (v12)
    {
      uint64_t v45 = *(void *)(a11 + 8 * ((int)v12 - 1)) + 4 * (3 * v14);
      v46.i64[0] = *(void *)v45;
      a5.i32[0] = *(_DWORD *)(v45 + 8);
      v46.i64[1] = a5.i64[0];
      float32x4_t v35 = vaddq_f32(vmlaq_n_f32(v35, v46, *v36), (float32x4_t)0);
    }
    v11->i64[0] = v35.i64[0];
    v11->i32[2] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u32[0];
    unint64_t v11 = (float32x4_t *)((char *)v11 + 12);
  }
  return result;
}

uint64_t resample_vertical<float,float,1,(AlphaStyle)0>(uint64_t result, double a2, double a3, float32x4_t a4, float32x4_t a5, uint64_t a6, uint64_t a7, int a8, float32x4_t **a9, uint64_t a10)
{
  int v10 = *a9;
  uint64_t v11 = *(int *)(result + 4);
  uint64_t v12 = (float *)(result + 8);
  if (a8 >= 8)
  {
    uint64_t v14 = 0;
    for (unint64_t i = 8; i <= a8; i += 8)
    {
      float32x4_t v16 = 0uLL;
      a4 = 0uLL;
      float32x4_t v17 = v12;
      if ((int)v11 >= 2)
      {
        uint64_t v18 = 0;
        float32x4_t v17 = v12;
        do
        {
          __int32 v19 = (void *)(a10 + 8 * v18);
          uint64_t result = *v19 + 4 * v14;
          a5 = *(float32x4_t *)(result + 16);
          unsigned __int32 v20 = (float32x4_t *)(v19[1] + 4 * v14);
          float32x2_t v21 = *(float32x2_t *)v17;
          v17 += 2;
          a4 = vmlaq_lane_f32(vmlaq_n_f32(a4, a5, v21.f32[0]), v20[1], v21, 1);
          float32x4_t v16 = vmlaq_lane_f32(vmlaq_n_f32(v16, *(float32x4_t *)result, v21.f32[0]), *v20, v21, 1);
          uint64_t v22 = v18 + 4;
          v18 += 2;
        }
        while (v22 <= v11);
      }
      if (v11)
      {
        uint64_t v23 = *(void *)(a10 + 8 * ((int)v11 - 1)) + 4 * v14;
        a5 = *(float32x4_t *)(v23 + 16);
        a4 = vaddq_f32(vmlaq_n_f32(a4, a5, *v17), (float32x4_t)0);
        float32x4_t v16 = vaddq_f32(vmlaq_n_f32(v16, *(float32x4_t *)v23, *v17), (float32x4_t)0);
      }
      v14 += 8;
      *int v10 = v16;
      v10[1] = a4;
      v10 += 2;
    }
    uint64_t v13 = a8 & 0xFFFFFFF8;
  }
  else
  {
    uint64_t v13 = 0;
  }
  for (uint64_t j = v13 | 4; (int)j <= a8; j += 4)
  {
    uint64_t v25 = 4 * v13;
    float32x4_t v26 = 0uLL;
    __int32 v27 = v12;
    if ((int)v11 >= 2)
    {
      uint64_t v28 = 0;
      __int32 v27 = v12;
      do
      {
        uint64_t v29 = (uint64_t *)(a10 + 8 * v28);
        uint64_t result = *v29;
        a4 = *(float32x4_t *)(*v29 + v25);
        a5 = *(float32x4_t *)(v29[1] + v25);
        float32x2_t v30 = *(float32x2_t *)v27;
        v27 += 2;
        float32x4_t v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, a4, v30.f32[0]), a5, v30, 1);
        uint64_t v31 = v28 + 4;
        v28 += 2;
      }
      while (v31 <= v11);
    }
    if (v11)
    {
      a4 = *(float32x4_t *)(*(void *)(a10 + 8 * ((int)v11 - 1)) + v25);
      float32x4_t v26 = vaddq_f32(vmlaq_n_f32(v26, a4, *v27), (float32x4_t)0);
    }
    *v10++ = v26;
    uint64_t v13 = j;
  }
  for (; (int)v13 < a8; ++v13)
  {
    float32x2_t v32 = 0;
    float32x2_t v33 = (float32x2_t *)v12;
    if ((int)v11 >= 2)
    {
      uint64_t v34 = 0;
      float32x2_t v32 = 0;
      float32x2_t v33 = (float32x2_t *)v12;
      do
      {
        float32x4_t v35 = (void *)(a10 + 8 * v34);
        a4.i32[0] = *(_DWORD *)(*v35 + 4 * v13);
        a5.i32[0] = *(_DWORD *)(v35[1] + 4 * v13);
        float32x2_t v36 = *v33++;
        float32x2_t v32 = vmla_lane_f32(vmla_f32(v32, v36, *(float32x2_t *)a4.f32), *(float32x2_t *)a5.f32, v36, 1);
        uint64_t v37 = v34 + 4;
        v34 += 2;
      }
      while (v37 <= v11);
    }
    if (v11)
    {
      a4.i32[0] = *(_DWORD *)(*(void *)(a10 + 8 * ((int)v11 - 1)) + 4 * v13);
      a5.i32[0] = v33->i32[0];
      v32.i32[0] = vadd_f32(vmla_f32(v32, *(float32x2_t *)a5.f32, *(float32x2_t *)a4.f32), 0).u32[0];
    }
    v10->i32[0] = v32.i32[0];
    int v10 = (float32x4_t *)((char *)v10 + 4);
  }
  return result;
}

uint64_t resample_vertical<half,half,4,(AlphaStyle)3>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t _Q4, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  int v15 = *(float16x8_t **)a10;
  float32x4_t v16 = *(float16x4_t **)(a10 + 8);
  uint64_t v17 = *(int *)(result + 4);
  uint64_t v18 = (float *)(result + 8);
  if (a9 >= 4)
  {
    int v20 = 0;
    for (unint64_t i = 4; i <= a9; i += 4)
    {
      if ((int)v17 >= 2)
      {
        uint64_t result = 0;
        v22.i32[0] = 0;
        v11.i64[0] = 0;
        __int32 v23 = 0;
        uint64_t v39 = (5 * v20) & 0xFFFFFFFC;
        __int32 v24 = 0;
        uint64_t v37 = v18;
        v25.i32[0] = 0;
        v26.i32[0] = 0;
        v13.i64[0] = 0;
        v12.i64[0] = 0;
        v27.i32[0] = 0;
        __int32 v28 = 0;
        v14.i32[0] = 0;
        __int32 v29 = 0;
        v30.i32[0] = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        v33.i32[0] = 0;
        v34.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v38 = 0;
        do
        {
          uint64_t v40 = (void *)(a11 + 8 * result);
          uint64_t v41 = *v40 + 2 * v39;
          float16x8_t v42 = *(float16x8_t *)(v41 + 16);
          uint64_t v43 = v40[1] + 2 * v39;
          float16x8_t v44 = *(float16x8_t *)(v43 + 16);
          float32x2_t v45 = *(float32x2_t *)v37;
          v37 += 2;
          v34.i32[1] = v35;
          v34.i64[1] = __PAIR64__(v38, v36);
          v30.i32[1] = v31;
          v30.i64[1] = __PAIR64__(v33.u32[0], v32);
          v27.i32[1] = v28;
          v27.i64[1] = __PAIR64__(v29, v14.u32[0]);
          v25.i32[1] = v26.i32[0];
          v25.i64[1] = __PAIR64__(v12.u32[0], v13.u32[0]);
          v22.i32[1] = v11.i32[0];
          v22.i64[1] = __PAIR64__(v24, v23);
          float32x4_t v22 = vmlaq_lane_f32(vmlaq_n_f32(v22, vcvtq_f32_f16(*(float16x4_t *)v41), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v43), v45, 1);
          __int32 v24 = v22.i32[3];
          __int32 v23 = v22.i32[2];
          v11.i32[0] = v22.i32[1];
          float32x4_t v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, vcvt_hight_f32_f16(*(float16x8_t *)v41), v45.f32[0]), vcvt_hight_f32_f16(*(float16x8_t *)v43), v45, 1);
          v12.i32[0] = v25.i32[3];
          v13.i32[0] = v25.i32[2];
          v26.i32[0] = v25.i32[1];
          float32x4_t v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, vcvtq_f32_f16(*(float16x4_t *)v42.i8), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v44.i8), v45, 1);
          __int32 v29 = v27.i32[3];
          v14.i32[0] = v27.i32[2];
          __int32 v28 = v27.i32[1];
          float32x4_t v30 = vmlaq_lane_f32(vmlaq_n_f32(v30, vcvt_hight_f32_f16(v42), v45.f32[0]), vcvt_hight_f32_f16(v44), v45, 1);
          v33.i32[0] = v30.i32[3];
          __int32 v32 = v30.i32[2];
          __int32 v31 = v30.i32[1];
          float32x4_t v34 = vmlaq_lane_f32(vmlaq_n_f32(v34, vcvtq_f32_f16(*(float16x4_t *)(v41 + 32)), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v43 + 32)), v45, 1);
          __int32 v38 = v34.i32[3];
          __int32 v36 = v34.i32[2];
          __int32 v35 = v34.i32[1];
          float32x4_t v46 = (char *)(result + 4);
          result += 2;
        }
        while ((uint64_t)v46 <= v17);
      }
      else
      {
        v22.i32[0] = 0;
        v11.i64[0] = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        v25.i32[0] = 0;
        v26.i32[0] = 0;
        v13.i64[0] = 0;
        v12.i64[0] = 0;
        v27.i32[0] = 0;
        __int32 v28 = 0;
        v14.i32[0] = 0;
        __int32 v29 = 0;
        v30.i32[0] = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        v33.i32[0] = 0;
        v34.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        uint64_t v37 = v18;
        __int32 v38 = 0;
      }
      if (v17)
      {
        uint64_t result = (5 * v20) & 0xFFFFFFFC;
        uint64_t v47 = *(void *)(a11 + 8 * ((int)v17 - 1)) + 2 * result;
        float16x8_t v48 = *(float16x8_t *)(v47 + 16);
        v34.i32[1] = v35;
        v34.i64[1] = __PAIR64__(v38, v36);
        v30.i32[1] = v31;
        v30.i64[1] = __PAIR64__(v33.u32[0], v32);
        v27.i32[1] = v28;
        v27.i64[1] = __PAIR64__(v29, v14.u32[0]);
        v25.i32[1] = v26.i32[0];
        v25.i64[1] = __PAIR64__(v12.u32[0], v13.u32[0]);
        v22.i32[1] = v11.i32[0];
        v22.i64[1] = __PAIR64__(v24, v23);
        float32x4_t v22 = vaddq_f32(vmlaq_n_f32(v22, vcvtq_f32_f16(*(float16x4_t *)v47), *v37), (float32x4_t)0);
        __int32 v24 = v22.i32[3];
        __int32 v23 = v22.i32[2];
        v11.i32[0] = v22.i32[1];
        float32x4_t v25 = vaddq_f32(vmlaq_n_f32(v25, vcvt_hight_f32_f16(*(float16x8_t *)v47), *v37), (float32x4_t)0);
        v12.i32[0] = v25.i32[3];
        v13.i32[0] = v25.i32[2];
        v26.i32[0] = v25.i32[1];
        float32x4_t v27 = vaddq_f32(vmlaq_n_f32(v27, vcvtq_f32_f16(*(float16x4_t *)v48.i8), *v37), (float32x4_t)0);
        __int32 v29 = v27.i32[3];
        v14.i32[0] = v27.i32[2];
        __int32 v28 = v27.i32[1];
        float32x4_t v30 = vaddq_f32(vmlaq_n_f32(v30, vcvt_hight_f32_f16(v48), *v37), (float32x4_t)0);
        v33.i32[0] = v30.i32[3];
        __int32 v32 = v30.i32[2];
        __int32 v31 = v30.i32[1];
        float32x4_t v34 = vaddq_f32(vmlaq_n_f32(v34, vcvtq_f32_f16(*(float16x4_t *)(v47 + 32)), *v37), (float32x4_t)0);
        __int32 v38 = v34.i32[3];
        __int32 v36 = v34.i32[2];
        __int32 v35 = v34.i32[1];
      }
      v25.i32[1] = v28;
      v25.i64[1] = __PAIR64__(v38, v32);
      v22.i32[1] = v11.i32[0];
      v22.i64[1] = __PAIR64__(v24, v23);
      v26.i32[1] = v13.i32[0];
      v20 += 4;
      v26.i64[1] = __PAIR64__(v27.u32[0], v12.u32[0]);
      v14.i32[1] = v29;
      v14.i64[1] = __PAIR64__(v31, v30.u32[0]);
      v33.i32[1] = v34.i32[0];
      v33.i64[1] = __PAIR64__(v36, v35);
      __asm { FMOV            V4.4S, #1.0 }
      *int v15 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v22), v26);
      v15[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v14), v33);
      v15 += 2;
      *v16++ = vcvt_f16_f32(vmaxnmq_f32(vminnmq_f32(vmaxnmq_f32(v25, (float32x4_t)0), _Q4), vpmaxq_f32(vpmaxq_f32(v22, v26), vpmaxq_f32(v14, v33))));
    }
    int v19 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v19 = 0;
  }
  if (v19 < a9)
  {
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      if ((int)v17 >= 2)
      {
        uint64_t v59 = 0;
        uint64_t v60 = (5 * v19);
        v54.i32[0] = 0;
        __int32 v58 = v18;
        __int32 v55 = 0;
        v56.i32[0] = 0;
        __int32 v57 = 0;
        _Q4.i64[0] = 0;
        do
        {
          float32x2_t v61 = (void *)(a11 + 8 * v59);
          uint64_t result = *v61 + 2 * v60;
          v11.i16[0] = *(_WORD *)(result + 8);
          uint64_t v62 = (float16x4_t *)(v61[1] + 2 * v60);
          v13.i16[0] = v62[1].i16[0];
          float32x4_t v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
          float32x4_t v12 = vcvtq_f32_f16(*v62);
          float32x2_t v63 = *(float32x2_t *)v58;
          v58 += 2;
          *(float32x2_t *)v14.f32 = v63;
          float32x4_t v13 = vcvtq_f32_f16(*(float16x4_t *)v13.f32);
          v54.i32[1] = v55;
          v54.i64[1] = __PAIR64__(v57, v56.u32[0]);
          _Q4 = vmlaq_lane_f32(vmlaq_f32(_Q4, v11, v14), v13, v63, 1);
          float32x4_t v54 = vmlaq_lane_f32(vmlaq_n_f32(v54, vcvtq_f32_f16(*(float16x4_t *)result), v63.f32[0]), v12, v63, 1);
          __int32 v57 = v54.i32[3];
          v56.i32[0] = v54.i32[2];
          __int32 v55 = v54.i32[1];
          uint64_t v64 = v59 + 4;
          v59 += 2;
        }
        while (v64 <= v17);
      }
      else
      {
        v54.i32[0] = 0;
        __int32 v55 = 0;
        v56.i32[0] = 0;
        __int32 v57 = 0;
        __int32 v58 = v18;
        _Q4.i64[0] = 0;
      }
      if (v17)
      {
        double v65 = (float16x4_t *)(*(void *)(a11 + 8 * ((int)v17 - 1)) + 2 * (5 * v19));
        v11.i16[0] = v65[1].i16[0];
        float32x4_t v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
        v12.f32[0] = *v58;
        v54.i32[1] = v55;
        v54.i64[1] = __PAIR64__(v57, v56.u32[0]);
        _Q4 = vaddq_f32(vmlaq_f32(_Q4, v11, v12), (float32x4_t)0);
        float32x4_t v54 = vaddq_f32(vmlaq_n_f32(v54, vcvtq_f32_f16(*v65), *v58), (float32x4_t)0);
        __int32 v57 = v54.i32[3];
        v56.i32[0] = v54.i32[2];
        __int32 v55 = v54.i32[1];
      }
      v66.i64[0] = __PAIR64__(v55, v54.u32[0]);
      v66.i64[1] = __PAIR64__(v57, v56.u32[0]);
      v54.i32[1] = v55;
      v56.i32[1] = v57;
      _S3 = vmaxnm_f32(vminnm_f32(vmaxnm_f32(*(float32x2_t *)_Q4.f32, 0), _D1), vpmax_f32(vpmax_f32(*(float32x2_t *)v54.f32, v56), 0)).u32[0];
      *(float16x4_t *)v15->i8 = vcvt_f16_f32(v66);
      int v15 = (float16x8_t *)((char *)v15 + 8);
      __asm { FCVT            H3, S3 }
      v16->i16[0] = _S3;
      float32x4_t v16 = (float16x4_t *)((char *)v16 + 2);
      ++v19;
    }
    while (v19 < a9);
  }
  return result;
}

uint64_t resample_vertical<half,half,3,(AlphaStyle)3>(uint64_t result, int8x16_t _Q0, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(float16x4_t **)a6;
  uint64_t v8 = *(_DWORD **)(a6 + 8);
  uint64_t v9 = *(int *)(result + 4);
  int v10 = (float *)(result + 8);
  __asm { FMOV            V0.2S, #1.0 }
  if (a5 >= 2)
  {
    int v16 = 0;
    for (unint64_t i = 2; i <= a5; i += 2)
    {
      float32x4_t v18 = 0uLL;
      float32x4_t v19 = 0uLL;
      int v20 = v10;
      if ((int)v9 >= 2)
      {
        uint64_t result = 0;
        uint64_t v21 = (4 * v16) & 0xFFFFFFF8;
        int v20 = v10;
        do
        {
          float32x4_t v22 = (void *)(a7 + 8 * result);
          float16x8_t v23 = *(float16x8_t *)(*v22 + 2 * v21);
          float16x8_t v24 = *(float16x8_t *)(v22[1] + 2 * v21);
          float32x2_t v25 = *(float32x2_t *)v20;
          v20 += 2;
          float32x4_t v19 = vmlaq_lane_f32(vmlaq_n_f32(v19, vcvt_hight_f32_f16(v23), v25.f32[0]), vcvt_hight_f32_f16(v24), v25, 1);
          float32x4_t v18 = vmlaq_lane_f32(vmlaq_n_f32(v18, vcvtq_f32_f16(*(float16x4_t *)v23.i8), v25.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v24.i8), v25, 1);
          uint64_t v26 = result + 4;
          result += 2;
        }
        while (v26 <= v9);
      }
      if (v9)
      {
        uint64_t result = 2 * ((4 * v16) & 0xFFFFFFF8);
        float16x8_t v27 = *(float16x8_t *)(*(void *)(a7 + 8 * ((int)v9 - 1)) + result);
        float32x4_t v19 = vaddq_f32(vmlaq_n_f32(v19, vcvt_hight_f32_f16(v27), *v20), (float32x4_t)0);
        float32x4_t v18 = vaddq_f32(vmlaq_n_f32(v18, vcvtq_f32_f16(*(float16x4_t *)v27.i8), *v20), (float32x4_t)0);
      }
      v16 += 2;
      float32x4_t v28 = v18;
      v28.i32[3] = v19.i32[0];
      float32x4_t v29 = (float32x4_t)vextq_s8((int8x16_t)v19, _Q0, 4uLL);
      float32x2_t v30 = (float32x2_t)vuzp2q_s32(vuzp2q_s32((int32x4_t)v18, (int32x4_t)v19), (int32x4_t)v18).u64[0];
      float32x4_t v31 = vpmaxq_f32(v18, v19);
      float32x2_t v32 = vminnm_f32(vmaxnm_f32(v30, 0), *(float32x2_t *)_Q0.i8);
      *(float32x2_t *)v31.f32 = vmaxnm_f32(v32, vpmax_f32(*(float32x2_t *)v31.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL)));
      *uint64_t v7 = vcvt_f16_f32(v28);
      v7[1].i32[0] = vcvt_hight_f16_f32(*(int16x4_t *)&v32, v29).i32[2];
      uint64_t v7 = (float16x4_t *)((char *)v7 + 12);
      *v8++ = vcvt_f16_f32(v31).u32[0];
    }
    signed int v15 = a5 & 0xFFFFFFFE;
  }
  else
  {
    signed int v15 = 0;
  }
  for (; v15 < a5; ++v15)
  {
    float32x4_t v33 = 0uLL;
    float32x4_t v34 = v10;
    if ((int)v9 >= 2)
    {
      uint64_t v35 = 0;
      uint64_t v36 = (4 * v15);
      float32x4_t v34 = v10;
      do
      {
        uint64_t result = 2 * v36;
        float32x2_t v37 = *(float32x2_t *)v34;
        v34 += 2;
        float32x4_t v33 = vmlaq_lane_f32(vmlaq_n_f32(v33, vcvtq_f32_f16(*(float16x4_t *)(*(void *)(a7 + 8 * v35) + 2 * v36)), v37.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(*(void *)(a7 + 8 * v35 + 8) + 2 * v36)), v37, 1);
        uint64_t v38 = v35 + 4;
        v35 += 2;
      }
      while (v38 <= v9);
    }
    if (v9) {
      float32x4_t v33 = vaddq_f32(vmlaq_n_f32(v33, vcvtq_f32_f16(*(float16x4_t *)(*(void *)(a7 + 8 * ((int)v9 - 1)) + 2 * (4 * v15))), *v34), (float32x4_t)0);
    }
    _S4 = vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v33, 3), 0), *(float32x2_t *)_Q0.i8), vpmax_f32(vpmax_f32(*(float32x2_t *)v33.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL)), *(float32x2_t *)_Q0.i8)).u32[0];
    int16x4_t v40 = (int16x4_t)vcvt_f16_f32(v33);
    __asm { FCVT            H4, S4 }
    v7->i32[0] = v40.i32[0];
    v7->i16[2] = vdup_lane_s16(v40, 2).u16[0];
    uint64_t v7 = (float16x4_t *)((char *)v7 + 6);
    *(_WORD *)uint64_t v8 = _S4;
    uint64_t v8 = (_DWORD *)((char *)v8 + 2);
  }
  return result;
}

uint64_t resample_vertical<half,half,1,(AlphaStyle)3>(uint64_t result, double a2, double a3, double a4, float16x4_t _D3, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  float32x4_t v11 = *(double **)a10;
  float32x4_t v12 = *(float16x4_t **)(a10 + 8);
  uint64_t v13 = *(int *)(result + 4);
  float32x4_t v14 = (float *)(result + 8);
  if (a9 >= 4)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 4;
    __asm { FMOV            V1.4S, #1.0 }
    do
    {
      float32x4_t v23 = 0uLL;
      float32x4_t v24 = 0uLL;
      float32x2_t v25 = v14;
      if ((int)v13 >= 2)
      {
        uint64_t result = 0;
        float32x2_t v25 = v14;
        do
        {
          uint64_t v26 = (void *)(a11 + 8 * result);
          float16x8_t v27 = *(float16x8_t *)(*v26 + 4 * v16);
          float16x8_t v28 = *(float16x8_t *)(v26[1] + 4 * v16);
          float32x2_t v29 = *(float32x2_t *)v25;
          v25 += 2;
          float32x4_t v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(v27), v29.f32[0]), vcvt_hight_f32_f16(v28), v29, 1);
          float32x4_t v23 = vmlaq_lane_f32(vmlaq_n_f32(v23, vcvtq_f32_f16(*(float16x4_t *)v27.i8), v29.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v28.i8), v29, 1);
          uint64_t v30 = result + 4;
          result += 2;
        }
        while (v30 <= v13);
      }
      if (v13)
      {
        uint64_t result = 4 * v16;
        float16x8_t v31 = *(float16x8_t *)(*(void *)(a11 + 8 * ((int)v13 - 1)) + 4 * v16);
        float32x4_t v24 = vaddq_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(v31), *v25), (float32x4_t)0);
        float32x4_t v23 = vaddq_f32(vmlaq_n_f32(v23, vcvtq_f32_f16(*(float16x4_t *)v31.i8), *v25), (float32x4_t)0);
      }
      v16 += 4;
      a6 = (float32x4_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v24);
      float32x4_t v32 = vmaxnmq_f32(vminnmq_f32(vmaxnmq_f32((float32x4_t)vuzp2q_s32((int32x4_t)v23, (int32x4_t)v24), (float32x4_t)0), _Q1), a6);
      _D3 = vcvt_f16_f32(a6);
      *v11++ = *(double *)&_D3;
      *v12++ = vcvt_f16_f32(v32);
      v17 += 4;
    }
    while (v17 <= a9);
    int v15 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v15 = 0;
  }
  if (v15 < a9)
  {
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      _D2 = 0;
      uint64_t v35 = v14;
      if ((int)v13 >= 2)
      {
        uint64_t v36 = 0;
        uint64_t v37 = (2 * v15);
        _D2 = 0;
        uint64_t v35 = v14;
        do
        {
          uint64_t v38 = (void *)(a11 + 8 * v36);
          uint64_t result = 2 * v37;
          _D3.i32[0] = *(_DWORD *)(*v38 + 2 * v37);
          a6.i32[0] = *(_DWORD *)(v38[1] + 2 * v37);
          _D3 = (float16x4_t)vcvtq_f32_f16(_D3).u64[0];
          a6.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a6.f32).u64[0];
          float32x2_t v39 = *(float32x2_t *)v35;
          v35 += 2;
          _D2 = vmla_lane_f32(vmla_n_f32(_D2, (float32x2_t)_D3, v39.f32[0]), *(float32x2_t *)a6.f32, v39, 1);
          uint64_t v40 = v36 + 4;
          v36 += 2;
        }
        while (v40 <= v13);
      }
      if (v13)
      {
        _D3.i32[0] = *(_DWORD *)(*(void *)(a11 + 8 * ((int)v13 - 1)) + 2 * (2 * v15));
        _D2 = vadd_f32(vmla_n_f32(_D2, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D3), *v35), 0);
      }
      _D3 = (float16x4_t)vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)vdup_lane_s32((int32x2_t)_D2, 1), 0), _D1), _D2);
      __asm { FCVT            H2, S2 }
      *(_WORD *)float32x4_t v11 = _H2;
      float32x4_t v11 = (double *)((char *)v11 + 2);
      __asm { FCVT            H2, S3 }
      v12->i16[0] = _H2;
      float32x4_t v12 = (float16x4_t *)((char *)v12 + 2);
      ++v15;
    }
    while (v15 < a9);
  }
  return result;
}

uint64_t resample_vertical<half,half,5,(AlphaStyle)2>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t *a10, uint64_t a11)
{
  uint64_t v15 = *a10;
  uint64_t v16 = *(int *)(result + 4);
  unint64_t v17 = (float *)(result + 8);
  if (a9 >= 4)
  {
    int v19 = 0;
    for (unint64_t i = 4; i <= a9; i += 4)
    {
      if ((int)v16 >= 2)
      {
        uint64_t result = 0;
        v21.i32[0] = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        uint64_t v39 = (5 * v19) & 0xFFFFFFFC;
        v13.i64[0] = 0;
        uint64_t v37 = v17;
        v24.i32[0] = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        v11.i32[0] = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        v31.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        v12.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v38 = 0;
        do
        {
          uint64_t v40 = (void *)(a11 + 8 * result);
          uint64_t v41 = *v40 + 2 * v39;
          float16x8_t v42 = *(float16x8_t *)(v41 + 16);
          uint64_t v43 = v40[1] + 2 * v39;
          float16x8_t v44 = *(float16x8_t *)(v43 + 16);
          float32x2_t v45 = *(float32x2_t *)v37;
          v37 += 2;
          v12.i32[1] = v35;
          v12.i64[1] = __PAIR64__(v38, v36);
          v31.i32[1] = v32;
          v31.i64[1] = __PAIR64__(v34, v33);
          v11.i32[1] = v28;
          v11.i64[1] = __PAIR64__(v30, v29);
          v24.i32[1] = v25;
          v24.i64[1] = __PAIR64__(v27, v26);
          v21.i32[1] = v22;
          v21.i64[1] = __PAIR64__(v13.u32[0], v23);
          float32x4_t v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, vcvtq_f32_f16(*(float16x4_t *)v41), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v43), v45, 1);
          v13.i32[0] = v21.i32[3];
          __int32 v23 = v21.i32[2];
          __int32 v22 = v21.i32[1];
          float32x4_t v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(*(float16x8_t *)v41), v45.f32[0]), vcvt_hight_f32_f16(*(float16x8_t *)v43), v45, 1);
          __int32 v27 = v24.i32[3];
          __int32 v26 = v24.i32[2];
          __int32 v25 = v24.i32[1];
          float32x4_t v11 = vmlaq_lane_f32(vmlaq_n_f32(v11, vcvtq_f32_f16(*(float16x4_t *)v42.i8), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v44.i8), v45, 1);
          __int32 v30 = v11.i32[3];
          __int32 v29 = v11.i32[2];
          __int32 v28 = v11.i32[1];
          float32x4_t v31 = vmlaq_lane_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v42), v45.f32[0]), vcvt_hight_f32_f16(v44), v45, 1);
          __int32 v34 = v31.i32[3];
          __int32 v33 = v31.i32[2];
          __int32 v32 = v31.i32[1];
          float32x4_t v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)(v41 + 32)), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v43 + 32)), v45, 1);
          __int32 v38 = v12.i32[3];
          __int32 v36 = v12.i32[2];
          __int32 v35 = v12.i32[1];
          uint64_t v46 = result + 4;
          result += 2;
        }
        while (v46 <= v16);
      }
      else
      {
        v21.i32[0] = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        v13.i64[0] = 0;
        v24.i32[0] = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        v11.i32[0] = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        v31.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        v12.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        uint64_t v37 = v17;
        __int32 v38 = 0;
      }
      if (v16)
      {
        uint64_t result = (5 * v19) & 0xFFFFFFFC;
        uint64_t v47 = *(void *)(a11 + 8 * ((int)v16 - 1)) + 2 * result;
        float16x8_t v48 = *(float16x8_t *)(v47 + 16);
        v12.i32[1] = v35;
        v12.i64[1] = __PAIR64__(v38, v36);
        v31.i32[1] = v32;
        v31.i64[1] = __PAIR64__(v34, v33);
        v11.i32[1] = v28;
        v11.i64[1] = __PAIR64__(v30, v29);
        v24.i32[1] = v25;
        v24.i64[1] = __PAIR64__(v27, v26);
        v21.i32[1] = v22;
        v21.i64[1] = __PAIR64__(v13.u32[0], v23);
        float32x4_t v21 = vaddq_f32(vmlaq_n_f32(v21, vcvtq_f32_f16(*(float16x4_t *)v47), *v37), (float32x4_t)0);
        v13.i32[0] = v21.i32[3];
        __int32 v23 = v21.i32[2];
        __int32 v22 = v21.i32[1];
        float32x4_t v24 = vaddq_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(*(float16x8_t *)v47), *v37), (float32x4_t)0);
        __int32 v27 = v24.i32[3];
        __int32 v26 = v24.i32[2];
        __int32 v25 = v24.i32[1];
        float32x4_t v11 = vaddq_f32(vmlaq_n_f32(v11, vcvtq_f32_f16(*(float16x4_t *)v48.i8), *v37), (float32x4_t)0);
        __int32 v30 = v11.i32[3];
        __int32 v29 = v11.i32[2];
        __int32 v28 = v11.i32[1];
        float32x4_t v31 = vaddq_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v48), *v37), (float32x4_t)0);
        __int32 v34 = v31.i32[3];
        __int32 v33 = v31.i32[2];
        __int32 v32 = v31.i32[1];
        float32x4_t v12 = vaddq_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)(v47 + 32)), *v37), (float32x4_t)0);
        __int32 v38 = v12.i32[3];
        __int32 v36 = v12.i32[2];
        __int32 v35 = v12.i32[1];
      }
      v49.i64[0] = __PAIR64__(v28, v24.u32[0]);
      v49.i64[1] = __PAIR64__(v38, v33);
      v50.i64[0] = __PAIR64__(v11.u32[0], v13.u32[0]);
      v50.i64[1] = __PAIR64__(v36, v32);
      float32x4_t v51 = vmaxnmq_f32(v49, v50);
      v50.i64[0] = __PAIR64__(v27, v23);
      v50.i64[1] = __PAIR64__(v35, v31.u32[0]);
      float32x4_t v52 = vmaxnmq_f32(v51, v50);
      v50.i64[0] = __PAIR64__(v26, v22);
      v50.i64[1] = __PAIR64__(v12.u32[0], v30);
      float32x4_t v53 = vmaxnmq_f32(v52, v50);
      v50.i64[0] = __PAIR64__(v25, v21.u32[0]);
      v50.i64[1] = __PAIR64__(v34, v29);
      float32x4_t v54 = vmaxnmq_f32(vmaxnmq_f32(v53, v50), (float32x4_t)0);
      v55.i64[0] = 0x80000000800000;
      v55.i64[1] = 0x80000000800000;
      float32x4_t v56 = (float32x4_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
      float32x4_t v57 = v56;
      v57.i32[3] = v54.i32[3];
      float32x4_t v58 = v56;
      v58.i32[2] = v54.i32[2];
      float32x4_t v59 = v56;
      v59.i32[1] = v54.i32[1];
      v56.i32[0] = v54.i32[0];
      v21.i32[1] = v22;
      v21.i64[1] = __PAIR64__(v13.u32[0], v23);
      v19 += 4;
      v24.i32[1] = v25;
      v24.i64[1] = __PAIR64__(v27, v26);
      v11.i32[1] = v28;
      v11.i64[1] = __PAIR64__(v30, v29);
      v31.i32[1] = v32;
      v31.i64[1] = __PAIR64__(v34, v33);
      v12.i32[1] = v35;
      v12.i64[1] = __PAIR64__(v38, v36);
      a6 = vminnmq_f32(vmaxnmq_f32(v31, v58), (float32x4_t)xmmword_1850CD6B0);
      *(float16x8_t *)uint64_t v15 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v21, v55), (float32x4_t)vdupq_n_s32(0x7F7FFFFFu))), vminnmq_f32(vmaxnmq_f32(v24, v56), (float32x4_t)xmmword_1850CD690));
      *(float16x8_t *)(v15 + 16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v11, v59), (float32x4_t)xmmword_1850CD6A0)), a6);
      *(float16x4_t *)(v15 + 32) = vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v12, v57), (float32x4_t)xmmword_1850CD6C0));
      v15 += 40;
    }
    int v18 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v18 = 0;
  }
  for (; v18 < a9; ++v18)
  {
    if ((int)v16 >= 2)
    {
      uint64_t v65 = 0;
      uint64_t v66 = (5 * v18);
      v60.i32[0] = 0;
      uint64_t v64 = v17;
      __int32 v61 = 0;
      __int32 v62 = 0;
      __int32 v63 = 0;
      a6.i64[0] = 0;
      do
      {
        float32x2_t v67 = (void *)(a11 + 8 * v65);
        uint64_t v68 = (float16x4_t *)(*v67 + 2 * v66);
        v11.i16[0] = v68[1].i16[0];
        uint64_t v69 = (float16x4_t *)(v67[1] + 2 * v66);
        v13.i16[0] = v69[1].i16[0];
        float32x4_t v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
        float32x4_t v12 = vcvtq_f32_f16(*v69);
        float32x2_t v70 = *(float32x2_t *)v64;
        v64 += 2;
        *(float32x2_t *)v14.f32 = v70;
        float32x4_t v13 = vcvtq_f32_f16(*(float16x4_t *)v13.f32);
        v60.i32[1] = v61;
        v60.i64[1] = __PAIR64__(v63, v62);
        a6 = vmlaq_lane_f32(vmlaq_f32(a6, v11, v14), v13, v70, 1);
        float32x4_t v60 = vmlaq_lane_f32(vmlaq_n_f32(v60, vcvtq_f32_f16(*v68), v70.f32[0]), v12, v70, 1);
        __int32 v63 = v60.i32[3];
        __int32 v62 = v60.i32[2];
        __int32 v61 = v60.i32[1];
        uint64_t v71 = v65 + 4;
        v65 += 2;
      }
      while (v71 <= v16);
    }
    else
    {
      v60.i32[0] = 0;
      __int32 v61 = 0;
      __int32 v62 = 0;
      __int32 v63 = 0;
      uint64_t v64 = v17;
      a6.i64[0] = 0;
    }
    if (v16)
    {
      float v72 = (float16x4_t *)(*(void *)(a11 + 8 * ((int)v16 - 1)) + 2 * (5 * v18));
      v11.i16[0] = v72[1].i16[0];
      float32x4_t v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
      v12.f32[0] = *v64;
      v60.i32[1] = v61;
      v60.i64[1] = __PAIR64__(v63, v62);
      a6 = vaddq_f32(vmlaq_f32(a6, v11, v12), (float32x4_t)0);
      float32x4_t v60 = vaddq_f32(vmlaq_n_f32(v60, vcvtq_f32_f16(*v72), *v64), (float32x4_t)0);
      __int32 v63 = v60.i32[3];
      __int32 v62 = v60.i32[2];
      __int32 v61 = v60.i32[1];
    }
    v60.i32[1] = v61;
    v60.i64[1] = __PAIR64__(v63, v62);
    float v73 = vmaxvq_f32(vmaxnmq_f32(v60, a6));
    float v74 = fmaxf(v73, 0.0);
    if (v73 <= 1.0) {
      float v75 = v74;
    }
    else {
      float v75 = 1.0;
    }
    a6.f32[0] = v75;
    *(float16x4_t *)uint64_t v15 = vcvt_f16_f32(v60);
    *(_WORD *)(v15 + 8) = vcvt_f16_f32(a6).u16[0];
    v15 += 10;
  }
  return result;
}

uint64_t resample_vertical<half,half,4,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float16x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    unint64_t v11 = 2;
    int8x16_t v12 = (int8x16_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = 0uLL;
      uint64_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = (4 * v10) & 0xFFFFFFF8;
        uint64_t v15 = v8;
        do
        {
          int v18 = (void *)(a6 + 8 * v16);
          float16x8_t v19 = *(float16x8_t *)(*v18 + 2 * v17);
          float16x8_t v20 = *(float16x8_t *)(v18[1] + 2 * v17);
          float32x2_t v21 = *(float32x2_t *)v15;
          v15 += 2;
          float32x4_t v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, vcvt_hight_f32_f16(v19), v21.f32[0]), vcvt_hight_f32_f16(v20), v21, 1);
          float32x4_t v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, vcvtq_f32_f16(*(float16x4_t *)v19.i8), v21.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v20.i8), v21, 1);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        float16x8_t v22 = *(float16x8_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 2 * ((4 * v10) & 0xFFFFFFF8));
        float32x4_t v14 = vaddq_f32(vmlaq_n_f32(v14, vcvt_hight_f32_f16(v22), *v15), (float32x4_t)0);
        float32x4_t v13 = vaddq_f32(vmlaq_n_f32(v13, vcvtq_f32_f16(*(float16x4_t *)v22.i8), *v15), (float32x4_t)0);
      }
      int8x16_t v23 = (int8x16_t)vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14));
      int32x2_t v24 = (int32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
      *(float32x2_t *)v23.i8 = vmaxnm_f32(vmaxnm_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, v24), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, v24)), 0);
      float32x4_t v25 = (float32x4_t)v12;
      v25.i32[3] = v23.i32[1];
      v10 += 2;
      *v6++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v13, (float32x4_t)vextq_s8(v12, v23, 4uLL)), (float32x4_t)xmmword_1850CD6C0)), vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850CD6C0));
      v11 += 2;
    }
    while (v11 <= a4);
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    float32x4_t v26 = 0uLL;
    __int32 v27 = v8;
    if ((int)v7 >= 2)
    {
      uint64_t v28 = 0;
      __int32 v27 = v8;
      do
      {
        __int32 v29 = (uint64_t *)(a6 + 8 * v28);
        uint64_t result = *v29;
        float32x2_t v30 = *(float32x2_t *)v27;
        v27 += 2;
        float32x4_t v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, vcvtq_f32_f16(*(float16x4_t *)(*v29 + 2 * (4 * v9))), v30.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v29[1] + 2 * (4 * v9))), v30, 1);
        uint64_t v31 = v28 + 4;
        v28 += 2;
      }
      while (v31 <= v7);
    }
    if (v7) {
      float32x4_t v26 = vaddq_f32(vmlaq_n_f32(v26, vcvtq_f32_f16(*(float16x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 2 * (4 * v9))), *v27), (float32x4_t)0);
    }
    float v32 = vmaxvq_f32(v26);
    float v33 = fmaxf(v32, 0.0);
    if (v32 <= 1.0) {
      float v34 = v33;
    }
    else {
      float v34 = 1.0;
    }
    v26.f32[3] = v34;
    *(float16x4_t *)v6->i8 = vcvt_f16_f32(v26);
    uint64_t v6 = (float16x8_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<half,half,2,(AlphaStyle)2>(uint64_t result, double a2, double a3, double a4, float32x4_t a5, __n128 a6, float32x4_t a7, uint64_t a8, uint64_t a9, int a10, __n128 **a11, uint64_t a12)
{
  int8x16_t v12 = *a11;
  uint64_t v13 = *(int *)(result + 4);
  float32x4_t v14 = (float *)(result + 8);
  if (a10 >= 4)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 4;
    v18.i64[0] = 0x80000000800000;
    v18.i64[1] = 0x80000000800000;
    int32x4_t v19 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    a5.i64[1] = 0x3F8000007F7FFFFFLL;
    do
    {
      float32x4_t v20 = 0uLL;
      float32x4_t v21 = 0uLL;
      float16x8_t v22 = v14;
      if ((int)v13 >= 2)
      {
        uint64_t result = 0;
        float16x8_t v22 = v14;
        do
        {
          int8x16_t v23 = (void *)(a12 + 8 * result);
          float16x8_t v24 = *(float16x8_t *)(*v23 + 4 * v16);
          float16x8_t v25 = *(float16x8_t *)(v23[1] + 4 * v16);
          float32x2_t v26 = *(float32x2_t *)v22;
          v22 += 2;
          float32x4_t v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, vcvt_hight_f32_f16(v24), v26.f32[0]), vcvt_hight_f32_f16(v25), v26, 1);
          float32x4_t v20 = vmlaq_lane_f32(vmlaq_n_f32(v20, vcvtq_f32_f16(*(float16x4_t *)v24.i8), v26.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v25.i8), v26, 1);
          uint64_t v27 = result + 4;
          result += 2;
        }
        while (v27 <= v13);
      }
      if (v13)
      {
        uint64_t result = 4 * v16;
        float16x8_t v28 = *(float16x8_t *)(*(void *)(a12 + 8 * ((int)v13 - 1)) + 4 * v16);
        float32x4_t v21 = vaddq_f32(vmlaq_n_f32(v21, vcvt_hight_f32_f16(v28), *v22), (float32x4_t)0);
        float32x4_t v20 = vaddq_f32(vmlaq_n_f32(v20, vcvtq_f32_f16(*(float16x4_t *)v28.i8), *v22), (float32x4_t)0);
      }
      v16 += 4;
      int32x4_t v29 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v21), (float32x4_t)vuzp2q_s32((int32x4_t)v20, (int32x4_t)v21)), (float32x4_t)0);
      float32x4_t v30 = (float32x4_t)vzip2q_s32(v19, v29);
      float32x4_t v31 = (float32x4_t)vzip1q_s32(v18, v29);
      v31.i32[2] = -8388609;
      a7 = vminnmq_f32(vmaxnmq_f32(v21, v30), (float32x4_t)xmmword_1850CD6D0);
      a6 = (__n128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v20, v31), (float32x4_t)xmmword_1850CD6D0)), a7);
      *v12++ = a6;
      v17 += 4;
    }
    while (v17 <= a10);
    int v15 = a10 & 0x7FFFFFFC;
  }
  else
  {
    int v15 = 0;
  }
  for (; v15 < a10; ++v15)
  {
    a5.i64[0] = 0;
    float v32 = v14;
    if ((int)v13 >= 2)
    {
      uint64_t v33 = 0;
      uint64_t v34 = (2 * v15);
      a5.i64[0] = 0;
      float v32 = v14;
      do
      {
        __int32 v35 = (uint64_t *)(a12 + 8 * v33);
        uint64_t result = *v35;
        a6.n128_u32[0] = *(_DWORD *)(*v35 + 2 * v34);
        a7.i32[0] = *(_DWORD *)(v35[1] + 2 * v34);
        a6.n128_u64[0] = vcvtq_f32_f16((float16x4_t)a6.n128_u64[0]).u64[0];
        a7.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a7.f32).u64[0];
        float32x2_t v36 = *(float32x2_t *)v32;
        v32 += 2;
        *(float32x2_t *)a5.f32 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a5.f32, (float32x2_t)a6.n128_u64[0], v36.f32[0]), *(float32x2_t *)a7.f32, v36, 1);
        uint64_t v37 = v33 + 4;
        v33 += 2;
      }
      while (v37 <= v13);
    }
    if (v13)
    {
      a6.n128_u32[0] = *(_DWORD *)(*(void *)(a12 + 8 * ((int)v13 - 1)) + 2 * (2 * v15));
      a6.n128_u64[0] = vcvtq_f32_f16((float16x4_t)a6.n128_u64[0]).u64[0];
      *(float32x2_t *)a5.f32 = vadd_f32(vmla_n_f32(*(float32x2_t *)a5.f32, (float32x2_t)a6.n128_u64[0], *v32), 0);
    }
    float v38 = vpmax_f32(*(float32x2_t *)a5.f32);
    float v39 = fmaxf(v38, 0.0);
    if (v38 <= 1.0) {
      float v40 = v39;
    }
    else {
      float v40 = 1.0;
    }
    a5.f32[1] = v40;
    v12->n128_u32[0] = vcvt_f16_f32(a5).u32[0];
    int8x16_t v12 = (__n128 *)((char *)v12 + 4);
  }
  return result;
}

uint64_t resample_vertical<half,half,5,(AlphaStyle)1>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t *a10, uint64_t a11)
{
  uint64_t v15 = *a10;
  uint64_t v16 = *(int *)(result + 4);
  unint64_t v17 = (float *)(result + 8);
  if (a9 >= 4)
  {
    int v19 = 0;
    for (unint64_t i = 4; i <= a9; i += 4)
    {
      if ((int)v16 >= 2)
      {
        uint64_t result = 0;
        v21.i32[0] = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        uint64_t v39 = (5 * v19) & 0xFFFFFFFC;
        v13.i64[0] = 0;
        uint64_t v37 = v17;
        v24.i32[0] = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        v11.i32[0] = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        v31.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        v12.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v38 = 0;
        do
        {
          float v40 = (void *)(a11 + 8 * result);
          uint64_t v41 = *v40 + 2 * v39;
          float16x8_t v42 = *(float16x8_t *)(v41 + 16);
          uint64_t v43 = v40[1] + 2 * v39;
          float16x8_t v44 = *(float16x8_t *)(v43 + 16);
          float32x2_t v45 = *(float32x2_t *)v37;
          v37 += 2;
          v12.i32[1] = v35;
          v12.i64[1] = __PAIR64__(v38, v36);
          v31.i32[1] = v32;
          v31.i64[1] = __PAIR64__(v34, v33);
          v11.i32[1] = v28;
          v11.i64[1] = __PAIR64__(v30, v29);
          v24.i32[1] = v25;
          v24.i64[1] = __PAIR64__(v27, v26);
          v21.i32[1] = v22;
          v21.i64[1] = __PAIR64__(v13.u32[0], v23);
          float32x4_t v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, vcvtq_f32_f16(*(float16x4_t *)v41), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v43), v45, 1);
          v13.i32[0] = v21.i32[3];
          __int32 v23 = v21.i32[2];
          __int32 v22 = v21.i32[1];
          float32x4_t v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(*(float16x8_t *)v41), v45.f32[0]), vcvt_hight_f32_f16(*(float16x8_t *)v43), v45, 1);
          __int32 v27 = v24.i32[3];
          __int32 v26 = v24.i32[2];
          __int32 v25 = v24.i32[1];
          float32x4_t v11 = vmlaq_lane_f32(vmlaq_n_f32(v11, vcvtq_f32_f16(*(float16x4_t *)v42.i8), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v44.i8), v45, 1);
          __int32 v30 = v11.i32[3];
          __int32 v29 = v11.i32[2];
          __int32 v28 = v11.i32[1];
          float32x4_t v31 = vmlaq_lane_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v42), v45.f32[0]), vcvt_hight_f32_f16(v44), v45, 1);
          __int32 v34 = v31.i32[3];
          __int32 v33 = v31.i32[2];
          __int32 v32 = v31.i32[1];
          float32x4_t v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)(v41 + 32)), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v43 + 32)), v45, 1);
          __int32 v38 = v12.i32[3];
          __int32 v36 = v12.i32[2];
          __int32 v35 = v12.i32[1];
          uint64_t v46 = result + 4;
          result += 2;
        }
        while (v46 <= v16);
      }
      else
      {
        v21.i32[0] = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        v13.i64[0] = 0;
        v24.i32[0] = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        v11.i32[0] = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        v31.i32[0] = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        v12.i32[0] = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        uint64_t v37 = v17;
        __int32 v38 = 0;
      }
      if (v16)
      {
        uint64_t result = (5 * v19) & 0xFFFFFFFC;
        uint64_t v47 = *(void *)(a11 + 8 * ((int)v16 - 1)) + 2 * result;
        float16x8_t v48 = *(float16x8_t *)(v47 + 16);
        v12.i32[1] = v35;
        v12.i64[1] = __PAIR64__(v38, v36);
        v31.i32[1] = v32;
        v31.i64[1] = __PAIR64__(v34, v33);
        v11.i32[1] = v28;
        v11.i64[1] = __PAIR64__(v30, v29);
        v24.i32[1] = v25;
        v24.i64[1] = __PAIR64__(v27, v26);
        v21.i32[1] = v22;
        v21.i64[1] = __PAIR64__(v13.u32[0], v23);
        float32x4_t v21 = vaddq_f32(vmlaq_n_f32(v21, vcvtq_f32_f16(*(float16x4_t *)v47), *v37), (float32x4_t)0);
        v13.i32[0] = v21.i32[3];
        __int32 v23 = v21.i32[2];
        __int32 v22 = v21.i32[1];
        float32x4_t v24 = vaddq_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(*(float16x8_t *)v47), *v37), (float32x4_t)0);
        __int32 v27 = v24.i32[3];
        __int32 v26 = v24.i32[2];
        __int32 v25 = v24.i32[1];
        float32x4_t v11 = vaddq_f32(vmlaq_n_f32(v11, vcvtq_f32_f16(*(float16x4_t *)v48.i8), *v37), (float32x4_t)0);
        __int32 v30 = v11.i32[3];
        __int32 v29 = v11.i32[2];
        __int32 v28 = v11.i32[1];
        float32x4_t v31 = vaddq_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v48), *v37), (float32x4_t)0);
        __int32 v34 = v31.i32[3];
        __int32 v33 = v31.i32[2];
        __int32 v32 = v31.i32[1];
        float32x4_t v12 = vaddq_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)(v47 + 32)), *v37), (float32x4_t)0);
        __int32 v38 = v12.i32[3];
        __int32 v36 = v12.i32[2];
        __int32 v35 = v12.i32[1];
      }
      v49.i64[0] = __PAIR64__(v28, v24.u32[0]);
      v49.i64[1] = __PAIR64__(v38, v33);
      v50.i64[0] = __PAIR64__(v11.u32[0], v13.u32[0]);
      v50.i64[1] = __PAIR64__(v36, v32);
      float32x4_t v51 = vmaxnmq_f32(v49, v50);
      v50.i64[0] = __PAIR64__(v27, v23);
      v50.i64[1] = __PAIR64__(v35, v31.u32[0]);
      float32x4_t v52 = vmaxnmq_f32(v51, v50);
      v50.i64[0] = __PAIR64__(v26, v22);
      v50.i64[1] = __PAIR64__(v12.u32[0], v30);
      float32x4_t v53 = vmaxnmq_f32(v52, v50);
      v50.i64[0] = __PAIR64__(v25, v21.u32[0]);
      v50.i64[1] = __PAIR64__(v34, v29);
      float32x4_t v54 = vmaxnmq_f32(vmaxnmq_f32(v53, v50), (float32x4_t)0);
      v55.i64[0] = 0x80000000800000;
      v55.i64[1] = 0x80000000800000;
      float32x4_t v56 = (float32x4_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
      float32x4_t v57 = v56;
      v57.i32[3] = v54.i32[3];
      float32x4_t v58 = v56;
      v58.i32[2] = v54.i32[2];
      float32x4_t v59 = v56;
      v59.i32[1] = v54.i32[1];
      v56.i32[0] = v54.i32[0];
      v21.i32[1] = v22;
      v21.i64[1] = __PAIR64__(v13.u32[0], v23);
      v19 += 4;
      v24.i32[1] = v25;
      v24.i64[1] = __PAIR64__(v27, v26);
      v11.i32[1] = v28;
      v11.i64[1] = __PAIR64__(v30, v29);
      v31.i32[1] = v32;
      v31.i64[1] = __PAIR64__(v34, v33);
      v12.i32[1] = v35;
      v12.i64[1] = __PAIR64__(v38, v36);
      a6 = vminnmq_f32(vmaxnmq_f32(v11, v58), (float32x4_t)xmmword_1850CD6B0);
      *(float16x8_t *)uint64_t v15 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v21, v56), (float32x4_t)xmmword_1850CD690)), vminnmq_f32(vmaxnmq_f32(v24, v59), (float32x4_t)xmmword_1850CD6A0));
      *(float16x8_t *)(v15 + 16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(a6), vminnmq_f32(vmaxnmq_f32(v31, v57), (float32x4_t)xmmword_1850CD6C0));
      *(float16x4_t *)(v15 + 32) = vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v12, v55), (float32x4_t)vdupq_n_s32(0x7F7FFFFFu)));
      v15 += 40;
    }
    int v18 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v18 = 0;
  }
  for (; v18 < a9; ++v18)
  {
    if ((int)v16 >= 2)
    {
      uint64_t v65 = 0;
      uint64_t v66 = (5 * v18);
      v60.i32[0] = 0;
      uint64_t v64 = v17;
      __int32 v61 = 0;
      __int32 v62 = 0;
      __int32 v63 = 0;
      a6.i64[0] = 0;
      do
      {
        float32x2_t v67 = (void *)(a11 + 8 * v65);
        uint64_t v68 = (float16x4_t *)(*v67 + 2 * v66);
        v11.i16[0] = v68[1].i16[0];
        uint64_t v69 = (float16x4_t *)(v67[1] + 2 * v66);
        v13.i16[0] = v69[1].i16[0];
        float32x4_t v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
        float32x4_t v12 = vcvtq_f32_f16(*v69);
        float32x2_t v70 = *(float32x2_t *)v64;
        v64 += 2;
        *(float32x2_t *)v14.f32 = v70;
        float32x4_t v13 = vcvtq_f32_f16(*(float16x4_t *)v13.f32);
        v60.i32[1] = v61;
        v60.i64[1] = __PAIR64__(v63, v62);
        a6 = vmlaq_lane_f32(vmlaq_f32(a6, v11, v14), v13, v70, 1);
        float32x4_t v60 = vmlaq_lane_f32(vmlaq_n_f32(v60, vcvtq_f32_f16(*v68), v70.f32[0]), v12, v70, 1);
        __int32 v63 = v60.i32[3];
        __int32 v62 = v60.i32[2];
        __int32 v61 = v60.i32[1];
        uint64_t v71 = v65 + 4;
        v65 += 2;
      }
      while (v71 <= v16);
    }
    else
    {
      v60.i32[0] = 0;
      __int32 v61 = 0;
      __int32 v62 = 0;
      __int32 v63 = 0;
      uint64_t v64 = v17;
      a6.i64[0] = 0;
    }
    if (v16)
    {
      float v72 = (float16x4_t *)(*(void *)(a11 + 8 * ((int)v16 - 1)) + 2 * (5 * v18));
      v11.i16[0] = v72[1].i16[0];
      float32x4_t v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
      v12.f32[0] = *v64;
      v60.i32[1] = v61;
      v60.i64[1] = __PAIR64__(v63, v62);
      a6 = vaddq_f32(vmlaq_f32(a6, v11, v12), (float32x4_t)0);
      float32x4_t v60 = vaddq_f32(vmlaq_n_f32(v60, vcvtq_f32_f16(*v72), *v64), (float32x4_t)0);
      __int32 v63 = v60.i32[3];
      __int32 v62 = v60.i32[2];
      __int32 v61 = v60.i32[1];
    }
    v60.i32[1] = v61;
    v60.i64[1] = __PAIR64__(v63, v62);
    float v73 = vmaxvq_f32(vmaxnmq_f32(v60, a6));
    float v74 = fmaxf(v73, 0.0);
    if (v73 <= 1.0) {
      float v75 = v74;
    }
    else {
      float v75 = 1.0;
    }
    v60.f32[0] = v75;
    *(float16x4_t *)uint64_t v15 = vcvt_f16_f32(v60);
    *(_WORD *)(v15 + 8) = vcvt_f16_f32(a6).u16[0];
    v15 += 10;
  }
  return result;
}

uint64_t resample_vertical<half,half,4,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float16x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    unint64_t v11 = 2;
    int32x4_t v12 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = 0uLL;
      uint64_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = (4 * v10) & 0xFFFFFFF8;
        uint64_t v15 = v8;
        do
        {
          int v18 = (void *)(a6 + 8 * v16);
          float16x8_t v19 = *(float16x8_t *)(*v18 + 2 * v17);
          float16x8_t v20 = *(float16x8_t *)(v18[1] + 2 * v17);
          float32x2_t v21 = *(float32x2_t *)v15;
          v15 += 2;
          float32x4_t v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, vcvt_hight_f32_f16(v19), v21.f32[0]), vcvt_hight_f32_f16(v20), v21, 1);
          float32x4_t v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, vcvtq_f32_f16(*(float16x4_t *)v19.i8), v21.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v20.i8), v21, 1);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        float16x8_t v22 = *(float16x8_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 2 * ((4 * v10) & 0xFFFFFFF8));
        float32x4_t v14 = vaddq_f32(vmlaq_n_f32(v14, vcvt_hight_f32_f16(v22), *v15), (float32x4_t)0);
        float32x4_t v13 = vaddq_f32(vmlaq_n_f32(v13, vcvtq_f32_f16(*(float16x4_t *)v22.i8), *v15), (float32x4_t)0);
      }
      v10 += 2;
      int8x16_t v23 = (int8x16_t)vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14));
      int32x2_t v24 = (int32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
      *(float32x2_t *)v23.i8 = vmaxnm_f32(vmaxnm_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, v24), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, v24)), 0);
      float32x4_t v25 = (float32x4_t)v12;
      v25.i32[0] = v23.i32[1];
      float32x4_t v26 = (float32x4_t)v12;
      v26.i32[0] = v23.i32[0];
      *v6++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v13, v26), (float32x4_t)xmmword_1850CD690)), vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850CD690));
      v11 += 2;
    }
    while (v11 <= a4);
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    float32x4_t v27 = 0uLL;
    __int32 v28 = v8;
    if ((int)v7 >= 2)
    {
      uint64_t v29 = 0;
      __int32 v28 = v8;
      do
      {
        __int32 v30 = (uint64_t *)(a6 + 8 * v29);
        uint64_t result = *v30;
        float32x2_t v31 = *(float32x2_t *)v28;
        v28 += 2;
        float32x4_t v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, vcvtq_f32_f16(*(float16x4_t *)(*v30 + 2 * (4 * v9))), v31.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v30[1] + 2 * (4 * v9))), v31, 1);
        uint64_t v32 = v29 + 4;
        v29 += 2;
      }
      while (v32 <= v7);
    }
    if (v7) {
      float32x4_t v27 = vaddq_f32(vmlaq_n_f32(v27, vcvtq_f32_f16(*(float16x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 2 * (4 * v9))), *v28), (float32x4_t)0);
    }
    float v33 = vmaxvq_f32(v27);
    float v34 = fmaxf(v33, 0.0);
    if (v33 <= 1.0) {
      float v35 = v34;
    }
    else {
      float v35 = 1.0;
    }
    v27.f32[0] = v35;
    *(float16x4_t *)v6->i8 = vcvt_f16_f32(v27);
    uint64_t v6 = (float16x8_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<half,half,2,(AlphaStyle)1>(uint64_t result, double a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, uint64_t a8, uint64_t a9, int a10, __n128 **a11, uint64_t a12)
{
  int32x4_t v12 = *a11;
  uint64_t v13 = *(int *)(result + 4);
  float32x4_t v14 = (float *)(result + 8);
  if (a10 >= 4)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 4;
    int32x4_t v18 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      float32x4_t v19 = 0uLL;
      float32x4_t v20 = 0uLL;
      float32x2_t v21 = v14;
      if ((int)v13 >= 2)
      {
        uint64_t v22 = 0;
        float32x2_t v21 = v14;
        do
        {
          int8x16_t v23 = (void *)(a12 + 8 * v22);
          float16x8_t v24 = *(float16x8_t *)(*v23 + 4 * v16);
          float16x8_t v25 = *(float16x8_t *)(v23[1] + 4 * v16);
          float32x2_t v26 = *(float32x2_t *)v21;
          v21 += 2;
          float32x4_t v20 = vmlaq_lane_f32(vmlaq_n_f32(v20, vcvt_hight_f32_f16(v24), v26.f32[0]), vcvt_hight_f32_f16(v25), v26, 1);
          float32x4_t v19 = vmlaq_lane_f32(vmlaq_n_f32(v19, vcvtq_f32_f16(*(float16x4_t *)v24.i8), v26.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v25.i8), v26, 1);
          uint64_t result = v22 + 4;
          v22 += 2;
        }
        while (result <= v13);
      }
      if (v13)
      {
        float16x8_t v27 = *(float16x8_t *)(*(void *)(a12 + 8 * ((int)v13 - 1)) + 4 * v16);
        float32x4_t v20 = vaddq_f32(vmlaq_n_f32(v20, vcvt_hight_f32_f16(v27), *v21), (float32x4_t)0);
        float32x4_t v19 = vaddq_f32(vmlaq_n_f32(v19, vcvtq_f32_f16(*(float16x4_t *)v27.i8), *v21), (float32x4_t)0);
      }
      v16 += 4;
      int32x4_t v28 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v20), (float32x4_t)vuzp2q_s32((int32x4_t)v19, (int32x4_t)v20)), (float32x4_t)0);
      float32x4_t v29 = (float32x4_t)vzip2q_s32(v28, v18);
      a7 = (float32x4_t)vzip1q_s32(v28, v18);
      a6 = vminnmq_f32(vmaxnmq_f32(v20, v29), (float32x4_t)xmmword_1850CD6E0);
      a5 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v19, a7), (float32x4_t)xmmword_1850CD6E0)), a6);
      *v12++ = (__n128)a5;
      v17 += 4;
    }
    while (v17 <= a10);
    int v15 = a10 & 0x7FFFFFFC;
  }
  else
  {
    int v15 = 0;
  }
  for (; v15 < a10; ++v15)
  {
    a5.i64[0] = 0;
    __int32 v30 = v14;
    if ((int)v13 >= 2)
    {
      uint64_t v31 = 0;
      uint64_t v32 = (2 * v15);
      a5.i64[0] = 0;
      __int32 v30 = v14;
      do
      {
        float v33 = (uint64_t *)(a12 + 8 * v31);
        uint64_t result = *v33;
        a6.i32[0] = *(_DWORD *)(*v33 + 2 * v32);
        a7.i32[0] = *(_DWORD *)(v33[1] + 2 * v32);
        a6.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a6.f32).u64[0];
        a7.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a7.f32).u64[0];
        float32x2_t v34 = *(float32x2_t *)v30;
        v30 += 2;
        *(float32x2_t *)a5.f32 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a6.f32, v34.f32[0]), *(float32x2_t *)a7.f32, v34, 1);
        uint64_t v35 = v31 + 4;
        v31 += 2;
      }
      while (v35 <= v13);
    }
    if (v13)
    {
      a6.i32[0] = *(_DWORD *)(*(void *)(a12 + 8 * ((int)v13 - 1)) + 2 * (2 * v15));
      a6.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a6.f32).u64[0];
      *(float32x2_t *)a5.f32 = vadd_f32(vmla_n_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a6.f32, *v30), 0);
    }
    float v36 = vpmax_f32(*(float32x2_t *)a5.f32);
    float v37 = fmaxf(v36, 0.0);
    if (v36 <= 1.0) {
      float v38 = v37;
    }
    else {
      float v38 = 1.0;
    }
    a5.f32[0] = v38;
    v12->n128_u32[0] = vcvt_f16_f32(a5).u32[0];
    int32x4_t v12 = (__n128 *)((char *)v12 + 4);
  }
  return result;
}

uint64_t resample_vertical<half,half,4,(AlphaStyle)0>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float16x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    for (unint64_t i = 2; i <= a4; i += 2)
    {
      float32x4_t v12 = 0uLL;
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (4 * v10) & 0xFFFFFFF8;
        float32x4_t v14 = v8;
        do
        {
          unint64_t v17 = (void *)(a6 + 8 * v15);
          float16x8_t v18 = *(float16x8_t *)(*v17 + 2 * v16);
          float16x8_t v19 = *(float16x8_t *)(v17[1] + 2 * v16);
          float32x2_t v20 = *(float32x2_t *)v14;
          v14 += 2;
          float32x4_t v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, vcvt_hight_f32_f16(v18), v20.f32[0]), vcvt_hight_f32_f16(v19), v20, 1);
          float32x4_t v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)v18.i8), v20.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v19.i8), v20, 1);
          uint64_t result = v15 + 4;
          v15 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        float16x8_t v21 = *(float16x8_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 2 * ((4 * v10) & 0xFFFFFFF8));
        float32x4_t v13 = vaddq_f32(vmlaq_n_f32(v13, vcvt_hight_f32_f16(v21), *v14), (float32x4_t)0);
        float32x4_t v12 = vaddq_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)v21.i8), *v14), (float32x4_t)0);
      }
      v10 += 2;
      *v6++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v12), v13);
    }
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    float32x4_t v22 = 0uLL;
    int8x16_t v23 = v8;
    if ((int)v7 >= 2)
    {
      uint64_t v24 = 0;
      int8x16_t v23 = v8;
      do
      {
        float16x8_t v25 = (uint64_t *)(a6 + 8 * v24);
        uint64_t result = *v25;
        float32x2_t v26 = *(float32x2_t *)v23;
        v23 += 2;
        float32x4_t v22 = vmlaq_lane_f32(vmlaq_n_f32(v22, vcvtq_f32_f16(*(float16x4_t *)(*v25 + 2 * (4 * v9))), v26.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v25[1] + 2 * (4 * v9))), v26, 1);
        uint64_t v27 = v24 + 4;
        v24 += 2;
      }
      while (v27 <= v7);
    }
    if (v7) {
      float32x4_t v22 = vaddq_f32(vmlaq_n_f32(v22, vcvtq_f32_f16(*(float16x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 2 * (4 * v9))), *v23), (float32x4_t)0);
    }
    *(float16x4_t *)v6->i8 = vcvt_f16_f32(v22);
    uint64_t v6 = (float16x8_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<half,half,3,(AlphaStyle)0>(uint64_t result, double a2, double a3, float32x4_t a4, float32x4_t a5, uint64_t a6, uint64_t a7, int a8, float16x8_t **a9, uint64_t a10)
{
  int v10 = *a9;
  uint64_t v11 = *(int *)(result + 4);
  float32x4_t v12 = (float *)(result + 8);
  if (a8 >= 4)
  {
    int v14 = 0;
    for (unint64_t i = 4; i <= a8; i += 4)
    {
      if ((int)v11 >= 2)
      {
        uint64_t v28 = 0;
        v16.i32[0] = 0;
        __int32 v17 = 0;
        __int32 v18 = 0;
        uint64_t v29 = (3 * v14) & 0xFFFFFFFC;
        __int32 v19 = 0;
        float32x2_t v26 = v12;
        a5.i32[0] = 0;
        unsigned __int32 v20 = 0;
        unsigned __int32 v21 = 0;
        unsigned __int32 v22 = 0;
        v23.i32[0] = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v27 = 0;
        do
        {
          __int32 v30 = (void *)(a10 + 8 * v28);
          uint64_t v31 = (float16x4_t *)(*v30 + 2 * v29);
          uint64_t v32 = (float16x4_t *)(v30[1] + 2 * v29);
          float32x2_t v33 = *(float32x2_t *)v26;
          v26 += 2;
          v23.i32[1] = v24;
          v23.i64[1] = __PAIR64__(v27, v25);
          a5.i32[1] = v20;
          a5.i64[1] = __PAIR64__(v22, v21);
          v16.i32[1] = v17;
          v16.i64[1] = __PAIR64__(v19, v18);
          float32x4_t v16 = vmlaq_lane_f32(vmlaq_n_f32(v16, vcvtq_f32_f16(*v31), v33.f32[0]), vcvtq_f32_f16(*v32), v33, 1);
          __int32 v19 = v16.i32[3];
          __int32 v18 = v16.i32[2];
          __int32 v17 = v16.i32[1];
          a5 = vmlaq_lane_f32(vmlaq_n_f32(a5, vcvt_hight_f32_f16(*(float16x8_t *)v31->i8), v33.f32[0]), vcvt_hight_f32_f16(*(float16x8_t *)v32->i8), v33, 1);
          unsigned __int32 v22 = a5.u32[3];
          unsigned __int32 v21 = a5.u32[2];
          unsigned __int32 v20 = a5.u32[1];
          float32x4_t v23 = vmlaq_lane_f32(vmlaq_n_f32(v23, vcvtq_f32_f16(v31[2]), v33.f32[0]), vcvtq_f32_f16(v32[2]), v33, 1);
          __int32 v27 = v23.i32[3];
          __int32 v25 = v23.i32[2];
          __int32 v24 = v23.i32[1];
          uint64_t result = v28 + 4;
          v28 += 2;
        }
        while (result <= v11);
      }
      else
      {
        v16.i32[0] = 0;
        __int32 v17 = 0;
        __int32 v18 = 0;
        __int32 v19 = 0;
        a5.i32[0] = 0;
        unsigned __int32 v20 = 0;
        unsigned __int32 v21 = 0;
        unsigned __int32 v22 = 0;
        v23.i32[0] = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        float32x2_t v26 = v12;
        __int32 v27 = 0;
      }
      if (v11)
      {
        float32x2_t v34 = (float16x4_t *)(*(void *)(a10 + 8 * ((int)v11 - 1)) + 2 * ((3 * v14) & 0xFFFFFFFC));
        v23.i32[1] = v24;
        v23.i64[1] = __PAIR64__(v27, v25);
        a5.i32[1] = v20;
        a5.i64[1] = __PAIR64__(v22, v21);
        v16.i32[1] = v17;
        v16.i64[1] = __PAIR64__(v19, v18);
        float32x4_t v16 = vaddq_f32(vmlaq_n_f32(v16, vcvtq_f32_f16(*v34), *v26), (float32x4_t)0);
        __int32 v19 = v16.i32[3];
        __int32 v18 = v16.i32[2];
        __int32 v17 = v16.i32[1];
        a5 = vaddq_f32(vmlaq_n_f32(a5, vcvt_hight_f32_f16(*(float16x8_t *)v34->i8), *v26), (float32x4_t)0);
        unsigned __int32 v22 = a5.u32[3];
        unsigned __int32 v21 = a5.u32[2];
        unsigned __int32 v20 = a5.u32[1];
        float32x4_t v23 = vaddq_f32(vmlaq_n_f32(v23, vcvtq_f32_f16(v34[2]), *v26), (float32x4_t)0);
        __int32 v27 = v23.i32[3];
        __int32 v25 = v23.i32[2];
        __int32 v24 = v23.i32[1];
      }
      v14 += 4;
      v16.i32[1] = v17;
      v16.i64[1] = __PAIR64__(v19, v18);
      a5.i32[1] = v20;
      a5.i64[1] = __PAIR64__(v22, v21);
      v23.i32[1] = v24;
      a4.i64[1] = __PAIR64__(v27, v25);
      *(float16x4_t *)a4.f32 = vcvt_f16_f32(a4);
      *int v10 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v16), a5);
      v10[1].i64[0] = a4.i64[0];
      int v10 = (float16x8_t *)((char *)v10 + 24);
    }
    int v13 = a8 & 0x7FFFFFFC;
  }
  else
  {
    int v13 = 0;
  }
  for (; v13 < a8; ++v13)
  {
    float32x4_t v35 = 0uLL;
    float v36 = v12;
    if ((int)v11 >= 2)
    {
      uint64_t v37 = 0;
      uint64_t v38 = (3 * v13);
      float v36 = v12;
      do
      {
        uint64_t v39 = (void *)(a10 + 8 * v37);
        uint64_t v40 = *v39 + 2 * v38;
        a4.i32[0] = *(_DWORD *)v40;
        a4.i16[2] = *(_WORD *)(v40 + 4);
        uint64_t v41 = v39[1] + 2 * v38;
        a5.i32[0] = *(_DWORD *)v41;
        a5.i16[2] = *(_WORD *)(v41 + 4);
        a4 = vcvtq_f32_f16(*(float16x4_t *)a4.f32);
        a5 = vcvtq_f32_f16(*(float16x4_t *)a5.f32);
        float32x2_t v42 = *(float32x2_t *)v36;
        v36 += 2;
        float32x4_t v35 = vmlaq_lane_f32(vmlaq_n_f32(v35, a4, v42.f32[0]), a5, v42, 1);
        uint64_t v43 = v37 + 4;
        v37 += 2;
      }
      while (v43 <= v11);
    }
    if (v11)
    {
      uint64_t v44 = *(void *)(a10 + 8 * ((int)v11 - 1)) + 2 * (3 * v13);
      a4.i32[0] = *(_DWORD *)v44;
      a4.i16[2] = *(_WORD *)(v44 + 4);
      a4 = vcvtq_f32_f16(*(float16x4_t *)a4.f32);
      float32x4_t v35 = vaddq_f32(vmlaq_n_f32(v35, a4, *v36), (float32x4_t)0);
    }
    int16x4_t v45 = (int16x4_t)vcvt_f16_f32(v35);
    v10->i32[0] = v45.i32[0];
    v10->i16[2] = vdup_lane_s16(v45, 2).u16[0];
    int v10 = (float16x8_t *)((char *)v10 + 6);
  }
  return result;
}

uint64_t resample_vertical<half,half,1,(AlphaStyle)0>(uint64_t result, double a2, double a3, float32x4_t _Q2, float32x4_t _Q3, uint64_t a6, uint64_t a7, int a8, float16x8_t **a9, uint64_t a10)
{
  int v10 = *a9;
  uint64_t v11 = *(int *)(result + 4);
  float32x4_t v12 = (float *)(result + 8);
  if (a8 >= 8)
  {
    uint64_t v14 = 0;
    for (unint64_t i = 8; i <= a8; i += 8)
    {
      float32x4_t v16 = 0uLL;
      _Q2 = 0uLL;
      __int32 v17 = v12;
      if ((int)v11 >= 2)
      {
        uint64_t v18 = 0;
        __int32 v17 = v12;
        do
        {
          __int32 v19 = (void *)(a10 + 8 * v18);
          float16x8_t v20 = *(float16x8_t *)(*v19 + 2 * v14);
          float16x8_t v21 = *(float16x8_t *)(v19[1] + 2 * v14);
          float32x4_t v22 = vcvt_hight_f32_f16(v20);
          _Q3 = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
          float32x2_t v23 = *(float32x2_t *)v17;
          v17 += 2;
          _Q2 = vmlaq_lane_f32(vmlaq_n_f32(_Q2, v22, v23.f32[0]), vcvt_hight_f32_f16(v21), v23, 1);
          float32x4_t v16 = vmlaq_lane_f32(vmlaq_n_f32(v16, _Q3, v23.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v21.i8), v23, 1);
          uint64_t result = v18 + 4;
          v18 += 2;
        }
        while (result <= v11);
      }
      if (v11)
      {
        float16x8_t v24 = *(float16x8_t *)(*(void *)(a10 + 8 * ((int)v11 - 1)) + 2 * v14);
        float32x4_t v25 = vcvt_hight_f32_f16(v24);
        _Q3 = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
        _Q2 = vaddq_f32(vmlaq_n_f32(_Q2, v25, *v17), (float32x4_t)0);
        float32x4_t v16 = vaddq_f32(vmlaq_n_f32(v16, _Q3, *v17), (float32x4_t)0);
      }
      v14 += 8;
      *v10++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v16), _Q2);
    }
    uint64_t v13 = a8 & 0xFFFFFFF8;
  }
  else
  {
    uint64_t v13 = 0;
  }
  for (uint64_t j = v13 | 4; (int)j <= a8; j += 4)
  {
    uint64_t v27 = 2 * v13;
    float32x4_t v28 = 0uLL;
    uint64_t v29 = v12;
    if ((int)v11 >= 2)
    {
      uint64_t v30 = 0;
      uint64_t v29 = v12;
      do
      {
        uint64_t v31 = (uint64_t *)(a10 + 8 * v30);
        uint64_t result = *v31;
        _Q2 = vcvtq_f32_f16(*(float16x4_t *)(*v31 + v27));
        _Q3 = vcvtq_f32_f16(*(float16x4_t *)(v31[1] + v27));
        float32x2_t v32 = *(float32x2_t *)v29;
        v29 += 2;
        float32x4_t v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, _Q2, v32.f32[0]), _Q3, v32, 1);
        uint64_t v33 = v30 + 4;
        v30 += 2;
      }
      while (v33 <= v11);
    }
    if (v11)
    {
      _Q2 = vcvtq_f32_f16(*(float16x4_t *)(*(void *)(a10 + 8 * ((int)v11 - 1)) + v27));
      float32x4_t v28 = vaddq_f32(vmlaq_n_f32(v28, _Q2, *v29), (float32x4_t)0);
    }
    *(float16x4_t *)v10->i8 = vcvt_f16_f32(v28);
    int v10 = (float16x8_t *)((char *)v10 + 8);
    uint64_t v13 = j;
  }
  for (; (int)v13 < a8; ++v13)
  {
    _D1 = 0;
    float32x4_t v35 = (float32x2_t *)v12;
    if ((int)v11 >= 2)
    {
      uint64_t v36 = 0;
      _D1 = 0;
      float32x4_t v35 = (float32x2_t *)v12;
      do
      {
        uint64_t v37 = (void *)(a10 + 8 * v36);
        _Q2.i16[0] = *(_WORD *)(*v37 + 2 * v13);
        _Q3.i16[0] = *(_WORD *)(v37[1] + 2 * v13);
        __asm
        {
          FCVT            S2, H2
          FCVT            S3, H3
        }
        float32x2_t v42 = *v35++;
        _D1 = vmla_lane_f32(vmla_f32(_D1, *(float32x2_t *)_Q2.f32, v42), *(float32x2_t *)_Q3.f32, v42, 1);
        uint64_t v43 = v36 + 4;
        v36 += 2;
      }
      while (v43 <= v11);
    }
    if (v11)
    {
      _Q2.i16[0] = *(_WORD *)(*(void *)(a10 + 8 * ((int)v11 - 1)) + 2 * v13);
      __asm { FCVT            S2, H2 }
      _Q3.i32[0] = v35->i32[0];
      _D1.i32[0] = vadd_f32(vmla_f32(_D1, *(float32x2_t *)_Q2.f32, *(float32x2_t *)_Q3.f32), 0).u32[0];
    }
    __asm { FCVT            H1, S1 }
    v10->i16[0] = _H1;
    int v10 = (float16x8_t *)((char *)v10 + 2);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,4,(AlphaStyle)3>(uint64_t result, double a2, double a3, double a4, int32x4_t a5, double a6, int32x4_t a7, double a8, uint16x8_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  __int32 v17 = *(uint16x8_t **)a13;
  uint64_t v18 = *(void **)(a13 + 8);
  uint64_t v19 = *(int *)(result + 4);
  uint64_t v111 = (__int16 *)(result + 8);
  if (a12 >= 4)
  {
    uint64_t v21 = 0;
    unint64_t v107 = a12;
    uint64_t v22 = 4;
    v23.i64[0] = 0x200000002000;
    v23.i64[1] = 0x200000002000;
    a5.i32[0] = -2147450880;
    a5.i16[2] = 0x8000;
    a5.i16[3] = 0x8000;
    int v108 = a12;
    do
    {
      uint64_t v109 = v22;
      uint64_t v110 = v21;
      if ((int)v19 >= 2)
      {
        uint64_t v44 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        LODWORD(result) = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        __int32 v40 = 0;
        __int32 v41 = 0;
        __int32 v42 = 0;
        uint64_t v45 = (5 * v21) & 0xFFFFFFFC;
        uint64_t v43 = v111;
        do
        {
          uint64_t v46 = (void *)(a14 + 8 * v44);
          uint64_t v47 = (int32x4_t *)(*v46 + 4 * v45);
          uint64_t v48 = v46[1] + 4 * v45;
          int32x4_t v14 = *(int32x4_t *)(v48 + 16);
          unsigned int v49 = *(_DWORD *)v43;
          v43 += 2;
          int16x4_t v50 = vdup_n_s16(v49);
          int16x4_t v51 = vdup_n_s16(HIWORD(v49));
          int32x4_t v52 = vshlq_n_s32(vaddl_s16(v50, v51), 0xFuLL);
          v53.i64[0] = __PAIR64__(v25, v24);
          v53.i64[1] = __PAIR64__(v27, v26);
          v54.i64[0] = __PAIR64__(v29, v28);
          v54.i64[1] = __PAIR64__(result, v30);
          v55.i64[0] = __PAIR64__(v32, v31);
          v55.i64[1] = __PAIR64__(v34, v33);
          v56.i64[0] = __PAIR64__(v36, v35);
          v56.i64[1] = __PAIR64__(v38, v37);
          v57.i64[0] = __PAIR64__(v40, v39);
          v57.i64[1] = __PAIR64__(v42, v41);
          int32x4_t v58 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v53), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v47), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)v48), *(int8x8_t *)a5.i8), v51);
          __int32 v27 = v58.i32[3];
          __int32 v26 = v58.i32[2];
          __int32 v25 = v58.i32[1];
          int32x4_t v16 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v54), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47[1]), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v14), *(int8x8_t *)a5.i8), v51);
          uint64_t result = v16.u32[3];
          __int32 v30 = v16.i32[2];
          __int32 v29 = v16.i32[1];
          __int32 v24 = v58.i32[0];
          int32x4_t v59 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v55), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47[2]), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v48 + 32)), *(int8x8_t *)a5.i8), v51);
          __int32 v34 = v59.i32[3];
          __int32 v33 = v59.i32[2];
          __int32 v28 = v16.i32[0];
          __int32 v32 = v59.i32[1];
          int32x4_t v60 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v56), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47[3]), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v48 + 48)), *(int8x8_t *)a5.i8), v51);
          __int32 v38 = v60.i32[3];
          __int32 v31 = v59.i32[0];
          __int32 v37 = v60.i32[2];
          __int32 v36 = v60.i32[1];
          int32x4_t v15 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v57), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47[4]), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v48 + 64)), *(int8x8_t *)a5.i8), v51);
          __int32 v42 = v15.i32[3];
          __int32 v41 = v15.i32[2];
          __int32 v40 = v15.i32[1];
          __int32 v35 = v60.i32[0];
          __int32 v39 = v15.i32[0];
          uint64_t v61 = v44 + 4;
          v44 += 2;
        }
        while (v61 <= v19);
      }
      else
      {
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        uint64_t result = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        __int32 v40 = 0;
        __int32 v41 = 0;
        __int32 v42 = 0;
        uint64_t v43 = v111;
      }
      if (v19)
      {
        __int32 v62 = (int32x4_t *)(*(void *)(a14 + 8 * ((int)v19 - 1)) + 4 * ((5 * v110) & 0xFFFFFFFC));
        int16x4_t v63 = vld1_dup_s16(v43);
        v64.i64[0] = __PAIR64__(v40, v39);
        int32x4_t v15 = vshll_n_s16(v63, 0xFuLL);
        v64.i64[1] = __PAIR64__(v42, v41);
        v65.i64[0] = __PAIR64__(v36, v35);
        v65.i64[1] = __PAIR64__(v38, v37);
        v66.i64[0] = __PAIR64__(v32, v31);
        v66.i64[1] = __PAIR64__(v34, v33);
        v67.i64[0] = __PAIR64__(v29, v28);
        v67.i64[1] = __PAIR64__(result, v30);
        v68.i64[0] = __PAIR64__(v25, v24);
        v68.i64[1] = __PAIR64__(v27, v26);
        int32x4_t v69 = vmlal_s16(vaddq_s32(v15, v68), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v62), *(int8x8_t *)a5.i8), v63);
        __int32 v27 = v69.i32[3];
        __int32 v26 = v69.i32[2];
        __int32 v25 = v69.i32[1];
        int32x4_t v70 = vmlal_s16(vaddq_s32(v15, v67), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v62[1]), *(int8x8_t *)a5.i8), v63);
        uint64_t result = v70.u32[3];
        __int32 v24 = v69.i32[0];
        __int32 v30 = v70.i32[2];
        __int32 v29 = v70.i32[1];
        int32x4_t v16 = vmlal_s16(vaddq_s32(v15, v66), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v62[2]), *(int8x8_t *)a5.i8), v63);
        __int32 v34 = v16.i32[3];
        __int32 v33 = v16.i32[2];
        __int32 v32 = v16.i32[1];
        __int32 v28 = v70.i32[0];
        int32x4_t v71 = vmlal_s16(vaddq_s32(v15, v65), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v62[3]), *(int8x8_t *)a5.i8), v63);
        __int32 v38 = v71.i32[3];
        __int32 v37 = v71.i32[2];
        __int32 v31 = v16.i32[0];
        __int32 v36 = v71.i32[1];
        int32x4_t v72 = vmlal_s16(vaddq_s32(v15, v64), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v62[4]), *(int8x8_t *)a5.i8), v63);
        __int32 v42 = v72.i32[3];
        __int32 v35 = v71.i32[0];
        __int32 v41 = v72.i32[2];
        __int32 v40 = v72.i32[1];
        __int32 v39 = v72.i32[0];
      }
      v73.i64[0] = __PAIR64__(v25, v24);
      v73.i64[1] = __PAIR64__(v27, v26);
      uint64_t v21 = v110 + 4;
      __int32 v74 = v28;
      __int32 v75 = v29;
      int16x4_t v76 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v73, v23), 0xEuLL));
      a7.i64[1] = __PAIR64__(result, v30);
      int32x4_t v77 = vshrq_n_s32(vaddq_s32(a7, v23), 0xEuLL);
      a7.i16[0] = vqmovun_s32(v77).u16[0];
      v112.val[0] = (int8x16_t)vqmovun_high_s32(v76, v77);
      v77.i64[0] = __PAIR64__(v32, v31);
      v77.i64[1] = __PAIR64__(v34, v33);
      *(int16x4_t *)v77.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v77, v23), 0xEuLL));
      v78.i64[0] = __PAIR64__(v36, v35);
      v78.i64[1] = __PAIR64__(v38, v37);
      int32x4_t v79 = vshrq_n_s32(vaddq_s32(v78, v23), 0xEuLL);
      int16x4_t v80 = vqmovun_s32(v79);
      v112.val[1] = (int8x16_t)vqmovun_high_s32(*(int16x4_t *)v77.i8, v79);
      v79.i64[0] = __PAIR64__(v40, v39);
      v79.i64[1] = __PAIR64__(v42, v41);
      *(int16x4_t *)v14.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v79, v23), 0xEuLL));
      uint16x8_t v81 = (uint16x8_t)vqtbl2q_s8(v112, (int8x16_t)xmmword_1850CD6F0);
      v80.i16[3] = v14.i16[3];
      a7.i16[1] = v77.i16[1];
      a7.i32[1] = v80.i32[1];
      uint16x8_t v82 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&v14 - 1), (int8x16_t)xmmword_1850CD700);
      a9 = vpmaxq_u16(v81, v82);
      *(uint16x4_t *)a9.i8 = vpmax_u16(*(uint16x4_t *)a9.i8, (uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL));
      *(uint16x4_t *)a7.i8 = vmax_u16(*(uint16x4_t *)a7.i8, *(uint16x4_t *)a9.i8);
      uint16x8_t *v17 = v81;
      v17[1] = v82;
      v17 += 2;
      *v18++ = a7.i64[0];
      uint64_t v22 = v109 + 4;
      a12 = v108;
    }
    while (v109 + 4 <= v107);
    int v20 = v108 & 0x7FFFFFFC;
  }
  else
  {
    int v20 = 0;
  }
  if (v20 < a12)
  {
    v83.i64[0] = 0x200000002000;
    v83.i64[1] = 0x200000002000;
    do
    {
      if ((int)v19 >= 2)
      {
        uint64_t v89 = 0;
        __int32 v84 = 0;
        __int32 v85 = 0;
        __int32 v86 = 0;
        __int32 v87 = 0;
        LODWORD(result) = 0;
        uint64_t v88 = (unsigned int *)v111;
        uint64_t v90 = (5 * v20);
        do
        {
          uint64_t v91 = (void *)(a14 + 8 * v89);
          uint64_t v92 = *v91 + 4 * v90;
          int32x4_t v93 = *(int32x4_t *)v92;
          a5.i32[0] = *(_DWORD *)(v92 + 16);
          char v94 = (int32x4_t *)(v91[1] + 4 * v90);
          a7.i32[0] = v94[1].i32[0];
          unsigned int v95 = *v88++;
          int16x4_t v96 = vdup_n_s16(v95);
          a9.i32[0] = v95;
          int16x4_t v97 = vdup_n_s16(HIWORD(v95));
          v15.i32[0] = HIWORD(v95);
          *(int8x8_t *)a7.i8 = veor_s8((int8x8_t)vmovn_s32(a7), (int8x8_t)0x8000800080008000);
          v16.i32[0] = result;
          int32x4_t v98 = vaddq_s32(vshll_n_s16(*(int16x4_t *)a9.i8, 0xFuLL), v16);
          v16.i64[0] = __PAIR64__(v85, v84);
          v16.i64[1] = __PAIR64__(v87, v86);
          int32x4_t v99 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(vshll_n_s16(v96, 0xFuLL), v16), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v93), (int8x8_t)0x8000800080008000), v96), vshll_n_s16(v97, 0xFuLL)), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v94), (int8x8_t)0x8000800080008000), v97);
          __int32 v87 = v99.i32[3];
          __int32 v86 = v99.i32[2];
          __int32 v85 = v99.i32[1];
          __int32 v84 = v99.i32[0];
          a5 = vmlal_s16(vaddq_s32(vmlal_s16(v98, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(a5), (int8x8_t)0x8000800080008000), *(int16x4_t *)a9.i8), vshll_n_s16(*(int16x4_t *)v15.i8, 0xFuLL)), *(int16x4_t *)a7.i8, *(int16x4_t *)v15.i8);
          uint64_t result = a5.u32[0];
          uint64_t v100 = v89 + 4;
          v89 += 2;
        }
        while (v100 <= v19);
      }
      else
      {
        __int32 v84 = 0;
        __int32 v85 = 0;
        __int32 v86 = 0;
        __int32 v87 = 0;
        uint64_t result = 0;
        uint64_t v88 = (unsigned int *)v111;
      }
      if (v19)
      {
        uint64_t v101 = (int32x4_t *)(*(void *)(a14 + 8 * ((int)v19 - 1)) + 4 * (5 * v20));
        a5.i32[0] = v101[1].i32[0];
        unsigned int v102 = *(unsigned __int16 *)v88;
        int16x4_t v103 = vdup_n_s16(v102);
        a7.i32[0] = v102;
        *(int8x8_t *)a5.i8 = veor_s8((int8x8_t)vmovn_s32(a5), (int8x8_t)0x8000800080008000);
        a9.i64[0] = __PAIR64__(v85, v84);
        a9.i64[1] = __PAIR64__(v87, v86);
        int32x4_t v104 = vaddq_s32(vshll_n_s16(v103, 0xFuLL), (int32x4_t)a9);
        a9.i32[0] = result;
        int32x4_t v105 = vmlal_s16(v104, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v101), (int8x8_t)0x8000800080008000), v103);
        __int32 v87 = v105.i32[3];
        __int32 v86 = v105.i32[2];
        __int32 v85 = v105.i32[1];
        __int32 v84 = v105.i32[0];
        uint64_t result = vmlal_s16(vaddq_s32(vshll_n_s16(*(int16x4_t *)a7.i8, 0xFuLL), (int32x4_t)a9), *(int16x4_t *)a5.i8, *(int16x4_t *)a7.i8).u32[0];
      }
      v106.i64[0] = __PAIR64__(v85, v84);
      v106.i64[1] = __PAIR64__(v87, v86);
      *(int16x4_t *)v106.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v106, v83), 0xEuLL));
      a5.i32[0] = result;
      a5 = vshrq_n_s32(vaddq_s32(a5, v83), 0xEuLL);
      *(int16x4_t *)a5.i8 = vqmovun_s32(a5);
      v17->i64[0] = v106.i64[0];
      __int32 v17 = (uint16x8_t *)((char *)v17 + 8);
      *(_WORD *)uint64_t v18 = vmax_u16(*(uint16x4_t *)a5.i8, vpmax_u16(vpmax_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v83.i8), *(uint16x4_t *)v83.i8)).u16[0];
      uint64_t v18 = (void *)((char *)v18 + 2);
      ++v20;
    }
    while (v20 < a12);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,3,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, int16x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = a5[1];
  uint64_t v8 = *(int *)(result + 4);
  signed int v9 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    int v11 = 0;
    unint64_t v12 = 2;
    v13.i64[0] = 0x200000002000;
    v13.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = 0uLL;
      int32x4_t v16 = v9;
      if ((int)v8 >= 2)
      {
        uint64_t result = 0;
        uint64_t v17 = (4 * v11) & 0xFFFFFFF8;
        int32x4_t v16 = v9;
        do
        {
          uint64_t v18 = (void *)(a6 + 8 * result);
          uint64_t v19 = (int32x4_t *)(*v18 + 4 * v17);
          int v20 = (int32x4_t *)(v18[1] + 4 * v17);
          unsigned int v21 = *(_DWORD *)v16;
          v16 += 2;
          int16x4_t v22 = vdup_n_s16(v21);
          int32x4_t v23 = vshll_n_s16(v22, 0xFuLL);
          int16x4_t v24 = vdup_n_s16(HIWORD(v21));
          int32x4_t v25 = vshll_n_s16(v24, 0xFuLL);
          int32x4_t v15 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v20[1]), (int8x8_t)0x8000800080008000), v24), v25);
          int32x4_t v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v20), (int8x8_t)0x8000800080008000), v24), v25);
          uint64_t v26 = result + 4;
          result += 2;
        }
        while (v26 <= v8);
      }
      if (v8)
      {
        uint64_t result = (4 * v11) & 0xFFFFFFF8;
        __int32 v27 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 4 * result);
        int16x4_t v28 = vld1_dup_s16(v16);
        int32x4_t v29 = vshll_n_s16(v28, 0xFuLL);
        int32x4_t v15 = vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v27[1]), (int8x8_t)0x8000800080008000), v28), v29);
        int32x4_t v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v27), (int8x8_t)0x8000800080008000), v28), v29);
      }
      v11 += 2;
      int16x4_t v30 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v14, v13), 0xEuLL));
      int16x4_t v31 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v15, v13), 0xEuLL));
      uint16x4_t v32 = vpmax_u16((uint16x4_t)v30, (uint16x4_t)v31);
      uint16x4_t v33 = (uint16x4_t)vuzp2_s16(vuzp2_s16(v30, v31), v30);
      v30.i16[3] = v31.i16[0];
      *uint64_t v6 = v30;
      v6[1].i32[0] = vext_s8((int8x8_t)v31, *(int8x8_t *)v13.i8, 2uLL).u32[0];
      uint64_t v6 = (int16x4_t *)((char *)v6 + 12);
      v7->i32[0] = vmax_u16(v33, vpmax_u16(v32, *(uint16x4_t *)v13.i8)).u32[0];
      uint64_t v7 = (int16x4_t *)((char *)v7 + 4);
      v12 += 2;
    }
    while (v12 <= a4);
    signed int v10 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v10 = 0;
  }
  if (v10 < a4)
  {
    v34.i64[0] = 0x200000002000;
    v34.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v35 = 0uLL;
      __int32 v36 = v9;
      if ((int)v8 >= 2)
      {
        uint64_t v37 = 0;
        uint64_t v38 = (4 * v10);
        __int32 v36 = v9;
        do
        {
          uint64_t result = 4 * v38;
          unsigned int v39 = *(_DWORD *)v36;
          v36 += 2;
          int16x4_t v40 = vdup_n_s16(v39);
          int16x4_t v41 = vdup_n_s16(HIWORD(v39));
          int32x4_t v35 = vaddq_s32(vmlal_s16(vmlal_s16(v35, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * v37) + 4 * v38)), (int8x8_t)0x8000800080008000), v40), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * v37 + 8) + 4 * v38)), (int8x8_t)0x8000800080008000), v41), vaddq_s32(vshll_n_s16(v40, 0xFuLL), vshll_n_s16(v41, 0xFuLL)));
          uint64_t v42 = v37 + 4;
          v37 += 2;
        }
        while (v42 <= v8);
      }
      if (v8)
      {
        int16x4_t v43 = vld1_dup_s16(v36);
        int32x4_t v35 = vaddq_s32(vmlal_s16(v35, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * ((int)v8 - 1))+ 4 * (4 * v10))), (int8x8_t)0x8000800080008000), v43), vshll_n_s16(v43, 0xFuLL));
      }
      int16x4_t v44 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v35, v34), 0xEuLL));
      v6->i32[0] = v44.i32[0];
      v6->i16[2] = v44.i16[2];
      uint64_t v6 = (int16x4_t *)((char *)v6 + 6);
      v7->i16[0] = vmax_u16((uint16x4_t)vdup_lane_s16(v44, 3), vpmax_u16(vpmax_u16((uint16x4_t)v44, *(uint16x4_t *)v34.i8), *(uint16x4_t *)v34.i8)).u16[0];
      uint64_t v7 = (int16x4_t *)((char *)v7 + 2);
      ++v10;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,1,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x4_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = a5[1];
  uint64_t v8 = *(int *)(result + 4);
  signed int v9 = (__int16 *)(result + 8);
  if (a4 >= 4)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 4;
    v13.i64[0] = 0x200000002000;
    v13.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = 0uLL;
      int32x4_t v16 = v9;
      if ((int)v8 >= 2)
      {
        uint64_t result = 0;
        int32x4_t v16 = v9;
        do
        {
          uint64_t v17 = (void *)(a6 + 8 * result);
          uint64_t v18 = (int32x4_t *)(*v17 + 8 * v11);
          uint64_t v19 = (int32x4_t *)(v17[1] + 8 * v11);
          unsigned int v20 = *(_DWORD *)v16;
          v16 += 2;
          int16x4_t v21 = vdup_n_s16(v20);
          int32x4_t v22 = vshll_n_s16(v21, 0xFuLL);
          int16x4_t v23 = vdup_n_s16(HIWORD(v20));
          int32x4_t v24 = vshll_n_s16(v23, 0xFuLL);
          int32x4_t v15 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v18[1]), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v23), v24);
          int32x4_t v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v18), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v23), v24);
          uint64_t v25 = result + 4;
          result += 2;
        }
        while (v25 <= v8);
      }
      if (v8)
      {
        uint64_t v26 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 8 * v11);
        int16x4_t v27 = vld1_dup_s16(v16);
        int32x4_t v28 = vshll_n_s16(v27, 0xFuLL);
        int32x4_t v15 = vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v26[1]), (int8x8_t)0x8000800080008000), v27), v28);
        int32x4_t v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v26), (int8x8_t)0x8000800080008000), v27), v28);
      }
      v11 += 4;
      int16x4_t v29 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v14, v13), 0xEuLL));
      int16x4_t v30 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v15, v13), 0xEuLL));
      uint16x4_t v31 = (uint16x4_t)vuzp1_s16(v29, v30);
      *v6++ = v31;
      *v7++ = vmax_u16((uint16x4_t)vuzp2_s16(v29, v30), v31);
      v12 += 4;
    }
    while (v12 <= a4);
    int v10 = a4 & 0x7FFFFFFC;
  }
  else
  {
    int v10 = 0;
  }
  for (; v10 < a4; ++v10)
  {
    if ((int)v8 >= 2)
    {
      uint64_t v34 = 0;
      uint64_t v35 = (2 * v10);
      int32x4_t v32 = 0uLL;
      uint16x4_t v33 = (unsigned int *)v9;
      do
      {
        uint64_t result = 4 * v35;
        unsigned int v36 = *v33++;
        int32x4_t v32 = vmlal_s16(vmlal_s16(v32, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(void *)(a6 + 8 * v34) + 4 * v35), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v36)), vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(void *)(a6 + 8 * v34 + 8) + 4 * v35), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(HIWORD(v36)));
        *(int32x2_t *)v32.i8 = vadd_s32(*(int32x2_t *)v32.i8, vadd_s32(vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v36), 0x10uLL), 0x10uLL), 0xFuLL), vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(HIWORD(v36)), 0x10uLL), 0x10uLL), 0xFuLL)));
        uint64_t v37 = v34 + 4;
        v34 += 2;
      }
      while (v37 <= v8);
    }
    else
    {
      int32x4_t v32 = 0uLL;
      uint16x4_t v33 = (unsigned int *)v9;
    }
    if (v8)
    {
      unsigned int v38 = *(unsigned __int16 *)v33;
      int32x4_t v32 = vmlal_s16(v32, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 4 * (2 * v10)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v38));
      *(int32x2_t *)v32.i8 = vadd_s32(*(int32x2_t *)v32.i8, vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v38), 0x10uLL), 0x10uLL), 0xFuLL));
    }
    *(int32x2_t *)v32.i8 = vadd_s32(*(int32x2_t *)v32.i8, (int32x2_t)0x200000002000);
    int16x4_t v39 = vqmovun_s32(vshrq_n_s32(v32, 0xEuLL));
    v6->i16[0] = v39.i16[0];
    uint64_t v6 = (uint16x4_t *)((char *)v6 + 2);
    v7->i16[0] = vmax_u16((uint16x4_t)vdup_lane_s16(v39, 1), (uint16x4_t)v39).u16[0];
    uint64_t v7 = (uint16x4_t *)((char *)v7 + 2);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,5,(AlphaStyle)2>(uint64_t result, double a2, double a3, double a4, double a5, int32x4_t a6, double a7, int32x4_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t *a12, uint64_t a13)
{
  uint64_t v17 = *a12;
  uint64_t v18 = *(int *)(result + 4);
  uint64_t v120 = (__int16 *)(result + 8);
  if (a11 >= 4)
  {
    uint64_t v20 = 0;
    unint64_t v117 = a11;
    unint64_t v21 = 4;
    v22.i64[0] = 0x200000002000;
    v22.i64[1] = 0x200000002000;
    int v118 = a11;
    do
    {
      uint64_t v119 = v20;
      if ((int)v18 >= 2)
      {
        uint64_t v43 = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        LODWORD(result) = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        __int32 v40 = 0;
        __int32 v41 = 0;
        uint64_t v44 = (5 * v20) & 0xFFFFFFFC;
        uint64_t v42 = v120;
        do
        {
          uint64_t v45 = (void *)(a13 + 8 * v43);
          uint64_t v46 = (int32x4_t *)(*v45 + 4 * v44);
          int32x4_t v47 = *v46;
          int32x4_t v48 = v46[1];
          int32x4_t v49 = v46[2];
          int32x4_t v50 = v46[3];
          int32x4_t v51 = v46[4];
          int32x4_t v52 = (int32x4_t *)(v45[1] + 4 * v44);
          int8x8_t v53 = (int8x8_t)vmovn_s32(v51);
          unsigned int v54 = *(_DWORD *)v42;
          v42 += 2;
          int16x4_t v55 = (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47), (int8x8_t)0x8000800080008000);
          *(int16x4_t *)v51.i8 = vdup_n_s16(v54);
          *(int16x4_t *)v47.i8 = vdup_n_s16(HIWORD(v54));
          int32x4_t v56 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v47.i8), 0xFuLL);
          v57.i64[0] = __PAIR64__(v24, v23);
          v57.i64[1] = __PAIR64__(v26, v25);
          v58.i64[0] = __PAIR64__(v28, v27);
          v58.i64[1] = __PAIR64__(v30, v29);
          v59.i64[0] = __PAIR64__(v32, v31);
          v59.i64[1] = __PAIR64__(result, v33);
          v60.i64[0] = __PAIR64__(v35, v34);
          v60.i64[1] = __PAIR64__(v37, v36);
          v61.i64[0] = __PAIR64__(v39, v38);
          v61.i64[1] = __PAIR64__(v41, v40);
          int32x4_t v62 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v57), v55, *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v52), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          __int32 v26 = v62.i32[3];
          __int32 v25 = v62.i32[2];
          __int32 v24 = v62.i32[1];
          int32x4_t v63 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v58), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v48), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[1]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          __int32 v30 = v63.i32[3];
          __int32 v29 = v63.i32[2];
          __int32 v28 = v63.i32[1];
          __int32 v23 = v62.i32[0];
          int32x4_t v64 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v59), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[2]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          uint64_t result = v64.u32[3];
          __int32 v33 = v64.i32[2];
          __int32 v27 = v63.i32[0];
          __int32 v32 = v64.i32[1];
          int32x4_t v65 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v60), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v50), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[3]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          __int32 v37 = v65.i32[3];
          __int32 v31 = v64.i32[0];
          __int32 v36 = v65.i32[2];
          __int32 v35 = v65.i32[1];
          int32x4_t v66 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v61), (int16x4_t)veor_s8(v53, (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[4]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          __int32 v41 = v66.i32[3];
          __int32 v40 = v66.i32[2];
          __int32 v39 = v66.i32[1];
          __int32 v34 = v65.i32[0];
          __int32 v38 = v66.i32[0];
          uint64_t v67 = v43 + 4;
          v43 += 2;
        }
        while (v67 <= v18);
      }
      else
      {
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        uint64_t result = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        __int32 v40 = 0;
        __int32 v41 = 0;
        uint64_t v42 = v120;
      }
      if (v18)
      {
        int32x4_t v68 = (int32x4_t *)(*(void *)(a13 + 8 * ((int)v18 - 1)) + 4 * ((5 * v119) & 0xFFFFFFFC));
        int16x4_t v69 = vld1_dup_s16(v42);
        v70.i64[0] = __PAIR64__(v39, v38);
        int32x4_t v71 = vshll_n_s16(v69, 0xFuLL);
        v70.i64[1] = __PAIR64__(v41, v40);
        v72.i64[0] = __PAIR64__(v35, v34);
        v72.i64[1] = __PAIR64__(v37, v36);
        v73.i64[0] = __PAIR64__(v32, v31);
        v73.i64[1] = __PAIR64__(result, v33);
        v74.i64[0] = __PAIR64__(v28, v27);
        v74.i64[1] = __PAIR64__(v30, v29);
        v75.i64[0] = __PAIR64__(v24, v23);
        v75.i64[1] = __PAIR64__(v26, v25);
        int32x4_t v76 = vmlal_s16(vaddq_s32(v71, v75), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v68), (int8x8_t)0x8000800080008000), v69);
        __int32 v26 = v76.i32[3];
        __int32 v25 = v76.i32[2];
        __int32 v24 = v76.i32[1];
        int32x4_t v77 = vmlal_s16(vaddq_s32(v71, v74), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[1]), (int8x8_t)0x8000800080008000), v69);
        __int32 v30 = v77.i32[3];
        __int32 v23 = v76.i32[0];
        __int32 v29 = v77.i32[2];
        __int32 v28 = v77.i32[1];
        int32x4_t v78 = vmlal_s16(vaddq_s32(v71, v73), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[2]), (int8x8_t)0x8000800080008000), v69);
        uint64_t result = v78.u32[3];
        __int32 v33 = v78.i32[2];
        __int32 v32 = v78.i32[1];
        __int32 v27 = v77.i32[0];
        int32x4_t v79 = vmlal_s16(vaddq_s32(v71, v72), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[3]), (int8x8_t)0x8000800080008000), v69);
        __int32 v37 = v79.i32[3];
        __int32 v36 = v79.i32[2];
        __int32 v31 = v78.i32[0];
        __int32 v35 = v79.i32[1];
        int32x4_t v80 = vmlal_s16(vaddq_s32(v71, v70), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[4]), (int8x8_t)0x8000800080008000), v69);
        __int32 v41 = v80.i32[3];
        __int32 v34 = v79.i32[0];
        __int32 v40 = v80.i32[2];
        __int32 v39 = v80.i32[1];
        __int32 v38 = v80.i32[0];
      }
      v81.i64[0] = __PAIR64__(v24, v23);
      v81.i64[1] = __PAIR64__(v26, v25);
      a6 = vshrq_n_s32(vaddq_s32(v81, v22), 0xEuLL);
      *(int16x4_t *)a6.i8 = vqmovun_s32(a6);
      v82.i64[0] = __PAIR64__(v28, v27);
      v82.i64[1] = __PAIR64__(v30, v29);
      int32x4_t v83 = vshrq_n_s32(vaddq_s32(v82, v22), 0xEuLL);
      int16x4_t v84 = vqmovun_s32(v83);
      uint16x8_t v85 = (uint16x8_t)vqmovun_high_s32(*(int16x4_t *)a6.i8, v83);
      v83.i64[0] = __PAIR64__(v32, v31);
      v83.i64[1] = __PAIR64__(result, v33);
      *(int16x4_t *)v83.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v83, v22), 0xEuLL));
      v86.i64[0] = __PAIR64__(v35, v34);
      v86.i64[1] = __PAIR64__(v37, v36);
      int32x4_t v13 = vshrq_n_s32(vaddq_s32(v86, v22), 0xEuLL);
      *(int16x4_t *)v14.i8 = vqmovun_s32(v13);
      v87.i64[0] = __PAIR64__(v39, v38);
      v87.i64[1] = __PAIR64__(v41, v40);
      int16x4_t v88 = *(int16x4_t *)v83.i8;
      *(int16x4_t *)v87.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v87, v22), 0xEuLL));
      v89.i32[0] = vext_s8(*(int8x8_t *)a6.i8, *(int8x8_t *)v83.i8, 6uLL).u32[0];
      v90.i32[0] = vext_s8((int8x8_t)vzip2_s16(v84, *(int16x4_t *)a6.i8), *(int8x8_t *)a6.i8, 2uLL).u32[0];
      v15.i32[0] = vtrn2_s16(*(int16x4_t *)a6.i8, vzip2_s16(*(int16x4_t *)a6.i8, v84)).u32[0];
      a6.i16[1] = v84.i16[1];
      v84.i16[1] = v83.i16[1];
      int8x8_t v91 = vext_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)v14.i8, 4uLL);
      *(int8x8_t *)v16.i8 = vext_s8(*(int8x8_t *)v83.i8, *(int8x8_t *)v87.i8, 2uLL);
      v83.i16[3] = v14.i16[3];
      int8x8_t v92 = vext_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)v14.i8, 2uLL);
      v14.i16[3] = v87.i16[3];
      v84.i32[1] = v14.i32[1];
      uint16x8_t v93 = (uint16x8_t)vqmovun_high_s32(v88, v13);
      v89.i32[1] = vext_s8(v91, v91, 2uLL).i32[1];
      uint64_t v20 = v119 + 4;
      *(int8x8_t *)v13.i8 = vext_s8(v92, v92, 2uLL);
      v90.i32[1] = v13.i32[1];
      v15.i32[1] = v16.i32[1];
      a6.i32[1] = v83.i32[1];
      *(uint16x4_t *)a6.i8 = vmax_u16(vmax_u16(vmax_u16(vmax_u16((uint16x4_t)v84, v89), v90), (uint16x4_t)v15), *(uint16x4_t *)a6.i8);
      a8 = (int32x4_t)vmaxq_u16(v93, (uint16x8_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_1850CD710));
      v83.i64[0] = 0;
      v83.i16[3] = a6.i16[3];
      *(uint16x8_t *)uint64_t v17 = vmaxq_u16(v85, (uint16x8_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_1850CD720));
      *(int32x4_t *)(v17 + 16) = a8;
      *(uint16x4_t *)a6.i8 = vmax_u16(*(uint16x4_t *)v87.i8, *(uint16x4_t *)v83.i8);
      *(void *)(v17 + 32) = a6.i64[0];
      v17 += 40;
      v21 += 4;
      a11 = v118;
    }
    while (v21 <= v117);
    int v19 = v118 & 0x7FFFFFFC;
  }
  else
  {
    int v19 = 0;
  }
  if (v19 < a11)
  {
    v94.i64[0] = 0x200000002000;
    v94.i64[1] = 0x200000002000;
    do
    {
      if ((int)v18 >= 2)
      {
        uint64_t v100 = 0;
        __int32 v95 = 0;
        __int32 v96 = 0;
        __int32 v97 = 0;
        __int32 v98 = 0;
        LODWORD(result) = 0;
        int32x4_t v99 = (unsigned int *)v120;
        uint64_t v101 = (5 * v19);
        do
        {
          unsigned int v102 = (void *)(a13 + 8 * v100);
          int16x4_t v103 = (int32x4_t *)(*v102 + 4 * v101);
          a8.i32[0] = v103[1].i32[0];
          int32x4_t v104 = (int32x4_t *)(v102[1] + 4 * v101);
          v13.i32[0] = v104[1].i32[0];
          unsigned int v105 = *v99++;
          int16x4_t v106 = vdup_n_s16(v105);
          v14.i32[0] = v105;
          int16x4_t v107 = vdup_n_s16(HIWORD(v105));
          v15.i32[0] = HIWORD(v105);
          *(int8x8_t *)v13.i8 = veor_s8((int8x8_t)vmovn_s32(v13), (int8x8_t)0x8000800080008000);
          v16.i32[0] = result;
          int32x4_t v108 = vaddq_s32(vshll_n_s16(*(int16x4_t *)v14.i8, 0xFuLL), v16);
          v16.i64[0] = __PAIR64__(v96, v95);
          v16.i64[1] = __PAIR64__(v98, v97);
          int32x4_t v109 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(vshll_n_s16(v106, 0xFuLL), v16), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v103), (int8x8_t)0x8000800080008000), v106), vshll_n_s16(v107, 0xFuLL)), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v104), (int8x8_t)0x8000800080008000), v107);
          __int32 v98 = v109.i32[3];
          __int32 v97 = v109.i32[2];
          __int32 v96 = v109.i32[1];
          __int32 v95 = v109.i32[0];
          a8 = vmlal_s16(vaddq_s32(vmlal_s16(v108, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(a8), (int8x8_t)0x8000800080008000), *(int16x4_t *)v14.i8), vshll_n_s16(v15, 0xFuLL)), *(int16x4_t *)v13.i8, v15);
          uint64_t result = a8.u32[0];
          uint64_t v110 = v100 + 4;
          v100 += 2;
        }
        while (v110 <= v18);
      }
      else
      {
        __int32 v95 = 0;
        __int32 v96 = 0;
        __int32 v97 = 0;
        __int32 v98 = 0;
        uint64_t result = 0;
        int32x4_t v99 = (unsigned int *)v120;
      }
      if (v18)
      {
        uint64_t v111 = (int32x4_t *)(*(void *)(a13 + 8 * ((int)v18 - 1)) + 4 * (5 * v19));
        a8.i32[0] = v111[1].i32[0];
        int16x4_t v112 = vdup_n_s16(*(unsigned __int16 *)v99);
        v13.i32[0] = *(unsigned __int16 *)v99;
        *(int8x8_t *)a8.i8 = veor_s8((int8x8_t)vmovn_s32(a8), (int8x8_t)0x8000800080008000);
        v14.i64[0] = __PAIR64__(v96, v95);
        v14.i64[1] = __PAIR64__(v98, v97);
        int32x4_t v113 = vaddq_s32(vshll_n_s16(v112, 0xFuLL), v14);
        v14.i32[0] = result;
        int32x4_t v114 = vmlal_s16(v113, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v111), (int8x8_t)0x8000800080008000), v112);
        __int32 v98 = v114.i32[3];
        __int32 v97 = v114.i32[2];
        __int32 v96 = v114.i32[1];
        __int32 v95 = v114.i32[0];
        uint64_t result = vmlal_s16(vaddq_s32(vshll_n_s16(*(int16x4_t *)v13.i8, 0xFuLL), v14), *(int16x4_t *)a8.i8, *(int16x4_t *)v13.i8).u32[0];
      }
      v115.i64[0] = __PAIR64__(v96, v95);
      v115.i64[1] = __PAIR64__(v98, v97);
      *(int16x4_t *)v115.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v115, v94), 0xEuLL));
      a8.i32[0] = result;
      a8 = vshrq_n_s32(vaddq_s32(a8, v94), 0xEuLL);
      int16x8_t v116 = vqmovun_high_s32(*(int16x4_t *)v115.i8, a8);
      a6 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&a6 - 1), (int8x16_t)xmmword_1850CD730);
      *(void *)uint64_t v17 = v115.i64[0];
      *(_WORD *)(v17 + 8) = vmaxvq_u16((uint16x8_t)a6);
      v17 += 10;
      ++v19;
    }
    while (v19 < a11);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,4,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    unint64_t v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int16x4_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = (4 * v10) & 0xFFFFFFF8;
        int16x4_t v15 = v8;
        do
        {
          uint64_t v18 = (void *)(a6 + 8 * v16);
          int v19 = (int32x4_t *)(*v18 + 4 * v17);
          uint64_t v20 = (int32x4_t *)(v18[1] + 4 * v17);
          unsigned int v21 = *(_DWORD *)v15;
          v15 += 2;
          int16x4_t v22 = vdup_n_s16(v21);
          int32x4_t v23 = vshll_n_s16(v22, 0xFuLL);
          int16x4_t v24 = vdup_n_s16(HIWORD(v21));
          int32x4_t v25 = vshll_n_s16(v24, 0xFuLL);
          int32x4_t v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v20[1]), (int8x8_t)0x8000800080008000), v24), v25);
          int32x4_t v13 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v20), (int8x8_t)0x8000800080008000), v24), v25);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        __int32 v26 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        int16x4_t v27 = vld1_dup_s16(v15);
        int32x4_t v28 = vshll_n_s16(v27, 0xFuLL);
        int32x4_t v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v26[1]), (int8x8_t)0x8000800080008000), v27), v28);
        int32x4_t v13 = vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v26), (int8x8_t)0x8000800080008000), v27), v28);
      }
      v10 += 2;
      int16x4_t v29 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL));
      int32x4_t v30 = vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL);
      int16x4_t v31 = vqmovun_s32(v30);
      uint16x4_t v32 = (uint16x4_t)vuzp1_s16(v29, v31);
      uint16x4_t v33 = (uint16x4_t)vuzp2_s16(v29, v31);
      uint16x8_t v34 = (uint16x8_t)vqmovun_high_s32(v29, v30);
      *(uint16x4_t *)v30.i8 = vmax_u16(v32, v33);
      *(uint16x4_t *)v30.i8 = vmax_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v12.i8), (uint16x4_t)vuzp2_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v12.i8));
      *v6++ = vmaxq_u16(v34, (uint16x8_t)vqtbl1q_s8((int8x16_t)v30, (int8x16_t)xmmword_1850CD740));
      v11 += 2;
    }
    while (v11 <= a4);
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  if (v9 < a4)
  {
    v35.i64[0] = 0x200000002000;
    v35.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v36 = 0uLL;
      __int32 v37 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v38 = 0;
        __int32 v37 = v8;
        do
        {
          __int32 v39 = (uint64_t *)(a6 + 8 * v38);
          uint64_t result = *v39;
          unsigned int v40 = *(_DWORD *)v37;
          v37 += 2;
          int16x4_t v41 = vdup_n_s16(v40);
          int16x4_t v42 = vdup_n_s16(HIWORD(v40));
          int32x4_t v36 = vaddq_s32(vmlal_s16(vmlal_s16(v36, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*v39 + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v41), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v39[1] + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v42), vaddq_s32(vshll_n_s16(v41, 0xFuLL), vshll_n_s16(v42, 0xFuLL)));
          uint64_t v43 = v38 + 4;
          v38 += 2;
        }
        while (v43 <= v7);
      }
      if (v7)
      {
        int16x4_t v44 = vld1_dup_s16(v37);
        int32x4_t v36 = vaddq_s32(vmlal_s16(v36, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1))+ 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v44), vshll_n_s16(v44, 0xFuLL));
      }
      uint16x4_t v45 = (uint16x4_t)vqmovun_s32(vshrq_n_s32(vaddq_s32(v36, v35), 0xEuLL));
      v45.i16[3] = vmaxv_u16(v45);
      *(uint16x4_t *)v6->i8 = v45;
      uint64_t v6 = (uint16x8_t *)((char *)v6 + 8);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,2,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (__int16 *)(result + 8);
  if (a4 >= 4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 4;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int16x4_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        int16x4_t v15 = v8;
        do
        {
          uint64_t v17 = (void *)(a6 + 8 * v16);
          uint64_t v18 = (int32x4_t *)(*v17 + 8 * v10);
          int v19 = (int32x4_t *)(v17[1] + 8 * v10);
          unsigned int v20 = *(_DWORD *)v15;
          v15 += 2;
          int16x4_t v21 = vdup_n_s16(v20);
          int32x4_t v22 = vshll_n_s16(v21, 0xFuLL);
          int16x4_t v23 = vdup_n_s16(HIWORD(v20));
          int32x4_t v24 = vshll_n_s16(v23, 0xFuLL);
          int32x4_t v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v18[1]), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v23), v24);
          int32x4_t v13 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v18), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v23), v24);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        int32x4_t v25 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        int16x4_t v26 = vld1_dup_s16(v15);
        int32x4_t v27 = vshll_n_s16(v26, 0xFuLL);
        int32x4_t v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v25[1]), (int8x8_t)0x8000800080008000), v26), v27);
        int32x4_t v13 = vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v25), (int8x8_t)0x8000800080008000), v26), v27);
      }
      v10 += 4;
      int16x4_t v28 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL));
      int32x4_t v29 = vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL);
      int16x4_t v30 = vqmovun_s32(v29);
      uint16x4_t v31 = (uint16x4_t)vuzp1_s16(v28, v30);
      uint16x4_t v32 = (uint16x4_t)vuzp2_s16(v28, v30);
      uint16x8_t v33 = (uint16x8_t)vqmovun_high_s32(v28, v29);
      *(uint16x4_t *)v29.i8 = vmax_u16(v31, v32);
      *v6++ = vmaxq_u16(v33, (uint16x8_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_1850CD750));
      v11 += 4;
    }
    while (v11 <= a4);
    int v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    if ((int)v7 >= 2)
    {
      uint64_t v36 = 0;
      int32x4_t v34 = 0uLL;
      int32x4_t v35 = (unsigned int *)v8;
      do
      {
        __int32 v37 = (uint64_t *)(a6 + 8 * v36);
        uint64_t result = *v37;
        unsigned int v38 = *v35++;
        int32x4_t v34 = vmlal_s16(vmlal_s16(v34, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*v37 + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v38)), vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(v37[1] + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(HIWORD(v38)));
        *(int32x2_t *)v34.i8 = vadd_s32(*(int32x2_t *)v34.i8, vadd_s32(vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v38), 0x10uLL), 0x10uLL), 0xFuLL), vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(HIWORD(v38)), 0x10uLL), 0x10uLL), 0xFuLL)));
        uint64_t v39 = v36 + 4;
        v36 += 2;
      }
      while (v39 <= v7);
    }
    else
    {
      int32x4_t v34 = 0uLL;
      int32x4_t v35 = (unsigned int *)v8;
    }
    if (v7)
    {
      unsigned int v40 = *(unsigned __int16 *)v35;
      int32x4_t v34 = vmlal_s16(v34, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v40));
      *(int32x2_t *)v34.i8 = vadd_s32(*(int32x2_t *)v34.i8, vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v40), 0x10uLL), 0x10uLL), 0xFuLL));
    }
    *(int32x2_t *)v34.i8 = vadd_s32(*(int32x2_t *)v34.i8, (int32x2_t)0x200000002000);
    uint16x4_t v41 = (uint16x4_t)vqmovun_s32(vshrq_n_s32(v34, 0xEuLL));
    v6->i16[0] = v41.i16[0];
    v6->i16[1] = vmaxv_u16(v41);
    uint64_t v6 = (uint16x8_t *)((char *)v6 + 4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,5,(AlphaStyle)1>(uint64_t result, double a2, double a3, double a4, double a5, uint16x8_t a6, double a7, int32x4_t a8, uint64_t a9, uint64_t a10, int a11, uint16x8_t **a12, uint64_t a13)
{
  uint64_t v17 = *a12;
  uint64_t v18 = *(int *)(result + 4);
  uint64_t v120 = (__int16 *)(result + 8);
  if (a11 >= 4)
  {
    uint64_t v20 = 0;
    unint64_t v117 = a11;
    unint64_t v21 = 4;
    v22.i64[0] = 0x200000002000;
    v22.i64[1] = 0x200000002000;
    int v118 = a11;
    do
    {
      uint64_t v119 = v20;
      if ((int)v18 >= 2)
      {
        uint64_t v43 = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        LODWORD(result) = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        __int32 v40 = 0;
        __int32 v41 = 0;
        uint64_t v44 = (5 * v20) & 0xFFFFFFFC;
        int16x4_t v42 = v120;
        do
        {
          uint16x4_t v45 = (void *)(a13 + 8 * v43);
          uint64_t v46 = (int32x4_t *)(*v45 + 4 * v44);
          int32x4_t v47 = *v46;
          int32x4_t v48 = v46[1];
          int32x4_t v49 = v46[2];
          int32x4_t v50 = v46[3];
          int32x4_t v51 = v46[4];
          int32x4_t v52 = (int32x4_t *)(v45[1] + 4 * v44);
          int8x8_t v53 = (int8x8_t)vmovn_s32(v51);
          unsigned int v54 = *(_DWORD *)v42;
          v42 += 2;
          int16x4_t v55 = (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47), (int8x8_t)0x8000800080008000);
          *(int16x4_t *)v51.i8 = vdup_n_s16(v54);
          *(int16x4_t *)v47.i8 = vdup_n_s16(HIWORD(v54));
          int32x4_t v56 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v47.i8), 0xFuLL);
          v57.i64[0] = __PAIR64__(v24, v23);
          v57.i64[1] = __PAIR64__(v26, v25);
          v58.i64[0] = __PAIR64__(v28, v27);
          v58.i64[1] = __PAIR64__(v30, v29);
          v59.i64[0] = __PAIR64__(v32, v31);
          v59.i64[1] = __PAIR64__(result, v33);
          v60.i64[0] = __PAIR64__(v35, v34);
          v60.i64[1] = __PAIR64__(v37, v36);
          v61.i64[0] = __PAIR64__(v39, v38);
          v61.i64[1] = __PAIR64__(v41, v40);
          int32x4_t v62 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v57), v55, *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v52), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          __int32 v26 = v62.i32[3];
          __int32 v25 = v62.i32[2];
          __int32 v24 = v62.i32[1];
          int32x4_t v63 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v58), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v48), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[1]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          __int32 v30 = v63.i32[3];
          __int32 v29 = v63.i32[2];
          __int32 v28 = v63.i32[1];
          __int32 v23 = v62.i32[0];
          int32x4_t v64 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v59), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[2]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          uint64_t result = v64.u32[3];
          __int32 v33 = v64.i32[2];
          __int32 v27 = v63.i32[0];
          __int32 v32 = v64.i32[1];
          int32x4_t v65 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v60), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v50), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[3]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          __int32 v37 = v65.i32[3];
          __int32 v31 = v64.i32[0];
          __int32 v36 = v65.i32[2];
          __int32 v35 = v65.i32[1];
          int32x4_t v66 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v61), (int16x4_t)veor_s8(v53, (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[4]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          __int32 v41 = v66.i32[3];
          __int32 v40 = v66.i32[2];
          __int32 v39 = v66.i32[1];
          __int32 v34 = v65.i32[0];
          __int32 v38 = v66.i32[0];
          uint64_t v67 = v43 + 4;
          v43 += 2;
        }
        while (v67 <= v18);
      }
      else
      {
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        uint64_t result = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        __int32 v40 = 0;
        __int32 v41 = 0;
        int16x4_t v42 = v120;
      }
      if (v18)
      {
        int32x4_t v68 = (int32x4_t *)(*(void *)(a13 + 8 * ((int)v18 - 1)) + 4 * ((5 * v119) & 0xFFFFFFFC));
        int16x4_t v69 = vld1_dup_s16(v42);
        v70.i64[0] = __PAIR64__(v39, v38);
        int32x4_t v71 = vshll_n_s16(v69, 0xFuLL);
        v70.i64[1] = __PAIR64__(v41, v40);
        v72.i64[0] = __PAIR64__(v35, v34);
        v72.i64[1] = __PAIR64__(v37, v36);
        v73.i64[0] = __PAIR64__(v32, v31);
        v73.i64[1] = __PAIR64__(result, v33);
        v74.i64[0] = __PAIR64__(v28, v27);
        v74.i64[1] = __PAIR64__(v30, v29);
        v75.i64[0] = __PAIR64__(v24, v23);
        v75.i64[1] = __PAIR64__(v26, v25);
        int32x4_t v76 = vmlal_s16(vaddq_s32(v71, v75), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v68), (int8x8_t)0x8000800080008000), v69);
        __int32 v26 = v76.i32[3];
        __int32 v25 = v76.i32[2];
        __int32 v24 = v76.i32[1];
        int32x4_t v77 = vmlal_s16(vaddq_s32(v71, v74), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[1]), (int8x8_t)0x8000800080008000), v69);
        __int32 v30 = v77.i32[3];
        __int32 v23 = v76.i32[0];
        __int32 v29 = v77.i32[2];
        __int32 v28 = v77.i32[1];
        int32x4_t v78 = vmlal_s16(vaddq_s32(v71, v73), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[2]), (int8x8_t)0x8000800080008000), v69);
        uint64_t result = v78.u32[3];
        __int32 v33 = v78.i32[2];
        __int32 v32 = v78.i32[1];
        __int32 v27 = v77.i32[0];
        int32x4_t v79 = vmlal_s16(vaddq_s32(v71, v72), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[3]), (int8x8_t)0x8000800080008000), v69);
        __int32 v37 = v79.i32[3];
        __int32 v36 = v79.i32[2];
        __int32 v31 = v78.i32[0];
        __int32 v35 = v79.i32[1];
        int32x4_t v80 = vmlal_s16(vaddq_s32(v71, v70), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[4]), (int8x8_t)0x8000800080008000), v69);
        __int32 v41 = v80.i32[3];
        __int32 v34 = v79.i32[0];
        __int32 v40 = v80.i32[2];
        __int32 v39 = v80.i32[1];
        __int32 v38 = v80.i32[0];
      }
      v81.i64[0] = __PAIR64__(v24, v23);
      v81.i64[1] = __PAIR64__(v26, v25);
      int32x4_t v82 = vshrq_n_s32(vaddq_s32(v81, v22), 0xEuLL);
      *(int16x4_t *)v82.i8 = vqmovun_s32(v82);
      v83.i64[0] = __PAIR64__(v28, v27);
      v83.i64[1] = __PAIR64__(v30, v29);
      int32x4_t v84 = vshrq_n_s32(vaddq_s32(v83, v22), 0xEuLL);
      int16x4_t v85 = vqmovun_s32(v84);
      uint16x8_t v86 = (uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v82.i8, v84);
      v84.i64[0] = __PAIR64__(v32, v31);
      v84.i64[1] = __PAIR64__(result, v33);
      *(int16x4_t *)v84.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v84, v22), 0xEuLL));
      v87.i64[0] = __PAIR64__(v35, v34);
      v87.i64[1] = __PAIR64__(v37, v36);
      int32x4_t v88 = vshrq_n_s32(vaddq_s32(v87, v22), 0xEuLL);
      int8x8_t v89 = (int8x8_t)vqmovun_s32(v88);
      int32x4_t v13 = (int32x4_t)vqmovun_high_s32(*(int16x4_t *)v84.i8, v88);
      v88.i64[0] = __PAIR64__(v39, v38);
      v14.i64[1] = __PAIR64__(v41, v40);
      v90.i32[0] = vext_s8(*(int8x8_t *)v82.i8, *(int8x8_t *)v84.i8, 6uLL).u32[0];
      v91.i32[0] = vext_s8((int8x8_t)vzip2_s16(v85, *(int16x4_t *)v82.i8), *(int8x8_t *)v82.i8, 2uLL).u32[0];
      v92.i32[0] = vtrn2_s16(*(int16x4_t *)v82.i8, vzip2_s16(*(int16x4_t *)v82.i8, v85)).u32[0];
      v82.i16[1] = v85.i16[1];
      v85.i16[1] = v84.i16[1];
      *(int16x4_t *)v14.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v14, v22), 0xEuLL));
      int16x4_t v15 = (int16x4_t)vext_s8(*(int8x8_t *)v14.i8, v89, 4uLL);
      int8x8_t v93 = vext_s8(*(int8x8_t *)v14.i8, v89, 2uLL);
      *(int8x8_t *)v16.i8 = vext_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)v14.i8, 2uLL);
      v84.i16[3] = v89.i16[3];
      v89.i16[3] = v14.i16[3];
      v85.i32[1] = v89.i32[1];
      v90.i32[1] = vext_s8(*(int8x8_t *)&v15, *(int8x8_t *)&v15, 2uLL).i32[1];
      v91.i32[1] = vext_s8(v93, v93, 2uLL).i32[1];
      uint64_t v20 = v119 + 4;
      v92.i32[1] = v16.i32[1];
      v82.i32[1] = v84.i32[1];
      *(uint16x4_t *)v82.i8 = vmax_u16(vmax_u16(vmax_u16(vmax_u16((uint16x4_t)v85, v90), v91), v92), *(uint16x4_t *)v82.i8);
      a8 = (int32x4_t)vqtbl1q_s8((int8x16_t)v82, (int8x16_t)xmmword_1850CD760);
      a6 = vmaxq_u16(v86, (uint16x8_t)vqtbl1q_s8((int8x16_t)v82, (int8x16_t)xmmword_1850CD770));
      uint16x8_t *v17 = a6;
      v17[1] = vmaxq_u16((uint16x8_t)v13, (uint16x8_t)a8);
      v17[2].i64[0] = v14.i64[0];
      uint64_t v17 = (uint16x8_t *)((char *)v17 + 40);
      v21 += 4;
      a11 = v118;
    }
    while (v21 <= v117);
    int v19 = v118 & 0x7FFFFFFC;
  }
  else
  {
    int v19 = 0;
  }
  if (v19 < a11)
  {
    v94.i64[0] = 0x200000002000;
    v94.i64[1] = 0x200000002000;
    do
    {
      if ((int)v18 >= 2)
      {
        uint64_t v100 = 0;
        __int32 v95 = 0;
        __int32 v96 = 0;
        __int32 v97 = 0;
        __int32 v98 = 0;
        LODWORD(result) = 0;
        int32x4_t v99 = (unsigned int *)v120;
        uint64_t v101 = (5 * v19);
        do
        {
          unsigned int v102 = (void *)(a13 + 8 * v100);
          int16x4_t v103 = (int32x4_t *)(*v102 + 4 * v101);
          a8.i32[0] = v103[1].i32[0];
          int32x4_t v104 = (int32x4_t *)(v102[1] + 4 * v101);
          v13.i32[0] = v104[1].i32[0];
          unsigned int v105 = *v99++;
          int16x4_t v106 = vdup_n_s16(v105);
          v14.i32[0] = v105;
          int16x4_t v107 = vdup_n_s16(HIWORD(v105));
          v15.i32[0] = HIWORD(v105);
          *(int8x8_t *)v13.i8 = veor_s8((int8x8_t)vmovn_s32(v13), (int8x8_t)0x8000800080008000);
          v16.i32[0] = result;
          int32x4_t v108 = vaddq_s32(vshll_n_s16(*(int16x4_t *)v14.i8, 0xFuLL), v16);
          v16.i64[0] = __PAIR64__(v96, v95);
          v16.i64[1] = __PAIR64__(v98, v97);
          int32x4_t v109 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(vshll_n_s16(v106, 0xFuLL), v16), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v103), (int8x8_t)0x8000800080008000), v106), vshll_n_s16(v107, 0xFuLL)), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v104), (int8x8_t)0x8000800080008000), v107);
          __int32 v98 = v109.i32[3];
          __int32 v97 = v109.i32[2];
          __int32 v96 = v109.i32[1];
          __int32 v95 = v109.i32[0];
          a8 = vmlal_s16(vaddq_s32(vmlal_s16(v108, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(a8), (int8x8_t)0x8000800080008000), *(int16x4_t *)v14.i8), vshll_n_s16(v15, 0xFuLL)), *(int16x4_t *)v13.i8, v15);
          uint64_t result = a8.u32[0];
          uint64_t v110 = v100 + 4;
          v100 += 2;
        }
        while (v110 <= v18);
      }
      else
      {
        __int32 v95 = 0;
        __int32 v96 = 0;
        __int32 v97 = 0;
        __int32 v98 = 0;
        uint64_t result = 0;
        int32x4_t v99 = (unsigned int *)v120;
      }
      if (v18)
      {
        uint64_t v111 = (int32x4_t *)(*(void *)(a13 + 8 * ((int)v18 - 1)) + 4 * (5 * v19));
        a8.i32[0] = v111[1].i32[0];
        int16x4_t v112 = vdup_n_s16(*(unsigned __int16 *)v99);
        v13.i32[0] = *(unsigned __int16 *)v99;
        *(int8x8_t *)a8.i8 = veor_s8((int8x8_t)vmovn_s32(a8), (int8x8_t)0x8000800080008000);
        v14.i64[0] = __PAIR64__(v96, v95);
        v14.i64[1] = __PAIR64__(v98, v97);
        int32x4_t v113 = vaddq_s32(vshll_n_s16(v112, 0xFuLL), v14);
        v14.i32[0] = result;
        int32x4_t v114 = vmlal_s16(v113, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v111), (int8x8_t)0x8000800080008000), v112);
        __int32 v98 = v114.i32[3];
        __int32 v97 = v114.i32[2];
        __int32 v96 = v114.i32[1];
        __int32 v95 = v114.i32[0];
        uint64_t result = vmlal_s16(vaddq_s32(vshll_n_s16(*(int16x4_t *)v13.i8, 0xFuLL), v14), *(int16x4_t *)a8.i8, *(int16x4_t *)v13.i8).u32[0];
      }
      v115.i64[0] = __PAIR64__(v96, v95);
      v115.i64[1] = __PAIR64__(v98, v97);
      *(int16x4_t *)v115.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v115, v94), 0xEuLL));
      a8.i32[0] = result;
      a8 = vshrq_n_s32(vaddq_s32(a8, v94), 0xEuLL);
      int16x8_t v116 = vqmovun_high_s32(*(int16x4_t *)v115.i8, a8);
      a6 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&a6 - 1), (int8x16_t)xmmword_1850CD730);
      v115.i16[0] = vmaxvq_u16(a6);
      *(int16x4_t *)a8.i8 = vqmovun_s32(a8);
      v17->i64[0] = v115.i64[0];
      v17->i16[4] = a8.i16[0];
      uint64_t v17 = (uint16x8_t *)((char *)v17 + 10);
      ++v19;
    }
    while (v19 < a11);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,4,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    unint64_t v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    v13.i64[0] = 0xFFFFLL;
    v13.i64[1] = 0xFFFFLL;
    do
    {
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = 0uLL;
      int32x4_t v16 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v17 = 0;
        uint64_t v18 = (4 * v10) & 0xFFFFFFF8;
        int32x4_t v16 = v8;
        do
        {
          int v19 = (void *)(a6 + 8 * v17);
          uint64_t v20 = (int32x4_t *)(*v19 + 4 * v18);
          unint64_t v21 = (int32x4_t *)(v19[1] + 4 * v18);
          unsigned int v22 = *(_DWORD *)v16;
          v16 += 2;
          int16x4_t v23 = vdup_n_s16(v22);
          int32x4_t v24 = vshll_n_s16(v23, 0xFuLL);
          int16x4_t v25 = vdup_n_s16(HIWORD(v22));
          int32x4_t v26 = vshll_n_s16(v25, 0xFuLL);
          int32x4_t v15 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v20[1]), (int8x8_t)0x8000800080008000), v23), v24), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v21[1]), (int8x8_t)0x8000800080008000), v25), v26);
          int32x4_t v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v20), (int8x8_t)0x8000800080008000), v23), v24), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v21), (int8x8_t)0x8000800080008000), v25), v26);
          uint64_t result = v17 + 4;
          v17 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        __int32 v27 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        int16x4_t v28 = vld1_dup_s16(v16);
        int32x4_t v29 = vshll_n_s16(v28, 0xFuLL);
        int32x4_t v15 = vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v27[1]), (int8x8_t)0x8000800080008000), v28), v29);
        int32x4_t v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v27), (int8x8_t)0x8000800080008000), v28), v29);
      }
      v10 += 2;
      int16x4_t v30 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL));
      int32x4_t v31 = vshrq_n_s32(vaddq_s32(v15, v12), 0xEuLL);
      int16x4_t v32 = vqmovun_s32(v31);
      uint16x4_t v33 = (uint16x4_t)vuzp1_s16(v30, v32);
      uint16x4_t v34 = (uint16x4_t)vuzp2_s16(v30, v32);
      uint16x8_t v35 = (uint16x8_t)vqmovun_high_s32(v30, v31);
      *(uint16x4_t *)v31.i8 = vmax_u16(v33, v34);
      v31.i64[0] = vmovl_u16(vmax_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v12.i8), (uint16x4_t)vuzp2_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v12.i8))).u64[0];
      v36.i64[0] = v31.u32[0];
      v36.i64[1] = v31.u32[1];
      *v6++ = vmaxq_u16(v35, (uint16x8_t)vandq_s8(v36, v13));
      v11 += 2;
    }
    while (v11 <= a4);
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  if (v9 < a4)
  {
    v37.i64[0] = 0x200000002000;
    v37.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v38 = 0uLL;
      __int32 v39 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v40 = 0;
        __int32 v39 = v8;
        do
        {
          __int32 v41 = (uint64_t *)(a6 + 8 * v40);
          uint64_t result = *v41;
          unsigned int v42 = *(_DWORD *)v39;
          v39 += 2;
          int16x4_t v43 = vdup_n_s16(v42);
          int16x4_t v44 = vdup_n_s16(HIWORD(v42));
          int32x4_t v38 = vaddq_s32(vmlal_s16(vmlal_s16(v38, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*v41 + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v43), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v41[1] + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v44), vaddq_s32(vshll_n_s16(v43, 0xFuLL), vshll_n_s16(v44, 0xFuLL)));
          uint64_t v45 = v40 + 4;
          v40 += 2;
        }
        while (v45 <= v7);
      }
      if (v7)
      {
        int16x4_t v46 = vld1_dup_s16(v39);
        int32x4_t v38 = vaddq_s32(vmlal_s16(v38, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1))+ 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v46), vshll_n_s16(v46, 0xFuLL));
      }
      uint16x4_t v47 = (uint16x4_t)vqmovun_s32(vshrq_n_s32(vaddq_s32(v38, v37), 0xEuLL));
      v47.i16[0] = vmaxv_u16(v47);
      *(uint16x4_t *)v6->i8 = v47;
      uint64_t v6 = (uint16x8_t *)((char *)v6 + 8);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,2,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (__int16 *)(result + 8);
  if (a4 >= 4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 4;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        int32x4_t v15 = v8;
        do
        {
          uint64_t v17 = (void *)(a6 + 8 * v16);
          uint64_t v18 = (int32x4_t *)(*v17 + 8 * v10);
          int v19 = (int32x4_t *)(v17[1] + 8 * v10);
          unsigned int v20 = *(_DWORD *)v15;
          v15 += 2;
          int16x4_t v21 = vdup_n_s16(v20);
          int32x4_t v22 = vshll_n_s16(v21, 0xFuLL);
          int16x4_t v23 = vdup_n_s16(HIWORD(v20));
          int32x4_t v24 = vshll_n_s16(v23, 0xFuLL);
          int32x4_t v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v18[1]), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v23), v24);
          int32x4_t v13 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v18), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v23), v24);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        int16x4_t v25 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        int16x4_t v26 = vld1_dup_s16(v15);
        int32x4_t v27 = vshll_n_s16(v26, 0xFuLL);
        int32x4_t v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v25[1]), (int8x8_t)0x8000800080008000), v26), v27);
        int32x4_t v13 = vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v25), (int8x8_t)0x8000800080008000), v26), v27);
      }
      v10 += 4;
      int16x4_t v28 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL));
      int32x4_t v29 = vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL);
      int16x4_t v30 = vqmovun_s32(v29);
      *v6++ = vmaxq_u16((uint16x8_t)vqmovun_high_s32(v28, v29), (uint16x8_t)vmovl_u16(vmax_u16((uint16x4_t)vuzp1_s16(v28, v30), (uint16x4_t)vuzp2_s16(v28, v30))));
      v11 += 4;
    }
    while (v11 <= a4);
    int v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    if ((int)v7 >= 2)
    {
      uint64_t v33 = 0;
      int32x4_t v31 = 0uLL;
      int16x4_t v32 = (unsigned int *)v8;
      do
      {
        uint16x4_t v34 = (uint64_t *)(a6 + 8 * v33);
        uint64_t result = *v34;
        unsigned int v35 = *v32++;
        int32x4_t v31 = vmlal_s16(vmlal_s16(v31, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*v34 + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v35)), vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(v34[1] + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(HIWORD(v35)));
        *(int32x2_t *)v31.i8 = vadd_s32(*(int32x2_t *)v31.i8, vadd_s32(vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v35), 0x10uLL), 0x10uLL), 0xFuLL), vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(HIWORD(v35)), 0x10uLL), 0x10uLL), 0xFuLL)));
        uint64_t v36 = v33 + 4;
        v33 += 2;
      }
      while (v36 <= v7);
    }
    else
    {
      int32x4_t v31 = 0uLL;
      int16x4_t v32 = (unsigned int *)v8;
    }
    if (v7)
    {
      unsigned int v37 = *(unsigned __int16 *)v32;
      int32x4_t v31 = vmlal_s16(v31, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v37));
      *(int32x2_t *)v31.i8 = vadd_s32(*(int32x2_t *)v31.i8, vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v37), 0x10uLL), 0x10uLL), 0xFuLL));
    }
    *(int32x2_t *)v31.i8 = vadd_s32(*(int32x2_t *)v31.i8, (int32x2_t)0x200000002000);
    uint16x4_t v38 = (uint16x4_t)vqmovun_s32(vshrq_n_s32(v31, 0xEuLL));
    v6->i16[1] = v38.i16[1];
    v6->i16[0] = vmaxv_u16(v38);
    uint64_t v6 = (uint16x8_t *)((char *)v6 + 4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,4,(AlphaStyle)0>(uint64_t result, uint64_t a2, uint64_t a3, int a4, int16x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    unint64_t v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = (4 * v10) & 0xFFFFFFF8;
        int32x4_t v15 = v8;
        do
        {
          uint64_t v18 = (void *)(a6 + 8 * v16);
          int v19 = (int32x4_t *)(*v18 + 4 * v17);
          unsigned int v20 = (int32x4_t *)(v18[1] + 4 * v17);
          unsigned int v21 = *(_DWORD *)v15;
          v15 += 2;
          int16x4_t v22 = vdup_n_s16(v21);
          int32x4_t v23 = vshll_n_s16(v22, 0xFuLL);
          int16x4_t v24 = vdup_n_s16(HIWORD(v21));
          int32x4_t v25 = vshll_n_s16(v24, 0xFuLL);
          int32x4_t v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v20[1]), (int8x8_t)0x8000800080008000), v24), v25);
          int32x4_t v13 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v20), (int8x8_t)0x8000800080008000), v24), v25);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        int16x4_t v26 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        int16x4_t v27 = vld1_dup_s16(v15);
        int32x4_t v28 = vshll_n_s16(v27, 0xFuLL);
        int32x4_t v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v26[1]), (int8x8_t)0x8000800080008000), v27), v28);
        int32x4_t v13 = vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v26), (int8x8_t)0x8000800080008000), v27), v28);
      }
      v10 += 2;
      *v6++ = vqmovun_high_s32(vqmovun_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL));
      v11 += 2;
    }
    while (v11 <= a4);
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  if (v9 < a4)
  {
    v29.i64[0] = 0x200000002000;
    v29.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v30 = 0uLL;
      int32x4_t v31 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v32 = 0;
        int32x4_t v31 = v8;
        do
        {
          uint64_t v33 = (uint64_t *)(a6 + 8 * v32);
          uint64_t result = *v33;
          unsigned int v34 = *(_DWORD *)v31;
          v31 += 2;
          int16x4_t v35 = vdup_n_s16(v34);
          int16x4_t v36 = vdup_n_s16(HIWORD(v34));
          int32x4_t v30 = vaddq_s32(vmlal_s16(vmlal_s16(v30, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*v33 + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v35), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v33[1] + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v36), vaddq_s32(vshll_n_s16(v35, 0xFuLL), vshll_n_s16(v36, 0xFuLL)));
          uint64_t v37 = v32 + 4;
          v32 += 2;
        }
        while (v37 <= v7);
      }
      if (v7)
      {
        int16x4_t v38 = vld1_dup_s16(v31);
        int32x4_t v30 = vaddq_s32(vmlal_s16(v30, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1))+ 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v38), vshll_n_s16(v38, 0xFuLL));
      }
      *(int16x4_t *)v6->i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v30, v29), 0xEuLL));
      uint64_t v6 = (int16x8_t *)((char *)v6 + 8);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,3,(AlphaStyle)0>(uint64_t result, double a2, double a3, double a4, double a5, int32x4_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t *a10, uint64_t a11)
{
  uint64_t v11 = *a10;
  uint64_t v12 = *(int *)(result + 4);
  int32x4_t v13 = (const __int16 *)(result + 8);
  if (a9 >= 4)
  {
    int v15 = 0;
    unint64_t v16 = 4;
    v17.i64[0] = 0x200000002000;
    v17.i64[1] = 0x200000002000;
    do
    {
      if ((int)v12 >= 2)
      {
        uint64_t v30 = 0;
        __int32 v18 = 0;
        __int32 v19 = 0;
        __int32 v20 = 0;
        __int32 v21 = 0;
        unsigned __int32 v22 = 0;
        unsigned __int32 v23 = 0;
        unsigned __int32 v24 = 0;
        LODWORD(result) = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        uint64_t v31 = (3 * v15) & 0xFFFFFFFC;
        int32x4_t v29 = v13;
        do
        {
          uint64_t v32 = (void *)(a11 + 8 * v30);
          uint64_t v33 = (int32x4_t *)(*v32 + 4 * v31);
          unsigned int v34 = (int32x4_t *)(v32[1] + 4 * v31);
          unsigned int v35 = *(_DWORD *)v29;
          v29 += 2;
          int16x4_t v36 = vdup_n_s16(v35);
          int32x4_t v37 = vshll_n_s16(v36, 0xFuLL);
          int16x4_t v38 = vdup_n_s16(HIWORD(v35));
          v39.i64[0] = __PAIR64__(v26, v25);
          v39.i64[1] = __PAIR64__(v28, v27);
          int32x4_t v40 = vshll_n_s16(v38, 0xFuLL);
          v41.i64[0] = __PAIR64__(v23, v22);
          v41.i64[1] = __PAIR64__(result, v24);
          v42.i64[0] = __PAIR64__(v19, v18);
          v42.i64[1] = __PAIR64__(v21, v20);
          int32x4_t v43 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(v37, v42), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v33), (int8x8_t)0x8000800080008000), v36), v40), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v34), (int8x8_t)0x8000800080008000), v38);
          __int32 v21 = v43.i32[3];
          __int32 v20 = v43.i32[2];
          __int32 v19 = v43.i32[1];
          a6 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(v37, v41), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v33[1]), (int8x8_t)0x8000800080008000), v36), v40), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v34[1]), (int8x8_t)0x8000800080008000), v38);
          uint64_t result = a6.u32[3];
          __int32 v18 = v43.i32[0];
          unsigned __int32 v24 = a6.u32[2];
          unsigned __int32 v23 = a6.u32[1];
          int32x4_t v44 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(v37, v39), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v33[2]), (int8x8_t)0x8000800080008000), v36), v40), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v34[2]), (int8x8_t)0x8000800080008000), v38);
          __int32 v28 = v44.i32[3];
          __int32 v27 = v44.i32[2];
          __int32 v26 = v44.i32[1];
          unsigned __int32 v22 = a6.i32[0];
          __int32 v25 = v44.i32[0];
          uint64_t v45 = v30 + 4;
          v30 += 2;
        }
        while (v45 <= v12);
      }
      else
      {
        __int32 v18 = 0;
        __int32 v19 = 0;
        __int32 v20 = 0;
        __int32 v21 = 0;
        unsigned __int32 v22 = 0;
        unsigned __int32 v23 = 0;
        unsigned __int32 v24 = 0;
        uint64_t result = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        int32x4_t v29 = v13;
      }
      if (v12)
      {
        int16x4_t v46 = (int32x4_t *)(*(void *)(a11 + 8 * ((int)v12 - 1)) + 4 * ((3 * v15) & 0xFFFFFFFC));
        int16x4_t v47 = vld1_dup_s16(v29);
        *(int8x8_t *)a6.i8 = veor_s8((int8x8_t)vmovn_s32(v46[2]), (int8x8_t)0x8000800080008000);
        v48.i64[0] = __PAIR64__(v26, v25);
        v48.i64[1] = __PAIR64__(v28, v27);
        int32x4_t v49 = vshll_n_s16(v47, 0xFuLL);
        v50.i64[0] = __PAIR64__(v23, v22);
        v50.i64[1] = __PAIR64__(result, v24);
        v51.i64[0] = __PAIR64__(v19, v18);
        v51.i64[1] = __PAIR64__(v21, v20);
        int32x4_t v52 = vmlal_s16(vaddq_s32(v49, v51), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v46), (int8x8_t)0x8000800080008000), v47);
        __int32 v21 = v52.i32[3];
        __int32 v20 = v52.i32[2];
        __int32 v19 = v52.i32[1];
        int32x4_t v53 = vmlal_s16(vaddq_s32(v49, v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v46[1]), (int8x8_t)0x8000800080008000), v47);
        uint64_t result = v53.u32[3];
        unsigned __int32 v24 = v53.u32[2];
        __int32 v18 = v52.i32[0];
        unsigned __int32 v23 = v53.u32[1];
        int32x4_t v54 = vmlal_s16(vaddq_s32(v49, v48), *(int16x4_t *)a6.i8, v47);
        __int32 v28 = v54.i32[3];
        unsigned __int32 v22 = v53.i32[0];
        __int32 v27 = v54.i32[2];
        __int32 v26 = v54.i32[1];
        __int32 v25 = v54.i32[0];
      }
      v15 += 4;
      v55.i64[0] = __PAIR64__(v19, v18);
      v55.i64[1] = __PAIR64__(v21, v20);
      v56.i64[0] = __PAIR64__(v23, v22);
      v56.i64[1] = __PAIR64__(result, v24);
      int16x8_t v57 = vqmovun_high_s32(vqmovun_s32(vshrq_n_s32(vaddq_s32(v55, v17), 0xEuLL)), vshrq_n_s32(vaddq_s32(v56, v17), 0xEuLL));
      v56.i64[0] = __PAIR64__(v26, v25);
      v56.i64[1] = __PAIR64__(v28, v27);
      *(int16x8_t *)uint64_t v11 = v57;
      *(int16x4_t *)(v11 + 16) = vqmovun_s32(vshrq_n_s32(vaddq_s32(v56, v17), 0xEuLL));
      v11 += 24;
      v16 += 4;
    }
    while (v16 <= a9);
    int v14 = a9 & 0x7FFFFFFC;
  }
  else
  {
    int v14 = 0;
  }
  if (v14 < a9)
  {
    v58.i64[0] = 0x200000002000;
    v58.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v59 = 0uLL;
      int32x4_t v60 = v13;
      if ((int)v12 >= 2)
      {
        uint64_t v61 = 0;
        uint64_t v62 = (3 * v14);
        int32x4_t v60 = v13;
        do
        {
          int32x4_t v63 = (void *)(a11 + 8 * v61);
          uint64_t v64 = *v63 + 4 * v62;
          v65.i64[0] = *(void *)v64;
          a6.i32[0] = *(_DWORD *)(v64 + 8);
          uint64_t v66 = v63[1] + 4 * v62;
          v67.i64[0] = *(void *)v66;
          v65.i64[1] = a6.i64[0];
          a6.i32[0] = *(_DWORD *)(v66 + 8);
          v67.i64[1] = a6.i64[0];
          unsigned int v68 = *(_DWORD *)v60;
          v60 += 2;
          int8x8_t v69 = (int8x8_t)vmovn_s32(v67);
          *(int16x4_t *)v67.i8 = vdup_n_s16(v68);
          *(int8x8_t *)a6.i8 = veor_s8(v69, (int8x8_t)0x8000800080008000);
          int16x4_t v70 = vdup_n_s16(HIWORD(v68));
          int32x4_t v59 = vaddq_s32(vmlal_s16(vmlal_s16(v59, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v65), (int8x8_t)0x8000800080008000), *(int16x4_t *)v67.i8), *(int16x4_t *)a6.i8, v70), vaddq_s32(vshll_n_s16(*(int16x4_t *)v67.i8, 0xFuLL), vshll_n_s16(v70, 0xFuLL)));
          uint64_t v71 = v61 + 4;
          v61 += 2;
        }
        while (v71 <= v12);
      }
      if (v12)
      {
        uint64_t v72 = *(void *)(a11 + 8 * ((int)v12 - 1)) + 4 * (3 * v14);
        v73.i64[0] = *(void *)v72;
        a6.i32[0] = *(_DWORD *)(v72 + 8);
        v73.i64[1] = a6.i64[0];
        *(int16x4_t *)a6.i8 = vld1_dup_s16(v60);
        int32x4_t v59 = vaddq_s32(vmlal_s16(v59, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v73), (int8x8_t)0x8000800080008000), *(int16x4_t *)a6.i8), vshll_n_s16(*(int16x4_t *)a6.i8, 0xFuLL));
      }
      int16x4_t v74 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v59, v58), 0xEuLL));
      *(_DWORD *)uint64_t v11 = v74.i32[0];
      *(_WORD *)(v11 + 4) = v74.i16[2];
      v11 += 6;
      ++v14;
    }
    while (v14 < a9);
  }
  return result;
}

int32x4_t *resample_vertical<int,unsigned short,1,(AlphaStyle)0>(int32x4_t *result, double a2, double a3, __n128 a4, int32x4_t a5, double a6, int32x4_t a7, int32x4_t a8, uint64_t a9, uint64_t a10, int a11, __n128 **a12, uint64_t a13)
{
  int32x4_t v13 = *a12;
  uint64_t v14 = result->i32[1];
  int v15 = &result->i16[4];
  if (a11 >= 8)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 8;
    v19.i64[0] = 0x200000002000;
    v19.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      unsigned __int32 v22 = v15;
      if ((int)v14 >= 2)
      {
        uint64_t v23 = 0;
        unsigned __int32 v22 = v15;
        do
        {
          unsigned __int32 v24 = (void *)(a13 + 8 * v23);
          uint64_t result = (int32x4_t *)(*v24 + 4 * v17);
          __int32 v25 = (int32x4_t *)(v24[1] + 4 * v17);
          unsigned int v26 = *(_DWORD *)v22;
          v22 += 2;
          int16x4_t v27 = vdup_n_s16(v26);
          *(int8x8_t *)a7.i8 = veor_s8((int8x8_t)vmovn_s32(result[1]), (int8x8_t)0x8000800080008000);
          int32x4_t v28 = vshll_n_s16(v27, 0xFuLL);
          *(int8x8_t *)a8.i8 = veor_s8((int8x8_t)vmovn_s32(*v25), (int8x8_t)0x8000800080008000);
          int16x4_t v29 = vdup_n_s16(HIWORD(v26));
          int32x4_t v30 = vshll_n_s16(v29, 0xFuLL);
          int32x4_t v21 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v21, *(int16x4_t *)a7.i8, v27), v28), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v25[1]), (int8x8_t)0x8000800080008000), v29), v30);
          int32x4_t v20 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v20, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*result), (int8x8_t)0x8000800080008000), v27), v28), *(int16x4_t *)a8.i8, v29), v30);
          uint64_t v31 = v23 + 4;
          v23 += 2;
        }
        while (v31 <= v14);
      }
      if (v14)
      {
        uint64_t v32 = (int32x4_t *)(*(void *)(a13 + 8 * ((int)v14 - 1)) + 4 * v17);
        *(int16x4_t *)a8.i8 = vld1_dup_s16(v22);
        *(int8x8_t *)a7.i8 = veor_s8((int8x8_t)vmovn_s32(v32[1]), (int8x8_t)0x8000800080008000);
        int32x4_t v33 = vshll_n_s16(*(int16x4_t *)a8.i8, 0xFuLL);
        int32x4_t v21 = vaddq_s32(vmlal_s16(v21, *(int16x4_t *)a7.i8, *(int16x4_t *)a8.i8), v33);
        int32x4_t v20 = vaddq_s32(vmlal_s16(v20, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v32), (int8x8_t)0x8000800080008000), *(int16x4_t *)a8.i8), v33);
      }
      v17 += 8;
      a5 = vshrq_n_s32(vaddq_s32(v21, v19), 0xEuLL);
      a4 = (__n128)vqmovun_high_s32(vqmovun_s32(vshrq_n_s32(vaddq_s32(v20, v19), 0xEuLL)), a5);
      *v13++ = a4;
      v18 += 8;
    }
    while (v18 <= a11);
    uint64_t v16 = a11 & 0xFFFFFFF8;
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v34 = v16 | 4;
  if ((int)(v16 | 4) <= a11)
  {
    v35.i64[0] = 0x200000002000;
    v35.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v36 = 0uLL;
      uint64_t v37 = 4 * v16;
      int16x4_t v38 = v15;
      if ((int)v14 >= 2)
      {
        uint64_t v39 = 0;
        int16x4_t v38 = v15;
        do
        {
          uint64_t v40 = a13 + 8 * v39;
          uint64_t result = *(int32x4_t **)v40;
          unsigned int v41 = *(_DWORD *)v38;
          v38 += 2;
          *(int16x4_t *)a7.i8 = vdup_n_s16(v41);
          a8 = vshll_n_s16(*(int16x4_t *)a7.i8, 0xFuLL);
          int16x4_t v42 = vdup_n_s16(HIWORD(v41));
          a5 = vaddq_s32(a8, vshll_n_s16(v42, 0xFuLL));
          int32x4_t v36 = vaddq_s32(vmlal_s16(vmlal_s16(v36, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)v40 + v37)), (int8x8_t)0x8000800080008000), *(int16x4_t *)a7.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)(v40 + 8) + v37)), (int8x8_t)0x8000800080008000), v42), a5);
          uint64_t v43 = v39 + 4;
          v39 += 2;
        }
        while (v43 <= v14);
      }
      if (v14)
      {
        int16x4_t v44 = vld1_dup_s16(v38);
        *(int8x8_t *)a5.i8 = veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(void *)(a13 + 8 * ((int)v14 - 1)) + v37)), (int8x8_t)0x8000800080008000);
        a7 = vshll_n_s16(v44, 0xFuLL);
        int32x4_t v36 = vaddq_s32(vmlal_s16(v36, *(int16x4_t *)a5.i8, v44), a7);
      }
      a4.n128_u64[0] = (unint64_t)vqmovun_s32(vshrq_n_s32(vaddq_s32(v36, v35), 0xEuLL));
      v13->n128_u64[0] = a4.n128_u64[0];
      int32x4_t v13 = (__n128 *)((char *)v13 + 8);
      uint64_t v16 = v34;
      v34 += 4;
    }
    while ((int)v34 <= a11);
  }
  for (; (int)v16 < a11; ++v16)
  {
    if ((int)v14 >= 2)
    {
      uint64_t v47 = 0;
      int32x4_t v45 = 0uLL;
      int16x4_t v46 = (unsigned __int32 *)v15;
      do
      {
        int32x4_t v48 = (void *)(a13 + 8 * v47);
        unsigned __int32 v49 = *v46++;
        a4.n128_u32[0] = *(unsigned __int16 *)(*v48 + 4 * v16) ^ 0xFFFF8000;
        uint64_t result = (int32x4_t *)HIWORD(v49);
        a5.i32[0] = v49;
        a7.i32[0] = *(unsigned __int16 *)(v48[1] + 4 * v16) ^ 0xFFFF8000;
        a8.i32[0] = HIWORD(v49);
        int32x4_t v45 = vmlal_s16(vmlal_s16(v45, (int16x4_t)a4.n128_u64[0], *(int16x4_t *)a5.i8), *(int16x4_t *)a7.i8, *(int16x4_t *)a8.i8);
        a4.n128_u64[0] = (unint64_t)vadd_s32(vshl_n_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x10uLL), 0x10uLL), 0xFuLL), vshl_n_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x10uLL), 0x10uLL), 0xFuLL));
        *(int32x2_t *)v45.i8 = vadd_s32(*(int32x2_t *)v45.i8, (int32x2_t)a4.n128_u64[0]);
        uint64_t v50 = v47 + 4;
        v47 += 2;
      }
      while (v50 <= v14);
    }
    else
    {
      int32x4_t v45 = 0uLL;
      int16x4_t v46 = (unsigned __int32 *)v15;
    }
    if (v14)
    {
      a4.n128_u32[0] = *(unsigned __int16 *)(*(void *)(a13 + 8 * ((int)v14 - 1)) + 4 * v16) ^ 0xFFFF8000;
      a5.i16[0] = *(_WORD *)v46;
      int32x4_t v45 = vmlal_s16(v45, (int16x4_t)a4.n128_u64[0], *(int16x4_t *)a5.i8);
      *(int32x2_t *)v45.i8 = vadd_s32(*(int32x2_t *)v45.i8, vshl_n_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x10uLL), 0x10uLL), 0xFuLL));
    }
    *(int32x2_t *)v45.i8 = vadd_s32(*(int32x2_t *)v45.i8, (int32x2_t)0x200000002000);
    v13->n128_u16[0] = vqmovun_s32(vshrq_n_s32(v45, 0xEuLL)).u16[0];
    int32x4_t v13 = (__n128 *)((char *)v13 + 2);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,4,(AlphaStyle)3>(uint64_t result, double a2, double a3, int32x4_t a4, double a5, int32x4_t a6, uint8x8_t a7, int8x16_t a8, int32x4_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *(int8x16_t **)a13;
  int v15 = *(_DWORD **)(a13 + 8);
  uint64_t v16 = *(int *)(result + 4);
  unsigned int v105 = (__int16 *)(result + 8);
  if (a12 >= 4)
  {
    uint64_t v18 = 0;
    unint64_t v101 = a12;
    uint64_t v19 = 4;
    v20.i64[0] = 0x200000002000;
    v20.i64[1] = 0x200000002000;
    a4.i32[1] = -1;
    int v102 = a12;
    do
    {
      uint64_t v103 = v19;
      uint64_t v104 = v18;
      if ((int)v16 >= 2)
      {
        uint64_t v41 = 0;
        __int32 v21 = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        LODWORD(result) = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        uint64_t v42 = (5 * v18) & 0xFFFFFFFC;
        uint64_t v40 = v105;
        do
        {
          uint64_t v43 = (void *)(a14 + 8 * v41);
          uint64_t v44 = *v43 + 4 * v42;
          a9 = *(int32x4_t *)(v44 + 64);
          int32x4_t v45 = (int32x4_t *)(v43[1] + 4 * v42);
          unsigned int v46 = *(_DWORD *)v40;
          v40 += 2;
          int16x4_t v47 = vdup_n_s16(v46);
          v48.i64[0] = __PAIR64__(v37, v36);
          v48.i64[1] = __PAIR64__(v39, v38);
          v49.i64[0] = __PAIR64__(v33, v32);
          v49.i64[1] = __PAIR64__(v35, v34);
          v50.i64[0] = __PAIR64__(v29, v28);
          v50.i64[1] = __PAIR64__(v31, v30);
          v51.i64[0] = __PAIR64__(v22, v21);
          v51.i64[1] = __PAIR64__(v24, v23);
          int16x4_t v52 = vdup_n_s16(HIWORD(v46));
          int32x4_t v53 = vmlal_s16(vmlal_s16(v51, vmovn_s32(*(int32x4_t *)v44), v47), vmovn_s32(*v45), v52);
          v54.i64[0] = __PAIR64__(v26, v25);
          v54.i64[1] = __PAIR64__(result, v27);
          __int32 v24 = v53.i32[3];
          __int32 v23 = v53.i32[2];
          __int32 v22 = v53.i32[1];
          int32x4_t v55 = vmlal_s16(vmlal_s16(v54, vmovn_s32(*(int32x4_t *)(v44 + 16)), v47), vmovn_s32(v45[1]), v52);
          uint64_t result = v55.u32[3];
          __int32 v27 = v55.i32[2];
          __int32 v26 = v55.i32[1];
          __int32 v21 = v53.i32[0];
          int32x4_t v56 = vmlal_s16(vmlal_s16(v50, vmovn_s32(*(int32x4_t *)(v44 + 32)), v47), vmovn_s32(v45[2]), v52);
          __int32 v31 = v56.i32[3];
          __int32 v30 = v56.i32[2];
          __int32 v25 = v55.i32[0];
          __int32 v29 = v56.i32[1];
          int32x4_t v57 = vmlal_s16(vmlal_s16(v49, vmovn_s32(*(int32x4_t *)(v44 + 48)), v47), vmovn_s32(v45[3]), v52);
          __int32 v35 = v57.i32[3];
          __int32 v28 = v56.i32[0];
          __int32 v34 = v57.i32[2];
          __int32 v33 = v57.i32[1];
          int32x4_t v58 = vmlal_s16(vmlal_s16(v48, vmovn_s32(a9), v47), vmovn_s32(v45[4]), v52);
          __int32 v39 = v58.i32[3];
          __int32 v38 = v58.i32[2];
          __int32 v37 = v58.i32[1];
          __int32 v32 = v57.i32[0];
          __int32 v36 = v58.i32[0];
          uint64_t v59 = v41 + 4;
          v41 += 2;
        }
        while (v59 <= v16);
      }
      else
      {
        __int32 v21 = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        uint64_t result = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        uint64_t v40 = v105;
      }
      if (v16)
      {
        int32x4_t v60 = (int32x4_t *)(*(void *)(a14 + 8 * ((int)v16 - 1)) + 4 * ((5 * v104) & 0xFFFFFFFC));
        int16x4_t v61 = vld1_dup_s16(v40);
        v62.i64[0] = __PAIR64__(v22, v21);
        v62.i64[1] = __PAIR64__(v24, v23);
        int32x4_t v63 = vmlal_s16(v62, vmovn_s32(*v60), v61);
        __int32 v24 = v63.i32[3];
        __int32 v23 = v63.i32[2];
        __int32 v22 = v63.i32[1];
        v64.i64[0] = __PAIR64__(v26, v25);
        v64.i64[1] = __PAIR64__(result, v27);
        int32x4_t v65 = vmlal_s16(v64, vmovn_s32(v60[1]), v61);
        uint64_t result = v65.u32[3];
        __int32 v27 = v65.i32[2];
        __int32 v26 = v65.i32[1];
        v66.i64[0] = __PAIR64__(v29, v28);
        v66.i64[1] = __PAIR64__(v31, v30);
        int32x4_t v67 = vmlal_s16(v66, vmovn_s32(v60[2]), v61);
        __int32 v31 = v67.i32[3];
        __int32 v30 = v67.i32[2];
        __int32 v29 = v67.i32[1];
        v68.i64[0] = __PAIR64__(v33, v32);
        __int32 v21 = v63.i32[0];
        v68.i64[1] = __PAIR64__(v35, v34);
        int32x4_t v69 = vmlal_s16(v68, vmovn_s32(v60[3]), v61);
        __int32 v35 = v69.i32[3];
        __int32 v34 = v69.i32[2];
        __int32 v33 = v69.i32[1];
        __int32 v25 = v65.i32[0];
        v70.i64[0] = __PAIR64__(v37, v36);
        v70.i64[1] = __PAIR64__(v39, v38);
        __int32 v28 = v67.i32[0];
        int32x4_t v71 = vmlal_s16(v70, vmovn_s32(v60[4]), v61);
        __int32 v39 = v71.i32[3];
        __int32 v32 = v69.i32[0];
        __int32 v38 = v71.i32[2];
        __int32 v37 = v71.i32[1];
        __int32 v36 = v71.i32[0];
      }
      v72.i64[0] = __PAIR64__(v26, v25);
      uint64_t v18 = v104 + 4;
      v72.i64[1] = __PAIR64__(result, v27);
      v73.i64[0] = __PAIR64__(v22, v21);
      v73.i64[1] = __PAIR64__(v24, v23);
      v74.i64[0] = __PAIR64__(v33, v32);
      v74.i64[1] = __PAIR64__(v35, v34);
      int16x8_t v75 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v73, v20), 0xEuLL)), vshrq_n_s32(vaddq_s32(v72, v20), 0xEuLL));
      v72.i64[0] = __PAIR64__(v29, v28);
      v72.i64[1] = __PAIR64__(v31, v30);
      int8x8_t v76 = vqmovun_s16(v75);
      v75.i64[0] = __PAIR64__(v37, v36);
      a8 = vqmovun_high_s16(v76, vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v72, v20), 0xEuLL)), vshrq_n_s32(vaddq_s32(v74, v20), 0xEuLL)));
      v75.i64[1] = __PAIR64__(v39, v38);
      int16x8_t v77 = (int16x8_t)vshrq_n_s32(vaddq_s32((int32x4_t)v75, v20), 0xEuLL);
      *(int16x4_t *)v77.i8 = vqmovn_s32((int32x4_t)v77);
      *(int8x8_t *)a9.i8 = vqmovun_s16(v77);
      int8x16_t v78 = vqtbl2q_s8(*(int8x16x2_t *)a8.i8, (int8x16_t)xmmword_1850CD780);
      a6 = (int32x4_t)vextq_s8(v78, v78, 8uLL);
      *(uint8x8_t *)a6.i8 = vpmax_u8(vpmax_u8(*(uint8x8_t *)v78.i8, *(uint8x8_t *)a6.i8), *(uint8x8_t *)v20.i8);
      a7 = (uint8x8_t)vqtbl1_s8(a8, (int8x8_t)-15857404);
      a7.i8[3] = a9.i8[3];
      *v14++ = v78;
      *v15++ = vmax_u8(a7, *(uint8x8_t *)a6.i8).u32[0];
      uint64_t v19 = v103 + 4;
      a12 = v102;
    }
    while (v103 + 4 <= v101);
    int v17 = v102 & 0x7FFFFFFC;
  }
  else
  {
    int v17 = 0;
  }
  if (v17 < a12)
  {
    v79.i64[0] = 0x200000002000;
    v79.i64[1] = 0x200000002000;
    do
    {
      if ((int)v16 >= 2)
      {
        uint64_t v85 = 0;
        unsigned __int32 v80 = 0;
        unsigned __int32 v81 = 0;
        unsigned __int32 v82 = 0;
        unsigned __int32 v83 = 0;
        LODWORD(result) = 0;
        int32x4_t v84 = (unsigned int *)v105;
        uint64_t v86 = (5 * v17);
        do
        {
          int32x4_t v87 = (void *)(a14 + 8 * v85);
          uint64_t v88 = *v87 + 4 * v86;
          int32x4_t v89 = *(int32x4_t *)v88;
          a4.i32[0] = *(_DWORD *)(v88 + 16);
          uint16x4_t v90 = (int32x4_t *)(v87[1] + 4 * v86);
          a6.i32[0] = v90[1].i32[0];
          *(int16x4_t *)a6.i8 = vmovn_s32(a6);
          unsigned int v91 = *v84++;
          a7 = (uint8x8_t)vdup_n_s16(v91);
          a8.i32[0] = v91;
          a9.i32[0] = result;
          int32x4_t v92 = vmlal_s16(a9, vmovn_s32(a4), *(int16x4_t *)a8.i8);
          v93.i64[0] = __PAIR64__(v81, v80);
          v93.i64[1] = __PAIR64__(v83, v82);
          int32x4_t v94 = vmlal_s16(v93, vmovn_s32(v89), (int16x4_t)a7);
          *(int16x4_t *)v89.i8 = vdup_n_s16(HIWORD(v91));
          a4 = vmlal_s16(v94, vmovn_s32(*v90), *(int16x4_t *)v89.i8);
          unsigned __int32 v83 = a4.u32[3];
          v89.i32[0] = HIWORD(v91);
          unsigned __int32 v82 = a4.u32[2];
          unsigned __int32 v81 = a4.u32[1];
          unsigned __int32 v80 = a4.i32[0];
          a9 = vmlal_s16(v92, *(int16x4_t *)a6.i8, *(int16x4_t *)v89.i8);
          uint64_t result = a9.u32[0];
          uint64_t v95 = v85 + 4;
          v85 += 2;
        }
        while (v95 <= v16);
      }
      else
      {
        unsigned __int32 v80 = 0;
        unsigned __int32 v81 = 0;
        unsigned __int32 v82 = 0;
        unsigned __int32 v83 = 0;
        uint64_t result = 0;
        int32x4_t v84 = (unsigned int *)v105;
      }
      if (v16)
      {
        __int32 v96 = (int32x4_t *)(*(void *)(a14 + 8 * ((int)v16 - 1)) + 4 * (5 * v17));
        int32x4_t v97 = *v96;
        a4.i32[0] = v96[1].i32[0];
        *(int16x4_t *)a4.i8 = vmovn_s32(a4);
        *(int16x4_t *)v97.i8 = vmovn_s32(*v96);
        v98.i64[0] = __PAIR64__(v81, v80);
        v98.i64[1] = __PAIR64__(v83, v82);
        a7.i32[0] = *(unsigned __int16 *)v84;
        a6 = vmlal_s16(v98, *(int16x4_t *)v97.i8, vdup_n_s16(a7.u32[0]));
        unsigned __int32 v83 = a6.u32[3];
        unsigned __int32 v82 = a6.u32[2];
        unsigned __int32 v81 = a6.u32[1];
        unsigned __int32 v80 = a6.i32[0];
        v97.i32[0] = result;
        uint64_t result = vmlal_s16(v97, *(int16x4_t *)a4.i8, (int16x4_t)a7).u32[0];
      }
      v99.i64[0] = __PAIR64__(v81, v80);
      v99.i64[1] = __PAIR64__(v83, v82);
      a4.i32[0] = result;
      a4 = vshrq_n_s32(vaddq_s32(a4, v79), 0xEuLL);
      int16x8_t v100 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v99, v79), 0xEuLL)), a4);
      *(int8x8_t *)v100.i8 = vqmovun_s16(v100);
      *(uint8x8_t *)a4.i8 = vpmax_u8(vpmax_u8(*(uint8x8_t *)v100.i8, *(uint8x8_t *)v79.i8), *(uint8x8_t *)v79.i8);
      v14->i32[0] = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)v100, (int8x16_t)v79)).u32[0];
      uint64_t v14 = (int8x16_t *)((char *)v14 + 4);
      *(unsigned char *)int v15 = vmax_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)v100.i8, 4), *(uint8x8_t *)a4.i8).u8[0];
      int v15 = (_DWORD *)((char *)v15 + 1);
      ++v17;
    }
    while (v17 < a12);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,3,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = (_WORD *)a5[1];
  uint64_t v8 = *(int *)(result + 4);
  signed int v9 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    int v11 = 0;
    unint64_t v12 = 2;
    v13.i64[0] = 0x200000002000;
    v13.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = 0uLL;
      uint64_t v16 = v9;
      if ((int)v8 >= 2)
      {
        uint64_t v17 = 0;
        uint64_t v18 = (4 * v11) & 0xFFFFFFF8;
        uint64_t v16 = v9;
        do
        {
          uint64_t v19 = (void *)(a6 + 8 * v17);
          int32x4_t v20 = (int32x4_t *)(*v19 + 4 * v18);
          __int32 v21 = (int32x4_t *)(v19[1] + 4 * v18);
          unsigned int v22 = *(_DWORD *)v16;
          v16 += 2;
          int16x4_t v23 = vdup_n_s16(v22);
          int16x4_t v24 = vdup_n_s16(HIWORD(v22));
          int32x4_t v15 = vmlal_s16(vmlal_s16(v15, vmovn_s32(v20[1]), v23), vmovn_s32(v21[1]), v24);
          int32x4_t v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(*v20), v23), vmovn_s32(*v21), v24);
          uint64_t v25 = v17 + 4;
          v17 += 2;
        }
        while (v25 <= v8);
      }
      if (v8)
      {
        __int32 v26 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 4 * ((4 * v11) & 0xFFFFFFF8));
        int16x4_t v27 = vld1_dup_s16(v16);
        int32x4_t v15 = vmlal_s16(v15, vmovn_s32(v26[1]), v27);
        int32x4_t v14 = vmlal_s16(v14, vmovn_s32(*v26), v27);
      }
      v11 += 2;
      int16x8_t v28 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v14, v13), 0xEuLL)), vshrq_n_s32(vaddq_s32(v15, v13), 0xEuLL));
      int8x8_t v29 = vqmovun_s16(v28);
      __int16 v30 = v29.u8[4];
      __int16 v31 = v29.u8[2];
      uint64_t result = v29.u8[1];
      __int16 v32 = v29.u8[0];
      int8x8_t v33 = vext_s8(v29, *(int8x8_t *)v13.i8, 1uLL);
      uint8x8_t v34 = vpmax_u8(vpmax_u8((uint8x8_t)v29, *(uint8x8_t *)v13.i8), *(uint8x8_t *)v13.i8);
      int16x8_t v35 = (int16x8_t)vqmovun_high_s16(v29, v28);
      v28.i16[0] = vmax_u8((uint8x8_t)vqtbl1_s8((int8x16_t)v35, (int8x8_t)-63741), v34).u16[0];
      v35.i16[0] = v32;
      v35.i16[1] = result;
      v35.i16[2] = v31;
      v35.i16[3] = v30;
      *(_DWORD *)uint64_t v6 = vmovn_s16(v35).u32[0];
      *(_WORD *)(v6 + 4) = v33.i16[2];
      v6 += 6;
      *v7++ = v28.i16[0];
      v12 += 2;
    }
    while (v12 <= a4);
    signed int v10 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v10 = 0;
  }
  if (v10 < a4)
  {
    v36.i64[0] = 0x200000002000;
    v36.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v37 = 0uLL;
      __int32 v38 = v9;
      if ((int)v8 >= 2)
      {
        uint64_t v39 = 0;
        uint64_t v40 = (4 * v10);
        __int32 v38 = v9;
        do
        {
          uint64_t result = 4 * v40;
          unsigned int v41 = *(_DWORD *)v38;
          v38 += 2;
          int32x4_t v37 = vmlal_s16(vmlal_s16(v37, vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * v39) + 4 * v40)), vdup_n_s16(v41)), vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * v39 + 8) + 4 * v40)), vdup_n_s16(HIWORD(v41)));
          uint64_t v42 = v39 + 4;
          v39 += 2;
        }
        while (v42 <= v8);
      }
      if (v8)
      {
        int16x4_t v43 = vld1_dup_s16(v38);
        int32x4_t v37 = vmlal_s16(v37, vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * ((int)v8 - 1)) + 4 * (4 * v10))), v43);
      }
      int16x8_t v44 = (int16x8_t)vshrq_n_s32(vaddq_s32(v37, v36), 0xEuLL);
      *(int16x4_t *)v44.i8 = vqmovn_s32((int32x4_t)v44);
      *(int8x8_t *)v44.i8 = vqmovun_s16(v44);
      *(_WORD *)uint64_t v6 = v44.i16[0];
      *(unsigned char *)(v6 + 2) = v44.i8[2];
      v6 += 3;
      *(unsigned char *)uint64_t v7 = vmax_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)v44.i8, 3), vpmax_u8(vpmax_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v36.i8)).u8[0];
      uint64_t v7 = (_WORD *)((char *)v7 + 1);
      ++v10;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,5,(AlphaStyle)2>(uint64_t result, double a2, double a3, uint8x8_t a4, double a5, int32x4_t a6, double a7, int32x4_t a8, int16x4_t a9, uint64_t a10, uint64_t a11, int a12, uint8x16_t **a13, uint64_t a14)
{
  uint64_t v16 = *a13;
  uint64_t v17 = *(int *)(result + 4);
  uint64_t v111 = (__int16 *)(result + 8);
  if (a12 >= 4)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 4;
    *(double *)&a4 = NAN;
    a6.i32[1] = -1;
    unint64_t v108 = a12;
    a8.i64[0] = 0x200000002000;
    a8.i64[1] = 0x200000002000;
    int v109 = a12;
    do
    {
      uint64_t v110 = v19;
      if ((int)v17 >= 2)
      {
        uint64_t v41 = 0;
        __int32 v21 = 0;
        LODWORD(result) = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        uint64_t v42 = (5 * v19) & 0xFFFFFFFC;
        uint64_t v40 = v111;
        do
        {
          int16x4_t v43 = (void *)(a14 + 8 * v41);
          int16x8_t v44 = (int32x4_t *)(*v43 + 4 * v42);
          int32x4_t v46 = v44[2];
          int32x4_t v45 = v44[3];
          int32x4_t v48 = *v44;
          int32x4_t v47 = v44[1];
          int32x4_t v49 = v44[4];
          int32x4_t v50 = (int32x4_t *)(v43[1] + 4 * v42);
          int16x4_t v51 = vmovn_s32(v48);
          int16x4_t v52 = vmovn_s32(v46);
          unsigned int v53 = *(_DWORD *)v40;
          v40 += 2;
          int16x4_t v54 = vdup_n_s16(v53);
          v46.i64[0] = __PAIR64__(v37, v36);
          v46.i64[1] = __PAIR64__(v39, v38);
          v48.i64[0] = __PAIR64__(v33, v32);
          v48.i64[1] = __PAIR64__(v35, v34);
          v55.i64[0] = __PAIR64__(v29, v28);
          v55.i64[1] = __PAIR64__(v31, v30);
          v56.i64[0] = __PAIR64__(result, v21);
          v56.i64[1] = __PAIR64__(v23, v22);
          int32x4_t v57 = vmlal_s16(v56, v51, v54);
          int16x4_t v58 = vdup_n_s16(HIWORD(v53));
          int32x4_t v59 = vmlal_s16(v57, vmovn_s32(*v50), v58);
          v60.i64[0] = __PAIR64__(v25, v24);
          v60.i64[1] = __PAIR64__(v27, v26);
          __int32 v23 = v59.i32[3];
          __int32 v22 = v59.i32[2];
          uint64_t result = v59.u32[1];
          int32x4_t v61 = vmlal_s16(vmlal_s16(v60, vmovn_s32(v47), v54), vmovn_s32(v50[1]), v58);
          __int32 v27 = v61.i32[3];
          __int32 v26 = v61.i32[2];
          __int32 v25 = v61.i32[1];
          __int32 v21 = v59.i32[0];
          int32x4_t v62 = vmlal_s16(vmlal_s16(v55, v52, v54), vmovn_s32(v50[2]), v58);
          __int32 v31 = v62.i32[3];
          __int32 v30 = v62.i32[2];
          __int32 v24 = v61.i32[0];
          __int32 v29 = v62.i32[1];
          int32x4_t v63 = vmlal_s16(vmlal_s16(v48, vmovn_s32(v45), v54), vmovn_s32(v50[3]), v58);
          __int32 v35 = v63.i32[3];
          __int32 v28 = v62.i32[0];
          __int32 v34 = v63.i32[2];
          __int32 v33 = v63.i32[1];
          int32x4_t v64 = vmlal_s16(vmlal_s16(v46, vmovn_s32(v49), v54), vmovn_s32(v50[4]), v58);
          __int32 v39 = v64.i32[3];
          __int32 v38 = v64.i32[2];
          __int32 v37 = v64.i32[1];
          __int32 v32 = v63.i32[0];
          __int32 v36 = v64.i32[0];
          uint64_t v65 = v41 + 4;
          v41 += 2;
        }
        while (v65 <= v17);
      }
      else
      {
        __int32 v21 = 0;
        uint64_t result = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        uint64_t v40 = v111;
      }
      if (v17)
      {
        int32x4_t v66 = (int32x4_t *)(*(void *)(a14 + 8 * ((int)v17 - 1)) + 4 * ((5 * v110) & 0xFFFFFFFC));
        int16x4_t v67 = vld1_dup_s16(v40);
        v68.i64[0] = __PAIR64__(result, v21);
        v68.i64[1] = __PAIR64__(v23, v22);
        int32x4_t v69 = vmlal_s16(v68, vmovn_s32(*v66), v67);
        __int32 v23 = v69.i32[3];
        __int32 v22 = v69.i32[2];
        uint64_t result = v69.u32[1];
        v70.i64[0] = __PAIR64__(v25, v24);
        v70.i64[1] = __PAIR64__(v27, v26);
        int32x4_t v71 = vmlal_s16(v70, vmovn_s32(v66[1]), v67);
        __int32 v27 = v71.i32[3];
        __int32 v26 = v71.i32[2];
        __int32 v25 = v71.i32[1];
        v72.i64[0] = __PAIR64__(v29, v28);
        v72.i64[1] = __PAIR64__(v31, v30);
        int32x4_t v73 = vmlal_s16(v72, vmovn_s32(v66[2]), v67);
        __int32 v31 = v73.i32[3];
        __int32 v30 = v73.i32[2];
        __int32 v29 = v73.i32[1];
        v74.i64[0] = __PAIR64__(v33, v32);
        __int32 v21 = v69.i32[0];
        v74.i64[1] = __PAIR64__(v35, v34);
        int32x4_t v75 = vmlal_s16(v74, vmovn_s32(v66[3]), v67);
        __int32 v35 = v75.i32[3];
        __int32 v34 = v75.i32[2];
        __int32 v33 = v75.i32[1];
        __int32 v24 = v71.i32[0];
        v76.i64[0] = __PAIR64__(v37, v36);
        v76.i64[1] = __PAIR64__(v39, v38);
        __int32 v28 = v73.i32[0];
        int32x4_t v77 = vmlal_s16(v76, vmovn_s32(v66[4]), v67);
        __int32 v39 = v77.i32[3];
        __int32 v32 = v75.i32[0];
        __int32 v38 = v77.i32[2];
        __int32 v37 = v77.i32[1];
        __int32 v36 = v77.i32[0];
      }
      v78.i64[0] = __PAIR64__(v25, v24);
      v78.i64[1] = __PAIR64__(v27, v26);
      v79.i64[0] = __PAIR64__(result, v21);
      uint64_t v19 = v110 + 4;
      v79.i64[1] = __PAIR64__(v23, v22);
      int16x8_t v80 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v79, a8), 0xEuLL)), vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL));
      v78.i64[0] = __PAIR64__(v33, v32);
      v78.i64[1] = __PAIR64__(v35, v34);
      v81.i64[0] = __PAIR64__(v29, v28);
      v81.i64[1] = __PAIR64__(v31, v30);
      int16x8_t v15 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v81, a8), 0xEuLL)), vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL));
      int8x16_t v82 = vqmovun_high_s16(vqmovun_s16(v80), v15);
      v78.i64[0] = __PAIR64__(v37, v36);
      v78.i64[1] = __PAIR64__(v39, v38);
      int16x8_t v83 = (int16x8_t)vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL);
      *(int16x4_t *)v83.i8 = vqmovn_s32((int32x4_t)v83);
      *(int8x8_t *)v83.i8 = vqmovun_s16(v83);
      *(int8x8_t *)v15.i8 = vqtbl1_s8(v82, (int8x8_t)-15857404);
      v15.i8[3] = v83.i8[3];
      uint8x8_t v84 = (uint8x8_t)vqtbl1_s8(v82, (int8x8_t)-15923197);
      v84.i8[3] = v83.i8[2];
      *(uint8x8_t *)v15.i8 = vmax_u8(*(uint8x8_t *)v15.i8, v84);
      uint8x8_t v85 = (uint8x8_t)vqtbl1_s8(v82, (int8x8_t)-15988990);
      v85.i8[3] = v83.i8[1];
      *(uint8x8_t *)v15.i8 = vmax_u8(*(uint8x8_t *)v15.i8, v85);
      uint8x8_t v86 = (uint8x8_t)vqtbl1_s8(v82, (int8x8_t)-16054783);
      v86.i8[3] = v83.i8[0];
      *(uint8x8_t *)v15.i8 = vmax_u8(vmax_u8(*(uint8x8_t *)v15.i8, v86), (uint8x8_t)vqtbl1_s8(v82, (int8x8_t)-4042652416));
      uint8x16_t v14 = vmaxq_u8((uint8x16_t)v82, (uint8x16_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1850CD790));
      v86.i32[0] = 0;
      v86.i8[3] = v15.i8[3];
      a9 = (int16x4_t)vmaxq_u8((uint8x16_t)v83, (uint8x16_t)v86.u32[0]).u64[0];
      *uint64_t v16 = v14;
      v16[1].i32[0] = a9.i32[0];
      uint64_t v16 = (uint8x16_t *)((char *)v16 + 20);
      v20 += 4;
      a12 = v109;
    }
    while (v20 <= v108);
    int v18 = v109 & 0x7FFFFFFC;
  }
  else
  {
    int v18 = 0;
  }
  if (v18 < a12)
  {
    v87.i64[0] = 0x200000002000;
    v87.i64[1] = 0x200000002000;
    do
    {
      if ((int)v17 >= 2)
      {
        uint64_t v93 = 0;
        unsigned __int32 v88 = 0;
        unsigned __int32 v89 = 0;
        unsigned __int32 v90 = 0;
        unsigned __int32 v91 = 0;
        LODWORD(result) = 0;
        int32x4_t v92 = (unsigned int *)v111;
        uint64_t v94 = (5 * v18);
        do
        {
          uint64_t v95 = (void *)(a14 + 8 * v93);
          __int32 v96 = (int32x4_t *)(*v95 + 4 * v94);
          a6.i32[0] = v96[1].i32[0];
          int32x4_t v97 = (int32x4_t *)(v95[1] + 4 * v94);
          a8.i32[0] = v97[1].i32[0];
          *(int16x4_t *)a8.i8 = vmovn_s32(a8);
          unsigned int v98 = *v92++;
          a9 = vdup_n_s16(v98);
          v14.i32[0] = v98;
          v15.i32[0] = result;
          int32x4_t v99 = vmlal_s16((int32x4_t)v15, vmovn_s32(a6), *(int16x4_t *)v14.i8);
          v100.i64[0] = __PAIR64__(v89, v88);
          v100.i64[1] = __PAIR64__(v91, v90);
          int16x4_t v101 = vdup_n_s16(HIWORD(v98));
          a6 = vmlal_s16(vmlal_s16(v100, vmovn_s32(*v96), a9), vmovn_s32(*v97), v101);
          unsigned __int32 v91 = a6.u32[3];
          v101.i32[0] = HIWORD(v98);
          unsigned __int32 v90 = a6.u32[2];
          unsigned __int32 v89 = a6.u32[1];
          unsigned __int32 v88 = a6.i32[0];
          int16x8_t v15 = (int16x8_t)vmlal_s16(v99, *(int16x4_t *)a8.i8, v101);
          uint64_t result = v15.u32[0];
          uint64_t v102 = v93 + 4;
          v93 += 2;
        }
        while (v102 <= v17);
      }
      else
      {
        unsigned __int32 v88 = 0;
        unsigned __int32 v89 = 0;
        unsigned __int32 v90 = 0;
        unsigned __int32 v91 = 0;
        uint64_t result = 0;
        int32x4_t v92 = (unsigned int *)v111;
      }
      if (v17)
      {
        uint64_t v103 = (int32x4_t *)(*(void *)(a14 + 8 * ((int)v17 - 1)) + 4 * (5 * v18));
        int32x4_t v104 = *v103;
        a6.i32[0] = v103[1].i32[0];
        *(int16x4_t *)a6.i8 = vmovn_s32(a6);
        *(int16x4_t *)v104.i8 = vmovn_s32(*v103);
        v105.i64[0] = __PAIR64__(v89, v88);
        v105.i64[1] = __PAIR64__(v91, v90);
        a9.i32[0] = *(unsigned __int16 *)v92;
        a8 = vmlal_s16(v105, *(int16x4_t *)v104.i8, vdup_n_s16(a9.u32[0]));
        unsigned __int32 v91 = a8.u32[3];
        unsigned __int32 v90 = a8.u32[2];
        unsigned __int32 v89 = a8.u32[1];
        unsigned __int32 v88 = a8.i32[0];
        v104.i32[0] = result;
        uint64_t result = vmlal_s16(v104, *(int16x4_t *)a6.i8, a9).u32[0];
      }
      v106.i64[0] = __PAIR64__(v89, v88);
      v106.i64[1] = __PAIR64__(v91, v90);
      a6.i32[0] = result;
      int16x8_t v107 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v106, v87), 0xEuLL)), vshrq_n_s32(vaddq_s32(a6, v87), 0xEuLL));
      *(int8x8_t *)v107.i8 = vqmovun_s16(v107);
      a6 = (int32x4_t)vzip1q_s8((int8x16_t)v107, (int8x16_t)v87);
      v107.u64[1] = (unint64_t)a4;
      a4 = (uint8x8_t)vqtbl1_s8((int8x16_t)v107, (int8x8_t)0xF0E0D0403020100);
      *(int8x8_t *)a6.i8 = vmovn_s16((int16x8_t)a6);
      v16->i32[0] = a6.i32[0];
      v16->i8[4] = vmaxv_u8(a4);
      uint64_t v16 = (uint8x16_t *)((char *)v16 + 5);
      ++v18;
    }
    while (v18 < a12);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,2,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint8x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (const __int16 *)(result + 8);
  if (a4 >= 4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 4;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int16x8_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        int16x8_t v15 = v8;
        do
        {
          uint64_t v17 = (void *)(a6 + 8 * v16);
          int v18 = (int32x4_t *)(*v17 + 8 * v10);
          uint64_t v19 = (int32x4_t *)(v17[1] + 8 * v10);
          unsigned int v20 = *(_DWORD *)v15;
          v15 += 2;
          int16x4_t v21 = vdup_n_s16(v20);
          int16x4_t v22 = vdup_n_s16(HIWORD(v20));
          int32x4_t v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(v18[1]), v21), vmovn_s32(v19[1]), v22);
          int32x4_t v13 = vmlal_s16(vmlal_s16(v13, vmovn_s32(*v18), v21), vmovn_s32(*v19), v22);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        __int32 v23 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        int16x4_t v24 = vld1_dup_s16(v15);
        int32x4_t v14 = vmlal_s16(v14, vmovn_s32(v23[1]), v24);
        int32x4_t v13 = vmlal_s16(v13, vmovn_s32(*v23), v24);
      }
      v10 += 4;
      int8x8_t v25 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL)));
      *(uint8x8_t *)v26.i8 = vmax_u8((uint8x8_t)vuzp1_s8(v25, *(int8x8_t *)v12.i8), (uint8x8_t)vuzp2_s8(v25, *(int8x8_t *)v12.i8));
      v26.i64[1] = v26.i64[0];
      *v6++ = vmax_u8((uint8x8_t)v25, (uint8x8_t)vqtbl1_s8(v26, (int8x8_t)0x3FF02FF01FF00FFLL));
      v11 += 4;
    }
    while (v11 <= a4);
    int v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    if ((int)v7 >= 2)
    {
      uint64_t v29 = 0;
      int32x4_t v27 = 0uLL;
      __int32 v28 = v8;
      do
      {
        unsigned int v30 = *(_DWORD *)v28;
        v28 += 2;
        uint64_t result = HIWORD(v30);
        int32x4_t v27 = vmlal_s16(vmlal_s16(v27, vuzp1_s16(*(int16x4_t *)(*(void *)(a6 + 8 * v29) + 4 * (2 * v9)), (int16x4_t)0x200000002000), vdup_n_s16(v30)), vuzp1_s16(*(int16x4_t *)(*(void *)(a6 + 8 * v29 + 8) + 4 * (2 * v9)), (int16x4_t)0x200000002000), vdup_n_s16(result));
        uint64_t v31 = v29 + 4;
        v29 += 2;
      }
      while (v31 <= v7);
    }
    else
    {
      int32x4_t v27 = 0uLL;
      __int32 v28 = v8;
    }
    if (v7)
    {
      int16x4_t v32 = vld1_dup_s16(v28);
      int32x4_t v27 = vmlal_s16(v27, vuzp1_s16(*(int16x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), (int16x4_t)0x200000002000), v32);
    }
    *(int32x2_t *)v27.i8 = vadd_s32(*(int32x2_t *)v27.i8, (int32x2_t)0x200000002000);
    int16x8_t v33 = (int16x8_t)vshrq_n_s32(v27, 0xEuLL);
    *(int16x4_t *)v33.i8 = vqmovn_s32((int32x4_t)v33);
    *(int8x8_t *)v33.i8 = vqmovun_s16(v33);
    v6->i8[0] = v33.i8[0];
    v6->i8[1] = vmaxv_u8(*(uint8x8_t *)v33.i8);
    uint64_t v6 = (uint8x8_t *)((char *)v6 + 2);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,5,(AlphaStyle)1>(uint64_t result, double a2, double a3, uint8x8_t a4, double a5, int32x4_t a6, double a7, int32x4_t a8, int16x4_t a9, uint64_t a10, uint64_t a11, int a12, uint8x16_t **a13, uint64_t a14)
{
  uint64_t v16 = *a13;
  uint64_t v17 = *(int *)(result + 4);
  int32x4_t v113 = (__int16 *)(result + 8);
  if (a12 >= 4)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 4;
    *(double *)&a4 = NAN;
    a6.i32[1] = -1;
    unint64_t v110 = a12;
    a8.i64[0] = 0x200000002000;
    a8.i64[1] = 0x200000002000;
    int v111 = a12;
    do
    {
      uint64_t v112 = v19;
      if ((int)v17 >= 2)
      {
        uint64_t v41 = 0;
        __int32 v21 = 0;
        LODWORD(result) = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        uint64_t v42 = (5 * v19) & 0xFFFFFFFC;
        uint64_t v40 = v113;
        do
        {
          int16x4_t v43 = (void *)(a14 + 8 * v41);
          int16x8_t v44 = (int32x4_t *)(*v43 + 4 * v42);
          int32x4_t v46 = v44[2];
          int32x4_t v45 = v44[3];
          int32x4_t v48 = *v44;
          int32x4_t v47 = v44[1];
          int32x4_t v49 = v44[4];
          int32x4_t v50 = (int32x4_t *)(v43[1] + 4 * v42);
          int16x4_t v51 = vmovn_s32(v48);
          int16x4_t v52 = vmovn_s32(v46);
          unsigned int v53 = *(_DWORD *)v40;
          v40 += 2;
          int16x4_t v54 = vdup_n_s16(v53);
          v46.i64[0] = __PAIR64__(v37, v36);
          v46.i64[1] = __PAIR64__(v39, v38);
          v48.i64[0] = __PAIR64__(v33, v32);
          v48.i64[1] = __PAIR64__(v35, v34);
          v55.i64[0] = __PAIR64__(v29, v28);
          v55.i64[1] = __PAIR64__(v31, v30);
          v56.i64[0] = __PAIR64__(result, v21);
          v56.i64[1] = __PAIR64__(v23, v22);
          int32x4_t v57 = vmlal_s16(v56, v51, v54);
          int16x4_t v58 = vdup_n_s16(HIWORD(v53));
          int32x4_t v59 = vmlal_s16(v57, vmovn_s32(*v50), v58);
          v60.i64[0] = __PAIR64__(v25, v24);
          v60.i64[1] = __PAIR64__(v27, v26);
          __int32 v23 = v59.i32[3];
          __int32 v22 = v59.i32[2];
          uint64_t result = v59.u32[1];
          int32x4_t v61 = vmlal_s16(vmlal_s16(v60, vmovn_s32(v47), v54), vmovn_s32(v50[1]), v58);
          __int32 v27 = v61.i32[3];
          __int32 v26 = v61.i32[2];
          __int32 v25 = v61.i32[1];
          __int32 v21 = v59.i32[0];
          int32x4_t v62 = vmlal_s16(vmlal_s16(v55, v52, v54), vmovn_s32(v50[2]), v58);
          __int32 v31 = v62.i32[3];
          __int32 v30 = v62.i32[2];
          __int32 v24 = v61.i32[0];
          __int32 v29 = v62.i32[1];
          int32x4_t v63 = vmlal_s16(vmlal_s16(v48, vmovn_s32(v45), v54), vmovn_s32(v50[3]), v58);
          __int32 v35 = v63.i32[3];
          __int32 v28 = v62.i32[0];
          __int32 v34 = v63.i32[2];
          __int32 v33 = v63.i32[1];
          int32x4_t v64 = vmlal_s16(vmlal_s16(v46, vmovn_s32(v49), v54), vmovn_s32(v50[4]), v58);
          __int32 v39 = v64.i32[3];
          __int32 v38 = v64.i32[2];
          __int32 v37 = v64.i32[1];
          __int32 v32 = v63.i32[0];
          __int32 v36 = v64.i32[0];
          uint64_t v65 = v41 + 4;
          v41 += 2;
        }
        while (v65 <= v17);
      }
      else
      {
        __int32 v21 = 0;
        uint64_t result = 0;
        __int32 v22 = 0;
        __int32 v23 = 0;
        __int32 v24 = 0;
        __int32 v25 = 0;
        __int32 v26 = 0;
        __int32 v27 = 0;
        __int32 v28 = 0;
        __int32 v29 = 0;
        __int32 v30 = 0;
        __int32 v31 = 0;
        __int32 v32 = 0;
        __int32 v33 = 0;
        __int32 v34 = 0;
        __int32 v35 = 0;
        __int32 v36 = 0;
        __int32 v37 = 0;
        __int32 v38 = 0;
        __int32 v39 = 0;
        uint64_t v40 = v113;
      }
      if (v17)
      {
        int32x4_t v66 = (int32x4_t *)(*(void *)(a14 + 8 * ((int)v17 - 1)) + 4 * ((5 * v112) & 0xFFFFFFFC));
        int16x4_t v67 = vld1_dup_s16(v40);
        v68.i64[0] = __PAIR64__(result, v21);
        v68.i64[1] = __PAIR64__(v23, v22);
        int32x4_t v69 = vmlal_s16(v68, vmovn_s32(*v66), v67);
        __int32 v23 = v69.i32[3];
        __int32 v22 = v69.i32[2];
        uint64_t result = v69.u32[1];
        v70.i64[0] = __PAIR64__(v25, v24);
        v70.i64[1] = __PAIR64__(v27, v26);
        int32x4_t v71 = vmlal_s16(v70, vmovn_s32(v66[1]), v67);
        __int32 v27 = v71.i32[3];
        __int32 v26 = v71.i32[2];
        __int32 v25 = v71.i32[1];
        v72.i64[0] = __PAIR64__(v29, v28);
        v72.i64[1] = __PAIR64__(v31, v30);
        int32x4_t v73 = vmlal_s16(v72, vmovn_s32(v66[2]), v67);
        __int32 v31 = v73.i32[3];
        __int32 v30 = v73.i32[2];
        __int32 v29 = v73.i32[1];
        v74.i64[0] = __PAIR64__(v33, v32);
        __int32 v21 = v69.i32[0];
        v74.i64[1] = __PAIR64__(v35, v34);
        int32x4_t v75 = vmlal_s16(v74, vmovn_s32(v66[3]), v67);
        __int32 v35 = v75.i32[3];
        __int32 v34 = v75.i32[2];
        __int32 v33 = v75.i32[1];
        __int32 v24 = v71.i32[0];
        v76.i64[0] = __PAIR64__(v37, v36);
        v76.i64[1] = __PAIR64__(v39, v38);
        __int32 v28 = v73.i32[0];
        int32x4_t v77 = vmlal_s16(v76, vmovn_s32(v66[4]), v67);
        __int32 v39 = v77.i32[3];
        __int32 v32 = v75.i32[0];
        __int32 v38 = v77.i32[2];
        __int32 v37 = v77.i32[1];
        __int32 v36 = v77.i32[0];
      }
      v78.i64[0] = __PAIR64__(v25, v24);
      v78.i64[1] = __PAIR64__(v27, v26);
      v79.i64[0] = __PAIR64__(result, v21);
      v79.i64[1] = __PAIR64__(v23, v22);
      uint64_t v19 = v112 + 4;
      int16x8_t v80 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v79, a8), 0xEuLL)), vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL));
      v78.i64[0] = __PAIR64__(v33, v32);
      v78.i64[1] = __PAIR64__(v35, v34);
      v81.i64[0] = __PAIR64__(v29, v28);
      v81.i64[1] = __PAIR64__(v31, v30);
      int16x8_t v82 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v81, a8), 0xEuLL)), vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL));
      int8x16_t v83 = vqmovun_high_s16(vqmovun_s16(v80), v82);
      v78.i64[0] = __PAIR64__(v37, v36);
      v78.i64[1] = __PAIR64__(v39, v38);
      int16x8_t v84 = (int16x8_t)vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL);
      *(int16x4_t *)v84.i8 = vqmovn_s32((int32x4_t)v84);
      a9 = (int16x4_t)vqmovun_s16(v84);
      *(int8x8_t *)v82.i8 = vqtbl1_s8(v83, (int8x8_t)-15857404);
      v82.i8[3] = a9.i8[3];
      uint8x8_t v85 = (uint8x8_t)vqtbl1_s8(v83, (int8x8_t)-15923197);
      v85.i8[3] = a9.i8[2];
      *(uint8x8_t *)v82.i8 = vmax_u8(*(uint8x8_t *)v82.i8, v85);
      uint8x8_t v86 = (uint8x8_t)vqtbl1_s8(v83, (int8x8_t)-15988990);
      v86.i8[3] = a9.i8[1];
      *(uint8x8_t *)v82.i8 = vmax_u8(*(uint8x8_t *)v82.i8, v86);
      uint8x8_t v87 = (uint8x8_t)vqtbl1_s8(v83, (int8x8_t)-16054783);
      v87.i8[3] = a9.i8[0];
      *(uint8x8_t *)v82.i8 = vmax_u8(vmax_u8(*(uint8x8_t *)v82.i8, v87), (uint8x8_t)vqtbl1_s8(v83, (int8x8_t)-4042652416));
      int32x4_t v15 = (int32x4_t)vqtbl1q_s8((int8x16_t)v82, (int8x16_t)xmmword_1850CD7A0);
      uint8x16_t v14 = vmaxq_u8((uint8x16_t)v83, (uint8x16_t)v15);
      *uint64_t v16 = v14;
      v16[1].i32[0] = a9.i32[0];
      uint64_t v16 = (uint8x16_t *)((char *)v16 + 20);
      v20 += 4;
      a12 = v111;
    }
    while (v20 <= v110);
    int v18 = v111 & 0x7FFFFFFC;
  }
  else
  {
    int v18 = 0;
  }
  if (v18 < a12)
  {
    v88.i64[0] = 0x200000002000;
    v88.i64[1] = 0x200000002000;
    do
    {
      if ((int)v17 >= 2)
      {
        uint64_t v94 = 0;
        unsigned __int32 v89 = 0;
        unsigned __int32 v90 = 0;
        unsigned __int32 v91 = 0;
        unsigned __int32 v92 = 0;
        LODWORD(result) = 0;
        uint64_t v93 = (unsigned int *)v113;
        uint64_t v95 = (5 * v18);
        do
        {
          __int32 v96 = (void *)(a14 + 8 * v94);
          int32x4_t v97 = (int32x4_t *)(*v96 + 4 * v95);
          a6.i32[0] = v97[1].i32[0];
          unsigned int v98 = (int32x4_t *)(v96[1] + 4 * v95);
          a8.i32[0] = v98[1].i32[0];
          *(int16x4_t *)a8.i8 = vmovn_s32(a8);
          unsigned int v99 = *v93++;
          a9 = vdup_n_s16(v99);
          v14.i32[0] = v99;
          v15.i32[0] = result;
          int32x4_t v100 = vmlal_s16(v15, vmovn_s32(a6), *(int16x4_t *)v14.i8);
          v101.i64[0] = __PAIR64__(v90, v89);
          v101.i64[1] = __PAIR64__(v92, v91);
          int16x4_t v102 = vdup_n_s16(HIWORD(v99));
          a6 = vmlal_s16(vmlal_s16(v101, vmovn_s32(*v97), a9), vmovn_s32(*v98), v102);
          unsigned __int32 v92 = a6.u32[3];
          v102.i32[0] = HIWORD(v99);
          unsigned __int32 v91 = a6.u32[2];
          unsigned __int32 v90 = a6.u32[1];
          unsigned __int32 v89 = a6.i32[0];
          int32x4_t v15 = vmlal_s16(v100, *(int16x4_t *)a8.i8, v102);
          uint64_t result = v15.u32[0];
          uint64_t v103 = v94 + 4;
          v94 += 2;
        }
        while (v103 <= v17);
      }
      else
      {
        unsigned __int32 v89 = 0;
        unsigned __int32 v90 = 0;
        unsigned __int32 v91 = 0;
        unsigned __int32 v92 = 0;
        uint64_t result = 0;
        uint64_t v93 = (unsigned int *)v113;
      }
      if (v17)
      {
        int32x4_t v104 = (int32x4_t *)(*(void *)(a14 + 8 * ((int)v17 - 1)) + 4 * (5 * v18));
        int32x4_t v105 = *v104;
        a6.i32[0] = v104[1].i32[0];
        *(int16x4_t *)a6.i8 = vmovn_s32(a6);
        *(int16x4_t *)v105.i8 = vmovn_s32(*v104);
        v106.i64[0] = __PAIR64__(v90, v89);
        v106.i64[1] = __PAIR64__(v92, v91);
        a9.i32[0] = *(unsigned __int16 *)v93;
        a8 = vmlal_s16(v106, *(int16x4_t *)v105.i8, vdup_n_s16(a9.u32[0]));
        unsigned __int32 v92 = a8.u32[3];
        unsigned __int32 v91 = a8.u32[2];
        unsigned __int32 v90 = a8.u32[1];
        unsigned __int32 v89 = a8.i32[0];
        v105.i32[0] = result;
        uint64_t result = vmlal_s16(v105, *(int16x4_t *)a6.i8, a9).u32[0];
      }
      v107.i64[0] = __PAIR64__(v90, v89);
      v107.i64[1] = __PAIR64__(v92, v91);
      a6.i32[0] = result;
      a6 = vshrq_n_s32(vaddq_s32(a6, v88), 0xEuLL);
      *(int8x8_t *)v107.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v107, v88), 0xEuLL)), a6));
      __int16 v108 = v107.u8[3];
      __int16 v109 = v107.u8[2];
      v16->i8[4] = v107.i8[4];
      v107.u64[1] = (unint64_t)a4;
      a4 = (uint8x8_t)vqtbl1_s8((int8x16_t)v107, (int8x8_t)0xF0E0D0403020100);
      v107.i8[0] = vmaxv_u8(a4);
      v107.i16[1] = v107.u8[1];
      v107.i16[2] = v109;
      v107.i16[3] = v108;
      v16->i32[0] = vmovn_s16((int16x8_t)v107).u32[0];
      uint64_t v16 = (uint8x16_t *)((char *)v16 + 5);
      ++v18;
    }
    while (v18 < a12);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,2,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint8x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (const __int16 *)(result + 8);
  if (a4 >= 4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 4;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        int32x4_t v15 = v8;
        do
        {
          uint64_t v17 = (void *)(a6 + 8 * v16);
          int v18 = (int32x4_t *)(*v17 + 8 * v10);
          uint64_t v19 = (int32x4_t *)(v17[1] + 8 * v10);
          unsigned int v20 = *(_DWORD *)v15;
          v15 += 2;
          int16x4_t v21 = vdup_n_s16(v20);
          int16x4_t v22 = vdup_n_s16(HIWORD(v20));
          int32x4_t v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(v18[1]), v21), vmovn_s32(v19[1]), v22);
          int32x4_t v13 = vmlal_s16(vmlal_s16(v13, vmovn_s32(*v18), v21), vmovn_s32(*v19), v22);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        __int32 v23 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        int16x4_t v24 = vld1_dup_s16(v15);
        int32x4_t v14 = vmlal_s16(v14, vmovn_s32(v23[1]), v24);
        int32x4_t v13 = vmlal_s16(v13, vmovn_s32(*v23), v24);
      }
      v10 += 4;
      int8x8_t v25 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL)));
      *v6++ = vmax_u8((uint8x8_t)v25, (uint8x8_t)(*(void *)&vzip1_s8((int8x8_t)vmax_u8((uint8x8_t)vuzp1_s8(v25, *(int8x8_t *)v12.i8), (uint8x8_t)vuzp2_s8(v25, *(int8x8_t *)v12.i8)), *(int8x8_t *)v12.i8) & 0xFF00FF00FF00FFLL));
      v11 += 4;
    }
    while (v11 <= a4);
    int v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    int v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    if ((int)v7 >= 2)
    {
      uint64_t v28 = 0;
      int32x4_t v26 = 0uLL;
      __int32 v27 = v8;
      do
      {
        unsigned int v29 = *(_DWORD *)v27;
        v27 += 2;
        uint64_t result = HIWORD(v29);
        int32x4_t v26 = vmlal_s16(vmlal_s16(v26, vuzp1_s16(*(int16x4_t *)(*(void *)(a6 + 8 * v28) + 4 * (2 * v9)), (int16x4_t)0x200000002000), vdup_n_s16(v29)), vuzp1_s16(*(int16x4_t *)(*(void *)(a6 + 8 * v28 + 8) + 4 * (2 * v9)), (int16x4_t)0x200000002000), vdup_n_s16(result));
        uint64_t v30 = v28 + 4;
        v28 += 2;
      }
      while (v30 <= v7);
    }
    else
    {
      int32x4_t v26 = 0uLL;
      __int32 v27 = v8;
    }
    if (v7)
    {
      int16x4_t v31 = vld1_dup_s16(v27);
      int32x4_t v26 = vmlal_s16(v26, vuzp1_s16(*(int16x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), (int16x4_t)0x200000002000), v31);
    }
    *(int32x2_t *)v26.i8 = vadd_s32(*(int32x2_t *)v26.i8, (int32x2_t)0x200000002000);
    int16x8_t v32 = (int16x8_t)vshrq_n_s32(v26, 0xEuLL);
    *(int16x4_t *)v32.i8 = vqmovn_s32((int32x4_t)v32);
    *(int8x8_t *)v32.i8 = vqmovun_s16(v32);
    v6->i8[1] = v32.i8[1];
    v6->i8[0] = vmaxv_u8(*(uint8x8_t *)v32.i8);
    uint64_t v6 = (uint8x8_t *)((char *)v6 + 2);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,4,(AlphaStyle)0>(uint64_t result, uint64_t a2, uint64_t a3, int a4, int8x8_t **a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *(int *)(result + 4);
  uint64_t v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    int v10 = 0;
    unint64_t v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = (4 * v10) & 0xFFFFFFF8;
        int32x4_t v15 = v8;
        do
        {
          int v18 = (void *)(a6 + 8 * v16);
          uint64_t v19 = (int32x4_t *)(*v18 + 4 * v17);
          unsigned int v20 = (int32x4_t *)(v18[1] + 4 * v17);
          unsigned int v21 = *(_DWORD *)v15;
          v15 += 2;
          int16x4_t v22 = vdup_n_s16(v21);
          int16x4_t v23 = vdup_n_s16(HIWORD(v21));
          int32x4_t v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(v19[1]), v22), vmovn_s32(v20[1]), v23);
          int32x4_t v13 = vmlal_s16(vmlal_s16(v13, vmovn_s32(*v19), v22), vmovn_s32(*v20), v23);
          uint64_t result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if (v7)
      {
        int16x4_t v24 = (int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        int16x4_t v25 = vld1_dup_s16(v15);
        int32x4_t v14 = vmlal_s16(v14, vmovn_s32(v24[1]), v25);
        int32x4_t v13 = vmlal_s16(v13, vmovn_s32(*v24), v25);
      }
      v10 += 2;
      *v6++ = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL)));
      v11 += 2;
    }
    while (v11 <= a4);
    signed int v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    signed int v9 = 0;
  }
  if (v9 < a4)
  {
    v26.i64[0] = 0x200000002000;
    v26.i64[1] = 0x200000002000;
    do
    {
      int32x4_t v27 = 0uLL;
      uint64_t v28 = v8;
      if ((int)v7 >= 2)
      {
        uint64_t v29 = 0;
        uint64_t v28 = v8;
        do
        {
          uint64_t v30 = (uint64_t *)(a6 + 8 * v29);
          uint64_t result = *v30;
          unsigned int v31 = *(_DWORD *)v28;
          v28 += 2;
          int32x4_t v27 = vmlal_s16(vmlal_s16(v27, vmovn_s32(*(int32x4_t *)(*v30 + 4 * (4 * v9))), vdup_n_s16(v31)), vmovn_s32(*(int32x4_t *)(v30[1] + 4 * (4 * v9))), vdup_n_s16(HIWORD(v31)));
          uint64_t v32 = v29 + 4;
          v29 += 2;
        }
        while (v32 <= v7);
      }
      if (v7)
      {
        int16x4_t v33 = vld1_dup_s16(v28);
        int32x4_t v27 = vmlal_s16(v27, vmovn_s32(*(int32x4_t *)(*(void *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9))), v33);
      }
      int16x8_t v34 = (int16x8_t)vshrq_n_s32(vaddq_s32(v27, v26), 0xEuLL);
      *(int16x4_t *)v34.i8 = vqmovn_s32((int32x4_t)v34);
      v6->i32[0] = vqmovun_s16(v34).u32[0];
      uint64_t v6 = (int8x8_t *)((char *)v6 + 4);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

float32x2_t *resample_horizontal<float,float,4,true>(float32x2_t *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a4 >= 1 && a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = a6[1];
    unint64_t v11 = *a7;
    unint64_t v12 = a7[1];
    if (v11 >> 4 >= v12 >> 2) {
      unint64_t v13 = v12 >> 2;
    }
    else {
      unint64_t v13 = v11 >> 4;
    }
    unint64_t v14 = a4;
    uint64_t v15 = 4 * a2;
    uint64_t v16 = v15 + 8;
    uint64_t v17 = (char *)result + (v15 + 8) * a4;
    if (v13 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8]) {
      unint64_t v13 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    }
    unint64_t v18 = (4 * a2 + 23) / (4 * a2 + 8);
    if (a2 > 1) {
      unint64_t v18 = 1;
    }
    BOOL v19 = a2 > 3;
    BOOL v20 = (a2 & 3) == 0;
    LODWORD(v21) = (16 * (a2 & 3)) | 0x40;
    if ((a2 & 3) != 0) {
      uint64_t v21 = v21;
    }
    else {
      uint64_t v21 = 128;
    }
    unint64_t v22 = v14 - v18;
    unsigned int v23 = a2 >> 2;
    if (!v20) {
      BOOL v19 = 0;
    }
    unint64_t v24 = ((v21 - 1) & 0xFFFFFFFFFFFFFFC0) + 64 * (v23 - v19);
    uint64_t v25 = a8;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    while (1)
    {
      int32x4_t v26 = *(float32x4_t **)(a5 + 8 * v8);
      if (v14 <= v18)
      {
        unint64_t v27 = 0;
        uint64_t v28 = result;
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = result;
        while (1)
        {
          uint64_t v29 = v28->i32[0];
          uint64_t v30 = (float32x4_t *)(v9 + 16 * v29);
          unsigned int v31 = (float32x4_t *)((char *)v30 + v24);
          if ((unint64_t)v30 + v24 > 16 * v13 + v9) {
            break;
          }
          if (v30 >= v31)
          {
            v36.i64[0] = 0x8000000080000000;
            v36.i64[1] = 0x8000000080000000;
            v37.i64[0] = 0x8000000080000000;
            v37.i64[1] = 0x8000000080000000;
            v38.i64[0] = 0x8000000080000000;
            v38.i64[1] = 0x8000000080000000;
            v39.i64[0] = 0x8000000080000000;
            v39.i64[1] = 0x8000000080000000;
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
          }
          else
          {
            uint64_t v32 = v28 + 1;
            int v33 = v28->i32[1];
            int16x8_t v34 = (float32x4_t *)(v10 + 4 * v29);
            unint64_t v35 = (unint64_t)&v31[-4];
            if ((unint64_t)v30 < v35)
            {
              v37.i64[0] = 0x8000000080000000;
              v37.i64[1] = 0x8000000080000000;
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v39.i64[0] = 0x8000000080000000;
              v39.i64[1] = 0x8000000080000000;
              v40.i64[0] = 0x8000000080000000;
              v40.i64[1] = 0x8000000080000000;
              uint64_t v42 = v30;
              v36.i64[0] = 0x8000000080000000;
              v36.i64[1] = 0x8000000080000000;
              do
              {
                float32x4_t v43 = *(float32x4_t *)v32->f32;
                v32 += 2;
                float32x4_t v44 = v43;
                uint64_t v30 = v42 + 4;
                float32x4_t v37 = vmlaq_n_f32(v37, *v42, v43.f32[0]);
                float32x4_t v38 = vmlaq_lane_f32(v38, v42[1], *(float32x2_t *)v43.f32, 1);
                float32x4_t v39 = vmlaq_laneq_f32(v39, v42[2], v43, 2);
                float32x4_t v40 = vmlaq_laneq_f32(v40, v42[3], v43, 3);
                float32x4_t v45 = *v34++;
                float32x4_t v36 = vmlaq_f32(v36, v45, v44);
                v33 -= 4;
                uint64_t v42 = v30;
              }
              while ((unint64_t)v30 < v35);
            }
            else
            {
              v36.i64[0] = 0x8000000080000000;
              v36.i64[1] = 0x8000000080000000;
              v37.i64[0] = 0x8000000080000000;
              v37.i64[1] = 0x8000000080000000;
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v39.i64[0] = 0x8000000080000000;
              v39.i64[1] = 0x8000000080000000;
              v40.i64[0] = 0x8000000080000000;
              v40.i64[1] = 0x8000000080000000;
            }
            if (v33 >= 1)
            {
              float32x4_t v37 = vmlaq_n_f32(v37, *v30, COERCE_FLOAT(*(_OWORD *)v32->f32));
              float32x4_t v38 = vmlaq_lane_f32(v38, v30[1], *v32, 1);
              float32x4_t v39 = vmlaq_laneq_f32(v39, v30[2], *(float32x4_t *)v32->f32, 2);
              float32x4_t v40 = vmlaq_laneq_f32(v40, v30[3], *(float32x4_t *)v32->f32, 3);
              float32x4_t v36 = vmlaq_f32(v36, *v34, *(float32x4_t *)v32->f32);
            }
          }
          *int32x4_t v26 = vaddq_f32(vaddq_f32(v37, v39), vaddq_f32(v38, v40));
          float32x2_t v41 = vadd_f32(*(float32x2_t *)v36.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL));
          v26[1].i32[0] = vadd_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1)).u32[0];
          int32x4_t v26 = (float32x4_t *)((char *)v26 + 20);
          ++v27;
          uint64_t v28 = (float32x2_t *)((char *)v28 + v16);
          if (v27 == v22)
          {
            unint64_t v27 = v22;
            break;
          }
        }
      }
      if (v27 < v14) {
        break;
      }
LABEL_97:
      v9 += v11;
      v10 += v12;
      if (++v8 == v25) {
        return result;
      }
    }
    while (1)
    {
      int v46 = v28->i32[1];
      uint64_t v47 = v28->i32[0];
      if ((int)v47 >= (int)v13) {
        __int32 v48 = v13;
      }
      else {
        __int32 v48 = v28->i32[0];
      }
      int v49 = v13 - v48;
      if (v46 >= v49) {
        int v46 = v49;
      }
      if (v46 < 1)
      {
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        v55.i64[0] = 0x8000000080000000;
        v55.i64[1] = 0x8000000080000000;
        v56.i64[0] = 0x8000000080000000;
        v56.i64[1] = 0x8000000080000000;
        v57.i64[0] = 0x8000000080000000;
        v57.i64[1] = 0x8000000080000000;
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        goto LABEL_94;
      }
      int32x4_t v50 = (float32x4_t *)(v9 + 16 * v47);
      unint64_t v51 = (unint64_t)&v50[v46 - 4];
      int16x4_t v52 = (float32x4_t *)(v10 + 4 * v47);
      unsigned int v53 = v28 + 1;
      if ((unint64_t)v50 >= v51)
      {
        v55.i64[0] = 0x8000000080000000;
        v55.i64[1] = 0x8000000080000000;
        v56.i64[0] = 0x8000000080000000;
        v56.i64[1] = 0x8000000080000000;
        v57.i64[0] = 0x8000000080000000;
        v57.i64[1] = 0x8000000080000000;
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        goto LABEL_59;
      }
      uint64_t v54 = v46;
      v55.i64[0] = 0x8000000080000000;
      v55.i64[1] = 0x8000000080000000;
      v56.i64[0] = 0x8000000080000000;
      v56.i64[1] = 0x8000000080000000;
      v57.i64[0] = 0x8000000080000000;
      v57.i64[1] = 0x8000000080000000;
      v58.i64[0] = 0x8000000080000000;
      v58.i64[1] = 0x8000000080000000;
      v59.i64[0] = 0x8000000080000000;
      v59.i64[1] = 0x8000000080000000;
      do
      {
        unint64_t v60 = v17 - (char *)v53;
        if ((unint64_t)(v17 - (char *)v53) >= 0x10) {
          unint64_t v60 = 16;
        }
        if (v60 < 0x10)
        {
          if (v54)
          {
            if (v54 == 1)
            {
              float32x4_t v61 = (float32x4_t)v53->u32[0];
            }
            else
            {
              int32x2_t v64 = 0;
              if (v54 != 2)
              {
                int32x2_t v65 = 0;
                if ((v46 & 1) == 0) {
                  v65.i32[0] = v53[1].i32[1];
                }
                v64.i32[0] = v53[1].i32[0];
                int32x2_t v64 = vzip1_s32(v64, v65);
              }
              *(float32x2_t *)v61.f32 = *v53;
              *(int32x2_t *)&v61.u32[2] = v64;
            }
          }
          else
          {
            float32x4_t v61 = 0uLL;
          }
        }
        else
        {
          float32x4_t v61 = *(float32x4_t *)v53->f32;
        }
        v53 += 2;
        int32x4_t v62 = v50 + 4;
        float32x4_t v55 = vmlaq_n_f32(v55, *v50, v61.f32[0]);
        float32x4_t v56 = vmlaq_lane_f32(v56, v50[1], *(float32x2_t *)v61.f32, 1);
        float32x4_t v57 = vmlaq_laneq_f32(v57, v50[2], v61, 2);
        float32x4_t v58 = vmlaq_laneq_f32(v58, v50[3], v61, 3);
        float32x4_t v63 = *v52++;
        float32x4_t v59 = vmlaq_f32(v59, v63, v61);
        v54 -= 4;
        int32x4_t v50 = v62;
      }
      while ((unint64_t)v62 < v51);
      if ((int)v54 >= 1) {
        break;
      }
LABEL_94:
      *int32x4_t v26 = vaddq_f32(vaddq_f32(v55, v57), vaddq_f32(v56, v58));
      float32x2_t v80 = vadd_f32(*(float32x2_t *)v59.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL));
      v26[1].i32[0] = vadd_f32(v80, (float32x2_t)vdup_lane_s32((int32x2_t)v80, 1)).u32[0];
      int32x4_t v26 = (float32x4_t *)((char *)v26 + 20);
      ++v27;
      uint64_t v28 = (float32x2_t *)((char *)v28 + v16);
      if (v27 == v14) {
        goto LABEL_97;
      }
    }
    int v46 = v54;
    int32x4_t v50 = v62;
LABEL_59:
    int v66 = v46;
    while (1)
    {
      unint64_t v67 = v17 - (char *)v53;
      if ((unint64_t)(v17 - (char *)v53) >= 0x10) {
        unint64_t v67 = 16;
      }
      if (v67 < 0x10)
      {
        if (v66 == 1)
        {
          unsigned int v75 = v53->i32[0];
          v53 += 2;
          float32x4_t v68 = (float32x4_t)v75;
          float32x4_t v71 = *v50;
          goto LABEL_74;
        }
        int32x2_t v76 = 0;
        if (v66 != 2)
        {
          int32x2_t v77 = 0;
          if ((v46 & 1) == 0) {
            v77.i32[0] = v53[1].i32[1];
          }
          v76.i32[0] = v53[1].i32[0];
          int32x2_t v76 = vzip1_s32(v76, v77);
        }
        *(float32x2_t *)v68.f32 = *v53;
        *(int32x2_t *)&v68.u32[2] = v76;
      }
      else
      {
        float32x4_t v68 = *(float32x4_t *)v53->f32;
      }
      v53 += 2;
      if (v66 >= 4)
      {
        float32x4_t v69 = v50[3];
LABEL_66:
        float32x4_t v70 = v50[2];
LABEL_67:
        float32x4_t v71 = *v50;
        float32x4_t v72 = v50[1];
        goto LABEL_68;
      }
      if ((v66 & 0x3FFFFFFE) != 0)
      {
        float32x4_t v70 = 0uLL;
        float32x4_t v69 = 0uLL;
        if (v66 == 2) {
          goto LABEL_67;
        }
        goto LABEL_66;
      }
      float32x4_t v71 = *v50;
      if (v66 != 1)
      {
        float32x4_t v72 = v50[1];
        goto LABEL_75;
      }
LABEL_74:
      float32x4_t v72 = 0uLL;
LABEL_75:
      float32x4_t v70 = 0uLL;
      float32x4_t v69 = 0uLL;
LABEL_68:
      float32x4_t v55 = vmlaq_n_f32(v55, v71, v68.f32[0]);
      float32x4_t v56 = vmlaq_lane_f32(v56, v72, *(float32x2_t *)v68.f32, 1);
      float32x4_t v57 = vmlaq_laneq_f32(v57, v70, v68, 2);
      float32x4_t v58 = vmlaq_laneq_f32(v58, v69, v68, 3);
      if (v66 <= 3)
      {
        if (v66)
        {
          if (v66 == 1)
          {
            float32x4_t v78 = (float32x4_t)v52->u32[0];
          }
          else
          {
            uint64_t v79 = 0;
            if (v66 != 2) {
              LODWORD(v79) = v52->i32[2];
            }
            v78.i64[0] = v52->i64[0];
            v78.i64[1] = v79;
          }
        }
        else
        {
          float32x4_t v78 = 0uLL;
        }
        float32x4_t v59 = vmlaq_f32(v59, v78, v68);
        goto LABEL_94;
      }
      v50 += 4;
      float32x4_t v73 = *v52++;
      float32x4_t v59 = vmlaq_f32(v59, v73, v68);
      BOOL v74 = __OFSUB__(v66, 4);
      v66 -= 4;
      if ((v66 < 0) ^ v74 | (v66 == 0)) {
        goto LABEL_94;
      }
    }
  }
  return result;
}

int *resample_horizontal<float,float,3,true>(int *result, unsigned int a2, double a3, double a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, int *a9, int a10)
{
  if ((int)a6 >= 1 && a10 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    unint64_t v18 = a9[1];
    unint64_t v136 = *a9;
    unint64_t v19 = v136 / 0xC;
    if (v136 / 0xC >= v18 >> 2) {
      unint64_t v19 = v18 >> 2;
    }
    unint64_t v20 = a6;
    uint64_t v21 = 4 * a2 + 8;
    unint64_t v22 = (char *)result + v21 * a6;
    unint64_t v23 = *(int *)&v22[-v21 + 4] + (uint64_t)*(int *)&v22[-v21];
    if (v19 < v23) {
      unint64_t v23 = v19;
    }
    unint64_t v24 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v24 = 1;
    }
    unint64_t v25 = a6 - v24;
    unsigned int v26 = a2 % 5;
    BOOL v27 = a2 > 4;
    if (a2 % 5) {
      BOOL v27 = 0;
    }
    unsigned int v28 = 15 * (a2 / 5 - v27);
    if (!v26) {
      unsigned int v26 = 5;
    }
    *(float *)&a3 = (float)v26;
    uint64_t v29 = (12 * v26 + 63) & 0x7FFFFFFC0;
    float32x4_t v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 5) {
      a2 = 5;
    }
    *(float *)&a4 = (float)a2;
    float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    uint64_t v32 = v29 + 4 * v28;
    int8x16_t v33 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v34 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_1850CD7B0);
    if (v25 <= 1) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = v20 - v24;
    }
    int8x16_t v36 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_1850CD7B0);
    do
    {
      float32x4_t v37 = *(float32x4_t **)(a7 + 8 * v15);
      if (v20 <= v24)
      {
        unint64_t v38 = 0;
        float32x4_t v39 = result;
      }
      else
      {
        unint64_t v38 = 0;
        float32x4_t v39 = result;
        do
        {
          uint64_t v40 = *v39;
          float32x2_t v41 = (float32x4_t *)(v16 + 12 * (int)v40);
          uint64_t v42 = (float32x4_t *)((char *)v41 + v32);
          if ((unint64_t)v41 + v32 > 12 * v23 + v16) {
            goto LABEL_36;
          }
          if (v41 >= v42)
          {
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
            v52.i64[0] = 0x8000000080000000;
            v52.i64[1] = 0x8000000080000000;
          }
          else
          {
            float32x4_t v43 = (int8x16_t *)(v39 + 2);
            int v44 = v39[1];
            float32x4_t v45 = (float32x4_t *)(v17 + 4 * v40);
            unint64_t v46 = (unint64_t)&v42[-6];
            if ((unint64_t)v41 < v46)
            {
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
              v47.i64[0] = 0x8000000080000000;
              v47.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              do
              {
                float32x4_t v11 = (float32x4_t)vandq_s8(v43[1], v33);
                float32x4_t v73 = (float32x4_t)vandq_s8(*v43, v34);
                float32x4_t v43 = (int8x16_t *)((char *)v43 + 20);
                float32x4_t v75 = *v41;
                float32x4_t v74 = v41[1];
                float32x4_t v14 = v41[2];
                float32x4_t v76 = v41[3];
                float32x4_t v77 = (float32x4_t)vzip1q_s32((int32x4_t)v73, (int32x4_t)v73);
                v77.i32[2] = v73.i32[0];
                float32x2_t v41 = (float32x4_t *)((char *)v41 + 60);
                float32x4_t v78 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
                v78.i32[2] = v11.i32[0];
                int32x4_t v79 = (int32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL);
                float32x4_t v52 = vmlaq_f32(v52, v78, v76);
                float32x4_t v51 = vmlaq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)vdupq_laneq_s32((int32x4_t)v73, 3), 8uLL), v14);
                float32x4_t v49 = vmlaq_f32(v49, v77, v75);
                float32x4_t v50 = vmlaq_f32(v50, (float32x4_t)vzip1q_s32(v79, v79), v74);
                float32x4_t v12 = *v45;
                float32x4_t v13 = v45[1];
                float32x4_t v45 = (float32x4_t *)((char *)v45 + 20);
                float32x4_t v48 = vmlaq_f32(v48, v11, v13);
                float32x4_t v47 = vmlaq_f32(v47, v73, v12);
                v44 -= 5;
              }
              while ((unint64_t)v41 < v46);
            }
            else
            {
              v47.i64[0] = 0x8000000080000000;
              v47.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
            }
            if (v44 >= 1)
            {
              if (v44 >= 9)
              {
                float32x4_t v53 = (float32x4_t)vandq_s8(v43[1], v33);
                float32x4_t v54 = (float32x4_t)vandq_s8(*v43, v34);
                float32x4_t v43 = (int8x16_t *)((char *)v43 + 20);
                float32x4_t v56 = *v41;
                float32x4_t v55 = v41[1];
                float32x4_t v57 = v41[2];
                float32x4_t v58 = v41[3];
                float32x4_t v59 = (float32x4_t)vzip1q_s32((int32x4_t)v54, (int32x4_t)v54);
                v59.i32[2] = v54.i32[0];
                float32x2_t v41 = (float32x4_t *)((char *)v41 + 60);
                float32x4_t v60 = (float32x4_t)vzip1q_s32((int32x4_t)v53, (int32x4_t)v53);
                v60.i32[2] = v53.i32[0];
                int32x4_t v61 = (int32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL);
                float32x4_t v52 = vmlaq_f32(v52, v60, v58);
                float32x4_t v51 = vmlaq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)vdupq_laneq_s32((int32x4_t)v54, 3), 8uLL), v57);
                float32x4_t v49 = vmlaq_f32(v49, v59, v56);
                float32x4_t v50 = vmlaq_f32(v50, (float32x4_t)vzip1q_s32(v61, v61), v55);
                float32x4_t v62 = *v45;
                float32x4_t v63 = v45[1];
                float32x4_t v45 = (float32x4_t *)((char *)v45 + 20);
                float32x4_t v48 = vmlaq_f32(v48, v53, v63);
                float32x4_t v47 = vmlaq_f32(v47, v54, v62);
              }
              float32x4_t v64 = (float32x4_t)vandq_s8(v43[1], (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_1850CD7C0));
              float32x4_t v11 = (float32x4_t)vandq_s8(*v43, v36);
              float32x4_t v14 = v41[2];
              float32x4_t v65 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
              v65.i32[2] = v11.i32[0];
              float32x4_t v66 = (float32x4_t)vzip1q_s32((int32x4_t)v64, (int32x4_t)v64);
              v66.i32[2] = v64.i32[0];
              int32x4_t v67 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              float32x4_t v52 = vmlaq_f32(v52, v66, v41[3]);
              float32x4_t v51 = vmlaq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 3), 8uLL), v14);
              float32x4_t v49 = vmlaq_f32(v49, v65, *v41);
              float32x4_t v50 = vmlaq_f32(v50, (float32x4_t)vzip1q_s32(v67, v67), v41[1]);
              float32x4_t v12 = *v45;
              float32x4_t v13 = v45[1];
              float32x4_t v48 = vmlaq_f32(v48, v64, v13);
              float32x4_t v47 = vmlaq_f32(v47, v11, *v45);
            }
          }
          v10.i64[0] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL).u64[0];
          float32x4_t v68 = vaddq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v52, 4uLL));
          int8x16_t v69 = (int8x16_t)vaddq_f32(v50, (float32x4_t)v10.u64[0]);
          float32x4_t v70 = (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 0xCuLL);
          v70.i32[2] = 0;
          int8x16_t v71 = (int8x16_t)vaddq_f32(v47, v70);
          float32x4_t v72 = vaddq_f32((float32x4_t)vextq_s8(v69, (int8x16_t)vaddq_f32(v51, (float32x4_t)0), 8uLL), vaddq_f32(v68, (float32x4_t)vextq_s8((int8x16_t)v68, v69, 0xCuLL)));
          v72.i32[3] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1))).u32[0];
          *v37++ = v72;
          ++v38;
          float32x4_t v39 = (int *)((char *)v39 + v21);
        }
        while (v38 != v35);
        unint64_t v38 = v35;
      }
LABEL_36:
      if (v38 >= v20) {
        goto LABEL_176;
      }
      do
      {
        uint64_t v80 = *v39;
        if ((int)v80 >= (int)v23) {
          int v81 = v23;
        }
        else {
          int v81 = *v39;
        }
        int v82 = v23 - v81;
        if (v39[1] >= v82) {
          LODWORD(v83) = v82;
        }
        else {
          LODWORD(v83) = v39[1];
        }
        if ((int)v83 < 1)
        {
          v92.i64[0] = 0x8000000080000000;
          v92.i64[1] = 0x8000000080000000;
          v93.i64[0] = 0x8000000080000000;
          v93.i64[1] = 0x8000000080000000;
          v88.i64[0] = 0x8000000080000000;
          v88.i64[1] = 0x8000000080000000;
          v89.i64[0] = 0x8000000080000000;
          v89.i64[1] = 0x8000000080000000;
          v90.i64[0] = 0x8000000080000000;
          v90.i64[1] = 0x8000000080000000;
          v91.i64[0] = 0x8000000080000000;
          v91.i64[1] = 0x8000000080000000;
          goto LABEL_173;
        }
        int16x8_t v84 = (float32x4_t *)(v16 + 12 * v80);
        unint64_t v85 = (unint64_t)&v84[-6] + 12 * (int)v83;
        uint8x8_t v86 = (float32x4_t *)(v17 + 4 * v80);
        uint8x8_t v87 = (int8x16_t *)(v39 + 2);
        if ((unint64_t)v84 >= v85)
        {
          v88.i64[0] = 0x8000000080000000;
          v88.i64[1] = 0x8000000080000000;
          v89.i64[0] = 0x8000000080000000;
          v89.i64[1] = 0x8000000080000000;
          v90.i64[0] = 0x8000000080000000;
          v90.i64[1] = 0x8000000080000000;
          v91.i64[0] = 0x8000000080000000;
          v91.i64[1] = 0x8000000080000000;
          v92.i64[0] = 0x8000000080000000;
          v92.i64[1] = 0x8000000080000000;
          v93.i64[0] = 0x8000000080000000;
          v93.i64[1] = 0x8000000080000000;
          goto LABEL_93;
        }
        uint64_t v83 = (int)v83;
        v88.i64[0] = 0x8000000080000000;
        v88.i64[1] = 0x8000000080000000;
        v89.i64[0] = 0x8000000080000000;
        v89.i64[1] = 0x8000000080000000;
        v90.i64[0] = 0x8000000080000000;
        v90.i64[1] = 0x8000000080000000;
        v91.i64[0] = 0x8000000080000000;
        v91.i64[1] = 0x8000000080000000;
        v92.i64[0] = 0x8000000080000000;
        v92.i64[1] = 0x8000000080000000;
        v93.i64[0] = 0x8000000080000000;
        v93.i64[1] = 0x8000000080000000;
        do
        {
          unint64_t v94 = v22 - (char *)v87;
          if ((unint64_t)(v22 - (char *)v87) >= 0x20) {
            unint64_t v94 = 32;
          }
          if (v94 >= 0x20)
          {
            float32x4_t v11 = (float32x4_t)vandq_s8(v87[1], v33);
            float32x4_t v10 = (float32x4_t)vandq_s8(*v87, v34);
LABEL_50:
            unsigned int v95 = v83;
            goto LABEL_51;
          }
          if (v83)
          {
            if (v83 < 4)
            {
              if (v83 == 1)
              {
                float32x4_t v10 = (float32x4_t)v87->u32[0];
              }
              else
              {
                uint64_t v105 = 0;
                if (v83 != 2) {
                  LODWORD(v105) = v87->i32[2];
                }
                v10.i64[0] = v87->i64[0];
                v10.i64[1] = v105;
              }
              float32x4_t v11 = 0uLL;
            }
            else
            {
              if (v83 == 4)
              {
                float32x4_t v11 = 0uLL;
              }
              else if (v83 == 5)
              {
                float32x4_t v11 = (float32x4_t)v87[1].u32[0];
              }
              else
              {
                int32x2_t v106 = 0;
                if (v83 != 6)
                {
                  int32x2_t v107 = 0;
                  if ((v83 & 1) == 0) {
                    v107.i32[0] = v87[1].i32[3];
                  }
                  v11.i32[0] = v87[1].i32[2];
                  int32x2_t v106 = vzip1_s32(*(int32x2_t *)v11.f32, v107);
                }
                v11.i64[0] = v87[1].i64[0];
                *(int32x2_t *)&v11.u32[2] = v106;
              }
              float32x4_t v10 = *(float32x4_t *)v87;
            }
            goto LABEL_50;
          }
          unsigned int v95 = 0;
          float32x4_t v10 = 0uLL;
          float32x4_t v11 = 0uLL;
LABEL_51:
          float32x4_t v14 = v84[2];
          float32x4_t v12 = v84[3];
          float32x4_t v13 = *v84;
          float32x4_t v96 = v84[1];
          if (v95)
          {
            if (v95 < 4)
            {
              float32x4_t v97 = 0uLL;
              float32x4_t v98 = 0uLL;
              if (v83)
              {
                if (v83 == 1)
                {
                  float32x4_t v98 = (float32x4_t)v86->u32[0];
                }
                else
                {
                  uint64_t v101 = 0;
                  if (v95 != 2) {
                    LODWORD(v101) = v86->i32[2];
                  }
                  v98.i64[0] = v86->i64[0];
                  v98.i64[1] = v101;
                }
              }
            }
            else
            {
              if (v83 == 4)
              {
                float32x4_t v97 = 0uLL;
              }
              else if (v83 == 5)
              {
                float32x4_t v97 = (float32x4_t)v86[1].u32[0];
              }
              else
              {
                int32x2_t v99 = 0;
                if (v95 != 6)
                {
                  int32x2_t v100 = 0;
                  if ((v83 & 1) == 0) {
                    v100.i32[0] = v86[1].i32[3];
                  }
                  v99.i32[0] = v86[1].i32[2];
                  int32x2_t v99 = vzip1_s32(v99, v100);
                }
                v97.i64[0] = v86[1].i64[0];
                *(int32x2_t *)&v97.u32[2] = v99;
              }
              float32x4_t v98 = *v86;
            }
          }
          else
          {
            float32x4_t v98 = 0uLL;
            float32x4_t v97 = 0uLL;
          }
          uint8x8_t v87 = (int8x16_t *)((char *)v87 + 20);
          float32x4_t v102 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
          v102.i32[2] = v11.i32[0];
          int16x8_t v84 = (float32x4_t *)((char *)v84 + 60);
          float32x4_t v103 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
          v103.i32[2] = v10.i32[0];
          int32x4_t v104 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
          float32x4_t v89 = vmlaq_f32(v89, (float32x4_t)vzip1q_s32(v104, v104), v96);
          float32x4_t v90 = vmlaq_f32(v90, (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s32((int32x4_t)v10, 3), 8uLL), v14);
          float32x4_t v88 = vmlaq_f32(v88, v103, v13);
          float32x4_t v91 = vmlaq_f32(v91, v102, v12);
          uint8x8_t v86 = (float32x4_t *)((char *)v86 + 20);
          float32x4_t v92 = vmlaq_f32(v92, v98, v10);
          float32x4_t v93 = vmlaq_f32(v93, v97, v11);
          v83 -= 5;
        }
        while ((unint64_t)v84 < v85);
        if ((int)v83 < 1) {
          goto LABEL_173;
        }
LABEL_93:
        uint64_t v108 = 0;
        unint64_t v109 = v83;
        uint64_t v110 = 3 * v83;
        int v111 = 3 * v83;
        while (2)
        {
          uint64_t v112 = v110 + v108;
          unint64_t v113 = v22 - (char *)v87;
          if ((unint64_t)(v22 - (char *)v87) >= 0x20) {
            unint64_t v113 = 32;
          }
          if (v113 >= 0x20)
          {
            v10.f32[0] = fminf((float)(int)v109, 8.0);
            float32x4_t v114 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
            int8x16_t v115 = (int8x16_t)vcgtq_f32(v114, (float32x4_t)xmmword_1850CD7B0);
            float32x4_t v12 = *(float32x4_t *)v87;
            float32x4_t v13 = (float32x4_t)v87[1];
            float32x4_t v10 = (float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vcgtq_f32(v114, (float32x4_t)xmmword_1850CD7C0));
            float32x4_t v11 = (float32x4_t)vandq_s8(*v87, v115);
            goto LABEL_98;
          }
          if (v109 < 4)
          {
            if (v112 == 3)
            {
              float32x4_t v11 = (float32x4_t)v87->u32[0];
            }
            else
            {
              if (v110 + v108 == 6) {
                v10.i64[0] = 0;
              }
              else {
                v10.i32[0] = v87->i32[2];
              }
              v11.i64[0] = v87->i64[0];
              v11.i64[1] = v10.i64[0];
            }
            float32x4_t v10 = 0uLL;
            uint8x8_t v87 = (int8x16_t *)((char *)v87 + 20);
          }
          else
          {
            if (v109 == 4)
            {
              float32x4_t v10 = 0uLL;
            }
            else if (v109 == 5)
            {
              float32x4_t v10 = (float32x4_t)v87[1].u32[0];
            }
            else
            {
              if (v110 + v108 == 18)
              {
                v11.i64[0] = 0;
              }
              else
              {
                int32x2_t v123 = 0;
                if ((v109 & 1) == 0) {
                  v123.i32[0] = v87[1].i32[3];
                }
                v11.i32[0] = v87[1].i32[2];
                *(int32x2_t *)v11.f32 = vzip1_s32(*(int32x2_t *)v11.f32, v123);
              }
              v10.i64[0] = v87[1].i64[0];
              v10.i64[1] = v11.i64[0];
            }
            float32x4_t v11 = *(float32x4_t *)v87;
LABEL_98:
            uint8x8_t v87 = (int8x16_t *)((char *)v87 + 20);
            if (v109 > 5)
            {
              float32x4_t v13 = v84[2];
              float32x4_t v116 = v84[3];
              float32x4_t v14 = *v84;
              float32x4_t v117 = v84[1];
              int16x8_t v84 = (float32x4_t *)((char *)v84 + 60);
              float32x4_t v118 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v118.i32[2] = v10.i32[0];
              float32x4_t v119 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
              v119.i32[2] = v11.i32[0];
              int32x4_t v120 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              float32x4_t v89 = vmlaq_f32(v89, v117, (float32x4_t)vzip1q_s32(v120, v120));
              float32x4_t v90 = vmlaq_f32(v90, v13, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 3), 8uLL));
              float32x4_t v88 = vmlaq_f32(v88, v14, v119);
              float32x4_t v91 = vmlaq_f32(v91, v116, v118);
              if (v109 >= 8)
              {
                float32x4_t v12 = v86[1];
                goto LABEL_101;
              }
LABEL_159:
              if (v109 == 4)
              {
                float32x4_t v12 = 0uLL;
              }
              else if (v109 == 5)
              {
                float32x4_t v12 = (float32x4_t)v86[1].u32[0];
              }
              else
              {
                if (v110 + v108 == 18) {
                  v13.i64[0] = 0;
                }
                else {
                  v13.i32[0] = v86[1].i32[2];
                }
                v12.i64[0] = v86[1].i64[0];
                v12.i64[1] = v13.i64[0];
              }
LABEL_101:
              float32x4_t v121 = *v86;
              uint8x8_t v86 = (float32x4_t *)((char *)v86 + 20);
              v13.i32[1] = v121.i32[1];
              float32x4_t v92 = vmlaq_f32(v92, v121, v11);
              float32x4_t v93 = vmlaq_f32(v93, v12, v10);
              v108 -= 15;
              BOOL v122 = (uint64_t)v109 <= 5;
              v109 -= 5;
              if (v122) {
                goto LABEL_173;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v124 = v110 + v108;
        if ((v111 + v108) < 8)
        {
          if ((v111 + v108) < 4)
          {
            float32x4_t v126 = 0uLL;
            float32x4_t v13 = 0uLL;
            if (v124)
            {
              if (v124 == 1)
              {
                v13.i64[0] = v84->u32[0];
                v14.i64[0] = 0;
              }
              else
              {
                v13.i64[0] = v84->i64[0];
                v14.i32[0] = v84->i32[2];
              }
              v13.i64[1] = v14.i64[0];
            }
          }
          else
          {
            if (v124 == 4)
            {
              float32x4_t v126 = 0uLL;
            }
            else if (v124 == 5)
            {
              float32x4_t v126 = (float32x4_t)v84[1].u32[0];
            }
            else
            {
              if (v110 + v108 == 6) {
                v13.i64[0] = 0;
              }
              else {
                v13.i32[0] = v84[1].i32[2];
              }
              v126.i64[0] = v84[1].i64[0];
              v126.i64[1] = v13.i64[0];
            }
            float32x4_t v13 = *v84;
          }
          float32x4_t v14 = 0uLL;
          float32x4_t v125 = 0uLL;
          goto LABEL_157;
        }
        if (v124 == 8)
        {
          float32x4_t v14 = 0uLL;
LABEL_146:
          float32x4_t v125 = 0uLL;
          goto LABEL_152;
        }
        if ((unint64_t)(v124 - 8) < 4)
        {
          if (v112 == 9)
          {
            v14.i64[0] = v84[2].u32[0];
            v12.i64[0] = 0;
          }
          else
          {
            v14.i64[0] = v84[2].i64[0];
            v12.i32[0] = v84[2].i32[2];
          }
          v14.i64[1] = v12.i64[0];
          goto LABEL_146;
        }
        if (v124 == 12)
        {
          float32x4_t v125 = 0uLL;
        }
        else if (v124 == 13)
        {
          float32x4_t v125 = (float32x4_t)v84[3].u32[0];
        }
        else
        {
          int32x2_t v127 = 0;
          if ((v124 & 1) == 0) {
            v127.i32[0] = v84[3].i32[3];
          }
          v125.i64[0] = v84[3].i64[0];
          v13.i32[0] = v84[3].i32[2];
          *(int32x2_t *)&v125.u32[2] = vzip1_s32(*(int32x2_t *)v13.f32, v127);
        }
        float32x4_t v14 = v84[2];
LABEL_152:
        float32x4_t v13 = *v84;
        float32x4_t v126 = v84[1];
LABEL_157:
        float32x4_t v128 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
        v128.i32[2] = v10.i32[0];
        float32x4_t v129 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
        v129.i32[2] = v11.i32[0];
        int32x4_t v130 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
        float32x4_t v89 = vmlaq_f32(v89, v126, (float32x4_t)vzip1q_s32(v130, v130));
        float32x4_t v90 = vmlaq_f32(v90, v14, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 3), 8uLL));
        float32x4_t v88 = vmlaq_f32(v88, v13, v129);
        float32x4_t v91 = vmlaq_f32(v91, v125, v128);
        if (v109 >= 4)
        {
          int16x8_t v84 = (float32x4_t *)((char *)v84 + 60);
          goto LABEL_159;
        }
        if (v109 == 1)
        {
          float32x4_t v12 = (float32x4_t)v86->u32[0];
        }
        else
        {
          v13.i64[0] = 0;
          if (v109 != 2) {
            v13.i32[0] = v86->i32[2];
          }
          v12.i64[0] = v86->i64[0];
          v12.i64[1] = v13.i64[0];
        }
        float32x4_t v92 = vmlaq_f32(v92, v12, v11);
        float32x4_t v93 = vmlaq_f32(v93, (float32x4_t)0, v10);
LABEL_173:
        v10.i64[0] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL).u64[0];
        float32x4_t v131 = vaddq_f32(v88, (float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v91, 4uLL));
        int8x16_t v132 = (int8x16_t)vaddq_f32(v89, (float32x4_t)v10.u64[0]);
        float32x4_t v133 = (float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v93, 0xCuLL);
        v133.i32[2] = 0;
        int8x16_t v134 = (int8x16_t)vaddq_f32(v92, v133);
        float32x4_t v135 = vaddq_f32((float32x4_t)vextq_s8(v132, (int8x16_t)vaddq_f32(v90, (float32x4_t)0), 8uLL), vaddq_f32(v131, (float32x4_t)vextq_s8((int8x16_t)v131, v132, 0xCuLL)));
        v135.i32[3] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL), vadd_f32(*(float32x2_t *)v134.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v134.i8, 1))).u32[0];
        *v37++ = v135;
        ++v38;
        float32x4_t v39 = (int *)((char *)v39 + v21);
      }
      while (v38 != v20);
LABEL_176:
      v16 += v136;
      v17 += v18;
      ++v15;
    }
    while (v15 != a10);
  }
  return result;
}

int *resample_horizontal<float,float,1,true>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  if ((int)a5 >= 1 && a9 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a7;
    uint64_t v16 = a7[1];
    unint64_t v17 = *a8;
    unint64_t v18 = a8[1];
    if (v17 >> 2 >= v18 >> 2) {
      unint64_t v19 = v18 >> 2;
    }
    else {
      unint64_t v19 = v17 >> 2;
    }
    unint64_t v20 = a5;
    uint64_t v21 = 4 * a2;
    uint64_t v22 = v21 + 8;
    unint64_t v23 = (char *)result + (v21 + 8) * a5;
    if (v19 >= *(int *)&v23[-v21 - 4] + (uint64_t)*(int *)&v23[-v21 - 8]) {
      unint64_t v19 = *(int *)&v23[-v21 - 4] + (uint64_t)*(int *)&v23[-v21 - 8];
    }
    unint64_t v24 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v24 = 1;
    }
    unint64_t v25 = a5 - v24;
    int v26 = a2 > 7;
    unsigned int v27 = a2 & 7;
    if ((a2 & 7) != 0) {
      int v26 = 0;
    }
    else {
      unsigned int v27 = 8;
    }
    unsigned int v28 = (a2 + 8 * (v26 << 31 >> 31)) & 0xFFFFFFF8;
    *(float *)&a3 = (float)v27;
    uint64_t v29 = (4 * (_BYTE)v27 + 31) & 0x60;
    float32x4_t v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8) {
      a2 = 8;
    }
    *(float *)&a3 = (float)a2;
    uint64_t v31 = v29 + 4 * v28;
    float32x4_t v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    int8x16_t v33 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v34 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v35 = a9;
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    int8x16_t v36 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v37 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_1850CD7B0);
    while (1)
    {
      unint64_t v38 = *(int32x2_t **)(a6 + 8 * v14);
      if (v20 <= v24)
      {
        unint64_t v39 = 0;
        uint64_t v40 = result;
      }
      else
      {
        unint64_t v39 = 0;
        uint64_t v40 = result;
        while (1)
        {
          uint64_t v41 = *v40;
          uint64_t v42 = (float32x4_t *)(v15 + 4 * v41);
          float32x4_t v43 = (float32x4_t *)((char *)v42 + v31);
          if ((unint64_t)v42 + v31 > 4 * v19 + v15) {
            break;
          }
          if (v42 >= v43)
          {
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
          }
          else
          {
            int v44 = (int8x16_t *)(v40 + 2);
            int v45 = v40[1];
            unint64_t v46 = (float32x4_t *)(v16 + 4 * v41);
            unint64_t v47 = (unint64_t)&v43[-2];
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            if ((unint64_t)v42 < v47)
            {
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              do
              {
                int8x16_t v55 = *v44;
                int8x16_t v54 = v44[1];
                v44 += 2;
                float32x4_t v10 = (float32x4_t)vandq_s8(v55, v34);
                float32x4_t v9 = (float32x4_t)vandq_s8(v54, v33);
                float32x4_t v56 = *v42;
                float32x4_t v57 = v42[1];
                v42 += 2;
                float32x4_t v51 = vmlaq_f32(v51, v9, v57);
                float32x4_t v50 = vmlaq_f32(v50, v10, v56);
                float32x4_t v11 = *v46;
                float32x4_t v12 = v46[1];
                v46 += 2;
                float32x4_t v49 = vmlaq_f32(v49, v9, v12);
                float32x4_t v48 = vmlaq_f32(v48, v10, v11);
                v45 -= 8;
              }
              while ((unint64_t)v42 < v47);
            }
            else
            {
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
            }
            if (v45 >= 1)
            {
              float32x4_t v10 = (float32x4_t)vandq_s8(*v44, v37);
              float32x4_t v9 = (float32x4_t)vandq_s8(v44[1], v36);
              float32x4_t v51 = vmlaq_f32(v51, v9, v42[1]);
              float32x4_t v50 = vmlaq_f32(v50, v10, *v42);
              float32x4_t v11 = *v46;
              float32x4_t v12 = v46[1];
              float32x4_t v49 = vmlaq_f32(v49, v9, v12);
              float32x4_t v48 = vmlaq_f32(v48, v10, *v46);
            }
          }
          int8x16_t v52 = (int8x16_t)vaddq_f32(v50, v51);
          *(float32x2_t *)v52.i8 = vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
          int8x16_t v53 = (int8x16_t)vaddq_f32(v48, v49);
          *(float32x2_t *)v53.i8 = vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL));
          *v38++ = vzip1_s32((int32x2_t)vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1)), (int32x2_t)vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1)));
          ++v39;
          uint64_t v40 = (int *)((char *)v40 + v22);
          if (v39 == v25)
          {
            unint64_t v39 = v25;
            break;
          }
        }
      }
      if (v39 < v20) {
        break;
      }
LABEL_115:
      v15 += v17;
      v16 += v18;
      if (++v14 == v35) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v58 = *v40;
      if ((int)v58 >= (int)v19) {
        int v59 = v19;
      }
      else {
        int v59 = *v40;
      }
      int v60 = v19 - v59;
      if (v40[1] >= v60) {
        int v61 = v60;
      }
      else {
        int v61 = v40[1];
      }
      if (v61 < 1)
      {
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        v66.i64[0] = 0x8000000080000000;
        v66.i64[1] = 0x8000000080000000;
        v68.i64[0] = 0x8000000080000000;
        v68.i64[1] = 0x8000000080000000;
        goto LABEL_114;
      }
      float32x4_t v62 = (float32x4_t *)(v15 + 4 * v58);
      unint64_t v63 = (unint64_t)v62[-2].u64 + 4 * v61;
      float32x4_t v64 = (float32x4_t *)(v16 + 4 * v58);
      float32x4_t v65 = (int8x16_t *)(v40 + 2);
      v66.i64[0] = 0x8000000080000000;
      v66.i64[1] = 0x8000000080000000;
      if ((unint64_t)v62 >= v63)
      {
        LODWORD(v67) = v61;
        v68.i64[0] = 0x8000000080000000;
        v68.i64[1] = 0x8000000080000000;
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        goto LABEL_70;
      }
      uint64_t v67 = v61;
      v68.i64[0] = 0x8000000080000000;
      v68.i64[1] = 0x8000000080000000;
      v69.i64[0] = 0x8000000080000000;
      v69.i64[1] = 0x8000000080000000;
      v70.i64[0] = 0x8000000080000000;
      v70.i64[1] = 0x8000000080000000;
      do
      {
        unint64_t v71 = v23 - (char *)v65;
        if ((unint64_t)(v23 - (char *)v65) >= 0x20) {
          unint64_t v71 = 32;
        }
        if (v71 >= 0x20)
        {
          float32x4_t v10 = (float32x4_t)vandq_s8(v65[1], v33);
          float32x4_t v9 = (float32x4_t)vandq_s8(*v65, v34);
          goto LABEL_47;
        }
        if (!v67)
        {
          float32x4_t v9 = 0uLL;
LABEL_60:
          float32x4_t v10 = 0uLL;
          goto LABEL_47;
        }
        if (v67 < 4)
        {
          if (v67 == 1)
          {
            float32x4_t v9 = (float32x4_t)v65->u32[0];
          }
          else
          {
            uint64_t v74 = 0;
            if (v67 != 2) {
              LODWORD(v74) = v65->i32[2];
            }
            v9.i64[0] = v65->i64[0];
            v9.i64[1] = v74;
          }
          goto LABEL_60;
        }
        if (v67 == 4)
        {
          float32x4_t v10 = 0uLL;
        }
        else if (v67 == 5)
        {
          float32x4_t v10 = (float32x4_t)v65[1].u32[0];
        }
        else
        {
          int32x2_t v75 = 0;
          if (v67 != 6)
          {
            int32x2_t v76 = 0;
            if ((v61 & 1) == 0) {
              v76.i32[0] = v65[1].i32[3];
            }
            v10.i32[0] = v65[1].i32[2];
            int32x2_t v75 = vzip1_s32(*(int32x2_t *)v10.f32, v76);
          }
          v10.i64[0] = v65[1].i64[0];
          *(int32x2_t *)&v10.u32[2] = v75;
        }
        float32x4_t v9 = *(float32x4_t *)v65;
LABEL_47:
        v65 += 2;
        float32x4_t v72 = *v62;
        float32x4_t v73 = v62[1];
        v62 += 2;
        float32x4_t v68 = vmlaq_f32(v68, v73, v10);
        float32x4_t v66 = vmlaq_f32(v66, v72, v9);
        float32x4_t v11 = *v64;
        float32x4_t v12 = v64[1];
        v64 += 2;
        float32x4_t v70 = vmlaq_f32(v70, v12, v10);
        float32x4_t v69 = vmlaq_f32(v69, v11, v9);
        v67 -= 8;
      }
      while ((unint64_t)v62 < v63);
      if ((int)v67 >= 1)
      {
LABEL_70:
        for (int i = v67; !((i < 0) ^ v82 | (i == 0)); i -= 8)
        {
          unint64_t v78 = v23 - (char *)v65;
          if ((unint64_t)(v23 - (char *)v65) >= 0x20) {
            unint64_t v78 = 32;
          }
          if (v78 < 0x20)
          {
            if (i < 4)
            {
              if (i == 1)
              {
                float32x4_t v10 = (float32x4_t)v65->u32[0];
              }
              else
              {
                uint64_t v83 = 0;
                if (i != 2) {
                  LODWORD(v83) = v65->i32[2];
                }
                v10.i64[0] = v65->i64[0];
                v10.i64[1] = v83;
              }
              float32x4_t v9 = 0uLL;
              v65 += 2;
LABEL_93:
              if (i == 1)
              {
                float32x4_t v11 = (float32x4_t)v62->u32[0];
                float32x4_t v84 = 0uLL;
                float32x4_t v12 = (float32x4_t)v64->u32[0];
              }
              else
              {
                v11.i64[0] = v62->i64[0];
                if (i == 2)
                {
                  v13.i64[0] = 0;
                  float32x4_t v84 = 0uLL;
                }
                else
                {
                  v12.i32[0] = v62->i32[2];
                  v11.i64[1] = v12.i64[0];
                  float32x4_t v84 = 0uLL;
                  v13.i32[0] = v64->i32[2];
                }
                v12.i64[0] = v64->i64[0];
                v12.i64[1] = v13.i64[0];
              }
              float32x4_t v13 = vmulq_f32(v10, v11);
              float32x4_t v81 = vmulq_f32(v9, v84);
              float32x4_t v11 = 0uLL;
              goto LABEL_77;
            }
            if (i == 4)
            {
              float32x4_t v9 = 0uLL;
            }
            else if (i == 5)
            {
              float32x4_t v9 = (float32x4_t)v65[1].u32[0];
            }
            else
            {
              int32x2_t v85 = 0;
              if (i != 6)
              {
                int32x2_t v86 = 0;
                if ((v67 & 1) == 0) {
                  v86.i32[0] = v65[1].i32[3];
                }
                v85.i32[0] = v65[1].i32[2];
                int32x2_t v85 = vzip1_s32(v85, v86);
              }
              v9.i64[0] = v65[1].i64[0];
              *(int32x2_t *)&v9.u32[2] = v85;
            }
            float32x4_t v10 = *(float32x4_t *)v65;
          }
          else
          {
            v9.f32[0] = fminf((float)i, 8.0);
            float32x4_t v79 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            int8x16_t v80 = (int8x16_t)vcgtq_f32(v79, (float32x4_t)xmmword_1850CD7B0);
            float32x4_t v11 = *(float32x4_t *)v65;
            float32x4_t v12 = (float32x4_t)v65[1];
            float32x4_t v9 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v79, (float32x4_t)xmmword_1850CD7C0));
            float32x4_t v10 = (float32x4_t)vandq_s8(*v65, v80);
          }
          v65 += 2;
          if (i < 8)
          {
            if (i < 4) {
              goto LABEL_93;
            }
            if (i == 5)
            {
              float32x4_t v12 = (float32x4_t)v62[1].u32[0];
              float32x4_t v11 = (float32x4_t)v64[1].u32[0];
            }
            else if (i == 4)
            {
              float32x4_t v12 = 0uLL;
              float32x4_t v11 = 0uLL;
            }
            else
            {
              v12.i64[0] = v62[1].i64[0];
              if (i == 6)
              {
                v13.i64[0] = 0;
              }
              else
              {
                v11.i32[0] = v62[1].i32[2];
                v12.i64[1] = v11.i64[0];
                v13.i32[0] = v64[1].i32[2];
              }
              v11.i64[0] = v64[1].i64[0];
              v11.i64[1] = v13.i64[0];
            }
            float32x4_t v13 = vmulq_f32(v10, *v62);
            float32x4_t v81 = vmulq_f32(v9, v12);
            float32x4_t v12 = *v64;
          }
          else
          {
            float32x4_t v81 = vmulq_f32(v9, v62[1]);
            float32x4_t v13 = vmulq_f32(v10, *v62);
            float32x4_t v12 = *v64;
            float32x4_t v11 = v64[1];
          }
LABEL_77:
          v62 += 2;
          float32x4_t v66 = vaddq_f32(v66, v13);
          float32x4_t v68 = vaddq_f32(v68, v81);
          v64 += 2;
          float32x4_t v69 = vmlaq_f32(v69, v12, v10);
          float32x4_t v70 = vmlaq_f32(v70, v11, v9);
          BOOL v82 = __OFSUB__(i, 8);
        }
      }
LABEL_114:
      int8x16_t v87 = (int8x16_t)vaddq_f32(v66, v68);
      *(float32x2_t *)v87.i8 = vadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
      int8x16_t v88 = (int8x16_t)vaddq_f32(v69, v70);
      *(float32x2_t *)v88.i8 = vadd_f32(*(float32x2_t *)v88.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
      *v38++ = vzip1_s32((int32x2_t)vadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1)), (int32x2_t)vadd_f32(*(float32x2_t *)v88.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v88.i8, 1)));
      ++v39;
      uint64_t v40 = (int *)((char *)v40 + v22);
      if (v39 == v20) {
        goto LABEL_115;
      }
    }
  }
  return result;
}

int *resample_horizontal<float,float,5,false>(int *result, unsigned int a2, double a3, double a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, int *a9, int a10)
{
  if ((int)a6 >= 1 && a10 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    unint64_t v17 = *a9;
    unint64_t v18 = v17 / 0x14;
    uint64_t v19 = 4 * a2;
    uint64_t v20 = v19 + 8;
    uint64_t v21 = (char *)result + (v19 + 8) * a6;
    if (v17 / 0x14 >= *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8]) {
      unint64_t v18 = *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8];
    }
    unint64_t v22 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v22 = 1;
    }
    unsigned int v23 = a2 % 6;
    BOOL v24 = a2 > 5;
    if (a2 % 6) {
      BOOL v24 = 0;
    }
    else {
      unsigned int v23 = 6;
    }
    uint64_t v25 = ((20 * v23 + 127) & 0x7FFFFFF80) + 120 * (a2 / 6 - v24);
    unint64_t v26 = a6 - v22;
    *(float *)&a3 = (float)v23;
    float32x4_t v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 6) {
      unsigned int v28 = 6;
    }
    else {
      unsigned int v28 = a2;
    }
    *(float *)&a4 = (float)v28;
    float32x4_t v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    int8x16_t v30 = (int8x16_t)vcgtq_f32(v29, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v31 = (int8x16_t)vcgtq_f32(v29, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v32 = a10;
    if (v26 <= 1) {
      unint64_t v26 = 1;
    }
    int8x16_t v33 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_1850CD7B0);
    do
    {
      int8x16_t v34 = *(float32x4_t **)(a7 + 8 * v15);
      if (a6 <= v22)
      {
        unint64_t v35 = 0;
        int8x16_t v36 = result;
      }
      else
      {
        unint64_t v35 = 0;
        int8x16_t v36 = result;
        do
        {
          int8x16_t v37 = (float32x4_t *)(v16 + 20 * *v36);
          unint64_t v38 = (float32x4_t *)((char *)v37 + v25);
          if ((unint64_t)v37 + v25 > 20 * v18 + v16) {
            goto LABEL_29;
          }
          if (v37 >= v38)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
          }
          else
          {
            unint64_t v39 = (int8x16_t *)(v36 + 2);
            int v40 = v36[1];
            unint64_t v41 = (unint64_t)&v38[-8];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            while ((unint64_t)v37 < v41)
            {
              float32x4_t v50 = (float32x4_t)vandq_s8(*v39, v31);
              int32x4_t v51 = (int32x4_t)vandq_s8(v39[1], v30);
              unint64_t v39 = (int8x16_t *)((char *)v39 + 24);
              float32x4_t v12 = v37[4];
              float32x4_t v11 = v37[5];
              float32x4_t v53 = v37[6];
              float32x4_t v52 = v37[7];
              float32x4_t v13 = *v37;
              float32x4_t v14 = v37[1];
              float32x4_t v54 = v37[2];
              float32x4_t v55 = v37[3];
              int8x16_t v37 = (float32x4_t *)((char *)v37 + 120);
              int32x4_t v56 = (int32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL);
              int32x4_t v57 = (int32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL);
              float32x4_t v45 = vmlaq_f32(v45, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v50, (int32x4_t)v50), (int32x4_t)v50), v55);
              float32x4_t v43 = vmlaq_f32(v43, (float32x4_t)vzip1q_s32((int32x4_t)v50, vdupq_lane_s32(*(int32x2_t *)v50.f32, 1)), v14);
              float32x4_t v48 = vmlaq_f32(v48, (float32x4_t)vzip1q_s32(v51, vdupq_lane_s32(*(int32x2_t *)v51.i8, 1)), v53);
              float32x4_t v42 = vmlaq_n_f32(v42, v13, v50.f32[0]);
              float32x4_t v46 = vmlaq_laneq_f32(v46, v12, v50, 3);
              float32x4_t v44 = vmlaq_f32(v44, (float32x4_t)vzip1q_s32(v57, v57), v54);
              float32x4_t v47 = vmlaq_n_f32(v47, v11, *(float *)v51.i32);
              float32x4_t v49 = vmlaq_f32(v49, (float32x4_t)vzip1q_s32(v56, v56), v52);
              v40 -= 6;
            }
            if (v40 >= 1)
            {
              float32x4_t v11 = (float32x4_t)vandq_s8(*v39, v33);
              int32x4_t v58 = (int32x4_t)vandq_s8(v39[1], (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_1850CD7C0));
              float32x4_t v12 = v37[4];
              float32x4_t v13 = *v37;
              float32x4_t v14 = v37[1];
              int32x4_t v59 = (int32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 4uLL);
              int32x4_t v60 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              float32x4_t v45 = vmlaq_f32(v45, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v11, (int32x4_t)v11), (int32x4_t)v11), v37[3]);
              float32x4_t v43 = vmlaq_f32(v43, (float32x4_t)vzip1q_s32((int32x4_t)v11, vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)), v14);
              float32x4_t v48 = vmlaq_f32(v48, (float32x4_t)vzip1q_s32(v58, vdupq_lane_s32(*(int32x2_t *)v58.i8, 1)), v37[6]);
              float32x4_t v42 = vmlaq_n_f32(v42, *v37, v11.f32[0]);
              float32x4_t v46 = vmlaq_laneq_f32(v46, v12, v11, 3);
              float32x4_t v47 = vmlaq_n_f32(v47, v37[5], *(float *)v58.i32);
              float32x4_t v44 = vmlaq_f32(v44, (float32x4_t)vzip1q_s32(v60, v60), v37[2]);
              float32x4_t v49 = vmlaq_f32(v49, (float32x4_t)vzip1q_s32(v59, v59), v37[7]);
            }
          }
          float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 0xCuLL);
          float32x4_t v61 = (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL);
          float32x4_t v62 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL);
          int8x16_t v63 = (int8x16_t)vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 0xCuLL));
          int8x16_t v64 = (int8x16_t)vaddq_f32(v43, v61);
          int8x16_t v65 = (int8x16_t)vaddq_f32(v44, v10);
          *int8x16_t v34 = vaddq_f32((float32x4_t)vextq_s8(v65, v63, 8uLL), vaddq_f32(vaddq_f32(v42, v62), (float32x4_t)vextq_s8(v64, v65, 4uLL)));
          v34[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1))).u32[0];
          int8x16_t v34 = (float32x4_t *)((char *)v34 + 20);
          ++v35;
          int8x16_t v36 = (int *)((char *)v36 + v20);
        }
        while (v35 != v26);
        unint64_t v35 = v26;
      }
LABEL_29:
      if (v35 >= a6) {
        goto LABEL_153;
      }
      do
      {
        if (*v36 >= (int)v18) {
          int v66 = v18;
        }
        else {
          int v66 = *v36;
        }
        int v67 = v18 - v66;
        if (v36[1] < v67) {
          int v67 = v36[1];
        }
        if (v67 < 1)
        {
          v71.i64[0] = 0x8000000080000000;
          v71.i64[1] = 0x8000000080000000;
          v73.i64[0] = 0x8000000080000000;
          v73.i64[1] = 0x8000000080000000;
          v74.i64[0] = 0x8000000080000000;
          v74.i64[1] = 0x8000000080000000;
          v75.i64[0] = 0x8000000080000000;
          v75.i64[1] = 0x8000000080000000;
          v76.i64[0] = 0x8000000080000000;
          v76.i64[1] = 0x8000000080000000;
          v77.i64[0] = 0x8000000080000000;
          v77.i64[1] = 0x8000000080000000;
          v78.i64[0] = 0x8000000080000000;
          v78.i64[1] = 0x8000000080000000;
          v79.i64[0] = 0x8000000080000000;
          v79.i64[1] = 0x8000000080000000;
          goto LABEL_135;
        }
        float32x4_t v68 = (float32x4_t *)(v16 + 20 * *v36);
        unint64_t v69 = (unint64_t)&v68[-8] + 20 * v67;
        float32x4_t v70 = (int8x16_t *)(v36 + 2);
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        if ((unint64_t)v68 >= v69)
        {
          v73.i64[0] = 0x8000000080000000;
          v73.i64[1] = 0x8000000080000000;
          v74.i64[0] = 0x8000000080000000;
          v74.i64[1] = 0x8000000080000000;
          v75.i64[0] = 0x8000000080000000;
          v75.i64[1] = 0x8000000080000000;
          v76.i64[0] = 0x8000000080000000;
          v76.i64[1] = 0x8000000080000000;
          v77.i64[0] = 0x8000000080000000;
          v77.i64[1] = 0x8000000080000000;
          v78.i64[0] = 0x8000000080000000;
          v78.i64[1] = 0x8000000080000000;
          v79.i64[0] = 0x8000000080000000;
          v79.i64[1] = 0x8000000080000000;
          goto LABEL_66;
        }
        uint64_t v72 = v67;
        v73.i64[0] = 0x8000000080000000;
        v73.i64[1] = 0x8000000080000000;
        v74.i64[0] = 0x8000000080000000;
        v74.i64[1] = 0x8000000080000000;
        v75.i64[0] = 0x8000000080000000;
        v75.i64[1] = 0x8000000080000000;
        v76.i64[0] = 0x8000000080000000;
        v76.i64[1] = 0x8000000080000000;
        v77.i64[0] = 0x8000000080000000;
        v77.i64[1] = 0x8000000080000000;
        v78.i64[0] = 0x8000000080000000;
        v78.i64[1] = 0x8000000080000000;
        v79.i64[0] = 0x8000000080000000;
        v79.i64[1] = 0x8000000080000000;
        do
        {
          unint64_t v80 = v21 - (char *)v70;
          if ((unint64_t)(v21 - (char *)v70) >= 0x20) {
            unint64_t v80 = 32;
          }
          if (v80 >= 0x20)
          {
            float32x4_t v10 = (float32x4_t)vandq_s8(v70[1], v30);
            float32x4_t v81 = (float32x4_t)vandq_s8(*v70, v31);
            goto LABEL_42;
          }
          if (!v72)
          {
            float32x4_t v81 = 0uLL;
LABEL_55:
            float32x4_t v10 = 0uLL;
            goto LABEL_42;
          }
          if (v72 < 4)
          {
            if (v72 == 1)
            {
              float32x4_t v81 = (float32x4_t)v70->u32[0];
            }
            else
            {
              uint64_t v88 = 0;
              if (v72 != 2) {
                LODWORD(v88) = v70->i32[2];
              }
              v81.i64[0] = v70->i64[0];
              v81.i64[1] = v88;
            }
            goto LABEL_55;
          }
          if (v72 == 4)
          {
            float32x4_t v10 = 0uLL;
          }
          else if (v72 == 5)
          {
            float32x4_t v10 = (float32x4_t)v70[1].u32[0];
          }
          else
          {
            int32x2_t v89 = 0;
            if (v72 != 6)
            {
              int32x2_t v90 = 0;
              if ((v67 & 1) == 0) {
                v90.i32[0] = v70[1].i32[3];
              }
              v89.i32[0] = v70[1].i32[2];
              int32x2_t v89 = vzip1_s32(v89, v90);
            }
            v10.i64[0] = v70[1].i64[0];
            *(int32x2_t *)&v10.u32[2] = v89;
          }
          float32x4_t v81 = *(float32x4_t *)v70;
LABEL_42:
          float32x4_t v70 = (int8x16_t *)((char *)v70 + 24);
          float32x4_t v11 = v68[6];
          float32x4_t v12 = v68[7];
          float32x4_t v83 = v68[4];
          float32x4_t v82 = v68[5];
          float32x4_t v14 = v68[2];
          float32x4_t v13 = v68[3];
          float32x4_t v85 = *v68;
          float32x4_t v84 = v68[1];
          float32x4_t v68 = (float32x4_t *)((char *)v68 + 120);
          int32x4_t v86 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
          int32x4_t v87 = (int32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL);
          float32x4_t v71 = vmlaq_n_f32(v71, v85, v81.f32[0]);
          float32x4_t v74 = vmlaq_f32(v74, (float32x4_t)vzip1q_s32(v87, v87), v14);
          float32x4_t v76 = vmlaq_laneq_f32(v76, v83, v81, 3);
          float32x4_t v77 = vmlaq_n_f32(v77, v82, v10.f32[0]);
          float32x4_t v79 = vmlaq_f32(v79, (float32x4_t)vzip1q_s32(v86, v86), v12);
          float32x4_t v73 = vmlaq_f32(v73, (float32x4_t)vzip1q_s32((int32x4_t)v81, vdupq_lane_s32(*(int32x2_t *)v81.f32, 1)), v84);
          float32x4_t v75 = vmlaq_f32(v75, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v81, (int32x4_t)v81), (int32x4_t)v81), v13);
          float32x4_t v78 = vmlaq_f32(v78, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)), v11);
          v72 -= 6;
        }
        while ((unint64_t)v68 < v69);
        if ((int)v72 < 1) {
          goto LABEL_135;
        }
        int v67 = v72;
LABEL_66:
        unint64_t v91 = v67;
        while (2)
        {
          unint64_t v92 = v21 - (char *)v70;
          if ((unint64_t)(v21 - (char *)v70) >= 0x20) {
            unint64_t v92 = 32;
          }
          if (v92 >= 0x20)
          {
            v10.f32[0] = fminf((float)(int)v91, 8.0);
            float32x4_t v93 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
            int8x16_t v94 = (int8x16_t)vcgtq_f32(v93, (float32x4_t)xmmword_1850CD7B0);
            float32x4_t v11 = *(float32x4_t *)v70;
            float32x4_t v12 = (float32x4_t)v70[1];
            float32x4_t v10 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v93, (float32x4_t)xmmword_1850CD7C0));
            float32x4_t v95 = (float32x4_t)vandq_s8(*v70, v94);
LABEL_71:
            if (v91 <= 6) {
              goto LABEL_90;
            }
            float32x4_t v70 = (int8x16_t *)((char *)v70 + 24);
            float32x4_t v11 = v68[6];
            float32x4_t v12 = v68[7];
            float32x4_t v97 = v68[4];
            float32x4_t v96 = v68[5];
            float32x4_t v14 = v68[2];
            float32x4_t v13 = v68[3];
            float32x4_t v99 = *v68;
            float32x4_t v98 = v68[1];
            float32x4_t v68 = (float32x4_t *)((char *)v68 + 120);
            int32x4_t v100 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
            int32x4_t v101 = (int32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 4uLL);
            float32x4_t v71 = vmlaq_n_f32(v71, v99, v95.f32[0]);
            float32x4_t v74 = vmlaq_f32(v74, v14, (float32x4_t)vzip1q_s32(v101, v101));
            float32x4_t v76 = vmlaq_laneq_f32(v76, v97, v95, 3);
            float32x4_t v77 = vmlaq_n_f32(v77, v96, v10.f32[0]);
            float32x4_t v79 = vmlaq_f32(v79, v12, (float32x4_t)vzip1q_s32(v100, v100));
            float32x4_t v73 = vmlaq_f32(v73, v98, (float32x4_t)vzip1q_s32((int32x4_t)v95, vdupq_lane_s32(*(int32x2_t *)v95.f32, 1)));
            float32x4_t v75 = vmlaq_f32(v75, v13, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v95, (int32x4_t)v95), (int32x4_t)v95));
            float32x4_t v78 = vmlaq_f32(v78, v11, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
            v91 -= 6;
            continue;
          }
          break;
        }
        if (v91 >= 4)
        {
          if (v91 == 4)
          {
            float32x4_t v10 = 0uLL;
          }
          else if (v91 == 5)
          {
            float32x4_t v10 = (float32x4_t)v70[1].u32[0];
          }
          else
          {
            int32x2_t v102 = 0;
            if (v91 != 6)
            {
              int32x2_t v103 = 0;
              if ((v67 & 1) == 0) {
                v103.i32[0] = v70[1].i32[3];
              }
              v102.i32[0] = v70[1].i32[2];
              int32x2_t v102 = vzip1_s32(v102, v103);
            }
            v10.i64[0] = v70[1].i64[0];
            *(int32x2_t *)&v10.u32[2] = v102;
          }
          float32x4_t v95 = *(float32x4_t *)v70;
          goto LABEL_71;
        }
        if (v91 == 1)
        {
          float32x4_t v95 = (float32x4_t)v70->u32[0];
        }
        else
        {
          uint64_t v104 = 0;
          if (v91 != 2) {
            LODWORD(v104) = v70->i32[2];
          }
          v95.i64[0] = v70->i64[0];
          v95.i64[1] = v104;
        }
        float32x4_t v10 = 0uLL;
LABEL_90:
        uint64_t v105 = 5 * v91;
        if ((5 * v91) < 0x10)
        {
          if (v105 >= 8)
          {
            if (v105 == 8)
            {
              float32x4_t v106 = 0uLL;
            }
            else
            {
              if ((unint64_t)(v105 - 8) >= 4)
              {
                if (v105 == 12)
                {
                  float32x4_t v11 = 0uLL;
                }
                else
                {
                  if (v105 == 13)
                  {
                    v11.i64[0] = v68[3].u32[0];
                    v12.i64[0] = 0;
                  }
                  else
                  {
                    v11.i64[0] = v68[3].i64[0];
                    v12.i32[0] = v68[3].i32[2];
                  }
                  v11.i64[1] = v12.i64[0];
                }
                float32x4_t v106 = v68[2];
LABEL_130:
                float32x4_t v107 = *v68;
                float32x4_t v12 = v68[1];
LABEL_131:
                float32x4_t v110 = 0uLL;
                goto LABEL_132;
              }
              if (v105 == 9)
              {
                float32x4_t v106 = (float32x4_t)v68[2].u32[0];
              }
              else
              {
                uint64_t v111 = 0;
                if (v91 != 2) {
                  LODWORD(v111) = v68[2].i32[2];
                }
                v106.i64[0] = v68[2].i64[0];
                v106.i64[1] = v111;
              }
            }
            float32x4_t v11 = 0uLL;
            goto LABEL_130;
          }
          if (v105 < 4)
          {
            v107.i64[0] = v68->i64[0];
            v11.i32[0] = v68->i32[2];
            v107.i64[1] = v11.i64[0];
            float32x4_t v12 = 0uLL;
          }
          else
          {
            if (v91 == 1)
            {
              v12.i64[0] = v68[1].u32[0];
              v11.i64[0] = 0;
            }
            else
            {
              v12.i64[0] = v68[1].i64[0];
              v11.i32[0] = v68[1].i32[2];
            }
            float32x4_t v107 = *v68;
            v12.i64[1] = v11.i64[0];
          }
          float32x4_t v106 = 0uLL;
          float32x4_t v11 = 0uLL;
          goto LABEL_131;
        }
        float32x4_t v106 = v68[2];
        float32x4_t v11 = v68[3];
        float32x4_t v107 = *v68;
        float32x4_t v12 = v68[1];
        unint64_t v108 = v105 - 16;
        if (v105 == 16) {
          goto LABEL_131;
        }
        if (v108 < 8)
        {
          if (v108 >= 4)
          {
            if (v105 == 20)
            {
              float32x4_t v14 = 0uLL;
            }
            else
            {
              if (v105 == 21)
              {
                v14.i64[0] = v68[5].u32[0];
                v13.i64[0] = 0;
              }
              else
              {
                v14.i64[0] = v68[5].i64[0];
                v13.i32[0] = v68[5].i32[2];
              }
              v14.i64[1] = v13.i64[0];
            }
            float32x4_t v110 = v68[4];
            goto LABEL_133;
          }
          v13.i32[0] = v68[4].i32[2];
          v110.i64[0] = v68[4].i64[0];
          v110.i64[1] = v13.i64[0];
LABEL_132:
          float32x4_t v14 = 0uLL;
LABEL_133:
          float32x4_t v13 = 0uLL;
          float32x4_t v109 = 0uLL;
          goto LABEL_134;
        }
        if (v105 == 24)
        {
          float32x4_t v13 = 0uLL;
LABEL_143:
          float32x4_t v109 = 0uLL;
          goto LABEL_151;
        }
        if ((unint64_t)(v105 - 24) < 4)
        {
          if (v91 == 5)
          {
            v13.i64[0] = v68[6].u32[0];
            v14.i64[0] = 0;
          }
          else
          {
            v13.i64[0] = v68[6].i64[0];
            v14.i32[0] = v68[6].i32[2];
          }
          v13.i64[1] = v14.i64[0];
          goto LABEL_143;
        }
        if (v105 == 28)
        {
          float32x4_t v109 = 0uLL;
        }
        else if (v105 == 29)
        {
          float32x4_t v109 = (float32x4_t)v68[7].u32[0];
        }
        else
        {
          int32x2_t v119 = 0;
          if (v91 != 6)
          {
            int32x2_t v120 = 0;
            if ((v67 & 1) == 0) {
              v120.i32[0] = v68[7].i32[3];
            }
            v14.i32[0] = v68[7].i32[2];
            int32x2_t v119 = vzip1_s32(*(int32x2_t *)v14.f32, v120);
          }
          v109.i64[0] = v68[7].i64[0];
          *(int32x2_t *)&v109.u32[2] = v119;
        }
        float32x4_t v13 = v68[6];
LABEL_151:
        float32x4_t v110 = v68[4];
        float32x4_t v14 = v68[5];
LABEL_134:
        int32x4_t v112 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
        int32x4_t v113 = (int32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 4uLL);
        float32x4_t v71 = vmlaq_n_f32(v71, v107, v95.f32[0]);
        float32x4_t v74 = vmlaq_f32(v74, v106, (float32x4_t)vzip1q_s32(v113, v113));
        float32x4_t v76 = vmlaq_laneq_f32(v76, v110, v95, 3);
        float32x4_t v77 = vmlaq_n_f32(v77, v14, v10.f32[0]);
        float32x4_t v79 = vmlaq_f32(v79, v109, (float32x4_t)vzip1q_s32(v112, v112));
        float32x4_t v73 = vmlaq_f32(v73, v12, (float32x4_t)vzip1q_s32((int32x4_t)v95, vdupq_lane_s32(*(int32x2_t *)v95.f32, 1)));
        float32x4_t v75 = vmlaq_f32(v75, v11, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v95, (int32x4_t)v95), (int32x4_t)v95));
        float32x4_t v78 = vmlaq_f32(v78, v13, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
LABEL_135:
        float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 0xCuLL);
        float32x4_t v114 = (float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v77, 0xCuLL);
        float32x4_t v115 = (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 0xCuLL);
        int8x16_t v116 = (int8x16_t)vaddq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v79, 0xCuLL));
        int8x16_t v117 = (int8x16_t)vaddq_f32(v73, v114);
        int8x16_t v118 = (int8x16_t)vaddq_f32(v74, v10);
        *int8x16_t v34 = vaddq_f32((float32x4_t)vextq_s8(v118, v116, 8uLL), vaddq_f32(vaddq_f32(v71, v115), (float32x4_t)vextq_s8(v117, v118, 4uLL)));
        v34[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL), vadd_f32(*(float32x2_t *)v117.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.i8, 1))).u32[0];
        int8x16_t v34 = (float32x4_t *)((char *)v34 + 20);
        ++v35;
        int8x16_t v36 = (int *)((char *)v36 + v20);
      }
      while (v35 != a6);
LABEL_153:
      v16 += v17;
      ++v15;
    }
    while (v15 != v32);
  }
  return result;
}

int *resample_horizontal<float,float,2,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  if ((int)a5 >= 1 && a9 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a7;
    unint64_t v13 = *a8;
    uint64_t v14 = v13 >> 3;
    unint64_t v15 = a5;
    uint64_t v16 = 4 * a2;
    uint64_t v17 = v16 + 8;
    unint64_t v18 = (char *)result + (v16 + 8) * a5;
    if (v13 >> 3 >= *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8]) {
      uint64_t v14 = *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8];
    }
    unint64_t v19 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v19 = 1;
    }
    unint64_t v20 = a5 - v19;
    BOOL v21 = a2 > 7;
    unsigned int v22 = a2 & 7;
    if ((a2 & 7) != 0) {
      BOOL v21 = 0;
    }
    else {
      unsigned int v22 = 8;
    }
    unsigned int v23 = 16 * ((a2 >> 3) - v21);
    *(float *)&a3 = (float)v22;
    uint64_t v24 = (8 * v22 + 63) & 0xC0;
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8) {
      unsigned int v26 = 8;
    }
    else {
      unsigned int v26 = a2;
    }
    *(float *)&a3 = (float)v26;
    uint64_t v27 = v24 + 4 * v23;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    int8x16_t v29 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v30 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v31 = a9;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    int8x16_t v32 = (int8x16_t)vcgtq_f32(v25, (float32x4_t)xmmword_1850CD7B0);
    int8x16_t v33 = (int8x16_t)vcgtq_f32(v25, (float32x4_t)xmmword_1850CD7C0);
    do
    {
      int8x16_t v34 = *(float32x2_t **)(a6 + 8 * v11);
      if (v15 <= v19)
      {
        unint64_t v35 = 0;
        int8x16_t v36 = result;
      }
      else
      {
        unint64_t v35 = 0;
        int8x16_t v36 = result;
        do
        {
          int8x16_t v37 = (float32x4_t *)(v12 + 8 * *v36);
          unint64_t v38 = (float32x4_t *)((char *)v37 + v27);
          if ((unint64_t)v37 + v27 > 8 * v14 + v12) {
            goto LABEL_29;
          }
          if (v37 >= v38)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
          }
          else
          {
            unint64_t v39 = (int8x16_t *)(v36 + 2);
            int v40 = v36[1];
            unint64_t v41 = (unint64_t)&v38[-4];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            while ((unint64_t)v37 < v41)
            {
              int8x16_t v46 = *v39;
              int8x16_t v47 = v39[1];
              v39 += 2;
              int32x4_t v48 = (int32x4_t)vandq_s8(v47, v29);
              int32x4_t v49 = (int32x4_t)vandq_s8(v46, v30);
              float32x4_t v50 = *v37;
              float32x4_t v51 = v37[1];
              float32x4_t v52 = v37[2];
              float32x4_t v53 = v37[3];
              v37 += 4;
              float32x4_t v54 = (float32x4_t)vzip1q_s32(v49, v49);
              float32x4_t v9 = (float32x4_t)vzip2q_s32(v49, v49);
              float32x4_t v55 = (float32x4_t)vzip1q_s32(v48, v48);
              float32x4_t v10 = (float32x4_t)vzip2q_s32(v48, v48);
              float32x4_t v45 = vmlaq_f32(v45, v10, v53);
              float32x4_t v44 = vmlaq_f32(v44, v55, v52);
              float32x4_t v43 = vmlaq_f32(v43, v9, v51);
              float32x4_t v42 = vmlaq_f32(v42, v54, v50);
              v40 -= 8;
            }
            if (v40 >= 1)
            {
              int32x4_t v56 = (int32x4_t)vandq_s8(v39[1], v33);
              int32x4_t v57 = (int32x4_t)vandq_s8(*v39, v32);
              float32x4_t v58 = (float32x4_t)vzip1q_s32(v57, v57);
              float32x4_t v9 = (float32x4_t)vzip2q_s32(v57, v57);
              float32x4_t v59 = (float32x4_t)vzip1q_s32(v56, v56);
              float32x4_t v10 = (float32x4_t)vzip2q_s32(v56, v56);
              float32x4_t v45 = vmlaq_f32(v45, v10, v37[3]);
              float32x4_t v44 = vmlaq_f32(v44, v59, v37[2]);
              float32x4_t v43 = vmlaq_f32(v43, v9, v37[1]);
              float32x4_t v42 = vmlaq_f32(v42, v58, *v37);
            }
          }
          int8x16_t v60 = (int8x16_t)vaddq_f32(vaddq_f32(v42, v44), vaddq_f32(v43, v45));
          *v34++ = vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
          ++v35;
          int8x16_t v36 = (int *)((char *)v36 + v17);
        }
        while (v35 != v20);
        unint64_t v35 = v20;
      }
LABEL_29:
      if (v35 >= v15) {
        goto LABEL_118;
      }
      do
      {
        uint64_t v61 = *v36;
        if ((int)v61 >= (int)v14) {
          int v62 = v14;
        }
        else {
          int v62 = *v36;
        }
        LODWORD(v63) = v14 - v62;
        if (v36[1] < (int)v63) {
          LODWORD(v63) = v36[1];
        }
        if ((int)v63 < 1)
        {
          v68.i64[0] = 0x8000000080000000;
          v68.i64[1] = 0x8000000080000000;
          v69.i64[0] = 0x8000000080000000;
          v69.i64[1] = 0x8000000080000000;
          v70.i64[0] = 0x8000000080000000;
          v70.i64[1] = 0x8000000080000000;
          v71.i64[0] = 0x8000000080000000;
          v71.i64[1] = 0x8000000080000000;
          goto LABEL_110;
        }
        int8x16_t v64 = (float32x4_t *)(v12 + 8 * v61);
        unint64_t v65 = (unint64_t)&v64[-4] + 8 * (int)v63;
        int v66 = (int8x16_t *)(v36 + 2);
        if ((unint64_t)v64 >= v65)
        {
          v68.i64[0] = 0x8000000080000000;
          v68.i64[1] = 0x8000000080000000;
          v69.i64[0] = 0x8000000080000000;
          v69.i64[1] = 0x8000000080000000;
          v70.i64[0] = 0x8000000080000000;
          v70.i64[1] = 0x8000000080000000;
          v71.i64[0] = 0x8000000080000000;
          v71.i64[1] = 0x8000000080000000;
          goto LABEL_66;
        }
        uint64_t v67 = (int)v63;
        v68.i64[0] = 0x8000000080000000;
        v68.i64[1] = 0x8000000080000000;
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        do
        {
          unint64_t v72 = v18 - (char *)v66;
          if ((unint64_t)(v18 - (char *)v66) >= 0x20) {
            unint64_t v72 = 32;
          }
          if (v72 >= 0x20)
          {
            int32x4_t v73 = (int32x4_t)vandq_s8(v66[1], v29);
            int32x4_t v74 = (int32x4_t)vandq_s8(*v66, v30);
            goto LABEL_42;
          }
          if (!v67)
          {
            int32x4_t v74 = 0uLL;
LABEL_55:
            int32x4_t v73 = 0uLL;
            goto LABEL_42;
          }
          if (v67 < 4)
          {
            if (v67 == 1)
            {
              int32x4_t v74 = (int32x4_t)v66->u32[0];
            }
            else
            {
              uint64_t v81 = 0;
              if (v67 != 2) {
                LODWORD(v81) = v66->i32[2];
              }
              v74.i64[0] = v66->i64[0];
              v74.i64[1] = v81;
            }
            goto LABEL_55;
          }
          if (v67 == 4)
          {
            int32x4_t v73 = 0uLL;
          }
          else if (v67 == 5)
          {
            int32x4_t v73 = (int32x4_t)v66[1].u32[0];
          }
          else
          {
            int32x2_t v82 = 0;
            if (v67 != 6)
            {
              int32x2_t v83 = 0;
              if ((v63 & 1) == 0) {
                v83.i32[0] = v66[1].i32[3];
              }
              v10.i32[0] = v66[1].i32[2];
              int32x2_t v82 = vzip1_s32(*(int32x2_t *)v10.f32, v83);
            }
            v73.i64[0] = v66[1].i64[0];
            v73.u64[1] = (unint64_t)v82;
          }
          int32x4_t v74 = *(int32x4_t *)v66;
LABEL_42:
          v66 += 2;
          float32x4_t v76 = v64[2];
          float32x4_t v75 = v64[3];
          float32x4_t v77 = *v64;
          float32x4_t v78 = v64[1];
          v64 += 4;
          float32x4_t v79 = (float32x4_t)vzip2q_s32(v73, v73);
          float32x4_t v10 = (float32x4_t)vzip1q_s32(v73, v73);
          float32x4_t v80 = (float32x4_t)vzip1q_s32(v74, v74);
          float32x4_t v9 = (float32x4_t)vzip2q_s32(v74, v74);
          float32x4_t v69 = vmlaq_f32(v69, v9, v78);
          float32x4_t v68 = vmlaq_f32(v68, v80, v77);
          float32x4_t v70 = vmlaq_f32(v70, v10, v76);
          float32x4_t v71 = vmlaq_f32(v71, v79, v75);
          v67 -= 8;
        }
        while ((unint64_t)v64 < v65);
        if ((int)v67 < 1) {
          goto LABEL_110;
        }
        LODWORD(v63) = v67;
LABEL_66:
        char v84 = v63;
        unint64_t v85 = v63 & 7;
        unint64_t v63 = v63;
        while (2)
        {
          unint64_t v86 = v18 - (char *)v66;
          if ((unint64_t)(v18 - (char *)v66) >= 0x20) {
            unint64_t v86 = 32;
          }
          if (v86 >= 0x20)
          {
            v9.f32[0] = fminf((float)(int)v63, 8.0);
            float32x4_t v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            int32x4_t v88 = (int32x4_t)vandq_s8(v66[1], (int8x16_t)vcgtq_f32(v87, (float32x4_t)xmmword_1850CD7C0));
            int32x4_t v89 = (int32x4_t)vandq_s8(*v66, (int8x16_t)vcgtq_f32(v87, (float32x4_t)xmmword_1850CD7B0));
LABEL_71:
            if (v63 <= 7)
            {
              unint64_t v63 = v85;
              goto LABEL_87;
            }
            v66 += 2;
            float32x4_t v91 = v64[2];
            float32x4_t v90 = v64[3];
            float32x4_t v92 = *v64;
            float32x4_t v93 = v64[1];
            v64 += 4;
            float32x4_t v94 = (float32x4_t)vzip2q_s32(v88, v88);
            float32x4_t v10 = (float32x4_t)vzip1q_s32(v88, v88);
            float32x4_t v95 = (float32x4_t)vzip1q_s32(v89, v89);
            float32x4_t v9 = (float32x4_t)vzip2q_s32(v89, v89);
            float32x4_t v69 = vmlaq_f32(v69, v93, v9);
            float32x4_t v68 = vmlaq_f32(v68, v92, v95);
            float32x4_t v70 = vmlaq_f32(v70, v91, v10);
            float32x4_t v71 = vmlaq_f32(v71, v90, v94);
            BOOL v96 = (uint64_t)v63 <= 8;
            v63 -= 8;
            if (v96) {
              goto LABEL_110;
            }
            continue;
          }
          break;
        }
        if (v63 >= 4)
        {
          if (v63 == 4)
          {
            int32x4_t v88 = 0uLL;
          }
          else if (v63 == 5)
          {
            int32x4_t v88 = (int32x4_t)v66[1].u32[0];
          }
          else
          {
            int32x2_t v97 = 0;
            if (v63 != 6)
            {
              int32x2_t v98 = 0;
              if ((v84 & 1) == 0) {
                v98.i32[0] = v66[1].i32[3];
              }
              v10.i32[0] = v66[1].i32[2];
              int32x2_t v97 = vzip1_s32(*(int32x2_t *)v10.f32, v98);
            }
            v88.i64[0] = v66[1].i64[0];
            v88.u64[1] = (unint64_t)v97;
          }
          int32x4_t v89 = *(int32x4_t *)v66;
          goto LABEL_71;
        }
        if (v63 == 1)
        {
          int32x4_t v89 = (int32x4_t)v66->u32[0];
        }
        else
        {
          uint64_t v109 = 0;
          if (v63 != 2) {
            LODWORD(v109) = v66->i32[2];
          }
          v89.i64[0] = v66->i64[0];
          v89.i64[1] = v109;
        }
        int32x4_t v88 = 0uLL;
LABEL_87:
        if (v63 < 4)
        {
          if (v63 < 2)
          {
            uint64_t v104 = 0;
            if (v63 != 1) {
              uint64_t v104 = v64->i64[1];
            }
            v103.i64[0] = v64->i64[0];
            v103.i64[1] = v104;
            float32x4_t v102 = 0uLL;
          }
          else
          {
            float32x4_t v102 = 0uLL;
            if (v63 != 2) {
              float32x4_t v102 = (float32x4_t)v64[1].u64[0];
            }
            float32x4_t v103 = *v64;
          }
          float32x4_t v101 = 0uLL;
          float32x4_t v99 = 0uLL;
          goto LABEL_109;
        }
        if (2 * v63 == 8)
        {
          float32x4_t v101 = 0uLL;
LABEL_107:
          float32x4_t v99 = 0uLL;
          goto LABEL_108;
        }
        if ((unint64_t)(2 * v63) - 8 < 4)
        {
          uint64_t v105 = 0;
          if (v63 != 5) {
            LODWORD(v105) = v64[2].i32[2];
          }
          v101.i64[0] = v64[2].i64[0];
          v101.i64[1] = v105;
          goto LABEL_107;
        }
        float32x4_t v99 = 0uLL;
        if (v63 != 6)
        {
          uint64_t v100 = 0;
          if (v63 != 7) {
            uint64_t v100 = v64[3].i64[1];
          }
          v99.i64[0] = v64[3].i64[0];
          v99.i64[1] = v100;
        }
        float32x4_t v101 = v64[2];
LABEL_108:
        float32x4_t v103 = *v64;
        float32x4_t v102 = v64[1];
LABEL_109:
        float32x4_t v106 = (float32x4_t)vzip2q_s32(v88, v88);
        float32x4_t v10 = (float32x4_t)vzip1q_s32(v88, v88);
        float32x4_t v107 = (float32x4_t)vzip1q_s32(v89, v89);
        float32x4_t v9 = (float32x4_t)vzip2q_s32(v89, v89);
        float32x4_t v69 = vmlaq_f32(v69, v102, v9);
        float32x4_t v68 = vmlaq_f32(v68, v103, v107);
        float32x4_t v70 = vmlaq_f32(v70, v101, v10);
        float32x4_t v71 = vmlaq_f32(v71, v99, v106);
LABEL_110:
        int8x16_t v108 = (int8x16_t)vaddq_f32(vaddq_f32(v68, v70), vaddq_f32(v69, v71));
        *v34++ = vadd_f32(*(float32x2_t *)v108.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL));
        ++v35;
        int8x16_t v36 = (int *)((char *)v36 + v17);
      }
      while (v35 != v15);
LABEL_118:
      v12 += v13;
      ++v11;
    }
    while (v11 != v31);
  }
  return result;
}

float32x2_t *resample_horizontal<float,float,4,false>(float32x2_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    unint64_t v10 = *a7;
    uint64_t v11 = v10 >> 4;
    uint64_t v12 = 4 * a2;
    uint64_t v13 = v12 + 8;
    uint64_t v14 = (char *)result + (v12 + 8) * a4;
    if (v10 >> 4 >= *(int *)&v14[-v12 - 4] + (uint64_t)*(int *)&v14[-v12 - 8]) {
      uint64_t v11 = *(int *)&v14[-v12 - 4] + (uint64_t)*(int *)&v14[-v12 - 8];
    }
    unint64_t v15 = (4 * a2 + 23) / (4 * a2 + 8);
    if (a2 > 1) {
      unint64_t v15 = 1;
    }
    BOOL v16 = a2 > 3;
    BOOL v17 = (a2 & 3) == 0;
    LODWORD(v18) = (16 * (a2 & 3)) | 0x40;
    if ((a2 & 3) != 0) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 128;
    }
    unint64_t v19 = a4 - v15;
    unsigned int v20 = a2 >> 2;
    if (!v17) {
      BOOL v16 = 0;
    }
    unint64_t v21 = ((v18 - 1) & 0xFFFFFFFFFFFFFFC0) + 64 * (v20 - v16);
    uint64_t v22 = a8;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    do
    {
      unsigned int v23 = *(float32x4_t **)(a5 + 8 * v8);
      if (a4 <= v15)
      {
        unint64_t v24 = 0;
        float32x4_t v25 = result;
      }
      else
      {
        unint64_t v24 = 0;
        float32x4_t v25 = result;
        while (1)
        {
          unsigned int v26 = (float32x4_t *)(v9 + 16 * v25->i32[0]);
          uint64_t v27 = (float32x4_t *)((char *)v26 + v21);
          if ((unint64_t)v26 + v21 > 16 * v11 + v9) {
            break;
          }
          if (v26 >= v27)
          {
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v32.i64[0] = 0x8000000080000000;
            v32.i64[1] = 0x8000000080000000;
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            v34.i64[0] = 0x8000000080000000;
            v34.i64[1] = 0x8000000080000000;
          }
          else
          {
            float32x4_t v28 = v25 + 1;
            int v29 = v25->i32[1];
            unint64_t v30 = (unint64_t)&v27[-4];
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v32.i64[0] = 0x8000000080000000;
            v32.i64[1] = 0x8000000080000000;
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            if ((unint64_t)v26 < v30)
            {
              unint64_t v35 = (float32x4_t *)(v9 + 16 * v25->i32[0]);
              v34.i64[0] = 0x8000000080000000;
              v34.i64[1] = 0x8000000080000000;
              do
              {
                float32x4_t v36 = *(float32x4_t *)v28->f32;
                v28 += 2;
                unsigned int v26 = v35 + 4;
                float32x4_t v31 = vmlaq_n_f32(v31, *v35, v36.f32[0]);
                float32x4_t v32 = vmlaq_lane_f32(v32, v35[1], *(float32x2_t *)v36.f32, 1);
                float32x4_t v33 = vmlaq_laneq_f32(v33, v35[2], v36, 2);
                float32x4_t v34 = vmlaq_laneq_f32(v34, v35[3], v36, 3);
                v29 -= 4;
                unint64_t v35 = v26;
              }
              while ((unint64_t)v26 < v30);
            }
            else
            {
              v34.i64[0] = 0x8000000080000000;
              v34.i64[1] = 0x8000000080000000;
            }
            if (v29 >= 1)
            {
              float32x4_t v31 = vmlaq_n_f32(v31, *v26, COERCE_FLOAT(*(_OWORD *)v28->f32));
              float32x4_t v32 = vmlaq_lane_f32(v32, v26[1], *v28, 1);
              float32x4_t v33 = vmlaq_laneq_f32(v33, v26[2], *(float32x4_t *)v28->f32, 2);
              float32x4_t v34 = vmlaq_laneq_f32(v34, v26[3], *(float32x4_t *)v28->f32, 3);
            }
          }
          *v23++ = vaddq_f32(vaddq_f32(v31, v33), vaddq_f32(v32, v34));
          ++v24;
          float32x4_t v25 = (float32x2_t *)((char *)v25 + v13);
          if (v24 == v19)
          {
            unint64_t v24 = v19;
            break;
          }
        }
      }
      if (v24 < a4)
      {
        do
        {
          int v37 = v25->i32[1];
          uint64_t v38 = v25->i32[0];
          if ((int)v38 >= (int)v11) {
            __int32 v39 = v11;
          }
          else {
            __int32 v39 = v25->i32[0];
          }
          int v40 = v11 - v39;
          if (v37 >= v40) {
            int v37 = v40;
          }
          if (v37 < 1)
          {
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
          }
          else
          {
            unint64_t v41 = (float32x4_t *)(v9 + 16 * v38);
            unint64_t v42 = (unint64_t)&v41[v37 - 4];
            float32x4_t v43 = v25 + 1;
            if ((unint64_t)v41 >= v42)
            {
              v45.i64[0] = 0x8000000080000000;
              v45.i64[1] = 0x8000000080000000;
              v46.i64[0] = 0x8000000080000000;
              v46.i64[1] = 0x8000000080000000;
              v47.i64[0] = 0x8000000080000000;
              v47.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              goto LABEL_56;
            }
            uint64_t v44 = v37;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            do
            {
              unint64_t v49 = v14 - (char *)v43;
              if ((unint64_t)(v14 - (char *)v43) >= 0x10) {
                unint64_t v49 = 16;
              }
              if (v49 < 0x10)
              {
                if (v44)
                {
                  if (v44 == 1)
                  {
                    float32x4_t v50 = (float32x4_t)v43->u32[0];
                  }
                  else
                  {
                    int32x2_t v52 = 0;
                    if (v44 != 2)
                    {
                      int32x2_t v53 = 0;
                      if ((v37 & 1) == 0) {
                        v53.i32[0] = v43[1].i32[1];
                      }
                      v52.i32[0] = v43[1].i32[0];
                      int32x2_t v52 = vzip1_s32(v52, v53);
                    }
                    *(float32x2_t *)v50.f32 = *v43;
                    *(int32x2_t *)&v50.u32[2] = v52;
                  }
                }
                else
                {
                  float32x4_t v50 = 0uLL;
                }
              }
              else
              {
                float32x4_t v50 = *(float32x4_t *)v43->f32;
              }
              v43 += 2;
              float32x4_t v51 = v41 + 4;
              float32x4_t v45 = vmlaq_n_f32(v45, *v41, v50.f32[0]);
              float32x4_t v46 = vmlaq_lane_f32(v46, v41[1], *(float32x2_t *)v50.f32, 1);
              float32x4_t v47 = vmlaq_laneq_f32(v47, v41[2], v50, 2);
              float32x4_t v48 = vmlaq_laneq_f32(v48, v41[3], v50, 3);
              v44 -= 4;
              unint64_t v41 = v51;
            }
            while ((unint64_t)v51 < v42);
            if ((int)v44 >= 1)
            {
              int v37 = v44;
              unint64_t v41 = v51;
LABEL_56:
              int v54 = v37;
              while (2)
              {
                unint64_t v55 = v14 - (char *)v43;
                if ((unint64_t)(v14 - (char *)v43) >= 0x10) {
                  unint64_t v55 = 16;
                }
                if (v55 >= 0x10)
                {
                  float32x4_t v56 = *(float32x4_t *)v43->f32;
                  goto LABEL_61;
                }
                if (v54 == 1)
                {
                  unsigned int v62 = v43->i32[0];
                  v43 += 2;
                  float32x4_t v56 = (float32x4_t)v62;
                  float32x4_t v59 = *v41;
                  goto LABEL_70;
                }
                int32x2_t v63 = 0;
                if (v54 != 2)
                {
                  int32x2_t v64 = 0;
                  if ((v37 & 1) == 0) {
                    v64.i32[0] = v43[1].i32[1];
                  }
                  v63.i32[0] = v43[1].i32[0];
                  int32x2_t v63 = vzip1_s32(v63, v64);
                }
                *(float32x2_t *)v56.f32 = *v43;
                *(int32x2_t *)&v56.u32[2] = v63;
LABEL_61:
                v43 += 2;
                if (v54 >= 4)
                {
                  float32x4_t v57 = v41[3];
                  goto LABEL_63;
                }
                if ((v54 & 0x3FFFFFFE) != 0)
                {
                  float32x4_t v58 = 0uLL;
                  float32x4_t v57 = 0uLL;
                  if (v54 != 2) {
LABEL_63:
                  }
                    float32x4_t v58 = v41[2];
                  float32x4_t v59 = *v41;
                  float32x4_t v60 = v41[1];
                }
                else
                {
                  float32x4_t v59 = *v41;
                  if (v54 == 1) {
LABEL_70:
                  }
                    float32x4_t v60 = 0uLL;
                  else {
                    float32x4_t v60 = v41[1];
                  }
                  float32x4_t v58 = 0uLL;
                  float32x4_t v57 = 0uLL;
                }
                v41 += 4;
                float32x4_t v45 = vmlaq_n_f32(v45, v59, v56.f32[0]);
                float32x4_t v46 = vmlaq_lane_f32(v46, v60, *(float32x2_t *)v56.f32, 1);
                float32x4_t v47 = vmlaq_laneq_f32(v47, v58, v56, 2);
                float32x4_t v48 = vmlaq_laneq_f32(v48, v57, v56, 3);
                BOOL v61 = __OFSUB__(v54, 4);
                v54 -= 4;
                if ((v54 < 0) ^ v61 | (v54 == 0)) {
                  break;
                }
                continue;
              }
            }
          }
          *v23++ = vaddq_f32(vaddq_f32(v45, v47), vaddq_f32(v46, v48));
          ++v24;
          float32x4_t v25 = (float32x2_t *)((char *)v25 + v13);
        }
        while (v24 != a4);
      }
      v9 += v10;
      ++v8;
    }
    while (v8 != v22);
  }
  return result;
}

int *resample_horizontal<float,float,3,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  if ((int)a5 >= 1 && a9 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a7;
    unint64_t v16 = *a8;
    unint64_t v17 = v16 / 0xC;
    uint64_t v18 = 4 * a2;
    uint64_t v19 = v18 + 8;
    unsigned int v20 = (char *)result + (v18 + 8) * a5;
    if (v16 / 0xC >= *(int *)&v20[-v18 - 4] + (uint64_t)*(int *)&v20[-v18 - 8]) {
      unint64_t v17 = *(int *)&v20[-v18 - 4] + (uint64_t)*(int *)&v20[-v18 - 8];
    }
    unint64_t v21 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v21 = 1;
    }
    unsigned int v22 = a2 % 5;
    BOOL v23 = a2 > 4;
    if (a2 % 5) {
      BOOL v23 = 0;
    }
    else {
      unsigned int v22 = 5;
    }
    uint64_t v24 = ((12 * v22 + 63) & 0x7FFFFFFC0) + 60 * (a2 / 5 - v23);
    unint64_t v25 = a5 - v21;
    *(float *)&a3 = (float)v22;
    float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 5) {
      unsigned int v27 = 5;
    }
    else {
      unsigned int v27 = a2;
    }
    *(float *)&a3 = (float)v27;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    int8x16_t v29 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v30 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v31 = a9;
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    int8x16_t v32 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_1850CD7B0);
    int8x16_t v33 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_1850CD7C0);
    do
    {
      uint64_t v34 = *(void *)(a6 + 8 * v14);
      if (a5 <= v21)
      {
        unint64_t v35 = 0;
        float32x4_t v36 = result;
      }
      else
      {
        unint64_t v35 = 0;
        float32x4_t v36 = result;
        do
        {
          int v37 = (float32x4_t *)(v15 + 12 * *v36);
          uint64_t v38 = (float32x4_t *)((char *)v37 + v24);
          if ((unint64_t)v37 + v24 > 12 * v17 + v15) {
            goto LABEL_29;
          }
          if (v37 >= v38)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
          }
          else
          {
            __int32 v39 = (int8x16_t *)(v36 + 2);
            int v40 = v36[1];
            unint64_t v41 = (unint64_t)&v38[-4];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            while ((unint64_t)v37 < v41)
            {
              float32x4_t v10 = (float32x4_t)vandq_s8(v39[1], v29);
              int32x4_t v46 = (int32x4_t)vandq_s8(*v39, v30);
              __int32 v39 = (int8x16_t *)((char *)v39 + 20);
              float32x4_t v12 = *v37;
              float32x4_t v11 = v37[1];
              float32x4_t v13 = v37[2];
              float32x4_t v47 = v37[3];
              int v37 = (float32x4_t *)((char *)v37 + 60);
              float32x4_t v48 = (float32x4_t)vzip1q_s32(v46, v46);
              v48.i32[2] = v46.i32[0];
              float32x4_t v49 = (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)vdupq_laneq_s32(v46, 3), 8uLL);
              float32x4_t v50 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v50.i32[2] = v10.i32[0];
              int32x4_t v51 = (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL);
              float32x4_t v45 = vmlaq_f32(v45, v50, v47);
              float32x4_t v44 = vmlaq_f32(v44, v49, v13);
              float32x4_t v42 = vmlaq_f32(v42, v48, v12);
              float32x4_t v43 = vmlaq_f32(v43, (float32x4_t)vzip1q_s32(v51, v51), v11);
              v40 -= 5;
            }
            if (v40 >= 1)
            {
              float32x4_t v10 = (float32x4_t)vandq_s8(v39[1], v33);
              int32x4_t v52 = (int32x4_t)vandq_s8(*v39, v32);
              float32x4_t v12 = *v37;
              float32x4_t v11 = v37[1];
              float32x4_t v13 = v37[2];
              float32x4_t v53 = (float32x4_t)vzip1q_s32(v52, v52);
              v53.i32[2] = v52.i32[0];
              float32x4_t v54 = (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)vdupq_laneq_s32(v52, 3), 8uLL);
              float32x4_t v55 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v55.i32[2] = v10.i32[0];
              int32x4_t v56 = (int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL);
              float32x4_t v45 = vmlaq_f32(v45, v55, v37[3]);
              float32x4_t v44 = vmlaq_f32(v44, v54, v13);
              float32x4_t v42 = vmlaq_f32(v42, v53, *v37);
              float32x4_t v43 = vmlaq_f32(v43, (float32x4_t)vzip1q_s32(v56, v56), v11);
            }
          }
          v9.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL).u64[0];
          float32x4_t v57 = vaddq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 4uLL));
          int8x16_t v58 = (int8x16_t)vaddq_f32(v43, (float32x4_t)v9.u64[0]);
          int8x16_t v59 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v58, (int8x16_t)vaddq_f32(v44, (float32x4_t)0), 8uLL), vaddq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL)));
          *(void *)uint64_t v34 = v59.i64[0];
          *(_DWORD *)(v34 + 8) = vextq_s8(v59, v59, 8uLL).u32[0];
          v34 += 12;
          ++v35;
          float32x4_t v36 = (int *)((char *)v36 + v19);
        }
        while (v35 != v25);
        unint64_t v35 = v25;
      }
LABEL_29:
      if (v35 >= a5) {
        goto LABEL_122;
      }
      do
      {
        if (*v36 >= (int)v17) {
          int v60 = v17;
        }
        else {
          int v60 = *v36;
        }
        LODWORD(v61) = v17 - v60;
        if (v36[1] < (int)v61) {
          LODWORD(v61) = v36[1];
        }
        if ((int)v61 < 1)
        {
          v65.i64[0] = 0x8000000080000000;
          v65.i64[1] = 0x8000000080000000;
          v66.i64[0] = 0x8000000080000000;
          v66.i64[1] = 0x8000000080000000;
          v67.i64[0] = 0x8000000080000000;
          v67.i64[1] = 0x8000000080000000;
          v68.i64[0] = 0x8000000080000000;
          v68.i64[1] = 0x8000000080000000;
          goto LABEL_119;
        }
        unsigned int v62 = (float32x4_t *)(v15 + 12 * *v36);
        unint64_t v63 = (unint64_t)&v62[-4] + 12 * (int)v61;
        int32x2_t v64 = (int8x16_t *)(v36 + 2);
        if ((unint64_t)v62 >= v63)
        {
          v65.i64[0] = 0x8000000080000000;
          v65.i64[1] = 0x8000000080000000;
          v66.i64[0] = 0x8000000080000000;
          v66.i64[1] = 0x8000000080000000;
          v67.i64[0] = 0x8000000080000000;
          v67.i64[1] = 0x8000000080000000;
          v68.i64[0] = 0x8000000080000000;
          v68.i64[1] = 0x8000000080000000;
          goto LABEL_65;
        }
        unint64_t v61 = (int)v61;
        v65.i64[0] = 0x8000000080000000;
        v65.i64[1] = 0x8000000080000000;
        v66.i64[0] = 0x8000000080000000;
        v66.i64[1] = 0x8000000080000000;
        v67.i64[0] = 0x8000000080000000;
        v67.i64[1] = 0x8000000080000000;
        v68.i64[0] = 0x8000000080000000;
        v68.i64[1] = 0x8000000080000000;
        do
        {
          unint64_t v69 = v20 - (char *)v64;
          if ((unint64_t)(v20 - (char *)v64) >= 0x20) {
            unint64_t v69 = 32;
          }
          if (v69 >= 0x20)
          {
            int32x4_t v70 = (int32x4_t)vandq_s8(v64[1], v29);
            int32x4_t v71 = (int32x4_t)vandq_s8(*v64, v30);
            goto LABEL_42;
          }
          if (!v61)
          {
            int32x4_t v71 = 0uLL;
LABEL_55:
            int32x4_t v70 = 0uLL;
            goto LABEL_42;
          }
          if (v61 < 4)
          {
            if (v61 == 1)
            {
              int32x4_t v71 = (int32x4_t)v64->u32[0];
            }
            else
            {
              uint64_t v76 = 0;
              if (v61 != 2) {
                LODWORD(v76) = v64->i32[2];
              }
              v71.i64[0] = v64->i64[0];
              v71.i64[1] = v76;
            }
            goto LABEL_55;
          }
          if (v61 == 4)
          {
            int32x4_t v70 = 0uLL;
          }
          else if (v61 == 5)
          {
            int32x4_t v70 = (int32x4_t)v64[1].u32[0];
          }
          else
          {
            int32x2_t v77 = 0;
            if (v61 != 6)
            {
              int32x2_t v78 = 0;
              if ((v61 & 1) == 0) {
                v78.i32[0] = v64[1].i32[3];
              }
              v10.i32[0] = v64[1].i32[2];
              int32x2_t v77 = vzip1_s32(*(int32x2_t *)v10.f32, v78);
            }
            v70.i64[0] = v64[1].i64[0];
            v70.u64[1] = (unint64_t)v77;
          }
          int32x4_t v71 = *(int32x4_t *)v64;
LABEL_42:
          int32x2_t v64 = (int8x16_t *)((char *)v64 + 20);
          float32x4_t v12 = v62[2];
          float32x4_t v11 = v62[3];
          float32x4_t v13 = *v62;
          float32x4_t v72 = v62[1];
          float32x4_t v73 = (float32x4_t)vzip1q_s32(v70, v70);
          v73.i32[2] = v70.i32[0];
          float32x4_t v10 = (float32x4_t)vzip1q_s32(v71, v71);
          v10.i32[2] = v71.i32[0];
          unsigned int v62 = (float32x4_t *)((char *)v62 + 60);
          float32x4_t v74 = (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)vdupq_laneq_s32(v71, 3), 8uLL);
          int32x4_t v75 = (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL);
          float32x4_t v9 = (float32x4_t)vzip1q_s32(v75, v75);
          float32x4_t v66 = vmlaq_f32(v66, v9, v72);
          float32x4_t v67 = vmlaq_f32(v67, v74, v12);
          float32x4_t v65 = vmlaq_f32(v65, v10, v13);
          float32x4_t v68 = vmlaq_f32(v68, v73, v11);
          v61 -= 5;
        }
        while ((unint64_t)v62 < v63);
        if ((int)v61 < 1) {
          goto LABEL_119;
        }
LABEL_65:
        unint64_t v61 = v61;
        while (2)
        {
          unint64_t v79 = v20 - (char *)v64;
          if ((unint64_t)(v20 - (char *)v64) >= 0x20) {
            unint64_t v79 = 32;
          }
          if (v79 >= 0x20)
          {
            v9.f32[0] = fminf((float)(int)v61, 8.0);
            float32x4_t v80 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            float32x4_t v11 = (float32x4_t)vcgtq_f32(v80, (float32x4_t)xmmword_1850CD7B0);
            float32x4_t v12 = *(float32x4_t *)v64;
            int32x4_t v81 = (int32x4_t)vandq_s8(v64[1], (int8x16_t)vcgtq_f32(v80, (float32x4_t)xmmword_1850CD7C0));
            int32x4_t v82 = (int32x4_t)vandq_s8(*v64, (int8x16_t)v11);
LABEL_70:
            if (v61 <= 5) {
              goto LABEL_89;
            }
            int32x2_t v64 = (int8x16_t *)((char *)v64 + 20);
            float32x4_t v12 = v62[2];
            float32x4_t v11 = v62[3];
            float32x4_t v13 = *v62;
            float32x4_t v83 = v62[1];
            unsigned int v62 = (float32x4_t *)((char *)v62 + 60);
            float32x4_t v84 = (float32x4_t)vzip1q_s32(v81, v81);
            v84.i32[2] = v81.i32[0];
            float32x4_t v10 = (float32x4_t)vzip1q_s32(v82, v82);
            v10.i32[2] = v82.i32[0];
            float32x4_t v85 = (float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)vdupq_laneq_s32(v82, 3), 8uLL);
            int32x4_t v86 = (int32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL);
            float32x4_t v9 = (float32x4_t)vzip1q_s32(v86, v86);
            float32x4_t v66 = vmlaq_f32(v66, v83, v9);
            float32x4_t v67 = vmlaq_f32(v67, v12, v85);
            float32x4_t v65 = vmlaq_f32(v65, v13, v10);
            float32x4_t v68 = vmlaq_f32(v68, v11, v84);
            v61 -= 5;
            continue;
          }
          break;
        }
        if (v61 >= 4)
        {
          if (v61 == 4)
          {
            int32x4_t v81 = 0uLL;
          }
          else if (v61 == 5)
          {
            int32x4_t v81 = (int32x4_t)v64[1].u32[0];
          }
          else
          {
            int32x2_t v87 = 0;
            if (v61 != 6)
            {
              int32x2_t v88 = 0;
              if ((v61 & 1) == 0) {
                v88.i32[0] = v64[1].i32[3];
              }
              v10.i32[0] = v64[1].i32[2];
              int32x2_t v87 = vzip1_s32(*(int32x2_t *)v10.f32, v88);
            }
            v81.i64[0] = v64[1].i64[0];
            v81.u64[1] = (unint64_t)v87;
          }
          int32x4_t v82 = *(int32x4_t *)v64;
          goto LABEL_70;
        }
        if (v61 == 1)
        {
          int32x4_t v82 = (int32x4_t)v64->u32[0];
        }
        else
        {
          uint64_t v89 = 0;
          if (v61 != 2) {
            LODWORD(v89) = v64->i32[2];
          }
          v82.i64[0] = v64->i64[0];
          v82.i64[1] = v89;
        }
        int32x4_t v81 = 0uLL;
LABEL_89:
        uint64_t v90 = 3 * v61;
        if ((3 * v61) < 8)
        {
          if (v90 < 4)
          {
            v91.i64[0] = v62->i64[0];
            v11.i32[0] = v62->i32[2];
            v91.i64[1] = v11.i64[0];
            float32x4_t v13 = 0uLL;
          }
          else
          {
            if (v90 == 4)
            {
              float32x4_t v13 = 0uLL;
            }
            else if (v90 == 5)
            {
              float32x4_t v13 = (float32x4_t)v62[1].u32[0];
            }
            else
            {
              uint64_t v92 = 0;
              if (v61 != 2) {
                LODWORD(v92) = v62[1].i32[2];
              }
              v13.i64[0] = v62[1].i64[0];
              v13.i64[1] = v92;
            }
            float32x4_t v91 = *v62;
          }
          float32x4_t v11 = 0uLL;
          float32x4_t v12 = 0uLL;
          goto LABEL_118;
        }
        if (v90 == 8)
        {
          float32x4_t v11 = 0uLL;
LABEL_111:
          float32x4_t v12 = 0uLL;
          goto LABEL_117;
        }
        if ((unint64_t)(v90 - 8) < 4)
        {
          if (v61 == 3)
          {
            v11.i64[0] = v62[2].u32[0];
            v12.i64[0] = 0;
          }
          else
          {
            v11.i64[0] = v62[2].i64[0];
            v12.i32[0] = v62[2].i32[2];
          }
          v11.i64[1] = v12.i64[0];
          goto LABEL_111;
        }
        if (v90 == 12)
        {
          float32x4_t v12 = 0uLL;
        }
        else if (v90 == 13)
        {
          float32x4_t v12 = (float32x4_t)v62[3].u32[0];
        }
        else
        {
          int32x2_t v93 = 0;
          if ((v90 & 1) == 0) {
            v93.i32[0] = v62[3].i32[3];
          }
          v12.i64[0] = v62[3].i64[0];
          v13.i32[0] = v62[3].i32[2];
          *(int32x2_t *)&v12.u32[2] = vzip1_s32(*(int32x2_t *)v13.f32, v93);
        }
        float32x4_t v11 = v62[2];
LABEL_117:
        float32x4_t v91 = *v62;
        float32x4_t v13 = v62[1];
LABEL_118:
        float32x4_t v94 = (float32x4_t)vzip1q_s32(v81, v81);
        v94.i32[2] = v81.i32[0];
        float32x4_t v10 = (float32x4_t)vzip1q_s32(v82, v82);
        v10.i32[2] = v82.i32[0];
        float32x4_t v95 = (float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)vdupq_laneq_s32(v82, 3), 8uLL);
        int32x4_t v96 = (int32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL);
        float32x4_t v66 = vmlaq_f32(v66, v13, (float32x4_t)vzip1q_s32(v96, v96));
        float32x4_t v67 = vmlaq_f32(v67, v11, v95);
        float32x4_t v65 = vmlaq_f32(v65, v91, v10);
        float32x4_t v68 = vmlaq_f32(v68, v12, v94);
LABEL_119:
        v9.i64[0] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL).u64[0];
        float32x4_t v97 = vaddq_f32(v65, (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v68, 4uLL));
        int8x16_t v98 = (int8x16_t)vaddq_f32(v66, (float32x4_t)v9.u64[0]);
        int8x16_t v99 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v98, (int8x16_t)vaddq_f32(v67, (float32x4_t)0), 8uLL), vaddq_f32(v97, (float32x4_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL)));
        *(void *)uint64_t v34 = v99.i64[0];
        *(_DWORD *)(v34 + 8) = vextq_s8(v99, v99, 8uLL).u32[0];
        v34 += 12;
        ++v35;
        float32x4_t v36 = (int *)((char *)v36 + v19);
      }
      while (v35 != a5);
LABEL_122:
      v15 += v16;
      ++v14;
    }
    while (v14 != v31);
  }
  return result;
}

int *resample_horizontal<float,float,1,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  if ((int)a5 >= 1 && a9 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a7;
    unint64_t v13 = *a8;
    uint64_t v14 = v13 >> 2;
    uint64_t v15 = 4 * a2;
    uint64_t v16 = v15 + 8;
    unint64_t v17 = (char *)result + (v15 + 8) * a5;
    if (v13 >> 2 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8]) {
      uint64_t v14 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    }
    unint64_t v18 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v18 = 1;
    }
    unint64_t v19 = a5 - v18;
    int v20 = a2 > 7;
    unsigned int v21 = a2 & 7;
    if ((a2 & 7) != 0) {
      int v20 = 0;
    }
    else {
      unsigned int v21 = 8;
    }
    unsigned int v22 = (a2 + 8 * (v20 << 31 >> 31)) & 0xFFFFFFF8;
    *(float *)&a3 = (float)v21;
    uint64_t v23 = (4 * (_BYTE)v21 + 31) & 0x60;
    float32x4_t v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8) {
      a2 = 8;
    }
    *(float *)&a3 = (float)a2;
    uint64_t v25 = v23 + 4 * v22;
    float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    int8x16_t v27 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v28 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v29 = a9;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    int8x16_t v30 = (int8x16_t)vcgtq_f32(v24, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v31 = (int8x16_t)vcgtq_f32(v24, (float32x4_t)xmmword_1850CD7B0);
    while (1)
    {
      int8x16_t v32 = *(_DWORD **)(a6 + 8 * v11);
      if (a5 <= v18)
      {
        unint64_t v33 = 0;
        uint64_t v34 = result;
      }
      else
      {
        unint64_t v33 = 0;
        uint64_t v34 = result;
        while (1)
        {
          unint64_t v35 = (float32x4_t *)(v12 + 4 * *v34);
          float32x4_t v36 = (float32x4_t *)((char *)v35 + v25);
          if ((unint64_t)v35 + v25 > 4 * v14 + v12) {
            break;
          }
          if (v35 >= v36)
          {
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
            v41.i64[0] = 0x8000000080000000;
            v41.i64[1] = 0x8000000080000000;
          }
          else
          {
            int v37 = (int8x16_t *)(v34 + 2);
            int v38 = v34[1];
            unint64_t v39 = (unint64_t)&v36[-2];
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
            v41.i64[0] = 0x8000000080000000;
            v41.i64[1] = 0x8000000080000000;
            while ((unint64_t)v35 < v39)
            {
              int8x16_t v43 = *v37;
              int8x16_t v42 = v37[1];
              v37 += 2;
              float32x4_t v10 = (float32x4_t)vandq_s8(v43, v28);
              float32x4_t v9 = (float32x4_t)vandq_s8(v42, v27);
              float32x4_t v44 = *v35;
              float32x4_t v45 = v35[1];
              v35 += 2;
              float32x4_t v41 = vmlaq_f32(v41, v9, v45);
              float32x4_t v40 = vmlaq_f32(v40, v10, v44);
              v38 -= 8;
            }
            if (v38 >= 1)
            {
              float32x4_t v10 = (float32x4_t)vandq_s8(*v37, v31);
              float32x4_t v9 = (float32x4_t)vandq_s8(v37[1], v30);
              float32x4_t v41 = vmlaq_f32(v41, v9, v35[1]);
              float32x4_t v40 = vmlaq_f32(v40, v10, *v35);
            }
          }
          int8x16_t v46 = (int8x16_t)vaddq_f32(v40, v41);
          *(float32x2_t *)v46.i8 = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
          *v32++ = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)).u32[0];
          ++v33;
          uint64_t v34 = (int *)((char *)v34 + v16);
          if (v33 == v19)
          {
            unint64_t v33 = v19;
            break;
          }
        }
      }
      if (v33 < a5) {
        break;
      }
LABEL_108:
      v12 += v13;
      if (++v11 == v29) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v47 = *v34;
      if ((int)v47 >= (int)v14) {
        int v48 = v14;
      }
      else {
        int v48 = *v34;
      }
      int v49 = v14 - v48;
      if (v34[1] >= v49) {
        int v50 = v49;
      }
      else {
        int v50 = v34[1];
      }
      if (v50 < 1)
      {
        v54.i64[0] = 0x8000000080000000;
        v54.i64[1] = 0x8000000080000000;
        v56.i64[0] = 0x8000000080000000;
        v56.i64[1] = 0x8000000080000000;
        goto LABEL_107;
      }
      int32x4_t v51 = (float32x4_t *)(v12 + 4 * v47);
      unint64_t v52 = (unint64_t)v51[-2].u64 + 4 * v50;
      float32x4_t v53 = (int8x16_t *)(v34 + 2);
      v54.i64[0] = 0x8000000080000000;
      v54.i64[1] = 0x8000000080000000;
      if ((unint64_t)v51 < v52) {
        break;
      }
      LODWORD(v55) = v50;
      v56.i64[0] = 0x8000000080000000;
      v56.i64[1] = 0x8000000080000000;
LABEL_65:
      int v63 = v55;
      while (1)
      {
        unint64_t v64 = v17 - (char *)v53;
        if ((unint64_t)(v17 - (char *)v53) >= 0x20) {
          unint64_t v64 = 32;
        }
        if (v64 < 0x20)
        {
          if (v63 < 4)
          {
            if (v63 == 1)
            {
              float32x4_t v10 = (float32x4_t)v53->u32[0];
            }
            else
            {
              uint64_t v75 = 0;
              if (v63 != 2) {
                LODWORD(v75) = v53->i32[2];
              }
              v10.i64[0] = v53->i64[0];
              v10.i64[1] = v75;
            }
            float32x4_t v9 = 0uLL;
            goto LABEL_100;
          }
          if (v63 == 4)
          {
            float32x4_t v9 = 0uLL;
          }
          else if (v63 == 5)
          {
            float32x4_t v9 = (float32x4_t)v53[1].u32[0];
          }
          else
          {
            int32x2_t v70 = 0;
            if (v63 != 6)
            {
              int32x2_t v71 = 0;
              if ((v55 & 1) == 0) {
                v71.i32[0] = v53[1].i32[3];
              }
              v70.i32[0] = v53[1].i32[2];
              int32x2_t v70 = vzip1_s32(v70, v71);
            }
            v9.i64[0] = v53[1].i64[0];
            *(int32x2_t *)&v9.u32[2] = v70;
          }
          float32x4_t v10 = *(float32x4_t *)v53;
        }
        else
        {
          v9.f32[0] = fminf((float)v63, 8.0);
          float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
          int8x16_t v66 = (int8x16_t)vcgtq_f32(v65, (float32x4_t)xmmword_1850CD7B0);
          float32x4_t v9 = (float32x4_t)vandq_s8(v53[1], (int8x16_t)vcgtq_f32(v65, (float32x4_t)xmmword_1850CD7C0));
          float32x4_t v10 = (float32x4_t)vandq_s8(*v53, v66);
        }
        if (v63 <= 7) {
          break;
        }
        v53 += 2;
        float32x4_t v67 = *v51;
        float32x4_t v68 = v51[1];
        v51 += 2;
        float32x4_t v56 = vmlaq_f32(v56, v68, v9);
        float32x4_t v54 = vmlaq_f32(v54, v67, v10);
        BOOL v69 = __OFSUB__(v63, 8);
        v63 -= 8;
        if ((v63 < 0) ^ v69 | (v63 == 0)) {
          goto LABEL_107;
        }
      }
      if (v63 >= 4)
      {
        if (v63 == 4)
        {
          float32x4_t v72 = 0uLL;
        }
        else if (v63 == 5)
        {
          float32x4_t v72 = (float32x4_t)v51[1].u32[0];
        }
        else
        {
          uint64_t v73 = 0;
          if (v63 != 6) {
            LODWORD(v73) = v51[1].i32[2];
          }
          v72.i64[0] = v51[1].i64[0];
          v72.i64[1] = v73;
        }
        float32x4_t v74 = *v51;
        goto LABEL_106;
      }
LABEL_100:
      if (v63 == 1)
      {
        float32x4_t v74 = (float32x4_t)v51->u32[0];
      }
      else
      {
        uint64_t v76 = 0;
        if (v63 != 2) {
          LODWORD(v76) = v51->i32[2];
        }
        v74.i64[0] = v51->i64[0];
        v74.i64[1] = v76;
      }
      float32x4_t v72 = 0uLL;
LABEL_106:
      float32x4_t v54 = vmlaq_f32(v54, v74, v10);
      float32x4_t v56 = vmlaq_f32(v56, v72, v9);
LABEL_107:
      int8x16_t v77 = (int8x16_t)vaddq_f32(v54, v56);
      *(float32x2_t *)v77.i8 = vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
      *v32++ = vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1)).u32[0];
      ++v33;
      uint64_t v34 = (int *)((char *)v34 + v16);
      if (v33 == a5) {
        goto LABEL_108;
      }
    }
    uint64_t v55 = v50;
    v56.i64[0] = 0x8000000080000000;
    v56.i64[1] = 0x8000000080000000;
    while (1)
    {
      unint64_t v57 = v17 - (char *)v53;
      if ((unint64_t)(v17 - (char *)v53) >= 0x20) {
        unint64_t v57 = 32;
      }
      if (v57 < 0x20)
      {
        if (v55)
        {
          if (v55 >= 4)
          {
            if (v55 == 4)
            {
              float32x4_t v10 = 0uLL;
            }
            else if (v55 == 5)
            {
              float32x4_t v10 = (float32x4_t)v53[1].u32[0];
            }
            else
            {
              int32x2_t v61 = 0;
              if (v55 != 6)
              {
                int32x2_t v62 = 0;
                if ((v50 & 1) == 0) {
                  v62.i32[0] = v53[1].i32[3];
                }
                v10.i32[0] = v53[1].i32[2];
                int32x2_t v61 = vzip1_s32(*(int32x2_t *)v10.f32, v62);
              }
              v10.i64[0] = v53[1].i64[0];
              *(int32x2_t *)&v10.u32[2] = v61;
            }
            float32x4_t v9 = *(float32x4_t *)v53;
            goto LABEL_42;
          }
          if (v55 == 1)
          {
            float32x4_t v9 = (float32x4_t)v53->u32[0];
          }
          else
          {
            uint64_t v60 = 0;
            if (v55 != 2) {
              LODWORD(v60) = v53->i32[2];
            }
            v9.i64[0] = v53->i64[0];
            v9.i64[1] = v60;
          }
        }
        else
        {
          float32x4_t v9 = 0uLL;
        }
        float32x4_t v10 = 0uLL;
      }
      else
      {
        float32x4_t v10 = (float32x4_t)vandq_s8(v53[1], v27);
        float32x4_t v9 = (float32x4_t)vandq_s8(*v53, v28);
      }
LABEL_42:
      v53 += 2;
      float32x4_t v58 = *v51;
      float32x4_t v59 = v51[1];
      v51 += 2;
      float32x4_t v56 = vmlaq_f32(v56, v59, v10);
      float32x4_t v54 = vmlaq_f32(v54, v58, v9);
      v55 -= 8;
      if ((unint64_t)v51 >= v52)
      {
        if ((int)v55 >= 1) {
          goto LABEL_65;
        }
        goto LABEL_107;
      }
    }
  }
  return result;
}

float32x2_t *resample_horizontal<half,half,4,true>(float32x2_t *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a4 >= 1 && a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    uint64_t v10 = a6[1];
    unint64_t v11 = *a7;
    unint64_t v12 = a7[1];
    if (v11 >> 3 >= v12 >> 1) {
      unint64_t v13 = v12 >> 1;
    }
    else {
      unint64_t v13 = v11 >> 3;
    }
    unint64_t v14 = a4;
    uint64_t v15 = 4 * a2;
    uint64_t v16 = v15 + 8;
    unint64_t v17 = (char *)result + (v15 + 8) * a4;
    if (v13 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8]) {
      unint64_t v13 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    }
    unint64_t v18 = (4 * a2 + 23) / (4 * a2 + 8);
    if (a2 > 1) {
      unint64_t v18 = 1;
    }
    BOOL v19 = a2 > 3;
    _ZF = (a2 & 3) == 0;
    LODWORD(v21) = (8 * (a2 & 3)) | 0x20;
    if ((a2 & 3) != 0) {
      uint64_t v21 = v21;
    }
    else {
      uint64_t v21 = 64;
    }
    unint64_t v22 = v14 - v18;
    unsigned int v23 = a2 >> 2;
    if (!_ZF) {
      BOOL v19 = 0;
    }
    unint64_t v24 = ((v21 - 1) & 0xFFFFFFFFFFFFFFE0) + 32 * (v23 - v19);
    uint64_t v25 = a8;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    while (1)
    {
      float32x4_t v26 = *(float16x4_t **)(a5 + 8 * v8);
      if (v14 <= v18)
      {
        unint64_t v27 = 0;
        int8x16_t v28 = result;
      }
      else
      {
        unint64_t v27 = 0;
        int8x16_t v28 = result;
        while (1)
        {
          uint64_t v29 = v28->i32[0];
          int8x16_t v30 = (float16x8_t *)(v9 + 8 * v29);
          int8x16_t v31 = (float16x8_t *)((char *)v30 + v24);
          if ((unint64_t)v30->u64 + v24 > 8 * v13 + v9) {
            break;
          }
          if (v30 >= v31)
          {
            v36.i64[0] = 0x8000000080000000;
            v36.i64[1] = 0x8000000080000000;
            v37.i64[0] = 0x8000000080000000;
            v37.i64[1] = 0x8000000080000000;
            v38.i64[0] = 0x8000000080000000;
            v38.i64[1] = 0x8000000080000000;
            v39.i64[0] = 0x8000000080000000;
            v39.i64[1] = 0x8000000080000000;
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
          }
          else
          {
            int8x16_t v32 = v28 + 1;
            int v33 = v28->i32[1];
            uint64_t v34 = (float16x4_t *)(v10 + 2 * v29);
            unint64_t v35 = (unint64_t)&v31[-2];
            if ((unint64_t)v30 < v35)
            {
              v37.i64[0] = 0x8000000080000000;
              v37.i64[1] = 0x8000000080000000;
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v39.i64[0] = 0x8000000080000000;
              v39.i64[1] = 0x8000000080000000;
              v40.i64[0] = 0x8000000080000000;
              v40.i64[1] = 0x8000000080000000;
              v36.i64[0] = 0x8000000080000000;
              v36.i64[1] = 0x8000000080000000;
              do
              {
                float32x4_t v46 = *(float32x4_t *)v32->f32;
                v32 += 2;
                float32x4_t v47 = v46;
                float16x8_t v49 = *v30;
                float16x8_t v48 = v30[1];
                v30 += 2;
                float32x4_t v37 = vmlaq_n_f32(v37, vcvtq_f32_f16(*(float16x4_t *)v49.i8), v46.f32[0]);
                float32x4_t v38 = vmlaq_lane_f32(v38, vcvt_hight_f32_f16(v49), *(float32x2_t *)v46.f32, 1);
                float32x4_t v39 = vmlaq_laneq_f32(v39, vcvtq_f32_f16(*(float16x4_t *)v48.i8), v46, 2);
                float32x4_t v40 = vmlaq_laneq_f32(v40, vcvt_hight_f32_f16(v48), v46, 3);
                *(float16x4_t *)v46.f32 = *v34++;
                float32x4_t v36 = vmlaq_f32(v36, vcvtq_f32_f16(*(float16x4_t *)v46.f32), v47);
                v33 -= 4;
              }
              while ((unint64_t)v30 < v35);
            }
            else
            {
              v36.i64[0] = 0x8000000080000000;
              v36.i64[1] = 0x8000000080000000;
              v37.i64[0] = 0x8000000080000000;
              v37.i64[1] = 0x8000000080000000;
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v39.i64[0] = 0x8000000080000000;
              v39.i64[1] = 0x8000000080000000;
              v40.i64[0] = 0x8000000080000000;
              v40.i64[1] = 0x8000000080000000;
            }
            if (v33 >= 1)
            {
              float16x8_t v41 = v30[1];
              float32x4_t v37 = vmlaq_n_f32(v37, vcvtq_f32_f16(*(float16x4_t *)v30->i8), COERCE_FLOAT(*(_OWORD *)v32->f32));
              float32x4_t v38 = vmlaq_lane_f32(v38, vcvt_hight_f32_f16(*v30), *v32, 1);
              float32x4_t v39 = vmlaq_laneq_f32(v39, vcvtq_f32_f16(*(float16x4_t *)v41.i8), *(float32x4_t *)v32->f32, 2);
              float32x4_t v40 = vmlaq_laneq_f32(v40, vcvt_hight_f32_f16(v41), *(float32x4_t *)v32->f32, 3);
              float32x4_t v36 = vmlaq_f32(v36, vcvtq_f32_f16(*v34), *(float32x4_t *)v32->f32);
            }
          }
          *float32x4_t v26 = vcvt_f16_f32(vaddq_f32(vaddq_f32(v37, v39), vaddq_f32(v38, v40)));
          _S1 = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v36, (float32x4_t)vdupq_laneq_s64((int64x2_t)v36, 1)));
          __asm { FCVT            H1, S1 }
          v26[1].i16[0] = LOWORD(_S1);
          float32x4_t v26 = (float16x4_t *)((char *)v26 + 10);
          ++v27;
          int8x16_t v28 = (float32x2_t *)((char *)v28 + v16);
          if (v27 == v22)
          {
            unint64_t v27 = v22;
            break;
          }
        }
      }
      if (v27 < v14) {
        break;
      }
LABEL_96:
      v9 += v11;
      v10 += v12;
      if (++v8 == v25) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v50 = v28->i32[0];
      if ((int)v50 >= (int)v13) {
        __int32 v51 = v13;
      }
      else {
        __int32 v51 = v28->i32[0];
      }
      int v52 = v13 - v51;
      if (v28->i32[1] < v52) {
        int v52 = v28->i32[1];
      }
      if (v52 < 1)
      {
        v62.i64[0] = 0x8000000080000000;
        v62.i64[1] = 0x8000000080000000;
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        v60.i64[0] = 0x8000000080000000;
        v60.i64[1] = 0x8000000080000000;
        v61.i64[0] = 0x8000000080000000;
        v61.i64[1] = 0x8000000080000000;
        goto LABEL_93;
      }
      float32x4_t v53 = (float16x8_t *)(v9 + 8 * v50);
      unint64_t v54 = (unint64_t)&v53[-2] + 8 * v52;
      uint64_t v55 = (float16x4_t *)(v10 + 2 * v50);
      float32x4_t v56 = v28 + 1;
      if ((unint64_t)v53 >= v54)
      {
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        v60.i64[0] = 0x8000000080000000;
        v60.i64[1] = 0x8000000080000000;
        v61.i64[0] = 0x8000000080000000;
        v61.i64[1] = 0x8000000080000000;
        v62.i64[0] = 0x8000000080000000;
        v62.i64[1] = 0x8000000080000000;
        goto LABEL_59;
      }
      uint64_t v57 = v52;
      v58.i64[0] = 0x8000000080000000;
      v58.i64[1] = 0x8000000080000000;
      v59.i64[0] = 0x8000000080000000;
      v59.i64[1] = 0x8000000080000000;
      v60.i64[0] = 0x8000000080000000;
      v60.i64[1] = 0x8000000080000000;
      v61.i64[0] = 0x8000000080000000;
      v61.i64[1] = 0x8000000080000000;
      v62.i64[0] = 0x8000000080000000;
      v62.i64[1] = 0x8000000080000000;
      do
      {
        unint64_t v63 = v17 - (char *)v56;
        if ((unint64_t)(v17 - (char *)v56) >= 0x10) {
          unint64_t v63 = 16;
        }
        if (v63 < 0x10)
        {
          if (v57)
          {
            if (v57 == 1)
            {
              float32x4_t v64 = (float32x4_t)v56->u32[0];
            }
            else
            {
              int32x2_t v68 = 0;
              if (v57 != 2)
              {
                int32x2_t v69 = 0;
                if ((v52 & 1) == 0) {
                  v69.i32[0] = v56[1].i32[1];
                }
                v68.i32[0] = v56[1].i32[0];
                int32x2_t v68 = vzip1_s32(v68, v69);
              }
              *(float32x2_t *)v64.f32 = *v56;
              *(int32x2_t *)&v64.u32[2] = v68;
            }
          }
          else
          {
            float32x4_t v64 = 0uLL;
          }
        }
        else
        {
          float32x4_t v64 = *(float32x4_t *)v56->f32;
        }
        v56 += 2;
        float16x8_t v66 = *v53;
        float16x8_t v65 = v53[1];
        v53 += 2;
        float32x4_t v58 = vmlaq_n_f32(v58, vcvtq_f32_f16(*(float16x4_t *)v66.i8), v64.f32[0]);
        float32x4_t v59 = vmlaq_lane_f32(v59, vcvt_hight_f32_f16(v66), *(float32x2_t *)v64.f32, 1);
        float32x4_t v60 = vmlaq_laneq_f32(v60, vcvtq_f32_f16(*(float16x4_t *)v65.i8), v64, 2);
        float32x4_t v61 = vmlaq_laneq_f32(v61, vcvt_hight_f32_f16(v65), v64, 3);
        float16x4_t v67 = *v55++;
        float32x4_t v62 = vmlaq_f32(v62, vcvtq_f32_f16(v67), v64);
        v57 -= 4;
      }
      while ((unint64_t)v53 < v54);
      if ((int)v57 >= 1) {
        break;
      }
LABEL_93:
      *float32x4_t v26 = vcvt_f16_f32(vaddq_f32(vaddq_f32(v58, v60), vaddq_f32(v59, v61)));
      _S1 = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v62, (float32x4_t)vdupq_laneq_s64((int64x2_t)v62, 1)));
      __asm { FCVT            H1, S1 }
      v26[1].i16[0] = LOWORD(_S1);
      float32x4_t v26 = (float16x4_t *)((char *)v26 + 10);
      ++v27;
      int8x16_t v28 = (float32x2_t *)((char *)v28 + v16);
      if (v27 == v14) {
        goto LABEL_96;
      }
    }
    int v52 = v57;
LABEL_59:
    int v70 = v52;
    while (1)
    {
      unint64_t v71 = v17 - (char *)v56;
      if ((unint64_t)(v17 - (char *)v56) >= 0x10) {
        unint64_t v71 = 16;
      }
      if (v71 < 0x10)
      {
        if (v70 == 1)
        {
          unsigned int v80 = v56->i32[0];
          v56 += 2;
          float32x4_t v72 = (float32x4_t)v80;
          v74.i64[0] = v53->i64[0];
          goto LABEL_73;
        }
        int32x2_t v82 = 0;
        if (v70 != 2)
        {
          int32x2_t v83 = 0;
          if ((v52 & 1) == 0) {
            v83.i32[0] = v56[1].i32[1];
          }
          v82.i32[0] = v56[1].i32[0];
          int32x2_t v82 = vzip1_s32(v82, v83);
        }
        *(float32x2_t *)v72.f32 = *v56;
        *(int32x2_t *)&v72.u32[2] = v82;
      }
      else
      {
        float32x4_t v72 = *(float32x4_t *)v56->f32;
      }
      v56 += 2;
      if (v70 >= 4)
      {
        float16x8_t v73 = v53[1];
LABEL_66:
        float16x8_t v74 = *v53;
        goto LABEL_67;
      }
      if ((v70 & 0x3FFFFFFE) != 0)
      {
        float16x8_t v73 = 0uLL;
        if (v70 != 2) {
          v73.i64[0] = v53[1].i64[0];
        }
        goto LABEL_66;
      }
      v74.i64[0] = v53->i64[0];
      if (v70 != 1)
      {
        uint64_t v81 = v53->i64[1];
        goto LABEL_74;
      }
LABEL_73:
      uint64_t v81 = 0;
LABEL_74:
      v74.i64[1] = v81;
      float16x8_t v73 = 0uLL;
LABEL_67:
      float32x4_t v75 = vcvt_hight_f32_f16(v74);
      float32x4_t v76 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
      float32x4_t v77 = vcvt_hight_f32_f16(v73);
      float32x4_t v78 = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
      float32x4_t v58 = vmlaq_n_f32(v58, v76, v72.f32[0]);
      float32x4_t v59 = vmlaq_lane_f32(v59, v75, *(float32x2_t *)v72.f32, 1);
      float32x4_t v60 = vmlaq_laneq_f32(v60, v78, v72, 2);
      float32x4_t v61 = vmlaq_laneq_f32(v61, v77, v72, 3);
      if (v70 <= 3)
      {
        if (v70)
        {
          if (v70 == 1)
          {
            v76.i16[0] = v55->i16[0];
          }
          else
          {
            int32x2_t v84 = 0;
            if (v70 != 2) {
              v84.i16[0] = v55->i16[2];
            }
            v78.i32[0] = v55->i32[0];
            *(int32x2_t *)v76.f32 = vzip1_s32(*(int32x2_t *)v78.f32, v84);
          }
        }
        else
        {
          v76.i64[0] = 0;
        }
        float32x4_t v62 = vmlaq_f32(v62, vcvtq_f32_f16(*(float16x4_t *)v76.f32), v72);
        goto LABEL_93;
      }
      v53 += 2;
      float16x4_t v79 = *v55++;
      float32x4_t v62 = vmlaq_f32(v62, vcvtq_f32_f16(v79), v72);
      _VF = __OFSUB__(v70, 4);
      v70 -= 4;
      if ((v70 < 0) ^ _VF | (v70 == 0)) {
        goto LABEL_93;
      }
    }
  }
  return result;
}

int *resample_horizontal<half,half,3,true>(int *result, unsigned int a2, double a3, double a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, int *a9, int a10)
{
  if ((int)a6 >= 1 && a10 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a8;
    uint64_t v18 = a8[1];
    unint64_t v19 = a9[1];
    unint64_t v135 = *a9;
    unint64_t v20 = v135 / 6;
    if (v135 / 6 >= v19 >> 1) {
      unint64_t v20 = v19 >> 1;
    }
    unint64_t v21 = a6;
    uint64_t v22 = 4 * a2 + 8;
    unsigned int v23 = (char *)result + v22 * a6;
    unint64_t v24 = *(int *)&v23[-v22 + 4] + (uint64_t)*(int *)&v23[-v22];
    if (v20 < v24) {
      unint64_t v24 = v20;
    }
    unint64_t v25 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v25 = 1;
    }
    unint64_t v26 = a6 - v25;
    unsigned int v27 = a2 % 5;
    BOOL v28 = a2 > 4;
    if (a2 % 5) {
      BOOL v28 = 0;
    }
    unsigned int v29 = 15 * (a2 / 5 - v28);
    if (!v27) {
      unsigned int v27 = 5;
    }
    *(float *)&a3 = (float)v27;
    uint64_t v30 = (6 * v27 + 31) & 0x3FFFFFFE0;
    float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 5) {
      a2 = 5;
    }
    *(float *)&a4 = (float)a2;
    float32x4_t v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    uint64_t v33 = v30 + 2 * v29;
    int8x16_t v34 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v35 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)xmmword_1850CD7B0);
    if (v26 <= 1) {
      uint64_t v36 = 1;
    }
    else {
      uint64_t v36 = v21 - v25;
    }
    int8x16_t v37 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_1850CD7B0);
    do
    {
      uint64_t v38 = *(void *)(a7 + 8 * v16);
      if (v21 <= v25)
      {
        unint64_t v39 = 0;
        float32x4_t v40 = result;
      }
      else
      {
        unint64_t v39 = 0;
        float32x4_t v40 = result;
        do
        {
          uint64_t v41 = *v40;
          int8x16_t v42 = (float16x8_t *)(v17 + 6 * (int)v41);
          int8x16_t v43 = (float16x8_t *)((char *)v42 + v33);
          if ((unint64_t)v42->u64 + v33 > 6 * v24 + v17) {
            goto LABEL_36;
          }
          if (v42 >= v43)
          {
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
            v52.i64[0] = 0x8000000080000000;
            v52.i64[1] = 0x8000000080000000;
            v53.i64[0] = 0x8000000080000000;
            v53.i64[1] = 0x8000000080000000;
          }
          else
          {
            float32x4_t v44 = (int8x16_t *)(v40 + 2);
            int v45 = v40[1];
            float32x4_t v46 = (float16x4_t *)(v18 + 2 * v41);
            unint64_t v47 = (unint64_t)&v43[-3];
            if ((unint64_t)v42 < v47)
            {
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
              v53.i64[0] = 0x8000000080000000;
              v53.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              do
              {
                float32x4_t v11 = (float32x4_t)vandq_s8(v44[1], v34);
                float32x4_t v75 = (float32x4_t)vandq_s8(*v44, v35);
                float32x4_t v44 = (int8x16_t *)((char *)v44 + 20);
                float16x8_t v77 = *v42;
                float16x8_t v76 = v42[1];
                int8x16_t v42 = (float16x8_t *)((char *)v42 + 30);
                float16x8_t v14 = (float16x8_t)vcvt_hight_f32_f16(v77);
                float32x4_t v15 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
                float32x4_t v78 = (float32x4_t)vzip1q_s32((int32x4_t)v75, (int32x4_t)v75);
                v78.i32[2] = v75.i32[0];
                float32x4_t v79 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
                v79.i32[2] = v11.i32[0];
                int32x4_t v80 = (int32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL);
                float32x4_t v53 = vmlaq_f32(v53, vcvt_hight_f32_f16(v76), v79);
                float32x4_t v52 = vmlaq_f32(v52, v15, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)vdupq_laneq_s32((int32x4_t)v75, 3), 8uLL));
                float32x4_t v50 = vmlaq_f32(v50, vcvtq_f32_f16(*(float16x4_t *)v77.i8), v78);
                float32x4_t v51 = vmlaq_f32(v51, (float32x4_t)v14, (float32x4_t)vzip1q_s32(v80, v80));
                float16x8_t v81 = *(float16x8_t *)v46->i8;
                float32x4_t v46 = (float16x4_t *)((char *)v46 + 10);
                float16x8_t v13 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v81.i8);
                float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(v81);
                float32x4_t v49 = vmlaq_f32(v49, (float32x4_t)v12, v11);
                float32x4_t v48 = vmlaq_f32(v48, (float32x4_t)v13, v75);
                v45 -= 5;
              }
              while ((unint64_t)v42 < v47);
            }
            else
            {
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
              v53.i64[0] = 0x8000000080000000;
              v53.i64[1] = 0x8000000080000000;
            }
            if (v45 >= 1)
            {
              if (v45 >= 9)
              {
                float32x4_t v54 = (float32x4_t)vandq_s8(v44[1], v34);
                float32x4_t v55 = (float32x4_t)vandq_s8(*v44, v35);
                float32x4_t v44 = (int8x16_t *)((char *)v44 + 20);
                float16x8_t v57 = *v42;
                float16x8_t v56 = v42[1];
                int8x16_t v42 = (float16x8_t *)((char *)v42 + 30);
                float32x4_t v58 = (float32x4_t)vzip1q_s32((int32x4_t)v55, (int32x4_t)v55);
                v58.i32[2] = v55.i32[0];
                float32x4_t v59 = (float32x4_t)vzip1q_s32((int32x4_t)v54, (int32x4_t)v54);
                v59.i32[2] = v54.i32[0];
                int32x4_t v60 = (int32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL);
                float32x4_t v53 = vmlaq_f32(v53, vcvt_hight_f32_f16(v56), v59);
                float32x4_t v52 = vmlaq_f32(v52, vcvtq_f32_f16(*(float16x4_t *)v56.i8), (float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)vdupq_laneq_s32((int32x4_t)v55, 3), 8uLL));
                float32x4_t v50 = vmlaq_f32(v50, vcvtq_f32_f16(*(float16x4_t *)v57.i8), v58);
                float32x4_t v51 = vmlaq_f32(v51, vcvt_hight_f32_f16(v57), (float32x4_t)vzip1q_s32(v60, v60));
                float16x8_t v61 = *(float16x8_t *)v46->i8;
                float32x4_t v46 = (float16x4_t *)((char *)v46 + 10);
                float32x4_t v49 = vmlaq_f32(v49, vcvt_hight_f32_f16(v61), v54);
                float32x4_t v48 = vmlaq_f32(v48, vcvtq_f32_f16(*(float16x4_t *)v61.i8), v55);
              }
              float32x4_t v62 = (float32x4_t)vandq_s8(v44[1], (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_1850CD7C0));
              float32x4_t v11 = (float32x4_t)vandq_s8(*v44, v37);
              float16x8_t v63 = v42[1];
              float16x8_t v14 = (float16x8_t)vcvt_hight_f32_f16(*v42);
              float32x4_t v15 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
              float32x4_t v64 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
              v64.i32[2] = v11.i32[0];
              float32x4_t v65 = (float32x4_t)vzip1q_s32((int32x4_t)v62, (int32x4_t)v62);
              v65.i32[2] = v62.i32[0];
              int32x4_t v66 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              float32x4_t v53 = vmlaq_f32(v53, vcvt_hight_f32_f16(v63), v65);
              float32x4_t v52 = vmlaq_f32(v52, v15, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 3), 8uLL));
              float32x4_t v50 = vmlaq_f32(v50, vcvtq_f32_f16(*(float16x4_t *)v42->i8), v64);
              float32x4_t v51 = vmlaq_f32(v51, (float32x4_t)v14, (float32x4_t)vzip1q_s32(v66, v66));
              float16x8_t v13 = (float16x8_t)vcvtq_f32_f16(*v46);
              float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(*(float16x8_t *)v46->i8);
              float32x4_t v49 = vmlaq_f32(v49, (float32x4_t)v12, v62);
              float32x4_t v48 = vmlaq_f32(v48, (float32x4_t)v13, v11);
            }
          }
          v10.i64[0] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL).u64[0];
          float32x4_t v67 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v53, 4uLL));
          int8x16_t v68 = (int8x16_t)vaddq_f32(v51, (float32x4_t)v10.u64[0]);
          *(float16x4_t *)v67.f32 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v68, (int8x16_t)vaddq_f32(v52, (float32x4_t)0), 8uLL), vaddq_f32(v67, (float32x4_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL))));
          *(_DWORD *)uint64_t v38 = v67.i32[0];
          *(_WORD *)(v38 + 4) = vdup_lane_s16(*(int16x4_t *)v67.f32, 2).u16[0];
          float32x4_t v69 = (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 0xCuLL);
          v69.i32[2] = 0;
          _Q17 = (int8x16_t)vaddq_f32(v48, v69);
          _Q17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(_Q17, _Q17, 8uLL), vadd_f32(*(float32x2_t *)_Q17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q17.i8, 1))).u32[0];
          __asm { FCVT            H17, S17 }
          *(_WORD *)(v38 + 6) = _Q17.i16[0];
          v38 += 8;
          ++v39;
          float32x4_t v40 = (int *)((char *)v40 + v22);
        }
        while (v39 != v36);
        unint64_t v39 = v36;
      }
LABEL_36:
      if (v39 >= v21) {
        goto LABEL_180;
      }
      do
      {
        uint64_t v82 = *v40;
        if ((int)v82 >= (int)v24) {
          int v83 = v24;
        }
        else {
          int v83 = *v40;
        }
        int v84 = v24 - v83;
        if (v40[1] >= v84) {
          LODWORD(v85) = v84;
        }
        else {
          LODWORD(v85) = v40[1];
        }
        if ((int)v85 < 1)
        {
          v94.i64[0] = 0x8000000080000000;
          v94.i64[1] = 0x8000000080000000;
          v95.i64[0] = 0x8000000080000000;
          v95.i64[1] = 0x8000000080000000;
          v90.i64[0] = 0x8000000080000000;
          v90.i64[1] = 0x8000000080000000;
          v91.i64[0] = 0x8000000080000000;
          v91.i64[1] = 0x8000000080000000;
          v92.i64[0] = 0x8000000080000000;
          v92.i64[1] = 0x8000000080000000;
          v93.i64[0] = 0x8000000080000000;
          v93.i64[1] = 0x8000000080000000;
          goto LABEL_177;
        }
        int32x4_t v86 = (float16x8_t *)(v17 + 6 * v82);
        unint64_t v87 = (unint64_t)&v86[-3] + 6 * (int)v85;
        int32x2_t v88 = (_WORD *)(v18 + 2 * v82);
        uint64_t v89 = (int8x16_t *)(v40 + 2);
        if ((unint64_t)v86 >= v87)
        {
          v90.i64[0] = 0x8000000080000000;
          v90.i64[1] = 0x8000000080000000;
          v91.i64[0] = 0x8000000080000000;
          v91.i64[1] = 0x8000000080000000;
          v92.i64[0] = 0x8000000080000000;
          v92.i64[1] = 0x8000000080000000;
          v93.i64[0] = 0x8000000080000000;
          v93.i64[1] = 0x8000000080000000;
          v94.i64[0] = 0x8000000080000000;
          v94.i64[1] = 0x8000000080000000;
          v95.i64[0] = 0x8000000080000000;
          v95.i64[1] = 0x8000000080000000;
          goto LABEL_95;
        }
        uint64_t v85 = (int)v85;
        v90.i64[0] = 0x8000000080000000;
        v90.i64[1] = 0x8000000080000000;
        v91.i64[0] = 0x8000000080000000;
        v91.i64[1] = 0x8000000080000000;
        v92.i64[0] = 0x8000000080000000;
        v92.i64[1] = 0x8000000080000000;
        v93.i64[0] = 0x8000000080000000;
        v93.i64[1] = 0x8000000080000000;
        v94.i64[0] = 0x8000000080000000;
        v94.i64[1] = 0x8000000080000000;
        v95.i64[0] = 0x8000000080000000;
        v95.i64[1] = 0x8000000080000000;
        do
        {
          unint64_t v96 = v23 - (char *)v89;
          if ((unint64_t)(v23 - (char *)v89) >= 0x20) {
            unint64_t v96 = 32;
          }
          if (v96 >= 0x20)
          {
            float32x4_t v11 = (float32x4_t)vandq_s8(v89[1], v34);
            float32x4_t v10 = (float32x4_t)vandq_s8(*v89, v35);
LABEL_50:
            unsigned int v97 = v85;
            goto LABEL_51;
          }
          if (v85)
          {
            if (v85 < 4)
            {
              if (v85 == 1)
              {
                float32x4_t v10 = (float32x4_t)v89->u32[0];
              }
              else
              {
                uint64_t v105 = 0;
                if (v85 != 2) {
                  LODWORD(v105) = v89->i32[2];
                }
                v10.i64[0] = v89->i64[0];
                v10.i64[1] = v105;
              }
              float32x4_t v11 = 0uLL;
            }
            else
            {
              if (v85 == 4)
              {
                float32x4_t v11 = 0uLL;
              }
              else if (v85 == 5)
              {
                float32x4_t v11 = (float32x4_t)v89[1].u32[0];
              }
              else
              {
                int32x2_t v106 = 0;
                if (v85 != 6)
                {
                  int32x2_t v107 = 0;
                  if ((v85 & 1) == 0) {
                    v107.i32[0] = v89[1].i32[3];
                  }
                  v11.i32[0] = v89[1].i32[2];
                  int32x2_t v106 = vzip1_s32(*(int32x2_t *)v11.f32, v107);
                }
                v11.i64[0] = v89[1].i64[0];
                *(int32x2_t *)&v11.u32[2] = v106;
              }
              float32x4_t v10 = *(float32x4_t *)v89;
            }
            goto LABEL_50;
          }
          unsigned int v97 = 0;
          float32x4_t v10 = 0uLL;
          float32x4_t v11 = 0uLL;
LABEL_51:
          float16x8_t v98 = *v86;
          float16x8_t v99 = v86[1];
          if (v97)
          {
            if (v97 < 4)
            {
              if (v85)
              {
                if (v85 == 1)
                {
                  v14.i16[0] = *v88;
                }
                else
                {
                  int32x2_t v101 = 0;
                  if (v97 != 2) {
                    v101.i16[0] = v88[2];
                  }
                  v15.i32[0] = *(_DWORD *)v88;
                  *(int32x2_t *)v14.i8 = vzip1_s32(*(int32x2_t *)v15.f32, v101);
                }
              }
              else
              {
                v14.i64[0] = 0;
              }
              v14.i64[1] = 0;
            }
            else
            {
              if (v85 == 4)
              {
                v15.i64[0] = 0;
              }
              else if (v85 == 5)
              {
                v15.i16[0] = v88[4];
              }
              else
              {
                int32x2_t v100 = 0;
                if (v97 != 6)
                {
                  v15.i64[0] = 0;
                  if ((v85 & 1) == 0) {
                    v15.i16[0] = v88[7];
                  }
                  v100.i16[0] = v88[6];
                  v100.i16[1] = v15.i16[0];
                }
                v15.i32[0] = *((_DWORD *)v88 + 2);
                *(int32x2_t *)v15.f32 = vzip1_s32(*(int32x2_t *)v15.f32, v100);
              }
              v14.i64[0] = *(void *)v88;
              v14.i64[1] = v15.i64[0];
            }
          }
          else
          {
            float16x8_t v14 = 0uLL;
          }
          uint64_t v89 = (int8x16_t *)((char *)v89 + 20);
          int32x4_t v86 = (float16x8_t *)((char *)v86 + 30);
          float32x4_t v15 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
          float32x4_t v102 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
          v102.i32[2] = v10.i32[0];
          float32x4_t v103 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
          v103.i32[2] = v11.i32[0];
          int32x4_t v104 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
          float32x4_t v91 = vmlaq_f32(v91, vcvt_hight_f32_f16(v98), (float32x4_t)vzip1q_s32(v104, v104));
          float32x4_t v93 = vmlaq_f32(v93, vcvt_hight_f32_f16(v99), v103);
          float32x4_t v92 = vmlaq_f32(v92, vcvtq_f32_f16(*(float16x4_t *)v99.i8), (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s32((int32x4_t)v10, 3), 8uLL));
          float32x4_t v90 = vmlaq_f32(v90, v15, v102);
          v88 += 5;
          float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v14.i8);
          float16x8_t v13 = (float16x8_t)vcvt_hight_f32_f16(v14);
          float32x4_t v95 = vmlaq_f32(v95, (float32x4_t)v13, v11);
          float32x4_t v94 = vmlaq_f32(v94, (float32x4_t)v12, v10);
          v85 -= 5;
        }
        while ((unint64_t)v86 < v87);
        if ((int)v85 < 1) {
          goto LABEL_177;
        }
LABEL_95:
        uint64_t v108 = 0;
        unint64_t v109 = v85;
        uint64_t v110 = 3 * v85;
        int v111 = 3 * v85;
        while (2)
        {
          uint64_t v112 = v110 + v108;
          unint64_t v113 = v23 - (char *)v89;
          if ((unint64_t)(v23 - (char *)v89) >= 0x20) {
            unint64_t v113 = 32;
          }
          if (v113 >= 0x20)
          {
            v10.f32[0] = fminf((float)(int)v109, 8.0);
            float32x4_t v114 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
            float16x8_t v12 = (float16x8_t)vcgtq_f32(v114, (float32x4_t)xmmword_1850CD7B0);
            float16x8_t v13 = *(float16x8_t *)v89;
            float32x4_t v11 = (float32x4_t)vandq_s8(v89[1], (int8x16_t)vcgtq_f32(v114, (float32x4_t)xmmword_1850CD7C0));
            float32x4_t v10 = (float32x4_t)vandq_s8(*v89, (int8x16_t)v12);
            goto LABEL_100;
          }
          if (v109 < 4)
          {
            if (v112 == 3)
            {
              float32x4_t v10 = (float32x4_t)v89->u32[0];
            }
            else
            {
              if (v110 + v108 == 6) {
                v11.i64[0] = 0;
              }
              else {
                v11.i32[0] = v89->i32[2];
              }
              v10.i64[0] = v89->i64[0];
              v10.i64[1] = v11.i64[0];
            }
            float32x4_t v11 = 0uLL;
            uint64_t v89 = (int8x16_t *)((char *)v89 + 20);
          }
          else
          {
            if (v109 == 4)
            {
              float32x4_t v11 = 0uLL;
            }
            else if (v109 == 5)
            {
              float32x4_t v11 = (float32x4_t)v89[1].u32[0];
            }
            else
            {
              if (v110 + v108 == 18)
              {
                int32x2_t v124 = 0;
              }
              else
              {
                int32x2_t v123 = 0;
                if ((v109 & 1) == 0) {
                  v123.i32[0] = v89[1].i32[3];
                }
                v11.i32[0] = v89[1].i32[2];
                int32x2_t v124 = vzip1_s32(*(int32x2_t *)v11.f32, v123);
              }
              v11.i64[0] = v89[1].i64[0];
              *(int32x2_t *)&v11.u32[2] = v124;
            }
            float32x4_t v10 = *(float32x4_t *)v89;
LABEL_100:
            uint64_t v89 = (int8x16_t *)((char *)v89 + 20);
            if (v109 > 5)
            {
              float16x8_t v116 = *v86;
              float16x8_t v115 = v86[1];
              int32x4_t v86 = (float16x8_t *)((char *)v86 + 30);
              float16x8_t v14 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v116.i8);
              float32x4_t v15 = vcvtq_f32_f16(*(float16x4_t *)v115.i8);
              float32x4_t v117 = vcvt_hight_f32_f16(v115);
              float32x4_t v118 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v118.i32[2] = v10.i32[0];
              float16x8_t v13 = (float16x8_t)vcvt_hight_f32_f16(v116);
              float32x4_t v119 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
              v119.i32[2] = v11.i32[0];
              int32x4_t v120 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
              float32x4_t v91 = vmlaq_f32(v91, (float32x4_t)v13, (float32x4_t)vzip1q_s32(v120, v120));
              float32x4_t v93 = vmlaq_f32(v93, v117, v119);
              float32x4_t v92 = vmlaq_f32(v92, v15, (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s32((int32x4_t)v10, 3), 8uLL));
              float32x4_t v90 = vmlaq_f32(v90, (float32x4_t)v14, v118);
              if (v109 >= 8)
              {
                float16x8_t v121 = *(float16x8_t *)v88;
                goto LABEL_103;
              }
LABEL_162:
              if (v109 == 4)
              {
                v13.i64[0] = 0;
              }
              else if (v109 == 5)
              {
                v13.i16[0] = v88[4];
              }
              else
              {
                if (v110 + v108 == 18) {
                  v117.i64[0] = 0;
                }
                else {
                  v117.i16[0] = v88[6];
                }
                v13.i32[0] = *((_DWORD *)v88 + 2);
                *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v117.f32);
              }
              v121.i64[0] = *(void *)v88;
              v121.i64[1] = v13.i64[0];
LABEL_103:
              v88 += 5;
              float16x8_t v13 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v121.i8);
              float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(v121);
              float32x4_t v95 = vmlaq_f32(v95, (float32x4_t)v12, v11);
              float32x4_t v94 = vmlaq_f32(v94, (float32x4_t)v13, v10);
              v108 -= 15;
              BOOL v122 = (uint64_t)v109 <= 5;
              v109 -= 5;
              if (v122) {
                goto LABEL_177;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v125 = v110 + v108;
        if ((v111 + v108) < 8)
        {
          if ((v111 + v108) < 4)
          {
            if (v125)
            {
              if (v125 == 1)
              {
                v12.i16[0] = v86->i16[0];
                v13.i64[0] = 0;
              }
              else
              {
                v12.i32[0] = v86->i32[0];
                v13.i16[0] = v86->i16[2];
              }
              *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
            }
            else
            {
              v12.i64[0] = 0;
            }
            v12.i64[1] = 0;
          }
          else
          {
            if (v125 == 4)
            {
              v13.i64[0] = 0;
            }
            else if (v125 == 5)
            {
              v13.i16[0] = v86->i16[4];
            }
            else
            {
              if (v110 + v108 == 6) {
                v12.i64[0] = 0;
              }
              else {
                v12.i16[0] = v86->i16[6];
              }
              v13.i32[0] = v86->i32[2];
              *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v12.i8);
            }
            v12.i64[0] = v86->i64[0];
            v12.i64[1] = v13.i64[0];
          }
          float16x8_t v13 = 0uLL;
        }
        else
        {
          if (v125 == 8)
          {
            float16x8_t v13 = 0uLL;
          }
          else if ((unint64_t)(v125 - 8) < 4)
          {
            if (v112 == 9)
            {
              v12.i16[0] = v86[1].i16[0];
              v13.i64[0] = 0;
            }
            else
            {
              v12.i32[0] = v86[1].i32[0];
              v13.i16[0] = v86[1].i16[2];
            }
            *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
          }
          else
          {
            if (v125 == 12)
            {
              v12.i64[0] = 0;
            }
            else if (v125 == 13)
            {
              v12.i16[0] = v86[1].i16[4];
            }
            else
            {
              __int16 v126 = 0;
              if ((v125 & 1) == 0) {
                __int16 v126 = v86[1].i16[7];
              }
              v12.i32[0] = v86[1].i32[2];
              v12.i16[2] = v86[1].i16[6];
              v12.i16[3] = v126;
            }
            v13.i64[0] = v86[1].i64[0];
            v13.i64[1] = v12.i64[0];
          }
          float16x8_t v12 = *v86;
        }
        float16x8_t v14 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v13.i8);
        float16x8_t v13 = (float16x8_t)vcvt_hight_f32_f16(v13);
        float32x4_t v15 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
        float32x4_t v117 = vcvt_hight_f32_f16(v12);
        float32x4_t v127 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
        v127.i32[2] = v11.i32[0];
        float32x4_t v128 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
        v128.i32[2] = v10.i32[0];
        int32x4_t v129 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
        float32x4_t v91 = vmlaq_f32(v91, v117, (float32x4_t)vzip1q_s32(v129, v129));
        float32x4_t v90 = vmlaq_f32(v90, v15, v128);
        float32x4_t v93 = vmlaq_f32(v93, (float32x4_t)v13, v127);
        float32x4_t v92 = vmlaq_f32(v92, (float32x4_t)v14, (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s32((int32x4_t)v10, 3), 8uLL));
        if (v109 >= 4)
        {
          int32x4_t v86 = (float16x8_t *)((char *)v86 + 30);
          goto LABEL_162;
        }
        if (v109 == 1)
        {
          v117.i16[0] = *v88;
        }
        else
        {
          int32x2_t v130 = 0;
          if (v109 != 2) {
            v130.i16[0] = v88[2];
          }
          v13.i32[0] = *(_DWORD *)v88;
          *(int32x2_t *)v117.f32 = vzip1_s32(*(int32x2_t *)v13.i8, v130);
        }
        float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v117.f32);
        float32x4_t v95 = vmlaq_f32(v95, (float32x4_t)0, v11);
        float32x4_t v94 = vmlaq_f32(v94, (float32x4_t)v12, v10);
LABEL_177:
        v10.i64[0] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL).u64[0];
        float32x4_t v131 = vaddq_f32(v90, (float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v93, 4uLL));
        int8x16_t v132 = (int8x16_t)vaddq_f32(v91, (float32x4_t)v10.u64[0]);
        *(float16x4_t *)v131.f32 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v132, (int8x16_t)vaddq_f32(v92, (float32x4_t)0), 8uLL), vaddq_f32(v131, (float32x4_t)vextq_s8((int8x16_t)v131, v132, 0xCuLL))));
        *(_DWORD *)uint64_t v38 = v131.i32[0];
        *(_WORD *)(v38 + 4) = vdup_lane_s16(*(int16x4_t *)v131.f32, 2).u16[0];
        float32x4_t v133 = (float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v95, 0xCuLL);
        v133.i32[2] = 0;
        _Q17 = (int8x16_t)vaddq_f32(v94, v133);
        _Q17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(_Q17, _Q17, 8uLL), vadd_f32(*(float32x2_t *)_Q17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q17.i8, 1))).u32[0];
        __asm { FCVT            H17, S17 }
        *(_WORD *)(v38 + 6) = _Q17.i16[0];
        v38 += 8;
        ++v39;
        float32x4_t v40 = (int *)((char *)v40 + v22);
      }
      while (v39 != v21);
LABEL_180:
      v17 += v135;
      v18 += v19;
      ++v16;
    }
    while (v16 != a10);
  }
  return result;
}

int *resample_horizontal<half,half,1,true>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  if ((int)a5 >= 1 && a9 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a7;
    uint64_t v17 = a7[1];
    unint64_t v18 = *a8;
    unint64_t v19 = a8[1];
    if (v18 >> 1 >= v19 >> 1) {
      unint64_t v20 = v19 >> 1;
    }
    else {
      unint64_t v20 = v18 >> 1;
    }
    unint64_t v21 = a5;
    uint64_t v22 = 4 * a2;
    uint64_t v23 = v22 + 8;
    unint64_t v24 = (char *)result + (v22 + 8) * a5;
    if (v20 >= *(int *)&v24[-v22 - 4] + (uint64_t)*(int *)&v24[-v22 - 8]) {
      unint64_t v20 = *(int *)&v24[-v22 - 4] + (uint64_t)*(int *)&v24[-v22 - 8];
    }
    unint64_t v25 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v25 = 1;
    }
    unint64_t v26 = a5 - v25;
    int v27 = a2 > 7;
    unsigned int v28 = a2 & 7;
    if ((a2 & 7) != 0) {
      int v27 = 0;
    }
    else {
      unsigned int v28 = 8;
    }
    unsigned int v29 = (a2 + 8 * (v27 << 31 >> 31)) & 0xFFFFFFF8;
    *(float *)&a3 = (float)v28;
    uint64_t v30 = (2 * (_BYTE)v28 + 15) & 0x30;
    float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8) {
      a2 = 8;
    }
    *(float *)&a3 = (float)a2;
    uint64_t v32 = v30 + 2 * v29;
    float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    int8x16_t v34 = (int8x16_t)vcgtq_f32(v33, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v35 = (int8x16_t)vcgtq_f32(v33, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v36 = a9;
    if (v26 <= 1) {
      unint64_t v26 = 1;
    }
    int8x16_t v37 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v38 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_1850CD7B0);
    while (1)
    {
      unint64_t v39 = *(_WORD **)(a6 + 8 * v15);
      if (v21 <= v25)
      {
        unint64_t v40 = 0;
        uint64_t v41 = result;
      }
      else
      {
        unint64_t v40 = 0;
        uint64_t v41 = result;
        while (1)
        {
          uint64_t v42 = *v41;
          int8x16_t v43 = (float16x8_t *)(v16 + 2 * v42);
          float32x4_t v44 = (float16x8_t *)((char *)v43 + v32);
          if ((unint64_t)v43->u64 + v32 > 2 * v20 + v16) {
            break;
          }
          if (v43 >= v44)
          {
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
            v52.i64[0] = 0x8000000080000000;
            v52.i64[1] = 0x8000000080000000;
          }
          else
          {
            int v45 = (int8x16_t *)(v41 + 2);
            int v46 = v41[1];
            unint64_t v47 = (float16x4_t *)(v17 + 2 * v42);
            unint64_t v48 = (unint64_t)&v44[-1];
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            if ((unint64_t)v43 < v48)
            {
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              do
              {
                int8x16_t v60 = *v45;
                int8x16_t v59 = v45[1];
                v45 += 2;
                float32x4_t v10 = (float32x4_t)vandq_s8(v60, v35);
                float32x4_t v9 = (float32x4_t)vandq_s8(v59, v34);
                float16x8_t v61 = *v43++;
                float32x4_t v52 = vmlaq_f32(v52, vcvt_hight_f32_f16(v61), v9);
                float32x4_t v51 = vmlaq_f32(v51, vcvtq_f32_f16(*(float16x4_t *)v61.i8), v10);
                float16x8_t v62 = *(float16x8_t *)v47->i8;
                v47 += 2;
                float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v62.i8);
                float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v62);
                float32x4_t v50 = vmlaq_f32(v50, (float32x4_t)v11, v9);
                float32x4_t v49 = vmlaq_f32(v49, (float32x4_t)v12, v10);
                v46 -= 8;
              }
              while ((unint64_t)v43 < v48);
            }
            else
            {
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
            }
            if (v46 >= 1)
            {
              float32x4_t v10 = (float32x4_t)vandq_s8(*v45, v38);
              float32x4_t v9 = (float32x4_t)vandq_s8(v45[1], v37);
              float32x4_t v52 = vmlaq_f32(v52, vcvt_hight_f32_f16(*v43), v9);
              float32x4_t v51 = vmlaq_f32(v51, vcvtq_f32_f16(*(float16x4_t *)v43->i8), v10);
              float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*v47);
              float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(*(float16x8_t *)v47->i8);
              float32x4_t v50 = vmlaq_f32(v50, (float32x4_t)v11, v9);
              float32x4_t v49 = vmlaq_f32(v49, (float32x4_t)v12, v10);
            }
          }
          _Q18 = vaddq_f32(v51, v52);
          _Q18.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q18, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q18, 1)));
          __asm { FCVT            H18, S18 }
          *unint64_t v39 = _Q18.i16[0];
          _Q16 = vaddq_f32(v49, v50);
          _Q16.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q16, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q16, 1)));
          __asm { FCVT            H16, S16 }
          v39[1] = _Q16.i16[0];
          v39 += 2;
          ++v40;
          uint64_t v41 = (int *)((char *)v41 + v23);
          if (v40 == v26)
          {
            unint64_t v40 = v26;
            break;
          }
        }
      }
      if (v40 < v21) {
        break;
      }
LABEL_115:
      v16 += v18;
      v17 += v19;
      if (++v15 == v36) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v63 = *v41;
      if ((int)v63 >= (int)v20) {
        int v64 = v20;
      }
      else {
        int v64 = *v41;
      }
      int v65 = v20 - v64;
      if (v41[1] >= v65) {
        int v66 = v65;
      }
      else {
        int v66 = v41[1];
      }
      if (v66 < 1)
      {
        v74.i64[0] = 0x8000000080000000;
        v74.i64[1] = 0x8000000080000000;
        v75.i64[0] = 0x8000000080000000;
        v75.i64[1] = 0x8000000080000000;
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        v73.i64[0] = 0x8000000080000000;
        v73.i64[1] = 0x8000000080000000;
        goto LABEL_114;
      }
      float32x4_t v67 = (float16x8_t *)(v16 + 2 * v63);
      unint64_t v68 = (unint64_t)&v67[-2] + 2 * v66;
      float32x4_t v69 = (float16x8_t *)(v17 + 2 * v63);
      int v70 = (int8x16_t *)(v41 + 2);
      v71.i64[0] = 0x8000000080000000;
      v71.i64[1] = 0x8000000080000000;
      if ((unint64_t)v67 >= v68)
      {
        LODWORD(v72) = v66;
        v73.i64[0] = 0x8000000080000000;
        v73.i64[1] = 0x8000000080000000;
        v74.i64[0] = 0x8000000080000000;
        v74.i64[1] = 0x8000000080000000;
        v75.i64[0] = 0x8000000080000000;
        v75.i64[1] = 0x8000000080000000;
        goto LABEL_70;
      }
      uint64_t v72 = v66;
      v73.i64[0] = 0x8000000080000000;
      v73.i64[1] = 0x8000000080000000;
      v74.i64[0] = 0x8000000080000000;
      v74.i64[1] = 0x8000000080000000;
      v75.i64[0] = 0x8000000080000000;
      v75.i64[1] = 0x8000000080000000;
      do
      {
        unint64_t v76 = v24 - (char *)v70;
        if ((unint64_t)(v24 - (char *)v70) >= 0x20) {
          unint64_t v76 = 32;
        }
        if (v76 >= 0x20)
        {
          float32x4_t v10 = (float32x4_t)vandq_s8(v70[1], v34);
          float32x4_t v9 = (float32x4_t)vandq_s8(*v70, v35);
          goto LABEL_47;
        }
        if (!v72)
        {
          float32x4_t v9 = 0uLL;
LABEL_60:
          float32x4_t v10 = 0uLL;
          goto LABEL_47;
        }
        if (v72 < 4)
        {
          if (v72 == 1)
          {
            float32x4_t v9 = (float32x4_t)v70->u32[0];
          }
          else
          {
            uint64_t v79 = 0;
            if (v72 != 2) {
              LODWORD(v79) = v70->i32[2];
            }
            v9.i64[0] = v70->i64[0];
            v9.i64[1] = v79;
          }
          goto LABEL_60;
        }
        if (v72 == 4)
        {
          float32x4_t v10 = 0uLL;
        }
        else if (v72 == 5)
        {
          float32x4_t v10 = (float32x4_t)v70[1].u32[0];
        }
        else
        {
          int32x2_t v80 = 0;
          if (v72 != 6)
          {
            int32x2_t v81 = 0;
            if ((v66 & 1) == 0) {
              v81.i32[0] = v70[1].i32[3];
            }
            v10.i32[0] = v70[1].i32[2];
            int32x2_t v80 = vzip1_s32(*(int32x2_t *)v10.f32, v81);
          }
          v10.i64[0] = v70[1].i64[0];
          *(int32x2_t *)&v10.u32[2] = v80;
        }
        float32x4_t v9 = *(float32x4_t *)v70;
LABEL_47:
        v70 += 2;
        float16x8_t v77 = *v67++;
        float32x4_t v73 = vmlaq_f32(v73, vcvt_hight_f32_f16(v77), v10);
        float32x4_t v71 = vmlaq_f32(v71, vcvtq_f32_f16(*(float16x4_t *)v77.i8), v9);
        float16x8_t v78 = *v69++;
        float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v78.i8);
        float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v78);
        float32x4_t v75 = vmlaq_f32(v75, (float32x4_t)v11, v10);
        float32x4_t v74 = vmlaq_f32(v74, (float32x4_t)v12, v9);
        v72 -= 8;
      }
      while ((unint64_t)v67 < v68);
      if ((int)v72 >= 1)
      {
LABEL_70:
        for (int i = v72; !((i < 0) ^ _VF | (i == 0)); i -= 8)
        {
          unint64_t v83 = v24 - (char *)v70;
          if ((unint64_t)(v24 - (char *)v70) >= 0x20) {
            unint64_t v83 = 32;
          }
          if (v83 < 0x20)
          {
            if (i < 4)
            {
              if (i == 1)
              {
                float32x4_t v10 = (float32x4_t)v70->u32[0];
              }
              else
              {
                uint64_t v87 = 0;
                if (i != 2) {
                  LODWORD(v87) = v70->i32[2];
                }
                v10.i64[0] = v70->i64[0];
                v10.i64[1] = v87;
              }
              float32x4_t v9 = 0uLL;
              v70 += 2;
LABEL_93:
              if (i == 1)
              {
                v12.i16[0] = v67->i16[0];
                v11.i16[0] = v69->i16[0];
              }
              else
              {
                v12.i32[0] = v67->i32[0];
                if (i == 2)
                {
                  v12.i32[1] = 0;
                  v11.i64[0] = 0;
                  v12.i64[1] = 0;
                }
                else
                {
                  v13.i16[3] = 0;
                  v13.i32[0] = v67->i32[0];
                  v13.i16[2] = v67->i16[2];
                  v11.i32[0] = v69->u16[2];
                  float16x8_t v12 = (float16x8_t)v13.u64[0];
                }
                v13.i32[0] = v69->i32[0];
                *(int32x2_t *)v11.i8 = vzip1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v11.i8);
              }
              float32x4_t v88 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
              float32x4_t v86 = vmulq_f32(v9, vcvt_hight_f32_f16(v12));
              float32x4_t v13 = vmulq_f32(v10, v88);
              v11.i64[1] = 0;
              goto LABEL_77;
            }
            if (i == 4)
            {
              float32x4_t v9 = 0uLL;
            }
            else if (i == 5)
            {
              float32x4_t v9 = (float32x4_t)v70[1].u32[0];
            }
            else
            {
              int32x2_t v89 = 0;
              if (i != 6)
              {
                int32x2_t v90 = 0;
                if ((v72 & 1) == 0) {
                  v90.i32[0] = v70[1].i32[3];
                }
                v89.i32[0] = v70[1].i32[2];
                int32x2_t v89 = vzip1_s32(v89, v90);
              }
              v9.i64[0] = v70[1].i64[0];
              *(int32x2_t *)&v9.u32[2] = v89;
            }
            float32x4_t v10 = *(float32x4_t *)v70;
          }
          else
          {
            v9.f32[0] = fminf((float)i, 8.0);
            float32x4_t v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            int8x16_t v85 = (int8x16_t)vcgtq_f32(v84, (float32x4_t)xmmword_1850CD7B0);
            float16x8_t v11 = *(float16x8_t *)v70;
            float16x8_t v12 = (float16x8_t)v70[1];
            float32x4_t v9 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v84, (float32x4_t)xmmword_1850CD7C0));
            float32x4_t v10 = (float32x4_t)vandq_s8(*v70, v85);
          }
          v70 += 2;
          if (i < 8)
          {
            if (i < 4) {
              goto LABEL_93;
            }
            v11.i64[0] = v67->i64[0];
            if (i == 5)
            {
              v12.i16[0] = v67->i16[4];
              v11.i64[1] = v12.i64[0];
              v14.i16[0] = v69->i16[4];
            }
            else if (i == 4)
            {
              int32x2_t v14 = 0;
            }
            else
            {
              v12.i32[0] = v67->i32[2];
              if (i == 6)
              {
                v11.i64[1] = v12.u32[0];
                v12.i64[0] = 0;
              }
              else
              {
                v13.i16[3] = 0;
                v13.i32[0] = v67->i32[2];
                v13.i16[2] = v67->i16[6];
                v11.i64[1] = v13.i64[0];
                v12.i16[0] = v69->i16[6];
              }
              v13.i32[0] = v69->i32[2];
              int32x2_t v14 = vzip1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v12.i8);
            }
            float32x4_t v86 = vmulq_f32(v9, vcvt_hight_f32_f16(v11));
            float32x4_t v13 = vmulq_f32(v10, vcvtq_f32_f16(*(float16x4_t *)v11.i8));
            v11.i64[0] = v69->i64[0];
            v11.u64[1] = (unint64_t)v14;
          }
          else
          {
            float32x4_t v86 = vmulq_f32(v9, vcvt_hight_f32_f16(*v67));
            float32x4_t v13 = vmulq_f32(v10, vcvtq_f32_f16(*(float16x4_t *)v67->i8));
            float16x8_t v11 = *v69;
          }
LABEL_77:
          ++v67;
          float32x4_t v71 = vaddq_f32(v71, v13);
          float32x4_t v73 = vaddq_f32(v73, v86);
          ++v69;
          float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v11.i8);
          float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v11);
          float32x4_t v75 = vmlaq_f32(v75, (float32x4_t)v11, v9);
          float32x4_t v74 = vmlaq_f32(v74, (float32x4_t)v12, v10);
          _VF = __OFSUB__(i, 8);
        }
      }
LABEL_114:
      _Q17 = vaddq_f32(v71, v73);
      _Q17.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q17, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q17, 1)));
      __asm { FCVT            H17, S17 }
      *unint64_t v39 = _Q17.i16[0];
      _Q16 = vaddq_f32(v74, v75);
      _Q16.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q16, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q16, 1)));
      __asm { FCVT            H16, S16 }
      v39[1] = _Q16.i16[0];
      v39 += 2;
      ++v40;
      uint64_t v41 = (int *)((char *)v41 + v23);
      if (v40 == v21) {
        goto LABEL_115;
      }
    }
  }
  return result;
}

int *resample_horizontal<half,half,5,false>(int *result, unsigned int a2, double a3, double a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, int *a9, int a10)
{
  if ((int)a6 >= 1 && a10 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a8;
    unint64_t v18 = *a9;
    unint64_t v19 = v18 / 0xA;
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v20 + 8;
    uint64_t v22 = (char *)result + (v20 + 8) * a6;
    if (v18 / 0xA >= *(int *)&v22[-v20 - 4] + (uint64_t)*(int *)&v22[-v20 - 8]) {
      unint64_t v19 = *(int *)&v22[-v20 - 4] + (uint64_t)*(int *)&v22[-v20 - 8];
    }
    unint64_t v23 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v23 = 1;
    }
    unsigned int v24 = a2 % 6;
    BOOL v25 = a2 > 5;
    if (a2 % 6) {
      BOOL v25 = 0;
    }
    else {
      unsigned int v24 = 6;
    }
    uint64_t v26 = ((10 * v24 + 63) & 0x3FFFFFFC0) + 60 * (a2 / 6 - v25);
    unint64_t v27 = a6 - v23;
    *(float *)&a3 = (float)v24;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 6) {
      unsigned int v29 = 6;
    }
    else {
      unsigned int v29 = a2;
    }
    *(float *)&a4 = (float)v29;
    float32x4_t v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    int8x16_t v31 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v32 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v33 = a10;
    if (v27 <= 1) {
      unint64_t v27 = 1;
    }
    int8x16_t v34 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_1850CD7B0);
    do
    {
      int8x16_t v35 = *(float16x4_t **)(a7 + 8 * v16);
      if (a6 <= v23)
      {
        unint64_t v36 = 0;
        int8x16_t v37 = result;
      }
      else
      {
        unint64_t v36 = 0;
        int8x16_t v37 = result;
        do
        {
          unint64_t v38 = v17 + 10 * *v37;
          unint64_t v39 = v26 + v38;
          if (v26 + v38 > 10 * v19 + v17) {
            goto LABEL_29;
          }
          if (v38 >= v39)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
          }
          else
          {
            unint64_t v40 = (int8x16_t *)(v37 + 2);
            int v41 = v37[1];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            while (v38 < v39 - 64)
            {
              float32x4_t v11 = (float32x4_t)vandq_s8(*v40, v32);
              int32x4_t v50 = (int32x4_t)vandq_s8(v40[1], v31);
              unint64_t v40 = (int8x16_t *)((char *)v40 + 24);
              float16x8_t v51 = *(float16x8_t *)v38;
              float16x8_t v52 = *(float16x8_t *)(v38 + 16);
              float16x8_t v53 = *(float16x8_t *)(v38 + 32);
              float16x8_t v54 = *(float16x8_t *)(v38 + 48);
              v38 += 60;
              float32x4_t v55 = vcvt_hight_f32_f16(v54);
              float32x4_t v56 = vcvt_hight_f32_f16(v53);
              float32x4_t v57 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
              float32x4_t v14 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
              float32x4_t v58 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
              float16x8_t v15 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v54.i8);
              float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(v51);
              float16x8_t v13 = (float16x8_t)vcvt_hight_f32_f16(v52);
              int32x4_t v59 = (int32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL);
              int32x4_t v60 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              float32x4_t v45 = vmlaq_f32(v45, (float32x4_t)v13, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v11, (int32x4_t)v11), (int32x4_t)v11));
              float32x4_t v43 = vmlaq_f32(v43, (float32x4_t)v12, (float32x4_t)vzip1q_s32((int32x4_t)v11, vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
              float32x4_t v48 = vmlaq_f32(v48, (float32x4_t)v15, (float32x4_t)vzip1q_s32(v50, vdupq_lane_s32(*(int32x2_t *)v50.i8, 1)));
              float32x4_t v42 = vmlaq_n_f32(v42, v58, v11.f32[0]);
              float32x4_t v46 = vmlaq_laneq_f32(v46, v14, v11, 3);
              float32x4_t v44 = vmlaq_f32(v44, v57, (float32x4_t)vzip1q_s32(v60, v60));
              float32x4_t v47 = vmlaq_n_f32(v47, v56, *(float *)v50.i32);
              float32x4_t v49 = vmlaq_f32(v49, v55, (float32x4_t)vzip1q_s32(v59, v59));
              v41 -= 6;
            }
            if (v41 >= 1)
            {
              float16x8_t v12 = (float16x8_t)vandq_s8(*v40, v34);
              int32x4_t v61 = (int32x4_t)vandq_s8(v40[1], (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_1850CD7C0));
              float16x8_t v62 = *(float16x8_t *)(v38 + 16);
              float16x8_t v63 = *(float16x8_t *)(v38 + 32);
              float16x8_t v64 = *(float16x8_t *)(v38 + 48);
              float32x4_t v65 = vcvt_hight_f32_f16(v64);
              float32x4_t v66 = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
              float32x4_t v67 = vcvt_hight_f32_f16(v63);
              float32x4_t v14 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
              float16x8_t v15 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v64.i8);
              float32x4_t v11 = vcvt_hight_f32_f16(*(float16x8_t *)v38);
              float16x8_t v13 = (float16x8_t)vcvt_hight_f32_f16(v62);
              int32x4_t v68 = (int32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL);
              int32x4_t v69 = (int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL);
              float32x4_t v45 = vmlaq_f32(v45, (float32x4_t)v13, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v12, (int32x4_t)v12), (int32x4_t)v12));
              float32x4_t v43 = vmlaq_f32(v43, v11, (float32x4_t)vzip1q_s32((int32x4_t)v12, vdupq_lane_s32(*(int32x2_t *)v12.i8, 1)));
              float32x4_t v48 = vmlaq_f32(v48, (float32x4_t)v15, (float32x4_t)vzip1q_s32(v61, vdupq_lane_s32(*(int32x2_t *)v61.i8, 1)));
              float32x4_t v42 = vmlaq_n_f32(v42, vcvtq_f32_f16(*(float16x4_t *)v38), *(float *)v12.i32);
              float32x4_t v46 = vmlaq_laneq_f32(v46, v14, (float32x4_t)v12, 3);
              float32x4_t v47 = vmlaq_n_f32(v47, v67, *(float *)v61.i32);
              float32x4_t v44 = vmlaq_f32(v44, v66, (float32x4_t)vzip1q_s32(v69, v69));
              float32x4_t v49 = vmlaq_f32(v49, v65, (float32x4_t)vzip1q_s32(v68, v68));
            }
          }
          float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 0xCuLL);
          float32x4_t v70 = (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL);
          float32x4_t v71 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL);
          int32x4_t v72 = (int32x4_t)vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 0xCuLL));
          float32x4_t v73 = vaddq_f32(v43, v70);
          int8x16_t v74 = (int8x16_t)vaddq_f32(v44, v10);
          float16x4_t *v35 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v74, (int8x16_t)v72, 8uLL), vaddq_f32(vaddq_f32(v42, v71), (float32x4_t)vextq_s8((int8x16_t)v73, v74, 4uLL))));
          v35[1].i16[0] = vcvt_f16_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v72, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.i8, 1)))).u16[0];
          int8x16_t v35 = (float16x4_t *)((char *)v35 + 10);
          ++v36;
          int8x16_t v37 = (int *)((char *)v37 + v21);
        }
        while (v36 != v27);
        unint64_t v36 = v27;
      }
LABEL_29:
      if (v36 >= a6) {
        goto LABEL_165;
      }
      do
      {
        if (*v37 >= (int)v19) {
          int v75 = v19;
        }
        else {
          int v75 = *v37;
        }
        int v76 = v19 - v75;
        if (v37[1] >= v76) {
          int v77 = v76;
        }
        else {
          int v77 = v37[1];
        }
        if (v77 < 1)
        {
          v81.i64[0] = 0x8000000080000000;
          v81.i64[1] = 0x8000000080000000;
          v83.i64[0] = 0x8000000080000000;
          v83.i64[1] = 0x8000000080000000;
          v84.i64[0] = 0x8000000080000000;
          v84.i64[1] = 0x8000000080000000;
          v85.i64[0] = 0x8000000080000000;
          v85.i64[1] = 0x8000000080000000;
          v86.i64[0] = 0x8000000080000000;
          v86.i64[1] = 0x8000000080000000;
          v87.i64[0] = 0x8000000080000000;
          v87.i64[1] = 0x8000000080000000;
          v88.i64[0] = 0x8000000080000000;
          v88.i64[1] = 0x8000000080000000;
          v89.i64[0] = 0x8000000080000000;
          v89.i64[1] = 0x8000000080000000;
          goto LABEL_164;
        }
        float16x8_t v78 = (float16x8_t *)(v17 + 10 * *v37);
        unint64_t v79 = (unint64_t)&v78[-4] + 10 * v77;
        int32x2_t v80 = (int8x16_t *)(v37 + 2);
        v81.i64[0] = 0x8000000080000000;
        v81.i64[1] = 0x8000000080000000;
        if ((unint64_t)v78 >= v79)
        {
          v83.i64[0] = 0x8000000080000000;
          v83.i64[1] = 0x8000000080000000;
          v84.i64[0] = 0x8000000080000000;
          v84.i64[1] = 0x8000000080000000;
          v85.i64[0] = 0x8000000080000000;
          v85.i64[1] = 0x8000000080000000;
          v86.i64[0] = 0x8000000080000000;
          v86.i64[1] = 0x8000000080000000;
          v87.i64[0] = 0x8000000080000000;
          v87.i64[1] = 0x8000000080000000;
          v88.i64[0] = 0x8000000080000000;
          v88.i64[1] = 0x8000000080000000;
          v89.i64[0] = 0x8000000080000000;
          v89.i64[1] = 0x8000000080000000;
          goto LABEL_67;
        }
        uint64_t v82 = v77;
        v83.i64[0] = 0x8000000080000000;
        v83.i64[1] = 0x8000000080000000;
        v84.i64[0] = 0x8000000080000000;
        v84.i64[1] = 0x8000000080000000;
        v85.i64[0] = 0x8000000080000000;
        v85.i64[1] = 0x8000000080000000;
        v86.i64[0] = 0x8000000080000000;
        v86.i64[1] = 0x8000000080000000;
        v87.i64[0] = 0x8000000080000000;
        v87.i64[1] = 0x8000000080000000;
        v88.i64[0] = 0x8000000080000000;
        v88.i64[1] = 0x8000000080000000;
        v89.i64[0] = 0x8000000080000000;
        v89.i64[1] = 0x8000000080000000;
        do
        {
          unint64_t v90 = v22 - (char *)v80;
          if ((unint64_t)(v22 - (char *)v80) >= 0x20) {
            unint64_t v90 = 32;
          }
          if (v90 >= 0x20)
          {
            float32x4_t v10 = (float32x4_t)vandq_s8(v80[1], v31);
            float32x4_t v11 = (float32x4_t)vandq_s8(*v80, v32);
            goto LABEL_43;
          }
          if (!v82)
          {
            float32x4_t v11 = 0uLL;
LABEL_56:
            float32x4_t v10 = 0uLL;
            goto LABEL_43;
          }
          if (v82 < 4)
          {
            if (v82 == 1)
            {
              float32x4_t v11 = (float32x4_t)v80->u32[0];
            }
            else
            {
              uint64_t v101 = 0;
              if (v82 != 2) {
                LODWORD(v101) = v80->i32[2];
              }
              v11.i64[0] = v80->i64[0];
              v11.i64[1] = v101;
            }
            goto LABEL_56;
          }
          if (v82 == 4)
          {
            float32x4_t v10 = 0uLL;
          }
          else if (v82 == 5)
          {
            float32x4_t v10 = (float32x4_t)v80[1].u32[0];
          }
          else
          {
            int32x2_t v102 = 0;
            if (v82 != 6)
            {
              int32x2_t v103 = 0;
              if ((v77 & 1) == 0) {
                v103.i32[0] = v80[1].i32[3];
              }
              v102.i32[0] = v80[1].i32[2];
              int32x2_t v102 = vzip1_s32(v102, v103);
            }
            v10.i64[0] = v80[1].i64[0];
            *(int32x2_t *)&v10.u32[2] = v102;
          }
          float32x4_t v11 = *(float32x4_t *)v80;
LABEL_43:
          int32x2_t v80 = (int8x16_t *)((char *)v80 + 24);
          float16x8_t v91 = *v78;
          float16x8_t v92 = v78[1];
          float16x8_t v93 = v78[2];
          float16x8_t v94 = v78[3];
          float16x8_t v78 = (float16x8_t *)((char *)v78 + 60);
          float32x4_t v95 = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
          float32x4_t v96 = vcvt_hight_f32_f16(v92);
          float32x4_t v97 = vcvt_hight_f32_f16(v91);
          float16x8_t v15 = (float16x8_t)vcvt_hight_f32_f16(v94);
          float32x4_t v98 = vcvt_hight_f32_f16(v93);
          float32x4_t v14 = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
          float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v91.i8);
          float16x8_t v13 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v92.i8);
          int32x4_t v99 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
          int32x4_t v100 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
          float32x4_t v84 = vmlaq_f32(v84, (float32x4_t)v13, (float32x4_t)vzip1q_s32(v100, v100));
          float32x4_t v81 = vmlaq_n_f32(v81, (float32x4_t)v12, v11.f32[0]);
          float32x4_t v86 = vmlaq_laneq_f32(v86, v14, v11, 3);
          float32x4_t v87 = vmlaq_n_f32(v87, v98, v10.f32[0]);
          float32x4_t v89 = vmlaq_f32(v89, (float32x4_t)v15, (float32x4_t)vzip1q_s32(v99, v99));
          float32x4_t v83 = vmlaq_f32(v83, v97, (float32x4_t)vzip1q_s32((int32x4_t)v11, vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
          float32x4_t v85 = vmlaq_f32(v85, v96, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v11, (int32x4_t)v11), (int32x4_t)v11));
          float32x4_t v88 = vmlaq_f32(v88, v95, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
          v82 -= 6;
        }
        while ((unint64_t)v78 < v79);
        if ((int)v82 >= 1)
        {
          int v77 = v82;
LABEL_67:
          uint64_t v104 = 0;
          char v105 = v77;
          uint64_t v106 = 5 * v77;
          unint64_t v107 = v77;
          int v108 = 5 * v77;
          while (2)
          {
            uint64_t v109 = v106 + v104;
            unint64_t v110 = v22 - (char *)v80;
            if ((unint64_t)(v22 - (char *)v80) >= 0x20) {
              unint64_t v110 = 32;
            }
            if (v110 >= 0x20)
            {
              v10.f32[0] = fminf((float)(int)v107, 8.0);
              float32x4_t v111 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
              int8x16_t v112 = (int8x16_t)vcgtq_f32(v111, (float32x4_t)xmmword_1850CD7B0);
              float16x8_t v12 = *(float16x8_t *)v80;
              float16x8_t v13 = (float16x8_t)v80[1];
              float32x4_t v10 = (float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vcgtq_f32(v111, (float32x4_t)xmmword_1850CD7C0));
              float32x4_t v11 = (float32x4_t)vandq_s8(*v80, v112);
              goto LABEL_72;
            }
            if (v107 < 4)
            {
              if (v109 == 5)
              {
                float32x4_t v11 = (float32x4_t)v80->u32[0];
              }
              else
              {
                if (v106 + v104 == 10) {
                  v10.i64[0] = 0;
                }
                else {
                  v10.i32[0] = v80->i32[2];
                }
                v11.i64[0] = v80->i64[0];
                v11.i64[1] = v10.i64[0];
              }
              float32x4_t v10 = 0uLL;
              int32x2_t v80 = (int8x16_t *)((char *)v80 + 24);
            }
            else
            {
              if (v107 == 4)
              {
                float32x4_t v10 = 0uLL;
              }
              else if (v107 == 5)
              {
                float32x4_t v10 = (float32x4_t)v80[1].u32[0];
              }
              else
              {
                if (v106 + v104 == 30)
                {
                  v11.i64[0] = 0;
                }
                else
                {
                  int32x2_t v121 = 0;
                  if ((v105 & 1) == 0) {
                    v121.i32[0] = v80[1].i32[3];
                  }
                  v11.i32[0] = v80[1].i32[2];
                  *(int32x2_t *)v11.f32 = vzip1_s32(*(int32x2_t *)v11.f32, v121);
                }
                v10.i64[0] = v80[1].i64[0];
                v10.i64[1] = v11.i64[0];
              }
              float32x4_t v11 = *(float32x4_t *)v80;
LABEL_72:
              int32x2_t v80 = (int8x16_t *)((char *)v80 + 24);
              if (v107 >= 7)
              {
                float16x8_t v113 = v78[2];
                float16x8_t v15 = v78[3];
                float16x8_t v13 = *v78;
                float16x8_t v12 = v78[1];
                goto LABEL_74;
              }
            }
            uint64_t v132 = v106 + v104;
            unsigned int v122 = v108 + v104;
            if ((v108 + v104) < 0x10)
            {
              if (v122 < 8)
              {
                if (v122 < 4)
                {
                  if (v132)
                  {
                    if (v132 == 1)
                    {
                      v12.i16[0] = v78->i16[0];
                      v13.i64[0] = 0;
                    }
                    else
                    {
                      v12.i32[0] = v78->i32[0];
                      v13.i16[0] = v78->i16[2];
                    }
                    *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
                  }
                  else
                  {
                    v13.i64[0] = 0;
                  }
                  v13.i64[1] = 0;
                }
                else
                {
                  if (v132 == 4)
                  {
                    int32x2_t v124 = 0;
                  }
                  else
                  {
                    if (v132 == 5)
                    {
                      v12.i16[0] = v78->i16[4];
                      v13.i64[0] = 0;
                    }
                    else
                    {
                      v12.i32[0] = v78->i32[2];
                      v13.i16[0] = v78->i16[6];
                    }
                    int32x2_t v124 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
                  }
                  v13.i64[0] = v78->i64[0];
                  v13.u64[1] = (unint64_t)v124;
                }
                float16x8_t v12 = 0uLL;
              }
              else
              {
                if (v106 + v104 == 8)
                {
                  float16x8_t v12 = 0uLL;
                }
                else if ((unint64_t)(v106 + v104 - 8) < 4)
                {
                  if (v106 + v104 == 9)
                  {
                    v12.i16[0] = v78[1].i16[0];
                  }
                  else
                  {
                    if (v106 + v104 == 10) {
                      v12.i64[0] = 0;
                    }
                    else {
                      v12.i16[0] = v78[1].i16[2];
                    }
                    v13.i32[0] = v78[1].i32[0];
                    *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v12.i8);
                  }
                  v12.i64[1] = 0;
                }
                else
                {
                  if (v132 == 12)
                  {
                    int32x2_t v125 = 0;
                  }
                  else
                  {
                    if (v132 == 13)
                    {
                      v12.i16[0] = v78[1].i16[4];
                      v13.i64[0] = 0;
                    }
                    else
                    {
                      v12.i32[0] = v78[1].i32[2];
                      v13.i16[0] = v78[1].i16[6];
                    }
                    int32x2_t v125 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
                  }
                  v12.i64[0] = v78[1].i64[0];
                  v12.u64[1] = (unint64_t)v125;
                }
                float16x8_t v13 = *v78;
              }
            }
            else
            {
              float16x8_t v13 = *v78;
              float16x8_t v12 = v78[1];
              unint64_t v123 = v132 - 16;
              if (v132 != 16)
              {
                if (v123 >= 8)
                {
                  if (v106 + v104 == 24)
                  {
                    float16x8_t v15 = 0uLL;
                  }
                  else if ((unint64_t)(v106 + v104 - 24) < 4)
                  {
                    if (v109 == 25)
                    {
                      v14.i16[0] = v78[3].i16[0];
                      v15.i64[0] = 0;
                    }
                    else
                    {
                      v14.i32[0] = v78[3].i32[0];
                      v15.i16[0] = v78[3].i16[2];
                    }
                    *(int32x2_t *)v15.i8 = vzip1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)v15.i8);
                  }
                  else
                  {
                    if (v132 == 28)
                    {
                      v14.i64[0] = 0;
                    }
                    else if (v132 == 29)
                    {
                      v14.i16[0] = v78[3].i16[4];
                    }
                    else
                    {
                      if (v106 + v104 == 30)
                      {
                        v14.i64[0] = 0;
                      }
                      else
                      {
                        v15.i64[0] = 0;
                        if ((v105 & 1) == 0) {
                          v15.i16[0] = v78[3].i16[7];
                        }
                        v14.i16[0] = v78[3].i16[6];
                        v14.i16[1] = v15.i16[0];
                      }
                      v15.i32[0] = v78[3].i32[2];
                      *(int32x2_t *)v14.f32 = vzip1_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v14.f32);
                    }
                    v15.i64[0] = v78[3].i64[0];
                    v15.i64[1] = v14.i64[0];
                  }
                  float16x8_t v113 = v78[2];
LABEL_74:
                  float16x8_t v78 = (float16x8_t *)((char *)v78 + 60);
                  float32x4_t v114 = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
                  float32x4_t v115 = vcvt_hight_f32_f16(v12);
                  float32x4_t v116 = vcvt_hight_f32_f16(v13);
                  float16x8_t v15 = (float16x8_t)vcvt_hight_f32_f16(v15);
                  float32x4_t v117 = vcvt_hight_f32_f16(v113);
                  float32x4_t v14 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
                  float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v12.i8);
                  float16x8_t v13 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v13.i8);
                  int32x4_t v118 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
                  int32x4_t v119 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
                  float32x4_t v81 = vmlaq_n_f32(v81, (float32x4_t)v13, v11.f32[0]);
                  float32x4_t v84 = vmlaq_f32(v84, (float32x4_t)v12, (float32x4_t)vzip1q_s32(v119, v119));
                  float32x4_t v86 = vmlaq_laneq_f32(v86, v14, v11, 3);
                  float32x4_t v87 = vmlaq_n_f32(v87, v117, v10.f32[0]);
                  float32x4_t v89 = vmlaq_f32(v89, (float32x4_t)v15, (float32x4_t)vzip1q_s32(v118, v118));
                  float32x4_t v83 = vmlaq_f32(v83, v116, (float32x4_t)vzip1q_s32((int32x4_t)v11, vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
                  float32x4_t v85 = vmlaq_f32(v85, v115, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v11, (int32x4_t)v11), (int32x4_t)v11));
                  float32x4_t v88 = vmlaq_f32(v88, v114, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
                  v104 -= 30;
                  BOOL v120 = (uint64_t)v107 <= 6;
                  v107 -= 6;
                  if (v120) {
                    goto LABEL_164;
                  }
                  continue;
                }
                if (v123 < 4)
                {
                  v113.i32[3] = 0;
                  v113.i32[0] = v78[2].i32[0];
                  *(uint64_t *)((char *)v113.i64 + 4) = v78[2].u16[2];
                }
                else
                {
                  if (v132 == 20)
                  {
                    int32x2_t v126 = 0;
                  }
                  else
                  {
                    if (v132 == 21)
                    {
                      v14.i16[0] = v78[2].i16[4];
                      v15.i64[0] = 0;
                    }
                    else
                    {
                      v14.i32[0] = v78[2].i32[2];
                      v15.i16[0] = v78[2].i16[6];
                    }
                    int32x2_t v126 = vzip1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)v15.i8);
                  }
                  v113.i64[0] = v78[2].i64[0];
                  v113.u64[1] = (unint64_t)v126;
                }
LABEL_151:
                float16x8_t v15 = 0uLL;
                goto LABEL_74;
              }
            }
            break;
          }
          float16x8_t v113 = 0uLL;
          goto LABEL_151;
        }
LABEL_164:
        float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v88, 0xCuLL);
        float32x4_t v127 = (float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v87, 0xCuLL);
        float32x4_t v128 = (float32x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v86, 0xCuLL);
        int32x4_t v129 = (int32x4_t)vaddq_f32(v85, (float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v89, 0xCuLL));
        float32x4_t v130 = vaddq_f32(v83, v127);
        int8x16_t v131 = (int8x16_t)vaddq_f32(v84, v10);
        float16x4_t *v35 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v131, (int8x16_t)v129, 8uLL), vaddq_f32(vaddq_f32(v81, v128), (float32x4_t)vextq_s8((int8x16_t)v130, v131, 4uLL))));
        v35[1].i16[0] = vcvt_f16_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v129, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v131.i8, 1)))).u16[0];
        int8x16_t v35 = (float16x4_t *)((char *)v35 + 10);
        ++v36;
        int8x16_t v37 = (int *)((char *)v37 + v21);
      }
      while (v36 != a6);
LABEL_165:
      v17 += v18;
      ++v16;
    }
    while (v16 != v33);
  }
  return result;
}

int *resample_horizontal<half,half,2,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  if ((int)a5 >= 1 && a9 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a7;
    unint64_t v15 = *a8;
    uint64_t v16 = v15 >> 2;
    unint64_t v17 = a5;
    uint64_t v18 = 4 * a2;
    uint64_t v19 = v18 + 8;
    uint64_t v20 = (char *)result + (v18 + 8) * a5;
    if (v15 >> 2 >= *(int *)&v20[-v18 - 4] + (uint64_t)*(int *)&v20[-v18 - 8]) {
      uint64_t v16 = *(int *)&v20[-v18 - 4] + (uint64_t)*(int *)&v20[-v18 - 8];
    }
    unint64_t v21 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v21 = 1;
    }
    unint64_t v22 = a5 - v21;
    BOOL v23 = a2 > 7;
    unsigned int v24 = a2 & 7;
    if ((a2 & 7) != 0) {
      BOOL v23 = 0;
    }
    else {
      unsigned int v24 = 8;
    }
    unsigned int v25 = 16 * ((a2 >> 3) - v23);
    *(float *)&a3 = (float)v24;
    uint64_t v26 = (4 * (_BYTE)v24 + 31) & 0x60;
    float32x4_t v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8) {
      unsigned int v28 = 8;
    }
    else {
      unsigned int v28 = a2;
    }
    *(float *)&a3 = (float)v28;
    uint64_t v29 = v26 + 2 * v25;
    float32x4_t v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    int8x16_t v31 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v32 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v33 = a9;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    int8x16_t v34 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_1850CD7B0);
    int8x16_t v35 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_1850CD7C0);
    do
    {
      unint64_t v36 = *(_DWORD **)(a6 + 8 * v13);
      if (v17 <= v21)
      {
        unint64_t v37 = 0;
        unint64_t v38 = result;
      }
      else
      {
        unint64_t v37 = 0;
        unint64_t v38 = result;
        do
        {
          unint64_t v39 = (float16x8_t *)(v14 + 4 * *v38);
          unint64_t v40 = (float16x8_t *)((char *)v39 + v29);
          if ((unint64_t)v39->u64 + v29 > 4 * v16 + v14) {
            goto LABEL_29;
          }
          if (v39 >= v40)
          {
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
          }
          else
          {
            int v41 = (int8x16_t *)(v38 + 2);
            int v42 = v38[1];
            unint64_t v43 = (unint64_t)&v40[-2];
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            while ((unint64_t)v39 < v43)
            {
              int8x16_t v48 = *v41;
              int8x16_t v49 = v41[1];
              v41 += 2;
              int32x4_t v50 = (int32x4_t)vandq_s8(v49, v31);
              int32x4_t v51 = (int32x4_t)vandq_s8(v48, v32);
              float16x8_t v53 = *v39;
              float16x8_t v52 = v39[1];
              v39 += 2;
              float32x4_t v54 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
              float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(v53);
              float32x4_t v55 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
              float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v52);
              float32x4_t v56 = (float32x4_t)vzip1q_s32(v51, v51);
              float32x4_t v9 = (float32x4_t)vzip2q_s32(v51, v51);
              float32x4_t v57 = (float32x4_t)vzip1q_s32(v50, v50);
              float32x4_t v10 = (float32x4_t)vzip2q_s32(v50, v50);
              float32x4_t v47 = vmlaq_f32(v47, (float32x4_t)v11, v10);
              float32x4_t v46 = vmlaq_f32(v46, v55, v57);
              float32x4_t v45 = vmlaq_f32(v45, (float32x4_t)v12, v9);
              float32x4_t v44 = vmlaq_f32(v44, v54, v56);
              v42 -= 8;
            }
            if (v42 >= 1)
            {
              int32x4_t v58 = (int32x4_t)vandq_s8(v41[1], v35);
              int32x4_t v59 = (int32x4_t)vandq_s8(*v41, v34);
              float16x8_t v60 = v39[1];
              float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(*v39);
              float32x4_t v61 = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
              float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v60);
              float32x4_t v62 = (float32x4_t)vzip1q_s32(v59, v59);
              float32x4_t v9 = (float32x4_t)vzip2q_s32(v59, v59);
              float32x4_t v63 = (float32x4_t)vzip1q_s32(v58, v58);
              float32x4_t v10 = (float32x4_t)vzip2q_s32(v58, v58);
              float32x4_t v47 = vmlaq_f32(v47, (float32x4_t)v11, v10);
              float32x4_t v46 = vmlaq_f32(v46, v61, v63);
              float32x4_t v45 = vmlaq_f32(v45, (float32x4_t)v12, v9);
              float32x4_t v44 = vmlaq_f32(v44, vcvtq_f32_f16(*(float16x4_t *)v39->i8), v62);
            }
          }
          float32x4_t v64 = vaddq_f32(vaddq_f32(v44, v46), vaddq_f32(v45, v47));
          *(float32x2_t *)v64.f32 = vadd_f32(*(float32x2_t *)v64.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL));
          *v36++ = vcvt_f16_f32(v64).u32[0];
          ++v37;
          unint64_t v38 = (int *)((char *)v38 + v19);
        }
        while (v37 != v22);
        unint64_t v37 = v22;
      }
LABEL_29:
      if (v37 >= v17) {
        goto LABEL_117;
      }
      do
      {
        int v65 = v38[1];
        uint64_t v66 = *v38;
        if ((int)v66 >= (int)v16) {
          int v67 = v16;
        }
        else {
          int v67 = *v38;
        }
        int v68 = v16 - v67;
        if (v65 >= v68) {
          int v65 = v68;
        }
        if (v65 < 1)
        {
          v73.i64[0] = 0x8000000080000000;
          v73.i64[1] = 0x8000000080000000;
          v74.i64[0] = 0x8000000080000000;
          v74.i64[1] = 0x8000000080000000;
          v75.i64[0] = 0x8000000080000000;
          v75.i64[1] = 0x8000000080000000;
          v76.i64[0] = 0x8000000080000000;
          v76.i64[1] = 0x8000000080000000;
          goto LABEL_116;
        }
        int32x4_t v69 = (float16x8_t *)(v14 + 4 * v66);
        unint64_t v70 = (unint64_t)&v69[-2] + 4 * v65;
        float32x4_t v71 = (int8x16_t *)(v38 + 2);
        if ((unint64_t)v69 >= v70)
        {
          v73.i64[0] = 0x8000000080000000;
          v73.i64[1] = 0x8000000080000000;
          v74.i64[0] = 0x8000000080000000;
          v74.i64[1] = 0x8000000080000000;
          v75.i64[0] = 0x8000000080000000;
          v75.i64[1] = 0x8000000080000000;
          v76.i64[0] = 0x8000000080000000;
          v76.i64[1] = 0x8000000080000000;
          goto LABEL_66;
        }
        uint64_t v72 = v65;
        v73.i64[0] = 0x8000000080000000;
        v73.i64[1] = 0x8000000080000000;
        v74.i64[0] = 0x8000000080000000;
        v74.i64[1] = 0x8000000080000000;
        v75.i64[0] = 0x8000000080000000;
        v75.i64[1] = 0x8000000080000000;
        v76.i64[0] = 0x8000000080000000;
        v76.i64[1] = 0x8000000080000000;
        do
        {
          unint64_t v77 = v20 - (char *)v71;
          if ((unint64_t)(v20 - (char *)v71) >= 0x20) {
            unint64_t v77 = 32;
          }
          if (v77 >= 0x20)
          {
            int32x4_t v78 = (int32x4_t)vandq_s8(v71[1], v31);
            int32x4_t v79 = (int32x4_t)vandq_s8(*v71, v32);
            goto LABEL_42;
          }
          if (!v72)
          {
            int32x4_t v79 = 0uLL;
LABEL_55:
            int32x4_t v78 = 0uLL;
            goto LABEL_42;
          }
          if (v72 < 4)
          {
            if (v72 == 1)
            {
              int32x4_t v79 = (int32x4_t)v71->u32[0];
            }
            else
            {
              uint64_t v86 = 0;
              if (v72 != 2) {
                LODWORD(v86) = v71->i32[2];
              }
              v79.i64[0] = v71->i64[0];
              v79.i64[1] = v86;
            }
            goto LABEL_55;
          }
          if (v72 == 4)
          {
            int32x4_t v78 = 0uLL;
          }
          else if (v72 == 5)
          {
            int32x4_t v78 = (int32x4_t)v71[1].u32[0];
          }
          else
          {
            int32x2_t v87 = 0;
            if (v72 != 6)
            {
              int32x2_t v88 = 0;
              if ((v65 & 1) == 0) {
                v88.i32[0] = v71[1].i32[3];
              }
              v10.i32[0] = v71[1].i32[2];
              int32x2_t v87 = vzip1_s32(*(int32x2_t *)v10.f32, v88);
            }
            v78.i64[0] = v71[1].i64[0];
            v78.u64[1] = (unint64_t)v87;
          }
          int32x4_t v79 = *(int32x4_t *)v71;
LABEL_42:
          v71 += 2;
          float16x8_t v81 = *v69;
          float16x8_t v80 = v69[1];
          v69 += 2;
          float32x4_t v82 = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
          float32x4_t v83 = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
          float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v80);
          float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(v81);
          float32x4_t v84 = (float32x4_t)vzip1q_s32(v79, v79);
          float32x4_t v85 = (float32x4_t)vzip1q_s32(v78, v78);
          float32x4_t v10 = (float32x4_t)vzip2q_s32(v78, v78);
          float32x4_t v9 = (float32x4_t)vzip2q_s32(v79, v79);
          float32x4_t v74 = vmlaq_f32(v74, (float32x4_t)v12, v9);
          float32x4_t v76 = vmlaq_f32(v76, (float32x4_t)v11, v10);
          float32x4_t v75 = vmlaq_f32(v75, v83, v85);
          float32x4_t v73 = vmlaq_f32(v73, v82, v84);
          v72 -= 8;
        }
        while ((unint64_t)v69 < v70);
        if ((int)v72 >= 1)
        {
          int v65 = v72;
LABEL_66:
          uint64_t v89 = v65 + 8;
          int v90 = 2 * v65;
          while (2)
          {
            uint64_t v91 = v89 - 8;
            unint64_t v92 = v20 - (char *)v71;
            if ((unint64_t)(v20 - (char *)v71) >= 0x20) {
              unint64_t v92 = 32;
            }
            if (v92 >= 0x20)
            {
              v9.f32[0] = fminf((float)(v89 - 8), 8.0);
              float32x4_t v93 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
              int8x16_t v94 = (int8x16_t)vcgtq_f32(v93, (float32x4_t)xmmword_1850CD7B0);
              float16x8_t v11 = *(float16x8_t *)v71;
              float16x8_t v12 = (float16x8_t)v71[1];
              int32x4_t v95 = (int32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v93, (float32x4_t)xmmword_1850CD7C0));
              int32x4_t v96 = (int32x4_t)vandq_s8(*v71, v94);
              goto LABEL_71;
            }
            if ((unint64_t)v91 < 4)
            {
              if (v89 == 9)
              {
                int32x4_t v96 = (int32x4_t)v71->u32[0];
              }
              else
              {
                uint64_t v101 = 0;
                if (v89 != 10) {
                  LODWORD(v101) = v71->i32[2];
                }
                v96.i64[0] = v71->i64[0];
                v96.i64[1] = v101;
              }
              int32x4_t v95 = 0uLL;
              v71 += 2;
            }
            else
            {
              if (v89 == 12)
              {
                int32x4_t v95 = 0uLL;
              }
              else if (v89 == 13)
              {
                int32x4_t v95 = (int32x4_t)v71[1].u32[0];
              }
              else
              {
                int32x2_t v106 = 0;
                if (v89 != 14)
                {
                  int32x2_t v107 = 0;
                  if ((v65 & 1) == 0) {
                    v107.i32[0] = v71[1].i32[3];
                  }
                  v106.i32[0] = v71[1].i32[2];
                  int32x2_t v106 = vzip1_s32(v106, v107);
                }
                v95.i64[0] = v71[1].i64[0];
                v95.u64[1] = (unint64_t)v106;
              }
              int32x4_t v96 = *(int32x4_t *)v71;
LABEL_71:
              v71 += 2;
              if ((unint64_t)v91 >= 8)
              {
                float16x8_t v11 = v69[1];
                goto LABEL_73;
              }
            }
            if (v91 < 4)
            {
              int32x2_t v104 = 0;
              if (v91 < 2)
              {
                if (v89 != 9) {
                  v104.i32[0] = v69->i32[1];
                }
                v12.i32[0] = v69->i32[0];
                *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v12.i8, v104);
              }
              else
              {
                if (v89 != 10)
                {
                  int32x2_t v105 = 0;
                  if (v89 != 11) {
                    v105.i16[0] = v69->i16[6];
                  }
                  v12.i32[0] = v69->i32[2];
                  int32x2_t v104 = vzip1_s32(*(int32x2_t *)v12.i8, v105);
                }
                v12.i64[0] = v69->i64[0];
                v12.u64[1] = (unint64_t)v104;
              }
              float16x8_t v11 = 0uLL;
            }
            else
            {
              if ((v90 & 0xFFFFFFFE) == 8)
              {
                float16x8_t v11 = 0uLL;
              }
              else if ((unint64_t)(v90 & 0xFFFFFFFE) - 8 < 4)
              {
                int32x2_t v108 = 0;
                if (v89 != 13) {
                  v108.i16[0] = v69[1].i16[2];
                }
                v12.i32[0] = v69[1].i32[0];
                *(int32x2_t *)v11.i8 = vzip1_s32(*(int32x2_t *)v12.i8, v108);
              }
              else
              {
                int32x2_t v102 = 0;
                if (v89 != 14)
                {
                  int32x2_t v103 = 0;
                  if (v89 != 15) {
                    v103.i32[0] = v69[1].i32[3];
                  }
                  v102.i32[0] = v69[1].i32[2];
                  int32x2_t v102 = vzip1_s32(v102, v103);
                }
                v11.i64[0] = v69[1].i64[0];
                v11.u64[1] = (unint64_t)v102;
              }
LABEL_73:
              float16x8_t v12 = *v69;
            }
            v69 += 2;
            float32x4_t v97 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
            float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v11);
            float32x4_t v98 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
            float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(v12);
            float32x4_t v99 = (float32x4_t)vzip1q_s32(v95, v95);
            float32x4_t v9 = (float32x4_t)vzip2q_s32(v95, v95);
            float32x4_t v100 = (float32x4_t)vzip1q_s32(v96, v96);
            float32x4_t v10 = (float32x4_t)vzip2q_s32(v96, v96);
            float32x4_t v74 = vmlaq_f32(v74, (float32x4_t)v12, v10);
            v90 -= 16;
            v89 -= 8;
            float32x4_t v73 = vmlaq_f32(v73, v98, v100);
            float32x4_t v76 = vmlaq_f32(v76, (float32x4_t)v11, v9);
            float32x4_t v75 = vmlaq_f32(v75, v97, v99);
            if (v91 <= 8) {
              break;
            }
            continue;
          }
        }
LABEL_116:
        float32x4_t v109 = vaddq_f32(vaddq_f32(v73, v75), vaddq_f32(v74, v76));
        *(float32x2_t *)v109.f32 = vadd_f32(*(float32x2_t *)v109.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL));
        *v36++ = vcvt_f16_f32(v109).u32[0];
        ++v37;
        unint64_t v38 = (int *)((char *)v38 + v19);
      }
      while (v37 != v17);
LABEL_117:
      v14 += v15;
      ++v13;
    }
    while (v13 != v33);
  }
  return result;
}

float32x2_t *resample_horizontal<half,half,4,false>(float32x2_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a6;
    unint64_t v10 = *a7;
    uint64_t v11 = v10 >> 3;
    uint64_t v12 = 4 * a2;
    uint64_t v13 = v12 + 8;
    uint64_t v14 = (char *)result + (v12 + 8) * a4;
    if (v10 >> 3 >= *(int *)&v14[-v12 - 4] + (uint64_t)*(int *)&v14[-v12 - 8]) {
      uint64_t v11 = *(int *)&v14[-v12 - 4] + (uint64_t)*(int *)&v14[-v12 - 8];
    }
    unint64_t v15 = (4 * a2 + 23) / (4 * a2 + 8);
    if (a2 > 1) {
      unint64_t v15 = 1;
    }
    BOOL v16 = a2 > 3;
    BOOL v17 = (a2 & 3) == 0;
    LODWORD(v18) = (8 * (a2 & 3)) | 0x20;
    if ((a2 & 3) != 0) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 64;
    }
    unint64_t v19 = a4 - v15;
    unsigned int v20 = a2 >> 2;
    if (!v17) {
      BOOL v16 = 0;
    }
    unint64_t v21 = ((v18 - 1) & 0xFFFFFFFFFFFFFFE0) + 32 * (v20 - v16);
    uint64_t v22 = a8;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    do
    {
      BOOL v23 = *(float16x4_t **)(a5 + 8 * v8);
      if (a4 <= v15)
      {
        unint64_t v24 = 0;
        unsigned int v25 = result;
      }
      else
      {
        unint64_t v24 = 0;
        unsigned int v25 = result;
        while (1)
        {
          uint64_t v26 = (float16x8_t *)(v9 + 8 * v25->i32[0]);
          float32x4_t v27 = (float16x8_t *)((char *)v26 + v21);
          if ((unint64_t)v26->u64 + v21 > 8 * v11 + v9) {
            break;
          }
          if (v26 >= v27)
          {
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v32.i64[0] = 0x8000000080000000;
            v32.i64[1] = 0x8000000080000000;
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            v34.i64[0] = 0x8000000080000000;
            v34.i64[1] = 0x8000000080000000;
          }
          else
          {
            unsigned int v28 = v25 + 1;
            int v29 = v25->i32[1];
            unint64_t v30 = (unint64_t)&v27[-2];
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v32.i64[0] = 0x8000000080000000;
            v32.i64[1] = 0x8000000080000000;
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            v34.i64[0] = 0x8000000080000000;
            v34.i64[1] = 0x8000000080000000;
            while ((unint64_t)v26 < v30)
            {
              float32x4_t v35 = *(float32x4_t *)v28->f32;
              v28 += 2;
              float16x8_t v37 = *v26;
              float16x8_t v36 = v26[1];
              v26 += 2;
              float32x4_t v31 = vmlaq_n_f32(v31, vcvtq_f32_f16(*(float16x4_t *)v37.i8), v35.f32[0]);
              float32x4_t v32 = vmlaq_lane_f32(v32, vcvt_hight_f32_f16(v37), *(float32x2_t *)v35.f32, 1);
              float32x4_t v33 = vmlaq_laneq_f32(v33, vcvtq_f32_f16(*(float16x4_t *)v36.i8), v35, 2);
              float32x4_t v34 = vmlaq_laneq_f32(v34, vcvt_hight_f32_f16(v36), v35, 3);
              v29 -= 4;
            }
            if (v29 >= 1)
            {
              float16x8_t v38 = v26[1];
              float32x4_t v31 = vmlaq_n_f32(v31, vcvtq_f32_f16(*(float16x4_t *)v26->i8), COERCE_FLOAT(*(_OWORD *)v28->f32));
              float32x4_t v32 = vmlaq_lane_f32(v32, vcvt_hight_f32_f16(*v26), *v28, 1);
              float32x4_t v33 = vmlaq_laneq_f32(v33, vcvtq_f32_f16(*(float16x4_t *)v38.i8), *(float32x4_t *)v28->f32, 2);
              float32x4_t v34 = vmlaq_laneq_f32(v34, vcvt_hight_f32_f16(v38), *(float32x4_t *)v28->f32, 3);
            }
          }
          *v23++ = vcvt_f16_f32(vaddq_f32(vaddq_f32(v31, v33), vaddq_f32(v32, v34)));
          ++v24;
          unsigned int v25 = (float32x2_t *)((char *)v25 + v13);
          if (v24 == v19)
          {
            unint64_t v24 = v19;
            break;
          }
        }
      }
      if (v24 < a4)
      {
        do
        {
          int v39 = v25->i32[1];
          uint64_t v40 = v25->i32[0];
          if ((int)v40 >= (int)v11) {
            __int32 v41 = v11;
          }
          else {
            __int32 v41 = v25->i32[0];
          }
          int v42 = v11 - v41;
          if (v39 >= v42) {
            int v39 = v42;
          }
          if (v39 < 1)
          {
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
          }
          else
          {
            unint64_t v43 = (float16x8_t *)(v9 + 8 * v40);
            unint64_t v44 = (unint64_t)&v43[-2] + 8 * v39;
            float32x4_t v45 = v25 + 1;
            if ((unint64_t)v43 >= v44)
            {
              v47.i64[0] = 0x8000000080000000;
              v47.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              goto LABEL_54;
            }
            uint64_t v46 = v39;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            do
            {
              unint64_t v51 = v14 - (char *)v45;
              if ((unint64_t)(v14 - (char *)v45) >= 0x10) {
                unint64_t v51 = 16;
              }
              if (v51 < 0x10)
              {
                if (v46)
                {
                  if (v46 == 1)
                  {
                    float32x4_t v52 = (float32x4_t)v45->u32[0];
                  }
                  else
                  {
                    int32x2_t v55 = 0;
                    if (v46 != 2)
                    {
                      int32x2_t v56 = 0;
                      if ((v39 & 1) == 0) {
                        v56.i32[0] = v45[1].i32[1];
                      }
                      v55.i32[0] = v45[1].i32[0];
                      int32x2_t v55 = vzip1_s32(v55, v56);
                    }
                    *(float32x2_t *)v52.f32 = *v45;
                    *(int32x2_t *)&v52.u32[2] = v55;
                  }
                }
                else
                {
                  float32x4_t v52 = 0uLL;
                }
              }
              else
              {
                float32x4_t v52 = *(float32x4_t *)v45->f32;
              }
              v45 += 2;
              float16x8_t v54 = *v43;
              float16x8_t v53 = v43[1];
              v43 += 2;
              float32x4_t v47 = vmlaq_n_f32(v47, vcvtq_f32_f16(*(float16x4_t *)v54.i8), v52.f32[0]);
              float32x4_t v48 = vmlaq_lane_f32(v48, vcvt_hight_f32_f16(v54), *(float32x2_t *)v52.f32, 1);
              float32x4_t v49 = vmlaq_laneq_f32(v49, vcvtq_f32_f16(*(float16x4_t *)v53.i8), v52, 2);
              float32x4_t v50 = vmlaq_laneq_f32(v50, vcvt_hight_f32_f16(v53), v52, 3);
              v46 -= 4;
            }
            while ((unint64_t)v43 < v44);
            if ((int)v46 >= 1)
            {
              int v39 = v46;
LABEL_54:
              int v57 = v39;
              while (2)
              {
                unint64_t v58 = v14 - (char *)v45;
                if ((unint64_t)(v14 - (char *)v45) >= 0x10) {
                  unint64_t v58 = 16;
                }
                if (v58 >= 0x10)
                {
                  float32x4_t v59 = *(float32x4_t *)v45->f32;
                  goto LABEL_59;
                }
                if (v57 == 1)
                {
                  unsigned int v63 = v45->i32[0];
                  v45 += 2;
                  float32x4_t v59 = (float32x4_t)v63;
                  v61.i64[0] = v43->i64[0];
                  goto LABEL_67;
                }
                int32x2_t v65 = 0;
                if (v57 != 2)
                {
                  int32x2_t v66 = 0;
                  if ((v39 & 1) == 0) {
                    v66.i32[0] = v45[1].i32[1];
                  }
                  v65.i32[0] = v45[1].i32[0];
                  int32x2_t v65 = vzip1_s32(v65, v66);
                }
                *(float32x2_t *)v59.f32 = *v45;
                *(int32x2_t *)&v59.u32[2] = v65;
LABEL_59:
                v45 += 2;
                if (v57 >= 4)
                {
                  float16x8_t v60 = v43[1];
                  goto LABEL_61;
                }
                if ((v57 & 0x3FFFFFFE) != 0)
                {
                  float16x8_t v60 = 0uLL;
                  if (v57 != 2) {
                    v60.i64[0] = v43[1].i64[0];
                  }
LABEL_61:
                  float16x8_t v61 = *v43;
                }
                else
                {
                  v61.i64[0] = v43->i64[0];
                  if (v57 == 1) {
LABEL_67:
                  }
                    uint64_t v64 = 0;
                  else {
                    uint64_t v64 = v43->i64[1];
                  }
                  v61.i64[1] = v64;
                  float16x8_t v60 = 0uLL;
                }
                v43 += 2;
                float32x4_t v47 = vmlaq_n_f32(v47, vcvtq_f32_f16(*(float16x4_t *)v61.i8), v59.f32[0]);
                float32x4_t v48 = vmlaq_lane_f32(v48, vcvt_hight_f32_f16(v61), *(float32x2_t *)v59.f32, 1);
                float32x4_t v49 = vmlaq_laneq_f32(v49, vcvtq_f32_f16(*(float16x4_t *)v60.i8), v59, 2);
                float32x4_t v50 = vmlaq_laneq_f32(v50, vcvt_hight_f32_f16(v60), v59, 3);
                BOOL v62 = __OFSUB__(v57, 4);
                v57 -= 4;
                if ((v57 < 0) ^ v62 | (v57 == 0)) {
                  break;
                }
                continue;
              }
            }
          }
          *v23++ = vcvt_f16_f32(vaddq_f32(vaddq_f32(v47, v49), vaddq_f32(v48, v50)));
          ++v24;
          unsigned int v25 = (float32x2_t *)((char *)v25 + v13);
        }
        while (v24 != a4);
      }
      v9 += v10;
      ++v8;
    }
    while (v8 != v22);
  }
  return result;
}

int *resample_horizontal<half,half,3,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  if ((int)a5 >= 1 && a9 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a7;
    unint64_t v15 = *a8;
    unint64_t v16 = v15 / 6;
    uint64_t v17 = 4 * a2;
    uint64_t v18 = v17 + 8;
    unint64_t v19 = (char *)result + (v17 + 8) * a5;
    if (v15 / 6 >= *(int *)&v19[-v17 - 4] + (uint64_t)*(int *)&v19[-v17 - 8]) {
      unint64_t v16 = *(int *)&v19[-v17 - 4] + (uint64_t)*(int *)&v19[-v17 - 8];
    }
    unint64_t v20 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v20 = 1;
    }
    unsigned int v21 = a2 % 5;
    BOOL v22 = a2 > 4;
    if (a2 % 5) {
      BOOL v22 = 0;
    }
    else {
      unsigned int v21 = 5;
    }
    uint64_t v23 = ((6 * v21 + 31) & 0x3FFFFFFE0) + 30 * (a2 / 5 - v22);
    unint64_t v24 = a5 - v20;
    *(float *)&a3 = (float)v21;
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 5) {
      unsigned int v26 = 5;
    }
    else {
      unsigned int v26 = a2;
    }
    *(float *)&a3 = (float)v26;
    float32x4_t v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    int8x16_t v28 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v29 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v30 = a9;
    if (v24 <= 1) {
      unint64_t v24 = 1;
    }
    int8x16_t v31 = (int8x16_t)vcgtq_f32(v25, (float32x4_t)xmmword_1850CD7B0);
    int8x16_t v32 = (int8x16_t)vcgtq_f32(v25, (float32x4_t)xmmword_1850CD7C0);
    while (1)
    {
      uint64_t v33 = *(void *)(a6 + 8 * v13);
      if (a5 <= v20)
      {
        unint64_t v34 = 0;
        float32x4_t v35 = result;
      }
      else
      {
        unint64_t v34 = 0;
        float32x4_t v35 = result;
        while (1)
        {
          float16x8_t v36 = (float16x8_t *)(v14 + 6 * *v35);
          float16x8_t v37 = (float16x8_t *)((char *)v36 + v23);
          if ((unint64_t)v36->u64 + v23 > 6 * v16 + v14) {
            break;
          }
          if (v36 >= v37)
          {
            v41.i64[0] = 0x8000000080000000;
            v41.i64[1] = 0x8000000080000000;
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
          }
          else
          {
            float16x8_t v38 = (int8x16_t *)(v35 + 2);
            int v39 = v35[1];
            unint64_t v40 = (unint64_t)&v37[-2];
            v41.i64[0] = 0x8000000080000000;
            v41.i64[1] = 0x8000000080000000;
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            while ((unint64_t)v36 < v40)
            {
              float32x4_t v10 = (float32x4_t)vandq_s8(v38[1], v28);
              int32x4_t v45 = (int32x4_t)vandq_s8(*v38, v29);
              float16x8_t v38 = (int8x16_t *)((char *)v38 + 20);
              float16x8_t v47 = *v36;
              float16x8_t v46 = v36[1];
              float16x8_t v36 = (float16x8_t *)((char *)v36 + 30);
              float32x4_t v48 = vcvt_hight_f32_f16(v47);
              float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v47.i8);
              float32x4_t v49 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
              float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v46);
              float32x4_t v50 = (float32x4_t)vzip1q_s32(v45, v45);
              v50.i32[2] = v45.i32[0];
              float32x4_t v51 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)vdupq_laneq_s32(v45, 3), 8uLL);
              float32x4_t v52 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v52.i32[2] = v10.i32[0];
              int32x4_t v53 = (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL);
              float32x4_t v44 = vmlaq_f32(v44, (float32x4_t)v11, v52);
              float32x4_t v43 = vmlaq_f32(v43, v49, v51);
              float32x4_t v41 = vmlaq_f32(v41, (float32x4_t)v12, v50);
              float32x4_t v42 = vmlaq_f32(v42, v48, (float32x4_t)vzip1q_s32(v53, v53));
              v39 -= 5;
            }
            if (v39 >= 1)
            {
              float32x4_t v10 = (float32x4_t)vandq_s8(v38[1], v32);
              int32x4_t v54 = (int32x4_t)vandq_s8(*v38, v31);
              float16x8_t v55 = v36[1];
              float16x8_t v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v36->i8);
              float32x4_t v56 = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
              float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v55);
              float32x4_t v57 = (float32x4_t)vzip1q_s32(v54, v54);
              v57.i32[2] = v54.i32[0];
              float32x4_t v58 = (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)vdupq_laneq_s32(v54, 3), 8uLL);
              float32x4_t v59 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v59.i32[2] = v10.i32[0];
              int32x4_t v60 = (int32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL);
              float32x4_t v44 = vmlaq_f32(v44, (float32x4_t)v11, v59);
              float32x4_t v43 = vmlaq_f32(v43, v56, v58);
              float32x4_t v41 = vmlaq_f32(v41, (float32x4_t)v12, v57);
              float32x4_t v42 = vmlaq_f32(v42, vcvt_hight_f32_f16(*v36), (float32x4_t)vzip1q_s32(v60, v60));
            }
          }
          v9.i64[0] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL).u64[0];
          float32x4_t v61 = vaddq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 4uLL));
          int8x16_t v62 = (int8x16_t)vaddq_f32(v42, (float32x4_t)v9.u64[0]);
          *(float16x4_t *)v61.f32 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v62, (int8x16_t)vaddq_f32(v43, (float32x4_t)0), 8uLL), vaddq_f32(v61, (float32x4_t)vextq_s8((int8x16_t)v61, v62, 0xCuLL))));
          *(_DWORD *)uint64_t v33 = v61.i32[0];
          *(_WORD *)(v33 + 4) = vdup_lane_s16(*(int16x4_t *)v61.f32, 2).u16[0];
          v33 += 6;
          ++v34;
          float32x4_t v35 = (int *)((char *)v35 + v18);
          if (v34 == v24)
          {
            unint64_t v34 = v24;
            break;
          }
        }
      }
      if (v34 < a5) {
        break;
      }
LABEL_132:
      v14 += v15;
      if (++v13 == v30) {
        return result;
      }
    }
    while (1)
    {
      if (*v35 >= (int)v16) {
        int v63 = v16;
      }
      else {
        int v63 = *v35;
      }
      int v64 = v16 - v63;
      if (v35[1] >= v64) {
        LODWORD(v65) = v64;
      }
      else {
        LODWORD(v65) = v35[1];
      }
      if ((int)v65 < 1)
      {
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        v72.i64[0] = 0x8000000080000000;
        v72.i64[1] = 0x8000000080000000;
        goto LABEL_131;
      }
      int32x2_t v66 = (float16x8_t *)(v14 + 6 * *v35);
      unint64_t v67 = (unint64_t)&v66[-2] + 6 * (int)v65;
      int v68 = (int8x16_t *)(v35 + 2);
      if ((unint64_t)v66 >= v67)
      {
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        v72.i64[0] = 0x8000000080000000;
        v72.i64[1] = 0x8000000080000000;
        goto LABEL_66;
      }
      uint64_t v65 = (int)v65;
      v69.i64[0] = 0x8000000080000000;
      v69.i64[1] = 0x8000000080000000;
      v70.i64[0] = 0x8000000080000000;
      v70.i64[1] = 0x8000000080000000;
      v71.i64[0] = 0x8000000080000000;
      v71.i64[1] = 0x8000000080000000;
      v72.i64[0] = 0x8000000080000000;
      v72.i64[1] = 0x8000000080000000;
      do
      {
        unint64_t v73 = v19 - (char *)v68;
        if ((unint64_t)(v19 - (char *)v68) >= 0x20) {
          unint64_t v73 = 32;
        }
        if (v73 >= 0x20)
        {
          float32x4_t v10 = (float32x4_t)vandq_s8(v68[1], v28);
          int32x4_t v74 = (int32x4_t)vandq_s8(*v68, v29);
          goto LABEL_43;
        }
        if (!v65)
        {
          int32x4_t v74 = 0uLL;
LABEL_56:
          float32x4_t v10 = 0uLL;
          goto LABEL_43;
        }
        if (v65 < 4)
        {
          if (v65 == 1)
          {
            int32x4_t v74 = (int32x4_t)v68->u32[0];
          }
          else
          {
            uint64_t v83 = 0;
            if (v65 != 2) {
              LODWORD(v83) = v68->i32[2];
            }
            v74.i64[0] = v68->i64[0];
            v74.i64[1] = v83;
          }
          goto LABEL_56;
        }
        if (v65 == 4)
        {
          float32x4_t v10 = 0uLL;
        }
        else if (v65 == 5)
        {
          float32x4_t v10 = (float32x4_t)v68[1].u32[0];
        }
        else
        {
          int32x2_t v84 = 0;
          if (v65 != 6)
          {
            int32x2_t v85 = 0;
            if ((v65 & 1) == 0) {
              v85.i32[0] = v68[1].i32[3];
            }
            v10.i32[0] = v68[1].i32[2];
            int32x2_t v84 = vzip1_s32(*(int32x2_t *)v10.f32, v85);
          }
          v10.i64[0] = v68[1].i64[0];
          *(int32x2_t *)&v10.u32[2] = v84;
        }
        int32x4_t v74 = *(int32x4_t *)v68;
LABEL_43:
        int v68 = (int8x16_t *)((char *)v68 + 20);
        float16x8_t v76 = *v66;
        float16x8_t v75 = v66[1];
        int32x2_t v66 = (float16x8_t *)((char *)v66 + 30);
        float32x4_t v77 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
        float32x4_t v78 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v75);
        float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(v76);
        float32x4_t v79 = (float32x4_t)vzip1q_s32(v74, v74);
        v79.i32[2] = v74.i32[0];
        float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)vdupq_laneq_s32(v74, 3), 8uLL);
        float32x4_t v81 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
        v81.i32[2] = v10.i32[0];
        int32x4_t v82 = (int32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL);
        float32x4_t v9 = (float32x4_t)vzip1q_s32(v82, v82);
        float32x4_t v70 = vmlaq_f32(v70, (float32x4_t)v12, v9);
        float32x4_t v72 = vmlaq_f32(v72, (float32x4_t)v11, v81);
        float32x4_t v71 = vmlaq_f32(v71, v78, v80);
        float32x4_t v69 = vmlaq_f32(v69, v77, v79);
        v65 -= 5;
      }
      while ((unint64_t)v66 < v67);
      if ((int)v65 >= 1)
      {
LABEL_66:
        uint64_t v86 = 0;
        unint64_t v87 = v65;
        uint64_t v88 = 3 * v65;
        int v89 = 3 * v65;
        do
        {
          uint64_t v90 = v88 + v86;
          unint64_t v91 = v19 - (char *)v68;
          if ((unint64_t)(v19 - (char *)v68) >= 0x20) {
            unint64_t v91 = 32;
          }
          if (v91 < 0x20)
          {
            if (v87 < 4)
            {
              if (v90 == 3)
              {
                int32x4_t v94 = (int32x4_t)v68->u32[0];
              }
              else
              {
                if (v88 + v86 == 6) {
                  v10.i64[0] = 0;
                }
                else {
                  v10.i32[0] = v68->i32[2];
                }
                v94.i64[0] = v68->i64[0];
                v94.i64[1] = v10.i64[0];
              }
              int32x4_t v93 = 0uLL;
              int v68 = (int8x16_t *)((char *)v68 + 20);
              goto LABEL_93;
            }
            if (v87 == 4)
            {
              int32x4_t v93 = 0uLL;
            }
            else if (v87 == 5)
            {
              int32x4_t v93 = (int32x4_t)v68[1].u32[0];
            }
            else
            {
              if (v90 == 18)
              {
                int32x2_t v102 = 0;
              }
              else
              {
                int32x2_t v101 = 0;
                if ((v87 & 1) == 0) {
                  v101.i32[0] = v68[1].i32[3];
                }
                v10.i32[0] = v68[1].i32[2];
                int32x2_t v102 = vzip1_s32(*(int32x2_t *)v10.f32, v101);
              }
              v93.i64[0] = v68[1].i64[0];
              v93.u64[1] = (unint64_t)v102;
            }
            int32x4_t v94 = *(int32x4_t *)v68;
          }
          else
          {
            v9.f32[0] = fminf((float)(int)v87, 8.0);
            float32x4_t v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            float16x8_t v11 = (float16x8_t)vcgtq_f32(v92, (float32x4_t)xmmword_1850CD7B0);
            float16x8_t v12 = *(float16x8_t *)v68;
            int32x4_t v93 = (int32x4_t)vandq_s8(v68[1], (int8x16_t)vcgtq_f32(v92, (float32x4_t)xmmword_1850CD7C0));
            int32x4_t v94 = (int32x4_t)vandq_s8(*v68, (int8x16_t)v11);
          }
          int v68 = (int8x16_t *)((char *)v68 + 20);
          if (v87 >= 6)
          {
            float16x8_t v12 = v66[1];
            goto LABEL_73;
          }
LABEL_93:
          uint64_t v103 = v88 + v86;
          if ((v89 + v86) < 8)
          {
            if ((v89 + v86) < 4)
            {
              if (v103)
              {
                if (v103 == 1)
                {
                  v11.i16[0] = v66->i16[0];
                  v12.i64[0] = 0;
                }
                else
                {
                  v11.i32[0] = v66->i32[0];
                  v12.i16[0] = v66->i16[2];
                }
                *(int32x2_t *)v11.i8 = vzip1_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v12.i8);
              }
              else
              {
                v11.i64[0] = 0;
              }
              v11.i64[1] = 0;
            }
            else
            {
              if (v103 == 4)
              {
                v12.i64[0] = 0;
              }
              else if (v103 == 5)
              {
                v12.i16[0] = v66->i16[4];
              }
              else
              {
                if (v88 + v86 == 6) {
                  v11.i64[0] = 0;
                }
                else {
                  v11.i16[0] = v66->i16[6];
                }
                v12.i32[0] = v66->i32[2];
                *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v11.i8);
              }
              v11.i64[0] = v66->i64[0];
              v11.i64[1] = v12.i64[0];
            }
            float16x8_t v12 = 0uLL;
            goto LABEL_74;
          }
          if (v103 == 8)
          {
            float16x8_t v12 = 0uLL;
          }
          else if ((unint64_t)(v103 - 8) < 4)
          {
            if (v90 == 9)
            {
              v11.i16[0] = v66[1].i16[0];
              v12.i64[0] = 0;
            }
            else
            {
              v11.i32[0] = v66[1].i32[0];
              v12.i16[0] = v66[1].i16[2];
            }
            *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v12.i8);
          }
          else
          {
            if (v103 == 12)
            {
              v11.i64[0] = 0;
            }
            else if (v103 == 13)
            {
              v11.i16[0] = v66[1].i16[4];
            }
            else
            {
              __int16 v104 = 0;
              if ((v103 & 1) == 0) {
                __int16 v104 = v66[1].i16[7];
              }
              v11.i32[0] = v66[1].i32[2];
              v11.i16[2] = v66[1].i16[6];
              v11.i16[3] = v104;
            }
            v12.i64[0] = v66[1].i64[0];
            v12.i64[1] = v11.i64[0];
          }
LABEL_73:
          float16x8_t v11 = *v66;
LABEL_74:
          int32x2_t v66 = (float16x8_t *)((char *)v66 + 30);
          float32x4_t v95 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
          float16x8_t v12 = (float16x8_t)vcvt_hight_f32_f16(v12);
          float32x4_t v96 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
          float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v11);
          float32x4_t v97 = (float32x4_t)vzip1q_s32(v93, v93);
          v97.i32[2] = v93.i32[0];
          float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)vdupq_laneq_s32(v94, 3), 8uLL);
          float32x4_t v98 = (float32x4_t)vzip1q_s32(v94, v94);
          v98.i32[2] = v94.i32[0];
          int32x4_t v99 = (int32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 4uLL);
          float32x4_t v9 = (float32x4_t)vzip1q_s32(v99, v99);
          float32x4_t v70 = vmlaq_f32(v70, (float32x4_t)v11, v9);
          float32x4_t v69 = vmlaq_f32(v69, v96, v98);
          float32x4_t v72 = vmlaq_f32(v72, (float32x4_t)v12, v97);
          float32x4_t v71 = vmlaq_f32(v71, v95, v10);
          v86 -= 15;
          BOOL v100 = (uint64_t)v87 <= 5;
          v87 -= 5;
        }
        while (!v100);
      }
LABEL_131:
      v9.i64[0] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL).u64[0];
      float32x4_t v105 = vaddq_f32(v69, (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 4uLL));
      int8x16_t v106 = (int8x16_t)vaddq_f32(v70, (float32x4_t)v9.u64[0]);
      *(float16x4_t *)v105.f32 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v106, (int8x16_t)vaddq_f32(v71, (float32x4_t)0), 8uLL), vaddq_f32(v105, (float32x4_t)vextq_s8((int8x16_t)v105, v106, 0xCuLL))));
      *(_DWORD *)uint64_t v33 = v105.i32[0];
      *(_WORD *)(v33 + 4) = vdup_lane_s16(*(int16x4_t *)v105.f32, 2).u16[0];
      v33 += 6;
      ++v34;
      float32x4_t v35 = (int *)((char *)v35 + v18);
      if (v34 == a5) {
        goto LABEL_132;
      }
    }
  }
  return result;
}

int *resample_horizontal<half,half,1,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  if ((int)a5 >= 1 && a9 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a7;
    unint64_t v15 = *a8;
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = 4 * a2;
    uint64_t v18 = v17 + 8;
    unint64_t v19 = (char *)result + (v17 + 8) * a5;
    if (v15 >> 1 >= *(int *)&v19[-v17 - 4] + (uint64_t)*(int *)&v19[-v17 - 8]) {
      uint64_t v16 = *(int *)&v19[-v17 - 4] + (uint64_t)*(int *)&v19[-v17 - 8];
    }
    unint64_t v20 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5) {
      unint64_t v20 = 1;
    }
    unint64_t v21 = a5 - v20;
    int v22 = a2 > 7;
    unsigned int v23 = a2 & 7;
    if ((a2 & 7) != 0) {
      int v22 = 0;
    }
    else {
      unsigned int v23 = 8;
    }
    unsigned int v24 = (a2 + 8 * (v22 << 31 >> 31)) & 0xFFFFFFF8;
    *(float *)&a3 = (float)v23;
    uint64_t v25 = (2 * (_BYTE)v23 + 15) & 0x30;
    float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8) {
      a2 = 8;
    }
    *(float *)&a3 = (float)a2;
    uint64_t v27 = v25 + 2 * v24;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    int8x16_t v29 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v30 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_1850CD7B0);
    uint64_t v31 = a9;
    if (v21 <= 1) {
      unint64_t v21 = 1;
    }
    int8x16_t v32 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_1850CD7C0);
    int8x16_t v33 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_1850CD7B0);
    while (1)
    {
      unint64_t v34 = *(_WORD **)(a6 + 8 * v13);
      if (a5 <= v20)
      {
        unint64_t v35 = 0;
        float16x8_t v36 = result;
      }
      else
      {
        unint64_t v35 = 0;
        float16x8_t v36 = result;
        while (1)
        {
          float16x8_t v37 = (float16x4_t *)(v14 + 2 * *v36);
          float16x8_t v38 = (float16x4_t *)((char *)v37 + v27);
          if ((unint64_t)v37 + v27 > 2 * v16 + v14) {
            break;
          }
          if (v37 >= v38)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
          }
          else
          {
            int v39 = (int8x16_t *)(v36 + 2);
            int v40 = v36[1];
            unint64_t v41 = (unint64_t)&v38[-2];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            while ((unint64_t)v37 < v41)
            {
              int8x16_t v45 = *v39;
              int8x16_t v44 = v39[1];
              v39 += 2;
              float32x4_t v10 = (float32x4_t)vandq_s8(v45, v30);
              float32x4_t v9 = (float32x4_t)vandq_s8(v44, v29);
              float16x8_t v46 = *(float16x8_t *)v37->i8;
              v37 += 2;
              float32x4_t v12 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
              float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v46);
              float32x4_t v43 = vmlaq_f32(v43, (float32x4_t)v11, v9);
              float32x4_t v42 = vmlaq_f32(v42, v12, v10);
              v40 -= 8;
            }
            if (v40 >= 1)
            {
              float32x4_t v10 = (float32x4_t)vandq_s8(*v39, v33);
              float32x4_t v9 = (float32x4_t)vandq_s8(v39[1], v32);
              float32x4_t v12 = vcvtq_f32_f16(*v37);
              float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(*(float16x8_t *)v37->i8);
              float32x4_t v43 = vmlaq_f32(v43, (float32x4_t)v11, v9);
              float32x4_t v42 = vmlaq_f32(v42, v12, v10);
            }
          }
          _Q16 = vaddq_f32(v42, v43);
          _Q16.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q16, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q16, 1)));
          __asm { FCVT            H16, S16 }
          *v34++ = _Q16.i16[0];
          ++v35;
          float16x8_t v36 = (int *)((char *)v36 + v18);
          if (v35 == v21)
          {
            unint64_t v35 = v21;
            break;
          }
        }
      }
      if (v35 < a5) {
        break;
      }
LABEL_108:
      v14 += v15;
      if (++v13 == v31) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v52 = *v36;
      if ((int)v52 >= (int)v16) {
        int v53 = v16;
      }
      else {
        int v53 = *v36;
      }
      int v54 = v16 - v53;
      if (v36[1] >= v54) {
        int v55 = v54;
      }
      else {
        int v55 = v36[1];
      }
      if (v55 < 1)
      {
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        v61.i64[0] = 0x8000000080000000;
        v61.i64[1] = 0x8000000080000000;
        goto LABEL_107;
      }
      float32x4_t v56 = (float16x8_t *)(v14 + 2 * v52);
      unint64_t v57 = (unint64_t)&v56[-2] + 2 * v55;
      float32x4_t v58 = (int8x16_t *)(v36 + 2);
      v59.i64[0] = 0x8000000080000000;
      v59.i64[1] = 0x8000000080000000;
      if ((unint64_t)v56 < v57) {
        break;
      }
      LODWORD(v60) = v55;
      v61.i64[0] = 0x8000000080000000;
      v61.i64[1] = 0x8000000080000000;
LABEL_65:
      int v67 = v60;
      while (1)
      {
        unint64_t v68 = v19 - (char *)v58;
        if ((unint64_t)(v19 - (char *)v58) >= 0x20) {
          unint64_t v68 = 32;
        }
        if (v68 < 0x20)
        {
          if (v67 < 4)
          {
            if (v67 == 1)
            {
              float32x4_t v9 = (float32x4_t)v58->u32[0];
            }
            else
            {
              uint64_t v74 = 0;
              if (v67 != 2) {
                LODWORD(v74) = v58->i32[2];
              }
              v9.i64[0] = v58->i64[0];
              v9.i64[1] = v74;
            }
            float32x4_t v10 = 0uLL;
            goto LABEL_100;
          }
          if (v67 == 4)
          {
            float32x4_t v10 = 0uLL;
          }
          else if (v67 == 5)
          {
            float32x4_t v10 = (float32x4_t)v58[1].u32[0];
          }
          else
          {
            int32x2_t v71 = 0;
            if (v67 != 6)
            {
              int32x2_t v72 = 0;
              if ((v60 & 1) == 0) {
                v72.i32[0] = v58[1].i32[3];
              }
              v10.i32[0] = v58[1].i32[2];
              int32x2_t v71 = vzip1_s32(*(int32x2_t *)v10.f32, v72);
            }
            v10.i64[0] = v58[1].i64[0];
            *(int32x2_t *)&v10.u32[2] = v71;
          }
          float32x4_t v9 = *(float32x4_t *)v58;
        }
        else
        {
          v9.f32[0] = fminf((float)v67, 8.0);
          float32x4_t v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
          float16x8_t v11 = (float16x8_t)vcgtq_f32(v69, (float32x4_t)xmmword_1850CD7B0);
          float32x4_t v12 = *(float32x4_t *)v58;
          float32x4_t v10 = (float32x4_t)vandq_s8(v58[1], (int8x16_t)vcgtq_f32(v69, (float32x4_t)xmmword_1850CD7C0));
          float32x4_t v9 = (float32x4_t)vandq_s8(*v58, (int8x16_t)v11);
        }
        if (v67 <= 7) {
          break;
        }
        float16x8_t v70 = *v56++;
        v58 += 2;
        float32x4_t v12 = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
        float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v70);
        float32x4_t v61 = vmlaq_f32(v61, (float32x4_t)v11, v10);
        float32x4_t v59 = vmlaq_f32(v59, v12, v9);
        _VF = __OFSUB__(v67, 8);
        v67 -= 8;
        if ((v67 < 0) ^ _VF | (v67 == 0)) {
          goto LABEL_107;
        }
      }
      if (v67 >= 4)
      {
        if (v67 == 4)
        {
          v12.i64[0] = 0;
        }
        else if (v67 == 5)
        {
          v12.i16[0] = v56->i16[4];
        }
        else
        {
          int32x2_t v73 = 0;
          if (v67 != 6) {
            v73.i16[0] = v56->i16[6];
          }
          v12.i32[0] = v56->i32[2];
          *(int32x2_t *)v12.f32 = vzip1_s32(*(int32x2_t *)v12.f32, v73);
        }
        v11.i64[0] = v56->i64[0];
        v11.i64[1] = v12.i64[0];
        goto LABEL_106;
      }
LABEL_100:
      if (v67 == 1)
      {
        v11.i16[0] = v56->i16[0];
      }
      else
      {
        int32x2_t v75 = 0;
        if (v67 != 2) {
          v75.i16[0] = v56->i16[2];
        }
        v12.i32[0] = v56->i32[0];
        *(int32x2_t *)v11.i8 = vzip1_s32(*(int32x2_t *)v12.f32, v75);
      }
      v11.i64[1] = 0;
LABEL_106:
      float32x4_t v12 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
      float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v11);
      float32x4_t v61 = vmlaq_f32(v61, (float32x4_t)v11, v10);
      float32x4_t v59 = vmlaq_f32(v59, v12, v9);
LABEL_107:
      _Q16 = vaddq_f32(v59, v61);
      _Q16.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q16, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q16, 1)));
      __asm { FCVT            H16, S16 }
      *v34++ = _Q16.i16[0];
      ++v35;
      float16x8_t v36 = (int *)((char *)v36 + v18);
      if (v35 == a5) {
        goto LABEL_108;
      }
    }
    uint64_t v60 = v55;
    v61.i64[0] = 0x8000000080000000;
    v61.i64[1] = 0x8000000080000000;
    while (1)
    {
      unint64_t v62 = v19 - (char *)v58;
      if ((unint64_t)(v19 - (char *)v58) >= 0x20) {
        unint64_t v62 = 32;
      }
      if (v62 < 0x20)
      {
        if (v60)
        {
          if (v60 >= 4)
          {
            if (v60 == 4)
            {
              float32x4_t v10 = 0uLL;
            }
            else if (v60 == 5)
            {
              float32x4_t v10 = (float32x4_t)v58[1].u32[0];
            }
            else
            {
              int32x2_t v65 = 0;
              if (v60 != 6)
              {
                int32x2_t v66 = 0;
                if ((v55 & 1) == 0) {
                  v66.i32[0] = v58[1].i32[3];
                }
                v10.i32[0] = v58[1].i32[2];
                int32x2_t v65 = vzip1_s32(*(int32x2_t *)v10.f32, v66);
              }
              v10.i64[0] = v58[1].i64[0];
              *(int32x2_t *)&v10.u32[2] = v65;
            }
            float32x4_t v9 = *(float32x4_t *)v58;
            goto LABEL_42;
          }
          if (v60 == 1)
          {
            float32x4_t v9 = (float32x4_t)v58->u32[0];
          }
          else
          {
            uint64_t v64 = 0;
            if (v60 != 2) {
              LODWORD(v64) = v58->i32[2];
            }
            v9.i64[0] = v58->i64[0];
            v9.i64[1] = v64;
          }
        }
        else
        {
          float32x4_t v9 = 0uLL;
        }
        float32x4_t v10 = 0uLL;
      }
      else
      {
        float32x4_t v10 = (float32x4_t)vandq_s8(v58[1], v29);
        float32x4_t v9 = (float32x4_t)vandq_s8(*v58, v30);
      }
LABEL_42:
      v58 += 2;
      float16x8_t v63 = *v56++;
      float32x4_t v12 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
      float16x8_t v11 = (float16x8_t)vcvt_hight_f32_f16(v63);
      float32x4_t v61 = vmlaq_f32(v61, (float32x4_t)v11, v10);
      float32x4_t v59 = vmlaq_f32(v59, v12, v9);
      v60 -= 8;
      if ((unint64_t)v56 >= v57)
      {
        if ((int)v60 >= 1) {
          goto LABEL_65;
        }
        goto LABEL_107;
      }
    }
  }
  return result;
}

int16x4_t *resample_horizontal<unsigned short,int,4,true>(int16x4_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a6;
    uint64_t v12 = a6[1];
    unint64_t v13 = *a7;
    unint64_t v14 = a7[1];
    if (v13 >> 3 >= v14 >> 1) {
      unint64_t v15 = v14 >> 1;
    }
    else {
      unint64_t v15 = v13 >> 3;
    }
    uint64_t v16 = 2 * a2 + 8;
    uint64_t v17 = (char *)result + v16 * a4;
    if (v15 >= *(int *)&v17[-v16 + 4] + (uint64_t)*(int *)&v17[-v16]) {
      unint64_t v15 = *(int *)&v17[-v16 + 4] + (uint64_t)*(int *)&v17[-v16];
    }
    BOOL v18 = a2 > 3;
    LODWORD(v19) = (8 * (a2 & 3)) | 0x20;
    if ((a2 & 3) != 0) {
      uint64_t v19 = v19;
    }
    else {
      uint64_t v19 = 64;
    }
    if ((a2 & 3) != 0) {
      BOOL v18 = 0;
    }
    unint64_t v20 = ((v19 - 1) & 0xFFFFFFFFFFFFFFE0) + 32 * ((a2 >> 2) - v18);
    uint64_t v21 = a8;
    BOOL v24 = a2 != (__int16)a2 || a4 < 2 || a4 == 1;
    v25.i64[0] = 0x8000800080008000;
    v25.i64[1] = 0x8000800080008000;
    v26.i64[0] = 0x2000200020002000;
    v26.i64[1] = 0x2000200020002000;
    v27.i64[0] = 0xFFFF0000FFFFLL;
    v27.i64[1] = 0xFFFF0000FFFFLL;
    while (1)
    {
      float32x4_t v28 = *(int32x4_t **)(a5 + 8 * v10);
      unint64_t v29 = 0;
      if (v24)
      {
        int8x16_t v30 = result;
      }
      else
      {
        int8x16_t v30 = result;
        do
        {
          uint64_t v64 = v30->i32[0];
          int32x2_t v65 = (int8x16_t *)(v11 + 8 * v64);
          int32x2_t v66 = (int8x16_t *)((char *)v65 + v20);
          if ((unint64_t)v65->u64 + v20 > 8 * v15 + v11) {
            break;
          }
          if (v65 >= v66)
          {
            int32x4_t v71 = 0uLL;
            int32x4_t v72 = 0uLL;
            int32x4_t v73 = 0uLL;
            int32x4_t v74 = 0uLL;
            int32x4_t v75 = 0uLL;
          }
          else
          {
            int v67 = v30 + 1;
            int v68 = v30->i32[1];
            float32x4_t v69 = (int8x8_t *)(v12 + 2 * v64);
            unint64_t v70 = (unint64_t)&v66[-2];
            if ((unint64_t)v65 < v70)
            {
              int32x4_t v72 = 0uLL;
              int32x4_t v73 = 0uLL;
              int32x4_t v74 = 0uLL;
              int32x4_t v75 = 0uLL;
              int32x4_t v71 = 0uLL;
              do
              {
                int16x4_t v77 = *v67++;
                int16x4_t v8 = v77;
                int8x16_t v78 = *v65;
                int8x16_t v79 = v65[1];
                v65 += 2;
                int16x8_t v9 = (int16x8_t)veorq_s8(v79, v25);
                int16x8_t v80 = (int16x8_t)veorq_s8(v78, v25);
                int32x4_t v72 = vmlal_lane_s16(v72, *(int16x4_t *)v80.i8, v77, 0);
                int32x4_t v73 = vmlal_high_lane_s16(v73, v80, v77, 1);
                int32x4_t v74 = vmlal_lane_s16(v74, *(int16x4_t *)v9.i8, v77, 2);
                int32x4_t v75 = vmlal_high_lane_s16(v75, v9, v77, 3);
                int8x8_t v81 = *v69++;
                int32x4_t v71 = vmlal_s16(v71, (int16x4_t)veor_s8(v81, (int8x8_t)0x8000800080008000), v8);
                v68 -= 4;
              }
              while ((unint64_t)v65 < v70);
            }
            else
            {
              int32x4_t v71 = 0uLL;
              int32x4_t v72 = 0uLL;
              int32x4_t v73 = 0uLL;
              int32x4_t v74 = 0uLL;
              int32x4_t v75 = 0uLL;
            }
            if (v68 >= 1)
            {
              int16x4_t v8 = *v67;
              int16x8_t v9 = (int16x8_t)veorq_s8(v65[1], v25);
              int16x8_t v76 = (int16x8_t)veorq_s8(*v65, v25);
              int32x4_t v72 = vmlal_lane_s16(v72, *(int16x4_t *)v76.i8, *v67, 0);
              int32x4_t v73 = vmlal_high_lane_s16(v73, v76, *v67, 1);
              int32x4_t v74 = vmlal_lane_s16(v74, *(int16x4_t *)v9.i8, *v67, 2);
              int32x4_t v75 = vmlal_high_lane_s16(v75, v9, *v67, 3);
              int32x4_t v71 = vmlal_s16(v71, (int16x4_t)veor_s8(*v69, (int8x8_t)0x8000800080008000), *v67);
            }
          }
          *float32x4_t v28 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v73, v75), vaddq_s32(v72, v74)), v26), 0xEuLL), v27), (int32x4_t)0);
          v71.i32[0] = (vaddvq_s32(v71) + 536879104) >> 14;
          v28[1].i32[0] = vmax_s32(vmin_s32(*(int32x2_t *)v71.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
          float32x4_t v28 = (int32x4_t *)((char *)v28 + 20);
          ++v29;
          int8x16_t v30 = (int16x4_t *)((char *)v30 + v16);
          if (a4 < 2) {
            break;
          }
        }
        while ((unint64_t)a4 - 1 > v29);
      }
      if (v29 < a4) {
        break;
      }
LABEL_94:
      v11 += v13;
      v12 += v14;
      if (++v10 == v21) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v31 = v30->i32[0];
      if ((int)v31 >= (int)v15) {
        __int32 v32 = v15;
      }
      else {
        __int32 v32 = v30->i32[0];
      }
      int v33 = v15 - v32;
      if (v30->i32[1] < v33) {
        int v33 = v30->i32[1];
      }
      if (v33 < 1)
      {
        int32x4_t v43 = 0uLL;
        int32x4_t v39 = 0uLL;
        int32x4_t v40 = 0uLL;
        int32x4_t v41 = 0uLL;
        int32x4_t v42 = 0uLL;
        goto LABEL_91;
      }
      unint64_t v34 = (int8x16_t *)(v11 + 8 * v31);
      unint64_t v35 = (unint64_t)&v34[-2] + 8 * v33;
      float16x8_t v36 = (int8x8_t *)(v12 + 2 * v31);
      float16x8_t v37 = (__int16 *)&v30[1];
      if ((unint64_t)v34 >= v35)
      {
        int32x4_t v39 = 0uLL;
        int32x4_t v40 = 0uLL;
        int32x4_t v41 = 0uLL;
        int32x4_t v42 = 0uLL;
        int32x4_t v43 = 0uLL;
        goto LABEL_54;
      }
      uint64_t v38 = v33;
      int32x4_t v39 = 0uLL;
      int32x4_t v40 = 0uLL;
      int32x4_t v41 = 0uLL;
      int32x4_t v42 = 0uLL;
      int32x4_t v43 = 0uLL;
      do
      {
        unint64_t v44 = v17 - (char *)v37;
        if ((unint64_t)(v17 - (char *)v37) >= 8) {
          unint64_t v44 = 8;
        }
        if (v44 < 8)
        {
          if (v38)
          {
            if (v38 == 1)
            {
              v8.i16[0] = *v37;
            }
            else
            {
              if (v38 == 2)
              {
                int16x4_t v49 = 0;
              }
              else
              {
                if (v33) {
                  __int32 v50 = 0;
                }
                else {
                  __int32 v50 = (unsigned __int16)v37[3];
                }
                v49.i32[0] = (unsigned __int16)v37[2];
                v49.i32[1] = v50;
              }
              v9.i16[0] = *v37;
              v9.i16[2] = v37[1];
              int16x4_t v8 = vuzp1_s16(*(int16x4_t *)v9.i8, v49);
            }
          }
          else
          {
            int16x4_t v8 = 0;
          }
        }
        else
        {
          int16x4_t v8 = *(int16x4_t *)v37;
        }
        v37 += 4;
        int8x16_t v45 = *v34;
        int8x16_t v46 = v34[1];
        v34 += 2;
        int16x8_t v9 = (int16x8_t)veorq_s8(v46, v25);
        int16x8_t v47 = (int16x8_t)veorq_s8(v45, v25);
        int32x4_t v39 = vmlal_lane_s16(v39, *(int16x4_t *)v47.i8, v8, 0);
        int32x4_t v40 = vmlal_high_lane_s16(v40, v47, v8, 1);
        int32x4_t v41 = vmlal_lane_s16(v41, *(int16x4_t *)v9.i8, v8, 2);
        int32x4_t v42 = vmlal_high_lane_s16(v42, v9, v8, 3);
        int8x8_t v48 = *v36++;
        int32x4_t v43 = vmlal_s16(v43, (int16x4_t)veor_s8(v48, (int8x8_t)0x8000800080008000), v8);
        v38 -= 4;
      }
      while ((unint64_t)v34 < v35);
      if ((int)v38 >= 1) {
        break;
      }
LABEL_91:
      int32x4_t v63 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v40, v42), vaddq_s32(v39, v41)), v26), 0xEuLL), v27), (int32x4_t)0);
      *float32x4_t v28 = v63;
      v63.i32[0] = (vaddvq_s32(v43) + 536879104) >> 14;
      v28[1].i32[0] = vmax_s32(vmin_s32(*(int32x2_t *)v63.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
      float32x4_t v28 = (int32x4_t *)((char *)v28 + 20);
      ++v29;
      int8x16_t v30 = (int16x4_t *)((char *)v30 + v16);
      if (v29 == a4) {
        goto LABEL_94;
      }
    }
    int v33 = v38;
LABEL_54:
    int v51 = v33;
    while (1)
    {
      unint64_t v52 = v17 - (char *)v37;
      if ((unint64_t)(v17 - (char *)v37) >= 8) {
        unint64_t v52 = 8;
      }
      if (v52 < 8)
      {
        if (v51 == 1)
        {
          unsigned __int16 v58 = *v37;
          v37 += 4;
          uint64_t v59 = 0;
          int16x4_t v8 = (int16x4_t)v58;
          v53.i64[0] = v34->i64[0];
          goto LABEL_68;
        }
        if (v51 == 2)
        {
          int16x4_t v60 = 0;
        }
        else
        {
          if (v33) {
            __int32 v61 = 0;
          }
          else {
            __int32 v61 = (unsigned __int16)v37[3];
          }
          v60.i32[0] = (unsigned __int16)v37[2];
          v60.i32[1] = v61;
        }
        v9.i16[0] = *v37;
        v9.i16[2] = v37[1];
        int16x4_t v8 = vuzp1_s16(*(int16x4_t *)v9.i8, v60);
      }
      else
      {
        int16x4_t v8 = *(int16x4_t *)v37;
      }
      v37 += 4;
      if (v51 >= 4)
      {
        int16x8_t v9 = (int16x8_t)v34[1];
LABEL_61:
        int8x16_t v53 = *v34;
        goto LABEL_62;
      }
      if ((v51 & 0x3FFFFFFE) != 0)
      {
        int16x8_t v9 = 0uLL;
        if (v51 != 2) {
          v9.i64[0] = v34[1].i64[0];
        }
        goto LABEL_61;
      }
      v53.i64[0] = v34->i64[0];
      if (v51 == 1) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = v34->i64[1];
      }
LABEL_68:
      v53.i64[1] = v59;
      int16x8_t v9 = 0uLL;
LABEL_62:
      int16x8_t v54 = (int16x8_t)veorq_s8(v53, v25);
      int32x4_t v39 = vmlal_lane_s16(v39, *(int16x4_t *)v54.i8, v8, 0);
      int32x4_t v40 = vmlal_high_lane_s16(v40, v54, v8, 1);
      int32x4_t v41 = vmlal_lane_s16(v41, (int16x4_t)veor_s8(*(int8x8_t *)v9.i8, (int8x8_t)0x8000800080008000), v8, 2);
      int16x4_t v55 = (int16x4_t)veor_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int8x8_t)0x8000800080008000);
      int32x4_t v42 = vmlal_lane_s16(v42, v55, v8, 3);
      if (v51 <= 3)
      {
        if (v51)
        {
          if (v51 == 1)
          {
            v55.i16[0] = v36->i16[0];
          }
          else
          {
            if (v51 == 2) {
              int16x4_t v62 = 0;
            }
            else {
              int16x4_t v62 = (int16x4_t)v36->u16[2];
            }
            v9.i16[0] = v36->i16[0];
            v9.i16[2] = v36->i16[1];
            int16x4_t v55 = vuzp1_s16(*(int16x4_t *)v9.i8, v62);
          }
        }
        else
        {
          int16x4_t v55 = 0;
        }
        int32x4_t v43 = vmlal_s16(v43, (int16x4_t)veor_s8((int8x8_t)v55, (int8x8_t)0x8000800080008000), v8);
        goto LABEL_91;
      }
      v34 += 2;
      int8x8_t v56 = *v36++;
      int32x4_t v43 = vmlal_s16(v43, (int16x4_t)veor_s8(v56, (int8x8_t)0x8000800080008000), v8);
      BOOL v57 = __OFSUB__(v51, 4);
      v51 -= 4;
      if ((v51 < 0) ^ v57 | (v51 == 0)) {
        goto LABEL_91;
      }
    }
  }
  return result;
}

uint64_t resample_horizontal<unsigned short,int,3,true>(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int8x16_t v131 = (int *)result;
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a6;
    uint64_t v15 = a6[1];
    unint64_t v128 = a7[1];
    unint64_t v129 = *a7;
    unint64_t v16 = v129 / 6;
    if (v129 / 6 >= v128 >> 1) {
      unint64_t v16 = v128 >> 1;
    }
    unint64_t v17 = a4;
    uint64_t v18 = 2 * a2 + 8;
    uint64_t v19 = result + v18 * a4;
    unint64_t v20 = *(int *)(v19 - v18 + 4) + (uint64_t)*(int *)(v19 - v18);
    if (v16 < v20) {
      unint64_t v20 = v16;
    }
    unint64_t v21 = 1;
    if (a2 <= 3) {
      unint64_t v21 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    unint64_t v22 = a4 - v21;
    if (a2 % 5) {
      unsigned int v23 = a2 % 5;
    }
    else {
      unsigned int v23 = 5;
    }
    if (a2 % 5) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = a2 > 4;
    }
    uint64_t v25 = ((6 * v23 + 31) & 0x3FFFFFFE0) + 30 * (a2 / 5 - v24);
    int16x8_t v26 = vdupq_n_s16(v23);
    if (a2 >= 5) {
      unsigned int v27 = 5;
    }
    else {
      unsigned int v27 = a2;
    }
    int8x16_t v28 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v27), (uint16x8_t)xmmword_1850CD7D0);
    BOOL v29 = a2 == (__int16)a2 && a4 > v21;
    char v30 = !v29;
    char v127 = v30;
    if (v22 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v22;
    }
    v32.i64[0] = 0x8000800080008000;
    v32.i64[1] = 0x8000800080008000;
    v33.i64[0] = 0x2000200020002000;
    v33.i64[1] = 0x2000200020002000;
    v34.i64[0] = 0xFFFF0000FFFFLL;
    v34.i64[1] = 0xFFFF0000FFFFLL;
    int8x16_t v35 = (int8x16_t)vcgtq_s16(v26, (int16x8_t)xmmword_1850CD7D0);
    while (1)
    {
      float16x8_t v36 = *(int32x4_t **)(a5 + 8 * v13);
      if (v127)
      {
        unint64_t v37 = 0;
        uint64_t v38 = v131;
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v38 = v131;
        while (1)
        {
          uint64_t v39 = *v38;
          int32x4_t v40 = (int8x16_t *)(v14 + 6 * (int)v39);
          int32x4_t v41 = (int8x16_t *)((char *)v40 + v25);
          if ((unint64_t)v40->u64 + v25 > 6 * v20 + v14) {
            break;
          }
          if (v40 >= v41)
          {
            int32x4_t v46 = 0uLL;
            int32x4_t v47 = 0uLL;
            int32x4_t v48 = 0uLL;
            int32x4_t v49 = 0uLL;
            int32x4_t v50 = 0uLL;
            int32x4_t v51 = 0uLL;
          }
          else
          {
            int32x4_t v42 = (int8x16_t *)(v38 + 2);
            int v43 = v38[1];
            unint64_t v44 = (int8x16_t *)(v15 + 2 * v39);
            unint64_t v45 = (unint64_t)&v41[-3];
            if ((unint64_t)v40 < v45)
            {
              int32x4_t v48 = 0uLL;
              int32x4_t v49 = 0uLL;
              int32x4_t v50 = 0uLL;
              int32x4_t v51 = 0uLL;
              int32x4_t v46 = 0uLL;
              int32x4_t v47 = 0uLL;
              do
              {
                int8x16_t v69 = *v42;
                int32x4_t v42 = (int8x16_t *)((char *)v42 + 10);
                int16x8_t v70 = (int16x8_t)vandq_s8(v69, v28);
                int8x16_t v71 = *v40;
                int8x16_t v72 = v40[1];
                int32x4_t v40 = (int8x16_t *)((char *)v40 + 30);
                int16x8_t v10 = (int16x8_t)veorq_s8(v72, v32);
                int16x8_t v73 = (int16x8_t)veorq_s8(v71, v32);
                int16x8_t v11 = (int16x8_t)vqtbl1q_s8((int8x16_t)v70, (int8x16_t)xmmword_1850CD7E0);
                int16x8_t v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)v70, (int8x16_t)xmmword_1850CD7F0);
                int32x4_t v51 = vmlal_high_s16(v51, v10, v11);
                int32x4_t v49 = vmlal_high_s16(v49, v73, v12);
                int32x4_t v50 = vmlal_s16(v50, *(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
                int8x16_t v74 = *v44;
                unint64_t v44 = (int8x16_t *)((char *)v44 + 10);
                v10.i64[0] = v74.i64[0];
                int32x4_t v48 = vmlal_s16(v48, *(int16x4_t *)v73.i8, *(int16x4_t *)v12.i8);
                int16x8_t v9 = (int16x8_t)veorq_s8(v74, v32);
                int32x4_t v47 = vmlal_high_s16(v47, v9, v70);
                int32x4_t v46 = vmlal_s16(v46, *(int16x4_t *)v9.i8, *(int16x4_t *)v70.i8);
                v43 -= 5;
              }
              while ((unint64_t)v40 < v45);
            }
            else
            {
              int32x4_t v46 = 0uLL;
              int32x4_t v47 = 0uLL;
              int32x4_t v48 = 0uLL;
              int32x4_t v49 = 0uLL;
              int32x4_t v50 = 0uLL;
              int32x4_t v51 = 0uLL;
            }
            if (v43 >= 1)
            {
              if (v43 >= 9)
              {
                int8x16_t v52 = *v42;
                int32x4_t v42 = (int8x16_t *)((char *)v42 + 10);
                int16x8_t v53 = (int16x8_t)vandq_s8(v52, v28);
                int8x16_t v54 = *v40;
                int8x16_t v55 = v40[1];
                int32x4_t v40 = (int8x16_t *)((char *)v40 + 30);
                int16x8_t v56 = (int16x8_t)veorq_s8(v55, v32);
                int16x8_t v57 = (int16x8_t)veorq_s8(v54, v32);
                int16x8_t v58 = (int16x8_t)vqtbl1q_s8((int8x16_t)v53, (int8x16_t)xmmword_1850CD7E0);
                int16x8_t v59 = (int16x8_t)vqtbl1q_s8((int8x16_t)v53, (int8x16_t)xmmword_1850CD7F0);
                int32x4_t v51 = vmlal_high_s16(v51, v56, v58);
                int32x4_t v49 = vmlal_high_s16(v49, v57, v59);
                int32x4_t v50 = vmlal_s16(v50, *(int16x4_t *)v56.i8, *(int16x4_t *)v58.i8);
                int32x4_t v48 = vmlal_s16(v48, *(int16x4_t *)v57.i8, *(int16x4_t *)v59.i8);
                int8x16_t v60 = *v44;
                unint64_t v44 = (int8x16_t *)((char *)v44 + 10);
                int16x8_t v61 = (int16x8_t)veorq_s8(v60, v32);
                int32x4_t v47 = vmlal_high_s16(v47, v61, v53);
                int32x4_t v46 = vmlal_s16(v46, *(int16x4_t *)v61.i8, *(int16x4_t *)v53.i8);
              }
              int16x8_t v62 = (int16x8_t)vandq_s8(*v42, v35);
              int16x8_t v10 = (int16x8_t)veorq_s8(v40[1], v32);
              int16x8_t v63 = (int16x8_t)veorq_s8(*v40, v32);
              int16x8_t v11 = (int16x8_t)vqtbl1q_s8((int8x16_t)v62, (int8x16_t)xmmword_1850CD7E0);
              int16x8_t v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)v62, (int8x16_t)xmmword_1850CD7F0);
              int32x4_t v51 = vmlal_high_s16(v51, v10, v11);
              int32x4_t v49 = vmlal_high_s16(v49, v63, v12);
              int32x4_t v50 = vmlal_s16(v50, *(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
              int32x4_t v48 = vmlal_s16(v48, *(int16x4_t *)v63.i8, *(int16x4_t *)v12.i8);
              int16x8_t v9 = (int16x8_t)veorq_s8(*v44, v32);
              int32x4_t v47 = vmlal_high_s16(v47, v9, v62);
              int32x4_t v46 = vmlal_s16(v46, *(int16x4_t *)v9.i8, *(int16x4_t *)v62.i8);
            }
          }
          int16x8_t v8 = (int16x8_t)vextq_s8((int8x16_t)v50, (int8x16_t)v51, 4uLL);
          int32x4_t v64 = vaddq_s32((int32x4_t)v8, v48);
          int8x16_t v65 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL).u64[0], v49);
          int32x4_t v66 = (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL);
          v66.i32[2] = 0;
          int8x16_t v67 = (int8x16_t)vaddq_s32(v66, v46);
          int32x4_t v68 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(v64, (int32x4_t)vextq_s8((int8x16_t)v64, v65, 0xCuLL)), vaddq_s32((int32x4_t)vextq_s8(v65, (int8x16_t)v50, 8uLL), v33)), 0xEuLL), v34), (int32x4_t)0);
          *(int32x2_t *)v67.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v67.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)), vdup_lane_s32(*(int32x2_t *)v67.i8, 1));
          v67.i32[0] = (v67.i32[0] + 536879104) >> 14;
          v68.i32[3] = vmax_s32(vmin_s32(*(int32x2_t *)v67.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
          *v36++ = v68;
          ++v37;
          uint64_t v38 = (int *)((char *)v38 + v18);
          if (v37 == v31)
          {
            unint64_t v37 = v31;
            break;
          }
        }
      }
      if (v37 < v17) {
        break;
      }
LABEL_198:
      v14 += v129;
      v15 += v128;
      ++v13;
      uint64_t result = 6;
      if (v13 == a8) {
        return result;
      }
    }
    while (1)
    {
      LODWORD(v75) = v38[1];
      uint64_t v76 = *v38;
      if ((int)v76 >= (int)v20) {
        int v77 = v20;
      }
      else {
        int v77 = *v38;
      }
      int v78 = v20 - v77;
      if ((int)v75 >= v78) {
        LODWORD(v75) = v78;
      }
      if ((int)v75 < 1)
      {
        int32x4_t v87 = 0uLL;
        int32x4_t v88 = 0uLL;
        int32x4_t v83 = 0uLL;
        int32x4_t v84 = 0uLL;
        int32x4_t v85 = 0uLL;
        int32x4_t v86 = 0uLL;
        goto LABEL_197;
      }
      int8x16_t v79 = (int8x16_t *)(v14 + 6 * v76);
      unint64_t v80 = (unint64_t)&v79[-3] + 6 * (int)v75;
      int8x8_t v81 = (__int16 *)(v15 + 2 * v76);
      int32x4_t v82 = (int8x16_t *)(v38 + 2);
      if ((unint64_t)v79 >= v80)
      {
        int32x4_t v83 = 0uLL;
        int32x4_t v84 = 0uLL;
        int32x4_t v85 = 0uLL;
        int32x4_t v86 = 0uLL;
        int32x4_t v87 = 0uLL;
        int32x4_t v88 = 0uLL;
        goto LABEL_109;
      }
      uint64_t v75 = (int)v75;
      int32x4_t v83 = 0uLL;
      int32x4_t v84 = 0uLL;
      int32x4_t v85 = 0uLL;
      int32x4_t v86 = 0uLL;
      int32x4_t v87 = 0uLL;
      int32x4_t v88 = 0uLL;
      do
      {
        unint64_t v89 = v19 - (void)v82;
        if ((unint64_t)(v19 - (void)v82) >= 0x10) {
          unint64_t v89 = 16;
        }
        if (v89 >= 0x10)
        {
          int16x8_t v8 = (int16x8_t)vandq_s8(*v82, v28);
LABEL_58:
          unsigned int v90 = v75;
          goto LABEL_59;
        }
        if (v75)
        {
          if (v75 < 4)
          {
            if (v75 == 1)
            {
              v8.i16[0] = v82->i16[0];
            }
            else
            {
              if (v75 == 2) {
                int16x4_t v98 = 0;
              }
              else {
                int16x4_t v98 = (int16x4_t)v82->u16[2];
              }
              v9.i16[0] = v82->i16[0];
              v9.i16[2] = v82->i16[1];
              *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v98);
            }
            v8.i64[1] = 0;
          }
          else
          {
            if (v75 == 4)
            {
              v9.i64[0] = 0;
            }
            else if (v75 == 5)
            {
              v9.i16[0] = v82->i16[4];
            }
            else
            {
              if (v75 == 6)
              {
                int16x4_t v99 = 0;
              }
              else
              {
                if (v75) {
                  __int32 v100 = 0;
                }
                else {
                  __int32 v100 = v82->u16[7];
                }
                v99.i32[0] = v82->u16[6];
                v99.i32[1] = v100;
              }
              v9.i16[0] = v82->i16[4];
              v9.i16[2] = v82->i16[5];
              *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v99);
            }
            v8.i64[0] = v82->i64[0];
            v8.i64[1] = v9.i64[0];
          }
          goto LABEL_58;
        }
        unsigned int v90 = 0;
        int16x8_t v8 = 0uLL;
LABEL_59:
        int8x16_t v91 = *v79;
        int8x16_t v92 = v79[1];
        if (v90)
        {
          if (v90 < 4)
          {
            if (v75)
            {
              if (v75 == 1)
              {
                v11.i16[0] = *v81;
              }
              else
              {
                if (v90 == 2) {
                  int16x4_t v94 = 0;
                }
                else {
                  int16x4_t v94 = (int16x4_t)(unsigned __int16)v81[2];
                }
                v12.i16[0] = *v81;
                v12.i16[2] = v81[1];
                *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v94);
              }
            }
            else
            {
              v11.i64[0] = 0;
            }
            v11.i64[1] = 0;
          }
          else
          {
            if (v75 == 4)
            {
              v12.i64[0] = 0;
            }
            else if (v75 == 5)
            {
              v12.i16[0] = v81[4];
            }
            else
            {
              if (v90 == 6)
              {
                int16x4_t v93 = 0;
              }
              else
              {
                if (v75) {
                  __int32 v95 = 0;
                }
                else {
                  __int32 v95 = (unsigned __int16)v81[7];
                }
                v93.i32[0] = (unsigned __int16)v81[6];
                v93.i32[1] = v95;
              }
              v12.i16[0] = v81[4];
              v12.i16[2] = v81[5];
              *(int16x4_t *)v12.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v93);
            }
            v11.i64[0] = *(void *)v81;
            v11.i64[1] = v12.i64[0];
          }
        }
        else
        {
          int16x8_t v11 = 0uLL;
        }
        int32x4_t v82 = (int8x16_t *)((char *)v82 + 10);
        int8x16_t v79 = (int8x16_t *)((char *)v79 + 30);
        int16x8_t v10 = (int16x8_t)veorq_s8(v92, v32);
        int16x8_t v96 = (int16x8_t)veorq_s8(v91, v32);
        int16x8_t v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7E0);
        int16x8_t v97 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7F0);
        int32x4_t v84 = vmlal_high_s16(v84, v96, v97);
        int32x4_t v86 = vmlal_high_s16(v86, v10, v12);
        int32x4_t v85 = vmlal_s16(v85, *(int16x4_t *)v10.i8, *(int16x4_t *)v12.i8);
        int32x4_t v83 = vmlal_s16(v83, *(int16x4_t *)v96.i8, *(int16x4_t *)v97.i8);
        v81 += 5;
        int16x8_t v9 = (int16x8_t)veorq_s8((int8x16_t)v11, v32);
        v75 -= 5;
        int32x4_t v88 = vmlal_high_s16(v88, v9, v8);
        int32x4_t v87 = vmlal_s16(v87, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
      }
      while ((unint64_t)v79 < v80);
      if ((int)v75 >= 1)
      {
LABEL_109:
        uint64_t v101 = 0;
        unint64_t v102 = v75;
        uint64_t v103 = 3 * v75;
        int v104 = v75 << 16;
        int v105 = 3 * v75;
        do
        {
          unint64_t v106 = v19 - (void)v82;
          if ((unint64_t)(v19 - (void)v82) >= 0x10) {
            unint64_t v106 = 16;
          }
          if (v106 < 0x10)
          {
            if (v102 < 4)
            {
              if (v103 + v101 == 3)
              {
                v8.i16[0] = v82->i16[0];
              }
              else
              {
                if (v103 + v101 == 6) {
                  int16x4_t v112 = 0;
                }
                else {
                  int16x4_t v112 = (int16x4_t)v82->u16[2];
                }
                v9.i16[0] = v82->i16[0];
                v9.i16[2] = v82->i16[1];
                *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v112);
              }
              v8.i64[1] = 0;
              int32x4_t v82 = (int8x16_t *)((char *)v82 + 10);
              goto LABEL_150;
            }
            if (v102 == 4)
            {
              v9.i64[0] = 0;
            }
            else if (v102 == 5)
            {
              v9.i16[0] = v82->i16[4];
            }
            else
            {
              if (v103 + v101 == 18)
              {
                int16x4_t v120 = 0;
              }
              else
              {
                if (v102) {
                  __int32 v114 = 0;
                }
                else {
                  __int32 v114 = v82->u16[7];
                }
                v120.i32[0] = v82->u16[6];
                v120.i32[1] = v114;
              }
              v9.i16[0] = v82->i16[4];
              v9.i16[2] = v82->i16[5];
              *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v120);
            }
            v8.i64[0] = v82->i64[0];
            v8.i64[1] = v9.i64[0];
          }
          else
          {
            unsigned int v107 = v104 >> 16;
            if (v104 >> 16 >= 8) {
              unsigned int v107 = 8;
            }
            int16x8_t v9 = *(int16x8_t *)v82;
            int16x8_t v8 = (int16x8_t)vandq_s8(*v82, (int8x16_t)vcgtq_s16(vdupq_n_s16(v107), (int16x8_t)xmmword_1850CD7D0));
          }
          int32x4_t v82 = (int8x16_t *)((char *)v82 + 10);
          if (v102 >= 6)
          {
            int8x16_t v108 = v79[1];
            goto LABEL_118;
          }
LABEL_150:
          uint64_t v116 = v103 + v101;
          if ((v105 + v101) < 8)
          {
            if ((v105 + v101) < 4)
            {
              if (v116)
              {
                if (v116 == 1)
                {
                  int16x4_t v117 = 0;
                  v9.i64[0] = v79->u16[0];
                }
                else
                {
                  v9.i16[0] = v79->i16[0];
                  v9.i16[2] = v79->i16[1];
                  int16x4_t v117 = (int16x4_t)v79->u16[2];
                }
                *(int16x4_t *)v109.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v117);
              }
              else
              {
                v109.i64[0] = 0;
              }
              v109.i64[1] = 0;
            }
            else
            {
              if (v116 == 4)
              {
                v9.i64[0] = 0;
              }
              else if (v116 == 5)
              {
                v9.i16[0] = v79->i16[4];
              }
              else
              {
                if (v103 + v101 == 6) {
                  int16x4_t v119 = 0;
                }
                else {
                  int16x4_t v119 = (int16x4_t)v79->u16[6];
                }
                v10.i16[0] = v79->i16[4];
                v10.i16[2] = v79->i16[5];
                *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v119);
              }
              v109.i64[0] = v79->i64[0];
              v109.i64[1] = v9.i64[0];
            }
            int8x16_t v108 = 0uLL;
            goto LABEL_119;
          }
          if (v116 == 8)
          {
            int8x16_t v108 = 0uLL;
          }
          else if ((unint64_t)(v116 - 8) < 4)
          {
            if (v103 + v101 == 9)
            {
              v11.i64[0] = 0;
              uint64_t v118 = v79[1].u16[0];
            }
            else
            {
              LOWORD(v118) = v79[1].i16[0];
              WORD2(v118) = v79[1].i16[1];
              v11.i64[0] = v79[1].u16[2];
            }
            v108.i64[1] = 0;
            v108.i16[0] = v118;
            v108.i16[1] = WORD2(v118);
            v108.i16[2] = v11.i16[0];
            v108.i16[3] = v11.i16[2];
          }
          else
          {
            if (v116 == 12)
            {
              v10.i64[0] = 0;
            }
            else if (v116 == 13)
            {
              v10.i16[0] = v79[1].i16[4];
            }
            else
            {
              if (v116) {
                __int16 v121 = 0;
              }
              else {
                __int16 v121 = v79[1].i16[7];
              }
              v10.i32[0] = v79[1].i32[2];
              v10.i16[2] = v79[1].i16[6];
              v10.i16[3] = v121;
            }
            v108.i64[0] = v79[1].i64[0];
            v108.i64[1] = v10.i64[0];
          }
LABEL_118:
          int8x16_t v109 = *v79;
LABEL_119:
          if (v102 < 8)
          {
            if (v102 < 4)
            {
              if (v103 + v101 == 3)
              {
                v11.i16[0] = *v81;
              }
              else
              {
                if (v103 + v101 == 6) {
                  int16x4_t v113 = 0;
                }
                else {
                  int16x4_t v113 = (int16x4_t)(unsigned __int16)v81[2];
                }
                v12.i16[0] = *v81;
                v12.i16[2] = v81[1];
                *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v113);
              }
              v11.i64[1] = 0;
            }
            else
            {
              if (v102 == 4)
              {
                v12.i64[0] = 0;
              }
              else if (v102 == 5)
              {
                v12.i16[0] = v81[4];
              }
              else
              {
                if (v103 + v101 == 18) {
                  int16x4_t v115 = 0;
                }
                else {
                  int16x4_t v115 = (int16x4_t)(unsigned __int16)v81[6];
                }
                v12.i16[0] = v81[4];
                v12.i16[2] = v81[5];
                *(int16x4_t *)v12.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v115);
              }
              v11.i64[0] = *(void *)v81;
              v11.i64[1] = v12.i64[0];
            }
          }
          else
          {
            int16x8_t v11 = *(int16x8_t *)v81;
          }
          int8x16_t v79 = (int8x16_t *)((char *)v79 + 30);
          int16x8_t v10 = (int16x8_t)veorq_s8(v109, v32);
          int16x8_t v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7E0);
          int16x8_t v110 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7F0);
          int16x8_t v111 = (int16x8_t)veorq_s8(v108, v32);
          int32x4_t v84 = vmlal_high_s16(v84, v10, v110);
          int32x4_t v86 = vmlal_high_s16(v86, v111, v12);
          int32x4_t v85 = vmlal_s16(v85, *(int16x4_t *)v111.i8, *(int16x4_t *)v12.i8);
          int32x4_t v83 = vmlal_s16(v83, *(int16x4_t *)v10.i8, *(int16x4_t *)v110.i8);
          v81 += 5;
          int16x8_t v9 = (int16x8_t)veorq_s8((int8x16_t)v11, v32);
          v101 -= 15;
          v104 -= 327680;
          int32x4_t v88 = vmlal_high_s16(v88, v9, v8);
          int32x4_t v87 = vmlal_s16(v87, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
          BOOL v29 = (uint64_t)v102 <= 5;
          v102 -= 5;
        }
        while (!v29);
      }
LABEL_197:
      int16x8_t v8 = (int16x8_t)vextq_s8((int8x16_t)v85, (int8x16_t)v86, 4uLL);
      int32x4_t v122 = vaddq_s32((int32x4_t)v8, v83);
      int8x16_t v123 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL).u64[0], v84);
      int32x4_t v124 = (int32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v88, 0xCuLL);
      v124.i32[2] = 0;
      int8x16_t v125 = (int8x16_t)vaddq_s32(v124, v87);
      int32x4_t v126 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v122, v123, 0xCuLL), v122), vaddq_s32((int32x4_t)vextq_s8(v123, (int8x16_t)v85, 8uLL), v33)), 0xEuLL), v34), (int32x4_t)0);
      *(int32x2_t *)v125.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v125.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)), vdup_lane_s32(*(int32x2_t *)v125.i8, 1));
      v125.i32[0] = (v125.i32[0] + 536879104) >> 14;
      v126.i32[3] = vmax_s32(vmin_s32(*(int32x2_t *)v125.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
      *v36++ = v126;
      ++v37;
      uint64_t v38 = (int *)((char *)v38 + v18);
      if (v37 == v17) {
        goto LABEL_198;
      }
    }
  }
  return result;
}

int *resample_horizontal<unsigned short,int,1,true>(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a4 >= 1 && a8 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a6;
    uint64_t v14 = a6[1];
    unint64_t v15 = *a7;
    unint64_t v16 = a7[1];
    if (v15 >> 1 >= v16 >> 1) {
      unint64_t v17 = v16 >> 1;
    }
    else {
      unint64_t v17 = v15 >> 1;
    }
    unint64_t v18 = a4;
    uint64_t v19 = 2 * a2;
    uint64_t v20 = v19 + 8;
    unint64_t v21 = (char *)result + (v19 + 8) * a4;
    if (v17 >= *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8]) {
      unint64_t v17 = *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8];
    }
    if (a2 <= 3) {
      unint64_t v22 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    else {
      unint64_t v22 = 1;
    }
    int v23 = a2 > 7;
    unsigned int v24 = a2 & 7;
    if ((a2 & 7) != 0) {
      int v23 = 0;
    }
    else {
      unsigned int v24 = 8;
    }
    uint64_t v25 = ((2 * (_BYTE)v24 + 15) & 0x30) + 2 * ((a2 + 8 * (v23 << 31 >> 31)) & 0xFFFFFFF8);
    uint16x8_t v26 = (uint16x8_t)vdupq_n_s16(v24);
    if (a2 >= 8) {
      unsigned int v27 = 8;
    }
    else {
      unsigned int v27 = a2;
    }
    int8x16_t v28 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v27), (uint16x8_t)xmmword_1850CD7D0);
    uint64_t v29 = a8;
    BOOL v31 = a2 == (__int16)a2 && v18 > v22;
    if (v18 - v22 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v18 - v22;
    }
    v33.i64[0] = 0x8000800080008000;
    v33.i64[1] = 0x8000800080008000;
    int8x16_t v34 = (int8x16_t)vcgtq_u16(v26, (uint16x8_t)xmmword_1850CD7D0);
    do
    {
      int8x16_t v35 = *(int32x2_t **)(a5 + 8 * v12);
      unint64_t v36 = 0;
      if (v31)
      {
        unint64_t v37 = result;
        while (1)
        {
          uint64_t v38 = *v37;
          uint64_t v39 = (int8x16_t *)(v13 + 2 * v38);
          int32x4_t v40 = (int8x16_t *)((char *)v39 + v25);
          if ((unint64_t)v39->u64 + v25 > 2 * v17 + v13) {
            break;
          }
          if (v39 >= v40)
          {
            int32x4_t v45 = 0uLL;
            int32x4_t v46 = 0uLL;
            int32x4_t v47 = 0uLL;
            int32x4_t v48 = 0uLL;
          }
          else
          {
            int32x4_t v41 = (int8x16_t *)(v37 + 2);
            int v42 = v37[1];
            int v43 = (int8x16_t *)(v14 + 2 * v38);
            unint64_t v44 = (unint64_t)&v40[-1];
            int32x4_t v45 = 0uLL;
            if ((unint64_t)v39 < v44)
            {
              int32x4_t v47 = 0uLL;
              int32x4_t v48 = 0uLL;
              int32x4_t v46 = 0uLL;
              do
              {
                int8x16_t v52 = *v41++;
                int16x8_t v8 = (int16x8_t)vandq_s8(v52, v28);
                int8x16_t v53 = *v39++;
                int16x8_t v54 = (int16x8_t)veorq_s8(v53, v33);
                int32x4_t v48 = vmlal_high_s16(v48, v54, v8);
                int8x16_t v55 = *v43++;
                v10.i64[0] = v55.i64[0];
                int32x4_t v47 = vmlal_s16(v47, *(int16x4_t *)v54.i8, *(int16x4_t *)v8.i8);
                int16x8_t v9 = (int16x8_t)veorq_s8(v55, v33);
                int32x4_t v46 = vmlal_high_s16(v46, v9, v8);
                int32x4_t v45 = vmlal_s16(v45, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v42 -= 8;
              }
              while ((unint64_t)v39 < v44);
            }
            else
            {
              int32x4_t v46 = 0uLL;
              int32x4_t v47 = 0uLL;
              int32x4_t v48 = 0uLL;
            }
            if (v42 >= 1)
            {
              int16x8_t v8 = (int16x8_t)vandq_s8(*v41, v34);
              int16x8_t v49 = (int16x8_t)veorq_s8(*v39, v33);
              int32x4_t v48 = vmlal_high_s16(v48, v49, v8);
              int32x4_t v47 = vmlal_s16(v47, *(int16x4_t *)v49.i8, *(int16x4_t *)v8.i8);
              int16x8_t v9 = (int16x8_t)veorq_s8(*v43, v33);
              int32x4_t v46 = vmlal_high_s16(v46, v9, v8);
              int32x4_t v45 = vmlal_s16(v45, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          int32x4_t v50 = vaddq_s32(v47, v48);
          v50.i32[0] = (vaddvq_s32(v50) + 536879104) >> 14;
          int32x4_t v51 = vaddq_s32(v45, v46);
          v51.i32[0] = (vaddvq_s32(v51) + 536879104) >> 14;
          *v35++ = vzip1_s32(vmax_s32(vmin_s32(*(int32x2_t *)v50.i8, (int32x2_t)0xFFFF0000FFFFLL), 0), vmax_s32(vmin_s32(*(int32x2_t *)v51.i8, (int32x2_t)0xFFFF0000FFFFLL), 0));
          ++v36;
          unint64_t v37 = (int *)((char *)v37 + v20);
          if (v36 == v32)
          {
            unint64_t v36 = v32;
            break;
          }
        }
      }
      else
      {
        unint64_t v37 = result;
      }
      if (v36 < v18)
      {
        do
        {
          uint64_t v56 = *v37;
          if ((int)v56 >= (int)v17) {
            int v57 = v17;
          }
          else {
            int v57 = *v37;
          }
          int v58 = v17 - v57;
          if (v37[1] >= v58) {
            int v59 = v58;
          }
          else {
            int v59 = v37[1];
          }
          if (v59 < 1)
          {
            int32x4_t v64 = 0uLL;
            int32x4_t v68 = 0uLL;
            int32x4_t v66 = 0uLL;
            int32x4_t v67 = 0uLL;
          }
          else
          {
            int8x16_t v60 = (int16x8_t *)(v13 + 2 * v56);
            unint64_t v61 = (unint64_t)&v60[-1] + 2 * v59;
            int16x8_t v62 = (int8x16_t *)(v14 + 2 * v56);
            int16x8_t v63 = (int8x16_t *)(v37 + 2);
            int32x4_t v64 = 0uLL;
            if ((unint64_t)v60 >= v61)
            {
              int32x4_t v68 = 0uLL;
              int32x4_t v66 = 0uLL;
              int32x4_t v67 = 0uLL;
              LODWORD(v65) = v59;
LABEL_82:
              int v75 = v65 << 16;
              while (2)
              {
                unint64_t v76 = v21 - (char *)v63;
                if ((unint64_t)(v21 - (char *)v63) >= 0x10) {
                  unint64_t v76 = 16;
                }
                if (v76 < 0x10)
                {
                  if (v65 >= 4)
                  {
                    if (v65 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v65 == 5)
                    {
                      v9.i16[0] = v63->i16[4];
                    }
                    else
                    {
                      if (v65 == 6)
                      {
                        int16x4_t v83 = 0;
                      }
                      else
                      {
                        if (v65) {
                          __int32 v87 = 0;
                        }
                        else {
                          __int32 v87 = v63->u16[7];
                        }
                        v83.i32[0] = v63->u16[6];
                        v83.i32[1] = v87;
                      }
                      v9.i16[0] = v63->i16[4];
                      v9.i16[2] = v63->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v83);
                    }
                    v8.i64[0] = v63->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_89;
                  }
                  if (v65 == 1)
                  {
                    v8.i16[0] = v63->i16[0];
                  }
                  else
                  {
                    if (v65 == 2) {
                      int16x4_t v81 = 0;
                    }
                    else {
                      int16x4_t v81 = (int16x4_t)v63->u16[2];
                    }
                    v9.i16[0] = v63->i16[0];
                    v9.i16[2] = v63->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v81);
                  }
                  v8.i64[1] = 0;
                  ++v63;
                }
                else
                {
                  unsigned int v77 = v75 >> 16;
                  if (v75 >> 16 >= 8) {
                    unsigned int v77 = 8;
                  }
                  int16x8_t v9 = *(int16x8_t *)v63;
                  int16x8_t v8 = (int16x8_t)vandq_s8(*v63, (int8x16_t)vcgtq_s16(vdupq_n_s16(v77), (int16x8_t)xmmword_1850CD7D0));
LABEL_89:
                  ++v63;
                  if (v65 >= 8)
                  {
                    int16x8_t v9 = *v60;
                    int v78 = 1;
                    goto LABEL_91;
                  }
                  if (v65 >= 4)
                  {
                    if (v65 == 4)
                    {
                      v10.i64[0] = 0;
                    }
                    else if (v65 == 5)
                    {
                      v10.i16[0] = v60->i16[4];
                    }
                    else
                    {
                      if (v65 == 6) {
                        int16x4_t v86 = 0;
                      }
                      else {
                        int16x4_t v86 = (int16x4_t)v60->u16[6];
                      }
                      v10.i16[0] = v60->i16[4];
                      v10.i16[2] = v60->i16[5];
                      *(int16x4_t *)v10.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v86);
                    }
                    int v78 = 0;
                    v9.i64[0] = v60->i64[0];
                    v9.i64[1] = v10.i64[0];
                    goto LABEL_91;
                  }
                }
                if (v65 == 1)
                {
                  v9.i16[0] = v60->i16[0];
                }
                else
                {
                  if (v65 == 2) {
                    int16x4_t v85 = 0;
                  }
                  else {
                    int16x4_t v85 = (int16x4_t)v60->u16[2];
                  }
                  v10.i16[0] = v60->i16[0];
                  v10.i16[2] = v60->i16[1];
                  *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v85);
                }
                int v78 = 0;
                v9.i64[1] = 0;
LABEL_91:
                if (v78)
                {
                  int8x16_t v10 = *v62;
                }
                else if (v65 < 4)
                {
                  if (v65 == 1)
                  {
                    v10.i16[0] = v62->i16[0];
                  }
                  else
                  {
                    if (v65 == 2) {
                      int16x4_t v82 = 0;
                    }
                    else {
                      int16x4_t v82 = (int16x4_t)v62->u16[2];
                    }
                    v11.i16[0] = v62->i16[0];
                    v11.i16[2] = v62->i16[1];
                    *(int16x4_t *)v10.i8 = vuzp1_s16(v11, v82);
                  }
                  v10.i64[1] = 0;
                }
                else
                {
                  if (v65 == 4)
                  {
                    int16x4_t v11 = 0;
                  }
                  else if (v65 == 5)
                  {
                    v11.i16[0] = v62->i16[4];
                  }
                  else
                  {
                    if (v65 == 6)
                    {
                      int16x4_t v84 = 0;
                    }
                    else
                    {
                      if (v65) {
                        __int32 v88 = 0;
                      }
                      else {
                        __int32 v88 = v62->u16[7];
                      }
                      v84.i32[0] = v62->u16[6];
                      v84.i32[1] = v88;
                    }
                    v11.i16[0] = v62->i16[4];
                    v11.i16[2] = v62->i16[5];
                    int16x4_t v11 = vuzp1_s16(v11, v84);
                  }
                  v10.i64[0] = v62->i64[0];
                  v10.u64[1] = (unint64_t)v11;
                }
                ++v60;
                int16x8_t v79 = (int16x8_t)veorq_s8((int8x16_t)v9, v33);
                int32x4_t v67 = vmlal_high_s16(v67, v79, v8);
                int32x4_t v66 = vmlal_s16(v66, *(int16x4_t *)v79.i8, *(int16x4_t *)v8.i8);
                ++v62;
                int16x8_t v9 = (int16x8_t)veorq_s8(v10, v33);
                int32x4_t v68 = vmlal_high_s16(v68, v9, v8);
                int32x4_t v64 = vmlal_s16(v64, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v75 -= 0x80000;
                BOOL v80 = __OFSUB__(v65, 8);
                LODWORD(v65) = v65 - 8;
                if (((int)v65 < 0) ^ v80 | (v65 == 0)) {
                  goto LABEL_153;
                }
                continue;
              }
            }
            uint64_t v65 = v59;
            int32x4_t v66 = 0uLL;
            int32x4_t v67 = 0uLL;
            int32x4_t v68 = 0uLL;
            do
            {
              unint64_t v69 = v21 - (char *)v63;
              if ((unint64_t)(v21 - (char *)v63) >= 0x10) {
                unint64_t v69 = 16;
              }
              if (v69 < 0x10)
              {
                if (v65)
                {
                  if (v65 < 4)
                  {
                    if (v65 == 1)
                    {
                      v8.i16[0] = v63->i16[0];
                    }
                    else
                    {
                      if (v65 == 2) {
                        int16x4_t v73 = 0;
                      }
                      else {
                        int16x4_t v73 = (int16x4_t)v63->u16[2];
                      }
                      v9.i16[0] = v63->i16[0];
                      v9.i16[2] = v63->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v73);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v65 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v65 == 5)
                    {
                      v9.i16[0] = v63->i16[4];
                    }
                    else
                    {
                      if (v65 == 6)
                      {
                        int16x4_t v74 = 0;
                      }
                      else
                      {
                        if (v59) {
                          __int32 v91 = 0;
                        }
                        else {
                          __int32 v91 = v63->u16[7];
                        }
                        v74.i32[0] = v63->u16[6];
                        v74.i32[1] = v91;
                      }
                      v9.i16[0] = v63->i16[4];
                      v9.i16[2] = v63->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v74);
                    }
                    v8.i64[0] = v63->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  int16x8_t v8 = 0uLL;
                }
              }
              else
              {
                int16x8_t v8 = (int16x8_t)vandq_s8(*v63, v28);
              }
              ++v63;
              int8x16_t v70 = *(int8x16_t *)v60++;
              int16x8_t v71 = (int16x8_t)veorq_s8(v70, v33);
              int32x4_t v67 = vmlal_high_s16(v67, v71, v8);
              int8x16_t v72 = *v62++;
              v10.i64[0] = v72.i64[0];
              int32x4_t v66 = vmlal_s16(v66, *(int16x4_t *)v71.i8, *(int16x4_t *)v8.i8);
              int16x8_t v9 = (int16x8_t)veorq_s8(v72, v33);
              int32x4_t v68 = vmlal_high_s16(v68, v9, v8);
              int32x4_t v64 = vmlal_s16(v64, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v65 -= 8;
            }
            while ((unint64_t)v60 < v61);
            if ((int)v65 >= 1) {
              goto LABEL_82;
            }
          }
LABEL_153:
          int32x4_t v89 = vaddq_s32(v66, v67);
          v89.i32[0] = (vaddvq_s32(v89) + 536879104) >> 14;
          int32x4_t v90 = vaddq_s32(v64, v68);
          v90.i32[0] = (vaddvq_s32(v90) + 536879104) >> 14;
          *v35++ = vzip1_s32(vmax_s32(vmin_s32(*(int32x2_t *)v89.i8, (int32x2_t)0xFFFF0000FFFFLL), 0), vmax_s32(vmin_s32(*(int32x2_t *)v90.i8, (int32x2_t)0xFFFF0000FFFFLL), 0));
          ++v36;
          unint64_t v37 = (int *)((char *)v37 + v20);
        }
        while (v36 != v18);
      }
      v13 += v15;
      v14 += v16;
      ++v12;
    }
    while (v12 != v29);
  }
  return result;
}

int *resample_horizontal<unsigned short,int,5,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a6;
    unint64_t v131 = *a7;
    uint64_t v15 = 2 * a2 + 8;
    unint64_t v16 = (char *)result + v15 * a4;
    unint64_t v17 = *(int *)&v16[-v15 + 4] + (uint64_t)*(int *)&v16[-v15];
    if (v131 / 0xA < v17) {
      unint64_t v17 = v131 / 0xA;
    }
    unint64_t v18 = 1;
    if (a2 <= 3) {
      unint64_t v18 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    unsigned int v19 = a2 % 6;
    BOOL v20 = a2 > 5;
    if (a2 % 6) {
      BOOL v20 = 0;
    }
    else {
      unsigned int v19 = 6;
    }
    int16x8_t v21 = vdupq_n_s16(v19);
    uint64_t v22 = ((10 * v19 + 63) & 0x3FFFFFFC0) + 60 * (a2 / 6 - v20);
    if (a2 >= 6) {
      unsigned int v23 = 6;
    }
    else {
      unsigned int v23 = a2;
    }
    int8x16_t v24 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v23), (uint16x8_t)xmmword_1850CD7D0);
    uint64_t v25 = a8;
    BOOL v26 = a2 == (__int16)a2 && a4 > v18;
    int v27 = v26;
    if (a4 - v18 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = a4 - v18;
    }
    v29.i64[0] = 0x8000800080008000;
    v29.i64[1] = 0x8000800080008000;
    int8x16_t v30 = (int8x16_t)vcgtq_s16(v21, (int16x8_t)xmmword_1850CD7D0);
    v31.i64[0] = 0x2000200020002000;
    v31.i64[1] = 0x2000200020002000;
    v32.i64[0] = 0xFFFF0000FFFFLL;
    v32.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      int8x16_t v33 = *(int32x4_t **)(a5 + 8 * v13);
      unint64_t v34 = 0;
      if (v27)
      {
        int8x16_t v35 = result;
        while (1)
        {
          unint64_t v36 = (int8x16_t *)(v14 + 10 * *v35);
          unint64_t v37 = (int8x16_t *)((char *)v36 + v22);
          if ((unint64_t)v36->u64 + v22 > 10 * v17 + v14) {
            break;
          }
          if (v36 >= v37)
          {
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            int32x4_t v43 = 0uLL;
            int32x4_t v44 = 0uLL;
            int32x4_t v45 = 0uLL;
            int32x4_t v46 = 0uLL;
            int32x4_t v47 = 0uLL;
            int32x4_t v48 = 0uLL;
          }
          else
          {
            uint64_t v38 = (int8x16_t *)(v35 + 2);
            int v39 = v35[1];
            unint64_t v40 = (unint64_t)&v37[-4];
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            int32x4_t v43 = 0uLL;
            int32x4_t v44 = 0uLL;
            int32x4_t v45 = 0uLL;
            int32x4_t v46 = 0uLL;
            int32x4_t v47 = 0uLL;
            int32x4_t v48 = 0uLL;
            while ((unint64_t)v36 < v40)
            {
              int8x16_t v49 = *v38;
              uint64_t v38 = (int8x16_t *)((char *)v38 + 12);
              int8x16_t v8 = vandq_s8(v49, v24);
              int8x16_t v50 = *v36;
              int8x16_t v51 = v36[1];
              int8x16_t v52 = v36[2];
              int8x16_t v53 = v36[3];
              unint64_t v36 = (int8x16_t *)((char *)v36 + 60);
              int16x8_t v12 = (int16x8_t)veorq_s8(v53, v29);
              int16x8_t v11 = (int16x8_t)veorq_s8(v52, v29);
              int16x8_t v10 = (int16x8_t)veorq_s8(v51, v29);
              int8x16_t v54 = veorq_s8(v50, v29);
              int16x8_t v55 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD800);
              int16x8_t v56 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD810);
              int16x8_t v57 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD820);
              int32x4_t v44 = vmlal_high_s16(v44, v10, v57);
              int32x4_t v41 = vmlal_lane_s16(v41, *(int16x4_t *)v54.i8, *(int16x4_t *)v8.i8, 0);
              int32x4_t v45 = vmlal_s16(v45, *(int16x4_t *)v11.i8, *(int16x4_t *)v56.i8);
              int32x4_t v43 = vmlal_s16(v43, *(int16x4_t *)v10.i8, *(int16x4_t *)v57.i8);
              int32x4_t v42 = vmlal_s16(v42, (int16x4_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              int32x4_t v46 = vmlal_high_s16(v46, v11, v56);
              int32x4_t v47 = vmlal_s16(v47, *(int16x4_t *)v12.i8, *(int16x4_t *)v55.i8);
              int32x4_t v48 = vmlal_high_s16(v48, v12, v55);
              v39 -= 6;
            }
            if (v39 >= 1)
            {
              int8x16_t v8 = vandq_s8(*v38, v30);
              int16x8_t v12 = (int16x8_t)veorq_s8(v36[3], v29);
              int16x8_t v11 = (int16x8_t)veorq_s8(v36[2], v29);
              int16x8_t v10 = (int16x8_t)veorq_s8(v36[1], v29);
              int8x16_t v58 = veorq_s8(*v36, v29);
              int16x8_t v59 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD800);
              int16x8_t v60 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD810);
              int16x8_t v61 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD820);
              int32x4_t v41 = vmlal_lane_s16(v41, *(int16x4_t *)v58.i8, *(int16x4_t *)v8.i8, 0);
              int32x4_t v44 = vmlal_high_s16(v44, v10, v61);
              int32x4_t v46 = vmlal_high_s16(v46, v11, v60);
              int32x4_t v45 = vmlal_s16(v45, *(int16x4_t *)v11.i8, *(int16x4_t *)v60.i8);
              int32x4_t v43 = vmlal_s16(v43, *(int16x4_t *)v10.i8, *(int16x4_t *)v61.i8);
              int32x4_t v42 = vmlal_s16(v42, (int16x4_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              int32x4_t v47 = vmlal_s16(v47, *(int16x4_t *)v12.i8, *(int16x4_t *)v59.i8);
              int32x4_t v48 = vmlal_high_s16(v48, v12, v59);
            }
          }
          int16x8_t v9 = (int16x8_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL);
          int32x4_t v62 = vaddq_s32(v41, (int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 0xCuLL));
          int32x4_t v63 = vaddq_s32(v44, (int32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 0xCuLL));
          int32x4_t v64 = vaddq_s32(v42, (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL));
          int8x16_t v65 = (int8x16_t)vaddq_s32(v43, (int32x4_t)v9);
          *int8x16_t v33 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v64, v65, 4uLL), v62), vaddq_s32((int32x4_t)vextq_s8(v65, (int8x16_t)v63, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          v33[1].i32[0] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v65.i8, 1), v64), vaddq_s32(vdupq_laneq_s32(v63, 2), v31)), 0xEuLL), v32), (int32x4_t)0).u32[0];
          int8x16_t v33 = (int32x4_t *)((char *)v33 + 20);
          ++v34;
          int8x16_t v35 = (int *)((char *)v35 + v15);
          if (v34 == v28)
          {
            unint64_t v34 = v28;
            break;
          }
        }
      }
      else
      {
        int8x16_t v35 = result;
      }
      if (v34 < a4)
      {
        do
        {
          if (*v35 >= (int)v17) {
            int v66 = v17;
          }
          else {
            int v66 = *v35;
          }
          int v67 = v17 - v66;
          if (v35[1] >= v67) {
            int v68 = v67;
          }
          else {
            int v68 = v35[1];
          }
          if (v68 < 1)
          {
            int32x4_t v72 = 0uLL;
            int32x4_t v74 = 0uLL;
            int32x4_t v75 = 0uLL;
            int32x4_t v76 = 0uLL;
            int32x4_t v77 = 0uLL;
            int32x4_t v78 = 0uLL;
            int32x4_t v79 = 0uLL;
            int32x4_t v80 = 0uLL;
          }
          else
          {
            unint64_t v69 = (int8x16_t *)(v14 + 10 * *v35);
            unint64_t v70 = (unint64_t)&v69[-4] + 10 * v68;
            int16x8_t v71 = (int8x16_t *)(v35 + 2);
            int32x4_t v72 = 0uLL;
            if ((unint64_t)v69 >= v70)
            {
              int32x4_t v74 = 0uLL;
              int32x4_t v75 = 0uLL;
              int32x4_t v76 = 0uLL;
              int32x4_t v77 = 0uLL;
              int32x4_t v78 = 0uLL;
              int32x4_t v79 = 0uLL;
              int32x4_t v80 = 0uLL;
              goto LABEL_77;
            }
            uint64_t v73 = v68;
            int32x4_t v74 = 0uLL;
            int32x4_t v75 = 0uLL;
            int32x4_t v76 = 0uLL;
            int32x4_t v77 = 0uLL;
            int32x4_t v78 = 0uLL;
            int32x4_t v79 = 0uLL;
            int32x4_t v80 = 0uLL;
            do
            {
              unint64_t v81 = v16 - (char *)v71;
              if ((unint64_t)(v16 - (char *)v71) >= 0x10) {
                unint64_t v81 = 16;
              }
              if (v81 < 0x10)
              {
                if (v73)
                {
                  if (v73 < 4)
                  {
                    if (v73 == 1)
                    {
                      v8.i16[0] = v71->i16[0];
                    }
                    else
                    {
                      if (v73 == 2) {
                        int16x4_t v89 = 0;
                      }
                      else {
                        int16x4_t v89 = (int16x4_t)v71->u16[2];
                      }
                      v10.i16[0] = v71->i16[0];
                      v10.i16[2] = v71->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v89);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v73 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v73 == 5)
                    {
                      v9.i16[0] = v71->i16[4];
                    }
                    else
                    {
                      if (v73 == 6)
                      {
                        int16x4_t v90 = 0;
                      }
                      else
                      {
                        if (v68) {
                          __int32 v91 = 0;
                        }
                        else {
                          __int32 v91 = v71->u16[7];
                        }
                        v90.i32[0] = v71->u16[6];
                        v90.i32[1] = v91;
                      }
                      v10.i16[0] = v71->i16[4];
                      v10.i16[2] = v71->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v90);
                    }
                    v8.i64[0] = v71->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  int8x16_t v8 = 0uLL;
                }
              }
              else
              {
                int8x16_t v8 = vandq_s8(*v71, v24);
              }
              int16x8_t v71 = (int8x16_t *)((char *)v71 + 12);
              int8x16_t v82 = *v69;
              int8x16_t v83 = v69[1];
              int8x16_t v84 = v69[2];
              int8x16_t v85 = v69[3];
              unint64_t v69 = (int8x16_t *)((char *)v69 + 60);
              int16x8_t v12 = (int16x8_t)veorq_s8(v85, v29);
              int16x8_t v11 = (int16x8_t)veorq_s8(v84, v29);
              int16x8_t v10 = (int16x8_t)veorq_s8(v83, v29);
              int16x8_t v9 = (int16x8_t)veorq_s8(v82, v29);
              int16x8_t v86 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD800);
              int16x8_t v87 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD810);
              int16x8_t v88 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD820);
              int32x4_t v76 = vmlal_high_s16(v76, v10, v88);
              int32x4_t v75 = vmlal_s16(v75, *(int16x4_t *)v10.i8, *(int16x4_t *)v88.i8);
              int32x4_t v77 = vmlal_s16(v77, *(int16x4_t *)v11.i8, *(int16x4_t *)v87.i8);
              int32x4_t v74 = vmlal_s16(v74, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              int32x4_t v78 = vmlal_high_s16(v78, v11, v87);
              int32x4_t v79 = vmlal_s16(v79, *(int16x4_t *)v12.i8, *(int16x4_t *)v86.i8);
              int32x4_t v80 = vmlal_high_s16(v80, v12, v86);
              int32x4_t v72 = vmlal_lane_s16(v72, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8, 0);
              v73 -= 6;
            }
            while ((unint64_t)v69 < v70);
            if ((int)v73 >= 1)
            {
              int v68 = v73;
LABEL_77:
              uint64_t v92 = 0;
              char v93 = v68;
              uint64_t v94 = 5 * v68;
              int v95 = v68 << 16;
              unint64_t v96 = v68;
              int v97 = 5 * v68;
              while (2)
              {
                uint64_t v98 = v94 + v92;
                unint64_t v99 = v16 - (char *)v71;
                if ((unint64_t)(v16 - (char *)v71) >= 0x10) {
                  unint64_t v99 = 16;
                }
                if (v99 < 0x10)
                {
                  if (v96 >= 4)
                  {
                    if (v96 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v96 == 5)
                    {
                      v9.i16[0] = v71->i16[4];
                    }
                    else
                    {
                      if (v94 + v92 == 30)
                      {
                        int16x4_t v116 = 0;
                      }
                      else
                      {
                        if (v93) {
                          __int32 v129 = 0;
                        }
                        else {
                          __int32 v129 = v71->u16[7];
                        }
                        v116.i32[0] = v71->u16[6];
                        v116.i32[1] = v129;
                      }
                      v10.i16[0] = v71->i16[4];
                      v10.i16[2] = v71->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v116);
                    }
                    v8.i64[0] = v71->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v98 == 5)
                  {
                    v8.i16[0] = v71->i16[0];
                  }
                  else
                  {
                    if (v94 + v92 == 10) {
                      v9.i64[0] = 0;
                    }
                    else {
                      v9.i64[0] = v71->u16[2];
                    }
                    v10.i16[0] = v71->i16[0];
                    v10.i16[2] = v71->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
                  }
                  v8.i64[1] = 0;
                  int16x8_t v71 = (int8x16_t *)((char *)v71 + 12);
                }
                else
                {
                  unsigned int v100 = v95 >> 16;
                  if (v95 >> 16 >= 8) {
                    unsigned int v100 = 8;
                  }
                  int16x8_t v9 = vcgtq_s16(vdupq_n_s16(v100), (int16x8_t)xmmword_1850CD7D0);
                  int16x8_t v10 = *(int16x8_t *)v71;
                  int8x16_t v8 = vandq_s8(*v71, (int8x16_t)v9);
LABEL_84:
                  int16x8_t v71 = (int8x16_t *)((char *)v71 + 12);
                  if (v96 >= 7)
                  {
                    int8x16_t v101 = v69[2];
                    int8x16_t v102 = v69[3];
                    int8x16_t v103 = *v69;
                    int16x8_t v9 = (int16x8_t)v69[1];
                    goto LABEL_86;
                  }
                }
                uint64_t v130 = v94 + v92;
                unsigned int v128 = v97 + v92;
                if ((v97 + v92) < 0x10)
                {
                  if (v128 < 8)
                  {
                    if (v128 < 4)
                    {
                      if (v130)
                      {
                        if (v130 == 1)
                        {
                          int16x4_t v114 = 0;
                          v9.i64[0] = v69->u16[0];
                        }
                        else
                        {
                          v9.i16[0] = v69->i16[0];
                          v9.i16[2] = v69->i16[1];
                          int16x4_t v114 = (int16x4_t)v69->u16[2];
                        }
                        *(int16x4_t *)v103.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v114);
                      }
                      else
                      {
                        v103.i64[0] = 0;
                      }
                      v103.i64[1] = 0;
                    }
                    else
                    {
                      if (v130 == 4)
                      {
                        int16x4_t v119 = 0;
                      }
                      else
                      {
                        int16x8_t v110 = &v69->i16[4];
                        if (v130 == 5)
                        {
                          int16x4_t v111 = 0;
                          v9.i64[0] = (unsigned __int16)*v110;
                        }
                        else
                        {
                          v9.i16[0] = *v110;
                          v9.i16[2] = v69->i16[5];
                          int16x4_t v111 = (int16x4_t)v69->u16[6];
                        }
                        int16x4_t v119 = vuzp1_s16(*(int16x4_t *)v9.i8, v111);
                      }
                      v103.i64[0] = v69->i64[0];
                      v103.u64[1] = (unint64_t)v119;
                    }
                    int16x8_t v9 = 0uLL;
                  }
                  else
                  {
                    if (v94 + v92 == 8)
                    {
                      int16x8_t v9 = 0uLL;
                    }
                    else if ((unint64_t)(v94 + v92 - 8) < 4)
                    {
                      if (v94 + v92 == 9)
                      {
                        v9.i16[0] = v69[1].i16[0];
                      }
                      else
                      {
                        if (v94 + v92 == 10) {
                          int16x4_t v115 = 0;
                        }
                        else {
                          int16x4_t v115 = (int16x4_t)v69[1].u16[2];
                        }
                        v10.i16[0] = v69[1].i16[0];
                        v10.i16[2] = v69[1].i16[1];
                        *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v115);
                      }
                      v9.i64[1] = 0;
                    }
                    else
                    {
                      if (v130 == 12)
                      {
                        int16x4_t v120 = 0;
                      }
                      else
                      {
                        int8x16_t v108 = &v69[1].i16[4];
                        if (v130 == 13)
                        {
                          int16x4_t v109 = 0;
                          v9.i64[0] = (unsigned __int16)*v108;
                        }
                        else
                        {
                          v9.i16[0] = *v108;
                          v9.i16[2] = v69[1].i16[5];
                          int16x4_t v109 = (int16x4_t)v69[1].u16[6];
                        }
                        int16x4_t v120 = vuzp1_s16(*(int16x4_t *)v9.i8, v109);
                      }
                      v9.i64[0] = v69[1].i64[0];
                      v9.u64[1] = (unint64_t)v120;
                    }
                    int8x16_t v103 = *v69;
                  }
                }
                else
                {
                  int8x16_t v103 = *v69;
                  int16x8_t v9 = (int16x8_t)v69[1];
                  unint64_t v107 = v130 - 16;
                  if (v130 != 16)
                  {
                    if (v107 >= 8)
                    {
                      if (v94 + v92 == 24)
                      {
                        int8x16_t v102 = 0uLL;
                      }
                      else if ((unint64_t)(v94 + v92 - 24) < 4)
                      {
                        if (v98 == 25)
                        {
                          uint64_t v118 = 0;
                          uint64_t v117 = v69[3].u16[0];
                        }
                        else
                        {
                          LOWORD(v117) = v69[3].i16[0];
                          WORD2(v117) = v69[3].i16[1];
                          uint64_t v118 = v69[3].u16[2];
                        }
                        v102.i64[1] = 0;
                        v102.i16[0] = v117;
                        v102.i16[1] = WORD2(v117);
                        v102.i16[2] = v118;
                        v102.i16[3] = WORD2(v118);
                      }
                      else
                      {
                        if (v130 == 28)
                        {
                          v11.i64[0] = 0;
                        }
                        else if (v130 == 29)
                        {
                          v11.i16[0] = v69[3].i16[4];
                        }
                        else
                        {
                          if (v94 + v92 == 30)
                          {
                            int16x4_t v123 = 0;
                          }
                          else
                          {
                            if (v93) {
                              __int32 v122 = 0;
                            }
                            else {
                              __int32 v122 = v69[3].u16[7];
                            }
                            v123.i32[0] = v69[3].u16[6];
                            v123.i32[1] = v122;
                          }
                          v12.i16[0] = v69[3].i16[4];
                          v12.i16[2] = v69[3].i16[5];
                          *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v123);
                        }
                        v102.i64[0] = v69[3].i64[0];
                        v102.i64[1] = v11.i64[0];
                      }
                      int8x16_t v101 = v69[2];
LABEL_86:
                      unint64_t v69 = (int8x16_t *)((char *)v69 + 60);
                      int16x8_t v12 = (int16x8_t)veorq_s8(v102, v29);
                      int16x8_t v11 = (int16x8_t)veorq_s8(v101, v29);
                      int16x8_t v9 = (int16x8_t)veorq_s8((int8x16_t)v9, v29);
                      int16x8_t v10 = (int16x8_t)veorq_s8(v103, v29);
                      int16x8_t v104 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD800);
                      int16x8_t v105 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD810);
                      int16x8_t v106 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD820);
                      int32x4_t v76 = vmlal_high_s16(v76, v9, v106);
                      int32x4_t v75 = vmlal_s16(v75, *(int16x4_t *)v9.i8, *(int16x4_t *)v106.i8);
                      int32x4_t v74 = vmlal_s16(v74, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
                      int32x4_t v77 = vmlal_s16(v77, *(int16x4_t *)v11.i8, *(int16x4_t *)v105.i8);
                      int32x4_t v78 = vmlal_high_s16(v78, v11, v105);
                      int32x4_t v79 = vmlal_s16(v79, *(int16x4_t *)v12.i8, *(int16x4_t *)v104.i8);
                      int32x4_t v80 = vmlal_high_s16(v80, v12, v104);
                      int32x4_t v72 = vmlal_lane_s16(v72, *(int16x4_t *)v10.i8, *(int16x4_t *)v8.i8, 0);
                      v92 -= 30;
                      v95 -= 393216;
                      BOOL v26 = (uint64_t)v96 <= 6;
                      v96 -= 6;
                      if (v26) {
                        goto LABEL_178;
                      }
                      continue;
                    }
                    if (v107 < 4)
                    {
                      v101.i32[3] = 0;
                      v101.i32[0] = v69[2].i32[0];
                      *(uint64_t *)((char *)v101.i64 + 4) = v69[2].u16[2];
                    }
                    else
                    {
                      if (v130 == 20)
                      {
                        int16x4_t v121 = 0;
                      }
                      else
                      {
                        int16x4_t v112 = &v69[2].i16[4];
                        if (v130 == 21)
                        {
                          int16x4_t v113 = 0;
                          v11.i64[0] = (unsigned __int16)*v112;
                        }
                        else
                        {
                          v11.i16[0] = *v112;
                          v11.i16[2] = v69[2].i16[5];
                          int16x4_t v113 = (int16x4_t)v69[2].u16[6];
                        }
                        int16x4_t v121 = vuzp1_s16(*(int16x4_t *)v11.i8, v113);
                      }
                      v101.i64[0] = v69[2].i64[0];
                      v101.u64[1] = (unint64_t)v121;
                    }
LABEL_164:
                    int8x16_t v102 = 0uLL;
                    goto LABEL_86;
                  }
                }
                break;
              }
              int8x16_t v101 = 0uLL;
              goto LABEL_164;
            }
          }
LABEL_178:
          int16x8_t v9 = (int16x8_t)vextq_s8((int8x16_t)v78, (int8x16_t)v79, 0xCuLL);
          int32x4_t v124 = vaddq_s32(v72, (int32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v77, 0xCuLL));
          int32x4_t v125 = vaddq_s32(v76, (int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v80, 0xCuLL));
          int32x4_t v126 = vaddq_s32(v74, (int32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 0xCuLL));
          int8x16_t v127 = (int8x16_t)vaddq_s32(v75, (int32x4_t)v9);
          *int8x16_t v33 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v126, v127, 4uLL), v124), vaddq_s32((int32x4_t)vextq_s8(v127, (int8x16_t)v125, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          v33[1].i32[0] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v127.i8, 1), v126), vaddq_s32(vdupq_laneq_s32(v125, 2), v31)), 0xEuLL), v32), (int32x4_t)0).u32[0];
          int8x16_t v33 = (int32x4_t *)((char *)v33 + 20);
          ++v34;
          int8x16_t v35 = (int *)((char *)v35 + v15);
        }
        while (v34 != a4);
      }
      v14 += v131;
      ++v13;
    }
    while (v13 != v25);
  }
  return result;
}

int *resample_horizontal<unsigned short,int,2,false>(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a4 >= 1 && a8 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a6;
    unint64_t v13 = *a7;
    uint64_t v14 = v13 >> 2;
    unint64_t v15 = a4;
    uint64_t v16 = 2 * a2;
    uint64_t v17 = v16 + 8;
    unint64_t v18 = (char *)result + (v16 + 8) * a4;
    if (v13 >> 2 >= *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8]) {
      uint64_t v14 = *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8];
    }
    if (a2 <= 3) {
      unint64_t v19 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    else {
      unint64_t v19 = 1;
    }
    BOOL v20 = a2 > 7;
    unsigned int v21 = a2 & 7;
    if ((a2 & 7) != 0) {
      BOOL v20 = 0;
    }
    else {
      unsigned int v21 = 8;
    }
    uint64_t v22 = ((4 * (_BYTE)v21 + 31) & 0x60) + 32 * ((a2 >> 3) - v20);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(v21);
    if (a2 >= 8) {
      unsigned int v24 = 8;
    }
    else {
      unsigned int v24 = a2;
    }
    int8x16_t v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v24), (uint16x8_t)xmmword_1850CD7D0);
    uint64_t v26 = a8;
    BOOL v28 = a2 == (__int16)a2 && v15 > v19;
    if (v15 - v19 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v15 - v19;
    }
    v30.i64[0] = 0x8000800080008000;
    v30.i64[1] = 0x8000800080008000;
    int8x16_t v31 = (int8x16_t)vcgtq_u16(v23, (uint16x8_t)xmmword_1850CD7D0);
    do
    {
      int32x4_t v32 = *(int32x2_t **)(a5 + 8 * v11);
      unint64_t v33 = 0;
      if (v28)
      {
        unint64_t v34 = result;
        while (1)
        {
          int8x16_t v35 = (int8x16_t *)(v12 + 4 * *v34);
          unint64_t v36 = (int8x16_t *)((char *)v35 + v22);
          if ((unint64_t)v35->u64 + v22 > 4 * v14 + v12) {
            break;
          }
          if (v35 >= v36)
          {
            int32x4_t v40 = 0uLL;
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            int32x4_t v43 = 0uLL;
          }
          else
          {
            unint64_t v37 = (int8x16_t *)(v34 + 2);
            int v38 = v34[1];
            unint64_t v39 = (unint64_t)&v36[-2];
            int32x4_t v40 = 0uLL;
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            int32x4_t v43 = 0uLL;
            while ((unint64_t)v35 < v39)
            {
              int8x16_t v44 = *v37++;
              int16x8_t v45 = (int16x8_t)vandq_s8(v44, v25);
              int8x16_t v46 = *v35;
              int8x16_t v47 = v35[1];
              v35 += 2;
              int16x8_t v10 = (int16x8_t)veorq_s8(v47, v30);
              int16x8_t v9 = (int16x8_t)veorq_s8(v46, v30);
              int16x8_t v48 = vzip2q_s16(v45, v45);
              int16x8_t v8 = vzip1q_s16(v45, v45);
              int32x4_t v43 = vmlal_high_s16(v43, v10, v48);
              int32x4_t v41 = vmlal_high_s16(v41, v9, v8);
              int32x4_t v42 = vmlal_s16(v42, *(int16x4_t *)v10.i8, *(int16x4_t *)v48.i8);
              int32x4_t v40 = vmlal_s16(v40, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v38 -= 8;
            }
            if (v38 >= 1)
            {
              int16x8_t v49 = (int16x8_t)vandq_s8(*v37, v31);
              int16x8_t v10 = (int16x8_t)veorq_s8(v35[1], v30);
              int16x8_t v9 = (int16x8_t)veorq_s8(*v35, v30);
              int16x8_t v50 = vzip2q_s16(v49, v49);
              int16x8_t v8 = vzip1q_s16(v49, v49);
              int32x4_t v43 = vmlal_high_s16(v43, v10, v50);
              int32x4_t v41 = vmlal_high_s16(v41, v9, v8);
              int32x4_t v42 = vmlal_s16(v42, *(int16x4_t *)v10.i8, *(int16x4_t *)v50.i8);
              int32x4_t v40 = vmlal_s16(v40, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          int8x16_t v51 = (int8x16_t)vaddq_s32(vaddq_s32(v40, v42), vaddq_s32(v41, v43));
          *v32++ = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), vadd_s32(*(int32x2_t *)v51.i8, (int32x2_t)0x2000200020002000)), 0xEuLL), (int32x2_t)0xFFFF0000FFFFLL), 0);
          ++v33;
          unint64_t v34 = (int *)((char *)v34 + v17);
          if (v33 == v29)
          {
            unint64_t v33 = v29;
            break;
          }
        }
      }
      else
      {
        unint64_t v34 = result;
      }
      if (v33 < v15)
      {
        do
        {
          int v52 = v34[1];
          uint64_t v53 = *v34;
          if ((int)v53 >= (int)v14) {
            int v54 = v14;
          }
          else {
            int v54 = *v34;
          }
          int v55 = v14 - v54;
          if (v52 >= v55) {
            int v52 = v55;
          }
          if (v52 < 1)
          {
            int32x4_t v60 = 0uLL;
            int32x4_t v61 = 0uLL;
            int32x4_t v62 = 0uLL;
            int32x4_t v63 = 0uLL;
          }
          else
          {
            int16x8_t v56 = (int8x16_t *)(v12 + 4 * v53);
            unint64_t v57 = (unint64_t)&v56[-2] + 4 * v52;
            int8x16_t v58 = (int8x16_t *)(v34 + 2);
            if ((unint64_t)v56 >= v57)
            {
              int32x4_t v60 = 0uLL;
              int32x4_t v61 = 0uLL;
              int32x4_t v62 = 0uLL;
              int32x4_t v63 = 0uLL;
              goto LABEL_77;
            }
            uint64_t v59 = v52;
            int32x4_t v60 = 0uLL;
            int32x4_t v61 = 0uLL;
            int32x4_t v62 = 0uLL;
            int32x4_t v63 = 0uLL;
            do
            {
              unint64_t v64 = v18 - (char *)v58;
              if ((unint64_t)(v18 - (char *)v58) >= 0x10) {
                unint64_t v64 = 16;
              }
              if (v64 < 0x10)
              {
                if (v59)
                {
                  if (v59 < 4)
                  {
                    if (v59 == 1)
                    {
                      v8.i16[0] = v58->i16[0];
                    }
                    else
                    {
                      if (v59 == 2) {
                        int16x4_t v68 = 0;
                      }
                      else {
                        int16x4_t v68 = (int16x4_t)v58->u16[2];
                      }
                      v9.i16[0] = v58->i16[0];
                      v9.i16[2] = v58->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v68);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v59 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v59 == 5)
                    {
                      v9.i16[0] = v58->i16[4];
                    }
                    else
                    {
                      if (v59 == 6)
                      {
                        int16x4_t v69 = 0;
                      }
                      else
                      {
                        if (v52) {
                          __int32 v70 = 0;
                        }
                        else {
                          __int32 v70 = v58->u16[7];
                        }
                        v69.i32[0] = v58->u16[6];
                        v69.i32[1] = v70;
                      }
                      v9.i16[0] = v58->i16[4];
                      v9.i16[2] = v58->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v69);
                    }
                    v8.i64[0] = v58->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  int16x8_t v8 = 0uLL;
                }
              }
              else
              {
                int16x8_t v8 = (int16x8_t)vandq_s8(*v58, v25);
              }
              ++v58;
              int8x16_t v65 = *v56;
              int8x16_t v66 = v56[1];
              v56 += 2;
              int16x8_t v10 = (int16x8_t)veorq_s8(v66, v30);
              int16x8_t v9 = (int16x8_t)veorq_s8(v65, v30);
              int16x8_t v67 = vzip2q_s16(v8, v8);
              int16x8_t v8 = vzip1q_s16(v8, v8);
              int32x4_t v61 = vmlal_high_s16(v61, v9, v8);
              int32x4_t v63 = vmlal_high_s16(v63, v10, v67);
              int32x4_t v62 = vmlal_s16(v62, *(int16x4_t *)v10.i8, *(int16x4_t *)v67.i8);
              int32x4_t v60 = vmlal_s16(v60, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v59 -= 8;
            }
            while ((unint64_t)v56 < v57);
            if ((int)v59 >= 1)
            {
              int v52 = v59;
LABEL_77:
              uint64_t v71 = v52 + 8;
              int v72 = 2 * v52;
              int v73 = v52 << 16;
              while (2)
              {
                uint64_t v74 = v71 - 8;
                unint64_t v75 = v18 - (char *)v58;
                if ((unint64_t)(v18 - (char *)v58) >= 0x10) {
                  unint64_t v75 = 16;
                }
                if (v75 < 0x10)
                {
                  if ((unint64_t)v74 >= 4)
                  {
                    if (v71 == 12)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v71 == 13)
                    {
                      v9.i16[0] = v58->i16[4];
                    }
                    else
                    {
                      if (v71 == 14)
                      {
                        int16x4_t v81 = 0;
                      }
                      else
                      {
                        if (v52) {
                          __int32 v86 = 0;
                        }
                        else {
                          __int32 v86 = v58->u16[7];
                        }
                        v81.i32[0] = v58->u16[6];
                        v81.i32[1] = v86;
                      }
                      v9.i16[0] = v58->i16[4];
                      v9.i16[2] = v58->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v81);
                    }
                    v8.i64[0] = v58->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v71 == 9)
                  {
                    v8.i16[0] = v58->i16[0];
                  }
                  else
                  {
                    if (v71 == 10) {
                      int16x4_t v80 = 0;
                    }
                    else {
                      int16x4_t v80 = (int16x4_t)v58->u16[2];
                    }
                    v9.i16[0] = v58->i16[0];
                    v9.i16[2] = v58->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v80);
                  }
                  v8.i64[1] = 0;
                  ++v58;
                }
                else
                {
                  unsigned int v76 = v73 >> 16;
                  if (v73 >> 16 >= 8) {
                    unsigned int v76 = 8;
                  }
                  int16x8_t v9 = *(int16x8_t *)v58;
                  int16x8_t v8 = (int16x8_t)vandq_s8(*v58, (int8x16_t)vcgtq_s16(vdupq_n_s16(v76), (int16x8_t)xmmword_1850CD7D0));
LABEL_84:
                  ++v58;
                  if ((unint64_t)v74 >= 8)
                  {
                    int8x16_t v77 = v56[1];
                    goto LABEL_86;
                  }
                }
                if (v74 < 4)
                {
                  if (v74 < 2)
                  {
                    if (v71 == 9)
                    {
                      uint64_t v83 = 0;
                    }
                    else
                    {
                      LOWORD(v83) = v56->i16[2];
                      WORD2(v83) = v56->i16[3];
                    }
                    v78.i64[1] = 0;
                    v78.i32[0] = v56->i32[0];
                    v78.i16[2] = v83;
                    v78.i16[3] = WORD2(v83);
                  }
                  else
                  {
                    if (v71 == 10)
                    {
                      int16x4_t v82 = 0;
                    }
                    else
                    {
                      if (v71 == 11) {
                        int16x4_t v85 = 0;
                      }
                      else {
                        int16x4_t v85 = (int16x4_t)v56->u16[6];
                      }
                      v10.i16[0] = v56->i16[4];
                      v10.i16[2] = v56->i16[5];
                      int16x4_t v82 = vuzp1_s16(*(int16x4_t *)v10.i8, v85);
                    }
                    v78.i64[0] = v56->i64[0];
                    v78.u64[1] = (unint64_t)v82;
                  }
                  int8x16_t v77 = 0uLL;
                }
                else
                {
                  if ((v72 & 0xFFFFFFFE) == 8)
                  {
                    int8x16_t v77 = 0uLL;
                  }
                  else if ((unint64_t)(v72 & 0xFFFFFFFE) - 8 < 4)
                  {
                    if (v71 == 13) {
                      uint64_t v84 = 0;
                    }
                    else {
                      uint64_t v84 = v56[1].u16[2];
                    }
                    v77.i64[1] = 0;
                    v77.i32[0] = v56[1].i32[0];
                    v77.i16[2] = v84;
                    v77.i16[3] = WORD2(v84);
                  }
                  else
                  {
                    if (v71 == 14)
                    {
                      v10.i64[0] = 0;
                    }
                    else
                    {
                      if (v71 == 15)
                      {
                        v9.i64[0] = 0;
                      }
                      else
                      {
                        v9.i16[0] = v56[1].i16[6];
                        v9.i16[2] = v56[1].i16[7];
                      }
                      v10.i16[0] = v56[1].i16[4];
                      v10.i16[2] = v56[1].i16[5];
                      *(int16x4_t *)v10.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
                    }
                    v77.i64[0] = v56[1].i64[0];
                    v77.i64[1] = v10.i64[0];
                  }
LABEL_86:
                  int8x16_t v78 = *v56;
                }
                v56 += 2;
                int16x8_t v10 = (int16x8_t)veorq_s8(v78, v30);
                int16x8_t v79 = vzip2q_s16(v8, v8);
                int16x8_t v8 = vzip1q_s16(v8, v8);
                int16x8_t v9 = (int16x8_t)veorq_s8(v77, v30);
                int32x4_t v61 = vmlal_high_s16(v61, v10, v8);
                int32x4_t v60 = vmlal_s16(v60, *(int16x4_t *)v10.i8, *(int16x4_t *)v8.i8);
                int32x4_t v63 = vmlal_high_s16(v63, v9, v79);
                int32x4_t v62 = vmlal_s16(v62, *(int16x4_t *)v9.i8, *(int16x4_t *)v79.i8);
                v72 -= 16;
                v73 -= 0x80000;
                v71 -= 8;
                if (v74 <= 8) {
                  break;
                }
                continue;
              }
            }
          }
          int8x16_t v87 = (int8x16_t)vaddq_s32(vaddq_s32(v60, v62), vaddq_s32(v61, v63));
          *v32++ = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), vadd_s32(*(int32x2_t *)v87.i8, (int32x2_t)0x2000200020002000)), 0xEuLL), (int32x2_t)0xFFFF0000FFFFLL), 0);
          ++v33;
          unint64_t v34 = (int *)((char *)v34 + v17);
        }
        while (v33 != v15);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v26);
  }
  return result;
}

int16x4_t *resample_horizontal<unsigned short,int,4,false>(int16x4_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a6;
    unint64_t v12 = *a7;
    uint64_t v13 = v12 >> 3;
    uint64_t v14 = 2 * a2 + 8;
    unint64_t v15 = (char *)result + v14 * a4;
    if (v12 >> 3 >= *(int *)&v15[-v14 + 4] + (uint64_t)*(int *)&v15[-v14]) {
      uint64_t v13 = *(int *)&v15[-v14 + 4] + (uint64_t)*(int *)&v15[-v14];
    }
    BOOL v16 = a2 > 3;
    LODWORD(v17) = (8 * (a2 & 3)) | 0x20;
    if ((a2 & 3) != 0) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 64;
    }
    if ((a2 & 3) != 0) {
      BOOL v16 = 0;
    }
    unint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFE0) + 32 * ((a2 >> 2) - v16);
    uint64_t v19 = a8;
    BOOL v22 = a2 != (__int16)a2 || a4 < 2 || a4 == 1;
    v23.i64[0] = 0x8000800080008000;
    v23.i64[1] = 0x8000800080008000;
    v24.i64[0] = 0x2000200020002000;
    v24.i64[1] = 0x2000200020002000;
    v25.i64[0] = 0xFFFF0000FFFFLL;
    v25.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      uint64_t v26 = *(int32x4_t **)(a5 + 8 * v10);
      unint64_t v27 = 0;
      if (v22)
      {
        BOOL v28 = result;
      }
      else
      {
        BOOL v28 = result;
        do
        {
          int16x8_t v56 = (int8x16_t *)(v11 + 8 * v28->i32[0]);
          unint64_t v57 = (int8x16_t *)((char *)v56 + v18);
          if ((unint64_t)v56->u64 + v18 > 8 * v13 + v11) {
            break;
          }
          if (v56 >= v57)
          {
            int32x4_t v61 = 0uLL;
            int32x4_t v62 = 0uLL;
            int32x4_t v63 = 0uLL;
            int32x4_t v64 = 0uLL;
          }
          else
          {
            int8x16_t v58 = v28 + 1;
            int v59 = v28->i32[1];
            unint64_t v60 = (unint64_t)&v57[-2];
            int32x4_t v61 = 0uLL;
            int32x4_t v62 = 0uLL;
            int32x4_t v63 = 0uLL;
            int32x4_t v64 = 0uLL;
            while ((unint64_t)v56 < v60)
            {
              int16x4_t v65 = *v58++;
              int16x4_t v8 = v65;
              int8x16_t v66 = *v56;
              int8x16_t v67 = v56[1];
              v56 += 2;
              int16x8_t v9 = (int16x8_t)veorq_s8(v67, v23);
              int16x8_t v68 = (int16x8_t)veorq_s8(v66, v23);
              int32x4_t v61 = vmlal_lane_s16(v61, *(int16x4_t *)v68.i8, v65, 0);
              int32x4_t v62 = vmlal_high_lane_s16(v62, v68, v65, 1);
              int32x4_t v63 = vmlal_lane_s16(v63, *(int16x4_t *)v9.i8, v65, 2);
              int32x4_t v64 = vmlal_high_lane_s16(v64, v9, v65, 3);
              v59 -= 4;
            }
            if (v59 >= 1)
            {
              int16x4_t v8 = *v58;
              int16x8_t v9 = (int16x8_t)veorq_s8(v56[1], v23);
              int16x8_t v69 = (int16x8_t)veorq_s8(*v56, v23);
              int32x4_t v61 = vmlal_lane_s16(v61, *(int16x4_t *)v69.i8, *v58, 0);
              int32x4_t v62 = vmlal_high_lane_s16(v62, v69, *v58, 1);
              int32x4_t v63 = vmlal_lane_s16(v63, *(int16x4_t *)v9.i8, *v58, 2);
              int32x4_t v64 = vmlal_high_lane_s16(v64, v9, *v58, 3);
            }
          }
          *v26++ = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v62, v64), vaddq_s32(v61, v63)), v24), 0xEuLL), v25), (int32x4_t)0);
          ++v27;
          BOOL v28 = (int16x4_t *)((char *)v28 + v14);
          if (a4 < 2) {
            break;
          }
        }
        while ((unint64_t)a4 - 1 > v27);
      }
      if (v27 < a4)
      {
        do
        {
          int v29 = v28->i32[1];
          uint64_t v30 = v28->i32[0];
          if ((int)v30 >= (int)v13) {
            __int32 v31 = v13;
          }
          else {
            __int32 v31 = v28->i32[0];
          }
          int v32 = v13 - v31;
          if (v29 >= v32) {
            int v29 = v32;
          }
          if (v29 < 1)
          {
            int32x4_t v37 = 0uLL;
            int32x4_t v38 = 0uLL;
            int32x4_t v39 = 0uLL;
            int32x4_t v40 = 0uLL;
          }
          else
          {
            unint64_t v33 = (int8x16_t *)(v11 + 8 * v30);
            unint64_t v34 = (unint64_t)&v33[-2] + 8 * v29;
            int8x16_t v35 = (__int16 *)&v28[1];
            if ((unint64_t)v33 >= v34)
            {
              int32x4_t v37 = 0uLL;
              int32x4_t v38 = 0uLL;
              int32x4_t v39 = 0uLL;
              int32x4_t v40 = 0uLL;
              goto LABEL_51;
            }
            uint64_t v36 = v29;
            int32x4_t v37 = 0uLL;
            int32x4_t v38 = 0uLL;
            int32x4_t v39 = 0uLL;
            int32x4_t v40 = 0uLL;
            do
            {
              unint64_t v41 = v15 - (char *)v35;
              if ((unint64_t)(v15 - (char *)v35) >= 8) {
                unint64_t v41 = 8;
              }
              if (v41 < 8)
              {
                if (v36)
                {
                  if (v36 == 1)
                  {
                    v8.i16[0] = *v35;
                  }
                  else
                  {
                    if (v36 == 2)
                    {
                      int16x4_t v45 = 0;
                    }
                    else
                    {
                      if (v29) {
                        __int32 v46 = 0;
                      }
                      else {
                        __int32 v46 = (unsigned __int16)v35[3];
                      }
                      v45.i32[0] = (unsigned __int16)v35[2];
                      v45.i32[1] = v46;
                    }
                    v9.i16[0] = *v35;
                    v9.i16[2] = v35[1];
                    int16x4_t v8 = vuzp1_s16(*(int16x4_t *)v9.i8, v45);
                  }
                }
                else
                {
                  int16x4_t v8 = 0;
                }
              }
              else
              {
                int16x4_t v8 = *(int16x4_t *)v35;
              }
              v35 += 4;
              int8x16_t v42 = *v33;
              int8x16_t v43 = v33[1];
              v33 += 2;
              int16x8_t v9 = (int16x8_t)veorq_s8(v43, v23);
              int16x8_t v44 = (int16x8_t)veorq_s8(v42, v23);
              int32x4_t v37 = vmlal_lane_s16(v37, *(int16x4_t *)v44.i8, v8, 0);
              int32x4_t v38 = vmlal_high_lane_s16(v38, v44, v8, 1);
              int32x4_t v39 = vmlal_lane_s16(v39, *(int16x4_t *)v9.i8, v8, 2);
              int32x4_t v40 = vmlal_high_lane_s16(v40, v9, v8, 3);
              v36 -= 4;
            }
            while ((unint64_t)v33 < v34);
            if ((int)v36 >= 1)
            {
              int v29 = v36;
LABEL_51:
              int v47 = v29;
              while (2)
              {
                unint64_t v48 = v15 - (char *)v35;
                if ((unint64_t)(v15 - (char *)v35) >= 8) {
                  unint64_t v48 = 8;
                }
                if (v48 >= 8)
                {
                  int16x4_t v8 = *(int16x4_t *)v35;
                  goto LABEL_56;
                }
                if (v47 == 1)
                {
                  unsigned __int16 v52 = *v35;
                  v35 += 4;
                  uint64_t v53 = 0;
                  int16x4_t v8 = (int16x4_t)v52;
                  v49.i64[0] = v33->i64[0];
                  goto LABEL_64;
                }
                if (v47 == 2)
                {
                  int16x4_t v54 = 0;
                }
                else
                {
                  if (v29) {
                    __int32 v55 = 0;
                  }
                  else {
                    __int32 v55 = (unsigned __int16)v35[3];
                  }
                  v54.i32[0] = (unsigned __int16)v35[2];
                  v54.i32[1] = v55;
                }
                v9.i16[0] = *v35;
                v9.i16[2] = v35[1];
                int16x4_t v8 = vuzp1_s16(*(int16x4_t *)v9.i8, v54);
LABEL_56:
                v35 += 4;
                if (v47 >= 4)
                {
                  int16x8_t v9 = (int16x8_t)v33[1];
                  goto LABEL_58;
                }
                if ((v47 & 0x3FFFFFFE) != 0)
                {
                  int16x8_t v9 = 0uLL;
                  if (v47 != 2) {
                    v9.i64[0] = v33[1].i64[0];
                  }
LABEL_58:
                  int8x16_t v49 = *v33;
                }
                else
                {
                  v49.i64[0] = v33->i64[0];
                  if (v47 == 1) {
                    uint64_t v53 = 0;
                  }
                  else {
                    uint64_t v53 = v33->i64[1];
                  }
LABEL_64:
                  v49.i64[1] = v53;
                  int16x8_t v9 = 0uLL;
                }
                v33 += 2;
                int16x8_t v50 = (int16x8_t)veorq_s8(v49, v23);
                int32x4_t v37 = vmlal_lane_s16(v37, *(int16x4_t *)v50.i8, v8, 0);
                int32x4_t v38 = vmlal_high_lane_s16(v38, v50, v8, 1);
                int32x4_t v39 = vmlal_lane_s16(v39, (int16x4_t)veor_s8(*(int8x8_t *)v9.i8, (int8x8_t)0x8000800080008000), v8, 2);
                int32x4_t v40 = vmlal_lane_s16(v40, (int16x4_t)veor_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int8x8_t)0x8000800080008000), v8, 3);
                BOOL v51 = __OFSUB__(v47, 4);
                v47 -= 4;
                if ((v47 < 0) ^ v51 | (v47 == 0)) {
                  break;
                }
                continue;
              }
            }
          }
          *v26++ = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v38, v40), vaddq_s32(v37, v39)), v24), 0xEuLL), v25), (int32x4_t)0);
          ++v27;
          BOOL v28 = (int16x4_t *)((char *)v28 + v14);
        }
        while (v27 != a4);
      }
      v11 += v12;
      ++v10;
    }
    while (v10 != v19);
  }
  return result;
}

int *resample_horizontal<unsigned short,int,3,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a6;
    unint64_t v13 = *a7;
    uint64_t v14 = 2 * a2 + 8;
    unint64_t v15 = (char *)result + v14 * a4;
    unint64_t v16 = *(int *)&v15[-v14 + 4] + (uint64_t)*(int *)&v15[-v14];
    if (v13 / 6 < v16) {
      unint64_t v16 = v13 / 6;
    }
    unint64_t v17 = 1;
    if (a2 <= 3) {
      unint64_t v17 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    unsigned int v18 = a2 % 5;
    BOOL v19 = a2 > 4;
    if (a2 % 5) {
      BOOL v19 = 0;
    }
    else {
      unsigned int v18 = 5;
    }
    unsigned int v20 = 15 * (a2 / 5 - v19);
    uint64_t v21 = (6 * v18 + 31) & 0x3FFFFFFE0;
    int16x8_t v22 = vdupq_n_s16(v18);
    if (a2 >= 5) {
      unsigned int v23 = 5;
    }
    else {
      unsigned int v23 = a2;
    }
    uint64_t v24 = v21 + 2 * v20;
    int8x16_t v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v23), (uint16x8_t)xmmword_1850CD7D0);
    uint64_t v26 = a8;
    BOOL v27 = a2 == (__int16)a2 && a4 > v17;
    char v28 = !v27;
    if (a4 - v17 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = a4 - v17;
    }
    v30.i64[0] = 0x8000800080008000;
    v30.i64[1] = 0x8000800080008000;
    v31.i64[0] = 0x2000200020002000;
    v31.i64[1] = 0x2000200020002000;
    v32.i64[0] = 0xFFFF0000FFFFLL;
    v32.i64[1] = 0xFFFF0000FFFFLL;
    int8x16_t v33 = (int8x16_t)vcgtq_s16(v22, (int16x8_t)xmmword_1850CD7D0);
    do
    {
      uint64_t v34 = *(void *)(a5 + 8 * v11);
      unint64_t v35 = 0;
      if (v28)
      {
        uint64_t v36 = result;
      }
      else
      {
        uint64_t v36 = result;
        while (1)
        {
          int32x4_t v37 = (int8x16_t *)(v12 + 6 * *v36);
          int32x4_t v38 = (int8x16_t *)((char *)v37 + v24);
          if ((unint64_t)v37->u64 + v24 > 6 * v16 + v12) {
            break;
          }
          if (v37 >= v38)
          {
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            int32x4_t v43 = 0uLL;
            int32x4_t v44 = 0uLL;
          }
          else
          {
            int32x4_t v39 = (int8x16_t *)(v36 + 2);
            int v40 = v36[1];
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            int32x4_t v43 = 0uLL;
            int32x4_t v44 = 0uLL;
            while (v37 < &v38[-2])
            {
              int8x16_t v45 = *v39;
              int32x4_t v39 = (int8x16_t *)((char *)v39 + 10);
              int8x16_t v46 = vandq_s8(v45, v25);
              int8x16_t v47 = *v37;
              int8x16_t v48 = v37[1];
              int32x4_t v37 = (int8x16_t *)((char *)v37 + 30);
              int16x8_t v10 = (int16x8_t)veorq_s8(v48, v30);
              int16x8_t v9 = (int16x8_t)veorq_s8(v47, v30);
              int16x8_t v49 = (int16x8_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1850CD7E0);
              int16x8_t v50 = (int16x8_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1850CD7F0);
              int32x4_t v44 = vmlal_high_s16(v44, v10, v49);
              int32x4_t v42 = vmlal_high_s16(v42, v9, v50);
              int32x4_t v43 = vmlal_s16(v43, *(int16x4_t *)v10.i8, *(int16x4_t *)v49.i8);
              int32x4_t v41 = vmlal_s16(v41, *(int16x4_t *)v9.i8, *(int16x4_t *)v50.i8);
              v40 -= 5;
            }
            if (v40 >= 1)
            {
              int8x16_t v51 = vandq_s8(*v39, v33);
              int16x8_t v10 = (int16x8_t)veorq_s8(v37[1], v30);
              int16x8_t v9 = (int16x8_t)veorq_s8(*v37, v30);
              int16x8_t v52 = (int16x8_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_1850CD7E0);
              int16x8_t v53 = (int16x8_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_1850CD7F0);
              int32x4_t v44 = vmlal_high_s16(v44, v10, v52);
              int32x4_t v42 = vmlal_high_s16(v42, v9, v53);
              int32x4_t v43 = vmlal_s16(v43, *(int16x4_t *)v10.i8, *(int16x4_t *)v52.i8);
              int32x4_t v41 = vmlal_s16(v41, *(int16x4_t *)v9.i8, *(int16x4_t *)v53.i8);
            }
          }
          int16x8_t v8 = (int16x8_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 4uLL);
          int32x4_t v54 = vaddq_s32((int32x4_t)v8, v41);
          int8x16_t v55 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL).u64[0], v42);
          int32x4_t v56 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(v54, (int32x4_t)vextq_s8((int8x16_t)v54, v55, 0xCuLL)), vaddq_s32((int32x4_t)vextq_s8(v55, (int8x16_t)v43, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          *(void *)uint64_t v34 = v56.i64[0];
          *(_DWORD *)(v34 + 8) = v56.i32[2];
          v34 += 12;
          ++v35;
          uint64_t v36 = (int *)((char *)v36 + v14);
          if (v35 == v29)
          {
            unint64_t v35 = v29;
            break;
          }
        }
      }
      if (v35 < a4)
      {
        do
        {
          if (*v36 >= (int)v16) {
            int v57 = v16;
          }
          else {
            int v57 = *v36;
          }
          int v58 = v16 - v57;
          if (v36[1] >= v58) {
            LODWORD(v59) = v58;
          }
          else {
            LODWORD(v59) = v36[1];
          }
          if ((int)v59 < 1)
          {
            int32x4_t v63 = 0uLL;
            int32x4_t v64 = 0uLL;
            int32x4_t v65 = 0uLL;
            int32x4_t v66 = 0uLL;
          }
          else
          {
            unint64_t v60 = (int8x16_t *)(v12 + 6 * *v36);
            unint64_t v61 = (unint64_t)&v60[-2] + 6 * (int)v59;
            int32x4_t v62 = (int8x16_t *)(v36 + 2);
            if ((unint64_t)v60 >= v61)
            {
              int32x4_t v63 = 0uLL;
              int32x4_t v64 = 0uLL;
              int32x4_t v65 = 0uLL;
              int32x4_t v66 = 0uLL;
LABEL_76:
              uint64_t v74 = 0;
              unint64_t v75 = v59;
              uint64_t v76 = 3 * v59;
              int v77 = v59 << 16;
              int v78 = 3 * v59;
              while (2)
              {
                uint64_t v79 = v76 + v74;
                unint64_t v80 = v15 - (char *)v62;
                if ((unint64_t)(v15 - (char *)v62) >= 0x10) {
                  unint64_t v80 = 16;
                }
                if (v80 < 0x10)
                {
                  if (v75 >= 4)
                  {
                    if (v75 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v75 == 5)
                    {
                      v9.i16[0] = v62->i16[4];
                    }
                    else
                    {
                      if (v79 == 18)
                      {
                        int16x4_t v92 = 0;
                      }
                      else
                      {
                        if (v75) {
                          __int32 v86 = 0;
                        }
                        else {
                          __int32 v86 = v62->u16[7];
                        }
                        v92.i32[0] = v62->u16[6];
                        v92.i32[1] = v86;
                      }
                      v9.i16[0] = v62->i16[4];
                      v9.i16[2] = v62->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v92);
                    }
                    v8.i64[0] = v62->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_83;
                  }
                  if (v79 == 3)
                  {
                    v8.i16[0] = v62->i16[0];
                  }
                  else
                  {
                    if (v76 + v74 == 6) {
                      int16x4_t v85 = 0;
                    }
                    else {
                      int16x4_t v85 = (int16x4_t)v62->u16[2];
                    }
                    v9.i16[0] = v62->i16[0];
                    v9.i16[2] = v62->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v85);
                  }
                  v8.i64[1] = 0;
                  int32x4_t v62 = (int8x16_t *)((char *)v62 + 10);
                }
                else
                {
                  unsigned int v81 = v77 >> 16;
                  if (v77 >> 16 >= 8) {
                    unsigned int v81 = 8;
                  }
                  int16x8_t v9 = *(int16x8_t *)v62;
                  int16x8_t v8 = (int16x8_t)vandq_s8(*v62, (int8x16_t)vcgtq_s16(vdupq_n_s16(v81), (int16x8_t)xmmword_1850CD7D0));
LABEL_83:
                  int32x4_t v62 = (int8x16_t *)((char *)v62 + 10);
                  if (v75 >= 6)
                  {
                    int8x16_t v82 = v60[1];
                    goto LABEL_85;
                  }
                }
                uint64_t v87 = v76 + v74;
                if ((v78 + v74) < 8)
                {
                  if ((v78 + v74) < 4)
                  {
                    if (v87)
                    {
                      if (v87 == 1)
                      {
                        int16x4_t v88 = 0;
                        v9.i64[0] = v60->u16[0];
                      }
                      else
                      {
                        v9.i16[0] = v60->i16[0];
                        v9.i16[2] = v60->i16[1];
                        int16x4_t v88 = (int16x4_t)v60->u16[2];
                      }
                      *(int16x4_t *)v83.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v88);
                    }
                    else
                    {
                      v83.i64[0] = 0;
                    }
                    v83.i64[1] = 0;
                  }
                  else
                  {
                    if (v87 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v87 == 5)
                    {
                      v9.i16[0] = v60->i16[4];
                    }
                    else
                    {
                      if (v76 + v74 == 6) {
                        int16x4_t v91 = 0;
                      }
                      else {
                        int16x4_t v91 = (int16x4_t)v60->u16[6];
                      }
                      v10.i16[0] = v60->i16[4];
                      v10.i16[2] = v60->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v91);
                    }
                    v83.i64[0] = v60->i64[0];
                    v83.i64[1] = v9.i64[0];
                  }
                  int8x16_t v82 = 0uLL;
                }
                else
                {
                  if (v87 == 8)
                  {
                    int8x16_t v82 = 0uLL;
                  }
                  else if ((unint64_t)(v87 - 8) < 4)
                  {
                    if (v79 == 9)
                    {
                      uint64_t v90 = 0;
                      uint64_t v89 = v60[1].u16[0];
                    }
                    else
                    {
                      LOWORD(v89) = v60[1].i16[0];
                      WORD2(v89) = v60[1].i16[1];
                      uint64_t v90 = v60[1].u16[2];
                    }
                    v82.i64[1] = 0;
                    v82.i16[0] = v89;
                    v82.i16[1] = WORD2(v89);
                    v82.i16[2] = v90;
                    v82.i16[3] = WORD2(v90);
                  }
                  else
                  {
                    if (v87 == 12)
                    {
                      v10.i64[0] = 0;
                    }
                    else if (v87 == 13)
                    {
                      v10.i16[0] = v60[1].i16[4];
                    }
                    else
                    {
                      if (v87) {
                        __int16 v93 = 0;
                      }
                      else {
                        __int16 v93 = v60[1].i16[7];
                      }
                      v10.i32[0] = v60[1].i32[2];
                      v10.i16[2] = v60[1].i16[6];
                      v10.i16[3] = v93;
                    }
                    v82.i64[0] = v60[1].i64[0];
                    v82.i64[1] = v10.i64[0];
                  }
LABEL_85:
                  int8x16_t v83 = *v60;
                }
                unint64_t v60 = (int8x16_t *)((char *)v60 + 30);
                int16x8_t v10 = (int16x8_t)veorq_s8(v83, v30);
                int16x8_t v84 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7E0);
                int16x8_t v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7F0);
                int16x8_t v9 = (int16x8_t)veorq_s8(v82, v30);
                int32x4_t v64 = vmlal_high_s16(v64, v10, v8);
                int32x4_t v66 = vmlal_high_s16(v66, v9, v84);
                int32x4_t v65 = vmlal_s16(v65, *(int16x4_t *)v9.i8, *(int16x4_t *)v84.i8);
                int32x4_t v63 = vmlal_s16(v63, *(int16x4_t *)v10.i8, *(int16x4_t *)v8.i8);
                v74 -= 15;
                v77 -= 327680;
                BOOL v27 = (uint64_t)v75 <= 5;
                v75 -= 5;
                if (v27) {
                  goto LABEL_145;
                }
                continue;
              }
            }
            uint64_t v59 = (int)v59;
            int32x4_t v63 = 0uLL;
            int32x4_t v64 = 0uLL;
            int32x4_t v65 = 0uLL;
            int32x4_t v66 = 0uLL;
            do
            {
              unint64_t v67 = v15 - (char *)v62;
              if ((unint64_t)(v15 - (char *)v62) >= 0x10) {
                unint64_t v67 = 16;
              }
              if (v67 < 0x10)
              {
                if (v59)
                {
                  if (v59 < 4)
                  {
                    if (v59 == 1)
                    {
                      v8.i16[0] = v62->i16[0];
                    }
                    else
                    {
                      if (v59 == 2) {
                        int16x4_t v71 = 0;
                      }
                      else {
                        int16x4_t v71 = (int16x4_t)v62->u16[2];
                      }
                      v9.i16[0] = v62->i16[0];
                      v9.i16[2] = v62->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v71);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v59 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v59 == 5)
                    {
                      v9.i16[0] = v62->i16[4];
                    }
                    else
                    {
                      if (v59 == 6)
                      {
                        int16x4_t v72 = 0;
                      }
                      else
                      {
                        if (v59) {
                          __int32 v73 = 0;
                        }
                        else {
                          __int32 v73 = v62->u16[7];
                        }
                        v72.i32[0] = v62->u16[6];
                        v72.i32[1] = v73;
                      }
                      v9.i16[0] = v62->i16[4];
                      v9.i16[2] = v62->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v72);
                    }
                    v8.i64[0] = v62->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  int16x8_t v8 = 0uLL;
                }
              }
              else
              {
                int16x8_t v8 = (int16x8_t)vandq_s8(*v62, v25);
              }
              int32x4_t v62 = (int8x16_t *)((char *)v62 + 10);
              int8x16_t v68 = *v60;
              int8x16_t v69 = v60[1];
              unint64_t v60 = (int8x16_t *)((char *)v60 + 30);
              int16x8_t v10 = (int16x8_t)veorq_s8(v69, v30);
              int16x8_t v9 = (int16x8_t)veorq_s8(v68, v30);
              int16x8_t v70 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7E0);
              int16x8_t v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7F0);
              int32x4_t v64 = vmlal_high_s16(v64, v9, v8);
              int32x4_t v66 = vmlal_high_s16(v66, v10, v70);
              int32x4_t v65 = vmlal_s16(v65, *(int16x4_t *)v10.i8, *(int16x4_t *)v70.i8);
              int32x4_t v63 = vmlal_s16(v63, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v59 -= 5;
            }
            while ((unint64_t)v60 < v61);
            if ((int)v59 >= 1) {
              goto LABEL_76;
            }
          }
LABEL_145:
          int16x8_t v8 = (int16x8_t)vextq_s8((int8x16_t)v65, (int8x16_t)v66, 4uLL);
          int32x4_t v94 = vaddq_s32((int32x4_t)v8, v63);
          int8x16_t v95 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL).u64[0], v64);
          int32x4_t v96 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v94, v95, 0xCuLL), v94), vaddq_s32((int32x4_t)vextq_s8(v95, (int8x16_t)v65, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          *(void *)uint64_t v34 = v96.i64[0];
          *(_DWORD *)(v34 + 8) = v96.i32[2];
          v34 += 12;
          ++v35;
          uint64_t v36 = (int *)((char *)v36 + v14);
        }
        while (v35 != a4);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v26);
  }
  return result;
}

int *resample_horizontal<unsigned short,int,1,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a6;
    unint64_t v13 = *a7;
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = 2 * a2;
    uint64_t v16 = v15 + 8;
    unint64_t v17 = (char *)result + (v15 + 8) * a4;
    if (v13 >> 1 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8]) {
      uint64_t v14 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    }
    if (a2 <= 3) {
      unint64_t v18 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    else {
      unint64_t v18 = 1;
    }
    int v19 = a2 > 7;
    unsigned int v20 = a2 & 7;
    if ((a2 & 7) != 0) {
      int v19 = 0;
    }
    else {
      unsigned int v20 = 8;
    }
    uint64_t v21 = ((2 * (_BYTE)v20 + 15) & 0x30) + 2 * ((a2 + 8 * (v19 << 31 >> 31)) & 0xFFFFFFF8);
    uint16x8_t v22 = (uint16x8_t)vdupq_n_s16(v20);
    if (a2 >= 8) {
      unsigned int v23 = 8;
    }
    else {
      unsigned int v23 = a2;
    }
    int8x16_t v24 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v23), (uint16x8_t)xmmword_1850CD7D0);
    uint64_t v25 = a8;
    BOOL v27 = a2 == (__int16)a2 && a4 > v18;
    if (a4 - v18 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = a4 - v18;
    }
    v29.i64[0] = 0x8000800080008000;
    v29.i64[1] = 0x8000800080008000;
    int8x16_t v30 = (int8x16_t)vcgtq_u16(v22, (uint16x8_t)xmmword_1850CD7D0);
    do
    {
      int32x4_t v31 = *(_DWORD **)(a5 + 8 * v11);
      unint64_t v32 = 0;
      if (v27)
      {
        int8x16_t v33 = result;
        while (1)
        {
          uint64_t v34 = (int8x16_t *)(v12 + 2 * *v33);
          unint64_t v35 = (int8x16_t *)((char *)v34 + v21);
          if ((unint64_t)v34->u64 + v21 > 2 * v14 + v12) {
            break;
          }
          if (v34 >= v35)
          {
            int32x4_t v39 = 0uLL;
            int32x4_t v40 = 0uLL;
          }
          else
          {
            uint64_t v36 = (int8x16_t *)(v33 + 2);
            int v37 = v33[1];
            unint64_t v38 = (unint64_t)&v35[-1];
            int32x4_t v39 = 0uLL;
            int32x4_t v40 = 0uLL;
            while ((unint64_t)v34 < v38)
            {
              int8x16_t v41 = *v36++;
              int8x16_t v42 = v41;
              int8x16_t v43 = *v34++;
              int16x8_t v8 = (int16x8_t)vandq_s8(v42, v24);
              int16x8_t v9 = (int16x8_t)veorq_s8(v43, v29);
              int32x4_t v40 = vmlal_high_s16(v40, v9, v8);
              int32x4_t v39 = vmlal_s16(v39, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v37 -= 8;
            }
            if (v37 >= 1)
            {
              int16x8_t v8 = (int16x8_t)vandq_s8(*v36, v30);
              int16x8_t v9 = (int16x8_t)veorq_s8(*v34, v29);
              int32x4_t v40 = vmlal_high_s16(v40, v9, v8);
              int32x4_t v39 = vmlal_s16(v39, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          int32x4_t v44 = vaddq_s32(v39, v40);
          v44.i32[0] = (vaddvq_s32(v44) + 536879104) >> 14;
          *v31++ = vmax_s32(vmin_s32(*(int32x2_t *)v44.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
          ++v32;
          int8x16_t v33 = (int *)((char *)v33 + v16);
          if (v32 == v28)
          {
            unint64_t v32 = v28;
            break;
          }
        }
      }
      else
      {
        int8x16_t v33 = result;
      }
      if (v32 < a4)
      {
        do
        {
          uint64_t v45 = *v33;
          if ((int)v45 >= (int)v14) {
            int v46 = v14;
          }
          else {
            int v46 = *v33;
          }
          int v47 = v14 - v46;
          if (v33[1] >= v47) {
            int v48 = v47;
          }
          else {
            int v48 = v33[1];
          }
          if (v48 < 1)
          {
            int32x4_t v52 = 0uLL;
            int32x4_t v54 = 0uLL;
          }
          else
          {
            int16x8_t v49 = (int16x8_t *)(v12 + 2 * v45);
            unint64_t v50 = (unint64_t)&v49[-1] + 2 * v48;
            int8x16_t v51 = (int8x16_t *)(v33 + 2);
            int32x4_t v52 = 0uLL;
            if ((unint64_t)v49 >= v50)
            {
              LODWORD(v53) = v48;
              int32x4_t v54 = 0uLL;
LABEL_77:
              int v60 = v53 << 16;
              unsigned int v61 = v53;
              while (2)
              {
                unint64_t v62 = v17 - (char *)v51;
                if ((unint64_t)(v17 - (char *)v51) >= 0x10) {
                  unint64_t v62 = 16;
                }
                if (v62 < 0x10)
                {
                  if (v61 >= 4)
                  {
                    if (v61 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v61 == 5)
                    {
                      v9.i16[0] = v51->i16[4];
                    }
                    else
                    {
                      if (v61 == 6)
                      {
                        int16x4_t v66 = 0;
                      }
                      else
                      {
                        if (v53) {
                          __int32 v69 = 0;
                        }
                        else {
                          __int32 v69 = v51->u16[7];
                        }
                        v66.i32[0] = v51->u16[6];
                        v66.i32[1] = v69;
                      }
                      v9.i16[0] = v51->i16[4];
                      v9.i16[2] = v51->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v66);
                    }
                    v8.i64[0] = v51->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v61 == 1)
                  {
                    v8.i16[0] = v51->i16[0];
                  }
                  else
                  {
                    if (v61 == 2) {
                      int16x4_t v65 = 0;
                    }
                    else {
                      int16x4_t v65 = (int16x4_t)v51->u16[2];
                    }
                    v9.i16[0] = v51->i16[0];
                    v9.i16[2] = v51->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v65);
                  }
                  v8.i64[1] = 0;
                  ++v51;
                }
                else
                {
                  unsigned int v63 = v60 >> 16;
                  if (v60 >> 16 >= 8) {
                    unsigned int v63 = 8;
                  }
                  int16x8_t v9 = *(int16x8_t *)v51;
                  int16x8_t v8 = (int16x8_t)vandq_s8(*v51, (int8x16_t)vcgtq_s16(vdupq_n_s16(v63), (int16x8_t)xmmword_1850CD7D0));
LABEL_84:
                  ++v51;
                  if (v61 >= 8)
                  {
                    int16x8_t v9 = *v49;
                    goto LABEL_86;
                  }
                  if (v61 >= 4)
                  {
                    if (v61 == 4)
                    {
                      int16x4_t v10 = 0;
                    }
                    else if (v61 == 5)
                    {
                      v10.i16[0] = v49->i16[4];
                    }
                    else
                    {
                      if (v61 == 6) {
                        int16x4_t v68 = 0;
                      }
                      else {
                        int16x4_t v68 = (int16x4_t)v49->u16[6];
                      }
                      v10.i16[0] = v49->i16[4];
                      v10.i16[2] = v49->i16[5];
                      int16x4_t v10 = vuzp1_s16(v10, v68);
                    }
                    v9.i64[0] = v49->i64[0];
                    v9.u64[1] = (unint64_t)v10;
                    goto LABEL_86;
                  }
                }
                if (v61 == 1)
                {
                  v9.i16[0] = v49->i16[0];
                }
                else
                {
                  if (v61 == 2) {
                    int16x4_t v67 = 0;
                  }
                  else {
                    int16x4_t v67 = (int16x4_t)v49->u16[2];
                  }
                  v10.i16[0] = v49->i16[0];
                  v10.i16[2] = v49->i16[1];
                  *(int16x4_t *)v9.i8 = vuzp1_s16(v10, v67);
                }
                v9.i64[1] = 0;
LABEL_86:
                ++v49;
                int16x8_t v9 = (int16x8_t)veorq_s8((int8x16_t)v9, v29);
                int32x4_t v54 = vmlal_high_s16(v54, v9, v8);
                int32x4_t v52 = vmlal_s16(v52, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v60 -= 0x80000;
                BOOL v64 = __OFSUB__(v61, 8);
                v61 -= 8;
                if (((v61 & 0x80000000) != 0) ^ v64 | (v61 == 0)) {
                  goto LABEL_126;
                }
                continue;
              }
            }
            uint64_t v53 = v48;
            int32x4_t v54 = 0uLL;
            do
            {
              unint64_t v55 = v17 - (char *)v51;
              if ((unint64_t)(v17 - (char *)v51) >= 0x10) {
                unint64_t v55 = 16;
              }
              if (v55 < 0x10)
              {
                if (v53)
                {
                  if (v53 < 4)
                  {
                    if (v53 == 1)
                    {
                      v8.i16[0] = v51->i16[0];
                    }
                    else
                    {
                      if (v53 == 2) {
                        int16x4_t v57 = 0;
                      }
                      else {
                        int16x4_t v57 = (int16x4_t)v51->u16[2];
                      }
                      v9.i16[0] = v51->i16[0];
                      v9.i16[2] = v51->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v57);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v53 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v53 == 5)
                    {
                      v9.i16[0] = v51->i16[4];
                    }
                    else
                    {
                      if (v53 == 6)
                      {
                        int16x4_t v58 = 0;
                      }
                      else
                      {
                        if (v48) {
                          __int32 v59 = 0;
                        }
                        else {
                          __int32 v59 = v51->u16[7];
                        }
                        v58.i32[0] = v51->u16[6];
                        v58.i32[1] = v59;
                      }
                      v9.i16[0] = v51->i16[4];
                      v9.i16[2] = v51->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v58);
                    }
                    v8.i64[0] = v51->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  int16x8_t v8 = 0uLL;
                }
              }
              else
              {
                int16x8_t v8 = (int16x8_t)vandq_s8(*v51, v24);
              }
              int8x16_t v56 = *(int8x16_t *)v49++;
              ++v51;
              int16x8_t v9 = (int16x8_t)veorq_s8(v56, v29);
              int32x4_t v54 = vmlal_high_s16(v54, v9, v8);
              int32x4_t v52 = vmlal_s16(v52, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v53 -= 8;
            }
            while ((unint64_t)v49 < v50);
            if ((int)v53 >= 1) {
              goto LABEL_77;
            }
          }
LABEL_126:
          int32x4_t v70 = vaddq_s32(v52, v54);
          v70.i32[0] = (vaddvq_s32(v70) + 536879104) >> 14;
          *v31++ = vmax_s32(vmin_s32(*(int32x2_t *)v70.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
          ++v32;
          int8x16_t v33 = (int *)((char *)v33 + v16);
        }
        while (v32 != a4);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v25);
  }
  return result;
}

int16x4_t *resample_horizontal<unsigned char,int,4,true>(int16x4_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a6;
    uint64_t v13 = a6[1];
    unint64_t v14 = *a7;
    unint64_t v15 = a7[1];
    unint64_t v72 = v14;
    if (v14 >> 2 >= v15) {
      unint64_t v16 = a7[1];
    }
    else {
      unint64_t v16 = v14 >> 2;
    }
    uint64_t v17 = 2 * a2 + 8;
    unint64_t v18 = (char *)result + v17 * a4;
    if (v16 >= *(int *)&v18[-v17 + 4] + (uint64_t)*(int *)&v18[-v17]) {
      unint64_t v16 = *(int *)&v18[-v17 + 4] + (uint64_t)*(int *)&v18[-v17];
    }
    BOOL v19 = a2 > 3;
    LODWORD(v20) = (4 * (a2 & 3)) | 0x10;
    if ((a2 & 3) != 0) {
      uint64_t v20 = v20;
    }
    else {
      uint64_t v20 = 32;
    }
    if ((a2 & 3) != 0) {
      BOOL v19 = 0;
    }
    unint64_t v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFF0) + 16 * ((a2 >> 2) - v19);
    BOOL v24 = a2 != (__int16)a2 || a4 < 2 || a4 == 1;
    v25.i64[0] = 0x200000002000;
    v25.i64[1] = 0x200000002000;
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    while (1)
    {
      BOOL v27 = *(int32x4_t **)(a5 + 8 * v11);
      if (v24)
      {
        unint64_t v28 = 0;
        int8x16_t v29 = result;
      }
      else
      {
        unint64_t v28 = 0;
        int8x16_t v29 = result;
        do
        {
          uint64_t v58 = v29->i32[0];
          __int32 v59 = (uint8x16_t *)(v12 + 4 * v58);
          int v60 = (uint8x16_t *)((char *)v59 + v21);
          if ((unint64_t)v59->u64 + v21 > 4 * v16 + v12) {
            break;
          }
          if (v59 >= v60)
          {
            int32x4_t v65 = 0uLL;
            int32x4_t v66 = 0uLL;
            int32x4_t v67 = 0uLL;
            int32x4_t v68 = 0uLL;
            int32x4_t v69 = 0uLL;
          }
          else
          {
            unsigned int v61 = v29 + 1;
            int v62 = v29->i32[1];
            unsigned int v63 = (__int32 *)(v13 + v58);
            unint64_t v64 = (unint64_t)&v60[-1];
            if ((unint64_t)v59 < v64)
            {
              int32x4_t v66 = 0uLL;
              int32x4_t v67 = 0uLL;
              int32x4_t v68 = 0uLL;
              int32x4_t v69 = 0uLL;
              int32x4_t v65 = 0uLL;
              do
              {
                int16x4_t v70 = *v61++;
                int16x4_t v8 = v70;
                uint8x16_t v71 = *v59++;
                int16x8_t v10 = (int16x8_t)vmovl_high_u8(v71);
                int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v71.i8);
                int32x4_t v66 = vmlal_lane_s16(v66, *(int16x4_t *)v9.i8, v8, 0);
                int32x4_t v67 = vmlal_high_lane_s16(v67, v9, v8, 1);
                int32x4_t v68 = vmlal_lane_s16(v68, *(int16x4_t *)v10.i8, v8, 2);
                int32x4_t v69 = vmlal_high_lane_s16(v69, v10, v8, 3);
                v71.i32[0] = *v63++;
                v9.i32[0] = v71.i32[0];
                v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
                int32x4_t v65 = vmlal_s16(v65, *(int16x4_t *)v9.i8, v8);
                v62 -= 4;
              }
              while ((unint64_t)v59 < v64);
            }
            else
            {
              int32x4_t v65 = 0uLL;
              int32x4_t v66 = 0uLL;
              int32x4_t v67 = 0uLL;
              int32x4_t v68 = 0uLL;
              int32x4_t v69 = 0uLL;
            }
            if (v62 >= 1)
            {
              int16x4_t v8 = *v61;
              int16x8_t v10 = (int16x8_t)vmovl_high_u8(*v59);
              int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v59->i8);
              int32x4_t v66 = vmlal_lane_s16(v66, *(int16x4_t *)v9.i8, *v61, 0);
              int32x4_t v67 = vmlal_high_lane_s16(v67, v9, *v61, 1);
              int32x4_t v68 = vmlal_lane_s16(v68, *(int16x4_t *)v10.i8, *v61, 2);
              int32x4_t v69 = vmlal_high_lane_s16(v69, v10, *v61, 3);
              v9.i32[0] = *v63;
              v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
              int32x4_t v65 = vmlal_s16(v65, *(int16x4_t *)v9.i8, *v61);
            }
          }
          *BOOL v27 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v67, v69), vaddq_s32(v66, v68)), v25), 0xEuLL), v26), (int32x4_t)0);
          v27[1].i32[0] = vmaxq_s32(vminq_s32((int32x4_t)((vaddvq_s32(v65) + 0x2000) >> 14), v26), (int32x4_t)0).u32[0];
          BOOL v27 = (int32x4_t *)((char *)v27 + 20);
          ++v28;
          int8x16_t v29 = (int16x4_t *)((char *)v29 + v17);
          if (a4 < 2) {
            break;
          }
        }
        while ((unint64_t)a4 - 1 > v28);
      }
      if (v28 < a4) {
        break;
      }
LABEL_95:
      v12 += v72;
      v13 += v15;
      if (++v11 == a8) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v30 = v29->i32[0];
      if ((int)v30 >= (int)v16) {
        __int32 v31 = v16;
      }
      else {
        __int32 v31 = v29->i32[0];
      }
      int v32 = v16 - v31;
      if (v29->i32[1] < v32) {
        int v32 = v29->i32[1];
      }
      if (v32 < 1)
      {
        int32x4_t v42 = 0uLL;
        int32x4_t v38 = 0uLL;
        int32x4_t v39 = 0uLL;
        int32x4_t v40 = 0uLL;
        int32x4_t v41 = 0uLL;
        goto LABEL_92;
      }
      int8x16_t v33 = (uint8x16_t *)(v12 + 4 * v30);
      unint64_t v34 = (unint64_t)&v33[-1] + 4 * v32;
      unint64_t v35 = (unsigned __int8 *)(v13 + v30);
      uint64_t v36 = (__int16 *)&v29[1];
      if ((unint64_t)v33 >= v34)
      {
        int32x4_t v38 = 0uLL;
        int32x4_t v39 = 0uLL;
        int32x4_t v40 = 0uLL;
        int32x4_t v41 = 0uLL;
        int32x4_t v42 = 0uLL;
        goto LABEL_54;
      }
      uint64_t v37 = v32;
      int32x4_t v38 = 0uLL;
      int32x4_t v39 = 0uLL;
      int32x4_t v40 = 0uLL;
      int32x4_t v41 = 0uLL;
      int32x4_t v42 = 0uLL;
      do
      {
        unint64_t v43 = v18 - (char *)v36;
        if ((unint64_t)(v18 - (char *)v36) >= 8) {
          unint64_t v43 = 8;
        }
        if (v43 < 8)
        {
          if (v37)
          {
            if (v37 == 1)
            {
              v8.i16[0] = *v36;
            }
            else
            {
              if (v37 == 2)
              {
                int16x4_t v45 = 0;
              }
              else
              {
                if (v32) {
                  __int32 v46 = 0;
                }
                else {
                  __int32 v46 = (unsigned __int16)v36[3];
                }
                v45.i32[0] = (unsigned __int16)v36[2];
                v45.i32[1] = v46;
              }
              v10.i16[0] = *v36;
              v10.i16[2] = v36[1];
              int16x4_t v8 = vuzp1_s16(*(int16x4_t *)v10.i8, v45);
            }
          }
          else
          {
            int16x4_t v8 = 0;
          }
        }
        else
        {
          int16x4_t v8 = *(int16x4_t *)v36;
        }
        v36 += 4;
        uint8x16_t v44 = *v33++;
        int16x8_t v10 = (int16x8_t)vmovl_high_u8(v44);
        int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v44.i8);
        int32x4_t v38 = vmlal_lane_s16(v38, *(int16x4_t *)v9.i8, v8, 0);
        int32x4_t v39 = vmlal_high_lane_s16(v39, v9, v8, 1);
        int32x4_t v40 = vmlal_lane_s16(v40, *(int16x4_t *)v10.i8, v8, 2);
        int32x4_t v41 = vmlal_high_lane_s16(v41, v10, v8, 3);
        v44.i32[0] = *(_DWORD *)v35;
        v35 += 4;
        v9.i32[0] = v44.i32[0];
        v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
        int32x4_t v42 = vmlal_s16(v42, *(int16x4_t *)v9.i8, v8);
        v37 -= 4;
      }
      while ((unint64_t)v33 < v34);
      if ((int)v37 >= 1) {
        break;
      }
LABEL_92:
      *BOOL v27 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v39, v41), vaddq_s32(v38, v40)), v25), 0xEuLL), v26), (int32x4_t)0);
      v27[1].i32[0] = vmaxq_s32(vminq_s32((int32x4_t)((vaddvq_s32(v42) + 0x2000) >> 14), v26), (int32x4_t)0).u32[0];
      BOOL v27 = (int32x4_t *)((char *)v27 + 20);
      ++v28;
      int8x16_t v29 = (int16x4_t *)((char *)v29 + v17);
      if (v28 == a4) {
        goto LABEL_95;
      }
    }
    int v32 = v37;
LABEL_54:
    int v47 = v32;
    while (1)
    {
      unint64_t v48 = v18 - (char *)v36;
      if ((unint64_t)(v18 - (char *)v36) >= 8) {
        unint64_t v48 = 8;
      }
      if (v48 < 8)
      {
        if (v47 == 1)
        {
          unsigned __int16 v51 = *v36;
          v36 += 4;
          uint64_t v52 = 0;
          int16x4_t v8 = (int16x4_t)v51;
          v9.i32[0] = v33->i32[0];
          v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
LABEL_67:
          v9.i64[1] = 0;
          v9.i8[1] = v9.i8[2];
          v9.i8[2] = v9.i8[4];
          v9.i8[3] = v9.i8[6];
          v9.i8[4] = v52;
          v9.i8[5] = BYTE2(v52);
          v9.i8[6] = BYTE4(v52);
          v9.i8[7] = BYTE6(v52);
          goto LABEL_61;
        }
        if (v47 == 2)
        {
          v9.i64[0] = 0;
        }
        else
        {
          if (v32) {
            __int32 v54 = 0;
          }
          else {
            __int32 v54 = (unsigned __int16)v36[3];
          }
          v9.i32[0] = (unsigned __int16)v36[2];
          v9.i32[1] = v54;
        }
        v10.i16[0] = *v36;
        v10.i16[2] = v36[1];
        int16x4_t v8 = vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
      }
      else
      {
        int16x4_t v8 = *(int16x4_t *)v36;
      }
      v36 += 4;
      if (v47 >= 4)
      {
        int16x8_t v9 = *(int16x8_t *)v33;
        goto LABEL_61;
      }
      if ((v47 & 0x3FFFFFFE) == 0)
      {
        v9.i32[0] = v33->i32[0];
        v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
        if (v47 == 1)
        {
          uint64_t v52 = 0;
        }
        else
        {
          LOBYTE(v52) = v33->i8[4];
          BYTE2(v52) = v33->i8[5];
          BYTE4(v52) = v33->i8[6];
          BYTE6(v52) = v33->i8[7];
        }
        goto LABEL_67;
      }
      if (v47 == 2)
      {
        uint64_t v53 = 0;
      }
      else
      {
        v9.i32[0] = v33->i32[2];
        uint16x8_t v55 = vmovl_u8(*(uint8x8_t *)v9.i8);
        HIDWORD(v53) = 0;
        LOBYTE(v53) = v55.i8[0];
        BYTE1(v53) = v55.i8[2];
        BYTE2(v53) = v55.i8[4];
        BYTE3(v53) = v55.i8[6];
      }
      v9.i64[0] = v33->i64[0];
      v9.i64[1] = v53;
LABEL_61:
      int16x8_t v10 = (int16x8_t)vmovl_high_u8((uint8x16_t)v9);
      int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
      int32x4_t v38 = vmlal_lane_s16(v38, *(int16x4_t *)v9.i8, v8, 0);
      int32x4_t v39 = vmlal_high_lane_s16(v39, v9, v8, 1);
      int32x4_t v40 = vmlal_lane_s16(v40, *(int16x4_t *)v10.i8, v8, 2);
      int32x4_t v41 = vmlal_high_lane_s16(v41, v10, v8, 3);
      if (v47 <= 3)
      {
        if (v47)
        {
          if (v47 == 1)
          {
            int16x4_t v56 = (int16x4_t)*v35;
          }
          else
          {
            if (v47 == 2) {
              int16x4_t v57 = 0;
            }
            else {
              int16x4_t v57 = (int16x4_t)v35[2];
            }
            v10.i8[0] = *v35;
            v10.i8[4] = v35[1];
            int16x4_t v56 = vuzp1_s16(*(int16x4_t *)v10.i8, v57);
          }
        }
        else
        {
          int16x4_t v56 = 0;
        }
        v9.i64[0] = *(void *)&v56 & 0xFF00FF00FF00FFLL;
        int32x4_t v42 = vmlal_s16(v42, *(int16x4_t *)v9.i8, v8);
        goto LABEL_92;
      }
      ++v33;
      __int32 v49 = *(_DWORD *)v35;
      v35 += 4;
      v9.i32[0] = v49;
      v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
      int32x4_t v42 = vmlal_s16(v42, *(int16x4_t *)v9.i8, v8);
      BOOL v50 = __OFSUB__(v47, 4);
      v47 -= 4;
      if ((v47 < 0) ^ v50 | (v47 == 0)) {
        goto LABEL_92;
      }
    }
  }
  return result;
}

int *resample_horizontal<unsigned char,int,3,true>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a6;
    uint64_t v14 = a6[1];
    unint64_t v130 = a7[1];
    unint64_t v131 = *a7;
    unint64_t v15 = v131 / 3;
    if (v131 / 3 >= v130) {
      unint64_t v15 = a7[1];
    }
    unint64_t v16 = a4;
    uint64_t v17 = 2 * a2 + 8;
    unint64_t v18 = (char *)result + v17 * a4;
    unint64_t v19 = *(int *)&v18[-v17 + 4] + (uint64_t)*(int *)&v18[-v17];
    if (v15 < v19) {
      unint64_t v19 = v15;
    }
    unint64_t v20 = 1;
    if (a2 <= 3) {
      unint64_t v20 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    if (a2 % 5) {
      unsigned int v21 = a2 % 5;
    }
    else {
      unsigned int v21 = 5;
    }
    if (a2 % 5) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = a2 > 4;
    }
    uint64_t v23 = ((3 * v21 + 15) & 0x1FFFFFFF0) + 15 * (a2 / 5 - v22);
    unint64_t v24 = a4 - v20;
    int16x8_t v25 = vdupq_n_s16(v21);
    if (a2 >= 5) {
      unsigned int v26 = 5;
    }
    else {
      unsigned int v26 = a2;
    }
    int8x16_t v27 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v26), (uint16x8_t)xmmword_1850CD7D0);
    BOOL v28 = a2 == (__int16)a2 && a4 > v20;
    char v29 = !v28;
    char v129 = v29;
    if (v24 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v24;
    }
    v31.i64[0] = 0x200000002000;
    v31.i64[1] = 0x200000002000;
    v32.i64[0] = 0xFF000000FFLL;
    v32.i64[1] = 0xFF000000FFLL;
    int8x16_t v33 = (int8x16_t)vcgtq_s16(v25, (int16x8_t)xmmword_1850CD7D0);
    while (1)
    {
      unint64_t v34 = *(int32x4_t **)(a5 + 8 * v12);
      if (v129)
      {
        unint64_t v35 = 0;
        uint64_t v36 = result;
      }
      else
      {
        unint64_t v35 = 0;
        uint64_t v36 = result;
        while (1)
        {
          uint64_t v37 = *v36;
          int32x4_t v38 = (uint8x16_t *)(v13 + 3 * v37);
          int32x4_t v39 = (uint8x16_t *)((char *)v38 + v23);
          if ((unint64_t)v38->u64 + v23 > 3 * v19 + v13) {
            break;
          }
          if (v38 >= v39)
          {
            int32x4_t v44 = 0uLL;
            int32x4_t v45 = 0uLL;
            int32x4_t v46 = 0uLL;
            int32x4_t v47 = 0uLL;
            int32x4_t v48 = 0uLL;
            int32x4_t v49 = 0uLL;
          }
          else
          {
            int32x4_t v40 = (int8x16_t *)(v36 + 2);
            int v41 = v36[1];
            int32x4_t v42 = (uint8x8_t *)(v14 + v37);
            unint64_t v43 = (unint64_t)&v39[-2].u64[1];
            if ((unint64_t)v38 < v43)
            {
              int32x4_t v46 = 0uLL;
              int32x4_t v47 = 0uLL;
              int32x4_t v48 = 0uLL;
              int32x4_t v49 = 0uLL;
              int32x4_t v44 = 0uLL;
              int32x4_t v45 = 0uLL;
              do
              {
                int8x16_t v66 = *v40;
                int32x4_t v40 = (int8x16_t *)((char *)v40 + 10);
                int16x8_t v67 = (int16x8_t)vandq_s8(v66, v27);
                uint8x16_t v68 = *v38;
                int32x4_t v38 = (uint8x16_t *)((char *)v38 + 15);
                int16x8_t v10 = (int16x8_t)vmovl_high_u8(v68);
                int16x8_t v69 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v68.i8);
                int16x8_t v11 = (int16x8_t)vqtbl1q_s8((int8x16_t)v67, (int8x16_t)xmmword_1850CD7E0);
                int16x8_t v70 = (int16x8_t)vqtbl1q_s8((int8x16_t)v67, (int8x16_t)xmmword_1850CD7F0);
                int32x4_t v49 = vmlal_high_s16(v49, v10, v11);
                int32x4_t v47 = vmlal_high_s16(v47, v69, v70);
                int32x4_t v48 = vmlal_s16(v48, *(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
                *(uint8x8_t *)v68.i8 = *v42;
                int32x4_t v42 = (uint8x8_t *)((char *)v42 + 5);
                v10.i64[0] = v68.i64[0];
                int32x4_t v46 = vmlal_s16(v46, *(int16x4_t *)v69.i8, *(int16x4_t *)v70.i8);
                int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v68.i8);
                int32x4_t v45 = vmlal_high_s16(v45, v9, v67);
                int32x4_t v44 = vmlal_s16(v44, *(int16x4_t *)v9.i8, *(int16x4_t *)v67.i8);
                v41 -= 5;
              }
              while ((unint64_t)v38 < v43);
            }
            else
            {
              int32x4_t v44 = 0uLL;
              int32x4_t v45 = 0uLL;
              int32x4_t v46 = 0uLL;
              int32x4_t v47 = 0uLL;
              int32x4_t v48 = 0uLL;
              int32x4_t v49 = 0uLL;
            }
            if (v41 >= 1)
            {
              if (v41 >= 9)
              {
                int8x16_t v50 = *v40;
                int32x4_t v40 = (int8x16_t *)((char *)v40 + 10);
                int16x8_t v51 = (int16x8_t)vandq_s8(v50, v27);
                uint8x16_t v52 = *v38;
                int32x4_t v38 = (uint8x16_t *)((char *)v38 + 15);
                int16x8_t v53 = (int16x8_t)vmovl_high_u8(v52);
                int16x8_t v54 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8);
                int16x8_t v55 = (int16x8_t)vqtbl1q_s8((int8x16_t)v51, (int8x16_t)xmmword_1850CD7E0);
                int16x8_t v56 = (int16x8_t)vqtbl1q_s8((int8x16_t)v51, (int8x16_t)xmmword_1850CD7F0);
                int32x4_t v49 = vmlal_high_s16(v49, v53, v55);
                int32x4_t v47 = vmlal_high_s16(v47, v54, v56);
                int32x4_t v48 = vmlal_s16(v48, *(int16x4_t *)v53.i8, *(int16x4_t *)v55.i8);
                int32x4_t v46 = vmlal_s16(v46, *(int16x4_t *)v54.i8, *(int16x4_t *)v56.i8);
                *(uint8x8_t *)v52.i8 = *v42;
                int32x4_t v42 = (uint8x8_t *)((char *)v42 + 5);
                int16x8_t v57 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8);
                int32x4_t v45 = vmlal_high_s16(v45, v57, v51);
                int32x4_t v44 = vmlal_s16(v44, *(int16x4_t *)v57.i8, *(int16x4_t *)v51.i8);
              }
              int16x8_t v58 = (int16x8_t)vandq_s8(*v40, v33);
              int16x8_t v10 = (int16x8_t)vmovl_high_u8(*v38);
              int16x8_t v59 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v38->i8);
              int16x8_t v11 = (int16x8_t)vqtbl1q_s8((int8x16_t)v58, (int8x16_t)xmmword_1850CD7E0);
              int16x8_t v60 = (int16x8_t)vqtbl1q_s8((int8x16_t)v58, (int8x16_t)xmmword_1850CD7F0);
              int32x4_t v49 = vmlal_high_s16(v49, v10, v11);
              int32x4_t v47 = vmlal_high_s16(v47, v59, v60);
              int32x4_t v48 = vmlal_s16(v48, *(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
              int32x4_t v46 = vmlal_s16(v46, *(int16x4_t *)v59.i8, *(int16x4_t *)v60.i8);
              int16x8_t v9 = (int16x8_t)vmovl_u8(*v42);
              int32x4_t v45 = vmlal_high_s16(v45, v9, v58);
              int32x4_t v44 = vmlal_s16(v44, *(int16x4_t *)v9.i8, *(int16x4_t *)v58.i8);
            }
          }
          int16x8_t v8 = (int16x8_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 4uLL);
          int32x4_t v61 = vaddq_s32((int32x4_t)v8, v46);
          int8x16_t v62 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL).u64[0], v47);
          int32x4_t v63 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(v61, (int32x4_t)vextq_s8((int8x16_t)v61, v62, 0xCuLL)), vaddq_s32((int32x4_t)vextq_s8(v62, (int8x16_t)v48, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          int32x4_t v64 = (int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 0xCuLL);
          v64.i32[2] = 0;
          int8x16_t v65 = (int8x16_t)vaddq_s32(v64, v44);
          v63.i32[3] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)vadd_s32(vadd_s32(*(int32x2_t *)v65.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)), vdup_lane_s32(*(int32x2_t *)v65.i8, 1)).u32[0], v31), 0xEuLL), v32), (int32x4_t)0).u32[0];
          *v34++ = v63;
          ++v35;
          uint64_t v36 = (int *)((char *)v36 + v17);
          if (v35 == v30)
          {
            unint64_t v35 = v30;
            break;
          }
        }
      }
      if (v35 < v16) {
        break;
      }
LABEL_198:
      v13 += v131;
      v14 += v130;
      if (++v12 == a8) {
        return result;
      }
    }
    while (1)
    {
      LODWORD(v71) = v36[1];
      uint64_t v72 = *v36;
      if ((int)v72 >= (int)v19) {
        int v73 = v19;
      }
      else {
        int v73 = *v36;
      }
      int v74 = v19 - v73;
      if ((int)v71 >= v74) {
        LODWORD(v71) = v74;
      }
      if ((int)v71 < 1)
      {
        int32x4_t v83 = 0uLL;
        int32x4_t v84 = 0uLL;
        int32x4_t v79 = 0uLL;
        int32x4_t v80 = 0uLL;
        int32x4_t v81 = 0uLL;
        int32x4_t v82 = 0uLL;
        goto LABEL_197;
      }
      unint64_t v75 = (unsigned __int8 *)(v13 + 3 * v72);
      unint64_t v76 = (unint64_t)&v75[3 * (int)v71 - 24];
      int v77 = (__int8 *)(v14 + v72);
      int v78 = (int8x16_t *)(v36 + 2);
      if ((unint64_t)v75 >= v76)
      {
        int32x4_t v79 = 0uLL;
        int32x4_t v80 = 0uLL;
        int32x4_t v81 = 0uLL;
        int32x4_t v82 = 0uLL;
        int32x4_t v83 = 0uLL;
        int32x4_t v84 = 0uLL;
        goto LABEL_109;
      }
      uint64_t v71 = (int)v71;
      int32x4_t v79 = 0uLL;
      int32x4_t v80 = 0uLL;
      int32x4_t v81 = 0uLL;
      int32x4_t v82 = 0uLL;
      int32x4_t v83 = 0uLL;
      int32x4_t v84 = 0uLL;
      do
      {
        unint64_t v85 = v18 - (char *)v78;
        if ((unint64_t)(v18 - (char *)v78) >= 0x10) {
          unint64_t v85 = 16;
        }
        if (v85 >= 0x10)
        {
          int16x8_t v8 = (int16x8_t)vandq_s8(*v78, v27);
LABEL_58:
          unsigned int v86 = v71;
          goto LABEL_59;
        }
        if (v71)
        {
          if (v71 < 4)
          {
            if (v71 == 1)
            {
              v8.i16[0] = v78->i16[0];
            }
            else
            {
              if (v71 == 2) {
                int16x4_t v96 = 0;
              }
              else {
                int16x4_t v96 = (int16x4_t)v78->u16[2];
              }
              v9.i16[0] = v78->i16[0];
              v9.i16[2] = v78->i16[1];
              *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v96);
            }
            v8.i64[1] = 0;
          }
          else
          {
            if (v71 == 4)
            {
              v9.i64[0] = 0;
            }
            else if (v71 == 5)
            {
              v9.i16[0] = v78->i16[4];
            }
            else
            {
              if (v71 == 6)
              {
                int16x4_t v97 = 0;
              }
              else
              {
                if (v71) {
                  __int32 v98 = 0;
                }
                else {
                  __int32 v98 = v78->u16[7];
                }
                v97.i32[0] = v78->u16[6];
                v97.i32[1] = v98;
              }
              v9.i16[0] = v78->i16[4];
              v9.i16[2] = v78->i16[5];
              *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v97);
            }
            v8.i64[0] = v78->i64[0];
            v8.i64[1] = v9.i64[0];
          }
          goto LABEL_58;
        }
        unsigned int v86 = 0;
        int16x8_t v8 = 0uLL;
LABEL_59:
        uint8x16_t v87 = *(uint8x16_t *)v75;
        v75 += 15;
        uint8x16_t v88 = v87;
        if (v86)
        {
          if (v86 < 4)
          {
            if (v71)
            {
              if (v71 == 1)
              {
                v11.i64[0] = *v77;
              }
              else
              {
                if (v86 == 2) {
                  int16x4_t v91 = 0;
                }
                else {
                  int16x4_t v91 = (int16x4_t)v77[2];
                }
                v11.i8[0] = *v77;
                v11.i8[4] = v77[1];
                *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v11.i8, v91);
              }
            }
            else
            {
              v11.i64[0] = 0;
            }
            v10.i32[1] = 0;
            v10.i8[0] = v11.i8[0];
            v10.i8[1] = v11.i8[2];
            v10.i8[2] = v11.i8[4];
            v10.i8[3] = v11.i8[6];
          }
          else
          {
            if (v71 == 4)
            {
              int8x8_t v89 = 0;
            }
            else if (v71 == 5)
            {
              int8x8_t v89 = (int8x8_t)v77[4];
            }
            else
            {
              if (v86 == 6)
              {
                int16x4_t v90 = 0;
              }
              else
              {
                if (v71) {
                  __int32 v92 = 0;
                }
                else {
                  __int32 v92 = v77[7];
                }
                v90.i32[0] = v77[6];
                v90.i32[1] = v92;
              }
              v11.i8[0] = v77[4];
              v11.i8[4] = v77[5];
              int8x8_t v89 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v11.i8, v90);
            }
            v11.i32[0] = *(_DWORD *)v77;
            *(int8x8_t *)v10.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8), v89);
          }
        }
        else
        {
          v10.i64[0] = 0;
        }
        int v78 = (int8x16_t *)((char *)v78 + 10);
        int16x8_t v11 = (int16x8_t)vmovl_high_u8(v88);
        int16x8_t v93 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v88.i8);
        int16x8_t v94 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7E0);
        int16x8_t v95 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7F0);
        int32x4_t v82 = vmlal_high_s16(v82, v11, v94);
        int32x4_t v81 = vmlal_s16(v81, *(int16x4_t *)v11.i8, *(int16x4_t *)v94.i8);
        int32x4_t v80 = vmlal_high_s16(v80, v93, v95);
        int32x4_t v79 = vmlal_s16(v79, *(int16x4_t *)v93.i8, *(int16x4_t *)v95.i8);
        v77 += 5;
        int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
        v71 -= 5;
        int32x4_t v84 = vmlal_high_s16(v84, v9, v8);
        int32x4_t v83 = vmlal_s16(v83, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
      }
      while ((unint64_t)v75 < v76);
      if ((int)v71 >= 1)
      {
LABEL_109:
        uint64_t v99 = 0;
        unint64_t v100 = v71;
        uint64_t v101 = 3 * v71;
        int v102 = v71 << 16;
        int v103 = 3 * v71;
        do
        {
          unint64_t v104 = v18 - (char *)v78;
          if ((unint64_t)(v18 - (char *)v78) >= 0x10) {
            unint64_t v104 = 16;
          }
          if (v104 < 0x10)
          {
            if (v100 < 4)
            {
              if (v101 + v99 == 3)
              {
                v8.i16[0] = v78->i16[0];
              }
              else
              {
                if (v101 + v99 == 6) {
                  int16x4_t v111 = 0;
                }
                else {
                  int16x4_t v111 = (int16x4_t)v78->u16[2];
                }
                v9.i16[0] = v78->i16[0];
                v9.i16[2] = v78->i16[1];
                *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v111);
              }
              v8.i64[1] = 0;
              int v78 = (int8x16_t *)((char *)v78 + 10);
LABEL_149:
              uint64_t v115 = v101 + v99;
              if ((v103 + v99) < 8)
              {
                if ((v103 + v99) < 4)
                {
                  if (v115)
                  {
                    if (v115 == 1)
                    {
                      int16x4_t v117 = 0;
                      v9.i64[0] = *v75;
                    }
                    else
                    {
                      v9.i8[0] = *v75;
                      v9.i8[4] = v75[1];
                      int16x4_t v117 = (int16x4_t)v75[2];
                    }
                    int16x4_t v121 = vuzp1_s16(*(int16x4_t *)v9.i8, v117);
                  }
                  else
                  {
                    int16x4_t v121 = 0;
                  }
                  v106.i32[1] = 0;
                  v106.i8[0] = v121.i8[0];
                  v106.i8[1] = v121.i8[2];
                  v106.i8[2] = v121.i8[4];
                  v106.i8[3] = v121.i8[6];
                }
                else
                {
                  if (v115 == 4)
                  {
                    int8x8_t v116 = 0;
                  }
                  else if (v115 == 5)
                  {
                    int8x8_t v116 = (int8x8_t)v75[4];
                  }
                  else
                  {
                    if (v101 + v99 == 6) {
                      int16x4_t v120 = 0;
                    }
                    else {
                      int16x4_t v120 = (int16x4_t)v75[6];
                    }
                    v10.i8[0] = v75[4];
                    v10.i8[4] = v75[5];
                    int8x8_t v116 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, v120);
                  }
                  v10.i32[0] = *(_DWORD *)v75;
                  *(int8x8_t *)v106.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v116);
                }
                v106.i64[1] = 0;
              }
              else
              {
                if (v115 == 8)
                {
                  v11.i64[0] = 0;
                }
                else if ((unint64_t)(v115 - 8) < 4)
                {
                  if (v101 + v99 == 9)
                  {
                    uint64_t v119 = 0;
                    uint64_t v118 = v75[8];
                  }
                  else
                  {
                    LOBYTE(v118) = v75[8];
                    BYTE4(v118) = v75[9];
                    uint64_t v119 = v75[10];
                  }
                  v11.i32[1] = 0;
                  v11.i8[0] = v118;
                  v11.i8[1] = BYTE4(v118);
                  v11.i8[2] = v119;
                  v11.i8[3] = BYTE4(v119);
                }
                else
                {
                  if (v115 == 12)
                  {
                    v9.i64[0] = 0;
                  }
                  else if (v115 == 13)
                  {
                    v9.i64[0] = v75[12];
                  }
                  else
                  {
                    if (v115) {
                      __int16 v123 = 0;
                    }
                    else {
                      __int16 v123 = v75[15];
                    }
                    v9.i8[0] = v75[12];
                    v9.i8[4] = v75[13];
                    v9.i16[1] = v9.i16[2];
                    v9.i16[2] = v75[14];
                    v9.i16[3] = v123;
                  }
                  v10.i32[0] = *((_DWORD *)v75 + 2);
                  *(int8x8_t *)v11.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), *(int8x8_t *)v9.i8);
                }
                v106.i64[0] = *(void *)v75;
                v106.i64[1] = v11.i64[0];
              }
              goto LABEL_118;
            }
            if (v100 == 4)
            {
              v9.i64[0] = 0;
            }
            else if (v100 == 5)
            {
              v9.i16[0] = v78->i16[4];
            }
            else
            {
              if (v101 + v99 == 18)
              {
                int16x4_t v122 = 0;
              }
              else
              {
                if (v100) {
                  __int32 v113 = 0;
                }
                else {
                  __int32 v113 = v78->u16[7];
                }
                v122.i32[0] = v78->u16[6];
                v122.i32[1] = v113;
              }
              v9.i16[0] = v78->i16[4];
              v9.i16[2] = v78->i16[5];
              *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v122);
            }
            v8.i64[0] = v78->i64[0];
            v8.i64[1] = v9.i64[0];
          }
          else
          {
            unsigned int v105 = v102 >> 16;
            if (v102 >> 16 >= 8) {
              unsigned int v105 = 8;
            }
            int16x8_t v9 = *(int16x8_t *)v78;
            int16x8_t v8 = (int16x8_t)vandq_s8(*v78, (int8x16_t)vcgtq_s16(vdupq_n_s16(v105), (int16x8_t)xmmword_1850CD7D0));
          }
          int v78 = (int8x16_t *)((char *)v78 + 10);
          if (v100 < 6) {
            goto LABEL_149;
          }
          uint8x16_t v106 = *(uint8x16_t *)v75;
LABEL_118:
          if (v100 < 8)
          {
            if (v100 < 4)
            {
              if (v101 + v99 == 3)
              {
                v11.i64[0] = *v77;
              }
              else
              {
                if (v101 + v99 == 6) {
                  int16x4_t v112 = 0;
                }
                else {
                  int16x4_t v112 = (int16x4_t)v77[2];
                }
                v11.i8[0] = *v77;
                v11.i8[4] = v77[1];
                *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v11.i8, v112);
              }
              v10.i32[1] = 0;
              v10.i8[0] = v11.i8[0];
              v10.i8[1] = v11.i8[2];
              v10.i8[2] = v11.i8[4];
              v10.i8[3] = v11.i8[6];
            }
            else
            {
              if (v100 == 4)
              {
                int8x8_t v110 = 0;
              }
              else if (v100 == 5)
              {
                int8x8_t v110 = (int8x8_t)v77[4];
              }
              else
              {
                if (v101 + v99 == 18) {
                  int16x4_t v114 = 0;
                }
                else {
                  int16x4_t v114 = (int16x4_t)v77[6];
                }
                v11.i8[0] = v77[4];
                v11.i8[4] = v77[5];
                int8x8_t v110 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v11.i8, v114);
              }
              v11.i32[0] = *(_DWORD *)v77;
              *(int8x8_t *)v10.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8), v110);
            }
          }
          else
          {
            v10.i64[0] = *(void *)v77;
          }
          v75 += 15;
          int16x8_t v11 = (int16x8_t)vmovl_high_u8(v106);
          int16x8_t v107 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v106.i8);
          int16x8_t v108 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7E0);
          int16x8_t v109 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_1850CD7F0);
          int32x4_t v80 = vmlal_high_s16(v80, v107, v109);
          int32x4_t v82 = vmlal_high_s16(v82, v11, v108);
          int32x4_t v81 = vmlal_s16(v81, *(int16x4_t *)v11.i8, *(int16x4_t *)v108.i8);
          int32x4_t v79 = vmlal_s16(v79, *(int16x4_t *)v107.i8, *(int16x4_t *)v109.i8);
          v77 += 5;
          int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
          v99 -= 15;
          v102 -= 327680;
          int32x4_t v84 = vmlal_high_s16(v84, v9, v8);
          int32x4_t v83 = vmlal_s16(v83, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
          BOOL v28 = (uint64_t)v100 <= 5;
          v100 -= 5;
        }
        while (!v28);
      }
LABEL_197:
      int16x8_t v8 = (int16x8_t)vextq_s8((int8x16_t)v81, (int8x16_t)v82, 4uLL);
      int32x4_t v124 = vaddq_s32((int32x4_t)v8, v79);
      int8x16_t v125 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0], v80);
      int32x4_t v126 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v124, v125, 0xCuLL), v124), vaddq_s32((int32x4_t)vextq_s8(v125, (int8x16_t)v81, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
      int32x4_t v127 = (int32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v84, 0xCuLL);
      v127.i32[2] = 0;
      int8x16_t v128 = (int8x16_t)vaddq_s32(v127, v83);
      v126.i32[3] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)vadd_s32(vadd_s32(*(int32x2_t *)v128.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL)), vdup_lane_s32(*(int32x2_t *)v128.i8, 1)).u32[0], v31), 0xEuLL), v32), (int32x4_t)0).u32[0];
      *v34++ = v126;
      ++v35;
      uint64_t v36 = (int *)((char *)v36 + v17);
      if (v35 == v16) {
        goto LABEL_198;
      }
    }
  }
  return result;
}

int *resample_horizontal<unsigned char,int,5,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if ((int)a4 >= 1 && a8 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a6;
    unint64_t v131 = *a7;
    unint64_t v14 = v131 / 5;
    uint64_t v15 = 2 * a2;
    uint64_t v16 = v15 + 8;
    uint64_t v17 = (char *)result + (v15 + 8) * a4;
    if (v131 / 5 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8]) {
      unint64_t v14 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    }
    if (a2 <= 3) {
      unint64_t v18 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    else {
      unint64_t v18 = 1;
    }
    unsigned int v19 = a2 % 6;
    BOOL v20 = a2 > 5;
    if (a2 % 6) {
      BOOL v20 = 0;
    }
    else {
      unsigned int v19 = 6;
    }
    uint64_t v21 = ((5 * v19 + 31) & 0x1FFFFFFE0) + 30 * (a2 / 6 - v20);
    unint64_t v22 = a4 - v18;
    int16x8_t v23 = vdupq_n_s16(v19);
    if (a2 >= 6) {
      unsigned int v24 = 6;
    }
    else {
      unsigned int v24 = a2;
    }
    int8x16_t v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v24), (uint16x8_t)xmmword_1850CD7D0);
    uint64_t v26 = a8;
    BOOL v27 = a2 == (__int16)a2 && a4 > v18;
    int v28 = v27;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    int8x16_t v29 = (int8x16_t)vcgtq_s16(v23, (int16x8_t)xmmword_1850CD7D0);
    v30.i64[0] = 0x200000002000;
    v30.i64[1] = 0x200000002000;
    v31.i64[0] = 0xFF000000FFLL;
    v31.i64[1] = 0xFF000000FFLL;
    do
    {
      int32x4_t v32 = *(int32x4_t **)(a5 + 8 * v12);
      unint64_t v33 = 0;
      if (v28)
      {
        unint64_t v34 = result;
        while (1)
        {
          unint64_t v35 = (uint8x16_t *)(v13 + 5 * *v34);
          uint64_t v36 = (uint8x16_t *)((char *)v35 + v21);
          if ((unint64_t)v35->u64 + v21 > 5 * v14 + v13) {
            break;
          }
          if (v35 >= v36)
          {
            int32x4_t v40 = 0uLL;
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            int32x4_t v43 = 0uLL;
            int32x4_t v44 = 0uLL;
            int32x4_t v45 = 0uLL;
            int32x4_t v46 = 0uLL;
            int32x4_t v47 = 0uLL;
          }
          else
          {
            uint64_t v37 = (int8x16_t *)(v34 + 2);
            int v38 = v34[1];
            unint64_t v39 = (unint64_t)&v36[-2];
            int32x4_t v40 = 0uLL;
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            int32x4_t v43 = 0uLL;
            int32x4_t v44 = 0uLL;
            int32x4_t v45 = 0uLL;
            int32x4_t v46 = 0uLL;
            int32x4_t v47 = 0uLL;
            while ((unint64_t)v35 < v39)
            {
              int8x16_t v48 = *v37;
              uint64_t v37 = (int8x16_t *)((char *)v37 + 12);
              int8x16_t v8 = vandq_s8(v48, v25);
              uint8x16_t v49 = *v35;
              uint8x16_t v50 = v35[1];
              unint64_t v35 = (uint8x16_t *)((char *)v35 + 30);
              int16x8_t v11 = (int16x8_t)vmovl_high_u8(v50);
              int16x8_t v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
              int16x8_t v51 = (int16x8_t)vmovl_high_u8(v49);
              int8x16_t v52 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v49.i8);
              int16x8_t v53 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD800);
              int16x8_t v54 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD810);
              int16x8_t v55 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD820);
              int32x4_t v41 = vmlal_s16(v41, (int16x4_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              int32x4_t v43 = vmlal_high_s16(v43, v51, v55);
              int32x4_t v44 = vmlal_s16(v44, *(int16x4_t *)v10.i8, *(int16x4_t *)v54.i8);
              int32x4_t v42 = vmlal_s16(v42, *(int16x4_t *)v51.i8, *(int16x4_t *)v55.i8);
              int32x4_t v40 = vmlal_lane_s16(v40, *(int16x4_t *)v52.i8, *(int16x4_t *)v8.i8, 0);
              int32x4_t v45 = vmlal_high_s16(v45, v10, v54);
              int32x4_t v46 = vmlal_s16(v46, *(int16x4_t *)v11.i8, *(int16x4_t *)v53.i8);
              int32x4_t v47 = vmlal_high_s16(v47, v11, v53);
              v38 -= 6;
            }
            if (v38 >= 1)
            {
              int8x16_t v8 = vandq_s8(*v37, v29);
              uint8x16_t v56 = v35[1];
              int16x8_t v11 = (int16x8_t)vmovl_high_u8(v56);
              int16x8_t v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v56.i8);
              int16x8_t v57 = (int16x8_t)vmovl_high_u8(*v35);
              int8x16_t v58 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v35->i8);
              int16x8_t v59 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD800);
              int16x8_t v60 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD810);
              int16x8_t v61 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD820);
              int32x4_t v41 = vmlal_s16(v41, (int16x4_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              int32x4_t v43 = vmlal_high_s16(v43, v57, v61);
              int32x4_t v40 = vmlal_lane_s16(v40, *(int16x4_t *)v58.i8, *(int16x4_t *)v8.i8, 0);
              int32x4_t v45 = vmlal_high_s16(v45, v10, v60);
              int32x4_t v44 = vmlal_s16(v44, *(int16x4_t *)v10.i8, *(int16x4_t *)v60.i8);
              int32x4_t v42 = vmlal_s16(v42, *(int16x4_t *)v57.i8, *(int16x4_t *)v61.i8);
              int32x4_t v46 = vmlal_s16(v46, *(int16x4_t *)v11.i8, *(int16x4_t *)v59.i8);
              int32x4_t v47 = vmlal_high_s16(v47, v11, v59);
            }
          }
          int32x4_t v9 = (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL);
          int32x4_t v62 = vaddq_s32(v40, (int32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 0xCuLL));
          int32x4_t v63 = vaddq_s32(v43, (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL));
          int32x4_t v64 = vaddq_s32(v41, (int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 0xCuLL));
          int8x16_t v65 = (int8x16_t)vaddq_s32(v42, v9);
          *int32x4_t v32 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v64, v65, 4uLL), v62), vaddq_s32((int32x4_t)vextq_s8(v65, (int8x16_t)v63, 8uLL), v30)), 0xEuLL), v31), (int32x4_t)0);
          v32[1].i32[0] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v65.i8, 1), v64), vaddq_s32(vdupq_laneq_s32(v63, 2), v30)), 0xEuLL), v31), (int32x4_t)0).u32[0];
          int32x4_t v32 = (int32x4_t *)((char *)v32 + 20);
          ++v33;
          unint64_t v34 = (int *)((char *)v34 + v16);
          if (v33 == v22)
          {
            unint64_t v33 = v22;
            break;
          }
        }
      }
      else
      {
        unint64_t v34 = result;
      }
      if (v33 < a4)
      {
        do
        {
          uint64_t v66 = *v34;
          if ((int)v66 >= (int)v14) {
            int v67 = v14;
          }
          else {
            int v67 = *v34;
          }
          int v68 = v14 - v67;
          if (v34[1] >= v68) {
            int v69 = v68;
          }
          else {
            int v69 = v34[1];
          }
          if (v69 < 1)
          {
            int32x4_t v73 = 0uLL;
            int32x4_t v75 = 0uLL;
            int32x4_t v76 = 0uLL;
            int32x4_t v77 = 0uLL;
            int32x4_t v78 = 0uLL;
            int32x4_t v79 = 0uLL;
            int32x4_t v80 = 0uLL;
            int32x4_t v81 = 0uLL;
          }
          else
          {
            int16x8_t v70 = (uint8x16_t *)(v13 + 5 * v66);
            unint64_t v71 = (unint64_t)&v70[-2] + 5 * v69;
            uint64_t v72 = (int8x16_t *)(v34 + 2);
            int32x4_t v73 = 0uLL;
            if ((unint64_t)v70 >= v71)
            {
              int32x4_t v75 = 0uLL;
              int32x4_t v76 = 0uLL;
              int32x4_t v77 = 0uLL;
              int32x4_t v78 = 0uLL;
              int32x4_t v79 = 0uLL;
              int32x4_t v80 = 0uLL;
              int32x4_t v81 = 0uLL;
              goto LABEL_77;
            }
            uint64_t v74 = v69;
            int32x4_t v75 = 0uLL;
            int32x4_t v76 = 0uLL;
            int32x4_t v77 = 0uLL;
            int32x4_t v78 = 0uLL;
            int32x4_t v79 = 0uLL;
            int32x4_t v80 = 0uLL;
            int32x4_t v81 = 0uLL;
            do
            {
              unint64_t v82 = v17 - (char *)v72;
              if ((unint64_t)(v17 - (char *)v72) >= 0x10) {
                unint64_t v82 = 16;
              }
              if (v82 < 0x10)
              {
                if (v74)
                {
                  if (v74 < 4)
                  {
                    if (v74 == 1)
                    {
                      v8.i16[0] = v72->i16[0];
                    }
                    else
                    {
                      if (v74 == 2) {
                        int16x4_t v89 = 0;
                      }
                      else {
                        int16x4_t v89 = (int16x4_t)v72->u16[2];
                      }
                      v10.i16[0] = v72->i16[0];
                      v10.i16[2] = v72->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v89);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v74 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v74 == 5)
                    {
                      v9.i16[0] = v72->i16[4];
                    }
                    else
                    {
                      if (v74 == 6)
                      {
                        int16x4_t v90 = 0;
                      }
                      else
                      {
                        if (v69) {
                          __int32 v91 = 0;
                        }
                        else {
                          __int32 v91 = v72->u16[7];
                        }
                        v90.i32[0] = v72->u16[6];
                        v90.i32[1] = v91;
                      }
                      v10.i16[0] = v72->i16[4];
                      v10.i16[2] = v72->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v90);
                    }
                    v8.i64[0] = v72->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  int8x16_t v8 = 0uLL;
                }
              }
              else
              {
                int8x16_t v8 = vandq_s8(*v72, v25);
              }
              uint64_t v72 = (int8x16_t *)((char *)v72 + 12);
              uint8x16_t v83 = *v70;
              uint8x16_t v84 = v70[1];
              int16x8_t v70 = (uint8x16_t *)((char *)v70 + 30);
              int16x8_t v11 = (int16x8_t)vmovl_high_u8(v84);
              int16x8_t v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v84.i8);
              int16x8_t v85 = (int16x8_t)vmovl_high_u8(v83);
              int32x4_t v9 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v83.i8);
              int16x8_t v86 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD800);
              int16x8_t v87 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD810);
              int16x8_t v88 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD820);
              int32x4_t v73 = vmlal_lane_s16(v73, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8, 0);
              int32x4_t v77 = vmlal_high_s16(v77, v85, v88);
              int32x4_t v76 = vmlal_s16(v76, *(int16x4_t *)v85.i8, *(int16x4_t *)v88.i8);
              int32x4_t v78 = vmlal_s16(v78, *(int16x4_t *)v10.i8, *(int16x4_t *)v87.i8);
              int32x4_t v79 = vmlal_high_s16(v79, v10, v87);
              int32x4_t v75 = vmlal_s16(v75, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              int32x4_t v80 = vmlal_s16(v80, *(int16x4_t *)v11.i8, *(int16x4_t *)v86.i8);
              int32x4_t v81 = vmlal_high_s16(v81, v11, v86);
              v74 -= 6;
            }
            while ((unint64_t)v70 < v71);
            if ((int)v74 >= 1)
            {
              int v69 = v74;
LABEL_77:
              uint64_t v92 = 0;
              char v93 = v69;
              uint64_t v94 = 5 * v69;
              int v95 = v69 << 16;
              unint64_t v96 = v69;
              int v97 = 5 * v69;
              while (2)
              {
                uint64_t v98 = v94 + v92;
                unint64_t v99 = v17 - (char *)v72;
                if ((unint64_t)(v17 - (char *)v72) >= 0x10) {
                  unint64_t v99 = 16;
                }
                if (v99 < 0x10)
                {
                  if (v96 >= 4)
                  {
                    if (v96 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v96 == 5)
                    {
                      v9.i16[0] = v72->i16[4];
                    }
                    else
                    {
                      if (v94 + v92 == 30)
                      {
                        int16x4_t v113 = 0;
                      }
                      else
                      {
                        if (v93) {
                          __int32 v129 = 0;
                        }
                        else {
                          __int32 v129 = v72->u16[7];
                        }
                        v113.i32[0] = v72->u16[6];
                        v113.i32[1] = v129;
                      }
                      v10.i16[0] = v72->i16[4];
                      v10.i16[2] = v72->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v113);
                    }
                    v8.i64[0] = v72->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v98 == 5)
                  {
                    v8.i16[0] = v72->i16[0];
                  }
                  else
                  {
                    if (v94 + v92 == 10) {
                      v9.i64[0] = 0;
                    }
                    else {
                      v9.i64[0] = v72->u16[2];
                    }
                    v10.i16[0] = v72->i16[0];
                    v10.i16[2] = v72->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
                  }
                  v8.i64[1] = 0;
                  uint64_t v72 = (int8x16_t *)((char *)v72 + 12);
                }
                else
                {
                  unsigned int v100 = v95 >> 16;
                  if (v95 >> 16 >= 8) {
                    unsigned int v100 = 8;
                  }
                  int32x4_t v9 = (int32x4_t)vcgtq_s16(vdupq_n_s16(v100), (int16x8_t)xmmword_1850CD7D0);
                  int16x8_t v10 = *(int16x8_t *)v72;
                  int8x16_t v8 = vandq_s8(*v72, (int8x16_t)v9);
LABEL_84:
                  uint64_t v72 = (int8x16_t *)((char *)v72 + 12);
                  if (v96 >= 7)
                  {
                    uint8x16_t v101 = *v70;
                    uint8x16_t v102 = v70[1];
                    goto LABEL_86;
                  }
                }
                uint64_t v130 = v94 + v92;
                unsigned int v128 = v97 + v92;
                if ((v97 + v92) < 0x10)
                {
                  if (v128 < 8)
                  {
                    if (v128 < 4)
                    {
                      if (v130)
                      {
                        if (v130 == 1)
                        {
                          int16x4_t v111 = 0;
                          v9.i64[0] = v70->u8[0];
                        }
                        else
                        {
                          v9.i8[0] = v70->i8[0];
                          v9.i8[4] = v70->i8[1];
                          int16x4_t v111 = (int16x4_t)v70->u8[2];
                        }
                        int16x4_t v118 = vuzp1_s16(*(int16x4_t *)v9.i8, v111);
                      }
                      else
                      {
                        int16x4_t v118 = 0;
                      }
                      v101.i32[1] = 0;
                      v101.i8[0] = v118.i8[0];
                      v101.i8[1] = v118.i8[2];
                      v101.i8[2] = v118.i8[4];
                      v101.i8[3] = v118.i8[6];
                    }
                    else
                    {
                      if (v130 == 4)
                      {
                        int8x8_t v117 = 0;
                      }
                      else
                      {
                        int8x8_t v110 = &v70->i8[4];
                        if (v130 == 5)
                        {
                          v10.i64[0] = 0;
                          v9.i64[0] = *v110;
                        }
                        else
                        {
                          v9.i8[0] = *v110;
                          v9.i8[4] = v70->i8[5];
                          v10.i64[0] = v70->u8[6];
                        }
                        int8x8_t v117 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v10.i8);
                      }
                      v10.i32[0] = v70->i32[0];
                      *(int8x8_t *)v101.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v117);
                    }
                    v101.i64[1] = 0;
                  }
                  else
                  {
                    if (v94 + v92 == 8)
                    {
                      v10.i64[0] = 0;
                    }
                    else if ((unint64_t)(v94 + v92 - 8) < 4)
                    {
                      if (v94 + v92 == 9)
                      {
                        int16x4_t v119 = (int16x4_t)v70->u8[8];
                      }
                      else
                      {
                        if (v94 + v92 == 10) {
                          int16x4_t v112 = 0;
                        }
                        else {
                          int16x4_t v112 = (int16x4_t)v70->u8[10];
                        }
                        v10.i8[0] = v70->i8[8];
                        v10.i8[4] = v70->i8[9];
                        int16x4_t v119 = vuzp1_s16(*(int16x4_t *)v10.i8, v112);
                      }
                      v10.i32[1] = 0;
                      v10.i8[0] = v119.i8[0];
                      v10.i8[1] = v119.i8[2];
                      v10.i8[2] = v119.i8[4];
                      v10.i8[3] = v119.i8[6];
                    }
                    else
                    {
                      if (v130 == 12)
                      {
                        int8x8_t v120 = 0;
                      }
                      else
                      {
                        int16x8_t v109 = &v70->i8[12];
                        if (v130 == 13)
                        {
                          v10.i64[0] = 0;
                          v9.i64[0] = *v109;
                        }
                        else
                        {
                          v9.i8[0] = *v109;
                          v9.i8[4] = v70->i8[13];
                          v10.i64[0] = v70->u8[14];
                        }
                        int8x8_t v120 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v10.i8);
                      }
                      v10.i32[0] = v70->i32[2];
                      *(int8x8_t *)v10.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v120);
                    }
                    v101.i64[0] = v70->i64[0];
                    v101.i64[1] = v10.i64[0];
                  }
                }
                else
                {
                  uint8x16_t v101 = *v70;
                  unint64_t v107 = v130 - 16;
                  if (v130 != 16)
                  {
                    if (v107 < 8)
                    {
                      if (v107 < 4)
                      {
                        v102.i64[0] = v70[1].u8[0];
                        v102.i8[1] = v70[1].i8[1];
                        v102.i8[2] = v70[1].i8[2];
                      }
                      else
                      {
                        if (v130 == 20)
                        {
                          int8x8_t v121 = 0;
                        }
                        else
                        {
                          if (v130 == 21)
                          {
                            v11.i64[0] = 0;
                            v10.i64[0] = v70[1].u8[4];
                          }
                          else
                          {
                            v10.i8[0] = v70[1].i8[4];
                            v10.i8[4] = v70[1].i8[5];
                            v11.i64[0] = v70[1].u8[6];
                          }
                          int8x8_t v121 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
                        }
                        v11.i32[0] = v70[1].i32[0];
                        *(int8x8_t *)v102.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8), v121);
                      }
                      v102.i64[1] = 0;
                    }
                    else
                    {
                      if (v94 + v92 == 24)
                      {
                        int8x8_t v114 = 0;
                      }
                      else if ((unint64_t)(v94 + v92 - 24) < 4)
                      {
                        if (v98 == 25)
                        {
                          uint64_t v116 = 0;
                          uint64_t v115 = v70[1].u8[8];
                        }
                        else
                        {
                          LOBYTE(v115) = v70[1].i8[8];
                          BYTE4(v115) = v70[1].i8[9];
                          uint64_t v116 = v70[1].u8[10];
                        }
                        v114.i32[1] = 0;
                        v114.i8[0] = v115;
                        v114.i8[1] = BYTE4(v115);
                        v114.i8[2] = v116;
                        v114.i8[3] = BYTE4(v116);
                      }
                      else
                      {
                        if (v130 == 28)
                        {
                          int8x8_t v108 = 0;
                        }
                        else if (v130 == 29)
                        {
                          int8x8_t v108 = (int8x8_t)v70[1].u8[12];
                        }
                        else
                        {
                          if (v94 + v92 == 30)
                          {
                            int16x4_t v123 = 0;
                          }
                          else
                          {
                            if (v93) {
                              __int32 v122 = 0;
                            }
                            else {
                              __int32 v122 = v70[1].u8[15];
                            }
                            v123.i32[0] = v70[1].u8[14];
                            v123.i32[1] = v122;
                          }
                          v11.i8[0] = v70[1].i8[12];
                          v11.i8[4] = v70[1].i8[13];
                          int8x8_t v108 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v11.i8, v123);
                        }
                        v11.i32[0] = v70[1].i32[2];
                        int8x8_t v114 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8), v108);
                      }
                      v102.i64[0] = v70[1].i64[0];
                      v102.u64[1] = (unint64_t)v114;
                    }
LABEL_86:
                    int16x8_t v70 = (uint8x16_t *)((char *)v70 + 30);
                    int16x8_t v11 = (int16x8_t)vmovl_high_u8(v102);
                    int16x8_t v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v102.i8);
                    int16x8_t v103 = (int16x8_t)vmovl_high_u8(v101);
                    int32x4_t v9 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v101.i8);
                    int16x8_t v104 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD800);
                    int16x8_t v105 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD810);
                    int16x8_t v106 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1850CD820);
                    int32x4_t v73 = vmlal_lane_s16(v73, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8, 0);
                    int32x4_t v77 = vmlal_high_s16(v77, v103, v106);
                    int32x4_t v76 = vmlal_s16(v76, *(int16x4_t *)v103.i8, *(int16x4_t *)v106.i8);
                    int32x4_t v78 = vmlal_s16(v78, *(int16x4_t *)v10.i8, *(int16x4_t *)v105.i8);
                    int32x4_t v75 = vmlal_s16(v75, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
                    int32x4_t v79 = vmlal_high_s16(v79, v10, v105);
                    int32x4_t v80 = vmlal_s16(v80, *(int16x4_t *)v11.i8, *(int16x4_t *)v104.i8);
                    int32x4_t v81 = vmlal_high_s16(v81, v11, v104);
                    v92 -= 30;
                    v95 -= 393216;
                    BOOL v27 = (uint64_t)v96 <= 6;
                    v96 -= 6;
                    if (v27) {
                      goto LABEL_178;
                    }
                    continue;
                  }
                }
                break;
              }
              uint8x16_t v102 = 0uLL;
              goto LABEL_86;
            }
          }
LABEL_178:
          int32x4_t v9 = (int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v80, 0xCuLL);
          int32x4_t v124 = vaddq_s32(v73, (int32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 0xCuLL));
          int32x4_t v125 = vaddq_s32(v77, (int32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v81, 0xCuLL));
          int32x4_t v126 = vaddq_s32(v75, (int32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v79, 0xCuLL));
          int8x16_t v127 = (int8x16_t)vaddq_s32(v76, v9);
          *int32x4_t v32 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v126, v127, 4uLL), v124), vaddq_s32((int32x4_t)vextq_s8(v127, (int8x16_t)v125, 8uLL), v30)), 0xEuLL), v31), (int32x4_t)0);
          v32[1].i32[0] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v127.i8, 1), v126), vaddq_s32(vdupq_laneq_s32(v125, 2), v30)), 0xEuLL), v31), (int32x4_t)0).u32[0];
          int32x4_t v32 = (int32x4_t *)((char *)v32 + 20);
          ++v33;
          unint64_t v34 = (int *)((char *)v34 + v16);
        }
        while (v33 != a4);
      }
      v13 += v131;
      ++v12;
    }
    while (v12 != v26);
  }
  return result;
}

int *resample_horizontal<unsigned char,int,2,false>(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  if (a4 >= 1 && a8 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a6;
    unint64_t v13 = *a7;
    uint64_t v14 = v13 >> 1;
    unint64_t v15 = a4;
    uint64_t v16 = 2 * a2;
    uint64_t v17 = v16 + 8;
    unint64_t v18 = (char *)result + (v16 + 8) * a4;
    if (v13 >> 1 >= *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8]) {
      uint64_t v14 = *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8];
    }
    if (a2 <= 3) {
      unint64_t v19 = (2 * a2 + 23) / (2 * a2 + 8);
    }
    else {
      unint64_t v19 = 1;
    }
    BOOL v20 = a2 > 7;
    unsigned int v21 = a2 & 7;
    if ((a2 & 7) != 0) {
      BOOL v20 = 0;
    }
    else {
      unsigned int v21 = 8;
    }
    unint64_t v22 = ((2 * (_BYTE)v21 + 15) & 0x30) + (unint64_t)(16 * ((a2 >> 3) - v20));
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(v21);
    if (a2 >= 8) {
      unsigned int v24 = 8;
    }
    else {
      unsigned int v24 = a2;
    }
    int8x16_t v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v24), (uint16x8_t)xmmword_1850CD7D0);
    uint64_t v26 = a8;
    BOOL v28 = a2 == (__int16)a2 && v15 > v19;
    if (v15 - v19 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v15 - v19;
    }
    int8x16_t v30 = (int8x16_t)vcgtq_u16(v23, (uint16x8_t)xmmword_1850CD7D0);
    do
    {
      int32x4_t v31 = *(int32x2_t **)(a5 + 8 * v11);
      unint64_t v32 = 0;
      if (v28)
      {
        unint64_t v33 = result;
        while (1)
        {
          unint64_t v34 = (uint8x16_t *)(v12 + 2 * *v33);
          unint64_t v35 = (uint8x16_t *)((char *)v34 + v22);
          if ((unint64_t)v34->u64 + v22 > 2 * v14 + v12) {
            break;
          }
          if (v34 >= v35)
          {
            int32x4_t v39 = 0uLL;
            int32x4_t v40 = 0uLL;
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
          }
          else
          {
            uint64_t v36 = (int8x16_t *)(v33 + 2);
            int v37 = v33[1];
            unint64_t v38 = (unint64_t)&v35[-1];
            int32x4_t v39 = 0uLL;
            int32x4_t v40 = 0uLL;
            int32x4_t v41 = 0uLL;
            int32x4_t v42 = 0uLL;
            while ((unint64_t)v34 < v38)
            {
              int8x16_t v43 = *v36++;
              int16x8_t v44 = (int16x8_t)vandq_s8(v43, v25);
              uint8x16_t v45 = *v34++;
              int16x8_t v10 = (int16x8_t)vmovl_high_u8(v45);
              int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v45.i8);
              int16x8_t v46 = vzip2q_s16(v44, v44);
              int16x8_t v8 = vzip1q_s16(v44, v44);
              int32x4_t v42 = vmlal_high_s16(v42, v10, v46);
              int32x4_t v40 = vmlal_high_s16(v40, v9, v8);
              int32x4_t v41 = vmlal_s16(v41, *(int16x4_t *)v10.i8, *(int16x4_t *)v46.i8);
              int32x4_t v39 = vmlal_s16(v39, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v37 -= 8;
            }
            if (v37 >= 1)
            {
              int16x8_t v47 = (int16x8_t)vandq_s8(*v36, v30);
              int16x8_t v10 = (int16x8_t)vmovl_high_u8(*v34);
              int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v34->i8);
              int16x8_t v48 = vzip2q_s16(v47, v47);
              int16x8_t v8 = vzip1q_s16(v47, v47);
              int32x4_t v42 = vmlal_high_s16(v42, v10, v48);
              int32x4_t v40 = vmlal_high_s16(v40, v9, v8);
              int32x4_t v41 = vmlal_s16(v41, *(int16x4_t *)v10.i8, *(int16x4_t *)v48.i8);
              int32x4_t v39 = vmlal_s16(v39, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          int8x16_t v49 = (int8x16_t)vaddq_s32(vaddq_s32(v39, v41), vaddq_s32(v40, v42));
          *v31++ = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), vadd_s32(*(int32x2_t *)v49.i8, (int32x2_t)0x200000002000)), 0xEuLL), (int32x2_t)0xFF000000FFLL), 0);
          ++v32;
          unint64_t v33 = (int *)((char *)v33 + v17);
          if (v32 == v29)
          {
            unint64_t v32 = v29;
            break;
          }
        }
      }
      else
      {
        unint64_t v33 = result;
      }
      if (v32 < v15)
      {
        do
        {
          int v50 = v33[1];
          uint64_t v51 = *v33;
          if ((int)v51 >= (int)v14) {
            int v52 = v14;
          }
          else {
            int v52 = *v33;
          }
          int v53 = v14 - v52;
          if (v50 >= v53) {
            int v50 = v53;
          }
          if (v50 < 1)
          {
            int32x4_t v58 = 0uLL;
            int32x4_t v59 = 0uLL;
            int32x4_t v60 = 0uLL;
            int32x4_t v61 = 0uLL;
          }
          else
          {
            int16x8_t v54 = (uint8x16_t *)(v12 + 2 * v51);
            unint64_t v55 = (unint64_t)&v54[-1] + 2 * v50;
            uint8x16_t v56 = (int8x16_t *)(v33 + 2);
            if ((unint64_t)v54 >= v55)
            {
              int32x4_t v58 = 0uLL;
              int32x4_t v59 = 0uLL;
              int32x4_t v60 = 0uLL;
              int32x4_t v61 = 0uLL;
              goto LABEL_77;
            }
            uint64_t v57 = v50;
            int32x4_t v58 = 0uLL;
            int32x4_t v59 = 0uLL;
            int32x4_t v60 = 0uLL;
            int32x4_t v61 = 0uLL;
            do
            {
              unint64_t v62 = v18 - (char *)v56;
              if ((unint64_t)(v18 - (char *)v56) >= 0x10) {
                unint64_t v62 = 16;
              }
              if (v62 < 0x10)
              {
                if (v57)
                {
                  if (v57 < 4)
                  {
                    if (v57 == 1)
                    {
                      v8.i16[0] = v56->i16[0];
                    }
                    else
                    {
                      if (v57 == 2) {
                        int16x4_t v65 = 0;
                      }
                      else {
                        int16x4_t v65 = (int16x4_t)v56->u16[2];
                      }
                      v9.i16[0] = v56->i16[0];
                      v9.i16[2] = v56->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v65);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v57 == 4)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v57 == 5)
                    {
                      v9.i16[0] = v56->i16[4];
                    }
                    else
                    {
                      if (v57 == 6)
                      {
                        int16x4_t v66 = 0;
                      }
                      else
                      {
                        if (v50) {
                          __int32 v67 = 0;
                        }
                        else {
                          __int32 v67 = v56->u16[7];
                        }
                        v66.i32[0] = v56->u16[6];
                        v66.i32[1] = v67;
                      }
                      v9.i16[0] = v56->i16[4];
                      v9.i16[2] = v56->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v66);
                    }
                    v8.i64[0] = v56->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  int16x8_t v8 = 0uLL;
                }
              }
              else
              {
                int16x8_t v8 = (int16x8_t)vandq_s8(*v56, v25);
              }
              ++v56;
              uint8x16_t v63 = *v54++;
              int16x8_t v10 = (int16x8_t)vmovl_high_u8(v63);
              int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v63.i8);
              int16x8_t v64 = vzip2q_s16(v8, v8);
              int16x8_t v8 = vzip1q_s16(v8, v8);
              int32x4_t v61 = vmlal_high_s16(v61, v10, v64);
              int32x4_t v60 = vmlal_s16(v60, *(int16x4_t *)v10.i8, *(int16x4_t *)v64.i8);
              int32x4_t v59 = vmlal_high_s16(v59, v9, v8);
              int32x4_t v58 = vmlal_s16(v58, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v57 -= 8;
            }
            while ((unint64_t)v54 < v55);
            if ((int)v57 >= 1)
            {
              int v50 = v57;
LABEL_77:
              uint64_t v68 = v50 + 8;
              int v69 = 2 * v50;
              int v70 = v50 << 16;
              while (2)
              {
                uint64_t v71 = v68 - 8;
                unint64_t v72 = v18 - (char *)v56;
                if ((unint64_t)(v18 - (char *)v56) >= 0x10) {
                  unint64_t v72 = 16;
                }
                if (v72 < 0x10)
                {
                  if ((unint64_t)v71 >= 4)
                  {
                    if (v68 == 12)
                    {
                      v9.i64[0] = 0;
                    }
                    else if (v68 == 13)
                    {
                      v9.i16[0] = v56->i16[4];
                    }
                    else
                    {
                      if (v68 == 14)
                      {
                        int16x4_t v77 = 0;
                      }
                      else
                      {
                        if (v50) {
                          __int32 v83 = 0;
                        }
                        else {
                          __int32 v83 = v56->u16[7];
                        }
                        v77.i32[0] = v56->u16[6];
                        v77.i32[1] = v83;
                      }
                      v9.i16[0] = v56->i16[4];
                      v9.i16[2] = v56->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v77);
                    }
                    v8.i64[0] = v56->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v68 == 9)
                  {
                    v8.i16[0] = v56->i16[0];
                  }
                  else
                  {
                    if (v68 == 10) {
                      int16x4_t v76 = 0;
                    }
                    else {
                      int16x4_t v76 = (int16x4_t)v56->u16[2];
                    }
                    v9.i16[0] = v56->i16[0];
                    v9.i16[2] = v56->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v76);
                  }
                  v8.i64[1] = 0;
                  ++v56;
                }
                else
                {
                  unsigned int v73 = v70 >> 16;
                  if (v70 >> 16 >= 8) {
                    unsigned int v73 = 8;
                  }
                  int16x8_t v9 = *(int16x8_t *)v56;
                  int16x8_t v8 = (int16x8_t)vandq_s8(*v56, (int8x16_t)vcgtq_s16(vdupq_n_s16(v73), (int16x8_t)xmmword_1850CD7D0));
LABEL_84:
                  ++v56;
                  if ((unint64_t)v71 >= 8)
                  {
                    uint8x16_t v74 = *v54;
                    goto LABEL_86;
                  }
                }
                if (v71 < 4)
                {
                  if (v71 < 2)
                  {
                    if (v68 == 9)
                    {
                      uint64_t v80 = 0;
                    }
                    else
                    {
                      LOBYTE(v80) = v54->i8[2];
                      BYTE4(v80) = v54->i8[3];
                    }
                    v74.i32[1] = 0;
                    v74.i16[0] = v54->i16[0];
                    v74.i8[2] = v80;
                    v74.i8[3] = BYTE4(v80);
                  }
                  else
                  {
                    if (v68 == 10)
                    {
                      int8x8_t v79 = 0;
                    }
                    else
                    {
                      if (v68 == 11) {
                        int16x4_t v82 = 0;
                      }
                      else {
                        int16x4_t v82 = (int16x4_t)v54->u8[6];
                      }
                      v10.i8[0] = v54->i8[4];
                      v10.i8[4] = v54->i8[5];
                      int8x8_t v79 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, v82);
                    }
                    v10.i32[0] = v54->i32[0];
                    *(int8x8_t *)v74.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v79);
                  }
                  v74.i64[1] = 0;
                }
                else
                {
                  if ((v69 & 0xFFFFFFFE) == 8)
                  {
                    v10.i64[0] = 0;
                  }
                  else if ((unint64_t)(v69 & 0xFFFFFFFE) - 8 < 4)
                  {
                    if (v68 == 13) {
                      uint64_t v81 = 0;
                    }
                    else {
                      uint64_t v81 = v54->u8[10];
                    }
                    v10.i32[1] = 0;
                    v10.i16[0] = v54->i16[4];
                    v10.i8[2] = v81;
                    v10.i8[3] = BYTE4(v81);
                  }
                  else
                  {
                    if (v68 == 14)
                    {
                      int8x8_t v78 = 0;
                    }
                    else
                    {
                      if (v68 == 15)
                      {
                        v9.i64[0] = 0;
                      }
                      else
                      {
                        v9.i8[0] = v54->i8[14];
                        v9.i8[4] = v54->i8[15];
                      }
                      v10.i8[0] = v54->i8[12];
                      v10.i8[4] = v54->i8[13];
                      int8x8_t v78 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
                    }
                    v10.i32[0] = v54->i32[2];
                    *(int8x8_t *)v10.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v78);
                  }
                  v74.i64[0] = v54->i64[0];
                  v74.i64[1] = v10.i64[0];
                }
LABEL_86:
                ++v54;
                int16x8_t v10 = (int16x8_t)vmovl_high_u8(v74);
                int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v74.i8);
                int16x8_t v75 = vzip2q_s16(v8, v8);
                int16x8_t v8 = vzip1q_s16(v8, v8);
                int32x4_t v60 = vmlal_s16(v60, *(int16x4_t *)v10.i8, *(int16x4_t *)v75.i8);
                int32x4_t v59 = vmlal_high_s16(v59, v9, v8);
                int32x4_t v61 = vmlal_high_s16(v61, v10, v75);
                int32x4_t v58 = vmlal_s16(v58, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v69 -= 16;
                v70 -= 0x80000;
                v68 -= 8;
                if (v71 <= 8) {
                  break;
                }
                continue;
              }
            }
          }
          int8x16_t v84 = (int8x16_t)vaddq_s32(vaddq_s32(v58, v60), vaddq_s32(v59, v61));
          *v31++ = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), vadd_s32(*(int32x2_t *)v84.i8, (int32x2_t)0x200000002000)), 0xEuLL), (int32x2_t)0xFF000000FFLL), 0);
          ++v32;
          unint64_t v33 = (int *)((char *)v33 + v17);
        }
        while (v32 != v15);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v26);
  }
  return result;
}

uint64_t use_template_resampling_code()
{
  if (CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken != -1) {
    dispatch_once(&CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken, &__block_literal_global_3_13621);
  }
  return CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::result;
}

uint64_t CGPDFAnnotationTypeID()
{
  if (CGPDFAnnotationTypeID_onceToken != -1) {
    dispatch_once(&CGPDFAnnotationTypeID_onceToken, &__block_literal_global);
  }
  return CGPDFAnnotationTypeID_id;
}

uint64_t __CGPDFAnnotationTypeID_block_invoke()
{
  uint64_t result = pdf_register_cftype((uint64_t)&CGPDFAnnotationTypeID_class);
  CGPDFAnnotationTypeID_idouble d = result;
  return result;
}

CFStringRef CGPDFAnnotationDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t Type = CGPDFAnnotationGetType(a1);
  int v4 = "Yes";
  if (*(void *)(a1 + 24)) {
    double v5 = "Yes";
  }
  else {
    double v5 = "No";
  }
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v6 = "Yes";
  }
  else {
    uint64_t v6 = "No";
  }
  if (!*(unsigned char *)(a1 + 56)) {
    int v4 = "No";
  }
  return CFStringCreateWithFormat(v2, 0, @"CGPDFAnnotation. Type? %d, Mutated? %s, BurnIn? %s IsGhost? %s", Type, v5, v6, v4);
}

uint64_t CGPDFAnnotationGetType(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 24);
  if (!v2) {
    goto LABEL_12;
  }
  unint64_t v3 = (const void *)CGPDFNameCreate("Subtype");
  int v4 = CFDictionaryGetValue(v2, v3);
  CFRelease(v3);
  if (!v4) {
    goto LABEL_12;
  }
  CFTypeID v5 = CFGetTypeID(v4);
  if (CGPDFNameTypeID_onceToken != -1) {
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_6_19993);
  }
  if (v5 == CGPDFNameTypeID_id)
  {
    uint64_t v6 = (unsigned __int8 *)v4[2];
    int v8 = *v6;
    uint64_t v7 = (const char *)(v6 + 1);
    if (v8 == 47) {
      int16x8_t v9 = v7;
    }
    else {
      int16x8_t v9 = (const char *)v4[2];
    }
    return CGPDFAnnotationTypeFromString(v9);
  }
  else
  {
LABEL_12:
    uint64_t v11 = *(CGPDFDictionary **)(a1 + 16);
    if (!v11) {
      return 26;
    }
    value = 0;
    if (!CGPDFDictionaryGetName(v11, "Subtype", (const char **)&value) || value == 0) {
      return 26;
    }
    else {
      return CGPDFAnnotationTypeFromString(value);
    }
  }
}

uint64_t CGPDFAnnotationTypeFromString(const char *a1)
{
  uint64_t result = strcmp(a1, "3D");
  if (result)
  {
    if (!strcmp(a1, "Caret"))
    {
      return 1;
    }
    else if (!strcmp(a1, "Circle"))
    {
      return 2;
    }
    else if (!strcmp(a1, "FileAttachment"))
    {
      return 3;
    }
    else if (!strcmp(a1, "FreeText"))
    {
      return 4;
    }
    else if (!strcmp(a1, "Highlight"))
    {
      return 5;
    }
    else if (!strcmp(a1, "Ink"))
    {
      return 6;
    }
    else if (!strcmp(a1, "Line"))
    {
      return 7;
    }
    else if (!strcmp(a1, "Link"))
    {
      return 8;
    }
    else if (!strcmp(a1, "Movie"))
    {
      return 9;
    }
    else if (!strcmp(a1, "Polygon"))
    {
      return 10;
    }
    else if (!strcmp(a1, "PolyLine"))
    {
      return 11;
    }
    else if (!strcmp(a1, "Popup"))
    {
      return 12;
    }
    else if (!strcmp(a1, "Redact"))
    {
      return 14;
    }
    else if (!strcmp(a1, "Screen"))
    {
      return 15;
    }
    else if (!strcmp(a1, "Sound"))
    {
      return 16;
    }
    else if (!strcmp(a1, "Square"))
    {
      return 17;
    }
    else if (!strcmp(a1, "Squiggly"))
    {
      return 18;
    }
    else if (!strcmp(a1, "Stamp"))
    {
      return 19;
    }
    else if (!strcmp(a1, "StrikeOut"))
    {
      return 20;
    }
    else if (!strcmp(a1, "Text"))
    {
      return 21;
    }
    else if (!strcmp(a1, "Underline"))
    {
      return 23;
    }
    else if (!strcmp(a1, "Widget"))
    {
      return 25;
    }
    else if (!strcmp(a1, "PrinterMark"))
    {
      return 13;
    }
    else if (!strcmp(a1, "TrapNet"))
    {
      return 22;
    }
    else if (!strcmp(a1, "Watermark"))
    {
      return 24;
    }
    else
    {
      return 26;
    }
  }
  return result;
}

void CGPDFAnnotationFinalize(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t CGPDFAnnotationCreate(const __CFDictionary *a1)
{
  if (CGPDFAnnotationTypeID_onceToken != -1) {
    dispatch_once(&CGPDFAnnotationTypeID_onceToken, &__block_literal_global);
  }
  uint64_t cftype = pdf_create_cftype();
  *(void *)(cftype + 16) = 0;
  *(void *)(cftype + 24) = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
  *(unsigned char *)(cftype + 32) = 0;
  *(void *)(cftype + 40) = 0;
  *(void *)(cftype + 48) = 0;
  *(unsigned char *)(cftype + 56) = 0;
  return cftype;
}

uint64_t CGPDFAnnotationCreateWithCGPDFDictionary(uint64_t a1)
{
  if (CGPDFAnnotationTypeID_onceToken != -1) {
    dispatch_once(&CGPDFAnnotationTypeID_onceToken, &__block_literal_global);
  }
  uint64_t result = pdf_create_cftype();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 56) = 0;
  return result;
}

CFMutableDictionaryRef CGPDFAnnotationGetDictionary(uint64_t a1)
{
  CFMutableDictionaryRef result = *(CFMutableDictionaryRef *)(a1 + 24);
  if (!result)
  {
    CFMutableDictionaryRef result = CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a1 + 16));
    *(void *)(a1 + 24) = result;
  }
  return result;
}

uint64_t CGPDFAnnotationGetCGPDFDictionary(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

float64_t CGPDFAnnotationGetRect(uint64_t a1)
{
  memset(v6, 0, sizeof(v6));
  if (!*(void *)(a1 + 24)
    || (CFDictionaryRef v2 = (const void *)CGPDFNameCreate("Rect"),
        char PDFRect = CGCFDictionaryGetPDFRect(*(const __CFDictionary **)(a1 + 24), v2, v6),
        CFRelease(v2),
        (PDFRect & 1) == 0))
  {
    int v4 = *(CGPDFDictionary **)(a1 + 16);
    if (v4) {
      CGPDFDictionaryGetRect(v4, "Rect", v6[0].f64);
    }
  }
  return v6[0].f64[0];
}

void CGContextDrawPDFAnnotation(CGContext *a1, uint64_t a2)
{
  if (!a2) {
    return;
  }
  int v4 = *(CGPDFDictionary **)(a2 + 16);
  if (!v4) {
    return;
  }
  value.CGFloat a = 0.0;
  if (!CGPDFDictionaryGetDictionary(v4, "AP", (CGPDFDictionaryRef *)&value)) {
    return;
  }
  v46.CGFloat a = 0.0;
  CGPDFDictionaryRef v49 = 0;
  if (!CGPDFDictionaryGetDictionary(*(CGPDFDictionaryRef *)&value.a, "N", &v49))
  {
    CGFloat a = value.a;
    uint64_t v7 = "N";
LABEL_8:
    if (!CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)&a, v7, (CGPDFStreamRef *)&v46)) {
      return;
    }
    goto LABEL_11;
  }
  int16x8_t v48 = 0;
  BOOL Name = CGPDFDictionaryGetName(*(CGPDFDictionaryRef *)(a2 + 16), "AS", (const char **)&v48);
  CGFloat a = *(double *)&v49;
  if (Name)
  {
    uint64_t v7 = v48;
    goto LABEL_8;
  }
  if (!CGPDFDictionaryGetStream(v49, "Off", (CGPDFStreamRef *)&v46)) {
    return;
  }
LABEL_11:
  if (*(void *)&v46.a)
  {
    uint64_t v8 = CGPDFFormCreate(*(CGPDFDictionary **)&v46.a);
    int16x8_t v9 = (void *)v8;
    int16x8_t v10 = (const CGAffineTransform *)(v8 + 56);
    if (!v8) {
      int16x8_t v10 = &CGAffineTransformIdentity;
    }
    long long v11 = *(_OWORD *)&v10->c;
    long long v12 = *(_OWORD *)&v10->a;
    long long v13 = v11;
    *(_OWORD *)&value.CGFloat a = *(_OWORD *)&v10->a;
    *(_OWORD *)&value.c = v11;
    *(_OWORD *)&value.tCGFloat x = *(_OWORD *)&v10->tx;
    uint64_t v14 = &CGRectNull;
    p_double height = &CGRectNull.size.height;
    p_CGFloat y = &CGRectNull.origin.y;
    p_CGSize size = &CGRectNull.size;
    if (v8)
    {
      p_CGSize size = (CGSize *)(v8 + 40);
      p_CGFloat y = (CGFloat *)(v8 + 32);
      uint64_t v14 = (const CGRect *)(v8 + 24);
      p_double height = (CGFloat *)(v8 + 48);
    }
    v50.size.double height = *p_height;
    v50.origin.CGFloat x = v14->origin.x;
    v50.origin.CGFloat y = *p_y;
    v50.size.double width = p_size->width;
    *(_OWORD *)&v46.CGFloat a = v12;
    *(_OWORD *)&v46.c = v13;
    *(_OWORD *)&v46.tCGFloat x = *(_OWORD *)&v10->tx;
    CGRect v42 = v50;
    CGRect v51 = CGRectApplyAffineTransform(v50, &v46);
    CGFloat x = v51.origin.x;
    double height = v51.size.height;
    CGFloat y = v51.origin.y;
    double width = v51.size.width;
    CGFloat Rect = CGPDFAnnotationGetRect(a2);
    double v22 = v21;
    double v24 = v23;
    double v26 = v25;
    if (v9)
    {
      BOOL v27 = (CGPDFStream *)v9[2];
      BOOL v28 = (CGPDFDictionary *)v9[13];
    }
    else
    {
      BOOL v27 = 0;
      BOOL v28 = 0;
    }
    uint64_t v29 = CGPDFDrawingContextCreateWithStream(v27, v28, 0);
    CGContextSaveGState(a1);
    BOOL v30 = v26 < 0.0 || v24 < 0.0;
    double v31 = Rect;
    if (v30)
    {
      v52.origin.CGFloat x = Rect;
      v52.origin.CGFloat y = v22;
      v52.size.double width = v24;
      v52.size.double height = v26;
      *(void *)&double v31 = (unint64_t)CGRectStandardize(v52);
    }
    BOOL v32 = height < 0.0 || width < 0.0;
    double v33 = x;
    if (v32)
    {
      v53.origin.CGFloat x = x;
      v53.size.double height = height;
      v53.origin.CGFloat y = y;
      v53.size.double width = width;
      *(void *)&double v33 = (unint64_t)CGRectStandardize(v53);
    }
    double v34 = y;
    double v35 = v31 - v33;
    if (v30)
    {
      v54.origin.CGFloat x = Rect;
      v54.origin.CGFloat y = v22;
      v54.size.double width = v24;
      v54.size.double height = v26;
      CGRect v55 = CGRectStandardize(v54);
      double v22 = v55.origin.y;
    }
    if (v32)
    {
      v56.origin.CGFloat x = x;
      v56.size.double height = height;
      v56.origin.CGFloat y = y;
      v56.size.double width = width;
      CGRect v57 = CGRectStandardize(v56);
      double v34 = v57.origin.y;
    }
    transform.CGFloat a = 1.0;
    transform.b = 0.0;
    transform.c = 0.0;
    transform.double d = 1.0;
    transform.tCGFloat x = (v24 - width) * 0.5 + v35;
    transform.tCGFloat y = (v26 - height) * 0.5 + v22 - v34;
    CGContextConcatCTM(a1, &transform);
    CGAffineTransform v46 = value;
    CGContextConcatCTM(a1, &v46);
    CGContextClipToRect(a1, v42);
    CGPDFDrawingContextDraw((uint64_t)v29, (uint64_t)a1, v36, v37, v38, v39, v40, v41);
    CGContextRestoreGState(a1);
    CGPDFDrawingContextRelease(v29);
    if (v9) {
      CFRelease(v9);
    }
  }
}

void CGPDFAnnotationSetAnnotationForKey(uint64_t a1, const char *a2, const void *a3)
{
  CFDictionarCGFloat y = *(__CFDictionary **)(a1 + 24);
  if (!CFDictionary)
  {
    CFDictionarCGFloat y = CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a1 + 16));
    *(void *)(a1 + 24) = CFDictionary;
  }

  CGPDFAppenderDictionarySetValue(CFDictionary, a2, a3);
}

uint64_t CGPDFAnnotationSetBurnIn(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

uint64_t CGPDFAnnotationGetBurnIn(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t CGPDFAnnotationSetIsGhost(uint64_t result, char a2)
{
  *(unsigned char *)(result + 56) = a2;
  return result;
}

CGPDFDictionary *CGPDFAnnotationIsPristine(uint64_t a1)
{
  CFMutableDictionaryRef result = *(CGPDFDictionary **)(a1 + 16);
  if (result)
  {
    CGAffineTransform value = 0;
    CFMutableDictionaryRef result = (CGPDFDictionary *)CGPDFDictionaryGetName(result, "AAPL:Hash", (const char **)&value);
    if (result)
    {
      CFStringRef v3 = *(const __CFString **)(a1 + 24);
      if (v3)
      {
        uint64_t Hash = CGPDFAppenderDictionaryCreateHash(v3);
      }
      else
      {
        CFDictionarCGFloat y = (const __CFString *)CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a1 + 16));
        uint64_t Hash = CGPDFAppenderDictionaryCreateHash(CFDictionary);
        CFRelease(CFDictionary);
      }
      uint64_t v6 = *(unsigned __int8 **)(Hash + 16);
      int v8 = *v6;
      uint64_t v7 = (const char *)(v6 + 1);
      if (v8 == 47) {
        int16x8_t v9 = v7;
      }
      else {
        int16x8_t v9 = *(const char **)(Hash + 16);
      }
      return (CGPDFDictionary *)(strcmp(value, v9) == 0);
    }
  }
  return result;
}

uint64_t CGPDFAnnotationIsVersioned()
{
  return 0;
}

BOOL RIPImageDataInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  initialize_skipping_conditional_var(a1, a2, 0, a3, a5, a6, a7, a8);
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 192) = xmmword_185210730;
  *(_OWORD *)(a1 + 208) = unk_185210740;
  *(_OWORD *)(a1 + 224) = xmmword_185210750;
  *(_OWORD *)(a1 + 128) = CGConditionalVarInitializer;
  *(_OWORD *)(a1 + 144) = unk_185210700;
  *(_OWORD *)(a1 + 160) = xmmword_185210710;
  *(_OWORD *)(a1 + 176) = unk_185210720;

  return CGConditionalVarPost(a1 + 128, v9, v10, v11, v12, v13, v14, v15);
}

CFTypeRef CPListInfoCopy(long long *a1, uint64_t a2)
{
  int v4 = *(const void **)(a2 + 40);
  if (v4) {
    CFRelease(v4);
  }
  long long v5 = a1[3];
  long long v6 = a1[4];
  long long v7 = a1[1];
  *(_OWORD *)(a2 + 32) = a1[2];
  long long v8 = *a1;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v7;
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void *splitParagraphAtTextLine(void *a1, uint64_t a2, unsigned int a3)
{
  int v4 = a1;
  uint64_t v5 = [a1 indexOf:a2];
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v6 = v5;
    long long v7 = (void *)[v4 parent];
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = [v7 indexOf:v4];
      if (v9 != 0x7FFFFFFFFFFFFFFFLL)
      {
        int v10 = v9;
        int v4 = (void *)[v4 copyAndSplitChildrenAtIndex:v6 + a3];
        [v8 add:v4 atIndex:(v10 + 1)];
      }
    }
  }
  return v4;
}

CGDataConsumerRef CGDataConsumerCreateFlateEncoder(void *a1)
{
  CFDictionaryRef v2 = (z_stream *)malloc_type_malloc(0xF8uLL, 0x2062DE7BuLL);
  v2->zalloc = (alloc_func)encoder_alloc;
  v2->zfree = (free_func)encoder_free;
  v2->opaque = 0;
  v2->next_iuint64_t n = 0;
  v2->avail_iuint64_t n = 0;
  v2->next_out = 0;
  v2->avail_out = 0;
  if (deflateInit_(v2, 1, "1.2.12", 112))
  {
    fprintf_l((FILE *)*MEMORY[0x1E4F143C8], 0, "deflateInit: error: %s.\n", v2->msg);
    free(v2);
    return 0;
  }
  else
  {
    v2->next_out = (Bytef *)&v2[1].avail_in;
    v2->avail_out = 128;
    if (a1) {
      CFRetain(a1);
    }
    v2[1].next_iuint64_t n = (Bytef *)a1;
    return CGDataConsumerCreate(v2, (const CGDataConsumerCallbacks *)&callbacks);
  }
}

void encoder_close(z_stream *a1)
{
  if (a1)
  {
    do_flush(a1, 4);
    if (a1->state)
    {
      int v2 = deflateEnd(a1);
      if (v2) {
        fprintf_l((FILE *)*MEMORY[0x1E4F143C8], 0, "deflateEnd: error %d: %s.\n", v2, a1->msg);
      }
    }
    next_iuint64_t n = a1[1].next_in;
    if (next_in)
    {
      if (next_in[56]
        || (int v4 = (void (*)(void))*((void *)next_in + 10)) == 0
        || (v4(*((void *)next_in + 2)), (next_iuint64_t n = a1[1].next_in) != 0))
      {
        CFRelease(next_in);
      }
    }
    free(a1);
  }
}

BOOL do_flush(z_streamp strm, int flush)
{
  int v4 = 0;
  unsigned int v5 = 0;
  strm->avail_iuint64_t n = 0;
  p_avail_iuint64_t n = (Bytef *)&strm[1].avail_in;
  uInt avail_out = strm->avail_out;
  while (avail_out == 128)
  {
LABEL_5:
    if (v4) {
      return v5 < 2;
    }
    int v8 = deflate(strm, flush);
    if (v8 == -5 && avail_out == 128) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = v8;
    }
    uInt avail_out = strm->avail_out;
    if (avail_out) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v5 == 1;
    }
    int v4 = v10;
    if (v5 >= 2)
    {
      unsigned int v5 = v8;
      return v5 < 2;
    }
  }
  if (CGDataConsumerPutBytes((uint64_t)strm[1].next_in, (uint64_t)p_avail_in, 128 - avail_out) == 128 - avail_out)
  {
    strm->next_out = p_avail_in;
    strm->uInt avail_out = 128;
    goto LABEL_5;
  }
  return 0;
}

z_stream *encoder_flush(z_stream *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeRef result = (z_stream *)do_flush(result, 0);
    if (result)
    {
      next_iuint64_t n = v1[1].next_in;
      if (next_in)
      {
        if (!next_in[56])
        {
          CFStringRef v3 = (uint64_t (*)(uint64_t))*((void *)next_in + 10);
          if (v3)
          {
            uint64_t v4 = *((void *)next_in + 2);
            return (z_stream *)v3(v4);
          }
        }
      }
    }
  }
  return result;
}

uint64_t encoder_write(uint64_t strm, uint64_t a2, uint64_t a3)
{
  if (!strm) {
    return strm;
  }
  uint64_t v4 = strm;
  *(_DWORD *)(strm + 8) = a3;
  *(void *)struint64_t m = a2;
  if (!a3)
  {
    unsigned int v7 = 0;
    return a3 - v7;
  }
  uint64_t v5 = strm + 120;
  while (1)
  {
    if (*(_DWORD *)(v4 + 32)) {
      goto LABEL_7;
    }
    if (CGDataConsumerPutBytes(*(void *)(v4 + 112), v4 + 120, 128) != 128) {
      break;
    }
    *(_DWORD *)(v4 + 32) = 128;
    *(void *)(v4 + 24) = v5;
LABEL_7:
    int v6 = deflate((z_streamp)v4, 0);
    unsigned int v7 = *(_DWORD *)(v4 + 8);
    if (v6 || !v7) {
      return a3 - v7;
    }
  }
  unsigned int v7 = *(_DWORD *)(v4 + 8);
  return a3 - v7;
}

void encoder_free(int a1, void *a2)
{
}

void *encoder_alloc(uint64_t a1, int a2, int a3)
{
  return malloc_type_malloc((a3 * a2), 0x705560E0uLL);
}

void TrueType::create_subset()
{
}

void sub_184D25AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  MEMORY[0x18532A2A0](v20, 0x10F3C4094E7248ELL);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:fe180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:fe180100]()
{
}

void std::__throw_length_error[abi:fe180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:fe180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E529EE68, MEMORY[0x1E4FBA1C8]);
}

void sub_184D25C08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:fe180100](std::logic_error *a1, const char *a2)
{
  CFTypeRef result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t TrueType::get_format(TrueType *this)
{
  return 1;
}

void TrueType::~TrueType(TrueType *this)
{
  SimpleFont::~SimpleFont(this);

  JUMPOUT(0x18532A2A0);
}

size_t __CGGetTempDirPath_block_invoke()
{
  size_t result = confstr(65537, &CGGetTempDirPath_tempDirPath, 0x400uLL);
  if (!result) {
    CGGetTempDirPath_tempDirPath = 0;
  }
  return result;
}

uint64_t CGFlexTRCToneMappingGetDefaultOptions()
{
  if (CGFlexTRCToneMappingGetDefaultOptions_predicate != -1) {
    dispatch_once(&CGFlexTRCToneMappingGetDefaultOptions_predicate, &__block_literal_global_130);
  }
  return CGFlexTRCToneMappingGetDefaultOptions_options;
}

void __CGFlexTRCToneMappingGetDefaultOptions_block_invoke()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"kCGFlexGTCTargetHeadroom";
  LODWORD(valuePtr) = 1065353216;
  CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CFDictionaryRef v0 = CFDictionaryCreate(0, (const void **)keys, (const void **)&valuePtr, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFNumberRef valuePtr = v0;
  keys[0] = @"kCGApplyFlexTRC";
  CGFlexTRCToneMappingGetDefaultOptions_options = (uint64_t)CFDictionaryCreate(0, (const void **)keys, (const void **)&valuePtr, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v0) {
    CFRelease(v0);
  }
}

uint64_t CGFlexLumaToneMappingGetDefaultOptions()
{
  if (CGFlexLumaToneMappingGetDefaultOptions_predicate != -1) {
    dispatch_once(&CGFlexLumaToneMappingGetDefaultOptions_predicate, &__block_literal_global_10);
  }
  return CGFlexLumaToneMappingGetDefaultOptions_options;
}

void __CGFlexLumaToneMappingGetDefaultOptions_block_invoke()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"kCGFlexGTCTargetHeadroom";
  LODWORD(valuePtr) = 1065353216;
  CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CFDictionaryRef v0 = CFDictionaryCreate(0, (const void **)keys, (const void **)&valuePtr, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFNumberRef valuePtr = v0;
  keys[0] = @"kCGApplyFlexLumaScaling";
  CGFlexLumaToneMappingGetDefaultOptions_options = (uint64_t)CFDictionaryCreate(0, (const void **)keys, (const void **)&valuePtr, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v0) {
    CFRelease(v0);
  }
}

void __clang_call_terminate(void *a1)
{
}

float CGGetFloatValue(const __CFNumber *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  CFTypeID TypeID = CFNumberGetTypeID();
  float result = 0.0;
  if (v2 == TypeID)
  {
    float valuePtr = 0.0;
    CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
    return valuePtr;
  }
  return result;
}

BOOL CG::DisplayListResourceColor::_equal_to(CG::DisplayListResourceColor *this, const CG::DisplayListResource *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)this - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8)))return 0; {
  size_t v4 = (CGColor *)*((void *)this + 2);
  }
  size_t v5 = (CGColor *)*((void *)a2 + 2);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || !CGColorEqualToColor(v4, v5)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)this, (uint64_t)a2);
}

BOOL std::type_info::operator==[abi:fe180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

BOOL CG::DisplayListResource::_equal_to(uint64_t a1, uint64_t a2)
{
  BOOL result = std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*(void *)a1 - 8) + 8), *(void *)(*(void *)(*(void *)a2 - 8) + 8));
  if (result) {
    return *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8);
  }
  return result;
}

void CG::DisplayListResourceColor::getChildResources(CG::DisplayListResourceColor *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    size_t v5 = (char *)operator new(8uLL);
    *(void *)size_t v5 = v4;
    int v6 = v5 + 8;
    *a2 = v5;
    a2[1] = v5 + 8;
    a2[2] = v5 + 8;
  }
  else
  {
    size_t v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7)
  {
    uint64_t v8 = v6 - v5;
    uint64_t v9 = (v6 - v5) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]();
    }
    if (v8 >> 2 > v10) {
      unint64_t v10 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (char *)(v11 + 8 * v9);
    *(void *)uint64_t v13 = v7;
    uint64_t v14 = v13 + 8;
    if (v6 != v5)
    {
      do
      {
        uint64_t v15 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v13 - 1) = v15;
        v13 -= 8;
      }
      while (v6 != v5);
      size_t v5 = *a2;
    }
    *a2 = v13;
    a2[1] = v14;
    a2[2] = (char *)(v11 + 8 * v12);
    if (v5) {
      operator delete(v5);
    }
    a2[1] = v14;
  }
}

void sub_184D26488(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<CG::DisplayListResource const*>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(8 * a1);
}

void std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:fe180100]()
{
}

void std::__throw_bad_array_new_length[abi:fe180100]()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

BOOL CG::DisplayListResourceImage::_equal_to(void *a1, void *a2, char a3)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*a1 - 8) + 8), *(void *)(*(void *)(*a2 - 8) + 8)))return 0; {
  uint64_t v6 = a1[2];
  }
  uint64_t v7 = a2[2];
  if (v6)
  {
    if (v7)
    {
      if (a3)
      {
        if (CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::predicate != -1) {
          dispatch_once(&CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::predicate, &__block_literal_global_144);
        }
        uint64_t v9 = CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::f(a1[2]);
        if (CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::predicate != -1) {
          dispatch_once(&CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::predicate, &__block_literal_global_7);
        }
        if (v9 == CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::f(a2[2])) {
          goto LABEL_15;
        }
      }
      else if (v6 == v7)
      {
        goto LABEL_15;
      }
    }
    return 0;
  }
  if (v7) {
    return 0;
  }
LABEL_15:

  return CG::DisplayListResource::_equal_to((uint64_t)a1, (uint64_t)a2);
}

uint64_t (*___ZNK2CG24DisplayListResourceImage9_equal_toERKNS_19DisplayListResourceEm_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(void)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageGetHash");
  }
  BOOL result = (uint64_t (*)(void))dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageGetHash");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageGetHash");
  }
  CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::f = result;
  return result;
}

uint64_t (*___ZNK2CG24DisplayListResourceImage9_equal_toERKNS_19DisplayListResourceEm_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(void)
{
  if (CGLibraryLoadImageIODYLD_once != -1) {
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_5_21597);
  }
  if (!CGLibraryLoadImageIODYLD_handle) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageGetHash");
  }
  BOOL result = (uint64_t (*)(void))dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageGetHash");
  if (!result) {
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageGetHash");
  }
  CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::f = result;
  return result;
}

void *CG::DisplayListResourceImage::getChildResources@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this[5];
  if (v2)
  {
    uint64_t v4 = operator new(8uLL);
    *a2 = v4;
    *uint64_t v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

BOOL CG::DisplayListResourceShading::_equal_to(void *a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!std::type_info::operator==[abi:fe180100](*(void *)(*(void *)(*a1 - 8) + 8), *(void *)(*(void *)(*a2 - 8) + 8)))return 0; {
  uint64_t v4 = a1[2];
  }
  uint64_t v5 = a2[2];
  if (!v4)
  {
    if (!v5) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v5 || *(_DWORD *)(v4 + 16) != *(_DWORD *)(v5 + 16)) {
    return 0;
  }
LABEL_6:

  return CG::DisplayListResource::_equal_to((uint64_t)a1, (uint64_t)a2);
}

void *CG::DisplayListResourceShading::getChildResources@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this[4];
  if (v2)
  {
    uint64_t v4 = operator new(8uLL);
    *a2 = v4;
    *uint64_t v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}